From trac at twistedmatrix.com  Sun May  3 00:05:17 2020
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 03 May 2020 06:05:17 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1588485917.17.8278761862118646507@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200503/124daeec/attachment.htm>

From ian at haywood.id.au  Mon May  4 22:17:20 2020
From: ian at haywood.id.au (Ian Haywood)
Date: Tue, 5 May 2020 14:17:20 +1000
Subject: [Twisted-Python] SMB server component for twisted
Message-ID: <012c4d63-d467-7559-46fd-8c6e9a782ba8@haywood.id.au>

I have begun work on a SMB (Server Message Block; Windows filesharing) 
server protocol for twisted.

Work so far is here: https://github.com/ihaywood3/twsmb

I'm looking for any advice particularly around what I should be doing so 
this code is suitable for inclusion in twisted.

Ian Haywood


From adi at roiban.ro  Tue May  5 04:14:57 2020
From: adi at roiban.ro (Adi Roiban)
Date: Tue, 5 May 2020 11:14:57 +0100
Subject: [Twisted-Python] SMB server component for twisted
In-Reply-To: <012c4d63-d467-7559-46fd-8c6e9a782ba8@haywood.id.au>
References: <012c4d63-d467-7559-46fd-8c6e9a782ba8@haywood.id.au>
Message-ID: <CAFycZ9erv5RHK8n=7Jw+b3EG29wS47BN+XMv8QhVkpReqqm7xQ@mail.gmail.com>

Hi Ian

On Tue, 5 May 2020 at 05:17, Ian Haywood <ian at haywood.id.au> wrote:

> I have begun work on a SMB (Server Message Block; Windows filesharing)
> server protocol for twisted.
>
> Work so far is here: https://github.com/ihaywood3/twsmb
>
> I'm looking for any advice particularly around what I should be doing so
> this code is suitable for inclusion in twisted.
>
> Ian Haywood


Not sure if you want the repo included in the Twisted GitHub organization
or the twisted/twisted repo?

I think is best to have the SMB protocol implementation as a separate repo
to be able to release at any time,
but it can be added to Twisted organization.
This is similar to the LDAP ldaptor repo.

I don't think there are any rules for adding repos to the GitHub
organization.

I would say, as a minimal requirement are:
* end user documentation
* dev documentation / CONTRIBUTORS file
* automated tests / CI

I have a long term goal for SMB3 protocol implementation (client and server
side).

I am currently considering reusing https://github.com/jborean93/smbprotocol
The network communication is not ideal... but the design is not that bad.
That repo already has the Python code for parsing SMB messages.

Regards
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200505/b66be53a/attachment.htm>

From vladier233 at gmail.com  Wed May  6 09:43:26 2020
From: vladier233 at gmail.com (Vladimir Chudyk)
Date: Wed, 6 May 2020 17:43:26 +0200
Subject: [Twisted-Python] how will twisted handle generator-based coroutines
 deprecation?
Message-ID: <CAFnOpdmYJRFSrk=mQDJ6M4j0DNeMnnc+GKd-nFNSOMKHLcF99w@mail.gmail.com>

Looking at the docs I found that Generators-based coroutines, something
that twisted's inline callbacks depend a lot, will be deprecated soon by
the time python 3.10 is released.

https://docs.python.org/3/library/asyncio-task.html#generator-based-coroutines


* NoteSupport for generator-based coroutines is deprecated and is scheduled
for removal in Python 3.10.*

This is a problem since any future python release will come without the
generator-based coroutines that twisted needs, so any higher version of
python 3.10 will, for the most part, completely broke a lot of twisted code
that already exists.
How will then twisted handle this deprecation?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200506/a8c42f7d/attachment.htm>

From exarkun at twistedmatrix.com  Wed May  6 10:11:35 2020
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Wed, 6 May 2020 12:11:35 -0400
Subject: [Twisted-Python] how will twisted handle generator-based
 coroutines deprecation?
In-Reply-To: <CAFnOpdmYJRFSrk=mQDJ6M4j0DNeMnnc+GKd-nFNSOMKHLcF99w@mail.gmail.com>
References: <CAFnOpdmYJRFSrk=mQDJ6M4j0DNeMnnc+GKd-nFNSOMKHLcF99w@mail.gmail.com>
Message-ID: <CAEeXt4NxgOvwTDQyZbGC1Uu+CoBKcoNqDbcsROzmhuci=YYxcg@mail.gmail.com>

On Wed, May 6, 2020 at 11:44 AM Vladimir Chudyk <vladier233 at gmail.com>
wrote:

> Looking at the docs I found that Generators-based coroutines, something
> that twisted's inline callbacks depend a lot, will be deprecated soon by
> the time python 3.10 is released.
>
>
> https://docs.python.org/3/library/asyncio-task.html#generator-based-coroutines
>
>
> * NoteSupport for generator-based coroutines is deprecated and is
> scheduled for removal in Python 3.10.*
>
> This is a problem since any future python release will come without the
> generator-based coroutines that twisted needs, so any higher version of
> python 3.10 will, for the most part, completely broke a lot of twisted code
> that already exists.
> How will then twisted handle this deprecation?
>

This seems to be a deprecation of the asyncio library's implementation of
generator-based coroutines.  It doesn't seem like it should affect any code
written using `inlineCallbacks`, only code that uses `asyncio.coroutine`.

Jean-Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200506/aa071ecd/attachment.htm>

From vladier233 at gmail.com  Thu May  7 00:38:25 2020
From: vladier233 at gmail.com (Vladimir Chudyk)
Date: Thu, 7 May 2020 08:38:25 +0200
Subject: [Twisted-Python] Twisted-Python Digest, Vol 194, Issue 3
In-Reply-To: <mailman.1.1588788001.16399.twisted-python@twistedmatrix.com>
References: <mailman.1.1588788001.16399.twisted-python@twistedmatrix.com>
Message-ID: <CAFnOpdmjnFccXwPohojNjnpGttVe5LJTc1hjNSChQcDfnukeVg@mail.gmail.com>

Thanks! I did not notice it was specific to the asyncio library.

Have a good day.

El mié., 6 may. 2020 a las 20:00, <twisted-python-request at twistedmatrix.com>
escribió:

> Send Twisted-Python mailing list submissions to
>         twisted-python at twistedmatrix.com
>
> To subscribe or unsubscribe via the World Wide Web, visit
>         https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> or, via email, send a message with subject or body 'help' to
>         twisted-python-request at twistedmatrix.com
>
> You can reach the person managing the list at
>         twisted-python-owner at twistedmatrix.com
>
> When replying, please edit your Subject line so it is more specific
> than "Re: Contents of Twisted-Python digest..."
>
>
> Today's Topics:
>
>    1. how will twisted handle generator-based coroutines
>       deprecation? (Vladimir Chudyk)
>    2. Re: how will twisted handle generator-based coroutines
>       deprecation? (Jean-Paul Calderone)
>
>
> ----------------------------------------------------------------------
>
> Message: 1
> Date: Wed, 6 May 2020 17:43:26 +0200
> From: Vladimir Chudyk <vladier233 at gmail.com>
> To: Twisted-Python at twistedmatrix.com
> Subject: [Twisted-Python] how will twisted handle generator-based
>         coroutines deprecation?
> Message-ID:
>         <CAFnOpdmYJRFSrk=
> mQDJ6M4j0DNeMnnc+GKd-nFNSOMKHLcF99w at mail.gmail.com>
> Content-Type: text/plain; charset="utf-8"
>
> Looking at the docs I found that Generators-based coroutines, something
> that twisted's inline callbacks depend a lot, will be deprecated soon by
> the time python 3.10 is released.
>
>
> https://docs.python.org/3/library/asyncio-task.html#generator-based-coroutines
>
>
> * NoteSupport for generator-based coroutines is deprecated and is scheduled
> for removal in Python 3.10.*
>
> This is a problem since any future python release will come without the
> generator-based coroutines that twisted needs, so any higher version of
> python 3.10 will, for the most part, completely broke a lot of twisted code
> that already exists.
> How will then twisted handle this deprecation?
> -------------- next part --------------
> An HTML attachment was scrubbed...
> URL:
> </pipermail/twisted-python/attachments/20200506/a8c42f7d/attachment-0001.htm>
>
> ------------------------------
>
> Message: 2
> Date: Wed, 6 May 2020 12:11:35 -0400
> From: Jean-Paul Calderone <exarkun at twistedmatrix.com>
> To: Twisted general discussion <twisted-python at twistedmatrix.com>
> Subject: Re: [Twisted-Python] how will twisted handle generator-based
>         coroutines deprecation?
> Message-ID:
>         <CAEeXt4NxgOvwTDQyZbGC1Uu+CoBKcoNqDbcsROzmhuci=
> YYxcg at mail.gmail.com>
> Content-Type: text/plain; charset="utf-8"
>
> On Wed, May 6, 2020 at 11:44 AM Vladimir Chudyk <vladier233 at gmail.com>
> wrote:
>
> > Looking at the docs I found that Generators-based coroutines, something
> > that twisted's inline callbacks depend a lot, will be deprecated soon by
> > the time python 3.10 is released.
> >
> >
> >
> https://docs.python.org/3/library/asyncio-task.html#generator-based-coroutines
> >
> >
> > * NoteSupport for generator-based coroutines is deprecated and is
> > scheduled for removal in Python 3.10.*
> >
> > This is a problem since any future python release will come without the
> > generator-based coroutines that twisted needs, so any higher version of
> > python 3.10 will, for the most part, completely broke a lot of twisted
> code
> > that already exists.
> > How will then twisted handle this deprecation?
> >
>
> This seems to be a deprecation of the asyncio library's implementation of
> generator-based coroutines.  It doesn't seem like it should affect any code
> written using `inlineCallbacks`, only code that uses `asyncio.coroutine`.
>
> Jean-Paul
> -------------- next part --------------
> An HTML attachment was scrubbed...
> URL:
> </pipermail/twisted-python/attachments/20200506/aa071ecd/attachment-0001.htm>
>
> ------------------------------
>
> Subject: Digest Footer
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> ------------------------------
>
> End of Twisted-Python Digest, Vol 194, Issue 3
> **********************************************
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200507/fc912c94/attachment.htm>

From glyph at twistedmatrix.com  Thu May  7 01:48:27 2020
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 7 May 2020 00:48:27 -0700
Subject: [Twisted-Python] SMB server component for twisted
In-Reply-To: <012c4d63-d467-7559-46fd-8c6e9a782ba8@haywood.id.au>
References: <012c4d63-d467-7559-46fd-8c6e9a782ba8@haywood.id.au>
Message-ID: <07B866D8-D8AF-41A8-BBCE-9BF4D7CAE0C2@twistedmatrix.com>



> On May 4, 2020, at 9:17 PM, Ian Haywood <ian at haywood.id.au> wrote:
> 
> I have begun work on a SMB (Server Message Block; Windows filesharing) server protocol for twisted.

Very exciting! Thanks for telling us about this. It would be great to have a memory-safe/Python implementation of SMB3!

> Work so far is here: https://github.com/ihaywood3/twsmb
> 
> I'm looking for any advice particularly around what I should be doing so this code is suitable for inclusion in twisted.

If you want to include it in Twisted itself, your best bet is to actually develop it within twisted, as a series of small contributions, rather than as one gigantic one-shot one.  Contributions over, say, 400 lines, take exponentially longer to review.

Developing it within Twisted will make things go slower; you'll need to get everything code reviewed, you'll need to support multiple versions of Python (no py2 any more, but py3.5 is still pretty old), you'll have to have full test coverage from the get-go.  But doing these things from the start is much easier than trying to retrofit them.

I actually think that this would be a pretty good fit for Twisted, in the same way that it's been a benefit to have Conch maintained alongside the rest of Twisted.  I can see you're developing things very much in line with Twisted's architecture (using cred for authentication, a realm interface, etc) and you've voiced this interest, so it would be great to have you along!

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200507/d724be36/attachment.htm>

From rodrigc at crodrigues.org  Thu May  7 14:56:35 2020
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Thu, 7 May 2020 13:56:35 -0700
Subject: [Twisted-Python] twistedchecker now uses pylint >= 2.4.4,
 can we use type annotations in Twisted now?
In-Reply-To: <4F554B45-897C-4209-845C-48721584EE0E@twistedmatrix.com>
References: <CAG=rPVdtVyL8di8wPndfTKcPTx268vsRp6RUzDJ02+yzeqNcBg@mail.gmail.com>
 <4F554B45-897C-4209-845C-48721584EE0E@twistedmatrix.com>
Message-ID: <CAG=rPVdkYv2PfG+k6nea6Wer4-LbTp10tBcbXGaA7q7NcZ9Q0Q@mail.gmail.com>

On Wed, Apr 22, 2020 at 12:28 AM Glyph <glyph at twistedmatrix.com> wrote:

>
>
> On Apr 21, 2020, at 8:57 PM, Craig Rodrigues <rodrigc at crodrigues.org>
> wrote:
>
> Does anyone else have opinions on
> type hints and mypy?
>
>
> We use them at work, and on some other Twisted projects (Klein) and
> they're absolutely awesome.  Even with type comments, mypy is a huge
> upgrade to how one writes and maintains Python; with annotations, it's a
> major upgrade to the language.
>
> The first step here, however, is to set up the CI infrastructure (tox,
> etc) to run mypy so that we can ensure that as we start writing type hints,
> we don't accidentally get any of them wrong and back ourselves into any
> corners.  Mypy can catch a surprising number of bugs with just the implicit
> type-checking it does on values that come from the standard library.  In
> fact, if we do `mypy src/twisted` right now, and exclude the things that
> would be fixed by adding in https://github.com/Shoobx/mypy-zope ("method
> must have at least one argument" zope.interface definition errors) and
> fixing up some simple type hints (has no attribute "skip") we still have
> almost a thousand type errors that we should figure out a way to start
> correcting or systematically skipping if they're false positives.  I
> guarantee you there's at least one real bug in there though.
>
> As you know, I tend to be pretty cautious about sweeping changes to the
> code that might make it harder to maintain on older versions - type hints
> are an exception where I think it's absolutely worthwhile to go All In
> early on.  But CI infrastructure for this stuff is a must-have and it might
> be tricky to get set up initially.
>



Earlier this week, I merged to trunk a new tox rule for running mypy with
mypy-zope.  You can use it by
running the following command in the top-level Twisted directory:

*tox -e  mypy*

mypy reports a lot of errors, but I think we can take several passes
through the Twisted codebase to clean those up.

Once we clean up the errors, we can integrate the tox rule with Travis or
Azure CI or CircleCI (whatever works best).

I submitted a few PR's to start cleaning up these errors:

   - https://github.com/twisted/twisted/pull/1264  (has no attribute "skip")
   - https://github.com/twisted/twisted/pull/1261 (Too few arguments to
   "makeTestCaseClasses")

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200507/49c3a30a/attachment.htm>

From glyph at twistedmatrix.com  Thu May  7 18:48:56 2020
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 7 May 2020 17:48:56 -0700
Subject: [Twisted-Python] twistedchecker now uses pylint >= 2.4.4,
 can we use type annotations in Twisted now?
In-Reply-To: <CAG=rPVdkYv2PfG+k6nea6Wer4-LbTp10tBcbXGaA7q7NcZ9Q0Q@mail.gmail.com>
References: <CAG=rPVdtVyL8di8wPndfTKcPTx268vsRp6RUzDJ02+yzeqNcBg@mail.gmail.com>
 <4F554B45-897C-4209-845C-48721584EE0E@twistedmatrix.com>
 <CAG=rPVdkYv2PfG+k6nea6Wer4-LbTp10tBcbXGaA7q7NcZ9Q0Q@mail.gmail.com>
Message-ID: <B7036604-8208-491E-BEA0-58E0B6858FD0@twistedmatrix.com>


> On May 7, 2020, at 1:56 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> 
> 
> On Wed, Apr 22, 2020 at 12:28 AM Glyph <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> 
> 
>> On Apr 21, 2020, at 8:57 PM, Craig Rodrigues <rodrigc at crodrigues.org <mailto:rodrigc at crodrigues.org>> wrote:
>> 
>> Does anyone else have opinions on
>> type hints and mypy?
> 
> We use them at work, and on some other Twisted projects (Klein) and they're absolutely awesome.  Even with type comments, mypy is a huge upgrade to how one writes and maintains Python; with annotations, it's a major upgrade to the language.
> 
> The first step here, however, is to set up the CI infrastructure (tox, etc) to run mypy so that we can ensure that as we start writing type hints, we don't accidentally get any of them wrong and back ourselves into any corners.  Mypy can catch a surprising number of bugs with just the implicit type-checking it does on values that come from the standard library.  In fact, if we do `mypy src/twisted` right now, and exclude the things that would be fixed by adding in https://github.com/Shoobx/mypy-zope <https://github.com/Shoobx/mypy-zope> ("method must have at least one argument" zope.interface definition errors) and fixing up some simple type hints (has no attribute "skip") we still have almost a thousand type errors that we should figure out a way to start correcting or systematically skipping if they're false positives.  I guarantee you there's at least one real bug in there though.
> 
> As you know, I tend to be pretty cautious about sweeping changes to the code that might make it harder to maintain on older versions - type hints are an exception where I think it's absolutely worthwhile to go All In early on.  But CI infrastructure for this stuff is a must-have and it might be tricky to get set up initially.
> 
> 
> 
> Earlier this week, I merged to trunk a new tox rule for running mypy with mypy-zope.  You can use it by
> running the following command in the top-level Twisted directory:
> 
> tox -e  mypy
> 
> mypy reports a lot of errors, but I think we can take several passes through the Twisted codebase to clean those up.
> 
> Once we clean up the errors, we can integrate the tox rule with Travis or Azure CI or CircleCI (whatever works best).
> 
> I submitted a few PR's to start cleaning up these errors:
> https://github.com/twisted/twisted/pull/1264 <https://github.com/twisted/twisted/pull/1264>  (has no attribute "skip")
> https://github.com/twisted/twisted/pull/1261 <https://github.com/twisted/twisted/pull/1261> (Too few arguments to "makeTestCaseClasses")

Thank you for doing this work, Craig!  I strongly suspect that mypy is going to spot more than a few real bugs in our codebase, and I can think of at least one enthusiastic user (me) who wants Twisted to start shipping stubs for our users to use!

This also reminded me to file https://twistedmatrix.com/trac/ticket/9816#ticket <https://twistedmatrix.com/trac/ticket/9816#ticket> because i couldn't find it filed already.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200507/e4c92b30/attachment.htm>

From ian at haywood.id.au  Fri May  8 01:39:07 2020
From: ian at haywood.id.au (Ian Haywood)
Date: Fri, 8 May 2020 17:39:07 +1000
Subject: [Twisted-Python] SMB server component for twisted
In-Reply-To: <07B866D8-D8AF-41A8-BBCE-9BF4D7CAE0C2@twistedmatrix.com>
References: <012c4d63-d467-7559-46fd-8c6e9a782ba8@haywood.id.au>
 <07B866D8-D8AF-41A8-BBCE-9BF4D7CAE0C2@twistedmatrix.com>
Message-ID: <d1f08fd0-3b18-aa3a-f70a-627d05098411@haywood.id.au>

On 7/05/2020 5:48 pm, Glyph wrote:

> If you want to include it in Twisted itself, your best bet is to 
> actually develop it /within/ twisted, as a series of small 
> contributions, rather than as one gigantic one-shot one. 
>  Contributions over, say, 400 lines, take exponentially longer to review.

Sounds great, I'll prepare a GitHub PR. Unfortunately the first one will 
be ~2000 lines just to login and connect to a share, but after that each 
new packet-type will be small.

Regarding unit-tests, I've found the best way to test the server is to 
use reactor.spawnProcess to launch the Samba command-line client, but 
that requires smbclient be available to run tests.

Ian




From glyph at twistedmatrix.com  Sat May  9 04:11:34 2020
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 9 May 2020 03:11:34 -0700
Subject: [Twisted-Python] SMB server component for twisted
In-Reply-To: <d1f08fd0-3b18-aa3a-f70a-627d05098411@haywood.id.au>
References: <012c4d63-d467-7559-46fd-8c6e9a782ba8@haywood.id.au>
 <07B866D8-D8AF-41A8-BBCE-9BF4D7CAE0C2@twistedmatrix.com>
 <d1f08fd0-3b18-aa3a-f70a-627d05098411@haywood.id.au>
Message-ID: <3A155BEB-DCAA-4684-97F1-2ECD008DC7B2@twistedmatrix.com>



> On May 8, 2020, at 12:39 AM, Ian Haywood <ian at haywood.id.au> wrote:
> 
> On 7/05/2020 5:48 pm, Glyph wrote:
> 
>> If you want to include it in Twisted itself, your best bet is to actually develop it /within/ twisted, as a series of small contributions, rather than as one gigantic one-shot one.  Contributions over, say, 400 lines, take exponentially longer to review.
> 
> Sounds great, I'll prepare a GitHub PR. Unfortunately the first one will be ~2000 lines just to login and connect to a share, but after that each new packet-type will be small.
> 
> Regarding unit-tests, I've found the best way to test the server is to use reactor.spawnProcess to launch the Samba command-line client, but that requires smbclient be available to run tests.

You can feel free to edit the CI configuration to ensure that smbclient is installed in some of the environments to be sure it's tested.  (And these kinds of little details are good reasons to do this develop-in-Twisted strategy; easier to deal with the gnarly configuration issues early than to try to debug them once you have a big pile of code.)

However, tests like this are whole-system integration tests. While they're great, they also tend to be slow and flaky, particularly if you don't have other forms of testing.  You might want finer-grained unit tests, particularly to deal with error scenarios or boundary conditions which might be hard to provoke with a real client doing real I/O.  Were you thinking of writing an SMB client as well?  One way to write these finer-grained tests is to have the client and the server talk to each other.

It's been a long while since we had a major new subsystem.  I'm excited to see this stuff come in!

One minor note: you may want to do the initial development in an underscore-prefixed package, like twisted._fileserver or somesuch, so that we can separate out the discussion of "public API design" from the issues of code quality / test coverage / etc.

-glyph

From trac at twistedmatrix.com  Sun May 10 00:05:15 2020
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 10 May 2020 06:05:15 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1589090715.08.7571077490587884860@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200510/e246bb15/attachment.htm>

From rodrigc at crodrigues.org  Wed May 13 13:10:50 2020
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Wed, 13 May 2020 12:10:50 -0700
Subject: [Twisted-Python] [RFC] Drop support for Python 3.5 sometime after
 May 2021?
Message-ID: <CAG=rPVeM1ohNMTErKseTEkhNr6Eo5ZG8ioZFTODp05i06Egj2Q@mail.gmail.com>

I would like to propose that Twisted drop support for Python 3.5 one year
from now in 2021.

Reasons:

1.  Python 3.5.9 will be the final release of Python 3.5, in November 2019
( https://www.python.org/dev/peps/pep-0478/ )
2.  Python 3.6.0 was released in December 2016 (
https://www.python.org/dev/peps/pep-0494/ )
3.  PyPy 7.1.1  introduced Python 3.6 support in April 2019 (
https://morepypy.blogspot.com/2019/04/pypy-711-bug-fix-release.html ).
    PyPy 7.3.1 is the latest PyPy version (
https://morepypy.blogspot.com/2020/04/pypy-731-released.html ).

4.  Python 3.6 introduced support for variable annotations (
https://www.python.org/dev/peps/pep-0526/ )
5.  Python 3.6 introduced new string interpolation (f-string) support (
https://www.python.org/dev/peps/pep-0498/ )
6.  Python 3.6 introduced support for asynchronous generators (
https://www.python.org/dev/peps/pep-0525/ ) and asynchronous comprehensions
( https://www.python.org/dev/peps/pep-0530/ )



Based on item 2., Python 3.6.0 has been around for almost 4 years, which is
a reasonable amount of time.
Based on item 3., PyPy supports Python 3.6.

It might be nice to take advantage of some of the language features
introduces in items 4-6.

I think dropping support one year from now in 2021, would give sufficient
notice, and be in line with
the Twisted Compatibility Policy (
https://twistedmatrix.com/documents/current/core/development/policy/compatibility-policy.html
).

None of these items are critial, but I thought I would ask, to get people's
opinions.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200513/dfe6dc71/attachment.htm>

From hawkowl at atleastfornow.net  Wed May 13 23:04:55 2020
From: hawkowl at atleastfornow.net (Amber Brown (hawkowl))
Date: Thu, 14 May 2020 15:04:55 +1000
Subject: [Twisted-Python] [RFC] Drop support for Python 3.5 sometime
 after May 2021?
In-Reply-To: <CAG=rPVeM1ohNMTErKseTEkhNr6Eo5ZG8ioZFTODp05i06Egj2Q@mail.gmail.com>
References: <CAG=rPVeM1ohNMTErKseTEkhNr6Eo5ZG8ioZFTODp05i06Egj2Q@mail.gmail.com>
Message-ID: <4ccc77f9-86f4-5745-b7f7-3758e458e499@atleastfornow.net>

I was considering proposing dropping it soon (I was thinking when we had 
3.8 support, that 3.6/3.7/3.8 is a reasonable compatibility matrix).

Why I think this is probably fine:

- Debian Stable (buster) has 3.7. oldstable (stretch) has 3.5.3, but I 
don't think we care about oldstable.
- Ubuntu 18.04 has Python 3.6. 16.04 has 3.5.1, which is a sucky, buggy 
version that people shouldn't use anyway. Plus, getting a modern Python 
on Ubuntu isn't shockingly hard (deadsnakes makes it trivial).
- CentOS and RHEL 6 and 7 have Software Collections which makes Python 
3.6+ readily available.
- Windows has 3.8 available in the Store.
- MacOS doesn't ship a Python 3, but homebrew/python.org offer 3.8 easily.
- For everyone else, there's always Docker.

So, I guess if we have 3.8 support, the next release can announce the 
dropping of 3.5, and then the release after that can be the final one 
with support.

- Amber

On 14/5/20 5:10 am, Craig Rodrigues wrote:
> I would like to propose that Twisted drop support for Python 3.5 one 
> year from now in 2021.
> 
> Reasons:
> 
> 1.  Python 3.5.9 will be the final release of Python 3.5, in November 
> 2019 ( https://www.python.org/dev/peps/pep-0478/ )
> 2.  Python 3.6.0 was released in December 2016 ( 
> https://www.python.org/dev/peps/pep-0494/ )
> 3.  PyPy 7.1.1  introduced Python 3.6 support in April 2019 ( 
> https://morepypy.blogspot.com/2019/04/pypy-711-bug-fix-release.html ).
>      PyPy 7.3.1 is the latest PyPy version ( 
> https://morepypy.blogspot.com/2020/04/pypy-731-released.html ).
> 
> 4.  Python 3.6 introduced support for variable annotations ( 
> https://www.python.org/dev/peps/pep-0526/ )
> 5.  Python 3.6 introduced new string interpolation (f-string) support ( 
> https://www.python.org/dev/peps/pep-0498/ )
> 6.  Python 3.6 introduced support for asynchronous generators ( 
> https://www.python.org/dev/peps/pep-0525/ ) and asynchronous 
> comprehensions ( https://www.python.org/dev/peps/pep-0530/ )
> 
> 
> 
> Based on item 2., Python 3.6.0 has been around for almost 4 years, which 
> is a reasonable amount of time.
> Based on item 3., PyPy supports Python 3.6.
> 
> It might be nice to take advantage of some of the language features 
> introduces in items 4-6.
> 
> I think dropping support one year from now in 2021, would give 
> sufficient notice, and be in line with
> the Twisted Compatibility Policy ( 
> https://twistedmatrix.com/documents/current/core/development/policy/compatibility-policy.html 
> ).
> 
> None of these items are critial, but I thought I would ask, to get 
> people's opinions.
> 
> --
> Craig
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 


From glyph at twistedmatrix.com  Wed May 13 23:13:32 2020
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 13 May 2020 22:13:32 -0700
Subject: [Twisted-Python] [RFC] Drop support for Python 3.5 sometime
 after May 2021?
In-Reply-To: <4ccc77f9-86f4-5745-b7f7-3758e458e499@atleastfornow.net>
References: <CAG=rPVeM1ohNMTErKseTEkhNr6Eo5ZG8ioZFTODp05i06Egj2Q@mail.gmail.com>
 <4ccc77f9-86f4-5745-b7f7-3758e458e499@atleastfornow.net>
Message-ID: <C0B2209F-7C5C-4D76-ABBC-DD6350AB625C@twistedmatrix.com>

On May 13, 2020, at 10:04 PM, Amber Brown (hawkowl) <hawkowl at atleastfornow.net> wrote:
> 
> On 14/5/20 5:10 am, Craig Rodrigues wrote:
>> I would like to propose that Twisted drop support for Python 3.5 one year from now in 2021.
> 
> I was considering proposing dropping it soon (I was thinking when we had 3.8 support, that 3.6/3.7/3.8 is a reasonable compatibility matrix).


I'm also inclined to say sooner rather than later; I don't know the numbers but my impression is that 3.x uptake began for real at 3.4 and in earnest at 3.6, so there aren't that many people still on 3.5.

The lack of variable annotations, in particular, seems like a sticking point with 3.5 as we attempt to adopt mypy.

-g



From moshez at zadka.club  Wed May 13 23:18:38 2020
From: moshez at zadka.club (Moshe Zadka)
Date: Wed, 13 May 2020 22:18:38 -0700
Subject: [Twisted-Python] 
 =?utf-8?q?=5BRFC=5D_Drop_support_for_Python_3?=
 =?utf-8?q?=2E5_sometime_after_May_2021=3F?=
In-Reply-To: <C0B2209F-7C5C-4D76-ABBC-DD6350AB625C@twistedmatrix.com>
References: <CAG=rPVeM1ohNMTErKseTEkhNr6Eo5ZG8ioZFTODp05i06Egj2Q@mail.gmail.com>
 <4ccc77f9-86f4-5745-b7f7-3758e458e499@atleastfornow.net>
 <C0B2209F-7C5C-4D76-ABBC-DD6350AB625C@twistedmatrix.com>
Message-ID: <91b73cde-3bc9-42d0-b25e-11632d49f9f8@www.fastmail.com>

May 2021 seems to be right around when Xenial (Which has 3.5) falls into ESM, so maybe we can wait?
I don't have strong feelings, but it is a datapoint.

Moshe Z.

On Wed, May 13, 2020, at 22:13, Glyph wrote:
> On May 13, 2020, at 10:04 PM, Amber Brown (hawkowl) <hawkowl at atleastfornow.net> wrote:
> > 
> > On 14/5/20 5:10 am, Craig Rodrigues wrote:
> >> I would like to propose that Twisted drop support for Python 3.5 one year from now in 2021.
> > 
> > I was considering proposing dropping it soon (I was thinking when we had 3.8 support, that 3.6/3.7/3.8 is a reasonable compatibility matrix).
> 
> 
> I'm also inclined to say sooner rather than later; I don't know the numbers but my impression is that 3.x uptake began for real at 3.4 and in earnest at 3.6, so there aren't that many people still on 3.5.
> 
> The lack of variable annotations, in particular, seems like a sticking point with 3.5 as we attempt to adopt mypy.
> 
> -g
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200513/02928e59/attachment.htm>

From hawkowl at atleastfornow.net  Wed May 13 23:36:32 2020
From: hawkowl at atleastfornow.net (Amber Brown)
Date: Thu, 14 May 2020 15:36:32 +1000
Subject: [Twisted-Python] 
 =?utf-8?q?=5BRFC=5D_Drop_support_for_Python_3?=
 =?utf-8?q?=2E5_sometime_after_May_2021=3F?=
In-Reply-To: <91b73cde-3bc9-42d0-b25e-11632d49f9f8@www.fastmail.com>
References: <CAG=rPVeM1ohNMTErKseTEkhNr6Eo5ZG8ioZFTODp05i06Egj2Q@mail.gmail.com>
 <4ccc77f9-86f4-5745-b7f7-3758e458e499@atleastfornow.net>
 <C0B2209F-7C5C-4D76-ABBC-DD6350AB625C@twistedmatrix.com>
 <91b73cde-3bc9-42d0-b25e-11632d49f9f8@www.fastmail.com>
Message-ID: <7c42789c-f99f-423d-baa5-2e425c675591@www.fastmail.com>

Xenial's 3.5.1/3.5.2 sucks and doesn't have some asyncio functionality (due to it being provisional then?) which means things like Eliot doesn't work due to aiocontextvars barfing on missing functionality. There's also 20.04 LTS now, making 16.04 old-old-LTS. I don't think it's worth it. 

- Amber

On Thu, 14 May 2020, at 15:18, Moshe Zadka wrote:
> May 2021 seems to be right around when Xenial (Which has 3.5) falls 
> into ESM, so maybe we can wait?
> I don't have strong feelings, but it is a datapoint.
> 
> Moshe Z.
> 
> On Wed, May 13, 2020, at 22:13, Glyph wrote:
> > On May 13, 2020, at 10:04 PM, Amber Brown (hawkowl) <hawkowl at atleastfornow.net> wrote:
> > > 
> > > On 14/5/20 5:10 am, Craig Rodrigues wrote:
> > >> I would like to propose that Twisted drop support for Python 3.5 one year from now in 2021.
> > > 
> > > I was considering proposing dropping it soon (I was thinking when we had 3.8 support, that 3.6/3.7/3.8 is a reasonable compatibility matrix).
> > 
> > 
> > I'm also inclined to say sooner rather than later; I don't know the numbers but my impression is that 3.x uptake began for real at 3.4 and in earnest at 3.6, so there aren't that many people still on 3.5.
> > 
> > The lack of variable annotations, in particular, seems like a sticking point with 3.5 as we attempt to adopt mypy.
> > 
> > -g
> > 
> > 
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> > 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From hawkowl at atleastfornow.net  Wed May 13 23:41:02 2020
From: hawkowl at atleastfornow.net (Amber Brown)
Date: Thu, 14 May 2020 15:41:02 +1000
Subject: [Twisted-Python] 
 =?utf-8?q?=5BRFC=5D_Drop_support_for_Python_3?=
 =?utf-8?q?=2E5_sometime_after_May_2021=3F?=
In-Reply-To: <C0B2209F-7C5C-4D76-ABBC-DD6350AB625C@twistedmatrix.com>
References: <CAG=rPVeM1ohNMTErKseTEkhNr6Eo5ZG8ioZFTODp05i06Egj2Q@mail.gmail.com>
 <4ccc77f9-86f4-5745-b7f7-3758e458e499@atleastfornow.net>
 <C0B2209F-7C5C-4D76-ABBC-DD6350AB625C@twistedmatrix.com>
Message-ID: <bca7211a-fc7b-4016-b888-1527e65f2e4f@www.fastmail.com>



On Thu, 14 May 2020, at 15:13, Glyph wrote:
> On May 13, 2020, at 10:04 PM, Amber Brown (hawkowl) 
> <hawkowl at atleastfornow.net> wrote:
> > 
> > On 14/5/20 5:10 am, Craig Rodrigues wrote:
> >> I would like to propose that Twisted drop support for Python 3.5 one year from now in 2021.
> > 
> > I was considering proposing dropping it soon (I was thinking when we had 3.8 support, that 3.6/3.7/3.8 is a reasonable compatibility matrix).
> 
> 
> I'm also inclined to say sooner rather than later; I don't know the 
> numbers but my impression is that 3.x uptake began for real at 3.4 and 
> in earnest at 3.6, so there aren't that many people still on 3.5.

A year ago (https://atleastfornow.net/posts/py2-py3-twisted-downloads/), those numbers said that 3.5 was 6.7% of users for the currently released version of Twisted, and 4.37% of all Twisted downloads that month. I could probably rerun them, but I think it's kind of obvious what the results would be.

> 
> The lack of variable annotations, in particular, seems like a sticking 
> point with 3.5 as we attempt to adopt mypy.
> 
> -g
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From hs at ox.cx  Thu May 14 00:09:15 2020
From: hs at ox.cx (Hynek Schlawack)
Date: Thu, 14 May 2020 08:09:15 +0200
Subject: [Twisted-Python] [RFC] Drop support for Python 3.5 sometime
 after May 2021?
In-Reply-To: <4ccc77f9-86f4-5745-b7f7-3758e458e499@atleastfornow.net>
References: <CAG=rPVeM1ohNMTErKseTEkhNr6Eo5ZG8ioZFTODp05i06Egj2Q@mail.gmail.com>
 <4ccc77f9-86f4-5745-b7f7-3758e458e499@atleastfornow.net>
Message-ID: <C650D6F1-2E5C-45B7-A260-E1B0482888BF@ox.cx>



> On 14. May 2020, at 07:04, Amber Brown (hawkowl) <hawkowl at atleastfornow.net> wrote:
> 
> - MacOS doesn't ship a Python 3, but homebrew/python.org offer 3.8 easily.

FWIW this is not true anymore. Catalina comes – for all its faults – with Python 3.7:

❯ /usr/bin/python2

WARNING: Python 2.7 is not recommended.
This version is included in macOS for compatibility with legacy software.
Future versions of macOS will not include Python 2.7.
Instead, it is recommended that you transition to using 'python3' from within Terminal.

Python 2.7.16 (default, Feb 29 2020, 01:55:37)
[GCC 4.2.1 Compatible Apple LLVM 11.0.3 (clang-1103.0.29.20) (-macos10.15-objc- on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> ^D

~ took 6s
❯ /usr/bin/python3
Python 3.7.3 (default, Apr  7 2020, 14:06:47)
[Clang 11.0.3 (clang-1103.0.32.59)] on darwin
Type "help", "copyright", "credits" or "license" for more information.

From hawkowl at atleastfornow.net  Thu May 14 00:13:16 2020
From: hawkowl at atleastfornow.net (Amber Brown)
Date: Thu, 14 May 2020 16:13:16 +1000
Subject: [Twisted-Python] 
 =?utf-8?q?=5BRFC=5D_Drop_support_for_Python_3?=
 =?utf-8?q?=2E5_sometime_after_May_2021=3F?=
In-Reply-To: <C650D6F1-2E5C-45B7-A260-E1B0482888BF@ox.cx>
References: <CAG=rPVeM1ohNMTErKseTEkhNr6Eo5ZG8ioZFTODp05i06Egj2Q@mail.gmail.com>
 <4ccc77f9-86f4-5745-b7f7-3758e458e499@atleastfornow.net>
 <C650D6F1-2E5C-45B7-A260-E1B0482888BF@ox.cx>
Message-ID: <26a6b677-92b5-46c5-b24f-51a48054db8f@www.fastmail.com>


On Thu, 14 May 2020, at 16:09, Hynek Schlawack wrote:
> 
> 
> > On 14. May 2020, at 07:04, Amber Brown (hawkowl) <hawkowl at atleastfornow.net> wrote:
> > 
> > - MacOS doesn't ship a Python 3, but homebrew/python.org offer 3.8 easily.
> 
> FWIW this is not true anymore. Catalina comes – for all its faults – 
> with Python 3.7:
> 

*puts fingers in ears* sorry I can't hear you, I'm in my happy place where I don't have to think of software in ".framework" folders la la la la

.... But, it's good to know, anyway. 

- Amber


From glyph at twistedmatrix.com  Thu May 14 00:54:37 2020
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 13 May 2020 23:54:37 -0700
Subject: [Twisted-Python] [RFC] Drop support for Python 3.5 sometime
 after May 2021?
In-Reply-To: <26a6b677-92b5-46c5-b24f-51a48054db8f@www.fastmail.com>
References: <CAG=rPVeM1ohNMTErKseTEkhNr6Eo5ZG8ioZFTODp05i06Egj2Q@mail.gmail.com>
 <4ccc77f9-86f4-5745-b7f7-3758e458e499@atleastfornow.net>
 <C650D6F1-2E5C-45B7-A260-E1B0482888BF@ox.cx>
 <26a6b677-92b5-46c5-b24f-51a48054db8f@www.fastmail.com>
Message-ID: <B089704B-E971-43BC-8C83-A4FAFE60ED1F@twistedmatrix.com>


> On May 13, 2020, at 11:13 PM, Amber Brown <hawkowl at atleastfornow.net> wrote:
> 
> On Thu, 14 May 2020, at 16:09, Hynek Schlawack wrote:
>> 
>> 
>>> On 14. May 2020, at 07:04, Amber Brown (hawkowl) <hawkowl at atleastfornow.net> wrote:
>>> 
>>> - MacOS doesn't ship a Python 3, but homebrew/python.org offer 3.8 easily.
>> 
>> FWIW this is not true anymore. Catalina comes – for all its faults – 
>> with Python 3.7:
>> 
> 
> *puts fingers in ears* sorry I can't hear you, I'm in my happy place where I don't have to think of software in ".framework" folders la la la la

Oh hawkowl.  Either you die an a.out, or you live long enough to become a .dylib

> .... But, it's good to know, anyway. 

Unfortunately it's only kind of true!

$ /usr/bin/python3
Python 3.7.3 (default, Apr  7 2020, 14:06:47)
[Clang 11.0.3 (clang-1103.0.32.59)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> import sys
>>> sys.executable
'/Applications/Xcode.app/Contents/Developer/usr/bin/python3'
>>>

You can also get one from /Library/Developer/CommandLineTools/usr/bin/python3 if you do `xcode-select --install` but it's not present in the macOS base image and you can't use it from applications.

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200513/b7017a18/attachment.htm>

From hawkowl at atleastfornow.net  Thu May 14 04:55:42 2020
From: hawkowl at atleastfornow.net (Amber Brown)
Date: Thu, 14 May 2020 20:55:42 +1000
Subject: [Twisted-Python] 
 =?utf-8?q?=5BRFC=5D_Drop_support_for_Python_3?=
 =?utf-8?q?=2E5_sometime_after_May_2021=3F?=
In-Reply-To: <B089704B-E971-43BC-8C83-A4FAFE60ED1F@twistedmatrix.com>
References: <CAG=rPVeM1ohNMTErKseTEkhNr6Eo5ZG8ioZFTODp05i06Egj2Q@mail.gmail.com>
 <4ccc77f9-86f4-5745-b7f7-3758e458e499@atleastfornow.net>
 <C650D6F1-2E5C-45B7-A260-E1B0482888BF@ox.cx>
 <26a6b677-92b5-46c5-b24f-51a48054db8f@www.fastmail.com>
 <B089704B-E971-43BC-8C83-A4FAFE60ED1F@twistedmatrix.com>
Message-ID: <1078b9fa-f52f-4ebf-b85d-a16a7779d72a@www.fastmail.com>



On Thu, 14 May 2020, at 16:54, Glyph wrote:
> 
> > $ /usr/bin/python3
> > Python 3.7.3 (default, Apr 7 2020, 14:06:47)
> > [Clang 11.0.3 (clang-1103.0.32.59)] on darwin
> > Type "help", "copyright", "credits" or "license" for more information.
> > >>> import sys
> > >>> sys.executable
> > '/Applications/Xcode.app/Contents/Developer/usr/bin/python3'
> > >>>

wow thanks I hate it

> -g
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From glyph at twistedmatrix.com  Thu May 14 13:39:17 2020
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 14 May 2020 12:39:17 -0700
Subject: [Twisted-Python] [RFC] Drop support for Python 3.5 sometime
 after May 2021?
In-Reply-To: <1078b9fa-f52f-4ebf-b85d-a16a7779d72a@www.fastmail.com>
References: <CAG=rPVeM1ohNMTErKseTEkhNr6Eo5ZG8ioZFTODp05i06Egj2Q@mail.gmail.com>
 <4ccc77f9-86f4-5745-b7f7-3758e458e499@atleastfornow.net>
 <C650D6F1-2E5C-45B7-A260-E1B0482888BF@ox.cx>
 <26a6b677-92b5-46c5-b24f-51a48054db8f@www.fastmail.com>
 <B089704B-E971-43BC-8C83-A4FAFE60ED1F@twistedmatrix.com>
 <1078b9fa-f52f-4ebf-b85d-a16a7779d72a@www.fastmail.com>
Message-ID: <81CD37D6-102B-437A-A0C1-8723530DCB0C@twistedmatrix.com>



> On May 14, 2020, at 3:55 AM, Amber Brown <hawkowl at atleastfornow.net> wrote:
> 
> 
> 
> On Thu, 14 May 2020, at 16:54, Glyph wrote:
>> 
>>> $ /usr/bin/python3
>>> Python 3.7.3 (default, Apr 7 2020, 14:06:47)
>>> [Clang 11.0.3 (clang-1103.0.32.59)] on darwin
>>> Type "help", "copyright", "credits" or "license" for more information.
>>>>>> import sys
>>>>>> sys.executable
>>> '/Applications/Xcode.app/Contents/Developer/usr/bin/python3'
>>>>>> 
> 
> wow thanks I hate it

ITYM 'Wow thanks I hate it.app'

-g


From wsanchez at wsanchez.net  Thu May 14 18:23:34 2020
From: wsanchez at wsanchez.net (=?utf-8?Q?Wilfredo_S=C3=A1nchez_Vega?=)
Date: Thu, 14 May 2020 17:23:34 -0700
Subject: [Twisted-Python] SMB server component for twisted
In-Reply-To: <07B866D8-D8AF-41A8-BBCE-9BF4D7CAE0C2@twistedmatrix.com>
References: <012c4d63-d467-7559-46fd-8c6e9a782ba8@haywood.id.au>
 <07B866D8-D8AF-41A8-BBCE-9BF4D7CAE0C2@twistedmatrix.com>
Message-ID: <1708BA94-00C0-45F6-BB78-92A514A698BE@wsanchez.net>

On May 7, 2020, at 12:48 AM, Glyph <glyph at twistedmatrix.com> wrote:
> 
> If you want to include it in Twisted itself, your best bet is to actually develop it within twisted, as a series of small contributions, rather than as one gigantic one-shot one.  Contributions over, say, 400 lines, take exponentially longer to review.
> 
> Developing it within Twisted will make things go slower; you'll need to get everything code reviewed, you'll need to support multiple versions of Python (no py2 any more, but py3.5 is still pretty old), you'll have to have full test coverage from the get-go.  But doing these things from the start is much easier than trying to retrofit them.
> 
> I actually think that this would be a pretty good fit for Twisted, in the same way that it's been a benefit to have Conch maintained alongside the rest of Twisted.  I can see you're developing things very much in line with Twisted's architecture (using cred for authentication, a realm interface, etc) and you've voiced this interest, so it would be great to have you along!

  I think it's great to get an SMB implementation in the Twisted org, but why would we even consider adding something like this to the main Twisted project?

  The main repo is large, and including Twisted in your project brings along far more functionality than you are likely to use, and packages are a fine way to get the functionality you want, so what's the logic for including a new thing in Twisted proper?

  You cite Conch above, where I'd actually argue that Conch should be moved to a separate repo.  Am I crazy?

  That said, a counter argument is that projects in the Twisted org suffer greatly from poor participation and strict development rules, resulting in glacial progress.  It's not unusual for me to have a PR take 6 months to a year to get a review (I have two right now that have been waiting since November), and perhaps such PRs would get some attention in the main repo.  But I think that's an unfortunate way to address that problem.

	-wsv

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200514/7e7cbe94/attachment.htm>

From glyph at twistedmatrix.com  Thu May 14 18:52:54 2020
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 14 May 2020 17:52:54 -0700
Subject: [Twisted-Python] SMB server component for twisted
Message-ID: <etPan.5ebdecbc.327b23c6.6b52@fastmail.com>



> On May 14, 2020, at 5:23 PM, Wilfredo Sánchez Vega <wsanchez at wsanchez.net(mailto:wsanchez at wsanchez.net)> wrote:  
> On May 7, 2020, at 12:48 AM, Glyph <glyph at twistedmatrix.com(mailto:glyph at twistedmatrix.com)> wrote:
> >  
> > If you want to include it in Twisted itself, your best bet is to actually develop it within twisted, as a series of small contributions, rather than as one gigantic one-shot one. Contributions over, say, 400 lines, take exponentially longer to review.  
> >  
> > Developing it within Twisted will make things go slower; you'll need to get everything code reviewed, you'll need to support multiple versions of Python (no py2 any more, but py3.5 is still pretty old), you'll have to have full test coverage from the get-go. But doing these things from the start is much easier than trying to retrofit them.  
> >  
> > I actually think that this would be a pretty good fit for Twisted, in the same way that it's been a benefit to have Conch maintained alongside the rest of Twisted. I can see you're developing things very much in line with Twisted's architecture (using cred for authentication, a realm interface, etc) and you've voiced this interest, so it would be great to have you along!  
> I think it's great to get an SMB implementation in the Twisted org, but why would we even consider adding something like this to the main Twisted project?  

Just practically speaking, we've tried both approaches, and (very broadly generalizing) this one works and the other one doesn't.  

Separate projects that have been adopted from outside after they gained some traction are doing okay (i.e. Treq and Klein, some of the most popular applications for Twisted). But others (txacme) are suffering from a lack of maintenance and still others (ldaptor) just have a largely non-overlapping community and hardly benefit at all from org membership. And as you've noted, even the ones doing their best often want for reviews for far longer than Twisted's own latency.  
> The main repo is large, and including Twisted in your project brings along far more functionality than you are likely to use, and packages are a fine way to get the functionality you want, so what's the logic for including a new thing in Twisted proper?  

Abstractly you make a plausible case. Concretely we tried to start splitting things up on the axes of protocol support and it just made a giant mess and created lots of overhead for the project. Modern infrastructure makes this slightly easier (last time we tried to start this process we didn't have a Github or a Travis), but not much easier. And even modern, better infrastructure leads to an avalanche of tedium as we copy CI configuration back and forth endlessly, replicating lessons that we learn about travis, and azure, and codecov, and (ad nauseam)  

Even in the abstract case though there’s a question of what twisted “is” and on what axes it should be split up. I think splitting up by protocol was largely a mistake, but splitting some of the really low level core stuff out (towncrier, automat, and hopefully filepath and deferred) has been pretty successful and worthwhile. Particularly in a post-asyncio world, the core event loop isn’t super interesting and the broad protocol support is the appeal.  

So even in the abstract case, there’s a case to be made that twisted is a bunch of implementations and interfaces for wire protocols that involve navigating hierarchies of things (DNS, HTTP, IMAP, SFTP) and SMB fits right in there.  
> You cite Conch above, where I'd actually argue that Conch should be moved to a separate repo. Am I crazy?  

Not crazy, there's a valid case to be made, but Conch has received a tremendous amount of routine maintenance keeping it up to date with Twisted and Python API evolution by members of the project who would almost certainly otherwise not bother, just to keep the test suite going and the project as a whole integrated. This allows it to remain viable for the much smaller number of SSH-specific contributions that come along.  
> That said, a counter argument is that projects in the Twisted org suffer greatly from poor participation and strict development rules, resulting in glacial progress. It's not unusual for me to have a PR take 6 months to a year to get a review (I have two right now that have been waiting since November), and perhaps such PRs would get some attention in the main repo. But I think that's an unfortunate way to address that problem.  

This is just a natural consequence of affordances provided by the tooling we presently have. Personally I look at the global queue of pull requests across all these projects and it's kind of exhausting. I don't think many other people do. Case in point: how many ldaptor or txacme reviews have you done since November? This is not to throw any shade; I’m not saying you should have, but it illustrates that right now, separate repos engender a really unfortunate level of community fragmentation. I agree that this is not really an ideal situation, but addressing it requires building a degree of tooling that we just don’t have the resources to do. Our previous attempt to do so was … bad; it kind of illustrated that we don’t have the relevant expertise to build these kinds of tools and mores either, and we just got kind of lucky with the somewhat random pile of jank we have landed on with the current twistedmatrix.com process.  

Anyway if someone wanted to do the work to separate out the concerns of version control, pip installability, issue tracking, and integrated regression testing for a whole suite of related python packages in an org, I would be extremely excited, but the benefits of just having Twisted be, say, 5% bigger overall to foster development of a whole new popular and intimidating protocol seem clear given the state of the world today. If those tools do show up later to make this tractable, we can easily split it out later! Along with conch, and mail, and names, for that matter…  

-glyph 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200514/6f4918be/attachment-0001.htm>

From ian at haywood.id.au  Fri May 15 18:55:15 2020
From: ian at haywood.id.au (Ian Haywood)
Date: Sat, 16 May 2020 10:55:15 +1000
Subject: [Twisted-Python] SMB server component for twisted
In-Reply-To: <etPan.5ebdecbc.327b23c6.6b52@fastmail.com>
References: <etPan.5ebdecbc.327b23c6.6b52@fastmail.com>
Message-ID: <1a106771-5c19-319c-9b56-7d6e7374be2c@haywood.id.au>


On 15/05/2020 10:52 am, Glyph wrote:
> y 14, 2020, at 5:23 PM, Wilfredo Sánchez Vega <wsanchez at wsanche 
> <mailto:wsanchez at wsanchez.net>
>>
>>   I think it's great to get an SMB implementation in the Twisted org, 
>> but why would we even consider adding something like this to the main 
>> Twisted project?

The advantage of twisted itself is cross-protocol abstractions such as 
cred. Of course you don't have to be in the repo to use them, but in 
practice developers need the discipline of a single project to maintain 
consistency, otherwise the human tendency to reinvent wheels is too strong.

Ian


From ian at haywood.id.au  Fri May 15 19:14:57 2020
From: ian at haywood.id.au (Ian Haywood)
Date: Sat, 16 May 2020 11:14:57 +1000
Subject: [Twisted-Python] unified filesystem API (was: SMB server component
 for twisted)
In-Reply-To: <1a106771-5c19-319c-9b56-7d6e7374be2c@haywood.id.au>
References: <etPan.5ebdecbc.327b23c6.6b52@fastmail.com>
 <1a106771-5c19-319c-9b56-7d6e7374be2c@haywood.id.au>
Message-ID: <1a73de55-baa6-6827-48bd-78b3428d0585@haywood.id.au>


On 16/05/2020 10:55 am, Ian Haywood wrote:
>
> On 15/05/2020 10:52 am, Glyph wrote:
>> y 14, 2020, at 5:23 PM, Wilfredo Sánchez Vega <wsanchez at wsanche 
>> <mailto:wsanchez at wsanchez.net>
>>>
>>>   I think it's great to get an SMB implementation in the Twisted 
>>> org, but why would we even consider adding something like this to 
>>> the main Twisted project?
>
> The advantage of twisted itself is cross-protocol abstractions such as 
> cred. Of course you don't have to be in the repo to use them, but in 
> practice developers need the discipline of a single project to 
> maintain consistency, otherwise the human tendency to reinvent wheels 
> is too strong


Apropos we have two APIs for exporting filesystems which are broadly 
similar: SFTP in conch and FTP itself, SMB is about to be a third, 
ideally we should have one or have them descend from one another. It's 
slightly harder than it sounds as SMB is a file-access, as opposed to 
file-transfer, protocol and supports some extra features such as locking.

Ian


From rodrigc at crodrigues.org  Fri May 15 21:35:16 2020
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Fri, 15 May 2020 20:35:16 -0700
Subject: [Twisted-Python] [RFC] Drop support for Python 3.5 sometime
 after May 2021?
In-Reply-To: <4ccc77f9-86f4-5745-b7f7-3758e458e499@atleastfornow.net>
References: <CAG=rPVeM1ohNMTErKseTEkhNr6Eo5ZG8ioZFTODp05i06Egj2Q@mail.gmail.com>
 <4ccc77f9-86f4-5745-b7f7-3758e458e499@atleastfornow.net>
Message-ID: <CAG=rPVfqBMJVUMrrwMSQNCXLG36YFiPmjc9B=Tpdv=4Fem8RDQ@mail.gmail.com>

On Wed, May 13, 2020 at 10:05 PM Amber Brown (hawkowl) <
hawkowl at atleastfornow.net> wrote:

>
> So, I guess if we have 3.8 support, the next release can announce the
> dropping of 3.5, and then the release after that can be the final one
> with support.
>

In trunk, on Python 3.8, all the tests in CI pass on Mac and Linux.
With Windows and Python 3.8, there are 6 errors due to AyncioReactorTests
failing:
https://dev.azure.com/twistedmatrix/twisted/_build/results?buildId=1771&view=logs&j=ea01aad7-d5f3-5f0e-2fda-71d72e596cac&t=f47a629b-ce24-5ee0-314a-24c887b72299&l=16071

most likely due to this: https://twistedmatrix.com/trac/ticket/9766

where in Python 3.8, the ProactorEventLoop was made the default on Windows.

So once this is fixed on Windows, I think we are pretty close to having
clean CI runs on Python 3.8 on all platforms.
--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200515/81e7c1c6/attachment.htm>

From rodrigc at crodrigues.org  Fri May 15 21:40:10 2020
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Fri, 15 May 2020 20:40:10 -0700
Subject: [Twisted-Python] [RFC] Drop support for Python 3.5 sometime
 after May 2021?
In-Reply-To: <7c42789c-f99f-423d-baa5-2e425c675591@www.fastmail.com>
References: <CAG=rPVeM1ohNMTErKseTEkhNr6Eo5ZG8ioZFTODp05i06Egj2Q@mail.gmail.com>
 <4ccc77f9-86f4-5745-b7f7-3758e458e499@atleastfornow.net>
 <C0B2209F-7C5C-4D76-ABBC-DD6350AB625C@twistedmatrix.com>
 <91b73cde-3bc9-42d0-b25e-11632d49f9f8@www.fastmail.com>
 <7c42789c-f99f-423d-baa5-2e425c675591@www.fastmail.com>
Message-ID: <CAG=rPVdZPRGo0fjjMEBUHroO0p6X68DAx6WjtJcwzs24R0E8zQ@mail.gmail.com>

Personally, I don't have any dependencies on Python 3.5.
I just suggested once year's notice to give people time to adjust,
but if no one really cares, dropping 3.5 support some time this year is
fine by me.

Maybe it would be OK to do one more release of Twisted and announce that as
the last release supporting Python 3.5, before
dropping support?
--
Craig


On Wed, May 13, 2020 at 10:37 PM Amber Brown <hawkowl at atleastfornow.net>
wrote:

> Xenial's 3.5.1/3.5.2 sucks and doesn't have some asyncio functionality
> (due to it being provisional then?) which means things like Eliot doesn't
> work due to aiocontextvars barfing on missing functionality. There's also
> 20.04 LTS now, making 16.04 old-old-LTS. I don't think it's worth it.
>
> - Amber
>
> On Thu, 14 May 2020, at 15:18, Moshe Zadka wrote:
> > May 2021 seems to be right around when Xenial (Which has 3.5) falls
> > into ESM, so maybe we can wait?
> > I don't have strong feelings, but it is a datapoint.
> >
> > Moshe Z.
> >
> > On Wed, May 13, 2020, at 22:13, Glyph wrote:
> > > On May 13, 2020, at 10:04 PM, Amber Brown (hawkowl) <
> hawkowl at atleastfornow.net> wrote:
> > > >
> > > > On 14/5/20 5:10 am, Craig Rodrigues wrote:
> > > >> I would like to propose that Twisted drop support for Python 3.5
> one year from now in 2021.
> > > >
> > > > I was considering proposing dropping it soon (I was thinking when we
> had 3.8 support, that 3.6/3.7/3.8 is a reasonable compatibility matrix).
> > >
> > >
> > > I'm also inclined to say sooner rather than later; I don't know the
> numbers but my impression is that 3.x uptake began for real at 3.4 and in
> earnest at 3.6, so there aren't that many people still on 3.5.
> > >
> > > The lack of variable annotations, in particular, seems like a sticking
> point with 3.5 as we attempt to adopt mypy.
> > >
> > > -g
> > >
> > >
> > > _______________________________________________
> > > Twisted-Python mailing list
> > > Twisted-Python at twistedmatrix.com
> > > https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> > >
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200515/02fd89b7/attachment.htm>

From glyph at twistedmatrix.com  Fri May 15 23:55:11 2020
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 15 May 2020 22:55:11 -0700
Subject: [Twisted-Python] unified filesystem API (was: SMB server
 component for twisted)
In-Reply-To: <1a73de55-baa6-6827-48bd-78b3428d0585@haywood.id.au>
References: <etPan.5ebdecbc.327b23c6.6b52@fastmail.com>
 <1a106771-5c19-319c-9b56-7d6e7374be2c@haywood.id.au>
 <1a73de55-baa6-6827-48bd-78b3428d0585@haywood.id.au>
Message-ID: <0F09C7A0-31BC-42F8-B35E-8CDC612AECDF@twistedmatrix.com>

> On May 15, 2020, at 6:14 PM, Ian Haywood <ian at haywood.id.au> wrote:
> 
> On 16/05/2020 10:55 am, Ian Haywood wrote:
>> 
>> On 15/05/2020 10:52 am, Glyph wrote:
>>> y 14, 2020, at 5:23 PM, Wilfredo Sánchez Vega <wsanchez at wsanche <mailto:wsanchez at wsanchez.net>
>>>> 
>>>>   I think it's great to get an SMB implementation in the Twisted org, but why would we even consider adding something like this to the main Twisted project?
>> 
>> The advantage of twisted itself is cross-protocol abstractions such as cred. Of course you don't have to be in the repo to use them, but in practice developers need the discipline of a single project to maintain consistency, otherwise the human tendency to reinvent wheels is too strong
> 
> Apropos we have two APIs for exporting filesystems which are broadly similar: SFTP in conch and FTP itself, SMB is about to be a third, ideally we should have one or have them descend from one another. It's slightly harder than it sounds as SMB is a file-access, as opposed to file-transfer, protocol and supports some extra features such as locking.

This does point out one of my secret hopes for SMB: that a file server's maintainers will care enough about file throughput that we'll finally get a centralized, official way of doing async file I/O that we can share with SFTP, FTP, and HTTP :).

-glyph


From glyph at twistedmatrix.com  Fri May 15 23:56:07 2020
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 15 May 2020 22:56:07 -0700
Subject: [Twisted-Python] [RFC] Drop support for Python 3.5 sometime
 after May 2021?
In-Reply-To: <CAG=rPVdZPRGo0fjjMEBUHroO0p6X68DAx6WjtJcwzs24R0E8zQ@mail.gmail.com>
References: <CAG=rPVeM1ohNMTErKseTEkhNr6Eo5ZG8ioZFTODp05i06Egj2Q@mail.gmail.com>
 <4ccc77f9-86f4-5745-b7f7-3758e458e499@atleastfornow.net>
 <C0B2209F-7C5C-4D76-ABBC-DD6350AB625C@twistedmatrix.com>
 <91b73cde-3bc9-42d0-b25e-11632d49f9f8@www.fastmail.com>
 <7c42789c-f99f-423d-baa5-2e425c675591@www.fastmail.com>
 <CAG=rPVdZPRGo0fjjMEBUHroO0p6X68DAx6WjtJcwzs24R0E8zQ@mail.gmail.com>
Message-ID: <E7A4CF5C-D3F1-4923-A54F-41ECF614E604@twistedmatrix.com>



> On May 15, 2020, at 8:40 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> Maybe it would be OK to do one more release of Twisted and announce that as the last release supporting Python 3.5, before
> dropping support?  

Yeah; whenever we drop a Python version we should always support at least one more release, so that people have some notice before they lose access to the next set of security updates.

Any 3.5 users on this list who would want to postpone it longer than this?

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200515/65e43976/attachment.htm>

From chris at withers.org  Sat May 16 00:30:43 2020
From: chris at withers.org (Chris Withers)
Date: Sat, 16 May 2020 07:30:43 +0100
Subject: [Twisted-Python] unified filesystem API
In-Reply-To: <0F09C7A0-31BC-42F8-B35E-8CDC612AECDF@twistedmatrix.com>
References: <etPan.5ebdecbc.327b23c6.6b52@fastmail.com>
 <1a106771-5c19-319c-9b56-7d6e7374be2c@haywood.id.au>
 <1a73de55-baa6-6827-48bd-78b3428d0585@haywood.id.au>
 <0F09C7A0-31BC-42F8-B35E-8CDC612AECDF@twistedmatrix.com>
Message-ID: <286fbe20-71e4-5e4a-6ab2-03ea6c34affb@withers.org>

On 16/05/2020 06:55, Glyph wrote:
> This does point out one of my secret hopes for SMB: that a file server's maintainers will care enough about file throughput that we'll finally get a centralized, official way of doing async file I/O that we can share with SFTP, FTP, and HTTP :).

I got excited by the title, but this all seems to be able giving 
non-filesystems a file-system like API.

If I've missed something, please let me know, but I couldn't find an 
async interface for writing to actual file systems. It feels like 
Twisted has just punted on them as "fast enough" to not need async 
interfaces, but that can really not be the case for networked 
filesystems (NFS, GPFS, etc) where the blocking time for reading or 
writing can be seconds (or minutes if it's having a bad day!).

What's the Twisted solution for these kinds of things? Defer all file IO 
into a thread?

Chris


From glyph at twistedmatrix.com  Sat May 16 00:42:33 2020
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 15 May 2020 23:42:33 -0700
Subject: [Twisted-Python] unified filesystem API
In-Reply-To: <286fbe20-71e4-5e4a-6ab2-03ea6c34affb@withers.org>
References: <etPan.5ebdecbc.327b23c6.6b52@fastmail.com>
 <1a106771-5c19-319c-9b56-7d6e7374be2c@haywood.id.au>
 <1a73de55-baa6-6827-48bd-78b3428d0585@haywood.id.au>
 <0F09C7A0-31BC-42F8-B35E-8CDC612AECDF@twistedmatrix.com>
 <286fbe20-71e4-5e4a-6ab2-03ea6c34affb@withers.org>
Message-ID: <81A72C8C-E7FC-4155-96E1-D98FD738DE94@twistedmatrix.com>



> On May 15, 2020, at 11:30 PM, Chris Withers <chris at withers.org> wrote:
> 
> On 16/05/2020 06:55, Glyph wrote:
>> This does point out one of my secret hopes for SMB: that a file server's maintainers will care enough about file throughput that we'll finally get a centralized, official way of doing async file I/O that we can share with SFTP, FTP, and HTTP :).
> 
> I got excited by the title, but this all seems to be able giving non-filesystems a file-system like API.

What are you referring to as non-filesystems?

> If I've missed something, please let me know, but I couldn't find an async interface for writing to actual file systems.

In Twisted? There isn't one, really, which is exactly the issue.  There are various operating system interfaces for this but none of them are great.

> It feels like Twisted has just punted on them as "fast enough" to not need async interfaces, but that can really not be the case for networked filesystems (NFS, GPFS, etc) where the blocking time for reading or writing can be seconds (or minutes if it's having a bad day!).

Indeed, I'm well aware!  That's what I'm talking about.  It's not quite worth the energy to do it just for your average HTTP server, but it sure would be nice if we did have it, since it works so much better in the edge cases you enumerated.  (Or even against a spinning rust platter under significant load.)

> What's the Twisted solution for these kinds of things? Defer all file IO into a thread?

That is the only really portable solution, but there are sometimes platform-specific ones which can do better in some circumstances.  However, if we had a unified API for accessing the filesystem that presented a non-blocking interface without *talking* about threads, we'd be able to take user code written against that API and instead make it do something smarter than just using a thread - or even just use an intelligent number of threads (one per platter, for example, which you can figure out by looking at various files in /etc, on some platforms, sometimes).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200515/fbf146d9/attachment.htm>

From chris at withers.org  Sat May 16 00:49:40 2020
From: chris at withers.org (Chris Withers)
Date: Sat, 16 May 2020 07:49:40 +0100
Subject: [Twisted-Python] unified filesystem API
In-Reply-To: <81A72C8C-E7FC-4155-96E1-D98FD738DE94@twistedmatrix.com>
References: <etPan.5ebdecbc.327b23c6.6b52@fastmail.com>
 <1a106771-5c19-319c-9b56-7d6e7374be2c@haywood.id.au>
 <1a73de55-baa6-6827-48bd-78b3428d0585@haywood.id.au>
 <0F09C7A0-31BC-42F8-B35E-8CDC612AECDF@twistedmatrix.com>
 <286fbe20-71e4-5e4a-6ab2-03ea6c34affb@withers.org>
 <81A72C8C-E7FC-4155-96E1-D98FD738DE94@twistedmatrix.com>
Message-ID: <7591b870-49e1-5be5-8541-238bfc2f2898@withers.org>

On 16/05/2020 07:42, Glyph wrote:
> 
> 
>> On May 15, 2020, at 11:30 PM, Chris Withers <chris at withers.org 
>> <mailto:chris at withers.org>> wrote:
>>
>> On 16/05/2020 06:55, Glyph wrote:
>>> This does point out one of my secret hopes for SMB: that a file 
>>> server's maintainers will care enough about file throughput that 
>>> we'll finally get a centralized, official way of doing async file I/O 
>>> that we can share with SFTP, FTP, and HTTP :).
>>
>> I got excited by the title, but this all seems to be able giving 
>> non-filesystems a file-system like API.
> 
> What are you referring to as non-filesystems?

Ah, sorry, misread the above.

>> If I've missed something, please let me know, but I couldn't find an 
>> async interface for writing to actual file systems.
> 
> In Twisted? There isn't one, really, which is exactly the issue.  There 
> are various operating system interfaces for this but none of them are great.

What's the asyncio spin on this? We server like uvicorn are all writing 
logs, are they too just punting on the blocking nature of writing to 
filesystems?

Chris


From twm at freecog.net  Sat May 16 16:12:22 2020
From: twm at freecog.net (Tom Most)
Date: Sat, 16 May 2020 15:12:22 -0700
Subject: [Twisted-Python] 
 =?utf-8?q?=5BRFC=5D_Drop_support_for_Python_3?=
 =?utf-8?q?=2E5_sometime_after_May_2021=3F?=
In-Reply-To: <E7A4CF5C-D3F1-4923-A54F-41ECF614E604@twistedmatrix.com>
References: <CAG=rPVeM1ohNMTErKseTEkhNr6Eo5ZG8ioZFTODp05i06Egj2Q@mail.gmail.com>
 <4ccc77f9-86f4-5745-b7f7-3758e458e499@atleastfornow.net>
 <C0B2209F-7C5C-4D76-ABBC-DD6350AB625C@twistedmatrix.com>
 <91b73cde-3bc9-42d0-b25e-11632d49f9f8@www.fastmail.com>
 <7c42789c-f99f-423d-baa5-2e425c675591@www.fastmail.com>
 <CAG=rPVdZPRGo0fjjMEBUHroO0p6X68DAx6WjtJcwzs24R0E8zQ@mail.gmail.com>
 <E7A4CF5C-D3F1-4923-A54F-41ECF614E604@twistedmatrix.com>
Message-ID: <261a2a25-1871-4076-9a23-d0c9738173a3@www.fastmail.com>

I'm (unfortunately) still shipping some Twisted apps on Ubuntu 16.04's Python 3.5. However, I am fine with dropping Python 3.5 support. I think it's certainly worth it for variable annotations and contextvars.

---Tom

On Fri, May 15, 2020, at 10:56 PM, Glyph wrote:
> 
> 
>> On May 15, 2020, at 8:40 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
>> 
>> Maybe it would be OK to do one more release of Twisted and announce that as the last release supporting Python 3.5, before
>> dropping support? 
> Yeah; whenever we drop a Python version we should always support at least one more release, so that people have some notice before they lose access to the next set of security updates.
> 
> Any 3.5 users on this list who would want to postpone it longer than this?
> 
> -glyph
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200516/5af0fdbf/attachment.htm>

From trac at twistedmatrix.com  Sun May 17 00:05:17 2020
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 17 May 2020 06:05:17 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1589695517.79.8774379154052589483@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200517/cf5f8984/attachment.htm>

From glyph at twistedmatrix.com  Sun May 17 12:31:10 2020
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 17 May 2020 11:31:10 -0700
Subject: [Twisted-Python] [RFC] Drop support for Python 3.5 sometime
 after May 2021?
In-Reply-To: <261a2a25-1871-4076-9a23-d0c9738173a3@www.fastmail.com>
References: <CAG=rPVeM1ohNMTErKseTEkhNr6Eo5ZG8ioZFTODp05i06Egj2Q@mail.gmail.com>
 <4ccc77f9-86f4-5745-b7f7-3758e458e499@atleastfornow.net>
 <C0B2209F-7C5C-4D76-ABBC-DD6350AB625C@twistedmatrix.com>
 <91b73cde-3bc9-42d0-b25e-11632d49f9f8@www.fastmail.com>
 <7c42789c-f99f-423d-baa5-2e425c675591@www.fastmail.com>
 <CAG=rPVdZPRGo0fjjMEBUHroO0p6X68DAx6WjtJcwzs24R0E8zQ@mail.gmail.com>
 <E7A4CF5C-D3F1-4923-A54F-41ECF614E604@twistedmatrix.com>
 <261a2a25-1871-4076-9a23-d0c9738173a3@www.fastmail.com>
Message-ID: <4D7D6786-2901-4802-9DD8-800D624BD1B6@twistedmatrix.com>


> On May 16, 2020, at 3:12 PM, Tom Most <twm at freecog.net> wrote:
> 
> 
> On Fri, May 15, 2020, at 10:56 PM, Glyph wrote:
>> 
>> 
>>> On May 15, 2020, at 8:40 PM, Craig Rodrigues <rodrigc at crodrigues.org <mailto:rodrigc at crodrigues.org>> wrote:
>>> 
>>> Maybe it would be OK to do one more release of Twisted and announce that as the last release supporting Python 3.5, before
>>> dropping support?  
>> 
>> Yeah; whenever we drop a Python version we should always support at least one more release, so that people have some notice before they lose access to the next set of security updates.
>> 
>> Any 3.5 users on this list who would want to postpone it longer than this?
>> 
>> -glyph

> I'm (unfortunately) still shipping some Twisted apps on Ubuntu 16.04's Python 3.5. However, I am fine with dropping Python 3.5 support. I think it's certainly worth it for variable annotations and contextvars.

Would your plan to be to just keep twisted pinned until you can EOL ubuntu? I don't want to be putting (non-trivial numbers of) users into the position of having to skip a bunch of updates.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200517/ca5d6ba8/attachment.htm>

From twm at freecog.net  Sun May 17 13:10:23 2020
From: twm at freecog.net (Tom Most)
Date: Sun, 17 May 2020 12:10:23 -0700
Subject: [Twisted-Python] 
 =?utf-8?q?=5BRFC=5D_Drop_support_for_Python_3?=
 =?utf-8?q?=2E5_sometime_after_May_2021=3F?=
In-Reply-To: <4D7D6786-2901-4802-9DD8-800D624BD1B6@twistedmatrix.com>
References: <CAG=rPVeM1ohNMTErKseTEkhNr6Eo5ZG8ioZFTODp05i06Egj2Q@mail.gmail.com>
 <4ccc77f9-86f4-5745-b7f7-3758e458e499@atleastfornow.net>
 <C0B2209F-7C5C-4D76-ABBC-DD6350AB625C@twistedmatrix.com>
 <91b73cde-3bc9-42d0-b25e-11632d49f9f8@www.fastmail.com>
 <7c42789c-f99f-423d-baa5-2e425c675591@www.fastmail.com>
 <CAG=rPVdZPRGo0fjjMEBUHroO0p6X68DAx6WjtJcwzs24R0E8zQ@mail.gmail.com>
 <E7A4CF5C-D3F1-4923-A54F-41ECF614E604@twistedmatrix.com>
 <261a2a25-1871-4076-9a23-d0c9738173a3@www.fastmail.com>
 <4D7D6786-2901-4802-9DD8-800D624BD1B6@twistedmatrix.com>
Message-ID: <0aa369e3-3f12-4286-be16-c19b98ecb16b@www.fastmail.com>

On Sun, May 17, 2020, at 11:31 AM, Glyph wrote:
> 
>> On May 16, 2020, at 3:12 PM, Tom Most <twm at freecog.net> wrote:
>> I'm (unfortunately) still shipping some Twisted apps on Ubuntu 16.04's Python 3.5. However, I am fine with dropping Python 3.5 support. I think it's certainly worth it for variable annotations and contextvars.
> 
> Would your plan to be to just keep twisted pinned until you can EOL ubuntu? I don't want to be putting (non-trivial numbers of) users into the position of having to skip a bunch of updates.
> 
> -glyph

Yes, I'm already working towards EOL of Ubuntu 16.04. I expect to have that work completed by the end of the year.

In the one case that may be complicated I think that pinning Twisted will be acceptable, since the service in question is a process supervisor without direct external exposure.

---Tom
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200517/bba3e73b/attachment.htm>

From glyph at twistedmatrix.com  Sun May 17 13:22:37 2020
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 17 May 2020 12:22:37 -0700
Subject: [Twisted-Python] [RFC] Drop support for Python 3.5 sometime
 after May 2021?
In-Reply-To: <0aa369e3-3f12-4286-be16-c19b98ecb16b@www.fastmail.com>
References: <CAG=rPVeM1ohNMTErKseTEkhNr6Eo5ZG8ioZFTODp05i06Egj2Q@mail.gmail.com>
 <4ccc77f9-86f4-5745-b7f7-3758e458e499@atleastfornow.net>
 <C0B2209F-7C5C-4D76-ABBC-DD6350AB625C@twistedmatrix.com>
 <91b73cde-3bc9-42d0-b25e-11632d49f9f8@www.fastmail.com>
 <7c42789c-f99f-423d-baa5-2e425c675591@www.fastmail.com>
 <CAG=rPVdZPRGo0fjjMEBUHroO0p6X68DAx6WjtJcwzs24R0E8zQ@mail.gmail.com>
 <E7A4CF5C-D3F1-4923-A54F-41ECF614E604@twistedmatrix.com>
 <261a2a25-1871-4076-9a23-d0c9738173a3@www.fastmail.com>
 <4D7D6786-2901-4802-9DD8-800D624BD1B6@twistedmatrix.com>
 <0aa369e3-3f12-4286-be16-c19b98ecb16b@www.fastmail.com>
Message-ID: <C623591F-DA86-4AB9-980A-8217BEAC04B5@twistedmatrix.com>



> On May 17, 2020, at 12:10 PM, Tom Most <twm at freecog.net> wrote:
> 
> On Sun, May 17, 2020, at 11:31 AM, Glyph wrote:
>> 
>>> On May 16, 2020, at 3:12 PM, Tom Most <twm at freecog.net <mailto:twm at freecog.net>> wrote:
>>> I'm (unfortunately) still shipping some Twisted apps on Ubuntu 16.04's Python 3.5. However, I am fine with dropping Python 3.5 support. I think it's certainly worth it for variable annotations and contextvars.
>> 
>> Would your plan to be to just keep twisted pinned until you can EOL ubuntu? I don't want to be putting (non-trivial numbers of) users into the position of having to skip a bunch of updates.
>> 
>> -glyph
> 
> Yes, I'm already working towards EOL of Ubuntu 16.04. I expect to have that work completed by the end of the year.

Glad to hear it :).

> In the one case that may be complicated I think that pinning Twisted will be acceptable, since the service in question is a process supervisor without direct external exposure.

Well in that case I'll just do my best to add lots of goodies (posix_spawn support!) that will make you want to upgrade that to current twisted and python 3.8 :).

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200517/8920145a/attachment.htm>

From twm at freecog.net  Mon May 18 15:21:16 2020
From: twm at freecog.net (Tom Most)
Date: Mon, 18 May 2020 14:21:16 -0700
Subject: [Twisted-Python] 
 =?utf-8?q?=5BRFC=5D_Drop_support_for_Python_3?=
 =?utf-8?q?=2E5_sometime_after_May_2021=3F?=
In-Reply-To: <C623591F-DA86-4AB9-980A-8217BEAC04B5@twistedmatrix.com>
References: <CAG=rPVeM1ohNMTErKseTEkhNr6Eo5ZG8ioZFTODp05i06Egj2Q@mail.gmail.com>
 <4ccc77f9-86f4-5745-b7f7-3758e458e499@atleastfornow.net>
 <C0B2209F-7C5C-4D76-ABBC-DD6350AB625C@twistedmatrix.com>
 <91b73cde-3bc9-42d0-b25e-11632d49f9f8@www.fastmail.com>
 <7c42789c-f99f-423d-baa5-2e425c675591@www.fastmail.com>
 <CAG=rPVdZPRGo0fjjMEBUHroO0p6X68DAx6WjtJcwzs24R0E8zQ@mail.gmail.com>
 <E7A4CF5C-D3F1-4923-A54F-41ECF614E604@twistedmatrix.com>
 <261a2a25-1871-4076-9a23-d0c9738173a3@www.fastmail.com>
 <4D7D6786-2901-4802-9DD8-800D624BD1B6@twistedmatrix.com>
 <0aa369e3-3f12-4286-be16-c19b98ecb16b@www.fastmail.com>
 <C623591F-DA86-4AB9-980A-8217BEAC04B5@twistedmatrix.com>
Message-ID: <759e4eed-01c7-4455-a6fa-338daeb15776@www.fastmail.com>

On Sun, May 17, 2020, at 12:22 PM, Glyph wrote:
>> In the one case that may be complicated I think that pinning Twisted will be acceptable, since the service in question is a process supervisor without direct external exposure.
> Well in that case I'll just do my best to add lots of goodies (posix_spawn support!) that will make you want to upgrade that to current twisted and python 3.8 :).

Oh it's not for lack of wanting. :-)

The service in question is actually spawning Python processes, so posix_spawn support doesn't seem likely to help much: fork() + exec() is a drop in the bucket compared to Python imports, particularly in Python 3 (I'm hoping to explore oxidized-importer [1] to help with this at some point).

If looking improve process management in Twisted, I think that the lowest-hanging fruit is to watch children with pidfd, rather than reaping all children on SIGCHLD. This O(n) reaping --- one waitpid() call per running process --- starts to consume substantial CPU. IIRC it pegged a core at 20,000 processes or so.

---Tom

[1]: https://pypi.org/project/oxidized-importer/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200518/93ea3504/attachment.htm>

From richard at matrix.org  Tue May 19 02:52:34 2020
From: richard at matrix.org (Richard van der Hoff)
Date: Tue, 19 May 2020 09:52:34 +0100
Subject: [Twisted-Python] [RFC] Drop support for Python 3.5 sometime
 after May 2021?
In-Reply-To: <E7A4CF5C-D3F1-4923-A54F-41ECF614E604@twistedmatrix.com>
References: <CAG=rPVeM1ohNMTErKseTEkhNr6Eo5ZG8ioZFTODp05i06Egj2Q@mail.gmail.com>
 <4ccc77f9-86f4-5745-b7f7-3758e458e499@atleastfornow.net>
 <C0B2209F-7C5C-4D76-ABBC-DD6350AB625C@twistedmatrix.com>
 <91b73cde-3bc9-42d0-b25e-11632d49f9f8@www.fastmail.com>
 <7c42789c-f99f-423d-baa5-2e425c675591@www.fastmail.com>
 <CAG=rPVdZPRGo0fjjMEBUHroO0p6X68DAx6WjtJcwzs24R0E8zQ@mail.gmail.com>
 <E7A4CF5C-D3F1-4923-A54F-41ECF614E604@twistedmatrix.com>
Message-ID: <a76d43a0-1b65-b341-ea55-d870dd736c81@matrix.org>

On 16/05/2020 06:56, Glyph wrote:
>
>
>> On May 15, 2020, at 8:40 PM, Craig Rodrigues <rodrigc at crodrigues.org 
>> <mailto:rodrigc at crodrigues.org>> wrote:
>>
>> Maybe it would be OK to do one more release of Twisted and announce 
>> that as the last release supporting Python 3.5, before
>> dropping support?
>
> Yeah; whenever we drop a Python version we should always support at 
> least one more release, so that people have some notice before they 
> lose access to the next set of security updates.
>
> Any 3.5 users on this list who would want to postpone it longer than this?
>
Sadly we have an important customer whose servers run debian oldstable, 
which means we need to stay compatible with 3.5 until we can persuade 
them to upgrade, and it's taken a couple of years to get them off python 
2.7...

I'm not sure that should necessarily affect your plans, but I doubt 
we're alone in this situation.


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200519/f72235b8/attachment.htm>

From barry.scott at forcepoint.com  Tue May 19 02:54:19 2020
From: barry.scott at forcepoint.com (Barry Scott)
Date: Tue, 19 May 2020 09:54:19 +0100
Subject: [Twisted-Python] unified filesystem API (was: SMB server
 component for twisted)
In-Reply-To: <1a73de55-baa6-6827-48bd-78b3428d0585@haywood.id.au>
References: <etPan.5ebdecbc.327b23c6.6b52@fastmail.com>
 <1a106771-5c19-319c-9b56-7d6e7374be2c@haywood.id.au>
 <1a73de55-baa6-6827-48bd-78b3428d0585@haywood.id.au>
Message-ID: <3052762.aeNJFYEL58@fpbarry>

On Saturday, 16 May 2020 02:14:57 BST Ian Haywood wrote:
> On 16/05/2020 10:55 am, Ian Haywood wrote:
> > On 15/05/2020 10:52 am, Glyph wrote:
> >> y 14, 2020, at 5:23 PM, Wilfredo Sánchez Vega <wsanchez at wsanche
> >> <mailto:wsanchez at wsanchez.net>
> >> 
> >>>   I think it's great to get an SMB implementation in the Twisted
> >>> org, but why would we even consider adding something like this to
> >>> the main Twisted project?
> > 
> > The advantage of twisted itself is cross-protocol abstractions such as
> > cred. Of course you don't have to be in the repo to use them, but in
> > practice developers need the discipline of a single project to
> > maintain consistency, otherwise the human tendency to reinvent wheels
> > is too strong
> 
> Apropos we have two APIs for exporting filesystems which are broadly
> similar: SFTP in conch and FTP itself, SMB is about to be a third,
> ideally we should have one or have them descend from one another. It's
> slightly harder than it sounds as SMB is a file-access, as opposed to
> file-transfer, protocol and supports some extra features such as locking.

I do not see a common class tree works for things that are so different
as SMB and FTP.

Barry



> 
> Ian
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python





From barry.scott at forcepoint.com  Tue May 19 04:43:29 2020
From: barry.scott at forcepoint.com (Barry Scott)
Date: Tue, 19 May 2020 11:43:29 +0100
Subject: [Twisted-Python] [RFC] Drop support for Python 3.5 sometime
 after May 2021?
In-Reply-To: <759e4eed-01c7-4455-a6fa-338daeb15776@www.fastmail.com>
References: <CAG=rPVeM1ohNMTErKseTEkhNr6Eo5ZG8ioZFTODp05i06Egj2Q@mail.gmail.com>
 <C623591F-DA86-4AB9-980A-8217BEAC04B5@twistedmatrix.com>
 <759e4eed-01c7-4455-a6fa-338daeb15776@www.fastmail.com>
Message-ID: <9701438.nUPlyArG6x@fpbarry>

On Monday, 18 May 2020 22:21:16 BST Tom Most wrote:
> On Sun, May 17, 2020, at 12:22 PM, Glyph wrote:
> >> In the one case that may be complicated I think that pinning Twisted will
> >> be acceptable, since the service in question is a process supervisor
> >> without direct external exposure.> 
> > Well in that case I'll just do my best to add lots of goodies (posix_spawn
> > support!) that will make you want to upgrade that to current twisted and
> > python 3.8 :).
> Oh it's not for lack of wanting. :-)
> 
> The service in question is actually spawning Python processes, so
> posix_spawn support doesn't seem likely to help much: fork() + exec() is a
> drop in the bucket compared to Python imports, particularly in Python 3
> (I'm hoping to explore oxidized-importer [1] to help with this at some
> point).

Would putting all the .pyc/.pyo into a zip file help with the import problem?
You only have one file to open, the .zip, and no compile as its only 
.pyc/.pyo.


> 
> If looking improve process management in Twisted, I think that the
> lowest-hanging fruit is to watch children with pidfd, rather than reaping
> all children on SIGCHLD. This O(n) reaping --- one waitpid() call per
> running process --- starts to consume substantial CPU. IIRC it pegged a
> core at 20,000 processes or so.

Why not waitpid for all children (pid=0 or pid=-1) in a single call?

Barry
> 
> ---Tom
> 
> [1]: https://pypi.org/project/oxidized-importer/





From exarkun at twistedmatrix.com  Tue May 19 06:40:00 2020
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Tue, 19 May 2020 08:40:00 -0400
Subject: [Twisted-Python] unified filesystem API (was: SMB server
 component for twisted)
In-Reply-To: <3052762.aeNJFYEL58@fpbarry>
References: <etPan.5ebdecbc.327b23c6.6b52@fastmail.com>
 <1a106771-5c19-319c-9b56-7d6e7374be2c@haywood.id.au>
 <1a73de55-baa6-6827-48bd-78b3428d0585@haywood.id.au>
 <3052762.aeNJFYEL58@fpbarry>
Message-ID: <CAEeXt4Mou4-ouo8Tw69KEL0ZFFG=KFWHoOdZX+=Lw=4z8e1=aw@mail.gmail.com>

Is anyone going to mention twisted.vfs?

On Tue, May 19, 2020 at 8:33 AM Barry Scott <barry.scott at forcepoint.com>
wrote:

> On Saturday, 16 May 2020 02:14:57 BST Ian Haywood wrote:
> > On 16/05/2020 10:55 am, Ian Haywood wrote:
> > > On 15/05/2020 10:52 am, Glyph wrote:
> > >> y 14, 2020, at 5:23 PM, Wilfredo Sánchez Vega <wsanchez at wsanche
> > >> <mailto:wsanchez at wsanchez.net>
> > >>
> > >>>   I think it's great to get an SMB implementation in the Twisted
> > >>> org, but why would we even consider adding something like this to
> > >>> the main Twisted project?
> > >
> > > The advantage of twisted itself is cross-protocol abstractions such as
> > > cred. Of course you don't have to be in the repo to use them, but in
> > > practice developers need the discipline of a single project to
> > > maintain consistency, otherwise the human tendency to reinvent wheels
> > > is too strong
> >
> > Apropos we have two APIs for exporting filesystems which are broadly
> > similar: SFTP in conch and FTP itself, SMB is about to be a third,
> > ideally we should have one or have them descend from one another. It's
> > slightly harder than it sounds as SMB is a file-access, as opposed to
> > file-transfer, protocol and supports some extra features such as locking.
>
> I do not see a common class tree works for things that are so different
> as SMB and FTP.
>
> Barry
>
>
>
> >
> > Ian
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200519/d4a1dbd1/attachment.htm>

From exarkun at twistedmatrix.com  Tue May 19 06:41:05 2020
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Tue, 19 May 2020 08:41:05 -0400
Subject: [Twisted-Python] [RFC] Drop support for Python 3.5 sometime
 after May 2021?
In-Reply-To: <9701438.nUPlyArG6x@fpbarry>
References: <CAG=rPVeM1ohNMTErKseTEkhNr6Eo5ZG8ioZFTODp05i06Egj2Q@mail.gmail.com>
 <C623591F-DA86-4AB9-980A-8217BEAC04B5@twistedmatrix.com>
 <759e4eed-01c7-4455-a6fa-338daeb15776@www.fastmail.com>
 <9701438.nUPlyArG6x@fpbarry>
Message-ID: <CAEeXt4OG3UWgj62dHpiVtY+Z-qZSyaXkZJdKfPqtk9v-jMtRDA@mail.gmail.com>

On Tue, May 19, 2020 at 8:33 AM Barry Scott <barry.scott at forcepoint.com>
wrote:

> On Monday, 18 May 2020 22:21:16 BST Tom Most wrote:
>
> >
> > If looking improve process management in Twisted, I think that the
> > lowest-hanging fruit is to watch children with pidfd, rather than reaping
> > all children on SIGCHLD. This O(n) reaping --- one waitpid() call per
> > running process --- starts to consume substantial CPU. IIRC it pegged a
> > core at 20,000 processes or so.
>
> Why not waitpid for all children (pid=0 or pid=-1) in a single call?
>
> Barry
>

Because then you might reap a child process someone launched with a
different API - eg the Python subprocess module.

Jean-Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200519/38dd9724/attachment.htm>

From john at egh.com  Tue May 19 07:13:17 2020
From: john at egh.com (John Santos)
Date: Tue, 19 May 2020 09:13:17 -0400
Subject: [Twisted-Python] unified filesystem API
In-Reply-To: <3052762.aeNJFYEL58@fpbarry>
References: <etPan.5ebdecbc.327b23c6.6b52@fastmail.com>
 <1a106771-5c19-319c-9b56-7d6e7374be2c@haywood.id.au>
 <1a73de55-baa6-6827-48bd-78b3428d0585@haywood.id.au>
 <3052762.aeNJFYEL58@fpbarry>
Message-ID: <7a8833ee-7b4d-c47e-474a-1680c78cc5b8@egh.com>


On 5/19/2020 4:54 AM, Barry Scott wrote:
> On Saturday, 16 May 2020 02:14:57 BST Ian Haywood wrote:
>> On 16/05/2020 10:55 am, Ian Haywood wrote:
>>> On 15/05/2020 10:52 am, Glyph wrote:
>>>> y 14, 2020, at 5:23 PM, Wilfredo Sánchez Vega <wsanchez at wsanche
>>>> <mailto:wsanchez at wsanchez.net>
>>>>
>>>>>    I think it's great to get an SMB implementation in the Twisted
>>>>> org, but why would we even consider adding something like this to
>>>>> the main Twisted project?
>>> The advantage of twisted itself is cross-protocol abstractions such as
>>> cred. Of course you don't have to be in the repo to use them, but in
>>> practice developers need the discipline of a single project to
>>> maintain consistency, otherwise the human tendency to reinvent wheels
>>> is too strong
>> Apropos we have two APIs for exporting filesystems which are broadly
>> similar: SFTP in conch and FTP itself, SMB is about to be a third,
>> ideally we should have one or have them descend from one another. It's
>> slightly harder than it sounds as SMB is a file-access, as opposed to
>> file-transfer, protocol and supports some extra features such as locking.
> I do not see a common class tree works for things that are so different
> as SMB and FTP.
>
> Barry

I don't think the commonality lies on the network side of things.  I think it is
on the data manipulation side and the local file read/write side, which are currently
inherantly synchronous unless you use threads and all that entails.

All three protocols have to open existing files, create new files, read from files,
write to files, read file metadata (dates, sizes, etc.), write metadata, traverse
directory trees and packetize and send the various types of data and recieve and
depacketize the data.  Only the packetizing and depacketizing items are significantly
different between SMB and the other two protocols.  (SMB access to file data can be
random or sequential, wherease FTP and SFTP are invariably sequential, but that should
easily be accomodated.)



-- 
John Santos
Evans Griffiths & Hart, Inc.
781-861-0670 ext 539


From twm at freecog.net  Tue May 19 12:14:29 2020
From: twm at freecog.net (Tom Most)
Date: Tue, 19 May 2020 11:14:29 -0700
Subject: [Twisted-Python] 
 =?utf-8?q?=5BRFC=5D_Drop_support_for_Python_3?=
 =?utf-8?q?=2E5_sometime_after_May_2021=3F?=
In-Reply-To: <CAEeXt4OG3UWgj62dHpiVtY+Z-qZSyaXkZJdKfPqtk9v-jMtRDA@mail.gmail.com>
References: <CAG=rPVeM1ohNMTErKseTEkhNr6Eo5ZG8ioZFTODp05i06Egj2Q@mail.gmail.com>
 <C623591F-DA86-4AB9-980A-8217BEAC04B5@twistedmatrix.com>
 <759e4eed-01c7-4455-a6fa-338daeb15776@www.fastmail.com>
 <9701438.nUPlyArG6x@fpbarry>
 <CAEeXt4OG3UWgj62dHpiVtY+Z-qZSyaXkZJdKfPqtk9v-jMtRDA@mail.gmail.com>
Message-ID: <c6f62455-99fe-4fe9-a866-3982505098e9@www.fastmail.com>

On Tue, May 19, 2020, at 5:41 AM, Jean-Paul Calderone wrote:
> On Tue, May 19, 2020 at 8:33 AM Barry Scott <barry.scott at forcepoint.com> wrote:
>> Why not waitpid for all children (pid=0 or pid=-1) in a single call? 
> 
> Because then you might reap a child process someone launched with a different API - eg the Python subprocess module.

Exactly. I am currently using this as a workaround, but it's not a general solution. You need to be careful because subprocess use hides in many places. For example, beware uuid.uuid1().

---Tom

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200519/a2a8aae0/attachment.htm>

From glyph at twistedmatrix.com  Tue May 19 12:33:16 2020
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 19 May 2020 11:33:16 -0700
Subject: [Twisted-Python] unified filesystem API (was: SMB server
 component for twisted)
In-Reply-To: <CAEeXt4Mou4-ouo8Tw69KEL0ZFFG=KFWHoOdZX+=Lw=4z8e1=aw@mail.gmail.com>
References: <etPan.5ebdecbc.327b23c6.6b52@fastmail.com>
 <1a106771-5c19-319c-9b56-7d6e7374be2c@haywood.id.au>
 <1a73de55-baa6-6827-48bd-78b3428d0585@haywood.id.au>
 <3052762.aeNJFYEL58@fpbarry>
 <CAEeXt4Mou4-ouo8Tw69KEL0ZFFG=KFWHoOdZX+=Lw=4z8e1=aw@mail.gmail.com>
Message-ID: <902FA079-8C2D-41B3-A8E2-CD3F245A5786@twistedmatrix.com>



> On May 19, 2020, at 5:40 AM, Jean-Paul Calderone <exarkun at twistedmatrix.com> wrote:
> 
> Is anyone going to mention twisted.vfs?

You, apparently? :)

If anyone is curious about this code, `git revert 2059b5313ec236e8c3f77da4bd773ab98299ca1b` to have a look at it.

twisted.vfs was an attempt to do something like this, but it also suffered from the split-release infrastructure; it wasn't released so it didn't get user feedback, its interfaces were odd in several ways, it was very specific to POSIX filesystems, had some ambiguity around whether it wanted to be operating in terms of strings or objects, and generally didn't provide much value.

If we want to bring this concept back (as https://twistedmatrix.com/trac/ticket/4934 <https://twistedmatrix.com/trac/ticket/4934> alludes to by mentioning "twisted.path") it would benefit from lots of discussion and a concerted effort to integrate into the existing HTTP/SFTP/FTP code, so we actually create an interface that makes it easy for applications to create virtual filesystems accessible in multiple ways, with non-filesystem backends, rather than just wrapping up our file I/O code in a translation layer between... our versions of POSIX constants and the 'os' module's version of those same constants.

Nevertheless 'vfs' may be of archaeological interest for someone embarking on such a project; it's not all bad ideas, it just had some problems :).

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200519/dea374fc/attachment.htm>

From glyph at twistedmatrix.com  Tue May 19 12:34:04 2020
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 19 May 2020 11:34:04 -0700
Subject: [Twisted-Python] unified filesystem API (was: SMB server
 component for twisted)
In-Reply-To: <3052762.aeNJFYEL58@fpbarry>
References: <etPan.5ebdecbc.327b23c6.6b52@fastmail.com>
 <1a106771-5c19-319c-9b56-7d6e7374be2c@haywood.id.au>
 <1a73de55-baa6-6827-48bd-78b3428d0585@haywood.id.au>
 <3052762.aeNJFYEL58@fpbarry>
Message-ID: <D241D873-025E-4709-BE43-0ED06E311225@twistedmatrix.com>



> On May 19, 2020, at 1:54 AM, Barry Scott <barry.scott at forcepoint.com> wrote:
> 
> I do not see a common class tree works for things that are so different
> as SMB and FTP.

Let's absolutely not try to do this with inheritance :-).  Broadly, I agree with John Santos's assessment.  But it's all sort of moot until someone starts trying to actually do it and we can talk about a specific proposal!

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200519/640b798a/attachment.htm>

From touch.sereysethy at gmail.com  Thu May 21 08:57:35 2020
From: touch.sereysethy at gmail.com (Sereysethy TOUCH)
Date: Thu, 21 May 2020 16:57:35 +0200
Subject: [Twisted-Python] Twisted and Thread,
 thread not running when twisted app is running as service
In-Reply-To: <CAEeXt4Mou4-ouo8Tw69KEL0ZFFG=KFWHoOdZX+=Lw=4z8e1=aw@mail.gmail.com>
References: <etPan.5ebdecbc.327b23c6.6b52@fastmail.com>
 <1a106771-5c19-319c-9b56-7d6e7374be2c@haywood.id.au>
 <1a73de55-baa6-6827-48bd-78b3428d0585@haywood.id.au>
 <3052762.aeNJFYEL58@fpbarry>
 <CAEeXt4Mou4-ouo8Tw69KEL0ZFFG=KFWHoOdZX+=Lw=4z8e1=aw@mail.gmail.com>
Message-ID: <CAJB=Z85kJLEvC9t3QvAh_ObTJE=tjspvvawB4dp3uDPmMrdjdw@mail.gmail.com>

Hello,

I am developing a twisted app, and it runs as a service using twistd -y to
start the app.
I am having a problem of running a thread. I know it is not recommended to
use thread, but the library that I use, the object created is running in a
thread.

Here is the problem:

1) if I start reactor by running reactor.run() directly, thread is running
fine
2) if I run it as a service using twisted, the thread is not running, it
runs but it seems to be blocked, because I tried to write something to file
using time.sleep(), but file is empty.

Is there something that I miss? How can I debug this?

Thank you,

TS
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200521/21119603/attachment.htm>

From exarkun at twistedmatrix.com  Thu May 21 09:20:48 2020
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Thu, 21 May 2020 11:20:48 -0400
Subject: [Twisted-Python] Twisted and Thread,
 thread not running when twisted app is running as service
In-Reply-To: <CAJB=Z85kJLEvC9t3QvAh_ObTJE=tjspvvawB4dp3uDPmMrdjdw@mail.gmail.com>
References: <etPan.5ebdecbc.327b23c6.6b52@fastmail.com>
 <1a106771-5c19-319c-9b56-7d6e7374be2c@haywood.id.au>
 <1a73de55-baa6-6827-48bd-78b3428d0585@haywood.id.au>
 <3052762.aeNJFYEL58@fpbarry>
 <CAEeXt4Mou4-ouo8Tw69KEL0ZFFG=KFWHoOdZX+=Lw=4z8e1=aw@mail.gmail.com>
 <CAJB=Z85kJLEvC9t3QvAh_ObTJE=tjspvvawB4dp3uDPmMrdjdw@mail.gmail.com>
Message-ID: <CAEeXt4NgR270Tm4u=vGwQgK7WQJxSH1JuJme6jMxwBaYK0nYhQ@mail.gmail.com>

On Thu, May 21, 2020 at 10:58 AM Sereysethy TOUCH <
touch.sereysethy at gmail.com> wrote:

> Hello,
>
> I am developing a twisted app, and it runs as a service using twistd -y to
> start the app.
> I am having a problem of running a thread. I know it is not recommended to
> use thread, but the library that I use, the object created is running in a
> thread.
>
> Here is the problem:
>
> 1) if I start reactor by running reactor.run() directly, thread is running
> fine
> 2) if I run it as a service using twisted, the thread is not running, it
> runs but it seems to be blocked, because I tried to write something to file
> using time.sleep(), but file is empty.
>
> Is there something that I miss? How can I debug this?
>

A good next step would be to create at Short, Self Contained, Correct
(Compilable), Example <http://sscce.org/> and share it.

Jean-Paul


>
> Thank you,
>
> TS
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200521/615200c6/attachment.htm>

From touch.sereysethy at gmail.com  Thu May 21 13:55:52 2020
From: touch.sereysethy at gmail.com (Sereysethy TOUCH)
Date: Thu, 21 May 2020 21:55:52 +0200
Subject: [Twisted-Python] Twisted and Thread,
 thread not running when twisted app is running as service
In-Reply-To: <CAEeXt4NgR270Tm4u=vGwQgK7WQJxSH1JuJme6jMxwBaYK0nYhQ@mail.gmail.com>
References: <etPan.5ebdecbc.327b23c6.6b52@fastmail.com>
 <1a106771-5c19-319c-9b56-7d6e7374be2c@haywood.id.au>
 <1a73de55-baa6-6827-48bd-78b3428d0585@haywood.id.au>
 <3052762.aeNJFYEL58@fpbarry>
 <CAEeXt4Mou4-ouo8Tw69KEL0ZFFG=KFWHoOdZX+=Lw=4z8e1=aw@mail.gmail.com>
 <CAJB=Z85kJLEvC9t3QvAh_ObTJE=tjspvvawB4dp3uDPmMrdjdw@mail.gmail.com>
 <CAEeXt4NgR270Tm4u=vGwQgK7WQJxSH1JuJme6jMxwBaYK0nYhQ@mail.gmail.com>
Message-ID: <CAJB=Z84KFT5FH1oVeLvYLguG31pbMGpEvkuu3-ny6CpP7_dU0A@mail.gmail.com>

Hi Jean-Paul,

I found the error after working on a short, self contained, correcte
example. It is not about twisted and normal thread in general, but
something else.

After more tests, I come to realise that whenever I instantiate this class
PolicyClient from this library
https://github.com/ray-project/ray/blob/master/rllib/env/policy_client.py in
my protocol or just anywhere, twisted app either freezes or terminates, and
this *only* happens when the app runs as a daemon, created using a service
(.tac file).

I hope you can take a look at the class PolicyClient, why it causes problem
to reactor main loop. Please point me to where the idea might come from.

I can give you the example but not sure if it is enough, as the client
needs to connect to a server.

Thank you,
TS


On Thu, May 21, 2020 at 5:23 PM Jean-Paul Calderone <
exarkun at twistedmatrix.com> wrote:

> On Thu, May 21, 2020 at 10:58 AM Sereysethy TOUCH <
> touch.sereysethy at gmail.com> wrote:
>
>> Hello,
>>
>> I am developing a twisted app, and it runs as a service using twistd -y
>> to start the app.
>> I am having a problem of running a thread. I know it is not recommended
>> to use thread, but the library that I use, the object created is running in
>> a thread.
>>
>> Here is the problem:
>>
>> 1) if I start reactor by running reactor.run() directly, thread is
>> running fine
>> 2) if I run it as a service using twisted, the thread is not running, it
>> runs but it seems to be blocked, because I tried to write something to file
>> using time.sleep(), but file is empty.
>>
>> Is there something that I miss? How can I debug this?
>>
>
> A good next step would be to create at Short, Self Contained, Correct
> (Compilable), Example <http://sscce.org/> and share it.
>
> Jean-Paul
>
>
>>
>> Thank you,
>>
>> TS
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200521/ba0612b3/attachment.htm>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: app.py
Type: text/x-python-script
Size: 1570 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20200521/ba0612b3/attachment.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: service.tac
Type: application/octet-stream
Size: 172 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20200521/ba0612b3/attachment.obj>

From exarkun at twistedmatrix.com  Thu May 21 14:19:15 2020
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Thu, 21 May 2020 16:19:15 -0400
Subject: [Twisted-Python] Twisted and Thread,
 thread not running when twisted app is running as service
In-Reply-To: <CAJB=Z84KFT5FH1oVeLvYLguG31pbMGpEvkuu3-ny6CpP7_dU0A@mail.gmail.com>
References: <etPan.5ebdecbc.327b23c6.6b52@fastmail.com>
 <1a106771-5c19-319c-9b56-7d6e7374be2c@haywood.id.au>
 <1a73de55-baa6-6827-48bd-78b3428d0585@haywood.id.au>
 <3052762.aeNJFYEL58@fpbarry>
 <CAEeXt4Mou4-ouo8Tw69KEL0ZFFG=KFWHoOdZX+=Lw=4z8e1=aw@mail.gmail.com>
 <CAJB=Z85kJLEvC9t3QvAh_ObTJE=tjspvvawB4dp3uDPmMrdjdw@mail.gmail.com>
 <CAEeXt4NgR270Tm4u=vGwQgK7WQJxSH1JuJme6jMxwBaYK0nYhQ@mail.gmail.com>
 <CAJB=Z84KFT5FH1oVeLvYLguG31pbMGpEvkuu3-ny6CpP7_dU0A@mail.gmail.com>
Message-ID: <CAEeXt4Py-vS9jU2rGASZyx2d2FQaSZmrDcsyBQNjuJEZPQZ+PQ@mail.gmail.com>

On Thu, May 21, 2020 at 3:56 PM Sereysethy TOUCH <touch.sereysethy at gmail.com>
wrote:

> Hi Jean-Paul,
>
> I found the error after working on a short, self contained, correcte
> example. It is not about twisted and normal thread in general, but
> something else.
>
> After more tests, I come to realise that whenever I instantiate this class
> PolicyClient from this library
> https://github.com/ray-project/ray/blob/master/rllib/env/policy_client.py in
> my protocol or just anywhere, twisted app either freezes or terminates, and
> this *only* happens when the app runs as a daemon, created using a
> service (.tac file).
>
> I hope you can take a look at the class PolicyClient, why it causes
> problem to reactor main loop. Please point me to where the idea might come
> from.
>
> I can give you the example but not sure if it is enough, as the client
> needs to connect to a server.
>

It looks like PolicyClient does a blocking HTTP request in __init__.  Since
PolicyClient is instantiated in the reactor thread, this will block the
reactor.  Perhaps this call is hanging for some reason when the process has
daemonized?  This would be unusual but not unheard of.  For example, there
are macOS environments where a process does not have access to the network
if it is not associated with a windowing session.

What platform do you observe the problem on, and what more can you learn
about what the process does on its way to hanging (eg can you run strace on
it)?

Jean-Paul


>
> Thank you,
> TS
>
>
> On Thu, May 21, 2020 at 5:23 PM Jean-Paul Calderone <
> exarkun at twistedmatrix.com> wrote:
>
>> On Thu, May 21, 2020 at 10:58 AM Sereysethy TOUCH <
>> touch.sereysethy at gmail.com> wrote:
>>
>>> Hello,
>>>
>>> I am developing a twisted app, and it runs as a service using twistd -y
>>> to start the app.
>>> I am having a problem of running a thread. I know it is not recommended
>>> to use thread, but the library that I use, the object created is running in
>>> a thread.
>>>
>>> Here is the problem:
>>>
>>> 1) if I start reactor by running reactor.run() directly, thread is
>>> running fine
>>> 2) if I run it as a service using twisted, the thread is not running, it
>>> runs but it seems to be blocked, because I tried to write something to file
>>> using time.sleep(), but file is empty.
>>>
>>> Is there something that I miss? How can I debug this?
>>>
>>
>> A good next step would be to create at Short, Self Contained, Correct
>> (Compilable), Example <http://sscce.org/> and share it.
>>
>> Jean-Paul
>>
>>
>>>
>>> Thank you,
>>>
>>> TS
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200521/521451c6/attachment.htm>

From touch.sereysethy at gmail.com  Thu May 21 14:45:44 2020
From: touch.sereysethy at gmail.com (Sereysethy TOUCH)
Date: Thu, 21 May 2020 22:45:44 +0200
Subject: [Twisted-Python] Twisted and Thread,
 thread not running when twisted app is running as service
In-Reply-To: <CAEeXt4Py-vS9jU2rGASZyx2d2FQaSZmrDcsyBQNjuJEZPQZ+PQ@mail.gmail.com>
References: <etPan.5ebdecbc.327b23c6.6b52@fastmail.com>
 <1a106771-5c19-319c-9b56-7d6e7374be2c@haywood.id.au>
 <1a73de55-baa6-6827-48bd-78b3428d0585@haywood.id.au>
 <3052762.aeNJFYEL58@fpbarry>
 <CAEeXt4Mou4-ouo8Tw69KEL0ZFFG=KFWHoOdZX+=Lw=4z8e1=aw@mail.gmail.com>
 <CAJB=Z85kJLEvC9t3QvAh_ObTJE=tjspvvawB4dp3uDPmMrdjdw@mail.gmail.com>
 <CAEeXt4NgR270Tm4u=vGwQgK7WQJxSH1JuJme6jMxwBaYK0nYhQ@mail.gmail.com>
 <CAJB=Z84KFT5FH1oVeLvYLguG31pbMGpEvkuu3-ny6CpP7_dU0A@mail.gmail.com>
 <CAEeXt4Py-vS9jU2rGASZyx2d2FQaSZmrDcsyBQNjuJEZPQZ+PQ@mail.gmail.com>
Message-ID: <CAJB=Z87SvjODCfxVL2sGMxT0tjD9KF1Pe5TfRoVsBXQFfO8u=A@mail.gmail.com>

I am on MacOS, it is a development phase, but deployment will be on Linux.

It is hard to run dtrace/dtruss on MacOS due to the "system integrity
protection" on MacOS. I got some output but very limited information.

So if there is a workaround you might suggest?

TS

On Thu, May 21, 2020 at 10:20 PM Jean-Paul Calderone <
exarkun at twistedmatrix.com> wrote:

> On Thu, May 21, 2020 at 3:56 PM Sereysethy TOUCH <
> touch.sereysethy at gmail.com> wrote:
>
>> Hi Jean-Paul,
>>
>> I found the error after working on a short, self contained, correcte
>> example. It is not about twisted and normal thread in general, but
>> something else.
>>
>> After more tests, I come to realise that whenever I instantiate this
>> class PolicyClient from this library
>> https://github.com/ray-project/ray/blob/master/rllib/env/policy_client.py in
>> my protocol or just anywhere, twisted app either freezes or terminates, and
>> this *only* happens when the app runs as a daemon, created using a
>> service (.tac file).
>>
>> I hope you can take a look at the class PolicyClient, why it causes
>> problem to reactor main loop. Please point me to where the idea might come
>> from.
>>
>> I can give you the example but not sure if it is enough, as the client
>> needs to connect to a server.
>>
>
> It looks like PolicyClient does a blocking HTTP request in __init__.
> Since PolicyClient is instantiated in the reactor thread, this will block
> the reactor.  Perhaps this call is hanging for some reason when the process
> has daemonized?  This would be unusual but not unheard of.  For example,
> there are macOS environments where a process does not have access to the
> network if it is not associated with a windowing session.
>
> What platform do you observe the problem on, and what more can you learn
> about what the process does on its way to hanging (eg can you run strace on
> it)?
>
> Jean-Paul
>
>
>>
>> Thank you,
>> TS
>>
>>
>> On Thu, May 21, 2020 at 5:23 PM Jean-Paul Calderone <
>> exarkun at twistedmatrix.com> wrote:
>>
>>> On Thu, May 21, 2020 at 10:58 AM Sereysethy TOUCH <
>>> touch.sereysethy at gmail.com> wrote:
>>>
>>>> Hello,
>>>>
>>>> I am developing a twisted app, and it runs as a service using twistd -y
>>>> to start the app.
>>>> I am having a problem of running a thread. I know it is not recommended
>>>> to use thread, but the library that I use, the object created is running in
>>>> a thread.
>>>>
>>>> Here is the problem:
>>>>
>>>> 1) if I start reactor by running reactor.run() directly, thread is
>>>> running fine
>>>> 2) if I run it as a service using twisted, the thread is not running,
>>>> it runs but it seems to be blocked, because I tried to write something to
>>>> file using time.sleep(), but file is empty.
>>>>
>>>> Is there something that I miss? How can I debug this?
>>>>
>>>
>>> A good next step would be to create at Short, Self Contained, Correct
>>> (Compilable), Example <http://sscce.org/> and share it.
>>>
>>> Jean-Paul
>>>
>>>
>>>>
>>>> Thank you,
>>>>
>>>> TS
>>>> _______________________________________________
>>>> Twisted-Python mailing list
>>>> Twisted-Python at twistedmatrix.com
>>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200521/db7c1859/attachment-0001.htm>

From exarkun at twistedmatrix.com  Fri May 22 07:39:54 2020
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Fri, 22 May 2020 09:39:54 -0400
Subject: [Twisted-Python] Twisted and Thread,
 thread not running when twisted app is running as service
In-Reply-To: <CAJB=Z87SvjODCfxVL2sGMxT0tjD9KF1Pe5TfRoVsBXQFfO8u=A@mail.gmail.com>
References: <etPan.5ebdecbc.327b23c6.6b52@fastmail.com>
 <1a106771-5c19-319c-9b56-7d6e7374be2c@haywood.id.au>
 <1a73de55-baa6-6827-48bd-78b3428d0585@haywood.id.au>
 <3052762.aeNJFYEL58@fpbarry>
 <CAEeXt4Mou4-ouo8Tw69KEL0ZFFG=KFWHoOdZX+=Lw=4z8e1=aw@mail.gmail.com>
 <CAJB=Z85kJLEvC9t3QvAh_ObTJE=tjspvvawB4dp3uDPmMrdjdw@mail.gmail.com>
 <CAEeXt4NgR270Tm4u=vGwQgK7WQJxSH1JuJme6jMxwBaYK0nYhQ@mail.gmail.com>
 <CAJB=Z84KFT5FH1oVeLvYLguG31pbMGpEvkuu3-ny6CpP7_dU0A@mail.gmail.com>
 <CAEeXt4Py-vS9jU2rGASZyx2d2FQaSZmrDcsyBQNjuJEZPQZ+PQ@mail.gmail.com>
 <CAJB=Z87SvjODCfxVL2sGMxT0tjD9KF1Pe5TfRoVsBXQFfO8u=A@mail.gmail.com>
Message-ID: <CAEeXt4P2Tiez-Fey1_ejY8EUu+WSP58bp4j0PzZ09y=tjEX_mQ@mail.gmail.com>

On Thu, May 21, 2020 at 4:46 PM Sereysethy TOUCH <touch.sereysethy at gmail.com>
wrote:

> I am on MacOS, it is a development phase, but deployment will be on Linux.
>
> It is hard to run dtrace/dtruss on MacOS due to the "system integrity
> protection" on MacOS. I got some output but very limited information.
>
> So if there is a workaround you might suggest?
>

I would definitely recommend nailing down the exact cause of the problem.
I think that system integrity protection can be bypassed, perhaps by
creating a virtualenv?  I am not particularly familiar with macOS but I'm
sure there's some good information somewhere out there.

If the problem is the blocking network operations performed by
`PolicyClient` then you'll probably have to move even the instantiation of
that class to a separate thread.  This is probably good anyway, since it's
not necessarily the case that it is safe to create the object in one thread
and then use it in another.  Better to create and use it all in the same
thread.

Jean-Paul


>
> TS
>
> On Thu, May 21, 2020 at 10:20 PM Jean-Paul Calderone <
> exarkun at twistedmatrix.com> wrote:
>
>> On Thu, May 21, 2020 at 3:56 PM Sereysethy TOUCH <
>> touch.sereysethy at gmail.com> wrote:
>>
>>> Hi Jean-Paul,
>>>
>>> I found the error after working on a short, self contained, correcte
>>> example. It is not about twisted and normal thread in general, but
>>> something else.
>>>
>>> After more tests, I come to realise that whenever I instantiate this
>>> class PolicyClient from this library
>>> https://github.com/ray-project/ray/blob/master/rllib/env/policy_client.py in
>>> my protocol or just anywhere, twisted app either freezes or terminates, and
>>> this *only* happens when the app runs as a daemon, created using a
>>> service (.tac file).
>>>
>>> I hope you can take a look at the class PolicyClient, why it causes
>>> problem to reactor main loop. Please point me to where the idea might come
>>> from.
>>>
>>> I can give you the example but not sure if it is enough, as the client
>>> needs to connect to a server.
>>>
>>
>> It looks like PolicyClient does a blocking HTTP request in __init__.
>> Since PolicyClient is instantiated in the reactor thread, this will block
>> the reactor.  Perhaps this call is hanging for some reason when the process
>> has daemonized?  This would be unusual but not unheard of.  For example,
>> there are macOS environments where a process does not have access to the
>> network if it is not associated with a windowing session.
>>
>> What platform do you observe the problem on, and what more can you learn
>> about what the process does on its way to hanging (eg can you run strace on
>> it)?
>>
>> Jean-Paul
>>
>>
>>>
>>> Thank you,
>>> TS
>>>
>>>
>>> On Thu, May 21, 2020 at 5:23 PM Jean-Paul Calderone <
>>> exarkun at twistedmatrix.com> wrote:
>>>
>>>> On Thu, May 21, 2020 at 10:58 AM Sereysethy TOUCH <
>>>> touch.sereysethy at gmail.com> wrote:
>>>>
>>>>> Hello,
>>>>>
>>>>> I am developing a twisted app, and it runs as a service using twistd
>>>>> -y to start the app.
>>>>> I am having a problem of running a thread. I know it is not
>>>>> recommended to use thread, but the library that I use, the object created
>>>>> is running in a thread.
>>>>>
>>>>> Here is the problem:
>>>>>
>>>>> 1) if I start reactor by running reactor.run() directly, thread is
>>>>> running fine
>>>>> 2) if I run it as a service using twisted, the thread is not running,
>>>>> it runs but it seems to be blocked, because I tried to write something to
>>>>> file using time.sleep(), but file is empty.
>>>>>
>>>>> Is there something that I miss? How can I debug this?
>>>>>
>>>>
>>>> A good next step would be to create at Short, Self Contained, Correct
>>>> (Compilable), Example <http://sscce.org/> and share it.
>>>>
>>>> Jean-Paul
>>>>
>>>>
>>>>>
>>>>> Thank you,
>>>>>
>>>>> TS
>>>>> _______________________________________________
>>>>> Twisted-Python mailing list
>>>>> Twisted-Python at twistedmatrix.com
>>>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>>>
>>>> _______________________________________________
>>>> Twisted-Python mailing list
>>>> Twisted-Python at twistedmatrix.com
>>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200522/ee4ab853/attachment.htm>

From barry.scott at forcepoint.com  Fri May 22 10:16:01 2020
From: barry.scott at forcepoint.com (Barry Scott)
Date: Fri, 22 May 2020 17:16:01 +0100
Subject: [Twisted-Python] Twisted and Thread,
 thread not running when twisted app is running as service
In-Reply-To: <CAJB=Z87SvjODCfxVL2sGMxT0tjD9KF1Pe5TfRoVsBXQFfO8u=A@mail.gmail.com>
References: <etPan.5ebdecbc.327b23c6.6b52@fastmail.com>
 <CAEeXt4Py-vS9jU2rGASZyx2d2FQaSZmrDcsyBQNjuJEZPQZ+PQ@mail.gmail.com>
 <CAJB=Z87SvjODCfxVL2sGMxT0tjD9KF1Pe5TfRoVsBXQFfO8u=A@mail.gmail.com>
Message-ID: <7115081.EvYhyI6sBW@fpbarry>

On Thursday, 21 May 2020 21:45:44 BST Sereysethy TOUCH wrote:
> I am on MacOS, it is a development phase, but deployment will be on Linux.
> 
> It is hard to run dtrace/dtruss on MacOS due to the "system integrity
> protection" on MacOS. I got some output but very limited information.
> 
> So if there is a workaround you might suggest?

Why bother debugging it on macOS it never has to work there?

If you are targetting linux then develop and test in linux I'd recommend.
I use VMware fusion on the mac and run VMs for the target
environements I need. Works very well.

Barry

> 
> TS
> 
> On Thu, May 21, 2020 at 10:20 PM Jean-Paul Calderone <
> 
> exarkun at twistedmatrix.com> wrote:
> > On Thu, May 21, 2020 at 3:56 PM Sereysethy TOUCH <
> > 
> > touch.sereysethy at gmail.com> wrote:
> >> Hi Jean-Paul,
> >> 
> >> I found the error after working on a short, self contained, correcte
> >> example. It is not about twisted and normal thread in general, but
> >> something else.
> >> 
> >> After more tests, I come to realise that whenever I instantiate this
> >> class PolicyClient from this library
> >> https://github.com/ray-project/ray/blob/master/rllib/env/policy_client.py
> >> in my protocol or just anywhere, twisted app either freezes or
> >> terminates, and this *only* happens when the app runs as a daemon,
> >> created using a service (.tac file).
> >> 
> >> I hope you can take a look at the class PolicyClient, why it causes
> >> problem to reactor main loop. Please point me to where the idea might
> >> come
> >> from.
> >> 
> >> I can give you the example but not sure if it is enough, as the client
> >> needs to connect to a server.
> > 
> > It looks like PolicyClient does a blocking HTTP request in __init__.
> > Since PolicyClient is instantiated in the reactor thread, this will block
> > the reactor.  Perhaps this call is hanging for some reason when the
> > process
> > has daemonized?  This would be unusual but not unheard of.  For example,
> > there are macOS environments where a process does not have access to the
> > network if it is not associated with a windowing session.
> > 
> > What platform do you observe the problem on, and what more can you learn
> > about what the process does on its way to hanging (eg can you run strace
> > on
> > it)?
> > 
> > Jean-Paul
> > 
> >> Thank you,
> >> TS
> >> 
> >> 
> >> On Thu, May 21, 2020 at 5:23 PM Jean-Paul Calderone <
> >> 
> >> exarkun at twistedmatrix.com> wrote:
> >>> On Thu, May 21, 2020 at 10:58 AM Sereysethy TOUCH <
> >>> 
> >>> touch.sereysethy at gmail.com> wrote:
> >>>> Hello,
> >>>> 
> >>>> I am developing a twisted app, and it runs as a service using twistd -y
> >>>> to start the app.
> >>>> I am having a problem of running a thread. I know it is not recommended
> >>>> to use thread, but the library that I use, the object created is
> >>>> running in
> >>>> a thread.
> >>>> 
> >>>> Here is the problem:
> >>>> 
> >>>> 1) if I start reactor by running reactor.run() directly, thread is
> >>>> running fine
> >>>> 2) if I run it as a service using twisted, the thread is not running,
> >>>> it runs but it seems to be blocked, because I tried to write something
> >>>> to
> >>>> file using time.sleep(), but file is empty.
> >>>> 
> >>>> Is there something that I miss? How can I debug this?
> >>> 
> >>> A good next step would be to create at Short, Self Contained, Correct
> >>> (Compilable), Example <http://sscce.org/> and share it.
> >>> 
> >>> Jean-Paul
> >>> 
> >>>> Thank you,
> >>>> 
> >>>> TS
> >>>> _______________________________________________
> >>>> Twisted-Python mailing list
> >>>> Twisted-Python at twistedmatrix.com
> >>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >>> 
> >>> _______________________________________________
> >>> Twisted-Python mailing list
> >>> Twisted-Python at twistedmatrix.com
> >>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >> 
> >> _______________________________________________
> >> Twisted-Python mailing list
> >> Twisted-Python at twistedmatrix.com
> >> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> > 
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python





From touch.sereysethy at gmail.com  Fri May 22 13:50:03 2020
From: touch.sereysethy at gmail.com (Sereysethy TOUCH)
Date: Fri, 22 May 2020 21:50:03 +0200
Subject: [Twisted-Python] Twisted and Thread,
 thread not running when twisted app is running as service
In-Reply-To: <7115081.EvYhyI6sBW@fpbarry>
References: <etPan.5ebdecbc.327b23c6.6b52@fastmail.com>
 <CAEeXt4Py-vS9jU2rGASZyx2d2FQaSZmrDcsyBQNjuJEZPQZ+PQ@mail.gmail.com>
 <CAJB=Z87SvjODCfxVL2sGMxT0tjD9KF1Pe5TfRoVsBXQFfO8u=A@mail.gmail.com>
 <7115081.EvYhyI6sBW@fpbarry>
Message-ID: <CAJB=Z84CPm6YFrS-TdDtCN6-bhWNCzFLvbNpkaLRzjMBLfWwjA@mail.gmail.com>

Hi,

After I tested it on Linux, everything works fine. So I think the problem
is related to MacOS restriction. I already reported the problem to the
maintainers, because the library is supposed to work on both Linux and
MacOS. But this new thread is killing the twisted main reactor.

By the way I have another question regarding ssh client. I developed an ssh
client, after authentication is made, I dont want to open a channel
directly in serviceStarted in connection, I want to keep the connection so
that I can use to open channel for doing exec later, my question is where
should I keep that connection? Currently in my transport I add a defer in
which it will be later called to create another object that I control, the
defer is called back in serviceStarted, which I pass the connection object.
I am not sure what is a correct way to do it. For now I feel like it is a
cycling reference: transport -> connection -> transport -> my object to
control connection.

Thanks,
TS

On Fri, May 22, 2020 at 6:16 PM Barry Scott <barry.scott at forcepoint.com>
wrote:

> On Thursday, 21 May 2020 21:45:44 BST Sereysethy TOUCH wrote:
> > I am on MacOS, it is a development phase, but deployment will be on
> Linux.
> >
> > It is hard to run dtrace/dtruss on MacOS due to the "system integrity
> > protection" on MacOS. I got some output but very limited information.
> >
> > So if there is a workaround you might suggest?
>
> Why bother debugging it on macOS it never has to work there?
>
> If you are targetting linux then develop and test in linux I'd recommend.
> I use VMware fusion on the mac and run VMs for the target
> environements I need. Works very well.
>
> Barry
>
> >
> > TS
> >
> > On Thu, May 21, 2020 at 10:20 PM Jean-Paul Calderone <
> >
> > exarkun at twistedmatrix.com> wrote:
> > > On Thu, May 21, 2020 at 3:56 PM Sereysethy TOUCH <
> > >
> > > touch.sereysethy at gmail.com> wrote:
> > >> Hi Jean-Paul,
> > >>
> > >> I found the error after working on a short, self contained, correcte
> > >> example. It is not about twisted and normal thread in general, but
> > >> something else.
> > >>
> > >> After more tests, I come to realise that whenever I instantiate this
> > >> class PolicyClient from this library
> > >>
> https://github.com/ray-project/ray/blob/master/rllib/env/policy_client.py
> > >> in my protocol or just anywhere, twisted app either freezes or
> > >> terminates, and this *only* happens when the app runs as a daemon,
> > >> created using a service (.tac file).
> > >>
> > >> I hope you can take a look at the class PolicyClient, why it causes
> > >> problem to reactor main loop. Please point me to where the idea might
> > >> come
> > >> from.
> > >>
> > >> I can give you the example but not sure if it is enough, as the client
> > >> needs to connect to a server.
> > >
> > > It looks like PolicyClient does a blocking HTTP request in __init__.
> > > Since PolicyClient is instantiated in the reactor thread, this will
> block
> > > the reactor.  Perhaps this call is hanging for some reason when the
> > > process
> > > has daemonized?  This would be unusual but not unheard of.  For
> example,
> > > there are macOS environments where a process does not have access to
> the
> > > network if it is not associated with a windowing session.
> > >
> > > What platform do you observe the problem on, and what more can you
> learn
> > > about what the process does on its way to hanging (eg can you run
> strace
> > > on
> > > it)?
> > >
> > > Jean-Paul
> > >
> > >> Thank you,
> > >> TS
> > >>
> > >>
> > >> On Thu, May 21, 2020 at 5:23 PM Jean-Paul Calderone <
> > >>
> > >> exarkun at twistedmatrix.com> wrote:
> > >>> On Thu, May 21, 2020 at 10:58 AM Sereysethy TOUCH <
> > >>>
> > >>> touch.sereysethy at gmail.com> wrote:
> > >>>> Hello,
> > >>>>
> > >>>> I am developing a twisted app, and it runs as a service using
> twistd -y
> > >>>> to start the app.
> > >>>> I am having a problem of running a thread. I know it is not
> recommended
> > >>>> to use thread, but the library that I use, the object created is
> > >>>> running in
> > >>>> a thread.
> > >>>>
> > >>>> Here is the problem:
> > >>>>
> > >>>> 1) if I start reactor by running reactor.run() directly, thread is
> > >>>> running fine
> > >>>> 2) if I run it as a service using twisted, the thread is not
> running,
> > >>>> it runs but it seems to be blocked, because I tried to write
> something
> > >>>> to
> > >>>> file using time.sleep(), but file is empty.
> > >>>>
> > >>>> Is there something that I miss? How can I debug this?
> > >>>
> > >>> A good next step would be to create at Short, Self Contained, Correct
> > >>> (Compilable), Example <http://sscce.org/> and share it.
> > >>>
> > >>> Jean-Paul
> > >>>
> > >>>> Thank you,
> > >>>>
> > >>>> TS
> > >>>> _______________________________________________
> > >>>> Twisted-Python mailing list
> > >>>> Twisted-Python at twistedmatrix.com
> > >>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> > >>>
> > >>> _______________________________________________
> > >>> Twisted-Python mailing list
> > >>> Twisted-Python at twistedmatrix.com
> > >>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> > >>
> > >> _______________________________________________
> > >> Twisted-Python mailing list
> > >> Twisted-Python at twistedmatrix.com
> > >> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> > >
> > > _______________________________________________
> > > Twisted-Python mailing list
> > > Twisted-Python at twistedmatrix.com
> > > https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200522/93cbb55a/attachment.htm>

From glyph at twistedmatrix.com  Fri May 22 23:39:36 2020
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 22 May 2020 22:39:36 -0700
Subject: [Twisted-Python] [RFC] Drop support for Python 3.5 sometime
 after May 2021?
In-Reply-To: <a76d43a0-1b65-b341-ea55-d870dd736c81@matrix.org>
References: <CAG=rPVeM1ohNMTErKseTEkhNr6Eo5ZG8ioZFTODp05i06Egj2Q@mail.gmail.com>
 <4ccc77f9-86f4-5745-b7f7-3758e458e499@atleastfornow.net>
 <C0B2209F-7C5C-4D76-ABBC-DD6350AB625C@twistedmatrix.com>
 <91b73cde-3bc9-42d0-b25e-11632d49f9f8@www.fastmail.com>
 <7c42789c-f99f-423d-baa5-2e425c675591@www.fastmail.com>
 <CAG=rPVdZPRGo0fjjMEBUHroO0p6X68DAx6WjtJcwzs24R0E8zQ@mail.gmail.com>
 <E7A4CF5C-D3F1-4923-A54F-41ECF614E604@twistedmatrix.com>
 <a76d43a0-1b65-b341-ea55-d870dd736c81@matrix.org>
Message-ID: <E33363C7-1C26-48D8-8D3D-5D6A79E88479@twistedmatrix.com>


> On May 19, 2020, at 1:52 AM, Richard van der Hoff <richard at matrix.org> wrote:
> 
> On 16/05/2020 06:56, Glyph wrote:
>> 
>> 
>>> On May 15, 2020, at 8:40 PM, Craig Rodrigues <rodrigc at crodrigues.org <mailto:rodrigc at crodrigues.org>> wrote:
>>> 
>>> Maybe it would be OK to do one more release of Twisted and announce that as the last release supporting Python 3.5, before
>>> dropping support?  
>> 
>> Yeah; whenever we drop a Python version we should always support at least one more release, so that people have some notice before they lose access to the next set of security updates.
>> 
>> Any 3.5 users on this list who would want to postpone it longer than this?
>> 
> Sadly we have an important customer whose servers run debian oldstable, which means we need to stay compatible with 3.5 until we can persuade them to upgrade, and it's taken a couple of years to get them off python 2.7...
> 
> I'm not sure that should necessarily affect your plans, but I doubt we're alone in this situation.
> 

I guess one thing I'm curious about is why your application would need to be installed along with the system Python on those OS versions?  It seems like a packaging strategy that ignored the fossilized versions that Debian packages with the system and just built its own Python would be more reliable and allow for upgrading at least most Python dependencies well beyond what the system would allow by policy.  Or, for that matter, why not just run in a Docker container?

Matrix is a pretty big user, and so in some sense I care about this specific case, but I also find the general question interesting, because I have difficulty reasoning about how long to support older versions of things in the modern application packaging environment where containers, virtualenvs, and associated tooling make it possible to effectively ignore the base environment. When & why do you have to pay attention to it?

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200522/c5e1a953/attachment.htm>

From glyph at twistedmatrix.com  Fri May 22 23:42:05 2020
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 22 May 2020 22:42:05 -0700
Subject: [Twisted-Python] [RFC] Drop support for Python 3.5 sometime
 after May 2021?
In-Reply-To: <CAEeXt4OG3UWgj62dHpiVtY+Z-qZSyaXkZJdKfPqtk9v-jMtRDA@mail.gmail.com>
References: <CAG=rPVeM1ohNMTErKseTEkhNr6Eo5ZG8ioZFTODp05i06Egj2Q@mail.gmail.com>
 <C623591F-DA86-4AB9-980A-8217BEAC04B5@twistedmatrix.com>
 <759e4eed-01c7-4455-a6fa-338daeb15776@www.fastmail.com>
 <9701438.nUPlyArG6x@fpbarry>
 <CAEeXt4OG3UWgj62dHpiVtY+Z-qZSyaXkZJdKfPqtk9v-jMtRDA@mail.gmail.com>
Message-ID: <02868616-6E47-43C4-B8D4-DA66F598FFF4@twistedmatrix.com>



> On May 19, 2020, at 5:41 AM, Jean-Paul Calderone <exarkun at twistedmatrix.com> wrote:
> 
> On Tue, May 19, 2020 at 8:33 AM Barry Scott <barry.scott at forcepoint.com <mailto:barry.scott at forcepoint.com>> wrote:
> On Monday, 18 May 2020 22:21:16 BST Tom Most wrote:
> 
> > 
> > If looking improve process management in Twisted, I think that the
> > lowest-hanging fruit is to watch children with pidfd, rather than reaping
> > all children on SIGCHLD. This O(n) reaping --- one waitpid() call per
> > running process --- starts to consume substantial CPU. IIRC it pegged a
> > core at 20,000 processes or so.
> 
> Why not waitpid for all children (pid=0 or pid=-1) in a single call?
> 
> Barry
> 
> Because then you might reap a child process someone launched with a different API - eg the Python subprocess module.

In case it is not clear from context - we used to do exactly this.  It broke a lot of stuff.  The current approach is slow, but robust.

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200522/4b4b62cc/attachment-0001.htm>

From glyph at twistedmatrix.com  Fri May 22 23:54:42 2020
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 22 May 2020 22:54:42 -0700
Subject: [Twisted-Python] [RFC] Drop support for Python 3.5 sometime
 after May 2021?
In-Reply-To: <c6f62455-99fe-4fe9-a866-3982505098e9@www.fastmail.com>
References: <CAG=rPVeM1ohNMTErKseTEkhNr6Eo5ZG8ioZFTODp05i06Egj2Q@mail.gmail.com>
 <C623591F-DA86-4AB9-980A-8217BEAC04B5@twistedmatrix.com>
 <759e4eed-01c7-4455-a6fa-338daeb15776@www.fastmail.com>
 <9701438.nUPlyArG6x@fpbarry>
 <CAEeXt4OG3UWgj62dHpiVtY+Z-qZSyaXkZJdKfPqtk9v-jMtRDA@mail.gmail.com>
 <c6f62455-99fe-4fe9-a866-3982505098e9@www.fastmail.com>
Message-ID: <EC462A98-D7AD-4B9D-BF1E-7C839C1426B0@twistedmatrix.com>



> On May 19, 2020, at 11:14 AM, Tom Most <twm at freecog.net> wrote:
> 
> On Tue, May 19, 2020, at 5:41 AM, Jean-Paul Calderone wrote:
>> On Tue, May 19, 2020 at 8:33 AM Barry Scott <barry.scott at forcepoint.com <mailto:barry.scott at forcepoint.com>> wrote:
>> Why not waitpid for all children (pid=0 or pid=-1) in a single call? 
>> 
>> Because then you might reap a child process someone launched with a different API - eg the Python subprocess module.
> 
> Exactly. I am currently using this as a workaround, but it's not a general solution. You need to be careful because subprocess use hides in many places. For example, beware uuid.uuid1().

So, pidfd's cool, we should totally use it.  Also we should use posix_spawn and maybe some other stuff too.  But I wonder if there's any heuristic we could use to speed up our current strategy, like ordering the to-reap list by putting things with no open FDs at the front of it?  And optimistically assuming that once we've found something to reap, maybe we can stop?  And maybe it should run in a cooperator, rather than just blocking the reactor indefinitely?  Honestly it had not occurred to me that people were managing 20k+ python interpreters at a time with spawnProcess (although, yikes, amazing, you've gotta talk more about this application, and what kind of hardware you're on!)

Anyway there's lot of exciting room for performance improvements here, it would be nice to have some benchmarks for this kind of high-load process-monitor application.

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200522/1b75ce75/attachment.htm>

From trac at twistedmatrix.com  Sun May 24 00:05:15 2020
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 24 May 2020 06:05:15 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1590300315.87.3977932005198415066@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200524/f48ae9b6/attachment.htm>

From erik at matrix.org  Thu May 28 09:31:06 2020
From: erik at matrix.org (Erik Johnston)
Date: Thu, 28 May 2020 16:31:06 +0100
Subject: [Twisted-Python] [RFC] Drop support for Python 3.5 sometime
 after May 2021?
In-Reply-To: <E33363C7-1C26-48D8-8D3D-5D6A79E88479@twistedmatrix.com>
References: <CAG=rPVeM1ohNMTErKseTEkhNr6Eo5ZG8ioZFTODp05i06Egj2Q@mail.gmail.com>
 <4ccc77f9-86f4-5745-b7f7-3758e458e499@atleastfornow.net>
 <C0B2209F-7C5C-4D76-ABBC-DD6350AB625C@twistedmatrix.com>
 <91b73cde-3bc9-42d0-b25e-11632d49f9f8@www.fastmail.com>
 <7c42789c-f99f-423d-baa5-2e425c675591@www.fastmail.com>
 <CAG=rPVdZPRGo0fjjMEBUHroO0p6X68DAx6WjtJcwzs24R0E8zQ@mail.gmail.com>
 <E7A4CF5C-D3F1-4923-A54F-41ECF614E604@twistedmatrix.com>
 <a76d43a0-1b65-b341-ea55-d870dd736c81@matrix.org>
 <E33363C7-1C26-48D8-8D3D-5D6A79E88479@twistedmatrix.com>
Message-ID: <e68c7e7f-b889-19db-ac48-669dbc03d162@matrix.org>


On 23/05/2020 06:39, Glyph wrote:
>
>> On May 19, 2020, at 1:52 AM, Richard van der Hoff <richard at matrix.org 
>> <mailto:richard at matrix.org>> wrote:
>>
>> On 16/05/2020 06:56, Glyph wrote:
>>>
>>>
>>>> On May 15, 2020, at 8:40 PM, Craig Rodrigues 
>>>> <rodrigc at crodrigues.org <mailto:rodrigc at crodrigues.org>> wrote:
>>>>
>>>> Maybe it would be OK to do one more release of Twisted and announce 
>>>> that as the last release supporting Python 3.5, before
>>>> dropping support?
>>>
>>> Yeah; whenever we drop a Python version we should always support at 
>>> least one more release, so that people have some notice before they 
>>> lose access to the next set of security updates.
>>>
>>> Any 3.5 users on this list who would want to postpone it longer than 
>>> this?
>>>
>> Sadly we have an important customer whose servers run debian 
>> oldstable, which means we need to stay compatible with 3.5 until we 
>> can persuade them to upgrade, and it's taken a couple of years to get 
>> them off python 2.7...
>>
>> I'm not sure that should necessarily affect your plans, but I doubt 
>> we're alone in this situation.
>>
> I guess one thing I'm curious about is why your application would need 
> to be installed along with the system Python on those OS versions?  It 
> seems like a packaging strategy that ignored the fossilized versions 
> that Debian packages with the system and just built its own Python 
> would be more reliable and allow for upgrading at least most Python 
> dependencies well beyond what the system would allow by policy.  Or, 
> for that matter, why not just run in a Docker container?
>
> Matrix is a pretty big user, and so in some sense I care about this 
> specific case, but I also find the general question interesting, 
> because I have difficulty reasoning about how long to support older 
> versions of things in the modern application packaging environment 
> where containers, virtualenvs, and associated tooling make it possible 
> to effectively ignore the base environment. When & why do you have to 
> pay attention to it?
>
> -glyph


I believe in this case its a general desire to keep track of what 
packages are running and where they've come from. They basically trust 
that packages from official Debian repositories are probably safe from 
being tampered with, whereas random tarballs of code from the web are 
not safe (unless they're signed by someone they trust or whatever).

Now, I think it would be possible to get a newer version of Python on 
their infrastructure if we needed, but I'm sure there would be hoops 
that would need to be jumped through and justifications given, etc, 
which would undoubtedly take some time. So really it just means extra 
faff for them and us, especially since we're only a small part of their 
overall infrastructure.

Then there is the fact that they're not unique. While oldstable is, 
well, old, its still very much supported and so there's going to be a 
bunch of "enterprise" (for want of a better term) customers who will 
still be using it, and we'll need to go through the faff each and every 
time, which is quite tedious. Come the Autumn when oldstable stops being 
supported (or at least, goes into LTS mode), it might become easier to 
justify that it really /is/ reasonable for us to require a newer version 
of Python (and that they should really really upgrade their debian 
version, and its their own fault that they haven't and have to deal with 
faff that comes from that).

This would also be easier if debian had newer versions of python in 
backports, or someone ran a semi-official package repository which had 
them, but as far as I can tell no one does for debian.

(Of course you can argue that all the above is a bit silly from a 
security perspective, especially when you start considering virtualenvs 
and the like, but I have some sympathy for their outlook even if it is a 
pain at times).


In terms of twisted dropping support of 3.5, I guess the question is to 
what extent do you want applications to be hassle free to deploy on the 
more "enterprise" style environment? Without having followed along with 
the thread my bias would be to keep support until stretch support is 
ended in the Autumn. Though if 3.5 support is holding things back a lot 
then I can completely understand dropping it sooner.

(FWIW in Matrix/Synapse we take the view that we retain compat with 
old-but-supported dependencies, such as postgres, until/unless it starts 
being too costly in terms of maintenance and opportunity costs)


- Erik



-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200528/7573afac/attachment.htm>

From twm at freecog.net  Thu May 28 16:13:42 2020
From: twm at freecog.net (Tom Most)
Date: Thu, 28 May 2020 15:13:42 -0700
Subject: [Twisted-Python] 
 =?utf-8?q?=5BRFC=5D_Drop_support_for_Python_3?=
 =?utf-8?q?=2E5_sometime_after_May_2021=3F?=
In-Reply-To: <EC462A98-D7AD-4B9D-BF1E-7C839C1426B0@twistedmatrix.com>
References: <CAG=rPVeM1ohNMTErKseTEkhNr6Eo5ZG8ioZFTODp05i06Egj2Q@mail.gmail.com>
 <C623591F-DA86-4AB9-980A-8217BEAC04B5@twistedmatrix.com>
 <759e4eed-01c7-4455-a6fa-338daeb15776@www.fastmail.com>
 <9701438.nUPlyArG6x@fpbarry>
 <CAEeXt4OG3UWgj62dHpiVtY+Z-qZSyaXkZJdKfPqtk9v-jMtRDA@mail.gmail.com>
 <c6f62455-99fe-4fe9-a866-3982505098e9@www.fastmail.com>
 <EC462A98-D7AD-4B9D-BF1E-7C839C1426B0@twistedmatrix.com>
Message-ID: <887b3218-b523-483f-8a2d-754266cf35b0@www.fastmail.com>

On Fri, May 22, 2020, at 10:54 PM, Glyph wrote:
> So, pidfd's cool, we should totally use it. Also we should use posix_spawn and maybe some other stuff too. But I wonder if there's any heuristic we could use to speed up our current strategy, like ordering the to-reap list by putting things with no open FDs at the front of it? And optimistically assuming that once we've found something to reap, maybe we can stop? And maybe it should run in a cooperator, rather than just blocking the reactor indefinitely?

Those all sound like reasonable optimizations with little downside to me.

> Honestly it had not occurred to me that people were managing 20k+ python interpreters at a time with spawnProcess (although, yikes, amazing, you've gotta talk more about this application, and what kind of hardware you're on!)

Nonono, that was a synthetic stress test. It did spawn Python processes, but they immediately called `exec sleep` to conserve memory.

The result of the test was that the service would run out of memory _well_ before inefficiencies in Twisted's reaping scheme became a problem.
 
---Tom


From wiml at hhhh.org  Sat May 30 00:16:29 2020
From: wiml at hhhh.org (Wim Lewis)
Date: Fri, 29 May 2020 23:16:29 -0700
Subject: [Twisted-Python] Deprecate and remove
 t.internet.ssl.DistinguishedName ?
Message-ID: <20200530061628.GA15115@kosmos.hhhh.org>

I'm looking at a fix for bug <https://twistedmatrix.com/trac/ticket/9804>
(Cannot load a PEM certificate with Unicode in subject). The underlying
problem is that the DistinguishedName class can't handle non-ascii AVAs.
The fix I've made simply avoids creating DistinguishedName instances when
it isn't necessary, but that leaves the question of what to do with the
class. I think that the best thing to do is to deprecate the class
entirely and replace it with simpler API. 

Reasons I think that the DN class is broken:
  - The values in a certificate are conceptually text-strings, not
    byte strings; they may be in ASCII, UTF8, UTF16, or several
    other encodings. However
    - DN represents these textual values as `bytes` instead of `str`
    - DN can't handle non-ASCII-representable values at all, even if
      the user never tries to access that value
  - It can only handle a subset of the attribute-assertions found in
    a PKIX DN; there's no escape hatch for others (e.g. OID keys or
    whatever)
  - It can't represent the full structure of a DN (specific ordering,
    multiple-value RDNs, AVAs whos values aren't textual, etc.) ---
    these are not common in the PKIX world but they are valid

What I propose as an alternative:
  - Replace APIs that take `DistinguishedName` classes with ones that take
    `Union[OpenSSL.crypto.X509Name, dict]` where the `dict` format is parsed
    with the same convenience semantics as DistinguishedName, except that
    values are `str`
  - Replace APIs that return `DistinguishedName` with ones that return
    OpenSSL.crypto.X509Name, which is already fairly convenient to use
    (e.g. it has attributes for retrieving/setting commonName
    and so on without dealing with the full complexity of X.500 names)
  - Deprecate `DistinguishedName` and the APIs that use it for eventual removal
  - Expose a convenience function for the dict -> X509Name transform

Any objections? Thoughts on how I should go about doing this? Should I
do it as part of this Trac ticket or split it out?

The only downside I can think of is that this exposes the
OpenSSL.crypto.X509Name type as part of Twisted's API. I don't think
this is a huge reduction in flexibility --- Twisted's API already somewhat
assumes that TLS is implemented using OpenSSL, and only users whose needs
are *already* not well met by DistinguishedName will care if that `Union`
type changes in the future.


Wim Lewis / wiml at hhhh.org


From trac at twistedmatrix.com  Sun May 31 00:05:22 2020
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 31 May 2020 06:05:22 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1590905122.66.8466882621900903866@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200531/fa06cd07/attachment.htm>

