From trac at twistedmatrix.com  Sun Sep  2 00:05:26 2018
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 02 Sep 2018 06:05:26 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1535868326.68.511708445267314428@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180902/9ec7a1fa/attachment.html>

From glyph at twistedmatrix.com  Wed Sep  5 01:25:19 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 5 Sep 2018 00:25:19 -0700
Subject: [Twisted-Python] T9217 / PR1052: Wheels, wheels, and more wheels
In-Reply-To: <9d085475b70a1ff9846690ed9c82d13c@fstab.net>
References: <9d085475b70a1ff9846690ed9c82d13c@fstab.net>
Message-ID: <365DD63E-800D-49A4-A070-5BAE0B860AE3@twistedmatrix.com>



> On Aug 29, 2018, at 10:13 AM, Kyle Altendorf <sda at fstab.net <mailto:sda at fstab.net>> wrote:
> 
> Hi All,

Hi Kyle!

> I am working on ticket #9217 / PR #1051 to add lots more wheel generation to the Twisted CI.  I decided to give the cibuildwheel package a try and it made this process almost too easy (well... sort of :] ).  I've got AppVeyor-Windows, Travis-Linux, and Circle-OSX all building a variety of wheels for the supported Python versions and bit depths.  Travis doesn't save artifacts 'easily' so I went ahead and doubled up on Linux on Circle for now, though it's having some Docker issues at the moment and hasn't been successful yet.  For some reason in this one case the project directory isn't getting mounted into the container as expected.

Thanks for doing this!

> wheel links:
> https://github.com/twisted/twisted/pull/1051#issuecomment-416743261 <https://github.com/twisted/twisted/pull/1051#issuecomment-416743261> (and next comment)
> 
> Now that I've got the wheel builds happening I figured it'd be good to try them out on 'real' machines.  Turns out we get a failure on twisted.cred.test.test_strcred.SSHCheckerTests.test_isChecker for at least the two checks I've done so far (Windows and OSX).  I haven't done more than a cursory look at that yet, but it's on the list to understand and resolve.  More testing would of course be welcome.  Real world, just trial Twisted's own tests, whatever would be appreciated if you are interested.
> 
> failures with wheels:
> https://github.com/twisted/twisted/pull/1051#issuecomment-416977723 <https://github.com/twisted/twisted/pull/1051#issuecomment-416977723>

It's not clear to me that we have any test environments that accurately test what happens after you install from PyPI.  If we could build these wheels and then actually run tests on installing them that would be a big step forward in test fidelity!  But given the current state of the art, I'd be happy if they just got built from the same code that passed our tests in existing configurations.

> Overall, it's a bit unclear what the intended use of the various CI hosts are for Twisted.

Ideally, Travis would handle it all.

But Travis can't run multiple kernels, so we have buildbots for lots of alternate kernels, just to make sure.  Including BSD kernels, since those are actually substantially different where sockets are concerned.

And Travis macOS support is so slow that it was a serious blocker for a while, so the buildbot is filling in until Circle can take over.

And Travis can't do Windows, so that's where appveyor comes in.

There might still be various non-special-kernel testing things that buildbot does, but those are probably holdovers that, if they still have a reason to exist, it's exactly because Travis doesn't have artifact hosting.

Hopefully that's comprehensive?

> I hear that Travis OSX builds were really slow, but from what I can see Circle isn't doing any OSX (other than what I added).

The issue for addressing this is https://twistedmatrix.com/trac/ticket/9445 <https://twistedmatrix.com/trac/ticket/9445> if you'd like to pick up where Adi left off.  It's probably just resolving some conflicts, resubmitting for review, and bugging people to get it through the process :).

> There wasn't any artifact storage being used on Circle either.  So, I'm not sure if there was a reason to use Circle that went away, or...  But, not having to hook Travis up to S3 or somesuch for storage is quite nice so Circle wins at least in that category.

I think the big problem on Circle is capacity limits, but I don't know if that's just a macOS thing, or what.

> Now that I've got something rough in place, are there any opinions about how this should work?  I don't know the present release workflow so I don't know if we'd want an automatic push to PyPI on tags (probably not)

I definitely want this.  This is really the whole point, what we're trying to get to :).  Why don't you think we want this?

> or just artifacts on the build server to grab manually (would need some S3 or such for Travis, or Circle for Linux builds as well).  Anything else?  Do we want automated tests against the wheels?  cibuildwheel does have a feature for that though I haven't done anything with it yet.

Ideally we'd push the wheels on tag once the tests passed, but I'd be OK with just unconditionally just building / pushing on tag for starters.

> Anyways...  hello, thanks for Twisted, and I hope this work ends up saving some people some time.

I can't wait for fully automated releases :).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180905/610c4203/attachment.html>

From glyph at twistedmatrix.com  Wed Sep  5 01:27:22 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 5 Sep 2018 00:27:22 -0700
Subject: [Twisted-Python] Keeping logger from snatching stdout?
In-Reply-To: <CA+1iZEcfQOcSuZAYzjafbCEDh-dsONUTjOx8v4e8PR=HPt+tsQ@mail.gmail.com>
References: <CA+1iZEcfQOcSuZAYzjafbCEDh-dsONUTjOx8v4e8PR=HPt+tsQ@mail.gmail.com>
Message-ID: <531AE31D-1F56-47A4-BE8F-04156BF99906@twistedmatrix.com>



On Aug 29, 2018, at 3:48 PM, Jeff Grimmett <grimmtooth at gmail.com <mailto:grimmtooth at gmail.com>> wrote:

> I'm working on a Flask project using the flask_twisted package from PyPI and have encountered a mystery.  I don't *have* to solve it to move on, but darn it, I can't let it go :)
> 
> https://pypi.org/project/Flask-Twisted/ <https://pypi.org/project/Flask-Twisted/>
> https://github.com/cravler/flask-twisted/ <https://github.com/cravler/flask-twisted/>
> 
> So here's the breakdown: when use the standard logging module to output to a logfile + stdout, everything is fine.  I do see some logging output from Twisted as well (the web server part) but for the most part life is groovy.
> 
> I'm going to be integrating in a wxPython windows app to this (previously it's been a shell app) and step 1 was to make my own stdout handler that eventually would pipe all that stuff to a window in the wx app.  The first step of THAT (step 1.a) was to replace all the logging stuff with print() placeholders.

Why would you do this rather than simply handle logging events? Both twisted and the stdlib have mechanisms for adding observers that will give you access to more structured information - particularly useful if you are trying to display something in a GUI.

> At that point, things got confusing, as now ALL of my print()s are being handled by Twisted's logging handler.

This (sort of) makes sense...

> I brought flask-twisted in local to my code so I could monkey around with it. First thing I noticed was that it was using twisted.python.log. I messed around with that - commented it out, and now I get no stdout output at all.  Set the parameter setStdout to False, same thing.

So, this is the old, legacy API, and what you want to use is this: https://twistedmatrix.com/documents/current/api/twisted.logger.LogBeginner.beginLoggingTo.html <https://twistedmatrix.com/documents/current/api/twisted.logger.LogBeginner.beginLoggingTo.html>

But it doesnâ€™t make sense to me that you would see no output at all, or that setStdout=False would swallow your print statements.

> The adapter code uses twisted.internet.reactor,  threads, twisted.web.server.Site, twisted.web.wsgi.WSGIResource, and twisted.web.resource.Resource, any one which might be responsible. I spent yesterday evening digging around but haven't found anything yet.

The only thing starting logging here appears to be flask-twisted; we only start logging in twist & twistd, within twisted itself.

> Any guidance / ideas?  

I'm very curious what is going on here, and whether it's a logging system bug.  Could you whittle this down to a minimal reproducer?

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180905/dd817f96/attachment.html>

From sda at fstab.net  Wed Sep  5 06:44:09 2018
From: sda at fstab.net (Kyle Altendorf)
Date: Wed, 05 Sep 2018 08:44:09 -0400
Subject: [Twisted-Python] T9217 / PR1052: Wheels, wheels, and more wheels
In-Reply-To: <365DD63E-800D-49A4-A070-5BAE0B860AE3@twistedmatrix.com>
References: <9d085475b70a1ff9846690ed9c82d13c@fstab.net>
 <365DD63E-800D-49A4-A070-5BAE0B860AE3@twistedmatrix.com>
Message-ID: <cad4b3f8014f1d1a186ae411b4094b53@fstab.net>

On 2018-09-05 03:25, Glyph wrote:
>> On Aug 29, 2018, at 10:13 AM, Kyle Altendorf <sda at fstab.net> wrote:
>> wheel links:
>> https://github.com/twisted/twisted/pull/1051#issuecomment-416743261 
>> (and next comment)
>> 
>> Now that I've got the wheel builds happening I figured it'd be good to 
>> try them out on 'real' machines.  Turns out we get a failure on 
>> twisted.cred.test.test_strcred.SSHCheckerTests.test_isChecker for at 
>> least the two checks I've done so far (Windows and OSX).  I haven't 
>> done more than a cursory look at that yet, but it's on the list to 
>> understand and resolve.  More testing would of course be welcome.  
>> Real world, just trial Twisted's own tests, whatever would be 
>> appreciated if you are interested.
>> 
>> failures with wheels:
>> https://github.com/twisted/twisted/pull/1051#issuecomment-416977723
> 
> It's not clear to me that we have any test environments that accurately 
> test what happens after you install from PyPI.  If we could build these 
> wheels and then actually run tests on installing them that would be a 
> big step forward in test fidelity!  But given the current state of the 
> art, I'd be happy if they just got built from the same code that passed 
> our tests in existing configurations.

cibuildwheel does have an option to provide a test command.  If we did 
that would we replace the existing tests or supplement?  If 
supplementing that will presumably be a significant increase in build 
times.  Especially if we did it for all wheels.

So, how much of a build time hit do we want to take?

>> I hear that Travis OSX builds were really slow, but from what I can 
>> see Circle isn't doing any OSX (other than what I added).
> 
> The issue for addressing this is 
> https://twistedmatrix.com/trac/ticket/9445 if you'd like to pick up 
> where Adi left off.  It's probably just resolving some conflicts, 
> resubmitting for review, and bugging people to get it through the 
> process :).

https://github.com/twisted/twisted/pull/1056/files

It looks like the builds I added in my wheel PR, for whatever that is 
worth.  Well, other than picking xcode v9 vs me picking v10 which 
neither of the PRs use anyways.  I added the requires over in the wheel 
PR as well in case it ends up saving a useful amount of our OS X quota.

>> Now that I've got something rough in place, are there any opinions 
>> about how this should work?  I don't know the present release workflow 
>> so I don't know if we'd want an automatic push to PyPI on tags 
>> (probably not)
> 
> I definitely want this.  This is really the whole point, what we're 
> trying to get to :).  Why don't you think we want this?

Uhm...  hmm...  *shrug*  I figured someone might want to do a final spot 
check or have manual intervention for a real release.  You can't replace 
a file on PyPI so...  but sure, I didn't mean to argue against 
automation.

Here's one spot I did automatic deployment off of Travis to PyPI.

https://github.com/altendky/gitignoreio/blob/aeeb9546b6f27f411b191699d3625b4d0a08e7cf/.travis.yml#L11-L19

Pretty straightforward though I think it does the wheel build which 
isn't what we'd really want.  I'd have to check on how to deploy 
existing wheels as well as those from OS X and Windows.  I'd suggest a 
separate PR?  I mean maybe it'd be easier to get one PR reviewed than 
two but that doesn't seem like a great reason to mash things together.

Cheers,
-kyle


From robert.difalco at gmail.com  Wed Sep  5 07:39:58 2018
From: robert.difalco at gmail.com (Robert DiFalco)
Date: Wed, 5 Sep 2018 06:39:58 -0700
Subject: [Twisted-Python] Issue with TLS failure modes
In-Reply-To: <CAAXGW-xFq9UgBZdY+p0wjKxBW4z9P6a=CSc6Hspq3oV+TgBTJg@mail.gmail.com>
References: <CAAXGW-xFq9UgBZdY+p0wjKxBW4z9P6a=CSc6Hspq3oV+TgBTJg@mail.gmail.com>
Message-ID: <12D690E1-76E7-46E1-9884-3AF9E95FD7AD@gmail.com>

Is the timeout the only way to handle this kind of TLS handshake error?

Sent from my iPhone

> On Aug 30, 2018, at 10:14 AM, Robert DiFalco <robert.difalco at gmail.com> wrote:
> 
> I'm having an issue properly handling TLS failure modes. For example consider the EchoServer and EchoClient code. If I use a TLS client with a TCP4 server, I do not get a handshake exception until I abort the connection. But I don't want to abort the connection unless I get a handshake error. 
> 
> What I'd like to do is to check the handshake status in my protocol before my client sends bytes to the server. I'd like my send message to be able to raise the <class 'OpenSSL.SSL.Error'>: [('SSL routines', 'ssl23_read', 'ssl handshake failure'). But for some reason it seems to get lost until I abort the connection. Does this sound familiar to anyone?
> 
> What I've done for now is setup a Timeout mixin so that after my client.send, if I do not get an ACK back (which my particular protocol does) within two minutes, I just abort the connection. This then calls connectionLost with the correct SSL.Error. But if it's in the error queue (and found during the course of abortConnection then isn't there a way to find it sooner? Like before my timeout and before I call send on the client protocol?
> 
> Thanks!


From exarkun at twistedmatrix.com  Wed Sep  5 07:42:55 2018
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Wed, 5 Sep 2018 09:42:55 -0400
Subject: [Twisted-Python] Issue with TLS failure modes
In-Reply-To: <12D690E1-76E7-46E1-9884-3AF9E95FD7AD@gmail.com>
References: <CAAXGW-xFq9UgBZdY+p0wjKxBW4z9P6a=CSc6Hspq3oV+TgBTJg@mail.gmail.com>
 <12D690E1-76E7-46E1-9884-3AF9E95FD7AD@gmail.com>
Message-ID: <CAEeXt4OqrDrbd8qZN=rcOKiBZV1QS72P-7cQ8BnB96D6bQ=DsA@mail.gmail.com>

On Wed, Sep 5, 2018 at 9:40 AM Robert DiFalco <robert.difalco at gmail.com>
wrote:

> Is the timeout the only way to handle this kind of TLS handshake error?
>

It might be easier to answer your original question if you include a Short,
Self Contained, Correct (Compilable), Example <http://sscce.org/>.

Jean-Paul


> Sent from my iPhone
>
> > On Aug 30, 2018, at 10:14 AM, Robert DiFalco <robert.difalco at gmail.com>
> wrote:
> >
> > I'm having an issue properly handling TLS failure modes. For example
> consider the EchoServer and EchoClient code. If I use a TLS client with a
> TCP4 server, I do not get a handshake exception until I abort the
> connection. But I don't want to abort the connection unless I get a
> handshake error.
> >
> > What I'd like to do is to check the handshake status in my protocol
> before my client sends bytes to the server. I'd like my send message to be
> able to raise the <class 'OpenSSL.SSL.Error'>: [('SSL routines',
> 'ssl23_read', 'ssl handshake failure'). But for some reason it seems to get
> lost until I abort the connection. Does this sound familiar to anyone?
> >
> > What I've done for now is setup a Timeout mixin so that after my
> client.send, if I do not get an ACK back (which my particular protocol
> does) within two minutes, I just abort the connection. This then calls
> connectionLost with the correct SSL.Error. But if it's in the error queue
> (and found during the course of abortConnection then isn't there a way to
> find it sooner? Like before my timeout and before I call send on the client
> protocol?
> >
> > Thanks!
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180905/e051a5d8/attachment.html>

From sda at fstab.net  Fri Sep  7 06:28:30 2018
From: sda at fstab.net (Kyle Altendorf)
Date: Fri, 07 Sep 2018 08:28:30 -0400
Subject: [Twisted-Python] T9217 / PR1052: Wheels, wheels, and more wheels
In-Reply-To: <579E31AB-1CC8-4C6C-BC87-1034D094EE5F@twistedmatrix.com>
References: <9d085475b70a1ff9846690ed9c82d13c@fstab.net>
 <365DD63E-800D-49A4-A070-5BAE0B860AE3@twistedmatrix.com>
 <cad4b3f8014f1d1a186ae411b4094b53@fstab.net>
 <579E31AB-1CC8-4C6C-BC87-1034D094EE5F@twistedmatrix.com>
Message-ID: <fe0d492f72f12159f47dde89c133e8ed@fstab.net>

On 2018-09-07 01:58, Glyph wrote:
>> On Sep 5, 2018, at 5:44 AM, Kyle Altendorf <sda at fstab.net> wrote:
>> 
>> On 2018-09-05 03:25, Glyph wrote:
>>>> On Aug 29, 2018, at 10:13 AM, Kyle Altendorf <sda at fstab.net> wrote:
>>>> wheel links:
>>>> https://github.com/twisted/twisted/pull/1051#issuecomment-416743261 
>>>> (and next comment)
>>>> Now that I've got the wheel builds happening I figured it'd be good 
>>>> to try them out on 'real' machines.  Turns out we get a failure on 
>>>> twisted.cred.test.test_strcred.SSHCheckerTests.test_isChecker for at 
>>>> least the two checks I've done so far (Windows and OSX).  I haven't 
>>>> done more than a cursory look at that yet, but it's on the list to 
>>>> understand and resolve.  More testing would of course be welcome.  
>>>> Real world, just trial Twisted's own tests, whatever would be 
>>>> appreciated if you are interested.
>>>> failures with wheels:
>>>> https://github.com/twisted/twisted/pull/1051#issuecomment-416977723
>>> It's not clear to me that we have any test environments that 
>>> accurately test what happens after you install from PyPI.  If we 
>>> could build these wheels and then actually run tests on installing 
>>> them that would be a big step forward in test fidelity!  But given 
>>> the current state of the art, I'd be happy if they just got built 
>>> from the same code that passed our tests in existing configurations.
>> 
>> cibuildwheel does have an option to provide a test command.  If we did 
>> that would we replace the existing tests or supplement?  If 
>> supplementing that will presumably be a significant increase in build 
>> times.  Especially if we did it for all wheels.
> 
> Definitely replace.  What would you want to even supplement them with?

I was referring to supplementing the existing src tests with the wheel 
tests.

> 
>> So, how much of a build time hit do we want to take?
> 
> I was thinking that for starters here the goal would just be build
> automation, independent of trying to get a more realistic test path;
> only doing these builds when pushing a relevant tag.  If it's easy to
> just switch over everything to this then... great, I guess? :)  But
> let's not gild the lily here.

Alrighty, another PR for swapping over tests from src to wheels.

I would tend to always build the wheels.  It's easier for people to test 
intermediate releases for bugs.  It makes a release 'less special' so 
there is less likely to be a latent issue with the process or artifacts. 
  Etc.  But, let's see what the build time hit is.

Travis: 4 minutes, about half the time of a single version test job
AppVeyor: 7 minutes, about the same as a single version test job
Circle OS X: 9 minutes, a bit over a single version test job
Circle Linux: 5 minutes, a bit under a single (OS X) version test job

Ok, so for about the cost of testing a single Python version we can get 
wheels.  Especially if we want to switch over to testing wheels instead 
of source, I'd plan on building wheels for every commit.

>> but sure, I didn't mean to argue against automation.
> 
> Could we do a test run by uploading wheels to, say,
> https://test.pypi.org <https://test.pypi.org/> first?

Shall the process be build wheel, upload to test PyPI, install from test 
PyPI, test...  :]  But sure, I could see ending up with a test PyPI 
upload at least for a tag/release.  Could technically do it for every 
build but that seems excessive, even given my comments above about 
exercising the process more often rather than less.

>> Here's one spot I did automatic deployment off of Travis to PyPI.
>> 
>> https://github.com/altendky/gitignoreio/blob/aeeb9546b6f27f411b191699d3625b4d0a08e7cf/.travis.yml#L11-L19
>> 
>> Pretty straightforward though I think it does the wheel build which 
>> isn't what we'd really want.
> 
> That's pretty cool.  I assumed you'd have to write a 'twine' command -
> Travis just has a 'deploy' provider called "pypi"?  What's actually
> happening behind the scenes there, I wonder!
> 
> (Also, you should probably upload an sdist as well as a bdist_wheel;
> there are cases where wheels aren't always what you want.)

Yeah, it's cool but then you have to know what is behind it...  for each 
CI host...  and how to make it use the files you want...  So I'd tend 
towards a twine call.  I made this silly little script the other day to 
handle this in another repo.

https://github.com/altendky/pyqt5-tools/blob/master/twineontag.py

>> I'd have to check on how to deploy existing wheels as well as those 
>> from OS X and Windows.  I'd suggest a separate PR?  I mean maybe it'd 
>> be easier to get one PR reviewed than two but that doesn't seem like a 
>> great reason to mash things together.
> 
> Smaller PRs are always easier to review - they just take more latency
> to build :).

Ok, I'll make separate tickets for:

* Testing wheels vs. src
* Automatic deployment to PyPI

Cheers,
-kyle


From trac at twistedmatrix.com  Sun Sep  9 00:05:20 2018
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 09 Sep 2018 06:05:20 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1536473120.26.1749940369321083675@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180909/f61438e3/attachment.html>

From grimmtooth at gmail.com  Tue Sep 11 16:33:24 2018
From: grimmtooth at gmail.com (Jeff Grimmett)
Date: Tue, 11 Sep 2018 18:33:24 -0400
Subject: [Twisted-Python] Keeping logger from snatching stdout?
In-Reply-To: <531AE31D-1F56-47A4-BE8F-04156BF99906@twistedmatrix.com>
References: <CA+1iZEcfQOcSuZAYzjafbCEDh-dsONUTjOx8v4e8PR=HPt+tsQ@mail.gmail.com>
 <531AE31D-1F56-47A4-BE8F-04156BF99906@twistedmatrix.com>
Message-ID: <CA+1iZEfra=hgZaqDXfmfJBGKDvdiK2K2_-7vtd9MSm0ffx4nLg@mail.gmail.com>

Hi, Glyph,

On Wed, Sep 5, 2018 at 3:27 AM Glyph <glyph at twistedmatrix.com> wrote:

>
>
> On Aug 29, 2018, at 3:48 PM, Jeff Grimmett <grimmtooth at gmail.com> wrote:
>
> Why would you do this rather than simply handle logging events? Both
> twisted and the stdlib have mechanisms for adding observers that will give
> you access to more structured information - particularly useful if you are
> trying to display something in a GUI.
>

That's a little more blam than this little script really needs, though I
appreciate the suggestion.


> I brought flask-twisted in local to my code so I could monkey around with
> it. First thing I noticed was that it was using twisted.python.log. I
> messed around with that - commented it out, and now I get no stdout output
> at all.  Set the parameter setStdout to False, same thing.
>
>
> So, this is the old, legacy API, and what you want to use is this:
> https://twistedmatrix.com/documents/current/api/twisted.logger.LogBeginner.beginLoggingTo.html
>

Yeah. Also noted when I saw it. Again, seemed to be more effort than I
wanted, though if someone were to say "well, that's what you're stuck with
if you use that legacy stuff" I'd be off to do the thing.


> I'm very curious what is going on here, and whether it's a logging system
> bug.  Could you whittle this down to a minimal reproducer?
>

The sad part is that when I went to put together  the minimal reproducer,
the problem went away.

There is something in my code somewhere that is causing this. I have no
idea what it is, yet, but when I put together a minimal web server that
uses twisted.reactor.callLater() to periodically start a background task,
Twisted is not grabbing stdout or even pushing its own logging to sdtout.

I think it might be how I set up the original project in my IDE - for the
sample project, I started with a clean directory and clean project file
(PyCharm if it matters). So I'm gonna pursue that further.  I think that it
might be the IDE's environment if you tell it "this is a Flask project". I
was seeing weird things from the minimal example as well until I cleared
out all the IDE meta files and reinitiated it as a "pure Python" (in
PyCharm terms) project.

Thanks for your time and thanks for the push that got me moving (hopefully)
in the right direction. :)

 Regards,

Jeff
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180911/fa27e288/attachment.html>

From grimmtooth at gmail.com  Sat Sep 15 08:38:35 2018
From: grimmtooth at gmail.com (Jeff Grimmett)
Date: Sat, 15 Sep 2018 10:38:35 -0400
Subject: [Twisted-Python] Keeping logger from snatching stdout?
In-Reply-To: <CA+1iZEfra=hgZaqDXfmfJBGKDvdiK2K2_-7vtd9MSm0ffx4nLg@mail.gmail.com>
References: <CA+1iZEcfQOcSuZAYzjafbCEDh-dsONUTjOx8v4e8PR=HPt+tsQ@mail.gmail.com>
 <531AE31D-1F56-47A4-BE8F-04156BF99906@twistedmatrix.com>
 <CA+1iZEfra=hgZaqDXfmfJBGKDvdiK2K2_-7vtd9MSm0ffx4nLg@mail.gmail.com>
Message-ID: <CA+1iZEc3BLnNiv9vzNdLbDqWNEp80xAZkYOWgZkPa8E7DJDYKA@mail.gmail.com>

For the curious, it looks like the culprit is Flask's logging features.
I'm not entirely sure what all is happening, but it's clear from docs and
code (and a lot of unresolved Stack Overflow threads) that it's hijacking
stdout in a way that is confusing to many.  Looks like the best approach is
to not let it use its defaults for logging (which I was doing initially
until I decided to be "clever") - explicitly configure logging so that you
can control its behavior explicitly as well.

Its internal logging uses the python native logging, so once I get that
squared away I can focus on wrangling the Twisted logger as well.

Regards,

Jeff


On Tue, Sep 11, 2018 at 6:33 PM Jeff Grimmett <grimmtooth at gmail.com> wrote:

>
> Hi, Glyph,
>
> On Wed, Sep 5, 2018 at 3:27 AM Glyph <glyph at twistedmatrix.com> wrote:
>
>>
>>
>> On Aug 29, 2018, at 3:48 PM, Jeff Grimmett <grimmtooth at gmail.com> wrote:
>>
>> Why would you do this rather than simply handle logging events? Both
>> twisted and the stdlib have mechanisms for adding observers that will give
>> you access to more structured information - particularly useful if you are
>> trying to display something in a GUI.
>>
>
> That's a little more blam than this little script really needs, though I
> appreciate the suggestion.
>
>
>> I brought flask-twisted in local to my code so I could monkey around with
>> it. First thing I noticed was that it was using twisted.python.log. I
>> messed around with that - commented it out, and now I get no stdout output
>> at all.  Set the parameter setStdout to False, same thing.
>>
>>
>> So, this is the old, legacy API, and what you want to use is this:
>> https://twistedmatrix.com/documents/current/api/twisted.logger.LogBeginner.beginLoggingTo.html
>>
>
> Yeah. Also noted when I saw it. Again, seemed to be more effort than I
> wanted, though if someone were to say "well, that's what you're stuck with
> if you use that legacy stuff" I'd be off to do the thing.
>
>
>> I'm very curious what is going on here, and whether it's a logging system
>> bug.  Could you whittle this down to a minimal reproducer?
>>
>
> The sad part is that when I went to put together  the minimal reproducer,
> the problem went away.
>
> There is something in my code somewhere that is causing this. I have no
> idea what it is, yet, but when I put together a minimal web server that
> uses twisted.reactor.callLater() to periodically start a background task,
> Twisted is not grabbing stdout or even pushing its own logging to sdtout.
>
> I think it might be how I set up the original project in my IDE - for the
> sample project, I started with a clean directory and clean project file
> (PyCharm if it matters). So I'm gonna pursue that further.  I think that it
> might be the IDE's environment if you tell it "this is a Flask project". I
> was seeing weird things from the minimal example as well until I cleared
> out all the IDE meta files and reinitiated it as a "pure Python" (in
> PyCharm terms) project.
>
> Thanks for your time and thanks for the push that got me moving
> (hopefully) in the right direction. :)
>
>  Regards,
>
> Jeff
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180915/f7a48282/attachment.html>

From trac at twistedmatrix.com  Sun Sep 16 00:05:17 2018
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 16 Sep 2018 06:05:17 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1537077917.87.6169880982336009465@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180916/7376ffcc/attachment.html>

From randall at tnr.cc  Sun Sep 16 08:02:02 2018
From: randall at tnr.cc (Randall Smith)
Date: Sun, 16 Sep 2018 10:02:02 -0400
Subject: [Twisted-Python] Switch Protocols mid Connection
Message-ID: <2a688000-2233-c60d-ae9b-e88faa08573a@tnr.cc>

I'm new to Twisted and really enjoying the event driven approach, 
especially with the availability of in-line callbacks to avoid callback 
hell.Â  So thanks to all of you who have worked on Twisted.

The program I'm writing uses AMP for peer to peer communication. I like 
AMP because it's natively asynchronous, has multi-language support, and 
efficient, not wasting resources on HTTP headers, etc.Â  There are times 
when I need to send files, 1-2 MB over the connection.Â  AMP provides a 
binary type, but it's limited to 64k, so I'd have to split the files up 
and make 16+ calls to transfer a single file.Â  So I need to switch to a 
more appropriate (not yet determined) protocol for the transfer, and 
then back to AMP.Â  AMP provides a protocol switch command, which is 
great, but then I'd need to switch back to AMP and I have no idea what 
approach to take here.Â  ItÂ  doesn't help that I don't have a file 
transfer protocol selected.

Speaking of file transfer protocol , Twisted's FTP seems like overkill 
for my simple scenario, though if I could harness the functionality I 
need, I'd use it.Â  I've also read up on Twisted's Producer/Consumer 
approach, which I'm thinking if I have to roll my own, this is the path 
I should take.Â  However, I surely can't be the first person in more than 
a decade to want to transfer a file while speaking AMP.

So, how do I switch back from a file transfer protocol to AMP and what 
existing protocol, if any, should I use for the transfer?

Thanks so much.

-Randall


-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 3984 bytes
Desc: S/MIME Cryptographic Signature
URL: </pipermail/twisted-python/attachments/20180916/0de11028/attachment.bin>

From mithrandi at mithrandi.net  Mon Sep 17 00:34:51 2018
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Mon, 17 Sep 2018 08:34:51 +0200
Subject: [Twisted-Python] Switch Protocols mid Connection
In-Reply-To: <2a688000-2233-c60d-ae9b-e88faa08573a@tnr.cc>
References: <2a688000-2233-c60d-ae9b-e88faa08573a@tnr.cc>
Message-ID: <CAMcKhMR-PCXnewz++j4ykwQ7EFWP0T_A1UDVTfmOpo8QXBGJrA@mail.gmail.com>

On Sun, 16 Sep 2018 at 16:02, Randall Smith <randall at tnr.cc> wrote:
> and make 16+ calls to transfer a single file.  So I need to switch to a
> more appropriate (not yet determined) protocol for the transfer, and
> then back to AMP.  AMP provides a protocol switch command, which is
> great, but then I'd need to switch back to AMP and I have no idea what
> approach to take here.  It  doesn't help that I don't have a file
> transfer protocol selected.

You might be able to get away with
http://bazaar.launchpad.net/~glyph/%2Bjunk/amphacks/annotate/head%3A/python/amphacks/mediumbox.py


From glyph at twistedmatrix.com  Mon Sep 17 23:41:48 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 17 Sep 2018 22:41:48 -0700
Subject: [Twisted-Python] Switch Protocols mid Connection
In-Reply-To: <CAMcKhMR-PCXnewz++j4ykwQ7EFWP0T_A1UDVTfmOpo8QXBGJrA@mail.gmail.com>
References: <2a688000-2233-c60d-ae9b-e88faa08573a@tnr.cc>
 <CAMcKhMR-PCXnewz++j4ykwQ7EFWP0T_A1UDVTfmOpo8QXBGJrA@mail.gmail.com>
Message-ID: <17089B15-D4D8-459E-9550-53C89D0C2E09@twistedmatrix.com>



> On Sep 16, 2018, at 11:34 PM, Tristan Seligmann <mithrandi at mithrandi.net> wrote:
> 
> On Sun, 16 Sep 2018 at 16:02, Randall Smith <randall at tnr.cc> wrote:
>> and make 16+ calls to transfer a single file.  So I need to switch to a
>> more appropriate (not yet determined) protocol for the transfer, and
>> then back to AMP.  AMP provides a protocol switch command, which is
>> great, but then I'd need to switch back to AMP and I have no idea what
>> approach to take here.  It  doesn't help that I don't have a file
>> transfer protocol selected.
> 
> You might be able to get away with
> http://bazaar.launchpad.net/~glyph/%2Bjunk/amphacks/annotate/head%3A/python/amphacks/mediumbox.py <http://bazaar.launchpad.net/~glyph/+junk/amphacks/annotate/head:/python/amphacks/mediumbox.py>
You will also probably be interested in https://twistedmatrix.com/trac/ticket/9488 <https://twistedmatrix.com/trac/ticket/9488> .

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180917/642d9a10/attachment.html>

From whalebot.helmsman at gmail.com  Wed Sep 19 06:50:41 2018
From: whalebot.helmsman at gmail.com (whalebot.helmsman at gmail.com)
Date: Wed, 19 Sep 2018 15:50:41 +0300
Subject: [Twisted-Python] Mixing async/await and asyncio
Message-ID: <2fc96d7d-8260-e354-a599-a9a4b493a432@gmail.com>

I want to learn how to use twisted together with asyncio. I create 
several files to describe my problem 
https://gist.github.com/whalebot-helmsman/c400eb66c0bd35e406de3f8f704adf13:

- I can use pure asyncio for simple case (asyncio_ex.py)

- I can use pure twisted for simple case (twisted_ex.py)

- I can await in twisted on twsited defer (twisted_await.py)

I have a problem in case I try to await in twisted for asyncio 
coroutine(twisted_await_asyncio.py). Program never finishes and I got 
only started messages

2018-09-19 12:48:59,633 [WARNING] PID:8238 
/home/nikita/tmp/twisted_await_asyncio.py:12 started
2018-09-19 12:48:59,633 [WARNING] PID:8238 
/home/nikita/tmp/twisted_await_asyncio.py:12 started


From sda at fstab.net  Wed Sep 19 19:13:51 2018
From: sda at fstab.net (Kyle Altendorf)
Date: Wed, 19 Sep 2018 21:13:51 -0400
Subject: [Twisted-Python] Mixing async/await and asyncio
In-Reply-To: <2fc96d7d-8260-e354-a599-a9a4b493a432@gmail.com>
References: <2fc96d7d-8260-e354-a599-a9a4b493a432@gmail.com>
Message-ID: <53D0F690-FBC1-4BD2-952B-D53F8416793A@fstab.net>



On September 19, 2018 8:50:41 AM EDT, "whalebot.helmsman at gmail.com" <whalebot.helmsman at gmail.com> wrote:
>I want to learn how to use twisted together with asyncio. I create 
>several files to describe my problem 
>https://gist.github.com/whalebot-helmsman/c400eb66c0bd35e406de3f8f704adf13:
>
>- I can use pure asyncio for simple case (asyncio_ex.py)
>
>- I can use pure twisted for simple case (twisted_ex.py)
>
>- I can await in twisted on twsited defer (twisted_await.py)
>
>I have a problem in case I try to await in twisted for asyncio 
>coroutine(twisted_await_asyncio.py). Program never finishes and I got 
>only started messages
>
>2018-09-19 12:48:59,633 [WARNING] PID:8238 
>/home/nikita/tmp/twisted_await_asyncio.py:12 started
>2018-09-19 12:48:59,633 [WARNING] PID:8238 
>/home/nikita/tmp/twisted_await_asyncio.py:12 started

I can't say I've done this but I think this page is on topic.

https://meejah.ca/blog/python3-twisted-and-asyncio

Cheers,
-kyle


From glyph at twistedmatrix.com  Thu Sep 20 12:00:54 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 20 Sep 2018 11:00:54 -0700
Subject: [Twisted-Python] Mixing async/await and asyncio
In-Reply-To: <2fc96d7d-8260-e354-a599-a9a4b493a432@gmail.com>
References: <2fc96d7d-8260-e354-a599-a9a4b493a432@gmail.com>
Message-ID: <A2A65DE3-12B6-4A7F-84A8-78C81A0F3FB8@twistedmatrix.com>

On Sep 19, 2018, at 5:50 AM, whalebot.helmsman at gmail.com <mailto:whalebot.helmsman at gmail.com> wrote:
> 
> I want to learn how to use twisted together with asyncio. I create several files to describe my problem https://gist.github.com/whalebot-helmsman/c400eb66c0bd35e406de3f8f704adf13: <https://gist.github.com/whalebot-helmsman/c400eb66c0bd35e406de3f8f704adf13:>
> 
> - I can use pure asyncio for simple case (asyncio_ex.py)
> 
> - I can use pure twisted for simple case (twisted_ex.py)
> 
> - I can await in twisted on twsited defer (twisted_await.py)
> 
> I have a problem in case I try to await in twisted for asyncio coroutine(twisted_await_asyncio.py). Program never finishes and I got only started messages
> 
> 2018-09-19 12:48:59,633 [WARNING] PID:8238 /home/nikita/tmp/twisted_await_asyncio.py:12 started
> 2018-09-19 12:48:59,633 [WARNING] PID:8238 /home/nikita/tmp/twisted_await_asyncio.py:12 started

Your code is mostly correct, but you are running the default Twisted reactor.  You need to use the asyncio reactor.  The article Kyle linked to (https://meejah.ca/blog/python3-twisted-and-asyncio <https://meejah.ca/blog/python3-twisted-and-asyncio>) describes the necessary set-up.  Hopefully in the future this will be more automatic!

-g


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180920/8516cf6c/attachment.html>

From trac at twistedmatrix.com  Sun Sep 23 00:05:19 2018
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 23 Sep 2018 06:05:19 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1537682719.66.5776696876470566352@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180923/a11e440d/attachment.html>

From meejah at meejah.ca  Wed Sep 26 20:45:15 2018
From: meejah at meejah.ca (meejah)
Date: Thu, 27 Sep 2018 06:45:15 +0400
Subject: [Twisted-Python] txtorcon 18.1.0
Message-ID: <86wor78xqc.fsf@atlantis.meejah.ca>



-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

I'm very pleased to announce txtorcon 18.1.0. This adds or fixes the
following:

 * better error-reporting (include REASON and REMOTE_REASON if
   available) when circuit-builds fail (thanks David Stainton)
 * more-robust detection of "do we have Python3" (thanks Balint
   Reczey)
 * fix parsing of Unix-sockets for SOCKS
 * better handling of concurrent Web agent requests before SOCKS ports
   are known
 * allow fowarding to ip:port pairs for Onion services when using the
   "list of 2-tuples" method of specifying the remote vs local
   connections.

You can download the release from PyPI or GitHub (or of
course "pip install txtorcon"):

   https://pypi.python.org/pypi/txtorcon/18.1.0
   https://github.com/meejah/txtorcon/releases/tag/v18.1.0

Releases are also available from the hidden service:

   http://timaq4ygg2iegci7.onion/txtorcon-18.1.0.tar.gz
   http://timaq4ygg2iegci7.onion/txtorcon-18.1.0.tar.gz.asc

Or via a "version 3" service:

   http://fjblvrw2jrxnhtg67qpbzi45r7ofojaoo3orzykesly2j3c2m3htapid.onion/txtorcon-18.1.0.tar.gz
   http://fjblvrw2jrxnhtg67qpbzi45r7ofojaoo3orzykesly2j3c2m3htapid.onion/txtorcon-18.1.0.tar.gz.asc

You can verify the sha256sum of both by running the following 4 lines
in a shell wherever you have the files downloaded:

cat <<EOF | sha256sum --check
b61cf175a5f1d4092609caf05d178fcdcabf513928eec98d38125c501afea43c  dist/txtorcon-18.1.0.tar.gz
98aba4a96c355c55ee5d8290b67a09380b02e1044fb2e76737f47f5a33659dce  dist/txtorcon-18.1.0-py2.py3-none-any.whl
EOF

thanks,
meejah
-----BEGIN PGP SIGNATURE-----

iQFFBAEBCAAvFiEEnVor1WiOy4id680/wmAoAxKAaacFAlusMDQRHG1lZWphaEBt
ZWVqYWguY2EACgkQwmAoAxKAaadz3wgAk+UbYuw0lIwEqQZbhQ6oTk0cTu5GrB5q
WkSbqPkj5Ph+y1iYMQoEgAZdD97zjpfGR+/JcyXbPyh4ZDcqkL8Hhay9yF2/PAkd
agu1LBuBjVXOFvcw3D8Xi91miFwjmMKznAuR1Jv9gp66emw3qbZRZE9g1S9o1lCX
3Cx6o3kLiq8h7UmOiqFfCFGjNBFsaiDqf35P7FH7Btg4FYIGtI5/uQ3qgDtyqlhD
YKA91KxZQoZFGiAhp5h84WXrvtuQ5tDjRNiIfh76xRFiFRnWe9ofELidKqEgnyzF
shBqdGpaIT0g0NTQRhCnzBM7m3u0RHxkRblJWBLa6t4KYNFTMJ8Pag==
=z+Lo
-----END PGP SIGNATURE-----


From hawkowl at atleastfornow.net  Fri Sep 28 04:43:40 2018
From: hawkowl at atleastfornow.net (Amber Brown)
Date: Fri, 28 Sep 2018 20:43:40 +1000
Subject: [Twisted-Python] Twisted 18.9.0rc1 Release Candidate Announcement
Message-ID: <2cb01d85-3ca4-9c9b-9366-0eebb1e58a0c@atleastfornow.net>

Hello everyone! It's time again for a Twisted release. It's not a huge 
one, but it does have some important changes!

Twisted 18.9rc1 features:

- Support for Python 3.7!
- Better support for Unicode handling in logging tracebacks in Python 2
- trial -j now reports tracebacks on test failures on Python 3.
- twisted.internet._sslverify.ClientTLSOptions no longer raises 
IDNAError when given an IPv6 address as a hostname in a HTTPS URL.
- HTTP/2 server connections will no longer time out active downloads 
that take too long.

You can get the tarball and the NEWS file at 
https://twistedmatrix.com/Releases/rc/18.9.0rc1/ , or you can try it out 
from PyPI:

 Â Â Â  python -m pip install Twisted==18.9.0rc1

Please test it, and let me know how your applications fare, good or bad! 
If nothing comes up, I will release next week.

- Amber


From trac at twistedmatrix.com  Sun Sep 30 00:05:20 2018
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 30 Sep 2018 06:05:20 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1538287520.21.3627563524455750090@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180930/5f314b4d/attachment.html>

From john at egh.com  Sun Sep 30 17:26:53 2018
From: john at egh.com (John Santos)
Date: Sun, 30 Sep 2018 19:26:53 -0400
Subject: [Twisted-Python] Twisted 18.9.0rc1 Release Candidate
 Announcement
In-Reply-To: <2cb01d85-3ca4-9c9b-9366-0eebb1e58a0c@atleastfornow.net>
References: <2cb01d85-3ca4-9c9b-9366-0eebb1e58a0c@atleastfornow.net>
Message-ID: <8f55df5f-5f49-f1d9-cc3b-06c0484d5dc3@egh.com>

On 9/28/2018 06:43 AM, Amber Brown wrote:
> Hello everyone! It's time again for a Twisted release. It's not a huge 
> one, but it does have some important changes!
> 
> Twisted 18.9rc1 features:
> 
> - Support for Python 3.7!
> - Better support for Unicode handling in logging tracebacks in Python 2
> - trial -j now reports tracebacks on test failures on Python 3.
> - twisted.internet._sslverify.ClientTLSOptions no longer raises 
> IDNAError when given an IPv6 address as a hostname in a HTTPS URL.
> - HTTP/2 server connections will no longer time out active downloads 
> that take too long.
> 
> You can get the tarball and the NEWS file at 
> https://twistedmatrix.com/Releases/rc/18.9.0rc1/ , or you can try it out 
> from PyPI:
> 
>  Â Â Â  python -m pip install Twisted==18.9.0rc1
> 
> Please test it, and let me know how your applications fare, good or bad! 
> If nothing comes up, I will release next week.
> 
> - Amber
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

The NEWS file displays with no line breaks on Win10 in either Firefox or 
Chrome.  This makes it essentially unreadable.  Going back to 
https://twistedmatrix.com/Releases/rc/, and looking at the various 
release candidates, it looks like 17.1.0rc1 and before look like normal 
text files, but 17.5.0rc1 and later look like a single globbed line of 
text.  Probably not coincidentally, the good versions all list the 
Content type as [text/plain] whereas the unreadable versions are all 
[text/html]


From glyph at twistedmatrix.com  Sun Sep 30 19:08:33 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 30 Sep 2018 18:08:33 -0700
Subject: [Twisted-Python] Twisted 18.9.0rc1 Release Candidate
 Announcement
In-Reply-To: <8f55df5f-5f49-f1d9-cc3b-06c0484d5dc3@egh.com>
References: <2cb01d85-3ca4-9c9b-9366-0eebb1e58a0c@atleastfornow.net>
 <8f55df5f-5f49-f1d9-cc3b-06c0484d5dc3@egh.com>
Message-ID: <628D8AC8-66C5-4B3A-80C2-C171C11773EE@twistedmatrix.com>

> On Sep 30, 2018, at 4:26 PM, John Santos <john at egh.com> wrote:
> 
> On 9/28/2018 06:43 AM, Amber Brown wrote:
>> Hello everyone! It's time again for a Twisted release. It's not a huge one, but it does have some important changes!
>> Twisted 18.9rc1 features:
>> - Support for Python 3.7!
>> - Better support for Unicode handling in logging tracebacks in Python 2
>> - trial -j now reports tracebacks on test failures on Python 3.
>> - twisted.internet._sslverify.ClientTLSOptions no longer raises IDNAError when given an IPv6 address as a hostname in a HTTPS URL.
>> - HTTP/2 server connections will no longer time out active downloads that take too long.
>> You can get the tarball and the NEWS file at https://twistedmatrix.com/Releases/rc/18.9.0rc1/ , or you can try it out from PyPI:
>>     python -m pip install Twisted==18.9.0rc1
>> Please test it, and let me know how your applications fare, good or bad! If nothing comes up, I will release next week.
>> - Amber
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> The NEWS file displays with no line breaks on Win10 in either Firefox or Chrome.  This makes it essentially unreadable.  Going back to https://twistedmatrix.com/Releases/rc/, and looking at the various release candidates, it looks like 17.1.0rc1 and before look like normal text files, but 17.5.0rc1 and later look like a single globbed line of text.  Probably not coincidentally, the good versions all list the Content type as [text/plain] whereas the unreadable versions are all [text/html]

This is actually a bug in Twisted itself, if you are keen to fix it :)

Previous versions have 'NEWS.txt', and Twisted knows about the MIME type for '.txt' files, probably via /etc/mime.types or similar.  Current versions have 'NEWS.rst', and twisted has a default MIME type of text/html (which is a terrible idea and should not be the case).

You might be able to fix this by eliminating the default MIME type from Twisted (although this would just let your browser do the sniffing, not sure if that would be better) or you could definitely fix this by teaching Braid <https://github.com/twisted-infra/braid <https://github.com/twisted-infra/braid>> about text/x-rst <http://docutils.sourceforge.net/FAQ.html#what-s-the-official-mime-type-for-restructuredtext-data <http://docutils.sourceforge.net/FAQ.html#what-s-the-official-mime-type-for-restructuredtext-data>>.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180930/b58e4a11/attachment.html>

From trac at twistedmatrix.com  Sun Sep  2 00:05:26 2018
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 02 Sep 2018 06:05:26 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1535868326.68.511708445267314428@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180902/9ec7a1fa/attachment-0002.html>

From glyph at twistedmatrix.com  Wed Sep  5 01:25:19 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 5 Sep 2018 00:25:19 -0700
Subject: [Twisted-Python] T9217 / PR1052: Wheels, wheels, and more wheels
In-Reply-To: <9d085475b70a1ff9846690ed9c82d13c@fstab.net>
References: <9d085475b70a1ff9846690ed9c82d13c@fstab.net>
Message-ID: <365DD63E-800D-49A4-A070-5BAE0B860AE3@twistedmatrix.com>



> On Aug 29, 2018, at 10:13 AM, Kyle Altendorf <sda at fstab.net <mailto:sda at fstab.net>> wrote:
> 
> Hi All,

Hi Kyle!

> I am working on ticket #9217 / PR #1051 to add lots more wheel generation to the Twisted CI.  I decided to give the cibuildwheel package a try and it made this process almost too easy (well... sort of :] ).  I've got AppVeyor-Windows, Travis-Linux, and Circle-OSX all building a variety of wheels for the supported Python versions and bit depths.  Travis doesn't save artifacts 'easily' so I went ahead and doubled up on Linux on Circle for now, though it's having some Docker issues at the moment and hasn't been successful yet.  For some reason in this one case the project directory isn't getting mounted into the container as expected.

Thanks for doing this!

> wheel links:
> https://github.com/twisted/twisted/pull/1051#issuecomment-416743261 <https://github.com/twisted/twisted/pull/1051#issuecomment-416743261> (and next comment)
> 
> Now that I've got the wheel builds happening I figured it'd be good to try them out on 'real' machines.  Turns out we get a failure on twisted.cred.test.test_strcred.SSHCheckerTests.test_isChecker for at least the two checks I've done so far (Windows and OSX).  I haven't done more than a cursory look at that yet, but it's on the list to understand and resolve.  More testing would of course be welcome.  Real world, just trial Twisted's own tests, whatever would be appreciated if you are interested.
> 
> failures with wheels:
> https://github.com/twisted/twisted/pull/1051#issuecomment-416977723 <https://github.com/twisted/twisted/pull/1051#issuecomment-416977723>

It's not clear to me that we have any test environments that accurately test what happens after you install from PyPI.  If we could build these wheels and then actually run tests on installing them that would be a big step forward in test fidelity!  But given the current state of the art, I'd be happy if they just got built from the same code that passed our tests in existing configurations.

> Overall, it's a bit unclear what the intended use of the various CI hosts are for Twisted.

Ideally, Travis would handle it all.

But Travis can't run multiple kernels, so we have buildbots for lots of alternate kernels, just to make sure.  Including BSD kernels, since those are actually substantially different where sockets are concerned.

And Travis macOS support is so slow that it was a serious blocker for a while, so the buildbot is filling in until Circle can take over.

And Travis can't do Windows, so that's where appveyor comes in.

There might still be various non-special-kernel testing things that buildbot does, but those are probably holdovers that, if they still have a reason to exist, it's exactly because Travis doesn't have artifact hosting.

Hopefully that's comprehensive?

> I hear that Travis OSX builds were really slow, but from what I can see Circle isn't doing any OSX (other than what I added).

The issue for addressing this is https://twistedmatrix.com/trac/ticket/9445 <https://twistedmatrix.com/trac/ticket/9445> if you'd like to pick up where Adi left off.  It's probably just resolving some conflicts, resubmitting for review, and bugging people to get it through the process :).

> There wasn't any artifact storage being used on Circle either.  So, I'm not sure if there was a reason to use Circle that went away, or...  But, not having to hook Travis up to S3 or somesuch for storage is quite nice so Circle wins at least in that category.

I think the big problem on Circle is capacity limits, but I don't know if that's just a macOS thing, or what.

> Now that I've got something rough in place, are there any opinions about how this should work?  I don't know the present release workflow so I don't know if we'd want an automatic push to PyPI on tags (probably not)

I definitely want this.  This is really the whole point, what we're trying to get to :).  Why don't you think we want this?

> or just artifacts on the build server to grab manually (would need some S3 or such for Travis, or Circle for Linux builds as well).  Anything else?  Do we want automated tests against the wheels?  cibuildwheel does have a feature for that though I haven't done anything with it yet.

Ideally we'd push the wheels on tag once the tests passed, but I'd be OK with just unconditionally just building / pushing on tag for starters.

> Anyways...  hello, thanks for Twisted, and I hope this work ends up saving some people some time.

I can't wait for fully automated releases :).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180905/610c4203/attachment-0002.html>

From glyph at twistedmatrix.com  Wed Sep  5 01:27:22 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 5 Sep 2018 00:27:22 -0700
Subject: [Twisted-Python] Keeping logger from snatching stdout?
In-Reply-To: <CA+1iZEcfQOcSuZAYzjafbCEDh-dsONUTjOx8v4e8PR=HPt+tsQ@mail.gmail.com>
References: <CA+1iZEcfQOcSuZAYzjafbCEDh-dsONUTjOx8v4e8PR=HPt+tsQ@mail.gmail.com>
Message-ID: <531AE31D-1F56-47A4-BE8F-04156BF99906@twistedmatrix.com>



On Aug 29, 2018, at 3:48 PM, Jeff Grimmett <grimmtooth at gmail.com <mailto:grimmtooth at gmail.com>> wrote:

> I'm working on a Flask project using the flask_twisted package from PyPI and have encountered a mystery.  I don't *have* to solve it to move on, but darn it, I can't let it go :)
> 
> https://pypi.org/project/Flask-Twisted/ <https://pypi.org/project/Flask-Twisted/>
> https://github.com/cravler/flask-twisted/ <https://github.com/cravler/flask-twisted/>
> 
> So here's the breakdown: when use the standard logging module to output to a logfile + stdout, everything is fine.  I do see some logging output from Twisted as well (the web server part) but for the most part life is groovy.
> 
> I'm going to be integrating in a wxPython windows app to this (previously it's been a shell app) and step 1 was to make my own stdout handler that eventually would pipe all that stuff to a window in the wx app.  The first step of THAT (step 1.a) was to replace all the logging stuff with print() placeholders.

Why would you do this rather than simply handle logging events? Both twisted and the stdlib have mechanisms for adding observers that will give you access to more structured information - particularly useful if you are trying to display something in a GUI.

> At that point, things got confusing, as now ALL of my print()s are being handled by Twisted's logging handler.

This (sort of) makes sense...

> I brought flask-twisted in local to my code so I could monkey around with it. First thing I noticed was that it was using twisted.python.log. I messed around with that - commented it out, and now I get no stdout output at all.  Set the parameter setStdout to False, same thing.

So, this is the old, legacy API, and what you want to use is this: https://twistedmatrix.com/documents/current/api/twisted.logger.LogBeginner.beginLoggingTo.html <https://twistedmatrix.com/documents/current/api/twisted.logger.LogBeginner.beginLoggingTo.html>

But it doesnâ€™t make sense to me that you would see no output at all, or that setStdout=False would swallow your print statements.

> The adapter code uses twisted.internet.reactor,  threads, twisted.web.server.Site, twisted.web.wsgi.WSGIResource, and twisted.web.resource.Resource, any one which might be responsible. I spent yesterday evening digging around but haven't found anything yet.

The only thing starting logging here appears to be flask-twisted; we only start logging in twist & twistd, within twisted itself.

> Any guidance / ideas?  

I'm very curious what is going on here, and whether it's a logging system bug.  Could you whittle this down to a minimal reproducer?

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180905/dd817f96/attachment-0002.html>

From sda at fstab.net  Wed Sep  5 06:44:09 2018
From: sda at fstab.net (Kyle Altendorf)
Date: Wed, 05 Sep 2018 08:44:09 -0400
Subject: [Twisted-Python] T9217 / PR1052: Wheels, wheels, and more wheels
In-Reply-To: <365DD63E-800D-49A4-A070-5BAE0B860AE3@twistedmatrix.com>
References: <9d085475b70a1ff9846690ed9c82d13c@fstab.net>
 <365DD63E-800D-49A4-A070-5BAE0B860AE3@twistedmatrix.com>
Message-ID: <cad4b3f8014f1d1a186ae411b4094b53@fstab.net>

On 2018-09-05 03:25, Glyph wrote:
>> On Aug 29, 2018, at 10:13 AM, Kyle Altendorf <sda at fstab.net> wrote:
>> wheel links:
>> https://github.com/twisted/twisted/pull/1051#issuecomment-416743261 
>> (and next comment)
>> 
>> Now that I've got the wheel builds happening I figured it'd be good to 
>> try them out on 'real' machines.  Turns out we get a failure on 
>> twisted.cred.test.test_strcred.SSHCheckerTests.test_isChecker for at 
>> least the two checks I've done so far (Windows and OSX).  I haven't 
>> done more than a cursory look at that yet, but it's on the list to 
>> understand and resolve.  More testing would of course be welcome.  
>> Real world, just trial Twisted's own tests, whatever would be 
>> appreciated if you are interested.
>> 
>> failures with wheels:
>> https://github.com/twisted/twisted/pull/1051#issuecomment-416977723
> 
> It's not clear to me that we have any test environments that accurately 
> test what happens after you install from PyPI.  If we could build these 
> wheels and then actually run tests on installing them that would be a 
> big step forward in test fidelity!  But given the current state of the 
> art, I'd be happy if they just got built from the same code that passed 
> our tests in existing configurations.

cibuildwheel does have an option to provide a test command.  If we did 
that would we replace the existing tests or supplement?  If 
supplementing that will presumably be a significant increase in build 
times.  Especially if we did it for all wheels.

So, how much of a build time hit do we want to take?

>> I hear that Travis OSX builds were really slow, but from what I can 
>> see Circle isn't doing any OSX (other than what I added).
> 
> The issue for addressing this is 
> https://twistedmatrix.com/trac/ticket/9445 if you'd like to pick up 
> where Adi left off.  It's probably just resolving some conflicts, 
> resubmitting for review, and bugging people to get it through the 
> process :).

https://github.com/twisted/twisted/pull/1056/files

It looks like the builds I added in my wheel PR, for whatever that is 
worth.  Well, other than picking xcode v9 vs me picking v10 which 
neither of the PRs use anyways.  I added the requires over in the wheel 
PR as well in case it ends up saving a useful amount of our OS X quota.

>> Now that I've got something rough in place, are there any opinions 
>> about how this should work?  I don't know the present release workflow 
>> so I don't know if we'd want an automatic push to PyPI on tags 
>> (probably not)
> 
> I definitely want this.  This is really the whole point, what we're 
> trying to get to :).  Why don't you think we want this?

Uhm...  hmm...  *shrug*  I figured someone might want to do a final spot 
check or have manual intervention for a real release.  You can't replace 
a file on PyPI so...  but sure, I didn't mean to argue against 
automation.

Here's one spot I did automatic deployment off of Travis to PyPI.

https://github.com/altendky/gitignoreio/blob/aeeb9546b6f27f411b191699d3625b4d0a08e7cf/.travis.yml#L11-L19

Pretty straightforward though I think it does the wheel build which 
isn't what we'd really want.  I'd have to check on how to deploy 
existing wheels as well as those from OS X and Windows.  I'd suggest a 
separate PR?  I mean maybe it'd be easier to get one PR reviewed than 
two but that doesn't seem like a great reason to mash things together.

Cheers,
-kyle



From robert.difalco at gmail.com  Wed Sep  5 07:39:58 2018
From: robert.difalco at gmail.com (Robert DiFalco)
Date: Wed, 5 Sep 2018 06:39:58 -0700
Subject: [Twisted-Python] Issue with TLS failure modes
In-Reply-To: <CAAXGW-xFq9UgBZdY+p0wjKxBW4z9P6a=CSc6Hspq3oV+TgBTJg@mail.gmail.com>
References: <CAAXGW-xFq9UgBZdY+p0wjKxBW4z9P6a=CSc6Hspq3oV+TgBTJg@mail.gmail.com>
Message-ID: <12D690E1-76E7-46E1-9884-3AF9E95FD7AD@gmail.com>

Is the timeout the only way to handle this kind of TLS handshake error?

Sent from my iPhone

> On Aug 30, 2018, at 10:14 AM, Robert DiFalco <robert.difalco at gmail.com> wrote:
> 
> I'm having an issue properly handling TLS failure modes. For example consider the EchoServer and EchoClient code. If I use a TLS client with a TCP4 server, I do not get a handshake exception until I abort the connection. But I don't want to abort the connection unless I get a handshake error. 
> 
> What I'd like to do is to check the handshake status in my protocol before my client sends bytes to the server. I'd like my send message to be able to raise the <class 'OpenSSL.SSL.Error'>: [('SSL routines', 'ssl23_read', 'ssl handshake failure'). But for some reason it seems to get lost until I abort the connection. Does this sound familiar to anyone?
> 
> What I've done for now is setup a Timeout mixin so that after my client.send, if I do not get an ACK back (which my particular protocol does) within two minutes, I just abort the connection. This then calls connectionLost with the correct SSL.Error. But if it's in the error queue (and found during the course of abortConnection then isn't there a way to find it sooner? Like before my timeout and before I call send on the client protocol?
> 
> Thanks!



From exarkun at twistedmatrix.com  Wed Sep  5 07:42:55 2018
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Wed, 5 Sep 2018 09:42:55 -0400
Subject: [Twisted-Python] Issue with TLS failure modes
In-Reply-To: <12D690E1-76E7-46E1-9884-3AF9E95FD7AD@gmail.com>
References: <CAAXGW-xFq9UgBZdY+p0wjKxBW4z9P6a=CSc6Hspq3oV+TgBTJg@mail.gmail.com>
 <12D690E1-76E7-46E1-9884-3AF9E95FD7AD@gmail.com>
Message-ID: <CAEeXt4OqrDrbd8qZN=rcOKiBZV1QS72P-7cQ8BnB96D6bQ=DsA@mail.gmail.com>

On Wed, Sep 5, 2018 at 9:40 AM Robert DiFalco <robert.difalco at gmail.com>
wrote:

> Is the timeout the only way to handle this kind of TLS handshake error?
>

It might be easier to answer your original question if you include a Short,
Self Contained, Correct (Compilable), Example <http://sscce.org/>.

Jean-Paul


> Sent from my iPhone
>
> > On Aug 30, 2018, at 10:14 AM, Robert DiFalco <robert.difalco at gmail.com>
> wrote:
> >
> > I'm having an issue properly handling TLS failure modes. For example
> consider the EchoServer and EchoClient code. If I use a TLS client with a
> TCP4 server, I do not get a handshake exception until I abort the
> connection. But I don't want to abort the connection unless I get a
> handshake error.
> >
> > What I'd like to do is to check the handshake status in my protocol
> before my client sends bytes to the server. I'd like my send message to be
> able to raise the <class 'OpenSSL.SSL.Error'>: [('SSL routines',
> 'ssl23_read', 'ssl handshake failure'). But for some reason it seems to get
> lost until I abort the connection. Does this sound familiar to anyone?
> >
> > What I've done for now is setup a Timeout mixin so that after my
> client.send, if I do not get an ACK back (which my particular protocol
> does) within two minutes, I just abort the connection. This then calls
> connectionLost with the correct SSL.Error. But if it's in the error queue
> (and found during the course of abortConnection then isn't there a way to
> find it sooner? Like before my timeout and before I call send on the client
> protocol?
> >
> > Thanks!
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180905/e051a5d8/attachment-0002.html>

From sda at fstab.net  Fri Sep  7 06:28:30 2018
From: sda at fstab.net (Kyle Altendorf)
Date: Fri, 07 Sep 2018 08:28:30 -0400
Subject: [Twisted-Python] T9217 / PR1052: Wheels, wheels, and more wheels
In-Reply-To: <579E31AB-1CC8-4C6C-BC87-1034D094EE5F@twistedmatrix.com>
References: <9d085475b70a1ff9846690ed9c82d13c@fstab.net>
 <365DD63E-800D-49A4-A070-5BAE0B860AE3@twistedmatrix.com>
 <cad4b3f8014f1d1a186ae411b4094b53@fstab.net>
 <579E31AB-1CC8-4C6C-BC87-1034D094EE5F@twistedmatrix.com>
Message-ID: <fe0d492f72f12159f47dde89c133e8ed@fstab.net>

On 2018-09-07 01:58, Glyph wrote:
>> On Sep 5, 2018, at 5:44 AM, Kyle Altendorf <sda at fstab.net> wrote:
>> 
>> On 2018-09-05 03:25, Glyph wrote:
>>>> On Aug 29, 2018, at 10:13 AM, Kyle Altendorf <sda at fstab.net> wrote:
>>>> wheel links:
>>>> https://github.com/twisted/twisted/pull/1051#issuecomment-416743261 
>>>> (and next comment)
>>>> Now that I've got the wheel builds happening I figured it'd be good 
>>>> to try them out on 'real' machines.  Turns out we get a failure on 
>>>> twisted.cred.test.test_strcred.SSHCheckerTests.test_isChecker for at 
>>>> least the two checks I've done so far (Windows and OSX).  I haven't 
>>>> done more than a cursory look at that yet, but it's on the list to 
>>>> understand and resolve.  More testing would of course be welcome.  
>>>> Real world, just trial Twisted's own tests, whatever would be 
>>>> appreciated if you are interested.
>>>> failures with wheels:
>>>> https://github.com/twisted/twisted/pull/1051#issuecomment-416977723
>>> It's not clear to me that we have any test environments that 
>>> accurately test what happens after you install from PyPI.  If we 
>>> could build these wheels and then actually run tests on installing 
>>> them that would be a big step forward in test fidelity!  But given 
>>> the current state of the art, I'd be happy if they just got built 
>>> from the same code that passed our tests in existing configurations.
>> 
>> cibuildwheel does have an option to provide a test command.  If we did 
>> that would we replace the existing tests or supplement?  If 
>> supplementing that will presumably be a significant increase in build 
>> times.  Especially if we did it for all wheels.
> 
> Definitely replace.  What would you want to even supplement them with?

I was referring to supplementing the existing src tests with the wheel 
tests.

> 
>> So, how much of a build time hit do we want to take?
> 
> I was thinking that for starters here the goal would just be build
> automation, independent of trying to get a more realistic test path;
> only doing these builds when pushing a relevant tag.  If it's easy to
> just switch over everything to this then... great, I guess? :)  But
> let's not gild the lily here.

Alrighty, another PR for swapping over tests from src to wheels.

I would tend to always build the wheels.  It's easier for people to test 
intermediate releases for bugs.  It makes a release 'less special' so 
there is less likely to be a latent issue with the process or artifacts. 
  Etc.  But, let's see what the build time hit is.

Travis: 4 minutes, about half the time of a single version test job
AppVeyor: 7 minutes, about the same as a single version test job
Circle OS X: 9 minutes, a bit over a single version test job
Circle Linux: 5 minutes, a bit under a single (OS X) version test job

Ok, so for about the cost of testing a single Python version we can get 
wheels.  Especially if we want to switch over to testing wheels instead 
of source, I'd plan on building wheels for every commit.

>> but sure, I didn't mean to argue against automation.
> 
> Could we do a test run by uploading wheels to, say,
> https://test.pypi.org <https://test.pypi.org/> first?

Shall the process be build wheel, upload to test PyPI, install from test 
PyPI, test...  :]  But sure, I could see ending up with a test PyPI 
upload at least for a tag/release.  Could technically do it for every 
build but that seems excessive, even given my comments above about 
exercising the process more often rather than less.

>> Here's one spot I did automatic deployment off of Travis to PyPI.
>> 
>> https://github.com/altendky/gitignoreio/blob/aeeb9546b6f27f411b191699d3625b4d0a08e7cf/.travis.yml#L11-L19
>> 
>> Pretty straightforward though I think it does the wheel build which 
>> isn't what we'd really want.
> 
> That's pretty cool.  I assumed you'd have to write a 'twine' command -
> Travis just has a 'deploy' provider called "pypi"?  What's actually
> happening behind the scenes there, I wonder!
> 
> (Also, you should probably upload an sdist as well as a bdist_wheel;
> there are cases where wheels aren't always what you want.)

Yeah, it's cool but then you have to know what is behind it...  for each 
CI host...  and how to make it use the files you want...  So I'd tend 
towards a twine call.  I made this silly little script the other day to 
handle this in another repo.

https://github.com/altendky/pyqt5-tools/blob/master/twineontag.py

>> I'd have to check on how to deploy existing wheels as well as those 
>> from OS X and Windows.  I'd suggest a separate PR?  I mean maybe it'd 
>> be easier to get one PR reviewed than two but that doesn't seem like a 
>> great reason to mash things together.
> 
> Smaller PRs are always easier to review - they just take more latency
> to build :).

Ok, I'll make separate tickets for:

* Testing wheels vs. src
* Automatic deployment to PyPI

Cheers,
-kyle



From trac at twistedmatrix.com  Sun Sep  9 00:05:20 2018
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 09 Sep 2018 06:05:20 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1536473120.26.1749940369321083675@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180909/f61438e3/attachment-0002.html>

From grimmtooth at gmail.com  Tue Sep 11 16:33:24 2018
From: grimmtooth at gmail.com (Jeff Grimmett)
Date: Tue, 11 Sep 2018 18:33:24 -0400
Subject: [Twisted-Python] Keeping logger from snatching stdout?
In-Reply-To: <531AE31D-1F56-47A4-BE8F-04156BF99906@twistedmatrix.com>
References: <CA+1iZEcfQOcSuZAYzjafbCEDh-dsONUTjOx8v4e8PR=HPt+tsQ@mail.gmail.com>
 <531AE31D-1F56-47A4-BE8F-04156BF99906@twistedmatrix.com>
Message-ID: <CA+1iZEfra=hgZaqDXfmfJBGKDvdiK2K2_-7vtd9MSm0ffx4nLg@mail.gmail.com>

Hi, Glyph,

On Wed, Sep 5, 2018 at 3:27 AM Glyph <glyph at twistedmatrix.com> wrote:

>
>
> On Aug 29, 2018, at 3:48 PM, Jeff Grimmett <grimmtooth at gmail.com> wrote:
>
> Why would you do this rather than simply handle logging events? Both
> twisted and the stdlib have mechanisms for adding observers that will give
> you access to more structured information - particularly useful if you are
> trying to display something in a GUI.
>

That's a little more blam than this little script really needs, though I
appreciate the suggestion.


> I brought flask-twisted in local to my code so I could monkey around with
> it. First thing I noticed was that it was using twisted.python.log. I
> messed around with that - commented it out, and now I get no stdout output
> at all.  Set the parameter setStdout to False, same thing.
>
>
> So, this is the old, legacy API, and what you want to use is this:
> https://twistedmatrix.com/documents/current/api/twisted.logger.LogBeginner.beginLoggingTo.html
>

Yeah. Also noted when I saw it. Again, seemed to be more effort than I
wanted, though if someone were to say "well, that's what you're stuck with
if you use that legacy stuff" I'd be off to do the thing.


> I'm very curious what is going on here, and whether it's a logging system
> bug.  Could you whittle this down to a minimal reproducer?
>

The sad part is that when I went to put together  the minimal reproducer,
the problem went away.

There is something in my code somewhere that is causing this. I have no
idea what it is, yet, but when I put together a minimal web server that
uses twisted.reactor.callLater() to periodically start a background task,
Twisted is not grabbing stdout or even pushing its own logging to sdtout.

I think it might be how I set up the original project in my IDE - for the
sample project, I started with a clean directory and clean project file
(PyCharm if it matters). So I'm gonna pursue that further.  I think that it
might be the IDE's environment if you tell it "this is a Flask project". I
was seeing weird things from the minimal example as well until I cleared
out all the IDE meta files and reinitiated it as a "pure Python" (in
PyCharm terms) project.

Thanks for your time and thanks for the push that got me moving (hopefully)
in the right direction. :)

 Regards,

Jeff
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180911/fa27e288/attachment-0002.html>

From grimmtooth at gmail.com  Sat Sep 15 08:38:35 2018
From: grimmtooth at gmail.com (Jeff Grimmett)
Date: Sat, 15 Sep 2018 10:38:35 -0400
Subject: [Twisted-Python] Keeping logger from snatching stdout?
In-Reply-To: <CA+1iZEfra=hgZaqDXfmfJBGKDvdiK2K2_-7vtd9MSm0ffx4nLg@mail.gmail.com>
References: <CA+1iZEcfQOcSuZAYzjafbCEDh-dsONUTjOx8v4e8PR=HPt+tsQ@mail.gmail.com>
 <531AE31D-1F56-47A4-BE8F-04156BF99906@twistedmatrix.com>
 <CA+1iZEfra=hgZaqDXfmfJBGKDvdiK2K2_-7vtd9MSm0ffx4nLg@mail.gmail.com>
Message-ID: <CA+1iZEc3BLnNiv9vzNdLbDqWNEp80xAZkYOWgZkPa8E7DJDYKA@mail.gmail.com>

For the curious, it looks like the culprit is Flask's logging features.
I'm not entirely sure what all is happening, but it's clear from docs and
code (and a lot of unresolved Stack Overflow threads) that it's hijacking
stdout in a way that is confusing to many.  Looks like the best approach is
to not let it use its defaults for logging (which I was doing initially
until I decided to be "clever") - explicitly configure logging so that you
can control its behavior explicitly as well.

Its internal logging uses the python native logging, so once I get that
squared away I can focus on wrangling the Twisted logger as well.

Regards,

Jeff


On Tue, Sep 11, 2018 at 6:33 PM Jeff Grimmett <grimmtooth at gmail.com> wrote:

>
> Hi, Glyph,
>
> On Wed, Sep 5, 2018 at 3:27 AM Glyph <glyph at twistedmatrix.com> wrote:
>
>>
>>
>> On Aug 29, 2018, at 3:48 PM, Jeff Grimmett <grimmtooth at gmail.com> wrote:
>>
>> Why would you do this rather than simply handle logging events? Both
>> twisted and the stdlib have mechanisms for adding observers that will give
>> you access to more structured information - particularly useful if you are
>> trying to display something in a GUI.
>>
>
> That's a little more blam than this little script really needs, though I
> appreciate the suggestion.
>
>
>> I brought flask-twisted in local to my code so I could monkey around with
>> it. First thing I noticed was that it was using twisted.python.log. I
>> messed around with that - commented it out, and now I get no stdout output
>> at all.  Set the parameter setStdout to False, same thing.
>>
>>
>> So, this is the old, legacy API, and what you want to use is this:
>> https://twistedmatrix.com/documents/current/api/twisted.logger.LogBeginner.beginLoggingTo.html
>>
>
> Yeah. Also noted when I saw it. Again, seemed to be more effort than I
> wanted, though if someone were to say "well, that's what you're stuck with
> if you use that legacy stuff" I'd be off to do the thing.
>
>
>> I'm very curious what is going on here, and whether it's a logging system
>> bug.  Could you whittle this down to a minimal reproducer?
>>
>
> The sad part is that when I went to put together  the minimal reproducer,
> the problem went away.
>
> There is something in my code somewhere that is causing this. I have no
> idea what it is, yet, but when I put together a minimal web server that
> uses twisted.reactor.callLater() to periodically start a background task,
> Twisted is not grabbing stdout or even pushing its own logging to sdtout.
>
> I think it might be how I set up the original project in my IDE - for the
> sample project, I started with a clean directory and clean project file
> (PyCharm if it matters). So I'm gonna pursue that further.  I think that it
> might be the IDE's environment if you tell it "this is a Flask project". I
> was seeing weird things from the minimal example as well until I cleared
> out all the IDE meta files and reinitiated it as a "pure Python" (in
> PyCharm terms) project.
>
> Thanks for your time and thanks for the push that got me moving
> (hopefully) in the right direction. :)
>
>  Regards,
>
> Jeff
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180915/f7a48282/attachment-0002.html>

From trac at twistedmatrix.com  Sun Sep 16 00:05:17 2018
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 16 Sep 2018 06:05:17 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1537077917.87.6169880982336009465@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180916/7376ffcc/attachment-0002.html>

From randall at tnr.cc  Sun Sep 16 08:02:02 2018
From: randall at tnr.cc (Randall Smith)
Date: Sun, 16 Sep 2018 10:02:02 -0400
Subject: [Twisted-Python] Switch Protocols mid Connection
Message-ID: <2a688000-2233-c60d-ae9b-e88faa08573a@tnr.cc>

I'm new to Twisted and really enjoying the event driven approach, 
especially with the availability of in-line callbacks to avoid callback 
hell.Â  So thanks to all of you who have worked on Twisted.

The program I'm writing uses AMP for peer to peer communication. I like 
AMP because it's natively asynchronous, has multi-language support, and 
efficient, not wasting resources on HTTP headers, etc.Â  There are times 
when I need to send files, 1-2 MB over the connection.Â  AMP provides a 
binary type, but it's limited to 64k, so I'd have to split the files up 
and make 16+ calls to transfer a single file.Â  So I need to switch to a 
more appropriate (not yet determined) protocol for the transfer, and 
then back to AMP.Â  AMP provides a protocol switch command, which is 
great, but then I'd need to switch back to AMP and I have no idea what 
approach to take here.Â  ItÂ  doesn't help that I don't have a file 
transfer protocol selected.

Speaking of file transfer protocol , Twisted's FTP seems like overkill 
for my simple scenario, though if I could harness the functionality I 
need, I'd use it.Â  I've also read up on Twisted's Producer/Consumer 
approach, which I'm thinking if I have to roll my own, this is the path 
I should take.Â  However, I surely can't be the first person in more than 
a decade to want to transfer a file while speaking AMP.

So, how do I switch back from a file transfer protocol to AMP and what 
existing protocol, if any, should I use for the transfer?

Thanks so much.

-Randall


-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 3984 bytes
Desc: S/MIME Cryptographic Signature
URL: </pipermail/twisted-python/attachments/20180916/0de11028/attachment-0002.bin>

From mithrandi at mithrandi.net  Mon Sep 17 00:34:51 2018
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Mon, 17 Sep 2018 08:34:51 +0200
Subject: [Twisted-Python] Switch Protocols mid Connection
In-Reply-To: <2a688000-2233-c60d-ae9b-e88faa08573a@tnr.cc>
References: <2a688000-2233-c60d-ae9b-e88faa08573a@tnr.cc>
Message-ID: <CAMcKhMR-PCXnewz++j4ykwQ7EFWP0T_A1UDVTfmOpo8QXBGJrA@mail.gmail.com>

On Sun, 16 Sep 2018 at 16:02, Randall Smith <randall at tnr.cc> wrote:
> and make 16+ calls to transfer a single file.  So I need to switch to a
> more appropriate (not yet determined) protocol for the transfer, and
> then back to AMP.  AMP provides a protocol switch command, which is
> great, but then I'd need to switch back to AMP and I have no idea what
> approach to take here.  It  doesn't help that I don't have a file
> transfer protocol selected.

You might be able to get away with
http://bazaar.launchpad.net/~glyph/%2Bjunk/amphacks/annotate/head%3A/python/amphacks/mediumbox.py



From glyph at twistedmatrix.com  Mon Sep 17 23:41:48 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 17 Sep 2018 22:41:48 -0700
Subject: [Twisted-Python] Switch Protocols mid Connection
In-Reply-To: <CAMcKhMR-PCXnewz++j4ykwQ7EFWP0T_A1UDVTfmOpo8QXBGJrA@mail.gmail.com>
References: <2a688000-2233-c60d-ae9b-e88faa08573a@tnr.cc>
 <CAMcKhMR-PCXnewz++j4ykwQ7EFWP0T_A1UDVTfmOpo8QXBGJrA@mail.gmail.com>
Message-ID: <17089B15-D4D8-459E-9550-53C89D0C2E09@twistedmatrix.com>



> On Sep 16, 2018, at 11:34 PM, Tristan Seligmann <mithrandi at mithrandi.net> wrote:
> 
> On Sun, 16 Sep 2018 at 16:02, Randall Smith <randall at tnr.cc> wrote:
>> and make 16+ calls to transfer a single file.  So I need to switch to a
>> more appropriate (not yet determined) protocol for the transfer, and
>> then back to AMP.  AMP provides a protocol switch command, which is
>> great, but then I'd need to switch back to AMP and I have no idea what
>> approach to take here.  It  doesn't help that I don't have a file
>> transfer protocol selected.
> 
> You might be able to get away with
> http://bazaar.launchpad.net/~glyph/%2Bjunk/amphacks/annotate/head%3A/python/amphacks/mediumbox.py <http://bazaar.launchpad.net/~glyph/+junk/amphacks/annotate/head:/python/amphacks/mediumbox.py>
You will also probably be interested in https://twistedmatrix.com/trac/ticket/9488 <https://twistedmatrix.com/trac/ticket/9488> .

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180917/642d9a10/attachment-0002.html>

From whalebot.helmsman at gmail.com  Wed Sep 19 06:50:41 2018
From: whalebot.helmsman at gmail.com (whalebot.helmsman at gmail.com)
Date: Wed, 19 Sep 2018 15:50:41 +0300
Subject: [Twisted-Python] Mixing async/await and asyncio
Message-ID: <2fc96d7d-8260-e354-a599-a9a4b493a432@gmail.com>

I want to learn how to use twisted together with asyncio. I create 
several files to describe my problem 
https://gist.github.com/whalebot-helmsman/c400eb66c0bd35e406de3f8f704adf13:

- I can use pure asyncio for simple case (asyncio_ex.py)

- I can use pure twisted for simple case (twisted_ex.py)

- I can await in twisted on twsited defer (twisted_await.py)

I have a problem in case I try to await in twisted for asyncio 
coroutine(twisted_await_asyncio.py). Program never finishes and I got 
only started messages

2018-09-19 12:48:59,633 [WARNING] PID:8238 
/home/nikita/tmp/twisted_await_asyncio.py:12 started
2018-09-19 12:48:59,633 [WARNING] PID:8238 
/home/nikita/tmp/twisted_await_asyncio.py:12 started



From sda at fstab.net  Wed Sep 19 19:13:51 2018
From: sda at fstab.net (Kyle Altendorf)
Date: Wed, 19 Sep 2018 21:13:51 -0400
Subject: [Twisted-Python] Mixing async/await and asyncio
In-Reply-To: <2fc96d7d-8260-e354-a599-a9a4b493a432@gmail.com>
References: <2fc96d7d-8260-e354-a599-a9a4b493a432@gmail.com>
Message-ID: <53D0F690-FBC1-4BD2-952B-D53F8416793A@fstab.net>



On September 19, 2018 8:50:41 AM EDT, "whalebot.helmsman at gmail.com" <whalebot.helmsman at gmail.com> wrote:
>I want to learn how to use twisted together with asyncio. I create 
>several files to describe my problem 
>https://gist.github.com/whalebot-helmsman/c400eb66c0bd35e406de3f8f704adf13:
>
>- I can use pure asyncio for simple case (asyncio_ex.py)
>
>- I can use pure twisted for simple case (twisted_ex.py)
>
>- I can await in twisted on twsited defer (twisted_await.py)
>
>I have a problem in case I try to await in twisted for asyncio 
>coroutine(twisted_await_asyncio.py). Program never finishes and I got 
>only started messages
>
>2018-09-19 12:48:59,633 [WARNING] PID:8238 
>/home/nikita/tmp/twisted_await_asyncio.py:12 started
>2018-09-19 12:48:59,633 [WARNING] PID:8238 
>/home/nikita/tmp/twisted_await_asyncio.py:12 started

I can't say I've done this but I think this page is on topic.

https://meejah.ca/blog/python3-twisted-and-asyncio

Cheers,
-kyle



From glyph at twistedmatrix.com  Thu Sep 20 12:00:54 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 20 Sep 2018 11:00:54 -0700
Subject: [Twisted-Python] Mixing async/await and asyncio
In-Reply-To: <2fc96d7d-8260-e354-a599-a9a4b493a432@gmail.com>
References: <2fc96d7d-8260-e354-a599-a9a4b493a432@gmail.com>
Message-ID: <A2A65DE3-12B6-4A7F-84A8-78C81A0F3FB8@twistedmatrix.com>

On Sep 19, 2018, at 5:50 AM, whalebot.helmsman at gmail.com <mailto:whalebot.helmsman at gmail.com> wrote:
> 
> I want to learn how to use twisted together with asyncio. I create several files to describe my problem https://gist.github.com/whalebot-helmsman/c400eb66c0bd35e406de3f8f704adf13: <https://gist.github.com/whalebot-helmsman/c400eb66c0bd35e406de3f8f704adf13:>
> 
> - I can use pure asyncio for simple case (asyncio_ex.py)
> 
> - I can use pure twisted for simple case (twisted_ex.py)
> 
> - I can await in twisted on twsited defer (twisted_await.py)
> 
> I have a problem in case I try to await in twisted for asyncio coroutine(twisted_await_asyncio.py). Program never finishes and I got only started messages
> 
> 2018-09-19 12:48:59,633 [WARNING] PID:8238 /home/nikita/tmp/twisted_await_asyncio.py:12 started
> 2018-09-19 12:48:59,633 [WARNING] PID:8238 /home/nikita/tmp/twisted_await_asyncio.py:12 started

Your code is mostly correct, but you are running the default Twisted reactor.  You need to use the asyncio reactor.  The article Kyle linked to (https://meejah.ca/blog/python3-twisted-and-asyncio <https://meejah.ca/blog/python3-twisted-and-asyncio>) describes the necessary set-up.  Hopefully in the future this will be more automatic!

-g


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180920/8516cf6c/attachment-0002.html>

From trac at twistedmatrix.com  Sun Sep 23 00:05:19 2018
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 23 Sep 2018 06:05:19 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1537682719.66.5776696876470566352@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180923/a11e440d/attachment-0002.html>

From meejah at meejah.ca  Wed Sep 26 20:45:15 2018
From: meejah at meejah.ca (meejah)
Date: Thu, 27 Sep 2018 06:45:15 +0400
Subject: [Twisted-Python] txtorcon 18.1.0
Message-ID: <86wor78xqc.fsf@atlantis.meejah.ca>



-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

I'm very pleased to announce txtorcon 18.1.0. This adds or fixes the
following:

 * better error-reporting (include REASON and REMOTE_REASON if
   available) when circuit-builds fail (thanks David Stainton)
 * more-robust detection of "do we have Python3" (thanks Balint
   Reczey)
 * fix parsing of Unix-sockets for SOCKS
 * better handling of concurrent Web agent requests before SOCKS ports
   are known
 * allow fowarding to ip:port pairs for Onion services when using the
   "list of 2-tuples" method of specifying the remote vs local
   connections.

You can download the release from PyPI or GitHub (or of
course "pip install txtorcon"):

   https://pypi.python.org/pypi/txtorcon/18.1.0
   https://github.com/meejah/txtorcon/releases/tag/v18.1.0

Releases are also available from the hidden service:

   http://timaq4ygg2iegci7.onion/txtorcon-18.1.0.tar.gz
   http://timaq4ygg2iegci7.onion/txtorcon-18.1.0.tar.gz.asc

Or via a "version 3" service:

   http://fjblvrw2jrxnhtg67qpbzi45r7ofojaoo3orzykesly2j3c2m3htapid.onion/txtorcon-18.1.0.tar.gz
   http://fjblvrw2jrxnhtg67qpbzi45r7ofojaoo3orzykesly2j3c2m3htapid.onion/txtorcon-18.1.0.tar.gz.asc

You can verify the sha256sum of both by running the following 4 lines
in a shell wherever you have the files downloaded:

cat <<EOF | sha256sum --check
b61cf175a5f1d4092609caf05d178fcdcabf513928eec98d38125c501afea43c  dist/txtorcon-18.1.0.tar.gz
98aba4a96c355c55ee5d8290b67a09380b02e1044fb2e76737f47f5a33659dce  dist/txtorcon-18.1.0-py2.py3-none-any.whl
EOF

thanks,
meejah
-----BEGIN PGP SIGNATURE-----

iQFFBAEBCAAvFiEEnVor1WiOy4id680/wmAoAxKAaacFAlusMDQRHG1lZWphaEBt
ZWVqYWguY2EACgkQwmAoAxKAaadz3wgAk+UbYuw0lIwEqQZbhQ6oTk0cTu5GrB5q
WkSbqPkj5Ph+y1iYMQoEgAZdD97zjpfGR+/JcyXbPyh4ZDcqkL8Hhay9yF2/PAkd
agu1LBuBjVXOFvcw3D8Xi91miFwjmMKznAuR1Jv9gp66emw3qbZRZE9g1S9o1lCX
3Cx6o3kLiq8h7UmOiqFfCFGjNBFsaiDqf35P7FH7Btg4FYIGtI5/uQ3qgDtyqlhD
YKA91KxZQoZFGiAhp5h84WXrvtuQ5tDjRNiIfh76xRFiFRnWe9ofELidKqEgnyzF
shBqdGpaIT0g0NTQRhCnzBM7m3u0RHxkRblJWBLa6t4KYNFTMJ8Pag==
=z+Lo
-----END PGP SIGNATURE-----



From hawkowl at atleastfornow.net  Fri Sep 28 04:43:40 2018
From: hawkowl at atleastfornow.net (Amber Brown)
Date: Fri, 28 Sep 2018 20:43:40 +1000
Subject: [Twisted-Python] Twisted 18.9.0rc1 Release Candidate Announcement
Message-ID: <2cb01d85-3ca4-9c9b-9366-0eebb1e58a0c@atleastfornow.net>

Hello everyone! It's time again for a Twisted release. It's not a huge 
one, but it does have some important changes!

Twisted 18.9rc1 features:

- Support for Python 3.7!
- Better support for Unicode handling in logging tracebacks in Python 2
- trial -j now reports tracebacks on test failures on Python 3.
- twisted.internet._sslverify.ClientTLSOptions no longer raises 
IDNAError when given an IPv6 address as a hostname in a HTTPS URL.
- HTTP/2 server connections will no longer time out active downloads 
that take too long.

You can get the tarball and the NEWS file at 
https://twistedmatrix.com/Releases/rc/18.9.0rc1/ , or you can try it out 
from PyPI:

 Â Â Â  python -m pip install Twisted==18.9.0rc1

Please test it, and let me know how your applications fare, good or bad! 
If nothing comes up, I will release next week.

- Amber



From trac at twistedmatrix.com  Sun Sep 30 00:05:20 2018
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 30 Sep 2018 06:05:20 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1538287520.21.3627563524455750090@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180930/5f314b4d/attachment-0002.html>

From john at egh.com  Sun Sep 30 17:26:53 2018
From: john at egh.com (John Santos)
Date: Sun, 30 Sep 2018 19:26:53 -0400
Subject: [Twisted-Python] Twisted 18.9.0rc1 Release Candidate
 Announcement
In-Reply-To: <2cb01d85-3ca4-9c9b-9366-0eebb1e58a0c@atleastfornow.net>
References: <2cb01d85-3ca4-9c9b-9366-0eebb1e58a0c@atleastfornow.net>
Message-ID: <8f55df5f-5f49-f1d9-cc3b-06c0484d5dc3@egh.com>

On 9/28/2018 06:43 AM, Amber Brown wrote:
> Hello everyone! It's time again for a Twisted release. It's not a huge 
> one, but it does have some important changes!
> 
> Twisted 18.9rc1 features:
> 
> - Support for Python 3.7!
> - Better support for Unicode handling in logging tracebacks in Python 2
> - trial -j now reports tracebacks on test failures on Python 3.
> - twisted.internet._sslverify.ClientTLSOptions no longer raises 
> IDNAError when given an IPv6 address as a hostname in a HTTPS URL.
> - HTTP/2 server connections will no longer time out active downloads 
> that take too long.
> 
> You can get the tarball and the NEWS file at 
> https://twistedmatrix.com/Releases/rc/18.9.0rc1/ , or you can try it out 
> from PyPI:
> 
>  Â Â Â  python -m pip install Twisted==18.9.0rc1
> 
> Please test it, and let me know how your applications fare, good or bad! 
> If nothing comes up, I will release next week.
> 
> - Amber
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

The NEWS file displays with no line breaks on Win10 in either Firefox or 
Chrome.  This makes it essentially unreadable.  Going back to 
https://twistedmatrix.com/Releases/rc/, and looking at the various 
release candidates, it looks like 17.1.0rc1 and before look like normal 
text files, but 17.5.0rc1 and later look like a single globbed line of 
text.  Probably not coincidentally, the good versions all list the 
Content type as [text/plain] whereas the unreadable versions are all 
[text/html]



From glyph at twistedmatrix.com  Sun Sep 30 19:08:33 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 30 Sep 2018 18:08:33 -0700
Subject: [Twisted-Python] Twisted 18.9.0rc1 Release Candidate
 Announcement
In-Reply-To: <8f55df5f-5f49-f1d9-cc3b-06c0484d5dc3@egh.com>
References: <2cb01d85-3ca4-9c9b-9366-0eebb1e58a0c@atleastfornow.net>
 <8f55df5f-5f49-f1d9-cc3b-06c0484d5dc3@egh.com>
Message-ID: <628D8AC8-66C5-4B3A-80C2-C171C11773EE@twistedmatrix.com>

> On Sep 30, 2018, at 4:26 PM, John Santos <john at egh.com> wrote:
> 
> On 9/28/2018 06:43 AM, Amber Brown wrote:
>> Hello everyone! It's time again for a Twisted release. It's not a huge one, but it does have some important changes!
>> Twisted 18.9rc1 features:
>> - Support for Python 3.7!
>> - Better support for Unicode handling in logging tracebacks in Python 2
>> - trial -j now reports tracebacks on test failures on Python 3.
>> - twisted.internet._sslverify.ClientTLSOptions no longer raises IDNAError when given an IPv6 address as a hostname in a HTTPS URL.
>> - HTTP/2 server connections will no longer time out active downloads that take too long.
>> You can get the tarball and the NEWS file at https://twistedmatrix.com/Releases/rc/18.9.0rc1/ , or you can try it out from PyPI:
>>     python -m pip install Twisted==18.9.0rc1
>> Please test it, and let me know how your applications fare, good or bad! If nothing comes up, I will release next week.
>> - Amber
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> The NEWS file displays with no line breaks on Win10 in either Firefox or Chrome.  This makes it essentially unreadable.  Going back to https://twistedmatrix.com/Releases/rc/, and looking at the various release candidates, it looks like 17.1.0rc1 and before look like normal text files, but 17.5.0rc1 and later look like a single globbed line of text.  Probably not coincidentally, the good versions all list the Content type as [text/plain] whereas the unreadable versions are all [text/html]

This is actually a bug in Twisted itself, if you are keen to fix it :)

Previous versions have 'NEWS.txt', and Twisted knows about the MIME type for '.txt' files, probably via /etc/mime.types or similar.  Current versions have 'NEWS.rst', and twisted has a default MIME type of text/html (which is a terrible idea and should not be the case).

You might be able to fix this by eliminating the default MIME type from Twisted (although this would just let your browser do the sniffing, not sure if that would be better) or you could definitely fix this by teaching Braid <https://github.com/twisted-infra/braid <https://github.com/twisted-infra/braid>> about text/x-rst <http://docutils.sourceforge.net/FAQ.html#what-s-the-official-mime-type-for-restructuredtext-data <http://docutils.sourceforge.net/FAQ.html#what-s-the-official-mime-type-for-restructuredtext-data>>.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180930/b58e4a11/attachment-0002.html>

