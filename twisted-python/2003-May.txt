From anthony at interlink.com.au  Thu May  1 01:18:58 2003
From: anthony at interlink.com.au (Anthony Baxter)
Date: Thu, 01 May 2003 15:18:58 +1000
Subject: [Twisted-Python] twisted 30% slower than asyncore? 
In-Reply-To: <20030430124538.72ca4dc2.itamar@itamarst.org> 
Message-ID: <200305010519.h415J0809173@localhost.localdomain>

>>> Itamar Shtull-Trauring wrote
> We'll see what we can do to improve this (if we can, and when we have
> time :).

If it helps, I have slabs of hotshot data on this. The top 10 (from 20,000
small HTTP fetches:

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
    20082   50.981    0.003  172.623    0.009 default.py:418(doSelect)
    60024   26.018    0.000   26.018    0.000 tcp.py:116(writeSomeData)
    40022   22.463    0.001   24.738    0.001 failure.py:91(__init__)
   488147   21.022    0.000   24.747    0.000 <string>:1(fileno)
    20010    4.160    0.000    4.932    0.000 tcp.py:209(createInternetSocket)
    60024    3.486    0.000    6.361    0.000 tcp.py:97(doRead)
    60030    2.795    0.000    2.795    0.000 default.py:489(addReader)
    40020    2.789    0.000    3.782    0.000 tcp.py:90(__init__)
    40020    2.746    0.000   47.347    0.001 tcp.py:232(doConnect)
    20010    2.573    0.000    4.484    0.000 abstract.py:87(doWrite)

That 'failure.py' is looking like some tasty low-hanging fruit to me,
but doSelect should be amenable to some speedups as well...

I should probably add that even though Twisted is slower than asyncore,
pythondirector using Twisted is still 10-15% faster than the written-in-C 
"Pound" load balancer, and about 5% slower than the "balance" load balancer
(also in C).

Anthony

-- 
Anthony Baxter     <anthony at interlink.com.au>   
It's never too late to have a happy childhood.




From exarkun at intarweb.us  Thu May  1 01:29:53 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Thu, 1 May 2003 01:29:53 -0400
Subject: [Twisted-Python] twisted 30% slower than asyncore?
In-Reply-To: <200305010519.h415J0809173@localhost.localdomain>
References: <20030430124538.72ca4dc2.itamar@itamarst.org> <200305010519.h415J0809173@localhost.localdomain>
Message-ID: <20030501052953.GA1360@meson.dyndns.org>

On Thu, May 01, 2003 at 03:18:58PM +1000, Anthony Baxter wrote:
> 
> >>> Itamar Shtull-Trauring wrote
> > We'll see what we can do to improve this (if we can, and when we have
> > time :).
> 
> If it helps, I have slabs of hotshot data on this. The top 10 (from 20,000
> small HTTP fetches:
> 
>    ncalls  tottime  percall  cumtime  percall filename:lineno(function)
>     20082   50.981    0.003  172.623    0.009 default.py:418(doSelect)
>     60024   26.018    0.000   26.018    0.000 tcp.py:116(writeSomeData)
>     40022   22.463    0.001   24.738    0.001 failure.py:91(__init__)
>    488147   21.022    0.000   24.747    0.000 <string>:1(fileno)
>     20010    4.160    0.000    4.932    0.000 tcp.py:209(createInternetSocket)
>     60024    3.486    0.000    6.361    0.000 tcp.py:97(doRead)
>     60030    2.795    0.000    2.795    0.000 default.py:489(addReader)
>     40020    2.789    0.000    3.782    0.000 tcp.py:90(__init__)
>     40020    2.746    0.000   47.347    0.001 tcp.py:232(doConnect)
>     20010    2.573    0.000    4.484    0.000 abstract.py:87(doWrite)
> 
> That 'failure.py' is looking like some tasty low-hanging fruit to me,
> but doSelect should be amenable to some speedups as well...
> 

  Boy would it be great if Failures could be sped up some more, but it
doesn't seem likely without some mind-bending rework of the whole design. 
I think most, if not all, of the worthwhile local optimizations have been
made on it.

  What I learned from Twisted.names is to not write code that uses Failures
anywhere except where they are absolutely necessary.  Python exceptions
might be cheap enough to use as a kind of fancy flow control, but failures
definitely are not.


> I should probably add that even though Twisted is slower than asyncore,
> pythondirector using Twisted is still 10-15% faster than the written-in-C 
> "Pound" load balancer, and about 5% slower than the "balance" load balancer
> (also in C).

  Cool beans.

  Jp

-- 
"There is no reason for any individual to have a computer in their
home."
                -- Ken Olson, President of DEC, World Future Society
                   Convention, 1977
-- 
 up 42 days, 1:04, 5 users, load average: 0.00, 0.02, 0.02
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030501/31cc8897/attachment.pgp 

From itamar at itamarst.org  Thu May  1 01:30:06 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 1 May 2003 01:30:06 -0400
Subject: [Twisted-Python] twisted 30% slower than asyncore?
In-Reply-To: <200305010519.h415J0809173@localhost.localdomain>
References: <20030430124538.72ca4dc2.itamar@itamarst.org>
	<200305010519.h415J0809173@localhost.localdomain>
Message-ID: <20030501013006.4df303bc.itamar@itamarst.org>

On Thu, 01 May 2003 15:18:58 +1000
Anthony Baxter <anthony at interlink.com.au> wrote:

> That 'failure.py' is looking like some tasty low-hanging fruit to me,

Indeed. Thanks for the info!

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From itamar at itamarst.org  Thu May  1 01:48:01 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 1 May 2003 01:48:01 -0400
Subject: [Twisted-Python] twisted 30% slower than asyncore?
In-Reply-To: <20030501052953.GA1360@meson.dyndns.org>
References: <20030430124538.72ca4dc2.itamar@itamarst.org>
	<200305010519.h415J0809173@localhost.localdomain>
	<20030501052953.GA1360@meson.dyndns.org>
Message-ID: <20030501014801.46ffdc92.itamar@itamarst.org>

On Thu, 1 May 2003 01:29:53 -0400
Jp Calderone <exarkun at intarweb.us> wrote:

>   What I learned from Twisted.names is to not write code that uses
>   Failures
> anywhere except where they are absolutely necessary.  Python
> exceptions might be cheap enough to use as a kind of fancy flow
> control, but failures definitely are not.

My soon to be checked in code changes Failures to be vastly less
expensive if you explicitly pass in an Exception (no pretty tracebacks
stored, but in this case you don't want them anyway.) 

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From warner at lothar.com  Thu May  1 02:03:07 2003
From: warner at lothar.com (Brian Warner)
Date: Wed, 30 Apr 2003 23:03:07 -0700 (PDT)
Subject: [Twisted-Python] WovenQuotes Howto Problem
References: <6897150.1051543643452.JavaMail.nobody@wamui01.slb.atl.earthlink.net>
Message-ID: <20030430.230307.21611412.warner@lothar.com>

"steve at shrogers.com" <shrogers at ionet.net> writes:
> I'm playing with Twisted 1.0.4. After making it through the first couple of
> TwistedQuotes examples, I get the following failure with the TwistedQuotes
> example.

> 2003/04/28 10:05 [HTTPChannel,0,127.0.0.1] exceptions.TypeError: getData() takes exactly 1 argument (2 given)

Oops. Fixed in CVS. Both Model.getData() and Model.setData() now get a
Request has their first argument.

thanks,
 -Brian



From anthony at interlink.com.au  Thu May  1 04:44:31 2003
From: anthony at interlink.com.au (Anthony Baxter)
Date: Thu, 01 May 2003 18:44:31 +1000
Subject: [Twisted-Python] twisted 30% slower than asyncore? 
Message-ID: <200305010844.h418iVT11511@localhost.localdomain>

The following patch to t.i.default.py removes the creation of
the 'Failure' objects in the common case of connectionDone or
connectionLost, instead using a cache of two existing objects. The
second patch (which I've already emailed to Itamar, but will send here
as well for completeness) makes a similar change to the code in tcp.py.
The two combined make a test over the loopback interface go from around
300 request/second to about 450 requests/second when serving very small
objects (2K) from apache on the same host. There's a bunch of other
speedups possible in SelectReactor.doSelect() - making globals local,
&c.

Anthony


--- ../../../../twisted/internet/default.py     Tue Apr 22 01:32:15 2003
+++ default.py  Thu May  1 18:38:20 2003
@@ -422,7 +422,12 @@
                  reads=reads,
                  writes=writes,
                  rhk=reads.has_key,
-                 whk=writes.has_key):
+                 whk=writes.has_key,
+                 faildict={
+                  error.ConnectionDone:failure.Failure(error.ConnectionDone()),
+                  error.ConnectionLost:failure.Failure(error.ConnectionLost()),
+                 }
+                ):
         """Run one iteration of the I/O monitor loop.
 
         This will run all selectables who had input or output readiness
@@ -479,7 +484,11 @@
                     self.removeReader(selectable)
                     self.removeWriter(selectable)
                     try:
-                        selectable.connectionLost(failure.Failure(why))
+                        f = faildict.get(why.__class__)
+                        if f:
+                            selectable.connectionLost(f)
+                        else:
+                            selectable.connectionLost(failure.Failure(why))
                     except:
                         log.deferr()
                 log.logOwner.disown(selectable)


--- twisted/internet/tcp.py     22 Apr 2003 20:31:16 -0000      1.115
+++ twisted/internet/tcp.py     1 May 2003 06:55:26 -0000
@@ -468,7 +468,7 @@
         except:
             log.deferr()
 
-    def loseConnection(self):
+    def loseConnection(self, connDone=failure.Failure(main.CONNECTION_DONE)):
         """Stop accepting connections on this port.
 
         This will shut down my socket and call self.connectionLost().
@@ -476,8 +476,7 @@
         self.disconnecting = 1
         self.stopReading()
         if self.connected:
-            self.reactor.callLater(0, self.connectionLost,
-                                   failure.Failure(main.CONNECTION_DONE))
+            self.reactor.callLater(0, self.connectionLost, connDone)
 
     stopListening = loseConnection
 



From anthony at interlink.com.au  Thu May  1 06:29:59 2003
From: anthony at interlink.com.au (Anthony Baxter)
Date: Thu, 01 May 2003 20:29:59 +1000
Subject: [Twisted-Python] reactors and sys.exc_value
Message-ID: <200305011030.h41AU0213501@localhost.localdomain>

It looks like pretty much all of the reactors use sys.exc_value in
an exception handler. Is there a reason this is done instead of the
much safer sys.exc_info()[1] ?

Anthony
--
Anthony Baxter     <anthony at interlink.com.au>
It's never too late to have a happy childhood.




From jon at totient.demon.co.uk  Thu May  1 17:35:44 2003
From: jon at totient.demon.co.uk (Jon Dyte)
Date: Thu, 1 May 2003 22:35:44 +0100
Subject: [Twisted-Python] adbapi question
In-Reply-To: <20030430213815.3fff4347.itamar@itamarst.org>
References: <200304302328.31599.jon@totient.demon.co.uk> <20030430213815.3fff4347.itamar@itamarst.org>
Message-ID: <200305012235.44111.jon@totient.demon.co.uk>

On Thursday 01 May 2003 2:38 am, Itamar Shtull-Trauring wrote:
> On Wed, 30 Apr 2003 23:28:31 +0100
>
> Jon Dyte <jon at totient.demon.co.uk> wrote:
> > Below is a small script. My question is what is the correct way to
> > exit after using the adbapi stuff. The script as it stands just hangs
> > the terminal until I Ctrl-Z and kill it.
>
> You don't want a reactor.crash() and a reactor.stop(). Just do
> reactor.stop().
>
> Using threads can make your python program not exit if they hang around,
> but reactor.stop() should shut down all threads in the thread pool.
I added just reactor.stop(), but it doesnt work.
eg :-
$ python simpledb.py jon jon jon
Done
0
finished
{1026: <connection object at 0x82282c0>}
[<_MainThread(MainThread, started)>, <Thread(PoolThread-136416444-1, 
started)>]

The thread isnt removed from the threadpool.

I get the same problem with the Sybase DB-API module as well as psycopg
The script is 

import sys
import threading
import pprint
from twisted.enterprise import adbapi
from twisted.internet import reactor

dbname,user,passwd = sys.argv[1:4]

class SomeTable(adbapi.Augmentation):
    def getSomeData(self):
        self.done = 1
        qry = "select * from SomeTable"
        return 
self.runQuery(qry).addCallbacks(self.operationDone,self.operationError)
    
    def operationDone(self, done):
        print "Done"
        self.done =0
        
    def operationError(self,err):
        print err
        

dbpool = adbapi.ConnectionPool("psycopg","dbname=%s user=%s" % (dbname,user))

db1=SomeTable(dbpool)

db1.getSomeData()

while 1 == db1.done:
        reactor.iterate()

print db1.done
print "finished"

reactor.stop()
print dbpool.connections
print threading.enumerate()

Jon



From exarkun at intarweb.us  Thu May  1 18:33:14 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Thu, 1 May 2003 18:33:14 -0400
Subject: [Twisted-Python] Updated TLS patch
Message-ID: <20030501223314.GA9422@meson.dyndns.org>

  I've taken Jeremy Rossi's TLS patch and updated it for current CVS, and
also cleaned up the parts of it that broke regular TCP when SSL was
unavailable.

  What I have been completely unable to do is prevent this from introducing
a branch/function call into the common path for doRead/doWrite, even when
TLS is not in use.

  In order of desirability (imho), this can be fixed by:

    Rewrite tcp.py, more or less completely, *without* juggling methods as
it currently does.

    Take the _TLS_* and _NOTLS_* functions and just inline them.

    Create a new transport, TLS, along with all the associated
methods/functions (connect/listen/etc) so as to keep TLS code out of tcp.py
entirely.

  Patch attached.

  Jp

-- 
#!/bin/bash
( LIST=(~/.sigs/*.sig)
  cat ${LIST[$(($RANDOM % ${#LIST[*]}))]}
  echo -- $'\n' `uptime | sed -e 's/.*m//'` ) > ~/.signature
-- 
 up 42 days, 19:04, 4 users, load average: 0.35, 0.16, 0.19
-------------- next part --------------
Index: twisted/internet/ssl.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/ssl.py,v
retrieving revision 1.40
diff -u -r1.40 ssl.py
--- twisted/internet/ssl.py	2 Apr 2003 04:11:32 -0000	1.40
+++ twisted/internet/ssl.py	1 May 2003 22:20:02 -0000
@@ -95,116 +95,13 @@
         return SSL.Context(SSL.SSLv3_METHOD)
 
 
-class Connection(tcp.Connection):
-    """I am an SSL connection.
-    """
-
-    __implements__ = tcp.Connection.__implements__, interfaces.ISSLTransport
-    
-    writeBlockedOnRead = 0
-    readBlockedOnWrite= 0
-    sslShutdown = 0
-    
-    def getPeerCertificate(self):
-        """Return the certificate for the peer."""
-        return self.socket.get_peer_certificate()
-
-    def _postLoseConnection(self):
-        """Gets called after loseConnection(), after buffered data is sent.
-
-        We close the SSL transport layer, and if the other side hasn't
-        closed it yet we start reading, waiting for a ZeroReturnError
-        which will indicate the SSL shutdown has completed.
-        """
-        try:
-            done = self.socket.shutdown()
-            self.sslShutdown = 1
-        except SSL.Error:
-            return main.CONNECTION_LOST
-        if done:
-            return main.CONNECTION_DONE
-        else:
-            # we wait for other side to close SSL connection -
-            # this will be signaled by SSL.ZeroReturnError when reading
-            # from the socket
-            self.stopWriting()
-            self.startReading()
-            return None # don't close socket just yet
-    
-    def doRead(self):
-        """See tcp.Connection.doRead for details.
-        """
-        if self.writeBlockedOnRead:
-            self.writeBlockedOnRead = 0
-            return self.doWrite()
-        try:
-            return tcp.Connection.doRead(self)
-        except SSL.ZeroReturnError:
-            # close SSL layer, since other side has done so, if we haven't
-            if not self.sslShutdown:
-                try:
-                    self.socket.shutdown()
-                    self.sslShutdown = 1
-                except SSL.Error:
-                    pass
-            return main.CONNECTION_DONE
-        except SSL.WantReadError:
-            return
-        except SSL.WantWriteError:
-            self.readBlockedOnWrite = 1
-            self.startWriting()
-            return
-        except SSL.Error:
-            return main.CONNECTION_LOST
-
-    def doWrite(self):
-        if self.readBlockedOnWrite:
-            self.readBlockedOnWrite = 0
-            if not self.dataBuffer: self.stopWriting()
-            return self.doRead()
-        return tcp.Connection.doWrite(self)
-    
-    def writeSomeData(self, data):
-        """See tcp.Connection.writeSomeData for details.
-        """
-        if not data:
-            return 0
-
-        try:
-            return tcp.Connection.writeSomeData(self, data)
-        except SSL.WantWriteError:
-            return 0
-        except SSL.WantReadError:
-            self.writeBlockedOnRead = 1
-            return 0
-        except SSL.Error:
-            return main.CONNECTION_LOST
-
-    def _closeSocket(self):
-        """Called to close our socket."""
-        try:
-            self.socket.sock_shutdown(2)
-        except socket.error:
-            try:
-                self.socket.close()
-            except socket.error:
-                log.deferr()
-
-
-
-class Client(Connection, tcp.Client):
+class Client(tcp.Client):
     """I am an SSL client."""
     def __init__(self, host, port, bindAddress, ctxFactory, connector, reactor=None):
         # tcp.Client.__init__ depends on self.ctxFactory being set
         self.ctxFactory = ctxFactory
         tcp.Client.__init__(self, host, port, bindAddress, connector, reactor)
 
-    def createInternetSocket(self):
-        """(internal) create an SSL socket
-        """
-        sock = tcp.Client.createInternetSocket(self)
-        return SSL.Connection(self.ctxFactory.getContext(), sock)
-
     def getHost(self):
         """Returns a tuple of ('SSL', hostname, port).
 
@@ -219,16 +116,14 @@
         """
         return ('SSL',)+self.addr
 
+    def _finishInit(self, whenDone, skt, error, reactor):
+        tcp.Client._finishInit(self, whenDone, skt, error, reactor)
+        self.startTLS(self.ctxFactory)
 
 
-class Server(Connection, tcp.Server):
+class Server(tcp.Server):
     """I am an SSL server.
     """
-    
-    def __init__(*args, **kw):
-        # We don't want Connection's __init__
-        tcp.Server.__init__(*args, **kw)
-    
     def getHost(self):
         """Returns a tuple of ('SSL', hostname, port).
 
@@ -257,33 +152,12 @@
         """
         sock = tcp.Port.createInternetSocket(self)
         return SSL.Connection(self.ctxFactory.getContext(), sock)
-    
-    def doRead(self):
-        """Called when my socket is ready for reading.
 
-        This accepts a connection and calls self.protocol() to handle the
-        wire-level protocol.
-        """
-        try:
-            try:
-                skt, addr = self.socket.accept()
-            except socket.error, e:
-                if e.args[0] == tcp.EWOULDBLOCK:
-                    return
-                raise
-            except SSL.Error:
-                log.deferr()
-                return
-            protocol = self.factory.buildProtocol(addr)
-            if protocol is None:
-                skt.close()
-                return
-            s = self.sessionno
-            self.sessionno = s+1
-            transport = self.transport(skt, protocol, addr, self, s)
-            protocol.makeConnection(transport)
-        except:
-            log.deferr()
+    def _preMakeConnection(self, transport):
+        # *Don't* call startTLS here
+        # The transport already has the SSL.Connection object from above
+        transport._startTLS()
+        return tcp.Port._preMakeConnection(self, transport)
 
 
 class Connector(base.BaseConnector):
Index: twisted/internet/tcp.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/tcp.py,v
retrieving revision 1.116
diff -u -r1.116 tcp.py
--- twisted/internet/tcp.py	1 May 2003 16:40:47 -0000	1.116
+++ twisted/internet/tcp.py	1 May 2003 22:20:03 -0000
@@ -39,6 +39,11 @@
 except ImportError:
     fcntl = None
 
+try:
+    from OpenSSL import SSL
+except ImportError:
+    SSL = None
+
 if os.name == 'nt':
     # we hardcode these since windows actually wants e.g.
     # WSAEALREADY rather than EALREADY. Possibly we should
@@ -88,12 +93,30 @@
 
     __implements__ = abstract.FileDescriptor.__implements__, interfaces.ITCPTransport
 
+    if SSL:
+        writeBlockedOnRead = 0
+        readBlockedOnWrite= 0
+        sslShutdown = 0
+        TLS = 0
+
     def __init__(self, skt, protocol, reactor=None):
         abstract.FileDescriptor.__init__(self, reactor=reactor)
         self.socket = skt
         self.socket.setblocking(0)
         self.fileno = skt.fileno
         self.protocol = protocol
+        
+    def startTLS(self, ctx):
+        if not SSL:
+            raise RuntimeException, "No SSL support available"
+        assert not self.TLS
+
+        self._startTLS()
+        self.socket = SSL.Connection(ctx.getContext(), self.socket)
+        self.fileno = self.socket.fileno
+    
+    def _startTLS(self):
+        self.TLS = 1
 
     def doRead(self):
         """Calls self.protocol.dataReceived with all available data.
@@ -103,6 +126,9 @@
         lost through an error in the physical recv(), this function will return
         the result of the dataReceived call.
         """
+        return (self._NOTLS_doRead, self._TLS_doRead)[self.TLS]()
+
+    def _NOTLS_doRead(self):
         try:
             data = self.socket.recv(self.bufferSize)
         except socket.error, se:
@@ -113,6 +139,39 @@
         if not data:
             return main.CONNECTION_LOST
         return self.protocol.dataReceived(data)
+    
+    def _TLS_doRead(self):
+        if self.writeBlockedOnRead:
+            self.writeBlockedOnRead = 0
+            return self.doWrite()
+        try:
+            return self._NOTLS_doRead()
+        except SSL.ZeroReturnError:
+            # close SSL layer, since other side has done so, if we haven't
+            if not self.sslShutdown:
+                try:
+                    self.socket.shutdown()
+                    self.sslShutdown = 1
+                except SSL.Error:
+                    pass
+            return main.CONNECTION_DONE
+        except SSL.WantReadError:
+            return
+        except SSL.WantWriteError:
+            self.readBlockedOnWrite = 1
+            self.startWriting()
+            return
+        except SSL.Error:
+            return main.CONNECTION_LOST
+
+    def _TLS_doWrite(self):
+        if self.readBlockedOnWrite:
+            self.readBlockedOnWrite = 0
+            # XXX - This is touching internal guts bad bad bad
+            if not self.dataBuffer:
+                self.stopWriting()
+            return self.doRead()
+        return abstract.FileDescriptor.doWrite(self)
 
     def writeSomeData(self, data):
         """Connection.writeSomeData(data) -> #of bytes written | CONNECTION_LOST
@@ -120,6 +179,9 @@
         the number of bytes read (which is positive) or a connection error code
         (which is negative)
         """
+        return (self._NOTLS_writeSomeData, self._TLS_writeSomeData)[self.TLS](data)
+
+    def _NOTLS_writeSomeData(self, data):
         try:
             return self.socket.send(data)
         except socket.error, se:
@@ -128,8 +190,23 @@
             else:
                 return main.CONNECTION_LOST
 
+    def _TLS_writeSomeData(self, data):
+        if not data:
+            return 0
+        try:
+            return self._NOTLS_writeSomeData(data)
+        except SSL.WantWriteError:
+            return 0
+        except SSL.WantReadError:
+            self.writeBlockedOnRead = 1
+        except SSL.Error:
+            return main.CONNECTION_LOST
+
     def _closeSocket(self):
         """Called to close our socket."""
+        return (self._NOTLS_closeSocket, self._TLS_closeSocket)[self.TLS]()
+
+    def _NOTLS_closeSocket(self):
         # This used to close() the socket, but that doesn't *really* close if
         # there's another reference to it in the TCP/IP stack, e.g. if it was
         # was inherited by a subprocess. And we really do want to close the
@@ -139,6 +216,15 @@
         except socket.error:
             pass
 
+    def _TLS_closeSocket(self):
+        try:
+            self.socket.sock_shutdown(2)
+        except:
+            try:
+                self.socket.close()
+            except:
+                pass
+
     def connectionLost(self, reason):
         """See abstract.FileDescriptor.connectionLost().
         """
@@ -173,6 +259,33 @@
 
     def setTcpNoDelay(self, enabled):
         self.socket.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, enabled)
+    
+    def _postLoseConnection(self):
+        """Gets called after loseConnection(), after buffered data is sent.
+
+        We close the SSL transport layer, and if the other side hasn't
+        closed it yet we start reading, waiting for a ZeroReturnError
+        which will indicate the SSL shutdown has completed.
+        """
+        if not self.TLS:
+            return abstract.FileDescriptor._postLoseConnection(self)
+
+        try:
+            done = self.socket.shutdown()
+            self.sslShutdown = 1
+        except SSL.Error:
+            return main.CONNECTION_LOST
+        if done:
+            return main.CONNECTION_DONE
+        else:
+            # we wait for other side to close SSL connection -
+            # this will be signaled by SSL.ZeroReturnError when reading
+            # from the socket
+            self.stopWriting()
+            self.startReading()
+            
+            # don't close socket just yet
+            return None
 
 
 class BaseClient(Connection):
@@ -191,6 +304,11 @@
         else:
             reactor.callLater(0, self.failIfNotConnected, error)
 
+    def startTLS(self, ctx):
+        holder = Connection.startTLS(self, ctx)
+        self.socket.set_connect_state()
+        return holder
+
     def stopConnecting(self):
         """Stop attempt to connect."""
         self.failIfNotConnected(error.UserError())
@@ -357,6 +475,11 @@
         """
         return self.repstr
 
+    def startTLS(self, ctx):
+        holder = Connection.startTLS(self, ctx)
+        self.socket.set_accept_state()
+        return holder
+
     def getHost(self):
         """Returns a tuple of ('INET', hostname, port).
 
@@ -455,6 +578,7 @@
                     elif e.args[0] == EPERM:
                         continue
                     raise
+                
                 protocol = self.factory.buildProtocol(addr)
                 if protocol is None:
                     skt.close()
@@ -462,11 +586,22 @@
                 s = self.sessionno
                 self.sessionno = s+1
                 transport = self.transport(skt, protocol, addr, self, s)
+                transport = self._preMakeConnection(transport)
                 protocol.makeConnection(transport)
             else:
                 self.numberAccepts = self.numberAccepts+20
         except:
+            # Note that in TLS mode, this will possibly catch SSL.Errors
+            # raised by self.socket.accept()
+            #
+            # There is no "except SSL.Error:" above because SSL may be
+            # None if there is no SSL support.  In any case, all the
+            # "except SSL.Error:" suite would probably do is log.deferr()
+            # and return, so handling it here works just as well.
             log.deferr()
+    
+    def _preMakeConnection(self, transport):
+        return transport
 
     def loseConnection(self, connDone=failure.Failure(main.CONNECTION_DONE)):
         """Stop accepting connections on this port.
Index: twisted/test/test_ssl.py
===================================================================
RCS file: /cvs/Twisted/twisted/test/test_ssl.py,v
retrieving revision 1.8
diff -u -r1.8 test_ssl.py
--- twisted/test/test_ssl.py	1 May 2003 07:02:10 -0000	1.8
+++ twisted/test/test_ssl.py	1 May 2003 22:20:03 -0000
@@ -17,19 +17,23 @@
 from __future__ import nested_scopes
 from twisted.trial import unittest
 from twisted.internet import protocol, reactor
+from twisted.protocols import basic
+
 try:
-    import OpenSSL
+    from OpenSSL import SSL
     from twisted.internet import ssl
 except ImportError:
-    OpenSSL = None
+    SSL = None
+
 import os
 import test_tcp
 
 
+certPath = os.path.join(os.path.split(test_tcp.__file__)[0], "server.pem")
+
 class StolenTCPTestCase(test_tcp.ProperlyCloseFilesTestCase, test_tcp.WriteDataTestCase):
     
     def setUp(self):
-        certPath = os.path.join(os.path.split(test_tcp.__file__)[0], "server.pem")
         f = protocol.ServerFactory()
         f.protocol = protocol.Protocol
         self.listener = reactor.listenSSL(
@@ -49,5 +53,117 @@
 
         self.totalConnections = 0
 
-if not OpenSSL:
-    del StolenTCPTestCase
+class ClientTLSContext(ssl.ClientContextFactory):
+    isClient = 1
+    def getContext(self):
+        return SSL.Context(ssl.SSL.TLSv1_METHOD)
+
+class UnintelligentProtocol(basic.LineReceiver):
+    pretext = [
+        "first line",
+        "last thing before tls starts",
+        "STARTTLS",
+    ]
+    
+    posttext = [
+        "first thing after tls started",
+        "last thing ever",
+    ]
+    
+    def connectionMade(self):
+        for l in self.pretext:
+            self.sendLine(l)
+
+    def lineReceived(self, line):
+        if line == "READY":
+            self.transport.startTLS(ClientTLSContext())
+            for l in self.posttext:
+                self.sendLine(l)
+            self.transport.loseConnection()
+        
+class ServerTLSContext(ssl.DefaultOpenSSLContextFactory):
+    isClient = 0
+    def __init__(self, *args, **kw):
+        kw['sslmethod'] = SSL.TLSv1_METHOD
+        ssl.DefaultOpenSSLContextFactory.__init__(self, *args, **kw)
+
+class LineCollector(basic.LineReceiver):
+    def __init__(self, doTLS):
+        self.doTLS = doTLS
+
+    def connectionMade(self):
+        self.factory.rawdata = ''
+        self.factory.lines = []
+
+    def lineReceived(self, line):
+        self.factory.lines.append(line)
+        if line == 'STARTTLS':
+            self.sendLine('READY')
+            if self.doTLS:
+                ctx = ServerTLSContext(
+                    privateKeyFileName=certPath,
+                    certificateFileName=certPath,
+                )
+                self.transport.startTLS(ctx)
+            else:
+                self.setRawMode()
+    
+    def rawDataReceived(self, data):
+        self.factory.rawdata += data
+        self.factory.done = 1
+    
+    def connectionLost(self, reason):
+        self.factory.done = 1
+
+class TLSTestCase(unittest.TestCase):
+    def testTLS(self):
+        cf = protocol.ClientFactory()
+        cf.protocol = UnintelligentProtocol
+        
+        sf = protocol.ServerFactory()
+        sf.protocol = lambda: LineCollector(1)
+        sf.done = 0
+
+        port = reactor.listenTCP(0, sf)
+        portNo = port.getHost()[2]
+        
+        reactor.connectTCP('0.0.0.0', portNo, cf)
+        
+        i = 0
+        while i < 5000 and not sf.done:
+            reactor.iterate(0.01)
+            i += 1
+        
+        self.failUnless(sf.done, "Never finished reading all lines")
+        self.assertEquals(
+            sf.lines,
+            UnintelligentProtocol.pretext + UnintelligentProtocol.posttext
+        )
+    
+    def testUnTLS(self):
+        cf = protocol.ClientFactory()
+        cf.protocol = UnintelligentProtocol
+        
+        sf = protocol.ServerFactory()
+        sf.protocol = lambda: LineCollector(0)
+        sf.done = 0
+
+        port = reactor.listenTCP(0, sf)
+        portNo = port.getHost()[2]
+        
+        reactor.connectTCP('0.0.0.0', portNo, cf)
+        
+        i = 0
+        while i < 5000 and not sf.done:
+            reactor.iterate(0.01)
+            i += 1
+        
+        self.failUnless(sf.done, "Never finished reading all lines")
+        self.assertEquals(
+            sf.lines,
+            UnintelligentProtocol.pretext
+        )
+        self.failUnless(sf.rawdata, "No encrypted bytes received")
+        
+if not SSL:
+    globals().clear()
-------------- next part --------------
A non-text attachment was scrubbed...
Name: echoclient_tls.py
Type: text/x-python
Size: 2253 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030501/260763d3/attachment.py 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: echoserv_tls.py
Type: text/x-python
Size: 2398 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030501/260763d3/attachment-0001.py 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030501/260763d3/attachment.pgp 

From itamar at itamarst.org  Thu May  1 18:41:34 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 1 May 2003 18:41:34 -0400
Subject: [Twisted-Python] adbapi question
In-Reply-To: <200305012235.44111.jon@totient.demon.co.uk>
References: <200304302328.31599.jon@totient.demon.co.uk>
	<20030430213815.3fff4347.itamar@itamarst.org>
	<200305012235.44111.jon@totient.demon.co.uk>
Message-ID: <20030501184134.1579e77a.itamar@itamarst.org>

On Thu, 1 May 2003 22:35:44 +0100
Jon Dyte <jon at totient.demon.co.uk> wrote:

> while 1 == db1.done:
>         reactor.iterate()

This is also wrong. You should be doing reactor.run().


-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From naesten at myrealbox.com  Thu May  1 23:00:24 2003
From: naesten at myrealbox.com (Samuel Bronson)
Date: Thu, 01 May 2003 23:00:24 -0400
Subject: [Twisted-Python] Twisted 1.0.4 - Typo in code
References: <oqist0c8jm.fsf@alcyon.progiciels-bpi.ca>
Message-ID: <3EB1DF48.8000402@myrealbox.com>

Francois Pinard wrote:

>P.S. - Is there an email address I could use for such nits, instead of
>bothering the whole list?
>
Am I supposed to be bothered by nits? Huh? Nobody told me about this! ;-).
--Sam





From pinard at iro.umontreal.ca  Fri May  2 09:43:23 2003
From: pinard at iro.umontreal.ca (Francois Pinard)
Date: 02 May 2003 09:43:23 -0400
Subject: [Twisted-Python] Re: Twisted 1.0.4 - Typo in code
In-Reply-To: <3EB1DF48.8000402@myrealbox.com>
References: <oqist0c8jm.fsf@alcyon.progiciels-bpi.ca>
	<3EB1DF48.8000402@myrealbox.com>
Message-ID: <oq3cjxlb0k.fsf@alcyon.progiciels-bpi.ca>

[Samuel Bronson]

> Francois Pinard wrote:

> > P.S. - Is there an email address I could use for such nits, instead
> > of bothering the whole list?

> Am I supposed to be bothered by nits?  Huh?  Nobody told me about
> this! ;-).

This message is sent in chat mode.  You may skip it! :-)

I've been reporting tiny things for a lot of years, now, to many people
working on big things.  While most maintainers receive my comments in
all happiness and simplicity, a few became quickly irritated, which is no
fun for all parties involved.  So I'm trying to be a bit more careful --
yet avoiding total silence, which is probably not the best solution.

Nit-pickers attract nit-pickers, and a few GNU maintainers got together
over time, as we were able to excruciatingly nit-pick on each other code
and documentation, in all friendship and respect.  Someone gave the name
`Gnits' to our small, closed gang, and you might see remaining bits
about so-called `Gnits standards', here and there, in some software.
But this is all rather historical by now...

The only constant thing is that I'm born nit-picker... :-) I'll try to
follow the suggestion that was given to me, as to wander in the IRC group,
hoping that it will more time-efficient than email, overall.  Email is hard
to beat for submitting reports.  (The worse medium is bug tracking systems,
with their horrible user interfaces: to me, there are worse than silence.)

-- 
Fran?ois Pinard   http://www.iro.umontreal.ca/~pinard



From justin at gnubia.net  Fri May  2 10:33:38 2003
From: justin at gnubia.net (Justin Ryan)
Date: 02 May 2003 09:33:38 -0500
Subject: [Twisted-Python] adbapi question
In-Reply-To: <20030430213930.542c81d9.itamar@itamarst.org>
References: <200304302328.31599.jon@totient.demon.co.uk>
	 <1051752541.32738.206.camel@samadhi>
	 <20030430213930.542c81d9.itamar@itamarst.org>
Message-ID: <1051886018.8932.4.camel@qutang.gnubian.org>

Well, I think it was a misconception on my part.. It does seem as if the
reactor is not _designed_ to be used in short 'scripts' like this one,
but I wasn't aware you could call reactor.stop().

On Wed, 2003-04-30 at 20:39, Itamar Shtull-Trauring wrote:
> On 30 Apr 2003 20:29:01 -0500
> Justin Ryan <justin at gnubia.net> wrote:
> 
> > Someone will surely correct me if I'm wrong, but I ran into this same
> > dilemma when I began to use twisted.  It seems that as twisted is an
> > event-driven framework for asynchronous networked applications, it
> > isn't intended to be used in this way.
> 
> Dunno what you mean by "this way". If you need to deal with a blocking
> database operation you dispatch it to the thread pool, and that works
> just fine.




From justin at gnubia.net  Fri May  2 10:49:07 2003
From: justin at gnubia.net (Justin Ryan)
Date: 02 May 2003 09:49:07 -0500
Subject: [Twisted-Python] adbapi question
In-Reply-To: <20030501184134.1579e77a.itamar@itamarst.org>
References: <200304302328.31599.jon@totient.demon.co.uk>
	 <20030430213815.3fff4347.itamar@itamarst.org>
	 <200305012235.44111.jon@totient.demon.co.uk>
	 <20030501184134.1579e77a.itamar@itamarst.org>
Message-ID: <1051886101.8932.7.camel@qutang.gnubian.org>

It may be worthwhile to point out that reactor.run() should replace that
while loop.. each callback could check if db1.done == 1, and if it
doesn't, call reactor.stop()..

I think..

On Thu, 2003-05-01 at 17:41, Itamar Shtull-Trauring wrote:
> On Thu, 1 May 2003 22:35:44 +0100
> Jon Dyte <jon at totient.demon.co.uk> wrote:
> 
> > while 1 == db1.done:
> >         reactor.iterate()
> 
> This is also wrong. You should be doing reactor.run().
> 




From abe at fettig.net  Fri May  2 12:31:16 2003
From: abe at fettig.net (Abe Fettig)
Date: 02 May 2003 12:31:16 -0400
Subject: [Twisted-Python] NNTP/SMTP authentication
In-Reply-To: <20030430152532.1f6eb902.itamar@itamarst.org>
References: <1051723673.639.18.camel@mingus>
	 <20030430183441.GA26588@meson.dyndns.org>
	 <20030430152532.1f6eb902.itamar@itamarst.org>
Message-ID: <1051893076.773.63.camel@mingus>

On Wed, 2003-04-30 at 15:25, Itamar Shtull-Trauring wrote:
> On Wed, 30 Apr 2003 14:34:41 -0400
> Jp Calderone <exarkun at intarweb.us> wrote:
> 
> >   Whether the *actual* details of how IMAP4 is using cred are proper
> >   are
> > not, I don't know ;) The code works, but it seems that there are too
> > many different objects involved in the process (CramMD5Identity,
> > CramMD5ServerAuthenticator, CramMD5ClientAuthenticator - and that's
> > just for*one* kind of authentication scheme).  Setup is similarly
> > tedious, requiring 4 lines of "boilerplate" to set things up, and then
> > *10* lines to add each new identity.  Now that imap4.py is settling
> > down, it'd be great if someone with more experience with cred could
> > take a look at it and give me some feedback.
> 
> This is why cred is going to be refactored. With a chainsaw. On fire.
> End result should be that you have to do a *lot* less work in your
> protocol.

That sounds really great.  In the meantime, should Jp and/or I go ahead
with a simple implementation of NNTP/SMTP authentication?  I'm going to
need it within the next month or so.

Thanks for all your work!

Abe




From skin_pup-twisted at damnable.happypoo.com  Fri May  2 08:30:28 2003
From: skin_pup-twisted at damnable.happypoo.com (Skinny Puppy)
Date: Fri, 2 May 2003 08:30:28 -0400
Subject: [Twisted-Python] Updated TLS patch
In-Reply-To: <20030501223314.GA9422@meson.dyndns.org>
References: <20030501223314.GA9422@meson.dyndns.org>
Message-ID: <20030502123028.GM37090@shitbomb.com>

Jp Calderone [exarkun at intarweb.us] wrote:
>   I've taken Jeremy Rossi's TLS patch and updated it for current CVS, and
> also cleaned up the parts of it that broke regular TCP when SSL was
> unavailable.
> 
>   What I have been completely unable to do is prevent this from introducing
> a branch/function call into the common path for doRead/doWrite, even when
> TLS is not in use.
> 
>   In order of desirability (imho), this can be fixed by:
> 
>     Rewrite tcp.py, more or less completely, *without* juggling methods as
> it currently does.
> 
>     Take the _TLS_* and _NOTLS_* functions and just inline them.
> 
>     Create a new transport, TLS, along with all the associated
> methods/functions (connect/listen/etc) so as to keep TLS code out of tcp.py
> entirely.
> 

The branch/function call can be avoided by replacing the doRead/doWrite/etc
methods in startTLS.  While this is still not very perty ;)

Example:

<CUT LOTS OF CODE>

    def startTLS(self, ctx):
        if not SSL:
            raise RuntimeException, "No SSL support available"
        assert not self.TLS

        self._startTLS()
        self.socket = SSL.Connection(ctx.getContext(), self.socket)

    def _startTLS(self):
        self.TLS = 1
        self.fileno = self.socket.fileno
        self.doRead = self._TLS_doRead
        self.doWrite = self._TLS_doWrite
        self._closeSocket = self._TLS_closeSocket

    def doRead(self):
        try:
            data = self.socket.recv(self.bufferSize)
        except socket.error, se:
            if se.args[0] == EWOULDBLOCK:
                return
            else:
                return main.CONNECTION_LOST
        if not data:
            return main.CONNECTION_LOST
        return self.protocol.dataReceived(data)
    
    def _TLS_doRead(self):
        if self.writeBlockedOnRead:
            self.writeBlockedOnRead = 0
            return self.doWrite()
        try:
            return self._NOTLS_doRead()
        except SSL.ZeroReturnError:
            # close SSL layer, since other side has done so, if we haven't
            if not self.sslShutdown:
                try:
                    self.socket.shutdown()
                    self.sslShutdown = 1
                except SSL.Error:
                    pass
            return main.CONNECTION_DONE
        except SSL.WantReadError:
            return
        except SSL.WantWriteError:
            self.readBlockedOnWrite = 1
            self.startWriting()
            return
        except SSL.Error:
            return main.CONNECTION_LOST

<CUT LOTS MORE CODE>


Jeremy



From itamar at itamarst.org  Fri May  2 13:54:52 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 2 May 2003 13:54:52 -0400
Subject: [Twisted-Python] adbapi question
In-Reply-To: <1051886018.8932.4.camel@qutang.gnubian.org>
References: <200304302328.31599.jon@totient.demon.co.uk>
	<1051752541.32738.206.camel@samadhi>
	<20030430213930.542c81d9.itamar@itamarst.org>
	<1051886018.8932.4.camel@qutang.gnubian.org>
Message-ID: <20030502135452.326bab52.itamar@itamarst.org>

On 02 May 2003 09:33:38 -0500
Justin Ryan <justin at gnubia.net> wrote:

> Well, I think it was a misconception on my part.. It does seem as if
> the reactor is not _designed_ to be used in short 'scripts' like this
> one, but I wasn't aware you could call reactor.stop().

Not true. All of the examples in doc/examples/ are short scripts.
Apparently you just aren't using it correctly. You just need to
understand how event driven programming works. Once you make that
conceptual leap, it's all pretty trivial.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From justin at gnubia.net  Fri May  2 17:46:29 2003
From: justin at gnubia.net (Justin Ryan)
Date: 02 May 2003 16:46:29 -0500
Subject: [Twisted-Python] website down?
Message-ID: <1051911989.11327.2.camel@qutang.gnubian.org>

Is there a problem with the twistedmatrix.com server?  Port 80 takes
~15-30s to answer, and never responds to a GET / (though my browser did
show a title after several minutes at one point)..

-j




From glyph at twistedmatrix.com  Fri May  2 18:31:12 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 2 May 2003 17:31:12 -0500
Subject: [Twisted-Python] Updated TLS patch
In-Reply-To: <20030502123028.GM37090@shitbomb.com>
Message-ID: <C78D8919-7CED-11D7-B27C-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Ugly as it is, this looks like the right answer to me...

On Friday, May 2, 2003, at 07:30 AM, Skinny Puppy wrote:

> The branch/function call can be avoided by replacing the 
> doRead/doWrite/etc
> methods in startTLS.  While this is still not very perty ;)
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+svG0vVGR4uSOE2wRAqo+AJ40/0hBnDnEh1267vYe7hAJV0TEUwCeNklv
Qya3OyfpjxoexyNSb3iLPqc=
=24qI
-----END PGP SIGNATURE-----




From ecn at metaslash.com  Fri May  2 19:06:58 2003
From: ecn at metaslash.com (Eric C. Newton)
Date: Fri, 2 May 2003 19:06:58 -0400
Subject: [Twisted-Python] ReconnectingClientFactory.stopTrying
Message-ID: <20030502230658.GA21030@localhost.localdomain>

RedHat 9.0
Twisted 1.0.4

I have two servers, A and B, connected over a network which may, or
may not be working well.  Server A wants to send a bunch of data over
to Server B.  I'm using ReconnectingClientFactory to get A connected
to B even in the presence of failures.

Once Server A dumps the data on B, it should disconnect and go back to
doing it's (unrelated) work, and close the connection on B.

ReconnectingClientFactory has "stopTrying" which I call to prevent
future connections from being made.  Then I close the current
connection.  Unfortunately that tells the ReconnectingClientFactory
that it should reconnect, even though it should have stopped trying.
Shortly thereafter I get a stack trace.  Reversing the
order... loseConnection, stopTrying, doesn't work either.

Test code below will give a stack trace after a few seconds of
running.

My (present) workaround is to close the connection, and tell the
ReconnectingClientFactory to stopTrying with:

	reactor.callLater(0.1, self.factory.stopTrying)

It works, but the 0.1 is a kludge to allow connection clean-up to
finish, but timed to go off before the Connector starts a new attempt.
Yuck.

-Eric
#
from twisted.internet import reactor
from twisted.internet.protocol import Factory, ReconnectingClientFactory
from twisted.protocols.basic import Int16StringReceiver
import pickle

class In(Int16StringReceiver):

    def __init__(self):
        self.msgs = {}
    
    def stringReceived(self, msg):
        n, msg = pickle.loads(msg)
        self.msgs[n] = msg
        self.sendString(pickle.dumps(n))

    def connectionLost(self, reason):
        print self.msgs.values()

class Out(Int16StringReceiver):

    def __init__(self):
        self.msgs = {}

    def connectionMade(self):
        for i in range(10):
            self.msgs[i] = 'X' * i
        for i in self.msgs.keys():
            self.sendString(pickle.dumps( (i, self.msgs[i])))
    
    def stringReceived(self, msg):
        n = pickle.loads(msg)
        del self.msgs[n]
        if not self.msgs:
            self.transport.loseConnection()
            self.factory.stopTrying()

f = Factory()
f.protocol = In

c = ReconnectingClientFactory()
c.protocol = Out

PORT=9000
reactor.connectTCP('localhost', PORT, c)
reactor.listenTCP(PORT, f)
reactor.run()



From exarkun at intarweb.us  Sat May  3 02:16:09 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Sat, 3 May 2003 02:16:09 -0400
Subject: [Twisted-Python] ReconnectingClientFactory.stopTrying
In-Reply-To: <20030502230658.GA21030@localhost.localdomain>
References: <20030502230658.GA21030@localhost.localdomain>
Message-ID: <20030503061609.GA5437@meson.dyndns.org>

On Fri, May 02, 2003 at 07:06:58PM -0400, Eric C. Newton wrote:
> RedHat 9.0
> Twisted 1.0.4

  Thanks for including this info.

> 
> [snip]
> 
> My (present) workaround is to close the connection, and tell the
> ReconnectingClientFactory to stopTrying with:
> 
> 	reactor.callLater(0.1, self.factory.stopTrying)
> 
> It works, but the 0.1 is a kludge to allow connection clean-up to
> finish, but timed to go off before the Connector starts a new attempt.
> Yuck.

  Fixed in CVS.  I also turned your demonstration into a test case and added
it as well, as I don't expect you'll have any issue with the legalities
(Grant glyph a non-exclusive copyright to the code - see doc/legal/ for the
details).  Please confirm this, so I don't have to back out
test_factories.py and write a new one :)

  And thanks for the bug report!

  Jp

-- 
#!/bin/bash
( LIST=(~/.sigs/*.sig)
  cat ${LIST[$(($RANDOM % ${#LIST[*]}))]}
  echo -- $'\n' `uptime | sed -e 's/.*m//'` ) > ~/.signature
-- 
 up 1 day, 4:38, 5 users, load average: 0.09, 0.06, 0.01
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030503/65631519/attachment.pgp 

From skin_pup-twisted at damnable.happypoo.com  Fri May  2 23:02:26 2003
From: skin_pup-twisted at damnable.happypoo.com (Skinny Puppy)
Date: Fri, 2 May 2003 23:02:26 -0400
Subject: [Twisted-Python] Updated TLS patch
In-Reply-To: <C78D8919-7CED-11D7-B27C-000393C9700E@twistedmatrix.com>
References: <20030502123028.GM37090@shitbomb.com> <C78D8919-7CED-11D7-B27C-000393C9700E@twistedmatrix.com>
Message-ID: <20030503030226.GQ37090@shitbomb.com>

Glyph Lefkowitz [glyph at twistedmatrix.com] wrote:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
> 
> Ugly as it is, this looks like the right answer to me...
> 
> On Friday, May 2, 2003, at 07:30 AM, Skinny Puppy wrote:
> 
> >The branch/function call can be avoided by replacing the 
> >doRead/doWrite/etc
> >methods in startTLS.  While this is still not very perty ;)
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.2.1 (Darwin)
> 
> iD8DBQE+svG0vVGR4uSOE2wRAqo+AJ40/0hBnDnEh1267vYe7hAJV0TEUwCeNklv
> Qya3OyfpjxoexyNSb3iLPqc=
> =24qI
> -----END PGP SIGNATURE-----

Ok - Done - I still don't like it.  I have not run any real world tests
yet, but I have used echoserv_tls.py/echoclient_tls.py and watched the
traffic with tcpdump to verify the encryption.  And of course the Unit
Tests.  

Jeremy 
-------------- next part --------------
? doc/examples/echoclient_tls.py
? doc/examples/echoserv_tls.py
Index: twisted/internet/ssl.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/ssl.py,v
retrieving revision 1.40
diff -u -r1.40 ssl.py
--- twisted/internet/ssl.py	2 Apr 2003 04:11:32 -0000	1.40
+++ twisted/internet/ssl.py	3 May 2003 06:28:42 -0000
@@ -95,116 +95,13 @@
         return SSL.Context(SSL.SSLv3_METHOD)
 
 
-class Connection(tcp.Connection):
-    """I am an SSL connection.
-    """
-
-    __implements__ = tcp.Connection.__implements__, interfaces.ISSLTransport
-    
-    writeBlockedOnRead = 0
-    readBlockedOnWrite= 0
-    sslShutdown = 0
-    
-    def getPeerCertificate(self):
-        """Return the certificate for the peer."""
-        return self.socket.get_peer_certificate()
-
-    def _postLoseConnection(self):
-        """Gets called after loseConnection(), after buffered data is sent.
-
-        We close the SSL transport layer, and if the other side hasn't
-        closed it yet we start reading, waiting for a ZeroReturnError
-        which will indicate the SSL shutdown has completed.
-        """
-        try:
-            done = self.socket.shutdown()
-            self.sslShutdown = 1
-        except SSL.Error:
-            return main.CONNECTION_LOST
-        if done:
-            return main.CONNECTION_DONE
-        else:
-            # we wait for other side to close SSL connection -
-            # this will be signaled by SSL.ZeroReturnError when reading
-            # from the socket
-            self.stopWriting()
-            self.startReading()
-            return None # don't close socket just yet
-    
-    def doRead(self):
-        """See tcp.Connection.doRead for details.
-        """
-        if self.writeBlockedOnRead:
-            self.writeBlockedOnRead = 0
-            return self.doWrite()
-        try:
-            return tcp.Connection.doRead(self)
-        except SSL.ZeroReturnError:
-            # close SSL layer, since other side has done so, if we haven't
-            if not self.sslShutdown:
-                try:
-                    self.socket.shutdown()
-                    self.sslShutdown = 1
-                except SSL.Error:
-                    pass
-            return main.CONNECTION_DONE
-        except SSL.WantReadError:
-            return
-        except SSL.WantWriteError:
-            self.readBlockedOnWrite = 1
-            self.startWriting()
-            return
-        except SSL.Error:
-            return main.CONNECTION_LOST
-
-    def doWrite(self):
-        if self.readBlockedOnWrite:
-            self.readBlockedOnWrite = 0
-            if not self.dataBuffer: self.stopWriting()
-            return self.doRead()
-        return tcp.Connection.doWrite(self)
-    
-    def writeSomeData(self, data):
-        """See tcp.Connection.writeSomeData for details.
-        """
-        if not data:
-            return 0
-
-        try:
-            return tcp.Connection.writeSomeData(self, data)
-        except SSL.WantWriteError:
-            return 0
-        except SSL.WantReadError:
-            self.writeBlockedOnRead = 1
-            return 0
-        except SSL.Error:
-            return main.CONNECTION_LOST
-
-    def _closeSocket(self):
-        """Called to close our socket."""
-        try:
-            self.socket.sock_shutdown(2)
-        except socket.error:
-            try:
-                self.socket.close()
-            except socket.error:
-                log.deferr()
-
-
-
-class Client(Connection, tcp.Client):
+class Client(tcp.Client):
     """I am an SSL client."""
     def __init__(self, host, port, bindAddress, ctxFactory, connector, reactor=None):
         # tcp.Client.__init__ depends on self.ctxFactory being set
         self.ctxFactory = ctxFactory
         tcp.Client.__init__(self, host, port, bindAddress, connector, reactor)
 
-    def createInternetSocket(self):
-        """(internal) create an SSL socket
-        """
-        sock = tcp.Client.createInternetSocket(self)
-        return SSL.Connection(self.ctxFactory.getContext(), sock)
-
     def getHost(self):
         """Returns a tuple of ('SSL', hostname, port).
 
@@ -219,16 +116,14 @@
         """
         return ('SSL',)+self.addr
 
+    def _finishInit(self, whenDone, skt, error, reactor):
+        tcp.Client._finishInit(self, whenDone, skt, error, reactor)
+        self.startTLS(self.ctxFactory)
 
 
-class Server(Connection, tcp.Server):
+class Server(tcp.Server):
     """I am an SSL server.
     """
-    
-    def __init__(*args, **kw):
-        # We don't want Connection's __init__
-        tcp.Server.__init__(*args, **kw)
-    
     def getHost(self):
         """Returns a tuple of ('SSL', hostname, port).
 
@@ -257,33 +152,12 @@
         """
         sock = tcp.Port.createInternetSocket(self)
         return SSL.Connection(self.ctxFactory.getContext(), sock)
-    
-    def doRead(self):
-        """Called when my socket is ready for reading.
 
-        This accepts a connection and calls self.protocol() to handle the
-        wire-level protocol.
-        """
-        try:
-            try:
-                skt, addr = self.socket.accept()
-            except socket.error, e:
-                if e.args[0] == tcp.EWOULDBLOCK:
-                    return
-                raise
-            except SSL.Error:
-                log.deferr()
-                return
-            protocol = self.factory.buildProtocol(addr)
-            if protocol is None:
-                skt.close()
-                return
-            s = self.sessionno
-            self.sessionno = s+1
-            transport = self.transport(skt, protocol, addr, self, s)
-            protocol.makeConnection(transport)
-        except:
-            log.deferr()
+    def _preMakeConnection(self, transport):
+        # *Don't* call startTLS here
+        # The transport already has the SSL.Connection object from above
+        transport._startTLS()
+        return tcp.Port._preMakeConnection(self, transport)
 
 
 class Connector(base.BaseConnector):
Index: twisted/internet/tcp.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/tcp.py,v
retrieving revision 1.118
diff -u -r1.118 tcp.py
--- twisted/internet/tcp.py	2 May 2003 04:31:14 -0000	1.118
+++ twisted/internet/tcp.py	3 May 2003 06:28:50 -0000
@@ -39,6 +39,11 @@
 except ImportError:
     fcntl = None
 
+try:
+    from OpenSSL import SSL
+except ImportError:
+    SSL = None
+
 if os.name == 'nt':
     # we hardcode these since windows actually wants e.g.
     # WSAEALREADY rather than EALREADY. Possibly we should
@@ -88,14 +93,36 @@
 
     __implements__ = abstract.FileDescriptor.__implements__, interfaces.ITCPTransport
 
+    if SSL:
+        writeBlockedOnRead = 0
+        readBlockedOnWrite= 0
+        sslShutdown = 0
+        TLS = 0
+
     def __init__(self, skt, protocol, reactor=None):
         abstract.FileDescriptor.__init__(self, reactor=reactor)
         self.socket = skt
         self.socket.setblocking(0)
         self.fileno = skt.fileno
         self.protocol = protocol
+        
+    def startTLS(self, ctx):
+        if not SSL:
+            raise RuntimeException, "No SSL support available"
+        assert not self.TLS
 
-    def doRead(self):
+        self._startTLS()
+        self.socket = SSL.Connection(ctx.getContext(), self.socket)
+        self.fileno = self.socket.fileno
+    
+    def _startTLS(self):
+        self.TLS = 1
+        self.doRead = self._TLS_doRead
+        self.writeSomeData = self._TLS_writeSomeData
+        self.doWrite = self._TLS_doWrite
+        self._closeSocket = self._TLS_closeSocket
+
+    def _NOTLS_doRead(self):
         """Calls self.protocol.dataReceived with all available data.
 
         This reads up to self.bufferSize bytes of data from its socket, then
@@ -114,7 +141,42 @@
             return main.CONNECTION_LOST
         return self.protocol.dataReceived(data)
 
-    def writeSomeData(self, data):
+    doRead = _NOTLS_doRead
+    
+    def _TLS_doRead(self):
+        if self.writeBlockedOnRead:
+            self.writeBlockedOnRead = 0
+            return self.doWrite()
+        try:
+            return self._NOTLS_doRead()
+        except SSL.ZeroReturnError:
+            # close SSL layer, since other side has done so, if we haven't
+            if not self.sslShutdown:
+                try:
+                    self.socket.shutdown()
+                    self.sslShutdown = 1
+                except SSL.Error:
+                    pass
+            return main.CONNECTION_DONE
+        except SSL.WantReadError:
+            return
+        except SSL.WantWriteError:
+            self.readBlockedOnWrite = 1
+            self.startWriting()
+            return
+        except SSL.Error:
+            return main.CONNECTION_LOST
+
+    def _TLS_doWrite(self):
+        if self.readBlockedOnWrite:
+            self.readBlockedOnWrite = 0
+            # XXX - This is touching internal guts bad bad bad
+            if not self.dataBuffer:
+                self.stopWriting()
+            return self.doRead()
+        return abstract.FileDescriptor.doWrite(self)
+
+    def _NOTLS_writeSomeData(self, data):
         """Connection.writeSomeData(data) -> #of bytes written | CONNECTION_LOST
         This writes as much data as possible to the socket and returns either
         the number of bytes read (which is positive) or a connection error code
@@ -128,7 +190,21 @@
             else:
                 return main.CONNECTION_LOST
 
-    def _closeSocket(self):
+    writeSomeData = _NOTLS_writeSomeData
+
+    def _TLS_writeSomeData(self, data):
+        if not data:
+            return 0
+        try:
+            return self._NOTLS_writeSomeData(data)
+        except SSL.WantWriteError:
+            return 0
+        except SSL.WantReadError:
+            self.writeBlockedOnRead = 1
+        except SSL.Error:
+            return main.CONNECTION_LOST
+
+    def _NOTLS_closeSocket(self):
         """Called to close our socket."""
         # This used to close() the socket, but that doesn't *really* close if
         # there's another reference to it in the TCP/IP stack, e.g. if it was
@@ -139,6 +215,17 @@
         except socket.error:
             pass
 
+    _closeSocket = _NOTLS_closeSocket
+
+    def _TLS_closeSocket(self):
+        try:
+            self.socket.sock_shutdown(2)
+        except:
+            try:
+                self.socket.close()
+            except:
+                pass
+
     def connectionLost(self, reason):
         """See abstract.FileDescriptor.connectionLost().
         """
@@ -173,6 +260,33 @@
 
     def setTcpNoDelay(self, enabled):
         self.socket.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, enabled)
+    
+    def _postLoseConnection(self):
+        """Gets called after loseConnection(), after buffered data is sent.
+
+        We close the SSL transport layer, and if the other side hasn't
+        closed it yet we start reading, waiting for a ZeroReturnError
+        which will indicate the SSL shutdown has completed.
+        """
+        if not self.TLS:
+            return abstract.FileDescriptor._postLoseConnection(self)
+
+        try:
+            done = self.socket.shutdown()
+            self.sslShutdown = 1
+        except SSL.Error:
+            return main.CONNECTION_LOST
+        if done:
+            return main.CONNECTION_DONE
+        else:
+            # we wait for other side to close SSL connection -
+            # this will be signaled by SSL.ZeroReturnError when reading
+            # from the socket
+            self.stopWriting()
+            self.startReading()
+            
+            # don't close socket just yet
+            return None
 
 
 class BaseClient(Connection):
@@ -191,6 +305,11 @@
         else:
             reactor.callLater(0, self.failIfNotConnected, error)
 
+    def startTLS(self, ctx):
+        holder = Connection.startTLS(self, ctx)
+        self.socket.set_connect_state()
+        return holder
+
     def stopConnecting(self):
         """Stop attempt to connect."""
         self.failIfNotConnected(error.UserError())
@@ -360,6 +479,11 @@
         """
         return self.repstr
 
+    def startTLS(self, ctx):
+        holder = Connection.startTLS(self, ctx)
+        self.socket.set_accept_state()
+        return holder
+
     def getHost(self):
         """Returns a tuple of ('INET', hostname, port).
 
@@ -458,6 +582,7 @@
                     elif e.args[0] == EPERM:
                         continue
                     raise
+                
                 protocol = self.factory.buildProtocol(addr)
                 if protocol is None:
                     skt.close()
@@ -465,11 +590,22 @@
                 s = self.sessionno
                 self.sessionno = s+1
                 transport = self.transport(skt, protocol, addr, self, s)
+                transport = self._preMakeConnection(transport)
                 protocol.makeConnection(transport)
             else:
                 self.numberAccepts = self.numberAccepts+20
         except:
+            # Note that in TLS mode, this will possibly catch SSL.Errors
+            # raised by self.socket.accept()
+            #
+            # There is no "except SSL.Error:" above because SSL may be
+            # None if there is no SSL support.  In any case, all the
+            # "except SSL.Error:" suite would probably do is log.deferr()
+            # and return, so handling it here works just as well.
             log.deferr()
+    
+    def _preMakeConnection(self, transport):
+        return transport
 
     def loseConnection(self, connDone=failure.Failure(main.CONNECTION_DONE)):
         """Stop accepting connections on this port.
Index: twisted/test/test_ssl.py
===================================================================
RCS file: /cvs/Twisted/twisted/test/test_ssl.py,v
retrieving revision 1.9
diff -u -r1.9 test_ssl.py
--- twisted/test/test_ssl.py	3 May 2003 02:03:54 -0000	1.9
+++ twisted/test/test_ssl.py	3 May 2003 06:28:55 -0000
@@ -17,19 +17,23 @@
 from __future__ import nested_scopes
 from twisted.trial import unittest
 from twisted.internet import protocol, reactor
+from twisted.protocols import basic
+
 try:
-    import OpenSSL
+    from OpenSSL import SSL
     from twisted.internet import ssl
 except ImportError:
-    OpenSSL = None
+    SSL = None
+
 import os
 import test_tcp
 
 
+certPath = os.path.join(os.path.split(test_tcp.__file__)[0], "server.pem")
+
 class StolenTCPTestCase(test_tcp.ProperlyCloseFilesTestCase, test_tcp.WriteDataTestCase):
     
     def setUp(self):
-        certPath = os.path.join(os.path.split(test_tcp.__file__)[0], "server.pem")
         f = protocol.ServerFactory()
         f.protocol = protocol.Protocol
         self.listener = reactor.listenSSL(
@@ -49,5 +53,117 @@
 
         self.totalConnections = 0
 
-if not OpenSSL:
-    del StolenTCPTestCase
+class ClientTLSContext(ssl.ClientContextFactory):
+    isClient = 1
+    def getContext(self):
+        return SSL.Context(ssl.SSL.TLSv1_METHOD)
+
+class UnintelligentProtocol(basic.LineReceiver):
+    pretext = [
+        "first line",
+        "last thing before tls starts",
+        "STARTTLS",
+    ]
+    
+    posttext = [
+        "first thing after tls started",
+        "last thing ever",
+    ]
+    
+    def connectionMade(self):
+        for l in self.pretext:
+            self.sendLine(l)
+
+    def lineReceived(self, line):
+        if line == "READY":
+            self.transport.startTLS(ClientTLSContext())
+            for l in self.posttext:
+                self.sendLine(l)
+            self.transport.loseConnection()
+        
+class ServerTLSContext(ssl.DefaultOpenSSLContextFactory):
+    isClient = 0
+    def __init__(self, *args, **kw):
+        kw['sslmethod'] = SSL.TLSv1_METHOD
+        ssl.DefaultOpenSSLContextFactory.__init__(self, *args, **kw)
+
+class LineCollector(basic.LineReceiver):
+    def __init__(self, doTLS):
+        self.doTLS = doTLS
+
+    def connectionMade(self):
+        self.factory.rawdata = ''
+        self.factory.lines = []
+
+    def lineReceived(self, line):
+        self.factory.lines.append(line)
+        if line == 'STARTTLS':
+            self.sendLine('READY')
+            if self.doTLS:
+                ctx = ServerTLSContext(
+                    privateKeyFileName=certPath,
+                    certificateFileName=certPath,
+                )
+                self.transport.startTLS(ctx)
+            else:
+                self.setRawMode()
+    
+    def rawDataReceived(self, data):
+        self.factory.rawdata += data
+        self.factory.done = 1
+    
+    def connectionLost(self, reason):
+        self.factory.done = 1
+
+class TLSTestCase(unittest.TestCase):
+    def testTLS(self):
+        cf = protocol.ClientFactory()
+        cf.protocol = UnintelligentProtocol
+        
+        sf = protocol.ServerFactory()
+        sf.protocol = lambda: LineCollector(1)
+        sf.done = 0
+
+        port = reactor.listenTCP(0, sf)
+        portNo = port.getHost()[2]
+        
+        reactor.connectTCP('0.0.0.0', portNo, cf)
+        
+        i = 0
+        while i < 5000 and not sf.done:
+            reactor.iterate(0.01)
+            i += 1
+        
+        self.failUnless(sf.done, "Never finished reading all lines")
+        self.assertEquals(
+            sf.lines,
+            UnintelligentProtocol.pretext + UnintelligentProtocol.posttext
+        )
+    
+    def testUnTLS(self):
+        cf = protocol.ClientFactory()
+        cf.protocol = UnintelligentProtocol
+        
+        sf = protocol.ServerFactory()
+        sf.protocol = lambda: LineCollector(0)
+        sf.done = 0
+
+        port = reactor.listenTCP(0, sf)
+        portNo = port.getHost()[2]
+        
+        reactor.connectTCP('0.0.0.0', portNo, cf)
+        
+        i = 0
+        while i < 5000 and not sf.done:
+            reactor.iterate(0.01)
+            i += 1
+        
+        self.failUnless(sf.done, "Never finished reading all lines")
+        self.assertEquals(
+            sf.lines,
+            UnintelligentProtocol.pretext
+        )
+        self.failUnless(sf.rawdata, "No encrypted bytes received")
+        
+if not SSL:
+    globals().clear()

From ecn at metaslash.com  Sat May  3 06:56:38 2003
From: ecn at metaslash.com (Eric C. Newton)
Date: Sat, 3 May 2003 06:56:38 -0400
Subject: [Twisted-Python] ReconnectingClientFactory.stopTrying
In-Reply-To: <20030503061609.GA5437@meson.dyndns.org>
References: <20030502230658.GA21030@localhost.localdomain> <20030503061609.GA5437@meson.dyndns.org>
Message-ID: <20030503105638.GB22804@localhost.localdomain>

> I also turned your demonstration into a test case and added it as
> well, as I don't expect you'll have any issue with the legalities

No problem at all.

>   And thanks for the bug report!

Thanks for fixing.

-Eric



From m at moshez.org  Sun May  4 02:17:16 2003
From: m at moshez.org (Moshe Zadka)
Date: 4 May 2003 06:17:16 -0000
Subject: [Twisted-Python] Woven Warning -- A Fix
Message-ID: <20030504061716.17387.qmail@green.zadka.com>

The followning patch fixes the remaining warning in woven, but it
is somewhat ugly.

Any comments?

--- twisted/web/woven/template.py       28 Apr 2003 03:53:28 -0000      1.37
+++ twisted/web/woven/template.py       4 May 2003 06:12:13 -0000
@@ -123,6 +123,7 @@
             parent = node.parentNode
             if parent:
                 parent.replaceChild(self.data, node)
+                node.parentNode = parent
             else:
                 warnings.warn("Warning: There was no parent for node %s; node not mutated." % node)
         return self.data

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From dp at twistedmatrix.com  Sun May  4 05:07:59 2003
From: dp at twistedmatrix.com (Donovan Preston)
Date: Sun, 4 May 2003 02:07:59 -0700
Subject: [Twisted-Python] Woven Warning -- A Fix
In-Reply-To: <20030504061716.17387.qmail@green.zadka.com>
Message-ID: <E6FBA970-7E0F-11D7-A15B-00039376B1AE@twistedmatrix.com>

On Saturday, May 3, 2003, at 11:17 PM, Moshe Zadka wrote:

> The followning patch fixes the remaining warning in woven, but it
> is somewhat ugly.
>
> Any comments?

Thanks Moshe for bringing this up. Since this is a potentially useful 
message, but is possible to trigger in a situation where the code is 
correct, I'll change it to a log.msg instead of log.warn, rather than 
trying to make that branch of the code go away entirely.

Donovan




From m at moshez.org  Sun May  4 05:49:55 2003
From: m at moshez.org (Moshe Zadka)
Date: 4 May 2003 09:49:55 -0000
Subject: [Twisted-Python] Apply Deprecation
Message-ID: <20030504094955.23710.qmail@green.zadka.com>

I've run a quick grep over the unittest log, and saw that an overwhelming
majority of the errors come from relatively few places, namely:

    104 twisted/test/test_internet.py:502
     38 twisted/python/failure.py:230
     31 twisted/enterprise/xmlreflector.py:94
     24 twisted/spread/util.py:80
     24 twisted/spread/util.py:76

These are five lines which, if properly fixed, would make the tests
more readable.

I realize there are good reasons for *not* stomping over the tree, randomly
changing stuff, and I'm not suggesting it. I'm suggesting changing five
lines.

Thanks,
Moshe

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From m at moshez.org  Sun May  4 06:33:02 2003
From: m at moshez.org (Moshe Zadka)
Date: 4 May 2003 10:33:02 -0000
Subject: [Twisted-Python] Apply Deprecation
In-Reply-To: <20030504094955.23710.qmail@green.zadka.com>
References: <20030504094955.23710.qmail@green.zadka.com>
Message-ID: <20030504103302.24296.qmail@green.zadka.com>

On 4 May 2003, Moshe Zadka <m at moshez.org> wrote:

> I've run a quick grep over the unittest log, and saw that an overwhelming
> majority of the errors come from relatively few places, namely:
> 
>     104 twisted/test/test_internet.py:502
>      38 twisted/python/failure.py:230
>      31 twisted/enterprise/xmlreflector.py:94
>      24 twisted/spread/util.py:80
>      24 twisted/spread/util.py:76
> 
> These are five lines which, if properly fixed, would make the tests
> more readable.
> 
> I realize there are good reasons for *not* stomping over the tree, randomly
> changing stuff, and I'm not suggesting it. I'm suggesting changing five
> lines.

Following up on myself, here is a patch:

Index: twisted/test/test_internet.py
===================================================================
RCS file: /cvs/Twisted/twisted/test/test_internet.py,v
retrieving revision 1.25
diff -u -r1.25 test_internet.py
--- twisted/test/test_internet.py	12 Apr 2003 20:16:35 -0000	1.25
+++ twisted/test/test_internet.py	4 May 2003 10:29:45 -0000
@@ -499,7 +499,7 @@
 
     def schedule(self, *args, **kwargs):
         """Override in subclasses."""
-        apply(reactor.callFromThread, args, kwargs)
+        reactor.callFromThread(*args, **kwargs)
 
     def testScheduling(self):
         c = Counter()
Index: twisted/python/failure.py
===================================================================
RCS file: /cvs/Twisted/twisted/python/failure.py,v
retrieving revision 1.31
diff -u -r1.31 failure.py
--- twisted/python/failure.py	3 May 2003 04:23:15 -0000	1.31
+++ twisted/python/failure.py	4 May 2003 10:29:45 -0000
@@ -227,7 +227,7 @@
 
         @type errorTypes: L{Exception}
         """
-        error = apply(self.check, errorTypes)
+        error = self.check(*errorTypes)
         if not error:
             raise self
         return error
Index: twisted/enterprise/xmlreflector.py
===================================================================
RCS file: /cvs/Twisted/twisted/enterprise/xmlreflector.py,v
retrieving revision 1.12
diff -u -r1.12 xmlreflector.py
--- twisted/enterprise/xmlreflector.py	12 Jan 2003 06:26:48 -0000	1.12
+++ twisted/enterprise/xmlreflector.py	4 May 2003 10:29:45 -0000
@@ -91,7 +91,8 @@
             # find the row in the cache or add it
             resultObject = self.findInCache(tableInfo.rowClass, proxy.kw)
             if not resultObject:
-                resultObject = apply(tableInfo.rowFactoryMethod[0], (tableInfo.rowClass, data, proxy.kw) )
+                resultObject = tableInfo.rowFactoryMethod[0](
+                                       tableInfo.rowClass, data, proxy.kw)
                 self.addToCache(resultObject)
                 newRows.append(resultObject)
             results.append(resultObject)
Index: twisted/spread/util.py
===================================================================
RCS file: /cvs/Twisted/twisted/spread/util.py,v
retrieving revision 1.8
diff -u -r1.8 util.py
--- twisted/spread/util.py	27 Aug 2002 19:57:57 -0000	1.8
+++ twisted/spread/util.py	4 May 2003 10:29:45 -0000
@@ -73,11 +73,11 @@
         self.failWhenNotImplemented = failWhenNotImplemented
 
     def _callMethod(self, method, *args, **kw):
-        return apply(getattr(self.forwarded, method), args, kw)
+        return getattr(self.forwarded, method)(*args, **kw)
 
     def callRemote(self, method, *args, **kw):
         if hasattr(self.interfaceClass, method):
-            result = apply(defer.execute, (self._callMethod,method)+args, kw)
+            result = defer.execute(self._callMethod, method, *args, **kw)
             return result
         elif self.failWhenNotImplemented:
             return defer.fail(

Please look through it to see if there are any glaring mistake.
Naturally, I *have* run the unit tests.

Thanks,
Moshe
-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From m at moshez.org  Sun May  4 07:08:00 2003
From: m at moshez.org (Moshe Zadka)
Date: 4 May 2003 11:08:00 -0000
Subject: [Twisted-Python] Apply Deprecation
In-Reply-To: <20030504103302.24296.qmail@green.zadka.com>
References: <20030504103302.24296.qmail@green.zadka.com>, <20030504094955.23710.qmail@green.zadka.com>
Message-ID: <20030504110800.24667.qmail@green.zadka.com>

On 4 May 2003, Moshe Zadka <m at moshez.org> wrote:

> Following up on myself, here is a patch:
<snip>

After consulting with Andrew, we decided it should be checked in,
and it has.

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From lstep at adequat.net  Sun May  4 17:42:25 2003
From: lstep at adequat.net (Luc Stepniewski)
Date: Sun, 04 May 2003 23:42:25 +0200
Subject: [Twisted-Python] Missing files from installation of woven part
Message-ID: <3EB58941.6090309@adequat.net>

When you do a python setup.py build/install, important files from 
t.web.woven are missing. The LivePage related files FlashConduit.fla,
FlashConduit.swf, FlashConduitGlue.html, WebConduit2_mozilla.js, 
WebConduit2_msie.js and WebConduitGlue.html are not copied, so LivePage 
does not work at all without them :'-(

Could anyone modify the installation to include these files in the copy?

Thanks,
Luc




From lstep at adequat.net  Sun May  4 17:59:21 2003
From: lstep at adequat.net (Luc Stepniewski)
Date: Sun, 04 May 2003 23:59:21 +0200
Subject: [Twisted-Python] Missing files from installation of woven part
In-Reply-To: <3EB58941.6090309@adequat.net>
References: <3EB58941.6090309@adequat.net>
Message-ID: <3EB58D39.4070102@adequat.net>

Luc Stepniewski wrote:
> When you do a python setup.py build/install, important files from 
> t.web.woven are missing. The LivePage related files FlashConduit.fla,
> FlashConduit.swf, FlashConduitGlue.html, WebConduit2_mozilla.js, 
> WebConduit2_msie.js and WebConduitGlue.html are not copied, so LivePage 
> does not work at all without them :'-(

Well, in fact, this doesn't solve exactly the problem, as twisted tries 
to create a .WebConduitGlue.pxp in 
/usr/lib/python2.2/site-packages/twisted/web/woven/ which is not 
supposed to be accessible for all users.

So maybe one should remove the merge of WOVEN_PATH with the filename in 
controller.py ?

return static.File(os.path.join(WOVEN_PATH, fl))

Or maybe someone has another solution?

Luc




From ecn at metaslash.com  Sun May  4 18:54:40 2003
From: ecn at metaslash.com (Eric C. Newton)
Date: Sun, 4 May 2003 18:54:40 -0400
Subject: [Twisted-Python] examples/echoserv_ssl.py
Message-ID: <20030504225440.GA3840@localhost.localdomain>

Redhat 9.0
Twisted 1.0.4
Python 2.2.2

    $ cd Twisted-1.0.4/doc/examples
    $ python echoserv_ssl.py
    2003/05/04 18:53 [-] Log opened.
    2003/05/04 18:53 [-] Traceback (most recent call last):
    2003/05/04 18:53 [-]   File "echoserv_ssl.py", line 42, in ?
    2003/05/04 18:53 [-]     factory.protocol = echoserv.EchoTCP
    2003/05/04 18:53 [-] AttributeError: 'module' object has no attribute 'EchoTCP'

-Eric




From ecn at metaslash.com  Sun May  4 19:32:58 2003
From: ecn at metaslash.com (Eric C. Newton)
Date: Sun, 4 May 2003 19:32:58 -0400
Subject: [Twisted-Python] examples/echoserv_ssl.py, win32
Message-ID: <20030504233258.GA4608@localhost.localdomain>

Windows ME (yes, Windows ME, the trashy one)
Python 2.2.2
Twisted 1.0.4
pyOpenSSL-0.4.1.win32-py2.2    (from sourceforge)
OpenSSL 0.9.7b

After fixing the reported bug in echoserv_ssl.py, I ran this at a
cygwin prompt:

	$ python echoserv_ssl.py

I tried running echoclient, and I get a dialog box saying:

       Python has caused an error in SSLEAY32.DLL. 
       Python will now close.
       
       If you continue to experience problems,
       try restarting your computer.

After clicking "OK" the echoclient_ssl quits. Alright... I won't do
that.  But I also get a stack trace in the server, which reproduces
the error I get in my actual application.

I don't really want an SSL client, I want an SSL server.  So I point
InternetExplorer to: https://127.0.0.1:8000.  Same stack trace.  Here
it is:

    2003/05/04 19:28 [-] Log opened.
    2003/05/04 19:28 [*echo-ssl*] twisted.internet.protocol.Factory starting on 8000
    2003/05/04 19:28 [*echo-ssl*] Starting factory <twisted.internet.protocol.Factory instance at 0x00B56B40>
    2003/05/04 19:29 [twisted.internet.protocol.Factory] Traceback (most recent call last):
    2003/05/04 19:29 [twisted.internet.protocol.Factory]   File "C:\PYTHON22\lib\site-packages\twisted\internet\app.py", line 869, in run
    2003/05/04 19:29 [twisted.internet.protocol.Factory]     reactor.run(installSignalHandlers=installSignalHandlers)
    2003/05/04 19:29 [twisted.internet.protocol.Factory]   File "C:\PYTHON22\lib\site-packages\twisted\internet\default.py", line 123, in run
    2003/05/04 19:29 [twisted.internet.protocol.Factory]     self.mainLoop()
    2003/05/04 19:29 [twisted.internet.protocol.Factory]   File "C:\PYTHON22\lib\site-packages\twisted\internet\default.py", line 134, in mainLoop
    2003/05/04 19:29 [twisted.internet.protocol.Factory]     self.doIteration(t)
    2003/05/04 19:29 [twisted.internet.protocol.Factory]   File "C:\PYTHON22\lib\site-packages\twisted\internet\default.py", line 469, in doSelect
    2003/05/04 19:29 [twisted.internet.protocol.Factory]     why = getattr(selectable, method)()
    2003/05/04 19:29 [twisted.internet.protocol.Factory] --- <exception caught here> ---
    2003/05/04 19:29 [twisted.internet.protocol.Factory]   File "C:\PYTHON22\lib\site-packages\twisted\internet\ssl.py", line 269, in doRead
    2003/05/04 19:29 [twisted.internet.protocol.Factory]     skt, addr = self.socket.accept()
    2003/05/04 19:29 [twisted.internet.protocol.Factory] SSL.WantReadError: 

-Eric



From exarkun at intarweb.us  Sun May  4 23:00:48 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Sun, 4 May 2003 23:00:48 -0400
Subject: [Twisted-Python] examples/echoserv_ssl.py
In-Reply-To: <20030504225440.GA3840@localhost.localdomain>
References: <20030504225440.GA3840@localhost.localdomain>
Message-ID: <20030505030048.GA13176@meson.dyndns.org>

On Sun, May 04, 2003 at 06:54:40PM -0400, Eric C. Newton wrote:
> Redhat 9.0
> Twisted 1.0.4
> Python 2.2.2
> 
>     $ cd Twisted-1.0.4/doc/examples
>     $ python echoserv_ssl.py
>     2003/05/04 18:53 [-] Log opened.
>     2003/05/04 18:53 [-] Traceback (most recent call last):
>     2003/05/04 18:53 [-]   File "echoserv_ssl.py", line 42, in ?
>     2003/05/04 18:53 [-]     factory.protocol = echoserv.EchoTCP
>     2003/05/04 18:53 [-] AttributeError: 'module' object has no attribute 'EchoTCP'
> 

  Already fixed in CVS, thanks.

  Jp

-- 
"Minerals are inexhaustible and will never be depleted. A stream of
investment creates additions to proved reserves, a very large in-ground
inventory, constantly renewed as it is extracted... How much was in the
ground at the start and how much will be left at the end are unknown and
irrelevant."  -- Morry Adelman, World Renowned Economist
-- 
 up 3 days, 0:38, 2 users, load average: 0.18, 0.19, 0.13
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030504/4aa174d1/attachment.pgp 

From exarkun at intarweb.us  Sun May  4 23:13:09 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Sun, 4 May 2003 23:13:09 -0400
Subject: [Twisted-Python] examples/echoserv_ssl.py, win32
In-Reply-To: <20030504233258.GA4608@localhost.localdomain>
References: <20030504233258.GA4608@localhost.localdomain>
Message-ID: <20030505031309.GB13176@meson.dyndns.org>

On Sun, May 04, 2003 at 07:32:58PM -0400, Eric C. Newton wrote:
> Windows ME (yes, Windows ME, the trashy one)
> Python 2.2.2
> Twisted 1.0.4
> pyOpenSSL-0.4.1.win32-py2.2    (from sourceforge)
> OpenSSL 0.9.7b

  Current CVS Twisted has extensively refactored SSL support.  

> 
> After fixing the reported bug in echoserv_ssl.py, I ran this at a
> cygwin prompt:
> 
> 	$ python echoserv_ssl.py
> 
> I tried running echoclient, and I get a dialog box saying:
> 
>        Python has caused an error in SSLEAY32.DLL. 
>        Python will now close.
>        
>        If you continue to experience problems,
>        try restarting your computer.
> 
> After clicking "OK" the echoclient_ssl quits. Alright... I won't do
> that.  But I also get a stack trace in the server, which reproduces
> the error I get in my actual application.

  Ouch. :o

> 
> I don't really want an SSL client, I want an SSL server.  So I point
> InternetExplorer to: https://127.0.0.1:8000.  Same stack trace.  Here
> it is:
> 
>     2003/05/04 19:28 [-] Log opened.
>     2003/05/04 19:28 [*echo-ssl*] twisted.internet.protocol.Factory starting on 8000
>     2003/05/04 19:28 [*echo-ssl*] Starting factory <twisted.internet.protocol.Factory instance at 0x00B56B40>
>     2003/05/04 19:29 [twisted.internet.protocol.Factory] Traceback (most recent call last):
>     2003/05/04 19:29 [twisted.internet.protocol.Factory]   File "C:\PYTHON22\lib\site-packages\twisted\internet\app.py", line 869, in run
>     2003/05/04 19:29 [twisted.internet.protocol.Factory]     reactor.run(installSignalHandlers=installSignalHandlers)
>     2003/05/04 19:29 [twisted.internet.protocol.Factory]   File "C:\PYTHON22\lib\site-packages\twisted\internet\default.py", line 123, in run
>     2003/05/04 19:29 [twisted.internet.protocol.Factory]     self.mainLoop()
>     2003/05/04 19:29 [twisted.internet.protocol.Factory]   File "C:\PYTHON22\lib\site-packages\twisted\internet\default.py", line 134, in mainLoop
>     2003/05/04 19:29 [twisted.internet.protocol.Factory]     self.doIteration(t)
>     2003/05/04 19:29 [twisted.internet.protocol.Factory]   File "C:\PYTHON22\lib\site-packages\twisted\internet\default.py", line 469, in doSelect
>     2003/05/04 19:29 [twisted.internet.protocol.Factory]     why = getattr(selectable, method)()
>     2003/05/04 19:29 [twisted.internet.protocol.Factory] --- <exception caught here> ---
>     2003/05/04 19:29 [twisted.internet.protocol.Factory]   File "C:\PYTHON22\lib\site-packages\twisted\internet\ssl.py", line 269, in doRead
>     2003/05/04 19:29 [twisted.internet.protocol.Factory]     skt, addr = self.socket.accept()
>     2003/05/04 19:29 [twisted.internet.protocol.Factory] SSL.WantReadError: 


  Current CVS of Twisted has somewhat dramatically refactored SSL support. 
Would it be possible for you to grab it and see if the same problem occurs?

  Looking at the SSL code for 1.0.4, it seems like the "except SSL.Error:"
around the accept() call should be catching SSL.WantReadError.  Can you
check the output of this?

    from OpenSSL import SSL
    print isinstance(SSL.WantReadError, SSL.Error)

  Jp

-- 
"Minerals are inexhaustible and will never be depleted. A stream of
investment creates additions to proved reserves, a very large in-ground
inventory, constantly renewed as it is extracted... How much was in the
ground at the start and how much will be left at the end are unknown and
irrelevant."  -- Morry Adelman, World Renowned Economist
-- 
 up 3 days, 0:38, 2 users, load average: 0.18, 0.19, 0.13
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030504/4bc3ce2d/attachment.pgp 

From exarkun at intarweb.us  Sun May  4 23:19:28 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Sun, 4 May 2003 23:19:28 -0400
Subject: [Twisted-Python] examples/echoserv_ssl.py, win32
In-Reply-To: <20030505031309.GB13176@meson.dyndns.org>
References: <20030504233258.GA4608@localhost.localdomain> <20030505031309.GB13176@meson.dyndns.org>
Message-ID: <20030505031928.GC13176@meson.dyndns.org>

On Sun, May 04, 2003 at 11:13:09PM -0400, Jp Calderone wrote:
>
> [snip]
>
>     print isinstance(SSL.WantReadError, SSL.Error)

  issubclass(), of course.

>   Jp
> 

-- 
"Minerals are inexhaustible and will never be depleted. A stream of
investment creates additions to proved reserves, a very large in-ground
inventory, constantly renewed as it is extracted... How much was in the
ground at the start and how much will be left at the end are unknown and
irrelevant."  -- Morry Adelman, World Renowned Economist
-- 
 up 3 days, 0:38, 2 users, load average: 0.18, 0.19, 0.13
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030504/da1f88da/attachment.pgp 

From radix at twistedmatrix.com  Mon May  5 00:36:52 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 5 May 2003 00:36:52 -0400
Subject: [Twisted-Python] Fw: [pygame] simple pygame using twisted
In-Reply-To: <BAY2-F78zbUKXTU4eR7000112b1@hotmail.com>; from missive@hotmail.com on Mon, May 05, 2003 at 00:34:30 -0400
References: <BAY2-F78zbUKXTU4eR7000112b1@hotmail.com>
Message-ID: <20030505043652.GK590@toshi.anaprd01.md.comcast.net>

Just got this, haven't had a chance to check it out yet.

On 2003.05.05 00:34, Lee Harr wrote:
> Hi;
> 
> I am making pretty good progress with a simple pygame which
> uses twisted for networking (and also for the main event loop).
> 
> It is part of pygsear:
> 
> http://www.nongnu.org/pygsear/
> http://savannah.nongnu.org/projects/pygsear/
> 
> 
> look in the examples/tanks/  directory.
> 
> There are probably better ways to do this (better designs for
> classes that can be passed or referenced remotely) but I just
> wanted to get something working.  :o)
> 
> Feedback welcome.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From m at moshez.org  Mon May  5 08:28:04 2003
From: m at moshez.org (Moshe Zadka)
Date: 5 May 2003 12:28:04 -0000
Subject: [Twisted-Python] fwd: Re: [Python-Dev] Distutils using apply
Message-ID: <20030505122804.10109.qmail@green.zadka.com>

I suggest building modules with
python2.3 -Wall -Wignore::PendingDeprecationWarning:distutils.command.build_py -Wignore::PendingDeprecationWarning:distutils.command.build_ext setup.py build

(I'm very tame -- only ignoring PendingDeprecations of stuff that's been
marked as non-fixable for Python 2.3). When 2.3 is officially released, we
can add a line number (I don't want to do that before 2.3rc1 is out,
so we won't have to constantly jiggle the number)

Thanks,
Moshe

Forwarded message follows:

To: Oren Tirosh <oren-py-d at hishome.net>
From: Guido van Rossum <guido at python.org>
Cc: Moshe Zadka <m at moshez.org>, python-dev at python.org
Subject: Re: [Python-Dev] Distutils using apply

> I was wondering if a milder form of deprecation may be appropriate for
> some features such as the apply builtin:
> 
> 1. Add a notice in docstring 'not recommended for new code'
> 2. Move to 'obsolete' or 'backward compatibility' section in manual
> 3. Do NOT produce a warning (pychecker may still do that)
> 4. Do NOT plan removal of feature in a specific future release

The form of deprecation used for apply() is already very mild (you
don't get a warning unless you do -Wall).  I don't think Moshe's use
case is important enough to care; if Moshe cares, he can easily
construct a command line argument or warnings.filterwarning() call to
suppress the warnings he doesn't care about.

--Guido van Rossum (home page: http://www.python.org/~guido/)

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From mmoellenbeck at plus.de  Mon May  5 10:26:09 2003
From: mmoellenbeck at plus.de (mmoellenbeck at plus.de)
Date: Mon, 5 May 2003 16:26:09 +0200
Subject: [Twisted-Python] (no subject)
Message-ID: <OFA07C1E97.5A60B49E-ONC1256D1D.004EBE6E@uz.tengelmann.de>

Hello,

I'm new to twisted and have some questions:

- Can I use a pb.Copyable as pb.RemoteReference?

I have designed an wx-application and want request the wxframe from the 
server by the client.
Events from the client should call methods of the server.

Any idees?

Thanks for help.

best regards

Martin Moellenbeck 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20030505/bdac1cea/attachment.htm 

From jheintz at pobox.com  Mon May  5 14:29:30 2003
From: jheintz at pobox.com (John D. Heintz)
Date: 05 May 2003 13:29:30 -0500
Subject: [Twisted-Python] How would I upload/download files through twisted.web
Message-ID: <1052159370.618.13.camel@shire>

Hi all,

I tried searching the mailing list and google but ended up more
confused. Sorry if this is in the docs and I missed it, just redirect
me.

Question: How do I write a simple twisted.web server to receive an
uploaded file, process it, and return a different file for
download/launch.

The last part does have some examples, but I include it hear for
completeness.

My intuition tells me that this kind of thing is "trivial" in twisted,
but I'm having a hard time unraveling the knot. I started working on a
custom Resource but only got so far.

Can someone post a small python script (like web.py in examples) that
does this?

Thanks for the time,
John

-- 
John D. Heintz | Senior Developer

1016 La Posada Dr. | Suite 240 | Austin TX 78752
T 512.380.0347 | jheintz at isogen.com

http://www.isogen.com
-- 
"I apologize for the length of this letter, but I didn't have time to
make it shorter." Mark Twain





From ecn at metaslash.com  Mon May  5 19:53:08 2003
From: ecn at metaslash.com (Eric C. Newton)
Date: Mon, 5 May 2003 19:53:08 -0400
Subject: [Twisted-Python] examples/echoserv_ssl.py, win32
In-Reply-To: <20030505031928.GC13176@meson.dyndns.org>
References: <20030504233258.GA4608@localhost.localdomain> <20030505031309.GB13176@meson.dyndns.org> <20030505031928.GC13176@meson.dyndns.org>
Message-ID: <20030505235308.GA28027@localhost.localdomain>

> On Sun, May 04, 2003 at 11:13:09PM -0400, Jp Calderone wrote:
> >
> > [snip]
> >
> >     print isinstance(SSL.WantReadError, SSL.Error)
> 
>   issubclass(), of course.
----------------------------------------
It is a subclass:

   >>> print issubclass(SSL.WantReadError, SSL.Error)
   1

I pulled down Twisted from CVS about at 7:00 PM EDT (May 5th).

    twisted/internet/{app,tcp}.py both import StringTypes from
    twisted/python/compat.py, but twisted/python/compat.py does not export
    StringTypes.

And:

    On this same platform (remember: Windows ME) you can't do:

	python setup.py install

    because cBanana won't build.  cBanana won't build because I don't
    that compiler installed. I commented out those sections of the
    setup.
 
After fixing these problems, I was able to get the same stack trace as
before, ending with self.socket.accept() and SSL.WantReadError.

Note that there is a nested try/except with the outermost except
catching _everything_ around self.socket.accept().  I'm afraid I just
don't understand the details of the error reporting to know if this is
a side-effect of that reporting, or if something much stranger is
going on.

All the SSL code works just fine on Linux, of course.

-Eric




From radix at twistedmatrix.com  Mon May  5 20:23:40 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 5 May 2003 20:23:40 -0400
Subject: [Twisted-Python] Missing files from installation of woven part
In-Reply-To: <3EB58941.6090309@adequat.net>; from lstep@adequat.net on Sun, May 04, 2003 at 17:42:25 -0400
References: <3EB58941.6090309@adequat.net>
Message-ID: <20030506002340.GC7754@toshi.anaprd01.md.comcast.net>

On 2003.05.04 17:42, Luc Stepniewski wrote:
> When you do a python setup.py build/install, important files from 
> t.web.woven are missing. The LivePage related files FlashConduit.fla,
> FlashConduit.swf, FlashConduitGlue.html, WebConduit2_mozilla.js, 
> WebConduit2_msie.js and WebConduitGlue.html are not copied, so LivePage 
> does not work at all without them :'-(
> 
> Could anyone modify the installation to include these files in the copy?


Sorry I forgot to reply earlier. This is fixed in CVS and 1.0.5rc2 (which
I'm in the process of uploading to sourceforge now).

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From uwe at oss4u.com  Mon May  5 20:59:19 2003
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Mon, 5 May 2003 17:59:19 -0700
Subject: [Twisted-Python] (no subject)
In-Reply-To: <OFA07C1E97.5A60B49E-ONC1256D1D.004EBE6E@uz.tengelmann.de>
References: <OFA07C1E97.5A60B49E-ONC1256D1D.004EBE6E@uz.tengelmann.de>
Message-ID: <200305051759.19661.uwe@oss4u.com>

On Monday 05 May 2003 07:26 am, mmoellenbeck at plus.de wrote:
> Hello,
>
> I'm new to twisted and have some questions:
>
> - Can I use a pb.Copyable as pb.RemoteReference?
>
> I have designed an wx-application and want request the wxframe from the
> server by the client.
> Events from the client should call methods of the server.

I don't think that's going to work. A wxFrame is basically a stub class to an 
underlying c++ extension. There are already some issues with subclassing 
wxPython classes, not to speak of redistributing them over the network.

What my applications do is to fetch a xrc file (wx xml ressource) from the 
server and instanciate the gui locally on the client. That works quite fine 
and btw decouples the gui from the business logic, which is normally what you 
want in a multi tier application.



	UC

--
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417




From richard at commonground.com.au  Tue May  6 01:26:34 2003
From: richard at commonground.com.au (Richard Jones)
Date: Tue, 6 May 2003 15:26:34 +1000
Subject: [Twisted-Python] stikiwiki promising, but...
Message-ID: <4D6C476F-7F83-11D7-8E7A-000393D560FC@commonground.com.au>

I randomly found stikiwiki (in short: ReST/Twisted/WikiWiki) on the 
web, and thought it'd be extremely useful. Gave it a go, and had to 
immediately patch up some docutils usage quirks (docutils' API is a bit 
of a moving target ;). The results of my work are attached to this 
email. Can't find an email address for the author though, so that's as 
far as that patch goes :)

Problem is that I now run into some problem deep in the Twisted code. 
The traceback is also attached. This is using the latest rc. If I 
should try the CVS, just let me know. Otherwise, is there something 
else that I could do?


     Richard

ps. can't help thinking that Roundup would be nice running behind (or 
is it inside?) Twisted :)
pps. stikiwiki: http://mithrandr.moria.org/code/stikiwiki/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: stikiwiki.py.diff
Type: application/octet-stream
Size: 1337 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030506/1ddb81a2/attachment.obj 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: stikiwiki.py.log
Type: application/octet-stream
Size: 1593 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030506/1ddb81a2/attachment-0001.obj 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 186 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030506/1ddb81a2/attachment.pgp 

From dp at twistedmatrix.com  Tue May  6 01:38:14 2003
From: dp at twistedmatrix.com (Donovan Preston)
Date: Mon, 5 May 2003 22:38:14 -0700
Subject: [Twisted-Python] stikiwiki promising, but...
In-Reply-To: <4D6C476F-7F83-11D7-8E7A-000393D560FC@commonground.com.au>
Message-ID: <EEB0341E-7F84-11D7-9BEB-00039376B1AE@twistedmatrix.com>

On Monday, May 5, 2003, at 10:26 PM, Richard Jones wrote:

> I randomly found stikiwiki (in short: ReST/Twisted/WikiWiki) on the 
> web, and thought it'd be extremely useful. Gave it a go, and had to 
> immediately patch up some docutils usage quirks (docutils' API is a 
> bit of a moving target ;). The results of my work are attached to this 
> email. Can't find an email address for the author though, so that's as 
> far as that patch goes :)
>
> Problem is that I now run into some problem deep in the Twisted code. 
> The traceback is also attached. This is using the latest rc. If I 
> should try the CVS, just let me know. Otherwise, is there something 
> else that I could do?

The problem is getData() was deprecated in favor of getData(request). 
Most of the places where getData is called by the internal workings of 
woven used some introspection to discover whether the particular 
getData took the request or not, and gave a warning if not, but it 
looks like I missed this call in Widgets. If you change the "def 
getData(self)" in stikiwiki to "def getData(self, request)" this will 
go away.

Woven's API has been somewhat of a moving target, although it is 
stabilizing now. There is much more Woven documentation included in 
1.0.5rc2, check it out.

Donovan




From richard at commonground.com.au  Tue May  6 01:53:49 2003
From: richard at commonground.com.au (Richard Jones)
Date: Tue, 6 May 2003 15:53:49 +1000
Subject: [Twisted-Python] stikiwiki promising, but...
In-Reply-To: <EEB0341E-7F84-11D7-9BEB-00039376B1AE@twistedmatrix.com>
Message-ID: <1C10BB08-7F87-11D7-8E7A-000393D560FC@commonground.com.au>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Tuesday, May 6, 2003, at 03:38 PM, Donovan Preston wrote:
> The problem is getData() was deprecated in favor of getData(request). 
> Most of the places where getData is called by the internal workings of 
> woven used some introspection to discover whether the particular 
> getData took the request or not, and gave a warning if not, but it 
> looks like I missed this call in Widgets. If you change the "def 
> getData(self)" in stikiwiki to "def getData(self, request)" this will 
> go away.

That did clear up the problem, thanks!


     Richard
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+t03urGisBEHG6TARAmvzAJ9gvqpP2Bwhv5dYwZFlDPnkoktSFwCeIRqQ
vf7ahyRYZy5sCZaVA81NMG8=
=OegH
-----END PGP SIGNATURE-----




From mmoellenbeck at plus.de  Tue May  6 03:28:43 2003
From: mmoellenbeck at plus.de (mmoellenbeck at plus.de)
Date: Tue, 6 May 2003 09:28:43 +0200
Subject: Antwort: Re: [Twisted-Python] (no subject)
Message-ID: <OFB5CB85BB.9045BD63-ONC1256D1E.0027B8C8@uz.tengelmann.de>

Hi,

I have also thought about this way. 

My problem is to open a new dialog on the client by an onClick()-event, 
for example.

Do you have an idea? I would appreciate any examples ;-).

regards

Martin





An:     twisted-python at twistedmatrix.com
Kopie: 
 

Thema:  Re: [Twisted-Python] (no subject)

 
"Uwe C. Schroeder" <uwe at oss4u.com>
Gesendet von:
twisted-python-admin at twistedmatrix.com
06.05.2003 02:59
Bitte antworten an twisted-python






On Monday 05 May 2003 07:26 am, mmoellenbeck at plus.de wrote:
> Hello,
>
> I'm new to twisted and have some questions:
>
> - Can I use a pb.Copyable as pb.RemoteReference?
>
> I have designed an wx-application and want request the wxframe from the
> server by the client.
> Events from the client should call methods of the server.

I don't think that's going to work. A wxFrame is basically a stub class to 
an 
underlying c++ extension. There are already some issues with subclassing 
wxPython classes, not to speak of redistributing them over the network.

What my applications do is to fetch a xrc file (wx xml ressource) from the 

server and instanciate the gui locally on the client. That works quite 
fine 
and btw decouples the gui from the business logic, which is normally what 
you 
want in a multi tier application.



                 UC

--
Open Source Solutions 4U, LLC            2570 Fleetwood Drive
Phone:  +1 650 872 2425                          San Bruno, CA 94066
Cell:   +1 650 302 2405                          United States
Fax:    +1 650 872 2417


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20030506/56c8e73d/attachment.htm 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: image/gif
Size: 47 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030506/56c8e73d/attachment.gif 

From lafou at wanadoo.fr  Tue May  6 04:52:14 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: 06 May 2003 10:52:14 +0200
Subject: Antwort: Re: [Twisted-Python] (no subject)
In-Reply-To: <OFB5CB85BB.9045BD63-ONC1256D1E.0027B8C8@uz.tengelmann.de>
References: <OFB5CB85BB.9045BD63-ONC1256D1E.0027B8C8@uz.tengelmann.de>
Message-ID: <1052211134.8062.33.camel@biproc>

> What my applications do is to fetch a xrc file (wx xml ressource) from
> the 
> server and instanciate the gui locally on the client. That works quite
> fine 
> and btw decouples the gui from the business logic, which is normally
> what you 
> want in a multi tier application.


Any documentation on that ? I have the same problems...




From m at moshez.org  Tue May  6 06:10:55 2003
From: m at moshez.org (Moshe Zadka)
Date: 6 May 2003 10:10:55 -0000
Subject: [Twisted-Python] Blocking
Message-ID: <20030506101055.13410.qmail@green.zadka.com>

In short command-line scripts, it's often much easier to block, especially
if the script doesn't need to do any serving. However, Twisted's API is
always non-blocking, returning deferreds. Here's a short function that
allowes more natural usage from scripts:


def makeBlocking(d):
    succ, fail = [], []
    d.addCallback(succ.append)
    d.addErrback(fail.append)
    d.addBoth(lambda _: reactor.stop())
    reactor.run()
    if succ:
        return succ[0]
    else:
        raise fail[0].value

Here's a short usage example:

>>> from twisted.internet import defer, reactor
>>> def callIn10():
...     d = defer.Deferred()
...     reactor.callLater(10, d.callback, "hello world")
...     return d
...
>>> import time
>>> print time.time();print makeBlocking(callIn10());print time.time()
1052215780.7
hello world
1052215790.71

This is especially useful in scripts which want to do pb calls, as currently
there is no way to do pb calls in a synchronous manner.

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From scott_list at mischko.com  Tue May  6 10:49:59 2003
From: scott_list at mischko.com (Scott Chapman)
Date: Tue, 6 May 2003 07:49:59 -0700
Subject: [Twisted-Python] stikiwiki promising, but...
In-Reply-To: <EEB0341E-7F84-11D7-9BEB-00039376B1AE@twistedmatrix.com>
References: <EEB0341E-7F84-11D7-9BEB-00039376B1AE@twistedmatrix.com>
Message-ID: <200305060749.59917.scott_list@mischko.com>

On Monday 05 May 2003 22:38, Donovan Preston wrote:
> On Monday, May 5, 2003, at 10:26 PM, Richard Jones wrote:
> > I randomly found stikiwiki (in short: ReST/Twisted/WikiWiki) on the
> > web, and thought it'd be extremely useful. Gave it a go, and had to
> > immediately patch up some docutils usage quirks (docutils' API is a
> > bit of a moving target ;). The results of my work are attached to this
> > email. Can't find an email address for the author though, so that's as
> > far as that patch goes :)
> >
> > Problem is that I now run into some problem deep in the Twisted code.
> > The traceback is also attached. This is using the latest rc. If I
> > should try the CVS, just let me know. Otherwise, is there something
> > else that I could do?
>
> The problem is getData() was deprecated in favor of getData(request).
> Most of the places where getData is called by the internal workings of
> woven used some introspection to discover whether the particular
> getData took the request or not, and gave a warning if not, but it
> looks like I missed this call in Widgets. If you change the "def
> getData(self)" in stikiwiki to "def getData(self, request)" this will
> go away.
>
> Woven's API has been somewhat of a moving target, although it is
> stabilizing now. There is much more Woven documentation included in
> 1.0.5rc2, check it out.
>
> Donovan

I installed StikiWiki and applied the diffs from Richard Jones.  Then I 
installed docutils, bsddb3, and Twisted 1.0.5rc2.  I also changed the getData 
as above.  Now when I run it and try to load the wiki I get a traceback 
below.

What am I missing here?

Scott

Traceback (most recent call last):
  File "/usr/lib/python2.2/site-packages/twisted/protocols/basic.py", line 
173, in dataReceived
    self.lineReceived(line)
  File "/usr/lib/python2.2/site-packages/twisted/protocols/http.py", line 900, 
in lineReceived
    self.allContentReceived()
  File "/usr/lib/python2.2/site-packages/twisted/protocols/http.py", line 932, 
in allContentReceived
    req.requestReceived(command, path, version)
  File "/usr/lib/python2.2/site-packages/twisted/protocols/http.py", line 504, 
in requestReceived
    self.process()
--- <exception caught here> ---
  File "/usr/lib/python2.2/site-packages/twisted/web/server.py", line 156, in 
process
    self.render(resrc)
  File "/usr/lib/python2.2/site-packages/twisted/web/server.py", line 162, in 
render
    body = resrc.render(self)
  File "stikiwiki.py", line 295, in render
    pub.get_settings()
exceptions.AttributeError: Publisher instance has no attribute 'get_settings'





From m at moshez.org  Tue May  6 14:14:43 2003
From: m at moshez.org (Moshe Zadka)
Date: 6 May 2003 18:14:43 -0000
Subject: [Twisted-Python] Signal Alternatives
Message-ID: <20030506181443.32163.qmail@green.zadka.com>

Reference: http://moshez.org/curled.tgz

So, I'm working on curled.killer, which may find its way back into
Twisted at some point. The point is to have an API which resembles
signals for command line users, and yet is flexible and reliable.

On the server side, it should be no harder than

killer.register(application, "signal-name", handlerFunction)

On the client side, it should be no harder than

% pbkill application.pbkill signal-name [optional arguments]

Except for pbkill currently being spelled
"python -c 'from curled.killer import killMain;killMain()', this
is all working. Glyph mentioned he still has some comments,
so I'm not checking this in yet, but I urge anyone who wants
stuff classically triggered with signals on UNIX (such as termination,
or configuration reloading) to try this out and submit feedback.

PS
This is UNIX only, as it uses UNIX domain sockets. It is too hard,
and not interesting for me, to do it in Windows (maybe through
TCP loopback sockets? )

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From mike.thompson at day8.com.au  Tue May  6 06:22:33 2003
From: mike.thompson at day8.com.au (Mike Thompson)
Date: Tue, 6 May 2003 20:22:33 +1000
Subject: [Twisted-Python] Re: Antwort: Re: (no subject)
References: <OFB5CB85BB.9045BD63-ONC1256D1E.0027B8C8@uz.tengelmann.de> <1052211134.8062.33.camel@biproc>
Message-ID: <b982ar$1iu$1@main.gmane.org>

"Philippe Lafoucri?re" <lafou at wanadoo.fr> wrote in message
news:1052211134.8062.33.camel at biproc...
> > What my applications do is to fetch a xrc file (wx xml ressource) from
> > the
> > server and instanciate the gui locally on the client. That works quite
> > fine
> > and btw decouples the gui from the business logic, which is normally
> > what you
> > want in a multi tier application.
>
>
> Any documentation on that ? I have the same problems...

Perhaps Martin will have documentation links but in the meantime I recently
noticed an open source project (backed by Mitch Kapor) which makes extensive
use of xrc/python to create a plugin architecture:
     http://www.osafoundation.org/

The product is Chandler -- a PIM.  It's source code might give some pointers.

--
Mike









From justinjohnson at fastmail.fm  Tue May  6 16:08:48 2003
From: justinjohnson at fastmail.fm (Justin Johnson)
Date: Tue, 06 May 2003 14:08:48 -0600
Subject: [Twisted-Python] Server to accept requests to run cmdline scripts
Message-ID: <20030506200848.2B5623400E@www.fastmail.fm>

Hello,

I'm new to Twisted and am considering using it to setup servers that will
accept requests from clients which will result in scripts running on the
server to do some busy work while sending the script output back to the
client.  Does Twisted provide something like this, or the ability to
create something like this?

Thanks much.
-Justin



From uwe at oss4u.com  Tue May  6 16:30:47 2003
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Tue, 6 May 2003 13:30:47 -0700
Subject: [Twisted-Python] pb size limitation
Message-ID: <200305061330.47899.uwe@oss4u.com>

Hi,

I want to transfer large chunks of data via pb xmlrpc.
Theoretically that works, however I noticed that banana has a size limitation 
of 640k - which is not enough in my case.
The limit seems hardcoded, so there is no way to set it higher without 
recompiling the whole thing for all platforms in question.
Anyone got a better idea to transfer large files ?
I guess ftp would be nice, however that requires firewallsettings.
Does the same limitation exist thruout Twisted ?

Anyone got some sample code ? The examples etc. don't really implement 
anything that transfers large files.

Thanks

	UC

--
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417




From 2002 at weholt.org  Tue May  6 16:36:58 2003
From: 2002 at weholt.org (Thomas Weholt)
Date: Tue, 6 May 2003 22:36:58 +0200
Subject: [Twisted-Python] http and ftp in the same tap-file???
Message-ID: <002801c3140f$3dcb6270$0401a8c0@razor>

How can I create a web-server serving content by RPYs and in the same tap-file have a simple FTP-server with authentication??? Any examples on how to do this?

Thomas
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20030506/dca888a3/attachment.htm 

From uwe at oss4u.com  Tue May  6 16:40:37 2003
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Tue, 6 May 2003 13:40:37 -0700
Subject: [Twisted-Python] Re: Antwort: Re: (no subject)
In-Reply-To: <b982ar$1iu$1@main.gmane.org>
References: <OFB5CB85BB.9045BD63-ONC1256D1E.0027B8C8@uz.tengelmann.de> <1052211134.8062.33.camel@biproc> <b982ar$1iu$1@main.gmane.org>
Message-ID: <200305061340.37296.uwe@oss4u.com>

I'm just trying to extract the relevant code out of my project.
I think the problem is less to use xrc, but more how to make the thing 
interact with Twisted.
To detail what I'm doing:

I create a twisted server listening on two ports. One is the main application 
port handled with auth via pb
The other is a pure "update" port, handled with a normal pb.root object.
My application first connects to the "updater" and checks for updates. If any, 
the files get downloaded and stored. AFTER that I start creating the gui, so 
if the .xrc file changed it will be reflected.
This has two major flaws: 
1) there is a size limitation in twisted for 640k max transfer size.
2) you need to use at least 2 xrc files, one containing the main frame and one 
for the rest. This is because you can't have a wxApp running properly without 
a wxFrame instance - which is created from the first xrc file.
You could install upgrades before even creating an wxApp object, but assuming 
you have a large update with a lot of files the user doesn't see anything 
happening, so probably he starts the application a second time.
What I'll intend to do about that is to restart the application whenever the 
mainframe xrc get's updated. Maybe I'll do this in a wrapper (shell or so) 
catching the exit value of the application.
 
UC

On Tuesday 06 May 2003 03:22 am, Mike Thompson wrote:
> "Philippe Lafoucri?re" <lafou at wanadoo.fr> wrote in message
> news:1052211134.8062.33.camel at biproc...
>
> > > What my applications do is to fetch a xrc file (wx xml ressource) from
> > > the
> > > server and instanciate the gui locally on the client. That works quite
> > > fine
> > > and btw decouples the gui from the business logic, which is normally
> > > what you
> > > want in a multi tier application.
> >
> > Any documentation on that ? I have the same problems...
>
> Perhaps Martin will have documentation links but in the meantime I recently
> noticed an open source project (backed by Mitch Kapor) which makes
> extensive use of xrc/python to create a plugin architecture:
>      http://www.osafoundation.org/
>
> The product is Chandler -- a PIM.  It's source code might give some
> pointers.
>
> --
> Mike
>
>
>
>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-- 
	UC

--
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417




From radix at twistedmatrix.com  Tue May  6 16:39:51 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 6 May 2003 16:39:51 -0400
Subject: [Twisted-Python] pb size limitation
In-Reply-To: <200305061330.47899.uwe@oss4u.com>; from uwe@oss4u.com on Tue, May 06, 2003 at 16:30:47 -0400
References: <200305061330.47899.uwe@oss4u.com>
Message-ID: <20030506203951.GS7754@toshi.anaprd01.md.comcast.net>

On 2003.05.06 16:30, Uwe C. Schroeder wrote:
> 
> Hi,
> 
> I want to transfer large chunks of data via pb xmlrpc.
> Theoretically that works, however I noticed that banana has a size limitation 
> of 640k - which is not enough in my case.
> The limit seems hardcoded, so there is no way to set it higher without 
> recompiling the whole thing for all platforms in question.
> Anyone got a better idea to transfer large files ?
> I guess ftp would be nice, however that requires firewallsettings.
> Does the same limitation exist thruout Twisted ?

HTTP is probably the best for doing file transfers. If you do want to
transfer files with PB, use twisted.spread.util.Pager. See StringPager
for an example. It's trivial to convert this to a FilePager.

If you really do want to change the size limit for banana, you can do it
per-process (patches to properly parameterize this accepted) by changing
banana.SIZE_LIMIT.


-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From Martin.Moellenbeck at t-online.de  Tue May  6 16:52:35 2003
From: Martin.Moellenbeck at t-online.de (=?iso-8859-1?Q?Martin_M=F6llenbeck?=)
Date: Tue, 6 May 2003 22:52:35 +0200
Subject: AW: [Twisted-Python] pb size limitation
In-Reply-To: <200305061330.47899.uwe@oss4u.com>
Message-ID: <!~!UENERkVCMDkAAQACAAAAAAAAAAAAAAAAABgAAAAAAAAARFFe7Wq86Uqt5quoDxSVd8KAAAAQAAAAnOIp60lnPUaqIT7I09pZwwEAAAAA@t-online.de>

Hi,

I have not real answer, but you may have a look at
http://www.twistedmatrix.com/documents/TwistedDocs/current/api/public/tw
isted.spread.util.StringPager.htm

regards
	Martin

-----Urspr?ngliche Nachricht-----
Von: twisted-python-admin at twistedmatrix.com
[mailto:twisted-python-admin at twistedmatrix.com] Im Auftrag von Uwe C.
Schroeder
Gesendet: Dienstag, 6. Mai 2003 22:31
An: twisted-python at twistedmatrix.com
Betreff: [Twisted-Python] pb size limitation



Hi,

I want to transfer large chunks of data via pb xmlrpc.
Theoretically that works, however I noticed that banana has a size
limitation 
of 640k - which is not enough in my case.
The limit seems hardcoded, so there is no way to set it higher without 
recompiling the whole thing for all platforms in question.
Anyone got a better idea to transfer large files ?
I guess ftp would be nice, however that requires firewallsettings.
Does the same limitation exist thruout Twisted ?

Anyone got some sample code ? The examples etc. don't really implement 
anything that transfers large files.

Thanks

	UC

--
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From itamar at itamarst.org  Tue May  6 17:11:39 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 6 May 2003 17:11:39 -0400
Subject: [Twisted-Python] Server to accept requests to run cmdline
 scripts
In-Reply-To: <20030506200848.2B5623400E@www.fastmail.fm>
References: <20030506200848.2B5623400E@www.fastmail.fm>
Message-ID: <20030506171139.4c21bfd2.itamar@itamarst.org>

On Tue, 06 May 2003 14:08:48 -0600
"Justin Johnson" <justinjohnson at fastmail.fm> wrote:

> I'm new to Twisted and am considering using it to setup servers that
> will accept requests from clients which will result in scripts running
> on the server to do some busy work while sending the script output
> back to the client.  Does Twisted provide something like this, or the
> ability to create something like this?

twisted.runner.inetd is similar.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From andrew-twisted at puzzling.org  Tue May  6 21:57:07 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 7 May 2003 11:57:07 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] Add makeblocking (and a test woo)
In-Reply-To: <E19D5JX-0006ph-00@pyramid.twistedmatrix.com>
References: <E19D5JX-0006ph-00@pyramid.twistedmatrix.com>
Message-ID: <20030507015707.GB18456@frobozz.local>

On Tue, May 06, 2003 at 11:29:11AM -0500, moshez CVS wrote:
> Modified files:
> Twisted/twisted/test/test_defer.py 1.22 1.23
> Twisted/twisted/internet/defer.py 1.36 1.37
> 
> Log message:
> Add makeblocking (and a test woo)

Perhaps "waitForDeferred" would be a better name for this?

-Andrew.




From glyph at twistedmatrix.com  Wed May  7 01:19:49 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 7 May 2003 00:19:49 -0500
Subject: [Twisted-Python] pb size limitation
In-Reply-To: <20030506203951.GS7754@toshi.anaprd01.md.comcast.net>
Message-ID: <8682BA80-804B-11D7-912C-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Tuesday, May 6, 2003, at 03:39 PM, Christopher Armstrong wrote:

> If you really do want to change the size limit for banana, you can do 
> it
> per-process (patches to properly parameterize this accepted) by 
> changing
> banana.SIZE_LIMIT.

You don't.  It will destroy interoperability with unmodified 
installations - think of this as a protocol-defined limit :)
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+uJd5vVGR4uSOE2wRAksQAJ0YKglJLKHoy/h8aUEraYm2WYhk/QCfWGhN
fiYb9nMtIUgVssdEhM7NLLw=
=oT0s
-----END PGP SIGNATURE-----




From glyph at twistedmatrix.com  Wed May  7 01:22:32 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 7 May 2003 00:22:32 -0500
Subject: [Twisted-Python] Re: [Twisted-commits] Add makeblocking (and a test woo)
In-Reply-To: <20030507015707.GB18456@frobozz.local>
Message-ID: <E79CB0F8-804B-11D7-912C-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Tuesday, May 6, 2003, at 08:57 PM, Andrew Bennetts wrote:

> Perhaps "waitForDeferred" would be a better name for this?

I was thinking Deferred.block(), since it would be most often used like:

	w.x.y().block().z()

This would probably be _super_ useful with Stackless, if we had more 
support for it.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+uJgcvVGR4uSOE2wRAkwVAKCLhrT+mFXDf+CWcNBhibx/RQ0TEgCdHqRN
lnZDpMfvLxW8rZRkr7xB/OU=
=ZMHC
-----END PGP SIGNATURE-----




From uwe at oss4u.com  Wed May  7 02:25:44 2003
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Tue, 6 May 2003 23:25:44 -0700
Subject: [Twisted-Python] pb size limitation
In-Reply-To: <8682BA80-804B-11D7-912C-000393C9700E@twistedmatrix.com>
References: <8682BA80-804B-11D7-912C-000393C9700E@twistedmatrix.com>
Message-ID: <200305062325.44829.uwe@oss4u.com>

On Tuesday 06 May 2003 10:19 pm, Glyph Lefkowitz wrote:
> On Tuesday, May 6, 2003, at 03:39 PM, Christopher Armstrong wrote:
> > If you really do want to change the size limit for banana, you can do
> > it
> > per-process (patches to properly parameterize this accepted) by
> > changing
> > banana.SIZE_LIMIT.
>
> You don't.  It will destroy interoperability with unmodified
> installations - think of this as a protocol-defined limit :)

Right. But it doesn't have to. If you parametrize it and make it detectable 
(say a member function that can be asked for the size limit), you could 
create code that would make it possible to have the server check for the 
client limits.
But basically you're right at least from a deployment point of view. If you 
change the limit you at least have to take care of unchanged versions - which 
is a hassle specially in a large deployment.
I think I'll go with paging.


	UC

--
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417




From itamar at itamarst.org  Wed May  7 10:36:29 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 7 May 2003 10:36:29 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] Add makeblocking (and a
 test woo)
In-Reply-To: <E79CB0F8-804B-11D7-912C-000393C9700E@twistedmatrix.com>
References: <20030507015707.GB18456@frobozz.local>
	<E79CB0F8-804B-11D7-912C-000393C9700E@twistedmatrix.com>
Message-ID: <20030507103629.4a46446c.itamar@itamarst.org>

On Wed, 7 May 2003 00:22:32 -0500
Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> I was thinking Deferred.block(), since it would be most often used
> like:
> 
> 	w.x.y().block().z()
> 
> This would probably be _super_ useful with Stackless, if we had more 
> support for it.

Except, doesn't the code use reactor.stop()? Also you'd need different
ways of blocking for stackless and threads.


-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From bob at redivi.com  Wed May  7 10:54:28 2003
From: bob at redivi.com (Bob Ippolito)
Date: Wed, 7 May 2003 10:54:28 -0400
Subject: [Twisted-Python] pb size limitation
In-Reply-To: <20030506203951.GS7754@toshi.anaprd01.md.comcast.net>
Message-ID: <CD708032-809B-11D7-A0CA-000A95686CD8@redivi.com>

On Tuesday, May 6, 2003, at 16:39 America/New_York, Christopher 
Armstrong wrote:
> If you really do want to change the size limit for banana, you can do 
> it
> per-process (patches to properly parameterize this accepted) by 
> changing
> banana.SIZE_LIMIT.

Just curious, but is this settable with cBanana?

-bob




From bob at redivi.com  Wed May  7 10:57:02 2003
From: bob at redivi.com (Bob Ippolito)
Date: Wed, 7 May 2003 10:57:02 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] Add makeblocking (and a test woo)
In-Reply-To: <E79CB0F8-804B-11D7-912C-000393C9700E@twistedmatrix.com>
Message-ID: <290F7DDA-809C-11D7-A0CA-000A95686CD8@redivi.com>

On Wednesday, May 7, 2003, at 01:22 America/New_York, Glyph Lefkowitz 
wrote:

> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
>
> On Tuesday, May 6, 2003, at 08:57 PM, Andrew Bennetts wrote:
>
>> Perhaps "waitForDeferred" would be a better name for this?
>
> I was thinking Deferred.block(), since it would be most often used 
> like:
>
> 	w.x.y().block().z()
>
> This would probably be _super_ useful with Stackless, if we had more 
> support for it.

Yeah, without stackless, I don't think this is possible unless we put a 
macro preprocessor into python.. since you can't putz around with frame 
objects from pure Python.

Until then, you can get around with the likes of the 
generator/deferredwrapper crutch..

-bob




From miathan at goliath.darktech.org  Wed May  7 11:38:28 2003
From: miathan at goliath.darktech.org (W.J.)
Date: Wed, 7 May 2003 17:38:28 +0200 (CEST)
Subject: [Twisted-Python] twisted.internet.app.unlisten* Broken (patch)
Message-ID: <Pine.LNX.4.44.0305071727450.24920-200000@zolder>

Hi,

For my project, I needed to be able to bind and unbind listeners on the
fly - twisted API has this functionality, but it is inconsistent in its
implementation. My patch fixes this, so the following works:

[[ On a twisted server with only manhole running ]]
----
$ telnet localhost 8007
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.

twisted.manhole.telnet.ShellFactory
Twisted 1.0.4
username: boss
password: *****
>>> from twisted.internet.app import Application
>>> from twisted.internet.protocol import Factory
>>> from twisted.protocols.wire import QOTD
>>> # add QOTD server
>>> f = Factory()
>>> f.protocol = QOTD
>>> app.listenTCP(8123, f)
>>> # system now listening on port 8123 (worked already)
>>> app.unlistenTCP(8123, f)
>>> # system no longer listening on port 8123 (used to be broken! patch
fixes this)

In addition to the TCP case, it also fixes UDP(tested) and SSL(untested).
It does this by changing the format of _listenerDict to tuples
(type, param1, param2, ...) where type is 'UDP', 'TCP', 'UNIX' or 'SSL'.

This should _not_ affect persistence, because _listenerDict is internal.

Wladimir

-------------- next part --------------
--- /usr/src/Twisted-1.0.4/twisted/internet/app.py	2003-04-14 19:39:21.000000000 +0200
+++ /file/zope/lib/python2.1/site-packages/twisted/internet/app.py	2003-05-07 17:10:36.000000000 +0200
@@ -538,7 +538,9 @@
         self.tcpPorts.append((port, factory, backlog, interface))
         if self.running:
             from twisted.internet import reactor
-            return reactor.listenTCP(port, factory, backlog, interface)
+            listener = reactor.listenTCP(port, factory, backlog, interface)
+            self._listenerDict[("TCP", port, interface)] = listener
+            return listener
 
     def unlistenTCP(self, port, interface=''):
         """
@@ -552,8 +554,8 @@
         if toRemove:
             for t in toRemove:
                 self.tcpPorts.remove(t)
-            if self._listenerDict.has_key((port, interface)):
-                self._listenerDict[(port, interface)].stopListening()
+            if self._listenerDict.has_key(("TCP", port, interface)):
+                self._listenerDict[("TCP", port, interface)].stopListening()
         else:
             raise error.NotListeningError, (interface, port)
 
@@ -564,7 +566,9 @@
         self.unixPorts.append((filename, factory, backlog, mode))
         if self.running:
             from twisted.internet import reactor
-            return reactor.listenUNIX(filename, factory, backlog, mode)
+            listener = reactor.listenUNIX(filename, factory, backlog, mode)
+            self._listenerDict["UNIX", filename] = listener
+            return listener
 
     def unlistenUNIX(self, filename):
         """
@@ -578,8 +582,8 @@
         if toRemove:
             for t in toRemove:
                 self.unixPorts.remove(t)
-            if self._listenerDict.has_key(filename):
-                self._listenerDict[filename].stopListening()
+            if self._listenerDict.has_key(("UNIX", filename)):
+                self._listenerDict["UNIX", filename].stopListening()
         else:
             raise error.NotListeningError, filename
 
@@ -590,7 +594,9 @@
         self.udpPorts.append((port, proto, interface, maxPacketSize))
         if self.running:
             from twisted.internet import reactor
-            return reactor.listenUDP(port, proto, interface, maxPacketSize)
+            listener = reactor.listenUDP(port, proto, interface, maxPacketSize)
+            self._listenerDict[("UDP", port, interface)] = listener
+            return listener
 
     def unlistenUDP(self, port, interface=''):
         """
@@ -605,6 +611,8 @@
         if toRemove:
             for t in toRemove:
                 self.udpPorts.remove(t)
+            if self._listenerDict.has_key(("UDP", port, interface)):
+                self._listenerDict[("UDP", port, interface)].stopListening()
         else:
             raise error.NotListeningError, (interface, port)
 
@@ -617,7 +625,9 @@
         self.sslPorts.append((port, factory, ctxFactory, backlog, interface))
         if self.running:
             from twisted.internet import reactor
-            return reactor.listenSSL(port, factory, ctxFactory, backlog, interface)
+            listener = reactor.listenSSL(port, factory, ctxFactory, backlog, interface)
+            self._listenerDict[("SSL", port, interface)] = listener
+            return listener
 
     def unlistenSSL(self, port, interface=''):
         """
@@ -631,6 +641,8 @@
         if toRemove:
             for t in toRemove:
                 self.sslPorts.remove(t)
+                if self._listenerDict.has_key(("SSL", port, interface)):
+                    self._listenerDict[("SSL", port, interface)].stopListening()
         else:
             raise error.NotListeningError, (interface, port)
 
@@ -804,25 +816,25 @@
 
             for filename, factory, backlog, mode in self.unixPorts:
                 try:
-                    self._listenerDict[filename] = reactor.listenUNIX(filename, factory, backlog, mode)
+                    self._listenerDict["UNIX", filename] = reactor.listenUNIX(filename, factory, backlog, mode)
                 except error.CannotListenError, msg:
                     log.msg('error on UNIX socket %s: %s' % (filename, msg))
                     return
             for port, factory, backlog, interface in self.tcpPorts:
                 try:
-                    self._listenerDict[port, interface] = reactor.listenTCP(port, factory, backlog, interface)
+                    self._listenerDict["TCP", port, interface] = reactor.listenTCP(port, factory, backlog, interface)
                 except error.CannotListenError, msg:
                     log.msg('error on TCP port %s: %s' % (port, msg))
                     return
             for port, factory, interface, maxPacketSize in self.udpPorts:
                 try:
-                    reactor.listenUDP(port, factory, interface, maxPacketSize)
+                    self._listenerDict["UDP", port, interface] = reactor.listenUDP(port, factory, interface, maxPacketSize)
                 except error.CannotListenError, msg:
                     log.msg('error on UDP port %s: %s' % (port, msg))
                     return
             for port, factory, ctxFactory, backlog, interface in self.sslPorts:
                 try:
-                    reactor.listenSSL(port, factory, ctxFactory, backlog, interface)
+                    self._listenerDict["SSL", port, interface] = reactor.listenSSL(port, factory, ctxFactory, backlog, interface)
                 except error.CannotListenError, msg:
                     log.msg('error on SSL port %s: %s' % (port, msg))
                     return

From andrew-pythonlist at puzzling.org  Wed May  7 10:31:40 2003
From: andrew-pythonlist at puzzling.org (Andrew Bennetts)
Date: Thu, 8 May 2003 00:31:40 +1000
Subject: [Twisted-Python] [Andrei.Doicin@cern.ch: timing out an ssh command]
Message-ID: <20030507143140.GA19492@frobozz.local>

How is easy is it to script conch?  It'd be nice if it was the solution to
this guy's problem :)

-Andrew.

----- Forwarded message excerpt from Andrei Doicin <Andrei.Doicin at cern.ch> -----

From: Andrei Doicin <Andrei.Doicin at cern.ch>
Newsgroups: comp.lang.python
Subject: timing out an ssh command
Organization: CERN
Xref: news.baymountain.com comp.lang.python:221802
To: python-list at python.org
Date: Wed, 7 May 2003 15:44:30 +0200

Dear fellow Pythonheads,

I have written a fairly nifty but "just beyond amateur" =) wrapper script in
python for sending ssh commands to remote hosts from the unix command line,
but would now like the ssh command to time out after a certain amount of
time (eventually to be specified as an option to the wrapper).

What would you advise is the best way to do this, out of the following
avenues to consider ?

- somehow making use of time.time or time.clock and/or select(x,x,x,timeout)
- sockets (i.e. making use of something like
http://www.timo-tasi.org/python/timeoutsocket.py by Timothy Malley)
- expect
- pexpect

?

A situation in which the ssh command hangs forever can be indicated as
follows, using the verbose option (whether necessary or not) of ssh to
illustrate what's going on at the fundamental level:

[client0-15:26:01] 130:adoicin/scripts> ssh -v target1 uptime
OpenSSH_3.4p1-CERN20020919, SSH protocols 1.5/2.0, OpenSSL 0x0090602f
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: Applying options for *
debug1: Rhosts Authentication disabled, originating port will not be
trusted.
debug1: ssh_connect: needpriv 0
debug1: Connecting to target1 [xxx.xxx.xxx.xxx] port 22.
debug1: Connection established.
debug1: identity file /home/adoicin/.ssh/identity type -1
debug1: identity file /home/adoicin/.ssh/id_rsa type -1
debug1: identity file /home/adoicin/.ssh/id_dsa type -1
... waits forever ...

the above example literally hangs forever unless you intervene with CTRL-C

----- snipped -----
----- End forwarded message excerpt -----




From z3p at twistedmatrix.com  Wed May  7 18:16:54 2003
From: z3p at twistedmatrix.com (Paul Swartz)
Date: Wed, 07 May 2003 18:16:54 -0400
Subject: [Twisted-Python] [Andrei.Doicin@cern.ch: timing out an ssh command]
In-Reply-To: <20030507143140.GA19492@frobozz.local>
Message-ID: <3EB94D96.16996.1D1F547@localhost>

On 8 May 2003 at 0:31, Andrew Bennetts wrote:

> How is easy is it to script conch?  It'd be nice if it was the solution to
> this guy's problem :)

Pretty easy, and stuff like reactor.callLater makes timeouts easy.  I'll 
reply to him and hopefully get more information on what he really wants 
to do. :)

-p
-- 
     Paul Swartz
(o_  http://twistedmatrix.com/users/z3p.twistd/
//\  z3p at twistedmatrix.com
V_/_ AIM: Z3Penguin




From stuart.hungerford at anu.edu.au  Thu May  8 01:41:51 2003
From: stuart.hungerford at anu.edu.au (Stuart Hungerford)
Date: Thu, 08 May 2003 15:41:51 +1000
Subject: [Twisted-Python] Twisted experiences on Solaris?
Message-ID: <5.2.0.9.0.20030508153609.023b2c18@anusf.anu.edu.au>

Hi all,

I've recently installed Twisted 1.0.4 on Solaris (where
"uname -a" reports: SunOS store 5.8 Generic_108528-16 sun4u
sparc SUNW,Ultra-Enterprise).

When I run the tests in admin/runtests I'm getting a few
more errors than I think I should be.  I'm also having
problems running some of the example code in the
"Configuring and Using the Twisted.Web Server" document.

All this is with Python 2.2.2.

Can any Solaris users of Twisted share their installation
tips or experiences with me?
Cheers,

Stu

--
:: Stuart Hungerford (stuart.hungerford at anu.edu.au)
:: ANU Internet Futures Group




From wari at home.wari.org  Thu May  8 02:48:44 2003
From: wari at home.wari.org (Wari Wahab)
Date: Thu, 08 May 2003 14:48:44 +0800
Subject: [Twisted-Python] Newbie to Twisted: Bug in http.py?
Message-ID: <3EB9FDCC.9080202@home.wari.org>

I was playing around with twisted.web today (1.0.4), and tried to make a 
manual HTTP connection using telnet. Naturally I forgot to type in the 
"HOST: hostname" during the request, and got a nice traceback from it. 
Here are the details:

./pyblosxom.py, line 50 in render
50    serverName = string.split(request.getRequestHostname(), ':')[0]
---
/usr/lib/python2.2/site-packages/twisted/protocols/http.py, line 756 in 
getRequestHostname
756    return (self.getHeader('host') or 
socket.gethostbyaddr(self.getHost()[1])).split(':')[0]
exceptions.AttributeError: 'tuple' object has no attribute 'split'

Is this a bug or I really have to use the HOST header (HTTP/1.0 does not 
have the HOST header, or is not necessary, I think). Looking at http.py, 
self.getHost() is just returning self.host, and self.host can either be:
self.host = (method, host, port)
or
self.host = self.channel.transport.getHost()

I'm pretty much a newbie in twisted (just toyed around with it since 
yesterday) and I was trying to make pyblosxom to be a twisted web server 
(don't you like how that sounds). I almost got it to work the way I want 
except that I cannot get the standard python cgi module to work (to get 
requests like ?foo=bar).

Forgive me if this is not a bug though :)




From jml at ids.org.au  Thu May  8 03:47:10 2003
From: jml at ids.org.au (Jonathan Lange)
Date: Thu, 8 May 2003 17:47:10 +1000
Subject: [Twisted-Python] Blocking
In-Reply-To: <20030506101055.13410.qmail@green.zadka.com>; from m@moshez.org on Tue, May 06, 2003 at 20:10:55 +1000
References: <20030506101055.13410.qmail@green.zadka.com>
Message-ID: <20030508074710.GG546@sting>

On 2003.05.06 20:10, Moshe Zadka wrote:
> In short command-line scripts, it's often much easier to block,
> especially
> if the script doesn't need to do any serving. However, Twisted's API
> is
> always non-blocking, returning deferreds. Here's a short function that
> allowes more natural usage from scripts:
> 

This is also useful in unit testing. To that end, the functions 
deferredResult and deferredFailure have been available in trial for 
some time. They currently live in twisted.trial.util.

Further reading of the mailing list indicates that something should 
probably be done about this.

jml



From jml at ids.org.au  Thu May  8 03:39:02 2003
From: jml at ids.org.au (Jonathan Lange)
Date: Thu, 8 May 2003 17:39:02 +1000
Subject: [Twisted-Python] Blocking
In-Reply-To: <20030506101055.13410.qmail@green.zadka.com>; from m@moshez.org on Tue, May 06, 2003 at 20:10:55 +1000
References: <20030506101055.13410.qmail@green.zadka.com>
Message-ID: <20030508073902.GA546@sting>

On 2003.05.06 20:10, Moshe Zadka wrote:
> In short command-line scripts, it's often much easier to block,
> especially if the script doesn't need to do any serving. def 
> makeBlocking(d):

There are similar functions in twisted.trial.util (deferredResult, 
deferredFailure). Blocking tests are much easier to write.

jml



From theller at python.net  Thu May  8 04:10:58 2003
From: theller at python.net (Thomas Heller)
Date: 08 May 2003 10:10:58 +0200
Subject: [Twisted-Python] telnet client code
Message-ID: <d6ituact.fsf@python.net>

I have this snippet running in it's own thread, and would like
to port it to twisted, my program is using it anyway.
Any hints how to get started?

Thanks, Thomas

        import telnetlib, time, socket
        try:
            tn = telnetlib.Telnet(host)
        except socket.error, detail:
            print "reboot failed", host, detail
            return
        tn.read_until("Username: ")
        tn.write("tel\r\n")
        tn.read_until("Password: ")
        tn.write("tel\r\n")
        time.sleep(1)
        tn.read_some()
        tn.write("reboot\r\n")
        time.sleep(1)




From justinjohnson at fastmail.fm  Thu May  8 08:23:51 2003
From: justinjohnson at fastmail.fm (Justin Johnson)
Date: Thu, 08 May 2003 06:23:51 -0600
Subject: [Twisted-Python] web site down
In-Reply-To: <d6ituact.fsf@python.net>
References: <d6ituact.fsf@python.net>
Message-ID: <20030508122351.94EF0346D9@www.fastmail.fm>

Not sure if this is the place to post this, but twistedmatrix.com is
down.  Got an error about not being able to access distributed server.

-JJ



From glyph at twistedmatrix.com  Thu May  8 08:46:11 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 8 May 2003 07:46:11 -0500
Subject: [Twisted-Python] web site down
In-Reply-To: <20030508122351.94EF0346D9@www.fastmail.fm>
Message-ID: <0BC7F471-8153-11D7-912C-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Thursday, May 8, 2003, at 07:23 AM, Justin Johnson wrote:

> Not sure if this is the place to post this, but twistedmatrix.com is
> down.  Got an error about not being able to access distributed server.

What specific URL is down?  "/" certainly shouldn't be taking you to a 
distributed server.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+ulGbvVGR4uSOE2wRAs2ZAJ4mHiROYe2biwXinpREdvOV4HxYiQCeMaMO
BvWpBWNOze50h9Y+oozAI/s=
=w5rT
-----END PGP SIGNATURE-----




From justinjohnson at fastmail.fm  Thu May  8 11:22:30 2003
From: justinjohnson at fastmail.fm (Justin Johnson)
Date: Thu, 08 May 2003 09:22:30 -0600
Subject: [Twisted-Python] web site down
In-Reply-To: <0BC7F471-8153-11D7-912C-000393C9700E@twistedmatrix.com>
References: <0BC7F471-8153-11D7-912C-000393C9700E@twistedmatrix.com>
Message-ID: <20030508152230.BBC992FB2F@www.fastmail.fm>

twistedmatrix.com just wasn't coming up,
while http://twistedmatrix.com/users/z3p.twistd/ gives me the error
Unable to connect to distributed server.

Sorry, I was mixing results and urls.  :-(

In any event, the main site is up again, although a little slow.

Thanks.
-Justin


On Thu, 8 May 2003 07:46:11 -0500, "Glyph Lefkowitz"
<glyph at twistedmatrix.com> said:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
> 
> 
> On Thursday, May 8, 2003, at 07:23 AM, Justin Johnson wrote:
> 
> > Not sure if this is the place to post this, but twistedmatrix.com is
> > down.  Got an error about not being able to access distributed server.
> 
> What specific URL is down?  "/" certainly shouldn't be taking you to a 
> distributed server.
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.2.1 (Darwin)
> 
> iD8DBQE+ulGbvVGR4uSOE2wRAs2ZAJ4mHiROYe2biwXinpREdvOV4HxYiQCeMaMO
> BvWpBWNOze50h9Y+oozAI/s=
> =w5rT
> -----END PGP SIGNATURE-----
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 



From itamar at itamarst.org  Thu May  8 12:23:18 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 8 May 2003 12:23:18 -0400
Subject: [Twisted-Python] telnet client code
In-Reply-To: <d6ituact.fsf@python.net>
References: <d6ituact.fsf@python.net>
Message-ID: <20030508122318.47ca6973.itamar@itamarst.org>

On 08 May 2003 10:10:58 +0200
Thomas Heller <theller at python.net> wrote:

> I have this snippet running in it's own thread, and would like
> to port it to twisted, my program is using it anyway.
> Any hints how to get started?

I'm not sure if telnet is symmetric - if it isn't, looks like we don't
have telnet client code. Even if it is, the current code needs work in
order to be usable for what you want (it's one of the more ancient parts
of Twisted.)

So, it seems writing a telnet client protocol (with similar methods to
telnetlib that return Deferreds instead of blocking?) is in order, or at
least a refacor of the current telnet code.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From itamar at itamarst.org  Thu May  8 12:39:04 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 8 May 2003 12:39:04 -0400
Subject: [Twisted-Python] Newbie to Twisted: Bug in http.py?
In-Reply-To: <3EB9FDCC.9080202@home.wari.org>
References: <3EB9FDCC.9080202@home.wari.org>
Message-ID: <20030508123904.5f9f557d.itamar@itamarst.org>

On Thu, 08 May 2003 14:48:44 +0800
Wari Wahab <wari at home.wari.org> wrote:

> I was playing around with twisted.web today (1.0.4), and tried to make
> a manual HTTP connection using telnet. Naturally I forgot to type in
> the "HOST: hostname" during the request, and got a nice traceback from
> it. Here are the details:

Thanks for the bug report, fixed in CVS.

> (don't you like how that sounds). I almost got it to work the way I
> want except that I cannot get the standard python cgi module to work
> (to get requests like ?foo=bar).

Look at how twisted/tap/web.py sets up a twisted.web.static.File web
resource to support CGI.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From z3p at twistedmatrix.com  Thu May  8 14:40:04 2003
From: z3p at twistedmatrix.com (Paul Swartz)
Date: Thu, 08 May 2003 14:40:04 -0400
Subject: [Twisted-Python] web site down
In-Reply-To: <20030508152230.BBC992FB2F@www.fastmail.fm>
References: <0BC7F471-8153-11D7-912C-000393C9700E@twistedmatrix.com>
Message-ID: <3EBA6C44.937.2687B5@localhost>

On 8 May 2003 at 9:22, Justin Johnson wrote:

> twistedmatrix.com just wasn't coming up,
> while http://twistedmatrix.com/users/z3p.twistd/ gives me the error
> Unable to connect to distributed server.

My server is back up now.

Other pyr users: is there someplace I can toss a script that will restart 
my server after a reboot?

-p
-- 
     Paul Swartz
(o_  http://twistedmatrix.com/users/z3p.twistd/
//\  z3p at twistedmatrix.com
V_/_ AIM: Z3Penguin




From bob at redivi.com  Thu May  8 15:18:08 2003
From: bob at redivi.com (Bob Ippolito)
Date: Thu, 8 May 2003 15:18:08 -0400
Subject: [Twisted-Python] web site down
In-Reply-To: <3EBA6C44.937.2687B5@localhost>
Message-ID: <CD11B126-8189-11D7-8B50-000A95686CD8@redivi.com>

On Thursday, May 8, 2003, at 14:40 America/New_York, Paul Swartz wrote:

> On 8 May 2003 at 9:22, Justin Johnson wrote:
>
>> twistedmatrix.com just wasn't coming up,
>> while http://twistedmatrix.com/users/z3p.twistd/ gives me the error
>> Unable to connect to distributed server.
>
> My server is back up now.
>
> Other pyr users: is there someplace I can toss a script that will 
> restart
> my server after a reboot?

I dunno about pyr but in general on linux if you make a crontab entry 
that says "@reboot command" then it should run whenever the cron daemon 
starts.

-bob




From exarkun at intarweb.us  Thu May  8 15:32:29 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Thu, 8 May 2003 15:32:29 -0400
Subject: [Twisted-Python] telnet client code
In-Reply-To: <20030508122318.47ca6973.itamar@itamarst.org>
References: <d6ituact.fsf@python.net> <20030508122318.47ca6973.itamar@itamarst.org>
Message-ID: <20030508193229.GA1511@meson.dyndns.org>

On Thu, May 08, 2003 at 12:23:18PM -0400, Itamar Shtull-Trauring wrote:
> On 08 May 2003 10:10:58 +0200
> Thomas Heller <theller at python.net> wrote:
> 
> > I have this snippet running in it's own thread, and would like
> > to port it to twisted, my program is using it anyway.
> > Any hints how to get started?
> 
> I'm not sure if telnet is symmetric - if it isn't, looks like we don't
> have telnet client code. Even if it is, the current code needs work in
> order to be usable for what you want (it's one of the more ancient parts
> of Twisted.)

  Telnet is mostly symmetric.  The existing code isn't very client-friendly,
though.   Here's a kinda-sorta example (untested):


    from twisted.protocols import telnet
    from twisted.internet import protocol, reactor

    class RebootTheServer(telnet.Telnet):
        mode = 'WaitForUser'

        def connectionMade(self):
            # Only defined to keep parent from sending the welcome banner
            pass

        def telnet_WaitForUser(self, line):
            if line.startswith('Username: '):
                self.write(self.factory.username + '\r\n')
                return 'WaitForPassword'

        def telnet_WaitForPassword(self, line):
            if line.startswith('Password: '):
                self.write(self.factory.password + '\r\n')

                # Instead of this, you could do another state,
                # like "WaitForPrompt" or something.
                reactor.callLater(1, self.reboot)
                return 'Idling'

        def telnet_Idling(self, line):
            # La la la.
            pass 

        def reboot(self):
            self.write('reboot\r\n')

            # This will make us lose our connection after the next
            # line is received.  To lose it faster, use
            # self.transport.loseConnection() instead
            self.mode = 'Done'

        def connectionLost(self, reason):
            if self.mode != 'Done':
                reason.printTraceback()
            reactor.stop()
           

    f = protocol.ClientFactory()
    f.protocol = RebootTheServer
    f.password = 'password'
    f.username = 'username'

    # fill in host and port
    reactor.connectTCP(host, port, f)

    # Let's go
    reactor.run()

  This is the first expect-y thing I've written with Telnet, so maybe it's
not the best solution, but hopefully it gets you on the right track.

  Jp

-- 
#!/bin/bash
( LIST=(~/.sigs/*.sig)
  cat ${LIST[$(($RANDOM % ${#LIST[*]}))]}
  echo -- $'\n' `uptime | sed -e 's/.*m//'` ) > ~/.signature
-- 
 up 6 days, 16:38, 10 users, load average: 0.07, 0.06, 0.00
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030508/ace1e005/attachment.pgp 

From glyph at twistedmatrix.com  Thu May  8 17:19:08 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 8 May 2003 16:19:08 -0500
Subject: [Twisted-Python] web site down
In-Reply-To: <CD11B126-8189-11D7-8B50-000A95686CD8@redivi.com>
Message-ID: <B4A6DE68-819A-11D7-912C-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Thursday, May 8, 2003, at 02:18 PM, Bob Ippolito wrote:

> I dunno about pyr but in general on linux if you make a crontab entry 
> that says "@reboot command" then it should run whenever the cron 
> daemon starts.

This is the way that most UNIXes suggest doing it - however, at least 
on pyramid, it seems broken.  I don't know if this is a debian issue or 
what, but I can't get _any_ of my machines to exec @reboot crontab 
entries.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+usnQvVGR4uSOE2wRAkSAAKCzpRj5xyTWGPG6ThCOX3j5GNeYjwCfbjAn
Zn8dvigbrwsrjVxUHFofhFs=
=dvLR
-----END PGP SIGNATURE-----




From stuart.hungerford at anu.edu.au  Thu May  8 20:49:26 2003
From: stuart.hungerford at anu.edu.au (Stuart Hungerford)
Date: Fri, 09 May 2003 10:49:26 +1000
Subject: [Twisted-Python] Should this example code run?
Message-ID: <5.2.0.9.0.20030509104442.023c7ed0@anusf.anu.edu.au>

Hi all,

I'm working my way through the twisted.web documentation
and came across this snippet (to be saved in a ".rpy" file):



from twisted.web.resource import Resource

class Hello(Resource):
     def getChild(self, name, request):
         if name == '':
             return self
         return Resource.getChild(self, name, request)

         def render(self, request):
             return """<html> Hello, world! I am located at %s. 
</html>"""  % (request.prepath)

resource = Hello()


The original snippet had a "%r" format string which I'm assuming
was meant to be "%s".  When I access this .rpy file twisted web
reports a stack dump with:


web.Server Traceback (most recent call last):

exceptions.NotImplementedError: __builtin__.Hello.render called

/opt/Twisted-1.0.4/twisted/web/server.py, line 153 in process
151    try:
152      resrc = self.site.getResourceFor(self)
153      self.render(resrc)
154    except:
Self
site
twisted.web.server.Site instance @ 0x365110 <twisted.web.server.Site 
instance at 0x365110>
Locals
resrc
__builtin__.Hello instance @ 0x467ec0 <__builtin__.Hello instance at 0x467ec0>
self
twisted.web.server.Request instance @ 0x48c920 <GET /test2.rpy HTTP/1.1>



Can someone enlighten me on the cause of the error?


Cheers,

Stu

--
:: Stuart Hungerford (stuart.hungerford at anu.edu.au)
:: ANU Internet Futures Group




From twisted at eholm.com  Thu May  8 21:42:04 2003
From: twisted at eholm.com (Eric Holm)
Date: Thu, 08 May 2003 18:42:04 -0700
Subject: [Twisted-Python] Woven (microdom?) problem
Message-ID: <ud6isyjyr.fsf@eholm.com>

I'm having some trouble with the following (at the very
end of this mail) Woven script/html.  My problem is
that the line:

<script language="JavaScript" src="Refresh.js"></script>

is re-written by Woven (microdom?) to:

<script language="JavaScript" src="Refresh.js" />

which apparently isn't kosher (at least as far as
IE and Opera are concerned).  If I point my browser to
Minimal.html, it works fine, if I point it to
Minimal.rpy, the browser barfs due to the rewrite.

I'm using Twisted 1.0.3 on Win2k, Python 2.2.
Any help would be most appreciated.

Thanks,


Eric.


*** Minimal.html:
<html>
<head>
<script language="JavaScript" src="Refresh.js"></script>
</head>

<body onload="doLoad()">
The time is: <span model="TimeTest" view="Text">hh:mm:ss</span>
</body>
</html>


*** Minimal.rpy:
from twisted.web.woven import model, page, widgets
import time

model = model.AttributeModel()
model.setSubmodel( "TimeTest", time.asctime() )

resource = page.Page(model, templateFile="Minimal.html")


*** Refresh.js (FWIW):
var sURL = unescape(window.location.pathname);

function doLoad()
{
    setTimeout( "refresh()", 10*1000 );
}

function refresh()
{
    window.location.href = sURL;
}




From bob at redivi.com  Thu May  8 21:47:35 2003
From: bob at redivi.com (Bob Ippolito)
Date: Thu, 8 May 2003 21:47:35 -0400
Subject: [Twisted-Python] Woven (microdom?) problem
In-Reply-To: <ud6isyjyr.fsf@eholm.com>
Message-ID: <351BB2A2-81C0-11D7-8B50-000A95686CD8@redivi.com>

On Thursday, May 8, 2003, at 21:42 America/New_York, Eric Holm wrote:

> I'm having some trouble with the following (at the very
> end of this mail) Woven script/html.  My problem is
> that the line:
>
> <script language="JavaScript" src="Refresh.js"></script>
>
> is re-written by Woven (microdom?) to:
>
> <script language="JavaScript" src="Refresh.js" />
>
> which apparently isn't kosher (at least as far as
> IE and Opera are concerned).  If I point my browser to
> Minimal.html, it works fine, if I point it to
> Minimal.rpy, the browser barfs due to the rewrite.
>
> I'm using Twisted 1.0.3 on Win2k, Python 2.2.
> Any help would be most appreciated.

I just took at look at microdom in CVS and it shouldn't do that 
anymore.  I don't recall when that bug was fixed, but try out CVS or 
1.0.5rc2.

-bob




From ecn at metaslash.com  Thu May  8 21:56:45 2003
From: ecn at metaslash.com (Eric C. Newton)
Date: Thu, 8 May 2003 21:56:45 -0400
Subject: [Twisted-Python] pcp.ProducerConsumerProxy.resumeProducing
Message-ID: <20030509015645.GA3694@localhost.localdomain>

Linux RedHat 9.0
Twisted 1.0.4

In method resumeProducing of pcp.ProducerConsumerProxy, there's this
code:

        if self.producer is not None:
            bytesBuffered = reduce(operator.add,
                                   [len(s) for s in self._buffer], 0)
            # TODO: You can see here the potential for high and low
            # watermarks, where bufferSize would be the high mark when we
            # ask the upstream producer to pause, and we wouldn't have
            # it resume again until it hit the low mark.  Or if producer
            # is Pull, maybe we'd like to pull from it as much as necessary
            # to keep our buffer full to the low mark, so we're never caught
            # without something to send.
            if self.producerPaused and (bytesBuffered < self.bufferSize):
                # Now that our buffer is empty,
                self.producerPaused = False
                self.producer.resumeProducing()
            elif self.outstandingPull:
                # I did not have any data to write in response to a pull,
                # so I'd better pull some myself.
                self.producer.resumeProducing()

At the condition:

            elif self.outstandingPull:

It's possible that the producer is sending data in big chunks, and we
are only writing them out in little chunks.  If so, we continue to add
bytes to the buffer and disregard the buffer limit.  I've changed the
line to this:

            elif self.outstandingPull and (bytesBuffered < self.bufferSize):

and all is well.  Except maybe the code should be refactored (without
comments now):

	    if bytesBuffered < self.bufferSize:
		if self.producerPaused or self.outstandingPull:
		    self.producer.resumeProducing()
		self.producerPaused = False

-Eric



From arashi1 at pd.jaring.my  Thu May  8 22:00:50 2003
From: arashi1 at pd.jaring.my (Mukhsein Johari)
Date: Fri, 9 May 2003 10:00:50 +0800
Subject: [Twisted-Python] how to use --index= and doc vagueness
Message-ID: <200305091000.50528.arashi1@pd.jaring.my>

Hello all,

I'm trying to understand how the twisted web is supposed to work. I'm using 
the web tap and have a public_html dir where I place all the html and .rpy 
files.

The --help for web does not seem clear to me. How do I make t.w use an rpy to 
be used instead of an index or index.html for when one goes to:

http://www.mysite.com

As it is, mozilla times out with some kind of strange redirection error if I 
don't have index or index.html

Using the --resource-script=index.rpy (that's what I call the default .rpy 
file) option and placing the index.rpy file in public_html does not work. 
Twisted complains about not find the file even though it's in the very 
directory that it normally finds html and rpy files.

pointing browser to

http://www.mysite.com/index.rpy works though.

Lastly, documentation vagueness.
In the Twisted 1.0.5rc2 docs - about Twisted web, the section about virtual 
hosts. What does it mean by simply "drop vhost.rpy" ? Where exactly are you 
supposed to drop that file?

Could we also have more of an explanation of the virtual host directive? I 
mean, state:

eg. Lets say we want to host virtually the domains:

customerx.com
customerz.org

have a dirs called

/customerx
/customerz

On the real host myserver.com (all on one machine)

XXXXXX -> here we should state how to set up the virtual host (the addHost() 
method) and where to put the public_html dirs.

Cheers,
Mukhsein



From twisted at eholm.com  Thu May  8 22:04:03 2003
From: twisted at eholm.com (Eric Holm)
Date: Thu, 08 May 2003 19:04:03 -0700
Subject: [Twisted-Python] Woven (microdom?) problem
In-Reply-To: <351BB2A2-81C0-11D7-8B50-000A95686CD8@redivi.com>
References: <351BB2A2-81C0-11D7-8B50-000A95686CD8@redivi.com>
Message-ID: <u8ytgyiy4.fsf@eholm.com>

> I just took at look at microdom in CVS and it shouldn't 
> do that anymore.  I don't recall when that bug was fixed,
> but try out CVS or 1.0.5rc2.
>
Will do, thanks!


Eric.






From dp at twistedmatrix.com  Thu May  8 23:59:32 2003
From: dp at twistedmatrix.com (Donovan Preston)
Date: Thu, 8 May 2003 20:59:32 -0700
Subject: [Twisted-Python] Should this example code run?
In-Reply-To: <5.2.0.9.0.20030509104442.023c7ed0@anusf.anu.edu.au>
Message-ID: <A441960A-81D2-11D7-960E-00039376B1AE@twistedmatrix.com>

On Thursday, May 8, 2003, at 05:49 PM, Stuart Hungerford wrote:

> Hi all,
>
> I'm working my way through the twisted.web documentation
> and came across this snippet (to be saved in a ".rpy" file):

<snip>

> Can someone enlighten me on the cause of the error?

I copied and pasted the exact code out of an email and got the same 
error. It turned out to be a tabs vs. spaces issue in that code. The 
render method was being defined *inside* the getChild method, and not 
on the Hello class. Try turning on invisible characters in your 
favorite editor and making sure the whole file uses spaces and that the 
def render(...) line is indented to 4 spaces.

Pretty silly, I wonder if this was in the original documentation file 
itself? I'll take a look.

Thanks for the report!

Donovan




From warner at lothar.com  Fri May  9 01:00:15 2003
From: warner at lothar.com (Brian Warner)
Date: Thu, 08 May 2003 22:00:15 -0700 (PDT)
Subject: [Twisted-Python] pb size limitation
References: <CD708032-809B-11D7-A0CA-000A95686CD8@redivi.com>
Message-ID: <20030508.220015.59474189.warner@lothar.com>

> > If you really do want to change the size limit for banana, you can do it
> > per-process (patches to properly parameterize this accepted) by changing
> > banana.SIZE_LIMIT.
> 
> Just curious, but is this settable with cBanana?

No, not really. We could make it a modifiable attribute, but I'd rather not
for the same reasons described before, plus the fact that sending more than a
few tens of kb in a single banana token is just going to get queued anyway,
as the socket buffers aren't usually very big.

Banana is meant for sensibly-sized pieces of data. Bulk file transfer should
be built on top of it.

 -Brian



From dp at twistedmatrix.com  Fri May  9 01:55:40 2003
From: dp at twistedmatrix.com (Donovan Preston)
Date: Thu, 8 May 2003 22:55:40 -0700
Subject: [Twisted-Python] how to use --index= and doc vagueness
In-Reply-To: <200305091000.50528.arashi1@pd.jaring.my>
Message-ID: <DD4A80A1-81E2-11D7-960E-00039376B1AE@twistedmatrix.com>

On Thursday, May 8, 2003, at 07:00 PM, Mukhsein Johari wrote:

> As it is, mozilla times out with some kind of strange redirection 
> error if I
> don't have index or index.html

This is a weird bug with the interaction of page.Page (which I assume 
you are using) and --resource-script. If you create your resource and 
then set the addSlash attribute to 0 it should help solve it:

resource = page.Page("hello", templateFile="SomeTemplate.html")
resource.addSlash = 0

Basically, Page by default tries to redirect to the same url with a 
slash at the end, but when a Page is the root resource the test that 
tests to see if there is a slash is never True.

Thomas Raschbacher had this problem before, I should have fixed this 
properly earlier. Sorry about it.

> Using the --resource-script=index.rpy (that's what I call the default 
> .rpy
> file) option and placing the index.rpy file in public_html does not 
> work.
> Twisted complains about not find the file even though it's in the very
> directory that it normally finds html and rpy files.

The file you specify as the --resource-script should be either a full, 
absolute path or a relative path to the file from the directory you run 
mktap in (I believe.)

Also, I believe --resource-script and --path are mutually exclusive. 
(I'm not totally sure though...) Using --resource-script will put the 
resource generated by the .rpy at the root of the Resource tree. Using 
--path will put a twisted.web.static.File pointing to the file or 
directory specified at the root of the Resource tree.

Donovan




From dp at twistedmatrix.com  Fri May  9 02:13:57 2003
From: dp at twistedmatrix.com (Donovan Preston)
Date: Thu, 8 May 2003 23:13:57 -0700
Subject: [Twisted-Python] how to use --index= and doc vagueness
In-Reply-To: <DD4A80A1-81E2-11D7-960E-00039376B1AE@twistedmatrix.com>
Message-ID: <6B5FF5D8-81E5-11D7-960E-00039376B1AE@twistedmatrix.com>

On Thursday, May 8, 2003, at 10:55 PM, Donovan Preston wrote:

> This is a weird bug with the interaction of page.Page (which I assume 
> you are using) and --resource-script. If you create your resource and 
> then set the addSlash attribute to 0 it should help solve it:
>
> resource = page.Page("hello", templateFile="SomeTemplate.html")
> resource.addSlash = 0
>
> Basically, Page by default tries to redirect to the same url with a 
> slash at the end, but when a Page is the root resource the test that 
> tests to see if there is a slash is never True.
>
> Thomas Raschbacher had this problem before, I should have fixed this 
> properly earlier. Sorry about it.

Fixed in CVS. addSlash=0 should no longer be required in this case with 
CVS twisted.

Donovan




From jheintz at isogen.com  Thu May  8 17:38:53 2003
From: jheintz at isogen.com (John D. Heintz)
Date: 08 May 2003 16:38:53 -0500
Subject: [Twisted-Python] How would I upload/download files through
	twisted.web
In-Reply-To: <1052159370.618.13.camel@shire>
References: <1052159370.618.13.camel@shire>
Message-ID: <1052429933.3188.10.camel@shire>

Any help of this issue? I've got a good feeling about twisted but:

a) don't have time to explore http and twisted
b) don't yet completely grok the asyncronous flow

If I can get an http upload/downloader working I can you Twisted on a
project for a customer to get a  better performing web server than the
BaseHTTPServer from python.

Thanks for your time,
John

On Mon, 2003-05-05 at 13:29, John D. Heintz wrote:
> Hi all,
> 
> I tried searching the mailing list and google but ended up more
> confused. Sorry if this is in the docs and I missed it, just redirect
> me.
> 
> Question: How do I write a simple twisted.web server to receive an
> uploaded file, process it, and return a different file for
> download/launch.
> 
> The last part does have some examples, but I include it hear for
> completeness.
> 
> My intuition tells me that this kind of thing is "trivial" in twisted,
> but I'm having a hard time unraveling the knot. I started working on a
> custom Resource but only got so far.
> 
> Can someone post a small python script (like web.py in examples) that
> does this?
> 
> Thanks for the time,
> John
> 
> -- 
> John D. Heintz | Senior Developer
> 
> 1016 La Posada Dr. | Suite 240 | Austin TX 78752
> T 512.380.0347 | jheintz at isogen.com
> 
> http://www.isogen.com
-- 
John D. Heintz | Senior Developer

1016 La Posada Dr. | Suite 240 | Austin TX 78752
T 512.380.0347 | jheintz at isogen.com

http://www.isogen.com




From smurf at noris.de  Fri May  9 09:38:20 2003
From: smurf at noris.de (Matthias Urlichs)
Date: Fri, 09 May 2003 15:38:20 +0200
Subject: [Twisted-Python] Timeout protocol wrapper broken
Message-ID: <pan.2003.05.09.13.38.18.987949@smurf.noris.de>

Summary: I want to use Python 2.2 and multiple inheritance here,
or at least a __getattr__-style pass-everything approach.

Interim fix (I guess nobody tried this with a Web server yet...):

--- 1.8/twisted/protocols/policies.py   Thu Apr 10 07:03:51 2003
+++ edited/twisted/protocols/policies.py        Fri May  9 15:22:04 2003
@@ -90,6 +90,12 @@
         self.wrappedFactory = wrappedFactory
         self.protocols = {}

+    def startFactory(self):
+        self.wrappedFactory.startFactory()
+
+    def stopFactory(self):
+        self.wrappedFactory.stopFactory()
+
     def startedConnecting(self, connector):
         self.wrappedFactory.startedConnecting(connector)



-- 
Matthias



From andrew-twisted at puzzling.org  Fri May  9 10:56:56 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sat, 10 May 2003 00:56:56 +1000
Subject: [Twisted-Python] Timeout protocol wrapper broken
In-Reply-To: <pan.2003.05.09.13.38.18.987949@smurf.noris.de>
References: <pan.2003.05.09.13.38.18.987949@smurf.noris.de>
Message-ID: <20030509145656.GA27584@frobozz.local>

On Fri, May 09, 2003 at 03:38:20PM +0200, Matthias Urlichs wrote:
> Summary: I want to use Python 2.2 and multiple inheritance here,
> or at least a __getattr__-style pass-everything approach.
> 
> Interim fix (I guess nobody tried this with a Web server yet...):

Thanks for the report!

Fixing the TimeoutWrapper to work as a mixin has been on my todo list for a
while -- the main reason being so that we can cleanly integrate it into our
web server :)

I expect to have time to work on it this weekend.

-Andrew.




From smurf at noris.de  Fri May  9 11:02:30 2003
From: smurf at noris.de (Matthias Urlichs)
Date: Fri, 09 May 2003 17:02:30 +0200
Subject: [Twisted-Python] Resource.render() returning NOT_DONE_YET
References: <20030428160935.GA68316@doublegemini.com>
Message-ID: <pan.2003.05.09.15.02.30.140897@smurf.noris.de>

Hi,

Clark C. Evans schrub am Mon, 28 Apr 2003 16:09:35 +0000:
>   2.  Alternatively, allow a Deferred to be a return
>       value.  Then the underlying caller can add result.finish() to the
>       deferred chain.   This has the advantage of not requiring finish()
>       to really be managed.

I think that wouldn't work. Consider:

	def render(self,req):
		d = somewhere.GetDeferredData()
		d.addCallback(self.render_more,req)
		return d
	def render_more(self,data,req):
		d = somewhere.GetMoreDeferredData(data)
		d.addCallback(self.render_even_more,req)
		return d
	def render_even_more(self,data,req):
		req.write("Done!")

This ends up calling req.finish() befor req.write().

-- 
Matthias



From twisted at eholm.com  Fri May  9 12:19:17 2003
From: twisted at eholm.com (Eric Holm)
Date: Fri, 09 May 2003 09:19:17 -0700
Subject: [Twisted-Python] Woven (microdom?) problem
In-Reply-To: <351BB2A2-81C0-11D7-8B50-000A95686CD8@redivi.com>
References: <351BB2A2-81C0-11D7-8B50-000A95686CD8@redivi.com>
Message-ID: <u4r443xfe.fsf@eholm.com>

> I just took at look at microdom in CVS and it shouldn't 
> do that anymore.  I don't recall when that bug was fixed,
> but try out CVS or 1.0.5rc2.
>
I tried 1.0.5rc2, and while it's not rewriting the </script> 
now, it's not working either, and I'm at a complete loss as 
to why.  IE gives a typical-but-useless "Line 1, Char 1, 
Object expected" error. If I view the source of the page 
that IE is choking on, save it untouched as "Minimal2.html", 
then IE displays "Minimal2.html" just fine.

This javascript thing is a tangent for me that's gotten out 
of hand, so for now I'll just assume that Woven and 
javascript don't mix, at least until I have some time to 
dig deeper.

Thanks,


Eric.




From mario at ruggier.org  Fri May  9 13:09:26 2003
From: mario at ruggier.org (Mario Ruggier)
Date: Fri, 9 May 2003 19:09:26 +0200
Subject: [Twisted-Python] Woven (microdom?) problem
In-Reply-To: <u4r443xfe.fsf@eholm.com>
Message-ID: <FD418EB2-8240-11D7-A380-000393756786@ruggier.org>

On vendredi, mai 9, 2003, at 18:19 Europe/Amsterdam, Eric Holm wrote:
>> I just took at look at microdom in CVS and it shouldn't
>> do that anymore.  I don't recall when that bug was fixed,
>> but try out CVS or 1.0.5rc2.
>>
> I tried 1.0.5rc2, and while it's not rewriting the </script>
> now, it's not working either, and I'm at a complete loss as
> to why.  IE gives a typical-but-useless "Line 1, Char 1,
> Object expected" error. If I view the source of the page
> that IE is choking on, save it untouched as "Minimal2.html",
> then IE displays "Minimal2.html" just fine.

Is he finding the js file?
Try specifying the server abs filepath to the js...

As for the <script> closing tag -- one trick that has worked
sometimes is to stick an empty comment <!-- --> as content, which
forces XML parsers to write out the closing tag and not the shorthand
for it. IE and other browsers I have tried it on seem to accept it fine,
i.e. they load the js file given by @src.

mario

> This javascript thing is a tangent for me that's gotten out
> of hand, so for now I'll just assume that Woven and
> javascript don't mix, at least until I have some time to
> dig deeper.





From mario at ruggier.org  Fri May  9 19:37:09 2003
From: mario at ruggier.org (Mario Ruggier)
Date: Sat, 10 May 2003 01:37:09 +0200
Subject: [Twisted-Python] How would I upload/download files through twisted.web
In-Reply-To: <1052429933.3188.10.camel@shire>
Message-ID: <27020570-8277-11D7-A380-000393756786@ruggier.org>

Not sure what you mean, but file upload may be done like so:

## fileup.rpy

import twisted.web.resource

class FileUpResource(twisted.web.resource.Resource):

     isLeaf = 1

     def render(self, request):
         request.setHeader('Content-Type', 'text/html; charset=utf-8')
         args = request.args
         pageTitle = 'file upload test'

         return (u"""
<html>
   <head>
     <title>%(pageTitle)s</title>
     <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
   </head>
   <body>
     <h1>%(pageTitle)s</h1>
     <form method="post" enctype="multipart/form-data">
     <table>
     <tr><td> file: </td><td> <input name='file' type='file'> </td></tr>
     </table>
     <input type=submit>
     </form>
     <hr/>
     <p>Form args:<br/>%(args)s</p>
     <hr/>
     </body>
</html>""" % vars()).encode()

resource = FileUpResource()

##


On jeudi, mai 8, 2003, at 23:38 Europe/Amsterdam, John D. Heintz wrote:

> Any help of this issue? I've got a good feeling about twisted but:
>
> a) don't have time to explore http and twisted
> b) don't yet completely grok the asyncronous flow
>
> If I can get an http upload/downloader working I can you Twisted on a
> project for a customer to get a  better performing web server than the
> BaseHTTPServer from python.
>
> Thanks for your time,
> John
>
> On Mon, 2003-05-05 at 13:29, John D. Heintz wrote:
>> Hi all,
>>
>> I tried searching the mailing list and google but ended up more
>> confused. Sorry if this is in the docs and I missed it, just redirect
>> me.
>>
>> Question: How do I write a simple twisted.web server to receive an
>> uploaded file, process it, and return a different file for
>> download/launch.
>>
>> The last part does have some examples, but I include it hear for
>> completeness.
>>
>> My intuition tells me that this kind of thing is "trivial" in twisted,
>> but I'm having a hard time unraveling the knot. I started working on a
>> custom Resource but only got so far.
>>
>> Can someone post a small python script (like web.py in examples) that
>> does this?
>>
>> Thanks for the time,
>> John
>>
>> -- 
>> John D. Heintz | Senior Developer
>>
>> 1016 La Posada Dr. | Suite 240 | Austin TX 78752
>> T 512.380.0347 | jheintz at isogen.com
>>
>> http://www.isogen.com
> -- 
> John D. Heintz | Senior Developer
>
> 1016 La Posada Dr. | Suite 240 | Austin TX 78752
> T 512.380.0347 | jheintz at isogen.com
>
> http://www.isogen.com
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
Best regards,

	Mario Ruggier

email      mario at ruggier.org
home      +33 4 50 41 96 14
mobile    +41 79 214 0791




From smurf at noris.de  Fri May  9 21:32:37 2003
From: smurf at noris.de (Matthias Urlichs)
Date: Sat, 10 May 2003 03:32:37 +0200
Subject: [Twisted-Python] x-www-urlencoded information loss
Message-ID: <pan.2003.05.10.01.32.36.844958@smurf.noris.de>

Hi,

if somebody uploads a file, the x-url-encoded part with the file data
typically has an extended header along the lines of

-----some-boundary
Content-Disposition: form-data; name="file"; filename="foo.txt"
Content-Type: application/octet-stream

...the.actual.contents...
-----some-boundary

At the moment, Twisted doesn't seem to store that information (i.e.,
filename and content-type) anywhere. I consider that to be a bug; I don't
want to de-MIMEify the content a second time.

To fix this, the arguments should probably acquire their own "headers"
hash. For instance, in the above example:

request.args["file"][0].headers = \
    {"content-type":       ["application/octet-stream"],
     "Content-Disposition":["form-data; name=\"file\";
     filename=\"foo.txt\""]}

That would require to use a subclass of "str" for the arguments (you can't
directly attach a property to a string), but with Python 2.2 this should
be nicely transparent.

-- 
Matthias



From astreib at indiana.edu  Fri May  9 21:50:50 2003
From: astreib at indiana.edu (Allan Streib)
Date: Fri, 9 May 2003 20:50:50 -0500 (EST)
Subject: [Twisted-Python] Using adbapi w/Sybase stored procs
Message-ID: <Pine.LNX.4.51.0305092021410.17491@garp.ucs.indiana.edu>

Sybase stored procedures can return tabular results like a SQL query can.
This is unlike stored procedures in Oracle (not sure about other DBMSs)

I found (in 1.0.4) that I could not invoke such a procedure with the
runQuery method.  I developed the following subclasses that add a
"callProc" method which calls the procedure and fetches the results.

I could easily have added these methods to enterprise/adbapi.py but I
don't like to run locally modified distributions so I went the subclass
route for my needs.  Thought I'd share this so that someone could possbly
add it to the distribution.

I used this with the Sybase module for Python from Object Craft[1]

from twisted.enterprise import adbapi
from twisted.internet import defer, threads

class SybaseConnectionPool(adbapi.ConnectionPool):
    def __init__(self, dbapiName, *connargs, **connkw):
        apply(adbapi.ConnectionPool.__init__,
              (self, dbapiName) + connargs, connkw)

    def _callProc(self, args, kw):
        conn = self.connect()
        curs = conn.cursor()
        try:
            apply(curs.callproc, args, kw)
            result = curs.fetchall()
            curs.close()
            conn.commit()
        except:
            conn.rollback()
        return result

    def procedure(self, callback, errback, *args, **kw):
        threads.deferToThread(self._callProc, args, kw).addCallbacks(
            callback, errback)

class SybaseAugmentation(adbapi.Augmentation):
    def __init__(self, dbpool):
        adbapi.Augmentation.__init__(self, dbpool)

    def callProc(self, *args, **kw):
        d = defer.Deferred()
        apply(self.dbpool.procedure, (d.callback, d.errback)+args, kw)
        return d

The code to call a Sybase stored proc then looks like (patterned after the
example in the Twisted Book):

dbpool = SybaseConnectionPool("Sybase", "syb_server", "user", "pass")

class SybaseDatabase(SybaseAugmentation):
    def myProc(self, myArg):
	# A one-argument stored procedure...
        return self.callProc("dbname..my_proc", [myArg])

def gotResults(resultlist):
    """Callback for handling the result of the procedure"""
    print `resultlist`

db = SybaseDatabase(dbpool)
# These will *not* block. Hooray!

db.myProc("foo").addCallbacks(gotResults, db.operationError)

# Of course, nothing will happen until the reactor is started
from twisted.internet import reactor
reactor.run()


References:
 [1] http://www.object-craft.com.au/projects/sybase/

Allan
--
"If you understand what you're doing, you're not learning anything."
                                                -- Anonymous



From cce at clarkevans.com  Fri May  9 23:22:23 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Sat, 10 May 2003 03:22:23 +0000
Subject: [Twisted-Python] Resource.render() returning NOT_DONE_YET
In-Reply-To: <pan.2003.05.09.15.02.30.140897@smurf.noris.de>
References: <20030428160935.GA68316@doublegemini.com> <pan.2003.05.09.15.02.30.140897@smurf.noris.de>
Message-ID: <20030510032223.GA4864@doublegemini.com>

On Fri, May 09, 2003 at 05:02:30PM +0200, Matthias Urlichs wrote:
| Clark C. Evans schrub am Mon, 28 Apr 2003 16:09:35 +0000:
| >   2.  Alternatively, allow a Deferred to be a return
| >       value.  Then the underlying caller can add result.finish() to the
| >       deferred chain.   This has the advantage of not requiring finish()
| >       to really be managed.
| 
| I think that wouldn't work. Consider:
| 
| 	def render(self,req):
| 		d = somewhere.GetDeferredData()
| 		d.addCallback(self.render_more,req)
| 		return d
| 	def render_more(self,data,req):
| 		d = somewhere.GetMoreDeferredData(data)
| 		d.addCallback(self.render_even_more,req)
| 		return d
| 	def render_even_more(self,data,req):
| 		req.write("Done!")
| 
| This ends up calling req.finish() befor req.write().

Just beacuse you can write code that will violate a
given protocol doesn't mean it's a bad protocol.  The
suggestion would work just fine... you just picked
a way to get around the intent of returning Deferred.

IMHO,

Clark



From smurf at noris.de  Sat May 10 04:01:15 2003
From: smurf at noris.de (Matthias Urlichs)
Date: Sat, 10 May 2003 10:01:15 +0200
Subject: [Twisted-Python] twisted web, documentation
References: <59720C230F8BC54098777277F5E1068881C2D5@fininfomail.fininfo.grp> <20030425071624.GE15695@frobozz.local>
Message-ID: <pan.2003.05.10.08.01.15.314573@smurf.noris.de>

Hi,

Andrew Bennetts schrub am Fri, 25 Apr 2003 07:16:25 +0000:
> There will be a whole bunch of new, up-to-date docs on Woven in CVS within a
> week.  I believe this includes a general tutorial and stuff about using
> forms.
> 
Excellent!

> If you can, wait until we've got those docs ready.  Otherwise, you could try
> asking for advice on #twisted on irc.freenode.net, which is currently the
> best place for Woven docs (until the new docs get checked in...)
> 
How about a link to the not-quite-ready docs?

-- 
Matthias



From m at moshez.org  Sat May 10 04:21:45 2003
From: m at moshez.org (Moshe Zadka)
Date: 10 May 2003 08:21:45 -0000
Subject: [Twisted-Python] twisted web, documentation
In-Reply-To: <pan.2003.05.10.08.01.15.314573@smurf.noris.de>
References: <pan.2003.05.10.08.01.15.314573@smurf.noris.de>, <59720C230F8BC54098777277F5E1068881C2D5@fininfomail.fininfo.grp> <20030425071624.GE15695@frobozz.local>
Message-ID: <20030510082145.6888.qmail@green.zadka.com>

On Sat, 10 May 2003, "Matthias Urlichs" <smurf at noris.de> wrote:

> Andrew Bennetts schrub am Fri, 25 Apr 2003 07:16:25 +0000:

Note the 15 days of lag. Also, this is an English-language mailing list.
Kindly configure your software to produce English verbiage, so that
people are not expected to understand random language.

> > There will be a whole bunch of new, up-to-date docs on Woven in CVS within a
> > week.

So, in April 25th, Andrew claimed there will be docs in CVS within a week.
Had you bothered checking, you would have seen that not only have the docs
made it to CVS, but that they are actually in the 1.0.5 book, in a chapter
named, in a surprise move, "Woven".
See <URL:http://www.twistedmatrix.com/documents/howto/>

Thanks a lot to Donovan and Allen for the hard work in writing those
documents, and thanks to Andrew for converting them into Lore and
integrating them into the book!

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From smurf at noris.de  Sat May 10 06:19:16 2003
From: smurf at noris.de (Matthias Urlichs)
Date: Sat, 10 May 2003 12:19:16 +0200
Subject: [Twisted-Python] twisted web, documentation
References: <pan.2003.05.10.08.01.15.314573@smurf.noris.de> <59720C230F8BC54098777277F5E1068881C2D5@fininfomail.fininfo.grp> <20030425071624.GE15695@frobozz.local> <20030510082145.6888.qmail@green.zadka.com>
Message-ID: <pan.2003.05.10.10.19.15.813057@smurf.noris.de>

Hi,

Moshe Zadka:
> Note the 15 days of lag. Also, this is an English-language mailing list.

Sorry about that.

> So, in April 25th, Andrew claimed there will be docs in CVS within a week.
> Had you bothered checking, you would have seen that not only have the docs
> made it to CVS, but that they are actually in the 1.0.5 book, in a chapter
> named, in a surprise move, "Woven".

I saw the missing "forms/guard in depth" link and seem to have concluded
erroneously that this has in fact not happened.

-- 
Matthias



From m at moshez.org  Sat May 10 07:05:45 2003
From: m at moshez.org (Moshe Zadka)
Date: 10 May 2003 11:05:45 -0000
Subject: [Twisted-Python] twisted web, documentation
In-Reply-To: <pan.2003.05.10.10.19.15.813057@smurf.noris.de>
References: <pan.2003.05.10.10.19.15.813057@smurf.noris.de>, <pan.2003.05.10.08.01.15.314573@smurf.noris.de> <59720C230F8BC54098777277F5E1068881C2D5@fininfomail.fininfo.grp> <20030425071624.GE15695@frobozz.local> <20030510082145.6888.qmail@green.zadka.com>
Message-ID: <20030510110545.12791.qmail@green.zadka.com>

On Sat, 10 May 2003, "Matthias Urlichs" <smurf at noris.de> wrote:

> I saw the missing "forms/guard in depth" link and seem to have concluded
> erroneously that this has in fact not happened.

Documentation for form and guard have not, to the best of my knowledge,
been written yet.
 
-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From uwe at oss4u.com  Sat May 10 09:59:16 2003
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Sat, 10 May 2003 06:59:16 -0700
Subject: [Twisted-Python] Large Transfers
Message-ID: <200305100659.16865.uwe@oss4u.com>

Hi again,

in  another thread we had the "pb size limitation" issue. However it still 
doesn't make too much sense to me, so probably someone of the core developers 
can enlighten me.
Assume I have a remotecall using pb. According to the size limitation the 
parameters given to a specific function can not exceed 640kb. What if I hand 
over an object that exceeds the 640k ? Ok, the obvious happens and cBanana 
throws an error "security precaution ....."
Is this really a good thing to do ? Shouldn't pb see that the arguments are 
larger than 640k and start paging ?
What I'm doing is to hand down XML data which is database-generated on the 
server side. Whenever a user requests a too large resultset the network layer 
fails. On the other hand the resultset already is in memory, so why not jut 
transfer it ?
I realize that his is probably bad design, but it's the easiest way to 
transfer this information. Sure I can write the stuff to a temporary file and 
page it over, however this defies the purpose, since then the original call 
results in a message to go get the file. This means I need at least 4 
callbacks for any given call (the original ok callback, then another one for 
the possible paging as well as 2 error callbacks, one for each call)
I can extend the problem by compressing the parameters with zlib ( which I'm 
doing anyways), but at some point I will hit the limit.
The other problem this creates is a timing issue. Since I have to make several 
calls in order to transfer the resultset, I have to delay database calls 
until the whole resultset is valid.
To put it more technically:

self.perspective.transfer_large_result(small_int,label,large_result_array)

will fail if large_result_array exceeds 640k. However small_int and label can 
be transferred. The only way to do this is

if numberofbytes(large_result_set) >= 640k:
	
self.perspective.transfer_first_part(small_int,label).callback(self.smallpart_ok)

and in smallpart_ok

self.page_the_rest(large_result_array).callback(self.whole_stuff_transfered)

I can continue the flow of the application in whole_stuff_transfered, however 
I have to temporarily store the values of small_int and label, since I can't 
create a database record without the rest.

This is an enormous overhead.

What even strikes me more is that this size limit not even prevents large 
memory consumption - since the object is already there and in cBanana the 
object is already stored in the buffer.

So what makes is "more secure" to limit the size ??

I think I'll just remove all size limits and go thru the (unwanted) way to 
create a own package.


	UC

--
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417




From glyph at twistedmatrix.com  Sat May 10 10:31:52 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 10 May 2003 09:31:52 -0500
Subject: [Twisted-Python] Resource.render() returning NOT_DONE_YET
In-Reply-To: <20030510032223.GA4864@doublegemini.com>
Message-ID: <247A93DE-82F4-11D7-AD87-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Friday, May 9, 2003, at 10:22 PM, Clark C. Evans wrote:

> On Fri, May 09, 2003 at 05:02:30PM +0200, Matthias Urlichs wrote:
> | Clark C. Evans schrub am Mon, 28 Apr 2003 16:09:35 +0000:
> | I think that wouldn't work. Consider:

[some code which I basically repeat below]

> | This ends up calling req.finish() befor req.write().
>
> Just beacuse you can write code that will violate a
> given protocol doesn't mean it's a bad protocol.

While in theory he _could_, this example doesn't :-)  Chained Deferred 
results will make this Do The Right Thing.  To be sure, I asked the 
Python interpreter about it -

Python 2.2.2 (#1, 01/12/03, 07:51:34)
[GCC Apple cpp-precomp 6.14] on darwin
Type "help", "copyright", "credits" or "license" for more information.
 >>> from twisted.internet.defer import Deferred
 >>> def render(req):
...     d = somewhere.getDeferred()
...     d.addCallback(render_more, req)
...     return d
...
 >>> def render_more(result, req):
...     d = somewhere.getMoreDeferred(result)
...     d.addCallback(render_even_more, req)
...     return d
...
 >>> def render_even_more(result, req):
...     req.write("Done!")
...
 >>> class MyRequest:
...     def write(self, w):
...         self.events.append(('write', w))
...     def finish(self):
...         self.events.append('finish')
...
 >>> class Somewhere:
...     def getDeferred(self):
...         self.d1 = Deferred()
...         return self.d1
...     def getMoreDeferred(self, result):
...         self.d2 = Deferred()
...         return self.d2
...
 >>> somewhere = Somewhere()
 >>> def finishHim(lastResult, req):
...     req.finish()
...
 >>> def runIt():
...     r = MyRequest()
...     e = r.events = []
...     d = render(r)
...     d.addCallback(finishHim, r)
...     somewhere.d1.callback("result1")
...     somewhere.d2.callback("result2")
...     print e
...
 >>> runIt()
[('write', 'Done!'), 'finish']


-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+vQ1evVGR4uSOE2wRAkTIAKCESzfXgpQ5Ri5oYbjAqzlEt+xB7gCbBW+p
0FObyUElLwWVroj9lusUMR4=
=hzmx
-----END PGP SIGNATURE-----




From andrew-twisted at puzzling.org  Sat May 10 10:38:51 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sun, 11 May 2003 00:38:51 +1000
Subject: [Twisted-Python] Large Transfers
In-Reply-To: <200305100659.16865.uwe@oss4u.com>
References: <200305100659.16865.uwe@oss4u.com>
Message-ID: <20030510143851.GA29122@frobozz.local>

On Sat, May 10, 2003 at 06:59:16AM -0700, Uwe C. Schroeder wrote:
[..snip..]
> What I'm doing is to hand down XML data which is database-generated on the 
> server side. Whenever a user requests a too large resultset the network layer 
> fails. On the other hand the resultset already is in memory, so why not jut 
> transfer it ?
> I realize that his is probably bad design, but it's the easiest way to 
> transfer this information. Sure I can write the stuff to a temporary file and 
> page it over, however this defies the purpose, since then the original call 
> results in a message to go get the file. This means I need at least 4 

The PB paging support doesn't require you to write out to a file, look at
e.g. twisted.spread.pb.util.StringPager, the implementation is quite simple.

Does this solve your problem?  (I'm not a PB expert, so I can't really
answer your questions in depth).

-Andrew.




From itamar at itamarst.org  Sat May 10 10:50:31 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sat, 10 May 2003 10:50:31 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] Fix twistd(1) and friends on Windows.
In-Reply-To: <E19EUwv-00070a-00@pyramid.twistedmatrix.com>
References: <E19EUwv-00070a-00@pyramid.twistedmatrix.com>
Message-ID: <20030510105031.5210496c.itamar@itamarst.org>

On Sat, 10 May 2003 09:03:41 -0500
spiv CVS <spiv at twistedmatrix.com> wrote:
> 
> On Windows, twisted/script/* are run directly from batch files, rather
> than being imported from bin/*, so the "if __name__ == '__main__':
> run()" stanza is

This isn't totally accurate - the stuff in bin/ is installed in
c:\python22\scripts, and users are supposed to run them from there (eg
c:\python22\scripts\twistd.py).



From andrew-twisted at puzzling.org  Sat May 10 11:11:04 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sun, 11 May 2003 01:11:04 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] Fix twistd(1) and friends on Windows.
In-Reply-To: <20030510105031.5210496c.itamar@itamarst.org>
References: <E19EUwv-00070a-00@pyramid.twistedmatrix.com> <20030510105031.5210496c.itamar@itamarst.org>
Message-ID: <20030510151104.GB29122@frobozz.local>

On Sat, May 10, 2003 at 10:50:31AM -0400, Itamar Shtull-Trauring wrote:
> On Sat, 10 May 2003 09:03:41 -0500
> spiv CVS <spiv at twistedmatrix.com> wrote:
> > 
> > On Windows, twisted/script/* are run directly from batch files, rather
> > than being imported from bin/*, so the "if __name__ == '__main__':
> > run()" stanza is
> 
> This isn't totally accurate - the stuff in bin/ is installed in
> c:\python22\scripts, and users are supposed to run them from there (eg
> c:\python22\scripts\twistd.py).

Apparently this user was just running "twistd", no path or anything like
that.  mktap and trial worked fine for them, and twistd and lore, etc
didn't.  It turned out mktap and trial have the __name__ == '__main__' test
already, and that adding that to the rest of t.scripts fixed them, too.

My understanding was that the win32 installer auto-created batch files or
something, and supplied a "Twisted Command Prompt" with them in the path.
Certainly, adding "print 'I am', __name__" to this user's
twisted/scripts/twistd.py printed "I am __main__".  They were using the
1.0.5 from the installer and Python 2.2.2 on Win 98.

I don't have a Windows install to play with, so I'm working blind here --
please fix it differently if you think there's a better way to do this.  :)

-Andrew.




From m at moshez.org  Sat May 10 11:15:50 2003
From: m at moshez.org (Moshe Zadka)
Date: 10 May 2003 15:15:50 -0000
Subject: [Twisted-Python] Large Transfers
In-Reply-To: <200305100659.16865.uwe@oss4u.com>
References: <200305100659.16865.uwe@oss4u.com>
Message-ID: <20030510151550.22084.qmail@green.zadka.com>

On Sat, 10 May 2003, "Uwe C. Schroeder" <uwe at oss4u.com> wrote:

> in  another thread we had the "pb size limitation" issue. However it still 
> doesn't make too much sense to me, so probably someone of the core developers 
> can enlighten me.

The explanation is that the *other side* doesn't trust you -- maybe you're
trying to DoS it? This is a good design decision: you want multiple processes
to not trust each other. As an aside, whenever you hear the word "trust"
you should think "lack of security" -- by extension, "distrust" is "more
secure".

> Assume I have a remotecall using pb. According to the size limitation the 
> parameters given to a specific function can not exceed 640kb. What if I hand 
> over an object that exceeds the 640k ? Ok, the obvious happens and cBanana 
> throws an error "security precaution ....."

Yep. the cBanana on the other side decided that you looked like an evil
DoSer, and terminated you.

> Is this really a good thing to do ? Shouldn't pb see that the arguments are 
> larger than 640k and start paging ?

That's *way* to DWIMy, IMHO.

> What I'm doing is to hand down XML data which is database-generated on the 
> server side. Whenever a user requests a too large resultset the network layer 
> fails. On the other hand the resultset already is in memory, so why not jut 
> transfer it ?

Use StringPager. It's in memory. *Always* use StringPager, even if you're
below the security limit. 8k (by default) things will get transferred
in one go, larger strings will be sent in 8k chunks, allowing the other
side to digest them slowly without building big *intermediary* structures
in memory.

> So what makes is "more secure" to limit the size ??

That if your db-using process gets 0wned (if you pardon my trust),
it won't be able to drag down the other process.

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From m at moshez.org  Sat May 10 11:15:50 2003
From: m at moshez.org (Moshe Zadka)
Date: 10 May 2003 15:15:50 -0000
Subject: [Twisted-Python] Large Transfers
In-Reply-To: <200305100659.16865.uwe@oss4u.com>
References: <200305100659.16865.uwe@oss4u.com>
Message-ID: <20030510151550.22084.qmail@green.zadka.com>

On Sat, 10 May 2003, "Uwe C. Schroeder" <uwe at oss4u.com> wrote:

> in  another thread we had the "pb size limitation" issue. However it still 
> doesn't make too much sense to me, so probably someone of the core developers 
> can enlighten me.

The explanation is that the *other side* doesn't trust you -- maybe you're
trying to DoS it? This is a good design decision: you want multiple processes
to not trust each other. As an aside, whenever you hear the word "trust"
you should think "lack of security" -- by extension, "distrust" is "more
secure".

> Assume I have a remotecall using pb. According to the size limitation the 
> parameters given to a specific function can not exceed 640kb. What if I hand 
> over an object that exceeds the 640k ? Ok, the obvious happens and cBanana 
> throws an error "security precaution ....."

Yep. the cBanana on the other side decided that you looked like an evil
DoSer, and terminated you.

> Is this really a good thing to do ? Shouldn't pb see that the arguments are 
> larger than 640k and start paging ?

That's *way* to DWIMy, IMHO.

> What I'm doing is to hand down XML data which is database-generated on the 
> server side. Whenever a user requests a too large resultset the network layer 
> fails. On the other hand the resultset already is in memory, so why not jut 
> transfer it ?

Use StringPager. It's in memory. *Always* use StringPager, even if you're
below the security limit. 8k (by default) things will get transferred
in one go, larger strings will be sent in 8k chunks, allowing the other
side to digest them slowly without building big *intermediary* structures
in memory.

> So what makes is "more secure" to limit the size ??

That if your db-using process gets 0wned (if you pardon my trust),
it won't be able to drag down the other process.

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From miathan at goliath.darktech.org  Sat May 10 11:20:56 2003
From: miathan at goliath.darktech.org (W.J.)
Date: Sat, 10 May 2003 17:20:56 +0200 (CEST)
Subject: [Twisted-Python] components.Interface with pb.Referenceable
Message-ID: <Pine.LNX.4.44.0305101709560.5164-100000@zolder>

Hello,

I just can't seem to get some things straight about the Interface and
Component system used in Twisted.

Take for example Manhole;

The Interface defines three methods; console, receiveExplorer and
listCapabilities:

class IManholeClient(components.Interface):
    def console(self, list_of_messages):
    def receiveExplorer(self, xplorer):
    def listCapabilities(self):

In twisted/manhole/ui/gtk2manhole.py The class ManholeClient _claims_ to
implements this interface:

class ManholeClient(components.Adapter, pb.Referenceable):
    __implements__ = (IManholeClient,)

Well, strictly seen it doesn't. It defines the methods remote_console,
remote_receiveExplorer and remote_listCapabilities (!).

It does not define either of console, receiveExplorer and
listCapabilities.

What is the use of claiming it does implement it? Probably there is
something about interfaces used in the perspective broker that I don't
understand.

Why isn't there a different notation for remote and local
interfaces? Like ILocalManholeClient and IRemoteManholeClient, wherein the
first is like the current IManholeClient, and the second with
methods remote_ prefixes.

Wladimir





From glyph at twistedmatrix.com  Sat May 10 11:17:31 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 10 May 2003 10:17:31 -0500
Subject: [Twisted-Python] Large Transfers
In-Reply-To: <200305100659.16865.uwe@oss4u.com>
Message-ID: <8512E32F-82FA-11D7-AD87-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Saturday, May 10, 2003, at 08:59 AM, Uwe C. Schroeder wrote:

> Is this really a good thing to do ? Shouldn't pb see that the  
> arguments are
> larger than 640k and start paging ?

No, because this would violate lots of order-of-execution guarantees  
that PB normally provides.

Let's say that you did

	foo.callRemote("call1", "x" * 1024 * 1024)
	foo.callRemote("call2", "x")

You would expect 'call1' to execute before 'call2', right?  but no -  
because call1 began paging its arguments, call2 will be sent  
interleaved (the desired result for paged calls) and would execute  
first.

The same thing would be true of sending return values.

> What I'm doing is to hand down XML data which is database-generated on  
> the
> server side. Whenever a user requests a too large resultset the  
> network layer
> fails. On the other hand the resultset already is in memory, so why  
> not jut
> transfer it ?
> I realize that his is probably bad design

If your goal is to facilitate bad design with huge gobs of XML, PB is  
probably not for you.  There are a number of other protocols which are  
designed for exactly this kind of application - HTTP, XML/RPC, SOAP,  
depending on your level of complexity.  Twisted provides native support  
for the first 2, and SOAP could probably be added without too much  
trouble.

> , but it's the easiest way to
> transfer this information. Sure I can write the stuff to a temporary  
> file and
> page it over, however this defies the purpose, since then the original  
> call
> results in a message to go get the file. This means I need at least 4
> callbacks for any given call (the original ok callback, then another  
> one for
> the possible paging as well as 2 error callbacks, one for each call)

The error-handling needs to be improved, but this is what  
'twisted.spread.util.getAllPages' is for.  You only need one callback.

> I can extend the problem by compressing the parameters with zlib (  
> which I'm
> doing anyways), but at some point I will hit the limit.

Hard limits like this one should never be pushed so closely.  If your  
data is more than, say, 60k, you should probably be looking at paging  
it.  More than 500k and you are definitely abusing the protocol.

> The other problem this creates is a timing issue. Since I have to make  
> several
> calls in order to transfer the resultset, I have to delay database  
> calls
> until the whole resultset is valid.
> To put it more technically:
>
> self.perspective.transfer_large_result(small_int,label,large_result_arr 
> ay)
>
> will fail if large_result_array exceeds 640k. However small_int and  
> label can
> be transferred. The only way to do this is

> if numberofbytes(large_result_set) >= 640k:

Wrong.  If numberofbytes(large_result_set) + banana_epsilon(()) +  
pb_call_overhead ...

This is not a number that you can calculate reliably.  640k is a hard  
high limit.

> self.perspective.transfer_first_part(small_int,label).callback(self.sma 
> llpart_ok)

I don't understand.  Do you want to get the whole result at once?  Or  
do you want to send it only when necessary?  If you want to send it  
only when necessary then aren't these two steps required anyway?  If  
not, then can't you use the methods in twisted.spread.util to retrieve  
the pager when you would normally be retrieving a string, in the same  
step?

It would be helpful for my understanding if you would use real method  
names like "addCallback" and "callRemote" here.  I don't have any idea  
what 'self.perspective' is, or whether 'transfer_first_part' is  
supposed to be remote or local.

> and in smallpart_ok
>
> self.page_the_rest(large_result_array).callback(self.whole_stuff_transf 
> ered)

Again, not really sure what you're saying.  Why not -

	from twisted.spread import util
	util.getAllPages(serverThingy, "getStuff", small_int,  
label).addCallback(lambda l: ''.join(l)).addCallback(gotABigString)

> This is an enormous overhead.

as far as I understand it, the only overhead you require is that line  
above.  But I admit I do not understand it terribly well.

> What even strikes me more is that this size limit not even prevents  
> large
> memory consumption - since the object is already there and in cBanana  
> the
> object is already stored in the buffer.

Where is 'there'?

On the side of the connection that wishes to send the data, it's in  
memory.  If you modify the sending side locally, the whole string may  
even be in your outgoing buffer there, but on the receiving side only  
the beginning will be, since upon receiving the length it will  
terminate the connection.  (At least, I don't think TCP normally sends  
multi-megabyte packets.)

> I think I'll just remove all size limits and go thru the (unwanted)  
> way to create a own package.

Please, don't do this.  If PB is not working with your application, use  
something else.  This kind of a brute-force solution will undoubtedly  
cause problems down the road, and the people most suited to help you  
with them will not be interested in doing so.

There's nothing wrong with a hybrid approach, either.  You could  
transfer the file over HTTP rather than in the PB connection, but still  
use PB as your control protocol.  You could implement an even simpler  
file-transfer protocol reminiscent of HTTP/0.9 rather than use  
Twisted's full HTTP layer.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+vRgQvVGR4uSOE2wRAv60AJ46qvOBQAjiliEBKIAuGqP1vtibuwCff6DM
099lnO4JoOM0PphdHPK3+Ec=
=O9xE
-----END PGP SIGNATURE-----




From uwe at oss4u.com  Sat May 10 11:20:37 2003
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Sat, 10 May 2003 08:20:37 -0700
Subject: [Twisted-Python] Large Transfers
In-Reply-To: <20030510143851.GA29122@frobozz.local>
References: <200305100659.16865.uwe@oss4u.com> <20030510143851.GA29122@frobozz.local>
Message-ID: <200305100820.37149.uwe@oss4u.com>

You're right, it doesn't. However it still requires several calls to transfer 
the whole set. :-( And it has another problem. The pager makes it hard to 
give the user some response while uploading/downloading. The UI gets stuck, 
or at least appears to be since nothing is happening.
Basically I think pb should start paging whenever the argument list exceeds a 
certain size. I have no idea if paging is really neccessary, but I could 
think of some problems with blocking twisted while a non-paged transfer is in 
progress. This certainly depends on how the underlying transport is 
implemented. I'll do some tests with a modified twisted version and see if it 
gets too slow if a bunch of large transfers are in progress.


On Saturday 10 May 2003 07:38 am, Andrew Bennetts wrote:
> On Sat, May 10, 2003 at 06:59:16AM -0700, Uwe C. Schroeder wrote:
> [..snip..]
>
> > What I'm doing is to hand down XML data which is database-generated on
> > the server side. Whenever a user requests a too large resultset the
> > network layer fails. On the other hand the resultset already is in
> > memory, so why not jut transfer it ?
> > I realize that his is probably bad design, but it's the easiest way to
> > transfer this information. Sure I can write the stuff to a temporary file
> > and page it over, however this defies the purpose, since then the
> > original call results in a message to go get the file. This means I need
> > at least 4
>
> The PB paging support doesn't require you to write out to a file, look at
> e.g. twisted.spread.pb.util.StringPager, the implementation is quite
> simple.
>
> Does this solve your problem?  (I'm not a PB expert, so I can't really
> answer your questions in depth).
>
> -Andrew.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-- 
	UC

--
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417




From lafou at wanadoo.fr  Sat May 10 11:24:10 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: 10 May 2003 17:24:10 +0200
Subject: [Twisted-Python] Release notes for 1.0.5
Message-ID: <1052580243.10114.11.camel@biproc>

Hello,

the link in release notes for 1.0.5 is broken :

http://twistedmatrix.com/products/documents/howto/


-- 
Philippe Lafoucri?re <lafou at wanadoo.fr>
InFuzzion




From uwe at oss4u.com  Sat May 10 11:33:19 2003
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Sat, 10 May 2003 08:33:19 -0700
Subject: [Twisted-Python] Large Transfers
In-Reply-To: <20030510151550.22084.qmail@green.zadka.com>
References: <200305100659.16865.uwe@oss4u.com> <20030510151550.22084.qmail@green.zadka.com>
Message-ID: <200305100833.19899.uwe@oss4u.com>

On Saturday 10 May 2003 08:15 am, Moshe Zadka wrote:
> On Sat, 10 May 2003, "Uwe C. Schroeder" <uwe at oss4u.com> wrote:
> > in  another thread we had the "pb size limitation" issue. However it
> > still doesn't make too much sense to me, so probably someone of the core
> > developers can enlighten me.
>
> The explanation is that the *other side* doesn't trust you -- maybe you're
> trying to DoS it? This is a good design decision: you want multiple
> processes to not trust each other. As an aside, whenever you hear the word
> "trust" you should think "lack of security" -- by extension, "distrust" is
> "more secure".

agreed

> > Assume I have a remotecall using pb. According to the size limitation the
> > parameters given to a specific function can not exceed 640kb. What if I
> > hand over an object that exceeds the 640k ? Ok, the obvious happens and
> > cBanana throws an error "security precaution ....."
>
> Yep. the cBanana on the other side decided that you looked like an evil
> DoSer, and terminated you.
>
> > Is this really a good thing to do ? Shouldn't pb see that the arguments
> > are larger than 640k and start paging ?
>
> That's *way* to DWIMy, IMHO.

but it would be more convenient and transparent for the programmer not to have 
take care of paging :-)

> > What I'm doing is to hand down XML data which is database-generated on
> > the server side. Whenever a user requests a too large resultset the
> > network layer fails. On the other hand the resultset already is in
> > memory, so why not jut transfer it ?
>
> Use StringPager. It's in memory. *Always* use StringPager, even if you're
> below the security limit. 8k (by default) things will get transferred
> in one go, larger strings will be sent in 8k chunks, allowing the other
> side to digest them slowly without building big *intermediary* structures
> in memory.

The busines logic behind it simply gets way to complicated if I have to 
separate calls into "small" and "large" ones. It's complicated already ( 
approaching 100k lines of code) and if I have to split the stuff and put some 
logic in there that catches the large calls and pages them it will add 
another 5k lines of code.

>
> > So what makes is "more secure" to limit the size ??
>
> That if your db-using process gets 0wned (if you pardon my trust),
> it won't be able to drag down the other process.

Well, unlikely but not a bad asumption. Better have it safe.
Since my application will run inside a trusted environment only (behind 
firewalls in an intranet) I think I'll just remove the size limit. Any 
connection from the outside will have to use VPN anyways, since I'm a 
distrusting person and won't let anyone into "my" network.

	UC

--
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417




From glyph at twistedmatrix.com  Sat May 10 11:34:59 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 10 May 2003 10:34:59 -0500
Subject: [Twisted-Python] Large Transfers
In-Reply-To: <200305100820.37149.uwe@oss4u.com>
Message-ID: <F5C3B5AC-82FC-11D7-AD87-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Saturday, May 10, 2003, at 10:20 AM, Uwe C. Schroeder wrote:

> The pager makes it hard to give the user some response while 
> uploading/downloading.

You have got this exactly backwards.  If you want to implement 
upload/download notification of some sort (let's say, a progress bar) 
then you are going to need something that looks like a pager, and if 
one didn't exist you would have to write it yourself.

Now, for a progress bar, you will need to write your own pager, since 
you'll need to hook into the 'data received' notifications that you 
get; but this could be a trivial subclass of CallbackPageCollector.  
getAllPages won't work for you at that point, but it is only 3 lines of 
code; not a terrible burden to rewrite.

> The UI gets stuck,

Unless you have an intentionally broken UI, this is not true.  The 
event loop will be running and data-received callbacks will be 
happening, so nothing is "stuck".

> or at least appears to be since nothing is happening.

No visible indication of progress, you mean.  What would be happening 
if PB *weren't* paging?
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+vRwsvVGR4uSOE2wRApruAJoDetOe+E3HHXfxedqXsL2BouORdwCghG6y
VMf66WttRikqww924stdVcw=
=4j7Y
-----END PGP SIGNATURE-----




From andrew-twisted at puzzling.org  Sat May 10 11:36:28 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sun, 11 May 2003 01:36:28 +1000
Subject: [Twisted-Python] Large Transfers
In-Reply-To: <200305100820.37149.uwe@oss4u.com>
References: <200305100659.16865.uwe@oss4u.com> <20030510143851.GA29122@frobozz.local> <200305100820.37149.uwe@oss4u.com>
Message-ID: <20030510153628.GC29122@frobozz.local>

On Sat, May 10, 2003 at 08:20:37AM -0700, Uwe C. Schroeder wrote:
> You're right, it doesn't. However it still requires several calls to transfer 
> the whole set. :-( And it has another problem. The pager makes it hard to 
> give the user some response while uploading/downloading. The UI gets stuck, 
> or at least appears to be since nothing is happening.

(Untested code)

class ProgressReportingStringPager(StringPager):
    def __init__(self, ui, *args, **kwargs):
        self.ui = ui
        StringPager.__init__(self, *args, **kwargs)
        
    def nextPage(self):
        StringPager.nextPage(self)
        self.ui.reportProgress(self.pointer/len(self.string))

I haven't tried, but it looks like something like that code could easily
give you progress reporting from your pager.  The paging code is really
quite simple.

-Andrew.




From glyph at twistedmatrix.com  Sat May 10 11:46:33 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 10 May 2003 10:46:33 -0500
Subject: [Twisted-Python] Large Transfers
In-Reply-To: <200305100833.19899.uwe@oss4u.com>
Message-ID: <92FDDFC7-82FE-11D7-AD87-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Saturday, May 10, 2003, at 10:33 AM, Uwe C. Schroeder wrote:

>> That's *way* to DWIMy, IMHO.
>
> but it would be more convenient and transparent for the programmer not 
> to have take care of paging :-)

And surprising in corner cases, and very difficult to debug.  This is 
basically the same case for using large numbers of threads rather than 
an event-driven API.  This is not how Twisted works.

In fact, we have taken great care to describe PB as a "translucent" 
remote access API, never "transparent".  Transparency is explicitly not 
a goal.

>> Use StringPager. It's in memory. *Always* use StringPager, even if 
>> you're below the security limit.
>
> The busines logic behind it simply gets way to complicated if I have 
> to separate calls into "small" and "large" ones.

Your response implies you have inverted Moshe's meaning.  I think what 
Moshe was saying, in your terminology, is: 'Do not separate calls into 
"small" and "large" ones.  Treat all calls as "large".  In the lowere 
levels of Twisted, this will do a reasonably efficient thing even if 
the data is actually small, and it will not complicate your code.'

> if I have to split the stuff and put some logic in there that catches 
> the large calls and pages them it will add another 5k lines of code.

Given the expansion that we have repeatedly given using 
twisted.spread.util (this may turn 1 line into 3 lines, although in 
most cases it just makes a slightly longer line) this implies that you 
have at least 1600 separate lines where you are doing a callRemote that 
is directly retrieving a potentially large XML payload.  It seems like 
this is something which you could get quite a bit of benefit out of 
abstracting into a thinner interface.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+vR7svVGR4uSOE2wRAgweAJwLXwdczFVevEBloRK+rDB0bfEH3gCfcOWx
7MbwYxG/2/LctNJ5EPJYfFk=
=Ehit
-----END PGP SIGNATURE-----




From andrew-twisted at puzzling.org  Sat May 10 11:52:18 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sun, 11 May 2003 01:52:18 +1000
Subject: [Twisted-Python] Large Transfers
In-Reply-To: <200305100833.19899.uwe@oss4u.com>
References: <200305100659.16865.uwe@oss4u.com> <20030510151550.22084.qmail@green.zadka.com> <200305100833.19899.uwe@oss4u.com>
Message-ID: <20030510155218.GD29122@frobozz.local>

On Sat, May 10, 2003 at 08:33:19AM -0700, Uwe C. Schroeder wrote:
> On Saturday 10 May 2003 08:15 am, Moshe Zadka wrote:
> > On Sat, 10 May 2003, "Uwe C. Schroeder" <uwe at oss4u.com> wrote:
> >
> > > Is this really a good thing to do ? Shouldn't pb see that the arguments
> > > are larger than 640k and start paging ?
> >
> > That's *way* to DWIMy, IMHO.
> 
> but it would be more convenient and transparent for the programmer not to have 
> take care of paging :-)

PB isn't about transparency.  Remote method calls are fundamentally
different to local method calls -- they can be arbitrarily slow, they can
even fail due to network outages, and both ends generally need to have a
healthy distrust of the other, to protect against hostile servers and/or
clients.  Attempting to transparently treat remote calls like local calls is
a bad idea.

PB is *translucent*.  It doesn't pretend that remote method calls are the
same as local ones, because pretending they are will cause you grief.
That's why remote calls return Deferreds, rather than blocking.  That's why
you have to do remoteObject.callRemote('method'), rather than just
remoteObject.method() -- originally you could do it the latter way, and it
changed because a remote method calls should be explicit.

Automatically paging huge objects would contradict PB's design philosophy.

640k-should-be-enough-for-anyone-ly yrs, Andrew.




From bh at intevation.de  Sat May 10 12:01:40 2003
From: bh at intevation.de (Bernhard Herzog)
Date: 10 May 2003 18:01:40 +0200
Subject: [Twisted-Python] Large Transfers
In-Reply-To: <20030510151550.22084.qmail@green.zadka.com>
References: <200305100659.16865.uwe@oss4u.com>
	<20030510151550.22084.qmail@green.zadka.com>
Message-ID: <6q1xz6n63f.fsf@salmakis.intevation.de>

Moshe Zadka <m at moshez.org> writes:

> On Sat, 10 May 2003, "Uwe C. Schroeder" <uwe at oss4u.com> wrote:
> 
> > in  another thread we had the "pb size limitation" issue. However it still 
> > doesn't make too much sense to me, so probably someone of the core developers 
> > can enlighten me.
> 
> The explanation is that the *other side* doesn't trust you -- maybe you're
> trying to DoS it? This is a good design decision: you want multiple processes
> to not trust each other. As an aside, whenever you hear the word "trust"
> you should think "lack of security" -- by extension, "distrust" is "more
> secure".

ISTM that this approach doesn't really give you much security. It only
helps against accidentally large chunks of data.

The tests, AFAICT, simply check the length (as defined by the len
builtin) of lists, tuples and strings. So if the sender can't send e.g.
[0] * 1000000, it could just as well send [[0] * 1000 for i in range(1000)]
which would consume roughly the same amount of memory on the receiver's
side but would pass all the SIZE_LIMT tests. Using a large dictionary
seems to work too.

A better solution for limiting the size seems to be a limit on the
number of bytes accepted by the receiver for a single PB call.

Anyway, limits on the data size should be configurable IMO so that
programmers can set the limit based on the needs of their applications.

Finally, forcing users of PB to use a different protocol for large
datasets doesn't improve matters. If a malicious user can exploit the PB
connection they can also exploit this other protocol which of course has
no size limit because that's the reason to use it in the first place.


  Bernhard

-- 
Intevation GmbH                                 http://intevation.de/
Sketch                                 http://sketch.sourceforge.net/
MapIt!                                           http://www.mapit.de/



From uwe at oss4u.com  Sat May 10 12:03:18 2003
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Sat, 10 May 2003 09:03:18 -0700
Subject: [Twisted-Python] Large Transfers
In-Reply-To: <8512E32F-82FA-11D7-AD87-000393C9700E@twistedmatrix.com>
References: <8512E32F-82FA-11D7-AD87-000393C9700E@twistedmatrix.com>
Message-ID: <200305100903.18677.uwe@oss4u.com>

On Saturday 10 May 2003 08:17 am, Glyph Lefkowitz wrote:
> On Saturday, May 10, 2003, at 08:59 AM, Uwe C. Schroeder wrote:
> > Is this really a good thing to do ? Shouldn't pb see that the
> > arguments are
> > larger than 640k and start paging ?
>
> No, because this would violate lots of order-of-execution guarantees
> that PB normally provides.
>
> Let's say that you did
>
> 	foo.callRemote("call1", "x" * 1024 * 1024)
> 	foo.callRemote("call2", "x")
>
> You would expect 'call1' to execute before 'call2', right?  but no -
> because call1 began paging its arguments, call2 will be sent
> interleaved (the desired result for paged calls) and would execute
> first.

Hmmm - you'd call foo.callRemote("call2", "x") in the callback of the first 
call, since both calls return a defered. You can't rely on the first call 
being completed before issuing the next one. Well, you can, but that is not 
quite safe. If the two calls depend on each other you have to call the second 
one in the callback of the first one. If the calls are not related, the 
execution order isn't that important (well, at least I can't think of a case 
right now where it would be)

>
> The same thing would be true of sending return values.
>
> > What I'm doing is to hand down XML data which is database-generated on
> > the
> > server side. Whenever a user requests a too large resultset the
> > network layer
> > fails. On the other hand the resultset already is in memory, so why
> > not jut
> > transfer it ?
> > I realize that his is probably bad design

> If your goal is to facilitate bad design with huge gobs of XML, PB is
> probably not for you.  There are a number of other protocols which are
> designed for exactly this kind of application - HTTP, XML/RPC, SOAP,
> depending on your level of complexity.  Twisted provides native support
> for the first 2, and SOAP could probably be added without too much
> trouble.

Yep, XML/RPC might be the right thing. SOAP has nice features but I don't like 
the bulky approach.


> > , but it's the easiest way to
> > transfer this information. Sure I can write the stuff to a temporary
> > file and
> > page it over, however this defies the purpose, since then the original
> > call
> > results in a message to go get the file. This means I need at least 4
> > callbacks for any given call (the original ok callback, then another
> > one for
> > the possible paging as well as 2 error callbacks, one for each call)
>
> The error-handling needs to be improved, but this is what
> 'twisted.spread.util.getAllPages' is for.  You only need one callback.

Didn't see that one.

> > I can extend the problem by compressing the parameters with zlib (
> > which I'm
> > doing anyways), but at some point I will hit the limit.
>
> Hard limits like this one should never be pushed so closely.  If your
> data is more than, say, 60k, you should probably be looking at paging
> it.  More than 500k and you are definitely abusing the protocol.

no argument about that

> > The other problem this creates is a timing issue. Since I have to make
> > several
> > calls in order to transfer the resultset, I have to delay database
> > calls
> > until the whole resultset is valid.
> > To put it more technically:
> >
> > self.perspective.transfer_large_result(small_int,label,large_result_arr
> > ay)
> >
> > will fail if large_result_array exceeds 640k. However small_int and
> > label can
> > be transferred. The only way to do this is
> >
> > if numberofbytes(large_result_set) >= 640k:

> Wrong.  If numberofbytes(large_result_set) + banana_epsilon(()) +
> pb_call_overhead ...

yeah - just wwanted to keep it simple :-)

> This is not a number that you can calculate reliably.  640k is a hard
> high limit.
>
> > self.perspective.transfer_first_part(small_int,label).callback(self.sma
> > llpart_ok)
>
> I don't understand.  Do you want to get the whole result at once?  Or
> do you want to send it only when necessary?  If you want to send it
> only when necessary then aren't these two steps required anyway?  If
> not, then can't you use the methods in twisted.spread.util to retrieve
> the pager when you would normally be retrieving a string, in the same
> step?

I do not WANT to get the whole thing, sadly I NEED the whole thing.


> It would be helpful for my understanding if you would use real method
> names like "addCallback" and "callRemote" here.  I don't have any idea
> what 'self.perspective' is, or whether 'transfer_first_part' is
> supposed to be remote or local.

well, I thought that would be clear. perspective is a pb.Perspective, callback 
is addCallback. The whole thing is on the initiating side, which could be 
server or client, since those chunks get sent in both directions and I have 
the initiating side actively SEND it and not the receiver fetch it.

>
> > and in smallpart_ok
> >
> > self.page_the_rest(large_result_array).callback(self.whole_stuff_transf
> > ered)
>
> Again, not really sure what you're saying.  Why not -
>
> 	from twisted.spread import util
> 	util.getAllPages(serverThingy, "getStuff", small_int,
> label).addCallback(lambda l: ''.join(l)).addCallback(gotABigString)
>
> > This is an enormous overhead.
>
> as far as I understand it, the only overhead you require is that line
> above.  But I admit I do not understand it terribly well.

Me neither :-) I'll do some tests to see if I can put that in easily. I'd 
prefere a solution that uses standard Twisted without modifying it.

> > What even strikes me more is that this size limit not even prevents
> > large
> > memory consumption - since the object is already there and in cBanana
> > the
> > object is already stored in the buffer.
>
> Where is 'there'?
>
> On the side of the connection that wishes to send the data, it's in
> memory.  If you modify the sending side locally, the whole string may
> even be in your outgoing buffer there, but on the receiving side only
> the beginning will be, since upon receiving the length it will
> terminate the connection.  (At least, I don't think TCP normally sends
> multi-megabyte packets.)

Nope, TCP doesn't. Why will it terminate the connection ? 

> > I think I'll just remove all size limits and go thru the (unwanted)
> > way to create a own package.
>
> Please, don't do this.  If PB is not working with your application, use
> something else.  This kind of a brute-force solution will undoubtedly
> cause problems down the road, and the people most suited to help you
> with them will not be interested in doing so.
>
> There's nothing wrong with a hybrid approach, either.  You could
> transfer the file over HTTP rather than in the PB connection, but still
> use PB as your control protocol.  You could implement an even simpler
> file-transfer protocol reminiscent of HTTP/0.9 rather than use
> Twisted's full HTTP layer.

For some reasons beyond my influence I can't use more than one port. If I 
could talk "them" into using several ports I'd love to do that. For that 
reason I have to find a way to handle everything with one port. XML/RPC was 
my original protocol choice, however I think pb is much nicer :-)


	UC

--
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417




From andrew-twisted at puzzling.org  Sat May 10 12:17:30 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sun, 11 May 2003 02:17:30 +1000
Subject: [Twisted-Python] Large Transfers
In-Reply-To: <6q1xz6n63f.fsf@salmakis.intevation.de>
References: <200305100659.16865.uwe@oss4u.com> <20030510151550.22084.qmail@green.zadka.com> <6q1xz6n63f.fsf@salmakis.intevation.de>
Message-ID: <20030510161730.GB20345@frobozz.local>

On Sat, May 10, 2003 at 06:01:40PM +0200, Bernhard Herzog wrote:
> 
> The tests, AFAICT, simply check the length (as defined by the len
> builtin) of lists, tuples and strings. So if the sender can't send e.g.
> [0] * 1000000, it could just as well send [[0] * 1000 for i in range(1000)]
> which would consume roughly the same amount of memory on the receiver's
> side but would pass all the SIZE_LIMT tests. Using a large dictionary
> seems to work too.
> 
> A better solution for limiting the size seems to be a limit on the
> number of bytes accepted by the receiver for a single PB call.

You seem to be misunderstanding the difference between PB and Banana.  The
limit is in the Banana layer, so that it can remain simple and fast.  A long
list of small items breaks into small pieces at the Banana level already.  

I expect the Unjellying layer could refuse to reassemble lists and
dictionaries beyond a certain size (although it doesn't appear to do that at
the moment).  This is possibly something worth looking into... a
twisted.spread guru could might be able to comment more usefully here.

-Andrew.




From uwe at oss4u.com  Sat May 10 12:20:30 2003
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Sat, 10 May 2003 09:20:30 -0700
Subject: [Twisted-Python] Large Transfers
In-Reply-To: <6q1xz6n63f.fsf@salmakis.intevation.de>
References: <200305100659.16865.uwe@oss4u.com> <20030510151550.22084.qmail@green.zadka.com> <6q1xz6n63f.fsf@salmakis.intevation.de>
Message-ID: <200305100920.30064.uwe@oss4u.com>

On Saturday 10 May 2003 09:01 am, Bernhard Herzog wrote:
> Moshe Zadka <m at moshez.org> writes:
> > On Sat, 10 May 2003, "Uwe C. Schroeder" <uwe at oss4u.com> wrote:
> > > in  another thread we had the "pb size limitation" issue. However it
> > > still doesn't make too much sense to me, so probably someone of the
> > > core developers can enlighten me.
> >
> > The explanation is that the *other side* doesn't trust you -- maybe
> > you're trying to DoS it? This is a good design decision: you want
> > multiple processes to not trust each other. As an aside, whenever you
> > hear the word "trust" you should think "lack of security" -- by
> > extension, "distrust" is "more secure".
>
> ISTM that this approach doesn't really give you much security. It only
> helps against accidentally large chunks of data.
>
> The tests, AFAICT, simply check the length (as defined by the len
> builtin) of lists, tuples and strings. So if the sender can't send e.g.
> [0] * 1000000, it could just as well send [[0] * 1000 for i in range(1000)]
> which would consume roughly the same amount of memory on the receiver's
> side but would pass all the SIZE_LIMT tests. Using a large dictionary
> seems to work too.

Since a DoS is basically bombarding the target, neither approach will 
guarantee security. For the receiver it might be even worse to get 1M calls 
with 100 bytes each.
To really get security here you'd have to limit the number of calls in a 
certain timeframe as well as the maximum size of each call.

> A better solution for limiting the size seems to be a limit on the
> number of bytes accepted by the receiver for a single PB call.

as far as I understand it the 640k ARE the limit for one single PB call.

>
> Anyway, limits on the data size should be configurable IMO so that
> programmers can set the limit based on the needs of their applications.

This might be correct, however if you design a certain protocol you usually 
imply certain restrictions. From that point of view I must say Glyph is 
having a point here.

	UC

--
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417




From uwe at oss4u.com  Sat May 10 12:45:44 2003
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Sat, 10 May 2003 09:45:44 -0700
Subject: [Twisted-Python] Large Transfers
In-Reply-To: <20030510153628.GC29122@frobozz.local>
References: <200305100659.16865.uwe@oss4u.com> <200305100820.37149.uwe@oss4u.com> <20030510153628.GC29122@frobozz.local>
Message-ID: <200305100945.44548.uwe@oss4u.com>

Ok, I think we all agree that changing Twisted internally to reach a certain 
goal isn't the good choice here. It would be if the benefit was for 
everyone's use.
Asuming I have a pb connection open.
(snippet)
p is the pb.Perspective
parameters is a "small" parameterset (a couple of int's or so)
resultset is [ int, int, string, huge string ]

p.callRemote('getResult',(parameters)).addCallbacks(ok, nok)

def ok(resultset):
	do something with the resultset here  

def nok(error):
	throw error in UI here

If the above is the code, how could I change it using pagers ?
I need the int,int,string result together with the "huge string" result. I 
don't want to use self.int1, self.int2 etc. constructs since it's temporary 
data, so I'd have to give the small results as parameters to the callback 
being called when paging the large part finishes. I'd also need an error 
callback, which I can't find in the pager implementation at all. The "huge 
String" will allways be a string, since the server side will compress 
(possibly encrypt) and base64 encode it anyways.
The current user feedback implementation isn't really one, so maybe I can even 
improve here. Currently it behaves like the netscape or mozilla logo - it 
moves until the data is there. If I can hook into the pager I might be able 
to give real feedback in form of a progress bar or so.

Any ideas ?

On Saturday 10 May 2003 08:36 am, Andrew Bennetts wrote:
> On Sat, May 10, 2003 at 08:20:37AM -0700, Uwe C. Schroeder wrote:
> > You're right, it doesn't. However it still requires several calls to
> > transfer the whole set. :-( And it has another problem. The pager makes
> > it hard to give the user some response while uploading/downloading. The
> > UI gets stuck, or at least appears to be since nothing is happening.
>
> (Untested code)
>
> class ProgressReportingStringPager(StringPager):
>     def __init__(self, ui, *args, **kwargs):
>         self.ui = ui
>         StringPager.__init__(self, *args, **kwargs)
>
>     def nextPage(self):
>         StringPager.nextPage(self)
>         self.ui.reportProgress(self.pointer/len(self.string))
>
> I haven't tried, but it looks like something like that code could easily
> give you progress reporting from your pager.  The paging code is really
> quite simple.
>
> -Andrew.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-- 
	UC

--
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417




From bh at intevation.de  Sat May 10 13:50:54 2003
From: bh at intevation.de (Bernhard Herzog)
Date: 10 May 2003 19:50:54 +0200
Subject: [Twisted-Python] Large Transfers
In-Reply-To: <20030510161730.GB20345@frobozz.local>
References: <200305100659.16865.uwe@oss4u.com>
	<20030510151550.22084.qmail@green.zadka.com>
	<6q1xz6n63f.fsf@salmakis.intevation.de>
	<20030510161730.GB20345@frobozz.local>
Message-ID: <6qsmrmlmgx.fsf@salmakis.intevation.de>

Andrew Bennetts <andrew-twisted at puzzling.org> writes:

> On Sat, May 10, 2003 at 06:01:40PM +0200, Bernhard Herzog wrote:
> > 
> > The tests, AFAICT, simply check the length (as defined by the len
> > builtin) of lists, tuples and strings. So if the sender can't send e.g.
> > [0] * 1000000, it could just as well send [[0] * 1000 for i in range(1000)]
> > which would consume roughly the same amount of memory on the receiver's
> > side but would pass all the SIZE_LIMT tests. Using a large dictionary
> > seems to work too.
> > 
> > A better solution for limiting the size seems to be a limit on the
> > number of bytes accepted by the receiver for a single PB call.
> 
> You seem to be misunderstanding the difference between PB and Banana.

While I wouldn't claim to understand all of it, I am aware that PB !=
Banana. But PB uses Banana AFAIK, so any limit in Banana is also a limit
in PB.

>  The limit is in the Banana layer, so that it can remain simple and
> fast.

But why hardwire it?

> A long list of small items breaks into small pieces at the Banana
> level already.

I'm not sure what's this supposed to mean. If I try to send [0] * 1000000
via PB I do get an error because of the size limit, while
[[0] * 1000 for i in range(1000)] works (at least with the Python
implementation, I didn't try cBanana). Is one of them handled completely
at the banana-level and the other isn't?

   Bernhard

-- 
Intevation GmbH                                 http://intevation.de/
Sketch                                 http://sketch.sourceforge.net/
MapIt!                                           http://www.mapit.de/



From bh at intevation.de  Sat May 10 14:02:41 2003
From: bh at intevation.de (Bernhard Herzog)
Date: 10 May 2003 20:02:41 +0200
Subject: [Twisted-Python] Large Transfers
In-Reply-To: <200305100920.30064.uwe@oss4u.com>
References: <200305100659.16865.uwe@oss4u.com>
	<20030510151550.22084.qmail@green.zadka.com>
	<6q1xz6n63f.fsf@salmakis.intevation.de>
	<200305100920.30064.uwe@oss4u.com>
Message-ID: <6qptmqllxa.fsf@salmakis.intevation.de>

"Uwe C. Schroeder" <uwe at oss4u.com> writes:

> On Saturday 10 May 2003 09:01 am, Bernhard Herzog wrote:
> > A better solution for limiting the size seems to be a limit on the
> > number of bytes accepted by the receiver for a single PB call.
> 
> as far as I understand it the 640k ARE the limit for one single PB call.

640k /Bytes/ is only a limit for a single string. There's also a limit
of 640 * 1024 items in lists and tuples. 

You could send large strings by simply slicing them into chunks of e.g.
8K each and sending them as a list. At the other end you simply "".join
them. With a limit of 640 * 1024 such strings in a list you should be
able to send any string that fits into memory on most systems.

> > Anyway, limits on the data size should be configurable IMO so that
> > programmers can set the limit based on the needs of their applications.
> 
> This might be correct, however if you design a certain protocol you usually 
> imply certain restrictions. From that point of view I must say Glyph is 
> having a point here.

He might well have a point, but I don't understand it :(. 
The limit can easily be circumvented by malicious users and for the
users it only seems to put it arbitrary restrictions.

   Bernhard

-- 
Intevation GmbH                                 http://intevation.de/
Sketch                                 http://sketch.sourceforge.net/
MapIt!                                           http://www.mapit.de/



From m at moshez.org  Sat May 10 14:57:56 2003
From: m at moshez.org (Moshe Zadka)
Date: 10 May 2003 18:57:56 -0000
Subject: [Twisted-Python] Large Transfers
In-Reply-To: <200305100833.19899.uwe@oss4u.com>
References: <200305100833.19899.uwe@oss4u.com>, <200305100659.16865.uwe@oss4u.com> <20030510151550.22084.qmail@green.zadka.com>
Message-ID: <20030510185756.28753.qmail@green.zadka.com>

On Sat, 10 May 2003, "Uwe C. Schroeder" <uwe at oss4u.com> wrote:

> but it would be more convenient and transparent for the programmer not to
> have take care of paging :-)

No, it wouldn't. Paging is a programmer-level thing, not a protocol-level
thing. For example, the programmer needs to realize that the memory
buffer might stay in memory for a long time.

> The busines logic behind it simply gets way to complicated if I have to 
> separate calls into "small" and "large" ones.

Don't do that. *Always* use Pager. I merely noted there's no significant
penalty in the case where the buffers are small.

> Well, unlikely but not a bad asumption.

The only way to have real security is to expect the unexpected. Just
because you don't expect anyone to break down your door doesn't mean
you don't lock your valuables in a safe :)

> Since my application will run inside a trusted environment only 

No such thing.
I point above to where I remarked that whenever I hear someone say
"trust" I translate it in my brain to "this is going to be a cracker's
paradise". Lack of trust is good. And for the record, firewalls do
not provide security, contrary to what people may think. They provide
many useful features, but security is not one of them.

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From m at moshez.org  Sat May 10 15:04:04 2003
From: m at moshez.org (Moshe Zadka)
Date: 10 May 2003 19:04:04 -0000
Subject: [Twisted-Python] Large Transfers
In-Reply-To: <8512E32F-82FA-11D7-AD87-000393C9700E@twistedmatrix.com>
References: <8512E32F-82FA-11D7-AD87-000393C9700E@twistedmatrix.com>
Message-ID: <20030510190404.28856.qmail@green.zadka.com>

On Sat, 10 May 2003, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> If your goal is to facilitate bad design with huge gobs of XML, PB is  
> probably not for you.  There are a number of other protocols which are  
> designed for exactly this kind of application - HTTP, XML/RPC, SOAP,  
> depending on your level of complexity.  Twisted provides native support  
> for the first 2, and SOAP could probably be added without too much  
> trouble.

For the record, we do support SOAP servers. IIRC, we don't have any
SOAP client support, but it should be a pretty trivial adaptation
of the XML-RPC client code to use soaplib.

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From uwe at oss4u.com  Sat May 10 15:31:26 2003
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Sat, 10 May 2003 12:31:26 -0700
Subject: [Twisted-Python] Large Transfers
In-Reply-To: <20030510185756.28753.qmail@green.zadka.com>
References: <200305100833.19899.uwe@oss4u.com> <20030510151550.22084.qmail@green.zadka.com> <20030510185756.28753.qmail@green.zadka.com>
Message-ID: <200305101231.26722.uwe@oss4u.com>

On Saturday 10 May 2003 11:57 am, Moshe Zadka wrote:
> On Sat, 10 May 2003, "Uwe C. Schroeder" <uwe at oss4u.com> wrote:
> > but it would be more convenient and transparent for the programmer not to
> > have take care of paging :-)
>
> No, it wouldn't. Paging is a programmer-level thing, not a protocol-level
> thing. For example, the programmer needs to realize that the memory
> buffer might stay in memory for a long time.
>
> > The busines logic behind it simply gets way to complicated if I have to
> > separate calls into "small" and "large" ones.
>
> Don't do that. *Always* use Pager. I merely noted there's no significant
> penalty in the case where the buffers are small.

Well, maybe I'm stupid or so. Someone then minds to explain the pagers ? There 
is basically no documentation about them and from the code they are far from 
easy to understand. What gets executed where exactly ?  

> > Well, unlikely but not a bad asumption.
>
> The only way to have real security is to expect the unexpected. Just
> because you don't expect anyone to break down your door doesn't mean
> you don't lock your valuables in a safe :)

To put it that way. The only way to have a decent amount of security is to 
turn your computer off and lock it into a safe. And even then there might be 
bad guys.

>
> > Since my application will run inside a trusted environment only
>
> No such thing.
> I point above to where I remarked that whenever I hear someone say
> "trust" I translate it in my brain to "this is going to be a cracker's
> paradise". Lack of trust is good. And for the record, firewalls do
> not provide security, contrary to what people may think. They provide
> many useful features, but security is not one of them.

So where do you put your paycheck ? Into a "trusted" bank account ??
What are the useful features of a firewall besides making is hard to create 
connections ? If I run a webserver inside a firewalled LAN and block all 
ports on the firewall, how is a hacker supposed to take advantage of port 80, 
except if he hacks the firewall (which might be hard in this case since, 
remember: all ports blocked, no incoming transmission allowed)
I'd say firewalls increase the level of security, they don't provide 100% 
security. I'm btw not talking about packet-filters, often sold as firewall.

	UC

--
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417




From lists at ghaering.de  Sat May 10 15:58:23 2003
From: lists at ghaering.de (=?ISO-8859-1?Q?Gerhard_H=E4ring?=)
Date: Sat, 10 May 2003 21:58:23 +0200
Subject: [Twisted-Python] Large Transfers
In-Reply-To: <200305101231.26722.uwe@oss4u.com>
References: <200305100833.19899.uwe@oss4u.com>
	<20030510151550.22084.qmail@green.zadka.com>
	<20030510185756.28753.qmail@green.zadka.com>
	<200305101231.26722.uwe@oss4u.com>
Message-ID: <3EBD59DF.7080909@ghaering.de>

Uwe C. Schroeder wrote:
> [...] If I run a webserver inside a firewalled LAN

So you're running the webserver with a local IP address that isn't 
accessible via the LAN.

> and block all ports on the firewall, 

This is redundant if you don't offer the services to the outside, 
anyway. Redundancy is generally a good thing, but the services should be 
properly configured in the first place.

> [...] I'm btw not talking about packet-filters, often sold as firewall.

A firewall is a security concept, not a single piece of software. Packet 
filters might be part of that security concept.

Your name sounds German, if you can read German, these resources are 
valuable:

de.comp.security.firewall FAQ:
http://www.iks-jena.de/mitarb/lutz/usenet/Firewall.html

A nice summary about personal firewalls (in English): 
http://www.fefe.de/pffaq/

"""
**Personal Firewall Security FAQ**
*Executive Summary*
Q: Do Personal Firewalls improve security?

A: No.

Q: Why do so many people install them, then?

A: Because those people are all idiots.

*Details*
[...]
"""

-- Gerhard



From uwe at oss4u.com  Sat May 10 17:20:10 2003
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Sat, 10 May 2003 14:20:10 -0700
Subject: [Twisted-Python] Large Transfers
In-Reply-To: <3EBD59DF.7080909@ghaering.de>
References: <200305100833.19899.uwe@oss4u.com> <200305101231.26722.uwe@oss4u.com> <3EBD59DF.7080909@ghaering.de>
Message-ID: <200305101420.10943.uwe@oss4u.com>

On Saturday 10 May 2003 12:58 pm, Gerhard H?ring wrote:
> Uwe C. Schroeder wrote:
> > [...] If I run a webserver inside a firewalled LAN
>
> So you're running the webserver with a local IP address that isn't
> accessible via the LAN.

That wouldn't make too much sense, would it ?
I'm running the server inside the LAN on a RFC address. So the server is 
accessible from the LAN, however since the firewall blocks all incoming 
traffic it won't be accessible from the outside (assuming you have a firewall 
and use IP-NAT )


> > and block all ports on the firewall,
>
> This is redundant if you don't offer the services to the outside,
> anyway. Redundancy is generally a good thing, but the services should be
> properly configured in the first place.

No it's not redundant. Just take a LAN and unplug the link to the internet. 
This is basically the setup (except that you also won't have outgoing stuff)

> > [...] I'm btw not talking about packet-filters, often sold as firewall.
>
> A firewall is a security concept, not a single piece of software. Packet
> filters might be part of that security concept.

Correct, that's excatly what I'm talking about.


> Your name sounds German, if you can read German, these resources are
> valuable:
>
> de.comp.security.firewall FAQ:
> http://www.iks-jena.de/mitarb/lutz/usenet/Firewall.html
>
> A nice summary about personal firewalls (in English):
> http://www.fefe.de/pffaq/

:-))) Well, we're living in a real world - in an ideal world there would be no 
advanced bootstrap loader called windows. Sadly too many people buy the crap, 
then complain about "security" as they perceive it and buy stuff like 
"wingate".
 
BTW: if you're ever looking for a good firewall in germany, take a look at 
www.genua.de. Magnus Harlander (founder and owner) is a real capacity when it 
comes to security. I was working with him for a couple of years before I 
immigrated to the US.


	UC

--
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417




From acapnotic at twistedmatrix.com  Sat May 10 18:29:07 2003
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 10 May 2003 15:29:07 -0700
Subject: [Twisted-Python] pcp.ProducerConsumerProxy.resumeProducing
In-Reply-To: <20030509015645.GA3694@localhost.localdomain>
References: <20030509015645.GA3694@localhost.localdomain>
Message-ID: <1052602189.9919.200.camel@troglodyte.funhouse>

On Thu, 2003-05-08 at 18:56, Eric C. Newton wrote:
> It's possible that the producer is sending data in big chunks, and we
> are only writing them out in little chunks.  If so, we continue to add
> bytes to the buffer and disregard the buffer limit.  I've changed the
> line to this:

Eric,

can you write a test for this? twisted.test.test_pcp or test_htb, as
appropriate.  I'll take a more detailed look at this soon.

Thanks,

 - Kevin

-- 
The moon is first quarter, 62.0% illuminated, 8.5 days old.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030510/e4b8a536/attachment.pgp 

From glyph at twistedmatrix.com  Sat May 10 18:32:21 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 10 May 2003 17:32:21 -0500
Subject: [Twisted-Python] Large Transfers
In-Reply-To: <6qsmrmlmgx.fsf@salmakis.intevation.de>
Message-ID: <44188EC5-8337-11D7-AD87-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Saturday, May 10, 2003, at 12:50 PM, Bernhard Herzog wrote:

> I'm not sure what's this supposed to mean. If I try to send [0] * 
> 1000000
> via PB I do get an error because of the size limit, while
> [[0] * 1000 for i in range(1000)] works (at least with the Python
> implementation, I didn't try cBanana). Is one of them handled 
> completely
> at the banana-level and the other isn't?

Right now, you're right that these limits are fairly arbitrary.  
However, it would be a waste of time to explain why they're all 
implemented this way and where the responsibilities lie, because the 
current code is somewhat grotty and is due for a rewrite RSN.  (Don't 
worry - both protocol-level and API-level compatibility should be 
preserved, though newer peers speaking to older peers will be somewhat 
less efficient than new peers talking to new peers.)

Future size limits will be a little fuzzier and more targetted at 
resource consumption rather than data-size limits.

The short answer, though, why this is done this way: once something is 
out of the Banana level you can have a Python policy for limiting it.  
In the banana code, there's not much you can do efficiently, so the 
only size limitations are a length check.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+vX35vVGR4uSOE2wRAt/6AKCyOnStZ7e8I5Xjwk0u8wIno66/dwCfUOqY
IuSrmQLm+WfEyxgwxV2H16A=
=DAxz
-----END PGP SIGNATURE-----




From smurf at noris.de  Sat May 10 18:43:48 2003
From: smurf at noris.de (Matthias Urlichs)
Date: Sun, 11 May 2003 00:43:48 +0200
Subject: [Twisted-Python] Resource.render() returning NOT_DONE_YET
References: <20030510032223.GA4864@doublegemini.com> <247A93DE-82F4-11D7-AD87-000393C9700E@twistedmatrix.com>
Message-ID: <pan.2003.05.10.22.43.48.272548@smurf.noris.de>

Hi,

Glyph Lefkowitz:
> While in theory he _could_, this example doesn't :-)  Chained Deferred 
> results will make this Do The Right Thing.  To be sure, I asked the 
> Python interpreter about it -

stare at code
scratch head
stare some more
*lightbulb goes off*  Nice.  Thank you.

-- 
Matthias



From acapnotic at twistedmatrix.com  Sat May 10 19:21:19 2003
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 10 May 2003 16:21:19 -0700
Subject: [Twisted-Python] web site down
In-Reply-To: <B4A6DE68-819A-11D7-912C-000393C9700E@twistedmatrix.com>
References: <B4A6DE68-819A-11D7-912C-000393C9700E@twistedmatrix.com>
Message-ID: <1052608877.9916.209.camel@troglodyte.funhouse>

On Thu, 2003-05-08 at 14:19, Glyph Lefkowitz wrote:
> This is the way that most UNIXes suggest doing it - however, at least 
> on pyramid, it seems broken.  I don't know if this is a debian issue or 
> what, but I can't get _any_ of my machines to exec @reboot crontab 
> entries.

Works For Me.  on pyramid, `crontab -u acapnotic -l`:
@reboot /home/acapnotic/bin/startstuff.sh

and it does indeed start stuff every time pyramid reboots.  So cron's
@reboot on your Debian machine works fine.  The only problem I've had is
on shutdown my twistd's don't get TERM signals, as I've mentioned
before.

-- 
The moon is first quarter, 62.8% illuminated, 8.6 days old.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030510/f48cc8bf/attachment.pgp 

From acapnotic at twistedmatrix.com  Sat May 10 19:43:58 2003
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 10 May 2003 16:43:58 -0700
Subject: [Twisted-Python] Re: We're not responsible for people subscribing to Google's ToS
In-Reply-To: <E19EPi6-000298-00@pyramid.twistedmatrix.com>
References: <E19EPi6-000298-00@pyramid.twistedmatrix.com>
Message-ID: <1052610236.9928.231.camel@troglodyte.funhouse>

On Sat, 2003-05-10 at 01:28, moshez CVS wrote:
http://twistedmatrix.com/users/jh.twistd/viewcvs/cgi/viewcvs.cgi/twisted/web/google.py.diff?r1=text&tr1=1.4&r2=text&tr2=1.5&cvsroot=Twisted
> Log message:
> We're not responsible for people subscribing to Google's ToS

I don't entirely agree.  While it is true that we are not responsible
for people subscribing to Google's terms of service, I think it is
irresponsible at best to distribute a tool whose use violates those
terms, particularly without any suggestion that it might be doing so, or
any reference to those terms at all.

If someone is providing you a service that you find useful, you do not
thank them by doing things with it that they explicitly ask you not to
do.  Play nice.  Google has an API -- I know you don't like it, but it's
their service, it's their right to call the shots.

As long as twisted.web.google does not use the Google API, I would
prefer to see it removed from the core Twisted distribution.  Feel free
to distribute it elsewhere, but with your name on it, not Twisted's. 

Sincerely,

 - Kevin

-- 
The moon is first quarter, 63.0% illuminated, 8.6 days old.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030510/e5247dc6/attachment.pgp 

From glyph at twistedmatrix.com  Sat May 10 21:03:43 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 10 May 2003 20:03:43 -0500
Subject: [Twisted-Python] Large Transfers
In-Reply-To: <200305100945.44548.uwe@oss4u.com>
Message-ID: <690C8268-834C-11D7-AD87-000393C9700E@twistedmatrix.com>


On Saturday, May 10, 2003, at 11:45 AM, Uwe C. Schroeder wrote:

> If the above is the code, how could I change it using pagers ?

Thanks for the more complete description of the problem.  I can see why 
you're frustrated - the Pager implementation isn't 100% complete, and 
it looks like you want every single case covered that it doesn't cover 
:-).  However, this should be fixable with a little utility class.  
Here's a crack at something that does what you want -

-------------- next part --------------
A non-text attachment was scrubbed...
Name: uwe.py
Type: application/octet-stream
Size: 2743 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030510/665a417e/attachment.obj 
-------------- next part --------------


Hope this helps.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 186 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030510/665a417e/attachment.pgp 

From uwe at oss4u.com  Sat May 10 21:33:16 2003
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Sat, 10 May 2003 18:33:16 -0700
Subject: [Twisted-Python] Large Transfers
In-Reply-To: <690C8268-834C-11D7-AD87-000393C9700E@twistedmatrix.com>
References: <690C8268-834C-11D7-AD87-000393C9700E@twistedmatrix.com>
Message-ID: <200305101833.16686.uwe@oss4u.com>

Thanks a lot for taking the time to assemble this.
This makes it way clearer.

UC


On Saturday 10 May 2003 06:03 pm, Glyph Lefkowitz wrote:
> On Saturday, May 10, 2003, at 11:45 AM, Uwe C. Schroeder wrote:
> > If the above is the code, how could I change it using pagers ?
>
> Thanks for the more complete description of the problem.  I can see why
> you're frustrated - the Pager implementation isn't 100% complete, and
> it looks like you want every single case covered that it doesn't cover
>
> :-).  However, this should be fixable with a little utility class.
>
> Here's a crack at something that does what you want -


--
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417




From steve at shrogers.com  Sat May 10 21:55:03 2003
From: steve at shrogers.com (Steven H. Rogers, PhD.)
Date: Sat, 10 May 2003 20:55:03 -0500
Subject: [Twisted-Python] Twisted 1.0.5 Woven Tutorial
In-Reply-To: <1052608877.9916.209.camel@troglodyte.funhouse>
References: <B4A6DE68-819A-11D7-912C-000393C9700E@twistedmatrix.com> <1052608877.9916.209.camel@troglodyte.funhouse>
Message-ID: <3EBDAD77.90207@shrogers.com>

In playing with this tutorial, I first tried following the text of the 
tutorial, but didn't find it clear enough to assemble working code 
quickly.  Falling back to the listings/PicturePile directory, I got the 
sample code working, but had to rename the directory-listings.html file 
and image-display.html to *.xhtml files.

Steve
-- 
  _    Steven H. Rogers, PhD.
<_`   email: steve at shrogers.com
|_>   Weblog http://shrogers.com/cgi-bin/pyblosxom.cgi/
| \   "A language that doesn't affect the way you think about
       programming is not worth knowing." - Alan Perlis




From andrew-twisted at puzzling.org  Sun May 11 05:28:42 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sun, 11 May 2003 19:28:42 +1000
Subject: [Twisted-Python] [PATCH] HTTP server fix for the FD problem
Message-ID: <20030511092842.GA24921@frobozz.local>

This adds timeouts to the HTTPChannel class, so that dead old sockets can't
hang around indefinitely and eat all the file descriptors.  The timeout
machinery is added to twisted/protocols/policies.py, and could be reused for
other protocols.

I'm a little concerned that I'm being a touch to evil, though:

-class HTTPChannel(basic.LineReceiver):
+class HTTPChannel(policies.TimeoutWrapper(basic.LineReceiver)):

I'm posting to the list rather than just checking it in so that people can
veto this sort of madness if they like :)  (Oh, and some testing that this
actually fixes the problem would be nice, too).

I'm also including Moshe's simpler, less general patch that only fixes
HTTPChannel, rather than being reusable, in case people prefer that
solution.

-Andrew.


**** My patch: ****

Index: twisted/protocols/policies.py
===================================================================
RCS file: /cvs/Twisted/twisted/protocols/policies.py,v
retrieving revision 1.8
diff -u -r1.8 policies.py
--- twisted/protocols/policies.py	10 Apr 2003 07:03:51 -0000	1.8
+++ twisted/protocols/policies.py	11 May 2003 09:07:38 -0000
@@ -90,6 +90,12 @@
         self.wrappedFactory = wrappedFactory
         self.protocols = {}
 
+    def startFactory(self):
+        self.wrappedFactory.startFactory()
+
+    def stopFactory(self):
+        self.wrappedFactory.stopFactory()
+
     def startedConnecting(self, connector):
         self.wrappedFactory.startedConnecting(connector)
 
@@ -282,6 +288,7 @@
     maxConnectionsPerPeer = 5
 
     def startFactory(self):
+        WrappingFactory.startFactory()
         self.peerConnections = {}
         
     def buildProtocol(self, addr):
@@ -298,6 +305,90 @@
         if self.peerConnections[peerHost] == 0:
             del self.peerConnections[peerHost]
 
+
+class _TransportWrapper:
+    def __init__(self, original, protocol):
+        self.original = original
+        self.protocol = protocol
+
+    def write(self, data):
+        self.original.write(data)
+        self.protocol.resetTimeout()
+
+    def writeSequence(self, sequence):
+        self.original.writeSequence(sequence)
+        self.protocol.resetTimeout()
+
+    def __getattr__(self, name):
+        return getattr(self.original, name)
+
+
+def TimeoutWrapper(protocolClass):
+    class _TimeoutProtocol(protocolClass, object):
+        """Protocol that automatically disconnects when the connection is idle.
+        
+        Stability: Unstable
+        """
+
+        def connectionMade(self):
+            self.timeoutCall = None
+            if getattr(self, 'timeoutPeriod', None):
+                timeoutPeriod = self.timeoutPeriod
+            else:
+                timeoutPeriod = self.factory.timeoutPeriod
+            self.setTimeout(timeoutPeriod)
+
+        def makeConnection(self, transport):
+            t = _TransportWrapper(transport, self)
+            protocolClass.makeConnection(self, t)
+
+        def setTimeout(self, timeoutPeriod=None):
+            """Set a timeout.
+            
+            This will cancel any existing timeouts.
+
+            @param timeoutPeriod: If not C{None}, change the timeout period.
+                Otherwise, use the existing value.
+            """
+            self.cancelTimeout()
+            if timeoutPeriod is not None:
+                self.timeoutPeriod = timeoutPeriod
+            self.timeoutCall = reactor.callLater(self.timeoutPeriod, self.timeoutFunc)
+
+        def cancelTimeout(self):
+            """Cancel the timeout.
+            
+            If the timeout was already cancelled, this does nothing.
+            """
+            if self.timeoutCall:
+                try:
+                    self.timeoutCall.cancel()
+                except error.AlreadyCalled:
+                    pass
+                self.timeoutCall = None
+        
+        def resetTimeout(self):
+            """Reset the timeout, usually because some activity just happened."""
+            if self.timeoutCall:
+                self.timeoutCall.reset(self.timeoutPeriod)
+
+        def dataReceived(self, data):
+            self.resetTimeout()
+            protocolClass.dataReceived(self, data)
+
+        def connectionLost(self, reason):
+            self.cancelTimeout()
+            protocolClass.connectionLost(self, reason)
+
+        def timeoutFunc(self):
+            """This method is called when the timeout is triggered.
+
+            By default it calls L{loseConnection}.  Override this if you want
+            something else to happen.
+            """
+            self.loseConnection()
+    return _TimeoutProtocol
+            
 
 class TimeoutProtocol(ProtocolWrapper):
     """Protocol that automatically disconnects when the connection is idle.
Index: twisted/protocols/http.py
===================================================================
RCS file: /cvs/Twisted/twisted/protocols/http.py,v
retrieving revision 1.79
diff -u -r1.79 http.py
--- twisted/protocols/http.py	8 May 2003 16:28:09 -0000	1.79
+++ twisted/protocols/http.py	11 May 2003 09:07:39 -0000
@@ -47,6 +47,7 @@
 
 # twisted imports
 from twisted.internet import interfaces, reactor, protocol
+from twisted.protocols import policies
 from twisted.python import log
 
 
@@ -856,7 +857,7 @@
         pass
 
 
-class HTTPChannel(basic.LineReceiver):
+class HTTPChannel(policies.TimeoutWrapper(basic.LineReceiver)):
     """A receiver for HTTP requests."""
 
     length = 0
@@ -868,9 +869,9 @@
     # set in instances or subclasses
     requestFactory = Request
 
-
     def __init__(self):
         # the request queue
+        super(HTTPChannel, self).__init__()
         self.requests = []
 
     def lineReceived(self, line):
@@ -944,6 +945,7 @@
 
         req = self.requests[-1]
         req.requestReceived(command, path, version)
+        self.cancelTimeout()
 
     def rawDataReceived(self, data):
         if len(data) < self.length:
@@ -1000,10 +1002,13 @@
             # notify next request it can start writing
             if self.requests:
                 self.requests[0].noLongerQueued()
+            else:
+                self.resetTimeout()
         else:
             self.transport.loseConnection()
 
     def connectionLost(self, reason):
+        super(HTTPChannel, self).connectionLost(reason)
         for request in self.requests:
             request.connectionLost(reason)
 
@@ -1014,6 +1019,8 @@
     protocol = HTTPChannel
 
     logPath = None
+
+    timeoutPeriod = 60
 
     def __init__(self, logPath=None):
         if logPath is not None:
Index: twisted/test/test_web.py
===================================================================
RCS file: /cvs/Twisted/twisted/test/test_web.py,v
retrieving revision 1.31
diff -u -r1.31 test_web.py
--- twisted/test/test_web.py	10 May 2003 08:30:04 -0000	1.31
+++ twisted/test/test_web.py	11 May 2003 09:07:39 -0000
@@ -201,6 +201,9 @@
                   "Accept: text/html"]:
             self.channel.lineReceived(l)
 
+    def tearDown(self):
+        self.channel.connectionLost(reason=None)
+
     def test_modified(self):
         """If-Modified-Since cache validator (positive)"""
         self.channel.lineReceived("If-Modified-Since: %s"


**** Moshe's patch: ****


Index: twisted/protocols/http.py
===================================================================
RCS file: /cvs/Twisted/twisted/protocols/http.py,v
retrieving revision 1.78
diff -u -r1.78 http.py
--- twisted/protocols/http.py	21 Apr 2003 02:51:52 -0000	1.78
+++ twisted/protocols/http.py	11 May 2003 06:29:26 -0000
@@ -850,6 +850,7 @@
     __header = ''
     __first_line = 1
     __content = None
+    terminateConnection = None
 
     # set in instances or subclasses
     requestFactory = Request
@@ -859,7 +860,14 @@
         # the request queue
         self.requests = []
 
+    def connectionMade(self):
+        self.timeout = self.factory.timeout
+        self.terminateConnection = reactor.callLater(self.timeout,
+                                                  self.transport.loseConnection)
+
     def lineReceived(self, line):
+        if self.terminateConnection:
+            self.terminateConnection.reset(self.timeout)
         if self.__first_line:
             # if this connection is not persistent, drop any data which
             # the client (illegally) sent after the last request.
@@ -930,8 +938,13 @@
 
         req = self.requests[-1]
         req.requestReceived(command, path, version)
+        if self.terminateConnection:
+            self.terminateConnection.cancel()
+            self.terminateConnection = None
 
     def rawDataReceived(self, data):
+        if self.terminateConnection:
+            self.terminateConnection.reset(self.timeout)
         if len(data) < self.length:
             self.requests[-1].handleContentChunk(data)
             self.length = self.length - len(data)
@@ -986,6 +999,9 @@
             # notify next request it can start writing
             if self.requests:
                 self.requests[0].noLongerQueued()
+            else:
+                self.terminateConnection = reactor.callLater(self.timeout,
+                                                  self.transport.loseConnection)
         else:
             self.transport.loseConnection()
 
@@ -998,6 +1014,7 @@
     """Factory for HTTP server."""
 
     protocol = HTTPChannel
+    timeout = 60
 
     logPath = None
 




From m at moshez.org  Sun May 11 09:17:08 2003
From: m at moshez.org (Moshe Zadka)
Date: 11 May 2003 13:17:08 -0000
Subject: [Twisted-Python] BuildBot Configuration
Message-ID: <20030511131708.7565.qmail@green.zadka.com>

I'd like to request that the "gtk" and "poll" reactors will seperated
from the main test into "working reactors". Those two reactors pass the
unit tests usually, and so a commiter has reasons to suspect a test
failure here is his test failure. Gtk2, Qt and cReactor fail quite often.
I am no longer bothered by a red heading there, which is why it's bad
that things like poll and gtk failures don't affect something which does
bother me :)

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From glyph at twistedmatrix.com  Sun May 11 09:22:19 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 11 May 2003 08:22:19 -0500
Subject: [Twisted-Python] [PATCH] HTTP server fix for the FD problem
In-Reply-To: <20030511092842.GA24921@frobozz.local>
Message-ID: <9740B60A-83B3-11D7-AD87-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Sunday, May 11, 2003, at 04:28 AM, Andrew Bennetts wrote:

> I'm a little concerned that I'm being a touch to evil, though:
>
> -class HTTPChannel(basic.LineReceiver):
> +class HTTPChannel(policies.TimeoutWrapper(basic.LineReceiver)):

Yow... yes.

I like the fact that your code is generic, but can you modify it to be 
applied at "run-time" rather than at "compile-time"?  It seems to me 
like it would be easier to tweak if we did that.  (Say, modify the 
buildProtocol method of HTTPFactory...)

HTTP may be enough of a special case that Moshe's patch is a good idea. 
  Could this code be re-used for, say, IRC?
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+vk6PvVGR4uSOE2wRAl8DAKCdHV81wkVfr8FczoEebFqES2FFVgCgqHEZ
WkFQD49s8Jpd9DwyCUy5TtY=
=dcLl
-----END PGP SIGNATURE-----




From glyph at twistedmatrix.com  Sun May 11 09:27:09 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 11 May 2003 08:27:09 -0500
Subject: [Twisted-Python] Large Transfers
In-Reply-To: <200305101833.16686.uwe@oss4u.com>
Message-ID: <4438ED66-83B4-11D7-AD87-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Saturday, May 10, 2003, at 08:33 PM, Uwe C. Schroeder wrote:

> Thanks a lot for taking the time to assemble this.
> This makes it way clearer.

You're welcome.  I'm glad that it made sense.

If you want to repay the favor, turning this into a more 
generally-useful utility class and contributing it back to Twisted 
would be great :-).

PB wizards: look at the example in the previous file.  I think that 
with some cacheable magic we could actually set up a utility using 
Cacheables where, when a Pageable is returned, it instantiates an 
appropriate client-side collector object and then returns that as the 
final answer when the paging is done.  This would be more convenient 
than having to change the signature of objects which may return large 
quantities of data.  For extra credit, add an errback-calling mechanism.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+vk+yvVGR4uSOE2wRAk7UAJ4wBqxAyoMrPzIRoT6qXQPuu9q7RQCeLhB3
T3ZwRgca07+HPS4nzfemewM=
=7/j9
-----END PGP SIGNATURE-----




From andrew-twisted at puzzling.org  Sun May 11 10:08:57 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 12 May 2003 00:08:57 +1000
Subject: [Twisted-Python] [PATCH] HTTP server fix for the FD problem
In-Reply-To: <20030511092842.GA24921@frobozz.local>
References: <20030511092842.GA24921@frobozz.local>
Message-ID: <20030511140857.GA27478@frobozz.local>

I shouldn't make last-minute untested changes :(

On Sun, May 11, 2003 at 07:28:42PM +1000, Andrew Bennetts wrote:
[...]
> +def TimeoutWrapper(protocolClass):
> +    class _TimeoutProtocol(protocolClass, object):
> +        """Protocol that automatically disconnects when the connection is idle.
> +        
> +        Stability: Unstable
> +        """
> +
> +        def connectionMade(self):
> +            self.timeoutCall = None
> +            if getattr(self, 'timeoutPeriod', None):

This last line here should of course have a "is not None" in it:
+            if getattr(self, 'timeoutPeriod', None) is not None:

Also, test_http.py needs to be patched:

Index: twisted/test/test_http.py
===================================================================
RCS file: /cvs/Twisted/twisted/test/test_http.py,v
retrieving revision 1.18
diff -u -r1.18 test_http.py
--- twisted/test/test_http.py   18 Feb 2003 12:34:53 -0000      1.18
+++ twisted/test/test_http.py   11 May 2003 14:07:49 -0000
@@ -102,6 +102,7 @@
     def testBuffer(self):
         b = StringIOWithoutClosing()
         a = http.HTTPChannel()
+        a.timeoutPeriod = 60
         a.requestFactory = DummyHTTPHandler
         a.makeConnection(protocol.FileWrapper(b))
         # one byte at a time, to stress it.
@@ -198,6 +199,7 @@
 
     def testLoopback(self):
         server = http.HTTPChannel()
+        server.timeoutPeriod = 60
         server.requestFactory = DummyHTTPHandler
         client = LoopbackHTTPClient()
         client.handleResponse = self._handleResponse
@@ -277,6 +279,7 @@
         httpRequest = httpRequest.replace("\n", "\r\n")
         b = StringIOWithoutClosing()
         a = http.HTTPChannel()
+        a.timeoutPeriod = 60
         a.requestFactory = requestClass
         a.makeConnection(protocol.FileWrapper(b))
         # one byte at a time, to stress it.


-Andrew.




From andrew-twisted at puzzling.org  Sun May 11 10:20:47 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 12 May 2003 00:20:47 +1000
Subject: [Twisted-Python] [PATCH] HTTP server fix for the FD problem
In-Reply-To: <9740B60A-83B3-11D7-AD87-000393C9700E@twistedmatrix.com>
References: <20030511092842.GA24921@frobozz.local> <9740B60A-83B3-11D7-AD87-000393C9700E@twistedmatrix.com>
Message-ID: <20030511142046.GB27478@frobozz.local>

On Sun, May 11, 2003 at 08:22:19AM -0500, Glyph Lefkowitz wrote:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
> 
> 
> On Sunday, May 11, 2003, at 04:28 AM, Andrew Bennetts wrote:
> 
> >I'm a little concerned that I'm being a touch to evil, though:
> >
> >-class HTTPChannel(basic.LineReceiver):
> >+class HTTPChannel(policies.TimeoutWrapper(basic.LineReceiver)):
> 
> Yow... yes.
> 
> I like the fact that your code is generic, but can you modify it to be 
> applied at "run-time" rather than at "compile-time"?  It seems to me 
> like it would be easier to tweak if we did that.  (Say, modify the 
> buildProtocol method of HTTPFactory...)

The existing TimeoutFactory in twisted.protocols.policies is already like
that (as are all the other policies).  This patch duplicates most of that
code, though -- I should try to spend some time to find a way to make the
same code usable both ways.  Certainly that should be done before this patch
gets checked in.

> HTTP may be enough of a special case that Moshe's patch is a good idea. 

If do that, I think it should be tweaked to use the same variables as the
TimeoutWrapper (or vice-versa) for consistency's sake, e.g. 'timeout' ->
'timeoutPeriod', and 'terminateConnection' -> 'timeoutCall'.

>  Could this code be re-used for, say, IRC?

Yep, I think the TimeoutWrapper is flexible enough to handle other protocols
cleanly; all a subclass of TimeoutWrapper(...) needs to do control timeouts
is call self.resetTimeout() and self.clearTimeout().  You can even adjust
the timeout period per-instance, if needed.  I'd love to hear if anyone can
think of any protocols this isn't sufficient for.

That said, I'm not overly attached to my implementation.  I really think
this should be generic, but if there's a less evil way to do it I'll happily
ditch this code.

-Andrew.




From m at moshez.org  Sun May 11 10:29:19 2003
From: m at moshez.org (Moshe Zadka)
Date: 11 May 2003 14:29:19 -0000
Subject: [Twisted-Python] [PATCH] HTTP server fix for the FD problem
In-Reply-To: <9740B60A-83B3-11D7-AD87-000393C9700E@twistedmatrix.com>
References: <9740B60A-83B3-11D7-AD87-000393C9700E@twistedmatrix.com>
Message-ID: <20030511142919.10523.qmail@green.zadka.com>

On Sun, 11 May 2003, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> Could this code be re-used for, say, IRC?

IRC isn't a problem.
Server pings means that the TCP timeout mechanism takes care of timeouting
inactive sockets. If we haven't implemented server pings, we should :)
 
-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From m at moshez.org  Sun May 11 10:40:20 2003
From: m at moshez.org (Moshe Zadka)
Date: 11 May 2003 14:40:20 -0000
Subject: [Twisted-Python] [PATCH] A More Compatible Timeout
Message-ID: <20030511144020.10608.qmail@green.zadka.com>

This patch is functionally the same, but uses timeoutCall
and timeoutPeriod instead of timeout and terminateConnection.

Index: twisted/protocols/http.py
===================================================================
RCS file: /cvs/Twisted/twisted/protocols/http.py,v
retrieving revision 1.79
diff -u -r1.79 http.py
--- twisted/protocols/http.py	8 May 2003 16:28:09 -0000	1.79
+++ twisted/protocols/http.py	11 May 2003 14:37:42 -0000
@@ -864,6 +864,7 @@
     __header = ''
     __first_line = 1
     __content = None
+    timeoutCall = None
 
     # set in instances or subclasses
     requestFactory = Request
@@ -873,7 +874,14 @@
         # the request queue
         self.requests = []
 
+    def connectionMade(self):
+        self.timeoutPeriod = self.factory.timeoutPeriod
+        self.timeoutCall = reactor.callLater(self.timeoutPeriod,
+                                             self.transport.loseConnection)
+
     def lineReceived(self, line):
+        if self.timeoutCall:
+            self.timeoutCall.reset(self.timeoutPeriod)
         if self.__first_line:
             # if this connection is not persistent, drop any data which
             # the client (illegally) sent after the last request.
@@ -944,8 +952,13 @@
 
         req = self.requests[-1]
         req.requestReceived(command, path, version)
+        if self.timeoutCall:
+            self.timeoutCall.cancel()
+            self.timeoutCall = None
 
     def rawDataReceived(self, data):
+        if self.timeoutCall:
+            self.timeoutCall.reset(self.timeoutPeriod)
         if len(data) < self.length:
             self.requests[-1].handleContentChunk(data)
             self.length = self.length - len(data)
@@ -1000,6 +1013,9 @@
             # notify next request it can start writing
             if self.requests:
                 self.requests[0].noLongerQueued()
+            else:
+                self.timeoutCall = reactor.callLater(self.timeoutPeriod,
+                                                  self.transport.loseConnection)
         else:
             self.transport.loseConnection()
 
@@ -1012,6 +1028,7 @@
     """Factory for HTTP server."""
 
     protocol = HTTPChannel
+    timeoutPeriod = 60
 
     logPath = None
 

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From miathan at goliath.darktech.org  Sun May 11 10:45:46 2003
From: miathan at goliath.darktech.org (W.J.)
Date: Sun, 11 May 2003 16:45:46 +0200 (CEST)
Subject: [Twisted-Python] twisted.words maintainer
Message-ID: <Pine.LNX.4.44.0305111640110.9134-100000@zolder>

Hello there,

I'm trying to do some work on twisted.words, so I need to know who is the
current maintainer of that beast.

We should have a word about the direction you want it to go in, to know if
the ideas and changes I have in mind fit in.

Wladimir




From uwe at oss4u.com  Sun May 11 10:45:07 2003
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Sun, 11 May 2003 07:45:07 -0700
Subject: [Twisted-Python] Large Transfers
In-Reply-To: <4438ED66-83B4-11D7-AD87-000393C9700E@twistedmatrix.com>
References: <4438ED66-83B4-11D7-AD87-000393C9700E@twistedmatrix.com>
Message-ID: <200305110745.07913.uwe@oss4u.com>

On Sunday 11 May 2003 06:27 am, Glyph Lefkowitz wrote:
> On Saturday, May 10, 2003, at 08:33 PM, Uwe C. Schroeder wrote:
> > Thanks a lot for taking the time to assemble this.
> > This makes it way clearer.
>
> You're welcome.  I'm glad that it made sense.
>
> If you want to repay the favor, turning this into a more
> generally-useful utility class and contributing it back to Twisted
> would be great :-).
>
> PB wizards: look at the example in the previous file.  I think that
> with some cacheable magic we could actually set up a utility using
> Cacheables where, when a Pageable is returned, it instantiates an
> appropriate client-side collector object and then returns that as the
> final answer when the paging is done.  This would be more convenient
> than having to change the signature of objects which may return large
> quantities of data.  For extra credit, add an errback-calling mechanism.

And maybe add some methods to do this the other way round so that it becomes 
bidirectional.

	UC

--
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417




From typo at soniq.net  Sun May 11 13:09:14 2003
From: typo at soniq.net (Paul Boehm)
Date: Sun, 11 May 2003 19:09:14 +0200
Subject: [Twisted-Python] some reconfiguration questions
Message-ID: <20030511170914.GA1994@soniq.net>

hi,

what's currently the preferred way to reconfigure applications while they
are running, or how does one reconfigure taps ?

can manhole listen on a unix domain socket? i don't really like having
to have a listening network socket open for every twisted app i run.

is tapconvert the only way to reconfigure a tap?
what about writing a mktap style app, that just sets the changes given
at the commandline for an existing app, instead of creating a new one.

doesn't storing all data inside the application pickle make it harder to keep
changes inside the application configuration, seperate from the application data
(which hopefully is less likely to change all the time).

can i really depend on the application author to keep a styles.Versioned record
of all import class changes? what if i decide to upgrade while skipping a few
versions, and then my application tap, including all data, doesn't work anymore?

  paul



From itamar at itamarst.org  Sun May 11 13:20:22 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 11 May 2003 13:20:22 -0400
Subject: [Twisted-Python] some reconfiguration questions
In-Reply-To: <20030511170914.GA1994@soniq.net>
References: <20030511170914.GA1994@soniq.net>
Message-ID: <20030511132022.071398ca.itamar@itamarst.org>

On Sun, 11 May 2003 19:09:14 +0200
Paul Boehm <typo at soniq.net> wrote:

> what's currently the preferred way to reconfigure applications while
> they are running, or how does one reconfigure taps ?

There's coil - except it sucks and needs to be rewritten.

> can manhole listen on a unix domain socket? i don't really like having
> to have a listening network socket open for every twisted app i run.

Yes it can.

> doesn't storing all data inside the application pickle make it harder
> to keep changes inside the application configuration, seperate from
> the application data(which hopefully is less likely to change all the
> time).

You shouldn't store data in the TAP. As for configuration, if you have
the need to change your config a lot, don't use TAPs, use a traditional
config file (or a python file you edit to change the config - looking at
the twisted-web debian package may be instructive).

> can i really depend on the application author to keep a
> styles.Versioned record of all import class changes? what if i decide
> to upgrade while skipping a few versions, and then my application tap,
> including all data, doesn't work anymore?

I write my code so worst case I can always delete the old TAP and run
mktap again without problems.

You should *never* store application data in TAPs when writing real
applications (although it's a useful technique for prototyping,
occasionally).

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From m at moshez.org  Sun May 11 19:12:59 2003
From: m at moshez.org (Moshe Zadka)
Date: 11 May 2003 23:12:59 -0000
Subject: [Twisted-Python] [PATCH] Multiple Reactors
Message-ID: <20030511231259.30029.qmail@green.zadka.com>

Hi!
The following patch removes the globals from SelectReactor, so
that multiple SelectReactors are possible.

Index: twisted/internet/default.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/default.py,v
retrieving revision 1.79
diff -u -r1.79 default.py
--- twisted/internet/default.py	10 May 2003 12:52:37 -0000	1.79
+++ twisted/internet/default.py	11 May 2003 23:11:26 -0000
@@ -367,8 +367,6 @@
 
 
 # global state for selector
-reads = {}
-writes = {}
 
 
 def win32select(r, w, e, timeout=None):
@@ -403,13 +401,18 @@
 
     __implements__ = (PosixReactorBase.__implements__, IReactorFDSet)
 
+    def __init__(self):
+        PosixReactorBase.__init__(self)
+        self.reads = {}
+        self.writes = {}
+
     def _preenDescriptors(self):
         log.msg("Malformed file descriptor found.  Preening lists.")
-        readers = reads.keys()
-        writers = writes.keys()
-        reads.clear()
-        writes.clear()
-        for selDict, selList in ((reads, readers), (writes, writers)):
+        readers = self.reads.keys()
+        writers = self.writes.keys()
+        self.reads.clear()
+        self.writes.clear()
+        for selDict, selList in ((self.reads, readers), (self.writes, writers)):
             for selectable in selList:
                 try:
                     select.select([selectable], [selectable], [selectable], 0)
@@ -419,19 +422,19 @@
                     selDict[selectable] = 1
 
 
-    def doSelect(self, timeout,
-                 # Since this loop should really be as fast as possible,
-                 # I'm caching these global attributes so the interpreter
-                 # will hit them in the local namespace.
-                 reads=reads,
-                 writes=writes,
-                 rhk=reads.has_key,
-                 whk=writes.has_key):
+    def doSelect(self, timeout):
         """Run one iteration of the I/O monitor loop.
 
         This will run all selectables who had input or output readiness
         waiting for them.
         """
+        # Since this loop should really be as fast as possible,
+        # I'm caching these global attributes so the interpreter
+        # will hit them in the local namespace.
+        reads=self.reads
+        writes=self.writes
+        rhk=reads.has_key
+        whk=writes.has_key
         while 1:
             try:
                 r, w, ignored = _select(reads.keys(),
@@ -502,33 +505,33 @@
     def addReader(self, reader):
         """Add a FileDescriptor for notification of data available to read.
         """
-        reads[reader] = 1
+        self.reads[reader] = 1
 
     def addWriter(self, writer):
         """Add a FileDescriptor for notification of data available to write.
         """
-        writes[writer] = 1
+        self.writes[writer] = 1
 
     def removeReader(self, reader):
         """Remove a Selectable for notification of data available to read.
         """
-        if reads.has_key(reader):
-            del reads[reader]
+        if self.reads.has_key(reader):
+            del self.reads[reader]
 
     def removeWriter(self, writer):
         """Remove a Selectable for notification of data available to write.
         """
-        if writes.has_key(writer):
-            del writes[writer]
+        if self.writes.has_key(writer):
+            del self.writes[writer]
 
     def removeAll(self):
         """Remove all readers and writers, and return list of Selectables."""
-        readers = reads.keys()
+        readers = self.reads.keys()
         for reader in readers:
-            if reads.has_key(reader):
-                del reads[reader]
-            if writes.has_key(reader):
-                del writes[reader]
+            if self.reads.has_key(reader):
+                del self.reads[reader]
+            if self.writes.has_key(reader):
+                del self.writes[reader]
         return readers
 
 

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From stuart.hungerford at anu.edu.au  Sun May 11 23:23:30 2003
From: stuart.hungerford at anu.edu.au (Stuart Hungerford)
Date: Mon, 12 May 2003 13:23:30 +1000
Subject: [Twisted-Python] [Twisted.Web] How to access root resource without .rpy file?
Message-ID: <5.2.0.9.0.20030512130858.00bae7d8@anusf.anu.edu.au>

Hi all,

Apologies if this is an FAQ -- I'm still working my way through the
documentation and mailing list postings.

I have a Twisted.Web server serving resources from a directory
called "project" say at the (example) URL:

      http://example.org:8080/project

Later I plan to offer URL's at that address like:

      http://example.org:8080/project/service1
      http://example.org:8080/project/service2?param=1

I understand that each component of a URL is handled as a Twisted
web "resource" with various methods for accessing other components
in the URL and controlling rendering to HTML.

How can I get Python access to the root resource here (in my
case "project") when the URL is first processed by Twisted.Web?

I understand that I could create a project.rpy file which creates
a resource but I need to use the unadorned resource names above
rather than http://example.org:8080/project/project.rpy

Any advice much appreciated,


Cheers,

Stu

--
:: Stuart Hungerford (stuart.hungerford at anu.edu.au)
:: ANU Internet Futures Group




From digi at treepy.com  Mon May 12 01:52:31 2003
From: digi at treepy.com (p@)
Date: Mon, 12 May 2003 07:52:31 +0200
Subject: [Twisted-Python] newbie udp
Message-ID: <00b301c3184a$afcb03f0$ec47da50@pat>

Hi list,
 
I tested the example given in the documentation. with the following
code:
 
class UdpServer (DatagramProtocol):
    def datagramReceived(self, request, address):
        print 'udp recieved:'+request
        response = '\x02'
        self.transport.write(response,address)
 
reactor.listenUDP(serverPort, UdpServer())
reactor.run()
 
if I send a udp packet to this server I get the following exception:
 
udp recieved:a
Traceback (most recent call last):
  File "C:\Python22\Lib\site-packages\twisted\internet\default.py", line
473, in
 doSelect
    _logrun(selectable, _drdw, selectable, method, dict)
  File "C:\Python22\Lib\site-packages\twisted\python\log.py", line 64,
in callWi
thLogger
    callWithContext({"system": lp}, func, *args, **kw)
  File "C:\Python22\Lib\site-packages\twisted\python\log.py", line 51,
in callWi
thContext
    return context.call({ILogContext: newCtx}, func, *args, **kw)
  File "C:\Python22\Lib\site-packages\twisted\python\context.py", line
32, in ca
llWithContext
    return func(*args,**kw)
--- <exception caught here> ---
  File "C:\Python22\Lib\site-packages\twisted\internet\default.py", line
482, in
 _doReadOrWrite
    why = getattr(selectable, method)()
  File "C:\Python22\Lib\site-packages\twisted\internet\udp.py", line
105, in doR
ead
    data, addr = self.socket.recvfrom(self.maxPacketSize)
  File "<string>", line 1, in recvfrom
 
socket.error: (10035, 'The socket operation could not complete without
blocking')
 
I am on win32 and using python 2.2 and this is twisted 1.0.5. What am I
doing wrong?
 
Cheers
 
digi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20030512/cb53b012/attachment.htm 

From smurf at smurf.noris.de  Mon May 12 03:26:45 2003
From: smurf at smurf.noris.de (Matthias Urlichs)
Date: Mon, 12 May 2003 09:26:45 +0200
Subject: [Twisted-Python] twisted.web.woven.guard.SessionWrapper problems
Message-ID: <pan.2003.05.12.07.26.23.732558@smurf.noris.de>

I was experimenting with twisted.web.woven.guard yesterday and ran into a
problem.

Some browsers, including wget, don't like _at_all_ when you have a cycle
in your redirections, even though they should notice that they now have a
cookie while formerly they didn't.

Therefore I propose to rewrite the SessionWrapper to always change the
user's path, like this (the string "sp" is self.cookieKey):

/sessionized-url/foo
	Set cookie
	Redirect to /sessionized-url/sp__aef9c34aecc3d9148/foo
/sessionized-url/sp__aef9c34aecc3d9148/foo
	Redirect to either of the next two URLs depending on whether I see a
	cookie
/sessionized-url/sp/foo
	URL to use with cookies
/sessionized-url/sp_aef9c34aecc3d9148/foo
	URL to use without cookies

Finally, /sessionized-url/sp/foo, but no cookie, would do

	class SessionWrapper(...):
		def __init__(..., on_timeout=None):
			...
			self.prefix=prefix
			self.timed_out = timed_out
		def getChild(...):
			if (path == self.prefix and not self.sessions.has_key(cookie):
				return self.on_timeout(path,request)

so that access with no session can be distinguished from a plain link into
/sessionized-url/foo; the latter means the user might want to log in, but
the former should tell the user that their session has timed out before
offering the login page.

An additional advantage of this scheme would be that
.../unsessionized-url/ can be reaced with a constant number of backpaths.

Oh yes, and I'd like to make http://somewhere.example/sessionized-url and
(i.e. no paths) work. At the moment that causes an ugly error because
SessionWrapper doesn't override render().

Thoughts? Or is somebody else going to rewrite this module next week
anyway and I therefore probably shouldn't bother?

-- 
Matthias Urlichs  | {M:U} IT Consulting @ m-u-it.de  |  smurf at smurf.noris.de
Disclaimer: The quote was selected randomly. Really. | http://smurf.noris.de
-- 
Van Roy's Law:
	An unbreakable toy is useful for breaking other toys.




From m at moshez.org  Mon May 12 04:23:07 2003
From: m at moshez.org (Moshe Zadka)
Date: 12 May 2003 08:23:07 -0000
Subject: [Twisted-Python] [Twisted.Web] How to access root resource without .rpy file?
In-Reply-To: <5.2.0.9.0.20030512130858.00bae7d8@anusf.anu.edu.au>
References: <5.2.0.9.0.20030512130858.00bae7d8@anusf.anu.edu.au>
Message-ID: <20030512082307.18018.qmail@green.zadka.com>

On Mon, 12 May 2003, Stuart Hungerford <stuart.hungerford at anu.edu.au> wrote:

> Later I plan to offer URL's at that address like:
> 
>       http://example.org:8080/project/service1
>       http://example.org:8080/project/service2?param=1
<snip>
> I understand that I could create a project.rpy file which creates
> a resource but I need to use the unadorned resource names above
> rather than http://example.org:8080/project/project.rpy

This is why Twisted Web supports ignoring extension. I'm not sure how
you're deploying your server. If you are writing a configuration file
by hand you can do something like:

"""
from twisted.internet import app
from twisted.web import static, server, script

root = static.File("/serve/example")
root.processors = {'.rpy': script.ResourceScript}
root.ignoreExt('.rpy')
application = app.Application('web')
application.listenTCP(8080, server.Site(root)
"""

If you use mktap,
% mktap web --path=/serve/example --ignore-ext=.rpy --port=8080
should work.

Of course, in the first example, you could use explicit putChild:

"""
from twisted.internet import app
from twisted.web import static, server, script
import myCode

root = static.File("/serve/example")
root.putChild('project', myCode.ResourceIntendedForProject())
application = app.Application('web')
application.listenTCP(8080, server.Site(root)
"""

Since you've given no further data, it is hard to guess which of those
option best applies to you. I wish to further mention that if you use
Debian, the twisted-web can give you some more options, depending on your
security concern. For example, merely dropping in /etc/twisted-web/local.d
a file called "99addproject.py" with contents

"""
import myCode
default.putChild('project', myCode.ResourceIntendedForProject())
"""

would work.

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From smurf at smurf.noris.de  Mon May 12 06:31:09 2003
From: smurf at smurf.noris.de (Matthias Urlichs)
Date: Mon, 12 May 2003 12:31:09 +0200
Subject: [Twisted-Python] =?UTF-8?b?4oCqUEFUQ0g6?= twisted.web.util.Redirect.isLeaf := 1
Message-ID: <pan.2003.05.12.10.31.06.749934@smurf.noris.de>

twisted.web.util.Redirect should set its own isLeaf.
Callers can then use "return Redirect(...)" instead of the cumbersome
"rd = Redirect(); rd.isLeaf=1; return rd" I'm seeing.

--- 1.10/twisted/web/util.py    Mon Apr 28 00:34:10 2003
+++ edited/twisted/web/util.py  Mon May 12 12:25:02 2003
@@ -29,6 +29,7 @@
     def __init__(self, url):
         resource.Resource.__init__(self)
         self.url = url
+        self.isLeaf = 1

     def render(self, request):
         return redirectTo(self.url, request)

-- 
Matthias Urlichs  | {M:U} IT Consulting @ m-u-it.de  |  smurf at smurf.noris.de
Disclaimer: The quote was selected randomly. Really. |  http://smurf.noris.de
-- 
Real Users know your home telephone number.





From m at moshez.org  Mon May 12 06:47:12 2003
From: m at moshez.org (Moshe Zadka)
Date: 12 May 2003 10:47:12 -0000
Subject: [Twisted-Python] Re: twisted pyblosxom
In-Reply-To: <3EBF795F.5070501@celestix.com>
References: <3EBF795F.5070501@celestix.com>
Message-ID: <20030512104712.23262.qmail@green.zadka.com>

[CCing to the mailing list, which is the correct place to send questions to]

On Mon, 12 May 2003 18:37:19 +0800, Wari Wahab <wari at celestix.com> wrote:

> Wow, that's a fast reply :) Anyway, CGI does not work because:
...

I have a feeling that you're doing something strange, like using the
CGI module from inside the same process? Twisted Web runs CGIs just
like any other webserver does -- in a seperate process.

> Anyway, I'm really quite new to this, and I have no idea to make 
> pyblosxom a non-blocking resource. There are a few areas in pyblosxom 
> which is calculated intensively that makes pyblosxom somewhat blocking. 

There are a couple of classic tricks, which vary between deferred when
there's something specific you're waiting for or reactor.callLater loops
if you just want to break apart something big and reactor.callInThread
when it is too hard to break it apart.

> Another kludge I did was to return a blank string at the end of render() 
> although I did use request.write() all over.

It was probably better to request.finish() yourself, and
return server.NOT_DONE_YET.
 
> PS: If I were to make this run on port 80, how do I make twisted change 
> to a different user? I know it's possible with twisd and mktap commands, 
> just not sure on how to do it in an application.

The correct way is to write a -y'able file.

'''
# call this pybloxom.ypy
from twisted.internet import app
from twisted.web import server

root = CreatePyBloxomResource()
site = server.Site(root)
application = app.Application("pybloxsom", uid=33, gid=33)
application.listenTCP(80, site)
'''

Now use

twistd -y pybloxom.ypy

HTH
-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From m at moshez.org  Mon May 12 09:00:59 2003
From: m at moshez.org (Moshe Zadka)
Date: 12 May 2003 13:00:59 -0000
Subject: [Twisted-Python] [PATCH] Fix FutureWarning
Message-ID: <20030512130059.28408.qmail@green.zadka.com>

hex()/oct() will return signed strings for negative ints in 2.4 and
onwards. Here is a patch to twisted/world/structfile.py to prevent
that from affecting twisted:
[by the by, I also switched from except: to except TypeError, seeing
as this is the only error we expect hex() to throw]

Index: twisted/world/structfile.py
===================================================================
RCS file: /cvs/Twisted/twisted/world/structfile.py,v
retrieving revision 1.1
diff -u -r1.1 structfile.py
--- twisted/world/structfile.py	7 May 2003 13:56:32 -0000	1.1
+++ twisted/world/structfile.py	12 May 2003 12:58:50 -0000
@@ -198,8 +198,13 @@
             f.write('<tr>')
             for item in row:
                 try:
-                    item = hex(item)
-                except:
+                    if item >= 0:
+                        item = hex(item)
+                    else:
+                        item = hex((1L<<32)-item).lower()
+                        if item[-1] == 'l':
+                            item = item[:-1]
+                except TypeError:
                     item = str(item)
                 f.write('<td>'+item+'</td>')
             f.write('</tr>')

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From iko at strakt.com  Mon May 12 10:28:50 2003
From: iko at strakt.com (Anders Hammarquist)
Date: Mon, 12 May 2003 16:28:50 +0200
Subject: [Twisted-Python] Updated SMTP patch
Message-ID: <200305121428.h4CESoM4024595@fido.strakt.com>

Hi!

Since things have been happening in the smtp code, and my patch for
the SMTP client hasn't been applied yet, I thought it was time to
update it. 

About the recent change to validateTo using a defered rather than
"straight" callbacks, I missed the discussion (if any), but I *strongly*
feel that validateTo and validateFrom should use the same method,
and that "failed" addresses should be communicated with failures
rather than "magic". So I changed it.

It also fixes a type I found in twisted.mail.relaymanager

/Anders

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: text/x-patch
Size: 38542 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030512/59d58016/attachment.bin 

From itamar at itamarst.org  Mon May 12 11:39:47 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 12 May 2003 11:39:47 -0400
Subject: [Twisted-Python] newbie udp
In-Reply-To: <00b301c3184a$afcb03f0$ec47da50@pat>
References: <00b301c3184a$afcb03f0$ec47da50@pat>
Message-ID: <20030512113947.639253d3.itamar@itamarst.org>

On Mon, 12 May 2003 07:52:31 +0200
"p@" <digi at treepy.com> wrote:

> socket.error: (10035, 'The socket operation could not complete without
> blocking')
>  
> I am on win32 and using python 2.2 and this is twisted 1.0.5. What am
> I doing wrong?

UDP code hasn't been extensively tested on Windows. I'll see about
fixing this (and setting up a win32 buildbot machine).

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From digi at treepy.com  Mon May 12 11:51:27 2003
From: digi at treepy.com (p@)
Date: Mon, 12 May 2003 17:51:27 +0200
Subject: AW: [Twisted-Python] newbie udp
In-Reply-To: <20030512113947.639253d3.itamar@itamarst.org>
Message-ID: <004101c3189e$5a3ad3d0$ec47da50@pat>

I swtiched back to version 1.0 ... there it seams to work perfectly
Cheers

p@

-----Urspr?ngliche Nachricht-----
Von: twisted-python-admin at twistedmatrix.com
[mailto:twisted-python-admin at twistedmatrix.com] Im Auftrag von Itamar
Shtull-Trauring
Gesendet: Montag, 12. Mai 2003 17:40
An: twisted-python at twistedmatrix.com
Betreff: Re: [Twisted-Python] newbie udp

On Mon, 12 May 2003 07:52:31 +0200
"p@" <digi at treepy.com> wrote:

> socket.error: (10035, 'The socket operation could not complete without
> blocking')
>  
> I am on win32 and using python 2.2 and this is twisted 1.0.5. What am
> I doing wrong?

UDP code hasn't been extensively tested on Windows. I'll see about
fixing this (and setting up a win32 buildbot machine).

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python





From itamar at itamarst.org  Mon May 12 12:09:45 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 12 May 2003 12:09:45 -0400
Subject: AW: [Twisted-Python] newbie udp
In-Reply-To: <004101c3189e$5a3ad3d0$ec47da50@pat>
References: <20030512113947.639253d3.itamar@itamarst.org>
	<004101c3189e$5a3ad3d0$ec47da50@pat>
Message-ID: <20030512120945.4ecd733d.itamar@itamarst.org>

On Mon, 12 May 2003 17:51:27 +0200
"p@" <digi at treepy.com> wrote:

> I swtiched back to version 1.0 ... there it seams to work perfectly
> Cheers

UDP in v1.0 had a different API and was very broken... I fixed your bug
in CVS, I think - give it a try.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From exarkun at intarweb.us  Mon May 12 14:39:41 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Mon, 12 May 2003 14:39:41 -0400
Subject: [Twisted-Python] Updated SMTP patch
In-Reply-To: <200305121428.h4CESoM4024595@fido.strakt.com>
References: <200305121428.h4CESoM4024595@fido.strakt.com>
Message-ID: <20030512183941.GA10373@meson.dyndns.org>

On Mon, May 12, 2003 at 04:28:50PM +0200, Anders Hammarquist wrote:
> Hi!
> 
> Since things have been happening in the smtp code, and my patch for
> the SMTP client hasn't been applied yet, I thought it was time to
> update it. 
> 

  Thanks, I'll see if I can get it committed in the next day or two.

> About the recent change to validateTo using a defered rather than
> "straight" callbacks, I missed the discussion (if any), but I *strongly*
> feel that validateTo and validateFrom should use the same method,
> and that "failed" addresses should be communicated with failures
> rather than "magic". So I changed it.

  I don't see the behavior as magic.  It seems very analogous to str.find()
returning -1 when nothing is found.  The main reason I chose to avoid
failures here was to avoid the costs associated with them.  None instead of
a username as a callback seems to indicate an invalid address as clearly as
a failure object would.

  In this light, do you still object to the existing approach (assume that
at some point, I *will* get around to documenting just how it works, since
this is code meant to be overridden by users).

  Jp

-- 
A sad spectacle.  If they be inhabited, what a scope for misery 
and folly.  If they be not inhabited, what a waste of space.
                -- Thomas Carlyle, looking at the stars
-- 
 up 10 days, 16:39, 9 users, load average: 0.02, 0.05, 0.00
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030512/d50602fb/attachment.pgp 

From jml at ids.org.au  Tue May 13 08:02:35 2003
From: jml at ids.org.au (jml at ids.org.au)
Date: Tue, 13 May 2003 22:02:35 +1000
Subject: [Twisted-Python] twisted.world question
Message-ID: <20030513120235.GA17211@mumak.net>

Hello,

I have a class Bar, which is a subclass of Foo. I want Bar to be Storable, but
Foo is not. What am I required to persist in Bar in order to ensure that the
retrieved object is a fully working Foo?

e.g.

class Foo:
  pass

class Bar(Foo, Storable):
  __schema__ = { ... }

cheers,
jml
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030513/45133738/attachment.pgp 

From stuart.hungerford at anu.edu.au  Mon May 12 21:50:24 2003
From: stuart.hungerford at anu.edu.au (Stuart Hungerford)
Date: Tue, 13 May 2003 11:50:24 +1000
Subject: [Twisted-Python] Re: Twisted-Python digest, Vol 1 #749 - 5 msgs
In-Reply-To: <20030512104802.14606.8626.Mailman@pyramid.twistedmatrix.co
 m>
Message-ID: <5.2.0.9.0.20030513114708.00bb4f48@anusf.anu.edu.au>

Moshe writes:

 >> I understand that I could create a project.rpy file which creates
 >> a resource but I need to use the unadorned resource names above
 >> rather than http://example.org:8080/project/project.rpy
 >
 >This is why Twisted Web supports ignoring extension. I'm not sure how
 >you're deploying your server. If you are writing a configuration file
 >by hand you can do something like:
 >
 >"""
 >from twisted.internet import app
 >from twisted.web import static, server, script
 >
 >root = static.File("/serve/example")
 >root.processors = {'.rpy': script.ResourceScript}
 >root.ignoreExt('.rpy')
 >application = app.Application('web')
 >application.listenTCP(8080, server.Site(root)
 >"""
 >
 >If you use mktap,
 >% mktap web --path=/serve/example --ignore-ext=.rpy --port=8080
 >should work.
 > [...]

    Thanks for the advice, it's just what I need. It also
    shows just how flexible the underlying Twisted components
    are.

Cheers,

Stu

--
:: Stuart Hungerford (stuart.hungerford at anu.edu.au)
:: ANU Internet Futures Group




From glyph at twistedmatrix.com  Mon May 12 22:13:08 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 12 May 2003 21:13:08 -0500
Subject: [Twisted-Python] twisted.web.woven.guard.SessionWrapper problems
In-Reply-To: <pan.2003.05.12.07.26.23.732558@smurf.noris.de>
Message-ID: <7033844F-84E8-11D7-AD87-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Monday, May 12, 2003, at 02:26 AM, Matthias Urlichs wrote:

> Some browsers, including wget, don't like _at_all_ when you have a 
> cycle
> in your redirections, even though they should notice that they now 
> have a
> cookie while formerly they didn't.

I guess they really expect GET to be idempotent :-\

> Therefore I propose to rewrite the SessionWrapper to always change the
> user's path, like this (the string "sp" is self.cookieKey):
[...]
> so that access with no session can be distinguished from a plain link 
> into
> /sessionized-url/foo; the latter means the user might want to log in, 
> but
> the former should tell the user that their session has timed out before
> offering the login page.

What's problematic about this is that if the user bookmarks a page, or 
exchanges a link, I want to initialize the session without changing the 
URL.  In fact, it's somewhat pointless to have a URL (stateless 
location identifier) that specifically only works if you've initiated a 
stateful conversation.

Maybe there are some ways we could monkey with HTTP to cause browsers 
to be happier here: would a 307 (Temporary Redirect) be more 
appropriate than a 302 (Found)?  Or perhaps would these browsers be 
happier if we redirected them to 
/sessionized-url/foo?__session_just_started__=1 rather than 
/sessionized-url/foo ?  It would be unusual to bookmark that URL, since 
the extra crud would only be on the first URL you hit, and if you did 
we could always remove the query string rather than adding it.

> An additional advantage of this scheme would be that
> .../unsessionized-url/ can be reaced with a constant number of 
> backpaths.

This, however, I like.  I don't know if cookieKey is the right thing to 
use in the URL there, but having relative URLs that match regardless of 
your session negotiation strategy is a _big_ plus.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+wFS5vVGR4uSOE2wRAlzZAKCWJNdUbR50hLtilqFZ1NGJ2pP+TQCfYEv0
VCGTwm8HaTHXr3fscnBcU9U=
=8g4b
-----END PGP SIGNATURE-----




From wari at home.wari.org  Mon May 12 23:27:46 2003
From: wari at home.wari.org (Wari Wahab)
Date: Tue, 13 May 2003 11:27:46 +0800
Subject: [Twisted-Python] Re: twisted pyblosxom
In-Reply-To: <20030512104712.23262.qmail@green.zadka.com>
References: <3EBF795F.5070501@celestix.com> <20030512104712.23262.qmail@green.zadka.com>
Message-ID: <3EC06632.1060103@home.wari.org>

Moshe Zadka wrote:

>I have a feeling that you're doing something strange, like using the
>CGI module from inside the same process? Twisted Web runs CGIs just
>like any other webserver does -- in a seperate process.
>  
>
I know what you mean, just that there are only very few CGI calls in 
pyblosxom, and that can easily be converted to twisted if I want.

>There are a couple of classic tricks, which vary between deferred when
>there's something specific you're waiting for or reactor.callLater loops
>if you just want to break apart something big and reactor.callInThread
>when it is too hard to break it apart.
>
Hmm, I'll look into reactor.callInThread() first, there's one part of 
pyblosxom core that does this for loop which can get slow if there are a 
large number of entries.

>>Another kludge I did was to return a blank string at the end of render() 
>>although I did use request.write() all over.
>>    
>>
>It was probably better to request.finish() yourself, and
>return server.NOT_DONE_YET. 
>
It does look wierd in the code when I do:

def render(self, request):
    request.write("hello world")
    request.finish()
    return NOT_DONE_YET

Is this what you are saying?

>>PS: If I were to make this run on port 80, how do I make twisted change 
>>to a different user?
>>
>The correct way is to write a -y'able file.
>  
>
Hey, thanks for the help, twisted is really nice in this aspect. But one 
thing for sure, it's not easy for me to learn, but it's one of those 
things that if you know how to, then everything else seems easier :) I'm 
trying to learn more of twisted and see if it can be used for my project.





From m at moshez.org  Tue May 13 00:21:36 2003
From: m at moshez.org (Moshe Zadka)
Date: 13 May 2003 04:21:36 -0000
Subject: [Twisted-Python] Re: twisted pyblosxom
In-Reply-To: <3EC06632.1060103@home.wari.org>
References: <3EC06632.1060103@home.wari.org>, <3EBF795F.5070501@celestix.com> <20030512104712.23262.qmail@green.zadka.com>
Message-ID: <20030513042136.32160.qmail@green.zadka.com>

On Tue, 13 May 2003, Wari Wahab <wari at home.wari.org> wrote:

> It does look wierd in the code when I do:
> 
> def render(self, request):
>     request.write("hello world")
>     request.finish()
>     return NOT_DONE_YET
> 
> Is this what you are saying?

Yes, this is the correct way to do it. NOT_DONE_YET means more "I'm handling
this". The name is a *bit* misleading.

> Hey, thanks for the help, twisted is really nice in this aspect. But one 
> thing for sure, it's not easy for me to learn, but it's one of those 
> things that if you know how to, then everything else seems easier :) I'm 
> trying to learn more of twisted and see if it can be used for my project.

On the other hand, lots of us want a Twistedy blog thing :) 
-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From m at moshez.org  Tue May 13 00:37:32 2003
From: m at moshez.org (Moshe Zadka)
Date: 13 May 2003 04:37:32 -0000
Subject: [Twisted-Python] Re: Twisted-Python digest, Vol 1 #749 - 5 msgs
In-Reply-To: <5.2.0.9.0.20030513114708.00bb4f48@anusf.anu.edu.au>
References: <5.2.0.9.0.20030513114708.00bb4f48@anusf.anu.edu.au>
Message-ID: <20030513043732.32308.qmail@green.zadka.com>

On Tue, 13 May 2003, Stuart Hungerford <stuart.hungerford at anu.edu.au> wrote:

>     Thanks for the advice, it's just what I need. It also
>     shows just how flexible the underlying Twisted components
>     are.

Note that everything I said is covered in various places: while --ignore-ext
was not in the man page, it is covered in mktap web --help
'''
      --ignore-ext=       Specify an extension to ignore. These will be
                          processed in order.
'''

Resource.putChild is documented in
http://twistedmatrix.com/documents/TwistedDocs/current/api/public/twisted.web.resource.Resource.html#putChild

While File.ignoreExt had no docstring, the "ignoredExts" argument to File's
constructor, which is documented in 
http://twistedmatrix.com/documents/TwistedDocs/current/api/public/twisted.web.static.File.html#__init__
would have worked as well.

[I've now updated the manpage and the docstring]
 
-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From smurf at smurf.noris.de  Tue May 13 04:24:14 2003
From: smurf at smurf.noris.de (Matthias Urlichs)
Date: Tue, 13 May 2003 10:24:14 +0200
Subject: [Twisted-Python] twisted.web.woven.guard.SessionWrapper problems
References: <pan.2003.05.12.07.26.23.732558@smurf.noris.de> <7033844F-84E8-11D7-AD87-000393C9700E@twistedmatrix.com>
Message-ID: <pan.2003.05.13.08.24.12.755710@smurf.noris.de>

Hi,

Glyph Lefkowitz wrote:
> What's problematic about this is that if the user bookmarks a page, or
> exchanges a link, I want to initialize the session without changing the
> URL.  In fact, it's somewhat pointless to have a URL (stateless location
> identifier) that specifically only works if you've initiated a stateful
> conversation.

Well, the whole point of SessionWrapper is that you force a stateful
conversation, otherwise the link wouldn't be behind a session in the first
place. ;-)

Bookmarked links are not a big problem IMHO; the user logged in once, and
they'll unerstand that they'll have to log in again. If that turns out to
be a usability problem, the webmaster could add a "Please use _this_link_
if you want to bookmark this page" footer.

Next on my list will be to understand perspectives and PerspectiveWrapper
and t.w.w.forms in sufficient detail that I can refactor the thing. The
login page is much too static for my taste... plus there might be other
ways to log somebody in than to use a form.

> This, however, I like.  I don't know if cookieKey is the right thing to
> use in the URL there, but having relative URLs that match regardless of
> your session negotiation strategy is a _big_ plus

I think so too. I can't think of anything else to use there that makes
sense; the cookie key is already transmitted to the user anyway. Usually,
if you want "real" persistence, you don't let Twisted randomize it, and
thus it tends to be reasonably short (see Yahoo for an extreme example;
they use single letters... that takes things too far though, IMHO).

-- 
Matthias Urlichs  | {M:U} IT Consulting @ m-u-it.de  |  smurf at smurf.noris.de
Disclaimer: The quote was selected randomly. Really. | http://smurf.noris.de
-- 
"I realized that a psychological need for belief also
 resulted from childhood indoctrination, and that it
 had all the characteristics of addiction."
         [Neal Cary, American Atheists
          National Outreach Director]




From smurf at smurf.noris.de  Tue May 13 04:25:36 2003
From: smurf at smurf.noris.de (Matthias Urlichs)
Date: Tue, 13 May 2003 10:25:36 +0200
Subject: [Twisted-Python] Allow static.Data to be at the root
Message-ID: <pan.2003.05.13.08.25.34.929793@smurf.noris.de>

Here's a small patch to allow a twisted.web.static.Data element at the
root of your web space.


diff -Nru a/twisted/web/static.py b/twisted/web/static.py
--- a/twisted/web/static.py	Tue May 13 10:22:32 2003
+++ b/twisted/web/static.py	Tue May 13 10:22:32 2003
@@ -59,6 +59,12 @@
             request.setHeader("content-length", len(self.data))
             return ''
         return self.data
+	
+    def getChild(self,path,request):
+        """Return myself if I am the root."""
+        if path == '' and request.path == "/":
+            return self
+        return resource.Resource.getChild(self,path,request)
 
 def addSlash(request):
     host = request.getHeader("host")
-- 
Matthias Urlichs  | {M:U} IT Consulting @ m-u-it.de  |  smurf at smurf.noris.de
Disclaimer: The quote was selected randomly. Really. | http://smurf.noris.de
-- 
"I believe in eight of the ten commandments; and I believe
 in going to church every Sunday unless there's a game on."
                  [Steve Martin]




From smurf at smurf.noris.de  Tue May 13 04:45:18 2003
From: smurf at smurf.noris.de (Matthias Urlichs)
Date: Tue, 13 May 2003 10:45:18 +0200
Subject: [Twisted-Python] SessionWrapper rewrapped ;-)
Message-ID: <pan.2003.05.13.08.45.12.321602@smurf.noris.de>

Here's my current code WRT a (partially) rewritten SessionWrapper, with
expanded test case, and a small example on how to do authorization.

--- a/twisted/web/woven/guard.py	Tue May 13 10:42:34 2003
+++ b/twisted/web/woven/guard.py	Tue May 13 10:42:34 2003
@@ -8,6 +8,7 @@
 import random
 import time
 import md5
+import base64
 
 # Twisted Imports
 
@@ -17,8 +18,10 @@
 from twisted.internet import reactor
 from twisted.cred.error import Unauthorized
 
+_trans={"/":".", "+":"-", "=":"", "\n":""}
 def _sessionCookie():
-    return md5.new("%s_%s" % (str(random.random()) , str(time.time()))).hexdigest()
+    hash = md5.new("%s_%s" % (str(random.random()) , str(time.time())))
+    return "".join(map(lambda k: _trans.get(k,k), base64.encodestring(hash.digest())))
 
 class GuardSession(components.Componentized):
     """A user's session with a system.
@@ -129,22 +132,29 @@
     req.getSession = req.session._getSelf
 
 class SessionWrapper(Resource):
+	# XXX TODO: This wrapper doesn't pass query strings.
 
-    def __init__(self, rsrc, cookieKey=None):
+    def __init__(self, rsrc, cookieKey=None, on_timeout=None, lifetime=1800):
         Resource.__init__(self)
         self.resource = rsrc
         if cookieKey is None:
             cookieKey = "woven_session_" + _sessionCookie()
         self.cookieKey = cookieKey
+        self.on_timeout = on_timeout
         self.sessions = {}
+        self.lifetime = lifetime
 
     def getChild(self, path, request):
         # XXX refactor with PerspectiveWrapper
         if not request.prepath:
             return None
-        pp = request.prepath.pop()
-        _urlToMe = request.prePathURL()
-        request.prepath.append(pp)
+        if path is not None:
+            pp = request.prepath.pop()
+            _urlToMe = request.prePathURL()
+            request.prepath.append(pp)
+        else:
+            _urlToMe = request.prePathURL()
+
         def urlToChild(*ar):
             c = '/'.join(ar)
             if _urlToMe[-1] == '/':
@@ -152,55 +162,102 @@
                 return _urlToMe + c
             else:
                 return _urlToMe + '/' + c
-        # XXX
-        # print "I think I'm at:", _urlToMe
+
+		# Strictly speaking, the additional step through INIT_SESSION is
+		# not necessary. TODO: As soon as PerspectiveWrapper and
+		# SessionWrapper are folded into one class, the INIT_SESSION
+		# step can be removed.
+
         cookie = request.getCookie(self.cookieKey)
-        setupURL = request.setupSessionURL = urlToChild(INIT_SESSION, *([path]+request.postpath))
+        setupURL = request.setupSessionURL = urlToChild(self.cookieKey+"_"+INIT_SESSION, *request.postpath)
         request.setupSession = lambda: Redirect(setupURL)
-        if self.sessions.has_key(path):
-            self.sessions[path].setLifetime(1800)
-            if cookie == path:
-                # /sessionized-url/aef9c34aecc3d9148/foo
-                #                  ^
-                #                  we are this getChild
-                # with a matching cookie
-                rd = Redirect(urlToChild(*request.postpath))
-                rd.isLeaf = 1
-                return rd
-            else:
-                # We attempted to negotiate the session but failed (the user
-                # probably has cookies disabled): now we're going to return the
-                # resource we contain.  In general the getChild shouldn't stop
-                # there.
-                # /sessionized-url/aef9c34aecc3d9148/foo
-                #                 ^ we are this getChild
-                # without a cookie (or with a mismatched cookie)
-                _setSession(self, request, path)
+
+        if path == self.cookieKey:
+            # /sessionized-url/KEY/foo
+            #                  ^ this getChild
+            # standard case if the client does cookies
+            if self.sessions.has_key(cookie):
+                self.sessions[cookie].setLifetime(self.lifetime)
+                _setSession(self, request, cookie)
                 return self.resource
-        elif self.sessions.has_key(cookie):
-            # /sessionized-url/foo
-            #                 ^ we are this getChild
-            # with a session
-            _setSession(self, request, cookie)
-            return self.resource.getChildWithDefault(path, request)
-        elif path == INIT_SESSION:
+            else:
+                request.getSession = lambda interface=None: None
+                if cookie is not None and self.on_timeout:
+                    # The session cookie has expired.
+                    return self.on_timeout(path,request)
+                else:
+                    # The client probably used a cached link.
+                    return self.resource
+
+        elif path == self.cookieKey+"_"+INIT_SESSION:
             # initialize the session
-            # /sessionized-url/session-init
+            # /sessionized-url/KEY_session-init/foo
             #                  ^ this getChild
-            # without a session
+            # I setup a cookie and redirect the client
+            # to the cookie test, below.
             newCookie = _sessionCookie()
             request.addCookie(self.cookieKey, newCookie, path="/")
-            rd = Redirect(urlToChild(newCookie,*request.postpath))
-            rd.isLeaf = 1
             sz = self.sessions[newCookie] = GuardSession(self, newCookie)
             sz.checkExpired()
-            return rd
+            return Redirect(urlToChild(self.cookieKey+"__"+newCookie,
+                                       *request.postpath))
+
+        elif path is not None and path.startswith(self.cookieKey+"__"):
+            # /sessionized-url/KEY__cookie/foo
+            #                  ^ this getChild
+            # Check whether the cookie was returned
+            path_cookie = path[len(self.cookieKey)+2:]
+            if cookie == path_cookie: # yes: use session-less path
+                return Redirect(urlToChild(self.cookieKey,*request.postpath))
+            else: # no: use session-ized path
+                return Redirect(urlToChild(self.cookieKey+"_"+path_cookie,*request.postpath))
+
+        elif path is not None and path.startswith(self.cookieKey+"_"):
+            # /sessionized-url/KEY_cookie/foo
+            #                  ^ this getChild
+            # standard case if the client doesn't do cookies
+            cookie = path[len(self.cookieKey)+1:]
+            if self.sessions.has_key(cookie):
+                self.sessions[cookie].setLifetime(self.lifetime)
+                _setSession(self, request, cookie)
+                return self.resource.getChildWithDefault(path, request)
+            else:
+                # I need to setup a session.
+                request.getSession = lambda interface=None: None
+                return self.resource
+
         else:
             # /sessionized-url/foo
-            #                 ^ we are this getChild
-            # without a session
-            request.getSession = lambda interface=None: None
-            return self.resource.getChildWithDefault(path, request)
+            #                  ^ this getChild
+            # either there is no session data yet, or the client
+            # re-entered via an external link
+
+            # This is the only case where the path is not a session
+            # element, so change the setupURL to include it.
+            if path is None:
+                ppath=[]
+            else:
+                ppath=[path]
+            setupURL = request.setupSessionURL = urlToChild(self.cookieKey+"_"+INIT_SESSION, *(ppath+request.postpath))
+            request.setupSession = lambda: Redirect(setupURL)
+
+            if self.sessions.has_key(cookie):
+                # I need to (re-)insert the session marker into the path
+                self.sessions[cookie].setLifetime(self.lifetime)
+                return Redirect(urlToChild(self.cookieKey,*(ppath+request.postpath)))
+            else:
+                # I need to setup a session. No way to figure out
+                # whether this is a re-enter, unfortunately.
+                request.getSession = lambda interface=None: None
+                if path is None:
+                    return self.resource
+                else:
+                    return self.resource.getChildWithDefault(path, request)
+
+    def render(self,request):
+        """A session-ized path is called directly."""
+        # For now, just munge /foo into /foo/.
+        return self.getChild(None,request).render(request)
 
 INIT_PERSPECTIVE = 'perspective-init'
 DESTROY_PERSPECTIVE = 'perspective-destroy'
@@ -284,6 +341,18 @@
             if sc:
                 return sc.getChildWithDefault(path, request)
             return self.noAuthResource.getChildWithDefault(path, request)
+
+    def render(self,request):
+        """A perspective is called directly."""
+        s = request.getSession()
+        if s is None:
+            return request.setupSession().render(request)
+
+        sc = s.clientForService(self.service)
+        if sc:
+            return sc.render(request)
+        return self.noAuthResource.render(request)
+
 
 
 from twisted.web.woven import interfaces, utils
--- a/ChangeLog	Tue May 13 10:42:34 2003
+++ b/ChangeLog	Tue May 13 10:42:34 2003
@@ -1,4 +1,11 @@
-2003-5-12  Moshe Zadka <moshez at twistedmatrix.com>
+2003-05-13  Matthias Urlichs <smurf at smurf.noris.de>
+
+	* twisted/web/woven/guard.py, twisted/test/test_woven.py: Rewrote
+	  SessionWrapper to have constant-length paths. Made its logic more
+	  transparent.
+	* doc/examples/woven_guard.py: Added example code to use it.
+
+2003-05-12  Moshe Zadka <moshez at twistedmatrix.com>
 
 	* twisted/lore/default.py twisted/lore/latex.py
 	  twisted/lore/lint.py twisted/lore/math.py twisted/lore/tree.py
--- /dev/null	Wed Dec 31 16:00:00 1969
+++ b/doc/examples/woven_guard.py	Tue May 13 10:42:34 2003
@@ -0,0 +1,70 @@
+import sys
+import os
+from twisted.internet import app
+from twisted.web import static, server
+from twisted.protocols import http, policies
+from twisted.cred import authorizer
+from twisted.web.woven import guard
+
+class termFile(static.File):
+    def getChild(self,name,*args,**kwargs):
+        return self
+
+# authHelper and authFactory could easily be written as inline or lambda
+# functions. Don't do that, though -- otherwise twisted.persisted will
+# crash when it tries to save your PerspectiveWrapper.
+class authHelper:
+    def __init__(self,page):
+        self.page = page
+    def __call__(self,p,q=None):
+        if q is None:
+            q=self.page
+        return q
+def authFactory(page): return page
+
+# This resource shows yes_page if you're logged in, and no_page if you aren't.
+def setup_auth(yes_page, no_page):
+    from twisted.internet.app import MultiService
+    from twisted.cred.authorizer import DefaultAuthorizer
+    from twisted.cred.service import Service
+
+    ms = MultiService("security_test")
+    auth = DefaultAuthorizer(ms)
+    svc = Service("security_test_service", ms, auth)
+    myp = svc.createPerspective("test_one")
+    myp.makeIdentity("test_two")
+
+    pwrap = guard.PerspectiveWrapper(svc, no_page, authHelper(yes_page),
+        callback=authFactory)
+    swrap = guard.SessionWrapper(pwrap, cookieKey="GuardTest")
+    return swrap
+
+def main():
+    root = static.Data("""\
+        <html><body>
+            Test.<br />The authorizer is <a href="auth-test">here.</a>
+        </body></html>
+        """,'text/html')
+
+    yes = static.Data("""\
+        <html><head>Success!</head>
+        <body>Login successful!</body></html>
+        """,'text/html')
+    no = static.Data("""\
+        <html><head>Not logged in</head>
+        <body><p>Log in <a href="perspective-init">here</a></p>
+        <code>test_one test_two</code></body></html>
+        """,'text/html')
+    root.putChild("auth-test",setup_auth(yes,no))
+
+    site = server.Site(root)
+    site = policies.TimeoutFactory(site,300)
+    
+    basename = os.path.splitext(os.path.basename(sys.argv[0]))[0]
+    me = app.Application(basename)
+    me.listenTCP(50080, site)
+    me.bindPorts()
+    me.run()
+    
+if __name__ == '__main__':
+    main()
--- a/twisted/test/test_woven.py	Tue May 13 10:42:34 2003
+++ b/twisted/test/test_woven.py	Tue May 13 10:42:34 2003
@@ -474,7 +474,7 @@
         sessWrapped = static.Data("you should never see this", "text/plain")
         swChild = static.Data("NO", "text/plain")
         sessWrapped.putChild("yyy",swChild)
-        swrap = guard.SessionWrapper(sessWrapped)
+        swrap = guard.SessionWrapper(sessWrapped,cookieKey="TesT")
         da = static.Data("b","text/plain")
         da.putChild("xxx", swrap)
         st = FakeSite(da)
@@ -491,23 +491,56 @@
 
         # now we're going to make sure that the redirect and cookie are properly set
         req = FakeHTTPRequest(chan, queued=0)
-        req.requestReceived("GET", "/xxx/"+guard.INIT_SESSION, "1.0")
+        req.requestReceived("GET", "/xxx/TesT_"+guard.INIT_SESSION, "1.0")
         ccv = req._cookieCache.values()
         self.assertEquals(len(ccv),1)
         cookie = ccv[0]
         # redirect set?
         self.failUnless(req.headers.has_key('location'))
         # redirect matches cookie?
-        self.assertEquals(req.headers['location'].split('/')[-1], cookie)
+        self.assertEquals(req.headers['location'].split('/')[-1], "TesT__"+cookie)
         # URL is correct?
         self.assertEquals(req.headers['location'],
-                          'http://fake.com/xxx/'+cookie)
+                          'http://fake.com/xxx/TesT__'+cookie)
         oldreq = req
+
+        # now we're going to make sure that the redirect and cookie are properly set
+        req = FakeHTTPRequest(chan, queued=0)
+        req.received_cookies["TesT"] = cookie
+        req.requestReceived("GET", "/xxx/TesT__"+cookie, "1.0")
+        ccv = req._cookieCache.values()
+        self.assertEquals(len(ccv),0) # no cookie sent back here
+        # redirect set?
+        self.failUnless(req.headers.has_key('location'))
+        # redirect matches cookie?
+        self.assertEquals(req.headers['location'].split('/')[-1], 'TesT')
+        # URL is correct?
+        self.assertEquals(req.headers['location'],
+                          'http://fake.com/xxx/TesT')
         
-        # now let's try with a request for the session-cookie URL that has a cookie set
-        url = "/"+(oldreq.headers['location'].split('http://fake.com/',1))[1]
-        req = chan.makeFakeRequest(url)
-        self.assertEquals(req.headers['location'], 'http://fake.com/xxx/')
+        # If there's a cookie but the session element is missing, it
+		# gets added in.
+        req = FakeHTTPRequest(chan, queued=0)
+        req.received_cookies["TesT"] = cookie
+        req.requestReceived("GET", "/xxx/yyy", "1.0")
+        self.assertEquals(req.headers['location'], 'http://fake.com/xxx/TesT/yyy')
+
+        # now do the same with a client that doesn't accept cookies:
+        # we get a cookie-ized path back
+        req = FakeHTTPRequest(chan, queued=0)
+        req.requestReceived("GET", "/xxx/TesT__"+cookie, "1.0")
+        ccv = req._cookieCache.values()
+        self.assertEquals(len(ccv),0) # no cookie here, either
+        # redirect set?
+        self.failUnless(req.headers.has_key('location'))
+        # redirect matches cookie?
+        self.assertEquals(req.headers['location'].split('/')[-1], 'TesT_'+cookie)
+        # URL is correct?
+        self.assertEquals(req.headers['location'],
+                          'http://fake.com/xxx/TesT_'+cookie)
+        
+
+		# clean up
         for sz in swrap.sessions.values():
             sz.expire()
 
@@ -531,23 +564,23 @@
         q.putChild("yyy", static.Data("YES", "text/plain"))
         authFactory = lambda p, q=q: q
         pwrap = guard.PerspectiveWrapper(svc, sessWrapped, authFactory)
-        swrap = guard.SessionWrapper(pwrap)
+        swrap = guard.SessionWrapper(pwrap, cookieKey="TesT") # as above
         da.putChild("xxx", swrap)
         st = FakeSite(da)
         chan = FakeHTTPChannel()
         chan.site = st
 
-        req = chan.makeFakeRequest("/xxx/"+guard.INIT_SESSION+"/yyy")
-        req = chan.makeFakeRequest("/xxx/yyy")
+        req = chan.makeFakeRequest("/xxx/TesT_"+guard.INIT_SESSION+"/yyy")
+        req = chan.makeFakeRequest("/xxx/TesT/yyy")
         self.assertEquals(req.written.getvalue(),"NO")
-        req = chan.makeFakeRequest("/xxx/"+guard.INIT_PERSPECTIVE+
+        req = chan.makeFakeRequest("/xxx/TesT/"+guard.INIT_PERSPECTIVE+
                                    "?identity=test&password=tenxt")
         assert not req.session.services.values()
-        req = chan.makeFakeRequest("/xxx/"+guard.INIT_PERSPECTIVE+
+        req = chan.makeFakeRequest("/xxx/TesT/"+guard.INIT_PERSPECTIVE+
                                    "?identity=test&password=test")
         self.assertEquals(req.session.services.values()[0][0], myp)
         # print req.written.getvalue()
-        req = chan.makeFakeRequest("/xxx/yyy")
+        req = chan.makeFakeRequest("/xxx/TesT/yyy")
         self.assertEquals(req.written.getvalue(), "YES")
         # print req.session.services
         for sz in swrap.sessions.values():

-- 
Matthias Urlichs  | {M:U} IT Consulting @ m-u-it.de  |  smurf at smurf.noris.de
Disclaimer: The quote was selected randomly. Really. | http://smurf.noris.de
-- 
When voting on appropriations bills, more is not necessarily better. It is
as wasteful to have a B-1 bomber in every garage as it is to have a welfare
program for every conceivable form of deprivation.
					-- Pierre S. du Pont




From m at moshez.org  Tue May 13 06:47:48 2003
From: m at moshez.org (Moshe Zadka)
Date: 13 May 2003 10:47:48 -0000
Subject: [Twisted-Python] Allow static.Data to be at the root
In-Reply-To: <pan.2003.05.13.08.25.34.929793@smurf.noris.de>
References: <pan.2003.05.13.08.25.34.929793@smurf.noris.de>
Message-ID: <20030513104748.14913.qmail@green.zadka.com>

On Tue, 13 May 2003, "Matthias Urlichs" <smurf at smurf.noris.de> wrote:

> Here's a small patch to allow a twisted.web.static.Data element at the
> root of your web space.

This detracts functionality, not enhances it.
If you really want it, it's better to have a 

root = resource.Resource()
root.putChild('', static.Data('text/plain', 'hello world'))
 
-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From m at moshez.org  Tue May 13 13:45:01 2003
From: m at moshez.org (Moshe Zadka)
Date: 13 May 2003 17:45:01 -0000
Subject: [Twisted-Python] Qt Test Failure
Message-ID: <20030513174501.26762.qmail@green.zadka.com>

Reference: http://twistedmatrix.com/~warner.twistd/

The Qt reactor constantly fails just one test:
twisted.test.test_factories.ReconnectingFactoryTestCase.testStopTrying

It's annoying, because if that's solved then we can honestly
say that it works. I have a nagging feeling the problem is with
race conditions in the test, rather than actual problems with the
reactors. I have tried fiddling with the test, but not having an
actual setup of Qt with which I can add prints or debug made this
an exercise in futility.

If anyone feels like investigating the reasons for the failure, and
either fixing it or coming up with a patch, would be welcomed.

Thanks,
Moshe

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From itamar at itamarst.org  Tue May 13 14:02:23 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 13 May 2003 14:02:23 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] tests for active
In-Reply-To: <E19FdsJ-0001Db-00@pyramid.twistedmatrix.com>
References: <E19FdsJ-0001Db-00@pyramid.twistedmatrix.com>
Message-ID: <20030513140223.437bedd4.itamar@itamarst.org>

> +    def testActive(self):
> +        dcall = reactor.callLater(0, lambda: None)
> +        self.assertEquals(dcall.active(), True)
> +        reactor.iterate()
> +        self.assertEquals(dcall.active(), False)
> +

Can you please not use True/False/bool in tests? Yes, I know you can
import from compat, but half the time people'll forget to do that and
we'll have to go and fix the tests. Not everyone runs 2.2.2.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From bob at redivi.com  Tue May 13 16:12:47 2003
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 13 May 2003 16:12:47 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] tests for active
In-Reply-To: <20030513140223.437bedd4.itamar@itamarst.org>
Message-ID: <43CF1A9A-857F-11D7-8B50-000A95686CD8@redivi.com>

On Tuesday, May 13, 2003, at 14:02 America/New_York, Itamar 
Shtull-Trauring wrote:

>> +    def testActive(self):
>> +        dcall = reactor.callLater(0, lambda: None)
>> +        self.assertEquals(dcall.active(), True)
>> +        reactor.iterate()
>> +        self.assertEquals(dcall.active(), False)
>> +
>
> Can you please not use True/False/bool in tests? Yes, I know you can
> import from compat, but half the time people'll forget to do that and
> we'll have to go and fix the tests. Not everyone runs 2.2.2.

I'd almost consider having twisted/__init__.py just set those into 
builtins, even though that's extremely evil.. It's SUCH a common 
mistake these days.

-bob




From iko at cd.chalmers.se  Tue May 13 18:18:49 2003
From: iko at cd.chalmers.se (Anders Hammarquist)
Date: Wed, 14 May 2003 00:18:49 +0200
Subject: [Twisted-Python] Updated SMTP patch 
In-Reply-To: Message from Jp Calderone <exarkun@intarweb.us> 
   of "Mon, 12 May 2003 14:39:41 EDT." <20030512183941.GA10373@meson.dyndns.org> 
References: <200305121428.h4CESoM4024595@fido.strakt.com> <20030512183941.GA10373@meson.dyndns.org> 
Message-ID: <200305132218.h4DMIoR18194@haddock.cd.chalmers.se>

In a message of Mon, 12 May 2003 14:39:41 EDT, Jp Calderone writes:
>> About the recent change to validateTo using a defered rather than
>> "straight" callbacks, I missed the discussion (if any), but I *strongly*
>> feel that validateTo and validateFrom should use the same method,
>> and that "failed" addresses should be communicated with failures
>> rather than "magic". So I changed it.
>
>  I don't see the behavior as magic.  It seems very analogous to str.find()
>returning -1 when nothing is found.  The main reason I chose to avoid
>failures here was to avoid the costs associated with them.  None instead of
>a username as a callback seems to indicate an invalid address as clearly as
>a failure object would.

Not magic as in not understandable, thus the quotes. It's obivous how
it works, it just doesn't feel as clean as using a failure, especially
when passing a non-standard response (the possiblity of which was
completely lost in your initial implementation). While using a failure
certainly is more expensive, the expected result is for the address to
be acceptable, so it shouldn't happen too often. So I still feel that
using failures is a cleaner approach, and if it proves too costly,
perhaps the first thing to do should be to see if the failures can be
made lighter, possibly optionally lighter for "expected" failures.

/Anders

-- 
 -- Of course I'm crazy, but that doesn't mean I'm wrong.
Anders Hammarquist                                  | iko at cd.chalmers.se
Physics student, Chalmers University of Technology, | Hem: +46 31 88 48 50
G|teborg, Sweden.           RADIO: SM6XMM and N2JGL | Mob: +46 707 27 86 87



From andrew-twisted at puzzling.org  Tue May 13 18:30:52 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 14 May 2003 08:30:52 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] tests for active
In-Reply-To: <43CF1A9A-857F-11D7-8B50-000A95686CD8@redivi.com>
References: <20030513140223.437bedd4.itamar@itamarst.org> <43CF1A9A-857F-11D7-8B50-000A95686CD8@redivi.com>
Message-ID: <20030513223052.GA5675@frobozz.local>

On Tue, May 13, 2003 at 04:12:47PM -0400, Bob Ippolito wrote:
> On Tuesday, May 13, 2003, at 14:02 America/New_York, Itamar 
> Shtull-Trauring wrote:
> >
> >Can you please not use True/False/bool in tests? Yes, I know you can
> >import from compat, but half the time people'll forget to do that and
> >we'll have to go and fix the tests. Not everyone runs 2.2.2.
> 
> I'd almost consider having twisted/__init__.py just set those into 
> builtins, even though that's extremely evil.. It's SUCH a common 
> mistake these days.

Even better would be having an OS X build slave -- I think it has 2.2.0?

-Andrew.




From cce at clarkevans.com  Tue May 13 19:21:17 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Tue, 13 May 2003 23:21:17 +0000
Subject: [Twisted-Python] Re: [Twisted-commits] trying to get twisted to run in 2.2.0 (bye bye True/False)
In-Reply-To: <E19Fhtb-0004yb-00@pyramid.twistedmatrix.com>
References: <E19Fhtb-0004yb-00@pyramid.twistedmatrix.com>
Message-ID: <20030513232117.GA16265@doublegemini.com>

Itamar,

    from twisted.python.compat import True, False

Clark

On Tue, May 13, 2003 at 05:05:15PM -0500, itamarst CVS wrote:
| -            msg(message, printed=True, isError=self.isError)
| +            msg(message, printed=1, isError=self.isError)



From twisted at eholm.com  Tue May 13 21:08:44 2003
From: twisted at eholm.com (Eric Holm)
Date: Tue, 13 May 2003 18:08:44 -0700
Subject: [Twisted-Python] Woven trailing slashes
Message-ID: <uhe7ytjvn.fsf@eholm.com>

I just installed 1.0.5, and now my Woven pages are sent
to the browser with a trailing slash appended to the URL, 
which breaks all of the relative links.

How do I get rid of the trailing slash?

Thanks,


Eric.




From dp at twistedmatrix.com  Tue May 13 21:25:37 2003
From: dp at twistedmatrix.com (Donovan Preston)
Date: Tue, 13 May 2003 18:25:37 -0700
Subject: [Twisted-Python] Woven trailing slashes
In-Reply-To: <uhe7ytjvn.fsf@eholm.com>
Message-ID: <F773015C-85AA-11D7-8CF6-000393B3EC2C@twistedmatrix.com>

On Tuesday, May 13, 2003, at 06:08 PM, Eric Holm wrote:

> I just installed 1.0.5, and now my Woven pages are sent
> to the browser with a trailing slash appended to the URL,
> which breaks all of the relative links.
>
> How do I get rid of the trailing slash?

If you are subclassing Page, you can add a class attribute addSlash = 
0, like this:

class Foo(page.Page):
	addSlash = 0


If you are still subclassing Controller, you can put the addSlash = 0 
there. Consider subclassing Page instead, as having a Model, View, 
Controller triad as the base of a Page will be deprecated in the near 
future.

If you're just using the generic Page instance, you can set it after 
creation like this:

resource = page.Page("foo")
resource.addSlash = 0

The default behavior of Woven is now to automatically add a slash 
because it makes creating relative links far easier, ironically ;-)

Donovan




From andrew-twisted at puzzling.org  Tue May 13 21:41:01 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 14 May 2003 11:41:01 +1000
Subject: [Twisted-Python] Woven trailing slashes
In-Reply-To: <F773015C-85AA-11D7-8CF6-000393B3EC2C@twistedmatrix.com>
References: <uhe7ytjvn.fsf@eholm.com> <F773015C-85AA-11D7-8CF6-000393B3EC2C@twistedmatrix.com>
Message-ID: <20030514014101.GA5953@frobozz.local>

On Tue, May 13, 2003 at 06:25:37PM -0700, Donovan Preston wrote:
> 
> On Tuesday, May 13, 2003, at 06:08 PM, Eric Holm wrote:
> 
> >I just installed 1.0.5, and now my Woven pages are sent
> >to the browser with a trailing slash appended to the URL,
> >which breaks all of the relative links.
> >
> >How do I get rid of the trailing slash?
> 
> If you are subclassing Page, you can add a class attribute addSlash = 
> 0, like this:

[...etc...]

Please add this to the FAQ!

-Andrew.




From screwtape at froup.com  Tue May 13 21:56:23 2003
From: screwtape at froup.com (screwtape at froup.com)
Date: Wed, 14 May 2003 11:56:23 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] tests for active
In-Reply-To: <20030513223052.GA5675@frobozz.local>
References: <20030513140223.437bedd4.itamar@itamarst.org> <43CF1A9A-857F-11D7-8B50-000A95686CD8@redivi.com> <20030513223052.GA5675@frobozz.local>
Message-ID: <20030514015623.GB26659@ferd2.thristian.org>

On Wed, May 14, 2003 at 08:30:52AM +1000, Andrew Bennetts wrote:
> On Tue, May 13, 2003 at 04:12:47PM -0400, Bob Ippolito wrote:
> > On Tuesday, May 13, 2003, at 14:02 America/New_York, Itamar 
> > Shtull-Trauring wrote:
> > >
> > >Can you please not use True/False/bool in tests? Yes, I know you can
> > >import from compat, but half the time people'll forget to do that and
> > >we'll have to go and fix the tests. Not everyone runs 2.2.2.
> > 
> > I'd almost consider having twisted/__init__.py just set those into 
> > builtins, even though that's extremely evil.. It's SUCH a common 
> > mistake these days.
> 
> Even better would be having an OS X build slave -- I think it has 2.2.0?

[st at grundoon]: ~% /usr/bin/python -V       
Python 2.2

Sure looks like it.

-- 
 ___________ ____________________________
| Screwtape | Reply-To: munged on Usenet |________ ______ ____ __ _  _   _
|
| "Spoons may be an evolutionary dead end." -- Chiggy
|



From twisted at eholm.com  Tue May 13 22:06:45 2003
From: twisted at eholm.com (Eric Holm)
Date: Tue, 13 May 2003 19:06:45 -0700
Subject: [Twisted-Python] Woven trailing slashes
In-Reply-To: <F773015C-85AA-11D7-8CF6-000393B3EC2C@twistedmatrix.com>
References: <F773015C-85AA-11D7-8CF6-000393B3EC2C@twistedmatrix.com>
Message-ID: <uaddqcmdm.fsf@eholm.com>

> resource = page.Page("foo")
> resource.addSlash = 0
> 
That did the trick, thanks!


> The default behavior of Woven is now to automatically add a slash
> because it makes creating relative links far easier, ironically ;-)
> 
So I'm doing things the hard way?  Hmmmm...


Speaking of links, when I use the Link widget, I get the following 
(seemingly harmless, but distracting nonetheless) warning:

...\twisted\web\woven\model.py:428: UserWarning: getSubmodel must get a request argument now
  warnings.warn("getSubmodel must get a request argument now")

for whatever that's worth.

Thanks,


Eric.




From digi at treepy.com  Tue May 13 23:41:26 2003
From: digi at treepy.com (p@)
Date: Wed, 14 May 2003 05:41:26 +0200
Subject: AW: AW: [Twisted-Python] newbie udp
In-Reply-To: <20030512120945.4ecd733d.itamar@itamarst.org>
Message-ID: <013901c319ca$b3d7ac10$ec47da50@pat>

>> I swtiched back to version 1.0 ... there it seams to work perfectly
>> Cheers
>
>UDP in v1.0 had a different API and was very broken... I fixed your bug
>in CVS, I think - give it a try.

Thanks a lot.. works like a charm now..

I think I found a bug... in udp.py 
Line 213
I think it should be:
self.protocol.datagramReceived(data,addr)





From digi at treepy.com  Wed May 14 00:57:40 2003
From: digi at treepy.com (p@)
Date: Wed, 14 May 2003 06:57:40 +0200
Subject: [Twisted-Python] closing udp client?
Message-ID: <014701c319d5$59ef76a0$ec47da50@pat>

I have the following protocol for a udp client:
 
class UdpClientProtocol (ConnectedDatagramProtocol):
    def __init__(self,request=None):
        self.request = request
    def startProtocol(self):
        self.transport.write(self.request)
    def datagramReceived(self,answer,address):
        print 'datagram recieved:'
        print data
        print 'from:',address
 
I want to send a udp packet and then wait for the answer. but what if
there is no answer? So I need a timeout client...
 
I tried it with:
 
class UdpClientProtocol (ConnectedDatagramProtocol):
    def __init__(self,request=None):
        self.request = request
        reactor.callLater(5, self.timeout())
    def startProtocol(self):
        self.transport.write(self.request)
    def datagramReceived(self,answer,address):
        print 'datagram recieved:'
        print data
        print 'from:',address
    def timeout(self):
        print 'timeout'
 
this works. but if I try to close this protocol after 5 seconds with
self.transport.loseConnection() I get an exception..
So my actuall question is: how to close this port/protocol/factory
again?
 
Cheers
 
p@
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20030514/d727c3aa/attachment.htm 

From fog at initd.org  Wed May 14 04:01:40 2003
From: fog at initd.org (Federico Di Gregorio)
Date: 14 May 2003 10:01:40 +0200
Subject: [Twisted-Python] a little OT: python workshop became a twisted workshop
Message-ID: <1052899299.953.7.camel@momo.initd.org>

Hi *,

i just wanted to share with you something happened last saturnday,
during the webb.it (http://www.webb.it/) meeting. among other workshops
i did there were two titled "Python Basics" and "Advanced Python:
network protocols".

The second one ended up being a *twisted workshop*: after using a very
simple Protocol example to show twisted (my plan was to show various
network-oriented python modules: twisted, httplib, ftplib, etc.) people
started asking questions and i not ever mentioned the other modules (and
showed a pb example instead).

so, kudos to all you twisted developers. maybe next year we'll organize
a twisted booth, a series of workshops and a sprint as we did with
zope/plone this year.

ciao,
federico

-- 
Federico Di Gregorio
Debian GNU/Linux Developer                                fog at debian.org
INIT.D Developer                                           fog at initd.org
             A short story: I want you. I love you. I'll miss you. -- Me
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: Questa parte del messaggio =?ISO-8859-1?Q?=E8?= firmata
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030514/0d20c291/attachment.pgp 

From miathan at goliath.darktech.org  Wed May 14 08:29:03 2003
From: miathan at goliath.darktech.org (W.J.)
Date: Wed, 14 May 2003 14:29:03 +0200 (CEST)
Subject: [Twisted-Python] Re: closing udp client? (p@)
In-Reply-To: <20030514045901.8790.34071.Mailman@pyramid.twistedmatrix.com>
Message-ID: <Pine.LNX.4.44.0305141421530.28885-100000@zolder>

> I want to send a udp packet and then wait for the answer. but what if
> there is no answer? So I need a timeout client...
>
> I tried it with:
>
<snip>
>
> this works. but if I try to close this protocol after 5 seconds with
> self.transport.loseConnection() I get an exception..
> So my actuall question is: how to close this port/protocol/factory
> again?

The timeout is still armed when you lose the connection.

On connection, you do

self.egg = reactor.callLater(5, self.timeout())

When you deconstruct the thing again you do:

self.egg.cancel()

I don't know if this has anything to do with it, but be more
elaborate on which exception you get?

Wladimir




From korpios at korpios.com  Wed May 14 10:14:37 2003
From: korpios at korpios.com (Tom 'Korpios' Tobin)
Date: Wed, 14 May 2003 10:14:37 -0400
Subject: [Twisted-Python] Patch Ideas
Message-ID: <20030514141437.GA51744@hecate.korpios.net>

I'm fairly new to Twisted, and I had a couple of patch ideas I wanted to run by before submitting:


1) Making twisted.web.distrib play nicely with twisted.web.vhost

As things currently stand, these two refuse to cooperate by default; for example, defining a vhost that points to a ResourceSubscription will fail.  Fixing it only takes two small changes to twisted.web.distrib (one each to ResourceSubscription and ResourcePublisher), and doesn't appear to break anything.


2) Adding getSessionPassive to twisted.web.server.Request

The default behavior of getSession is to check for an existing session, and drop a session cookie on the client if none exists.  There are many potential cases where this is not desirable; for example, one may have administration options blended into the normal web interface which appear if one is logged in, yet one does not want to drop a session cookie on every client who comes by.  getSessionPassive checks for an existing session or a session cookie; however, if no session or session cookie exists, it does not drop one, opting to return the session's default state as None instead.


Would there be any reason not to add these functionalities?  If not, I'll submit patches here.  :)


Tom "Korpios" Tobin
korpios at korpios.com




From dp at twistedmatrix.com  Wed May 14 11:29:59 2003
From: dp at twistedmatrix.com (Donovan Preston)
Date: Wed, 14 May 2003 08:29:59 -0700
Subject: [Twisted-Python] Woven trailing slashes
In-Reply-To: <uaddqcmdm.fsf@eholm.com>
Message-ID: <EC605C42-8620-11D7-AFF7-000393B3EC2C@twistedmatrix.com>

On Tuesday, May 13, 2003, at 07:06 PM, Eric Holm wrote:

>> resource = page.Page("foo")
>> resource.addSlash = 0
>>
> That did the trick, thanks!

Great! :)

>
>
>> The default behavior of Woven is now to automatically add a slash
>> because it makes creating relative links far easier, ironically ;-)
>>
> So I'm doing things the hard way?  Hmmmm...

Theoretically... URI design is complicated business.

>
>
> Speaking of links, when I use the Link widget, I get the following
> (seemingly harmless, but distracting nonetheless) warning:
>
> ...\twisted\web\woven\model.py:428: UserWarning: getSubmodel must get 
> a request argument now
>   warnings.warn("getSubmodel must get a request argument now")
>
> for whatever that's worth.

Thanks for the report. Link is relying on deprecated behavior, I'll fix 
it.

Donovan




From mario at ruggier.org  Wed May 14 12:25:16 2003
From: mario at ruggier.org (Mario Ruggier)
Date: Wed, 14 May 2003 18:25:16 +0200
Subject: [Twisted-Python] restricting access to cgi scripts
Message-ID: <A5CA356C-8628-11D7-8251-000393756786@ruggier.org>

Hi,

what would be the better way to restrict access to 3rd party
cgi scripts?

Would subclassing twcgi.CGIScript to add HTTP authentication
(to render()?) and then use this as porcessor for '.cgi'  (or other
invented extension for protected cgis) be a good way to go?

thanks, mario




From glyph at twistedmatrix.com  Wed May 14 13:20:23 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 14 May 2003 12:20:23 -0500
Subject: [Twisted-Python] a little OT: python workshop became a twisted workshop
In-Reply-To: <1052899299.953.7.camel@momo.initd.org>
Message-ID: <58A990B0-8630-11D7-853B-000393C9700E@twistedmatrix.com>

On Wednesday, May 14, 2003, at 03:01 AM, Federico Di Gregorio wrote:

> "Advanced Python: network protocols" [...] ended up being a *twisted 
> workshop*

Wow!  Thanks for letting us know.  It's always nice to hear things like 
this :-).




From Paul.Morrow at loyaltyworks.com  Wed May 14 13:35:56 2003
From: Paul.Morrow at loyaltyworks.com (Morrow, Paul)
Date: Wed, 14 May 2003 13:35:56 -0400
Subject: [Twisted-Python] Binding echo server to a particular ip address
Message-ID: <FF816FA079A11949BE655A693DC02D104D96E2@exchange2.loyaltyworks.com>

The following is your simpleserv.py echo server example.  On a multihost
(multiple ip addresses) server, how would I have it listen on a
particular ip address?
 
Thanks.
 
 
 
from twisted.internet import reactor, protocol


class Echo(protocol.Protocol):
    """This is just about the simplest possible protocol"""
    
    def dataReceived(self, data):
        "As soon as any data is received, write it back."
        self.transport.write(data)


def main():
    """This runs the protocol on port 8000"""
    factory = protocol.ServerFactory()
    factory.protocol = Echo
    reactor.listenTCP(8000,factory)
    reactor.run()

# this only runs if the module was *not* imported
if __name__ == '__main__':
    main()
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20030514/4a59044b/attachment.htm 

From miathan at goliath.darktech.org  Wed May 14 13:48:13 2003
From: miathan at goliath.darktech.org (W.J.)
Date: Wed, 14 May 2003 19:48:13 +0200 (CEST)
Subject: [Twisted-Python] Re: Binding echo server to a particular ip address
Message-ID: <Pine.LNX.4.44.0305141945410.1843-100000@zolder>

> The following is your simpleserv.py echo server example.  On a multihost
> (multiple ip addresses) server, how would I have it listen on a
> particular ip address?

> def main():
>     """This runs the protocol on port 8000"""
>     factory =3D protocol.ServerFactory()
>     factory.protocol =3D Echo

>     reactor.listenTCP(8000,factory)

reactor.listenTCP(8000, factory, interface="127.0.0.1")

Where 127.0.0.1 is the interface you want to bind to.
Almost too easy uh?

>     reactor.run()

Wladimir





From Paul.Morrow at loyaltyworks.com  Wed May 14 14:03:36 2003
From: Paul.Morrow at loyaltyworks.com (Morrow, Paul)
Date: Wed, 14 May 2003 14:03:36 -0400
Subject: [Twisted-Python] Re: Binding echo server to a particular ip address
Message-ID: <FF816FA079A11949BE655A693DC02D109DC25B@exchange2.loyaltyworks.com>

Indeed!

-----Original Message-----
From: W.J. [mailto:miathan at goliath.darktech.org] 
Sent: Wednesday, May 14, 2003 1:48 PM
To: twisted-python at twistedmatrix.com
Subject: [Twisted-Python] Re: Binding echo server to a particular ip
address



> The following is your simpleserv.py echo server example.  On a 
> multihost (multiple ip addresses) server, how would I have it listen 
> on a particular ip address?

> def main():
>     """This runs the protocol on port 8000"""
>     factory =3D protocol.ServerFactory()
>     factory.protocol =3D Echo

>     reactor.listenTCP(8000,factory)

reactor.listenTCP(8000, factory, interface="127.0.0.1")

Where 127.0.0.1 is the interface you want to bind to.
Almost too easy uh?

>     reactor.run()

Wladimir



_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From Martin.Moellenbeck at t-online.de  Wed May 14 15:42:55 2003
From: Martin.Moellenbeck at t-online.de (Martin =?ISO-8859-1?Q?M=F6llenbeck?=)
Date: 14 May 2003 21:42:55 +0200
Subject: [Twisted-Python] a little OT: python workshop became a twisted
	workshop
In-Reply-To: <58A990B0-8630-11D7-853B-000393C9700E@twistedmatrix.com>
References: <58A990B0-8630-11D7-853B-000393C9700E@twistedmatrix.com>
Message-ID: <1052941375.2226.5.camel@mond.moellenbeck.local>

Am Mit, 2003-05-14 um 19.20 schrieb Glyph Lefkowitz:
> On Wednesday, May 14, 2003, at 03:01 AM, Federico Di Gregorio wrote:
> 
> > "Advanced Python: network protocols" [...] ended up being a *twisted 
> > workshop*
> 
> Wow!  Thanks for letting us know.  It's always nice to hear things like 
> this :-).

Is there an english version ?

> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From Paul.Morrow at loyaltyworks.com  Wed May 14 17:03:28 2003
From: Paul.Morrow at loyaltyworks.com (Morrow, Paul)
Date: Wed, 14 May 2003 17:03:28 -0400
Subject: [Twisted-Python] Twisted.web and adbapi example?
Message-ID: <FF816FA079A11949BE655A693DC02D104D96E3@exchange2.loyaltyworks.com>

I've been pouring through the docs and examples, but can't find an
example of a .rpy that generates a page containing the results of a
database query.  How would such a thing be properly architected?
Clearly the adbapi would be involved, but then how do I get the query
results into the string returned by my resource?  Or would I use a
deferred instead?

Would someone please share a little code snippet (or point me at
one)illustrating how that would best be accomplished?

Thanks.



From cce at clarkevans.com  Wed May 14 17:39:31 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Wed, 14 May 2003 21:39:31 +0000
Subject: [Twisted-Python] twisted.web.woven.guard.SessionWrapper problems
In-Reply-To: <pan.2003.05.12.07.26.23.732558@smurf.noris.de>
References: <pan.2003.05.12.07.26.23.732558@smurf.noris.de>
Message-ID: <20030514213931.GA19087@doublegemini.com>

On Mon, May 12, 2003 at 09:26:45AM +0200, Matthias Urlichs wrote:
| /sessionized-url/foo
| 	Set cookie
| 	Redirect to /sessionized-url/sp__aef9c34aecc3d9148/foo
| /sessionized-url/sp__aef9c34aecc3d9148/foo
| 	Redirect to either of the next two URLs depending on whether I see a
| 	cookie
| /sessionized-url/sp/foo
| 	URL to use with cookies
| /sessionized-url/sp_aef9c34aecc3d9148/foo
| 	URL to use without cookies

Just to comment.  The pathargs module in the standbox will help with
some of these things.   It uses a colon in the path item to signify
key/value pairs.

   /sessionized-url/session:aef9c34aecc3d9148/foo
  
The pathargs is generic so that *other* parameters can go there,
perhaps a client identifier, etc.

   /sessionized-url/client:29394/report:2939/session:aef9c34aecc3d9148/foo

The advantage of doing it this way, is that the person can copy/paste
the URL and send it to his friend.  Since in the background you
timeout session ids, and link it with a given ip address, you can 
present this person with a login-page, but yet keep the same
client/report identifier.    

Anyway, pathargs is very useful for maintaining state information
when you are using relative links without cookies.

Best,

Clark



From digi at treepy.com  Wed May 14 17:34:16 2003
From: digi at treepy.com (p@)
Date: Wed, 14 May 2003 23:34:16 +0200
Subject: [Twisted-Python] udp exception if connection reset by other peer
In-Reply-To: <Pine.LNX.4.44.0305141421530.28885-100000@zolder>
Message-ID: <01e401c31a60$94e5da20$ec47da50@pat>

If i send a udp packet with a connected udp-protocoll to an other peer
where the port is closed or not reachable and the other peer resets the
connection I get an exception...

How can I suppress this exception?

Cheers 

p@




From itamar at itamarst.org  Wed May 14 17:45:25 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 14 May 2003 17:45:25 -0400
Subject: [Twisted-Python] udp exception if connection reset by other
 peer
In-Reply-To: <01e401c31a60$94e5da20$ec47da50@pat>
References: <Pine.LNX.4.44.0305141421530.28885-100000@zolder>
	<01e401c31a60$94e5da20$ec47da50@pat>
Message-ID: <20030514174525.3d1b08dd.itamar@itamarst.org>

On Wed, 14 May 2003 23:34:16 +0200
"p@" <digi at treepy.com> wrote:

> If i send a udp packet with a connected udp-protocoll to an other peer
> where the port is closed or not reachable and the other peer resets
> the connection I get an exception...

Good point. UDP does occasionally give information about non-reachable
hosts, currently expressed in Twisted by an exception. Should I bother
raising these or just swallow them silently?

Meanwhile, you can just wrap the write() with a try/except: pass.


-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From digi at treepy.com  Wed May 14 18:19:38 2003
From: digi at treepy.com (p@)
Date: Thu, 15 May 2003 00:19:38 +0200
Subject: AW: [Twisted-Python] udp exception if connection reset by other peer
In-Reply-To: <20030514174525.3d1b08dd.itamar@itamarst.org>
Message-ID: <01e501c31a66$e98c53a0$ec47da50@pat>

I think they are only raised if you connect to a localhost or local-lan
peer...
I think there is no need for an exception because you would need to
handle local and internet peers differently...

So I think swallow them silently is ok

Cheers

p@

-----Urspr?ngliche Nachricht-----
Von: twisted-python-admin at twistedmatrix.com
[mailto:twisted-python-admin at twistedmatrix.com] Im Auftrag von Itamar
Shtull-Trauring
Gesendet: Mittwoch, 14. Mai 2003 23:45
An: twisted-python at twistedmatrix.com
Betreff: Re: [Twisted-Python] udp exception if connection reset by other
peer

On Wed, 14 May 2003 23:34:16 +0200
"p@" <digi at treepy.com> wrote:

> If i send a udp packet with a connected udp-protocoll to an other peer
> where the port is closed or not reachable and the other peer resets
> the connection I get an exception...

Good point. UDP does occasionally give information about non-reachable
hosts, currently expressed in Twisted by an exception. Should I bother
raising these or just swallow them silently?

Meanwhile, you can just wrap the write() with a try/except: pass.


-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python





From fog at initd.org  Wed May 14 19:01:13 2003
From: fog at initd.org (Federico Di Gregorio)
Date: 15 May 2003 01:01:13 +0200
Subject: [Twisted-Python] a little OT: python workshop became a twisted
	workshop
In-Reply-To: <1052941375.2226.5.camel@mond.moellenbeck.local>
References: <58A990B0-8630-11D7-853B-000393C9700E@twistedmatrix.com>
	 <1052941375.2226.5.camel@mond.moellenbeck.local>
Message-ID: <1052953272.2193.2.camel@momo.initd.org>

Il mer, 2003-05-14 alle 21:42, Martin M?llenbeck ha scritto:
> Am Mit, 2003-05-14 um 19.20 schrieb Glyph Lefkowitz:
> > On Wednesday, May 14, 2003, at 03:01 AM, Federico Di Gregorio wrote:
> > 
> > > "Advanced Python: network protocols" [...] ended up being a *twisted 
> > > workshop*
> > 
> > Wow!  Thanks for letting us know.  It's always nice to hear things like 
> > this :-).
> 
> Is there an english version ?

an english version of what?

-- 
Federico Di Gregorio
Debian GNU/Linux Developer                                fog at debian.org
INIT.D Developer                                           fog at initd.org
             A short story: I want you. I love you. I'll miss you. -- Me
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: Questa parte del messaggio =?ISO-8859-1?Q?=E8?= firmata
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030515/e650067f/attachment.pgp 

From smurf at smurf.noris.de  Thu May 15 00:44:56 2003
From: smurf at smurf.noris.de (Matthias Urlichs)
Date: Thu, 15 May 2003 06:44:56 +0200
Subject: AW: [Twisted-Python] udp exception if connection reset by other peer
References: <20030514174525.3d1b08dd.itamar@itamarst.org> <01e501c31a66$e98c53a0$ec47da50@pat>
Message-ID: <pan.2003.05.15.04.44.55.991232@smurf.noris.de>

Hi, p@ wrote:

> I think they are only raised if you connect to a localhost or local-lan
> peer...

Nope. Some Unixes (Linux in particular) also raise them on the next
write() if an ICMP-Unreachable has arrived in the meantime.

> So I think swallow them silently is ok
> 
If it's an E.*UNREACH error and you're sending the packet to a different
address than the previous one, you need to retry.

-- 
Matthias Urlichs  |  {M:U} IT Design @ m-u-it.de  |  smurf at smurf.noris.de
Disclaimer: The quote was selected randomly. Really. | http://smurf.noris.de
-- 
Nothing matters very much, and few things matter at all.




From mario at ruggier.org  Thu May 15 03:10:31 2003
From: mario at ruggier.org (Mario Ruggier)
Date: Thu, 15 May 2003 09:10:31 +0200
Subject: [Twisted-Python] twisted.web.woven.guard.SessionWrapper problems
In-Reply-To: <20030514213931.GA19087@doublegemini.com>
Message-ID: <50A9E822-86A4-11D7-8251-000393756786@ruggier.org>

On mercredi, mai 14, 2003, at 23:39 Europe/Amsterdam, Clark C. Evans  
wrote:
> On Mon, May 12, 2003 at 09:26:45AM +0200, Matthias Urlichs wrote:
> | /sessionized-url/foo
> | 	Set cookie
> | 	Redirect to /sessionized-url/sp__aef9c34aecc3d9148/foo
> | /sessionized-url/sp__aef9c34aecc3d9148/foo
> | 	Redirect to either of the next two URLs depending on whether I see a
> | 	cookie
> | /sessionized-url/sp/foo
> | 	URL to use with cookies
> | /sessionized-url/sp_aef9c34aecc3d9148/foo
> | 	URL to use without cookies
>
> Just to comment.  The pathargs module in the standbox will help with
> some of these things.   It uses a colon in the path item to signify
> key/value pairs.
>
>    /sessionized-url/session:aef9c34aecc3d9148/foo
>
> The pathargs is generic so that *other* parameters can go there,
> perhaps a client identifier, etc.
>
>     
> /sessionized-url/client:29394/report:2939/session:aef9c34aecc3d9148/> foo
>
> The advantage of doing it this way, is that the person can copy/paste
> the URL and send it to his friend.  Since in the background you
> timeout session ids, and link it with a given ip address, you can
> present this person with a login-page, but yet keep the same
> client/report identifier.
>
> Anyway, pathargs is very useful for maintaining state information
> when you are using relative links without cookies.

hi Clark, just a couple of things:

- the pathargs still has the error pointed out some time ago about
isLeaf being a property and not a callable.
- just tried running it (with current Twisted CVS), and requesting
a 'dynamic' child gives:
exceptions.NameError: global name 'False' is not defined

cheers, mario

>
> Best,
>
> Clark




From tim_nagels at hotmail.com  Thu May 15 10:13:23 2003
From: tim_nagels at hotmail.com (Tim Nagels)
Date: Thu, 15 May 2003 16:13:23 +0200
Subject: [Twisted-Python] trouble Closing App-plugin
Message-ID: <BAY1-F107RApQ7vP46W00019c0e@hotmail.com>

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20030515/74f6884c/attachment.htm 

From mario at ruggier.org  Thu May 15 10:27:34 2003
From: mario at ruggier.org (Mario Ruggier)
Date: Thu, 15 May 2003 16:27:34 +0200
Subject: [Twisted-Python] Twisted.web and adbapi example?
In-Reply-To: <FF816FA079A11949BE655A693DC02D104D96E3@exchange2.loyaltyworks.com>
Message-ID: <5ECAD258-86E1-11D7-8251-000393756786@ruggier.org>

An example that uses threads (and not adpapi) is in January's mail  
achive, at:
http://twistedmatrix.com/pipermail/twisted-python/2003-January/ 
002694.html

Here's some old code that uses adpapi (save as a .rpy):

###

from twisted.web import resource
from twisted.web.server import NOT_DONE_YET

dbname = 'test'
dbuser = 'dbuser'
dbpass = 'dbpass'

from twisted.enterprise import row
class FooRow(row.RowObject):
   rowColumns = [
           ('foo_id', 'int'),
           ('name', 'varchar'),
           ('weight', 'int'),
                ]
   rowKeyColumns = [('foo_id', 'int4')]
   rowTableName = 'foo'
   #rowFactoryMethod = ['testFactoryMethod']

def databaseResult_adbapi(result, httpRequest):
     if result:
         for foo in result:
             httpRequest.write('foo: '+str(foo.__dict__)+'<br/>')
     else:
         httpRequest.write('stop:')
     httpRequest.finish()

def errBack_adbapi(err, httpRequest):
     httpRequest.write('error: '+str(err) )
     httpRequest.finish()

class MyResource_adbapi(resource.Resource):
     def render(self, request):
         from twisted.enterprise import adbapi, reflector
         from twisted.enterprise.sqlreflector import SQLReflector
         dbpool =  
adbapi.ConnectionPool('pyPgSQL.PgSQL',database=dbname,user=dbuser,passwo 
rd=dbpass)
         r = SQLReflector(dbpool,[FooRow])
         d = r.loadObjectsFrom('foo',whereClause=[('foo_id',  
reflector.LESSTHAN, 5)])
         d.addCallback(databaseResult_adbapi, request)
         d.addErrback(errBack_adbapi, request)
         return NOT_DONE_YET

resource = MyResource_adbapi()

###

> I've been pouring through the docs and examples, but can't find an
> example of a .rpy that generates a page containing the results of a
> database query.  How would such a thing be properly architected?
> Clearly the adbapi would be involved, but then how do I get the query
> results into the string returned by my resource?  Or would I use a
> deferred instead?
>
> Would someone please share a little code snippet (or point me at
> one)illustrating how that would best be accomplished?
>
> Thanks.




From smurf at smurf.noris.de  Thu May 15 15:52:38 2003
From: smurf at smurf.noris.de (Matthias Urlichs)
Date: Thu, 15 May 2003 21:52:38 +0200
Subject: [Twisted-Python] Twisted.web and adbapi example?
References: <FF816FA079A11949BE655A693DC02D104D96E3@exchange2.loyaltyworks.com> <5ECAD258-86E1-11D7-8251-000393756786@ruggier.org>
Message-ID: <pan.2003.05.15.19.52.36.885572@smurf.noris.de>

Hi, Mario Ruggier wrote:

> Here's some old code that uses adpapi (save as a .rpy):

... and edit to remove the line wraps your editor added.

Please turn wrapping off before pasting. Thank you.

-- 
Matthias Urlichs   |   {M:U} IT Design @ m-u-it.de   |  smurf at smurf.noris.de
Disclaimer: The quote was selected randomly. Really. | http://smurf.noris.de
-- 
"I have to convince you, or at least snow you ..."
		-- Prof. Romas Aleliunas, CS 435




From lordvan at lordvan.com  Thu May 15 13:02:38 2003
From: lordvan at lordvan.com (Thomas Raschbacher)
Date: Thu, 15 May 2003 19:02:38 +0200 (CEST)
Subject: [Twisted-Python] Twisted.web and adbapi example?
In-Reply-To: <pan.2003.05.15.19.52.36.885572@smurf.noris.de>
References: <FF816FA079A11949BE655A693DC02D104D96E3@exchange2.loyaltyworks.com>
        <5ECAD258-86E1-11D7-8251-000393756786@ruggier.org>
        <pan.2003.05.15.19.52.36.885572@smurf.noris.de>
Message-ID: <65202.62.47.64.183.1053018158.squirrel@mail-at.net>

hi!

I got one using t.w.w.p.Page & t.e.adbapi .. i'll post later/tomorrow ..
(if i forget just drop me a private mail ;)

regards
<quote who="Matthias Urlichs">
> Hi, Mario Ruggier wrote:
>
>> Here's some old code that uses adpapi (save as a .rpy):
>
> ... and edit to remove the line wraps your editor added.
>
> Please turn wrapping off before pasting. Thank you.
>
> --
> Matthias Urlichs   |   {M:U} IT Design @ m-u-it.de   |
> smurf at smurf.noris.de Disclaimer: The quote was selected randomly.
> Really. | http://smurf.noris.de --
> "I have to convince you, or at least snow you ..."
> 		-- Prof. Romas Aleliunas, CS 435
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-- 
-----BEGIN GEEK CODE BLOCK-----
GCS/CC/E/M/MU/S d- s: a--- C++++(++) UL++++ P+ L++++ E W+++ N+++ o-- K w-- O
M-- V- PS+ PE-- Y++ PGP+++ t+++ 5+ X- R tv b++++ DI- D+ G++ e-->+++++ h-- !r
z-
------END GEEK CODE BLOCK------


-----------------------------------------
This email was sent using SquirrelMail.
   "Webmail for nuts!"
http://squirrelmail.org/





From simon at callan.demon.co.uk  Thu May 15 17:43:55 2003
From: simon at callan.demon.co.uk (Simon Callan)
Date: Thu, 15 May 2003 22:43:55 +0100
Subject: [Twisted-Python] Porting Twisted Python to a new platform
Message-ID: <c95c2df34b.simon@velvet.callan.demon.co.uk>

Hi,

I've just come across Twisted Python, and it looks like just the thing
that I need for the projects that I want to play around with. There is
only one slight problem, it's not available for the platform I'll be
using (python on RISC OS).

This means that I have to write the extra code needed to interface
Twisted Python to the RISC OS GUI, and I was wondering if there is any
information available as to how I should go about this.

The GUI event loop is pretty standard, with one apparently unique
feature - the event poll can indicate that there is data available to
be read from a socket, or that a socket has just become writeable.

If anyone has any advice, I would be very grateful.

Simon

-- 
Livejournal: http://nallac.livejournal.com/




From radix at twistedmatrix.com  Thu May 15 17:50:00 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Thu, 15 May 2003 17:50:00 -0400
Subject: [Twisted-Python] Porting Twisted Python to a new platform
In-Reply-To: <c95c2df34b.simon@velvet.callan.demon.co.uk>; from simon@callan.demon.co.uk on Thu, May 15, 2003 at 17:43:55 -0400
References: <c95c2df34b.simon@velvet.callan.demon.co.uk>
Message-ID: <20030515215000.GA21431@toshi.anaprd01.md.comcast.net>

On 2003.05.15 17:43, Simon Callan wrote:
> Hi,
> 
> I've just come across Twisted Python, and it looks like just the thing
> that I need for the projects that I want to play around with. There is
> only one slight problem, it's not available for the platform I'll be
> using (python on RISC OS).
> 
> This means that I have to write the extra code needed to interface
> Twisted Python to the RISC OS GUI, and I was wondering if there is any
> information available as to how I should go about this.
> 
> The GUI event loop is pretty standard, with one apparently unique
> feature - the event poll can indicate that there is data available to
> be read from a socket, or that a socket has just become writeable.

I'm pretty sure the GTK has the same feature, and the gtkreactor 
(twisted.internet.gtkreactor) takes advantage of it. You probably want
to read that code.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From exarkun at intarweb.us  Thu May 15 18:45:46 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Thu, 15 May 2003 18:45:46 -0400
Subject: [Twisted-Python] trouble Closing App-plugin
In-Reply-To: <BAY1-F107RApQ7vP46W00019c0e@hotmail.com>
References: <BAY1-F107RApQ7vP46W00019c0e@hotmail.com>
Message-ID: <20030515224546.GA16049@meson.dyndns.org>

On Thu, May 15, 2003 at 04:13:23PM +0200, Tim Nagels wrote:
> [snip html]

  Please don't post HTML to the list.  Other concerns aside, it makes
reading your code rather difficult (html disregards whitespace, unlike some
languages!)

  Jp

-- 
Examinations are formidable even to the best prepared, for
even the greatest fool may ask more the the wisest man can answer.
                -- C.C. Colton
-- 
 up 13 days, 20:39, 2 users, load average: 0.00, 0.00, 0.00
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030515/7d6fcbc4/attachment.pgp 

From dreid at twistedmatrix.com  Thu May 15 21:50:32 2003
From: dreid at twistedmatrix.com (David Reid)
Date: Thu, 15 May 2003 20:50:32 -0500
Subject: [Twisted-Python] Straightening out www.twistedmatrix.com
Message-ID: <20030516015032.GA361@pyramid.twistedmatrix.com>

I've been handed the task of straightening out the Twisted website.
My first task is to simply remove references to features/products etc
that are no longer being supported or used etc.  (Like jython)  So all
I'm asking is for some of the people who really grok twisted to send an
email my way whenever they find something that can be
removed/modified/maybe even added.

Thanks,
David Reid



From radix at twistedmatrix.com  Thu May 15 22:46:18 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Thu, 15 May 2003 22:46:18 -0400
Subject: [Twisted-Python] Straightening out www.twistedmatrix.com
In-Reply-To: <20030516015032.GA361@pyramid.twistedmatrix.com>; from dreid@twistedmatrix.com on Thu, May 15, 2003 at 21:50:32 -0400
References: <20030516015032.GA361@pyramid.twistedmatrix.com>
Message-ID: <20030516024618.GC21431@toshi.anaprd01.md.comcast.net>

On 2003.05.15 21:50, David Reid wrote:
> I've been handed the task of straightening out the Twisted website.
> My first task is to simply remove references to features/products etc
> that are no longer being supported or used etc.  (Like jython)  So all
> I'm asking is for some of the people who really grok twisted to send an
> email my way whenever they find something that can be
> removed/modified/maybe even added.

Well, the "Plugins" page is quite obsolete; Twisted Forums and Twisted 
Metrics are outright dead, Twisted Bugs has been renamed Twisted Issues.

>From a once-over of all the content in the site, those seem to be the most
obvious places for some improvement.

Good luck :-)

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From Martin.Moellenbeck at t-online.de  Fri May 16 01:23:17 2003
From: Martin.Moellenbeck at t-online.de (Martin =?ISO-8859-1?Q?M=F6llenbeck?=)
Date: 16 May 2003 07:23:17 +0200
Subject: [Twisted-Python] a little OT: python workshop became a twisted
	workshop
In-Reply-To: <1052953272.2193.2.camel@momo.initd.org>
References: <58A990B0-8630-11D7-853B-000393C9700E@twistedmatrix.com>
	 <1052941375.2226.5.camel@mond.moellenbeck.local>
	 <1052953272.2193.2.camel@momo.initd.org>
Message-ID: <1053062596.2055.6.camel@mond.moellenbeck.local>

Am Don, 2003-05-15 um 01.01 schrieb Federico Di Gregorio:
> Il mer, 2003-05-14 alle 21:42, Martin M?llenbeck ha scritto:
> > Am Mit, 2003-05-14 um 19.20 schrieb Glyph Lefkowitz:
> > > On Wednesday, May 14, 2003, at 03:01 AM, Federico Di Gregorio wrote:
> > > 
> > > > "Advanced Python: network protocols" [...] ended up being a *twisted 
> > > > workshop*
> > > 
> > > Wow!  Thanks for letting us know.  It's always nice to hear things like 
> > > this :-).
> > 
> > Is there an english version ?
> 
> an english version of what?

I looked at www.webb.it, but the site isn't in english.

ciao,
Martin




From lafou at wanadoo.fr  Fri May 16 05:02:24 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: 16 May 2003 11:02:24 +0200
Subject: [Twisted-Python] splitting log file
Message-ID: <1053075744.3183.1278.camel@biproc>

Hello

I've made a server using PB and woven (both are running in main server).
When I do some very long calculations, the log file is splitted in
several parts (977K). Moreover, web log is mixed with PB log, which hard
to debug. Is there a way to correct these two problems ?


thx
Philippe




From ddimoti at mi2.hr  Fri May 16 05:18:10 2003
From: ddimoti at mi2.hr (Drazen Dimoti)
Date: Fri, 16 May 2003 11:18:10 +0200 (MEST)
Subject: [Twisted-Python] splitting log file
In-Reply-To: <1053075744.3183.1278.camel@biproc>
References: <1053075744.3183.1278.camel@biproc>
Message-ID: <45880.217.14.214.4.1053076690.squirrel@services.mi2.hr>

hi,

maybe this will help:
http://www.twistedmatrix.com/documents/examples/rotatinglog.py


> Hello
>
> I've made a server using PB and woven (both are running in main server).
> When I do some very long calculations, the log file is splitted in
> several parts (977K). Moreover, web log is mixed with PB log, which hard
> to debug. Is there a way to correct these two problems ?
>
>
> thx
> Philippe
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-- 
D.R.A.Z.E.N - Digital Robotic Assassination and Zealous Exploration Neohuman





From lafou at wanadoo.fr  Fri May 16 05:35:37 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: 16 May 2003 11:35:37 +0200
Subject: [Twisted-Python] splitting log file
In-Reply-To: <45880.217.14.214.4.1053076690.squirrel@services.mi2.hr>
References: <1053075744.3183.1278.camel@biproc>
	 <45880.217.14.214.4.1053076690.squirrel@services.mi2.hr>
Message-ID: <1053077737.3183.1282.camel@biproc>

On Fri, 2003-05-16 at 11:18, Drazen Dimoti wrote:
> hi,
> 
> maybe this will help:
> http://www.twistedmatrix.com/documents/examples/rotatinglog.py

Thank you !
I'll take a look at the api. there must be a way to avoid splitting in log (like  rotateLength=0 or -1)





From justinjohnson at fastmail.fm  Fri May 16 09:05:47 2003
From: justinjohnson at fastmail.fm (Justin Johnson)
Date: Fri, 16 May 2003 07:05:47 -0600
Subject: [Twisted-Python] twisted.python.usage.Options Questions
In-Reply-To: <1053077737.3183.1282.camel@biproc>
References: <1053075744.3183.1278.camel@biproc>
 	 <45880.217.14.214.4.1053076690.squirrel@services.mi2.hr> <1053077737.3183.1282.camel@biproc>
Message-ID: <20030516130547.0611A33135@www.fastmail.fm>

Greetings,

I'm using twisted.python.usage to handle command-line option parsing. 
The script I have uses subcommands, so I can type:

myscript.py subcommand -a 1 -b 2 ...

I sub-classed BaseOptions as follows...

[code]
# Setup command-line options for all subcommands
class BaseOptions(usage.Options):
	optFlags = [
		['help', 'h', "Display usage information"],
	]

class MkvobOptions(BaseOptions):
	optParameters = [
		['vobs', 'v', None, "Comma-delimited list of VOBs to create"],
		['original', 'o', None, "Original site to create VOBs at first"],
        ['sites', 's', None, "Comma-delimited list of sites to replicate
        to"],
		['group', 'g', r'UHCADAAA\ccusers', "NT group to be primary group for VOBs"]
	]
	def postOptions(self):
		for opt in ["vobs","original"]:
			if not self[opt]:
				raise usage.UsageError, "--vobs and --original are required."

class RmvobOptions(BaseOptions):
	optParameters = [
		['vobs', 'v', None, "Comma-delimited list of VOBs to remove"],
		['original', 'o', None, "Site to remove VOBs from"],
	]
	def postOptions(self):
		for opt in ["vobs","original"]:
			if not self[opt]:
				raise usage.UsageError, "--vobs and --original are required."

class Options(usage.Options):
	subCommands = [
		['mkvob', None, MkvobOptions, "Create VOBs"],
		['rmvob', None, RmvobOptions, "Remove VOBs"]
	]
[/code]

I have some questions though.

1)  Passing in the --help option displays usage info the way I'd want it,
grabbing __doc__ from the top of the file and also displaying info about
my subcommands.  

[output]
C:\share\python\uhg\uht\tsd\ClearCase>vobtool.py --help
Usage: vobtool.py [options]
Options:
      --version
      --help     Display this help and exit.

VOB Administrative Tool  <<< This is my __doc__

Commands:
    mkvob      Create VOBs
    rmvob      Remove VOBs


C:\share\python\uhg\uht\tsd\ClearCase>
[/output]

But when I pass the --help option to a subcommand, I'd like to have some
sort of __doc__ equivalent for the subcommand, but I get the following
instead.

[output]
C:\share\python\uhg\uht\tsd\ClearCase>vobtool.py mkvob --help
Usage: vobtool.py [options]
Options:
  -h, --help       Display this help and exit.
  -v, --vobs=      Comma-delimited list of VOBs to create
  -o, --original=  Original site to create VOBs at first
  -s, --sites=     Comma-delimited list of sites to replicate to
  -g, --group=     NT group to be primary group for VOBs [default:
                   UHCADAAA\ccusers]
      --version

VOB Administrative Tool  <<< The __doc__ for the file
[/output]

Is there a way to do that?

2)  When I just run the command without passing any options (not even a
subcommand) I get the following error:

[output]
C:\share\python\uhg\uht\tsd\ClearCase>vobtool.py
Traceback (most recent call last):
  File "C:\share\python\uhg\uht\tsd\ClearCase\vobtool.py", line 121, in ?
    main()
  File "C:\share\python\uhg\uht\tsd\ClearCase\vobtool.py", line 55, in
  main
    if config.subCommand == 'mkvob':
  File "C:\Python22\Lib\site-packages\twisted\python\usage.py", line 151,
  in __g
etattr__
    raise AttributeError("%s instance has no attribute '%s'" %
    (self.__class__,
attr))
AttributeError: __main__.Options instance has no attribute 'subCommand'

C:\share\python\uhg\uht\tsd\ClearCase>
[/output]

My main function is as follows...

[snip]
# Main function
def main():
	config = Options()
	try:
		config.parseOptions()
	except usage.UsageError, errortext:
		print '%s: %s' % (sys.argv[0], errortext)
		print '%s: Try --help for usage details.' % (sys.argv[0])
		sys.exit(1)

	if config.subCommand == 'mkvob':
		doMkvob(config.subOptions)
	elif config.subCommand == 'rmvob':
		doRmvob(config.subOptions)
[snip]

Is there a particular test I should do on config before checking
config.subCommand?

3)  I see there is a --version option available if you use
twisted.python.usage.  But it always displays the Twisted version.  Is
there a way to override that so the --version option either isn't
available or at least returns the version information for my script and
not for Twisted?


Sorry for the long email.
Thanks so much.
-Justin



From itamar at itamarst.org  Fri May 16 09:56:50 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 16 May 2003 09:56:50 -0400
Subject: [Twisted-Python] splitting log file
In-Reply-To: <1053075744.3183.1278.camel@biproc>
References: <1053075744.3183.1278.camel@biproc>
Message-ID: <20030516095650.76d70a06.itamar@itamarst.org>

On 16 May 2003 11:02:24 +0200
Philippe Lafoucri?re <lafou at wanadoo.fr> wrote:

> I've made a server using PB and woven (both are running in main
> server). When I do some very long calculations, the log file is
> splitted in several parts (977K). Moreover, web log is mixed with PB
> log, which hard to debug. Is there a way to correct these two problems
> ?

The web server lets you specify a different file for the web log, as one
of the arguments to the twisted.web.server.Site, IIRC.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From korpios at korpios.com  Fri May 16 10:00:46 2003
From: korpios at korpios.com (Tom 'Korpios' Tobin)
Date: Fri, 16 May 2003 10:00:46 -0400
Subject: [Twisted-Python] Patch: Make twisted.web.distrib work with twisted.web.vhost
Message-ID: <20030516140046.GA60812@hecate.korpios.net>

Here is a patch to make twisted.web.distrib work with twisted.web.vhost.

As things stand, when twisted.web.vhost calls a virtual host's getChildWithDefault, it ends up calling getChild.  As ResourceSubscription has no getChild, the render call never happens to make the distributed connection.  By returning self, we can make this happen.

On the ResourcePublisher side of things, after being called in this way (e.g. through a virtual host) request's prepath and postpath are a bit off; we fix this in remote_request.


--- distrib.py  Fri May 16 09:41:18 2003
+++ distrib-patched.py  Fri May 16 09:50:01 2003
@@ -174,6 +174,11 @@
             self.publisher.callRemote('request', request).addCallbacks(i.finished, i.failed)
         return NOT_DONE_YET

+    def getChild(self, path, request):
+        """I am a child; I should return myself so render can be called.
+        """
+        return self
+
 class ResourcePublisher(pb.Root, styles.Versioned):
     def __init__(self, site):
         self.site = site
@@ -191,6 +196,8 @@
         return self

     def remote_request(self, request):
+        if len(request.prepath) > 0:
+            request.postpath.insert(0, request.prepath.pop())
         res = self.site.getResourceFor(request)
         log.msg( request )
         return res.render(request)



Tom "Korpios" Tobin
korpios at korpios.com





From korpios at korpios.com  Fri May 16 10:38:50 2003
From: korpios at korpios.com (Tom 'Korpios' Tobin)
Date: Fri, 16 May 2003 10:38:50 -0400
Subject: [Twisted-Python] Patch: Passive getSession for twisted.web.server.Request
Message-ID: <20030516143850.GA61048@hecate.korpios.net>

This patch adds an option to pass a named argument, passive, to twisted.web.server.Request's getSession method.  If passive is true, then getSession will check for the existence of a session or session cookie; it will not, however, drop a session cookie on the client if one does not already exist.  If there is no session, one would expect None from getSession in this case.

This is useful in conditions where one would like to check for (and use) a session if one already exists, but not necessarily drop a session cookie on every client which comes along.


--- server.py   Fri May 16 09:41:15 2003
+++ server-patched.py   Fri May 16 10:32:02 2003
@@ -305,7 +305,7 @@

     session = None

-    def getSession(self, sessionInterface = None):
+    def getSession(self, sessionInterface = None, passive = 0):
         # Session management
         if not self.session:
             cookiename = string.join(['TWISTED_SESSION'] + self.sitepath, "_")
@@ -316,12 +316,13 @@
                 except KeyError:
                     pass
             # if it still hasn't been set, fix it up.
-            if not self.session:
+            if not self.session and not passive:
                 self.session = self.site.makeSession()
                 self.addCookie(cookiename, self.session.uid, path='/')
-        self.session.touch()
-        if sessionInterface:
-            return self.session.getComponent(sessionInterface)
+        if self.session:
+            self.session.touch()
+            if sessionInterface:
+                return self.session.getComponent(sessionInterface)
         return self.session

     def prePathURL(self):


Tom "Korpios" Tobin
korpios at korpios.com




From lafou at wanadoo.fr  Fri May 16 10:52:23 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: 16 May 2003 16:52:23 +0200
Subject: [Twisted-Python] splitting log file
In-Reply-To: <20030516095650.76d70a06.itamar@itamarst.org>
References: <1053075744.3183.1278.camel@biproc>
	 <20030516095650.76d70a06.itamar@itamarst.org>
Message-ID: <1053096743.7295.2.camel@biproc>

Ha thnx, I was looking for that 

On Fri, 2003-05-16 at 15:56, Itamar Shtull-Trauring wrote:
> On 16 May 2003 11:02:24 +0200
> Philippe Lafoucri?re <lafou at wanadoo.fr> wrote:
> 
> > I've made a server using PB and woven (both are running in main
> > server). When I do some very long calculations, the log file is
> > splitted in several parts (977K). Moreover, web log is mixed with PB
> > log, which hard to debug. Is there a way to correct these two problems
> > ?
> 
> The web server lets you specify a different file for the web log, as one
> of the arguments to the twisted.web.server.Site, IIRC.
-- 
Philippe Lafoucri?re <lafou at wanadoo.fr>
InFuzzion




From justinjohnson at fastmail.fm  Fri May 16 11:23:12 2003
From: justinjohnson at fastmail.fm (Justin Johnson)
Date: Fri, 16 May 2003 09:23:12 -0600
Subject: [Twisted-Python] Transparent Remote Objects
In-Reply-To: <20030516130547.0611A33135@www.fastmail.fm>
References: <1053075744.3183.1278.camel@biproc>
  	 <45880.217.14.214.4.1053076690.squirrel@services.mi2.hr> <1053077737.3183.1282.camel@biproc> <20030516130547.0611A33135@www.fastmail.fm>
Message-ID: <20030516152312.3426F5E42@www.fastmail.fm>

Hello,

I have a bunch of servers I have to support and I want to be able to
connect remotely to the servers to run commands.  I actually got this
working by taking the pbsimple.py example and adding the remote methods I
want and then creating a command-line tool to interact with the service. 
It works great!

However, I have some commands that require a command to be run on one
machine (exporting a packet) and then connecting remotely to another
machine to complete the operation (importing a packet).  Adding callbacks
to Deffereds looks a little cumbersome and makes it harder to read the
code.  Is there a way to make this more transparent?  Like Defining
Remote objects that can have methods called on them?  I'm picture
something like the following, on a high level.  VOB is just a repository
I create on one machine and then export to multiple sites where I have to
import them.

start_site = "some_site"  # The place where the original VOB will be
created
sites = ["site1","site2","site3"]

for tag in vobs:
    v = RemoteVOB(tag,start_site)
    v.make()  # Runs a command to create the VOB
    for s in sites:
        v.export(s)  # Creates a packet and exports it to the destination
        site
        rv = RemoteVOB(tag,s) # Creates a remote object at the
        destination site
        rv.import() # Import the packet, completing the creation of the
        VOB replica

Is there anything in twisted that works this way?  If not, does anyone
have any suggestions on how to simplify the callback coding?  I'm pretty
new to this and my understanding of what's going on under the covers is
quite lacking.

I must say though, it was exceptionally easy to take the pbsimple example
and create a tremendously useful service to simplify administration. 
This is some cool stuff!

Thanks.
-Justin



From wari at home.wari.org  Fri May 16 12:26:36 2003
From: wari at home.wari.org (Wari Wahab)
Date: Sat, 17 May 2003 00:26:36 +0800
Subject: [Twisted-Python] Named Pipes
Message-ID: <3EC5113C.6070703@home.wari.org>

Hi, is there a way to get twisted to listen to a named pipe like it's a 
TCP connection or something? How would I go about it?

What I wanted goes like this, there's a named piped, and syslog or other 
programs can send one line alerts (or multiline as well), and my app is 
supposed to do something with this data while attending to other stuff 
as well. We have a perl program that does this using select(), and I bet 
this can be done with twisted. But I don't see a named pipe 
implementation in the twisted docs. I'm sure there's a way.

-- 
Regards: Wari Wahab
RoughingIT - http://roughingit.subtlehints.net
PyBlosxom  - http://roughingit.subtlehints.net/pyblosxom




From uwe at oss4u.com  Fri May 16 12:37:32 2003
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Fri, 16 May 2003 09:37:32 -0700
Subject: [Twisted-Python] Problem creating working .tap file
Message-ID: <200305160937.32054.uwe@oss4u.com>

Hi,

something strange shows up here. I try to create a TAP from a pb application.
The tap is created nicely, but I get an error when starting it:

Failed to load application: <twisted.persisted.styles.Ephemeral instance at 
0x82450a4> is not safe for unpickling

So I tried a simple application and took the echoer from the manual.

from twisted.spread import pb
from twisted.internet import app

class Echoer(pb.Root):
    def remote_echo(self,st):
        print "echo: ",st
        return st

appl=app.Application("echo")
appl.listenTCP(8888,pb.BrokerFactory(Echoer()))
appl.save("start")


Funny thing is, this generates the same error when I try to start it.

I'm using 1.0.5 on mandrake 9.1

Any hints would be appreciated.

	UC

--
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417




From glyph at twistedmatrix.com  Fri May 16 13:11:39 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 16 May 2003 12:11:39 -0500
Subject: [Twisted-Python] Patch: Make twisted.web.distrib work with twisted.web.vhost
In-Reply-To: <20030516140046.GA60812@hecate.korpios.net>
Message-ID: <74E5BE58-87C1-11D7-A5D5-000393C9700E@twistedmatrix.com>

On Friday, May 16, 2003, at 09:00 AM, Tom 'Korpios' Tobin wrote:

> As things stand, when twisted.web.vhost calls a virtual host's 
> getChildWithDefault, it ends up calling getChild.  As 
> ResourceSubscription has no getChild, the render call never happens to 
> make the distributed connection.  By returning self, we can make this 
> happen.

This strikes me as a hack.  Rather than returning self and screwing up 
prepath/postpath, the virtual host ought to be honoring isLeaf.




From glyph at twistedmatrix.com  Fri May 16 13:14:21 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 16 May 2003 12:14:21 -0500
Subject: [Twisted-Python] Patch: Passive getSession for twisted.web.server.Request
In-Reply-To: <20030516143850.GA61048@hecate.korpios.net>
Message-ID: <D585CB47-87C1-11D7-A5D5-000393C9700E@twistedmatrix.com>

On Friday, May 16, 2003, at 09:38 AM, Tom 'Korpios' Tobin wrote:

> This patch adds an option to pass a named argument, passive, to 
> twisted.web.server.Request's getSession method.  If passive is true, 
> then getSession will check for the existence of a session or session 
> cookie; it will not, however, drop a session cookie on the client if 
> one does not already exist.  If there is no session, one would expect 
> None from getSession in this case.

The session stuff in twisted.web.server is on its way to being phased 
out anyway.  Have a look at twisted.web.woven.guard - resources wrapped 
with a SessionWrapper will have the semantics of getSession that you 
want; it puts a setupSession method on the request which tells the 
browser to begin negotiating a session.  (Also, this method is 
resilient in the face of cookies being disabled.)




From m at moshez.org  Fri May 16 13:36:38 2003
From: m at moshez.org (Moshe Zadka)
Date: 16 May 2003 17:36:38 -0000
Subject: [Twisted-Python] Named Pipes
In-Reply-To: <3EC5113C.6070703@home.wari.org>
References: <3EC5113C.6070703@home.wari.org>
Message-ID: <20030516173638.28603.qmail@green.zadka.com>

On Sat, 17 May 2003, Wari Wahab <wari at home.wari.org> wrote:

> Hi, is there a way to get twisted to listen to a named pipe like it's a 
> TCP connection or something? How would I go about it?

It's fairly easy, and probably should be done in Twisted at some point.

from twisted.internet import abstract, fdesc

class SelectableFile(abstract.FileDescriptor):

    def __init__(self, fp, protocol):
        self.fp = fp
        fdesc.setNonBlocking(fp)
        self.protocol = protocol
        self.protocol.makeConnection(self)
        self.fileno = self.fp.fileno

    def doRead(self):
        buf = self.fp.read(4096)
        if buf:
            self.protocol.dataReceived(buf)
        else:
            self.protocol.connectionLost()

    def write(self, data):
        pass # what can we do with the data?

    def loseConnection(self):
        self.fp.close()


reactor.addReader(SelectableFile(open("myNamedPipe"), protocolInstance))
[this is completely untested]

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From korpios at korpios.com  Fri May 16 13:50:25 2003
From: korpios at korpios.com (Tom 'Korpios' Tobin)
Date: Fri, 16 May 2003 13:50:25 -0400
Subject: [Twisted-Python] Patch: Passive getSession for twisted.web.server.Request
In-Reply-To: <D585CB47-87C1-11D7-A5D5-000393C9700E@twistedmatrix.com>
References: <20030516143850.GA61048@hecate.korpios.net> <D585CB47-87C1-11D7-A5D5-000393C9700E@twistedmatrix.com>
Message-ID: <20030516175025.GA61876@hecate.korpios.net>

Hmm.  I specifically don't like the way Woven works.  My preferred web development method is akin to Quixote; I really can't stand HTML templating in the vein of PHP, etc.  That said, am I going to need to reimplement Session code down the road due to this phase-out?  Even if SessionWrapper works standalone without using the bulk of Woven, I would much rather not be importing any Woven libraries unnecessarily.


Thanks,

Tom "Korpios" Tobin
korpios at korpios.com


On Fri, May 16, 2003 at 12:14:21PM -0500, Glyph Lefkowitz wrote:
> 
> The session stuff in twisted.web.server is on its way to being phased 
> out anyway.  Have a look at twisted.web.woven.guard - resources wrapped 
> with a SessionWrapper will have the semantics of getSession that you 
> want; it puts a setupSession method on the request which tells the 
> browser to begin negotiating a session.  (Also, this method is 
> resilient in the face of cookies being disabled.)



From radix at twistedmatrix.com  Fri May 16 13:53:18 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 16 May 2003 13:53:18 -0400
Subject: [Twisted-Python] Patch: Passive getSession for twisted.web.server.Request
In-Reply-To: <20030516175025.GA61876@hecate.korpios.net>; from korpios@korpios.com on Fri, May 16, 2003 at 13:50:25 -0400
References: <20030516143850.GA61048@hecate.korpios.net> <D585CB47-87C1-11D7-A5D5-000393C9700E@twistedmatrix.com> <20030516175025.GA61876@hecate.korpios.net>
Message-ID: <20030516175318.GE21431@toshi.anaprd01.md.comcast.net>

On 2003.05.16 13:50, Tom 'Korpios' Tobin wrote:
> Hmm.  I specifically don't like the way Woven works.  My preferred web
> development method is akin to Quixote; I really can't stand HTML 
> templating in the vein of PHP, etc.

You're badly confused about Woven if you think it's anything remotely
like PHP.

You don't put code in the templates in woven.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From glyph at twistedmatrix.com  Fri May 16 14:04:37 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 16 May 2003 13:04:37 -0500
Subject: [Twisted-Python] Transparent Remote Objects
In-Reply-To: <20030516152312.3426F5E42@www.fastmail.fm>
Message-ID: <DB6A73F9-87C8-11D7-A5D5-000393C9700E@twistedmatrix.com>

On Friday, May 16, 2003, at 10:23 AM, Justin Johnson wrote:

> Adding callbacks to Deffereds looks a little cumbersome and makes it 
> harder to read the code.  Is there a way to make this more > transparent?

Transparency is not a goal of PB.

It does sound like you don't really need many callbacks though: your 
example code could be something like:

o = remoteThingy.getMeAVobContainer().addCallback(gotMeAVobContainer)

class RemoteVOB:
     def __init__(self, vc, tag, site):
         self.vc = vc
         self.tag = tag
         self.site = site

     def make(self):
         return self.vc.callRemote("makeVOB", self.tag, self.site)
     def export(self, s):
         return self.vc.callRemote("exportVOB", self.tag, self.site, s)
     def import(self):
         return self.vc.callRemote("importVOB", self.tag, self.site)

def gotMeAVobContainer(vc):
     for tag in vobs:
         v = RemoteVOB(vc, tag, start_site)
         v.make()
         for s in sites:
             v.export(s)
             rv = RemoteVOB(tag, s)
             rv.import()

Does that explain anything?




From korpios at korpios.com  Fri May 16 14:15:55 2003
From: korpios at korpios.com (Tom 'Korpios' Tobin)
Date: Fri, 16 May 2003 14:15:55 -0400
Subject: [Twisted-Python] Patch: Passive getSession for twisted.web.server.Request
In-Reply-To: <20030516175318.GE21431@toshi.anaprd01.md.comcast.net>
References: <20030516143850.GA61048@hecate.korpios.net> <D585CB47-87C1-11D7-A5D5-000393C9700E@twistedmatrix.com> <20030516175025.GA61876@hecate.korpios.net> <20030516175318.GE21431@toshi.anaprd01.md.comcast.net>
Message-ID: <20030516181555.GA62026@hecate.korpios.net>

I wasn't trying to imply that Woven worked specifically like PHP; it still involves web templating (albeit in conjunction with a Model), though.  It isn't to my taste, as I prefer coding web applications directly without a templating system; Quixote would be an example of this (http://www.mems-exchange.org/software/quixote/).  My concern was, as stated previously, that a broader functionality (session code) was getting moved into a more specific sybsystem (Woven).


Tom "Korpios" Tobin
korpios at korpios.com


On Fri, May 16, 2003 at 01:53:18PM -0400, Christopher Armstrong wrote:
> 
> On 2003.05.16 13:50, Tom 'Korpios' Tobin wrote:
> > Hmm.  I specifically don't like the way Woven works.  My preferred web
> > development method is akin to Quixote; I really can't stand HTML 
> > templating in the vein of PHP, etc.
> 
> You're badly confused about Woven if you think it's anything remotely
> like PHP.
> 
> You don't put code in the templates in woven.



From exarkun at intarweb.us  Fri May 16 14:14:53 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Fri, 16 May 2003 14:14:53 -0400
Subject: [Twisted-Python] twisted.python.usage.Options Questions
In-Reply-To: <20030516130547.0611A33135@www.fastmail.fm>
References: <1053075744.3183.1278.camel@biproc> <45880.217.14.214.4.1053076690.squirrel@services.mi2.hr> <1053077737.3183.1282.camel@biproc> <20030516130547.0611A33135@www.fastmail.fm>
Message-ID: <20030516181453.GA17428@meson.dyndns.org>

On Fri, May 16, 2003 at 07:05:47AM -0600, Justin Johnson wrote:
> Greetings,
> 
> I'm using twisted.python.usage to handle command-line option parsing. 
> The script I have uses subcommands, so I can type:
> 
> myscript.py subcommand -a 1 -b 2 ...
> 
> I sub-classed BaseOptions as follows...
> 
> [snip code]
> I have some questions though.
> 
> 1)  Passing in the --help option displays usage info the way I'd want it,
> grabbing __doc__ from the top of the file and also displaying info about
> my subcommands.  
> 
> [snip output]
> 
> Is there a way to do that?

  Hmm, I don't believe so.  Usage could probably be patched to print
something slightly different for options with subcommands.

> 
> 2)  When I just run the command without passing any options (not even a
> subcommand) I get the following error:
> 
> [snip traceback, main() definition]
> 
> Is there a particular test I should do on config before checking
> config.subCommand?

  Add "subCommand = None" or something similar to your Options subclass  fix
the exception you're getting.  Alternatively, just test hasattr(config,
'subCommand') before your conditional.  I often do this in postOptions and
raise a UsageError if a subcommand is required and none has been given.


  Jp

-- 
"Pascal is Pascal is Pascal is dog meat."
                -- M. Devine and P. Larson, Computer Science 340
-- 
 up 14 days, 14:39, 0 users, load average: 0.01, 0.02, 0.00
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030516/64ea0016/attachment.pgp 

From glyph at twistedmatrix.com  Fri May 16 14:21:07 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 16 May 2003 13:21:07 -0500
Subject: [Twisted-Python] Patch: Passive getSession for twisted.web.server.Request
In-Reply-To: <20030516175025.GA61876@hecate.korpios.net>
Message-ID: <29862528-87CB-11D7-A5D5-000393C9700E@twistedmatrix.com>

On Friday, May 16, 2003, at 12:50 PM, Tom 'Korpios' Tobin wrote:

> Hmm.  I specifically don't like the way Woven works.

Woven is the Twisted web browser-based application framework.  The 
presence of browser-interaction features like sessions and cookies in 
twisted.web was really an accident due to the author's lack of 
appreciation for how these sorts of things worked at the time that he 
was writing it originally.  (ahem.)

If you don't like the templating system, don't use it :-), but that is 
only one part of what woven gives you.

> My preferred web development method is akin to Quixote; I really can't 
> stand HTML templating in the vein of PHP, etc.

To put Radix's comments more succinctly: dude, are you mental?  I think 
it would be difficult for Woven to have less in common with PHP and 
still talk to a web browser.  To the extent that it is analogous to 
previous work, it is most like Barracuda[1] or ZPT[2].

> That said, am I going to need to reimplement Session code down the 
> road due to this phase-out?

Probably at some point, but we tend to be very relaxed about web 
deprecations (even ones that TOTALLY suck, like twisted.web.widgets).  
The Session code in twisted.web.server is pretty fragile though, 
especially compared to the woven.guard stuff.

> Even if SessionWrapper works standalone without using the bulk of 
> Woven, I would much rather not be importing any Woven libraries 
> unnecessarily.

Don't worry about it.  In future releases of Twisted, woven will be 
imported for pretty much all the HTML generation that the web server 
will do internally, including directory listings and status pages.  
It's not all that much code.

----
	[1]: http://www.barracudamvc.org/
	[2]: http://www.zope.org/Documentation/Books/ZopeBook/current/ZPT.stx




From justinjohnson at fastmail.fm  Fri May 16 14:34:33 2003
From: justinjohnson at fastmail.fm (Justin Johnson)
Date: Fri, 16 May 2003 12:34:33 -0600
Subject: [Twisted-Python] Transparent Remote Objects
In-Reply-To: <DB6A73F9-87C8-11D7-A5D5-000393C9700E@twistedmatrix.com>
References: <DB6A73F9-87C8-11D7-A5D5-000393C9700E@twistedmatrix.com>
Message-ID: <20030516183433.2EFD0357C3@www.fastmail.fm>

In your example, is VobContainer the object returned by
pb.getObjectAt(server, 8789, 30)?  And then the callRemote method ends up
invoking the remote_* methods on the service running on the other server
(the thing that inherits pb.Root)?  So I basically a class RemoteVOB that
just needs a connection to the service and it makes the remote calls for
me?

Feel free to correct my terminology if it's messed up.

Thanks.

On Fri, 16 May 2003 13:04:37 -0500, "Glyph Lefkowitz"
<glyph at twistedmatrix.com> said:
> 
> On Friday, May 16, 2003, at 10:23 AM, Justin Johnson wrote:
> 
> > Adding callbacks to Deffereds looks a little cumbersome and makes it 
> > harder to read the code.  Is there a way to make this more > transparent?
> 
> Transparency is not a goal of PB.
> 
> It does sound like you don't really need many callbacks though: your 
> example code could be something like:
> 
> o = remoteThingy.getMeAVobContainer().addCallback(gotMeAVobContainer)
> 
> class RemoteVOB:
>      def __init__(self, vc, tag, site):
>          self.vc = vc
>          self.tag = tag
>          self.site = site
> 
>      def make(self):
>          return self.vc.callRemote("makeVOB", self.tag, self.site)
>      def export(self, s):
>          return self.vc.callRemote("exportVOB", self.tag, self.site, s)
>      def import(self):
>          return self.vc.callRemote("importVOB", self.tag, self.site)
> 
> def gotMeAVobContainer(vc):
>      for tag in vobs:
>          v = RemoteVOB(vc, tag, start_site)
>          v.make()
>          for s in sites:
>              v.export(s)
>              rv = RemoteVOB(tag, s)
>              rv.import()
> 
> Does that explain anything?
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 



From justinjohnson at fastmail.fm  Fri May 16 14:41:35 2003
From: justinjohnson at fastmail.fm (Justin Johnson)
Date: Fri, 16 May 2003 12:41:35 -0600
Subject: [Twisted-Python] twisted.python.usage.Options Questions
In-Reply-To: <20030516181453.GA17428@meson.dyndns.org>
References: <1053075744.3183.1278.camel@biproc> <45880.217.14.214.4.1053076690.squirrel@services.mi2.hr> <1053077737.3183.1282.camel@biproc> <20030516130547.0611A33135@www.fastmail.fm> <20030516181453.GA17428@meson.dyndns.org>
Message-ID: <20030516184135.D19DC3593D@www.fastmail.fm>

> > 1)  Passing in the --help option displays usage info the way I'd want it,
> > grabbing __doc__ from the top of the file and also displaying info about
> > my subcommands.  
> > 
> > [snip output]
> > 
> > Is there a way to do that?
> 
>   Hmm, I don't believe so.  Usage could probably be patched to print
> something slightly different for options with subcommands.

I was thinking it would make sense to grab the doc from the class that
handles the options for the particular subcommand, since it is the only
class/function that we already know the name of and that is already
associated with the subcommand.

class RmvobOptions(usage.Options):
	"""Remove a VOB, yada yada yada <<< Here's my doc to go into usage
	"""
	optParameters = [
		['vobs', 'v', None, "Comma-delimitted list of VOBs to remove"],
		['original', 'o', None, "Site to remove VOBs from"],
	]
	def postOptions(self):
		for opt in ["vobs","original"]:
			if not self[opt]:
				raise usage.UsageError, "--vobs and --original are required."

Does that make sense?  Is that something you can do, or should I get
familiar with the code and submit a patch?
Thanks for your other suggestions as well.

-Justin



From glyph at twistedmatrix.com  Fri May 16 15:12:06 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 16 May 2003 14:12:06 -0500
Subject: [Twisted-Python] Transparent Remote Objects
In-Reply-To: <20030516183433.2EFD0357C3@www.fastmail.fm>
Message-ID: <48F0EC2C-87D2-11D7-A5D5-000393C9700E@twistedmatrix.com>

On Friday, May 16, 2003, at 01:34 PM, Justin Johnson wrote:

> Feel free to correct my terminology if it's messed up.

It sounds like you've basically got it right :).  Is that example 
useful to you?




From justinjohnson at fastmail.fm  Fri May 16 15:32:00 2003
From: justinjohnson at fastmail.fm (Justin Johnson)
Date: Fri, 16 May 2003 13:32:00 -0600
Subject: [Twisted-Python] Transparent Remote Objects
In-Reply-To: <48F0EC2C-87D2-11D7-A5D5-000393C9700E@twistedmatrix.com>
References: <48F0EC2C-87D2-11D7-A5D5-000393C9700E@twistedmatrix.com>
Message-ID: <20030516193200.42FEB313F1@www.fastmail.fm>

Yes it is.  Thanks for your help!

On Fri, 16 May 2003 14:12:06 -0500, "Glyph Lefkowitz"
<glyph at twistedmatrix.com> said:
> On Friday, May 16, 2003, at 01:34 PM, Justin Johnson wrote:
> 
> > Feel free to correct my terminology if it's messed up.
> 
> It sounds like you've basically got it right :).  Is that example 
> useful to you?
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 



From warner at lothar.com  Fri May 16 16:52:03 2003
From: warner at lothar.com (Brian Warner)
Date: Fri, 16 May 2003 13:52:03 -0700 (PDT)
Subject: [Twisted-Python] Problem creating working .tap file
References: <200305160937.32054.uwe@oss4u.com>
Message-ID: <20030516.135203.74749224.warner@lothar.com>

> something strange shows up here. I try to create a TAP from a pb application.
> The tap is created nicely, but I get an error when starting it:
> 
> Failed to load application: <twisted.persisted.styles.Ephemeral instance at 
> 0x82450a4> is not safe for unpickling

This is a pretty common gotcha. The class name of your Echoer() object is
stored in the tap file, and used at startup time to import the necessary
code. However, in your program, the class name is really __main__.Echoer. You
need to to a 'from myfile import Echoer' in the block where you perform the
listenTCP.

More details in <http://twistedmatrix.com/documents/howto/faq#auto15>,
"twistd won't load my .tap file!". I've added a note about the Ephemeral
message to make it easier to search for.

cheers,
 -Brian



From exarkun at intarweb.us  Fri May 16 16:52:45 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Fri, 16 May 2003 16:52:45 -0400
Subject: [Twisted-Python] twisted.python.usage.Options Questions
In-Reply-To: <20030516184135.D19DC3593D@www.fastmail.fm>
References: <1053075744.3183.1278.camel@biproc> <45880.217.14.214.4.1053076690.squirrel@services.mi2.hr> <1053077737.3183.1282.camel@biproc> <20030516130547.0611A33135@www.fastmail.fm> <20030516181453.GA17428@meson.dyndns.org> <20030516184135.D19DC3593D@www.fastmail.fm>
Message-ID: <20030516205245.GA17836@meson.dyndns.org>

On Fri, May 16, 2003 at 12:41:35PM -0600, Justin Johnson wrote:
> 
> > > 1)  Passing in the --help option displays usage info the way I'd want it,
> > > grabbing __doc__ from the top of the file and also displaying info about
> > > my subcommands.  
> > > 
> > > [snip output]
> > > 
> > > Is there a way to do that?
> > 
> >   Hmm, I don't believe so.  Usage could probably be patched to print
> > something slightly different for options with subcommands.
> 
> I was thinking it would make sense to grab the doc from the class that
> handles the options for the particular subcommand, since it is the only
> class/function that we already know the name of and that is already
> associated with the subcommand.
> [snip]
>
> Does that make sense?  Is that something you can do, or should I get
> familiar with the code and submit a patch?
> Thanks for your other suggestions as well.

  This is just what I was thinking.  If the change to make was obvious to
me, I'd do it, but after a quick look I find that I don't entirely remember
how this code works.  Could you come up with a patch for this?

  Jp

-- 
"If you find a neighbor in need, you're responsible for serving that
neighbor in need, you're responsible for loving a neighbor just like you'd
like to love yourself." -- George W. Bush, Sept. 16, 2002
-- 
 up 14 days, 18:39, 3 users, load average: 0.02, 0.02, 0.00
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030516/d3cd71c6/attachment.pgp 

From uwe at oss4u.com  Fri May 16 17:17:41 2003
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Fri, 16 May 2003 14:17:41 -0700
Subject: [Twisted-Python] Problem creating working .tap file
In-Reply-To: <20030516.135203.74749224.warner@lothar.com>
References: <200305160937.32054.uwe@oss4u.com> <20030516.135203.74749224.warner@lothar.com>
Message-ID: <200305161417.41659.uwe@oss4u.com>

On Friday 16 May 2003 01:52 pm, Brian Warner wrote:
> > something strange shows up here. I try to create a TAP from a pb
> > application. The tap is created nicely, but I get an error when starting
> > it:
> >
> > Failed to load application: <twisted.persisted.styles.Ephemeral instance
> > at 0x82450a4> is not safe for unpickling
>
> This is a pretty common gotcha. The class name of your Echoer() object is
> stored in the tap file, and used at startup time to import the necessary
> code. However, in your program, the class name is really __main__.Echoer.
> You need to to a 'from myfile import Echoer' in the block where you perform
> the listenTCP.
>
> More details in <http://twistedmatrix.com/documents/howto/faq#auto15>,
> "twistd won't load my .tap file!". I've added a note about the Ephemeral
> message to make it easier to search for.

Good idea to add the reference. I was browsing the FAQ for this since I 
already thought it might be one.
Thanks, that does the trick.

	UC

--
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417




From joebrown at rclooke.com  Fri May 16 17:27:08 2003
From: joebrown at rclooke.com (Joe Brown)
Date: Fri, 16 May 2003 17:27:08 -0400
Subject: [Twisted-Python] database access via cred and ssl encryption
In-Reply-To: <20030516205245.GA17836@meson.dyndns.org>
References: <1053075744.3183.1278.camel@biproc> <45880.217.14.214.4.1053076690.squirrel@services.mi2.hr> <1053077737.3183.1282.camel@biproc> <20030516130547.0611A33135@www.fastmail.fm> <20030516181453.GA17428@meson.dyndns.org> <20030516184135.D19DC3593D@www.fastmail.fm> <20030516205245.GA17836@meson.dyndns.org>
Message-ID: <3EC557AC.1010302@rclooke.com>

I'm anxious to get started using Twisted, but my objective is a little 
overwhelming for me, at the onset.

Reading the documentation, it looks fairly easy to use prospective 
broker or enteprise.  I don't see how to incorporate ssl encryption, but 
imagine it's not terribly difficult.

Is it possible with twisted to authenticate database access with 
prospective or cred and encrypt communication with ssl via twisted?

TIA,

-Joe




From glyph at twistedmatrix.com  Fri May 16 17:30:24 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 16 May 2003 16:30:24 -0500
Subject: [Twisted-Python] twisted.web.woven.guard.SessionWrapper problems
In-Reply-To: <pan.2003.05.12.07.26.23.732558@smurf.noris.de>
Message-ID: <9AFEFF88-87E5-11D7-A5D5-000393C9700E@twistedmatrix.com>

On Monday, May 12, 2003, at 02:26 AM, Matthias Urlichs wrote:

> Some browsers, including wget, don't like _at_all_ when you have a 
> cycle
> in your redirections, even though they should notice that they now 
> have a
> cookie while formerly they didn't.

The other features of your suggestions still merit some discussion, 
however, this particular issue is fixed in CVS by adding the 
?__session_just_started__=1 tag to the URL in the final redirect.  I 
tested it with wget, and it works.




From justinjohnson at fastmail.fm  Fri May 16 19:45:12 2003
From: justinjohnson at fastmail.fm (Justin Johnson)
Date: Fri, 16 May 2003 17:45:12 -0600
Subject: [Twisted-Python] twisted.python.usage.Options Questions
In-Reply-To: <20030516205245.GA17836@meson.dyndns.org>
References: <1053075744.3183.1278.camel@biproc> <45880.217.14.214.4.1053076690.squirrel@services.mi2.hr> <1053077737.3183.1282.camel@biproc> <20030516130547.0611A33135@www.fastmail.fm> <20030516181453.GA17428@meson.dyndns.org> <20030516184135.D19DC3593D@www.fastmail.fm> <20030516205245.GA17836@meson.dyndns.org>
Message-ID: <20030516234512.8234B2BE4B@www.fastmail.fm>

> > I was thinking it would make sense to grab the doc from the class that
> > handles the options for the particular subcommand, since it is the only
> > class/function that we already know the name of and that is already
> > associated with the subcommand.
> > [snip]
> >
> > Does that make sense?  Is that something you can do, or should I get
> > familiar with the code and submit a patch?
> > Thanks for your other suggestions as well.
> 
>   This is just what I was thinking.  If the change to make was obvious to
> me, I'd do it, but after a quick look I find that I don't entirely
> remember
> how this code works.  Could you come up with a patch for this?

Yeah, not till next week though.  I think __str__ needs to change.

    443         if not (getattr(self, "longdesc", None) is None):
    444             longdesc = self.longdesc
    445         else:
    446             import __main__
    447             if getattr(__main__, '__doc__', None):
    448                 longdesc = __main__.__doc__
    449             else:
    450                 longdesc = ''

Probably needs to change to check self.subCommands[2].__doc__ if it
exists, or something like that.  I'll take a look next week.

-Justin



From cce at clarkevans.com  Fri May 16 22:27:08 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Sat, 17 May 2003 02:27:08 +0000
Subject: [Twisted-Python] database access via cred and ssl encryption
In-Reply-To: <3EC557AC.1010302@rclooke.com>
References: <1053075744.3183.1278.camel@biproc> <45880.217.14.214.4.1053076690.squirrel@services.mi2.hr> <1053077737.3183.1282.camel@biproc> <20030516130547.0611A33135@www.fastmail.fm> <20030516181453.GA17428@meson.dyndns.org> <20030516184135.D19DC3593D@www.fastmail.fm> <20030516205245.GA17836@meson.dyndns.org> <3EC557AC.1010302@rclooke.com>
Message-ID: <20030517022708.GA27129@doublegemini.com>

Joe,

My requirement was to have a server authenticate via a client
via a server certificate known by the client.   To implement
this, I had to patch the internet/ssl.py file; and to make 
the 'fetch' aspect easy, I had a small change to web/client.py
As far as I know, these patches have not been applied; however,
you may find them useful...

Clark
-------------- next part --------------
39c39
< from OpenSSL import SSL
---
> from OpenSSL import SSL, crypto
57a58,60
> def dumpCertificate(cert, filetype = crypto.FILETYPE_PEM ):
>     ''' a helper to dump an incoming cert as a PEM '''
>     return crypto.dump_certificate(filetype, cert)
62,63c65,67
<                  sslmethod=SSL.SSLv23_METHOD):
<         self.privateKeyFileName = privateKeyFileName
---
>                  sslmethod=SSL.SSLv23_METHOD, verifyCallback = None):
>         self.verifyCallback      = (verifyCallback, )      
>         self.privateKeyFileName  = privateKeyFileName
67a72,77
>                         
>     def verifyCertificate(self, conn, cert, errno, depth, retcode):
>         cb = self.verifyCallback[0]
>         if cb: return cb(cert)
>         return 1
> 
71a82,83
>         if self.verifyCallback[0]:
>             ctx.set_verify(SSL.VERIFY_PEER, self.verifyCertificate) 
-------------- next part --------------
--- client.py.orig	Tue Mar 25 18:10:28 2003
+++ client.py	Tue Mar 25 18:55:08 2003
@@ -63,7 +63,8 @@
         l = self.headers.get('location')
         if not l:
             self.handleStatusDefault()
-        host, port, url = _parse(l[0])
+        https, host, port, url = _parse(l[0])
+        assert not https, "https redirects not implemented yet"
         self.factory.host, self.factory.url = host, url
         reactor.connectTCP(host, port, self.factory)
         self.quietLoss = 1
@@ -105,7 +106,9 @@
 
     protocol = HTTPPageGetter
 
-    def __init__(self, host, url, method='GET', postdata=None, headers=None, agent="Twisted PageGetter"):
+    def __init__(self, host, url, method='GET', postdata=None, 
+                 headers=None, agent=None):
+        if agent is None: agent = "Twisted PageGetter"
         if headers is not None:
             self.headers = headers
         if postdata is not None:
@@ -141,8 +144,10 @@
     protocol = HTTPPageDownloader
     value = None
 
-    def __init__(self, host, url, fileName, method='GET', postdata=None, headers=None, agent="Twisted client"):
-        HTTPClientFactory.__init__(self, host, url, method=method, postdata=postdata, headers=headers, agent=agent)
+    def __init__(self, host, url, fileName, method='GET', postdata=None, 
+                 headers=None, agent = None):
+        HTTPClientFactory.__init__(self, host, url, method, 
+                                   postdata, headers, agent)
         self.fileName = fileName
         self.deferred = defer.Deferred()
         self.waiting = 1
@@ -166,26 +171,59 @@
 def _parse(url):
     parsed = urlparse.urlparse(url)
     url = urlparse.urlunparse(('','')+parsed[2:])
-    host, port = parsed[1], 80
+    host = parsed[1]
+    if 'https' == parsed[0]:
+        https, port = 1, 443
+    else:
+        https, port = 0, 80
     if ':' in host:
         host, port = host.split(':')
         port = int(port)
-    return host, port, url
+    return https, host, port, url
 
-def getPage(url, *args, **kwargs):
+def getPage(url, method='GET', postdata=None, headers=None, agent = None):
     '''download a web page
 
     Download a page. Return a deferred, which will
     callback with a page or errback with a description
     of the error.
     '''
-    host, port, url = _parse(url)
-    factory = HTTPClientFactory(host, url, *args, **kwargs)
+    https, host, port, path = _parse(url)
+    if https: return getSecurePage(url, method, postdata, headers, agent)
+    factory = HTTPClientFactory(host, path, method, postdata, headers, agent)
     reactor.connectTCP(host, port, factory)
     return factory.deferred
 
+try:
+    from twisted.internet import ssl
+    def getSecurePage(url, method='GET', postdata=None, headers=None, 
+                      agent = None,
+                      privateKeyFileName = None, certificateFileName = None,
+                      sslmethod=ssl.SSL.SSLv23_METHOD, verifyCallback = None, 
+                      serverCertificateFileName = None):
+        """ download a secure page """
+        https, host, port, path = _parse(url)
+        if serverCertificateFileName:
+            cert = file(serverCertificateFileName).read()
+            verifyCallback = lambda rhs: ssl.dumpCertificate(cert) == rhs
+        if verifyCallback or certificateFileName or privateKeyFileName:
+            context = ssl.DefaultOpenSSLContextFactory(
+                          privateKeyFileName, certificateFileName,
+                          sslmethod, verifyCallback)
+            context.isClient = 1
+        else:
+            context = ssl.ClientContextFactory()
+        factory = HTTPClientFactory(host, path, method, postdata, headers)
+        reactor.connectSSL(host, port, factory, context)
+        return factory.deferred
+except:
+    def getSecurePage(*args,**kwargs):
+        raise Exception("ssl not available")
+
 def downloadPage(url, file, *args, **kwargs):
-    host, port, url = _parse(url)
-    factory = HTTPDownloader(host, url, file, *args, **kwargs)
+    https, host, port, path = _parse(url)
+    assert not https, "https is not yet implemented here"
+    factory = HTTPDownloader(host, path, file, *args, **kwargs)
     reactor.connectTCP(host, port, factory)
     return factory.deferred
+

From Matthew at walkerwireless.co.nz  Thu May 15 18:13:52 2003
From: Matthew at walkerwireless.co.nz (matiu)
Date: Fri, 16 May 2003 10:13:52 +1200
Subject: [Twisted-Python] protocols.smtp patch
Message-ID: <005201c31b2f$44686110$0201a8c0@JONAH>

protocols.smtp client creates a temp file for every email it sends on my windows box. Apply this patch to stop that.

Matthew Sherborne
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20030516/ada42790/attachment.htm 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: twisted.protocols.smtp.patch
Type: application/octet-stream
Size: 662 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030516/ada42790/attachment.obj 

From wari at wari.per.sg  Fri May 16 10:50:40 2003
From: wari at wari.per.sg (Wari Wahab)
Date: Fri, 16 May 2003 22:50:40 +0800
Subject: [Twisted-Python] Named pipes
Message-ID: <3EC4FAC0.6040105@wari.per.sg>

Hi, is there a way to get twisted to listen to a named pipe like it's a 
TCP connection or something? How would I go about it?

What I wanted goes like this, there's a named piped, and syslog or other 
programs can send one line alerts (or multiline as well), and my app is 
supposed to do something with this data while attending to other stuff 
as well. We have a perl program that does this using select(), and I bet 
this can be done with twisted. But I don't see a named pipe protocol in 
twisted. I'm sure there's a way.

-- 
Regards: Wari Wahab
RoughingIT - http://roughingit.subtlehints.net
PyBlosxom  - http://roughingit.subtlehints.net/pyblosxom




From joe at overdrivepc.com  Sat May 17 00:08:33 2003
From: joe at overdrivepc.com (Joe Brown)
Date: Sat, 17 May 2003 00:08:33 -0400
Subject: [Twisted-Python] database access via cred and ssl encryption
In-Reply-To: <20030517022708.GA27129@doublegemini.com>
References: <1053075744.3183.1278.camel@biproc> <45880.217.14.214.4.1053076690.squirrel@services.mi2.hr> <1053077737.3183.1282.camel@biproc> <20030516130547.0611A33135@www.fastmail.fm> <20030516181453.GA17428@meson.dyndns.org> <20030516184135.D19DC3593D@www.fastmail.fm> <20030516205245.GA17836@meson.dyndns.org> <3EC557AC.1010302@rclooke.com> <20030517022708.GA27129@doublegemini.com>
Message-ID: <3EC5B5C1.2000105@overdrivepc.com>

Clark,

Thanks for the patch.  This will likely be useful for me in the future, 
when I tackle the web aspect. 

At present I'm concerned with encrypting database communications via 
twisted.  My interest is writing a data entry application using wxPython 
and integrating database connunications via twisted for secure 
communication.

-Joe

Clark C. Evans wrote:

>Joe,
>
>My requirement was to have a server authenticate via a client
>via a server certificate known by the client.   To implement
>this, I had to patch the internet/ssl.py file; and to make 
>the 'fetch' aspect easy, I had a small change to web/client.py
>As far as I know, these patches have not been applied; however,
>you may find them useful...
>
>Clark
>  
>





From wari at home.wari.org  Sat May 17 00:45:45 2003
From: wari at home.wari.org (Wari Wahab)
Date: Sat, 17 May 2003 12:45:45 +0800
Subject: [Twisted-Python] Named Pipes
In-Reply-To: <20030516173638.28603.qmail@green.zadka.com>
References: <3EC5113C.6070703@home.wari.org> <20030516173638.28603.qmail@green.zadka.com>
Message-ID: <3EC5BE79.2030207@home.wari.org>

Moshe Zadka wrote:
>>Hi, is there a way to get twisted to listen to a named pipe like it's a 
>>TCP connection or something? How would I go about it?
> It's fairly easy, and probably should be done in Twisted at some point.

Ah, I got my own based on stdio.StandardIO and that does not work the 
way I want, this way seems better :)

> from twisted.internet import abstract, fdesc
> class SelectableFile(abstract.FileDescriptor):
>     def __init__(self, fp, protocol):
>         self.fp = fp
>         fdesc.setNonBlocking(fp)
>         self.protocol = protocol
>         self.protocol.makeConnection(self)
>         self.fileno = self.fp.fileno
>     def doRead(self):
>         buf = self.fp.read(4096)

I had to do this on a try block:
try:
     buf = self.fp.read(4096)
except IOError:
     buf = None
>         if buf:
>             self.protocol.dataReceived(buf)
>         else:
>             self.protocol.connectionLost()
>     def write(self, data):
>         pass # what can we do with the data?
>     def loseConnection(self):
>         self.fp.close()

Wait, how did you guys make it so easy? :) Anyway, I find that 
loseConnection is never called (when I restart syslog, or when I deleted 
the named pipe), this thing goes on like a battery, of course the effect 
of deleting the file and recreating it does not get the communications 
working anymore because of inode/filepointer diffences.

Thanks for pointing this one out to me.

-- 
Regards: Wari Wahab
RoughingIT - http://roughingit.subtlehints.net
PyBlosxom  - http://roughingit.subtlehints.net/pyblosxom




From jml at ids.org.au  Sat May 17 17:10:12 2003
From: jml at ids.org.au (jml at ids.org.au)
Date: Sun, 18 May 2003 07:10:12 +1000
Subject: [Twisted-Python] [PATCH] remove and index for world's StorableList
Message-ID: <20030517211012.GA17678@mumak.net>


Hi guys,

I need these methods. They're untested but they look right-ish.

cheers,
jml


Index: twisted/world/compound.py
===================================================================
RCS file: /cvs/Twisted/twisted/world/compound.py,v
retrieving revision 1.6
diff -u -r1.6 compound.py
--- twisted/world/compound.py   16 May 2003 05:00:28 -0000      1.6
+++ twisted/world/compound.py   17 May 2003 09:47:44 -0000
@@ -227,6 +227,16 @@
         l.sort()
         self[:] = l
  
+    def index(self, x):
+        for i in range(len(self)):
+            if x == self[i]:
+                return i
+        raise ValueError, "StorableList.index(x): x not in list"
+
+    def remove(self, x):
+        del self[self.index(x)]
+
+
 class _Nothing:
     """
     this can stop torg
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030518/97a27df8/attachment.pgp 

From glyph at twistedmatrix.com  Sat May 17 14:44:03 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 17 May 2003 13:44:03 -0500
Subject: [Twisted-Python] [PATCH] remove and index for world's StorableList
In-Reply-To: <20030517211012.GA17678@mumak.net>
Message-ID: <87E64BF4-8897-11D7-A5D5-000393C9700E@twistedmatrix.com>

On Saturday, May 17, 2003, at 04:10 PM, jml at ids.org.au wrote:

> I need these methods. They're untested but they look right-ish.

They look right to me - please add a test in test_world...testListOf 
(it should be easy enough)




From bob at redivi.com  Sat May 17 15:21:12 2003
From: bob at redivi.com (Bob Ippolito)
Date: Sat, 17 May 2003 15:21:12 -0400
Subject: [Twisted-Python] [PATCH] remove and index for world's StorableList
In-Reply-To: <87E64BF4-8897-11D7-A5D5-000393C9700E@twistedmatrix.com>
Message-ID: <B8C3E578-889C-11D7-A25F-000A95686CD8@redivi.com>

On Saturday, May 17, 2003, at 14:44 America/New_York, Glyph Lefkowitz 
wrote:

>
> On Saturday, May 17, 2003, at 04:10 PM, jml at ids.org.au wrote:
>
>> I need these methods. They're untested but they look right-ish.
>
> They look right to me - please add a test in test_world...testListOf 
> (it should be easy enough)
>

except for the fact that index uses range and not xrange, looks good to 
me as well.

-bob




From tv at twistedmatrix.com  Sun May 18 15:36:57 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Sun, 18 May 2003 22:36:57 +0300
Subject: [Twisted-Python] web brokage
Message-ID: <20030518193608.GA29330@tao.tv.debian.net>

<Tv> tm.com/documents/howto/ has "Form in Depth" and "Guard in Depth" repeated.
<Tv> And the two lore docs have the same link text.
<liiwi>  |mail webmonkey at tm.com
<Tv> Is that a real address?
<liiwi> try :)

	I didn't.

-- 
:(){ :|:&};:



From Matthew at walkerwireless.co.nz  Sun May 18 17:52:09 2003
From: Matthew at walkerwireless.co.nz (matiu)
Date: Mon, 19 May 2003 09:52:09 +1200
Subject: [Twisted-Python] protocols.smtp patch
References: <005201c31b2f$44686110$0201a8c0@JONAH>
Message-ID: <002b01c31d87$bb8f7f80$0201a8c0@JONAH>

Before anyone else yells out, this patch only kill the temp file if sending the message was succesful. I'll submit one later that also closes all temp files on connection lost.

I wonder if the smtp protocol can handle sending multiple messages per single connection. Maybe I'll submit a patch for that too (if it doesn't already).

GBU
Matthew Sherborne
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20030519/8fd7f92a/attachment.htm 

From stuart.hungerford at anu.edu.au  Sun May 18 23:03:09 2003
From: stuart.hungerford at anu.edu.au (Stuart Hungerford)
Date: Mon, 19 May 2003 13:03:09 +1000
Subject: [Twisted-Python] Interrupted system call in Twisted.Web...
Message-ID: <5.2.0.9.0.20030519125830.00bc4e68@anusf.anu.edu.au>

Hi all,

My application is happily using Twisted.Web for a web interface to
a set of resources.  At one point I'm doing an os.popen2() call to
find some details on a particular resource. For now at least using
the popen2() call is the only way I can get this information.

Occasionally I'm getting an "Interrupted system call" Python
exception from this call.  I'd guess that os.popen2() is not
especially friendly to an asynchronous processing model like that
used in Twisted?

Could someone point me toward a more Twisted-aware approach than
using os.popen2()?


Cheers,

Stu

--
:: Stuart Hungerford (stuart.hungerford at anu.edu.au)
:: ANU Internet Futures Group




From radix at twistedmatrix.com  Sun May 18 23:09:20 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 18 May 2003 23:09:20 -0400
Subject: [Twisted-Python] Interrupted system call in Twisted.Web...
In-Reply-To: <5.2.0.9.0.20030519125830.00bc4e68@anusf.anu.edu.au>; from stuart.hungerford@anu.edu.au on Sun, May 18, 2003 at 23:03:09 -0400
References: <5.2.0.9.0.20030519125830.00bc4e68@anusf.anu.edu.au>
Message-ID: <20030519030920.GA641@toshi.anaprd01.md.comcast.net>

On 2003.05.18 23:03, Stuart Hungerford wrote:
> Hi all,
> 
> My application is happily using Twisted.Web for a web interface to
> a set of resources.  At one point I'm doing an os.popen2() call to
> find some details on a particular resource. For now at least using
> the popen2() call is the only way I can get this information.
> 
> Occasionally I'm getting an "Interrupted system call" Python
> exception from this call.  I'd guess that os.popen2() is not
> especially friendly to an asynchronous processing model like that
> used in Twisted?
> 
> Could someone point me toward a more Twisted-aware approach than
> using os.popen2()?

Yeah, you should be using `reactor.spawnProcess'. There's also some
utilities in twisted.internet.util for getting the output of a command
in a Deferred.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From justinjohnson at fastmail.fm  Mon May 19 11:07:15 2003
From: justinjohnson at fastmail.fm (Justin Johnson)
Date: Mon, 19 May 2003 09:07:15 -0600
Subject: [Twisted-Python] twisted.python.usage.Options Questions
In-Reply-To: <20030516205245.GA17836@meson.dyndns.org>
References: <1053075744.3183.1278.camel@biproc> <45880.217.14.214.4.1053076690.squirrel@services.mi2.hr> <1053077737.3183.1282.camel@biproc> <20030516130547.0611A33135@www.fastmail.fm> <20030516181453.GA17428@meson.dyndns.org> <20030516184135.D19DC3593D@www.fastmail.fm> <20030516205245.GA17836@meson.dyndns.org>
Message-ID: <20030519150715.6A5A9347EA@www.fastmail.fm>

Looking at the code I saw that when a subcommand is passed in, the
following code in parseOptions resets the command to be the subcommand
and calls parseOptions again. 


      if len(args) and getattr(self, 'subCommands', None):
            sub, rest = args[0], args[1:]
            for (cmd, short, parser, doc) in self.subCommands:
                if sub == cmd or sub == short:
                    self.subCommand = cmd
                    self.subOptions = parser()
                    self.subOptions.parseOptions(rest)
                    break

Because of this, when we get to __str__, the method that is used to
display the usage info, we don't have anything we can look at to
determine if we should return __main__.__doc__ (if my.py --help was run)
or if we should return self.__doc__ (if my.py subcmd --help was run).

Would it make sense to change the code to always return self.__doc__, and
then the usage doc for the entire script could be stored in the base
Options class __doc__ (the one that defines subCommands)?  The following
patch changes this functionality, but of course it would break current
functionality.

Maybe there's a better way to do this, but I can't think of it.

Thanks.
-Justin


--- usage.py.orig       2003-05-19 08:09:55.000000000 -0500
+++ usage.py    2003-05-19 09:46:01.000000000 -0500
@@ -442,9 +442,8 @@
         if not (getattr(self, "longdesc", None) is None):
             longdesc = self.longdesc
         else:
-            import __main__
-            if getattr(__main__, '__doc__', None):
-                longdesc = __main__.__doc__
+            if getattr(self, '__doc__', None):
+                longdesc = self.__doc__
             else:
                 longdesc = ''




On Fri, 16 May 2003 16:52:45 -0400, "Jp Calderone" <exarkun at intarweb.us>
said:
> On Fri, May 16, 2003 at 12:41:35PM -0600, Justin Johnson wrote:
> > 
> > > > 1)  Passing in the --help option displays usage info the way I'd want it,
> > > > grabbing __doc__ from the top of the file and also displaying info about
> > > > my subcommands.  
> > > > 
> > > > [snip output]
> > > > 
> > > > Is there a way to do that?
> > > 
> > >   Hmm, I don't believe so.  Usage could probably be patched to print
> > > something slightly different for options with subcommands.
> > 
> > I was thinking it would make sense to grab the doc from the class that
> > handles the options for the particular subcommand, since it is the only
> > class/function that we already know the name of and that is already
> > associated with the subcommand.
> > [snip]
> >
> > Does that make sense?  Is that something you can do, or should I get
> > familiar with the code and submit a patch?
> > Thanks for your other suggestions as well.
> 
>   This is just what I was thinking.  If the change to make was obvious to
> me, I'd do it, but after a quick look I find that I don't entirely
> remember
> how this code works.  Could you come up with a patch for this?
> 
>   Jp
> 
> -- 
> "If you find a neighbor in need, you're responsible for serving that
> neighbor in need, you're responsible for loving a neighbor just like
> you'd
> like to love yourself." -- George W. Bush, Sept. 16, 2002
> -- 
>  up 14 days, 18:39, 3 users, load average: 0.02, 0.02, 0.00



From pobrien at orbtech.com  Mon May 19 16:20:25 2003
From: pobrien at orbtech.com (Patrick K. O'Brien)
Date: 19 May 2003 15:20:25 -0500
Subject: [Twisted-Python] Twisted and SQL-Ledger
Message-ID: <m2he7qwuwm.fsf@orbtech.com>

I'm going to be creating a Twisted Woven/Enterprise interface for
SQL-Ledger, an Open Source accounting package that uses PostgreSQL and
a Perl web interface.  Is anyone else interested in such a thing?

SQL-Ledger: http://www.sql-ledger.org/

-- 
Patrick K. O'Brien
Orbtech      http://www.orbtech.com/web/pobrien
-----------------------------------------------
"Your source for Python programming expertise."
-----------------------------------------------




From dave at krondo.com  Mon May 19 16:47:26 2003
From: dave at krondo.com (Dave Peticolas)
Date: 19 May 2003 13:47:26 -0700
Subject: [Twisted-Python] Twisted and SQL-Ledger
In-Reply-To: <m2he7qwuwm.fsf@orbtech.com>
References: <m2he7qwuwm.fsf@orbtech.com>
Message-ID: <1053377246.5002.342.camel@oneiros>

On Mon, 2003-05-19 at 13:20, Patrick K. O'Brien wrote:
> I'm going to be creating a Twisted Woven/Enterprise interface for
> SQL-Ledger, an Open Source accounting package that uses PostgreSQL and
> a Perl web interface.  Is anyone else interested in such a thing?
> 
> SQL-Ledger: http://www.sql-ledger.org/

Absolutely, this would be excellent. Let me know if I can help out.

dave

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030519/ed6f28d9/attachment.pgp 

From pobrien at orbtech.com  Mon May 19 17:05:25 2003
From: pobrien at orbtech.com (Patrick K. O'Brien)
Date: 19 May 2003 16:05:25 -0500
Subject: [Twisted-Python] Twisted.Web and Perl CGIs
Message-ID: <m2addiwstm.fsf@orbtech.com>

I'm having trouble getting a Twisted.Web configured properly to work
with some Perl CGI scripts.  The Perl scripts are part of SQL-Ledger,
and their instructions are for Apache, but I'm hoping to using Twisted
instead of Apache.

To begin, they suggest the following for http.conf, and I'm not sure
how to go about creating the equivalent environment with Twisted:

----
create a file sql-ledger-httpd.conf in the same location
where your httpd.conf is and copy the next section into the file

  Alias /sql-ledger/ /usr/local/sql-ledger/
  <Directory /usr/local/sql-ledger>
    AddHandler cgi-script .pl
    Options ExecCGI Includes FollowSymlinks
  </Directory>

  <Directory /usr/local/sql-ledger/users>
    Order Deny,Allow
    Deny from All
  </Directory>

edit httpd.conf and add

  # SQL-Ledger
  Include <ServerRoot>/sql-ledger-httpd.conf

Note: Replace <ServerRoot> with the server's root directory!

restart your web server.
----

I think the need for FollowSymlinks is what's causing me problems when
I try to create a .rpy file that allows Perl CGIs.  I've tried several
variations of the .rpy file from the Twisted documentation, but can't
get one that works.  Here is where I gave up:

----
from twisted.web import static, twcgi

class PerlScript(twcgi.FilteredScript):
    filter = '/usr/bin/perl' # Points to the perl parser

resource = static.File("/sql-ledger") # Points to the perl website
resource.processors = {".pl": PerlScript} # Files that end with .pl will be
                                          # processed by PerlScript
resource.indexNames = ['admin.pl']
----

I think one of the problems (besides the fact that I don't know
Twisted well enough) is that the admin.pl script is actually a symlink
to login.pl.  Would that be a problem?  I also don't understand what I
should be pointing to as a parameter to static.File().

Any help would be greatly appreciated.  The SQL-Ledger installation
instructions are here, in case that helps:

http://www.sql-ledger.org/cgi-bin/nav.pl?page=source/readme.txt&title=README

Thanks,

Pat

-- 
Patrick K. O'Brien
Orbtech      http://www.orbtech.com/web/pobrien
-----------------------------------------------
"Your source for Python programming expertise."
-----------------------------------------------




From pobrien at orbtech.com  Mon May 19 17:24:48 2003
From: pobrien at orbtech.com (Patrick K. O'Brien)
Date: 19 May 2003 16:24:48 -0500
Subject: [Twisted-Python] Twisted and SQL-Ledger
In-Reply-To: <1053377246.5002.342.camel@oneiros>
References: <m2he7qwuwm.fsf@orbtech.com> <1053377246.5002.342.camel@oneiros>
Message-ID: <m2r86uvdcv.fsf@orbtech.com>

Dave Peticolas <dave at krondo.com> writes:

> On Mon, 2003-05-19 at 13:20, Patrick K. O'Brien wrote:
> > I'm going to be creating a Twisted Woven/Enterprise interface for
> > SQL-Ledger, an Open Source accounting package that uses PostgreSQL and
> > a Perl web interface.  Is anyone else interested in such a thing?
> > 
> > SQL-Ledger: http://www.sql-ledger.org/
> 
> Absolutely, this would be excellent. Let me know if I can help out.

Do it for me so I don't have to.  ;-)

On a more serious note, do you use SQL-Ledger?  Done much with Woven?
Can you help me figure out how to get Twisted Web to serve up the
SQL-Ledger Perl scripts as a starting point for converting things?
I'm trying to avoid having to install Apache.

-- 
Patrick K. O'Brien
Orbtech      http://www.orbtech.com/web/pobrien
-----------------------------------------------
"Your source for Python programming expertise."
-----------------------------------------------




From twisted at eholm.com  Mon May 19 17:27:19 2003
From: twisted at eholm.com (Eric Holm)
Date: Mon, 19 May 2003 14:27:19 -0700
Subject: [Twisted-Python] Woven and non-breaking spaces
Message-ID: <ubrxyzky0.fsf@eholm.com>

Is there any way to dynamically insert a non-breaking space 
on a Woven page?  It looks to me like microdom blindly 
replaces "&" with "&amp", and I couldn't find a way to 
escape the "&" in "&nbsp;", but I could (easily) have 
missed it.  Here's an example of what I'm trying to do:

from twisted.web.woven import page

theModel = { "someData": "Before &nbsp;&nbsp;&nbsp; After" }
theHtml = '<html><span model="someData" view="Text">placeholder</span></html>'

resource = page.Page( theModel, template=theHtml )


I'm using 1.0.5, Python 2.2, on Win2K.

Thanks,


Eric.




From dp at twistedmatrix.com  Mon May 19 18:22:46 2003
From: dp at twistedmatrix.com (Donovan Preston)
Date: Mon, 19 May 2003 15:22:46 -0700
Subject: [Twisted-Python] Woven and non-breaking spaces
In-Reply-To: <ubrxyzky0.fsf@eholm.com>
Message-ID: <6AD546BC-8A48-11D7-BF67-00039376B1AE@twistedmatrix.com>

On Monday, May 19, 2003, at 02:27 PM, Eric Holm wrote:

> Is there any way to dynamically insert a non-breaking space
> on a Woven page?  It looks to me like microdom blindly
> replaces "&" with "&amp", and I couldn't find a way to
> escape the "&" in "&nbsp;", but I could (easily) have
> missed it.  Here's an example of what I'm trying to do:
>
> from twisted.web.woven import page
>
> theModel = { "someData": "Before &nbsp;&nbsp;&nbsp; After" }
> theHtml = '<html><span model="someData" 
> view="Text">placeholder</span></html>'

Try view="RawText" instead of "Text"...

>
> resource = page.Page( theModel, template=theHtml )
>
>
> I'm using 1.0.5, Python 2.2, on Win2K.
>
> Thanks,
>
>
> Eric.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From dave at krondo.com  Mon May 19 19:03:38 2003
From: dave at krondo.com (Dave Peticolas)
Date: 19 May 2003 16:03:38 -0700
Subject: [Twisted-Python] Twisted and SQL-Ledger
In-Reply-To: <m2r86uvdcv.fsf@orbtech.com>
References: <m2he7qwuwm.fsf@orbtech.com> <1053377246.5002.342.camel@oneiros>
	 <m2r86uvdcv.fsf@orbtech.com>
Message-ID: <1053385418.5002.385.camel@oneiros>

On Mon, 2003-05-19 at 14:24, Patrick K. O'Brien wrote:
> On a more serious note, do you use SQL-Ledger?  Done much with Woven?
> Can you help me figure out how to get Twisted Web to serve up the
> SQL-Ledger Perl scripts as a starting point for converting things?
> I'm trying to avoid having to install Apache.

I've only played with SQL-Ledger, and I don't know Woven, but I need
to learn it. I have done quite a bit with twisted.enterprise.

If I get some time, I'll give the rpy you posted a spin and see if I
can get it working.

dave

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030519/ceb5d62c/attachment.pgp 

From twisted at eholm.com  Mon May 19 21:02:08 2003
From: twisted at eholm.com (Eric Holm)
Date: 19 May 2003 18:02:08 -0700
Subject: [Twisted-Python] Woven and non-breaking spaces
In-Reply-To: <6AD546BC-8A48-11D7-BF67-00039376B1AE@twistedmatrix.com>
References: <6AD546BC-8A48-11D7-BF67-00039376B1AE@twistedmatrix.com>
Message-ID: <uhe7q77n3.fsf@eholm.com>

>> theModel = { "someData": "Before &nbsp;&nbsp;&nbsp; After" }
>> theHtml = '<html><span model="someData"
>> view="Text">placeholder</span></html>'
> 
> Try view="RawText" instead of "Text"...
> 
That works great for the example I gave, but...
looks like I over-simplified my example - sorry 
'bout that.  What I'm *really* after is a way 
to pass &nbsp; through any widget, or at least 
through a link widget.  Something like &&nbsp; 
or \&nbsp; or somesuch.

I'm generating a table containing text and links, 
and the table looks crappy (border/padding-wise) 
if there are empty cells.  If I could pass 
&nbsp; through the model, the table would look 
okay.

Thanks,


Eric.




From stuart.hungerford at anu.edu.au  Tue May 20 02:07:43 2003
From: stuart.hungerford at anu.edu.au (Stuart Hungerford)
Date: Tue, 20 May 2003 16:07:43 +1000
Subject: [Twisted-Python] Need advice on changing blocking calls to be Twisted-aware...
Message-ID: <5.2.0.9.0.20030520155728.00b840a0@anusf.anu.edu.au>

Hi all,

I'm running a web application which makes use of the excellent
Twisted.Web resource framework with customized .getChild() and
.render() calls.

In one of the resource .render() methods I've reached a point
where the method needs some information on from the system via
an os.popen2() call. This information is needed to be turned
into HTML, and the HTML generation can't proceed without it.

What I'm effectively doing in the render() call is:

         def render(...)
             ...generate some HTML
             do blocking system call
             ...generate some more HTML

Which I understand is a no-no in the reactor and callback
based Twisted framework. I believe that the Twisted way to do
this is with a reactor.spawnProcess() call which in turn
returns a Deferred object.  Or maybe I should be using
threads instead?

Can someone point me to some example code where a
blocking-system-call-and-it's-results-needed-here pattern
is expressed in the spawnProcess/Deferred/callback world
of Twisted?



Cheers,

Stu

--
:: Stuart Hungerford (stuart.hungerford at anu.edu.au)
:: ANU Internet Futures Group




From andrew-twisted at puzzling.org  Tue May 20 02:26:49 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 20 May 2003 16:26:49 +1000
Subject: [Twisted-Python] Need advice on changing blocking calls to be Twisted-aware...
In-Reply-To: <5.2.0.9.0.20030520155728.00b840a0@anusf.anu.edu.au>
References: <5.2.0.9.0.20030520155728.00b840a0@anusf.anu.edu.au>
Message-ID: <20030520062649.GC32722@frobozz>

On Tue, May 20, 2003 at 04:07:43PM +1000, Stuart Hungerford wrote:
> 
> What I'm effectively doing in the render() call is:
> 
>         def render(...)
>             ...generate some HTML
>             do blocking system call
>             ...generate some more HTML
> 
> Which I understand is a no-no in the reactor and callback
> based Twisted framework. I believe that the Twisted way to do

Correct.

> this is with a reactor.spawnProcess() call which in turn
> returns a Deferred object.  Or maybe I should be using
> threads instead?

Threads are unnecessary here.

> Can someone point me to some example code where a
> blocking-system-call-and-it's-results-needed-here pattern
> is expressed in the spawnProcess/Deferred/callback world
> of Twisted?

Use twisted.internet.utils.getProcessOutput, which returns a Deferred.
Your code should something like:

    def render(...):
        request.write('some html')
        d = getProcessOutput('random program')
        d.addCallback(self.renderProcessOutput, request)
        d.addErrback(self.renderError, request)
        d.addCallback(self.finishPage, request)
        return NOT_DONE_YET

    def renderProcessOutput(self, output, request):
        request.write(output)

    def renderError(self, failure, request):
        request.write('it broke!')
    
    def finishPage(self, _, request):
        request.write('</html>')
        request.finish()

This is obviously very rough, but hopefully it gives you the right idea.

-Andrew.




From m at moshez.org  Tue May 20 02:56:45 2003
From: m at moshez.org (Moshe Zadka)
Date: 20 May 2003 06:56:45 -0000
Subject: [Twisted-Python] Need advice on changing blocking calls to be Twisted-aware...
In-Reply-To: <5.2.0.9.0.20030520155728.00b840a0@anusf.anu.edu.au>
References: <5.2.0.9.0.20030520155728.00b840a0@anusf.anu.edu.au>
Message-ID: <20030520065645.20602.qmail@green.zadka.com>

On Tue, 20 May 2003, Stuart Hungerford <stuart.hungerford at anu.edu.au> wrote:

> Can someone point me to some example code where a
> blocking-system-call-and-it's-results-needed-here pattern
> is expressed in the spawnProcess/Deferred/callback world
> of Twisted?

I've just checked in to CVS doc/examples/fortune.rpy.py, which runs
fortune and gives the output of it.

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From Matthew at walkerwireless.co.nz  Mon May 19 21:32:51 2003
From: Matthew at walkerwireless.co.nz (matiu)
Date: Tue, 20 May 2003 13:32:51 +1200
Subject: [Twisted-Python] Dumb Question (Please don't eat me)
References: <6AD546BC-8A48-11D7-BF67-00039376B1AE@twistedmatrix.com> <uhe7q77n3.fsf@eholm.com>
Message-ID: <014301c31e6f$baf46d90$0201a8c0@JONAH>

Hi,

Why does one have to relinquish copyright when submitting patches?

What's to stop the project leader re-releasing under a closed lisence, or
selling that right to a company behind the scenes?

Regards
Matthew Sherborne




From fog at initd.org  Tue May 20 05:37:37 2003
From: fog at initd.org (Federico Di Gregorio)
Date: 20 May 2003 11:37:37 +0200
Subject: [Twisted-Python] Dumb Question (Please don't eat me)
In-Reply-To: <014301c31e6f$baf46d90$0201a8c0@JONAH>
References: <6AD546BC-8A48-11D7-BF67-00039376B1AE@twistedmatrix.com>
	 <uhe7q77n3.fsf@eholm.com>  <014301c31e6f$baf46d90$0201a8c0@JONAH>
Message-ID: <1053423457.1021.10.camel@momo.initd.org>

Il mar, 2003-05-20 alle 03:32, matiu ha scritto:
> Hi,
> 
> Why does one have to relinquish copyright when submitting patches?
> 
> What's to stop the project leader re-releasing under a closed lisence, or
> selling that right to a company behind the scenes?

because haveing 200 copyright holders makes things unmaintenable.
releasing the copyrigh on small patches is the usual behaviour. and if
the project leader re-release under a closed license, too bad, we still
have the sources under the old LGPL.

usually you get your copyright in a free project only if you contribute
a large chunk of the code. 

-- 
Federico Di Gregorio
Debian GNU/Linux Developer                                fog at debian.org
INIT.D Developer                                           fog at initd.org
                   Datemi uno spigolo. Che lo arrotondo tutto. -- <dani>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: Questa parte del messaggio =?ISO-8859-1?Q?=E8?= firmata
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030520/fdec8a25/attachment.pgp 

From glyph at twistedmatrix.com  Tue May 20 06:07:22 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 20 May 2003 05:07:22 -0500
Subject: [Twisted-Python] Dumb Question (Please don't eat me)
In-Reply-To: <014301c31e6f$baf46d90$0201a8c0@JONAH>
Message-ID: <D93259CB-8AAA-11D7-A5D5-000393C9700E@twistedmatrix.com>

On Monday, May 19, 2003, at 08:32 PM, matiu wrote:

> Why does one have to relinquish copyright when submitting patches?

Because I'm an evil bastard.

> What's to stop the project leader re-releasing under a closed lisence, 
> or selling that right to a company behind the scenes?

Nothing - and in fact, I have done this and will continue to do it in 
the future.

However, there is really nothing for you to worry about here.  As 
frederico said, "if the project leader re-release under a closed 
license, too bad, we still have the sources under the old LGPL."

This should really be a FAQ, but I can't find a good explanation of 
this online wit a few minutes work, so I'll just re-explain.

I often work in the games industry, which is a sufficiently strange 
place to most of us free-software types that you would probably think 
it looks like an alien planet.  At the time I started writing Twisted, 
I was disappointed with the paucity of available frameworks to do 
certain things that I wanted to do in the professional environment I 
was working in - massively multiplayer games.  Creating a GPL framework 
was therefore out of the question, because those are rejected 
out-of-hand by the corporate flunkies who control the money in most 
places commercial software (and especially games) get produced.  I 
seriously wanted to get my boss to use the results of my spare-time 
work, once I demonstrated that my approach was viable.  (I _still_ want 
to sell the framework to that boss, actually, and he works somewhere 
similar now.)

At this point in the narrative, someone will predictably say, "Why 
didn't you just make it BSD/Python/MIT/X11 licensed, you commie 
RMS-worshipping tree-hugging commie!"  Things are, as usual, a bit more 
complicated than that.  Making the software licensed that permissively 
would just be like tossing my time into a black hole: people might use 
it, they might not use it, and I would never know, because that variety 
of licensing requires no understanding of the process that produces the 
software.

I didn't want to place any serious restrictions on the use of this 
software, BUT, I wanted to make sure that anyone using it understood 
the mores and culture of the community that created it before they 
could use it in an environment potentially hostile to that community.  
I wanted to foster communication and understanding.  (I think that this 
has actually worked, in some small measure, in the places I have been 
able to introduce Twisted.)

So, anyone with a clear understanding of the open source community and 
the technology at hand should be able to figure out that LGPL licensing 
is merely a ruse - Python's extremely flexible nature makes LGPL 
essentially the same as BSD-licensed software.  Thankfully, interests 
with a less clear understanding of the community, like game development 
companies, are afraid of the letters "GPL".  They raise a specter of 
fear, uncertainty, and doubt.  This fear can be used as a foothold to 
understanding and better mutual cooperation as it is allayed and 
explained, however.

Still, asking a large company to try to understand how to work with a 
distributed, informal community is a bit too much.  So the solution 
that is proposed is this - I am Twisted's ambassador to this audience.  
I don't pretend to understand the psychology of executives terribly 
well, but I do know that they prefer to deal with individuals who have 
some sort of decision-making power.  By requiring copyright assignment, 
I have the power to make the decision to give them a slightly less 
restrictive licensing agreement than what the general public gets.

There is almost no money in this, but it does afford me an important 
opportunity: I get to sit down in a room (usually, figuratively 
speaking) with the executive that is making the decision, and explain 
to them how the community works, what they can do about support and 
maintenance, and who they can contract with in order to make sure that 
it doesn't go away.

There are other benefits - with my name plastered all over the 
codebase, and no stated path back to the original authors, any 
liability claims would have to be leveled against me directly, and not 
against the community at large.  By no means would I welcome sitting in 
a courtroom for months on end, explaining over and over again to a 
judge what "no warranty" means using very long words, but it's better 
that one person be forced to endure that than 50.  (Plus, if a company 
knows that all they can go after are my savings, they're less likely to 
do that than if Twisted were owned by a large corporation or a large 
group of people that could be sued collectively.)

Also, if for some resaon we have to change the license (let's say that 
a court ruling shows the LGPL to be unenforceable or illegal for some 
reason, for example) we don't have to consult 200 people.




From stuart.hungerford at anu.edu.au  Tue May 20 21:18:36 2003
From: stuart.hungerford at anu.edu.au (Stuart Hungerford)
Date: Wed, 21 May 2003 11:18:36 +1000
Subject: [Twisted-Python] Re: Need advice on changing blocking calls to be Twisted-aware...
In-Reply-To: <20030520093701.28739.61022.Mailman@pyramid.twistedmatrix.com>
References: <20030520093701.28739.61022.Mailman@pyramid.twistedmatrix.com>
Message-ID: <20030521011836.GB32653@anu.edu.au>

I wrote:

| Can someone point me to some example code where a
| blocking-system-call-and-it's-results-needed-here pattern
| is expressed in the spawnProcess/Deferred/callback world
| of Twisted?
| 

Very helpful replies:

| 
| Use twisted.internet.utils.getProcessOutput, which returns a Deferred.
| Your code should something like:

   Many thanks Andrew and Moshe for the advice here, much 
   appreciated.  Flushed with success I started to think about
   .render()'ing web pages with not just one blocking system call
   but a number of them.

   Can I register multiple callbacks in the deferred model with
   one per system call?  Or alternatively, can callbacks re-register
   themselves and handle the system calls in a 'chain'?

   
Cheers,

Stu




From andrew-twisted at puzzling.org  Tue May 20 21:37:08 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 21 May 2003 11:37:08 +1000
Subject: [Twisted-Python] Re: Need advice on changing blocking calls to be Twisted-aware...
In-Reply-To: <20030521011836.GB32653@anu.edu.au>
References: <20030520093701.28739.61022.Mailman@pyramid.twistedmatrix.com> <20030521011836.GB32653@anu.edu.au>
Message-ID: <20030521013708.GA3057@frobozz>

On Wed, May 21, 2003 at 11:18:36AM +1000, Stuart Hungerford wrote:
> 
>    Many thanks Andrew and Moshe for the advice here, much 
>    appreciated.  Flushed with success I started to think about
>    .render()'ing web pages with not just one blocking system call
>    but a number of them.
> 
>    Can I register multiple callbacks in the deferred model with
>    one per system call?  Or alternatively, can callbacks re-register
>    themselves and handle the system calls in a 'chain'?

I think you probably should read the Deferred howto; it should answer all
these questions (and more!):
    
    http://twistedmatrix.com/documents/howto/defer

Let us know if you still have some questions that that doesn't answer.

-Andrew.




From twisted at eholm.com  Tue May 20 22:06:37 2003
From: twisted at eholm.com (Eric Holm)
Date: 20 May 2003 19:06:37 -0700
Subject: [Twisted-Python] Woven and non-breaking spaces
In-Reply-To: <uhe7q77n3.fsf@eholm.com>
References: <6AD546BC-8A48-11D7-BF67-00039376B1AE@twistedmatrix.com>
	<uhe7q77n3.fsf@eholm.com>
Message-ID: <uiss5kq8i.fsf@eholm.com>

> >> theModel = { "someData": "Before &nbsp;&nbsp;&nbsp; After" }
> >> theHtml = '<html><span model="someData"
> >> view="Text">placeholder</span></html>'
> > 
> > Try view="RawText" instead of "Text"...
> > 
> That works great for the example I gave, but...
>
Never mind.  This provided an excellent excuse to 
noodle around with widgets, and I ended-up writing 
a couple of simple widgets to do my bidding.

Thanks,


Eric.




From dp at twistedmatrix.com  Tue May 20 22:23:15 2003
From: dp at twistedmatrix.com (Donovan Preston)
Date: Tue, 20 May 2003 19:23:15 -0700
Subject: [Twisted-Python] Woven and non-breaking spaces
In-Reply-To: <uiss5kq8i.fsf@eholm.com>
Message-ID: <2DC156D0-8B33-11D7-97CB-00039376B1AE@twistedmatrix.com>

On Tuesday, May 20, 2003, at 07:06 PM, Eric Holm wrote:

> Never mind.  This provided an excellent excuse to
> noodle around with widgets, and I ended-up writing
> a couple of simple widgets to do my bidding.

That's usually what I end up doing. That is the whole point of woven 
really -- make it really easy for python code to manipulate the 
template, rather than having a bunch of pre-built things you can embed 
in your HTML without writing any Python.

Donovan




From tim_nagels at hotmail.com  Wed May 21 05:35:29 2003
From: tim_nagels at hotmail.com (Tim Nagels)
Date: Wed, 21 May 2003 11:35:29 +0200
Subject: [Twisted-Python] deleting server with coil
Message-ID: <BAY1-F27aBuv9ogry6M0002bd68@hotmail.com>

I'm having some trouble unListening when I use coil

it seems when you start a server using the coilwebinterface,
it starts using listentcp in the same app that is already running..
this makes that bindPorts is not called,
so when you unlisten the userdict doesnt contain the needed port...

I could always add it manually...but that seems a bit stupid..
shouldn't listenTcp automatically add itself to self._listenerDict? what is 
done with bindPorts...

(btw calling bindPorts after you've run app.run() clears self._listenerDict)

-------
Aso

_________________________________________________________________
MSN Search, for relevant search results! http://search.msn.be




From miathan at goliath.darktech.org  Wed May 21 08:22:18 2003
From: miathan at goliath.darktech.org (W.J.)
Date: Wed, 21 May 2003 14:22:18 +0200 (CEST)
Subject: [Twisted-Python] deleting server with coil
In-Reply-To: <20030521113722.32125.54768.Mailman@pyramid.twistedmatrix.com>
Message-ID: <Pine.LNX.4.44.0305211417040.22307-100000@zolder>

> it seems when you start a server using the coilwebinterface,
> it starts using listentcp in the same app that is already running..
> this makes that bindPorts is not called,
> so when you unlisten the userdict doesnt contain the needed port...

I know - A while ago I posted a patch on this list that fixes that problem
in twisted.internet.app, among others.

http://www.twistedmatrix.com/pipermail/twisted-python/2003-May/003945.html

But I never even got a reply to it.

> (btw calling bindPorts after you've run app.run() clears self._listenerDict)

No, that's not the way, bindPorts should only be called once.

Wladimir





From itamar at itamarst.org  Wed May 21 09:43:57 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 21 May 2003 09:43:57 -0400
Subject: [Twisted-Python] deleting server with coil
In-Reply-To: <BAY1-F27aBuv9ogry6M0002bd68@hotmail.com>
References: <BAY1-F27aBuv9ogry6M0002bd68@hotmail.com>
Message-ID: <20030521094357.3e2e85bd.itamar@itamarst.org>

On Wed, 21 May 2003 11:35:29 +0200
"Tim Nagels" <tim_nagels at hotmail.com> wrote:

> I'm having some trouble unListening when I use coil

Coil is not being maintained at the moment, pending a total rewrite.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From itamar at itamarst.org  Wed May 21 09:48:43 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 21 May 2003 09:48:43 -0400
Subject: [Twisted-Python] Suggestion - remove bin/coil in 1.0.6
Message-ID: <20030521094843.7a919775.itamar@itamarst.org>

Anyone disagree?

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From m at moshez.org  Wed May 21 10:10:43 2003
From: m at moshez.org (Moshe Zadka)
Date: 21 May 2003 14:10:43 -0000
Subject: [Twisted-Python] Suggestion - remove bin/coil in 1.0.6
In-Reply-To: <20030521094843.7a919775.itamar@itamarst.org>
References: <20030521094843.7a919775.itamar@itamarst.org>
Message-ID: <20030521141043.24312.qmail@green.zadka.com>

On Wed, 21 May 2003, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:

> Anyone disagree?

I'm for it. But please document it in the ChangeLog.

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From wari at home.wari.org  Wed May 21 11:06:13 2003
From: wari at home.wari.org (Wari Wahab)
Date: Wed, 21 May 2003 23:06:13 +0800
Subject: [Twisted-Python] Authenticated SSL
Message-ID: <3ECB95E5.8040700@home.wari.org>

Hi there, following the echoserver-ssl.py example, I was able to get up 
to speed and basically running my xmlrpc server on SSL. As usual, 
twisted makes it easy. Now my problem becomes this: I need to verify 
that the certificate on the other side (The client) is signed by me (or 
a known CA). How would one go about such task?




From itamar at itamarst.org  Wed May 21 11:25:10 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 21 May 2003 11:25:10 -0400
Subject: [Twisted-Python] Authenticated SSL
In-Reply-To: <3ECB95E5.8040700@home.wari.org>
References: <3ECB95E5.8040700@home.wari.org>
Message-ID: <20030521112510.221e4963.itamar@itamarst.org>

On Wed, 21 May 2003 23:06:13 +0800
Wari Wahab <wari at home.wari.org> wrote:

> Hi there, following the echoserver-ssl.py example, I was able to get
> up to speed and basically running my xmlrpc server on SSL. As usual, 
> twisted makes it easy. Now my problem becomes this: I need to verify 
> that the certificate on the other side (The client) is signed by me
> (or a known CA). How would one go about such task?

1. Read pyOpenSSL documentation. (http://pyopenssl.sf.net)

2. Implement a context factory that does the appropriate setup, based on
docs in (1). (twisted.internet.ssl has some sample context factories).

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From wari at home.wari.org  Wed May 21 11:44:25 2003
From: wari at home.wari.org (Wari Wahab)
Date: Wed, 21 May 2003 23:44:25 +0800
Subject: [Twisted-Python] Authenticated SSL
In-Reply-To: <20030521112510.221e4963.itamar@itamarst.org>
References: <3ECB95E5.8040700@home.wari.org> <20030521112510.221e4963.itamar@itamarst.org>
Message-ID: <3ECB9ED9.90702@home.wari.org>

Itamar Shtull-Trauring wrote:

>1. Read pyOpenSSL documentation. (http://pyopenssl.sf.net)
>2. Implement a context factory that does the appropriate setup, based on
>docs in (1). (twisted.internet.ssl has some sample context factories).
>
Thanks for the heads up, I'll look these up and see if I can get 
anything useful from it.

Am I right to say that if I do not get the cert CA signer to be what I 
wanted, I'd raise an exception instead of returning self._context in 
getContext()?.




From itamar at itamarst.org  Wed May 21 12:09:01 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 21 May 2003 12:09:01 -0400
Subject: [Twisted-Python] Authenticated SSL
In-Reply-To: <3ECB9ED9.90702@home.wari.org>
References: <3ECB95E5.8040700@home.wari.org>
	<20030521112510.221e4963.itamar@itamarst.org>
	<3ECB9ED9.90702@home.wari.org>
Message-ID: <20030521120901.00f895f2.itamar@itamarst.org>

On Wed, 21 May 2003 23:44:25 +0800
Wari Wahab <wari at home.wari.org> wrote:

> Am I right to say that if I do not get the cert CA signer to be what I
> 
> wanted, I'd raise an exception instead of returning self._context in 
> getContext()?.

Hmmm. That's a good point, not sure what'd happen. Probably close the
connection, which is what you want I guess, and pass the exception you
raise to the appropriate callbacks as the failure, so I guess that'd do
the trick. I think Clark Evens posted some relevant code a while back.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From lordvan at lordvan.com  Wed May 21 09:28:23 2003
From: lordvan at lordvan.com (Thomas Raschbacher)
Date: Wed, 21 May 2003 15:28:23 +0200
Subject: [Twisted-Python] Re: Twisted.Web and Perl CGIs
References: <m2addiwstm.fsf@orbtech.com>
Message-ID: <pan.2003.05.21.13.28.22.746009@lordvan.com>

i think u want --ignore-ext right? ;)
On Mon, 19 May 2003 16:05:25 -0500, Patrick K. O'Brien wrote:

> I'm having trouble getting a Twisted.Web configured properly to work
> with some Perl CGI scripts.  The Perl scripts are part of SQL-Ledger,
> and their instructions are for Apache, but I'm hoping to using Twisted
> instead of Apache.
> 
> To begin, they suggest the following for http.conf, and I'm not sure
> how to go about creating the equivalent environment with Twisted:
> 
> ----
> create a file sql-ledger-httpd.conf in the same location
> where your httpd.conf is and copy the next section into the file
> 
>   Alias /sql-ledger/ /usr/local/sql-ledger/
>   <Directory /usr/local/sql-ledger>
>     AddHandler cgi-script .pl
>     Options ExecCGI Includes FollowSymlinks
>   </Directory>
> 
>   <Directory /usr/local/sql-ledger/users>
>     Order Deny,Allow
>     Deny from All
>   </Directory>
> 
> edit httpd.conf and add
> 
>   # SQL-Ledger
>   Include <ServerRoot>/sql-ledger-httpd.conf
> 
> Note: Replace <ServerRoot> with the server's root directory!
> 
> restart your web server.
> ----
> 
> I think the need for FollowSymlinks is what's causing me problems when
> I try to create a .rpy file that allows Perl CGIs.  I've tried several
> variations of the .rpy file from the Twisted documentation, but can't
> get one that works.  Here is where I gave up:
> 
> ----
> from twisted.web import static, twcgi
> 
> class PerlScript(twcgi.FilteredScript):
>     filter = '/usr/bin/perl' # Points to the perl parser
> 
> resource = static.File("/sql-ledger") # Points to the perl website
> resource.processors = {".pl": PerlScript} # Files that end with .pl will be
>                                           # processed by PerlScript
> resource.indexNames = ['admin.pl']
> ----
> 
> I think one of the problems (besides the fact that I don't know
> Twisted well enough) is that the admin.pl script is actually a symlink
> to login.pl.  Would that be a problem?  I also don't understand what I
> should be pointing to as a parameter to static.File().
> 
> Any help would be greatly appreciated.  The SQL-Ledger installation
> instructions are here, in case that helps:
> 
> http://www.sql-ledger.org/cgi-bin/nav.pl?page=source/readme.txt&title=README
> 
> Thanks,
> 
> Pat





From twisted at eholm.com  Wed May 21 21:53:23 2003
From: twisted at eholm.com (Eric Holm)
Date: Wed, 21 May 2003 20:53:23 -0500 (CDT)
Subject: [Twisted-Python] LivePage Hello World
Message-ID: <200305220153.h4M1rNPC009924@mta4.rcsntx.swbell.net>

I'm trying to get a simple LivePage script going, 
and no luck so far.  I started with the example on 
howto/livepage.html, and added enough bits to get 
it to run (the only surprise was that Foo.setUp() 
needs a 3rd, unused argument), and I've attached 
it at the end of this mail.

When I view the source in the browser, there's 
a bunch of Flash stuff at the bottom (so *that's*
how "Javascript opens Socket to server" works...), 
but when fooHappened() runs, I get a

CACHING [<twisted.web.woven.utils.Script instance at 0x00F3F300>]

message.  The corresponding comment in utils.py 
talks about a conduit not being connected yet, 
but I've no idea how to initiate a connection. 
Anybody have any idea what I'm missing?

I'm using 1.0.5, python 2.2, Win2k.

Thanks,


Eric.


live.rpy:
from twisted.web.woven import page, interfaces
from twisted.internet import reactor

class Foo( page.LivePage ):
    template = ('<html><body>'
                'Nothing here!<span view="webConduitGlue" />'
                '</body></html>')
    def setUp(self, request, document):
        currentPage = request.getSession(interfaces.IWovenLivePage)
        print "setUp: ", currentPage
        reactor.callLater( 5, fooHappened, currentPage )

def fooHappened( currentPage ):
    print "Foo!", currentPage
    currentPage.sendScript("alert('hello, world!')")

resource = Foo()





From dp at twistedmatrix.com  Wed May 21 22:50:51 2003
From: dp at twistedmatrix.com (Donovan Preston)
Date: Wed, 21 May 2003 19:50:51 -0700
Subject: [Twisted-Python] LivePage Hello World
In-Reply-To: <200305220153.h4M1rNPC009924@mta4.rcsntx.swbell.net>
Message-ID: <333F9DDC-8C00-11D7-9E76-00039376B1AE@twistedmatrix.com>

On Wednesday, May 21, 2003, at 06:53 PM, Eric Holm wrote:

> I'm trying to get a simple LivePage script going,
> and no luck so far.

Cool! LivePage is not really ready for human consumption yet, but it's 
*really* *really* close.

>   I started with the example on
> howto/livepage.html, and added enough bits to get
> it to run (the only surprise was that Foo.setUp()
> needs a 3rd, unused argument), and I've attached
> it at the end of this mail.
>
> When I view the source in the browser, there's
> a bunch of Flash stuff at the bottom (so *that's*
> how "Javascript opens Socket to server" works...),

LivePage is really two different things: The InputConduit and the 
OutputConduit.

The InputConduit is responsible for shuttling events from the client 
(web browser) to the server (Twisted). The InputConduit is just a 
simple IFrame and some associated javascript which translates from 
JavaScript events placed on a Widget using addEventHandler to a HTTP 
GET request (in the IFrame) with the relevant pieces of information:

1) The name of the client side event ('onclick', 'onchange')
2) The id of the target node ('woven_id_12341234', 'myId')
3) The arguments to pass to the event handler (Usually none.)

When I originally wrote the server-side component that listens for 
events from the InputConduit, I wrote it asynchronously; the HTTP 
Request would generate an HTTP Response immediately (with no 
interesting information in it) and the server-side event handler would 
be fired one reactor iteration later. Which brings me to...

The OutputConduit is responsible for shuttling events from the Server 
(Twisted) to the Client (web browser). When a Web Browser has visited a 
LivePage and created a tree of MVC objects and a DOM tree, LivePage 
stores the root of this (the LivePage instance itself) on the 
server-side session object. Then, at any time, a server-side event may 
cause a Widget to re-render itself and send the updated HTML fragment 
to the browser. The OutputConduit then uses some simple javascript in 
the browser to replace the old node (which it locates by id) with the 
new, updated HTML string.

The OutputConduit is interesting if you have applications where 
server-side events are generated without the user actually interacting 
with the web browser. For example, in the NewReality web client, one 
user may log on using a web browser while another player may telnet 
into the game server. The other player, typing commands into a telnet 
window, will generate events which are not directly initiated by the 
player using the web browser. In this situation, the OutputConduit is 
useful because the server may direct the web browser to update the HTML 
the user is seeing without the user actually doing anything, such as 
refreshing the page.

To get to the point, I realized that if you are interested in using 
LivePage to do normal, DHTML style partial-page refreshes in response 
to user events (mouse clicks, dropdown selections, mouseovers) then the 
OutputConduit is not required at all. Since the user initiated an HTTP 
Request by invoking the client side event handler (onclick for example) 
we can piggyback on the HTTP Response any JavaScript commands we want 
to execute in response to that event. We do this by waiting for the 
event handler to fire, gathering all JavaScript commands which were 
sent to the OutputConduit while we were waiting into a list, and 
rendering them out in a single <script> tag in the HTTP response to the 
event.

This is ultimately where LivePage is going; it will allow LivePage 
penetration into browsers that will not be able to open a persistent 
socket to the server.

But all that has nothing to do with your problem.

> but when fooHappened() runs, I get a
>
> CACHING [<twisted.web.woven.utils.Script instance at 0x00F3F300>]
>
> message.  The corresponding comment in utils.py
> talks about a conduit not being connected yet,
> but I've no idea how to initiate a connection.
> Anybody have any idea what I'm missing?

The example you pasted was an example of what the OutputConduit is 
supposed to let you do. The OutputConduit is implemented using a Flash 
movie that opens a raw socket to the Twisted server (on IE Win; on 
Mozilla the implementation will probably be different; on other 
browsers it will probably use a polling technique to periodically check 
for new content)

The Flash movie needs to talk to the server using a special (extra 
silly) protocol. The magic incantation to get your Twisted server to 
listen on this port and talk this protocol is this:

mktap web --path=/foo/bar --flashconduit=4321

Patches against the documentation in CVS would be gratefully accepted. 
If you'd like to talk more about LivePage and where it's going, you can 
find me on irc pretty regularly as fzZzy.

If enough people keep bugging me about it, I will write another example 
which only uses the InputConduit, which is a technique that has proven 
to be far more reliable and cross-browser in the past month. All of 
this stuff is going to mature really soon, really fast :-)

Donovan




From cliechti at gmx.net  Wed May 21 23:10:27 2003
From: cliechti at gmx.net (Chris Liechti)
Date: Thu, 22 May 2003 05:10:27 +0200
Subject: [Twisted-Python] non blocking wxPython
Message-ID: <3ECC3FA3.10805@gmx.net>

this is an example with wxPython + Twisted.
it does not suffer from the problem of blocked Twisted when wx menus or 
dialogs are open because Twisted is run in a separate thread.

on shutdown, twisted should be stopped first and then the GUI, in case
some twisted callbacks use GUI components (which is the purpose of most 
GUIs, isn't it ;-) thread.join() can be used in wx event handler as it 
produces a deadlock in case a callback is ran that accesses the GUI, 
thus a loop with wxYield() is used.

running Twisted in a separate thread may break some functions, altough i 
had no problems here. an other drawback is that it uses the (evil ;-) 
threads so you get all the problems of threads too, in some cases a 
callFromThread may be required (for wx->twisted calls).

i tested the example on win32, hope it runs as flawlessly on linux too.

chris
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: wxnoblock_thread.py
Url: http://twistedmatrix.com/pipermail/twisted-python/attachments/20030522/f904450c/attachment.txt 

From twisted at eholm.com  Thu May 22 00:29:27 2003
From: twisted at eholm.com (Eric Holm)
Date: 21 May 2003 21:29:27 -0700
Subject: [Twisted-Python] LivePage Hello World
In-Reply-To: <333F9DDC-8C00-11D7-9E76-00039376B1AE@twistedmatrix.com>
References: <333F9DDC-8C00-11D7-9E76-00039376B1AE@twistedmatrix.com>
Message-ID: <ullwz4na0.fsf@eholm.com>

>> I'm trying to get a simple LivePage script going,
>> and no luck so far.
> Cool! LivePage is not really ready for human consumption yet, but...
> 
Well, we guinea pigs aren't really human, so that worked out okay.


> The magic incantation to get your Twisted server to
> listen on this port and talk this protocol is this:
> 
> mktap web --path=/foo/bar --flashconduit=4321
> 
That did it, now I'm one dangerous guinea pig!  At 
this rate, I won't have to write a wxPython/pb 
front-end to my server.


> Patches against the documentation in CVS would be gratefully
> accepted.
> 
I'll give it a shot (it's actually pretty close already, if a 
bit sparse).

Thanks,


Eric.




From dp at twistedmatrix.com  Thu May 22 01:44:37 2003
From: dp at twistedmatrix.com (Donovan Preston)
Date: Wed, 21 May 2003 22:44:37 -0700
Subject: [Twisted-Python] LivePage Hello World
In-Reply-To: <ullwz4na0.fsf@eholm.com>
Message-ID: <79A1C0BA-8C18-11D7-9E76-00039376B1AE@twistedmatrix.com>

On Wednesday, May 21, 2003, at 09:29 PM, Eric Holm wrote:

> That did it, now I'm one dangerous guinea pig!  At
> this rate, I won't have to write a wxPython/pb
> front-end to my server.

Just to give you some more hints, the methods you want to look at to 
make your Woven apps magically delicious are:

Widget.addEventHandler('onclick', self.onClick)
# Add a javascript event handler to this widget which, when the event 
occurs
# in the browser, causes the server side method to be called

Model.notify({'request': request})
# Tell all widgets that rely on this model to re-render themselves with 
the
# latest model data and send the resulting HTML string to the browser,
# which will then replace the old HTML with the new, updated HTML.

Widget.modelChanged({'request': request})
# This is what gets called by Model.notify and actually does the
# rerendering. It then passes the HTML string to the controller, which
# sends it out over the OutputConduit.

# You can call this directly if you really want to, but I encourage you
# to try to use MVC notification

Those three are pretty much all you need to create full on DHTML 
applications using pure, server-side Python.

Donovan




From gerritsen at bigskytel.com  Thu May 22 03:12:06 2003
From: gerritsen at bigskytel.com (Jeff Gerritsen)
Date: Thu, 22 May 2003 01:12:06 -0600
Subject: [Twisted-Python] Installing the windows binary with Python 2.3a...
Message-ID: <000701c32031$744940f0$8c00a8c0@JeffLaptopNew>

Greetings,

I'm a newbie to Twisted.  I've downloaded the windows binary, tried to
install under Python 2.3a and receive the error message "Python version 2.2
required, which was not found in the registry."  What is the work around?

 

Thanks,

 

Jeff Gerritsen

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20030522/00588ee2/attachment.htm 

From glyph at twistedmatrix.com  Thu May 22 04:16:22 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 22 May 2003 04:16:22 -0400
Subject: [Twisted-Python] Installing the windows binary with Python 2.3a...
In-Reply-To: <000701c32031$744940f0$8c00a8c0@JeffLaptopNew>
Message-ID: <AC27D20A-8C2D-11D7-AC3E-000393C9700E@twistedmatrix.com>

On Thursday, May 22, 2003, at 03:12 AM, Jeff Gerritsen wrote:

> I?m a newbie to Twisted.? I?ve downloaded the windows binary, tried to 
> install under Python 2.3a and receive the error message ?Python 
> version 2.2 required, which was not found in the registry.?? What is 
> the work around?

As one might expect, "install python 2.2".

If you want to use it with Python 2.3, you will need to install from 
source rather than the provided win32 executable.  'python setup.py 
bdist_wininst' will create an installer similar to the one we provide, 
assuming you have Visual Studio 6.0 installed.




From wari at home.wari.org  Thu May 22 05:08:04 2003
From: wari at home.wari.org (Wari Wahab)
Date: Thu, 22 May 2003 17:08:04 +0800
Subject: [Twisted-Python] Anomaly found between twisted XML-RPC client and twisted server (Bug?)
Message-ID: <3ECC9374.50500@home.wari.org>

Hi there, I was testing around the XML-RPC support in twisted and found 
the following:
same twisted client and server (one instance) = error.connectionLost
twisted client -> twisted server = error.connectionLost
xmlprclib client -> twisted server = got my results
twisted client -> xmlrpclib client = got my results.

First time round, the twisted xmlrpc client sits together with the 
server in one application, the client calls on a reactor.callLater(). 
This does not work, so I figured I must be doing something wrong. I 
split up the client and the server and I got the same error, split up 
the program network wise, again the same error, on the client, its:
[Failure instance: Traceback: twisted.internet.error.ConnectionLost,]
and on the Server:
2003/05/22 23:30 SGT [HTTPChannel,5,192.168.10.15] Traceback (most 
recent call last):
          File 
"/usr/lib/python2.2/site-packages/twisted/protocols/basic.py", line 173, 
in dataReceived
            self.lineReceived(line)
          File 
"/usr/lib/python2.2/site-packages/twisted/protocols/http.py", line 893, 
in lineReceived
            self.allContentReceived()
          File 
"/usr/lib/python2.2/site-packages/twisted/protocols/http.py", line 932, 
in allContentReceived
            req.requestReceived(command, path, version)
          File 
"/usr/lib/python2.2/site-packages/twisted/protocols/http.py", line 504, 
in requestReceived
            self.process()
        --- <exception caught here> ---
          File "/usr/lib/python2.2/site-packages/twisted/web/server.py", 
line 156, in process
            self.render(resrc)
          File "/usr/lib/python2.2/site-packages/twisted/web/server.py", 
line 162, in render
            body = resrc.render(self)
          File "/usr/lib/python2.2/site-packages/twisted/web/xmlrpc.py", 
line 103, in render
            args, functionPath = xmlrpclib.loads(request.content.read())
          File 
"/var/tmp/python-2.2.2-root/usr/lib/python2.2/xmlrpclib.py", line 805, 
in loads
            p.close()
          File 
"/var/tmp/python-2.2.2-root/usr/lib/python2.2/xmlrpclib.py", line 393, 
in close
            self._parser.Parse("", 1) # end of data
        xml.parsers.expat.ExpatError: no element found: line 1, column 0

Here's what I did in detail:

The server is the exact one found at 
http://twistedmatrix.com/documents/howto/xmlrpc
The client is something like the one I found at the same page as well, 
but this time on an interactive python session.
----------------
Python 2.2.2 (#1, May 19 2003, 14:32:06)
[GCC 2.96 20000731 (Red Hat Linux 7.2 2.96-112.7.2)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
 >>> from twisted.web.xmlrpc import Proxy
 >>> from twisted.internet import reactor
 >>>
 >>> def printValue(value):
...     print repr(value)
...     reactor.stop()
...
 >>> def printError(error):
...     print 'error', error
...     reactor.stop()
...
 >>> p = Proxy('http://192.168.11.1:7080')
 >>> #### Calling the add method with twisted
 >>> p.callRemote('add', 3, 5).addCallbacks(printValue, printError)
<Deferred at 0x83d3f84>
 >>> reactor.run()
error [Failure instance: Traceback: twisted.internet.error.ConnectionLost,
]
 >>> from xmlrpclib import Server
 >>> s=Server('http://192.168.11.1:7080')
 >>> #### Calling the add method with xmlrpclib
 >>> s.add(3,5)
8
 >>> p = Proxy('http://some.web.site/RPC2')
 >>> #### Using proxy again to talk to an xmlrpclib based server (pyblosxom)
 >>> p.callRemote('blogger.getUsersBlogs', '', 'myusername', 
'mypassword').addCallbacks(printValue, printError)
<Deferred at 0x83e8ac4>
 >>> reactor.run()
[{'url': 'http://some.web.site/blog/', 'blogid': '/', 'blogName': '/'}, 
{'url': 'http://some.web.site/blog/GeekyStuff/', 'blogid': 
'/GeekyStuff/', 'blogName': '/GeekyStuff/'}]
 >>>
-----------------
What could be happening here?





From tim_nagels at hotmail.com  Thu May 22 06:24:42 2003
From: tim_nagels at hotmail.com (Tim Nagels)
Date: Thu, 22 May 2003 12:24:42 +0200
Subject: [Twisted-Python] problem remotely calling mehod that returns a Deferred
Message-ID: <BAY1-F152MtjQ4S8Uq500018b96@hotmail.com>

I'm having trouble remotely calling the userWelcome method...

it returns a deferred with some databaseinformation...
when I wanted to test to see how it handles delays...I used 
time.sleep(30)...

then it seems to lose the connection and throws: 
twisted.spread.pb.PBConnectionLost

i've tested it with 15, 10, 5 secs... and when I go below 5 secs it seems to 
work again...(as does removing the sleep line)

Any ideas where the connection could be lost, can't seem to locate it...
tnx

code:

class FtpServFactory(pb.Root, pb.Perspective):

   ....

    def remote_takeInfo(self, info):
        print " got info:", info
        print dir(info)
        print info.name
        print info.welcome
        #pond.countFrogs()
        return "safe and sound" # positive acknowledgement

    ....
    def testcallb(self, resultlist):
        print "executing callback"
        time.sleep(5)				####  if I let it sleep for less then 5 seconds, or 
I just remove the line
        return resultlist[0][0]			####  the value is returned correctly...

    def failtestc(self, resultlist):
        print "failing callback"
        return resultlist

    def perspective_userWelcome(self, user):
        root = self.service.factory.root
        print dir(self)
        self.dbpool = 
adbapi.ConnectionPool("MySQLdb",host="localhost",db="pythonftpserv",port=3306
                                            ,user="root",passwd="")

        self.db    = FtpDatabase(self.dbpool)
        deff = self.db.getDescription("TascAdmin")
        deff.addCallbacks(self.testcallb,self.failtestc)

        return deff

################################################

.....

def main():
    from FtpServer import FtpInfoClient  # so it's not __main__.CopyPond
    inf = FtpInfoClient.CopyInfo()
    inf.initData("Johnny", """/temp/test.tst""", 
"""2002-10-05""","""/temp""","You will find me another ...shrubbery!")

    reactor.callLater(5,reactor.stop)
    sender = Sender(inf)
    deferred = pb.getObjectAt("10.10.0.47", 8800, 50)
    deferred.addCallback(sender.got_obj)

    pb.connect("10.10.0.47", # host name
           8880, # port number
           "guest", # identity name
           "guest", # password
           "FtpServer.ftp", # service name
           "guest", # perspective name (usually same as identity)
           None, # client reference, used to initiate server->client calls
           50 # timeout of 30 seconds before connection gives up
           ).addCallbacks(connected, # what to do when we get connected
                          failure) # and what to do when we can't


    reactor.run()

def connected(perspective):
    deff = 
perspective.callRemote('userWelcome',"TascAdmin").addCallbacks(success, 
failure)
    deff.setTimeout(30)

def fail(des):
    print "failed miserably"

def gotdes(des):
    print "description "+desc

def success(welcome):
    print welcome
    #welcome.addCallbacks(gotdes,fail)
    #reactor.stop()

def failure(error):
    print error
    print dir(error)
    print "Failed to obtain quote.\n"
    #reactor.stop()

if __name__ == '__main__':
    main()


-----------
Aso

_________________________________________________________________





From tim_nagels at hotmail.com  Thu May 22 06:34:28 2003
From: tim_nagels at hotmail.com (Tim Nagels)
Date: Thu, 22 May 2003 12:34:28 +0200
Subject: [Twisted-Python] problem remotely calling mehod that returns a Deferred
Message-ID: <BAY1-F74r0dSHpVyLri00002e3d@hotmail.com>

Answered my own stupid question...
I forgot i automatically closed my reactor after a certain period...
I think I need some sleep(365444564)

---
aso

_________________________________________________________________
Receive your Hotmail & Messenger messages on your mobile phone with MSN 
Mobile http://www.msn.be/gsm/smsservices




From m at moshez.org  Thu May 22 09:19:56 2003
From: m at moshez.org (Moshe Zadka)
Date: 22 May 2003 13:19:56 -0000
Subject: [Twisted-Python] Installing the windows binary with Python 2.3a...
In-Reply-To: <000701c32031$744940f0$8c00a8c0@JeffLaptopNew>
References: <000701c32031$744940f0$8c00a8c0@JeffLaptopNew>
Message-ID: <20030522131956.12439.qmail@green.zadka.com>

On Thu, 22 May 2003, "Jeff Gerritsen" <gerritsen at bigskytel.com> wrote:

> I'm a newbie to Twisted.  I've downloaded the windows binary, tried to
> install under Python 2.3a and receive the error message "Python version 2.2
> required, which was not found in the registry."  What is the work around?

Using released versions of Python, not ones in alpha.
-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From iko at cd.chalmers.se  Thu May 22 10:15:15 2003
From: iko at cd.chalmers.se (Anders Hammarquist)
Date: Thu, 22 May 2003 16:15:15 +0200
Subject: [Twisted-Python] protocols.smtp patch 
In-Reply-To: Message from "matiu" <Matthew@walkerwireless.co.nz> 
   of "Fri, 16 May 2003 10:13:52 +1200." <005201c31b2f$44686110$0201a8c0@JONAH> 
References: <005201c31b2f$44686110$0201a8c0@JONAH> 
Message-ID: <200305221415.h4MEFFJ17572@haddock.cd.chalmers.se>

In a message of Fri, 16 May 2003 10:13:52 +1200, "matiu" writes:
>protocols.smtp client creates a temp file for every email it sends on my
>windows box. Apply this patch to stop that.

Hmm, should we really be closing files in the SMTPClient? I think it
should be enough that the SMTPClient drops any reference it has to
the file when it's done with it (which I see it doesn't do currently,
I'll add that to my patch and post it momentarily). The responsibility
for closing (or deleting or whatever) should be the responsibility of
whoever opened the file in the first place.

/Anders

-- 
 -- Of course I'm crazy, but that doesn't mean I'm wrong.
Anders Hammarquist                                  | iko at cd.chalmers.se
Physics student, Chalmers University of Technology, | Hem: +46 31 88 48 50
G|teborg, Sweden.           RADIO: SM6XMM and N2JGL | Mob: +46 707 27 86 87



From wari at home.wari.org  Thu May 22 12:03:19 2003
From: wari at home.wari.org (Wari Wahab)
Date: Fri, 23 May 2003 00:03:19 +0800
Subject: [Twisted-Python] Anomaly found between twisted XML-RPC client
 and twisted server (Bug?)
In-Reply-To: <3ECC9374.50500@home.wari.org>
References: <3ECC9374.50500@home.wari.org>
Message-ID: <3ECCF4C7.3020406@home.wari.org>

Wari Wahab wrote:

> Hi there, I was testing around the XML-RPC support in twisted and 
> found the following:
> same twisted client and server (one instance) = error.connectionLost
> twisted client -> twisted server = error.connectionLost
> xmlprclib client -> twisted server = got my results
> twisted client -> xmlrpclib client = got my results.

I tried the previously mentioned tests in linux, python 2.2.2 and 
twisted 1.0.5, I tried the same tests now in WindowsXP with Activestate 
Python and Twisted 1.0.5 and I get the same errors and results as well, 
which means that this bug is reproducable. Why can't twisted xmlrpc 
client talk to twisted xmlrpc server?




From dp at twistedmatrix.com  Thu May 22 12:37:39 2003
From: dp at twistedmatrix.com (Donovan Preston)
Date: Thu, 22 May 2003 09:37:39 -0700
Subject: [Twisted-Python] LivePage InputConduit only example
In-Reply-To: <79A1C0BA-8C18-11D7-9E76-00039376B1AE@twistedmatrix.com>
Message-ID: <B394B7DE-8C73-11D7-A34D-00039376B1AE@twistedmatrix.com>

By popular demand, an example of using LivePage without the 
OutputConduit, and all the problems inherit with it. With this 
technique, you can build DHTML-style applications using pure, 
server-side Python. The only drawback of this technique is that you 
can't update the user's Browser without them having initiated an action 
on the client side first. For many applications, the ability to 
dynamically replace parts of the page in response to events on the 
client browser (onclick, onchange, etc) will be enough.

I would really appreciate compatibility reports for various funky 
browsers for this example. I have tested it and it works on:

IE Win
IE Mac
Mozilla Everywhere
Safari OS X
OmniWeb 4.5 SneakyPeek OS X

Donovan

-------------- next part --------------
A non-text attachment was scrubbed...
Name: dhtmlLivePage.rpy
Type: application/octet-stream
Size: 990 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030522/a92848ac/attachment.obj 
-------------- next part --------------


From cce at clarkevans.com  Thu May 22 12:56:46 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu, 22 May 2003 16:56:46 +0000
Subject: [Twisted-Python] Authenticated SSL
In-Reply-To: <20030521112510.221e4963.itamar@itamarst.org>
References: <3ECB95E5.8040700@home.wari.org> <20030521112510.221e4963.itamar@itamarst.org>
Message-ID: <20030522165646.GA42775@doublegemini.com>

On Wed, May 21, 2003 at 11:25:10AM -0400, Itamar Shtull-Trauring wrote:
| On Wed, 21 May 2003 23:06:13 +0800
| Wari Wahab <wari at home.wari.org> wrote:
| 
| > Hi there, following the echoserver-ssl.py example, I was able to get
| > up to speed and basically running my xmlrpc server on SSL. As usual, 
| > twisted makes it easy. Now my problem becomes this: I need to verify 
| > that the certificate on the other side (The client) is signed by me
| > (or a known CA). How would one go about such task?
| 
| 1. Read pyOpenSSL documentation. (http://pyopenssl.sf.net)
| 
| 2. Implement a context factory that does the appropriate setup, based on
| docs in (1). (twisted.internet.ssl has some sample context factories).

3. Apply this (very old) patch and use twisted.client.getSecurePage

*evil grins*

Clark
-------------- next part --------------
39c39
< from OpenSSL import SSL
---
> from OpenSSL import SSL, crypto
57a58,60
> def dumpCertificate(cert, filetype = crypto.FILETYPE_PEM ):
>     ''' a helper to dump an incoming cert as a PEM '''
>     return crypto.dump_certificate(filetype, cert)
62,63c65,67
<                  sslmethod=SSL.SSLv23_METHOD):
<         self.privateKeyFileName = privateKeyFileName
---
>                  sslmethod=SSL.SSLv23_METHOD, verifyCallback = None):
>         self.verifyCallback      = (verifyCallback, )      
>         self.privateKeyFileName  = privateKeyFileName
67a72,77
>                         
>     def verifyCertificate(self, conn, cert, errno, depth, retcode):
>         cb = self.verifyCallback[0]
>         if cb: return cb(cert)
>         return 1
> 
71a82,83
>         if self.verifyCallback[0]:
>             ctx.set_verify(SSL.VERIFY_PEER, self.verifyCertificate) 
-------------- next part --------------
--- client.py.orig	Tue Mar 25 18:10:28 2003
+++ client.py	Tue Mar 25 18:55:08 2003
@@ -63,7 +63,8 @@
         l = self.headers.get('location')
         if not l:
             self.handleStatusDefault()
-        host, port, url = _parse(l[0])
+        https, host, port, url = _parse(l[0])
+        assert not https, "https redirects not implemented yet"
         self.factory.host, self.factory.url = host, url
         reactor.connectTCP(host, port, self.factory)
         self.quietLoss = 1
@@ -105,7 +106,9 @@
 
     protocol = HTTPPageGetter
 
-    def __init__(self, host, url, method='GET', postdata=None, headers=None, agent="Twisted PageGetter"):
+    def __init__(self, host, url, method='GET', postdata=None, 
+                 headers=None, agent=None):
+        if agent is None: agent = "Twisted PageGetter"
         if headers is not None:
             self.headers = headers
         if postdata is not None:
@@ -141,8 +144,10 @@
     protocol = HTTPPageDownloader
     value = None
 
-    def __init__(self, host, url, fileName, method='GET', postdata=None, headers=None, agent="Twisted client"):
-        HTTPClientFactory.__init__(self, host, url, method=method, postdata=postdata, headers=headers, agent=agent)
+    def __init__(self, host, url, fileName, method='GET', postdata=None, 
+                 headers=None, agent = None):
+        HTTPClientFactory.__init__(self, host, url, method, 
+                                   postdata, headers, agent)
         self.fileName = fileName
         self.deferred = defer.Deferred()
         self.waiting = 1
@@ -166,26 +171,59 @@
 def _parse(url):
     parsed = urlparse.urlparse(url)
     url = urlparse.urlunparse(('','')+parsed[2:])
-    host, port = parsed[1], 80
+    host = parsed[1]
+    if 'https' == parsed[0]:
+        https, port = 1, 443
+    else:
+        https, port = 0, 80
     if ':' in host:
         host, port = host.split(':')
         port = int(port)
-    return host, port, url
+    return https, host, port, url
 
-def getPage(url, *args, **kwargs):
+def getPage(url, method='GET', postdata=None, headers=None, agent = None):
     '''download a web page
 
     Download a page. Return a deferred, which will
     callback with a page or errback with a description
     of the error.
     '''
-    host, port, url = _parse(url)
-    factory = HTTPClientFactory(host, url, *args, **kwargs)
+    https, host, port, path = _parse(url)
+    if https: return getSecurePage(url, method, postdata, headers, agent)
+    factory = HTTPClientFactory(host, path, method, postdata, headers, agent)
     reactor.connectTCP(host, port, factory)
     return factory.deferred
 
+try:
+    from twisted.internet import ssl
+    def getSecurePage(url, method='GET', postdata=None, headers=None, 
+                      agent = None,
+                      privateKeyFileName = None, certificateFileName = None,
+                      sslmethod=ssl.SSL.SSLv23_METHOD, verifyCallback = None, 
+                      serverCertificateFileName = None):
+        """ download a secure page """
+        https, host, port, path = _parse(url)
+        if serverCertificateFileName:
+            cert = file(serverCertificateFileName).read()
+            verifyCallback = lambda rhs: ssl.dumpCertificate(cert) == rhs
+        if verifyCallback or certificateFileName or privateKeyFileName:
+            context = ssl.DefaultOpenSSLContextFactory(
+                          privateKeyFileName, certificateFileName,
+                          sslmethod, verifyCallback)
+            context.isClient = 1
+        else:
+            context = ssl.ClientContextFactory()
+        factory = HTTPClientFactory(host, path, method, postdata, headers)
+        reactor.connectSSL(host, port, factory, context)
+        return factory.deferred
+except:
+    def getSecurePage(*args,**kwargs):
+        raise Exception("ssl not available")
+
 def downloadPage(url, file, *args, **kwargs):
-    host, port, url = _parse(url)
-    factory = HTTPDownloader(host, url, file, *args, **kwargs)
+    https, host, port, path = _parse(url)
+    assert not https, "https is not yet implemented here"
+    factory = HTTPDownloader(host, path, file, *args, **kwargs)
     reactor.connectTCP(host, port, factory)
     return factory.deferred
+

From cce at clarkevans.com  Thu May 22 12:58:25 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu, 22 May 2003 16:58:25 +0000
Subject: [Twisted-Python] Authenticated SSL
In-Reply-To: <20030522165646.GA42775@doublegemini.com>
References: <3ECB95E5.8040700@home.wari.org> <20030521112510.221e4963.itamar@itamarst.org> <20030522165646.GA42775@doublegemini.com>
Message-ID: <20030522165825.GA42921@doublegemini.com>

Err, no, this would only verify the cert and doesn't work with xmlrpc.
Sorry.  -- Clark

On Thu, May 22, 2003 at 04:56:46PM +0000, Clark C. Evans wrote:
| On Wed, May 21, 2003 at 11:25:10AM -0400, Itamar Shtull-Trauring wrote:
| | On Wed, 21 May 2003 23:06:13 +0800
| | Wari Wahab <wari at home.wari.org> wrote:
| | 
| | > Hi there, following the echoserver-ssl.py example, I was able to get
| | > up to speed and basically running my xmlrpc server on SSL. As usual, 
| | > twisted makes it easy. Now my problem becomes this: I need to verify 
| | > that the certificate on the other side (The client) is signed by me
| | > (or a known CA). How would one go about such task?
| | 
| | 1. Read pyOpenSSL documentation. (http://pyopenssl.sf.net)
| | 
| | 2. Implement a context factory that does the appropriate setup, based on
| | docs in (1). (twisted.internet.ssl has some sample context factories).
| 
| 3. Apply this (very old) patch and use twisted.client.getSecurePage
| 
| *evil grins*
| 
| Clark

| 39c39
| < from OpenSSL import SSL
| ---
| > from OpenSSL import SSL, crypto
| 57a58,60
| > def dumpCertificate(cert, filetype = crypto.FILETYPE_PEM ):
| >     ''' a helper to dump an incoming cert as a PEM '''
| >     return crypto.dump_certificate(filetype, cert)
| 62,63c65,67
| <                  sslmethod=SSL.SSLv23_METHOD):
| <         self.privateKeyFileName = privateKeyFileName
| ---
| >                  sslmethod=SSL.SSLv23_METHOD, verifyCallback = None):
| >         self.verifyCallback      = (verifyCallback, )      
| >         self.privateKeyFileName  = privateKeyFileName
| 67a72,77
| >                         
| >     def verifyCertificate(self, conn, cert, errno, depth, retcode):
| >         cb = self.verifyCallback[0]
| >         if cb: return cb(cert)
| >         return 1
| > 
| 71a82,83
| >         if self.verifyCallback[0]:
| >             ctx.set_verify(SSL.VERIFY_PEER, self.verifyCertificate) 

| --- client.py.orig	Tue Mar 25 18:10:28 2003
| +++ client.py	Tue Mar 25 18:55:08 2003
| @@ -63,7 +63,8 @@
|          l = self.headers.get('location')
|          if not l:
|              self.handleStatusDefault()
| -        host, port, url = _parse(l[0])
| +        https, host, port, url = _parse(l[0])
| +        assert not https, "https redirects not implemented yet"
|          self.factory.host, self.factory.url = host, url
|          reactor.connectTCP(host, port, self.factory)
|          self.quietLoss = 1
| @@ -105,7 +106,9 @@
|  
|      protocol = HTTPPageGetter
|  
| -    def __init__(self, host, url, method='GET', postdata=None, headers=None, agent="Twisted PageGetter"):
| +    def __init__(self, host, url, method='GET', postdata=None, 
| +                 headers=None, agent=None):
| +        if agent is None: agent = "Twisted PageGetter"
|          if headers is not None:
|              self.headers = headers
|          if postdata is not None:
| @@ -141,8 +144,10 @@
|      protocol = HTTPPageDownloader
|      value = None
|  
| -    def __init__(self, host, url, fileName, method='GET', postdata=None, headers=None, agent="Twisted client"):
| -        HTTPClientFactory.__init__(self, host, url, method=method, postdata=postdata, headers=headers, agent=agent)
| +    def __init__(self, host, url, fileName, method='GET', postdata=None, 
| +                 headers=None, agent = None):
| +        HTTPClientFactory.__init__(self, host, url, method, 
| +                                   postdata, headers, agent)
|          self.fileName = fileName
|          self.deferred = defer.Deferred()
|          self.waiting = 1
| @@ -166,26 +171,59 @@
|  def _parse(url):
|      parsed = urlparse.urlparse(url)
|      url = urlparse.urlunparse(('','')+parsed[2:])
| -    host, port = parsed[1], 80
| +    host = parsed[1]
| +    if 'https' == parsed[0]:
| +        https, port = 1, 443
| +    else:
| +        https, port = 0, 80
|      if ':' in host:
|          host, port = host.split(':')
|          port = int(port)
| -    return host, port, url
| +    return https, host, port, url
|  
| -def getPage(url, *args, **kwargs):
| +def getPage(url, method='GET', postdata=None, headers=None, agent = None):
|      '''download a web page
|  
|      Download a page. Return a deferred, which will
|      callback with a page or errback with a description
|      of the error.
|      '''
| -    host, port, url = _parse(url)
| -    factory = HTTPClientFactory(host, url, *args, **kwargs)
| +    https, host, port, path = _parse(url)
| +    if https: return getSecurePage(url, method, postdata, headers, agent)
| +    factory = HTTPClientFactory(host, path, method, postdata, headers, agent)
|      reactor.connectTCP(host, port, factory)
|      return factory.deferred
|  
| +try:
| +    from twisted.internet import ssl
| +    def getSecurePage(url, method='GET', postdata=None, headers=None, 
| +                      agent = None,
| +                      privateKeyFileName = None, certificateFileName = None,
| +                      sslmethod=ssl.SSL.SSLv23_METHOD, verifyCallback = None, 
| +                      serverCertificateFileName = None):
| +        """ download a secure page """
| +        https, host, port, path = _parse(url)
| +        if serverCertificateFileName:
| +            cert = file(serverCertificateFileName).read()
| +            verifyCallback = lambda rhs: ssl.dumpCertificate(cert) == rhs
| +        if verifyCallback or certificateFileName or privateKeyFileName:
| +            context = ssl.DefaultOpenSSLContextFactory(
| +                          privateKeyFileName, certificateFileName,
| +                          sslmethod, verifyCallback)
| +            context.isClient = 1
| +        else:
| +            context = ssl.ClientContextFactory()
| +        factory = HTTPClientFactory(host, path, method, postdata, headers)
| +        reactor.connectSSL(host, port, factory, context)
| +        return factory.deferred
| +except:
| +    def getSecurePage(*args,**kwargs):
| +        raise Exception("ssl not available")
| +
|  def downloadPage(url, file, *args, **kwargs):
| -    host, port, url = _parse(url)
| -    factory = HTTPDownloader(host, url, file, *args, **kwargs)
| +    https, host, port, path = _parse(url)
| +    assert not https, "https is not yet implemented here"
| +    factory = HTTPDownloader(host, path, file, *args, **kwargs)
|      reactor.connectTCP(host, port, factory)
|      return factory.deferred
| +




From luc.stepniewski at adelux.fr  Thu May 22 03:48:29 2003
From: luc.stepniewski at adelux.fr (Luc Stepniewski)
Date: Thu, 22 May 2003 09:48:29 +0200
Subject: [Twisted-Python] LivePage Hello World
In-Reply-To: <333F9DDC-8C00-11D7-9E76-00039376B1AE@twistedmatrix.com>
References: <333F9DDC-8C00-11D7-9E76-00039376B1AE@twistedmatrix.com>
Message-ID: <200305220948.29416.luc.stepniewski@adelux.fr>

On Thursday 22 May 2003 04:50, Donovan Preston wrote:
> On Wednesday, May 21, 2003, at 06:53 PM, Eric Holm wrote:
> > I'm trying to get a simple LivePage script going,
> > and no luck so far.

> The OutputConduit is responsible for shuttling events from the Server
> (Twisted) to the Client (web browser).

What is the maximal size of the data that can be sent from the server to the 
client? I guess there are more than one answer; one for flash, one for 
javascript basic, and one for raw mozilla specific javascript?

Luc
-- 
Luc Stepniewski <lstep at adequat.net> <http://lstep.free.fr/>
Adelux - Securite, Linux  Public key: <http://lstep.free.fr/pubkey.txt>
Key BC0E3C2A fingerprint = A4FA466C68D27E46B427  07D083ED6340BC0E3C2A






From iko at strakt.com  Thu May 22 10:48:35 2003
From: iko at strakt.com (Anders Hammarquist)
Date: Thu, 22 May 2003 16:48:35 +0200
Subject: [Twisted-Python] SMTP patch
Message-ID: <200305221448.h4MEmZw2004905@fido.strakt.com>

Make sure to drop any references to the file object containing the
message data.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: text/x-patch
Size: 41097 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030522/2657fcc4/attachment.bin 

From dp at twistedmatrix.com  Thu May 22 16:33:53 2003
From: dp at twistedmatrix.com (Donovan Preston)
Date: Thu, 22 May 2003 13:33:53 -0700
Subject: [Twisted-Python] LivePage Hello World
In-Reply-To: <200305220948.29416.luc.stepniewski@adelux.fr>
Message-ID: <B4091D27-8C94-11D7-A34D-00039376B1AE@twistedmatrix.com>

On Thursday, May 22, 2003, at 12:48 AM, Luc Stepniewski wrote:

> What is the maximal size of the data that can be sent from the server 
> to the
> client? I guess there are more than one answer; one for flash, one for
> javascript basic, and one for raw mozilla specific javascript?

Pretty large. On IE Win, where Flash communicates with the browser 
using LiveConnect, I haven't seen any problems with huge page changes 
(An entire very complicated page). Everywhere else, the script is 
currently sent to the browser in a regular HTTP response, in a <script> 
tag, so I don't see why there would be any limit to the amount of data 
you could send there. If there is any limit on the size of JavaScript 
strings, that would be it.

Donovan




From mario at ruggier.org  Thu May 22 17:41:42 2003
From: mario at ruggier.org (Mario Ruggier)
Date: Thu, 22 May 2003 23:41:42 +0200
Subject: [Twisted-Python] LivePage InputConduit only example
In-Reply-To: <B394B7DE-8C73-11D7-A34D-00039376B1AE@twistedmatrix.com>
Message-ID: <2D6BD1B2-8C9E-11D7-BBF0-000393756786@ruggier.org>

> By popular demand, an example of using LivePage without the 
> OutputConduit, and all the problems inherit with it. With this 
> technique, you can build DHTML-style applications using pure, 
> server-side Python. The only drawback of this technique is that you 
> can't update the user's Browser without them having initiated an 
> action on the client side first. For many applications, the ability to 
> dynamically replace parts of the page in response to events on the 
> client browser (onclick, onchange, etc) will be enough.
>
> I would really appreciate compatibility reports for various funky 
> browsers for this example. I have tested it and it works on:
>
> IE Win
> IE Mac
> Mozilla Everywhere
> Safari OS X

Nice, and very magical...

Do not know if you noticed this already, but this problem on
Safari beta 2 (v74) seems to be consistent:
- load url: http://localhost:8080/dhtmlLivePage/
- click to increment number, once or more times
- reload page (with the reload button, not by "retyping" the url) gives
   the following error inside the iframe (id is different each time...):

   exceptions.KeyError: woven_id_8423856
   ...

(Twisted CVS of a couple days ago, post 1.0.5).

Cheers, mario


> OmniWeb 4.5 SneakyPeek OS X
>
> Donovan




From dp at twistedmatrix.com  Thu May 22 17:57:13 2003
From: dp at twistedmatrix.com (Donovan Preston)
Date: Thu, 22 May 2003 14:57:13 -0700
Subject: [Twisted-Python] LivePage InputConduit only example
In-Reply-To: <2D6BD1B2-8C9E-11D7-BBF0-000393756786@ruggier.org>
Message-ID: <584B1DE2-8CA0-11D7-A34D-00039376B1AE@twistedmatrix.com>

On Thursday, May 22, 2003, at 02:41 PM, Mario Ruggier wrote:
>
> Nice, and very magical...
>
> Do not know if you noticed this already, but this problem on
> Safari beta 2 (v74) seems to be consistent:
> - load url: http://localhost:8080/dhtmlLivePage/
> - click to increment number, once or more times
> - reload page (with the reload button, not by "retyping" the url) gives
>   the following error inside the iframe (id is different each time...):
>
>   exceptions.KeyError: woven_id_8423856
>   ...

Thanks for the report. It seems like a bug in safari to me; refreshing 
the whole page should refresh the iframe at the url "input_html" not at 
the last .src that was set by a javascript... I'll check to see if this 
happens in any other browsers.

Thanks again

Donovan




From andrew-twisted at puzzling.org  Thu May 22 21:05:24 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 23 May 2003 11:05:24 +1000
Subject: [Twisted-Python] SMTP patch
In-Reply-To: <200305221448.h4MEmZw2004905@fido.strakt.com>
References: <200305221448.h4MEmZw2004905@fido.strakt.com>
Message-ID: <20030523010524.GA9978@frobozz>

On Thu, May 22, 2003 at 04:48:35PM +0200, Anders Hammarquist wrote:
> Make sure to drop any references to the file object containing the
> message data.
> 

> +        if code in xrange(200,300):

I think a much better way to do this is:

    if 200 <= code <= 300:

-Andrew.




From exarkun at intarweb.us  Thu May 22 23:02:53 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Thu, 22 May 2003 23:02:53 -0400
Subject: [Twisted-Python] SMTP patch
In-Reply-To: <20030523010524.GA9978@frobozz>
References: <200305221448.h4MEmZw2004905@fido.strakt.com> <20030523010524.GA9978@frobozz>
Message-ID: <20030523030253.GB28981@meson.dyndns.org>

On Fri, May 23, 2003 at 11:05:24AM +1000, Andrew Bennetts wrote:
> On Thu, May 22, 2003 at 04:48:35PM +0200, Anders Hammarquist wrote:
> > Make sure to drop any references to the file object containing the
> > message data.
> > 
> 
> > +        if code in xrange(200,300):
> 
> I think a much better way to do this is:
> 
>     if 200 <= code <= 300:
> 

    Interestingly, there was a thread on PyPy-dev on this subject.  I think
I agree with the line of thinking that says "x in y" expresses the intent
more accurately and at a higher level than "a <= x < y".  xrange() is a hack
though, so I would use range() :)

    BTW (the real reason I'm replying), I haven't forgotten about this
patch.  I'll try to get to it as quickly as I can.

  Jp 

-- 
"The problem is, of course, that not only is economics bankrupt but it has
 always been nothing more than politics in disguise ... economics is a form
 of brain damage."  -- Hazel Henderson
-- 
 up 21 days, 0:40, 0 users, load average: 0.04, 0.03, 0.00
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030522/bc7c6533/attachment.pgp 

From andrew-twisted at puzzling.org  Thu May 22 23:13:35 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 23 May 2003 13:13:35 +1000
Subject: [Twisted-Python] SMTP patch
In-Reply-To: <20030523030253.GB28981@meson.dyndns.org>
References: <200305221448.h4MEmZw2004905@fido.strakt.com> <20030523010524.GA9978@frobozz> <20030523030253.GB28981@meson.dyndns.org>
Message-ID: <20030523031335.GD9978@frobozz>

On Thu, May 22, 2003 at 11:02:53PM -0400, Jp Calderone wrote:
> On Fri, May 23, 2003 at 11:05:24AM +1000, Andrew Bennetts wrote:
> > On Thu, May 22, 2003 at 04:48:35PM +0200, Anders Hammarquist wrote:
> > > Make sure to drop any references to the file object containing the
> > > message data.
> > > 
> > 
> > > +        if code in xrange(200,300):
> > 
> > I think a much better way to do this is:
> > 
> >     if 200 <= code <= 300:
> > 
> 
>     Interestingly, there was a thread on PyPy-dev on this subject.  I think
> I agree with the line of thinking that says "x in y" expresses the intent
> more accurately and at a higher level than "a <= x < y".  xrange() is a hack
> though, so I would use range() :)

Oops!  As you imply, that should've been "200 <= code < 300".  I still don't
like the idea of constructing 100 integers, even lazily, just to test
bounds, though.

Of course, if the status code was left as a string, then you could simply do
"if code.startswith('2'):"  :)

-andrew.




From wari at home.wari.org  Fri May 23 00:19:26 2003
From: wari at home.wari.org (Wari Wahab)
Date: Fri, 23 May 2003 12:19:26 +0800
Subject: [Twisted-Python] Anomaly found between twisted XML-RPC client
 and twisted server (Bug?)
In-Reply-To: <3ECCF4C7.3020406@home.wari.org>
References: <3ECC9374.50500@home.wari.org> <3ECCF4C7.3020406@home.wari.org>
Message-ID: <3ECDA14E.8020604@home.wari.org>

Wari Wahab wrote:

> I tried the previously mentioned tests in linux, python 2.2.2 and 
> twisted 1.0.5, I tried the same tests now in WindowsXP with 
> Activestate Python and Twisted 1.0.5 and I get the same errors and 
> results as well, which means that this bug is reproducable. 

Right now I'm not sure if this is a bug anymore, and it's probably the 
reason I got no answers for this, details below.

> Why can't twisted xmlrpc client talk to twisted xmlrpc server?

When I did this statement:

p = Proxy('http://localhost:7080')
p.callRemote(egg, spam)

Twisted then sends the request:
---------------
POST  HTTP/1.0
User-Agent: Twisted/XMLRPClib
Host: localhost
Content-type: text/xml
Content-length: 189

<?xml version="1.0"?>
<methodCall>
<methodName>add</methodName>
# Blah Blah
----------------

"POST  HTTP/1.0" becomes an invalid request because there's no path 
anyway. Still, the twisted xmlrpc server carries forward the request to 
twisted.web.xmlrpc.XMLRPC.render() anyway, but this time, the 
request.content (line 103 in xmlrpc.py) is an empty StringIO, and when 
passed to xmlrpc.loads(), returns the exception.

If the request is wrong, shouldn't twisted.web complain about it at a 
point earlier than the XMLRPC resource? If it lets the request thru, why 
does request.content becomes empty. Or, shouldn't the XMLRPC client adds 
a '/' at least when there is no URI (URL?) in the request?

That's all for now.




From andrew-twisted at puzzling.org  Fri May 23 00:40:13 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 23 May 2003 14:40:13 +1000
Subject: [Twisted-Python] Anomaly found between twisted XML-RPC client and twisted server (Bug?)
In-Reply-To: <3ECDA14E.8020604@home.wari.org>
References: <3ECC9374.50500@home.wari.org> <3ECCF4C7.3020406@home.wari.org> <3ECDA14E.8020604@home.wari.org>
Message-ID: <20030523044013.GF9978@frobozz>

On Fri, May 23, 2003 at 12:19:26PM +0800, Wari Wahab wrote:
> 
> If the request is wrong, shouldn't twisted.web complain about it at a 
> point earlier than the XMLRPC resource? If it lets the request thru, why 
> does request.content becomes empty. Or, shouldn't the XMLRPC client adds 
> a '/' at least when there is no URI (URL?) in the request?

That's for taking the time to investigate this!

Does this patch to the Proxy class fix the problem?

Index: twisted/web/xmlrpc.py
===================================================================
RCS file: /cvs/Twisted/twisted/web/xmlrpc.py,v
retrieving revision 1.22
diff -u -r1.22 xmlrpc.py
--- twisted/web/xmlrpc.py       12 May 2003 20:16:49 -0000      1.22
+++ twisted/web/xmlrpc.py       23 May 2003 04:37:04 -0000
@@ -225,6 +225,8 @@
     def __init__(self, url):
         parts = urlparse.urlparse(url)
         self.url = urlparse.urlunparse(('', '')+parts[2:])
+        if not self.url:
+            self.url = '/'
         if ':' in parts[1]:
             self.host, self.port = parts[1].split(':')
             self.port = int(self.port)

(I haven't actually read the code very carefully; perhaps there's a better
way to call urlunparse or something, but this looks like it'll fix the
symptom)

-Andrew.




From bob at redivi.com  Fri May 23 00:46:09 2003
From: bob at redivi.com (Bob Ippolito)
Date: Fri, 23 May 2003 00:46:09 -0400
Subject: [Twisted-Python] SMTP patch
In-Reply-To: <20030523030253.GB28981@meson.dyndns.org>
Message-ID: <78A33124-8CD9-11D7-9FAC-000A95686CD8@redivi.com>

On Thursday, May 22, 2003, at 23:02 America/New_York, Jp Calderone 
wrote:

>     Interestingly, there was a thread on PyPy-dev on this subject.  I 
> think
> I agree with the line of thinking that says "x in y" expresses the 
> intent
> more accurately and at a higher level than "a <= x < y".  xrange() is 
> a hack
> though, so I would use range() :)

Only because in this particular case all valid x are exactly 
representable by an integer .. there are plenty of x (floats or 
otherwise) that satisfy a <= x < y that aren't in the set of integers 
[a, y>

Personally, I think there should be a hybrid between a list and a 
generator (kinda like xrange but more magical) returned whenever you do 
a range or a list comprehension or a slice unless you explicitly ask 
for all of the values to be calculated.. or at least an aesthetically 
pleasing way to do things like that.. and no, itertools and friends do 
not count, especially because generators can't support __getitem__ and 
__len__ when the user wants it to.  You could make a ton of VM 
optimizations like that, especially for objects like range(a, b).  for 
example, it could support __contains__ which would simply do a <= x < y 
(or the equivalent for a stepped range), reverse and sort would 
essentially be a no-op until an unordered append or insert happens, etc.

-bob




From andrew-twisted at puzzling.org  Fri May 23 00:53:24 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 23 May 2003 14:53:24 +1000
Subject: [Twisted-Python] SMTP patch
In-Reply-To: <78A33124-8CD9-11D7-9FAC-000A95686CD8@redivi.com>
References: <20030523030253.GB28981@meson.dyndns.org> <78A33124-8CD9-11D7-9FAC-000A95686CD8@redivi.com>
Message-ID: <20030523045324.GG9978@frobozz>

On Fri, May 23, 2003 at 12:46:09AM -0400, Bob Ippolito wrote:
> On Thursday, May 22, 2003, at 23:02 America/New_York, Jp Calderone 
> wrote:
> 
> >    Interestingly, there was a thread on PyPy-dev on this subject.  I 
> >think I agree with the line of thinking that says "x in y" expresses the
> >intent more accurately and at a higher level than "a <= x < y".  xrange()
> >is a hack though, so I would use range() :)
> 
> Only because in this particular case all valid x are exactly 
> representable by an integer .. there are plenty of x (floats or 
> otherwise) that satisfy a <= x < y that aren't in the set of integers 
> [a, y>
> 
> Personally, I think there should be a hybrid between a list and a 
> generator (kinda like xrange but more magical) returned whenever you do 

I think the word you're looking for is "interval"?

-Andrew.




From wari at home.wari.org  Fri May 23 00:58:12 2003
From: wari at home.wari.org (Wari Wahab)
Date: Fri, 23 May 2003 12:58:12 +0800
Subject: [Twisted-Python] Serving HTTP requests (was: Bug?)
In-Reply-To: <20030523044013.GF9978@frobozz>
References: <3ECC9374.50500@home.wari.org> <3ECCF4C7.3020406@home.wari.org> <3ECDA14E.8020604@home.wari.org> <20030523044013.GF9978@frobozz>
Message-ID: <3ECDAA64.6040500@home.wari.org>

Andrew Bennetts wrote:

>On Fri, May 23, 2003 at 12:19:26PM +0800, Wari Wahab wrote:
>  
>
>>If the request is wrong, shouldn't twisted.web complain about it at a 
>>point earlier than the XMLRPC resource? If it lets the request thru, why 
>>does request.content becomes empty. Or, shouldn't the XMLRPC client adds 
>>a '/' at least when there is no URI (URL?) in the request?
>>    
>>
>That's for taking the time to investigate this!
>Does this patch to the Proxy class fix the problem?
>  
>
Yes that fixed the problem nicely. Though I also do think that is the 
request is wrong, twisted should complain, as in the case of Apache:

sync:~/web$ telnet localhost 80
Trying 127.0.0.1...
Connected to sync.
Escape character is '^]'.
POST  HTTP/1.0
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<HTML><HEAD>
<TITLE>400 Bad Request</TITLE>
</HEAD><BODY>
<H1>Bad Request</H1>
Your browser sent a request that this server could not understand.<P>
Invalid URI in request POST  HTTP/1.0<P>
<HR>
<ADDRESS>Apache/1.3.26 Server at sync.sg.celestix.com Port 80</ADDRESS>
</BODY></HTML>
Connection closed by foreign host.

In the case of a microsoft server, it does this:
sync:~/web$ telnet www.microsoft.com 80
Trying 207.46.249.222...
Connected to www.us.microsoft.com.
Escape character is '^]'.
POST  HTTP/1.0
Connection closed by foreign host.

I like the apache way better :)




From bob at redivi.com  Fri May 23 01:04:26 2003
From: bob at redivi.com (Bob Ippolito)
Date: Fri, 23 May 2003 01:04:26 -0400
Subject: [Twisted-Python] SMTP patch
In-Reply-To: <20030523045324.GG9978@frobozz>
Message-ID: <067F2E7E-8CDC-11D7-9FAC-000A95686CD8@redivi.com>

On Friday, May 23, 2003, at 00:53 America/New_York, Andrew Bennetts 
wrote:

> On Fri, May 23, 2003 at 12:46:09AM -0400, Bob Ippolito wrote:
>> On Thursday, May 22, 2003, at 23:02 America/New_York, Jp Calderone
>> wrote:
>>
>>>    Interestingly, there was a thread on PyPy-dev on this subject.  I
>>> think I agree with the line of thinking that says "x in y" expresses 
>>> the
>>> intent more accurately and at a higher level than "a <= x < y".  
>>> xrange()
>>> is a hack though, so I would use range() :)
>>
>> Only because in this particular case all valid x are exactly
>> representable by an integer .. there are plenty of x (floats or
>> otherwise) that satisfy a <= x < y that aren't in the set of integers
>> [a, y>
>>
>> Personally, I think there should be a hybrid between a list and a
>> generator (kinda like xrange but more magical) returned whenever you 
>> do
>
> I think the word you're looking for is "interval"?

Not really.. that'd only really apply to a magical return value from 
range.

-bob




From andrew-twisted at puzzling.org  Fri May 23 01:07:59 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 23 May 2003 15:07:59 +1000
Subject: [Twisted-Python] Serving HTTP requests (was: Bug?)
In-Reply-To: <3ECDAA64.6040500@home.wari.org>
References: <3ECC9374.50500@home.wari.org> <3ECCF4C7.3020406@home.wari.org> <3ECDA14E.8020604@home.wari.org> <20030523044013.GF9978@frobozz> <3ECDAA64.6040500@home.wari.org>
Message-ID: <20030523050759.GH9978@frobozz>

On Fri, May 23, 2003 at 12:58:12PM +0800, Wari Wahab wrote:
> Yes that fixed the problem nicely. Though I also do think that is the 
> request is wrong, twisted should complain, as in the case of Apache:

[snip 400 Bad request vs. dropping the connection]

Twisted's HTTP implementation does this:

            parts = line.split()
            if len(parts)<3:
                parts.append('HTTP/0.9') # isn't backwards compat great!
            if len(parts) != 3:
                self.transport.write("HTTP/1.1 400 Bad Request\r\n\r\n")
                self.transport.loseConnection()
                return

So "POST  HTTP/1.0" becomes "POST HTTP/1.0 HTTP/0.9"!  (This of course
results in a 404)

Does anyone know what clients is the "parts.append('HTTP/0.9')" backwards
compat hack is there for?

-Andrew.




From m at moshez.org  Fri May 23 03:02:47 2003
From: m at moshez.org (Moshe Zadka)
Date: 23 May 2003 07:02:47 -0000
Subject: [Twisted-Python] Getting Rid of Application in a Compatible Way
Message-ID: <20030523070247.10334.qmail@green.zadka.com>

I suggest to write ApplicationService classes which look like:

class TCPListener(ApplicationService):

    def __init__(self, port, factory, backlog=5, interface='', *args, **kwargs):
        self.port = port
        self.factory = factory
        self.backlog = backlog
        self.interface = interface
        ApplicationService.__init__(self, *args, **kwargs)

    def __getstate__(self):
        d = self.__dict__.copy()
        d['_port'] = None
        return d

    def startService(self):
        ApplicationService.startService(self)
        self._port = reactor.listenTCP(self.port, self.factory, self.backlog,
                                       self.interface)

    def stopService(Self):
        ApplicationService.stopService(self)
        self._port.stopListening()
        self._port = None

Now, instead of application.listenTCP we can use

TCPListener(8080, server.Site(resource), "foo").setServiceParent(application)

The only problem is needing to choose unique names. I suggest
ApplicationService will lose the unPythonic
        if not isinstance(serviceName, types.StringType):
            raise TypeError("%s is not a string." % serviceName)
And add to app.py

class Unique:
    pass

This means that "unnamed" services are now possible:
TCPListener(8080, server.Site(resource), Unique()).setServiceParent(application)

You can still access a service by its "serviceName", but you have to get
the name from the service. This means stuff like cred will still work.
Of course, similar Services can be written for UNIXListener, SSLListener,
etc.

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From peter at engcorp.com  Fri May 23 08:57:56 2003
From: peter at engcorp.com (Peter Hansen)
Date: Fri, 23 May 2003 08:57:56 -0400
Subject: [Twisted-Python] SMTP patch
References: <200305221448.h4MEmZw2004905@fido.strakt.com> <20030523010524.GA9978@frobozz> <20030523030253.GB28981@meson.dyndns.org> <20030523031335.GD9978@frobozz>
Message-ID: <3ECE1AD4.C5973D75@engcorp.com>

Andrew Bennetts wrote:
> 
> Oops!  As you imply, that should've been "200 <= code < 300".  I still don't
> like the idea of constructing 100 integers, even lazily, just to test
> bounds, though.
> 
> Of course, if the status code was left as a string, then you could simply do
> "if code.startswith('2'):"  :)

if str(code).startswith('2'):  ??

-Peter



From abe at fettig.net  Fri May 23 11:42:03 2003
From: abe at fettig.net (Abe Fettig)
Date: 23 May 2003 11:42:03 -0400
Subject: [Twisted-Python] LivePage InputConduit only example
In-Reply-To: <B394B7DE-8C73-11D7-A34D-00039376B1AE@twistedmatrix.com>
References: <B394B7DE-8C73-11D7-A34D-00039376B1AE@twistedmatrix.com>
Message-ID: <1053704523.695.19.camel@mingus>

On Thu, 2003-05-22 at 12:37, Donovan Preston wrote:
> By popular demand, an example of using LivePage without the 
> OutputConduit, and all the problems inherit with it. With this 
> technique, you can build DHTML-style applications using pure, 
> server-side Python. The only drawback of this technique is that you 
> can't update the user's Browser without them having initiated an action 
> on the client side first. For many applications, the ability to 
> dynamically replace parts of the page in response to events on the 
> client browser (onclick, onchange, etc) will be enough.
> 
> I would really appreciate compatibility reports for various funky 
> browsers for this example. I have tested it and it works on:
> 
> IE Win
> IE Mac
> Mozilla Everywhere
> Safari OS X
> OmniWeb 4.5 SneakyPeek OS X

Is this working in CVS only?  Using Twisted 1.0.5, I can't get it to
work on Mozilla, IE/Win, or Konqueror.

Abe




From exarkun at intarweb.us  Fri May 23 12:55:45 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Fri, 23 May 2003 12:55:45 -0400
Subject: [Twisted-Python] SMTP patch
In-Reply-To: <20030523031335.GD9978@frobozz>
References: <200305221448.h4MEmZw2004905@fido.strakt.com> <20030523010524.GA9978@frobozz> <20030523030253.GB28981@meson.dyndns.org> <20030523031335.GD9978@frobozz>
Message-ID: <20030523165545.GA30365@meson.dyndns.org>

On Fri, May 23, 2003 at 01:13:35PM +1000, Andrew Bennetts wrote:
> On Thu, May 22, 2003 at 11:02:53PM -0400, Jp Calderone wrote:
> > On Fri, May 23, 2003 at 11:05:24AM +1000, Andrew Bennetts wrote:
> > > On Thu, May 22, 2003 at 04:48:35PM +0200, Anders Hammarquist wrote:
> > > > Make sure to drop any references to the file object containing the
> > > > message data.
> > > > 
> > > 
> > > > +        if code in xrange(200,300):
> > > 
> > > I think a much better way to do this is:
> > > 
> > >     if 200 <= code <= 300:
> > > 
> > 
> >     Interestingly, there was a thread on PyPy-dev on this subject.  I think
> > I agree with the line of thinking that says "x in y" expresses the intent
> > more accurately and at a higher level than "a <= x < y".  xrange() is a hack
> > though, so I would use range() :)
> 
> Oops!  As you imply, that should've been "200 <= code < 300".  I still don't
> like the idea of constructing 100 integers, even lazily, just to test
> bounds, though.

  Neither do I.  Python should optimize it.  ;)

  Jp

-- 
A disciple of another sect once came to Drescher as he was eating his
morning meal. "I would like to give you this personality test," said the
outsider, "because I want you to be happy." Drescher took the paper that was
offered him and put it into the toaster: "I wish the toaster to be happy, 
too."
-- 
 up 21 days, 14:40, 0 users, load average: 0.00, 0.00, 0.00
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030523/eee54b52/attachment.pgp 

From bob at redivi.com  Fri May 23 13:08:25 2003
From: bob at redivi.com (Bob Ippolito)
Date: Fri, 23 May 2003 13:08:25 -0400
Subject: [Twisted-Python] SMTP patch
In-Reply-To: <20030523165545.GA30365@meson.dyndns.org>
Message-ID: <2A944DAE-8D41-11D7-9FAC-000A95686CD8@redivi.com>

On Friday, May 23, 2003, at 12:55 America/New_York, Jp Calderone wrote:

>>>     Interestingly, there was a thread on PyPy-dev on this subject.  
>>> I think
>>> I agree with the line of thinking that says "x in y" expresses the 
>>> intent
>>> more accurately and at a higher level than "a <= x < y".  xrange() 
>>> is a hack
>>> though, so I would use range() :)
>>
>> Oops!  As you imply, that should've been "200 <= code < 300".  I 
>> still don't
>> like the idea of constructing 100 integers, even lazily, just to test
>> bounds, though.
>
>   Neither do I.  Python should optimize it.  ;)

I for one would be perfectly happy doing optimization on my own, when 
neccessary, if function calls sucked less :)

-bob




From dp at twistedmatrix.com  Fri May 23 14:06:06 2003
From: dp at twistedmatrix.com (Donovan Preston)
Date: Fri, 23 May 2003 11:06:06 -0700
Subject: [Twisted-Python] LivePage InputConduit only example
In-Reply-To: <1053704523.695.19.camel@mingus>
Message-ID: <39620C5A-8D49-11D7-8F5B-00039376B1AE@twistedmatrix.com>

On Friday, May 23, 2003, at 08:42 AM, Abe Fettig wrote:

> Is this working in CVS only?  Using Twisted 1.0.5, I can't get it to
> work on Mozilla, IE/Win, or Konqueror.

CVS is probably required, yes.

Donovan




From tv at twistedmatrix.com  Fri May 23 14:31:27 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Fri, 23 May 2003 21:31:27 +0300
Subject: [Twisted-Python] Low-level networking in Twisted
Message-ID: <20030523183127.GA19720@lapdog>

        Hi. Here's a patch that adds some low-level networking thingies
        (Ethernet, IP & UDP packet parsing; ability to read raw packets
        and use normal DatagramProtocols with them).

        I'm submitting it for review at an early stage so you can all
        bash me to dea^W^W^W^Wgive me guidance on how to build it.
        Especially look at what I did with AbstractDatagramProtocol,
        how the classes interact, etc.

        Future work: maybe checksum verification and such
        details. TUN/TAP interface. Pcap interface, if I can avoid
        writing C and still make it compatible. Worlds slowest network
        stack.

        And yes, I know about scapy. It's a nice hack and a useful
        tool, but doesn't really provide an API to program on. Personally,
        I think a twistedy low-level networking library would be a good
        ground to write a small UI app that does what scapy does. And
        if you do that, please call it twisted.pair :)




	...well, the patch for too big. See
	http://twistedmatrix.com/~tv/lowlevel-networking.patch


-- 
:(){ :|:&};:



From glyph at twistedmatrix.com  Fri May 23 17:20:25 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 23 May 2003 17:20:25 -0400
Subject: [Twisted-Python] SMTP patch
In-Reply-To: <20030523165545.GA30365@meson.dyndns.org>
Message-ID: <5EA89FC8-8D64-11D7-AC3E-000393C9700E@twistedmatrix.com>

On Friday, May 23, 2003, at 12:55 PM, Jp Calderone wrote:

>> Oops!  As you imply, that should've been "200 <= code < 300".  I 
>> still don't
>> like the idea of constructing 100 integers, even lazily, just to test
>> bounds, though.
>
>   Neither do I.  Python should optimize it.  ;)

This reminds me of a story:

	http://www.ai.mit.edu/docs/articles/good-news/subsubsection3.2.2.4.html

It is easy to write code that is insanely slow in Python, but we should 
be aware of that and _not do it_, regardless of how cute 'in' looks. :)




From bob at redivi.com  Fri May 23 18:45:58 2003
From: bob at redivi.com (Bob Ippolito)
Date: Fri, 23 May 2003 18:45:58 -0400
Subject: [Twisted-Python] SMTP patch
In-Reply-To: <5EA89FC8-8D64-11D7-AC3E-000393C9700E@twistedmatrix.com>
Message-ID: <5200896E-8D70-11D7-9FAC-000A95686CD8@redivi.com>

On Friday, May 23, 2003, at 17:20 America/New_York, Glyph Lefkowitz  
wrote:

>
> On Friday, May 23, 2003, at 12:55 PM, Jp Calderone wrote:
>
>>> Oops!  As you imply, that should've been "200 <= code < 300".  I  
>>> still don't
>>> like the idea of constructing 100 integers, even lazily, just to test
>>> bounds, though.
>>
>>   Neither do I.  Python should optimize it.  ;)
>
> This reminds me of a story:
>
> 	http://www.ai.mit.edu/docs/articles/good-news/ 
> subsubsection3.2.2.4.html
>
> It is easy to write code that is insanely slow in Python, but we  
> should be aware of that and _not do it_, regardless of how cute 'in'  
> looks. :)

Didn't you hear?  The next big thing is to fantasize about nonexistent  
programming languages that make good compile and runtime decisions for  
you.  If we start writing code like that now, our programs *might*  
finish running by the time one of these magical languages comes into  
play.  Or, we could go the Microsoft route and just upgrade our  
computers every year so they don't have to optimize their crufty decade  
old word processor.

-bob




From glyph at twistedmatrix.com  Fri May 23 18:54:27 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 23 May 2003 18:54:27 -0400
Subject: [Twisted-Python] SMTP patch
In-Reply-To: <5200896E-8D70-11D7-9FAC-000A95686CD8@redivi.com>
Message-ID: <819F712E-8D71-11D7-AC3E-000393C9700E@twistedmatrix.com>

On Friday, May 23, 2003, at 06:45 PM, Bob Ippolito wrote:

> The next big thing is to fantasize about nonexistent programming 
> languages that make good compile and runtime decisions for you.

Hey wait!  I'm *really good* at that!  Let me tell you about this paper 
I read on linear objects...




From bob at redivi.com  Fri May 23 19:57:22 2003
From: bob at redivi.com (Bob Ippolito)
Date: Fri, 23 May 2003 19:57:22 -0400
Subject: [Twisted-Python] How to abuse generators, now that we're allowed to play with 2.2
Message-ID: <4B5AFAAA-8D7A-11D7-9FAC-000A95686CD8@redivi.com>

Here's some code I've been playing with the past two days.. part of a 
DAAP (Digital Audio Access Protocol, aka iTunes 4.0) client/server 
framework that I'm working on that's nowhere near releasable at the 
moment..

However, the gzip/gunzip streaming code and the example of generator 
abuse may be of immediate use to someone in the meantime, so here you 
go.

HTTPStream expects you to pass in a protocol that will receive the page 
incrementally.  Try passing in headers={'Accept-Encoding':'gzip'} and 
talking to your favorite server, it may actually decide to send you the 
page gzipped.. with the way the protocol stack works, your underlying 
protocol won't even know the difference.  It can of course be extended 
to support any encoding(s) with the current dispatch mechanism, but 
gzip is the only one I need at the moment.

As far as IterableBytestreamProtocol goes, you should be careful if you 
use it.. basically it will work perfectly until connectionLost happens, 
and then it'll start throwing back None to your read requests (which 
will never happen otherwise).  If you set iterateOnLoss = False, then 
your iterator will just stop running when you lose connection, which 
may or may not be desirable.  Use at your own risk, but feel free to 
improve on it if you have any suggestions.

-bob


-------------- next part --------------
A non-text attachment was scrubbed...
Name: gzstream.py
Type: application/octet-stream
Size: 8149 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030523/a7d9d5a6/attachment.obj 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: util.py
Type: application/octet-stream
Size: 2150 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030523/a7d9d5a6/attachment-0001.obj 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: httpstream.py
Type: application/octet-stream
Size: 1554 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030523/a7d9d5a6/attachment-0002.obj 

From radix at twistedmatrix.com  Fri May 23 20:12:01 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 23 May 2003 20:12:01 -0400
Subject: [Twisted-Python] Lore bug with ".html"-stripping
Message-ID: <20030524001201.GA2887@toshi.anaprd01.md.comcast.net>

Ok, check out the source of 

http://twistedmatrix.com/documents/howto/web-overview.html

(doc/howto/web-overview.html in CVS)

Notice that there are two links to "woven.html". Now, check out the
source to

http://twistedmatrix.com/documents/howto/web-overview

, which is the result of lore-izing the .html. Notice that the first
link to woven.html has been properly munged to be simply "woven". The
one at the bottom of the page, however, hasn't. Anyone have any
ideas on why this is happening?

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From magnus at thinkware.se  Fri May 23 21:05:38 2003
From: magnus at thinkware.se (Magnus =?iso-8859-1?Q?Lyck=E5?=)
Date: Sat, 24 May 2003 03:05:38 +0200
Subject: [Twisted-Python] SMTP patch
In-Reply-To: <20030523235801.5802.58391.Mailman@pyramid.twistedmatrix.co
 m>
Message-ID: <5.2.1.1.0.20030524025817.01efd3d8@www.thinkware.se>

Peter Hansen wrote:
>Andrew Bennetts wrote:
> >
> > Oops!  As you imply, that should've been "200 <= code < 300".  I still 
> don't
> > like the idea of constructing 100 integers, even lazily, just to test
> > bounds, though.
> >
> > Of course, if the status code was left as a string, then you could 
> simply do
> > "if code.startswith('2'):"  :)
>
>if str(code).startswith('2'):  ??

It's much faster to do:

if code // 100 == 2:

That would also stop strange codes like 25 or 2300 (if they might
ever appear though some future mystery) to be mistaken as in the
range 200-299.


--
Magnus Lycka (It's really Lyck&aring;), magnus at thinkware.se
Thinkware AB, Sweden, www.thinkware.se
I code Python ~ The shortest path from thought to working program 




From andrew-twisted at puzzling.org  Fri May 23 21:27:53 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sat, 24 May 2003 11:27:53 +1000
Subject: [Twisted-Python] SMTP patch
In-Reply-To: <3ECE1AD4.C5973D75@engcorp.com>
References: <200305221448.h4MEmZw2004905@fido.strakt.com> <20030523010524.GA9978@frobozz> <20030523030253.GB28981@meson.dyndns.org> <20030523031335.GD9978@frobozz> <3ECE1AD4.C5973D75@engcorp.com>
Message-ID: <20030524012753.GB11368@frobozz>

On Fri, May 23, 2003 at 08:57:56AM -0400, Peter Hansen wrote:
> Andrew Bennetts wrote:
> > 
> > Of course, if the status code was left as a string, then you could simply do
> > "if code.startswith('2'):"  :)
> 
> if str(code).startswith('2'):  ??

Note the words "if the status code was left as a string"  :)

-Andrew.




From danielwaites at earthlink.net  Fri May 23 23:49:43 2003
From: danielwaites at earthlink.net (Daniel Waites)
Date: Fri, 23 May 2003 22:49:43 -0500
Subject: [Twisted-Python] update for MANIFEST.in
Message-ID: <3ECEEBD7.6070602@earthlink.net>

apply the following patch to MANIFEST.in in CVS to get "setup.py 
bdist_rpm" working again.

33,35c33
< recursive-include twisted *.c
< recursive-include twisted *.mgp *.html *.fla *.js *.swf
< recursive-include twisted/test *.pem *.message
---
 >

Note that RPM 4 (included in recent RedHat distros) will cause an 
assertion error at the end, because it builds a debuginfo rpm.  It still 
builds the rpms, though, under build/buildblahblah/rpm/RPMS .  This is a 
bug in Python 2.2 distutils.




From danielwaites at earthlink.net  Sat May 24 00:16:39 2003
From: danielwaites at earthlink.net (Daniel Waites)
Date: Fri, 23 May 2003 23:16:39 -0500
Subject: [Twisted-Python] Fixes for distutils (disregard previous mail)
Message-ID: <3ECEF227.7050906@earthlink.net>

Disregard my previous mail.  Sorry, but I got the diff backwards :(

The following patches will get "python setup.py bdist_rpm" from Python 
distutils working.  Also, I added some fixes for including the 
documentation in the rpm distribution.

Unfortunately, RPM 4 creates an extra debuginfo RPM when running 
rpmbuild.  This breaks bdist_rpm.py, since the distutils coder assumed 
only one binary RPM would be created.  This causes an assertion error, 
but the RPMs still get build before the error happens.  The RPMs are 
located in build/build-blahblah/rpm/RPMS/<arch>/


===================================================================
RCS file: /cvs/Twisted/MANIFEST.in,v
retrieving revision 1.9
diff -r1.9 MANIFEST.in
21a22
 > include ChangeLog
33c34,36
<
---
 > recursive-include twisted *.c
 > recursive-include twisted *.mgp *.html *.fla *.js *.swf
 > recursive-include twisted/test *.pem *.message
Index: setup.cfg
===================================================================
RCS file: /cvs/Twisted/setup.cfg,v
retrieving revision 1.3
diff -r1.3 setup.cfg
28c28,32
<
---
 > doc_files=ChangeLog
 >           CREDITS
 >           LICENSE
 >           README
 >           doc/


----------------

Daniel Waites
danielwaites at earthlink.net




From screwtape at froup.com  Sat May 24 04:16:42 2003
From: screwtape at froup.com (Tim Allen)
Date: Sat, 24 May 2003 18:16:42 +1000
Subject: [Twisted-Python] mktap web --resource-script
Message-ID: <0CEBED8C-8DC0-11D7-833E-003065D61A3E@froup.com>

I've started playing with Twisted Web as a way of trying to purge the 
negative emotions I've associated with server-side scripting due to 
working with ASP every day, but I've hit a bit of a snag.

I could just set up a web.tap file to server ~/public_html, but I 
thought it'd be cool to write the structure of my site in python with 
.putChild() (so I can put all the cool generation code in Python 
modules, rather than parse-every-time .rpy files). The basic script I 
started with looks like this:

	from twisted.web import server, resource as rs

	class IndexPage(rs.Resource):
     	def render(self, request):
         	return "<i>frangipanni</i>"

(I import resource as rs because occasionally I want to refer to 
rs.Resource after defining the magic 'resource' variable, and writing 
'resource.Resource' leads to all manner of pain.)

I made a file like the above called "index.rpy" with the following line 
at the end:

	resource = IndexPage()

and made a tap with:

	mktap web --resource-script=/path/to/index.py

and ran it with:

	twistd --nodaemon -f web.tap

Every time I went to http://localhost:8080/ I got a 404 error ("No Such 
Resource: No Such Child Resource"). Poking around with the IndexPage 
class, I discovered getChild was being called for a child named "", and 
failing.

So I tried making a script to start my website, taking the original 
script and adding:

	#!/usr/bin/env python
	from twisted.internet import app

to the top and:
	
	resource = IndexPage()

	site = server.Site(resource)
	application = app.Application('web')
	application.listenTCP(8080, site)
	application.run()

to the end. Same problem.

After mucking around, I changed the 'resource' line above to be:

	resource = rs.Resource()
	resource.putChild("", IndexPage())

...which worked! I then went back to my index.rpy file to try and use 
it to generate a tap. index.rpy now looks like this:

	from twisted.web import server, resource as rs

	class IndexPage(rs.Resource):
	    def render(self, request):
	        return "<i>frangipanni</i>"
	
	resource = rs.Resource()
	resource.putChild("", IndexPage())

...and still fails in exactly the same way.

I'm using CVS Twisted, and Python 2.2.2 on Mac OS X. What am I missing?




From cce at clarkevans.com  Sat May 24 08:55:32 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Sat, 24 May 2003 12:55:32 +0000
Subject: [Twisted-Python] protocol flows
Message-ID: <20030524125532.GA48258@doublegemini.com>

Ok.  Flow has gone through a rather largish growth 
period in the last week.  Improvments include:

  1.  It now supports protocols, ie, you can use generators
      to build protocols.   This is not complete, nor is it
      documented well, but that will come in time.

      Currently it only supports protocols with one callback, 
      but the flow.py module is quite close to supporting
      N callbacks via flow.Concurrent (which is still being
      tested and refined).

      The flow support for protocols still has some issues
      hiding errors.  I've done quite a bit to make exceptions
      visible... but I'm still a twisted newbie, and a few are
      slipping through the cracks (or rather hiding between
      the cracks).   The process of making user-level errors
      clearly reported is on-going.  

  2.  It has quite a few speed improvments, overall flow isn't
      fast beacuse it basically implements cooperative 
      multitasking.  Generally, given noop functions, flow
      is about 5-7x slower than direct generators.  However,
      most items are not noop, so the actual factor in practice
      is more like 20% to 2x slower.   Not a bad price for 
      relatively easy to read code.

      I'm not sure how many optimizations are possible; one 
      recent optimization speeded up cases whith lots of little
      results (but slowed larger more infrequent results).  This
      optimization was due to exarkun's suggestion.   Anyway, 
      this change I'm certain has introduced bugs, but they will
      be squashed in time.

      Of course, writing the whole module in "C" would give a 
      big bonus.   However, flow must reach serious stability
      and a large user base before that is taken on.  I think
      that the speedup from C coding would be quite significant,
      but not earth-shattering.

  3.  A new Callback stage was added.  This was needed for 
      protocol support, but can be useful standalone.   Other
      stages include a List and String stage.  Not that those
      are horribly useful, but they do help to illustrate 
      what is going on, so I figured they'd be nice to have.

  4.  Some serious refactorings.  Most importantly in this one
      is a CallLater instruction.  flow.Threaded is much faster
      with this change.   If you were following the source, I'd
      start from the top down again.   

A few things to note:

  A.  Some of the interface has changed for those not using
      for-each.   In particular, the state functions (isFailure, etc.)
      are gone as they were horribly slow.  Furthermore, stage.result
      is now stage.results.   

      If you were using next() explicitly or implicitly via the
      for-loop, then you will have no problems; as this aspect of
      the interface hasn't changed.

  B.  This module is approaching stability.  I don't expect many 
      more changes... so, if you have comments.  Please... let's
      hear them.

  C.  I don't know if/when flow will be added to twisted, so
      it's still a use-at-yer-risk

Short-term plans:

  I.   Get the protocol to support multiple callbacks

  II.  Add more regression tests, especially ones with
       icky user-level failures to make sure that errors
       are being propigated.

  III. Start writing a few 'flow-filters' and such that work
       with flow protocols.  For instance, one filter could
       be the equivalent of LineReceiver.  Perhaps refactor
       common code into a separate module...

  IV.  Update/improve the documentation, flow.html


Here is an echo "flowprotocol":

        from __future__ import generators
        import flow
        from twisted.internet import protocol, reactor
        PORT = 8392
        
        print "client                   server"
        print "-------------------      ---------------------"
        def echoServer(conn):
            print "                         connected, now wait for client"
            yield conn
            print "                         client responded"
            for data in conn:
                print "                         received '%s', sending back" %
        data
                yield data
                print "                         waiting for client again"
                yield conn
            print "                         disconnected"
        
        server = protocol.ServerFactory()
        server.protocol = flow.makeProtocol(echoServer)
        reactor.listenTCP(PORT,server)
        
        def echoClient(conn):
            print "connect and send"
            yield "Hello World"    # sending data
            print "waiting for server"
            yield conn
            print "received '%s'" % conn.next()
            print "sending more"
            yield "Another Line"
            print "waiting for server"
            yield conn
            print "received '%s'" % conn.next()
            reactor.callLater(0,reactor.stop)
            print "disconnecting"
        
        client = protocol.ClientFactory()
        client.protocol = flow.makeProtocol(echoClient)
        reactor.connectTCP("localhost", PORT, client)
        
        reactor.run()

Which produces...
        
        client                   server
        -------------------      ---------------------
        connect and send
        waiting for server
                                 connected, now wait for client
                                 client responded
                                 received 'Hello World', sending back
                                 waiting for client again
        received 'Hello World'
        sending more
        waiting for server
                                 received 'Another Line', sending back
                                 waiting for client again
        received 'Another Line'
        disconnecting
                                 disconnected
        

That's it.

Clark       
 



From jml at mumak.net  Sun May 25 07:27:07 2003
From: jml at mumak.net (Jonathan M. Lange)
Date: Sun, 25 May 2003 21:27:07 +1000
Subject: [Twisted-Python] Getting Rid of Application in a Compatible Way
In-Reply-To: <20030523070247.10334.qmail@green.zadka.com>
References: <20030523070247.10334.qmail@green.zadka.com>
Message-ID: <20030525112707.GB6613@mumak.net>

On Fri, May 23, 2003 at 07:02:47AM -0000, Moshe Zadka wrote:
Subject: Getting rid of Application
>
> I suggest to write ApplicationService classes which look like:
> class TCPListener(ApplicationService):
>   ...
> Now, instead of application.listenTCP we can use
> 
> TCPListener(8080, server.Site(resource), "foo").setServiceParent(application)
> 

Why do we want to get rid of Application?

jml
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030525/0b528b7b/attachment.pgp 

From m at moshez.org  Sun May 25 01:12:53 2003
From: m at moshez.org (Moshe Zadka)
Date: 25 May 2003 05:12:53 -0000
Subject: [Twisted-Python] Getting Rid of Application in a Compatible Way
In-Reply-To: <20030525112707.GB6613@mumak.net>
References: <20030525112707.GB6613@mumak.net>, <20030523070247.10334.qmail@green.zadka.com>
Message-ID: <20030525051253.13590.qmail@green.zadka.com>

On Sun, 25 May 2003, jml at mumak.net (Jonathan M. Lange) wrote:

> Why do we want to get rid of Application?

Because it's a mess. An Application should be nothing more than a
MultiService. Then you can *really* partition your applications however
you want to.
-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From itamar at itamarst.org  Sun May 25 09:15:00 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 25 May 2003 09:15:00 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] Boatloads of things, from Anders Hammarquist.
In-Reply-To: <E19JUFg-0000tf-00@pyramid.twistedmatrix.com>
References: <E19JUFg-0000tf-00@pyramid.twistedmatrix.com>
Message-ID: <20030525091500.7a938028.itamar@itamarst.org>

Move the LimitedLog to twisted.python.logfile, maybe? Seems like a
better place. 

And many thanks to JP for finally checking this in.



From itamar at itamarst.org  Sun May 25 09:17:44 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 25 May 2003 09:17:44 -0400
Subject: [Twisted-Python] Fixes for distutils (disregard previous mail)
In-Reply-To: <3ECEF227.7050906@earthlink.net>
References: <3ECEF227.7050906@earthlink.net>
Message-ID: <20030525091744.120cc5dd.itamar@itamarst.org>

On Fri, 23 May 2003 23:16:39 -0500
Daniel Waites <danielwaites at earthlink.net> wrote:

> The following patches will get "python setup.py bdist_rpm" from Python
> 
> distutils working.  Also, I added some fixes for including the 
> documentation in the rpm distribution.

Thanks. However, we do have a .spec somewhere in the tarball - have you
tried it out?

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From itamar at itamarst.org  Sun May 25 09:27:05 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 25 May 2003 09:27:05 -0400
Subject: [Twisted-Python] Serving HTTP requests (was: Bug?)
In-Reply-To: <20030523050759.GH9978@frobozz>
References: <3ECC9374.50500@home.wari.org>
	<3ECCF4C7.3020406@home.wari.org>
	<3ECDA14E.8020604@home.wari.org>
	<20030523044013.GF9978@frobozz>
	<3ECDAA64.6040500@home.wari.org>
	<20030523050759.GH9978@frobozz>
Message-ID: <20030525092705.088cb7e3.itamar@itamarst.org>

in 0.9, there is no version, you do:

   GET /foo

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From andrew-twisted at puzzling.org  Sun May 25 10:38:41 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 26 May 2003 00:38:41 +1000
Subject: [Twisted-Python] Serving HTTP requests (was: Bug?)
In-Reply-To: <20030525092705.088cb7e3.itamar@itamarst.org>
References: <3ECC9374.50500@home.wari.org> <3ECCF4C7.3020406@home.wari.org> <3ECDA14E.8020604@home.wari.org> <20030523044013.GF9978@frobozz> <3ECDAA64.6040500@home.wari.org> <20030523050759.GH9978@frobozz> <20030525092705.088cb7e3.itamar@itamarst.org>
Message-ID: <20030525143841.GA511@frobozz>

On Sun, May 25, 2003 at 09:27:05AM -0400, Itamar Shtull-Trauring wrote:
> in 0.9, there is no version, you do:
> 
>    GET /foo

Sure, but what clients still use 0.9?  HTTP/1.0 is simple enough that I
wouldn't expect much software to use 0.9 anymore.

Also, it seems unlikely to me that sending "POST  HTTP/1.0" would be the
product of a HTTP/0.9 client, so I think there's still some room for
improvement.  Perhaps check that if the 'path' starts with "HTTP/", and if
so don't treat it as HTTP/0.9.  I'll make a patch if people think this
sounds sane.

-Andrew.




From glyph at twistedmatrix.com  Sun May 25 17:19:23 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 25 May 2003 17:19:23 -0400
Subject: [Twisted-Python] Serving HTTP requests (was: Bug?)
In-Reply-To: <20030525143841.GA511@frobozz>
Message-ID: <8E421D5E-8EF6-11D7-AC3E-000393C9700E@twistedmatrix.com>

On Sunday, May 25, 2003, at 10:38 AM, Andrew Bennetts wrote:

> Perhaps check that if the 'path' starts with "HTTP/", and if
> so don't treat it as HTTP/0.9.

This sounds rather specific to one problem.  It would seem more 
reasonable to me to check whether the path starts with '/' - I think 
this is mandated by the spec?




From exarkun at intarweb.us  Sun May 25 17:27:30 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Sun, 25 May 2003 17:27:30 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] Boatloads of things, from Anders Hammarquist.
In-Reply-To: <20030525091500.7a938028.itamar@itamarst.org>
References: <E19JUFg-0000tf-00@pyramid.twistedmatrix.com> <20030525091500.7a938028.itamar@itamarst.org>
Message-ID: <20030525212730.GA17491@meson.dyndns.org>

On Sun, May 25, 2003 at 09:15:00AM -0400, Itamar Shtull-Trauring wrote:
> Move the LimitedLog to twisted.python.logfile, maybe? Seems like a
> better place. 

  Probably.  I'm pondering whether it will actually stay in the long term,
though.  Sometime soon we will have SMTP auth, and I'd like to avoid seeing
passwords or password hashes ending up in logfiles.

  Anders, any thoughts on this?

  Jp

-- 
Lowery's Law:
        If it jams -- force it.  If it breaks, it needed replacing anyway.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030525/84ba1f34/attachment.pgp 

From itamar at itamarst.org  Sun May 25 20:28:09 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 25 May 2003 20:28:09 -0400
Subject: [Twisted-Python] Serving HTTP requests (was: Bug?)
In-Reply-To: <8E421D5E-8EF6-11D7-AC3E-000393C9700E@twistedmatrix.com>
References: <20030525143841.GA511@frobozz>
	<8E421D5E-8EF6-11D7-AC3E-000393C9700E@twistedmatrix.com>
Message-ID: <20030525202809.2afd7c67.itamar@itamarst.org>

On Sun, 25 May 2003 17:19:23 -0400
Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> This sounds rather specific to one problem.  It would seem more 
> reasonable to me to check whether the path starts with '/' - I think 
> this is mandated by the spec?

Oh, we need to do something to fix it. But, how about just dropping 0.9
support?
(I don't want to check for / since that means reusing protocol for
proxies is harder.)

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From dalke at dalkescientific.com  Mon May 26 00:01:57 2003
From: dalke at dalkescientific.com (Andrew Dalke)
Date: Sun, 25 May 2003 22:01:57 -0600
Subject: [Twisted-Python] SOAP and XML-RPC stuff
Message-ID: <CBA5E533-8F2E-11D7-A8E6-000393C92466@dalkescientific.com>

http://www.twistedmatrix.com/documents/howto/xmlrpc

Has a link under

  "In addition, XML-RPC published methods can return  
twisted.python.defer.Deferred"

The last word is hyperlinked to
    
http://twistedmatrix.com/documents/TwistedDocs/current/api/public/ 
twisted.python.defer.Deferred.html

which does not exist.
   ==
http://twistedmatrix.com/documents/TwistedDocs/current/api/public/ 
twisted.web.xmlrpc.XMLRPC.html
says
  Faults,  Binray, Boolean, DateTime, Deferreds, or Handler instances.

typo: "Binray" --> "Binary"

   ==

Here's a patch to work with SOAPpy 0.10

--- /usr/local/lib/python2.3/site-packages/twisted/web/soap.py  Sun May  
25 21:46:12 2003
+++ /Users/dalke/ftps/Twisted-1.0.5/twisted/web/soap.py Wed Oct 23  
19:55:20 2002
@@ -13,14 +13,11 @@
  """

  # SOAPpy
-try:
-  import SOAPpy as SOAP
-except ImportError:
-  import SOAP
+import SOAP

-  # fix 2.2 issues with SOAP
-  SOAP.SOAPBuilder.dump_str = SOAP.SOAPBuilder.dump_string
-  SOAP.SOAPBuilder.dump_dict = SOAP.SOAPBuilder.dump_dictionary
+# fix 2.2 issues with SOAP
+SOAP.SOAPBuilder.dump_str = SOAP.SOAPBuilder.dump_string
+SOAP.SOAPBuilder.dump_dict = SOAP.SOAPBuilder.dump_dictionary

  # twisted imports
  from twisted.web import server, resource


Or, in short version, change

# SOAPpy
import SOAP

to

# SOAPpy
try:
   import SOAPpy as SOAP
except ImportError:
   import SOAP

   # fix 2.2 issues with SOAP
   SOAP.SOAPBuilder.dump_str = SOAP.SOAPBuilder.dump_string
   SOAP.SOAPBuilder.dump_dict = SOAP.SOAPBuilder.dump_dictionary

(I checked - 0.10 handles the typename changes from 2.2)


    ===

How do I run both an XML-RPC and a SOAP server on the same server?
I tried something like

def main():
     from twisted.internet.app import Application
     app = Application("xmlrpc")

     r = XMLRPC_Calc()
     app.listenTCP(7080, server.Site(r))

     r = SOAP_Calc()
     app.listenTCP(7080, server.Site(r))

     return app

application = main()

if __name__ == "__main__":
     application.run(save=0)


But that doesn't work - the SOAP requests go to the XML-RPC server.
Is there some way to say that "/RPC2" is for XML-RPC and that "/SOAP"
is for SOAP?

					Andrew
					dalke at dalkescientific.com




From stuart.hungerford at anu.edu.au  Mon May 26 02:50:58 2003
From: stuart.hungerford at anu.edu.au (Stuart Hungerford)
Date: Mon, 26 May 2003 16:50:58 +1000
Subject: [Twisted-Python] getProcessOutput ok to use in a DeferredList?
Message-ID: <5.2.0.9.0.20030526164220.00b58628@anusf.anu.edu.au>

Hi all,

I have an application that uses a bunch of Deferred's to handle
blocking system calls and converting the results of those calls
to HTML.

I'd like to make use of the very neat DeferredList and also the
utility function getProcessOutput(). My understanding is that
getProcessOutput() returns a Deferred that returns a string of
the process output.

Are there any issues with passing a list of getProcessOutput()
results to a DeferredList?  I understand the DeferredList still
needs its own callback registered for completion of the list of
deferreds.

My initial tests with this setup just seem to suspend and not
return, which is almost certainly something I've misunderstood
in using Deferreds.


Has anyone done this before?






Cheers,

Stu

--
:: Stuart Hungerford (stuart.hungerford at anu.edu.au)
:: ANU Internet Futures Group




From andrew-twisted at puzzling.org  Mon May 26 03:15:34 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 26 May 2003 17:15:34 +1000
Subject: [Twisted-Python] SOAP and XML-RPC stuff
In-Reply-To: <CBA5E533-8F2E-11D7-A8E6-000393C92466@dalkescientific.com>
References: <CBA5E533-8F2E-11D7-A8E6-000393C92466@dalkescientific.com>
Message-ID: <20030526071534.GA5345@frobozz>

On Sun, May 25, 2003 at 10:01:57PM -0600, Andrew Dalke wrote:
> http://www.twistedmatrix.com/documents/howto/xmlrpc
> 
> Has a link under
> 
>  "In addition, XML-RPC published methods can return  
> twisted.python.defer.Deferred"
> 
> The last word is hyperlinked to
>    
> http://twistedmatrix.com/documents/TwistedDocs/current/api/public/ 
> twisted.python.defer.Deferred.html
> 
> which does not exist.

Thanks -- fixed in CVS.

> http://twistedmatrix.com/documents/TwistedDocs/current/api/public/ 
> twisted.web.xmlrpc.XMLRPC.html
> says
>  Faults,  Binray, Boolean, DateTime, Deferreds, or Handler instances.
> 
> typo: "Binray" --> "Binary"

Ditto.

> Here's a patch to work with SOAPpy 0.10

I'll let someone else more knowledgeable comment on this.

> How do I run both an XML-RPC and a SOAP server on the same server?
> I tried something like
> 
> def main():
>     from twisted.internet.app import Application
>     app = Application("xmlrpc")
> 
>     r = XMLRPC_Calc()
>     app.listenTCP(7080, server.Site(r))
> 
>     r = SOAP_Calc()
>     app.listenTCP(7080, server.Site(r))

Obviously you can't have multiple things listening on port 7080.  Perhaps
this should raise an exception, though, so as to not seem like it can.

Here you've constructed two seperate server.Site instances, i.e. Twisted Web
HTTP servers, but what you want is one Twisted Web server that does multiple
things.

> But that doesn't work - the SOAP requests go to the XML-RPC server.
> Is there some way to say that "/RPC2" is for XML-RPC and that "/SOAP"
> is for SOAP?

I suspect you can probably do:

    from twisted.web.resource import Resource
    
    root = Resource()           # An empty resource
    site = server.Site(root)
    root.putChild('RPC2', XMLRPC_Calc())
    root.putChild('SOAP', SOAP_Calc())
    
    app.listenTCP(7080, site)

-Andrew.




From andrew-twisted at puzzling.org  Mon May 26 03:28:23 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 26 May 2003 17:28:23 +1000
Subject: [Twisted-Python] getProcessOutput ok to use in a DeferredList?
In-Reply-To: <5.2.0.9.0.20030526164220.00b58628@anusf.anu.edu.au>
References: <5.2.0.9.0.20030526164220.00b58628@anusf.anu.edu.au>
Message-ID: <20030526072823.GB5345@frobozz>

On Mon, May 26, 2003 at 04:50:58PM +1000, Stuart Hungerford wrote:

> I'd like to make use of the very neat DeferredList and also the
> utility function getProcessOutput(). My understanding is that
> getProcessOutput() returns a Deferred that returns a string of
> the process output.

Your understanding is correct.

> Are there any issues with passing a list of getProcessOutput()
> results to a DeferredList?  I understand the DeferredList still
> needs its own callback registered for completion of the list of
> deferreds.

There's nothing special going on.  As far as a DeferredList is concerned,
all Deferreds are the same.  Where the Deferred comes from is irrelevant.

> My initial tests with this setup just seem to suspend and not
> return, which is almost certainly something I've misunderstood
> in using Deferreds.

I suspect you're right, you probably are misunderstanding something.  It's
hard to say what, though, without more information.  (But when something is
mysteriously freezing, it's hard to know what information to give!)

A DeferredList, by default, calls its callbacks *only when all of its
Deferreds have fired*.  (If some of the Deferreds fail, that's ok, just so
long as they all call their callback/errback at some point).  A DeferredList
has no way of reporting partial results.

I'm going to guess what your problem might be, based on a problem I once
had.  :)

If you have multiple Deferreds, some "depend" on others, DeferredList's
default behaviour isn't what you want.  By "depend" I mean if Deferred A
fails (and so fires its errback, not callback), then Deferred B will never
be called, i.e. B depends on A.  (This is not official terminology! :).

In that case, you probably want to use the fireOnOneErrback flag of
DeferredList.  This changes the behaviour of DeferredList so that it will
fire its callbacks as soon as either:
    - All its Deferreds have fired their callbacks, or
    - any of its Deferreds have fired an errback.

Does any of this help you?

-Andrew.




From iko at cd.chalmers.se  Mon May 26 08:06:15 2003
From: iko at cd.chalmers.se (Anders Hammarquist)
Date: Mon, 26 May 2003 14:06:15 +0200
Subject: [Twisted-Python] Re: [Twisted-commits] Boatloads of things, from Anders Hammarquist. 
In-Reply-To: <20030525212730.GA17491@meson.dyndns.org> 
References: <E19JUFg-0000tf-00@pyramid.twistedmatrix.com> <20030525091500.7a938028.itamar@itamarst.org> <20030525212730.GA17491@meson.dyndns.org> 
Message-ID: <200305261206.h4QC6G225594@haddock.cd.chalmers.se>

In a message of Sun, 25 May 2003 17:27:30 EDT, Jp Calderone writes:
>On Sun, May 25, 2003 at 09:15:00AM -0400, Itamar Shtull-Trauring wrote:
>> Move the LimitedLog to twisted.python.logfile, maybe? Seems like a
>> better place.=20
>
>  Probably.  I'm pondering whether it will actually stay in the long term,
>though.  Sometime soon we will have SMTP auth, and I'd like to avoid seeing
>passwords or password hashes ending up in logfiles.

Well, the idea isn't that it should end up in a log file, but rather
be used in "failed mail" reporting (which is why I didn't put it into
logfile. We discussed this after I send one of the first revisions of
the patch IIRC). But it needs reworking for when we add AUTH and TLS
support so that we only save relevant info.

/Anders

-- 
 -- Of course I'm crazy, but that doesn't mean I'm wrong.
Anders Hammarquist                                  | iko at cd.chalmers.se
Physics student, Chalmers University of Technology, | Hem: +46 31 88 48 50
G|teborg, Sweden.           RADIO: SM6XMM and N2JGL | Mob: +46 707 27 86 87



From 2002 at weholt.org  Mon May 26 10:26:31 2003
From: 2002 at weholt.org (Thomas Weholt)
Date: Mon, 26 May 2003 16:26:31 +0200
Subject: [Twisted-Python] HowTo  -- load a business-object  in a Twisted Web Server ??
Message-ID: <002701c32392$cf876460$0401a8c0@razor>

I need to load a business-object in a Twisted Web server serving static content and rpys, and it should be available in all parts of the application. It has to be able to run a method or methods at specified intervals, fetching some files from the net, scanning a filesystem or extracting data from a database, which in return will be available in the business-object in the web-server. What is the Twisted-way of doing this? The tasks the business-object will perform from time to time can be time consuming and probably blocking too. 

Should a start it in a seperate thread? What ? I need clues or a small example.

best regards and thanks in advance,
Thomas Weholt
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20030526/a422e850/attachment.htm 

From m at moshez.org  Mon May 26 12:08:54 2003
From: m at moshez.org (Moshe Zadka)
Date: 26 May 2003 16:08:54 -0000
Subject: [Twisted-Python] HowTo  -- load a business-object  in a Twisted Web Server ??
In-Reply-To: <002701c32392$cf876460$0401a8c0@razor>
References: <002701c32392$cf876460$0401a8c0@razor>
Message-ID: <20030526160854.23615.qmail@green.zadka.com>

On Mon, 26 May 2003, "Thomas Weholt" <2002 at weholt.org> wrote:
 
> I need to load a business-object in a Twisted Web server serving static 
> content and rpys, and it should be available in all parts of the 
> application. It has to be able to run a method or methods at specified 
> intervals, fetching some files from the net, scanning a filesystem or 
> extracting data from a database, which in return will be available in 
> the business-object in the web-server. What is the Twisted-way of doing 
> this? The tasks the business-object will perform from time to time can 
> be time consuming and probably blocking too.
> 
> Should a start it in a seperate thread? What ? I need clues or a small 
> example.

Please don't post in HTML to the list.

The correct Twisted way is to have an ApplicationService which does
all that, keeping track of tasks, and which has a "resource" attribute.
Deployment of that code is flexible, as it should be: one way would
be to add the ApplicationService to the Application, and in the .rpy
get the application, get the service by name and get the resource
from it.

I seriously doubt you "need" to perform blocking tasks, at least
in your code. Database can be abstracted with adbapi, scanning
a file system can easily be partitioned into small tasks, and
then you can use reactor.callLater(0,) to stay responsive and fetching
files from the net is easy in a nonblocking way (see web.client)
-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From Olivier.POYEN at clf-dexia.com  Mon May 26 12:55:54 2003
From: Olivier.POYEN at clf-dexia.com (POYEN OP Olivier (DCL))
Date: Mon, 26 May 2003 18:55:54 +0200
Subject: [Twisted-Python] [Tutor] Help on personnal Proxy
Message-ID: <8963D6370B323E4AA3241200F0EAF731235642@FCEXVEXM002.dcl.int.dexwired.net>


Hi all, 


I tried to read some parts of the how-to, tried to google around in order to create a simple personnal web proxy with no luck. 

For now, I don't want to do anything special, but having a proxy on my localhost, watching for my connections. Later, I may want to enhance its functionnality (a la "proxomitron")

I thought that twisted may certainly be the perfect tool to do that, and I thought this would be a good way to start using it. 

I know about the proxy class, but, when I try to use it:

(taken from Proxy class docstring):

from twisted.protocols import http
from twisted.web import proxy
from twisted.internet import reactor


f=http.HTTPFactory()
f.HTTPChannel=proxy.Proxy
reactor.listenTCP(8765,f)
reactor.run()

I then try an 'export http_proxy=http://localhost:8765' and 
wget http://localhost:8080 (where a nice twisted.web server is waiting)

Not working. 
Even a telnet on port 8765 shown that nothing is responding.

I then thougt about proxy.Proxy which perhaps need to be instanciated:

f.HTTPChannel=proxy.Proxy()

Same punition.

Then, I thougth that I certainly need to subclass my proxy to have it do some stuff: 

class myProx(proxy.Proxy):
    def connectionMade(self,*args):
        print "cool...."

    def dataReceived(self,*args):
        print args

I then again try with myProx *and*? myProx().
Nothing worked.


Well, I search for anything on the mailing list archive, but with no luck.


Do I have to say that any help or RTFM would be appreciated ! 


Thanx in advance,


OPQ
-------------- next part --------------
-----------------------------------------------------------------

Ce message est confidentiel ; son contenu ne represente en aucun

cas un engagement de la part de Dexia Credit Local ou de Dexia

CLF Banque. Toute publication, utilisation ou diffusion, meme

partielle, doit etre autorisee prealablement par l'emetteur. Si

vous n'etes pas destinataire de ce message, merci d'en avertir

immediatement l'expediteur.



This message is confidential ; its contents do not constitute a

commitment by Dexia Credit Local or Dexia CLF Banque. Any

unauthorised disclosure, use or dissemination, either whole or

partial, is prohibited. If you are not the intended recipient of

the message, please notify the sender immediately.

-----------------------------------------------------------------

Consultez notre site internet www.dexia-clf.fr

La cle d'une gestion optimisee du secteur public local

-----------------------------------------------------------------

From dalke at dalkescientific.com  Mon May 26 14:24:15 2003
From: dalke at dalkescientific.com (Andrew Dalke)
Date: Mon, 26 May 2003 12:24:15 -0600
Subject: [Twisted-Python] Re: SOAP and XML-RPC stuff
Message-ID: <417D72E8-8FA7-11D7-A91C-000393C92466@dalkescientific.com>

Andrew Bennetts:
 > Obviously you can't have multiple things listening on port 7080.  
Perhaps
 > this should raise an exception, though, so as to not seem like it can.

I figured the first was the case, but I didn't know if there was some
way to support content negotiation appropriately, so that a SOAP request
on a given URL goes to one handler and an XML-RPC request on the same
URL goes to another handler.

(Someday I would like to play around more with conneg, so I think
this is cute, but the realistic side of me says it's a bad idea.)


 > I suspect you can probably do:
 >    from twisted.web.resource import Resource
 >
 >    root = Resource()           # An empty resource
  ...

Bingo!  It works now, and I'm one step further on my way to
Twisted Enlightenment.  Thanks Andrew!

BTW, I looked up twisted.web.resource on the doc page at

http://www.twistedmatrix.com/documents/TwistedDocs/current/api/

I don't see 'twisted.web.resource' in the 'Everything' section
in the lower left, which means it should be labeled 'Not Quite
Everything.'  ;)

					Andrew
					dalke at dalkescientific.com




From heiko at ph0enix.homelinux.org  Mon May 26 15:14:42 2003
From: heiko at ph0enix.homelinux.org (Heiko Wundram)
Date: 26 May 2003 21:14:42 +0200
Subject: [Twisted-Python] Safe Pickling using banana and jelly
Message-ID: <1053976482.890.14.camel@d168.stw.stud.uni-saarland.de>

Hi to all!

Maybe this question has been answered elsewhere, but it doesn't seem to
be stated anywhere in the Twisted HOWTO's or any other documentation
safe the overall stance that jelly and banana are "replacements for
pickle aimed at safety, not speed":

Is unpickling _untrusted_ network data using banana and jelly a safe
thing? After a length check on the data has been done, discarding all
messages that are over 50k in size, of course... :)

Thanks for any reply. :)

Heiko.




From dalke at dalkescientific.com  Mon May 26 16:41:34 2003
From: dalke at dalkescientific.com (Andrew Dalke)
Date: Mon, 26 May 2003 14:41:34 -0600
Subject: [Twisted-Python] Safe Pickling using banana and jelly
In-Reply-To: <1053976482.890.14.camel@d168.stw.stud.uni-saarland.de>
Message-ID: <707F4930-8FBA-11D7-A91C-000393C92466@dalkescientific.com>

Heiko Wundram wrote:
> Is unpickling _untrusted_ network data using banana and jelly a safe
> thing? After a length check on the data has been done, discarding all
> messages that are over 50k in size, of course... :)

Having only used Twisted for about a day, cumulative, I am not
the best person to answer that.  However, it does seem that it
has a security hole I pointed out in Python's pickle package,
which is one of the reasons pickle is not to be trusted.

In brief, jelly will unjelly anything, including objects which
do destructive acts in the deallocator.  And some exist in
the standard Python libs.  Here's an example.

 >>> from twisted.spread import jelly
 >>> import tempfile
 >>> import StringIO
 >>> x = tempfile._TemporaryFileWrapper(StringIO.StringIO(""), "/blah")
 >>> del x
Exception exceptions.OSError: (2, 'No such file or directory', '/blah') 
in <bound method _TemporaryFileWrapper.__del__ of 
<tempfile._TemporaryFileWrapper instance at 0x626c60>> ignored
 >>> x = tempfile._TemporaryFileWrapper(StringIO.StringIO(""), "/blah")
 >>> jelly.jelly(x)
['tempfile._TemporaryFileWrapper', ['dictionary', ['close_called', 
['boolean', 'false']], ['name', '/blah'], ['file', 
['StringIO.StringIO', ['dictionary', ['softspace', 0], ['buflist', 
['list']], ['pos', 0], ['len', 0], ['closed', 0], ['buf', '']]]]]]
 >>> q = _
 >>> del x
Exception exceptions.OSError: (2, 'No such file or directory', '/blah') 
in <bound method _TemporaryFileWrapper.__del__ of 
<tempfile._TemporaryFileWrapper instance at 0x626c60>> ignored
 >>> jelly.unjelly(q)
<tempfile._TemporaryFileWrapper instance at 0x626c60>
 >>> 1
Exception exceptions.OSError: (2, 'No such file or directory', '/blah') 
in <bound method _TemporaryFileWrapper.__del__ of 
<tempfile._TemporaryFileWrapper instance at 0x626c60>> ignored
1
 >>>

However, I don't know enough about how jellied data
structures are handled when they come over the wire to
know if they are indeed prone to this sort of attack.
Eg, one solution is to state that only certain objects can
be unpickled, which is the suggested solution for Python's
stock pickles.

					Andrew
					dalke at dalkescientific.com




From itamar at itamarst.org  Mon May 26 17:43:17 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 26 May 2003 17:43:17 -0400
Subject: [Twisted-Python] Safe Pickling using banana and jelly
In-Reply-To: <707F4930-8FBA-11D7-A91C-000393C92466@dalkescientific.com>
References: <1053976482.890.14.camel@d168.stw.stud.uni-saarland.de>
	<707F4930-8FBA-11D7-A91C-000393C92466@dalkescientific.com>
Message-ID: <20030526174317.216d7dd9.itamar@itamarst.org>

On Mon, 26 May 2003 14:41:34 -0600
Andrew Dalke <dalke at dalkescientific.com> wrote:

> Having only used Twisted for about a day, cumulative, I am not
> the best person to answer that.  However, it does seem that it
> has a security hole I pointed out in Python's pickle package,
> which is one of the reasons pickle is not to be trusted.
> 
> In brief, jelly will unjelly anything, including objects which
> do destructive acts in the deallocator.  And some exist in
> the standard Python libs.  Here's an example.

This is... inaccurate. Jelly has security policies. The one used in the
jelly module's jelly() and unjelly() module-level functions is setup by
default for allowing anything, so as to make using it easy.

However, the security policy for jelly in the network protocol PB only
allows deserializing classes which have been explicitly approved by the
user.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From radix at twistedmatrix.com  Mon May 26 18:31:06 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 26 May 2003 18:31:06 -0400
Subject: [Twisted-Python] Safe Pickling using banana and jelly
In-Reply-To: <707F4930-8FBA-11D7-A91C-000393C92466@dalkescientific.com>; from dalke@dalkescientific.com on Mon, May 26, 2003 at 16:41:34 -0400
References: <707F4930-8FBA-11D7-A91C-000393C92466@dalkescientific.com>
Message-ID: <20030526223106.GC16017@toshi.anaprd01.md.comcast.net>

On 2003.05.26 16:41, Andrew Dalke wrote:
> Heiko Wundram wrote:
> > Is unpickling _untrusted_ network data using banana and jelly a safe
> > thing? After a length check on the data has been done, discarding all
> > messages that are over 50k in size, of course... :)
> 
> Having only used Twisted for about a day, cumulative, I am not
> the best person to answer that.  However, it does seem that it
> has a security hole I pointed out in Python's pickle package,
> which is one of the reasons pickle is not to be trusted.
> 
> In brief, jelly will unjelly anything, including objects which
> do destructive acts in the deallocator.  And some exist in
> the standard Python libs.  Here's an example.

Well, by default PB (which I assume is what Heiko is using) does
not allow sending of arbitrary objects, only objects that have been 
registered -- and it's easy to make jelly disable arbitrary objects as 
well.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From dalke at dalkescientific.com  Mon May 26 19:29:06 2003
From: dalke at dalkescientific.com (Andrew Dalke)
Date: Mon, 26 May 2003 17:29:06 -0600
Subject: [Twisted-Python] Safe Pickling using banana and jelly
In-Reply-To: <20030526174317.216d7dd9.itamar@itamarst.org>
Message-ID: <D7D0C244-8FD1-11D7-A91C-000393C92466@dalkescientific.com>

Itamar Shtull-Trauring:
> This is... inaccurate. Jelly has security policies. The one used in the
> jelly module's jelly() and unjelly() module-level functions is setup by
> default for allowing anything, so as to make using it easy.
>
> However, the security policy for jelly in the network protocol PB only
> allows deserializing classes which have been explicitly approved by the
> user.

Mmmm, I see the security code, and it looks safe enough against my
attack.  (I saw the code originally, but I went the wrong way down
an if-statement.  I saw a __class__ being created, but hadn't realized
what it meant to be unjellyable.)

Here's another attack: what happens if I pass back a string which
encodes [[[[[[[[[[ ... ]]]]]]]]]] where there are enough []s to
break the recursion limit?

 >>> banana.encode(jelly.jelly([]))
'\x01\x80\x04\x82list'
 >>> banana.encode(jelly.jelly([[]]))
'\x02\x80\x04\x82list\x01\x80\x04\x82list'
 >>> banana.encode(jelly.jelly([[[]]]))
'\x02\x80\x04\x82list\x02\x80\x04\x82list\x01\x80\x04\x82list'
 >>>

The safe unjelly code uses a recursive call, so there can be at
most 1,000 levels.  Each level takes 8 characters, so I can
break the recursion limit at 8,000 bytes, and generate a
RuntimeError.  It looks like this exception is caught in
an 'except:' in _recvMessage, so that's okay (except for a
few OSes with a small stack size) ... except what happens
if the connection then closes and answerRequired is set and
so _sendError is called, which calls Banana's sendEncoded
which does a transport.write which fails .... ahh, that's
too deep into the way Twisted works for me to follow any
further, but it looks like write is guaranteed to catch all
underlying errors.

So my first pass suggests the code can be used in a resonable
secure way.

BTW, in my review I saw that jelly.py uses this code:

     for i in dir(module):
         i_ = getattr(module, i)
         if type(i_) == types.ClassType:
             if issubclass(i_, baseClass):
                 setUnjellyableForClass('%s%s' % (prefix, i), i_)

Is there any reason this code doesn't use "for i, i_ in 
module.__dict__.items()"?
I point it out because formally speaking the definition of "dir()" is
documented as "primarily as a convenience for use at an interactive 
prompt"
and "its detailed behavior may change across releases."  OTOH, it ain't
broke, so no need to fix it.

For completeness,

% fgrep 'dir(' */*.py | grep -v '[a-z]dir'
im/gtkcommon.py:        for n in dir(base):
     # the behaviour of dir has changed since this was created.
     # I think in newer Pythons it isn't needed.  But it doesn't
     # break and is needed for older ones.

manhole/explorer.py:        for i in dir(instance):
     # The method is documented as
     #       Note these are only the *instance* methods and members --
     #       if you want the class methods, you'll have to look up the 
class.
     #
     # However, with the change of dir behaviour in newer Pythons, this
     # is no longer true -- all names are returned.  Fix doc or fix code?


manhole/explorer.py:        for i in dir(theClass):
     # not sure which behaviour is desired

names/authority.py:        for record in [x for x in dir(dns) if 
x.startswith('Record_')]:
     # should be
     #   for record in [v for k,v in dns.__dict__.items() if 
k.startswith('Record_')]:
     # and get rid of the next line

spread/jelly.py:    for i in dir(module):
spread/newjelly.py:    for i in dir(module):
    # mentioned above
trial/unittest.py:        names = dir(module)
% fgrep 'dir(' */*/*.py | grep -v '[a-z]dir'
conch/ssh/connection.py:for v in dir(connection):
conch/ssh/transport.py:for v in dir(transport):
     # connection.__dict__.names() also works

conch/ssh/userauth.py:for v in dir(userauth):
     # userauth.__dict__ also works

spread/ui/gtk2util.py:        for k in dir(self):
     # not sure, but here's the context
     #
     #    # mold can go away when we get a newer pygtk (post 1.99.14)
     #    mold = {}
     #    for k in dir(self):
     #        mold[k] = getattr(self, k)
     #
     #  Should it go away?


					Andrew
					dalke at dalkescientific.com




From itamar at itamarst.org  Mon May 26 19:52:58 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 26 May 2003 19:52:58 -0400
Subject: [Twisted-Python] Please fix your code to not use dir()
In-Reply-To: <D7D0C244-8FD1-11D7-A91C-000393C92466@dalkescientific.com>
References: <20030526174317.216d7dd9.itamar@itamarst.org>
	<D7D0C244-8FD1-11D7-A91C-000393C92466@dalkescientific.com>
Message-ID: <20030526195258.4852afc0.itamar@itamarst.org>

On Mon, 26 May 2003 17:29:06 -0600
Andrew Dalke <dalke at dalkescientific.com> wrote:

> Is there any reason this code doesn't use "for i, i_ in 
> module.__dict__.items()"?

Indeed, these are probably all bugs. Thanks for taking the time to point
this out.

I've seen bugs caused by this already, so please, everyone, use
twisted.python.reflect or python's inspect module, not dir().

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From selwyn.mccracken at paradise.net.nz  Mon May 26 20:16:51 2003
From: selwyn.mccracken at paradise.net.nz (Selwyn McCracken)
Date: 27 May 2003 12:16:51 +1200
Subject: [Twisted-Python] sshclient and sshserver examples
Message-ID: <1053994611.2392.84.camel@mccracken.otago.ac.nz>

hi,

I am trying to run the sshsimpleclient.py from the CVS examples folder.
However I get the following error. 

Traceback (most recent call last):
  File "/home/selwyn/.ssh/sshClient.py", line 44, in ?
    class TrueChannel(connection.SSHChannel):
AttributeError: 'module' object has no attribute 'SSHChannel'

rummaging around in connection, there doesn't appear to be the
appropriate class available.

Help greatly appreciated.
Selwyn




From acapnotic at twistedmatrix.com  Mon May 26 21:13:05 2003
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 26 May 2003 18:13:05 -0700
Subject: [Twisted-Python] Woven using wrong model adapter
Message-ID: <1053997977.19896.19.camel@troglodyte.funhouse>

I have:

components.registerAdapter(model.ObjectWrapper,
                           interests.InterestChangeReport,
                           wovenInterfaces.IModel)

class Page(page.Page):
    def wmfactory_report(self, request):
        if sometimes:
            return deferredInterestChangeReport()
        else:
            return ''

If the first page I serve after starting the server gets an
InterestChangeReport, then everything works just fine.  However, if the
first page served gets '', then any future page that gets an
InterestChangeReport dies with an exception:  "the submodel was not
found in [<twisted.web.woven.model.StringModel instance at 0x85167c4:
wrapped data: <InterestChangeReport instance...>"

So why does woven persist in using the StringModel adapter in this case,
and how can I get it to stop?

Don't know if this is related or not, but the log shows messages like:
"Warning: There was no parent for node [...]; node not mutated."  Is
that something I should be concerned about?

Thanks,

 - Kevin


-- 
The moon is waning crescent, 16.8% illuminated, 25.6 days old.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030526/bdd105c7/attachment.pgp 

From andrew-twisted at puzzling.org  Mon May 26 21:18:34 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 27 May 2003 11:18:34 +1000
Subject: [Twisted-Python] Re: SOAP and XML-RPC stuff
In-Reply-To: <417D72E8-8FA7-11D7-A91C-000393C92466@dalkescientific.com>
References: <417D72E8-8FA7-11D7-A91C-000393C92466@dalkescientific.com>
Message-ID: <20030527011834.GA7502@frobozz>

On Mon, May 26, 2003 at 12:24:15PM -0600, Andrew Dalke wrote:
> 
> Bingo!  It works now, and I'm one step further on my way to
> Twisted Enlightenment.  Thanks Andrew!

You're welcome! [1]

> BTW, I looked up twisted.web.resource on the doc page at
> 
> http://www.twistedmatrix.com/documents/TwistedDocs/current/api/
> 
> I don't see 'twisted.web.resource' in the 'Everything' section
> in the lower left, which means it should be labeled 'Not Quite
> Everything.'  ;)

I do, however, see "twisted.web.resource.Resource"...

-Andrew.

[1] I've never actually written any Twisted Web code, but it seems I've now
    spent enough time reading the mailing list and documentation checkins
    that I can now write untested code that works ;)
    



From radix at twistedmatrix.com  Mon May 26 21:37:07 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 26 May 2003 21:37:07 -0400
Subject: [Twisted-Python] Woven using wrong model adapter
In-Reply-To: <1053997977.19896.19.camel@troglodyte.funhouse>; from acapnotic@twistedmatrix.com on Mon, May 26, 2003 at 21:13:05 -0400
References: <1053997977.19896.19.camel@troglodyte.funhouse>
Message-ID: <20030527013707.GE16017@toshi.anaprd01.md.comcast.net>

On 2003.05.26 21:13, Kevin Turner wrote:
> I have:
> 
> components.registerAdapter(model.ObjectWrapper,
>                            interests.InterestChangeReport,
>                            wovenInterfaces.IModel)
> 
> class Page(page.Page):
>     def wmfactory_report(self, request):
>         if sometimes:
>             return deferredInterestChangeReport()
>         else:
>             return ''

...
 
> So why does woven persist in using the StringModel adapter in this case,
> and how can I get it to stop?

IIRC, A workaround is to 1) put the conditional in a special wvfactory rather 
than/in addition to your wmfactory, or 2) call self.invalidateCache() every 
time the result of the conditional changes (or just on every request, if you
don't care)

> 
> Don't know if this is related or not, but the log shows messages like:
> "Warning: There was no parent for node [...]; node not mutated."  Is
> that something I should be concerned about?

dunno

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From stuart.hungerford at anu.edu.au  Mon May 26 21:42:49 2003
From: stuart.hungerford at anu.edu.au (Stuart Hungerford)
Date: Tue, 27 May 2003 11:42:49 +1000
Subject: [Twisted-Python] getProcessOutput ok to use in a
  DeferredList?
In-Reply-To: <20030526113743.8545.33076.Mailman@pyramid.twistedmatrix.co
 m>
Message-ID: <5.2.0.9.0.20030527113924.0269cc48@anusf.anu.edu.au>

 > [...]
 >I'm going to guess what your problem might be, based on a problem I once
 >had.  :)
 >
 >If you have multiple Deferreds, some "depend" on others, DeferredList's
 >default behaviour isn't what you want.  By "depend" I mean if Deferred A
 >fails (and so fires its errback, not callback), then Deferred B will never
 >be called, i.e. B depends on A.  (This is not official terminology! :).
 >
 >In that case, you probably want to use the fireOnOneErrback flag of
 >DeferredList.  This changes the behaviour of DeferredList so that it will
 >fire its callbacks as soon as either:
 >    - All its Deferreds have fired their callbacks, or
 >    - any of its Deferreds have fired an errback.

    Aha! A brilliant piece of remote empathetic debugging ;-)  The lack of
    an errback was masking an error from the Deferreds.  Many thanks.



Cheers,

Stu

--
:: Stuart Hungerford (stuart.hungerford at anu.edu.au)
:: ANU Internet Futures Group




From twisted at eholm.com  Tue May 27 00:42:17 2003
From: twisted at eholm.com (Eric Holm)
Date: 26 May 2003 21:42:17 -0700
Subject: [Twisted-Python] [Tutor] Help on personnal Proxy
In-Reply-To: <8963D6370B323E4AA3241200F0EAF731235642@FCEXVEXM002.dcl.int.dexwired.net>
References: <8963D6370B323E4AA3241200F0EAF731235642@FCEXVEXM002.dcl.int.dexwired.net>
Message-ID: <u7k8dgfva.fsf@eholm.com>

"POYEN OP Olivier (DCL)" <Olivier.POYEN at clf-dexia.com> writes:
> I tried to read some parts of the how-to, [...] with no luck. 
> 
The short answer to your question is to replace:

   f.HTTPChannel=proxy.Proxy

with:

   f.protocol=proxy.Proxy

Or, I've written a (yet another) web proxy that you might 
want to try too.  Using my MinProxy (for Minimal proxy) should 
be fairly straightforward, simply dump MinProxy.py and 
HttpHeader.py into the same directory, and then run MinProxy 
(there's no #!, so you'll have to type python MinProxy.py 
if you're not on Windows).

If you want to look at (or mess with) the pages as they flow 
through MinProxy, it's a bit different (hopefully simpler) 
than web.Proxy.  Simply subclass MinProxy, and then override:

  onHeaderFromServer( self, header ):
  onHeaderFromServer( self, header ):
  onBodyFromBrowser( self, header, body ):
  onBodyFromServer( self, header, body ):

depending on what you're interested in.  If you override them, 
you'll probably want to call:

  self.sendLinesToServer( header )
  self.sendLinesToBrowser( header )
  self.sendBufferToServer( body )
  self.sendBufferToBrowser( body )

One other difference is that the headers in the above methods 
are encapsulated as HTTPHeader objects.  When treated as lists, 
they return the header lines, untouched, in the order received. 
For example:

  for line in header:
     print line

will print the lines as they were received.  When treated 
as dictionaries, HTTPHeader objects will return the desired 
field.  For example:

   header['content-type']

might return 'text/html', and:

   header.get( 'content-encoding', None )

might return 'gzip' (or None).  The keys are all converted 
to lower-case, the fields are untouched.

Anyway, if any of this looks the least bit interesting, 
please feel free to grab it from:

   http://nonplussed.eholm.com/twisted

Why write another web proxy?  Well, after playing with 
web.Proxy, I decided to simplify life (or, at least my 
particular situation) by writing a proxy based on 
basic.LineReceiver instead of http.HTTPClient and 
http.HTTPChannel.  I found that web.Proxy was choking on 
some mainstream'ish sites such as msn.com and amazon.com.  
While attempting to patch-up the problems, it occurred to 
me that I was messing with code in the HTTPxxx classes that 
was parsing the headers.  And while *real* HTTP clients and 
servers need to grok the headers, my simple proxy application 
doesn't need such sophistication.  So I decided to bypass the 
hard-core HTTP code, and come-up with a simpler approach (famous 
last words...).

I'd be happy to contribute this to twisted, if anybody's 
interested.  It needs some cleanup, as none of it conforms 
to the twisted coding standards (e.g. not a single docstring), 
and there aren't any twisted-style test cases (oh, and the name 
sucks too...).  Hopefully there's enough there to give folks 
a feel for whether or not it might be useful - if so I'll be 
happy to clean it up and submit it, if not I won't bother. In 
the meantime, feel free to give it a try, and send any comments 
or questions my way.


Eric.




From acapnotic at twistedmatrix.com  Tue May 27 01:02:51 2003
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 26 May 2003 22:02:51 -0700
Subject: [Twisted-Python] Woven using wrong model adapter
In-Reply-To: <20030527013707.GE16017@toshi.anaprd01.md.comcast.net>
References: <1053997977.19896.19.camel@troglodyte.funhouse>
	 <20030527013707.GE16017@toshi.anaprd01.md.comcast.net>
Message-ID: <1054011767.19895.35.camel@troglodyte.funhouse>

On Mon, 2003-05-26 at 18:37, Christopher Armstrong wrote:
> > So why does woven persist in using the StringModel adapter in this case,
> > and how can I get it to stop?
> 
> IIRC, A workaround is to [...] 2) call self.invalidateCache() every 
> time the result of the conditional changes (or just on every request, if you
> don't care)

Model.invalidateCache is not what's needed here.  It turns out that when
that cache gets stale (either through explicit invalidateCache or just a
new Request), Model.getData will update the model data in
Model.original...  but it only swaps out the Model.original attribute,
it doesn't replace the Model with a new Model adapter for the new data. 
Which is how I was getting my FooReport instances ending up inside a
StringModel adapter.

What I've done now is, in Page.request: del self.submodels["report"]
This makes sure that old model adapters never hang around.  It also
smells bad.

Am I violating some unwritten contract here which says "a model factory
must always return models with the same interface"?

-- 
The moon is waning crescent, 15.6% illuminated, 25.7 days old.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030526/f10b43d2/attachment.pgp 

From heiko at ph0enix.homelinux.org  Mon May 26 20:38:07 2003
From: heiko at ph0enix.homelinux.org (Heiko Wundram)
Date: 27 May 2003 02:38:07 +0200
Subject: [Twisted-Python] Safe Pickling using banana and jelly
In-Reply-To: <20030526223106.GC16017@toshi.anaprd01.md.comcast.net>
References: <707F4930-8FBA-11D7-A91C-000393C92466@dalkescientific.com>
	 <20030526223106.GC16017@toshi.anaprd01.md.comcast.net>
Message-ID: <1053995887.928.25.camel@d168.stw.stud.uni-saarland.de>

On Tue, 2003-05-27 at 00:31, Christopher Armstrong wrote:
> Well, by default PB (which I assume is what Heiko is using) does

No, I'm not using PB, just using jelly and banana on their own for
encoding network packets. As I thought that it was way too insecure to
have to code my own object checking function, I've written my own
serializer in the mean time... :)

The arguments that Andrew put forth reminded me of Python pickle, and
that just doesn't work over an insecure transport, with the remote ends
not even being known (maybe).

What my serializer now basically does is only allow standard Python
objects to be serialized/unserialized, and classes that have been
explicitly registered with the Serializer. These classes implement
__serialize and __unserialize, to return their internal state as a base
Python object (or classes that have been registered), which are then
dumped to the stream. The serializer plays nice with class inheritance,
serializing all base classes, and unserializing them in the reverse
order.

__unserialize can e.g. do object checking after being unserialized, or
change parameters that have been received over the network.

The serializer currently _cannot_ handle recursive objects, but I guess
it could be extended to handle that too.

If there's any interest in the code, feel free to mail me. :) Maybe even
a remote chance to get it included in Twisted (oh what a hypocrite I
am).

Heiko.




From andrew-twisted at puzzling.org  Tue May 27 01:33:42 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 27 May 2003 15:33:42 +1000
Subject: [Twisted-Python] Safe Pickling using banana and jelly
In-Reply-To: <1053995887.928.25.camel@d168.stw.stud.uni-saarland.de>
References: <707F4930-8FBA-11D7-A91C-000393C92466@dalkescientific.com> <20030526223106.GC16017@toshi.anaprd01.md.comcast.net> <1053995887.928.25.camel@d168.stw.stud.uni-saarland.de>
Message-ID: <20030527053342.GB7502@frobozz>

On Tue, May 27, 2003 at 02:38:07AM +0200, Heiko Wundram wrote:
> On Tue, 2003-05-27 at 00:31, Christopher Armstrong wrote:
> > Well, by default PB (which I assume is what Heiko is using) does
> 
> No, I'm not using PB, just using jelly and banana on their own for
> encoding network packets. As I thought that it was way too insecure to
> have to code my own object checking function, I've written my own
> serializer in the mean time... :)

[...]

> If there's any interest in the code, feel free to mail me. :) Maybe even
> a remote chance to get it included in Twisted (oh what a hypocrite I
> am).

While Twisted has a long history of inventing new persistence systems, I
don't think we need yet another serialisation module right at the moment :)

-Andrew.




From dp at twistedmatrix.com  Tue May 27 01:56:24 2003
From: dp at twistedmatrix.com (Donovan Preston)
Date: Mon, 26 May 2003 22:56:24 -0700
Subject: [Twisted-Python] Woven using wrong model adapter
In-Reply-To: <1054011767.19895.35.camel@troglodyte.funhouse>
Message-ID: <F31A25D6-9007-11D7-933A-00039376B1AE@twistedmatrix.com>

On Monday, May 26, 2003, at 10:02 PM, Kevin Turner wrote:
>
> Am I violating some unwritten contract here which says "a model factory
> must always return models with the same interface"?

A model factory must always return an object with the same identity 
within one request. See DeferredModel for an example of how to change 
the behaviour of an IModel implementor without changing it's identity. 
You really shouldn't be doing conditional rendering with a wmfactory 
anyway; put the conditional in the View, where it belongs.

dp




From radix at twistedmatrix.com  Tue May 27 03:54:29 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 27 May 2003 03:54:29 -0400
Subject: [Twisted-Python] Woven using wrong model adapter
In-Reply-To: <F31A25D6-9007-11D7-933A-00039376B1AE@twistedmatrix.com>; from dp@twistedmatrix.com on Tue, May 27, 2003 at 01:56:24 -0400
References: <F31A25D6-9007-11D7-933A-00039376B1AE@twistedmatrix.com>
Message-ID: <20030527075429.GA29169@toshi.anaprd01.md.comcast.net>

On 2003.05.27 01:56, Donovan Preston wrote:
> 
> On Monday, May 26, 2003, at 10:02 PM, Kevin Turner wrote:
> >
> > Am I violating some unwritten contract here which says "a model factory
> > must always return models with the same interface"?
> 
> A model factory must always return an object with the same identity 
> within one request. 

With such a restriction, it seems there's no reason to *call* the model
factory multiple times per request. Shouldn't this be prevented?

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From radix at twistedmatrix.com  Tue May 27 04:01:55 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 27 May 2003 04:01:55 -0400
Subject: [Twisted-Python] Safe Pickling using banana and jelly
In-Reply-To: <1053995887.928.25.camel@d168.stw.stud.uni-saarland.de>; from heiko@ph0enix.homelinux.org on Mon, May 26, 2003 at 20:38:07 -0400
References: <707F4930-8FBA-11D7-A91C-000393C92466@dalkescientific.com> <20030526223106.GC16017@toshi.anaprd01.md.comcast.net> <1053995887.928.25.camel@d168.stw.stud.uni-saarland.de>
Message-ID: <20030527080155.GC29169@toshi.anaprd01.md.comcast.net>

On 2003.05.26 20:38, Heiko Wundram wrote:
> On Tue, 2003-05-27 at 00:31, Christopher Armstrong wrote:
> > Well, by default PB (which I assume is what Heiko is using) does
> 
> No, I'm not using PB, just using jelly and banana on their own for
> encoding network packets. As I thought that it was way too insecure to
> have to code my own object checking function, I've written my own
> serializer in the mean time... :)
> 
> The arguments that Andrew put forth reminded me of Python pickle, and
> that just doesn't work over an insecure transport, with the remote ends
> not even being known (maybe).


It seems you've missed other posts in this thread (or my own? I don't
remember now), that point out that jelly can indeed restrict instantiation
of arbitrary classes. Implementing another half-broken serialization scheme
is definitely not a good solution to any problem :-) Can you be more 
specific about how jelly is reminding you of Python pickle? The recursion
problem he mentioned is indeed, as pointed out, caught, and an error
is returned to the other end.

btw, thanks to Andrew Dalke for an *excellent* beginning of a security
audit for jelly. :-)

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From mario at ruggier.org  Tue May 27 05:32:31 2003
From: mario at ruggier.org (Mario Ruggier)
Date: Tue, 27 May 2003 11:32:31 +0200
Subject: [Twisted-Python] bug and patch: embedded LivePages
Message-ID: <23FC06CE-9026-11D7-9D6F-000393756786@ruggier.org>

Hi,

in the case when a LivePage happens to be itself the contents of
an iframe, the input web conduit does not work as it attempts to
execute js from "top". It should be "parent".

To test, place the following script next to any LivePage example
(such as the dhtmlLivePage.rpy posted some days ago by
Donovan Preston):

iframed_dhtmlLivePage.rpy:
================================
from twisted.web.woven import page
resource = page.Page()
resource.template = '''<html>
     <body style="margin:1em; background-color: gray;">
         <iframe style="width: 80%; padding: 1em;" 
src="../dhtmlLivePage">
             iframe contents
         </iframe>
     </body>
</html>
'''
================================


The diff w.r.t. cvs version of twisted/web/woven/controller.py:
================================
--- twisted/web/woven/controller.py       Tue May 27 10:58:55 2003
+++ twisted/web/woven/controller.py   Sat May 24 12:26:22 2003
@@ -333,7 +333,7 @@
          target.onEvent(request, eventName, *eventArgs)
          sess.sendScript = orig

-        
scriptOutput.append('parent.woven_clientToServerEventComplete()')
+        scriptOutput.append('top.woven_clientToServerEventComplete()')

          #print "GATHERED JS", scriptOutput

@@ -369,7 +369,7 @@
              nodeXML = nodeXML.replace('\r', '')
              nodeXML = nodeXML.replace("\\", "\\\\")
              nodeXML = nodeXML.replace("'", "\\'")
-            js = "parent.woven_replaceElement('%s', '%s')" % (nodeId, 
nodeXML)
+            js = "top.woven_replaceElement('%s', '%s')" % (nodeId, 
nodeXML)
              #for key in widget.subviews.keys():
              #    view.subviews[key].unlinkViews()
              oldNode = page.view.subviews[nodeId]
================================

cheers, mario




From Olivier.POYEN at clf-dexia.com  Tue May 27 05:54:45 2003
From: Olivier.POYEN at clf-dexia.com (POYEN OP Olivier (DCL))
Date: Tue, 27 May 2003 11:54:45 +0200
Subject: [Twisted-Python] [Tutor] Help on personnal Proxy
Message-ID: <8963D6370B323E4AA3241200F0EAF731235643@FCEXVEXM002.dcl.int.dexwired.net>

> The short answer to your question is to replace:
> 
>    f.HTTPChannel=proxy.Proxy
> 
> with:
> 
>    f.protocol=proxy.Proxy
> 

Can I stress that f.HTTPChannel comes from the docstring from the Proxy Class in the proxy.py file from Twisted. 
If this is the "official" way to do, maybe should someone change the docstring....

Anyway.

When doing so, I have some trouble with the "as-is" proxy. 
Some exceptions occured:

My current parameters are :
Twisted 1.0.5 for python 2.2
export http_proxy='http://localhost:8765' # for the proxy

And the current web server is running on localhost:8080

The issue is that, when doing a 'wget http://localhost:8080', in web.proxy.py, there is, at line 113
host,port= string.split
Thus, port became a string. 
And in internet.tcp.py, there is a test for isInstance(port,StringTypes), which matches.....

With a single port=int(port) before calling reactor.connectTcP in web.prxoy, ezverything works.

Am I dead wrong ? 



> Or, I've written a (yet another) web proxy that you might 
> want to try too.  Using my MinProxy ....
> 
I'll gladly have a look !

Thanks !

OPQ
-------------- next part --------------
-----------------------------------------------------------------

Ce message est confidentiel ; son contenu ne represente en aucun

cas un engagement de la part de Dexia Credit Local ou de Dexia

CLF Banque. Toute publication, utilisation ou diffusion, meme

partielle, doit etre autorisee prealablement par l'emetteur. Si

vous n'etes pas destinataire de ce message, merci d'en avertir

immediatement l'expediteur.



This message is confidential ; its contents do not constitute a

commitment by Dexia Credit Local or Dexia CLF Banque. Any

unauthorised disclosure, use or dissemination, either whole or

partial, is prohibited. If you are not the intended recipient of

the message, please notify the sender immediately.

-----------------------------------------------------------------

Consultez notre site internet www.dexia-clf.fr

La cle d'une gestion optimisee du secteur public local

-----------------------------------------------------------------

From andrew-twisted at puzzling.org  Tue May 27 06:00:01 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 27 May 2003 20:00:01 +1000
Subject: [Twisted-Python] bug and patch: embedded LivePages
In-Reply-To: <23FC06CE-9026-11D7-9D6F-000393756786@ruggier.org>
References: <23FC06CE-9026-11D7-9D6F-000393756786@ruggier.org>
Message-ID: <20030527100001.GA8491@frobozz>

On Tue, May 27, 2003 at 11:32:31AM +0200, Mario Ruggier wrote:
> 
> 
> The diff w.r.t. cvs version of twisted/web/woven/controller.py:
> ================================
> --- twisted/web/woven/controller.py       Tue May 27 10:58:55 2003
> +++ twisted/web/woven/controller.py   Sat May 24 12:26:22 2003

You appear to have the diff backwards.

-Andrew.




From mario at ruggier.org  Tue May 27 06:13:33 2003
From: mario at ruggier.org (Mario Ruggier)
Date: Tue, 27 May 2003 12:13:33 +0200
Subject: [Twisted-Python] bug and patch: embedded LivePages
In-Reply-To: <20030527100001.GA8491@frobozz>
Message-ID: <DF933890-902B-11D7-9D6F-000393756786@ruggier.org>

> On Tue, May 27, 2003 at 11:32:31AM +0200, Mario Ruggier wrote:
>>
>>
>> The diff w.r.t. cvs version of twisted/web/woven/controller.py:
>> ================================
>> --- twisted/web/woven/controller.py       Tue May 27 10:58:55 2003
>> +++ twisted/web/woven/controller.py   Sat May 24 12:26:22 2003
>
> You appear to have the diff backwards.

Just did a file diff... sorry should have switched the 2 file arguments.


> -Andrew.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From pobrien at orbtech.com  Tue May 27 10:19:37 2003
From: pobrien at orbtech.com (Patrick K. O'Brien)
Date: 27 May 2003 09:19:37 -0500
Subject: [Twisted-Python] Using usage.Options documentation error
Message-ID: <m23cj0bhfq.fsf@orbtech.com>

There appears to be an error in the code example on this page:

    http://www.twistedmatrix.com/documents/howto/options

<quote>

Inheritance, Or: How I Learned to Stop Worrying and Love the Superclass

Sometimes there is a need for several option processors with a
unifying core. Perhaps you want all your commands to understand
-q/--quiet means to be quiet, or something similar. On the face of it,
this looks impossible: in Python, the subclass's optFlags would shadow
the superclass's. However, usage.Options uses special reflection code
to get all of the optFlags defined in the hierarchy. So the following:


class BaseOptions(usage.Options):

    optFlags = [["quiet", "q"], None]

class SpecificOptions(BaseOptions):

    optFlags = [
        ["fast", "f", None], ["good", "g", None], ["cheap", "c", None]
    ]


Is the same as: 

class SpecificOptions(BaseOptions):

    optFlags = [
        ["quiet", "q", "Silence output"],
        ["fast", "f", "Run quickly"],
        ["good", "g", "Don't validate input"],
        ["cheap", "c", "Use cheap resources"]
    ]

</quote>

I don't see how the descriptions in the second SpecificOptions class
match with the use of None in the first set of classes.  Twisted is
good, but it isn't *that* good, is it?

-- 
Patrick K. O'Brien
Orbtech      http://www.orbtech.com/web/pobrien
-----------------------------------------------
"Your source for Python programming expertise."
-----------------------------------------------




From grib at billgribble.com  Tue May 27 10:38:21 2003
From: grib at billgribble.com (Bill Gribble)
Date: 27 May 2003 09:38:21 -0500
Subject: [Twisted-Python] Small diff for LivePage controller
Message-ID: <1054046301.18681.19.camel@oc-demo.internal.billgribble.com>

Hi.  I noticed that when my LivePage instance sends updates to DOM
elements that are whitespace-sensitive, such as <pre> and 
<textarea wordwrap="off>, embedded newlines were getting stripped,
leaving the element bodies as single text lines with some interword
spacing removed. 

I tracked the problem down to this bit of code in woven/controller.py. 
The Javascript code generator is formatting the new element as a literal
Javascript string which will be processed on the client side to modify
the page.  But by stripping out the newlines in the code we remove some
important information in some HTML contexts.  

This patch leaves embedded newlines in the text, using JavaScript
literal string escapes to make sure they get passed through OK.  I also
added string escaping for other legal special characters that have 
JS literal escapes. 

With this patch, LivePage is working really well for me!  Thanks to all
the folks who have given help on IRC.  FWIW this patch is in the public
domain. 

Bill Gribble


Index: controller.py
===================================================================
RCS file: /cvs/Twisted/twisted/web/woven/controller.py,v
retrieving revision 1.60
diff -r1.60 controller.py
368,369d367
<             nodeXML = nodeXML.replace('\n', '')
<             nodeXML = nodeXML.replace('\r', '')
371a370,378
>             nodeXML = nodeXML.replace('"', '\\"')
>             nodeXML = nodeXML.replace('\n', '\\n')
>             nodeXML = nodeXML.replace('\r', '\\r')
>             nodeXML = nodeXML.replace('\b', '\\b')
>             nodeXML = nodeXML.replace('\t', '\\t')
>             nodeXML = nodeXML.replace('\000', '\\0')
>             nodeXML = nodeXML.replace('\v', '\\v')
>             nodeXML = nodeXML.replace('\f', '\\f')
> 



-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030527/017a0716/attachment.pgp 

From dp at twistedmatrix.com  Tue May 27 11:33:26 2003
From: dp at twistedmatrix.com (Donovan Preston)
Date: Tue, 27 May 2003 08:33:26 -0700
Subject: [Twisted-Python] Woven using wrong model adapter
In-Reply-To: <20030527075429.GA29169@toshi.anaprd01.md.comcast.net>
Message-ID: <8EF55799-9058-11D7-B738-00039376B1AE@twistedmatrix.com>

On Tuesday, May 27, 2003, at 12:54 AM, Christopher Armstrong wrote:

>
> On 2003.05.27 01:56, Donovan Preston wrote:
>>
>> On Monday, May 26, 2003, at 10:02 PM, Kevin Turner wrote:
>>>
>>> Am I violating some unwritten contract here which says "a model 
>>> factory
>>> must always return models with the same interface"?
>>
>> A model factory must always return an object with the same identity
>> within one request.
>
> With such a restriction, it seems there's no reason to *call* the model
> factory multiple times per request. Shouldn't this be prevented?

Correct. The wmfactory method isn't called more than once per request. 
It's getSubmodel that has this restriction, sorry.

dp




From z3p at twistedmatrix.com  Tue May 27 18:37:13 2003
From: z3p at twistedmatrix.com (Paul Swartz)
Date: Tue, 27 May 2003 18:37:13 -0400
Subject: [Twisted-Python] sshclient and sshserver examples
In-Reply-To: <1053994611.2392.84.camel@mccracken.otago.ac.nz>
Message-ID: <3ED3B059.9382.69CFD74@localhost>

On 27 May 2003 at 12:16, Selwyn McCracken wrote:

> Traceback (most recent call last):
>   File "/home/selwyn/.ssh/sshClient.py", line 44, in ?
>     class TrueChannel(connection.SSHChannel):
> AttributeError: 'module' object has no attribute 'SSHChannel'

Yeah, SSHChannel was refactored into its own module a while back, and I 
forgot to change this example.  It's fixed in CVS.

-p
-- 
     Paul Swartz
(o_  http://twistedmatrix.com/users/z3p.twistd/
//\  z3p at twistedmatrix.com
V_/_ AIM: Z3Penguin




From konrad at wam.umd.edu  Tue May 27 18:58:47 2003
From: konrad at wam.umd.edu (Konrad Rokicki)
Date: Tue, 27 May 2003 18:58:47 -0400 (EDT)
Subject: [Twisted-Python] toc.py
Message-ID: <Pine.SOL.4.44.0305271845110.6407-100000@rac2.wam.umd.edu>

Hey,
Is there any reason TOCClient doesnt catch exceptions made by callbacks?
Shouldn't line 902 look something like this (modeled after IRCClient):

        try:
            func(l)
        except:
            log.deferr()

Or maybe it should go somewhere else, but I don't think it should
disconnect when an exception isn't caught.

Also, what are the TOC and IRC classes for? I'm trying to do
certain things with TOCClient (i.e. user info) that only
seem to be in TOC..

Thanks,
Konrad




From kaloian at yovko.net  Tue May 27 19:04:10 2003
From: kaloian at yovko.net (Kaloian Doganov)
Date: 28 May 2003 02:04:10 +0300
Subject: [Twisted-Python] web forms and authentication in LDAP server
Message-ID: <1054076649.21524.16.camel@philosophtware>

Hello!

I have two short twisted-newbie questions:

Is there any kind of documentation (instead of the API docs) that I can
read about how to use twisted.web.woven.form package? Any kind of
example would be appreciated.

Does anyone work on adding LDAP support for twisted.cred? I am
interested in writing such module, once I get more experienced with
Twisted.


Best Regards,
Kaloian Doganov.





From heikowu at ceosg.de  Wed May 28 00:21:52 2003
From: heikowu at ceosg.de (Heiko Wundram)
Date: 28 May 2003 06:21:52 +0200
Subject: [Twisted-Python] Safe Pickling using banana and jelly
In-Reply-To: <20030527080155.GC29169@toshi.anaprd01.md.comcast.net>
References: <707F4930-8FBA-11D7-A91C-000393C92466@dalkescientific.com>
	 <20030526223106.GC16017@toshi.anaprd01.md.comcast.net>
	 <1053995887.928.25.camel@d168.stw.stud.uni-saarland.de>
	 <20030527080155.GC29169@toshi.anaprd01.md.comcast.net>
Message-ID: <1054095712.928.87.camel@d168.stw.stud.uni-saarland.de>

On Tue, 2003-05-27 at 10:01, Christopher Armstrong wrote:
> It seems you've missed other posts in this thread (or my own? I don't
> remember now), that point out that jelly can indeed restrict instantiation
> of arbitrary classes. Implementing another half-broken serialization scheme
> is definitely not a good solution to any problem :-)

The thing being: I don't like any serialization scheme that just says:
Okay, all data is fine with us, we'll coredump if we deconstruct
anything bad or obnoxious... (sort'a like that) I guess that's not the
point when doing serialization for data received over the net...

My intention behind creating my own serialization scheme were the
following:

1. I can control how the data is actually stored in the pickle (classes
aren't pickled as is, but instead get the chance to __serialize
themselves; that's just mildly important, but... Hey. :)) And foremost:
I can control exactly which classes are okay for
serialization/unserialization.

2. Both Jelly and Banana can't handle a special case where I have an
instance of class y (derived from class x), and want the serialization
stream to show that class x was sent. Examples of this: My current
program has a Host class, and a LocalHost class which is derived from
it. The LocalHost, when sent to other hosts, should just get serialized
as a Host. Normally you'd have to "cast" the LocalHost to a host object,
and then serialize that. My scheme can handle "alias classes", which get
serialized using the other's name, making sure that the other class
doesn't even get a chance to serialize private attributes.

3. Support for different serialization protocols. I guess I've not made
the mistake that most other pickle-like module authors made, that they
didn't implement support for more than one protocol right from the
start... (hypocrisy... ;)) This e.g. means that object-ids (which
basically are names for the pickled class) can have different meanings,
when the protocol changes.

4. And most important for me (except 1): I can control exactly what data
gets put into the unserialized classes, as all __unserialize functions
are called in reverse order (when having classes which are bases to
other classes, etc.). The point being: when I load a Host from network,
I have to reduce several timeouts as "local" timeouts are much higher
than timeouts for instances received over the net. As I don't reduce
them when I send them out, I just reduce them when they come in. As
such, the Host class is derived from another class, which is called
TimeoutBase, which controls this timeout stuff, as there are other
classes which also need timeout behaviour. With all "normal" picklers,
the Host instance would be created without it ever having the chance to
change the private data of the TimeoutBase (yeah, I use private
variables for all class data), except by calling some kind of utility
function like checkTimeout() (yuck...) or hacking by changing private
attributes (even more yuck...). I think this is pretty crufty. When the
unserializer just calls all bases __unserialize in turn, I can just have
the TimeoutBase store (just) it's values to network when __serialize is
called, and when __unserialize is called load them again, and
check/reduce them right as they are being put into the class. This also
protects against broken objects which are received from the network,
which I would have to catch using some kind of checkInstance() logic
too... (objects which are loaded with incomplete data, eg.)

5. My pickles are signed data items, and while signing banana'd packets
is no problem, I have integrated signature/digesting algorithms with the
stream class, which allows for checking of SHA-digests and the like as
they are being written out. I don't really know any other pickler that
takes care of checksumming packets right in the pickler. You can of
course turn off this functionality... :)

6. Without being hypocrite, I guess I can say that the serialization
scheme is so simple, that there couldn't be much holes an attacker could
come through... Tests like the things Andrew did will certainly not
work, and the burden is put on the programmer to make sure that the
classes he registers as being serializable are really classes that are
okay to serialize (destroy, etc.). All base classes are safe to
serialize. And actually only int, string, unicode, complex, long and
float ever get written out to the stream, all other objects being
abstractions of a _DataStream (which is basically a list kind of
object).

> btw, thanks to Andrew Dalke for an *excellent* beginning of a security
> audit for jelly. :-)

Thanks here too... Made me finally give myself the turn to actually
write my own serializer... ;) I've wanted to do that for a long time,
but I've always feared that it would be an overly complex task.
Yesterday proved me wrong about that... :) I needed above functionality
1+4 more than once, when it wasn't available, and that always produced
pretty crufty code...

Heiko.




From heikowu at ceosg.de  Wed May 28 00:22:16 2003
From: heikowu at ceosg.de (Heiko Wundram)
Date: 28 May 2003 06:22:16 +0200
Subject: [Twisted-Python] XMLRPC getting calling host
Message-ID: <1054095736.928.90.camel@d168.stw.stud.uni-saarland.de>

Hey there!

Just a little try to check whether I'm still subscribed to twisted, as
today's other posts regarding the safe pickling never got through,
somehow...

I've come to the point where I need to query the IP an XMLRPC request
came from. In UDP, you get it served when the call to datagramReceived
comes through, but I've not seen any attribute of the XMLRPC class, or
of the underlying Resource class which states anything about how to get
this attribute. Is it possible? And if, how?

Thanks!

Heiko.




From andrew-twisted at puzzling.org  Wed May 28 00:45:38 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 28 May 2003 14:45:38 +1000
Subject: [Twisted-Python] Safe Pickling using banana and jelly
In-Reply-To: <1054095712.928.87.camel@d168.stw.stud.uni-saarland.de>
References: <707F4930-8FBA-11D7-A91C-000393C92466@dalkescientific.com> <20030526223106.GC16017@toshi.anaprd01.md.comcast.net> <1053995887.928.25.camel@d168.stw.stud.uni-saarland.de> <20030527080155.GC29169@toshi.anaprd01.md.comcast.net> <1054095712.928.87.camel@d168.stw.stud.uni-saarland.de>
Message-ID: <20030528044538.GC10429@frobozz>

On Wed, May 28, 2003 at 06:21:52AM +0200, Heiko Wundram wrote:
> On Tue, 2003-05-27 at 10:01, Christopher Armstrong wrote:
> > It seems you've missed other posts in this thread (or my own? I don't
> > remember now), that point out that jelly can indeed restrict instantiation
> > of arbitrary classes. Implementing another half-broken serialization scheme
> > is definitely not a good solution to any problem :-)
> 
> The thing being: I don't like any serialization scheme that just says:
> Okay, all data is fine with us, we'll coredump if we deconstruct
> anything bad or obnoxious... (sort'a like that) I guess that's not the
> point when doing serialization for data received over the net...

Twisted Spread is intended to be safe and secure, because data from the net
could be from anywhere, so it has to be robust in the face of dangerous
data.

> My intention behind creating my own serialization scheme were the
> following:
> 
> 1. I can control how the data is actually stored in the pickle (classes
> aren't pickled as is, but instead get the chance to __serialize
> themselves; that's just mildly important, but... Hey. :)) And foremost:
> I can control exactly which classes are okay for
> serialization/unserialization.

That's what __getstate__ and __setstate__ are for with pickle; IIRC Jelly
supports that and also it's own 'getStateToCopyFor' or something along those
lines.

> 2. Both Jelly and Banana can't handle a special case where I have an
> instance of class y (derived from class x), and want the serialization
> stream to show that class x was sent. Examples of this: My current
> program has a Host class, and a LocalHost class which is derived from
> it. The LocalHost, when sent to other hosts, should just get serialized
> as a Host. Normally you'd have to "cast" the LocalHost to a host object,
> and then serialize that. My scheme can handle "alias classes", which get
> serialized using the other's name, making sure that the other class
> doesn't even get a chance to serialize private attributes.

I'm sure PB can handle this.  Have you read "PB Copyable: Passing Complex
Types", http://twistedmatrix.com/documents/howto/pb-copyable? 

> 3. Support for different serialization protocols. I guess I've not made
> the mistake that most other pickle-like module authors made, that they
> didn't implement support for more than one protocol right from the
> start... (hypocrisy... ;)) This e.g. means that object-ids (which
> basically are names for the pickled class) can have different meanings,
> when the protocol changes.

I'm not quite sure what you're saying here.

> 4. And most important for me (except 1): I can control exactly what data
> gets put into the unserialized classes, as all __unserialize functions
> are called in reverse order (when having classes which are bases to
> other classes, etc.). The point being: when I load a Host from network,
> I have to reduce several timeouts as "local" timeouts are much higher
> than timeouts for instances received over the net. As I don't reduce
[...]

Again, read http://twistedmatrix.com/documents/howto/pb-copyable.  With PB
you can control exactly what data is sent over the wire.  You also get
Referenceables, Copyables and Cacheables, which is considerably richer than
a simple object protocol that just passes the occasional object-graph.

> 5. My pickles are signed data items, and while signing banana'd packets
> is no problem, I have integrated signature/digesting algorithms with the
> stream class, which allows for checking of SHA-digests and the like as
> they are being written out. I don't really know any other pickler that
> takes care of checksumming packets right in the pickler. You can of
> course turn off this functionality... :)

TCP guarantees the data isn't corrupted on the way through.  Use SSL to 
guarantee that the traffic isn't being sniffed or tampered with in transit.
PB has an authentication step so that you can know who the clients are.
Between all this, I'm not sure what problem your signatures are solving that
isn't already solved?

> 6. Without being hypocrite, I guess I can say that the serialization
> scheme is so simple, that there couldn't be much holes an attacker could
> come through... Tests like the things Andrew did will certainly not
> work, and the burden is put on the programmer to make sure that the
> classes he registers as being serializable are really classes that are
> okay to serialize (destroy, etc.). All base classes are safe to
> serialize. And actually only int, string, unicode, complex, long and
> float ever get written out to the stream, all other objects being
> abstractions of a _DataStream (which is basically a list kind of
> object).

Banana only understands a very small number of primitives too.  PB has been
implemented in languages other than Python, so I don't think it's overly
complex -- and I believe Brian Warner is working on a rewrite that might
make it simpler, faster and more flexible.

> > btw, thanks to Andrew Dalke for an *excellent* beginning of a security
> > audit for jelly. :-)
> 
> Thanks here too... Made me finally give myself the turn to actually
> write my own serializer... ;) I've wanted to do that for a long time,
> but I've always feared that it would be an overly complex task.
> Yesterday proved me wrong about that... :) I needed above functionality
> 1+4 more than once, when it wasn't available, and that always produced
> pretty crufty code...

As far as I can see (although I'm no PB expert), PB satisfies 1 and 4.  What
makes you think it doesn't?

-Andrew.




From wari at home.wari.org  Wed May 28 00:46:18 2003
From: wari at home.wari.org (Wari Wahab)
Date: Wed, 28 May 2003 12:46:18 +0800
Subject: [Twisted-Python] XMLRPC getting calling host
In-Reply-To: <1054095736.928.90.camel@d168.stw.stud.uni-saarland.de>
References: <1054095736.928.90.camel@d168.stw.stud.uni-saarland.de>
Message-ID: <3ED43F1A.1020501@home.wari.org>

Heiko Wundram wrote:

>I've come to the point where I need to query the IP an XMLRPC request
>came from. In UDP, you get it served when the call to datagramReceived
>comes through, but I've not seen any attribute of the XMLRPC class, or
>of the underlying Resource class which states anything about how to get
>this attribute. Is it possible? And if, how?
>  
>
Just a stab in the dark here, but I believe it's possible to override 
the render method to get this information via the request parameter.

Something like:
from twisted.web import xmlrpc
class MyXmlRpcHandler(xmlrpc.XMLRPC):
    def render(self, request):
        self._ip = request.something # Get IP information here
        xmlrpc.XMLRPC.render(self, request)
    def xmlrpc_method(self, *args):
        # You can now use self._ip for this instance of MyXmlRpcHandler

Sorry for my lack of knowledge in the request object object, but every 
known html info about the request is available there.




From andrew-twisted at puzzling.org  Wed May 28 00:51:07 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 28 May 2003 14:51:07 +1000
Subject: [Twisted-Python] XMLRPC getting calling host
In-Reply-To: <1054095736.928.90.camel@d168.stw.stud.uni-saarland.de>
References: <1054095736.928.90.camel@d168.stw.stud.uni-saarland.de>
Message-ID: <20030528045107.GD10429@frobozz>

On Wed, May 28, 2003 at 06:22:16AM +0200, Heiko Wundram wrote:
> 
> I've come to the point where I need to query the IP an XMLRPC request
> came from. In UDP, you get it served when the call to datagramReceived
> comes through, but I've not seen any attribute of the XMLRPC class, or
> of the underlying Resource class which states anything about how to get
> this attribute. Is it possible? And if, how?

Request objects have a .getClientIP method.

-Andrew.




From jml at ids.org.au  Wed May 28 13:46:34 2003
From: jml at ids.org.au (jml at ids.org.au)
Date: Thu, 29 May 2003 03:46:34 +1000
Subject: [Twisted-Python] [PATCH] Getting request in woven.form callback
Message-ID: <20030528174634.GA14260@mumak.net>


Hello,

I've been wanting to get at request in the woven.form callback for a while 
now. After trying several different kludges in my code, I tried patching form 
and t.p.formmethod.

Example:
   def login(request, username=None, password=None):
       # do stuff

   sig = MethodSignature(
            String('username', '', 'Username', 'Your username'),
            Password('password', '', 'Password', 'Your password'))
   loginMethod = FormMethod(sig, login, True)

This works really well for me.

cheers,
jml

Here's the patch:

Index: python/formmethod.py
===================================================================
RCS file: /cvs/Twisted/twisted/python/formmethod.py,v
retrieving revision 1.21
diff -u -r1.21 formmethod.py
--- python/formmethod.py	22 May 2003 21:25:48 -0000	1.21
+++ python/formmethod.py	28 May 2003 06:20:29 -0000
@@ -260,9 +260,10 @@
 class FormMethod:
     """A callable object with a signature."""
 
-    def __init__(self, signature, callable):
+    def __init__(self, signature, callable, takesRequest=False):
         self.signature = signature
         self.callable = callable
+        self.takesRequest = takesRequest
 
     def getArgs(self):
         return tuple(self.signature.methodSignature)
Index: web/woven/form.py
===================================================================
RCS file: /cvs/Twisted/twisted/web/woven/form.py,v
retrieving revision 1.37
diff -u -r1.37 form.py
--- web/woven/form.py	15 May 2003 06:31:43 -0000	1.37
+++ web/woven/form.py	28 May 2003 06:20:31 -0000
@@ -332,7 +332,10 @@
             return self.errback(self.errorModelFactory(request.args, outDict, errDict)).render(request)
         else:
             try:
-                outObj = self.formMethod.call(**outDict)
+                if self.formMethod.takesRequest:
+                    outObj = self.formMethod.call(request=request, **outDict)
+                else:
+                    outObj = self.formMethod.call(**outDict)
             except formmethod.FormException, e:
                 err = request.errorInfo = self.errorModelFactory(request.args, outDict, e)
                 return self.errback(err).render(request)



----- End forwarded message -----
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030529/92bb4d24/attachment.pgp 

From tv at twistedmatrix.com  Wed May 28 03:24:31 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Wed, 28 May 2003 10:24:31 +0300
Subject: [Twisted-Python] web forms and authentication in LDAP server
In-Reply-To: <1054076649.21524.16.camel@philosophtware>
References: <1054076649.21524.16.camel@philosophtware>
Message-ID: <20030528072431.GB13849@lapdog>

On Wed, May 28, 2003 at 02:04:10AM +0300, Kaloian Doganov wrote:
> Does anyone work on adding LDAP support for twisted.cred? I am
> interested in writing such module, once I get more experienced with
> Twisted.

	Been there done that.

http://tv.debian.net/software/ldaptor/

http://packages.debian.org/python-ldaptor/

http://ldaptor.bkbits.net:8080/ldaptor/anno/lib/ldaptor/cred.py at 1.3?nav=index.html|src/|src/lib|src/lib/ldaptor

-- 
:(){ :|:&};:



From wari at home.wari.org  Wed May 28 03:48:55 2003
From: wari at home.wari.org (Wari Wahab)
Date: Wed, 28 May 2003 15:48:55 +0800
Subject: [Twisted-Python] SNMP in Twisted
Message-ID: <3ED469E7.5060209@home.wari.org>

I was given the task to have a program to send SNMP get requests and 
recieve SNMP traps. There is a PySNMP package out there, and I guess 
that it's a blocking call to get data from an SNMP server, especially 
when doing a walk style request.

My questions are,
1. Should one attempt on doing the hair raising task of doing the SNMP 
client and Server protocols? (Hopefully, you should never need to write 
your own protocols)
2. Use the PySNMP library as is, no matter how blocking that can be?
3. Use PySNMP calls in a thread?
4. Use the command line executables of ucd-snmp (or net-snmp) and use 
the reactor.spawnProcess() calls. Get SNMP traps using syslog named pipes.

All are valid answers, though I pretty much think that 1. is the best 
way to go, BUT, looking at SNMP rfcs, it could very well prove to be an 
almost impossible task (especially for a newbie like me:).




From andrew-twisted at puzzling.org  Wed May 28 04:07:58 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 28 May 2003 18:07:58 +1000
Subject: [Twisted-Python] SNMP in Twisted
In-Reply-To: <3ED469E7.5060209@home.wari.org>
References: <3ED469E7.5060209@home.wari.org>
Message-ID: <20030528080758.GA10861@frobozz>

On Wed, May 28, 2003 at 03:48:55PM +0800, Wari Wahab wrote:
> I was given the task to have a program to send SNMP get requests and 
> recieve SNMP traps. There is a PySNMP package out there, and I guess 
> that it's a blocking call to get data from an SNMP server, especially 
> when doing a walk style request.
> 
> My questions are,
[...]

Have you seen
    http://twistedmatrix.com/pipermail/twisted-python/2002-December/002456.html
?

(In general, the best approach to Twistifying a protocol in another Python
library is to reuse the message decoding and encoding, but use Twisted to
handle all the networking.  This usually means writing a Protocol subclass
that delegates most of the work in dataReceived to the library, but
obivously this depends on the protocol...)

-Andrew.




From wari at home.wari.org  Wed May 28 05:41:14 2003
From: wari at home.wari.org (Wari Wahab)
Date: Wed, 28 May 2003 17:41:14 +0800
Subject: [Twisted-Python] SNMP in Twisted
In-Reply-To: <20030528080758.GA10861@frobozz>
References: <3ED469E7.5060209@home.wari.org> <20030528080758.GA10861@frobozz>
Message-ID: <3ED4843A.8080600@home.wari.org>

Andrew Bennetts wrote:

>Have you seen
>    http://twistedmatrix.com/pipermail/twisted-python/2002-December/002456.html
>
OMG! That answer one half of my question, thanks. Should of probe around 
first.

>(In general, the best approach to Twistifying a protocol in another Python
>library is to reuse the message decoding and encoding, but use Twisted to
>handle all the networking.  This usually means writing a Protocol subclass
>that delegates most of the work in dataReceived to the library, but
>obivously this depends on the protocol...)
>  
>
So do you mean that twisted is the one sending out bytes to and from the 
network, and pass dataReceived to the library?

This depends if the library has the encode and decode routines right? If 
the library does it's own networking, then I cannot do it this way, am I 
right in saying that?




From m at moshez.org  Wed May 28 05:40:45 2003
From: m at moshez.org (Moshe Zadka)
Date: 28 May 2003 09:40:45 -0000
Subject: [Twisted-Python] SNMP in Twisted
In-Reply-To: <3ED469E7.5060209@home.wari.org>
References: <3ED469E7.5060209@home.wari.org>
Message-ID: <20030528094045.16271.qmail@green.zadka.com>

On Wed, 28 May 2003, Wari Wahab <wari at home.wari.org> wrote:

> 2. Use the PySNMP library as is, no matter how blocking that can be?

It's often possible to use a library *partially*, if it's structured
correctly. E.g., have the network code in Twisted pass in data to some
semi-internal PySNMP function. As an example, this is how the XML-RPC
and SOAP support work -- they use the parsing code from xmlrpclib
and SOAPpy, but use Twisted's network code.

If this isn't possible, see if you can modify PySNMP a little to decouple
the network code from the protocol parsing code, and send back the PySNMP
guys the patch. Often, authors will take this kind of patches, especially
if accompnied by "Twisted support" :). Just don't make it *depend* on Twisted.

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From radix at twistedmatrix.com  Tue May 27 04:01:55 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 27 May 2003 04:01:55 -0400
Subject: [Twisted-Python] Safe Pickling using banana and jelly
In-Reply-To: <1053995887.928.25.camel@d168.stw.stud.uni-saarland.de>; from heiko@ph0enix.homelinux.org on Mon, May 26, 2003 at 20:38:07 -0400
References: <707F4930-8FBA-11D7-A91C-000393C92466@dalkescientific.com> <20030526223106.GC16017@toshi.anaprd01.md.comcast.net> <1053995887.928.25.camel@d168.stw.stud.uni-saarland.de>
Message-ID: <20030527080155.GC29169@toshi.anaprd01.md.comcast.net>

On 2003.05.26 20:38, Heiko Wundram wrote:
> On Tue, 2003-05-27 at 00:31, Christopher Armstrong wrote:
> > Well, by default PB (which I assume is what Heiko is using) does
> 
> No, I'm not using PB, just using jelly and banana on their own for
> encoding network packets. As I thought that it was way too insecure to
> have to code my own object checking function, I've written my own
> serializer in the mean time... :)
> 
> The arguments that Andrew put forth reminded me of Python pickle, and
> that just doesn't work over an insecure transport, with the remote ends
> not even being known (maybe).


It seems you've missed other posts in this thread (or my own? I don't
remember now), that point out that jelly can indeed restrict instantiation
of arbitrary classes. Implementing another half-broken serialization scheme
is definitely not a good solution to any problem :-) Can you be more 
specific about how jelly is reminding you of Python pickle? The recursion
problem he mentioned is indeed, as pointed out, caught, and an error
is returned to the other end.

btw, thanks to Andrew Dalke for an *excellent* beginning of a security
audit for jelly. :-)

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From radix at twistedmatrix.com  Wed May 28 05:45:02 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 28 May 2003 05:45:02 -0400
Subject: [Twisted-Python] SNMP in Twisted
In-Reply-To: <3ED4843A.8080600@home.wari.org>; from wari@home.wari.org on Wed, May 28, 2003 at 05:41:14 -0400
References: <3ED469E7.5060209@home.wari.org> <20030528080758.GA10861@frobozz> <3ED4843A.8080600@home.wari.org>
Message-ID: <20030528094501.GE29169@toshi.anaprd01.md.comcast.net>

On 2003.05.28 05:41, Wari Wahab wrote:
> Andrew Bennetts wrote:
> 
> >Have you seen
> >    http://twistedmatrix.com/pipermail/twisted-python/2002-December/002456.html
> >
> OMG! That answer one half of my question, thanks. Should of probe around 
> first.
> 
> >(In general, the best approach to Twistifying a protocol in another Python
> >library is to reuse the message decoding and encoding, but use Twisted to
> >handle all the networking.  This usually means writing a Protocol subclass
> >that delegates most of the work in dataReceived to the library, but
> >obivously this depends on the protocol...)
> >  
> >
> So do you mean that twisted is the one sending out bytes to and from the 
> network, and pass dataReceived to the library?
> 
> This depends if the library has the encode and decode routines right? If 
> the library does it's own networking, then I cannot do it this way, am I 
> right in saying that?

Not really - the lib might do its own networking, but it'll often have,
as moshez put it, semi-internal methods for doing decoding and encoding.
You just need to bypass its network-using layer.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From heikowu at ceosg.de  Wed May 28 09:09:46 2003
From: heikowu at ceosg.de (Heiko Wundram)
Date: 28 May 2003 15:09:46 +0200
Subject: [Twisted-Python] Safe Pickling using banana and jelly
In-Reply-To: <20030528044538.GC10429@frobozz>
References: <707F4930-8FBA-11D7-A91C-000393C92466@dalkescientific.com>
	 <20030526223106.GC16017@toshi.anaprd01.md.comcast.net>
	 <1053995887.928.25.camel@d168.stw.stud.uni-saarland.de>
	 <20030527080155.GC29169@toshi.anaprd01.md.comcast.net>
	 <1054095712.928.87.camel@d168.stw.stud.uni-saarland.de>
	 <20030528044538.GC10429@frobozz>
Message-ID: <1054127385.928.126.camel@d168.stw.stud.uni-saarland.de>

On Wed, 2003-05-28 at 06:45, Andrew Bennetts wrote:
> Twisted Spread is intended to be safe and secure, because data from the net
> could be from anywhere, so it has to be robust in the face of dangerous
> data.

I know, I was just being a little smartass... ;)

> That's what __getstate__ and __setstate__ are for with pickle; IIRC Jelly
> supports that and also it's own 'getStateToCopyFor' or something along those
> lines.

Sure it is, but both of them are called only for the topmost object from
the inheritance tree, which, when I use private variables, has little
chance to see the variables that are defined below in a way that's
suitable. And returning __dict__ is a little strange, as reassigning to
__dict__ in the __setstate__ mehod won't fix what I need...

> I'm sure PB can handle this.  Have you read "PB Copyable: Passing Complex
> Types", http://twistedmatrix.com/documents/howto/pb-copyable? 

This is not about SenderPonds and ReceiverPonds, but about the simple
thing that LocalHost implements a few other data members, which should
not get sent over the wire, ever! (as e.g. private key, etc.) Of course,
I could use a getStateToCopyFor() to return only the data members that I
want to be returned, and be available in the remote object, but I think
that's kind of a hack... (remember, all my data elemens in all classes
are private) I think a solution which calls only the base classes
__serialize methods (in this example starting with Host) is cleaner.
(That's what aliases are all about.)

> > 3. Support for different serialization protocols. I guess I've not made
> I'm not quite sure what you're saying here.

The serializer supports different protocols right from the start. The
datastream is fixed format, but objects can choose to give unpickled
data storage different meaning according to the serialization protocol
that's chosen. What this works for: I have serialization to network and
serialization to database. To database shouldn't change timeouts, to
network should (what I stated last time). To database should store
private keys, to network shouldn't. Easy solution: Protocol 1 is the
network protocol, which has a alias from LocalHost to Host as specified
under 2, Protocol 2 is the Database protocol, which doesn't have this
alias.

> Again, read http://twistedmatrix.com/documents/howto/pb-copyable.  With PB
> you can control exactly what data is sent over the wire.  You also get
> Referenceables, Copyables and Cacheables, which is considerably richer than
> a simple object protocol that just passes the occasional object-graph.

I'm not using PB, and I don't want to in this project. PB is fine, when
you have to deal with complex objects (just as Pyro is in that case),
but normally, you only have to send simple objects over the wire, and I
guess you're much more worried about the fact that objects might be
instantiated wrongly/have to do some parameter checking/get corrupted on
transport/willfully. And control over this "dark side of networking" is
exactly what this pickler tries to achieve by giving you full control
over the pickling and unpickling process.

> TCP guarantees the data isn't corrupted on the way through.  Use SSL to 
> guarantee that the traffic isn't being sniffed or tampered with in transit.
> PB has an authentication step so that you can know who the clients are.
> Between all this, I'm not sure what problem your signatures are solving that
> isn't already solved?

The transport I use isn't TCP, but UDP. And rewriting PB to use UDP
would be a little strange... :) Anyway, what I actually meant by
signatures: You can use public key encryption/signing to encrypt members
of your data stream. Classes can request to have certain members
encrypted/signed in the serialization stream, just as you can for the
whole pickle, and when unserializing, you can specify what to do when
non-decryptable packets or invalid signature packets are found, without
discarding the whole pickle (which is useful, if you need to pass around
some structures which have private "text" content, but should
nevertheless be readable as to timeout and the like, the class being
called "Data").

> As far as I can see (although I'm no PB expert), PB satisfies 1 and 4.  What
> makes you think it doesn't?

PB could certainly be crafted to satisfy 1+4, but it certainly doesn't
do UDP transport, which I need... And I don't think any PB code which
handles most of the points above is as clean as it is with my own
serializer.

Which isn't bad, of course! PB was just designed with completely
different ideas in mind...

Again just my 5 cents... :)

Heiko.




From lafou at wanadoo.fr  Wed May 28 13:12:23 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: 28 May 2003 19:12:23 +0200
Subject: [Twisted-Python] Woven and wxHtmlWindow
Message-ID: <1054141943.16199.71.camel@biproc>

hello

I'm using twisted to develop a calculation server. The server has a
managment interface written in wxpython. I want to display results in a
dynamic html page (using woven). 

but my wxHtmlWindow refuses to display the page, and I just get a blank
page with :
-----------------


Click Here


-----------------

(whitout the ---)
Here is a link that points to http://server/project/results.rpy
But the url given to wxHtmlWindow is
http://server:8081/project/results.rpy

Anyone got the same problem ?
This is very strange (no trace in logs).

Thx !

-- 
Philippe Lafoucri?re <lafou at wanadoo.fr>
InFuzzion




From dp at twistedmatrix.com  Wed May 28 14:31:39 2003
From: dp at twistedmatrix.com (Donovan Preston)
Date: Wed, 28 May 2003 11:31:39 -0700
Subject: [Twisted-Python] Woven and wxHtmlWindow
In-Reply-To: <1054141943.16199.71.camel@biproc>
Message-ID: <9F385C16-913A-11D7-B5A5-00039376B1AE@twistedmatrix.com>

On Wednesday, May 28, 2003, at 10:12 AM, Philippe Lafoucri?re wrote:

> hello
>
> I'm using twisted to develop a calculation server. The server has a
> managment interface written in wxpython. I want to display results in a
> dynamic html page (using woven).
>
> but my wxHtmlWindow refuses to display the page, and I just get a blank
> page with :
> -----------------
>
>
> Click Here
>
>
> -----------------
>
> (whitout the ---)
> Here is a link that points to http://server/project/results.rpy
> But the url given to wxHtmlWindow is
> http://server:8081/project/results.rpy
>
> Anyone got the same problem ?
> This is very strange (no trace in logs).

It's trying to do a redirect to http://server:8081/project/results.rpy/ 
(with a slash at the end) and apparently wxHtmlWindow doesn't know how 
to deal with a redirect. You can either put the slash at the end of the 
URL you are requesting, or set addSlash = 0 on your Page instance.

Donovan




From cce at clarkevans.com  Wed May 28 16:55:21 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Wed, 28 May 2003 20:55:21 +0000
Subject: [Twisted-Python] flow module release canidate and future schedule
Message-ID: <20030528205521.GA62480@doublegemini.com>

Hello.  Over this last week, quite alot of work has been put into
the flow module.   As of today, I have other responsibilities which
I must attend... but flow is being used in one of my internal
projects at Axista, Inc. and is quite stable.

I encourage people to try it out.. it's quite nice if
I don't say so myself.

What is flow?

  Flow is a module which leverages generators to provide for
  incremental result multi-stage operations (like http requests) 
  which can cooperate with other operations without blocking.
  See sandbox/flow.html for more information

Current Status:

  0. The documentation (flow.html) is now much more clear
     and "up-to-date" with respect to newer changes.  Please
     take it for a spin.  All of the examples are full-fledged
     programs and should run.

  1. Flow is quite faster now, about 2-3x from the previous
     versions.  This is due to some significant profiling and
     an enhancement proposed by exarkun; in particular, each 
     yield can support returning a row set rather than a 
     single row.  This is a boon for database applications.

  2. Flow supports protocols with one callback, which should
     handle most protocol requirements.   An echo 'client' and
     echo 'server' are included in sandbox/cce/echo.py

  3. Several 'helpers' such as Merge, Zip, are now available
     and well tested (Merge isn't perfect yet though).

  4. Flow supports not only deferreds, but also callbacks;
     this is flow.Callback, which is used, not suprizingly,
     by flow.Protocol 

  5. The "Instruction" mechanism has been revamped to support
     'CallLater' instructions.  This is an internal refactor
     which cleaned up alot of code.

  6. The test suite has been greatly expanded to test these
     items.

Future Directions:

  1. As I start playing with more protocols, I'll probably add
     a few 'filters' which would take a raw flow.Protocol and
     return items by line or by a specified chunk size.

  2. The 'Merge' code needs some reviewing as it isn't perfect
     and doesn't behave quite right yet.   I don't have any
     serious use case for this right now, so it may not get
     fixed for another month or so.

  3. Eventually (probably late this year) I'll consider writing
     flow as a "C" module for speed.  This should be about 2-3x
     faster in most cases.   So, if you are not using flow beacuse
     of speed concerns, keep this in mind and let me know.

Best,

Clark



From bob at redivi.com  Wed May 28 17:30:00 2003
From: bob at redivi.com (Bob Ippolito)
Date: Wed, 28 May 2003 17:30:00 -0400
Subject: [Twisted-Python] flow module release canidate and future schedule
In-Reply-To: <20030528205521.GA62480@doublegemini.com>
Message-ID: <89379CCB-9153-11D7-9FAC-000A95686CD8@redivi.com>

On Wednesday, May 28, 2003, at 16:55 America/New_York, Clark C. Evans 
wrote:
> Future Directions:
>
>   1. As I start playing with more protocols, I'll probably add
>      a few 'filters' which would take a raw flow.Protocol and
>      return items by line or by a specified chunk size.

Take a look at the example I posted to the mailing list last Friday for 
an example of how I did this (per-yield chunk size, not delimiter 
based).  It greatly simplified my gzip/gunzip code.

Also, the "byte pipe" I'm using can surely be accelerated by using 
iovec (in sandbox/exarkun), I basically rewrote it and extended it so 
it could accomodate pipe usage.

>
>   2. The 'Merge' code needs some reviewing as it isn't perfect
>      and doesn't behave quite right yet.   I don't have any
>      serious use case for this right now, so it may not get
>      fixed for another month or so.
>
>   3. Eventually (probably late this year) I'll consider writing
>      flow as a "C" module for speed.  This should be about 2-3x
>      faster in most cases.   So, if you are not using flow beacuse
>      of speed concerns, keep this in mind and let me know.

If I end up finding any significant use for flow, which I almost 
definitely will, I'll help you out with that.

-bob




From gnosis at gnosis.cx  Wed May 28 17:13:21 2003
From: gnosis at gnosis.cx (Dr. David Mertz)
Date: Wed, 28 May 2003 16:13:21 -0500 (CDT)
Subject: [Twisted-Python] Woven example for article
Message-ID: <Pine.LNX.4.44.0305281550520.31004-100000@ringo.siteprotect.com>

Hi developers,

I am doing a series of articles on Twisted Matrix for IBM 
developerWorks (I imagine most of you know who I am; if not, you 
can check my stuff easily).  A first part, already submitted, 
looks at implementing custom protocols, and a bit of the 
low-level stuff in Twisted, which I understand moderately well 
now.  FWIW, I put a copy of the first part at:

  http://gnosis.cx/secret/twisted1.txt

I'm not sure exactly when it will get edited and published by dW.

The next article which I'm now working on wants to look at some 
of the web development features in Twisted.

By way of that, I tried the PicturePile example, from:

  http://twistedmatrix.com/documents/howto/listings/PicturePile/

Discussed at:

  http://twistedmatrix.com/documents/howto/picturepile

I'm not sure exactly which Twisted version the example was 
written for, but I get errors trying to use it (my account at 
python-hosting.com seems to have 1.0.3 installed, and the 
administrator manages the installation).  The browser displays:

  http://gnosis.cx/secret/Failure!.html

(this is a mirror of the actual page).  The server log is:

  http://gnosis.python-hosting.com/PicturePile.log

Any idea how to make this example work? 

Yours, David..

P.S. Further question to follow momentarily... 




From gnosis at gnosis.cx  Wed May 28 18:20:39 2003
From: gnosis at gnosis.cx (Dr. David Mertz)
Date: Wed, 28 May 2003 17:20:39 -0500 (CDT)
Subject: [Twisted-Python] Woven example for article, Part II
In-Reply-To: <Pine.LNX.4.44.0305281550520.31004-100000@ringo.siteprotect.com>
Message-ID: <Pine.LNX.4.44.0305281652220.7672-100000@ringo.siteprotect.com>

Hi again,

I wrote a note a bit ago about my problems running the 
PicturePile example.  But that's not really what I would most 
want to present in my article anyway.

In a tip I wrote for the IBM developerWorks XML Zone, I developed 
a slightly-better-than-trivial example of a remote monitor of 
hits to a website.  The initial custom client/server used XML as 
a line format, but that's not important here.  I often like to 
continue an example over various iterations.

In particular, you can see that I reimplemented this same 
client/server (with slight variations in operation) in Twisted 
for my first article:

  http://gnosis.cx/secret/twisted1.txt

I'd like to continue this idea with more sophisticated--and web 
based--implementations.  One really simple approach is to simply 
create a static page that displays hits, but use the <meta> 
refresh tag to make it load repeatedly.  Meanwhile, a 
long-running script can update this page in the background.  In 
Twisted, it could be:

----------------------------------------------------------------------------
[gnosis at boa twisted]$ cat tlogmaker.py
#!/usr/bin/env python2.2
from twisted.internet import reactor
from webloglib import log_fields
from webloglib import ip, timestamp, request, status, bytes, referrer, agent

LOG = open('access-log')
RECS = []
PAGE = 'www/refresher.html'
TOP, ROW, END, COLOR = ...

def update():
    global RECS
    page = open(PAGE,'w')
    RECS.extend(LOG.readlines())
    RECS = RECS[-35:]
    print >> page, TOP
    odd = 0
    for rec in RECS:
        hit = [field.strip('"') for field in log_fields(rec)]
        if hit[status]=='200' and hit[referrer]!='-':
            resource = hit[request].split()[1]
            print >> page, ROW % (COLOR[odd], hit[referrer], resource)
            odd = not odd
    print >> page, END
    page.close()
    reactor.callLater(5, update)

update()    
reactor.run()
----------------------------------------------------------------------------

Of course, this is completely trivial as a use of Twisted--using 
time.sleep() in the loop would be exactly as good (and I made a 
version that does that for comparison).  The produced page, btw, 
is at:

  http://gnosis.python-hosting.com/refresher.html

But the update script may or may not be running while you check 
the page (which doesn't affect the viewability of the page, just 
its up-to-date-ness.

The next step is probably to show a 'refresher.rpy' variant on 
the same basic thing.  That is straigtforward, and I understand 
how to do that.

But past that, I'd like to create a version that has more 
meaningful interaction with the web browser.  One obvious 
interaction is to let the client select which log fields to 
display--probably using a bunch of checkboxes for those fields 
listed in the second 'from weblog import ...' line of the above 
script.  Maybe this user preference could be stored in a cookie 
(maybe number of rows to display as another option).

I don't really understand Twisted well enough to know what the
most logical approach to this next variant would be.  It seems
like woven is the main web technology in Twisted... but given my
problems running even the bundled example, I'm not sure how to
proceed.

If anyone here would like to help me create an example, that 
would make my next article better--and I'll give you credit for 
the assist.  I like Twisted, but with all the pieces, its hard to 
get started nicely... maybe a good few articles (by me, or 
otherwise) can help bridge the gap for new users (like me :-)).

Yours, David...




From andrew-twisted at puzzling.org  Wed May 28 22:01:12 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu, 29 May 2003 12:01:12 +1000
Subject: [Twisted-Python] Woven example for article
In-Reply-To: <Pine.LNX.4.44.0305281550520.31004-100000@ringo.siteprotect.com>
References: <Pine.LNX.4.44.0305281550520.31004-100000@ringo.siteprotect.com>
Message-ID: <20030529020112.GA12788@frobozz>

On Wed, May 28, 2003 at 04:13:21PM -0500, Dr. David Mertz wrote:
[...]
> 
> I'm not sure exactly which Twisted version the example was 
> written for, but I get errors trying to use it (my account at 
> python-hosting.com seems to have 1.0.3 installed, and the 
> administrator manages the installation).  The browser displays:
> 
>   http://gnosis.cx/secret/Failure!.html

You really should be using Twisted 1.0.5 if you want to use Woven.  It's
finally settling down, but it's been a rapidly moving target for quite a
while.

You should be able to install it locally, if python-hosting.com can't
upgrade in time for your article.  Is there any reason why this isn't an
option?  (If necessary, someone here might be able to donate an account on a
Twisted-enabled box somewhere for you to experiment with...)

-Andrew.




From m at moshez.org  Thu May 29 00:02:00 2003
From: m at moshez.org (Moshe Zadka)
Date: 29 May 2003 04:02:00 -0000
Subject: [Twisted-Python] Woven example for article, Part II
In-Reply-To: <Pine.LNX.4.44.0305281652220.7672-100000@ringo.siteprotect.com>
References: <Pine.LNX.4.44.0305281652220.7672-100000@ringo.siteprotect.com>
Message-ID: <20030529040200.26217.qmail@green.zadka.com>

On Wed, 28 May 2003, "Dr. David Mertz" <gnosis at gnosis.cx> wrote:

> #!/usr/bin/env python2.2
...
> def update():
...
>     page = open(PAGE,'w')
...
>     for rec in RECS:
...
>             print >> page, ROW % (COLOR[odd], hit[referrer], resource)
...
>     print >> page, END
>     page.close()
...

Please don't do this kind of things in example code:

page = open(PAGE+'.tmp', 'w')
...
page.close()
os.rename(PAGE+'.tmp', PAGE)
...

is safer, and lacks race condition. I really wish people would use it
more.

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From itamar at itamarst.org  Thu May 29 00:22:22 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 29 May 2003 00:22:22 -0400
Subject: [Twisted-Python] Woven example for article
In-Reply-To: <Pine.LNX.4.44.0305281550520.31004-100000@ringo.siteprotect.com>
References: <Pine.LNX.4.44.0305281550520.31004-100000@ringo.siteprotect.com>
Message-ID: <20030529002222.4be85559.itamar@itamarst.org>

On Wed, 28 May 2003 16:13:21 -0500 (CDT)
"Dr. David Mertz" <gnosis at gnosis.cx> wrote:

> I am doing a series of articles on Twisted Matrix for IBM 
> developerWorks (I imagine most of you know who I am; if not, you 
> can check my stuff easily).  A first part, already submitted, 

Cool! Just one note - the package is called Twisted, not Twisted Matrix.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From itamar at itamarst.org  Thu May 29 00:30:27 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 29 May 2003 00:30:27 -0400
Subject: [Twisted-Python] Woven example for article, Part II
In-Reply-To: <Pine.LNX.4.44.0305281652220.7672-100000@ringo.siteprotect.com>
References: <Pine.LNX.4.44.0305281550520.31004-100000@ringo.siteprotect.com>
	<Pine.LNX.4.44.0305281652220.7672-100000@ringo.siteprotect.com>
Message-ID: <20030529003027.14a164bf.itamar@itamarst.org>

On Wed, 28 May 2003 17:20:39 -0500 (CDT)

> I don't really understand Twisted well enough to know what the
> most logical approach to this next variant would be.  It seems
> like woven is the main web technology in Twisted... but given my
> problems running even the bundled example, I'm not sure how to
> proceed.

Woven is built on top of twisted.web. You probably want to look at
twisted.web.resource,
http://twistedmatrix.com/documents/howto/web-overview,
twisted.protocol.http.Request and the web examples. Also
http://twistedmatrix.com/users/nafai/pycon-paper/

Not much docs for these parts, but its pretty simple:


from twisted.web import server, static, resource
from twisted.internet import reactor

class MyResource(resource.Resource):

    def render(self, request):
        return "<html><body>%s</body></html>" % request.args

r = MyResource()
r.putChild("pages", static.File("/var/www"))
reactor.listenTCP(8080, server.Site(r))
reactor.run()


-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From cce at clarkevans.com  Thu May 29 01:50:30 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu, 29 May 2003 05:50:30 +0000
Subject: [Twisted-Python] a tranceiver interface
Message-ID: <20030529055030.GA64244@doublegemini.com>

There are two forms of data flow constructs available, push and pull.  
The "push" based consumer/producer flow looks something like...

    class receiver:
        """ what is a consumer """
        def start(self):
            'what is called to start the stream'
        def result(self, value):
            'what is called for each data item in the stream'
        def finish(self):
            'what is called at the end of the stream'

    class transmitter:
        """ what is a producer """
        def __init__(self, receiver):
            self.receiver = consumer
            # push data to receiver when ready

    class tranceiver(receiver, transmitter):
        """ what is both a producer and a consumer
            by default, just be a simple 'passthrough'
        """
        def start(self):
            self.receiver.start()
        def result(self, value):
            # process result
            self.receiver.result(value)
        def finish(self):
            self.receiver.finish()
    
The equivalent version of a 'passthrough' tranceiver in "pull" land 
can be written nicely as a generator:
 
    def consumer(producer):
        # start: what is called to start the stream
        for result in producer:
            # what is called for each data item in the stream
            yield result
        # finish: what is called at the end of the stream

What is intersting is that the producer is passed the consumer (not the 
other way around) as the 'push' example, and that the 3 states are 
encapsulated not by a particular callback function, but more by the 
position within the generator.  Unfortunately, direct use of generator 
like this doesn't give other operations a chance to process, but this 
shortcoming can be addressed by using the flow module:

    def consumer(producer):
        # start: what is called to start the stream
        producer = flow.wrap(producer)
        yield producer
        for result in producer:
            # what is called for each data item in the stream
            yield result
            yield producer
        # finish: what is called at the end of the stream

In this way, the consumer works exactly as it did before, only
that now other operations can proceed (if the producer is not
immediately ready) when "yield producer" is encountered.

Best,

Clark



From jml at ids.org.au  Thu May 29 04:02:22 2003
From: jml at ids.org.au (Jonathan Lange)
Date: Thu, 29 May 2003 18:02:22 +1000
Subject: [Twisted-Python] Sending and receiving mail in a Twisted app
Message-ID: <20030529080222.GE846@sting>

Hello,

I'd like to have a Twisted application that sends and responds to mail. 
There aren't any howtos on this.

Apart from reading stuff in twisted.mail and the associated tests, are 
there any other resources I could use to get a grip on this part of 
Twisted? 
Thanks,
jml



From pobrien at orbtech.com  Thu May 29 09:39:52 2003
From: pobrien at orbtech.com (Patrick K. O'Brien)
Date: Thu, 29 May 2003 08:39:52 -0500
Subject: [Twisted-Python] listings/pclients/multiple.py typo
Message-ID: <200305290839.52437.pobrien@orbtech.com>

From listings/pclients/multiple.py:

    def __getstate__(self):
        state = styles.Versioned.__getstate__(self)
        state['client'] = {}
        return state

Shouldn't that be 'clients':

    def __getstate__(self):
        state = styles.Versioned.__getstate__(self)
        state['clients'] = {}
        return state

-- 
Patrick K. O'Brien
Orbtech      http://www.orbtech.com/web/pobrien
-----------------------------------------------
"Your source for Python programming expertise."
-----------------------------------------------




From pobrien at orbtech.com  Thu May 29 10:31:47 2003
From: pobrien at orbtech.com (Patrick K. O'Brien)
Date: Thu, 29 May 2003 09:31:47 -0500
Subject: [Twisted-Python] Perspective / Client confusion
Message-ID: <200305290931.47277.pobrien@orbtech.com>

I've read all the spread and pb docs several times now, and I'm still confused 
about some issues, particularly having to do with cred.  I've created a pb 
app and am trying to figure out the best way to use Perspectives.  Can 
someone explain why I would want to use one Perspective instance that kept 
track of attached clients, as shown in listings/pclients/multiple.py, versus 
creating a Perspective instance for each client, versus something more 
dynamic as hinted at in http://www.twistedmatrix.com/documents/howto/pb-cred:

<quote>
In addition, .attached() has the opportunity to return a different 
Perspective, if it so chooses. You could have all users initially access the 
same Perspective, but then as they connect (and .attached() gets called), 
give them unique Perspectives based upon their individual Identities. The 
client will get a reference to whatever .attached() returns, so the default 
case is to 'return self'.
</quote>

This application is sort of like a traditional database application.  There 
will be admin-type users as well as employees with more limited authority.  
Customers will also have access to the application but will only be able to 
make changes to their own account information.  I have a very simple demo 
that I am using to try out different approaches, which you can find here, if 
you want to see how I'm coding things:

http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/pypersyst/sandbox/pobrien/twistedbank/

Since I'm using PyPerSyst to persist all the application data, I could also 
store user information there and use that to determine what a user can/cannot 
do, rather than rely on Perspectives.  But I'm not sure that is the right 
approach.  Any help would be greatly appreciated.

-- 
Patrick K. O'Brien
Orbtech      http://www.orbtech.com/web/pobrien
-----------------------------------------------
"Your source for Python programming expertise."
-----------------------------------------------




From warner at lothar.com  Thu May 29 14:12:29 2003
From: warner at lothar.com (Brian Warner)
Date: Thu, 29 May 2003 11:12:29 -0700 (PDT)
Subject: [Twisted-Python] listings/pclients/multiple.py typo
References: <200305290839.52437.pobrien@orbtech.com>
Message-ID: <20030529.111229.88714094.warner@lothar.com>

"Patrick K. O'Brien" <pobrien at orbtech.com> writes:

> Shouldn't that be 'clients':

Absolutely right. I just committed the fix.. thanks for the catch!

 -Brian



From ibook at gnosis.cx  Thu May 29 00:52:57 2003
From: ibook at gnosis.cx (david mertz)
Date: Thu, 29 May 2003 00:52:57 -0400
Subject: [Twisted-Python] Woven example for article, Part II
Message-ID: <3ED59229.6010109@gnosis.cx>

Moshe Zadka wrote:
|page = open(PAGE+'.tmp', 'w')
|...
|page.close()
|os.rename(PAGE+'.tmp', PAGE)
|is safer, and lacks race condition.

Moshe is right here, of course.  I was being sloppy in trying to write a
quick example; but I'll make his change for the actual article.

Yours, David...

P.S. To Itamar: OK, I'll adjust my usage to properly call the package
just "Twisted".

To Andrew, and generally: I have installed a local copy of 1.0.5, and
that at least makes the PicturePile example work (there are a few minor
errors in the samples, but straightforward to fix)--it might be worth
mentioning a minimum (maximum?) version of the package needed for
tutorial examples.  For someone trying to get a handle, like me, it is
not immediately obvious what will fail subtely in 1.0.3 but work in
1.0.5.




From joe at overdrivepc.com  Thu May 29 12:17:16 2003
From: joe at overdrivepc.com (Joe Brown)
Date: Thu, 29 May 2003 12:17:16 -0400
Subject: [Twisted-Python] Perspective / Client confusion
In-Reply-To: <200305290931.47277.pobrien@orbtech.com>
References: <200305290931.47277.pobrien@orbtech.com>
Message-ID: <3ED6328C.6010200@overdrivepc.com>

Hi Patrick,

I'm pretty much in the same boat as you.  Although I think I have a 
grasp no the different uses for mutiple/single prespectives, I'm 
currently struggeling with dbcred and how I want to apply prospectives 
to my rdbms application.

I'd love to do an IRC session, but I don't know which IRC server to use :o

I've found chatzilla (included in the www.mozilla.org web browser 
distribution) to be a nice IRC client, BTW

-Joe




From glyph at twistedmatrix.com  Thu May 29 16:37:49 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 29 May 2003 16:37:49 -0400
Subject: [Twisted-Python] Perspective / Client confusion
In-Reply-To: <200305290931.47277.pobrien@orbtech.com>
Message-ID: <6972FDC2-9215-11D7-A665-000393C9700E@twistedmatrix.com>

On Thursday, May 29, 2003, at 10:31 AM, Patrick K. O'Brien wrote:

> Since I'm using PyPerSyst to persist all the application data, I could 
> also
> store user information there and use that to determine what a user 
> can/cannot
> do, rather than rely on Perspectives.  But I'm not sure that is the 
> right
> approach.  Any help would be greatly appreciated.

Perspective is a very simple concept, with an almost-equally-simple 
representation.  It just means "a token representing the user's 
presence and permissions within the context of a particular service".  
So, you should be able to use PyPerSyst to store Perspective subclass 
instances as the "user information" that you want to keep in your 
application.




From pobrien at orbtech.com  Thu May 29 20:03:22 2003
From: pobrien at orbtech.com (Patrick K. O'Brien)
Date: Thu, 29 May 2003 19:03:22 -0500
Subject: [Twisted-Python] Perspective / Client confusion
In-Reply-To: <6972FDC2-9215-11D7-A665-000393C9700E@twistedmatrix.com>
References: <6972FDC2-9215-11D7-A665-000393C9700E@twistedmatrix.com>
Message-ID: <200305291903.22466.pobrien@orbtech.com>

On Thursday 29 May 2003 03:37 pm, Glyph Lefkowitz wrote:
> On Thursday, May 29, 2003, at 10:31 AM, Patrick K. O'Brien wrote:
> > Since I'm using PyPerSyst to persist all the application data, I could
> > also
> > store user information there and use that to determine what a user
> > can/cannot
> > do, rather than rely on Perspectives.  But I'm not sure that is the
> > right
> > approach.  Any help would be greatly appreciated.
>
> Perspective is a very simple concept, with an almost-equally-simple
> representation.  It just means "a token representing the user's
> presence and permissions within the context of a particular service".
> So, you should be able to use PyPerSyst to store Perspective subclass
> instances as the "user information" that you want to keep in your
> application.

Itamar helped me a bit on #twisted, but I'm still a bit unsure of myself.  The 
problem seems to be that there are a number of different ways to do 
everything, and it isn't entirely clear to me how to evaluate the options.  
For example, I need more than one Perspective subclass.  And I'd like the 
same person (Identity) to be able to log into the application with whichever 
Perspective is available to them.

Itamar suggested that the best approach would be to have one service, several 
Perspective subclasses, and one Perspective instance for each client.  So now 
I think I need to override the service.createPerspective() to create the 
right kind of Perspective instance, or create the Perspective independently 
and then send it to service.addPerspective().  It also seems to me that I 
should hide the Perspective details such that when a user logs in they simply 
choose which of their perspectives they want to use (admin, user, customer, 
for example).  It also seems to me that I should generate the perspective 
names automatically, in order to keep them unique within the service 
(something like identity.name + perspective.__class__.__name__, perhaps).

If I'm going to persist identities and perspectives using PyPerSyst, I also 
need to be careful what references those objects contain, such as 
perspective.service and service.authorizer.  I'm not sure I want those 
persisted, so I probably need to add __getstate__ and __setstate__ methods to 
my subclasses.  I also need a way to load persistent indentities and 
perspectives from PyPerSyst when the application starts.  I know I've seen 
mention of those "load" methods, but I couldn't find any code examples.

I also need to figure out how to allow someone to create new identities and 
perspectives in the first place.  So I probably need to have the app start 
with a "root" type user/perspective that has the authority to create new 
identities and perspectives.  Maybe I need another Perspective subclass that 
deals only with that capability.

Am I making this more complicated than it needs to be?  I'd love to hear 
someone say "yes" and then show me a simple way.  It seems like what I'm 
trying to do would be pretty common for anyone creating a PB application that 
had many users that needed to be divided into groups, with each group having 
different capabilities.  The plumbing all seems to be there (Identity, 
Perspective, Service, Authorizer, etc.), but hooking everything together 
still eludes me.

-- 
Patrick K. O'Brien
Orbtech      http://www.orbtech.com/web/pobrien
-----------------------------------------------
"Your source for Python programming expertise."
-----------------------------------------------




From pobrien at orbtech.com  Thu May 29 20:55:51 2003
From: pobrien at orbtech.com (Patrick K. O'Brien)
Date: Thu, 29 May 2003 19:55:51 -0500
Subject: [Twisted-Python] Perspective / Client confusion
In-Reply-To: <200305291903.22466.pobrien@orbtech.com>
References: <6972FDC2-9215-11D7-A665-000393C9700E@twistedmatrix.com> <200305291903.22466.pobrien@orbtech.com>
Message-ID: <200305291955.51622.pobrien@orbtech.com>

On Thursday 29 May 2003 07:03 pm, Patrick K. O'Brien wrote:
> Itamar suggested that the best approach would be to have one service,
> several Perspective subclasses, and one Perspective instance for each
> client.  So now I think I need to override the service.createPerspective()
> to create the right kind of Perspective instance, or create the Perspective
> independently and then send it to service.addPerspective().  It also seems
> to me that I should hide the Perspective details such that when a user logs
> in they simply choose which of their perspectives they want to use (admin,
> user, customer, for example).  It also seems to me that I should generate
> the perspective names automatically, in order to keep them unique within
> the service (something like identity.name + perspective.__class__.__name__,
> perhaps).

This is working so far:

    identity = auth.createIdentity('root')
    identity.setPassword('password')
    identity.save()

    perspective = AdminPerspective(identity)
    service.addPerspective(perspective)
    identity.addKeyForPerspective(perspective)

    perspective = UserPerspective(identity)
    service.addPerspective(perspective)
    identity.addKeyForPerspective(perspective)

    application.run()

The init for my base Perspective class looks like this:

    def __init__(self, identity):
        """Create a Perspective for the identity."""
        if not isinstance(identity, auth.identityClass):
            raise TypeError("Expected identity instance, got %s." % identity)
        perspectiveName = identity.name + ':' + self.__class__.__name__
        pb.Perspective.__init__(self, perspectiveName, identity.name)

-- 
Patrick K. O'Brien
Orbtech      http://www.orbtech.com/web/pobrien
-----------------------------------------------
"Your source for Python programming expertise."
-----------------------------------------------




From m at moshez.org  Thu May 29 20:59:49 2003
From: m at moshez.org (Moshe Zadka)
Date: 30 May 2003 00:59:49 -0000
Subject: [Twisted-Python] Woven example for article, Part II
In-Reply-To: <3ED59229.6010109@gnosis.cx>
References: <3ED59229.6010109@gnosis.cx>
Message-ID: <20030530005949.6666.qmail@green.zadka.com>

On Thu, 29 May 2003, david mertz <ibook at gnosis.cx> wrote:

> To Andrew, and generally: I have installed a local copy of 1.0.5, and
> that at least makes the PicturePile example work (there are a few minor
> errors in the samples, but straightforward to fix)--it might be worth
> mentioning a minimum (maximum?) version of the package needed for
> tutorial examples.  For someone trying to get a handle, like me, it is
> not immediately obvious what will fail subtely in 1.0.3 but work in
> 1.0.5.

There is a reason the documentation comes with the package: it is relevant
to the version it comes with. In particular, the documentation on tm.com
is only relevant to "latest stable". This is just like Python: if you
read documentation from http://www.python.org/doc/current/, don't count
on it working with Python 2.1.

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From ibook at gnosis.cx  Thu May 29 23:02:59 2003
From: ibook at gnosis.cx (david mertz)
Date: Thu, 29 May 2003 23:02:59 -0400
Subject: [Twisted-Python] Woven example for article, Part II
Message-ID: <3ED6C9E3.7000403@gnosis.cx>

On Thu, 29 May 2003, david mertz <ibook at gnosis.cx> wrote:
 > To Andrew, and generally: I have installed a local copy of 1.0.5, and
 > that at least makes the PicturePile example work (there are a few
 > minor errors in the samples, but straightforward to fix)

Moshe Zadka wrote:
|There is a reason the documentation comes with the package:
|it is relevant to the version it comes with. In particular, the
|documentation on tm.com is only relevant to "latest stable". This is
|just like Python: if you read documentation from 
|http://www.python.org/doc/current/, don't count on it working with 
|Python 2.1.

This is very unhelpful, Moshe.  The documentation on the Twisted website
(as mentioned in my earlier note), unlike most Python standard
documentation, does not indicate in which versions the examples work
(PicturePile, specifically).  Nothing like "new in 1.0.4".  Moreover,
the errors did not make it obvious there was a version issue (and in any
case, the example still needed some minor corrections to work with
1.0.5).  Andrew's advice (and some by email) was helpful, but it was
hardly obvious a priori what the issue was.

Moreover, I have not encountered any change log that addresses woven 
version differences in any detail.  Quite possibly there is such a 
document, but I do not now know where it is.

None of this, btw., means to demean Twisted itself.  I do think it could 
use a bit more directed documentation, but the concept and subpackages 
themselves seem very useful and well conceived.

Yours, David...




From itamar at itamarst.org  Fri May 30 01:23:40 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 30 May 2003 01:23:40 -0400
Subject: [Twisted-Python] Woven example for article, Part II
In-Reply-To: <3ED6C9E3.7000403@gnosis.cx>
References: <3ED6C9E3.7000403@gnosis.cx>
Message-ID: <20030530012340.16d9d214.itamar@itamarst.org>

On Thu, 29 May 2003 23:02:59 -0400
david mertz <ibook at gnosis.cx> wrote:

> Moreover, I have not encountered any change log that addresses woven 
> version differences in any detail.  Quite possibly there is such a 
> document, but I do not now know where it is.

The ChangeLog usually doesn't cover code that is unstable. In general,
*always* use the latest version of Twisted. Certain parts are pretty
stable (e.g. the networking core in twisted.internet), but other parts
are under continous development. It's not good that the docs don't
mention what's in a given version of Twisted, but we have enough work on
our hands writing them and keeping them up to date.

Typically, unless the module has a docstring saying the API is stable,
it probably isn't. There will usually be a backwards compatability layer
if changes are made, though. Woven's been pretty good about that, and is
now settling down into stability.

Twisted developers will typically develop off CVS, since we're always
adding features we need for our own projects.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From dalke at dalkescientific.com  Fri May 30 01:47:07 2003
From: dalke at dalkescientific.com (Andrew Dalke)
Date: Thu, 29 May 2003 23:47:07 -0600
Subject: [Twisted-Python] Woven example for article, Part II
In-Reply-To: <20030530012340.16d9d214.itamar@itamarst.org>
Message-ID: <262071F2-9262-11D7-B9B9-000393C92466@dalkescientific.com>

Itamar Shtull-Trauring:
> Typically, unless the module has a docstring saying the API is stable,
> it probably isn't. There will usually be a backwards compatability 
> layer
> if changes are made, though. Woven's been pretty good about that, and 
> is
> now settling down into stability.

How comfortable should I be with these modules?

conch/__init__.py:This module is unstable.
conch/authorizer.py:This module is unstable.
conch/error.py:This module is unstable.
conch/identity.py:This module is unstable.
cred/authorizer.py:Stability: semi-stable
cred/identity.py:Stability: semi-stable
cred/perspective.py:Stability: semi-stable
cred/service.py:Stability: semi-stable
cred/util.py:Stability: semi-stable
internet/defer.py:    API Stability: Unstable
internet/error.py:API Stability: semi-stable
internet/interfaces.py:API Stability: stable, other than IReactorUDP 
(semi-stabl
e) and
internet/interfaces.py:IReactorMulticast (unstable).
internet/interfaces.py:    This interface is semi-stable.
internet/interfaces.py:    This interface is semi-stable.
internet/interfaces.py:    This interface is semi-stable.
internet/protocol.py:API Stability: stable, other than ClientCreator.
internet/protocol.py:    The API for this class is not stable.
internet/protocol.py:    This class is unstable.
internet/protocol.py:    This class is unstable.
internet/pyuisupport.py:API Stability: unstable
internet/stdio.py:API Stability: semi-stable
internet/tksupport.py:API Stability: semi-stable
internet/udp.py:API Stability: unstable
internet/win32eventreactor.py:API Stability: semi-stable
names/client.py:API Stability: Unstable
names/resolve.py:API Stability: Unstable
names/server.py:API Stability: Unstable
news/database.py:Stability: semi-stable
news/news.py:Stability: semi-stable
protocols/basic.py:API Stability: semi-stable.
protocols/dns.py:API Stability: Unstable
protocols/ftp.py:Stability: semi-stable
protocols/ftp.py:    This class is unstable (it will be heavily 
refactored to su
pport dynamic
protocols/ftp.py:    This class is semi-stable.
protocols/http.py:API Stability: Server HTTP support is semi-stable, 
client HTTP
  is unstable.
protocols/imap4.py:API Stability: Semi-stable
protocols/irc.py:Stability: semi-stable.
protocols/msn.py:Stability: unstable.
protocols/nntp.py:Stability: semi-stable
protocols/oscar.py:This module is unstable.
protocols/policies.py:    """Stability: Unstable"""
protocols/policies.py:    """Stability: Unstable"""
protocols/policies.py:    Stability: Unstable
protocols/policies.py:    Stability: Unstable
python/roots.py:Stability: Unstable
runner/__init__.py:Stability: semi-stable
runner/inetd.py:Stability: semi-stable
runner/inetdtap.py:Stability: semi-stable
spread/__init__.py:Stability: semi-stable
spread/banana.py:Stability: semi-stable
spread/banana.py:Future Plans: This module is almost entirely stable.  
The same
caveat applies
spread/flavors.py:Stability: semi-stable
spread/jelly.py:Stability: semi-stable
spread/newjelly.py:Stability: semi-stable
spread/pb.py:Stability: semi-stable
spread/publish.py:Stability: semi-stable
spread/refpath.py:Stability: semi-stable
web/guard.py:This code is unstable and will probably be reimplemented 
at some point.
web/soap.py:API Stability: unstable
web/xmlrpc.py:API Stability: semi-stable
words/service.py:Future Plans: Woah boy.  This module is incredibly 
unstable.  I
t has an
words/tendril.py:Stability: No more stable than 
L{words<twisted.words.service>}.

Some of these semi-stable modules

By your definition, the following are the only stable modules

internet/abstract.py:API Stability: stable
internet/app.py:API Stability: stable
internet/base.py:API Stability: stable
internet/default.py:API Stability: stable
internet/defer.py:API Stability: stable
internet/fdesc.py:API Stability: stable
internet/gtk2reactor.py:API Stability: stable
internet/gtkreactor.py:API Stability: stable
internet/javareactor.py:API Stability: stable
internet/kqreactor.py:API Stability: stable
internet/pollreactor.py:API Stability: stable
internet/protocol.py:API Stability: stable, other than ClientCreator.
internet/qtreactor.py:API Stability: stable
internet/ssl.py:API Stability: stable
internet/threads.py:API Stability: stable
internet/wxsupport.py:API Stability: stable
protocols/toc.py:This module is stable, but deprecated.
runner/inetdconf.py:Stability: stable
spread/banana.py:Future Plans: This module is almost entirely stable.  
The same caveat applies

And what about modules which are not marked as stable or unstable?

% grep -i stable enterprise/*
%

					Andrew Dalke
					dalke at dalkescientific.com




From radix at twistedmatrix.com  Fri May 30 01:56:12 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 30 May 2003 01:56:12 -0400
Subject: [Twisted-Python] Woven example for article, Part II
In-Reply-To: <262071F2-9262-11D7-B9B9-000393C92466@dalkescientific.com>; from dalke@dalkescientific.com on Fri, May 30, 2003 at 01:47:07 -0400
References: <262071F2-9262-11D7-B9B9-000393C92466@dalkescientific.com>
Message-ID: <20030530055612.GC493@toshi.anaprd01.md.comcast.net>

On 2003.05.30 01:47, Andrew Dalke wrote:
> Itamar Shtull-Trauring:
> > Typically, unless the module has a docstring saying the API is stable,
> > it probably isn't. There will usually be a backwards compatability 
> > layer
> > if changes are made, though. Woven's been pretty good about that, and 
> > is
> > now settling down into stability.
> 
> How comfortable should I be with these modules?

We only offer stability info, we don't control your mind. :-)

> > The same caveat applies
> 
> And what about modules which are not marked as stable or unstable?
> 
> % grep -i stable enterprise/*
> %

There's a relevant FAQ item on this:

http://twistedmatrix.com/documents/howto/faq

In CVS, I've updated the name of the FAQ to just "Which parts 
of Twisted are stable", rather than being specific to 1.0, btw.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From tv at twistedmatrix.com  Fri May 30 03:31:04 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Fri, 30 May 2003 10:31:04 +0300
Subject: [Twisted-Python] Low-level networking in Twisted
In-Reply-To: <20030523183127.GA19720@lapdog>
References: <20030523183127.GA19720@lapdog>
Message-ID: <20030530073104.GA26662@lapdog>

On Fri, May 23, 2003 at 09:31:27PM +0300, Tommi Virtanen wrote:
>         I'm submitting it for review at an early stage so you can all
>         bash me to dea^W^W^W^Wgive me guidance on how to build it.
>         Especially look at what I did with AbstractDatagramProtocol,
>         how the classes interact, etc.

	As per Moshe's request, I switched from inheritance to
	interfaces. AbstractDatagramProtocol is still there,
	as I want to share code that used to be in DatagramProtocol
	with things that definitely aren't UDP protocols.

	If you have any objections, please say something fast;
	I will commit the code soon.

	http://twistedmatrix.com/~tv/lowlevel-networking-2.patch

-- 
:(){ :|:&};:



From pobrien at orbtech.com  Fri May 30 08:04:33 2003
From: pobrien at orbtech.com (Patrick K. O'Brien)
Date: Fri, 30 May 2003 07:04:33 -0500
Subject: [Twisted-Python] Perspective / Client confusion
In-Reply-To: <200305300936.45781.luc.stepniewski@adelux.fr>
References: <6972FDC2-9215-11D7-A665-000393C9700E@twistedmatrix.com> <200305291955.51622.pobrien@orbtech.com> <200305300936.45781.luc.stepniewski@adelux.fr>
Message-ID: <200305300704.33461.pobrien@orbtech.com>

On Friday 30 May 2003 02:36 am, Luc Stepniewski wrote:
> On Friday 30 May 2003 02:55, Patrick K. O'Brien wrote:
> > This is working so far:
> >
> >     identity = auth.createIdentity('root')
> >     identity.setPassword('password')
> >     identity.save()
> >
> >     perspective = AdminPerspective(identity)
> >     service.addPerspective(perspective)
> >     identity.addKeyForPerspective(perspective)
> >
> >     perspective = UserPerspective(identity)
> >     service.addPerspective(perspective)
> >     identity.addKeyForPerspective(perspective)
>
> If you do this, when the user root/password will log on, how will twisted
> know to which perspective to connect to? How will it differenciate your
> connection as adminperspective or userperpective, as you log as the same
> user/pass?

If you look at twisted.spread.pb you'll see that the pb.connect() function 
takes both a username (same as identity.name) and perspectiveName as 
parameters:

def connect(host, port, username, password, serviceName,
            perspectiveName=None, client=None, timeout=None):
    """Connects and authenticates, then retrieves a PB service.

    Required arguments:
       - host -- the host the service is running on
       - port -- the port on the host to connect to
       - username -- the name you will be identified as to the authorizer
       - password -- the password for this username
       - serviceName -- name of the service to request

    Optional (keyword) arguments:
       - perspectiveName -- the name of the perspective to request, if
            different than the username
       - client -- XXX the \"reference\" argument to
                  perspective.Perspective.attached
       - timeout -- see twisted.internet.tcp.Client

    @returns: A Deferred instance that gets a callback when the final
              Perspective is connected, and an errback when an error
              occurs at any stage of connecting.
    """

So my demo/hack client application supplies those details when a user logs on:

    def main(self):
        name = raw_input('Enter your login name (root): ')
        if not name:
            name = 'root'
        password = raw_input('Enter your password (password): ')
        if not password:
            password = 'password'
        perspective = raw_input('Enter your perspective (root:admin): ')
        if not perspective:
            perspective = 'root:admin'
        df = pb.connect(host='localhost',
                        port=8789,
                        username=name,
                        password=password,
                        serviceName='BankingService',
                        perspectiveName=perspective,
                        client=self,
                        timeout=30)
        df.addCallbacks(self.gotPerspective, self.noPerspective)
        reactor.run()

-- 
Patrick K. O'Brien
Orbtech      http://www.orbtech.com/web/pobrien
-----------------------------------------------
"Your source for Python programming expertise."
-----------------------------------------------




From itamar at itamarst.org  Fri May 30 10:27:01 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 30 May 2003 10:27:01 -0400
Subject: [Twisted-Python] Woven example for article, Part II
In-Reply-To: <262071F2-9262-11D7-B9B9-000393C92466@dalkescientific.com>
References: <20030530012340.16d9d214.itamar@itamarst.org>
	<262071F2-9262-11D7-B9B9-000393C92466@dalkescientific.com>
Message-ID: <20030530102701.1d16348a.itamar@itamarst.org>

On Thu, 29 May 2003 23:47:07 -0600
Andrew Dalke <dalke at dalkescientific.com> wrote:

> How comfortable should I be with these modules?

Depends how many people use them. The more people use it, the more
chances there will be backwards compatability when things change. We
don't change things just for fun, either - if you use, say, FTP server,
you will soon find out why it needs a rewrite.

Woven was under *massive* development over the past few months, but even
so, most old code didn't break. At some point in the future it will not
be b/c, but that's why there are DeprecationWarnings.



From ibook at gnosis.cx  Fri May 30 02:28:13 2003
From: ibook at gnosis.cx (david mertz)
Date: Fri, 30 May 2003 02:28:13 -0400
Subject: [Twisted-Python] Woven example for article, Part II
Message-ID: <3ED6F9FD.9000009@gnosis.cx>

Itamar Shtull-Trauring wrote:
|The ChangeLog usually doesn't cover code that is unstable. In general,
|*always* use the latest version of Twisted.

Well, that sounds nice; but it's kinda impractical in a lot of contexts.
As I mentioned in an upthread comment, my web host at python-hosting.com
has 1.0.3 installed.  I've emailed Remi asking him to upgrade--and I
suppose he will--but not everyone maintains their own installation/host,
nor does everyone want to reinstall large libraries every time s/he
writes a new script.

Moreover, for me in particular, I want to write some examples for
articles.  If I write something that works in 1.0.5, but breaks in 1.0.6
and past, that's bad for readers (and makes me look a little worse).
And as things go, probably the next Twisted version will be out before
my article current article is published.  But the story is pretty much
the same if I were to implement something for a client--I don't want my
software breaking everytime the library changes.

I'm not really complaining about any of this.  Publishers pay me money
to make informed guesses about what software will be stable and what
will change (among many other judgements).  But it does make it
challenging to write the sort of thing I write that covers Twisted.
I'll probably wind up going a little light on woven because of
this--which is a little bit too bad, since templating is a technology a
lot of readers would be interested in.

Yours, David...




From itamar at itamarst.org  Fri May 30 13:23:21 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 30 May 2003 13:23:21 -0400
Subject: [Twisted-Python] Woven example for article, Part II
In-Reply-To: <3ED6F9FD.9000009@gnosis.cx>
References: <3ED6F9FD.9000009@gnosis.cx>
Message-ID: <20030530132321.6b61fa40.itamar@itamarst.org>

On Fri, 30 May 2003 02:28:13 -0400
david mertz <ibook at gnosis.cx> wrote:

> the same if I were to implement something for a client--I don't want
> my software breaking everytime the library changes.

We do have *backwards* compatability! the problem you have now is with
using new features with old versions of the software, which is a totally
different problem. Some unstable parts will break in the future - if
you're unsure about specific code, ask us.

I doubt anything that works with current Woven will break in the future,
given we have quite a few apps using it.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From m at moshez.org  Fri May 30 14:07:31 2003
From: m at moshez.org (Moshe Zadka)
Date: 30 May 2003 18:07:31 -0000
Subject: [Twisted-Python] Woven example for article, Part II
In-Reply-To: <3ED6F9FD.9000009@gnosis.cx>
References: <3ED6F9FD.9000009@gnosis.cx>
Message-ID: <20030530180731.2430.qmail@green.zadka.com>

On Fri, 30 May 2003, david mertz <ibook at gnosis.cx> wrote:

> Moreover, for me in particular, I want to write some examples for
> articles.  If I write something that works in 1.0.5, but breaks in 1.0.6
> and past, that's bad for readers (and makes me look a little worse).

But you missed what Itamar said: we treat backwards compatibility seriously.
If you'll check the FAQ, we even have questions for upgrading scripts from
before woven was called woven. Software doesn't break when Twisted upgrades.
But if you try and run scripts from one version of Twisted on a *lower*
one you're on your own.

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From glyph at twistedmatrix.com  Fri May 30 12:53:35 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 30 May 2003 12:53:35 -0400
Subject: [Twisted-Python] Woven example for article, Part II
In-Reply-To: <20030530055612.GC493@toshi.anaprd01.md.comcast.net>
Message-ID: <40F7270C-92BF-11D7-A665-000393C9700E@twistedmatrix.com>

On Friday, May 30, 2003, at 01:56 AM, Christopher Armstrong wrote:

> We only offer stability info, we don't control your mind. :-)

Who's "we", kimosabe - mind control is certainly on my agenda.

>> How comfortable should I be with these modules?

The modules that you mentioned have mostly accurate stability info, 
with the exception of banana - we tried to stabilize that one before we 
had enough users, performance testing, and security auditing, so there 
are some tweaks that will be happening in an upcoming rewrite.  
twisted.internet.interfaces looks like it's a little inconsistent, 
though -  Itamar, would you look into updating that?

If it says "stable", then we are committed to changing things very 
little, and providing extensive (and probably indefinite) maintenance 
of the existing interface even if things do change.

If it says "semi-stable", you can probably only join IRC when releases 
happen and ask anyone if the changes are likely to impact you.  (You 
could attempt to infer this from CVS logs and the ChangeLog file, but 
considering the quantity and subtlety of changes that happen each 
release, it's probably for all concerned just to ask.)  These 
interfaces will change seldom and typically be well-announced if 
anything major happens.

If it specifically says "unstable", you should be tracking CVS and on a 
first-name basis with at least one Twisted developer, preferably the 
maintainer of the module of your choice :).




From glyph at twistedmatrix.com  Fri May 30 14:21:13 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 30 May 2003 14:21:13 -0400
Subject: [Twisted-Python] Woven example for article, Part II
In-Reply-To: <20030530180731.2430.qmail@green.zadka.com>
Message-ID: <7EDBD8CA-92CB-11D7-A665-000393C9700E@twistedmatrix.com>

On Friday, May 30, 2003, at 02:07 PM, Moshe Zadka wrote:

> Software doesn't break when Twisted upgrades.

While I echo the general sentiment, I think it's a little overconfident 
to be making this claim unqualified.  We _try_ to make sure that 
software doesn't break when Twisted upgrades, but we don't have a build 
farm for external applications, and we don't have any 
backwards-compatibility regression tests.




From ibook at gnosis.cx  Fri May 30 16:23:10 2003
From: ibook at gnosis.cx (david mertz)
Date: Fri, 30 May 2003 16:23:10 -0400
Subject: [Twisted-Python] Woven example for article, Part II
Message-ID: <3ED7BDAE.7040906@gnosis.cx>

Moshe Zadka wrote:
 > Software doesn't break when Twisted upgrades.

Glyph Lefkowitz
|While I echo the general sentiment, I think it's a little overconfident
|to be making this claim unqualified.

I don't mean to belabor the point, but my first try at the woven
tutorial example produced a DeprecationWarning as part of its traceback.
My first thought seeing that was that I probably needed an *earlier*
version of Twisted, rather than a *later* one, to make the example work.

As it turns out, that warning was misleading, since I was apparently
using an older Twisted version with a newer server script.  I'm not
going to bother sorting out exactly what is deprecated, current, and
phased out... but I think I've figured out enough to determine that
Glyph has the better advice: less than everything stays backward
compatible.





From jmhodge at bgnet.bgsu.edu  Sat May 31 11:54:36 2003
From: jmhodge at bgnet.bgsu.edu (Jeff Hodges)
Date: 31 May 2003 11:54:36 -0400
Subject: [Twisted-Python] pb.Copyable docs
Message-ID: <1054396476.13297.22.camel@Gecko>

As a newb, I've found the howtos invaluable but I came across a problem
when I attempted to write code based on pb.Copyable class.  Some of the
code holds vaguely described variables such as "state" and
"perspective".  I've inferred a little bit from other bits of
documentation but can't seem to fit it all together.  This line was most
disconcerting to me:

"XXX: understand, then explain use of varying cached state depending
upon perspective."

Anyone help a poor newbie out? Thanks, folks.
	-- Jeff






From screwtape at froup.com  Sat May 31 01:29:54 2003
From: screwtape at froup.com (Tim Allen)
Date: Sat, 31 May 2003 15:29:54 +1000
Subject: [Twisted-Python] Woven and WML
Message-ID: <E8EF77B4-9328-11D7-A0D7-003065D61A3E@froup.com>

I recently got a new WAP-capable phone, and since you can do a lot of 
interesting things by pointing it at various URLs, I thought I'd try 
making a cute little website in Woven for my phone to browse.

Unfortunately, it seems that this is impossible. The resulting markup 
from my simple Woven test page had all sorts of woven-stuff all through 
it - such as pattern attributes that hadn't been removed, and id 
attributes that were woven's internal IDs, rather than the IDs I tried 
to set. Modern, capacious HTML browsers wouldn't care, I guess, but my 
phone's little brain overloaded and gave up.

Is this just the way Woven works, or am I likely doing something wrong?

For the record, twisted.web can serve up static WML just fine, provided 
the following patch is applied:

Index: twisted/web/static.py
===================================================================
RCS file: /cvs/Twisted/twisted/web/static.py,v
retrieving revision 1.91
diff -u -r1.91 static.py
--- twisted/web/static.py       13 May 2003 04:36:21 -0000      1.91
+++ twisted/web/static.py       31 May 2003 05:25:41 -0000
@@ -175,6 +175,7 @@
          ".tif": "image/tiff",
          ".tiff": "image/tiff",
          ".txt": "text/plain",
+        ".wml": "text/vnd.wap.wml",
          ".xul": "application/vnd.mozilla.xul+xml",
          ".zip": "application/x-zip",
          ".patch": "text/plain",




From dp at twistedmatrix.com  Sat May 31 01:50:43 2003
From: dp at twistedmatrix.com (Donovan Preston)
Date: Fri, 30 May 2003 22:50:43 -0700
Subject: [Twisted-Python] Woven and WML
In-Reply-To: <E8EF77B4-9328-11D7-A0D7-003065D61A3E@froup.com>
Message-ID: <D1706E21-932B-11D7-A64D-000A95864FC4@twistedmatrix.com>

On Friday, May 30, 2003, at 10:29 PM, Tim Allen wrote:

> I recently got a new WAP-capable phone, and since you can do a lot of 
> interesting things by pointing it at various URLs, I thought I'd try 
> making a cute little website in Woven for my phone to browse.

Cool :-)

> Unfortunately, it seems that this is impossible. The resulting markup 
> from my simple Woven test page had all sorts of woven-stuff all 
> through it - such as pattern attributes that hadn't been removed, and 
> id attributes that were woven's internal IDs, rather than the IDs I 
> tried to set. Modern, capacious HTML browsers wouldn't care, I guess, 
> but my phone's little brain overloaded and gave up.

The woven-specific attributes should really all be removed -- any that 
are left in are just there because I have been lazy about it, since as 
you observe modern browsers don't care. I'll try to go through and make 
sure woven outputs clean XHTML by the next release... I have been 
meaning to do it for a while anyway.

The tendency for woven to overwrite ids you try to set has been fixed 
in CVS. Also, since several people have requested it, I will remove the 
auto-id setting unless you are using LivePage, which is the only thing 
that uses it.

> Is this just the way Woven works, or am I likely doing something wrong?

I would consider these bugs, and thanks for the report!

Donovan




From itamar at itamarst.org  Sat May 31 22:02:28 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sat, 31 May 2003 22:02:28 -0400
Subject: [Twisted-Python] tuntap and friends
Message-ID: <20030531220229.7977bbbf.itamar@itamarst.org>

I think this code should be in its own package.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From warner at lothar.com  Thu May  1 00:03:07 2003
From: warner at lothar.com (Brian Warner)
Date: Wed, 30 Apr 2003 23:03:07 -0700 (PDT)
Subject: [Twisted-Python] WovenQuotes Howto Problem
References: <6897150.1051543643452.JavaMail.nobody@wamui01.slb.atl.earthlink.net>
Message-ID: <20030430.230307.21611412.warner@lothar.com>

"steve at shrogers.com" <shrogers at ionet.net> writes:
> I'm playing with Twisted 1.0.4. After making it through the first couple of
> TwistedQuotes examples, I get the following failure with the TwistedQuotes
> example.

> 2003/04/28 10:05 [HTTPChannel,0,127.0.0.1] exceptions.TypeError: getData() takes exactly 1 argument (2 given)

Oops. Fixed in CVS. Both Model.getData() and Model.setData() now get a
Request has their first argument.

thanks,
 -Brian



From anthony at interlink.com.au  Thu May  1 02:44:31 2003
From: anthony at interlink.com.au (Anthony Baxter)
Date: Thu, 01 May 2003 18:44:31 +1000
Subject: [Twisted-Python] twisted 30% slower than asyncore? 
Message-ID: <200305010844.h418iVT11511@localhost.localdomain>

The following patch to t.i.default.py removes the creation of
the 'Failure' objects in the common case of connectionDone or
connectionLost, instead using a cache of two existing objects. The
second patch (which I've already emailed to Itamar, but will send here
as well for completeness) makes a similar change to the code in tcp.py.
The two combined make a test over the loopback interface go from around
300 request/second to about 450 requests/second when serving very small
objects (2K) from apache on the same host. There's a bunch of other
speedups possible in SelectReactor.doSelect() - making globals local,
&c.

Anthony


--- ../../../../twisted/internet/default.py     Tue Apr 22 01:32:15 2003
+++ default.py  Thu May  1 18:38:20 2003
@@ -422,7 +422,12 @@
                  reads=reads,
                  writes=writes,
                  rhk=reads.has_key,
-                 whk=writes.has_key):
+                 whk=writes.has_key,
+                 faildict={
+                  error.ConnectionDone:failure.Failure(error.ConnectionDone()),
+                  error.ConnectionLost:failure.Failure(error.ConnectionLost()),
+                 }
+                ):
         """Run one iteration of the I/O monitor loop.
 
         This will run all selectables who had input or output readiness
@@ -479,7 +484,11 @@
                     self.removeReader(selectable)
                     self.removeWriter(selectable)
                     try:
-                        selectable.connectionLost(failure.Failure(why))
+                        f = faildict.get(why.__class__)
+                        if f:
+                            selectable.connectionLost(f)
+                        else:
+                            selectable.connectionLost(failure.Failure(why))
                     except:
                         log.deferr()
                 log.logOwner.disown(selectable)


--- twisted/internet/tcp.py     22 Apr 2003 20:31:16 -0000      1.115
+++ twisted/internet/tcp.py     1 May 2003 06:55:26 -0000
@@ -468,7 +468,7 @@
         except:
             log.deferr()
 
-    def loseConnection(self):
+    def loseConnection(self, connDone=failure.Failure(main.CONNECTION_DONE)):
         """Stop accepting connections on this port.
 
         This will shut down my socket and call self.connectionLost().
@@ -476,8 +476,7 @@
         self.disconnecting = 1
         self.stopReading()
         if self.connected:
-            self.reactor.callLater(0, self.connectionLost,
-                                   failure.Failure(main.CONNECTION_DONE))
+            self.reactor.callLater(0, self.connectionLost, connDone)
 
     stopListening = loseConnection
 



From anthony at interlink.com.au  Thu May  1 04:29:59 2003
From: anthony at interlink.com.au (Anthony Baxter)
Date: Thu, 01 May 2003 20:29:59 +1000
Subject: [Twisted-Python] reactors and sys.exc_value
Message-ID: <200305011030.h41AU0213501@localhost.localdomain>

It looks like pretty much all of the reactors use sys.exc_value in
an exception handler. Is there a reason this is done instead of the
much safer sys.exc_info()[1] ?

Anthony
--
Anthony Baxter     <anthony at interlink.com.au>
It's never too late to have a happy childhood.




From jon at totient.demon.co.uk  Thu May  1 15:35:44 2003
From: jon at totient.demon.co.uk (Jon Dyte)
Date: Thu, 1 May 2003 22:35:44 +0100
Subject: [Twisted-Python] adbapi question
In-Reply-To: <20030430213815.3fff4347.itamar@itamarst.org>
References: <200304302328.31599.jon@totient.demon.co.uk> <20030430213815.3fff4347.itamar@itamarst.org>
Message-ID: <200305012235.44111.jon@totient.demon.co.uk>

On Thursday 01 May 2003 2:38 am, Itamar Shtull-Trauring wrote:
> On Wed, 30 Apr 2003 23:28:31 +0100
>
> Jon Dyte <jon at totient.demon.co.uk> wrote:
> > Below is a small script. My question is what is the correct way to
> > exit after using the adbapi stuff. The script as it stands just hangs
> > the terminal until I Ctrl-Z and kill it.
>
> You don't want a reactor.crash() and a reactor.stop(). Just do
> reactor.stop().
>
> Using threads can make your python program not exit if they hang around,
> but reactor.stop() should shut down all threads in the thread pool.
I added just reactor.stop(), but it doesnt work.
eg :-
$ python simpledb.py jon jon jon
Done
0
finished
{1026: <connection object at 0x82282c0>}
[<_MainThread(MainThread, started)>, <Thread(PoolThread-136416444-1, 
started)>]

The thread isnt removed from the threadpool.

I get the same problem with the Sybase DB-API module as well as psycopg
The script is 

import sys
import threading
import pprint
from twisted.enterprise import adbapi
from twisted.internet import reactor

dbname,user,passwd = sys.argv[1:4]

class SomeTable(adbapi.Augmentation):
    def getSomeData(self):
        self.done = 1
        qry = "select * from SomeTable"
        return 
self.runQuery(qry).addCallbacks(self.operationDone,self.operationError)
    
    def operationDone(self, done):
        print "Done"
        self.done =0
        
    def operationError(self,err):
        print err
        

dbpool = adbapi.ConnectionPool("psycopg","dbname=%s user=%s" % (dbname,user))

db1=SomeTable(dbpool)

db1.getSomeData()

while 1 == db1.done:
        reactor.iterate()

print db1.done
print "finished"

reactor.stop()
print dbpool.connections
print threading.enumerate()

Jon



From exarkun at intarweb.us  Thu May  1 16:33:14 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Thu, 1 May 2003 18:33:14 -0400
Subject: [Twisted-Python] Updated TLS patch
Message-ID: <20030501223314.GA9422@meson.dyndns.org>

  I've taken Jeremy Rossi's TLS patch and updated it for current CVS, and
also cleaned up the parts of it that broke regular TCP when SSL was
unavailable.

  What I have been completely unable to do is prevent this from introducing
a branch/function call into the common path for doRead/doWrite, even when
TLS is not in use.

  In order of desirability (imho), this can be fixed by:

    Rewrite tcp.py, more or less completely, *without* juggling methods as
it currently does.

    Take the _TLS_* and _NOTLS_* functions and just inline them.

    Create a new transport, TLS, along with all the associated
methods/functions (connect/listen/etc) so as to keep TLS code out of tcp.py
entirely.

  Patch attached.

  Jp

-- 
#!/bin/bash
( LIST=(~/.sigs/*.sig)
  cat ${LIST[$(($RANDOM % ${#LIST[*]}))]}
  echo -- $'\n' `uptime | sed -e 's/.*m//'` ) > ~/.signature
-- 
 up 42 days, 19:04, 4 users, load average: 0.35, 0.16, 0.19
-------------- next part --------------
Index: twisted/internet/ssl.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/ssl.py,v
retrieving revision 1.40
diff -u -r1.40 ssl.py
--- twisted/internet/ssl.py	2 Apr 2003 04:11:32 -0000	1.40
+++ twisted/internet/ssl.py	1 May 2003 22:20:02 -0000
@@ -95,116 +95,13 @@
         return SSL.Context(SSL.SSLv3_METHOD)
 
 
-class Connection(tcp.Connection):
-    """I am an SSL connection.
-    """
-
-    __implements__ = tcp.Connection.__implements__, interfaces.ISSLTransport
-    
-    writeBlockedOnRead = 0
-    readBlockedOnWrite= 0
-    sslShutdown = 0
-    
-    def getPeerCertificate(self):
-        """Return the certificate for the peer."""
-        return self.socket.get_peer_certificate()
-
-    def _postLoseConnection(self):
-        """Gets called after loseConnection(), after buffered data is sent.
-
-        We close the SSL transport layer, and if the other side hasn't
-        closed it yet we start reading, waiting for a ZeroReturnError
-        which will indicate the SSL shutdown has completed.
-        """
-        try:
-            done = self.socket.shutdown()
-            self.sslShutdown = 1
-        except SSL.Error:
-            return main.CONNECTION_LOST
-        if done:
-            return main.CONNECTION_DONE
-        else:
-            # we wait for other side to close SSL connection -
-            # this will be signaled by SSL.ZeroReturnError when reading
-            # from the socket
-            self.stopWriting()
-            self.startReading()
-            return None # don't close socket just yet
-    
-    def doRead(self):
-        """See tcp.Connection.doRead for details.
-        """
-        if self.writeBlockedOnRead:
-            self.writeBlockedOnRead = 0
-            return self.doWrite()
-        try:
-            return tcp.Connection.doRead(self)
-        except SSL.ZeroReturnError:
-            # close SSL layer, since other side has done so, if we haven't
-            if not self.sslShutdown:
-                try:
-                    self.socket.shutdown()
-                    self.sslShutdown = 1
-                except SSL.Error:
-                    pass
-            return main.CONNECTION_DONE
-        except SSL.WantReadError:
-            return
-        except SSL.WantWriteError:
-            self.readBlockedOnWrite = 1
-            self.startWriting()
-            return
-        except SSL.Error:
-            return main.CONNECTION_LOST
-
-    def doWrite(self):
-        if self.readBlockedOnWrite:
-            self.readBlockedOnWrite = 0
-            if not self.dataBuffer: self.stopWriting()
-            return self.doRead()
-        return tcp.Connection.doWrite(self)
-    
-    def writeSomeData(self, data):
-        """See tcp.Connection.writeSomeData for details.
-        """
-        if not data:
-            return 0
-
-        try:
-            return tcp.Connection.writeSomeData(self, data)
-        except SSL.WantWriteError:
-            return 0
-        except SSL.WantReadError:
-            self.writeBlockedOnRead = 1
-            return 0
-        except SSL.Error:
-            return main.CONNECTION_LOST
-
-    def _closeSocket(self):
-        """Called to close our socket."""
-        try:
-            self.socket.sock_shutdown(2)
-        except socket.error:
-            try:
-                self.socket.close()
-            except socket.error:
-                log.deferr()
-
-
-
-class Client(Connection, tcp.Client):
+class Client(tcp.Client):
     """I am an SSL client."""
     def __init__(self, host, port, bindAddress, ctxFactory, connector, reactor=None):
         # tcp.Client.__init__ depends on self.ctxFactory being set
         self.ctxFactory = ctxFactory
         tcp.Client.__init__(self, host, port, bindAddress, connector, reactor)
 
-    def createInternetSocket(self):
-        """(internal) create an SSL socket
-        """
-        sock = tcp.Client.createInternetSocket(self)
-        return SSL.Connection(self.ctxFactory.getContext(), sock)
-
     def getHost(self):
         """Returns a tuple of ('SSL', hostname, port).
 
@@ -219,16 +116,14 @@
         """
         return ('SSL',)+self.addr
 
+    def _finishInit(self, whenDone, skt, error, reactor):
+        tcp.Client._finishInit(self, whenDone, skt, error, reactor)
+        self.startTLS(self.ctxFactory)
 
 
-class Server(Connection, tcp.Server):
+class Server(tcp.Server):
     """I am an SSL server.
     """
-    
-    def __init__(*args, **kw):
-        # We don't want Connection's __init__
-        tcp.Server.__init__(*args, **kw)
-    
     def getHost(self):
         """Returns a tuple of ('SSL', hostname, port).
 
@@ -257,33 +152,12 @@
         """
         sock = tcp.Port.createInternetSocket(self)
         return SSL.Connection(self.ctxFactory.getContext(), sock)
-    
-    def doRead(self):
-        """Called when my socket is ready for reading.
 
-        This accepts a connection and calls self.protocol() to handle the
-        wire-level protocol.
-        """
-        try:
-            try:
-                skt, addr = self.socket.accept()
-            except socket.error, e:
-                if e.args[0] == tcp.EWOULDBLOCK:
-                    return
-                raise
-            except SSL.Error:
-                log.deferr()
-                return
-            protocol = self.factory.buildProtocol(addr)
-            if protocol is None:
-                skt.close()
-                return
-            s = self.sessionno
-            self.sessionno = s+1
-            transport = self.transport(skt, protocol, addr, self, s)
-            protocol.makeConnection(transport)
-        except:
-            log.deferr()
+    def _preMakeConnection(self, transport):
+        # *Don't* call startTLS here
+        # The transport already has the SSL.Connection object from above
+        transport._startTLS()
+        return tcp.Port._preMakeConnection(self, transport)
 
 
 class Connector(base.BaseConnector):
Index: twisted/internet/tcp.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/tcp.py,v
retrieving revision 1.116
diff -u -r1.116 tcp.py
--- twisted/internet/tcp.py	1 May 2003 16:40:47 -0000	1.116
+++ twisted/internet/tcp.py	1 May 2003 22:20:03 -0000
@@ -39,6 +39,11 @@
 except ImportError:
     fcntl = None
 
+try:
+    from OpenSSL import SSL
+except ImportError:
+    SSL = None
+
 if os.name == 'nt':
     # we hardcode these since windows actually wants e.g.
     # WSAEALREADY rather than EALREADY. Possibly we should
@@ -88,12 +93,30 @@
 
     __implements__ = abstract.FileDescriptor.__implements__, interfaces.ITCPTransport
 
+    if SSL:
+        writeBlockedOnRead = 0
+        readBlockedOnWrite= 0
+        sslShutdown = 0
+        TLS = 0
+
     def __init__(self, skt, protocol, reactor=None):
         abstract.FileDescriptor.__init__(self, reactor=reactor)
         self.socket = skt
         self.socket.setblocking(0)
         self.fileno = skt.fileno
         self.protocol = protocol
+        
+    def startTLS(self, ctx):
+        if not SSL:
+            raise RuntimeException, "No SSL support available"
+        assert not self.TLS
+
+        self._startTLS()
+        self.socket = SSL.Connection(ctx.getContext(), self.socket)
+        self.fileno = self.socket.fileno
+    
+    def _startTLS(self):
+        self.TLS = 1
 
     def doRead(self):
         """Calls self.protocol.dataReceived with all available data.
@@ -103,6 +126,9 @@
         lost through an error in the physical recv(), this function will return
         the result of the dataReceived call.
         """
+        return (self._NOTLS_doRead, self._TLS_doRead)[self.TLS]()
+
+    def _NOTLS_doRead(self):
         try:
             data = self.socket.recv(self.bufferSize)
         except socket.error, se:
@@ -113,6 +139,39 @@
         if not data:
             return main.CONNECTION_LOST
         return self.protocol.dataReceived(data)
+    
+    def _TLS_doRead(self):
+        if self.writeBlockedOnRead:
+            self.writeBlockedOnRead = 0
+            return self.doWrite()
+        try:
+            return self._NOTLS_doRead()
+        except SSL.ZeroReturnError:
+            # close SSL layer, since other side has done so, if we haven't
+            if not self.sslShutdown:
+                try:
+                    self.socket.shutdown()
+                    self.sslShutdown = 1
+                except SSL.Error:
+                    pass
+            return main.CONNECTION_DONE
+        except SSL.WantReadError:
+            return
+        except SSL.WantWriteError:
+            self.readBlockedOnWrite = 1
+            self.startWriting()
+            return
+        except SSL.Error:
+            return main.CONNECTION_LOST
+
+    def _TLS_doWrite(self):
+        if self.readBlockedOnWrite:
+            self.readBlockedOnWrite = 0
+            # XXX - This is touching internal guts bad bad bad
+            if not self.dataBuffer:
+                self.stopWriting()
+            return self.doRead()
+        return abstract.FileDescriptor.doWrite(self)
 
     def writeSomeData(self, data):
         """Connection.writeSomeData(data) -> #of bytes written | CONNECTION_LOST
@@ -120,6 +179,9 @@
         the number of bytes read (which is positive) or a connection error code
         (which is negative)
         """
+        return (self._NOTLS_writeSomeData, self._TLS_writeSomeData)[self.TLS](data)
+
+    def _NOTLS_writeSomeData(self, data):
         try:
             return self.socket.send(data)
         except socket.error, se:
@@ -128,8 +190,23 @@
             else:
                 return main.CONNECTION_LOST
 
+    def _TLS_writeSomeData(self, data):
+        if not data:
+            return 0
+        try:
+            return self._NOTLS_writeSomeData(data)
+        except SSL.WantWriteError:
+            return 0
+        except SSL.WantReadError:
+            self.writeBlockedOnRead = 1
+        except SSL.Error:
+            return main.CONNECTION_LOST
+
     def _closeSocket(self):
         """Called to close our socket."""
+        return (self._NOTLS_closeSocket, self._TLS_closeSocket)[self.TLS]()
+
+    def _NOTLS_closeSocket(self):
         # This used to close() the socket, but that doesn't *really* close if
         # there's another reference to it in the TCP/IP stack, e.g. if it was
         # was inherited by a subprocess. And we really do want to close the
@@ -139,6 +216,15 @@
         except socket.error:
             pass
 
+    def _TLS_closeSocket(self):
+        try:
+            self.socket.sock_shutdown(2)
+        except:
+            try:
+                self.socket.close()
+            except:
+                pass
+
     def connectionLost(self, reason):
         """See abstract.FileDescriptor.connectionLost().
         """
@@ -173,6 +259,33 @@
 
     def setTcpNoDelay(self, enabled):
         self.socket.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, enabled)
+    
+    def _postLoseConnection(self):
+        """Gets called after loseConnection(), after buffered data is sent.
+
+        We close the SSL transport layer, and if the other side hasn't
+        closed it yet we start reading, waiting for a ZeroReturnError
+        which will indicate the SSL shutdown has completed.
+        """
+        if not self.TLS:
+            return abstract.FileDescriptor._postLoseConnection(self)
+
+        try:
+            done = self.socket.shutdown()
+            self.sslShutdown = 1
+        except SSL.Error:
+            return main.CONNECTION_LOST
+        if done:
+            return main.CONNECTION_DONE
+        else:
+            # we wait for other side to close SSL connection -
+            # this will be signaled by SSL.ZeroReturnError when reading
+            # from the socket
+            self.stopWriting()
+            self.startReading()
+            
+            # don't close socket just yet
+            return None
 
 
 class BaseClient(Connection):
@@ -191,6 +304,11 @@
         else:
             reactor.callLater(0, self.failIfNotConnected, error)
 
+    def startTLS(self, ctx):
+        holder = Connection.startTLS(self, ctx)
+        self.socket.set_connect_state()
+        return holder
+
     def stopConnecting(self):
         """Stop attempt to connect."""
         self.failIfNotConnected(error.UserError())
@@ -357,6 +475,11 @@
         """
         return self.repstr
 
+    def startTLS(self, ctx):
+        holder = Connection.startTLS(self, ctx)
+        self.socket.set_accept_state()
+        return holder
+
     def getHost(self):
         """Returns a tuple of ('INET', hostname, port).
 
@@ -455,6 +578,7 @@
                     elif e.args[0] == EPERM:
                         continue
                     raise
+                
                 protocol = self.factory.buildProtocol(addr)
                 if protocol is None:
                     skt.close()
@@ -462,11 +586,22 @@
                 s = self.sessionno
                 self.sessionno = s+1
                 transport = self.transport(skt, protocol, addr, self, s)
+                transport = self._preMakeConnection(transport)
                 protocol.makeConnection(transport)
             else:
                 self.numberAccepts = self.numberAccepts+20
         except:
+            # Note that in TLS mode, this will possibly catch SSL.Errors
+            # raised by self.socket.accept()
+            #
+            # There is no "except SSL.Error:" above because SSL may be
+            # None if there is no SSL support.  In any case, all the
+            # "except SSL.Error:" suite would probably do is log.deferr()
+            # and return, so handling it here works just as well.
             log.deferr()
+    
+    def _preMakeConnection(self, transport):
+        return transport
 
     def loseConnection(self, connDone=failure.Failure(main.CONNECTION_DONE)):
         """Stop accepting connections on this port.
Index: twisted/test/test_ssl.py
===================================================================
RCS file: /cvs/Twisted/twisted/test/test_ssl.py,v
retrieving revision 1.8
diff -u -r1.8 test_ssl.py
--- twisted/test/test_ssl.py	1 May 2003 07:02:10 -0000	1.8
+++ twisted/test/test_ssl.py	1 May 2003 22:20:03 -0000
@@ -17,19 +17,23 @@
 from __future__ import nested_scopes
 from twisted.trial import unittest
 from twisted.internet import protocol, reactor
+from twisted.protocols import basic
+
 try:
-    import OpenSSL
+    from OpenSSL import SSL
     from twisted.internet import ssl
 except ImportError:
-    OpenSSL = None
+    SSL = None
+
 import os
 import test_tcp
 
 
+certPath = os.path.join(os.path.split(test_tcp.__file__)[0], "server.pem")
+
 class StolenTCPTestCase(test_tcp.ProperlyCloseFilesTestCase, test_tcp.WriteDataTestCase):
     
     def setUp(self):
-        certPath = os.path.join(os.path.split(test_tcp.__file__)[0], "server.pem")
         f = protocol.ServerFactory()
         f.protocol = protocol.Protocol
         self.listener = reactor.listenSSL(
@@ -49,5 +53,117 @@
 
         self.totalConnections = 0
 
-if not OpenSSL:
-    del StolenTCPTestCase
+class ClientTLSContext(ssl.ClientContextFactory):
+    isClient = 1
+    def getContext(self):
+        return SSL.Context(ssl.SSL.TLSv1_METHOD)
+
+class UnintelligentProtocol(basic.LineReceiver):
+    pretext = [
+        "first line",
+        "last thing before tls starts",
+        "STARTTLS",
+    ]
+    
+    posttext = [
+        "first thing after tls started",
+        "last thing ever",
+    ]
+    
+    def connectionMade(self):
+        for l in self.pretext:
+            self.sendLine(l)
+
+    def lineReceived(self, line):
+        if line == "READY":
+            self.transport.startTLS(ClientTLSContext())
+            for l in self.posttext:
+                self.sendLine(l)
+            self.transport.loseConnection()
+        
+class ServerTLSContext(ssl.DefaultOpenSSLContextFactory):
+    isClient = 0
+    def __init__(self, *args, **kw):
+        kw['sslmethod'] = SSL.TLSv1_METHOD
+        ssl.DefaultOpenSSLContextFactory.__init__(self, *args, **kw)
+
+class LineCollector(basic.LineReceiver):
+    def __init__(self, doTLS):
+        self.doTLS = doTLS
+
+    def connectionMade(self):
+        self.factory.rawdata = ''
+        self.factory.lines = []
+
+    def lineReceived(self, line):
+        self.factory.lines.append(line)
+        if line == 'STARTTLS':
+            self.sendLine('READY')
+            if self.doTLS:
+                ctx = ServerTLSContext(
+                    privateKeyFileName=certPath,
+                    certificateFileName=certPath,
+                )
+                self.transport.startTLS(ctx)
+            else:
+                self.setRawMode()
+    
+    def rawDataReceived(self, data):
+        self.factory.rawdata += data
+        self.factory.done = 1
+    
+    def connectionLost(self, reason):
+        self.factory.done = 1
+
+class TLSTestCase(unittest.TestCase):
+    def testTLS(self):
+        cf = protocol.ClientFactory()
+        cf.protocol = UnintelligentProtocol
+        
+        sf = protocol.ServerFactory()
+        sf.protocol = lambda: LineCollector(1)
+        sf.done = 0
+
+        port = reactor.listenTCP(0, sf)
+        portNo = port.getHost()[2]
+        
+        reactor.connectTCP('0.0.0.0', portNo, cf)
+        
+        i = 0
+        while i < 5000 and not sf.done:
+            reactor.iterate(0.01)
+            i += 1
+        
+        self.failUnless(sf.done, "Never finished reading all lines")
+        self.assertEquals(
+            sf.lines,
+            UnintelligentProtocol.pretext + UnintelligentProtocol.posttext
+        )
+    
+    def testUnTLS(self):
+        cf = protocol.ClientFactory()
+        cf.protocol = UnintelligentProtocol
+        
+        sf = protocol.ServerFactory()
+        sf.protocol = lambda: LineCollector(0)
+        sf.done = 0
+
+        port = reactor.listenTCP(0, sf)
+        portNo = port.getHost()[2]
+        
+        reactor.connectTCP('0.0.0.0', portNo, cf)
+        
+        i = 0
+        while i < 5000 and not sf.done:
+            reactor.iterate(0.01)
+            i += 1
+        
+        self.failUnless(sf.done, "Never finished reading all lines")
+        self.assertEquals(
+            sf.lines,
+            UnintelligentProtocol.pretext
+        )
+        self.failUnless(sf.rawdata, "No encrypted bytes received")
+        
+if not SSL:
+    globals().clear()
-------------- next part --------------
A non-text attachment was scrubbed...
Name: echoclient_tls.py
Type: text/x-python
Size: 2253 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030501/260763d3/attachment-0004.py>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: echoserv_tls.py
Type: text/x-python
Size: 2398 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030501/260763d3/attachment-0005.py>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030501/260763d3/attachment.sig>

From itamar at itamarst.org  Thu May  1 16:41:34 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 1 May 2003 18:41:34 -0400
Subject: [Twisted-Python] adbapi question
In-Reply-To: <200305012235.44111.jon@totient.demon.co.uk>
References: <200304302328.31599.jon@totient.demon.co.uk>
	<20030430213815.3fff4347.itamar@itamarst.org>
	<200305012235.44111.jon@totient.demon.co.uk>
Message-ID: <20030501184134.1579e77a.itamar@itamarst.org>

On Thu, 1 May 2003 22:35:44 +0100
Jon Dyte <jon at totient.demon.co.uk> wrote:

> while 1 == db1.done:
>         reactor.iterate()

This is also wrong. You should be doing reactor.run().


-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From naesten at myrealbox.com  Thu May  1 21:00:24 2003
From: naesten at myrealbox.com (Samuel Bronson)
Date: Thu, 01 May 2003 23:00:24 -0400
Subject: [Twisted-Python] Twisted 1.0.4 - Typo in code
References: <oqist0c8jm.fsf@alcyon.progiciels-bpi.ca>
Message-ID: <3EB1DF48.8000402@myrealbox.com>

Francois Pinard wrote:

>P.S. - Is there an email address I could use for such nits, instead of
>bothering the whole list?
>
Am I supposed to be bothered by nits? Huh? Nobody told me about this! ;-).
--Sam





From pinard at iro.umontreal.ca  Fri May  2 07:43:23 2003
From: pinard at iro.umontreal.ca (Francois Pinard)
Date: 02 May 2003 09:43:23 -0400
Subject: [Twisted-Python] Re: Twisted 1.0.4 - Typo in code
In-Reply-To: <3EB1DF48.8000402@myrealbox.com>
References: <oqist0c8jm.fsf@alcyon.progiciels-bpi.ca>
	<3EB1DF48.8000402@myrealbox.com>
Message-ID: <oq3cjxlb0k.fsf@alcyon.progiciels-bpi.ca>

[Samuel Bronson]

> Francois Pinard wrote:

> > P.S. - Is there an email address I could use for such nits, instead
> > of bothering the whole list?

> Am I supposed to be bothered by nits?  Huh?  Nobody told me about
> this! ;-).

This message is sent in chat mode.  You may skip it! :-)

I've been reporting tiny things for a lot of years, now, to many people
working on big things.  While most maintainers receive my comments in
all happiness and simplicity, a few became quickly irritated, which is no
fun for all parties involved.  So I'm trying to be a bit more careful --
yet avoiding total silence, which is probably not the best solution.

Nit-pickers attract nit-pickers, and a few GNU maintainers got together
over time, as we were able to excruciatingly nit-pick on each other code
and documentation, in all friendship and respect.  Someone gave the name
`Gnits' to our small, closed gang, and you might see remaining bits
about so-called `Gnits standards', here and there, in some software.
But this is all rather historical by now...

The only constant thing is that I'm born nit-picker... :-) I'll try to
follow the suggestion that was given to me, as to wander in the IRC group,
hoping that it will more time-efficient than email, overall.  Email is hard
to beat for submitting reports.  (The worse medium is bug tracking systems,
with their horrible user interfaces: to me, there are worse than silence.)

-- 
François Pinard   http://www.iro.umontreal.ca/~pinard



From justin at gnubia.net  Fri May  2 08:33:38 2003
From: justin at gnubia.net (Justin Ryan)
Date: 02 May 2003 09:33:38 -0500
Subject: [Twisted-Python] adbapi question
In-Reply-To: <20030430213930.542c81d9.itamar@itamarst.org>
References: <200304302328.31599.jon@totient.demon.co.uk>
	 <1051752541.32738.206.camel@samadhi>
	 <20030430213930.542c81d9.itamar@itamarst.org>
Message-ID: <1051886018.8932.4.camel@qutang.gnubian.org>

Well, I think it was a misconception on my part.. It does seem as if the
reactor is not _designed_ to be used in short 'scripts' like this one,
but I wasn't aware you could call reactor.stop().

On Wed, 2003-04-30 at 20:39, Itamar Shtull-Trauring wrote:
> On 30 Apr 2003 20:29:01 -0500
> Justin Ryan <justin at gnubia.net> wrote:
> 
> > Someone will surely correct me if I'm wrong, but I ran into this same
> > dilemma when I began to use twisted.  It seems that as twisted is an
> > event-driven framework for asynchronous networked applications, it
> > isn't intended to be used in this way.
> 
> Dunno what you mean by "this way". If you need to deal with a blocking
> database operation you dispatch it to the thread pool, and that works
> just fine.




From justin at gnubia.net  Fri May  2 08:49:07 2003
From: justin at gnubia.net (Justin Ryan)
Date: 02 May 2003 09:49:07 -0500
Subject: [Twisted-Python] adbapi question
In-Reply-To: <20030501184134.1579e77a.itamar@itamarst.org>
References: <200304302328.31599.jon@totient.demon.co.uk>
	 <20030430213815.3fff4347.itamar@itamarst.org>
	 <200305012235.44111.jon@totient.demon.co.uk>
	 <20030501184134.1579e77a.itamar@itamarst.org>
Message-ID: <1051886101.8932.7.camel@qutang.gnubian.org>

It may be worthwhile to point out that reactor.run() should replace that
while loop.. each callback could check if db1.done == 1, and if it
doesn't, call reactor.stop()..

I think..

On Thu, 2003-05-01 at 17:41, Itamar Shtull-Trauring wrote:
> On Thu, 1 May 2003 22:35:44 +0100
> Jon Dyte <jon at totient.demon.co.uk> wrote:
> 
> > while 1 == db1.done:
> >         reactor.iterate()
> 
> This is also wrong. You should be doing reactor.run().
> 




From abe at fettig.net  Fri May  2 10:31:16 2003
From: abe at fettig.net (Abe Fettig)
Date: 02 May 2003 12:31:16 -0400
Subject: [Twisted-Python] NNTP/SMTP authentication
In-Reply-To: <20030430152532.1f6eb902.itamar@itamarst.org>
References: <1051723673.639.18.camel@mingus>
	 <20030430183441.GA26588@meson.dyndns.org>
	 <20030430152532.1f6eb902.itamar@itamarst.org>
Message-ID: <1051893076.773.63.camel@mingus>

On Wed, 2003-04-30 at 15:25, Itamar Shtull-Trauring wrote:
> On Wed, 30 Apr 2003 14:34:41 -0400
> Jp Calderone <exarkun at intarweb.us> wrote:
> 
> >   Whether the *actual* details of how IMAP4 is using cred are proper
> >   are
> > not, I don't know ;) The code works, but it seems that there are too
> > many different objects involved in the process (CramMD5Identity,
> > CramMD5ServerAuthenticator, CramMD5ClientAuthenticator - and that's
> > just for*one* kind of authentication scheme).  Setup is similarly
> > tedious, requiring 4 lines of "boilerplate" to set things up, and then
> > *10* lines to add each new identity.  Now that imap4.py is settling
> > down, it'd be great if someone with more experience with cred could
> > take a look at it and give me some feedback.
> 
> This is why cred is going to be refactored. With a chainsaw. On fire.
> End result should be that you have to do a *lot* less work in your
> protocol.

That sounds really great.  In the meantime, should Jp and/or I go ahead
with a simple implementation of NNTP/SMTP authentication?  I'm going to
need it within the next month or so.

Thanks for all your work!

Abe




From skin_pup-twisted at damnable.happypoo.com  Fri May  2 06:30:28 2003
From: skin_pup-twisted at damnable.happypoo.com (Skinny Puppy)
Date: Fri, 2 May 2003 08:30:28 -0400
Subject: [Twisted-Python] Updated TLS patch
In-Reply-To: <20030501223314.GA9422@meson.dyndns.org>
References: <20030501223314.GA9422@meson.dyndns.org>
Message-ID: <20030502123028.GM37090@shitbomb.com>

Jp Calderone [exarkun at intarweb.us] wrote:
>   I've taken Jeremy Rossi's TLS patch and updated it for current CVS, and
> also cleaned up the parts of it that broke regular TCP when SSL was
> unavailable.
> 
>   What I have been completely unable to do is prevent this from introducing
> a branch/function call into the common path for doRead/doWrite, even when
> TLS is not in use.
> 
>   In order of desirability (imho), this can be fixed by:
> 
>     Rewrite tcp.py, more or less completely, *without* juggling methods as
> it currently does.
> 
>     Take the _TLS_* and _NOTLS_* functions and just inline them.
> 
>     Create a new transport, TLS, along with all the associated
> methods/functions (connect/listen/etc) so as to keep TLS code out of tcp.py
> entirely.
> 

The branch/function call can be avoided by replacing the doRead/doWrite/etc
methods in startTLS.  While this is still not very perty ;)

Example:

<CUT LOTS OF CODE>

    def startTLS(self, ctx):
        if not SSL:
            raise RuntimeException, "No SSL support available"
        assert not self.TLS

        self._startTLS()
        self.socket = SSL.Connection(ctx.getContext(), self.socket)

    def _startTLS(self):
        self.TLS = 1
        self.fileno = self.socket.fileno
        self.doRead = self._TLS_doRead
        self.doWrite = self._TLS_doWrite
        self._closeSocket = self._TLS_closeSocket

    def doRead(self):
        try:
            data = self.socket.recv(self.bufferSize)
        except socket.error, se:
            if se.args[0] == EWOULDBLOCK:
                return
            else:
                return main.CONNECTION_LOST
        if not data:
            return main.CONNECTION_LOST
        return self.protocol.dataReceived(data)
    
    def _TLS_doRead(self):
        if self.writeBlockedOnRead:
            self.writeBlockedOnRead = 0
            return self.doWrite()
        try:
            return self._NOTLS_doRead()
        except SSL.ZeroReturnError:
            # close SSL layer, since other side has done so, if we haven't
            if not self.sslShutdown:
                try:
                    self.socket.shutdown()
                    self.sslShutdown = 1
                except SSL.Error:
                    pass
            return main.CONNECTION_DONE
        except SSL.WantReadError:
            return
        except SSL.WantWriteError:
            self.readBlockedOnWrite = 1
            self.startWriting()
            return
        except SSL.Error:
            return main.CONNECTION_LOST

<CUT LOTS MORE CODE>


Jeremy



From itamar at itamarst.org  Fri May  2 11:54:52 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 2 May 2003 13:54:52 -0400
Subject: [Twisted-Python] adbapi question
In-Reply-To: <1051886018.8932.4.camel@qutang.gnubian.org>
References: <200304302328.31599.jon@totient.demon.co.uk>
	<1051752541.32738.206.camel@samadhi>
	<20030430213930.542c81d9.itamar@itamarst.org>
	<1051886018.8932.4.camel@qutang.gnubian.org>
Message-ID: <20030502135452.326bab52.itamar@itamarst.org>

On 02 May 2003 09:33:38 -0500
Justin Ryan <justin at gnubia.net> wrote:

> Well, I think it was a misconception on my part.. It does seem as if
> the reactor is not _designed_ to be used in short 'scripts' like this
> one, but I wasn't aware you could call reactor.stop().

Not true. All of the examples in doc/examples/ are short scripts.
Apparently you just aren't using it correctly. You just need to
understand how event driven programming works. Once you make that
conceptual leap, it's all pretty trivial.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From justin at gnubia.net  Fri May  2 15:46:29 2003
From: justin at gnubia.net (Justin Ryan)
Date: 02 May 2003 16:46:29 -0500
Subject: [Twisted-Python] website down?
Message-ID: <1051911989.11327.2.camel@qutang.gnubian.org>

Is there a problem with the twistedmatrix.com server?  Port 80 takes
~15-30s to answer, and never responds to a GET / (though my browser did
show a title after several minutes at one point)..

-j




From glyph at twistedmatrix.com  Fri May  2 16:31:12 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 2 May 2003 17:31:12 -0500
Subject: [Twisted-Python] Updated TLS patch
In-Reply-To: <20030502123028.GM37090@shitbomb.com>
Message-ID: <C78D8919-7CED-11D7-B27C-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Ugly as it is, this looks like the right answer to me...

On Friday, May 2, 2003, at 07:30 AM, Skinny Puppy wrote:

> The branch/function call can be avoided by replacing the 
> doRead/doWrite/etc
> methods in startTLS.  While this is still not very perty ;)
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+svG0vVGR4uSOE2wRAqo+AJ40/0hBnDnEh1267vYe7hAJV0TEUwCeNklv
Qya3OyfpjxoexyNSb3iLPqc=
=24qI
-----END PGP SIGNATURE-----




From ecn at metaslash.com  Fri May  2 17:06:58 2003
From: ecn at metaslash.com (Eric C. Newton)
Date: Fri, 2 May 2003 19:06:58 -0400
Subject: [Twisted-Python] ReconnectingClientFactory.stopTrying
Message-ID: <20030502230658.GA21030@localhost.localdomain>

RedHat 9.0
Twisted 1.0.4

I have two servers, A and B, connected over a network which may, or
may not be working well.  Server A wants to send a bunch of data over
to Server B.  I'm using ReconnectingClientFactory to get A connected
to B even in the presence of failures.

Once Server A dumps the data on B, it should disconnect and go back to
doing it's (unrelated) work, and close the connection on B.

ReconnectingClientFactory has "stopTrying" which I call to prevent
future connections from being made.  Then I close the current
connection.  Unfortunately that tells the ReconnectingClientFactory
that it should reconnect, even though it should have stopped trying.
Shortly thereafter I get a stack trace.  Reversing the
order... loseConnection, stopTrying, doesn't work either.

Test code below will give a stack trace after a few seconds of
running.

My (present) workaround is to close the connection, and tell the
ReconnectingClientFactory to stopTrying with:

	reactor.callLater(0.1, self.factory.stopTrying)

It works, but the 0.1 is a kludge to allow connection clean-up to
finish, but timed to go off before the Connector starts a new attempt.
Yuck.

-Eric
#
from twisted.internet import reactor
from twisted.internet.protocol import Factory, ReconnectingClientFactory
from twisted.protocols.basic import Int16StringReceiver
import pickle

class In(Int16StringReceiver):

    def __init__(self):
        self.msgs = {}
    
    def stringReceived(self, msg):
        n, msg = pickle.loads(msg)
        self.msgs[n] = msg
        self.sendString(pickle.dumps(n))

    def connectionLost(self, reason):
        print self.msgs.values()

class Out(Int16StringReceiver):

    def __init__(self):
        self.msgs = {}

    def connectionMade(self):
        for i in range(10):
            self.msgs[i] = 'X' * i
        for i in self.msgs.keys():
            self.sendString(pickle.dumps( (i, self.msgs[i])))
    
    def stringReceived(self, msg):
        n = pickle.loads(msg)
        del self.msgs[n]
        if not self.msgs:
            self.transport.loseConnection()
            self.factory.stopTrying()

f = Factory()
f.protocol = In

c = ReconnectingClientFactory()
c.protocol = Out

PORT=9000
reactor.connectTCP('localhost', PORT, c)
reactor.listenTCP(PORT, f)
reactor.run()



From exarkun at intarweb.us  Sat May  3 00:16:09 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Sat, 3 May 2003 02:16:09 -0400
Subject: [Twisted-Python] ReconnectingClientFactory.stopTrying
In-Reply-To: <20030502230658.GA21030@localhost.localdomain>
References: <20030502230658.GA21030@localhost.localdomain>
Message-ID: <20030503061609.GA5437@meson.dyndns.org>

On Fri, May 02, 2003 at 07:06:58PM -0400, Eric C. Newton wrote:
> RedHat 9.0
> Twisted 1.0.4

  Thanks for including this info.

> 
> [snip]
> 
> My (present) workaround is to close the connection, and tell the
> ReconnectingClientFactory to stopTrying with:
> 
> 	reactor.callLater(0.1, self.factory.stopTrying)
> 
> It works, but the 0.1 is a kludge to allow connection clean-up to
> finish, but timed to go off before the Connector starts a new attempt.
> Yuck.

  Fixed in CVS.  I also turned your demonstration into a test case and added
it as well, as I don't expect you'll have any issue with the legalities
(Grant glyph a non-exclusive copyright to the code - see doc/legal/ for the
details).  Please confirm this, so I don't have to back out
test_factories.py and write a new one :)

  And thanks for the bug report!

  Jp

-- 
#!/bin/bash
( LIST=(~/.sigs/*.sig)
  cat ${LIST[$(($RANDOM % ${#LIST[*]}))]}
  echo -- $'\n' `uptime | sed -e 's/.*m//'` ) > ~/.signature
-- 
 up 1 day, 4:38, 5 users, load average: 0.09, 0.06, 0.01
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030503/65631519/attachment.sig>

From skin_pup-twisted at damnable.happypoo.com  Fri May  2 21:02:26 2003
From: skin_pup-twisted at damnable.happypoo.com (Skinny Puppy)
Date: Fri, 2 May 2003 23:02:26 -0400
Subject: [Twisted-Python] Updated TLS patch
In-Reply-To: <C78D8919-7CED-11D7-B27C-000393C9700E@twistedmatrix.com>
References: <20030502123028.GM37090@shitbomb.com> <C78D8919-7CED-11D7-B27C-000393C9700E@twistedmatrix.com>
Message-ID: <20030503030226.GQ37090@shitbomb.com>

Glyph Lefkowitz [glyph at twistedmatrix.com] wrote:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
> 
> Ugly as it is, this looks like the right answer to me...
> 
> On Friday, May 2, 2003, at 07:30 AM, Skinny Puppy wrote:
> 
> >The branch/function call can be avoided by replacing the 
> >doRead/doWrite/etc
> >methods in startTLS.  While this is still not very perty ;)
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.2.1 (Darwin)
> 
> iD8DBQE+svG0vVGR4uSOE2wRAqo+AJ40/0hBnDnEh1267vYe7hAJV0TEUwCeNklv
> Qya3OyfpjxoexyNSb3iLPqc=
> =24qI
> -----END PGP SIGNATURE-----

Ok - Done - I still don't like it.  I have not run any real world tests
yet, but I have used echoserv_tls.py/echoclient_tls.py and watched the
traffic with tcpdump to verify the encryption.  And of course the Unit
Tests.  

Jeremy 
-------------- next part --------------
? doc/examples/echoclient_tls.py
? doc/examples/echoserv_tls.py
Index: twisted/internet/ssl.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/ssl.py,v
retrieving revision 1.40
diff -u -r1.40 ssl.py
--- twisted/internet/ssl.py	2 Apr 2003 04:11:32 -0000	1.40
+++ twisted/internet/ssl.py	3 May 2003 06:28:42 -0000
@@ -95,116 +95,13 @@
         return SSL.Context(SSL.SSLv3_METHOD)
 
 
-class Connection(tcp.Connection):
-    """I am an SSL connection.
-    """
-
-    __implements__ = tcp.Connection.__implements__, interfaces.ISSLTransport
-    
-    writeBlockedOnRead = 0
-    readBlockedOnWrite= 0
-    sslShutdown = 0
-    
-    def getPeerCertificate(self):
-        """Return the certificate for the peer."""
-        return self.socket.get_peer_certificate()
-
-    def _postLoseConnection(self):
-        """Gets called after loseConnection(), after buffered data is sent.
-
-        We close the SSL transport layer, and if the other side hasn't
-        closed it yet we start reading, waiting for a ZeroReturnError
-        which will indicate the SSL shutdown has completed.
-        """
-        try:
-            done = self.socket.shutdown()
-            self.sslShutdown = 1
-        except SSL.Error:
-            return main.CONNECTION_LOST
-        if done:
-            return main.CONNECTION_DONE
-        else:
-            # we wait for other side to close SSL connection -
-            # this will be signaled by SSL.ZeroReturnError when reading
-            # from the socket
-            self.stopWriting()
-            self.startReading()
-            return None # don't close socket just yet
-    
-    def doRead(self):
-        """See tcp.Connection.doRead for details.
-        """
-        if self.writeBlockedOnRead:
-            self.writeBlockedOnRead = 0
-            return self.doWrite()
-        try:
-            return tcp.Connection.doRead(self)
-        except SSL.ZeroReturnError:
-            # close SSL layer, since other side has done so, if we haven't
-            if not self.sslShutdown:
-                try:
-                    self.socket.shutdown()
-                    self.sslShutdown = 1
-                except SSL.Error:
-                    pass
-            return main.CONNECTION_DONE
-        except SSL.WantReadError:
-            return
-        except SSL.WantWriteError:
-            self.readBlockedOnWrite = 1
-            self.startWriting()
-            return
-        except SSL.Error:
-            return main.CONNECTION_LOST
-
-    def doWrite(self):
-        if self.readBlockedOnWrite:
-            self.readBlockedOnWrite = 0
-            if not self.dataBuffer: self.stopWriting()
-            return self.doRead()
-        return tcp.Connection.doWrite(self)
-    
-    def writeSomeData(self, data):
-        """See tcp.Connection.writeSomeData for details.
-        """
-        if not data:
-            return 0
-
-        try:
-            return tcp.Connection.writeSomeData(self, data)
-        except SSL.WantWriteError:
-            return 0
-        except SSL.WantReadError:
-            self.writeBlockedOnRead = 1
-            return 0
-        except SSL.Error:
-            return main.CONNECTION_LOST
-
-    def _closeSocket(self):
-        """Called to close our socket."""
-        try:
-            self.socket.sock_shutdown(2)
-        except socket.error:
-            try:
-                self.socket.close()
-            except socket.error:
-                log.deferr()
-
-
-
-class Client(Connection, tcp.Client):
+class Client(tcp.Client):
     """I am an SSL client."""
     def __init__(self, host, port, bindAddress, ctxFactory, connector, reactor=None):
         # tcp.Client.__init__ depends on self.ctxFactory being set
         self.ctxFactory = ctxFactory
         tcp.Client.__init__(self, host, port, bindAddress, connector, reactor)
 
-    def createInternetSocket(self):
-        """(internal) create an SSL socket
-        """
-        sock = tcp.Client.createInternetSocket(self)
-        return SSL.Connection(self.ctxFactory.getContext(), sock)
-
     def getHost(self):
         """Returns a tuple of ('SSL', hostname, port).
 
@@ -219,16 +116,14 @@
         """
         return ('SSL',)+self.addr
 
+    def _finishInit(self, whenDone, skt, error, reactor):
+        tcp.Client._finishInit(self, whenDone, skt, error, reactor)
+        self.startTLS(self.ctxFactory)
 
 
-class Server(Connection, tcp.Server):
+class Server(tcp.Server):
     """I am an SSL server.
     """
-    
-    def __init__(*args, **kw):
-        # We don't want Connection's __init__
-        tcp.Server.__init__(*args, **kw)
-    
     def getHost(self):
         """Returns a tuple of ('SSL', hostname, port).
 
@@ -257,33 +152,12 @@
         """
         sock = tcp.Port.createInternetSocket(self)
         return SSL.Connection(self.ctxFactory.getContext(), sock)
-    
-    def doRead(self):
-        """Called when my socket is ready for reading.
 
-        This accepts a connection and calls self.protocol() to handle the
-        wire-level protocol.
-        """
-        try:
-            try:
-                skt, addr = self.socket.accept()
-            except socket.error, e:
-                if e.args[0] == tcp.EWOULDBLOCK:
-                    return
-                raise
-            except SSL.Error:
-                log.deferr()
-                return
-            protocol = self.factory.buildProtocol(addr)
-            if protocol is None:
-                skt.close()
-                return
-            s = self.sessionno
-            self.sessionno = s+1
-            transport = self.transport(skt, protocol, addr, self, s)
-            protocol.makeConnection(transport)
-        except:
-            log.deferr()
+    def _preMakeConnection(self, transport):
+        # *Don't* call startTLS here
+        # The transport already has the SSL.Connection object from above
+        transport._startTLS()
+        return tcp.Port._preMakeConnection(self, transport)
 
 
 class Connector(base.BaseConnector):
Index: twisted/internet/tcp.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/tcp.py,v
retrieving revision 1.118
diff -u -r1.118 tcp.py
--- twisted/internet/tcp.py	2 May 2003 04:31:14 -0000	1.118
+++ twisted/internet/tcp.py	3 May 2003 06:28:50 -0000
@@ -39,6 +39,11 @@
 except ImportError:
     fcntl = None
 
+try:
+    from OpenSSL import SSL
+except ImportError:
+    SSL = None
+
 if os.name == 'nt':
     # we hardcode these since windows actually wants e.g.
     # WSAEALREADY rather than EALREADY. Possibly we should
@@ -88,14 +93,36 @@
 
     __implements__ = abstract.FileDescriptor.__implements__, interfaces.ITCPTransport
 
+    if SSL:
+        writeBlockedOnRead = 0
+        readBlockedOnWrite= 0
+        sslShutdown = 0
+        TLS = 0
+
     def __init__(self, skt, protocol, reactor=None):
         abstract.FileDescriptor.__init__(self, reactor=reactor)
         self.socket = skt
         self.socket.setblocking(0)
         self.fileno = skt.fileno
         self.protocol = protocol
+        
+    def startTLS(self, ctx):
+        if not SSL:
+            raise RuntimeException, "No SSL support available"
+        assert not self.TLS
 
-    def doRead(self):
+        self._startTLS()
+        self.socket = SSL.Connection(ctx.getContext(), self.socket)
+        self.fileno = self.socket.fileno
+    
+    def _startTLS(self):
+        self.TLS = 1
+        self.doRead = self._TLS_doRead
+        self.writeSomeData = self._TLS_writeSomeData
+        self.doWrite = self._TLS_doWrite
+        self._closeSocket = self._TLS_closeSocket
+
+    def _NOTLS_doRead(self):
         """Calls self.protocol.dataReceived with all available data.
 
         This reads up to self.bufferSize bytes of data from its socket, then
@@ -114,7 +141,42 @@
             return main.CONNECTION_LOST
         return self.protocol.dataReceived(data)
 
-    def writeSomeData(self, data):
+    doRead = _NOTLS_doRead
+    
+    def _TLS_doRead(self):
+        if self.writeBlockedOnRead:
+            self.writeBlockedOnRead = 0
+            return self.doWrite()
+        try:
+            return self._NOTLS_doRead()
+        except SSL.ZeroReturnError:
+            # close SSL layer, since other side has done so, if we haven't
+            if not self.sslShutdown:
+                try:
+                    self.socket.shutdown()
+                    self.sslShutdown = 1
+                except SSL.Error:
+                    pass
+            return main.CONNECTION_DONE
+        except SSL.WantReadError:
+            return
+        except SSL.WantWriteError:
+            self.readBlockedOnWrite = 1
+            self.startWriting()
+            return
+        except SSL.Error:
+            return main.CONNECTION_LOST
+
+    def _TLS_doWrite(self):
+        if self.readBlockedOnWrite:
+            self.readBlockedOnWrite = 0
+            # XXX - This is touching internal guts bad bad bad
+            if not self.dataBuffer:
+                self.stopWriting()
+            return self.doRead()
+        return abstract.FileDescriptor.doWrite(self)
+
+    def _NOTLS_writeSomeData(self, data):
         """Connection.writeSomeData(data) -> #of bytes written | CONNECTION_LOST
         This writes as much data as possible to the socket and returns either
         the number of bytes read (which is positive) or a connection error code
@@ -128,7 +190,21 @@
             else:
                 return main.CONNECTION_LOST
 
-    def _closeSocket(self):
+    writeSomeData = _NOTLS_writeSomeData
+
+    def _TLS_writeSomeData(self, data):
+        if not data:
+            return 0
+        try:
+            return self._NOTLS_writeSomeData(data)
+        except SSL.WantWriteError:
+            return 0
+        except SSL.WantReadError:
+            self.writeBlockedOnRead = 1
+        except SSL.Error:
+            return main.CONNECTION_LOST
+
+    def _NOTLS_closeSocket(self):
         """Called to close our socket."""
         # This used to close() the socket, but that doesn't *really* close if
         # there's another reference to it in the TCP/IP stack, e.g. if it was
@@ -139,6 +215,17 @@
         except socket.error:
             pass
 
+    _closeSocket = _NOTLS_closeSocket
+
+    def _TLS_closeSocket(self):
+        try:
+            self.socket.sock_shutdown(2)
+        except:
+            try:
+                self.socket.close()
+            except:
+                pass
+
     def connectionLost(self, reason):
         """See abstract.FileDescriptor.connectionLost().
         """
@@ -173,6 +260,33 @@
 
     def setTcpNoDelay(self, enabled):
         self.socket.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, enabled)
+    
+    def _postLoseConnection(self):
+        """Gets called after loseConnection(), after buffered data is sent.
+
+        We close the SSL transport layer, and if the other side hasn't
+        closed it yet we start reading, waiting for a ZeroReturnError
+        which will indicate the SSL shutdown has completed.
+        """
+        if not self.TLS:
+            return abstract.FileDescriptor._postLoseConnection(self)
+
+        try:
+            done = self.socket.shutdown()
+            self.sslShutdown = 1
+        except SSL.Error:
+            return main.CONNECTION_LOST
+        if done:
+            return main.CONNECTION_DONE
+        else:
+            # we wait for other side to close SSL connection -
+            # this will be signaled by SSL.ZeroReturnError when reading
+            # from the socket
+            self.stopWriting()
+            self.startReading()
+            
+            # don't close socket just yet
+            return None
 
 
 class BaseClient(Connection):
@@ -191,6 +305,11 @@
         else:
             reactor.callLater(0, self.failIfNotConnected, error)
 
+    def startTLS(self, ctx):
+        holder = Connection.startTLS(self, ctx)
+        self.socket.set_connect_state()
+        return holder
+
     def stopConnecting(self):
         """Stop attempt to connect."""
         self.failIfNotConnected(error.UserError())
@@ -360,6 +479,11 @@
         """
         return self.repstr
 
+    def startTLS(self, ctx):
+        holder = Connection.startTLS(self, ctx)
+        self.socket.set_accept_state()
+        return holder
+
     def getHost(self):
         """Returns a tuple of ('INET', hostname, port).
 
@@ -458,6 +582,7 @@
                     elif e.args[0] == EPERM:
                         continue
                     raise
+                
                 protocol = self.factory.buildProtocol(addr)
                 if protocol is None:
                     skt.close()
@@ -465,11 +590,22 @@
                 s = self.sessionno
                 self.sessionno = s+1
                 transport = self.transport(skt, protocol, addr, self, s)
+                transport = self._preMakeConnection(transport)
                 protocol.makeConnection(transport)
             else:
                 self.numberAccepts = self.numberAccepts+20
         except:
+            # Note that in TLS mode, this will possibly catch SSL.Errors
+            # raised by self.socket.accept()
+            #
+            # There is no "except SSL.Error:" above because SSL may be
+            # None if there is no SSL support.  In any case, all the
+            # "except SSL.Error:" suite would probably do is log.deferr()
+            # and return, so handling it here works just as well.
             log.deferr()
+    
+    def _preMakeConnection(self, transport):
+        return transport
 
     def loseConnection(self, connDone=failure.Failure(main.CONNECTION_DONE)):
         """Stop accepting connections on this port.
Index: twisted/test/test_ssl.py
===================================================================
RCS file: /cvs/Twisted/twisted/test/test_ssl.py,v
retrieving revision 1.9
diff -u -r1.9 test_ssl.py
--- twisted/test/test_ssl.py	3 May 2003 02:03:54 -0000	1.9
+++ twisted/test/test_ssl.py	3 May 2003 06:28:55 -0000
@@ -17,19 +17,23 @@
 from __future__ import nested_scopes
 from twisted.trial import unittest
 from twisted.internet import protocol, reactor
+from twisted.protocols import basic
+
 try:
-    import OpenSSL
+    from OpenSSL import SSL
     from twisted.internet import ssl
 except ImportError:
-    OpenSSL = None
+    SSL = None
+
 import os
 import test_tcp
 
 
+certPath = os.path.join(os.path.split(test_tcp.__file__)[0], "server.pem")
+
 class StolenTCPTestCase(test_tcp.ProperlyCloseFilesTestCase, test_tcp.WriteDataTestCase):
     
     def setUp(self):
-        certPath = os.path.join(os.path.split(test_tcp.__file__)[0], "server.pem")
         f = protocol.ServerFactory()
         f.protocol = protocol.Protocol
         self.listener = reactor.listenSSL(
@@ -49,5 +53,117 @@
 
         self.totalConnections = 0
 
-if not OpenSSL:
-    del StolenTCPTestCase
+class ClientTLSContext(ssl.ClientContextFactory):
+    isClient = 1
+    def getContext(self):
+        return SSL.Context(ssl.SSL.TLSv1_METHOD)
+
+class UnintelligentProtocol(basic.LineReceiver):
+    pretext = [
+        "first line",
+        "last thing before tls starts",
+        "STARTTLS",
+    ]
+    
+    posttext = [
+        "first thing after tls started",
+        "last thing ever",
+    ]
+    
+    def connectionMade(self):
+        for l in self.pretext:
+            self.sendLine(l)
+
+    def lineReceived(self, line):
+        if line == "READY":
+            self.transport.startTLS(ClientTLSContext())
+            for l in self.posttext:
+                self.sendLine(l)
+            self.transport.loseConnection()
+        
+class ServerTLSContext(ssl.DefaultOpenSSLContextFactory):
+    isClient = 0
+    def __init__(self, *args, **kw):
+        kw['sslmethod'] = SSL.TLSv1_METHOD
+        ssl.DefaultOpenSSLContextFactory.__init__(self, *args, **kw)
+
+class LineCollector(basic.LineReceiver):
+    def __init__(self, doTLS):
+        self.doTLS = doTLS
+
+    def connectionMade(self):
+        self.factory.rawdata = ''
+        self.factory.lines = []
+
+    def lineReceived(self, line):
+        self.factory.lines.append(line)
+        if line == 'STARTTLS':
+            self.sendLine('READY')
+            if self.doTLS:
+                ctx = ServerTLSContext(
+                    privateKeyFileName=certPath,
+                    certificateFileName=certPath,
+                )
+                self.transport.startTLS(ctx)
+            else:
+                self.setRawMode()
+    
+    def rawDataReceived(self, data):
+        self.factory.rawdata += data
+        self.factory.done = 1
+    
+    def connectionLost(self, reason):
+        self.factory.done = 1
+
+class TLSTestCase(unittest.TestCase):
+    def testTLS(self):
+        cf = protocol.ClientFactory()
+        cf.protocol = UnintelligentProtocol
+        
+        sf = protocol.ServerFactory()
+        sf.protocol = lambda: LineCollector(1)
+        sf.done = 0
+
+        port = reactor.listenTCP(0, sf)
+        portNo = port.getHost()[2]
+        
+        reactor.connectTCP('0.0.0.0', portNo, cf)
+        
+        i = 0
+        while i < 5000 and not sf.done:
+            reactor.iterate(0.01)
+            i += 1
+        
+        self.failUnless(sf.done, "Never finished reading all lines")
+        self.assertEquals(
+            sf.lines,
+            UnintelligentProtocol.pretext + UnintelligentProtocol.posttext
+        )
+    
+    def testUnTLS(self):
+        cf = protocol.ClientFactory()
+        cf.protocol = UnintelligentProtocol
+        
+        sf = protocol.ServerFactory()
+        sf.protocol = lambda: LineCollector(0)
+        sf.done = 0
+
+        port = reactor.listenTCP(0, sf)
+        portNo = port.getHost()[2]
+        
+        reactor.connectTCP('0.0.0.0', portNo, cf)
+        
+        i = 0
+        while i < 5000 and not sf.done:
+            reactor.iterate(0.01)
+            i += 1
+        
+        self.failUnless(sf.done, "Never finished reading all lines")
+        self.assertEquals(
+            sf.lines,
+            UnintelligentProtocol.pretext
+        )
+        self.failUnless(sf.rawdata, "No encrypted bytes received")
+        
+if not SSL:
+    globals().clear()

From ecn at metaslash.com  Sat May  3 04:56:38 2003
From: ecn at metaslash.com (Eric C. Newton)
Date: Sat, 3 May 2003 06:56:38 -0400
Subject: [Twisted-Python] ReconnectingClientFactory.stopTrying
In-Reply-To: <20030503061609.GA5437@meson.dyndns.org>
References: <20030502230658.GA21030@localhost.localdomain> <20030503061609.GA5437@meson.dyndns.org>
Message-ID: <20030503105638.GB22804@localhost.localdomain>

> I also turned your demonstration into a test case and added it as
> well, as I don't expect you'll have any issue with the legalities

No problem at all.

>   And thanks for the bug report!

Thanks for fixing.

-Eric



From m at moshez.org  Sun May  4 00:17:16 2003
From: m at moshez.org (Moshe Zadka)
Date: 4 May 2003 06:17:16 -0000
Subject: [Twisted-Python] Woven Warning -- A Fix
Message-ID: <20030504061716.17387.qmail@green.zadka.com>

The followning patch fixes the remaining warning in woven, but it
is somewhat ugly.

Any comments?

--- twisted/web/woven/template.py       28 Apr 2003 03:53:28 -0000      1.37
+++ twisted/web/woven/template.py       4 May 2003 06:12:13 -0000
@@ -123,6 +123,7 @@
             parent = node.parentNode
             if parent:
                 parent.replaceChild(self.data, node)
+                node.parentNode = parent
             else:
                 warnings.warn("Warning: There was no parent for node %s; node not mutated." % node)
         return self.data

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From dp at twistedmatrix.com  Sun May  4 03:07:59 2003
From: dp at twistedmatrix.com (Donovan Preston)
Date: Sun, 4 May 2003 02:07:59 -0700
Subject: [Twisted-Python] Woven Warning -- A Fix
In-Reply-To: <20030504061716.17387.qmail@green.zadka.com>
Message-ID: <E6FBA970-7E0F-11D7-A15B-00039376B1AE@twistedmatrix.com>

On Saturday, May 3, 2003, at 11:17 PM, Moshe Zadka wrote:

> The followning patch fixes the remaining warning in woven, but it
> is somewhat ugly.
>
> Any comments?

Thanks Moshe for bringing this up. Since this is a potentially useful 
message, but is possible to trigger in a situation where the code is 
correct, I'll change it to a log.msg instead of log.warn, rather than 
trying to make that branch of the code go away entirely.

Donovan




From m at moshez.org  Sun May  4 03:49:55 2003
From: m at moshez.org (Moshe Zadka)
Date: 4 May 2003 09:49:55 -0000
Subject: [Twisted-Python] Apply Deprecation
Message-ID: <20030504094955.23710.qmail@green.zadka.com>

I've run a quick grep over the unittest log, and saw that an overwhelming
majority of the errors come from relatively few places, namely:

    104 twisted/test/test_internet.py:502
     38 twisted/python/failure.py:230
     31 twisted/enterprise/xmlreflector.py:94
     24 twisted/spread/util.py:80
     24 twisted/spread/util.py:76

These are five lines which, if properly fixed, would make the tests
more readable.

I realize there are good reasons for *not* stomping over the tree, randomly
changing stuff, and I'm not suggesting it. I'm suggesting changing five
lines.

Thanks,
Moshe

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From m at moshez.org  Sun May  4 04:33:02 2003
From: m at moshez.org (Moshe Zadka)
Date: 4 May 2003 10:33:02 -0000
Subject: [Twisted-Python] Apply Deprecation
In-Reply-To: <20030504094955.23710.qmail@green.zadka.com>
References: <20030504094955.23710.qmail@green.zadka.com>
Message-ID: <20030504103302.24296.qmail@green.zadka.com>

On 4 May 2003, Moshe Zadka <m at moshez.org> wrote:

> I've run a quick grep over the unittest log, and saw that an overwhelming
> majority of the errors come from relatively few places, namely:
> 
>     104 twisted/test/test_internet.py:502
>      38 twisted/python/failure.py:230
>      31 twisted/enterprise/xmlreflector.py:94
>      24 twisted/spread/util.py:80
>      24 twisted/spread/util.py:76
> 
> These are five lines which, if properly fixed, would make the tests
> more readable.
> 
> I realize there are good reasons for *not* stomping over the tree, randomly
> changing stuff, and I'm not suggesting it. I'm suggesting changing five
> lines.

Following up on myself, here is a patch:

Index: twisted/test/test_internet.py
===================================================================
RCS file: /cvs/Twisted/twisted/test/test_internet.py,v
retrieving revision 1.25
diff -u -r1.25 test_internet.py
--- twisted/test/test_internet.py	12 Apr 2003 20:16:35 -0000	1.25
+++ twisted/test/test_internet.py	4 May 2003 10:29:45 -0000
@@ -499,7 +499,7 @@
 
     def schedule(self, *args, **kwargs):
         """Override in subclasses."""
-        apply(reactor.callFromThread, args, kwargs)
+        reactor.callFromThread(*args, **kwargs)
 
     def testScheduling(self):
         c = Counter()
Index: twisted/python/failure.py
===================================================================
RCS file: /cvs/Twisted/twisted/python/failure.py,v
retrieving revision 1.31
diff -u -r1.31 failure.py
--- twisted/python/failure.py	3 May 2003 04:23:15 -0000	1.31
+++ twisted/python/failure.py	4 May 2003 10:29:45 -0000
@@ -227,7 +227,7 @@
 
         @type errorTypes: L{Exception}
         """
-        error = apply(self.check, errorTypes)
+        error = self.check(*errorTypes)
         if not error:
             raise self
         return error
Index: twisted/enterprise/xmlreflector.py
===================================================================
RCS file: /cvs/Twisted/twisted/enterprise/xmlreflector.py,v
retrieving revision 1.12
diff -u -r1.12 xmlreflector.py
--- twisted/enterprise/xmlreflector.py	12 Jan 2003 06:26:48 -0000	1.12
+++ twisted/enterprise/xmlreflector.py	4 May 2003 10:29:45 -0000
@@ -91,7 +91,8 @@
             # find the row in the cache or add it
             resultObject = self.findInCache(tableInfo.rowClass, proxy.kw)
             if not resultObject:
-                resultObject = apply(tableInfo.rowFactoryMethod[0], (tableInfo.rowClass, data, proxy.kw) )
+                resultObject = tableInfo.rowFactoryMethod[0](
+                                       tableInfo.rowClass, data, proxy.kw)
                 self.addToCache(resultObject)
                 newRows.append(resultObject)
             results.append(resultObject)
Index: twisted/spread/util.py
===================================================================
RCS file: /cvs/Twisted/twisted/spread/util.py,v
retrieving revision 1.8
diff -u -r1.8 util.py
--- twisted/spread/util.py	27 Aug 2002 19:57:57 -0000	1.8
+++ twisted/spread/util.py	4 May 2003 10:29:45 -0000
@@ -73,11 +73,11 @@
         self.failWhenNotImplemented = failWhenNotImplemented
 
     def _callMethod(self, method, *args, **kw):
-        return apply(getattr(self.forwarded, method), args, kw)
+        return getattr(self.forwarded, method)(*args, **kw)
 
     def callRemote(self, method, *args, **kw):
         if hasattr(self.interfaceClass, method):
-            result = apply(defer.execute, (self._callMethod,method)+args, kw)
+            result = defer.execute(self._callMethod, method, *args, **kw)
             return result
         elif self.failWhenNotImplemented:
             return defer.fail(

Please look through it to see if there are any glaring mistake.
Naturally, I *have* run the unit tests.

Thanks,
Moshe
-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From m at moshez.org  Sun May  4 05:08:00 2003
From: m at moshez.org (Moshe Zadka)
Date: 4 May 2003 11:08:00 -0000
Subject: [Twisted-Python] Apply Deprecation
In-Reply-To: <20030504103302.24296.qmail@green.zadka.com>
References: <20030504103302.24296.qmail@green.zadka.com>, <20030504094955.23710.qmail@green.zadka.com>
Message-ID: <20030504110800.24667.qmail@green.zadka.com>

On 4 May 2003, Moshe Zadka <m at moshez.org> wrote:

> Following up on myself, here is a patch:
<snip>

After consulting with Andrew, we decided it should be checked in,
and it has.

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From lstep at adequat.net  Sun May  4 15:42:25 2003
From: lstep at adequat.net (Luc Stepniewski)
Date: Sun, 04 May 2003 23:42:25 +0200
Subject: [Twisted-Python] Missing files from installation of woven part
Message-ID: <3EB58941.6090309@adequat.net>

When you do a python setup.py build/install, important files from 
t.web.woven are missing. The LivePage related files FlashConduit.fla,
FlashConduit.swf, FlashConduitGlue.html, WebConduit2_mozilla.js, 
WebConduit2_msie.js and WebConduitGlue.html are not copied, so LivePage 
does not work at all without them :'-(

Could anyone modify the installation to include these files in the copy?

Thanks,
Luc




From lstep at adequat.net  Sun May  4 15:59:21 2003
From: lstep at adequat.net (Luc Stepniewski)
Date: Sun, 04 May 2003 23:59:21 +0200
Subject: [Twisted-Python] Missing files from installation of woven part
In-Reply-To: <3EB58941.6090309@adequat.net>
References: <3EB58941.6090309@adequat.net>
Message-ID: <3EB58D39.4070102@adequat.net>

Luc Stepniewski wrote:
> When you do a python setup.py build/install, important files from 
> t.web.woven are missing. The LivePage related files FlashConduit.fla,
> FlashConduit.swf, FlashConduitGlue.html, WebConduit2_mozilla.js, 
> WebConduit2_msie.js and WebConduitGlue.html are not copied, so LivePage 
> does not work at all without them :'-(

Well, in fact, this doesn't solve exactly the problem, as twisted tries 
to create a .WebConduitGlue.pxp in 
/usr/lib/python2.2/site-packages/twisted/web/woven/ which is not 
supposed to be accessible for all users.

So maybe one should remove the merge of WOVEN_PATH with the filename in 
controller.py ?

return static.File(os.path.join(WOVEN_PATH, fl))

Or maybe someone has another solution?

Luc




From ecn at metaslash.com  Sun May  4 16:54:40 2003
From: ecn at metaslash.com (Eric C. Newton)
Date: Sun, 4 May 2003 18:54:40 -0400
Subject: [Twisted-Python] examples/echoserv_ssl.py
Message-ID: <20030504225440.GA3840@localhost.localdomain>

Redhat 9.0
Twisted 1.0.4
Python 2.2.2

    $ cd Twisted-1.0.4/doc/examples
    $ python echoserv_ssl.py
    2003/05/04 18:53 [-] Log opened.
    2003/05/04 18:53 [-] Traceback (most recent call last):
    2003/05/04 18:53 [-]   File "echoserv_ssl.py", line 42, in ?
    2003/05/04 18:53 [-]     factory.protocol = echoserv.EchoTCP
    2003/05/04 18:53 [-] AttributeError: 'module' object has no attribute 'EchoTCP'

-Eric




From ecn at metaslash.com  Sun May  4 17:32:58 2003
From: ecn at metaslash.com (Eric C. Newton)
Date: Sun, 4 May 2003 19:32:58 -0400
Subject: [Twisted-Python] examples/echoserv_ssl.py, win32
Message-ID: <20030504233258.GA4608@localhost.localdomain>

Windows ME (yes, Windows ME, the trashy one)
Python 2.2.2
Twisted 1.0.4
pyOpenSSL-0.4.1.win32-py2.2    (from sourceforge)
OpenSSL 0.9.7b

After fixing the reported bug in echoserv_ssl.py, I ran this at a
cygwin prompt:

	$ python echoserv_ssl.py

I tried running echoclient, and I get a dialog box saying:

       Python has caused an error in SSLEAY32.DLL. 
       Python will now close.
       
       If you continue to experience problems,
       try restarting your computer.

After clicking "OK" the echoclient_ssl quits. Alright... I won't do
that.  But I also get a stack trace in the server, which reproduces
the error I get in my actual application.

I don't really want an SSL client, I want an SSL server.  So I point
InternetExplorer to: https://127.0.0.1:8000.  Same stack trace.  Here
it is:

    2003/05/04 19:28 [-] Log opened.
    2003/05/04 19:28 [*echo-ssl*] twisted.internet.protocol.Factory starting on 8000
    2003/05/04 19:28 [*echo-ssl*] Starting factory <twisted.internet.protocol.Factory instance at 0x00B56B40>
    2003/05/04 19:29 [twisted.internet.protocol.Factory] Traceback (most recent call last):
    2003/05/04 19:29 [twisted.internet.protocol.Factory]   File "C:\PYTHON22\lib\site-packages\twisted\internet\app.py", line 869, in run
    2003/05/04 19:29 [twisted.internet.protocol.Factory]     reactor.run(installSignalHandlers=installSignalHandlers)
    2003/05/04 19:29 [twisted.internet.protocol.Factory]   File "C:\PYTHON22\lib\site-packages\twisted\internet\default.py", line 123, in run
    2003/05/04 19:29 [twisted.internet.protocol.Factory]     self.mainLoop()
    2003/05/04 19:29 [twisted.internet.protocol.Factory]   File "C:\PYTHON22\lib\site-packages\twisted\internet\default.py", line 134, in mainLoop
    2003/05/04 19:29 [twisted.internet.protocol.Factory]     self.doIteration(t)
    2003/05/04 19:29 [twisted.internet.protocol.Factory]   File "C:\PYTHON22\lib\site-packages\twisted\internet\default.py", line 469, in doSelect
    2003/05/04 19:29 [twisted.internet.protocol.Factory]     why = getattr(selectable, method)()
    2003/05/04 19:29 [twisted.internet.protocol.Factory] --- <exception caught here> ---
    2003/05/04 19:29 [twisted.internet.protocol.Factory]   File "C:\PYTHON22\lib\site-packages\twisted\internet\ssl.py", line 269, in doRead
    2003/05/04 19:29 [twisted.internet.protocol.Factory]     skt, addr = self.socket.accept()
    2003/05/04 19:29 [twisted.internet.protocol.Factory] SSL.WantReadError: 

-Eric



From exarkun at intarweb.us  Sun May  4 21:00:48 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Sun, 4 May 2003 23:00:48 -0400
Subject: [Twisted-Python] examples/echoserv_ssl.py
In-Reply-To: <20030504225440.GA3840@localhost.localdomain>
References: <20030504225440.GA3840@localhost.localdomain>
Message-ID: <20030505030048.GA13176@meson.dyndns.org>

On Sun, May 04, 2003 at 06:54:40PM -0400, Eric C. Newton wrote:
> Redhat 9.0
> Twisted 1.0.4
> Python 2.2.2
> 
>     $ cd Twisted-1.0.4/doc/examples
>     $ python echoserv_ssl.py
>     2003/05/04 18:53 [-] Log opened.
>     2003/05/04 18:53 [-] Traceback (most recent call last):
>     2003/05/04 18:53 [-]   File "echoserv_ssl.py", line 42, in ?
>     2003/05/04 18:53 [-]     factory.protocol = echoserv.EchoTCP
>     2003/05/04 18:53 [-] AttributeError: 'module' object has no attribute 'EchoTCP'
> 

  Already fixed in CVS, thanks.

  Jp

-- 
"Minerals are inexhaustible and will never be depleted. A stream of
investment creates additions to proved reserves, a very large in-ground
inventory, constantly renewed as it is extracted... How much was in the
ground at the start and how much will be left at the end are unknown and
irrelevant."  -- Morry Adelman, World Renowned Economist
-- 
 up 3 days, 0:38, 2 users, load average: 0.18, 0.19, 0.13
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030504/4aa174d1/attachment.sig>

From exarkun at intarweb.us  Sun May  4 21:13:09 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Sun, 4 May 2003 23:13:09 -0400
Subject: [Twisted-Python] examples/echoserv_ssl.py, win32
In-Reply-To: <20030504233258.GA4608@localhost.localdomain>
References: <20030504233258.GA4608@localhost.localdomain>
Message-ID: <20030505031309.GB13176@meson.dyndns.org>

On Sun, May 04, 2003 at 07:32:58PM -0400, Eric C. Newton wrote:
> Windows ME (yes, Windows ME, the trashy one)
> Python 2.2.2
> Twisted 1.0.4
> pyOpenSSL-0.4.1.win32-py2.2    (from sourceforge)
> OpenSSL 0.9.7b

  Current CVS Twisted has extensively refactored SSL support.  

> 
> After fixing the reported bug in echoserv_ssl.py, I ran this at a
> cygwin prompt:
> 
> 	$ python echoserv_ssl.py
> 
> I tried running echoclient, and I get a dialog box saying:
> 
>        Python has caused an error in SSLEAY32.DLL. 
>        Python will now close.
>        
>        If you continue to experience problems,
>        try restarting your computer.
> 
> After clicking "OK" the echoclient_ssl quits. Alright... I won't do
> that.  But I also get a stack trace in the server, which reproduces
> the error I get in my actual application.

  Ouch. :o

> 
> I don't really want an SSL client, I want an SSL server.  So I point
> InternetExplorer to: https://127.0.0.1:8000.  Same stack trace.  Here
> it is:
> 
>     2003/05/04 19:28 [-] Log opened.
>     2003/05/04 19:28 [*echo-ssl*] twisted.internet.protocol.Factory starting on 8000
>     2003/05/04 19:28 [*echo-ssl*] Starting factory <twisted.internet.protocol.Factory instance at 0x00B56B40>
>     2003/05/04 19:29 [twisted.internet.protocol.Factory] Traceback (most recent call last):
>     2003/05/04 19:29 [twisted.internet.protocol.Factory]   File "C:\PYTHON22\lib\site-packages\twisted\internet\app.py", line 869, in run
>     2003/05/04 19:29 [twisted.internet.protocol.Factory]     reactor.run(installSignalHandlers=installSignalHandlers)
>     2003/05/04 19:29 [twisted.internet.protocol.Factory]   File "C:\PYTHON22\lib\site-packages\twisted\internet\default.py", line 123, in run
>     2003/05/04 19:29 [twisted.internet.protocol.Factory]     self.mainLoop()
>     2003/05/04 19:29 [twisted.internet.protocol.Factory]   File "C:\PYTHON22\lib\site-packages\twisted\internet\default.py", line 134, in mainLoop
>     2003/05/04 19:29 [twisted.internet.protocol.Factory]     self.doIteration(t)
>     2003/05/04 19:29 [twisted.internet.protocol.Factory]   File "C:\PYTHON22\lib\site-packages\twisted\internet\default.py", line 469, in doSelect
>     2003/05/04 19:29 [twisted.internet.protocol.Factory]     why = getattr(selectable, method)()
>     2003/05/04 19:29 [twisted.internet.protocol.Factory] --- <exception caught here> ---
>     2003/05/04 19:29 [twisted.internet.protocol.Factory]   File "C:\PYTHON22\lib\site-packages\twisted\internet\ssl.py", line 269, in doRead
>     2003/05/04 19:29 [twisted.internet.protocol.Factory]     skt, addr = self.socket.accept()
>     2003/05/04 19:29 [twisted.internet.protocol.Factory] SSL.WantReadError: 


  Current CVS of Twisted has somewhat dramatically refactored SSL support. 
Would it be possible for you to grab it and see if the same problem occurs?

  Looking at the SSL code for 1.0.4, it seems like the "except SSL.Error:"
around the accept() call should be catching SSL.WantReadError.  Can you
check the output of this?

    from OpenSSL import SSL
    print isinstance(SSL.WantReadError, SSL.Error)

  Jp

-- 
"Minerals are inexhaustible and will never be depleted. A stream of
investment creates additions to proved reserves, a very large in-ground
inventory, constantly renewed as it is extracted... How much was in the
ground at the start and how much will be left at the end are unknown and
irrelevant."  -- Morry Adelman, World Renowned Economist
-- 
 up 3 days, 0:38, 2 users, load average: 0.18, 0.19, 0.13
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030504/4bc3ce2d/attachment.sig>

From exarkun at intarweb.us  Sun May  4 21:19:28 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Sun, 4 May 2003 23:19:28 -0400
Subject: [Twisted-Python] examples/echoserv_ssl.py, win32
In-Reply-To: <20030505031309.GB13176@meson.dyndns.org>
References: <20030504233258.GA4608@localhost.localdomain> <20030505031309.GB13176@meson.dyndns.org>
Message-ID: <20030505031928.GC13176@meson.dyndns.org>

On Sun, May 04, 2003 at 11:13:09PM -0400, Jp Calderone wrote:
>
> [snip]
>
>     print isinstance(SSL.WantReadError, SSL.Error)

  issubclass(), of course.

>   Jp
> 

-- 
"Minerals are inexhaustible and will never be depleted. A stream of
investment creates additions to proved reserves, a very large in-ground
inventory, constantly renewed as it is extracted... How much was in the
ground at the start and how much will be left at the end are unknown and
irrelevant."  -- Morry Adelman, World Renowned Economist
-- 
 up 3 days, 0:38, 2 users, load average: 0.18, 0.19, 0.13
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030504/da1f88da/attachment.sig>

From radix at twistedmatrix.com  Sun May  4 22:36:52 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 5 May 2003 00:36:52 -0400
Subject: [Twisted-Python] Fw: [pygame] simple pygame using twisted
In-Reply-To: <BAY2-F78zbUKXTU4eR7000112b1@hotmail.com>; from missive@hotmail.com on Mon, May 05, 2003 at 00:34:30 -0400
References: <BAY2-F78zbUKXTU4eR7000112b1@hotmail.com>
Message-ID: <20030505043652.GK590@toshi.anaprd01.md.comcast.net>

Just got this, haven't had a chance to check it out yet.

On 2003.05.05 00:34, Lee Harr wrote:
> Hi;
> 
> I am making pretty good progress with a simple pygame which
> uses twisted for networking (and also for the main event loop).
> 
> It is part of pygsear:
> 
> http://www.nongnu.org/pygsear/
> http://savannah.nongnu.org/projects/pygsear/
> 
> 
> look in the examples/tanks/  directory.
> 
> There are probably better ways to do this (better designs for
> classes that can be passed or referenced remotely) but I just
> wanted to get something working.  :o)
> 
> Feedback welcome.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From m at moshez.org  Mon May  5 06:28:04 2003
From: m at moshez.org (Moshe Zadka)
Date: 5 May 2003 12:28:04 -0000
Subject: [Twisted-Python] fwd: Re: [Python-Dev] Distutils using apply
Message-ID: <20030505122804.10109.qmail@green.zadka.com>

I suggest building modules with
python2.3 -Wall -Wignore::PendingDeprecationWarning:distutils.command.build_py -Wignore::PendingDeprecationWarning:distutils.command.build_ext setup.py build

(I'm very tame -- only ignoring PendingDeprecations of stuff that's been
marked as non-fixable for Python 2.3). When 2.3 is officially released, we
can add a line number (I don't want to do that before 2.3rc1 is out,
so we won't have to constantly jiggle the number)

Thanks,
Moshe

Forwarded message follows:

To: Oren Tirosh <oren-py-d at hishome.net>
From: Guido van Rossum <guido at python.org>
Cc: Moshe Zadka <m at moshez.org>, python-dev at python.org
Subject: Re: [Python-Dev] Distutils using apply

> I was wondering if a milder form of deprecation may be appropriate for
> some features such as the apply builtin:
> 
> 1. Add a notice in docstring 'not recommended for new code'
> 2. Move to 'obsolete' or 'backward compatibility' section in manual
> 3. Do NOT produce a warning (pychecker may still do that)
> 4. Do NOT plan removal of feature in a specific future release

The form of deprecation used for apply() is already very mild (you
don't get a warning unless you do -Wall).  I don't think Moshe's use
case is important enough to care; if Moshe cares, he can easily
construct a command line argument or warnings.filterwarning() call to
suppress the warnings he doesn't care about.

--Guido van Rossum (home page: http://www.python.org/~guido/)

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From mmoellenbeck at plus.de  Mon May  5 08:26:09 2003
From: mmoellenbeck at plus.de (mmoellenbeck at plus.de)
Date: Mon, 5 May 2003 16:26:09 +0200
Subject: [Twisted-Python] (no subject)
Message-ID: <OFA07C1E97.5A60B49E-ONC1256D1D.004EBE6E@uz.tengelmann.de>

Hello,

I'm new to twisted and have some questions:

- Can I use a pb.Copyable as pb.RemoteReference?

I have designed an wx-application and want request the wxframe from the 
server by the client.
Events from the client should call methods of the server.

Any idees?

Thanks for help.

best regards

Martin Moellenbeck 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20030505/bdac1cea/attachment.html>

From jheintz at pobox.com  Mon May  5 12:29:30 2003
From: jheintz at pobox.com (John D. Heintz)
Date: 05 May 2003 13:29:30 -0500
Subject: [Twisted-Python] How would I upload/download files through twisted.web
Message-ID: <1052159370.618.13.camel@shire>

Hi all,

I tried searching the mailing list and google but ended up more
confused. Sorry if this is in the docs and I missed it, just redirect
me.

Question: How do I write a simple twisted.web server to receive an
uploaded file, process it, and return a different file for
download/launch.

The last part does have some examples, but I include it hear for
completeness.

My intuition tells me that this kind of thing is "trivial" in twisted,
but I'm having a hard time unraveling the knot. I started working on a
custom Resource but only got so far.

Can someone post a small python script (like web.py in examples) that
does this?

Thanks for the time,
John

-- 
John D. Heintz | Senior Developer

1016 La Posada Dr. | Suite 240 | Austin TX 78752
T 512.380.0347 | jheintz at isogen.com

http://www.isogen.com
-- 
"I apologize for the length of this letter, but I didn't have time to
make it shorter." Mark Twain





From ecn at metaslash.com  Mon May  5 17:53:08 2003
From: ecn at metaslash.com (Eric C. Newton)
Date: Mon, 5 May 2003 19:53:08 -0400
Subject: [Twisted-Python] examples/echoserv_ssl.py, win32
In-Reply-To: <20030505031928.GC13176@meson.dyndns.org>
References: <20030504233258.GA4608@localhost.localdomain> <20030505031309.GB13176@meson.dyndns.org> <20030505031928.GC13176@meson.dyndns.org>
Message-ID: <20030505235308.GA28027@localhost.localdomain>

> On Sun, May 04, 2003 at 11:13:09PM -0400, Jp Calderone wrote:
> >
> > [snip]
> >
> >     print isinstance(SSL.WantReadError, SSL.Error)
> 
>   issubclass(), of course.
----------------------------------------
It is a subclass:

   >>> print issubclass(SSL.WantReadError, SSL.Error)
   1

I pulled down Twisted from CVS about at 7:00 PM EDT (May 5th).

    twisted/internet/{app,tcp}.py both import StringTypes from
    twisted/python/compat.py, but twisted/python/compat.py does not export
    StringTypes.

And:

    On this same platform (remember: Windows ME) you can't do:

	python setup.py install

    because cBanana won't build.  cBanana won't build because I don't
    that compiler installed. I commented out those sections of the
    setup.
 
After fixing these problems, I was able to get the same stack trace as
before, ending with self.socket.accept() and SSL.WantReadError.

Note that there is a nested try/except with the outermost except
catching _everything_ around self.socket.accept().  I'm afraid I just
don't understand the details of the error reporting to know if this is
a side-effect of that reporting, or if something much stranger is
going on.

All the SSL code works just fine on Linux, of course.

-Eric




From radix at twistedmatrix.com  Mon May  5 18:23:40 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 5 May 2003 20:23:40 -0400
Subject: [Twisted-Python] Missing files from installation of woven part
In-Reply-To: <3EB58941.6090309@adequat.net>; from lstep@adequat.net on Sun, May 04, 2003 at 17:42:25 -0400
References: <3EB58941.6090309@adequat.net>
Message-ID: <20030506002340.GC7754@toshi.anaprd01.md.comcast.net>

On 2003.05.04 17:42, Luc Stepniewski wrote:
> When you do a python setup.py build/install, important files from 
> t.web.woven are missing. The LivePage related files FlashConduit.fla,
> FlashConduit.swf, FlashConduitGlue.html, WebConduit2_mozilla.js, 
> WebConduit2_msie.js and WebConduitGlue.html are not copied, so LivePage 
> does not work at all without them :'-(
> 
> Could anyone modify the installation to include these files in the copy?


Sorry I forgot to reply earlier. This is fixed in CVS and 1.0.5rc2 (which
I'm in the process of uploading to sourceforge now).

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From uwe at oss4u.com  Mon May  5 18:59:19 2003
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Mon, 5 May 2003 17:59:19 -0700
Subject: [Twisted-Python] (no subject)
In-Reply-To: <OFA07C1E97.5A60B49E-ONC1256D1D.004EBE6E@uz.tengelmann.de>
References: <OFA07C1E97.5A60B49E-ONC1256D1D.004EBE6E@uz.tengelmann.de>
Message-ID: <200305051759.19661.uwe@oss4u.com>

On Monday 05 May 2003 07:26 am, mmoellenbeck at plus.de wrote:
> Hello,
>
> I'm new to twisted and have some questions:
>
> - Can I use a pb.Copyable as pb.RemoteReference?
>
> I have designed an wx-application and want request the wxframe from the
> server by the client.
> Events from the client should call methods of the server.

I don't think that's going to work. A wxFrame is basically a stub class to an 
underlying c++ extension. There are already some issues with subclassing 
wxPython classes, not to speak of redistributing them over the network.

What my applications do is to fetch a xrc file (wx xml ressource) from the 
server and instanciate the gui locally on the client. That works quite fine 
and btw decouples the gui from the business logic, which is normally what you 
want in a multi tier application.



	UC

--
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417




From richard at commonground.com.au  Mon May  5 23:26:34 2003
From: richard at commonground.com.au (Richard Jones)
Date: Tue, 6 May 2003 15:26:34 +1000
Subject: [Twisted-Python] stikiwiki promising, but...
Message-ID: <4D6C476F-7F83-11D7-8E7A-000393D560FC@commonground.com.au>

I randomly found stikiwiki (in short: ReST/Twisted/WikiWiki) on the 
web, and thought it'd be extremely useful. Gave it a go, and had to 
immediately patch up some docutils usage quirks (docutils' API is a bit 
of a moving target ;). The results of my work are attached to this 
email. Can't find an email address for the author though, so that's as 
far as that patch goes :)

Problem is that I now run into some problem deep in the Twisted code. 
The traceback is also attached. This is using the latest rc. If I 
should try the CVS, just let me know. Otherwise, is there something 
else that I could do?


     Richard

ps. can't help thinking that Roundup would be nice running behind (or 
is it inside?) Twisted :)
pps. stikiwiki: http://mithrandr.moria.org/code/stikiwiki/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: stikiwiki.py.diff
Type: application/octet-stream
Size: 1337 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030506/1ddb81a2/attachment-0004.obj>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: stikiwiki.py.log
Type: application/octet-stream
Size: 1593 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030506/1ddb81a2/attachment-0005.obj>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 186 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030506/1ddb81a2/attachment.sig>

From dp at twistedmatrix.com  Mon May  5 23:38:14 2003
From: dp at twistedmatrix.com (Donovan Preston)
Date: Mon, 5 May 2003 22:38:14 -0700
Subject: [Twisted-Python] stikiwiki promising, but...
In-Reply-To: <4D6C476F-7F83-11D7-8E7A-000393D560FC@commonground.com.au>
Message-ID: <EEB0341E-7F84-11D7-9BEB-00039376B1AE@twistedmatrix.com>

On Monday, May 5, 2003, at 10:26 PM, Richard Jones wrote:

> I randomly found stikiwiki (in short: ReST/Twisted/WikiWiki) on the 
> web, and thought it'd be extremely useful. Gave it a go, and had to 
> immediately patch up some docutils usage quirks (docutils' API is a 
> bit of a moving target ;). The results of my work are attached to this 
> email. Can't find an email address for the author though, so that's as 
> far as that patch goes :)
>
> Problem is that I now run into some problem deep in the Twisted code. 
> The traceback is also attached. This is using the latest rc. If I 
> should try the CVS, just let me know. Otherwise, is there something 
> else that I could do?

The problem is getData() was deprecated in favor of getData(request). 
Most of the places where getData is called by the internal workings of 
woven used some introspection to discover whether the particular 
getData took the request or not, and gave a warning if not, but it 
looks like I missed this call in Widgets. If you change the "def 
getData(self)" in stikiwiki to "def getData(self, request)" this will 
go away.

Woven's API has been somewhat of a moving target, although it is 
stabilizing now. There is much more Woven documentation included in 
1.0.5rc2, check it out.

Donovan




From richard at commonground.com.au  Mon May  5 23:53:49 2003
From: richard at commonground.com.au (Richard Jones)
Date: Tue, 6 May 2003 15:53:49 +1000
Subject: [Twisted-Python] stikiwiki promising, but...
In-Reply-To: <EEB0341E-7F84-11D7-9BEB-00039376B1AE@twistedmatrix.com>
Message-ID: <1C10BB08-7F87-11D7-8E7A-000393D560FC@commonground.com.au>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Tuesday, May 6, 2003, at 03:38 PM, Donovan Preston wrote:
> The problem is getData() was deprecated in favor of getData(request). 
> Most of the places where getData is called by the internal workings of 
> woven used some introspection to discover whether the particular 
> getData took the request or not, and gave a warning if not, but it 
> looks like I missed this call in Widgets. If you change the "def 
> getData(self)" in stikiwiki to "def getData(self, request)" this will 
> go away.

That did clear up the problem, thanks!


     Richard
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+t03urGisBEHG6TARAmvzAJ9gvqpP2Bwhv5dYwZFlDPnkoktSFwCeIRqQ
vf7ahyRYZy5sCZaVA81NMG8=
=OegH
-----END PGP SIGNATURE-----




From mmoellenbeck at plus.de  Tue May  6 01:28:43 2003
From: mmoellenbeck at plus.de (mmoellenbeck at plus.de)
Date: Tue, 6 May 2003 09:28:43 +0200
Subject: Antwort: Re: [Twisted-Python] (no subject)
Message-ID: <OFB5CB85BB.9045BD63-ONC1256D1E.0027B8C8@uz.tengelmann.de>

Hi,

I have also thought about this way. 

My problem is to open a new dialog on the client by an onClick()-event, 
for example.

Do you have an idea? I would appreciate any examples ;-).

regards

Martin





An:     twisted-python at twistedmatrix.com
Kopie: 
 

Thema:  Re: [Twisted-Python] (no subject)

 
"Uwe C. Schroeder" <uwe at oss4u.com>
Gesendet von:
twisted-python-admin at twistedmatrix.com
06.05.2003 02:59
Bitte antworten an twisted-python






On Monday 05 May 2003 07:26 am, mmoellenbeck at plus.de wrote:
> Hello,
>
> I'm new to twisted and have some questions:
>
> - Can I use a pb.Copyable as pb.RemoteReference?
>
> I have designed an wx-application and want request the wxframe from the
> server by the client.
> Events from the client should call methods of the server.

I don't think that's going to work. A wxFrame is basically a stub class to 
an 
underlying c++ extension. There are already some issues with subclassing 
wxPython classes, not to speak of redistributing them over the network.

What my applications do is to fetch a xrc file (wx xml ressource) from the 

server and instanciate the gui locally on the client. That works quite 
fine 
and btw decouples the gui from the business logic, which is normally what 
you 
want in a multi tier application.



                 UC

--
Open Source Solutions 4U, LLC            2570 Fleetwood Drive
Phone:  +1 650 872 2425                          San Bruno, CA 94066
Cell:   +1 650 302 2405                          United States
Fax:    +1 650 872 2417


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20030506/56c8e73d/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: image/gif
Size: 47 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030506/56c8e73d/attachment-0002.gif>

From lafou at wanadoo.fr  Tue May  6 02:52:14 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: 06 May 2003 10:52:14 +0200
Subject: Antwort: Re: [Twisted-Python] (no subject)
In-Reply-To: <OFB5CB85BB.9045BD63-ONC1256D1E.0027B8C8@uz.tengelmann.de>
References: <OFB5CB85BB.9045BD63-ONC1256D1E.0027B8C8@uz.tengelmann.de>
Message-ID: <1052211134.8062.33.camel@biproc>

> What my applications do is to fetch a xrc file (wx xml ressource) from
> the 
> server and instanciate the gui locally on the client. That works quite
> fine 
> and btw decouples the gui from the business logic, which is normally
> what you 
> want in a multi tier application.


Any documentation on that ? I have the same problems...




From m at moshez.org  Tue May  6 04:10:55 2003
From: m at moshez.org (Moshe Zadka)
Date: 6 May 2003 10:10:55 -0000
Subject: [Twisted-Python] Blocking
Message-ID: <20030506101055.13410.qmail@green.zadka.com>

In short command-line scripts, it's often much easier to block, especially
if the script doesn't need to do any serving. However, Twisted's API is
always non-blocking, returning deferreds. Here's a short function that
allowes more natural usage from scripts:


def makeBlocking(d):
    succ, fail = [], []
    d.addCallback(succ.append)
    d.addErrback(fail.append)
    d.addBoth(lambda _: reactor.stop())
    reactor.run()
    if succ:
        return succ[0]
    else:
        raise fail[0].value

Here's a short usage example:

>>> from twisted.internet import defer, reactor
>>> def callIn10():
...     d = defer.Deferred()
...     reactor.callLater(10, d.callback, "hello world")
...     return d
...
>>> import time
>>> print time.time();print makeBlocking(callIn10());print time.time()
1052215780.7
hello world
1052215790.71

This is especially useful in scripts which want to do pb calls, as currently
there is no way to do pb calls in a synchronous manner.

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From scott_list at mischko.com  Tue May  6 08:49:59 2003
From: scott_list at mischko.com (Scott Chapman)
Date: Tue, 6 May 2003 07:49:59 -0700
Subject: [Twisted-Python] stikiwiki promising, but...
In-Reply-To: <EEB0341E-7F84-11D7-9BEB-00039376B1AE@twistedmatrix.com>
References: <EEB0341E-7F84-11D7-9BEB-00039376B1AE@twistedmatrix.com>
Message-ID: <200305060749.59917.scott_list@mischko.com>

On Monday 05 May 2003 22:38, Donovan Preston wrote:
> On Monday, May 5, 2003, at 10:26 PM, Richard Jones wrote:
> > I randomly found stikiwiki (in short: ReST/Twisted/WikiWiki) on the
> > web, and thought it'd be extremely useful. Gave it a go, and had to
> > immediately patch up some docutils usage quirks (docutils' API is a
> > bit of a moving target ;). The results of my work are attached to this
> > email. Can't find an email address for the author though, so that's as
> > far as that patch goes :)
> >
> > Problem is that I now run into some problem deep in the Twisted code.
> > The traceback is also attached. This is using the latest rc. If I
> > should try the CVS, just let me know. Otherwise, is there something
> > else that I could do?
>
> The problem is getData() was deprecated in favor of getData(request).
> Most of the places where getData is called by the internal workings of
> woven used some introspection to discover whether the particular
> getData took the request or not, and gave a warning if not, but it
> looks like I missed this call in Widgets. If you change the "def
> getData(self)" in stikiwiki to "def getData(self, request)" this will
> go away.
>
> Woven's API has been somewhat of a moving target, although it is
> stabilizing now. There is much more Woven documentation included in
> 1.0.5rc2, check it out.
>
> Donovan

I installed StikiWiki and applied the diffs from Richard Jones.  Then I 
installed docutils, bsddb3, and Twisted 1.0.5rc2.  I also changed the getData 
as above.  Now when I run it and try to load the wiki I get a traceback 
below.

What am I missing here?

Scott

Traceback (most recent call last):
  File "/usr/lib/python2.2/site-packages/twisted/protocols/basic.py", line 
173, in dataReceived
    self.lineReceived(line)
  File "/usr/lib/python2.2/site-packages/twisted/protocols/http.py", line 900, 
in lineReceived
    self.allContentReceived()
  File "/usr/lib/python2.2/site-packages/twisted/protocols/http.py", line 932, 
in allContentReceived
    req.requestReceived(command, path, version)
  File "/usr/lib/python2.2/site-packages/twisted/protocols/http.py", line 504, 
in requestReceived
    self.process()
--- <exception caught here> ---
  File "/usr/lib/python2.2/site-packages/twisted/web/server.py", line 156, in 
process
    self.render(resrc)
  File "/usr/lib/python2.2/site-packages/twisted/web/server.py", line 162, in 
render
    body = resrc.render(self)
  File "stikiwiki.py", line 295, in render
    pub.get_settings()
exceptions.AttributeError: Publisher instance has no attribute 'get_settings'





From m at moshez.org  Tue May  6 12:14:43 2003
From: m at moshez.org (Moshe Zadka)
Date: 6 May 2003 18:14:43 -0000
Subject: [Twisted-Python] Signal Alternatives
Message-ID: <20030506181443.32163.qmail@green.zadka.com>

Reference: http://moshez.org/curled.tgz

So, I'm working on curled.killer, which may find its way back into
Twisted at some point. The point is to have an API which resembles
signals for command line users, and yet is flexible and reliable.

On the server side, it should be no harder than

killer.register(application, "signal-name", handlerFunction)

On the client side, it should be no harder than

% pbkill application.pbkill signal-name [optional arguments]

Except for pbkill currently being spelled
"python -c 'from curled.killer import killMain;killMain()', this
is all working. Glyph mentioned he still has some comments,
so I'm not checking this in yet, but I urge anyone who wants
stuff classically triggered with signals on UNIX (such as termination,
or configuration reloading) to try this out and submit feedback.

PS
This is UNIX only, as it uses UNIX domain sockets. It is too hard,
and not interesting for me, to do it in Windows (maybe through
TCP loopback sockets? )

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From mike.thompson at day8.com.au  Tue May  6 04:22:33 2003
From: mike.thompson at day8.com.au (Mike Thompson)
Date: Tue, 6 May 2003 20:22:33 +1000
Subject: [Twisted-Python] Re: Antwort: Re: (no subject)
References: <OFB5CB85BB.9045BD63-ONC1256D1E.0027B8C8@uz.tengelmann.de> <1052211134.8062.33.camel@biproc>
Message-ID: <b982ar$1iu$1@main.gmane.org>

"Philippe Lafoucri�re" <lafou at wanadoo.fr> wrote in message
news:1052211134.8062.33.camel at biproc...
> > What my applications do is to fetch a xrc file (wx xml ressource) from
> > the
> > server and instanciate the gui locally on the client. That works quite
> > fine
> > and btw decouples the gui from the business logic, which is normally
> > what you
> > want in a multi tier application.
>
>
> Any documentation on that ? I have the same problems...

Perhaps Martin will have documentation links but in the meantime I recently
noticed an open source project (backed by Mitch Kapor) which makes extensive
use of xrc/python to create a plugin architecture:
     http://www.osafoundation.org/

The product is Chandler -- a PIM.  It's source code might give some pointers.

--
Mike









From justinjohnson at fastmail.fm  Tue May  6 14:08:48 2003
From: justinjohnson at fastmail.fm (Justin Johnson)
Date: Tue, 06 May 2003 14:08:48 -0600
Subject: [Twisted-Python] Server to accept requests to run cmdline scripts
Message-ID: <20030506200848.2B5623400E@www.fastmail.fm>

Hello,

I'm new to Twisted and am considering using it to setup servers that will
accept requests from clients which will result in scripts running on the
server to do some busy work while sending the script output back to the
client.  Does Twisted provide something like this, or the ability to
create something like this?

Thanks much.
-Justin



From uwe at oss4u.com  Tue May  6 14:30:47 2003
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Tue, 6 May 2003 13:30:47 -0700
Subject: [Twisted-Python] pb size limitation
Message-ID: <200305061330.47899.uwe@oss4u.com>

Hi,

I want to transfer large chunks of data via pb xmlrpc.
Theoretically that works, however I noticed that banana has a size limitation 
of 640k - which is not enough in my case.
The limit seems hardcoded, so there is no way to set it higher without 
recompiling the whole thing for all platforms in question.
Anyone got a better idea to transfer large files ?
I guess ftp would be nice, however that requires firewallsettings.
Does the same limitation exist thruout Twisted ?

Anyone got some sample code ? The examples etc. don't really implement 
anything that transfers large files.

Thanks

	UC

--
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417




From 2002 at weholt.org  Tue May  6 14:36:58 2003
From: 2002 at weholt.org (Thomas Weholt)
Date: Tue, 6 May 2003 22:36:58 +0200
Subject: [Twisted-Python] http and ftp in the same tap-file???
Message-ID: <002801c3140f$3dcb6270$0401a8c0@razor>

How can I create a web-server serving content by RPYs and in the same tap-file have a simple FTP-server with authentication??? Any examples on how to do this?

Thomas
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20030506/dca888a3/attachment.html>

From uwe at oss4u.com  Tue May  6 14:40:37 2003
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Tue, 6 May 2003 13:40:37 -0700
Subject: [Twisted-Python] Re: Antwort: Re: (no subject)
In-Reply-To: <b982ar$1iu$1@main.gmane.org>
References: <OFB5CB85BB.9045BD63-ONC1256D1E.0027B8C8@uz.tengelmann.de> <1052211134.8062.33.camel@biproc> <b982ar$1iu$1@main.gmane.org>
Message-ID: <200305061340.37296.uwe@oss4u.com>

I'm just trying to extract the relevant code out of my project.
I think the problem is less to use xrc, but more how to make the thing 
interact with Twisted.
To detail what I'm doing:

I create a twisted server listening on two ports. One is the main application 
port handled with auth via pb
The other is a pure "update" port, handled with a normal pb.root object.
My application first connects to the "updater" and checks for updates. If any, 
the files get downloaded and stored. AFTER that I start creating the gui, so 
if the .xrc file changed it will be reflected.
This has two major flaws: 
1) there is a size limitation in twisted for 640k max transfer size.
2) you need to use at least 2 xrc files, one containing the main frame and one 
for the rest. This is because you can't have a wxApp running properly without 
a wxFrame instance - which is created from the first xrc file.
You could install upgrades before even creating an wxApp object, but assuming 
you have a large update with a lot of files the user doesn't see anything 
happening, so probably he starts the application a second time.
What I'll intend to do about that is to restart the application whenever the 
mainframe xrc get's updated. Maybe I'll do this in a wrapper (shell or so) 
catching the exit value of the application.
 
UC

On Tuesday 06 May 2003 03:22 am, Mike Thompson wrote:
> "Philippe Lafoucrière" <lafou at wanadoo.fr> wrote in message
> news:1052211134.8062.33.camel at biproc...
>
> > > What my applications do is to fetch a xrc file (wx xml ressource) from
> > > the
> > > server and instanciate the gui locally on the client. That works quite
> > > fine
> > > and btw decouples the gui from the business logic, which is normally
> > > what you
> > > want in a multi tier application.
> >
> > Any documentation on that ? I have the same problems...
>
> Perhaps Martin will have documentation links but in the meantime I recently
> noticed an open source project (backed by Mitch Kapor) which makes
> extensive use of xrc/python to create a plugin architecture:
>      http://www.osafoundation.org/
>
> The product is Chandler -- a PIM.  It's source code might give some
> pointers.
>
> --
> Mike
>
>
>
>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-- 
	UC

--
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417




From radix at twistedmatrix.com  Tue May  6 14:39:51 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 6 May 2003 16:39:51 -0400
Subject: [Twisted-Python] pb size limitation
In-Reply-To: <200305061330.47899.uwe@oss4u.com>; from uwe@oss4u.com on Tue, May 06, 2003 at 16:30:47 -0400
References: <200305061330.47899.uwe@oss4u.com>
Message-ID: <20030506203951.GS7754@toshi.anaprd01.md.comcast.net>

On 2003.05.06 16:30, Uwe C. Schroeder wrote:
> 
> Hi,
> 
> I want to transfer large chunks of data via pb xmlrpc.
> Theoretically that works, however I noticed that banana has a size limitation 
> of 640k - which is not enough in my case.
> The limit seems hardcoded, so there is no way to set it higher without 
> recompiling the whole thing for all platforms in question.
> Anyone got a better idea to transfer large files ?
> I guess ftp would be nice, however that requires firewallsettings.
> Does the same limitation exist thruout Twisted ?

HTTP is probably the best for doing file transfers. If you do want to
transfer files with PB, use twisted.spread.util.Pager. See StringPager
for an example. It's trivial to convert this to a FilePager.

If you really do want to change the size limit for banana, you can do it
per-process (patches to properly parameterize this accepted) by changing
banana.SIZE_LIMIT.


-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From Martin.Moellenbeck at t-online.de  Tue May  6 14:52:35 2003
From: Martin.Moellenbeck at t-online.de (=?iso-8859-1?Q?Martin_M=F6llenbeck?=)
Date: Tue, 6 May 2003 22:52:35 +0200
Subject: AW: [Twisted-Python] pb size limitation
In-Reply-To: <200305061330.47899.uwe@oss4u.com>
Message-ID: <!~!UENERkVCMDkAAQACAAAAAAAAAAAAAAAAABgAAAAAAAAARFFe7Wq86Uqt5quoDxSVd8KAAAAQAAAAnOIp60lnPUaqIT7I09pZwwEAAAAA@t-online.de>

Hi,

I have not real answer, but you may have a look at
http://www.twistedmatrix.com/documents/TwistedDocs/current/api/public/tw
isted.spread.util.StringPager.htm

regards
	Martin

-----Ursprüngliche Nachricht-----
Von: twisted-python-admin at twistedmatrix.com
[mailto:twisted-python-admin at twistedmatrix.com] Im Auftrag von Uwe C.
Schroeder
Gesendet: Dienstag, 6. Mai 2003 22:31
An: twisted-python at twistedmatrix.com
Betreff: [Twisted-Python] pb size limitation



Hi,

I want to transfer large chunks of data via pb xmlrpc.
Theoretically that works, however I noticed that banana has a size
limitation 
of 640k - which is not enough in my case.
The limit seems hardcoded, so there is no way to set it higher without 
recompiling the whole thing for all platforms in question.
Anyone got a better idea to transfer large files ?
I guess ftp would be nice, however that requires firewallsettings.
Does the same limitation exist thruout Twisted ?

Anyone got some sample code ? The examples etc. don't really implement 
anything that transfers large files.

Thanks

	UC

--
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From itamar at itamarst.org  Tue May  6 15:11:39 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 6 May 2003 17:11:39 -0400
Subject: [Twisted-Python] Server to accept requests to run cmdline
 scripts
In-Reply-To: <20030506200848.2B5623400E@www.fastmail.fm>
References: <20030506200848.2B5623400E@www.fastmail.fm>
Message-ID: <20030506171139.4c21bfd2.itamar@itamarst.org>

On Tue, 06 May 2003 14:08:48 -0600
"Justin Johnson" <justinjohnson at fastmail.fm> wrote:

> I'm new to Twisted and am considering using it to setup servers that
> will accept requests from clients which will result in scripts running
> on the server to do some busy work while sending the script output
> back to the client.  Does Twisted provide something like this, or the
> ability to create something like this?

twisted.runner.inetd is similar.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From andrew-twisted at puzzling.org  Tue May  6 19:57:07 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 7 May 2003 11:57:07 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] Add makeblocking (and a test woo)
In-Reply-To: <E19D5JX-0006ph-00@pyramid.twistedmatrix.com>
References: <E19D5JX-0006ph-00@pyramid.twistedmatrix.com>
Message-ID: <20030507015707.GB18456@frobozz.local>

On Tue, May 06, 2003 at 11:29:11AM -0500, moshez CVS wrote:
> Modified files:
> Twisted/twisted/test/test_defer.py 1.22 1.23
> Twisted/twisted/internet/defer.py 1.36 1.37
> 
> Log message:
> Add makeblocking (and a test woo)

Perhaps "waitForDeferred" would be a better name for this?

-Andrew.




From glyph at twistedmatrix.com  Tue May  6 23:19:49 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 7 May 2003 00:19:49 -0500
Subject: [Twisted-Python] pb size limitation
In-Reply-To: <20030506203951.GS7754@toshi.anaprd01.md.comcast.net>
Message-ID: <8682BA80-804B-11D7-912C-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Tuesday, May 6, 2003, at 03:39 PM, Christopher Armstrong wrote:

> If you really do want to change the size limit for banana, you can do 
> it
> per-process (patches to properly parameterize this accepted) by 
> changing
> banana.SIZE_LIMIT.

You don't.  It will destroy interoperability with unmodified 
installations - think of this as a protocol-defined limit :)
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+uJd5vVGR4uSOE2wRAksQAJ0YKglJLKHoy/h8aUEraYm2WYhk/QCfWGhN
fiYb9nMtIUgVssdEhM7NLLw=
=oT0s
-----END PGP SIGNATURE-----




From glyph at twistedmatrix.com  Tue May  6 23:22:32 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 7 May 2003 00:22:32 -0500
Subject: [Twisted-Python] Re: [Twisted-commits] Add makeblocking (and a test woo)
In-Reply-To: <20030507015707.GB18456@frobozz.local>
Message-ID: <E79CB0F8-804B-11D7-912C-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Tuesday, May 6, 2003, at 08:57 PM, Andrew Bennetts wrote:

> Perhaps "waitForDeferred" would be a better name for this?

I was thinking Deferred.block(), since it would be most often used like:

	w.x.y().block().z()

This would probably be _super_ useful with Stackless, if we had more 
support for it.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+uJgcvVGR4uSOE2wRAkwVAKCLhrT+mFXDf+CWcNBhibx/RQ0TEgCdHqRN
lnZDpMfvLxW8rZRkr7xB/OU=
=ZMHC
-----END PGP SIGNATURE-----




From uwe at oss4u.com  Wed May  7 00:25:44 2003
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Tue, 6 May 2003 23:25:44 -0700
Subject: [Twisted-Python] pb size limitation
In-Reply-To: <8682BA80-804B-11D7-912C-000393C9700E@twistedmatrix.com>
References: <8682BA80-804B-11D7-912C-000393C9700E@twistedmatrix.com>
Message-ID: <200305062325.44829.uwe@oss4u.com>

On Tuesday 06 May 2003 10:19 pm, Glyph Lefkowitz wrote:
> On Tuesday, May 6, 2003, at 03:39 PM, Christopher Armstrong wrote:
> > If you really do want to change the size limit for banana, you can do
> > it
> > per-process (patches to properly parameterize this accepted) by
> > changing
> > banana.SIZE_LIMIT.
>
> You don't.  It will destroy interoperability with unmodified
> installations - think of this as a protocol-defined limit :)

Right. But it doesn't have to. If you parametrize it and make it detectable 
(say a member function that can be asked for the size limit), you could 
create code that would make it possible to have the server check for the 
client limits.
But basically you're right at least from a deployment point of view. If you 
change the limit you at least have to take care of unchanged versions - which 
is a hassle specially in a large deployment.
I think I'll go with paging.


	UC

--
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417




From itamar at itamarst.org  Wed May  7 08:36:29 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 7 May 2003 10:36:29 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] Add makeblocking (and a
 test woo)
In-Reply-To: <E79CB0F8-804B-11D7-912C-000393C9700E@twistedmatrix.com>
References: <20030507015707.GB18456@frobozz.local>
	<E79CB0F8-804B-11D7-912C-000393C9700E@twistedmatrix.com>
Message-ID: <20030507103629.4a46446c.itamar@itamarst.org>

On Wed, 7 May 2003 00:22:32 -0500
Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> I was thinking Deferred.block(), since it would be most often used
> like:
> 
> 	w.x.y().block().z()
> 
> This would probably be _super_ useful with Stackless, if we had more 
> support for it.

Except, doesn't the code use reactor.stop()? Also you'd need different
ways of blocking for stackless and threads.


-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From bob at redivi.com  Wed May  7 08:54:28 2003
From: bob at redivi.com (Bob Ippolito)
Date: Wed, 7 May 2003 10:54:28 -0400
Subject: [Twisted-Python] pb size limitation
In-Reply-To: <20030506203951.GS7754@toshi.anaprd01.md.comcast.net>
Message-ID: <CD708032-809B-11D7-A0CA-000A95686CD8@redivi.com>

On Tuesday, May 6, 2003, at 16:39 America/New_York, Christopher 
Armstrong wrote:
> If you really do want to change the size limit for banana, you can do 
> it
> per-process (patches to properly parameterize this accepted) by 
> changing
> banana.SIZE_LIMIT.

Just curious, but is this settable with cBanana?

-bob




From bob at redivi.com  Wed May  7 08:57:02 2003
From: bob at redivi.com (Bob Ippolito)
Date: Wed, 7 May 2003 10:57:02 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] Add makeblocking (and a test woo)
In-Reply-To: <E79CB0F8-804B-11D7-912C-000393C9700E@twistedmatrix.com>
Message-ID: <290F7DDA-809C-11D7-A0CA-000A95686CD8@redivi.com>

On Wednesday, May 7, 2003, at 01:22 America/New_York, Glyph Lefkowitz 
wrote:

> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
>
> On Tuesday, May 6, 2003, at 08:57 PM, Andrew Bennetts wrote:
>
>> Perhaps "waitForDeferred" would be a better name for this?
>
> I was thinking Deferred.block(), since it would be most often used 
> like:
>
> 	w.x.y().block().z()
>
> This would probably be _super_ useful with Stackless, if we had more 
> support for it.

Yeah, without stackless, I don't think this is possible unless we put a 
macro preprocessor into python.. since you can't putz around with frame 
objects from pure Python.

Until then, you can get around with the likes of the 
generator/deferredwrapper crutch..

-bob




From miathan at goliath.darktech.org  Wed May  7 09:38:28 2003
From: miathan at goliath.darktech.org (W.J.)
Date: Wed, 7 May 2003 17:38:28 +0200 (CEST)
Subject: [Twisted-Python] twisted.internet.app.unlisten* Broken (patch)
Message-ID: <Pine.LNX.4.44.0305071727450.24920-200000@zolder>

Hi,

For my project, I needed to be able to bind and unbind listeners on the
fly - twisted API has this functionality, but it is inconsistent in its
implementation. My patch fixes this, so the following works:

[[ On a twisted server with only manhole running ]]
----
$ telnet localhost 8007
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.

twisted.manhole.telnet.ShellFactory
Twisted 1.0.4
username: boss
password: *****
>>> from twisted.internet.app import Application
>>> from twisted.internet.protocol import Factory
>>> from twisted.protocols.wire import QOTD
>>> # add QOTD server
>>> f = Factory()
>>> f.protocol = QOTD
>>> app.listenTCP(8123, f)
>>> # system now listening on port 8123 (worked already)
>>> app.unlistenTCP(8123, f)
>>> # system no longer listening on port 8123 (used to be broken! patch
fixes this)

In addition to the TCP case, it also fixes UDP(tested) and SSL(untested).
It does this by changing the format of _listenerDict to tuples
(type, param1, param2, ...) where type is 'UDP', 'TCP', 'UNIX' or 'SSL'.

This should _not_ affect persistence, because _listenerDict is internal.

Wladimir

-------------- next part --------------
--- /usr/src/Twisted-1.0.4/twisted/internet/app.py	2003-04-14 19:39:21.000000000 +0200
+++ /file/zope/lib/python2.1/site-packages/twisted/internet/app.py	2003-05-07 17:10:36.000000000 +0200
@@ -538,7 +538,9 @@
         self.tcpPorts.append((port, factory, backlog, interface))
         if self.running:
             from twisted.internet import reactor
-            return reactor.listenTCP(port, factory, backlog, interface)
+            listener = reactor.listenTCP(port, factory, backlog, interface)
+            self._listenerDict[("TCP", port, interface)] = listener
+            return listener
 
     def unlistenTCP(self, port, interface=''):
         """
@@ -552,8 +554,8 @@
         if toRemove:
             for t in toRemove:
                 self.tcpPorts.remove(t)
-            if self._listenerDict.has_key((port, interface)):
-                self._listenerDict[(port, interface)].stopListening()
+            if self._listenerDict.has_key(("TCP", port, interface)):
+                self._listenerDict[("TCP", port, interface)].stopListening()
         else:
             raise error.NotListeningError, (interface, port)
 
@@ -564,7 +566,9 @@
         self.unixPorts.append((filename, factory, backlog, mode))
         if self.running:
             from twisted.internet import reactor
-            return reactor.listenUNIX(filename, factory, backlog, mode)
+            listener = reactor.listenUNIX(filename, factory, backlog, mode)
+            self._listenerDict["UNIX", filename] = listener
+            return listener
 
     def unlistenUNIX(self, filename):
         """
@@ -578,8 +582,8 @@
         if toRemove:
             for t in toRemove:
                 self.unixPorts.remove(t)
-            if self._listenerDict.has_key(filename):
-                self._listenerDict[filename].stopListening()
+            if self._listenerDict.has_key(("UNIX", filename)):
+                self._listenerDict["UNIX", filename].stopListening()
         else:
             raise error.NotListeningError, filename
 
@@ -590,7 +594,9 @@
         self.udpPorts.append((port, proto, interface, maxPacketSize))
         if self.running:
             from twisted.internet import reactor
-            return reactor.listenUDP(port, proto, interface, maxPacketSize)
+            listener = reactor.listenUDP(port, proto, interface, maxPacketSize)
+            self._listenerDict[("UDP", port, interface)] = listener
+            return listener
 
     def unlistenUDP(self, port, interface=''):
         """
@@ -605,6 +611,8 @@
         if toRemove:
             for t in toRemove:
                 self.udpPorts.remove(t)
+            if self._listenerDict.has_key(("UDP", port, interface)):
+                self._listenerDict[("UDP", port, interface)].stopListening()
         else:
             raise error.NotListeningError, (interface, port)
 
@@ -617,7 +625,9 @@
         self.sslPorts.append((port, factory, ctxFactory, backlog, interface))
         if self.running:
             from twisted.internet import reactor
-            return reactor.listenSSL(port, factory, ctxFactory, backlog, interface)
+            listener = reactor.listenSSL(port, factory, ctxFactory, backlog, interface)
+            self._listenerDict[("SSL", port, interface)] = listener
+            return listener
 
     def unlistenSSL(self, port, interface=''):
         """
@@ -631,6 +641,8 @@
         if toRemove:
             for t in toRemove:
                 self.sslPorts.remove(t)
+                if self._listenerDict.has_key(("SSL", port, interface)):
+                    self._listenerDict[("SSL", port, interface)].stopListening()
         else:
             raise error.NotListeningError, (interface, port)
 
@@ -804,25 +816,25 @@
 
             for filename, factory, backlog, mode in self.unixPorts:
                 try:
-                    self._listenerDict[filename] = reactor.listenUNIX(filename, factory, backlog, mode)
+                    self._listenerDict["UNIX", filename] = reactor.listenUNIX(filename, factory, backlog, mode)
                 except error.CannotListenError, msg:
                     log.msg('error on UNIX socket %s: %s' % (filename, msg))
                     return
             for port, factory, backlog, interface in self.tcpPorts:
                 try:
-                    self._listenerDict[port, interface] = reactor.listenTCP(port, factory, backlog, interface)
+                    self._listenerDict["TCP", port, interface] = reactor.listenTCP(port, factory, backlog, interface)
                 except error.CannotListenError, msg:
                     log.msg('error on TCP port %s: %s' % (port, msg))
                     return
             for port, factory, interface, maxPacketSize in self.udpPorts:
                 try:
-                    reactor.listenUDP(port, factory, interface, maxPacketSize)
+                    self._listenerDict["UDP", port, interface] = reactor.listenUDP(port, factory, interface, maxPacketSize)
                 except error.CannotListenError, msg:
                     log.msg('error on UDP port %s: %s' % (port, msg))
                     return
             for port, factory, ctxFactory, backlog, interface in self.sslPorts:
                 try:
-                    reactor.listenSSL(port, factory, ctxFactory, backlog, interface)
+                    self._listenerDict["SSL", port, interface] = reactor.listenSSL(port, factory, ctxFactory, backlog, interface)
                 except error.CannotListenError, msg:
                     log.msg('error on SSL port %s: %s' % (port, msg))
                     return

From andrew-pythonlist at puzzling.org  Wed May  7 08:31:40 2003
From: andrew-pythonlist at puzzling.org (Andrew Bennetts)
Date: Thu, 8 May 2003 00:31:40 +1000
Subject: [Twisted-Python] [Andrei.Doicin@cern.ch: timing out an ssh command]
Message-ID: <20030507143140.GA19492@frobozz.local>

How is easy is it to script conch?  It'd be nice if it was the solution to
this guy's problem :)

-Andrew.

----- Forwarded message excerpt from Andrei Doicin <Andrei.Doicin at cern.ch> -----

From: Andrei Doicin <Andrei.Doicin at cern.ch>
Newsgroups: comp.lang.python
Subject: timing out an ssh command
Organization: CERN
Xref: news.baymountain.com comp.lang.python:221802
To: python-list at python.org
Date: Wed, 7 May 2003 15:44:30 +0200

Dear fellow Pythonheads,

I have written a fairly nifty but "just beyond amateur" =) wrapper script in
python for sending ssh commands to remote hosts from the unix command line,
but would now like the ssh command to time out after a certain amount of
time (eventually to be specified as an option to the wrapper).

What would you advise is the best way to do this, out of the following
avenues to consider ?

- somehow making use of time.time or time.clock and/or select(x,x,x,timeout)
- sockets (i.e. making use of something like
http://www.timo-tasi.org/python/timeoutsocket.py by Timothy Malley)
- expect
- pexpect

?

A situation in which the ssh command hangs forever can be indicated as
follows, using the verbose option (whether necessary or not) of ssh to
illustrate what's going on at the fundamental level:

[client0-15:26:01] 130:adoicin/scripts> ssh -v target1 uptime
OpenSSH_3.4p1-CERN20020919, SSH protocols 1.5/2.0, OpenSSL 0x0090602f
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: Applying options for *
debug1: Rhosts Authentication disabled, originating port will not be
trusted.
debug1: ssh_connect: needpriv 0
debug1: Connecting to target1 [xxx.xxx.xxx.xxx] port 22.
debug1: Connection established.
debug1: identity file /home/adoicin/.ssh/identity type -1
debug1: identity file /home/adoicin/.ssh/id_rsa type -1
debug1: identity file /home/adoicin/.ssh/id_dsa type -1
... waits forever ...

the above example literally hangs forever unless you intervene with CTRL-C

----- snipped -----
----- End forwarded message excerpt -----




From z3p at twistedmatrix.com  Wed May  7 16:16:54 2003
From: z3p at twistedmatrix.com (Paul Swartz)
Date: Wed, 07 May 2003 18:16:54 -0400
Subject: [Twisted-Python] [Andrei.Doicin@cern.ch: timing out an ssh command]
In-Reply-To: <20030507143140.GA19492@frobozz.local>
Message-ID: <3EB94D96.16996.1D1F547@localhost>

On 8 May 2003 at 0:31, Andrew Bennetts wrote:

> How is easy is it to script conch?  It'd be nice if it was the solution to
> this guy's problem :)

Pretty easy, and stuff like reactor.callLater makes timeouts easy.  I'll 
reply to him and hopefully get more information on what he really wants 
to do. :)

-p
-- 
     Paul Swartz
(o_  http://twistedmatrix.com/users/z3p.twistd/
//\  z3p at twistedmatrix.com
V_/_ AIM: Z3Penguin




From stuart.hungerford at anu.edu.au  Wed May  7 23:41:51 2003
From: stuart.hungerford at anu.edu.au (Stuart Hungerford)
Date: Thu, 08 May 2003 15:41:51 +1000
Subject: [Twisted-Python] Twisted experiences on Solaris?
Message-ID: <5.2.0.9.0.20030508153609.023b2c18@anusf.anu.edu.au>

Hi all,

I've recently installed Twisted 1.0.4 on Solaris (where
"uname -a" reports: SunOS store 5.8 Generic_108528-16 sun4u
sparc SUNW,Ultra-Enterprise).

When I run the tests in admin/runtests I'm getting a few
more errors than I think I should be.  I'm also having
problems running some of the example code in the
"Configuring and Using the Twisted.Web Server" document.

All this is with Python 2.2.2.

Can any Solaris users of Twisted share their installation
tips or experiences with me?
Cheers,

Stu

--
:: Stuart Hungerford (stuart.hungerford at anu.edu.au)
:: ANU Internet Futures Group




From wari at home.wari.org  Thu May  8 00:48:44 2003
From: wari at home.wari.org (Wari Wahab)
Date: Thu, 08 May 2003 14:48:44 +0800
Subject: [Twisted-Python] Newbie to Twisted: Bug in http.py?
Message-ID: <3EB9FDCC.9080202@home.wari.org>

I was playing around with twisted.web today (1.0.4), and tried to make a 
manual HTTP connection using telnet. Naturally I forgot to type in the 
"HOST: hostname" during the request, and got a nice traceback from it. 
Here are the details:

./pyblosxom.py, line 50 in render
50    serverName = string.split(request.getRequestHostname(), ':')[0]
---
/usr/lib/python2.2/site-packages/twisted/protocols/http.py, line 756 in 
getRequestHostname
756    return (self.getHeader('host') or 
socket.gethostbyaddr(self.getHost()[1])).split(':')[0]
exceptions.AttributeError: 'tuple' object has no attribute 'split'

Is this a bug or I really have to use the HOST header (HTTP/1.0 does not 
have the HOST header, or is not necessary, I think). Looking at http.py, 
self.getHost() is just returning self.host, and self.host can either be:
self.host = (method, host, port)
or
self.host = self.channel.transport.getHost()

I'm pretty much a newbie in twisted (just toyed around with it since 
yesterday) and I was trying to make pyblosxom to be a twisted web server 
(don't you like how that sounds). I almost got it to work the way I want 
except that I cannot get the standard python cgi module to work (to get 
requests like ?foo=bar).

Forgive me if this is not a bug though :)




From jml at ids.org.au  Thu May  8 01:47:10 2003
From: jml at ids.org.au (Jonathan Lange)
Date: Thu, 8 May 2003 17:47:10 +1000
Subject: [Twisted-Python] Blocking
In-Reply-To: <20030506101055.13410.qmail@green.zadka.com>; from m@moshez.org on Tue, May 06, 2003 at 20:10:55 +1000
References: <20030506101055.13410.qmail@green.zadka.com>
Message-ID: <20030508074710.GG546@sting>

On 2003.05.06 20:10, Moshe Zadka wrote:
> In short command-line scripts, it's often much easier to block,
> especially
> if the script doesn't need to do any serving. However, Twisted's API
> is
> always non-blocking, returning deferreds. Here's a short function that
> allowes more natural usage from scripts:
> 

This is also useful in unit testing. To that end, the functions 
deferredResult and deferredFailure have been available in trial for 
some time. They currently live in twisted.trial.util.

Further reading of the mailing list indicates that something should 
probably be done about this.

jml



From jml at ids.org.au  Thu May  8 01:39:02 2003
From: jml at ids.org.au (Jonathan Lange)
Date: Thu, 8 May 2003 17:39:02 +1000
Subject: [Twisted-Python] Blocking
In-Reply-To: <20030506101055.13410.qmail@green.zadka.com>; from m@moshez.org on Tue, May 06, 2003 at 20:10:55 +1000
References: <20030506101055.13410.qmail@green.zadka.com>
Message-ID: <20030508073902.GA546@sting>

On 2003.05.06 20:10, Moshe Zadka wrote:
> In short command-line scripts, it's often much easier to block,
> especially if the script doesn't need to do any serving. def 
> makeBlocking(d):

There are similar functions in twisted.trial.util (deferredResult, 
deferredFailure). Blocking tests are much easier to write.

jml



From theller at python.net  Thu May  8 02:10:58 2003
From: theller at python.net (Thomas Heller)
Date: 08 May 2003 10:10:58 +0200
Subject: [Twisted-Python] telnet client code
Message-ID: <d6ituact.fsf@python.net>

I have this snippet running in it's own thread, and would like
to port it to twisted, my program is using it anyway.
Any hints how to get started?

Thanks, Thomas

        import telnetlib, time, socket
        try:
            tn = telnetlib.Telnet(host)
        except socket.error, detail:
            print "reboot failed", host, detail
            return
        tn.read_until("Username: ")
        tn.write("tel\r\n")
        tn.read_until("Password: ")
        tn.write("tel\r\n")
        time.sleep(1)
        tn.read_some()
        tn.write("reboot\r\n")
        time.sleep(1)




From justinjohnson at fastmail.fm  Thu May  8 06:23:51 2003
From: justinjohnson at fastmail.fm (Justin Johnson)
Date: Thu, 08 May 2003 06:23:51 -0600
Subject: [Twisted-Python] web site down
In-Reply-To: <d6ituact.fsf@python.net>
References: <d6ituact.fsf@python.net>
Message-ID: <20030508122351.94EF0346D9@www.fastmail.fm>

Not sure if this is the place to post this, but twistedmatrix.com is
down.  Got an error about not being able to access distributed server.

-JJ



From glyph at twistedmatrix.com  Thu May  8 06:46:11 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 8 May 2003 07:46:11 -0500
Subject: [Twisted-Python] web site down
In-Reply-To: <20030508122351.94EF0346D9@www.fastmail.fm>
Message-ID: <0BC7F471-8153-11D7-912C-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Thursday, May 8, 2003, at 07:23 AM, Justin Johnson wrote:

> Not sure if this is the place to post this, but twistedmatrix.com is
> down.  Got an error about not being able to access distributed server.

What specific URL is down?  "/" certainly shouldn't be taking you to a 
distributed server.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+ulGbvVGR4uSOE2wRAs2ZAJ4mHiROYe2biwXinpREdvOV4HxYiQCeMaMO
BvWpBWNOze50h9Y+oozAI/s=
=w5rT
-----END PGP SIGNATURE-----




From justinjohnson at fastmail.fm  Thu May  8 09:22:30 2003
From: justinjohnson at fastmail.fm (Justin Johnson)
Date: Thu, 08 May 2003 09:22:30 -0600
Subject: [Twisted-Python] web site down
In-Reply-To: <0BC7F471-8153-11D7-912C-000393C9700E@twistedmatrix.com>
References: <0BC7F471-8153-11D7-912C-000393C9700E@twistedmatrix.com>
Message-ID: <20030508152230.BBC992FB2F@www.fastmail.fm>

twistedmatrix.com just wasn't coming up,
while http://twistedmatrix.com/users/z3p.twistd/ gives me the error
Unable to connect to distributed server.

Sorry, I was mixing results and urls.  :-(

In any event, the main site is up again, although a little slow.

Thanks.
-Justin


On Thu, 8 May 2003 07:46:11 -0500, "Glyph Lefkowitz"
<glyph at twistedmatrix.com> said:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
> 
> 
> On Thursday, May 8, 2003, at 07:23 AM, Justin Johnson wrote:
> 
> > Not sure if this is the place to post this, but twistedmatrix.com is
> > down.  Got an error about not being able to access distributed server.
> 
> What specific URL is down?  "/" certainly shouldn't be taking you to a 
> distributed server.
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.2.1 (Darwin)
> 
> iD8DBQE+ulGbvVGR4uSOE2wRAs2ZAJ4mHiROYe2biwXinpREdvOV4HxYiQCeMaMO
> BvWpBWNOze50h9Y+oozAI/s=
> =w5rT
> -----END PGP SIGNATURE-----
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 



From itamar at itamarst.org  Thu May  8 10:23:18 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 8 May 2003 12:23:18 -0400
Subject: [Twisted-Python] telnet client code
In-Reply-To: <d6ituact.fsf@python.net>
References: <d6ituact.fsf@python.net>
Message-ID: <20030508122318.47ca6973.itamar@itamarst.org>

On 08 May 2003 10:10:58 +0200
Thomas Heller <theller at python.net> wrote:

> I have this snippet running in it's own thread, and would like
> to port it to twisted, my program is using it anyway.
> Any hints how to get started?

I'm not sure if telnet is symmetric - if it isn't, looks like we don't
have telnet client code. Even if it is, the current code needs work in
order to be usable for what you want (it's one of the more ancient parts
of Twisted.)

So, it seems writing a telnet client protocol (with similar methods to
telnetlib that return Deferreds instead of blocking?) is in order, or at
least a refacor of the current telnet code.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From itamar at itamarst.org  Thu May  8 10:39:04 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 8 May 2003 12:39:04 -0400
Subject: [Twisted-Python] Newbie to Twisted: Bug in http.py?
In-Reply-To: <3EB9FDCC.9080202@home.wari.org>
References: <3EB9FDCC.9080202@home.wari.org>
Message-ID: <20030508123904.5f9f557d.itamar@itamarst.org>

On Thu, 08 May 2003 14:48:44 +0800
Wari Wahab <wari at home.wari.org> wrote:

> I was playing around with twisted.web today (1.0.4), and tried to make
> a manual HTTP connection using telnet. Naturally I forgot to type in
> the "HOST: hostname" during the request, and got a nice traceback from
> it. Here are the details:

Thanks for the bug report, fixed in CVS.

> (don't you like how that sounds). I almost got it to work the way I
> want except that I cannot get the standard python cgi module to work
> (to get requests like ?foo=bar).

Look at how twisted/tap/web.py sets up a twisted.web.static.File web
resource to support CGI.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From z3p at twistedmatrix.com  Thu May  8 12:40:04 2003
From: z3p at twistedmatrix.com (Paul Swartz)
Date: Thu, 08 May 2003 14:40:04 -0400
Subject: [Twisted-Python] web site down
In-Reply-To: <20030508152230.BBC992FB2F@www.fastmail.fm>
References: <0BC7F471-8153-11D7-912C-000393C9700E@twistedmatrix.com>
Message-ID: <3EBA6C44.937.2687B5@localhost>

On 8 May 2003 at 9:22, Justin Johnson wrote:

> twistedmatrix.com just wasn't coming up,
> while http://twistedmatrix.com/users/z3p.twistd/ gives me the error
> Unable to connect to distributed server.

My server is back up now.

Other pyr users: is there someplace I can toss a script that will restart 
my server after a reboot?

-p
-- 
     Paul Swartz
(o_  http://twistedmatrix.com/users/z3p.twistd/
//\  z3p at twistedmatrix.com
V_/_ AIM: Z3Penguin




From bob at redivi.com  Thu May  8 13:18:08 2003
From: bob at redivi.com (Bob Ippolito)
Date: Thu, 8 May 2003 15:18:08 -0400
Subject: [Twisted-Python] web site down
In-Reply-To: <3EBA6C44.937.2687B5@localhost>
Message-ID: <CD11B126-8189-11D7-8B50-000A95686CD8@redivi.com>

On Thursday, May 8, 2003, at 14:40 America/New_York, Paul Swartz wrote:

> On 8 May 2003 at 9:22, Justin Johnson wrote:
>
>> twistedmatrix.com just wasn't coming up,
>> while http://twistedmatrix.com/users/z3p.twistd/ gives me the error
>> Unable to connect to distributed server.
>
> My server is back up now.
>
> Other pyr users: is there someplace I can toss a script that will 
> restart
> my server after a reboot?

I dunno about pyr but in general on linux if you make a crontab entry 
that says "@reboot command" then it should run whenever the cron daemon 
starts.

-bob




From exarkun at intarweb.us  Thu May  8 13:32:29 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Thu, 8 May 2003 15:32:29 -0400
Subject: [Twisted-Python] telnet client code
In-Reply-To: <20030508122318.47ca6973.itamar@itamarst.org>
References: <d6ituact.fsf@python.net> <20030508122318.47ca6973.itamar@itamarst.org>
Message-ID: <20030508193229.GA1511@meson.dyndns.org>

On Thu, May 08, 2003 at 12:23:18PM -0400, Itamar Shtull-Trauring wrote:
> On 08 May 2003 10:10:58 +0200
> Thomas Heller <theller at python.net> wrote:
> 
> > I have this snippet running in it's own thread, and would like
> > to port it to twisted, my program is using it anyway.
> > Any hints how to get started?
> 
> I'm not sure if telnet is symmetric - if it isn't, looks like we don't
> have telnet client code. Even if it is, the current code needs work in
> order to be usable for what you want (it's one of the more ancient parts
> of Twisted.)

  Telnet is mostly symmetric.  The existing code isn't very client-friendly,
though.   Here's a kinda-sorta example (untested):


    from twisted.protocols import telnet
    from twisted.internet import protocol, reactor

    class RebootTheServer(telnet.Telnet):
        mode = 'WaitForUser'

        def connectionMade(self):
            # Only defined to keep parent from sending the welcome banner
            pass

        def telnet_WaitForUser(self, line):
            if line.startswith('Username: '):
                self.write(self.factory.username + '\r\n')
                return 'WaitForPassword'

        def telnet_WaitForPassword(self, line):
            if line.startswith('Password: '):
                self.write(self.factory.password + '\r\n')

                # Instead of this, you could do another state,
                # like "WaitForPrompt" or something.
                reactor.callLater(1, self.reboot)
                return 'Idling'

        def telnet_Idling(self, line):
            # La la la.
            pass 

        def reboot(self):
            self.write('reboot\r\n')

            # This will make us lose our connection after the next
            # line is received.  To lose it faster, use
            # self.transport.loseConnection() instead
            self.mode = 'Done'

        def connectionLost(self, reason):
            if self.mode != 'Done':
                reason.printTraceback()
            reactor.stop()
           

    f = protocol.ClientFactory()
    f.protocol = RebootTheServer
    f.password = 'password'
    f.username = 'username'

    # fill in host and port
    reactor.connectTCP(host, port, f)

    # Let's go
    reactor.run()

  This is the first expect-y thing I've written with Telnet, so maybe it's
not the best solution, but hopefully it gets you on the right track.

  Jp

-- 
#!/bin/bash
( LIST=(~/.sigs/*.sig)
  cat ${LIST[$(($RANDOM % ${#LIST[*]}))]}
  echo -- $'\n' `uptime | sed -e 's/.*m//'` ) > ~/.signature
-- 
 up 6 days, 16:38, 10 users, load average: 0.07, 0.06, 0.00
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030508/ace1e005/attachment.sig>

From glyph at twistedmatrix.com  Thu May  8 15:19:08 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 8 May 2003 16:19:08 -0500
Subject: [Twisted-Python] web site down
In-Reply-To: <CD11B126-8189-11D7-8B50-000A95686CD8@redivi.com>
Message-ID: <B4A6DE68-819A-11D7-912C-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Thursday, May 8, 2003, at 02:18 PM, Bob Ippolito wrote:

> I dunno about pyr but in general on linux if you make a crontab entry 
> that says "@reboot command" then it should run whenever the cron 
> daemon starts.

This is the way that most UNIXes suggest doing it - however, at least 
on pyramid, it seems broken.  I don't know if this is a debian issue or 
what, but I can't get _any_ of my machines to exec @reboot crontab 
entries.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+usnQvVGR4uSOE2wRAkSAAKCzpRj5xyTWGPG6ThCOX3j5GNeYjwCfbjAn
Zn8dvigbrwsrjVxUHFofhFs=
=dvLR
-----END PGP SIGNATURE-----




From stuart.hungerford at anu.edu.au  Thu May  8 18:49:26 2003
From: stuart.hungerford at anu.edu.au (Stuart Hungerford)
Date: Fri, 09 May 2003 10:49:26 +1000
Subject: [Twisted-Python] Should this example code run?
Message-ID: <5.2.0.9.0.20030509104442.023c7ed0@anusf.anu.edu.au>

Hi all,

I'm working my way through the twisted.web documentation
and came across this snippet (to be saved in a ".rpy" file):



from twisted.web.resource import Resource

class Hello(Resource):
     def getChild(self, name, request):
         if name == '':
             return self
         return Resource.getChild(self, name, request)

         def render(self, request):
             return """<html> Hello, world! I am located at %s. 
</html>"""  % (request.prepath)

resource = Hello()


The original snippet had a "%r" format string which I'm assuming
was meant to be "%s".  When I access this .rpy file twisted web
reports a stack dump with:


web.Server Traceback (most recent call last):

exceptions.NotImplementedError: __builtin__.Hello.render called

/opt/Twisted-1.0.4/twisted/web/server.py, line 153 in process
151    try:
152      resrc = self.site.getResourceFor(self)
153      self.render(resrc)
154    except:
Self
site
twisted.web.server.Site instance @ 0x365110 <twisted.web.server.Site 
instance at 0x365110>
Locals
resrc
__builtin__.Hello instance @ 0x467ec0 <__builtin__.Hello instance at 0x467ec0>
self
twisted.web.server.Request instance @ 0x48c920 <GET /test2.rpy HTTP/1.1>



Can someone enlighten me on the cause of the error?


Cheers,

Stu

--
:: Stuart Hungerford (stuart.hungerford at anu.edu.au)
:: ANU Internet Futures Group




From twisted at eholm.com  Thu May  8 19:42:04 2003
From: twisted at eholm.com (Eric Holm)
Date: Thu, 08 May 2003 18:42:04 -0700
Subject: [Twisted-Python] Woven (microdom?) problem
Message-ID: <ud6isyjyr.fsf@eholm.com>

I'm having some trouble with the following (at the very
end of this mail) Woven script/html.  My problem is
that the line:

<script language="JavaScript" src="Refresh.js"></script>

is re-written by Woven (microdom?) to:

<script language="JavaScript" src="Refresh.js" />

which apparently isn't kosher (at least as far as
IE and Opera are concerned).  If I point my browser to
Minimal.html, it works fine, if I point it to
Minimal.rpy, the browser barfs due to the rewrite.

I'm using Twisted 1.0.3 on Win2k, Python 2.2.
Any help would be most appreciated.

Thanks,


Eric.


*** Minimal.html:
<html>
<head>
<script language="JavaScript" src="Refresh.js"></script>
</head>

<body onload="doLoad()">
The time is: <span model="TimeTest" view="Text">hh:mm:ss</span>
</body>
</html>


*** Minimal.rpy:
from twisted.web.woven import model, page, widgets
import time

model = model.AttributeModel()
model.setSubmodel( "TimeTest", time.asctime() )

resource = page.Page(model, templateFile="Minimal.html")


*** Refresh.js (FWIW):
var sURL = unescape(window.location.pathname);

function doLoad()
{
    setTimeout( "refresh()", 10*1000 );
}

function refresh()
{
    window.location.href = sURL;
}




From bob at redivi.com  Thu May  8 19:47:35 2003
From: bob at redivi.com (Bob Ippolito)
Date: Thu, 8 May 2003 21:47:35 -0400
Subject: [Twisted-Python] Woven (microdom?) problem
In-Reply-To: <ud6isyjyr.fsf@eholm.com>
Message-ID: <351BB2A2-81C0-11D7-8B50-000A95686CD8@redivi.com>

On Thursday, May 8, 2003, at 21:42 America/New_York, Eric Holm wrote:

> I'm having some trouble with the following (at the very
> end of this mail) Woven script/html.  My problem is
> that the line:
>
> <script language="JavaScript" src="Refresh.js"></script>
>
> is re-written by Woven (microdom?) to:
>
> <script language="JavaScript" src="Refresh.js" />
>
> which apparently isn't kosher (at least as far as
> IE and Opera are concerned).  If I point my browser to
> Minimal.html, it works fine, if I point it to
> Minimal.rpy, the browser barfs due to the rewrite.
>
> I'm using Twisted 1.0.3 on Win2k, Python 2.2.
> Any help would be most appreciated.

I just took at look at microdom in CVS and it shouldn't do that 
anymore.  I don't recall when that bug was fixed, but try out CVS or 
1.0.5rc2.

-bob




From ecn at metaslash.com  Thu May  8 19:56:45 2003
From: ecn at metaslash.com (Eric C. Newton)
Date: Thu, 8 May 2003 21:56:45 -0400
Subject: [Twisted-Python] pcp.ProducerConsumerProxy.resumeProducing
Message-ID: <20030509015645.GA3694@localhost.localdomain>

Linux RedHat 9.0
Twisted 1.0.4

In method resumeProducing of pcp.ProducerConsumerProxy, there's this
code:

        if self.producer is not None:
            bytesBuffered = reduce(operator.add,
                                   [len(s) for s in self._buffer], 0)
            # TODO: You can see here the potential for high and low
            # watermarks, where bufferSize would be the high mark when we
            # ask the upstream producer to pause, and we wouldn't have
            # it resume again until it hit the low mark.  Or if producer
            # is Pull, maybe we'd like to pull from it as much as necessary
            # to keep our buffer full to the low mark, so we're never caught
            # without something to send.
            if self.producerPaused and (bytesBuffered < self.bufferSize):
                # Now that our buffer is empty,
                self.producerPaused = False
                self.producer.resumeProducing()
            elif self.outstandingPull:
                # I did not have any data to write in response to a pull,
                # so I'd better pull some myself.
                self.producer.resumeProducing()

At the condition:

            elif self.outstandingPull:

It's possible that the producer is sending data in big chunks, and we
are only writing them out in little chunks.  If so, we continue to add
bytes to the buffer and disregard the buffer limit.  I've changed the
line to this:

            elif self.outstandingPull and (bytesBuffered < self.bufferSize):

and all is well.  Except maybe the code should be refactored (without
comments now):

	    if bytesBuffered < self.bufferSize:
		if self.producerPaused or self.outstandingPull:
		    self.producer.resumeProducing()
		self.producerPaused = False

-Eric



From arashi1 at pd.jaring.my  Thu May  8 20:00:50 2003
From: arashi1 at pd.jaring.my (Mukhsein Johari)
Date: Fri, 9 May 2003 10:00:50 +0800
Subject: [Twisted-Python] how to use --index= and doc vagueness
Message-ID: <200305091000.50528.arashi1@pd.jaring.my>

Hello all,

I'm trying to understand how the twisted web is supposed to work. I'm using 
the web tap and have a public_html dir where I place all the html and .rpy 
files.

The --help for web does not seem clear to me. How do I make t.w use an rpy to 
be used instead of an index or index.html for when one goes to:

http://www.mysite.com

As it is, mozilla times out with some kind of strange redirection error if I 
don't have index or index.html

Using the --resource-script=index.rpy (that's what I call the default .rpy 
file) option and placing the index.rpy file in public_html does not work. 
Twisted complains about not find the file even though it's in the very 
directory that it normally finds html and rpy files.

pointing browser to

http://www.mysite.com/index.rpy works though.

Lastly, documentation vagueness.
In the Twisted 1.0.5rc2 docs - about Twisted web, the section about virtual 
hosts. What does it mean by simply "drop vhost.rpy" ? Where exactly are you 
supposed to drop that file?

Could we also have more of an explanation of the virtual host directive? I 
mean, state:

eg. Lets say we want to host virtually the domains:

customerx.com
customerz.org

have a dirs called

/customerx
/customerz

On the real host myserver.com (all on one machine)

XXXXXX -> here we should state how to set up the virtual host (the addHost() 
method) and where to put the public_html dirs.

Cheers,
Mukhsein



From twisted at eholm.com  Thu May  8 20:04:03 2003
From: twisted at eholm.com (Eric Holm)
Date: Thu, 08 May 2003 19:04:03 -0700
Subject: [Twisted-Python] Woven (microdom?) problem
In-Reply-To: <351BB2A2-81C0-11D7-8B50-000A95686CD8@redivi.com>
References: <351BB2A2-81C0-11D7-8B50-000A95686CD8@redivi.com>
Message-ID: <u8ytgyiy4.fsf@eholm.com>

> I just took at look at microdom in CVS and it shouldn't 
> do that anymore.  I don't recall when that bug was fixed,
> but try out CVS or 1.0.5rc2.
>
Will do, thanks!


Eric.






From dp at twistedmatrix.com  Thu May  8 21:59:32 2003
From: dp at twistedmatrix.com (Donovan Preston)
Date: Thu, 8 May 2003 20:59:32 -0700
Subject: [Twisted-Python] Should this example code run?
In-Reply-To: <5.2.0.9.0.20030509104442.023c7ed0@anusf.anu.edu.au>
Message-ID: <A441960A-81D2-11D7-960E-00039376B1AE@twistedmatrix.com>

On Thursday, May 8, 2003, at 05:49 PM, Stuart Hungerford wrote:

> Hi all,
>
> I'm working my way through the twisted.web documentation
> and came across this snippet (to be saved in a ".rpy" file):

<snip>

> Can someone enlighten me on the cause of the error?

I copied and pasted the exact code out of an email and got the same 
error. It turned out to be a tabs vs. spaces issue in that code. The 
render method was being defined *inside* the getChild method, and not 
on the Hello class. Try turning on invisible characters in your 
favorite editor and making sure the whole file uses spaces and that the 
def render(...) line is indented to 4 spaces.

Pretty silly, I wonder if this was in the original documentation file 
itself? I'll take a look.

Thanks for the report!

Donovan




From warner at lothar.com  Thu May  8 23:00:15 2003
From: warner at lothar.com (Brian Warner)
Date: Thu, 08 May 2003 22:00:15 -0700 (PDT)
Subject: [Twisted-Python] pb size limitation
References: <CD708032-809B-11D7-A0CA-000A95686CD8@redivi.com>
Message-ID: <20030508.220015.59474189.warner@lothar.com>

> > If you really do want to change the size limit for banana, you can do it
> > per-process (patches to properly parameterize this accepted) by changing
> > banana.SIZE_LIMIT.
> 
> Just curious, but is this settable with cBanana?

No, not really. We could make it a modifiable attribute, but I'd rather not
for the same reasons described before, plus the fact that sending more than a
few tens of kb in a single banana token is just going to get queued anyway,
as the socket buffers aren't usually very big.

Banana is meant for sensibly-sized pieces of data. Bulk file transfer should
be built on top of it.

 -Brian



From dp at twistedmatrix.com  Thu May  8 23:55:40 2003
From: dp at twistedmatrix.com (Donovan Preston)
Date: Thu, 8 May 2003 22:55:40 -0700
Subject: [Twisted-Python] how to use --index= and doc vagueness
In-Reply-To: <200305091000.50528.arashi1@pd.jaring.my>
Message-ID: <DD4A80A1-81E2-11D7-960E-00039376B1AE@twistedmatrix.com>

On Thursday, May 8, 2003, at 07:00 PM, Mukhsein Johari wrote:

> As it is, mozilla times out with some kind of strange redirection 
> error if I
> don't have index or index.html

This is a weird bug with the interaction of page.Page (which I assume 
you are using) and --resource-script. If you create your resource and 
then set the addSlash attribute to 0 it should help solve it:

resource = page.Page("hello", templateFile="SomeTemplate.html")
resource.addSlash = 0

Basically, Page by default tries to redirect to the same url with a 
slash at the end, but when a Page is the root resource the test that 
tests to see if there is a slash is never True.

Thomas Raschbacher had this problem before, I should have fixed this 
properly earlier. Sorry about it.

> Using the --resource-script=index.rpy (that's what I call the default 
> .rpy
> file) option and placing the index.rpy file in public_html does not 
> work.
> Twisted complains about not find the file even though it's in the very
> directory that it normally finds html and rpy files.

The file you specify as the --resource-script should be either a full, 
absolute path or a relative path to the file from the directory you run 
mktap in (I believe.)

Also, I believe --resource-script and --path are mutually exclusive. 
(I'm not totally sure though...) Using --resource-script will put the 
resource generated by the .rpy at the root of the Resource tree. Using 
--path will put a twisted.web.static.File pointing to the file or 
directory specified at the root of the Resource tree.

Donovan




From dp at twistedmatrix.com  Fri May  9 00:13:57 2003
From: dp at twistedmatrix.com (Donovan Preston)
Date: Thu, 8 May 2003 23:13:57 -0700
Subject: [Twisted-Python] how to use --index= and doc vagueness
In-Reply-To: <DD4A80A1-81E2-11D7-960E-00039376B1AE@twistedmatrix.com>
Message-ID: <6B5FF5D8-81E5-11D7-960E-00039376B1AE@twistedmatrix.com>

On Thursday, May 8, 2003, at 10:55 PM, Donovan Preston wrote:

> This is a weird bug with the interaction of page.Page (which I assume 
> you are using) and --resource-script. If you create your resource and 
> then set the addSlash attribute to 0 it should help solve it:
>
> resource = page.Page("hello", templateFile="SomeTemplate.html")
> resource.addSlash = 0
>
> Basically, Page by default tries to redirect to the same url with a 
> slash at the end, but when a Page is the root resource the test that 
> tests to see if there is a slash is never True.
>
> Thomas Raschbacher had this problem before, I should have fixed this 
> properly earlier. Sorry about it.

Fixed in CVS. addSlash=0 should no longer be required in this case with 
CVS twisted.

Donovan




From jheintz at isogen.com  Thu May  8 15:38:53 2003
From: jheintz at isogen.com (John D. Heintz)
Date: 08 May 2003 16:38:53 -0500
Subject: [Twisted-Python] How would I upload/download files through
	twisted.web
In-Reply-To: <1052159370.618.13.camel@shire>
References: <1052159370.618.13.camel@shire>
Message-ID: <1052429933.3188.10.camel@shire>

Any help of this issue? I've got a good feeling about twisted but:

a) don't have time to explore http and twisted
b) don't yet completely grok the asyncronous flow

If I can get an http upload/downloader working I can you Twisted on a
project for a customer to get a  better performing web server than the
BaseHTTPServer from python.

Thanks for your time,
John

On Mon, 2003-05-05 at 13:29, John D. Heintz wrote:
> Hi all,
> 
> I tried searching the mailing list and google but ended up more
> confused. Sorry if this is in the docs and I missed it, just redirect
> me.
> 
> Question: How do I write a simple twisted.web server to receive an
> uploaded file, process it, and return a different file for
> download/launch.
> 
> The last part does have some examples, but I include it hear for
> completeness.
> 
> My intuition tells me that this kind of thing is "trivial" in twisted,
> but I'm having a hard time unraveling the knot. I started working on a
> custom Resource but only got so far.
> 
> Can someone post a small python script (like web.py in examples) that
> does this?
> 
> Thanks for the time,
> John
> 
> -- 
> John D. Heintz | Senior Developer
> 
> 1016 La Posada Dr. | Suite 240 | Austin TX 78752
> T 512.380.0347 | jheintz at isogen.com
> 
> http://www.isogen.com
-- 
John D. Heintz | Senior Developer

1016 La Posada Dr. | Suite 240 | Austin TX 78752
T 512.380.0347 | jheintz at isogen.com

http://www.isogen.com




From smurf at noris.de  Fri May  9 07:38:20 2003
From: smurf at noris.de (Matthias Urlichs)
Date: Fri, 09 May 2003 15:38:20 +0200
Subject: [Twisted-Python] Timeout protocol wrapper broken
Message-ID: <pan.2003.05.09.13.38.18.987949@smurf.noris.de>

Summary: I want to use Python 2.2 and multiple inheritance here,
or at least a __getattr__-style pass-everything approach.

Interim fix (I guess nobody tried this with a Web server yet...):

--- 1.8/twisted/protocols/policies.py   Thu Apr 10 07:03:51 2003
+++ edited/twisted/protocols/policies.py        Fri May  9 15:22:04 2003
@@ -90,6 +90,12 @@
         self.wrappedFactory = wrappedFactory
         self.protocols = {}

+    def startFactory(self):
+        self.wrappedFactory.startFactory()
+
+    def stopFactory(self):
+        self.wrappedFactory.stopFactory()
+
     def startedConnecting(self, connector):
         self.wrappedFactory.startedConnecting(connector)



-- 
Matthias



From andrew-twisted at puzzling.org  Fri May  9 08:56:56 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sat, 10 May 2003 00:56:56 +1000
Subject: [Twisted-Python] Timeout protocol wrapper broken
In-Reply-To: <pan.2003.05.09.13.38.18.987949@smurf.noris.de>
References: <pan.2003.05.09.13.38.18.987949@smurf.noris.de>
Message-ID: <20030509145656.GA27584@frobozz.local>

On Fri, May 09, 2003 at 03:38:20PM +0200, Matthias Urlichs wrote:
> Summary: I want to use Python 2.2 and multiple inheritance here,
> or at least a __getattr__-style pass-everything approach.
> 
> Interim fix (I guess nobody tried this with a Web server yet...):

Thanks for the report!

Fixing the TimeoutWrapper to work as a mixin has been on my todo list for a
while -- the main reason being so that we can cleanly integrate it into our
web server :)

I expect to have time to work on it this weekend.

-Andrew.




From smurf at noris.de  Fri May  9 09:02:30 2003
From: smurf at noris.de (Matthias Urlichs)
Date: Fri, 09 May 2003 17:02:30 +0200
Subject: [Twisted-Python] Resource.render() returning NOT_DONE_YET
References: <20030428160935.GA68316@doublegemini.com>
Message-ID: <pan.2003.05.09.15.02.30.140897@smurf.noris.de>

Hi,

Clark C. Evans schrub am Mon, 28 Apr 2003 16:09:35 +0000:
>   2.  Alternatively, allow a Deferred to be a return
>       value.  Then the underlying caller can add result.finish() to the
>       deferred chain.   This has the advantage of not requiring finish()
>       to really be managed.

I think that wouldn't work. Consider:

	def render(self,req):
		d = somewhere.GetDeferredData()
		d.addCallback(self.render_more,req)
		return d
	def render_more(self,data,req):
		d = somewhere.GetMoreDeferredData(data)
		d.addCallback(self.render_even_more,req)
		return d
	def render_even_more(self,data,req):
		req.write("Done!")

This ends up calling req.finish() befor req.write().

-- 
Matthias



From twisted at eholm.com  Fri May  9 10:19:17 2003
From: twisted at eholm.com (Eric Holm)
Date: Fri, 09 May 2003 09:19:17 -0700
Subject: [Twisted-Python] Woven (microdom?) problem
In-Reply-To: <351BB2A2-81C0-11D7-8B50-000A95686CD8@redivi.com>
References: <351BB2A2-81C0-11D7-8B50-000A95686CD8@redivi.com>
Message-ID: <u4r443xfe.fsf@eholm.com>

> I just took at look at microdom in CVS and it shouldn't 
> do that anymore.  I don't recall when that bug was fixed,
> but try out CVS or 1.0.5rc2.
>
I tried 1.0.5rc2, and while it's not rewriting the </script> 
now, it's not working either, and I'm at a complete loss as 
to why.  IE gives a typical-but-useless "Line 1, Char 1, 
Object expected" error. If I view the source of the page 
that IE is choking on, save it untouched as "Minimal2.html", 
then IE displays "Minimal2.html" just fine.

This javascript thing is a tangent for me that's gotten out 
of hand, so for now I'll just assume that Woven and 
javascript don't mix, at least until I have some time to 
dig deeper.

Thanks,


Eric.




From mario at ruggier.org  Fri May  9 11:09:26 2003
From: mario at ruggier.org (Mario Ruggier)
Date: Fri, 9 May 2003 19:09:26 +0200
Subject: [Twisted-Python] Woven (microdom?) problem
In-Reply-To: <u4r443xfe.fsf@eholm.com>
Message-ID: <FD418EB2-8240-11D7-A380-000393756786@ruggier.org>

On vendredi, mai 9, 2003, at 18:19 Europe/Amsterdam, Eric Holm wrote:
>> I just took at look at microdom in CVS and it shouldn't
>> do that anymore.  I don't recall when that bug was fixed,
>> but try out CVS or 1.0.5rc2.
>>
> I tried 1.0.5rc2, and while it's not rewriting the </script>
> now, it's not working either, and I'm at a complete loss as
> to why.  IE gives a typical-but-useless "Line 1, Char 1,
> Object expected" error. If I view the source of the page
> that IE is choking on, save it untouched as "Minimal2.html",
> then IE displays "Minimal2.html" just fine.

Is he finding the js file?
Try specifying the server abs filepath to the js...

As for the <script> closing tag -- one trick that has worked
sometimes is to stick an empty comment <!-- --> as content, which
forces XML parsers to write out the closing tag and not the shorthand
for it. IE and other browsers I have tried it on seem to accept it fine,
i.e. they load the js file given by @src.

mario

> This javascript thing is a tangent for me that's gotten out
> of hand, so for now I'll just assume that Woven and
> javascript don't mix, at least until I have some time to
> dig deeper.





From mario at ruggier.org  Fri May  9 17:37:09 2003
From: mario at ruggier.org (Mario Ruggier)
Date: Sat, 10 May 2003 01:37:09 +0200
Subject: [Twisted-Python] How would I upload/download files through twisted.web
In-Reply-To: <1052429933.3188.10.camel@shire>
Message-ID: <27020570-8277-11D7-A380-000393756786@ruggier.org>

Not sure what you mean, but file upload may be done like so:

## fileup.rpy

import twisted.web.resource

class FileUpResource(twisted.web.resource.Resource):

     isLeaf = 1

     def render(self, request):
         request.setHeader('Content-Type', 'text/html; charset=utf-8')
         args = request.args
         pageTitle = 'file upload test'

         return (u"""
<html>
   <head>
     <title>%(pageTitle)s</title>
     <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
   </head>
   <body>
     <h1>%(pageTitle)s</h1>
     <form method="post" enctype="multipart/form-data">
     <table>
     <tr><td> file: </td><td> <input name='file' type='file'> </td></tr>
     </table>
     <input type=submit>
     </form>
     <hr/>
     <p>Form args:<br/>%(args)s</p>
     <hr/>
     </body>
</html>""" % vars()).encode()

resource = FileUpResource()

##


On jeudi, mai 8, 2003, at 23:38 Europe/Amsterdam, John D. Heintz wrote:

> Any help of this issue? I've got a good feeling about twisted but:
>
> a) don't have time to explore http and twisted
> b) don't yet completely grok the asyncronous flow
>
> If I can get an http upload/downloader working I can you Twisted on a
> project for a customer to get a  better performing web server than the
> BaseHTTPServer from python.
>
> Thanks for your time,
> John
>
> On Mon, 2003-05-05 at 13:29, John D. Heintz wrote:
>> Hi all,
>>
>> I tried searching the mailing list and google but ended up more
>> confused. Sorry if this is in the docs and I missed it, just redirect
>> me.
>>
>> Question: How do I write a simple twisted.web server to receive an
>> uploaded file, process it, and return a different file for
>> download/launch.
>>
>> The last part does have some examples, but I include it hear for
>> completeness.
>>
>> My intuition tells me that this kind of thing is "trivial" in twisted,
>> but I'm having a hard time unraveling the knot. I started working on a
>> custom Resource but only got so far.
>>
>> Can someone post a small python script (like web.py in examples) that
>> does this?
>>
>> Thanks for the time,
>> John
>>
>> -- 
>> John D. Heintz | Senior Developer
>>
>> 1016 La Posada Dr. | Suite 240 | Austin TX 78752
>> T 512.380.0347 | jheintz at isogen.com
>>
>> http://www.isogen.com
> -- 
> John D. Heintz | Senior Developer
>
> 1016 La Posada Dr. | Suite 240 | Austin TX 78752
> T 512.380.0347 | jheintz at isogen.com
>
> http://www.isogen.com
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
Best regards,

	Mario Ruggier

email      mario at ruggier.org
home      +33 4 50 41 96 14
mobile    +41 79 214 0791




From smurf at noris.de  Fri May  9 19:32:37 2003
From: smurf at noris.de (Matthias Urlichs)
Date: Sat, 10 May 2003 03:32:37 +0200
Subject: [Twisted-Python] x-www-urlencoded information loss
Message-ID: <pan.2003.05.10.01.32.36.844958@smurf.noris.de>

Hi,

if somebody uploads a file, the x-url-encoded part with the file data
typically has an extended header along the lines of

-----some-boundary
Content-Disposition: form-data; name="file"; filename="foo.txt"
Content-Type: application/octet-stream

...the.actual.contents...
-----some-boundary

At the moment, Twisted doesn't seem to store that information (i.e.,
filename and content-type) anywhere. I consider that to be a bug; I don't
want to de-MIMEify the content a second time.

To fix this, the arguments should probably acquire their own "headers"
hash. For instance, in the above example:

request.args["file"][0].headers = \
    {"content-type":       ["application/octet-stream"],
     "Content-Disposition":["form-data; name=\"file\";
     filename=\"foo.txt\""]}

That would require to use a subclass of "str" for the arguments (you can't
directly attach a property to a string), but with Python 2.2 this should
be nicely transparent.

-- 
Matthias



From astreib at indiana.edu  Fri May  9 19:50:50 2003
From: astreib at indiana.edu (Allan Streib)
Date: Fri, 9 May 2003 20:50:50 -0500 (EST)
Subject: [Twisted-Python] Using adbapi w/Sybase stored procs
Message-ID: <Pine.LNX.4.51.0305092021410.17491@garp.ucs.indiana.edu>

Sybase stored procedures can return tabular results like a SQL query can.
This is unlike stored procedures in Oracle (not sure about other DBMSs)

I found (in 1.0.4) that I could not invoke such a procedure with the
runQuery method.  I developed the following subclasses that add a
"callProc" method which calls the procedure and fetches the results.

I could easily have added these methods to enterprise/adbapi.py but I
don't like to run locally modified distributions so I went the subclass
route for my needs.  Thought I'd share this so that someone could possbly
add it to the distribution.

I used this with the Sybase module for Python from Object Craft[1]

from twisted.enterprise import adbapi
from twisted.internet import defer, threads

class SybaseConnectionPool(adbapi.ConnectionPool):
    def __init__(self, dbapiName, *connargs, **connkw):
        apply(adbapi.ConnectionPool.__init__,
              (self, dbapiName) + connargs, connkw)

    def _callProc(self, args, kw):
        conn = self.connect()
        curs = conn.cursor()
        try:
            apply(curs.callproc, args, kw)
            result = curs.fetchall()
            curs.close()
            conn.commit()
        except:
            conn.rollback()
        return result

    def procedure(self, callback, errback, *args, **kw):
        threads.deferToThread(self._callProc, args, kw).addCallbacks(
            callback, errback)

class SybaseAugmentation(adbapi.Augmentation):
    def __init__(self, dbpool):
        adbapi.Augmentation.__init__(self, dbpool)

    def callProc(self, *args, **kw):
        d = defer.Deferred()
        apply(self.dbpool.procedure, (d.callback, d.errback)+args, kw)
        return d

The code to call a Sybase stored proc then looks like (patterned after the
example in the Twisted Book):

dbpool = SybaseConnectionPool("Sybase", "syb_server", "user", "pass")

class SybaseDatabase(SybaseAugmentation):
    def myProc(self, myArg):
	# A one-argument stored procedure...
        return self.callProc("dbname..my_proc", [myArg])

def gotResults(resultlist):
    """Callback for handling the result of the procedure"""
    print `resultlist`

db = SybaseDatabase(dbpool)
# These will *not* block. Hooray!

db.myProc("foo").addCallbacks(gotResults, db.operationError)

# Of course, nothing will happen until the reactor is started
from twisted.internet import reactor
reactor.run()


References:
 [1] http://www.object-craft.com.au/projects/sybase/

Allan
--
"If you understand what you're doing, you're not learning anything."
                                                -- Anonymous



From cce at clarkevans.com  Fri May  9 21:22:23 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Sat, 10 May 2003 03:22:23 +0000
Subject: [Twisted-Python] Resource.render() returning NOT_DONE_YET
In-Reply-To: <pan.2003.05.09.15.02.30.140897@smurf.noris.de>
References: <20030428160935.GA68316@doublegemini.com> <pan.2003.05.09.15.02.30.140897@smurf.noris.de>
Message-ID: <20030510032223.GA4864@doublegemini.com>

On Fri, May 09, 2003 at 05:02:30PM +0200, Matthias Urlichs wrote:
| Clark C. Evans schrub am Mon, 28 Apr 2003 16:09:35 +0000:
| >   2.  Alternatively, allow a Deferred to be a return
| >       value.  Then the underlying caller can add result.finish() to the
| >       deferred chain.   This has the advantage of not requiring finish()
| >       to really be managed.
| 
| I think that wouldn't work. Consider:
| 
| 	def render(self,req):
| 		d = somewhere.GetDeferredData()
| 		d.addCallback(self.render_more,req)
| 		return d
| 	def render_more(self,data,req):
| 		d = somewhere.GetMoreDeferredData(data)
| 		d.addCallback(self.render_even_more,req)
| 		return d
| 	def render_even_more(self,data,req):
| 		req.write("Done!")
| 
| This ends up calling req.finish() befor req.write().

Just beacuse you can write code that will violate a
given protocol doesn't mean it's a bad protocol.  The
suggestion would work just fine... you just picked
a way to get around the intent of returning Deferred.

IMHO,

Clark



From smurf at noris.de  Sat May 10 02:01:15 2003
From: smurf at noris.de (Matthias Urlichs)
Date: Sat, 10 May 2003 10:01:15 +0200
Subject: [Twisted-Python] twisted web, documentation
References: <59720C230F8BC54098777277F5E1068881C2D5@fininfomail.fininfo.grp> <20030425071624.GE15695@frobozz.local>
Message-ID: <pan.2003.05.10.08.01.15.314573@smurf.noris.de>

Hi,

Andrew Bennetts schrub am Fri, 25 Apr 2003 07:16:25 +0000:
> There will be a whole bunch of new, up-to-date docs on Woven in CVS within a
> week.  I believe this includes a general tutorial and stuff about using
> forms.
> 
Excellent!

> If you can, wait until we've got those docs ready.  Otherwise, you could try
> asking for advice on #twisted on irc.freenode.net, which is currently the
> best place for Woven docs (until the new docs get checked in...)
> 
How about a link to the not-quite-ready docs?

-- 
Matthias



From m at moshez.org  Sat May 10 02:21:45 2003
From: m at moshez.org (Moshe Zadka)
Date: 10 May 2003 08:21:45 -0000
Subject: [Twisted-Python] twisted web, documentation
In-Reply-To: <pan.2003.05.10.08.01.15.314573@smurf.noris.de>
References: <pan.2003.05.10.08.01.15.314573@smurf.noris.de>, <59720C230F8BC54098777277F5E1068881C2D5@fininfomail.fininfo.grp> <20030425071624.GE15695@frobozz.local>
Message-ID: <20030510082145.6888.qmail@green.zadka.com>

On Sat, 10 May 2003, "Matthias Urlichs" <smurf at noris.de> wrote:

> Andrew Bennetts schrub am Fri, 25 Apr 2003 07:16:25 +0000:

Note the 15 days of lag. Also, this is an English-language mailing list.
Kindly configure your software to produce English verbiage, so that
people are not expected to understand random language.

> > There will be a whole bunch of new, up-to-date docs on Woven in CVS within a
> > week.

So, in April 25th, Andrew claimed there will be docs in CVS within a week.
Had you bothered checking, you would have seen that not only have the docs
made it to CVS, but that they are actually in the 1.0.5 book, in a chapter
named, in a surprise move, "Woven".
See <URL:http://www.twistedmatrix.com/documents/howto/>

Thanks a lot to Donovan and Allen for the hard work in writing those
documents, and thanks to Andrew for converting them into Lore and
integrating them into the book!

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From smurf at noris.de  Sat May 10 04:19:16 2003
From: smurf at noris.de (Matthias Urlichs)
Date: Sat, 10 May 2003 12:19:16 +0200
Subject: [Twisted-Python] twisted web, documentation
References: <pan.2003.05.10.08.01.15.314573@smurf.noris.de> <59720C230F8BC54098777277F5E1068881C2D5@fininfomail.fininfo.grp> <20030425071624.GE15695@frobozz.local> <20030510082145.6888.qmail@green.zadka.com>
Message-ID: <pan.2003.05.10.10.19.15.813057@smurf.noris.de>

Hi,

Moshe Zadka:
> Note the 15 days of lag. Also, this is an English-language mailing list.

Sorry about that.

> So, in April 25th, Andrew claimed there will be docs in CVS within a week.
> Had you bothered checking, you would have seen that not only have the docs
> made it to CVS, but that they are actually in the 1.0.5 book, in a chapter
> named, in a surprise move, "Woven".

I saw the missing "forms/guard in depth" link and seem to have concluded
erroneously that this has in fact not happened.

-- 
Matthias



From m at moshez.org  Sat May 10 05:05:45 2003
From: m at moshez.org (Moshe Zadka)
Date: 10 May 2003 11:05:45 -0000
Subject: [Twisted-Python] twisted web, documentation
In-Reply-To: <pan.2003.05.10.10.19.15.813057@smurf.noris.de>
References: <pan.2003.05.10.10.19.15.813057@smurf.noris.de>, <pan.2003.05.10.08.01.15.314573@smurf.noris.de> <59720C230F8BC54098777277F5E1068881C2D5@fininfomail.fininfo.grp> <20030425071624.GE15695@frobozz.local> <20030510082145.6888.qmail@green.zadka.com>
Message-ID: <20030510110545.12791.qmail@green.zadka.com>

On Sat, 10 May 2003, "Matthias Urlichs" <smurf at noris.de> wrote:

> I saw the missing "forms/guard in depth" link and seem to have concluded
> erroneously that this has in fact not happened.

Documentation for form and guard have not, to the best of my knowledge,
been written yet.
 
-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From uwe at oss4u.com  Sat May 10 07:59:16 2003
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Sat, 10 May 2003 06:59:16 -0700
Subject: [Twisted-Python] Large Transfers
Message-ID: <200305100659.16865.uwe@oss4u.com>

Hi again,

in  another thread we had the "pb size limitation" issue. However it still 
doesn't make too much sense to me, so probably someone of the core developers 
can enlighten me.
Assume I have a remotecall using pb. According to the size limitation the 
parameters given to a specific function can not exceed 640kb. What if I hand 
over an object that exceeds the 640k ? Ok, the obvious happens and cBanana 
throws an error "security precaution ....."
Is this really a good thing to do ? Shouldn't pb see that the arguments are 
larger than 640k and start paging ?
What I'm doing is to hand down XML data which is database-generated on the 
server side. Whenever a user requests a too large resultset the network layer 
fails. On the other hand the resultset already is in memory, so why not jut 
transfer it ?
I realize that his is probably bad design, but it's the easiest way to 
transfer this information. Sure I can write the stuff to a temporary file and 
page it over, however this defies the purpose, since then the original call 
results in a message to go get the file. This means I need at least 4 
callbacks for any given call (the original ok callback, then another one for 
the possible paging as well as 2 error callbacks, one for each call)
I can extend the problem by compressing the parameters with zlib ( which I'm 
doing anyways), but at some point I will hit the limit.
The other problem this creates is a timing issue. Since I have to make several 
calls in order to transfer the resultset, I have to delay database calls 
until the whole resultset is valid.
To put it more technically:

self.perspective.transfer_large_result(small_int,label,large_result_array)

will fail if large_result_array exceeds 640k. However small_int and label can 
be transferred. The only way to do this is

if numberofbytes(large_result_set) >= 640k:
	
self.perspective.transfer_first_part(small_int,label).callback(self.smallpart_ok)

and in smallpart_ok

self.page_the_rest(large_result_array).callback(self.whole_stuff_transfered)

I can continue the flow of the application in whole_stuff_transfered, however 
I have to temporarily store the values of small_int and label, since I can't 
create a database record without the rest.

This is an enormous overhead.

What even strikes me more is that this size limit not even prevents large 
memory consumption - since the object is already there and in cBanana the 
object is already stored in the buffer.

So what makes is "more secure" to limit the size ??

I think I'll just remove all size limits and go thru the (unwanted) way to 
create a own package.


	UC

--
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417




From glyph at twistedmatrix.com  Sat May 10 08:31:52 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 10 May 2003 09:31:52 -0500
Subject: [Twisted-Python] Resource.render() returning NOT_DONE_YET
In-Reply-To: <20030510032223.GA4864@doublegemini.com>
Message-ID: <247A93DE-82F4-11D7-AD87-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Friday, May 9, 2003, at 10:22 PM, Clark C. Evans wrote:

> On Fri, May 09, 2003 at 05:02:30PM +0200, Matthias Urlichs wrote:
> | Clark C. Evans schrub am Mon, 28 Apr 2003 16:09:35 +0000:
> | I think that wouldn't work. Consider:

[some code which I basically repeat below]

> | This ends up calling req.finish() befor req.write().
>
> Just beacuse you can write code that will violate a
> given protocol doesn't mean it's a bad protocol.

While in theory he _could_, this example doesn't :-)  Chained Deferred 
results will make this Do The Right Thing.  To be sure, I asked the 
Python interpreter about it -

Python 2.2.2 (#1, 01/12/03, 07:51:34)
[GCC Apple cpp-precomp 6.14] on darwin
Type "help", "copyright", "credits" or "license" for more information.
 >>> from twisted.internet.defer import Deferred
 >>> def render(req):
...     d = somewhere.getDeferred()
...     d.addCallback(render_more, req)
...     return d
...
 >>> def render_more(result, req):
...     d = somewhere.getMoreDeferred(result)
...     d.addCallback(render_even_more, req)
...     return d
...
 >>> def render_even_more(result, req):
...     req.write("Done!")
...
 >>> class MyRequest:
...     def write(self, w):
...         self.events.append(('write', w))
...     def finish(self):
...         self.events.append('finish')
...
 >>> class Somewhere:
...     def getDeferred(self):
...         self.d1 = Deferred()
...         return self.d1
...     def getMoreDeferred(self, result):
...         self.d2 = Deferred()
...         return self.d2
...
 >>> somewhere = Somewhere()
 >>> def finishHim(lastResult, req):
...     req.finish()
...
 >>> def runIt():
...     r = MyRequest()
...     e = r.events = []
...     d = render(r)
...     d.addCallback(finishHim, r)
...     somewhere.d1.callback("result1")
...     somewhere.d2.callback("result2")
...     print e
...
 >>> runIt()
[('write', 'Done!'), 'finish']


-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+vQ1evVGR4uSOE2wRAkTIAKCESzfXgpQ5Ri5oYbjAqzlEt+xB7gCbBW+p
0FObyUElLwWVroj9lusUMR4=
=hzmx
-----END PGP SIGNATURE-----




From andrew-twisted at puzzling.org  Sat May 10 08:38:51 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sun, 11 May 2003 00:38:51 +1000
Subject: [Twisted-Python] Large Transfers
In-Reply-To: <200305100659.16865.uwe@oss4u.com>
References: <200305100659.16865.uwe@oss4u.com>
Message-ID: <20030510143851.GA29122@frobozz.local>

On Sat, May 10, 2003 at 06:59:16AM -0700, Uwe C. Schroeder wrote:
[..snip..]
> What I'm doing is to hand down XML data which is database-generated on the 
> server side. Whenever a user requests a too large resultset the network layer 
> fails. On the other hand the resultset already is in memory, so why not jut 
> transfer it ?
> I realize that his is probably bad design, but it's the easiest way to 
> transfer this information. Sure I can write the stuff to a temporary file and 
> page it over, however this defies the purpose, since then the original call 
> results in a message to go get the file. This means I need at least 4 

The PB paging support doesn't require you to write out to a file, look at
e.g. twisted.spread.pb.util.StringPager, the implementation is quite simple.

Does this solve your problem?  (I'm not a PB expert, so I can't really
answer your questions in depth).

-Andrew.




From itamar at itamarst.org  Sat May 10 08:50:31 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sat, 10 May 2003 10:50:31 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] Fix twistd(1) and friends on Windows.
In-Reply-To: <E19EUwv-00070a-00@pyramid.twistedmatrix.com>
References: <E19EUwv-00070a-00@pyramid.twistedmatrix.com>
Message-ID: <20030510105031.5210496c.itamar@itamarst.org>

On Sat, 10 May 2003 09:03:41 -0500
spiv CVS <spiv at twistedmatrix.com> wrote:
> 
> On Windows, twisted/script/* are run directly from batch files, rather
> than being imported from bin/*, so the "if __name__ == '__main__':
> run()" stanza is

This isn't totally accurate - the stuff in bin/ is installed in
c:\python22\scripts, and users are supposed to run them from there (eg
c:\python22\scripts\twistd.py).



From andrew-twisted at puzzling.org  Sat May 10 09:11:04 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sun, 11 May 2003 01:11:04 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] Fix twistd(1) and friends on Windows.
In-Reply-To: <20030510105031.5210496c.itamar@itamarst.org>
References: <E19EUwv-00070a-00@pyramid.twistedmatrix.com> <20030510105031.5210496c.itamar@itamarst.org>
Message-ID: <20030510151104.GB29122@frobozz.local>

On Sat, May 10, 2003 at 10:50:31AM -0400, Itamar Shtull-Trauring wrote:
> On Sat, 10 May 2003 09:03:41 -0500
> spiv CVS <spiv at twistedmatrix.com> wrote:
> > 
> > On Windows, twisted/script/* are run directly from batch files, rather
> > than being imported from bin/*, so the "if __name__ == '__main__':
> > run()" stanza is
> 
> This isn't totally accurate - the stuff in bin/ is installed in
> c:\python22\scripts, and users are supposed to run them from there (eg
> c:\python22\scripts\twistd.py).

Apparently this user was just running "twistd", no path or anything like
that.  mktap and trial worked fine for them, and twistd and lore, etc
didn't.  It turned out mktap and trial have the __name__ == '__main__' test
already, and that adding that to the rest of t.scripts fixed them, too.

My understanding was that the win32 installer auto-created batch files or
something, and supplied a "Twisted Command Prompt" with them in the path.
Certainly, adding "print 'I am', __name__" to this user's
twisted/scripts/twistd.py printed "I am __main__".  They were using the
1.0.5 from the installer and Python 2.2.2 on Win 98.

I don't have a Windows install to play with, so I'm working blind here --
please fix it differently if you think there's a better way to do this.  :)

-Andrew.




From m at moshez.org  Sat May 10 09:15:50 2003
From: m at moshez.org (Moshe Zadka)
Date: 10 May 2003 15:15:50 -0000
Subject: [Twisted-Python] Large Transfers
In-Reply-To: <200305100659.16865.uwe@oss4u.com>
References: <200305100659.16865.uwe@oss4u.com>
Message-ID: <20030510151550.22084.qmail@green.zadka.com>

On Sat, 10 May 2003, "Uwe C. Schroeder" <uwe at oss4u.com> wrote:

> in  another thread we had the "pb size limitation" issue. However it still 
> doesn't make too much sense to me, so probably someone of the core developers 
> can enlighten me.

The explanation is that the *other side* doesn't trust you -- maybe you're
trying to DoS it? This is a good design decision: you want multiple processes
to not trust each other. As an aside, whenever you hear the word "trust"
you should think "lack of security" -- by extension, "distrust" is "more
secure".

> Assume I have a remotecall using pb. According to the size limitation the 
> parameters given to a specific function can not exceed 640kb. What if I hand 
> over an object that exceeds the 640k ? Ok, the obvious happens and cBanana 
> throws an error "security precaution ....."

Yep. the cBanana on the other side decided that you looked like an evil
DoSer, and terminated you.

> Is this really a good thing to do ? Shouldn't pb see that the arguments are 
> larger than 640k and start paging ?

That's *way* to DWIMy, IMHO.

> What I'm doing is to hand down XML data which is database-generated on the 
> server side. Whenever a user requests a too large resultset the network layer 
> fails. On the other hand the resultset already is in memory, so why not jut 
> transfer it ?

Use StringPager. It's in memory. *Always* use StringPager, even if you're
below the security limit. 8k (by default) things will get transferred
in one go, larger strings will be sent in 8k chunks, allowing the other
side to digest them slowly without building big *intermediary* structures
in memory.

> So what makes is "more secure" to limit the size ??

That if your db-using process gets 0wned (if you pardon my trust),
it won't be able to drag down the other process.

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From m at moshez.org  Sat May 10 09:15:50 2003
From: m at moshez.org (Moshe Zadka)
Date: 10 May 2003 15:15:50 -0000
Subject: [Twisted-Python] Large Transfers
In-Reply-To: <200305100659.16865.uwe@oss4u.com>
References: <200305100659.16865.uwe@oss4u.com>
Message-ID: <20030510151550.22084.qmail@green.zadka.com>

On Sat, 10 May 2003, "Uwe C. Schroeder" <uwe at oss4u.com> wrote:

> in  another thread we had the "pb size limitation" issue. However it still 
> doesn't make too much sense to me, so probably someone of the core developers 
> can enlighten me.

The explanation is that the *other side* doesn't trust you -- maybe you're
trying to DoS it? This is a good design decision: you want multiple processes
to not trust each other. As an aside, whenever you hear the word "trust"
you should think "lack of security" -- by extension, "distrust" is "more
secure".

> Assume I have a remotecall using pb. According to the size limitation the 
> parameters given to a specific function can not exceed 640kb. What if I hand 
> over an object that exceeds the 640k ? Ok, the obvious happens and cBanana 
> throws an error "security precaution ....."

Yep. the cBanana on the other side decided that you looked like an evil
DoSer, and terminated you.

> Is this really a good thing to do ? Shouldn't pb see that the arguments are 
> larger than 640k and start paging ?

That's *way* to DWIMy, IMHO.

> What I'm doing is to hand down XML data which is database-generated on the 
> server side. Whenever a user requests a too large resultset the network layer 
> fails. On the other hand the resultset already is in memory, so why not jut 
> transfer it ?

Use StringPager. It's in memory. *Always* use StringPager, even if you're
below the security limit. 8k (by default) things will get transferred
in one go, larger strings will be sent in 8k chunks, allowing the other
side to digest them slowly without building big *intermediary* structures
in memory.

> So what makes is "more secure" to limit the size ??

That if your db-using process gets 0wned (if you pardon my trust),
it won't be able to drag down the other process.

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From miathan at goliath.darktech.org  Sat May 10 09:20:56 2003
From: miathan at goliath.darktech.org (W.J.)
Date: Sat, 10 May 2003 17:20:56 +0200 (CEST)
Subject: [Twisted-Python] components.Interface with pb.Referenceable
Message-ID: <Pine.LNX.4.44.0305101709560.5164-100000@zolder>

Hello,

I just can't seem to get some things straight about the Interface and
Component system used in Twisted.

Take for example Manhole;

The Interface defines three methods; console, receiveExplorer and
listCapabilities:

class IManholeClient(components.Interface):
    def console(self, list_of_messages):
    def receiveExplorer(self, xplorer):
    def listCapabilities(self):

In twisted/manhole/ui/gtk2manhole.py The class ManholeClient _claims_ to
implements this interface:

class ManholeClient(components.Adapter, pb.Referenceable):
    __implements__ = (IManholeClient,)

Well, strictly seen it doesn't. It defines the methods remote_console,
remote_receiveExplorer and remote_listCapabilities (!).

It does not define either of console, receiveExplorer and
listCapabilities.

What is the use of claiming it does implement it? Probably there is
something about interfaces used in the perspective broker that I don't
understand.

Why isn't there a different notation for remote and local
interfaces? Like ILocalManholeClient and IRemoteManholeClient, wherein the
first is like the current IManholeClient, and the second with
methods remote_ prefixes.

Wladimir





From glyph at twistedmatrix.com  Sat May 10 09:17:31 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 10 May 2003 10:17:31 -0500
Subject: [Twisted-Python] Large Transfers
In-Reply-To: <200305100659.16865.uwe@oss4u.com>
Message-ID: <8512E32F-82FA-11D7-AD87-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Saturday, May 10, 2003, at 08:59 AM, Uwe C. Schroeder wrote:

> Is this really a good thing to do ? Shouldn't pb see that the  
> arguments are
> larger than 640k and start paging ?

No, because this would violate lots of order-of-execution guarantees  
that PB normally provides.

Let's say that you did

	foo.callRemote("call1", "x" * 1024 * 1024)
	foo.callRemote("call2", "x")

You would expect 'call1' to execute before 'call2', right?  but no -  
because call1 began paging its arguments, call2 will be sent  
interleaved (the desired result for paged calls) and would execute  
first.

The same thing would be true of sending return values.

> What I'm doing is to hand down XML data which is database-generated on  
> the
> server side. Whenever a user requests a too large resultset the  
> network layer
> fails. On the other hand the resultset already is in memory, so why  
> not jut
> transfer it ?
> I realize that his is probably bad design

If your goal is to facilitate bad design with huge gobs of XML, PB is  
probably not for you.  There are a number of other protocols which are  
designed for exactly this kind of application - HTTP, XML/RPC, SOAP,  
depending on your level of complexity.  Twisted provides native support  
for the first 2, and SOAP could probably be added without too much  
trouble.

> , but it's the easiest way to
> transfer this information. Sure I can write the stuff to a temporary  
> file and
> page it over, however this defies the purpose, since then the original  
> call
> results in a message to go get the file. This means I need at least 4
> callbacks for any given call (the original ok callback, then another  
> one for
> the possible paging as well as 2 error callbacks, one for each call)

The error-handling needs to be improved, but this is what  
'twisted.spread.util.getAllPages' is for.  You only need one callback.

> I can extend the problem by compressing the parameters with zlib (  
> which I'm
> doing anyways), but at some point I will hit the limit.

Hard limits like this one should never be pushed so closely.  If your  
data is more than, say, 60k, you should probably be looking at paging  
it.  More than 500k and you are definitely abusing the protocol.

> The other problem this creates is a timing issue. Since I have to make  
> several
> calls in order to transfer the resultset, I have to delay database  
> calls
> until the whole resultset is valid.
> To put it more technically:
>
> self.perspective.transfer_large_result(small_int,label,large_result_arr 
> ay)
>
> will fail if large_result_array exceeds 640k. However small_int and  
> label can
> be transferred. The only way to do this is

> if numberofbytes(large_result_set) >= 640k:

Wrong.  If numberofbytes(large_result_set) + banana_epsilon(()) +  
pb_call_overhead ...

This is not a number that you can calculate reliably.  640k is a hard  
high limit.

> self.perspective.transfer_first_part(small_int,label).callback(self.sma 
> llpart_ok)

I don't understand.  Do you want to get the whole result at once?  Or  
do you want to send it only when necessary?  If you want to send it  
only when necessary then aren't these two steps required anyway?  If  
not, then can't you use the methods in twisted.spread.util to retrieve  
the pager when you would normally be retrieving a string, in the same  
step?

It would be helpful for my understanding if you would use real method  
names like "addCallback" and "callRemote" here.  I don't have any idea  
what 'self.perspective' is, or whether 'transfer_first_part' is  
supposed to be remote or local.

> and in smallpart_ok
>
> self.page_the_rest(large_result_array).callback(self.whole_stuff_transf 
> ered)

Again, not really sure what you're saying.  Why not -

	from twisted.spread import util
	util.getAllPages(serverThingy, "getStuff", small_int,  
label).addCallback(lambda l: ''.join(l)).addCallback(gotABigString)

> This is an enormous overhead.

as far as I understand it, the only overhead you require is that line  
above.  But I admit I do not understand it terribly well.

> What even strikes me more is that this size limit not even prevents  
> large
> memory consumption - since the object is already there and in cBanana  
> the
> object is already stored in the buffer.

Where is 'there'?

On the side of the connection that wishes to send the data, it's in  
memory.  If you modify the sending side locally, the whole string may  
even be in your outgoing buffer there, but on the receiving side only  
the beginning will be, since upon receiving the length it will  
terminate the connection.  (At least, I don't think TCP normally sends  
multi-megabyte packets.)

> I think I'll just remove all size limits and go thru the (unwanted)  
> way to create a own package.

Please, don't do this.  If PB is not working with your application, use  
something else.  This kind of a brute-force solution will undoubtedly  
cause problems down the road, and the people most suited to help you  
with them will not be interested in doing so.

There's nothing wrong with a hybrid approach, either.  You could  
transfer the file over HTTP rather than in the PB connection, but still  
use PB as your control protocol.  You could implement an even simpler  
file-transfer protocol reminiscent of HTTP/0.9 rather than use  
Twisted's full HTTP layer.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+vRgQvVGR4uSOE2wRAv60AJ46qvOBQAjiliEBKIAuGqP1vtibuwCff6DM
099lnO4JoOM0PphdHPK3+Ec=
=O9xE
-----END PGP SIGNATURE-----




From uwe at oss4u.com  Sat May 10 09:20:37 2003
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Sat, 10 May 2003 08:20:37 -0700
Subject: [Twisted-Python] Large Transfers
In-Reply-To: <20030510143851.GA29122@frobozz.local>
References: <200305100659.16865.uwe@oss4u.com> <20030510143851.GA29122@frobozz.local>
Message-ID: <200305100820.37149.uwe@oss4u.com>

You're right, it doesn't. However it still requires several calls to transfer 
the whole set. :-( And it has another problem. The pager makes it hard to 
give the user some response while uploading/downloading. The UI gets stuck, 
or at least appears to be since nothing is happening.
Basically I think pb should start paging whenever the argument list exceeds a 
certain size. I have no idea if paging is really neccessary, but I could 
think of some problems with blocking twisted while a non-paged transfer is in 
progress. This certainly depends on how the underlying transport is 
implemented. I'll do some tests with a modified twisted version and see if it 
gets too slow if a bunch of large transfers are in progress.


On Saturday 10 May 2003 07:38 am, Andrew Bennetts wrote:
> On Sat, May 10, 2003 at 06:59:16AM -0700, Uwe C. Schroeder wrote:
> [..snip..]
>
> > What I'm doing is to hand down XML data which is database-generated on
> > the server side. Whenever a user requests a too large resultset the
> > network layer fails. On the other hand the resultset already is in
> > memory, so why not jut transfer it ?
> > I realize that his is probably bad design, but it's the easiest way to
> > transfer this information. Sure I can write the stuff to a temporary file
> > and page it over, however this defies the purpose, since then the
> > original call results in a message to go get the file. This means I need
> > at least 4
>
> The PB paging support doesn't require you to write out to a file, look at
> e.g. twisted.spread.pb.util.StringPager, the implementation is quite
> simple.
>
> Does this solve your problem?  (I'm not a PB expert, so I can't really
> answer your questions in depth).
>
> -Andrew.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-- 
	UC

--
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417




From lafou at wanadoo.fr  Sat May 10 09:24:10 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: 10 May 2003 17:24:10 +0200
Subject: [Twisted-Python] Release notes for 1.0.5
Message-ID: <1052580243.10114.11.camel@biproc>

Hello,

the link in release notes for 1.0.5 is broken :

http://twistedmatrix.com/products/documents/howto/


-- 
Philippe Lafoucrière <lafou at wanadoo.fr>
InFuzzion




From uwe at oss4u.com  Sat May 10 09:33:19 2003
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Sat, 10 May 2003 08:33:19 -0700
Subject: [Twisted-Python] Large Transfers
In-Reply-To: <20030510151550.22084.qmail@green.zadka.com>
References: <200305100659.16865.uwe@oss4u.com> <20030510151550.22084.qmail@green.zadka.com>
Message-ID: <200305100833.19899.uwe@oss4u.com>

On Saturday 10 May 2003 08:15 am, Moshe Zadka wrote:
> On Sat, 10 May 2003, "Uwe C. Schroeder" <uwe at oss4u.com> wrote:
> > in  another thread we had the "pb size limitation" issue. However it
> > still doesn't make too much sense to me, so probably someone of the core
> > developers can enlighten me.
>
> The explanation is that the *other side* doesn't trust you -- maybe you're
> trying to DoS it? This is a good design decision: you want multiple
> processes to not trust each other. As an aside, whenever you hear the word
> "trust" you should think "lack of security" -- by extension, "distrust" is
> "more secure".

agreed

> > Assume I have a remotecall using pb. According to the size limitation the
> > parameters given to a specific function can not exceed 640kb. What if I
> > hand over an object that exceeds the 640k ? Ok, the obvious happens and
> > cBanana throws an error "security precaution ....."
>
> Yep. the cBanana on the other side decided that you looked like an evil
> DoSer, and terminated you.
>
> > Is this really a good thing to do ? Shouldn't pb see that the arguments
> > are larger than 640k and start paging ?
>
> That's *way* to DWIMy, IMHO.

but it would be more convenient and transparent for the programmer not to have 
take care of paging :-)

> > What I'm doing is to hand down XML data which is database-generated on
> > the server side. Whenever a user requests a too large resultset the
> > network layer fails. On the other hand the resultset already is in
> > memory, so why not jut transfer it ?
>
> Use StringPager. It's in memory. *Always* use StringPager, even if you're
> below the security limit. 8k (by default) things will get transferred
> in one go, larger strings will be sent in 8k chunks, allowing the other
> side to digest them slowly without building big *intermediary* structures
> in memory.

The busines logic behind it simply gets way to complicated if I have to 
separate calls into "small" and "large" ones. It's complicated already ( 
approaching 100k lines of code) and if I have to split the stuff and put some 
logic in there that catches the large calls and pages them it will add 
another 5k lines of code.

>
> > So what makes is "more secure" to limit the size ??
>
> That if your db-using process gets 0wned (if you pardon my trust),
> it won't be able to drag down the other process.

Well, unlikely but not a bad asumption. Better have it safe.
Since my application will run inside a trusted environment only (behind 
firewalls in an intranet) I think I'll just remove the size limit. Any 
connection from the outside will have to use VPN anyways, since I'm a 
distrusting person and won't let anyone into "my" network.

	UC

--
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417




From glyph at twistedmatrix.com  Sat May 10 09:34:59 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 10 May 2003 10:34:59 -0500
Subject: [Twisted-Python] Large Transfers
In-Reply-To: <200305100820.37149.uwe@oss4u.com>
Message-ID: <F5C3B5AC-82FC-11D7-AD87-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Saturday, May 10, 2003, at 10:20 AM, Uwe C. Schroeder wrote:

> The pager makes it hard to give the user some response while 
> uploading/downloading.

You have got this exactly backwards.  If you want to implement 
upload/download notification of some sort (let's say, a progress bar) 
then you are going to need something that looks like a pager, and if 
one didn't exist you would have to write it yourself.

Now, for a progress bar, you will need to write your own pager, since 
you'll need to hook into the 'data received' notifications that you 
get; but this could be a trivial subclass of CallbackPageCollector.  
getAllPages won't work for you at that point, but it is only 3 lines of 
code; not a terrible burden to rewrite.

> The UI gets stuck,

Unless you have an intentionally broken UI, this is not true.  The 
event loop will be running and data-received callbacks will be 
happening, so nothing is "stuck".

> or at least appears to be since nothing is happening.

No visible indication of progress, you mean.  What would be happening 
if PB *weren't* paging?
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+vRwsvVGR4uSOE2wRApruAJoDetOe+E3HHXfxedqXsL2BouORdwCghG6y
VMf66WttRikqww924stdVcw=
=4j7Y
-----END PGP SIGNATURE-----




From andrew-twisted at puzzling.org  Sat May 10 09:36:28 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sun, 11 May 2003 01:36:28 +1000
Subject: [Twisted-Python] Large Transfers
In-Reply-To: <200305100820.37149.uwe@oss4u.com>
References: <200305100659.16865.uwe@oss4u.com> <20030510143851.GA29122@frobozz.local> <200305100820.37149.uwe@oss4u.com>
Message-ID: <20030510153628.GC29122@frobozz.local>

On Sat, May 10, 2003 at 08:20:37AM -0700, Uwe C. Schroeder wrote:
> You're right, it doesn't. However it still requires several calls to transfer 
> the whole set. :-( And it has another problem. The pager makes it hard to 
> give the user some response while uploading/downloading. The UI gets stuck, 
> or at least appears to be since nothing is happening.

(Untested code)

class ProgressReportingStringPager(StringPager):
    def __init__(self, ui, *args, **kwargs):
        self.ui = ui
        StringPager.__init__(self, *args, **kwargs)
        
    def nextPage(self):
        StringPager.nextPage(self)
        self.ui.reportProgress(self.pointer/len(self.string))

I haven't tried, but it looks like something like that code could easily
give you progress reporting from your pager.  The paging code is really
quite simple.

-Andrew.




From glyph at twistedmatrix.com  Sat May 10 09:46:33 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 10 May 2003 10:46:33 -0500
Subject: [Twisted-Python] Large Transfers
In-Reply-To: <200305100833.19899.uwe@oss4u.com>
Message-ID: <92FDDFC7-82FE-11D7-AD87-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Saturday, May 10, 2003, at 10:33 AM, Uwe C. Schroeder wrote:

>> That's *way* to DWIMy, IMHO.
>
> but it would be more convenient and transparent for the programmer not 
> to have take care of paging :-)

And surprising in corner cases, and very difficult to debug.  This is 
basically the same case for using large numbers of threads rather than 
an event-driven API.  This is not how Twisted works.

In fact, we have taken great care to describe PB as a "translucent" 
remote access API, never "transparent".  Transparency is explicitly not 
a goal.

>> Use StringPager. It's in memory. *Always* use StringPager, even if 
>> you're below the security limit.
>
> The busines logic behind it simply gets way to complicated if I have 
> to separate calls into "small" and "large" ones.

Your response implies you have inverted Moshe's meaning.  I think what 
Moshe was saying, in your terminology, is: 'Do not separate calls into 
"small" and "large" ones.  Treat all calls as "large".  In the lowere 
levels of Twisted, this will do a reasonably efficient thing even if 
the data is actually small, and it will not complicate your code.'

> if I have to split the stuff and put some logic in there that catches 
> the large calls and pages them it will add another 5k lines of code.

Given the expansion that we have repeatedly given using 
twisted.spread.util (this may turn 1 line into 3 lines, although in 
most cases it just makes a slightly longer line) this implies that you 
have at least 1600 separate lines where you are doing a callRemote that 
is directly retrieving a potentially large XML payload.  It seems like 
this is something which you could get quite a bit of benefit out of 
abstracting into a thinner interface.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+vR7svVGR4uSOE2wRAgweAJwLXwdczFVevEBloRK+rDB0bfEH3gCfcOWx
7MbwYxG/2/LctNJ5EPJYfFk=
=Ehit
-----END PGP SIGNATURE-----




From andrew-twisted at puzzling.org  Sat May 10 09:52:18 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sun, 11 May 2003 01:52:18 +1000
Subject: [Twisted-Python] Large Transfers
In-Reply-To: <200305100833.19899.uwe@oss4u.com>
References: <200305100659.16865.uwe@oss4u.com> <20030510151550.22084.qmail@green.zadka.com> <200305100833.19899.uwe@oss4u.com>
Message-ID: <20030510155218.GD29122@frobozz.local>

On Sat, May 10, 2003 at 08:33:19AM -0700, Uwe C. Schroeder wrote:
> On Saturday 10 May 2003 08:15 am, Moshe Zadka wrote:
> > On Sat, 10 May 2003, "Uwe C. Schroeder" <uwe at oss4u.com> wrote:
> >
> > > Is this really a good thing to do ? Shouldn't pb see that the arguments
> > > are larger than 640k and start paging ?
> >
> > That's *way* to DWIMy, IMHO.
> 
> but it would be more convenient and transparent for the programmer not to have 
> take care of paging :-)

PB isn't about transparency.  Remote method calls are fundamentally
different to local method calls -- they can be arbitrarily slow, they can
even fail due to network outages, and both ends generally need to have a
healthy distrust of the other, to protect against hostile servers and/or
clients.  Attempting to transparently treat remote calls like local calls is
a bad idea.

PB is *translucent*.  It doesn't pretend that remote method calls are the
same as local ones, because pretending they are will cause you grief.
That's why remote calls return Deferreds, rather than blocking.  That's why
you have to do remoteObject.callRemote('method'), rather than just
remoteObject.method() -- originally you could do it the latter way, and it
changed because a remote method calls should be explicit.

Automatically paging huge objects would contradict PB's design philosophy.

640k-should-be-enough-for-anyone-ly yrs, Andrew.




From bh at intevation.de  Sat May 10 10:01:40 2003
From: bh at intevation.de (Bernhard Herzog)
Date: 10 May 2003 18:01:40 +0200
Subject: [Twisted-Python] Large Transfers
In-Reply-To: <20030510151550.22084.qmail@green.zadka.com>
References: <200305100659.16865.uwe@oss4u.com>
	<20030510151550.22084.qmail@green.zadka.com>
Message-ID: <6q1xz6n63f.fsf@salmakis.intevation.de>

Moshe Zadka <m at moshez.org> writes:

> On Sat, 10 May 2003, "Uwe C. Schroeder" <uwe at oss4u.com> wrote:
> 
> > in  another thread we had the "pb size limitation" issue. However it still 
> > doesn't make too much sense to me, so probably someone of the core developers 
> > can enlighten me.
> 
> The explanation is that the *other side* doesn't trust you -- maybe you're
> trying to DoS it? This is a good design decision: you want multiple processes
> to not trust each other. As an aside, whenever you hear the word "trust"
> you should think "lack of security" -- by extension, "distrust" is "more
> secure".

ISTM that this approach doesn't really give you much security. It only
helps against accidentally large chunks of data.

The tests, AFAICT, simply check the length (as defined by the len
builtin) of lists, tuples and strings. So if the sender can't send e.g.
[0] * 1000000, it could just as well send [[0] * 1000 for i in range(1000)]
which would consume roughly the same amount of memory on the receiver's
side but would pass all the SIZE_LIMT tests. Using a large dictionary
seems to work too.

A better solution for limiting the size seems to be a limit on the
number of bytes accepted by the receiver for a single PB call.

Anyway, limits on the data size should be configurable IMO so that
programmers can set the limit based on the needs of their applications.

Finally, forcing users of PB to use a different protocol for large
datasets doesn't improve matters. If a malicious user can exploit the PB
connection they can also exploit this other protocol which of course has
no size limit because that's the reason to use it in the first place.


  Bernhard

-- 
Intevation GmbH                                 http://intevation.de/
Sketch                                 http://sketch.sourceforge.net/
MapIt!                                           http://www.mapit.de/



From uwe at oss4u.com  Sat May 10 10:03:18 2003
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Sat, 10 May 2003 09:03:18 -0700
Subject: [Twisted-Python] Large Transfers
In-Reply-To: <8512E32F-82FA-11D7-AD87-000393C9700E@twistedmatrix.com>
References: <8512E32F-82FA-11D7-AD87-000393C9700E@twistedmatrix.com>
Message-ID: <200305100903.18677.uwe@oss4u.com>

On Saturday 10 May 2003 08:17 am, Glyph Lefkowitz wrote:
> On Saturday, May 10, 2003, at 08:59 AM, Uwe C. Schroeder wrote:
> > Is this really a good thing to do ? Shouldn't pb see that the
> > arguments are
> > larger than 640k and start paging ?
>
> No, because this would violate lots of order-of-execution guarantees
> that PB normally provides.
>
> Let's say that you did
>
> 	foo.callRemote("call1", "x" * 1024 * 1024)
> 	foo.callRemote("call2", "x")
>
> You would expect 'call1' to execute before 'call2', right?  but no -
> because call1 began paging its arguments, call2 will be sent
> interleaved (the desired result for paged calls) and would execute
> first.

Hmmm - you'd call foo.callRemote("call2", "x") in the callback of the first 
call, since both calls return a defered. You can't rely on the first call 
being completed before issuing the next one. Well, you can, but that is not 
quite safe. If the two calls depend on each other you have to call the second 
one in the callback of the first one. If the calls are not related, the 
execution order isn't that important (well, at least I can't think of a case 
right now where it would be)

>
> The same thing would be true of sending return values.
>
> > What I'm doing is to hand down XML data which is database-generated on
> > the
> > server side. Whenever a user requests a too large resultset the
> > network layer
> > fails. On the other hand the resultset already is in memory, so why
> > not jut
> > transfer it ?
> > I realize that his is probably bad design

> If your goal is to facilitate bad design with huge gobs of XML, PB is
> probably not for you.  There are a number of other protocols which are
> designed for exactly this kind of application - HTTP, XML/RPC, SOAP,
> depending on your level of complexity.  Twisted provides native support
> for the first 2, and SOAP could probably be added without too much
> trouble.

Yep, XML/RPC might be the right thing. SOAP has nice features but I don't like 
the bulky approach.


> > , but it's the easiest way to
> > transfer this information. Sure I can write the stuff to a temporary
> > file and
> > page it over, however this defies the purpose, since then the original
> > call
> > results in a message to go get the file. This means I need at least 4
> > callbacks for any given call (the original ok callback, then another
> > one for
> > the possible paging as well as 2 error callbacks, one for each call)
>
> The error-handling needs to be improved, but this is what
> 'twisted.spread.util.getAllPages' is for.  You only need one callback.

Didn't see that one.

> > I can extend the problem by compressing the parameters with zlib (
> > which I'm
> > doing anyways), but at some point I will hit the limit.
>
> Hard limits like this one should never be pushed so closely.  If your
> data is more than, say, 60k, you should probably be looking at paging
> it.  More than 500k and you are definitely abusing the protocol.

no argument about that

> > The other problem this creates is a timing issue. Since I have to make
> > several
> > calls in order to transfer the resultset, I have to delay database
> > calls
> > until the whole resultset is valid.
> > To put it more technically:
> >
> > self.perspective.transfer_large_result(small_int,label,large_result_arr
> > ay)
> >
> > will fail if large_result_array exceeds 640k. However small_int and
> > label can
> > be transferred. The only way to do this is
> >
> > if numberofbytes(large_result_set) >= 640k:

> Wrong.  If numberofbytes(large_result_set) + banana_epsilon(()) +
> pb_call_overhead ...

yeah - just wwanted to keep it simple :-)

> This is not a number that you can calculate reliably.  640k is a hard
> high limit.
>
> > self.perspective.transfer_first_part(small_int,label).callback(self.sma
> > llpart_ok)
>
> I don't understand.  Do you want to get the whole result at once?  Or
> do you want to send it only when necessary?  If you want to send it
> only when necessary then aren't these two steps required anyway?  If
> not, then can't you use the methods in twisted.spread.util to retrieve
> the pager when you would normally be retrieving a string, in the same
> step?

I do not WANT to get the whole thing, sadly I NEED the whole thing.


> It would be helpful for my understanding if you would use real method
> names like "addCallback" and "callRemote" here.  I don't have any idea
> what 'self.perspective' is, or whether 'transfer_first_part' is
> supposed to be remote or local.

well, I thought that would be clear. perspective is a pb.Perspective, callback 
is addCallback. The whole thing is on the initiating side, which could be 
server or client, since those chunks get sent in both directions and I have 
the initiating side actively SEND it and not the receiver fetch it.

>
> > and in smallpart_ok
> >
> > self.page_the_rest(large_result_array).callback(self.whole_stuff_transf
> > ered)
>
> Again, not really sure what you're saying.  Why not -
>
> 	from twisted.spread import util
> 	util.getAllPages(serverThingy, "getStuff", small_int,
> label).addCallback(lambda l: ''.join(l)).addCallback(gotABigString)
>
> > This is an enormous overhead.
>
> as far as I understand it, the only overhead you require is that line
> above.  But I admit I do not understand it terribly well.

Me neither :-) I'll do some tests to see if I can put that in easily. I'd 
prefere a solution that uses standard Twisted without modifying it.

> > What even strikes me more is that this size limit not even prevents
> > large
> > memory consumption - since the object is already there and in cBanana
> > the
> > object is already stored in the buffer.
>
> Where is 'there'?
>
> On the side of the connection that wishes to send the data, it's in
> memory.  If you modify the sending side locally, the whole string may
> even be in your outgoing buffer there, but on the receiving side only
> the beginning will be, since upon receiving the length it will
> terminate the connection.  (At least, I don't think TCP normally sends
> multi-megabyte packets.)

Nope, TCP doesn't. Why will it terminate the connection ? 

> > I think I'll just remove all size limits and go thru the (unwanted)
> > way to create a own package.
>
> Please, don't do this.  If PB is not working with your application, use
> something else.  This kind of a brute-force solution will undoubtedly
> cause problems down the road, and the people most suited to help you
> with them will not be interested in doing so.
>
> There's nothing wrong with a hybrid approach, either.  You could
> transfer the file over HTTP rather than in the PB connection, but still
> use PB as your control protocol.  You could implement an even simpler
> file-transfer protocol reminiscent of HTTP/0.9 rather than use
> Twisted's full HTTP layer.

For some reasons beyond my influence I can't use more than one port. If I 
could talk "them" into using several ports I'd love to do that. For that 
reason I have to find a way to handle everything with one port. XML/RPC was 
my original protocol choice, however I think pb is much nicer :-)


	UC

--
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417




From andrew-twisted at puzzling.org  Sat May 10 10:17:30 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sun, 11 May 2003 02:17:30 +1000
Subject: [Twisted-Python] Large Transfers
In-Reply-To: <6q1xz6n63f.fsf@salmakis.intevation.de>
References: <200305100659.16865.uwe@oss4u.com> <20030510151550.22084.qmail@green.zadka.com> <6q1xz6n63f.fsf@salmakis.intevation.de>
Message-ID: <20030510161730.GB20345@frobozz.local>

On Sat, May 10, 2003 at 06:01:40PM +0200, Bernhard Herzog wrote:
> 
> The tests, AFAICT, simply check the length (as defined by the len
> builtin) of lists, tuples and strings. So if the sender can't send e.g.
> [0] * 1000000, it could just as well send [[0] * 1000 for i in range(1000)]
> which would consume roughly the same amount of memory on the receiver's
> side but would pass all the SIZE_LIMT tests. Using a large dictionary
> seems to work too.
> 
> A better solution for limiting the size seems to be a limit on the
> number of bytes accepted by the receiver for a single PB call.

You seem to be misunderstanding the difference between PB and Banana.  The
limit is in the Banana layer, so that it can remain simple and fast.  A long
list of small items breaks into small pieces at the Banana level already.  

I expect the Unjellying layer could refuse to reassemble lists and
dictionaries beyond a certain size (although it doesn't appear to do that at
the moment).  This is possibly something worth looking into... a
twisted.spread guru could might be able to comment more usefully here.

-Andrew.




From uwe at oss4u.com  Sat May 10 10:20:30 2003
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Sat, 10 May 2003 09:20:30 -0700
Subject: [Twisted-Python] Large Transfers
In-Reply-To: <6q1xz6n63f.fsf@salmakis.intevation.de>
References: <200305100659.16865.uwe@oss4u.com> <20030510151550.22084.qmail@green.zadka.com> <6q1xz6n63f.fsf@salmakis.intevation.de>
Message-ID: <200305100920.30064.uwe@oss4u.com>

On Saturday 10 May 2003 09:01 am, Bernhard Herzog wrote:
> Moshe Zadka <m at moshez.org> writes:
> > On Sat, 10 May 2003, "Uwe C. Schroeder" <uwe at oss4u.com> wrote:
> > > in  another thread we had the "pb size limitation" issue. However it
> > > still doesn't make too much sense to me, so probably someone of the
> > > core developers can enlighten me.
> >
> > The explanation is that the *other side* doesn't trust you -- maybe
> > you're trying to DoS it? This is a good design decision: you want
> > multiple processes to not trust each other. As an aside, whenever you
> > hear the word "trust" you should think "lack of security" -- by
> > extension, "distrust" is "more secure".
>
> ISTM that this approach doesn't really give you much security. It only
> helps against accidentally large chunks of data.
>
> The tests, AFAICT, simply check the length (as defined by the len
> builtin) of lists, tuples and strings. So if the sender can't send e.g.
> [0] * 1000000, it could just as well send [[0] * 1000 for i in range(1000)]
> which would consume roughly the same amount of memory on the receiver's
> side but would pass all the SIZE_LIMT tests. Using a large dictionary
> seems to work too.

Since a DoS is basically bombarding the target, neither approach will 
guarantee security. For the receiver it might be even worse to get 1M calls 
with 100 bytes each.
To really get security here you'd have to limit the number of calls in a 
certain timeframe as well as the maximum size of each call.

> A better solution for limiting the size seems to be a limit on the
> number of bytes accepted by the receiver for a single PB call.

as far as I understand it the 640k ARE the limit for one single PB call.

>
> Anyway, limits on the data size should be configurable IMO so that
> programmers can set the limit based on the needs of their applications.

This might be correct, however if you design a certain protocol you usually 
imply certain restrictions. From that point of view I must say Glyph is 
having a point here.

	UC

--
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417




From uwe at oss4u.com  Sat May 10 10:45:44 2003
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Sat, 10 May 2003 09:45:44 -0700
Subject: [Twisted-Python] Large Transfers
In-Reply-To: <20030510153628.GC29122@frobozz.local>
References: <200305100659.16865.uwe@oss4u.com> <200305100820.37149.uwe@oss4u.com> <20030510153628.GC29122@frobozz.local>
Message-ID: <200305100945.44548.uwe@oss4u.com>

Ok, I think we all agree that changing Twisted internally to reach a certain 
goal isn't the good choice here. It would be if the benefit was for 
everyone's use.
Asuming I have a pb connection open.
(snippet)
p is the pb.Perspective
parameters is a "small" parameterset (a couple of int's or so)
resultset is [ int, int, string, huge string ]

p.callRemote('getResult',(parameters)).addCallbacks(ok, nok)

def ok(resultset):
	do something with the resultset here  

def nok(error):
	throw error in UI here

If the above is the code, how could I change it using pagers ?
I need the int,int,string result together with the "huge string" result. I 
don't want to use self.int1, self.int2 etc. constructs since it's temporary 
data, so I'd have to give the small results as parameters to the callback 
being called when paging the large part finishes. I'd also need an error 
callback, which I can't find in the pager implementation at all. The "huge 
String" will allways be a string, since the server side will compress 
(possibly encrypt) and base64 encode it anyways.
The current user feedback implementation isn't really one, so maybe I can even 
improve here. Currently it behaves like the netscape or mozilla logo - it 
moves until the data is there. If I can hook into the pager I might be able 
to give real feedback in form of a progress bar or so.

Any ideas ?

On Saturday 10 May 2003 08:36 am, Andrew Bennetts wrote:
> On Sat, May 10, 2003 at 08:20:37AM -0700, Uwe C. Schroeder wrote:
> > You're right, it doesn't. However it still requires several calls to
> > transfer the whole set. :-( And it has another problem. The pager makes
> > it hard to give the user some response while uploading/downloading. The
> > UI gets stuck, or at least appears to be since nothing is happening.
>
> (Untested code)
>
> class ProgressReportingStringPager(StringPager):
>     def __init__(self, ui, *args, **kwargs):
>         self.ui = ui
>         StringPager.__init__(self, *args, **kwargs)
>
>     def nextPage(self):
>         StringPager.nextPage(self)
>         self.ui.reportProgress(self.pointer/len(self.string))
>
> I haven't tried, but it looks like something like that code could easily
> give you progress reporting from your pager.  The paging code is really
> quite simple.
>
> -Andrew.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-- 
	UC

--
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417




From bh at intevation.de  Sat May 10 11:50:54 2003
From: bh at intevation.de (Bernhard Herzog)
Date: 10 May 2003 19:50:54 +0200
Subject: [Twisted-Python] Large Transfers
In-Reply-To: <20030510161730.GB20345@frobozz.local>
References: <200305100659.16865.uwe@oss4u.com>
	<20030510151550.22084.qmail@green.zadka.com>
	<6q1xz6n63f.fsf@salmakis.intevation.de>
	<20030510161730.GB20345@frobozz.local>
Message-ID: <6qsmrmlmgx.fsf@salmakis.intevation.de>

Andrew Bennetts <andrew-twisted at puzzling.org> writes:

> On Sat, May 10, 2003 at 06:01:40PM +0200, Bernhard Herzog wrote:
> > 
> > The tests, AFAICT, simply check the length (as defined by the len
> > builtin) of lists, tuples and strings. So if the sender can't send e.g.
> > [0] * 1000000, it could just as well send [[0] * 1000 for i in range(1000)]
> > which would consume roughly the same amount of memory on the receiver's
> > side but would pass all the SIZE_LIMT tests. Using a large dictionary
> > seems to work too.
> > 
> > A better solution for limiting the size seems to be a limit on the
> > number of bytes accepted by the receiver for a single PB call.
> 
> You seem to be misunderstanding the difference between PB and Banana.

While I wouldn't claim to understand all of it, I am aware that PB !=
Banana. But PB uses Banana AFAIK, so any limit in Banana is also a limit
in PB.

>  The limit is in the Banana layer, so that it can remain simple and
> fast.

But why hardwire it?

> A long list of small items breaks into small pieces at the Banana
> level already.

I'm not sure what's this supposed to mean. If I try to send [0] * 1000000
via PB I do get an error because of the size limit, while
[[0] * 1000 for i in range(1000)] works (at least with the Python
implementation, I didn't try cBanana). Is one of them handled completely
at the banana-level and the other isn't?

   Bernhard

-- 
Intevation GmbH                                 http://intevation.de/
Sketch                                 http://sketch.sourceforge.net/
MapIt!                                           http://www.mapit.de/



From bh at intevation.de  Sat May 10 12:02:41 2003
From: bh at intevation.de (Bernhard Herzog)
Date: 10 May 2003 20:02:41 +0200
Subject: [Twisted-Python] Large Transfers
In-Reply-To: <200305100920.30064.uwe@oss4u.com>
References: <200305100659.16865.uwe@oss4u.com>
	<20030510151550.22084.qmail@green.zadka.com>
	<6q1xz6n63f.fsf@salmakis.intevation.de>
	<200305100920.30064.uwe@oss4u.com>
Message-ID: <6qptmqllxa.fsf@salmakis.intevation.de>

"Uwe C. Schroeder" <uwe at oss4u.com> writes:

> On Saturday 10 May 2003 09:01 am, Bernhard Herzog wrote:
> > A better solution for limiting the size seems to be a limit on the
> > number of bytes accepted by the receiver for a single PB call.
> 
> as far as I understand it the 640k ARE the limit for one single PB call.

640k /Bytes/ is only a limit for a single string. There's also a limit
of 640 * 1024 items in lists and tuples. 

You could send large strings by simply slicing them into chunks of e.g.
8K each and sending them as a list. At the other end you simply "".join
them. With a limit of 640 * 1024 such strings in a list you should be
able to send any string that fits into memory on most systems.

> > Anyway, limits on the data size should be configurable IMO so that
> > programmers can set the limit based on the needs of their applications.
> 
> This might be correct, however if you design a certain protocol you usually 
> imply certain restrictions. From that point of view I must say Glyph is 
> having a point here.

He might well have a point, but I don't understand it :(. 
The limit can easily be circumvented by malicious users and for the
users it only seems to put it arbitrary restrictions.

   Bernhard

-- 
Intevation GmbH                                 http://intevation.de/
Sketch                                 http://sketch.sourceforge.net/
MapIt!                                           http://www.mapit.de/



From m at moshez.org  Sat May 10 12:57:56 2003
From: m at moshez.org (Moshe Zadka)
Date: 10 May 2003 18:57:56 -0000
Subject: [Twisted-Python] Large Transfers
In-Reply-To: <200305100833.19899.uwe@oss4u.com>
References: <200305100833.19899.uwe@oss4u.com>, <200305100659.16865.uwe@oss4u.com> <20030510151550.22084.qmail@green.zadka.com>
Message-ID: <20030510185756.28753.qmail@green.zadka.com>

On Sat, 10 May 2003, "Uwe C. Schroeder" <uwe at oss4u.com> wrote:

> but it would be more convenient and transparent for the programmer not to
> have take care of paging :-)

No, it wouldn't. Paging is a programmer-level thing, not a protocol-level
thing. For example, the programmer needs to realize that the memory
buffer might stay in memory for a long time.

> The busines logic behind it simply gets way to complicated if I have to 
> separate calls into "small" and "large" ones.

Don't do that. *Always* use Pager. I merely noted there's no significant
penalty in the case where the buffers are small.

> Well, unlikely but not a bad asumption.

The only way to have real security is to expect the unexpected. Just
because you don't expect anyone to break down your door doesn't mean
you don't lock your valuables in a safe :)

> Since my application will run inside a trusted environment only 

No such thing.
I point above to where I remarked that whenever I hear someone say
"trust" I translate it in my brain to "this is going to be a cracker's
paradise". Lack of trust is good. And for the record, firewalls do
not provide security, contrary to what people may think. They provide
many useful features, but security is not one of them.

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From m at moshez.org  Sat May 10 13:04:04 2003
From: m at moshez.org (Moshe Zadka)
Date: 10 May 2003 19:04:04 -0000
Subject: [Twisted-Python] Large Transfers
In-Reply-To: <8512E32F-82FA-11D7-AD87-000393C9700E@twistedmatrix.com>
References: <8512E32F-82FA-11D7-AD87-000393C9700E@twistedmatrix.com>
Message-ID: <20030510190404.28856.qmail@green.zadka.com>

On Sat, 10 May 2003, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> If your goal is to facilitate bad design with huge gobs of XML, PB is  
> probably not for you.  There are a number of other protocols which are  
> designed for exactly this kind of application - HTTP, XML/RPC, SOAP,  
> depending on your level of complexity.  Twisted provides native support  
> for the first 2, and SOAP could probably be added without too much  
> trouble.

For the record, we do support SOAP servers. IIRC, we don't have any
SOAP client support, but it should be a pretty trivial adaptation
of the XML-RPC client code to use soaplib.

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From uwe at oss4u.com  Sat May 10 13:31:26 2003
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Sat, 10 May 2003 12:31:26 -0700
Subject: [Twisted-Python] Large Transfers
In-Reply-To: <20030510185756.28753.qmail@green.zadka.com>
References: <200305100833.19899.uwe@oss4u.com> <20030510151550.22084.qmail@green.zadka.com> <20030510185756.28753.qmail@green.zadka.com>
Message-ID: <200305101231.26722.uwe@oss4u.com>

On Saturday 10 May 2003 11:57 am, Moshe Zadka wrote:
> On Sat, 10 May 2003, "Uwe C. Schroeder" <uwe at oss4u.com> wrote:
> > but it would be more convenient and transparent for the programmer not to
> > have take care of paging :-)
>
> No, it wouldn't. Paging is a programmer-level thing, not a protocol-level
> thing. For example, the programmer needs to realize that the memory
> buffer might stay in memory for a long time.
>
> > The busines logic behind it simply gets way to complicated if I have to
> > separate calls into "small" and "large" ones.
>
> Don't do that. *Always* use Pager. I merely noted there's no significant
> penalty in the case where the buffers are small.

Well, maybe I'm stupid or so. Someone then minds to explain the pagers ? There 
is basically no documentation about them and from the code they are far from 
easy to understand. What gets executed where exactly ?  

> > Well, unlikely but not a bad asumption.
>
> The only way to have real security is to expect the unexpected. Just
> because you don't expect anyone to break down your door doesn't mean
> you don't lock your valuables in a safe :)

To put it that way. The only way to have a decent amount of security is to 
turn your computer off and lock it into a safe. And even then there might be 
bad guys.

>
> > Since my application will run inside a trusted environment only
>
> No such thing.
> I point above to where I remarked that whenever I hear someone say
> "trust" I translate it in my brain to "this is going to be a cracker's
> paradise". Lack of trust is good. And for the record, firewalls do
> not provide security, contrary to what people may think. They provide
> many useful features, but security is not one of them.

So where do you put your paycheck ? Into a "trusted" bank account ??
What are the useful features of a firewall besides making is hard to create 
connections ? If I run a webserver inside a firewalled LAN and block all 
ports on the firewall, how is a hacker supposed to take advantage of port 80, 
except if he hacks the firewall (which might be hard in this case since, 
remember: all ports blocked, no incoming transmission allowed)
I'd say firewalls increase the level of security, they don't provide 100% 
security. I'm btw not talking about packet-filters, often sold as firewall.

	UC

--
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417




From lists at ghaering.de  Sat May 10 13:58:23 2003
From: lists at ghaering.de (=?ISO-8859-1?Q?Gerhard_H=E4ring?=)
Date: Sat, 10 May 2003 21:58:23 +0200
Subject: [Twisted-Python] Large Transfers
In-Reply-To: <200305101231.26722.uwe@oss4u.com>
References: <200305100833.19899.uwe@oss4u.com>
	<20030510151550.22084.qmail@green.zadka.com>
	<20030510185756.28753.qmail@green.zadka.com>
	<200305101231.26722.uwe@oss4u.com>
Message-ID: <3EBD59DF.7080909@ghaering.de>

Uwe C. Schroeder wrote:
> [...] If I run a webserver inside a firewalled LAN

So you're running the webserver with a local IP address that isn't 
accessible via the LAN.

> and block all ports on the firewall, 

This is redundant if you don't offer the services to the outside, 
anyway. Redundancy is generally a good thing, but the services should be 
properly configured in the first place.

> [...] I'm btw not talking about packet-filters, often sold as firewall.

A firewall is a security concept, not a single piece of software. Packet 
filters might be part of that security concept.

Your name sounds German, if you can read German, these resources are 
valuable:

de.comp.security.firewall FAQ:
http://www.iks-jena.de/mitarb/lutz/usenet/Firewall.html

A nice summary about personal firewalls (in English): 
http://www.fefe.de/pffaq/

"""
**Personal Firewall Security FAQ**
*Executive Summary*
Q: Do Personal Firewalls improve security?

A: No.

Q: Why do so many people install them, then?

A: Because those people are all idiots.

*Details*
[...]
"""

-- Gerhard



From uwe at oss4u.com  Sat May 10 15:20:10 2003
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Sat, 10 May 2003 14:20:10 -0700
Subject: [Twisted-Python] Large Transfers
In-Reply-To: <3EBD59DF.7080909@ghaering.de>
References: <200305100833.19899.uwe@oss4u.com> <200305101231.26722.uwe@oss4u.com> <3EBD59DF.7080909@ghaering.de>
Message-ID: <200305101420.10943.uwe@oss4u.com>

On Saturday 10 May 2003 12:58 pm, Gerhard Häring wrote:
> Uwe C. Schroeder wrote:
> > [...] If I run a webserver inside a firewalled LAN
>
> So you're running the webserver with a local IP address that isn't
> accessible via the LAN.

That wouldn't make too much sense, would it ?
I'm running the server inside the LAN on a RFC address. So the server is 
accessible from the LAN, however since the firewall blocks all incoming 
traffic it won't be accessible from the outside (assuming you have a firewall 
and use IP-NAT )


> > and block all ports on the firewall,
>
> This is redundant if you don't offer the services to the outside,
> anyway. Redundancy is generally a good thing, but the services should be
> properly configured in the first place.

No it's not redundant. Just take a LAN and unplug the link to the internet. 
This is basically the setup (except that you also won't have outgoing stuff)

> > [...] I'm btw not talking about packet-filters, often sold as firewall.
>
> A firewall is a security concept, not a single piece of software. Packet
> filters might be part of that security concept.

Correct, that's excatly what I'm talking about.


> Your name sounds German, if you can read German, these resources are
> valuable:
>
> de.comp.security.firewall FAQ:
> http://www.iks-jena.de/mitarb/lutz/usenet/Firewall.html
>
> A nice summary about personal firewalls (in English):
> http://www.fefe.de/pffaq/

:-))) Well, we're living in a real world - in an ideal world there would be no 
advanced bootstrap loader called windows. Sadly too many people buy the crap, 
then complain about "security" as they perceive it and buy stuff like 
"wingate".
 
BTW: if you're ever looking for a good firewall in germany, take a look at 
www.genua.de. Magnus Harlander (founder and owner) is a real capacity when it 
comes to security. I was working with him for a couple of years before I 
immigrated to the US.


	UC

--
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417




From acapnotic at twistedmatrix.com  Sat May 10 16:29:07 2003
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 10 May 2003 15:29:07 -0700
Subject: [Twisted-Python] pcp.ProducerConsumerProxy.resumeProducing
In-Reply-To: <20030509015645.GA3694@localhost.localdomain>
References: <20030509015645.GA3694@localhost.localdomain>
Message-ID: <1052602189.9919.200.camel@troglodyte.funhouse>

On Thu, 2003-05-08 at 18:56, Eric C. Newton wrote:
> It's possible that the producer is sending data in big chunks, and we
> are only writing them out in little chunks.  If so, we continue to add
> bytes to the buffer and disregard the buffer limit.  I've changed the
> line to this:

Eric,

can you write a test for this? twisted.test.test_pcp or test_htb, as
appropriate.  I'll take a more detailed look at this soon.

Thanks,

 - Kevin

-- 
The moon is first quarter, 62.0% illuminated, 8.5 days old.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20030510/e4b8a536/attachment.sig>

From glyph at twistedmatrix.com  Sat May 10 16:32:21 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 10 May 2003 17:32:21 -0500
Subject: [Twisted-Python] Large Transfers
In-Reply-To: <6qsmrmlmgx.fsf@salmakis.intevation.de>
Message-ID: <44188EC5-8337-11D7-AD87-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Saturday, May 10, 2003, at 12:50 PM, Bernhard Herzog wrote:

> I'm not sure what's this supposed to mean. If I try to send [0] * 
> 1000000
> via PB I do get an error because of the size limit, while
> [[0] * 1000 for i in range(1000)] works (at least with the Python
> implementation, I didn't try cBanana). Is one of them handled 
> completely
> at the banana-level and the other isn't?

Right now, you're right that these limits are fairly arbitrary.  
However, it would be a waste of time to explain why they're all 
implemented this way and where the responsibilities lie, because the 
current code is somewhat grotty and is due for a rewrite RSN.  (Don't 
worry - both protocol-level and API-level compatibility should be 
preserved, though newer peers speaking to older peers will be somewhat 
less efficient than new peers talking to new peers.)

Future size limits will be a little fuzzier and more targetted at 
resource consumption rather than data-size limits.

The short answer, though, why this is done this way: once something is 
out of the Banana level you can have a Python policy for limiting it.  
In the banana code, there's not much you can do efficiently, so the 
only size limitations are a length check.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+vX35vVGR4uSOE2wRAt/6AKCyOnStZ7e8I5Xjwk0u8wIno66/dwCfUOqY
IuSrmQLm+WfEyxgwxV2H16A=
=DAxz
-----END PGP SIGNATURE-----




From smurf at noris.de  Sat May 10 16:43:48 2003
From: smurf at noris.de (Matthias Urlichs)
Date: Sun, 11 May 2003 00:43:48 +0200
Subject: [Twisted-Python] Resource.render() returning NOT_DONE_YET
References: <20030510032223.GA4864@doublegemini.com> <247A93DE-82F4-11D7-AD87-000393C9700E@twistedmatrix.com>
Message-ID: <pan.2003.05.10.22.43.48.272548@smurf.noris.de>

Hi,

Glyph Lefkowitz:
> While in theory he _could_, this example doesn't :-)  Chained Deferred 
> results will make this Do The Right Thing.  To be sure, I asked the 
> Python interpreter about it -

stare at code
scratch head
stare some more
*lightbulb goes off*  Nice.  Thank you.

-- 
Matthias



From acapnotic at twistedmatrix.com  Sat May 10 17:21:19 2003
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 10 May 2003 16:21:19 -0700
Subject: [Twisted-Python] web site down
In-Reply-To: <B4A6DE68-819A-11D7-912C-000393C9700E@twistedmatrix.com>
References: <B4A6DE68-819A-11D7-912C-000393C9700E@twistedmatrix.com>
Message-ID: <1052608877.9916.209.camel@troglodyte.funhouse>

On Thu, 2003-05-08 at 14:19, Glyph Lefkowitz wrote:
> This is the way that most UNIXes suggest doing it - however, at least 
> on pyramid, it seems broken.  I don't know if this is a debian issue or 
> what, but I can't get _any_ of my machines to exec @reboot crontab 
> entries.

Works For Me.  on pyramid, `crontab -u acapnotic -l`:
@reboot /home/acapnotic/bin/startstuff.sh

and it does indeed start stuff every time pyramid reboots.  So cron's
@reboot on your Debian machine works fine.  The only problem I've had is
on shutdown my twistd's don't get TERM signals, as I've mentioned
before.

-- 
The moon is first quarter, 62.8% illuminated, 8.6 days old.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20030510/f48cc8bf/attachment.sig>

From acapnotic at twistedmatrix.com  Sat May 10 17:43:58 2003
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 10 May 2003 16:43:58 -0700
Subject: [Twisted-Python] Re: We're not responsible for people subscribing to Google's ToS
In-Reply-To: <E19EPi6-000298-00@pyramid.twistedmatrix.com>
References: <E19EPi6-000298-00@pyramid.twistedmatrix.com>
Message-ID: <1052610236.9928.231.camel@troglodyte.funhouse>

On Sat, 2003-05-10 at 01:28, moshez CVS wrote:
http://twistedmatrix.com/users/jh.twistd/viewcvs/cgi/viewcvs.cgi/twisted/web/google.py.diff?r1=text&tr1=1.4&r2=text&tr2=1.5&cvsroot=Twisted
> Log message:
> We're not responsible for people subscribing to Google's ToS

I don't entirely agree.  While it is true that we are not responsible
for people subscribing to Google's terms of service, I think it is
irresponsible at best to distribute a tool whose use violates those
terms, particularly without any suggestion that it might be doing so, or
any reference to those terms at all.

If someone is providing you a service that you find useful, you do not
thank them by doing things with it that they explicitly ask you not to
do.  Play nice.  Google has an API -- I know you don't like it, but it's
their service, it's their right to call the shots.

As long as twisted.web.google does not use the Google API, I would
prefer to see it removed from the core Twisted distribution.  Feel free
to distribute it elsewhere, but with your name on it, not Twisted's. 

Sincerely,

 - Kevin

-- 
The moon is first quarter, 63.0% illuminated, 8.6 days old.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20030510/e5247dc6/attachment.sig>

From glyph at twistedmatrix.com  Sat May 10 19:03:43 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 10 May 2003 20:03:43 -0500
Subject: [Twisted-Python] Large Transfers
In-Reply-To: <200305100945.44548.uwe@oss4u.com>
Message-ID: <690C8268-834C-11D7-AD87-000393C9700E@twistedmatrix.com>


On Saturday, May 10, 2003, at 11:45 AM, Uwe C. Schroeder wrote:

> If the above is the code, how could I change it using pagers ?

Thanks for the more complete description of the problem.  I can see why 
you're frustrated - the Pager implementation isn't 100% complete, and 
it looks like you want every single case covered that it doesn't cover 
:-).  However, this should be fixable with a little utility class.  
Here's a crack at something that does what you want -

-------------- next part --------------
A non-text attachment was scrubbed...
Name: uwe.py
Type: application/octet-stream
Size: 2743 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030510/665a417e/attachment-0002.obj>
-------------- next part --------------


Hope this helps.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 186 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030510/665a417e/attachment.sig>

From uwe at oss4u.com  Sat May 10 19:33:16 2003
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Sat, 10 May 2003 18:33:16 -0700
Subject: [Twisted-Python] Large Transfers
In-Reply-To: <690C8268-834C-11D7-AD87-000393C9700E@twistedmatrix.com>
References: <690C8268-834C-11D7-AD87-000393C9700E@twistedmatrix.com>
Message-ID: <200305101833.16686.uwe@oss4u.com>

Thanks a lot for taking the time to assemble this.
This makes it way clearer.

UC


On Saturday 10 May 2003 06:03 pm, Glyph Lefkowitz wrote:
> On Saturday, May 10, 2003, at 11:45 AM, Uwe C. Schroeder wrote:
> > If the above is the code, how could I change it using pagers ?
>
> Thanks for the more complete description of the problem.  I can see why
> you're frustrated - the Pager implementation isn't 100% complete, and
> it looks like you want every single case covered that it doesn't cover
>
> :-).  However, this should be fixable with a little utility class.
>
> Here's a crack at something that does what you want -


--
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417




From steve at shrogers.com  Sat May 10 19:55:03 2003
From: steve at shrogers.com (Steven H. Rogers, PhD.)
Date: Sat, 10 May 2003 20:55:03 -0500
Subject: [Twisted-Python] Twisted 1.0.5 Woven Tutorial
In-Reply-To: <1052608877.9916.209.camel@troglodyte.funhouse>
References: <B4A6DE68-819A-11D7-912C-000393C9700E@twistedmatrix.com> <1052608877.9916.209.camel@troglodyte.funhouse>
Message-ID: <3EBDAD77.90207@shrogers.com>

In playing with this tutorial, I first tried following the text of the 
tutorial, but didn't find it clear enough to assemble working code 
quickly.  Falling back to the listings/PicturePile directory, I got the 
sample code working, but had to rename the directory-listings.html file 
and image-display.html to *.xhtml files.

Steve
-- 
  _    Steven H. Rogers, PhD.
<_`   email: steve at shrogers.com
|_>   Weblog http://shrogers.com/cgi-bin/pyblosxom.cgi/
| \   "A language that doesn't affect the way you think about
       programming is not worth knowing." - Alan Perlis




From andrew-twisted at puzzling.org  Sun May 11 03:28:42 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sun, 11 May 2003 19:28:42 +1000
Subject: [Twisted-Python] [PATCH] HTTP server fix for the FD problem
Message-ID: <20030511092842.GA24921@frobozz.local>

This adds timeouts to the HTTPChannel class, so that dead old sockets can't
hang around indefinitely and eat all the file descriptors.  The timeout
machinery is added to twisted/protocols/policies.py, and could be reused for
other protocols.

I'm a little concerned that I'm being a touch to evil, though:

-class HTTPChannel(basic.LineReceiver):
+class HTTPChannel(policies.TimeoutWrapper(basic.LineReceiver)):

I'm posting to the list rather than just checking it in so that people can
veto this sort of madness if they like :)  (Oh, and some testing that this
actually fixes the problem would be nice, too).

I'm also including Moshe's simpler, less general patch that only fixes
HTTPChannel, rather than being reusable, in case people prefer that
solution.

-Andrew.


**** My patch: ****

Index: twisted/protocols/policies.py
===================================================================
RCS file: /cvs/Twisted/twisted/protocols/policies.py,v
retrieving revision 1.8
diff -u -r1.8 policies.py
--- twisted/protocols/policies.py	10 Apr 2003 07:03:51 -0000	1.8
+++ twisted/protocols/policies.py	11 May 2003 09:07:38 -0000
@@ -90,6 +90,12 @@
         self.wrappedFactory = wrappedFactory
         self.protocols = {}
 
+    def startFactory(self):
+        self.wrappedFactory.startFactory()
+
+    def stopFactory(self):
+        self.wrappedFactory.stopFactory()
+
     def startedConnecting(self, connector):
         self.wrappedFactory.startedConnecting(connector)
 
@@ -282,6 +288,7 @@
     maxConnectionsPerPeer = 5
 
     def startFactory(self):
+        WrappingFactory.startFactory()
         self.peerConnections = {}
         
     def buildProtocol(self, addr):
@@ -298,6 +305,90 @@
         if self.peerConnections[peerHost] == 0:
             del self.peerConnections[peerHost]
 
+
+class _TransportWrapper:
+    def __init__(self, original, protocol):
+        self.original = original
+        self.protocol = protocol
+
+    def write(self, data):
+        self.original.write(data)
+        self.protocol.resetTimeout()
+
+    def writeSequence(self, sequence):
+        self.original.writeSequence(sequence)
+        self.protocol.resetTimeout()
+
+    def __getattr__(self, name):
+        return getattr(self.original, name)
+
+
+def TimeoutWrapper(protocolClass):
+    class _TimeoutProtocol(protocolClass, object):
+        """Protocol that automatically disconnects when the connection is idle.
+        
+        Stability: Unstable
+        """
+
+        def connectionMade(self):
+            self.timeoutCall = None
+            if getattr(self, 'timeoutPeriod', None):
+                timeoutPeriod = self.timeoutPeriod
+            else:
+                timeoutPeriod = self.factory.timeoutPeriod
+            self.setTimeout(timeoutPeriod)
+
+        def makeConnection(self, transport):
+            t = _TransportWrapper(transport, self)
+            protocolClass.makeConnection(self, t)
+
+        def setTimeout(self, timeoutPeriod=None):
+            """Set a timeout.
+            
+            This will cancel any existing timeouts.
+
+            @param timeoutPeriod: If not C{None}, change the timeout period.
+                Otherwise, use the existing value.
+            """
+            self.cancelTimeout()
+            if timeoutPeriod is not None:
+                self.timeoutPeriod = timeoutPeriod
+            self.timeoutCall = reactor.callLater(self.timeoutPeriod, self.timeoutFunc)
+
+        def cancelTimeout(self):
+            """Cancel the timeout.
+            
+            If the timeout was already cancelled, this does nothing.
+            """
+            if self.timeoutCall:
+                try:
+                    self.timeoutCall.cancel()
+                except error.AlreadyCalled:
+                    pass
+                self.timeoutCall = None
+        
+        def resetTimeout(self):
+            """Reset the timeout, usually because some activity just happened."""
+            if self.timeoutCall:
+                self.timeoutCall.reset(self.timeoutPeriod)
+
+        def dataReceived(self, data):
+            self.resetTimeout()
+            protocolClass.dataReceived(self, data)
+
+        def connectionLost(self, reason):
+            self.cancelTimeout()
+            protocolClass.connectionLost(self, reason)
+
+        def timeoutFunc(self):
+            """This method is called when the timeout is triggered.
+
+            By default it calls L{loseConnection}.  Override this if you want
+            something else to happen.
+            """
+            self.loseConnection()
+    return _TimeoutProtocol
+            
 
 class TimeoutProtocol(ProtocolWrapper):
     """Protocol that automatically disconnects when the connection is idle.
Index: twisted/protocols/http.py
===================================================================
RCS file: /cvs/Twisted/twisted/protocols/http.py,v
retrieving revision 1.79
diff -u -r1.79 http.py
--- twisted/protocols/http.py	8 May 2003 16:28:09 -0000	1.79
+++ twisted/protocols/http.py	11 May 2003 09:07:39 -0000
@@ -47,6 +47,7 @@
 
 # twisted imports
 from twisted.internet import interfaces, reactor, protocol
+from twisted.protocols import policies
 from twisted.python import log
 
 
@@ -856,7 +857,7 @@
         pass
 
 
-class HTTPChannel(basic.LineReceiver):
+class HTTPChannel(policies.TimeoutWrapper(basic.LineReceiver)):
     """A receiver for HTTP requests."""
 
     length = 0
@@ -868,9 +869,9 @@
     # set in instances or subclasses
     requestFactory = Request
 
-
     def __init__(self):
         # the request queue
+        super(HTTPChannel, self).__init__()
         self.requests = []
 
     def lineReceived(self, line):
@@ -944,6 +945,7 @@
 
         req = self.requests[-1]
         req.requestReceived(command, path, version)
+        self.cancelTimeout()
 
     def rawDataReceived(self, data):
         if len(data) < self.length:
@@ -1000,10 +1002,13 @@
             # notify next request it can start writing
             if self.requests:
                 self.requests[0].noLongerQueued()
+            else:
+                self.resetTimeout()
         else:
             self.transport.loseConnection()
 
     def connectionLost(self, reason):
+        super(HTTPChannel, self).connectionLost(reason)
         for request in self.requests:
             request.connectionLost(reason)
 
@@ -1014,6 +1019,8 @@
     protocol = HTTPChannel
 
     logPath = None
+
+    timeoutPeriod = 60
 
     def __init__(self, logPath=None):
         if logPath is not None:
Index: twisted/test/test_web.py
===================================================================
RCS file: /cvs/Twisted/twisted/test/test_web.py,v
retrieving revision 1.31
diff -u -r1.31 test_web.py
--- twisted/test/test_web.py	10 May 2003 08:30:04 -0000	1.31
+++ twisted/test/test_web.py	11 May 2003 09:07:39 -0000
@@ -201,6 +201,9 @@
                   "Accept: text/html"]:
             self.channel.lineReceived(l)
 
+    def tearDown(self):
+        self.channel.connectionLost(reason=None)
+
     def test_modified(self):
         """If-Modified-Since cache validator (positive)"""
         self.channel.lineReceived("If-Modified-Since: %s"


**** Moshe's patch: ****


Index: twisted/protocols/http.py
===================================================================
RCS file: /cvs/Twisted/twisted/protocols/http.py,v
retrieving revision 1.78
diff -u -r1.78 http.py
--- twisted/protocols/http.py	21 Apr 2003 02:51:52 -0000	1.78
+++ twisted/protocols/http.py	11 May 2003 06:29:26 -0000
@@ -850,6 +850,7 @@
     __header = ''
     __first_line = 1
     __content = None
+    terminateConnection = None
 
     # set in instances or subclasses
     requestFactory = Request
@@ -859,7 +860,14 @@
         # the request queue
         self.requests = []
 
+    def connectionMade(self):
+        self.timeout = self.factory.timeout
+        self.terminateConnection = reactor.callLater(self.timeout,
+                                                  self.transport.loseConnection)
+
     def lineReceived(self, line):
+        if self.terminateConnection:
+            self.terminateConnection.reset(self.timeout)
         if self.__first_line:
             # if this connection is not persistent, drop any data which
             # the client (illegally) sent after the last request.
@@ -930,8 +938,13 @@
 
         req = self.requests[-1]
         req.requestReceived(command, path, version)
+        if self.terminateConnection:
+            self.terminateConnection.cancel()
+            self.terminateConnection = None
 
     def rawDataReceived(self, data):
+        if self.terminateConnection:
+            self.terminateConnection.reset(self.timeout)
         if len(data) < self.length:
             self.requests[-1].handleContentChunk(data)
             self.length = self.length - len(data)
@@ -986,6 +999,9 @@
             # notify next request it can start writing
             if self.requests:
                 self.requests[0].noLongerQueued()
+            else:
+                self.terminateConnection = reactor.callLater(self.timeout,
+                                                  self.transport.loseConnection)
         else:
             self.transport.loseConnection()
 
@@ -998,6 +1014,7 @@
     """Factory for HTTP server."""
 
     protocol = HTTPChannel
+    timeout = 60
 
     logPath = None
 




From m at moshez.org  Sun May 11 07:17:08 2003
From: m at moshez.org (Moshe Zadka)
Date: 11 May 2003 13:17:08 -0000
Subject: [Twisted-Python] BuildBot Configuration
Message-ID: <20030511131708.7565.qmail@green.zadka.com>

I'd like to request that the "gtk" and "poll" reactors will seperated
from the main test into "working reactors". Those two reactors pass the
unit tests usually, and so a commiter has reasons to suspect a test
failure here is his test failure. Gtk2, Qt and cReactor fail quite often.
I am no longer bothered by a red heading there, which is why it's bad
that things like poll and gtk failures don't affect something which does
bother me :)

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From glyph at twistedmatrix.com  Sun May 11 07:22:19 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 11 May 2003 08:22:19 -0500
Subject: [Twisted-Python] [PATCH] HTTP server fix for the FD problem
In-Reply-To: <20030511092842.GA24921@frobozz.local>
Message-ID: <9740B60A-83B3-11D7-AD87-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Sunday, May 11, 2003, at 04:28 AM, Andrew Bennetts wrote:

> I'm a little concerned that I'm being a touch to evil, though:
>
> -class HTTPChannel(basic.LineReceiver):
> +class HTTPChannel(policies.TimeoutWrapper(basic.LineReceiver)):

Yow... yes.

I like the fact that your code is generic, but can you modify it to be 
applied at "run-time" rather than at "compile-time"?  It seems to me 
like it would be easier to tweak if we did that.  (Say, modify the 
buildProtocol method of HTTPFactory...)

HTTP may be enough of a special case that Moshe's patch is a good idea. 
  Could this code be re-used for, say, IRC?
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+vk6PvVGR4uSOE2wRAl8DAKCdHV81wkVfr8FczoEebFqES2FFVgCgqHEZ
WkFQD49s8Jpd9DwyCUy5TtY=
=dcLl
-----END PGP SIGNATURE-----




From glyph at twistedmatrix.com  Sun May 11 07:27:09 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 11 May 2003 08:27:09 -0500
Subject: [Twisted-Python] Large Transfers
In-Reply-To: <200305101833.16686.uwe@oss4u.com>
Message-ID: <4438ED66-83B4-11D7-AD87-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Saturday, May 10, 2003, at 08:33 PM, Uwe C. Schroeder wrote:

> Thanks a lot for taking the time to assemble this.
> This makes it way clearer.

You're welcome.  I'm glad that it made sense.

If you want to repay the favor, turning this into a more 
generally-useful utility class and contributing it back to Twisted 
would be great :-).

PB wizards: look at the example in the previous file.  I think that 
with some cacheable magic we could actually set up a utility using 
Cacheables where, when a Pageable is returned, it instantiates an 
appropriate client-side collector object and then returns that as the 
final answer when the paging is done.  This would be more convenient 
than having to change the signature of objects which may return large 
quantities of data.  For extra credit, add an errback-calling mechanism.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+vk+yvVGR4uSOE2wRAk7UAJ4wBqxAyoMrPzIRoT6qXQPuu9q7RQCeLhB3
T3ZwRgca07+HPS4nzfemewM=
=7/j9
-----END PGP SIGNATURE-----




From andrew-twisted at puzzling.org  Sun May 11 08:08:57 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 12 May 2003 00:08:57 +1000
Subject: [Twisted-Python] [PATCH] HTTP server fix for the FD problem
In-Reply-To: <20030511092842.GA24921@frobozz.local>
References: <20030511092842.GA24921@frobozz.local>
Message-ID: <20030511140857.GA27478@frobozz.local>

I shouldn't make last-minute untested changes :(

On Sun, May 11, 2003 at 07:28:42PM +1000, Andrew Bennetts wrote:
[...]
> +def TimeoutWrapper(protocolClass):
> +    class _TimeoutProtocol(protocolClass, object):
> +        """Protocol that automatically disconnects when the connection is idle.
> +        
> +        Stability: Unstable
> +        """
> +
> +        def connectionMade(self):
> +            self.timeoutCall = None
> +            if getattr(self, 'timeoutPeriod', None):

This last line here should of course have a "is not None" in it:
+            if getattr(self, 'timeoutPeriod', None) is not None:

Also, test_http.py needs to be patched:

Index: twisted/test/test_http.py
===================================================================
RCS file: /cvs/Twisted/twisted/test/test_http.py,v
retrieving revision 1.18
diff -u -r1.18 test_http.py
--- twisted/test/test_http.py   18 Feb 2003 12:34:53 -0000      1.18
+++ twisted/test/test_http.py   11 May 2003 14:07:49 -0000
@@ -102,6 +102,7 @@
     def testBuffer(self):
         b = StringIOWithoutClosing()
         a = http.HTTPChannel()
+        a.timeoutPeriod = 60
         a.requestFactory = DummyHTTPHandler
         a.makeConnection(protocol.FileWrapper(b))
         # one byte at a time, to stress it.
@@ -198,6 +199,7 @@
 
     def testLoopback(self):
         server = http.HTTPChannel()
+        server.timeoutPeriod = 60
         server.requestFactory = DummyHTTPHandler
         client = LoopbackHTTPClient()
         client.handleResponse = self._handleResponse
@@ -277,6 +279,7 @@
         httpRequest = httpRequest.replace("\n", "\r\n")
         b = StringIOWithoutClosing()
         a = http.HTTPChannel()
+        a.timeoutPeriod = 60
         a.requestFactory = requestClass
         a.makeConnection(protocol.FileWrapper(b))
         # one byte at a time, to stress it.


-Andrew.




From andrew-twisted at puzzling.org  Sun May 11 08:20:47 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 12 May 2003 00:20:47 +1000
Subject: [Twisted-Python] [PATCH] HTTP server fix for the FD problem
In-Reply-To: <9740B60A-83B3-11D7-AD87-000393C9700E@twistedmatrix.com>
References: <20030511092842.GA24921@frobozz.local> <9740B60A-83B3-11D7-AD87-000393C9700E@twistedmatrix.com>
Message-ID: <20030511142046.GB27478@frobozz.local>

On Sun, May 11, 2003 at 08:22:19AM -0500, Glyph Lefkowitz wrote:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
> 
> 
> On Sunday, May 11, 2003, at 04:28 AM, Andrew Bennetts wrote:
> 
> >I'm a little concerned that I'm being a touch to evil, though:
> >
> >-class HTTPChannel(basic.LineReceiver):
> >+class HTTPChannel(policies.TimeoutWrapper(basic.LineReceiver)):
> 
> Yow... yes.
> 
> I like the fact that your code is generic, but can you modify it to be 
> applied at "run-time" rather than at "compile-time"?  It seems to me 
> like it would be easier to tweak if we did that.  (Say, modify the 
> buildProtocol method of HTTPFactory...)

The existing TimeoutFactory in twisted.protocols.policies is already like
that (as are all the other policies).  This patch duplicates most of that
code, though -- I should try to spend some time to find a way to make the
same code usable both ways.  Certainly that should be done before this patch
gets checked in.

> HTTP may be enough of a special case that Moshe's patch is a good idea. 

If do that, I think it should be tweaked to use the same variables as the
TimeoutWrapper (or vice-versa) for consistency's sake, e.g. 'timeout' ->
'timeoutPeriod', and 'terminateConnection' -> 'timeoutCall'.

>  Could this code be re-used for, say, IRC?

Yep, I think the TimeoutWrapper is flexible enough to handle other protocols
cleanly; all a subclass of TimeoutWrapper(...) needs to do control timeouts
is call self.resetTimeout() and self.clearTimeout().  You can even adjust
the timeout period per-instance, if needed.  I'd love to hear if anyone can
think of any protocols this isn't sufficient for.

That said, I'm not overly attached to my implementation.  I really think
this should be generic, but if there's a less evil way to do it I'll happily
ditch this code.

-Andrew.




From m at moshez.org  Sun May 11 08:29:19 2003
From: m at moshez.org (Moshe Zadka)
Date: 11 May 2003 14:29:19 -0000
Subject: [Twisted-Python] [PATCH] HTTP server fix for the FD problem
In-Reply-To: <9740B60A-83B3-11D7-AD87-000393C9700E@twistedmatrix.com>
References: <9740B60A-83B3-11D7-AD87-000393C9700E@twistedmatrix.com>
Message-ID: <20030511142919.10523.qmail@green.zadka.com>

On Sun, 11 May 2003, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> Could this code be re-used for, say, IRC?

IRC isn't a problem.
Server pings means that the TCP timeout mechanism takes care of timeouting
inactive sockets. If we haven't implemented server pings, we should :)
 
-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From m at moshez.org  Sun May 11 08:40:20 2003
From: m at moshez.org (Moshe Zadka)
Date: 11 May 2003 14:40:20 -0000
Subject: [Twisted-Python] [PATCH] A More Compatible Timeout
Message-ID: <20030511144020.10608.qmail@green.zadka.com>

This patch is functionally the same, but uses timeoutCall
and timeoutPeriod instead of timeout and terminateConnection.

Index: twisted/protocols/http.py
===================================================================
RCS file: /cvs/Twisted/twisted/protocols/http.py,v
retrieving revision 1.79
diff -u -r1.79 http.py
--- twisted/protocols/http.py	8 May 2003 16:28:09 -0000	1.79
+++ twisted/protocols/http.py	11 May 2003 14:37:42 -0000
@@ -864,6 +864,7 @@
     __header = ''
     __first_line = 1
     __content = None
+    timeoutCall = None
 
     # set in instances or subclasses
     requestFactory = Request
@@ -873,7 +874,14 @@
         # the request queue
         self.requests = []
 
+    def connectionMade(self):
+        self.timeoutPeriod = self.factory.timeoutPeriod
+        self.timeoutCall = reactor.callLater(self.timeoutPeriod,
+                                             self.transport.loseConnection)
+
     def lineReceived(self, line):
+        if self.timeoutCall:
+            self.timeoutCall.reset(self.timeoutPeriod)
         if self.__first_line:
             # if this connection is not persistent, drop any data which
             # the client (illegally) sent after the last request.
@@ -944,8 +952,13 @@
 
         req = self.requests[-1]
         req.requestReceived(command, path, version)
+        if self.timeoutCall:
+            self.timeoutCall.cancel()
+            self.timeoutCall = None
 
     def rawDataReceived(self, data):
+        if self.timeoutCall:
+            self.timeoutCall.reset(self.timeoutPeriod)
         if len(data) < self.length:
             self.requests[-1].handleContentChunk(data)
             self.length = self.length - len(data)
@@ -1000,6 +1013,9 @@
             # notify next request it can start writing
             if self.requests:
                 self.requests[0].noLongerQueued()
+            else:
+                self.timeoutCall = reactor.callLater(self.timeoutPeriod,
+                                                  self.transport.loseConnection)
         else:
             self.transport.loseConnection()
 
@@ -1012,6 +1028,7 @@
     """Factory for HTTP server."""
 
     protocol = HTTPChannel
+    timeoutPeriod = 60
 
     logPath = None
 

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From miathan at goliath.darktech.org  Sun May 11 08:45:46 2003
From: miathan at goliath.darktech.org (W.J.)
Date: Sun, 11 May 2003 16:45:46 +0200 (CEST)
Subject: [Twisted-Python] twisted.words maintainer
Message-ID: <Pine.LNX.4.44.0305111640110.9134-100000@zolder>

Hello there,

I'm trying to do some work on twisted.words, so I need to know who is the
current maintainer of that beast.

We should have a word about the direction you want it to go in, to know if
the ideas and changes I have in mind fit in.

Wladimir




From uwe at oss4u.com  Sun May 11 08:45:07 2003
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Sun, 11 May 2003 07:45:07 -0700
Subject: [Twisted-Python] Large Transfers
In-Reply-To: <4438ED66-83B4-11D7-AD87-000393C9700E@twistedmatrix.com>
References: <4438ED66-83B4-11D7-AD87-000393C9700E@twistedmatrix.com>
Message-ID: <200305110745.07913.uwe@oss4u.com>

On Sunday 11 May 2003 06:27 am, Glyph Lefkowitz wrote:
> On Saturday, May 10, 2003, at 08:33 PM, Uwe C. Schroeder wrote:
> > Thanks a lot for taking the time to assemble this.
> > This makes it way clearer.
>
> You're welcome.  I'm glad that it made sense.
>
> If you want to repay the favor, turning this into a more
> generally-useful utility class and contributing it back to Twisted
> would be great :-).
>
> PB wizards: look at the example in the previous file.  I think that
> with some cacheable magic we could actually set up a utility using
> Cacheables where, when a Pageable is returned, it instantiates an
> appropriate client-side collector object and then returns that as the
> final answer when the paging is done.  This would be more convenient
> than having to change the signature of objects which may return large
> quantities of data.  For extra credit, add an errback-calling mechanism.

And maybe add some methods to do this the other way round so that it becomes 
bidirectional.

	UC

--
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417




From typo at soniq.net  Sun May 11 11:09:14 2003
From: typo at soniq.net (Paul Boehm)
Date: Sun, 11 May 2003 19:09:14 +0200
Subject: [Twisted-Python] some reconfiguration questions
Message-ID: <20030511170914.GA1994@soniq.net>

hi,

what's currently the preferred way to reconfigure applications while they
are running, or how does one reconfigure taps ?

can manhole listen on a unix domain socket? i don't really like having
to have a listening network socket open for every twisted app i run.

is tapconvert the only way to reconfigure a tap?
what about writing a mktap style app, that just sets the changes given
at the commandline for an existing app, instead of creating a new one.

doesn't storing all data inside the application pickle make it harder to keep
changes inside the application configuration, seperate from the application data
(which hopefully is less likely to change all the time).

can i really depend on the application author to keep a styles.Versioned record
of all import class changes? what if i decide to upgrade while skipping a few
versions, and then my application tap, including all data, doesn't work anymore?

  paul



From itamar at itamarst.org  Sun May 11 11:20:22 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 11 May 2003 13:20:22 -0400
Subject: [Twisted-Python] some reconfiguration questions
In-Reply-To: <20030511170914.GA1994@soniq.net>
References: <20030511170914.GA1994@soniq.net>
Message-ID: <20030511132022.071398ca.itamar@itamarst.org>

On Sun, 11 May 2003 19:09:14 +0200
Paul Boehm <typo at soniq.net> wrote:

> what's currently the preferred way to reconfigure applications while
> they are running, or how does one reconfigure taps ?

There's coil - except it sucks and needs to be rewritten.

> can manhole listen on a unix domain socket? i don't really like having
> to have a listening network socket open for every twisted app i run.

Yes it can.

> doesn't storing all data inside the application pickle make it harder
> to keep changes inside the application configuration, seperate from
> the application data(which hopefully is less likely to change all the
> time).

You shouldn't store data in the TAP. As for configuration, if you have
the need to change your config a lot, don't use TAPs, use a traditional
config file (or a python file you edit to change the config - looking at
the twisted-web debian package may be instructive).

> can i really depend on the application author to keep a
> styles.Versioned record of all import class changes? what if i decide
> to upgrade while skipping a few versions, and then my application tap,
> including all data, doesn't work anymore?

I write my code so worst case I can always delete the old TAP and run
mktap again without problems.

You should *never* store application data in TAPs when writing real
applications (although it's a useful technique for prototyping,
occasionally).

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From m at moshez.org  Sun May 11 17:12:59 2003
From: m at moshez.org (Moshe Zadka)
Date: 11 May 2003 23:12:59 -0000
Subject: [Twisted-Python] [PATCH] Multiple Reactors
Message-ID: <20030511231259.30029.qmail@green.zadka.com>

Hi!
The following patch removes the globals from SelectReactor, so
that multiple SelectReactors are possible.

Index: twisted/internet/default.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/default.py,v
retrieving revision 1.79
diff -u -r1.79 default.py
--- twisted/internet/default.py	10 May 2003 12:52:37 -0000	1.79
+++ twisted/internet/default.py	11 May 2003 23:11:26 -0000
@@ -367,8 +367,6 @@
 
 
 # global state for selector
-reads = {}
-writes = {}
 
 
 def win32select(r, w, e, timeout=None):
@@ -403,13 +401,18 @@
 
     __implements__ = (PosixReactorBase.__implements__, IReactorFDSet)
 
+    def __init__(self):
+        PosixReactorBase.__init__(self)
+        self.reads = {}
+        self.writes = {}
+
     def _preenDescriptors(self):
         log.msg("Malformed file descriptor found.  Preening lists.")
-        readers = reads.keys()
-        writers = writes.keys()
-        reads.clear()
-        writes.clear()
-        for selDict, selList in ((reads, readers), (writes, writers)):
+        readers = self.reads.keys()
+        writers = self.writes.keys()
+        self.reads.clear()
+        self.writes.clear()
+        for selDict, selList in ((self.reads, readers), (self.writes, writers)):
             for selectable in selList:
                 try:
                     select.select([selectable], [selectable], [selectable], 0)
@@ -419,19 +422,19 @@
                     selDict[selectable] = 1
 
 
-    def doSelect(self, timeout,
-                 # Since this loop should really be as fast as possible,
-                 # I'm caching these global attributes so the interpreter
-                 # will hit them in the local namespace.
-                 reads=reads,
-                 writes=writes,
-                 rhk=reads.has_key,
-                 whk=writes.has_key):
+    def doSelect(self, timeout):
         """Run one iteration of the I/O monitor loop.
 
         This will run all selectables who had input or output readiness
         waiting for them.
         """
+        # Since this loop should really be as fast as possible,
+        # I'm caching these global attributes so the interpreter
+        # will hit them in the local namespace.
+        reads=self.reads
+        writes=self.writes
+        rhk=reads.has_key
+        whk=writes.has_key
         while 1:
             try:
                 r, w, ignored = _select(reads.keys(),
@@ -502,33 +505,33 @@
     def addReader(self, reader):
         """Add a FileDescriptor for notification of data available to read.
         """
-        reads[reader] = 1
+        self.reads[reader] = 1
 
     def addWriter(self, writer):
         """Add a FileDescriptor for notification of data available to write.
         """
-        writes[writer] = 1
+        self.writes[writer] = 1
 
     def removeReader(self, reader):
         """Remove a Selectable for notification of data available to read.
         """
-        if reads.has_key(reader):
-            del reads[reader]
+        if self.reads.has_key(reader):
+            del self.reads[reader]
 
     def removeWriter(self, writer):
         """Remove a Selectable for notification of data available to write.
         """
-        if writes.has_key(writer):
-            del writes[writer]
+        if self.writes.has_key(writer):
+            del self.writes[writer]
 
     def removeAll(self):
         """Remove all readers and writers, and return list of Selectables."""
-        readers = reads.keys()
+        readers = self.reads.keys()
         for reader in readers:
-            if reads.has_key(reader):
-                del reads[reader]
-            if writes.has_key(reader):
-                del writes[reader]
+            if self.reads.has_key(reader):
+                del self.reads[reader]
+            if self.writes.has_key(reader):
+                del self.writes[reader]
         return readers
 
 

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From stuart.hungerford at anu.edu.au  Sun May 11 21:23:30 2003
From: stuart.hungerford at anu.edu.au (Stuart Hungerford)
Date: Mon, 12 May 2003 13:23:30 +1000
Subject: [Twisted-Python] [Twisted.Web] How to access root resource without .rpy file?
Message-ID: <5.2.0.9.0.20030512130858.00bae7d8@anusf.anu.edu.au>

Hi all,

Apologies if this is an FAQ -- I'm still working my way through the
documentation and mailing list postings.

I have a Twisted.Web server serving resources from a directory
called "project" say at the (example) URL:

      http://example.org:8080/project

Later I plan to offer URL's at that address like:

      http://example.org:8080/project/service1
      http://example.org:8080/project/service2?param=1

I understand that each component of a URL is handled as a Twisted
web "resource" with various methods for accessing other components
in the URL and controlling rendering to HTML.

How can I get Python access to the root resource here (in my
case "project") when the URL is first processed by Twisted.Web?

I understand that I could create a project.rpy file which creates
a resource but I need to use the unadorned resource names above
rather than http://example.org:8080/project/project.rpy

Any advice much appreciated,


Cheers,

Stu

--
:: Stuart Hungerford (stuart.hungerford at anu.edu.au)
:: ANU Internet Futures Group




From digi at treepy.com  Sun May 11 23:52:31 2003
From: digi at treepy.com (p@)
Date: Mon, 12 May 2003 07:52:31 +0200
Subject: [Twisted-Python] newbie udp
Message-ID: <00b301c3184a$afcb03f0$ec47da50@pat>

Hi list,
 
I tested the example given in the documentation. with the following
code:
 
class UdpServer (DatagramProtocol):
    def datagramReceived(self, request, address):
        print 'udp recieved:'+request
        response = '\x02'
        self.transport.write(response,address)
 
reactor.listenUDP(serverPort, UdpServer())
reactor.run()
 
if I send a udp packet to this server I get the following exception:
 
udp recieved:a
Traceback (most recent call last):
  File "C:\Python22\Lib\site-packages\twisted\internet\default.py", line
473, in
 doSelect
    _logrun(selectable, _drdw, selectable, method, dict)
  File "C:\Python22\Lib\site-packages\twisted\python\log.py", line 64,
in callWi
thLogger
    callWithContext({"system": lp}, func, *args, **kw)
  File "C:\Python22\Lib\site-packages\twisted\python\log.py", line 51,
in callWi
thContext
    return context.call({ILogContext: newCtx}, func, *args, **kw)
  File "C:\Python22\Lib\site-packages\twisted\python\context.py", line
32, in ca
llWithContext
    return func(*args,**kw)
--- <exception caught here> ---
  File "C:\Python22\Lib\site-packages\twisted\internet\default.py", line
482, in
 _doReadOrWrite
    why = getattr(selectable, method)()
  File "C:\Python22\Lib\site-packages\twisted\internet\udp.py", line
105, in doR
ead
    data, addr = self.socket.recvfrom(self.maxPacketSize)
  File "<string>", line 1, in recvfrom
 
socket.error: (10035, 'The socket operation could not complete without
blocking')
 
I am on win32 and using python 2.2 and this is twisted 1.0.5. What am I
doing wrong?
 
Cheers
 
digi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20030512/cb53b012/attachment.html>

From smurf at smurf.noris.de  Mon May 12 01:26:45 2003
From: smurf at smurf.noris.de (Matthias Urlichs)
Date: Mon, 12 May 2003 09:26:45 +0200
Subject: [Twisted-Python] twisted.web.woven.guard.SessionWrapper problems
Message-ID: <pan.2003.05.12.07.26.23.732558@smurf.noris.de>

I was experimenting with twisted.web.woven.guard yesterday and ran into a
problem.

Some browsers, including wget, don't like _at_all_ when you have a cycle
in your redirections, even though they should notice that they now have a
cookie while formerly they didn't.

Therefore I propose to rewrite the SessionWrapper to always change the
user's path, like this (the string "sp" is self.cookieKey):

/sessionized-url/foo
	Set cookie
	Redirect to /sessionized-url/sp__aef9c34aecc3d9148/foo
/sessionized-url/sp__aef9c34aecc3d9148/foo
	Redirect to either of the next two URLs depending on whether I see a
	cookie
/sessionized-url/sp/foo
	URL to use with cookies
/sessionized-url/sp_aef9c34aecc3d9148/foo
	URL to use without cookies

Finally, /sessionized-url/sp/foo, but no cookie, would do

	class SessionWrapper(...):
		def __init__(..., on_timeout=None):
			...
			self.prefix=prefix
			self.timed_out = timed_out
		def getChild(...):
			if (path == self.prefix and not self.sessions.has_key(cookie):
				return self.on_timeout(path,request)

so that access with no session can be distinguished from a plain link into
/sessionized-url/foo; the latter means the user might want to log in, but
the former should tell the user that their session has timed out before
offering the login page.

An additional advantage of this scheme would be that
.../unsessionized-url/ can be reaced with a constant number of backpaths.

Oh yes, and I'd like to make http://somewhere.example/sessionized-url and
(i.e. no paths) work. At the moment that causes an ugly error because
SessionWrapper doesn't override render().

Thoughts? Or is somebody else going to rewrite this module next week
anyway and I therefore probably shouldn't bother?

-- 
Matthias Urlichs  | {M:U} IT Consulting @ m-u-it.de  |  smurf at smurf.noris.de
Disclaimer: The quote was selected randomly. Really. | http://smurf.noris.de
-- 
Van Roy's Law:
	An unbreakable toy is useful for breaking other toys.




From m at moshez.org  Mon May 12 02:23:07 2003
From: m at moshez.org (Moshe Zadka)
Date: 12 May 2003 08:23:07 -0000
Subject: [Twisted-Python] [Twisted.Web] How to access root resource without .rpy file?
In-Reply-To: <5.2.0.9.0.20030512130858.00bae7d8@anusf.anu.edu.au>
References: <5.2.0.9.0.20030512130858.00bae7d8@anusf.anu.edu.au>
Message-ID: <20030512082307.18018.qmail@green.zadka.com>

On Mon, 12 May 2003, Stuart Hungerford <stuart.hungerford at anu.edu.au> wrote:

> Later I plan to offer URL's at that address like:
> 
>       http://example.org:8080/project/service1
>       http://example.org:8080/project/service2?param=1
<snip>
> I understand that I could create a project.rpy file which creates
> a resource but I need to use the unadorned resource names above
> rather than http://example.org:8080/project/project.rpy

This is why Twisted Web supports ignoring extension. I'm not sure how
you're deploying your server. If you are writing a configuration file
by hand you can do something like:

"""
from twisted.internet import app
from twisted.web import static, server, script

root = static.File("/serve/example")
root.processors = {'.rpy': script.ResourceScript}
root.ignoreExt('.rpy')
application = app.Application('web')
application.listenTCP(8080, server.Site(root)
"""

If you use mktap,
% mktap web --path=/serve/example --ignore-ext=.rpy --port=8080
should work.

Of course, in the first example, you could use explicit putChild:

"""
from twisted.internet import app
from twisted.web import static, server, script
import myCode

root = static.File("/serve/example")
root.putChild('project', myCode.ResourceIntendedForProject())
application = app.Application('web')
application.listenTCP(8080, server.Site(root)
"""

Since you've given no further data, it is hard to guess which of those
option best applies to you. I wish to further mention that if you use
Debian, the twisted-web can give you some more options, depending on your
security concern. For example, merely dropping in /etc/twisted-web/local.d
a file called "99addproject.py" with contents

"""
import myCode
default.putChild('project', myCode.ResourceIntendedForProject())
"""

would work.

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From smurf at smurf.noris.de  Mon May 12 04:31:09 2003
From: smurf at smurf.noris.de (Matthias Urlichs)
Date: Mon, 12 May 2003 12:31:09 +0200
Subject: [Twisted-Python] =?UTF-8?b?4oCqUEFUQ0g6?= twisted.web.util.Redirect.isLeaf := 1
Message-ID: <pan.2003.05.12.10.31.06.749934@smurf.noris.de>

twisted.web.util.Redirect should set its own isLeaf.
Callers can then use "return Redirect(...)" instead of the cumbersome
"rd = Redirect(); rd.isLeaf=1; return rd" I'm seeing.

--- 1.10/twisted/web/util.py    Mon Apr 28 00:34:10 2003
+++ edited/twisted/web/util.py  Mon May 12 12:25:02 2003
@@ -29,6 +29,7 @@
     def __init__(self, url):
         resource.Resource.__init__(self)
         self.url = url
+        self.isLeaf = 1

     def render(self, request):
         return redirectTo(self.url, request)

-- 
Matthias Urlichs  | {M:U} IT Consulting @ m-u-it.de  |  smurf at smurf.noris.de
Disclaimer: The quote was selected randomly. Really. |  http://smurf.noris.de
-- 
Real Users know your home telephone number.





From m at moshez.org  Mon May 12 04:47:12 2003
From: m at moshez.org (Moshe Zadka)
Date: 12 May 2003 10:47:12 -0000
Subject: [Twisted-Python] Re: twisted pyblosxom
In-Reply-To: <3EBF795F.5070501@celestix.com>
References: <3EBF795F.5070501@celestix.com>
Message-ID: <20030512104712.23262.qmail@green.zadka.com>

[CCing to the mailing list, which is the correct place to send questions to]

On Mon, 12 May 2003 18:37:19 +0800, Wari Wahab <wari at celestix.com> wrote:

> Wow, that's a fast reply :) Anyway, CGI does not work because:
...

I have a feeling that you're doing something strange, like using the
CGI module from inside the same process? Twisted Web runs CGIs just
like any other webserver does -- in a seperate process.

> Anyway, I'm really quite new to this, and I have no idea to make 
> pyblosxom a non-blocking resource. There are a few areas in pyblosxom 
> which is calculated intensively that makes pyblosxom somewhat blocking. 

There are a couple of classic tricks, which vary between deferred when
there's something specific you're waiting for or reactor.callLater loops
if you just want to break apart something big and reactor.callInThread
when it is too hard to break it apart.

> Another kludge I did was to return a blank string at the end of render() 
> although I did use request.write() all over.

It was probably better to request.finish() yourself, and
return server.NOT_DONE_YET.
 
> PS: If I were to make this run on port 80, how do I make twisted change 
> to a different user? I know it's possible with twisd and mktap commands, 
> just not sure on how to do it in an application.

The correct way is to write a -y'able file.

'''
# call this pybloxom.ypy
from twisted.internet import app
from twisted.web import server

root = CreatePyBloxomResource()
site = server.Site(root)
application = app.Application("pybloxsom", uid=33, gid=33)
application.listenTCP(80, site)
'''

Now use

twistd -y pybloxom.ypy

HTH
-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From m at moshez.org  Mon May 12 07:00:59 2003
From: m at moshez.org (Moshe Zadka)
Date: 12 May 2003 13:00:59 -0000
Subject: [Twisted-Python] [PATCH] Fix FutureWarning
Message-ID: <20030512130059.28408.qmail@green.zadka.com>

hex()/oct() will return signed strings for negative ints in 2.4 and
onwards. Here is a patch to twisted/world/structfile.py to prevent
that from affecting twisted:
[by the by, I also switched from except: to except TypeError, seeing
as this is the only error we expect hex() to throw]

Index: twisted/world/structfile.py
===================================================================
RCS file: /cvs/Twisted/twisted/world/structfile.py,v
retrieving revision 1.1
diff -u -r1.1 structfile.py
--- twisted/world/structfile.py	7 May 2003 13:56:32 -0000	1.1
+++ twisted/world/structfile.py	12 May 2003 12:58:50 -0000
@@ -198,8 +198,13 @@
             f.write('<tr>')
             for item in row:
                 try:
-                    item = hex(item)
-                except:
+                    if item >= 0:
+                        item = hex(item)
+                    else:
+                        item = hex((1L<<32)-item).lower()
+                        if item[-1] == 'l':
+                            item = item[:-1]
+                except TypeError:
                     item = str(item)
                 f.write('<td>'+item+'</td>')
             f.write('</tr>')

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From iko at strakt.com  Mon May 12 08:28:50 2003
From: iko at strakt.com (Anders Hammarquist)
Date: Mon, 12 May 2003 16:28:50 +0200
Subject: [Twisted-Python] Updated SMTP patch
Message-ID: <200305121428.h4CESoM4024595@fido.strakt.com>

Hi!

Since things have been happening in the smtp code, and my patch for
the SMTP client hasn't been applied yet, I thought it was time to
update it. 

About the recent change to validateTo using a defered rather than
"straight" callbacks, I missed the discussion (if any), but I *strongly*
feel that validateTo and validateFrom should use the same method,
and that "failed" addresses should be communicated with failures
rather than "magic". So I changed it.

It also fixes a type I found in twisted.mail.relaymanager

/Anders

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: text/x-patch
Size: 38542 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030512/59d58016/attachment-0002.bin>

From itamar at itamarst.org  Mon May 12 09:39:47 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 12 May 2003 11:39:47 -0400
Subject: [Twisted-Python] newbie udp
In-Reply-To: <00b301c3184a$afcb03f0$ec47da50@pat>
References: <00b301c3184a$afcb03f0$ec47da50@pat>
Message-ID: <20030512113947.639253d3.itamar@itamarst.org>

On Mon, 12 May 2003 07:52:31 +0200
"p@" <digi at treepy.com> wrote:

> socket.error: (10035, 'The socket operation could not complete without
> blocking')
>  
> I am on win32 and using python 2.2 and this is twisted 1.0.5. What am
> I doing wrong?

UDP code hasn't been extensively tested on Windows. I'll see about
fixing this (and setting up a win32 buildbot machine).

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From digi at treepy.com  Mon May 12 09:51:27 2003
From: digi at treepy.com (p@)
Date: Mon, 12 May 2003 17:51:27 +0200
Subject: AW: [Twisted-Python] newbie udp
In-Reply-To: <20030512113947.639253d3.itamar@itamarst.org>
Message-ID: <004101c3189e$5a3ad3d0$ec47da50@pat>

I swtiched back to version 1.0 ... there it seams to work perfectly
Cheers

p@

-----Ursprüngliche Nachricht-----
Von: twisted-python-admin at twistedmatrix.com
[mailto:twisted-python-admin at twistedmatrix.com] Im Auftrag von Itamar
Shtull-Trauring
Gesendet: Montag, 12. Mai 2003 17:40
An: twisted-python at twistedmatrix.com
Betreff: Re: [Twisted-Python] newbie udp

On Mon, 12 May 2003 07:52:31 +0200
"p@" <digi at treepy.com> wrote:

> socket.error: (10035, 'The socket operation could not complete without
> blocking')
>  
> I am on win32 and using python 2.2 and this is twisted 1.0.5. What am
> I doing wrong?

UDP code hasn't been extensively tested on Windows. I'll see about
fixing this (and setting up a win32 buildbot machine).

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python





From itamar at itamarst.org  Mon May 12 10:09:45 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 12 May 2003 12:09:45 -0400
Subject: AW: [Twisted-Python] newbie udp
In-Reply-To: <004101c3189e$5a3ad3d0$ec47da50@pat>
References: <20030512113947.639253d3.itamar@itamarst.org>
	<004101c3189e$5a3ad3d0$ec47da50@pat>
Message-ID: <20030512120945.4ecd733d.itamar@itamarst.org>

On Mon, 12 May 2003 17:51:27 +0200
"p@" <digi at treepy.com> wrote:

> I swtiched back to version 1.0 ... there it seams to work perfectly
> Cheers

UDP in v1.0 had a different API and was very broken... I fixed your bug
in CVS, I think - give it a try.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From exarkun at intarweb.us  Mon May 12 12:39:41 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Mon, 12 May 2003 14:39:41 -0400
Subject: [Twisted-Python] Updated SMTP patch
In-Reply-To: <200305121428.h4CESoM4024595@fido.strakt.com>
References: <200305121428.h4CESoM4024595@fido.strakt.com>
Message-ID: <20030512183941.GA10373@meson.dyndns.org>

On Mon, May 12, 2003 at 04:28:50PM +0200, Anders Hammarquist wrote:
> Hi!
> 
> Since things have been happening in the smtp code, and my patch for
> the SMTP client hasn't been applied yet, I thought it was time to
> update it. 
> 

  Thanks, I'll see if I can get it committed in the next day or two.

> About the recent change to validateTo using a defered rather than
> "straight" callbacks, I missed the discussion (if any), but I *strongly*
> feel that validateTo and validateFrom should use the same method,
> and that "failed" addresses should be communicated with failures
> rather than "magic". So I changed it.

  I don't see the behavior as magic.  It seems very analogous to str.find()
returning -1 when nothing is found.  The main reason I chose to avoid
failures here was to avoid the costs associated with them.  None instead of
a username as a callback seems to indicate an invalid address as clearly as
a failure object would.

  In this light, do you still object to the existing approach (assume that
at some point, I *will* get around to documenting just how it works, since
this is code meant to be overridden by users).

  Jp

-- 
A sad spectacle.  If they be inhabited, what a scope for misery 
and folly.  If they be not inhabited, what a waste of space.
                -- Thomas Carlyle, looking at the stars
-- 
 up 10 days, 16:39, 9 users, load average: 0.02, 0.05, 0.00
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030512/d50602fb/attachment.sig>

From jml at ids.org.au  Tue May 13 06:02:35 2003
From: jml at ids.org.au (jml at ids.org.au)
Date: Tue, 13 May 2003 22:02:35 +1000
Subject: [Twisted-Python] twisted.world question
Message-ID: <20030513120235.GA17211@mumak.net>

Hello,

I have a class Bar, which is a subclass of Foo. I want Bar to be Storable, but
Foo is not. What am I required to persist in Bar in order to ensure that the
retrieved object is a fully working Foo?

e.g.

class Foo:
  pass

class Bar(Foo, Storable):
  __schema__ = { ... }

cheers,
jml
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030513/45133738/attachment.sig>

From stuart.hungerford at anu.edu.au  Mon May 12 19:50:24 2003
From: stuart.hungerford at anu.edu.au (Stuart Hungerford)
Date: Tue, 13 May 2003 11:50:24 +1000
Subject: [Twisted-Python] Re: Twisted-Python digest, Vol 1 #749 - 5 msgs
In-Reply-To: <20030512104802.14606.8626.Mailman@pyramid.twistedmatrix.co
 m>
Message-ID: <5.2.0.9.0.20030513114708.00bb4f48@anusf.anu.edu.au>

Moshe writes:

 >> I understand that I could create a project.rpy file which creates
 >> a resource but I need to use the unadorned resource names above
 >> rather than http://example.org:8080/project/project.rpy
 >
 >This is why Twisted Web supports ignoring extension. I'm not sure how
 >you're deploying your server. If you are writing a configuration file
 >by hand you can do something like:
 >
 >"""
 >from twisted.internet import app
 >from twisted.web import static, server, script
 >
 >root = static.File("/serve/example")
 >root.processors = {'.rpy': script.ResourceScript}
 >root.ignoreExt('.rpy')
 >application = app.Application('web')
 >application.listenTCP(8080, server.Site(root)
 >"""
 >
 >If you use mktap,
 >% mktap web --path=/serve/example --ignore-ext=.rpy --port=8080
 >should work.
 > [...]

    Thanks for the advice, it's just what I need. It also
    shows just how flexible the underlying Twisted components
    are.

Cheers,

Stu

--
:: Stuart Hungerford (stuart.hungerford at anu.edu.au)
:: ANU Internet Futures Group




From glyph at twistedmatrix.com  Mon May 12 20:13:08 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 12 May 2003 21:13:08 -0500
Subject: [Twisted-Python] twisted.web.woven.guard.SessionWrapper problems
In-Reply-To: <pan.2003.05.12.07.26.23.732558@smurf.noris.de>
Message-ID: <7033844F-84E8-11D7-AD87-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Monday, May 12, 2003, at 02:26 AM, Matthias Urlichs wrote:

> Some browsers, including wget, don't like _at_all_ when you have a 
> cycle
> in your redirections, even though they should notice that they now 
> have a
> cookie while formerly they didn't.

I guess they really expect GET to be idempotent :-\

> Therefore I propose to rewrite the SessionWrapper to always change the
> user's path, like this (the string "sp" is self.cookieKey):
[...]
> so that access with no session can be distinguished from a plain link 
> into
> /sessionized-url/foo; the latter means the user might want to log in, 
> but
> the former should tell the user that their session has timed out before
> offering the login page.

What's problematic about this is that if the user bookmarks a page, or 
exchanges a link, I want to initialize the session without changing the 
URL.  In fact, it's somewhat pointless to have a URL (stateless 
location identifier) that specifically only works if you've initiated a 
stateful conversation.

Maybe there are some ways we could monkey with HTTP to cause browsers 
to be happier here: would a 307 (Temporary Redirect) be more 
appropriate than a 302 (Found)?  Or perhaps would these browsers be 
happier if we redirected them to 
/sessionized-url/foo?__session_just_started__=1 rather than 
/sessionized-url/foo ?  It would be unusual to bookmark that URL, since 
the extra crud would only be on the first URL you hit, and if you did 
we could always remove the query string rather than adding it.

> An additional advantage of this scheme would be that
> .../unsessionized-url/ can be reaced with a constant number of 
> backpaths.

This, however, I like.  I don't know if cookieKey is the right thing to 
use in the URL there, but having relative URLs that match regardless of 
your session negotiation strategy is a _big_ plus.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+wFS5vVGR4uSOE2wRAlzZAKCWJNdUbR50hLtilqFZ1NGJ2pP+TQCfYEv0
VCGTwm8HaTHXr3fscnBcU9U=
=8g4b
-----END PGP SIGNATURE-----




From wari at home.wari.org  Mon May 12 21:27:46 2003
From: wari at home.wari.org (Wari Wahab)
Date: Tue, 13 May 2003 11:27:46 +0800
Subject: [Twisted-Python] Re: twisted pyblosxom
In-Reply-To: <20030512104712.23262.qmail@green.zadka.com>
References: <3EBF795F.5070501@celestix.com> <20030512104712.23262.qmail@green.zadka.com>
Message-ID: <3EC06632.1060103@home.wari.org>

Moshe Zadka wrote:

>I have a feeling that you're doing something strange, like using the
>CGI module from inside the same process? Twisted Web runs CGIs just
>like any other webserver does -- in a seperate process.
>  
>
I know what you mean, just that there are only very few CGI calls in 
pyblosxom, and that can easily be converted to twisted if I want.

>There are a couple of classic tricks, which vary between deferred when
>there's something specific you're waiting for or reactor.callLater loops
>if you just want to break apart something big and reactor.callInThread
>when it is too hard to break it apart.
>
Hmm, I'll look into reactor.callInThread() first, there's one part of 
pyblosxom core that does this for loop which can get slow if there are a 
large number of entries.

>>Another kludge I did was to return a blank string at the end of render() 
>>although I did use request.write() all over.
>>    
>>
>It was probably better to request.finish() yourself, and
>return server.NOT_DONE_YET. 
>
It does look wierd in the code when I do:

def render(self, request):
    request.write("hello world")
    request.finish()
    return NOT_DONE_YET

Is this what you are saying?

>>PS: If I were to make this run on port 80, how do I make twisted change 
>>to a different user?
>>
>The correct way is to write a -y'able file.
>  
>
Hey, thanks for the help, twisted is really nice in this aspect. But one 
thing for sure, it's not easy for me to learn, but it's one of those 
things that if you know how to, then everything else seems easier :) I'm 
trying to learn more of twisted and see if it can be used for my project.





From m at moshez.org  Mon May 12 22:21:36 2003
From: m at moshez.org (Moshe Zadka)
Date: 13 May 2003 04:21:36 -0000
Subject: [Twisted-Python] Re: twisted pyblosxom
In-Reply-To: <3EC06632.1060103@home.wari.org>
References: <3EC06632.1060103@home.wari.org>, <3EBF795F.5070501@celestix.com> <20030512104712.23262.qmail@green.zadka.com>
Message-ID: <20030513042136.32160.qmail@green.zadka.com>

On Tue, 13 May 2003, Wari Wahab <wari at home.wari.org> wrote:

> It does look wierd in the code when I do:
> 
> def render(self, request):
>     request.write("hello world")
>     request.finish()
>     return NOT_DONE_YET
> 
> Is this what you are saying?

Yes, this is the correct way to do it. NOT_DONE_YET means more "I'm handling
this". The name is a *bit* misleading.

> Hey, thanks for the help, twisted is really nice in this aspect. But one 
> thing for sure, it's not easy for me to learn, but it's one of those 
> things that if you know how to, then everything else seems easier :) I'm 
> trying to learn more of twisted and see if it can be used for my project.

On the other hand, lots of us want a Twistedy blog thing :) 
-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From m at moshez.org  Mon May 12 22:37:32 2003
From: m at moshez.org (Moshe Zadka)
Date: 13 May 2003 04:37:32 -0000
Subject: [Twisted-Python] Re: Twisted-Python digest, Vol 1 #749 - 5 msgs
In-Reply-To: <5.2.0.9.0.20030513114708.00bb4f48@anusf.anu.edu.au>
References: <5.2.0.9.0.20030513114708.00bb4f48@anusf.anu.edu.au>
Message-ID: <20030513043732.32308.qmail@green.zadka.com>

On Tue, 13 May 2003, Stuart Hungerford <stuart.hungerford at anu.edu.au> wrote:

>     Thanks for the advice, it's just what I need. It also
>     shows just how flexible the underlying Twisted components
>     are.

Note that everything I said is covered in various places: while --ignore-ext
was not in the man page, it is covered in mktap web --help
'''
      --ignore-ext=       Specify an extension to ignore. These will be
                          processed in order.
'''

Resource.putChild is documented in
http://twistedmatrix.com/documents/TwistedDocs/current/api/public/twisted.web.resource.Resource.html#putChild

While File.ignoreExt had no docstring, the "ignoredExts" argument to File's
constructor, which is documented in 
http://twistedmatrix.com/documents/TwistedDocs/current/api/public/twisted.web.static.File.html#__init__
would have worked as well.

[I've now updated the manpage and the docstring]
 
-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From smurf at smurf.noris.de  Tue May 13 02:24:14 2003
From: smurf at smurf.noris.de (Matthias Urlichs)
Date: Tue, 13 May 2003 10:24:14 +0200
Subject: [Twisted-Python] twisted.web.woven.guard.SessionWrapper problems
References: <pan.2003.05.12.07.26.23.732558@smurf.noris.de> <7033844F-84E8-11D7-AD87-000393C9700E@twistedmatrix.com>
Message-ID: <pan.2003.05.13.08.24.12.755710@smurf.noris.de>

Hi,

Glyph Lefkowitz wrote:
> What's problematic about this is that if the user bookmarks a page, or
> exchanges a link, I want to initialize the session without changing the
> URL.  In fact, it's somewhat pointless to have a URL (stateless location
> identifier) that specifically only works if you've initiated a stateful
> conversation.

Well, the whole point of SessionWrapper is that you force a stateful
conversation, otherwise the link wouldn't be behind a session in the first
place. ;-)

Bookmarked links are not a big problem IMHO; the user logged in once, and
they'll unerstand that they'll have to log in again. If that turns out to
be a usability problem, the webmaster could add a "Please use _this_link_
if you want to bookmark this page" footer.

Next on my list will be to understand perspectives and PerspectiveWrapper
and t.w.w.forms in sufficient detail that I can refactor the thing. The
login page is much too static for my taste... plus there might be other
ways to log somebody in than to use a form.

> This, however, I like.  I don't know if cookieKey is the right thing to
> use in the URL there, but having relative URLs that match regardless of
> your session negotiation strategy is a _big_ plus

I think so too. I can't think of anything else to use there that makes
sense; the cookie key is already transmitted to the user anyway. Usually,
if you want "real" persistence, you don't let Twisted randomize it, and
thus it tends to be reasonably short (see Yahoo for an extreme example;
they use single letters... that takes things too far though, IMHO).

-- 
Matthias Urlichs  | {M:U} IT Consulting @ m-u-it.de  |  smurf at smurf.noris.de
Disclaimer: The quote was selected randomly. Really. | http://smurf.noris.de
-- 
"I realized that a psychological need for belief also
 resulted from childhood indoctrination, and that it
 had all the characteristics of addiction."
         [Neal Cary, American Atheists
          National Outreach Director]




From smurf at smurf.noris.de  Tue May 13 02:25:36 2003
From: smurf at smurf.noris.de (Matthias Urlichs)
Date: Tue, 13 May 2003 10:25:36 +0200
Subject: [Twisted-Python] Allow static.Data to be at the root
Message-ID: <pan.2003.05.13.08.25.34.929793@smurf.noris.de>

Here's a small patch to allow a twisted.web.static.Data element at the
root of your web space.


diff -Nru a/twisted/web/static.py b/twisted/web/static.py
--- a/twisted/web/static.py	Tue May 13 10:22:32 2003
+++ b/twisted/web/static.py	Tue May 13 10:22:32 2003
@@ -59,6 +59,12 @@
             request.setHeader("content-length", len(self.data))
             return ''
         return self.data
+	
+    def getChild(self,path,request):
+        """Return myself if I am the root."""
+        if path == '' and request.path == "/":
+            return self
+        return resource.Resource.getChild(self,path,request)
 
 def addSlash(request):
     host = request.getHeader("host")
-- 
Matthias Urlichs  | {M:U} IT Consulting @ m-u-it.de  |  smurf at smurf.noris.de
Disclaimer: The quote was selected randomly. Really. | http://smurf.noris.de
-- 
"I believe in eight of the ten commandments; and I believe
 in going to church every Sunday unless there's a game on."
                  [Steve Martin]




From smurf at smurf.noris.de  Tue May 13 02:45:18 2003
From: smurf at smurf.noris.de (Matthias Urlichs)
Date: Tue, 13 May 2003 10:45:18 +0200
Subject: [Twisted-Python] SessionWrapper rewrapped ;-)
Message-ID: <pan.2003.05.13.08.45.12.321602@smurf.noris.de>

Here's my current code WRT a (partially) rewritten SessionWrapper, with
expanded test case, and a small example on how to do authorization.

--- a/twisted/web/woven/guard.py	Tue May 13 10:42:34 2003
+++ b/twisted/web/woven/guard.py	Tue May 13 10:42:34 2003
@@ -8,6 +8,7 @@
 import random
 import time
 import md5
+import base64
 
 # Twisted Imports
 
@@ -17,8 +18,10 @@
 from twisted.internet import reactor
 from twisted.cred.error import Unauthorized
 
+_trans={"/":".", "+":"-", "=":"", "\n":""}
 def _sessionCookie():
-    return md5.new("%s_%s" % (str(random.random()) , str(time.time()))).hexdigest()
+    hash = md5.new("%s_%s" % (str(random.random()) , str(time.time())))
+    return "".join(map(lambda k: _trans.get(k,k), base64.encodestring(hash.digest())))
 
 class GuardSession(components.Componentized):
     """A user's session with a system.
@@ -129,22 +132,29 @@
     req.getSession = req.session._getSelf
 
 class SessionWrapper(Resource):
+	# XXX TODO: This wrapper doesn't pass query strings.
 
-    def __init__(self, rsrc, cookieKey=None):
+    def __init__(self, rsrc, cookieKey=None, on_timeout=None, lifetime=1800):
         Resource.__init__(self)
         self.resource = rsrc
         if cookieKey is None:
             cookieKey = "woven_session_" + _sessionCookie()
         self.cookieKey = cookieKey
+        self.on_timeout = on_timeout
         self.sessions = {}
+        self.lifetime = lifetime
 
     def getChild(self, path, request):
         # XXX refactor with PerspectiveWrapper
         if not request.prepath:
             return None
-        pp = request.prepath.pop()
-        _urlToMe = request.prePathURL()
-        request.prepath.append(pp)
+        if path is not None:
+            pp = request.prepath.pop()
+            _urlToMe = request.prePathURL()
+            request.prepath.append(pp)
+        else:
+            _urlToMe = request.prePathURL()
+
         def urlToChild(*ar):
             c = '/'.join(ar)
             if _urlToMe[-1] == '/':
@@ -152,55 +162,102 @@
                 return _urlToMe + c
             else:
                 return _urlToMe + '/' + c
-        # XXX
-        # print "I think I'm at:", _urlToMe
+
+		# Strictly speaking, the additional step through INIT_SESSION is
+		# not necessary. TODO: As soon as PerspectiveWrapper and
+		# SessionWrapper are folded into one class, the INIT_SESSION
+		# step can be removed.
+
         cookie = request.getCookie(self.cookieKey)
-        setupURL = request.setupSessionURL = urlToChild(INIT_SESSION, *([path]+request.postpath))
+        setupURL = request.setupSessionURL = urlToChild(self.cookieKey+"_"+INIT_SESSION, *request.postpath)
         request.setupSession = lambda: Redirect(setupURL)
-        if self.sessions.has_key(path):
-            self.sessions[path].setLifetime(1800)
-            if cookie == path:
-                # /sessionized-url/aef9c34aecc3d9148/foo
-                #                  ^
-                #                  we are this getChild
-                # with a matching cookie
-                rd = Redirect(urlToChild(*request.postpath))
-                rd.isLeaf = 1
-                return rd
-            else:
-                # We attempted to negotiate the session but failed (the user
-                # probably has cookies disabled): now we're going to return the
-                # resource we contain.  In general the getChild shouldn't stop
-                # there.
-                # /sessionized-url/aef9c34aecc3d9148/foo
-                #                 ^ we are this getChild
-                # without a cookie (or with a mismatched cookie)
-                _setSession(self, request, path)
+
+        if path == self.cookieKey:
+            # /sessionized-url/KEY/foo
+            #                  ^ this getChild
+            # standard case if the client does cookies
+            if self.sessions.has_key(cookie):
+                self.sessions[cookie].setLifetime(self.lifetime)
+                _setSession(self, request, cookie)
                 return self.resource
-        elif self.sessions.has_key(cookie):
-            # /sessionized-url/foo
-            #                 ^ we are this getChild
-            # with a session
-            _setSession(self, request, cookie)
-            return self.resource.getChildWithDefault(path, request)
-        elif path == INIT_SESSION:
+            else:
+                request.getSession = lambda interface=None: None
+                if cookie is not None and self.on_timeout:
+                    # The session cookie has expired.
+                    return self.on_timeout(path,request)
+                else:
+                    # The client probably used a cached link.
+                    return self.resource
+
+        elif path == self.cookieKey+"_"+INIT_SESSION:
             # initialize the session
-            # /sessionized-url/session-init
+            # /sessionized-url/KEY_session-init/foo
             #                  ^ this getChild
-            # without a session
+            # I setup a cookie and redirect the client
+            # to the cookie test, below.
             newCookie = _sessionCookie()
             request.addCookie(self.cookieKey, newCookie, path="/")
-            rd = Redirect(urlToChild(newCookie,*request.postpath))
-            rd.isLeaf = 1
             sz = self.sessions[newCookie] = GuardSession(self, newCookie)
             sz.checkExpired()
-            return rd
+            return Redirect(urlToChild(self.cookieKey+"__"+newCookie,
+                                       *request.postpath))
+
+        elif path is not None and path.startswith(self.cookieKey+"__"):
+            # /sessionized-url/KEY__cookie/foo
+            #                  ^ this getChild
+            # Check whether the cookie was returned
+            path_cookie = path[len(self.cookieKey)+2:]
+            if cookie == path_cookie: # yes: use session-less path
+                return Redirect(urlToChild(self.cookieKey,*request.postpath))
+            else: # no: use session-ized path
+                return Redirect(urlToChild(self.cookieKey+"_"+path_cookie,*request.postpath))
+
+        elif path is not None and path.startswith(self.cookieKey+"_"):
+            # /sessionized-url/KEY_cookie/foo
+            #                  ^ this getChild
+            # standard case if the client doesn't do cookies
+            cookie = path[len(self.cookieKey)+1:]
+            if self.sessions.has_key(cookie):
+                self.sessions[cookie].setLifetime(self.lifetime)
+                _setSession(self, request, cookie)
+                return self.resource.getChildWithDefault(path, request)
+            else:
+                # I need to setup a session.
+                request.getSession = lambda interface=None: None
+                return self.resource
+
         else:
             # /sessionized-url/foo
-            #                 ^ we are this getChild
-            # without a session
-            request.getSession = lambda interface=None: None
-            return self.resource.getChildWithDefault(path, request)
+            #                  ^ this getChild
+            # either there is no session data yet, or the client
+            # re-entered via an external link
+
+            # This is the only case where the path is not a session
+            # element, so change the setupURL to include it.
+            if path is None:
+                ppath=[]
+            else:
+                ppath=[path]
+            setupURL = request.setupSessionURL = urlToChild(self.cookieKey+"_"+INIT_SESSION, *(ppath+request.postpath))
+            request.setupSession = lambda: Redirect(setupURL)
+
+            if self.sessions.has_key(cookie):
+                # I need to (re-)insert the session marker into the path
+                self.sessions[cookie].setLifetime(self.lifetime)
+                return Redirect(urlToChild(self.cookieKey,*(ppath+request.postpath)))
+            else:
+                # I need to setup a session. No way to figure out
+                # whether this is a re-enter, unfortunately.
+                request.getSession = lambda interface=None: None
+                if path is None:
+                    return self.resource
+                else:
+                    return self.resource.getChildWithDefault(path, request)
+
+    def render(self,request):
+        """A session-ized path is called directly."""
+        # For now, just munge /foo into /foo/.
+        return self.getChild(None,request).render(request)
 
 INIT_PERSPECTIVE = 'perspective-init'
 DESTROY_PERSPECTIVE = 'perspective-destroy'
@@ -284,6 +341,18 @@
             if sc:
                 return sc.getChildWithDefault(path, request)
             return self.noAuthResource.getChildWithDefault(path, request)
+
+    def render(self,request):
+        """A perspective is called directly."""
+        s = request.getSession()
+        if s is None:
+            return request.setupSession().render(request)
+
+        sc = s.clientForService(self.service)
+        if sc:
+            return sc.render(request)
+        return self.noAuthResource.render(request)
+
 
 
 from twisted.web.woven import interfaces, utils
--- a/ChangeLog	Tue May 13 10:42:34 2003
+++ b/ChangeLog	Tue May 13 10:42:34 2003
@@ -1,4 +1,11 @@
-2003-5-12  Moshe Zadka <moshez at twistedmatrix.com>
+2003-05-13  Matthias Urlichs <smurf at smurf.noris.de>
+
+	* twisted/web/woven/guard.py, twisted/test/test_woven.py: Rewrote
+	  SessionWrapper to have constant-length paths. Made its logic more
+	  transparent.
+	* doc/examples/woven_guard.py: Added example code to use it.
+
+2003-05-12  Moshe Zadka <moshez at twistedmatrix.com>
 
 	* twisted/lore/default.py twisted/lore/latex.py
 	  twisted/lore/lint.py twisted/lore/math.py twisted/lore/tree.py
--- /dev/null	Wed Dec 31 16:00:00 1969
+++ b/doc/examples/woven_guard.py	Tue May 13 10:42:34 2003
@@ -0,0 +1,70 @@
+import sys
+import os
+from twisted.internet import app
+from twisted.web import static, server
+from twisted.protocols import http, policies
+from twisted.cred import authorizer
+from twisted.web.woven import guard
+
+class termFile(static.File):
+    def getChild(self,name,*args,**kwargs):
+        return self
+
+# authHelper and authFactory could easily be written as inline or lambda
+# functions. Don't do that, though -- otherwise twisted.persisted will
+# crash when it tries to save your PerspectiveWrapper.
+class authHelper:
+    def __init__(self,page):
+        self.page = page
+    def __call__(self,p,q=None):
+        if q is None:
+            q=self.page
+        return q
+def authFactory(page): return page
+
+# This resource shows yes_page if you're logged in, and no_page if you aren't.
+def setup_auth(yes_page, no_page):
+    from twisted.internet.app import MultiService
+    from twisted.cred.authorizer import DefaultAuthorizer
+    from twisted.cred.service import Service
+
+    ms = MultiService("security_test")
+    auth = DefaultAuthorizer(ms)
+    svc = Service("security_test_service", ms, auth)
+    myp = svc.createPerspective("test_one")
+    myp.makeIdentity("test_two")
+
+    pwrap = guard.PerspectiveWrapper(svc, no_page, authHelper(yes_page),
+        callback=authFactory)
+    swrap = guard.SessionWrapper(pwrap, cookieKey="GuardTest")
+    return swrap
+
+def main():
+    root = static.Data("""\
+        <html><body>
+            Test.<br />The authorizer is <a href="auth-test">here.</a>
+        </body></html>
+        """,'text/html')
+
+    yes = static.Data("""\
+        <html><head>Success!</head>
+        <body>Login successful!</body></html>
+        """,'text/html')
+    no = static.Data("""\
+        <html><head>Not logged in</head>
+        <body><p>Log in <a href="perspective-init">here</a></p>
+        <code>test_one test_two</code></body></html>
+        """,'text/html')
+    root.putChild("auth-test",setup_auth(yes,no))
+
+    site = server.Site(root)
+    site = policies.TimeoutFactory(site,300)
+    
+    basename = os.path.splitext(os.path.basename(sys.argv[0]))[0]
+    me = app.Application(basename)
+    me.listenTCP(50080, site)
+    me.bindPorts()
+    me.run()
+    
+if __name__ == '__main__':
+    main()
--- a/twisted/test/test_woven.py	Tue May 13 10:42:34 2003
+++ b/twisted/test/test_woven.py	Tue May 13 10:42:34 2003
@@ -474,7 +474,7 @@
         sessWrapped = static.Data("you should never see this", "text/plain")
         swChild = static.Data("NO", "text/plain")
         sessWrapped.putChild("yyy",swChild)
-        swrap = guard.SessionWrapper(sessWrapped)
+        swrap = guard.SessionWrapper(sessWrapped,cookieKey="TesT")
         da = static.Data("b","text/plain")
         da.putChild("xxx", swrap)
         st = FakeSite(da)
@@ -491,23 +491,56 @@
 
         # now we're going to make sure that the redirect and cookie are properly set
         req = FakeHTTPRequest(chan, queued=0)
-        req.requestReceived("GET", "/xxx/"+guard.INIT_SESSION, "1.0")
+        req.requestReceived("GET", "/xxx/TesT_"+guard.INIT_SESSION, "1.0")
         ccv = req._cookieCache.values()
         self.assertEquals(len(ccv),1)
         cookie = ccv[0]
         # redirect set?
         self.failUnless(req.headers.has_key('location'))
         # redirect matches cookie?
-        self.assertEquals(req.headers['location'].split('/')[-1], cookie)
+        self.assertEquals(req.headers['location'].split('/')[-1], "TesT__"+cookie)
         # URL is correct?
         self.assertEquals(req.headers['location'],
-                          'http://fake.com/xxx/'+cookie)
+                          'http://fake.com/xxx/TesT__'+cookie)
         oldreq = req
+
+        # now we're going to make sure that the redirect and cookie are properly set
+        req = FakeHTTPRequest(chan, queued=0)
+        req.received_cookies["TesT"] = cookie
+        req.requestReceived("GET", "/xxx/TesT__"+cookie, "1.0")
+        ccv = req._cookieCache.values()
+        self.assertEquals(len(ccv),0) # no cookie sent back here
+        # redirect set?
+        self.failUnless(req.headers.has_key('location'))
+        # redirect matches cookie?
+        self.assertEquals(req.headers['location'].split('/')[-1], 'TesT')
+        # URL is correct?
+        self.assertEquals(req.headers['location'],
+                          'http://fake.com/xxx/TesT')
         
-        # now let's try with a request for the session-cookie URL that has a cookie set
-        url = "/"+(oldreq.headers['location'].split('http://fake.com/',1))[1]
-        req = chan.makeFakeRequest(url)
-        self.assertEquals(req.headers['location'], 'http://fake.com/xxx/')
+        # If there's a cookie but the session element is missing, it
+		# gets added in.
+        req = FakeHTTPRequest(chan, queued=0)
+        req.received_cookies["TesT"] = cookie
+        req.requestReceived("GET", "/xxx/yyy", "1.0")
+        self.assertEquals(req.headers['location'], 'http://fake.com/xxx/TesT/yyy')
+
+        # now do the same with a client that doesn't accept cookies:
+        # we get a cookie-ized path back
+        req = FakeHTTPRequest(chan, queued=0)
+        req.requestReceived("GET", "/xxx/TesT__"+cookie, "1.0")
+        ccv = req._cookieCache.values()
+        self.assertEquals(len(ccv),0) # no cookie here, either
+        # redirect set?
+        self.failUnless(req.headers.has_key('location'))
+        # redirect matches cookie?
+        self.assertEquals(req.headers['location'].split('/')[-1], 'TesT_'+cookie)
+        # URL is correct?
+        self.assertEquals(req.headers['location'],
+                          'http://fake.com/xxx/TesT_'+cookie)
+        
+
+		# clean up
         for sz in swrap.sessions.values():
             sz.expire()
 
@@ -531,23 +564,23 @@
         q.putChild("yyy", static.Data("YES", "text/plain"))
         authFactory = lambda p, q=q: q
         pwrap = guard.PerspectiveWrapper(svc, sessWrapped, authFactory)
-        swrap = guard.SessionWrapper(pwrap)
+        swrap = guard.SessionWrapper(pwrap, cookieKey="TesT") # as above
         da.putChild("xxx", swrap)
         st = FakeSite(da)
         chan = FakeHTTPChannel()
         chan.site = st
 
-        req = chan.makeFakeRequest("/xxx/"+guard.INIT_SESSION+"/yyy")
-        req = chan.makeFakeRequest("/xxx/yyy")
+        req = chan.makeFakeRequest("/xxx/TesT_"+guard.INIT_SESSION+"/yyy")
+        req = chan.makeFakeRequest("/xxx/TesT/yyy")
         self.assertEquals(req.written.getvalue(),"NO")
-        req = chan.makeFakeRequest("/xxx/"+guard.INIT_PERSPECTIVE+
+        req = chan.makeFakeRequest("/xxx/TesT/"+guard.INIT_PERSPECTIVE+
                                    "?identity=test&password=tenxt")
         assert not req.session.services.values()
-        req = chan.makeFakeRequest("/xxx/"+guard.INIT_PERSPECTIVE+
+        req = chan.makeFakeRequest("/xxx/TesT/"+guard.INIT_PERSPECTIVE+
                                    "?identity=test&password=test")
         self.assertEquals(req.session.services.values()[0][0], myp)
         # print req.written.getvalue()
-        req = chan.makeFakeRequest("/xxx/yyy")
+        req = chan.makeFakeRequest("/xxx/TesT/yyy")
         self.assertEquals(req.written.getvalue(), "YES")
         # print req.session.services
         for sz in swrap.sessions.values():

-- 
Matthias Urlichs  | {M:U} IT Consulting @ m-u-it.de  |  smurf at smurf.noris.de
Disclaimer: The quote was selected randomly. Really. | http://smurf.noris.de
-- 
When voting on appropriations bills, more is not necessarily better. It is
as wasteful to have a B-1 bomber in every garage as it is to have a welfare
program for every conceivable form of deprivation.
					-- Pierre S. du Pont




From m at moshez.org  Tue May 13 04:47:48 2003
From: m at moshez.org (Moshe Zadka)
Date: 13 May 2003 10:47:48 -0000
Subject: [Twisted-Python] Allow static.Data to be at the root
In-Reply-To: <pan.2003.05.13.08.25.34.929793@smurf.noris.de>
References: <pan.2003.05.13.08.25.34.929793@smurf.noris.de>
Message-ID: <20030513104748.14913.qmail@green.zadka.com>

On Tue, 13 May 2003, "Matthias Urlichs" <smurf at smurf.noris.de> wrote:

> Here's a small patch to allow a twisted.web.static.Data element at the
> root of your web space.

This detracts functionality, not enhances it.
If you really want it, it's better to have a 

root = resource.Resource()
root.putChild('', static.Data('text/plain', 'hello world'))
 
-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From m at moshez.org  Tue May 13 11:45:01 2003
From: m at moshez.org (Moshe Zadka)
Date: 13 May 2003 17:45:01 -0000
Subject: [Twisted-Python] Qt Test Failure
Message-ID: <20030513174501.26762.qmail@green.zadka.com>

Reference: http://twistedmatrix.com/~warner.twistd/

The Qt reactor constantly fails just one test:
twisted.test.test_factories.ReconnectingFactoryTestCase.testStopTrying

It's annoying, because if that's solved then we can honestly
say that it works. I have a nagging feeling the problem is with
race conditions in the test, rather than actual problems with the
reactors. I have tried fiddling with the test, but not having an
actual setup of Qt with which I can add prints or debug made this
an exercise in futility.

If anyone feels like investigating the reasons for the failure, and
either fixing it or coming up with a patch, would be welcomed.

Thanks,
Moshe

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From itamar at itamarst.org  Tue May 13 12:02:23 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 13 May 2003 14:02:23 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] tests for active
In-Reply-To: <E19FdsJ-0001Db-00@pyramid.twistedmatrix.com>
References: <E19FdsJ-0001Db-00@pyramid.twistedmatrix.com>
Message-ID: <20030513140223.437bedd4.itamar@itamarst.org>

> +    def testActive(self):
> +        dcall = reactor.callLater(0, lambda: None)
> +        self.assertEquals(dcall.active(), True)
> +        reactor.iterate()
> +        self.assertEquals(dcall.active(), False)
> +

Can you please not use True/False/bool in tests? Yes, I know you can
import from compat, but half the time people'll forget to do that and
we'll have to go and fix the tests. Not everyone runs 2.2.2.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From bob at redivi.com  Tue May 13 14:12:47 2003
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 13 May 2003 16:12:47 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] tests for active
In-Reply-To: <20030513140223.437bedd4.itamar@itamarst.org>
Message-ID: <43CF1A9A-857F-11D7-8B50-000A95686CD8@redivi.com>

On Tuesday, May 13, 2003, at 14:02 America/New_York, Itamar 
Shtull-Trauring wrote:

>> +    def testActive(self):
>> +        dcall = reactor.callLater(0, lambda: None)
>> +        self.assertEquals(dcall.active(), True)
>> +        reactor.iterate()
>> +        self.assertEquals(dcall.active(), False)
>> +
>
> Can you please not use True/False/bool in tests? Yes, I know you can
> import from compat, but half the time people'll forget to do that and
> we'll have to go and fix the tests. Not everyone runs 2.2.2.

I'd almost consider having twisted/__init__.py just set those into 
builtins, even though that's extremely evil.. It's SUCH a common 
mistake these days.

-bob




From iko at cd.chalmers.se  Tue May 13 16:18:49 2003
From: iko at cd.chalmers.se (Anders Hammarquist)
Date: Wed, 14 May 2003 00:18:49 +0200
Subject: [Twisted-Python] Updated SMTP patch 
In-Reply-To: Message from Jp Calderone <exarkun@intarweb.us> 
   of "Mon, 12 May 2003 14:39:41 EDT." <20030512183941.GA10373@meson.dyndns.org> 
References: <200305121428.h4CESoM4024595@fido.strakt.com> <20030512183941.GA10373@meson.dyndns.org> 
Message-ID: <200305132218.h4DMIoR18194@haddock.cd.chalmers.se>

In a message of Mon, 12 May 2003 14:39:41 EDT, Jp Calderone writes:
>> About the recent change to validateTo using a defered rather than
>> "straight" callbacks, I missed the discussion (if any), but I *strongly*
>> feel that validateTo and validateFrom should use the same method,
>> and that "failed" addresses should be communicated with failures
>> rather than "magic". So I changed it.
>
>  I don't see the behavior as magic.  It seems very analogous to str.find()
>returning -1 when nothing is found.  The main reason I chose to avoid
>failures here was to avoid the costs associated with them.  None instead of
>a username as a callback seems to indicate an invalid address as clearly as
>a failure object would.

Not magic as in not understandable, thus the quotes. It's obivous how
it works, it just doesn't feel as clean as using a failure, especially
when passing a non-standard response (the possiblity of which was
completely lost in your initial implementation). While using a failure
certainly is more expensive, the expected result is for the address to
be acceptable, so it shouldn't happen too often. So I still feel that
using failures is a cleaner approach, and if it proves too costly,
perhaps the first thing to do should be to see if the failures can be
made lighter, possibly optionally lighter for "expected" failures.

/Anders

-- 
 -- Of course I'm crazy, but that doesn't mean I'm wrong.
Anders Hammarquist                                  | iko at cd.chalmers.se
Physics student, Chalmers University of Technology, | Hem: +46 31 88 48 50
G|teborg, Sweden.           RADIO: SM6XMM and N2JGL | Mob: +46 707 27 86 87



From andrew-twisted at puzzling.org  Tue May 13 16:30:52 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 14 May 2003 08:30:52 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] tests for active
In-Reply-To: <43CF1A9A-857F-11D7-8B50-000A95686CD8@redivi.com>
References: <20030513140223.437bedd4.itamar@itamarst.org> <43CF1A9A-857F-11D7-8B50-000A95686CD8@redivi.com>
Message-ID: <20030513223052.GA5675@frobozz.local>

On Tue, May 13, 2003 at 04:12:47PM -0400, Bob Ippolito wrote:
> On Tuesday, May 13, 2003, at 14:02 America/New_York, Itamar 
> Shtull-Trauring wrote:
> >
> >Can you please not use True/False/bool in tests? Yes, I know you can
> >import from compat, but half the time people'll forget to do that and
> >we'll have to go and fix the tests. Not everyone runs 2.2.2.
> 
> I'd almost consider having twisted/__init__.py just set those into 
> builtins, even though that's extremely evil.. It's SUCH a common 
> mistake these days.

Even better would be having an OS X build slave -- I think it has 2.2.0?

-Andrew.




From cce at clarkevans.com  Tue May 13 17:21:17 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Tue, 13 May 2003 23:21:17 +0000
Subject: [Twisted-Python] Re: [Twisted-commits] trying to get twisted to run in 2.2.0 (bye bye True/False)
In-Reply-To: <E19Fhtb-0004yb-00@pyramid.twistedmatrix.com>
References: <E19Fhtb-0004yb-00@pyramid.twistedmatrix.com>
Message-ID: <20030513232117.GA16265@doublegemini.com>

Itamar,

    from twisted.python.compat import True, False

Clark

On Tue, May 13, 2003 at 05:05:15PM -0500, itamarst CVS wrote:
| -            msg(message, printed=True, isError=self.isError)
| +            msg(message, printed=1, isError=self.isError)



From twisted at eholm.com  Tue May 13 19:08:44 2003
From: twisted at eholm.com (Eric Holm)
Date: Tue, 13 May 2003 18:08:44 -0700
Subject: [Twisted-Python] Woven trailing slashes
Message-ID: <uhe7ytjvn.fsf@eholm.com>

I just installed 1.0.5, and now my Woven pages are sent
to the browser with a trailing slash appended to the URL, 
which breaks all of the relative links.

How do I get rid of the trailing slash?

Thanks,


Eric.




From dp at twistedmatrix.com  Tue May 13 19:25:37 2003
From: dp at twistedmatrix.com (Donovan Preston)
Date: Tue, 13 May 2003 18:25:37 -0700
Subject: [Twisted-Python] Woven trailing slashes
In-Reply-To: <uhe7ytjvn.fsf@eholm.com>
Message-ID: <F773015C-85AA-11D7-8CF6-000393B3EC2C@twistedmatrix.com>

On Tuesday, May 13, 2003, at 06:08 PM, Eric Holm wrote:

> I just installed 1.0.5, and now my Woven pages are sent
> to the browser with a trailing slash appended to the URL,
> which breaks all of the relative links.
>
> How do I get rid of the trailing slash?

If you are subclassing Page, you can add a class attribute addSlash = 
0, like this:

class Foo(page.Page):
	addSlash = 0


If you are still subclassing Controller, you can put the addSlash = 0 
there. Consider subclassing Page instead, as having a Model, View, 
Controller triad as the base of a Page will be deprecated in the near 
future.

If you're just using the generic Page instance, you can set it after 
creation like this:

resource = page.Page("foo")
resource.addSlash = 0

The default behavior of Woven is now to automatically add a slash 
because it makes creating relative links far easier, ironically ;-)

Donovan




From andrew-twisted at puzzling.org  Tue May 13 19:41:01 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 14 May 2003 11:41:01 +1000
Subject: [Twisted-Python] Woven trailing slashes
In-Reply-To: <F773015C-85AA-11D7-8CF6-000393B3EC2C@twistedmatrix.com>
References: <uhe7ytjvn.fsf@eholm.com> <F773015C-85AA-11D7-8CF6-000393B3EC2C@twistedmatrix.com>
Message-ID: <20030514014101.GA5953@frobozz.local>

On Tue, May 13, 2003 at 06:25:37PM -0700, Donovan Preston wrote:
> 
> On Tuesday, May 13, 2003, at 06:08 PM, Eric Holm wrote:
> 
> >I just installed 1.0.5, and now my Woven pages are sent
> >to the browser with a trailing slash appended to the URL,
> >which breaks all of the relative links.
> >
> >How do I get rid of the trailing slash?
> 
> If you are subclassing Page, you can add a class attribute addSlash = 
> 0, like this:

[...etc...]

Please add this to the FAQ!

-Andrew.




From screwtape at froup.com  Tue May 13 19:56:23 2003
From: screwtape at froup.com (screwtape at froup.com)
Date: Wed, 14 May 2003 11:56:23 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] tests for active
In-Reply-To: <20030513223052.GA5675@frobozz.local>
References: <20030513140223.437bedd4.itamar@itamarst.org> <43CF1A9A-857F-11D7-8B50-000A95686CD8@redivi.com> <20030513223052.GA5675@frobozz.local>
Message-ID: <20030514015623.GB26659@ferd2.thristian.org>

On Wed, May 14, 2003 at 08:30:52AM +1000, Andrew Bennetts wrote:
> On Tue, May 13, 2003 at 04:12:47PM -0400, Bob Ippolito wrote:
> > On Tuesday, May 13, 2003, at 14:02 America/New_York, Itamar 
> > Shtull-Trauring wrote:
> > >
> > >Can you please not use True/False/bool in tests? Yes, I know you can
> > >import from compat, but half the time people'll forget to do that and
> > >we'll have to go and fix the tests. Not everyone runs 2.2.2.
> > 
> > I'd almost consider having twisted/__init__.py just set those into 
> > builtins, even though that's extremely evil.. It's SUCH a common 
> > mistake these days.
> 
> Even better would be having an OS X build slave -- I think it has 2.2.0?

[st at grundoon]: ~% /usr/bin/python -V       
Python 2.2

Sure looks like it.

-- 
 ___________ ____________________________
| Screwtape | Reply-To: munged on Usenet |________ ______ ____ __ _  _   _
|
| "Spoons may be an evolutionary dead end." -- Chiggy
|



From twisted at eholm.com  Tue May 13 20:06:45 2003
From: twisted at eholm.com (Eric Holm)
Date: Tue, 13 May 2003 19:06:45 -0700
Subject: [Twisted-Python] Woven trailing slashes
In-Reply-To: <F773015C-85AA-11D7-8CF6-000393B3EC2C@twistedmatrix.com>
References: <F773015C-85AA-11D7-8CF6-000393B3EC2C@twistedmatrix.com>
Message-ID: <uaddqcmdm.fsf@eholm.com>

> resource = page.Page("foo")
> resource.addSlash = 0
> 
That did the trick, thanks!


> The default behavior of Woven is now to automatically add a slash
> because it makes creating relative links far easier, ironically ;-)
> 
So I'm doing things the hard way?  Hmmmm...


Speaking of links, when I use the Link widget, I get the following 
(seemingly harmless, but distracting nonetheless) warning:

...\twisted\web\woven\model.py:428: UserWarning: getSubmodel must get a request argument now
  warnings.warn("getSubmodel must get a request argument now")

for whatever that's worth.

Thanks,


Eric.




From digi at treepy.com  Tue May 13 21:41:26 2003
From: digi at treepy.com (p@)
Date: Wed, 14 May 2003 05:41:26 +0200
Subject: AW: AW: [Twisted-Python] newbie udp
In-Reply-To: <20030512120945.4ecd733d.itamar@itamarst.org>
Message-ID: <013901c319ca$b3d7ac10$ec47da50@pat>

>> I swtiched back to version 1.0 ... there it seams to work perfectly
>> Cheers
>
>UDP in v1.0 had a different API and was very broken... I fixed your bug
>in CVS, I think - give it a try.

Thanks a lot.. works like a charm now..

I think I found a bug... in udp.py 
Line 213
I think it should be:
self.protocol.datagramReceived(data,addr)





From digi at treepy.com  Tue May 13 22:57:40 2003
From: digi at treepy.com (p@)
Date: Wed, 14 May 2003 06:57:40 +0200
Subject: [Twisted-Python] closing udp client?
Message-ID: <014701c319d5$59ef76a0$ec47da50@pat>

I have the following protocol for a udp client:
 
class UdpClientProtocol (ConnectedDatagramProtocol):
    def __init__(self,request=None):
        self.request = request
    def startProtocol(self):
        self.transport.write(self.request)
    def datagramReceived(self,answer,address):
        print 'datagram recieved:'
        print data
        print 'from:',address
 
I want to send a udp packet and then wait for the answer. but what if
there is no answer? So I need a timeout client...
 
I tried it with:
 
class UdpClientProtocol (ConnectedDatagramProtocol):
    def __init__(self,request=None):
        self.request = request
        reactor.callLater(5, self.timeout())
    def startProtocol(self):
        self.transport.write(self.request)
    def datagramReceived(self,answer,address):
        print 'datagram recieved:'
        print data
        print 'from:',address
    def timeout(self):
        print 'timeout'
 
this works. but if I try to close this protocol after 5 seconds with
self.transport.loseConnection() I get an exception..
So my actuall question is: how to close this port/protocol/factory
again?
 
Cheers
 
p@
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20030514/d727c3aa/attachment.html>

From fog at initd.org  Wed May 14 02:01:40 2003
From: fog at initd.org (Federico Di Gregorio)
Date: 14 May 2003 10:01:40 +0200
Subject: [Twisted-Python] a little OT: python workshop became a twisted workshop
Message-ID: <1052899299.953.7.camel@momo.initd.org>

Hi *,

i just wanted to share with you something happened last saturnday,
during the webb.it (http://www.webb.it/) meeting. among other workshops
i did there were two titled "Python Basics" and "Advanced Python:
network protocols".

The second one ended up being a *twisted workshop*: after using a very
simple Protocol example to show twisted (my plan was to show various
network-oriented python modules: twisted, httplib, ftplib, etc.) people
started asking questions and i not ever mentioned the other modules (and
showed a pb example instead).

so, kudos to all you twisted developers. maybe next year we'll organize
a twisted booth, a series of workshops and a sprint as we did with
zope/plone this year.

ciao,
federico

-- 
Federico Di Gregorio
Debian GNU/Linux Developer                                fog at debian.org
INIT.D Developer                                           fog at initd.org
             A short story: I want you. I love you. I'll miss you. -- Me
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: Questa parte del messaggio è firmata
URL: </pipermail/twisted-python/attachments/20030514/0d20c291/attachment.sig>

From miathan at goliath.darktech.org  Wed May 14 06:29:03 2003
From: miathan at goliath.darktech.org (W.J.)
Date: Wed, 14 May 2003 14:29:03 +0200 (CEST)
Subject: [Twisted-Python] Re: closing udp client? (p@)
In-Reply-To: <20030514045901.8790.34071.Mailman@pyramid.twistedmatrix.com>
Message-ID: <Pine.LNX.4.44.0305141421530.28885-100000@zolder>

> I want to send a udp packet and then wait for the answer. but what if
> there is no answer? So I need a timeout client...
>
> I tried it with:
>
<snip>
>
> this works. but if I try to close this protocol after 5 seconds with
> self.transport.loseConnection() I get an exception..
> So my actuall question is: how to close this port/protocol/factory
> again?

The timeout is still armed when you lose the connection.

On connection, you do

self.egg = reactor.callLater(5, self.timeout())

When you deconstruct the thing again you do:

self.egg.cancel()

I don't know if this has anything to do with it, but be more
elaborate on which exception you get?

Wladimir




From korpios at korpios.com  Wed May 14 08:14:37 2003
From: korpios at korpios.com (Tom 'Korpios' Tobin)
Date: Wed, 14 May 2003 10:14:37 -0400
Subject: [Twisted-Python] Patch Ideas
Message-ID: <20030514141437.GA51744@hecate.korpios.net>

I'm fairly new to Twisted, and I had a couple of patch ideas I wanted to run by before submitting:


1) Making twisted.web.distrib play nicely with twisted.web.vhost

As things currently stand, these two refuse to cooperate by default; for example, defining a vhost that points to a ResourceSubscription will fail.  Fixing it only takes two small changes to twisted.web.distrib (one each to ResourceSubscription and ResourcePublisher), and doesn't appear to break anything.


2) Adding getSessionPassive to twisted.web.server.Request

The default behavior of getSession is to check for an existing session, and drop a session cookie on the client if none exists.  There are many potential cases where this is not desirable; for example, one may have administration options blended into the normal web interface which appear if one is logged in, yet one does not want to drop a session cookie on every client who comes by.  getSessionPassive checks for an existing session or a session cookie; however, if no session or session cookie exists, it does not drop one, opting to return the session's default state as None instead.


Would there be any reason not to add these functionalities?  If not, I'll submit patches here.  :)


Tom "Korpios" Tobin
korpios at korpios.com




From dp at twistedmatrix.com  Wed May 14 09:29:59 2003
From: dp at twistedmatrix.com (Donovan Preston)
Date: Wed, 14 May 2003 08:29:59 -0700
Subject: [Twisted-Python] Woven trailing slashes
In-Reply-To: <uaddqcmdm.fsf@eholm.com>
Message-ID: <EC605C42-8620-11D7-AFF7-000393B3EC2C@twistedmatrix.com>

On Tuesday, May 13, 2003, at 07:06 PM, Eric Holm wrote:

>> resource = page.Page("foo")
>> resource.addSlash = 0
>>
> That did the trick, thanks!

Great! :)

>
>
>> The default behavior of Woven is now to automatically add a slash
>> because it makes creating relative links far easier, ironically ;-)
>>
> So I'm doing things the hard way?  Hmmmm...

Theoretically... URI design is complicated business.

>
>
> Speaking of links, when I use the Link widget, I get the following
> (seemingly harmless, but distracting nonetheless) warning:
>
> ...\twisted\web\woven\model.py:428: UserWarning: getSubmodel must get 
> a request argument now
>   warnings.warn("getSubmodel must get a request argument now")
>
> for whatever that's worth.

Thanks for the report. Link is relying on deprecated behavior, I'll fix 
it.

Donovan




From mario at ruggier.org  Wed May 14 10:25:16 2003
From: mario at ruggier.org (Mario Ruggier)
Date: Wed, 14 May 2003 18:25:16 +0200
Subject: [Twisted-Python] restricting access to cgi scripts
Message-ID: <A5CA356C-8628-11D7-8251-000393756786@ruggier.org>

Hi,

what would be the better way to restrict access to 3rd party
cgi scripts?

Would subclassing twcgi.CGIScript to add HTTP authentication
(to render()?) and then use this as porcessor for '.cgi'  (or other
invented extension for protected cgis) be a good way to go?

thanks, mario




From glyph at twistedmatrix.com  Wed May 14 11:20:23 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 14 May 2003 12:20:23 -0500
Subject: [Twisted-Python] a little OT: python workshop became a twisted workshop
In-Reply-To: <1052899299.953.7.camel@momo.initd.org>
Message-ID: <58A990B0-8630-11D7-853B-000393C9700E@twistedmatrix.com>

On Wednesday, May 14, 2003, at 03:01 AM, Federico Di Gregorio wrote:

> "Advanced Python: network protocols" [...] ended up being a *twisted 
> workshop*

Wow!  Thanks for letting us know.  It's always nice to hear things like 
this :-).




From Paul.Morrow at loyaltyworks.com  Wed May 14 11:35:56 2003
From: Paul.Morrow at loyaltyworks.com (Morrow, Paul)
Date: Wed, 14 May 2003 13:35:56 -0400
Subject: [Twisted-Python] Binding echo server to a particular ip address
Message-ID: <FF816FA079A11949BE655A693DC02D104D96E2@exchange2.loyaltyworks.com>

The following is your simpleserv.py echo server example.  On a multihost
(multiple ip addresses) server, how would I have it listen on a
particular ip address?
 
Thanks.
 
 
 
from twisted.internet import reactor, protocol


class Echo(protocol.Protocol):
    """This is just about the simplest possible protocol"""
    
    def dataReceived(self, data):
        "As soon as any data is received, write it back."
        self.transport.write(data)


def main():
    """This runs the protocol on port 8000"""
    factory = protocol.ServerFactory()
    factory.protocol = Echo
    reactor.listenTCP(8000,factory)
    reactor.run()

# this only runs if the module was *not* imported
if __name__ == '__main__':
    main()
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20030514/4a59044b/attachment.html>

From miathan at goliath.darktech.org  Wed May 14 11:48:13 2003
From: miathan at goliath.darktech.org (W.J.)
Date: Wed, 14 May 2003 19:48:13 +0200 (CEST)
Subject: [Twisted-Python] Re: Binding echo server to a particular ip address
Message-ID: <Pine.LNX.4.44.0305141945410.1843-100000@zolder>

> The following is your simpleserv.py echo server example.  On a multihost
> (multiple ip addresses) server, how would I have it listen on a
> particular ip address?

> def main():
>     """This runs the protocol on port 8000"""
>     factory =3D protocol.ServerFactory()
>     factory.protocol =3D Echo

>     reactor.listenTCP(8000,factory)

reactor.listenTCP(8000, factory, interface="127.0.0.1")

Where 127.0.0.1 is the interface you want to bind to.
Almost too easy uh?

>     reactor.run()

Wladimir





From Paul.Morrow at loyaltyworks.com  Wed May 14 12:03:36 2003
From: Paul.Morrow at loyaltyworks.com (Morrow, Paul)
Date: Wed, 14 May 2003 14:03:36 -0400
Subject: [Twisted-Python] Re: Binding echo server to a particular ip address
Message-ID: <FF816FA079A11949BE655A693DC02D109DC25B@exchange2.loyaltyworks.com>

Indeed!

-----Original Message-----
From: W.J. [mailto:miathan at goliath.darktech.org] 
Sent: Wednesday, May 14, 2003 1:48 PM
To: twisted-python at twistedmatrix.com
Subject: [Twisted-Python] Re: Binding echo server to a particular ip
address



> The following is your simpleserv.py echo server example.  On a 
> multihost (multiple ip addresses) server, how would I have it listen 
> on a particular ip address?

> def main():
>     """This runs the protocol on port 8000"""
>     factory =3D protocol.ServerFactory()
>     factory.protocol =3D Echo

>     reactor.listenTCP(8000,factory)

reactor.listenTCP(8000, factory, interface="127.0.0.1")

Where 127.0.0.1 is the interface you want to bind to.
Almost too easy uh?

>     reactor.run()

Wladimir



_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From Martin.Moellenbeck at t-online.de  Wed May 14 13:42:55 2003
From: Martin.Moellenbeck at t-online.de (Martin =?ISO-8859-1?Q?M=F6llenbeck?=)
Date: 14 May 2003 21:42:55 +0200
Subject: [Twisted-Python] a little OT: python workshop became a twisted
	workshop
In-Reply-To: <58A990B0-8630-11D7-853B-000393C9700E@twistedmatrix.com>
References: <58A990B0-8630-11D7-853B-000393C9700E@twistedmatrix.com>
Message-ID: <1052941375.2226.5.camel@mond.moellenbeck.local>

Am Mit, 2003-05-14 um 19.20 schrieb Glyph Lefkowitz:
> On Wednesday, May 14, 2003, at 03:01 AM, Federico Di Gregorio wrote:
> 
> > "Advanced Python: network protocols" [...] ended up being a *twisted 
> > workshop*
> 
> Wow!  Thanks for letting us know.  It's always nice to hear things like 
> this :-).

Is there an english version ?

> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From Paul.Morrow at loyaltyworks.com  Wed May 14 15:03:28 2003
From: Paul.Morrow at loyaltyworks.com (Morrow, Paul)
Date: Wed, 14 May 2003 17:03:28 -0400
Subject: [Twisted-Python] Twisted.web and adbapi example?
Message-ID: <FF816FA079A11949BE655A693DC02D104D96E3@exchange2.loyaltyworks.com>

I've been pouring through the docs and examples, but can't find an
example of a .rpy that generates a page containing the results of a
database query.  How would such a thing be properly architected?
Clearly the adbapi would be involved, but then how do I get the query
results into the string returned by my resource?  Or would I use a
deferred instead?

Would someone please share a little code snippet (or point me at
one)illustrating how that would best be accomplished?

Thanks.



From cce at clarkevans.com  Wed May 14 15:39:31 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Wed, 14 May 2003 21:39:31 +0000
Subject: [Twisted-Python] twisted.web.woven.guard.SessionWrapper problems
In-Reply-To: <pan.2003.05.12.07.26.23.732558@smurf.noris.de>
References: <pan.2003.05.12.07.26.23.732558@smurf.noris.de>
Message-ID: <20030514213931.GA19087@doublegemini.com>

On Mon, May 12, 2003 at 09:26:45AM +0200, Matthias Urlichs wrote:
| /sessionized-url/foo
| 	Set cookie
| 	Redirect to /sessionized-url/sp__aef9c34aecc3d9148/foo
| /sessionized-url/sp__aef9c34aecc3d9148/foo
| 	Redirect to either of the next two URLs depending on whether I see a
| 	cookie
| /sessionized-url/sp/foo
| 	URL to use with cookies
| /sessionized-url/sp_aef9c34aecc3d9148/foo
| 	URL to use without cookies

Just to comment.  The pathargs module in the standbox will help with
some of these things.   It uses a colon in the path item to signify
key/value pairs.

   /sessionized-url/session:aef9c34aecc3d9148/foo
  
The pathargs is generic so that *other* parameters can go there,
perhaps a client identifier, etc.

   /sessionized-url/client:29394/report:2939/session:aef9c34aecc3d9148/foo

The advantage of doing it this way, is that the person can copy/paste
the URL and send it to his friend.  Since in the background you
timeout session ids, and link it with a given ip address, you can 
present this person with a login-page, but yet keep the same
client/report identifier.    

Anyway, pathargs is very useful for maintaining state information
when you are using relative links without cookies.

Best,

Clark



From digi at treepy.com  Wed May 14 15:34:16 2003
From: digi at treepy.com (p@)
Date: Wed, 14 May 2003 23:34:16 +0200
Subject: [Twisted-Python] udp exception if connection reset by other peer
In-Reply-To: <Pine.LNX.4.44.0305141421530.28885-100000@zolder>
Message-ID: <01e401c31a60$94e5da20$ec47da50@pat>

If i send a udp packet with a connected udp-protocoll to an other peer
where the port is closed or not reachable and the other peer resets the
connection I get an exception...

How can I suppress this exception?

Cheers 

p@




From itamar at itamarst.org  Wed May 14 15:45:25 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 14 May 2003 17:45:25 -0400
Subject: [Twisted-Python] udp exception if connection reset by other
 peer
In-Reply-To: <01e401c31a60$94e5da20$ec47da50@pat>
References: <Pine.LNX.4.44.0305141421530.28885-100000@zolder>
	<01e401c31a60$94e5da20$ec47da50@pat>
Message-ID: <20030514174525.3d1b08dd.itamar@itamarst.org>

On Wed, 14 May 2003 23:34:16 +0200
"p@" <digi at treepy.com> wrote:

> If i send a udp packet with a connected udp-protocoll to an other peer
> where the port is closed or not reachable and the other peer resets
> the connection I get an exception...

Good point. UDP does occasionally give information about non-reachable
hosts, currently expressed in Twisted by an exception. Should I bother
raising these or just swallow them silently?

Meanwhile, you can just wrap the write() with a try/except: pass.


-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From digi at treepy.com  Wed May 14 16:19:38 2003
From: digi at treepy.com (p@)
Date: Thu, 15 May 2003 00:19:38 +0200
Subject: AW: [Twisted-Python] udp exception if connection reset by other peer
In-Reply-To: <20030514174525.3d1b08dd.itamar@itamarst.org>
Message-ID: <01e501c31a66$e98c53a0$ec47da50@pat>

I think they are only raised if you connect to a localhost or local-lan
peer...
I think there is no need for an exception because you would need to
handle local and internet peers differently...

So I think swallow them silently is ok

Cheers

p@

-----Ursprüngliche Nachricht-----
Von: twisted-python-admin at twistedmatrix.com
[mailto:twisted-python-admin at twistedmatrix.com] Im Auftrag von Itamar
Shtull-Trauring
Gesendet: Mittwoch, 14. Mai 2003 23:45
An: twisted-python at twistedmatrix.com
Betreff: Re: [Twisted-Python] udp exception if connection reset by other
peer

On Wed, 14 May 2003 23:34:16 +0200
"p@" <digi at treepy.com> wrote:

> If i send a udp packet with a connected udp-protocoll to an other peer
> where the port is closed or not reachable and the other peer resets
> the connection I get an exception...

Good point. UDP does occasionally give information about non-reachable
hosts, currently expressed in Twisted by an exception. Should I bother
raising these or just swallow them silently?

Meanwhile, you can just wrap the write() with a try/except: pass.


-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python





From fog at initd.org  Wed May 14 17:01:13 2003
From: fog at initd.org (Federico Di Gregorio)
Date: 15 May 2003 01:01:13 +0200
Subject: [Twisted-Python] a little OT: python workshop became a twisted
	workshop
In-Reply-To: <1052941375.2226.5.camel@mond.moellenbeck.local>
References: <58A990B0-8630-11D7-853B-000393C9700E@twistedmatrix.com>
	 <1052941375.2226.5.camel@mond.moellenbeck.local>
Message-ID: <1052953272.2193.2.camel@momo.initd.org>

Il mer, 2003-05-14 alle 21:42, Martin Möllenbeck ha scritto:
> Am Mit, 2003-05-14 um 19.20 schrieb Glyph Lefkowitz:
> > On Wednesday, May 14, 2003, at 03:01 AM, Federico Di Gregorio wrote:
> > 
> > > "Advanced Python: network protocols" [...] ended up being a *twisted 
> > > workshop*
> > 
> > Wow!  Thanks for letting us know.  It's always nice to hear things like 
> > this :-).
> 
> Is there an english version ?

an english version of what?

-- 
Federico Di Gregorio
Debian GNU/Linux Developer                                fog at debian.org
INIT.D Developer                                           fog at initd.org
             A short story: I want you. I love you. I'll miss you. -- Me
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: Questa parte del messaggio è firmata
URL: </pipermail/twisted-python/attachments/20030515/e650067f/attachment.sig>

From smurf at smurf.noris.de  Wed May 14 22:44:56 2003
From: smurf at smurf.noris.de (Matthias Urlichs)
Date: Thu, 15 May 2003 06:44:56 +0200
Subject: AW: [Twisted-Python] udp exception if connection reset by other peer
References: <20030514174525.3d1b08dd.itamar@itamarst.org> <01e501c31a66$e98c53a0$ec47da50@pat>
Message-ID: <pan.2003.05.15.04.44.55.991232@smurf.noris.de>

Hi, p@ wrote:

> I think they are only raised if you connect to a localhost or local-lan
> peer...

Nope. Some Unixes (Linux in particular) also raise them on the next
write() if an ICMP-Unreachable has arrived in the meantime.

> So I think swallow them silently is ok
> 
If it's an E.*UNREACH error and you're sending the packet to a different
address than the previous one, you need to retry.

-- 
Matthias Urlichs  |  {M:U} IT Design @ m-u-it.de  |  smurf at smurf.noris.de
Disclaimer: The quote was selected randomly. Really. | http://smurf.noris.de
-- 
Nothing matters very much, and few things matter at all.




From mario at ruggier.org  Thu May 15 01:10:31 2003
From: mario at ruggier.org (Mario Ruggier)
Date: Thu, 15 May 2003 09:10:31 +0200
Subject: [Twisted-Python] twisted.web.woven.guard.SessionWrapper problems
In-Reply-To: <20030514213931.GA19087@doublegemini.com>
Message-ID: <50A9E822-86A4-11D7-8251-000393756786@ruggier.org>

On mercredi, mai 14, 2003, at 23:39 Europe/Amsterdam, Clark C. Evans  
wrote:
> On Mon, May 12, 2003 at 09:26:45AM +0200, Matthias Urlichs wrote:
> | /sessionized-url/foo
> | 	Set cookie
> | 	Redirect to /sessionized-url/sp__aef9c34aecc3d9148/foo
> | /sessionized-url/sp__aef9c34aecc3d9148/foo
> | 	Redirect to either of the next two URLs depending on whether I see a
> | 	cookie
> | /sessionized-url/sp/foo
> | 	URL to use with cookies
> | /sessionized-url/sp_aef9c34aecc3d9148/foo
> | 	URL to use without cookies
>
> Just to comment.  The pathargs module in the standbox will help with
> some of these things.   It uses a colon in the path item to signify
> key/value pairs.
>
>    /sessionized-url/session:aef9c34aecc3d9148/foo
>
> The pathargs is generic so that *other* parameters can go there,
> perhaps a client identifier, etc.
>
>     
> /sessionized-url/client:29394/report:2939/session:aef9c34aecc3d9148/> foo
>
> The advantage of doing it this way, is that the person can copy/paste
> the URL and send it to his friend.  Since in the background you
> timeout session ids, and link it with a given ip address, you can
> present this person with a login-page, but yet keep the same
> client/report identifier.
>
> Anyway, pathargs is very useful for maintaining state information
> when you are using relative links without cookies.

hi Clark, just a couple of things:

- the pathargs still has the error pointed out some time ago about
isLeaf being a property and not a callable.
- just tried running it (with current Twisted CVS), and requesting
a 'dynamic' child gives:
exceptions.NameError: global name 'False' is not defined

cheers, mario

>
> Best,
>
> Clark




From tim_nagels at hotmail.com  Thu May 15 08:13:23 2003
From: tim_nagels at hotmail.com (Tim Nagels)
Date: Thu, 15 May 2003 16:13:23 +0200
Subject: [Twisted-Python] trouble Closing App-plugin
Message-ID: <BAY1-F107RApQ7vP46W00019c0e@hotmail.com>

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20030515/74f6884c/attachment.html>

From mario at ruggier.org  Thu May 15 08:27:34 2003
From: mario at ruggier.org (Mario Ruggier)
Date: Thu, 15 May 2003 16:27:34 +0200
Subject: [Twisted-Python] Twisted.web and adbapi example?
In-Reply-To: <FF816FA079A11949BE655A693DC02D104D96E3@exchange2.loyaltyworks.com>
Message-ID: <5ECAD258-86E1-11D7-8251-000393756786@ruggier.org>

An example that uses threads (and not adpapi) is in January's mail  
achive, at:
http://twistedmatrix.com/pipermail/twisted-python/2003-January/ 
002694.html

Here's some old code that uses adpapi (save as a .rpy):

###

from twisted.web import resource
from twisted.web.server import NOT_DONE_YET

dbname = 'test'
dbuser = 'dbuser'
dbpass = 'dbpass'

from twisted.enterprise import row
class FooRow(row.RowObject):
   rowColumns = [
           ('foo_id', 'int'),
           ('name', 'varchar'),
           ('weight', 'int'),
                ]
   rowKeyColumns = [('foo_id', 'int4')]
   rowTableName = 'foo'
   #rowFactoryMethod = ['testFactoryMethod']

def databaseResult_adbapi(result, httpRequest):
     if result:
         for foo in result:
             httpRequest.write('foo: '+str(foo.__dict__)+'<br/>')
     else:
         httpRequest.write('stop:')
     httpRequest.finish()

def errBack_adbapi(err, httpRequest):
     httpRequest.write('error: '+str(err) )
     httpRequest.finish()

class MyResource_adbapi(resource.Resource):
     def render(self, request):
         from twisted.enterprise import adbapi, reflector
         from twisted.enterprise.sqlreflector import SQLReflector
         dbpool =  
adbapi.ConnectionPool('pyPgSQL.PgSQL',database=dbname,user=dbuser,passwo 
rd=dbpass)
         r = SQLReflector(dbpool,[FooRow])
         d = r.loadObjectsFrom('foo',whereClause=[('foo_id',  
reflector.LESSTHAN, 5)])
         d.addCallback(databaseResult_adbapi, request)
         d.addErrback(errBack_adbapi, request)
         return NOT_DONE_YET

resource = MyResource_adbapi()

###

> I've been pouring through the docs and examples, but can't find an
> example of a .rpy that generates a page containing the results of a
> database query.  How would such a thing be properly architected?
> Clearly the adbapi would be involved, but then how do I get the query
> results into the string returned by my resource?  Or would I use a
> deferred instead?
>
> Would someone please share a little code snippet (or point me at
> one)illustrating how that would best be accomplished?
>
> Thanks.




From smurf at smurf.noris.de  Thu May 15 13:52:38 2003
From: smurf at smurf.noris.de (Matthias Urlichs)
Date: Thu, 15 May 2003 21:52:38 +0200
Subject: [Twisted-Python] Twisted.web and adbapi example?
References: <FF816FA079A11949BE655A693DC02D104D96E3@exchange2.loyaltyworks.com> <5ECAD258-86E1-11D7-8251-000393756786@ruggier.org>
Message-ID: <pan.2003.05.15.19.52.36.885572@smurf.noris.de>

Hi, Mario Ruggier wrote:

> Here's some old code that uses adpapi (save as a .rpy):

... and edit to remove the line wraps your editor added.

Please turn wrapping off before pasting. Thank you.

-- 
Matthias Urlichs   |   {M:U} IT Design @ m-u-it.de   |  smurf at smurf.noris.de
Disclaimer: The quote was selected randomly. Really. | http://smurf.noris.de
-- 
"I have to convince you, or at least snow you ..."
		-- Prof. Romas Aleliunas, CS 435




From lordvan at lordvan.com  Thu May 15 11:02:38 2003
From: lordvan at lordvan.com (Thomas Raschbacher)
Date: Thu, 15 May 2003 19:02:38 +0200 (CEST)
Subject: [Twisted-Python] Twisted.web and adbapi example?
In-Reply-To: <pan.2003.05.15.19.52.36.885572@smurf.noris.de>
References: <FF816FA079A11949BE655A693DC02D104D96E3@exchange2.loyaltyworks.com>
        <5ECAD258-86E1-11D7-8251-000393756786@ruggier.org>
        <pan.2003.05.15.19.52.36.885572@smurf.noris.de>
Message-ID: <65202.62.47.64.183.1053018158.squirrel@mail-at.net>

hi!

I got one using t.w.w.p.Page & t.e.adbapi .. i'll post later/tomorrow ..
(if i forget just drop me a private mail ;)

regards
<quote who="Matthias Urlichs">
> Hi, Mario Ruggier wrote:
>
>> Here's some old code that uses adpapi (save as a .rpy):
>
> ... and edit to remove the line wraps your editor added.
>
> Please turn wrapping off before pasting. Thank you.
>
> --
> Matthias Urlichs   |   {M:U} IT Design @ m-u-it.de   |
> smurf at smurf.noris.de Disclaimer: The quote was selected randomly.
> Really. | http://smurf.noris.de --
> "I have to convince you, or at least snow you ..."
> 		-- Prof. Romas Aleliunas, CS 435
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-- 
-----BEGIN GEEK CODE BLOCK-----
GCS/CC/E/M/MU/S d- s: a--- C++++(++) UL++++ P+ L++++ E W+++ N+++ o-- K w-- O
M-- V- PS+ PE-- Y++ PGP+++ t+++ 5+ X- R tv b++++ DI- D+ G++ e-->+++++ h-- !r
z-
------END GEEK CODE BLOCK------


-----------------------------------------
This email was sent using SquirrelMail.
   "Webmail for nuts!"
http://squirrelmail.org/





From simon at callan.demon.co.uk  Thu May 15 15:43:55 2003
From: simon at callan.demon.co.uk (Simon Callan)
Date: Thu, 15 May 2003 22:43:55 +0100
Subject: [Twisted-Python] Porting Twisted Python to a new platform
Message-ID: <c95c2df34b.simon@velvet.callan.demon.co.uk>

Hi,

I've just come across Twisted Python, and it looks like just the thing
that I need for the projects that I want to play around with. There is
only one slight problem, it's not available for the platform I'll be
using (python on RISC OS).

This means that I have to write the extra code needed to interface
Twisted Python to the RISC OS GUI, and I was wondering if there is any
information available as to how I should go about this.

The GUI event loop is pretty standard, with one apparently unique
feature - the event poll can indicate that there is data available to
be read from a socket, or that a socket has just become writeable.

If anyone has any advice, I would be very grateful.

Simon

-- 
Livejournal: http://nallac.livejournal.com/




From radix at twistedmatrix.com  Thu May 15 15:50:00 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Thu, 15 May 2003 17:50:00 -0400
Subject: [Twisted-Python] Porting Twisted Python to a new platform
In-Reply-To: <c95c2df34b.simon@velvet.callan.demon.co.uk>; from simon@callan.demon.co.uk on Thu, May 15, 2003 at 17:43:55 -0400
References: <c95c2df34b.simon@velvet.callan.demon.co.uk>
Message-ID: <20030515215000.GA21431@toshi.anaprd01.md.comcast.net>

On 2003.05.15 17:43, Simon Callan wrote:
> Hi,
> 
> I've just come across Twisted Python, and it looks like just the thing
> that I need for the projects that I want to play around with. There is
> only one slight problem, it's not available for the platform I'll be
> using (python on RISC OS).
> 
> This means that I have to write the extra code needed to interface
> Twisted Python to the RISC OS GUI, and I was wondering if there is any
> information available as to how I should go about this.
> 
> The GUI event loop is pretty standard, with one apparently unique
> feature - the event poll can indicate that there is data available to
> be read from a socket, or that a socket has just become writeable.

I'm pretty sure the GTK has the same feature, and the gtkreactor 
(twisted.internet.gtkreactor) takes advantage of it. You probably want
to read that code.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From exarkun at intarweb.us  Thu May 15 16:45:46 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Thu, 15 May 2003 18:45:46 -0400
Subject: [Twisted-Python] trouble Closing App-plugin
In-Reply-To: <BAY1-F107RApQ7vP46W00019c0e@hotmail.com>
References: <BAY1-F107RApQ7vP46W00019c0e@hotmail.com>
Message-ID: <20030515224546.GA16049@meson.dyndns.org>

On Thu, May 15, 2003 at 04:13:23PM +0200, Tim Nagels wrote:
> [snip html]

  Please don't post HTML to the list.  Other concerns aside, it makes
reading your code rather difficult (html disregards whitespace, unlike some
languages!)

  Jp

-- 
Examinations are formidable even to the best prepared, for
even the greatest fool may ask more the the wisest man can answer.
                -- C.C. Colton
-- 
 up 13 days, 20:39, 2 users, load average: 0.00, 0.00, 0.00
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030515/7d6fcbc4/attachment.sig>

From dreid at twistedmatrix.com  Thu May 15 19:50:32 2003
From: dreid at twistedmatrix.com (David Reid)
Date: Thu, 15 May 2003 20:50:32 -0500
Subject: [Twisted-Python] Straightening out www.twistedmatrix.com
Message-ID: <20030516015032.GA361@pyramid.twistedmatrix.com>

I've been handed the task of straightening out the Twisted website.
My first task is to simply remove references to features/products etc
that are no longer being supported or used etc.  (Like jython)  So all
I'm asking is for some of the people who really grok twisted to send an
email my way whenever they find something that can be
removed/modified/maybe even added.

Thanks,
David Reid



From radix at twistedmatrix.com  Thu May 15 20:46:18 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Thu, 15 May 2003 22:46:18 -0400
Subject: [Twisted-Python] Straightening out www.twistedmatrix.com
In-Reply-To: <20030516015032.GA361@pyramid.twistedmatrix.com>; from dreid@twistedmatrix.com on Thu, May 15, 2003 at 21:50:32 -0400
References: <20030516015032.GA361@pyramid.twistedmatrix.com>
Message-ID: <20030516024618.GC21431@toshi.anaprd01.md.comcast.net>

On 2003.05.15 21:50, David Reid wrote:
> I've been handed the task of straightening out the Twisted website.
> My first task is to simply remove references to features/products etc
> that are no longer being supported or used etc.  (Like jython)  So all
> I'm asking is for some of the people who really grok twisted to send an
> email my way whenever they find something that can be
> removed/modified/maybe even added.

Well, the "Plugins" page is quite obsolete; Twisted Forums and Twisted 
Metrics are outright dead, Twisted Bugs has been renamed Twisted Issues.

>From a once-over of all the content in the site, those seem to be the most
obvious places for some improvement.

Good luck :-)

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From Martin.Moellenbeck at t-online.de  Thu May 15 23:23:17 2003
From: Martin.Moellenbeck at t-online.de (Martin =?ISO-8859-1?Q?M=F6llenbeck?=)
Date: 16 May 2003 07:23:17 +0200
Subject: [Twisted-Python] a little OT: python workshop became a twisted
	workshop
In-Reply-To: <1052953272.2193.2.camel@momo.initd.org>
References: <58A990B0-8630-11D7-853B-000393C9700E@twistedmatrix.com>
	 <1052941375.2226.5.camel@mond.moellenbeck.local>
	 <1052953272.2193.2.camel@momo.initd.org>
Message-ID: <1053062596.2055.6.camel@mond.moellenbeck.local>

Am Don, 2003-05-15 um 01.01 schrieb Federico Di Gregorio:
> Il mer, 2003-05-14 alle 21:42, Martin Möllenbeck ha scritto:
> > Am Mit, 2003-05-14 um 19.20 schrieb Glyph Lefkowitz:
> > > On Wednesday, May 14, 2003, at 03:01 AM, Federico Di Gregorio wrote:
> > > 
> > > > "Advanced Python: network protocols" [...] ended up being a *twisted 
> > > > workshop*
> > > 
> > > Wow!  Thanks for letting us know.  It's always nice to hear things like 
> > > this :-).
> > 
> > Is there an english version ?
> 
> an english version of what?

I looked at www.webb.it, but the site isn't in english.

ciao,
Martin




From lafou at wanadoo.fr  Fri May 16 03:02:24 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: 16 May 2003 11:02:24 +0200
Subject: [Twisted-Python] splitting log file
Message-ID: <1053075744.3183.1278.camel@biproc>

Hello

I've made a server using PB and woven (both are running in main server).
When I do some very long calculations, the log file is splitted in
several parts (977K). Moreover, web log is mixed with PB log, which hard
to debug. Is there a way to correct these two problems ?


thx
Philippe




From ddimoti at mi2.hr  Fri May 16 03:18:10 2003
From: ddimoti at mi2.hr (Drazen Dimoti)
Date: Fri, 16 May 2003 11:18:10 +0200 (MEST)
Subject: [Twisted-Python] splitting log file
In-Reply-To: <1053075744.3183.1278.camel@biproc>
References: <1053075744.3183.1278.camel@biproc>
Message-ID: <45880.217.14.214.4.1053076690.squirrel@services.mi2.hr>

hi,

maybe this will help:
http://www.twistedmatrix.com/documents/examples/rotatinglog.py


> Hello
>
> I've made a server using PB and woven (both are running in main server).
> When I do some very long calculations, the log file is splitted in
> several parts (977K). Moreover, web log is mixed with PB log, which hard
> to debug. Is there a way to correct these two problems ?
>
>
> thx
> Philippe
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-- 
D.R.A.Z.E.N - Digital Robotic Assassination and Zealous Exploration Neohuman





From lafou at wanadoo.fr  Fri May 16 03:35:37 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: 16 May 2003 11:35:37 +0200
Subject: [Twisted-Python] splitting log file
In-Reply-To: <45880.217.14.214.4.1053076690.squirrel@services.mi2.hr>
References: <1053075744.3183.1278.camel@biproc>
	 <45880.217.14.214.4.1053076690.squirrel@services.mi2.hr>
Message-ID: <1053077737.3183.1282.camel@biproc>

On Fri, 2003-05-16 at 11:18, Drazen Dimoti wrote:
> hi,
> 
> maybe this will help:
> http://www.twistedmatrix.com/documents/examples/rotatinglog.py

Thank you !
I'll take a look at the api. there must be a way to avoid splitting in log (like  rotateLength=0 or -1)





From justinjohnson at fastmail.fm  Fri May 16 07:05:47 2003
From: justinjohnson at fastmail.fm (Justin Johnson)
Date: Fri, 16 May 2003 07:05:47 -0600
Subject: [Twisted-Python] twisted.python.usage.Options Questions
In-Reply-To: <1053077737.3183.1282.camel@biproc>
References: <1053075744.3183.1278.camel@biproc>
 	 <45880.217.14.214.4.1053076690.squirrel@services.mi2.hr> <1053077737.3183.1282.camel@biproc>
Message-ID: <20030516130547.0611A33135@www.fastmail.fm>

Greetings,

I'm using twisted.python.usage to handle command-line option parsing. 
The script I have uses subcommands, so I can type:

myscript.py subcommand -a 1 -b 2 ...

I sub-classed BaseOptions as follows...

[code]
# Setup command-line options for all subcommands
class BaseOptions(usage.Options):
	optFlags = [
		['help', 'h', "Display usage information"],
	]

class MkvobOptions(BaseOptions):
	optParameters = [
		['vobs', 'v', None, "Comma-delimited list of VOBs to create"],
		['original', 'o', None, "Original site to create VOBs at first"],
        ['sites', 's', None, "Comma-delimited list of sites to replicate
        to"],
		['group', 'g', r'UHCADAAA\ccusers', "NT group to be primary group for VOBs"]
	]
	def postOptions(self):
		for opt in ["vobs","original"]:
			if not self[opt]:
				raise usage.UsageError, "--vobs and --original are required."

class RmvobOptions(BaseOptions):
	optParameters = [
		['vobs', 'v', None, "Comma-delimited list of VOBs to remove"],
		['original', 'o', None, "Site to remove VOBs from"],
	]
	def postOptions(self):
		for opt in ["vobs","original"]:
			if not self[opt]:
				raise usage.UsageError, "--vobs and --original are required."

class Options(usage.Options):
	subCommands = [
		['mkvob', None, MkvobOptions, "Create VOBs"],
		['rmvob', None, RmvobOptions, "Remove VOBs"]
	]
[/code]

I have some questions though.

1)  Passing in the --help option displays usage info the way I'd want it,
grabbing __doc__ from the top of the file and also displaying info about
my subcommands.  

[output]
C:\share\python\uhg\uht\tsd\ClearCase>vobtool.py --help
Usage: vobtool.py [options]
Options:
      --version
      --help     Display this help and exit.

VOB Administrative Tool  <<< This is my __doc__

Commands:
    mkvob      Create VOBs
    rmvob      Remove VOBs


C:\share\python\uhg\uht\tsd\ClearCase>
[/output]

But when I pass the --help option to a subcommand, I'd like to have some
sort of __doc__ equivalent for the subcommand, but I get the following
instead.

[output]
C:\share\python\uhg\uht\tsd\ClearCase>vobtool.py mkvob --help
Usage: vobtool.py [options]
Options:
  -h, --help       Display this help and exit.
  -v, --vobs=      Comma-delimited list of VOBs to create
  -o, --original=  Original site to create VOBs at first
  -s, --sites=     Comma-delimited list of sites to replicate to
  -g, --group=     NT group to be primary group for VOBs [default:
                   UHCADAAA\ccusers]
      --version

VOB Administrative Tool  <<< The __doc__ for the file
[/output]

Is there a way to do that?

2)  When I just run the command without passing any options (not even a
subcommand) I get the following error:

[output]
C:\share\python\uhg\uht\tsd\ClearCase>vobtool.py
Traceback (most recent call last):
  File "C:\share\python\uhg\uht\tsd\ClearCase\vobtool.py", line 121, in ?
    main()
  File "C:\share\python\uhg\uht\tsd\ClearCase\vobtool.py", line 55, in
  main
    if config.subCommand == 'mkvob':
  File "C:\Python22\Lib\site-packages\twisted\python\usage.py", line 151,
  in __g
etattr__
    raise AttributeError("%s instance has no attribute '%s'" %
    (self.__class__,
attr))
AttributeError: __main__.Options instance has no attribute 'subCommand'

C:\share\python\uhg\uht\tsd\ClearCase>
[/output]

My main function is as follows...

[snip]
# Main function
def main():
	config = Options()
	try:
		config.parseOptions()
	except usage.UsageError, errortext:
		print '%s: %s' % (sys.argv[0], errortext)
		print '%s: Try --help for usage details.' % (sys.argv[0])
		sys.exit(1)

	if config.subCommand == 'mkvob':
		doMkvob(config.subOptions)
	elif config.subCommand == 'rmvob':
		doRmvob(config.subOptions)
[snip]

Is there a particular test I should do on config before checking
config.subCommand?

3)  I see there is a --version option available if you use
twisted.python.usage.  But it always displays the Twisted version.  Is
there a way to override that so the --version option either isn't
available or at least returns the version information for my script and
not for Twisted?


Sorry for the long email.
Thanks so much.
-Justin



From itamar at itamarst.org  Fri May 16 07:56:50 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 16 May 2003 09:56:50 -0400
Subject: [Twisted-Python] splitting log file
In-Reply-To: <1053075744.3183.1278.camel@biproc>
References: <1053075744.3183.1278.camel@biproc>
Message-ID: <20030516095650.76d70a06.itamar@itamarst.org>

On 16 May 2003 11:02:24 +0200
Philippe Lafoucrière <lafou at wanadoo.fr> wrote:

> I've made a server using PB and woven (both are running in main
> server). When I do some very long calculations, the log file is
> splitted in several parts (977K). Moreover, web log is mixed with PB
> log, which hard to debug. Is there a way to correct these two problems
> ?

The web server lets you specify a different file for the web log, as one
of the arguments to the twisted.web.server.Site, IIRC.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From korpios at korpios.com  Fri May 16 08:00:46 2003
From: korpios at korpios.com (Tom 'Korpios' Tobin)
Date: Fri, 16 May 2003 10:00:46 -0400
Subject: [Twisted-Python] Patch: Make twisted.web.distrib work with twisted.web.vhost
Message-ID: <20030516140046.GA60812@hecate.korpios.net>

Here is a patch to make twisted.web.distrib work with twisted.web.vhost.

As things stand, when twisted.web.vhost calls a virtual host's getChildWithDefault, it ends up calling getChild.  As ResourceSubscription has no getChild, the render call never happens to make the distributed connection.  By returning self, we can make this happen.

On the ResourcePublisher side of things, after being called in this way (e.g. through a virtual host) request's prepath and postpath are a bit off; we fix this in remote_request.


--- distrib.py  Fri May 16 09:41:18 2003
+++ distrib-patched.py  Fri May 16 09:50:01 2003
@@ -174,6 +174,11 @@
             self.publisher.callRemote('request', request).addCallbacks(i.finished, i.failed)
         return NOT_DONE_YET

+    def getChild(self, path, request):
+        """I am a child; I should return myself so render can be called.
+        """
+        return self
+
 class ResourcePublisher(pb.Root, styles.Versioned):
     def __init__(self, site):
         self.site = site
@@ -191,6 +196,8 @@
         return self

     def remote_request(self, request):
+        if len(request.prepath) > 0:
+            request.postpath.insert(0, request.prepath.pop())
         res = self.site.getResourceFor(request)
         log.msg( request )
         return res.render(request)



Tom "Korpios" Tobin
korpios at korpios.com





From korpios at korpios.com  Fri May 16 08:38:50 2003
From: korpios at korpios.com (Tom 'Korpios' Tobin)
Date: Fri, 16 May 2003 10:38:50 -0400
Subject: [Twisted-Python] Patch: Passive getSession for twisted.web.server.Request
Message-ID: <20030516143850.GA61048@hecate.korpios.net>

This patch adds an option to pass a named argument, passive, to twisted.web.server.Request's getSession method.  If passive is true, then getSession will check for the existence of a session or session cookie; it will not, however, drop a session cookie on the client if one does not already exist.  If there is no session, one would expect None from getSession in this case.

This is useful in conditions where one would like to check for (and use) a session if one already exists, but not necessarily drop a session cookie on every client which comes along.


--- server.py   Fri May 16 09:41:15 2003
+++ server-patched.py   Fri May 16 10:32:02 2003
@@ -305,7 +305,7 @@

     session = None

-    def getSession(self, sessionInterface = None):
+    def getSession(self, sessionInterface = None, passive = 0):
         # Session management
         if not self.session:
             cookiename = string.join(['TWISTED_SESSION'] + self.sitepath, "_")
@@ -316,12 +316,13 @@
                 except KeyError:
                     pass
             # if it still hasn't been set, fix it up.
-            if not self.session:
+            if not self.session and not passive:
                 self.session = self.site.makeSession()
                 self.addCookie(cookiename, self.session.uid, path='/')
-        self.session.touch()
-        if sessionInterface:
-            return self.session.getComponent(sessionInterface)
+        if self.session:
+            self.session.touch()
+            if sessionInterface:
+                return self.session.getComponent(sessionInterface)
         return self.session

     def prePathURL(self):


Tom "Korpios" Tobin
korpios at korpios.com




From lafou at wanadoo.fr  Fri May 16 08:52:23 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: 16 May 2003 16:52:23 +0200
Subject: [Twisted-Python] splitting log file
In-Reply-To: <20030516095650.76d70a06.itamar@itamarst.org>
References: <1053075744.3183.1278.camel@biproc>
	 <20030516095650.76d70a06.itamar@itamarst.org>
Message-ID: <1053096743.7295.2.camel@biproc>

Ha thnx, I was looking for that 

On Fri, 2003-05-16 at 15:56, Itamar Shtull-Trauring wrote:
> On 16 May 2003 11:02:24 +0200
> Philippe Lafoucrière <lafou at wanadoo.fr> wrote:
> 
> > I've made a server using PB and woven (both are running in main
> > server). When I do some very long calculations, the log file is
> > splitted in several parts (977K). Moreover, web log is mixed with PB
> > log, which hard to debug. Is there a way to correct these two problems
> > ?
> 
> The web server lets you specify a different file for the web log, as one
> of the arguments to the twisted.web.server.Site, IIRC.
-- 
Philippe Lafoucrière <lafou at wanadoo.fr>
InFuzzion




From justinjohnson at fastmail.fm  Fri May 16 09:23:12 2003
From: justinjohnson at fastmail.fm (Justin Johnson)
Date: Fri, 16 May 2003 09:23:12 -0600
Subject: [Twisted-Python] Transparent Remote Objects
In-Reply-To: <20030516130547.0611A33135@www.fastmail.fm>
References: <1053075744.3183.1278.camel@biproc>
  	 <45880.217.14.214.4.1053076690.squirrel@services.mi2.hr> <1053077737.3183.1282.camel@biproc> <20030516130547.0611A33135@www.fastmail.fm>
Message-ID: <20030516152312.3426F5E42@www.fastmail.fm>

Hello,

I have a bunch of servers I have to support and I want to be able to
connect remotely to the servers to run commands.  I actually got this
working by taking the pbsimple.py example and adding the remote methods I
want and then creating a command-line tool to interact with the service. 
It works great!

However, I have some commands that require a command to be run on one
machine (exporting a packet) and then connecting remotely to another
machine to complete the operation (importing a packet).  Adding callbacks
to Deffereds looks a little cumbersome and makes it harder to read the
code.  Is there a way to make this more transparent?  Like Defining
Remote objects that can have methods called on them?  I'm picture
something like the following, on a high level.  VOB is just a repository
I create on one machine and then export to multiple sites where I have to
import them.

start_site = "some_site"  # The place where the original VOB will be
created
sites = ["site1","site2","site3"]

for tag in vobs:
    v = RemoteVOB(tag,start_site)
    v.make()  # Runs a command to create the VOB
    for s in sites:
        v.export(s)  # Creates a packet and exports it to the destination
        site
        rv = RemoteVOB(tag,s) # Creates a remote object at the
        destination site
        rv.import() # Import the packet, completing the creation of the
        VOB replica

Is there anything in twisted that works this way?  If not, does anyone
have any suggestions on how to simplify the callback coding?  I'm pretty
new to this and my understanding of what's going on under the covers is
quite lacking.

I must say though, it was exceptionally easy to take the pbsimple example
and create a tremendously useful service to simplify administration. 
This is some cool stuff!

Thanks.
-Justin



From wari at home.wari.org  Fri May 16 10:26:36 2003
From: wari at home.wari.org (Wari Wahab)
Date: Sat, 17 May 2003 00:26:36 +0800
Subject: [Twisted-Python] Named Pipes
Message-ID: <3EC5113C.6070703@home.wari.org>

Hi, is there a way to get twisted to listen to a named pipe like it's a 
TCP connection or something? How would I go about it?

What I wanted goes like this, there's a named piped, and syslog or other 
programs can send one line alerts (or multiline as well), and my app is 
supposed to do something with this data while attending to other stuff 
as well. We have a perl program that does this using select(), and I bet 
this can be done with twisted. But I don't see a named pipe 
implementation in the twisted docs. I'm sure there's a way.

-- 
Regards: Wari Wahab
RoughingIT - http://roughingit.subtlehints.net
PyBlosxom  - http://roughingit.subtlehints.net/pyblosxom




From uwe at oss4u.com  Fri May 16 10:37:32 2003
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Fri, 16 May 2003 09:37:32 -0700
Subject: [Twisted-Python] Problem creating working .tap file
Message-ID: <200305160937.32054.uwe@oss4u.com>

Hi,

something strange shows up here. I try to create a TAP from a pb application.
The tap is created nicely, but I get an error when starting it:

Failed to load application: <twisted.persisted.styles.Ephemeral instance at 
0x82450a4> is not safe for unpickling

So I tried a simple application and took the echoer from the manual.

from twisted.spread import pb
from twisted.internet import app

class Echoer(pb.Root):
    def remote_echo(self,st):
        print "echo: ",st
        return st

appl=app.Application("echo")
appl.listenTCP(8888,pb.BrokerFactory(Echoer()))
appl.save("start")


Funny thing is, this generates the same error when I try to start it.

I'm using 1.0.5 on mandrake 9.1

Any hints would be appreciated.

	UC

--
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417




From glyph at twistedmatrix.com  Fri May 16 11:11:39 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 16 May 2003 12:11:39 -0500
Subject: [Twisted-Python] Patch: Make twisted.web.distrib work with twisted.web.vhost
In-Reply-To: <20030516140046.GA60812@hecate.korpios.net>
Message-ID: <74E5BE58-87C1-11D7-A5D5-000393C9700E@twistedmatrix.com>

On Friday, May 16, 2003, at 09:00 AM, Tom 'Korpios' Tobin wrote:

> As things stand, when twisted.web.vhost calls a virtual host's 
> getChildWithDefault, it ends up calling getChild.  As 
> ResourceSubscription has no getChild, the render call never happens to 
> make the distributed connection.  By returning self, we can make this 
> happen.

This strikes me as a hack.  Rather than returning self and screwing up 
prepath/postpath, the virtual host ought to be honoring isLeaf.




From glyph at twistedmatrix.com  Fri May 16 11:14:21 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 16 May 2003 12:14:21 -0500
Subject: [Twisted-Python] Patch: Passive getSession for twisted.web.server.Request
In-Reply-To: <20030516143850.GA61048@hecate.korpios.net>
Message-ID: <D585CB47-87C1-11D7-A5D5-000393C9700E@twistedmatrix.com>

On Friday, May 16, 2003, at 09:38 AM, Tom 'Korpios' Tobin wrote:

> This patch adds an option to pass a named argument, passive, to 
> twisted.web.server.Request's getSession method.  If passive is true, 
> then getSession will check for the existence of a session or session 
> cookie; it will not, however, drop a session cookie on the client if 
> one does not already exist.  If there is no session, one would expect 
> None from getSession in this case.

The session stuff in twisted.web.server is on its way to being phased 
out anyway.  Have a look at twisted.web.woven.guard - resources wrapped 
with a SessionWrapper will have the semantics of getSession that you 
want; it puts a setupSession method on the request which tells the 
browser to begin negotiating a session.  (Also, this method is 
resilient in the face of cookies being disabled.)




From m at moshez.org  Fri May 16 11:36:38 2003
From: m at moshez.org (Moshe Zadka)
Date: 16 May 2003 17:36:38 -0000
Subject: [Twisted-Python] Named Pipes
In-Reply-To: <3EC5113C.6070703@home.wari.org>
References: <3EC5113C.6070703@home.wari.org>
Message-ID: <20030516173638.28603.qmail@green.zadka.com>

On Sat, 17 May 2003, Wari Wahab <wari at home.wari.org> wrote:

> Hi, is there a way to get twisted to listen to a named pipe like it's a 
> TCP connection or something? How would I go about it?

It's fairly easy, and probably should be done in Twisted at some point.

from twisted.internet import abstract, fdesc

class SelectableFile(abstract.FileDescriptor):

    def __init__(self, fp, protocol):
        self.fp = fp
        fdesc.setNonBlocking(fp)
        self.protocol = protocol
        self.protocol.makeConnection(self)
        self.fileno = self.fp.fileno

    def doRead(self):
        buf = self.fp.read(4096)
        if buf:
            self.protocol.dataReceived(buf)
        else:
            self.protocol.connectionLost()

    def write(self, data):
        pass # what can we do with the data?

    def loseConnection(self):
        self.fp.close()


reactor.addReader(SelectableFile(open("myNamedPipe"), protocolInstance))
[this is completely untested]

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From korpios at korpios.com  Fri May 16 11:50:25 2003
From: korpios at korpios.com (Tom 'Korpios' Tobin)
Date: Fri, 16 May 2003 13:50:25 -0400
Subject: [Twisted-Python] Patch: Passive getSession for twisted.web.server.Request
In-Reply-To: <D585CB47-87C1-11D7-A5D5-000393C9700E@twistedmatrix.com>
References: <20030516143850.GA61048@hecate.korpios.net> <D585CB47-87C1-11D7-A5D5-000393C9700E@twistedmatrix.com>
Message-ID: <20030516175025.GA61876@hecate.korpios.net>

Hmm.  I specifically don't like the way Woven works.  My preferred web development method is akin to Quixote; I really can't stand HTML templating in the vein of PHP, etc.  That said, am I going to need to reimplement Session code down the road due to this phase-out?  Even if SessionWrapper works standalone without using the bulk of Woven, I would much rather not be importing any Woven libraries unnecessarily.


Thanks,

Tom "Korpios" Tobin
korpios at korpios.com


On Fri, May 16, 2003 at 12:14:21PM -0500, Glyph Lefkowitz wrote:
> 
> The session stuff in twisted.web.server is on its way to being phased 
> out anyway.  Have a look at twisted.web.woven.guard - resources wrapped 
> with a SessionWrapper will have the semantics of getSession that you 
> want; it puts a setupSession method on the request which tells the 
> browser to begin negotiating a session.  (Also, this method is 
> resilient in the face of cookies being disabled.)



From radix at twistedmatrix.com  Fri May 16 11:53:18 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 16 May 2003 13:53:18 -0400
Subject: [Twisted-Python] Patch: Passive getSession for twisted.web.server.Request
In-Reply-To: <20030516175025.GA61876@hecate.korpios.net>; from korpios@korpios.com on Fri, May 16, 2003 at 13:50:25 -0400
References: <20030516143850.GA61048@hecate.korpios.net> <D585CB47-87C1-11D7-A5D5-000393C9700E@twistedmatrix.com> <20030516175025.GA61876@hecate.korpios.net>
Message-ID: <20030516175318.GE21431@toshi.anaprd01.md.comcast.net>

On 2003.05.16 13:50, Tom 'Korpios' Tobin wrote:
> Hmm.  I specifically don't like the way Woven works.  My preferred web
> development method is akin to Quixote; I really can't stand HTML 
> templating in the vein of PHP, etc.

You're badly confused about Woven if you think it's anything remotely
like PHP.

You don't put code in the templates in woven.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From glyph at twistedmatrix.com  Fri May 16 12:04:37 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 16 May 2003 13:04:37 -0500
Subject: [Twisted-Python] Transparent Remote Objects
In-Reply-To: <20030516152312.3426F5E42@www.fastmail.fm>
Message-ID: <DB6A73F9-87C8-11D7-A5D5-000393C9700E@twistedmatrix.com>

On Friday, May 16, 2003, at 10:23 AM, Justin Johnson wrote:

> Adding callbacks to Deffereds looks a little cumbersome and makes it 
> harder to read the code.  Is there a way to make this more > transparent?

Transparency is not a goal of PB.

It does sound like you don't really need many callbacks though: your 
example code could be something like:

o = remoteThingy.getMeAVobContainer().addCallback(gotMeAVobContainer)

class RemoteVOB:
     def __init__(self, vc, tag, site):
         self.vc = vc
         self.tag = tag
         self.site = site

     def make(self):
         return self.vc.callRemote("makeVOB", self.tag, self.site)
     def export(self, s):
         return self.vc.callRemote("exportVOB", self.tag, self.site, s)
     def import(self):
         return self.vc.callRemote("importVOB", self.tag, self.site)

def gotMeAVobContainer(vc):
     for tag in vobs:
         v = RemoteVOB(vc, tag, start_site)
         v.make()
         for s in sites:
             v.export(s)
             rv = RemoteVOB(tag, s)
             rv.import()

Does that explain anything?




From korpios at korpios.com  Fri May 16 12:15:55 2003
From: korpios at korpios.com (Tom 'Korpios' Tobin)
Date: Fri, 16 May 2003 14:15:55 -0400
Subject: [Twisted-Python] Patch: Passive getSession for twisted.web.server.Request
In-Reply-To: <20030516175318.GE21431@toshi.anaprd01.md.comcast.net>
References: <20030516143850.GA61048@hecate.korpios.net> <D585CB47-87C1-11D7-A5D5-000393C9700E@twistedmatrix.com> <20030516175025.GA61876@hecate.korpios.net> <20030516175318.GE21431@toshi.anaprd01.md.comcast.net>
Message-ID: <20030516181555.GA62026@hecate.korpios.net>

I wasn't trying to imply that Woven worked specifically like PHP; it still involves web templating (albeit in conjunction with a Model), though.  It isn't to my taste, as I prefer coding web applications directly without a templating system; Quixote would be an example of this (http://www.mems-exchange.org/software/quixote/).  My concern was, as stated previously, that a broader functionality (session code) was getting moved into a more specific sybsystem (Woven).


Tom "Korpios" Tobin
korpios at korpios.com


On Fri, May 16, 2003 at 01:53:18PM -0400, Christopher Armstrong wrote:
> 
> On 2003.05.16 13:50, Tom 'Korpios' Tobin wrote:
> > Hmm.  I specifically don't like the way Woven works.  My preferred web
> > development method is akin to Quixote; I really can't stand HTML 
> > templating in the vein of PHP, etc.
> 
> You're badly confused about Woven if you think it's anything remotely
> like PHP.
> 
> You don't put code in the templates in woven.



From exarkun at intarweb.us  Fri May 16 12:14:53 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Fri, 16 May 2003 14:14:53 -0400
Subject: [Twisted-Python] twisted.python.usage.Options Questions
In-Reply-To: <20030516130547.0611A33135@www.fastmail.fm>
References: <1053075744.3183.1278.camel@biproc> <45880.217.14.214.4.1053076690.squirrel@services.mi2.hr> <1053077737.3183.1282.camel@biproc> <20030516130547.0611A33135@www.fastmail.fm>
Message-ID: <20030516181453.GA17428@meson.dyndns.org>

On Fri, May 16, 2003 at 07:05:47AM -0600, Justin Johnson wrote:
> Greetings,
> 
> I'm using twisted.python.usage to handle command-line option parsing. 
> The script I have uses subcommands, so I can type:
> 
> myscript.py subcommand -a 1 -b 2 ...
> 
> I sub-classed BaseOptions as follows...
> 
> [snip code]
> I have some questions though.
> 
> 1)  Passing in the --help option displays usage info the way I'd want it,
> grabbing __doc__ from the top of the file and also displaying info about
> my subcommands.  
> 
> [snip output]
> 
> Is there a way to do that?

  Hmm, I don't believe so.  Usage could probably be patched to print
something slightly different for options with subcommands.

> 
> 2)  When I just run the command without passing any options (not even a
> subcommand) I get the following error:
> 
> [snip traceback, main() definition]
> 
> Is there a particular test I should do on config before checking
> config.subCommand?

  Add "subCommand = None" or something similar to your Options subclass  fix
the exception you're getting.  Alternatively, just test hasattr(config,
'subCommand') before your conditional.  I often do this in postOptions and
raise a UsageError if a subcommand is required and none has been given.


  Jp

-- 
"Pascal is Pascal is Pascal is dog meat."
                -- M. Devine and P. Larson, Computer Science 340
-- 
 up 14 days, 14:39, 0 users, load average: 0.01, 0.02, 0.00
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030516/64ea0016/attachment.sig>

From glyph at twistedmatrix.com  Fri May 16 12:21:07 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 16 May 2003 13:21:07 -0500
Subject: [Twisted-Python] Patch: Passive getSession for twisted.web.server.Request
In-Reply-To: <20030516175025.GA61876@hecate.korpios.net>
Message-ID: <29862528-87CB-11D7-A5D5-000393C9700E@twistedmatrix.com>

On Friday, May 16, 2003, at 12:50 PM, Tom 'Korpios' Tobin wrote:

> Hmm.  I specifically don't like the way Woven works.

Woven is the Twisted web browser-based application framework.  The 
presence of browser-interaction features like sessions and cookies in 
twisted.web was really an accident due to the author's lack of 
appreciation for how these sorts of things worked at the time that he 
was writing it originally.  (ahem.)

If you don't like the templating system, don't use it :-), but that is 
only one part of what woven gives you.

> My preferred web development method is akin to Quixote; I really can't 
> stand HTML templating in the vein of PHP, etc.

To put Radix's comments more succinctly: dude, are you mental?  I think 
it would be difficult for Woven to have less in common with PHP and 
still talk to a web browser.  To the extent that it is analogous to 
previous work, it is most like Barracuda[1] or ZPT[2].

> That said, am I going to need to reimplement Session code down the 
> road due to this phase-out?

Probably at some point, but we tend to be very relaxed about web 
deprecations (even ones that TOTALLY suck, like twisted.web.widgets).  
The Session code in twisted.web.server is pretty fragile though, 
especially compared to the woven.guard stuff.

> Even if SessionWrapper works standalone without using the bulk of 
> Woven, I would much rather not be importing any Woven libraries 
> unnecessarily.

Don't worry about it.  In future releases of Twisted, woven will be 
imported for pretty much all the HTML generation that the web server 
will do internally, including directory listings and status pages.  
It's not all that much code.

----
	[1]: http://www.barracudamvc.org/
	[2]: http://www.zope.org/Documentation/Books/ZopeBook/current/ZPT.stx




From justinjohnson at fastmail.fm  Fri May 16 12:34:33 2003
From: justinjohnson at fastmail.fm (Justin Johnson)
Date: Fri, 16 May 2003 12:34:33 -0600
Subject: [Twisted-Python] Transparent Remote Objects
In-Reply-To: <DB6A73F9-87C8-11D7-A5D5-000393C9700E@twistedmatrix.com>
References: <DB6A73F9-87C8-11D7-A5D5-000393C9700E@twistedmatrix.com>
Message-ID: <20030516183433.2EFD0357C3@www.fastmail.fm>

In your example, is VobContainer the object returned by
pb.getObjectAt(server, 8789, 30)?  And then the callRemote method ends up
invoking the remote_* methods on the service running on the other server
(the thing that inherits pb.Root)?  So I basically a class RemoteVOB that
just needs a connection to the service and it makes the remote calls for
me?

Feel free to correct my terminology if it's messed up.

Thanks.

On Fri, 16 May 2003 13:04:37 -0500, "Glyph Lefkowitz"
<glyph at twistedmatrix.com> said:
> 
> On Friday, May 16, 2003, at 10:23 AM, Justin Johnson wrote:
> 
> > Adding callbacks to Deffereds looks a little cumbersome and makes it 
> > harder to read the code.  Is there a way to make this more > transparent?
> 
> Transparency is not a goal of PB.
> 
> It does sound like you don't really need many callbacks though: your 
> example code could be something like:
> 
> o = remoteThingy.getMeAVobContainer().addCallback(gotMeAVobContainer)
> 
> class RemoteVOB:
>      def __init__(self, vc, tag, site):
>          self.vc = vc
>          self.tag = tag
>          self.site = site
> 
>      def make(self):
>          return self.vc.callRemote("makeVOB", self.tag, self.site)
>      def export(self, s):
>          return self.vc.callRemote("exportVOB", self.tag, self.site, s)
>      def import(self):
>          return self.vc.callRemote("importVOB", self.tag, self.site)
> 
> def gotMeAVobContainer(vc):
>      for tag in vobs:
>          v = RemoteVOB(vc, tag, start_site)
>          v.make()
>          for s in sites:
>              v.export(s)
>              rv = RemoteVOB(tag, s)
>              rv.import()
> 
> Does that explain anything?
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 



From justinjohnson at fastmail.fm  Fri May 16 12:41:35 2003
From: justinjohnson at fastmail.fm (Justin Johnson)
Date: Fri, 16 May 2003 12:41:35 -0600
Subject: [Twisted-Python] twisted.python.usage.Options Questions
In-Reply-To: <20030516181453.GA17428@meson.dyndns.org>
References: <1053075744.3183.1278.camel@biproc> <45880.217.14.214.4.1053076690.squirrel@services.mi2.hr> <1053077737.3183.1282.camel@biproc> <20030516130547.0611A33135@www.fastmail.fm> <20030516181453.GA17428@meson.dyndns.org>
Message-ID: <20030516184135.D19DC3593D@www.fastmail.fm>

> > 1)  Passing in the --help option displays usage info the way I'd want it,
> > grabbing __doc__ from the top of the file and also displaying info about
> > my subcommands.  
> > 
> > [snip output]
> > 
> > Is there a way to do that?
> 
>   Hmm, I don't believe so.  Usage could probably be patched to print
> something slightly different for options with subcommands.

I was thinking it would make sense to grab the doc from the class that
handles the options for the particular subcommand, since it is the only
class/function that we already know the name of and that is already
associated with the subcommand.

class RmvobOptions(usage.Options):
	"""Remove a VOB, yada yada yada <<< Here's my doc to go into usage
	"""
	optParameters = [
		['vobs', 'v', None, "Comma-delimitted list of VOBs to remove"],
		['original', 'o', None, "Site to remove VOBs from"],
	]
	def postOptions(self):
		for opt in ["vobs","original"]:
			if not self[opt]:
				raise usage.UsageError, "--vobs and --original are required."

Does that make sense?  Is that something you can do, or should I get
familiar with the code and submit a patch?
Thanks for your other suggestions as well.

-Justin



From glyph at twistedmatrix.com  Fri May 16 13:12:06 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 16 May 2003 14:12:06 -0500
Subject: [Twisted-Python] Transparent Remote Objects
In-Reply-To: <20030516183433.2EFD0357C3@www.fastmail.fm>
Message-ID: <48F0EC2C-87D2-11D7-A5D5-000393C9700E@twistedmatrix.com>

On Friday, May 16, 2003, at 01:34 PM, Justin Johnson wrote:

> Feel free to correct my terminology if it's messed up.

It sounds like you've basically got it right :).  Is that example 
useful to you?




From justinjohnson at fastmail.fm  Fri May 16 13:32:00 2003
From: justinjohnson at fastmail.fm (Justin Johnson)
Date: Fri, 16 May 2003 13:32:00 -0600
Subject: [Twisted-Python] Transparent Remote Objects
In-Reply-To: <48F0EC2C-87D2-11D7-A5D5-000393C9700E@twistedmatrix.com>
References: <48F0EC2C-87D2-11D7-A5D5-000393C9700E@twistedmatrix.com>
Message-ID: <20030516193200.42FEB313F1@www.fastmail.fm>

Yes it is.  Thanks for your help!

On Fri, 16 May 2003 14:12:06 -0500, "Glyph Lefkowitz"
<glyph at twistedmatrix.com> said:
> On Friday, May 16, 2003, at 01:34 PM, Justin Johnson wrote:
> 
> > Feel free to correct my terminology if it's messed up.
> 
> It sounds like you've basically got it right :).  Is that example 
> useful to you?
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 



From warner at lothar.com  Fri May 16 14:52:03 2003
From: warner at lothar.com (Brian Warner)
Date: Fri, 16 May 2003 13:52:03 -0700 (PDT)
Subject: [Twisted-Python] Problem creating working .tap file
References: <200305160937.32054.uwe@oss4u.com>
Message-ID: <20030516.135203.74749224.warner@lothar.com>

> something strange shows up here. I try to create a TAP from a pb application.
> The tap is created nicely, but I get an error when starting it:
> 
> Failed to load application: <twisted.persisted.styles.Ephemeral instance at 
> 0x82450a4> is not safe for unpickling

This is a pretty common gotcha. The class name of your Echoer() object is
stored in the tap file, and used at startup time to import the necessary
code. However, in your program, the class name is really __main__.Echoer. You
need to to a 'from myfile import Echoer' in the block where you perform the
listenTCP.

More details in <http://twistedmatrix.com/documents/howto/faq#auto15>,
"twistd won't load my .tap file!". I've added a note about the Ephemeral
message to make it easier to search for.

cheers,
 -Brian



From exarkun at intarweb.us  Fri May 16 14:52:45 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Fri, 16 May 2003 16:52:45 -0400
Subject: [Twisted-Python] twisted.python.usage.Options Questions
In-Reply-To: <20030516184135.D19DC3593D@www.fastmail.fm>
References: <1053075744.3183.1278.camel@biproc> <45880.217.14.214.4.1053076690.squirrel@services.mi2.hr> <1053077737.3183.1282.camel@biproc> <20030516130547.0611A33135@www.fastmail.fm> <20030516181453.GA17428@meson.dyndns.org> <20030516184135.D19DC3593D@www.fastmail.fm>
Message-ID: <20030516205245.GA17836@meson.dyndns.org>

On Fri, May 16, 2003 at 12:41:35PM -0600, Justin Johnson wrote:
> 
> > > 1)  Passing in the --help option displays usage info the way I'd want it,
> > > grabbing __doc__ from the top of the file and also displaying info about
> > > my subcommands.  
> > > 
> > > [snip output]
> > > 
> > > Is there a way to do that?
> > 
> >   Hmm, I don't believe so.  Usage could probably be patched to print
> > something slightly different for options with subcommands.
> 
> I was thinking it would make sense to grab the doc from the class that
> handles the options for the particular subcommand, since it is the only
> class/function that we already know the name of and that is already
> associated with the subcommand.
> [snip]
>
> Does that make sense?  Is that something you can do, or should I get
> familiar with the code and submit a patch?
> Thanks for your other suggestions as well.

  This is just what I was thinking.  If the change to make was obvious to
me, I'd do it, but after a quick look I find that I don't entirely remember
how this code works.  Could you come up with a patch for this?

  Jp

-- 
"If you find a neighbor in need, you're responsible for serving that
neighbor in need, you're responsible for loving a neighbor just like you'd
like to love yourself." -- George W. Bush, Sept. 16, 2002
-- 
 up 14 days, 18:39, 3 users, load average: 0.02, 0.02, 0.00
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030516/d3cd71c6/attachment.sig>

From uwe at oss4u.com  Fri May 16 15:17:41 2003
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Fri, 16 May 2003 14:17:41 -0700
Subject: [Twisted-Python] Problem creating working .tap file
In-Reply-To: <20030516.135203.74749224.warner@lothar.com>
References: <200305160937.32054.uwe@oss4u.com> <20030516.135203.74749224.warner@lothar.com>
Message-ID: <200305161417.41659.uwe@oss4u.com>

On Friday 16 May 2003 01:52 pm, Brian Warner wrote:
> > something strange shows up here. I try to create a TAP from a pb
> > application. The tap is created nicely, but I get an error when starting
> > it:
> >
> > Failed to load application: <twisted.persisted.styles.Ephemeral instance
> > at 0x82450a4> is not safe for unpickling
>
> This is a pretty common gotcha. The class name of your Echoer() object is
> stored in the tap file, and used at startup time to import the necessary
> code. However, in your program, the class name is really __main__.Echoer.
> You need to to a 'from myfile import Echoer' in the block where you perform
> the listenTCP.
>
> More details in <http://twistedmatrix.com/documents/howto/faq#auto15>,
> "twistd won't load my .tap file!". I've added a note about the Ephemeral
> message to make it easier to search for.

Good idea to add the reference. I was browsing the FAQ for this since I 
already thought it might be one.
Thanks, that does the trick.

	UC

--
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417




From joebrown at rclooke.com  Fri May 16 15:27:08 2003
From: joebrown at rclooke.com (Joe Brown)
Date: Fri, 16 May 2003 17:27:08 -0400
Subject: [Twisted-Python] database access via cred and ssl encryption
In-Reply-To: <20030516205245.GA17836@meson.dyndns.org>
References: <1053075744.3183.1278.camel@biproc> <45880.217.14.214.4.1053076690.squirrel@services.mi2.hr> <1053077737.3183.1282.camel@biproc> <20030516130547.0611A33135@www.fastmail.fm> <20030516181453.GA17428@meson.dyndns.org> <20030516184135.D19DC3593D@www.fastmail.fm> <20030516205245.GA17836@meson.dyndns.org>
Message-ID: <3EC557AC.1010302@rclooke.com>

I'm anxious to get started using Twisted, but my objective is a little 
overwhelming for me, at the onset.

Reading the documentation, it looks fairly easy to use prospective 
broker or enteprise.  I don't see how to incorporate ssl encryption, but 
imagine it's not terribly difficult.

Is it possible with twisted to authenticate database access with 
prospective or cred and encrypt communication with ssl via twisted?

TIA,

-Joe




From glyph at twistedmatrix.com  Fri May 16 15:30:24 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 16 May 2003 16:30:24 -0500
Subject: [Twisted-Python] twisted.web.woven.guard.SessionWrapper problems
In-Reply-To: <pan.2003.05.12.07.26.23.732558@smurf.noris.de>
Message-ID: <9AFEFF88-87E5-11D7-A5D5-000393C9700E@twistedmatrix.com>

On Monday, May 12, 2003, at 02:26 AM, Matthias Urlichs wrote:

> Some browsers, including wget, don't like _at_all_ when you have a 
> cycle
> in your redirections, even though they should notice that they now 
> have a
> cookie while formerly they didn't.

The other features of your suggestions still merit some discussion, 
however, this particular issue is fixed in CVS by adding the 
?__session_just_started__=1 tag to the URL in the final redirect.  I 
tested it with wget, and it works.




From justinjohnson at fastmail.fm  Fri May 16 17:45:12 2003
From: justinjohnson at fastmail.fm (Justin Johnson)
Date: Fri, 16 May 2003 17:45:12 -0600
Subject: [Twisted-Python] twisted.python.usage.Options Questions
In-Reply-To: <20030516205245.GA17836@meson.dyndns.org>
References: <1053075744.3183.1278.camel@biproc> <45880.217.14.214.4.1053076690.squirrel@services.mi2.hr> <1053077737.3183.1282.camel@biproc> <20030516130547.0611A33135@www.fastmail.fm> <20030516181453.GA17428@meson.dyndns.org> <20030516184135.D19DC3593D@www.fastmail.fm> <20030516205245.GA17836@meson.dyndns.org>
Message-ID: <20030516234512.8234B2BE4B@www.fastmail.fm>

> > I was thinking it would make sense to grab the doc from the class that
> > handles the options for the particular subcommand, since it is the only
> > class/function that we already know the name of and that is already
> > associated with the subcommand.
> > [snip]
> >
> > Does that make sense?  Is that something you can do, or should I get
> > familiar with the code and submit a patch?
> > Thanks for your other suggestions as well.
> 
>   This is just what I was thinking.  If the change to make was obvious to
> me, I'd do it, but after a quick look I find that I don't entirely
> remember
> how this code works.  Could you come up with a patch for this?

Yeah, not till next week though.  I think __str__ needs to change.

    443         if not (getattr(self, "longdesc", None) is None):
    444             longdesc = self.longdesc
    445         else:
    446             import __main__
    447             if getattr(__main__, '__doc__', None):
    448                 longdesc = __main__.__doc__
    449             else:
    450                 longdesc = ''

Probably needs to change to check self.subCommands[2].__doc__ if it
exists, or something like that.  I'll take a look next week.

-Justin



From cce at clarkevans.com  Fri May 16 20:27:08 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Sat, 17 May 2003 02:27:08 +0000
Subject: [Twisted-Python] database access via cred and ssl encryption
In-Reply-To: <3EC557AC.1010302@rclooke.com>
References: <1053075744.3183.1278.camel@biproc> <45880.217.14.214.4.1053076690.squirrel@services.mi2.hr> <1053077737.3183.1282.camel@biproc> <20030516130547.0611A33135@www.fastmail.fm> <20030516181453.GA17428@meson.dyndns.org> <20030516184135.D19DC3593D@www.fastmail.fm> <20030516205245.GA17836@meson.dyndns.org> <3EC557AC.1010302@rclooke.com>
Message-ID: <20030517022708.GA27129@doublegemini.com>

Joe,

My requirement was to have a server authenticate via a client
via a server certificate known by the client.   To implement
this, I had to patch the internet/ssl.py file; and to make 
the 'fetch' aspect easy, I had a small change to web/client.py
As far as I know, these patches have not been applied; however,
you may find them useful...

Clark
-------------- next part --------------
39c39
< from OpenSSL import SSL
---
> from OpenSSL import SSL, crypto
57a58,60
> def dumpCertificate(cert, filetype = crypto.FILETYPE_PEM ):
>     ''' a helper to dump an incoming cert as a PEM '''
>     return crypto.dump_certificate(filetype, cert)
62,63c65,67
<                  sslmethod=SSL.SSLv23_METHOD):
<         self.privateKeyFileName = privateKeyFileName
---
>                  sslmethod=SSL.SSLv23_METHOD, verifyCallback = None):
>         self.verifyCallback      = (verifyCallback, )      
>         self.privateKeyFileName  = privateKeyFileName
67a72,77
>                         
>     def verifyCertificate(self, conn, cert, errno, depth, retcode):
>         cb = self.verifyCallback[0]
>         if cb: return cb(cert)
>         return 1
> 
71a82,83
>         if self.verifyCallback[0]:
>             ctx.set_verify(SSL.VERIFY_PEER, self.verifyCertificate) 
-------------- next part --------------
--- client.py.orig	Tue Mar 25 18:10:28 2003
+++ client.py	Tue Mar 25 18:55:08 2003
@@ -63,7 +63,8 @@
         l = self.headers.get('location')
         if not l:
             self.handleStatusDefault()
-        host, port, url = _parse(l[0])
+        https, host, port, url = _parse(l[0])
+        assert not https, "https redirects not implemented yet"
         self.factory.host, self.factory.url = host, url
         reactor.connectTCP(host, port, self.factory)
         self.quietLoss = 1
@@ -105,7 +106,9 @@
 
     protocol = HTTPPageGetter
 
-    def __init__(self, host, url, method='GET', postdata=None, headers=None, agent="Twisted PageGetter"):
+    def __init__(self, host, url, method='GET', postdata=None, 
+                 headers=None, agent=None):
+        if agent is None: agent = "Twisted PageGetter"
         if headers is not None:
             self.headers = headers
         if postdata is not None:
@@ -141,8 +144,10 @@
     protocol = HTTPPageDownloader
     value = None
 
-    def __init__(self, host, url, fileName, method='GET', postdata=None, headers=None, agent="Twisted client"):
-        HTTPClientFactory.__init__(self, host, url, method=method, postdata=postdata, headers=headers, agent=agent)
+    def __init__(self, host, url, fileName, method='GET', postdata=None, 
+                 headers=None, agent = None):
+        HTTPClientFactory.__init__(self, host, url, method, 
+                                   postdata, headers, agent)
         self.fileName = fileName
         self.deferred = defer.Deferred()
         self.waiting = 1
@@ -166,26 +171,59 @@
 def _parse(url):
     parsed = urlparse.urlparse(url)
     url = urlparse.urlunparse(('','')+parsed[2:])
-    host, port = parsed[1], 80
+    host = parsed[1]
+    if 'https' == parsed[0]:
+        https, port = 1, 443
+    else:
+        https, port = 0, 80
     if ':' in host:
         host, port = host.split(':')
         port = int(port)
-    return host, port, url
+    return https, host, port, url
 
-def getPage(url, *args, **kwargs):
+def getPage(url, method='GET', postdata=None, headers=None, agent = None):
     '''download a web page
 
     Download a page. Return a deferred, which will
     callback with a page or errback with a description
     of the error.
     '''
-    host, port, url = _parse(url)
-    factory = HTTPClientFactory(host, url, *args, **kwargs)
+    https, host, port, path = _parse(url)
+    if https: return getSecurePage(url, method, postdata, headers, agent)
+    factory = HTTPClientFactory(host, path, method, postdata, headers, agent)
     reactor.connectTCP(host, port, factory)
     return factory.deferred
 
+try:
+    from twisted.internet import ssl
+    def getSecurePage(url, method='GET', postdata=None, headers=None, 
+                      agent = None,
+                      privateKeyFileName = None, certificateFileName = None,
+                      sslmethod=ssl.SSL.SSLv23_METHOD, verifyCallback = None, 
+                      serverCertificateFileName = None):
+        """ download a secure page """
+        https, host, port, path = _parse(url)
+        if serverCertificateFileName:
+            cert = file(serverCertificateFileName).read()
+            verifyCallback = lambda rhs: ssl.dumpCertificate(cert) == rhs
+        if verifyCallback or certificateFileName or privateKeyFileName:
+            context = ssl.DefaultOpenSSLContextFactory(
+                          privateKeyFileName, certificateFileName,
+                          sslmethod, verifyCallback)
+            context.isClient = 1
+        else:
+            context = ssl.ClientContextFactory()
+        factory = HTTPClientFactory(host, path, method, postdata, headers)
+        reactor.connectSSL(host, port, factory, context)
+        return factory.deferred
+except:
+    def getSecurePage(*args,**kwargs):
+        raise Exception("ssl not available")
+
 def downloadPage(url, file, *args, **kwargs):
-    host, port, url = _parse(url)
-    factory = HTTPDownloader(host, url, file, *args, **kwargs)
+    https, host, port, path = _parse(url)
+    assert not https, "https is not yet implemented here"
+    factory = HTTPDownloader(host, path, file, *args, **kwargs)
     reactor.connectTCP(host, port, factory)
     return factory.deferred
+

From Matthew at walkerwireless.co.nz  Thu May 15 16:13:52 2003
From: Matthew at walkerwireless.co.nz (matiu)
Date: Fri, 16 May 2003 10:13:52 +1200
Subject: [Twisted-Python] protocols.smtp patch
Message-ID: <005201c31b2f$44686110$0201a8c0@JONAH>

protocols.smtp client creates a temp file for every email it sends on my windows box. Apply this patch to stop that.

Matthew Sherborne
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20030516/ada42790/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: twisted.protocols.smtp.patch
Type: application/octet-stream
Size: 662 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030516/ada42790/attachment-0002.obj>

From wari at wari.per.sg  Fri May 16 08:50:40 2003
From: wari at wari.per.sg (Wari Wahab)
Date: Fri, 16 May 2003 22:50:40 +0800
Subject: [Twisted-Python] Named pipes
Message-ID: <3EC4FAC0.6040105@wari.per.sg>

Hi, is there a way to get twisted to listen to a named pipe like it's a 
TCP connection or something? How would I go about it?

What I wanted goes like this, there's a named piped, and syslog or other 
programs can send one line alerts (or multiline as well), and my app is 
supposed to do something with this data while attending to other stuff 
as well. We have a perl program that does this using select(), and I bet 
this can be done with twisted. But I don't see a named pipe protocol in 
twisted. I'm sure there's a way.

-- 
Regards: Wari Wahab
RoughingIT - http://roughingit.subtlehints.net
PyBlosxom  - http://roughingit.subtlehints.net/pyblosxom




From joe at overdrivepc.com  Fri May 16 22:08:33 2003
From: joe at overdrivepc.com (Joe Brown)
Date: Sat, 17 May 2003 00:08:33 -0400
Subject: [Twisted-Python] database access via cred and ssl encryption
In-Reply-To: <20030517022708.GA27129@doublegemini.com>
References: <1053075744.3183.1278.camel@biproc> <45880.217.14.214.4.1053076690.squirrel@services.mi2.hr> <1053077737.3183.1282.camel@biproc> <20030516130547.0611A33135@www.fastmail.fm> <20030516181453.GA17428@meson.dyndns.org> <20030516184135.D19DC3593D@www.fastmail.fm> <20030516205245.GA17836@meson.dyndns.org> <3EC557AC.1010302@rclooke.com> <20030517022708.GA27129@doublegemini.com>
Message-ID: <3EC5B5C1.2000105@overdrivepc.com>

Clark,

Thanks for the patch.  This will likely be useful for me in the future, 
when I tackle the web aspect. 

At present I'm concerned with encrypting database communications via 
twisted.  My interest is writing a data entry application using wxPython 
and integrating database connunications via twisted for secure 
communication.

-Joe

Clark C. Evans wrote:

>Joe,
>
>My requirement was to have a server authenticate via a client
>via a server certificate known by the client.   To implement
>this, I had to patch the internet/ssl.py file; and to make 
>the 'fetch' aspect easy, I had a small change to web/client.py
>As far as I know, these patches have not been applied; however,
>you may find them useful...
>
>Clark
>  
>





From wari at home.wari.org  Fri May 16 22:45:45 2003
From: wari at home.wari.org (Wari Wahab)
Date: Sat, 17 May 2003 12:45:45 +0800
Subject: [Twisted-Python] Named Pipes
In-Reply-To: <20030516173638.28603.qmail@green.zadka.com>
References: <3EC5113C.6070703@home.wari.org> <20030516173638.28603.qmail@green.zadka.com>
Message-ID: <3EC5BE79.2030207@home.wari.org>

Moshe Zadka wrote:
>>Hi, is there a way to get twisted to listen to a named pipe like it's a 
>>TCP connection or something? How would I go about it?
> It's fairly easy, and probably should be done in Twisted at some point.

Ah, I got my own based on stdio.StandardIO and that does not work the 
way I want, this way seems better :)

> from twisted.internet import abstract, fdesc
> class SelectableFile(abstract.FileDescriptor):
>     def __init__(self, fp, protocol):
>         self.fp = fp
>         fdesc.setNonBlocking(fp)
>         self.protocol = protocol
>         self.protocol.makeConnection(self)
>         self.fileno = self.fp.fileno
>     def doRead(self):
>         buf = self.fp.read(4096)

I had to do this on a try block:
try:
     buf = self.fp.read(4096)
except IOError:
     buf = None
>         if buf:
>             self.protocol.dataReceived(buf)
>         else:
>             self.protocol.connectionLost()
>     def write(self, data):
>         pass # what can we do with the data?
>     def loseConnection(self):
>         self.fp.close()

Wait, how did you guys make it so easy? :) Anyway, I find that 
loseConnection is never called (when I restart syslog, or when I deleted 
the named pipe), this thing goes on like a battery, of course the effect 
of deleting the file and recreating it does not get the communications 
working anymore because of inode/filepointer diffences.

Thanks for pointing this one out to me.

-- 
Regards: Wari Wahab
RoughingIT - http://roughingit.subtlehints.net
PyBlosxom  - http://roughingit.subtlehints.net/pyblosxom




From jml at ids.org.au  Sat May 17 15:10:12 2003
From: jml at ids.org.au (jml at ids.org.au)
Date: Sun, 18 May 2003 07:10:12 +1000
Subject: [Twisted-Python] [PATCH] remove and index for world's StorableList
Message-ID: <20030517211012.GA17678@mumak.net>


Hi guys,

I need these methods. They're untested but they look right-ish.

cheers,
jml


Index: twisted/world/compound.py
===================================================================
RCS file: /cvs/Twisted/twisted/world/compound.py,v
retrieving revision 1.6
diff -u -r1.6 compound.py
--- twisted/world/compound.py   16 May 2003 05:00:28 -0000      1.6
+++ twisted/world/compound.py   17 May 2003 09:47:44 -0000
@@ -227,6 +227,16 @@
         l.sort()
         self[:] = l
  
+    def index(self, x):
+        for i in range(len(self)):
+            if x == self[i]:
+                return i
+        raise ValueError, "StorableList.index(x): x not in list"
+
+    def remove(self, x):
+        del self[self.index(x)]
+
+
 class _Nothing:
     """
     this can stop torg
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030518/97a27df8/attachment.sig>

From glyph at twistedmatrix.com  Sat May 17 12:44:03 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 17 May 2003 13:44:03 -0500
Subject: [Twisted-Python] [PATCH] remove and index for world's StorableList
In-Reply-To: <20030517211012.GA17678@mumak.net>
Message-ID: <87E64BF4-8897-11D7-A5D5-000393C9700E@twistedmatrix.com>

On Saturday, May 17, 2003, at 04:10 PM, jml at ids.org.au wrote:

> I need these methods. They're untested but they look right-ish.

They look right to me - please add a test in test_world...testListOf 
(it should be easy enough)




From bob at redivi.com  Sat May 17 13:21:12 2003
From: bob at redivi.com (Bob Ippolito)
Date: Sat, 17 May 2003 15:21:12 -0400
Subject: [Twisted-Python] [PATCH] remove and index for world's StorableList
In-Reply-To: <87E64BF4-8897-11D7-A5D5-000393C9700E@twistedmatrix.com>
Message-ID: <B8C3E578-889C-11D7-A25F-000A95686CD8@redivi.com>

On Saturday, May 17, 2003, at 14:44 America/New_York, Glyph Lefkowitz 
wrote:

>
> On Saturday, May 17, 2003, at 04:10 PM, jml at ids.org.au wrote:
>
>> I need these methods. They're untested but they look right-ish.
>
> They look right to me - please add a test in test_world...testListOf 
> (it should be easy enough)
>

except for the fact that index uses range and not xrange, looks good to 
me as well.

-bob




From tv at twistedmatrix.com  Sun May 18 13:36:57 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Sun, 18 May 2003 22:36:57 +0300
Subject: [Twisted-Python] web brokage
Message-ID: <20030518193608.GA29330@tao.tv.debian.net>

<Tv> tm.com/documents/howto/ has "Form in Depth" and "Guard in Depth" repeated.
<Tv> And the two lore docs have the same link text.
<liiwi>  |mail webmonkey at tm.com
<Tv> Is that a real address?
<liiwi> try :)

	I didn't.

-- 
:(){ :|:&};:



From Matthew at walkerwireless.co.nz  Sun May 18 15:52:09 2003
From: Matthew at walkerwireless.co.nz (matiu)
Date: Mon, 19 May 2003 09:52:09 +1200
Subject: [Twisted-Python] protocols.smtp patch
References: <005201c31b2f$44686110$0201a8c0@JONAH>
Message-ID: <002b01c31d87$bb8f7f80$0201a8c0@JONAH>

Before anyone else yells out, this patch only kill the temp file if sending the message was succesful. I'll submit one later that also closes all temp files on connection lost.

I wonder if the smtp protocol can handle sending multiple messages per single connection. Maybe I'll submit a patch for that too (if it doesn't already).

GBU
Matthew Sherborne
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20030519/8fd7f92a/attachment.html>

From stuart.hungerford at anu.edu.au  Sun May 18 21:03:09 2003
From: stuart.hungerford at anu.edu.au (Stuart Hungerford)
Date: Mon, 19 May 2003 13:03:09 +1000
Subject: [Twisted-Python] Interrupted system call in Twisted.Web...
Message-ID: <5.2.0.9.0.20030519125830.00bc4e68@anusf.anu.edu.au>

Hi all,

My application is happily using Twisted.Web for a web interface to
a set of resources.  At one point I'm doing an os.popen2() call to
find some details on a particular resource. For now at least using
the popen2() call is the only way I can get this information.

Occasionally I'm getting an "Interrupted system call" Python
exception from this call.  I'd guess that os.popen2() is not
especially friendly to an asynchronous processing model like that
used in Twisted?

Could someone point me toward a more Twisted-aware approach than
using os.popen2()?


Cheers,

Stu

--
:: Stuart Hungerford (stuart.hungerford at anu.edu.au)
:: ANU Internet Futures Group




From radix at twistedmatrix.com  Sun May 18 21:09:20 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 18 May 2003 23:09:20 -0400
Subject: [Twisted-Python] Interrupted system call in Twisted.Web...
In-Reply-To: <5.2.0.9.0.20030519125830.00bc4e68@anusf.anu.edu.au>; from stuart.hungerford@anu.edu.au on Sun, May 18, 2003 at 23:03:09 -0400
References: <5.2.0.9.0.20030519125830.00bc4e68@anusf.anu.edu.au>
Message-ID: <20030519030920.GA641@toshi.anaprd01.md.comcast.net>

On 2003.05.18 23:03, Stuart Hungerford wrote:
> Hi all,
> 
> My application is happily using Twisted.Web for a web interface to
> a set of resources.  At one point I'm doing an os.popen2() call to
> find some details on a particular resource. For now at least using
> the popen2() call is the only way I can get this information.
> 
> Occasionally I'm getting an "Interrupted system call" Python
> exception from this call.  I'd guess that os.popen2() is not
> especially friendly to an asynchronous processing model like that
> used in Twisted?
> 
> Could someone point me toward a more Twisted-aware approach than
> using os.popen2()?

Yeah, you should be using `reactor.spawnProcess'. There's also some
utilities in twisted.internet.util for getting the output of a command
in a Deferred.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From justinjohnson at fastmail.fm  Mon May 19 09:07:15 2003
From: justinjohnson at fastmail.fm (Justin Johnson)
Date: Mon, 19 May 2003 09:07:15 -0600
Subject: [Twisted-Python] twisted.python.usage.Options Questions
In-Reply-To: <20030516205245.GA17836@meson.dyndns.org>
References: <1053075744.3183.1278.camel@biproc> <45880.217.14.214.4.1053076690.squirrel@services.mi2.hr> <1053077737.3183.1282.camel@biproc> <20030516130547.0611A33135@www.fastmail.fm> <20030516181453.GA17428@meson.dyndns.org> <20030516184135.D19DC3593D@www.fastmail.fm> <20030516205245.GA17836@meson.dyndns.org>
Message-ID: <20030519150715.6A5A9347EA@www.fastmail.fm>

Looking at the code I saw that when a subcommand is passed in, the
following code in parseOptions resets the command to be the subcommand
and calls parseOptions again. 


      if len(args) and getattr(self, 'subCommands', None):
            sub, rest = args[0], args[1:]
            for (cmd, short, parser, doc) in self.subCommands:
                if sub == cmd or sub == short:
                    self.subCommand = cmd
                    self.subOptions = parser()
                    self.subOptions.parseOptions(rest)
                    break

Because of this, when we get to __str__, the method that is used to
display the usage info, we don't have anything we can look at to
determine if we should return __main__.__doc__ (if my.py --help was run)
or if we should return self.__doc__ (if my.py subcmd --help was run).

Would it make sense to change the code to always return self.__doc__, and
then the usage doc for the entire script could be stored in the base
Options class __doc__ (the one that defines subCommands)?  The following
patch changes this functionality, but of course it would break current
functionality.

Maybe there's a better way to do this, but I can't think of it.

Thanks.
-Justin


--- usage.py.orig       2003-05-19 08:09:55.000000000 -0500
+++ usage.py    2003-05-19 09:46:01.000000000 -0500
@@ -442,9 +442,8 @@
         if not (getattr(self, "longdesc", None) is None):
             longdesc = self.longdesc
         else:
-            import __main__
-            if getattr(__main__, '__doc__', None):
-                longdesc = __main__.__doc__
+            if getattr(self, '__doc__', None):
+                longdesc = self.__doc__
             else:
                 longdesc = ''




On Fri, 16 May 2003 16:52:45 -0400, "Jp Calderone" <exarkun at intarweb.us>
said:
> On Fri, May 16, 2003 at 12:41:35PM -0600, Justin Johnson wrote:
> > 
> > > > 1)  Passing in the --help option displays usage info the way I'd want it,
> > > > grabbing __doc__ from the top of the file and also displaying info about
> > > > my subcommands.  
> > > > 
> > > > [snip output]
> > > > 
> > > > Is there a way to do that?
> > > 
> > >   Hmm, I don't believe so.  Usage could probably be patched to print
> > > something slightly different for options with subcommands.
> > 
> > I was thinking it would make sense to grab the doc from the class that
> > handles the options for the particular subcommand, since it is the only
> > class/function that we already know the name of and that is already
> > associated with the subcommand.
> > [snip]
> >
> > Does that make sense?  Is that something you can do, or should I get
> > familiar with the code and submit a patch?
> > Thanks for your other suggestions as well.
> 
>   This is just what I was thinking.  If the change to make was obvious to
> me, I'd do it, but after a quick look I find that I don't entirely
> remember
> how this code works.  Could you come up with a patch for this?
> 
>   Jp
> 
> -- 
> "If you find a neighbor in need, you're responsible for serving that
> neighbor in need, you're responsible for loving a neighbor just like
> you'd
> like to love yourself." -- George W. Bush, Sept. 16, 2002
> -- 
>  up 14 days, 18:39, 3 users, load average: 0.02, 0.02, 0.00



From pobrien at orbtech.com  Mon May 19 14:20:25 2003
From: pobrien at orbtech.com (Patrick K. O'Brien)
Date: 19 May 2003 15:20:25 -0500
Subject: [Twisted-Python] Twisted and SQL-Ledger
Message-ID: <m2he7qwuwm.fsf@orbtech.com>

I'm going to be creating a Twisted Woven/Enterprise interface for
SQL-Ledger, an Open Source accounting package that uses PostgreSQL and
a Perl web interface.  Is anyone else interested in such a thing?

SQL-Ledger: http://www.sql-ledger.org/

-- 
Patrick K. O'Brien
Orbtech      http://www.orbtech.com/web/pobrien
-----------------------------------------------
"Your source for Python programming expertise."
-----------------------------------------------




From dave at krondo.com  Mon May 19 14:47:26 2003
From: dave at krondo.com (Dave Peticolas)
Date: 19 May 2003 13:47:26 -0700
Subject: [Twisted-Python] Twisted and SQL-Ledger
In-Reply-To: <m2he7qwuwm.fsf@orbtech.com>
References: <m2he7qwuwm.fsf@orbtech.com>
Message-ID: <1053377246.5002.342.camel@oneiros>

On Mon, 2003-05-19 at 13:20, Patrick K. O'Brien wrote:
> I'm going to be creating a Twisted Woven/Enterprise interface for
> SQL-Ledger, an Open Source accounting package that uses PostgreSQL and
> a Perl web interface.  Is anyone else interested in such a thing?
> 
> SQL-Ledger: http://www.sql-ledger.org/

Absolutely, this would be excellent. Let me know if I can help out.

dave

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20030519/ed6f28d9/attachment.sig>

From pobrien at orbtech.com  Mon May 19 15:05:25 2003
From: pobrien at orbtech.com (Patrick K. O'Brien)
Date: 19 May 2003 16:05:25 -0500
Subject: [Twisted-Python] Twisted.Web and Perl CGIs
Message-ID: <m2addiwstm.fsf@orbtech.com>

I'm having trouble getting a Twisted.Web configured properly to work
with some Perl CGI scripts.  The Perl scripts are part of SQL-Ledger,
and their instructions are for Apache, but I'm hoping to using Twisted
instead of Apache.

To begin, they suggest the following for http.conf, and I'm not sure
how to go about creating the equivalent environment with Twisted:

----
create a file sql-ledger-httpd.conf in the same location
where your httpd.conf is and copy the next section into the file

  Alias /sql-ledger/ /usr/local/sql-ledger/
  <Directory /usr/local/sql-ledger>
    AddHandler cgi-script .pl
    Options ExecCGI Includes FollowSymlinks
  </Directory>

  <Directory /usr/local/sql-ledger/users>
    Order Deny,Allow
    Deny from All
  </Directory>

edit httpd.conf and add

  # SQL-Ledger
  Include <ServerRoot>/sql-ledger-httpd.conf

Note: Replace <ServerRoot> with the server's root directory!

restart your web server.
----

I think the need for FollowSymlinks is what's causing me problems when
I try to create a .rpy file that allows Perl CGIs.  I've tried several
variations of the .rpy file from the Twisted documentation, but can't
get one that works.  Here is where I gave up:

----
from twisted.web import static, twcgi

class PerlScript(twcgi.FilteredScript):
    filter = '/usr/bin/perl' # Points to the perl parser

resource = static.File("/sql-ledger") # Points to the perl website
resource.processors = {".pl": PerlScript} # Files that end with .pl will be
                                          # processed by PerlScript
resource.indexNames = ['admin.pl']
----

I think one of the problems (besides the fact that I don't know
Twisted well enough) is that the admin.pl script is actually a symlink
to login.pl.  Would that be a problem?  I also don't understand what I
should be pointing to as a parameter to static.File().

Any help would be greatly appreciated.  The SQL-Ledger installation
instructions are here, in case that helps:

http://www.sql-ledger.org/cgi-bin/nav.pl?page=source/readme.txt&title=README

Thanks,

Pat

-- 
Patrick K. O'Brien
Orbtech      http://www.orbtech.com/web/pobrien
-----------------------------------------------
"Your source for Python programming expertise."
-----------------------------------------------




From pobrien at orbtech.com  Mon May 19 15:24:48 2003
From: pobrien at orbtech.com (Patrick K. O'Brien)
Date: 19 May 2003 16:24:48 -0500
Subject: [Twisted-Python] Twisted and SQL-Ledger
In-Reply-To: <1053377246.5002.342.camel@oneiros>
References: <m2he7qwuwm.fsf@orbtech.com> <1053377246.5002.342.camel@oneiros>
Message-ID: <m2r86uvdcv.fsf@orbtech.com>

Dave Peticolas <dave at krondo.com> writes:

> On Mon, 2003-05-19 at 13:20, Patrick K. O'Brien wrote:
> > I'm going to be creating a Twisted Woven/Enterprise interface for
> > SQL-Ledger, an Open Source accounting package that uses PostgreSQL and
> > a Perl web interface.  Is anyone else interested in such a thing?
> > 
> > SQL-Ledger: http://www.sql-ledger.org/
> 
> Absolutely, this would be excellent. Let me know if I can help out.

Do it for me so I don't have to.  ;-)

On a more serious note, do you use SQL-Ledger?  Done much with Woven?
Can you help me figure out how to get Twisted Web to serve up the
SQL-Ledger Perl scripts as a starting point for converting things?
I'm trying to avoid having to install Apache.

-- 
Patrick K. O'Brien
Orbtech      http://www.orbtech.com/web/pobrien
-----------------------------------------------
"Your source for Python programming expertise."
-----------------------------------------------




From twisted at eholm.com  Mon May 19 15:27:19 2003
From: twisted at eholm.com (Eric Holm)
Date: Mon, 19 May 2003 14:27:19 -0700
Subject: [Twisted-Python] Woven and non-breaking spaces
Message-ID: <ubrxyzky0.fsf@eholm.com>

Is there any way to dynamically insert a non-breaking space 
on a Woven page?  It looks to me like microdom blindly 
replaces "&" with "&amp", and I couldn't find a way to 
escape the "&" in "&nbsp;", but I could (easily) have 
missed it.  Here's an example of what I'm trying to do:

from twisted.web.woven import page

theModel = { "someData": "Before &nbsp;&nbsp;&nbsp; After" }
theHtml = '<html><span model="someData" view="Text">placeholder</span></html>'

resource = page.Page( theModel, template=theHtml )


I'm using 1.0.5, Python 2.2, on Win2K.

Thanks,


Eric.




From dp at twistedmatrix.com  Mon May 19 16:22:46 2003
From: dp at twistedmatrix.com (Donovan Preston)
Date: Mon, 19 May 2003 15:22:46 -0700
Subject: [Twisted-Python] Woven and non-breaking spaces
In-Reply-To: <ubrxyzky0.fsf@eholm.com>
Message-ID: <6AD546BC-8A48-11D7-BF67-00039376B1AE@twistedmatrix.com>

On Monday, May 19, 2003, at 02:27 PM, Eric Holm wrote:

> Is there any way to dynamically insert a non-breaking space
> on a Woven page?  It looks to me like microdom blindly
> replaces "&" with "&amp", and I couldn't find a way to
> escape the "&" in "&nbsp;", but I could (easily) have
> missed it.  Here's an example of what I'm trying to do:
>
> from twisted.web.woven import page
>
> theModel = { "someData": "Before &nbsp;&nbsp;&nbsp; After" }
> theHtml = '<html><span model="someData" 
> view="Text">placeholder</span></html>'

Try view="RawText" instead of "Text"...

>
> resource = page.Page( theModel, template=theHtml )
>
>
> I'm using 1.0.5, Python 2.2, on Win2K.
>
> Thanks,
>
>
> Eric.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From dave at krondo.com  Mon May 19 17:03:38 2003
From: dave at krondo.com (Dave Peticolas)
Date: 19 May 2003 16:03:38 -0700
Subject: [Twisted-Python] Twisted and SQL-Ledger
In-Reply-To: <m2r86uvdcv.fsf@orbtech.com>
References: <m2he7qwuwm.fsf@orbtech.com> <1053377246.5002.342.camel@oneiros>
	 <m2r86uvdcv.fsf@orbtech.com>
Message-ID: <1053385418.5002.385.camel@oneiros>

On Mon, 2003-05-19 at 14:24, Patrick K. O'Brien wrote:
> On a more serious note, do you use SQL-Ledger?  Done much with Woven?
> Can you help me figure out how to get Twisted Web to serve up the
> SQL-Ledger Perl scripts as a starting point for converting things?
> I'm trying to avoid having to install Apache.

I've only played with SQL-Ledger, and I don't know Woven, but I need
to learn it. I have done quite a bit with twisted.enterprise.

If I get some time, I'll give the rpy you posted a spin and see if I
can get it working.

dave

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20030519/ceb5d62c/attachment.sig>

From twisted at eholm.com  Mon May 19 19:02:08 2003
From: twisted at eholm.com (Eric Holm)
Date: 19 May 2003 18:02:08 -0700
Subject: [Twisted-Python] Woven and non-breaking spaces
In-Reply-To: <6AD546BC-8A48-11D7-BF67-00039376B1AE@twistedmatrix.com>
References: <6AD546BC-8A48-11D7-BF67-00039376B1AE@twistedmatrix.com>
Message-ID: <uhe7q77n3.fsf@eholm.com>

>> theModel = { "someData": "Before &nbsp;&nbsp;&nbsp; After" }
>> theHtml = '<html><span model="someData"
>> view="Text">placeholder</span></html>'
> 
> Try view="RawText" instead of "Text"...
> 
That works great for the example I gave, but...
looks like I over-simplified my example - sorry 
'bout that.  What I'm *really* after is a way 
to pass &nbsp; through any widget, or at least 
through a link widget.  Something like &&nbsp; 
or \&nbsp; or somesuch.

I'm generating a table containing text and links, 
and the table looks crappy (border/padding-wise) 
if there are empty cells.  If I could pass 
&nbsp; through the model, the table would look 
okay.

Thanks,


Eric.




From stuart.hungerford at anu.edu.au  Tue May 20 00:07:43 2003
From: stuart.hungerford at anu.edu.au (Stuart Hungerford)
Date: Tue, 20 May 2003 16:07:43 +1000
Subject: [Twisted-Python] Need advice on changing blocking calls to be Twisted-aware...
Message-ID: <5.2.0.9.0.20030520155728.00b840a0@anusf.anu.edu.au>

Hi all,

I'm running a web application which makes use of the excellent
Twisted.Web resource framework with customized .getChild() and
.render() calls.

In one of the resource .render() methods I've reached a point
where the method needs some information on from the system via
an os.popen2() call. This information is needed to be turned
into HTML, and the HTML generation can't proceed without it.

What I'm effectively doing in the render() call is:

         def render(...)
             ...generate some HTML
             do blocking system call
             ...generate some more HTML

Which I understand is a no-no in the reactor and callback
based Twisted framework. I believe that the Twisted way to do
this is with a reactor.spawnProcess() call which in turn
returns a Deferred object.  Or maybe I should be using
threads instead?

Can someone point me to some example code where a
blocking-system-call-and-it's-results-needed-here pattern
is expressed in the spawnProcess/Deferred/callback world
of Twisted?



Cheers,

Stu

--
:: Stuart Hungerford (stuart.hungerford at anu.edu.au)
:: ANU Internet Futures Group




From andrew-twisted at puzzling.org  Tue May 20 00:26:49 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 20 May 2003 16:26:49 +1000
Subject: [Twisted-Python] Need advice on changing blocking calls to be Twisted-aware...
In-Reply-To: <5.2.0.9.0.20030520155728.00b840a0@anusf.anu.edu.au>
References: <5.2.0.9.0.20030520155728.00b840a0@anusf.anu.edu.au>
Message-ID: <20030520062649.GC32722@frobozz>

On Tue, May 20, 2003 at 04:07:43PM +1000, Stuart Hungerford wrote:
> 
> What I'm effectively doing in the render() call is:
> 
>         def render(...)
>             ...generate some HTML
>             do blocking system call
>             ...generate some more HTML
> 
> Which I understand is a no-no in the reactor and callback
> based Twisted framework. I believe that the Twisted way to do

Correct.

> this is with a reactor.spawnProcess() call which in turn
> returns a Deferred object.  Or maybe I should be using
> threads instead?

Threads are unnecessary here.

> Can someone point me to some example code where a
> blocking-system-call-and-it's-results-needed-here pattern
> is expressed in the spawnProcess/Deferred/callback world
> of Twisted?

Use twisted.internet.utils.getProcessOutput, which returns a Deferred.
Your code should something like:

    def render(...):
        request.write('some html')
        d = getProcessOutput('random program')
        d.addCallback(self.renderProcessOutput, request)
        d.addErrback(self.renderError, request)
        d.addCallback(self.finishPage, request)
        return NOT_DONE_YET

    def renderProcessOutput(self, output, request):
        request.write(output)

    def renderError(self, failure, request):
        request.write('it broke!')
    
    def finishPage(self, _, request):
        request.write('</html>')
        request.finish()

This is obviously very rough, but hopefully it gives you the right idea.

-Andrew.




From m at moshez.org  Tue May 20 00:56:45 2003
From: m at moshez.org (Moshe Zadka)
Date: 20 May 2003 06:56:45 -0000
Subject: [Twisted-Python] Need advice on changing blocking calls to be Twisted-aware...
In-Reply-To: <5.2.0.9.0.20030520155728.00b840a0@anusf.anu.edu.au>
References: <5.2.0.9.0.20030520155728.00b840a0@anusf.anu.edu.au>
Message-ID: <20030520065645.20602.qmail@green.zadka.com>

On Tue, 20 May 2003, Stuart Hungerford <stuart.hungerford at anu.edu.au> wrote:

> Can someone point me to some example code where a
> blocking-system-call-and-it's-results-needed-here pattern
> is expressed in the spawnProcess/Deferred/callback world
> of Twisted?

I've just checked in to CVS doc/examples/fortune.rpy.py, which runs
fortune and gives the output of it.

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From Matthew at walkerwireless.co.nz  Mon May 19 19:32:51 2003
From: Matthew at walkerwireless.co.nz (matiu)
Date: Tue, 20 May 2003 13:32:51 +1200
Subject: [Twisted-Python] Dumb Question (Please don't eat me)
References: <6AD546BC-8A48-11D7-BF67-00039376B1AE@twistedmatrix.com> <uhe7q77n3.fsf@eholm.com>
Message-ID: <014301c31e6f$baf46d90$0201a8c0@JONAH>

Hi,

Why does one have to relinquish copyright when submitting patches?

What's to stop the project leader re-releasing under a closed lisence, or
selling that right to a company behind the scenes?

Regards
Matthew Sherborne




From fog at initd.org  Tue May 20 03:37:37 2003
From: fog at initd.org (Federico Di Gregorio)
Date: 20 May 2003 11:37:37 +0200
Subject: [Twisted-Python] Dumb Question (Please don't eat me)
In-Reply-To: <014301c31e6f$baf46d90$0201a8c0@JONAH>
References: <6AD546BC-8A48-11D7-BF67-00039376B1AE@twistedmatrix.com>
	 <uhe7q77n3.fsf@eholm.com>  <014301c31e6f$baf46d90$0201a8c0@JONAH>
Message-ID: <1053423457.1021.10.camel@momo.initd.org>

Il mar, 2003-05-20 alle 03:32, matiu ha scritto:
> Hi,
> 
> Why does one have to relinquish copyright when submitting patches?
> 
> What's to stop the project leader re-releasing under a closed lisence, or
> selling that right to a company behind the scenes?

because haveing 200 copyright holders makes things unmaintenable.
releasing the copyrigh on small patches is the usual behaviour. and if
the project leader re-release under a closed license, too bad, we still
have the sources under the old LGPL.

usually you get your copyright in a free project only if you contribute
a large chunk of the code. 

-- 
Federico Di Gregorio
Debian GNU/Linux Developer                                fog at debian.org
INIT.D Developer                                           fog at initd.org
                   Datemi uno spigolo. Che lo arrotondo tutto. -- <dani>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: Questa parte del messaggio è firmata
URL: </pipermail/twisted-python/attachments/20030520/fdec8a25/attachment.sig>

From glyph at twistedmatrix.com  Tue May 20 04:07:22 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 20 May 2003 05:07:22 -0500
Subject: [Twisted-Python] Dumb Question (Please don't eat me)
In-Reply-To: <014301c31e6f$baf46d90$0201a8c0@JONAH>
Message-ID: <D93259CB-8AAA-11D7-A5D5-000393C9700E@twistedmatrix.com>

On Monday, May 19, 2003, at 08:32 PM, matiu wrote:

> Why does one have to relinquish copyright when submitting patches?

Because I'm an evil bastard.

> What's to stop the project leader re-releasing under a closed lisence, 
> or selling that right to a company behind the scenes?

Nothing - and in fact, I have done this and will continue to do it in 
the future.

However, there is really nothing for you to worry about here.  As 
frederico said, "if the project leader re-release under a closed 
license, too bad, we still have the sources under the old LGPL."

This should really be a FAQ, but I can't find a good explanation of 
this online wit a few minutes work, so I'll just re-explain.

I often work in the games industry, which is a sufficiently strange 
place to most of us free-software types that you would probably think 
it looks like an alien planet.  At the time I started writing Twisted, 
I was disappointed with the paucity of available frameworks to do 
certain things that I wanted to do in the professional environment I 
was working in - massively multiplayer games.  Creating a GPL framework 
was therefore out of the question, because those are rejected 
out-of-hand by the corporate flunkies who control the money in most 
places commercial software (and especially games) get produced.  I 
seriously wanted to get my boss to use the results of my spare-time 
work, once I demonstrated that my approach was viable.  (I _still_ want 
to sell the framework to that boss, actually, and he works somewhere 
similar now.)

At this point in the narrative, someone will predictably say, "Why 
didn't you just make it BSD/Python/MIT/X11 licensed, you commie 
RMS-worshipping tree-hugging commie!"  Things are, as usual, a bit more 
complicated than that.  Making the software licensed that permissively 
would just be like tossing my time into a black hole: people might use 
it, they might not use it, and I would never know, because that variety 
of licensing requires no understanding of the process that produces the 
software.

I didn't want to place any serious restrictions on the use of this 
software, BUT, I wanted to make sure that anyone using it understood 
the mores and culture of the community that created it before they 
could use it in an environment potentially hostile to that community.  
I wanted to foster communication and understanding.  (I think that this 
has actually worked, in some small measure, in the places I have been 
able to introduce Twisted.)

So, anyone with a clear understanding of the open source community and 
the technology at hand should be able to figure out that LGPL licensing 
is merely a ruse - Python's extremely flexible nature makes LGPL 
essentially the same as BSD-licensed software.  Thankfully, interests 
with a less clear understanding of the community, like game development 
companies, are afraid of the letters "GPL".  They raise a specter of 
fear, uncertainty, and doubt.  This fear can be used as a foothold to 
understanding and better mutual cooperation as it is allayed and 
explained, however.

Still, asking a large company to try to understand how to work with a 
distributed, informal community is a bit too much.  So the solution 
that is proposed is this - I am Twisted's ambassador to this audience.  
I don't pretend to understand the psychology of executives terribly 
well, but I do know that they prefer to deal with individuals who have 
some sort of decision-making power.  By requiring copyright assignment, 
I have the power to make the decision to give them a slightly less 
restrictive licensing agreement than what the general public gets.

There is almost no money in this, but it does afford me an important 
opportunity: I get to sit down in a room (usually, figuratively 
speaking) with the executive that is making the decision, and explain 
to them how the community works, what they can do about support and 
maintenance, and who they can contract with in order to make sure that 
it doesn't go away.

There are other benefits - with my name plastered all over the 
codebase, and no stated path back to the original authors, any 
liability claims would have to be leveled against me directly, and not 
against the community at large.  By no means would I welcome sitting in 
a courtroom for months on end, explaining over and over again to a 
judge what "no warranty" means using very long words, but it's better 
that one person be forced to endure that than 50.  (Plus, if a company 
knows that all they can go after are my savings, they're less likely to 
do that than if Twisted were owned by a large corporation or a large 
group of people that could be sued collectively.)

Also, if for some resaon we have to change the license (let's say that 
a court ruling shows the LGPL to be unenforceable or illegal for some 
reason, for example) we don't have to consult 200 people.




From stuart.hungerford at anu.edu.au  Tue May 20 19:18:36 2003
From: stuart.hungerford at anu.edu.au (Stuart Hungerford)
Date: Wed, 21 May 2003 11:18:36 +1000
Subject: [Twisted-Python] Re: Need advice on changing blocking calls to be Twisted-aware...
In-Reply-To: <20030520093701.28739.61022.Mailman@pyramid.twistedmatrix.com>
References: <20030520093701.28739.61022.Mailman@pyramid.twistedmatrix.com>
Message-ID: <20030521011836.GB32653@anu.edu.au>

I wrote:

| Can someone point me to some example code where a
| blocking-system-call-and-it's-results-needed-here pattern
| is expressed in the spawnProcess/Deferred/callback world
| of Twisted?
| 

Very helpful replies:

| 
| Use twisted.internet.utils.getProcessOutput, which returns a Deferred.
| Your code should something like:

   Many thanks Andrew and Moshe for the advice here, much 
   appreciated.  Flushed with success I started to think about
   .render()'ing web pages with not just one blocking system call
   but a number of them.

   Can I register multiple callbacks in the deferred model with
   one per system call?  Or alternatively, can callbacks re-register
   themselves and handle the system calls in a 'chain'?

   
Cheers,

Stu




From andrew-twisted at puzzling.org  Tue May 20 19:37:08 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 21 May 2003 11:37:08 +1000
Subject: [Twisted-Python] Re: Need advice on changing blocking calls to be Twisted-aware...
In-Reply-To: <20030521011836.GB32653@anu.edu.au>
References: <20030520093701.28739.61022.Mailman@pyramid.twistedmatrix.com> <20030521011836.GB32653@anu.edu.au>
Message-ID: <20030521013708.GA3057@frobozz>

On Wed, May 21, 2003 at 11:18:36AM +1000, Stuart Hungerford wrote:
> 
>    Many thanks Andrew and Moshe for the advice here, much 
>    appreciated.  Flushed with success I started to think about
>    .render()'ing web pages with not just one blocking system call
>    but a number of them.
> 
>    Can I register multiple callbacks in the deferred model with
>    one per system call?  Or alternatively, can callbacks re-register
>    themselves and handle the system calls in a 'chain'?

I think you probably should read the Deferred howto; it should answer all
these questions (and more!):
    
    http://twistedmatrix.com/documents/howto/defer

Let us know if you still have some questions that that doesn't answer.

-Andrew.




From twisted at eholm.com  Tue May 20 20:06:37 2003
From: twisted at eholm.com (Eric Holm)
Date: 20 May 2003 19:06:37 -0700
Subject: [Twisted-Python] Woven and non-breaking spaces
In-Reply-To: <uhe7q77n3.fsf@eholm.com>
References: <6AD546BC-8A48-11D7-BF67-00039376B1AE@twistedmatrix.com>
	<uhe7q77n3.fsf@eholm.com>
Message-ID: <uiss5kq8i.fsf@eholm.com>

> >> theModel = { "someData": "Before &nbsp;&nbsp;&nbsp; After" }
> >> theHtml = '<html><span model="someData"
> >> view="Text">placeholder</span></html>'
> > 
> > Try view="RawText" instead of "Text"...
> > 
> That works great for the example I gave, but...
>
Never mind.  This provided an excellent excuse to 
noodle around with widgets, and I ended-up writing 
a couple of simple widgets to do my bidding.

Thanks,


Eric.




From dp at twistedmatrix.com  Tue May 20 20:23:15 2003
From: dp at twistedmatrix.com (Donovan Preston)
Date: Tue, 20 May 2003 19:23:15 -0700
Subject: [Twisted-Python] Woven and non-breaking spaces
In-Reply-To: <uiss5kq8i.fsf@eholm.com>
Message-ID: <2DC156D0-8B33-11D7-97CB-00039376B1AE@twistedmatrix.com>

On Tuesday, May 20, 2003, at 07:06 PM, Eric Holm wrote:

> Never mind.  This provided an excellent excuse to
> noodle around with widgets, and I ended-up writing
> a couple of simple widgets to do my bidding.

That's usually what I end up doing. That is the whole point of woven 
really -- make it really easy for python code to manipulate the 
template, rather than having a bunch of pre-built things you can embed 
in your HTML without writing any Python.

Donovan




From tim_nagels at hotmail.com  Wed May 21 03:35:29 2003
From: tim_nagels at hotmail.com (Tim Nagels)
Date: Wed, 21 May 2003 11:35:29 +0200
Subject: [Twisted-Python] deleting server with coil
Message-ID: <BAY1-F27aBuv9ogry6M0002bd68@hotmail.com>

I'm having some trouble unListening when I use coil

it seems when you start a server using the coilwebinterface,
it starts using listentcp in the same app that is already running..
this makes that bindPorts is not called,
so when you unlisten the userdict doesnt contain the needed port...

I could always add it manually...but that seems a bit stupid..
shouldn't listenTcp automatically add itself to self._listenerDict? what is 
done with bindPorts...

(btw calling bindPorts after you've run app.run() clears self._listenerDict)

-------
Aso

_________________________________________________________________
MSN Search, for relevant search results! http://search.msn.be




From miathan at goliath.darktech.org  Wed May 21 06:22:18 2003
From: miathan at goliath.darktech.org (W.J.)
Date: Wed, 21 May 2003 14:22:18 +0200 (CEST)
Subject: [Twisted-Python] deleting server with coil
In-Reply-To: <20030521113722.32125.54768.Mailman@pyramid.twistedmatrix.com>
Message-ID: <Pine.LNX.4.44.0305211417040.22307-100000@zolder>

> it seems when you start a server using the coilwebinterface,
> it starts using listentcp in the same app that is already running..
> this makes that bindPorts is not called,
> so when you unlisten the userdict doesnt contain the needed port...

I know - A while ago I posted a patch on this list that fixes that problem
in twisted.internet.app, among others.

http://www.twistedmatrix.com/pipermail/twisted-python/2003-May/003945.html

But I never even got a reply to it.

> (btw calling bindPorts after you've run app.run() clears self._listenerDict)

No, that's not the way, bindPorts should only be called once.

Wladimir





From itamar at itamarst.org  Wed May 21 07:43:57 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 21 May 2003 09:43:57 -0400
Subject: [Twisted-Python] deleting server with coil
In-Reply-To: <BAY1-F27aBuv9ogry6M0002bd68@hotmail.com>
References: <BAY1-F27aBuv9ogry6M0002bd68@hotmail.com>
Message-ID: <20030521094357.3e2e85bd.itamar@itamarst.org>

On Wed, 21 May 2003 11:35:29 +0200
"Tim Nagels" <tim_nagels at hotmail.com> wrote:

> I'm having some trouble unListening when I use coil

Coil is not being maintained at the moment, pending a total rewrite.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From itamar at itamarst.org  Wed May 21 07:48:43 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 21 May 2003 09:48:43 -0400
Subject: [Twisted-Python] Suggestion - remove bin/coil in 1.0.6
Message-ID: <20030521094843.7a919775.itamar@itamarst.org>

Anyone disagree?

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From m at moshez.org  Wed May 21 08:10:43 2003
From: m at moshez.org (Moshe Zadka)
Date: 21 May 2003 14:10:43 -0000
Subject: [Twisted-Python] Suggestion - remove bin/coil in 1.0.6
In-Reply-To: <20030521094843.7a919775.itamar@itamarst.org>
References: <20030521094843.7a919775.itamar@itamarst.org>
Message-ID: <20030521141043.24312.qmail@green.zadka.com>

On Wed, 21 May 2003, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:

> Anyone disagree?

I'm for it. But please document it in the ChangeLog.

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From wari at home.wari.org  Wed May 21 09:06:13 2003
From: wari at home.wari.org (Wari Wahab)
Date: Wed, 21 May 2003 23:06:13 +0800
Subject: [Twisted-Python] Authenticated SSL
Message-ID: <3ECB95E5.8040700@home.wari.org>

Hi there, following the echoserver-ssl.py example, I was able to get up 
to speed and basically running my xmlrpc server on SSL. As usual, 
twisted makes it easy. Now my problem becomes this: I need to verify 
that the certificate on the other side (The client) is signed by me (or 
a known CA). How would one go about such task?




From itamar at itamarst.org  Wed May 21 09:25:10 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 21 May 2003 11:25:10 -0400
Subject: [Twisted-Python] Authenticated SSL
In-Reply-To: <3ECB95E5.8040700@home.wari.org>
References: <3ECB95E5.8040700@home.wari.org>
Message-ID: <20030521112510.221e4963.itamar@itamarst.org>

On Wed, 21 May 2003 23:06:13 +0800
Wari Wahab <wari at home.wari.org> wrote:

> Hi there, following the echoserver-ssl.py example, I was able to get
> up to speed and basically running my xmlrpc server on SSL. As usual, 
> twisted makes it easy. Now my problem becomes this: I need to verify 
> that the certificate on the other side (The client) is signed by me
> (or a known CA). How would one go about such task?

1. Read pyOpenSSL documentation. (http://pyopenssl.sf.net)

2. Implement a context factory that does the appropriate setup, based on
docs in (1). (twisted.internet.ssl has some sample context factories).

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From wari at home.wari.org  Wed May 21 09:44:25 2003
From: wari at home.wari.org (Wari Wahab)
Date: Wed, 21 May 2003 23:44:25 +0800
Subject: [Twisted-Python] Authenticated SSL
In-Reply-To: <20030521112510.221e4963.itamar@itamarst.org>
References: <3ECB95E5.8040700@home.wari.org> <20030521112510.221e4963.itamar@itamarst.org>
Message-ID: <3ECB9ED9.90702@home.wari.org>

Itamar Shtull-Trauring wrote:

>1. Read pyOpenSSL documentation. (http://pyopenssl.sf.net)
>2. Implement a context factory that does the appropriate setup, based on
>docs in (1). (twisted.internet.ssl has some sample context factories).
>
Thanks for the heads up, I'll look these up and see if I can get 
anything useful from it.

Am I right to say that if I do not get the cert CA signer to be what I 
wanted, I'd raise an exception instead of returning self._context in 
getContext()?.




From itamar at itamarst.org  Wed May 21 10:09:01 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 21 May 2003 12:09:01 -0400
Subject: [Twisted-Python] Authenticated SSL
In-Reply-To: <3ECB9ED9.90702@home.wari.org>
References: <3ECB95E5.8040700@home.wari.org>
	<20030521112510.221e4963.itamar@itamarst.org>
	<3ECB9ED9.90702@home.wari.org>
Message-ID: <20030521120901.00f895f2.itamar@itamarst.org>

On Wed, 21 May 2003 23:44:25 +0800
Wari Wahab <wari at home.wari.org> wrote:

> Am I right to say that if I do not get the cert CA signer to be what I
> 
> wanted, I'd raise an exception instead of returning self._context in 
> getContext()?.

Hmmm. That's a good point, not sure what'd happen. Probably close the
connection, which is what you want I guess, and pass the exception you
raise to the appropriate callbacks as the failure, so I guess that'd do
the trick. I think Clark Evens posted some relevant code a while back.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From lordvan at lordvan.com  Wed May 21 07:28:23 2003
From: lordvan at lordvan.com (Thomas Raschbacher)
Date: Wed, 21 May 2003 15:28:23 +0200
Subject: [Twisted-Python] Re: Twisted.Web and Perl CGIs
References: <m2addiwstm.fsf@orbtech.com>
Message-ID: <pan.2003.05.21.13.28.22.746009@lordvan.com>

i think u want --ignore-ext right? ;)
On Mon, 19 May 2003 16:05:25 -0500, Patrick K. O'Brien wrote:

> I'm having trouble getting a Twisted.Web configured properly to work
> with some Perl CGI scripts.  The Perl scripts are part of SQL-Ledger,
> and their instructions are for Apache, but I'm hoping to using Twisted
> instead of Apache.
> 
> To begin, they suggest the following for http.conf, and I'm not sure
> how to go about creating the equivalent environment with Twisted:
> 
> ----
> create a file sql-ledger-httpd.conf in the same location
> where your httpd.conf is and copy the next section into the file
> 
>   Alias /sql-ledger/ /usr/local/sql-ledger/
>   <Directory /usr/local/sql-ledger>
>     AddHandler cgi-script .pl
>     Options ExecCGI Includes FollowSymlinks
>   </Directory>
> 
>   <Directory /usr/local/sql-ledger/users>
>     Order Deny,Allow
>     Deny from All
>   </Directory>
> 
> edit httpd.conf and add
> 
>   # SQL-Ledger
>   Include <ServerRoot>/sql-ledger-httpd.conf
> 
> Note: Replace <ServerRoot> with the server's root directory!
> 
> restart your web server.
> ----
> 
> I think the need for FollowSymlinks is what's causing me problems when
> I try to create a .rpy file that allows Perl CGIs.  I've tried several
> variations of the .rpy file from the Twisted documentation, but can't
> get one that works.  Here is where I gave up:
> 
> ----
> from twisted.web import static, twcgi
> 
> class PerlScript(twcgi.FilteredScript):
>     filter = '/usr/bin/perl' # Points to the perl parser
> 
> resource = static.File("/sql-ledger") # Points to the perl website
> resource.processors = {".pl": PerlScript} # Files that end with .pl will be
>                                           # processed by PerlScript
> resource.indexNames = ['admin.pl']
> ----
> 
> I think one of the problems (besides the fact that I don't know
> Twisted well enough) is that the admin.pl script is actually a symlink
> to login.pl.  Would that be a problem?  I also don't understand what I
> should be pointing to as a parameter to static.File().
> 
> Any help would be greatly appreciated.  The SQL-Ledger installation
> instructions are here, in case that helps:
> 
> http://www.sql-ledger.org/cgi-bin/nav.pl?page=source/readme.txt&title=README
> 
> Thanks,
> 
> Pat





From twisted at eholm.com  Wed May 21 19:53:23 2003
From: twisted at eholm.com (Eric Holm)
Date: Wed, 21 May 2003 20:53:23 -0500 (CDT)
Subject: [Twisted-Python] LivePage Hello World
Message-ID: <200305220153.h4M1rNPC009924@mta4.rcsntx.swbell.net>

I'm trying to get a simple LivePage script going, 
and no luck so far.  I started with the example on 
howto/livepage.html, and added enough bits to get 
it to run (the only surprise was that Foo.setUp() 
needs a 3rd, unused argument), and I've attached 
it at the end of this mail.

When I view the source in the browser, there's 
a bunch of Flash stuff at the bottom (so *that's*
how "Javascript opens Socket to server" works...), 
but when fooHappened() runs, I get a

CACHING [<twisted.web.woven.utils.Script instance at 0x00F3F300>]

message.  The corresponding comment in utils.py 
talks about a conduit not being connected yet, 
but I've no idea how to initiate a connection. 
Anybody have any idea what I'm missing?

I'm using 1.0.5, python 2.2, Win2k.

Thanks,


Eric.


live.rpy:
from twisted.web.woven import page, interfaces
from twisted.internet import reactor

class Foo( page.LivePage ):
    template = ('<html><body>'
                'Nothing here!<span view="webConduitGlue" />'
                '</body></html>')
    def setUp(self, request, document):
        currentPage = request.getSession(interfaces.IWovenLivePage)
        print "setUp: ", currentPage
        reactor.callLater( 5, fooHappened, currentPage )

def fooHappened( currentPage ):
    print "Foo!", currentPage
    currentPage.sendScript("alert('hello, world!')")

resource = Foo()





From dp at twistedmatrix.com  Wed May 21 20:50:51 2003
From: dp at twistedmatrix.com (Donovan Preston)
Date: Wed, 21 May 2003 19:50:51 -0700
Subject: [Twisted-Python] LivePage Hello World
In-Reply-To: <200305220153.h4M1rNPC009924@mta4.rcsntx.swbell.net>
Message-ID: <333F9DDC-8C00-11D7-9E76-00039376B1AE@twistedmatrix.com>

On Wednesday, May 21, 2003, at 06:53 PM, Eric Holm wrote:

> I'm trying to get a simple LivePage script going,
> and no luck so far.

Cool! LivePage is not really ready for human consumption yet, but it's 
*really* *really* close.

>   I started with the example on
> howto/livepage.html, and added enough bits to get
> it to run (the only surprise was that Foo.setUp()
> needs a 3rd, unused argument), and I've attached
> it at the end of this mail.
>
> When I view the source in the browser, there's
> a bunch of Flash stuff at the bottom (so *that's*
> how "Javascript opens Socket to server" works...),

LivePage is really two different things: The InputConduit and the 
OutputConduit.

The InputConduit is responsible for shuttling events from the client 
(web browser) to the server (Twisted). The InputConduit is just a 
simple IFrame and some associated javascript which translates from 
JavaScript events placed on a Widget using addEventHandler to a HTTP 
GET request (in the IFrame) with the relevant pieces of information:

1) The name of the client side event ('onclick', 'onchange')
2) The id of the target node ('woven_id_12341234', 'myId')
3) The arguments to pass to the event handler (Usually none.)

When I originally wrote the server-side component that listens for 
events from the InputConduit, I wrote it asynchronously; the HTTP 
Request would generate an HTTP Response immediately (with no 
interesting information in it) and the server-side event handler would 
be fired one reactor iteration later. Which brings me to...

The OutputConduit is responsible for shuttling events from the Server 
(Twisted) to the Client (web browser). When a Web Browser has visited a 
LivePage and created a tree of MVC objects and a DOM tree, LivePage 
stores the root of this (the LivePage instance itself) on the 
server-side session object. Then, at any time, a server-side event may 
cause a Widget to re-render itself and send the updated HTML fragment 
to the browser. The OutputConduit then uses some simple javascript in 
the browser to replace the old node (which it locates by id) with the 
new, updated HTML string.

The OutputConduit is interesting if you have applications where 
server-side events are generated without the user actually interacting 
with the web browser. For example, in the NewReality web client, one 
user may log on using a web browser while another player may telnet 
into the game server. The other player, typing commands into a telnet 
window, will generate events which are not directly initiated by the 
player using the web browser. In this situation, the OutputConduit is 
useful because the server may direct the web browser to update the HTML 
the user is seeing without the user actually doing anything, such as 
refreshing the page.

To get to the point, I realized that if you are interested in using 
LivePage to do normal, DHTML style partial-page refreshes in response 
to user events (mouse clicks, dropdown selections, mouseovers) then the 
OutputConduit is not required at all. Since the user initiated an HTTP 
Request by invoking the client side event handler (onclick for example) 
we can piggyback on the HTTP Response any JavaScript commands we want 
to execute in response to that event. We do this by waiting for the 
event handler to fire, gathering all JavaScript commands which were 
sent to the OutputConduit while we were waiting into a list, and 
rendering them out in a single <script> tag in the HTTP response to the 
event.

This is ultimately where LivePage is going; it will allow LivePage 
penetration into browsers that will not be able to open a persistent 
socket to the server.

But all that has nothing to do with your problem.

> but when fooHappened() runs, I get a
>
> CACHING [<twisted.web.woven.utils.Script instance at 0x00F3F300>]
>
> message.  The corresponding comment in utils.py
> talks about a conduit not being connected yet,
> but I've no idea how to initiate a connection.
> Anybody have any idea what I'm missing?

The example you pasted was an example of what the OutputConduit is 
supposed to let you do. The OutputConduit is implemented using a Flash 
movie that opens a raw socket to the Twisted server (on IE Win; on 
Mozilla the implementation will probably be different; on other 
browsers it will probably use a polling technique to periodically check 
for new content)

The Flash movie needs to talk to the server using a special (extra 
silly) protocol. The magic incantation to get your Twisted server to 
listen on this port and talk this protocol is this:

mktap web --path=/foo/bar --flashconduit=4321

Patches against the documentation in CVS would be gratefully accepted. 
If you'd like to talk more about LivePage and where it's going, you can 
find me on irc pretty regularly as fzZzy.

If enough people keep bugging me about it, I will write another example 
which only uses the InputConduit, which is a technique that has proven 
to be far more reliable and cross-browser in the past month. All of 
this stuff is going to mature really soon, really fast :-)

Donovan




From cliechti at gmx.net  Wed May 21 21:10:27 2003
From: cliechti at gmx.net (Chris Liechti)
Date: Thu, 22 May 2003 05:10:27 +0200
Subject: [Twisted-Python] non blocking wxPython
Message-ID: <3ECC3FA3.10805@gmx.net>

this is an example with wxPython + Twisted.
it does not suffer from the problem of blocked Twisted when wx menus or 
dialogs are open because Twisted is run in a separate thread.

on shutdown, twisted should be stopped first and then the GUI, in case
some twisted callbacks use GUI components (which is the purpose of most 
GUIs, isn't it ;-) thread.join() can be used in wx event handler as it 
produces a deadlock in case a callback is ran that accesses the GUI, 
thus a loop with wxYield() is used.

running Twisted in a separate thread may break some functions, altough i 
had no problems here. an other drawback is that it uses the (evil ;-) 
threads so you get all the problems of threads too, in some cases a 
callFromThread may be required (for wx->twisted calls).

i tested the example on win32, hope it runs as flawlessly on linux too.

chris
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: wxnoblock_thread.py
URL: </pipermail/twisted-python/attachments/20030522/f904450c/attachment.ksh>

From twisted at eholm.com  Wed May 21 22:29:27 2003
From: twisted at eholm.com (Eric Holm)
Date: 21 May 2003 21:29:27 -0700
Subject: [Twisted-Python] LivePage Hello World
In-Reply-To: <333F9DDC-8C00-11D7-9E76-00039376B1AE@twistedmatrix.com>
References: <333F9DDC-8C00-11D7-9E76-00039376B1AE@twistedmatrix.com>
Message-ID: <ullwz4na0.fsf@eholm.com>

>> I'm trying to get a simple LivePage script going,
>> and no luck so far.
> Cool! LivePage is not really ready for human consumption yet, but...
> 
Well, we guinea pigs aren't really human, so that worked out okay.


> The magic incantation to get your Twisted server to
> listen on this port and talk this protocol is this:
> 
> mktap web --path=/foo/bar --flashconduit=4321
> 
That did it, now I'm one dangerous guinea pig!  At 
this rate, I won't have to write a wxPython/pb 
front-end to my server.


> Patches against the documentation in CVS would be gratefully
> accepted.
> 
I'll give it a shot (it's actually pretty close already, if a 
bit sparse).

Thanks,


Eric.




From dp at twistedmatrix.com  Wed May 21 23:44:37 2003
From: dp at twistedmatrix.com (Donovan Preston)
Date: Wed, 21 May 2003 22:44:37 -0700
Subject: [Twisted-Python] LivePage Hello World
In-Reply-To: <ullwz4na0.fsf@eholm.com>
Message-ID: <79A1C0BA-8C18-11D7-9E76-00039376B1AE@twistedmatrix.com>

On Wednesday, May 21, 2003, at 09:29 PM, Eric Holm wrote:

> That did it, now I'm one dangerous guinea pig!  At
> this rate, I won't have to write a wxPython/pb
> front-end to my server.

Just to give you some more hints, the methods you want to look at to 
make your Woven apps magically delicious are:

Widget.addEventHandler('onclick', self.onClick)
# Add a javascript event handler to this widget which, when the event 
occurs
# in the browser, causes the server side method to be called

Model.notify({'request': request})
# Tell all widgets that rely on this model to re-render themselves with 
the
# latest model data and send the resulting HTML string to the browser,
# which will then replace the old HTML with the new, updated HTML.

Widget.modelChanged({'request': request})
# This is what gets called by Model.notify and actually does the
# rerendering. It then passes the HTML string to the controller, which
# sends it out over the OutputConduit.

# You can call this directly if you really want to, but I encourage you
# to try to use MVC notification

Those three are pretty much all you need to create full on DHTML 
applications using pure, server-side Python.

Donovan




From gerritsen at bigskytel.com  Thu May 22 01:12:06 2003
From: gerritsen at bigskytel.com (Jeff Gerritsen)
Date: Thu, 22 May 2003 01:12:06 -0600
Subject: [Twisted-Python] Installing the windows binary with Python 2.3a...
Message-ID: <000701c32031$744940f0$8c00a8c0@JeffLaptopNew>

Greetings,

I'm a newbie to Twisted.  I've downloaded the windows binary, tried to
install under Python 2.3a and receive the error message "Python version 2.2
required, which was not found in the registry."  What is the work around?

 

Thanks,

 

Jeff Gerritsen

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20030522/00588ee2/attachment.html>

From glyph at twistedmatrix.com  Thu May 22 02:16:22 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 22 May 2003 04:16:22 -0400
Subject: [Twisted-Python] Installing the windows binary with Python 2.3a...
In-Reply-To: <000701c32031$744940f0$8c00a8c0@JeffLaptopNew>
Message-ID: <AC27D20A-8C2D-11D7-AC3E-000393C9700E@twistedmatrix.com>

On Thursday, May 22, 2003, at 03:12 AM, Jeff Gerritsen wrote:

> I’m a newbie to Twisted.  I’ve downloaded the windows binary, tried to 
> install under Python 2.3a and receive the error message “Python 
> version 2.2 required, which was not found in the registry.”  What is 
> the work around?

As one might expect, "install python 2.2".

If you want to use it with Python 2.3, you will need to install from 
source rather than the provided win32 executable.  'python setup.py 
bdist_wininst' will create an installer similar to the one we provide, 
assuming you have Visual Studio 6.0 installed.




From wari at home.wari.org  Thu May 22 03:08:04 2003
From: wari at home.wari.org (Wari Wahab)
Date: Thu, 22 May 2003 17:08:04 +0800
Subject: [Twisted-Python] Anomaly found between twisted XML-RPC client and twisted server (Bug?)
Message-ID: <3ECC9374.50500@home.wari.org>

Hi there, I was testing around the XML-RPC support in twisted and found 
the following:
same twisted client and server (one instance) = error.connectionLost
twisted client -> twisted server = error.connectionLost
xmlprclib client -> twisted server = got my results
twisted client -> xmlrpclib client = got my results.

First time round, the twisted xmlrpc client sits together with the 
server in one application, the client calls on a reactor.callLater(). 
This does not work, so I figured I must be doing something wrong. I 
split up the client and the server and I got the same error, split up 
the program network wise, again the same error, on the client, its:
[Failure instance: Traceback: twisted.internet.error.ConnectionLost,]
and on the Server:
2003/05/22 23:30 SGT [HTTPChannel,5,192.168.10.15] Traceback (most 
recent call last):
          File 
"/usr/lib/python2.2/site-packages/twisted/protocols/basic.py", line 173, 
in dataReceived
            self.lineReceived(line)
          File 
"/usr/lib/python2.2/site-packages/twisted/protocols/http.py", line 893, 
in lineReceived
            self.allContentReceived()
          File 
"/usr/lib/python2.2/site-packages/twisted/protocols/http.py", line 932, 
in allContentReceived
            req.requestReceived(command, path, version)
          File 
"/usr/lib/python2.2/site-packages/twisted/protocols/http.py", line 504, 
in requestReceived
            self.process()
        --- <exception caught here> ---
          File "/usr/lib/python2.2/site-packages/twisted/web/server.py", 
line 156, in process
            self.render(resrc)
          File "/usr/lib/python2.2/site-packages/twisted/web/server.py", 
line 162, in render
            body = resrc.render(self)
          File "/usr/lib/python2.2/site-packages/twisted/web/xmlrpc.py", 
line 103, in render
            args, functionPath = xmlrpclib.loads(request.content.read())
          File 
"/var/tmp/python-2.2.2-root/usr/lib/python2.2/xmlrpclib.py", line 805, 
in loads
            p.close()
          File 
"/var/tmp/python-2.2.2-root/usr/lib/python2.2/xmlrpclib.py", line 393, 
in close
            self._parser.Parse("", 1) # end of data
        xml.parsers.expat.ExpatError: no element found: line 1, column 0

Here's what I did in detail:

The server is the exact one found at 
http://twistedmatrix.com/documents/howto/xmlrpc
The client is something like the one I found at the same page as well, 
but this time on an interactive python session.
----------------
Python 2.2.2 (#1, May 19 2003, 14:32:06)
[GCC 2.96 20000731 (Red Hat Linux 7.2 2.96-112.7.2)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
 >>> from twisted.web.xmlrpc import Proxy
 >>> from twisted.internet import reactor
 >>>
 >>> def printValue(value):
...     print repr(value)
...     reactor.stop()
...
 >>> def printError(error):
...     print 'error', error
...     reactor.stop()
...
 >>> p = Proxy('http://192.168.11.1:7080')
 >>> #### Calling the add method with twisted
 >>> p.callRemote('add', 3, 5).addCallbacks(printValue, printError)
<Deferred at 0x83d3f84>
 >>> reactor.run()
error [Failure instance: Traceback: twisted.internet.error.ConnectionLost,
]
 >>> from xmlrpclib import Server
 >>> s=Server('http://192.168.11.1:7080')
 >>> #### Calling the add method with xmlrpclib
 >>> s.add(3,5)
8
 >>> p = Proxy('http://some.web.site/RPC2')
 >>> #### Using proxy again to talk to an xmlrpclib based server (pyblosxom)
 >>> p.callRemote('blogger.getUsersBlogs', '', 'myusername', 
'mypassword').addCallbacks(printValue, printError)
<Deferred at 0x83e8ac4>
 >>> reactor.run()
[{'url': 'http://some.web.site/blog/', 'blogid': '/', 'blogName': '/'}, 
{'url': 'http://some.web.site/blog/GeekyStuff/', 'blogid': 
'/GeekyStuff/', 'blogName': '/GeekyStuff/'}]
 >>>
-----------------
What could be happening here?





From tim_nagels at hotmail.com  Thu May 22 04:24:42 2003
From: tim_nagels at hotmail.com (Tim Nagels)
Date: Thu, 22 May 2003 12:24:42 +0200
Subject: [Twisted-Python] problem remotely calling mehod that returns a Deferred
Message-ID: <BAY1-F152MtjQ4S8Uq500018b96@hotmail.com>

I'm having trouble remotely calling the userWelcome method...

it returns a deferred with some databaseinformation...
when I wanted to test to see how it handles delays...I used 
time.sleep(30)...

then it seems to lose the connection and throws: 
twisted.spread.pb.PBConnectionLost

i've tested it with 15, 10, 5 secs... and when I go below 5 secs it seems to 
work again...(as does removing the sleep line)

Any ideas where the connection could be lost, can't seem to locate it...
tnx

code:

class FtpServFactory(pb.Root, pb.Perspective):

   ....

    def remote_takeInfo(self, info):
        print " got info:", info
        print dir(info)
        print info.name
        print info.welcome
        #pond.countFrogs()
        return "safe and sound" # positive acknowledgement

    ....
    def testcallb(self, resultlist):
        print "executing callback"
        time.sleep(5)				####  if I let it sleep for less then 5 seconds, or 
I just remove the line
        return resultlist[0][0]			####  the value is returned correctly...

    def failtestc(self, resultlist):
        print "failing callback"
        return resultlist

    def perspective_userWelcome(self, user):
        root = self.service.factory.root
        print dir(self)
        self.dbpool = 
adbapi.ConnectionPool("MySQLdb",host="localhost",db="pythonftpserv",port=3306
                                            ,user="root",passwd="")

        self.db    = FtpDatabase(self.dbpool)
        deff = self.db.getDescription("TascAdmin")
        deff.addCallbacks(self.testcallb,self.failtestc)

        return deff

################################################

.....

def main():
    from FtpServer import FtpInfoClient  # so it's not __main__.CopyPond
    inf = FtpInfoClient.CopyInfo()
    inf.initData("Johnny", """/temp/test.tst""", 
"""2002-10-05""","""/temp""","You will find me another ...shrubbery!")

    reactor.callLater(5,reactor.stop)
    sender = Sender(inf)
    deferred = pb.getObjectAt("10.10.0.47", 8800, 50)
    deferred.addCallback(sender.got_obj)

    pb.connect("10.10.0.47", # host name
           8880, # port number
           "guest", # identity name
           "guest", # password
           "FtpServer.ftp", # service name
           "guest", # perspective name (usually same as identity)
           None, # client reference, used to initiate server->client calls
           50 # timeout of 30 seconds before connection gives up
           ).addCallbacks(connected, # what to do when we get connected
                          failure) # and what to do when we can't


    reactor.run()

def connected(perspective):
    deff = 
perspective.callRemote('userWelcome',"TascAdmin").addCallbacks(success, 
failure)
    deff.setTimeout(30)

def fail(des):
    print "failed miserably"

def gotdes(des):
    print "description "+desc

def success(welcome):
    print welcome
    #welcome.addCallbacks(gotdes,fail)
    #reactor.stop()

def failure(error):
    print error
    print dir(error)
    print "Failed to obtain quote.\n"
    #reactor.stop()

if __name__ == '__main__':
    main()


-----------
Aso

_________________________________________________________________





From tim_nagels at hotmail.com  Thu May 22 04:34:28 2003
From: tim_nagels at hotmail.com (Tim Nagels)
Date: Thu, 22 May 2003 12:34:28 +0200
Subject: [Twisted-Python] problem remotely calling mehod that returns a Deferred
Message-ID: <BAY1-F74r0dSHpVyLri00002e3d@hotmail.com>

Answered my own stupid question...
I forgot i automatically closed my reactor after a certain period...
I think I need some sleep(365444564)

---
aso

_________________________________________________________________
Receive your Hotmail & Messenger messages on your mobile phone with MSN 
Mobile http://www.msn.be/gsm/smsservices




From m at moshez.org  Thu May 22 07:19:56 2003
From: m at moshez.org (Moshe Zadka)
Date: 22 May 2003 13:19:56 -0000
Subject: [Twisted-Python] Installing the windows binary with Python 2.3a...
In-Reply-To: <000701c32031$744940f0$8c00a8c0@JeffLaptopNew>
References: <000701c32031$744940f0$8c00a8c0@JeffLaptopNew>
Message-ID: <20030522131956.12439.qmail@green.zadka.com>

On Thu, 22 May 2003, "Jeff Gerritsen" <gerritsen at bigskytel.com> wrote:

> I'm a newbie to Twisted.  I've downloaded the windows binary, tried to
> install under Python 2.3a and receive the error message "Python version 2.2
> required, which was not found in the registry."  What is the work around?

Using released versions of Python, not ones in alpha.
-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From iko at cd.chalmers.se  Thu May 22 08:15:15 2003
From: iko at cd.chalmers.se (Anders Hammarquist)
Date: Thu, 22 May 2003 16:15:15 +0200
Subject: [Twisted-Python] protocols.smtp patch 
In-Reply-To: Message from "matiu" <Matthew@walkerwireless.co.nz> 
   of "Fri, 16 May 2003 10:13:52 +1200." <005201c31b2f$44686110$0201a8c0@JONAH> 
References: <005201c31b2f$44686110$0201a8c0@JONAH> 
Message-ID: <200305221415.h4MEFFJ17572@haddock.cd.chalmers.se>

In a message of Fri, 16 May 2003 10:13:52 +1200, "matiu" writes:
>protocols.smtp client creates a temp file for every email it sends on my
>windows box. Apply this patch to stop that.

Hmm, should we really be closing files in the SMTPClient? I think it
should be enough that the SMTPClient drops any reference it has to
the file when it's done with it (which I see it doesn't do currently,
I'll add that to my patch and post it momentarily). The responsibility
for closing (or deleting or whatever) should be the responsibility of
whoever opened the file in the first place.

/Anders

-- 
 -- Of course I'm crazy, but that doesn't mean I'm wrong.
Anders Hammarquist                                  | iko at cd.chalmers.se
Physics student, Chalmers University of Technology, | Hem: +46 31 88 48 50
G|teborg, Sweden.           RADIO: SM6XMM and N2JGL | Mob: +46 707 27 86 87



From wari at home.wari.org  Thu May 22 10:03:19 2003
From: wari at home.wari.org (Wari Wahab)
Date: Fri, 23 May 2003 00:03:19 +0800
Subject: [Twisted-Python] Anomaly found between twisted XML-RPC client
 and twisted server (Bug?)
In-Reply-To: <3ECC9374.50500@home.wari.org>
References: <3ECC9374.50500@home.wari.org>
Message-ID: <3ECCF4C7.3020406@home.wari.org>

Wari Wahab wrote:

> Hi there, I was testing around the XML-RPC support in twisted and 
> found the following:
> same twisted client and server (one instance) = error.connectionLost
> twisted client -> twisted server = error.connectionLost
> xmlprclib client -> twisted server = got my results
> twisted client -> xmlrpclib client = got my results.

I tried the previously mentioned tests in linux, python 2.2.2 and 
twisted 1.0.5, I tried the same tests now in WindowsXP with Activestate 
Python and Twisted 1.0.5 and I get the same errors and results as well, 
which means that this bug is reproducable. Why can't twisted xmlrpc 
client talk to twisted xmlrpc server?




From dp at twistedmatrix.com  Thu May 22 10:37:39 2003
From: dp at twistedmatrix.com (Donovan Preston)
Date: Thu, 22 May 2003 09:37:39 -0700
Subject: [Twisted-Python] LivePage InputConduit only example
In-Reply-To: <79A1C0BA-8C18-11D7-9E76-00039376B1AE@twistedmatrix.com>
Message-ID: <B394B7DE-8C73-11D7-A34D-00039376B1AE@twistedmatrix.com>

By popular demand, an example of using LivePage without the 
OutputConduit, and all the problems inherit with it. With this 
technique, you can build DHTML-style applications using pure, 
server-side Python. The only drawback of this technique is that you 
can't update the user's Browser without them having initiated an action 
on the client side first. For many applications, the ability to 
dynamically replace parts of the page in response to events on the 
client browser (onclick, onchange, etc) will be enough.

I would really appreciate compatibility reports for various funky 
browsers for this example. I have tested it and it works on:

IE Win
IE Mac
Mozilla Everywhere
Safari OS X
OmniWeb 4.5 SneakyPeek OS X

Donovan

-------------- next part --------------
A non-text attachment was scrubbed...
Name: dhtmlLivePage.rpy
Type: application/octet-stream
Size: 990 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030522/a92848ac/attachment-0002.obj>
-------------- next part --------------


From cce at clarkevans.com  Thu May 22 10:56:46 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu, 22 May 2003 16:56:46 +0000
Subject: [Twisted-Python] Authenticated SSL
In-Reply-To: <20030521112510.221e4963.itamar@itamarst.org>
References: <3ECB95E5.8040700@home.wari.org> <20030521112510.221e4963.itamar@itamarst.org>
Message-ID: <20030522165646.GA42775@doublegemini.com>

On Wed, May 21, 2003 at 11:25:10AM -0400, Itamar Shtull-Trauring wrote:
| On Wed, 21 May 2003 23:06:13 +0800
| Wari Wahab <wari at home.wari.org> wrote:
| 
| > Hi there, following the echoserver-ssl.py example, I was able to get
| > up to speed and basically running my xmlrpc server on SSL. As usual, 
| > twisted makes it easy. Now my problem becomes this: I need to verify 
| > that the certificate on the other side (The client) is signed by me
| > (or a known CA). How would one go about such task?
| 
| 1. Read pyOpenSSL documentation. (http://pyopenssl.sf.net)
| 
| 2. Implement a context factory that does the appropriate setup, based on
| docs in (1). (twisted.internet.ssl has some sample context factories).

3. Apply this (very old) patch and use twisted.client.getSecurePage

*evil grins*

Clark
-------------- next part --------------
39c39
< from OpenSSL import SSL
---
> from OpenSSL import SSL, crypto
57a58,60
> def dumpCertificate(cert, filetype = crypto.FILETYPE_PEM ):
>     ''' a helper to dump an incoming cert as a PEM '''
>     return crypto.dump_certificate(filetype, cert)
62,63c65,67
<                  sslmethod=SSL.SSLv23_METHOD):
<         self.privateKeyFileName = privateKeyFileName
---
>                  sslmethod=SSL.SSLv23_METHOD, verifyCallback = None):
>         self.verifyCallback      = (verifyCallback, )      
>         self.privateKeyFileName  = privateKeyFileName
67a72,77
>                         
>     def verifyCertificate(self, conn, cert, errno, depth, retcode):
>         cb = self.verifyCallback[0]
>         if cb: return cb(cert)
>         return 1
> 
71a82,83
>         if self.verifyCallback[0]:
>             ctx.set_verify(SSL.VERIFY_PEER, self.verifyCertificate) 
-------------- next part --------------
--- client.py.orig	Tue Mar 25 18:10:28 2003
+++ client.py	Tue Mar 25 18:55:08 2003
@@ -63,7 +63,8 @@
         l = self.headers.get('location')
         if not l:
             self.handleStatusDefault()
-        host, port, url = _parse(l[0])
+        https, host, port, url = _parse(l[0])
+        assert not https, "https redirects not implemented yet"
         self.factory.host, self.factory.url = host, url
         reactor.connectTCP(host, port, self.factory)
         self.quietLoss = 1
@@ -105,7 +106,9 @@
 
     protocol = HTTPPageGetter
 
-    def __init__(self, host, url, method='GET', postdata=None, headers=None, agent="Twisted PageGetter"):
+    def __init__(self, host, url, method='GET', postdata=None, 
+                 headers=None, agent=None):
+        if agent is None: agent = "Twisted PageGetter"
         if headers is not None:
             self.headers = headers
         if postdata is not None:
@@ -141,8 +144,10 @@
     protocol = HTTPPageDownloader
     value = None
 
-    def __init__(self, host, url, fileName, method='GET', postdata=None, headers=None, agent="Twisted client"):
-        HTTPClientFactory.__init__(self, host, url, method=method, postdata=postdata, headers=headers, agent=agent)
+    def __init__(self, host, url, fileName, method='GET', postdata=None, 
+                 headers=None, agent = None):
+        HTTPClientFactory.__init__(self, host, url, method, 
+                                   postdata, headers, agent)
         self.fileName = fileName
         self.deferred = defer.Deferred()
         self.waiting = 1
@@ -166,26 +171,59 @@
 def _parse(url):
     parsed = urlparse.urlparse(url)
     url = urlparse.urlunparse(('','')+parsed[2:])
-    host, port = parsed[1], 80
+    host = parsed[1]
+    if 'https' == parsed[0]:
+        https, port = 1, 443
+    else:
+        https, port = 0, 80
     if ':' in host:
         host, port = host.split(':')
         port = int(port)
-    return host, port, url
+    return https, host, port, url
 
-def getPage(url, *args, **kwargs):
+def getPage(url, method='GET', postdata=None, headers=None, agent = None):
     '''download a web page
 
     Download a page. Return a deferred, which will
     callback with a page or errback with a description
     of the error.
     '''
-    host, port, url = _parse(url)
-    factory = HTTPClientFactory(host, url, *args, **kwargs)
+    https, host, port, path = _parse(url)
+    if https: return getSecurePage(url, method, postdata, headers, agent)
+    factory = HTTPClientFactory(host, path, method, postdata, headers, agent)
     reactor.connectTCP(host, port, factory)
     return factory.deferred
 
+try:
+    from twisted.internet import ssl
+    def getSecurePage(url, method='GET', postdata=None, headers=None, 
+                      agent = None,
+                      privateKeyFileName = None, certificateFileName = None,
+                      sslmethod=ssl.SSL.SSLv23_METHOD, verifyCallback = None, 
+                      serverCertificateFileName = None):
+        """ download a secure page """
+        https, host, port, path = _parse(url)
+        if serverCertificateFileName:
+            cert = file(serverCertificateFileName).read()
+            verifyCallback = lambda rhs: ssl.dumpCertificate(cert) == rhs
+        if verifyCallback or certificateFileName or privateKeyFileName:
+            context = ssl.DefaultOpenSSLContextFactory(
+                          privateKeyFileName, certificateFileName,
+                          sslmethod, verifyCallback)
+            context.isClient = 1
+        else:
+            context = ssl.ClientContextFactory()
+        factory = HTTPClientFactory(host, path, method, postdata, headers)
+        reactor.connectSSL(host, port, factory, context)
+        return factory.deferred
+except:
+    def getSecurePage(*args,**kwargs):
+        raise Exception("ssl not available")
+
 def downloadPage(url, file, *args, **kwargs):
-    host, port, url = _parse(url)
-    factory = HTTPDownloader(host, url, file, *args, **kwargs)
+    https, host, port, path = _parse(url)
+    assert not https, "https is not yet implemented here"
+    factory = HTTPDownloader(host, path, file, *args, **kwargs)
     reactor.connectTCP(host, port, factory)
     return factory.deferred
+

From cce at clarkevans.com  Thu May 22 10:58:25 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu, 22 May 2003 16:58:25 +0000
Subject: [Twisted-Python] Authenticated SSL
In-Reply-To: <20030522165646.GA42775@doublegemini.com>
References: <3ECB95E5.8040700@home.wari.org> <20030521112510.221e4963.itamar@itamarst.org> <20030522165646.GA42775@doublegemini.com>
Message-ID: <20030522165825.GA42921@doublegemini.com>

Err, no, this would only verify the cert and doesn't work with xmlrpc.
Sorry.  -- Clark

On Thu, May 22, 2003 at 04:56:46PM +0000, Clark C. Evans wrote:
| On Wed, May 21, 2003 at 11:25:10AM -0400, Itamar Shtull-Trauring wrote:
| | On Wed, 21 May 2003 23:06:13 +0800
| | Wari Wahab <wari at home.wari.org> wrote:
| | 
| | > Hi there, following the echoserver-ssl.py example, I was able to get
| | > up to speed and basically running my xmlrpc server on SSL. As usual, 
| | > twisted makes it easy. Now my problem becomes this: I need to verify 
| | > that the certificate on the other side (The client) is signed by me
| | > (or a known CA). How would one go about such task?
| | 
| | 1. Read pyOpenSSL documentation. (http://pyopenssl.sf.net)
| | 
| | 2. Implement a context factory that does the appropriate setup, based on
| | docs in (1). (twisted.internet.ssl has some sample context factories).
| 
| 3. Apply this (very old) patch and use twisted.client.getSecurePage
| 
| *evil grins*
| 
| Clark

| 39c39
| < from OpenSSL import SSL
| ---
| > from OpenSSL import SSL, crypto
| 57a58,60
| > def dumpCertificate(cert, filetype = crypto.FILETYPE_PEM ):
| >     ''' a helper to dump an incoming cert as a PEM '''
| >     return crypto.dump_certificate(filetype, cert)
| 62,63c65,67
| <                  sslmethod=SSL.SSLv23_METHOD):
| <         self.privateKeyFileName = privateKeyFileName
| ---
| >                  sslmethod=SSL.SSLv23_METHOD, verifyCallback = None):
| >         self.verifyCallback      = (verifyCallback, )      
| >         self.privateKeyFileName  = privateKeyFileName
| 67a72,77
| >                         
| >     def verifyCertificate(self, conn, cert, errno, depth, retcode):
| >         cb = self.verifyCallback[0]
| >         if cb: return cb(cert)
| >         return 1
| > 
| 71a82,83
| >         if self.verifyCallback[0]:
| >             ctx.set_verify(SSL.VERIFY_PEER, self.verifyCertificate) 

| --- client.py.orig	Tue Mar 25 18:10:28 2003
| +++ client.py	Tue Mar 25 18:55:08 2003
| @@ -63,7 +63,8 @@
|          l = self.headers.get('location')
|          if not l:
|              self.handleStatusDefault()
| -        host, port, url = _parse(l[0])
| +        https, host, port, url = _parse(l[0])
| +        assert not https, "https redirects not implemented yet"
|          self.factory.host, self.factory.url = host, url
|          reactor.connectTCP(host, port, self.factory)
|          self.quietLoss = 1
| @@ -105,7 +106,9 @@
|  
|      protocol = HTTPPageGetter
|  
| -    def __init__(self, host, url, method='GET', postdata=None, headers=None, agent="Twisted PageGetter"):
| +    def __init__(self, host, url, method='GET', postdata=None, 
| +                 headers=None, agent=None):
| +        if agent is None: agent = "Twisted PageGetter"
|          if headers is not None:
|              self.headers = headers
|          if postdata is not None:
| @@ -141,8 +144,10 @@
|      protocol = HTTPPageDownloader
|      value = None
|  
| -    def __init__(self, host, url, fileName, method='GET', postdata=None, headers=None, agent="Twisted client"):
| -        HTTPClientFactory.__init__(self, host, url, method=method, postdata=postdata, headers=headers, agent=agent)
| +    def __init__(self, host, url, fileName, method='GET', postdata=None, 
| +                 headers=None, agent = None):
| +        HTTPClientFactory.__init__(self, host, url, method, 
| +                                   postdata, headers, agent)
|          self.fileName = fileName
|          self.deferred = defer.Deferred()
|          self.waiting = 1
| @@ -166,26 +171,59 @@
|  def _parse(url):
|      parsed = urlparse.urlparse(url)
|      url = urlparse.urlunparse(('','')+parsed[2:])
| -    host, port = parsed[1], 80
| +    host = parsed[1]
| +    if 'https' == parsed[0]:
| +        https, port = 1, 443
| +    else:
| +        https, port = 0, 80
|      if ':' in host:
|          host, port = host.split(':')
|          port = int(port)
| -    return host, port, url
| +    return https, host, port, url
|  
| -def getPage(url, *args, **kwargs):
| +def getPage(url, method='GET', postdata=None, headers=None, agent = None):
|      '''download a web page
|  
|      Download a page. Return a deferred, which will
|      callback with a page or errback with a description
|      of the error.
|      '''
| -    host, port, url = _parse(url)
| -    factory = HTTPClientFactory(host, url, *args, **kwargs)
| +    https, host, port, path = _parse(url)
| +    if https: return getSecurePage(url, method, postdata, headers, agent)
| +    factory = HTTPClientFactory(host, path, method, postdata, headers, agent)
|      reactor.connectTCP(host, port, factory)
|      return factory.deferred
|  
| +try:
| +    from twisted.internet import ssl
| +    def getSecurePage(url, method='GET', postdata=None, headers=None, 
| +                      agent = None,
| +                      privateKeyFileName = None, certificateFileName = None,
| +                      sslmethod=ssl.SSL.SSLv23_METHOD, verifyCallback = None, 
| +                      serverCertificateFileName = None):
| +        """ download a secure page """
| +        https, host, port, path = _parse(url)
| +        if serverCertificateFileName:
| +            cert = file(serverCertificateFileName).read()
| +            verifyCallback = lambda rhs: ssl.dumpCertificate(cert) == rhs
| +        if verifyCallback or certificateFileName or privateKeyFileName:
| +            context = ssl.DefaultOpenSSLContextFactory(
| +                          privateKeyFileName, certificateFileName,
| +                          sslmethod, verifyCallback)
| +            context.isClient = 1
| +        else:
| +            context = ssl.ClientContextFactory()
| +        factory = HTTPClientFactory(host, path, method, postdata, headers)
| +        reactor.connectSSL(host, port, factory, context)
| +        return factory.deferred
| +except:
| +    def getSecurePage(*args,**kwargs):
| +        raise Exception("ssl not available")
| +
|  def downloadPage(url, file, *args, **kwargs):
| -    host, port, url = _parse(url)
| -    factory = HTTPDownloader(host, url, file, *args, **kwargs)
| +    https, host, port, path = _parse(url)
| +    assert not https, "https is not yet implemented here"
| +    factory = HTTPDownloader(host, path, file, *args, **kwargs)
|      reactor.connectTCP(host, port, factory)
|      return factory.deferred
| +




From luc.stepniewski at adelux.fr  Thu May 22 01:48:29 2003
From: luc.stepniewski at adelux.fr (Luc Stepniewski)
Date: Thu, 22 May 2003 09:48:29 +0200
Subject: [Twisted-Python] LivePage Hello World
In-Reply-To: <333F9DDC-8C00-11D7-9E76-00039376B1AE@twistedmatrix.com>
References: <333F9DDC-8C00-11D7-9E76-00039376B1AE@twistedmatrix.com>
Message-ID: <200305220948.29416.luc.stepniewski@adelux.fr>

On Thursday 22 May 2003 04:50, Donovan Preston wrote:
> On Wednesday, May 21, 2003, at 06:53 PM, Eric Holm wrote:
> > I'm trying to get a simple LivePage script going,
> > and no luck so far.

> The OutputConduit is responsible for shuttling events from the Server
> (Twisted) to the Client (web browser).

What is the maximal size of the data that can be sent from the server to the 
client? I guess there are more than one answer; one for flash, one for 
javascript basic, and one for raw mozilla specific javascript?

Luc
-- 
Luc Stepniewski <lstep at adequat.net> <http://lstep.free.fr/>
Adelux - Securite, Linux  Public key: <http://lstep.free.fr/pubkey.txt>
Key BC0E3C2A fingerprint = A4FA466C68D27E46B427  07D083ED6340BC0E3C2A






From iko at strakt.com  Thu May 22 08:48:35 2003
From: iko at strakt.com (Anders Hammarquist)
Date: Thu, 22 May 2003 16:48:35 +0200
Subject: [Twisted-Python] SMTP patch
Message-ID: <200305221448.h4MEmZw2004905@fido.strakt.com>

Make sure to drop any references to the file object containing the
message data.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: text/x-patch
Size: 41097 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030522/2657fcc4/attachment-0002.bin>

From dp at twistedmatrix.com  Thu May 22 14:33:53 2003
From: dp at twistedmatrix.com (Donovan Preston)
Date: Thu, 22 May 2003 13:33:53 -0700
Subject: [Twisted-Python] LivePage Hello World
In-Reply-To: <200305220948.29416.luc.stepniewski@adelux.fr>
Message-ID: <B4091D27-8C94-11D7-A34D-00039376B1AE@twistedmatrix.com>

On Thursday, May 22, 2003, at 12:48 AM, Luc Stepniewski wrote:

> What is the maximal size of the data that can be sent from the server 
> to the
> client? I guess there are more than one answer; one for flash, one for
> javascript basic, and one for raw mozilla specific javascript?

Pretty large. On IE Win, where Flash communicates with the browser 
using LiveConnect, I haven't seen any problems with huge page changes 
(An entire very complicated page). Everywhere else, the script is 
currently sent to the browser in a regular HTTP response, in a <script> 
tag, so I don't see why there would be any limit to the amount of data 
you could send there. If there is any limit on the size of JavaScript 
strings, that would be it.

Donovan




From mario at ruggier.org  Thu May 22 15:41:42 2003
From: mario at ruggier.org (Mario Ruggier)
Date: Thu, 22 May 2003 23:41:42 +0200
Subject: [Twisted-Python] LivePage InputConduit only example
In-Reply-To: <B394B7DE-8C73-11D7-A34D-00039376B1AE@twistedmatrix.com>
Message-ID: <2D6BD1B2-8C9E-11D7-BBF0-000393756786@ruggier.org>

> By popular demand, an example of using LivePage without the 
> OutputConduit, and all the problems inherit with it. With this 
> technique, you can build DHTML-style applications using pure, 
> server-side Python. The only drawback of this technique is that you 
> can't update the user's Browser without them having initiated an 
> action on the client side first. For many applications, the ability to 
> dynamically replace parts of the page in response to events on the 
> client browser (onclick, onchange, etc) will be enough.
>
> I would really appreciate compatibility reports for various funky 
> browsers for this example. I have tested it and it works on:
>
> IE Win
> IE Mac
> Mozilla Everywhere
> Safari OS X

Nice, and very magical...

Do not know if you noticed this already, but this problem on
Safari beta 2 (v74) seems to be consistent:
- load url: http://localhost:8080/dhtmlLivePage/
- click to increment number, once or more times
- reload page (with the reload button, not by "retyping" the url) gives
   the following error inside the iframe (id is different each time...):

   exceptions.KeyError: woven_id_8423856
   ...

(Twisted CVS of a couple days ago, post 1.0.5).

Cheers, mario


> OmniWeb 4.5 SneakyPeek OS X
>
> Donovan




From dp at twistedmatrix.com  Thu May 22 15:57:13 2003
From: dp at twistedmatrix.com (Donovan Preston)
Date: Thu, 22 May 2003 14:57:13 -0700
Subject: [Twisted-Python] LivePage InputConduit only example
In-Reply-To: <2D6BD1B2-8C9E-11D7-BBF0-000393756786@ruggier.org>
Message-ID: <584B1DE2-8CA0-11D7-A34D-00039376B1AE@twistedmatrix.com>

On Thursday, May 22, 2003, at 02:41 PM, Mario Ruggier wrote:
>
> Nice, and very magical...
>
> Do not know if you noticed this already, but this problem on
> Safari beta 2 (v74) seems to be consistent:
> - load url: http://localhost:8080/dhtmlLivePage/
> - click to increment number, once or more times
> - reload page (with the reload button, not by "retyping" the url) gives
>   the following error inside the iframe (id is different each time...):
>
>   exceptions.KeyError: woven_id_8423856
>   ...

Thanks for the report. It seems like a bug in safari to me; refreshing 
the whole page should refresh the iframe at the url "input_html" not at 
the last .src that was set by a javascript... I'll check to see if this 
happens in any other browsers.

Thanks again

Donovan




From andrew-twisted at puzzling.org  Thu May 22 19:05:24 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 23 May 2003 11:05:24 +1000
Subject: [Twisted-Python] SMTP patch
In-Reply-To: <200305221448.h4MEmZw2004905@fido.strakt.com>
References: <200305221448.h4MEmZw2004905@fido.strakt.com>
Message-ID: <20030523010524.GA9978@frobozz>

On Thu, May 22, 2003 at 04:48:35PM +0200, Anders Hammarquist wrote:
> Make sure to drop any references to the file object containing the
> message data.
> 

> +        if code in xrange(200,300):

I think a much better way to do this is:

    if 200 <= code <= 300:

-Andrew.




From exarkun at intarweb.us  Thu May 22 21:02:53 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Thu, 22 May 2003 23:02:53 -0400
Subject: [Twisted-Python] SMTP patch
In-Reply-To: <20030523010524.GA9978@frobozz>
References: <200305221448.h4MEmZw2004905@fido.strakt.com> <20030523010524.GA9978@frobozz>
Message-ID: <20030523030253.GB28981@meson.dyndns.org>

On Fri, May 23, 2003 at 11:05:24AM +1000, Andrew Bennetts wrote:
> On Thu, May 22, 2003 at 04:48:35PM +0200, Anders Hammarquist wrote:
> > Make sure to drop any references to the file object containing the
> > message data.
> > 
> 
> > +        if code in xrange(200,300):
> 
> I think a much better way to do this is:
> 
>     if 200 <= code <= 300:
> 

    Interestingly, there was a thread on PyPy-dev on this subject.  I think
I agree with the line of thinking that says "x in y" expresses the intent
more accurately and at a higher level than "a <= x < y".  xrange() is a hack
though, so I would use range() :)

    BTW (the real reason I'm replying), I haven't forgotten about this
patch.  I'll try to get to it as quickly as I can.

  Jp 

-- 
"The problem is, of course, that not only is economics bankrupt but it has
 always been nothing more than politics in disguise ... economics is a form
 of brain damage."  -- Hazel Henderson
-- 
 up 21 days, 0:40, 0 users, load average: 0.04, 0.03, 0.00
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030522/bc7c6533/attachment.sig>

From andrew-twisted at puzzling.org  Thu May 22 21:13:35 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 23 May 2003 13:13:35 +1000
Subject: [Twisted-Python] SMTP patch
In-Reply-To: <20030523030253.GB28981@meson.dyndns.org>
References: <200305221448.h4MEmZw2004905@fido.strakt.com> <20030523010524.GA9978@frobozz> <20030523030253.GB28981@meson.dyndns.org>
Message-ID: <20030523031335.GD9978@frobozz>

On Thu, May 22, 2003 at 11:02:53PM -0400, Jp Calderone wrote:
> On Fri, May 23, 2003 at 11:05:24AM +1000, Andrew Bennetts wrote:
> > On Thu, May 22, 2003 at 04:48:35PM +0200, Anders Hammarquist wrote:
> > > Make sure to drop any references to the file object containing the
> > > message data.
> > > 
> > 
> > > +        if code in xrange(200,300):
> > 
> > I think a much better way to do this is:
> > 
> >     if 200 <= code <= 300:
> > 
> 
>     Interestingly, there was a thread on PyPy-dev on this subject.  I think
> I agree with the line of thinking that says "x in y" expresses the intent
> more accurately and at a higher level than "a <= x < y".  xrange() is a hack
> though, so I would use range() :)

Oops!  As you imply, that should've been "200 <= code < 300".  I still don't
like the idea of constructing 100 integers, even lazily, just to test
bounds, though.

Of course, if the status code was left as a string, then you could simply do
"if code.startswith('2'):"  :)

-andrew.




From wari at home.wari.org  Thu May 22 22:19:26 2003
From: wari at home.wari.org (Wari Wahab)
Date: Fri, 23 May 2003 12:19:26 +0800
Subject: [Twisted-Python] Anomaly found between twisted XML-RPC client
 and twisted server (Bug?)
In-Reply-To: <3ECCF4C7.3020406@home.wari.org>
References: <3ECC9374.50500@home.wari.org> <3ECCF4C7.3020406@home.wari.org>
Message-ID: <3ECDA14E.8020604@home.wari.org>

Wari Wahab wrote:

> I tried the previously mentioned tests in linux, python 2.2.2 and 
> twisted 1.0.5, I tried the same tests now in WindowsXP with 
> Activestate Python and Twisted 1.0.5 and I get the same errors and 
> results as well, which means that this bug is reproducable. 

Right now I'm not sure if this is a bug anymore, and it's probably the 
reason I got no answers for this, details below.

> Why can't twisted xmlrpc client talk to twisted xmlrpc server?

When I did this statement:

p = Proxy('http://localhost:7080')
p.callRemote(egg, spam)

Twisted then sends the request:
---------------
POST  HTTP/1.0
User-Agent: Twisted/XMLRPClib
Host: localhost
Content-type: text/xml
Content-length: 189

<?xml version="1.0"?>
<methodCall>
<methodName>add</methodName>
# Blah Blah
----------------

"POST  HTTP/1.0" becomes an invalid request because there's no path 
anyway. Still, the twisted xmlrpc server carries forward the request to 
twisted.web.xmlrpc.XMLRPC.render() anyway, but this time, the 
request.content (line 103 in xmlrpc.py) is an empty StringIO, and when 
passed to xmlrpc.loads(), returns the exception.

If the request is wrong, shouldn't twisted.web complain about it at a 
point earlier than the XMLRPC resource? If it lets the request thru, why 
does request.content becomes empty. Or, shouldn't the XMLRPC client adds 
a '/' at least when there is no URI (URL?) in the request?

That's all for now.




From andrew-twisted at puzzling.org  Thu May 22 22:40:13 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 23 May 2003 14:40:13 +1000
Subject: [Twisted-Python] Anomaly found between twisted XML-RPC client and twisted server (Bug?)
In-Reply-To: <3ECDA14E.8020604@home.wari.org>
References: <3ECC9374.50500@home.wari.org> <3ECCF4C7.3020406@home.wari.org> <3ECDA14E.8020604@home.wari.org>
Message-ID: <20030523044013.GF9978@frobozz>

On Fri, May 23, 2003 at 12:19:26PM +0800, Wari Wahab wrote:
> 
> If the request is wrong, shouldn't twisted.web complain about it at a 
> point earlier than the XMLRPC resource? If it lets the request thru, why 
> does request.content becomes empty. Or, shouldn't the XMLRPC client adds 
> a '/' at least when there is no URI (URL?) in the request?

That's for taking the time to investigate this!

Does this patch to the Proxy class fix the problem?

Index: twisted/web/xmlrpc.py
===================================================================
RCS file: /cvs/Twisted/twisted/web/xmlrpc.py,v
retrieving revision 1.22
diff -u -r1.22 xmlrpc.py
--- twisted/web/xmlrpc.py       12 May 2003 20:16:49 -0000      1.22
+++ twisted/web/xmlrpc.py       23 May 2003 04:37:04 -0000
@@ -225,6 +225,8 @@
     def __init__(self, url):
         parts = urlparse.urlparse(url)
         self.url = urlparse.urlunparse(('', '')+parts[2:])
+        if not self.url:
+            self.url = '/'
         if ':' in parts[1]:
             self.host, self.port = parts[1].split(':')
             self.port = int(self.port)

(I haven't actually read the code very carefully; perhaps there's a better
way to call urlunparse or something, but this looks like it'll fix the
symptom)

-Andrew.




From bob at redivi.com  Thu May 22 22:46:09 2003
From: bob at redivi.com (Bob Ippolito)
Date: Fri, 23 May 2003 00:46:09 -0400
Subject: [Twisted-Python] SMTP patch
In-Reply-To: <20030523030253.GB28981@meson.dyndns.org>
Message-ID: <78A33124-8CD9-11D7-9FAC-000A95686CD8@redivi.com>

On Thursday, May 22, 2003, at 23:02 America/New_York, Jp Calderone 
wrote:

>     Interestingly, there was a thread on PyPy-dev on this subject.  I 
> think
> I agree with the line of thinking that says "x in y" expresses the 
> intent
> more accurately and at a higher level than "a <= x < y".  xrange() is 
> a hack
> though, so I would use range() :)

Only because in this particular case all valid x are exactly 
representable by an integer .. there are plenty of x (floats or 
otherwise) that satisfy a <= x < y that aren't in the set of integers 
[a, y>

Personally, I think there should be a hybrid between a list and a 
generator (kinda like xrange but more magical) returned whenever you do 
a range or a list comprehension or a slice unless you explicitly ask 
for all of the values to be calculated.. or at least an aesthetically 
pleasing way to do things like that.. and no, itertools and friends do 
not count, especially because generators can't support __getitem__ and 
__len__ when the user wants it to.  You could make a ton of VM 
optimizations like that, especially for objects like range(a, b).  for 
example, it could support __contains__ which would simply do a <= x < y 
(or the equivalent for a stepped range), reverse and sort would 
essentially be a no-op until an unordered append or insert happens, etc.

-bob




From andrew-twisted at puzzling.org  Thu May 22 22:53:24 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 23 May 2003 14:53:24 +1000
Subject: [Twisted-Python] SMTP patch
In-Reply-To: <78A33124-8CD9-11D7-9FAC-000A95686CD8@redivi.com>
References: <20030523030253.GB28981@meson.dyndns.org> <78A33124-8CD9-11D7-9FAC-000A95686CD8@redivi.com>
Message-ID: <20030523045324.GG9978@frobozz>

On Fri, May 23, 2003 at 12:46:09AM -0400, Bob Ippolito wrote:
> On Thursday, May 22, 2003, at 23:02 America/New_York, Jp Calderone 
> wrote:
> 
> >    Interestingly, there was a thread on PyPy-dev on this subject.  I 
> >think I agree with the line of thinking that says "x in y" expresses the
> >intent more accurately and at a higher level than "a <= x < y".  xrange()
> >is a hack though, so I would use range() :)
> 
> Only because in this particular case all valid x are exactly 
> representable by an integer .. there are plenty of x (floats or 
> otherwise) that satisfy a <= x < y that aren't in the set of integers 
> [a, y>
> 
> Personally, I think there should be a hybrid between a list and a 
> generator (kinda like xrange but more magical) returned whenever you do 

I think the word you're looking for is "interval"?

-Andrew.




From wari at home.wari.org  Thu May 22 22:58:12 2003
From: wari at home.wari.org (Wari Wahab)
Date: Fri, 23 May 2003 12:58:12 +0800
Subject: [Twisted-Python] Serving HTTP requests (was: Bug?)
In-Reply-To: <20030523044013.GF9978@frobozz>
References: <3ECC9374.50500@home.wari.org> <3ECCF4C7.3020406@home.wari.org> <3ECDA14E.8020604@home.wari.org> <20030523044013.GF9978@frobozz>
Message-ID: <3ECDAA64.6040500@home.wari.org>

Andrew Bennetts wrote:

>On Fri, May 23, 2003 at 12:19:26PM +0800, Wari Wahab wrote:
>  
>
>>If the request is wrong, shouldn't twisted.web complain about it at a 
>>point earlier than the XMLRPC resource? If it lets the request thru, why 
>>does request.content becomes empty. Or, shouldn't the XMLRPC client adds 
>>a '/' at least when there is no URI (URL?) in the request?
>>    
>>
>That's for taking the time to investigate this!
>Does this patch to the Proxy class fix the problem?
>  
>
Yes that fixed the problem nicely. Though I also do think that is the 
request is wrong, twisted should complain, as in the case of Apache:

sync:~/web$ telnet localhost 80
Trying 127.0.0.1...
Connected to sync.
Escape character is '^]'.
POST  HTTP/1.0
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<HTML><HEAD>
<TITLE>400 Bad Request</TITLE>
</HEAD><BODY>
<H1>Bad Request</H1>
Your browser sent a request that this server could not understand.<P>
Invalid URI in request POST  HTTP/1.0<P>
<HR>
<ADDRESS>Apache/1.3.26 Server at sync.sg.celestix.com Port 80</ADDRESS>
</BODY></HTML>
Connection closed by foreign host.

In the case of a microsoft server, it does this:
sync:~/web$ telnet www.microsoft.com 80
Trying 207.46.249.222...
Connected to www.us.microsoft.com.
Escape character is '^]'.
POST  HTTP/1.0
Connection closed by foreign host.

I like the apache way better :)




From bob at redivi.com  Thu May 22 23:04:26 2003
From: bob at redivi.com (Bob Ippolito)
Date: Fri, 23 May 2003 01:04:26 -0400
Subject: [Twisted-Python] SMTP patch
In-Reply-To: <20030523045324.GG9978@frobozz>
Message-ID: <067F2E7E-8CDC-11D7-9FAC-000A95686CD8@redivi.com>

On Friday, May 23, 2003, at 00:53 America/New_York, Andrew Bennetts 
wrote:

> On Fri, May 23, 2003 at 12:46:09AM -0400, Bob Ippolito wrote:
>> On Thursday, May 22, 2003, at 23:02 America/New_York, Jp Calderone
>> wrote:
>>
>>>    Interestingly, there was a thread on PyPy-dev on this subject.  I
>>> think I agree with the line of thinking that says "x in y" expresses 
>>> the
>>> intent more accurately and at a higher level than "a <= x < y".  
>>> xrange()
>>> is a hack though, so I would use range() :)
>>
>> Only because in this particular case all valid x are exactly
>> representable by an integer .. there are plenty of x (floats or
>> otherwise) that satisfy a <= x < y that aren't in the set of integers
>> [a, y>
>>
>> Personally, I think there should be a hybrid between a list and a
>> generator (kinda like xrange but more magical) returned whenever you 
>> do
>
> I think the word you're looking for is "interval"?

Not really.. that'd only really apply to a magical return value from 
range.

-bob




From andrew-twisted at puzzling.org  Thu May 22 23:07:59 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 23 May 2003 15:07:59 +1000
Subject: [Twisted-Python] Serving HTTP requests (was: Bug?)
In-Reply-To: <3ECDAA64.6040500@home.wari.org>
References: <3ECC9374.50500@home.wari.org> <3ECCF4C7.3020406@home.wari.org> <3ECDA14E.8020604@home.wari.org> <20030523044013.GF9978@frobozz> <3ECDAA64.6040500@home.wari.org>
Message-ID: <20030523050759.GH9978@frobozz>

On Fri, May 23, 2003 at 12:58:12PM +0800, Wari Wahab wrote:
> Yes that fixed the problem nicely. Though I also do think that is the 
> request is wrong, twisted should complain, as in the case of Apache:

[snip 400 Bad request vs. dropping the connection]

Twisted's HTTP implementation does this:

            parts = line.split()
            if len(parts)<3:
                parts.append('HTTP/0.9') # isn't backwards compat great!
            if len(parts) != 3:
                self.transport.write("HTTP/1.1 400 Bad Request\r\n\r\n")
                self.transport.loseConnection()
                return

So "POST  HTTP/1.0" becomes "POST HTTP/1.0 HTTP/0.9"!  (This of course
results in a 404)

Does anyone know what clients is the "parts.append('HTTP/0.9')" backwards
compat hack is there for?

-Andrew.




From m at moshez.org  Fri May 23 01:02:47 2003
From: m at moshez.org (Moshe Zadka)
Date: 23 May 2003 07:02:47 -0000
Subject: [Twisted-Python] Getting Rid of Application in a Compatible Way
Message-ID: <20030523070247.10334.qmail@green.zadka.com>

I suggest to write ApplicationService classes which look like:

class TCPListener(ApplicationService):

    def __init__(self, port, factory, backlog=5, interface='', *args, **kwargs):
        self.port = port
        self.factory = factory
        self.backlog = backlog
        self.interface = interface
        ApplicationService.__init__(self, *args, **kwargs)

    def __getstate__(self):
        d = self.__dict__.copy()
        d['_port'] = None
        return d

    def startService(self):
        ApplicationService.startService(self)
        self._port = reactor.listenTCP(self.port, self.factory, self.backlog,
                                       self.interface)

    def stopService(Self):
        ApplicationService.stopService(self)
        self._port.stopListening()
        self._port = None

Now, instead of application.listenTCP we can use

TCPListener(8080, server.Site(resource), "foo").setServiceParent(application)

The only problem is needing to choose unique names. I suggest
ApplicationService will lose the unPythonic
        if not isinstance(serviceName, types.StringType):
            raise TypeError("%s is not a string." % serviceName)
And add to app.py

class Unique:
    pass

This means that "unnamed" services are now possible:
TCPListener(8080, server.Site(resource), Unique()).setServiceParent(application)

You can still access a service by its "serviceName", but you have to get
the name from the service. This means stuff like cred will still work.
Of course, similar Services can be written for UNIXListener, SSLListener,
etc.

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From peter at engcorp.com  Fri May 23 06:57:56 2003
From: peter at engcorp.com (Peter Hansen)
Date: Fri, 23 May 2003 08:57:56 -0400
Subject: [Twisted-Python] SMTP patch
References: <200305221448.h4MEmZw2004905@fido.strakt.com> <20030523010524.GA9978@frobozz> <20030523030253.GB28981@meson.dyndns.org> <20030523031335.GD9978@frobozz>
Message-ID: <3ECE1AD4.C5973D75@engcorp.com>

Andrew Bennetts wrote:
> 
> Oops!  As you imply, that should've been "200 <= code < 300".  I still don't
> like the idea of constructing 100 integers, even lazily, just to test
> bounds, though.
> 
> Of course, if the status code was left as a string, then you could simply do
> "if code.startswith('2'):"  :)

if str(code).startswith('2'):  ??

-Peter



From abe at fettig.net  Fri May 23 09:42:03 2003
From: abe at fettig.net (Abe Fettig)
Date: 23 May 2003 11:42:03 -0400
Subject: [Twisted-Python] LivePage InputConduit only example
In-Reply-To: <B394B7DE-8C73-11D7-A34D-00039376B1AE@twistedmatrix.com>
References: <B394B7DE-8C73-11D7-A34D-00039376B1AE@twistedmatrix.com>
Message-ID: <1053704523.695.19.camel@mingus>

On Thu, 2003-05-22 at 12:37, Donovan Preston wrote:
> By popular demand, an example of using LivePage without the 
> OutputConduit, and all the problems inherit with it. With this 
> technique, you can build DHTML-style applications using pure, 
> server-side Python. The only drawback of this technique is that you 
> can't update the user's Browser without them having initiated an action 
> on the client side first. For many applications, the ability to 
> dynamically replace parts of the page in response to events on the 
> client browser (onclick, onchange, etc) will be enough.
> 
> I would really appreciate compatibility reports for various funky 
> browsers for this example. I have tested it and it works on:
> 
> IE Win
> IE Mac
> Mozilla Everywhere
> Safari OS X
> OmniWeb 4.5 SneakyPeek OS X

Is this working in CVS only?  Using Twisted 1.0.5, I can't get it to
work on Mozilla, IE/Win, or Konqueror.

Abe




From exarkun at intarweb.us  Fri May 23 10:55:45 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Fri, 23 May 2003 12:55:45 -0400
Subject: [Twisted-Python] SMTP patch
In-Reply-To: <20030523031335.GD9978@frobozz>
References: <200305221448.h4MEmZw2004905@fido.strakt.com> <20030523010524.GA9978@frobozz> <20030523030253.GB28981@meson.dyndns.org> <20030523031335.GD9978@frobozz>
Message-ID: <20030523165545.GA30365@meson.dyndns.org>

On Fri, May 23, 2003 at 01:13:35PM +1000, Andrew Bennetts wrote:
> On Thu, May 22, 2003 at 11:02:53PM -0400, Jp Calderone wrote:
> > On Fri, May 23, 2003 at 11:05:24AM +1000, Andrew Bennetts wrote:
> > > On Thu, May 22, 2003 at 04:48:35PM +0200, Anders Hammarquist wrote:
> > > > Make sure to drop any references to the file object containing the
> > > > message data.
> > > > 
> > > 
> > > > +        if code in xrange(200,300):
> > > 
> > > I think a much better way to do this is:
> > > 
> > >     if 200 <= code <= 300:
> > > 
> > 
> >     Interestingly, there was a thread on PyPy-dev on this subject.  I think
> > I agree with the line of thinking that says "x in y" expresses the intent
> > more accurately and at a higher level than "a <= x < y".  xrange() is a hack
> > though, so I would use range() :)
> 
> Oops!  As you imply, that should've been "200 <= code < 300".  I still don't
> like the idea of constructing 100 integers, even lazily, just to test
> bounds, though.

  Neither do I.  Python should optimize it.  ;)

  Jp

-- 
A disciple of another sect once came to Drescher as he was eating his
morning meal. "I would like to give you this personality test," said the
outsider, "because I want you to be happy." Drescher took the paper that was
offered him and put it into the toaster: "I wish the toaster to be happy, 
too."
-- 
 up 21 days, 14:40, 0 users, load average: 0.00, 0.00, 0.00
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030523/eee54b52/attachment.sig>

From bob at redivi.com  Fri May 23 11:08:25 2003
From: bob at redivi.com (Bob Ippolito)
Date: Fri, 23 May 2003 13:08:25 -0400
Subject: [Twisted-Python] SMTP patch
In-Reply-To: <20030523165545.GA30365@meson.dyndns.org>
Message-ID: <2A944DAE-8D41-11D7-9FAC-000A95686CD8@redivi.com>

On Friday, May 23, 2003, at 12:55 America/New_York, Jp Calderone wrote:

>>>     Interestingly, there was a thread on PyPy-dev on this subject.  
>>> I think
>>> I agree with the line of thinking that says "x in y" expresses the 
>>> intent
>>> more accurately and at a higher level than "a <= x < y".  xrange() 
>>> is a hack
>>> though, so I would use range() :)
>>
>> Oops!  As you imply, that should've been "200 <= code < 300".  I 
>> still don't
>> like the idea of constructing 100 integers, even lazily, just to test
>> bounds, though.
>
>   Neither do I.  Python should optimize it.  ;)

I for one would be perfectly happy doing optimization on my own, when 
neccessary, if function calls sucked less :)

-bob




From dp at twistedmatrix.com  Fri May 23 12:06:06 2003
From: dp at twistedmatrix.com (Donovan Preston)
Date: Fri, 23 May 2003 11:06:06 -0700
Subject: [Twisted-Python] LivePage InputConduit only example
In-Reply-To: <1053704523.695.19.camel@mingus>
Message-ID: <39620C5A-8D49-11D7-8F5B-00039376B1AE@twistedmatrix.com>

On Friday, May 23, 2003, at 08:42 AM, Abe Fettig wrote:

> Is this working in CVS only?  Using Twisted 1.0.5, I can't get it to
> work on Mozilla, IE/Win, or Konqueror.

CVS is probably required, yes.

Donovan




From tv at twistedmatrix.com  Fri May 23 12:31:27 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Fri, 23 May 2003 21:31:27 +0300
Subject: [Twisted-Python] Low-level networking in Twisted
Message-ID: <20030523183127.GA19720@lapdog>

        Hi. Here's a patch that adds some low-level networking thingies
        (Ethernet, IP & UDP packet parsing; ability to read raw packets
        and use normal DatagramProtocols with them).

        I'm submitting it for review at an early stage so you can all
        bash me to dea^W^W^W^Wgive me guidance on how to build it.
        Especially look at what I did with AbstractDatagramProtocol,
        how the classes interact, etc.

        Future work: maybe checksum verification and such
        details. TUN/TAP interface. Pcap interface, if I can avoid
        writing C and still make it compatible. Worlds slowest network
        stack.

        And yes, I know about scapy. It's a nice hack and a useful
        tool, but doesn't really provide an API to program on. Personally,
        I think a twistedy low-level networking library would be a good
        ground to write a small UI app that does what scapy does. And
        if you do that, please call it twisted.pair :)




	...well, the patch for too big. See
	http://twistedmatrix.com/~tv/lowlevel-networking.patch


-- 
:(){ :|:&};:



From glyph at twistedmatrix.com  Fri May 23 15:20:25 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 23 May 2003 17:20:25 -0400
Subject: [Twisted-Python] SMTP patch
In-Reply-To: <20030523165545.GA30365@meson.dyndns.org>
Message-ID: <5EA89FC8-8D64-11D7-AC3E-000393C9700E@twistedmatrix.com>

On Friday, May 23, 2003, at 12:55 PM, Jp Calderone wrote:

>> Oops!  As you imply, that should've been "200 <= code < 300".  I 
>> still don't
>> like the idea of constructing 100 integers, even lazily, just to test
>> bounds, though.
>
>   Neither do I.  Python should optimize it.  ;)

This reminds me of a story:

	http://www.ai.mit.edu/docs/articles/good-news/subsubsection3.2.2.4.html

It is easy to write code that is insanely slow in Python, but we should 
be aware of that and _not do it_, regardless of how cute 'in' looks. :)




From bob at redivi.com  Fri May 23 16:45:58 2003
From: bob at redivi.com (Bob Ippolito)
Date: Fri, 23 May 2003 18:45:58 -0400
Subject: [Twisted-Python] SMTP patch
In-Reply-To: <5EA89FC8-8D64-11D7-AC3E-000393C9700E@twistedmatrix.com>
Message-ID: <5200896E-8D70-11D7-9FAC-000A95686CD8@redivi.com>

On Friday, May 23, 2003, at 17:20 America/New_York, Glyph Lefkowitz  
wrote:

>
> On Friday, May 23, 2003, at 12:55 PM, Jp Calderone wrote:
>
>>> Oops!  As you imply, that should've been "200 <= code < 300".  I  
>>> still don't
>>> like the idea of constructing 100 integers, even lazily, just to test
>>> bounds, though.
>>
>>   Neither do I.  Python should optimize it.  ;)
>
> This reminds me of a story:
>
> 	http://www.ai.mit.edu/docs/articles/good-news/ 
> subsubsection3.2.2.4.html
>
> It is easy to write code that is insanely slow in Python, but we  
> should be aware of that and _not do it_, regardless of how cute 'in'  
> looks. :)

Didn't you hear?  The next big thing is to fantasize about nonexistent  
programming languages that make good compile and runtime decisions for  
you.  If we start writing code like that now, our programs *might*  
finish running by the time one of these magical languages comes into  
play.  Or, we could go the Microsoft route and just upgrade our  
computers every year so they don't have to optimize their crufty decade  
old word processor.

-bob




From glyph at twistedmatrix.com  Fri May 23 16:54:27 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 23 May 2003 18:54:27 -0400
Subject: [Twisted-Python] SMTP patch
In-Reply-To: <5200896E-8D70-11D7-9FAC-000A95686CD8@redivi.com>
Message-ID: <819F712E-8D71-11D7-AC3E-000393C9700E@twistedmatrix.com>

On Friday, May 23, 2003, at 06:45 PM, Bob Ippolito wrote:

> The next big thing is to fantasize about nonexistent programming 
> languages that make good compile and runtime decisions for you.

Hey wait!  I'm *really good* at that!  Let me tell you about this paper 
I read on linear objects...




From bob at redivi.com  Fri May 23 17:57:22 2003
From: bob at redivi.com (Bob Ippolito)
Date: Fri, 23 May 2003 19:57:22 -0400
Subject: [Twisted-Python] How to abuse generators, now that we're allowed to play with 2.2
Message-ID: <4B5AFAAA-8D7A-11D7-9FAC-000A95686CD8@redivi.com>

Here's some code I've been playing with the past two days.. part of a 
DAAP (Digital Audio Access Protocol, aka iTunes 4.0) client/server 
framework that I'm working on that's nowhere near releasable at the 
moment..

However, the gzip/gunzip streaming code and the example of generator 
abuse may be of immediate use to someone in the meantime, so here you 
go.

HTTPStream expects you to pass in a protocol that will receive the page 
incrementally.  Try passing in headers={'Accept-Encoding':'gzip'} and 
talking to your favorite server, it may actually decide to send you the 
page gzipped.. with the way the protocol stack works, your underlying 
protocol won't even know the difference.  It can of course be extended 
to support any encoding(s) with the current dispatch mechanism, but 
gzip is the only one I need at the moment.

As far as IterableBytestreamProtocol goes, you should be careful if you 
use it.. basically it will work perfectly until connectionLost happens, 
and then it'll start throwing back None to your read requests (which 
will never happen otherwise).  If you set iterateOnLoss = False, then 
your iterator will just stop running when you lose connection, which 
may or may not be desirable.  Use at your own risk, but feel free to 
improve on it if you have any suggestions.

-bob


-------------- next part --------------
A non-text attachment was scrubbed...
Name: gzstream.py
Type: application/octet-stream
Size: 8149 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030523/a7d9d5a6/attachment-0006.obj>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: util.py
Type: application/octet-stream
Size: 2150 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030523/a7d9d5a6/attachment-0007.obj>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: httpstream.py
Type: application/octet-stream
Size: 1554 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030523/a7d9d5a6/attachment-0008.obj>

From radix at twistedmatrix.com  Fri May 23 18:12:01 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 23 May 2003 20:12:01 -0400
Subject: [Twisted-Python] Lore bug with ".html"-stripping
Message-ID: <20030524001201.GA2887@toshi.anaprd01.md.comcast.net>

Ok, check out the source of 

http://twistedmatrix.com/documents/howto/web-overview.html

(doc/howto/web-overview.html in CVS)

Notice that there are two links to "woven.html". Now, check out the
source to

http://twistedmatrix.com/documents/howto/web-overview

, which is the result of lore-izing the .html. Notice that the first
link to woven.html has been properly munged to be simply "woven". The
one at the bottom of the page, however, hasn't. Anyone have any
ideas on why this is happening?

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From magnus at thinkware.se  Fri May 23 19:05:38 2003
From: magnus at thinkware.se (Magnus =?iso-8859-1?Q?Lyck=E5?=)
Date: Sat, 24 May 2003 03:05:38 +0200
Subject: [Twisted-Python] SMTP patch
In-Reply-To: <20030523235801.5802.58391.Mailman@pyramid.twistedmatrix.co
 m>
Message-ID: <5.2.1.1.0.20030524025817.01efd3d8@www.thinkware.se>

Peter Hansen wrote:
>Andrew Bennetts wrote:
> >
> > Oops!  As you imply, that should've been "200 <= code < 300".  I still 
> don't
> > like the idea of constructing 100 integers, even lazily, just to test
> > bounds, though.
> >
> > Of course, if the status code was left as a string, then you could 
> simply do
> > "if code.startswith('2'):"  :)
>
>if str(code).startswith('2'):  ??

It's much faster to do:

if code // 100 == 2:

That would also stop strange codes like 25 or 2300 (if they might
ever appear though some future mystery) to be mistaken as in the
range 200-299.


--
Magnus Lycka (It's really Lyck&aring;), magnus at thinkware.se
Thinkware AB, Sweden, www.thinkware.se
I code Python ~ The shortest path from thought to working program 




From andrew-twisted at puzzling.org  Fri May 23 19:27:53 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sat, 24 May 2003 11:27:53 +1000
Subject: [Twisted-Python] SMTP patch
In-Reply-To: <3ECE1AD4.C5973D75@engcorp.com>
References: <200305221448.h4MEmZw2004905@fido.strakt.com> <20030523010524.GA9978@frobozz> <20030523030253.GB28981@meson.dyndns.org> <20030523031335.GD9978@frobozz> <3ECE1AD4.C5973D75@engcorp.com>
Message-ID: <20030524012753.GB11368@frobozz>

On Fri, May 23, 2003 at 08:57:56AM -0400, Peter Hansen wrote:
> Andrew Bennetts wrote:
> > 
> > Of course, if the status code was left as a string, then you could simply do
> > "if code.startswith('2'):"  :)
> 
> if str(code).startswith('2'):  ??

Note the words "if the status code was left as a string"  :)

-Andrew.




From danielwaites at earthlink.net  Fri May 23 21:49:43 2003
From: danielwaites at earthlink.net (Daniel Waites)
Date: Fri, 23 May 2003 22:49:43 -0500
Subject: [Twisted-Python] update for MANIFEST.in
Message-ID: <3ECEEBD7.6070602@earthlink.net>

apply the following patch to MANIFEST.in in CVS to get "setup.py 
bdist_rpm" working again.

33,35c33
< recursive-include twisted *.c
< recursive-include twisted *.mgp *.html *.fla *.js *.swf
< recursive-include twisted/test *.pem *.message
---
 >

Note that RPM 4 (included in recent RedHat distros) will cause an 
assertion error at the end, because it builds a debuginfo rpm.  It still 
builds the rpms, though, under build/buildblahblah/rpm/RPMS .  This is a 
bug in Python 2.2 distutils.




From danielwaites at earthlink.net  Fri May 23 22:16:39 2003
From: danielwaites at earthlink.net (Daniel Waites)
Date: Fri, 23 May 2003 23:16:39 -0500
Subject: [Twisted-Python] Fixes for distutils (disregard previous mail)
Message-ID: <3ECEF227.7050906@earthlink.net>

Disregard my previous mail.  Sorry, but I got the diff backwards :(

The following patches will get "python setup.py bdist_rpm" from Python 
distutils working.  Also, I added some fixes for including the 
documentation in the rpm distribution.

Unfortunately, RPM 4 creates an extra debuginfo RPM when running 
rpmbuild.  This breaks bdist_rpm.py, since the distutils coder assumed 
only one binary RPM would be created.  This causes an assertion error, 
but the RPMs still get build before the error happens.  The RPMs are 
located in build/build-blahblah/rpm/RPMS/<arch>/


===================================================================
RCS file: /cvs/Twisted/MANIFEST.in,v
retrieving revision 1.9
diff -r1.9 MANIFEST.in
21a22
 > include ChangeLog
33c34,36
<
---
 > recursive-include twisted *.c
 > recursive-include twisted *.mgp *.html *.fla *.js *.swf
 > recursive-include twisted/test *.pem *.message
Index: setup.cfg
===================================================================
RCS file: /cvs/Twisted/setup.cfg,v
retrieving revision 1.3
diff -r1.3 setup.cfg
28c28,32
<
---
 > doc_files=ChangeLog
 >           CREDITS
 >           LICENSE
 >           README
 >           doc/


----------------

Daniel Waites
danielwaites at earthlink.net




From screwtape at froup.com  Sat May 24 02:16:42 2003
From: screwtape at froup.com (Tim Allen)
Date: Sat, 24 May 2003 18:16:42 +1000
Subject: [Twisted-Python] mktap web --resource-script
Message-ID: <0CEBED8C-8DC0-11D7-833E-003065D61A3E@froup.com>

I've started playing with Twisted Web as a way of trying to purge the 
negative emotions I've associated with server-side scripting due to 
working with ASP every day, but I've hit a bit of a snag.

I could just set up a web.tap file to server ~/public_html, but I 
thought it'd be cool to write the structure of my site in python with 
.putChild() (so I can put all the cool generation code in Python 
modules, rather than parse-every-time .rpy files). The basic script I 
started with looks like this:

	from twisted.web import server, resource as rs

	class IndexPage(rs.Resource):
     	def render(self, request):
         	return "<i>frangipanni</i>"

(I import resource as rs because occasionally I want to refer to 
rs.Resource after defining the magic 'resource' variable, and writing 
'resource.Resource' leads to all manner of pain.)

I made a file like the above called "index.rpy" with the following line 
at the end:

	resource = IndexPage()

and made a tap with:

	mktap web --resource-script=/path/to/index.py

and ran it with:

	twistd --nodaemon -f web.tap

Every time I went to http://localhost:8080/ I got a 404 error ("No Such 
Resource: No Such Child Resource"). Poking around with the IndexPage 
class, I discovered getChild was being called for a child named "", and 
failing.

So I tried making a script to start my website, taking the original 
script and adding:

	#!/usr/bin/env python
	from twisted.internet import app

to the top and:
	
	resource = IndexPage()

	site = server.Site(resource)
	application = app.Application('web')
	application.listenTCP(8080, site)
	application.run()

to the end. Same problem.

After mucking around, I changed the 'resource' line above to be:

	resource = rs.Resource()
	resource.putChild("", IndexPage())

...which worked! I then went back to my index.rpy file to try and use 
it to generate a tap. index.rpy now looks like this:

	from twisted.web import server, resource as rs

	class IndexPage(rs.Resource):
	    def render(self, request):
	        return "<i>frangipanni</i>"
	
	resource = rs.Resource()
	resource.putChild("", IndexPage())

...and still fails in exactly the same way.

I'm using CVS Twisted, and Python 2.2.2 on Mac OS X. What am I missing?




From cce at clarkevans.com  Sat May 24 06:55:32 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Sat, 24 May 2003 12:55:32 +0000
Subject: [Twisted-Python] protocol flows
Message-ID: <20030524125532.GA48258@doublegemini.com>

Ok.  Flow has gone through a rather largish growth 
period in the last week.  Improvments include:

  1.  It now supports protocols, ie, you can use generators
      to build protocols.   This is not complete, nor is it
      documented well, but that will come in time.

      Currently it only supports protocols with one callback, 
      but the flow.py module is quite close to supporting
      N callbacks via flow.Concurrent (which is still being
      tested and refined).

      The flow support for protocols still has some issues
      hiding errors.  I've done quite a bit to make exceptions
      visible... but I'm still a twisted newbie, and a few are
      slipping through the cracks (or rather hiding between
      the cracks).   The process of making user-level errors
      clearly reported is on-going.  

  2.  It has quite a few speed improvments, overall flow isn't
      fast beacuse it basically implements cooperative 
      multitasking.  Generally, given noop functions, flow
      is about 5-7x slower than direct generators.  However,
      most items are not noop, so the actual factor in practice
      is more like 20% to 2x slower.   Not a bad price for 
      relatively easy to read code.

      I'm not sure how many optimizations are possible; one 
      recent optimization speeded up cases whith lots of little
      results (but slowed larger more infrequent results).  This
      optimization was due to exarkun's suggestion.   Anyway, 
      this change I'm certain has introduced bugs, but they will
      be squashed in time.

      Of course, writing the whole module in "C" would give a 
      big bonus.   However, flow must reach serious stability
      and a large user base before that is taken on.  I think
      that the speedup from C coding would be quite significant,
      but not earth-shattering.

  3.  A new Callback stage was added.  This was needed for 
      protocol support, but can be useful standalone.   Other
      stages include a List and String stage.  Not that those
      are horribly useful, but they do help to illustrate 
      what is going on, so I figured they'd be nice to have.

  4.  Some serious refactorings.  Most importantly in this one
      is a CallLater instruction.  flow.Threaded is much faster
      with this change.   If you were following the source, I'd
      start from the top down again.   

A few things to note:

  A.  Some of the interface has changed for those not using
      for-each.   In particular, the state functions (isFailure, etc.)
      are gone as they were horribly slow.  Furthermore, stage.result
      is now stage.results.   

      If you were using next() explicitly or implicitly via the
      for-loop, then you will have no problems; as this aspect of
      the interface hasn't changed.

  B.  This module is approaching stability.  I don't expect many 
      more changes... so, if you have comments.  Please... let's
      hear them.

  C.  I don't know if/when flow will be added to twisted, so
      it's still a use-at-yer-risk

Short-term plans:

  I.   Get the protocol to support multiple callbacks

  II.  Add more regression tests, especially ones with
       icky user-level failures to make sure that errors
       are being propigated.

  III. Start writing a few 'flow-filters' and such that work
       with flow protocols.  For instance, one filter could
       be the equivalent of LineReceiver.  Perhaps refactor
       common code into a separate module...

  IV.  Update/improve the documentation, flow.html


Here is an echo "flowprotocol":

        from __future__ import generators
        import flow
        from twisted.internet import protocol, reactor
        PORT = 8392
        
        print "client                   server"
        print "-------------------      ---------------------"
        def echoServer(conn):
            print "                         connected, now wait for client"
            yield conn
            print "                         client responded"
            for data in conn:
                print "                         received '%s', sending back" %
        data
                yield data
                print "                         waiting for client again"
                yield conn
            print "                         disconnected"
        
        server = protocol.ServerFactory()
        server.protocol = flow.makeProtocol(echoServer)
        reactor.listenTCP(PORT,server)
        
        def echoClient(conn):
            print "connect and send"
            yield "Hello World"    # sending data
            print "waiting for server"
            yield conn
            print "received '%s'" % conn.next()
            print "sending more"
            yield "Another Line"
            print "waiting for server"
            yield conn
            print "received '%s'" % conn.next()
            reactor.callLater(0,reactor.stop)
            print "disconnecting"
        
        client = protocol.ClientFactory()
        client.protocol = flow.makeProtocol(echoClient)
        reactor.connectTCP("localhost", PORT, client)
        
        reactor.run()

Which produces...
        
        client                   server
        -------------------      ---------------------
        connect and send
        waiting for server
                                 connected, now wait for client
                                 client responded
                                 received 'Hello World', sending back
                                 waiting for client again
        received 'Hello World'
        sending more
        waiting for server
                                 received 'Another Line', sending back
                                 waiting for client again
        received 'Another Line'
        disconnecting
                                 disconnected
        

That's it.

Clark       
 



From jml at mumak.net  Sun May 25 05:27:07 2003
From: jml at mumak.net (Jonathan M. Lange)
Date: Sun, 25 May 2003 21:27:07 +1000
Subject: [Twisted-Python] Getting Rid of Application in a Compatible Way
In-Reply-To: <20030523070247.10334.qmail@green.zadka.com>
References: <20030523070247.10334.qmail@green.zadka.com>
Message-ID: <20030525112707.GB6613@mumak.net>

On Fri, May 23, 2003 at 07:02:47AM -0000, Moshe Zadka wrote:
Subject: Getting rid of Application
>
> I suggest to write ApplicationService classes which look like:
> class TCPListener(ApplicationService):
>   ...
> Now, instead of application.listenTCP we can use
> 
> TCPListener(8080, server.Site(resource), "foo").setServiceParent(application)
> 

Why do we want to get rid of Application?

jml
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030525/0b528b7b/attachment.sig>

From m at moshez.org  Sat May 24 23:12:53 2003
From: m at moshez.org (Moshe Zadka)
Date: 25 May 2003 05:12:53 -0000
Subject: [Twisted-Python] Getting Rid of Application in a Compatible Way
In-Reply-To: <20030525112707.GB6613@mumak.net>
References: <20030525112707.GB6613@mumak.net>, <20030523070247.10334.qmail@green.zadka.com>
Message-ID: <20030525051253.13590.qmail@green.zadka.com>

On Sun, 25 May 2003, jml at mumak.net (Jonathan M. Lange) wrote:

> Why do we want to get rid of Application?

Because it's a mess. An Application should be nothing more than a
MultiService. Then you can *really* partition your applications however
you want to.
-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From itamar at itamarst.org  Sun May 25 07:15:00 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 25 May 2003 09:15:00 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] Boatloads of things, from Anders Hammarquist.
In-Reply-To: <E19JUFg-0000tf-00@pyramid.twistedmatrix.com>
References: <E19JUFg-0000tf-00@pyramid.twistedmatrix.com>
Message-ID: <20030525091500.7a938028.itamar@itamarst.org>

Move the LimitedLog to twisted.python.logfile, maybe? Seems like a
better place. 

And many thanks to JP for finally checking this in.



From itamar at itamarst.org  Sun May 25 07:17:44 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 25 May 2003 09:17:44 -0400
Subject: [Twisted-Python] Fixes for distutils (disregard previous mail)
In-Reply-To: <3ECEF227.7050906@earthlink.net>
References: <3ECEF227.7050906@earthlink.net>
Message-ID: <20030525091744.120cc5dd.itamar@itamarst.org>

On Fri, 23 May 2003 23:16:39 -0500
Daniel Waites <danielwaites at earthlink.net> wrote:

> The following patches will get "python setup.py bdist_rpm" from Python
> 
> distutils working.  Also, I added some fixes for including the 
> documentation in the rpm distribution.

Thanks. However, we do have a .spec somewhere in the tarball - have you
tried it out?

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From itamar at itamarst.org  Sun May 25 07:27:05 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 25 May 2003 09:27:05 -0400
Subject: [Twisted-Python] Serving HTTP requests (was: Bug?)
In-Reply-To: <20030523050759.GH9978@frobozz>
References: <3ECC9374.50500@home.wari.org>
	<3ECCF4C7.3020406@home.wari.org>
	<3ECDA14E.8020604@home.wari.org>
	<20030523044013.GF9978@frobozz>
	<3ECDAA64.6040500@home.wari.org>
	<20030523050759.GH9978@frobozz>
Message-ID: <20030525092705.088cb7e3.itamar@itamarst.org>

in 0.9, there is no version, you do:

   GET /foo

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From andrew-twisted at puzzling.org  Sun May 25 08:38:41 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 26 May 2003 00:38:41 +1000
Subject: [Twisted-Python] Serving HTTP requests (was: Bug?)
In-Reply-To: <20030525092705.088cb7e3.itamar@itamarst.org>
References: <3ECC9374.50500@home.wari.org> <3ECCF4C7.3020406@home.wari.org> <3ECDA14E.8020604@home.wari.org> <20030523044013.GF9978@frobozz> <3ECDAA64.6040500@home.wari.org> <20030523050759.GH9978@frobozz> <20030525092705.088cb7e3.itamar@itamarst.org>
Message-ID: <20030525143841.GA511@frobozz>

On Sun, May 25, 2003 at 09:27:05AM -0400, Itamar Shtull-Trauring wrote:
> in 0.9, there is no version, you do:
> 
>    GET /foo

Sure, but what clients still use 0.9?  HTTP/1.0 is simple enough that I
wouldn't expect much software to use 0.9 anymore.

Also, it seems unlikely to me that sending "POST  HTTP/1.0" would be the
product of a HTTP/0.9 client, so I think there's still some room for
improvement.  Perhaps check that if the 'path' starts with "HTTP/", and if
so don't treat it as HTTP/0.9.  I'll make a patch if people think this
sounds sane.

-Andrew.




From glyph at twistedmatrix.com  Sun May 25 15:19:23 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 25 May 2003 17:19:23 -0400
Subject: [Twisted-Python] Serving HTTP requests (was: Bug?)
In-Reply-To: <20030525143841.GA511@frobozz>
Message-ID: <8E421D5E-8EF6-11D7-AC3E-000393C9700E@twistedmatrix.com>

On Sunday, May 25, 2003, at 10:38 AM, Andrew Bennetts wrote:

> Perhaps check that if the 'path' starts with "HTTP/", and if
> so don't treat it as HTTP/0.9.

This sounds rather specific to one problem.  It would seem more 
reasonable to me to check whether the path starts with '/' - I think 
this is mandated by the spec?




From exarkun at intarweb.us  Sun May 25 15:27:30 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Sun, 25 May 2003 17:27:30 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] Boatloads of things, from Anders Hammarquist.
In-Reply-To: <20030525091500.7a938028.itamar@itamarst.org>
References: <E19JUFg-0000tf-00@pyramid.twistedmatrix.com> <20030525091500.7a938028.itamar@itamarst.org>
Message-ID: <20030525212730.GA17491@meson.dyndns.org>

On Sun, May 25, 2003 at 09:15:00AM -0400, Itamar Shtull-Trauring wrote:
> Move the LimitedLog to twisted.python.logfile, maybe? Seems like a
> better place. 

  Probably.  I'm pondering whether it will actually stay in the long term,
though.  Sometime soon we will have SMTP auth, and I'd like to avoid seeing
passwords or password hashes ending up in logfiles.

  Anders, any thoughts on this?

  Jp

-- 
Lowery's Law:
        If it jams -- force it.  If it breaks, it needed replacing anyway.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030525/84ba1f34/attachment.sig>

From itamar at itamarst.org  Sun May 25 18:28:09 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 25 May 2003 20:28:09 -0400
Subject: [Twisted-Python] Serving HTTP requests (was: Bug?)
In-Reply-To: <8E421D5E-8EF6-11D7-AC3E-000393C9700E@twistedmatrix.com>
References: <20030525143841.GA511@frobozz>
	<8E421D5E-8EF6-11D7-AC3E-000393C9700E@twistedmatrix.com>
Message-ID: <20030525202809.2afd7c67.itamar@itamarst.org>

On Sun, 25 May 2003 17:19:23 -0400
Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> This sounds rather specific to one problem.  It would seem more 
> reasonable to me to check whether the path starts with '/' - I think 
> this is mandated by the spec?

Oh, we need to do something to fix it. But, how about just dropping 0.9
support?
(I don't want to check for / since that means reusing protocol for
proxies is harder.)

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From dalke at dalkescientific.com  Sun May 25 22:01:57 2003
From: dalke at dalkescientific.com (Andrew Dalke)
Date: Sun, 25 May 2003 22:01:57 -0600
Subject: [Twisted-Python] SOAP and XML-RPC stuff
Message-ID: <CBA5E533-8F2E-11D7-A8E6-000393C92466@dalkescientific.com>

http://www.twistedmatrix.com/documents/howto/xmlrpc

Has a link under

  "In addition, XML-RPC published methods can return  
twisted.python.defer.Deferred"

The last word is hyperlinked to
    
http://twistedmatrix.com/documents/TwistedDocs/current/api/public/ 
twisted.python.defer.Deferred.html

which does not exist.
   ==
http://twistedmatrix.com/documents/TwistedDocs/current/api/public/ 
twisted.web.xmlrpc.XMLRPC.html
says
  Faults,  Binray, Boolean, DateTime, Deferreds, or Handler instances.

typo: "Binray" --> "Binary"

   ==

Here's a patch to work with SOAPpy 0.10

--- /usr/local/lib/python2.3/site-packages/twisted/web/soap.py  Sun May  
25 21:46:12 2003
+++ /Users/dalke/ftps/Twisted-1.0.5/twisted/web/soap.py Wed Oct 23  
19:55:20 2002
@@ -13,14 +13,11 @@
  """

  # SOAPpy
-try:
-  import SOAPpy as SOAP
-except ImportError:
-  import SOAP
+import SOAP

-  # fix 2.2 issues with SOAP
-  SOAP.SOAPBuilder.dump_str = SOAP.SOAPBuilder.dump_string
-  SOAP.SOAPBuilder.dump_dict = SOAP.SOAPBuilder.dump_dictionary
+# fix 2.2 issues with SOAP
+SOAP.SOAPBuilder.dump_str = SOAP.SOAPBuilder.dump_string
+SOAP.SOAPBuilder.dump_dict = SOAP.SOAPBuilder.dump_dictionary

  # twisted imports
  from twisted.web import server, resource


Or, in short version, change

# SOAPpy
import SOAP

to

# SOAPpy
try:
   import SOAPpy as SOAP
except ImportError:
   import SOAP

   # fix 2.2 issues with SOAP
   SOAP.SOAPBuilder.dump_str = SOAP.SOAPBuilder.dump_string
   SOAP.SOAPBuilder.dump_dict = SOAP.SOAPBuilder.dump_dictionary

(I checked - 0.10 handles the typename changes from 2.2)


    ===

How do I run both an XML-RPC and a SOAP server on the same server?
I tried something like

def main():
     from twisted.internet.app import Application
     app = Application("xmlrpc")

     r = XMLRPC_Calc()
     app.listenTCP(7080, server.Site(r))

     r = SOAP_Calc()
     app.listenTCP(7080, server.Site(r))

     return app

application = main()

if __name__ == "__main__":
     application.run(save=0)


But that doesn't work - the SOAP requests go to the XML-RPC server.
Is there some way to say that "/RPC2" is for XML-RPC and that "/SOAP"
is for SOAP?

					Andrew
					dalke at dalkescientific.com




From stuart.hungerford at anu.edu.au  Mon May 26 00:50:58 2003
From: stuart.hungerford at anu.edu.au (Stuart Hungerford)
Date: Mon, 26 May 2003 16:50:58 +1000
Subject: [Twisted-Python] getProcessOutput ok to use in a DeferredList?
Message-ID: <5.2.0.9.0.20030526164220.00b58628@anusf.anu.edu.au>

Hi all,

I have an application that uses a bunch of Deferred's to handle
blocking system calls and converting the results of those calls
to HTML.

I'd like to make use of the very neat DeferredList and also the
utility function getProcessOutput(). My understanding is that
getProcessOutput() returns a Deferred that returns a string of
the process output.

Are there any issues with passing a list of getProcessOutput()
results to a DeferredList?  I understand the DeferredList still
needs its own callback registered for completion of the list of
deferreds.

My initial tests with this setup just seem to suspend and not
return, which is almost certainly something I've misunderstood
in using Deferreds.


Has anyone done this before?






Cheers,

Stu

--
:: Stuart Hungerford (stuart.hungerford at anu.edu.au)
:: ANU Internet Futures Group




From andrew-twisted at puzzling.org  Mon May 26 01:15:34 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 26 May 2003 17:15:34 +1000
Subject: [Twisted-Python] SOAP and XML-RPC stuff
In-Reply-To: <CBA5E533-8F2E-11D7-A8E6-000393C92466@dalkescientific.com>
References: <CBA5E533-8F2E-11D7-A8E6-000393C92466@dalkescientific.com>
Message-ID: <20030526071534.GA5345@frobozz>

On Sun, May 25, 2003 at 10:01:57PM -0600, Andrew Dalke wrote:
> http://www.twistedmatrix.com/documents/howto/xmlrpc
> 
> Has a link under
> 
>  "In addition, XML-RPC published methods can return  
> twisted.python.defer.Deferred"
> 
> The last word is hyperlinked to
>    
> http://twistedmatrix.com/documents/TwistedDocs/current/api/public/ 
> twisted.python.defer.Deferred.html
> 
> which does not exist.

Thanks -- fixed in CVS.

> http://twistedmatrix.com/documents/TwistedDocs/current/api/public/ 
> twisted.web.xmlrpc.XMLRPC.html
> says
>  Faults,  Binray, Boolean, DateTime, Deferreds, or Handler instances.
> 
> typo: "Binray" --> "Binary"

Ditto.

> Here's a patch to work with SOAPpy 0.10

I'll let someone else more knowledgeable comment on this.

> How do I run both an XML-RPC and a SOAP server on the same server?
> I tried something like
> 
> def main():
>     from twisted.internet.app import Application
>     app = Application("xmlrpc")
> 
>     r = XMLRPC_Calc()
>     app.listenTCP(7080, server.Site(r))
> 
>     r = SOAP_Calc()
>     app.listenTCP(7080, server.Site(r))

Obviously you can't have multiple things listening on port 7080.  Perhaps
this should raise an exception, though, so as to not seem like it can.

Here you've constructed two seperate server.Site instances, i.e. Twisted Web
HTTP servers, but what you want is one Twisted Web server that does multiple
things.

> But that doesn't work - the SOAP requests go to the XML-RPC server.
> Is there some way to say that "/RPC2" is for XML-RPC and that "/SOAP"
> is for SOAP?

I suspect you can probably do:

    from twisted.web.resource import Resource
    
    root = Resource()           # An empty resource
    site = server.Site(root)
    root.putChild('RPC2', XMLRPC_Calc())
    root.putChild('SOAP', SOAP_Calc())
    
    app.listenTCP(7080, site)

-Andrew.




From andrew-twisted at puzzling.org  Mon May 26 01:28:23 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 26 May 2003 17:28:23 +1000
Subject: [Twisted-Python] getProcessOutput ok to use in a DeferredList?
In-Reply-To: <5.2.0.9.0.20030526164220.00b58628@anusf.anu.edu.au>
References: <5.2.0.9.0.20030526164220.00b58628@anusf.anu.edu.au>
Message-ID: <20030526072823.GB5345@frobozz>

On Mon, May 26, 2003 at 04:50:58PM +1000, Stuart Hungerford wrote:

> I'd like to make use of the very neat DeferredList and also the
> utility function getProcessOutput(). My understanding is that
> getProcessOutput() returns a Deferred that returns a string of
> the process output.

Your understanding is correct.

> Are there any issues with passing a list of getProcessOutput()
> results to a DeferredList?  I understand the DeferredList still
> needs its own callback registered for completion of the list of
> deferreds.

There's nothing special going on.  As far as a DeferredList is concerned,
all Deferreds are the same.  Where the Deferred comes from is irrelevant.

> My initial tests with this setup just seem to suspend and not
> return, which is almost certainly something I've misunderstood
> in using Deferreds.

I suspect you're right, you probably are misunderstanding something.  It's
hard to say what, though, without more information.  (But when something is
mysteriously freezing, it's hard to know what information to give!)

A DeferredList, by default, calls its callbacks *only when all of its
Deferreds have fired*.  (If some of the Deferreds fail, that's ok, just so
long as they all call their callback/errback at some point).  A DeferredList
has no way of reporting partial results.

I'm going to guess what your problem might be, based on a problem I once
had.  :)

If you have multiple Deferreds, some "depend" on others, DeferredList's
default behaviour isn't what you want.  By "depend" I mean if Deferred A
fails (and so fires its errback, not callback), then Deferred B will never
be called, i.e. B depends on A.  (This is not official terminology! :).

In that case, you probably want to use the fireOnOneErrback flag of
DeferredList.  This changes the behaviour of DeferredList so that it will
fire its callbacks as soon as either:
    - All its Deferreds have fired their callbacks, or
    - any of its Deferreds have fired an errback.

Does any of this help you?

-Andrew.




From iko at cd.chalmers.se  Mon May 26 06:06:15 2003
From: iko at cd.chalmers.se (Anders Hammarquist)
Date: Mon, 26 May 2003 14:06:15 +0200
Subject: [Twisted-Python] Re: [Twisted-commits] Boatloads of things, from Anders Hammarquist. 
In-Reply-To: <20030525212730.GA17491@meson.dyndns.org> 
References: <E19JUFg-0000tf-00@pyramid.twistedmatrix.com> <20030525091500.7a938028.itamar@itamarst.org> <20030525212730.GA17491@meson.dyndns.org> 
Message-ID: <200305261206.h4QC6G225594@haddock.cd.chalmers.se>

In a message of Sun, 25 May 2003 17:27:30 EDT, Jp Calderone writes:
>On Sun, May 25, 2003 at 09:15:00AM -0400, Itamar Shtull-Trauring wrote:
>> Move the LimitedLog to twisted.python.logfile, maybe? Seems like a
>> better place.=20
>
>  Probably.  I'm pondering whether it will actually stay in the long term,
>though.  Sometime soon we will have SMTP auth, and I'd like to avoid seeing
>passwords or password hashes ending up in logfiles.

Well, the idea isn't that it should end up in a log file, but rather
be used in "failed mail" reporting (which is why I didn't put it into
logfile. We discussed this after I send one of the first revisions of
the patch IIRC). But it needs reworking for when we add AUTH and TLS
support so that we only save relevant info.

/Anders

-- 
 -- Of course I'm crazy, but that doesn't mean I'm wrong.
Anders Hammarquist                                  | iko at cd.chalmers.se
Physics student, Chalmers University of Technology, | Hem: +46 31 88 48 50
G|teborg, Sweden.           RADIO: SM6XMM and N2JGL | Mob: +46 707 27 86 87



From 2002 at weholt.org  Mon May 26 08:26:31 2003
From: 2002 at weholt.org (Thomas Weholt)
Date: Mon, 26 May 2003 16:26:31 +0200
Subject: [Twisted-Python] HowTo  -- load a business-object  in a Twisted Web Server ??
Message-ID: <002701c32392$cf876460$0401a8c0@razor>

I need to load a business-object in a Twisted Web server serving static content and rpys, and it should be available in all parts of the application. It has to be able to run a method or methods at specified intervals, fetching some files from the net, scanning a filesystem or extracting data from a database, which in return will be available in the business-object in the web-server. What is the Twisted-way of doing this? The tasks the business-object will perform from time to time can be time consuming and probably blocking too. 

Should a start it in a seperate thread? What ? I need clues or a small example.

best regards and thanks in advance,
Thomas Weholt
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20030526/a422e850/attachment.html>

From m at moshez.org  Mon May 26 10:08:54 2003
From: m at moshez.org (Moshe Zadka)
Date: 26 May 2003 16:08:54 -0000
Subject: [Twisted-Python] HowTo  -- load a business-object  in a Twisted Web Server ??
In-Reply-To: <002701c32392$cf876460$0401a8c0@razor>
References: <002701c32392$cf876460$0401a8c0@razor>
Message-ID: <20030526160854.23615.qmail@green.zadka.com>

On Mon, 26 May 2003, "Thomas Weholt" <2002 at weholt.org> wrote:
 
> I need to load a business-object in a Twisted Web server serving static 
> content and rpys, and it should be available in all parts of the 
> application. It has to be able to run a method or methods at specified 
> intervals, fetching some files from the net, scanning a filesystem or 
> extracting data from a database, which in return will be available in 
> the business-object in the web-server. What is the Twisted-way of doing 
> this? The tasks the business-object will perform from time to time can 
> be time consuming and probably blocking too.
> 
> Should a start it in a seperate thread? What ? I need clues or a small 
> example.

Please don't post in HTML to the list.

The correct Twisted way is to have an ApplicationService which does
all that, keeping track of tasks, and which has a "resource" attribute.
Deployment of that code is flexible, as it should be: one way would
be to add the ApplicationService to the Application, and in the .rpy
get the application, get the service by name and get the resource
from it.

I seriously doubt you "need" to perform blocking tasks, at least
in your code. Database can be abstracted with adbapi, scanning
a file system can easily be partitioned into small tasks, and
then you can use reactor.callLater(0,) to stay responsive and fetching
files from the net is easy in a nonblocking way (see web.client)
-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From Olivier.POYEN at clf-dexia.com  Mon May 26 10:55:54 2003
From: Olivier.POYEN at clf-dexia.com (POYEN OP Olivier (DCL))
Date: Mon, 26 May 2003 18:55:54 +0200
Subject: [Twisted-Python] [Tutor] Help on personnal Proxy
Message-ID: <8963D6370B323E4AA3241200F0EAF731235642@FCEXVEXM002.dcl.int.dexwired.net>


Hi all, 


I tried to read some parts of the how-to, tried to google around in order to create a simple personnal web proxy with no luck. 

For now, I don't want to do anything special, but having a proxy on my localhost, watching for my connections. Later, I may want to enhance its functionnality (a la "proxomitron")

I thought that twisted may certainly be the perfect tool to do that, and I thought this would be a good way to start using it. 

I know about the proxy class, but, when I try to use it:

(taken from Proxy class docstring):

from twisted.protocols import http
from twisted.web import proxy
from twisted.internet import reactor


f=http.HTTPFactory()
f.HTTPChannel=proxy.Proxy
reactor.listenTCP(8765,f)
reactor.run()

I then try an 'export http_proxy=http://localhost:8765' and 
wget http://localhost:8080 (where a nice twisted.web server is waiting)

Not working. 
Even a telnet on port 8765 shown that nothing is responding.

I then thougt about proxy.Proxy which perhaps need to be instanciated:

f.HTTPChannel=proxy.Proxy()

Same punition.

Then, I thougth that I certainly need to subclass my proxy to have it do some stuff: 

class myProx(proxy.Proxy):
    def connectionMade(self,*args):
        print "cool...."

    def dataReceived(self,*args):
        print args

I then again try with myProx *and*ù myProx().
Nothing worked.


Well, I search for anything on the mailing list archive, but with no luck.


Do I have to say that any help or RTFM would be appreciated ! 


Thanx in advance,


OPQ
-------------- next part --------------
-----------------------------------------------------------------

Ce message est confidentiel ; son contenu ne represente en aucun

cas un engagement de la part de Dexia Credit Local ou de Dexia

CLF Banque. Toute publication, utilisation ou diffusion, meme

partielle, doit etre autorisee prealablement par l'emetteur. Si

vous n'etes pas destinataire de ce message, merci d'en avertir

immediatement l'expediteur.



This message is confidential ; its contents do not constitute a

commitment by Dexia Credit Local or Dexia CLF Banque. Any

unauthorised disclosure, use or dissemination, either whole or

partial, is prohibited. If you are not the intended recipient of

the message, please notify the sender immediately.

-----------------------------------------------------------------

Consultez notre site internet www.dexia-clf.fr

La cle d'une gestion optimisee du secteur public local

-----------------------------------------------------------------

From dalke at dalkescientific.com  Mon May 26 12:24:15 2003
From: dalke at dalkescientific.com (Andrew Dalke)
Date: Mon, 26 May 2003 12:24:15 -0600
Subject: [Twisted-Python] Re: SOAP and XML-RPC stuff
Message-ID: <417D72E8-8FA7-11D7-A91C-000393C92466@dalkescientific.com>

Andrew Bennetts:
 > Obviously you can't have multiple things listening on port 7080.  
Perhaps
 > this should raise an exception, though, so as to not seem like it can.

I figured the first was the case, but I didn't know if there was some
way to support content negotiation appropriately, so that a SOAP request
on a given URL goes to one handler and an XML-RPC request on the same
URL goes to another handler.

(Someday I would like to play around more with conneg, so I think
this is cute, but the realistic side of me says it's a bad idea.)


 > I suspect you can probably do:
 >    from twisted.web.resource import Resource
 >
 >    root = Resource()           # An empty resource
  ...

Bingo!  It works now, and I'm one step further on my way to
Twisted Enlightenment.  Thanks Andrew!

BTW, I looked up twisted.web.resource on the doc page at

http://www.twistedmatrix.com/documents/TwistedDocs/current/api/

I don't see 'twisted.web.resource' in the 'Everything' section
in the lower left, which means it should be labeled 'Not Quite
Everything.'  ;)

					Andrew
					dalke at dalkescientific.com




From heiko at ph0enix.homelinux.org  Mon May 26 13:14:42 2003
From: heiko at ph0enix.homelinux.org (Heiko Wundram)
Date: 26 May 2003 21:14:42 +0200
Subject: [Twisted-Python] Safe Pickling using banana and jelly
Message-ID: <1053976482.890.14.camel@d168.stw.stud.uni-saarland.de>

Hi to all!

Maybe this question has been answered elsewhere, but it doesn't seem to
be stated anywhere in the Twisted HOWTO's or any other documentation
safe the overall stance that jelly and banana are "replacements for
pickle aimed at safety, not speed":

Is unpickling _untrusted_ network data using banana and jelly a safe
thing? After a length check on the data has been done, discarding all
messages that are over 50k in size, of course... :)

Thanks for any reply. :)

Heiko.




From dalke at dalkescientific.com  Mon May 26 14:41:34 2003
From: dalke at dalkescientific.com (Andrew Dalke)
Date: Mon, 26 May 2003 14:41:34 -0600
Subject: [Twisted-Python] Safe Pickling using banana and jelly
In-Reply-To: <1053976482.890.14.camel@d168.stw.stud.uni-saarland.de>
Message-ID: <707F4930-8FBA-11D7-A91C-000393C92466@dalkescientific.com>

Heiko Wundram wrote:
> Is unpickling _untrusted_ network data using banana and jelly a safe
> thing? After a length check on the data has been done, discarding all
> messages that are over 50k in size, of course... :)

Having only used Twisted for about a day, cumulative, I am not
the best person to answer that.  However, it does seem that it
has a security hole I pointed out in Python's pickle package,
which is one of the reasons pickle is not to be trusted.

In brief, jelly will unjelly anything, including objects which
do destructive acts in the deallocator.  And some exist in
the standard Python libs.  Here's an example.

 >>> from twisted.spread import jelly
 >>> import tempfile
 >>> import StringIO
 >>> x = tempfile._TemporaryFileWrapper(StringIO.StringIO(""), "/blah")
 >>> del x
Exception exceptions.OSError: (2, 'No such file or directory', '/blah') 
in <bound method _TemporaryFileWrapper.__del__ of 
<tempfile._TemporaryFileWrapper instance at 0x626c60>> ignored
 >>> x = tempfile._TemporaryFileWrapper(StringIO.StringIO(""), "/blah")
 >>> jelly.jelly(x)
['tempfile._TemporaryFileWrapper', ['dictionary', ['close_called', 
['boolean', 'false']], ['name', '/blah'], ['file', 
['StringIO.StringIO', ['dictionary', ['softspace', 0], ['buflist', 
['list']], ['pos', 0], ['len', 0], ['closed', 0], ['buf', '']]]]]]
 >>> q = _
 >>> del x
Exception exceptions.OSError: (2, 'No such file or directory', '/blah') 
in <bound method _TemporaryFileWrapper.__del__ of 
<tempfile._TemporaryFileWrapper instance at 0x626c60>> ignored
 >>> jelly.unjelly(q)
<tempfile._TemporaryFileWrapper instance at 0x626c60>
 >>> 1
Exception exceptions.OSError: (2, 'No such file or directory', '/blah') 
in <bound method _TemporaryFileWrapper.__del__ of 
<tempfile._TemporaryFileWrapper instance at 0x626c60>> ignored
1
 >>>

However, I don't know enough about how jellied data
structures are handled when they come over the wire to
know if they are indeed prone to this sort of attack.
Eg, one solution is to state that only certain objects can
be unpickled, which is the suggested solution for Python's
stock pickles.

					Andrew
					dalke at dalkescientific.com




From itamar at itamarst.org  Mon May 26 15:43:17 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 26 May 2003 17:43:17 -0400
Subject: [Twisted-Python] Safe Pickling using banana and jelly
In-Reply-To: <707F4930-8FBA-11D7-A91C-000393C92466@dalkescientific.com>
References: <1053976482.890.14.camel@d168.stw.stud.uni-saarland.de>
	<707F4930-8FBA-11D7-A91C-000393C92466@dalkescientific.com>
Message-ID: <20030526174317.216d7dd9.itamar@itamarst.org>

On Mon, 26 May 2003 14:41:34 -0600
Andrew Dalke <dalke at dalkescientific.com> wrote:

> Having only used Twisted for about a day, cumulative, I am not
> the best person to answer that.  However, it does seem that it
> has a security hole I pointed out in Python's pickle package,
> which is one of the reasons pickle is not to be trusted.
> 
> In brief, jelly will unjelly anything, including objects which
> do destructive acts in the deallocator.  And some exist in
> the standard Python libs.  Here's an example.

This is... inaccurate. Jelly has security policies. The one used in the
jelly module's jelly() and unjelly() module-level functions is setup by
default for allowing anything, so as to make using it easy.

However, the security policy for jelly in the network protocol PB only
allows deserializing classes which have been explicitly approved by the
user.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From radix at twistedmatrix.com  Mon May 26 16:31:06 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 26 May 2003 18:31:06 -0400
Subject: [Twisted-Python] Safe Pickling using banana and jelly
In-Reply-To: <707F4930-8FBA-11D7-A91C-000393C92466@dalkescientific.com>; from dalke@dalkescientific.com on Mon, May 26, 2003 at 16:41:34 -0400
References: <707F4930-8FBA-11D7-A91C-000393C92466@dalkescientific.com>
Message-ID: <20030526223106.GC16017@toshi.anaprd01.md.comcast.net>

On 2003.05.26 16:41, Andrew Dalke wrote:
> Heiko Wundram wrote:
> > Is unpickling _untrusted_ network data using banana and jelly a safe
> > thing? After a length check on the data has been done, discarding all
> > messages that are over 50k in size, of course... :)
> 
> Having only used Twisted for about a day, cumulative, I am not
> the best person to answer that.  However, it does seem that it
> has a security hole I pointed out in Python's pickle package,
> which is one of the reasons pickle is not to be trusted.
> 
> In brief, jelly will unjelly anything, including objects which
> do destructive acts in the deallocator.  And some exist in
> the standard Python libs.  Here's an example.

Well, by default PB (which I assume is what Heiko is using) does
not allow sending of arbitrary objects, only objects that have been 
registered -- and it's easy to make jelly disable arbitrary objects as 
well.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From dalke at dalkescientific.com  Mon May 26 17:29:06 2003
From: dalke at dalkescientific.com (Andrew Dalke)
Date: Mon, 26 May 2003 17:29:06 -0600
Subject: [Twisted-Python] Safe Pickling using banana and jelly
In-Reply-To: <20030526174317.216d7dd9.itamar@itamarst.org>
Message-ID: <D7D0C244-8FD1-11D7-A91C-000393C92466@dalkescientific.com>

Itamar Shtull-Trauring:
> This is... inaccurate. Jelly has security policies. The one used in the
> jelly module's jelly() and unjelly() module-level functions is setup by
> default for allowing anything, so as to make using it easy.
>
> However, the security policy for jelly in the network protocol PB only
> allows deserializing classes which have been explicitly approved by the
> user.

Mmmm, I see the security code, and it looks safe enough against my
attack.  (I saw the code originally, but I went the wrong way down
an if-statement.  I saw a __class__ being created, but hadn't realized
what it meant to be unjellyable.)

Here's another attack: what happens if I pass back a string which
encodes [[[[[[[[[[ ... ]]]]]]]]]] where there are enough []s to
break the recursion limit?

 >>> banana.encode(jelly.jelly([]))
'\x01\x80\x04\x82list'
 >>> banana.encode(jelly.jelly([[]]))
'\x02\x80\x04\x82list\x01\x80\x04\x82list'
 >>> banana.encode(jelly.jelly([[[]]]))
'\x02\x80\x04\x82list\x02\x80\x04\x82list\x01\x80\x04\x82list'
 >>>

The safe unjelly code uses a recursive call, so there can be at
most 1,000 levels.  Each level takes 8 characters, so I can
break the recursion limit at 8,000 bytes, and generate a
RuntimeError.  It looks like this exception is caught in
an 'except:' in _recvMessage, so that's okay (except for a
few OSes with a small stack size) ... except what happens
if the connection then closes and answerRequired is set and
so _sendError is called, which calls Banana's sendEncoded
which does a transport.write which fails .... ahh, that's
too deep into the way Twisted works for me to follow any
further, but it looks like write is guaranteed to catch all
underlying errors.

So my first pass suggests the code can be used in a resonable
secure way.

BTW, in my review I saw that jelly.py uses this code:

     for i in dir(module):
         i_ = getattr(module, i)
         if type(i_) == types.ClassType:
             if issubclass(i_, baseClass):
                 setUnjellyableForClass('%s%s' % (prefix, i), i_)

Is there any reason this code doesn't use "for i, i_ in 
module.__dict__.items()"?
I point it out because formally speaking the definition of "dir()" is
documented as "primarily as a convenience for use at an interactive 
prompt"
and "its detailed behavior may change across releases."  OTOH, it ain't
broke, so no need to fix it.

For completeness,

% fgrep 'dir(' */*.py | grep -v '[a-z]dir'
im/gtkcommon.py:        for n in dir(base):
     # the behaviour of dir has changed since this was created.
     # I think in newer Pythons it isn't needed.  But it doesn't
     # break and is needed for older ones.

manhole/explorer.py:        for i in dir(instance):
     # The method is documented as
     #       Note these are only the *instance* methods and members --
     #       if you want the class methods, you'll have to look up the 
class.
     #
     # However, with the change of dir behaviour in newer Pythons, this
     # is no longer true -- all names are returned.  Fix doc or fix code?


manhole/explorer.py:        for i in dir(theClass):
     # not sure which behaviour is desired

names/authority.py:        for record in [x for x in dir(dns) if 
x.startswith('Record_')]:
     # should be
     #   for record in [v for k,v in dns.__dict__.items() if 
k.startswith('Record_')]:
     # and get rid of the next line

spread/jelly.py:    for i in dir(module):
spread/newjelly.py:    for i in dir(module):
    # mentioned above
trial/unittest.py:        names = dir(module)
% fgrep 'dir(' */*/*.py | grep -v '[a-z]dir'
conch/ssh/connection.py:for v in dir(connection):
conch/ssh/transport.py:for v in dir(transport):
     # connection.__dict__.names() also works

conch/ssh/userauth.py:for v in dir(userauth):
     # userauth.__dict__ also works

spread/ui/gtk2util.py:        for k in dir(self):
     # not sure, but here's the context
     #
     #    # mold can go away when we get a newer pygtk (post 1.99.14)
     #    mold = {}
     #    for k in dir(self):
     #        mold[k] = getattr(self, k)
     #
     #  Should it go away?


					Andrew
					dalke at dalkescientific.com




From itamar at itamarst.org  Mon May 26 17:52:58 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 26 May 2003 19:52:58 -0400
Subject: [Twisted-Python] Please fix your code to not use dir()
In-Reply-To: <D7D0C244-8FD1-11D7-A91C-000393C92466@dalkescientific.com>
References: <20030526174317.216d7dd9.itamar@itamarst.org>
	<D7D0C244-8FD1-11D7-A91C-000393C92466@dalkescientific.com>
Message-ID: <20030526195258.4852afc0.itamar@itamarst.org>

On Mon, 26 May 2003 17:29:06 -0600
Andrew Dalke <dalke at dalkescientific.com> wrote:

> Is there any reason this code doesn't use "for i, i_ in 
> module.__dict__.items()"?

Indeed, these are probably all bugs. Thanks for taking the time to point
this out.

I've seen bugs caused by this already, so please, everyone, use
twisted.python.reflect or python's inspect module, not dir().

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From selwyn.mccracken at paradise.net.nz  Mon May 26 18:16:51 2003
From: selwyn.mccracken at paradise.net.nz (Selwyn McCracken)
Date: 27 May 2003 12:16:51 +1200
Subject: [Twisted-Python] sshclient and sshserver examples
Message-ID: <1053994611.2392.84.camel@mccracken.otago.ac.nz>

hi,

I am trying to run the sshsimpleclient.py from the CVS examples folder.
However I get the following error. 

Traceback (most recent call last):
  File "/home/selwyn/.ssh/sshClient.py", line 44, in ?
    class TrueChannel(connection.SSHChannel):
AttributeError: 'module' object has no attribute 'SSHChannel'

rummaging around in connection, there doesn't appear to be the
appropriate class available.

Help greatly appreciated.
Selwyn




From acapnotic at twistedmatrix.com  Mon May 26 19:13:05 2003
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 26 May 2003 18:13:05 -0700
Subject: [Twisted-Python] Woven using wrong model adapter
Message-ID: <1053997977.19896.19.camel@troglodyte.funhouse>

I have:

components.registerAdapter(model.ObjectWrapper,
                           interests.InterestChangeReport,
                           wovenInterfaces.IModel)

class Page(page.Page):
    def wmfactory_report(self, request):
        if sometimes:
            return deferredInterestChangeReport()
        else:
            return ''

If the first page I serve after starting the server gets an
InterestChangeReport, then everything works just fine.  However, if the
first page served gets '', then any future page that gets an
InterestChangeReport dies with an exception:  "the submodel was not
found in [<twisted.web.woven.model.StringModel instance at 0x85167c4:
wrapped data: <InterestChangeReport instance...>"

So why does woven persist in using the StringModel adapter in this case,
and how can I get it to stop?

Don't know if this is related or not, but the log shows messages like:
"Warning: There was no parent for node [...]; node not mutated."  Is
that something I should be concerned about?

Thanks,

 - Kevin


-- 
The moon is waning crescent, 16.8% illuminated, 25.6 days old.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20030526/bdd105c7/attachment.sig>

From andrew-twisted at puzzling.org  Mon May 26 19:18:34 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 27 May 2003 11:18:34 +1000
Subject: [Twisted-Python] Re: SOAP and XML-RPC stuff
In-Reply-To: <417D72E8-8FA7-11D7-A91C-000393C92466@dalkescientific.com>
References: <417D72E8-8FA7-11D7-A91C-000393C92466@dalkescientific.com>
Message-ID: <20030527011834.GA7502@frobozz>

On Mon, May 26, 2003 at 12:24:15PM -0600, Andrew Dalke wrote:
> 
> Bingo!  It works now, and I'm one step further on my way to
> Twisted Enlightenment.  Thanks Andrew!

You're welcome! [1]

> BTW, I looked up twisted.web.resource on the doc page at
> 
> http://www.twistedmatrix.com/documents/TwistedDocs/current/api/
> 
> I don't see 'twisted.web.resource' in the 'Everything' section
> in the lower left, which means it should be labeled 'Not Quite
> Everything.'  ;)

I do, however, see "twisted.web.resource.Resource"...

-Andrew.

[1] I've never actually written any Twisted Web code, but it seems I've now
    spent enough time reading the mailing list and documentation checkins
    that I can now write untested code that works ;)
    



From radix at twistedmatrix.com  Mon May 26 19:37:07 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 26 May 2003 21:37:07 -0400
Subject: [Twisted-Python] Woven using wrong model adapter
In-Reply-To: <1053997977.19896.19.camel@troglodyte.funhouse>; from acapnotic@twistedmatrix.com on Mon, May 26, 2003 at 21:13:05 -0400
References: <1053997977.19896.19.camel@troglodyte.funhouse>
Message-ID: <20030527013707.GE16017@toshi.anaprd01.md.comcast.net>

On 2003.05.26 21:13, Kevin Turner wrote:
> I have:
> 
> components.registerAdapter(model.ObjectWrapper,
>                            interests.InterestChangeReport,
>                            wovenInterfaces.IModel)
> 
> class Page(page.Page):
>     def wmfactory_report(self, request):
>         if sometimes:
>             return deferredInterestChangeReport()
>         else:
>             return ''

...
 
> So why does woven persist in using the StringModel adapter in this case,
> and how can I get it to stop?

IIRC, A workaround is to 1) put the conditional in a special wvfactory rather 
than/in addition to your wmfactory, or 2) call self.invalidateCache() every 
time the result of the conditional changes (or just on every request, if you
don't care)

> 
> Don't know if this is related or not, but the log shows messages like:
> "Warning: There was no parent for node [...]; node not mutated."  Is
> that something I should be concerned about?

dunno

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From stuart.hungerford at anu.edu.au  Mon May 26 19:42:49 2003
From: stuart.hungerford at anu.edu.au (Stuart Hungerford)
Date: Tue, 27 May 2003 11:42:49 +1000
Subject: [Twisted-Python] getProcessOutput ok to use in a
  DeferredList?
In-Reply-To: <20030526113743.8545.33076.Mailman@pyramid.twistedmatrix.co
 m>
Message-ID: <5.2.0.9.0.20030527113924.0269cc48@anusf.anu.edu.au>

 > [...]
 >I'm going to guess what your problem might be, based on a problem I once
 >had.  :)
 >
 >If you have multiple Deferreds, some "depend" on others, DeferredList's
 >default behaviour isn't what you want.  By "depend" I mean if Deferred A
 >fails (and so fires its errback, not callback), then Deferred B will never
 >be called, i.e. B depends on A.  (This is not official terminology! :).
 >
 >In that case, you probably want to use the fireOnOneErrback flag of
 >DeferredList.  This changes the behaviour of DeferredList so that it will
 >fire its callbacks as soon as either:
 >    - All its Deferreds have fired their callbacks, or
 >    - any of its Deferreds have fired an errback.

    Aha! A brilliant piece of remote empathetic debugging ;-)  The lack of
    an errback was masking an error from the Deferreds.  Many thanks.



Cheers,

Stu

--
:: Stuart Hungerford (stuart.hungerford at anu.edu.au)
:: ANU Internet Futures Group




From twisted at eholm.com  Mon May 26 22:42:17 2003
From: twisted at eholm.com (Eric Holm)
Date: 26 May 2003 21:42:17 -0700
Subject: [Twisted-Python] [Tutor] Help on personnal Proxy
In-Reply-To: <8963D6370B323E4AA3241200F0EAF731235642@FCEXVEXM002.dcl.int.dexwired.net>
References: <8963D6370B323E4AA3241200F0EAF731235642@FCEXVEXM002.dcl.int.dexwired.net>
Message-ID: <u7k8dgfva.fsf@eholm.com>

"POYEN OP Olivier (DCL)" <Olivier.POYEN at clf-dexia.com> writes:
> I tried to read some parts of the how-to, [...] with no luck. 
> 
The short answer to your question is to replace:

   f.HTTPChannel=proxy.Proxy

with:

   f.protocol=proxy.Proxy

Or, I've written a (yet another) web proxy that you might 
want to try too.  Using my MinProxy (for Minimal proxy) should 
be fairly straightforward, simply dump MinProxy.py and 
HttpHeader.py into the same directory, and then run MinProxy 
(there's no #!, so you'll have to type python MinProxy.py 
if you're not on Windows).

If you want to look at (or mess with) the pages as they flow 
through MinProxy, it's a bit different (hopefully simpler) 
than web.Proxy.  Simply subclass MinProxy, and then override:

  onHeaderFromServer( self, header ):
  onHeaderFromServer( self, header ):
  onBodyFromBrowser( self, header, body ):
  onBodyFromServer( self, header, body ):

depending on what you're interested in.  If you override them, 
you'll probably want to call:

  self.sendLinesToServer( header )
  self.sendLinesToBrowser( header )
  self.sendBufferToServer( body )
  self.sendBufferToBrowser( body )

One other difference is that the headers in the above methods 
are encapsulated as HTTPHeader objects.  When treated as lists, 
they return the header lines, untouched, in the order received. 
For example:

  for line in header:
     print line

will print the lines as they were received.  When treated 
as dictionaries, HTTPHeader objects will return the desired 
field.  For example:

   header['content-type']

might return 'text/html', and:

   header.get( 'content-encoding', None )

might return 'gzip' (or None).  The keys are all converted 
to lower-case, the fields are untouched.

Anyway, if any of this looks the least bit interesting, 
please feel free to grab it from:

   http://nonplussed.eholm.com/twisted

Why write another web proxy?  Well, after playing with 
web.Proxy, I decided to simplify life (or, at least my 
particular situation) by writing a proxy based on 
basic.LineReceiver instead of http.HTTPClient and 
http.HTTPChannel.  I found that web.Proxy was choking on 
some mainstream'ish sites such as msn.com and amazon.com.  
While attempting to patch-up the problems, it occurred to 
me that I was messing with code in the HTTPxxx classes that 
was parsing the headers.  And while *real* HTTP clients and 
servers need to grok the headers, my simple proxy application 
doesn't need such sophistication.  So I decided to bypass the 
hard-core HTTP code, and come-up with a simpler approach (famous 
last words...).

I'd be happy to contribute this to twisted, if anybody's 
interested.  It needs some cleanup, as none of it conforms 
to the twisted coding standards (e.g. not a single docstring), 
and there aren't any twisted-style test cases (oh, and the name 
sucks too...).  Hopefully there's enough there to give folks 
a feel for whether or not it might be useful - if so I'll be 
happy to clean it up and submit it, if not I won't bother. In 
the meantime, feel free to give it a try, and send any comments 
or questions my way.


Eric.




From acapnotic at twistedmatrix.com  Mon May 26 23:02:51 2003
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 26 May 2003 22:02:51 -0700
Subject: [Twisted-Python] Woven using wrong model adapter
In-Reply-To: <20030527013707.GE16017@toshi.anaprd01.md.comcast.net>
References: <1053997977.19896.19.camel@troglodyte.funhouse>
	 <20030527013707.GE16017@toshi.anaprd01.md.comcast.net>
Message-ID: <1054011767.19895.35.camel@troglodyte.funhouse>

On Mon, 2003-05-26 at 18:37, Christopher Armstrong wrote:
> > So why does woven persist in using the StringModel adapter in this case,
> > and how can I get it to stop?
> 
> IIRC, A workaround is to [...] 2) call self.invalidateCache() every 
> time the result of the conditional changes (or just on every request, if you
> don't care)

Model.invalidateCache is not what's needed here.  It turns out that when
that cache gets stale (either through explicit invalidateCache or just a
new Request), Model.getData will update the model data in
Model.original...  but it only swaps out the Model.original attribute,
it doesn't replace the Model with a new Model adapter for the new data. 
Which is how I was getting my FooReport instances ending up inside a
StringModel adapter.

What I've done now is, in Page.request: del self.submodels["report"]
This makes sure that old model adapters never hang around.  It also
smells bad.

Am I violating some unwritten contract here which says "a model factory
must always return models with the same interface"?

-- 
The moon is waning crescent, 15.6% illuminated, 25.7 days old.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20030526/f10b43d2/attachment.sig>

From heiko at ph0enix.homelinux.org  Mon May 26 18:38:07 2003
From: heiko at ph0enix.homelinux.org (Heiko Wundram)
Date: 27 May 2003 02:38:07 +0200
Subject: [Twisted-Python] Safe Pickling using banana and jelly
In-Reply-To: <20030526223106.GC16017@toshi.anaprd01.md.comcast.net>
References: <707F4930-8FBA-11D7-A91C-000393C92466@dalkescientific.com>
	 <20030526223106.GC16017@toshi.anaprd01.md.comcast.net>
Message-ID: <1053995887.928.25.camel@d168.stw.stud.uni-saarland.de>

On Tue, 2003-05-27 at 00:31, Christopher Armstrong wrote:
> Well, by default PB (which I assume is what Heiko is using) does

No, I'm not using PB, just using jelly and banana on their own for
encoding network packets. As I thought that it was way too insecure to
have to code my own object checking function, I've written my own
serializer in the mean time... :)

The arguments that Andrew put forth reminded me of Python pickle, and
that just doesn't work over an insecure transport, with the remote ends
not even being known (maybe).

What my serializer now basically does is only allow standard Python
objects to be serialized/unserialized, and classes that have been
explicitly registered with the Serializer. These classes implement
__serialize and __unserialize, to return their internal state as a base
Python object (or classes that have been registered), which are then
dumped to the stream. The serializer plays nice with class inheritance,
serializing all base classes, and unserializing them in the reverse
order.

__unserialize can e.g. do object checking after being unserialized, or
change parameters that have been received over the network.

The serializer currently _cannot_ handle recursive objects, but I guess
it could be extended to handle that too.

If there's any interest in the code, feel free to mail me. :) Maybe even
a remote chance to get it included in Twisted (oh what a hypocrite I
am).

Heiko.




From andrew-twisted at puzzling.org  Mon May 26 23:33:42 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 27 May 2003 15:33:42 +1000
Subject: [Twisted-Python] Safe Pickling using banana and jelly
In-Reply-To: <1053995887.928.25.camel@d168.stw.stud.uni-saarland.de>
References: <707F4930-8FBA-11D7-A91C-000393C92466@dalkescientific.com> <20030526223106.GC16017@toshi.anaprd01.md.comcast.net> <1053995887.928.25.camel@d168.stw.stud.uni-saarland.de>
Message-ID: <20030527053342.GB7502@frobozz>

On Tue, May 27, 2003 at 02:38:07AM +0200, Heiko Wundram wrote:
> On Tue, 2003-05-27 at 00:31, Christopher Armstrong wrote:
> > Well, by default PB (which I assume is what Heiko is using) does
> 
> No, I'm not using PB, just using jelly and banana on their own for
> encoding network packets. As I thought that it was way too insecure to
> have to code my own object checking function, I've written my own
> serializer in the mean time... :)

[...]

> If there's any interest in the code, feel free to mail me. :) Maybe even
> a remote chance to get it included in Twisted (oh what a hypocrite I
> am).

While Twisted has a long history of inventing new persistence systems, I
don't think we need yet another serialisation module right at the moment :)

-Andrew.




From dp at twistedmatrix.com  Mon May 26 23:56:24 2003
From: dp at twistedmatrix.com (Donovan Preston)
Date: Mon, 26 May 2003 22:56:24 -0700
Subject: [Twisted-Python] Woven using wrong model adapter
In-Reply-To: <1054011767.19895.35.camel@troglodyte.funhouse>
Message-ID: <F31A25D6-9007-11D7-933A-00039376B1AE@twistedmatrix.com>

On Monday, May 26, 2003, at 10:02 PM, Kevin Turner wrote:
>
> Am I violating some unwritten contract here which says "a model factory
> must always return models with the same interface"?

A model factory must always return an object with the same identity 
within one request. See DeferredModel for an example of how to change 
the behaviour of an IModel implementor without changing it's identity. 
You really shouldn't be doing conditional rendering with a wmfactory 
anyway; put the conditional in the View, where it belongs.

dp




From radix at twistedmatrix.com  Tue May 27 01:54:29 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 27 May 2003 03:54:29 -0400
Subject: [Twisted-Python] Woven using wrong model adapter
In-Reply-To: <F31A25D6-9007-11D7-933A-00039376B1AE@twistedmatrix.com>; from dp@twistedmatrix.com on Tue, May 27, 2003 at 01:56:24 -0400
References: <F31A25D6-9007-11D7-933A-00039376B1AE@twistedmatrix.com>
Message-ID: <20030527075429.GA29169@toshi.anaprd01.md.comcast.net>

On 2003.05.27 01:56, Donovan Preston wrote:
> 
> On Monday, May 26, 2003, at 10:02 PM, Kevin Turner wrote:
> >
> > Am I violating some unwritten contract here which says "a model factory
> > must always return models with the same interface"?
> 
> A model factory must always return an object with the same identity 
> within one request. 

With such a restriction, it seems there's no reason to *call* the model
factory multiple times per request. Shouldn't this be prevented?

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From radix at twistedmatrix.com  Tue May 27 02:01:55 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 27 May 2003 04:01:55 -0400
Subject: [Twisted-Python] Safe Pickling using banana and jelly
In-Reply-To: <1053995887.928.25.camel@d168.stw.stud.uni-saarland.de>; from heiko@ph0enix.homelinux.org on Mon, May 26, 2003 at 20:38:07 -0400
References: <707F4930-8FBA-11D7-A91C-000393C92466@dalkescientific.com> <20030526223106.GC16017@toshi.anaprd01.md.comcast.net> <1053995887.928.25.camel@d168.stw.stud.uni-saarland.de>
Message-ID: <20030527080155.GC29169@toshi.anaprd01.md.comcast.net>

On 2003.05.26 20:38, Heiko Wundram wrote:
> On Tue, 2003-05-27 at 00:31, Christopher Armstrong wrote:
> > Well, by default PB (which I assume is what Heiko is using) does
> 
> No, I'm not using PB, just using jelly and banana on their own for
> encoding network packets. As I thought that it was way too insecure to
> have to code my own object checking function, I've written my own
> serializer in the mean time... :)
> 
> The arguments that Andrew put forth reminded me of Python pickle, and
> that just doesn't work over an insecure transport, with the remote ends
> not even being known (maybe).


It seems you've missed other posts in this thread (or my own? I don't
remember now), that point out that jelly can indeed restrict instantiation
of arbitrary classes. Implementing another half-broken serialization scheme
is definitely not a good solution to any problem :-) Can you be more 
specific about how jelly is reminding you of Python pickle? The recursion
problem he mentioned is indeed, as pointed out, caught, and an error
is returned to the other end.

btw, thanks to Andrew Dalke for an *excellent* beginning of a security
audit for jelly. :-)

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From mario at ruggier.org  Tue May 27 03:32:31 2003
From: mario at ruggier.org (Mario Ruggier)
Date: Tue, 27 May 2003 11:32:31 +0200
Subject: [Twisted-Python] bug and patch: embedded LivePages
Message-ID: <23FC06CE-9026-11D7-9D6F-000393756786@ruggier.org>

Hi,

in the case when a LivePage happens to be itself the contents of
an iframe, the input web conduit does not work as it attempts to
execute js from "top". It should be "parent".

To test, place the following script next to any LivePage example
(such as the dhtmlLivePage.rpy posted some days ago by
Donovan Preston):

iframed_dhtmlLivePage.rpy:
================================
from twisted.web.woven import page
resource = page.Page()
resource.template = '''<html>
     <body style="margin:1em; background-color: gray;">
         <iframe style="width: 80%; padding: 1em;" 
src="../dhtmlLivePage">
             iframe contents
         </iframe>
     </body>
</html>
'''
================================


The diff w.r.t. cvs version of twisted/web/woven/controller.py:
================================
--- twisted/web/woven/controller.py       Tue May 27 10:58:55 2003
+++ twisted/web/woven/controller.py   Sat May 24 12:26:22 2003
@@ -333,7 +333,7 @@
          target.onEvent(request, eventName, *eventArgs)
          sess.sendScript = orig

-        
scriptOutput.append('parent.woven_clientToServerEventComplete()')
+        scriptOutput.append('top.woven_clientToServerEventComplete()')

          #print "GATHERED JS", scriptOutput

@@ -369,7 +369,7 @@
              nodeXML = nodeXML.replace('\r', '')
              nodeXML = nodeXML.replace("\\", "\\\\")
              nodeXML = nodeXML.replace("'", "\\'")
-            js = "parent.woven_replaceElement('%s', '%s')" % (nodeId, 
nodeXML)
+            js = "top.woven_replaceElement('%s', '%s')" % (nodeId, 
nodeXML)
              #for key in widget.subviews.keys():
              #    view.subviews[key].unlinkViews()
              oldNode = page.view.subviews[nodeId]
================================

cheers, mario




From Olivier.POYEN at clf-dexia.com  Tue May 27 03:54:45 2003
From: Olivier.POYEN at clf-dexia.com (POYEN OP Olivier (DCL))
Date: Tue, 27 May 2003 11:54:45 +0200
Subject: [Twisted-Python] [Tutor] Help on personnal Proxy
Message-ID: <8963D6370B323E4AA3241200F0EAF731235643@FCEXVEXM002.dcl.int.dexwired.net>

> The short answer to your question is to replace:
> 
>    f.HTTPChannel=proxy.Proxy
> 
> with:
> 
>    f.protocol=proxy.Proxy
> 

Can I stress that f.HTTPChannel comes from the docstring from the Proxy Class in the proxy.py file from Twisted. 
If this is the "official" way to do, maybe should someone change the docstring....

Anyway.

When doing so, I have some trouble with the "as-is" proxy. 
Some exceptions occured:

My current parameters are :
Twisted 1.0.5 for python 2.2
export http_proxy='http://localhost:8765' # for the proxy

And the current web server is running on localhost:8080

The issue is that, when doing a 'wget http://localhost:8080', in web.proxy.py, there is, at line 113
host,port= string.split
Thus, port became a string. 
And in internet.tcp.py, there is a test for isInstance(port,StringTypes), which matches.....

With a single port=int(port) before calling reactor.connectTcP in web.prxoy, ezverything works.

Am I dead wrong ? 



> Or, I've written a (yet another) web proxy that you might 
> want to try too.  Using my MinProxy ....
> 
I'll gladly have a look !

Thanks !

OPQ
-------------- next part --------------
-----------------------------------------------------------------

Ce message est confidentiel ; son contenu ne represente en aucun

cas un engagement de la part de Dexia Credit Local ou de Dexia

CLF Banque. Toute publication, utilisation ou diffusion, meme

partielle, doit etre autorisee prealablement par l'emetteur. Si

vous n'etes pas destinataire de ce message, merci d'en avertir

immediatement l'expediteur.



This message is confidential ; its contents do not constitute a

commitment by Dexia Credit Local or Dexia CLF Banque. Any

unauthorised disclosure, use or dissemination, either whole or

partial, is prohibited. If you are not the intended recipient of

the message, please notify the sender immediately.

-----------------------------------------------------------------

Consultez notre site internet www.dexia-clf.fr

La cle d'une gestion optimisee du secteur public local

-----------------------------------------------------------------

From andrew-twisted at puzzling.org  Tue May 27 04:00:01 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 27 May 2003 20:00:01 +1000
Subject: [Twisted-Python] bug and patch: embedded LivePages
In-Reply-To: <23FC06CE-9026-11D7-9D6F-000393756786@ruggier.org>
References: <23FC06CE-9026-11D7-9D6F-000393756786@ruggier.org>
Message-ID: <20030527100001.GA8491@frobozz>

On Tue, May 27, 2003 at 11:32:31AM +0200, Mario Ruggier wrote:
> 
> 
> The diff w.r.t. cvs version of twisted/web/woven/controller.py:
> ================================
> --- twisted/web/woven/controller.py       Tue May 27 10:58:55 2003
> +++ twisted/web/woven/controller.py   Sat May 24 12:26:22 2003

You appear to have the diff backwards.

-Andrew.




From mario at ruggier.org  Tue May 27 04:13:33 2003
From: mario at ruggier.org (Mario Ruggier)
Date: Tue, 27 May 2003 12:13:33 +0200
Subject: [Twisted-Python] bug and patch: embedded LivePages
In-Reply-To: <20030527100001.GA8491@frobozz>
Message-ID: <DF933890-902B-11D7-9D6F-000393756786@ruggier.org>

> On Tue, May 27, 2003 at 11:32:31AM +0200, Mario Ruggier wrote:
>>
>>
>> The diff w.r.t. cvs version of twisted/web/woven/controller.py:
>> ================================
>> --- twisted/web/woven/controller.py       Tue May 27 10:58:55 2003
>> +++ twisted/web/woven/controller.py   Sat May 24 12:26:22 2003
>
> You appear to have the diff backwards.

Just did a file diff... sorry should have switched the 2 file arguments.


> -Andrew.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From pobrien at orbtech.com  Tue May 27 08:19:37 2003
From: pobrien at orbtech.com (Patrick K. O'Brien)
Date: 27 May 2003 09:19:37 -0500
Subject: [Twisted-Python] Using usage.Options documentation error
Message-ID: <m23cj0bhfq.fsf@orbtech.com>

There appears to be an error in the code example on this page:

    http://www.twistedmatrix.com/documents/howto/options

<quote>

Inheritance, Or: How I Learned to Stop Worrying and Love the Superclass

Sometimes there is a need for several option processors with a
unifying core. Perhaps you want all your commands to understand
-q/--quiet means to be quiet, or something similar. On the face of it,
this looks impossible: in Python, the subclass's optFlags would shadow
the superclass's. However, usage.Options uses special reflection code
to get all of the optFlags defined in the hierarchy. So the following:


class BaseOptions(usage.Options):

    optFlags = [["quiet", "q"], None]

class SpecificOptions(BaseOptions):

    optFlags = [
        ["fast", "f", None], ["good", "g", None], ["cheap", "c", None]
    ]


Is the same as: 

class SpecificOptions(BaseOptions):

    optFlags = [
        ["quiet", "q", "Silence output"],
        ["fast", "f", "Run quickly"],
        ["good", "g", "Don't validate input"],
        ["cheap", "c", "Use cheap resources"]
    ]

</quote>

I don't see how the descriptions in the second SpecificOptions class
match with the use of None in the first set of classes.  Twisted is
good, but it isn't *that* good, is it?

-- 
Patrick K. O'Brien
Orbtech      http://www.orbtech.com/web/pobrien
-----------------------------------------------
"Your source for Python programming expertise."
-----------------------------------------------




From grib at billgribble.com  Tue May 27 08:38:21 2003
From: grib at billgribble.com (Bill Gribble)
Date: 27 May 2003 09:38:21 -0500
Subject: [Twisted-Python] Small diff for LivePage controller
Message-ID: <1054046301.18681.19.camel@oc-demo.internal.billgribble.com>

Hi.  I noticed that when my LivePage instance sends updates to DOM
elements that are whitespace-sensitive, such as <pre> and 
<textarea wordwrap="off>, embedded newlines were getting stripped,
leaving the element bodies as single text lines with some interword
spacing removed. 

I tracked the problem down to this bit of code in woven/controller.py. 
The Javascript code generator is formatting the new element as a literal
Javascript string which will be processed on the client side to modify
the page.  But by stripping out the newlines in the code we remove some
important information in some HTML contexts.  

This patch leaves embedded newlines in the text, using JavaScript
literal string escapes to make sure they get passed through OK.  I also
added string escaping for other legal special characters that have 
JS literal escapes. 

With this patch, LivePage is working really well for me!  Thanks to all
the folks who have given help on IRC.  FWIW this patch is in the public
domain. 

Bill Gribble


Index: controller.py
===================================================================
RCS file: /cvs/Twisted/twisted/web/woven/controller.py,v
retrieving revision 1.60
diff -r1.60 controller.py
368,369d367
<             nodeXML = nodeXML.replace('\n', '')
<             nodeXML = nodeXML.replace('\r', '')
371a370,378
>             nodeXML = nodeXML.replace('"', '\\"')
>             nodeXML = nodeXML.replace('\n', '\\n')
>             nodeXML = nodeXML.replace('\r', '\\r')
>             nodeXML = nodeXML.replace('\b', '\\b')
>             nodeXML = nodeXML.replace('\t', '\\t')
>             nodeXML = nodeXML.replace('\000', '\\0')
>             nodeXML = nodeXML.replace('\v', '\\v')
>             nodeXML = nodeXML.replace('\f', '\\f')
> 



-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20030527/017a0716/attachment.sig>

From dp at twistedmatrix.com  Tue May 27 09:33:26 2003
From: dp at twistedmatrix.com (Donovan Preston)
Date: Tue, 27 May 2003 08:33:26 -0700
Subject: [Twisted-Python] Woven using wrong model adapter
In-Reply-To: <20030527075429.GA29169@toshi.anaprd01.md.comcast.net>
Message-ID: <8EF55799-9058-11D7-B738-00039376B1AE@twistedmatrix.com>

On Tuesday, May 27, 2003, at 12:54 AM, Christopher Armstrong wrote:

>
> On 2003.05.27 01:56, Donovan Preston wrote:
>>
>> On Monday, May 26, 2003, at 10:02 PM, Kevin Turner wrote:
>>>
>>> Am I violating some unwritten contract here which says "a model 
>>> factory
>>> must always return models with the same interface"?
>>
>> A model factory must always return an object with the same identity
>> within one request.
>
> With such a restriction, it seems there's no reason to *call* the model
> factory multiple times per request. Shouldn't this be prevented?

Correct. The wmfactory method isn't called more than once per request. 
It's getSubmodel that has this restriction, sorry.

dp




From z3p at twistedmatrix.com  Tue May 27 16:37:13 2003
From: z3p at twistedmatrix.com (Paul Swartz)
Date: Tue, 27 May 2003 18:37:13 -0400
Subject: [Twisted-Python] sshclient and sshserver examples
In-Reply-To: <1053994611.2392.84.camel@mccracken.otago.ac.nz>
Message-ID: <3ED3B059.9382.69CFD74@localhost>

On 27 May 2003 at 12:16, Selwyn McCracken wrote:

> Traceback (most recent call last):
>   File "/home/selwyn/.ssh/sshClient.py", line 44, in ?
>     class TrueChannel(connection.SSHChannel):
> AttributeError: 'module' object has no attribute 'SSHChannel'

Yeah, SSHChannel was refactored into its own module a while back, and I 
forgot to change this example.  It's fixed in CVS.

-p
-- 
     Paul Swartz
(o_  http://twistedmatrix.com/users/z3p.twistd/
//\  z3p at twistedmatrix.com
V_/_ AIM: Z3Penguin




From konrad at wam.umd.edu  Tue May 27 16:58:47 2003
From: konrad at wam.umd.edu (Konrad Rokicki)
Date: Tue, 27 May 2003 18:58:47 -0400 (EDT)
Subject: [Twisted-Python] toc.py
Message-ID: <Pine.SOL.4.44.0305271845110.6407-100000@rac2.wam.umd.edu>

Hey,
Is there any reason TOCClient doesnt catch exceptions made by callbacks?
Shouldn't line 902 look something like this (modeled after IRCClient):

        try:
            func(l)
        except:
            log.deferr()

Or maybe it should go somewhere else, but I don't think it should
disconnect when an exception isn't caught.

Also, what are the TOC and IRC classes for? I'm trying to do
certain things with TOCClient (i.e. user info) that only
seem to be in TOC..

Thanks,
Konrad




From kaloian at yovko.net  Tue May 27 17:04:10 2003
From: kaloian at yovko.net (Kaloian Doganov)
Date: 28 May 2003 02:04:10 +0300
Subject: [Twisted-Python] web forms and authentication in LDAP server
Message-ID: <1054076649.21524.16.camel@philosophtware>

Hello!

I have two short twisted-newbie questions:

Is there any kind of documentation (instead of the API docs) that I can
read about how to use twisted.web.woven.form package? Any kind of
example would be appreciated.

Does anyone work on adding LDAP support for twisted.cred? I am
interested in writing such module, once I get more experienced with
Twisted.


Best Regards,
Kaloian Doganov.





From heikowu at ceosg.de  Tue May 27 22:21:52 2003
From: heikowu at ceosg.de (Heiko Wundram)
Date: 28 May 2003 06:21:52 +0200
Subject: [Twisted-Python] Safe Pickling using banana and jelly
In-Reply-To: <20030527080155.GC29169@toshi.anaprd01.md.comcast.net>
References: <707F4930-8FBA-11D7-A91C-000393C92466@dalkescientific.com>
	 <20030526223106.GC16017@toshi.anaprd01.md.comcast.net>
	 <1053995887.928.25.camel@d168.stw.stud.uni-saarland.de>
	 <20030527080155.GC29169@toshi.anaprd01.md.comcast.net>
Message-ID: <1054095712.928.87.camel@d168.stw.stud.uni-saarland.de>

On Tue, 2003-05-27 at 10:01, Christopher Armstrong wrote:
> It seems you've missed other posts in this thread (or my own? I don't
> remember now), that point out that jelly can indeed restrict instantiation
> of arbitrary classes. Implementing another half-broken serialization scheme
> is definitely not a good solution to any problem :-)

The thing being: I don't like any serialization scheme that just says:
Okay, all data is fine with us, we'll coredump if we deconstruct
anything bad or obnoxious... (sort'a like that) I guess that's not the
point when doing serialization for data received over the net...

My intention behind creating my own serialization scheme were the
following:

1. I can control how the data is actually stored in the pickle (classes
aren't pickled as is, but instead get the chance to __serialize
themselves; that's just mildly important, but... Hey. :)) And foremost:
I can control exactly which classes are okay for
serialization/unserialization.

2. Both Jelly and Banana can't handle a special case where I have an
instance of class y (derived from class x), and want the serialization
stream to show that class x was sent. Examples of this: My current
program has a Host class, and a LocalHost class which is derived from
it. The LocalHost, when sent to other hosts, should just get serialized
as a Host. Normally you'd have to "cast" the LocalHost to a host object,
and then serialize that. My scheme can handle "alias classes", which get
serialized using the other's name, making sure that the other class
doesn't even get a chance to serialize private attributes.

3. Support for different serialization protocols. I guess I've not made
the mistake that most other pickle-like module authors made, that they
didn't implement support for more than one protocol right from the
start... (hypocrisy... ;)) This e.g. means that object-ids (which
basically are names for the pickled class) can have different meanings,
when the protocol changes.

4. And most important for me (except 1): I can control exactly what data
gets put into the unserialized classes, as all __unserialize functions
are called in reverse order (when having classes which are bases to
other classes, etc.). The point being: when I load a Host from network,
I have to reduce several timeouts as "local" timeouts are much higher
than timeouts for instances received over the net. As I don't reduce
them when I send them out, I just reduce them when they come in. As
such, the Host class is derived from another class, which is called
TimeoutBase, which controls this timeout stuff, as there are other
classes which also need timeout behaviour. With all "normal" picklers,
the Host instance would be created without it ever having the chance to
change the private data of the TimeoutBase (yeah, I use private
variables for all class data), except by calling some kind of utility
function like checkTimeout() (yuck...) or hacking by changing private
attributes (even more yuck...). I think this is pretty crufty. When the
unserializer just calls all bases __unserialize in turn, I can just have
the TimeoutBase store (just) it's values to network when __serialize is
called, and when __unserialize is called load them again, and
check/reduce them right as they are being put into the class. This also
protects against broken objects which are received from the network,
which I would have to catch using some kind of checkInstance() logic
too... (objects which are loaded with incomplete data, eg.)

5. My pickles are signed data items, and while signing banana'd packets
is no problem, I have integrated signature/digesting algorithms with the
stream class, which allows for checking of SHA-digests and the like as
they are being written out. I don't really know any other pickler that
takes care of checksumming packets right in the pickler. You can of
course turn off this functionality... :)

6. Without being hypocrite, I guess I can say that the serialization
scheme is so simple, that there couldn't be much holes an attacker could
come through... Tests like the things Andrew did will certainly not
work, and the burden is put on the programmer to make sure that the
classes he registers as being serializable are really classes that are
okay to serialize (destroy, etc.). All base classes are safe to
serialize. And actually only int, string, unicode, complex, long and
float ever get written out to the stream, all other objects being
abstractions of a _DataStream (which is basically a list kind of
object).

> btw, thanks to Andrew Dalke for an *excellent* beginning of a security
> audit for jelly. :-)

Thanks here too... Made me finally give myself the turn to actually
write my own serializer... ;) I've wanted to do that for a long time,
but I've always feared that it would be an overly complex task.
Yesterday proved me wrong about that... :) I needed above functionality
1+4 more than once, when it wasn't available, and that always produced
pretty crufty code...

Heiko.




From heikowu at ceosg.de  Tue May 27 22:22:16 2003
From: heikowu at ceosg.de (Heiko Wundram)
Date: 28 May 2003 06:22:16 +0200
Subject: [Twisted-Python] XMLRPC getting calling host
Message-ID: <1054095736.928.90.camel@d168.stw.stud.uni-saarland.de>

Hey there!

Just a little try to check whether I'm still subscribed to twisted, as
today's other posts regarding the safe pickling never got through,
somehow...

I've come to the point where I need to query the IP an XMLRPC request
came from. In UDP, you get it served when the call to datagramReceived
comes through, but I've not seen any attribute of the XMLRPC class, or
of the underlying Resource class which states anything about how to get
this attribute. Is it possible? And if, how?

Thanks!

Heiko.




From andrew-twisted at puzzling.org  Tue May 27 22:45:38 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 28 May 2003 14:45:38 +1000
Subject: [Twisted-Python] Safe Pickling using banana and jelly
In-Reply-To: <1054095712.928.87.camel@d168.stw.stud.uni-saarland.de>
References: <707F4930-8FBA-11D7-A91C-000393C92466@dalkescientific.com> <20030526223106.GC16017@toshi.anaprd01.md.comcast.net> <1053995887.928.25.camel@d168.stw.stud.uni-saarland.de> <20030527080155.GC29169@toshi.anaprd01.md.comcast.net> <1054095712.928.87.camel@d168.stw.stud.uni-saarland.de>
Message-ID: <20030528044538.GC10429@frobozz>

On Wed, May 28, 2003 at 06:21:52AM +0200, Heiko Wundram wrote:
> On Tue, 2003-05-27 at 10:01, Christopher Armstrong wrote:
> > It seems you've missed other posts in this thread (or my own? I don't
> > remember now), that point out that jelly can indeed restrict instantiation
> > of arbitrary classes. Implementing another half-broken serialization scheme
> > is definitely not a good solution to any problem :-)
> 
> The thing being: I don't like any serialization scheme that just says:
> Okay, all data is fine with us, we'll coredump if we deconstruct
> anything bad or obnoxious... (sort'a like that) I guess that's not the
> point when doing serialization for data received over the net...

Twisted Spread is intended to be safe and secure, because data from the net
could be from anywhere, so it has to be robust in the face of dangerous
data.

> My intention behind creating my own serialization scheme were the
> following:
> 
> 1. I can control how the data is actually stored in the pickle (classes
> aren't pickled as is, but instead get the chance to __serialize
> themselves; that's just mildly important, but... Hey. :)) And foremost:
> I can control exactly which classes are okay for
> serialization/unserialization.

That's what __getstate__ and __setstate__ are for with pickle; IIRC Jelly
supports that and also it's own 'getStateToCopyFor' or something along those
lines.

> 2. Both Jelly and Banana can't handle a special case where I have an
> instance of class y (derived from class x), and want the serialization
> stream to show that class x was sent. Examples of this: My current
> program has a Host class, and a LocalHost class which is derived from
> it. The LocalHost, when sent to other hosts, should just get serialized
> as a Host. Normally you'd have to "cast" the LocalHost to a host object,
> and then serialize that. My scheme can handle "alias classes", which get
> serialized using the other's name, making sure that the other class
> doesn't even get a chance to serialize private attributes.

I'm sure PB can handle this.  Have you read "PB Copyable: Passing Complex
Types", http://twistedmatrix.com/documents/howto/pb-copyable? 

> 3. Support for different serialization protocols. I guess I've not made
> the mistake that most other pickle-like module authors made, that they
> didn't implement support for more than one protocol right from the
> start... (hypocrisy... ;)) This e.g. means that object-ids (which
> basically are names for the pickled class) can have different meanings,
> when the protocol changes.

I'm not quite sure what you're saying here.

> 4. And most important for me (except 1): I can control exactly what data
> gets put into the unserialized classes, as all __unserialize functions
> are called in reverse order (when having classes which are bases to
> other classes, etc.). The point being: when I load a Host from network,
> I have to reduce several timeouts as "local" timeouts are much higher
> than timeouts for instances received over the net. As I don't reduce
[...]

Again, read http://twistedmatrix.com/documents/howto/pb-copyable.  With PB
you can control exactly what data is sent over the wire.  You also get
Referenceables, Copyables and Cacheables, which is considerably richer than
a simple object protocol that just passes the occasional object-graph.

> 5. My pickles are signed data items, and while signing banana'd packets
> is no problem, I have integrated signature/digesting algorithms with the
> stream class, which allows for checking of SHA-digests and the like as
> they are being written out. I don't really know any other pickler that
> takes care of checksumming packets right in the pickler. You can of
> course turn off this functionality... :)

TCP guarantees the data isn't corrupted on the way through.  Use SSL to 
guarantee that the traffic isn't being sniffed or tampered with in transit.
PB has an authentication step so that you can know who the clients are.
Between all this, I'm not sure what problem your signatures are solving that
isn't already solved?

> 6. Without being hypocrite, I guess I can say that the serialization
> scheme is so simple, that there couldn't be much holes an attacker could
> come through... Tests like the things Andrew did will certainly not
> work, and the burden is put on the programmer to make sure that the
> classes he registers as being serializable are really classes that are
> okay to serialize (destroy, etc.). All base classes are safe to
> serialize. And actually only int, string, unicode, complex, long and
> float ever get written out to the stream, all other objects being
> abstractions of a _DataStream (which is basically a list kind of
> object).

Banana only understands a very small number of primitives too.  PB has been
implemented in languages other than Python, so I don't think it's overly
complex -- and I believe Brian Warner is working on a rewrite that might
make it simpler, faster and more flexible.

> > btw, thanks to Andrew Dalke for an *excellent* beginning of a security
> > audit for jelly. :-)
> 
> Thanks here too... Made me finally give myself the turn to actually
> write my own serializer... ;) I've wanted to do that for a long time,
> but I've always feared that it would be an overly complex task.
> Yesterday proved me wrong about that... :) I needed above functionality
> 1+4 more than once, when it wasn't available, and that always produced
> pretty crufty code...

As far as I can see (although I'm no PB expert), PB satisfies 1 and 4.  What
makes you think it doesn't?

-Andrew.




From wari at home.wari.org  Tue May 27 22:46:18 2003
From: wari at home.wari.org (Wari Wahab)
Date: Wed, 28 May 2003 12:46:18 +0800
Subject: [Twisted-Python] XMLRPC getting calling host
In-Reply-To: <1054095736.928.90.camel@d168.stw.stud.uni-saarland.de>
References: <1054095736.928.90.camel@d168.stw.stud.uni-saarland.de>
Message-ID: <3ED43F1A.1020501@home.wari.org>

Heiko Wundram wrote:

>I've come to the point where I need to query the IP an XMLRPC request
>came from. In UDP, you get it served when the call to datagramReceived
>comes through, but I've not seen any attribute of the XMLRPC class, or
>of the underlying Resource class which states anything about how to get
>this attribute. Is it possible? And if, how?
>  
>
Just a stab in the dark here, but I believe it's possible to override 
the render method to get this information via the request parameter.

Something like:
from twisted.web import xmlrpc
class MyXmlRpcHandler(xmlrpc.XMLRPC):
    def render(self, request):
        self._ip = request.something # Get IP information here
        xmlrpc.XMLRPC.render(self, request)
    def xmlrpc_method(self, *args):
        # You can now use self._ip for this instance of MyXmlRpcHandler

Sorry for my lack of knowledge in the request object object, but every 
known html info about the request is available there.




From andrew-twisted at puzzling.org  Tue May 27 22:51:07 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 28 May 2003 14:51:07 +1000
Subject: [Twisted-Python] XMLRPC getting calling host
In-Reply-To: <1054095736.928.90.camel@d168.stw.stud.uni-saarland.de>
References: <1054095736.928.90.camel@d168.stw.stud.uni-saarland.de>
Message-ID: <20030528045107.GD10429@frobozz>

On Wed, May 28, 2003 at 06:22:16AM +0200, Heiko Wundram wrote:
> 
> I've come to the point where I need to query the IP an XMLRPC request
> came from. In UDP, you get it served when the call to datagramReceived
> comes through, but I've not seen any attribute of the XMLRPC class, or
> of the underlying Resource class which states anything about how to get
> this attribute. Is it possible? And if, how?

Request objects have a .getClientIP method.

-Andrew.




From jml at ids.org.au  Wed May 28 11:46:34 2003
From: jml at ids.org.au (jml at ids.org.au)
Date: Thu, 29 May 2003 03:46:34 +1000
Subject: [Twisted-Python] [PATCH] Getting request in woven.form callback
Message-ID: <20030528174634.GA14260@mumak.net>


Hello,

I've been wanting to get at request in the woven.form callback for a while 
now. After trying several different kludges in my code, I tried patching form 
and t.p.formmethod.

Example:
   def login(request, username=None, password=None):
       # do stuff

   sig = MethodSignature(
            String('username', '', 'Username', 'Your username'),
            Password('password', '', 'Password', 'Your password'))
   loginMethod = FormMethod(sig, login, True)

This works really well for me.

cheers,
jml

Here's the patch:

Index: python/formmethod.py
===================================================================
RCS file: /cvs/Twisted/twisted/python/formmethod.py,v
retrieving revision 1.21
diff -u -r1.21 formmethod.py
--- python/formmethod.py	22 May 2003 21:25:48 -0000	1.21
+++ python/formmethod.py	28 May 2003 06:20:29 -0000
@@ -260,9 +260,10 @@
 class FormMethod:
     """A callable object with a signature."""
 
-    def __init__(self, signature, callable):
+    def __init__(self, signature, callable, takesRequest=False):
         self.signature = signature
         self.callable = callable
+        self.takesRequest = takesRequest
 
     def getArgs(self):
         return tuple(self.signature.methodSignature)
Index: web/woven/form.py
===================================================================
RCS file: /cvs/Twisted/twisted/web/woven/form.py,v
retrieving revision 1.37
diff -u -r1.37 form.py
--- web/woven/form.py	15 May 2003 06:31:43 -0000	1.37
+++ web/woven/form.py	28 May 2003 06:20:31 -0000
@@ -332,7 +332,10 @@
             return self.errback(self.errorModelFactory(request.args, outDict, errDict)).render(request)
         else:
             try:
-                outObj = self.formMethod.call(**outDict)
+                if self.formMethod.takesRequest:
+                    outObj = self.formMethod.call(request=request, **outDict)
+                else:
+                    outObj = self.formMethod.call(**outDict)
             except formmethod.FormException, e:
                 err = request.errorInfo = self.errorModelFactory(request.args, outDict, e)
                 return self.errback(err).render(request)



----- End forwarded message -----
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030529/92bb4d24/attachment.sig>

From tv at twistedmatrix.com  Wed May 28 01:24:31 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Wed, 28 May 2003 10:24:31 +0300
Subject: [Twisted-Python] web forms and authentication in LDAP server
In-Reply-To: <1054076649.21524.16.camel@philosophtware>
References: <1054076649.21524.16.camel@philosophtware>
Message-ID: <20030528072431.GB13849@lapdog>

On Wed, May 28, 2003 at 02:04:10AM +0300, Kaloian Doganov wrote:
> Does anyone work on adding LDAP support for twisted.cred? I am
> interested in writing such module, once I get more experienced with
> Twisted.

	Been there done that.

http://tv.debian.net/software/ldaptor/

http://packages.debian.org/python-ldaptor/

http://ldaptor.bkbits.net:8080/ldaptor/anno/lib/ldaptor/cred.py at 1.3?nav=index.html|src/|src/lib|src/lib/ldaptor

-- 
:(){ :|:&};:



From wari at home.wari.org  Wed May 28 01:48:55 2003
From: wari at home.wari.org (Wari Wahab)
Date: Wed, 28 May 2003 15:48:55 +0800
Subject: [Twisted-Python] SNMP in Twisted
Message-ID: <3ED469E7.5060209@home.wari.org>

I was given the task to have a program to send SNMP get requests and 
recieve SNMP traps. There is a PySNMP package out there, and I guess 
that it's a blocking call to get data from an SNMP server, especially 
when doing a walk style request.

My questions are,
1. Should one attempt on doing the hair raising task of doing the SNMP 
client and Server protocols? (Hopefully, you should never need to write 
your own protocols)
2. Use the PySNMP library as is, no matter how blocking that can be?
3. Use PySNMP calls in a thread?
4. Use the command line executables of ucd-snmp (or net-snmp) and use 
the reactor.spawnProcess() calls. Get SNMP traps using syslog named pipes.

All are valid answers, though I pretty much think that 1. is the best 
way to go, BUT, looking at SNMP rfcs, it could very well prove to be an 
almost impossible task (especially for a newbie like me:).




From andrew-twisted at puzzling.org  Wed May 28 02:07:58 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 28 May 2003 18:07:58 +1000
Subject: [Twisted-Python] SNMP in Twisted
In-Reply-To: <3ED469E7.5060209@home.wari.org>
References: <3ED469E7.5060209@home.wari.org>
Message-ID: <20030528080758.GA10861@frobozz>

On Wed, May 28, 2003 at 03:48:55PM +0800, Wari Wahab wrote:
> I was given the task to have a program to send SNMP get requests and 
> recieve SNMP traps. There is a PySNMP package out there, and I guess 
> that it's a blocking call to get data from an SNMP server, especially 
> when doing a walk style request.
> 
> My questions are,
[...]

Have you seen
    http://twistedmatrix.com/pipermail/twisted-python/2002-December/002456.html
?

(In general, the best approach to Twistifying a protocol in another Python
library is to reuse the message decoding and encoding, but use Twisted to
handle all the networking.  This usually means writing a Protocol subclass
that delegates most of the work in dataReceived to the library, but
obivously this depends on the protocol...)

-Andrew.




From wari at home.wari.org  Wed May 28 03:41:14 2003
From: wari at home.wari.org (Wari Wahab)
Date: Wed, 28 May 2003 17:41:14 +0800
Subject: [Twisted-Python] SNMP in Twisted
In-Reply-To: <20030528080758.GA10861@frobozz>
References: <3ED469E7.5060209@home.wari.org> <20030528080758.GA10861@frobozz>
Message-ID: <3ED4843A.8080600@home.wari.org>

Andrew Bennetts wrote:

>Have you seen
>    http://twistedmatrix.com/pipermail/twisted-python/2002-December/002456.html
>
OMG! That answer one half of my question, thanks. Should of probe around 
first.

>(In general, the best approach to Twistifying a protocol in another Python
>library is to reuse the message decoding and encoding, but use Twisted to
>handle all the networking.  This usually means writing a Protocol subclass
>that delegates most of the work in dataReceived to the library, but
>obivously this depends on the protocol...)
>  
>
So do you mean that twisted is the one sending out bytes to and from the 
network, and pass dataReceived to the library?

This depends if the library has the encode and decode routines right? If 
the library does it's own networking, then I cannot do it this way, am I 
right in saying that?




From m at moshez.org  Wed May 28 03:40:45 2003
From: m at moshez.org (Moshe Zadka)
Date: 28 May 2003 09:40:45 -0000
Subject: [Twisted-Python] SNMP in Twisted
In-Reply-To: <3ED469E7.5060209@home.wari.org>
References: <3ED469E7.5060209@home.wari.org>
Message-ID: <20030528094045.16271.qmail@green.zadka.com>

On Wed, 28 May 2003, Wari Wahab <wari at home.wari.org> wrote:

> 2. Use the PySNMP library as is, no matter how blocking that can be?

It's often possible to use a library *partially*, if it's structured
correctly. E.g., have the network code in Twisted pass in data to some
semi-internal PySNMP function. As an example, this is how the XML-RPC
and SOAP support work -- they use the parsing code from xmlrpclib
and SOAPpy, but use Twisted's network code.

If this isn't possible, see if you can modify PySNMP a little to decouple
the network code from the protocol parsing code, and send back the PySNMP
guys the patch. Often, authors will take this kind of patches, especially
if accompnied by "Twisted support" :). Just don't make it *depend* on Twisted.

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From radix at twistedmatrix.com  Tue May 27 02:01:55 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 27 May 2003 04:01:55 -0400
Subject: [Twisted-Python] Safe Pickling using banana and jelly
In-Reply-To: <1053995887.928.25.camel@d168.stw.stud.uni-saarland.de>; from heiko@ph0enix.homelinux.org on Mon, May 26, 2003 at 20:38:07 -0400
References: <707F4930-8FBA-11D7-A91C-000393C92466@dalkescientific.com> <20030526223106.GC16017@toshi.anaprd01.md.comcast.net> <1053995887.928.25.camel@d168.stw.stud.uni-saarland.de>
Message-ID: <20030527080155.GC29169@toshi.anaprd01.md.comcast.net>

On 2003.05.26 20:38, Heiko Wundram wrote:
> On Tue, 2003-05-27 at 00:31, Christopher Armstrong wrote:
> > Well, by default PB (which I assume is what Heiko is using) does
> 
> No, I'm not using PB, just using jelly and banana on their own for
> encoding network packets. As I thought that it was way too insecure to
> have to code my own object checking function, I've written my own
> serializer in the mean time... :)
> 
> The arguments that Andrew put forth reminded me of Python pickle, and
> that just doesn't work over an insecure transport, with the remote ends
> not even being known (maybe).


It seems you've missed other posts in this thread (or my own? I don't
remember now), that point out that jelly can indeed restrict instantiation
of arbitrary classes. Implementing another half-broken serialization scheme
is definitely not a good solution to any problem :-) Can you be more 
specific about how jelly is reminding you of Python pickle? The recursion
problem he mentioned is indeed, as pointed out, caught, and an error
is returned to the other end.

btw, thanks to Andrew Dalke for an *excellent* beginning of a security
audit for jelly. :-)

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From radix at twistedmatrix.com  Wed May 28 03:45:02 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 28 May 2003 05:45:02 -0400
Subject: [Twisted-Python] SNMP in Twisted
In-Reply-To: <3ED4843A.8080600@home.wari.org>; from wari@home.wari.org on Wed, May 28, 2003 at 05:41:14 -0400
References: <3ED469E7.5060209@home.wari.org> <20030528080758.GA10861@frobozz> <3ED4843A.8080600@home.wari.org>
Message-ID: <20030528094501.GE29169@toshi.anaprd01.md.comcast.net>

On 2003.05.28 05:41, Wari Wahab wrote:
> Andrew Bennetts wrote:
> 
> >Have you seen
> >    http://twistedmatrix.com/pipermail/twisted-python/2002-December/002456.html
> >
> OMG! That answer one half of my question, thanks. Should of probe around 
> first.
> 
> >(In general, the best approach to Twistifying a protocol in another Python
> >library is to reuse the message decoding and encoding, but use Twisted to
> >handle all the networking.  This usually means writing a Protocol subclass
> >that delegates most of the work in dataReceived to the library, but
> >obivously this depends on the protocol...)
> >  
> >
> So do you mean that twisted is the one sending out bytes to and from the 
> network, and pass dataReceived to the library?
> 
> This depends if the library has the encode and decode routines right? If 
> the library does it's own networking, then I cannot do it this way, am I 
> right in saying that?

Not really - the lib might do its own networking, but it'll often have,
as moshez put it, semi-internal methods for doing decoding and encoding.
You just need to bypass its network-using layer.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From heikowu at ceosg.de  Wed May 28 07:09:46 2003
From: heikowu at ceosg.de (Heiko Wundram)
Date: 28 May 2003 15:09:46 +0200
Subject: [Twisted-Python] Safe Pickling using banana and jelly
In-Reply-To: <20030528044538.GC10429@frobozz>
References: <707F4930-8FBA-11D7-A91C-000393C92466@dalkescientific.com>
	 <20030526223106.GC16017@toshi.anaprd01.md.comcast.net>
	 <1053995887.928.25.camel@d168.stw.stud.uni-saarland.de>
	 <20030527080155.GC29169@toshi.anaprd01.md.comcast.net>
	 <1054095712.928.87.camel@d168.stw.stud.uni-saarland.de>
	 <20030528044538.GC10429@frobozz>
Message-ID: <1054127385.928.126.camel@d168.stw.stud.uni-saarland.de>

On Wed, 2003-05-28 at 06:45, Andrew Bennetts wrote:
> Twisted Spread is intended to be safe and secure, because data from the net
> could be from anywhere, so it has to be robust in the face of dangerous
> data.

I know, I was just being a little smartass... ;)

> That's what __getstate__ and __setstate__ are for with pickle; IIRC Jelly
> supports that and also it's own 'getStateToCopyFor' or something along those
> lines.

Sure it is, but both of them are called only for the topmost object from
the inheritance tree, which, when I use private variables, has little
chance to see the variables that are defined below in a way that's
suitable. And returning __dict__ is a little strange, as reassigning to
__dict__ in the __setstate__ mehod won't fix what I need...

> I'm sure PB can handle this.  Have you read "PB Copyable: Passing Complex
> Types", http://twistedmatrix.com/documents/howto/pb-copyable? 

This is not about SenderPonds and ReceiverPonds, but about the simple
thing that LocalHost implements a few other data members, which should
not get sent over the wire, ever! (as e.g. private key, etc.) Of course,
I could use a getStateToCopyFor() to return only the data members that I
want to be returned, and be available in the remote object, but I think
that's kind of a hack... (remember, all my data elemens in all classes
are private) I think a solution which calls only the base classes
__serialize methods (in this example starting with Host) is cleaner.
(That's what aliases are all about.)

> > 3. Support for different serialization protocols. I guess I've not made
> I'm not quite sure what you're saying here.

The serializer supports different protocols right from the start. The
datastream is fixed format, but objects can choose to give unpickled
data storage different meaning according to the serialization protocol
that's chosen. What this works for: I have serialization to network and
serialization to database. To database shouldn't change timeouts, to
network should (what I stated last time). To database should store
private keys, to network shouldn't. Easy solution: Protocol 1 is the
network protocol, which has a alias from LocalHost to Host as specified
under 2, Protocol 2 is the Database protocol, which doesn't have this
alias.

> Again, read http://twistedmatrix.com/documents/howto/pb-copyable.  With PB
> you can control exactly what data is sent over the wire.  You also get
> Referenceables, Copyables and Cacheables, which is considerably richer than
> a simple object protocol that just passes the occasional object-graph.

I'm not using PB, and I don't want to in this project. PB is fine, when
you have to deal with complex objects (just as Pyro is in that case),
but normally, you only have to send simple objects over the wire, and I
guess you're much more worried about the fact that objects might be
instantiated wrongly/have to do some parameter checking/get corrupted on
transport/willfully. And control over this "dark side of networking" is
exactly what this pickler tries to achieve by giving you full control
over the pickling and unpickling process.

> TCP guarantees the data isn't corrupted on the way through.  Use SSL to 
> guarantee that the traffic isn't being sniffed or tampered with in transit.
> PB has an authentication step so that you can know who the clients are.
> Between all this, I'm not sure what problem your signatures are solving that
> isn't already solved?

The transport I use isn't TCP, but UDP. And rewriting PB to use UDP
would be a little strange... :) Anyway, what I actually meant by
signatures: You can use public key encryption/signing to encrypt members
of your data stream. Classes can request to have certain members
encrypted/signed in the serialization stream, just as you can for the
whole pickle, and when unserializing, you can specify what to do when
non-decryptable packets or invalid signature packets are found, without
discarding the whole pickle (which is useful, if you need to pass around
some structures which have private "text" content, but should
nevertheless be readable as to timeout and the like, the class being
called "Data").

> As far as I can see (although I'm no PB expert), PB satisfies 1 and 4.  What
> makes you think it doesn't?

PB could certainly be crafted to satisfy 1+4, but it certainly doesn't
do UDP transport, which I need... And I don't think any PB code which
handles most of the points above is as clean as it is with my own
serializer.

Which isn't bad, of course! PB was just designed with completely
different ideas in mind...

Again just my 5 cents... :)

Heiko.




From lafou at wanadoo.fr  Wed May 28 11:12:23 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: 28 May 2003 19:12:23 +0200
Subject: [Twisted-Python] Woven and wxHtmlWindow
Message-ID: <1054141943.16199.71.camel@biproc>

hello

I'm using twisted to develop a calculation server. The server has a
managment interface written in wxpython. I want to display results in a
dynamic html page (using woven). 

but my wxHtmlWindow refuses to display the page, and I just get a blank
page with :
-----------------


Click Here


-----------------

(whitout the ---)
Here is a link that points to http://server/project/results.rpy
But the url given to wxHtmlWindow is
http://server:8081/project/results.rpy

Anyone got the same problem ?
This is very strange (no trace in logs).

Thx !

-- 
Philippe Lafoucrière <lafou at wanadoo.fr>
InFuzzion




From dp at twistedmatrix.com  Wed May 28 12:31:39 2003
From: dp at twistedmatrix.com (Donovan Preston)
Date: Wed, 28 May 2003 11:31:39 -0700
Subject: [Twisted-Python] Woven and wxHtmlWindow
In-Reply-To: <1054141943.16199.71.camel@biproc>
Message-ID: <9F385C16-913A-11D7-B5A5-00039376B1AE@twistedmatrix.com>

On Wednesday, May 28, 2003, at 10:12 AM, Philippe Lafoucrière wrote:

> hello
>
> I'm using twisted to develop a calculation server. The server has a
> managment interface written in wxpython. I want to display results in a
> dynamic html page (using woven).
>
> but my wxHtmlWindow refuses to display the page, and I just get a blank
> page with :
> -----------------
>
>
> Click Here
>
>
> -----------------
>
> (whitout the ---)
> Here is a link that points to http://server/project/results.rpy
> But the url given to wxHtmlWindow is
> http://server:8081/project/results.rpy
>
> Anyone got the same problem ?
> This is very strange (no trace in logs).

It's trying to do a redirect to http://server:8081/project/results.rpy/ 
(with a slash at the end) and apparently wxHtmlWindow doesn't know how 
to deal with a redirect. You can either put the slash at the end of the 
URL you are requesting, or set addSlash = 0 on your Page instance.

Donovan




From cce at clarkevans.com  Wed May 28 14:55:21 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Wed, 28 May 2003 20:55:21 +0000
Subject: [Twisted-Python] flow module release canidate and future schedule
Message-ID: <20030528205521.GA62480@doublegemini.com>

Hello.  Over this last week, quite alot of work has been put into
the flow module.   As of today, I have other responsibilities which
I must attend... but flow is being used in one of my internal
projects at Axista, Inc. and is quite stable.

I encourage people to try it out.. it's quite nice if
I don't say so myself.

What is flow?

  Flow is a module which leverages generators to provide for
  incremental result multi-stage operations (like http requests) 
  which can cooperate with other operations without blocking.
  See sandbox/flow.html for more information

Current Status:

  0. The documentation (flow.html) is now much more clear
     and "up-to-date" with respect to newer changes.  Please
     take it for a spin.  All of the examples are full-fledged
     programs and should run.

  1. Flow is quite faster now, about 2-3x from the previous
     versions.  This is due to some significant profiling and
     an enhancement proposed by exarkun; in particular, each 
     yield can support returning a row set rather than a 
     single row.  This is a boon for database applications.

  2. Flow supports protocols with one callback, which should
     handle most protocol requirements.   An echo 'client' and
     echo 'server' are included in sandbox/cce/echo.py

  3. Several 'helpers' such as Merge, Zip, are now available
     and well tested (Merge isn't perfect yet though).

  4. Flow supports not only deferreds, but also callbacks;
     this is flow.Callback, which is used, not suprizingly,
     by flow.Protocol 

  5. The "Instruction" mechanism has been revamped to support
     'CallLater' instructions.  This is an internal refactor
     which cleaned up alot of code.

  6. The test suite has been greatly expanded to test these
     items.

Future Directions:

  1. As I start playing with more protocols, I'll probably add
     a few 'filters' which would take a raw flow.Protocol and
     return items by line or by a specified chunk size.

  2. The 'Merge' code needs some reviewing as it isn't perfect
     and doesn't behave quite right yet.   I don't have any
     serious use case for this right now, so it may not get
     fixed for another month or so.

  3. Eventually (probably late this year) I'll consider writing
     flow as a "C" module for speed.  This should be about 2-3x
     faster in most cases.   So, if you are not using flow beacuse
     of speed concerns, keep this in mind and let me know.

Best,

Clark



From bob at redivi.com  Wed May 28 15:30:00 2003
From: bob at redivi.com (Bob Ippolito)
Date: Wed, 28 May 2003 17:30:00 -0400
Subject: [Twisted-Python] flow module release canidate and future schedule
In-Reply-To: <20030528205521.GA62480@doublegemini.com>
Message-ID: <89379CCB-9153-11D7-9FAC-000A95686CD8@redivi.com>

On Wednesday, May 28, 2003, at 16:55 America/New_York, Clark C. Evans 
wrote:
> Future Directions:
>
>   1. As I start playing with more protocols, I'll probably add
>      a few 'filters' which would take a raw flow.Protocol and
>      return items by line or by a specified chunk size.

Take a look at the example I posted to the mailing list last Friday for 
an example of how I did this (per-yield chunk size, not delimiter 
based).  It greatly simplified my gzip/gunzip code.

Also, the "byte pipe" I'm using can surely be accelerated by using 
iovec (in sandbox/exarkun), I basically rewrote it and extended it so 
it could accomodate pipe usage.

>
>   2. The 'Merge' code needs some reviewing as it isn't perfect
>      and doesn't behave quite right yet.   I don't have any
>      serious use case for this right now, so it may not get
>      fixed for another month or so.
>
>   3. Eventually (probably late this year) I'll consider writing
>      flow as a "C" module for speed.  This should be about 2-3x
>      faster in most cases.   So, if you are not using flow beacuse
>      of speed concerns, keep this in mind and let me know.

If I end up finding any significant use for flow, which I almost 
definitely will, I'll help you out with that.

-bob




From gnosis at gnosis.cx  Wed May 28 15:13:21 2003
From: gnosis at gnosis.cx (Dr. David Mertz)
Date: Wed, 28 May 2003 16:13:21 -0500 (CDT)
Subject: [Twisted-Python] Woven example for article
Message-ID: <Pine.LNX.4.44.0305281550520.31004-100000@ringo.siteprotect.com>

Hi developers,

I am doing a series of articles on Twisted Matrix for IBM 
developerWorks (I imagine most of you know who I am; if not, you 
can check my stuff easily).  A first part, already submitted, 
looks at implementing custom protocols, and a bit of the 
low-level stuff in Twisted, which I understand moderately well 
now.  FWIW, I put a copy of the first part at:

  http://gnosis.cx/secret/twisted1.txt

I'm not sure exactly when it will get edited and published by dW.

The next article which I'm now working on wants to look at some 
of the web development features in Twisted.

By way of that, I tried the PicturePile example, from:

  http://twistedmatrix.com/documents/howto/listings/PicturePile/

Discussed at:

  http://twistedmatrix.com/documents/howto/picturepile

I'm not sure exactly which Twisted version the example was 
written for, but I get errors trying to use it (my account at 
python-hosting.com seems to have 1.0.3 installed, and the 
administrator manages the installation).  The browser displays:

  http://gnosis.cx/secret/Failure!.html

(this is a mirror of the actual page).  The server log is:

  http://gnosis.python-hosting.com/PicturePile.log

Any idea how to make this example work? 

Yours, David..

P.S. Further question to follow momentarily... 




From gnosis at gnosis.cx  Wed May 28 16:20:39 2003
From: gnosis at gnosis.cx (Dr. David Mertz)
Date: Wed, 28 May 2003 17:20:39 -0500 (CDT)
Subject: [Twisted-Python] Woven example for article, Part II
In-Reply-To: <Pine.LNX.4.44.0305281550520.31004-100000@ringo.siteprotect.com>
Message-ID: <Pine.LNX.4.44.0305281652220.7672-100000@ringo.siteprotect.com>

Hi again,

I wrote a note a bit ago about my problems running the 
PicturePile example.  But that's not really what I would most 
want to present in my article anyway.

In a tip I wrote for the IBM developerWorks XML Zone, I developed 
a slightly-better-than-trivial example of a remote monitor of 
hits to a website.  The initial custom client/server used XML as 
a line format, but that's not important here.  I often like to 
continue an example over various iterations.

In particular, you can see that I reimplemented this same 
client/server (with slight variations in operation) in Twisted 
for my first article:

  http://gnosis.cx/secret/twisted1.txt

I'd like to continue this idea with more sophisticated--and web 
based--implementations.  One really simple approach is to simply 
create a static page that displays hits, but use the <meta> 
refresh tag to make it load repeatedly.  Meanwhile, a 
long-running script can update this page in the background.  In 
Twisted, it could be:

----------------------------------------------------------------------------
[gnosis at boa twisted]$ cat tlogmaker.py
#!/usr/bin/env python2.2
from twisted.internet import reactor
from webloglib import log_fields
from webloglib import ip, timestamp, request, status, bytes, referrer, agent

LOG = open('access-log')
RECS = []
PAGE = 'www/refresher.html'
TOP, ROW, END, COLOR = ...

def update():
    global RECS
    page = open(PAGE,'w')
    RECS.extend(LOG.readlines())
    RECS = RECS[-35:]
    print >> page, TOP
    odd = 0
    for rec in RECS:
        hit = [field.strip('"') for field in log_fields(rec)]
        if hit[status]=='200' and hit[referrer]!='-':
            resource = hit[request].split()[1]
            print >> page, ROW % (COLOR[odd], hit[referrer], resource)
            odd = not odd
    print >> page, END
    page.close()
    reactor.callLater(5, update)

update()    
reactor.run()
----------------------------------------------------------------------------

Of course, this is completely trivial as a use of Twisted--using 
time.sleep() in the loop would be exactly as good (and I made a 
version that does that for comparison).  The produced page, btw, 
is at:

  http://gnosis.python-hosting.com/refresher.html

But the update script may or may not be running while you check 
the page (which doesn't affect the viewability of the page, just 
its up-to-date-ness.

The next step is probably to show a 'refresher.rpy' variant on 
the same basic thing.  That is straigtforward, and I understand 
how to do that.

But past that, I'd like to create a version that has more 
meaningful interaction with the web browser.  One obvious 
interaction is to let the client select which log fields to 
display--probably using a bunch of checkboxes for those fields 
listed in the second 'from weblog import ...' line of the above 
script.  Maybe this user preference could be stored in a cookie 
(maybe number of rows to display as another option).

I don't really understand Twisted well enough to know what the
most logical approach to this next variant would be.  It seems
like woven is the main web technology in Twisted... but given my
problems running even the bundled example, I'm not sure how to
proceed.

If anyone here would like to help me create an example, that 
would make my next article better--and I'll give you credit for 
the assist.  I like Twisted, but with all the pieces, its hard to 
get started nicely... maybe a good few articles (by me, or 
otherwise) can help bridge the gap for new users (like me :-)).

Yours, David...




From andrew-twisted at puzzling.org  Wed May 28 20:01:12 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu, 29 May 2003 12:01:12 +1000
Subject: [Twisted-Python] Woven example for article
In-Reply-To: <Pine.LNX.4.44.0305281550520.31004-100000@ringo.siteprotect.com>
References: <Pine.LNX.4.44.0305281550520.31004-100000@ringo.siteprotect.com>
Message-ID: <20030529020112.GA12788@frobozz>

On Wed, May 28, 2003 at 04:13:21PM -0500, Dr. David Mertz wrote:
[...]
> 
> I'm not sure exactly which Twisted version the example was 
> written for, but I get errors trying to use it (my account at 
> python-hosting.com seems to have 1.0.3 installed, and the 
> administrator manages the installation).  The browser displays:
> 
>   http://gnosis.cx/secret/Failure!.html

You really should be using Twisted 1.0.5 if you want to use Woven.  It's
finally settling down, but it's been a rapidly moving target for quite a
while.

You should be able to install it locally, if python-hosting.com can't
upgrade in time for your article.  Is there any reason why this isn't an
option?  (If necessary, someone here might be able to donate an account on a
Twisted-enabled box somewhere for you to experiment with...)

-Andrew.




From m at moshez.org  Wed May 28 22:02:00 2003
From: m at moshez.org (Moshe Zadka)
Date: 29 May 2003 04:02:00 -0000
Subject: [Twisted-Python] Woven example for article, Part II
In-Reply-To: <Pine.LNX.4.44.0305281652220.7672-100000@ringo.siteprotect.com>
References: <Pine.LNX.4.44.0305281652220.7672-100000@ringo.siteprotect.com>
Message-ID: <20030529040200.26217.qmail@green.zadka.com>

On Wed, 28 May 2003, "Dr. David Mertz" <gnosis at gnosis.cx> wrote:

> #!/usr/bin/env python2.2
...
> def update():
...
>     page = open(PAGE,'w')
...
>     for rec in RECS:
...
>             print >> page, ROW % (COLOR[odd], hit[referrer], resource)
...
>     print >> page, END
>     page.close()
...

Please don't do this kind of things in example code:

page = open(PAGE+'.tmp', 'w')
...
page.close()
os.rename(PAGE+'.tmp', PAGE)
...

is safer, and lacks race condition. I really wish people would use it
more.

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From itamar at itamarst.org  Wed May 28 22:22:22 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 29 May 2003 00:22:22 -0400
Subject: [Twisted-Python] Woven example for article
In-Reply-To: <Pine.LNX.4.44.0305281550520.31004-100000@ringo.siteprotect.com>
References: <Pine.LNX.4.44.0305281550520.31004-100000@ringo.siteprotect.com>
Message-ID: <20030529002222.4be85559.itamar@itamarst.org>

On Wed, 28 May 2003 16:13:21 -0500 (CDT)
"Dr. David Mertz" <gnosis at gnosis.cx> wrote:

> I am doing a series of articles on Twisted Matrix for IBM 
> developerWorks (I imagine most of you know who I am; if not, you 
> can check my stuff easily).  A first part, already submitted, 

Cool! Just one note - the package is called Twisted, not Twisted Matrix.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From itamar at itamarst.org  Wed May 28 22:30:27 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 29 May 2003 00:30:27 -0400
Subject: [Twisted-Python] Woven example for article, Part II
In-Reply-To: <Pine.LNX.4.44.0305281652220.7672-100000@ringo.siteprotect.com>
References: <Pine.LNX.4.44.0305281550520.31004-100000@ringo.siteprotect.com>
	<Pine.LNX.4.44.0305281652220.7672-100000@ringo.siteprotect.com>
Message-ID: <20030529003027.14a164bf.itamar@itamarst.org>

On Wed, 28 May 2003 17:20:39 -0500 (CDT)

> I don't really understand Twisted well enough to know what the
> most logical approach to this next variant would be.  It seems
> like woven is the main web technology in Twisted... but given my
> problems running even the bundled example, I'm not sure how to
> proceed.

Woven is built on top of twisted.web. You probably want to look at
twisted.web.resource,
http://twistedmatrix.com/documents/howto/web-overview,
twisted.protocol.http.Request and the web examples. Also
http://twistedmatrix.com/users/nafai/pycon-paper/

Not much docs for these parts, but its pretty simple:


from twisted.web import server, static, resource
from twisted.internet import reactor

class MyResource(resource.Resource):

    def render(self, request):
        return "<html><body>%s</body></html>" % request.args

r = MyResource()
r.putChild("pages", static.File("/var/www"))
reactor.listenTCP(8080, server.Site(r))
reactor.run()


-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From cce at clarkevans.com  Wed May 28 23:50:30 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu, 29 May 2003 05:50:30 +0000
Subject: [Twisted-Python] a tranceiver interface
Message-ID: <20030529055030.GA64244@doublegemini.com>

There are two forms of data flow constructs available, push and pull.  
The "push" based consumer/producer flow looks something like...

    class receiver:
        """ what is a consumer """
        def start(self):
            'what is called to start the stream'
        def result(self, value):
            'what is called for each data item in the stream'
        def finish(self):
            'what is called at the end of the stream'

    class transmitter:
        """ what is a producer """
        def __init__(self, receiver):
            self.receiver = consumer
            # push data to receiver when ready

    class tranceiver(receiver, transmitter):
        """ what is both a producer and a consumer
            by default, just be a simple 'passthrough'
        """
        def start(self):
            self.receiver.start()
        def result(self, value):
            # process result
            self.receiver.result(value)
        def finish(self):
            self.receiver.finish()
    
The equivalent version of a 'passthrough' tranceiver in "pull" land 
can be written nicely as a generator:
 
    def consumer(producer):
        # start: what is called to start the stream
        for result in producer:
            # what is called for each data item in the stream
            yield result
        # finish: what is called at the end of the stream

What is intersting is that the producer is passed the consumer (not the 
other way around) as the 'push' example, and that the 3 states are 
encapsulated not by a particular callback function, but more by the 
position within the generator.  Unfortunately, direct use of generator 
like this doesn't give other operations a chance to process, but this 
shortcoming can be addressed by using the flow module:

    def consumer(producer):
        # start: what is called to start the stream
        producer = flow.wrap(producer)
        yield producer
        for result in producer:
            # what is called for each data item in the stream
            yield result
            yield producer
        # finish: what is called at the end of the stream

In this way, the consumer works exactly as it did before, only
that now other operations can proceed (if the producer is not
immediately ready) when "yield producer" is encountered.

Best,

Clark



From jml at ids.org.au  Thu May 29 02:02:22 2003
From: jml at ids.org.au (Jonathan Lange)
Date: Thu, 29 May 2003 18:02:22 +1000
Subject: [Twisted-Python] Sending and receiving mail in a Twisted app
Message-ID: <20030529080222.GE846@sting>

Hello,

I'd like to have a Twisted application that sends and responds to mail. 
There aren't any howtos on this.

Apart from reading stuff in twisted.mail and the associated tests, are 
there any other resources I could use to get a grip on this part of 
Twisted? 
Thanks,
jml



From pobrien at orbtech.com  Thu May 29 07:39:52 2003
From: pobrien at orbtech.com (Patrick K. O'Brien)
Date: Thu, 29 May 2003 08:39:52 -0500
Subject: [Twisted-Python] listings/pclients/multiple.py typo
Message-ID: <200305290839.52437.pobrien@orbtech.com>

From listings/pclients/multiple.py:

    def __getstate__(self):
        state = styles.Versioned.__getstate__(self)
        state['client'] = {}
        return state

Shouldn't that be 'clients':

    def __getstate__(self):
        state = styles.Versioned.__getstate__(self)
        state['clients'] = {}
        return state

-- 
Patrick K. O'Brien
Orbtech      http://www.orbtech.com/web/pobrien
-----------------------------------------------
"Your source for Python programming expertise."
-----------------------------------------------




From pobrien at orbtech.com  Thu May 29 08:31:47 2003
From: pobrien at orbtech.com (Patrick K. O'Brien)
Date: Thu, 29 May 2003 09:31:47 -0500
Subject: [Twisted-Python] Perspective / Client confusion
Message-ID: <200305290931.47277.pobrien@orbtech.com>

I've read all the spread and pb docs several times now, and I'm still confused 
about some issues, particularly having to do with cred.  I've created a pb 
app and am trying to figure out the best way to use Perspectives.  Can 
someone explain why I would want to use one Perspective instance that kept 
track of attached clients, as shown in listings/pclients/multiple.py, versus 
creating a Perspective instance for each client, versus something more 
dynamic as hinted at in http://www.twistedmatrix.com/documents/howto/pb-cred:

<quote>
In addition, .attached() has the opportunity to return a different 
Perspective, if it so chooses. You could have all users initially access the 
same Perspective, but then as they connect (and .attached() gets called), 
give them unique Perspectives based upon their individual Identities. The 
client will get a reference to whatever .attached() returns, so the default 
case is to 'return self'.
</quote>

This application is sort of like a traditional database application.  There 
will be admin-type users as well as employees with more limited authority.  
Customers will also have access to the application but will only be able to 
make changes to their own account information.  I have a very simple demo 
that I am using to try out different approaches, which you can find here, if 
you want to see how I'm coding things:

http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/pypersyst/sandbox/pobrien/twistedbank/

Since I'm using PyPerSyst to persist all the application data, I could also 
store user information there and use that to determine what a user can/cannot 
do, rather than rely on Perspectives.  But I'm not sure that is the right 
approach.  Any help would be greatly appreciated.

-- 
Patrick K. O'Brien
Orbtech      http://www.orbtech.com/web/pobrien
-----------------------------------------------
"Your source for Python programming expertise."
-----------------------------------------------




From warner at lothar.com  Thu May 29 12:12:29 2003
From: warner at lothar.com (Brian Warner)
Date: Thu, 29 May 2003 11:12:29 -0700 (PDT)
Subject: [Twisted-Python] listings/pclients/multiple.py typo
References: <200305290839.52437.pobrien@orbtech.com>
Message-ID: <20030529.111229.88714094.warner@lothar.com>

"Patrick K. O'Brien" <pobrien at orbtech.com> writes:

> Shouldn't that be 'clients':

Absolutely right. I just committed the fix.. thanks for the catch!

 -Brian



From ibook at gnosis.cx  Wed May 28 22:52:57 2003
From: ibook at gnosis.cx (david mertz)
Date: Thu, 29 May 2003 00:52:57 -0400
Subject: [Twisted-Python] Woven example for article, Part II
Message-ID: <3ED59229.6010109@gnosis.cx>

Moshe Zadka wrote:
|page = open(PAGE+'.tmp', 'w')
|...
|page.close()
|os.rename(PAGE+'.tmp', PAGE)
|is safer, and lacks race condition.

Moshe is right here, of course.  I was being sloppy in trying to write a
quick example; but I'll make his change for the actual article.

Yours, David...

P.S. To Itamar: OK, I'll adjust my usage to properly call the package
just "Twisted".

To Andrew, and generally: I have installed a local copy of 1.0.5, and
that at least makes the PicturePile example work (there are a few minor
errors in the samples, but straightforward to fix)--it might be worth
mentioning a minimum (maximum?) version of the package needed for
tutorial examples.  For someone trying to get a handle, like me, it is
not immediately obvious what will fail subtely in 1.0.3 but work in
1.0.5.




From joe at overdrivepc.com  Thu May 29 10:17:16 2003
From: joe at overdrivepc.com (Joe Brown)
Date: Thu, 29 May 2003 12:17:16 -0400
Subject: [Twisted-Python] Perspective / Client confusion
In-Reply-To: <200305290931.47277.pobrien@orbtech.com>
References: <200305290931.47277.pobrien@orbtech.com>
Message-ID: <3ED6328C.6010200@overdrivepc.com>

Hi Patrick,

I'm pretty much in the same boat as you.  Although I think I have a 
grasp no the different uses for mutiple/single prespectives, I'm 
currently struggeling with dbcred and how I want to apply prospectives 
to my rdbms application.

I'd love to do an IRC session, but I don't know which IRC server to use :o

I've found chatzilla (included in the www.mozilla.org web browser 
distribution) to be a nice IRC client, BTW

-Joe




From glyph at twistedmatrix.com  Thu May 29 14:37:49 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 29 May 2003 16:37:49 -0400
Subject: [Twisted-Python] Perspective / Client confusion
In-Reply-To: <200305290931.47277.pobrien@orbtech.com>
Message-ID: <6972FDC2-9215-11D7-A665-000393C9700E@twistedmatrix.com>

On Thursday, May 29, 2003, at 10:31 AM, Patrick K. O'Brien wrote:

> Since I'm using PyPerSyst to persist all the application data, I could 
> also
> store user information there and use that to determine what a user 
> can/cannot
> do, rather than rely on Perspectives.  But I'm not sure that is the 
> right
> approach.  Any help would be greatly appreciated.

Perspective is a very simple concept, with an almost-equally-simple 
representation.  It just means "a token representing the user's 
presence and permissions within the context of a particular service".  
So, you should be able to use PyPerSyst to store Perspective subclass 
instances as the "user information" that you want to keep in your 
application.




From pobrien at orbtech.com  Thu May 29 18:03:22 2003
From: pobrien at orbtech.com (Patrick K. O'Brien)
Date: Thu, 29 May 2003 19:03:22 -0500
Subject: [Twisted-Python] Perspective / Client confusion
In-Reply-To: <6972FDC2-9215-11D7-A665-000393C9700E@twistedmatrix.com>
References: <6972FDC2-9215-11D7-A665-000393C9700E@twistedmatrix.com>
Message-ID: <200305291903.22466.pobrien@orbtech.com>

On Thursday 29 May 2003 03:37 pm, Glyph Lefkowitz wrote:
> On Thursday, May 29, 2003, at 10:31 AM, Patrick K. O'Brien wrote:
> > Since I'm using PyPerSyst to persist all the application data, I could
> > also
> > store user information there and use that to determine what a user
> > can/cannot
> > do, rather than rely on Perspectives.  But I'm not sure that is the
> > right
> > approach.  Any help would be greatly appreciated.
>
> Perspective is a very simple concept, with an almost-equally-simple
> representation.  It just means "a token representing the user's
> presence and permissions within the context of a particular service".
> So, you should be able to use PyPerSyst to store Perspective subclass
> instances as the "user information" that you want to keep in your
> application.

Itamar helped me a bit on #twisted, but I'm still a bit unsure of myself.  The 
problem seems to be that there are a number of different ways to do 
everything, and it isn't entirely clear to me how to evaluate the options.  
For example, I need more than one Perspective subclass.  And I'd like the 
same person (Identity) to be able to log into the application with whichever 
Perspective is available to them.

Itamar suggested that the best approach would be to have one service, several 
Perspective subclasses, and one Perspective instance for each client.  So now 
I think I need to override the service.createPerspective() to create the 
right kind of Perspective instance, or create the Perspective independently 
and then send it to service.addPerspective().  It also seems to me that I 
should hide the Perspective details such that when a user logs in they simply 
choose which of their perspectives they want to use (admin, user, customer, 
for example).  It also seems to me that I should generate the perspective 
names automatically, in order to keep them unique within the service 
(something like identity.name + perspective.__class__.__name__, perhaps).

If I'm going to persist identities and perspectives using PyPerSyst, I also 
need to be careful what references those objects contain, such as 
perspective.service and service.authorizer.  I'm not sure I want those 
persisted, so I probably need to add __getstate__ and __setstate__ methods to 
my subclasses.  I also need a way to load persistent indentities and 
perspectives from PyPerSyst when the application starts.  I know I've seen 
mention of those "load" methods, but I couldn't find any code examples.

I also need to figure out how to allow someone to create new identities and 
perspectives in the first place.  So I probably need to have the app start 
with a "root" type user/perspective that has the authority to create new 
identities and perspectives.  Maybe I need another Perspective subclass that 
deals only with that capability.

Am I making this more complicated than it needs to be?  I'd love to hear 
someone say "yes" and then show me a simple way.  It seems like what I'm 
trying to do would be pretty common for anyone creating a PB application that 
had many users that needed to be divided into groups, with each group having 
different capabilities.  The plumbing all seems to be there (Identity, 
Perspective, Service, Authorizer, etc.), but hooking everything together 
still eludes me.

-- 
Patrick K. O'Brien
Orbtech      http://www.orbtech.com/web/pobrien
-----------------------------------------------
"Your source for Python programming expertise."
-----------------------------------------------




From pobrien at orbtech.com  Thu May 29 18:55:51 2003
From: pobrien at orbtech.com (Patrick K. O'Brien)
Date: Thu, 29 May 2003 19:55:51 -0500
Subject: [Twisted-Python] Perspective / Client confusion
In-Reply-To: <200305291903.22466.pobrien@orbtech.com>
References: <6972FDC2-9215-11D7-A665-000393C9700E@twistedmatrix.com> <200305291903.22466.pobrien@orbtech.com>
Message-ID: <200305291955.51622.pobrien@orbtech.com>

On Thursday 29 May 2003 07:03 pm, Patrick K. O'Brien wrote:
> Itamar suggested that the best approach would be to have one service,
> several Perspective subclasses, and one Perspective instance for each
> client.  So now I think I need to override the service.createPerspective()
> to create the right kind of Perspective instance, or create the Perspective
> independently and then send it to service.addPerspective().  It also seems
> to me that I should hide the Perspective details such that when a user logs
> in they simply choose which of their perspectives they want to use (admin,
> user, customer, for example).  It also seems to me that I should generate
> the perspective names automatically, in order to keep them unique within
> the service (something like identity.name + perspective.__class__.__name__,
> perhaps).

This is working so far:

    identity = auth.createIdentity('root')
    identity.setPassword('password')
    identity.save()

    perspective = AdminPerspective(identity)
    service.addPerspective(perspective)
    identity.addKeyForPerspective(perspective)

    perspective = UserPerspective(identity)
    service.addPerspective(perspective)
    identity.addKeyForPerspective(perspective)

    application.run()

The init for my base Perspective class looks like this:

    def __init__(self, identity):
        """Create a Perspective for the identity."""
        if not isinstance(identity, auth.identityClass):
            raise TypeError("Expected identity instance, got %s." % identity)
        perspectiveName = identity.name + ':' + self.__class__.__name__
        pb.Perspective.__init__(self, perspectiveName, identity.name)

-- 
Patrick K. O'Brien
Orbtech      http://www.orbtech.com/web/pobrien
-----------------------------------------------
"Your source for Python programming expertise."
-----------------------------------------------




From m at moshez.org  Thu May 29 18:59:49 2003
From: m at moshez.org (Moshe Zadka)
Date: 30 May 2003 00:59:49 -0000
Subject: [Twisted-Python] Woven example for article, Part II
In-Reply-To: <3ED59229.6010109@gnosis.cx>
References: <3ED59229.6010109@gnosis.cx>
Message-ID: <20030530005949.6666.qmail@green.zadka.com>

On Thu, 29 May 2003, david mertz <ibook at gnosis.cx> wrote:

> To Andrew, and generally: I have installed a local copy of 1.0.5, and
> that at least makes the PicturePile example work (there are a few minor
> errors in the samples, but straightforward to fix)--it might be worth
> mentioning a minimum (maximum?) version of the package needed for
> tutorial examples.  For someone trying to get a handle, like me, it is
> not immediately obvious what will fail subtely in 1.0.3 but work in
> 1.0.5.

There is a reason the documentation comes with the package: it is relevant
to the version it comes with. In particular, the documentation on tm.com
is only relevant to "latest stable". This is just like Python: if you
read documentation from http://www.python.org/doc/current/, don't count
on it working with Python 2.1.

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From ibook at gnosis.cx  Thu May 29 21:02:59 2003
From: ibook at gnosis.cx (david mertz)
Date: Thu, 29 May 2003 23:02:59 -0400
Subject: [Twisted-Python] Woven example for article, Part II
Message-ID: <3ED6C9E3.7000403@gnosis.cx>

On Thu, 29 May 2003, david mertz <ibook at gnosis.cx> wrote:
 > To Andrew, and generally: I have installed a local copy of 1.0.5, and
 > that at least makes the PicturePile example work (there are a few
 > minor errors in the samples, but straightforward to fix)

Moshe Zadka wrote:
|There is a reason the documentation comes with the package:
|it is relevant to the version it comes with. In particular, the
|documentation on tm.com is only relevant to "latest stable". This is
|just like Python: if you read documentation from 
|http://www.python.org/doc/current/, don't count on it working with 
|Python 2.1.

This is very unhelpful, Moshe.  The documentation on the Twisted website
(as mentioned in my earlier note), unlike most Python standard
documentation, does not indicate in which versions the examples work
(PicturePile, specifically).  Nothing like "new in 1.0.4".  Moreover,
the errors did not make it obvious there was a version issue (and in any
case, the example still needed some minor corrections to work with
1.0.5).  Andrew's advice (and some by email) was helpful, but it was
hardly obvious a priori what the issue was.

Moreover, I have not encountered any change log that addresses woven 
version differences in any detail.  Quite possibly there is such a 
document, but I do not now know where it is.

None of this, btw., means to demean Twisted itself.  I do think it could 
use a bit more directed documentation, but the concept and subpackages 
themselves seem very useful and well conceived.

Yours, David...




From itamar at itamarst.org  Thu May 29 23:23:40 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 30 May 2003 01:23:40 -0400
Subject: [Twisted-Python] Woven example for article, Part II
In-Reply-To: <3ED6C9E3.7000403@gnosis.cx>
References: <3ED6C9E3.7000403@gnosis.cx>
Message-ID: <20030530012340.16d9d214.itamar@itamarst.org>

On Thu, 29 May 2003 23:02:59 -0400
david mertz <ibook at gnosis.cx> wrote:

> Moreover, I have not encountered any change log that addresses woven 
> version differences in any detail.  Quite possibly there is such a 
> document, but I do not now know where it is.

The ChangeLog usually doesn't cover code that is unstable. In general,
*always* use the latest version of Twisted. Certain parts are pretty
stable (e.g. the networking core in twisted.internet), but other parts
are under continous development. It's not good that the docs don't
mention what's in a given version of Twisted, but we have enough work on
our hands writing them and keeping them up to date.

Typically, unless the module has a docstring saying the API is stable,
it probably isn't. There will usually be a backwards compatability layer
if changes are made, though. Woven's been pretty good about that, and is
now settling down into stability.

Twisted developers will typically develop off CVS, since we're always
adding features we need for our own projects.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From dalke at dalkescientific.com  Thu May 29 23:47:07 2003
From: dalke at dalkescientific.com (Andrew Dalke)
Date: Thu, 29 May 2003 23:47:07 -0600
Subject: [Twisted-Python] Woven example for article, Part II
In-Reply-To: <20030530012340.16d9d214.itamar@itamarst.org>
Message-ID: <262071F2-9262-11D7-B9B9-000393C92466@dalkescientific.com>

Itamar Shtull-Trauring:
> Typically, unless the module has a docstring saying the API is stable,
> it probably isn't. There will usually be a backwards compatability 
> layer
> if changes are made, though. Woven's been pretty good about that, and 
> is
> now settling down into stability.

How comfortable should I be with these modules?

conch/__init__.py:This module is unstable.
conch/authorizer.py:This module is unstable.
conch/error.py:This module is unstable.
conch/identity.py:This module is unstable.
cred/authorizer.py:Stability: semi-stable
cred/identity.py:Stability: semi-stable
cred/perspective.py:Stability: semi-stable
cred/service.py:Stability: semi-stable
cred/util.py:Stability: semi-stable
internet/defer.py:    API Stability: Unstable
internet/error.py:API Stability: semi-stable
internet/interfaces.py:API Stability: stable, other than IReactorUDP 
(semi-stabl
e) and
internet/interfaces.py:IReactorMulticast (unstable).
internet/interfaces.py:    This interface is semi-stable.
internet/interfaces.py:    This interface is semi-stable.
internet/interfaces.py:    This interface is semi-stable.
internet/protocol.py:API Stability: stable, other than ClientCreator.
internet/protocol.py:    The API for this class is not stable.
internet/protocol.py:    This class is unstable.
internet/protocol.py:    This class is unstable.
internet/pyuisupport.py:API Stability: unstable
internet/stdio.py:API Stability: semi-stable
internet/tksupport.py:API Stability: semi-stable
internet/udp.py:API Stability: unstable
internet/win32eventreactor.py:API Stability: semi-stable
names/client.py:API Stability: Unstable
names/resolve.py:API Stability: Unstable
names/server.py:API Stability: Unstable
news/database.py:Stability: semi-stable
news/news.py:Stability: semi-stable
protocols/basic.py:API Stability: semi-stable.
protocols/dns.py:API Stability: Unstable
protocols/ftp.py:Stability: semi-stable
protocols/ftp.py:    This class is unstable (it will be heavily 
refactored to su
pport dynamic
protocols/ftp.py:    This class is semi-stable.
protocols/http.py:API Stability: Server HTTP support is semi-stable, 
client HTTP
  is unstable.
protocols/imap4.py:API Stability: Semi-stable
protocols/irc.py:Stability: semi-stable.
protocols/msn.py:Stability: unstable.
protocols/nntp.py:Stability: semi-stable
protocols/oscar.py:This module is unstable.
protocols/policies.py:    """Stability: Unstable"""
protocols/policies.py:    """Stability: Unstable"""
protocols/policies.py:    Stability: Unstable
protocols/policies.py:    Stability: Unstable
python/roots.py:Stability: Unstable
runner/__init__.py:Stability: semi-stable
runner/inetd.py:Stability: semi-stable
runner/inetdtap.py:Stability: semi-stable
spread/__init__.py:Stability: semi-stable
spread/banana.py:Stability: semi-stable
spread/banana.py:Future Plans: This module is almost entirely stable.  
The same
caveat applies
spread/flavors.py:Stability: semi-stable
spread/jelly.py:Stability: semi-stable
spread/newjelly.py:Stability: semi-stable
spread/pb.py:Stability: semi-stable
spread/publish.py:Stability: semi-stable
spread/refpath.py:Stability: semi-stable
web/guard.py:This code is unstable and will probably be reimplemented 
at some point.
web/soap.py:API Stability: unstable
web/xmlrpc.py:API Stability: semi-stable
words/service.py:Future Plans: Woah boy.  This module is incredibly 
unstable.  I
t has an
words/tendril.py:Stability: No more stable than 
L{words<twisted.words.service>}.

Some of these semi-stable modules

By your definition, the following are the only stable modules

internet/abstract.py:API Stability: stable
internet/app.py:API Stability: stable
internet/base.py:API Stability: stable
internet/default.py:API Stability: stable
internet/defer.py:API Stability: stable
internet/fdesc.py:API Stability: stable
internet/gtk2reactor.py:API Stability: stable
internet/gtkreactor.py:API Stability: stable
internet/javareactor.py:API Stability: stable
internet/kqreactor.py:API Stability: stable
internet/pollreactor.py:API Stability: stable
internet/protocol.py:API Stability: stable, other than ClientCreator.
internet/qtreactor.py:API Stability: stable
internet/ssl.py:API Stability: stable
internet/threads.py:API Stability: stable
internet/wxsupport.py:API Stability: stable
protocols/toc.py:This module is stable, but deprecated.
runner/inetdconf.py:Stability: stable
spread/banana.py:Future Plans: This module is almost entirely stable.  
The same caveat applies

And what about modules which are not marked as stable or unstable?

% grep -i stable enterprise/*
%

					Andrew Dalke
					dalke at dalkescientific.com




From radix at twistedmatrix.com  Thu May 29 23:56:12 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 30 May 2003 01:56:12 -0400
Subject: [Twisted-Python] Woven example for article, Part II
In-Reply-To: <262071F2-9262-11D7-B9B9-000393C92466@dalkescientific.com>; from dalke@dalkescientific.com on Fri, May 30, 2003 at 01:47:07 -0400
References: <262071F2-9262-11D7-B9B9-000393C92466@dalkescientific.com>
Message-ID: <20030530055612.GC493@toshi.anaprd01.md.comcast.net>

On 2003.05.30 01:47, Andrew Dalke wrote:
> Itamar Shtull-Trauring:
> > Typically, unless the module has a docstring saying the API is stable,
> > it probably isn't. There will usually be a backwards compatability 
> > layer
> > if changes are made, though. Woven's been pretty good about that, and 
> > is
> > now settling down into stability.
> 
> How comfortable should I be with these modules?

We only offer stability info, we don't control your mind. :-)

> > The same caveat applies
> 
> And what about modules which are not marked as stable or unstable?
> 
> % grep -i stable enterprise/*
> %

There's a relevant FAQ item on this:

http://twistedmatrix.com/documents/howto/faq

In CVS, I've updated the name of the FAQ to just "Which parts 
of Twisted are stable", rather than being specific to 1.0, btw.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From tv at twistedmatrix.com  Fri May 30 01:31:04 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Fri, 30 May 2003 10:31:04 +0300
Subject: [Twisted-Python] Low-level networking in Twisted
In-Reply-To: <20030523183127.GA19720@lapdog>
References: <20030523183127.GA19720@lapdog>
Message-ID: <20030530073104.GA26662@lapdog>

On Fri, May 23, 2003 at 09:31:27PM +0300, Tommi Virtanen wrote:
>         I'm submitting it for review at an early stage so you can all
>         bash me to dea^W^W^W^Wgive me guidance on how to build it.
>         Especially look at what I did with AbstractDatagramProtocol,
>         how the classes interact, etc.

	As per Moshe's request, I switched from inheritance to
	interfaces. AbstractDatagramProtocol is still there,
	as I want to share code that used to be in DatagramProtocol
	with things that definitely aren't UDP protocols.

	If you have any objections, please say something fast;
	I will commit the code soon.

	http://twistedmatrix.com/~tv/lowlevel-networking-2.patch

-- 
:(){ :|:&};:



From pobrien at orbtech.com  Fri May 30 06:04:33 2003
From: pobrien at orbtech.com (Patrick K. O'Brien)
Date: Fri, 30 May 2003 07:04:33 -0500
Subject: [Twisted-Python] Perspective / Client confusion
In-Reply-To: <200305300936.45781.luc.stepniewski@adelux.fr>
References: <6972FDC2-9215-11D7-A665-000393C9700E@twistedmatrix.com> <200305291955.51622.pobrien@orbtech.com> <200305300936.45781.luc.stepniewski@adelux.fr>
Message-ID: <200305300704.33461.pobrien@orbtech.com>

On Friday 30 May 2003 02:36 am, Luc Stepniewski wrote:
> On Friday 30 May 2003 02:55, Patrick K. O'Brien wrote:
> > This is working so far:
> >
> >     identity = auth.createIdentity('root')
> >     identity.setPassword('password')
> >     identity.save()
> >
> >     perspective = AdminPerspective(identity)
> >     service.addPerspective(perspective)
> >     identity.addKeyForPerspective(perspective)
> >
> >     perspective = UserPerspective(identity)
> >     service.addPerspective(perspective)
> >     identity.addKeyForPerspective(perspective)
>
> If you do this, when the user root/password will log on, how will twisted
> know to which perspective to connect to? How will it differenciate your
> connection as adminperspective or userperpective, as you log as the same
> user/pass?

If you look at twisted.spread.pb you'll see that the pb.connect() function 
takes both a username (same as identity.name) and perspectiveName as 
parameters:

def connect(host, port, username, password, serviceName,
            perspectiveName=None, client=None, timeout=None):
    """Connects and authenticates, then retrieves a PB service.

    Required arguments:
       - host -- the host the service is running on
       - port -- the port on the host to connect to
       - username -- the name you will be identified as to the authorizer
       - password -- the password for this username
       - serviceName -- name of the service to request

    Optional (keyword) arguments:
       - perspectiveName -- the name of the perspective to request, if
            different than the username
       - client -- XXX the \"reference\" argument to
                  perspective.Perspective.attached
       - timeout -- see twisted.internet.tcp.Client

    @returns: A Deferred instance that gets a callback when the final
              Perspective is connected, and an errback when an error
              occurs at any stage of connecting.
    """

So my demo/hack client application supplies those details when a user logs on:

    def main(self):
        name = raw_input('Enter your login name (root): ')
        if not name:
            name = 'root'
        password = raw_input('Enter your password (password): ')
        if not password:
            password = 'password'
        perspective = raw_input('Enter your perspective (root:admin): ')
        if not perspective:
            perspective = 'root:admin'
        df = pb.connect(host='localhost',
                        port=8789,
                        username=name,
                        password=password,
                        serviceName='BankingService',
                        perspectiveName=perspective,
                        client=self,
                        timeout=30)
        df.addCallbacks(self.gotPerspective, self.noPerspective)
        reactor.run()

-- 
Patrick K. O'Brien
Orbtech      http://www.orbtech.com/web/pobrien
-----------------------------------------------
"Your source for Python programming expertise."
-----------------------------------------------




From itamar at itamarst.org  Fri May 30 08:27:01 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 30 May 2003 10:27:01 -0400
Subject: [Twisted-Python] Woven example for article, Part II
In-Reply-To: <262071F2-9262-11D7-B9B9-000393C92466@dalkescientific.com>
References: <20030530012340.16d9d214.itamar@itamarst.org>
	<262071F2-9262-11D7-B9B9-000393C92466@dalkescientific.com>
Message-ID: <20030530102701.1d16348a.itamar@itamarst.org>

On Thu, 29 May 2003 23:47:07 -0600
Andrew Dalke <dalke at dalkescientific.com> wrote:

> How comfortable should I be with these modules?

Depends how many people use them. The more people use it, the more
chances there will be backwards compatability when things change. We
don't change things just for fun, either - if you use, say, FTP server,
you will soon find out why it needs a rewrite.

Woven was under *massive* development over the past few months, but even
so, most old code didn't break. At some point in the future it will not
be b/c, but that's why there are DeprecationWarnings.



From ibook at gnosis.cx  Fri May 30 00:28:13 2003
From: ibook at gnosis.cx (david mertz)
Date: Fri, 30 May 2003 02:28:13 -0400
Subject: [Twisted-Python] Woven example for article, Part II
Message-ID: <3ED6F9FD.9000009@gnosis.cx>

Itamar Shtull-Trauring wrote:
|The ChangeLog usually doesn't cover code that is unstable. In general,
|*always* use the latest version of Twisted.

Well, that sounds nice; but it's kinda impractical in a lot of contexts.
As I mentioned in an upthread comment, my web host at python-hosting.com
has 1.0.3 installed.  I've emailed Remi asking him to upgrade--and I
suppose he will--but not everyone maintains their own installation/host,
nor does everyone want to reinstall large libraries every time s/he
writes a new script.

Moreover, for me in particular, I want to write some examples for
articles.  If I write something that works in 1.0.5, but breaks in 1.0.6
and past, that's bad for readers (and makes me look a little worse).
And as things go, probably the next Twisted version will be out before
my article current article is published.  But the story is pretty much
the same if I were to implement something for a client--I don't want my
software breaking everytime the library changes.

I'm not really complaining about any of this.  Publishers pay me money
to make informed guesses about what software will be stable and what
will change (among many other judgements).  But it does make it
challenging to write the sort of thing I write that covers Twisted.
I'll probably wind up going a little light on woven because of
this--which is a little bit too bad, since templating is a technology a
lot of readers would be interested in.

Yours, David...




From itamar at itamarst.org  Fri May 30 11:23:21 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 30 May 2003 13:23:21 -0400
Subject: [Twisted-Python] Woven example for article, Part II
In-Reply-To: <3ED6F9FD.9000009@gnosis.cx>
References: <3ED6F9FD.9000009@gnosis.cx>
Message-ID: <20030530132321.6b61fa40.itamar@itamarst.org>

On Fri, 30 May 2003 02:28:13 -0400
david mertz <ibook at gnosis.cx> wrote:

> the same if I were to implement something for a client--I don't want
> my software breaking everytime the library changes.

We do have *backwards* compatability! the problem you have now is with
using new features with old versions of the software, which is a totally
different problem. Some unstable parts will break in the future - if
you're unsure about specific code, ask us.

I doubt anything that works with current Woven will break in the future,
given we have quite a few apps using it.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From m at moshez.org  Fri May 30 12:07:31 2003
From: m at moshez.org (Moshe Zadka)
Date: 30 May 2003 18:07:31 -0000
Subject: [Twisted-Python] Woven example for article, Part II
In-Reply-To: <3ED6F9FD.9000009@gnosis.cx>
References: <3ED6F9FD.9000009@gnosis.cx>
Message-ID: <20030530180731.2430.qmail@green.zadka.com>

On Fri, 30 May 2003, david mertz <ibook at gnosis.cx> wrote:

> Moreover, for me in particular, I want to write some examples for
> articles.  If I write something that works in 1.0.5, but breaks in 1.0.6
> and past, that's bad for readers (and makes me look a little worse).

But you missed what Itamar said: we treat backwards compatibility seriously.
If you'll check the FAQ, we even have questions for upgrading scripts from
before woven was called woven. Software doesn't break when Twisted upgrades.
But if you try and run scripts from one version of Twisted on a *lower*
one you're on your own.

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From glyph at twistedmatrix.com  Fri May 30 10:53:35 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 30 May 2003 12:53:35 -0400
Subject: [Twisted-Python] Woven example for article, Part II
In-Reply-To: <20030530055612.GC493@toshi.anaprd01.md.comcast.net>
Message-ID: <40F7270C-92BF-11D7-A665-000393C9700E@twistedmatrix.com>

On Friday, May 30, 2003, at 01:56 AM, Christopher Armstrong wrote:

> We only offer stability info, we don't control your mind. :-)

Who's "we", kimosabe - mind control is certainly on my agenda.

>> How comfortable should I be with these modules?

The modules that you mentioned have mostly accurate stability info, 
with the exception of banana - we tried to stabilize that one before we 
had enough users, performance testing, and security auditing, so there 
are some tweaks that will be happening in an upcoming rewrite.  
twisted.internet.interfaces looks like it's a little inconsistent, 
though -  Itamar, would you look into updating that?

If it says "stable", then we are committed to changing things very 
little, and providing extensive (and probably indefinite) maintenance 
of the existing interface even if things do change.

If it says "semi-stable", you can probably only join IRC when releases 
happen and ask anyone if the changes are likely to impact you.  (You 
could attempt to infer this from CVS logs and the ChangeLog file, but 
considering the quantity and subtlety of changes that happen each 
release, it's probably for all concerned just to ask.)  These 
interfaces will change seldom and typically be well-announced if 
anything major happens.

If it specifically says "unstable", you should be tracking CVS and on a 
first-name basis with at least one Twisted developer, preferably the 
maintainer of the module of your choice :).




From glyph at twistedmatrix.com  Fri May 30 12:21:13 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 30 May 2003 14:21:13 -0400
Subject: [Twisted-Python] Woven example for article, Part II
In-Reply-To: <20030530180731.2430.qmail@green.zadka.com>
Message-ID: <7EDBD8CA-92CB-11D7-A665-000393C9700E@twistedmatrix.com>

On Friday, May 30, 2003, at 02:07 PM, Moshe Zadka wrote:

> Software doesn't break when Twisted upgrades.

While I echo the general sentiment, I think it's a little overconfident 
to be making this claim unqualified.  We _try_ to make sure that 
software doesn't break when Twisted upgrades, but we don't have a build 
farm for external applications, and we don't have any 
backwards-compatibility regression tests.




From ibook at gnosis.cx  Fri May 30 14:23:10 2003
From: ibook at gnosis.cx (david mertz)
Date: Fri, 30 May 2003 16:23:10 -0400
Subject: [Twisted-Python] Woven example for article, Part II
Message-ID: <3ED7BDAE.7040906@gnosis.cx>

Moshe Zadka wrote:
 > Software doesn't break when Twisted upgrades.

Glyph Lefkowitz
|While I echo the general sentiment, I think it's a little overconfident
|to be making this claim unqualified.

I don't mean to belabor the point, but my first try at the woven
tutorial example produced a DeprecationWarning as part of its traceback.
My first thought seeing that was that I probably needed an *earlier*
version of Twisted, rather than a *later* one, to make the example work.

As it turns out, that warning was misleading, since I was apparently
using an older Twisted version with a newer server script.  I'm not
going to bother sorting out exactly what is deprecated, current, and
phased out... but I think I've figured out enough to determine that
Glyph has the better advice: less than everything stays backward
compatible.





From jmhodge at bgnet.bgsu.edu  Sat May 31 09:54:36 2003
From: jmhodge at bgnet.bgsu.edu (Jeff Hodges)
Date: 31 May 2003 11:54:36 -0400
Subject: [Twisted-Python] pb.Copyable docs
Message-ID: <1054396476.13297.22.camel@Gecko>

As a newb, I've found the howtos invaluable but I came across a problem
when I attempted to write code based on pb.Copyable class.  Some of the
code holds vaguely described variables such as "state" and
"perspective".  I've inferred a little bit from other bits of
documentation but can't seem to fit it all together.  This line was most
disconcerting to me:

"XXX: understand, then explain use of varying cached state depending
upon perspective."

Anyone help a poor newbie out? Thanks, folks.
	-- Jeff






From screwtape at froup.com  Fri May 30 23:29:54 2003
From: screwtape at froup.com (Tim Allen)
Date: Sat, 31 May 2003 15:29:54 +1000
Subject: [Twisted-Python] Woven and WML
Message-ID: <E8EF77B4-9328-11D7-A0D7-003065D61A3E@froup.com>

I recently got a new WAP-capable phone, and since you can do a lot of 
interesting things by pointing it at various URLs, I thought I'd try 
making a cute little website in Woven for my phone to browse.

Unfortunately, it seems that this is impossible. The resulting markup 
from my simple Woven test page had all sorts of woven-stuff all through 
it - such as pattern attributes that hadn't been removed, and id 
attributes that were woven's internal IDs, rather than the IDs I tried 
to set. Modern, capacious HTML browsers wouldn't care, I guess, but my 
phone's little brain overloaded and gave up.

Is this just the way Woven works, or am I likely doing something wrong?

For the record, twisted.web can serve up static WML just fine, provided 
the following patch is applied:

Index: twisted/web/static.py
===================================================================
RCS file: /cvs/Twisted/twisted/web/static.py,v
retrieving revision 1.91
diff -u -r1.91 static.py
--- twisted/web/static.py       13 May 2003 04:36:21 -0000      1.91
+++ twisted/web/static.py       31 May 2003 05:25:41 -0000
@@ -175,6 +175,7 @@
          ".tif": "image/tiff",
          ".tiff": "image/tiff",
          ".txt": "text/plain",
+        ".wml": "text/vnd.wap.wml",
          ".xul": "application/vnd.mozilla.xul+xml",
          ".zip": "application/x-zip",
          ".patch": "text/plain",




From dp at twistedmatrix.com  Fri May 30 23:50:43 2003
From: dp at twistedmatrix.com (Donovan Preston)
Date: Fri, 30 May 2003 22:50:43 -0700
Subject: [Twisted-Python] Woven and WML
In-Reply-To: <E8EF77B4-9328-11D7-A0D7-003065D61A3E@froup.com>
Message-ID: <D1706E21-932B-11D7-A64D-000A95864FC4@twistedmatrix.com>

On Friday, May 30, 2003, at 10:29 PM, Tim Allen wrote:

> I recently got a new WAP-capable phone, and since you can do a lot of 
> interesting things by pointing it at various URLs, I thought I'd try 
> making a cute little website in Woven for my phone to browse.

Cool :-)

> Unfortunately, it seems that this is impossible. The resulting markup 
> from my simple Woven test page had all sorts of woven-stuff all 
> through it - such as pattern attributes that hadn't been removed, and 
> id attributes that were woven's internal IDs, rather than the IDs I 
> tried to set. Modern, capacious HTML browsers wouldn't care, I guess, 
> but my phone's little brain overloaded and gave up.

The woven-specific attributes should really all be removed -- any that 
are left in are just there because I have been lazy about it, since as 
you observe modern browsers don't care. I'll try to go through and make 
sure woven outputs clean XHTML by the next release... I have been 
meaning to do it for a while anyway.

The tendency for woven to overwrite ids you try to set has been fixed 
in CVS. Also, since several people have requested it, I will remove the 
auto-id setting unless you are using LivePage, which is the only thing 
that uses it.

> Is this just the way Woven works, or am I likely doing something wrong?

I would consider these bugs, and thanks for the report!

Donovan




From itamar at itamarst.org  Sat May 31 20:02:28 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sat, 31 May 2003 22:02:28 -0400
Subject: [Twisted-Python] tuntap and friends
Message-ID: <20030531220229.7977bbbf.itamar@itamarst.org>

I think this code should be in its own package.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



