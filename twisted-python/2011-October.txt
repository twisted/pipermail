From techtonik at gmail.com  Sat Oct  1 12:01:17 2011
From: techtonik at gmail.com (anatoly techtonik)
Date: Sat, 1 Oct 2011 19:01:17 +0300
Subject: [Twisted-Python] [ANN] Pyflakes 0.5.0
In-Reply-To: <4E628554.3040501@twistedmatrix.com>
References: <CAMcKhMQy_fnb13Co0s6y+LKgsizeMJTUFqGaPQocaUT0N=VgGQ@mail.gmail.com>
	<4E628554.3040501@twistedmatrix.com>
Message-ID: <CAPkN8xJ2tOauDkO+oVFcvmBHFcuMMX+jWRY5GTC2uB8B2cX5-Q@mail.gmail.com>

New pyflakes is integrated into Spyder beta3 that is just released.
http://code.google.com/p/spyderlib/source/detail?r=104724af845aecfdfee0db4b355ba01840e9459b

Good job, everyone! =)
--
anatoly t.



On Sat, Sep 3, 2011 at 10:51 PM, Glyph <glyph at twistedmatrix.com> wrote:
> Thanks, Tristan! ?Great to see that maintenance is continuing :).
>
> (Now, off to upgrade Pyflakes everywhere...)
>
> On 09/03/2011 01:26 PM, Tristan Seligmann wrote:
>> -----BEGIN PGP SIGNED MESSAGE-----
>> Hash: SHA512
>>
>> It is my unexpected pleasure to announce the release of Pyflakes
>> 0.5.0, the first release in several years, and available now from
>> PyPI[1].
>>
>> Highlights of this release include the use of the built-in AST instead
>> of the compiler module, and support for various new syntax constructs
>> in Python 2.7. Note that development of Pyflakes (as well as the other
>> divmod.org projects) has moved to Launchpad[2] since the last release.
>>
>> [1] http://pypi.python.org/packages/source/p/pyflakes/pyflakes-0.5.0.tar.gz#md5=568dab27c42e5822787aa8a603898672
>>
>> [2] https://launchpad.net/pyflakes
>> -----BEGIN PGP SIGNATURE-----
>> Version: GnuPG v2.0.18 (GNU/Linux)
>>
>> iQIcBAEBCgAGBQJOYmL+AAoJEFjA+xzeO3YAme4P/AxLuy0WJN2zG97my1oEwky9
>> VT79BwnxOqR4NB7I1dRKE3PG4Llgl6frAa0SouM12Dr0QZj9Ug3qHAmmf+TZFrF6
>> OIQcBUGkZW7EanBhCbjmfqo+0atJ8toAcj9uyF7Db/0A7gCDw160JIMnmTmxu8z6
>> 3r5xRLNSnxs4jj6OSViv9oHNs2r2lpU/RObkGXy6EHxMgezYqw84FbA61fxquK4p
>> +J1n++vzfiasqgcQFFU3R67T0P2gWUe0C6pv/D+CurSCOdgQJv4LeRtNeYgKhw/W
>> rN0/3cERXGyRMa4JYDbFyP2G8lrpOuWo2F+jFtEGAxgziK8EqCK58ZSeqMBsodJ9
>> slAZobSQkrUj6GfpNKdW5mjYRqymBmUhPFc+sUI2poGb3zvMnWmUa2tiSfwl9uxO
>> 9Di82XXAztKba8++cGJQCbuONiLRPgW5kArz5dRz3jFVdAZYL7xUvah4uznwfazc
>> CA8Q0tiXXoL7X1sT6heNu4VRtnJfEh5LojFdizA4nJEpNssZrPFkSZMv+eSR4Sow
>> 8u2n4f07od6EBzHMhEyqFN7goaniW05VL+EvMdC5px+brnyKOIoLSAGWptBL5EYL
>> aaAb2zRrebyr/u5vGa+sKEXcoW2TEsc9qO8p/nNSetcoIcNfDwnd3cdyJPU+lYbn
>> Wctc68Y+xNWChiuTYa3e
>> =kKgi
>> -----END PGP SIGNATURE-----
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From exarkun at twistedmatrix.com  Sun Oct  2 00:05:22 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 02 Oct 2011 04:05:22 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1317528322.68.1081757835@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20111002/c6431f3b/attachment.htm 

From _ at lvh.cc  Wed Oct  5 16:34:52 2011
From: _ at lvh.cc (Laurens Van Houtven)
Date: Wed, 5 Oct 2011 22:34:52 +0200
Subject: [Twisted-Python] Sent e-mails coming up empty
Message-ID: <CAE_Hg6bu28UOS+MduS5udS8uDzJ1z6QMOjx9W+5O6zt3dBC6cg@mail.gmail.com>

Hey,


I've hacked some code together based on smtpclient_tls.py and radix's
article on how to send e-mail:
http://radix.twistedmatrix.com/2010/07/how-to-send-good-unicode-email-with.html

Here's what I've come up with: http://paste.pocoo.org/show/487918/

The e-mail arrives, but it's as if the body is empty. The from address is
wrong (it uses my login email), there's no subject, no body... I've pointed
my debugger at the problem, but the repr looks pretty okay:

'Content-Type: multipart/alternative;\n
boundary="===============6076587290379738777=="\nMIME-Version: 1.0\nSubject:
Content Access\nTo: _ at lvh.cc\nFrom:
dc83518c-4eea-447f-a9d8-29e29022e6f8 at myotherdomain.com\n\n--===============6076587290379738777==\nMIME-Version:
1.0\nContent-Type: text/html; charset="utf-8"\nContent-Transfer-Encoding:
quoted-printable\n\n<html>\n<body>\nOh
hello!!!!!\n</body>\n</html>\n--===============6076587290379738777==\nMIME-Version:
1.0\nContent-Type: text/plain; charset="utf-8"\nContent-Transfer-Encoding:
quoted-printable\n\n\nOh
hello!!!!!\n\n--===============6076587290379738777==--'

How do I go about debugging this further?


cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20111005/ecfe33d4/attachment.htm 

From stephen at thorne.id.au  Wed Oct  5 16:46:01 2011
From: stephen at thorne.id.au (Thorne, Stephen)
Date: Wed, 5 Oct 2011 21:46:01 +0100
Subject: [Twisted-Python] Sent e-mails coming up empty
In-Reply-To: <CAE_Hg6bu28UOS+MduS5udS8uDzJ1z6QMOjx9W+5O6zt3dBC6cg@mail.gmail.com>
References: <CAE_Hg6bu28UOS+MduS5udS8uDzJ1z6QMOjx9W+5O6zt3dBC6cg@mail.gmail.com>
Message-ID: <CAFPU7=sxwN3W1o8_4bK1TrDO7K+1iNLCPXvqMxDCXMyGhxEVww@mail.gmail.com>

Have you tried rewinding the stringio with .seek(0,0) first?

Stephen

On Wed, Oct 5, 2011 at 21:34, Laurens Van Houtven <_ at lvh.cc> wrote:

> Hey,
>
>
> I've hacked some code together based on smtpclient_tls.py and radix's
> article on how to send e-mail:
> http://radix.twistedmatrix.com/2010/07/how-to-send-good-unicode-email-with.html
>
> Here's what I've come up with: http://paste.pocoo.org/show/487918/
>
> The e-mail arrives, but it's as if the body is empty. The from address is
> wrong (it uses my login email), there's no subject, no body... I've pointed
> my debugger at the problem, but the repr looks pretty okay:
>
> 'Content-Type: multipart/alternative;\n
> boundary="===============6076587290379738777=="\nMIME-Version: 1.0\nSubject:
> Content Access\nTo: _ at lvh.cc\nFrom:
> dc83518c-4eea-447f-a9d8-29e29022e6f8 at myotherdomain.com\n\n--===============6076587290379738777==\nMIME-Version:
> 1.0\nContent-Type: text/html; charset="utf-8"\nContent-Transfer-Encoding:
> quoted-printable\n\n<html>\n<body>\nOh
> hello!!!!!\n</body>\n</html>\n--===============6076587290379738777==\nMIME-Version:
> 1.0\nContent-Type: text/plain; charset="utf-8"\nContent-Transfer-Encoding:
> quoted-printable\n\n\nOh
> hello!!!!!\n\n--===============6076587290379738777==--'
>
> How do I go about debugging this further?
>
>
> cheers
> lvh
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20111005/1c14e2a0/attachment.htm 

From _ at lvh.cc  Wed Oct  5 16:56:26 2011
From: _ at lvh.cc (Laurens Van Houtven)
Date: Wed, 5 Oct 2011 22:56:26 +0200
Subject: [Twisted-Python] Sent e-mails coming up empty
In-Reply-To: <CAFPU7=sxwN3W1o8_4bK1TrDO7K+1iNLCPXvqMxDCXMyGhxEVww@mail.gmail.com>
References: <CAE_Hg6bu28UOS+MduS5udS8uDzJ1z6QMOjx9W+5O6zt3dBC6cg@mail.gmail.com>
	<CAFPU7=sxwN3W1o8_4bK1TrDO7K+1iNLCPXvqMxDCXMyGhxEVww@mail.gmail.com>
Message-ID: <65AF0871-407F-4140-9183-2AA1F1C62419@lvh.cc>

Eek!

As Stephen somewhat tongue-in-cheekly pointed out, this was fixed by rewinding the StringIO ;)

cheers
lvh



On 05 Oct 2011, at 22:46, Thorne, Stephen wrote:

> Have you tried rewinding the stringio with .seek(0,0) first?
> 
> Stephen
> 
> On Wed, Oct 5, 2011 at 21:34, Laurens Van Houtven <_ at lvh.cc> wrote:
> Hey,
> 
> 
> I've hacked some code together based on smtpclient_tls.py and radix's article on how to send e-mail: http://radix.twistedmatrix.com/2010/07/how-to-send-good-unicode-email-with.html
> 
> Here's what I've come up with: http://paste.pocoo.org/show/487918/
> 
> The e-mail arrives, but it's as if the body is empty. The from address is wrong (it uses my login email), there's no subject, no body... I've pointed my debugger at the problem, but the repr looks pretty okay: 
> 
> 'Content-Type: multipart/alternative;\n boundary="===============6076587290379738777=="\nMIME-Version: 1.0\nSubject: Content Access\nTo: _ at lvh.cc\nFrom: dc83518c-4eea-447f-a9d8-29e29022e6f8 at myotherdomain.com\n\n--===============6076587290379738777==\nMIME-Version: 1.0\nContent-Type: text/html; charset="utf-8"\nContent-Transfer-Encoding: quoted-printable\n\n<html>\n<body>\nOh hello!!!!!\n</body>\n</html>\n--===============6076587290379738777==\nMIME-Version: 1.0\nContent-Type: text/plain; charset="utf-8"\nContent-Transfer-Encoding: quoted-printable\n\n\nOh hello!!!!!\n\n--===============6076587290379738777==--'
> 
> How do I go about debugging this further?
> 
> 
> cheers
> lvh
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 1306 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20111005/0b8faa20/attachment.bin 

From fabian.rothfuchs at googlemail.com  Thu Oct  6 12:22:18 2011
From: fabian.rothfuchs at googlemail.com (Fabian Rothfuchs)
Date: Thu, 06 Oct 2011 18:22:18 +0200
Subject: [Twisted-Python] dataReveived() buffer best practice?
Message-ID: <CAB3A25A.1C2DA%fabian.rothfuchs@gmail.com>

Hey there,

I'm currently implementing a Telnet Client, which is actually talking to a
Console Server mapping Telnet to an RS232 interface.
Further I'm using Twisted's conch.telnet lib to build that client, and I got
a little situation here where I wonder if there's already a best practice.
I guess the best way to introduce the problem is to show an example in the
following.

This is the output of a regular Terminal session when connecting to the
Telnet Server:
#------
drudge:~ rothfuchs$ telnet localhost 8001
Trying ::1...
Connected to localhost.
Escape character is '^]'.

>MM
 USERID:0004
 PASSWORD:
#------

In my Twisted Client, I implemented dataReceived() to just do:
[?]
def dataReceived(self, data):
??..print 'received: %s'
??..print
[?]

and this is the result:
#------
drudge:Desktop rothfuchs$ p s12.py
received: 
>

received: MM
 USE

received: RID:
#------

I also ran a tcpdump to confirm ? The opposite server is obviously pushing
content to the socket in arbitrary frequencies, ending up in my
dataReceived() method to get called arbitrarily as well.

My question: is there any best practice for buffer techniques here?

Thanks
Fabian


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20111006/dffde2cb/attachment.htm 

From JOHN at egh.com  Thu Oct  6 17:02:26 2011
From: JOHN at egh.com (John Santos)
Date: Thu, 6 Oct 2011 17:02:26 -0400
Subject: [Twisted-Python] dataReveived() buffer best practice?
In-Reply-To: <CAB3A25A.1C2DA%fabian.rothfuchs@gmail.com>
Message-ID: <1111006162755.12930J-100000@Ives.egh.com>


I'm doing something very similar.


I have (greatly simplified, because I'm doing lots of other stuff 
with the data):

    def applicationDataReceived(self, data):

	global savedText, delayCounter
        newline = "\n"
        text = savedText + data
        savedText = ""
        # normalize text (replace escapes, search for and normalize newlines)
        text = text.replace("\000","")
        text = text.replace("\033","$")
        text = text.replace("\r\n",newline)
        text = text.replace("\r",newline)
        lines = text.split(newline)
        for line in lines[:-1]:
            if len(line):
                write( line+newline )
        savedText = lines[-1]
        # (if savedText <> "" then we are waiting for more...)

        def printPartialMessage(myCounter):
            global savedText, savedTimestamp, delayCounter
            #print "delay routine called %i %i" % (myCounter, delayCounter)
            if myCounter == delayCounter:
                if savedText <> "":
                    newline = "\n"
                    write( savedText+" (terminator not seen)"+newline )
                    savedText = ""
                delayCounter = 0
            # If the passed counter (myCounter) equals the current value of
            # the delay counter, then we know the savedText is that left over
            # when we were queued.  Otherwise, more text has come in and
            # caused the counter to be incremented and more calls to be
            # made to printPartialMessage.  We'll let them handle it.

        if savedText <> "":
            delayCounter += 1
            reactor.callLater(60, printPartialMessage, delayCounter)



I'm actually writing this to a time-stamped log file, but I've removed
all the code to maintain the time stamps, create and roll over the log
files, etc.

If you are willing to wait indefinitely for partial lines, you can get rid
of the "printPartialMessage()" deferred, and the conditional call to it. 

delayCounter is a "pending calls to printPartialMessage()" counter (reset
to 0 when there are none), because the only one we are interested in is
the last one.  Instead, the deferred could be canceled when new text
arrives, but I think the ability to cancel defereds is newer than this
code.  I just let the deferreds exexute and dismiss them immediately if
they aren't current.

The constant "60" in the reactor.callLater() is the number of seconds I'm
willing to wait for a partial message to receive more data.

You might not want to normalize the text (since I'm printing to a text log
file, I didn't want embedded escape sequences to cause conniptions when
the log file was printed to a terminal), or you might want to use a 
different line terminator. 

Also, for conch.telnet, I think you want to override 
"applicationDataReceived()" and not "dataReceived()" because 
"dataReceived()" sees all the telnet protocol negotiations, which you
might want to let conch.telnet handle.



-- 
John Santos
Evans Griffiths & Hart, Inc.
781-861-0670 ext 539

From exarkun at twistedmatrix.com  Thu Oct  6 17:06:35 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 06 Oct 2011 21:06:35 -0000
Subject: [Twisted-Python] dataReveived() buffer best practice?
In-Reply-To: <CAB3A25A.1C2DA%fabian.rothfuchs@gmail.com>
References: <CAB3A25A.1C2DA%fabian.rothfuchs@gmail.com>
Message-ID: <20111006210635.23178.44174862.divmod.xquotient.5@localhost.localdomain>

On 04:22 pm, fabian.rothfuchs at googlemail.com wrote:
>Hey there,
>
>I'm currently implementing a Telnet Client, which is actually talking 
>to a
>Console Server mapping Telnet to an RS232 interface.
>
>[snip]
>
>and this is the result:
>#------
>drudge:Desktop rothfuchs$ p s12.py
>received:
>>
>
>received: MM
>USE
>
>received: RID:
>#------
>
>I also ran a tcpdump to confirm ? The opposite server is obviously 
>pushing
>content to the socket in arbitrary frequencies, ending up in my
>dataReceived() method to get called arbitrarily as well.

This is not so obvious.  Any hop along the route may fragment the data.
>My question: is there any best practice for buffer techniques here?

This question is too vague.  What problem are you trying to solve?

Jean-Paul


From fabian.rothfuchs at googlemail.com  Thu Oct  6 19:04:50 2011
From: fabian.rothfuchs at googlemail.com (Fabian Rothfuchs)
Date: Fri, 07 Oct 2011 01:04:50 +0200
Subject: [Twisted-Python] dataReveived() buffer best practice?
In-Reply-To: <20111006210635.23178.44174862.divmod.xquotient.5@localhost.localdomain>
Message-ID: <CAB3FF0C.1C310%fabian.rothfuchs@gmail.com>



On 10/6/11 11:06 PM, "exarkun at twistedmatrix.com"
<exarkun at twistedmatrix.com> wrote:

>On 04:22 pm, fabian.rothfuchs at googlemail.com wrote:
>>Hey there,
>>
>>I'm currently implementing a Telnet Client, which is actually talking
>>to a
>>Console Server mapping Telnet to an RS232 interface.
>>
>>[snip]
>>
>>and this is the result:
>>#------
>>drudge:Desktop rothfuchs$ p s12.py
>>received:
>>>
>>
>>received: MM
>>USE
>>
>>received: RID:
>>#------
>>
>>I also ran a tcpdump to confirm ? The opposite server is obviously
>>pushing
>>content to the socket in arbitrary frequencies, ending up in my
>>dataReceived() method to get called arbitrarily as well.
>
>This is not so obvious.  Any hop along the route may fragment the data.
>>My question: is there any best practice for buffer techniques here?
>
>This question is too vague.  What problem are you trying to solve?
>
>Jean-Paul


JP,

What do you mean w/ 'any hop along the route' ?

My problem is, that I need something similar to telnetlib's `read_until()`
method (in my case read_until('USERID:')), although 'USERID:' may be sent
in independent events.
I wonder if this is up to me to implement, or if there's any Twisted-style
best practice.

Cheers
Fab


>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From exarkun at twistedmatrix.com  Thu Oct  6 19:27:57 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 06 Oct 2011 23:27:57 -0000
Subject: [Twisted-Python] dataReveived() buffer best practice?
In-Reply-To: <CAB3FF0C.1C310%fabian.rothfuchs@gmail.com>
References: <20111006210635.23178.44174862.divmod.xquotient.5@localhost.localdomain>
	<CAB3FF0C.1C310%fabian.rothfuchs@gmail.com>
Message-ID: <20111006232757.23178.1690096227.divmod.xquotient.16@localhost.localdomain>

On 11:04 pm, fabian.rothfuchs at googlemail.com wrote:
>
>
>On 10/6/11 11:06 PM, "exarkun at twistedmatrix.com"
><exarkun at twistedmatrix.com> wrote:
>>On 04:22 pm, fabian.rothfuchs at googlemail.com wrote:
>>>Hey there,
>>>
>>>I'm currently implementing a Telnet Client, which is actually talking
>>>to a
>>>Console Server mapping Telnet to an RS232 interface.
>>>
>>>[snip]
>>>
>>>and this is the result:
>>>#------
>>>drudge:Desktop rothfuchs$ p s12.py
>>>received:
>>>>
>>>
>>>received: MM
>>>USE
>>>
>>>received: RID:
>>>#------
>>>
>>>I also ran a tcpdump to confirm ?FD The opposite server is obviously
>>>pushing
>>>content to the socket in arbitrary frequencies, ending up in my
>>>dataReceived() method to get called arbitrarily as well.
>>
>>This is not so obvious.  Any hop along the route may fragment the 
>>data.
>>>My question: is there any best practice for buffer techniques here?
>>
>>This question is too vague.  What problem are you trying to solve?
>>
>>Jean-Paul
>
>
>JP,
>
>What do you mean w/ 'any hop along the route' ?

Potentially many routers are involved in getting packets from your 
(client) machine to the console server.  Any one of them is allowed to 
fragment the data.  The console server could well be writing "USERID:", 
but that's no guarantee that you'll receive "USERID:".
>My problem is, that I need something similar to telnetlib's 
>`read_until()`
>method (in my case read_until('USERID:')), although 'USERID:' may be 
>sent
>in independent events.
>I wonder if this is up to me to implement, or if there's any Twisted- 
>style
>best practice.

Take a look at twisted.conch.insults.helper.ExpectableBuffer.  You can 
hook it up to your telnet connection and then use its `expect? method to 
wait for a particular string to show up.

ExpectableBuffer is an ITerminalTransport, so you actually have to hook 
it up via twisted.conch.insults.insults.ClientProtocol, a vt102 
implementation.  If the server is incompatible with vt102, then you 
might need to build your own thing like ExpectableBuffer but without the 
vt102 layer.

Jean-Paul


From andrew.mahone at gmail.com  Fri Oct  7 01:45:12 2011
From: andrew.mahone at gmail.com (Andrew Mahone)
Date: Fri, 7 Oct 2011 01:45:12 -0400
Subject: [Twisted-Python] Ticket #4519,
	other possible spawnProcess enhancments
Message-ID: <CAOUOUDw8huB75UtLNZSk0JWKEk9EqiOZEveV4-eseAXxWRZiZg@mail.gmail.com>

I've been working on http://twistedmatrix.com/trac/ticket/4159 and
there has been a bit of discussion on IRC regarding appropriate
interfaces for various things. I think in the long run, the only
python state that setupChild should be allowed to modify should be
args, environment, and the win32 StartupInfo object. This leaves my
own personal use case for it impossible, but I'm working out how to
handle that - special childFDs objects. My proposal so far is that
there be a ProcessFileDescriptor object that inherits from
FileDescriptor. It would add a setup method, which Process would call
in the parent, and separate finishChild and finishParent methods that
would handle things like closing the other end of any pipe-like
objects, and would return a file descriptor - the child would place
this fd in childFDs, the parent would use it for communications with
the child, in the case of objects that wrap pipes or PTYs. I would
also extend the win32 implementation to include some limited support
for childFDs - they could be used to allow the child to inherit
specific file handles as its stdin, stdout, and stderr, instead of
using these exclusively for communications with the parent, so that
redirection to a pipe, to a file, and the building of pipelines could
be accomplished on win32 (I have a project that uses twisted for this
purpose, and I don't use windows, but I would like support to at least
be possible).

I'm seeking comments on whether an extended childFDs interface is the
best way to manipulate the inherited files of the child process, and
whether, if so, fdmap ought to be visible in setupChild at all - in my
opinion, setupChild should be strictly for things like setting the
child PID in an environment variable or as a command line argument,
manipulating scheduler and other parameters external to twisted
itself, and other things of that nature, and the existing childFDs
mechanism should handle any manipulation of file redirection or
inheritance. If there are suggestions on what an extended childFD
object ought to look like, these are welcome as well - I think the
specified methods should handle trivial cases even on platforms
without fork, and should handle nearly anything that really is a file
descriptor on POSIX platforms, but maybe there is something I have
missed.
-- 
Andrew Mahone
andrew DOT mahone AT gmail DOT com


From p.mayers at imperial.ac.uk  Fri Oct  7 07:47:46 2011
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 07 Oct 2011 12:47:46 +0100
Subject: [Twisted-Python] dataReveived() buffer best practice?
In-Reply-To: <20111006210635.23178.44174862.divmod.xquotient.5@localhost.localdomain>
References: <CAB3A25A.1C2DA%fabian.rothfuchs@gmail.com>
	<20111006210635.23178.44174862.divmod.xquotient.5@localhost.localdomain>
Message-ID: <4E8EE6E2.8040204@imperial.ac.uk>

On 10/06/2011 10:06 PM, exarkun at twistedmatrix.com wrote:

>> I also ran a tcpdump to confirm ? The opposite server is obviously
>> pushing
>> content to the socket in arbitrary frequencies, ending up in my
>> dataReceived() method to get called arbitrarily as well.
>
> This is not so obvious. Any hop along the route may fragment the data.

It is quite unusual (though not unheard of) for something to re-segment 
the TCP stream. IP level fragmentation might occur, but it's relatively 
uncommon in todays IP networks, and is anyway irrelevant to TCP - the 
TCP stack will only see a reassembled IP packet.


From p.mayers at imperial.ac.uk  Fri Oct  7 07:56:06 2011
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 07 Oct 2011 12:56:06 +0100
Subject: [Twisted-Python] dataReveived() buffer best practice?
In-Reply-To: <CAB3A25A.1C2DA%fabian.rothfuchs@gmail.com>
References: <CAB3A25A.1C2DA%fabian.rothfuchs@gmail.com>
Message-ID: <4E8EE8D6.7050609@imperial.ac.uk>

On 10/06/2011 05:22 PM, Fabian Rothfuchs wrote:

> I also ran a tcpdump to confirm ? The opposite server is obviously
> pushing content to the socket in arbitrary frequencies, ending up in my
> dataReceived() method to get called arbitrarily as well.

Yes, this is normal. TCP stacks are free to segment the data as they see 
fit. Machine-readable protocols have framing for this reason. Sadly, 
text streams run over telnet/SSH/CLI interfaces are usually badly 
framed, if at all.

>
> My question: is there any best practice for buffer techniques here?

Twisted comes with a bunch of higher level protocol sub-classes that 
buffer the data for you, then deliver chunks of the buffer to methods on 
your class.

For example, lineReceiver delivers whole lines.

There may well be a conch helper class that does the same.

The generic do-it-yourself approach is to append the data to a buffer, 
then look for complete protocol messages in the buffer and process them 
in order, possibly with a state machine. e.g.

def dataReceived(self, data):
   self.buffer += data

   if self.state=='waiting-for-userid':
     if 'USERID:' in self.buffer:
       # send userid
       self.transport.write('0004\r')
       self.state = 'waiting-for-password'
       # empty the buffer
       self.buffer = ''

   elif self.state=='waiting-for-password':
     if 'PASSWORD:' in self.buffer:
       self.transport.write(password+'\r')
       self.state = 'logged-in'
       self.buffer = ''

...and so on. This is boring to write by hand, so see if there is 
something in Twisted you can use already.


From glyph at twistedmatrix.com  Fri Oct  7 09:11:35 2011
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 7 Oct 2011 09:11:35 -0400
Subject: [Twisted-Python] dataReveived() buffer best practice?
In-Reply-To: <4E8EE6E2.8040204@imperial.ac.uk>
References: <CAB3A25A.1C2DA%fabian.rothfuchs@gmail.com>
	<20111006210635.23178.44174862.divmod.xquotient.5@localhost.localdomain>
	<4E8EE6E2.8040204@imperial.ac.uk>
Message-ID: <BE751B5E-9377-4E7F-A18E-8B5FEDAB2406@twistedmatrix.com>


On Oct 7, 2011, at 7:47 AM, Phil Mayers wrote:

> On 10/06/2011 10:06 PM, exarkun at twistedmatrix.com wrote:
> 
>>> I also ran a tcpdump to confirm ? The opposite server is obviously
>>> pushing
>>> content to the socket in arbitrary frequencies, ending up in my
>>> dataReceived() method to get called arbitrarily as well.
>> 
>> This is not so obvious. Any hop along the route may fragment the data.
> 
> It is quite unusual (though not unheard of) for something to re-segment 
> the TCP stream. IP level fragmentation might occur, but it's relatively 
> uncommon in todays IP networks, and is anyway irrelevant to TCP - the 
> TCP stack will only see a reassembled IP packet.

I am skeptical; my recollection (the last time I worked at this layer of the network) is that this happens all the time over the public internet between diverse endpoints.

However, it's also mostly irrelevant: the thing at issue here is the distinction between the call to send() and the call to recv() - or in Twisted terms, the call to transport.write() and the argument to dataReceived, which will be smashed up into quasi-arbitrary lengths at the very least by your kernel and your router; you can send as much as you want at once via .write() but dataReceived will tend to get called with chunks around 1-2x your path MTU.

But the sizes are also not important.  The point is that TCP is about streams, not packets, and you have to deal with arbitrary chunking if you want your code to work right.  What layer of the network this happens at is not important to your code :).

-glyph

From p.mayers at imperial.ac.uk  Fri Oct  7 18:49:05 2011
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 07 Oct 2011 23:49:05 +0100
Subject: [Twisted-Python] dataReveived() buffer best practice?
In-Reply-To: <BE751B5E-9377-4E7F-A18E-8B5FEDAB2406@twistedmatrix.com>
References: <CAB3A25A.1C2DA%fabian.rothfuchs@gmail.com>	<20111006210635.23178.44174862.divmod.xquotient.5@localhost.localdomain>	<4E8EE6E2.8040204@imperial.ac.uk>
	<BE751B5E-9377-4E7F-A18E-8B5FEDAB2406@twistedmatrix.com>
Message-ID: <4E8F81E1.10004@imperial.ac.uk>

On 10/07/2011 02:11 PM, Glyph wrote:

>> It is quite unusual (though not unheard of) for something to
>> re-segment the TCP stream. IP level fragmentation might occur, but
>> it's relatively uncommon in todays IP networks, and is anyway
>> irrelevant to TCP - the TCP stack will only see a reassembled IP
>> packet.
>
> I am skeptical; my recollection (the last time I worked at this layer
> of the network) is that this happens all the time over the public
> internet between diverse endpoints.

Are we talking about TCP re-segmentation, or IP fragmentation?

If you mean TCP re-segmentation, then I have no data. The only places 
I've personally seen it are in TCP terminating load-balancers (F5, 
etc.), NAT64 devices, and as a side effect in higher-layer proxies 
(Squid, etc.).

If you mean IP fragmentation, I claim that fragmentation by routers in 
the internet is rare. Whether it's 1% or 0.001% I couldn't say, but the 
vast majority of the time, routers do not end up fragmenting. For one 
thing, an awful lot of OSes send TCP segments with "don't fragment" set, 
to trigger ICMP error messages and path MTU discovery. For another, a 
lot of low MTU networks employ TCP MSS clamping to prevent this ever 
happening.

For what it's worth, this "layer of the network" is my day job, but I 
don't claim oracle status.

> But the sizes are also not important.  The point is that TCP is about
> streams, not packets, and you have to deal with arbitrary chunking if
> you want your code to work right.  What layer of the network this
> happens at is not important to your code :).

Agreed.


From glyph at twistedmatrix.com  Sat Oct  8 19:56:05 2011
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 8 Oct 2011 19:56:05 -0400
Subject: [Twisted-Python] dataReveived() buffer best practice?
In-Reply-To: <4E8F81E1.10004@imperial.ac.uk>
References: <CAB3A25A.1C2DA%fabian.rothfuchs@gmail.com>	<20111006210635.23178.44174862.divmod.xquotient.5@localhost.localdomain>	<4E8EE6E2.8040204@imperial.ac.uk>
	<BE751B5E-9377-4E7F-A18E-8B5FEDAB2406@twistedmatrix.com>
	<4E8F81E1.10004@imperial.ac.uk>
Message-ID: <10C42A09-6DF3-4965-AEA3-7A7AD0933B64@twistedmatrix.com>


On Oct 7, 2011, at 6:49 PM, Phil Mayers wrote:

> On 10/07/2011 02:11 PM, Glyph wrote:
> 
>>> It is quite unusual (though not unheard of) for something to
>>> re-segment the TCP stream. IP level fragmentation might occur, but
>>> it's relatively uncommon in todays IP networks, and is anyway
>>> irrelevant to TCP - the TCP stack will only see a reassembled IP
>>> packet.
>> 
>> I am skeptical; my recollection (the last time I worked at this layer
>> of the network) is that this happens all the time over the public
>> internet between diverse endpoints.
> 
> Are we talking about TCP re-segmentation, or IP fragmentation?

Pretty sure I'm talking about TCP re-segmentation.

> If you mean TCP re-segmentation, then I have no data. The only places 
> I've personally seen it are in TCP terminating load-balancers (F5, 
> etc.), NAT64 devices, and as a side effect in higher-layer proxies 
> (Squid, etc.).

Hrm.  Now that I think of it, the packets I was examining were probably coming from environments that were heavily managed by "smart" networking hardware, although I could only see the edges of the network.  So it was probably a combination of high-level transparent proxies and wacky load-balancing and caching hardware.

> If you mean IP fragmentation, I claim that fragmentation by routers in 
> the internet is rare. Whether it's 1% or 0.001% I couldn't say, but the 
> vast majority of the time, routers do not end up fragmenting. For one 
> thing, an awful lot of OSes send TCP segments with "don't fragment" set, 
> to trigger ICMP error messages and path MTU discovery. For another, a 
> lot of low MTU networks employ TCP MSS clamping to prevent this ever 
> happening.

That's interesting, and good to know :).

> For what it's worth, this "layer of the network" is my day job, but I 
> don't claim oracle status.
> 
>> But the sizes are also not important.  The point is that TCP is about
>> streams, not packets, and you have to deal with arbitrary chunking if
>> you want your code to work right.  What layer of the network this
>> happens at is not important to your code :).
> 
> Agreed.

Since this is your day job - is there a formally-correct name for this phenomenon?  I usually refer to it as "packet fragmentation" even though I know that's not really it - as you say, IP fragmentation doesn't really happen. It's not like it's really TCP re-segmenting either, because one send() is not necessarily one segment.

Since it's such an important concept that every Twisted developer needs to know, I'd love to have a good word for it :).

From tom.cocagne at gmail.com  Sat Oct  8 22:55:41 2011
From: tom.cocagne at gmail.com (Tom Cocagne)
Date: Sat, 8 Oct 2011 21:55:41 -0500
Subject: [Twisted-Python] Running the same trial test suite against a
 live server and a mock server
In-Reply-To: <65DEEACA-ECB1-49DF-A9E3-B44B4BD5FE21@twistedmatrix.com>
References: <CAE_Hg6bc7cwwr9-r7kDBY+z+uC0VdRgveKe3QzkgpMpHv4kE0w@mail.gmail.com>
	<65DEEACA-ECB1-49DF-A9E3-B44B4BD5FE21@twistedmatrix.com>
Message-ID: <CAFKh6jBMvdUjdfq_bXcHQkpPorukeo01Uq1C4sBpkhfKGezBJg@mail.gmail.com>

   I recently ran into a similar problem while developing a native
python DBus implementation. Initially I implemented only the
client-side portion and pointed all my tests at the OS-provided
session bus. However, once I got around to implementing the
server-side portion of DBus, simply pointing all those "known-good"
client-side tests at the new bus implementation was a handy way to
test out the new code. To mechanism I used was to modify the
client-side testing module to use top-level module variables to tune
the connection setup code and then created "test_bus.py" with the
following content:

-----
import sys

from twisted.trial import unittest

import test_client

# Force the test code to use the internal bus rather than the
# OS-native bus
test_client.USE_INTERNAL_BUS = True

# "Copy" the test cases into this module
m = sys.modules[ __name__ ]

for k,v in test_client.__dict__.iteritems():
    if isinstance(v, type) and issubclass(v, unittest.TestCase):
        setattr(m, type(k, (v,), dict()))
-----

It's a bit of a hack, of course, but it's conceptually simple and
doesn't require much extra effort. Glyph's or Tim's suggestions may be
better for your project but I've been pretty happy with this mechanism
so far so I thought I'd toss it out there.

Cheers,

Tom



On Mon, Sep 26, 2011 at 5:24 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
>
> On Sep 26, 2011, at 7:37 AM, Laurens Van Houtven wrote:
>
> Are there any better ways to pass test data to trial?
>
> Environment variables.
> This isn't a great?option, but I'd say it's definitely a better one than
> modules which monkeypatch stuff.
> You can also have your test cases synthesize stuff out of data files or
> config files in your environment.
> I'm not really inclined to make this super easy, since tests should by
> definition not be terribly configurable: the more knobs like this you have
> to turn, the less meaningful your test suite is likely to be.
> So, today, I'd write something like this:
> TXIEVERY_USERNAME=foo?TXIEVERY_PW=bar?TXIEVERY_CERT=baz.pem?trial txievery
> but if someone has a better thought, please chime in - this is by no means
> the last word on this. ?And I'm facing a similar issue soon so I'd love to
> hear some diversity of opinion here.
> -glyph
> PS: love the module name.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


From exarkun at twistedmatrix.com  Sun Oct  9 00:05:23 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 09 Oct 2011 04:05:23 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1318133123.13.703272196@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20111009/ac9e1b3b/attachment.htm 

From itamar at itamarst.org  Sun Oct  9 14:44:41 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Sun, 09 Oct 2011 14:44:41 -0400
Subject: [Twisted-Python] Proposed new homepage
Message-ID: <1318185881.1826.9.camel@blake>

Our current page is not good at pulling in potential new users:

      * There's no quick examples of how nice Twisted is.
      * It takes 3 clicks (3!) to find basic documentation, with lots of
        scope for getting lost along the way.

I propose to fix this by adding code examples, and relevant direct
documentation links. A very preliminary pass, still lacking things like
syntax highlighting, can be found here:

http://twistedmatrix.com/trac/wiki/ProposedWikiStart

What do you think?



From waterbug at pangalactic.us  Sun Oct  9 15:25:19 2011
From: waterbug at pangalactic.us (Stephen Waterbury)
Date: Sun, 09 Oct 2011 15:25:19 -0400
Subject: [Twisted-Python] Proposed new homepage
In-Reply-To: <1318185881.1826.9.camel@blake>
References: <1318185881.1826.9.camel@blake>
Message-ID: <4E91F51F.50906@pangalactic.us>

On 10/09/2011 02:44 PM, Itamar Turner-Trauring wrote:
> Our current page is not good at pulling in potential new users:
>
>        * There's no quick examples of how nice Twisted is.
>        * It takes 3 clicks (3!) to find basic documentation, with lots of
>          scope for getting lost along the way.
>
> I propose to fix this by adding code examples, and relevant direct
> documentation links. A very preliminary pass, still lacking things like
> syntax highlighting, can be found here:
>
> http://twistedmatrix.com/trac/wiki/ProposedWikiStart
>
> What do you think?

Opinions from a long-time observer, who is not offering to
contribute -- sorry!  totally swamped ... :(

* I agree that quick examples should be more accessible.  I think
   the ones that go (possibly) somewhere on the homepage need to be
   carefully chosen (whatever that means ;).  I confess that my
   preference would be to have the "What is Twisted?" section
   extremely short (like maybe a 2-sentence paragraph with its
   current links) and then the "Quick Links" section right after
   that but have the "More Useful Pointers" section perhaps as an
   expandable part of the Quick Links, so that the next section
   could be Quick Examples and at least the beginning of the
   examples would be visible without scrolling (I like to
   avoid having to scroll to see the major structures on a page).

* I don't get your point about 3 clicks to find basic documentation --
   doesn't the link to "Twisted Core Documentation" in the 3rd
   paragraph get you there in one click?  Of course, the "basic
   documentation" will be nicer when the Sphinx-based docs arrive,
   I think ...

Steve


From albert.brandl at weiermayer.com  Mon Oct 10 03:20:27 2011
From: albert.brandl at weiermayer.com (Albert Brandl)
Date: Mon, 10 Oct 2011 09:20:27 +0200
Subject: [Twisted-Python] Proposed new homepage
In-Reply-To: <1318185881.1826.9.camel@blake>
References: <1318185881.1826.9.camel@blake>
Message-ID: <20111010072027.GA2553@weiermayer.com>

Hi!

On Sun, Oct 09, 2011 at 02:44:41PM -0400, Itamar Turner-Trauring wrote:
> http://twistedmatrix.com/trac/wiki/ProposedWikiStart
> 
> What do you think?

I like the approach to instantly "dive into" the library by showing some 
code. But I have a programming background - not sure if all (relevant) 
visitors will be happy with this.

> Twisted is an event-driven networking engine written in Python and 
> licensed under the MIT license.

Is the license really so important that it should be mentioned in the 
first paragraph? If it is, you might want to consider splitting the 
sentence. And yes, I know that the current homepage starts with the
same sentence ;-).

The following summary of Twisted projects on the current homepage might 
be a good completion of the first paragraph:

> Twisted projects variously support TCP, UDP, SSL/TLS, multicast, Unix 
> sockets, a large number of protocols (including HTTP, NNTP, IMAP, SSH, 
> IRC, FTP, and others), and much more.

One comment on the first code example:

> class EchoFactory(protocol.Factory):
>    def buildProtocol(self, addr):
>        return Echo()

It might be better to just define the `protocol` class variable and 
leave the instantiation to the default implementation of 
`buildProtocol`. 

Otherwise, the reader might assume that overriding `buildProtocol` is 
always necessary. Even worse, she might think that just returning an 
instance is enough; AFAIK, `buildProtocol` should also set the 
instance's `factory`. 

Of course that is an implementation detail, but I don't think we should 
set visitors on the wrong track right at the beginning ;-).

Best regards,
-- 
Albert Brandl
Weiermayer Solutions GmbH      | Abteistra?e 12, A-4813 Altm?nster
phone: +43 (0) 720 70 30 14    | fax: +43 (0) 7612 20 3 56
web: http://www.weiermayer.com


From johan.rydberg at edgeware.tv  Mon Oct 10 05:22:46 2011
From: johan.rydberg at edgeware.tv (Johan Rydberg)
Date: Mon, 10 Oct 2011 11:22:46 +0200
Subject: [Twisted-Python] Proposed new homepage
In-Reply-To: <1318185881.1826.9.camel@blake>
References: <1318185881.1826.9.camel@blake>
Message-ID: <4E92B966.8070603@edgeware.tv>

Nice effort.  I also believe that getting down to the details (the
code) will get a lot more people interested.

One question: "Scalable web applications"?   What makes them scalable?

Either drop the word, or explain.


-- 

Johan Rydberg
Product Designer

Edgeware AB
M?ster Samuelsgatan 56
SE-111 21 Stockholm, Sweden



From itamar at itamarst.org  Mon Oct 10 08:30:06 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Mon, 10 Oct 2011 08:30:06 -0400
Subject: [Twisted-Python] Proposed new homepage
In-Reply-To: <20111010072027.GA2553@weiermayer.com>
References: <1318185881.1826.9.camel@blake>
	<20111010072027.GA2553@weiermayer.com>
Message-ID: <1318249806.1826.26.camel@blake>

On Mon, 2011-10-10 at 09:20 +0200, Albert Brandl wrote:

> > Twisted is an event-driven networking engine written in Python and 
> > licensed under the MIT license.
> 
> Is the license really so important that it should be mentioned in the 
> first paragraph? If it is, you might want to consider splitting the 
> sentence. And yes, I know that the current homepage starts with the
> same sentence ;-).

Open source and not GPL is probably the important bit.

> The following summary of Twisted projects on the current homepage might 
> be a good completion of the first paragraph:
> 
> > Twisted projects variously support TCP, UDP, SSL/TLS, multicast, Unix 
> > sockets, a large number of protocols (including HTTP, NNTP, IMAP, SSH, 
> > IRC, FTP, and others), and much more.

I get the impression some people think Twisted is complex and big
because of all the features it has. So first I want to show them with
code "look it's so simple"... and only then give the full list of
features.

> One comment on the first code example:
> 
> > class EchoFactory(protocol.Factory):
> >    def buildProtocol(self, addr):
> >        return Echo()
> 
> It might be better to just define the `protocol` class variable and 
> leave the instantiation to the default implementation of 
> `buildProtocol`. 

I have just closed two tickets making buildProtocol explicitly used in
both the server and client howtos, and I've also updated a relevant code
example in the website's FAQ. The current way of doing things, setting
an attribute on Factory, is really bad from an educational point of
view, since it makes protocol creation "magic". By having an explicit
buildProtocol users know where protocol instances come from, and how to
override this creation.

> Otherwise, the reader might assume that overriding `buildProtocol` is 
> always necessary. Even worse, she might think that just returning an 
> instance is enough; AFAIK, `buildProtocol` should also set the 
> instance's `factory`. 

buildProtocol does not always need to set factory as an attribute, you
can just return a protocol instance. If you do need the factory, better
to pass it in to Protocol's __init__ explicitly instead of having an
extra attribute shoved on later.




From itamar at itamarst.org  Mon Oct 10 08:33:22 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Mon, 10 Oct 2011 08:33:22 -0400
Subject: [Twisted-Python] Proposed new homepage
In-Reply-To: <4E92B966.8070603@edgeware.tv>
References: <1318185881.1826.9.camel@blake>  <4E92B966.8070603@edgeware.tv>
Message-ID: <1318250002.1826.29.camel@blake>

On Mon, 2011-10-10 at 11:22 +0200, Johan Rydberg wrote:
> Nice effort.  I also believe that getting down to the details (the
> code) will get a lot more people interested.
> 
> One question: "Scalable web applications"?   What makes them scalable?
> 
> Either drop the word, or explain.

Hm. I need a short way of explaining "can support large numbers of
long-running queries without falling over like a thread/process-pool
based web server would". I guess that's not that hard to write ;) I
wonder if the example could easily demonstrate that... perhaps a
streaming countdown display?




From jml at mumak.net  Mon Oct 10 08:42:25 2011
From: jml at mumak.net (Jonathan Lange)
Date: Mon, 10 Oct 2011 13:42:25 +0100
Subject: [Twisted-Python] Proposed new homepage
In-Reply-To: <1318250002.1826.29.camel@blake>
References: <1318185881.1826.9.camel@blake> <4E92B966.8070603@edgeware.tv>
	<1318250002.1826.29.camel@blake>
Message-ID: <CAHZ8tnYVUoKwOPWohJZ13zfuBP0+VESyGEqvXyCmXJBQChbi6w@mail.gmail.com>

On Mon, Oct 10, 2011 at 1:33 PM, Itamar Turner-Trauring
<itamar at itamarst.org> wrote:
> On Mon, 2011-10-10 at 11:22 +0200, Johan Rydberg wrote:
>> Nice effort. ?I also believe that getting down to the details (the
>> code) will get a lot more people interested.
>>
>> One question: "Scalable web applications"? ? What makes them scalable?
>>
>> Either drop the word, or explain.
>
> Hm. I need a short way of explaining "can support large numbers of
> long-running queries without falling over like a thread/process-pool
> based web server would". I guess that's not that hard to write ;) I
> wonder if the example could easily demonstrate that... perhaps a
> streaming countdown display?

Or you could link to a page that explains.

jml


From glyph at twistedmatrix.com  Mon Oct 10 09:42:51 2011
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 10 Oct 2011 09:42:51 -0400
Subject: [Twisted-Python] Proposed new homepage
In-Reply-To: <CAHZ8tnYVUoKwOPWohJZ13zfuBP0+VESyGEqvXyCmXJBQChbi6w@mail.gmail.com>
References: <1318185881.1826.9.camel@blake> <4E92B966.8070603@edgeware.tv>
	<1318250002.1826.29.camel@blake>
	<CAHZ8tnYVUoKwOPWohJZ13zfuBP0+VESyGEqvXyCmXJBQChbi6w@mail.gmail.com>
Message-ID: <B8529030-1771-4C18-829F-E804B5DF5E13@twistedmatrix.com>


On Oct 10, 2011, at 8:42 AM, Jonathan Lange wrote:

> On Mon, Oct 10, 2011 at 1:33 PM, Itamar Turner-Trauring
> <itamar at itamarst.org> wrote:
>> On Mon, 2011-10-10 at 11:22 +0200, Johan Rydberg wrote:
>>> Nice effort.  I also believe that getting down to the details (the
>>> code) will get a lot more people interested.
>>> 
>>> One question: "Scalable web applications"?   What makes them scalable?
>>> 
>>> Either drop the word, or explain.
>> 
>> Hm. I need a short way of explaining "can support large numbers of
>> long-running queries without falling over like a thread/process-pool
>> based web server would". I guess that's not that hard to write ;) I
>> wonder if the example could easily demonstrate that... perhaps a
>> streaming countdown display?
> 
> Or you could link to a page that explains.

I'd say: let's drop the word for now, write a page that explains, then add it back.

From glyph at twistedmatrix.com  Mon Oct 10 09:47:15 2011
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 10 Oct 2011 09:47:15 -0400
Subject: [Twisted-Python] Proposed new homepage
In-Reply-To: <1318185881.1826.9.camel@blake>
References: <1318185881.1826.9.camel@blake>
Message-ID: <040EFF13-23C1-454E-8DC0-BA4D614686DD@twistedmatrix.com>


On Oct 9, 2011, at 2:44 PM, Itamar Turner-Trauring wrote:

> Our current page is not good at pulling in potential new users:
> 
>      * There's no quick examples of how nice Twisted is.
>      * It takes 3 clicks (3!) to find basic documentation, with lots of
>        scope for getting lost along the way.
> 
> I propose to fix this by adding code examples, and relevant direct
> documentation links. A very preliminary pass, still lacking things like
> syntax highlighting, can be found here:
> 
> http://twistedmatrix.com/trac/wiki/ProposedWikiStart
> 
> What do you think?


This is a fantastic effort.

I don't think it's perfect, but I do think it's substantially better than what we have now (modulo "scalable" which I already addressed in another message).  We should continue to talk about it and work on it, but I think we should switch over to this new and improved thing ASAP.

Unless someone has a serious objection, I think we should replace the front page later today.  (Itamar, do you want to do the honors, or shall I?)

The main thing I'd like to see added next would be some verbiage around twistd plugins, like "running a web server is as easy as 'twistd web --path .'".  I'd really like to stress that you don't need to be a programmer to use Twisted; we aren't ever going to get a good system administration story unless more ops people hear about it and start playing with it :).

One other minor tweak: 'Quick Links' was always a dumb heading.  "More Information", maybe?

-glyph



From glyph at twistedmatrix.com  Mon Oct 10 09:53:38 2011
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 10 Oct 2011 09:53:38 -0400
Subject: [Twisted-Python] Ticket #4519,
	other possible spawnProcess enhancments
In-Reply-To: <CAOUOUDw8huB75UtLNZSk0JWKEk9EqiOZEveV4-eseAXxWRZiZg@mail.gmail.com>
References: <CAOUOUDw8huB75UtLNZSk0JWKEk9EqiOZEveV4-eseAXxWRZiZg@mail.gmail.com>
Message-ID: <11F1B282-B529-4F43-93EC-6F6C7BAD274C@twistedmatrix.com>

Hi Andrew,

Thanks for your work on this.

On Oct 7, 2011, at 1:45 AM, Andrew Mahone wrote:

> I've been working on http://twistedmatrix.com/trac/ticket/4159 and
> there has been a bit of discussion on IRC regarding appropriate
> interfaces for various things. I think in the long run, the only
> python state that setupChild should be allowed to modify should be
> args, environment, and the win32 StartupInfo object. This leaves my
> own personal use case for it impossible, but I'm working out how to
> handle that - special childFDs objects. My proposal so far is that
> there be a ProcessFileDescriptor object that inherits from
> FileDescriptor. It would add a setup method, which Process would call
> in the parent, and separate finishChild and finishParent methods that
> would handle things like closing the other end of any pipe-like
> objects, and would return a file descriptor - the child would place
> this fd in childFDs, the parent would use it for communications with
> the child, in the case of objects that wrap pipes or PTYs. I would
> also extend the win32 implementation to include some limited support
> for childFDs - they could be used to allow the child to inherit
> specific file handles as its stdin, stdout, and stderr, instead of
> using these exclusively for communications with the parent, so that
> redirection to a pipe, to a file, and the building of pipelines could
> be accomplished on win32 (I have a project that uses twisted for this
> purpose, and I don't use windows, but I would like support to at least
> be possible).

I've been sitting on this message for a couple of days trying to come up with a good reply.  Unfortunately this whole description is phrased in terms of conflicting desires for the implementation, rather than a design strategy or a set of goals or requirements for the API, so my attempted replies have ended up playing whack-a-mole with the concerns one at a time, rather than making an informed critique of the whole proposal.

Could you try to re-phrase your design here in terms of why we want each of these things, some use-cases, and then maybe spell out the methods and stuff in terms of Python interfaces or classes (or perhaps links to your patch if it already implements what you've described here)?

Sorry that this probably isn't terribly useful feedback.  I really appreciate the time you've put in thus far, and I think I like where you're going with this, I just haven't had time to turn everything inside-out so that I can see it clearly :).

> I'm seeking comments on whether an extended childFDs interface is the
> best way to manipulate the inherited files of the child process, and
> whether, if so, fdmap ought to be visible in setupChild at all - in my
> opinion, setupChild should be strictly for things like setting the
> child PID in an environment variable or as a command line argument,
> manipulating scheduler and other parameters external to twisted
> itself, and other things of that nature, and the existing childFDs
> mechanism should handle any manipulation of file redirection or
> inheritance. If there are suggestions on what an extended childFD
> object ought to look like, these are welcome as well - I think the
> specified methods should handle trivial cases even on platforms
> without fork, and should handle nearly anything that really is a file
> descriptor on POSIX platforms, but maybe there is something I have
> missed.


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20111010/90651d71/attachment-0001.htm 

From glyph at twistedmatrix.com  Mon Oct 10 10:05:07 2011
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 10 Oct 2011 10:05:07 -0400
Subject: [Twisted-Python] Proposed new homepage
In-Reply-To: <1318249806.1826.26.camel@blake>
References: <1318185881.1826.9.camel@blake>
	<20111010072027.GA2553@weiermayer.com>
	<1318249806.1826.26.camel@blake>
Message-ID: <1A9D3F23-3ED2-433D-9995-3CE28BEE4190@twistedmatrix.com>


On Oct 10, 2011, at 8:30 AM, Itamar Turner-Trauring wrote:

> On Mon, 2011-10-10 at 09:20 +0200, Albert Brandl wrote:

>> The following summary of Twisted projects on the current homepage might 
>> be a good completion of the first paragraph:
>> 
>>> Twisted projects variously support TCP, UDP, SSL/TLS, multicast, Unix 
>>> sockets, a large number of protocols (including HTTP, NNTP, IMAP, SSH, 
>>> IRC, FTP, and others), and much more.
> 
> I get the impression some people think Twisted is complex and big
> because of all the features it has. So first I want to show them with
> code "look it's so simple"... and only then give the full list of
> features.

I emphatically agree.  It might be good to eventually have more of a link ? demonstrate how the echo server actually leads into the web server ? but the parallel structure of the examples there at least hints at it.  Maybe we could have one more: like a 'hello world' IRC bot or something?

>> One comment on the first code example:
>> 
>>> class EchoFactory(protocol.Factory):
>>>   def buildProtocol(self, addr):
>>>       return Echo()
>> 
>> It might be better to just define the `protocol` class variable and 
>> leave the instantiation to the default implementation of 
>> `buildProtocol`. 
> 
> I have just closed two tickets making buildProtocol explicitly used in
> both the server and client howtos, and I've also updated a relevant code
> example in the website's FAQ. The current way of doing things, setting
> an attribute on Factory, is really bad from an educational point of
> view, since it makes protocol creation "magic". By having an explicit
> buildProtocol users know where protocol instances come from, and how to
> override this creation.

These tickets are <http://twistedmatrix.com/trac/ticket/5044> and <http://twistedmatrix.com/trac/ticket/4761> if anyone wants more details on this.  The existing behavior is convenient, and isn't going away, but it's very difficult for new users to infer what's going on without reading all of protocol.Factory's implementation.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20111010/f08b3318/attachment.htm 

From itamar at itamarst.org  Mon Oct 10 10:10:37 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Mon, 10 Oct 2011 10:10:37 -0400
Subject: [Twisted-Python] Proposed new homepage
In-Reply-To: <040EFF13-23C1-454E-8DC0-BA4D614686DD@twistedmatrix.com>
References: <1318185881.1826.9.camel@blake>
	<040EFF13-23C1-454E-8DC0-BA4D614686DD@twistedmatrix.com>
Message-ID: <1318255837.1826.42.camel@blake>

On Mon, 2011-10-10 at 09:47 -0400, Glyph wrote:

> Unless someone has a serious objection, I think we should replace the front page later today.  (Itamar, do you want to do the honors, or shall I?)

I'll try to do it this evening, after adding syntax highlighting (half
manually, ugh) and fixing the comments mentioned here (scalability,
Quick Links).



From itamar at itamarst.org  Mon Oct 10 10:11:14 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Mon, 10 Oct 2011 10:11:14 -0400
Subject: [Twisted-Python] Proposed new homepage
In-Reply-To: <040EFF13-23C1-454E-8DC0-BA4D614686DD@twistedmatrix.com>
References: <1318185881.1826.9.camel@blake>
	<040EFF13-23C1-454E-8DC0-BA4D614686DD@twistedmatrix.com>
Message-ID: <1318255874.1826.43.camel@blake>

Oh - I am going to need admin permission on the wiki, I can't actually
edit the front page right now :)



From glyph at twistedmatrix.com  Mon Oct 10 10:20:10 2011
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 10 Oct 2011 10:20:10 -0400
Subject: [Twisted-Python] Proposed new homepage
In-Reply-To: <1318255874.1826.43.camel@blake>
References: <1318185881.1826.9.camel@blake>
	<040EFF13-23C1-454E-8DC0-BA4D614686DD@twistedmatrix.com>
	<1318255874.1826.43.camel@blake>
Message-ID: <F1CF4BCF-4101-4337-B162-730C04A67857@twistedmatrix.com>


On Oct 10, 2011, at 10:11 AM, Itamar Turner-Trauring wrote:

> Oh - I am going to need admin permission on the wiki, I can't actually
> edit the front page right now :)

You should be an admin now.

From radix at twistedmatrix.com  Mon Oct 10 15:18:46 2011
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 10 Oct 2011 15:18:46 -0400
Subject: [Twisted-Python] Ticket #4519,
	other possible spawnProcess enhancments
In-Reply-To: <11F1B282-B529-4F43-93EC-6F6C7BAD274C@twistedmatrix.com>
References: <CAOUOUDw8huB75UtLNZSk0JWKEk9EqiOZEveV4-eseAXxWRZiZg@mail.gmail.com>
	<11F1B282-B529-4F43-93EC-6F6C7BAD274C@twistedmatrix.com>
Message-ID: <CAPkRfUTQna1nFKeyDPtQLbccnh5c15ccJePmtzp8hDTBTyvr2w@mail.gmail.com>

Software Development Methodology!!!!

1. Use Cases
2. Requirements
3. Proposed Technical Design

Bonus points if you include Visio diagrams!!!!

Top-posted for genuine experience!!!!

On Mon, Oct 10, 2011 at 9:53 AM, Glyph <glyph at twistedmatrix.com> wrote:

> Hi Andrew,
>
> Thanks for your work on this.
>
> On Oct 7, 2011, at 1:45 AM, Andrew Mahone wrote:
>
> I've been working on http://twistedmatrix.com/trac/ticket/4159 and
> there has been a bit of discussion on IRC regarding appropriate
> interfaces for various things. I think in the long run, the only
> python state that setupChild should be allowed to modify should be
> args, environment, and the win32 StartupInfo object. This leaves my
> own personal use case for it impossible, but I'm working out how to
> handle that - special childFDs objects. My proposal so far is that
> there be a ProcessFileDescriptor object that inherits from
> FileDescriptor. It would add a setup method, which Process would call
> in the parent, and separate finishChild and finishParent methods that
> would handle things like closing the other end of any pipe-like
> objects, and would return a file descriptor - the child would place
> this fd in childFDs, the parent would use it for communications with
> the child, in the case of objects that wrap pipes or PTYs. I would
> also extend the win32 implementation to include some limited support
> for childFDs - they could be used to allow the child to inherit
> specific file handles as its stdin, stdout, and stderr, instead of
> using these exclusively for communications with the parent, so that
> redirection to a pipe, to a file, and the building of pipelines could
> be accomplished on win32 (I have a project that uses twisted for this
> purpose, and I don't use windows, but I would like support to at least
> be possible).
>
>
> I've been sitting on this message for a couple of days trying to come up
> with a good reply.  Unfortunately this whole description is phrased in terms
> of conflicting desires for the implementation, rather than a design strategy
> or a set of goals or requirements for the API, so my attempted replies have
> ended up playing whack-a-mole with the concerns one at a time, rather than
> making an informed critique of the whole proposal.
>
> Could you try to re-phrase your design here in terms of why we want each of
> these things, some use-cases, and then maybe spell out the methods and stuff
> in terms of Python interfaces or classes (or perhaps links to your patch if
> it already implements what you've described here)?
>
> Sorry that this probably isn't terribly useful feedback.  I really
> appreciate the time you've put in thus far, and I *think* I like where
> you're going with this, I just haven't had time to turn everything
> inside-out so that I can see it clearly :).
>
> I'm seeking comments on whether an extended childFDs interface is the
> best way to manipulate the inherited files of the child process, and
> whether, if so, fdmap ought to be visible in setupChild at all - in my
> opinion, setupChild should be strictly for things like setting the
> child PID in an environment variable or as a command line argument,
> manipulating scheduler and other parameters external to twisted
> itself, and other things of that nature, and the existing childFDs
> mechanism should handle any manipulation of file redirection or
> inheritance. If there are suggestions on what an extended childFD
> object ought to look like, these are welcome as well - I think the
> specified methods should handle trivial cases even on platforms
> without fork, and should handle nearly anything that really is a file
> descriptor on POSIX platforms, but maybe there is something I have
> missed.
>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20111010/2748a8ab/attachment.htm 

From johnaherne at rocs.co.uk  Tue Oct 11 07:10:09 2011
From: johnaherne at rocs.co.uk (John Aherne)
Date: Tue, 11 Oct 2011 12:10:09 +0100
Subject: [Twisted-Python] twisted as windows service
Message-ID: <CAKmUHjaP+dgWS_UVOP1E8FCes1Qch39K0tniUsy4wD5c0ToqVg@mail.gmail.com>

I have been looking for some info on running twisted as a Windows Service.

I have found various examples in mailing-lists and blogs that vary in what
seem to be important respects.

I have included them below as 3 examples.

The problem I have is working out which scheme or combination I should be
adopting.
I have tried out some of the options and they appear to work. But I need
something better than seems to work.

My gut reaction is that I should be putting all my imports into SvcDoRun,
since they will be used in the thread.

But if I import the reactor in SvcDoRun, should I be
using reactor.callfromthread(reactor.stop). I think not

I think the use of waitforobject is the right thing to do as well without
fully understanding it at the moment.

If anyone can throw some light on what to do I shall be very grateful.

It could be that I should post this question to python-windows mailing
list since it seems to me more pertinent to windows than twisted.

Thanks for any info.

John Aherne

Here is 1st example.

The reactor is imported globally not in SvcDoRun
It uses the waitforobject to detect stopping the service
The reactor.stop is calledfromthread


[Twisted-Python] How to run Twisted as a service in Windows?

Thomas Jacob jacob at internet24.de
Wed Aug 9 10:49:30 EDT 2006
Previous message: [Twisted-Python] How to run Twisted as a service in
Windows?
Next message: [Twisted-Python] How to run Twisted as a service in Windows?
Messages sorted by: [ date ] [ thread ] [ subject ] [ author ]
AFAIK, twistd doesn't provide direct support for Windows Services yet
(Is this planned?).

But you can easily wrap a reactor,run() yourself by doing something
like the following using the Win32-Python packages

import win32serviceutil
import win32service
import win32event

from twisted.internet import reactor

import sys


class IMSAgentBase(win32serviceutil.ServiceFramework):
    _svc_name_ = "myService"
    _svc_display_name_ = "My little Service"
    _svc_description_ = "My little Service" # Win2k or later
    _svc_deps_ = ["RpcSs"] # Start after the Network has come up...

    def __init__(self, args):
        win32serviceutil.ServiceFramework.__init__(self, args)
        self.hWaitStop = win32event.CreateEvent(None, 0, 0, None)

    def SvcStop(self):
        self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)
        reactor.callFromThread(reactor.stop)
        win32event.SetEvent(self.hWaitStop)

    def SvcDoRun(self):

        # initialize your services here
        reactor.run()
        win32event.WaitForSingleObject(self.hWaitStop,win32event.INFINITE)

def HandleCommandLine(cls):
    win32serviceutil.HandleCommandLine(cls)


Run the above as a script.


Here is the 2nd example.

The imports are global not in SvcDoRun

And the reactor .stop is not called from thread.

And the wait for stop event is in a timeout loop

It uses waitforobject events

It sets installsignalhandlers to 0

 You can then test it out with the sample Echo client from the core docs.

 """qotdservice.py
 Sample Twisted Windows Service
 """

 # Service Utilities
 import win32serviceutil
 import win32service
 import win32event

 # Twisted imports
 from twisted.internet.protocol import Protocol, Factory
 from twisted.internet import reactor

 class QOTD(Protocol):

     def connectionMade(self):
         self.transport.write("An apple a day keeps the doctor away\r\n")
         self.transport.loseConnection()


 class WindowsService(win32serviceutil.ServiceFramework):
     _svc_name_ = "TwistedWin32Service"
     _svc_display_name_ = "Twisted Win32 Service"

     def __init__(self, args):
         win32serviceutil.ServiceFramework.__init__(self, args)
         self.hWaitStop = win32event.CreateEvent(None, 0, 0, None)

     def SvcStop(self):
         self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)
         win32event.SetEvent(self.hWaitStop)

     def SvcDoRun(self):
         import servicemanager

         self.CheckForQuit()

         factory = Factory()
         factory.protocol = QOTD

         reactor.listenTCP(8007, factory)
         reactor.run(installSignalHandlers=0)


     def CheckForQuit(self):
         retval = win32event.WaitForSingleObject(self.hWaitStop, 10)
         if not retval == win32event.WAIT_TIMEOUT:
             # Received Quit from Win32
             reactor.stop()

         reactor.callLater(1.0, self.CheckForQuit)

 if __name__=='__main__':
     win32serviceutil.HandleCommandLine(WindowsService)


Here is  the 3rd example.

The imports are done in SvcDoRun.
There is no callfrom thread
It does not use the waitforobject

import sys, os
import win32serviceutil, win32service

class MyService(win32serviceutil.ServiceFramework):
    """NT Service."""

    _svc_name_ = "MyService"
    _svc_display_name_ = "MyService server"

    def SvcDoRun(self):
        import server
        f = open(os.path.join(server.rootPath, "cyberhigh.log"), 'a')
        from twisted.python.log import startLogging
        from twisted.application.app import startApplication
        from twisted.internet import reactor
        startLogging(f)
        startApplication(server.application, 0)
        reactor.run()

    def SvcStop(self):
        self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)
        from twisted.internet import reactor
        reactor.stop()

if __name__ == '__main__':</pre>
    win32serviceutil.HandleCommandLine(MyService)</pre>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20111011/7eb72b38/attachment.htm 

From p.mayers at imperial.ac.uk  Wed Oct 12 05:29:35 2011
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 12 Oct 2011 10:29:35 +0100
Subject: [Twisted-Python] dataReveived() buffer best practice?
In-Reply-To: <10C42A09-6DF3-4965-AEA3-7A7AD0933B64@twistedmatrix.com>
References: <CAB3A25A.1C2DA%fabian.rothfuchs@gmail.com>	<20111006210635.23178.44174862.divmod.xquotient.5@localhost.localdomain>	<4E8EE6E2.8040204@imperial.ac.uk>	<BE751B5E-9377-4E7F-A18E-8B5FEDAB2406@twistedmatrix.com>	<4E8F81E1.10004@imperial.ac.uk>
	<10C42A09-6DF3-4965-AEA3-7A7AD0933B64@twistedmatrix.com>
Message-ID: <4E955DFF.70901@imperial.ac.uk>

On 10/09/2011 12:56 AM, Glyph wrote:

> Since this is your day job - is there a formally-correct name for
> this phenomenon?  I usually refer to it as "packet fragmentation"
> even though I know that's not really it - as you say, IP
> fragmentation doesn't really happen. It's not like it's really TCP
> re-segmenting either, because one send() is not necessarily one
> segment.

Sorry, only just got round to replying...

Sadly there's no consistent name. The vendors all call it different 
things and implement it in subtly different (occasionally broken...) 
ways, and either hotly deny or proudly proclaim they're doing it, 
depending on which single basket they've put all their eggs in... ;o)

e.g. F5 make a big thing of the fact that their load balancers do local 
termination of TCP (and other) protocols, allowing them to do things 
like multiplex N client connections into M (fewer) server connections, 
while still optionally preserving client ip/port and server ip/port - 
although F5 do also have non-terminating "fast" per-packet modes.

It's variously called TCP termination, proxy and normalization. Some 
vendors use "layer 4" instead of TCP. Some incorrectly use "layer 5" or 
"layer 7" to describe their own idea of what is happening.

In my experience it is usually load-balancers that do this, although 
if/when NAT64 takes off, we may see a lot more of it, depending on 
whether vendors choose to terminate the TCP connection, or munge the MTU 
discovery / MSS options to match the payload sizes on the IPv6/IPv4 legs.

Ordinary NAT boxes tend to use a fast per-packet rewrite, rather than 
buffer TCP content.

Cheers,
Phil


From tenth at twistedmatrix.com  Wed Oct 12 15:11:00 2011
From: tenth at twistedmatrix.com (Tenth)
Date: Wed, 12 Oct 2011 15:11:00 -0400
Subject: [Twisted-Python] Boston Twisted Sprint: Last-Minute October Edition
Message-ID: <CAKJpRM2cK4d5T=1LBxbw+t98NToC+xPF5RV1eqLhOAfpRSbh6Q@mail.gmail.com>

It's been a while, but the Boston Twisted Sprint tradition will be
continued, in traditional last-minute fashion, on Saturday, October 15th

Smarterer, Inc. will generously be providing pizza, drinks, wifi, and sprint
space at their offices at 500 Harrison Avenue, Boston, from approximately
1:00 to 9:00 PM.

An Evite with more details has gone out to past Boston Twisted Sprint
attendants, but let me know if you'd like to be added to the list.

Thanks,

- Dave
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20111012/a86928f4/attachment.htm 

From glyph at twistedmatrix.com  Fri Oct 14 11:42:02 2011
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 14 Oct 2011 11:42:02 -0400
Subject: [Twisted-Python] Boston Twisted Sprint: Last-Minute October
	Edition
In-Reply-To: <CAKJpRM2cK4d5T=1LBxbw+t98NToC+xPF5RV1eqLhOAfpRSbh6Q@mail.gmail.com>
References: <CAKJpRM2cK4d5T=1LBxbw+t98NToC+xPF5RV1eqLhOAfpRSbh6Q@mail.gmail.com>
Message-ID: <87423E51-1A96-4641-BEE1-77C6F036458E@twistedmatrix.com>


On Oct 12, 2011, at 3:11 PM, Tenth wrote:

> It's been a while, but the Boston Twisted Sprint tradition will be continued, in traditional last-minute fashion, on Saturday, October 15th
> 
> Smarterer, Inc. will generously be providing pizza, drinks, wifi, and sprint space at their offices at 500 Harrison Avenue, Boston, from approximately 1:00 to 9:00 PM.
> 
> An Evite with more details has gone out to past Boston Twisted Sprint attendants, but let me know if you'd like to be added to the list.

REMINDER:

The sprint is tomorrow!

If you have received an invitation, please respond to it, even if you're not going.  This makes it easier for the organizers (they will know how much food to order) and easier for the person writing up the sprint report to remember who was there and who wasn't.

If you haven't, and you are in the greater Boston metro area and would like to attend the sprint, please let Tenth know so that you can be sent one.  We would love for you to show up, but we also need to send you a little extra information like how to get into the building, and who to call if you can't.  (This obviously isn't quite suitable for a public, archived mailing list.)

If you can't make it to the sprint in person, we will all be on IRC in #twisted on Freenode, and this is a great time to get tickets reviewed or look for something to work on.

Thanks, and happy sprinting!

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20111014/222267be/attachment.htm 

From warner at lothar.com  Sat Oct 15 15:17:09 2011
From: warner at lothar.com (Brian Warner)
Date: Sat, 15 Oct 2011 12:17:09 -0700
Subject: [Twisted-Python] ANN: Foolscap-0.6.2 released
Message-ID: <4E99DC35.6030109@lothar.com>

I'm pleased to announce the release of Foolscap-0.6.2, available from
PyPi[1], the Foolscap home page[2], and fine retail establishments
everywhere.

    Foolscap is a remote object-messaging system, built on top of
    Twisted and OpenSSL. It behaves very similar to Perspective
    Broker, but adds an object-capability security model (FURLs
    point at remote objects), more flexible serialization, and
    third-party references. Foolscap also provides support tools for
    developing distributed applications, including advanced "flight
    recorder" logging facilities, an eventual-send primitive, and
    command-line remote-service-invocation tools like "upload-file"
    and "run-command".

This release fixes an incompatibility with current Twisted trunk, which
will cause problems when the next Twisted release comes out.
(Foolscap-0.6.1 is compatible with Twisted-11.0.0, but not with trunk;
Foolscap-0.6.2 is compatible with both). It also adds some tools to run
git-over-foolscap, in case you want a more object-capability-centric way
to delegate Git repository access.

The release is signed with the new foolscap-release-signing-key[3],
0xAF1B4A2A. SHA256 hashes of the tarballs are:

 foolscap-0.6.2.tar.gz
  86741417a933f781c232db67f7961485e0348440c9d4f8b85dd5b5c4463f7efd

 foolscap-0.6.2.zip
  2a0b5faa0940ddd2986f8597739028b4be536223b60c2a8edbd23cc141949e8d

Please file bugs, patches, and feature requests on the Foolscap Trac[2].
You can also get the source code from Github[4].

Have a foolish day,
 -Brian

[1]: http://pypi.python.org/pypi/foolscap/0.6.2
[2]: http://foolscap.lothar.com/trac
[3]: http://foolscap.lothar.com/releases/foolscap-release-signing-key.asc
[4]: https://github.com/warner/foolscap



-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 259 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20111015/ae73ad2a/attachment.pgp 

From exarkun at twistedmatrix.com  Sun Oct 16 00:05:22 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 16 Oct 2011 04:05:22 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1318737922.42.729613881@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20111016/4dbc9e0b/attachment.htm 

From exarkun at twistedmatrix.com  Mon Oct 17 12:16:14 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 17 Oct 2011 16:16:14 -0000
Subject: [Twisted-Python] Pydoctor "ratchet"-style error reporting on
	BuildBot
Message-ID: <20111017161614.23178.761932729.divmod.xquotient.470@localhost.localdomain>

Hello Twisted developers,

You may have noticed that a little while ago I made a change to the 
documentation builder 
(<http://buildbot.twistedmatrix.com/builders/documentation>).  I changed 
it again today, and I think it now has reasonable behavior, so I thought 
I'd let everyone know what's going on.

One thing the documentation builder does is run pydoctor over Twisted 
and collect errors emitted.  Since avoiding pydoctor errors haven't been 
part of the documented, official development process, we have a lot of 
them - over 500.  The documentation builder hasn't previously reported a 
failure (ie, turned red) because of these, and it still doesn't - quite.

The documentation builder will now report a failure if there are *new* 
pydoctor errors in a build as compared to the most recent trunk build.

So if you add new pydoctor errors to trunk, the build will fail and the 
change must be reverted.

If you build a branch on the documentation builder, it will fail if the 
branch has pydoctor errors that trunk doesn't have.  Use this 
information to fix your documentation changes before submitting the 
branch for review (and certainly before merging it).

You can find a list of pydoctor errors linked from a documentation build 
page (eg 
<http://buildbot.twistedmatrix.com/builders/documentation/builds/1644>). 
Notice step 5, "api-documentation", with a link beneath it, "pydoctor 
errors".

If the builder decides there are new errors, you will also find a "new 
pydoctor errors" link immediately below the "pydoctor errors" link.

Unfortunately there is one shortcoming of the implementation of this 
feature.  If someone else fixes pydoctor errors in trunk and you have a 
branch based on an older build of trunk, those fixed-in-trunk errors 
will be considered new errors in your branch.  You can disregard such 
build failures when you build a branch on the documentation builder.

For anyone who isn't sure how to submit branch build requests to 
buildbot, see <http://labs.twistedmatrix.com/2011/09/pre-trunk- 
testing.html>.

Jean-Paul


From peter.westlake at pobox.com  Mon Oct 17 13:17:39 2011
From: peter.westlake at pobox.com (Peter Westlake)
Date: Mon, 17 Oct 2011 18:17:39 +0100
Subject: [Twisted-Python] twisted.enterprise.adbapi broken by loss of
	python-pgsql
Message-ID: <1318871859.7854.140660986956677@webmail.messagingengine.com>

The python-pgsql package, used by twisted.enterprise.adbapi to talk to
PostgreSQL, has been removed from Debian:

   http://bugs.debian.org/cgi-bin/bugreport.cgi?bug%3D577664

So far it has been removed from Unstable and Testing.

Are there any plans to fix t.e.adbapi? Or perhaps replace it
with txPostgres?

   http://twistedmatrix.com/trac/ticket/4397

Peter.


From glyph at twistedmatrix.com  Mon Oct 17 13:26:30 2011
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 17 Oct 2011 13:26:30 -0400
Subject: [Twisted-Python] twisted.enterprise.adbapi broken by loss of
	python-pgsql
In-Reply-To: <1318871859.7854.140660986956677@webmail.messagingengine.com>
References: <1318871859.7854.140660986956677@webmail.messagingengine.com>
Message-ID: <2A3E17F2-C833-477B-8A5D-CE7825332060@twistedmatrix.com>


On Oct 17, 2011, at 1:17 PM, Peter Westlake wrote:

> The python-pgsql package, used by twisted.enterprise.adbapi to talk to
> PostgreSQL,

This is inaccurate.  adbapi can talk to PostgreSQL - or any database, for that matter - using any db-api compliant driver that you pass to it.

> has been removed from Debian:
> 
>   http://bugs.debian.org/cgi-bin/bugreport.cgi?bug%3D577664

Sounds like a problem for Debian then, not Twisted.

> So far it has been removed from Unstable and Testing.
> 
> Are there any plans to fix t.e.adbapi? Or perhaps replace it
> with txPostgres?

Nothing needs to be fixed.  Even the test cases already have a PsycopgConnector in them, so this won't even decrease test coverage on Debian.

More positively: we retroactively fixed it in the past, so you have nothing to worry about now :).

From exarkun at twistedmatrix.com  Mon Oct 17 13:47:49 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 17 Oct 2011 17:47:49 -0000
Subject: [Twisted-Python] twisted.enterprise.adbapi broken by loss
	of	python-pgsql
In-Reply-To: <1318871859.7854.140660986956677@webmail.messagingengine.com>
References: <1318871859.7854.140660986956677@webmail.messagingengine.com>
Message-ID: <20111017174749.23178.738214785.divmod.xquotient.477@localhost.localdomain>

On 05:17 pm, peter.westlake at pobox.com wrote:
>The python-pgsql package, used by twisted.enterprise.adbapi to talk to
>PostgreSQL, has been removed from Debian:
>
>   http://bugs.debian.org/cgi-bin/bugreport.cgi?bug%3D577664
>
>So far it has been removed from Unstable and Testing.

You can use psycopg or pygresql.  adbapi should work with any DB-API 2.0 
compliant module.

adbapi itself doesn't specifically depend on pgsql.  It requires the 
user to specify which module to use.

Jean-Paul
>Are there any plans to fix t.e.adbapi? Or perhaps replace it
>with txPostgres?
>
>   http://twistedmatrix.com/trac/ticket/4397

Probably not.  However, some people are interesting in a native Twisted 
implementation of the PostgreSQL protocol.  So it's /possible/ that will 
appear at some point.

Jean-Paul


From itamar at itamarst.org  Mon Oct 17 15:35:53 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Mon, 17 Oct 2011 15:35:53 -0400
Subject: [Twisted-Python] Anyone interested in being release manager for
	11.1?
Message-ID: <0ea9541af436201d0427aca665585c9f.squirrel@webmail.zoteca.com>

Twisted is basically at a point where a new version can be released...
given a release manager. I'm told it's pretty automated and only takes 45
minutes or so these days.

Any volunteers?



From peter.westlake at pobox.com  Mon Oct 17 18:16:40 2011
From: peter.westlake at pobox.com (Peter Westlake)
Date: Mon, 17 Oct 2011 23:16:40 +0100
Subject: [Twisted-Python] twisted.enterprise.adbapi broken by loss of
 python-pgsql
In-Reply-To: <20111017174749.23178.738214785.divmod.xquotient.477@localhost.localdomain>
References: <1318871859.7854.140660986956677@webmail.messagingengine.com>
	<20111017174749.23178.738214785.divmod.xquotient.477@localhost.localdomain>
Message-ID: <1318889800.3632.140660987069246@webmail.messagingengine.com>

On Monday, October 17, 2011 5:47 PM, exarkun at twistedmatrix.com wrote:
> On 05:17 pm, peter.westlake at pobox.com wrote:
> >The python-pgsql package, used by twisted.enterprise.adbapi to talk to
> >PostgreSQL, has been removed from Debian:
> >
> >   http://bugs.debian.org/cgi-bin/bugreport.cgi?bug%3D577664
> >
> >So far it has been removed from Unstable and Testing.
> 
> You can use psycopg or pygresql.  adbapi should work with any DB-API 2.0 
> compliant module.
> 
> adbapi itself doesn't specifically depend on pgsql.  It requires the 
> user to specify which module to use.

Oh, I see! I saw the error message coming from t.e.a and deduced,
wrongly, that it imported it directly! The fact that the Debian
python-twisted package doesn't depend on python-pgsql should
have given me a clue.

Thank you for the retroactive fix!

Peter.

-- 
"Neutrinos travelling faster than light? I didn't see that coming!"


From member at linkedin.com  Tue Oct 18 07:52:15 2011
From: member at linkedin.com (Mike Meng via LinkedIn)
Date: Tue, 18 Oct 2011 11:52:15 +0000 (UTC)
Subject: [Twisted-Python] Invitation to connect on LinkedIn
Message-ID: <849964712.8410180.1318938735684.JavaMail.app@ela4-bed82.prod>

LinkedIn
------------




    Mike Meng requested to add you as a connection on LinkedIn:
  
------------------------------------------

Shaohui,

I'd like to add you to my professional network on LinkedIn.

Accept invitation from Mike  Meng
http://www.linkedin.com/e/-b9k943-gtwu2hq9-15/UGoRR-kmaZN3cQCGtaNE-BBynaTgDBi6TGSB-kimZG9krgZr/blk/I98119692_140/1BpC5vrmRLoRZcjkkZt5YCpnlOt3RApnhMpmdzgmhxrSNBszYMd35vczASej4Ne3B9bQZ2qChmq49TbPoQe30UdjwVdjgLrCBxbOYWrSlI/EML_comm_afe/?hs=false&tok=27JJqJpR5Er4Y1

View profile of Mike Meng
http://www.linkedin.com/e/-b9k943-gtwu2hq9-15/rsn/147374420/84sJ/?hs=false&tok=0rY8EV071Er4Y1
------------------------------------------

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20111018/21ae6a21/attachment.htm 

From member at linkedin.com  Tue Oct 18 07:56:53 2011
From: member at linkedin.com (Mike Meng via LinkedIn)
Date: Tue, 18 Oct 2011 11:56:53 +0000 (UTC)
Subject: [Twisted-Python] Invitation to connect on LinkedIn
Message-ID: <2017253386.8413497.1318939013348.JavaMail.app@ela4-bed84.prod>

LinkedIn
------------




    Mike Meng requested to add you as a connection on LinkedIn:
  
------------------------------------------

Shaohui,

I'd like to add you to my professional network on LinkedIn.

Accept invitation from Mike  Meng
http://www.linkedin.com/e/-b9k943-gtwu8fz5-2p/UGoRR-kmaZN3cQCGtaNE-BBynaTgDBi6TGSB-kimZG9krgZr/blk/I98123922_140/1BpC5vrmRLoRZcjkkZt5YCpnlOt3RApnhMpmdzgmhxrSNBszYMd35vcz8VcP8Ne3B9bQZ2qChmq49TbPoQe30UdjwVdjgLrCBxbOYWrSlI/EML_comm_afe/?hs=false&tok=0UmiO9FaFIr4Y1

View profile of Mike Meng
http://www.linkedin.com/e/-b9k943-gtwu8fz5-2p/rsn/147374420/84sJ/?hs=false&tok=0-pP0betlIr4Y1
------------------------------------------

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20111018/f5655d47/attachment-0001.htm 

From dynamicgl at gmail.com  Tue Oct 18 13:11:47 2011
From: dynamicgl at gmail.com (gelin yan)
Date: Wed, 19 Oct 2011 01:11:47 +0800
Subject: [Twisted-Python] Anyone interested in being release manager for
	11.1?
In-Reply-To: <0ea9541af436201d0427aca665585c9f.squirrel@webmail.zoteca.com>
References: <0ea9541af436201d0427aca665585c9f.squirrel@webmail.zoteca.com>
Message-ID: <CABkOF6SSx17ogswKcKhGSoRO3W=7--QKjgQhDCaJ7mHUWQDmcQ@mail.gmail.com>

any tutorial for how to be a release manager?

On Tue, Oct 18, 2011 at 3:35 AM, Itamar Turner-Trauring <itamar at itamarst.org
> wrote:

> Twisted is basically at a point where a new version can be released...
> given a release manager. I'm told it's pretty automated and only takes 45
> minutes or so these days.
>
> Any volunteers?
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20111019/5dddc0fc/attachment.htm 

From jml at mumak.net  Tue Oct 18 13:14:07 2011
From: jml at mumak.net (Jonathan Lange)
Date: Tue, 18 Oct 2011 18:14:07 +0100
Subject: [Twisted-Python] Anyone interested in being release manager for
	11.1?
In-Reply-To: <CABkOF6SSx17ogswKcKhGSoRO3W=7--QKjgQhDCaJ7mHUWQDmcQ@mail.gmail.com>
References: <0ea9541af436201d0427aca665585c9f.squirrel@webmail.zoteca.com>
	<CABkOF6SSx17ogswKcKhGSoRO3W=7--QKjgQhDCaJ7mHUWQDmcQ@mail.gmail.com>
Message-ID: <CAHZ8tnaxMAJj9gz_Mdj-He3nQm35_QBo+9C2qPmt=3UGYwpHKA@mail.gmail.com>

On Tue, Oct 18, 2011 at 6:11 PM, gelin yan <dynamicgl at gmail.com> wrote:
> any tutorial for how to be a release manager?
>

<http://twistedmatrix.com/trac/wiki/ReleaseProcess> just about covers it.

jml


From agasson at red-elvis.net  Tue Oct 18 13:20:15 2011
From: agasson at red-elvis.net (=?iso-8859-1?Q?Andr=E9s_Gasson?=)
Date: Tue, 18 Oct 2011 19:20:15 +0200
Subject: [Twisted-Python] Anyone interested in being release manager for
	11.1?
In-Reply-To: <CAHZ8tnaxMAJj9gz_Mdj-He3nQm35_QBo+9C2qPmt=3UGYwpHKA@mail.gmail.com>
References: <0ea9541af436201d0427aca665585c9f.squirrel@webmail.zoteca.com>
	<CABkOF6SSx17ogswKcKhGSoRO3W=7--QKjgQhDCaJ7mHUWQDmcQ@mail.gmail.com>
	<CAHZ8tnaxMAJj9gz_Mdj-He3nQm35_QBo+9C2qPmt=3UGYwpHKA@mail.gmail.com>
Message-ID: <32DED3E9-049E-4EFE-BAAC-1F2663E4868D@red-elvis.net>

I don't meet many of the prerequisites (none actually)  - but seeing Im now recently unemployed I can offer a hand to anyone who does have the prerequisites

Commit privileges to Twisted
Shell access to cube.twistedmatrix.com
XXX: Possibly this ought to be permission to log in as www-data
Write permissions to /srv/www-data/twisted on cube (normally, www-data membership)
Write permissions to /srv/www-data/website/vhosts/twistedmatrix.com/documents
Permissions to edit WikiStart
Channel operator permissions for #twisted
Admin privileges for Twisted's PyPI packages
Membership of  https://launchpad.net/~twisted-dev
Contributor status for  http://labs.twistedmatrix.com
Cheers Gas
On 18/10/2011, at 7:14 PM, Jonathan Lange wrote:

> On Tue, Oct 18, 2011 at 6:11 PM, gelin yan <dynamicgl at gmail.com> wrote:
>> any tutorial for how to be a release manager?
>> 
> 
> <http://twistedmatrix.com/trac/wiki/ReleaseProcess> just about covers it.
> 
> jml
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20111018/daa242d9/attachment.htm 

From solipsis at pitrou.net  Wed Oct 19 07:50:33 2011
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Wed, 19 Oct 2011 13:50:33 +0200
Subject: [Twisted-Python] Twisted for Python 3
Message-ID: <20111019135033.6b40e5ba@pitrou.net>


Hello,

I'm announcing an experimental, work-in-progress port of Twisted to
Python 3. The homepage, where you can find more detailed information,
is at https://bitbucket.org/pitrou/t3k

First step is to have core functionality (basic infrastructure, the
various reactors, transports, etc.) working. This is test-driven, since
Twisted has mostly excellent coverage. We are pretty much there. The
current status is:

The following tests pass:

    All of twisted/internet/test/*
    All of twisted/trial/test/*
    All of twisted/python/test/*
    Some of twisted/test: including test_amp, test_application,
    test_banana, test_defer, test_defgen, test_internet, test_jelly,
    test_log, test_logfile, test_paths, test_pb, test_persisted,
    test_protocols, test_ssl, test_sslverify, test_tcp, test_threads,
    test_threadpool, test_twistd, test_udp, test_unix... 

The following scripts are known to work:

    trial
    twistd

Feedback and contributions welcome. If you are interested in helping,
please go and read the link above, it will give you suggestions.

Regards

Antoine.




From _ at lvh.cc  Wed Oct 19 08:10:03 2011
From: _ at lvh.cc (Laurens Van Houtven)
Date: Wed, 19 Oct 2011 14:10:03 +0200
Subject: [Twisted-Python] Twisted for Python 3
In-Reply-To: <20111019135033.6b40e5ba@pitrou.net>
References: <20111019135033.6b40e5ba@pitrou.net>
Message-ID: <CAE_Hg6Z35W6VDM3VOpNMo0JKwVFkCwzpPqRQVeXCRv8-J=XA=w@mail.gmail.com>

Woo! Exciting :)

I'm surprised trial works. Wasn't there still a problem left with trial
related to unbound methods going away (and the replacing functions not
having a reference to the class they belong to...)? Something in t.python
that gets things based on their name, I thought... Oh well, if it works it
works.

Thank you very much for your efforts,
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20111019/8a8e4f22/attachment.htm 

From solipsis at pitrou.net  Wed Oct 19 08:12:46 2011
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Wed, 19 Oct 2011 14:12:46 +0200
Subject: [Twisted-Python] Twisted for Python 3
References: <20111019135033.6b40e5ba@pitrou.net>
	<CAE_Hg6Z35W6VDM3VOpNMo0JKwVFkCwzpPqRQVeXCRv8-J=XA=w@mail.gmail.com>
Message-ID: <20111019141246.17d136bf@pitrou.net>

On Wed, 19 Oct 2011 14:10:03 +0200
Laurens Van Houtven <_ at lvh.cc> wrote:
> Woo! Exciting :)
> 
> I'm surprised trial works. Wasn't there still a problem left with trial
> related to unbound methods going away (and the replacing functions not
> having a reference to the class they belong to...)? Something in t.python
> that gets things based on their name, I thought...

Yes, there was. I added a small hack so that it works (and so that I
can run individual test cases from the command line :-)).

Regards

Antoine.




From itamar at itamarst.org  Wed Oct 19 09:25:14 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 19 Oct 2011 09:25:14 -0400
Subject: [Twisted-Python] Twisted for Python 3
In-Reply-To: <20111019135033.6b40e5ba@pitrou.net>
References: <20111019135033.6b40e5ba@pitrou.net>
Message-ID: <1319030714.1979.2.camel@blake>

On Wed, 2011-10-19 at 13:50 +0200, Antoine Pitrou wrote:
> Hello,
> 
> I'm announcing an experimental, work-in-progress port of Twisted to
> Python 3. The homepage, where you can find more detailed information,
> is at https://bitbucket.org/pitrou/t3k

Cool! Any patches you can submit to us that would make the code more
Python 3 compatible, while not breaking Python 2.5 and later, would make
your life easier going forward.

I notice you have banana getting extra op code for bytes... I think a
better solution is to use existing 'string' op code for bytes, and
rejecting unicode strings. What banana calls 'string' *is* bytes, it
doesn't support unicode:

http://twistedmatrix.com/documents/current/core/specifications/banana.html

In general, anywhere existing Twisted code uses a Python 2 normal
string, you should have the Python 3 version only accept bytes.



From itamar at itamarst.org  Wed Oct 19 09:39:41 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 19 Oct 2011 09:39:41 -0400
Subject: [Twisted-Python] Did twisted-commits list break?
Message-ID: <1319031581.1979.3.camel@blake>

I'm not getting updates.

-Itamar



From itamar at itamarst.org  Wed Oct 19 09:41:36 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 19 Oct 2011 09:41:36 -0400
Subject: [Twisted-Python] Twisted for Python 3
In-Reply-To: <1319030714.1979.2.camel@blake>
References: <20111019135033.6b40e5ba@pitrou.net>
	<1319030714.1979.2.camel@blake>
Message-ID: <1319031696.1979.4.camel@blake>

On Wed, 2011-10-19 at 09:25 -0400, Itamar Turner-Trauring wrote:

> I notice you have banana getting extra op code for bytes... I think a
> better solution is to use existing 'string' op code for bytes, and
> rejecting unicode strings.

Just to emphasize this: the current solution of having a new opcode for
bytes makes Perspective Broker on Python 3 incompatible with PB on
Python 2.



From solipsis at pitrou.net  Wed Oct 19 09:49:28 2011
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Wed, 19 Oct 2011 15:49:28 +0200
Subject: [Twisted-Python] Twisted for Python 3
References: <20111019135033.6b40e5ba@pitrou.net>
	<1319030714.1979.2.camel@blake>
Message-ID: <20111019154928.1f7382d0@pitrou.net>

On Wed, 19 Oct 2011 09:25:14 -0400
Itamar Turner-Trauring <itamar at itamarst.org> wrote:
> 
> Cool! Any patches you can submit to us that would make the code more
> Python 3 compatible, while not breaking Python 2.5 and later, would make
> your life easier going forward.

Yes, I've started doing that. However, the extent of these patches is
quite limited.
Most changes I have to make have to do with introducing bytes literals,
or fixing specific issues under Python 3. For example, I could post the
following patch for t.p.failure, but would you accept it?

@@ -464,6 +468,14 @@ class Failure:
         # added 2003-06-23. See comment above in __init__
         c['tb'] = None
 
+        try:
+            # Clear other references held by exception objects
+            c['value'].__cause__ = None
+            c['value'].__context__ = None
+            c['value'].__traceback__ = None
+        except AttributeError:
+            pass
+
         if self.stack is not None:
             # XXX: This is a band-aid.  I can't figure out where these
             # (failure.stack is None) instances are coming from.

> I notice you have banana getting extra op code for bytes... I think a
> better solution is to use existing 'string' op code for bytes, and
> rejecting unicode strings. What banana calls 'string' *is* bytes, it
> doesn't support unicode:

Indeed, this is debatable. But generally, marshalling libraries have to
evolve a bit when ported to Python 3. There's no way the semantic gap
between 2.x and 3.x can be ignored.

I think banana in 3.x *has* to support both types. str is a fundamental
type in 3.x (think that class names, function names, filenames, etc.
all are str by default) and not supporting it in a marshalling library
would be pretty much awkward. bytes is fundamental in a networking
library and not supporting it would be similarly awkward :)

Moreover, 3.x has a natural preference for unicode strings while
2.x has a natural preference for 8-bit strings. Where high-level
data is handled, Python 3 users will expect to use str object, not bytes
objects, for text data (if you marshal e.g. a class name, you don't
expect it to come out as bytes... and neither would Perspective
Broker, I guess). Str objects also have more features, which make them
more amenable to parsing and formatting.

That's why I think translating the "string" type to 3.x str objects is
what users would expect in practice. This is also the decision
taken in the standard pickle module: if you unpickle a 2.x pickle
containing str objects, you get 3.x str objects (not bytes).

> In general, anywhere existing Twisted code uses a Python 2 normal
> string, you should have the Python 3 version only accept bytes.

Due to the aforementioned differences, I don't think that's as simple.
For example, filenames are pretty much str (unicode) by default in
Python 3, even though you can also use bytes (but it's discouraged
under Windows). Command-line arguments are also str, as are many other
things. And I'll think you'll agree that it's more natural to ask for
the HTTP "GET" method than for the b"GET" method.

(no, I haven't started on twisted.web yet)

Regards

Antoine.




From solipsis at pitrou.net  Wed Oct 19 10:00:06 2011
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Wed, 19 Oct 2011 16:00:06 +0200
Subject: [Twisted-Python] Twisted for Python 3
References: <20111019135033.6b40e5ba@pitrou.net>
	<1319030714.1979.2.camel@blake> <1319031696.1979.4.camel@blake>
Message-ID: <20111019160006.7196ab5c@pitrou.net>

On Wed, 19 Oct 2011 09:41:36 -0400
Itamar Turner-Trauring <itamar at itamarst.org> wrote:
> On Wed, 2011-10-19 at 09:25 -0400, Itamar Turner-Trauring wrote:
> 
> > I notice you have banana getting extra op code for bytes... I think a
> > better solution is to use existing 'string' op code for bytes, and
> > rejecting unicode strings.
> 
> Just to emphasize this: the current solution of having a new opcode for
> bytes makes Perspective Broker on Python 3 incompatible with PB on
> Python 2.

Or rather, they're compatible until you use Python 3 bytes objects.

(and I think any RPC system will have the same issues between 2.x and
3.x, regardless of whether it's based on pickle, json or even protocol
buffers)

This probably deserves more thinking. I took the most natural approach
for Python 3. The solution you are proposing (not supporting the 3.x
"str" type) would be, IMHO, worse, because the str type is fundamental
and basically no idiomatic Python 3 code could work.

Regards

Antoine.




From exarkun at twistedmatrix.com  Wed Oct 19 10:26:22 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 19 Oct 2011 14:26:22 -0000
Subject: [Twisted-Python] Did twisted-commits list break?
In-Reply-To: <1319031581.1979.3.camel@blake>
References: <1319031581.1979.3.camel@blake>
Message-ID: <20111019142622.23178.574822930.divmod.xquotient.510@localhost.localdomain>

On 01:39 pm, itamar at itamarst.org wrote:
>I'm not getting updates.

Yes.  Ages and ages ago.

Trac has an RSS feed of svn changesets.  RSS is the new email.

Jean-Paul


From exarkun at twistedmatrix.com  Wed Oct 19 10:29:17 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 19 Oct 2011 14:29:17 -0000
Subject: [Twisted-Python] Twisted for Python 3
In-Reply-To: <20111019154928.1f7382d0@pitrou.net>
References: <20111019135033.6b40e5ba@pitrou.net>
	<1319030714.1979.2.camel@blake>
	<20111019154928.1f7382d0@pitrou.net>
Message-ID: <20111019142917.23178.966512156.divmod.xquotient.514@localhost.localdomain>

On 01:49 pm, solipsis at pitrou.net wrote:
>On Wed, 19 Oct 2011 09:25:14 -0400
>Itamar Turner-Trauring <itamar at itamarst.org> wrote:
>>
>[snip]
>
>Indeed, this is debatable. But generally, marshalling libraries have to
>evolve a bit when ported to Python 3. There's no way the semantic gap
>between 2.x and 3.x can be ignored.
>
>I think banana in 3.x *has* to support both types. str is a fundamental
>type in 3.x (think that class names, function names, filenames, etc.
>all are str by default) and not supporting it in a marshalling library
>would be pretty much awkward. bytes is fundamental in a networking
>library and not supporting it would be similarly awkward :)

Unicode is handled by Jelly.  The only thing Banana does is turn objects 
into bytes to put into a socket and vice versa.  Text in Python 3 will 
be handled the same way as text in Python 2: jelly will UTF-8 encode it 
before handing it to banana.

Jean-Paul


From itamar at itamarst.org  Wed Oct 19 10:37:59 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 19 Oct 2011 10:37:59 -0400
Subject: [Twisted-Python] Twisted for Python 3
In-Reply-To: <20111019154928.1f7382d0@pitrou.net>
References: <20111019135033.6b40e5ba@pitrou.net>
	<1319030714.1979.2.camel@blake> <20111019154928.1f7382d0@pitrou.net>
Message-ID: <1319035079.1979.7.camel@blake>

On Wed, 2011-10-19 at 15:49 +0200, Antoine Pitrou wrote:

> I think banana in 3.x *has* to support both types. str is a fundamental
> type in 3.x (think that class names, function names, filenames, etc.
> all are str by default) and not supporting it in a marshalling library
> would be pretty much awkward. bytes is fundamental in a networking
> library and not supporting it would be similarly awkward :)

I'm pretty sure we did unicode support on the Jelly level, *above*
Banana. If we didn't, then we should. But that's the natural place to do
Unicode, not in the low-level protocol. So I don't think banana should
change.

In any case, I'd rather developers have to do a little bit of extra work
being compatible across Python versions (being careful about bytes vs.
strings), as opposed to the current solution, which makes it impossible
to be compatible because it's essentially a different protocol.



From itamar at itamarst.org  Wed Oct 19 10:43:21 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 19 Oct 2011 10:43:21 -0400
Subject: [Twisted-Python] Twisted for Python 3
In-Reply-To: <20111019154928.1f7382d0@pitrou.net>
References: <20111019135033.6b40e5ba@pitrou.net>
	<1319030714.1979.2.camel@blake> <20111019154928.1f7382d0@pitrou.net>
Message-ID: <1319035401.1979.9.camel@blake>

On Wed, 2011-10-19 at 15:49 +0200, Antoine Pitrou wrote:

> This is also the decision
> taken in the standard pickle module: if you unpickle a 2.x pickle
> containing str objects, you get 3.x str objects (not bytes).

That decision is wrong. It's corrupting users' data, though arguably
it's your own fault if you actually rely on pickle.



From itamar at itamarst.org  Wed Oct 19 10:56:39 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 19 Oct 2011 10:56:39 -0400
Subject: [Twisted-Python] Twisted for Python 3
In-Reply-To: <1319035079.1979.7.camel@blake>
References: <20111019135033.6b40e5ba@pitrou.net>
	<1319030714.1979.2.camel@blake> <20111019154928.1f7382d0@pitrou.net>
	<1319035079.1979.7.camel@blake>
Message-ID: <1319036199.1979.11.camel@blake>

On Wed, 2011-10-19 at 10:37 -0400, Itamar Turner-Trauring wrote:

> In any case, I'd rather developers have to do a little bit of extra work
> being compatible across Python versions (being careful about bytes vs.
> strings), as opposed to the current solution, which makes it impossible
> to be compatible because it's essentially a different protocol.

This is what I had to do for the Java version of Banana, BTW (use
bytearrays, even though Strings are easier) in order to be compatible
with the Python 2 version.



From solipsis at pitrou.net  Wed Oct 19 11:09:01 2011
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Wed, 19 Oct 2011 17:09:01 +0200
Subject: [Twisted-Python] Twisted for Python 3
References: <20111019135033.6b40e5ba@pitrou.net>
	<1319030714.1979.2.camel@blake>
	<20111019154928.1f7382d0@pitrou.net>
	<20111019142917.23178.966512156.divmod.xquotient.514@localhost.localdomain>
Message-ID: <20111019170901.1ed7d8ee@pitrou.net>

On Wed, 19 Oct 2011 14:29:17 -0000
exarkun at twistedmatrix.com wrote:
> On 01:49 pm, solipsis at pitrou.net wrote:
> >On Wed, 19 Oct 2011 09:25:14 -0400
> >Itamar Turner-Trauring <itamar at itamarst.org> wrote:
> >>
> >[snip]
> >
> >Indeed, this is debatable. But generally, marshalling libraries have to
> >evolve a bit when ported to Python 3. There's no way the semantic gap
> >between 2.x and 3.x can be ignored.
> >
> >I think banana in 3.x *has* to support both types. str is a fundamental
> >type in 3.x (think that class names, function names, filenames, etc.
> >all are str by default) and not supporting it in a marshalling library
> >would be pretty much awkward. bytes is fundamental in a networking
> >library and not supporting it would be similarly awkward :)
> 
> Unicode is handled by Jelly.  The only thing Banana does is turn objects 
> into bytes to put into a socket and vice versa.  Text in Python 3 will 
> be handled the same way as text in Python 2: jelly will UTF-8 encode it 
> before handing it to banana.

Hmm, ok, I will take another look then.

Regards

Antoine.




From solipsis at pitrou.net  Wed Oct 19 11:12:04 2011
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Wed, 19 Oct 2011 17:12:04 +0200
Subject: [Twisted-Python] Twisted for Python 3
References: <20111019135033.6b40e5ba@pitrou.net>
	<1319030714.1979.2.camel@blake>
	<20111019154928.1f7382d0@pitrou.net>
	<1319035401.1979.9.camel@blake>
Message-ID: <20111019171204.23742291@pitrou.net>

On Wed, 19 Oct 2011 10:43:21 -0400
Itamar Turner-Trauring <itamar at itamarst.org> wrote:
> On Wed, 2011-10-19 at 15:49 +0200, Antoine Pitrou wrote:
> 
> > This is also the decision
> > taken in the standard pickle module: if you unpickle a 2.x pickle
> > containing str objects, you get 3.x str objects (not bytes).
> 
> That decision is wrong. It's corrupting users' data, though arguably
> it's your own fault if you actually rely on pickle.

No matter how you decide to handle the transition, there will be
incompatibilities when transitioning between different data models.
Relying on a pickle is no different than relying on a JSON tree, an AMP
box or anything else.

Mapping the natural 2.x string type to the natural 3.x string type was
a reasonable decision in that context.

Regards

Antoine.




From itamar at itamarst.org  Wed Oct 19 11:36:59 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 19 Oct 2011 11:36:59 -0400
Subject: [Twisted-Python] Twisted for Python 3
In-Reply-To: <20111019170901.1ed7d8ee@pitrou.net>
References: <20111019135033.6b40e5ba@pitrou.net>
	<1319030714.1979.2.camel@blake> <20111019154928.1f7382d0@pitrou.net>
	<20111019142917.23178.966512156.divmod.xquotient.514@localhost.localdomain>
	<20111019170901.1ed7d8ee@pitrou.net>
Message-ID: <635f8410c535780cf52d6cdfc39c7e7c.squirrel@webmail.zoteca.com>

More generally, any place Twisted currently uses strings (i.e. byte
strings, as they all are in Python 2), the default should be bytes in
Python 3.x. When we switch to a minimum version of Python that has bytes
support we should start being more explicit about this and using the b""
syntax to emphasize this.

For example: Protocol.dataReceived, transport.write, protocol constants...
all should be bytes.

There are some places that probably should be unicode like FilePath,
although perhaps that's easier if we merge the unicode support branch.
There might be other places where a high-level API might choose to accept
unicode to make things easier (e.g. "GET" for web requests, as you said).
But in general, bytes should be the default because bytes is what network
programming is about.



From solipsis at pitrou.net  Wed Oct 19 11:40:44 2011
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Wed, 19 Oct 2011 17:40:44 +0200
Subject: [Twisted-Python] Twisted for Python 3
References: <20111019135033.6b40e5ba@pitrou.net>
	<1319030714.1979.2.camel@blake>
	<20111019154928.1f7382d0@pitrou.net>
	<20111019142917.23178.966512156.divmod.xquotient.514@localhost.localdomain>
	<20111019170901.1ed7d8ee@pitrou.net>
	<635f8410c535780cf52d6cdfc39c7e7c.squirrel@webmail.zoteca.com>
Message-ID: <20111019174044.435cfaf4@pitrou.net>

On Wed, 19 Oct 2011 11:36:59 -0400
"Itamar Turner-Trauring" <itamar at itamarst.org> wrote:
> More generally, any place Twisted currently uses strings (i.e. byte
> strings, as they all are in Python 2), the default should be bytes in
> Python 3.x.

As I already answered, it is not as simple. Idiomatic use of
bytes/unicode is not the same in 2.x as it is in 3.x.

> For example: Protocol.dataReceived, transport.write, protocol constants...

Agreed. But we are talking about data decoded by a protocol here.

Regards

Antoine.




From itamar at itamarst.org  Wed Oct 19 12:38:58 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 19 Oct 2011 12:38:58 -0400
Subject: [Twisted-Python] Twisted for Python 3
In-Reply-To: <20111019174044.435cfaf4@pitrou.net>
References: <20111019135033.6b40e5ba@pitrou.net>
	<1319030714.1979.2.camel@blake> <20111019154928.1f7382d0@pitrou.net>
	<20111019142917.23178.966512156.divmod.xquotient.514@localhost.localdomain>
	<20111019170901.1ed7d8ee@pitrou.net>
	<635f8410c535780cf52d6cdfc39c7e7c.squirrel@webmail.zoteca.com>
	<20111019174044.435cfaf4@pitrou.net>
Message-ID: <bf1f905ab0d11fe852b2999e4d94ffbe.squirrel@webmail.zoteca.com>

> Agreed. But we are talking about data decoded by a protocol here.

Banana is very low-level in the PB stack, and is explicitly designed to
send bytes, not unicode. It's Jelly that does unicode, and even there you
shouldn't need to change anything.

If the protocol decodes to bytes in Python 2, you should keep it as bytes.
E.g. twisted.web.client.getPage result should fire with bytes, not unicode
(downloading a JPEG and then decoding it to unicode isn't that useful).
For many old protocol it's not even possible to know what encoding will
work, and potentially it might use multiple different encodings in
different situations, and if you just pick UTF-8 you'll make the library
unusable for some people.



From itamar at itamarst.org  Wed Oct 19 13:10:22 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 19 Oct 2011 13:10:22 -0400
Subject: [Twisted-Python] Twisted for Python 3
In-Reply-To: <20111019154928.1f7382d0@pitrou.net>
References: <20111019135033.6b40e5ba@pitrou.net>
	<1319030714.1979.2.camel@blake> <20111019154928.1f7382d0@pitrou.net>
Message-ID: <5a82faf6b1c4b560a92cddb9ea0f3a10.squirrel@webmail.zoteca.com>

> For example, I could post the
> following patch for t.p.failure, but would you accept it?
>
> @@ -464,6 +468,14 @@ class Failure:
>          # added 2003-06-23. See comment above in __init__
>          c['tb'] = None
>
> +        try:
> +            # Clear other references held by exception objects
> +            c['value'].__cause__ = None
> +            c['value'].__context__ = None
> +            c['value'].__traceback__ = None
> +        except AttributeError:
> +            pass
> +
>          if self.stack is not None:
>              # XXX: This is a band-aid.  I can't figure out where these
>              # (failure.stack is None) instances are coming from.

That sort of patch would probably be fine, though I'd much rather that be
inside an if statement that checked the Python version rather than inside
a try/except. Faster, and much clearer what's going on.



From eric at teratorn.org  Wed Oct 19 13:17:33 2011
From: eric at teratorn.org (Eric P. Mangold)
Date: Wed, 19 Oct 2011 17:17:33 +0000
Subject: [Twisted-Python] libamp - A C library implementation of AMP
Message-ID: <20111019171733.GF13626@localhost.localdomain>

Hello,

Peter le Bek and I have been working on a C library implementation
of AMP for about 4 months now, and I was hoping to get some feedback
and constructive criticism prior to a release. And I need help answering
one big question (below).

http://amp-protocol.net/Libamp

libamp is currently quite usable, for clients and servers, and is geared
towards being used with an async I/O library such as libevent, but it
could also be driving with synchronous I/O if there was some reason to.

And we have very good test coverage! The test suite runs valgrind-clean
and includes malloc()-failure tests, so pretty much all error-handling
cases are covered and won't leak memory.

http://teratorn.org/code/libamp/html_coverage/code/libamp/index.html

A number of basic AMP types are currently supported, but support for
more advanced types, like DateTime, Decimal, ListOf and AmpList is still
needed.

The best way to get a feel for the current API would be to read the
example programs, e.g.:

http://teratorn.org/code/darcsweb/darcsweb.cgi?r=libamp;a=headblob;f=/examples/asyncserver.c
http://teratorn.org/code/darcsweb/darcsweb.cgi?r=libamp;a=headblob;f=/examples/sumclient.c

and have a look at amp.h:

http://teratorn.org/code/darcsweb/darcsweb.cgi?r=libamp;a=headblob;f=/amp.h

The API centers around AMP_Proto objects, which you create for each AMP
peer you're talking to. An AMP_Proto includes a function pointer, which you
set with amp_set_write_handler(), that knows how to deliver (or queue)
bytes to the other side (be in stdout, a socket, etc).

Then you may use amp_call() to call remote commands. When new bytes come
in, e.g. via libevent, you drive the AMP_Proto with a call to
amp_consume_bytes() which parses the incoming data and performs
callbacks to 1) deliver the result of a previous amp_call() 2) invoke a
registered responder for a command.

amp_add_responder() adds a callback function for handling specific AMP
command requests.

The basic API for actually handling a command request, or for
constructing a response, is low-level, but usable - which leads up to
the big question I'm trying to answer:

Does AMP need a declarative syntax for defining AMP commands? Think e.g.
protobuf's .proto files.

With libamp you deal directly with AMP boxes - sets of key/value pairs,
and you need to manually verify that a command was called with all of
the keys that it expects, and that the values given coerce to the
type of data you expect. Viewing amp.h and the examples, you can see how
 the amp_put_*() and amp_get_*() family of functions is used to encode
 and decode C types to and from AMP_Box's.

This isn't terribly difficult and works well enough in the simple
example programs, but I feel there must be a better way, that alleviates
some of the manual error checking.

Right now I'm leaning toward coming up with some kind of .amp file
format, and an `ampc' tool to compile it to C/libamp code.

Support for .amp files could be added in Twisted, and you could then
share Command declarations between clients and servers written in
different languages.

What about the next step of declaring AMP "services" - a set of Commands
available via a known URL. Why do crummy web-services get to
have all the fun?

All thoughts and suggestions are welcome.

    -Eric


P.S. Anyone wanting to help with the C code is free to join #amp on
Freenode and lend a hand. It could use a once-over by folks familiar
with writing C libraries and best-practices thereof.


From solipsis at pitrou.net  Wed Oct 19 13:22:19 2011
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Wed, 19 Oct 2011 19:22:19 +0200
Subject: [Twisted-Python] Twisted for Python 3
References: <20111019135033.6b40e5ba@pitrou.net>
	<1319030714.1979.2.camel@blake>
	<20111019154928.1f7382d0@pitrou.net>
	<5a82faf6b1c4b560a92cddb9ea0f3a10.squirrel@webmail.zoteca.com>
Message-ID: <20111019192219.64a5facd@pitrou.net>

On Wed, 19 Oct 2011 13:10:22 -0400
"Itamar Turner-Trauring" <itamar at itamarst.org> wrote:
> > For example, I could post the
> > following patch for t.p.failure, but would you accept it?
> >
> > @@ -464,6 +468,14 @@ class Failure:
> >          # added 2003-06-23. See comment above in __init__
> >          c['tb'] = None
> >
> > +        try:
> > +            # Clear other references held by exception objects
> > +            c['value'].__cause__ = None
> > +            c['value'].__context__ = None
> > +            c['value'].__traceback__ = None
> > +        except AttributeError:
> > +            pass
> > +
> >          if self.stack is not None:
> >              # XXX: This is a band-aid.  I can't figure out where these
> >              # (failure.stack is None) instances are coming from.
> 
> That sort of patch would probably be fine, though I'd much rather that be
> inside an if statement that checked the Python version rather than inside
> a try/except. Faster, and much clearer what's going on.

The try/except is necessary because Failures sometimes wrap something
else than an exception, and where setting an arbitrary attribute is not
allowed.

Regards

Antoine.




From glyph at twistedmatrix.com  Wed Oct 19 13:46:57 2011
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 19 Oct 2011 13:46:57 -0400
Subject: [Twisted-Python] Twisted for Python 3
In-Reply-To: <20111019192219.64a5facd@pitrou.net>
References: <20111019135033.6b40e5ba@pitrou.net>
	<1319030714.1979.2.camel@blake>
	<20111019154928.1f7382d0@pitrou.net>
	<5a82faf6b1c4b560a92cddb9ea0f3a10.squirrel@webmail.zoteca.com>
	<20111019192219.64a5facd@pitrou.net>
Message-ID: <4A1F76A3-E9CA-4314-9757-0E405CDC5DC6@twistedmatrix.com>


On Oct 19, 2011, at 1:22 PM, Antoine Pitrou wrote:

> On Wed, 19 Oct 2011 13:10:22 -0400
> "Itamar Turner-Trauring" <itamar at itamarst.org> wrote:
>>> For example, I could post the
>>> following patch for t.p.failure, but would you accept it?
>>> 
>>> @@ -464,6 +468,14 @@ class Failure:
>>>         # added 2003-06-23. See comment above in __init__
>>>         c['tb'] = None
>>> 
>>> +        try:
>>> +            # Clear other references held by exception objects
>>> +            c['value'].__cause__ = None
>>> +            c['value'].__context__ = None
>>> +            c['value'].__traceback__ = None
>>> +        except AttributeError:
>>> +            pass
>>> +
>>>         if self.stack is not None:
>>>             # XXX: This is a band-aid.  I can't figure out where these
>>>             # (failure.stack is None) instances are coming from.
>> 
>> That sort of patch would probably be fine, though I'd much rather that be
>> inside an if statement that checked the Python version rather than inside
>> a try/except. Faster, and much clearer what's going on.
> 
> The try/except is necessary because Failures sometimes wrap something
> else than an exception, and where setting an arbitrary attribute is not
> allowed.

This patch would definitely need to be accepted if you expect Twisted to eventually support Python 3.  Why do you believe it wouldn't be accepted?

Of course it would need to have some test coverage - but a first step there is to have a buildbot actually running the tests on py3k.

Also: if Failures wrap something other than an Exception, that's a bug.  in Failure.__doc__, it says: "@ivar value: The exception instance responsible for this failure."  If there are cases where non-Exceptions are passed here, then perhaps that behavior should be deprecated before it raises an exception, but something needs to be adjusted so that the documentation is consistent with the implementation.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20111019/7920e393/attachment.htm 

From glyph at twistedmatrix.com  Wed Oct 19 14:50:41 2011
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 19 Oct 2011 14:50:41 -0400
Subject: [Twisted-Python] Twisted for Python 3
In-Reply-To: <20111019135033.6b40e5ba@pitrou.net>
References: <20111019135033.6b40e5ba@pitrou.net>
Message-ID: <88E1D93D-1556-4918-AC41-11D913E44685@twistedmatrix.com>

On Oct 19, 2011, at 7:50 AM, Antoine Pitrou wrote:

> Feedback and contributions welcome. If you are interested in helping,
> please go and read the link above, it will give you suggestions.

Antoine, I'm very happy that you've decided to help Twisted get going on Py3.  I see that you've already submitted several of your fixes to the Twisted tracker.  Thanks for that. We'll try (as always) to get those reviewed soon.  We do eventually want to have 3.x support in trunk, so anything you're doing to support that goal should be an acceptable patch - provided it meets our other quality criteria, of course, but there's no patch for py3k support which shouldn't be able to meet that criteria :).

I would suggest that you submit all patches directly to the Twisted tracker, where they can be properly reviewed before landing, not to this (or any other) fork.  As several other messages in this thread have indicated, it looks like you may be misunderstanding a few key aspects of Twisted (such as how the distinction between bytes and unicode needs to be treated in the Banana protocol), so this fork is going to get some things wrong, potentially with wire-level implications and incompatibilities.  Review discussions of targeted patches will allow us to address those areas individually, while getting the other parts merged into the mainline.

(This goes double for other people who are not Antoine wanting to help out: please look first at this list of tickets: <http://twistedmatrix.com/trac/query?status=assigned&status=new&status=reopened&group=status&milestone=Python-3.x>, and help them get through the review process, rather than submitting patches to a fork.)

Most importantly, it will not be reasonable to merge in a humongous branch with hundreds of unrelated changes later; doing code review on changes that big just isn't feasible and chances are good that they will linger forever.  If your fork _is_ made to work correctly, folding that correct behavior back in with all the necessary test coverage and fixes will be a much larger job than doing it the right way in the first place, one bit at a time, in Twisted trunk.  We have had several bad experiences with this kind of development before and I would rather not repeat them.

Finally, having the code in mainline will allow it to be subjected to our correctness testing <http://buildbot.twistedmatrix.com/> and also our performance testing <http://speed.twistedmatrix.com/>, neither of which is a small effort.

If this is just a short-lived experimental test bed to try things out quickly (i.e. a spike to demonstrate that it's feasible to get Twisted on py3), then that's fine, but I am somewhat concerned that impatient users will actually adopt this fork, and we will have to spend a lot of energy telling people (A) "don't use Antoine's fork, it's broken", and (B) "please stop reporting bugs in this broken fork on our bug tracker".

At any rate, the very first step here should be to add an as-yet-unsupported py3 builder to our build farm.  This should be pretty straightforward, as new builders are added all the time, and we have some new hardware that could be put to use for this.

Alternatively, we do already have a py3k-warnings buildbot set up; you can see the current warnings here: <http://buildbot.twistedmatrix.com/builders/python-3k-warnings/builds/111/steps/trial/logs/stdio>, although possibly this needs to be updated to python 2.7 to get rid of irrelevant noise like warnings about callable() going away, since I believe it's come back to 3.x now.

We might also be able to help with your problem of testing things on Windows, as we do have several Windows test machines set up already.  (Is pywin32 supported on 3.x yet?  <http://pypi.python.org/pypi/pywin32/> doesn't indicate.)

As you can see on <http://buildbot.twistedmatrix.com/builders>, we already even have some buildbots running python 3 builds for PyOpenSSL, so this isn't even really anything new.

Would anyone like to volunteer to help out with Antoine's efforts on the build-infrastructure side of things?

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20111019/281a46bb/attachment-0001.htm 

From solipsis at pitrou.net  Wed Oct 19 15:58:36 2011
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Wed, 19 Oct 2011 21:58:36 +0200
Subject: [Twisted-Python] Twisted for Python 3
References: <20111019135033.6b40e5ba@pitrou.net>
	<88E1D93D-1556-4918-AC41-11D913E44685@twistedmatrix.com>
Message-ID: <20111019215836.7ace72f3@pitrou.net>


Hi Glyph,

On Wed, 19 Oct 2011 14:50:41 -0400
Glyph <glyph at twistedmatrix.com> wrote:
> On Oct 19, 2011, at 7:50 AM, Antoine Pitrou wrote:
> 
> > Feedback and contributions welcome. If you are interested in helping,
> > please go and read the link above, it will give you suggestions.
> 
> We do eventually want to have 3.x support in trunk, so anything you're doing to support that goal should be an acceptable patch - provided it meets our other quality criteria, of course, but there's no patch for py3k support which shouldn't be able to meet that criteria :).

To me, 3.x support in trunk is not really workable unless you drop
pre-2.6 compatibility. Bytes literals are pretty much required.
A possible workaround is to call a factory function that makes
an str into a bytes in 3.x (e.g. write B("xyz") everywhere instead of
b"xyz"), but that's quite ugly IMO, not to mention suboptimal.

> I would suggest that you submit all patches directly to the Twisted tracker, where they can be properly reviewed before landing, not to this (or any other) fork.  As several other messages in this thread have indicated, it looks like you may be misunderstanding a few key aspects of Twisted (such as how the distinction between bytes and unicode needs to be treated in the Banana protocol), so this fork is going to get some things wrong, potentially with wire-level implications and incompatibilities.

Incompatibilities are a given when you switch between two different
data models. The incompatibilities don't have to be wire-level, but
they *will* occur at the higher level anyway.

You may read my answers to Itamar for more explanation on that decision.
Of course, it is not set in stone.

> Most importantly, it will not be reasonable to merge in a humongous branch with hundreds of unrelated changes later; doing code review on changes that big just isn't feasible and chances are good that they will linger forever.  If your fork _is_ made to work correctly, folding that correct behavior back in with all the necessary test coverage and fixes will be a much larger job than doing it the right way in the first place, one bit at a time, in Twisted trunk.

Without wanting to sound unconstructive, the "right way" (the
"byte-sized" approach) does not sound workable. Some 3.x-related patches
(not mine) have been lingering for years, although they are trivial. And
these patches (mine and the others) are really the tip of iceberg.

To clarify, here's my current set of modifications post-2to3 (that
is, it does *not* include 2to3's own changes):

 .hgignore                                  |    7 +
 bin/manhole                                |    2 +-
 bin/mktap                                  |    2 +-
 bin/pyhtmlizer                             |    2 +-
 bin/tap2deb                                |    2 +-
 bin/tap2rpm                                |    2 +-
 bin/tapconvert                             |    2 +-
 bin/trial                                  |    2 +-
 bin/twistd                                 |    2 +-
 doc/core/examples/chatserver.py            |    2 +-
 doc/core/examples/echoclient.py            |    6 +-
 doc/core/examples/echoclient_ssl.py        |    6 +-
 doc/core/examples/echoclient_udp.py        |    6 +-
 doc/core/examples/simpleclient.py          |    2 +-
 setup.py                                   |    6 +-
 twisted/application/internet.py            |    4 +-
 twisted/enterprise/adbapi.py               |    8 +
 twisted/internet/_sigchld.c                |   15 +-
 twisted/internet/_signals.py               |    2 +-
 twisted/internet/_sslverify.py             |    9 +-
 twisted/internet/abstract.py               |   10 +-
 twisted/internet/address.py                |    9 +-
 twisted/internet/base.py                   |   14 +-
 twisted/internet/defer.py                  |   13 +
 twisted/internet/error.py                  |    4 +-
 twisted/internet/inotify.py                |    4 +-
 twisted/internet/pollreactor.py            |    2 +-
 twisted/internet/posixbase.py              |    4 +-
 twisted/internet/process.py                |    8 +-
 twisted/internet/protocol.py               |    2 +-
 twisted/internet/task.py                   |    2 +-
 twisted/internet/tcp.py                    |    7 +-
 twisted/internet/test/connectionmixins.py  |   10 +-
 twisted/internet/test/fakeendpoint.py      |    5 +-
 twisted/internet/test/test_fdset.py        |   18 +-
 twisted/internet/test/test_inotify.py      |    6 +-
 twisted/internet/test/test_posixprocess.py |    2 +-
 twisted/internet/test/test_process.py      |   33 +-
 twisted/internet/test/test_tcp.py          |   22 +-
 twisted/internet/test/test_udp.py          |    2 +-
 twisted/internet/test/test_unix.py         |    2 +-
 twisted/internet/threads.py                |    6 +-
 twisted/internet/unix.py                   |    5 +-
 twisted/internet/utils.py                  |   13 +-
 twisted/lore/latex.py                      |    2 +-
 twisted/lore/lint.py                       |    4 +-
 twisted/lore/tree.py                       |   21 +-
 twisted/manhole/explorer.py                |   25 +-
 twisted/persisted/aot.py                   |  146 +++---
 twisted/persisted/crefutil.py              |    2 +-
 twisted/persisted/sob.py                   |    2 +-
 twisted/persisted/styles.py                |    8 +-
 twisted/plugin.py                          |    5 +-
 twisted/protocols/amp.py                   |  210 +++++-----
 twisted/protocols/basic.py                 |   43 +-
 twisted/protocols/finger.py                |   18 +-
 twisted/protocols/ftp.py                   |    4 +-
 twisted/protocols/ident.py                 |   41 +-
 twisted/protocols/loopback.py              |   10 +-
 twisted/protocols/memcache.py              |   47 +-
 twisted/protocols/policies.py              |    4 +-
 twisted/protocols/postfix.py               |   10 +-
 twisted/protocols/socks.py                 |   22 +-
 twisted/protocols/stateful.py              |    7 +-
 twisted/protocols/test/test_tls.py         |   73 +-
 twisted/protocols/tls.py                   |    2 +-
 twisted/protocols/wire.py                  |   10 +-
 twisted/python/_initgroups.c               |   19 +-
 twisted/python/_inotify.py                 |    3 +-
 twisted/python/_release.py                 |   10 +-
 twisted/python/failure.py                  |   25 +-
 twisted/python/filepath.py                 |   44 ++-
 twisted/python/hook.py                     |    4 +-
 twisted/python/htmlizer.py                 |    5 +-
 twisted/python/log.py                      |    4 -
 twisted/python/logfile.py                  |    8 +-
 twisted/python/randbytes.py                |   11 +-
 twisted/python/reflect.py                  |    6 +-
 twisted/python/runtime.py                  |    2 +-
 twisted/python/test/modules_helpers.py     |    2 +-
 twisted/python/test/test_deprecate.py      |    6 +-
 twisted/python/test/test_dist.py           |   10 +-
 twisted/python/test/test_hashlib.py        |   40 +-
 twisted/python/test/test_htmlizer.py       |   18 +-
 twisted/python/test/test_release.py        |  470 ++++++++++++-----------
 twisted/python/test/test_util.py           |   11 +-
 twisted/python/test/test_versions.py       |   19 +-
 twisted/python/test/test_zipstream.py      |  116 +++--
 twisted/python/text.py                     |   24 +-
 twisted/python/usage.py                    |   12 +-
 twisted/python/util.py                     |   74 +---
 twisted/python/versions.py                 |   51 +-
 twisted/python/win32.py                    |    6 +-
 twisted/python/zippath.py                  |   22 +-
 twisted/python/zipstream.py                |   28 +-
 twisted/runner/portmap.c                   |   18 +-
 twisted/scripts/_twistd_unix.py            |    2 +-
 twisted/scripts/trial.py                   |    4 +-
 twisted/spread/banana.py                   |   68 ++-
 twisted/spread/flavors.py                  |   38 +
 twisted/spread/jelly.py                    |  112 +----
 twisted/spread/pb.py                       |   35 +-
 twisted/spread/publish.py                  |    4 +-
 twisted/test/iosim.py                      |    4 +-
 twisted/test/proto_helpers.py              |   10 +-
 twisted/test/test_adbapi.py                |    6 +-
 twisted/test/test_amp.py                   |  330 ++++++++--------
 twisted/test/test_application.py           |   10 +-
 twisted/test/test_banana.py                |   64 +-
 twisted/test/test_defgen.py                |    2 +-
 twisted/test/test_epoll.py                 |    4 +-
 twisted/test/test_failure.py               |    4 +-
 twisted/test/test_fdesc.py                 |   26 +-
 twisted/test/test_finger.py                |   16 +-
 twisted/test/test_ident.py                 |   42 +-
 twisted/test/test_internet.py              |   28 +-
 twisted/test/test_iutils.py                |   18 +-
 twisted/test/test_jelly.py                 |   44 +-
 twisted/test/test_log.py                   |   22 +-
 twisted/test/test_logfile.py               |    6 +-
 twisted/test/test_loopback.py              |   64 +-
 twisted/test/test_memcache.py              |  194 ++++----
 twisted/test/test_modules.py               |   26 +-
 twisted/test/test_newcred.py               |   24 +-
 twisted/test/test_paths.py                 |   70 +-
 twisted/test/test_pb.py                    |   18 +-
 twisted/test/test_pbfailure.py             |    4 +-
 twisted/test/test_persisted.py             |   14 +-
 twisted/test/test_policies.py              |   49 +-
 twisted/test/test_postfix.py               |   20 +-
 twisted/test/test_protocols.py             |  290 +++++++-------
 twisted/test/test_socks.py                 |  112 ++--
 twisted/test/test_ssl.py                   |   28 +-
 twisted/test/test_sslverify.py             |    2 +-
 twisted/test/test_stateful.py              |    8 +-
 twisted/test/test_tcp.py                   |   34 +-
 twisted/test/test_tcp_internals.py         |    5 +
 twisted/test/test_threadable.py            |    2 +-
 twisted/test/test_threads.py               |    6 +-
 twisted/test/test_tpfile.py                |    8 +-
 twisted/test/test_twistd.py                |   14 +-
 twisted/test/test_udp.py                   |   40 +-
 twisted/test/test_unix.py                  |    8 +-
 twisted/trial/runner.py                    |   41 +-
 twisted/trial/test/packages.py             |    2 +-
 twisted/trial/test/test_assertions.py      |    2 -
 twisted/trial/test/test_loader.py          |   21 +-
 twisted/trial/test/test_reporter.py        |   26 +-
 twisted/trial/test/test_tests.py           |   15 +-
 twisted/trial/test/test_util.py            |    1 +
 twisted/trial/test/test_warning.py         |    8 +-
 twisted/trial/unittest.py                  |    3 +
 twisted/trial/util.py                      |    2 +-
 twisted/web/microdom.py                    |    5 +-
 154 files changed, 2171 insertions(+), 1970 deletions(-)


*Assuming* we find a clean solution to the bytes literal problem, I
could try to slice all of that into "byte-sized" patches into which I
inject version-checking boilerplate, but that would mean a large waste
of time and energy:
- for me, as I post dozens of small patches and have to follow up on
  them, and wait for them to be checked in
- for you, as you have to review these patches without perhaps even
  being Python 3 users yourselves, and without Python 3 compatibility
  being on your priority list

It would also mean neither of us would be able to remain motivated
(which, in the end, is the fundamental problem).

Therefore, my work assumes a different approach. I expect 3.x support
for Twisted to need maintenance of a dedicated branch for a
non-ephemeral lapse of time. One goal of my experiment is to find out
how easy or tedious such maintenance is.

> Finally, having the code in mainline will allow it to be subjected to our correctness testing <http://buildbot.twistedmatrix.com/> and also our performance testing <http://speed.twistedmatrix.com/>, neither of which is a small effort.

Setting up buildbots would be very nice indeed. But isn't it independent
from having the code live in "trunk"?
As for performance testing, it's probably prematurate right now :-)

> At any rate, the very first step here should be to add an as-yet-unsupported py3 builder to our build farm.  This should be pretty straightforward, as new builders are added all the time, and we have some new hardware that could be put to use for this.
> 
> Alternatively, we do already have a py3k-warnings buildbot set up; you can see the current warnings here: <http://buildbot.twistedmatrix.com/builders/python-3k-warnings/builds/111/steps/trial/logs/stdio>, although possibly this needs to be updated to python 2.7 to get rid of irrelevant noise like warnings about callable() going away, since I believe it's come back to 3.x now.

As I said, getting rid of py3k warnings is really the tip of the
iceberg. It's a nice first step, but it's neither necessary (if you
plan to maintain a 3.x branch), and it doesn't take you very far away.

(yes, callable() has come back in 3.2)

Regards

Antoine.




From itamar at itamarst.org  Wed Oct 19 16:28:12 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 19 Oct 2011 16:28:12 -0400
Subject: [Twisted-Python] Twisted for Python 3
In-Reply-To: <20111019215836.7ace72f3@pitrou.net>
References: <20111019135033.6b40e5ba@pitrou.net>
	<88E1D93D-1556-4918-AC41-11D913E44685@twistedmatrix.com>
	<20111019215836.7ace72f3@pitrou.net>
Message-ID: <c86c896386db0d08b6129e5ddd6988ef.squirrel@webmail.zoteca.com>

> To me, 3.x support in trunk is not really workable unless you drop
> pre-2.6 compatibility. Bytes literals are pretty much required.
> A possible workaround is to call a factory function that makes
> an str into a bytes in 3.x (e.g. write B("xyz") everywhere instead of
> b"xyz"), but that's quite ugly IMO, not to mention suboptimal.

We're getting closer; we're going to drop Python 2.4 as soon as the next
release is out. Still not up to 2.6, though.

> Incompatibilities are a given when you switch between two different
> data models. The incompatibilities don't have to be wire-level, but
> they *will* occur at the higher level anyway.

The thing that worries is me is unnecessary or harmful incompatibilities
that are a result of misunderstanding (e.g. the banana thing, which was an
unnecessary wire protocol change). Submitting patches would have the
benefit of letting someone else help you make these decisions; it's
unreasonable to expect you to become an expert on every single API in
Twisted.

> Without wanting to sound unconstructive, the "right way" (the
> "byte-sized" approach) does not sound workable. Some 3.x-related patches
> (not mine) have been lingering for years, although they are trivial. And
> these patches (mine and the others) are really the tip of iceberg.

There aren't any python 3 patches in the review queue at the moment; do
you have any specific tickets in mind? If they're ready to go they should
have the "review" keyword set (if they haven't addressed review comments
then that is why they aren't merged).

> *Assuming* we find a clean solution to the bytes literal problem, I
> could try to slice all of that into "byte-sized" patches into which I
> inject version-checking boilerplate, but that would mean a large waste
> of time and energy:
> - for me, as I post dozens of small patches and have to follow up on
>   them, and wait for them to be checked in
> - for you, as you have to review these patches without perhaps even
>   being Python 3 users yourselves, and without Python 3 compatibility
>   being on your priority list

Most of us aren't Windows users either, but we still try to support
Windows :)




From glyph at twistedmatrix.com  Wed Oct 19 17:37:00 2011
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 19 Oct 2011 17:37:00 -0400
Subject: [Twisted-Python] Twisted for Python 3
In-Reply-To: <c86c896386db0d08b6129e5ddd6988ef.squirrel@webmail.zoteca.com>
References: <20111019135033.6b40e5ba@pitrou.net>
	<88E1D93D-1556-4918-AC41-11D913E44685@twistedmatrix.com>
	<20111019215836.7ace72f3@pitrou.net>
	<c86c896386db0d08b6129e5ddd6988ef.squirrel@webmail.zoteca.com>
Message-ID: <8A765B93-DD35-4C7C-A67E-532BFE3FD649@twistedmatrix.com>


On Oct 19, 2011, at 4:28 PM, Itamar Turner-Trauring wrote:

>> To me, 3.x support in trunk is not really workable unless you drop
>> pre-2.6 compatibility. Bytes literals are pretty much required.
>> A possible workaround is to call a factory function that makes
>> an str into a bytes in 3.x (e.g. write B("xyz") everywhere instead of
>> b"xyz"), but that's quite ugly IMO, not to mention suboptimal.
> 
> We're getting closer; we're going to drop Python 2.4 as soon as the next
> release is out. Still not up to 2.6, though.

For one thing:

What's the big problem with B("")?  It does not strike me as particularly problematic.  We call plenty of functions at import time, I'm sure that it's not going to impact performance much.  Plus, it's very easy to fix with a trivial regex when we do drop 2.5 support eventually: the expression evaluates to the same thing.  If anything, concern about the function call overhead will simply encourage us to make more constant bytestrings module-level constants instead of inline expressions, which is a plus if you ask me :).

>> Incompatibilities are a given when you switch between two different
>> data models. The incompatibilities don't have to be wire-level, but
>> they *will* occur at the higher level anyway.
> 
> The thing that worries is me is unnecessary or harmful incompatibilities
> that are a result of misunderstanding (e.g. the banana thing, which was an
> unnecessary wire protocol change). Submitting patches would have the
> benefit of letting someone else help you make these decisions; it's
> unreasonable to expect you to become an expert on every single API in
> Twisted.

Nothing to say to this besides a big "+1".  This is the whole point of the review process: to make sure that appropriate knowledge is shared before committing to a change.

>> Without wanting to sound unconstructive, the "right way" (the
>> "byte-sized" approach) does not sound workable. Some 3.x-related patches
>> (not mine) have been lingering for years, although they are trivial. And
>> these patches (mine and the others) are really the tip of iceberg.
> 
> There aren't any python 3 patches in the review queue at the moment; do
> you have any specific tickets in mind? If they're ready to go they should
> have the "review" keyword set (if they haven't addressed review comments
> then that is why they aren't merged).

I should note also that our review queue has gotten to 0 tickets several times since those tickets have last been in review, so things are getting through.

The problem here is that nobody is putting in the consistent work necessary to get these patches through review and merged to trunk.  Almost all the py3k patches have been dropped off and then abandoned.  The solution is not to give up and abandon all the patches together, but rather to find some people to get involved and continue participating in that work.

(That's not to say that I don't appreciate the effort involved in dropping those patches off in the first place.  I do.  It also doesn't mean that people shouldn't drop off patches if they're not going to finish them; they definitely should.  The original author doesn't necessarily have to be the one to do the responding to feedback.)

It may seem easier right now to put them into a big pile and forget about that process, but what happens once trunk has moved on?  We don't make a lot of incompatible changes, but that doesn't mean we don't change the implementation of things quite a bit.  Lots of work has gone on in core areas of Twisted recently - including a near-total rewrite of TLS support - and many more such changes are coming.  The relative stability of Twisted as an API to depend on says nothing about the stability of the code in terms of diffs continuing to apply; and the larger the diff, the more likely it's going to run into conflicts.

It's worth the extra effort to get the code into the mainline because when the work is done, it's actually done: we continue to maintain that code moving forward, and assuming that there is an appropriate buildslave (possibly one with the 'rachet'-style reporting that exarkun just set up for pydoctor?), we make sure that future changes won't undo the progress that has been made and introduce more py3k warnings or test failures.

If the code isn't in the mainline, then instead of supporting your efforts, all future maintenance undermines them.  You'll have to put in lots of extra work to keep your fork applying, and you'll have to do a bunch of work because any changes will not take the py3 compatibility tests into account, so every new module will be a new thing you have to clean up.  Plus you don't get the benefit of having each change tested extensively to make sure it doesn't break anything unexpected, on some weird platform or configuration.

This work on the build infrastructure and release management and QA appears to be invisible from the perspective of an individual change, but in reality it's the plurality, if not the majority, of the work that goes into the project.

>> *Assuming* we find a clean solution to the bytes literal problem,

We've already got one, except perhaps for an unreasonably strict definition of "clean" :-).

>> I could try to slice all of that into "byte-sized" patches into which I
>> inject version-checking boilerplate, but that would mean a large waste
>> of time and energy:
>> - for me, as I post dozens of small patches and have to follow up on
>>  them, and wait for them to be checked in

You can choose the appropriate size of patches; you don't have to work on a per-file basis; it would make more sense to choose a topic area than to just submit individual one-liners as patches because that's what happens to be in a single file.

>> - for you, as you have to review these patches without perhaps even
>>  being Python 3 users yourselves, and without Python 3 compatibility
>>  being on your priority list
> 
> Most of us aren't Windows users either, but we still try to support
> Windows :)

Also, the issue is not the priority of python 3 support, but the priority of reviewing incoming patches, which is always at the absolute top of our priority list.  As you can see from the scoring system on <http://twistedmatrix.com/highscores/>, we value it more highly than anything else.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20111019/1f0fb42c/attachment-0001.htm 

From itamar at itamarst.org  Wed Oct 19 17:46:41 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 19 Oct 2011 17:46:41 -0400
Subject: [Twisted-Python] Twisted for Python 3
In-Reply-To: <8A765B93-DD35-4C7C-A67E-532BFE3FD649@twistedmatrix.com>
References: <20111019135033.6b40e5ba@pitrou.net>
	<88E1D93D-1556-4918-AC41-11D913E44685@twistedmatrix.com>
	<20111019215836.7ace72f3@pitrou.net>
	<c86c896386db0d08b6129e5ddd6988ef.squirrel@webmail.zoteca.com>
	<8A765B93-DD35-4C7C-A67E-532BFE3FD649@twistedmatrix.com>
Message-ID: <27693604aca7a0a5109e5119f82465bb.squirrel@webmail.zoteca.com>

Patches to Twisted trunk are also good for things that'll make 2to3 output
work with less manual fixes (e.g. renaming variables named "callable" to
something else).



From brad.milne at devx.runthered.com  Thu Oct 20 06:50:50 2011
From: brad.milne at devx.runthered.com (Brad Milne)
Date: Thu, 20 Oct 2011 23:50:50 +1300
Subject: [Twisted-Python] Twisted enterprise deployment models
Message-ID: <CAEtrYuR2rZz6uv4sXkpY5AjfNKm1j7cgf5OjV40jpimLC+v8xQ@mail.gmail.com>

We have a core message-handling platform which encompasses an
ever-increasing array of modules and services run inside one Twisted
process. This is good as it means the reactor is in control of most of the
stuff relevant to it. However, as the number of deployed services within it
grows, it becomes increasingly burdensome to have all the modules in a
single deployed codebase running in a single launched process.
Java has JEE; erlang has hot code loading; x has y; what does Twisted have?
pb?
To date we have begun introducing RabbitMQ (AMQP), with separate Twisted
processes running as adapters at either end of queues. On the surface this
fits nicely as it provides distributed architecture, resilience through
isolation, and decoupled upgrade paths. On the flipside though, it means
more technology and more processes running outside of a singleton Twisted
reactor (read: OS process management, which Twisted's designed to be better
than).

So my questions:
1) I'm right, right? Twisted doesn't have mechanisms or a library for hot
swapping code modules or similar solutions for low impact upgrades and high
availability? (I originally read about Twisted *plugins* hoping for this,
but was disappointed to find how basic they actually were)
2) Is RabbitMQ with txAMQP-empowered Twisted instances on the ends of the
queues a sensible, compatible, best-practice approach as agreed by the
community?

Looking forward to your thoughts
Brad
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20111020/58c22a08/attachment.htm 

From rlotun at gmail.com  Thu Oct 20 07:29:42 2011
From: rlotun at gmail.com (Reza Lotun)
Date: Thu, 20 Oct 2011 12:29:42 +0100
Subject: [Twisted-Python] Twisted enterprise deployment models
In-Reply-To: <CAEtrYuR2rZz6uv4sXkpY5AjfNKm1j7cgf5OjV40jpimLC+v8xQ@mail.gmail.com>
References: <CAEtrYuR2rZz6uv4sXkpY5AjfNKm1j7cgf5OjV40jpimLC+v8xQ@mail.gmail.com>
Message-ID: <CAFJezo1v8Z+bS7wOZFSEBoM791GSQwXCbUwjFb2dFPqactDagA@mail.gmail.com>

Hi Brad,

On Thu, Oct 20, 2011 at 11:50 AM, Brad Milne
<brad.milne at devx.runthered.com>wrote:

> ...
> So my questions:
> 1) I'm right, right? Twisted doesn't have mechanisms or a library for hot
> swapping code modules or similar solutions for low impact upgrades and high
> availability? (I originally read about Twisted *plugins* hoping for this,
> but was disappointed to find how basic they actually were)
>

No, not a complete, first-class mechanism (at least as far as I know).

However, there are a few pieces in Twisted which can be used to build such a
solution. I've been meaning to piece them together for a while to do this,
but time-constraints and what-not have prohibited that so far:

1.
http://twistedmatrix.com/documents/current/api/twisted.python.rebuild.html
This a module that can be used to reload class definitions and instances,
etc. You can conceive of a system whereby you load a class that defines a
code loading module that can pick up modules in a directory and periodically
refresh their definitions, for example. One way to do it with RabbitMQ is
have a queue specifically for code-refreshes - when a code-reload service
receives a message it does one or more twisted.python.rebuilds to reload the
code definitions, or something. There is obviously still a lot you have to
do yourself, but it's something. (I'm aware that reloading modules in Python
is generally difficult because of all the stray references that can still
exist, but you can probably structure the code in such a way that a reload,
or series of reloads will do the job).

2.
http://twistedmatrix.com/documents/current/api/twisted.runner.procmon.ProcessMonitor.html
A service to monitor processes. You can have other services running in
container processes, and use this functionality to monitor and control them.

3.
http://twistedmatrix.com/documents/current/api/twisted.internet.protocol.ProcessProtocol.html
You can define process protocols that implement specific job types. Usually
this is used to spread process amongst cores, but you could also use it for
sanboxing functionality I suppose. Another project that uses this for
spreading working process amongst cores is Ampoule:
https://launchpad.net/ampoule


2) Is RabbitMQ with txAMQP-empowered Twisted instances on the ends of the
> queues a sensible, compatible, best-practice approach as agreed by the
> community?
>

Sure. It's one approach. You can also use Redis and txRedis -
https://github.com/rlotun/txRedis. Redis has pub-sub functionality that's
much simpler than AMQP (but not as powerful - for example you can't do
something like ACK a task). But for basic pub-sub it's awesome.

We use both RabbitMQ and Redis, via txAMQP and txRedis.

Reza

-- 
Reza Lotun
mobile: +44 (0)7521 310 763
email:  rlotun at gmail.com
work:   rlotun at twitter.com
@rlotun
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20111020/6bc4608f/attachment.htm 

From itamar at itamarst.org  Thu Oct 20 07:50:29 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Thu, 20 Oct 2011 07:50:29 -0400
Subject: [Twisted-Python] Twisted enterprise deployment models
In-Reply-To: <CAFJezo1v8Z+bS7wOZFSEBoM791GSQwXCbUwjFb2dFPqactDagA@mail.gmail.com>
References: <CAEtrYuR2rZz6uv4sXkpY5AjfNKm1j7cgf5OjV40jpimLC+v8xQ@mail.gmail.com>
	<CAFJezo1v8Z+bS7wOZFSEBoM791GSQwXCbUwjFb2dFPqactDagA@mail.gmail.com>
Message-ID: <1319111429.1979.12.camel@blake>

On Thu, 2011-10-20 at 12:29 +0100, Reza Lotun wrote

> 1. http://twistedmatrix.com/documents/current/api/twisted.python.rebuild.html
> This a module that can be used to reload class definitions and
> instances, etc.

This is probably not something you want to use in production. Too many
thing can go wrong.





From itamar at itamarst.org  Thu Oct 20 07:57:23 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Thu, 20 Oct 2011 07:57:23 -0400
Subject: [Twisted-Python] Twisted enterprise deployment models
In-Reply-To: <CAEtrYuR2rZz6uv4sXkpY5AjfNKm1j7cgf5OjV40jpimLC+v8xQ@mail.gmail.com>
References: <CAEtrYuR2rZz6uv4sXkpY5AjfNKm1j7cgf5OjV40jpimLC+v8xQ@mail.gmail.com>
Message-ID: <1319111843.1979.18.camel@blake>

On Thu, 2011-10-20 at 23:50 +1300, Brad Milne wrote:

> To date we have begun introducing RabbitMQ (AMQP), with separate
> Twisted processes running as adapters at either end of queues. On the
> surface this fits nicely as it provides distributed architecture,
> resilience through isolation, and decoupled upgrade paths. On the
> flipside though, it means more technology and more processes running
> outside of a singleton Twisted reactor (read: OS process management,
> which Twisted's designed to be better than).

Twisted is not better than OS process management, I'd say. It's more of
a complement - the event driven model is better than threading
(especially given Python's crippled support for threads), and processes
gives you scalability, robustness and the ability to upgrade code. 
Since it sounds like you have a working solution, no need to worry too
much about theoretical superior solutions :)

Of course, what little I know of Erlang suggests that it's way better,
in terms of hot upgrades... but the language was designed with that in
mind, unlike Python.




From radix at twistedmatrix.com  Thu Oct 20 09:16:32 2011
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Thu, 20 Oct 2011 09:16:32 -0400
Subject: [Twisted-Python] Twisted enterprise deployment models
In-Reply-To: <CAEtrYuR2rZz6uv4sXkpY5AjfNKm1j7cgf5OjV40jpimLC+v8xQ@mail.gmail.com>
References: <CAEtrYuR2rZz6uv4sXkpY5AjfNKm1j7cgf5OjV40jpimLC+v8xQ@mail.gmail.com>
Message-ID: <CAPkRfUS-gimBZnKAwaxPPTU=X2_WTSrWug=fpZLF99kt0Qr5pw@mail.gmail.com>

On Thu, Oct 20, 2011 at 6:50 AM, Brad Milne
<brad.milne at devx.runthered.com>wrote:

> 2) Is RabbitMQ with txAMQP-empowered Twisted instances on the ends of the
> queues a sensible, compatible, best-practice approach as agreed by the
> community?
>


Yeah, do this.

One of these days I'm going to release a library for making deploying these
kinds of scalable AMQP/RPC type of services on Twisted easier...



-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20111020/b18c97aa/attachment.htm 

From glyph at twistedmatrix.com  Thu Oct 20 13:09:10 2011
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 20 Oct 2011 13:09:10 -0400
Subject: [Twisted-Python] Twisted enterprise deployment models
In-Reply-To: <1319111429.1979.12.camel@blake>
References: <CAEtrYuR2rZz6uv4sXkpY5AjfNKm1j7cgf5OjV40jpimLC+v8xQ@mail.gmail.com>
	<CAFJezo1v8Z+bS7wOZFSEBoM791GSQwXCbUwjFb2dFPqactDagA@mail.gmail.com>
	<1319111429.1979.12.camel@blake>
Message-ID: <78ACF307-22E3-454A-B40E-679A34B9B314@twistedmatrix.com>

On Oct 20, 2011, at 7:50 AM, Itamar Turner-Trauring wrote:

> On Thu, 2011-10-20 at 12:29 +0100, Reza Lotun wrote
> 
>> 1. http://twistedmatrix.com/documents/current/api/twisted.python.rebuild.html
>> This a module that can be used to reload class definitions and
>> instances, etc.
> 
> This is probably not something you want to use in production. Too many
> thing can go wrong.

Can you list some of the things that might go wrong?  I've used rebuild in production, and it's perfectly fine if you understand the inherent limitations of Python's object model reloading code.  For services with long startup time and lots of data in core it can be the best option.



From itamar at itamarst.org  Thu Oct 20 13:25:27 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Thu, 20 Oct 2011 13:25:27 -0400
Subject: [Twisted-Python] Twisted enterprise deployment models
In-Reply-To: <78ACF307-22E3-454A-B40E-679A34B9B314@twistedmatrix.com>
References: <CAEtrYuR2rZz6uv4sXkpY5AjfNKm1j7cgf5OjV40jpimLC+v8xQ@mail.gmail.com>
	<CAFJezo1v8Z+bS7wOZFSEBoM791GSQwXCbUwjFb2dFPqactDagA@mail.gmail.com>
	<1319111429.1979.12.camel@blake>
	<78ACF307-22E3-454A-B40E-679A34B9B314@twistedmatrix.com>
Message-ID: <fb52acbd913bbffc32dfc566cdf6cd05.squirrel@webmail.zoteca.com>

> Can you list some of the things that might go wrong?  I've used rebuild in
> production, and it's perfectly fine if you understand the inherent
> limitations of Python's object model reloading code.  For services with
> long startup time and lots of data in core it can be the best option.

You might end up using code that was written by someone who didn't
understand  the inherent limitations of Python's object model reloading
code :)

Personally if I was reloading code I'd prefer something that more
explicitly loaded something as a new object, rather than replacing in
place.



From glyph at twistedmatrix.com  Thu Oct 20 14:13:46 2011
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 20 Oct 2011 14:13:46 -0400
Subject: [Twisted-Python] Twisted enterprise deployment models
In-Reply-To: <CAEtrYuR2rZz6uv4sXkpY5AjfNKm1j7cgf5OjV40jpimLC+v8xQ@mail.gmail.com>
References: <CAEtrYuR2rZz6uv4sXkpY5AjfNKm1j7cgf5OjV40jpimLC+v8xQ@mail.gmail.com>
Message-ID: <95EE3AF6-93E3-4B18-90FD-291A847EFA2A@twistedmatrix.com>

On Oct 20, 2011, at 6:50 AM, Brad Milne wrote:

> We have a core message-handling platform which encompasses an ever-increasing array of modules and services run inside one Twisted process. This is good as it means the reactor is in control of most of the stuff relevant to it. However, as the number of deployed services within it grows, it becomes increasingly burdensome to have all the modules in a single deployed codebase running in a single launched process.
> Java has JEE; erlang has hot code loading; x has y; what does Twisted have? pb?

Erlang can do this because it has a strict separation of state and behavior (in the vernacular, "it is not object-oriented") and J2EE can do this because it requires you to externalize all your state - usually to a relational database.  Part of the appeal of Twisted is that you can freely use simple, in-memory mutable data structures to store your mutable state.

Introducing these kinds of limits into the Twisted ecosystem would not be impossible, but it is very challenging, because you'd have to come up with a model that applied equally well to all of the supported protocols and all the ways you might want to store state within those protocols.  

> To date we have begun introducing RabbitMQ (AMQP), with separate Twisted processes running as adapters at either end of queues. On the surface this fits nicely as it provides distributed architecture, resilience through isolation, and decoupled upgrade paths. On the flipside though, it means more technology and more processes running outside of a singleton Twisted reactor (read: OS process management, which Twisted's designed to be better than).

I'm not sure what you mean by "OS process management" versus "Twisted process management".  It's true that you get some benefits from using spawnProcess to manage your subprocesses, since you can write code to automatically start and stop them in response to certain stimuli, but this relies completely on however it is your OS starts and stops processes.  Why not just have a Twisted monitor process that starts and monitors the health of all of your queue producer/consumer processes?  Then you should get the best of both worlds.

> So my questions:
> 1) I'm right, right? Twisted doesn't have mechanisms or a library for hot swapping code modules or similar solutions for low impact upgrades and high availability? (I originally read about Twisted *plugins* hoping for this, but was disappointed to find how basic they actually were)

Reza already replied with a pretty good list of possible options for this, but: no, there's no single, one-size-fits-all solution for this.

And there could be!  As I said above, it's tricky, but if you could think of a good design for such a system, I'd absolutely LOVE for it to be in Twisted.  Please feel free to contribute something :).

> 2) Is RabbitMQ with txAMQP-empowered Twisted instances on the ends of the queues a sensible, compatible, best-practice approach as agreed by the community?

No.

I don't mean that it doesn't work, I just don't like the term "best-practice".

Maybe your implementation is a good idea, maybe not.  But if I said it's a "best practice", that would relieve you of the need to think critically about whether or not this approach was satisfying your requirements.  There are some cases where this is a good idea, some not.  There are some people in the community who have had good experiences with this approach; I personally don't use it.

You'll have to be the judge of whether it's working for you or not.



From brad.milne at devx.runthered.com  Thu Oct 20 20:10:21 2011
From: brad.milne at devx.runthered.com (Brad Milne)
Date: Fri, 21 Oct 2011 13:10:21 +1300
Subject: [Twisted-Python] Twisted enterprise deployment models
In-Reply-To: <95EE3AF6-93E3-4B18-90FD-291A847EFA2A@twistedmatrix.com>
References: <CAEtrYuR2rZz6uv4sXkpY5AjfNKm1j7cgf5OjV40jpimLC+v8xQ@mail.gmail.com>
	<95EE3AF6-93E3-4B18-90FD-291A847EFA2A@twistedmatrix.com>
Message-ID: <CAEtrYuR6veT36NQrazECrMZSdyJcM+r1xBGfiJKQGWtT9oh3kA@mail.gmail.com>

Thanks all for the thoughts.

Clinching drivers for us to choose AMQP (RabbitMQ) include built-in
persistence, manual ACK (ie only when finished, not just when pulled), plus
the obviously strong configuration-driven routing capabilities.

With this distributed architecture using rabbit, we're not likely to pursue
a hot-swap design with Twisted - there wouldn't be the same payback compared
with the ease with which new entire adapter service code can be deployed
with rabbit maintaining messages between components. It is something I've
come back to a few times though - have thought roughly about the idea of an
enhanced Service class that can be easily swapped in and out.

The plan was that if we continued with *n *Twisted services attached by
rabbit queues that we'd eventually build some manner of central Manager that
could be responsible for tracking these things. In fact we may extend it to
become a deployment manager as well at some point, that could control the
graceful swapping out of Twisted services.

Introducing these kinds of limits into the Twisted ecosystem would not be
> impossible, but it is very challenging, because you'd have to come up with a
> model that applied equally well to all of the supported protocols and all
> the ways you might want to store state within those protocols.

On this note, I hadn't aimed for the gold-plated approach of persisting
every state - we have stateful objects that we pass around and was thinking
more of closing all inbound services, waiting for completion, then closing
outbound services and persisting these objects' state. That would be less
reusable across Twisted as a whole, I understand, but certainly makes for a
more easily consumable first bite.

Fair enough re 'best-practice' :) I knew if I went as far as to ask that,
I'd get a reasonable gauge back at least

Thanks again
Brad

PS - Christopher, I look forward to seeing that lib


On 21 October 2011 07:13, Glyph <glyph at twistedmatrix.com> wrote:

> On Oct 20, 2011, at 6:50 AM, Brad Milne wrote:
>
> > We have a core message-handling platform which encompasses an
> ever-increasing array of modules and services run inside one Twisted
> process. This is good as it means the reactor is in control of most of the
> stuff relevant to it. However, as the number of deployed services within it
> grows, it becomes increasingly burdensome to have all the modules in a
> single deployed codebase running in a single launched process.
> > Java has JEE; erlang has hot code loading; x has y; what does Twisted
> have? pb?
>
> Erlang can do this because it has a strict separation of state and behavior
> (in the vernacular, "it is not object-oriented") and J2EE can do this
> because it requires you to externalize all your state - usually to a
> relational database.  Part of the appeal of Twisted is that you can freely
> use simple, in-memory mutable data structures to store your mutable state.
>
> Introducing these kinds of limits into the Twisted ecosystem would not be
> impossible, but it is very challenging, because you'd have to come up with a
> model that applied equally well to all of the supported protocols and all
> the ways you might want to store state within those protocols.
>
> > To date we have begun introducing RabbitMQ (AMQP), with separate Twisted
> processes running as adapters at either end of queues. On the surface this
> fits nicely as it provides distributed architecture, resilience through
> isolation, and decoupled upgrade paths. On the flipside though, it means
> more technology and more processes running outside of a singleton Twisted
> reactor (read: OS process management, which Twisted's designed to be better
> than).
>
> I'm not sure what you mean by "OS process management" versus "Twisted
> process management".  It's true that you get some benefits from using
> spawnProcess to manage your subprocesses, since you can write code to
> automatically start and stop them in response to certain stimuli, but this
> relies completely on however it is your OS starts and stops processes.  Why
> not just have a Twisted monitor process that starts and monitors the health
> of all of your queue producer/consumer processes?  Then you should get the
> best of both worlds.
>
> > So my questions:
> > 1) I'm right, right? Twisted doesn't have mechanisms or a library for hot
> swapping code modules or similar solutions for low impact upgrades and high
> availability? (I originally read about Twisted *plugins* hoping for this,
> but was disappointed to find how basic they actually were)
>
> Reza already replied with a pretty good list of possible options for this,
> but: no, there's no single, one-size-fits-all solution for this.
>
> And there could be!  As I said above, it's tricky, but if you could think
> of a good design for such a system, I'd absolutely LOVE for it to be in
> Twisted.  Please feel free to contribute something :).
>
> > 2) Is RabbitMQ with txAMQP-empowered Twisted instances on the ends of the
> queues a sensible, compatible, best-practice approach as agreed by the
> community?
>
> No.
>
> I don't mean that it doesn't work, I just don't like the term
> "best-practice".
>
> Maybe your implementation is a good idea, maybe not.  But if I said it's a
> "best practice", that would relieve you of the need to think critically
> about whether or not this approach was satisfying your requirements.  There
> are some cases where this is a good idea, some not.  There are some people
> in the community who have had good experiences with this approach; I
> personally don't use it.
>
> You'll have to be the judge of whether it's working for you or not.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20111021/594e9a06/attachment.htm 

From therve at free.fr  Fri Oct 21 09:52:37 2011
From: therve at free.fr (=?ISO-8859-1?Q?Thomas_Herv=E9?=)
Date: Fri, 21 Oct 2011 15:52:37 +0200
Subject: [Twisted-Python] Anyone interested in being release manager for
 11.1?
In-Reply-To: <32DED3E9-049E-4EFE-BAAC-1F2663E4868D@red-elvis.net>
References: <0ea9541af436201d0427aca665585c9f.squirrel@webmail.zoteca.com>	<CABkOF6SSx17ogswKcKhGSoRO3W=7--QKjgQhDCaJ7mHUWQDmcQ@mail.gmail.com>	<CAHZ8tnaxMAJj9gz_Mdj-He3nQm35_QBo+9C2qPmt=3UGYwpHKA@mail.gmail.com>
	<32DED3E9-049E-4EFE-BAAC-1F2663E4868D@red-elvis.net>
Message-ID: <4EA17925.8040308@free.fr>

Le 18/10/2011 19:20, Andr?s Gasson a ?crit :
> I don't meet many of the prerequisites (none actually)  - but seeing Im now recently unemployed I can offer a hand to anyone who does have the prerequisites
> 
> Commit privileges to Twisted
> Shell access to cube.twistedmatrix.com
> XXX: Possibly this ought to be permission to log in as www-data
> Write permissions to /srv/www-data/twisted on cube (normally, www-data membership)
> Write permissions to /srv/www-data/website/vhosts/twistedmatrix.com/documents
> Permissions to edit WikiStart
> Channel operator permissions for #twisted
> Admin privileges for Twisted's PyPI packages
> Membership of  https://launchpad.net/~twisted-dev
> Contributor status for  http://labs.twistedmatrix.com
> Cheers Gas
> On 18/10/2011, at 7:14 PM, Jonathan Lange wrote:
> 
>> On Tue, Oct 18, 2011 at 6:11 PM, gelin yan <dynamicgl at gmail.com> wrote:
>>> any tutorial for how to be a release manager?
>>>
>>
>> <http://twistedmatrix.com/trac/wiki/ReleaseProcess> just about covers it.
>>
>> jml

Hi,

I'm going to take care of the (first) pre-release. Don't hesitate to
hang out in #twisted on freenode if you want to follow. Testing the
tarballs afterward will be much appreciated as well.

Cheers,

-- 
Thomas


From therve at free.fr  Fri Oct 21 10:28:24 2011
From: therve at free.fr (=?ISO-8859-1?Q?Thomas_Herv=E9?=)
Date: Fri, 21 Oct 2011 16:28:24 +0200
Subject: [Twisted-Python] First pre-release of Twisted 11.1.0
Message-ID: <4EA18188.2040706@free.fr>

Hello, fine people of the intraweb,

We're dangerously approaching the end of the year, without a second
release done, which is obviously unacceptable. I thus present you with
Twisted 11.1.0pre1:

    http://people.canonical.com/~therve/Twisted/11.1.0pre1/

Some hightlights of the 178 tickets closed:

 * The poll reactor as default where applicable, instead of select
   everywhere.

 * A new SSL implementation only relying on OpenSSL for cryptography,
   (not I/O) making it more robust, and adding IOCP support in the
   process.

 * Several improvements to the fresh HTTP/1.1 client implementation,
   including proxy and cookie support.

 * My personal favorite: a new howto has been published on test-driven
   development with Twisted.

 * A special mention to the new abortConnection support on TCP and SSL
   connections, heroically pushed by Itamar and Jean-Paul, and the
   oldest ticket closed by this release.

Please give it all the testing love it deserves (and be harsh if necessary).

Release-manager-ly yours,

-- 
Thomas


From jml at mumak.net  Fri Oct 21 12:32:37 2011
From: jml at mumak.net (Jonathan Lange)
Date: Fri, 21 Oct 2011 17:32:37 +0100
Subject: [Twisted-Python] First pre-release of Twisted 11.1.0
In-Reply-To: <4EA18188.2040706@free.fr>
References: <4EA18188.2040706@free.fr>
Message-ID: <CAHZ8tnYw6fqoAHZZroLVwVwSrL8cTY-CNO8vd2mE+QF2fzj-mg@mail.gmail.com>

On Fri, Oct 21, 2011 at 3:28 PM, Thomas Herv? <therve at free.fr> wrote:
> Hello, fine people of the intraweb,
>
> We're dangerously approaching the end of the year, without a second
> release done, which is obviously unacceptable. I thus present you with
> Twisted 11.1.0pre1:
>
> ? ?http://people.canonical.com/~therve/Twisted/11.1.0pre1/
>

Thanks so much!

I've gently nudged folk who work on Launchpad to give it a spin.

jml


From solipsis at pitrou.net  Fri Oct 21 13:23:53 2011
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Fri, 21 Oct 2011 19:23:53 +0200
Subject: [Twisted-Python] Twisted for Python 3
References: <20111019135033.6b40e5ba@pitrou.net>
	<88E1D93D-1556-4918-AC41-11D913E44685@twistedmatrix.com>
	<20111019215836.7ace72f3@pitrou.net>
	<c86c896386db0d08b6129e5ddd6988ef.squirrel@webmail.zoteca.com>
	<8A765B93-DD35-4C7C-A67E-532BFE3FD649@twistedmatrix.com>
	<27693604aca7a0a5109e5119f82465bb.squirrel@webmail.zoteca.com>
Message-ID: <20111021192353.52b880ad@pitrou.net>

On Wed, 19 Oct 2011 17:46:41 -0400
"Itamar Turner-Trauring" <itamar at itamarst.org> wrote:
> Patches to Twisted trunk are also good for things that'll make 2to3 output
> work with less manual fixes (e.g. renaming variables named "callable" to
> something else).

Ah, good example indeed. I take it you had already tried a 2to3 run?
(I was quite baffled by this one)

I think I'm going to follow a two-pronged approach right now:
- contribute some patches to trunk for 2to3/3.x-friendliness
- continue work on the t3k branch, because a working result is
  more interesting even if some of it has to be amended later

I'm still split about the B("") thing. Do note that a simple regex is
not enough, because of string continuations.

Regards

Antoine.




From exarkun at twistedmatrix.com  Fri Oct 21 15:19:00 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 21 Oct 2011 19:19:00 -0000
Subject: [Twisted-Python] Twisted for Python 3
In-Reply-To: <20111021192353.52b880ad@pitrou.net>
References: <20111019135033.6b40e5ba@pitrou.net>
	<88E1D93D-1556-4918-AC41-11D913E44685@twistedmatrix.com>
	<20111019215836.7ace72f3@pitrou.net>
	<c86c896386db0d08b6129e5ddd6988ef.squirrel@webmail.zoteca.com>
	<8A765B93-DD35-4C7C-A67E-532BFE3FD649@twistedmatrix.com>
	<27693604aca7a0a5109e5119f82465bb.squirrel@webmail.zoteca.com>
	<20111021192353.52b880ad@pitrou.net>
Message-ID: <20111021191900.23178.608648570.divmod.xquotient.657@localhost.localdomain>

On 05:23 pm, solipsis at pitrou.net wrote:
>On Wed, 19 Oct 2011 17:46:41 -0400
>"Itamar Turner-Trauring" <itamar at itamarst.org> wrote:
>>Patches to Twisted trunk are also good for things that'll make 2to3 
>>output
>>work with less manual fixes (e.g. renaming variables named "callable" 
>>to
>>something else).
>
>Ah, good example indeed. I take it you had already tried a 2to3 run?
>(I was quite baffled by this one)
>
>I think I'm going to follow a two-pronged approach right now:
>- contribute some patches to trunk for 2to3/3.x-friendliness

Thanks. :)

Speaking of this, it'd be great to have some help from some other 
developers who are interested in Python 3 support.  There are now four 
of Antoine's tickets up for review (see 
<http://twistedmatrix.com/trac/report/15>) - reviewing one of them would 
be a great way to help with the Python 3 effort.

If you're interested and you've never done a review before, take a look 
at <http://twistedmatrix.com/trac/wiki/ReviewProcess> and then get 
started!  You'll also get yourself onto 
<http://twistedmatrix.com/highscores>. :)

Jean-Paul
>- continue work on the t3k branch, because a working result is
>  more interesting even if some of it has to be amended later
>
>I'm still split about the B("") thing. Do note that a simple regex is
>not enough, because of string continuations.
>
>Regards
>
>Antoine.
>
>
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From jon at multani.info  Fri Oct 21 21:32:10 2011
From: jon at multani.info (Jonathan Ballet)
Date: Sat, 22 Oct 2011 10:32:10 +0900
Subject: [Twisted-Python] Passing extra arguments along callbacks
Message-ID: <20111022013208.GA9360@localhost>

Hello,

I'm trying to play a little bit with Twisted to discover how it works
and I thought it was a nice exercise with the following case.

I have a list of IP addresses that I want to get the reverse DNS value.
I'm using the answer provided by JP at
http://twistedmatrix.com/pipermail/twisted-python/2004-September/008715.html
to perform the lookup and it's all good.

I'm putting all the results of client.lookupPointer() into a
DeferredList to display the result in order when everything is donew,
which is also working fine. The code looks like this so far:


def resolve(ip):
    ptr = '.'.join(ip.split('.')[::-1]) + '.in-addr.arpa'
    return client.lookupPointer(ptr)

def display_results(result):
    for (succeeded, value) in result:
        if not succeeded:
            print "unknown"
        else:
            (ans, auth, add) = value
            name = ans[0].payload.name
            print name

d = DeferredList([resolve(ip) for ip in IPS],
                  consumeErrors=True).addCallback(display_results)


Now, I would like to have access both to the result of the lookup but
also the original IP address, so that I can print, especially, the
addresses which failed to be resolved.

At first, I added a callback to lookupPointer() like this:

    client.lookupPointer(ptr).addCallback(lambda r: (ip, r))

and it does the job: in display_results(), I now have the IP address and
the result of the lookup.

However, I'm stuck how to do this for the failures: I tried to add an
errback the same way as I added the callback to lookupPointer(), but
then, it seems that DeferredList() sees the result of the errback() as a
ssuccess, so `succeeded` is True and I hav to ressort to a isinstance()
call to compare to see if my item is a Failure exception or not, like
this:


def display_results(result):
    for (succeeded, value) in result:
        ip, answer = result
        if isinstance(answer, twisted.python.failure.Failure):
            succeeded = False
        ...

My question is: is there a simpler way to pass values along the
callbacks?

Side question: why the reactor is not stopped in the final example
below?


Thanks!

 Jonathan

ps: my final try looks like this:


from twisted.internet import reactor
from twisted.internet.defer import DeferredList
from twisted.names import client
import twisted.python.failure


IPS = open('ips.txt').read().split()[0:10]


def display_results(result):
    for (succeeded, value) in result:
        ip, answer = value
        if isinstance(answer, twisted.python.failure.Failure):
            succeeded = False

        if not succeeded:
            name = "(unknown)"
        else:
            (ans, auth, add) = answer
            name = str(ans[0].payload.name)

        print "%16s: %s" % (ip, name)

def resolve(ip):
    ptr = '.'.join(ip.split('.')[::-1]) + '.in-addr.arpa'
    return client.lookupPointer(ptr).\
            addCallback(lambda x: (ip, x)).\
            addErrback(lambda x: (ip, x))

l = [resolve(ip) for ip in IPS]
d = DeferredList( l, consumeErrors=True).\
        addCallback(display_results).\
        addCallback(lambda x: reactor.stop)

reactor.run()


From terry at jon.es  Fri Oct 21 21:50:56 2011
From: terry at jon.es (Terry Jones)
Date: Fri, 21 Oct 2011 21:50:56 -0400
Subject: [Twisted-Python] Passing extra arguments along callbacks
In-Reply-To: Your message at 10:32:10 on Saturday, 22 October 2011
References: <20111022013208.GA9360@localhost>
Message-ID: <20130.8576.218755.532918@jon.es>

Hi Jonathan

> def resolve(ip):
>     ptr = '.'.join(ip.split('.')[::-1]) + '.in-addr.arpa'
>     return client.lookupPointer(ptr).\
>             addCallback(lambda x: (ip, x)).\
>             addErrback(lambda x: (ip, x))

Your errback isn't raising and isn't returning a Failure, so the processing
switches back to the callback chain. If you add an errback that's a real
function and it raises something, things will work. E.g.

def err(fail, ip):
    raise Exception(fail, ip)

return client.lookupPointer(ptr).\
    addCallback(lambda x: (ip, x)).\
    addErrback(err, ip)


> l = [resolve(ip) for ip in IPS]
> d = DeferredList( l, consumeErrors=True).\
>         addCallback(display_results).\
>         addCallback(lambda x: reactor.stop)

Try reactor.stop()

Terry


From jon at multani.info  Fri Oct 21 22:08:36 2011
From: jon at multani.info (Jonathan Ballet)
Date: Sat, 22 Oct 2011 11:08:36 +0900
Subject: [Twisted-Python] Passing extra arguments along callbacks
In-Reply-To: <20130.8576.218755.532918@jon.es>
References: <20111022013208.GA9360@localhost> <20130.8576.218755.532918@jon.es>
Message-ID: <20111022020835.GB9360@localhost>

Hi Terry,

On Fri, Oct 21, 2011 at 09:50:56PM -0400, Terry Jones wrote:
> Hi Jonathan
> 
> > def resolve(ip):
> >     ptr = '.'.join(ip.split('.')[::-1]) + '.in-addr.arpa'
> >     return client.lookupPointer(ptr).\
> >             addCallback(lambda x: (ip, x)).\
> >             addErrback(lambda x: (ip, x))
> 
> Your errback isn't raising and isn't returning a Failure, so the processing
> switches back to the callback chain. If you add an errback that's a real
> function and it raises something, things will work. E.g.
> 
> def err(fail, ip):
>     raise Exception(fail, ip)
> 
> return client.lookupPointer(ptr).\
>     addCallback(lambda x: (ip, x)).\
>     addErrback(err, ip)

OK, it works better :)
I read about the behavior of the errback() "switching back" to the
normal flow if it wasn't raising an exception or returning the Failure,
but I wasn't sure how to wire things together. It was really simple
actually!

> > l = [resolve(ip) for ip in IPS]
> > d = DeferredList( l, consumeErrors=True).\
> >         addCallback(display_results).\
> >         addCallback(lambda x: reactor.stop)
> 
> Try reactor.stop()

*slap my head*

Sure...

Thanks for your quick answers!

 Jonathan


From exarkun at twistedmatrix.com  Sun Oct 23 00:05:31 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 23 Oct 2011 04:05:31 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1319342731.66.1845814842@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20111023/7596d7ea/attachment.htm 

From tenth at twistedmatrix.com  Tue Oct 25 10:59:23 2011
From: tenth at twistedmatrix.com (Tenth)
Date: Tue, 25 Oct 2011 10:59:23 -0400
Subject: [Twisted-Python]  Boston Twisted Sprint: November Edition
Message-ID: <CAKJpRM3+uXFd2a7SR-nDWv-STWU6aDPbuQ7LSaeacobORq9RKA@mail.gmail.com>

In an attempt to get back into the habit of holding Monthly sprints planned
somewhat more in advance, I'm pleased to announce that we'll be hosting
another Twisted Sprint at the Smarterer offices on Sunday, November 13th,
from about 1:00 to 9:00 PM.

If you'd like to attend but aren't on the contact list, let me know!  We
prefer that sprinters RSVP for food planning purposes (and to receive more
detailed instructions about getting into the building, which is locked down
on weekends).

Thanks,

- Dave
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20111025/af9fbeb5/attachment.htm 

From txtoth at gmail.com  Tue Oct 25 15:57:18 2011
From: txtoth at gmail.com (Ted Toth)
Date: Tue, 25 Oct 2011 14:57:18 -0500
Subject: [Twisted-Python] perspective broker remote call returning a
	dictionary
Message-ID: <CAFPpqQGGrvUhj+r3JmAOH_9YMX-1zhawFUGuG2nYpXF98ZDQ=w@mail.gmail.com>

I'm trying to return a dictionary with objects as values from a remote
call but it's not working. Can anyone tell me what I'm doing wrong or
point me at an example that works?

dserver.py
--------------------------------------------------------------------------------------------------------------------------------
from twisted.spread import pb

class Test():
    def __init__(self, data):
        self.data = data

class CopyTest(Test, pb.Copyable):
    def __init__(self, test):
        Test.__init__(self, test.data)

class CopyDict(dict, pb.Copyable):
    def __init__(self, d):
        dict.__init__(self)
        for key in d.keys():
            self[key] = CopyTest(d[key])
            print key, self[key].data
        print "Dict: ", pb.jelly(self)
        print self


class dTest(pb.Root):
    def __init__(self):
        self.d = {}
        self.d['A'] = Test("data for A")
        self.d['D'] = Test("data for D")
        self.d['C'] = Test("data for C")
        self.d['B'] = Test("data for B")

    def remote_getD(self):
        from dserver import CopyDict
        foo =  CopyDict(self.d)
        return foo

if __name__ == '__main__':
    from twisted.internet import reactor
    d = dTest()
    reactor.listenTCP(8789, pb.PBServerFactory(d))
    reactor.run()

---------------------------------------------------------------------------------------------------------------
dclient.py
---------------------------------------------------------------------------------------------------------------
from twisted.spread import pb
from twisted.internet import reactor
from dserver import Test, CopyTest, CopyDict
import sys

class ReceiverDict(dict, pb.RemoteCopy):
     def setCopyableState(self, state):
        print "ReceiverDict: ", state
        self.__dict__ = state
#    pass
pb.setUnjellyableForClass(CopyDict, ReceiverDict)

class ReceiverTest(pb.RemoteCopy, Test):
     def setCopyableState(self, state):
        print "ReceiverTest: ", state
        self.__dict__ = state
#   pass
pb.setUnjellyableForClass(CopyTest, ReceiverTest)

class Receiver(object):
    def __init__(self):
        self.domain = None

    def runTests(self):
        self.connect( ).addCallback(
            lambda _: self.getD( )).addCallback(
            self._catchFailure).addCallback(
            lambda _: reactor.stop( ))

    def connect(self):
        factory = pb.PBClientFactory( )
        reactor.connectTCP("localhost", 8789, factory)
        return factory.getRootObject( ).addCallback(self._connected)

    def _connected(self, rootObj):
        self.domain = rootObj

    def getD(self):
        print "Getting object..."
        return self.domain.callRemote(
            'getD').addCallback(
            self._gotD)

    def _gotD(self, d):
        print "Got :", d
        for key in d.keys():
            print "key: ",key
            print d[key]
        return d

    def _catchFailure(self, failure):
        print "Error:", failure #.getErrorMessage( )

t = Receiver()
t.runTests()
reactor.run()

-----------------------------------------------------------------------------------------------------------
Debug output:

[tedx at comms twisted]$ python dserver.py
A data for A
C data for C
B data for B
D data for D
Dict:  ['dserver.CopyDict', ['dictionary']]
{'A': <dserver.CopyTest instance at 0x1a0ccb0>, 'C': <dserver.CopyTest
instance at 0x1a0ccf8>, 'B': <dserver.CopyTest instance at 0x1a0cd40>,
'D': <dserver.CopyTest instance at 0x1a0cd88>}

[tedx at comms twisted]$ python dclient.py
Getting object...
ReceiverDict:  {}
Got : {}
Error: {}


From glyph at twistedmatrix.com  Wed Oct 26 07:09:07 2011
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 26 Oct 2011 07:09:07 -0400
Subject: [Twisted-Python] First pre-release of Twisted 11.1.0
In-Reply-To: <4EA18188.2040706@free.fr>
References: <4EA18188.2040706@free.fr>
Message-ID: <AC3E2D8E-3874-4810-9DAB-9C95841228D6@twistedmatrix.com>


On Oct 21, 2011, at 10:28 AM, Thomas Herv? wrote:

> * A special mention to the new abortConnection support on TCP and SSL
>   connections, heroically pushed by Itamar and Jean-Paul, and the
>   oldest ticket closed by this release.

After doing some testing of my own, I am discovering that there may be some issues with the prerelease in this area.  I'm getting this traceback when running Calendar Server under a load simulator:

Unhandled Error
Traceback (most recent call last):
  File ".../twisted/python/log.py", line 84, in callWithLogger
    return callWithContext({"system": lp}, func, *args, **kw)
  File ".../twisted/python/log.py", line 69, in callWithContext
    return context.call({ILogContext: newCtx}, func, *args, **kw)
  File ".../twisted/python/context.py", line 118, in callWithContext
    return self.currentContext().callWithContext(ctx, func, *args, **kw)
  File ".../twisted/python/context.py", line 81, in callWithContext
    return func(*args,**kw)
--- <exception caught here> ---
  File ".../twisted/internet/selectreactor.py", line 150, in _doReadOrWrite
    why = getattr(selectable, method)()
  File ".../twisted/internet/tcp.py", line 199, in doRead
    rval = self.protocol.dataReceived(data)
  File ".../twisted/protocols/tls.py", line 413, in dataReceived
    self._flushReceiveBIO()
  File ".../twisted/protocols/tls.py", line 360, in _flushReceiveBIO
    self._shutdownTLS()
  File ".../twisted/protocols/tls.py", line 427, in _shutdownTLS
    self.transport.loseConnection()
  File ".../twisted/internet/_newtls.py", line 71, in loseConnection
    return self._base.loseConnection(self._connection, reason)
  File ".../twisted/internet/abstract.py", line 360, in loseConnection
    self.connectionLost(_connDone)
  File ".../twisted/internet/tcp.py", line 272, in connectionLost
    self._closeSocket(not reason.check(error.ConnectionAborted))
exceptions.AttributeError: 'NoneType' object has no attribute 'check'

Note that none of my application code is showing up on the stack: just Twisted, which makes me think that this is a bug that _could_ be reproduced without a big application :).

Does anyone have an idea what this could be?  I will file a ticket soon but I'd love to have some reproduction instructions...

This definitely doesn't happen under 11.0, so it is a new problem in trunk/11.1.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20111026/af2c0527/attachment.htm 

From itamar at itamarst.org  Wed Oct 26 08:02:16 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 26 Oct 2011 08:02:16 -0400
Subject: [Twisted-Python] First pre-release of Twisted 11.1.0
In-Reply-To: <AC3E2D8E-3874-4810-9DAB-9C95841228D6@twistedmatrix.com>
References: <4EA18188.2040706@free.fr>
	<AC3E2D8E-3874-4810-9DAB-9C95841228D6@twistedmatrix.com>
Message-ID: <1319630536.2042.7.camel@blake>

On Wed, 2011-10-26 at 07:09 -0400, Glyph wrote:

> Does anyone have an idea what this could be?  I will file a ticket
> soon but I'd love to have some reproduction instructions...

It seems to be just a normal TLS shutdown, the second stage after a
TLS-level disconnect has been both sent and received... but then for
some reason the code thinks we did a TCP half-close too. Are you doing
loseWriteConnection in your code?

Changing _newtls._BypassTransport.loseConnection so it has
reason=ConnectionDone() as a default (or maybe a Failure wrapping
ConnectionDone) rather than None would fix the symptom, but possibly
that's the wrong thing to do.




From jrennie at gmail.com  Wed Oct 26 10:02:01 2011
From: jrennie at gmail.com (Jason Rennie)
Date: Wed, 26 Oct 2011 10:02:01 -0400
Subject: [Twisted-Python] running 1,000,000 tasks, 40 at-a-time
Message-ID: <CA+Pf4UDBoVWzFKcivN5_zGo+Cm+SzoJKJcp0YKhS5_dhtjnucQ@mail.gmail.com>

The background:

I've been using DeferredSemaphore and DeferredList to manage the running of
tasks with a resource constraint (only so many tasks can run at the same
time).  This worked great until I tried to use it to manage millions of
tasks.  Simply setting them up to run (DeferredSemaphore.run() calls) took
appx. 2 hours and used ~5 gigs of ram.  This was less efficient than I
expected.  Note that these numbers don't include time/memory for actually
running the tasks, only time/memory to set up the running of the tasks.
 I've since written a custom task runner that has uses comparatively little
setup time/memory by adding a "manager" callback to each task which starts
additional tasks as appropriate.

My questions:

   - Is the behavior I'm seeing expected?  i.e. are DS/DL only recommended
   for task management if the # of tasks not too large?  Is there a better way
   to use DS/DL that I might not be thinking of?
   - Is there a Twisted pattern for managing tasks efficiently that I might
   be missing?

Thanks,

Jason
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20111026/e662745a/attachment.htm 

From terry at jon.es  Wed Oct 26 10:22:32 2011
From: terry at jon.es (Terry Jones)
Date: Wed, 26 Oct 2011 10:22:32 -0400
Subject: [Twisted-Python] running 1,000,000 tasks, 40 at-a-time
In-Reply-To: Your message at 10:02:01 on Wednesday, 26 October 2011
References: <CA+Pf4UDBoVWzFKcivN5_zGo+Cm+SzoJKJcp0YKhS5_dhtjnucQ@mail.gmail.com>
Message-ID: <20136.6056.187937.971868@jon.es>

Hi Jason

>   - Is there a Twisted pattern for managing tasks efficiently that I be
>   - missing?

Sounds like you should be using a Python generator and that you're not.

First off, have you read http://jcalderone.livejournal.com/24285.html ?
If not, do.  Take note of the line

  work = (callable(elem, *args, **named) for elem in iterable)

work is a generator.  Make sure you understand every line of that code :-)

You might also find https://launchpad.net/txrdq of interest, though it's
probably overkill for what you're trying to do.

Terry


From exarkun at twistedmatrix.com  Wed Oct 26 10:24:12 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 26 Oct 2011 14:24:12 -0000
Subject: [Twisted-Python] running 1,000,000 tasks, 40 at-a-time
In-Reply-To: <CA+Pf4UDBoVWzFKcivN5_zGo+Cm+SzoJKJcp0YKhS5_dhtjnucQ@mail.gmail.com>
References: <CA+Pf4UDBoVWzFKcivN5_zGo+Cm+SzoJKJcp0YKhS5_dhtjnucQ@mail.gmail.com>
Message-ID: <20111026142412.23178.63976612.divmod.xquotient.710@localhost.localdomain>

On 02:02 pm, jrennie at gmail.com wrote:
>The background:
>
>I've been using DeferredSemaphore and DeferredList to manage the 
>running of
>tasks with a resource constraint (only so many tasks can run at the 
>same
>time).  This worked great until I tried to use it to manage millions of
>tasks.  Simply setting them up to run (DeferredSemaphore.run() calls) 
>took
>appx. 2 hours and used ~5 gigs of ram.  This was less efficient than I
>expected.  Note that these numbers don't include time/memory for 
>actually
>running the tasks, only time/memory to set up the running of the tasks.
>I've since written a custom task runner that has uses comparatively 
>little
>setup time/memory by adding a "manager" callback to each task which 
>starts
>additional tasks as appropriate.
>
>My questions:
>
>   - Is the behavior I'm seeing expected?  i.e. are DS/DL only 
>recommended
>   for task management if the # of tasks not too large?  Is there a 
>better way
>   to use DS/DL that I might not be thinking of?

Yes, it's expected.  Queueing up millions of tasks is a lot of work. 
Setting up millions more callbacks to learn about completion is a lot 
more work.  I would not recommend DeferredSemaphore for things beyond 
"user scale" - eg, things that correspond to a single user action, like 
clicking a button in a GUI.
>   - Is there a Twisted pattern for managing tasks efficiently that I 
>might
>   be missing?

I think the generator/cooperator approach works pretty well, and has 
constant (instead of linear) time completion notification and 
distributes setup costs across the lifetime of the queue, probably 
allowing for better resource utilization.

See http://as.ynchrono.us/2006/05/limiting-parallelism_22.html for a 
simple write-up.

Jean-Paul


From itamar at itamarst.org  Wed Oct 26 10:24:34 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 26 Oct 2011 10:24:34 -0400
Subject: [Twisted-Python] running 1,000,000 tasks, 40 at-a-time
In-Reply-To: <CA+Pf4UDBoVWzFKcivN5_zGo+Cm+SzoJKJcp0YKhS5_dhtjnucQ@mail.gmail.com>
References: <CA+Pf4UDBoVWzFKcivN5_zGo+Cm+SzoJKJcp0YKhS5_dhtjnucQ@mail.gmail.com>
Message-ID: <1319639074.2042.19.camel@blake>

On Wed, 2011-10-26 at 10:02 -0400, Jason Rennie wrote:
> The background:
> 
> 
> I've been using DeferredSemaphore and DeferredList to manage the
> running of tasks with a resource constraint (only so many tasks can
> run at the same time).  This worked great until I tried to use it to
> manage millions of tasks.  Simply setting them up to run
> (DeferredSemaphore.run() calls) took appx. 2 hours and used ~5 gigs of
> ram.  This was less efficient than I expected.  Note that these
> numbers don't include time/memory for actually running the tasks, only
> time/memory to set up the running of the tasks.  I've since written a
> custom task runner that has uses comparatively little setup
> time/memory by adding a "manager" callback to each task which starts
> additional tasks as appropriate. 
> 
> 
> My questions:
>       * Is the behavior I'm seeing expected?  i.e. are DS/DL only
>         recommended for task management if the # of tasks not too
>         large?  Is there a better way to use DS/DL that I might not be
>         thinking of?

DeferredList is intended for the case where you want to wait for all
results to have arrived. Given its API, you basically *have* to create
all the millions of input Deferreds first (although not the tasks
themselves, if you're clever). So this is going to be slow, and use a
lot of memory... although 5 gigs is rather surprising, unless each task
has a lot of state.

>       * Is there a Twisted pattern for managing tasks efficiently that
>         I might be missing?

It seems like you've figured it out, if you've written a custom task
runner. Probably Twisted should include some better abstraction for
doing this sort of thing, since it does come up regularly.





From jrennie at gmail.com  Wed Oct 26 11:08:33 2011
From: jrennie at gmail.com (Jason Rennie)
Date: Wed, 26 Oct 2011 11:08:33 -0400
Subject: [Twisted-Python] running 1,000,000 tasks, 40 at-a-time
In-Reply-To: <20136.6056.187937.971868@jon.es>
References: <CA+Pf4UDBoVWzFKcivN5_zGo+Cm+SzoJKJcp0YKhS5_dhtjnucQ@mail.gmail.com>
	<20136.6056.187937.971868@jon.es>
Message-ID: <CA+Pf4UD6HbmFCSH3U4eV0+bv1yx_8Vt=AAqDNPxcoCSxzLrKiw@mail.gmail.com>

On Wed, Oct 26, 2011 at 10:22 AM, Terry Jones <terry at jon.es> wrote:

> Sounds like you should be using a Python generator and that you're not.
>

The issue I'm seeing is that the ~million DeferredSemaphore.run() calls are
inefficient; it's independent of list/generator.

First off, have you read http://jcalderone.livejournal.com/24285.html ?
> If not, do.  Take note of the line
>
>  work = (callable(elem, *args, **named) for elem in iterable)
>
> work is a generator.  Make sure you understand every line of that code :-)
>

I don't see anything in task.Cooperator to limit the # of
simultaneously-running tasks.  Am I missing something?  I guess,
technically, could write my own scheduler that limits the # of
simultaneously-running tasks.  But, then task.Cooperator isn't really doing
anything useful for me.

You might also find https://launchpad.net/txrdq of interest, though it's
> probably overkill for what you're trying to do.
>

Yes, it is overkill.

Jason
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20111026/3d51a65f/attachment-0001.htm 

From exarkun at twistedmatrix.com  Wed Oct 26 11:09:54 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 26 Oct 2011 15:09:54 -0000
Subject: [Twisted-Python] perspective broker remote call returning
	a	dictionary
In-Reply-To: <CAFPpqQGGrvUhj+r3JmAOH_9YMX-1zhawFUGuG2nYpXF98ZDQ=w@mail.gmail.com>
References: <CAFPpqQGGrvUhj+r3JmAOH_9YMX-1zhawFUGuG2nYpXF98ZDQ=w@mail.gmail.com>
Message-ID: <20111026150954.23178.1631655259.divmod.xquotient.723@localhost.localdomain>

On 25 Oct, 07:57 pm, txtoth at gmail.com wrote:
>I'm trying to return a dictionary with objects as values from a remote
>call but it's not working. Can anyone tell me what I'm doing wrong or
>point me at an example that works?
>
>dserver.py
>--------------------------------------------------------------------------------------------------------------------------------
>from twisted.spread import pb
>
>class Test():
>    def __init__(self, data):
>        self.data = data
>
>class CopyTest(Test, pb.Copyable):
>    def __init__(self, test):
>        Test.__init__(self, test.data)
>
>class CopyDict(dict, pb.Copyable):

Subclassing both dict and Copyable is probably a major part of the 
problem.  There is one set of rules for serializing a dict and another 
incompatible set for serializing a Copyable.  It seems that in your 
case, the Copyable behavior seems to be in use, so all the dict contents 
are ignored.

Jean-Paul
>    def __init__(self, d):
>        dict.__init__(self)
>        for key in d.keys():
>            self[key] = CopyTest(d[key])
>            print key, self[key].data
>        print "Dict: ", pb.jelly(self)
>        print self
>
>
>class dTest(pb.Root):
>    def __init__(self):
>        self.d = {}
>        self.d['A'] = Test("data for A")
>        self.d['D'] = Test("data for D")
>        self.d['C'] = Test("data for C")
>        self.d['B'] = Test("data for B")
>
>    def remote_getD(self):
>        from dserver import CopyDict
>        foo =  CopyDict(self.d)
>        return foo
>
>if __name__ == '__main__':
>    from twisted.internet import reactor
>    d = dTest()
>    reactor.listenTCP(8789, pb.PBServerFactory(d))
>    reactor.run()
>
>---------------------------------------------------------------------------------------------------------------
>dclient.py
>---------------------------------------------------------------------------------------------------------------
>from twisted.spread import pb
>from twisted.internet import reactor
>from dserver import Test, CopyTest, CopyDict
>import sys
>
>class ReceiverDict(dict, pb.RemoteCopy):
>     def setCopyableState(self, state):
>        print "ReceiverDict: ", state
>        self.__dict__ = state
>#    pass
>pb.setUnjellyableForClass(CopyDict, ReceiverDict)
>
>class ReceiverTest(pb.RemoteCopy, Test):
>     def setCopyableState(self, state):
>        print "ReceiverTest: ", state
>        self.__dict__ = state
>#   pass
>pb.setUnjellyableForClass(CopyTest, ReceiverTest)
>
>class Receiver(object):
>    def __init__(self):
>        self.domain = None
>
>    def runTests(self):
>        self.connect( ).addCallback(
>            lambda _: self.getD( )).addCallback(
>            self._catchFailure).addCallback(
>            lambda _: reactor.stop( ))
>
>    def connect(self):
>        factory = pb.PBClientFactory( )
>        reactor.connectTCP("localhost", 8789, factory)
>        return factory.getRootObject( ).addCallback(self._connected)
>
>    def _connected(self, rootObj):
>        self.domain = rootObj
>
>    def getD(self):
>        print "Getting object..."
>        return self.domain.callRemote(
>            'getD').addCallback(
>            self._gotD)
>
>    def _gotD(self, d):
>        print "Got :", d
>        for key in d.keys():
>            print "key: ",key
>            print d[key]
>        return d
>
>    def _catchFailure(self, failure):
>        print "Error:", failure #.getErrorMessage( )
>
>t = Receiver()
>t.runTests()
>reactor.run()
>
>-----------------------------------------------------------------------------------------------------------
>Debug output:
>
>[tedx at comms twisted]$ python dserver.py
>A data for A
>C data for C
>B data for B
>D data for D
>Dict:  ['dserver.CopyDict', ['dictionary']]
>{'A': <dserver.CopyTest instance at 0x1a0ccb0>, 'C': <dserver.CopyTest
>instance at 0x1a0ccf8>, 'B': <dserver.CopyTest instance at 0x1a0cd40>,
>'D': <dserver.CopyTest instance at 0x1a0cd88>}
>
>[tedx at comms twisted]$ python dclient.py
>Getting object...
>ReceiverDict:  {}
>Got : {}
>Error: {}
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From p.mayers at imperial.ac.uk  Wed Oct 26 11:23:09 2011
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 26 Oct 2011 16:23:09 +0100
Subject: [Twisted-Python] running 1,000,000 tasks, 40 at-a-time
In-Reply-To: <CA+Pf4UD6HbmFCSH3U4eV0+bv1yx_8Vt=AAqDNPxcoCSxzLrKiw@mail.gmail.com>
References: <CA+Pf4UDBoVWzFKcivN5_zGo+Cm+SzoJKJcp0YKhS5_dhtjnucQ@mail.gmail.com>	<20136.6056.187937.971868@jon.es>
	<CA+Pf4UD6HbmFCSH3U4eV0+bv1yx_8Vt=AAqDNPxcoCSxzLrKiw@mail.gmail.com>
Message-ID: <4EA825DD.7080600@imperial.ac.uk>

On 26/10/11 16:08, Jason Rennie wrote:
> On Wed, Oct 26, 2011 at 10:22 AM, Terry Jones <terry at jon.es
> <mailto:terry at jon.es>> wrote:
>
>     Sounds like you should be using a Python generator and that you're not.
>
>
> The issue I'm seeing is that the ~million DeferredSemaphore.run() calls
> are inefficient; it's independent of list/generator.
>
>     First off, have you read http://jcalderone.livejournal.com/24285.html ?
>     If not, do. Take note of the line
>
>     work = (callable(elem, *args, **named) for elem in iterable)
>
>     work is a generator. Make sure you understand every line of that
>     code :-)
>
>
> I don't see anything in task.Cooperator to limit the # of
> simultaneously-running tasks. Am I missing something? I guess,

Yes, you're missing something AIUI.

In JPs example at the given URL, he basically does two things:

  1. Creates a *single* generator (using a generator comprehension, but 
a function def would work just as well) that yields each task deferred 
in turn (not all at once).

  2. Passes the generator to a task.Cooperator "coiterate" method, N 
times. Each call to "coiterate" will setup a sequence of events that 
calls .next() on the generator, and repeats when the deferred 
callback/errbacks.

So, N is the concurrency

> technically, could write my own scheduler that limits the # of
> simultaneously-running tasks. But, then task.Cooperator isn't really
> doing anything useful for me.

See above.


From p.mayers at imperial.ac.uk  Wed Oct 26 11:29:18 2011
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 26 Oct 2011 16:29:18 +0100
Subject: [Twisted-Python] Docs HTML suggestion/request for moving between
	versions.
Message-ID: <4EA8274E.9070704@imperial.ac.uk>

Lately, I've taken to finding Twisted docs by writing:

twisted.internet.task.Cooperator

...into the Chrome bar'o'magic and hitting return to get the Google hit. 
This is great, except that the resultant Google hits almost always point 
me to the 8.2.0 HTML docs. 2nd hit is (currently) 11.0 docs.

Obviously it's tricky to force Google to put "current" at the top! But 
could we maybe have a little <select> dropdown in the top-right that 
shows the version, and lets you pick a new one and have the page reload?

It strikes me that this would be useful in general, for flicking back 
and forward between two versions of the docs page for a given method/API.


From jrennie at gmail.com  Wed Oct 26 11:29:13 2011
From: jrennie at gmail.com (Jason Rennie)
Date: Wed, 26 Oct 2011 11:29:13 -0400
Subject: [Twisted-Python] running 1,000,000 tasks, 40 at-a-time
In-Reply-To: <CA+Pf4UD6HbmFCSH3U4eV0+bv1yx_8Vt=AAqDNPxcoCSxzLrKiw@mail.gmail.com>
References: <CA+Pf4UDBoVWzFKcivN5_zGo+Cm+SzoJKJcp0YKhS5_dhtjnucQ@mail.gmail.com>
	<20136.6056.187937.971868@jon.es>
	<CA+Pf4UD6HbmFCSH3U4eV0+bv1yx_8Vt=AAqDNPxcoCSxzLrKiw@mail.gmail.com>
Message-ID: <CA+Pf4UDMAYd0Add-GUBSeGgsqDZj=06NzgStjck-Zp2a83BhVg@mail.gmail.com>

On Wed, Oct 26, 2011 at 11:08 AM, Jason Rennie <jrennie at gmail.com> wrote:

> First off, have you read http://jcalderone.livejournal.com/24285.html ?
>> If not, do.  Take note of the line
>>
>>  work = (callable(elem, *args, **named) for elem in iterable)
>>
>> work is a generator.  Make sure you understand every line of that code :-)
>>
>
> I don't see anything in task.Cooperator to limit the # of
> simultaneously-running tasks.  Am I missing something?  I guess,
> technically, could write my own scheduler that limits the # of
> simultaneously-running tasks.  But, then task.Cooperator isn't really doing
> anything useful for me.
>

Sorry, I didn't realize that the Cooperators were all being given a
reference to the same generator.  That's a useful pattern.

Jason
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20111026/4efb31c4/attachment.htm 

From terry at jon.es  Wed Oct 26 11:31:40 2011
From: terry at jon.es (Terry Jones)
Date: Wed, 26 Oct 2011 11:31:40 -0400
Subject: [Twisted-Python] running 1,000,000 tasks, 40 at-a-time
In-Reply-To: Your message at 11:08:33 on Wednesday, 26 October 2011
References: <CA+Pf4UDBoVWzFKcivN5_zGo+Cm+SzoJKJcp0YKhS5_dhtjnucQ@mail.gmail.com>
	<20136.6056.187937.971868@jon.es>
	<CA+Pf4UD6HbmFCSH3U4eV0+bv1yx_8Vt=AAqDNPxcoCSxzLrKiw@mail.gmail.com>
Message-ID: <20136.10204.489371.262209@jon.es>

Hi Jason

> I don't see anything in task.Cooperator to limit the # of
> simultaneously-running tasks.  Am I missing something?

I'm not sure, but I think so.

It does limit the number of simultaneously-running tasks.

> I guess, technically, could write my own scheduler that limits the # of
> simultaneously-running tasks.  But, then task.Cooperator isn't really
> doing anything useful for me.

I think you need to look at the code more closely (and try using it). The
fact that there's a generator that is yielding deferreds one by one and
that you pass that generator to coop.coiterate the # of simultaneous tasks
that you want has the effect of only launching that many tasks at once and
the cooperator just pulls a new one from the iterator/generator when one of
the previous jobs finishes. It's a bit subtle, but I think it's what you
want. Give the code a try & see :-)

T


From gxti at partiallystapled.com  Wed Oct 26 11:58:05 2011
From: gxti at partiallystapled.com (Michael Tharp)
Date: Wed, 26 Oct 2011 11:58:05 -0400
Subject: [Twisted-Python] Docs HTML suggestion/request for moving
 between versions.
In-Reply-To: <4EA8274E.9070704@imperial.ac.uk>
References: <4EA8274E.9070704@imperial.ac.uk>
Message-ID: <4EA82E0D.6080805@partiallystapled.com>

On 10/26/2011 11:29 AM, Phil Mayers wrote:
> Obviously it's tricky to force Google to put "current" at the top! But
> could we maybe have a little<select>  dropdown in the top-right that
> shows the version, and lets you pick a new one and have the page reload?

Other possibilities:

- Add a big yellow "this is for a prior version, click here to see the 
latest version of this page" with a direct link to the same page in the 
current documentation set.

- Make a symlink called "current" or "latest" that points the latest 
release and use robots.txt to prohibit search engines from indexing the 
version-specific doc sets. Google's "sitemap" feature might be useful 
here, I've never used it and I don't know if it actually changes search 
  result priorities.

Both of these are of course compatible with your original suggestion, so 
implementing all three would be possible and useful. Studying other 
projects to see how they deal with this could be insightful, but for 
example PostgreSQL has the same problem -- even though they have a 
'current' symlink, the top result for 'postgresql truncate command' is 
from 8.3 which is three releases out of date.


From itamar at itamarst.org  Wed Oct 26 21:29:51 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 26 Oct 2011 21:29:51 -0400
Subject: [Twisted-Python] First pre-release of Twisted 11.1.0
In-Reply-To: <AC3E2D8E-3874-4810-9DAB-9C95841228D6@twistedmatrix.com>
References: <4EA18188.2040706@free.fr>
	<AC3E2D8E-3874-4810-9DAB-9C95841228D6@twistedmatrix.com>
Message-ID: <1319678991.2042.20.camel@blake>

On Wed, 2011-10-26 at 07:09 -0400, Glyph wrote:
> 
> On Oct 21, 2011, at 10:28 AM, Thomas Herv? wrote:
> 
> > * A special mention to the new abortConnection support on TCP and
> > SSL
> >   connections, heroically pushed by Itamar and Jean-Paul, and the
> >   oldest ticket closed by this release.
> 
> After doing some testing of my own, I am discovering that there may be
> some issues with the prerelease in this area.  I'm getting this
> traceback when running Calendar Server under a load simulator:

I opened a ticket:
http://twistedmatrix.com/trac/ticket/5341

I've proven to myself that half-close is broken, but I still haven't
managed to actually reproduce this problem. Reading the code it is clear
it can only happen in half-close code paths, though.




From exarkun at twistedmatrix.com  Thu Oct 27 15:41:39 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 27 Oct 2011 19:41:39 -0000
Subject: [Twisted-Python] Status of the Bazaar mirror
Message-ID: <20111027194139.23178.1229881830.divmod.xquotient.741@localhost.localdomain>

Hello committers,

There's a new svn post-commit hook that should keep the bzr mirror up to 
date.  It might slow down commits a little bit, maybe by 10 seconds or 
so.  You can find the bzr mirror at 
<http://svn.twistedmatrix.com/svn/Twisted> (/trunk, /branches/halfclose- 
tls-5341, etc).  Let me know if you notice any problems with it.

Thanks to Adi Roiban for writing the scripts to keep the mirror up to 
date and to James Knight for pointing out flock(1) as a way to avoid 
problems with concurrency.

Jean-Paul


From exarkun at twistedmatrix.com  Thu Oct 27 16:44:27 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 27 Oct 2011 20:44:27 -0000
Subject: [Twisted-Python] Status of the Bazaar mirror
In-Reply-To: <20111027194139.23178.1229881830.divmod.xquotient.741@localhost.localdomain>
References: <20111027194139.23178.1229881830.divmod.xquotient.741@localhost.localdomain>
Message-ID: <20111027204427.23178.452014299.divmod.xquotient.742@localhost.localdomain>

On 07:41 pm, exarkun at twistedmatrix.com wrote:
>Hello committers,
>
>There's a new svn post-commit hook that should keep the bzr mirror up 
>to
>date.  It might slow down commits a little bit, maybe by 10 seconds or
>so.  You can find the bzr mirror at
><http://svn.twistedmatrix.com/svn/Twisted> (/trunk, 
>/branches/halfclose-

Oops.  The actual URL is:

    http://svn.twistedmatrix.com/bzr/Twisted>
>tls-5341, etc).  Let me know if you notice any problems with it.
>
>Thanks to Adi Roiban for writing the scripts to keep the mirror up to
>date and to James Knight for pointing out flock(1) as a way to avoid
>problems with concurrency.
>
>Jean-Paul
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From akrherz at gmail.com  Fri Oct 28 18:21:41 2011
From: akrherz at gmail.com (Daryl Herzmann)
Date: Fri, 28 Oct 2011 17:21:41 -0500
Subject: [Twisted-Python] Ideas on limiting/throttling spawnProcess
Message-ID: <CALOVXPdC2RTD=5EtneE-yNou-a=4d3MkHAGDDT2RqsJd_xMKGg@mail.gmail.com>

Hi,

I have an application that ingests data and does a reactor.spawnProcess()
for each chunk of data (a product) to pass it as STDIN to a compiled binary
and then I harvest the STDOUT. It has been working well, but I have an issue
when my data rates get too high and the machine gets overloaded with spawned
processes (I think) and starts running out of file descriptors (yes I can
raise it :) causing all sorts of pain.  I'm wondering about a mechanism to
throttle the number of spawned processes going at one time?  It'd be nice to
only have 10 of these spawned processes going at any one time.  Thanks for
your ideas :)

daryl

code snipet:

class SHEFIT(protocol.ProcessProtocol):
    def __init__(self, tp):
        self.tp = tp
        self.data = ""

    def connectionMade(self):
        self.transport.write( self.tp.raw )
        self.transport.closeStdin()

    def outReceived(self, data):
        self.data = self.data + data

    def errReceived(self, data):
        print "errReceived! with %d bytes!" % len(data)
        print data

    def outConnectionLost(self):
        really_process(self.tp, self.data)

def got_product():
    shef = SHEFIT( tp )
    reactor.spawnProcess(shef, "shefit", ["shefit"], {})

def really_process(tp,data):
    print 'Do some work'


From donal.mcmullan at gmail.com  Fri Oct 28 18:39:49 2011
From: donal.mcmullan at gmail.com (Donal McMullan)
Date: Sat, 29 Oct 2011 11:39:49 +1300
Subject: [Twisted-Python] Ideas on limiting/throttling spawnProcess
In-Reply-To: <CALOVXPdC2RTD=5EtneE-yNou-a=4d3MkHAGDDT2RqsJd_xMKGg@mail.gmail.com>
References: <CALOVXPdC2RTD=5EtneE-yNou-a=4d3MkHAGDDT2RqsJd_xMKGg@mail.gmail.com>
Message-ID: <DB7A4B91-39EB-4D1C-A4D5-741F52430BC9@gmail.com>

I think twisted.internet.defer.DeferredSemaphore is designed for this. John Paul Calderone answers a similar question in detail:
http://stackoverflow.com/questions/2861858/queue-remote-calls-to-a-python-twisted-perspective-broker

Donal McMullan


On 29/10/2011, at 11:21 AM, Daryl Herzmann wrote:

> Hi,
> 
> I have an application that ingests data and does a reactor.spawnProcess()
> for each chunk of data (a product) to pass it as STDIN to a compiled binary
> and then I harvest the STDOUT. It has been working well, but I have an issue
> when my data rates get too high and the machine gets overloaded with spawned
> processes (I think) and starts running out of file descriptors (yes I can
> raise it :) causing all sorts of pain.  I'm wondering about a mechanism to
> throttle the number of spawned processes going at one time?  It'd be nice to
> only have 10 of these spawned processes going at any one time.  Thanks for
> your ideas :)
> 
> daryl
> 
> code snipet:
> 
> class SHEFIT(protocol.ProcessProtocol):
>    def __init__(self, tp):
>        self.tp = tp
>        self.data = ""
> 
>    def connectionMade(self):
>        self.transport.write( self.tp.raw )
>        self.transport.closeStdin()
> 
>    def outReceived(self, data):
>        self.data = self.data + data
> 
>    def errReceived(self, data):
>        print "errReceived! with %d bytes!" % len(data)
>        print data
> 
>    def outConnectionLost(self):
>        really_process(self.tp, self.data)
> 
> def got_product():
>    shef = SHEFIT( tp )
>    reactor.spawnProcess(shef, "shefit", ["shefit"], {})
> 
> def really_process(tp,data):
>    print 'Do some work'
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From ntoper at gmail.com  Sat Oct 29 03:10:00 2011
From: ntoper at gmail.com (Nicolas Toper)
Date: Sat, 29 Oct 2011 09:10:00 +0200
Subject: [Twisted-Python] Ideas on limiting/throttling spawnProcess
In-Reply-To: <DB7A4B91-39EB-4D1C-A4D5-741F52430BC9@gmail.com>
References: <CALOVXPdC2RTD=5EtneE-yNou-a=4d3MkHAGDDT2RqsJd_xMKGg@mail.gmail.com>
	<DB7A4B91-39EB-4D1C-A4D5-741F52430BC9@gmail.com>
Message-ID: <CAJZoT5BirnFrca71jbnSa7FwysRk06cSUNKrh8EP28SWAerggA@mail.gmail.com>

For a similar use case, we're using a combination of cooperator with
defertoprocess.

I can explain more if anyone's interested.
Le 29 oct. 2011 00:41, "Donal McMullan" <donal.mcmullan at gmail.com> a ?crit :

> I think twisted.internet.defer.DeferredSemaphore is designed for this. John
> Paul Calderone answers a similar question in detail:
>
> http://stackoverflow.com/questions/2861858/queue-remote-calls-to-a-python-twisted-perspective-broker
>
> Donal McMullan
>
>
> On 29/10/2011, at 11:21 AM, Daryl Herzmann wrote:
>
> > Hi,
> >
> > I have an application that ingests data and does a reactor.spawnProcess()
> > for each chunk of data (a product) to pass it as STDIN to a compiled
> binary
> > and then I harvest the STDOUT. It has been working well, but I have an
> issue
> > when my data rates get too high and the machine gets overloaded with
> spawned
> > processes (I think) and starts running out of file descriptors (yes I can
> > raise it :) causing all sorts of pain.  I'm wondering about a mechanism
> to
> > throttle the number of spawned processes going at one time?  It'd be nice
> to
> > only have 10 of these spawned processes going at any one time.  Thanks
> for
> > your ideas :)
> >
> > daryl
> >
> > code snipet:
> >
> > class SHEFIT(protocol.ProcessProtocol):
> >    def __init__(self, tp):
> >        self.tp = tp
> >        self.data = ""
> >
> >    def connectionMade(self):
> >        self.transport.write( self.tp.raw )
> >        self.transport.closeStdin()
> >
> >    def outReceived(self, data):
> >        self.data = self.data + data
> >
> >    def errReceived(self, data):
> >        print "errReceived! with %d bytes!" % len(data)
> >        print data
> >
> >    def outConnectionLost(self):
> >        really_process(self.tp, self.data)
> >
> > def got_product():
> >    shef = SHEFIT( tp )
> >    reactor.spawnProcess(shef, "shefit", ["shefit"], {})
> >
> > def really_process(tp,data):
> >    print 'Do some work'
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20111029/930c1428/attachment.html 

From itamar at itamarst.org  Sat Oct 29 15:18:22 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Sat, 29 Oct 2011 15:18:22 -0400
Subject: [Twisted-Python] Moving tickets forward
Message-ID: <1319915902.2042.51.camel@blake>

Ticket #3690 was filed as "serial ports do not call connectionLost on
their protocol", but along the way became a ticket for testing *all* of
the serial port code. Since the latter is much harder, it got stuck in
addressing review comments, and the simpler original problem was not
fixed. In this case, the perfect was the enemy of the good.

To prevent this sort of thing, if you end up enlarging the scope of a
ticket dramatically, please open a new ticket and divide the work up.
Splitting up large amounts of work into smaller units is good even if
the scope of the ticket hasn't changed. 

Smaller units of work are easier on everyone, developers and reviewers;
please look for opportunities to break up tickets into multiple smaller
tickets if that will help get code merged.



From exarkun at twistedmatrix.com  Sat Oct 29 16:23:27 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 29 Oct 2011 20:23:27 -0000
Subject: [Twisted-Python] Moving tickets forward
In-Reply-To: <1319915902.2042.51.camel@blake>
References: <1319915902.2042.51.camel@blake>
Message-ID: <20111029202327.23178.588469303.divmod.xquotient.798@localhost.localdomain>

On 07:18 pm, itamar at itamarst.org wrote:
>Ticket #3690 was filed as "serial ports do not call connectionLost on
>their protocol", but along the way became a ticket for testing *all* of

I don't think this is quite right.  The blocker was having *any* tests.
>the serial port code. Since the latter is much harder, it got stuck in
>addressing review comments, and the simpler original problem was not
>fixed. In this case, the perfect was the enemy of the good.
>
>To prevent this sort of thing, if you end up enlarging the scope of a
>ticket dramatically, please open a new ticket and divide the work up.
>Splitting up large amounts of work into smaller units is good even if
>the scope of the ticket hasn't changed.
>
>Smaller units of work are easier on everyone, developers and reviewers;
>please look for opportunities to break up tickets into multiple smaller
>tickets if that will help get code merged.

I agree with this.  However, this doesn't mean that untested changes can 
go in (not that I think you're suggesting otherwise).
The serial port case was (and is) challenging because the code had no 
test coverage at all (#3690 adds a small bit of coverage), so no change 
was possible without figuring out a testing strategy.  Even *manual* 
testing is challenging - I had a serial device at one port but I can't 
find the cable anymore.  It would have been nice if someone had thought 
to use the more focused testing approach (that #3690 ended up taking) 
earlier on in the ticket's life.

Jean-Paul


From exarkun at twistedmatrix.com  Sun Oct 30 00:05:24 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 30 Oct 2011 04:05:24 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1319947524.79.736438069@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20111030/cce01b3c/attachment.htm 

From akrherz at iastate.edu  Mon Oct 31 09:22:30 2011
From: akrherz at iastate.edu (Daryl Herzmann)
Date: Mon, 31 Oct 2011 08:22:30 -0500
Subject: [Twisted-Python] Ideas on limiting/throttling spawnProcess
In-Reply-To: <CAJZoT5BirnFrca71jbnSa7FwysRk06cSUNKrh8EP28SWAerggA@mail.gmail.com>
References: <CALOVXPdC2RTD=5EtneE-yNou-a=4d3MkHAGDDT2RqsJd_xMKGg@mail.gmail.com>
	<DB7A4B91-39EB-4D1C-A4D5-741F52430BC9@gmail.com>
	<CAJZoT5BirnFrca71jbnSa7FwysRk06cSUNKrh8EP28SWAerggA@mail.gmail.com>
Message-ID: <CALOVXPejfK0MffbgkGy6XgXcU1ejx0Ttq495J+m6bZxqPC=16w@mail.gmail.com>

On Sat, Oct 29, 2011 at 2:10 AM, Nicolas Toper <ntoper at gmail.com> wrote:
> For a similar use case, we're using a combination of cooperator with
> defertoprocess.
>
> I can explain more if anyone's interested.

I would certainly be interested :)  I'm having a difficult time
understanding how the pieces fit together.  Thank you!

daryl


From tobias.oberstein at tavendo.de  Mon Oct 31 11:21:42 2011
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Mon, 31 Oct 2011 08:21:42 -0700
Subject: [Twisted-Python] Autobahn WebSockets 0.4.3
Message-ID: <634914A010D0B943A035D226786325D42D0B0D8512@EXVMBX020-12.exch020.serverdata.net>

New release 0.4.3 of Autobahn WebSockets including:

+ Hybi-17 support
+ TLS (secure WebSocket)
+ lots of new options
+ improved docs and tutorials
+ close behavior coverage for testsuite
+ many small things I forgot

Special thanks to Peter Thorson for significant code contributions and
fruitful discussions!
Peter works on a  C++/ASIO-based WebSocket client/server framework you
may checkout here https://github.com/zaphoyd/websocketpp

Updated Python package is here:

http://pypi.python.org/pypi/autobahn

Updated test suite reports are available under

http://www.tavendo.de/autobahn/testsuite.html

including mobile clients and servers.

Cheers,
Tobias


From jml at mumak.net  Mon Oct 31 11:22:44 2011
From: jml at mumak.net (Jonathan Lange)
Date: Mon, 31 Oct 2011 11:22:44 -0400
Subject: [Twisted-Python] [Divmod-users] [ANN] Pyflakes 0.5.0
In-Reply-To: <CAHZ8tnZQCb3NSivPQ886TXjRuvySX_hMNzvXi2Cw82xoq3G_1A@mail.gmail.com>
References: <CAMcKhMQy_fnb13Co0s6y+LKgsizeMJTUFqGaPQocaUT0N=VgGQ@mail.gmail.com>
	<CAHZ8tnYW91swPPxOhfEDwm9eykYPceZB-CrMaPHD+TmkD0gcSg@mail.gmail.com>
	<CAMcKhMQLV_U2Z6ddFRS2-izD7iODVORo94ac68sAS2HtE8EBGA@mail.gmail.com>
	<CAHZ8tna9ob7bQm-qFXPqXwZVPb5M01apwhNVUPcG39esmkPGvw@mail.gmail.com>
	<CAMcKhMRE=7+ASO3mfTTLyQAqdSHArUKPXYp4MRb6qE2rxo-J8A@mail.gmail.com>
	<CAHZ8tnZQCb3NSivPQ886TXjRuvySX_hMNzvXi2Cw82xoq3G_1A@mail.gmail.com>
Message-ID: <CAHZ8tnbGMBi6yXxAmpkmSiZM2V8OCGRDB1D6TR4sDq=D94YbrA@mail.gmail.com>

On Mon, Sep 5, 2011 at 8:56 AM, Jonathan Lange <jml at mumak.net> wrote:
> On Mon, Sep 5, 2011 at 1:38 PM, Tristan Seligmann
> <mithrandi at mithrandi.net> wrote:
> ...
>> The branch is constructed in a way that (I believe) can't be merged
>> into the "combined" trunk, so I guess the first step is to rebuild it
>> on top of the divmod.org repo, and then put it up for merge on
>> Launchpad. I'll see what I can do about that, even if I can't promise
>> you a review.
>
> I can take care of the "rebuilding" part.
>

Done. Finally. https://code.launchpad.net/~jml/divmod.org/duplicate-class-defs/+merge/80813

Sorry for the delay.

jml


From ntoper at gmail.com  Mon Oct 31 16:43:49 2011
From: ntoper at gmail.com (Nicolas Toper)
Date: Mon, 31 Oct 2011 21:43:49 +0100
Subject: [Twisted-Python] Ideas on limiting/throttling spawnProcess
In-Reply-To: <CALOVXPejfK0MffbgkGy6XgXcU1ejx0Ttq495J+m6bZxqPC=16w@mail.gmail.com>
References: <CALOVXPdC2RTD=5EtneE-yNou-a=4d3MkHAGDDT2RqsJd_xMKGg@mail.gmail.com>
	<DB7A4B91-39EB-4D1C-A4D5-741F52430BC9@gmail.com>
	<CAJZoT5BirnFrca71jbnSa7FwysRk06cSUNKrh8EP28SWAerggA@mail.gmail.com>
	<CALOVXPejfK0MffbgkGy6XgXcU1ejx0Ttq495J+m6bZxqPC=16w@mail.gmail.com>
Message-ID: <CAJZoT5A_PqKU_xcapXHwzi9x5AMG3fuo9BkDw8Tn_5geGFzqAw@mail.gmail.com>

def parallel(iterable, count, callable, *args, **named):
    #Copy/paste from http://jcalderone.livejournal.com/24285.html
    #
http://oubiwann.blogspot.com/2008/06/async-batching-with-twisted-walkthrough.html
    coop = task.Cooperator()
    work = (callable(elem, *args, **named) for elem in iterable)
    return defer.DeferredList([coop.coiterate(work) for i in xrange(count)])


def _localSend(messages):
    return deferToProcessPool(reactor, _p, makeEmails, messages, logger)

_p = Pool(5)

def _localDeliver(messages):
   #... Some part left out
    d = parallel(messages,2, _localSend)
    d.addErrback(_log_error)
    return d

_localDeliver call parallel: it will launch at most 2 deferred executing
localSend(messages). These are actually deferToProcess

This is a very very powerful compbination and exarkun really nailed it in
his blog :)


On Mon, Oct 31, 2011 at 2:22 PM, Daryl Herzmann <akrherz at iastate.edu> wrote:

> On Sat, Oct 29, 2011 at 2:10 AM, Nicolas Toper <ntoper at gmail.com> wrote:
> > For a similar use case, we're using a combination of cooperator with
> > defertoprocess.
> >
> > I can explain more if anyone's interested.
>
> I would certainly be interested :)  I'm having a difficult time
> understanding how the pieces fit together.  Thank you!
>
> daryl
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20111031/0450503f/attachment.htm 

From mostawesomedude at gmail.com  Mon Oct 31 17:00:17 2011
From: mostawesomedude at gmail.com (Corbin Simpson)
Date: Mon, 31 Oct 2011 14:00:17 -0700
Subject: [Twisted-Python] Autobahn WebSockets 0.4.3
In-Reply-To: <634914A010D0B943A035D226786325D42D0B0D8512@EXVMBX020-12.exch020.serverdata.net>
References: <634914A010D0B943A035D226786325D42D0B0D8512@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <CALiqSLeEh_k7AfXCnKaf_ChwC-Z=nbU7-f0QeX-ZO0+qxGn9yA@mail.gmail.com>

On Mon, Oct 31, 2011 at 8:21 AM, Tobias Oberstein
<tobias.oberstein at tavendo.de> wrote:
> New release 0.4.3 of Autobahn WebSockets including:
>
> + Hybi-17 support
> + TLS (secure WebSocket)
> + lots of new options
> + improved docs and tutorials
> + close behavior coverage for testsuite
> + many small things I forgot
>
> Special thanks to Peter Thorson for significant code contributions and
> fruitful discussions!
> Peter works on a ?C++/ASIO-based WebSocket client/server framework you
> may checkout here https://github.com/zaphoyd/websocketpp
>
> Updated Python package is here:
>
> http://pypi.python.org/pypi/autobahn
>
> Updated test suite reports are available under
>
> http://www.tavendo.de/autobahn/testsuite.html
>
> including mobile clients and servers.

Hi, how do I run the unit tests for Autobahn? Trial doesn't work, and
there don't appear to be any instances of unittest's classes in the
tree.

Also, is it possible to run the Autobahn pub-sub and RPC stuff over a
different transport than WebSockets, like plain TCP?

~ C.

-- 
When the facts change, I change my mind. What do you do, sir? ~ Keynes

Corbin Simpson
<MostAwesomeDude at gmail.com>


From tobias.oberstein at tavendo.de  Mon Oct 31 17:27:52 2011
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Mon, 31 Oct 2011 14:27:52 -0700
Subject: [Twisted-Python] Autobahn WebSockets 0.4.3
In-Reply-To: <CALiqSLeEh_k7AfXCnKaf_ChwC-Z=nbU7-f0QeX-ZO0+qxGn9yA@mail.gmail.com>
References: <634914A010D0B943A035D226786325D42D0B0D8512@EXVMBX020-12.exch020.serverdata.net>
	<CALiqSLeEh_k7AfXCnKaf_ChwC-Z=nbU7-f0QeX-ZO0+qxGn9yA@mail.gmail.com>
Message-ID: <634914A010D0B943A035D226786325D42D0B0D874E@EXVMBX020-12.exch020.serverdata.net>

> Hi, how do I run the unit tests for Autobahn? Trial doesn't work, and there
> don't appear to be any instances of unittest's classes in the tree.

Please see here

http://www.tavendo.de/autobahn/testsuite.html#test_browsers

to get started.

What do you want to test? Own client, own server?

> 
> Also, is it possible to run the Autobahn pub-sub and RPC stuff over a
> different transport than WebSockets, like plain TCP?

In principle, the RPC and PubSub protocol is designed to work
over

* reliable, ordered, full-duplex message channel
* any serialization format that supports lists and primitive types

Currently, the only binding is WebSocket/JSON.

Raw TCP as a transport .. well, you need some message framing
anyway. WebSocket is already quite bare metal. 

What are you thinking of? Whats your use case?

> 
> ~ C.
> 
> --
> When the facts change, I change my mind. What do you do, sir? ~ Keynes
> 
> Corbin Simpson
> <MostAwesomeDude at gmail.com>
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From dialtone at gmail.com  Mon Oct 31 17:49:38 2011
From: dialtone at gmail.com (Valentino Volonghi)
Date: Mon, 31 Oct 2011 14:49:38 -0700
Subject: [Twisted-Python] Ideas on limiting/throttling spawnProcess
In-Reply-To: <CALOVXPdC2RTD=5EtneE-yNou-a=4d3MkHAGDDT2RqsJd_xMKGg@mail.gmail.com>
References: <CALOVXPdC2RTD=5EtneE-yNou-a=4d3MkHAGDDT2RqsJd_xMKGg@mail.gmail.com>
Message-ID: <2D30E706-2FDE-498D-82CB-0F71C5F7E3BA@gmail.com>


On 28 Oct 2011, at 15:21, Daryl Herzmann wrote:

> Hi,
> 
> I have an application that ingests data and does a reactor.spawnProcess()
> for each chunk of data (a product) to pass it as STDIN to a compiled binary
> and then I harvest the STDOUT. It has been working well, but I have an issue
> when my data rates get too high and the machine gets overloaded with spawned
> processes (I think) and starts running out of file descriptors (yes I can
> raise it :) causing all sorts of pain.  I'm wondering about a mechanism to
> throttle the number of spawned processes going at one time?  It'd be nice to
> only have 10 of these spawned processes going at any one time.  Thanks for
> your ideas :)


Another alternative is to use turtl which was written for a similar purpose.

http://pypi.python.org/pypi/turtl
https://bitbucket.org/adroll/turtl/
https://launchpad.net/turtl
http://twistedmatrix.com/pipermail/twisted-python/2011-August/024415.html

-- 
Valentino Volonghi
http://www.adroll.com



From mostawesomedude at gmail.com  Mon Oct 31 17:53:05 2011
From: mostawesomedude at gmail.com (Corbin Simpson)
Date: Mon, 31 Oct 2011 14:53:05 -0700
Subject: [Twisted-Python] Autobahn WebSockets 0.4.3
In-Reply-To: <634914A010D0B943A035D226786325D42D0B0D874E@EXVMBX020-12.exch020.serverdata.net>
References: <634914A010D0B943A035D226786325D42D0B0D8512@EXVMBX020-12.exch020.serverdata.net>
	<CALiqSLeEh_k7AfXCnKaf_ChwC-Z=nbU7-f0QeX-ZO0+qxGn9yA@mail.gmail.com>
	<634914A010D0B943A035D226786325D42D0B0D874E@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <CALiqSLeh_3UQ49kzT-zt3=QBy2Vv3rGFx_RD-iwWwjEiKX21MQ@mail.gmail.com>

On Mon, Oct 31, 2011 at 2:27 PM, Tobias Oberstein
<tobias.oberstein at tavendo.de> wrote:
>> Hi, how do I run the unit tests for Autobahn? Trial doesn't work, and there
>> don't appear to be any instances of unittest's classes in the tree.
>
> Please see here
>
> http://www.tavendo.de/autobahn/testsuite.html#test_browsers
>
> to get started.
>
> What do you want to test? Own client, own server?

I wanted to test Autobahn's internals. Unit tests, not integration
tests. The integration test stuff is pretty cool, too, but I was
hoping for tests which verify Autobahn's behavior internally.

>> Also, is it possible to run the Autobahn pub-sub and RPC stuff over a
>> different transport than WebSockets, like plain TCP?
>
> In principle, the RPC and PubSub protocol is designed to work
> over
>
> * reliable, ordered, full-duplex message channel
> * any serialization format that supports lists and primitive types
>
> Currently, the only binding is WebSocket/JSON.
>
> Raw TCP as a transport .. well, you need some message framing
> anyway. WebSocket is already quite bare metal.

Well, TCP would fulfill the channel, and something like AMP could be
the serializer, I guess. I'm not super-picky. I just wanted to know
how flexible the whole thing is.

~ C.

-- 
When the facts change, I change my mind. What do you do, sir? ~ Keynes

Corbin Simpson
<MostAwesomeDude at gmail.com>


From tobias.oberstein at tavendo.de  Mon Oct 31 18:25:05 2011
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Mon, 31 Oct 2011 15:25:05 -0700
Subject: [Twisted-Python] Autobahn WebSockets 0.4.3
In-Reply-To: <CALiqSLeh_3UQ49kzT-zt3=QBy2Vv3rGFx_RD-iwWwjEiKX21MQ@mail.gmail.com>
References: <634914A010D0B943A035D226786325D42D0B0D8512@EXVMBX020-12.exch020.serverdata.net>
	<CALiqSLeEh_k7AfXCnKaf_ChwC-Z=nbU7-f0QeX-ZO0+qxGn9yA@mail.gmail.com>
	<634914A010D0B943A035D226786325D42D0B0D874E@EXVMBX020-12.exch020.serverdata.net>
	<CALiqSLeh_3UQ49kzT-zt3=QBy2Vv3rGFx_RD-iwWwjEiKX21MQ@mail.gmail.com>
Message-ID: <634914A010D0B943A035D226786325D42D0B0D877E@EXVMBX020-12.exch020.serverdata.net>

> > What do you want to test? Own client, own server?
> 
> I wanted to test Autobahn's internals. Unit tests, not integration tests. The
> integration test stuff is pretty cool, too, but I was hoping for tests which
> verify Autobahn's behavior internally.

You can use Autobahn to test Autobahn of course.

Autobahn's test approach is tailored towards it's domain (communication
protocols) and based on the following perspective:

If you have a black box, that behaves to a protocol spec regarding
all it's externally visible behavior, you can call that black box conforming
to the protocol.

Whether you then have unit tests for stuff that happens within the black
box is less relevant, as long as you have covered all the spec with
behavioral test cases.

When you only have unit tests for stuff happening inside the box,
you still can't say if the box conforms to the spec. It may pass all
unit tests and fail when talking to the world.

For protocols, the reason for this is: any unit test by definition
misses an essential part: the peer you communicate with.

As an example, instead of writing a unit test that checks whether
a UTF-8 decoding function raises upon invalid sequences, 
execute a fuzzing test case where the fuzzer will actually send
the tested implementation invalid UTF-8 and check the externally
visible behavior.


From mostawesomedude at gmail.com  Mon Oct 31 19:32:03 2011
From: mostawesomedude at gmail.com (Corbin Simpson)
Date: Mon, 31 Oct 2011 16:32:03 -0700
Subject: [Twisted-Python] Autobahn WebSockets 0.4.3
In-Reply-To: <634914A010D0B943A035D226786325D42D0B0D877E@EXVMBX020-12.exch020.serverdata.net>
References: <634914A010D0B943A035D226786325D42D0B0D8512@EXVMBX020-12.exch020.serverdata.net>
	<CALiqSLeEh_k7AfXCnKaf_ChwC-Z=nbU7-f0QeX-ZO0+qxGn9yA@mail.gmail.com>
	<634914A010D0B943A035D226786325D42D0B0D874E@EXVMBX020-12.exch020.serverdata.net>
	<CALiqSLeh_3UQ49kzT-zt3=QBy2Vv3rGFx_RD-iwWwjEiKX21MQ@mail.gmail.com>
	<634914A010D0B943A035D226786325D42D0B0D877E@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <CALiqSLd+s6E1=6yTvQDE=4Zw8p+SGtUb3=3pY4zP=OBGX0cefA@mail.gmail.com>

On Mon, Oct 31, 2011 at 3:25 PM, Tobias Oberstein
<tobias.oberstein at tavendo.de> wrote:
> You can use Autobahn to test Autobahn of course.
>
> Autobahn's test approach is tailored towards it's domain (communication
> protocols) and based on the following perspective:
>
> If you have a black box, that behaves to a protocol spec regarding
> all it's externally visible behavior, you can call that black box conforming
> to the protocol.
>
> Whether you then have unit tests for stuff that happens within the black
> box is less relevant, as long as you have covered all the spec with
> behavioral test cases.
>
> When you only have unit tests for stuff happening inside the box,
> you still can't say if the box conforms to the spec. It may pass all
> unit tests and fail when talking to the world.
>
> For protocols, the reason for this is: any unit test by definition
> misses an essential part: the peer you communicate with.
>
> As an example, instead of writing a unit test that checks whether
> a UTF-8 decoding function raises upon invalid sequences,
> execute a fuzzing test case where the fuzzer will actually send
> the tested implementation invalid UTF-8 and check the externally
> visible behavior.

Okay. This seems reasonable. I really only have two reasons for doing
unit tests on top of this, and both are kinda orthogonal: Isolation
and specificity. Clearly, I need to do less TDD.

Anyway, I'm running the fuzzer against txWS, and things appear to be
working. Thanks for a useful tool!

-- 
When the facts change, I change my mind. What do you do, sir? ~ Keynes

Corbin Simpson
<MostAwesomeDude at gmail.com>


From iapyeh at gmail.com  Mon Oct 31 23:36:49 2011
From: iapyeh at gmail.com (Iap)
Date: Tue, 1 Nov 2011 11:36:49 +0800
Subject: [Twisted-Python] Autobahn WebSockets 0.4.3
In-Reply-To: <CALiqSLd+s6E1=6yTvQDE=4Zw8p+SGtUb3=3pY4zP=OBGX0cefA@mail.gmail.com>
References: <634914A010D0B943A035D226786325D42D0B0D8512@EXVMBX020-12.exch020.serverdata.net>
	<CALiqSLeEh_k7AfXCnKaf_ChwC-Z=nbU7-f0QeX-ZO0+qxGn9yA@mail.gmail.com>
	<634914A010D0B943A035D226786325D42D0B0D874E@EXVMBX020-12.exch020.serverdata.net>
	<CALiqSLeh_3UQ49kzT-zt3=QBy2Vv3rGFx_RD-iwWwjEiKX21MQ@mail.gmail.com>
	<634914A010D0B943A035D226786325D42D0B0D877E@EXVMBX020-12.exch020.serverdata.net>
	<CALiqSLd+s6E1=6yTvQDE=4Zw8p+SGtUb3=3pY4zP=OBGX0cefA@mail.gmail.com>
Message-ID: <CACnFXUtmRO9igXv9TLe12pZ+NgfOjwmmst7HLQFhf1RFXC0ohQ@mail.gmail.com>

>
> working. Thanks for a useful tool!
>

Thanks +1

Iap
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20111101/8e95d3a2/attachment.htm 

From bogus@does.not.exist.com  Fri Oct 28 10:01:47 2011
From: bogus@does.not.exist.com ()
Date: Fri, 28 Oct 2011 14:01:47 -0000
Subject: No subject
Message-ID: <mailman.0.1326394631.5287.twisted-python@twistedmatrix.com>

-crlf
           this option translated a line feed from the terminal into
CR+LF as required by some servers.


From bogus@does.not.exist.com  Fri Oct 28 10:01:47 2011
From: bogus@does.not.exist.com ()
Date: Fri, 28 Oct 2011 14:01:47 -0000
Subject: No subject
Message-ID: <mailman.1.1326394631.5287.twisted-python@twistedmatrix.com>

-C      Send CRLF as line-ending

Why?

--=20
Augusto Mecking Caringi


From bogus@does.not.exist.com  Fri Oct 28 10:01:47 2011
From: bogus@does.not.exist.com ()
Date: Fri, 28 Oct 2011 14:01:47 -0000
Subject: No subject
Message-ID: <mailman.2.1328739326.5287.twisted-python@twistedmatrix.com>

* Trial spins the reactor a couple of times before cleaning it up,
  ``AsynchronousDeferredRunTest`` does not.  If you rely on this behavior, =
use
  ``AsynchronousDeferredRunTestForBrokenTwisted``.

And the API documentation:

    """Test runner that works around Twisted brokenness re reactor junk.

    There are many APIs within Twisted itself where a Deferred fires but
    leaves cleanup work scheduled for the reactor to do.  Arguably, many of
    these are bugs.  This runner iterates the reactor event loop a number o=
f
    times after every test, in order to shake out these buggy-but-commonpla=
ce
    events.
    """

> =A0>>However it'd be good if Twisted took a clear position on this,
>
> =A0G> Nope. =A0We write software, not position papers :).
>
> Okay maybe I used the wrong wording. I was asking for a "position"
> because I got the impression that Jonathan is considering testtools a
> sort of trial2 that provides improvements over trial, but that was not
> likely going to replace only it because of compatibility reasons. Please
> Jonathan correct me if it's not the case.
>
> So *if* testtools is considered superior to trial for some reason, but
> it's problematic for Twisted to internally drop trial in favor of
> testtools, I was wondering if it was the case to (also) point people to
> testtools from the Twisted website/documentaiton, or something along
> those lines.
>

The passive voice here is masking an ambiguity. I consider testtools
superior to trial in many ways. Some others disagree, or don't have
enough information to form an opinion.

Perhaps it's worth a mention in the Twisted documentation, but I
personally won't push too hard for that.

...
> =A0G> I think that the main risks to "languishing" or "not taking off"
> =A0G> for both Trial and testtools are issues with their own
> =A0G> documentation and promotional materials, not in any conflict with
> =A0G> each other. =A0If you're worried about it, contribute code or
> =A0G> documentation or blog-posts or what have you to one or both
> =A0G> projects :).
>
> Probably a good addition to the documentation of the two projects would
> be to describe the differences between the two and if there is any
> reason one should use one or the other, beside bare taste. I can surely
> help with that when I have better picture myself.
>

For testtools, we'd also have to do that for nose, nose2, unittest2,
zope.testing and py.test for it to make any sense. Heck, just listing
all of those makes me regret ever writing any test framework code in
the first place.

I'm not sure I'd want that documentation, to be honest. I would only
ever do work towards it if it meant that one test framework could be
killed, even if that ended up being testtools.

cheers,
jml


From techtonik at gmail.com  Sat Oct  1 10:01:17 2011
From: techtonik at gmail.com (anatoly techtonik)
Date: Sat, 1 Oct 2011 19:01:17 +0300
Subject: [Twisted-Python] [ANN] Pyflakes 0.5.0
In-Reply-To: <4E628554.3040501@twistedmatrix.com>
References: <CAMcKhMQy_fnb13Co0s6y+LKgsizeMJTUFqGaPQocaUT0N=VgGQ@mail.gmail.com>
	<4E628554.3040501@twistedmatrix.com>
Message-ID: <CAPkN8xJ2tOauDkO+oVFcvmBHFcuMMX+jWRY5GTC2uB8B2cX5-Q@mail.gmail.com>

New pyflakes is integrated into Spyder beta3 that is just released.
http://code.google.com/p/spyderlib/source/detail?r=104724af845aecfdfee0db4b355ba01840e9459b

Good job, everyone! =)
--
anatoly t.



On Sat, Sep 3, 2011 at 10:51 PM, Glyph <glyph at twistedmatrix.com> wrote:
> Thanks, Tristan!  Great to see that maintenance is continuing :).
>
> (Now, off to upgrade Pyflakes everywhere...)
>
> On 09/03/2011 01:26 PM, Tristan Seligmann wrote:
>> -----BEGIN PGP SIGNED MESSAGE-----
>> Hash: SHA512
>>
>> It is my unexpected pleasure to announce the release of Pyflakes
>> 0.5.0, the first release in several years, and available now from
>> PyPI[1].
>>
>> Highlights of this release include the use of the built-in AST instead
>> of the compiler module, and support for various new syntax constructs
>> in Python 2.7. Note that development of Pyflakes (as well as the other
>> divmod.org projects) has moved to Launchpad[2] since the last release.
>>
>> [1] http://pypi.python.org/packages/source/p/pyflakes/pyflakes-0.5.0.tar.gz#md5=568dab27c42e5822787aa8a603898672
>>
>> [2] https://launchpad.net/pyflakes
>> -----BEGIN PGP SIGNATURE-----
>> Version: GnuPG v2.0.18 (GNU/Linux)
>>
>> iQIcBAEBCgAGBQJOYmL+AAoJEFjA+xzeO3YAme4P/AxLuy0WJN2zG97my1oEwky9
>> VT79BwnxOqR4NB7I1dRKE3PG4Llgl6frAa0SouM12Dr0QZj9Ug3qHAmmf+TZFrF6
>> OIQcBUGkZW7EanBhCbjmfqo+0atJ8toAcj9uyF7Db/0A7gCDw160JIMnmTmxu8z6
>> 3r5xRLNSnxs4jj6OSViv9oHNs2r2lpU/RObkGXy6EHxMgezYqw84FbA61fxquK4p
>> +J1n++vzfiasqgcQFFU3R67T0P2gWUe0C6pv/D+CurSCOdgQJv4LeRtNeYgKhw/W
>> rN0/3cERXGyRMa4JYDbFyP2G8lrpOuWo2F+jFtEGAxgziK8EqCK58ZSeqMBsodJ9
>> slAZobSQkrUj6GfpNKdW5mjYRqymBmUhPFc+sUI2poGb3zvMnWmUa2tiSfwl9uxO
>> 9Di82XXAztKba8++cGJQCbuONiLRPgW5kArz5dRz3jFVdAZYL7xUvah4uznwfazc
>> CA8Q0tiXXoL7X1sT6heNu4VRtnJfEh5LojFdizA4nJEpNssZrPFkSZMv+eSR4Sow
>> 8u2n4f07od6EBzHMhEyqFN7goaniW05VL+EvMdC5px+brnyKOIoLSAGWptBL5EYL
>> aaAb2zRrebyr/u5vGa+sKEXcoW2TEsc9qO8p/nNSetcoIcNfDwnd3cdyJPU+lYbn
>> Wctc68Y+xNWChiuTYa3e
>> =kKgi
>> -----END PGP SIGNATURE-----
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From exarkun at twistedmatrix.com  Sat Oct  1 22:05:22 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 02 Oct 2011 04:05:22 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1317528322.68.1081757835@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20111002/c6431f3b/attachment-0001.html>

From _ at lvh.cc  Wed Oct  5 14:34:52 2011
From: _ at lvh.cc (Laurens Van Houtven)
Date: Wed, 5 Oct 2011 22:34:52 +0200
Subject: [Twisted-Python] Sent e-mails coming up empty
Message-ID: <CAE_Hg6bu28UOS+MduS5udS8uDzJ1z6QMOjx9W+5O6zt3dBC6cg@mail.gmail.com>

Hey,


I've hacked some code together based on smtpclient_tls.py and radix's
article on how to send e-mail:
http://radix.twistedmatrix.com/2010/07/how-to-send-good-unicode-email-with.html

Here's what I've come up with: http://paste.pocoo.org/show/487918/

The e-mail arrives, but it's as if the body is empty. The from address is
wrong (it uses my login email), there's no subject, no body... I've pointed
my debugger at the problem, but the repr looks pretty okay:

'Content-Type: multipart/alternative;\n
boundary="===============6076587290379738777=="\nMIME-Version: 1.0\nSubject:
Content Access\nTo: _ at lvh.cc\nFrom:
dc83518c-4eea-447f-a9d8-29e29022e6f8 at myotherdomain.com\n\n--===============6076587290379738777==\nMIME-Version:
1.0\nContent-Type: text/html; charset="utf-8"\nContent-Transfer-Encoding:
quoted-printable\n\n<html>\n<body>\nOh
hello!!!!!\n</body>\n</html>\n--===============6076587290379738777==\nMIME-Version:
1.0\nContent-Type: text/plain; charset="utf-8"\nContent-Transfer-Encoding:
quoted-printable\n\n\nOh
hello!!!!!\n\n--===============6076587290379738777==--'

How do I go about debugging this further?


cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20111005/ecfe33d4/attachment-0001.html>

From stephen at thorne.id.au  Wed Oct  5 14:46:01 2011
From: stephen at thorne.id.au (Thorne, Stephen)
Date: Wed, 5 Oct 2011 21:46:01 +0100
Subject: [Twisted-Python] Sent e-mails coming up empty
In-Reply-To: <CAE_Hg6bu28UOS+MduS5udS8uDzJ1z6QMOjx9W+5O6zt3dBC6cg@mail.gmail.com>
References: <CAE_Hg6bu28UOS+MduS5udS8uDzJ1z6QMOjx9W+5O6zt3dBC6cg@mail.gmail.com>
Message-ID: <CAFPU7=sxwN3W1o8_4bK1TrDO7K+1iNLCPXvqMxDCXMyGhxEVww@mail.gmail.com>

Have you tried rewinding the stringio with .seek(0,0) first?

Stephen

On Wed, Oct 5, 2011 at 21:34, Laurens Van Houtven <_ at lvh.cc> wrote:

> Hey,
>
>
> I've hacked some code together based on smtpclient_tls.py and radix's
> article on how to send e-mail:
> http://radix.twistedmatrix.com/2010/07/how-to-send-good-unicode-email-with.html
>
> Here's what I've come up with: http://paste.pocoo.org/show/487918/
>
> The e-mail arrives, but it's as if the body is empty. The from address is
> wrong (it uses my login email), there's no subject, no body... I've pointed
> my debugger at the problem, but the repr looks pretty okay:
>
> 'Content-Type: multipart/alternative;\n
> boundary="===============6076587290379738777=="\nMIME-Version: 1.0\nSubject:
> Content Access\nTo: _ at lvh.cc\nFrom:
> dc83518c-4eea-447f-a9d8-29e29022e6f8 at myotherdomain.com\n\n--===============6076587290379738777==\nMIME-Version:
> 1.0\nContent-Type: text/html; charset="utf-8"\nContent-Transfer-Encoding:
> quoted-printable\n\n<html>\n<body>\nOh
> hello!!!!!\n</body>\n</html>\n--===============6076587290379738777==\nMIME-Version:
> 1.0\nContent-Type: text/plain; charset="utf-8"\nContent-Transfer-Encoding:
> quoted-printable\n\n\nOh
> hello!!!!!\n\n--===============6076587290379738777==--'
>
> How do I go about debugging this further?
>
>
> cheers
> lvh
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20111005/1c14e2a0/attachment.html>

From _ at lvh.cc  Wed Oct  5 14:56:26 2011
From: _ at lvh.cc (Laurens Van Houtven)
Date: Wed, 5 Oct 2011 22:56:26 +0200
Subject: [Twisted-Python] Sent e-mails coming up empty
In-Reply-To: <CAFPU7=sxwN3W1o8_4bK1TrDO7K+1iNLCPXvqMxDCXMyGhxEVww@mail.gmail.com>
References: <CAE_Hg6bu28UOS+MduS5udS8uDzJ1z6QMOjx9W+5O6zt3dBC6cg@mail.gmail.com>
	<CAFPU7=sxwN3W1o8_4bK1TrDO7K+1iNLCPXvqMxDCXMyGhxEVww@mail.gmail.com>
Message-ID: <65AF0871-407F-4140-9183-2AA1F1C62419@lvh.cc>

Eek!

As Stephen somewhat tongue-in-cheekly pointed out, this was fixed by rewinding the StringIO ;)

cheers
lvh



On 05 Oct 2011, at 22:46, Thorne, Stephen wrote:

> Have you tried rewinding the stringio with .seek(0,0) first?
> 
> Stephen
> 
> On Wed, Oct 5, 2011 at 21:34, Laurens Van Houtven <_ at lvh.cc> wrote:
> Hey,
> 
> 
> I've hacked some code together based on smtpclient_tls.py and radix's article on how to send e-mail: http://radix.twistedmatrix.com/2010/07/how-to-send-good-unicode-email-with.html
> 
> Here's what I've come up with: http://paste.pocoo.org/show/487918/
> 
> The e-mail arrives, but it's as if the body is empty. The from address is wrong (it uses my login email), there's no subject, no body... I've pointed my debugger at the problem, but the repr looks pretty okay: 
> 
> 'Content-Type: multipart/alternative;\n boundary="===============6076587290379738777=="\nMIME-Version: 1.0\nSubject: Content Access\nTo: _ at lvh.cc\nFrom: dc83518c-4eea-447f-a9d8-29e29022e6f8 at myotherdomain.com\n\n--===============6076587290379738777==\nMIME-Version: 1.0\nContent-Type: text/html; charset="utf-8"\nContent-Transfer-Encoding: quoted-printable\n\n<html>\n<body>\nOh hello!!!!!\n</body>\n</html>\n--===============6076587290379738777==\nMIME-Version: 1.0\nContent-Type: text/plain; charset="utf-8"\nContent-Transfer-Encoding: quoted-printable\n\n\nOh hello!!!!!\n\n--===============6076587290379738777==--'
> 
> How do I go about debugging this further?
> 
> 
> cheers
> lvh
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 1306 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20111005/0b8faa20/attachment-0002.bin>

From fabian.rothfuchs at googlemail.com  Thu Oct  6 10:22:18 2011
From: fabian.rothfuchs at googlemail.com (Fabian Rothfuchs)
Date: Thu, 06 Oct 2011 18:22:18 +0200
Subject: [Twisted-Python] dataReveived() buffer best practice?
Message-ID: <CAB3A25A.1C2DA%fabian.rothfuchs@gmail.com>

Hey there,

I'm currently implementing a Telnet Client, which is actually talking to a
Console Server mapping Telnet to an RS232 interface.
Further I'm using Twisted's conch.telnet lib to build that client, and I got
a little situation here where I wonder if there's already a best practice.
I guess the best way to introduce the problem is to show an example in the
following.

This is the output of a regular Terminal session when connecting to the
Telnet Server:
#------
drudge:~ rothfuchs$ telnet localhost 8001
Trying ::1...
Connected to localhost.
Escape character is '^]'.

>MM
 USERID:0004
 PASSWORD:
#------

In my Twisted Client, I implemented dataReceived() to just do:
[]
def dataReceived(self, data):
..print 'received: %s'
..print
[]

and this is the result:
#------
drudge:Desktop rothfuchs$ p s12.py
received: 
>

received: MM
 USE

received: RID:
#------

I also ran a tcpdump to confirm ­ The opposite server is obviously pushing
content to the socket in arbitrary frequencies, ending up in my
dataReceived() method to get called arbitrarily as well.

My question: is there any best practice for buffer techniques here?

Thanks
Fabian


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20111006/dffde2cb/attachment.html>

From JOHN at egh.com  Thu Oct  6 15:02:26 2011
From: JOHN at egh.com (John Santos)
Date: Thu, 6 Oct 2011 17:02:26 -0400
Subject: [Twisted-Python] dataReveived() buffer best practice?
In-Reply-To: <CAB3A25A.1C2DA%fabian.rothfuchs@gmail.com>
Message-ID: <1111006162755.12930J-100000@Ives.egh.com>


I'm doing something very similar.


I have (greatly simplified, because I'm doing lots of other stuff 
with the data):

    def applicationDataReceived(self, data):

	global savedText, delayCounter
        newline = "\n"
        text = savedText + data
        savedText = ""
        # normalize text (replace escapes, search for and normalize newlines)
        text = text.replace("\000","")
        text = text.replace("\033","$")
        text = text.replace("\r\n",newline)
        text = text.replace("\r",newline)
        lines = text.split(newline)
        for line in lines[:-1]:
            if len(line):
                write( line+newline )
        savedText = lines[-1]
        # (if savedText <> "" then we are waiting for more...)

        def printPartialMessage(myCounter):
            global savedText, savedTimestamp, delayCounter
            #print "delay routine called %i %i" % (myCounter, delayCounter)
            if myCounter == delayCounter:
                if savedText <> "":
                    newline = "\n"
                    write( savedText+" (terminator not seen)"+newline )
                    savedText = ""
                delayCounter = 0
            # If the passed counter (myCounter) equals the current value of
            # the delay counter, then we know the savedText is that left over
            # when we were queued.  Otherwise, more text has come in and
            # caused the counter to be incremented and more calls to be
            # made to printPartialMessage.  We'll let them handle it.

        if savedText <> "":
            delayCounter += 1
            reactor.callLater(60, printPartialMessage, delayCounter)



I'm actually writing this to a time-stamped log file, but I've removed
all the code to maintain the time stamps, create and roll over the log
files, etc.

If you are willing to wait indefinitely for partial lines, you can get rid
of the "printPartialMessage()" deferred, and the conditional call to it. 

delayCounter is a "pending calls to printPartialMessage()" counter (reset
to 0 when there are none), because the only one we are interested in is
the last one.  Instead, the deferred could be canceled when new text
arrives, but I think the ability to cancel defereds is newer than this
code.  I just let the deferreds exexute and dismiss them immediately if
they aren't current.

The constant "60" in the reactor.callLater() is the number of seconds I'm
willing to wait for a partial message to receive more data.

You might not want to normalize the text (since I'm printing to a text log
file, I didn't want embedded escape sequences to cause conniptions when
the log file was printed to a terminal), or you might want to use a 
different line terminator. 

Also, for conch.telnet, I think you want to override 
"applicationDataReceived()" and not "dataReceived()" because 
"dataReceived()" sees all the telnet protocol negotiations, which you
might want to let conch.telnet handle.



-- 
John Santos
Evans Griffiths & Hart, Inc.
781-861-0670 ext 539

From exarkun at twistedmatrix.com  Thu Oct  6 15:06:35 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 06 Oct 2011 21:06:35 -0000
Subject: [Twisted-Python] dataReveived() buffer best practice?
In-Reply-To: <CAB3A25A.1C2DA%fabian.rothfuchs@gmail.com>
References: <CAB3A25A.1C2DA%fabian.rothfuchs@gmail.com>
Message-ID: <20111006210635.23178.44174862.divmod.xquotient.5@localhost.localdomain>

On 04:22 pm, fabian.rothfuchs at googlemail.com wrote:
>Hey there,
>
>I'm currently implementing a Telnet Client, which is actually talking 
>to a
>Console Server mapping Telnet to an RS232 interface.
>
>[snip]
>
>and this is the result:
>#------
>drudge:Desktop rothfuchs$ p s12.py
>received:
>>
>
>received: MM
>USE
>
>received: RID:
>#------
>
>I also ran a tcpdump to confirm � The opposite server is obviously 
>pushing
>content to the socket in arbitrary frequencies, ending up in my
>dataReceived() method to get called arbitrarily as well.

This is not so obvious.  Any hop along the route may fragment the data.
>My question: is there any best practice for buffer techniques here?

This question is too vague.  What problem are you trying to solve?

Jean-Paul



From fabian.rothfuchs at googlemail.com  Thu Oct  6 17:04:50 2011
From: fabian.rothfuchs at googlemail.com (Fabian Rothfuchs)
Date: Fri, 07 Oct 2011 01:04:50 +0200
Subject: [Twisted-Python] dataReveived() buffer best practice?
In-Reply-To: <20111006210635.23178.44174862.divmod.xquotient.5@localhost.localdomain>
Message-ID: <CAB3FF0C.1C310%fabian.rothfuchs@gmail.com>



On 10/6/11 11:06 PM, "exarkun at twistedmatrix.com"
<exarkun at twistedmatrix.com> wrote:

>On 04:22 pm, fabian.rothfuchs at googlemail.com wrote:
>>Hey there,
>>
>>I'm currently implementing a Telnet Client, which is actually talking
>>to a
>>Console Server mapping Telnet to an RS232 interface.
>>
>>[snip]
>>
>>and this is the result:
>>#------
>>drudge:Desktop rothfuchs$ p s12.py
>>received:
>>>
>>
>>received: MM
>>USE
>>
>>received: RID:
>>#------
>>
>>I also ran a tcpdump to confirm � The opposite server is obviously
>>pushing
>>content to the socket in arbitrary frequencies, ending up in my
>>dataReceived() method to get called arbitrarily as well.
>
>This is not so obvious.  Any hop along the route may fragment the data.
>>My question: is there any best practice for buffer techniques here?
>
>This question is too vague.  What problem are you trying to solve?
>
>Jean-Paul


JP,

What do you mean w/ 'any hop along the route' ?

My problem is, that I need something similar to telnetlib's `read_until()`
method (in my case read_until('USERID:')), although 'USERID:' may be sent
in independent events.
I wonder if this is up to me to implement, or if there's any Twisted-style
best practice.

Cheers
Fab


>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python





From exarkun at twistedmatrix.com  Thu Oct  6 17:27:57 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 06 Oct 2011 23:27:57 -0000
Subject: [Twisted-Python] dataReveived() buffer best practice?
In-Reply-To: <CAB3FF0C.1C310%fabian.rothfuchs@gmail.com>
References: <20111006210635.23178.44174862.divmod.xquotient.5@localhost.localdomain>
	<CAB3FF0C.1C310%fabian.rothfuchs@gmail.com>
Message-ID: <20111006232757.23178.1690096227.divmod.xquotient.16@localhost.localdomain>

On 11:04 pm, fabian.rothfuchs at googlemail.com wrote:
>
>
>On 10/6/11 11:06 PM, "exarkun at twistedmatrix.com"
><exarkun at twistedmatrix.com> wrote:
>>On 04:22 pm, fabian.rothfuchs at googlemail.com wrote:
>>>Hey there,
>>>
>>>I'm currently implementing a Telnet Client, which is actually talking
>>>to a
>>>Console Server mapping Telnet to an RS232 interface.
>>>
>>>[snip]
>>>
>>>and this is the result:
>>>#------
>>>drudge:Desktop rothfuchs$ p s12.py
>>>received:
>>>>
>>>
>>>received: MM
>>>USE
>>>
>>>received: RID:
>>>#------
>>>
>>>I also ran a tcpdump to confirm �FD The opposite server is obviously
>>>pushing
>>>content to the socket in arbitrary frequencies, ending up in my
>>>dataReceived() method to get called arbitrarily as well.
>>
>>This is not so obvious.  Any hop along the route may fragment the 
>>data.
>>>My question: is there any best practice for buffer techniques here?
>>
>>This question is too vague.  What problem are you trying to solve?
>>
>>Jean-Paul
>
>
>JP,
>
>What do you mean w/ 'any hop along the route' ?

Potentially many routers are involved in getting packets from your 
(client) machine to the console server.  Any one of them is allowed to 
fragment the data.  The console server could well be writing "USERID:", 
but that's no guarantee that you'll receive "USERID:".
>My problem is, that I need something similar to telnetlib's 
>`read_until()`
>method (in my case read_until('USERID:')), although 'USERID:' may be 
>sent
>in independent events.
>I wonder if this is up to me to implement, or if there's any Twisted- 
>style
>best practice.

Take a look at twisted.conch.insults.helper.ExpectableBuffer.  You can 
hook it up to your telnet connection and then use its `expect� method to 
wait for a particular string to show up.

ExpectableBuffer is an ITerminalTransport, so you actually have to hook 
it up via twisted.conch.insults.insults.ClientProtocol, a vt102 
implementation.  If the server is incompatible with vt102, then you 
might need to build your own thing like ExpectableBuffer but without the 
vt102 layer.

Jean-Paul



From andrew.mahone at gmail.com  Thu Oct  6 23:45:12 2011
From: andrew.mahone at gmail.com (Andrew Mahone)
Date: Fri, 7 Oct 2011 01:45:12 -0400
Subject: [Twisted-Python] Ticket #4519,
	other possible spawnProcess enhancments
Message-ID: <CAOUOUDw8huB75UtLNZSk0JWKEk9EqiOZEveV4-eseAXxWRZiZg@mail.gmail.com>

I've been working on http://twistedmatrix.com/trac/ticket/4159 and
there has been a bit of discussion on IRC regarding appropriate
interfaces for various things. I think in the long run, the only
python state that setupChild should be allowed to modify should be
args, environment, and the win32 StartupInfo object. This leaves my
own personal use case for it impossible, but I'm working out how to
handle that - special childFDs objects. My proposal so far is that
there be a ProcessFileDescriptor object that inherits from
FileDescriptor. It would add a setup method, which Process would call
in the parent, and separate finishChild and finishParent methods that
would handle things like closing the other end of any pipe-like
objects, and would return a file descriptor - the child would place
this fd in childFDs, the parent would use it for communications with
the child, in the case of objects that wrap pipes or PTYs. I would
also extend the win32 implementation to include some limited support
for childFDs - they could be used to allow the child to inherit
specific file handles as its stdin, stdout, and stderr, instead of
using these exclusively for communications with the parent, so that
redirection to a pipe, to a file, and the building of pipelines could
be accomplished on win32 (I have a project that uses twisted for this
purpose, and I don't use windows, but I would like support to at least
be possible).

I'm seeking comments on whether an extended childFDs interface is the
best way to manipulate the inherited files of the child process, and
whether, if so, fdmap ought to be visible in setupChild at all - in my
opinion, setupChild should be strictly for things like setting the
child PID in an environment variable or as a command line argument,
manipulating scheduler and other parameters external to twisted
itself, and other things of that nature, and the existing childFDs
mechanism should handle any manipulation of file redirection or
inheritance. If there are suggestions on what an extended childFD
object ought to look like, these are welcome as well - I think the
specified methods should handle trivial cases even on platforms
without fork, and should handle nearly anything that really is a file
descriptor on POSIX platforms, but maybe there is something I have
missed.
-- 
Andrew Mahone
andrew DOT mahone AT gmail DOT com



From p.mayers at imperial.ac.uk  Fri Oct  7 05:47:46 2011
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 07 Oct 2011 12:47:46 +0100
Subject: [Twisted-Python] dataReveived() buffer best practice?
In-Reply-To: <20111006210635.23178.44174862.divmod.xquotient.5@localhost.localdomain>
References: <CAB3A25A.1C2DA%fabian.rothfuchs@gmail.com>
	<20111006210635.23178.44174862.divmod.xquotient.5@localhost.localdomain>
Message-ID: <4E8EE6E2.8040204@imperial.ac.uk>

On 10/06/2011 10:06 PM, exarkun at twistedmatrix.com wrote:

>> I also ran a tcpdump to confirm � The opposite server is obviously
>> pushing
>> content to the socket in arbitrary frequencies, ending up in my
>> dataReceived() method to get called arbitrarily as well.
>
> This is not so obvious. Any hop along the route may fragment the data.

It is quite unusual (though not unheard of) for something to re-segment 
the TCP stream. IP level fragmentation might occur, but it's relatively 
uncommon in todays IP networks, and is anyway irrelevant to TCP - the 
TCP stack will only see a reassembled IP packet.



From p.mayers at imperial.ac.uk  Fri Oct  7 05:56:06 2011
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 07 Oct 2011 12:56:06 +0100
Subject: [Twisted-Python] dataReveived() buffer best practice?
In-Reply-To: <CAB3A25A.1C2DA%fabian.rothfuchs@gmail.com>
References: <CAB3A25A.1C2DA%fabian.rothfuchs@gmail.com>
Message-ID: <4E8EE8D6.7050609@imperial.ac.uk>

On 10/06/2011 05:22 PM, Fabian Rothfuchs wrote:

> I also ran a tcpdump to confirm – The opposite server is obviously
> pushing content to the socket in arbitrary frequencies, ending up in my
> dataReceived() method to get called arbitrarily as well.

Yes, this is normal. TCP stacks are free to segment the data as they see 
fit. Machine-readable protocols have framing for this reason. Sadly, 
text streams run over telnet/SSH/CLI interfaces are usually badly 
framed, if at all.

>
> My question: is there any best practice for buffer techniques here?

Twisted comes with a bunch of higher level protocol sub-classes that 
buffer the data for you, then deliver chunks of the buffer to methods on 
your class.

For example, lineReceiver delivers whole lines.

There may well be a conch helper class that does the same.

The generic do-it-yourself approach is to append the data to a buffer, 
then look for complete protocol messages in the buffer and process them 
in order, possibly with a state machine. e.g.

def dataReceived(self, data):
   self.buffer += data

   if self.state=='waiting-for-userid':
     if 'USERID:' in self.buffer:
       # send userid
       self.transport.write('0004\r')
       self.state = 'waiting-for-password'
       # empty the buffer
       self.buffer = ''

   elif self.state=='waiting-for-password':
     if 'PASSWORD:' in self.buffer:
       self.transport.write(password+'\r')
       self.state = 'logged-in'
       self.buffer = ''

...and so on. This is boring to write by hand, so see if there is 
something in Twisted you can use already.



From glyph at twistedmatrix.com  Fri Oct  7 07:11:35 2011
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 7 Oct 2011 09:11:35 -0400
Subject: [Twisted-Python] dataReveived() buffer best practice?
In-Reply-To: <4E8EE6E2.8040204@imperial.ac.uk>
References: <CAB3A25A.1C2DA%fabian.rothfuchs@gmail.com>
	<20111006210635.23178.44174862.divmod.xquotient.5@localhost.localdomain>
	<4E8EE6E2.8040204@imperial.ac.uk>
Message-ID: <BE751B5E-9377-4E7F-A18E-8B5FEDAB2406@twistedmatrix.com>


On Oct 7, 2011, at 7:47 AM, Phil Mayers wrote:

> On 10/06/2011 10:06 PM, exarkun at twistedmatrix.com wrote:
> 
>>> I also ran a tcpdump to confirm � The opposite server is obviously
>>> pushing
>>> content to the socket in arbitrary frequencies, ending up in my
>>> dataReceived() method to get called arbitrarily as well.
>> 
>> This is not so obvious. Any hop along the route may fragment the data.
> 
> It is quite unusual (though not unheard of) for something to re-segment 
> the TCP stream. IP level fragmentation might occur, but it's relatively 
> uncommon in todays IP networks, and is anyway irrelevant to TCP - the 
> TCP stack will only see a reassembled IP packet.

I am skeptical; my recollection (the last time I worked at this layer of the network) is that this happens all the time over the public internet between diverse endpoints.

However, it's also mostly irrelevant: the thing at issue here is the distinction between the call to send() and the call to recv() - or in Twisted terms, the call to transport.write() and the argument to dataReceived, which will be smashed up into quasi-arbitrary lengths at the very least by your kernel and your router; you can send as much as you want at once via .write() but dataReceived will tend to get called with chunks around 1-2x your path MTU.

But the sizes are also not important.  The point is that TCP is about streams, not packets, and you have to deal with arbitrary chunking if you want your code to work right.  What layer of the network this happens at is not important to your code :).

-glyph


From p.mayers at imperial.ac.uk  Fri Oct  7 16:49:05 2011
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 07 Oct 2011 23:49:05 +0100
Subject: [Twisted-Python] dataReveived() buffer best practice?
In-Reply-To: <BE751B5E-9377-4E7F-A18E-8B5FEDAB2406@twistedmatrix.com>
References: <CAB3A25A.1C2DA%fabian.rothfuchs@gmail.com>	<20111006210635.23178.44174862.divmod.xquotient.5@localhost.localdomain>	<4E8EE6E2.8040204@imperial.ac.uk>
	<BE751B5E-9377-4E7F-A18E-8B5FEDAB2406@twistedmatrix.com>
Message-ID: <4E8F81E1.10004@imperial.ac.uk>

On 10/07/2011 02:11 PM, Glyph wrote:

>> It is quite unusual (though not unheard of) for something to
>> re-segment the TCP stream. IP level fragmentation might occur, but
>> it's relatively uncommon in todays IP networks, and is anyway
>> irrelevant to TCP - the TCP stack will only see a reassembled IP
>> packet.
>
> I am skeptical; my recollection (the last time I worked at this layer
> of the network) is that this happens all the time over the public
> internet between diverse endpoints.

Are we talking about TCP re-segmentation, or IP fragmentation?

If you mean TCP re-segmentation, then I have no data. The only places 
I've personally seen it are in TCP terminating load-balancers (F5, 
etc.), NAT64 devices, and as a side effect in higher-layer proxies 
(Squid, etc.).

If you mean IP fragmentation, I claim that fragmentation by routers in 
the internet is rare. Whether it's 1% or 0.001% I couldn't say, but the 
vast majority of the time, routers do not end up fragmenting. For one 
thing, an awful lot of OSes send TCP segments with "don't fragment" set, 
to trigger ICMP error messages and path MTU discovery. For another, a 
lot of low MTU networks employ TCP MSS clamping to prevent this ever 
happening.

For what it's worth, this "layer of the network" is my day job, but I 
don't claim oracle status.

> But the sizes are also not important.  The point is that TCP is about
> streams, not packets, and you have to deal with arbitrary chunking if
> you want your code to work right.  What layer of the network this
> happens at is not important to your code :).

Agreed.



From glyph at twistedmatrix.com  Sat Oct  8 17:56:05 2011
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 8 Oct 2011 19:56:05 -0400
Subject: [Twisted-Python] dataReveived() buffer best practice?
In-Reply-To: <4E8F81E1.10004@imperial.ac.uk>
References: <CAB3A25A.1C2DA%fabian.rothfuchs@gmail.com>	<20111006210635.23178.44174862.divmod.xquotient.5@localhost.localdomain>	<4E8EE6E2.8040204@imperial.ac.uk>
	<BE751B5E-9377-4E7F-A18E-8B5FEDAB2406@twistedmatrix.com>
	<4E8F81E1.10004@imperial.ac.uk>
Message-ID: <10C42A09-6DF3-4965-AEA3-7A7AD0933B64@twistedmatrix.com>


On Oct 7, 2011, at 6:49 PM, Phil Mayers wrote:

> On 10/07/2011 02:11 PM, Glyph wrote:
> 
>>> It is quite unusual (though not unheard of) for something to
>>> re-segment the TCP stream. IP level fragmentation might occur, but
>>> it's relatively uncommon in todays IP networks, and is anyway
>>> irrelevant to TCP - the TCP stack will only see a reassembled IP
>>> packet.
>> 
>> I am skeptical; my recollection (the last time I worked at this layer
>> of the network) is that this happens all the time over the public
>> internet between diverse endpoints.
> 
> Are we talking about TCP re-segmentation, or IP fragmentation?

Pretty sure I'm talking about TCP re-segmentation.

> If you mean TCP re-segmentation, then I have no data. The only places 
> I've personally seen it are in TCP terminating load-balancers (F5, 
> etc.), NAT64 devices, and as a side effect in higher-layer proxies 
> (Squid, etc.).

Hrm.  Now that I think of it, the packets I was examining were probably coming from environments that were heavily managed by "smart" networking hardware, although I could only see the edges of the network.  So it was probably a combination of high-level transparent proxies and wacky load-balancing and caching hardware.

> If you mean IP fragmentation, I claim that fragmentation by routers in 
> the internet is rare. Whether it's 1% or 0.001% I couldn't say, but the 
> vast majority of the time, routers do not end up fragmenting. For one 
> thing, an awful lot of OSes send TCP segments with "don't fragment" set, 
> to trigger ICMP error messages and path MTU discovery. For another, a 
> lot of low MTU networks employ TCP MSS clamping to prevent this ever 
> happening.

That's interesting, and good to know :).

> For what it's worth, this "layer of the network" is my day job, but I 
> don't claim oracle status.
> 
>> But the sizes are also not important.  The point is that TCP is about
>> streams, not packets, and you have to deal with arbitrary chunking if
>> you want your code to work right.  What layer of the network this
>> happens at is not important to your code :).
> 
> Agreed.

Since this is your day job - is there a formally-correct name for this phenomenon?  I usually refer to it as "packet fragmentation" even though I know that's not really it - as you say, IP fragmentation doesn't really happen. It's not like it's really TCP re-segmenting either, because one send() is not necessarily one segment.

Since it's such an important concept that every Twisted developer needs to know, I'd love to have a good word for it :).


From tom.cocagne at gmail.com  Sat Oct  8 20:55:41 2011
From: tom.cocagne at gmail.com (Tom Cocagne)
Date: Sat, 8 Oct 2011 21:55:41 -0500
Subject: [Twisted-Python] Running the same trial test suite against a
 live server and a mock server
In-Reply-To: <65DEEACA-ECB1-49DF-A9E3-B44B4BD5FE21@twistedmatrix.com>
References: <CAE_Hg6bc7cwwr9-r7kDBY+z+uC0VdRgveKe3QzkgpMpHv4kE0w@mail.gmail.com>
	<65DEEACA-ECB1-49DF-A9E3-B44B4BD5FE21@twistedmatrix.com>
Message-ID: <CAFKh6jBMvdUjdfq_bXcHQkpPorukeo01Uq1C4sBpkhfKGezBJg@mail.gmail.com>

   I recently ran into a similar problem while developing a native
python DBus implementation. Initially I implemented only the
client-side portion and pointed all my tests at the OS-provided
session bus. However, once I got around to implementing the
server-side portion of DBus, simply pointing all those "known-good"
client-side tests at the new bus implementation was a handy way to
test out the new code. To mechanism I used was to modify the
client-side testing module to use top-level module variables to tune
the connection setup code and then created "test_bus.py" with the
following content:

-----
import sys

from twisted.trial import unittest

import test_client

# Force the test code to use the internal bus rather than the
# OS-native bus
test_client.USE_INTERNAL_BUS = True

# "Copy" the test cases into this module
m = sys.modules[ __name__ ]

for k,v in test_client.__dict__.iteritems():
    if isinstance(v, type) and issubclass(v, unittest.TestCase):
        setattr(m, type(k, (v,), dict()))
-----

It's a bit of a hack, of course, but it's conceptually simple and
doesn't require much extra effort. Glyph's or Tim's suggestions may be
better for your project but I've been pretty happy with this mechanism
so far so I thought I'd toss it out there.

Cheers,

Tom



On Mon, Sep 26, 2011 at 5:24 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
>
> On Sep 26, 2011, at 7:37 AM, Laurens Van Houtven wrote:
>
> Are there any better ways to pass test data to trial?
>
> Environment variables.
> This isn't a great option, but I'd say it's definitely a better one than
> modules which monkeypatch stuff.
> You can also have your test cases synthesize stuff out of data files or
> config files in your environment.
> I'm not really inclined to make this super easy, since tests should by
> definition not be terribly configurable: the more knobs like this you have
> to turn, the less meaningful your test suite is likely to be.
> So, today, I'd write something like this:
> TXIEVERY_USERNAME=foo TXIEVERY_PW=bar TXIEVERY_CERT=baz.pem trial txievery
> but if someone has a better thought, please chime in - this is by no means
> the last word on this.  And I'm facing a similar issue soon so I'd love to
> hear some diversity of opinion here.
> -glyph
> PS: love the module name.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>



From exarkun at twistedmatrix.com  Sat Oct  8 22:05:23 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 09 Oct 2011 04:05:23 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1318133123.13.703272196@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20111009/ac9e1b3b/attachment-0001.html>

From itamar at itamarst.org  Sun Oct  9 12:44:41 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Sun, 09 Oct 2011 14:44:41 -0400
Subject: [Twisted-Python] Proposed new homepage
Message-ID: <1318185881.1826.9.camel@blake>

Our current page is not good at pulling in potential new users:

      * There's no quick examples of how nice Twisted is.
      * It takes 3 clicks (3!) to find basic documentation, with lots of
        scope for getting lost along the way.

I propose to fix this by adding code examples, and relevant direct
documentation links. A very preliminary pass, still lacking things like
syntax highlighting, can be found here:

http://twistedmatrix.com/trac/wiki/ProposedWikiStart

What do you think?




From waterbug at pangalactic.us  Sun Oct  9 13:25:19 2011
From: waterbug at pangalactic.us (Stephen Waterbury)
Date: Sun, 09 Oct 2011 15:25:19 -0400
Subject: [Twisted-Python] Proposed new homepage
In-Reply-To: <1318185881.1826.9.camel@blake>
References: <1318185881.1826.9.camel@blake>
Message-ID: <4E91F51F.50906@pangalactic.us>

On 10/09/2011 02:44 PM, Itamar Turner-Trauring wrote:
> Our current page is not good at pulling in potential new users:
>
>        * There's no quick examples of how nice Twisted is.
>        * It takes 3 clicks (3!) to find basic documentation, with lots of
>          scope for getting lost along the way.
>
> I propose to fix this by adding code examples, and relevant direct
> documentation links. A very preliminary pass, still lacking things like
> syntax highlighting, can be found here:
>
> http://twistedmatrix.com/trac/wiki/ProposedWikiStart
>
> What do you think?

Opinions from a long-time observer, who is not offering to
contribute -- sorry!  totally swamped ... :(

* I agree that quick examples should be more accessible.  I think
   the ones that go (possibly) somewhere on the homepage need to be
   carefully chosen (whatever that means ;).  I confess that my
   preference would be to have the "What is Twisted?" section
   extremely short (like maybe a 2-sentence paragraph with its
   current links) and then the "Quick Links" section right after
   that but have the "More Useful Pointers" section perhaps as an
   expandable part of the Quick Links, so that the next section
   could be Quick Examples and at least the beginning of the
   examples would be visible without scrolling (I like to
   avoid having to scroll to see the major structures on a page).

* I don't get your point about 3 clicks to find basic documentation --
   doesn't the link to "Twisted Core Documentation" in the 3rd
   paragraph get you there in one click?  Of course, the "basic
   documentation" will be nicer when the Sphinx-based docs arrive,
   I think ...

Steve



From albert.brandl at weiermayer.com  Mon Oct 10 01:20:27 2011
From: albert.brandl at weiermayer.com (Albert Brandl)
Date: Mon, 10 Oct 2011 09:20:27 +0200
Subject: [Twisted-Python] Proposed new homepage
In-Reply-To: <1318185881.1826.9.camel@blake>
References: <1318185881.1826.9.camel@blake>
Message-ID: <20111010072027.GA2553@weiermayer.com>

Hi!

On Sun, Oct 09, 2011 at 02:44:41PM -0400, Itamar Turner-Trauring wrote:
> http://twistedmatrix.com/trac/wiki/ProposedWikiStart
> 
> What do you think?

I like the approach to instantly "dive into" the library by showing some 
code. But I have a programming background - not sure if all (relevant) 
visitors will be happy with this.

> Twisted is an event-driven networking engine written in Python and 
> licensed under the MIT license.

Is the license really so important that it should be mentioned in the 
first paragraph? If it is, you might want to consider splitting the 
sentence. And yes, I know that the current homepage starts with the
same sentence ;-).

The following summary of Twisted projects on the current homepage might 
be a good completion of the first paragraph:

> Twisted projects variously support TCP, UDP, SSL/TLS, multicast, Unix 
> sockets, a large number of protocols (including HTTP, NNTP, IMAP, SSH, 
> IRC, FTP, and others), and much more.

One comment on the first code example:

> class EchoFactory(protocol.Factory):
>    def buildProtocol(self, addr):
>        return Echo()

It might be better to just define the `protocol` class variable and 
leave the instantiation to the default implementation of 
`buildProtocol`. 

Otherwise, the reader might assume that overriding `buildProtocol` is 
always necessary. Even worse, she might think that just returning an 
instance is enough; AFAIK, `buildProtocol` should also set the 
instance's `factory`. 

Of course that is an implementation detail, but I don't think we should 
set visitors on the wrong track right at the beginning ;-).

Best regards,
-- 
Albert Brandl
Weiermayer Solutions GmbH      | Abteistraße 12, A-4813 Altmünster
phone: +43 (0) 720 70 30 14    | fax: +43 (0) 7612 20 3 56
web: http://www.weiermayer.com



From johan.rydberg at edgeware.tv  Mon Oct 10 03:22:46 2011
From: johan.rydberg at edgeware.tv (Johan Rydberg)
Date: Mon, 10 Oct 2011 11:22:46 +0200
Subject: [Twisted-Python] Proposed new homepage
In-Reply-To: <1318185881.1826.9.camel@blake>
References: <1318185881.1826.9.camel@blake>
Message-ID: <4E92B966.8070603@edgeware.tv>

Nice effort.  I also believe that getting down to the details (the
code) will get a lot more people interested.

One question: "Scalable web applications"?   What makes them scalable?

Either drop the word, or explain.


-- 

Johan Rydberg
Product Designer

Edgeware AB
Mäster Samuelsgatan 56
SE-111 21 Stockholm, Sweden




From itamar at itamarst.org  Mon Oct 10 06:30:06 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Mon, 10 Oct 2011 08:30:06 -0400
Subject: [Twisted-Python] Proposed new homepage
In-Reply-To: <20111010072027.GA2553@weiermayer.com>
References: <1318185881.1826.9.camel@blake>
	<20111010072027.GA2553@weiermayer.com>
Message-ID: <1318249806.1826.26.camel@blake>

On Mon, 2011-10-10 at 09:20 +0200, Albert Brandl wrote:

> > Twisted is an event-driven networking engine written in Python and 
> > licensed under the MIT license.
> 
> Is the license really so important that it should be mentioned in the 
> first paragraph? If it is, you might want to consider splitting the 
> sentence. And yes, I know that the current homepage starts with the
> same sentence ;-).

Open source and not GPL is probably the important bit.

> The following summary of Twisted projects on the current homepage might 
> be a good completion of the first paragraph:
> 
> > Twisted projects variously support TCP, UDP, SSL/TLS, multicast, Unix 
> > sockets, a large number of protocols (including HTTP, NNTP, IMAP, SSH, 
> > IRC, FTP, and others), and much more.

I get the impression some people think Twisted is complex and big
because of all the features it has. So first I want to show them with
code "look it's so simple"... and only then give the full list of
features.

> One comment on the first code example:
> 
> > class EchoFactory(protocol.Factory):
> >    def buildProtocol(self, addr):
> >        return Echo()
> 
> It might be better to just define the `protocol` class variable and 
> leave the instantiation to the default implementation of 
> `buildProtocol`. 

I have just closed two tickets making buildProtocol explicitly used in
both the server and client howtos, and I've also updated a relevant code
example in the website's FAQ. The current way of doing things, setting
an attribute on Factory, is really bad from an educational point of
view, since it makes protocol creation "magic". By having an explicit
buildProtocol users know where protocol instances come from, and how to
override this creation.

> Otherwise, the reader might assume that overriding `buildProtocol` is 
> always necessary. Even worse, she might think that just returning an 
> instance is enough; AFAIK, `buildProtocol` should also set the 
> instance's `factory`. 

buildProtocol does not always need to set factory as an attribute, you
can just return a protocol instance. If you do need the factory, better
to pass it in to Protocol's __init__ explicitly instead of having an
extra attribute shoved on later.





From itamar at itamarst.org  Mon Oct 10 06:33:22 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Mon, 10 Oct 2011 08:33:22 -0400
Subject: [Twisted-Python] Proposed new homepage
In-Reply-To: <4E92B966.8070603@edgeware.tv>
References: <1318185881.1826.9.camel@blake>  <4E92B966.8070603@edgeware.tv>
Message-ID: <1318250002.1826.29.camel@blake>

On Mon, 2011-10-10 at 11:22 +0200, Johan Rydberg wrote:
> Nice effort.  I also believe that getting down to the details (the
> code) will get a lot more people interested.
> 
> One question: "Scalable web applications"?   What makes them scalable?
> 
> Either drop the word, or explain.

Hm. I need a short way of explaining "can support large numbers of
long-running queries without falling over like a thread/process-pool
based web server would". I guess that's not that hard to write ;) I
wonder if the example could easily demonstrate that... perhaps a
streaming countdown display?





From jml at mumak.net  Mon Oct 10 06:42:25 2011
From: jml at mumak.net (Jonathan Lange)
Date: Mon, 10 Oct 2011 13:42:25 +0100
Subject: [Twisted-Python] Proposed new homepage
In-Reply-To: <1318250002.1826.29.camel@blake>
References: <1318185881.1826.9.camel@blake> <4E92B966.8070603@edgeware.tv>
	<1318250002.1826.29.camel@blake>
Message-ID: <CAHZ8tnYVUoKwOPWohJZ13zfuBP0+VESyGEqvXyCmXJBQChbi6w@mail.gmail.com>

On Mon, Oct 10, 2011 at 1:33 PM, Itamar Turner-Trauring
<itamar at itamarst.org> wrote:
> On Mon, 2011-10-10 at 11:22 +0200, Johan Rydberg wrote:
>> Nice effort.  I also believe that getting down to the details (the
>> code) will get a lot more people interested.
>>
>> One question: "Scalable web applications"?   What makes them scalable?
>>
>> Either drop the word, or explain.
>
> Hm. I need a short way of explaining "can support large numbers of
> long-running queries without falling over like a thread/process-pool
> based web server would". I guess that's not that hard to write ;) I
> wonder if the example could easily demonstrate that... perhaps a
> streaming countdown display?

Or you could link to a page that explains.

jml



From glyph at twistedmatrix.com  Mon Oct 10 07:42:51 2011
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 10 Oct 2011 09:42:51 -0400
Subject: [Twisted-Python] Proposed new homepage
In-Reply-To: <CAHZ8tnYVUoKwOPWohJZ13zfuBP0+VESyGEqvXyCmXJBQChbi6w@mail.gmail.com>
References: <1318185881.1826.9.camel@blake> <4E92B966.8070603@edgeware.tv>
	<1318250002.1826.29.camel@blake>
	<CAHZ8tnYVUoKwOPWohJZ13zfuBP0+VESyGEqvXyCmXJBQChbi6w@mail.gmail.com>
Message-ID: <B8529030-1771-4C18-829F-E804B5DF5E13@twistedmatrix.com>


On Oct 10, 2011, at 8:42 AM, Jonathan Lange wrote:

> On Mon, Oct 10, 2011 at 1:33 PM, Itamar Turner-Trauring
> <itamar at itamarst.org> wrote:
>> On Mon, 2011-10-10 at 11:22 +0200, Johan Rydberg wrote:
>>> Nice effort.  I also believe that getting down to the details (the
>>> code) will get a lot more people interested.
>>> 
>>> One question: "Scalable web applications"?   What makes them scalable?
>>> 
>>> Either drop the word, or explain.
>> 
>> Hm. I need a short way of explaining "can support large numbers of
>> long-running queries without falling over like a thread/process-pool
>> based web server would". I guess that's not that hard to write ;) I
>> wonder if the example could easily demonstrate that... perhaps a
>> streaming countdown display?
> 
> Or you could link to a page that explains.

I'd say: let's drop the word for now, write a page that explains, then add it back.


From glyph at twistedmatrix.com  Mon Oct 10 07:47:15 2011
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 10 Oct 2011 09:47:15 -0400
Subject: [Twisted-Python] Proposed new homepage
In-Reply-To: <1318185881.1826.9.camel@blake>
References: <1318185881.1826.9.camel@blake>
Message-ID: <040EFF13-23C1-454E-8DC0-BA4D614686DD@twistedmatrix.com>


On Oct 9, 2011, at 2:44 PM, Itamar Turner-Trauring wrote:

> Our current page is not good at pulling in potential new users:
> 
>      * There's no quick examples of how nice Twisted is.
>      * It takes 3 clicks (3!) to find basic documentation, with lots of
>        scope for getting lost along the way.
> 
> I propose to fix this by adding code examples, and relevant direct
> documentation links. A very preliminary pass, still lacking things like
> syntax highlighting, can be found here:
> 
> http://twistedmatrix.com/trac/wiki/ProposedWikiStart
> 
> What do you think?


This is a fantastic effort.

I don't think it's perfect, but I do think it's substantially better than what we have now (modulo "scalable" which I already addressed in another message).  We should continue to talk about it and work on it, but I think we should switch over to this new and improved thing ASAP.

Unless someone has a serious objection, I think we should replace the front page later today.  (Itamar, do you want to do the honors, or shall I?)

The main thing I'd like to see added next would be some verbiage around twistd plugins, like "running a web server is as easy as 'twistd web --path .'".  I'd really like to stress that you don't need to be a programmer to use Twisted; we aren't ever going to get a good system administration story unless more ops people hear about it and start playing with it :).

One other minor tweak: 'Quick Links' was always a dumb heading.  "More Information", maybe?

-glyph




From glyph at twistedmatrix.com  Mon Oct 10 07:53:38 2011
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 10 Oct 2011 09:53:38 -0400
Subject: [Twisted-Python] Ticket #4519,
	other possible spawnProcess enhancments
In-Reply-To: <CAOUOUDw8huB75UtLNZSk0JWKEk9EqiOZEveV4-eseAXxWRZiZg@mail.gmail.com>
References: <CAOUOUDw8huB75UtLNZSk0JWKEk9EqiOZEveV4-eseAXxWRZiZg@mail.gmail.com>
Message-ID: <11F1B282-B529-4F43-93EC-6F6C7BAD274C@twistedmatrix.com>

Hi Andrew,

Thanks for your work on this.

On Oct 7, 2011, at 1:45 AM, Andrew Mahone wrote:

> I've been working on http://twistedmatrix.com/trac/ticket/4159 and
> there has been a bit of discussion on IRC regarding appropriate
> interfaces for various things. I think in the long run, the only
> python state that setupChild should be allowed to modify should be
> args, environment, and the win32 StartupInfo object. This leaves my
> own personal use case for it impossible, but I'm working out how to
> handle that - special childFDs objects. My proposal so far is that
> there be a ProcessFileDescriptor object that inherits from
> FileDescriptor. It would add a setup method, which Process would call
> in the parent, and separate finishChild and finishParent methods that
> would handle things like closing the other end of any pipe-like
> objects, and would return a file descriptor - the child would place
> this fd in childFDs, the parent would use it for communications with
> the child, in the case of objects that wrap pipes or PTYs. I would
> also extend the win32 implementation to include some limited support
> for childFDs - they could be used to allow the child to inherit
> specific file handles as its stdin, stdout, and stderr, instead of
> using these exclusively for communications with the parent, so that
> redirection to a pipe, to a file, and the building of pipelines could
> be accomplished on win32 (I have a project that uses twisted for this
> purpose, and I don't use windows, but I would like support to at least
> be possible).

I've been sitting on this message for a couple of days trying to come up with a good reply.  Unfortunately this whole description is phrased in terms of conflicting desires for the implementation, rather than a design strategy or a set of goals or requirements for the API, so my attempted replies have ended up playing whack-a-mole with the concerns one at a time, rather than making an informed critique of the whole proposal.

Could you try to re-phrase your design here in terms of why we want each of these things, some use-cases, and then maybe spell out the methods and stuff in terms of Python interfaces or classes (or perhaps links to your patch if it already implements what you've described here)?

Sorry that this probably isn't terribly useful feedback.  I really appreciate the time you've put in thus far, and I think I like where you're going with this, I just haven't had time to turn everything inside-out so that I can see it clearly :).

> I'm seeking comments on whether an extended childFDs interface is the
> best way to manipulate the inherited files of the child process, and
> whether, if so, fdmap ought to be visible in setupChild at all - in my
> opinion, setupChild should be strictly for things like setting the
> child PID in an environment variable or as a command line argument,
> manipulating scheduler and other parameters external to twisted
> itself, and other things of that nature, and the existing childFDs
> mechanism should handle any manipulation of file redirection or
> inheritance. If there are suggestions on what an extended childFD
> object ought to look like, these are welcome as well - I think the
> specified methods should handle trivial cases even on platforms
> without fork, and should handle nearly anything that really is a file
> descriptor on POSIX platforms, but maybe there is something I have
> missed.


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20111010/90651d71/attachment.html>

From glyph at twistedmatrix.com  Mon Oct 10 08:05:07 2011
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 10 Oct 2011 10:05:07 -0400
Subject: [Twisted-Python] Proposed new homepage
In-Reply-To: <1318249806.1826.26.camel@blake>
References: <1318185881.1826.9.camel@blake>
	<20111010072027.GA2553@weiermayer.com>
	<1318249806.1826.26.camel@blake>
Message-ID: <1A9D3F23-3ED2-433D-9995-3CE28BEE4190@twistedmatrix.com>


On Oct 10, 2011, at 8:30 AM, Itamar Turner-Trauring wrote:

> On Mon, 2011-10-10 at 09:20 +0200, Albert Brandl wrote:

>> The following summary of Twisted projects on the current homepage might 
>> be a good completion of the first paragraph:
>> 
>>> Twisted projects variously support TCP, UDP, SSL/TLS, multicast, Unix 
>>> sockets, a large number of protocols (including HTTP, NNTP, IMAP, SSH, 
>>> IRC, FTP, and others), and much more.
> 
> I get the impression some people think Twisted is complex and big
> because of all the features it has. So first I want to show them with
> code "look it's so simple"... and only then give the full list of
> features.

I emphatically agree.  It might be good to eventually have more of a link – demonstrate how the echo server actually leads into the web server – but the parallel structure of the examples there at least hints at it.  Maybe we could have one more: like a 'hello world' IRC bot or something?

>> One comment on the first code example:
>> 
>>> class EchoFactory(protocol.Factory):
>>>   def buildProtocol(self, addr):
>>>       return Echo()
>> 
>> It might be better to just define the `protocol` class variable and 
>> leave the instantiation to the default implementation of 
>> `buildProtocol`. 
> 
> I have just closed two tickets making buildProtocol explicitly used in
> both the server and client howtos, and I've also updated a relevant code
> example in the website's FAQ. The current way of doing things, setting
> an attribute on Factory, is really bad from an educational point of
> view, since it makes protocol creation "magic". By having an explicit
> buildProtocol users know where protocol instances come from, and how to
> override this creation.

These tickets are <http://twistedmatrix.com/trac/ticket/5044> and <http://twistedmatrix.com/trac/ticket/4761> if anyone wants more details on this.  The existing behavior is convenient, and isn't going away, but it's very difficult for new users to infer what's going on without reading all of protocol.Factory's implementation.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20111010/f08b3318/attachment-0001.html>

From itamar at itamarst.org  Mon Oct 10 08:10:37 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Mon, 10 Oct 2011 10:10:37 -0400
Subject: [Twisted-Python] Proposed new homepage
In-Reply-To: <040EFF13-23C1-454E-8DC0-BA4D614686DD@twistedmatrix.com>
References: <1318185881.1826.9.camel@blake>
	<040EFF13-23C1-454E-8DC0-BA4D614686DD@twistedmatrix.com>
Message-ID: <1318255837.1826.42.camel@blake>

On Mon, 2011-10-10 at 09:47 -0400, Glyph wrote:

> Unless someone has a serious objection, I think we should replace the front page later today.  (Itamar, do you want to do the honors, or shall I?)

I'll try to do it this evening, after adding syntax highlighting (half
manually, ugh) and fixing the comments mentioned here (scalability,
Quick Links).




From itamar at itamarst.org  Mon Oct 10 08:11:14 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Mon, 10 Oct 2011 10:11:14 -0400
Subject: [Twisted-Python] Proposed new homepage
In-Reply-To: <040EFF13-23C1-454E-8DC0-BA4D614686DD@twistedmatrix.com>
References: <1318185881.1826.9.camel@blake>
	<040EFF13-23C1-454E-8DC0-BA4D614686DD@twistedmatrix.com>
Message-ID: <1318255874.1826.43.camel@blake>

Oh - I am going to need admin permission on the wiki, I can't actually
edit the front page right now :)




From glyph at twistedmatrix.com  Mon Oct 10 08:20:10 2011
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 10 Oct 2011 10:20:10 -0400
Subject: [Twisted-Python] Proposed new homepage
In-Reply-To: <1318255874.1826.43.camel@blake>
References: <1318185881.1826.9.camel@blake>
	<040EFF13-23C1-454E-8DC0-BA4D614686DD@twistedmatrix.com>
	<1318255874.1826.43.camel@blake>
Message-ID: <F1CF4BCF-4101-4337-B162-730C04A67857@twistedmatrix.com>


On Oct 10, 2011, at 10:11 AM, Itamar Turner-Trauring wrote:

> Oh - I am going to need admin permission on the wiki, I can't actually
> edit the front page right now :)

You should be an admin now.


From radix at twistedmatrix.com  Mon Oct 10 13:18:46 2011
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 10 Oct 2011 15:18:46 -0400
Subject: [Twisted-Python] Ticket #4519,
	other possible spawnProcess enhancments
In-Reply-To: <11F1B282-B529-4F43-93EC-6F6C7BAD274C@twistedmatrix.com>
References: <CAOUOUDw8huB75UtLNZSk0JWKEk9EqiOZEveV4-eseAXxWRZiZg@mail.gmail.com>
	<11F1B282-B529-4F43-93EC-6F6C7BAD274C@twistedmatrix.com>
Message-ID: <CAPkRfUTQna1nFKeyDPtQLbccnh5c15ccJePmtzp8hDTBTyvr2w@mail.gmail.com>

Software Development Methodology!!!!

1. Use Cases
2. Requirements
3. Proposed Technical Design

Bonus points if you include Visio diagrams!!!!

Top-posted for genuine experience!!!!

On Mon, Oct 10, 2011 at 9:53 AM, Glyph <glyph at twistedmatrix.com> wrote:

> Hi Andrew,
>
> Thanks for your work on this.
>
> On Oct 7, 2011, at 1:45 AM, Andrew Mahone wrote:
>
> I've been working on http://twistedmatrix.com/trac/ticket/4159 and
> there has been a bit of discussion on IRC regarding appropriate
> interfaces for various things. I think in the long run, the only
> python state that setupChild should be allowed to modify should be
> args, environment, and the win32 StartupInfo object. This leaves my
> own personal use case for it impossible, but I'm working out how to
> handle that - special childFDs objects. My proposal so far is that
> there be a ProcessFileDescriptor object that inherits from
> FileDescriptor. It would add a setup method, which Process would call
> in the parent, and separate finishChild and finishParent methods that
> would handle things like closing the other end of any pipe-like
> objects, and would return a file descriptor - the child would place
> this fd in childFDs, the parent would use it for communications with
> the child, in the case of objects that wrap pipes or PTYs. I would
> also extend the win32 implementation to include some limited support
> for childFDs - they could be used to allow the child to inherit
> specific file handles as its stdin, stdout, and stderr, instead of
> using these exclusively for communications with the parent, so that
> redirection to a pipe, to a file, and the building of pipelines could
> be accomplished on win32 (I have a project that uses twisted for this
> purpose, and I don't use windows, but I would like support to at least
> be possible).
>
>
> I've been sitting on this message for a couple of days trying to come up
> with a good reply.  Unfortunately this whole description is phrased in terms
> of conflicting desires for the implementation, rather than a design strategy
> or a set of goals or requirements for the API, so my attempted replies have
> ended up playing whack-a-mole with the concerns one at a time, rather than
> making an informed critique of the whole proposal.
>
> Could you try to re-phrase your design here in terms of why we want each of
> these things, some use-cases, and then maybe spell out the methods and stuff
> in terms of Python interfaces or classes (or perhaps links to your patch if
> it already implements what you've described here)?
>
> Sorry that this probably isn't terribly useful feedback.  I really
> appreciate the time you've put in thus far, and I *think* I like where
> you're going with this, I just haven't had time to turn everything
> inside-out so that I can see it clearly :).
>
> I'm seeking comments on whether an extended childFDs interface is the
> best way to manipulate the inherited files of the child process, and
> whether, if so, fdmap ought to be visible in setupChild at all - in my
> opinion, setupChild should be strictly for things like setting the
> child PID in an environment variable or as a command line argument,
> manipulating scheduler and other parameters external to twisted
> itself, and other things of that nature, and the existing childFDs
> mechanism should handle any manipulation of file redirection or
> inheritance. If there are suggestions on what an extended childFD
> object ought to look like, these are welcome as well - I think the
> specified methods should handle trivial cases even on platforms
> without fork, and should handle nearly anything that really is a file
> descriptor on POSIX platforms, but maybe there is something I have
> missed.
>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20111010/2748a8ab/attachment-0001.html>

From johnaherne at rocs.co.uk  Tue Oct 11 05:10:09 2011
From: johnaherne at rocs.co.uk (John Aherne)
Date: Tue, 11 Oct 2011 12:10:09 +0100
Subject: [Twisted-Python] twisted as windows service
Message-ID: <CAKmUHjaP+dgWS_UVOP1E8FCes1Qch39K0tniUsy4wD5c0ToqVg@mail.gmail.com>

I have been looking for some info on running twisted as a Windows Service.

I have found various examples in mailing-lists and blogs that vary in what
seem to be important respects.

I have included them below as 3 examples.

The problem I have is working out which scheme or combination I should be
adopting.
I have tried out some of the options and they appear to work. But I need
something better than seems to work.

My gut reaction is that I should be putting all my imports into SvcDoRun,
since they will be used in the thread.

But if I import the reactor in SvcDoRun, should I be
using reactor.callfromthread(reactor.stop). I think not

I think the use of waitforobject is the right thing to do as well without
fully understanding it at the moment.

If anyone can throw some light on what to do I shall be very grateful.

It could be that I should post this question to python-windows mailing
list since it seems to me more pertinent to windows than twisted.

Thanks for any info.

John Aherne

Here is 1st example.

The reactor is imported globally not in SvcDoRun
It uses the waitforobject to detect stopping the service
The reactor.stop is calledfromthread


[Twisted-Python] How to run Twisted as a service in Windows?

Thomas Jacob jacob at internet24.de
Wed Aug 9 10:49:30 EDT 2006
Previous message: [Twisted-Python] How to run Twisted as a service in
Windows?
Next message: [Twisted-Python] How to run Twisted as a service in Windows?
Messages sorted by: [ date ] [ thread ] [ subject ] [ author ]
AFAIK, twistd doesn't provide direct support for Windows Services yet
(Is this planned?).

But you can easily wrap a reactor,run() yourself by doing something
like the following using the Win32-Python packages

import win32serviceutil
import win32service
import win32event

from twisted.internet import reactor

import sys


class IMSAgentBase(win32serviceutil.ServiceFramework):
    _svc_name_ = "myService"
    _svc_display_name_ = "My little Service"
    _svc_description_ = "My little Service" # Win2k or later
    _svc_deps_ = ["RpcSs"] # Start after the Network has come up...

    def __init__(self, args):
        win32serviceutil.ServiceFramework.__init__(self, args)
        self.hWaitStop = win32event.CreateEvent(None, 0, 0, None)

    def SvcStop(self):
        self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)
        reactor.callFromThread(reactor.stop)
        win32event.SetEvent(self.hWaitStop)

    def SvcDoRun(self):

        # initialize your services here
        reactor.run()
        win32event.WaitForSingleObject(self.hWaitStop,win32event.INFINITE)

def HandleCommandLine(cls):
    win32serviceutil.HandleCommandLine(cls)


Run the above as a script.


Here is the 2nd example.

The imports are global not in SvcDoRun

And the reactor .stop is not called from thread.

And the wait for stop event is in a timeout loop

It uses waitforobject events

It sets installsignalhandlers to 0

 You can then test it out with the sample Echo client from the core docs.

 """qotdservice.py
 Sample Twisted Windows Service
 """

 # Service Utilities
 import win32serviceutil
 import win32service
 import win32event

 # Twisted imports
 from twisted.internet.protocol import Protocol, Factory
 from twisted.internet import reactor

 class QOTD(Protocol):

     def connectionMade(self):
         self.transport.write("An apple a day keeps the doctor away\r\n")
         self.transport.loseConnection()


 class WindowsService(win32serviceutil.ServiceFramework):
     _svc_name_ = "TwistedWin32Service"
     _svc_display_name_ = "Twisted Win32 Service"

     def __init__(self, args):
         win32serviceutil.ServiceFramework.__init__(self, args)
         self.hWaitStop = win32event.CreateEvent(None, 0, 0, None)

     def SvcStop(self):
         self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)
         win32event.SetEvent(self.hWaitStop)

     def SvcDoRun(self):
         import servicemanager

         self.CheckForQuit()

         factory = Factory()
         factory.protocol = QOTD

         reactor.listenTCP(8007, factory)
         reactor.run(installSignalHandlers=0)


     def CheckForQuit(self):
         retval = win32event.WaitForSingleObject(self.hWaitStop, 10)
         if not retval == win32event.WAIT_TIMEOUT:
             # Received Quit from Win32
             reactor.stop()

         reactor.callLater(1.0, self.CheckForQuit)

 if __name__=='__main__':
     win32serviceutil.HandleCommandLine(WindowsService)


Here is  the 3rd example.

The imports are done in SvcDoRun.
There is no callfrom thread
It does not use the waitforobject

import sys, os
import win32serviceutil, win32service

class MyService(win32serviceutil.ServiceFramework):
    """NT Service."""

    _svc_name_ = "MyService"
    _svc_display_name_ = "MyService server"

    def SvcDoRun(self):
        import server
        f = open(os.path.join(server.rootPath, "cyberhigh.log"), 'a')
        from twisted.python.log import startLogging
        from twisted.application.app import startApplication
        from twisted.internet import reactor
        startLogging(f)
        startApplication(server.application, 0)
        reactor.run()

    def SvcStop(self):
        self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)
        from twisted.internet import reactor
        reactor.stop()

if __name__ == '__main__':</pre>
    win32serviceutil.HandleCommandLine(MyService)</pre>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20111011/7eb72b38/attachment.html>

From p.mayers at imperial.ac.uk  Wed Oct 12 03:29:35 2011
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 12 Oct 2011 10:29:35 +0100
Subject: [Twisted-Python] dataReveived() buffer best practice?
In-Reply-To: <10C42A09-6DF3-4965-AEA3-7A7AD0933B64@twistedmatrix.com>
References: <CAB3A25A.1C2DA%fabian.rothfuchs@gmail.com>	<20111006210635.23178.44174862.divmod.xquotient.5@localhost.localdomain>	<4E8EE6E2.8040204@imperial.ac.uk>	<BE751B5E-9377-4E7F-A18E-8B5FEDAB2406@twistedmatrix.com>	<4E8F81E1.10004@imperial.ac.uk>
	<10C42A09-6DF3-4965-AEA3-7A7AD0933B64@twistedmatrix.com>
Message-ID: <4E955DFF.70901@imperial.ac.uk>

On 10/09/2011 12:56 AM, Glyph wrote:

> Since this is your day job - is there a formally-correct name for
> this phenomenon?  I usually refer to it as "packet fragmentation"
> even though I know that's not really it - as you say, IP
> fragmentation doesn't really happen. It's not like it's really TCP
> re-segmenting either, because one send() is not necessarily one
> segment.

Sorry, only just got round to replying...

Sadly there's no consistent name. The vendors all call it different 
things and implement it in subtly different (occasionally broken...) 
ways, and either hotly deny or proudly proclaim they're doing it, 
depending on which single basket they've put all their eggs in... ;o)

e.g. F5 make a big thing of the fact that their load balancers do local 
termination of TCP (and other) protocols, allowing them to do things 
like multiplex N client connections into M (fewer) server connections, 
while still optionally preserving client ip/port and server ip/port - 
although F5 do also have non-terminating "fast" per-packet modes.

It's variously called TCP termination, proxy and normalization. Some 
vendors use "layer 4" instead of TCP. Some incorrectly use "layer 5" or 
"layer 7" to describe their own idea of what is happening.

In my experience it is usually load-balancers that do this, although 
if/when NAT64 takes off, we may see a lot more of it, depending on 
whether vendors choose to terminate the TCP connection, or munge the MTU 
discovery / MSS options to match the payload sizes on the IPv6/IPv4 legs.

Ordinary NAT boxes tend to use a fast per-packet rewrite, rather than 
buffer TCP content.

Cheers,
Phil



From tenth at twistedmatrix.com  Wed Oct 12 13:11:00 2011
From: tenth at twistedmatrix.com (Tenth)
Date: Wed, 12 Oct 2011 15:11:00 -0400
Subject: [Twisted-Python] Boston Twisted Sprint: Last-Minute October Edition
Message-ID: <CAKJpRM2cK4d5T=1LBxbw+t98NToC+xPF5RV1eqLhOAfpRSbh6Q@mail.gmail.com>

It's been a while, but the Boston Twisted Sprint tradition will be
continued, in traditional last-minute fashion, on Saturday, October 15th

Smarterer, Inc. will generously be providing pizza, drinks, wifi, and sprint
space at their offices at 500 Harrison Avenue, Boston, from approximately
1:00 to 9:00 PM.

An Evite with more details has gone out to past Boston Twisted Sprint
attendants, but let me know if you'd like to be added to the list.

Thanks,

- Dave
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20111012/a86928f4/attachment-0001.html>

From glyph at twistedmatrix.com  Fri Oct 14 09:42:02 2011
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 14 Oct 2011 11:42:02 -0400
Subject: [Twisted-Python] Boston Twisted Sprint: Last-Minute October
	Edition
In-Reply-To: <CAKJpRM2cK4d5T=1LBxbw+t98NToC+xPF5RV1eqLhOAfpRSbh6Q@mail.gmail.com>
References: <CAKJpRM2cK4d5T=1LBxbw+t98NToC+xPF5RV1eqLhOAfpRSbh6Q@mail.gmail.com>
Message-ID: <87423E51-1A96-4641-BEE1-77C6F036458E@twistedmatrix.com>


On Oct 12, 2011, at 3:11 PM, Tenth wrote:

> It's been a while, but the Boston Twisted Sprint tradition will be continued, in traditional last-minute fashion, on Saturday, October 15th
> 
> Smarterer, Inc. will generously be providing pizza, drinks, wifi, and sprint space at their offices at 500 Harrison Avenue, Boston, from approximately 1:00 to 9:00 PM.
> 
> An Evite with more details has gone out to past Boston Twisted Sprint attendants, but let me know if you'd like to be added to the list.

REMINDER:

The sprint is tomorrow!

If you have received an invitation, please respond to it, even if you're not going.  This makes it easier for the organizers (they will know how much food to order) and easier for the person writing up the sprint report to remember who was there and who wasn't.

If you haven't, and you are in the greater Boston metro area and would like to attend the sprint, please let Tenth know so that you can be sent one.  We would love for you to show up, but we also need to send you a little extra information like how to get into the building, and who to call if you can't.  (This obviously isn't quite suitable for a public, archived mailing list.)

If you can't make it to the sprint in person, we will all be on IRC in #twisted on Freenode, and this is a great time to get tickets reviewed or look for something to work on.

Thanks, and happy sprinting!

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20111014/222267be/attachment-0001.html>

From warner at lothar.com  Sat Oct 15 13:17:09 2011
From: warner at lothar.com (Brian Warner)
Date: Sat, 15 Oct 2011 12:17:09 -0700
Subject: [Twisted-Python] ANN: Foolscap-0.6.2 released
Message-ID: <4E99DC35.6030109@lothar.com>

I'm pleased to announce the release of Foolscap-0.6.2, available from
PyPi[1], the Foolscap home page[2], and fine retail establishments
everywhere.

    Foolscap is a remote object-messaging system, built on top of
    Twisted and OpenSSL. It behaves very similar to Perspective
    Broker, but adds an object-capability security model (FURLs
    point at remote objects), more flexible serialization, and
    third-party references. Foolscap also provides support tools for
    developing distributed applications, including advanced "flight
    recorder" logging facilities, an eventual-send primitive, and
    command-line remote-service-invocation tools like "upload-file"
    and "run-command".

This release fixes an incompatibility with current Twisted trunk, which
will cause problems when the next Twisted release comes out.
(Foolscap-0.6.1 is compatible with Twisted-11.0.0, but not with trunk;
Foolscap-0.6.2 is compatible with both). It also adds some tools to run
git-over-foolscap, in case you want a more object-capability-centric way
to delegate Git repository access.

The release is signed with the new foolscap-release-signing-key[3],
0xAF1B4A2A. SHA256 hashes of the tarballs are:

 foolscap-0.6.2.tar.gz
  86741417a933f781c232db67f7961485e0348440c9d4f8b85dd5b5c4463f7efd

 foolscap-0.6.2.zip
  2a0b5faa0940ddd2986f8597739028b4be536223b60c2a8edbd23cc141949e8d

Please file bugs, patches, and feature requests on the Foolscap Trac[2].
You can also get the source code from Github[4].

Have a foolish day,
 -Brian

[1]: http://pypi.python.org/pypi/foolscap/0.6.2
[2]: http://foolscap.lothar.com/trac
[3]: http://foolscap.lothar.com/releases/foolscap-release-signing-key.asc
[4]: https://github.com/warner/foolscap



-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 259 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20111015/ae73ad2a/attachment.sig>

From exarkun at twistedmatrix.com  Sat Oct 15 22:05:22 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 16 Oct 2011 04:05:22 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1318737922.42.729613881@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20111016/4dbc9e0b/attachment.html>

From exarkun at twistedmatrix.com  Mon Oct 17 10:16:14 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 17 Oct 2011 16:16:14 -0000
Subject: [Twisted-Python] Pydoctor "ratchet"-style error reporting on
	BuildBot
Message-ID: <20111017161614.23178.761932729.divmod.xquotient.470@localhost.localdomain>

Hello Twisted developers,

You may have noticed that a little while ago I made a change to the 
documentation builder 
(<http://buildbot.twistedmatrix.com/builders/documentation>).  I changed 
it again today, and I think it now has reasonable behavior, so I thought 
I'd let everyone know what's going on.

One thing the documentation builder does is run pydoctor over Twisted 
and collect errors emitted.  Since avoiding pydoctor errors haven't been 
part of the documented, official development process, we have a lot of 
them - over 500.  The documentation builder hasn't previously reported a 
failure (ie, turned red) because of these, and it still doesn't - quite.

The documentation builder will now report a failure if there are *new* 
pydoctor errors in a build as compared to the most recent trunk build.

So if you add new pydoctor errors to trunk, the build will fail and the 
change must be reverted.

If you build a branch on the documentation builder, it will fail if the 
branch has pydoctor errors that trunk doesn't have.  Use this 
information to fix your documentation changes before submitting the 
branch for review (and certainly before merging it).

You can find a list of pydoctor errors linked from a documentation build 
page (eg 
<http://buildbot.twistedmatrix.com/builders/documentation/builds/1644>). 
Notice step 5, "api-documentation", with a link beneath it, "pydoctor 
errors".

If the builder decides there are new errors, you will also find a "new 
pydoctor errors" link immediately below the "pydoctor errors" link.

Unfortunately there is one shortcoming of the implementation of this 
feature.  If someone else fixes pydoctor errors in trunk and you have a 
branch based on an older build of trunk, those fixed-in-trunk errors 
will be considered new errors in your branch.  You can disregard such 
build failures when you build a branch on the documentation builder.

For anyone who isn't sure how to submit branch build requests to 
buildbot, see <http://labs.twistedmatrix.com/2011/09/pre-trunk- 
testing.html>.

Jean-Paul



From peter.westlake at pobox.com  Mon Oct 17 11:17:39 2011
From: peter.westlake at pobox.com (Peter Westlake)
Date: Mon, 17 Oct 2011 18:17:39 +0100
Subject: [Twisted-Python] twisted.enterprise.adbapi broken by loss of
	python-pgsql
Message-ID: <1318871859.7854.140660986956677@webmail.messagingengine.com>

The python-pgsql package, used by twisted.enterprise.adbapi to talk to
PostgreSQL, has been removed from Debian:

   http://bugs.debian.org/cgi-bin/bugreport.cgi?bug%3D577664

So far it has been removed from Unstable and Testing.

Are there any plans to fix t.e.adbapi? Or perhaps replace it
with txPostgres?

   http://twistedmatrix.com/trac/ticket/4397

Peter.



From glyph at twistedmatrix.com  Mon Oct 17 11:26:30 2011
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 17 Oct 2011 13:26:30 -0400
Subject: [Twisted-Python] twisted.enterprise.adbapi broken by loss of
	python-pgsql
In-Reply-To: <1318871859.7854.140660986956677@webmail.messagingengine.com>
References: <1318871859.7854.140660986956677@webmail.messagingengine.com>
Message-ID: <2A3E17F2-C833-477B-8A5D-CE7825332060@twistedmatrix.com>


On Oct 17, 2011, at 1:17 PM, Peter Westlake wrote:

> The python-pgsql package, used by twisted.enterprise.adbapi to talk to
> PostgreSQL,

This is inaccurate.  adbapi can talk to PostgreSQL - or any database, for that matter - using any db-api compliant driver that you pass to it.

> has been removed from Debian:
> 
>   http://bugs.debian.org/cgi-bin/bugreport.cgi?bug%3D577664

Sounds like a problem for Debian then, not Twisted.

> So far it has been removed from Unstable and Testing.
> 
> Are there any plans to fix t.e.adbapi? Or perhaps replace it
> with txPostgres?

Nothing needs to be fixed.  Even the test cases already have a PsycopgConnector in them, so this won't even decrease test coverage on Debian.

More positively: we retroactively fixed it in the past, so you have nothing to worry about now :).


From exarkun at twistedmatrix.com  Mon Oct 17 11:47:49 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 17 Oct 2011 17:47:49 -0000
Subject: [Twisted-Python] twisted.enterprise.adbapi broken by loss
	of	python-pgsql
In-Reply-To: <1318871859.7854.140660986956677@webmail.messagingengine.com>
References: <1318871859.7854.140660986956677@webmail.messagingengine.com>
Message-ID: <20111017174749.23178.738214785.divmod.xquotient.477@localhost.localdomain>

On 05:17 pm, peter.westlake at pobox.com wrote:
>The python-pgsql package, used by twisted.enterprise.adbapi to talk to
>PostgreSQL, has been removed from Debian:
>
>   http://bugs.debian.org/cgi-bin/bugreport.cgi?bug%3D577664
>
>So far it has been removed from Unstable and Testing.

You can use psycopg or pygresql.  adbapi should work with any DB-API 2.0 
compliant module.

adbapi itself doesn't specifically depend on pgsql.  It requires the 
user to specify which module to use.

Jean-Paul
>Are there any plans to fix t.e.adbapi? Or perhaps replace it
>with txPostgres?
>
>   http://twistedmatrix.com/trac/ticket/4397

Probably not.  However, some people are interesting in a native Twisted 
implementation of the PostgreSQL protocol.  So it's /possible/ that will 
appear at some point.

Jean-Paul



From itamar at itamarst.org  Mon Oct 17 13:35:53 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Mon, 17 Oct 2011 15:35:53 -0400
Subject: [Twisted-Python] Anyone interested in being release manager for
	11.1?
Message-ID: <0ea9541af436201d0427aca665585c9f.squirrel@webmail.zoteca.com>

Twisted is basically at a point where a new version can be released...
given a release manager. I'm told it's pretty automated and only takes 45
minutes or so these days.

Any volunteers?




From peter.westlake at pobox.com  Mon Oct 17 16:16:40 2011
From: peter.westlake at pobox.com (Peter Westlake)
Date: Mon, 17 Oct 2011 23:16:40 +0100
Subject: [Twisted-Python] twisted.enterprise.adbapi broken by loss of
 python-pgsql
In-Reply-To: <20111017174749.23178.738214785.divmod.xquotient.477@localhost.localdomain>
References: <1318871859.7854.140660986956677@webmail.messagingengine.com>
	<20111017174749.23178.738214785.divmod.xquotient.477@localhost.localdomain>
Message-ID: <1318889800.3632.140660987069246@webmail.messagingengine.com>

On Monday, October 17, 2011 5:47 PM, exarkun at twistedmatrix.com wrote:
> On 05:17 pm, peter.westlake at pobox.com wrote:
> >The python-pgsql package, used by twisted.enterprise.adbapi to talk to
> >PostgreSQL, has been removed from Debian:
> >
> >   http://bugs.debian.org/cgi-bin/bugreport.cgi?bug%3D577664
> >
> >So far it has been removed from Unstable and Testing.
> 
> You can use psycopg or pygresql.  adbapi should work with any DB-API 2.0 
> compliant module.
> 
> adbapi itself doesn't specifically depend on pgsql.  It requires the 
> user to specify which module to use.

Oh, I see! I saw the error message coming from t.e.a and deduced,
wrongly, that it imported it directly! The fact that the Debian
python-twisted package doesn't depend on python-pgsql should
have given me a clue.

Thank you for the retroactive fix!

Peter.

-- 
"Neutrinos travelling faster than light? I didn't see that coming!"



From member at linkedin.com  Tue Oct 18 05:52:15 2011
From: member at linkedin.com (Mike Meng via LinkedIn)
Date: Tue, 18 Oct 2011 11:52:15 +0000 (UTC)
Subject: [Twisted-Python] Invitation to connect on LinkedIn
Message-ID: <849964712.8410180.1318938735684.JavaMail.app@ela4-bed82.prod>

LinkedIn
------------




    Mike Meng requested to add you as a connection on LinkedIn:
  
------------------------------------------

Shaohui,

I'd like to add you to my professional network on LinkedIn.

Accept invitation from Mike  Meng
http://www.linkedin.com/e/-b9k943-gtwu2hq9-15/UGoRR-kmaZN3cQCGtaNE-BBynaTgDBi6TGSB-kimZG9krgZr/blk/I98119692_140/1BpC5vrmRLoRZcjkkZt5YCpnlOt3RApnhMpmdzgmhxrSNBszYMd35vczASej4Ne3B9bQZ2qChmq49TbPoQe30UdjwVdjgLrCBxbOYWrSlI/EML_comm_afe/?hs=false&tok=27JJqJpR5Er4Y1

View profile of Mike Meng
http://www.linkedin.com/e/-b9k943-gtwu2hq9-15/rsn/147374420/84sJ/?hs=false&tok=0rY8EV071Er4Y1
------------------------------------------

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20111018/21ae6a21/attachment.html>

From member at linkedin.com  Tue Oct 18 05:56:53 2011
From: member at linkedin.com (Mike Meng via LinkedIn)
Date: Tue, 18 Oct 2011 11:56:53 +0000 (UTC)
Subject: [Twisted-Python] Invitation to connect on LinkedIn
Message-ID: <2017253386.8413497.1318939013348.JavaMail.app@ela4-bed84.prod>

LinkedIn
------------




    Mike Meng requested to add you as a connection on LinkedIn:
  
------------------------------------------

Shaohui,

I'd like to add you to my professional network on LinkedIn.

Accept invitation from Mike  Meng
http://www.linkedin.com/e/-b9k943-gtwu8fz5-2p/UGoRR-kmaZN3cQCGtaNE-BBynaTgDBi6TGSB-kimZG9krgZr/blk/I98123922_140/1BpC5vrmRLoRZcjkkZt5YCpnlOt3RApnhMpmdzgmhxrSNBszYMd35vcz8VcP8Ne3B9bQZ2qChmq49TbPoQe30UdjwVdjgLrCBxbOYWrSlI/EML_comm_afe/?hs=false&tok=0UmiO9FaFIr4Y1

View profile of Mike Meng
http://www.linkedin.com/e/-b9k943-gtwu8fz5-2p/rsn/147374420/84sJ/?hs=false&tok=0-pP0betlIr4Y1
------------------------------------------

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20111018/f5655d47/attachment.html>

From dynamicgl at gmail.com  Tue Oct 18 11:11:47 2011
From: dynamicgl at gmail.com (gelin yan)
Date: Wed, 19 Oct 2011 01:11:47 +0800
Subject: [Twisted-Python] Anyone interested in being release manager for
	11.1?
In-Reply-To: <0ea9541af436201d0427aca665585c9f.squirrel@webmail.zoteca.com>
References: <0ea9541af436201d0427aca665585c9f.squirrel@webmail.zoteca.com>
Message-ID: <CABkOF6SSx17ogswKcKhGSoRO3W=7--QKjgQhDCaJ7mHUWQDmcQ@mail.gmail.com>

any tutorial for how to be a release manager?

On Tue, Oct 18, 2011 at 3:35 AM, Itamar Turner-Trauring <itamar at itamarst.org
> wrote:

> Twisted is basically at a point where a new version can be released...
> given a release manager. I'm told it's pretty automated and only takes 45
> minutes or so these days.
>
> Any volunteers?
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20111019/5dddc0fc/attachment.html>

From jml at mumak.net  Tue Oct 18 11:14:07 2011
From: jml at mumak.net (Jonathan Lange)
Date: Tue, 18 Oct 2011 18:14:07 +0100
Subject: [Twisted-Python] Anyone interested in being release manager for
	11.1?
In-Reply-To: <CABkOF6SSx17ogswKcKhGSoRO3W=7--QKjgQhDCaJ7mHUWQDmcQ@mail.gmail.com>
References: <0ea9541af436201d0427aca665585c9f.squirrel@webmail.zoteca.com>
	<CABkOF6SSx17ogswKcKhGSoRO3W=7--QKjgQhDCaJ7mHUWQDmcQ@mail.gmail.com>
Message-ID: <CAHZ8tnaxMAJj9gz_Mdj-He3nQm35_QBo+9C2qPmt=3UGYwpHKA@mail.gmail.com>

On Tue, Oct 18, 2011 at 6:11 PM, gelin yan <dynamicgl at gmail.com> wrote:
> any tutorial for how to be a release manager?
>

<http://twistedmatrix.com/trac/wiki/ReleaseProcess> just about covers it.

jml



From agasson at red-elvis.net  Tue Oct 18 11:20:15 2011
From: agasson at red-elvis.net (=?iso-8859-1?Q?Andr=E9s_Gasson?=)
Date: Tue, 18 Oct 2011 19:20:15 +0200
Subject: [Twisted-Python] Anyone interested in being release manager for
	11.1?
In-Reply-To: <CAHZ8tnaxMAJj9gz_Mdj-He3nQm35_QBo+9C2qPmt=3UGYwpHKA@mail.gmail.com>
References: <0ea9541af436201d0427aca665585c9f.squirrel@webmail.zoteca.com>
	<CABkOF6SSx17ogswKcKhGSoRO3W=7--QKjgQhDCaJ7mHUWQDmcQ@mail.gmail.com>
	<CAHZ8tnaxMAJj9gz_Mdj-He3nQm35_QBo+9C2qPmt=3UGYwpHKA@mail.gmail.com>
Message-ID: <32DED3E9-049E-4EFE-BAAC-1F2663E4868D@red-elvis.net>

I don't meet many of the prerequisites (none actually)  - but seeing Im now recently unemployed I can offer a hand to anyone who does have the prerequisites

Commit privileges to Twisted
Shell access to cube.twistedmatrix.com
XXX: Possibly this ought to be permission to log in as www-data
Write permissions to /srv/www-data/twisted on cube (normally, www-data membership)
Write permissions to /srv/www-data/website/vhosts/twistedmatrix.com/documents
Permissions to edit WikiStart
Channel operator permissions for #twisted
Admin privileges for Twisted's PyPI packages
Membership of  https://launchpad.net/~twisted-dev
Contributor status for  http://labs.twistedmatrix.com
Cheers Gas
On 18/10/2011, at 7:14 PM, Jonathan Lange wrote:

> On Tue, Oct 18, 2011 at 6:11 PM, gelin yan <dynamicgl at gmail.com> wrote:
>> any tutorial for how to be a release manager?
>> 
> 
> <http://twistedmatrix.com/trac/wiki/ReleaseProcess> just about covers it.
> 
> jml
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20111018/daa242d9/attachment.html>

From solipsis at pitrou.net  Wed Oct 19 05:50:33 2011
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Wed, 19 Oct 2011 13:50:33 +0200
Subject: [Twisted-Python] Twisted for Python 3
Message-ID: <20111019135033.6b40e5ba@pitrou.net>


Hello,

I'm announcing an experimental, work-in-progress port of Twisted to
Python 3. The homepage, where you can find more detailed information,
is at https://bitbucket.org/pitrou/t3k

First step is to have core functionality (basic infrastructure, the
various reactors, transports, etc.) working. This is test-driven, since
Twisted has mostly excellent coverage. We are pretty much there. The
current status is:

The following tests pass:

    All of twisted/internet/test/*
    All of twisted/trial/test/*
    All of twisted/python/test/*
    Some of twisted/test: including test_amp, test_application,
    test_banana, test_defer, test_defgen, test_internet, test_jelly,
    test_log, test_logfile, test_paths, test_pb, test_persisted,
    test_protocols, test_ssl, test_sslverify, test_tcp, test_threads,
    test_threadpool, test_twistd, test_udp, test_unix... 

The following scripts are known to work:

    trial
    twistd

Feedback and contributions welcome. If you are interested in helping,
please go and read the link above, it will give you suggestions.

Regards

Antoine.





From _ at lvh.cc  Wed Oct 19 06:10:03 2011
From: _ at lvh.cc (Laurens Van Houtven)
Date: Wed, 19 Oct 2011 14:10:03 +0200
Subject: [Twisted-Python] Twisted for Python 3
In-Reply-To: <20111019135033.6b40e5ba@pitrou.net>
References: <20111019135033.6b40e5ba@pitrou.net>
Message-ID: <CAE_Hg6Z35W6VDM3VOpNMo0JKwVFkCwzpPqRQVeXCRv8-J=XA=w@mail.gmail.com>

Woo! Exciting :)

I'm surprised trial works. Wasn't there still a problem left with trial
related to unbound methods going away (and the replacing functions not
having a reference to the class they belong to...)? Something in t.python
that gets things based on their name, I thought... Oh well, if it works it
works.

Thank you very much for your efforts,
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20111019/8a8e4f22/attachment.html>

From solipsis at pitrou.net  Wed Oct 19 06:12:46 2011
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Wed, 19 Oct 2011 14:12:46 +0200
Subject: [Twisted-Python] Twisted for Python 3
References: <20111019135033.6b40e5ba@pitrou.net>
	<CAE_Hg6Z35W6VDM3VOpNMo0JKwVFkCwzpPqRQVeXCRv8-J=XA=w@mail.gmail.com>
Message-ID: <20111019141246.17d136bf@pitrou.net>

On Wed, 19 Oct 2011 14:10:03 +0200
Laurens Van Houtven <_ at lvh.cc> wrote:
> Woo! Exciting :)
> 
> I'm surprised trial works. Wasn't there still a problem left with trial
> related to unbound methods going away (and the replacing functions not
> having a reference to the class they belong to...)? Something in t.python
> that gets things based on their name, I thought...

Yes, there was. I added a small hack so that it works (and so that I
can run individual test cases from the command line :-)).

Regards

Antoine.





From itamar at itamarst.org  Wed Oct 19 07:25:14 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 19 Oct 2011 09:25:14 -0400
Subject: [Twisted-Python] Twisted for Python 3
In-Reply-To: <20111019135033.6b40e5ba@pitrou.net>
References: <20111019135033.6b40e5ba@pitrou.net>
Message-ID: <1319030714.1979.2.camel@blake>

On Wed, 2011-10-19 at 13:50 +0200, Antoine Pitrou wrote:
> Hello,
> 
> I'm announcing an experimental, work-in-progress port of Twisted to
> Python 3. The homepage, where you can find more detailed information,
> is at https://bitbucket.org/pitrou/t3k

Cool! Any patches you can submit to us that would make the code more
Python 3 compatible, while not breaking Python 2.5 and later, would make
your life easier going forward.

I notice you have banana getting extra op code for bytes... I think a
better solution is to use existing 'string' op code for bytes, and
rejecting unicode strings. What banana calls 'string' *is* bytes, it
doesn't support unicode:

http://twistedmatrix.com/documents/current/core/specifications/banana.html

In general, anywhere existing Twisted code uses a Python 2 normal
string, you should have the Python 3 version only accept bytes.




From itamar at itamarst.org  Wed Oct 19 07:39:41 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 19 Oct 2011 09:39:41 -0400
Subject: [Twisted-Python] Did twisted-commits list break?
Message-ID: <1319031581.1979.3.camel@blake>

I'm not getting updates.

-Itamar




From itamar at itamarst.org  Wed Oct 19 07:41:36 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 19 Oct 2011 09:41:36 -0400
Subject: [Twisted-Python] Twisted for Python 3
In-Reply-To: <1319030714.1979.2.camel@blake>
References: <20111019135033.6b40e5ba@pitrou.net>
	<1319030714.1979.2.camel@blake>
Message-ID: <1319031696.1979.4.camel@blake>

On Wed, 2011-10-19 at 09:25 -0400, Itamar Turner-Trauring wrote:

> I notice you have banana getting extra op code for bytes... I think a
> better solution is to use existing 'string' op code for bytes, and
> rejecting unicode strings.

Just to emphasize this: the current solution of having a new opcode for
bytes makes Perspective Broker on Python 3 incompatible with PB on
Python 2.




From solipsis at pitrou.net  Wed Oct 19 07:49:28 2011
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Wed, 19 Oct 2011 15:49:28 +0200
Subject: [Twisted-Python] Twisted for Python 3
References: <20111019135033.6b40e5ba@pitrou.net>
	<1319030714.1979.2.camel@blake>
Message-ID: <20111019154928.1f7382d0@pitrou.net>

On Wed, 19 Oct 2011 09:25:14 -0400
Itamar Turner-Trauring <itamar at itamarst.org> wrote:
> 
> Cool! Any patches you can submit to us that would make the code more
> Python 3 compatible, while not breaking Python 2.5 and later, would make
> your life easier going forward.

Yes, I've started doing that. However, the extent of these patches is
quite limited.
Most changes I have to make have to do with introducing bytes literals,
or fixing specific issues under Python 3. For example, I could post the
following patch for t.p.failure, but would you accept it?

@@ -464,6 +468,14 @@ class Failure:
         # added 2003-06-23. See comment above in __init__
         c['tb'] = None
 
+        try:
+            # Clear other references held by exception objects
+            c['value'].__cause__ = None
+            c['value'].__context__ = None
+            c['value'].__traceback__ = None
+        except AttributeError:
+            pass
+
         if self.stack is not None:
             # XXX: This is a band-aid.  I can't figure out where these
             # (failure.stack is None) instances are coming from.

> I notice you have banana getting extra op code for bytes... I think a
> better solution is to use existing 'string' op code for bytes, and
> rejecting unicode strings. What banana calls 'string' *is* bytes, it
> doesn't support unicode:

Indeed, this is debatable. But generally, marshalling libraries have to
evolve a bit when ported to Python 3. There's no way the semantic gap
between 2.x and 3.x can be ignored.

I think banana in 3.x *has* to support both types. str is a fundamental
type in 3.x (think that class names, function names, filenames, etc.
all are str by default) and not supporting it in a marshalling library
would be pretty much awkward. bytes is fundamental in a networking
library and not supporting it would be similarly awkward :)

Moreover, 3.x has a natural preference for unicode strings while
2.x has a natural preference for 8-bit strings. Where high-level
data is handled, Python 3 users will expect to use str object, not bytes
objects, for text data (if you marshal e.g. a class name, you don't
expect it to come out as bytes... and neither would Perspective
Broker, I guess). Str objects also have more features, which make them
more amenable to parsing and formatting.

That's why I think translating the "string" type to 3.x str objects is
what users would expect in practice. This is also the decision
taken in the standard pickle module: if you unpickle a 2.x pickle
containing str objects, you get 3.x str objects (not bytes).

> In general, anywhere existing Twisted code uses a Python 2 normal
> string, you should have the Python 3 version only accept bytes.

Due to the aforementioned differences, I don't think that's as simple.
For example, filenames are pretty much str (unicode) by default in
Python 3, even though you can also use bytes (but it's discouraged
under Windows). Command-line arguments are also str, as are many other
things. And I'll think you'll agree that it's more natural to ask for
the HTTP "GET" method than for the b"GET" method.

(no, I haven't started on twisted.web yet)

Regards

Antoine.





From solipsis at pitrou.net  Wed Oct 19 08:00:06 2011
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Wed, 19 Oct 2011 16:00:06 +0200
Subject: [Twisted-Python] Twisted for Python 3
References: <20111019135033.6b40e5ba@pitrou.net>
	<1319030714.1979.2.camel@blake> <1319031696.1979.4.camel@blake>
Message-ID: <20111019160006.7196ab5c@pitrou.net>

On Wed, 19 Oct 2011 09:41:36 -0400
Itamar Turner-Trauring <itamar at itamarst.org> wrote:
> On Wed, 2011-10-19 at 09:25 -0400, Itamar Turner-Trauring wrote:
> 
> > I notice you have banana getting extra op code for bytes... I think a
> > better solution is to use existing 'string' op code for bytes, and
> > rejecting unicode strings.
> 
> Just to emphasize this: the current solution of having a new opcode for
> bytes makes Perspective Broker on Python 3 incompatible with PB on
> Python 2.

Or rather, they're compatible until you use Python 3 bytes objects.

(and I think any RPC system will have the same issues between 2.x and
3.x, regardless of whether it's based on pickle, json or even protocol
buffers)

This probably deserves more thinking. I took the most natural approach
for Python 3. The solution you are proposing (not supporting the 3.x
"str" type) would be, IMHO, worse, because the str type is fundamental
and basically no idiomatic Python 3 code could work.

Regards

Antoine.





From exarkun at twistedmatrix.com  Wed Oct 19 08:26:22 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 19 Oct 2011 14:26:22 -0000
Subject: [Twisted-Python] Did twisted-commits list break?
In-Reply-To: <1319031581.1979.3.camel@blake>
References: <1319031581.1979.3.camel@blake>
Message-ID: <20111019142622.23178.574822930.divmod.xquotient.510@localhost.localdomain>

On 01:39 pm, itamar at itamarst.org wrote:
>I'm not getting updates.

Yes.  Ages and ages ago.

Trac has an RSS feed of svn changesets.  RSS is the new email.

Jean-Paul



From exarkun at twistedmatrix.com  Wed Oct 19 08:29:17 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 19 Oct 2011 14:29:17 -0000
Subject: [Twisted-Python] Twisted for Python 3
In-Reply-To: <20111019154928.1f7382d0@pitrou.net>
References: <20111019135033.6b40e5ba@pitrou.net>
	<1319030714.1979.2.camel@blake>
	<20111019154928.1f7382d0@pitrou.net>
Message-ID: <20111019142917.23178.966512156.divmod.xquotient.514@localhost.localdomain>

On 01:49 pm, solipsis at pitrou.net wrote:
>On Wed, 19 Oct 2011 09:25:14 -0400
>Itamar Turner-Trauring <itamar at itamarst.org> wrote:
>>
>[snip]
>
>Indeed, this is debatable. But generally, marshalling libraries have to
>evolve a bit when ported to Python 3. There's no way the semantic gap
>between 2.x and 3.x can be ignored.
>
>I think banana in 3.x *has* to support both types. str is a fundamental
>type in 3.x (think that class names, function names, filenames, etc.
>all are str by default) and not supporting it in a marshalling library
>would be pretty much awkward. bytes is fundamental in a networking
>library and not supporting it would be similarly awkward :)

Unicode is handled by Jelly.  The only thing Banana does is turn objects 
into bytes to put into a socket and vice versa.  Text in Python 3 will 
be handled the same way as text in Python 2: jelly will UTF-8 encode it 
before handing it to banana.

Jean-Paul



From itamar at itamarst.org  Wed Oct 19 08:37:59 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 19 Oct 2011 10:37:59 -0400
Subject: [Twisted-Python] Twisted for Python 3
In-Reply-To: <20111019154928.1f7382d0@pitrou.net>
References: <20111019135033.6b40e5ba@pitrou.net>
	<1319030714.1979.2.camel@blake> <20111019154928.1f7382d0@pitrou.net>
Message-ID: <1319035079.1979.7.camel@blake>

On Wed, 2011-10-19 at 15:49 +0200, Antoine Pitrou wrote:

> I think banana in 3.x *has* to support both types. str is a fundamental
> type in 3.x (think that class names, function names, filenames, etc.
> all are str by default) and not supporting it in a marshalling library
> would be pretty much awkward. bytes is fundamental in a networking
> library and not supporting it would be similarly awkward :)

I'm pretty sure we did unicode support on the Jelly level, *above*
Banana. If we didn't, then we should. But that's the natural place to do
Unicode, not in the low-level protocol. So I don't think banana should
change.

In any case, I'd rather developers have to do a little bit of extra work
being compatible across Python versions (being careful about bytes vs.
strings), as opposed to the current solution, which makes it impossible
to be compatible because it's essentially a different protocol.




From itamar at itamarst.org  Wed Oct 19 08:43:21 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 19 Oct 2011 10:43:21 -0400
Subject: [Twisted-Python] Twisted for Python 3
In-Reply-To: <20111019154928.1f7382d0@pitrou.net>
References: <20111019135033.6b40e5ba@pitrou.net>
	<1319030714.1979.2.camel@blake> <20111019154928.1f7382d0@pitrou.net>
Message-ID: <1319035401.1979.9.camel@blake>

On Wed, 2011-10-19 at 15:49 +0200, Antoine Pitrou wrote:

> This is also the decision
> taken in the standard pickle module: if you unpickle a 2.x pickle
> containing str objects, you get 3.x str objects (not bytes).

That decision is wrong. It's corrupting users' data, though arguably
it's your own fault if you actually rely on pickle.




From itamar at itamarst.org  Wed Oct 19 08:56:39 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 19 Oct 2011 10:56:39 -0400
Subject: [Twisted-Python] Twisted for Python 3
In-Reply-To: <1319035079.1979.7.camel@blake>
References: <20111019135033.6b40e5ba@pitrou.net>
	<1319030714.1979.2.camel@blake> <20111019154928.1f7382d0@pitrou.net>
	<1319035079.1979.7.camel@blake>
Message-ID: <1319036199.1979.11.camel@blake>

On Wed, 2011-10-19 at 10:37 -0400, Itamar Turner-Trauring wrote:

> In any case, I'd rather developers have to do a little bit of extra work
> being compatible across Python versions (being careful about bytes vs.
> strings), as opposed to the current solution, which makes it impossible
> to be compatible because it's essentially a different protocol.

This is what I had to do for the Java version of Banana, BTW (use
bytearrays, even though Strings are easier) in order to be compatible
with the Python 2 version.




From solipsis at pitrou.net  Wed Oct 19 09:09:01 2011
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Wed, 19 Oct 2011 17:09:01 +0200
Subject: [Twisted-Python] Twisted for Python 3
References: <20111019135033.6b40e5ba@pitrou.net>
	<1319030714.1979.2.camel@blake>
	<20111019154928.1f7382d0@pitrou.net>
	<20111019142917.23178.966512156.divmod.xquotient.514@localhost.localdomain>
Message-ID: <20111019170901.1ed7d8ee@pitrou.net>

On Wed, 19 Oct 2011 14:29:17 -0000
exarkun at twistedmatrix.com wrote:
> On 01:49 pm, solipsis at pitrou.net wrote:
> >On Wed, 19 Oct 2011 09:25:14 -0400
> >Itamar Turner-Trauring <itamar at itamarst.org> wrote:
> >>
> >[snip]
> >
> >Indeed, this is debatable. But generally, marshalling libraries have to
> >evolve a bit when ported to Python 3. There's no way the semantic gap
> >between 2.x and 3.x can be ignored.
> >
> >I think banana in 3.x *has* to support both types. str is a fundamental
> >type in 3.x (think that class names, function names, filenames, etc.
> >all are str by default) and not supporting it in a marshalling library
> >would be pretty much awkward. bytes is fundamental in a networking
> >library and not supporting it would be similarly awkward :)
> 
> Unicode is handled by Jelly.  The only thing Banana does is turn objects 
> into bytes to put into a socket and vice versa.  Text in Python 3 will 
> be handled the same way as text in Python 2: jelly will UTF-8 encode it 
> before handing it to banana.

Hmm, ok, I will take another look then.

Regards

Antoine.





From solipsis at pitrou.net  Wed Oct 19 09:12:04 2011
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Wed, 19 Oct 2011 17:12:04 +0200
Subject: [Twisted-Python] Twisted for Python 3
References: <20111019135033.6b40e5ba@pitrou.net>
	<1319030714.1979.2.camel@blake>
	<20111019154928.1f7382d0@pitrou.net>
	<1319035401.1979.9.camel@blake>
Message-ID: <20111019171204.23742291@pitrou.net>

On Wed, 19 Oct 2011 10:43:21 -0400
Itamar Turner-Trauring <itamar at itamarst.org> wrote:
> On Wed, 2011-10-19 at 15:49 +0200, Antoine Pitrou wrote:
> 
> > This is also the decision
> > taken in the standard pickle module: if you unpickle a 2.x pickle
> > containing str objects, you get 3.x str objects (not bytes).
> 
> That decision is wrong. It's corrupting users' data, though arguably
> it's your own fault if you actually rely on pickle.

No matter how you decide to handle the transition, there will be
incompatibilities when transitioning between different data models.
Relying on a pickle is no different than relying on a JSON tree, an AMP
box or anything else.

Mapping the natural 2.x string type to the natural 3.x string type was
a reasonable decision in that context.

Regards

Antoine.





From itamar at itamarst.org  Wed Oct 19 09:36:59 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 19 Oct 2011 11:36:59 -0400
Subject: [Twisted-Python] Twisted for Python 3
In-Reply-To: <20111019170901.1ed7d8ee@pitrou.net>
References: <20111019135033.6b40e5ba@pitrou.net>
	<1319030714.1979.2.camel@blake> <20111019154928.1f7382d0@pitrou.net>
	<20111019142917.23178.966512156.divmod.xquotient.514@localhost.localdomain>
	<20111019170901.1ed7d8ee@pitrou.net>
Message-ID: <635f8410c535780cf52d6cdfc39c7e7c.squirrel@webmail.zoteca.com>

More generally, any place Twisted currently uses strings (i.e. byte
strings, as they all are in Python 2), the default should be bytes in
Python 3.x. When we switch to a minimum version of Python that has bytes
support we should start being more explicit about this and using the b""
syntax to emphasize this.

For example: Protocol.dataReceived, transport.write, protocol constants...
all should be bytes.

There are some places that probably should be unicode like FilePath,
although perhaps that's easier if we merge the unicode support branch.
There might be other places where a high-level API might choose to accept
unicode to make things easier (e.g. "GET" for web requests, as you said).
But in general, bytes should be the default because bytes is what network
programming is about.




From solipsis at pitrou.net  Wed Oct 19 09:40:44 2011
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Wed, 19 Oct 2011 17:40:44 +0200
Subject: [Twisted-Python] Twisted for Python 3
References: <20111019135033.6b40e5ba@pitrou.net>
	<1319030714.1979.2.camel@blake>
	<20111019154928.1f7382d0@pitrou.net>
	<20111019142917.23178.966512156.divmod.xquotient.514@localhost.localdomain>
	<20111019170901.1ed7d8ee@pitrou.net>
	<635f8410c535780cf52d6cdfc39c7e7c.squirrel@webmail.zoteca.com>
Message-ID: <20111019174044.435cfaf4@pitrou.net>

On Wed, 19 Oct 2011 11:36:59 -0400
"Itamar Turner-Trauring" <itamar at itamarst.org> wrote:
> More generally, any place Twisted currently uses strings (i.e. byte
> strings, as they all are in Python 2), the default should be bytes in
> Python 3.x.

As I already answered, it is not as simple. Idiomatic use of
bytes/unicode is not the same in 2.x as it is in 3.x.

> For example: Protocol.dataReceived, transport.write, protocol constants...

Agreed. But we are talking about data decoded by a protocol here.

Regards

Antoine.





From itamar at itamarst.org  Wed Oct 19 10:38:58 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 19 Oct 2011 12:38:58 -0400
Subject: [Twisted-Python] Twisted for Python 3
In-Reply-To: <20111019174044.435cfaf4@pitrou.net>
References: <20111019135033.6b40e5ba@pitrou.net>
	<1319030714.1979.2.camel@blake> <20111019154928.1f7382d0@pitrou.net>
	<20111019142917.23178.966512156.divmod.xquotient.514@localhost.localdomain>
	<20111019170901.1ed7d8ee@pitrou.net>
	<635f8410c535780cf52d6cdfc39c7e7c.squirrel@webmail.zoteca.com>
	<20111019174044.435cfaf4@pitrou.net>
Message-ID: <bf1f905ab0d11fe852b2999e4d94ffbe.squirrel@webmail.zoteca.com>

> Agreed. But we are talking about data decoded by a protocol here.

Banana is very low-level in the PB stack, and is explicitly designed to
send bytes, not unicode. It's Jelly that does unicode, and even there you
shouldn't need to change anything.

If the protocol decodes to bytes in Python 2, you should keep it as bytes.
E.g. twisted.web.client.getPage result should fire with bytes, not unicode
(downloading a JPEG and then decoding it to unicode isn't that useful).
For many old protocol it's not even possible to know what encoding will
work, and potentially it might use multiple different encodings in
different situations, and if you just pick UTF-8 you'll make the library
unusable for some people.




From itamar at itamarst.org  Wed Oct 19 11:10:22 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 19 Oct 2011 13:10:22 -0400
Subject: [Twisted-Python] Twisted for Python 3
In-Reply-To: <20111019154928.1f7382d0@pitrou.net>
References: <20111019135033.6b40e5ba@pitrou.net>
	<1319030714.1979.2.camel@blake> <20111019154928.1f7382d0@pitrou.net>
Message-ID: <5a82faf6b1c4b560a92cddb9ea0f3a10.squirrel@webmail.zoteca.com>

> For example, I could post the
> following patch for t.p.failure, but would you accept it?
>
> @@ -464,6 +468,14 @@ class Failure:
>          # added 2003-06-23. See comment above in __init__
>          c['tb'] = None
>
> +        try:
> +            # Clear other references held by exception objects
> +            c['value'].__cause__ = None
> +            c['value'].__context__ = None
> +            c['value'].__traceback__ = None
> +        except AttributeError:
> +            pass
> +
>          if self.stack is not None:
>              # XXX: This is a band-aid.  I can't figure out where these
>              # (failure.stack is None) instances are coming from.

That sort of patch would probably be fine, though I'd much rather that be
inside an if statement that checked the Python version rather than inside
a try/except. Faster, and much clearer what's going on.




From eric at teratorn.org  Wed Oct 19 11:17:33 2011
From: eric at teratorn.org (Eric P. Mangold)
Date: Wed, 19 Oct 2011 17:17:33 +0000
Subject: [Twisted-Python] libamp - A C library implementation of AMP
Message-ID: <20111019171733.GF13626@localhost.localdomain>

Hello,

Peter le Bek and I have been working on a C library implementation
of AMP for about 4 months now, and I was hoping to get some feedback
and constructive criticism prior to a release. And I need help answering
one big question (below).

http://amp-protocol.net/Libamp

libamp is currently quite usable, for clients and servers, and is geared
towards being used with an async I/O library such as libevent, but it
could also be driving with synchronous I/O if there was some reason to.

And we have very good test coverage! The test suite runs valgrind-clean
and includes malloc()-failure tests, so pretty much all error-handling
cases are covered and won't leak memory.

http://teratorn.org/code/libamp/html_coverage/code/libamp/index.html

A number of basic AMP types are currently supported, but support for
more advanced types, like DateTime, Decimal, ListOf and AmpList is still
needed.

The best way to get a feel for the current API would be to read the
example programs, e.g.:

http://teratorn.org/code/darcsweb/darcsweb.cgi?r=libamp;a=headblob;f=/examples/asyncserver.c
http://teratorn.org/code/darcsweb/darcsweb.cgi?r=libamp;a=headblob;f=/examples/sumclient.c

and have a look at amp.h:

http://teratorn.org/code/darcsweb/darcsweb.cgi?r=libamp;a=headblob;f=/amp.h

The API centers around AMP_Proto objects, which you create for each AMP
peer you're talking to. An AMP_Proto includes a function pointer, which you
set with amp_set_write_handler(), that knows how to deliver (or queue)
bytes to the other side (be in stdout, a socket, etc).

Then you may use amp_call() to call remote commands. When new bytes come
in, e.g. via libevent, you drive the AMP_Proto with a call to
amp_consume_bytes() which parses the incoming data and performs
callbacks to 1) deliver the result of a previous amp_call() 2) invoke a
registered responder for a command.

amp_add_responder() adds a callback function for handling specific AMP
command requests.

The basic API for actually handling a command request, or for
constructing a response, is low-level, but usable - which leads up to
the big question I'm trying to answer:

Does AMP need a declarative syntax for defining AMP commands? Think e.g.
protobuf's .proto files.

With libamp you deal directly with AMP boxes - sets of key/value pairs,
and you need to manually verify that a command was called with all of
the keys that it expects, and that the values given coerce to the
type of data you expect. Viewing amp.h and the examples, you can see how
 the amp_put_*() and amp_get_*() family of functions is used to encode
 and decode C types to and from AMP_Box's.

This isn't terribly difficult and works well enough in the simple
example programs, but I feel there must be a better way, that alleviates
some of the manual error checking.

Right now I'm leaning toward coming up with some kind of .amp file
format, and an `ampc' tool to compile it to C/libamp code.

Support for .amp files could be added in Twisted, and you could then
share Command declarations between clients and servers written in
different languages.

What about the next step of declaring AMP "services" - a set of Commands
available via a known URL. Why do crummy web-services get to
have all the fun?

All thoughts and suggestions are welcome.

    -Eric


P.S. Anyone wanting to help with the C code is free to join #amp on
Freenode and lend a hand. It could use a once-over by folks familiar
with writing C libraries and best-practices thereof.



From solipsis at pitrou.net  Wed Oct 19 11:22:19 2011
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Wed, 19 Oct 2011 19:22:19 +0200
Subject: [Twisted-Python] Twisted for Python 3
References: <20111019135033.6b40e5ba@pitrou.net>
	<1319030714.1979.2.camel@blake>
	<20111019154928.1f7382d0@pitrou.net>
	<5a82faf6b1c4b560a92cddb9ea0f3a10.squirrel@webmail.zoteca.com>
Message-ID: <20111019192219.64a5facd@pitrou.net>

On Wed, 19 Oct 2011 13:10:22 -0400
"Itamar Turner-Trauring" <itamar at itamarst.org> wrote:
> > For example, I could post the
> > following patch for t.p.failure, but would you accept it?
> >
> > @@ -464,6 +468,14 @@ class Failure:
> >          # added 2003-06-23. See comment above in __init__
> >          c['tb'] = None
> >
> > +        try:
> > +            # Clear other references held by exception objects
> > +            c['value'].__cause__ = None
> > +            c['value'].__context__ = None
> > +            c['value'].__traceback__ = None
> > +        except AttributeError:
> > +            pass
> > +
> >          if self.stack is not None:
> >              # XXX: This is a band-aid.  I can't figure out where these
> >              # (failure.stack is None) instances are coming from.
> 
> That sort of patch would probably be fine, though I'd much rather that be
> inside an if statement that checked the Python version rather than inside
> a try/except. Faster, and much clearer what's going on.

The try/except is necessary because Failures sometimes wrap something
else than an exception, and where setting an arbitrary attribute is not
allowed.

Regards

Antoine.





From glyph at twistedmatrix.com  Wed Oct 19 11:46:57 2011
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 19 Oct 2011 13:46:57 -0400
Subject: [Twisted-Python] Twisted for Python 3
In-Reply-To: <20111019192219.64a5facd@pitrou.net>
References: <20111019135033.6b40e5ba@pitrou.net>
	<1319030714.1979.2.camel@blake>
	<20111019154928.1f7382d0@pitrou.net>
	<5a82faf6b1c4b560a92cddb9ea0f3a10.squirrel@webmail.zoteca.com>
	<20111019192219.64a5facd@pitrou.net>
Message-ID: <4A1F76A3-E9CA-4314-9757-0E405CDC5DC6@twistedmatrix.com>


On Oct 19, 2011, at 1:22 PM, Antoine Pitrou wrote:

> On Wed, 19 Oct 2011 13:10:22 -0400
> "Itamar Turner-Trauring" <itamar at itamarst.org> wrote:
>>> For example, I could post the
>>> following patch for t.p.failure, but would you accept it?
>>> 
>>> @@ -464,6 +468,14 @@ class Failure:
>>>         # added 2003-06-23. See comment above in __init__
>>>         c['tb'] = None
>>> 
>>> +        try:
>>> +            # Clear other references held by exception objects
>>> +            c['value'].__cause__ = None
>>> +            c['value'].__context__ = None
>>> +            c['value'].__traceback__ = None
>>> +        except AttributeError:
>>> +            pass
>>> +
>>>         if self.stack is not None:
>>>             # XXX: This is a band-aid.  I can't figure out where these
>>>             # (failure.stack is None) instances are coming from.
>> 
>> That sort of patch would probably be fine, though I'd much rather that be
>> inside an if statement that checked the Python version rather than inside
>> a try/except. Faster, and much clearer what's going on.
> 
> The try/except is necessary because Failures sometimes wrap something
> else than an exception, and where setting an arbitrary attribute is not
> allowed.

This patch would definitely need to be accepted if you expect Twisted to eventually support Python 3.  Why do you believe it wouldn't be accepted?

Of course it would need to have some test coverage - but a first step there is to have a buildbot actually running the tests on py3k.

Also: if Failures wrap something other than an Exception, that's a bug.  in Failure.__doc__, it says: "@ivar value: The exception instance responsible for this failure."  If there are cases where non-Exceptions are passed here, then perhaps that behavior should be deprecated before it raises an exception, but something needs to be adjusted so that the documentation is consistent with the implementation.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20111019/7920e393/attachment.html>

From glyph at twistedmatrix.com  Wed Oct 19 12:50:41 2011
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 19 Oct 2011 14:50:41 -0400
Subject: [Twisted-Python] Twisted for Python 3
In-Reply-To: <20111019135033.6b40e5ba@pitrou.net>
References: <20111019135033.6b40e5ba@pitrou.net>
Message-ID: <88E1D93D-1556-4918-AC41-11D913E44685@twistedmatrix.com>

On Oct 19, 2011, at 7:50 AM, Antoine Pitrou wrote:

> Feedback and contributions welcome. If you are interested in helping,
> please go and read the link above, it will give you suggestions.

Antoine, I'm very happy that you've decided to help Twisted get going on Py3.  I see that you've already submitted several of your fixes to the Twisted tracker.  Thanks for that. We'll try (as always) to get those reviewed soon.  We do eventually want to have 3.x support in trunk, so anything you're doing to support that goal should be an acceptable patch - provided it meets our other quality criteria, of course, but there's no patch for py3k support which shouldn't be able to meet that criteria :).

I would suggest that you submit all patches directly to the Twisted tracker, where they can be properly reviewed before landing, not to this (or any other) fork.  As several other messages in this thread have indicated, it looks like you may be misunderstanding a few key aspects of Twisted (such as how the distinction between bytes and unicode needs to be treated in the Banana protocol), so this fork is going to get some things wrong, potentially with wire-level implications and incompatibilities.  Review discussions of targeted patches will allow us to address those areas individually, while getting the other parts merged into the mainline.

(This goes double for other people who are not Antoine wanting to help out: please look first at this list of tickets: <http://twistedmatrix.com/trac/query?status=assigned&status=new&status=reopened&group=status&milestone=Python-3.x>, and help them get through the review process, rather than submitting patches to a fork.)

Most importantly, it will not be reasonable to merge in a humongous branch with hundreds of unrelated changes later; doing code review on changes that big just isn't feasible and chances are good that they will linger forever.  If your fork _is_ made to work correctly, folding that correct behavior back in with all the necessary test coverage and fixes will be a much larger job than doing it the right way in the first place, one bit at a time, in Twisted trunk.  We have had several bad experiences with this kind of development before and I would rather not repeat them.

Finally, having the code in mainline will allow it to be subjected to our correctness testing <http://buildbot.twistedmatrix.com/> and also our performance testing <http://speed.twistedmatrix.com/>, neither of which is a small effort.

If this is just a short-lived experimental test bed to try things out quickly (i.e. a spike to demonstrate that it's feasible to get Twisted on py3), then that's fine, but I am somewhat concerned that impatient users will actually adopt this fork, and we will have to spend a lot of energy telling people (A) "don't use Antoine's fork, it's broken", and (B) "please stop reporting bugs in this broken fork on our bug tracker".

At any rate, the very first step here should be to add an as-yet-unsupported py3 builder to our build farm.  This should be pretty straightforward, as new builders are added all the time, and we have some new hardware that could be put to use for this.

Alternatively, we do already have a py3k-warnings buildbot set up; you can see the current warnings here: <http://buildbot.twistedmatrix.com/builders/python-3k-warnings/builds/111/steps/trial/logs/stdio>, although possibly this needs to be updated to python 2.7 to get rid of irrelevant noise like warnings about callable() going away, since I believe it's come back to 3.x now.

We might also be able to help with your problem of testing things on Windows, as we do have several Windows test machines set up already.  (Is pywin32 supported on 3.x yet?  <http://pypi.python.org/pypi/pywin32/> doesn't indicate.)

As you can see on <http://buildbot.twistedmatrix.com/builders>, we already even have some buildbots running python 3 builds for PyOpenSSL, so this isn't even really anything new.

Would anyone like to volunteer to help out with Antoine's efforts on the build-infrastructure side of things?

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20111019/281a46bb/attachment.html>

From solipsis at pitrou.net  Wed Oct 19 13:58:36 2011
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Wed, 19 Oct 2011 21:58:36 +0200
Subject: [Twisted-Python] Twisted for Python 3
References: <20111019135033.6b40e5ba@pitrou.net>
	<88E1D93D-1556-4918-AC41-11D913E44685@twistedmatrix.com>
Message-ID: <20111019215836.7ace72f3@pitrou.net>


Hi Glyph,

On Wed, 19 Oct 2011 14:50:41 -0400
Glyph <glyph at twistedmatrix.com> wrote:
> On Oct 19, 2011, at 7:50 AM, Antoine Pitrou wrote:
> 
> > Feedback and contributions welcome. If you are interested in helping,
> > please go and read the link above, it will give you suggestions.
> 
> We do eventually want to have 3.x support in trunk, so anything you're doing to support that goal should be an acceptable patch - provided it meets our other quality criteria, of course, but there's no patch for py3k support which shouldn't be able to meet that criteria :).

To me, 3.x support in trunk is not really workable unless you drop
pre-2.6 compatibility. Bytes literals are pretty much required.
A possible workaround is to call a factory function that makes
an str into a bytes in 3.x (e.g. write B("xyz") everywhere instead of
b"xyz"), but that's quite ugly IMO, not to mention suboptimal.

> I would suggest that you submit all patches directly to the Twisted tracker, where they can be properly reviewed before landing, not to this (or any other) fork.  As several other messages in this thread have indicated, it looks like you may be misunderstanding a few key aspects of Twisted (such as how the distinction between bytes and unicode needs to be treated in the Banana protocol), so this fork is going to get some things wrong, potentially with wire-level implications and incompatibilities.

Incompatibilities are a given when you switch between two different
data models. The incompatibilities don't have to be wire-level, but
they *will* occur at the higher level anyway.

You may read my answers to Itamar for more explanation on that decision.
Of course, it is not set in stone.

> Most importantly, it will not be reasonable to merge in a humongous branch with hundreds of unrelated changes later; doing code review on changes that big just isn't feasible and chances are good that they will linger forever.  If your fork _is_ made to work correctly, folding that correct behavior back in with all the necessary test coverage and fixes will be a much larger job than doing it the right way in the first place, one bit at a time, in Twisted trunk.

Without wanting to sound unconstructive, the "right way" (the
"byte-sized" approach) does not sound workable. Some 3.x-related patches
(not mine) have been lingering for years, although they are trivial. And
these patches (mine and the others) are really the tip of iceberg.

To clarify, here's my current set of modifications post-2to3 (that
is, it does *not* include 2to3's own changes):

 .hgignore                                  |    7 +
 bin/manhole                                |    2 +-
 bin/mktap                                  |    2 +-
 bin/pyhtmlizer                             |    2 +-
 bin/tap2deb                                |    2 +-
 bin/tap2rpm                                |    2 +-
 bin/tapconvert                             |    2 +-
 bin/trial                                  |    2 +-
 bin/twistd                                 |    2 +-
 doc/core/examples/chatserver.py            |    2 +-
 doc/core/examples/echoclient.py            |    6 +-
 doc/core/examples/echoclient_ssl.py        |    6 +-
 doc/core/examples/echoclient_udp.py        |    6 +-
 doc/core/examples/simpleclient.py          |    2 +-
 setup.py                                   |    6 +-
 twisted/application/internet.py            |    4 +-
 twisted/enterprise/adbapi.py               |    8 +
 twisted/internet/_sigchld.c                |   15 +-
 twisted/internet/_signals.py               |    2 +-
 twisted/internet/_sslverify.py             |    9 +-
 twisted/internet/abstract.py               |   10 +-
 twisted/internet/address.py                |    9 +-
 twisted/internet/base.py                   |   14 +-
 twisted/internet/defer.py                  |   13 +
 twisted/internet/error.py                  |    4 +-
 twisted/internet/inotify.py                |    4 +-
 twisted/internet/pollreactor.py            |    2 +-
 twisted/internet/posixbase.py              |    4 +-
 twisted/internet/process.py                |    8 +-
 twisted/internet/protocol.py               |    2 +-
 twisted/internet/task.py                   |    2 +-
 twisted/internet/tcp.py                    |    7 +-
 twisted/internet/test/connectionmixins.py  |   10 +-
 twisted/internet/test/fakeendpoint.py      |    5 +-
 twisted/internet/test/test_fdset.py        |   18 +-
 twisted/internet/test/test_inotify.py      |    6 +-
 twisted/internet/test/test_posixprocess.py |    2 +-
 twisted/internet/test/test_process.py      |   33 +-
 twisted/internet/test/test_tcp.py          |   22 +-
 twisted/internet/test/test_udp.py          |    2 +-
 twisted/internet/test/test_unix.py         |    2 +-
 twisted/internet/threads.py                |    6 +-
 twisted/internet/unix.py                   |    5 +-
 twisted/internet/utils.py                  |   13 +-
 twisted/lore/latex.py                      |    2 +-
 twisted/lore/lint.py                       |    4 +-
 twisted/lore/tree.py                       |   21 +-
 twisted/manhole/explorer.py                |   25 +-
 twisted/persisted/aot.py                   |  146 +++---
 twisted/persisted/crefutil.py              |    2 +-
 twisted/persisted/sob.py                   |    2 +-
 twisted/persisted/styles.py                |    8 +-
 twisted/plugin.py                          |    5 +-
 twisted/protocols/amp.py                   |  210 +++++-----
 twisted/protocols/basic.py                 |   43 +-
 twisted/protocols/finger.py                |   18 +-
 twisted/protocols/ftp.py                   |    4 +-
 twisted/protocols/ident.py                 |   41 +-
 twisted/protocols/loopback.py              |   10 +-
 twisted/protocols/memcache.py              |   47 +-
 twisted/protocols/policies.py              |    4 +-
 twisted/protocols/postfix.py               |   10 +-
 twisted/protocols/socks.py                 |   22 +-
 twisted/protocols/stateful.py              |    7 +-
 twisted/protocols/test/test_tls.py         |   73 +-
 twisted/protocols/tls.py                   |    2 +-
 twisted/protocols/wire.py                  |   10 +-
 twisted/python/_initgroups.c               |   19 +-
 twisted/python/_inotify.py                 |    3 +-
 twisted/python/_release.py                 |   10 +-
 twisted/python/failure.py                  |   25 +-
 twisted/python/filepath.py                 |   44 ++-
 twisted/python/hook.py                     |    4 +-
 twisted/python/htmlizer.py                 |    5 +-
 twisted/python/log.py                      |    4 -
 twisted/python/logfile.py                  |    8 +-
 twisted/python/randbytes.py                |   11 +-
 twisted/python/reflect.py                  |    6 +-
 twisted/python/runtime.py                  |    2 +-
 twisted/python/test/modules_helpers.py     |    2 +-
 twisted/python/test/test_deprecate.py      |    6 +-
 twisted/python/test/test_dist.py           |   10 +-
 twisted/python/test/test_hashlib.py        |   40 +-
 twisted/python/test/test_htmlizer.py       |   18 +-
 twisted/python/test/test_release.py        |  470 ++++++++++++-----------
 twisted/python/test/test_util.py           |   11 +-
 twisted/python/test/test_versions.py       |   19 +-
 twisted/python/test/test_zipstream.py      |  116 +++--
 twisted/python/text.py                     |   24 +-
 twisted/python/usage.py                    |   12 +-
 twisted/python/util.py                     |   74 +---
 twisted/python/versions.py                 |   51 +-
 twisted/python/win32.py                    |    6 +-
 twisted/python/zippath.py                  |   22 +-
 twisted/python/zipstream.py                |   28 +-
 twisted/runner/portmap.c                   |   18 +-
 twisted/scripts/_twistd_unix.py            |    2 +-
 twisted/scripts/trial.py                   |    4 +-
 twisted/spread/banana.py                   |   68 ++-
 twisted/spread/flavors.py                  |   38 +
 twisted/spread/jelly.py                    |  112 +----
 twisted/spread/pb.py                       |   35 +-
 twisted/spread/publish.py                  |    4 +-
 twisted/test/iosim.py                      |    4 +-
 twisted/test/proto_helpers.py              |   10 +-
 twisted/test/test_adbapi.py                |    6 +-
 twisted/test/test_amp.py                   |  330 ++++++++--------
 twisted/test/test_application.py           |   10 +-
 twisted/test/test_banana.py                |   64 +-
 twisted/test/test_defgen.py                |    2 +-
 twisted/test/test_epoll.py                 |    4 +-
 twisted/test/test_failure.py               |    4 +-
 twisted/test/test_fdesc.py                 |   26 +-
 twisted/test/test_finger.py                |   16 +-
 twisted/test/test_ident.py                 |   42 +-
 twisted/test/test_internet.py              |   28 +-
 twisted/test/test_iutils.py                |   18 +-
 twisted/test/test_jelly.py                 |   44 +-
 twisted/test/test_log.py                   |   22 +-
 twisted/test/test_logfile.py               |    6 +-
 twisted/test/test_loopback.py              |   64 +-
 twisted/test/test_memcache.py              |  194 ++++----
 twisted/test/test_modules.py               |   26 +-
 twisted/test/test_newcred.py               |   24 +-
 twisted/test/test_paths.py                 |   70 +-
 twisted/test/test_pb.py                    |   18 +-
 twisted/test/test_pbfailure.py             |    4 +-
 twisted/test/test_persisted.py             |   14 +-
 twisted/test/test_policies.py              |   49 +-
 twisted/test/test_postfix.py               |   20 +-
 twisted/test/test_protocols.py             |  290 +++++++-------
 twisted/test/test_socks.py                 |  112 ++--
 twisted/test/test_ssl.py                   |   28 +-
 twisted/test/test_sslverify.py             |    2 +-
 twisted/test/test_stateful.py              |    8 +-
 twisted/test/test_tcp.py                   |   34 +-
 twisted/test/test_tcp_internals.py         |    5 +
 twisted/test/test_threadable.py            |    2 +-
 twisted/test/test_threads.py               |    6 +-
 twisted/test/test_tpfile.py                |    8 +-
 twisted/test/test_twistd.py                |   14 +-
 twisted/test/test_udp.py                   |   40 +-
 twisted/test/test_unix.py                  |    8 +-
 twisted/trial/runner.py                    |   41 +-
 twisted/trial/test/packages.py             |    2 +-
 twisted/trial/test/test_assertions.py      |    2 -
 twisted/trial/test/test_loader.py          |   21 +-
 twisted/trial/test/test_reporter.py        |   26 +-
 twisted/trial/test/test_tests.py           |   15 +-
 twisted/trial/test/test_util.py            |    1 +
 twisted/trial/test/test_warning.py         |    8 +-
 twisted/trial/unittest.py                  |    3 +
 twisted/trial/util.py                      |    2 +-
 twisted/web/microdom.py                    |    5 +-
 154 files changed, 2171 insertions(+), 1970 deletions(-)


*Assuming* we find a clean solution to the bytes literal problem, I
could try to slice all of that into "byte-sized" patches into which I
inject version-checking boilerplate, but that would mean a large waste
of time and energy:
- for me, as I post dozens of small patches and have to follow up on
  them, and wait for them to be checked in
- for you, as you have to review these patches without perhaps even
  being Python 3 users yourselves, and without Python 3 compatibility
  being on your priority list

It would also mean neither of us would be able to remain motivated
(which, in the end, is the fundamental problem).

Therefore, my work assumes a different approach. I expect 3.x support
for Twisted to need maintenance of a dedicated branch for a
non-ephemeral lapse of time. One goal of my experiment is to find out
how easy or tedious such maintenance is.

> Finally, having the code in mainline will allow it to be subjected to our correctness testing <http://buildbot.twistedmatrix.com/> and also our performance testing <http://speed.twistedmatrix.com/>, neither of which is a small effort.

Setting up buildbots would be very nice indeed. But isn't it independent
from having the code live in "trunk"?
As for performance testing, it's probably prematurate right now :-)

> At any rate, the very first step here should be to add an as-yet-unsupported py3 builder to our build farm.  This should be pretty straightforward, as new builders are added all the time, and we have some new hardware that could be put to use for this.
> 
> Alternatively, we do already have a py3k-warnings buildbot set up; you can see the current warnings here: <http://buildbot.twistedmatrix.com/builders/python-3k-warnings/builds/111/steps/trial/logs/stdio>, although possibly this needs to be updated to python 2.7 to get rid of irrelevant noise like warnings about callable() going away, since I believe it's come back to 3.x now.

As I said, getting rid of py3k warnings is really the tip of the
iceberg. It's a nice first step, but it's neither necessary (if you
plan to maintain a 3.x branch), and it doesn't take you very far away.

(yes, callable() has come back in 3.2)

Regards

Antoine.





From itamar at itamarst.org  Wed Oct 19 14:28:12 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 19 Oct 2011 16:28:12 -0400
Subject: [Twisted-Python] Twisted for Python 3
In-Reply-To: <20111019215836.7ace72f3@pitrou.net>
References: <20111019135033.6b40e5ba@pitrou.net>
	<88E1D93D-1556-4918-AC41-11D913E44685@twistedmatrix.com>
	<20111019215836.7ace72f3@pitrou.net>
Message-ID: <c86c896386db0d08b6129e5ddd6988ef.squirrel@webmail.zoteca.com>

> To me, 3.x support in trunk is not really workable unless you drop
> pre-2.6 compatibility. Bytes literals are pretty much required.
> A possible workaround is to call a factory function that makes
> an str into a bytes in 3.x (e.g. write B("xyz") everywhere instead of
> b"xyz"), but that's quite ugly IMO, not to mention suboptimal.

We're getting closer; we're going to drop Python 2.4 as soon as the next
release is out. Still not up to 2.6, though.

> Incompatibilities are a given when you switch between two different
> data models. The incompatibilities don't have to be wire-level, but
> they *will* occur at the higher level anyway.

The thing that worries is me is unnecessary or harmful incompatibilities
that are a result of misunderstanding (e.g. the banana thing, which was an
unnecessary wire protocol change). Submitting patches would have the
benefit of letting someone else help you make these decisions; it's
unreasonable to expect you to become an expert on every single API in
Twisted.

> Without wanting to sound unconstructive, the "right way" (the
> "byte-sized" approach) does not sound workable. Some 3.x-related patches
> (not mine) have been lingering for years, although they are trivial. And
> these patches (mine and the others) are really the tip of iceberg.

There aren't any python 3 patches in the review queue at the moment; do
you have any specific tickets in mind? If they're ready to go they should
have the "review" keyword set (if they haven't addressed review comments
then that is why they aren't merged).

> *Assuming* we find a clean solution to the bytes literal problem, I
> could try to slice all of that into "byte-sized" patches into which I
> inject version-checking boilerplate, but that would mean a large waste
> of time and energy:
> - for me, as I post dozens of small patches and have to follow up on
>   them, and wait for them to be checked in
> - for you, as you have to review these patches without perhaps even
>   being Python 3 users yourselves, and without Python 3 compatibility
>   being on your priority list

Most of us aren't Windows users either, but we still try to support
Windows :)





From glyph at twistedmatrix.com  Wed Oct 19 15:37:00 2011
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 19 Oct 2011 17:37:00 -0400
Subject: [Twisted-Python] Twisted for Python 3
In-Reply-To: <c86c896386db0d08b6129e5ddd6988ef.squirrel@webmail.zoteca.com>
References: <20111019135033.6b40e5ba@pitrou.net>
	<88E1D93D-1556-4918-AC41-11D913E44685@twistedmatrix.com>
	<20111019215836.7ace72f3@pitrou.net>
	<c86c896386db0d08b6129e5ddd6988ef.squirrel@webmail.zoteca.com>
Message-ID: <8A765B93-DD35-4C7C-A67E-532BFE3FD649@twistedmatrix.com>


On Oct 19, 2011, at 4:28 PM, Itamar Turner-Trauring wrote:

>> To me, 3.x support in trunk is not really workable unless you drop
>> pre-2.6 compatibility. Bytes literals are pretty much required.
>> A possible workaround is to call a factory function that makes
>> an str into a bytes in 3.x (e.g. write B("xyz") everywhere instead of
>> b"xyz"), but that's quite ugly IMO, not to mention suboptimal.
> 
> We're getting closer; we're going to drop Python 2.4 as soon as the next
> release is out. Still not up to 2.6, though.

For one thing:

What's the big problem with B("")?  It does not strike me as particularly problematic.  We call plenty of functions at import time, I'm sure that it's not going to impact performance much.  Plus, it's very easy to fix with a trivial regex when we do drop 2.5 support eventually: the expression evaluates to the same thing.  If anything, concern about the function call overhead will simply encourage us to make more constant bytestrings module-level constants instead of inline expressions, which is a plus if you ask me :).

>> Incompatibilities are a given when you switch between two different
>> data models. The incompatibilities don't have to be wire-level, but
>> they *will* occur at the higher level anyway.
> 
> The thing that worries is me is unnecessary or harmful incompatibilities
> that are a result of misunderstanding (e.g. the banana thing, which was an
> unnecessary wire protocol change). Submitting patches would have the
> benefit of letting someone else help you make these decisions; it's
> unreasonable to expect you to become an expert on every single API in
> Twisted.

Nothing to say to this besides a big "+1".  This is the whole point of the review process: to make sure that appropriate knowledge is shared before committing to a change.

>> Without wanting to sound unconstructive, the "right way" (the
>> "byte-sized" approach) does not sound workable. Some 3.x-related patches
>> (not mine) have been lingering for years, although they are trivial. And
>> these patches (mine and the others) are really the tip of iceberg.
> 
> There aren't any python 3 patches in the review queue at the moment; do
> you have any specific tickets in mind? If they're ready to go they should
> have the "review" keyword set (if they haven't addressed review comments
> then that is why they aren't merged).

I should note also that our review queue has gotten to 0 tickets several times since those tickets have last been in review, so things are getting through.

The problem here is that nobody is putting in the consistent work necessary to get these patches through review and merged to trunk.  Almost all the py3k patches have been dropped off and then abandoned.  The solution is not to give up and abandon all the patches together, but rather to find some people to get involved and continue participating in that work.

(That's not to say that I don't appreciate the effort involved in dropping those patches off in the first place.  I do.  It also doesn't mean that people shouldn't drop off patches if they're not going to finish them; they definitely should.  The original author doesn't necessarily have to be the one to do the responding to feedback.)

It may seem easier right now to put them into a big pile and forget about that process, but what happens once trunk has moved on?  We don't make a lot of incompatible changes, but that doesn't mean we don't change the implementation of things quite a bit.  Lots of work has gone on in core areas of Twisted recently - including a near-total rewrite of TLS support - and many more such changes are coming.  The relative stability of Twisted as an API to depend on says nothing about the stability of the code in terms of diffs continuing to apply; and the larger the diff, the more likely it's going to run into conflicts.

It's worth the extra effort to get the code into the mainline because when the work is done, it's actually done: we continue to maintain that code moving forward, and assuming that there is an appropriate buildslave (possibly one with the 'rachet'-style reporting that exarkun just set up for pydoctor?), we make sure that future changes won't undo the progress that has been made and introduce more py3k warnings or test failures.

If the code isn't in the mainline, then instead of supporting your efforts, all future maintenance undermines them.  You'll have to put in lots of extra work to keep your fork applying, and you'll have to do a bunch of work because any changes will not take the py3 compatibility tests into account, so every new module will be a new thing you have to clean up.  Plus you don't get the benefit of having each change tested extensively to make sure it doesn't break anything unexpected, on some weird platform or configuration.

This work on the build infrastructure and release management and QA appears to be invisible from the perspective of an individual change, but in reality it's the plurality, if not the majority, of the work that goes into the project.

>> *Assuming* we find a clean solution to the bytes literal problem,

We've already got one, except perhaps for an unreasonably strict definition of "clean" :-).

>> I could try to slice all of that into "byte-sized" patches into which I
>> inject version-checking boilerplate, but that would mean a large waste
>> of time and energy:
>> - for me, as I post dozens of small patches and have to follow up on
>>  them, and wait for them to be checked in

You can choose the appropriate size of patches; you don't have to work on a per-file basis; it would make more sense to choose a topic area than to just submit individual one-liners as patches because that's what happens to be in a single file.

>> - for you, as you have to review these patches without perhaps even
>>  being Python 3 users yourselves, and without Python 3 compatibility
>>  being on your priority list
> 
> Most of us aren't Windows users either, but we still try to support
> Windows :)

Also, the issue is not the priority of python 3 support, but the priority of reviewing incoming patches, which is always at the absolute top of our priority list.  As you can see from the scoring system on <http://twistedmatrix.com/highscores/>, we value it more highly than anything else.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20111019/1f0fb42c/attachment.html>

From itamar at itamarst.org  Wed Oct 19 15:46:41 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 19 Oct 2011 17:46:41 -0400
Subject: [Twisted-Python] Twisted for Python 3
In-Reply-To: <8A765B93-DD35-4C7C-A67E-532BFE3FD649@twistedmatrix.com>
References: <20111019135033.6b40e5ba@pitrou.net>
	<88E1D93D-1556-4918-AC41-11D913E44685@twistedmatrix.com>
	<20111019215836.7ace72f3@pitrou.net>
	<c86c896386db0d08b6129e5ddd6988ef.squirrel@webmail.zoteca.com>
	<8A765B93-DD35-4C7C-A67E-532BFE3FD649@twistedmatrix.com>
Message-ID: <27693604aca7a0a5109e5119f82465bb.squirrel@webmail.zoteca.com>

Patches to Twisted trunk are also good for things that'll make 2to3 output
work with less manual fixes (e.g. renaming variables named "callable" to
something else).




From brad.milne at devx.runthered.com  Thu Oct 20 04:50:50 2011
From: brad.milne at devx.runthered.com (Brad Milne)
Date: Thu, 20 Oct 2011 23:50:50 +1300
Subject: [Twisted-Python] Twisted enterprise deployment models
Message-ID: <CAEtrYuR2rZz6uv4sXkpY5AjfNKm1j7cgf5OjV40jpimLC+v8xQ@mail.gmail.com>

We have a core message-handling platform which encompasses an
ever-increasing array of modules and services run inside one Twisted
process. This is good as it means the reactor is in control of most of the
stuff relevant to it. However, as the number of deployed services within it
grows, it becomes increasingly burdensome to have all the modules in a
single deployed codebase running in a single launched process.
Java has JEE; erlang has hot code loading; x has y; what does Twisted have?
pb?
To date we have begun introducing RabbitMQ (AMQP), with separate Twisted
processes running as adapters at either end of queues. On the surface this
fits nicely as it provides distributed architecture, resilience through
isolation, and decoupled upgrade paths. On the flipside though, it means
more technology and more processes running outside of a singleton Twisted
reactor (read: OS process management, which Twisted's designed to be better
than).

So my questions:
1) I'm right, right? Twisted doesn't have mechanisms or a library for hot
swapping code modules or similar solutions for low impact upgrades and high
availability? (I originally read about Twisted *plugins* hoping for this,
but was disappointed to find how basic they actually were)
2) Is RabbitMQ with txAMQP-empowered Twisted instances on the ends of the
queues a sensible, compatible, best-practice approach as agreed by the
community?

Looking forward to your thoughts
Brad
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20111020/58c22a08/attachment-0001.html>

From rlotun at gmail.com  Thu Oct 20 05:29:42 2011
From: rlotun at gmail.com (Reza Lotun)
Date: Thu, 20 Oct 2011 12:29:42 +0100
Subject: [Twisted-Python] Twisted enterprise deployment models
In-Reply-To: <CAEtrYuR2rZz6uv4sXkpY5AjfNKm1j7cgf5OjV40jpimLC+v8xQ@mail.gmail.com>
References: <CAEtrYuR2rZz6uv4sXkpY5AjfNKm1j7cgf5OjV40jpimLC+v8xQ@mail.gmail.com>
Message-ID: <CAFJezo1v8Z+bS7wOZFSEBoM791GSQwXCbUwjFb2dFPqactDagA@mail.gmail.com>

Hi Brad,

On Thu, Oct 20, 2011 at 11:50 AM, Brad Milne
<brad.milne at devx.runthered.com>wrote:

> ...
> So my questions:
> 1) I'm right, right? Twisted doesn't have mechanisms or a library for hot
> swapping code modules or similar solutions for low impact upgrades and high
> availability? (I originally read about Twisted *plugins* hoping for this,
> but was disappointed to find how basic they actually were)
>

No, not a complete, first-class mechanism (at least as far as I know).

However, there are a few pieces in Twisted which can be used to build such a
solution. I've been meaning to piece them together for a while to do this,
but time-constraints and what-not have prohibited that so far:

1.
http://twistedmatrix.com/documents/current/api/twisted.python.rebuild.html
This a module that can be used to reload class definitions and instances,
etc. You can conceive of a system whereby you load a class that defines a
code loading module that can pick up modules in a directory and periodically
refresh their definitions, for example. One way to do it with RabbitMQ is
have a queue specifically for code-refreshes - when a code-reload service
receives a message it does one or more twisted.python.rebuilds to reload the
code definitions, or something. There is obviously still a lot you have to
do yourself, but it's something. (I'm aware that reloading modules in Python
is generally difficult because of all the stray references that can still
exist, but you can probably structure the code in such a way that a reload,
or series of reloads will do the job).

2.
http://twistedmatrix.com/documents/current/api/twisted.runner.procmon.ProcessMonitor.html
A service to monitor processes. You can have other services running in
container processes, and use this functionality to monitor and control them.

3.
http://twistedmatrix.com/documents/current/api/twisted.internet.protocol.ProcessProtocol.html
You can define process protocols that implement specific job types. Usually
this is used to spread process amongst cores, but you could also use it for
sanboxing functionality I suppose. Another project that uses this for
spreading working process amongst cores is Ampoule:
https://launchpad.net/ampoule


2) Is RabbitMQ with txAMQP-empowered Twisted instances on the ends of the
> queues a sensible, compatible, best-practice approach as agreed by the
> community?
>

Sure. It's one approach. You can also use Redis and txRedis -
https://github.com/rlotun/txRedis. Redis has pub-sub functionality that's
much simpler than AMQP (but not as powerful - for example you can't do
something like ACK a task). But for basic pub-sub it's awesome.

We use both RabbitMQ and Redis, via txAMQP and txRedis.

Reza

-- 
Reza Lotun
mobile: +44 (0)7521 310 763
email:  rlotun at gmail.com
work:   rlotun at twitter.com
@rlotun
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20111020/6bc4608f/attachment.html>

From itamar at itamarst.org  Thu Oct 20 05:50:29 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Thu, 20 Oct 2011 07:50:29 -0400
Subject: [Twisted-Python] Twisted enterprise deployment models
In-Reply-To: <CAFJezo1v8Z+bS7wOZFSEBoM791GSQwXCbUwjFb2dFPqactDagA@mail.gmail.com>
References: <CAEtrYuR2rZz6uv4sXkpY5AjfNKm1j7cgf5OjV40jpimLC+v8xQ@mail.gmail.com>
	<CAFJezo1v8Z+bS7wOZFSEBoM791GSQwXCbUwjFb2dFPqactDagA@mail.gmail.com>
Message-ID: <1319111429.1979.12.camel@blake>

On Thu, 2011-10-20 at 12:29 +0100, Reza Lotun wrote

> 1. http://twistedmatrix.com/documents/current/api/twisted.python.rebuild.html
> This a module that can be used to reload class definitions and
> instances, etc.

This is probably not something you want to use in production. Too many
thing can go wrong.






From itamar at itamarst.org  Thu Oct 20 05:57:23 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Thu, 20 Oct 2011 07:57:23 -0400
Subject: [Twisted-Python] Twisted enterprise deployment models
In-Reply-To: <CAEtrYuR2rZz6uv4sXkpY5AjfNKm1j7cgf5OjV40jpimLC+v8xQ@mail.gmail.com>
References: <CAEtrYuR2rZz6uv4sXkpY5AjfNKm1j7cgf5OjV40jpimLC+v8xQ@mail.gmail.com>
Message-ID: <1319111843.1979.18.camel@blake>

On Thu, 2011-10-20 at 23:50 +1300, Brad Milne wrote:

> To date we have begun introducing RabbitMQ (AMQP), with separate
> Twisted processes running as adapters at either end of queues. On the
> surface this fits nicely as it provides distributed architecture,
> resilience through isolation, and decoupled upgrade paths. On the
> flipside though, it means more technology and more processes running
> outside of a singleton Twisted reactor (read: OS process management,
> which Twisted's designed to be better than).

Twisted is not better than OS process management, I'd say. It's more of
a complement - the event driven model is better than threading
(especially given Python's crippled support for threads), and processes
gives you scalability, robustness and the ability to upgrade code. 
Since it sounds like you have a working solution, no need to worry too
much about theoretical superior solutions :)

Of course, what little I know of Erlang suggests that it's way better,
in terms of hot upgrades... but the language was designed with that in
mind, unlike Python.





From radix at twistedmatrix.com  Thu Oct 20 07:16:32 2011
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Thu, 20 Oct 2011 09:16:32 -0400
Subject: [Twisted-Python] Twisted enterprise deployment models
In-Reply-To: <CAEtrYuR2rZz6uv4sXkpY5AjfNKm1j7cgf5OjV40jpimLC+v8xQ@mail.gmail.com>
References: <CAEtrYuR2rZz6uv4sXkpY5AjfNKm1j7cgf5OjV40jpimLC+v8xQ@mail.gmail.com>
Message-ID: <CAPkRfUS-gimBZnKAwaxPPTU=X2_WTSrWug=fpZLF99kt0Qr5pw@mail.gmail.com>

On Thu, Oct 20, 2011 at 6:50 AM, Brad Milne
<brad.milne at devx.runthered.com>wrote:

> 2) Is RabbitMQ with txAMQP-empowered Twisted instances on the ends of the
> queues a sensible, compatible, best-practice approach as agreed by the
> community?
>


Yeah, do this.

One of these days I'm going to release a library for making deploying these
kinds of scalable AMQP/RPC type of services on Twisted easier...



-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20111020/b18c97aa/attachment.html>

From glyph at twistedmatrix.com  Thu Oct 20 11:09:10 2011
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 20 Oct 2011 13:09:10 -0400
Subject: [Twisted-Python] Twisted enterprise deployment models
In-Reply-To: <1319111429.1979.12.camel@blake>
References: <CAEtrYuR2rZz6uv4sXkpY5AjfNKm1j7cgf5OjV40jpimLC+v8xQ@mail.gmail.com>
	<CAFJezo1v8Z+bS7wOZFSEBoM791GSQwXCbUwjFb2dFPqactDagA@mail.gmail.com>
	<1319111429.1979.12.camel@blake>
Message-ID: <78ACF307-22E3-454A-B40E-679A34B9B314@twistedmatrix.com>

On Oct 20, 2011, at 7:50 AM, Itamar Turner-Trauring wrote:

> On Thu, 2011-10-20 at 12:29 +0100, Reza Lotun wrote
> 
>> 1. http://twistedmatrix.com/documents/current/api/twisted.python.rebuild.html
>> This a module that can be used to reload class definitions and
>> instances, etc.
> 
> This is probably not something you want to use in production. Too many
> thing can go wrong.

Can you list some of the things that might go wrong?  I've used rebuild in production, and it's perfectly fine if you understand the inherent limitations of Python's object model reloading code.  For services with long startup time and lots of data in core it can be the best option.




From itamar at itamarst.org  Thu Oct 20 11:25:27 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Thu, 20 Oct 2011 13:25:27 -0400
Subject: [Twisted-Python] Twisted enterprise deployment models
In-Reply-To: <78ACF307-22E3-454A-B40E-679A34B9B314@twistedmatrix.com>
References: <CAEtrYuR2rZz6uv4sXkpY5AjfNKm1j7cgf5OjV40jpimLC+v8xQ@mail.gmail.com>
	<CAFJezo1v8Z+bS7wOZFSEBoM791GSQwXCbUwjFb2dFPqactDagA@mail.gmail.com>
	<1319111429.1979.12.camel@blake>
	<78ACF307-22E3-454A-B40E-679A34B9B314@twistedmatrix.com>
Message-ID: <fb52acbd913bbffc32dfc566cdf6cd05.squirrel@webmail.zoteca.com>

> Can you list some of the things that might go wrong?  I've used rebuild in
> production, and it's perfectly fine if you understand the inherent
> limitations of Python's object model reloading code.  For services with
> long startup time and lots of data in core it can be the best option.

You might end up using code that was written by someone who didn't
understand  the inherent limitations of Python's object model reloading
code :)

Personally if I was reloading code I'd prefer something that more
explicitly loaded something as a new object, rather than replacing in
place.




From glyph at twistedmatrix.com  Thu Oct 20 12:13:46 2011
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 20 Oct 2011 14:13:46 -0400
Subject: [Twisted-Python] Twisted enterprise deployment models
In-Reply-To: <CAEtrYuR2rZz6uv4sXkpY5AjfNKm1j7cgf5OjV40jpimLC+v8xQ@mail.gmail.com>
References: <CAEtrYuR2rZz6uv4sXkpY5AjfNKm1j7cgf5OjV40jpimLC+v8xQ@mail.gmail.com>
Message-ID: <95EE3AF6-93E3-4B18-90FD-291A847EFA2A@twistedmatrix.com>

On Oct 20, 2011, at 6:50 AM, Brad Milne wrote:

> We have a core message-handling platform which encompasses an ever-increasing array of modules and services run inside one Twisted process. This is good as it means the reactor is in control of most of the stuff relevant to it. However, as the number of deployed services within it grows, it becomes increasingly burdensome to have all the modules in a single deployed codebase running in a single launched process.
> Java has JEE; erlang has hot code loading; x has y; what does Twisted have? pb?

Erlang can do this because it has a strict separation of state and behavior (in the vernacular, "it is not object-oriented") and J2EE can do this because it requires you to externalize all your state - usually to a relational database.  Part of the appeal of Twisted is that you can freely use simple, in-memory mutable data structures to store your mutable state.

Introducing these kinds of limits into the Twisted ecosystem would not be impossible, but it is very challenging, because you'd have to come up with a model that applied equally well to all of the supported protocols and all the ways you might want to store state within those protocols.  

> To date we have begun introducing RabbitMQ (AMQP), with separate Twisted processes running as adapters at either end of queues. On the surface this fits nicely as it provides distributed architecture, resilience through isolation, and decoupled upgrade paths. On the flipside though, it means more technology and more processes running outside of a singleton Twisted reactor (read: OS process management, which Twisted's designed to be better than).

I'm not sure what you mean by "OS process management" versus "Twisted process management".  It's true that you get some benefits from using spawnProcess to manage your subprocesses, since you can write code to automatically start and stop them in response to certain stimuli, but this relies completely on however it is your OS starts and stops processes.  Why not just have a Twisted monitor process that starts and monitors the health of all of your queue producer/consumer processes?  Then you should get the best of both worlds.

> So my questions:
> 1) I'm right, right? Twisted doesn't have mechanisms or a library for hot swapping code modules or similar solutions for low impact upgrades and high availability? (I originally read about Twisted *plugins* hoping for this, but was disappointed to find how basic they actually were)

Reza already replied with a pretty good list of possible options for this, but: no, there's no single, one-size-fits-all solution for this.

And there could be!  As I said above, it's tricky, but if you could think of a good design for such a system, I'd absolutely LOVE for it to be in Twisted.  Please feel free to contribute something :).

> 2) Is RabbitMQ with txAMQP-empowered Twisted instances on the ends of the queues a sensible, compatible, best-practice approach as agreed by the community?

No.

I don't mean that it doesn't work, I just don't like the term "best-practice".

Maybe your implementation is a good idea, maybe not.  But if I said it's a "best practice", that would relieve you of the need to think critically about whether or not this approach was satisfying your requirements.  There are some cases where this is a good idea, some not.  There are some people in the community who have had good experiences with this approach; I personally don't use it.

You'll have to be the judge of whether it's working for you or not.




From brad.milne at devx.runthered.com  Thu Oct 20 18:10:21 2011
From: brad.milne at devx.runthered.com (Brad Milne)
Date: Fri, 21 Oct 2011 13:10:21 +1300
Subject: [Twisted-Python] Twisted enterprise deployment models
In-Reply-To: <95EE3AF6-93E3-4B18-90FD-291A847EFA2A@twistedmatrix.com>
References: <CAEtrYuR2rZz6uv4sXkpY5AjfNKm1j7cgf5OjV40jpimLC+v8xQ@mail.gmail.com>
	<95EE3AF6-93E3-4B18-90FD-291A847EFA2A@twistedmatrix.com>
Message-ID: <CAEtrYuR6veT36NQrazECrMZSdyJcM+r1xBGfiJKQGWtT9oh3kA@mail.gmail.com>

Thanks all for the thoughts.

Clinching drivers for us to choose AMQP (RabbitMQ) include built-in
persistence, manual ACK (ie only when finished, not just when pulled), plus
the obviously strong configuration-driven routing capabilities.

With this distributed architecture using rabbit, we're not likely to pursue
a hot-swap design with Twisted - there wouldn't be the same payback compared
with the ease with which new entire adapter service code can be deployed
with rabbit maintaining messages between components. It is something I've
come back to a few times though - have thought roughly about the idea of an
enhanced Service class that can be easily swapped in and out.

The plan was that if we continued with *n *Twisted services attached by
rabbit queues that we'd eventually build some manner of central Manager that
could be responsible for tracking these things. In fact we may extend it to
become a deployment manager as well at some point, that could control the
graceful swapping out of Twisted services.

Introducing these kinds of limits into the Twisted ecosystem would not be
> impossible, but it is very challenging, because you'd have to come up with a
> model that applied equally well to all of the supported protocols and all
> the ways you might want to store state within those protocols.

On this note, I hadn't aimed for the gold-plated approach of persisting
every state - we have stateful objects that we pass around and was thinking
more of closing all inbound services, waiting for completion, then closing
outbound services and persisting these objects' state. That would be less
reusable across Twisted as a whole, I understand, but certainly makes for a
more easily consumable first bite.

Fair enough re 'best-practice' :) I knew if I went as far as to ask that,
I'd get a reasonable gauge back at least

Thanks again
Brad

PS - Christopher, I look forward to seeing that lib


On 21 October 2011 07:13, Glyph <glyph at twistedmatrix.com> wrote:

> On Oct 20, 2011, at 6:50 AM, Brad Milne wrote:
>
> > We have a core message-handling platform which encompasses an
> ever-increasing array of modules and services run inside one Twisted
> process. This is good as it means the reactor is in control of most of the
> stuff relevant to it. However, as the number of deployed services within it
> grows, it becomes increasingly burdensome to have all the modules in a
> single deployed codebase running in a single launched process.
> > Java has JEE; erlang has hot code loading; x has y; what does Twisted
> have? pb?
>
> Erlang can do this because it has a strict separation of state and behavior
> (in the vernacular, "it is not object-oriented") and J2EE can do this
> because it requires you to externalize all your state - usually to a
> relational database.  Part of the appeal of Twisted is that you can freely
> use simple, in-memory mutable data structures to store your mutable state.
>
> Introducing these kinds of limits into the Twisted ecosystem would not be
> impossible, but it is very challenging, because you'd have to come up with a
> model that applied equally well to all of the supported protocols and all
> the ways you might want to store state within those protocols.
>
> > To date we have begun introducing RabbitMQ (AMQP), with separate Twisted
> processes running as adapters at either end of queues. On the surface this
> fits nicely as it provides distributed architecture, resilience through
> isolation, and decoupled upgrade paths. On the flipside though, it means
> more technology and more processes running outside of a singleton Twisted
> reactor (read: OS process management, which Twisted's designed to be better
> than).
>
> I'm not sure what you mean by "OS process management" versus "Twisted
> process management".  It's true that you get some benefits from using
> spawnProcess to manage your subprocesses, since you can write code to
> automatically start and stop them in response to certain stimuli, but this
> relies completely on however it is your OS starts and stops processes.  Why
> not just have a Twisted monitor process that starts and monitors the health
> of all of your queue producer/consumer processes?  Then you should get the
> best of both worlds.
>
> > So my questions:
> > 1) I'm right, right? Twisted doesn't have mechanisms or a library for hot
> swapping code modules or similar solutions for low impact upgrades and high
> availability? (I originally read about Twisted *plugins* hoping for this,
> but was disappointed to find how basic they actually were)
>
> Reza already replied with a pretty good list of possible options for this,
> but: no, there's no single, one-size-fits-all solution for this.
>
> And there could be!  As I said above, it's tricky, but if you could think
> of a good design for such a system, I'd absolutely LOVE for it to be in
> Twisted.  Please feel free to contribute something :).
>
> > 2) Is RabbitMQ with txAMQP-empowered Twisted instances on the ends of the
> queues a sensible, compatible, best-practice approach as agreed by the
> community?
>
> No.
>
> I don't mean that it doesn't work, I just don't like the term
> "best-practice".
>
> Maybe your implementation is a good idea, maybe not.  But if I said it's a
> "best practice", that would relieve you of the need to think critically
> about whether or not this approach was satisfying your requirements.  There
> are some cases where this is a good idea, some not.  There are some people
> in the community who have had good experiences with this approach; I
> personally don't use it.
>
> You'll have to be the judge of whether it's working for you or not.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20111021/594e9a06/attachment.html>

From therve at free.fr  Fri Oct 21 07:52:37 2011
From: therve at free.fr (=?ISO-8859-1?Q?Thomas_Herv=E9?=)
Date: Fri, 21 Oct 2011 15:52:37 +0200
Subject: [Twisted-Python] Anyone interested in being release manager for
 11.1?
In-Reply-To: <32DED3E9-049E-4EFE-BAAC-1F2663E4868D@red-elvis.net>
References: <0ea9541af436201d0427aca665585c9f.squirrel@webmail.zoteca.com>	<CABkOF6SSx17ogswKcKhGSoRO3W=7--QKjgQhDCaJ7mHUWQDmcQ@mail.gmail.com>	<CAHZ8tnaxMAJj9gz_Mdj-He3nQm35_QBo+9C2qPmt=3UGYwpHKA@mail.gmail.com>
	<32DED3E9-049E-4EFE-BAAC-1F2663E4868D@red-elvis.net>
Message-ID: <4EA17925.8040308@free.fr>

Le 18/10/2011 19:20, Andrés Gasson a écrit :
> I don't meet many of the prerequisites (none actually)  - but seeing Im now recently unemployed I can offer a hand to anyone who does have the prerequisites
> 
> Commit privileges to Twisted
> Shell access to cube.twistedmatrix.com
> XXX: Possibly this ought to be permission to log in as www-data
> Write permissions to /srv/www-data/twisted on cube (normally, www-data membership)
> Write permissions to /srv/www-data/website/vhosts/twistedmatrix.com/documents
> Permissions to edit WikiStart
> Channel operator permissions for #twisted
> Admin privileges for Twisted's PyPI packages
> Membership of  https://launchpad.net/~twisted-dev
> Contributor status for  http://labs.twistedmatrix.com
> Cheers Gas
> On 18/10/2011, at 7:14 PM, Jonathan Lange wrote:
> 
>> On Tue, Oct 18, 2011 at 6:11 PM, gelin yan <dynamicgl at gmail.com> wrote:
>>> any tutorial for how to be a release manager?
>>>
>>
>> <http://twistedmatrix.com/trac/wiki/ReleaseProcess> just about covers it.
>>
>> jml

Hi,

I'm going to take care of the (first) pre-release. Don't hesitate to
hang out in #twisted on freenode if you want to follow. Testing the
tarballs afterward will be much appreciated as well.

Cheers,

-- 
Thomas



From therve at free.fr  Fri Oct 21 08:28:24 2011
From: therve at free.fr (=?ISO-8859-1?Q?Thomas_Herv=E9?=)
Date: Fri, 21 Oct 2011 16:28:24 +0200
Subject: [Twisted-Python] First pre-release of Twisted 11.1.0
Message-ID: <4EA18188.2040706@free.fr>

Hello, fine people of the intraweb,

We're dangerously approaching the end of the year, without a second
release done, which is obviously unacceptable. I thus present you with
Twisted 11.1.0pre1:

    http://people.canonical.com/~therve/Twisted/11.1.0pre1/

Some hightlights of the 178 tickets closed:

 * The poll reactor as default where applicable, instead of select
   everywhere.

 * A new SSL implementation only relying on OpenSSL for cryptography,
   (not I/O) making it more robust, and adding IOCP support in the
   process.

 * Several improvements to the fresh HTTP/1.1 client implementation,
   including proxy and cookie support.

 * My personal favorite: a new howto has been published on test-driven
   development with Twisted.

 * A special mention to the new abortConnection support on TCP and SSL
   connections, heroically pushed by Itamar and Jean-Paul, and the
   oldest ticket closed by this release.

Please give it all the testing love it deserves (and be harsh if necessary).

Release-manager-ly yours,

-- 
Thomas



From jml at mumak.net  Fri Oct 21 10:32:37 2011
From: jml at mumak.net (Jonathan Lange)
Date: Fri, 21 Oct 2011 17:32:37 +0100
Subject: [Twisted-Python] First pre-release of Twisted 11.1.0
In-Reply-To: <4EA18188.2040706@free.fr>
References: <4EA18188.2040706@free.fr>
Message-ID: <CAHZ8tnYw6fqoAHZZroLVwVwSrL8cTY-CNO8vd2mE+QF2fzj-mg@mail.gmail.com>

On Fri, Oct 21, 2011 at 3:28 PM, Thomas Hervé <therve at free.fr> wrote:
> Hello, fine people of the intraweb,
>
> We're dangerously approaching the end of the year, without a second
> release done, which is obviously unacceptable. I thus present you with
> Twisted 11.1.0pre1:
>
>    http://people.canonical.com/~therve/Twisted/11.1.0pre1/
>

Thanks so much!

I've gently nudged folk who work on Launchpad to give it a spin.

jml



From solipsis at pitrou.net  Fri Oct 21 11:23:53 2011
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Fri, 21 Oct 2011 19:23:53 +0200
Subject: [Twisted-Python] Twisted for Python 3
References: <20111019135033.6b40e5ba@pitrou.net>
	<88E1D93D-1556-4918-AC41-11D913E44685@twistedmatrix.com>
	<20111019215836.7ace72f3@pitrou.net>
	<c86c896386db0d08b6129e5ddd6988ef.squirrel@webmail.zoteca.com>
	<8A765B93-DD35-4C7C-A67E-532BFE3FD649@twistedmatrix.com>
	<27693604aca7a0a5109e5119f82465bb.squirrel@webmail.zoteca.com>
Message-ID: <20111021192353.52b880ad@pitrou.net>

On Wed, 19 Oct 2011 17:46:41 -0400
"Itamar Turner-Trauring" <itamar at itamarst.org> wrote:
> Patches to Twisted trunk are also good for things that'll make 2to3 output
> work with less manual fixes (e.g. renaming variables named "callable" to
> something else).

Ah, good example indeed. I take it you had already tried a 2to3 run?
(I was quite baffled by this one)

I think I'm going to follow a two-pronged approach right now:
- contribute some patches to trunk for 2to3/3.x-friendliness
- continue work on the t3k branch, because a working result is
  more interesting even if some of it has to be amended later

I'm still split about the B("") thing. Do note that a simple regex is
not enough, because of string continuations.

Regards

Antoine.





From exarkun at twistedmatrix.com  Fri Oct 21 13:19:00 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 21 Oct 2011 19:19:00 -0000
Subject: [Twisted-Python] Twisted for Python 3
In-Reply-To: <20111021192353.52b880ad@pitrou.net>
References: <20111019135033.6b40e5ba@pitrou.net>
	<88E1D93D-1556-4918-AC41-11D913E44685@twistedmatrix.com>
	<20111019215836.7ace72f3@pitrou.net>
	<c86c896386db0d08b6129e5ddd6988ef.squirrel@webmail.zoteca.com>
	<8A765B93-DD35-4C7C-A67E-532BFE3FD649@twistedmatrix.com>
	<27693604aca7a0a5109e5119f82465bb.squirrel@webmail.zoteca.com>
	<20111021192353.52b880ad@pitrou.net>
Message-ID: <20111021191900.23178.608648570.divmod.xquotient.657@localhost.localdomain>

On 05:23 pm, solipsis at pitrou.net wrote:
>On Wed, 19 Oct 2011 17:46:41 -0400
>"Itamar Turner-Trauring" <itamar at itamarst.org> wrote:
>>Patches to Twisted trunk are also good for things that'll make 2to3 
>>output
>>work with less manual fixes (e.g. renaming variables named "callable" 
>>to
>>something else).
>
>Ah, good example indeed. I take it you had already tried a 2to3 run?
>(I was quite baffled by this one)
>
>I think I'm going to follow a two-pronged approach right now:
>- contribute some patches to trunk for 2to3/3.x-friendliness

Thanks. :)

Speaking of this, it'd be great to have some help from some other 
developers who are interested in Python 3 support.  There are now four 
of Antoine's tickets up for review (see 
<http://twistedmatrix.com/trac/report/15>) - reviewing one of them would 
be a great way to help with the Python 3 effort.

If you're interested and you've never done a review before, take a look 
at <http://twistedmatrix.com/trac/wiki/ReviewProcess> and then get 
started!  You'll also get yourself onto 
<http://twistedmatrix.com/highscores>. :)

Jean-Paul
>- continue work on the t3k branch, because a working result is
>  more interesting even if some of it has to be amended later
>
>I'm still split about the B("") thing. Do note that a simple regex is
>not enough, because of string continuations.
>
>Regards
>
>Antoine.
>
>
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From jon at multani.info  Fri Oct 21 19:32:10 2011
From: jon at multani.info (Jonathan Ballet)
Date: Sat, 22 Oct 2011 10:32:10 +0900
Subject: [Twisted-Python] Passing extra arguments along callbacks
Message-ID: <20111022013208.GA9360@localhost>

Hello,

I'm trying to play a little bit with Twisted to discover how it works
and I thought it was a nice exercise with the following case.

I have a list of IP addresses that I want to get the reverse DNS value.
I'm using the answer provided by JP at
http://twistedmatrix.com/pipermail/twisted-python/2004-September/008715.html
to perform the lookup and it's all good.

I'm putting all the results of client.lookupPointer() into a
DeferredList to display the result in order when everything is donew,
which is also working fine. The code looks like this so far:


def resolve(ip):
    ptr = '.'.join(ip.split('.')[::-1]) + '.in-addr.arpa'
    return client.lookupPointer(ptr)

def display_results(result):
    for (succeeded, value) in result:
        if not succeeded:
            print "unknown"
        else:
            (ans, auth, add) = value
            name = ans[0].payload.name
            print name

d = DeferredList([resolve(ip) for ip in IPS],
                  consumeErrors=True).addCallback(display_results)


Now, I would like to have access both to the result of the lookup but
also the original IP address, so that I can print, especially, the
addresses which failed to be resolved.

At first, I added a callback to lookupPointer() like this:

    client.lookupPointer(ptr).addCallback(lambda r: (ip, r))

and it does the job: in display_results(), I now have the IP address and
the result of the lookup.

However, I'm stuck how to do this for the failures: I tried to add an
errback the same way as I added the callback to lookupPointer(), but
then, it seems that DeferredList() sees the result of the errback() as a
ssuccess, so `succeeded` is True and I hav to ressort to a isinstance()
call to compare to see if my item is a Failure exception or not, like
this:


def display_results(result):
    for (succeeded, value) in result:
        ip, answer = result
        if isinstance(answer, twisted.python.failure.Failure):
            succeeded = False
        ...

My question is: is there a simpler way to pass values along the
callbacks?

Side question: why the reactor is not stopped in the final example
below?


Thanks!

 Jonathan

ps: my final try looks like this:


from twisted.internet import reactor
from twisted.internet.defer import DeferredList
from twisted.names import client
import twisted.python.failure


IPS = open('ips.txt').read().split()[0:10]


def display_results(result):
    for (succeeded, value) in result:
        ip, answer = value
        if isinstance(answer, twisted.python.failure.Failure):
            succeeded = False

        if not succeeded:
            name = "(unknown)"
        else:
            (ans, auth, add) = answer
            name = str(ans[0].payload.name)

        print "%16s: %s" % (ip, name)

def resolve(ip):
    ptr = '.'.join(ip.split('.')[::-1]) + '.in-addr.arpa'
    return client.lookupPointer(ptr).\
            addCallback(lambda x: (ip, x)).\
            addErrback(lambda x: (ip, x))

l = [resolve(ip) for ip in IPS]
d = DeferredList( l, consumeErrors=True).\
        addCallback(display_results).\
        addCallback(lambda x: reactor.stop)

reactor.run()



From terry at jon.es  Fri Oct 21 19:50:56 2011
From: terry at jon.es (Terry Jones)
Date: Fri, 21 Oct 2011 21:50:56 -0400
Subject: [Twisted-Python] Passing extra arguments along callbacks
In-Reply-To: Your message at 10:32:10 on Saturday, 22 October 2011
References: <20111022013208.GA9360@localhost>
Message-ID: <20130.8576.218755.532918@jon.es>

Hi Jonathan

> def resolve(ip):
>     ptr = '.'.join(ip.split('.')[::-1]) + '.in-addr.arpa'
>     return client.lookupPointer(ptr).\
>             addCallback(lambda x: (ip, x)).\
>             addErrback(lambda x: (ip, x))

Your errback isn't raising and isn't returning a Failure, so the processing
switches back to the callback chain. If you add an errback that's a real
function and it raises something, things will work. E.g.

def err(fail, ip):
    raise Exception(fail, ip)

return client.lookupPointer(ptr).\
    addCallback(lambda x: (ip, x)).\
    addErrback(err, ip)


> l = [resolve(ip) for ip in IPS]
> d = DeferredList( l, consumeErrors=True).\
>         addCallback(display_results).\
>         addCallback(lambda x: reactor.stop)

Try reactor.stop()

Terry



From jon at multani.info  Fri Oct 21 20:08:36 2011
From: jon at multani.info (Jonathan Ballet)
Date: Sat, 22 Oct 2011 11:08:36 +0900
Subject: [Twisted-Python] Passing extra arguments along callbacks
In-Reply-To: <20130.8576.218755.532918@jon.es>
References: <20111022013208.GA9360@localhost> <20130.8576.218755.532918@jon.es>
Message-ID: <20111022020835.GB9360@localhost>

Hi Terry,

On Fri, Oct 21, 2011 at 09:50:56PM -0400, Terry Jones wrote:
> Hi Jonathan
> 
> > def resolve(ip):
> >     ptr = '.'.join(ip.split('.')[::-1]) + '.in-addr.arpa'
> >     return client.lookupPointer(ptr).\
> >             addCallback(lambda x: (ip, x)).\
> >             addErrback(lambda x: (ip, x))
> 
> Your errback isn't raising and isn't returning a Failure, so the processing
> switches back to the callback chain. If you add an errback that's a real
> function and it raises something, things will work. E.g.
> 
> def err(fail, ip):
>     raise Exception(fail, ip)
> 
> return client.lookupPointer(ptr).\
>     addCallback(lambda x: (ip, x)).\
>     addErrback(err, ip)

OK, it works better :)
I read about the behavior of the errback() "switching back" to the
normal flow if it wasn't raising an exception or returning the Failure,
but I wasn't sure how to wire things together. It was really simple
actually!

> > l = [resolve(ip) for ip in IPS]
> > d = DeferredList( l, consumeErrors=True).\
> >         addCallback(display_results).\
> >         addCallback(lambda x: reactor.stop)
> 
> Try reactor.stop()

*slap my head*

Sure...

Thanks for your quick answers!

 Jonathan



From exarkun at twistedmatrix.com  Sat Oct 22 22:05:31 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 23 Oct 2011 04:05:31 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1319342731.66.1845814842@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20111023/7596d7ea/attachment-0001.html>

From tenth at twistedmatrix.com  Tue Oct 25 08:59:23 2011
From: tenth at twistedmatrix.com (Tenth)
Date: Tue, 25 Oct 2011 10:59:23 -0400
Subject: [Twisted-Python]  Boston Twisted Sprint: November Edition
Message-ID: <CAKJpRM3+uXFd2a7SR-nDWv-STWU6aDPbuQ7LSaeacobORq9RKA@mail.gmail.com>

In an attempt to get back into the habit of holding Monthly sprints planned
somewhat more in advance, I'm pleased to announce that we'll be hosting
another Twisted Sprint at the Smarterer offices on Sunday, November 13th,
from about 1:00 to 9:00 PM.

If you'd like to attend but aren't on the contact list, let me know!  We
prefer that sprinters RSVP for food planning purposes (and to receive more
detailed instructions about getting into the building, which is locked down
on weekends).

Thanks,

- Dave
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20111025/af9fbeb5/attachment-0001.html>

From txtoth at gmail.com  Tue Oct 25 13:57:18 2011
From: txtoth at gmail.com (Ted Toth)
Date: Tue, 25 Oct 2011 14:57:18 -0500
Subject: [Twisted-Python] perspective broker remote call returning a
	dictionary
Message-ID: <CAFPpqQGGrvUhj+r3JmAOH_9YMX-1zhawFUGuG2nYpXF98ZDQ=w@mail.gmail.com>

I'm trying to return a dictionary with objects as values from a remote
call but it's not working. Can anyone tell me what I'm doing wrong or
point me at an example that works?

dserver.py
--------------------------------------------------------------------------------------------------------------------------------
from twisted.spread import pb

class Test():
    def __init__(self, data):
        self.data = data

class CopyTest(Test, pb.Copyable):
    def __init__(self, test):
        Test.__init__(self, test.data)

class CopyDict(dict, pb.Copyable):
    def __init__(self, d):
        dict.__init__(self)
        for key in d.keys():
            self[key] = CopyTest(d[key])
            print key, self[key].data
        print "Dict: ", pb.jelly(self)
        print self


class dTest(pb.Root):
    def __init__(self):
        self.d = {}
        self.d['A'] = Test("data for A")
        self.d['D'] = Test("data for D")
        self.d['C'] = Test("data for C")
        self.d['B'] = Test("data for B")

    def remote_getD(self):
        from dserver import CopyDict
        foo =  CopyDict(self.d)
        return foo

if __name__ == '__main__':
    from twisted.internet import reactor
    d = dTest()
    reactor.listenTCP(8789, pb.PBServerFactory(d))
    reactor.run()

---------------------------------------------------------------------------------------------------------------
dclient.py
---------------------------------------------------------------------------------------------------------------
from twisted.spread import pb
from twisted.internet import reactor
from dserver import Test, CopyTest, CopyDict
import sys

class ReceiverDict(dict, pb.RemoteCopy):
     def setCopyableState(self, state):
        print "ReceiverDict: ", state
        self.__dict__ = state
#    pass
pb.setUnjellyableForClass(CopyDict, ReceiverDict)

class ReceiverTest(pb.RemoteCopy, Test):
     def setCopyableState(self, state):
        print "ReceiverTest: ", state
        self.__dict__ = state
#   pass
pb.setUnjellyableForClass(CopyTest, ReceiverTest)

class Receiver(object):
    def __init__(self):
        self.domain = None

    def runTests(self):
        self.connect( ).addCallback(
            lambda _: self.getD( )).addCallback(
            self._catchFailure).addCallback(
            lambda _: reactor.stop( ))

    def connect(self):
        factory = pb.PBClientFactory( )
        reactor.connectTCP("localhost", 8789, factory)
        return factory.getRootObject( ).addCallback(self._connected)

    def _connected(self, rootObj):
        self.domain = rootObj

    def getD(self):
        print "Getting object..."
        return self.domain.callRemote(
            'getD').addCallback(
            self._gotD)

    def _gotD(self, d):
        print "Got :", d
        for key in d.keys():
            print "key: ",key
            print d[key]
        return d

    def _catchFailure(self, failure):
        print "Error:", failure #.getErrorMessage( )

t = Receiver()
t.runTests()
reactor.run()

-----------------------------------------------------------------------------------------------------------
Debug output:

[tedx at comms twisted]$ python dserver.py
A data for A
C data for C
B data for B
D data for D
Dict:  ['dserver.CopyDict', ['dictionary']]
{'A': <dserver.CopyTest instance at 0x1a0ccb0>, 'C': <dserver.CopyTest
instance at 0x1a0ccf8>, 'B': <dserver.CopyTest instance at 0x1a0cd40>,
'D': <dserver.CopyTest instance at 0x1a0cd88>}

[tedx at comms twisted]$ python dclient.py
Getting object...
ReceiverDict:  {}
Got : {}
Error: {}



From glyph at twistedmatrix.com  Wed Oct 26 05:09:07 2011
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 26 Oct 2011 07:09:07 -0400
Subject: [Twisted-Python] First pre-release of Twisted 11.1.0
In-Reply-To: <4EA18188.2040706@free.fr>
References: <4EA18188.2040706@free.fr>
Message-ID: <AC3E2D8E-3874-4810-9DAB-9C95841228D6@twistedmatrix.com>


On Oct 21, 2011, at 10:28 AM, Thomas Hervé wrote:

> * A special mention to the new abortConnection support on TCP and SSL
>   connections, heroically pushed by Itamar and Jean-Paul, and the
>   oldest ticket closed by this release.

After doing some testing of my own, I am discovering that there may be some issues with the prerelease in this area.  I'm getting this traceback when running Calendar Server under a load simulator:

Unhandled Error
Traceback (most recent call last):
  File ".../twisted/python/log.py", line 84, in callWithLogger
    return callWithContext({"system": lp}, func, *args, **kw)
  File ".../twisted/python/log.py", line 69, in callWithContext
    return context.call({ILogContext: newCtx}, func, *args, **kw)
  File ".../twisted/python/context.py", line 118, in callWithContext
    return self.currentContext().callWithContext(ctx, func, *args, **kw)
  File ".../twisted/python/context.py", line 81, in callWithContext
    return func(*args,**kw)
--- <exception caught here> ---
  File ".../twisted/internet/selectreactor.py", line 150, in _doReadOrWrite
    why = getattr(selectable, method)()
  File ".../twisted/internet/tcp.py", line 199, in doRead
    rval = self.protocol.dataReceived(data)
  File ".../twisted/protocols/tls.py", line 413, in dataReceived
    self._flushReceiveBIO()
  File ".../twisted/protocols/tls.py", line 360, in _flushReceiveBIO
    self._shutdownTLS()
  File ".../twisted/protocols/tls.py", line 427, in _shutdownTLS
    self.transport.loseConnection()
  File ".../twisted/internet/_newtls.py", line 71, in loseConnection
    return self._base.loseConnection(self._connection, reason)
  File ".../twisted/internet/abstract.py", line 360, in loseConnection
    self.connectionLost(_connDone)
  File ".../twisted/internet/tcp.py", line 272, in connectionLost
    self._closeSocket(not reason.check(error.ConnectionAborted))
exceptions.AttributeError: 'NoneType' object has no attribute 'check'

Note that none of my application code is showing up on the stack: just Twisted, which makes me think that this is a bug that _could_ be reproduced without a big application :).

Does anyone have an idea what this could be?  I will file a ticket soon but I'd love to have some reproduction instructions...

This definitely doesn't happen under 11.0, so it is a new problem in trunk/11.1.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20111026/af2c0527/attachment.html>

From itamar at itamarst.org  Wed Oct 26 06:02:16 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 26 Oct 2011 08:02:16 -0400
Subject: [Twisted-Python] First pre-release of Twisted 11.1.0
In-Reply-To: <AC3E2D8E-3874-4810-9DAB-9C95841228D6@twistedmatrix.com>
References: <4EA18188.2040706@free.fr>
	<AC3E2D8E-3874-4810-9DAB-9C95841228D6@twistedmatrix.com>
Message-ID: <1319630536.2042.7.camel@blake>

On Wed, 2011-10-26 at 07:09 -0400, Glyph wrote:

> Does anyone have an idea what this could be?  I will file a ticket
> soon but I'd love to have some reproduction instructions...

It seems to be just a normal TLS shutdown, the second stage after a
TLS-level disconnect has been both sent and received... but then for
some reason the code thinks we did a TCP half-close too. Are you doing
loseWriteConnection in your code?

Changing _newtls._BypassTransport.loseConnection so it has
reason=ConnectionDone() as a default (or maybe a Failure wrapping
ConnectionDone) rather than None would fix the symptom, but possibly
that's the wrong thing to do.





From jrennie at gmail.com  Wed Oct 26 08:02:01 2011
From: jrennie at gmail.com (Jason Rennie)
Date: Wed, 26 Oct 2011 10:02:01 -0400
Subject: [Twisted-Python] running 1,000,000 tasks, 40 at-a-time
Message-ID: <CA+Pf4UDBoVWzFKcivN5_zGo+Cm+SzoJKJcp0YKhS5_dhtjnucQ@mail.gmail.com>

The background:

I've been using DeferredSemaphore and DeferredList to manage the running of
tasks with a resource constraint (only so many tasks can run at the same
time).  This worked great until I tried to use it to manage millions of
tasks.  Simply setting them up to run (DeferredSemaphore.run() calls) took
appx. 2 hours and used ~5 gigs of ram.  This was less efficient than I
expected.  Note that these numbers don't include time/memory for actually
running the tasks, only time/memory to set up the running of the tasks.
 I've since written a custom task runner that has uses comparatively little
setup time/memory by adding a "manager" callback to each task which starts
additional tasks as appropriate.

My questions:

   - Is the behavior I'm seeing expected?  i.e. are DS/DL only recommended
   for task management if the # of tasks not too large?  Is there a better way
   to use DS/DL that I might not be thinking of?
   - Is there a Twisted pattern for managing tasks efficiently that I might
   be missing?

Thanks,

Jason
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20111026/e662745a/attachment.html>

From terry at jon.es  Wed Oct 26 08:22:32 2011
From: terry at jon.es (Terry Jones)
Date: Wed, 26 Oct 2011 10:22:32 -0400
Subject: [Twisted-Python] running 1,000,000 tasks, 40 at-a-time
In-Reply-To: Your message at 10:02:01 on Wednesday, 26 October 2011
References: <CA+Pf4UDBoVWzFKcivN5_zGo+Cm+SzoJKJcp0YKhS5_dhtjnucQ@mail.gmail.com>
Message-ID: <20136.6056.187937.971868@jon.es>

Hi Jason

>   - Is there a Twisted pattern for managing tasks efficiently that I be
>   - missing?

Sounds like you should be using a Python generator and that you're not.

First off, have you read http://jcalderone.livejournal.com/24285.html ?
If not, do.  Take note of the line

  work = (callable(elem, *args, **named) for elem in iterable)

work is a generator.  Make sure you understand every line of that code :-)

You might also find https://launchpad.net/txrdq of interest, though it's
probably overkill for what you're trying to do.

Terry



From exarkun at twistedmatrix.com  Wed Oct 26 08:24:12 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 26 Oct 2011 14:24:12 -0000
Subject: [Twisted-Python] running 1,000,000 tasks, 40 at-a-time
In-Reply-To: <CA+Pf4UDBoVWzFKcivN5_zGo+Cm+SzoJKJcp0YKhS5_dhtjnucQ@mail.gmail.com>
References: <CA+Pf4UDBoVWzFKcivN5_zGo+Cm+SzoJKJcp0YKhS5_dhtjnucQ@mail.gmail.com>
Message-ID: <20111026142412.23178.63976612.divmod.xquotient.710@localhost.localdomain>

On 02:02 pm, jrennie at gmail.com wrote:
>The background:
>
>I've been using DeferredSemaphore and DeferredList to manage the 
>running of
>tasks with a resource constraint (only so many tasks can run at the 
>same
>time).  This worked great until I tried to use it to manage millions of
>tasks.  Simply setting them up to run (DeferredSemaphore.run() calls) 
>took
>appx. 2 hours and used ~5 gigs of ram.  This was less efficient than I
>expected.  Note that these numbers don't include time/memory for 
>actually
>running the tasks, only time/memory to set up the running of the tasks.
>I've since written a custom task runner that has uses comparatively 
>little
>setup time/memory by adding a "manager" callback to each task which 
>starts
>additional tasks as appropriate.
>
>My questions:
>
>   - Is the behavior I'm seeing expected?  i.e. are DS/DL only 
>recommended
>   for task management if the # of tasks not too large?  Is there a 
>better way
>   to use DS/DL that I might not be thinking of?

Yes, it's expected.  Queueing up millions of tasks is a lot of work. 
Setting up millions more callbacks to learn about completion is a lot 
more work.  I would not recommend DeferredSemaphore for things beyond 
"user scale" - eg, things that correspond to a single user action, like 
clicking a button in a GUI.
>   - Is there a Twisted pattern for managing tasks efficiently that I 
>might
>   be missing?

I think the generator/cooperator approach works pretty well, and has 
constant (instead of linear) time completion notification and 
distributes setup costs across the lifetime of the queue, probably 
allowing for better resource utilization.

See http://as.ynchrono.us/2006/05/limiting-parallelism_22.html for a 
simple write-up.

Jean-Paul



From itamar at itamarst.org  Wed Oct 26 08:24:34 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 26 Oct 2011 10:24:34 -0400
Subject: [Twisted-Python] running 1,000,000 tasks, 40 at-a-time
In-Reply-To: <CA+Pf4UDBoVWzFKcivN5_zGo+Cm+SzoJKJcp0YKhS5_dhtjnucQ@mail.gmail.com>
References: <CA+Pf4UDBoVWzFKcivN5_zGo+Cm+SzoJKJcp0YKhS5_dhtjnucQ@mail.gmail.com>
Message-ID: <1319639074.2042.19.camel@blake>

On Wed, 2011-10-26 at 10:02 -0400, Jason Rennie wrote:
> The background:
> 
> 
> I've been using DeferredSemaphore and DeferredList to manage the
> running of tasks with a resource constraint (only so many tasks can
> run at the same time).  This worked great until I tried to use it to
> manage millions of tasks.  Simply setting them up to run
> (DeferredSemaphore.run() calls) took appx. 2 hours and used ~5 gigs of
> ram.  This was less efficient than I expected.  Note that these
> numbers don't include time/memory for actually running the tasks, only
> time/memory to set up the running of the tasks.  I've since written a
> custom task runner that has uses comparatively little setup
> time/memory by adding a "manager" callback to each task which starts
> additional tasks as appropriate. 
> 
> 
> My questions:
>       * Is the behavior I'm seeing expected?  i.e. are DS/DL only
>         recommended for task management if the # of tasks not too
>         large?  Is there a better way to use DS/DL that I might not be
>         thinking of?

DeferredList is intended for the case where you want to wait for all
results to have arrived. Given its API, you basically *have* to create
all the millions of input Deferreds first (although not the tasks
themselves, if you're clever). So this is going to be slow, and use a
lot of memory... although 5 gigs is rather surprising, unless each task
has a lot of state.

>       * Is there a Twisted pattern for managing tasks efficiently that
>         I might be missing?

It seems like you've figured it out, if you've written a custom task
runner. Probably Twisted should include some better abstraction for
doing this sort of thing, since it does come up regularly.






From jrennie at gmail.com  Wed Oct 26 09:08:33 2011
From: jrennie at gmail.com (Jason Rennie)
Date: Wed, 26 Oct 2011 11:08:33 -0400
Subject: [Twisted-Python] running 1,000,000 tasks, 40 at-a-time
In-Reply-To: <20136.6056.187937.971868@jon.es>
References: <CA+Pf4UDBoVWzFKcivN5_zGo+Cm+SzoJKJcp0YKhS5_dhtjnucQ@mail.gmail.com>
	<20136.6056.187937.971868@jon.es>
Message-ID: <CA+Pf4UD6HbmFCSH3U4eV0+bv1yx_8Vt=AAqDNPxcoCSxzLrKiw@mail.gmail.com>

On Wed, Oct 26, 2011 at 10:22 AM, Terry Jones <terry at jon.es> wrote:

> Sounds like you should be using a Python generator and that you're not.
>

The issue I'm seeing is that the ~million DeferredSemaphore.run() calls are
inefficient; it's independent of list/generator.

First off, have you read http://jcalderone.livejournal.com/24285.html ?
> If not, do.  Take note of the line
>
>  work = (callable(elem, *args, **named) for elem in iterable)
>
> work is a generator.  Make sure you understand every line of that code :-)
>

I don't see anything in task.Cooperator to limit the # of
simultaneously-running tasks.  Am I missing something?  I guess,
technically, could write my own scheduler that limits the # of
simultaneously-running tasks.  But, then task.Cooperator isn't really doing
anything useful for me.

You might also find https://launchpad.net/txrdq of interest, though it's
> probably overkill for what you're trying to do.
>

Yes, it is overkill.

Jason
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20111026/3d51a65f/attachment.html>

From exarkun at twistedmatrix.com  Wed Oct 26 09:09:54 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 26 Oct 2011 15:09:54 -0000
Subject: [Twisted-Python] perspective broker remote call returning
	a	dictionary
In-Reply-To: <CAFPpqQGGrvUhj+r3JmAOH_9YMX-1zhawFUGuG2nYpXF98ZDQ=w@mail.gmail.com>
References: <CAFPpqQGGrvUhj+r3JmAOH_9YMX-1zhawFUGuG2nYpXF98ZDQ=w@mail.gmail.com>
Message-ID: <20111026150954.23178.1631655259.divmod.xquotient.723@localhost.localdomain>

On 25 Oct, 07:57 pm, txtoth at gmail.com wrote:
>I'm trying to return a dictionary with objects as values from a remote
>call but it's not working. Can anyone tell me what I'm doing wrong or
>point me at an example that works?
>
>dserver.py
>--------------------------------------------------------------------------------------------------------------------------------
>from twisted.spread import pb
>
>class Test():
>    def __init__(self, data):
>        self.data = data
>
>class CopyTest(Test, pb.Copyable):
>    def __init__(self, test):
>        Test.__init__(self, test.data)
>
>class CopyDict(dict, pb.Copyable):

Subclassing both dict and Copyable is probably a major part of the 
problem.  There is one set of rules for serializing a dict and another 
incompatible set for serializing a Copyable.  It seems that in your 
case, the Copyable behavior seems to be in use, so all the dict contents 
are ignored.

Jean-Paul
>    def __init__(self, d):
>        dict.__init__(self)
>        for key in d.keys():
>            self[key] = CopyTest(d[key])
>            print key, self[key].data
>        print "Dict: ", pb.jelly(self)
>        print self
>
>
>class dTest(pb.Root):
>    def __init__(self):
>        self.d = {}
>        self.d['A'] = Test("data for A")
>        self.d['D'] = Test("data for D")
>        self.d['C'] = Test("data for C")
>        self.d['B'] = Test("data for B")
>
>    def remote_getD(self):
>        from dserver import CopyDict
>        foo =  CopyDict(self.d)
>        return foo
>
>if __name__ == '__main__':
>    from twisted.internet import reactor
>    d = dTest()
>    reactor.listenTCP(8789, pb.PBServerFactory(d))
>    reactor.run()
>
>---------------------------------------------------------------------------------------------------------------
>dclient.py
>---------------------------------------------------------------------------------------------------------------
>from twisted.spread import pb
>from twisted.internet import reactor
>from dserver import Test, CopyTest, CopyDict
>import sys
>
>class ReceiverDict(dict, pb.RemoteCopy):
>     def setCopyableState(self, state):
>        print "ReceiverDict: ", state
>        self.__dict__ = state
>#    pass
>pb.setUnjellyableForClass(CopyDict, ReceiverDict)
>
>class ReceiverTest(pb.RemoteCopy, Test):
>     def setCopyableState(self, state):
>        print "ReceiverTest: ", state
>        self.__dict__ = state
>#   pass
>pb.setUnjellyableForClass(CopyTest, ReceiverTest)
>
>class Receiver(object):
>    def __init__(self):
>        self.domain = None
>
>    def runTests(self):
>        self.connect( ).addCallback(
>            lambda _: self.getD( )).addCallback(
>            self._catchFailure).addCallback(
>            lambda _: reactor.stop( ))
>
>    def connect(self):
>        factory = pb.PBClientFactory( )
>        reactor.connectTCP("localhost", 8789, factory)
>        return factory.getRootObject( ).addCallback(self._connected)
>
>    def _connected(self, rootObj):
>        self.domain = rootObj
>
>    def getD(self):
>        print "Getting object..."
>        return self.domain.callRemote(
>            'getD').addCallback(
>            self._gotD)
>
>    def _gotD(self, d):
>        print "Got :", d
>        for key in d.keys():
>            print "key: ",key
>            print d[key]
>        return d
>
>    def _catchFailure(self, failure):
>        print "Error:", failure #.getErrorMessage( )
>
>t = Receiver()
>t.runTests()
>reactor.run()
>
>-----------------------------------------------------------------------------------------------------------
>Debug output:
>
>[tedx at comms twisted]$ python dserver.py
>A data for A
>C data for C
>B data for B
>D data for D
>Dict:  ['dserver.CopyDict', ['dictionary']]
>{'A': <dserver.CopyTest instance at 0x1a0ccb0>, 'C': <dserver.CopyTest
>instance at 0x1a0ccf8>, 'B': <dserver.CopyTest instance at 0x1a0cd40>,
>'D': <dserver.CopyTest instance at 0x1a0cd88>}
>
>[tedx at comms twisted]$ python dclient.py
>Getting object...
>ReceiverDict:  {}
>Got : {}
>Error: {}
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From p.mayers at imperial.ac.uk  Wed Oct 26 09:23:09 2011
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 26 Oct 2011 16:23:09 +0100
Subject: [Twisted-Python] running 1,000,000 tasks, 40 at-a-time
In-Reply-To: <CA+Pf4UD6HbmFCSH3U4eV0+bv1yx_8Vt=AAqDNPxcoCSxzLrKiw@mail.gmail.com>
References: <CA+Pf4UDBoVWzFKcivN5_zGo+Cm+SzoJKJcp0YKhS5_dhtjnucQ@mail.gmail.com>	<20136.6056.187937.971868@jon.es>
	<CA+Pf4UD6HbmFCSH3U4eV0+bv1yx_8Vt=AAqDNPxcoCSxzLrKiw@mail.gmail.com>
Message-ID: <4EA825DD.7080600@imperial.ac.uk>

On 26/10/11 16:08, Jason Rennie wrote:
> On Wed, Oct 26, 2011 at 10:22 AM, Terry Jones <terry at jon.es
> <mailto:terry at jon.es>> wrote:
>
>     Sounds like you should be using a Python generator and that you're not.
>
>
> The issue I'm seeing is that the ~million DeferredSemaphore.run() calls
> are inefficient; it's independent of list/generator.
>
>     First off, have you read http://jcalderone.livejournal.com/24285.html ?
>     If not, do. Take note of the line
>
>     work = (callable(elem, *args, **named) for elem in iterable)
>
>     work is a generator. Make sure you understand every line of that
>     code :-)
>
>
> I don't see anything in task.Cooperator to limit the # of
> simultaneously-running tasks. Am I missing something? I guess,

Yes, you're missing something AIUI.

In JPs example at the given URL, he basically does two things:

  1. Creates a *single* generator (using a generator comprehension, but 
a function def would work just as well) that yields each task deferred 
in turn (not all at once).

  2. Passes the generator to a task.Cooperator "coiterate" method, N 
times. Each call to "coiterate" will setup a sequence of events that 
calls .next() on the generator, and repeats when the deferred 
callback/errbacks.

So, N is the concurrency

> technically, could write my own scheduler that limits the # of
> simultaneously-running tasks. But, then task.Cooperator isn't really
> doing anything useful for me.

See above.



From p.mayers at imperial.ac.uk  Wed Oct 26 09:29:18 2011
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 26 Oct 2011 16:29:18 +0100
Subject: [Twisted-Python] Docs HTML suggestion/request for moving between
	versions.
Message-ID: <4EA8274E.9070704@imperial.ac.uk>

Lately, I've taken to finding Twisted docs by writing:

twisted.internet.task.Cooperator

...into the Chrome bar'o'magic and hitting return to get the Google hit. 
This is great, except that the resultant Google hits almost always point 
me to the 8.2.0 HTML docs. 2nd hit is (currently) 11.0 docs.

Obviously it's tricky to force Google to put "current" at the top! But 
could we maybe have a little <select> dropdown in the top-right that 
shows the version, and lets you pick a new one and have the page reload?

It strikes me that this would be useful in general, for flicking back 
and forward between two versions of the docs page for a given method/API.



From jrennie at gmail.com  Wed Oct 26 09:29:13 2011
From: jrennie at gmail.com (Jason Rennie)
Date: Wed, 26 Oct 2011 11:29:13 -0400
Subject: [Twisted-Python] running 1,000,000 tasks, 40 at-a-time
In-Reply-To: <CA+Pf4UD6HbmFCSH3U4eV0+bv1yx_8Vt=AAqDNPxcoCSxzLrKiw@mail.gmail.com>
References: <CA+Pf4UDBoVWzFKcivN5_zGo+Cm+SzoJKJcp0YKhS5_dhtjnucQ@mail.gmail.com>
	<20136.6056.187937.971868@jon.es>
	<CA+Pf4UD6HbmFCSH3U4eV0+bv1yx_8Vt=AAqDNPxcoCSxzLrKiw@mail.gmail.com>
Message-ID: <CA+Pf4UDMAYd0Add-GUBSeGgsqDZj=06NzgStjck-Zp2a83BhVg@mail.gmail.com>

On Wed, Oct 26, 2011 at 11:08 AM, Jason Rennie <jrennie at gmail.com> wrote:

> First off, have you read http://jcalderone.livejournal.com/24285.html ?
>> If not, do.  Take note of the line
>>
>>  work = (callable(elem, *args, **named) for elem in iterable)
>>
>> work is a generator.  Make sure you understand every line of that code :-)
>>
>
> I don't see anything in task.Cooperator to limit the # of
> simultaneously-running tasks.  Am I missing something?  I guess,
> technically, could write my own scheduler that limits the # of
> simultaneously-running tasks.  But, then task.Cooperator isn't really doing
> anything useful for me.
>

Sorry, I didn't realize that the Cooperators were all being given a
reference to the same generator.  That's a useful pattern.

Jason
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20111026/4efb31c4/attachment-0001.html>

From terry at jon.es  Wed Oct 26 09:31:40 2011
From: terry at jon.es (Terry Jones)
Date: Wed, 26 Oct 2011 11:31:40 -0400
Subject: [Twisted-Python] running 1,000,000 tasks, 40 at-a-time
In-Reply-To: Your message at 11:08:33 on Wednesday, 26 October 2011
References: <CA+Pf4UDBoVWzFKcivN5_zGo+Cm+SzoJKJcp0YKhS5_dhtjnucQ@mail.gmail.com>
	<20136.6056.187937.971868@jon.es>
	<CA+Pf4UD6HbmFCSH3U4eV0+bv1yx_8Vt=AAqDNPxcoCSxzLrKiw@mail.gmail.com>
Message-ID: <20136.10204.489371.262209@jon.es>

Hi Jason

> I don't see anything in task.Cooperator to limit the # of
> simultaneously-running tasks.  Am I missing something?

I'm not sure, but I think so.

It does limit the number of simultaneously-running tasks.

> I guess, technically, could write my own scheduler that limits the # of
> simultaneously-running tasks.  But, then task.Cooperator isn't really
> doing anything useful for me.

I think you need to look at the code more closely (and try using it). The
fact that there's a generator that is yielding deferreds one by one and
that you pass that generator to coop.coiterate the # of simultaneous tasks
that you want has the effect of only launching that many tasks at once and
the cooperator just pulls a new one from the iterator/generator when one of
the previous jobs finishes. It's a bit subtle, but I think it's what you
want. Give the code a try & see :-)

T



From gxti at partiallystapled.com  Wed Oct 26 09:58:05 2011
From: gxti at partiallystapled.com (Michael Tharp)
Date: Wed, 26 Oct 2011 11:58:05 -0400
Subject: [Twisted-Python] Docs HTML suggestion/request for moving
 between versions.
In-Reply-To: <4EA8274E.9070704@imperial.ac.uk>
References: <4EA8274E.9070704@imperial.ac.uk>
Message-ID: <4EA82E0D.6080805@partiallystapled.com>

On 10/26/2011 11:29 AM, Phil Mayers wrote:
> Obviously it's tricky to force Google to put "current" at the top! But
> could we maybe have a little<select>  dropdown in the top-right that
> shows the version, and lets you pick a new one and have the page reload?

Other possibilities:

- Add a big yellow "this is for a prior version, click here to see the 
latest version of this page" with a direct link to the same page in the 
current documentation set.

- Make a symlink called "current" or "latest" that points the latest 
release and use robots.txt to prohibit search engines from indexing the 
version-specific doc sets. Google's "sitemap" feature might be useful 
here, I've never used it and I don't know if it actually changes search 
  result priorities.

Both of these are of course compatible with your original suggestion, so 
implementing all three would be possible and useful. Studying other 
projects to see how they deal with this could be insightful, but for 
example PostgreSQL has the same problem -- even though they have a 
'current' symlink, the top result for 'postgresql truncate command' is 
from 8.3 which is three releases out of date.



From itamar at itamarst.org  Wed Oct 26 19:29:51 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 26 Oct 2011 21:29:51 -0400
Subject: [Twisted-Python] First pre-release of Twisted 11.1.0
In-Reply-To: <AC3E2D8E-3874-4810-9DAB-9C95841228D6@twistedmatrix.com>
References: <4EA18188.2040706@free.fr>
	<AC3E2D8E-3874-4810-9DAB-9C95841228D6@twistedmatrix.com>
Message-ID: <1319678991.2042.20.camel@blake>

On Wed, 2011-10-26 at 07:09 -0400, Glyph wrote:
> 
> On Oct 21, 2011, at 10:28 AM, Thomas Hervé wrote:
> 
> > * A special mention to the new abortConnection support on TCP and
> > SSL
> >   connections, heroically pushed by Itamar and Jean-Paul, and the
> >   oldest ticket closed by this release.
> 
> After doing some testing of my own, I am discovering that there may be
> some issues with the prerelease in this area.  I'm getting this
> traceback when running Calendar Server under a load simulator:

I opened a ticket:
http://twistedmatrix.com/trac/ticket/5341

I've proven to myself that half-close is broken, but I still haven't
managed to actually reproduce this problem. Reading the code it is clear
it can only happen in half-close code paths, though.





From exarkun at twistedmatrix.com  Thu Oct 27 13:41:39 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 27 Oct 2011 19:41:39 -0000
Subject: [Twisted-Python] Status of the Bazaar mirror
Message-ID: <20111027194139.23178.1229881830.divmod.xquotient.741@localhost.localdomain>

Hello committers,

There's a new svn post-commit hook that should keep the bzr mirror up to 
date.  It might slow down commits a little bit, maybe by 10 seconds or 
so.  You can find the bzr mirror at 
<http://svn.twistedmatrix.com/svn/Twisted> (/trunk, /branches/halfclose- 
tls-5341, etc).  Let me know if you notice any problems with it.

Thanks to Adi Roiban for writing the scripts to keep the mirror up to 
date and to James Knight for pointing out flock(1) as a way to avoid 
problems with concurrency.

Jean-Paul



From exarkun at twistedmatrix.com  Thu Oct 27 14:44:27 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 27 Oct 2011 20:44:27 -0000
Subject: [Twisted-Python] Status of the Bazaar mirror
In-Reply-To: <20111027194139.23178.1229881830.divmod.xquotient.741@localhost.localdomain>
References: <20111027194139.23178.1229881830.divmod.xquotient.741@localhost.localdomain>
Message-ID: <20111027204427.23178.452014299.divmod.xquotient.742@localhost.localdomain>

On 07:41 pm, exarkun at twistedmatrix.com wrote:
>Hello committers,
>
>There's a new svn post-commit hook that should keep the bzr mirror up 
>to
>date.  It might slow down commits a little bit, maybe by 10 seconds or
>so.  You can find the bzr mirror at
><http://svn.twistedmatrix.com/svn/Twisted> (/trunk, 
>/branches/halfclose-

Oops.  The actual URL is:

    http://svn.twistedmatrix.com/bzr/Twisted>
>tls-5341, etc).  Let me know if you notice any problems with it.
>
>Thanks to Adi Roiban for writing the scripts to keep the mirror up to
>date and to James Knight for pointing out flock(1) as a way to avoid
>problems with concurrency.
>
>Jean-Paul
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From akrherz at gmail.com  Fri Oct 28 16:21:41 2011
From: akrherz at gmail.com (Daryl Herzmann)
Date: Fri, 28 Oct 2011 17:21:41 -0500
Subject: [Twisted-Python] Ideas on limiting/throttling spawnProcess
Message-ID: <CALOVXPdC2RTD=5EtneE-yNou-a=4d3MkHAGDDT2RqsJd_xMKGg@mail.gmail.com>

Hi,

I have an application that ingests data and does a reactor.spawnProcess()
for each chunk of data (a product) to pass it as STDIN to a compiled binary
and then I harvest the STDOUT. It has been working well, but I have an issue
when my data rates get too high and the machine gets overloaded with spawned
processes (I think) and starts running out of file descriptors (yes I can
raise it :) causing all sorts of pain.  I'm wondering about a mechanism to
throttle the number of spawned processes going at one time?  It'd be nice to
only have 10 of these spawned processes going at any one time.  Thanks for
your ideas :)

daryl

code snipet:

class SHEFIT(protocol.ProcessProtocol):
    def __init__(self, tp):
        self.tp = tp
        self.data = ""

    def connectionMade(self):
        self.transport.write( self.tp.raw )
        self.transport.closeStdin()

    def outReceived(self, data):
        self.data = self.data + data

    def errReceived(self, data):
        print "errReceived! with %d bytes!" % len(data)
        print data

    def outConnectionLost(self):
        really_process(self.tp, self.data)

def got_product():
    shef = SHEFIT( tp )
    reactor.spawnProcess(shef, "shefit", ["shefit"], {})

def really_process(tp,data):
    print 'Do some work'



From donal.mcmullan at gmail.com  Fri Oct 28 16:39:49 2011
From: donal.mcmullan at gmail.com (Donal McMullan)
Date: Sat, 29 Oct 2011 11:39:49 +1300
Subject: [Twisted-Python] Ideas on limiting/throttling spawnProcess
In-Reply-To: <CALOVXPdC2RTD=5EtneE-yNou-a=4d3MkHAGDDT2RqsJd_xMKGg@mail.gmail.com>
References: <CALOVXPdC2RTD=5EtneE-yNou-a=4d3MkHAGDDT2RqsJd_xMKGg@mail.gmail.com>
Message-ID: <DB7A4B91-39EB-4D1C-A4D5-741F52430BC9@gmail.com>

I think twisted.internet.defer.DeferredSemaphore is designed for this. John Paul Calderone answers a similar question in detail:
http://stackoverflow.com/questions/2861858/queue-remote-calls-to-a-python-twisted-perspective-broker

Donal McMullan


On 29/10/2011, at 11:21 AM, Daryl Herzmann wrote:

> Hi,
> 
> I have an application that ingests data and does a reactor.spawnProcess()
> for each chunk of data (a product) to pass it as STDIN to a compiled binary
> and then I harvest the STDOUT. It has been working well, but I have an issue
> when my data rates get too high and the machine gets overloaded with spawned
> processes (I think) and starts running out of file descriptors (yes I can
> raise it :) causing all sorts of pain.  I'm wondering about a mechanism to
> throttle the number of spawned processes going at one time?  It'd be nice to
> only have 10 of these spawned processes going at any one time.  Thanks for
> your ideas :)
> 
> daryl
> 
> code snipet:
> 
> class SHEFIT(protocol.ProcessProtocol):
>    def __init__(self, tp):
>        self.tp = tp
>        self.data = ""
> 
>    def connectionMade(self):
>        self.transport.write( self.tp.raw )
>        self.transport.closeStdin()
> 
>    def outReceived(self, data):
>        self.data = self.data + data
> 
>    def errReceived(self, data):
>        print "errReceived! with %d bytes!" % len(data)
>        print data
> 
>    def outConnectionLost(self):
>        really_process(self.tp, self.data)
> 
> def got_product():
>    shef = SHEFIT( tp )
>    reactor.spawnProcess(shef, "shefit", ["shefit"], {})
> 
> def really_process(tp,data):
>    print 'Do some work'
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From ntoper at gmail.com  Sat Oct 29 01:10:00 2011
From: ntoper at gmail.com (Nicolas Toper)
Date: Sat, 29 Oct 2011 09:10:00 +0200
Subject: [Twisted-Python] Ideas on limiting/throttling spawnProcess
In-Reply-To: <DB7A4B91-39EB-4D1C-A4D5-741F52430BC9@gmail.com>
References: <CALOVXPdC2RTD=5EtneE-yNou-a=4d3MkHAGDDT2RqsJd_xMKGg@mail.gmail.com>
	<DB7A4B91-39EB-4D1C-A4D5-741F52430BC9@gmail.com>
Message-ID: <CAJZoT5BirnFrca71jbnSa7FwysRk06cSUNKrh8EP28SWAerggA@mail.gmail.com>

For a similar use case, we're using a combination of cooperator with
defertoprocess.

I can explain more if anyone's interested.
Le 29 oct. 2011 00:41, "Donal McMullan" <donal.mcmullan at gmail.com> a écrit :

> I think twisted.internet.defer.DeferredSemaphore is designed for this. John
> Paul Calderone answers a similar question in detail:
>
> http://stackoverflow.com/questions/2861858/queue-remote-calls-to-a-python-twisted-perspective-broker
>
> Donal McMullan
>
>
> On 29/10/2011, at 11:21 AM, Daryl Herzmann wrote:
>
> > Hi,
> >
> > I have an application that ingests data and does a reactor.spawnProcess()
> > for each chunk of data (a product) to pass it as STDIN to a compiled
> binary
> > and then I harvest the STDOUT. It has been working well, but I have an
> issue
> > when my data rates get too high and the machine gets overloaded with
> spawned
> > processes (I think) and starts running out of file descriptors (yes I can
> > raise it :) causing all sorts of pain.  I'm wondering about a mechanism
> to
> > throttle the number of spawned processes going at one time?  It'd be nice
> to
> > only have 10 of these spawned processes going at any one time.  Thanks
> for
> > your ideas :)
> >
> > daryl
> >
> > code snipet:
> >
> > class SHEFIT(protocol.ProcessProtocol):
> >    def __init__(self, tp):
> >        self.tp = tp
> >        self.data = ""
> >
> >    def connectionMade(self):
> >        self.transport.write( self.tp.raw )
> >        self.transport.closeStdin()
> >
> >    def outReceived(self, data):
> >        self.data = self.data + data
> >
> >    def errReceived(self, data):
> >        print "errReceived! with %d bytes!" % len(data)
> >        print data
> >
> >    def outConnectionLost(self):
> >        really_process(self.tp, self.data)
> >
> > def got_product():
> >    shef = SHEFIT( tp )
> >    reactor.spawnProcess(shef, "shefit", ["shefit"], {})
> >
> > def really_process(tp,data):
> >    print 'Do some work'
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20111029/930c1428/attachment-0002.html>

From itamar at itamarst.org  Sat Oct 29 13:18:22 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Sat, 29 Oct 2011 15:18:22 -0400
Subject: [Twisted-Python] Moving tickets forward
Message-ID: <1319915902.2042.51.camel@blake>

Ticket #3690 was filed as "serial ports do not call connectionLost on
their protocol", but along the way became a ticket for testing *all* of
the serial port code. Since the latter is much harder, it got stuck in
addressing review comments, and the simpler original problem was not
fixed. In this case, the perfect was the enemy of the good.

To prevent this sort of thing, if you end up enlarging the scope of a
ticket dramatically, please open a new ticket and divide the work up.
Splitting up large amounts of work into smaller units is good even if
the scope of the ticket hasn't changed. 

Smaller units of work are easier on everyone, developers and reviewers;
please look for opportunities to break up tickets into multiple smaller
tickets if that will help get code merged.




From exarkun at twistedmatrix.com  Sat Oct 29 14:23:27 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 29 Oct 2011 20:23:27 -0000
Subject: [Twisted-Python] Moving tickets forward
In-Reply-To: <1319915902.2042.51.camel@blake>
References: <1319915902.2042.51.camel@blake>
Message-ID: <20111029202327.23178.588469303.divmod.xquotient.798@localhost.localdomain>

On 07:18 pm, itamar at itamarst.org wrote:
>Ticket #3690 was filed as "serial ports do not call connectionLost on
>their protocol", but along the way became a ticket for testing *all* of

I don't think this is quite right.  The blocker was having *any* tests.
>the serial port code. Since the latter is much harder, it got stuck in
>addressing review comments, and the simpler original problem was not
>fixed. In this case, the perfect was the enemy of the good.
>
>To prevent this sort of thing, if you end up enlarging the scope of a
>ticket dramatically, please open a new ticket and divide the work up.
>Splitting up large amounts of work into smaller units is good even if
>the scope of the ticket hasn't changed.
>
>Smaller units of work are easier on everyone, developers and reviewers;
>please look for opportunities to break up tickets into multiple smaller
>tickets if that will help get code merged.

I agree with this.  However, this doesn't mean that untested changes can 
go in (not that I think you're suggesting otherwise).
The serial port case was (and is) challenging because the code had no 
test coverage at all (#3690 adds a small bit of coverage), so no change 
was possible without figuring out a testing strategy.  Even *manual* 
testing is challenging - I had a serial device at one port but I can't 
find the cable anymore.  It would have been nice if someone had thought 
to use the more focused testing approach (that #3690 ended up taking) 
earlier on in the ticket's life.

Jean-Paul



From exarkun at twistedmatrix.com  Sat Oct 29 22:05:24 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 30 Oct 2011 04:05:24 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1319947524.79.736438069@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20111030/cce01b3c/attachment-0001.html>

From akrherz at iastate.edu  Mon Oct 31 07:22:30 2011
From: akrherz at iastate.edu (Daryl Herzmann)
Date: Mon, 31 Oct 2011 08:22:30 -0500
Subject: [Twisted-Python] Ideas on limiting/throttling spawnProcess
In-Reply-To: <CAJZoT5BirnFrca71jbnSa7FwysRk06cSUNKrh8EP28SWAerggA@mail.gmail.com>
References: <CALOVXPdC2RTD=5EtneE-yNou-a=4d3MkHAGDDT2RqsJd_xMKGg@mail.gmail.com>
	<DB7A4B91-39EB-4D1C-A4D5-741F52430BC9@gmail.com>
	<CAJZoT5BirnFrca71jbnSa7FwysRk06cSUNKrh8EP28SWAerggA@mail.gmail.com>
Message-ID: <CALOVXPejfK0MffbgkGy6XgXcU1ejx0Ttq495J+m6bZxqPC=16w@mail.gmail.com>

On Sat, Oct 29, 2011 at 2:10 AM, Nicolas Toper <ntoper at gmail.com> wrote:
> For a similar use case, we're using a combination of cooperator with
> defertoprocess.
>
> I can explain more if anyone's interested.

I would certainly be interested :)  I'm having a difficult time
understanding how the pieces fit together.  Thank you!

daryl



From tobias.oberstein at tavendo.de  Mon Oct 31 09:21:42 2011
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Mon, 31 Oct 2011 08:21:42 -0700
Subject: [Twisted-Python] Autobahn WebSockets 0.4.3
Message-ID: <634914A010D0B943A035D226786325D42D0B0D8512@EXVMBX020-12.exch020.serverdata.net>

New release 0.4.3 of Autobahn WebSockets including:

+ Hybi-17 support
+ TLS (secure WebSocket)
+ lots of new options
+ improved docs and tutorials
+ close behavior coverage for testsuite
+ many small things I forgot

Special thanks to Peter Thorson for significant code contributions and
fruitful discussions!
Peter works on a  C++/ASIO-based WebSocket client/server framework you
may checkout here https://github.com/zaphoyd/websocketpp

Updated Python package is here:

http://pypi.python.org/pypi/autobahn

Updated test suite reports are available under

http://www.tavendo.de/autobahn/testsuite.html

including mobile clients and servers.

Cheers,
Tobias



From jml at mumak.net  Mon Oct 31 09:22:44 2011
From: jml at mumak.net (Jonathan Lange)
Date: Mon, 31 Oct 2011 11:22:44 -0400
Subject: [Twisted-Python] [Divmod-users] [ANN] Pyflakes 0.5.0
In-Reply-To: <CAHZ8tnZQCb3NSivPQ886TXjRuvySX_hMNzvXi2Cw82xoq3G_1A@mail.gmail.com>
References: <CAMcKhMQy_fnb13Co0s6y+LKgsizeMJTUFqGaPQocaUT0N=VgGQ@mail.gmail.com>
	<CAHZ8tnYW91swPPxOhfEDwm9eykYPceZB-CrMaPHD+TmkD0gcSg@mail.gmail.com>
	<CAMcKhMQLV_U2Z6ddFRS2-izD7iODVORo94ac68sAS2HtE8EBGA@mail.gmail.com>
	<CAHZ8tna9ob7bQm-qFXPqXwZVPb5M01apwhNVUPcG39esmkPGvw@mail.gmail.com>
	<CAMcKhMRE=7+ASO3mfTTLyQAqdSHArUKPXYp4MRb6qE2rxo-J8A@mail.gmail.com>
	<CAHZ8tnZQCb3NSivPQ886TXjRuvySX_hMNzvXi2Cw82xoq3G_1A@mail.gmail.com>
Message-ID: <CAHZ8tnbGMBi6yXxAmpkmSiZM2V8OCGRDB1D6TR4sDq=D94YbrA@mail.gmail.com>

On Mon, Sep 5, 2011 at 8:56 AM, Jonathan Lange <jml at mumak.net> wrote:
> On Mon, Sep 5, 2011 at 1:38 PM, Tristan Seligmann
> <mithrandi at mithrandi.net> wrote:
> ...
>> The branch is constructed in a way that (I believe) can't be merged
>> into the "combined" trunk, so I guess the first step is to rebuild it
>> on top of the divmod.org repo, and then put it up for merge on
>> Launchpad. I'll see what I can do about that, even if I can't promise
>> you a review.
>
> I can take care of the "rebuilding" part.
>

Done. Finally. https://code.launchpad.net/~jml/divmod.org/duplicate-class-defs/+merge/80813

Sorry for the delay.

jml



From ntoper at gmail.com  Mon Oct 31 14:43:49 2011
From: ntoper at gmail.com (Nicolas Toper)
Date: Mon, 31 Oct 2011 21:43:49 +0100
Subject: [Twisted-Python] Ideas on limiting/throttling spawnProcess
In-Reply-To: <CALOVXPejfK0MffbgkGy6XgXcU1ejx0Ttq495J+m6bZxqPC=16w@mail.gmail.com>
References: <CALOVXPdC2RTD=5EtneE-yNou-a=4d3MkHAGDDT2RqsJd_xMKGg@mail.gmail.com>
	<DB7A4B91-39EB-4D1C-A4D5-741F52430BC9@gmail.com>
	<CAJZoT5BirnFrca71jbnSa7FwysRk06cSUNKrh8EP28SWAerggA@mail.gmail.com>
	<CALOVXPejfK0MffbgkGy6XgXcU1ejx0Ttq495J+m6bZxqPC=16w@mail.gmail.com>
Message-ID: <CAJZoT5A_PqKU_xcapXHwzi9x5AMG3fuo9BkDw8Tn_5geGFzqAw@mail.gmail.com>

def parallel(iterable, count, callable, *args, **named):
    #Copy/paste from http://jcalderone.livejournal.com/24285.html
    #
http://oubiwann.blogspot.com/2008/06/async-batching-with-twisted-walkthrough.html
    coop = task.Cooperator()
    work = (callable(elem, *args, **named) for elem in iterable)
    return defer.DeferredList([coop.coiterate(work) for i in xrange(count)])


def _localSend(messages):
    return deferToProcessPool(reactor, _p, makeEmails, messages, logger)

_p = Pool(5)

def _localDeliver(messages):
   #... Some part left out
    d = parallel(messages,2, _localSend)
    d.addErrback(_log_error)
    return d

_localDeliver call parallel: it will launch at most 2 deferred executing
localSend(messages). These are actually deferToProcess

This is a very very powerful compbination and exarkun really nailed it in
his blog :)


On Mon, Oct 31, 2011 at 2:22 PM, Daryl Herzmann <akrherz at iastate.edu> wrote:

> On Sat, Oct 29, 2011 at 2:10 AM, Nicolas Toper <ntoper at gmail.com> wrote:
> > For a similar use case, we're using a combination of cooperator with
> > defertoprocess.
> >
> > I can explain more if anyone's interested.
>
> I would certainly be interested :)  I'm having a difficult time
> understanding how the pieces fit together.  Thank you!
>
> daryl
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20111031/0450503f/attachment-0001.html>

From mostawesomedude at gmail.com  Mon Oct 31 15:00:17 2011
From: mostawesomedude at gmail.com (Corbin Simpson)
Date: Mon, 31 Oct 2011 14:00:17 -0700
Subject: [Twisted-Python] Autobahn WebSockets 0.4.3
In-Reply-To: <634914A010D0B943A035D226786325D42D0B0D8512@EXVMBX020-12.exch020.serverdata.net>
References: <634914A010D0B943A035D226786325D42D0B0D8512@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <CALiqSLeEh_k7AfXCnKaf_ChwC-Z=nbU7-f0QeX-ZO0+qxGn9yA@mail.gmail.com>

On Mon, Oct 31, 2011 at 8:21 AM, Tobias Oberstein
<tobias.oberstein at tavendo.de> wrote:
> New release 0.4.3 of Autobahn WebSockets including:
>
> + Hybi-17 support
> + TLS (secure WebSocket)
> + lots of new options
> + improved docs and tutorials
> + close behavior coverage for testsuite
> + many small things I forgot
>
> Special thanks to Peter Thorson for significant code contributions and
> fruitful discussions!
> Peter works on a  C++/ASIO-based WebSocket client/server framework you
> may checkout here https://github.com/zaphoyd/websocketpp
>
> Updated Python package is here:
>
> http://pypi.python.org/pypi/autobahn
>
> Updated test suite reports are available under
>
> http://www.tavendo.de/autobahn/testsuite.html
>
> including mobile clients and servers.

Hi, how do I run the unit tests for Autobahn? Trial doesn't work, and
there don't appear to be any instances of unittest's classes in the
tree.

Also, is it possible to run the Autobahn pub-sub and RPC stuff over a
different transport than WebSockets, like plain TCP?

~ C.

-- 
When the facts change, I change my mind. What do you do, sir? ~ Keynes

Corbin Simpson
<MostAwesomeDude at gmail.com>



From tobias.oberstein at tavendo.de  Mon Oct 31 15:27:52 2011
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Mon, 31 Oct 2011 14:27:52 -0700
Subject: [Twisted-Python] Autobahn WebSockets 0.4.3
In-Reply-To: <CALiqSLeEh_k7AfXCnKaf_ChwC-Z=nbU7-f0QeX-ZO0+qxGn9yA@mail.gmail.com>
References: <634914A010D0B943A035D226786325D42D0B0D8512@EXVMBX020-12.exch020.serverdata.net>
	<CALiqSLeEh_k7AfXCnKaf_ChwC-Z=nbU7-f0QeX-ZO0+qxGn9yA@mail.gmail.com>
Message-ID: <634914A010D0B943A035D226786325D42D0B0D874E@EXVMBX020-12.exch020.serverdata.net>

> Hi, how do I run the unit tests for Autobahn? Trial doesn't work, and there
> don't appear to be any instances of unittest's classes in the tree.

Please see here

http://www.tavendo.de/autobahn/testsuite.html#test_browsers

to get started.

What do you want to test? Own client, own server?

> 
> Also, is it possible to run the Autobahn pub-sub and RPC stuff over a
> different transport than WebSockets, like plain TCP?

In principle, the RPC and PubSub protocol is designed to work
over

* reliable, ordered, full-duplex message channel
* any serialization format that supports lists and primitive types

Currently, the only binding is WebSocket/JSON.

Raw TCP as a transport .. well, you need some message framing
anyway. WebSocket is already quite bare metal. 

What are you thinking of? Whats your use case?

> 
> ~ C.
> 
> --
> When the facts change, I change my mind. What do you do, sir? ~ Keynes
> 
> Corbin Simpson
> <MostAwesomeDude at gmail.com>
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From dialtone at gmail.com  Mon Oct 31 15:49:38 2011
From: dialtone at gmail.com (Valentino Volonghi)
Date: Mon, 31 Oct 2011 14:49:38 -0700
Subject: [Twisted-Python] Ideas on limiting/throttling spawnProcess
In-Reply-To: <CALOVXPdC2RTD=5EtneE-yNou-a=4d3MkHAGDDT2RqsJd_xMKGg@mail.gmail.com>
References: <CALOVXPdC2RTD=5EtneE-yNou-a=4d3MkHAGDDT2RqsJd_xMKGg@mail.gmail.com>
Message-ID: <2D30E706-2FDE-498D-82CB-0F71C5F7E3BA@gmail.com>


On 28 Oct 2011, at 15:21, Daryl Herzmann wrote:

> Hi,
> 
> I have an application that ingests data and does a reactor.spawnProcess()
> for each chunk of data (a product) to pass it as STDIN to a compiled binary
> and then I harvest the STDOUT. It has been working well, but I have an issue
> when my data rates get too high and the machine gets overloaded with spawned
> processes (I think) and starts running out of file descriptors (yes I can
> raise it :) causing all sorts of pain.  I'm wondering about a mechanism to
> throttle the number of spawned processes going at one time?  It'd be nice to
> only have 10 of these spawned processes going at any one time.  Thanks for
> your ideas :)


Another alternative is to use turtl which was written for a similar purpose.

http://pypi.python.org/pypi/turtl
https://bitbucket.org/adroll/turtl/
https://launchpad.net/turtl
http://twistedmatrix.com/pipermail/twisted-python/2011-August/024415.html

-- 
Valentino Volonghi
http://www.adroll.com




From mostawesomedude at gmail.com  Mon Oct 31 15:53:05 2011
From: mostawesomedude at gmail.com (Corbin Simpson)
Date: Mon, 31 Oct 2011 14:53:05 -0700
Subject: [Twisted-Python] Autobahn WebSockets 0.4.3
In-Reply-To: <634914A010D0B943A035D226786325D42D0B0D874E@EXVMBX020-12.exch020.serverdata.net>
References: <634914A010D0B943A035D226786325D42D0B0D8512@EXVMBX020-12.exch020.serverdata.net>
	<CALiqSLeEh_k7AfXCnKaf_ChwC-Z=nbU7-f0QeX-ZO0+qxGn9yA@mail.gmail.com>
	<634914A010D0B943A035D226786325D42D0B0D874E@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <CALiqSLeh_3UQ49kzT-zt3=QBy2Vv3rGFx_RD-iwWwjEiKX21MQ@mail.gmail.com>

On Mon, Oct 31, 2011 at 2:27 PM, Tobias Oberstein
<tobias.oberstein at tavendo.de> wrote:
>> Hi, how do I run the unit tests for Autobahn? Trial doesn't work, and there
>> don't appear to be any instances of unittest's classes in the tree.
>
> Please see here
>
> http://www.tavendo.de/autobahn/testsuite.html#test_browsers
>
> to get started.
>
> What do you want to test? Own client, own server?

I wanted to test Autobahn's internals. Unit tests, not integration
tests. The integration test stuff is pretty cool, too, but I was
hoping for tests which verify Autobahn's behavior internally.

>> Also, is it possible to run the Autobahn pub-sub and RPC stuff over a
>> different transport than WebSockets, like plain TCP?
>
> In principle, the RPC and PubSub protocol is designed to work
> over
>
> * reliable, ordered, full-duplex message channel
> * any serialization format that supports lists and primitive types
>
> Currently, the only binding is WebSocket/JSON.
>
> Raw TCP as a transport .. well, you need some message framing
> anyway. WebSocket is already quite bare metal.

Well, TCP would fulfill the channel, and something like AMP could be
the serializer, I guess. I'm not super-picky. I just wanted to know
how flexible the whole thing is.

~ C.

-- 
When the facts change, I change my mind. What do you do, sir? ~ Keynes

Corbin Simpson
<MostAwesomeDude at gmail.com>



From tobias.oberstein at tavendo.de  Mon Oct 31 16:25:05 2011
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Mon, 31 Oct 2011 15:25:05 -0700
Subject: [Twisted-Python] Autobahn WebSockets 0.4.3
In-Reply-To: <CALiqSLeh_3UQ49kzT-zt3=QBy2Vv3rGFx_RD-iwWwjEiKX21MQ@mail.gmail.com>
References: <634914A010D0B943A035D226786325D42D0B0D8512@EXVMBX020-12.exch020.serverdata.net>
	<CALiqSLeEh_k7AfXCnKaf_ChwC-Z=nbU7-f0QeX-ZO0+qxGn9yA@mail.gmail.com>
	<634914A010D0B943A035D226786325D42D0B0D874E@EXVMBX020-12.exch020.serverdata.net>
	<CALiqSLeh_3UQ49kzT-zt3=QBy2Vv3rGFx_RD-iwWwjEiKX21MQ@mail.gmail.com>
Message-ID: <634914A010D0B943A035D226786325D42D0B0D877E@EXVMBX020-12.exch020.serverdata.net>

> > What do you want to test? Own client, own server?
> 
> I wanted to test Autobahn's internals. Unit tests, not integration tests. The
> integration test stuff is pretty cool, too, but I was hoping for tests which
> verify Autobahn's behavior internally.

You can use Autobahn to test Autobahn of course.

Autobahn's test approach is tailored towards it's domain (communication
protocols) and based on the following perspective:

If you have a black box, that behaves to a protocol spec regarding
all it's externally visible behavior, you can call that black box conforming
to the protocol.

Whether you then have unit tests for stuff that happens within the black
box is less relevant, as long as you have covered all the spec with
behavioral test cases.

When you only have unit tests for stuff happening inside the box,
you still can't say if the box conforms to the spec. It may pass all
unit tests and fail when talking to the world.

For protocols, the reason for this is: any unit test by definition
misses an essential part: the peer you communicate with.

As an example, instead of writing a unit test that checks whether
a UTF-8 decoding function raises upon invalid sequences, 
execute a fuzzing test case where the fuzzer will actually send
the tested implementation invalid UTF-8 and check the externally
visible behavior.



From mostawesomedude at gmail.com  Mon Oct 31 17:32:03 2011
From: mostawesomedude at gmail.com (Corbin Simpson)
Date: Mon, 31 Oct 2011 16:32:03 -0700
Subject: [Twisted-Python] Autobahn WebSockets 0.4.3
In-Reply-To: <634914A010D0B943A035D226786325D42D0B0D877E@EXVMBX020-12.exch020.serverdata.net>
References: <634914A010D0B943A035D226786325D42D0B0D8512@EXVMBX020-12.exch020.serverdata.net>
	<CALiqSLeEh_k7AfXCnKaf_ChwC-Z=nbU7-f0QeX-ZO0+qxGn9yA@mail.gmail.com>
	<634914A010D0B943A035D226786325D42D0B0D874E@EXVMBX020-12.exch020.serverdata.net>
	<CALiqSLeh_3UQ49kzT-zt3=QBy2Vv3rGFx_RD-iwWwjEiKX21MQ@mail.gmail.com>
	<634914A010D0B943A035D226786325D42D0B0D877E@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <CALiqSLd+s6E1=6yTvQDE=4Zw8p+SGtUb3=3pY4zP=OBGX0cefA@mail.gmail.com>

On Mon, Oct 31, 2011 at 3:25 PM, Tobias Oberstein
<tobias.oberstein at tavendo.de> wrote:
> You can use Autobahn to test Autobahn of course.
>
> Autobahn's test approach is tailored towards it's domain (communication
> protocols) and based on the following perspective:
>
> If you have a black box, that behaves to a protocol spec regarding
> all it's externally visible behavior, you can call that black box conforming
> to the protocol.
>
> Whether you then have unit tests for stuff that happens within the black
> box is less relevant, as long as you have covered all the spec with
> behavioral test cases.
>
> When you only have unit tests for stuff happening inside the box,
> you still can't say if the box conforms to the spec. It may pass all
> unit tests and fail when talking to the world.
>
> For protocols, the reason for this is: any unit test by definition
> misses an essential part: the peer you communicate with.
>
> As an example, instead of writing a unit test that checks whether
> a UTF-8 decoding function raises upon invalid sequences,
> execute a fuzzing test case where the fuzzer will actually send
> the tested implementation invalid UTF-8 and check the externally
> visible behavior.

Okay. This seems reasonable. I really only have two reasons for doing
unit tests on top of this, and both are kinda orthogonal: Isolation
and specificity. Clearly, I need to do less TDD.

Anyway, I'm running the fuzzer against txWS, and things appear to be
working. Thanks for a useful tool!

-- 
When the facts change, I change my mind. What do you do, sir? ~ Keynes

Corbin Simpson
<MostAwesomeDude at gmail.com>



From iapyeh at gmail.com  Mon Oct 31 21:36:49 2011
From: iapyeh at gmail.com (Iap)
Date: Tue, 1 Nov 2011 11:36:49 +0800
Subject: [Twisted-Python] Autobahn WebSockets 0.4.3
In-Reply-To: <CALiqSLd+s6E1=6yTvQDE=4Zw8p+SGtUb3=3pY4zP=OBGX0cefA@mail.gmail.com>
References: <634914A010D0B943A035D226786325D42D0B0D8512@EXVMBX020-12.exch020.serverdata.net>
	<CALiqSLeEh_k7AfXCnKaf_ChwC-Z=nbU7-f0QeX-ZO0+qxGn9yA@mail.gmail.com>
	<634914A010D0B943A035D226786325D42D0B0D874E@EXVMBX020-12.exch020.serverdata.net>
	<CALiqSLeh_3UQ49kzT-zt3=QBy2Vv3rGFx_RD-iwWwjEiKX21MQ@mail.gmail.com>
	<634914A010D0B943A035D226786325D42D0B0D877E@EXVMBX020-12.exch020.serverdata.net>
	<CALiqSLd+s6E1=6yTvQDE=4Zw8p+SGtUb3=3pY4zP=OBGX0cefA@mail.gmail.com>
Message-ID: <CACnFXUtmRO9igXv9TLe12pZ+NgfOjwmmst7HLQFhf1RFXC0ohQ@mail.gmail.com>

>
> working. Thanks for a useful tool!
>

Thanks +1

Iap
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20111101/8e95d3a2/attachment.html>

