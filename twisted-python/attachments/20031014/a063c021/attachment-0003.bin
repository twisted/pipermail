# This is the authentication database part.

from twisted.cred.portal import IRealm
from twisted.cred import credentials
from twisted.cred.checkers import ICredentialsChecker

from twisted.web.resource import IResource
from twisted.web.woven import guard
from twisted.web.woven import interfaces as woveninterfaces
from twisted.python.components import Interface, registerAdapter, Componentized
from twisted.spread import pb

from ratcontrol.web import pages

from twisted.python import log

class RatControlAvatar(Componentized):
    """`Account' object.  Representation of user in the world of RatControl.
    """
    #__implements__ = admin.IQuotientUser

    def __init__(self, username, password, realm):
        """A private initializer, really.
        """
        Componentized.__init__(self)
        self.username = username
        self.password = password
        self.realm = realm

        ## Preferences which are global such as 'batch_size'
        self.preferences = {}
        ## Preferences which are local to a pool, keyed on a tuple of
        ## a tuple of path segments to the pool and the pref name
        ## eg (('Inbox', ), 'begin')
        self.localPreferences = {}

#registerAdapter(models.AvatarModel, RatControlAvatar, woveninterfaces.IModel)

class RatControlRealm:
    """A simple implementor of cred's IRealm.
       For web, this gives us the LoggedIn page.
       For PB, this gives us a reference to the perspective.
    """
    __implements__ = IRealm

    def requestAvatar(self, avatarId, mind, *interfaces):
        log.err("avatar id is %s" % str(avatarId))
        for iface in interfaces:
            if iface is IResource:
                # do web stuff
                if avatarId:
                    resc = pages.LoggedIn(avatarId)
                    #resc.avatar = avatar
                    resc.realm = self
                    return (IResource, resc, resc.logout)
                else:
                    resc = pages.NotLoggedIn()
                    resc.realm = self
                    return (IResource, resc, lambda _: None)
            elif iface is IPerspective:
                self.p = RatControlPerspective("admin")
                self.p.loggedIn = 1
                return (pb.IPerspective, self.p, self.p.logout)

        raise NotImplementedError("Can't support that interface.")

#registerAdapter(models.RealmModel, RatControlRealm, woveninterfaces.IModel)
