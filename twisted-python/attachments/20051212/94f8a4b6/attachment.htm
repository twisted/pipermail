<tt>
Hello,&lt;br&gt;<br>
&lt;br&gt;<br>
I&nbsp;am&nbsp;new&nbsp;to&nbsp;twisted&nbsp;and&nbsp;I&nbsp;have&nbsp;a&nbsp;few&nbsp;questions:&nbsp;I&nbsp;have&nbsp;implemented&nbsp;a&nbsp;TCPServer&lt;br&gt;<br>
and&nbsp;the&nbsp;associated&nbsp;Factory,&nbsp;which&nbsp;manages&nbsp;data&nbsp;and&nbsp;dispatches&nbsp;treatments&lt;br&gt;<br>
(According&nbsp;to&nbsp;the&nbsp;tutorial&nbsp;it's&nbsp;not&nbsp;the&nbsp;best&nbsp;solution&nbsp;but&nbsp;actually&nbsp;this&nbsp;is&nbsp;not&lt;br&gt;<br>
the&nbsp;point&nbsp;;)&nbsp;)&lt;br&gt;<br>
&lt;br&gt;<br>
All&nbsp;of&nbsp;the&nbsp;treatments&nbsp;run&nbsp;in&nbsp;threads&nbsp;and&nbsp;thus&nbsp;use&nbsp;shared&nbsp;data.&nbsp;The&nbsp;allData&lt;br&gt;<br>
dictionnary&nbsp;is&nbsp;critical&nbsp;since&nbsp;it&nbsp;can&nbsp;be&nbsp;used&nbsp;by&nbsp;multiple&nbsp;threads.&nbsp;How&nbsp;can&nbsp;I&nbsp;keep&nbsp;&lt;br&gt;<br>
the&nbsp;allData&nbsp;integrity&nbsp;?&nbsp;Does&nbsp;Twisted&nbsp;core&nbsp;provide&nbsp;such&nbsp;facilites&nbsp;or&nbsp;do&nbsp;I&lt;br&gt;<br>
have&nbsp;to&nbsp;use&nbsp;semaphore&nbsp;or&nbsp;other&nbsp;stuff&nbsp;?&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;br&gt;<br>
class&nbsp;GestionnaireXXX(protocol.Protocol)&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;def&nbsp;dataReceived(self,&nbsp;data):&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;self.factory.dispatch(data)&lt;br&gt;<br>
&lt;br&gt;<br>
class&nbsp;GestionnaireXXXFactory(protocol.ServerFactory):&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;def&nbsp;__init__(self):&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;self.allData&nbsp;=&nbsp;{}&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;self.initData()&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;self._dispatcher&nbsp;=&nbsp;{&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;1:&nbsp;self.alert,&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;4:&nbsp;self.create,&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;}&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;def&nbsp;initData(self):&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;if&nbsp;os.path.isfile(TEMP)&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;self.allData&nbsp;=&nbsp;aot.unjellyFromSource(file(TEMP,&nbsp;'r'))&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;def&nbsp;dispatch(self,&nbsp;data):&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;splitedData&nbsp;=&nbsp;data.split('\n')&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;method&nbsp;=&nbsp;self._dispatcher.get(len(splitedData),&nbsp;self.doNothing)&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;reactor.runInThread(method,&nbsp;splitedData)&lt;br&gt;<br>
&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;def&nbsp;create(self,&nbsp;*data):&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;#&nbsp;Some&nbsp;treatments&nbsp;on&nbsp;allData&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;...&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;aot.jellyToSource(file(TEMP,&nbsp;'w'))&lt;br&gt;<br>
&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;def&nbsp;alert(self,&nbsp;*unused):&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;#&nbsp;XXX&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;sem&nbsp;=&nbsp;DeferredSemaphore()&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;sem.acquire()&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;allDataCopy&nbsp;=&nbsp;self.allData.copy()&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;self.allData.clear()&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;sem.release()&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;#&amp;nbsp;End&nbsp;XXX&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;#&nbsp;some&nbsp;long&nbsp;treatments&nbsp;on&nbsp;allDataCopy&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;...&lt;br&gt;<br>
&lt;br&gt;<br>
Thank's,&lt;br&gt;<br>
&lt;br&gt;<br>
--&lt;br&gt;<br>
Olivier&nbsp;Guilloux&lt;br&gt;<br>
<br>
&lt;br&gt;<br>
<br>

</tt>
