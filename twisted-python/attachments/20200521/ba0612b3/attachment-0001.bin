import time
import threading

from twisted.internet import reactor
from twisted.application import service
from twisted.python import failure, log
from twisted.internet.protocol import Factory, Protocol
from twisted.internet.endpoints import TCP4ServerEndpoint
import logging

# from ray.rllib.env.policy_client import PolicyClient

logging.basicConfig(filename='rllib.log')
logger = logging.getLogger(__name__)
logger.setLevel("INFO")

class MyThread(threading.Thread):
    def __init__(self,stop=False):
        threading.Thread.__init__(self)
        self.stop = stop

    def run(self):
        while not self.stop:
            time.sleep(2)
            logger.info('thread is alive')

class Echo(Protocol):
    def __init__(self):
        self.t = MyThread()
        self.t.daemon = True
        self.t.start()
        # this will freeze everything
        # self.policyClient = PolicyClient("http://localhost:9900")

    # def connectionMade(self):
    #     self.policyClient = PolicyClient("http://localhost:9900")

    def dataReceived(self, data):
        self.transport.write(data)

    def connectionLost(self, reason):
        self.t.stop = True

class EchoFactory(Factory):
    def buildProtocol(self, addr):
        return Echo()

class EchoService(service.Service):

    def startService(self):
        self._port = reactor.listenTCP(8080, EchoFactory())

    def stopService(self):
        return self._port.stopListening()

if __name__ == "__main__":
    endpoint = TCP4ServerEndpoint(reactor, 8080)
    endpoint.listen(EchoFactory())
    reactor.run()