<tt>
&lt;HTML&gt;<br>
&lt;HEAD&gt;<br>
&lt;TITLE&gt;RPC&nbsp;design&nbsp;questions&lt;/TITLE&gt;<br>
&lt;/HEAD&gt;<br>
&lt;BODY&gt;<br>
&lt;FONT&nbsp;FACE=&quot;Calibri,&nbsp;Verdana,&nbsp;Helvetica,&nbsp;Arial&quot;&gt;&lt;SPAN&nbsp;STYLE='font-size:11pt'&gt;I'm&nbsp;currently&nbsp;making&nbsp;some&nbsp;light-weight&nbsp;RPC/PubSub&nbsp;over&nbsp;WebSockets&lt;BR&gt;<br>
using&nbsp;Twisted.&lt;BR&gt;<br>
&lt;BR&gt;<br>
I&nbsp;have&nbsp;two&nbsp;design-like&nbsp;questions&nbsp;where&nbsp;I'd&nbsp;be&nbsp;happy&nbsp;for&nbsp;advice/options&nbsp;...&lt;BR&gt;<br>
&lt;BR&gt;<br>
The&nbsp;first&nbsp;is&nbsp;definitely&nbsp;Twisted&nbsp;related,&nbsp;the&nbsp;second&nbsp;not&nbsp;strictly,&nbsp;..&lt;BR&gt;<br>
&lt;BR&gt;<br>
Tobias&lt;BR&gt;<br>
&lt;BR&gt;<br>
&lt;BR&gt;<br>
1)&lt;BR&gt;<br>
I'd&nbsp;like&nbsp;to&nbsp;chain&nbsp;RPC&nbsp;calls,&nbsp;i.e.&lt;BR&gt;<br>
&lt;BR&gt;<br>
self.call(23,&nbsp;&amp;quot;square&amp;quot;).addCallback(self.call,&nbsp;&amp;quot;sqrt&amp;quot;).addCallback(self.show)&lt;BR&gt;<br>
&lt;BR&gt;<br>
&lt;a&nbsp;href=&quot;https://github.com/oberstet/Autobahn/blob/dev-rpc/demo/rpc/simple/simple_client.py&quot;&gt;https://github.com/oberstet/Autobahn/blob/dev-rpc/demo/rpc/simple/simple_client.py&lt;/a&gt;&lt;BR&gt;<br>
&lt;BR&gt;<br>
self.call(&amp;lt;arg&amp;gt;,&nbsp;&amp;lt;procedure&amp;gt;)&nbsp;will&nbsp;return&nbsp;a&nbsp;deferred,&nbsp;&amp;lt;arg&amp;gt;&nbsp;is&nbsp;the&nbsp;marshalled&nbsp;argument&lt;BR&gt;<br>
for&nbsp;the&nbsp;RPC,&nbsp;and&nbsp;&amp;lt;procedure&amp;gt;&nbsp;is&nbsp;the&nbsp;remote&nbsp;procedure&nbsp;identifier.&lt;BR&gt;<br>
&lt;BR&gt;<br>
Now,&nbsp;the&nbsp;nice&nbsp;thing&nbsp;is,&nbsp;I&nbsp;can&nbsp;chain&nbsp;the&nbsp;result&nbsp;from&nbsp;one&nbsp;call&nbsp;to&nbsp;the&nbsp;next&nbsp;like&nbsp;in&nbsp;the&lt;BR&gt;<br>
example&nbsp;above.&lt;BR&gt;<br>
&lt;BR&gt;<br>
What&nbsp;I&nbsp;find&nbsp;less&nbsp;nice&nbsp;is&nbsp;that&nbsp;I&nbsp;have&nbsp;to&nbsp;have&nbsp;that&nbsp;order&nbsp;:&nbsp;&amp;lt;arg&amp;gt;,&nbsp;&amp;lt;procedure&amp;gt;&lt;BR&gt;<br>
since&nbsp;the&nbsp;result&nbsp;of&nbsp;the&nbsp;first&nbsp;deferred&nbsp;will&nbsp;be&nbsp;passed&nbsp;as&nbsp;the&nbsp;first&nbsp;argument&nbsp;to&lt;BR&gt;<br>
the&nbsp;second,&nbsp;and&nbsp;only&nbsp;then&nbsp;will&nbsp;the&nbsp;additional&nbsp;arguments&nbsp;be&nbsp;passed&nbsp;(in&nbsp;above&lt;BR&gt;<br>
example&nbsp;the&nbsp;&amp;quot;sqrt&amp;quot;)&lt;BR&gt;<br>
&lt;BR&gt;<br>
How&nbsp;can&nbsp;I&nbsp;retain&nbsp;the&nbsp;-&nbsp;which&nbsp;I&nbsp;find&nbsp;-&nbsp;natural&nbsp;order&nbsp;for&nbsp;arguments?&lt;BR&gt;<br>
&lt;BR&gt;<br>
self.call(&amp;lt;procedure&amp;gt;,&nbsp;&amp;lt;arg&amp;gt;)&nbsp;&lt;BR&gt;<br>
self.call(&amp;quot;square&amp;quot;,&nbsp;6).addCallback(self.call,&nbsp;&amp;quot;sqrt&amp;quot;).addCallback(self.show)&lt;BR&gt;<br>
&lt;BR&gt;<br>
=&amp;gt;&nbsp;not&nbsp;working,&nbsp;the&nbsp;2nd&nbsp;self.call&nbsp;receives&nbsp;36,&nbsp;&amp;quot;sqrt&amp;quot;&nbsp;..&lt;BR&gt;<br>
&lt;BR&gt;<br>
&lt;BR&gt;<br>
2)&lt;BR&gt;<br>
The&nbsp;server&nbsp;side&nbsp;methods&nbsp;a&nbsp;hooked&nbsp;up&nbsp;using&nbsp;decorators,&nbsp;like&lt;BR&gt;<br>
&lt;BR&gt;<br>
class&nbsp;SimpleServerProtocol(AutobahnServerProtocol):&lt;BR&gt;<br>
&lt;BR&gt;<br>
   @AutobahnRpc&lt;BR&gt;<br>
   def&nbsp;square(self,&nbsp;arg):&lt;BR&gt;<br>
      return&nbsp;arg&nbsp;*&nbsp;arg&lt;BR&gt;<br>
&lt;BR&gt;<br>
&lt;BR&gt;<br>
&lt;a&nbsp;href=&quot;https://github.com/oberstet/Autobahn/blob/dev-rpc/demo/rpc/simple/simple_server.py&quot;&gt;https://github.com/oberstet/Autobahn/blob/dev-rpc/demo/rpc/simple/simple_server.py&lt;/a&gt;&lt;BR&gt;<br>
&lt;BR&gt;<br>
Here,&nbsp;AutobahnServerProtocol&nbsp;derives&nbsp;(indirectly)&nbsp;from&nbsp;Twisted&nbsp;Protocol.&lt;BR&gt;<br>
&lt;BR&gt;<br>
The&nbsp;decorator&nbsp;will&nbsp;register&nbsp;the&nbsp;method&nbsp;for&nbsp;RPC&nbsp;under&nbsp;&amp;quot;square&amp;quot;.&lt;BR&gt;<br>
&lt;BR&gt;<br>
&lt;a&nbsp;href=&quot;https://github.com/oberstet/Autobahn/blob/dev-rpc/lib/python/autobahn/autobahn.py&quot;&gt;https://github.com/oberstet/Autobahn/blob/dev-rpc/lib/python/autobahn/autobahn.py&lt;/a&gt;&lt;BR&gt;<br>
&lt;BR&gt;<br>
That&nbsp;is&nbsp;all&nbsp;nice&nbsp;and&nbsp;simple,&nbsp;however&nbsp;I&nbsp;am&nbsp;wondering&nbsp;if&nbsp;it's&nbsp;a&nbsp;good&nbsp;idea&nbsp;to&lt;BR&gt;<br>
do&nbsp;that&nbsp;auto-registering&nbsp;on&nbsp;a&nbsp;Protocol&nbsp;derived&nbsp;class.&lt;BR&gt;<br>
&lt;BR&gt;<br>
I&nbsp;mean,&nbsp;the&nbsp;alternative&nbsp;could&nbsp;be&nbsp;having&nbsp;the&nbsp;user&nbsp;call&nbsp;something&nbsp;like&lt;BR&gt;<br>
&lt;BR&gt;<br>
registerRpcObject(&amp;lt;any&nbsp;class&nbsp;instance&nbsp;with&nbsp;RPC&nbsp;decorators&amp;gt;,&nbsp;&amp;lt;base&nbsp;URI&amp;gt;)&lt;BR&gt;<br>
&lt;BR&gt;<br>
in&nbsp;Protocol.connectionMade(),&nbsp;which&nbsp;then&nbsp;would&nbsp;auto-register&nbsp;all&nbsp;decorated&lt;BR&gt;<br>
methods&nbsp;in&nbsp;&amp;lt;any&nbsp;class&nbsp;instance&nbsp;..&amp;gt;&lt;BR&gt;<br>
&lt;BR&gt;<br>
What&nbsp;do&nbsp;you&nbsp;think&nbsp;would&nbsp;be&nbsp;better?&lt;BR&gt;<br>
&lt;BR&gt;<br>
&lt;BR&gt;<br>
&lt;BR&gt;<br>
&amp;nbsp;&lt;BR&gt;<br>
&lt;BR&gt;<br>
&lt;BR&gt;<br>
&lt;/SPAN&gt;&lt;/FONT&gt;<br>
&lt;/BODY&gt;<br>
&lt;/HTML&gt;<br>
<br>

</tt>
