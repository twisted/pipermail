# python imports
import win32serviceutil
import win32service
import win32event
# my imports
from ccservice import CCService
import config
# twisted imports
from twisted.internet.app import Application
from twisted.internet import reactor
from twisted.web import server
from twisted.python.log import startLogging

class TwistedCCService(win32serviceutil.ServiceFramework):
	_svc_name_ = "TwistedClearCaseService"
	_svc_display_name_ = "Twisted ClearCase Service"
	def __init__(self, args):
		win32serviceutil.ServiceFramework.__init__(self, args)
		self.hWaitStop = win32event.CreateEvent(None, 0, 0, None)

	def SvcStop(self):
		self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)
		win32event.SetEvent(self.hWaitStop)

	def SvcDoRun(self):
		# we don't have the console, so we log somewhere
		# the NT service logging facilities probably isn't the right place
		startLogging(open(config.ntServiceLogFile,'a'))
		self.CheckForQuit()
		startTwisted()

	def CheckForQuit(self):
		rv = win32event.WaitForSingleObject(self.hWaitStop, 10.0)
		if not rv == win32event.WAIT_TIMEOUT:
			print "Received Quit from Win32"
			reactor.stop()
		reactor.callLater(1.0, self.CheckForQuit)

def startTwisted():
	app = Application("TwistedCCService")
	r = CCService()
	app.listenTCP(config.portNumber, server.Site(r))
	app.run(save=0)

if __name__=='__main__':
	# you could call startTwisted to run as not-a-service
	# or use it for cross-platform reasons
	win32serviceutil.HandleCommandLine(TwistedCCService)
