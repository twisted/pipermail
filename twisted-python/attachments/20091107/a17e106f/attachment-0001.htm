<tt>
Fantastic,&nbsp;thanks&nbsp;for&nbsp;sharing&nbsp;this&nbsp;code. &nbsp;I&nbsp;will&nbsp;definitely&nbsp;have&nbsp;a&nbsp;look. &nbsp;If&nbsp;it&nbsp;turns&nbsp;out&nbsp;to&lt;br&gt;work&nbsp;for&nbsp;us,&nbsp;would&nbsp;you&nbsp;mind&nbsp;releasing&nbsp;this&nbsp;under&nbsp;a&nbsp;BSD&nbsp;license&nbsp;so&nbsp;we&nbsp;can&nbsp;include&lt;br&gt;it&nbsp;in&nbsp;IPython&nbsp;(BSD&nbsp;open&nbsp;source&nbsp;project)? &nbsp;In&nbsp;either&nbsp;case,&nbsp;the&nbsp;ideas&nbsp;will&nbsp;be&nbsp;&lt;br&gt;<br>
very&nbsp;helpful&nbsp;to&nbsp;us.&lt;br&gt;&lt;br&gt;Cheers,&lt;br&gt;&lt;br&gt;Brian&lt;br&gt;&lt;div&nbsp;class=&quot;h5&quot;&gt;&lt;br&gt;<br>
&lt;/div&gt;&lt;div&nbsp;class=&quot;gmail_quote&quot;&gt;&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;border-left:&nbsp;1px&nbsp;solid&nbsp;rgb(204,&nbsp;204,&nbsp;204);&nbsp;margin:&nbsp;0pt&nbsp;0pt&nbsp;0pt&nbsp;0.8ex;&nbsp;padding-left:&nbsp;1ex;&quot;&gt;It&nbsp;is&nbsp;possible&nbsp;to&nbsp;daemonize&nbsp;a&nbsp;process&nbsp;on&nbsp;Windows.&nbsp;I&nbsp;experimented&nbsp;with&lt;br&gt;<br>
<br>
adding&nbsp;that&nbsp;support&nbsp;to&nbsp;the&nbsp;twistd&nbsp;script,&nbsp;but&nbsp;got&nbsp;swamped&nbsp;with&nbsp;other&lt;br&gt;<br>
work&nbsp;and&nbsp;couldn&amp;#39;t&nbsp;finish&nbsp;it.&nbsp;Below&nbsp;is&nbsp;the&nbsp;code&nbsp;that&nbsp;I&nbsp;have&nbsp;so&nbsp;far.&nbsp;You&lt;br&gt;<br>
can&nbsp;save&nbsp;it&nbsp;in&nbsp;a&nbsp;module&nbsp;and&nbsp;call&nbsp;the&nbsp;daemonize()&nbsp;function&nbsp;from&nbsp;your&nbsp;script.&lt;br&gt;<br>
&lt;br&gt;<br>
The&nbsp;process&nbsp;of&nbsp;daemonization&nbsp;is&nbsp;similar&nbsp;to&nbsp;the&nbsp;one&nbsp;on&nbsp;UNIX&nbsp;--&nbsp;you&nbsp;have&lt;br&gt;<br>
to&nbsp;spawn&nbsp;a&nbsp;child&nbsp;process&nbsp;twice,&nbsp;the&nbsp;first&nbsp;child&nbsp;is&nbsp;responsible&nbsp;for&lt;br&gt;<br>
breaking&nbsp;away&nbsp;from&nbsp;any&nbsp;job&nbsp;objects&nbsp;(somewhat&nbsp;similar&nbsp;to&nbsp;becoming&nbsp;a&lt;br&gt;<br>
session&nbsp;leader&nbsp;on&nbsp;UNIX),&nbsp;becoming&nbsp;a&nbsp;new&nbsp;process&nbsp;group&nbsp;leader&nbsp;and&nbsp;closing&lt;br&gt;<br>
all&nbsp;handles&nbsp;(file&nbsp;descriptors)&nbsp;that&nbsp;might&nbsp;have&nbsp;been&nbsp;inherited.&lt;br&gt;<br>
&lt;br&gt;<br>
The&nbsp;second&nbsp;child&nbsp;has&nbsp;to&nbsp;open&nbsp;dummy&nbsp;std*&nbsp;files&nbsp;and&nbsp;a&nbsp;new&nbsp;(hidden)&lt;br&gt;<br>
console,&nbsp;otherwise&nbsp;the&nbsp;signals&nbsp;stop&nbsp;working.&nbsp;There&nbsp;is&nbsp;a&nbsp;slight&lt;br&gt;<br>
complication&nbsp;with&nbsp;window&nbsp;stations&nbsp;and&nbsp;desktops.&nbsp;Each&nbsp;console&nbsp;creates&nbsp;at&lt;br&gt;<br>
least&nbsp;one&nbsp;window&nbsp;and&nbsp;some&nbsp;other&nbsp;user&nbsp;objects,&nbsp;so&nbsp;we&nbsp;have&nbsp;to&nbsp;create&lt;br&gt;<br>
a&nbsp;separate&nbsp;desktop,&nbsp;or&nbsp;other&nbsp;processes&nbsp;would&nbsp;be&nbsp;able&nbsp;to&nbsp;manipulate&nbsp;them&lt;br&gt;<br>
&nbsp; and&nbsp;send&nbsp;us&nbsp;arbitrary&nbsp;(Windows)&nbsp;messages.&lt;br&gt;<br>
&lt;br&gt;<br>
Regards,&lt;br&gt;<br>
Ziga&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;br&gt;<br>
import&nbsp;os&lt;br&gt;<br>
import&nbsp;sys&lt;br&gt;<br>
import&nbsp;msvcrt&lt;br&gt;<br>
&lt;br&gt;<br>
import&nbsp;win32con&lt;br&gt;<br>
import&nbsp;win32process&lt;br&gt;<br>
import&nbsp;win32security&lt;br&gt;<br>
import&nbsp;win32service&lt;br&gt;<br>
&lt;br&gt;<br>
from&nbsp;twisted.python&nbsp;import&nbsp;win32&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;br&gt;<br>
def&nbsp;getPythonArgs():&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp;&amp;quot;&amp;quot;&amp;quot;&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp;Return&nbsp;the&nbsp;list&nbsp;of&nbsp;command&nbsp;line&nbsp;args&nbsp;that&nbsp;were&nbsp;used&nbsp;to&nbsp;start&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp;the&nbsp;current&nbsp;Python&nbsp;interpreter&nbsp;and&nbsp;were&nbsp;not&nbsp;stored&nbsp;in&nbsp;C{sys.argv}.&lt;br&gt;<br>
&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp;These&nbsp;are&nbsp;the&nbsp;options&nbsp;that&nbsp;control&nbsp;the&nbsp;Python&nbsp;interpreter&nbsp;itself,&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp;like&nbsp;the&nbsp;Python&nbsp;executable,&nbsp;optimization&nbsp;level,&nbsp;warning&nbsp;filters,&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp;division&nbsp;behaviour&nbsp;and&nbsp;literal&nbsp;string&nbsp;handling.&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp;&amp;quot;&amp;quot;&amp;quot;&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp;args&nbsp;=&nbsp;[sys.executable]&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp;for&nbsp;warnoption&nbsp;in&nbsp;sys.warnoptions:&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;args.append(&amp;quot;-W&amp;quot;)&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;args.append(warnoption)&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp;if&nbsp;type(1&nbsp;/&nbsp;2)&nbsp;is&nbsp;not&nbsp;int:&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;args.append(&amp;quot;-Qnew&amp;quot;)&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp;if&nbsp;type(&amp;quot;&amp;quot;)&nbsp;is&nbsp;not&nbsp;str:&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;args.append(&amp;quot;-U&amp;quot;)&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp;if&nbsp;not&nbsp;__debug__:&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if&nbsp;getPythonArgs.__doc__&nbsp;is&nbsp;None:&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;args.append(&amp;quot;-OO&amp;quot;)&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;else:&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;args.append(&amp;quot;-O&amp;quot;)&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp;return&nbsp;args&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;br&gt;<br>
def&nbsp;daemonize():&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp;args&nbsp;=&nbsp;[os.path.abspath(__file__)]&nbsp;+&nbsp;sys.argv&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp;executable&nbsp;=&nbsp;sys.executable&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp;cmdline&nbsp;=&nbsp;win32.quoteArguments(getPythonArgs()&nbsp;+&nbsp;args)&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp;inherit&nbsp;=&nbsp;False&lt;br&gt;<br>
&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp;flags&nbsp;=&nbsp;(win32process.CREATE_BREAKAWAY_FROM_JOB&nbsp;|&nbsp;#&nbsp;session&nbsp;leader&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; win32process.CREATE_NEW_PROCESS_GROUP&nbsp;|&nbsp; #&nbsp;group&nbsp;leader&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; win32process.DETACHED_PROCESS)&nbsp;#&nbsp;no&nbsp;controlling&nbsp;terminal&lt;br&gt;<br>
&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp;info&nbsp;=&nbsp;win32process.STARTUPINFO()&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp;win32process.CreateProcess(executable,&nbsp;cmdline,&nbsp;None,&nbsp;None,&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; inherit,&nbsp;flags,&nbsp;None,&nbsp;None,&nbsp;info)&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp;#&nbsp;Do&nbsp;what&nbsp;exec*&nbsp;functions&nbsp;do,&nbsp;let&nbsp;the&nbsp;OS&nbsp;do&nbsp;the&nbsp;cleanup.&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp;os._exit(0)&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;br&gt;<br>
def&nbsp;daemonize2():&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp;args&nbsp;=&nbsp;[sys.argv[1],&nbsp;&amp;quot;--nodaemon&amp;quot;]&nbsp;+&nbsp;sys.argv[2:]&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp;executable&nbsp;=&nbsp;sys.executable&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp;cmdline&nbsp;=&nbsp;win32.quoteArguments(getPythonArgs()&nbsp;+&nbsp;args)&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp;inherit&nbsp;=&nbsp;True&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp;#&nbsp;create&nbsp;an&nbsp;invisible&nbsp;console&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp;flags&nbsp;=&nbsp;(win32process.CREATE_NO_WINDOW&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp;attributes&nbsp;=&nbsp;win32security.SECURITY_ATTRIBUTES()&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp;attributes.bInheritHandle&nbsp;=&nbsp;True&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp;station&nbsp;=&nbsp;win32service.CreateWindowStation(None,&nbsp;0,&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; win32con.GENERIC_READ&nbsp;|&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; win32con.GENERIC_WRITE,&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; attributes)&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp;station.SetProcessWindowStation()&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp;sname&nbsp;=&nbsp;win32service.GetUserObjectInformation(station,&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;win32service.UOI_NAME)&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp;dname&nbsp;=&nbsp;str(os.getpid())&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp;desktop&nbsp;=&nbsp;win32service.CreateDesktop(dname,&nbsp;0,&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; win32con.GENERIC_READ&nbsp;|&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; win32con.GENERIC_WRITE,&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; attributes)&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp;desktop.SetThreadDesktop()&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp;null&nbsp;=&nbsp;os.open(&amp;quot;NUL&amp;quot;,&nbsp;os.O_RDWR)&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp;handle&nbsp;=&nbsp;msvcrt.get_osfhandle(null)&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp;info&nbsp;=&nbsp;win32process.STARTUPINFO()&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp;info.lpDesktop&nbsp;=&nbsp;&amp;quot;%s\\%s&amp;quot;&nbsp;%&nbsp;(sname,&nbsp;dname)&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp;info.dwFlags&nbsp;=&nbsp;win32process.STARTF_USESTDHANDLES&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp;info.hStdInput&nbsp;=&nbsp;info.hStdOutput&nbsp;=&nbsp;info.hStdError&nbsp;=&nbsp;handle&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp;win32process.CreateProcess(executable,&nbsp;cmdline,&nbsp;None,&nbsp;None,&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; inherit,&nbsp;flags,&nbsp;None,&nbsp;None,&nbsp;info)&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp;#&nbsp;Same&nbsp;as&nbsp;above,&nbsp;exit&nbsp;as&nbsp;fast&nbsp;as&nbsp;possible.&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp;os._exit(0)&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;br&gt;<br>
if&nbsp;__name__&nbsp;==&nbsp;&amp;quot;__main__&amp;quot;:&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp;daemonize2()&lt;br&gt;<br>
&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&nbsp;class=&quot;h5&quot;&gt;&lt;br&gt;<br>
_______________________________________________&lt;br&gt;<br>
Twisted-Python&nbsp;mailing&nbsp;list&lt;br&gt;<br>
&lt;a&nbsp;href=&quot;mailto:Twisted-Python@twistedmatrix.com&quot;&gt;Twisted-Python@twistedmatrix.com&lt;/a&gt;&lt;br&gt;<br>
&lt;a&nbsp;href=&quot;http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python&quot;&nbsp;target=&quot;_blank&quot;&gt;http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python&lt;/a&gt;&lt;br&gt;<br>
&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;<br>

</tt>
