<tt>
&lt;!DOCTYPE&nbsp;html&nbsp;PUBLIC&nbsp;&quot;-//W3C//DTD&nbsp;HTML&nbsp;4.01&nbsp;Transitional//EN&quot;&gt;<br>
&lt;html&gt;<br>
&lt;head&gt;<br>
&nbsp;&nbsp;&lt;meta&nbsp;http-equiv=&quot;Content-Type&quot;&nbsp;content=&quot;text/html;charset=ISO-8859-1&quot;&gt;<br>
&nbsp;&nbsp;&lt;title&gt;&lt;/title&gt;<br>
&lt;/head&gt;<br>
&lt;body&nbsp;text=&quot;#000000&quot;&nbsp;bgcolor=&quot;#ffffff&quot;&gt;<br>
Thanks!&nbsp;In&nbsp;order&nbsp;to&nbsp;help&nbsp;others&nbsp;like&nbsp;me&nbsp;who&nbsp;were&nbsp;struggling&nbsp;with&nbsp;this,<br>
here's&nbsp;the&nbsp;working&nbsp;code.&nbsp;Please&nbsp;let&nbsp;me&nbsp;know&nbsp;if&nbsp;I&nbsp;did&nbsp;anything<br>
egregiously&nbsp;stupid&nbsp;here.&nbsp;&lt;br&gt;<br>
&lt;br&gt;<br>
#!/usr/bin/env&nbsp;python&lt;br&gt;<br>
#&nbsp;Simple&nbsp;SMTP&nbsp;server&nbsp;shell&lt;br&gt;<br>
&lt;br&gt;<br>
from&nbsp;twisted.internet&nbsp;import&nbsp;reactor,&nbsp;protocol,&nbsp;defer&lt;br&gt;<br>
from&nbsp;twisted.protocols&nbsp;import&nbsp;smtp&lt;br&gt;<br>
&lt;br&gt;<br>
class&nbsp;MyMessage:&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;__implements__&nbsp;=&nbsp;(smtp.IMessage)&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;def&nbsp;__init__(self):&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;self.msg&nbsp;=&nbsp;[]&lt;br&gt;<br>
&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;def&nbsp;lineReceived(self,&nbsp;line):&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;self.msg.append(line)&lt;br&gt;<br>
&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;def&nbsp;eomReceived(self):&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;#&nbsp;Handle&nbsp;message&nbsp;here&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;for&nbsp;line&nbsp;in&nbsp;self.msg:&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;print&nbsp;line&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;self.msg&nbsp;=&nbsp;[]&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;return&nbsp;defer.succeed('&amp;lt;Whatever&amp;gt;')&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&lt;br&gt;<br>
class&nbsp;MyMessageDelivery:&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;__implements__&nbsp;=&nbsp;(smtp.IMessageDelivery)&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;def&nbsp;validateFrom(self,&nbsp;helo,&nbsp;origin):&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;return&nbsp;origin&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;def&nbsp;validateTo(self,&nbsp;user):&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;return&nbsp;MyMessage&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;def&nbsp;receivedHeader(self,&nbsp;helo,&nbsp;origin,&nbsp;recipients):&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;return&nbsp;None&lt;br&gt;<br>
&lt;br&gt;<br>
class&nbsp;MySMTPFactory(smtp.SMTPFactory):&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;def&nbsp;buildProtocol(self,&nbsp;addr):&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;p&nbsp;=&nbsp;self.protocol(MyMessageDelivery())&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;p.factory&nbsp;=&nbsp;self&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;p.portal&nbsp;=&nbsp;self.portal&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;p.host&nbsp;=&nbsp;&quot;somedomain.com&quot;&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;return&nbsp;p&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&lt;br&gt;<br>
factory&nbsp;=&nbsp;MySMTPFactory()&lt;br&gt;<br>
factory.protocol&nbsp;=&nbsp;smtp.SMTP&lt;br&gt;<br>
reactor.listenTCP(25,&nbsp;factory)&lt;br&gt;<br>
reactor.run()&lt;br&gt;<br>
&lt;br&gt;<br>
Anders&nbsp;Hammarquist&nbsp;wrote:&lt;br&gt;<br>
&lt;blockquote&nbsp;type=&quot;cite&quot;<br>
&nbsp;cite=&quot;mid200310012347.h91NlHW04812@haddock.cd.chalmers.se&quot;&gt;<br>
&nbsp;&nbsp;&lt;pre&nbsp;wrap=&quot;&quot;&gt;Hi&nbsp;Greg!<br>
<br>
In&nbsp;a&nbsp;message&nbsp;of&nbsp;Wed,&nbsp;01&nbsp;Oct&nbsp;2003&nbsp;17:20:17&nbsp;EDT,&nbsp;Greg&nbsp;writes:<br>
&nbsp;&nbsp;&lt;/pre&gt;<br>
&nbsp;&nbsp;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;pre&nbsp;wrap=&quot;&quot;&gt;Working&nbsp;on&nbsp;an&nbsp;SMTP&nbsp;filter&nbsp;(consisting&nbsp;of&nbsp;an&nbsp;SMTP&nbsp;server&nbsp;that&nbsp;receives&nbsp;<br>
messages,&nbsp;some&nbsp;code&nbsp;that&nbsp;mangles&nbsp;them,&nbsp;then&nbsp;and&nbsp;SMTP&nbsp;client&nbsp;that&nbsp;forwards&nbsp;<br>
them&nbsp;along).&nbsp;The&nbsp;first&nbsp;step&nbsp;is&nbsp;to&nbsp;get&nbsp;a&nbsp;functioning&nbsp;SMTP&nbsp;server&nbsp;working,&nbsp;and&nbsp;<br>
I'm&nbsp;having&nbsp;some&nbsp;trouble&nbsp;with&nbsp;SMTPFactory&nbsp;/&nbsp;SMTP.&nbsp;I've&nbsp;overloaded&nbsp;the&nbsp;validate&nbsp;<br>
methods&nbsp;in&nbsp;an&nbsp;attempt&nbsp;accept&nbsp;emails&nbsp;to&nbsp;and&nbsp;from&nbsp;any&nbsp;domain,&nbsp;but&nbsp;I&nbsp;can't&nbsp;<br>
figure&nbsp;out&nbsp;how&nbsp;to&nbsp;hook&nbsp;in&nbsp;a&nbsp;class&nbsp;that&nbsp;implements&nbsp;IMessageDelivery:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/pre&gt;<br>
&nbsp;&nbsp;&lt;/blockquote&gt;<br>
&nbsp;&nbsp;&lt;pre&nbsp;wrap=&quot;&quot;&gt;&lt;!----&gt;<br>
There&nbsp;are&nbsp;several&nbsp;problems&nbsp;with&nbsp;your&nbsp;code,&nbsp;but&nbsp;to&nbsp;my&nbsp;eye&nbsp;it&nbsp;looks&nbsp;like<br>
confusion&nbsp;between&nbsp;several&nbsp;methods&nbsp;of&nbsp;using&nbsp;the&nbsp;SMTP&nbsp;class.&nbsp;Until&nbsp;recently,<br>
the&nbsp;IMessageDelivery&nbsp;method&nbsp;didn't&nbsp;exists,&nbsp;and&nbsp;you&nbsp;needed&nbsp;to&nbsp;override<br>
SMTP&nbsp;to&nbsp;implement&nbsp;validateTo&nbsp;and&nbsp;validateFrom.&nbsp;Now,&nbsp;you&nbsp;can&nbsp;instead&nbsp;pass<br>
an&nbsp;IMessageDelivery&nbsp;to&nbsp;SMTP,&nbsp;either&nbsp;directly&nbsp;or&nbsp;using&nbsp;the&nbsp;authenticator<br>
(and&nbsp;if&nbsp;you&nbsp;do,&nbsp;you&nbsp;shouldn't&nbsp;need&nbsp;to&nbsp;subclass&nbsp;SMTP&nbsp;-&nbsp;and&nbsp;if&nbsp;your&nbsp;twisted<br>
is&nbsp;recent&nbsp;enough,&nbsp;you&nbsp;have&nbsp;to&nbsp;use&nbsp;the&nbsp;IMessageDelivery&nbsp;method).<br>
<br>
You&nbsp;do&nbsp;need&nbsp;to&nbsp;make&nbsp;your&nbsp;own&nbsp;factory&nbsp;though,&nbsp;since&nbsp;the&nbsp;one&nbsp;that's&nbsp;there<br>
doesn't&nbsp;deal&nbsp;with&nbsp;IMessageDelivery()s&nbsp;yet.&nbsp;Something&nbsp;like<br>
<br>
class&nbsp;MySMTPFactory(SMTPFactory):<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspdef&nbsp;buildProtocol(self,&nbsp;addr):<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspp&nbsp;=&nbsp;self.protocol(MyMessageDelivery())<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspp.factory&nbsp;=&nbsp;self<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspp.portal&nbsp;=&nbsp;self.portal<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspp.host&nbsp;=&nbsp;self.domain<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspreturn&nbsp;p<br>
<br>
&nbsp;&nbsp;&lt;/pre&gt;<br>
&nbsp;&nbsp;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;pre&nbsp;wrap=&quot;&quot;&gt;class&nbsp;MySMTPProtocol(SMTP):<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/pre&gt;<br>
&nbsp;&nbsp;&lt;/blockquote&gt;<br>
&nbsp;&nbsp;&lt;pre&nbsp;wrap=&quot;&quot;&gt;&lt;!----&gt;[...]<br>
&nbsp;&nbsp;&lt;/pre&gt;<br>
&nbsp;&nbsp;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;pre&nbsp;wrap=&quot;&quot;&gt;&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspdef&nbsp;validateTo(self,&nbsp;user):<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspd&nbsp;=&nbsp;defer.Deferred()<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspreactor.callLater(0,&nbsp;self.fakeSucceed())<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspreturn&nbsp;d<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/pre&gt;<br>
&nbsp;&nbsp;&lt;/blockquote&gt;<br>
&nbsp;&nbsp;&lt;pre&nbsp;wrap=&quot;&quot;&gt;&lt;!----&gt;<br>
You&nbsp;don't&nbsp;need&nbsp;this&nbsp;code,&nbsp;but&nbsp;I&nbsp;still&nbsp;want&nbsp;to&nbsp;point&nbsp;out&nbsp;that&nbsp;it&nbsp;doesn't<br>
do&nbsp;anything&nbsp;useful,&nbsp;and&nbsp;is&nbsp;overcomplicated.&nbsp;<br>
<br>
First,&nbsp;validateTo&nbsp;may&nbsp;return&nbsp;an&nbsp;IMessage&nbsp;or&nbsp;a&nbsp;deferred&nbsp;returning&nbsp;an<br>
IMessage,&nbsp;so&nbsp;you&nbsp;don't&nbsp;need&nbsp;the&nbsp;deferred,&nbsp;you&nbsp;can&nbsp;just&nbsp;return&nbsp;you<br>
IMessage&nbsp;directly.&nbsp;Secondly&nbsp;the&nbsp;deferred&nbsp;is&nbsp;never&nbsp;called,&nbsp;so&nbsp;it&nbsp;will<br>
never&nbsp;return,&nbsp;and&nbsp;thus&nbsp;your&nbsp;SMTP&nbsp;server&nbsp;stops&nbsp;here.<br>
<br>
reactor.callLater()&nbsp;just&nbsp;calls&nbsp;another&nbsp;function&nbsp;asynchrously&nbsp;and&nbsp;discards<br>
the&nbsp;result.&nbsp;If&nbsp;you&nbsp;want&nbsp;to&nbsp;pass&nbsp;back&nbsp;a&nbsp;result&nbsp;from&nbsp;a&nbsp;callLater,&nbsp;you&nbsp;need<br>
to&nbsp;pass&nbsp;along&nbsp;the&nbsp;deferred&nbsp;and&nbsp;call&nbsp;it&nbsp;in&nbsp;the&nbsp;function&nbsp;you&nbsp;callLater()ed.<br>
<br>
&nbsp;&nbsp;&lt;/pre&gt;<br>
&nbsp;&nbsp;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;pre&nbsp;wrap=&quot;&quot;&gt;class&nbsp;MyIMessage:<br>
&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp__implements__&nbsp;=&nbsp;(smtp.IMessageDelivery)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/pre&gt;<br>
&nbsp;&nbsp;&lt;/blockquote&gt;<br>
&nbsp;&nbsp;&lt;pre&nbsp;wrap=&quot;&quot;&gt;&lt;!----&gt;<br>
You&nbsp;seem&nbsp;to&nbsp;have&nbsp;mixed&nbsp;up&nbsp;IMessage&nbsp;and&nbsp;IMessageDelivery.&nbsp;You&nbsp;need&nbsp;both.<br>
Your&nbsp;IMessageDelivery.validateTo()&nbsp;should&nbsp;return&nbsp;an&nbsp;IMessage&nbsp;(or&nbsp;a&nbsp;deferred<br>
returning&nbsp;an&nbsp;IMessage).<br>
<br>
HTH<br>
/Anders<br>
<br>
&nbsp;&nbsp;&lt;/pre&gt;<br>
&lt;/blockquote&gt;<br>
&lt;/body&gt;<br>
&lt;/html&gt;<br>

</tt>
