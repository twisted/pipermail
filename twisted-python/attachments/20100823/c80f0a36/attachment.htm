<tt>
&lt;!DOCTYPE&nbsp;HTML&nbsp;PUBLIC&nbsp;&quot;-//W3C//DTD&nbsp;HTML&nbsp;4.01&nbsp;Transitional//EN&quot;&gt;<br>
&lt;html&gt;<br>
&lt;head&gt;<br>
&nbsp;&nbsp;&lt;meta&nbsp;content=&quot;text/html;&nbsp;charset=windows-1252&quot;<br>
&nbsp;http-equiv=&quot;Content-Type&quot;&gt;<br>
&nbsp;&nbsp;&lt;title&gt;&lt;/title&gt;<br>
&lt;/head&gt;<br>
&lt;body&nbsp;bgcolor=&quot;#ffffff&quot;&nbsp;text=&quot;#000000&quot;&gt;<br>
Thanks&nbsp;to&nbsp;all!&lt;br&gt;<br>
&lt;div&nbsp;dir=&quot;ltr&quot;&nbsp;style=&quot;&quot;&gt;<br>
&lt;div&nbsp;id=&quot;tts_button&quot;&nbsp;title=&quot;&amp;#1055;&amp;#1088;&amp;#1086;&amp;#1089;&amp;#1083;&amp;#1091;&amp;#1096;&amp;#1072;&amp;#1090;&amp;#1100;&nbsp;&amp;#1101;&amp;#1090;&amp;#1086;&amp;#1090;&nbsp;&amp;#1087;&amp;#1077;&amp;#1088;&amp;#1077;&amp;#1074;&amp;#1086;&amp;#1076;&quot;<br>
&nbsp;style=&quot;display:&nbsp;block;&quot;&nbsp;class=&quot;&nbsp;&quot;&gt;&lt;object<br>
&nbsp;type=&quot;application/x-shockwave-flash&quot;<br>
&nbsp;data=&quot;http://www.gstatic.com/translate/sound_player2.swf&quot;<br>
&nbsp;id=&quot;tts_flash&quot;&nbsp;width=&quot;18&quot;&nbsp;height=&quot;18&quot;&gt;&lt;param<br>
&nbsp;value=&quot;http://www.gstatic.com/translate/sound_player2.swf&quot;&nbsp;name=&quot;movie&quot;&gt;&lt;param<br>
&nbsp;value=&quot;sound_name=translate_tts%3Fq%3Dspecific%26tl%3Den&amp;amp;sound_name_cb=_TTSSoundFile&quot;<br>
&nbsp;name=&quot;flashvars&quot;&gt;&lt;param&nbsp;value=&quot;transparent&quot;&nbsp;name=&quot;wmode&quot;&gt;&lt;param<br>
&nbsp;value=&quot;always&quot;&nbsp;name=&quot;allowScriptAccess&quot;&gt;&lt;/object&gt;&lt;/div&gt;<br>
&lt;span&nbsp;id=&quot;result_box&quot;&nbsp;class=&quot;short_text&quot;&gt;&lt;span<br>
&nbsp;style=&quot;background-color:&nbsp;rgb(255,&nbsp;255,&nbsp;255);&nbsp;color:&nbsp;rgb(0,&nbsp;0,&nbsp;0);&quot;<br>
&nbsp;title=&quot;&quot;&gt;Especially&lt;/span&gt;&lt;/span&gt;&nbsp;to&nbsp;Yaroslav&nbsp;Fedevych&nbsp;who&nbsp;explain&nbsp;me<br>
my&nbsp;misstake&nbsp;in&nbsp;my&nbsp;native&nbsp;language&nbsp;:)&lt;br&gt;<br>
I&nbsp;was&nbsp;wrong&nbsp;with&nbsp;deferreds&nbsp;usage.&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;span&nbsp;id=&quot;result_box&quot;&nbsp;class=&quot;short_text&quot;&gt;&lt;span<br>
&nbsp;style=&quot;background-color:&nbsp;rgb(255,&nbsp;255,&nbsp;255);&nbsp;color:&nbsp;rgb(0,&nbsp;0,&nbsp;0);&quot;<br>
&nbsp;title=&quot;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&nbsp;id=&quot;result_box&quot;&nbsp;class=&quot;short_text&quot;&gt;&lt;span<br>
&nbsp;style=&quot;background-color:&nbsp;rgb(255,&nbsp;255,&nbsp;255);&nbsp;color:&nbsp;rgb(0,&nbsp;0,&nbsp;0);&quot;<br>
&nbsp;title=&quot;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&nbsp;id=&quot;result_box&quot;&nbsp;class=&quot;short_text&quot;&gt;&lt;span<br>
&nbsp;style=&quot;background-color:&nbsp;rgb(255,&nbsp;255,&nbsp;255);&nbsp;color:&nbsp;rgb(0,&nbsp;0,&nbsp;0);&quot;<br>
&nbsp;title=&quot;&quot;&gt;Cascading&nbsp;cancelling&nbsp;of&nbsp;inlineCallbacks&nbsp;is&nbsp;still&nbsp;needed&nbsp;to<br>
me,&nbsp;but&nbsp;it&nbsp;can&nbsp;be&nbsp;realized&nbsp;with&nbsp;current&nbsp;Deferred&nbsp;API.&lt;br&gt;<br>
&lt;br&gt;<br>
This&nbsp;way&nbsp;for&nbsp;example:&lt;br&gt;<br>
&lt;br&gt;<br>
class&nbsp;InlineCallbacksManagerWithCascadeCancelling(object):&lt;br&gt;<br>
   &nbsp;_cancellation&nbsp;=&nbsp;False&lt;br&gt;<br>
   &nbsp;_wait_result&nbsp;=&nbsp;None&lt;br&gt;<br>
&lt;br&gt;<br>
   &nbsp;def&nbsp;__init__(self):&lt;br&gt;<br>
       &nbsp;self.deferred&nbsp;=&nbsp;defer.Deferred()&lt;br&gt;<br>
       &nbsp;self.deferred.addBoth(self._cleanup)&lt;br&gt;<br>
&lt;br&gt;<br>
   &nbsp;def&nbsp;_cleanup(self,&nbsp;result):&lt;br&gt;<br>
       &nbsp;if&nbsp;self._wait_result&nbsp;is&nbsp;not&nbsp;None:&lt;br&gt;<br>
           &nbsp;self._cancellation&nbsp;=&nbsp;True&lt;br&gt;<br>
           &nbsp;self._wait_result.cancel()&lt;br&gt;<br>
       &nbsp;self._wait_result&nbsp;=&nbsp;None&lt;br&gt;<br>
       &nbsp;self.deferred&nbsp;=&nbsp;None&lt;br&gt;<br>
       &nbsp;return&nbsp;result&lt;br&gt;<br>
&lt;br&gt;<br>
   &nbsp;def&nbsp;_inlineCallbacks(self,&nbsp;result,&nbsp;g):&lt;br&gt;<br>
       &nbsp;&quot;&quot;&quot;&lt;br&gt;<br>
       &nbsp;See&nbsp;L{inlineCallbacks}.&lt;br&gt;<br>
       &nbsp;&quot;&quot;&quot;&lt;br&gt;<br>
       &nbsp;#&nbsp;This&nbsp;function&nbsp;is&nbsp;complicated&nbsp;by&nbsp;the&nbsp;need&nbsp;to&nbsp;prevent&nbsp;unbounded<br>
recursion&lt;br&gt;<br>
       &nbsp;#&nbsp;arising&nbsp;from&nbsp;repeatedly&nbsp;yielding&nbsp;immediately&nbsp;ready<br>
deferreds. &nbsp;This&nbsp;while&lt;br&gt;<br>
       &nbsp;#&nbsp;loop&nbsp;and&nbsp;the&nbsp;waiting&nbsp;variable&nbsp;solve&nbsp;that&nbsp;by&nbsp;manually<br>
unfolding&nbsp;the&lt;br&gt;<br>
       &nbsp;#&nbsp;recursion.&lt;br&gt;<br>
&lt;br&gt;<br>
       &nbsp;waiting&nbsp;=&nbsp;[True,&nbsp;#&nbsp;waiting&nbsp;for&nbsp;result?&lt;br&gt;<br>
                  &nbsp;None]&nbsp;#&nbsp;result&lt;br&gt;<br>
&lt;br&gt;<br>
       &nbsp;deferred&nbsp;=&nbsp;self.deferred&lt;br&gt;<br>
&lt;br&gt;<br>
       &nbsp;while&nbsp;1:&lt;br&gt;<br>
           &nbsp;if&nbsp;self._cancellation:&lt;br&gt;<br>
               &nbsp;g.close()&lt;br&gt;<br>
               &nbsp;return&lt;br&gt;<br>
&lt;br&gt;<br>
           &nbsp;try:&lt;br&gt;<br>
               &nbsp;#&nbsp;Send&nbsp;the&nbsp;last&nbsp;result&nbsp;back&nbsp;as&nbsp;the&nbsp;result&nbsp;of&nbsp;the&nbsp;yield<br>
expression.&lt;br&gt;<br>
               &nbsp;isFailure&nbsp;=&nbsp;isinstance(result,&nbsp;Failure)&lt;br&gt;<br>
               &nbsp;if&nbsp;isFailure:&lt;br&gt;<br>
                   &nbsp;result&nbsp;=&nbsp;result.throwExceptionIntoGenerator(g)&lt;br&gt;<br>
               &nbsp;else:&lt;br&gt;<br>
                   &nbsp;result&nbsp;=&nbsp;g.send(result)&lt;br&gt;<br>
           &nbsp;except&nbsp;StopIteration:&lt;br&gt;<br>
               &nbsp;#&nbsp;fell&nbsp;off&nbsp;the&nbsp;end,&nbsp;or&nbsp;&quot;return&quot;&nbsp;statement&lt;br&gt;<br>
               &nbsp;deferred.callback(None)&lt;br&gt;<br>
               &nbsp;return&nbsp;deferred&lt;br&gt;<br>
           &nbsp;except&nbsp;defer._DefGen_Return,&nbsp;e:&lt;br&gt;<br>
               &nbsp;#&nbsp;returnValue()&nbsp;was&nbsp;called;&nbsp;time&nbsp;to&nbsp;give&nbsp;a&nbsp;result&nbsp;to<br>
the&nbsp;original&nbsp;Deferred.&lt;br&gt;<br>
               &nbsp;deferred.callback(e.value)&lt;br&gt;<br>
               &nbsp;return&nbsp;deferred&lt;br&gt;<br>
           &nbsp;except:&lt;br&gt;<br>
               &nbsp;deferred.errback()&lt;br&gt;<br>
               &nbsp;return&nbsp;deferred&lt;br&gt;<br>
&lt;br&gt;<br>
           &nbsp;if&nbsp;isinstance(result,&nbsp;defer.Deferred):&lt;br&gt;<br>
               &nbsp;#&nbsp;a&nbsp;deferred&nbsp;was&nbsp;yielded,&nbsp;get&nbsp;the&nbsp;result.&lt;br&gt;<br>
               &nbsp;def&nbsp;gotResult(r):&lt;br&gt;<br>
                   &nbsp;if&nbsp;waiting[0]:&lt;br&gt;<br>
                       &nbsp;waiting[0]&nbsp;=&nbsp;False&lt;br&gt;<br>
                       &nbsp;waiting[1]&nbsp;=&nbsp;r&lt;br&gt;<br>
                   &nbsp;else:&lt;br&gt;<br>
                       &nbsp;self._wait_result&nbsp;=&nbsp;None&lt;br&gt;<br>
                       &nbsp;self._inlineCallbacks(r,&nbsp;g)&lt;br&gt;<br>
&lt;br&gt;<br>
               &nbsp;result.addBoth(gotResult)&lt;br&gt;<br>
               &nbsp;if&nbsp;waiting[0]:&lt;br&gt;<br>
                   &nbsp;#&nbsp;Haven't&nbsp;called&nbsp;back&nbsp;yet,&nbsp;set&nbsp;flag&nbsp;so&nbsp;that&nbsp;we&nbsp;get<br>
reinvoked&lt;br&gt;<br>
                   &nbsp;#&nbsp;and&nbsp;return&nbsp;from&nbsp;the&nbsp;loop&lt;br&gt;<br>
                   &nbsp;waiting[0]&nbsp;=&nbsp;False&lt;br&gt;<br>
                   &nbsp;self._wait_result&nbsp;=&nbsp;result&lt;br&gt;<br>
                   &nbsp;return&nbsp;deferred&lt;br&gt;<br>
&lt;br&gt;<br>
               &nbsp;result&nbsp;=&nbsp;waiting[1]&lt;br&gt;<br>
               &nbsp;#&nbsp;Reset&nbsp;waiting&nbsp;to&nbsp;initial&nbsp;values&nbsp;for&nbsp;next&nbsp;loop. <br>
gotResult&nbsp;uses&lt;br&gt;<br>
               &nbsp;#&nbsp;waiting,&nbsp;but&nbsp;this&nbsp;isn't&nbsp;a&nbsp;problem&nbsp;because&nbsp;gotResult<br>
is&nbsp;only&lt;br&gt;<br>
               &nbsp;#&nbsp;executed&nbsp;once,&nbsp;and&nbsp;if&nbsp;it&nbsp;hasn't&nbsp;been&nbsp;executed&nbsp;yet,<br>
the&nbsp;return&lt;br&gt;<br>
               &nbsp;#&nbsp;branch&nbsp;above&nbsp;would&nbsp;have&nbsp;been&nbsp;taken.&lt;br&gt;<br>
&lt;br&gt;<br>
               &nbsp;waiting[0]&nbsp;=&nbsp;True&lt;br&gt;<br>
               &nbsp;waiting[1]&nbsp;=&nbsp;None&lt;br&gt;<br>
&lt;br&gt;<br>
def&nbsp;inlineCallbacksWithCascadeCancelling(f):&lt;br&gt;<br>
   &nbsp;def&nbsp;unwind_generator(*args,&nbsp;**kwargs):&lt;br&gt;<br>
       &nbsp;manager&nbsp;=&nbsp;InlineCallbacksManagerWithCascadeCancelling(*args,<br>
**kwargs)&lt;br&gt;<br>
       &nbsp;return&nbsp;manager._inlineCallbacks(None,&nbsp;f(*args,&nbsp;**kwargs))&lt;br&gt;<br>
   &nbsp;return&nbsp;mergeFunctionMetadata(f,&nbsp;unwind_generator)&lt;br&gt;<br>
&lt;br&gt;<br>
This&nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span&nbsp;id=&quot;result_box&quot;&nbsp;class=&quot;short_text&quot;&gt;&lt;span<br>
&nbsp;style=&quot;background-color:&nbsp;rgb(255,&nbsp;255,&nbsp;255);&nbsp;color:&nbsp;rgb(0,&nbsp;0,&nbsp;0);&quot;<br>
&nbsp;title=&quot;&quot;&gt;inlineCallbacksWithCascadeCancelling&nbsp;cancels&lt;/span&gt;&lt;/span&gt;&lt;span<br>
&nbsp;id=&quot;result_box&quot;&nbsp;class=&quot;short_text&quot;&gt;&lt;span<br>
&nbsp;style=&quot;background-color:&nbsp;rgb(255,&nbsp;255,&nbsp;255);&nbsp;color:&nbsp;rgb(0,&nbsp;0,&nbsp;0);&quot;<br>
&nbsp;title=&quot;&quot;&gt;&nbsp;immediately&nbsp;&quot;child&quot;&nbsp;(wait&nbsp;result)&nbsp;deferred&nbsp;when&nbsp;&quot;parent&quot;<br>
deferred&nbsp;finished&nbsp;(canceled&nbsp;for&nbsp;example)&nbsp;and&nbsp;stops&nbsp;generator.&lt;br&gt;<br>
&lt;br&gt;<br>
May&nbsp;be&nbsp;this&nbsp;behaviour&nbsp;must&nbsp;be&nbsp;default&nbsp;for&nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span<br>
&nbsp;id=&quot;result_box&quot;&nbsp;class=&quot;short_text&quot;&gt;&lt;span<br>
&nbsp;style=&quot;background-color:&nbsp;rgb(255,&nbsp;255,&nbsp;255);&nbsp;color:&nbsp;rgb(0,&nbsp;0,&nbsp;0);&quot;<br>
&nbsp;title=&quot;&quot;&gt;inlineCallbacks&nbsp;(i.e.&nbsp;defer.&lt;/span&gt;&lt;/span&gt;&lt;span<br>
&nbsp;id=&quot;result_box&quot;&nbsp;class=&quot;short_text&quot;&gt;&lt;span<br>
&nbsp;style=&quot;background-color:&nbsp;rgb(255,&nbsp;255,&nbsp;255);&nbsp;color:&nbsp;rgb(0,&nbsp;0,&nbsp;0);&quot;<br>
&nbsp;title=&quot;&quot;&gt;inlineCallbacks&lt;/span&gt;&lt;/span&gt;&lt;span&nbsp;id=&quot;result_box&quot;<br>
&nbsp;class=&quot;short_text&quot;&gt;&lt;span<br>
&nbsp;style=&quot;background-color:&nbsp;rgb(255,&nbsp;255,&nbsp;255);&nbsp;color:&nbsp;rgb(0,&nbsp;0,&nbsp;0);&quot;<br>
&nbsp;title=&quot;&quot;&gt;&nbsp;=&nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span&nbsp;id=&quot;result_box&quot;&nbsp;class=&quot;short_text&quot;&gt;&lt;span<br>
&nbsp;style=&quot;background-color:&nbsp;rgb(255,&nbsp;255,&nbsp;255);&nbsp;color:&nbsp;rgb(0,&nbsp;0,&nbsp;0);&quot;<br>
&nbsp;title=&quot;&quot;&gt;inlineCallbacksWithCascadeCancelling&lt;/span&gt;&lt;/span&gt;&lt;span<br>
&nbsp;id=&quot;result_box&quot;&nbsp;class=&quot;short_text&quot;&gt;&lt;span<br>
&nbsp;style=&quot;background-color:&nbsp;rgb(255,&nbsp;255,&nbsp;255);&nbsp;color:&nbsp;rgb(0,&nbsp;0,&nbsp;0);&quot;<br>
&nbsp;title=&quot;&quot;&gt;)?&lt;br&gt;<br>
&lt;br&gt;<br>
I&nbsp;am&nbsp;happy&nbsp;with&nbsp;this&nbsp;behaviour&nbsp;:)&lt;br&gt;<br>
&lt;/span&gt;&lt;/span&gt;&lt;span&nbsp;id=&quot;result_box&quot;&nbsp;class=&quot;short_text&quot;&gt;&lt;span<br>
&nbsp;style=&quot;background-color:&nbsp;rgb(255,&nbsp;255,&nbsp;255);&nbsp;color:&nbsp;rgb(0,&nbsp;0,&nbsp;0);&quot;<br>
&nbsp;title=&quot;&quot;&gt;&lt;br&gt;<br>
&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;<br>
&lt;/body&gt;<br>
&lt;/html&gt;<br>

</tt>
