import os
from twisted.internet import task

ALL_STAT_INDICES = tuple(range(10))

class FileWatcher:

    def __init__(self, delay, filename, *indices):
        self.delay = delay
        self.filename = filename
        if not indices:
            self.indices = ALL_STAT_INDICES
        else:
            self.indices = indices
        self.callbacks = []
        self.stat = os.stat(filename)
        self.loop = task.LoopingCall(self.checkFile)
        
    def start(self):
        self.loop.start(self.delay)
        return self
    
    def stop(self):
        self.loop.stop()
        return self
        
    def addCallback(self, callback):
        self.callbacks.append(callback)
        return self
    
    def removeCallback(self, callback):
        self.callbacks.remove(callback)
        return self
    
    def checkFile(self):
        newStat = os.stat(self.filename)
        for i in self.indices:
            if newStat[i]!=self.stat[i]:
                for callback in self.callbacks:
                    callback(self.filename, self.stat, newStat)
                self.stat = newStat
                break
        

if __name__=='__main__':

    import time
    import stat

    def changed(filename, oldStat, newStat):
        print "%s modified at %s." % (filename,
                                      time.ctime(newStat[stat.ST_MTIME]))
    
    filename = '/tmp/foo'
    open(filename, "w").close()
    watcher = FileWatcher(0.25, filename, stat.ST_SIZE, stat.ST_MTIME)
    watcher.addCallback(changed).start()
    #task.reactor.callLater(20, watcher.stop)
    task.reactor.run()
    
