Index: twisted/web2/test/test_stream.py
===================================================================
--- twisted/web2/test/test_stream.py	(revision 14349)
+++ twisted/web2/test/test_stream.py	(working copy)
@@ -421,82 +421,61 @@
 
 
 from twisted.web2.stream import *
-class CompoundStreamTest:
-    """
-    CompoundStream lets you combine many streams into one continuous stream.
-    For example, let's make a stream:
-    >>> s = CompoundStream()
-    
-    Then, add a couple streams:
-    >>> s.addStream(MemoryStream("Stream1"))
-    >>> s.addStream(MemoryStream("Stream2"))
-    
-    The length is the sum of all the streams:
-    >>> s.length
-    14
-    
-    We can read data from the stream:
-    >>> str(s.read())
-    'Stream1'
 
-    After having read some data, length is now smaller, as you might expect:
-    >>> s.length
-    7
+class CompoundStreamTest(unittest.TestCase):
+    def test_initialLength(self):
+        s = CompoundStream()
+        s.addStream(MemoryStream("Stream1"))
+        s.addStream(MemoryStream("Stream2"))
+        self.failUnlessEqual(s.length, 14)
 
-    So, continue reading...
-    >>> str(s.read())
-    'Stream2'
+    def test_read(self):
+        s = CompoundStream()
+        s.addStream(MemoryStream("Stream1"))
+        s.addStream(MemoryStream("Stream2"))
+        self.failUnlessEqual(str(s.read()), 'Stream1')
+        self.failUnlessEqual(s.length, 7)
+        self.failUnlessEqual(str(s.read()), 'Stream2')
+        self.failUnlessEqual(s.length, 0)
+        self.failUnlessEqual(s.read(), None)
+        self.failUnlessEqual(s.length, 0)
 
-    Now that the stream is exhausted:
-    >>> s.read() is None
-    True
-    >>> s.length
-    0
+    def test_alternateCreation(self):
+        s = CompoundStream(['hello', MemoryStream(' world')])
+        self.failUnlessEqual(str(s.read()), 'hello')
+        self.failUnlessEqual(str(s.read()), ' world')
+        
+    def test_complexCompound(self):
+        s = CompoundStream()
+        s.addStream(FileStream(open(sibpath(__file__, "stream_data.txt"))))
+        s.addStream("================")
+        s.addStream(FileStream(open(sibpath(__file__, "stream_data.txt"))))
+        self.failUnlessEqual(58L, s.length)
+        self.failUnlessEqual(str(s.read()), "We've got some text!\n")
+        self.failUnlessEqual(str(s.read()), '================')
+        s.close()
+        self.failUnlessEqual(s.read(), None)
+        self.failUnlessEqual(s.length, 0)
 
-    We can also create CompoundStream more easily like so:
-    >>> s = CompoundStream(['hello', MemoryStream(' world')])
-    >>> str(s.read())
-    'hello'
-    >>> str(s.read())
-    ' world'
-    
-    For a more complicated example, let's try reading from a file:
-    >>> s = CompoundStream()
-    >>> s.addStream(FileStream(open(sibpath(__file__, "stream_data.txt"))))
-    >>> s.addStream("================")
-    >>> s.addStream(FileStream(open(sibpath(__file__, "stream_data.txt"))))
+    def test_immediateClose(self):
+        s = CompoundStream()
+        s.addStream(FileStream(open(sibpath(__file__, "stream_data.txt"))))
+        s.addStream("================")
+        s.addStream(FileStream(open(sibpath(__file__, "stream_data.txt"))))
+        self.failIfEqual(s.length, 0)
+        s.close()
+        self.failUnlessEqual(s.read(), None)
+        self.failUnlessEqual(s.length, 0)
 
-    Again, the length is the sum:
-    >>> s.length
-    58L
-    
-    >>> str(s.read())
-    "We've got some text!\\n"
-    >>> str(s.read())
-    '================'
-    
-    What if you close the stream?
-    >>> s.close()
-    >>> s.read() is None
-    True
-    >>> s.length
-    0
+    def test_errorHandling(self):
+        m = MemoryStream("after")
+        s = CompoundStream([TestStreamer([defer.fail(ZeroDivisionError())]), m])
+        l = []; x = s.read().addErrback(lambda _: l.append(1))
+        self.failUnlessEqual(l, [1])
+        self.failUnlessEqual(s.length, 0)
+        self.failUnlessEqual(m.length, 0)
+        
 
-    Error handling works using Deferreds:
-    >>> m = MemoryStream("after")
-    >>> s = CompoundStream([TestStreamer([defer.fail(ZeroDivisionError())]), m])
-    >>> l = []; x = s.read().addErrback(lambda _: l.append(1))
-    >>> l
-    [1]
-    >>> s.length
-    0
-    >>> m.length # streams after the failed one got closed
-    0
-
-    """
-
-
-__doctests__ = ['twisted.web2.test.test_stream.CompoundStreamTest', 'twisted.web2.stream.generatorToStream']
 # TODO: 
 # CompoundStreamTest
 # more tests for ProducerStreamTest
