import sys, time, os

from wxPython.wx import *

print "Using twisted"
from twisted.internet import wxsupport, reactor
from twisted.web.xmlrpc import Proxy

BaseClass = wxDialog

class Progress(BaseClass):
    def __init__(self, parent, ID, title, data,
                 pos=wxDefaultPosition, size=wxDefaultSize,
                 style=wxDEFAULT_DIALOG_STYLE):
        BaseClass.__init__(self, parent, ID, title, pos, size, style)

        n = len(data)
        self.data_iter = iter(data)

        sizer = wxBoxSizer(wxVERTICAL)

        self.gauge = wxGauge(self, -1, 100, size = (300, -1))
        sizer.Add(self.gauge, 0, wxALIGN_CENTER|wxALL, 5)

        box = wxBoxSizer(wxHORIZONTAL)
        spacer = wxStaticText(self, -1, "")
        box.Add(spacer, 1, wxALIGN_CENTRE|wxALL|wxGROW)
        btn = wxButton(self, wxID_CANCEL, " Cancel ")
        box.Add(btn, 0, wxALIGN_CENTRE|wxALL, 5)
        spacer = wxStaticText(self, -1, "")
        box.Add(spacer, 1, wxALIGN_CENTRE|wxALL|wxGROW)

        sizer.AddSizer(box, 0, wxALIGN_CENTER_VERTICAL|wxALL|wxGROW, 5)

        EVT_BUTTON(self, wxID_CANCEL, self.OnCancel)

        self.SetSizer(sizer)
        self.SetAutoLayout(true)
        sizer.Fit(self)

        self.i = 0
        self.Start(n)

        self._canceled = 0
        self.Feed()

    def OnCancel(self, event):
        print "Bye!"
        self._canceled = 1
        self.EndModal(1)

    def Feed(self):
        print "Feeding"
        try:
            i = self.data_iter.next()
        except StopIteration:
            self.End()
            return
        print "Looking up state", i
        proxy = Proxy("http://beatty.userland.com/RPC2")
        proxy.callRemote('examples.getStateName', i).addCallbacks(
            lambda x: self.Good(i, x), self.Bad)
        print "done"

    def Good(self, i, name):
        if self._canceled:
            return
        print "Got one!", i, name
        self.i += 1
        self.Update(self.i)
        self.Feed()

    def Bad(self, x):
        if self._canceled:
            return
        print "BAD!!!", x
        self.Show(0)
        reactor.stop()
        os._exit()  # die now, no matter what!

    def Start(self, count):
        self.gauge.SetRange(count)
        self.gauge.SetValue(0)

    def Update(self, i):
        self.gauge.SetValue(i)
        
    def End(self):
        print "This is the End"
        self.gauge.SetValue(self.gauge.GetRange())
        self.Close()
        self.EndModal(1)

    def OnIdle(self, event):
        if self._canceled:
            return
        print "OnIdle"
        try:
            i = self.data_iter.next()
        except StopIteration:
            # Should Disconnect here, but okay for testing
            self.End()
            return
        proxy = xmlrpclib.Server("http://beatty.userland.com/RPC2")
        name = proxy.examples.getStateName(i)
        print "Got Idle one!", i, name
        self.i += 1
        self.Update(self.i)
        event.RequestMore()

def wxidle(self, app):
    self.startRunning(installSignalHandlers=-1)
    EVT_IDLE(app, self.loopOnce)
    self.app = app
        
def wxstop(self, e=None):
    self.app.Disconnect(-1, -1, wxEVT_IDLE)
    
def loopOnce(self, event):
    print "loopOnce"
    if self.running:
        try:
            self.runUntilCurrent()
            t2 = self.timeout()
            t = self.running and t2
            self.doIteration(t)
        except:
            print "Huh?"
        event.RequestMore()

reactor.__class__.loopOnce = loopOnce
reactor.__class__.wxidle = wxidle
reactor.__class__.wxstop = wxstop

def main():
    app = wxPySimpleApp()
    win = Progress(None, -1, "Processing ...", range(7))
    win.Show(true)
    reactor.wxidle(app)
    win.ShowModal()

if __name__ == "__main__":
    main()
