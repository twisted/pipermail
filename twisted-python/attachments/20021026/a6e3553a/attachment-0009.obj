#
# Simple tool for adding and removing identities from LDAP.
#

from twisted.internet import reactor, main
from twisted.python import usage
import base64, md5

import ldapapi


class AddIdentity(ldapapi.Augmentation):

    def entry(self, identity, password):
        return self.add("identity=%s,dc=linuxmisko,dc=hr" % identity,[
                             ("objectclass", ["TwistedUser"]),
                             ("identity", [identity]),
                             ("password", [password])])


class RemoveIdentity(ldapapi.Augmentation):
    def entry(self, identity):
        return self.remove("idenitity=%s,dc=linuxmisko,dc=hr" % idenity)


class Options(usage.Options):

    optFlags = [['help', 'h']]
    optParameters = [['remove', 'r', None, 'Remove an identity'],
                     ['add', 'a', None, 'Add an identity'],
                     ['password', 'p', None, 'Set password'],
                     ['login', 'l', None, 'Login dn'],
                     ['secret', 'w', None, 'LDAP password'],
                     ['host', 'H', '127.0.0.1', 'LDAP host']]

    def postOptions(self):

        if not (self['add'] or self['remove']):
            raise usage.UsageError, "Remove or add?"

        if self['add'] and not self['password']:
            raise usage.UsageError, "Need a password for an identity"


if __name__ == '__main__':

    opt = Options()
    opt.parseOptions()

    pool = ldapapi.ConnectionPool(host=opt['host'],
                                  who=opt['login'], password=opt['secret'])

    if opt['add']:
        AddIdentity(pool).entry(opt['add'],
         base64.encodestring(md5.new(
          opt['password']).digest()).strip()).addCallback(main.shutDown)
    else:
        RemoveIdentity(pool).entry(opt['remove']).addCallback(main.shutDown)

    reactor.run()
