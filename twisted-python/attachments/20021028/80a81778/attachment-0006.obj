--- Twisted/pyunit/unittest.py	2002-10-27 07:34:38.000000000 +1100
+++ mezzanine/pyunit/unittest.py	2002-10-27 07:37:46.000000000 +1100
@@ -6,7 +6,7 @@
 This module contains the core framework classes that form the basis of
 specific test cases and suites (TestCase, TestSuite etc.), and also a
 text-based utility class for running the tests and reporting the results
-(TextTestRunner).
+ (TextTestRunner).
 
 Simple usage:
 
@@ -16,7 +16,7 @@
         def testAdd(self):  ## test method names begin 'test*'
             self.assertEquals((1 + 2), 3)
             self.assertEquals(0 + 1, 1)
-        def testMultiply(self);
+        def testMultiply(self):
             self.assertEquals((0 * 10), 0)
             self.assertEquals((5 * 8), 40)
 
@@ -46,7 +46,7 @@
 
 __author__ = "Steve Purcell"
 __email__ = "stephen_purcell at yahoo dot com"
-__version__ = "Revision: 1.40"
+__version__ = "$Revision: 1.14 $"[11:-2]
 
 import time
 import sys
@@ -60,6 +60,7 @@
 import twisted.python.failure
 import twisted.python.log
 
+
 ##############################################################################
 # Test framework core
 ##############################################################################
@@ -109,6 +110,10 @@
         "Indicates that the tests should be aborted"
         self.shouldStop = 1
 
+    def _exc_info_to_string(self, err):
+        """Converts a sys.exc_info()-style tuple of values into a string."""
+        return string.join(apply(traceback.format_exception, err), '')
+
     def __repr__(self):
         return "<%s run=%i errors=%i failures=%i>" % \
                (self.__class__, self.testsRun, len(self.errors),
@@ -149,9 +154,7 @@
            not have a method with the specified name.
         """
         try:
-            self.__testMethodName = methodName
-            testMethod = getattr(self, methodName)
-            self.__testMethodDoc = testMethod.__doc__
+            self.testMethod = getattr(self, methodName)
         except AttributeError:
             raise ValueError, "no such test method in %s: %s" % \
                   (self.__class__, methodName)
@@ -177,18 +180,18 @@
         The default implementation of this method returns the first line of
         the specified test method's docstring.
         """
-        doc = self.__testMethodDoc
+        doc = self.testMethod.__doc__
         return doc and string.strip(string.split(doc, "\n")[0]) or None
 
     def id(self):
-        return "%s.%s" % (self.__class__, self.__testMethodName)
+        return "%s.%s" % (self.__class__, self.testMethod.__name__)
 
     def __str__(self):
-        return "%s (%s)" % (self.__testMethodName, self.__class__)
+        return "%s (%s)" % (self.testMethod.__name__, self.__class__)
 
     def __repr__(self):
         return "<%s testMethod=%s>" % \
-               (self.__class__, self.__testMethodName)
+               (self.__class__, self.testMethod.__name__)
 
     def run(self, result=None):
         return self(result)
@@ -196,32 +199,31 @@
     def __call__(self, result=None):
         if result is None: result = self.defaultTestResult()
         result.startTest(self)
-        testMethod = getattr(self, self.__testMethodName)
         try:
             try:
                 self.setUp()
             except:
-                result.addError(self,self.__exc_info())
+                result.addError(self, self._exc_info())
                 return
 
             ok = 0
-            twisted.python.log.msg("---- Running Test: %s.%s ----- " % (self.__class__, self.__testMethodName))
+            twisted.python.log.msg("---- Running Test: %s.%s ----- " % (self.__class__, self.testMethod.__name__))
             try:
-                testMethod()
+                self.testMethod()
                 ok = 1
             except self.failureException, e:
-                result.addFailure(self,self.__exc_info())
+                result.addFailure(self, self._exc_info())
             except:
-                result.addError(self,self.__exc_info())
+                result.addError(self, self._exc_info())
 
             try:
                 self.tearDown()
             except:
-                result.addError(self,self.__exc_info())
+                result.addError(self, self._exc_info())
                 ok = 0
             for e in twisted.python.log.flushErrors():
-                result.addError(self, e)
-                ok = 0
+                 result.addError(self, e)
+                 ok = 0
             if ok: result.addSuccess(self)
         finally:
             result.stopTest(self)
@@ -232,7 +234,7 @@
         getattr(self, self.__testMethodName)()
         self.tearDown()
 
-    def __exc_info(self):
+    def _exc_info(self):
         """Return a version of sys.exc_info() with the traceback frame
            minimised; usually the top level of the traceback frame is not
            needed.
@@ -279,14 +281,16 @@
            operator.
         """
         if first != second:
-            raise self.failureException, (msg or '%s != %s' % (repr(first), repr(second)))
+            raise self.failureException, \
+                  (msg or '%s != %s' % (`first`, `second`))
 
     def failIfEqual(self, first, second, msg=None):
         """Fail if the two objects are equal as determined by the '=='
            operator.
         """
         if first == second:
-            raise self.failureException, (msg or '%s == %s' % (repr(first), repr(second)))
+            raise self.failureException, \
+                  (msg or '%s == %s' % (`first`, `second`))
 
     assertEqual = assertEquals = failUnlessEqual
 
@@ -586,7 +590,7 @@
             self.stream.writeln("%s: %s" % (flavour,self.getDescription(test)))
             self.stream.writeln(self.separator2)
             if isinstance(err, twisted.python.failure.Failure):
-                err.printTraceback()
+                err.printTraceback(self.stream)
             else:
                 for line in apply(traceback.format_exception, err):
                     for l in string.split(line,"\n")[:-1]:
