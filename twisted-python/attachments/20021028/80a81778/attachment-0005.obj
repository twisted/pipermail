#!/usr/bin/env python

from pyunit import deferunittest
from twisted.spread import pb


# TODO
# - Check in gui.

def cheapDeferred(arg = None):
    from twisted.internet import defer, reactor
    d = defer.Deferred()
    reactor.callLater(0, d.callback, arg)
    return d


class DemoTest(deferunittest.DeferredTestCase):
    """
    Demonstrates DeferredTestCase's asynchronous testing stuff.
    There are 4 successful tests, 4 failures and 2 errors, making 10 tests in
    total.
    """
    def setUp(self):
        d = cheapDeferred()
        d.addCallback(self._fireSetup)
        return d

    def _fireSetup(self, ignore=None):
        #print 'woohoo, deferred setup'
        pass

    def tearDown(self):
        return cheapDeferred()

    def exampleCallback(self, ret):
        """
        example callback for a deferred test.
        You can use some sort of pyunit assertion here (self.failUnless*)
        """
        self.failUnless((ret % 2) == 0, "ret is an odd number")

    def failingCallback(self, ret):
        """
        raises an exception.
        """
        raise "life stinks"
        
    def testDeferredExpectedFailure(self):
        """
        A deferred test. Callbacks and errbacks need to be added by hand.
        Returning the deferred lets the test framework know it's a deferred test

        This test is expected to PASS
        """
        import twisted.internet.error
        d = pb.connect("localhost", 1234, "baduser", "badpass",
                       "myservice", "perspective1")
        self.deferredFailUnlessRaises(d, twisted.internet.error.ConnectError)
        return d

    def testDeferredAbsentFailure(self):
        """
        This test is expected to FAIL
        """
        import twisted.internet.error
        d = cheapDeferred()
        self.deferredFailUnlessRaises(d, twisted.internet.error.ConnectError)
        return d

    def testDeferredEquality(self):
        """
        This test is expected to PASS
        """
        expected = 6
        d = cheapDeferred(expected)
        self.deferredFailUnlessEqual(d, expected)
        return d

    def testDeferredInequality(self):
        """
        This test is expected to FAIL
        """
        expected = 6
        d = cheapDeferred(expected + 1)
        self.deferredFailUnlessEqual(d, expected)
        return d

    def testDeferredSuccess(self):
        """
        This test is expected to PASS
        """
        d = cheapDeferred(4)
        d.addCallback(self.exampleCallback)
        return d

    def testDeferredFailure(self):
        """
        This test is expected to FAIL
        """
        d = cheapDeferred(5)
        d.addCallback(self.exampleCallback)
        return d

    def testDeferredError(self):
        """
        This test is expected to ERROR
        """
        d = cheapDeferred()
        d.addCallback(self.failingCallback)
        return d

    def testFail(self):
        """
        Ordinary tests work as well. Even failures
        """
        self.failUnless(0, "test failure")

    def testError(self):
        """
        Ordinary tests. 
        """
        raise "test error"
    
    def testSuccess(self):
        """
        Ordinary tests work.
        """
        self.failUnless(1, "test success")
