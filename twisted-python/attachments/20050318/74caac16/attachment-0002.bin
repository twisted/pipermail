from twisted.internet import reactor
from twisted.internet import defer
from twisted.python.failure import Failure

def waitDeferred(deferred):
    return_value = []
    return_error = []
   
    def done(results):
        return_value.append(results)
        reactor.stop()
   
    def error(failure):
        assert(isinstance(failure, Failure))
        failure.cleanFailure()
        return_error.append(failure)
       
        reactor.stop()
   
    deferred.addCallback(done)
    deferred.addErrback(error)

    reactor.run()
   
    if return_value:
        return return_value[0]
    else:
        raise return_error[0]
