from twisted.internet.protocol import ClientFactory, Factory, Protocol

class SimpleClientFactory(ClientFactory):
    def buildProtocol(self, addr):
        self.p = ClientDataConnection()
        self.p.factory = self
        return self.p
    
    def sendMessage(self, data):
        if hasattr(self, 'p'):
            self.p.sendData(data)

class SimpleFactory(Factory):
    def buildProtocol(self, addr):
        self.p = ServerDataConnection()
        self.p.factory = self
        return self.p

class ServerDataConnection(Protocol):
    def closeConnection(self):
        self.transport.loseConnection()
    
    def dataReceived(self, data):
        f = file('received.dat', 'w')
        f.write(data)
        f.close()


class ClientDataConnection(Protocol):
    def closeConnection(self):
        self.transport.loseConnection()
    
    def sendData(self, data):
        self.transport.write(data)
