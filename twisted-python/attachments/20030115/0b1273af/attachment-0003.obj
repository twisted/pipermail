"""Test cases for the Connection Manager"""

from __future__ import generators

import time

from twisted.trial import unittest
from twisted.internet import defer
from twisted.python import failure
try:
    from intellishelf import flow
except:
    import flow

class TestFlowSleep(unittest.TestCase):
    def flowSleepTest(self, n):
        for x in range(n):
            t = time.time()
            yield flow.Sleep(0.10)
            self.assertApproximates(time.time(), t + 0.10, 0.05)
        yield flow.FinalResult(n)
    flowSleepTest = flow.deferredflow(flowSleepTest)

    def finishTest(self, n):
        self.finished = n

    def testFlowSleep(self):
        from twisted.internet import reactor
        self.finished = None
        testValue = 8
        self.flowSleepTest(testValue).addBoth(self.finishTest)
        t = reactor.callLater(5.0, self.finishTest, 'Timeout')
        while not self.finished:
            reactor.iterate()
        if self.finished != 'Timeout':
            t.cancel()
        self.assertEqual(testValue, self.finished)    

def resErr(result, error):
    from twisted.internet import reactor
    d = defer.Deferred()
    try:
        if result is not None:
            reactor.callLater(0.1, d.callback, result)
            return d
        raise error
    except Exception, e: 
        reactor.callLater(0.1, d.errback, failure.Failure())
        return d

class TestGetDeferredResult(unittest.TestCase):
    def getDeferredResultTest(self, reserrs):
        for expres, experr in reserrs:
            result = flow.GetDeferredResult(resErr(expres, experr))
            yield result
            try:
                self.assertEqual(result.get(), expres)
            except:
                self.assert_(experr)
        yield flow.FinalResult(1)
    getDeferredResultTest = flow.deferredflow(getDeferredResultTest)

    def finish(self, v):
        self.finished = v

    def testGetDeferredResult(self):
        from twisted.internet import reactor
        self.finished = None
        self.getDeferredResultTest((('pass0', None), (None, Exception('fail1')), ('pass2', None), (None, Exception('fail3')))).addBoth(self.finish)
        while not self.finished:
            reactor.iterate()
        self.assertEqual(self.finished, 1)
        
