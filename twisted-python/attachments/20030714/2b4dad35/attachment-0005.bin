from twisted.internet import defer, reactor
from twisted.web.woven import page as P, model as M

template = """
<html>
<head>
	<title>Test</title>
</head>
<body>
<div model="main">
	<span model="test" view="Text"/>
</div>
</body>
</html>
"""

class MyModel(M.MethodModel):
	def initialize(self, *args, **kwargs):
		self.d = kwargs.get("deferred")
		reactor.callLater(2, self.stuff)
	
	def stuff(self):
		self.name = "this is a test"
		self.d.callback(self)

	def wmfactory_test(self, request):
		return self.name
		
class MyTest(P.Page):
	template = template
	
	def wmfactory_main(self, request):
		d = defer.Deferred()
		d.addCallback(self._cb)
		m = MyModel(deferred=d)
		return d
	
	def _cb(self, res):
		return res
		
resource = MyTest()