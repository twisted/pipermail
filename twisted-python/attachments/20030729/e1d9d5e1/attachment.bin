#
# FILE: trigger.py
#
# DESCRIPTION:
#   Define trigger types and methods for making/applying them.
#

# my imports
import process, errors
# python imports
import os 
# twisted imports
from twisted.internet import win32eventreactor
# Commented out because it complained that win32eventreactor was already installed
#win32eventreactor.install()
from twisted.internet import reactor

 
class Trigger: 
	"""ClearCase Trigger

	   Must be subclassed and have opkind and script set.
	"""
	def __init__(self, name, comment, server, vob): 
		self.name = name
		self.comment = comment
		self.opkind = ''
		self.op = ''
		self.server = server
		self.script = ''
		self.vob = vob
		self.perl = r'\\%s\perl\bin\perl.exe' % self.server

	def make(self): 
		"""Create the trigger type
		"""
		cmd = ['cleartool', 'mktrtype', '-element', '-all', self.opkind,
			   self.op, '-c', self.comment, '-execwin', self.perl,
			   self.script, self.name + '@' + self.vob]

		d = process.openProcess(cmd)

		def onSuccess(results):
			status, stdout, stderr = results
			print "status:", status
			print "stdout:", stdout
			print "stderr:", stderr
			return results

		d.addCallback(onSuccess)

		return d

	def remove(self):
		"""Remove the trigger type
		"""
		cmd = ['cleartool', 'rmtype', '-f', '-rmall',
			   'trtype:%s@%s' % (self.name, self.vob)]
		d = process.openProcess(cmd)
		return d
		
	def lock(self):
		"""Lock the trigger type
		"""
		args = {'name': self.name, 'vob': self.vob}
		cmd = ['cleartool', 'lock', 'trtype:%(name)s@%(vob)s' % args]
		d = process.openProcess(cmd)
		return d

 
class PreOpTrigger(Trigger):
	"""Superclass of all triggers that fire before an operation
	"""
	def __init__(self, name, comment, server, vob):
		Trigger.__init__(self, name, comment, server, vob)
		self.opkind = '-preop'
 
class PostOpTrigger(Trigger): 
	"""Superclass of all triggers that fire after an operation
	"""
	def __init__(self, name, comment, server, vob):
		Trigger.__init__(self, name, comment, server, vob)
		self.opkind = '-postop'
 
class PreRmverTrigger(PreOpTrigger):
	"""Prevent rmver operations
	"""
	def __init__(self, name, comment, server, vob):
		PreOpTrigger.__init__(self, name, comment, server, vob)
		self.op = 'rmver'
		self.script = r'\\%s\ccase\triggers\pre_%s.pl' % (self.server, self.op)

class PreRmelemTrigger(PreOpTrigger):
	"""Prevent rmelem operations
	"""
	def __init__(self, name, comment, server, vob):
		PreOpTrigger.__init__(self, name, comment, server, vob)
		self.op = 'rmelem'
		self.script = r'\\%s\ccase\triggers\pre_%s.pl' % (self.server, self.op)

if __name__ == '__main__':
	t = PreRmverTrigger("pre_rmver", "prevent rmver", "rat00007", r'\triggertest')
	d = t.make()
	d.addCallback(t.remove)

	reactor.callLater(2, reactor.stop)
	reactor.run()
