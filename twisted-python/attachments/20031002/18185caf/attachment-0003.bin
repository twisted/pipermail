from twisted.web.woven import page
from ratcontrol.web import widgets, webinterfaces
import os

theTemplateDirectory = os.path.join(os.path.split(__file__)[0], "templates")

# Page definitions
class MenuPage(page.Page):
    templateFile = "menu.html"
    templateDirectory = theTemplateDirectory

    def wmfactory_action(self, request):
        #prefs = request.getSession(webinterfaces.IRatControlSession)
        prefs = webinterfaces.IRatControlSession(request.getSession())
        #prefs = request.getSession()
        #prefs.handleRequest(request)
        #action = prefs.get('action', '')
        #widget.setAttribute('action', str(prefs))
        return str(prefs)

class HeaderPage(page.Page):
    templateFile = "header.html"
    templateDirectory = theTemplateDirectory

class FooterPage(page.Page):
    templateFile = "footer.html"
    templateDirectory = theTemplateDirectory

class MainPage(page.Page):
    templateFile = "main.html"
    templateDirectory = theTemplateDirectory


class MkvobPage(page.Page):
    templateFile = "mkvob.html"
    templateDirectory = theTemplateDirectory

# Index page which brings other pages together
class IndexPage(page.Page):
    templateFile = "index.html"
    templateDirectory = theTemplateDirectory

    def wvfactory_header(self, request, node, model):
        return HeaderPage()

    def wvfactory_footer(self, request, node, model):
        return FooterPage()

    def wvfactory_menu(self, request, node, model):
        return MenuPage()

    def wvfactory_main(self, request, node, model):
        if request.args.has_key("action"):
            action = request.args.get("action")[0]
        else:
            action = None

        if action == 'mkvob':
            return MkvobPage()
        else:
            return MainPage()

    def wvfactory_mkvob(self, request, node, model):
        return MkvobPage()

    def wvfactory_results(self, request, node, model):
        tasks = ["task%s" % str(t+1) for t in xrange(5)]
        steps = ["step%s" % str(s+1) for s in xrange(5)]
        states = ["I","S","F"]
        statesDict = {}
        statesDict["I"] = "in progress"
        statesDict["S"] = "success"
        statesDict["F"] = "failure"
        rt = widgets.ResultsTable(tasks, steps)
        rt.setStepStatus("task1","step1","F")
        rt.setStepStatus("task3","step2","I")
        rt.setStepStatus("task5","step3","S")
        return page.Page(template=str(rt))

    def wmfactory_action(self, request):
        if request.args.has_key("action"):
            action = request.args.get("action")[0]
        else:
            action = None
        return action
