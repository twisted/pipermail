<tt>
&lt;!DOCTYPE&nbsp;HTML&nbsp;PUBLIC&nbsp;&quot;-//W3C//DTD&nbsp;HTML&nbsp;4.0&nbsp;TRANSITIONAL//EN&quot;&gt;<br>
&lt;HTML&gt;<br>
&lt;HEAD&gt;<br>
&nbsp;&nbsp;&lt;META&nbsp;HTTP-EQUIV=&quot;Content-Type&quot;&nbsp;CONTENT=&quot;text/html;&nbsp;CHARSET=UTF-8&quot;&gt;<br>
&nbsp;&nbsp;&lt;META&nbsp;NAME=&quot;GENERATOR&quot;&nbsp;CONTENT=&quot;GtkHTML/3.18.1&quot;&gt;<br>
&lt;/HEAD&gt;<br>
&lt;BODY&gt;<br>
Hi&nbsp;all,&lt;BR&gt;<br>
&lt;BR&gt;<br>
I'm&nbsp;hitting&nbsp;the&nbsp;recursion&nbsp;limit&nbsp;in&nbsp;my&nbsp;code&nbsp;(well,&nbsp;somewhere&nbsp;inside&nbsp;Twisted,&nbsp;that&nbsp;is),&nbsp;and&nbsp;I'd&nbsp;appreciate&nbsp;any&nbsp;insight&nbsp;as&nbsp;to&nbsp;why.&nbsp;I&nbsp;wouldn't&nbsp;think&nbsp;what&nbsp;I'm&nbsp;doing&nbsp;--&nbsp;returning&nbsp;a&nbsp;callback&nbsp;from&nbsp;method&nbsp;A&nbsp;which&nbsp;calls&nbsp;method&nbsp;B,&nbsp;which&nbsp;then&nbsp;in&nbsp;turn&nbsp;calls&nbsp;method&nbsp;A&nbsp;again&nbsp;--&nbsp;would&nbsp;be&nbsp;controversial,&nbsp;since&nbsp;I'd&nbsp;assume&nbsp;Python&nbsp;would&nbsp;be&nbsp;letting&nbsp;go&nbsp;of&nbsp;the&nbsp;stack&nbsp;for&nbsp;method&nbsp;A,&nbsp;but&nbsp;I&nbsp;guess&nbsp;there's&nbsp;more&nbsp;to&nbsp;it&nbsp;than&nbsp;that.&lt;BR&gt;<br>
&lt;BR&gt;<br>
Code&nbsp;demonstrating&nbsp;the&nbsp;issue&nbsp;follows.&nbsp;Running&nbsp;it&nbsp;results&nbsp;in:&lt;BR&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;File&nbsp;&amp;quot;/usr/lib/python2.5/site-packages/twisted/python/reflect.py&amp;quot;,&nbsp;line&nbsp;550,&nbsp;in&nbsp;accumulateBases&lt;BR&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;accumulateBases(base,&nbsp;l,&nbsp;baseClass)&lt;BR&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;exceptions.RuntimeError:&nbsp;maximum&nbsp;recursion&nbsp;depth&nbsp;exceeded&lt;BR&gt;<br>
&lt;BR&gt;<br>
(This&nbsp;doesn't&nbsp;actually&nbsp;perfectly&nbsp;reflect&nbsp;my&nbsp;problem&nbsp;in&nbsp;the&nbsp;real&nbsp;code&nbsp;I'm&nbsp;working&nbsp;with.&nbsp;I'm&nbsp;seeing&nbsp;&amp;quot;'maximum&nbsp;recursion&nbsp;depth&nbsp;exceeded'&nbsp;in&nbsp;&amp;lt;bound&nbsp;method&nbsp;DebugInfo.__del__&nbsp;of&nbsp;&amp;lt;twisted.internet.defer.DebugInfo&nbsp;instance&nbsp;at&nbsp;0xb1d99b6c&amp;gt;&amp;gt;&amp;quot;,&nbsp;but&nbsp;I&nbsp;assume&nbsp;this&nbsp;is&nbsp;coming&nbsp;from&nbsp;the&nbsp;same&nbsp;basic&nbsp;problem&nbsp;in&nbsp;my&nbsp;code.)&lt;BR&gt;<br>
&lt;BR&gt;<br>
===================================&lt;BR&gt;<br>
&lt;BR&gt;<br>
from&nbsp;twisted.internet&nbsp;import&nbsp;defer,&nbsp;reactor&lt;BR&gt;<br>
&lt;BR&gt;<br>
def&nbsp;yo_print(s,&nbsp;d):&lt;BR&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;print&nbsp;s&lt;BR&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;d.callback(s)&lt;BR&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;return&nbsp;s&lt;BR&gt;<br>
&lt;BR&gt;<br>
def&nbsp;some_deferred(item):&lt;BR&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;d&nbsp;=&nbsp;defer.Deferred()&lt;BR&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;reactor.callLater(0,&nbsp;lambda:&nbsp;yo_print(item,&nbsp;d))&lt;BR&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;return&nbsp;d&lt;BR&gt;<br>
&lt;BR&gt;<br>
def&nbsp;start(items):&lt;BR&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;dl&nbsp;=&nbsp;[]&lt;BR&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;for&nbsp;item&nbsp;in&nbsp;items:&lt;BR&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;dl.append(some_deferred(item))&lt;BR&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;if&nbsp;len(dl)&nbsp;&amp;gt;&nbsp;4:&lt;BR&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;break&lt;BR&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;items&nbsp;=&nbsp;items[len(dl):]&lt;BR&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;if&nbsp;dl:&lt;BR&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;return&nbsp;defer.DeferredList(dl).addCallback(next_batch,&nbsp;items)&lt;BR&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;reactor.stop()&lt;BR&gt;<br>
&lt;BR&gt;<br>
def&nbsp;next_batch(_,&nbsp;items):&lt;BR&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;return&nbsp;start(items)&lt;BR&gt;<br>
&lt;BR&gt;<br>
if&nbsp;__name__&nbsp;==&nbsp;'__main__':&lt;BR&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;items&nbsp;=&nbsp;[]&lt;BR&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;for&nbsp;i&nbsp;in&nbsp;range(1651):&nbsp;#&nbsp;1650&nbsp;doesn't&nbsp;do&nbsp;it&lt;BR&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;items.append(i)&lt;BR&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;print&nbsp;start(items)&lt;BR&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;reactor.run()&lt;BR&gt;<br>
&amp;#65279;&lt;BR&gt;<br>
===================================&lt;BR&gt;<br>
&lt;BR&gt;<br>
So&nbsp;I&nbsp;guess&nbsp;the&nbsp;rule&nbsp;is&nbsp;to&nbsp;never,&nbsp;within&nbsp;a&nbsp;callback&nbsp;chain,&nbsp;call&nbsp;a&nbsp;function&nbsp;which&nbsp;was&nbsp;invoked&nbsp;earlier&nbsp;in&nbsp;the&nbsp;callback&nbsp;chain?&lt;BR&gt;<br>
&lt;BR&gt;<br>
Steve<br>
&lt;/BODY&gt;<br>
&lt;/HTML&gt;<br>

</tt>
