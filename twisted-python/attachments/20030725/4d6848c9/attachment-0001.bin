from twisted.internet import protocol, defer, error
from twisted.internet import win32eventreactor
win32eventreactor.install()
from twisted.internet import reactor

class CmdProcessProtocol(protocol.ProcessProtocol):
	def __init__(self):
		self.finished = False
		self.stdout = ''
		self.stderr = ''
		self.status = None
		self.deferred = defer.Deferred()

	def connectionMade(self):
		self.stdout = ''
		self.stderr = ''

	def outReceived(self, data):
		self.stdout = self.stdout + data

	def errReceived(self, data):
		self.stderr = self.stderr + data

	def inConnectionLost(self):
		pass

	def outConnectionLost(self):
		pass

	def errConnectionLost(self):
		pass

	def processEnded(self, status):
		self.finished = True
		#self.reason = reason
		#self.deferred.callback(reason)
		if isinstance(status, error.ProcessDone):
			self.status = 1
		else:
			self.status = 0
		print "status:", self.status
		reactor.stop()


exe = r"c:\program files\rational\clearcase\bin\cleartool.exe"
p = CmdProcessProtocol()
reactor.spawnProcess(p, exe, [exe, "lsview", "-s"], env=None)
#p.addBoth(lambda ignore: reactor.callLater(0.0, reactor.stop))
reactor.run()
