<tt>
I&nbsp;am&nbsp;using&nbsp;PB&nbsp;to&nbsp;run&nbsp;remote&nbsp;methods&nbsp;in&nbsp;a&nbsp;testing&nbsp;system&nbsp;at&nbsp;my&nbsp;company. &nbsp;The&nbsp;code&nbsp;works&nbsp;very&nbsp;well&nbsp;but&nbsp;breaks&nbsp;down&nbsp;when&nbsp;I&nbsp;start&nbsp;running&nbsp;multiple&nbsp;tests&nbsp;at&nbsp;once. &nbsp;I&nbsp;have&nbsp;tracked&nbsp;this&nbsp;down&nbsp;to&nbsp;overflowing&nbsp;the&nbsp;thread&nbsp;pool&nbsp;on&nbsp;the&nbsp;remote&nbsp;machines. &nbsp;I&nbsp;am&nbsp;wondering&nbsp;if&nbsp;anyone&nbsp;might&nbsp;have&nbsp;better&nbsp;suggestions&nbsp;for&nbsp;running&nbsp;long&nbsp;methods&nbsp;from&nbsp;a&nbsp;remote&nbsp;method.&lt;br&gt;<br>
<br>
&lt;br&gt;I&nbsp;coded&nbsp;up&nbsp;a&nbsp;sample&nbsp;of&nbsp;what&nbsp;I&nbsp;am&nbsp;seeing&nbsp;here:&nbsp;&lt;a&nbsp;href=&quot;http://pastebin.com/rBPp20Ms&quot;&gt;http://pastebin.com/rBPp20Ms&lt;/a&gt;&lt;br&gt;&lt;br&gt;Basically&nbsp;I&nbsp;have&nbsp;1&nbsp;server&nbsp;that&nbsp;calls&nbsp;remote_execute&nbsp;on&nbsp;many&nbsp;clients&nbsp;on&nbsp;a&nbsp;remote&nbsp;server. &nbsp;This&nbsp;remote_execute&nbsp;method&nbsp;starts&nbsp;a&nbsp;new&nbsp;method&nbsp;using&nbsp;threads.deferToThread&nbsp;and&nbsp;returns&nbsp;the&nbsp;defer&nbsp;to&nbsp;make&nbsp;the&nbsp;server&amp;#39;s&nbsp;callRemote&nbsp;defer&nbsp;wait&nbsp;until&nbsp;the&nbsp;remote&nbsp;long&nbsp;method&nbsp;end.&lt;br&gt;<br>
<br>
What&nbsp;I&nbsp;do&nbsp;in&nbsp;those&nbsp;methods&nbsp;is&nbsp;run&nbsp;test&nbsp;code&nbsp;that&nbsp;waits,&nbsp;blocks,&nbsp;sleeps,&nbsp;and&nbsp;all&nbsp;sorts&nbsp;of&nbsp;nasty&nbsp;things&nbsp;that&nbsp;make&nbsp;the&nbsp;thread&nbsp;take&nbsp;a&nbsp;while. &nbsp;In&nbsp;the&nbsp;example&nbsp;code&nbsp;I&nbsp;simply&nbsp;sleep&nbsp;for&nbsp;20&nbsp;seconds.&lt;br&gt;&lt;br&gt;The&nbsp;problem&nbsp;I&nbsp;see&nbsp;with&nbsp;this&nbsp;code&nbsp;specifically&nbsp;is&nbsp;that&nbsp;I&nbsp;run&nbsp;out&nbsp;of&nbsp;threads&nbsp;on&nbsp;the&nbsp;pool&nbsp;and&nbsp;even&nbsp;though&nbsp;I&nbsp;wanted&nbsp;all&nbsp;execute&nbsp;methods&nbsp;to&nbsp;run&nbsp;at&nbsp;the&nbsp;same&nbsp;time,&nbsp;I&nbsp;see&nbsp;10&nbsp;run,&nbsp;then&nbsp;10&nbsp;more,&nbsp;then&nbsp;10&nbsp;more..&nbsp;etc. &nbsp;The&nbsp;testing&nbsp;depends&nbsp;on&nbsp;all&nbsp;these&nbsp;methods&nbsp;being&nbsp;run&nbsp;at&nbsp;the&nbsp;same&nbsp;time&nbsp;as&nbsp;they&nbsp;run&nbsp;mechanisms&nbsp;that&nbsp;depend&nbsp;on&nbsp;each&nbsp;other&nbsp;and&nbsp;need&nbsp;everyone&nbsp;running. &nbsp;When&nbsp;I&nbsp;overflow&nbsp;the&nbsp;thread&nbsp;pool&nbsp;some&nbsp;methods&nbsp;do&nbsp;not&nbsp;run&nbsp;until&nbsp;other&nbsp;methods&nbsp;stop,&nbsp;which&nbsp;makes&nbsp;the&nbsp;whole&nbsp;test&nbsp;fail.&lt;br&gt;<br>
<br>
&lt;br&gt;I&nbsp;am&nbsp;not&nbsp;holding&nbsp;the&nbsp;GIL&nbsp;or&nbsp;blocking&nbsp;the&nbsp;reactor,&nbsp;which&nbsp;was&nbsp;the&nbsp;first&nbsp;thing&nbsp;I&nbsp;checked.&lt;br&gt;&lt;br&gt;Setting&nbsp;reactor.suggestThreadPoolSize(50)&nbsp;does&nbsp;help,&nbsp;but&nbsp;I&nbsp;do&nbsp;not&nbsp;think&nbsp;its&nbsp;the&nbsp;best&nbsp;solution,&nbsp;and&nbsp;does&nbsp;not&nbsp;work&nbsp;very&nbsp;well&nbsp;on&nbsp;our&nbsp;slow&nbsp;and&nbsp;older&nbsp;machines.&lt;br&gt;<br>
<br>
&lt;br&gt;Any&nbsp;feedback&nbsp;is&nbsp;appreciated&lt;br&gt;Charles&lt;br&gt;<br>

</tt>
