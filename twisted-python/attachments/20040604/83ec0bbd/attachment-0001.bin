Index: test_enterprise.py
===================================================================
--- test_enterprise.py	(revision 10840)
+++ test_enterprise.py	(working copy)
@@ -105,6 +105,17 @@
 )
 """
 
+interesting_table_schema = """
+CREATE TABLE interesting (
+  beastid        integer,
+  yaddayadda     varchar(64),
+  moof           varchar(64),
+  yinyang        varchar(64),
+  hoopdie        varchar(64),
+  answer         integer
+)
+"""
+
 def randomizeRow(row, nullsOK=1, trailingSpacesOK=1):
     values = {}
     for name, type in row.rowColumns:
@@ -336,12 +347,14 @@
         deferredResult(self.dbpool.runOperation(main_table_schema))
         deferredResult(self.dbpool.runOperation(child_table_schema))
         deferredResult(self.dbpool.runOperation(simple_table_schema))
+        deferredResult(self.dbpool.runOperation(interesting_table_schema))
         return self.reflectorClass(self.dbpool, [TestRow, ChildRow])
 
     def destroyReflector(self):
         deferredResult(self.dbpool.runOperation('DROP TABLE testTable'))
         deferredResult(self.dbpool.runOperation('DROP TABLE childTable'))
         deferredResult(self.dbpool.runOperation('DROP TABLE simple'))
+        deferredResult(self.dbpool.runOperation('DROP TABLE interesting'))
         self.dbpool.close()
         self.stopDB()
 
@@ -385,7 +398,7 @@
         for i in range(self.count):
             self.failUnless(result[i][1][0][0] == i, "Value not returned")
 
-        # now delete everything
+        # now delete everything from simple table
         ds = []
         for i in range(self.count):
             sql = "delete from simple where x = %d" % i
@@ -398,6 +411,42 @@
         row = deferredResult(self.dbpool.runQuery(sql))
         self.failUnless(int(row[0][0]) == 0, "Interaction not rolled back")
 
+        # verify interesting table is empty
+        sql = "select count(*) from interesting"
+        row = deferredResult(self.dbpool.runQuery(sql))
+        self.failUnless(int(row[0][0]) == 0, "Interaction not rolled back")
+
+        # add an interesting row to interesting table (runOperation)
+        sql = "insert into interesting(beastid, yaddayadda, moof, yinyang, hoopdie, answer) values(666, 'oo', 'bop', 'a', 'loola', 42)"
+        deferredResult(self.dbpool.runOperation(sql))
+
+        # try runQueryMapped
+        sql = "select * from interesting";
+        rows = deferredResult(self.dbpool.runQueryMapped(sql))
+        self.failUnless(len(rows) == 1, "Wrong number of rows")
+        self.failUnless(len(rows[0]) == 1, "Wrong size row")
+        valuedict = {'beastid'    : 666,
+                     'yaddayadda' : 'oo',
+                     'moof'       : 'bop',
+                     'yinyang'    : 'a',
+                     'hoopdie'    : 'loola',
+                     'answer'     : 42}
+        for a in valuedict:
+            self.failUnless(rows[0][a] == valuedict[a], "Values not mapped properly.")
+
+        # now delete everything
+        ds = []
+        for i in range(self.count):
+            sql = "delete from interesting where x = %d" % i
+            ds.append(self.dbpool.runOperation(sql))
+        dlist = defer.DeferredList(ds, fireOnOneErrback=1)
+        deferredResult(dlist)
+
+        # verify interesting table is empty
+        sql = "select count(*) from interesting"
+        row = deferredResult(self.dbpool.runQuery(sql))
+        self.failUnless(int(row[0][0]) == 0, "Interaction not rolled back")
+
     def interaction(self, transaction):
         transaction.execute("select x from simple order by x")
         for i in range(self.count):
