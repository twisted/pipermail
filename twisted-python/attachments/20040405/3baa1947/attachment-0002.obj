# ======================================= server.py ========================================
from twisted.spread import pb
from twisted.internet import reactor

from copyableClasses import MyTypeWrapper
import myType as myTypeModule

myTypeCount = 5
myTypeList = [myTypeModule.MyType() for i in range(myTypeCount)]

class MyTypeGetter(pb.Root):
    def __init__(self, myTypeList):
        self.__myTypeList = myTypeList
        self.__index = 0
    def remote_getMyType(self):
        if self.__index < len(self.__myTypeList):
            myType = self.__myTypeList[self.__index]
            self.__index += 1
        else:
            raise RuntimeError, "no more myTypes :("
        returnObj = MyTypeWrapper(myType)
        return returnObj
    def remote_shutdown(self):
        print "server stopping"
        reactor.stop()

reactor.listenTCP(8789, pb.PBServerFactory(MyTypeGetter(myTypeList)))
reactor.run()
