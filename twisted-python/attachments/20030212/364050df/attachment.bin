"""Twisted Tap-builder for the PGEF Repository Service"""

# $Id: pgertap.py,v 1.6 2003/01/11 05:07:47 waterbug Exp $

# Twisted imports ...
from twisted.python import usage
from twisted.internet.app import Application
from twisted.web import server, resource
from twisted.enterprise import adbapi
# Pan Galactic imports ...
from pangalactic.repo.registry import PgerObjectRegistry
from pangalactic.repo.db import PgerDb
from pangalactic.repo.pger import Pger
from pangalactic.repo.xmlrpc import PgerXmlrpcService


class Options(usage.Options):
    optParameters = [["port", "p", 8080,
                      "Port number to listen on."],
                     ["dbname", "d", "pgerdb",
                      "Database name."],
                     ["aopkg", "a", "pangalactic.common",
                      '''The application object package; i.e., the
                      Python package that contains a module for
                      each application object that will be
                      managed in the repository.'''],
                     ["orgservice", "o", "org.tsv",
                      '''Organization directory service --
                      default is to use the org.tsv file in the
                      conf dir.  If no org service is specified
                      and org.tsv is absent or empty, the only
                      org is the universe and everybody is a
                      member ...'''],
                     ["idservice", "i", "id.tsv",
                      '''Person identity directory service --
                      default is to use the id.tsv file in the
                      conf dir.  If no id service is specified
                      and id.tsv is absent or empty, everybody is
                      "me" ...'''],
                     ["credservice", "c", "cred.tsv",
                      '''Credential directory service (user
                      roles) -- default is to use the cred.tsv
                      file in the conf dir.  If no credential
                      service is specified and cred.tsv is absent
                      or empty, everybody has access to
                      everything ...''']]

def updateApplication(app, config):

    if config["port"]:               # If I was given "port" option ...
        port = int(config["port"])   # set TCP port to listen on

    if config["dbname"]:             # If I was given "dbname" option ...
        dbname = config["dbname"]    # set database name

    if config["aopkg"]:              # If I was given "aopkg" option ...
        aopkg = config["aopkg"]      # set name of package
                                     # containing application objects

    if config["orgservice"]:         # If I was given "orgservice" option ...
        pass                         # use Organization Identification Service specified;
    else:                            # otherwise, load organizations from org.tsv
        pass

    if config["idservice"]:          # If I was given "idservice" option ...
        pass                         # use Directory Service specified;
    else:                            # otherwise, load people from id.tsv
        pass

    if config["credservice"]:        # If I was given a "credservice" option ...
        pass                         # use the Credential Service specified;
    else:                            # otherwise, load credentials from cred.tsv 
        pass

    connpool = adbapi.ConnectionPool('pyPgSQL.PgSQL', database=dbname)
    db = PgerDb(connpool)
    registry = PgerObjectRegistry(dbname, aopkg)
    repo = Pger(db, registry)
    # Multiplexer resource "mux" dispatches requests to Web,
    # XML-RPC, or SOAP handler, depending on child path.
    # Standard base URLs: 'WWW', 'RPC2', 'SOAP' (probably should
    # be case-insensitive).
    mux = resource.Resource()
    mux.putChild('RPC2', PgerXmlrpcService(repo))
    # ... and similarly for other handlers ...
    app.listenTCP(port, server.Site(mux))

