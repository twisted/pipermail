#!/usr/bin/env python
from twisted.conch.ssh import forwarding, transport, userauth, connection, common, keys, channel
from twisted.internet import defer, protocol, reactor
from twisted.python import log
import struct, sys, getpass, os

USER = 'oisin'  # replace this with a valid username
HOST = 'tarsis' # and a valid host

class SimpleTransport(transport.SSHClientTransport):

    def verifyHostKey(self, hostKey, fingerprint):
        """
        """
        print 'host key fingerprint: %s' % fingerprint
        return defer.succeed(1) 

    def connectionSecure(self):
        """
        """
        self.requestService(SimpleUserAuth(USER, SimpleConnection()))


class SimpleUserAuth(userauth.SSHUserAuthClient):
    def getPassword(self):
        return defer.succeed(getpass.getpass("%s@%s's password: " % (USER, HOST)))

    def getPublicKey(self):
        path = os.path.expanduser('~/.ssh/id_dsa') 
        # this works with rsa too
        # just change the name here and in getPrivateKey
        if not os.path.exists(path) or hasattr(self, 'lastPublicKey'):
            # the file doesn't exist, or we've tried a public key
            return
        return keys.getPublicKeyString(path+'.pub')

    def getPrivateKey(self):
        path = os.path.expanduser('~/.ssh/id_dsa')
        return defer.succeed(keys.getPrivateKeyObject(path))


class SimpleConnection(connection.SSHConnection):
    def serviceStarted(self):
        reactor.listenTCP(11122,
            forwarding.SSHListenForwardingFactory(self, 
                ('tarsis', 22), 
                forwarding.SSHListenClientForwardingChannel
            )
        )

protocol.ClientCreator(reactor, SimpleTransport).connectTCP(HOST, 22)
reactor.run()
