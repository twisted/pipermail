<tt>
&lt;span&nbsp;class=&quot;Apple-style-span&quot;&nbsp;style=&quot;font-family:&nbsp;arial,&nbsp;sans-serif;&nbsp;font-size:&nbsp;13px;&nbsp;background-color:&nbsp;rgb(255,&nbsp;255,&nbsp;255);&nbsp;&quot;&gt;I&nbsp;have&nbsp;a&nbsp;question&nbsp;on&nbsp;LoopCall.&lt;br&gt;&lt;br&gt;I&nbsp;have&nbsp;a&nbsp;process&nbsp;that&nbsp;uses&nbsp;a&nbsp;sequence&nbsp;of&nbsp;LoopCalls,&nbsp;once&nbsp;one&nbsp;finishes&lt;br&gt;<br>
I&nbsp;call&nbsp;the&nbsp;next&nbsp;to&nbsp;check&nbsp;for&nbsp;the&nbsp;next&nbsp;critical&nbsp;event&nbsp;to&nbsp;continue:&lt;br&gt;&lt;br&gt;e.g.&lt;br&gt;&lt;br&gt; &nbsp; def&nbsp;checkForAvailableProfile(self):&lt;br&gt; &nbsp; &nbsp; &nbsp; profile&nbsp;=&nbsp;fs_profiles_manager.get_next_available_profile()&lt;br&gt; &nbsp; &nbsp; &nbsp; if&nbsp;profile&nbsp;is&nbsp;None:&lt;br&gt;<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return&lt;br&gt; &nbsp; &nbsp; &nbsp; else:&lt;br&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.checkForAvailableProfileLoop.stop()&lt;br&gt;&lt;br&gt; &nbsp; &nbsp; &nbsp; self.profile&nbsp;=&nbsp;profile&lt;br&gt;&lt;br&gt; &nbsp; &nbsp; &nbsp; logging.debug(&amp;quot;using&nbsp;profile:&nbsp;%s&amp;quot;,&nbsp;self.profile[&amp;#39;name&amp;#39;])&lt;br&gt;&lt;br&gt;<br>
 &nbsp; &nbsp; &nbsp; self.ff&nbsp;=&nbsp;FirefoxProcess(self.profile,&nbsp;self.params)&lt;br&gt; &nbsp; &nbsp; &nbsp; self.ff.run()&lt;br&gt;&lt;br&gt; &nbsp; &nbsp; &nbsp; self.checkForEventsFileLoop&nbsp;=&nbsp;LoopingCall(self.checkIfEventsFileExists)&lt;br&gt; &nbsp; &nbsp; &nbsp; self.checkForEventsFileLoop.start(0.5)&lt;br&gt;<br>
 &nbsp; &nbsp; &nbsp; self.state&nbsp;=&nbsp;self.STATE_WAIT_FOR_EVENTS&lt;br&gt;&lt;br&gt;====================================================&lt;br&gt;&lt;br&gt;The&nbsp;problem&nbsp;is&nbsp;that&nbsp;I&amp;#39;m&nbsp;getting&nbsp;errors,&nbsp;errors&nbsp;when&nbsp;I&nbsp;try&nbsp;to&nbsp;call&nbsp;stop&lt;br&gt;when&nbsp;stop&nbsp;perhaps&nbsp;has&nbsp;already&nbsp;been&nbsp;called.&lt;br&gt;<br>
I&nbsp;want&nbsp;advice&nbsp;on&nbsp;how&nbsp;to&nbsp;manage&nbsp;LoopCalls.&nbsp;So&nbsp;far&nbsp;I&amp;#39;m&nbsp;using&nbsp;state&nbsp;variables.&lt;br&gt;e.g.&lt;br&gt;self.state&nbsp;=&nbsp;self.STATE_WAIT_FOR_EVENTS&lt;br&gt;&lt;br&gt;if&nbsp;something&nbsp;goes&nbsp;haywire&nbsp;or&nbsp;if&nbsp;the&nbsp;process&nbsp;is&nbsp;done&nbsp;I&nbsp;have&nbsp;a&nbsp;function&lt;br&gt;that&nbsp;cleans&nbsp;up&nbsp;all&nbsp;the&nbsp;LoopCalls&nbsp;so&nbsp;it&amp;#39;s&nbsp;not&nbsp;checking&nbsp;constantly:&lt;br&gt;<br>
&lt;br&gt; &nbsp; def&nbsp;cleanExit(self):&lt;br&gt; &nbsp; &nbsp; &nbsp; if&nbsp;self.state&nbsp;==&nbsp;self.STATE_WAIT_FOR_PROFILE:&lt;br&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.checkForAvailableProfileLoop.stop()&lt;br&gt; &nbsp; &nbsp; &nbsp; elif&nbsp;self.state&nbsp;==&nbsp;self.STATE_WAIT_FOR_EVENTS:&lt;br&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.checkForEventsFileLoop.stop()&lt;br&gt;<br>
 &nbsp; &nbsp; &nbsp; elif&nbsp;self.state&nbsp;==&nbsp;self.STATE_WAIT_FOR_PROC_KILLED:&lt;br&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.checkIfFirefoxWasKilledLoop.stop()&lt;br&gt;&lt;br&gt; &nbsp; &nbsp; &nbsp; self.ff.cleanExit()&lt;br&gt;&lt;br&gt;&lt;br&gt;the&nbsp;above&nbsp;code&nbsp;is&nbsp;what&nbsp;I&nbsp;believe&nbsp;is&nbsp;causing&nbsp;my&nbsp;exceptions,&nbsp;but&nbsp;how&lt;br&gt;<br>
else&nbsp;do&nbsp;I&nbsp;check&nbsp;for&nbsp;the&nbsp;LoopCalls?&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;=====================================================&lt;br&gt;&lt;br&gt;2011-08-31&nbsp;12:30:11-0700&nbsp;[FiresharkProtocol,1278,127.0.0.1]&nbsp;Unhandled&nbsp;Error&lt;br&gt; &nbsp; Traceback&nbsp;(most&nbsp;recent&nbsp;call&nbsp;last):&lt;br&gt;<br>
 &nbsp; &nbsp; File&nbsp;&amp;quot;/usr/lib/python2.6/dist-packages/twisted/application/app.py&amp;quot;,&lt;br&gt;line&nbsp;348,&nbsp;in&nbsp;runReactorWithLogging&lt;br&gt; &nbsp; &nbsp; &nbsp; reactor.run()&lt;br&gt; &nbsp; &nbsp; File&nbsp;&amp;quot;/usr/lib/python2.6/dist-packages/twisted/internet/base.py&amp;quot;,&lt;br&gt;<br>
line&nbsp;1170,&nbsp;in&nbsp;run&lt;br&gt; &nbsp; &nbsp; &nbsp; self.mainLoop()&lt;br&gt; &nbsp; &nbsp; File&nbsp;&amp;quot;/usr/lib/python2.6/dist-packages/twisted/internet/base.py&amp;quot;,&lt;br&gt;line&nbsp;1182,&nbsp;in&nbsp;mainLoop&lt;br&gt; &nbsp; &nbsp; &nbsp; self.doIteration(t)&lt;br&gt; &nbsp; &nbsp; File&nbsp;&amp;quot;/usr/lib/python2.6/dist-packages/twisted/internet/selectreactor.py&amp;quot;,&lt;br&gt;<br>
line&nbsp;140,&nbsp;in&nbsp;doSelect&lt;br&gt; &nbsp; &nbsp; &nbsp; _logrun(selectable,&nbsp;_drdw,&nbsp;selectable,&nbsp;method,&nbsp;dict)&lt;br&gt; &nbsp; ---&nbsp;&amp;lt;exception&nbsp;caught&nbsp;here&amp;gt;&nbsp;---&lt;br&gt; &nbsp; &nbsp; File&nbsp;&amp;quot;/usr/lib/python2.6/dist-packages/twisted/python/log.py&amp;quot;,&lt;br&gt;line&nbsp;84,&nbsp;in&nbsp;callWithLogger&lt;br&gt;<br>
 &nbsp; &nbsp; &nbsp; return&nbsp;callWithContext({&amp;quot;system&amp;quot;:&nbsp;lp},&nbsp;func,&nbsp;*args,&nbsp;**kw)&lt;br&gt; &nbsp; &nbsp; File&nbsp;&amp;quot;/usr/lib/python2.6/dist-packages/twisted/python/log.py&amp;quot;,&lt;br&gt;line&nbsp;69,&nbsp;in&nbsp;callWithContext&lt;br&gt; &nbsp; &nbsp; &nbsp; return&nbsp;context.call({ILogContext:&nbsp;newCtx},&nbsp;func,&nbsp;*args,&nbsp;**kw)&lt;br&gt;<br>
 &nbsp; &nbsp; File&nbsp;&amp;quot;/usr/lib/python2.6/dist-packages/twisted/python/context.py&amp;quot;,&lt;br&gt;line&nbsp;59,&nbsp;in&nbsp;callWithContext&lt;br&gt; &nbsp; &nbsp; &nbsp; return&nbsp;self.currentContext().callWithContext(ctx,&nbsp;func,&nbsp;*args,&nbsp;**kw)&lt;br&gt; &nbsp; &nbsp; File&nbsp;&amp;quot;/usr/lib/python2.6/dist-packages/twisted/python/context.py&amp;quot;,&lt;br&gt;<br>
line&nbsp;37,&nbsp;in&nbsp;callWithContext&lt;br&gt; &nbsp; &nbsp; &nbsp; return&nbsp;func(*args,**kw)&lt;br&gt; &nbsp; &nbsp; File&nbsp;&amp;quot;/usr/lib/python2.6/dist-packages/twisted/internet/selectreactor.py&amp;quot;,&lt;br&gt;line&nbsp;156,&nbsp;in&nbsp;_doReadOrWrite&lt;br&gt; &nbsp; &nbsp; &nbsp; self._disconnectSelectable(selectable,&nbsp;why,&nbsp;method==&amp;quot;doRead&amp;quot;)&lt;br&gt;<br>
 &nbsp; &nbsp; File&nbsp;&amp;quot;/usr/lib/python2.6/dist-packages/twisted/internet/posixbase.py&amp;quot;,&lt;br&gt;line&nbsp;194,&nbsp;in&nbsp;_disconnectSelectable&lt;br&gt; &nbsp; &nbsp; &nbsp; selectable.connectionLost(f)&lt;br&gt; &nbsp; &nbsp; File&nbsp;&amp;quot;/usr/lib/python2.6/dist-packages/twisted/internet/tcp.py&amp;quot;,&lt;br&gt;<br>
line&nbsp;519,&nbsp;in&nbsp;connectionLost&lt;br&gt; &nbsp; &nbsp; &nbsp; protocol.connectionLost(reason)&lt;br&gt; &nbsp; &nbsp; File&nbsp;&amp;quot;/usr/sbin/fireshark.py&amp;quot;,&nbsp;line&nbsp;101,&nbsp;in&nbsp;connectionLost&lt;br&gt; &nbsp; &nbsp; &nbsp; self.cleanExit()&lt;br&gt; &nbsp; &nbsp; File&nbsp;&amp;quot;/usr/sbin/fireshark.py&amp;quot;,&nbsp;line&nbsp;43,&nbsp;in&nbsp;cleanExit&lt;br&gt;<br>
 &nbsp; &nbsp; &nbsp; self.checkIfFirefoxWasKilledLoop.stop()&lt;br&gt; &nbsp; &nbsp; File&nbsp;&amp;quot;/usr/lib/python2.6/dist-packages/twisted/internet/task.py&amp;quot;,&lt;br&gt;line&nbsp;171,&nbsp;in&nbsp;stop&lt;br&gt; &nbsp; &nbsp; &nbsp; assert&nbsp;self.running,&nbsp;(&amp;quot;Tried&nbsp;to&nbsp;stop&nbsp;a&nbsp;LoopingCall&nbsp;that&nbsp;was&nbsp;&amp;quot;&lt;br&gt;<br>
 &nbsp; exceptions.AssertionError:&nbsp;Tried&nbsp;to&nbsp;stop&nbsp;a&nbsp;LoopingCall&nbsp;that&nbsp;was&nbsp;not&nbsp;running.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/span&gt;<br>

</tt>
