<tt>
&lt;div&nbsp;dir=&quot;ltr&quot;&gt;&lt;div&nbsp;dir=&quot;ltr&quot;&gt;&lt;div&gt;&lt;br&gt;&lt;div&nbsp;class=&quot;gmail_quote&quot;&gt;&lt;div&nbsp;dir=&quot;ltr&quot;&nbsp;class=&quot;gmail_attr&quot;&gt;On&nbsp;Sat,&nbsp;Jun&nbsp;27,&nbsp;2020&nbsp;at&nbsp;8:48&nbsp;AM&nbsp;Ian&nbsp;Haywood&nbsp;&lt;&lt;a&nbsp;href=&quot;mailto:ian@haywood.id.au&quot;&gt;ian@haywood.id.au&lt;/a&gt;&gt;&nbsp;wrote:&lt;br&gt;&lt;/div&gt;&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:0px&nbsp;0px&nbsp;0px&nbsp;0.8ex;border-left:1px&nbsp;solid&nbsp;rgb(204,204,204);padding-left:1ex&quot;&gt;In&nbsp;smb&nbsp;I&nbsp;have&nbsp;a&nbsp;SMBPacketReceiver&nbsp;that&nbsp;inherits&nbsp;from&nbsp;t.i.p.Protocol,&nbsp;it&nbsp;&lt;br&gt;<br>
breaks&nbsp;the&nbsp;incoming&nbsp;TCP&nbsp;stream&nbsp;into&nbsp;logical&nbsp;packets&nbsp;(the&nbsp;analogue&nbsp;of&nbsp;&lt;br&gt;<br>
LineReceiver&nbsp;in&nbsp;line-based&nbsp;protocols).&lt;br&gt;<br>
&lt;br&gt;<br>
I&nbsp;then&nbsp;subclass&nbsp;SMBPacketReceiver&nbsp;to&nbsp;SMBProtocol&nbsp;which&nbsp;does&nbsp;a&nbsp;lot&nbsp;of&nbsp;the&nbsp;&lt;br&gt;<br>
&quot;heavy&nbsp;lifting&quot;&nbsp;analyzing&nbsp;incoming&nbsp;packets.&lt;br&gt;<br>
&lt;br&gt;<br>
I&#39;ve&nbsp;been&nbsp;told&nbsp;in&nbsp;code&nbsp;review&nbsp;to&nbsp;use&nbsp;composition&nbsp;instead&nbsp;of&nbsp;inheritance,&nbsp;&lt;br&gt;<br>
which&nbsp;is&nbsp;fine&nbsp;in&nbsp;a&nbsp;general&nbsp;sense&nbsp;but&nbsp;I&nbsp;have&nbsp;difficulty&nbsp;applying&nbsp;to&nbsp;&lt;br&gt;<br>
twisted-specific&nbsp;tasks.&lt;br&gt;<br>
&lt;br&gt;<br>
1.&nbsp;how&nbsp;to&nbsp;do&nbsp;Factory.buildProtocol?&nbsp;It&nbsp;has&nbsp;to&nbsp;return&nbsp;a&nbsp;t.i.p.Protocol,&nbsp;&lt;br&gt;<br>
but&nbsp;with&nbsp;composition&nbsp;the&nbsp;Protocol&nbsp;object&nbsp;is&nbsp;a&nbsp;private&nbsp;variable&nbsp;of&nbsp;&lt;br&gt;<br>
SMBPacketReceiver,&nbsp;in&nbsp;turn&nbsp;a&nbsp;private&nbsp;variable&nbsp;of&nbsp;SMBProtocol.&lt;br&gt;<br>
&lt;br&gt;<br>
2.&nbsp;what&nbsp;to&nbsp;do&nbsp;instead&nbsp;of&nbsp;overriding&nbsp;Protocol.dataReceived&nbsp;and&nbsp;access&nbsp;&lt;br&gt;<br>
incoming&nbsp;data&nbsp;if&nbsp;not&nbsp;allowed&nbsp;to&nbsp;subclass&nbsp;it?&lt;br&gt;<br>
&lt;br&gt;<br>
Now &nbsp;its&nbsp;not&nbsp;that&nbsp;I&nbsp;cant&nbsp;think&nbsp;of&nbsp;workarounds&nbsp;to&nbsp;these&nbsp;two&nbsp;problems,&nbsp;but&nbsp;&lt;br&gt;<br>
they&#39;re&nbsp;ugly&lt;br&gt;<br>
&lt;br&gt;<br>
Is&nbsp;there&nbsp;some&nbsp;recent&nbsp;twisted&nbsp;code&nbsp;using&nbsp;composition&nbsp;that&nbsp;I&nbsp;can&nbsp;look&nbsp;at?&lt;/blockquote&gt;&lt;div&gt; &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;Hi&nbsp;Ian,&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Unfortunately&nbsp;we&#39;re&nbsp;stuck&nbsp;with&nbsp;inheritance&nbsp;in&nbsp;Twisted.&nbsp;Its&nbsp;developers&nbsp;made&nbsp;the&nbsp;decision&nbsp;(nearly&nbsp;two&nbsp;decades&nbsp;ago?)&nbsp;to&nbsp;use&nbsp;inheritance&nbsp;(hindsight&nbsp;is&nbsp;20/20&nbsp;and&nbsp;all&nbsp;that)&nbsp;and&nbsp;that&#39;s&nbsp;permeated&nbsp;through&nbsp;the&nbsp;majority&nbsp;of&nbsp;the&nbsp;codebase.&nbsp;It&#39;s&nbsp;quite&nbsp;difficult&nbsp;to&nbsp;even&nbsp;*imagine*&nbsp;a&nbsp;Twisted&nbsp;without&nbsp;it,&nbsp;let&nbsp;alone&nbsp;make&nbsp;the&nbsp;necessary&nbsp;(huge&nbsp;and&nbsp;almost&nbsp;certainly&nbsp;breaking)&nbsp;changes&nbsp;to&nbsp;shift&nbsp;to&nbsp;a&nbsp;composition-oriented&nbsp;design.&nbsp;The&nbsp;good&nbsp;news&nbsp;is&nbsp;that&nbsp;while&nbsp;you&#39;re&nbsp;stuck&nbsp;with&nbsp;inheritance&nbsp;for&nbsp;interacting&nbsp;with&nbsp;the&nbsp;Twisted&nbsp;parts,&nbsp;you&#39;re&nbsp;free&nbsp;to&nbsp;do&nbsp;whatever&nbsp;you&nbsp;want&nbsp;outside&nbsp;of&nbsp;that.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I&nbsp;suggest&nbsp;jumping&nbsp;out&nbsp;of&nbsp;the&nbsp;inheritance&nbsp;world&nbsp;as&nbsp;soon&nbsp;as&nbsp;possible;&nbsp;instead&nbsp;of&nbsp;having&nbsp;a&nbsp;SMBProtocol&nbsp;inherit&nbsp;from&nbsp;SMBPacketReceiver,&nbsp;make&nbsp;the&nbsp;initial&nbsp;Protocol&nbsp;subclass&nbsp;as&nbsp;general&nbsp;as&nbsp;possible&nbsp;--&nbsp;maybe&nbsp;make&nbsp;it&nbsp;just&nbsp;deal&nbsp;with&nbsp;framing.&nbsp;Then&nbsp;you&nbsp;wired&nbsp;the&nbsp;protocol&nbsp;up&nbsp;with&nbsp;some&nbsp;object(s)&nbsp;that&nbsp;the&nbsp;protocol&nbsp;interacts&nbsp;with&nbsp;(and&nbsp;interacts&nbsp;with&nbsp;the&nbsp;protocol),&nbsp;and&nbsp;you&nbsp;have&nbsp;your&nbsp;inheritance&nbsp;escape&nbsp;hatch.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I&#39;ve&nbsp;been&nbsp;playing&nbsp;with&nbsp;this&nbsp;idea&nbsp;on&nbsp;infobob&#39;s&nbsp;functional&nbsp;tests,&nbsp;and&nbsp;will&nbsp;probably&nbsp;use&nbsp;it&nbsp;in&nbsp;the&nbsp;long-due&nbsp;refactor&nbsp;of&nbsp;infobob&#39;s&nbsp;code&nbsp;itself:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;-&nbsp;&lt;span&nbsp;class=&quot;gmail-pl-v&quot;&gt;ComposedIRCController&nbsp;&lt;/span&gt;&lt;a&nbsp;href=&quot;https://github.com/pound-python/infobob/blob/7d6cc51bd6aeba735c6fb081cf042d1157fbc6ca/functional-tests/clients.py#L48&quot;&gt;https://github.com/pound-python/infobob/blob/7d6cc51bd6aeba735c6fb081cf042d1157fbc6ca/functional-tests/clients.py#L48&lt;/a&gt;&lt;/div&gt;&lt;div&gt;-&nbsp;_ComposedIRCClient&nbsp;subclass&nbsp;&lt;a&nbsp;href=&quot;https://github.com/pound-python/infobob/blob/7d6cc51bd6aeba735c6fb081cf042d1157fbc6ca/functional-tests/clients.py#L425&quot;&gt;https://github.com/pound-python/infobob/blob/7d6cc51bd6aeba735c6fb081cf042d1157fbc6ca/functional-tests/clients.py#L425&lt;/a&gt; &lt;/div&gt;&lt;div&gt;-&nbsp;_IRCClientState&nbsp;&lt;a&nbsp;href=&quot;https://github.com/pound-python/infobob/blob/7d6cc51bd6aeba735c6fb081cf042d1157fbc6ca/functional-tests/clients.py#L376&quot;&gt;https://github.com/pound-python/infobob/blob/7d6cc51bd6aeba735c6fb081cf042d1157fbc6ca/functional-tests/clients.py#L376&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The&nbsp;protocol&nbsp;_ComposedIRCClient&nbsp;(an&nbsp;IRCClient&nbsp;subclass)&nbsp;deals&nbsp;with&nbsp;the&nbsp;irritating&nbsp;bits&nbsp;of&nbsp;IRC&nbsp;and&nbsp;tells&nbsp;its&nbsp;attached&nbsp;_IRCClientState&nbsp;instance&nbsp;about&nbsp;incoming&nbsp;protocol&nbsp;events&nbsp;(messages,&nbsp;joins,&nbsp;parts,&nbsp;etc).&nbsp;The&nbsp;protocol&nbsp;is&nbsp;itself&nbsp;wrapped&nbsp;by&nbsp;&lt;span&nbsp;class=&quot;gmail-pl-v&quot;&gt;ComposedIRCController&nbsp;which&nbsp;is&nbsp;the&nbsp;main&nbsp;interface&nbsp;for&nbsp;other&nbsp;code&nbsp;to&nbsp;initiate&nbsp;actions&nbsp;which&nbsp;ultimately&nbsp;end&nbsp;up&nbsp;in&nbsp;a&nbsp;method&nbsp;call&nbsp;on&nbsp;the&nbsp;protocol.&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I&nbsp;hope&nbsp;that&nbsp;helps&nbsp;trigger&nbsp;some&nbsp;ideas&nbsp;in&nbsp;your&nbsp;head&nbsp;:)&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Colin&lt;br&gt;&lt;/div&gt;&lt;/div&gt;<br>

</tt>
