<tt>
&lt;html&gt;&lt;head&gt;&lt;meta&nbsp;http-equiv=&quot;Content-Type&quot;&nbsp;content=&quot;text/html&nbsp;charset=iso-8859-1&quot;&gt;&lt;/head&gt;&lt;body&nbsp;style=&quot;word-wrap:&nbsp;break-word;&nbsp;-webkit-nbsp-mode:&nbsp;space;&nbsp;-webkit-line-break:&nbsp;after-white-space;&nbsp;&quot;&gt;Thanks&nbsp;for&nbsp;the&nbsp;answer!&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I&nbsp;was&nbsp;hoping&nbsp;to&nbsp;avoid&nbsp;having&nbsp;to&nbsp;put&nbsp;something&nbsp;like&nbsp;AMP&nbsp;in&nbsp;place,&nbsp;because&nbsp;it&nbsp;looked&nbsp;a&nbsp;bit&nbsp;overkill&nbsp;for&nbsp;my&nbsp;case.&lt;/div&gt;&lt;div&gt;I&nbsp;think&nbsp;I&nbsp;actually&nbsp;found&nbsp;a&nbsp;way&nbsp;:-)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I&nbsp;guess&nbsp;I&nbsp;can&nbsp;use&nbsp;the&nbsp;same&nbsp;factory&nbsp;to&nbsp;start&nbsp;all&nbsp;my&nbsp;servers.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;div&gt;So&nbsp;I&nbsp;start&nbsp;my&nbsp;sniffer&nbsp;(in&nbsp;a&nbsp;thread)&nbsp;in&nbsp;my&nbsp;ServerFactory&nbsp;and&nbsp;I&nbsp;keep&nbsp;a&nbsp;dictionary&nbsp;of&nbsp;deferred&nbsp;for&nbsp;each&nbsp;line&nbsp;(corresponds&nbsp;to&nbsp;an&nbsp;emitter&nbsp;and&nbsp;a&nbsp;server&nbsp;port).&lt;/div&gt;&lt;div&gt;It&nbsp;allows&nbsp;me&nbsp;to&nbsp;call&nbsp;the&nbsp;messageToSend&nbsp;method&nbsp;corresponding&nbsp;to&nbsp;the&nbsp;proper&nbsp;server&nbsp;when&nbsp;receiving&nbsp;data.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Here&nbsp;is&nbsp;a&nbsp;code&nbsp;extract&nbsp;of&nbsp;what&nbsp;I&nbsp;implemented:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;class&nbsp;Oldimon(Protocol):&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;def&nbsp;__init__(self,&nbsp;factory):&lt;/div&gt;&lt;div&gt;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;self.factory&nbsp;=&nbsp;factory&lt;/div&gt;&lt;div&gt;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;self.line&nbsp;=&nbsp;None&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;def&nbsp;connectionMade(self):&lt;/div&gt;&lt;div&gt;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;#&nbsp;Check&nbsp;the&nbsp;server&nbsp;port&nbsp;to&nbsp;get&nbsp;the&nbsp;line&lt;/div&gt;&lt;div&gt;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;#&nbsp;associated&nbsp;to&nbsp;this&nbsp;protocol&lt;/div&gt;&lt;div&gt;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;port&nbsp;=&nbsp;self.transport.getHost().port&lt;/div&gt;&lt;div&gt;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;self.line&nbsp;=&nbsp;LINES_PORT[port]&lt;/div&gt;&lt;div&gt;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;#&nbsp;Add&nbsp;the&nbsp;callback&nbsp;for&nbsp;this&nbsp;line&lt;/div&gt;&lt;div&gt;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;self.factory.deferred[self.line]&nbsp;=&nbsp;defer.Deferred()&lt;/div&gt;&lt;div&gt;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;self.factory.deferred[self.line].addCallback(self.messageToSend)&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;class&nbsp;OldimonFactory(ServerFactory):&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;def&nbsp;__init__(self,&nbsp;device,&nbsp;pcap_filter):&lt;/div&gt;&lt;div&gt;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;#&nbsp;pcapDataReceived&nbsp;callback&nbsp;is&nbsp;called&nbsp;everytime&nbsp;a&nbsp;message&lt;/div&gt;&lt;div&gt;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;#&nbsp;is&nbsp;received&lt;/div&gt;&lt;div&gt;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;reactor.callInThread(run_pcap,&nbsp;device,&nbsp;pcap_filter,&nbsp;self.pcapDataReceived)&lt;/div&gt;&lt;div&gt;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;#&nbsp;Dict&nbsp;with&nbsp;a&nbsp;deferred&nbsp;for&nbsp;each&nbsp;line&lt;/div&gt;&lt;div&gt;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;self.deferred&nbsp;=&nbsp;dict(zip(LINES_PORT.values(),&nbsp;[None]&nbsp;*&nbsp;len(LINES_PORT)))&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;def&nbsp;buildProtocol(self,&nbsp;addr):&lt;/div&gt;&lt;div&gt;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;return&nbsp;Oldimon(self)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;def&nbsp;pcapDataReceived(self,&nbsp;data,&nbsp;line):&lt;/div&gt;&lt;div&gt;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;if&nbsp;self.deferred[line]&nbsp;is&nbsp;not&nbsp;None:&lt;/div&gt;&lt;div&gt;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;#&nbsp;Fire&nbsp;the&nbsp;callback&nbsp;for&nbsp;line&lt;/div&gt;&lt;div&gt;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;d,&nbsp;self.deferred[line]&nbsp;=&nbsp;self.deferred[line],&nbsp;None&lt;/div&gt;&lt;div&gt;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;d.callback(data)&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;oldimon_factory&amp;nbsp;=&amp;nbsp;OldimonFactory(device,&nbsp;pcap_filter)&lt;/div&gt;&lt;div&gt;for&nbsp;port&nbsp;in&nbsp;LINES_PORT.keys():&lt;/div&gt;&lt;div&gt;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;reactor.listenTCP(port,&amp;nbsp;oldimon_factory)&lt;/div&gt;&lt;div&gt;reactor.run()&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;div&gt;&lt;div&gt;Le&nbsp;1&nbsp;mars&nbsp;2013&nbsp;à&nbsp;15:31,&nbsp;Laurens&nbsp;Van&nbsp;Houtven&nbsp;&amp;lt;_@lvh.cc&amp;gt;&nbsp;a&nbsp;écrit&nbsp;:&lt;/div&gt;&lt;br&nbsp;class=&quot;Apple-interchange-newline&quot;&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;&lt;div&nbsp;dir=&quot;ltr&quot;&gt;&lt;div&gt;&lt;div&gt;Well,&nbsp;you'd&nbsp;presumably&nbsp;have&nbsp;a&nbsp;connection&nbsp;to&nbsp;each&nbsp;of&nbsp;the&nbsp;servers&nbsp;in&nbsp;the&nbsp;form&nbsp;of&nbsp;a&nbsp;client&nbsp;factory&nbsp;and&nbsp;a&nbsp;protocol&nbsp;instance.&nbsp;Then,&nbsp;every&nbsp;time&nbsp;you&nbsp;get&nbsp;a&nbsp;message,&nbsp;you&nbsp;figure&nbsp;out&nbsp;which&nbsp;protocol&nbsp;instance&nbsp;you&nbsp;want&nbsp;(the&nbsp;one&nbsp;for&nbsp;the&nbsp;appropriate&nbsp;server)&nbsp;and&nbsp;send&nbsp;a&nbsp;message&nbsp;to&nbsp;it.&nbsp;You&nbsp;could&nbsp;do&nbsp;that&nbsp;with&nbsp;self.transport.write,&nbsp;of&nbsp;course,&nbsp;but&nbsp;it&nbsp;would&nbsp;be&nbsp;much&nbsp;easier&nbsp;to&nbsp;just&nbsp;use&nbsp;a&nbsp;ready-made&nbsp;RPC&nbsp;thing.&lt;br&gt;<br>
<br>
&lt;br&gt;One&nbsp;such&nbsp;RPC&nbsp;thing&nbsp;is&nbsp;AMP,&nbsp;which&nbsp;comes&nbsp;with&nbsp;Twisted.&nbsp;You&nbsp;can&nbsp;read&nbsp;more&nbsp;about&nbsp;it&nbsp;here:&lt;br&gt;&lt;br&gt;&lt;a&nbsp;href=&quot;http://amp-protocol.net/&quot;&gt;http://amp-protocol.net/&lt;/a&gt;&lt;br&gt;&lt;a&nbsp;href=&quot;https://twistedmatrix.com/documents/current/core/howto/amp.html&quot;&gt;https://twistedmatrix.com/documents/current/core/howto/amp.html&lt;/a&gt;&lt;br&gt;<br>
<br>
&lt;br&gt;&lt;/div&gt;You&nbsp;will&nbsp;probably&nbsp;end&nbsp;up&nbsp;having&nbsp;a&nbsp;command&nbsp;like&nbsp;HandlePacket&nbsp;or&nbsp;something&nbsp;(presumably&nbsp;you&nbsp;can&nbsp;come&nbsp;up&nbsp;with&nbsp;a&nbsp;more&nbsp;apt&nbsp;domain-specific&nbsp;name),&nbsp;and&nbsp;something&nbsp;close&nbsp;to&nbsp;self.servers[serverFor(packet.origin)].callRemote(HandlePacket,&nbsp;packet.data),&nbsp;or&nbsp;whatever.&lt;br&gt;<br>
<br>
&lt;br&gt;&lt;/div&gt;I&nbsp;realize&nbsp;this&nbsp;is&nbsp;still&nbsp;pretty&nbsp;vague&nbsp;and&nbsp;high&nbsp;level,&nbsp;so&nbsp;feel&nbsp;free&nbsp;to&nbsp;ask&nbsp;more&nbsp;questions&nbsp;about&nbsp;the&nbsp;parts&nbsp;that&nbsp;are&nbsp;unclear&nbsp;:)&lt;br&gt;&lt;/div&gt;&lt;div&nbsp;class=&quot;gmail_extra&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;div&nbsp;class=&quot;gmail_quote&quot;&gt;On&nbsp;Thu,&nbsp;Feb&nbsp;28,&nbsp;2013&nbsp;at&nbsp;10:59&nbsp;PM,&nbsp;Benjamin&nbsp;BERTRAND&nbsp;&lt;span&nbsp;dir=&quot;ltr&quot;&gt;&amp;lt;&lt;a&nbsp;href=&quot;mailto:beenje@gmail.com&quot;&nbsp;target=&quot;_blank&quot;&gt;beenje@gmail.com&lt;/a&gt;&amp;gt;&lt;/span&gt;&nbsp;wrote:&lt;br&gt;<br>
<br>
&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:0&nbsp;0&nbsp;0&nbsp;.8ex;border-left:1px&nbsp;#ccc&nbsp;solid;padding-left:1ex&quot;&gt;Hi,&lt;br&gt;<br>
&lt;br&gt;<br>
I&nbsp;have&nbsp;to&nbsp;replace&nbsp;a&nbsp;piece&nbsp;of&nbsp;software&nbsp;that&nbsp;sniffs&nbsp;the&nbsp;traffic&nbsp;on&nbsp;one&nbsp;interface.&nbsp;It&nbsp;gets&nbsp;different&nbsp;messages&nbsp;that&nbsp;are&nbsp;each&nbsp;associated&nbsp;to&nbsp;a&nbsp;specific&nbsp;emitter.&lt;br&gt;<br>
On&nbsp;the&nbsp;same&nbsp;machine,&nbsp;one&nbsp;server&nbsp;is&nbsp;started&nbsp;for&nbsp;each&nbsp;emitter&nbsp;(on&nbsp;a&nbsp;different&nbsp;port).&lt;br&gt;<br>
And&nbsp;the&nbsp;application&nbsp;is&nbsp;just&nbsp;supposed&nbsp;to&nbsp;use&nbsp;the&nbsp;proper&nbsp;server&nbsp;to&nbsp;send&nbsp;the&nbsp;messages&nbsp;captured&nbsp;(to&nbsp;a&nbsp;client&nbsp;on&nbsp;another&nbsp;machine).&lt;br&gt;<br>
&lt;br&gt;<br>
Not&nbsp;sure&nbsp;if&nbsp;it's&nbsp;clear,&nbsp;but&nbsp;basically&nbsp;if&nbsp;I&nbsp;have&nbsp;2&nbsp;emitters&nbsp;A&nbsp;and&nbsp;B,&nbsp;I'll&nbsp;start&nbsp;2&nbsp;servers&nbsp;(a&nbsp;and&nbsp;b).&lt;br&gt;<br>
My&nbsp;sniffer&nbsp;will&nbsp;get&nbsp;messages&nbsp;A1,&nbsp;A2,&nbsp;B1,&nbsp;B2,&nbsp;B3...&lt;br&gt;<br>
I&nbsp;have&nbsp;to&nbsp;pass&nbsp;messages&nbsp;A1,&nbsp;A2&nbsp;to&nbsp;server&nbsp;a,&nbsp;that&nbsp;will&nbsp;just&nbsp;send&nbsp;them&nbsp;to&nbsp;the&nbsp;client&nbsp;(if&nbsp;it&nbsp;is&nbsp;connected&nbsp;of&nbsp;course).&lt;br&gt;<br>
And&nbsp;B1,&nbsp;B2,&nbsp;B3&nbsp;to&nbsp;server&nbsp;b.&lt;br&gt;<br>
I&nbsp;don't&nbsp;need&nbsp;any&nbsp;buffering.&nbsp;If&nbsp;no&nbsp;client&nbsp;is&nbsp;connected,&nbsp;messages&nbsp;captured&nbsp;are&nbsp;just&nbsp;discarded.&lt;br&gt;<br>
&lt;br&gt;<br>
To&nbsp;sniff&nbsp;the&nbsp;network,&nbsp;I&nbsp;want&nbsp;to&nbsp;use&nbsp;pylibpcap&nbsp;or&nbsp;pcapy.&lt;br&gt;<br>
I&nbsp;found&nbsp;this&nbsp;example&nbsp;to&nbsp;make&nbsp;it&nbsp;work&nbsp;with&nbsp;twisted:&nbsp;&lt;a&nbsp;href=&quot;http://dound.com/2009/09/integrating-twisted-with-a-pcap-based-python-packet-sniffer/&quot;&nbsp;target=&quot;_blank&quot;&gt;http://dound.com/2009/09/integrating-twisted-with-a-pcap-based-python-packet-sniffer/&lt;/a&gt;&lt;br&gt;<br>
<br>
<br>
&lt;br&gt;<br>
Starting&nbsp;several&nbsp;servers&nbsp;that&nbsp;use&nbsp;the&nbsp;same&nbsp;protocol&nbsp;is&nbsp;not&nbsp;a&nbsp;problem.&lt;br&gt;<br>
But&nbsp;how&nbsp;do&nbsp;I&nbsp;pass&nbsp;the&nbsp;messages&nbsp;captured&nbsp;to&nbsp;the&nbsp;right&nbsp;server?&lt;br&gt;<br>
How&nbsp;do&nbsp;I&nbsp;make&nbsp;the&nbsp;link&nbsp;between&nbsp;the&nbsp;function&nbsp;sniffing&nbsp;the&nbsp;network&nbsp;and&nbsp;the&nbsp;servers?&lt;br&gt;<br>
&lt;br&gt;<br>
Thanks&lt;br&gt;<br>
&lt;br&gt;<br>
Benjamin&lt;br&gt;<br>
_______________________________________________&lt;br&gt;<br>
Twisted-Python&nbsp;mailing&nbsp;list&lt;br&gt;<br>
&lt;a&nbsp;href=&quot;mailto:Twisted-Python@twistedmatrix.com&quot;&gt;Twisted-Python@twistedmatrix.com&lt;/a&gt;&lt;br&gt;<br>
&lt;a&nbsp;href=&quot;http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python&quot;&nbsp;target=&quot;_blank&quot;&gt;http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python&lt;/a&gt;&lt;br&gt;<br>
&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;br&nbsp;clear=&quot;all&quot;&gt;&lt;br&gt;--&nbsp;&lt;br&gt;&lt;div&nbsp;dir=&quot;ltr&quot;&gt;cheers&lt;div&gt;lvh&lt;/div&gt;&lt;/div&gt;<br>
&lt;/div&gt;<br>
_______________________________________________&lt;br&gt;Twisted-Python&nbsp;mailing&nbsp;list&lt;br&gt;&lt;a&nbsp;href=&quot;mailto:Twisted-Python@twistedmatrix.com&quot;&gt;Twisted-Python@twistedmatrix.com&lt;/a&gt;&lt;br&gt;http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python&lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;
</tt>
