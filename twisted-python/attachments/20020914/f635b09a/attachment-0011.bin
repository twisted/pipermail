from twisted.web import wmvc
from twisted.internet import defer
from twisted.internet import reactor

class MIdentityList(wmvc.WModel):
    def __init__(self):
        wmvc.WModel.__init__(self)
        # Pretend that this deferred will fire in response to the data
        # returning the database. Basically, I have made it so that if
        # a widget operates on a model which is a Deferred, the widget
        # will defer it's execution until the deferred fires.
        self.identityList = defer.Deferred()
        reactor.callLater(1, self.identityList.callback, 
                        ['asdf', 'foo', 'fredf', 'bob'])


class VIdentityList(wmvc.WView):
    template = """<html>
    <ul view="identityList" model="identityList">
        <li class="listItem">
            <span view="text" />
        </li>
    </ul>
</html>"""

    def factory_identityList(self, request, node):
        return wmvc.domwidgets.List(self.model)

    def factory_text(self, request, node):
        return wmvc.domwidgets.Text(self.model)


class CIdentityList(wmvc.WController):
    pass


wmvc.registerViewForModel(VIdentityList, MIdentityList)
wmvc.registerControllerForModel(CIdentityList, MIdentityList)
