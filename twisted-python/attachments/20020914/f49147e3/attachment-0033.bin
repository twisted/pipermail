# demo2

import os

from twisted.web import wmvc


### Model


class MDemo(wmvc.WModel):
    foo = "Hello world"
    bar = "How are you?"
    baz = "Good"
    color = 'blue'


### Widget


class FancyBox(wmvc.domwidgets.Widget):
    
    def generateDOM(self, request, node):
        self['style'] = 'margin: 1em; padding: 1em; background-color: %s' % 
            self.model.color
        
        self.add(wmvc.domwidgets.Text(self.getData()))
        
        return wmvc.domwidgets.Widget.generateDOM(self, request, node)


### View


class VDemo(wmvc.WView):
    templateFile = "demo2.html"
        
    def factory_FancyBox(self, request, node):
        return FancyBox(self.model)


### Handler


class ChangeColor(wmvc.domhandlers.Anything):
    def commit(self, request, node, data):
        session = request.getSession()
        session.color = data


### Controller


class CDemo(wmvc.WController):
    def setUp(self, request):
        """
        The setUp method gives the view a chance to make any preperations it needs to make
        before rendering the page. In this case, we are implementing crude persistence for
        the "color" attribute of our model.
        """
        session = request.getSession()
        self.model.color = getattr(session, 'color', self.model.color)

    def factory_change(self, model):
        return ChangeColor(self.model)


wmvc.registerViewForModel(VDemo, MDemo)
wmvc.registerControllerForModel(CDemo, MDemo)
