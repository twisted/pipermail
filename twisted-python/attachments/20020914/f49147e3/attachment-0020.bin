# demo3

import os
import cPickle
import urllib

from twisted.web import wmvc


### Model


class MDemo(wmvc.WModel):
    foo = "Hello world"
    bar = "How are you?"
    baz = "Good"
    color = "blue"


### Widgets


class FancyBox(wmvc.domwidgets.Widget):    
    def generateDOM(self, request, node):
        self['style'] = 'margin: 1em; padding: 1em; background-color: %s' % self.model.color
        
        myWidgetText = self.getData()
        self.add(wmvc.domwidgets.Text(myWidgetText))
        
        return wmvc.domwidgets.Widget.generateDOM(self, request, node)


### View


class VDemo(wmvc.WView):
    templateFile = "demo3.html"

    def factory_textArea(self, request, node):
        return wmvc.domwidgets.InputText(self.model)

    def factory_FancyBox(self, request, node):
        return FancyBox(self.model)
    

### Handler


class ChangeColor(wmvc.domhandlers.Anything):
    def check(self, request, data):
        print "checking data", data
        if data is None:
            return None
        if data[0] == "#" or data in ['yellow', 'red', 'green', 'blue', 'black', 'orange']:
            return 1
        return 0
    
    def handleInvalid(self, request, data):
        self.view.setError(request, "%s is not a valid color!" % data)


### Controller


class CDemo(wmvc.WController):
    def setUp(self, request):
        """
        The setUp method gives the view a chance to make any preperations it needs to make
        before rendering the page. In this case, we are implementing crude persistence for
        our model.
        """
        if os.path.exists('persist.pickle'):
            self.model = cPickle.load(open('persist.pickle'))

    def process(self, request, **kwargs):
        """
        Our model was successfully changed, so let's persist it to disk
        """
        print "process kwargs", kwargs
        cPickle.dump(self.model, open('persist.pickle', 'w'))
        return wmvc.domtemplate.RESTART_RENDERING

    def factory_change(self, model):
        return ChangeColor(self.model)
    
    def factory_textArea(self, model):
        return wmvc.domhandlers.Anything(self.model)


wmvc.registerViewForModel(VDemo, MDemo)
wmvc.registerControllerForModel(CDemo, MDemo)
