# standard python
import socket
# twisted
from twisted.internet import protocol, reactor
from twisted.names import dns
from twisted.python import log, logfile

MAC='00:11:24:35:63:fa'
IPv6='fe80::211:24ff:fe35:63fa'
MEGABYTE = 1048576
MY_IPADDRESS = socket.gethostbyname( socket.gethostname() )
MDNS_ADDRESS = '224.0.0.251'
MDNS_PORT = 5353
MDNS_BROADCAST_ADDR = (MDNS_ADDRESS,MDNS_PORT)

class mDNSListenerProtocol(protocol.DatagramProtocol):
    
    def startProtocol(self):
        log.debug('Starting mDNSResponderProtocol on',MY_IPADDRESS,'listening to',MDNS_ADDRESS,':',MDNS_PORT)
        self.transport.joinGroup(MDNS_ADDRESS)
        self.transport.setTTL(255)
        self.transport.setLoopbackMode(False)
       
    def stopProtocol(self):
        log.debug('Stopping mDNSResponderProtocol')
       
    def datagramReceived(self, data, addr):
        msg = dns.Message()
        msg.fromStr(data)
        if msg.answer:
            self.handleAnswer(msg,addr)
        else:
            self.handleQuery(msg,addr)
            
    def handleQuery(self,msg,addr):
        print '================================================================='
        print 'received query datagram from',addr[0],'port',addr[1]
        print len(msg.queries),'queries'
        for q in msg.queries:  
            print str(q)
            #ptr = dns.Record_PTR( name='dummy._workstation._tcp.local', ttl=7200L )
            #rr = dns.RRHeader( name='_workstation._tcp.local', payload=ptr, type=dns.PTR, auth=0, ttl=7200 )
            #oMsg = dns.Message(answer=1,auth=1)
            #oMsg.answers.append(rr)
            #aaaaPayload = dns.Record_AAAA( IPv6 )
            #oMsg.additional.append( dns.RRHeader( name='dummy._workstation._tcp.local', payload=aaaaPayload, type=dns.AAAA, ttl=240, auth=0 ) )
            #aPayload = dns.Record_A( MY_IPADDRESS )
            #oMsg.additional.append( dns.RRHeader( name='dummy._workstation._tcp.local', payload=aPayload, type=dns.A, ttl=240, auth=0 ) )
            #srvPayload = dns.Record_SRV( target='dummy.local', port=9 )
            #oMsg.additional.append( dns.RRHeader( name='dummy._workstation._tcp.local', payload=srvPayload, type=dns.SRV, ttl=240, auth=0 ) )
            #txtPayload = dns.Record_TXT( '', ttl=240L )
            #oMsg.additional.append( dns.RRHeader( name='dummy._workstation._tcp.local', payload=txtPayload, type=dns.TXT, ttl=240, auth=0 ) )
            #self.transport.write(msg.toStr(), (MDNS_ADDRESS,MDNS_PORT) )
            
    def handleAnswer(self,msg,addr):
        print '================================================================='
        print 'received answer datagram from ',addr
        print 'answer =',msg.answer
        print 'opCode =',msg.opCode
        print 'auth   =',msg.auth
        print 'trunc  =',msg.trunc
        print 'recDes =',msg.recDes
        print 'recAv  =',msg.recAv
        print 'rCode  =',msg.rCode
        print len(msg.answers),'answers'
        print '<ANSWERS>'
        for a in msg.answers:
            print '<ANSWER>'
            print a
            print '    <PAYLOAD>'
            print '   ',a.payload    
            print '    </PAYLOAD>'
            print '</ANSWER>'
        print '</ANSWERS>'  
        print len(msg.authority),'authoritys'
        for auth in msg.authority:
            print auth
        print len(msg.additional),'additionals'
        print '<ADDITIONALS>'
        for addition in msg.additional:
            print '<ADDITIONAL>'
            print addition
            print '    <PAYlOAD>'
            print '             ',addition.payload
            print '    </PAYLOAD>'
            print '</ADDITIONAL>'
        print '</ADDITIONALS>'
        print 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
# set up logging
# rotate every 1048576 bytes ( 1 megabyte )
f = logfile.LogFile("mdns.log", "/Users/jarrodroberson/logs/", rotateLength=MEGABYTE)

# setup logging to use our new logfile
log.startLogging(f)   
      
# start listening 
reactor.listenMulticast(MDNS_PORT, mDNSListenerProtocol(), maxPacketSize=1452, listenMultiple=True)
# start the server loop runningreactor.run()