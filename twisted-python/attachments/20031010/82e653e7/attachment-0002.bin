#!/usr/local/bin/python
"""
Console input/output management.
"""
import anycons
import WConio

def setColorForStatus(status):
    color = {" ": WConio.WHITE,
             "I": WConio.YELLOW,
             "S": WConio.LIGHTGREEN,
             "F": WConio.LIGHTRED}
    WConio.textcolor(color[status])

def setNormalColor():
    WConio.textcolor(WConio.WHITE)

class ResultsTable(object):
    """I display results for tasks in a grid.
    """
    def __init__(self, tasks, steps, x=5, y=5):
        # dict of dicts mapping [task][step] to status
        self.stateTable = {}
        self.statusTable = {}
        self.tasks = tasks
        self.steps = steps
        self.failures = []
        self.start_x = x
        self.start_y = y
        # Need widths for computing grid dimensions
        self.num_steps = len(steps)
        self.num_tasks = len(tasks)
        self.max_task_width = max([len(t) for t in tasks])
        self.max_status_width = 10
        self.total_width = self.max_task_width + self.num_steps*4 \
                           + 3 + self.max_status_width
        self.__initTables()

    def __initTables(self):
        self.stateTable = {}
        self.statusTable = {}
        for task in self.tasks:
            self.stateTable[task] = {}
            self.statusTable[task] = ""
            for step in self.steps:
                self.stateTable[task][step] = " "

    def display(self, final=False):
        (x, y) = (self.start_x, self.start_y)
        # reset the screen
        anycons.Init()
        anycons.Goto(x,y)
        # print first line of grid
        anycons.Write(" " * self.max_task_width + " ")
        for i in xrange(self.num_steps):
            anycons.Write("| %s " % str(i+1))
        anycons.Write("|")
        anycons.Write(" status ")
        # next line of "-" chars
        y += 1
        anycons.Goto(x,y)
        anycons.Write("-" * self.total_width)
        # loop through each task displaying current
        # status for each step
        for task in self.tasks:
            y += 1
            anycons.Goto(x,y)
            anycons.Write(task.ljust(self.max_task_width) + " ")
            for step in self.steps:
                anycons.Write("| ")
                setColorForStatus(self.stateTable[task][step])
                anycons.Write(self.stateTable[task][step])
                anycons.Write(" ")
                setNormalColor()
            anycons.Write("|")
            anycons.Write(" ")
            anycons.Write(self.statusTable[task].ljust(self.max_status_width))
            y += 1
            anycons.Goto(x,y)
            anycons.Write("-" * self.total_width)
        y += 2
        anycons.Goto(x,y)

        # Display any error messages on final display
        if final:
            for f in self.failures:
                (task, step, failure) = f
                anycons.Write("Task: %s, Step: %s, Failure: %s\n\n" % (task, step, failure))

    def reset(self):
        self.__initTables()

    def clear(self):
        anycons.Clear()

    def close(self):
        anycons.Close()

    def __del__(self):
        import sys
        # If not running on Windows, close the terminal so
        # it is restored to normal.  On Windows this causes
        # all output to be lost.
        if not sys.platform.startswith("win"):
            self.close()

    def setStepStatus(self, task, step, status):
        self.stateTable[task][step] = status

    def setTaskStatus(self, task, status):
        self.statusTable[task] = status

    def __str__(self):
        return str(self.stateTable)

if __name__ == '__main__':
    import time
    sleep_time = 0.1
    #tasks = ["vob1","vob2","vob3","vob4","vob5","vob6","vob7","vob8","vob9","vob10"] 
    #steps = ["step1","step2","step3","step4"] 
    tasks = ["task%s" % str(t+1) for t in xrange(5)]
    steps = ["step%s" % str(s+1) for s in xrange(5)]
    states = ["I","S","F"]
    statesDict = {}
    statesDict["I"] = "in progress"
    statesDict["S"] = "success"
    statesDict["F"] = "failure"

    rt = ResultsTable(tasks, steps)
    rt.display()
    time.sleep(sleep_time)
    for task in tasks:
        for step in steps:
            for state in states:
                rt.setStepStatus(task,step, state)
                rt.setTaskStatus(task, step + " " + statesDict[state])
                time.sleep(sleep_time)
                rt.display()
        rt.setTaskStatus(task, "success")
        rt.display()
