from twisted.web.microdom import lmx
from twisted.web.woven import widgets
import os, time, calendar

# Widget definitions
calendar.setfirstweekday(calendar.SUNDAY)
class Calendar(widgets.Widget):
    def setUp(self, request, node, data):
        node.tagName = "table"
        curTime = time.localtime()
        curMonth = calendar.monthcalendar(curTime[0], curTime[1])
        today = curTime[2]
        month = lmx(node)
        headers = month.tr()
        for dayName in ["Su", "M", "T", "W", "Th", "F" , "S"]:
            headers.td(
                _class="dayName", align="middle"
            ).text(dayName)
        for curWeek in curMonth:
            week = month.tr(_class="week")
            for curDay in curWeek:
                if curDay == 0:
                    week.td(_class="blankDay")
                else:
                    if curDay == today:
                        className = "today"
                    else:
                        className = "day"
                    week.td(
                        _class=className, align="right"
                    ).text(str(curDay))

def getColorForStatus(status):
    color = {"&nbsp;": "white",
             " ": "white",
             "I": "yellow",
             "S": "green",
             "F": "red"}
    return color[status]

def setNormalColor():
    return "white"

class ResultsTable(object):
    def __init__(self, tasks, steps, x=5, y=5):
        # dict of dicts mapping [task][step] to status
        self.stateTable = {}
        self.statusTable = {}
        self.tasks = tasks
        self.steps = steps
        self.failures = []
        self.start_x = x
        self.start_y = y
        # Need widths for computing grid dimensions
        self.num_steps = len(steps)
        self.num_tasks = len(tasks)
        self.cell_width = 20
        self.__initTables()

    def __initTables(self):
        self.stateTable = {}
        self.statusTable = {}
        for task in self.tasks:
            self.stateTable[task] = {}
            self.statusTable[task] = "&nbsp;"
            for step in self.steps:
                self.stateTable[task][step] = "&nbsp;"

    def display(self, final=False):
        # print first line of grid
        rtn = """
<table border="1">
   <tr>
      <td>
         &nbsp;
      </td>
"""
        for i in xrange(self.num_steps):
            rtn += """
      <td width="%s">
         %s
      </td>
""" % (self.cell_width, str(i+1))

        rtn += """
      <td width="%s">
         status
      </td>
   </tr>
""" % self.cell_width
        # loop through each task displaying current
        # status for each step
        for task in self.tasks:
            rtn += """
   <tr>
      <td width="%s">
         %s
      </td>
""" % (self.cell_width, task)
            for step in self.steps:
                rtn += """
      <td bgcolor="%s" width="%s">
         %s
      </td>
""" % (getColorForStatus(self.stateTable[task][step]), self.cell_width, self.stateTable[task][step])
            rtn += """
      <td width="%s">
         %s
      </td>
""" % (self.cell_width, self.statusTable[task])
            rtn += """
   </tr>
"""

        rtn += """
</table>
"""
        return rtn

        # Display any error messages on final display
        #if final:
        #    for f in self.failures:
        #        (task, step, failure) = f
        #        anycons.Write("Task: %s, Step: %s, Failure: %s\n\n" % (task, step, failure))

    def reset(self):
        self.__initTables()

    def setStepStatus(self, task, step, status):
        self.stateTable[task][step] = status

    def setTaskStatus(self, task, status):
        self.statusTable[task] = status

    def __str__(self):
        return self.display()



class MyPatternWidget(widgets.Widget):
    def setUp(self, request, node, data):
        newNode = self.getPattern("listMenuItem")
        node.appendChild(newNode)
