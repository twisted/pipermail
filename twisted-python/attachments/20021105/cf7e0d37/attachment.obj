--- /usr/lib/python2.2/site-packages/twisted/enterprise/sqlreflector.py	2002-11-05 13:49:34.000000000 +0100
+++ /usr/portage/distfiles/cvs-src/Twisted/twisted/enterprise/sqlreflector.py	2002-10-23 17:08:03.000000000 +0200
@@ -16,8 +16,6 @@
 
 import string
 
-from types import StringType, ListType
-
 from twisted.enterprise import adbapi
 from twisted.enterprise.util import DBError, getKeyColumn, quote, _TableInfo, _TableRelationship
 from twisted.enterprise.row import RowObject
@@ -77,7 +75,7 @@
         tableInfo.deleteSQL = self.buildDeleteSQL(tableInfo)
         self.populateSchemaFor(tableInfo)
         
-    def loadObjectsFrom(self, tableName, parentRow=None, data=None, whereClause=None, orderBy=None, forceChildren=0):
+    def loadObjectsFrom(self, tableName, parentRow=None, data=None, whereClause=None, forceChildren=0):
         """Load a set of RowObjects from a database.
 
         Create a set of python objects of <rowClass> from the contents
@@ -111,17 +109,17 @@
             pass
         else:
             whereClause = []
-        return self.runInteraction(self._rowLoader, tableName, parentRow, data, whereClause, orderBy, forceChildren)
+        return self.runInteraction(self._rowLoader, tableName, parentRow, data, whereClause, forceChildren)
 
     
-    def _rowLoader(self, transaction, tableName, parentRow, data, whereClause, orderBy, forceChildren):
+    def _rowLoader(self, transaction, tableName, parentRow, data, whereClause, forceChildren):
         """immediate loading of rowobjects from the table with the whereClause.
         """
         tableInfo = self.schema[tableName]
         # Build the SQL for the query
         sql = "SELECT "
         first = 1
-        for column, Type in tableInfo.rowColumns:
+        for column, type in tableInfo.rowColumns:
             if first:
                 first = 0
             else:
@@ -129,27 +127,17 @@
             sql = sql + " %s" % column
         sql = sql + " FROM %s """ % (tableName)
         if whereClause:
-            if type(whereClause) == ListType:
-                sql += " WHERE "
-                first = 1
-                for wItem in whereClause:
-                    if first:
-                        first = 0
-                    else:
-                        sql += " AND "
-                    (columnName, cond, value) = wItem
-                    t = self.findTypeFor(tableName, columnName)
-                    quotedValue = quote(value, t)
-                    sql += "%s %s %s" % (columnName, self.conditionalLabels[cond], quotedValue)
-            elif type(whereClause) == StringType:
-                sql += " WHERE "
-                sql += whereClause  #should checks be done here?
-
-        if orderBy:
-            if self.findTypeFor(tableName, orderBy):
-                # check if orderBy is name of a column (print error message here?)
-                sql += " ORDER BY "
-                sql += orderBy  
+            sql += " WHERE "
+            first = 1
+            for wItem in whereClause:
+                if first:
+                    first = 0
+                else:
+                    sql += " AND "
+                (columnName, cond, value) = wItem
+                t = self.findTypeFor(tableName, columnName)
+                quotedValue = quote(value, t)
+                sql += "%s %s %s" % (columnName, self.conditionalLabels[cond], quotedValue)
 
         # execute the query
         transaction.execute(sql)
@@ -162,7 +150,7 @@
             kw = {}
             for i in range(0,len(args)):
                 columnName = tableInfo.rowColumns[i][0]
-                for attr, Type in tableInfo.rowClass.rowColumns:
+                for attr, type in tableInfo.rowClass.rowColumns:
                     if string.lower(attr) == string.lower(columnName):
                         kw[attr] = args[i]
                         break
@@ -193,9 +181,9 @@
         
     def findTypeFor(self, tableName, columnName):
         tableInfo = self.schema[tableName]
-        for column, Type in tableInfo.rowColumns:
+        for column, type in tableInfo.rowColumns:
             if column.upper() == columnName.upper():
-                return Type
+                return type
 
     def buildUpdateSQL(self, tableInfo):
         """(Internal) Build SQL to update a RowObject.
@@ -205,21 +193,21 @@
         sql = "UPDATE %s SET" % tableInfo.rowTableName
         # build update attributes
         first = 1
-        for column, Type in tableInfo.rowColumns:
+        for column, type in tableInfo.rowColumns:
             if getKeyColumn(tableInfo.rowClass, column):
                 continue
             if not first:
                 sql = sql + ", "
-            sql = sql + "  %s = %s" % (column, quote("%s", Type))
+            sql = sql + "  %s = %s" % (column, quote("%s", type))
             first = 0
 
         # build where clause
         first = 1
         sql = sql + "  WHERE "
-        for keyColumn, Type in tableInfo.rowKeyColumns:
+        for keyColumn, type in tableInfo.rowKeyColumns:
             if not first:
                 sql = sql + " AND "
-            sql = sql + "   %s = %s " % (keyColumn, quote("%s", Type) )
+            sql = sql + "   %s = %s " % (keyColumn, quote("%s", type) )
             first = 0
         return sql
 
@@ -232,7 +220,7 @@
         sql = "INSERT INTO %s (" % tableInfo.rowTableName
         # build column list
         first = 1
-        for column, Type in tableInfo.rowColumns:
+        for column, type in tableInfo.rowColumns:
             if not first:
                 sql = sql + ", "
             sql = sql + column
@@ -242,10 +230,10 @@
 
         # build values list
         first = 1
-        for column, Type in tableInfo.rowColumns:
+        for column, type in tableInfo.rowColumns:
             if not first:
                 sql = sql + ", "
-            sql = sql + quote("%s", Type)
+            sql = sql + quote("%s", type)
             first = 0
 
         sql = sql + ")"
@@ -258,10 +246,10 @@
         # build where clause
         first = 1
         sql = sql + "  WHERE "
-        for keyColumn, Type in tableInfo.rowKeyColumns:
+        for keyColumn, type in tableInfo.rowKeyColumns:
             if not first:
                 sql = sql + " AND "
-            sql = sql + "   %s = %s " % (keyColumn, quote("%s", Type) )
+            sql = sql + "   %s = %s " % (keyColumn, quote("%s", type) )
             first = 0
         return sql
 
@@ -272,11 +260,11 @@
         args = []
         tableInfo = self.schema[rowObject.rowTableName]
         # build update attributes
-        for column, Type in tableInfo.rowColumns:
+        for column, type in tableInfo.rowColumns:
             if not getKeyColumn(rowObject.__class__, column):
                 args.append(rowObject.findAttribute(column))
         # build where clause
-        for keyColumn, Type in tableInfo.rowKeyColumns:
+        for keyColumn, type in tableInfo.rowKeyColumns:
             args.append( rowObject.findAttribute(keyColumn))
 
         return self.getTableInfo(rowObject).updateSQL % tuple(args)
@@ -295,7 +283,7 @@
         args = []
         tableInfo = self.schema[rowObject.rowTableName]        
         # build values
-        for column, Type in tableInfo.rowColumns:
+        for column, type in tableInfo.rowColumns:
             args.append(rowObject.findAttribute(column))
         return self.getTableInfo(rowObject).insertSQL % tuple(args)
 
@@ -313,7 +301,7 @@
         args = []
         tableInfo = self.schema[rowObject.rowTableName]        
         # build where clause
-        for keyColumn, Type in tableInfo.rowKeyColumns:
+        for keyColumn, type in tableInfo.rowKeyColumns:
             args.append(rowObject.findAttribute(keyColumn))
 
         return self.getTableInfo(rowObject).deleteSQL % tuple(args)
