from twisted.internet import win32eventreactor
win32eventreactor.install()
from twisted.internet import reactor, protocol, error

class CmdProcessProtocol(protocol.ProcessProtocol):

	def __init__(self):
		self.stdout = ""
		self.stderr = ""
		self.status = 0

	def connectionMade(self):
		self.transport.closeStdin()

	def outReceived(self, data):
		self.stdout += str(data)

	def errReceived(self, data):
		self.stderr += str(data)

	def processEnded(self, reason):
		# TODO: change this hacky code.  Not sure how to get status
		# from twisted.python.failure.Failure.
		self.failure = reason
		if type != "twisted.internet.error.ProcessDone":
			self.status = 0
		else:
			self.status = 1
		reactor.stop()

class MyProcess:

	def __init__(self, cmd_and_args):
		self.cmd = cmd_and_args[0]
		self.args = cmd_and_args[1:]

		# Spawn the process using the reactor so we don't block
		p = CmdProcessProtocol()
		reactor.spawnProcess(p, self.cmd, cmd_and_args)
		reactor.run()

		# When the reactor stops, gather the info about the process
		self.status = p.status
		self.stdout = p.stdout
		self.stderr = p.stderr
		self.failure = p.failure

if __name__ == '__main__':
	p = MyProcess(["cleartool.exe", "lsvob", "-s"])
	print "cmd:", p.cmd
	print "args:", p.args
	print "stdout:", p.stdout
	print "stderr:", p.stderr
	print "status:", p.status
	print "failure:", p.failure
	p.failure.printDetailedTraceback()
