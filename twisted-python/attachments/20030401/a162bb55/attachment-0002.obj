Index: twisted/python/log.py
===================================================================
RCS file: /cvs/Twisted/twisted/python/log.py,v
retrieving revision 1.35
diff -u -r1.35 log.py
--- twisted/python/log.py	29 Mar 2003 05:08:21 -0000	1.35
+++ twisted/python/log.py	1 Apr 2003 12:00:17 -0000
@@ -20,17 +20,11 @@
 """
 
 
-import sys
-import os
-import string
-import cStringIO
-import time
+import sys, time, traceback, warnings
+import cStringIO as StringIO
 import threadable
-import traceback
 import failure
 
-StringIO = cStringIO
-del cStringIO
 
 def _no_log_output(func, *args, **kw):
     io = StringIO.StringIO()
@@ -58,10 +52,6 @@
         return _log_output(func, *args, **kw)
     return _no_log_output(func, *args, **kw)
 
-file_protocol = ['close', 'closed', 'fileno', 'flush', 'mode', 'name', 'read',
-                 'readline', 'readlines', 'seek', 'softspace', 'tell',
-                 'write', 'writelines']
-
 def write(stuff):
     """Write some data to the log."""
     logfile.write(str(stuff))
@@ -70,9 +60,9 @@
 def msg(*stuff):
     """Write some data to the log (a linebreak will be appended)."""
     if len(stuff) > 1:
-        logfile.write(' '.join(map(str, stuff)) + os.linesep)
+        logfile.write(' '.join(map(str, stuff)) + "\n")
     else:
-        logfile.write(str(stuff[0]) + os.linesep)
+        logfile.write(str(stuff[0]) + "\n")
     logfile.flush()
 
 
@@ -116,8 +106,6 @@
     msg('%s was called from file "%s", line %s, in %s\n'
         '    %s\n' % (funcCalled, filename, lineno, func, code))
 
-import warnings
-warnings.showwarning = showwarning
 
 _keepErrors = 0
 _keptErrors = []
@@ -182,7 +170,7 @@
         else:
             stuff.printTraceback(file=logerr)
     else:
-        logerr.write(str(stuff)+os.linesep)
+        logerr.write(str(stuff)+"\n")
 
 def deferr():
     """Write the default failure (the current exception) to the log.
@@ -303,6 +291,9 @@
         except (KeyError, IndexError):
             return self.defaultOwner
 
+_file_protocol = ['close', 'closed', 'fileno', 'flush', 'mode', 'name', 'read',
+                  'readline', 'readlines', 'seek', 'softspace', 'tell',
+                  'write', 'writelines']
 
 class Log:
     """
@@ -316,13 +307,13 @@
         self.file = file
 
     def __getattr__(self, attr):
-        if attr in file_protocol:
+        if attr in _file_protocol:
             return getattr(self.file, attr)
         else:
             raise AttributeError, attr
 
     def __setattr__(self, attr, value):
-        if attr in file_protocol:
+        if attr in _file_protocol:
             setattr(self.file, attr, value)
         else:
             self.__dict__[attr] = value
@@ -352,13 +343,6 @@
             self.write(line)
 
 
-# Make sure we have some basic logging setup.  This only works in cpython.
-try:
-    logOwner
-except NameError:
-    logOwner = LogOwner()
-
-
 def _threaded_msg(*stuff):
     loglock.acquire()
     real_msg(*stuff)
@@ -378,8 +362,11 @@
 
 def startLogging(file, setStdout=1):
     """Initialize logging to a specified file."""
-    global logfile
-    global logerr
+    global logerr, logfile
+
+    if warnings.showwarning is not showwarning:
+        warnings.showwarning = showwarning
+        
     logerr = logfile = Log(file, logOwner)
     msg("Log opened.")
     if setStdout:
@@ -392,18 +379,22 @@
     def flush(self):
         pass
 
-# Prevent logfile from being erased on reload.  This only works in cpython.
-try:
-    logfile
-except NameError:
-    logfile = NullFile()
-    logerr = sys.stderr
-
 def discardLogs():
     """Throw away all logs.
     """
     global logfile
-    logfile = Log(NullFile(), logOwner)
+    logfile = Log(sys.stderr, logOwner)
+
+    if warnings.showwarning is showwarning:
+        warnings.showwarning = _orig_showwarning
+
+
+# If this is the first time (not a reload) then initialize
+# This only works in CPython
+if "_orig_showwarning" not in dir():
+    logOwner = LogOwner()
+    logfile = logerr = sys.stderr
+    _orig_showwarning = warnings.showwarning
 
 
 __all__ = ["logOwner", "Log", "Logger", "startLogging", "msg", "write"]
