<tt>
I&amp;#39;m&nbsp;writing&nbsp;a&nbsp;gtk&nbsp;application&nbsp;that&nbsp;transfer&nbsp;files&nbsp;in&nbsp;LAN.&nbsp;The&nbsp;application&nbsp;has&nbsp;a&nbsp;server&nbsp;and&nbsp;can&nbsp;spawn&nbsp;different&nbsp;clients&nbsp;(one&nbsp;for&nbsp;each&nbsp;file&nbsp;to&nbsp;send)&nbsp;.&nbsp;The&nbsp;flow&nbsp;between&nbsp;client&nbsp;and&nbsp;server&nbsp;is&nbsp;something&nbsp;like&nbsp;that:&lt;br&gt;&lt;br&gt;client&nbsp;asks&nbsp;pb.Root&nbsp;a&nbsp;FileSender&nbsp;(&nbsp;that&nbsp;is&nbsp;conceptually&nbsp;a&nbsp;perspective).&lt;br&gt;<br>
The&nbsp;client&nbsp;receive&nbsp;the&nbsp;file&nbsp;sender.&lt;br&gt;The&nbsp;client&nbsp;declares&nbsp;the&nbsp;size&nbsp;and&nbsp;the&nbsp;basename&nbsp;of&nbsp;the&nbsp;file&nbsp;he&nbsp;is&nbsp;sending,&nbsp;requiring&nbsp;authorization&nbsp;to&nbsp;send.&lt;br&gt;The&nbsp;server&nbsp;perform&nbsp;authorization&nbsp;and&nbsp;passes&nbsp;to&nbsp;the&nbsp;client&nbsp;a&nbsp;unique&nbsp;key&nbsp;to&nbsp;start&nbsp;the&nbsp;file&nbsp;transfer.&lt;br&gt;<br>
The&nbsp;client&nbsp;performs&nbsp;the&nbsp;file&nbsp;transfer&nbsp;in&nbsp;&amp;quot;chunks&amp;quot;.&nbsp;Each&nbsp;chunk&nbsp;is&nbsp;passed&nbsp;throught&nbsp;a&nbsp;remote&nbsp;method,&nbsp;send_chunk.&lt;br&gt;&lt;br&gt;The&nbsp;file&nbsp;transfer&nbsp;is&nbsp;done&nbsp;&amp;quot;recursively&amp;quot;,&nbsp;each&nbsp;send_chunk&nbsp;deferred&nbsp;generates&nbsp;a&nbsp;new&nbsp;deferred&nbsp;for&nbsp;the&nbsp;next&nbsp;chunk.&nbsp;&lt;br&gt;<br>
&lt;br&gt;Some&nbsp;pseudocode&nbsp;to&nbsp;understand&nbsp;better&nbsp;my&nbsp;solution.&lt;br&gt;&lt;br&gt;FileSender:&lt;br&gt;   &nbsp;remote_get_auth():&lt;br&gt;   &nbsp;remote_request_for_sending(filename,&nbsp;size):&nbsp;return&nbsp;secret&lt;br&gt;   &nbsp;remote&nbsp;send_chunk(secred,&nbsp;chunk_no,&nbsp;data):&nbsp;save&nbsp;the&nbsp;chunk&nbsp;somewhere&lt;br&gt;<br>
&lt;br&gt;Client()&lt;br&gt;   &nbsp;proceed_sending():&lt;br&gt;&lt;br&gt;         &nbsp;chunk_tot&nbsp;=&nbsp;CHUNK_TOT&lt;br&gt;         &nbsp;chunk_no&nbsp;=&nbsp;0&lt;br&gt;&lt;br&gt;         &nbsp;def&nbsp;send(_)&lt;br&gt;               &nbsp;if&nbsp;chunk_no&nbsp;==&nbsp;CHUNK_TOT:&nbsp;return&lt;br&gt;               &nbsp;else:&lt;br&gt;                    &nbsp;...&nbsp;read&nbsp;data...&lt;br&gt;<br>
                   &nbsp;d&nbsp;=&nbsp;filesender.callRemote(&amp;quot;send_chunk&amp;quot;,&nbsp;secret,&nbsp;chunk_no,&nbsp;data)&lt;br&gt;                   &nbsp;d.addCallback(send)&lt;br&gt;&lt;br&gt;I&amp;#39;ve&nbsp;done&nbsp;in&nbsp;this&nbsp;way&nbsp;so&nbsp;a&nbsp;new&nbsp;chunk&nbsp;is&nbsp;sent&nbsp;only&nbsp;if&nbsp;the&nbsp;previous&nbsp;chunk&nbsp;was&nbsp;sent.&lt;br&gt;<br>
The&nbsp;problem&nbsp;of&nbsp;this&nbsp;approach&nbsp;is&nbsp;that&nbsp;this&nbsp;blocks&nbsp;my&nbsp;GUI,&nbsp;I&nbsp;can&amp;#39;t&nbsp;figure&nbsp;out&nbsp;why&nbsp;because&nbsp;I&amp;#39;m&nbsp;just&nbsp;generating&nbsp;deffereds&nbsp;so&nbsp;it&nbsp;souldn&amp;#39;t&nbsp;block.&lt;br&gt;&lt;br&gt;I&amp;#39;ve&nbsp;seen&nbsp;the&nbsp;page&nbsp;about&nbsp;Consumer&nbsp;and&nbsp;Producer,&nbsp;however&nbsp;I&nbsp;can&amp;#39;t&nbsp;figure&nbsp;out&nbsp;how&nbsp;to&nbsp;integrate&nbsp;producer&nbsp;and&nbsp;consumers&nbsp;in&nbsp;a&nbsp;Perspective&nbsp;Broker&nbsp;based&nbsp;code.&lt;br&gt;<br>
&lt;br&gt;Can&nbsp;someone&nbsp;help&nbsp;me?&lt;br&gt;<br>

</tt>
