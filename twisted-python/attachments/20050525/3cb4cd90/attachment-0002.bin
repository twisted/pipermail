
import os
import sys
import time
from pprint import pprint

from twisted.python import usage, log, syslog
from twisted.application import internet, service
from twisted.internet import reactor, defer
import twisted.scripts.twistd as td

from SampleServer.handler import StatHandler
from SampleServer.proto import StatProtocol, ControlProtocol
from SampleServer.storage import StorageManager

import SampleServer.web as web


class SampleOptions(usage.Options):
    """ Options for controlling the sampleserver
    """
    optFlags = [ 
        ["quiet",    "q", "Run more quietly"],
        ["verbose",  "v", "Run more verbosely"],
        ["nodaemon", "n", "Don't daemonize, run in foreground"],
        ["debug",    "b", "Run in debug mode."],                
    ]
    optParameters = [
        ["port",      "p", 5747,         "Port for sample protocol (UDP)"],
        ["ctrlport",  "c", 5748,         "Port for control protocol (TCP)"],
        ["webport",   "w", 5747,         "Port for web protocol (TCP)"],        
        ["user",      "u", "sampleserver", "User to run as"],
        ["group",     "g", "sampleserver", "Group to run as"],
        ["interval",  "i", 60,           "Storage sync interval"],
        ["directory", "d", "/var/lib/sampleserver", "Directory to use for datafiles"],
        ["mode",      "m", "sample",       "Mode to run in (stat,web)"],
    ]
    synopsis = "Usage: %s [options]" % os.path.basename(sys.argv[0])

    def __init__(self):
        usage.Options.__init__(self)
        self['verbosity'] = 0
        self['symbols'] = []
        
    def opt_verbose(self):
        self['verbosity'] = self['verbosity']+1

    def opt_quiet(self):
        self['verbosity'] = self['verbosity']-1

    def opt_define(self, symbol):
        self['symbols'].append(symbol)

    opt_v = opt_verbose
    opt_q = opt_quiet
    opt_D = opt_define


def parse_options():
    config = SampleOptions()
    try:
        config.parseOptions()
    except usage.error, ue:
        print config
        print "%s: %s" % (sys.argv[0], ue)
    return config



if __name__ == '__main__':

    tdcmds = ["-o", "-y", __file__]

    config = parse_options()

    # setup terminal and logging
    if config['nodaemon'] or config['debug']:
        tdcmds = ['--nodaemon',] + tdcmds
    else:
        tdcmds = ['--syslog',] + tdcmds

    # setup pidfiles
    if config['mode'] == 'sample':
        tdcmds = ["--pidfile", "/var/run/sampleserver.pid"] + tdcmds
    else:
        tdcmds = ["--pidfile", "/var/run/sampleweb.pid"] + tdcmds

    tdoptions = td.ServerOptions()
    tdoptions.parseOptions(tdcmds)
    td.runApp(tdoptions)

else:

    # parse out the user/group info
    import pwd, grp
    config = parse_options()
    pwent = pwd.getpwnam(config['user'])
    grent = grp.getgrnam(config['group'])

    # setup the application object
    application = service.Application('sampleserver', uid=pwent[2], gid=grent[2])
    serviceCollection = service.IServiceCollection(application)

    internet.UDPServer(config['port'], SampleProtocol()

