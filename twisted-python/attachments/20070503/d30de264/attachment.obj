"""
lib module transive_udp.py 
"""
__all__ = ["transive_udp"]

       
class transive_UDP( DatagramProtocol) :

    def __init__ ( self, host, port, min_step ):
        self.host = host
        self.port = port
        self.min_step = min_step
        self.cur_time=time.clock()
        self.transport.connect( self.host, self.port )

    def datagramRecived(self, data):
        count = 0
        data_str = string.split(data)
        for recive_items in data_str:
            __main__.recived_data[ count ] = float( recive_items )
            count = count +1           
        __main__.update_on_recive()
        
    def send_UDP(self, data ):
        if time.clock() > self.cur_time + self.min_step:
            self.cur_time=time.clock()
            send_str=' '
            for send_items in data:
                send_str = send_str + str(send_item) + '   '
             self.transport.write( send_str )

#-- end of lib module transive_udp.py  -------------------------

# following line to include in main.py
 import time
 import string
 import trancive_udp
 from twisted.internet.protocol import DatagramProtocol 
 from twisted.internet import reactor 
 
 recive_data = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ]
 send_data = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ]

 def update_on_recive():
     set_a_position()
     set_a_orientation()
 
 def something_are_updated(value):
    send_data[2]=value
    connect_server.send_UDP(send_data)

 reactor.listenUDP(self.port, transive_udp('130.130.23.9',2345, 0.05 ))
 reactor.run()   
    