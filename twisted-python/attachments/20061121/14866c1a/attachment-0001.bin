Index: twisted/trial/runner.py
===================================================================
--- twisted/trial/runner.py	(revision 18767)
+++ twisted/trial/runner.py	(working copy)
@@ -142,10 +142,14 @@
         """
         # we implement this because Python 2.3 unittest defines this code
         # in __call__, whereas 2.4 defines the code in run.
+        if hasattr(self, 'setUp'):
+            self.setUp(self)
         for test in self._tests:
             if result.shouldStop:
                 break
             test(result)
+        if hasattr(self, 'tearDown'):
+            self.tearDown(self)
         return result
 
 
@@ -513,6 +517,10 @@
         Tests are only loaded from modules whose name begins with 'test_'
         (or whatever C{modulePrefix} is set to).
 
+        If that's not good for you, put a function named C{test_suite} in
+        your module that returns a TestSuite, and I'll use the results of
+        that instead.
+
         @param package: a types.ModuleType object (or reasonable facsimilie
         obtained by importing) which may contain tests.
 
@@ -528,16 +536,27 @@
         if not isPackage(package):
             raise TypeError("%r is not a package" % (package,))
         pkgobj = modules.getModule(package.__name__)
-        if recurse:
-            discovery = pkgobj.walkModules()
-        else:
-            discovery = pkgobj.iterModules()
-        discovered = []
-        for disco in discovery:
+
+        try:
+            return pkgobj.test_suite()
+        except AttributeError:
+            pass
+
+        tests = []
+        subModules = []
+        for disco in pkgobj.iterModules():
             if disco.name.split(".")[-1].startswith(self.modulePrefix):
-                discovered.append(disco)
+                tests.append(disco)
+            else:
+                subModules.append(disco)
+
         suite = self.suiteFactory()
-        for modinfo in self.sort(discovered):
+        module = pkgobj.load()
+        if hasattr(module, 'setUp'):
+            suite.setUp = module.setUp
+        if hasattr(module, 'tearDown'):
+            suite.tearDown = module.tearDown
+        for modinfo in self.sort(tests):
             try:
                 module = modinfo.load()
             except:
@@ -545,6 +564,11 @@
             else:
                 thingToAdd = self.loadModule(module)
             suite.addTest(thingToAdd)
+
+        if recurse:
+            for modinfo in self.sort(subModules):
+                subsuite = self.loadByName(modinfo.name)
+                suite.addTest(subsuite)
         return suite
 
     def loadDoctests(self, module):
