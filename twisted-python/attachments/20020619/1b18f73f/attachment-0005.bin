# New.rpy

from twisted.python.mvc import Model
from twisted.web.domtemplate import DOMView

class NewModel(Model):    
    def __init__(self, foo="", bar="", baz=""):
        Model.__init__(self)
        self.foo = foo
        self.bar = bar
        self.baz = baz

    def notify(self, changed):
        # We should persist ourself when we have changed.
        save(self)
        
class NewView(DOMView):
    template = """<html><body>
    <form action="">
    Please enter some integers:
    <div>
    Foo:<input id="foo" controller="IntHandler" view="InputText"/>
    </div>
    <div>
    Bar:<input id="bar" controller="IntHandler" view="InputText"/>
    </div>
    <div>
    Baz:<input id="baz" controller="IntHandler" view="InputText"/>
    </div>
    <input type="submit" />
    </form>
</body></html>
"""

# This example uses a simple text file for persistence. Using a database or
# something else is probably a better idea.
# Because the model is used to hold state between requests, it needs to be
# long living somehow. Does twisted have a session object? That might work.

import os

def load():
    if os.path.exists('TestObject.txt'):
        fl = open('TestObject.txt')
        foo = fl.readline()
        bar = fl.readline()
        baz = fl.readline()
        return NewModel(foo, bar, baz)
    return NewModel()
    
def save(model):
    fl = open('TestObject.txt','w')
    fl.write(model.foo + '\n')
    fl.write(model.bar + '\n')
    fl.write(model.baz + '\n')

# With an rpy, the file is execed every time a web request hits it.
# Let's load a model if there is a text file on disk, otherwise create one.

resource = NewView(load())
