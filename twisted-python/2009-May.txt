From saurav.mohapatra at dimdim.com  Fri May  1 10:02:47 2009
From: saurav.mohapatra at dimdim.com (Mohapatra Saurav)
Date: Fri, 1 May 2009 09:02:47 -0500
Subject: [Twisted-Python] TCP Proxy scalability issue
Message-ID: <EA2F29B650A22546932C85031ED4F98AE07649@mail-37ps.atlarge.net>

Hi,

 

We're currently running a TCP proxy  / port multiplexer written in
Twisted to route to multiple worker server processes running on loopback
ports.

 

The architecture is something like this

 

Worker processes W1...n run listening on P1..n on the loopback and one
router process (twisted based) runs on public port P0 exposed to the
real world.

 

The clients connect to P0 and the first few bytes they send indicates
which worker process they wish to connect to. The Twisted protocol
implementation then creates a relay TCP connection to loopback worker
process port and after that forwards received data on P0 to the worker
port on loop back and sends back data received from worker port to the
external connection.

 

We're noticing significant degradation / starvation of the clients under
load (around 25 concurrent connections are enough to simulate this).

 

We're running on Linux (CentOS 5.2) using python 2.5 and Twisted latest
source tarball using the epoll reactor and all settings are default.
Each connection sends back around 8-24kb data per second.

 

My question is are there any "production" settings I need to do
(threadpool etc.) to get the maximum out of twisted.

 

Regards

Saurav

 

 

 

Saurav Mohapatra
Director of Technology


(  508.875.9501  | Mobile: 774.242.7422
*  saurav at dimdim.com
Skype: mohaps   |   AIM: mohaps

    Meet freely.

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090501/d4a6327e/attachment.htm 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: image/png
Size: 6358 bytes
Desc: image001.png
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20090501/d4a6327e/attachment.png 

From glyph at divmod.com  Fri May  1 11:54:56 2009
From: glyph at divmod.com (glyph at divmod.com)
Date: Fri, 01 May 2009 15:54:56 -0000
Subject: [Twisted-Python] TCP Proxy scalability issue
In-Reply-To: <EA2F29B650A22546932C85031ED4F98AE07649@mail-37ps.atlarge.net>
References: <EA2F29B650A22546932C85031ED4F98AE07649@mail-37ps.atlarge.net>
Message-ID: <20090501155456.12555.1002021953.divmod.xquotient.10153@weber.divmod.com>

On 02:02 pm, saurav.mohapatra at dimdim.com wrote:
>Worker processes W1...n run listening on P1..n on the loopback and one
>router process (twisted based) runs on public port P0 exposed to the
>real world.

I haven't used it myself, but that sounds a bit like txloadbalancer: 
https://launchpad.net/txloadbalancer

Are you using that?
>The clients connect to P0 and the first few bytes they send indicates
>which worker process they wish to connect to. The Twisted protocol
>implementation then creates a relay TCP connection to loopback worker
>process port and after that forwards received data on P0 to the worker
>port on loop back and sends back data received from worker port to the
>external connection.

>We're noticing significant degradation / starvation of the clients 
>under
>load (around 25 concurrent connections are enough to simulate this).

>We're running on Linux (CentOS 5.2) using python 2.5 and Twisted latest
>source tarball using the epoll reactor and all settings are default.
>Each connection sends back around 8-24kb data per second.

While every application is a unique beast in terms of performance 
tuning, these numbers all sound surprisingly low to me for something as 
simple as a TCP proxy.

Are you saturating your CPU?  What is the load like on the box in 
question, both from the Twisted proxy and from the other processes?

Can you provide a benchmark that we can run somewhere else, to 
demonstrate the issue you're having?
>My question is are there any "production" settings I need to do
>(threadpool etc.) to get the maximum out of twisted.

Nothing that you described will make any use of threads - is there some 
reason you mention threadpool size?

If you *are* using threads then perhaps you shouldn't be, and they're 
causing performance problems :)

However, aside from reactor selection, Twisted is designed to have very 
few knobs to turn; it has one button for performance tuning and we push 
it before it leaves the factory.  So if there's a performance problem, 
the issue is that we need to optimize something in Twisted, or you need 
to optimize something in your application.

You may be able to tweak various linux kernel parameters to be able to 
improve things a bit, but if you're running into problems at 25 
connections, it doesn't sound like you're running into kernel issues to 
me.



From saurav.mohapatra at dimdim.com  Fri May  1 12:31:33 2009
From: saurav.mohapatra at dimdim.com (Mohapatra Saurav)
Date: Fri, 1 May 2009 11:31:33 -0500
Subject: [Twisted-Python] TCP Proxy scalability issue
In-Reply-To: <mailman.8.1241193602.26899.twisted-python@twistedmatrix.com>
References: <mailman.8.1241193602.26899.twisted-python@twistedmatrix.com>
Message-ID: <EA2F29B650A22546932C85031ED4F98AE07667@mail-37ps.atlarge.net>

Glyph,

Thanks for the response.

We're trying to proxy multiple VNC processes for a screen sharing
application. So though CPU load is low, the data being pushed out is
pretty high. We have around 16Kb of data being pushed out per second per
client for a normal case. The test server is running on EC2, but we see
the degradation in the production deployment (on physical machines
running on a cogent fiber connection). I was thinking it might have
something to do with amount of data being written and number of
simultenous writes issued. Something to do with transport.write()

I'll take a look at txloadbalancer. 

I can make a benchmarking application available to you, please mail me
off the list at saurav.mohapatra at dimdim.com

Regards
Saurav

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of
twisted-python-request at twistedmatrix.com
Sent: Friday, May 01, 2009 12:00 PM
To: twisted-python at twistedmatrix.com
Subject: Twisted-Python Digest, Vol 62, Issue 2

Send Twisted-Python mailing list submissions to
	twisted-python at twistedmatrix.com

To subscribe or unsubscribe via the World Wide Web, visit
	http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
or, via email, send a message with subject or body 'help' to
	twisted-python-request at twistedmatrix.com

You can reach the person managing the list at
	twisted-python-owner at twistedmatrix.com

When replying, please edit your Subject line so it is more specific
than "Re: Contents of Twisted-Python digest..."


Today's Topics:

   1. Re: TCP Proxy scalability issue (glyph at divmod.com)


----------------------------------------------------------------------

Message: 1
Date: Fri, 01 May 2009 15:54:56 -0000
From: glyph at divmod.com
Subject: Re: [Twisted-Python] TCP Proxy scalability issue
To: Twisted general discussion <twisted-python at twistedmatrix.com>
Message-ID:
	
<20090501155456.12555.1002021953.divmod.xquotient.10153 at weber.divmod.com
>
	
Content-Type: text/plain; charset="utf-8"; format="flowed"

On 02:02 pm, saurav.mohapatra at dimdim.com wrote:
>Worker processes W1...n run listening on P1..n on the loopback and one
>router process (twisted based) runs on public port P0 exposed to the
>real world.

I haven't used it myself, but that sounds a bit like txloadbalancer: 
https://launchpad.net/txloadbalancer

Are you using that?
>The clients connect to P0 and the first few bytes they send indicates
>which worker process they wish to connect to. The Twisted protocol
>implementation then creates a relay TCP connection to loopback worker
>process port and after that forwards received data on P0 to the worker
>port on loop back and sends back data received from worker port to the
>external connection.

>We're noticing significant degradation / starvation of the clients 
>under
>load (around 25 concurrent connections are enough to simulate this).

>We're running on Linux (CentOS 5.2) using python 2.5 and Twisted latest
>source tarball using the epoll reactor and all settings are default.
>Each connection sends back around 8-24kb data per second.

While every application is a unique beast in terms of performance 
tuning, these numbers all sound surprisingly low to me for something as 
simple as a TCP proxy.

Are you saturating your CPU?  What is the load like on the box in 
question, both from the Twisted proxy and from the other processes?

Can you provide a benchmark that we can run somewhere else, to 
demonstrate the issue you're having?
>My question is are there any "production" settings I need to do
>(threadpool etc.) to get the maximum out of twisted.

Nothing that you described will make any use of threads - is there some 
reason you mention threadpool size?

If you *are* using threads then perhaps you shouldn't be, and they're 
causing performance problems :)

However, aside from reactor selection, Twisted is designed to have very 
few knobs to turn; it has one button for performance tuning and we push 
it before it leaves the factory.  So if there's a performance problem, 
the issue is that we need to optimize something in Twisted, or you need 
to optimize something in your application.

You may be able to tweak various linux kernel parameters to be able to 
improve things a bit, but if you're running into problems at 25 
connections, it doesn't sound like you're running into kernel issues to 
me.



------------------------------

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


End of Twisted-Python Digest, Vol 62, Issue 2
*********************************************



From glyph at divmod.com  Fri May  1 21:10:29 2009
From: glyph at divmod.com (glyph at divmod.com)
Date: Sat, 02 May 2009 01:10:29 -0000
Subject: [Twisted-Python] TCP Proxy scalability issue
In-Reply-To: <EA2F29B650A22546932C85031ED4F98AE07667@mail-37ps.atlarge.net>
References: <mailman.8.1241193602.26899.twisted-python@twistedmatrix.com>
	<EA2F29B650A22546932C85031ED4F98AE07667@mail-37ps.atlarge.net>
Message-ID: <20090502011029.12555.540014919.divmod.xquotient.10190@weber.divmod.com>

On 1 May, 04:31 pm, saurav.mohapatra at dimdim.com wrote:
>Glyph,
>
>Thanks for the response.

No problem.  Thanks for your clearly described inquiry :).
>We're trying to proxy multiple VNC processes for a screen sharing
>application. So though CPU load is low, the data being pushed out is
>pretty high. We have around 16Kb of data being pushed out per second 
>per
>client for a normal case. The test server is running on EC2, but we see
>the degradation in the production deployment (on physical machines
>running on a cogent fiber connection). I was thinking it might have
>something to do with amount of data being written and number of
>simultenous writes issued. Something to do with transport.write()

When you do a transport.write, twisted puts the data into a buffer on 
your transport and marks it as ready to write some data.  When you next 
get into epoll, epoll should wake up immediately, showing that lots of 
FDs are ready for writing, and Twisted will then immediately begin 
attempting to write all of the buffered data to those connections.

All of those sockets are in non-blocking mode and so send will 
immediately return regardless of how much data can actually be put onto 
the wire.

Therefore, in principle, if Twisted is not 100% busy on the CPU, then 
nothing *should* be causing it to deliver your data slower than it's 
coming in.  Unless, of course, there's a bug, which is always possible. 
But this is a pretty simple bit of code and inspecting it in the course 
of this email I don't see many places for such a bug to hide; so in this 
case I'd probably start the bug hunt in the application.  Or at least, 
by writing the simplest possible benchmark for Twisted itself, so that 
we can see the "raw" performance regardless of any application logic.
>I can make a benchmarking application available to you, please mail me
>off the list at saurav.mohapatra at dimdim.com

I have done so.
>Regards
>Saurav



From exarkun at twistedmatrix.com  Sun May  3 09:37:40 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 03 May 2009 13:37:40 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1241357860.1.273141619@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090503/0554720b/attachment.htm 

From exarkun at divmod.com  Sun May  3 16:42:38 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 3 May 2009 16:42:38 -0400
Subject: [Twisted-Python] May 2nd Sprint
In-Reply-To: 0
Message-ID: <20090503204238.21531.1002843969.divmod.quotient.85@henry.divmod.com>

Hello all,

The sprint yesterday went quite well.  He's a quick peek at what everyone was
up to:

  * Drake Smith and Itamar Shtull-Trauring spent time fixing problems with our
    documentation and addressing a potential problem with the __str__ of
    DelayedCall

  * Dave Sturgis worked on adding frame-drop notification to LoopingCall

  * Thomas Herv? contributed remotely with code for the Conch "session"
    branch and tests for a regression fix in Conch's ssh agent support

  * Michael Hudson also participated remotely, continuing to work towards
    support for multiple byte ranges in HTTP range requests in the Twisted
    Web server

  * Glyph Lefkowitz finished the removal of a lot of decrepit gtk1-based
    application code, reviewed much of the other work done at the sprint,
    and triaged a bunch of tickets.

  * Chris Armstrong added an API to the new HTTP client currently under
    development to allow applications to interrupt it and disconnect at
    arbitrary times.  He also paired with me to fix a memory leak triggered
    by trial's --until-failure option.

  * I also worked on some Conch fixes, reviewed some code, and triaged
    some tickets.

Thanks to Divmod and the TSF sponsors who picked up lunch for all the
sprinters.

Jean-Paul



From dave at krondo.com  Sun May  3 18:38:51 2009
From: dave at krondo.com (Dave Peticolas)
Date: Sun, 03 May 2009 15:38:51 -0700
Subject: [Twisted-Python] cx_Oracle, Twisted - rollback failed
In-Reply-To: <920941.59090.qm@web111315.mail.gq1.yahoo.com>
References: <920941.59090.qm@web111315.mail.gq1.yahoo.com>
Message-ID: <49FE1CFB.6090906@krondo.com>

Steve Lewis wrote:
>> Is there some way it can determine that the connection has been lost aside
>> from trying the rollback (and is compatible with other DB-API 2.0 modules)?
>>
>> Jean-Paul
> 
> Oops, I actually did see my message going through now. Sorry for the duplicate. 
> 
> To answer your question, I was under the impression that the cp_reconnect would check to see if the connection existed already. Is there a way to have it check that query before rolling back? I'm guessing other databases/apis don't throw exceptions on a rollback if the connection is gone?
> Steve

The cp_reconnect flag tells the pool to re-open connections that have
failed the next time they are accessed. The query that 'discovers' the
lost connection will still fail and receive the ConnectionLost
exception.

When the reconnect flag is false, lost connections simply aren't
detected and continue to fail.

dave




From lrhazi at gmail.com  Mon May  4 02:15:25 2009
From: lrhazi at gmail.com (Mohamed Lrhazi)
Date: Mon, 4 May 2009 02:15:25 -0400
Subject: [Twisted-Python] RTFM about custom reactors
Message-ID: <c4ab18df0905032315m4f0b3f85vf900adddd7557000@mail.gmail.com>

Hello all,

I was wondering if someone could point me in the right direction....

I am attempting to connect a proprietary network OS plugin system to
Python, to allow for writing traffic handling plugins in Python, and
was wondering what it would take to connect such a system into
Twisted, thus allowing the writing of normal twisted apps on top....

Is it matter of learning and writing a custom reactor? My current
understanding is that the reactor is what detects and dispatches
events... but does it also dispatch the "data", as in the traffic
payload? what can I read to learn more?

Thanks a lot,
Mohamed.



From terry at jon.es  Mon May  4 06:26:33 2009
From: terry at jon.es (Terry Jones)
Date: Mon, 4 May 2009 12:26:33 +0200
Subject: [Twisted-Python] addCallback0 convenience method
Message-ID: <18942.49881.79556.867747@jon.es>

There are two minor niggles I frequently run into when writing code with
deferreds and callbacks:

 1. I very often write callbacks that ignore the incoming result: I tend to
    write this as def cb(_): ...

 2. I sometimes write functions that I want to call both from within a
    callback chain and when not in a callback chain. Usually this is
    another case of writing def x(_, arg1, arg2) etc. and documenting that
    the extra unused arg is for when the function is called as part of a
    callback chain. This looks odder when the function is some kind of
    utility living in different Python source file, and is thus distant
    from its use in a callback chain.

Seeing as n-1 of the add* methods of t.i.defer.Deferred are convenience
methods for calling addCallbacks, I propose another:

    def addCallback0(self, callback, *args, **kw):
        self.addCallback(lambda result: callback(*args, **kw))

This allows you to write callback functions that will not be passed the
result of the callback chain.  That means I never have to deal with 1 and 2
above. They're minor niggles, of course, but they make code look less
attractive and a little harder to understand. Yes, I could write my own
standalone function

    def addCallback0(d, callback, *args, **kw):
        d.addCallback(lambda result: callback(*args, **kw))

and pass it my deferreds. And yes, I can also write my own wrapper to call
other methods which don't take a callback result as their first argument.

But all this would be nicer if addCallback0 was part of the Deferred class.
I don't think we need a corresponding addBoth0 or addErrback0 etc., though.

Terry



From petshmidt at googlemail.com  Mon May  4 07:04:53 2009
From: petshmidt at googlemail.com (Pet)
Date: Mon, 4 May 2009 13:04:53 +0200
Subject: [Twisted-Python] design question
Message-ID: <b460e9630905040404geda63a4rfdcca71adcd095f@mail.gmail.com>

Hi,

I've written my first Twisted Server, which accept request from
clients, does DB queries, sends response back and logs some events in
DB. I wonder, if my design was good.
Basically,  I have a Factory where is db connectionPool created and
Protocol(basic.LineReceiver), which processes requests and sends data
back.
In Protocol, I instantiate my utility object which I try to keep
independent from twisted framework, so it can be easily used
somewhere else or can be replaced by other class.

def m(self, *args, **kwargs ):
       try:
           d = self.getData(params=kwargs['params'])
           if d:
               d.addCallback(self.sendResult)
               d.addErrback(log.err)

               d.addCallback(self.logFailedQuery)
               d.addErrback(log.err)
               return None
       except Exception, e:
           log.msg('Unknown error in m:', e)

def getData(self, *args, **kwargs):
   obj = MyObj(self.db)
   return self.db.runInteraction(obj.getDataFromDB,kwargs['parameter'])

What I don't like, I must pass db variable to obj.getDataFromDb and
may be other function called there. I think it would be better obj =
MyObj(self.db), but it doesn't work and runInteraction passes
automatically db variable to interaction method.

I'm new to Python and Twisted and would appreciate your advises.
Pet



From drew.smathers at gmail.com  Mon May  4 11:59:07 2009
From: drew.smathers at gmail.com (Drew Smathers)
Date: Mon, 4 May 2009 11:59:07 -0400
Subject: [Twisted-Python] addCallback0 convenience method
In-Reply-To: <18942.49881.79556.867747@jon.es>
References: <18942.49881.79556.867747@jon.es>
Message-ID: <368574aa0905040859s3df0c324wc38705befa549b1a@mail.gmail.com>

On Mon, May 4, 2009 at 6:26 AM, Terry Jones <terry at jon.es> wrote:
> There are two minor niggles I frequently run into when writing code with
> deferreds and callbacks:
>
> ?1. I very often write callbacks that ignore the incoming result: I tend to
> ? ?write this as def cb(_): ...
>
> ?2. I sometimes write functions that I want to call both from within a
> ? ?callback chain and when not in a callback chain. Usually this is
> ? ?another case of writing def x(_, arg1, arg2) etc. and documenting that
> ? ?the extra unused arg is for when the function is called as part of a
> ? ?callback chain. This looks odder when the function is some kind of
> ? ?utility living in different Python source file, and is thus distant
> ? ?from its use in a callback chain.
>
> Seeing as n-1 of the add* methods of t.i.defer.Deferred are convenience
> methods for calling addCallbacks, I propose another:
>
> ? ?def addCallback0(self, callback, *args, **kw):
> ? ? ? ?self.addCallback(lambda result: callback(*args, **kw))
>
> This allows you to write callback functions that will not be passed the
> result of the callback chain. ?That means I never have to deal with 1 and 2
> above. They're minor niggles, of course, but they make code look less
> attractive and a little harder to understand. Yes, I could write my own
> standalone function
>
> ? ?def addCallback0(d, callback, *args, **kw):
> ? ? ? ?d.addCallback(lambda result: callback(*args, **kw))
>
> and pass it my deferreds. And yes, I can also write my own wrapper to call
> other methods which don't take a callback result as their first argument.
>
> But all this would be nicer if addCallback0 was part of the Deferred class.
> I don't think we need a corresponding addBoth0 or addErrback0 etc., though.
>
> Terry
>

I vote instead to add a new function impartial() to standard library
functools module:

d.addCallback(impartial(callback))

Kidding, of source.  Seriously, though, I think the regular way of
attaching "lambda ign: cb(*a, **kw)" is concise enough to warrant not
adding more to the Deferred API.  A more general solution might be to
wrap functions - something like the inverse of functools.partial():

def shiftargs(level=1)
    def decorator(f)
        @wraps(f)
        def _wrapper(*a, **kw):
            return f(a[level:], **kw)
        return _wrapper
    return decorator

Still - just my opinion, of course - having such a function (either
callback0 or shiftargs) feels too esoteric, and the intent is less
explicit than the lambda statement.

-Drew



From lars.reimann at googlemail.com  Mon May  4 14:00:33 2009
From: lars.reimann at googlemail.com (Lars Reimann)
Date: Mon, 4 May 2009 20:00:33 +0200
Subject: [Twisted-Python] sending out RAW IP packets using sockets
Message-ID: <59acdf910905041100t70b3eeedo52d70e79ba9ed313@mail.gmail.com>

hello,

this question may be a bit off-topic, but nevertheless I am stuck atm.

I'm trying to send out RAW IP packets (incl. full header) which i
obtained previously using packet capture.

It has to be RAW IP packets because I want the kernel to do ARP lookup
stuff, etc for me . So an obtained packet should go through the normal
lookup process.

I've tried to use RAW sockets in python for this, but it constantly
tells me, that the "Protocol (is) not supported" using this code:

-------

self.rawserver = socket.socket(socket.AF_INET, socket.SOCK_RAW, self.proto)
      self.rawserver.bind((self.interface, self.proto))

-------

I would then simply 'send' the packets over that raw socket.

I've tried to specify IPPROTO_RAW, and others for 'self.proto' but my
python 2.5 won't accept this because they are unknown.

My question is why that error occurs and how I can enable my program to
send out RAW IP packets. Maybe the twisted framework could be helpful.
As I am new to network programming I ask for your help.


links to examples would also be greatly appreciated.


greetings,
l.r.



From itamar at itamarst.org  Mon May  4 14:08:39 2009
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 04 May 2009 14:08:39 -0400
Subject: [Twisted-Python] RTFM about custom reactors
In-Reply-To: <c4ab18df0905032315m4f0b3f85vf900adddd7557000@mail.gmail.com>
References: <c4ab18df0905032315m4f0b3f85vf900adddd7557000@mail.gmail.com>
Message-ID: <1241460519.22842.52.camel@pintsize>

On Mon, 2009-05-04 at 02:15 -0400, Mohamed Lrhazi wrote:
> Hello all,
> 
> I was wondering if someone could point me in the right direction....
> 
> I am attempting to connect a proprietary network OS plugin system to
> Python, to allow for writing traffic handling plugins in Python, and
> was wondering what it would take to connect such a system into
> Twisted, thus allowing the writing of normal twisted apps on top....
> 
> Is it matter of learning and writing a custom reactor? My current
> understanding is that the reactor is what detects and dispatches
> events... but does it also dispatch the "data", as in the traffic
> payload? what can I read to learn more?

The  reactor does low-level network events, like TCP reads, not
high-level plugins. What would these plugins do exactly?




From lrhazi at gmail.com  Mon May  4 14:23:59 2009
From: lrhazi at gmail.com (Mohamed Lrhazi)
Date: Mon, 4 May 2009 14:23:59 -0400
Subject: [Twisted-Python] RTFM about custom reactors
In-Reply-To: <1241460519.22842.52.camel@pintsize>
References: <c4ab18df0905032315m4f0b3f85vf900adddd7557000@mail.gmail.com>
	<1241460519.22842.52.camel@pintsize>
Message-ID: <c4ab18df0905041123q6a66bb17w203c79756b91f58d@mail.gmail.com>

On Mon, May 4, 2009 at 2:08 PM, Itamar Shtull-Trauring
<itamar at itamarst.org> wrote:
> The ?reactor does low-level network events, like TCP reads, not
> high-level plugins. What would these plugins do exactly?
>

The Network OS acts as proxy, at the IP level, but also implements
several protocols, including http. It also allows a plugin to recieve
all network events, and access all payload and change anything in the
process... So the plugin could build its own protocol
implementations...

So, the question is, how do I write a custom reactor to handle the low
level network events and data?
is the actual source of the standar reactor the right place to start,
and is there an example our there of such a custom reactor?

Thanks a lot,
Mohamed.



From p.mayers at imperial.ac.uk  Tue May  5 05:16:00 2009
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue, 05 May 2009 10:16:00 +0100
Subject: [Twisted-Python] addCallback0 convenience method
In-Reply-To: <368574aa0905040859s3df0c324wc38705befa549b1a@mail.gmail.com>
References: <18942.49881.79556.867747@jon.es>
	<368574aa0905040859s3df0c324wc38705befa549b1a@mail.gmail.com>
Message-ID: <4A0003D0.8090709@imperial.ac.uk>

> Still - just my opinion, of course - having such a function (either
> callback0 or shiftargs) feels too esoteric, and the intent is less
> explicit than the lambda statement.

+1



From sophismus at gmx.de  Tue May  5 06:39:28 2009
From: sophismus at gmx.de (sophismus at gmx.de)
Date: Tue, 05 May 2009 12:39:28 +0200
Subject: [Twisted-Python] how do i do that
Message-ID: <20090505103928.201150@gmx.net>

hey,
i'm quite new in python and twisted and did things wrong from the start now i have to reconsider my prog.
first i thought of an easier example with almost the same functionality. 
functionality: client connects, sends info, all infos from all clients are concurrently processed, a special client with the right info at the right time gets a special msg 
i got this:
it is thought that a client writes an int as birthday back...

from twisted.internet import protocol, reactor, defer, threads
days = []
allprotocols = []
class BServerProtocol(protocol.Protocol):
        birthday = 0
        def connectionMade(self):
                print "puh"
                global allprotocols
                allprotocols.append(self)
                print "allprotocols",allprotocols
        def congratulate(self):
                self.transport.write("congratulations")
                return 'done'
        def dataReceived(self,data):
                print data
                if int (data)>0:
                        self.birthday = int(data)
                        print "self.bday:",self.birthday
                        global days
                        days.append(int(data))
                        self.transport.write("pff")
#                       self.factory.deferred.callback("uiuiui+1")
                if data == "thanks":
                        self.write("well done")
class BServerFactory(protocol.ServerFactory):
        protocol = BServerProtocol
        def __init__(self):
                self.deferred = defer.Deferred()
def proveday():
        day = 5 #of may, think of this date as new decided 
                #from a white rabbit every time it runs
        ret = -1
        found = False
        i = 0
        length = len(allprotocols)
        while (i<length and found == False):
                birthday = allprotocols[i].birthday
                print "birthday:",birthday
                if birthday == day:
                        print 'bday==day'
                        print "allprotocols[i]:",allprotocols[i]
                        found =True
                        ret = i
                        allprotocols[i].congratulate()
                i+=1
        return ret
def startprove():
        r = proveday()

bsf = BServerFactory()
#bsf.deferred.addCallback(registerSuccess)
reactor.listenTCP(55555,bsf)
reactor.callInThread(startprove)
#commands =[(startprove,[],{})]
#commands.append(startcong)#,[],{})
#threads.callMultipleInThread(commands)
reactor.run()
_______________________
allprotocols[i].congratulate() should get in connection with the client again, but nothing happens, when another client connects a lot of congratulations are thrown, it seems transport buffers. i tried a lot of things, with no better result, maybe i can get some hints to get a solution...
thx
stefan


-- 
Psssst! Schon vom neuen GMX MultiMessenger geh?rt? Der kann`s mit allen: http://www.gmx.net/de/go/multimessenger01



From sophismus at gmx.de  Tue May  5 07:08:12 2009
From: sophismus at gmx.de (Th. Born)
Date: Tue, 05 May 2009 13:08:12 +0200
Subject: [Twisted-Python] how do i do that
In-Reply-To: <20090505103928.201150@gmx.net>
References: <20090505103928.201150@gmx.net>
Message-ID: <20090505110812.88770@gmx.net>

> def startprove():
      while True:
>         r = proveday()

forgot while-loop...
-- 
Psssst! Schon vom neuen GMX MultiMessenger geh?rt? Der kann`s mit allen: http://www.gmx.net/de/go/multimessenger01



From sunshaoxuan at cdeledu.com  Tue May  5 07:33:57 2009
From: sunshaoxuan at cdeledu.com (=?GB2312?B?y+/J3ND5?=)
Date: Tue, 05 May 2009 19:33:57 +0800
Subject: [Twisted-Python] How can I change max simultaneously connection in
	twisted
Message-ID: <4A002425.2040609@cdeledu.com>

Hello all

I just wrote a small code to holding many http requests until server's
status change. Everything is fine but when simultaneously connection up
to 1k+, the server code didn't response to new connection. I've set
ulimit -n's value to 65535 and the code using epollreactor mode. Are
there have some limitations? How can I configure to support more
connections?
BTW: I use Python 2.4.3 on CentOS 5 64-bit. follow is the code, Thanks
for you help!

from twisted.internet import epollreactor
epollreactor.install()

from twisted.internet import reactor, defer, threads
from twisted.web import server, resource, client
from twisted.python import log
from time import sleep
import sys

def checkstatus_wait(laststatus):
timeout = 25
while timeout > 0:
if int(laststatus) < status:
return True
else:
timeout -= 1
sleep(1)
return False

class Simple(resource.Resource):
isLeaf = True
def render_GET(self, request):
if "cmd" in request.args:
cmd = request.args['cmd'][0]
else:
cmd = ""

if cmp(cmd,"listen") == 0:
if "laststatus" in request.args:
last = request.args['laststatus'][0]
if int(last) < status:
return "ret=1\nerrstring=need update\nlaststatus=%d\n\n" % status
else:
d = threads.deferToThread(checkstatus_wait, last)
d.addCallback(self.testReturn, request)
return server.NOT_DONE_YET
else:
return "ret=1\nerrstring=need update\nlaststatus=%d\n\n" % status
elif cmp(cmd,"updatestatus") == 0:
if status < 1000000:
status += 1
else:
status = 0
#client.getPage('http://211.157.0.47/videochat/listen?cmd=updatestatus')
return "ret=1\nerrstring=success update\n\n"
else:
return "ret=-1\nerrstring=wrong cmd\n\n"

def testReturn(self, ret, request):
if ret:
request.write("ret=1\nerrstring=need update\nlaststatus=%d\n\n" % status)
else:
request.write("ret=0\nerrstring=no need update\n\n")
request.finish()

status = 0

log.startLogging(sys.stdout)
site = server.Site(Simple())

reactor.suggestThreadPoolSize(5000)
reactor.listenTCP(8080, site)
reactor.run()

-- 


??? Yorgo Sun
 
China Distance Education Holdings Limited
18th Floor, XueYuan International Tower, No.1 ZhiChun Road, HaiDian District, Beijing, China 100083
Phone: +8610-8231-9999 Ext 708
*********************************************************** 
CONFIDENTIALITY CAUTION:
This message is intended only for the use of the individual or entity to whom it is addressed and contains information that is privileged and confidential. If you, the reader of this message, are not the intended recipient, you should not disseminate, distribute or copy this communication. If you have received this communication in error, please notify us immediately by return email and delete the original message.





From hackingkk at gmail.com  Tue May  5 07:35:57 2009
From: hackingkk at gmail.com (Krishnakant)
Date: Tue, 05 May 2009 17:05:57 +0530
Subject: [Twisted-Python] problem accessing numeric datatype of postgresql
 in a twisted application
In-Reply-To: <20090505110812.88770@gmx.net>
References: <20090505103928.201150@gmx.net>  <20090505110812.88770@gmx.net>
Message-ID: <1241523357.3410.26.camel@kk-laptop>

hello all,
I am facing a strange problem with twisted which is probably a known bug
and perhaps also solved.

I use twisted with psycopg2 to connect with a postgresql 8.3 database.

I have to use numeric datatype and get "can't serialise object " error
when I try to access data from a field of type numeric.


Is there some thing which I can do to solve this problem?

Note that when I use just psycopg2, I don't get any error, so the
problem is surely with the twisted app.  I believe I need to cast it to
some thing?

happy hacking.
Krishnakant.









From therve at free.fr  Tue May  5 07:53:31 2009
From: therve at free.fr (Thomas =?ISO-8859-1?Q?Herv=E9?=)
Date: Tue, 05 May 2009 13:53:31 +0200
Subject: [Twisted-Python] problem accessing numeric datatype of
 postgresql in a twisted application
In-Reply-To: <1241523357.3410.26.camel@kk-laptop>
References: <20090505103928.201150@gmx.net>  <20090505110812.88770@gmx.net>
	<1241523357.3410.26.camel@kk-laptop>
Message-ID: <1241524411.6561.2.camel@brainwave>

Le mardi 05 mai 2009 ? 17:05 +0530, Krishnakant a ?crit :
> hello all,
> I am facing a strange problem with twisted which is probably a known bug
> and perhaps also solved.
> 
> I use twisted with psycopg2 to connect with a postgresql 8.3 database.
> 
> I have to use numeric datatype and get "can't serialise object " error
> when I try to access data from a field of type numeric.
> 
> 
> Is there some thing which I can do to solve this problem?
> 
> Note that when I use just psycopg2, I don't get any error, so the
> problem is surely with the twisted app.  I believe I need to cast it to
> some thing?


We're missing some information to help you. What's doing your Twisted
application? By itself Twisted doesn't serialize anything, so you're
probably using pb or xmlrpc?

-- 
Thomas




From sunshaoxuan at cdeledu.com  Tue May  5 08:22:22 2009
From: sunshaoxuan at cdeledu.com (=?GB2312?B?y+/J3ND5?=)
Date: Tue, 05 May 2009 20:22:22 +0800
Subject: [Twisted-Python] How can I change max simultaneously connection
 in	twisted
In-Reply-To: <4A002425.2040609@cdeledu.com>
References: <4A002425.2040609@cdeledu.com>
Message-ID: <4A002F7E.2010608@cdeledu.com>

??? ??:
> Hello all
>
> I just wrote a small code to holding many http requests until server's
> status change. Everything is fine but when simultaneously connection up
> to 1k+, the server code didn't response to new connection. I've set
> ulimit -n's value to 65535 and the code using epollreactor mode. Are
> there have some limitations? How can I configure to support more
> connections?
> BTW: I use Python 2.4.3 on CentOS 5 64-bit. follow is the code, Thanks
> for you help!
>
> from twisted.internet import epollreactor
> epollreactor.install()
>
> from twisted.internet import reactor, defer, threads
> from twisted.web import server, resource, client
> from twisted.python import log
> from time import sleep
> import sys
>
> def checkstatus_wait(laststatus):
> timeout = 25
> while timeout > 0:
> if int(laststatus) < status:
> return True
> else:
> timeout -= 1
> sleep(1)
> return False
>
> class Simple(resource.Resource):
> isLeaf = True
> def render_GET(self, request):
> if "cmd" in request.args:
> cmd = request.args['cmd'][0]
> else:
> cmd = ""
>
> if cmp(cmd,"listen") == 0:
> if "laststatus" in request.args:
> last = request.args['laststatus'][0]
> if int(last) < status:
> return "ret=1\nerrstring=need update\nlaststatus=%d\n\n" % status
> else:
> d = threads.deferToThread(checkstatus_wait, last)
> d.addCallback(self.testReturn, request)
> return server.NOT_DONE_YET
> else:
> return "ret=1\nerrstring=need update\nlaststatus=%d\n\n" % status
> elif cmp(cmd,"updatestatus") == 0:
> if status < 1000000:
> status += 1
> else:
> status = 0
> #client.getPage('http://211.157.0.47/videochat/listen?cmd=updatestatus')
> return "ret=1\nerrstring=success update\n\n"
> else:
> return "ret=-1\nerrstring=wrong cmd\n\n"
>
> def testReturn(self, ret, request):
> if ret:
> request.write("ret=1\nerrstring=need update\nlaststatus=%d\n\n" % status)
> else:
> request.write("ret=0\nerrstring=no need update\n\n")
> request.finish()
>
> status = 0
>
> log.startLogging(sys.stdout)
> site = server.Site(Simple())
>
> reactor.suggestThreadPoolSize(5000)
> reactor.listenTCP(8080, site)
> reactor.run()
>
>   
I've found out how to solve the problem!
I've changed python from 2.4 to 2.5, the problem has gone. It's a bug in
twisted?

-- 


??? Yorgo Sun
 
China Distance Education Holdings Limited
18th Floor, XueYuan International Tower, No.1 ZhiChun Road, HaiDian District, Beijing, China 100083
Phone: +8610-8231-9999 Ext 708
*********************************************************** 
CONFIDENTIALITY CAUTION:
This message is intended only for the use of the individual or entity to whom it is addressed and contains information that is privileged and confidential. If you, the reader of this message, are not the intended recipient, you should not disseminate, distribute or copy this communication. If you have received this communication in error, please notify us immediately by return email and delete the original message.





From exarkun at divmod.com  Tue May  5 08:27:17 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 5 May 2009 08:27:17 -0400
Subject: [Twisted-Python] How can I change max simultaneously connection
 in	twisted
In-Reply-To: <4A002F7E.2010608@cdeledu.com>
Message-ID: <20090505122717.21531.328191389.divmod.quotient.471@henry.divmod.com>

On Tue, 05 May 2009 20:22:22 +0800, ??? <sunshaoxuan at cdeledu.com> wrote:
>??? ??:
>> [snip]
>I've found out how to solve the problem!
>I've changed python from 2.4 to 2.5, the problem has gone. It's a bug in
>twisted?

No, a bug in Python.

http://mail.python.org/pipermail/python-bugs-list/2006-June/033701.html

Jean-Paul



From therve at free.fr  Tue May  5 08:42:16 2009
From: therve at free.fr (Thomas =?ISO-8859-1?Q?Herv=E9?=)
Date: Tue, 05 May 2009 14:42:16 +0200
Subject: [Twisted-Python] How can I change max simultaneously connection
 in twisted
In-Reply-To: <4A002425.2040609@cdeledu.com>
References: <4A002425.2040609@cdeledu.com>
Message-ID: <1241527336.6561.5.camel@brainwave>

Le mardi 05 mai 2009 ? 19:33 +0800, ??? a ?crit :
> Hello all
> 
> I just wrote a small code to holding many http requests until server's
> status change. Everything is fine but when simultaneously connection up
> to 1k+, the server code didn't response to new connection. I've set
> ulimit -n's value to 65535 and the code using epollreactor mode. Are
> there have some limitations? How can I configure to support more
> connections?
> BTW: I use Python 2.4.3 on CentOS 5 64-bit. follow is the code, Thanks
> for you help!

This is known bug of Python 2.4.3. As far as I know it's only present in
this version (not 2.4.2 or 2.4.4, or any 2.5). Reported here:
http://bugs.python.org/issue1494314.

-- 
Thomas




From hackingkk at gmail.com  Tue May  5 09:10:29 2009
From: hackingkk at gmail.com (Krishnakant)
Date: Tue, 05 May 2009 18:40:29 +0530
Subject: [Twisted-Python] problem accessing numeric datatype of
 postgresql in a twisted application
In-Reply-To: <1241524411.6561.2.camel@brainwave>
References: <20090505103928.201150@gmx.net>  <20090505110812.88770@gmx.net>
	<1241523357.3410.26.camel@kk-laptop>
	<1241524411.6561.2.camel@brainwave>
Message-ID: <1241529029.4410.3.camel@kk-laptop>

On Tue, 2009-05-05 at 13:53 +0200, Thomas Herv? wrote:
> We're missing some information to help you. What's doing your Twisted
> application? By itself Twisted doesn't serialize anything, so you're
> probably using pb or xmlrpc?
> 
Yes, I am using xmlrpc in my twisted server.
the server sends queries to a postgresql database.  and there are
situations where data from a numeric datatype is selected and returned
to the calling xmlrpc function.
such as xmlrpc_getVender(vendercode) ...

When a field with datatype numeric is involved my xmlrpc server
application says "can't serialise object ".

would this information be sufficient?

happy ahcking.
Krishnakant.





From exarkun at divmod.com  Tue May  5 09:14:18 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 5 May 2009 09:14:18 -0400
Subject: [Twisted-Python] problem accessing numeric datatype of
 postgresql in a twisted application
In-Reply-To: <1241529029.4410.3.camel@kk-laptop>
Message-ID: <20090505131418.21531.1692371745.divmod.quotient.480@henry.divmod.com>

On Tue, 05 May 2009 18:40:29 +0530, Krishnakant <hackingkk at gmail.com> wrote:
>On Tue, 2009-05-05 at 13:53 +0200, Thomas Herv? wrote:
>> We're missing some information to help you. What's doing your Twisted
>> application? By itself Twisted doesn't serialize anything, so you're
>> probably using pb or xmlrpc?
>>
>Yes, I am using xmlrpc in my twisted server.
>the server sends queries to a postgresql database.  and there are
>situations where data from a numeric datatype is selected and returned
>to the calling xmlrpc function.
>such as xmlrpc_getVender(vendercode) ...
>
>When a field with datatype numeric is involved my xmlrpc server
>application says "can't serialise object ".

It sounds like your database API is giving you objects of a type which is
not supported by XML-RPC.  Twisted's XML-RPC server is based on the standard
xmlrpclib module, which can only serialize simple types - int, str, etc.  If
you have a custom pgsql-specific numeric type, you need to convert it before
giving it back to the XML-RPC code.

Jean-Paul



From andrewfr_ice at yahoo.com  Tue May  5 09:42:48 2009
From: andrewfr_ice at yahoo.com (andrewfr_ice at yahoo.com)
Date: Tue, 5 May 2009 06:42:48 -0700 (PDT)
Subject: [Twisted-Python] RTFM about custom reactors
Message-ID: <870344.22558.qm@web34201.mail.mud.yahoo.com>


Message: 3
Date: Mon, 4 May 2009 02:15:25 -0400
From: Mohamed Lrhazi <lrhazi at gmail.com>
Subject: [Twisted-Python] RTFM about custom reactors
To: twisted-python at twistedmatrix.com
Message-ID:
? ? <c4ab18df0905032315m4f0b3f85vf900adddd7557000 at mail.gmail.com>
Content-Type: text/plain; charset=ISO-8859-1

Hi Mohamed:

>I was wondering if someone could point me in the right direction....

>I am attempting to connect a proprietary network OS plugin system to
>Python, to allow for writing traffic handling plugins in Python, and
>was wondering what it would take to connect such a system into
>Twisted, thus allowing the writing of normal twisted apps on top....

>Is it matter of learning and writing a custom reactor? My current
>understanding is that the reactor is what detects and dispatches
>events... but does it also dispatch the "data", as in the traffic
>payload? what can I read to learn more?

I strongly suspect what you want to implement is a custom protocol rather than a custom reactor. Look at that first.

Based on past e-mail and examples, I believe the rule of thumb is one writes a custom reactor if you are porting to a new operating system/or taking advantage of some specific OS feature. There are exceptions like wxReactor that is to make Twisted interoperate with a windowing system but there functions that make the regular reactor interoperate with those systems.

Cheers,
Andrew
 







      



From dfarrell at mypublisher.com  Tue May  5 09:48:25 2009
From: dfarrell at mypublisher.com (Doug Farrell)
Date: Tue, 5 May 2009 09:48:25 -0400
Subject: [Twisted-Python] Question about deferreds
Message-ID: <318F79422ADC5041A93343721F84474D01C06609@exchange.mypublisher.local>

Hi all,

 

I consider myself a Twisted "newbie", so this might seem like a simple
couple of questions, hope you'll indulge me.

 

When I first began experimenting with deferreds I was breaking up tasks
into sequences of steps something like this:

 

d = Deferred()

d.succeed(True)

d.addCallback(step1)

d.addCallback(step2)

d.addCallback(step3)

etc.

 

When this runs I was under the mistaken impression that at the end of
each callback (step1, step2, step3, etc) the deferred would yield back
to the main loop (reactor) and allow other deferreds to run. Now I know
that the callback functions run sequentially one after another with no
break. So my first question is this: what is the advantage of this over
just combining the callback functions into one big function?, something
like this:

 

d = Deferred()

d.succeed(True)

d.addCallback(OneBigStep)

 

If step1(), step2() and step3() take a fair bit of time to complete,
doesn't this effectively block the reactor loop for the entire exection
of all the steps?

 

My second question is related to this; what is a recommended way to
create the cooperative state machine I'm thinking of using deferreds?
For example if I create something like this:

 

d1 = Deferred()

d1.succeed(True)

d1.addCallback(d1_step1)

d1.addCallback(d1_step2)

d1.addCallback(d1_step3)

 

d2 = Deferred()

d2.succeed(True)

d2.addCallback(d2_step1)

d2.addCallback(d2_step2)

d2.addCallback(d2_step3)

 

How do I get the execution of this to be this:

 

1)      d1_step1

2)      d2_step1

3)      d1_step2

4)      d2_step2

5)      d1_step3

6)      d2_step3

 

I want to have the state machines I create cooperatively 'multi-task',
yielding control back to the main loop at each state transition.

 

Thanks in advance for any help, guidance or references you can provide.
I really enjoy Twisted, I'm still working on getting the 'Zen' of it.

 

Doug

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090505/f4da5d28/attachment.htm 

From glyph at divmod.com  Tue May  5 15:31:50 2009
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 05 May 2009 19:31:50 -0000
Subject: [Twisted-Python] Question about deferreds
In-Reply-To: <318F79422ADC5041A93343721F84474D01C06609@exchange.mypublisher.local>
References: <318F79422ADC5041A93343721F84474D01C06609@exchange.mypublisher.local>
Message-ID: <20090505193150.12555.1342013280.divmod.xquotient.10497@weber.divmod.com>

On 01:48 pm, dfarrell at mypublisher.com wrote:
>Hi all,

>I consider myself a Twisted "newbie", so this might seem like a simple
>couple of questions, hope you'll indulge me.

I hope a simple couple of answers will suffice.  Thank you for your 
clearly-worded questions :).
>When I first began experimenting with deferreds I was breaking up tasks
>into sequences of steps something like this.
(snip)
>When this runs I was under the mistaken impression that at the end of
>each callback (step1, step2, step3, etc) the deferred would yield back
>to the main loop (reactor) and allow other deferreds to run. Now I know
>that the callback functions run sequentially one after another with no
>break. So my first question is this: what is the advantage of this over
>just combining the callback functions into one big function?, something
>like this:

>d = Deferred()
>
>d.succeed(True)
>
>d.addCallback(OneBigStep)

Deferreds are not about breaking your work up into steps to save time. 
They're about breaking it up so that different systems can deal with the 
same asynchronous event in their own way.

For example, let's say you're working on a REST client that deals with 
invoices.  The server gives you data at a particular URL and you want to 
convert it into an "Invoice" instance.

Twisted itself isn't going to have that OneBigStep callback that 
converts HTTP straight into invoices for you, so you've got something 
that gives back a Deferred that fires with a string, getPage.  Then 
maybe there's an intermediary layer that deals with parsing XML or JSON 
or whatever.  Then there's a layer that takes the JSON or DOM structure 
and converts it into an Invoice.  Finally you've got your actual 
application code that wants to get the Invoice and *do* something with 
that Invoice.

And of course your final "do something with that invoice" step might 
need data retrieved asynchronously from other places, so it might need 
other Deferreds and other callbacks as well.

If you do have step1, step2, and step3 defined entirely in a single 
function, then yes, they should be in the same function.
>If step1(), step2() and step3() take a fair bit of time to complete,
>doesn't this effectively block the reactor loop for the entire exection
>of all the steps?

Yep.  That's the idea.  If you have long-running tasks that need to be 
split up into multiple steps, there are other facilities, *not* Deferred 
callbacks, that you can use.  For example, this:

http://twistedmatrix.com/documents/8.2.0/api/twisted.internet.task.html#coiterate
>My second question is related to this; what is a recommended way to
>create the cooperative state machine I'm thinking of using deferreds?

(...)
>How do I get the execution of this to be this:

>1)      d1_step1
>2)      d2_step1
>3)      d1_step2
>4)      d2_step2
>5)      d1_step3
>6)      d2_step3

>I want to have the state machines I create cooperatively 'multi-task',
>yielding control back to the main loop at each state transition.

If you actually wanted to interleave Deferred callbacks like that it 
would be tricky.  But if you just want interleaved callbacks, use 
Cooperator as I mentioned above :).
>Thanks in advance for any help, guidance or references you can provide.
>I really enjoy Twisted, I'm still working on getting the 'Zen' of it.

Thanks!



From sunshaoxuan at cdeledu.com  Tue May  5 21:56:01 2009
From: sunshaoxuan at cdeledu.com (=?UTF-8?B?5a2Z57uN6L2p?=)
Date: Wed, 06 May 2009 09:56:01 +0800
Subject: [Twisted-Python] How can I change max simultaneously connection
 in twisted
In-Reply-To: <1241527336.6561.5.camel@brainwave>
References: <4A002425.2040609@cdeledu.com> <1241527336.6561.5.camel@brainwave>
Message-ID: <4A00EE31.7090107@cdeledu.com>

Thomas Herv? ??:
> Le mardi 05 mai 2009 ? 19:33 +0800, ??? a ?crit :
>   
>> Hello all
>>
>> I just wrote a small code to holding many http requests until server's
>> status change. Everything is fine but when simultaneously connection up
>> to 1k+, the server code didn't response to new connection. I've set
>> ulimit -n's value to 65535 and the code using epollreactor mode. Are
>> there have some limitations? How can I configure to support more
>> connections?
>> BTW: I use Python 2.4.3 on CentOS 5 64-bit. follow is the code, Thanks
>> for you help!
>>     
>
> This is known bug of Python 2.4.3. As far as I know it's only present in
> this version (not 2.4.2 or 2.4.4, or any 2.5). Reported here:
> http://bugs.python.org/issue1494314.
>
>   
Got it!, Thinks for your help.

-- 


??? Yorgo Sun
 
China Distance Education Holdings Limited
18th Floor, XueYuan International Tower, No.1 ZhiChun Road, HaiDian District, Beijing, China 100083
Phone: +8610-8231-9999 Ext 708
*********************************************************** 
CONFIDENTIALITY CAUTION:
This message is intended only for the use of the individual or entity to whom it is addressed and contains information that is privileged and confidential. If you, the reader of this message, are not the intended recipient, you should not disseminate, distribute or copy this communication. If you have received this communication in error, please notify us immediately by return email and delete the original message.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090506/4b1fb29e/attachment.htm 

From gjango.py at gmail.com  Thu May  7 05:50:12 2009
From: gjango.py at gmail.com (ganesh gunasekaran)
Date: Thu, 7 May 2009 15:20:12 +0530
Subject: [Twisted-Python] how to authenticate SMPT server in Twisted
	Framework
Message-ID: <a0445b00905070250m49d9ab5epccc7466040aa36aa@mail.gmail.com>

Hi gp,
I'm very new to Twisted Framework ,
I wrote a very simple  code to send mails concurrently, using SMTP mail
server
the code as below


from twisted.mail.smtp import sendmail
from twisted.internet import reactor
from twisted.python.log import err
import time

MAILSERVER = 'mail.xxx.com'
listTo = ['ganesh.xxx at gmail.com', 'xxjango.py at gmail.com', '
lovely_xxx at yahoo.co.in']
FROM = 'gxxxkaran at xxxx.com'
MSGBODY = "hi this is test mail"
a= time.time()
done = sendmail(MAILSERVER, FROM, listTo, MSGBODY ,senderDomainName=None,
port=25)
done.addErrback(err)
done.addCallback(lambda ignored: reactor.stop())
reactor.run()
print "Took %s seconds" %str(time.time()-a)


hence i'm not aware of how to authenticate my mail server in Twisted
Framework ,this code gives me error saying ,"Relay access denied"
I will be grateful  if someone forward me the right solution.
Thanks
guptha
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090507/77da82f3/attachment.htm 

From drew.smathers at gmail.com  Thu May  7 14:17:20 2009
From: drew.smathers at gmail.com (Drew Smathers)
Date: Thu, 7 May 2009 14:17:20 -0400
Subject: [Twisted-Python] how do i do that
In-Reply-To: <20090505103928.201150@gmx.net>
References: <20090505103928.201150@gmx.net>
Message-ID: <368574aa0905071117r26a50b12r6f62844929ec47cd@mail.gmail.com>

On Tue, May 5, 2009 at 6:39 AM,  <sophismus at gmx.de> wrote:
> hey,
> i'm quite new in python and twisted and did things wrong from the start now i have to reconsider my prog.
> first i thought of an easier example with almost the same functionality.
> functionality: client connects, sends info, all infos from all clients are concurrently processed, a special client with the right info at the right time gets a special msg
> i got this:
> it is thought that a client writes an int as birthday back...
>
> from twisted.internet import protocol, reactor, defer, threads
> days = []
> allprotocols = []
> class BServerProtocol(protocol.Protocol):
> ? ? ? ?birthday = 0
> ? ? ? ?def connectionMade(self):
> ? ? ? ? ? ? ? ?print "puh"
> ? ? ? ? ? ? ? ?global allprotocols
> ? ? ? ? ? ? ? ?allprotocols.append(self)
> ? ? ? ? ? ? ? ?print "allprotocols",allprotocols
> ? ? ? ?def congratulate(self):
> ? ? ? ? ? ? ? ?self.transport.write("congratulations")
> ? ? ? ? ? ? ? ?return 'done'
> ? ? ? ?def dataReceived(self,data):
> ? ? ? ? ? ? ? ?print data
> ? ? ? ? ? ? ? ?if int (data)>0:
> ? ? ? ? ? ? ? ? ? ? ? ?self.birthday = int(data)
> ? ? ? ? ? ? ? ? ? ? ? ?print "self.bday:",self.birthday
> ? ? ? ? ? ? ? ? ? ? ? ?global days
> ? ? ? ? ? ? ? ? ? ? ? ?days.append(int(data))
> ? ? ? ? ? ? ? ? ? ? ? ?self.transport.write("pff")
> # ? ? ? ? ? ? ? ? ? ? ? self.factory.deferred.callback("uiuiui+1")
> ? ? ? ? ? ? ? ?if data == "thanks":
> ? ? ? ? ? ? ? ? ? ? ? ?self.write("well done")
> class BServerFactory(protocol.ServerFactory):
> ? ? ? ?protocol = BServerProtocol
> ? ? ? ?def __init__(self):
> ? ? ? ? ? ? ? ?self.deferred = defer.Deferred()
> def proveday():
> ? ? ? ?day = 5 #of may, think of this date as new decided
> ? ? ? ? ? ? ? ?#from a white rabbit every time it runs
> ? ? ? ?ret = -1
> ? ? ? ?found = False
> ? ? ? ?i = 0
> ? ? ? ?length = len(allprotocols)
> ? ? ? ?while (i<length and found == False):
> ? ? ? ? ? ? ? ?birthday = allprotocols[i].birthday
> ? ? ? ? ? ? ? ?print "birthday:",birthday
> ? ? ? ? ? ? ? ?if birthday == day:
> ? ? ? ? ? ? ? ? ? ? ? ?print 'bday==day'
> ? ? ? ? ? ? ? ? ? ? ? ?print "allprotocols[i]:",allprotocols[i]
> ? ? ? ? ? ? ? ? ? ? ? ?found =True
> ? ? ? ? ? ? ? ? ? ? ? ?ret = i
> ? ? ? ? ? ? ? ? ? ? ? ?allprotocols[i].congratulate()
> ? ? ? ? ? ? ? ?i+=1
> ? ? ? ?return ret
> def startprove():
> ? ? ? ?r = proveday()
>
> bsf = BServerFactory()
> #bsf.deferred.addCallback(registerSuccess)
> reactor.listenTCP(55555,bsf)
> reactor.callInThread(startprove)
> #commands =[(startprove,[],{})]
> #commands.append(startcong)#,[],{})
> #threads.callMultipleInThread(commands)
> reactor.run()
> _______________________
> allprotocols[i].congratulate() should get in connection with the client again, but nothing happens, when another client connects a lot of congratulations are thrown, it seems transport buffers. i tried a lot of things, with no better result, maybe i can get some hints to get a solution...
> thx
> stefan
>
>

One problem with the above code is you're calling transport.write from a thread:

http://twistedmatrix.com/trac/wiki/FrequentlyAskedQuestions#WhydoesittakealongtimefordataIsendwithtransport.writetoarriveattheothersideoftheconnection

The above code could also be improved by not using a thread and
instead scheduling a call to check birthdays:

http://twistedmatrix.com/documents/current/api/twisted.internet.task.LoopingCall.html

It would also make sense to attach such functionality to the Factory
rather than relying global state - maintain a list of protocols on the
Factory instance.

-Drew



From dfarrell at mypublisher.com  Thu May  7 16:11:26 2009
From: dfarrell at mypublisher.com (Doug Farrell)
Date: Thu, 7 May 2009 16:11:26 -0400
Subject: [Twisted-Python] Question about deferreds
Message-ID: <318F79422ADC5041A93343721F84474D01C9ED21@exchange.mypublisher.local>

Glyph,

 

Thank you very much for your response, it has provided me with material
that will help me take a big step in my Twisted education.

> 

> Deferreds are not about breaking your work up into steps to save time.

> They're about breaking it up so that different systems can deal with

> the

> same asynchronous event in their own way.

> 

> For example, let's say you're working on a REST client that deals with

> invoices.  The server gives you data at a particular URL and you want

> to

> convert it into an "Invoice" instance.

> 

(snip)

This whole section of your answer really helped me get a handle on a
deferred, well beyond the "promise that a function will have a result
later". J I was thinking kind of monolithically about how to use
deferreds, in that if I was writing everything why would I break it up?
However, the real case is more along the lines of what you said in your
answer; more than likely the eventual total behavior is made up of a
string of smaller behaviors 'glued' together by the deferred. And these
other behaviors would be code generated by others in my group or
libraries.

(snip)

> 

> If you actually wanted to interleave Deferred callbacks like that it

> would be tricky.  But if you just want interleaved callbacks, use

> Cooperator as I mentioned above :).

> 

This reference to the Cooperator really helped me out, I just didn't
know what to look for in the Twisted system to do what I wanted with
co-operating state machines. I did build a little prototype using
deferreds that does provide the behavior I was after, but it was awkward
at best to set up. I felt like there should be something more elegant,
and the Cooperator looks like exactly what I need. I'm going to try and
set up a prototype to experiment with so I understand it more.

 

Again, thanks for your reply and help!

Doug

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090507/006242b6/attachment.htm 

From rlotun at gmail.com  Thu May  7 18:06:04 2009
From: rlotun at gmail.com (Reza Lotun)
Date: Thu, 7 May 2009 23:06:04 +0100
Subject: [Twisted-Python] Question about deferreds
In-Reply-To: <318F79422ADC5041A93343721F84474D01C9ED21@exchange.mypublisher.local>
References: <318F79422ADC5041A93343721F84474D01C9ED21@exchange.mypublisher.local>
Message-ID: <95bb10690905071506h321e0ba9s9ad17187456645e7@mail.gmail.com>

On Thu, May 7, 2009 at 9:11 PM, Doug Farrell <dfarrell at mypublisher.com> wrote:
> This reference to the Cooperator really helped me out, I just didn?t know
> what to look for in the Twisted system to do what I wanted with co-operating
> state machines. I did build a little prototype using deferreds that does
> provide the behavior I was after, but it was awkward at best to set up. I
> felt like there should be something more elegant, and the Cooperator looks
> like exactly what I need. I?m going to try and set up a prototype to
> experiment with so I understand it more.

Also, you might find the following useful in trying to understand task
Cooperator:
http://oubiwann.blogspot.com/2008/06/async-batching-with-twisted-walkthrough.html

It really helped me out when I was learning how to use it.

Good luck,
Reza

-- 
Reza Lotun
+44 (0)7521 310 763
rlotun at gmail.com



From exarkun at divmod.com  Fri May  8 07:44:22 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 8 May 2009 07:44:22 -0400
Subject: [Twisted-Python] how to authenticate SMPT server in Twisted
 Framework
In-Reply-To: <a0445b00905070250m49d9ab5epccc7466040aa36aa@mail.gmail.com>
Message-ID: <20090508114422.21531.2040776500.divmod.quotient.18711@henry.divmod.com>

On Thu, 7 May 2009 15:20:12 +0530, ganesh gunasekaran <gjango.py at gmail.com> wrote:
>Hi gp,
>I'm very new to Twisted Framework ,
>I wrote a very simple  code to send mails concurrently, using SMTP mail
>server
>the code as below
>
>
>from twisted.mail.smtp import sendmail
>from twisted.internet import reactor
>from twisted.python.log import err
>import time
>
>MAILSERVER = 'mail.xxx.com'
>listTo = ['ganesh.xxx at gmail.com', 'xxjango.py at gmail.com', '
>lovely_xxx at yahoo.co.in']
>FROM = 'gxxxkaran at xxxx.com'
>MSGBODY = "hi this is test mail"
>a= time.time()
>done = sendmail(MAILSERVER, FROM, listTo, MSGBODY ,senderDomainName=None,
>port=25)
>done.addErrback(err)
>done.addCallback(lambda ignored: reactor.stop())
>reactor.run()
>print "Took %s seconds" %str(time.time()-a)
>
>
>hence i'm not aware of how to authenticate my mail server in Twisted
>Framework ,this code gives me error saying ,"Relay access denied"
>I will be grateful  if someone forward me the right solution.

`sendmail? can't be used to authenticate.  For that, you need to use
`ESMTPSenderFactory`.  It takes many of the same arguments as `sendmail?,
plus a `username? and `password? and some options related to security.

If you haven't worked with factories before, the client howto might be
helpful:

http://twistedmatrix.com/projects/core/documentation/howto/clients.html

Jean-Paul



From rlotun at gmail.com  Fri May  8 08:06:42 2009
From: rlotun at gmail.com (Reza Lotun)
Date: Fri, 8 May 2009 13:06:42 +0100
Subject: [Twisted-Python] Twisted HTTP 1.1 Web Client
Message-ID: <95bb10690905080506q239a8079rf18c2783daed341@mail.gmail.com>

Hi,

Just curious, but what's the roadmap for the new web client
(http://twistedmatrix.com/trac/ticket/886)? As I understand it only
the finalization of a public api remains?

Cheers,
Reza

-- 
Reza Lotun
+44 (0)7521 310 763
rlotun at gmail.com



From exarkun at divmod.com  Fri May  8 08:20:10 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 8 May 2009 08:20:10 -0400
Subject: [Twisted-Python] Twisted HTTP 1.1 Web Client
In-Reply-To: <95bb10690905080506q239a8079rf18c2783daed341@mail.gmail.com>
Message-ID: <20090508122010.21531.574097152.divmod.quotient.18717@henry.divmod.com>

On Fri, 8 May 2009 13:06:42 +0100, Reza Lotun <rlotun at gmail.com> wrote:
>Hi,
>
>Just curious, but what's the roadmap for the new web client
>(http://twistedmatrix.com/trac/ticket/886)? As I understand it only
>the finalization of a public api remains?

That, as well as the implementation of higher-level APIs on top of it.
For example, APIs which automatically handle redirects for you, or cookies,
timeouts, caching, etc.

Chris did a little work towards timeout support at the last sprint.  The
idea is that at least some of these higher-level APIs should be implemented
before we declare the low-level interface complete and public.

Jean-Paul



From exarkun at twistedmatrix.com  Sun May 10 00:05:17 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 10 May 2009 04:05:17 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1241928317.08.420091996@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090510/63171c5d/attachment.htm 

From therve at free.fr  Sun May 10 05:17:28 2009
From: therve at free.fr (Thomas =?ISO-8859-1?Q?Herv=E9?=)
Date: Sun, 10 May 2009 11:17:28 +0200
Subject: [Twisted-Python] Announcing Twotp 0.6
Message-ID: <1241947048.6438.20.camel@brainwave>

Hello all!

I'm pleased to announce version 0.6 of Twotp [1].

What is Twotp? It's an implementation of the Erlang protocol using
Python and Twisted, similar with the built-in Jinterface [2] or
py_interface [3].

After some hibernating time, I've focused on implementing links and
monitoring of Erlang processes. Now it's even more complete than
Jinterface, which doesn't implement monitoring.

After implementing the lower layer, it made me realize that the current
API was all but convenient. So I built a complete new API simplifying
the whole task, around the concept of processes. It's now much easier to
implement real process communication with Erlang, instead of using
simple RPC. I've reworked the examples and the documentation, I hope
it's enough for helping people to start using it!

You can download it here: http://pypi.python.org/pypi/twotp

There is also a PPA for Ubuntu wih latest version:
https://launchpad.net/~twotp/+archive/ppa

Note: this is a backward-incompatible version. Changing to the new API
should be fairly easy, but I'd be glad to help anyone encountering
problems.

Please report bugs and successes! You can write here or on Freenode in
#twisted.

Thanks!

[1]: http://launchpad.net/twotp

[2]: http://erlang.org/doc/apps/jinterface/index.html

[3]: http://www.lysator.liu.se/~tab/erlang/py_interface/

-- 
Thomas




From gabriel.rossetti at arimaz.com  Sun May 10 06:32:40 2009
From: gabriel.rossetti at arimaz.com (Gabriel Rossetti)
Date: Sun, 10 May 2009 12:32:40 +0200
Subject: [Twisted-Python] Twisted plugins and py2exe
In-Reply-To: <20090224195505.12555.1349207332.divmod.xquotient.5060@weber.divmod.com>
References: <49A421C2.4010600@arimaz.com>	<20090224165527.12853.1836778921.divmod.quotient.13499@henry.divmod.com>
	<20090224195505.12555.1349207332.divmod.xquotient.5060@weber.divmod.com>
Message-ID: <4A06AD48.4050602@arimaz.com>

glyph at divmod.com wrote:
>
> On 04:55 pm, exarkun at divmod.com wrote:
>> Tue, 24 Feb 2009 17:35:14 +0100, Gabriel Rossetti 
>> <gabriel.rossetti at arimaz.com> wrote:
>>> Jean-Paul Calderone wrote:
>>>> On Tue, 24 Feb 2009 11:49:13 +0100, Gabriel Rossetti 
>>>> <gabriel.rossetti at arimaz.com> wrote:
>
>>>>> Has anyone ever had this problem while using plugins with Twisted 
>>>>> and py2exe?
>
>>>> No, but from the traceback, it seems fairly clear that the plugin 
>>>> system
>>>> is trying to write a plugin cache file into your py2exe-created zip 
>>>> file
>>>> of Python source.
>
>>> Ok, I could do this, teach it abot zip files and have it update it's 
>>> cache in the zip file, but in certain cases, like mine actually, if 
>>> you tell py2exe to include the zip file in the exec, then it won't 
>>> work. How about adding the possibility to specify where the cache is 
>>> to be written?
>
> This is almost certainly the wrong solution to your problem, but if 
> you disagree with this assessment please feel free to update this ticket:
>
>    http://twistedmatrix.com/trac/ticket/3348
>
> Several people have requested this feature and nobody has really made 
> a good case for why it should be implemented.  (I don't think it 
> should be, I just think we should record all the reasons why not on 
> that ticket :)).
>> Updating the cache in the zip file probably isn't the right thing to do.
>> Just skipping cache generation would probably make more sense.  It 
>> should
>> be easier to implement, anyway.
>
> Skipping the cache generation is like skipping bytecode compilation. 
> It's not a catastrophic error, everything should still work, but it 
> will result in more unnecessary work being done at runtime.
>
> IMHO the right solution in this particular case would be to get py2exe 
> (or some part of the setup process in py2exe, which I believe is 
> implemented using distutils) to generate a cache file as part of the 
> built zip file.  Presumably .pyc files are also created and included 
> in the zip file.  The appropriate procedure for forcibly generating 
> the cache is described here:
>
> http://twistedmatrix.com/projects/core/documentation/howto/plugin.html#auto3 
>
>
> A cache generated in this manner will be suitable for packaging into a 
> zip file.
Sorry for reviving this old thread now, but I found a way of doing it 
with almost no modifications to the way things are currently done. I 
just made twisted.python.zippath.ZipPath.open have the same signature as 
twisted.python.filepath.FilePath (see my patch) and then added the 
following to my py2exe setup file:

from py2exe.build_exe import py2exe as BuildExe
from twisted.plugin import getCache

class PluginCacheCollector(BuildExe):
    def copy_extensions(self, extensions):
        BuildExe.copy_extensions(self, extensions)
       
        # Import the plugin packages
        from mypackage.plugins.io import myioplugins
        from mypackage.plugins.misc import myotherplugins
        mods = [ myioplugins, myotherplugins ]
       
        for m in mods:
           
            # Pre-gen the plugin cache
            getCache(m)
           
            # Build the cache file's path in the build collect dir and 
copy the cache files there
            f = os.path.join(*(m.__name__.split('.') + ["dropin.cache"]))
            full = os.path.join(self.collect_dir, f)
            self.copy_file(f, full)
           
            # Add the cache file path to the list of files to be added 
to the py2exe zip file
            self.compiled_files.append(f)

and add this 'cmdclass={"py2exe": PluginCacheCollector}' to setup() like so:

opts = {
    "py2exe": {
        "packages": [ "mypackage" ],
        "includes": [ "myincludes" ],
        "excludes": [ "curses", "Tkinter", "Tkconstants", "doctest", 
"pdb", "unittest", "difflib", "pyreadline", "optparse", "calendar", 
"tcl", "pywin.debugger", "pywin.debugger.dbgcon",
                      "pywin.dialogs", "_gtkagg", "_tkagg" ],
        "dll_excludes": ["libgdk-win32-2.0-0.dll", 
"libgobject-2.0-0.dll", "tcl84.dll", "tk84.dll"],
        "dist_dir": "dist",
        "optimize": 2, # Use -OO when building (e.g. python -OO setup.py 
py2exe)
        "bundle_files": 1,
        "compressed": True,
    }
}

setup(  
    console=['mymain.py'],
    zipfile="library.zip",
    options=opts,
    data_files=[("icons", glob.glob("icons/*.*"))],
    cmdclass={"py2exe": PluginCacheCollector}, # <----------- add this
    )

And that does the trick, it will generate the cache files and they will 
be copied to the collect dir, then they will get added to the zip. What 
do you think?

Gabriel
>
> Another part of the solution would be to implement setContent on 
> ZipPath.  However, there are still likely to be erroneous deployment 
> scenarios where the ZipPath is not available for writing, just as an 
> installation path is frequently not available for writing now.  So an 
> initial implementation of setContent on ZipPath could just raise the 
> same exception that an unwritable FilePath would, for consistency in 
> error handling.
>
> For the issue of quieting the mostly-harmless error message now 
> produced by a failure to write the cache file, see here:
>
>    http://twistedmatrix.com/trac/ticket/2409
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From gabriel.rossetti at arimaz.com  Sun May 10 06:42:49 2009
From: gabriel.rossetti at arimaz.com (Gabriel Rossetti)
Date: Sun, 10 May 2009 12:42:49 +0200
Subject: [Twisted-Python] Twisted plugins and py2exe
In-Reply-To: <20090224195505.12555.1349207332.divmod.xquotient.5060@weber.divmod.com>
References: <49A421C2.4010600@arimaz.com>	<20090224165527.12853.1836778921.divmod.quotient.13499@henry.divmod.com>
	<20090224195505.12555.1349207332.divmod.xquotient.5060@weber.divmod.com>
Message-ID: <4A06AFA9.6070600@arimaz.com>

it would help if I attatched the patch :-)

glyph at divmod.com wrote:
>
> On 04:55 pm, exarkun at divmod.com wrote:
>> Tue, 24 Feb 2009 17:35:14 +0100, Gabriel Rossetti 
>> <gabriel.rossetti at arimaz.com> wrote:
>>> Jean-Paul Calderone wrote:
>>>> On Tue, 24 Feb 2009 11:49:13 +0100, Gabriel Rossetti 
>>>> <gabriel.rossetti at arimaz.com> wrote:
>
>>>>> Has anyone ever had this problem while using plugins with Twisted 
>>>>> and py2exe?
>
>>>> No, but from the traceback, it seems fairly clear that the plugin 
>>>> system
>>>> is trying to write a plugin cache file into your py2exe-created zip 
>>>> file
>>>> of Python source.
>
>>> Ok, I could do this, teach it abot zip files and have it update it's 
>>> cache in the zip file, but in certain cases, like mine actually, if 
>>> you tell py2exe to include the zip file in the exec, then it won't 
>>> work. How about adding the possibility to specify where the cache is 
>>> to be written?
>
> This is almost certainly the wrong solution to your problem, but if 
> you disagree with this assessment please feel free to update this ticket:
>
>    http://twistedmatrix.com/trac/ticket/3348
>
> Several people have requested this feature and nobody has really made 
> a good case for why it should be implemented.  (I don't think it 
> should be, I just think we should record all the reasons why not on 
> that ticket :)).
>> Updating the cache in the zip file probably isn't the right thing to do.
>> Just skipping cache generation would probably make more sense.  It 
>> should
>> be easier to implement, anyway.
>
> Skipping the cache generation is like skipping bytecode compilation. 
> It's not a catastrophic error, everything should still work, but it 
> will result in more unnecessary work being done at runtime.
>
> IMHO the right solution in this particular case would be to get py2exe 
> (or some part of the setup process in py2exe, which I believe is 
> implemented using distutils) to generate a cache file as part of the 
> built zip file.  Presumably .pyc files are also created and included 
> in the zip file.  The appropriate procedure for forcibly generating 
> the cache is described here:
>
> http://twistedmatrix.com/projects/core/documentation/howto/plugin.html#auto3 
>
>
> A cache generated in this manner will be suitable for packaging into a 
> zip file.
Sorry for reviving this old thread now, but I found a way of doing it
with almost no modifications to the way things are currently done. I
just made twisted.python.zippath.ZipPath.open have the same signature as
twisted.python.filepath.FilePath (see my patch) and then added the
following to my py2exe setup file:

from py2exe.build_exe import py2exe as BuildExe
from twisted.plugin import getCache

class PluginCacheCollector(BuildExe):
    def copy_extensions(self, extensions):
        BuildExe.copy_extensions(self, extensions)

        # Import the plugin packages
        from mypackage.plugins.io import myioplugins
        from mypackage.plugins.misc import myotherplugins
        mods = [ myioplugins, myotherplugins ]

        for m in mods:

            # Pre-gen the plugin cache
            getCache(m)

            # Build the cache file's path in the build collect dir and
copy the cache files there
            f = os.path.join(*(m.__name__.split('.') + ["dropin.cache"]))
            full = os.path.join(self.collect_dir, f)
            self.copy_file(f, full)

            # Add the cache file path to the list of files to be added
to the py2exe zip file
            self.compiled_files.append(f)

and add this 'cmdclass={"py2exe": PluginCacheCollector}' to setup() like so:

opts = {
    "py2exe": {
        "packages": [ "mypackage" ],
        "includes": [ "myincludes" ],
        "excludes": [ "curses", "Tkinter", "Tkconstants", "doctest",
"pdb", "unittest", "difflib", "pyreadline", "optparse", "calendar",
"tcl", "pywin.debugger", "pywin.debugger.dbgcon",
                      "pywin.dialogs", "_gtkagg", "_tkagg" ],
        "dll_excludes": ["libgdk-win32-2.0-0.dll",
"libgobject-2.0-0.dll", "tcl84.dll", "tk84.dll"],
        "dist_dir": "dist",
        "optimize": 2, # Use -OO when building (e.g. python -OO setup.py
py2exe)
        "bundle_files": 1,
        "compressed": True,
    }
}

setup(
    console=['mymain.py'],
    zipfile="library.zip",
    options=opts,
    data_files=[("icons", glob.glob("icons/*.*"))],
    cmdclass={"py2exe": PluginCacheCollector}, # <----------- add this
    )

And that does the trick, it will generate the cache files and they will
be copied to the collect dir, then they will get added to the zip. What
do you think?

Gabriel
>
> Another part of the solution would be to implement setContent on 
> ZipPath.  However, there are still likely to be erroneous deployment 
> scenarios where the ZipPath is not available for writing, just as an 
> installation path is frequently not available for writing now.  So an 
> initial implementation of setContent on ZipPath could just raise the 
> same exception that an unwritable FilePath would, for consistency in 
> error handling.
>
> For the issue of quieting the mostly-harmless error message now 
> produced by a failure to write the cache file, see here:
>
>    http://twistedmatrix.com/trac/ticket/2409
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: zippath.py.patch
Type: text/x-diff
Size: 358 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20090510/e480afba/attachment.patch 

From luigiandcosolutions at gmail.com  Mon May 11 06:24:54 2009
From: luigiandcosolutions at gmail.com (Luigi Conte)
Date: Mon, 11 May 2009 12:24:54 +0200
Subject: [Twisted-Python] help using deferred
Message-ID: <9cce290a0905110324p241c236dxb2aecb077a7b51a9@mail.gmail.com>

Hi people,
I'm luigi and I'm a student at Politecnico di Milano, Italy. I'm working for
a graduate thesis on a framework called usher. It provides an API to do
connect e command operations. It manages all those calls with a defferred
object (i think). In fact when I call the connect it returns me a defferred
object. All that i want to know is how to call the other operations with
this object and how to know when an operation is completely done.
The procedure I call is simple: connect method, start method many times,
stop method, disconnect method. I want to call these methods sequentially
because I have to fallow a list of commands so I have to be sure the
previous methods are already been invoked. I'll post the main methods hoping
someone could help me in how to add the method in the deferred and how to
know when it is completely invoked.
# Connect
def connect(self, ctrl_host, ctrl_port, user, passwd):
        """Connect to an Usher control server.

        @param ctrl_host: fqdn where Usher controller is running
        @type ctrl_host: string
        @param ctrl_port: port number Usher controller is listening on
        @type ctrl_port: int
        @param user: username of user connecting to Usher controller
        @type user: string
        @param passwd: password of user connecting to Usher controller
        @type passwd: string

        return: Deferred which returns and L{UsherResult}
        rtype: twisted.internet.defer.Deferred
        """
        # serialize access to connect
        if not self.connect_lock.acquire(False):
            raise UsherEx, "Connection Pending"

        if self.factory:
            self.disconnect()

        # reset vms
        self.vms = {}
        # reset passwd to None until we're connected
        self.passwd = None
        self.factory = APIFactory()
        self.factory.api = self
        # connect to server
        reactor.connectSSL(ctrl_host, ctrl_port, self.factory,
            ssl.ClientContextFactory())
        d = self.factory.login(credentials.UsernamePassword(user, passwd),
            client=self)
        d.addErrback(self._handle_err, misc.whoami())
        d.addCallback(self._connected_to_ctrl, ctrl_host, ctrl_port, user,
            passwd)
        return d

# start
def start(self,
              cluster=None,
              prefix='',
              vmlist=None,
              count=None,
              first=None,
              last=None,
              dregex=None,
              dlist=None,
              dryrun=False,
              eid=None,
              **kw):
        """Start a VM or set of VMs

        @param cluster: Name of cluster to which VMs should belong
        @type cluster: string
        @param prefix: prefix to prepend to VM names
        @type prefix: string
        @param vmlist: list of strings of VMs to start
        @type vmlist: list of strings
        @param count: Number of consecutive VMs to start
        @type count: int
        @param first: Lowest number of VM to start
        @type first: int
        @param last: Highest number of VM to start
        @type last: int
        @param dregex: regular expression to match against destination LNM
            names
        @type dregex: list of strings
        @param dlist: list of strings to match against destination LNM names
        @type dlist: list of strings
        @param dryrun: Show what would have happened if the command had been
                run without the dryrun command (at the instant that the
dryrun
                command was run of course)
        @type dryrun: bool
        @param eid: mechanism for admin user to be able to specify an
alternate
                username for forming suffix for regex
        @type eid: string
        @param kw: Extra arguments passed to controller for use by plugins
or
            LNM.  Any keywords starting with 'vm_' are added to VM's uargs
            parameter.  Note, the controller actually checks for two kw
            arguments: ram and ip_addrs.  Though these are, strictly
speaking,
            VM parameters, they're considered important enough that the
            controller checks for them.
        @type kw: dict

        @return: Deferred which returns an L{UsherResult}
        @rtype: twisted.internet.defer.Deferred

        @raise UsherNotConnected: Raised when not connected to Usher
            Controller
        @raise UsherPBDeadRefEx: Raised when capability for Usher
            Controller goes stale.  Must reconnect when this happens
        @raise UsherInvalidInputEx: Raised when an invalid input or
            combination of parameters is received.

        @attention: The following conditions must hold:
                1. first, last, and count must be non-negative
                2. specifying first requires last or count
                3. cannot use count with vmlist
                4. cannot use count with both first and last

       """
        # make sure we're connected
        if not self.aref:
            raise UsherNotConnectedEx

        # combine these to reduce params
        if ((first and first < 0) or (last and last < 0) or (count and count
<
            0)):
            raise UsherInvalidInputEx(
                    "first, last, and count must be non-negative")
        vmrange = (first,last,count)
        # arg check
        self._arg_check(vmlist, vmrange)

        # get final destination list
        dlist = self._namecomplete(dlist, suffix=self.suffix)
        self._check_lnmlist(dlist)
        dregex = self._regex_append(dregex, dlist)
        dlist = self._regex_filter(dregex, self.lnms.keys())

        # complete names (if necessary) in the vmlist
        vmlist = self._namecomplete(vmlist, cluster, eid)
        # check that the vms specified don't already exist
        self._check_vmlist(vmlist, isin=True)
        vmlist = self._get_vm_names_to_start(vmlist, cluster, prefix,
vmrange,
            eid)

        # controller handles eid from kw, so add it
        if eid:
            kw['eid'] = eid

        if dryrun:
            d = UsherResult('dryrun', msg = 'started:' + linesep +
                    linesep.join(vmlist))
            return d

        try:
            if vmlist:
                d = self.aref.callRemote("start", vmlist, dlist,
                    **kw)
                d.addErrback(self._handle_err, misc.whoami())
            else:
                raise UsherInvalidInputEx(
                        "No VMs started.  No unique VMs specified in
command")
            return d
        except pb.DeadReferenceError, ex:
            raise UsherPBDeadRefEx

If you want, all the package is at
http://usher.ucsd.edu/downloads/snapshots/usher/latest/usher-latest.tgz
in the client folder you'll find the api.py

Thank you very much hoping someone will help this totally inexpert user,
Luigi.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090511/4f45a018/attachment.htm 

From clemesha at gmail.com  Mon May 11 07:12:25 2009
From: clemesha at gmail.com (Alex Clemesha)
Date: Mon, 11 May 2009 04:12:25 -0700
Subject: [Twisted-Python] Announcing Twotp 0.6
In-Reply-To: <1241947048.6438.20.camel@brainwave>
References: <1241947048.6438.20.camel@brainwave>
Message-ID: <d272f0690905110412v4a6757f6wf53d13345c9a9268@mail.gmail.com>

Thomas,

Just wanted to say thanks for Twotp, it's been very useful so far!
(Also, thanks for the expert help on #twisted irc :-)

-Alex


On Sun, May 10, 2009 at 2:17 AM, Thomas Herv? <therve at free.fr> wrote:
> Hello all!
>
> I'm pleased to announce version 0.6 of Twotp [1].
>
> What is Twotp? It's an implementation of the Erlang protocol using
> Python and Twisted, similar with the built-in Jinterface [2] or
> py_interface [3].
>
> After some hibernating time, I've focused on implementing links and
> monitoring of Erlang processes. Now it's even more complete than
> Jinterface, which doesn't implement monitoring.
>
> After implementing the lower layer, it made me realize that the current
> API was all but convenient. So I built a complete new API simplifying
> the whole task, around the concept of processes. It's now much easier to
> implement real process communication with Erlang, instead of using
> simple RPC. I've reworked the examples and the documentation, I hope
> it's enough for helping people to start using it!
>
> You can download it here: http://pypi.python.org/pypi/twotp
>
> There is also a PPA for Ubuntu wih latest version:
> https://launchpad.net/~twotp/+archive/ppa
>
> Note: this is a backward-incompatible version. Changing to the new API
> should be fairly easy, but I'd be glad to help anyone encountering
> problems.
>
> Please report bugs and successes! You can write here or on Freenode in
> #twisted.
>
> Thanks!
>
> [1]: http://launchpad.net/twotp
>
> [2]: http://erlang.org/doc/apps/jinterface/index.html
>
> [3]: http://www.lysator.liu.se/~tab/erlang/py_interface/
>
> --
> Thomas
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Alex Clemesha
clemesha.org



From exarkun at divmod.com  Mon May 11 09:29:52 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 11 May 2009 09:29:52 -0400
Subject: [Twisted-Python] help using deferred
In-Reply-To: <9cce290a0905110324p241c236dxb2aecb077a7b51a9@mail.gmail.com>
Message-ID: <20090511132952.21531.1118624688.divmod.quotient.19562@henry.divmod.com>

On Mon, 11 May 2009 12:24:54 +0200, Luigi Conte <luigiandcosolutions at gmail.com> wrote:
>Hi people,
>I'm luigi and I'm a student at Politecnico di Milano, Italy. I'm working for
>a graduate thesis on a framework called usher. It provides an API to do
>connect e command operations. It manages all those calls with a defferred
>object (i think). In fact when I call the connect it returns me a defferred
>object. All that i want to know is how to call the other operations with
>this object and how to know when an operation is completely done.
>The procedure I call is simple: connect method, start method many times,
>stop method, disconnect method. I want to call these methods sequentially
>because I have to fallow a list of commands so I have to be sure the
>previous methods are already been invoked. I'll post the main methods hoping
>someone could help me in how to add the method in the deferred and how to
>know when it is completely invoked.

The Deferred tells you two things.  It tells you when an operation has
completed and it tells you the result of the operation.  It tells you
*when* by calling your callback function at that time.  It tells you
what *result* by the value it passes to that callback function.

So if you want to connect, then do the "start" operation many times, then
stop, then disconnect, you have some Deferreds and a simple recursion-
or loop-like structure.  For example,

    # First, set up the connection.
    taskDeferred = connect(...)
    def cbConnected(connectResult):
        # This function will run once the Deferred returned by `connect?
        # fires.  Here, "start" something.
        return start(...)
    taskDeferred.addCallback(cbConnected)

    def cbStarted(startResult):
        # Now the Deferred returned by `start? has fired.
        if someStopCondition:
            # If we decide it is time to stop, then stop.
            return stop(...)
        # Otherwise, run `start? again
        startAgainDeferred = start(...)
        # And call this callback again with this new call's result.
        startAgainDeferred.addCallback(cbStarted)
        return startAgainDeferred
    taskDeferred.addCallback(cbStarted)

    def cbStopped(stopResult):
        # The only exit from the earlier "loop" is through the code path
        # which calls `stop?.  This callback is called when the Deferred
        # returned by that call fires.  Do the disconnect now.
        return disconnect(...)
    taskDeferred.addCallback(cbStopped)

    def cbDisconnected(disconnectResult):
        print "All done"
    taskDeferred.addCallback(cbDisconnected)

    # It's possible something will go wrong in the above.  To make sure any
    # exceptions are reported, add a logging errback at the very end to
    # display whatever might go wrong.
    taskDeferred.addErrback(twisted.python.log.err)

Hope this helps,

Jean-Paul



From luigiandcosolutions at gmail.com  Mon May 11 10:55:40 2009
From: luigiandcosolutions at gmail.com (Luigi Conte)
Date: Mon, 11 May 2009 16:55:40 +0200
Subject: [Twisted-Python] help using deferred
In-Reply-To: <20090511132952.21531.1118624688.divmod.quotient.19562@henry.divmod.com>
References: <9cce290a0905110324p241c236dxb2aecb077a7b51a9@mail.gmail.com>
	<20090511132952.21531.1118624688.divmod.quotient.19562@henry.divmod.com>
Message-ID: <9cce290a0905110755i3988cab1j7a6041a55a440848@mail.gmail.com>

I'm sure you're saying only good things but I'm so inexpert in twisted that
I can't understand very well what to do.
I'll try to explain all that I want to do and how I did it wrongly:
first I have to call the connect method from the api and it returns a
deferred so I do:
in conn_to_ctrl i have:
d = api.connect(...)
return d

now I do some operations with config files to call many times the start
method from the api (I have to start many virtual machines) and the
api.start returns a deferred so what have I to do now?
I do so:
in examinecfg i have:
# tha same d that i used to add api.connect!
self.d.addCallback(api.start, (method_args))
return d

Then I have to call the disconnect method from the api. But i tried to print
out something to fallow the executing but I only see printing the first
method that call the connection. after that the process ends.

In the main I have:
defer = conn_to_ctrl()
or have I to add to defer also the examinecfg?

thank you very much

2009/5/11 Jean-Paul Calderone <exarkun at divmod.com>

> On Mon, 11 May 2009 12:24:54 +0200, Luigi Conte <
> luigiandcosolutions at gmail.com> wrote:
> >Hi people,
> >I'm luigi and I'm a student at Politecnico di Milano, Italy. I'm working
> for
> >a graduate thesis on a framework called usher. It provides an API to do
> >connect e command operations. It manages all those calls with a defferred
> >object (i think). In fact when I call the connect it returns me a
> defferred
> >object. All that i want to know is how to call the other operations with
> >this object and how to know when an operation is completely done.
> >The procedure I call is simple: connect method, start method many times,
> >stop method, disconnect method. I want to call these methods sequentially
> >because I have to fallow a list of commands so I have to be sure the
> >previous methods are already been invoked. I'll post the main methods
> hoping
> >someone could help me in how to add the method in the deferred and how to
> >know when it is completely invoked.
>
> The Deferred tells you two things.  It tells you when an operation has
> completed and it tells you the result of the operation.  It tells you
> *when* by calling your callback function at that time.  It tells you
> what *result* by the value it passes to that callback function.
>
> So if you want to connect, then do the "start" operation many times, then
> stop, then disconnect, you have some Deferreds and a simple recursion-
> or loop-like structure.  For example,
>
>    # First, set up the connection.
>    taskDeferred = connect(...)
>    def cbConnected(connectResult):
>        # This function will run once the Deferred returned by `connect?
>        # fires.  Here, "start" something.
>        return start(...)
>    taskDeferred.addCallback(cbConnected)
>
>    def cbStarted(startResult):
>        # Now the Deferred returned by `start? has fired.
>        if someStopCondition:
>            # If we decide it is time to stop, then stop.
>            return stop(...)
>        # Otherwise, run `start? again
>        startAgainDeferred = start(...)
>        # And call this callback again with this new call's result.
>        startAgainDeferred.addCallback(cbStarted)
>        return startAgainDeferred
>    taskDeferred.addCallback(cbStarted)
>
>    def cbStopped(stopResult):
>        # The only exit from the earlier "loop" is through the code path
>        # which calls `stop?.  This callback is called when the Deferred
>        # returned by that call fires.  Do the disconnect now.
>        return disconnect(...)
>    taskDeferred.addCallback(cbStopped)
>
>    def cbDisconnected(disconnectResult):
>        print "All done"
>    taskDeferred.addCallback(cbDisconnected)
>
>    # It's possible something will go wrong in the above.  To make sure any
>    # exceptions are reported, add a logging errback at the very end to
>    # display whatever might go wrong.
>    taskDeferred.addErrback(twisted.python.log.err)
>
> Hope this helps,
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090511/1efd1ce9/attachment.htm 

From exarkun at divmod.com  Mon May 11 11:29:43 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 11 May 2009 11:29:43 -0400
Subject: [Twisted-Python] help using deferred
In-Reply-To: <9cce290a0905110755i3988cab1j7a6041a55a440848@mail.gmail.com>
Message-ID: <20090511152943.21531.38713624.divmod.quotient.19576@henry.divmod.com>

On Mon, 11 May 2009 16:55:40 +0200, Luigi Conte <luigiandcosolutions at gmail.com> wrote:
>I'm sure you're saying only good things but I'm so inexpert in twisted that
>I can't understand very well what to do.
>I'll try to explain all that I want to do and how I did it wrongly:
>first I have to call the connect method from the api and it returns a
>deferred so I do:
>in conn_to_ctrl i have:
>d = api.connect(...)
>return d
>
>now I do some operations with config files to call many times the start
>method from the api (I have to start many virtual machines) and the
>api.start returns a deferred so what have I to do now?
>I do so:
>in examinecfg i have:
># tha same d that i used to add api.connect!
>self.d.addCallback(api.start, (method_args))
>return d
>
>Then I have to call the disconnect method from the api. But i tried to print
>out something to fallow the executing but I only see printing the first
>method that call the connection. after that the process ends.
>
>In the main I have:
>defer = conn_to_ctrl()
>or have I to add to defer also the examinecfg?
>
>thank you very much

I'm not sure what you're doing wrong.  It's hard to understand mixed up
snippets and fragments of code.  Please:

  - don't top post
  - share complete, runnable examples (preferably minimal, too)
  - share the failure you're seeing - possibly including a traceback, or a
    description of the behavior that the program exhibits when you run it,
    and an explanation of how this differs from what you want

Jean-Paul



From powdahound at gmail.com  Mon May 11 12:16:32 2009
From: powdahound at gmail.com (Garret Heaton)
Date: Mon, 11 May 2009 09:16:32 -0700
Subject: [Twisted-Python] XMPP/Jabber server example
Message-ID: <812f32000905110916p36cb564fic5ad31e21e5298c9@mail.gmail.com>

I'm trying to create an XMPP server using twisted.words and am having
difficulty finding the correct way to make use of the classes provided. I
was hoping someone might have an example or short explanation of which
classes would be used to create a very basic server (using the latest
classes<http://twistedmatrix.com/documents/8.2.0/api/twisted.words.protocols.jabber.xmlstream.html>from
8.2.0).

So far I have a t.w.p.j.xmlstream.XmlStreamServerFactory object creating
t.w.x.xmlstream.XmlStream protocol instances. The
t.w.p.j.xmlstream.XmlStream objects are being given a
t.w.p.j.xmlstream.ListenAuthenticator object. The factory is being created
and given to a t.a.internet.TCPServer service which has a
t.a.service.Application as its parent service. Everything runs fine and I
can see data coming in, but I wasn't sure what the correct functions to
override and deal with the data were, or where to attach event listeners
using addBootstrap().

Also, how do xmlstream.StreamManager, xmlstream.XMPPHandler, and
xmlstream.XMPPHandlerCollection fit into this. Are they appropriate to use
for a server?

Is there still work being done on the goals listed at
http://twistedmatrix.com/trac/wiki/XMPPServerArchitecture?

Thanks! Really enjoying Twisted so far.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090511/0f238e27/attachment.htm 

From terry.jones at gmail.com  Mon May 11 12:19:16 2009
From: terry.jones at gmail.com (Terry Jones)
Date: Mon, 11 May 2009 18:19:16 +0200
Subject: [Twisted-Python] Another approach to allowing __init__ to work with
	Deferreds
Message-ID: <18952.20484.534748.921408@jon.es>

I posted to this list back in Nov 2008 with subject:
A Python metaclass for Twisted allowing __init__ to return a Deferred

Briefly, I was trying to find a nice way to allow the __init__ method of a
class to work with deferreds in such a way that methods of the class could
use work done by __init__ safe in the knowledge that the deferreds had
completed.  E.g., if you have

    class X(object):
        def __init__(self, host, port):
            def final(connection):
                self.db = connection
            d = makeDBConnection(host, port)
            d.addCallback(final)

        def query(self, q):
            return self.db.runQuery(q)

Then when you make an X and call query on it, there's a chance the deferred
wont have fired, and you'll get an error.  This is just a very simple
illustrative example.  There are many more, and this is a general problem
of the synchronous world (in which __init__ is supposed to prepare a
fully-fledged class instance and cannot return a deferred) meeting the
asynchronous world in which we would like to (and must) use deferreds.

The earlier thread:

  http://twistedmatrix.com/pipermail/twisted-python/2008-November/018600.html

Although I learned a lot in that thread, I wasn't completely happy with any
of the solutions. Some of the things that still bugged me are in posts
towards the end of the thread:

  http://twistedmatrix.com/pipermail/twisted-python/2008-November/018624.html
  http://twistedmatrix.com/pipermail/twisted-python/2008-November/018634.html

The various approaches we took back then all boiled down to waiting for a
deferred to fire before the class instance was fully ready to use. When
that happened, you had your instance and could call its methods.

I had also thought about an alternate approach: having __init__ add a
callback to the deferreds it dealt with to set a flag in self and then have
all dependent methods check that flag to see if the class instance was
ready for use. But that 1) is ugly (too much extra code); 2) means the
caller has to be prepared to deal with errors due to the class instance not
being ready, and 3) adds a check to every method call. It would look
something like this:

    class X(object):
        def __init__(self, host, port):
            self.ready = False
            def final(connection):
                self.db = connection
                self.ready = True
            d = makeDBConnection(host, port)
            d.addCallback(final)

        def query(self, q):
            if not self.ready:
                raise IAmNotReadyException()
            return self.db.runQuery(q)

That was too ugly for my taste, for all of the above reasons, most
especially for forcing the unfortunate caller of my code to handle
IAmNotReadyException.


Anyway.... fast forward 6 months and I've hit the same problem again. It's
with existing code, in which I would like an __init__ to call something
that (now, due to changes elsewhere) returns a deferred. So I started
thinking again, and came up with a much cleaner way to do the alternate
approach via a class mixin:

    from twisted.internet import defer

    class deferredInitMixin(object):
        def wrap(self, d, *wrappedMethods):
            self.waiting = []
            self.stored = {}

            def restore(_):
                for method in self.stored:
                    setattr(self, method, self.stored[method])
                for d in self.waiting:
                    d.callback(None)

            def makeWrapper(method):
                def wrapper(*args, **kw):
                    d = defer.Deferred()
                    d.addCallback(lambda _: self.stored[method](*args, **kw))
                    self.waiting.append(d)
                    return d
                return wrapper

            for method in wrappedMethods:
                self.stored[method] = getattr(self, method)
                setattr(self, method, makeWrapper(method))

            d.addCallback(restore)


You use it as in the class Test below:

    from twisted.internet import defer, reactor

    def fire(d, value):
        print "I finally fired, with value", value
        d.callback(value)

    def late(value):
        d = defer.Deferred()
        reactor.callLater(1, fire, d, value)
        return d

    def called(result, what):
        print 'final callback of %s, result = %s' % (what, result)

    def stop(_):
        reactor.stop()


    class Test(deferredInitMixin):
        def __init__(self):
            d = late('Test')
            deferredInitMixin.wrap(self, d, 'f1', 'f2')

        def f1(self, arg):
            print "f1 called with", arg
            return late(arg)

        def f2(self, arg):
            print "f2 called with", arg
            return late(arg)


    if __name__ == '__main__':
        t = Test()
        d1 = t.f1(44)
        d1.addCallback(called, 'f1')
        d2 = t.f1(33)
        d2.addCallback(called, 'f1')
        d3 = t.f2(11)
        d3.addCallback(called, 'f2')
        d = defer.DeferredList([d1, d2, d3])
        d.addBoth(stop)
        reactor.run()


Effectively, the __init__ of my Test class asks deferredInitMixin to wrap
some of its methods. deferredInitMixin stores the original methods away and
replaces each of them with a function that immediately returns a deferred.
So after __init__ finishes, code that calls the now-wrapped methods of the
class instance before the deferred has fired will get a deferred back as
usual (but see * below). As far as they know, everything is normal.  Behind
the scenes, deferredInitMixin has arranged for these deferreds to fire only
after the deferred passed from __init__ has fired.  Once that happens,
deferredInitMixin also restores the original functions to the instance. As
a result there is no overhead later to check a flag to see if the instance
is ready to use. If the deferred from __init__ happens to fire before any
of the instance's methods are called, it will simply restore the original
methods.  Finally (obviously?) you only pass the method names to
deferredInitMixin that depend on the deferred in __init__ being done.

BTW, calling the methods passed to deferredInitMixin "wrapped" isn't really
accurate. They're just temporarily replaced.


I quite like this approach.  It's a second example of something I did in
http://twistedmatrix.com/pipermail/twisted-python/2009-April/019522.html in
which a pool of deferreds is accumulated and they're all fired when another
deferred fires. It's nice because you don't reply with an error and there's
no need for locking or other form of coordination - the work you need done
is already in progress, so you get back a fresh deferred and everything
goes swimmingly.

* Minor note: the methods you wrap should probably be ones that already
return deferreds. That way you always get a deferred back from them,
whether they're temporarily wrapped or not. The above mixin works just fine
if you ask it to wrap non-deferred-returning functions, but you have to
deal with the possibility that they will return a deferred (i.e., if you
call them while they're wrapped).

Comments welcome / wanted.

Terry



From adam.bcn at gmail.com  Mon May 11 12:26:37 2009
From: adam.bcn at gmail.com (Adam)
Date: Mon, 11 May 2009 18:26:37 +0200
Subject: [Twisted-Python] XMPP/Jabber server example
In-Reply-To: <812f32000905110916p36cb564fic5ad31e21e5298c9@mail.gmail.com>
References: <812f32000905110916p36cb564fic5ad31e21e5298c9@mail.gmail.com>
Message-ID: <4983dddf0905110926s11cf9746lca1b6353a0a755f@mail.gmail.com>

2009/5/11 Garret Heaton <powdahound at gmail.com>

> I'm trying to create an XMPP server using twisted.words and am having
> difficulty finding the correct way to make use of the classes provided. I
> was hoping someone might have an example or short explanation of which
> classes would be used to create a very basic server (using the latest
> classes<http://twistedmatrix.com/documents/8.2.0/api/twisted.words.protocols.jabber.xmlstream.html>from 8.2.0).
>
> So far I have a t.w.p.j.xmlstream.XmlStreamServerFactory object creating
> t.w.x.xmlstream.XmlStream protocol instances. The
> t.w.p.j.xmlstream.XmlStream objects are being given a
> t.w.p.j.xmlstream.ListenAuthenticator object. The factory is being created
> and given to a t.a.internet.TCPServer service which has a
> t.a.service.Application as its parent service. Everything runs fine and I
> can see data coming in, but I wasn't sure what the correct functions to
> override and deal with the data were, or where to attach event listeners
> using addBootstrap().
>
> Also, how do xmlstream.StreamManager, xmlstream.XMPPHandler, and
> xmlstream.XMPPHandlerCollection fit into this. Are they appropriate to use
> for a server?
>
> Is there still work being done on the goals listed at
> http://twistedmatrix.com/trac/wiki/XMPPServerArchitecture?
>
> Thanks! Really enjoying Twisted so far.
>

Hi Garret,

there's some Twisted/XMPP work going on over here, too:

http://wokkel.ik.nu/

Quote:

> Wokkel is collection of enhancements on top of the
> Twisted <http://www.twistedmatrix.com/> networking framework, written in
Python.
> It mostly provides a testing ground for enhancements
> to the Jabber/XMPP protocol implementation as
> found in Twisted Words, that are meant to eventually
> move there.

Hope that helps,

~Adam
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090511/f2c0650b/attachment.htm 

From luigiandcosolutions at gmail.com  Mon May 11 13:49:19 2009
From: luigiandcosolutions at gmail.com (Luigi Conte)
Date: Mon, 11 May 2009 19:49:19 +0200
Subject: [Twisted-Python] help using deferred
In-Reply-To: <20090511152943.21531.38713624.divmod.quotient.19576@henry.divmod.com>
References: <9cce290a0905110755i3988cab1j7a6041a55a440848@mail.gmail.com>
	<20090511152943.21531.38713624.divmod.quotient.19576@henry.divmod.com>
Message-ID: <9cce290a0905111049j693150deye98c0129a977f070@mail.gmail.com>

2009/5/11 Jean-Paul Calderone <exarkun at divmod.com>

> On Mon, 11 May 2009 16:55:40 +0200, Luigi Conte <
> luigiandcosolutions at gmail.com> wrote:
> >I'm sure you're saying only good things but I'm so inexpert in twisted
> that
> >I can't understand very well what to do.
> >I'll try to explain all that I want to do and how I did it wrongly:
> >first I have to call the connect method from the api and it returns a
> >deferred so I do:
> >in conn_to_ctrl i have:
> >d = api.connect(...)
> >return d
> >
> >now I do some operations with config files to call many times the start
> >method from the api (I have to start many virtual machines) and the
> >api.start returns a deferred so what have I to do now?
> >I do so:
> >in examinecfg i have:
> ># tha same d that i used to add api.connect!
> >self.d.addCallback(api.start, (method_args))
> >return d
> >
> >Then I have to call the disconnect method from the api. But i tried to
> print
> >out something to fallow the executing but I only see printing the first
> >method that call the connection. after that the process ends.
> >
> >In the main I have:
> >defer = conn_to_ctrl()
> >or have I to add to defer also the examinecfg?
> >
> >thank you very much
>
> I'm not sure what you're doing wrong.  It's hard to understand mixed up
> snippets and fragments of code.  Please:
>
>  - don't top post
>  - share complete, runnable examples (preferably minimal, too)
>  - share the failure you're seeing - possibly including a traceback, or a
>    description of the behavior that the program exhibits when you run it,
>    and an explanation of how this differs from what you want
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>

Ok I'll try to explain what the api provides to me and what I want to do
with it:
mothods provided by api that I want to use:
1) connection

    def connect(self, ctrl_host, ctrl_port, user, passwd):
        """Connect to an Usher control server.
        @param ctrl_host: fqdn where Usher controller is running
        @type ctrl_host: string
        @param ctrl_port: port number Usher controller is listening on
        @type ctrl_port: int
        @param user: username of user connecting to Usher controller
        @type user: string
        @param passwd: password of user connecting to Usher controller
        @type passwd: string
        return: Deferred which returns and L{UsherResult}
        rtype: twisted.internet.defer.Deferred
        """
        # serialize access to connect
        if not self.connect_lock.acquire(False):
            raise UsherEx, "Connection Pending"
        if self.factory:
            self.disconnect()
        # reset vms
        self.vms = {}
        # reset passwd to None until we're connected
        self.passwd = None
        self.factory = APIFactory()
        self.factory.api = self
        # connect to server
        reactor.connectSSL(ctrl_host, ctrl_port, self.factory,
            ssl.ClientContextFactory())
        d = self.factory.login(credentials.UsernamePassword(user, passwd),
            client=self)
        d.addErrback(self._handle_err, misc.whoami())
        d.addCallback(self._connected_to_ctrl, ctrl_host, ctrl_port, user,
            passwd)
        return d

2) start single vm

    def start(self, cluster=None, prefix='', vmlist=None, count=None,
first=None, last=None, dregex=None,  dlist=None, dryrun=False, eid=None,
**kw):
        """Start a VM or set of VMs
        @param cluster: Name of cluster to which VMs should belong
        @type cluster: string
        @param prefix: prefix to prepend to VM names
        @type prefix: string
        @param vmlist: list of strings of VMs to start
        @type vmlist: list of strings
        @param count: Number of consecutive VMs to start
        @type count: int
        @param first: Lowest number of VM to start
        @type first: int
        @param last: Highest number of VM to start
        @type last: int
        @param dregex: regular expression to match against destination LNM
names
        @type dregex: list of strings
        @param dlist: list of strings to match against destination LNM names
        @type dlist: list of strings
        @param dryrun: Show what would have happened if the command had been
run without the dryrun command (at the instant that the dryrun command was
run of course)
        @type dryrun: bool
        @param eid: mechanism for admin user to be able to specify an
alternate username for forming suffix for regex
        @type eid: string
        @param kw: Extra arguments passed to controller for use by plugins
or LNM.  Any keywords starting with 'vm_' are added to VM's uargs
parameter.  Note, the controller actually checks for two kw arguments: ram
and ip_addrs.  Though these are, strictly speaking, VM parameters, they're
considered important enough that the controller checks for them.
        @type kw: dict

        @return: Deferred which returns an L{UsherResult}
        @rtype: twisted.internet.defer.Deferred
        @raise UsherNotConnected: Raised when not connected to Usher
Controller
        @raise UsherPBDeadRefEx: Raised when capability for Usher Controller
goes stale.  Must reconnect when this happens
        @raise UsherInvalidInputEx: Raised when an invalid input or
combination of parameters is received.
       """

        # make sure we're connected
        if not self.aref:
            raise UsherNotConnectedEx
        # combine these to reduce params
        if ((first and first < 0) or (last and last < 0) or (count and count
<
            0)):
            raise UsherInvalidInputEx("first, last, and count must be
non-negative")
        vmrange = (first,last,count)
        # arg check
        self._arg_check(vmlist, vmrange)
        # get final destination list
        dlist = self._namecomplete(dlist, suffix=self.suffix)
        self._check_lnmlist(dlist)
        dregex = self._regex_append(dregex, dlist)
        dlist = self._regex_filter(dregex, self.lnms.keys())
        # complete names (if necessary) in the vmlist
        vmlist = self._namecomplete(vmlist, cluster, eid)
        # check that the vms specified don't already exist
self._check_vmlist(vmlist, isin=True)
        vmlist = self._get_vm_names_to_start(vmlist, cluster, prefix,
vmrange, eid)
        # controller handles eid from kw, so add it
        if eid:
            kw['eid'] = eid
        if dryrun:
            d = UsherResult('dryrun', msg = 'started:' + linesep +
                    linesep.join(vmlist))
            return d
        try:
            if vmlist:
                d = self.aref.callRemote("start", vmlist, dlist, **kw)
                d.addErrback(self._handle_err, misc.whoami())
            else:
                raise UsherInvalidInputEx( "No VMs started.  No unique VMs
specified in command")
            return d
        except pb.DeadReferenceError, ex: raise UsherPBDeadRefEx

in my script I have to use connect method and then I have to do some
operations first of calling the start method
1) start connection

    def startConnection(self):
        d = my_api.connect(self.ctrl_ip, self.ctrl_port, self.user,
self.pwd)
        d.addCallback(self.postConnection)
        d.addErrback(twisted.python.log.err)
        print "Connection added"
        return d
2) operation before starting a virtual machine:
def newVMCfg(self, new_vms_cfg):
       #...
       #some operations
       #if condition valid I try to start the virtual machine
                        # is this the correct way to pass args to the start
method?
                        d = self.d.addCallback(self.startVM,(new_vm,
self.lnms[i])
                        print "started vm %s"%new_vm
        return d

in the main process I call them as:
d = startConnection()
d.addCallback(newVMCfg, arg)

Is it correct? Because the process stops at the first method called: I see
only "connection added".
Thank you for your help!!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090511/cdc0700d/attachment.htm 

From exarkun at divmod.com  Mon May 11 14:01:21 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 11 May 2009 14:01:21 -0400
Subject: [Twisted-Python] help using deferred
In-Reply-To: <9cce290a0905111049j693150deye98c0129a977f070@mail.gmail.com>
Message-ID: <20090511180121.21531.832920012.divmod.quotient.19615@henry.divmod.com>

On Mon, 11 May 2009 19:49:19 +0200, Luigi Conte <luigiandcosolutions at gmail.com> wrote:
>
> [snip]
>in my script I have to use connect method and then I have to do some
>operations first of calling the start method
>1) start connection
>
>    def startConnection(self):
>        d = my_api.connect(self.ctrl_ip, self.ctrl_port, self.user,
>self.pwd)
>        d.addCallback(self.postConnection)

Since you omitted the definition of postConnection, I have no way to know
what this does.

>        d.addErrback(twisted.python.log.err)

Regardless, this is the wrong place to insert this errback.  You should read
the Deferred documentation to learn what consequence it will have on your
program's flow.

http://twistedmatrix.com/projects/core/documentation/howto/defer.html is
probably a good place to start.

>        print "Connection added"
>        return d
>2) operation before starting a virtual machine:
>def newVMCfg(self, new_vms_cfg):
>       #...
>       #some operations
>       #if condition valid I try to start the virtual machine
>                        # is this the correct way to pass args to the start
>method?
>                        d = self.d.addCallback(self.startVM,(new_vm,
>self.lnms[i])
>                        print "started vm %s"%new_vm
>        return d
>
>in the main process I call them as:
>d = startConnection()
>d.addCallback(newVMCfg, arg)
>
>Is it correct? Because the process stops at the first method called: I see
>only "connection added".

That should indicate to you that something is going wrong after that print
statement is reached.  So examine what your program tries to do after that
point.  You may want to use a debugger.  You may want to try writing some
unit tests.

Jean-Paul



From drew.smathers at gmail.com  Mon May 11 19:11:22 2009
From: drew.smathers at gmail.com (Drew Smathers)
Date: Mon, 11 May 2009 19:11:22 -0400
Subject: [Twisted-Python] Another approach to allowing __init__ to work
	with Deferreds
In-Reply-To: <18952.20484.534748.921408@jon.es>
References: <18952.20484.534748.921408@jon.es>
Message-ID: <368574aa0905111611w25fb29d3j84d2b49f34496565@mail.gmail.com>

On Mon, May 11, 2009 at 12:19 PM, Terry Jones <terry.jones at gmail.com> wrote:
> I posted to this list back in Nov 2008 with subject:
> A Python metaclass for Twisted allowing __init__ to return a Deferred
>
> Briefly, I was trying to find a nice way to allow the __init__ method of a
> class to work with deferreds in such a way that methods of the class could
> use work done by __init__ safe in the knowledge that the deferreds had
> completed. ?E.g., if you have
>
> ? ?class X(object):
> ? ? ? ?def __init__(self, host, port):
> ? ? ? ? ? ?def final(connection):
> ? ? ? ? ? ? ? ?self.db = connection
> ? ? ? ? ? ?d = makeDBConnection(host, port)
> ? ? ? ? ? ?d.addCallback(final)
>
> ? ? ? ?def query(self, q):
> ? ? ? ? ? ?return self.db.runQuery(q)
>
> Then when you make an X and call query on it, there's a chance the deferred
> wont have fired, and you'll get an error. ?This is just a very simple
> illustrative example. ?There are many more, and this is a general problem
> of the synchronous world (in which __init__ is supposed to prepare a
> fully-fledged class instance and cannot return a deferred) meeting the
> asynchronous world in which we would like to (and must) use deferreds.
>
> The earlier thread:
>
> ?http://twistedmatrix.com/pipermail/twisted-python/2008-November/018600.html
>
> Although I learned a lot in that thread, I wasn't completely happy with any
> of the solutions. Some of the things that still bugged me are in posts
> towards the end of the thread:
>
> ?http://twistedmatrix.com/pipermail/twisted-python/2008-November/018624.html
> ?http://twistedmatrix.com/pipermail/twisted-python/2008-November/018634.html
>
> The various approaches we took back then all boiled down to waiting for a
> deferred to fire before the class instance was fully ready to use. When
> that happened, you had your instance and could call its methods.
>
> I had also thought about an alternate approach: having __init__ add a
> callback to the deferreds it dealt with to set a flag in self and then have
> all dependent methods check that flag to see if the class instance was
> ready for use. But that 1) is ugly (too much extra code); 2) means the
> caller has to be prepared to deal with errors due to the class instance not
> being ready, and 3) adds a check to every method call. It would look
> something like this:
>
> ? ?class X(object):
> ? ? ? ?def __init__(self, host, port):
> ? ? ? ? ? ?self.ready = False
> ? ? ? ? ? ?def final(connection):
> ? ? ? ? ? ? ? ?self.db = connection
> ? ? ? ? ? ? ? ?self.ready = True
> ? ? ? ? ? ?d = makeDBConnection(host, port)
> ? ? ? ? ? ?d.addCallback(final)
>
> ? ? ? ?def query(self, q):
> ? ? ? ? ? ?if not self.ready:
> ? ? ? ? ? ? ? ?raise IAmNotReadyException()
> ? ? ? ? ? ?return self.db.runQuery(q)
>
> That was too ugly for my taste, for all of the above reasons, most
> especially for forcing the unfortunate caller of my code to handle
> IAmNotReadyException.
>
>
> Anyway.... fast forward 6 months and I've hit the same problem again. It's
> with existing code, in which I would like an __init__ to call something
> that (now, due to changes elsewhere) returns a deferred. So I started
> thinking again, and came up with a much cleaner way to do the alternate
> approach via a class mixin:
>
> ? ?from twisted.internet import defer
>
> ? ?class deferredInitMixin(object):
> ? ? ? ?def wrap(self, d, *wrappedMethods):
> ? ? ? ? ? ?self.waiting = []
> ? ? ? ? ? ?self.stored = {}
>
> ? ? ? ? ? ?def restore(_):
> ? ? ? ? ? ? ? ?for method in self.stored:
> ? ? ? ? ? ? ? ? ? ?setattr(self, method, self.stored[method])
> ? ? ? ? ? ? ? ?for d in self.waiting:
> ? ? ? ? ? ? ? ? ? ?d.callback(None)
>
> ? ? ? ? ? ?def makeWrapper(method):
> ? ? ? ? ? ? ? ?def wrapper(*args, **kw):
> ? ? ? ? ? ? ? ? ? ?d = defer.Deferred()
> ? ? ? ? ? ? ? ? ? ?d.addCallback(lambda _: self.stored[method](*args, **kw))
> ? ? ? ? ? ? ? ? ? ?self.waiting.append(d)
> ? ? ? ? ? ? ? ? ? ?return d
> ? ? ? ? ? ? ? ?return wrapper
>
> ? ? ? ? ? ?for method in wrappedMethods:
> ? ? ? ? ? ? ? ?self.stored[method] = getattr(self, method)
> ? ? ? ? ? ? ? ?setattr(self, method, makeWrapper(method))
>
> ? ? ? ? ? ?d.addCallback(restore)
>
>
> You use it as in the class Test below:
>
> ? ?from twisted.internet import defer, reactor
>
> ? ?def fire(d, value):
> ? ? ? ?print "I finally fired, with value", value
> ? ? ? ?d.callback(value)
>
> ? ?def late(value):
> ? ? ? ?d = defer.Deferred()
> ? ? ? ?reactor.callLater(1, fire, d, value)
> ? ? ? ?return d
>
> ? ?def called(result, what):
> ? ? ? ?print 'final callback of %s, result = %s' % (what, result)
>
> ? ?def stop(_):
> ? ? ? ?reactor.stop()
>
>
> ? ?class Test(deferredInitMixin):
> ? ? ? ?def __init__(self):
> ? ? ? ? ? ?d = late('Test')
> ? ? ? ? ? ?deferredInitMixin.wrap(self, d, 'f1', 'f2')
>
> ? ? ? ?def f1(self, arg):
> ? ? ? ? ? ?print "f1 called with", arg
> ? ? ? ? ? ?return late(arg)
>
> ? ? ? ?def f2(self, arg):
> ? ? ? ? ? ?print "f2 called with", arg
> ? ? ? ? ? ?return late(arg)
>
>
> ? ?if __name__ == '__main__':
> ? ? ? ?t = Test()
> ? ? ? ?d1 = t.f1(44)
> ? ? ? ?d1.addCallback(called, 'f1')
> ? ? ? ?d2 = t.f1(33)
> ? ? ? ?d2.addCallback(called, 'f1')
> ? ? ? ?d3 = t.f2(11)
> ? ? ? ?d3.addCallback(called, 'f2')
> ? ? ? ?d = defer.DeferredList([d1, d2, d3])
> ? ? ? ?d.addBoth(stop)
> ? ? ? ?reactor.run()
>
>
> Effectively, the __init__ of my Test class asks deferredInitMixin to wrap
> some of its methods. deferredInitMixin stores the original methods away and
> replaces each of them with a function that immediately returns a deferred.
> So after __init__ finishes, code that calls the now-wrapped methods of the
> class instance before the deferred has fired will get a deferred back as
> usual (but see * below). As far as they know, everything is normal. ?Behind
> the scenes, deferredInitMixin has arranged for these deferreds to fire only
> after the deferred passed from __init__ has fired. ?Once that happens,
> deferredInitMixin also restores the original functions to the instance. As
> a result there is no overhead later to check a flag to see if the instance
> is ready to use. If the deferred from __init__ happens to fire before any
> of the instance's methods are called, it will simply restore the original
> methods. ?Finally (obviously?) you only pass the method names to
> deferredInitMixin that depend on the deferred in __init__ being done.
>
> BTW, calling the methods passed to deferredInitMixin "wrapped" isn't really
> accurate. They're just temporarily replaced.
>
>
> I quite like this approach. ?It's a second example of something I did in
> http://twistedmatrix.com/pipermail/twisted-python/2009-April/019522.html in
> which a pool of deferreds is accumulated and they're all fired when another
> deferred fires. It's nice because you don't reply with an error and there's
> no need for locking or other form of coordination - the work you need done
> is already in progress, so you get back a fresh deferred and everything
> goes swimmingly.
>
> * Minor note: the methods you wrap should probably be ones that already
> return deferreds. That way you always get a deferred back from them,
> whether they're temporarily wrapped or not. The above mixin works just fine
> if you ask it to wrap non-deferred-returning functions, but you have to
> deal with the possibility that they will return a deferred (i.e., if you
> call them while they're wrapped).
>
> Comments welcome / wanted.
>
> Terry
>

Somewhere, someplace something has to get a reference to the object
and it seems to me you're trying to prevent that something from
calling methods on the instance of the object before it's ready.  So
why not just defer providing the reference instead of wrapping methods
and intercepting calls?  To illustrate, here's a simple modification
of your example--assuming that `deferred' is an attribute on Things
set in __int__()--that would achieve this without any special mixins:

def theThingThatGetsTheReference(t):
    d1 = t. f1(44)
    d1.addCallback(called, 'f1')
    d2 = t.f1(33)
    d2.addCallback(called, 'f1')
    d3 = t.f2(11)
    d3.addCallback(called, 'f2')
    d = defer.DeferredList([d1, d2, d3])
    d.addBoth(stop)

if __name__ == '__main__':
    t = Thing()
    t.deferred.addCallback(lambda ign: theThingThatGetTheReference(t))
    reactor.run()

-Drew



From glyph at divmod.com  Mon May 11 22:07:11 2009
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 12 May 2009 02:07:11 -0000
Subject: [Twisted-Python] XMPP/Jabber server example
In-Reply-To: <812f32000905110916p36cb564fic5ad31e21e5298c9@mail.gmail.com>
References: <812f32000905110916p36cb564fic5ad31e21e5298c9@mail.gmail.com>
Message-ID: <20090512020711.12555.543742607.divmod.xquotient.11154@weber.divmod.com>


On 11 May, 04:16 pm, powdahound at gmail.com wrote:
>I'm trying to create an XMPP server using twisted.words and am having
>difficulty finding the correct way to make use of the classes provided. 
>I
>was hoping someone might have an example or short explanation of which
>classes would be used to create a very basic server (using the latest
>classes<http://twistedmatrix.com/documents/8.2.0/api/twisted.words.protocols.jabber.xmlstream.html>from
>8.2.0).

I'm not confident of my own knowledge of twisted.words.*xmpp* to provide 
you an accurate answer.  I assume you've looked at doc/words/examples/ 
and there's nothing up to date.  If so, this is a doc bug that needs to 
be reported - please file it on twistedmatrix.com.
>(snip some great questions)

Can you itemize these questions on the ticket so that we can make sure 
they're all answered for future comers?
>Is there still work being done on the goals listed at
>http://twistedmatrix.com/trac/wiki/XMPPServerArchitecture?

Yes, but very slowly.  Please help out, submit patches and so on!  A 
useful bit of work would be to trawl around through the bugtracker and 
add links from that page to tickets describing individual bits of work 
and vice versa.  And perhaps to file tickets describing the bits of work 
which aren't described as tickets yet :).

A good example of what I mean is this page:

    http://twistedmatrix.com/trac/wiki/ReleaseAutomation
>Thanks! Really enjoying Twisted so far.

Thank you!



From terry.jones at gmail.com  Tue May 12 00:28:42 2009
From: terry.jones at gmail.com (Terry Jones)
Date: Tue, 12 May 2009 06:28:42 +0200
Subject: [Twisted-Python] Another approach to allowing __init__ to
	work	with Deferreds
In-Reply-To: Your message at 19:11:22 on Monday, 11 May 2009
References: <18952.20484.534748.921408@jon.es>
	<368574aa0905111611w25fb29d3j84d2b49f34496565@mail.gmail.com>
Message-ID: <18952.64250.10714.723759@jon.es>

Hi Drew. Thanks for the reply.

>>>>> "Drew" == Drew Smathers <drew.smathers at gmail.com> writes:

Drew> Somewhere, someplace something has to get a reference to the object
Drew> and it seems to me you're trying to prevent that something from
Drew> calling methods on the instance of the object before it's ready.  So
Drew> why not just defer providing the reference instead of wrapping
Drew> methods and intercepting calls?  To illustrate, here's a simple
Drew> modification of your example--assuming that `deferred' is an
Drew> attribute on Things set in __int__()--that would achieve this without
Drew> any special mixins:

Drew> def theThingThatGetsTheReference(t):
Drew>     d1 = t. f1(44)
[snip]
Drew> if __name__ == '__main__':
Drew> t = Thing()
Drew> t.deferred.addCallback(lambda ign: theThingThatGetTheReference(t))

I hadn't thought about doing it that way. It's in the first category of
approaches: making the instance available when the deferred fires. Several
approaches with the same flavor are in the original thread.  I agree your
way is simpler, but I like it less:

 - The class is now special, in the sense that a caller can't just treat it
   as a normal class and call its instance methods. You need to know this
   before using the class...

 - If you don't, it's nevertheless possible to call instance methods
   directly (without waiting on the deferred).  The solutions in the
   original thread did not allow this. They guaranteed that the deferred
   had fired via a metaclass, via using __new__, or via using a classmethod
   to call __init__.

 - It puts the extra work of getting a properly initialized instance onto
   the caller. This may seem like a trivial concern, but I'd rather my
   classes looked/behaved like regular Python classes if possible: i.e.,
   get an instance, immediately use it.

If I'd thought of your approach initially, I almost certainly would have
gone with it and not spent time trying to dream up more elaborate
solutions.  Thanks again for replying. It's good to get a reply at all,
and, as usual, I've learned something.

Terry



From terry.jones at gmail.com  Tue May 12 03:18:51 2009
From: terry.jones at gmail.com (Terry Jones)
Date: Tue, 12 May 2009 09:18:51 +0200
Subject: [Twisted-Python] Another approach to allowing __init__ to
	work	with Deferreds
In-Reply-To: Your message at 19:11:22 on Monday, 11 May 2009
References: <18952.20484.534748.921408@jon.es>
	<368574aa0905111611w25fb29d3j84d2b49f34496565@mail.gmail.com>
Message-ID: <18953.8923.433141.203476@jon.es>

Hi again Drew

I realized I could have added another reason why I like my approach (for my
current situation):

I'm changing an existing (i.e., deployed) class so that its __init__ calls
something returning a deferred which some instance methods of my class rely
on having fired. I already have other code that uses my class, and that
code is all written to use my class in the regular way. I could go change
all those calls, but that gets me into a further mess as some of those
calls are in the __init__ methods of still other classes... So I'd have to
go change all the uses of those classes too.

This part of my preference for my solution is due to having the class
already deployed. It's not really part of the core problem, just my
particular situation.

Terry



From glyph at divmod.com  Tue May 12 03:50:20 2009
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 12 May 2009 07:50:20 -0000
Subject: [Twisted-Python] Consistent interfaces to asynchronous
	partially-available services	using	Deferreds and state
	machines (was Re: Another approach to allowing	__init__ to
	work with Deferreds)
In-Reply-To: <18952.20484.534748.921408@jon.es>
References: <18952.20484.534748.921408@jon.es>
Message-ID: <20090512075020.12555.1526761106.divmod.xquotient.11469@weber.divmod.com>


On 11 May, 04:19 pm, terry.jones at gmail.com wrote:
>I posted to this list back in Nov 2008 with subject:
>A Python metaclass for Twisted allowing __init__ to return a Deferred

Let me try rephrasing your use-case here, for two reasons: one, I want 
to make sure I fully understand it, and two, I feel like the language 
this is couched in (hacks about __init__ and Deferreds and 
metaclass/mixin/decorator [ab]use) are detracting from the real core 
use-case here.  I think I've experienced the problem you're experiencing 
a number of times, I've just never tried to solve it the way you're 
describing :).

You have a utility object which you want to create immediately and make 
immediately available to various pieces of calling code.  However, an 
instance of this class represents a shared interface to an external, 
asynchronous resource, to which you must establish a connection, and so 
you don't immediately have a connection when the class is created.

However, you want to contain all this complexity behind a nice facade, 
and tell all the callers "just call these (Deferred-returning) methods 
and you will get sensible results no matter what state the connection is 
in".

If my assessment of your use-case is flawed, please say so - but 
regardless, I think the problem I'm describing is a pretty common one in 
the Twisted universe.  I'm going to write up some thoughts and critique 
your approach in that context even if I might not be responding to your 
requirements exactly, since I think it will possibly be helpful to 
others anyway.

To skip ahead to the end: the answer is that you want a state-machine. 
And it is quite sad to me that Twisted doesn't have a nice, standard, 
full-featured state-machine class that we use for everything like this, 
because members of the Twisted team have implemented at least half a 
dozen of these, probably a lot more, in various applications.  I am like 
90% sure that there's a ticket in the tracker for this, but I couldn't 
find it by searching around a bit.  I hope exarkun or jml or radix will 
have a better memory of this than I do.
>The various approaches we took back then all boiled down to waiting for 
>a
>deferred to fire before the class instance was fully ready to use. When
>that happened, you had your instance and could call its methods.

... and obviously, in the context I'm presenting, that is bad, because 
we don't want partially-initialized instances of the class floating 
around.

The main thrust of most of the counter-proposals (especially mine) was 
actually that the partially-initialized class should *not* be available 
to any calling code until it was fully-initialized; calling code should 
only have gotten a reference to the Deferred.

IMHO the thing that Drew suggests where you create an instance, then add 
callbacks to a Deferred *on* that instance before you start using that 
instance, is a bit of a Twisted antipattern.  For one thing, you can 
easily lose track of the contract of the Deferred; you don't really know 
what your callback is going to be getting if multiple callers access 
that attribute at different times, and for another, it's sort of the 
async equivalent of

    f = Foo()
    f.noOkayReallyInitializeIt()
    f.doSomething()

whereas what I was trying to suggest in the previous thread is more 
like:

    f = Foo.giveMeAFullyInitializedFoo()
    f.doSomething()

where giveMeAFullyInitializedFoo() looks like:

    @classmethod
    def giveMeAFullyInitializedFoo(cls):
        self = cls()
        self._noOkayReallyInitializeIt()
        # note that was private!  let's not expose implementation 
details!
        return self

But, although I still think this is generally good practice, it doesn't 
solve the underlying problem I think you're really getting at: 
consistency and convenience in the face of Deferred-ness.  Applications 
have to handle Deferreds from the connection's methods anyway, and 
there's no reason to force them to all have code to handle at least two 
(one for the connection, one for the actual application-level message), 
where one would do fine.

(In fact, when you look at it like that, it's not really a problem about 
Deferreds at all: this would be a problem if applications all had to 
blockingly call maybeConnectIfYoureNotConnectedYet() themselves and 
properly handle all the errors it might produce.)
>Anyway.... fast forward 6 months and I've hit the same problem again. 
>It's
>with existing code, in which I would like an __init__ to call something
>that (now, due to changes elsewhere) returns a deferred. So I started
>thinking again, and came up with a much cleaner way to do the alternate
>approach via a class mixin:

I think I like this a bit better than your earlier approaches.  It's 
automatic, its semantics are pretty clear, and it doesn't require any 
abuse of __init__'s implicit contract; your instance *is* in a fully 
valid state when it's created, it's just a different state than the 
state that it's in later.  However, you can still call all the same 
methods and get the same results.

It still has one major flaw given your earlier example of a database 
connection (as I described above): it doesn't handle errors very well.

In particular - and this is why you really need a state machine - it 
doesn't handle the case where errors start happening *later*.

It's also got a few implementation issues that you might not be aware of 
though - and you seem to appreciate a lot of detail in these responses, 
so I'll just look at it line by line, code-review style.

I apologize in advance if this sounds like I'm being hypercritical - I 
realize you may have omitted certain details to keep this brief for 
discussion and so may have been aware of most of these problems.  Again, 
even if you fully understood all of these details I am sure there are 
many readers who didn't though :).
>    from twisted.internet import defer
>
>    class deferredInitMixin(object):
>        def wrap(self, d, *wrappedMethods):

Just as a point of convenience, I would have automatically determined 
this list of method names by using a decorator or something.  Having it 
as a static list in the method invocation seems to me like it would be 
very easy to forget to add or remove a method from the list, and it 
would make diffs that touched a user of this class always have two hunks 
for adding a method; one at the method definition site, one at the call 
to wrap().

Also, it's not really clear to me how cooperative invocations of wrap() 
are meant to work with inheritance.  Using a decorator on methods which 
were intended to be deferred wouldn't fully solve that problem (you've 
still got to sort out what order methods get restored in, or if there 
are multiple calls to wrap() in different places in the inheritance tree 
which methods go with which Deferreds) but it would at least provide a 
convenient starting place to put that information.
>            self.waiting = []
>            self.stored = {}

I'd make these attributes private if I were you.  I am pretty sure that 
you don't ever want application code poking around in there :).
>            def restore(_):
>                for method in self.stored:
>                    setattr(self, method, self.stored[method])

The reference you're cleaning up here has some edge-cases.  For example, 
if some other code comes along and grabs what it thinks is a regular 
bound method from your instance, and then invokes it after the Deferred 
has completed, it will still have the original method.

Because of this, and issues like it, it's often better to have a 
decorator which works more like a regular method, and changes the 
behavior of the method rather than dynamically replacing the method on 
the instance.

There are also some less severe, but potentially very confusing issues 
with making every instance of your class always participate in a 
bazillion circular references.  By itself, this isn't really worth 
worrying about (Python added a garbage collector for a reason, after 
all) but it has historically been problematic in areas like making 
debugging memory leaks tricky.  Especially when the circular references 
run through stack frames which refer to Deferreds :).  So if you do 
dynamically replace a method on a class, it's better to clean it up with 
delattr() than a subsequent setattr().
>                for d in self.waiting:
>                    d.callback(None)
>
>            def makeWrapper(method):
>                def wrapper(*args, **kw):
>                    d = defer.Deferred()
>                    d.addCallback(lambda _: self.stored[method](*args, 
>**kw))
>                    self.waiting.append(d)
>                    return d
>                return wrapper

This wrapper doesn't preserve function metadata, so repr()s are going to 
look weird and certain kinds of introspection will break.  Granted, you 
probably don't care about pickling this class, but again, it makes 
debugging tricky when it looks like every method you're calling 
everywhere is actually called 'wrapper'. 
twisted.python.util.mergeFunctionMetadata has an implementation of the 
dance required to do this (and I think some other decorator libraries 
have cuter / easier to use implementations of the same thing, this 
problem is not unique to Twisted).
>            for method in wrappedMethods:
>                self.stored[method] = getattr(self, method)
>                setattr(self, method, makeWrapper(method))

>            d.addCallback(restore)

Here, on the final line, we come to the more serious problem of this 
approach: there's no error handling.  If the underlying Deferred 
encounters an errback, then all methods of this class will forever 
return Deferreds that never fire.

Of course you could chalk up a failed connect Deferred to a failed 
startup and just reboot the process, but that pollutes your callers with 
knowledge of whether they're calling methods during startup.  More 
importantly and realistically though - there's something that happens 
*later* which is never covered.  What happens when we *lose* the 
connection to the database?  Assuming a sensible underlying interface, 
everybody starts getting errbacked Deferreds, but in most systems like 
this you want some recovery facility.  And then you're not talking about 
just interesting behavior of __init__, but potentially of every method 
on the entire class.

As I mentioned above, we've implemented this mechanism in other 
projects.  One of them is Axiom.  Axiom has a batch-processing service 
which is a process pool that starts on demand, and tries to present a 
consistent interface to its callers regardless of what state the actual 
processes are in.  (This was written in no small part because we were 
using libraries which were flaky and unreliable and wanted to isolate 
their usage behind a nice facade which wouldn't freak out if they 
segfaulted.)

You can see a usage of our library here, which I believe meshes with 
your use-case:

http://divmod.org/trac/browser/trunk/Axiom/axiom/batch.py?rev=15165#L709

What you see there is a "mode" being defined - i.e. custom behavior of a 
set of methods - for the "starting" state.  You'll notice there's a 
"waitingForProcess" list, which implements a similar pattern to the one 
you described above.  And you can see a detailed description of all the 
states in the docstring:

http://divmod.org/trac/browser/trunk/Axiom/axiom/batch.py?rev=15165#L709

The library being used is here:

http://divmod.org/trac/browser/trunk/Epsilon/epsilon/modal.py?rev=6111

and since the batch-processor example is pretty involved and is doing a 
ton of other stuff, it behooves me to provide a simplified example which 
demonstrates how the simplest example of this pattern might be 
implemented.  I was originally going to include it inline here, but it 
turned out to be >100 lines of code to get the whole idea across, so I 
put it up here:

    http://divmod.org/trac/browser/sandbox/glyph/modality.py?rev=17275

This is still missing a lot of details, like for example handling truly 
failed connections (i.e. invalid credentials), timeouts and backoff, 
redirects, etc.  Still, I hope it's somewhat obvious how you would add 
additional methods beyond "bork()" to that example.

It would be possible, I think, to implement a layer on top of 
epsilon.modal which would provide this pattern exactly so that you just 
need to plug in your retransmission and connection rules rather than 
doing it for every different application and protocol; that would be 
really cool.

epsilon.modal is missing a few useful features, and has a few bugs.  I'm 
hoping that by drawing attention to it we can get some contributions 
from people who are enthusiastic about abstractions like this (hi, 
Terry! ;-)) and perhaps get it folded into Twisted proper, where we 
might be able to use it to eliminate some duplication in places like 
twisted.protocols.basic, since protocol parsing is also a state-machine 
based thing.
>You use it as in the class Test below:

(snipped example usage since I think that was all pretty clear)
>I quite like this approach. (...) It's nice because you don't reply 
>with an error and there's
>no need for locking or other form of coordination - the work you need 
>done
>is already in progress, so you get back a fresh deferred and everything
>goes swimmingly.

IMHO this is a very important property.  The high-level abstract API 
should really have fewer failure modes and differing states for its 
callers to know about than the lower-level one - really that's the whole 
point :-).
>Comments welcome / wanted.

Enough comments for you? ;-)



From terry at jon.es  Tue May 12 07:39:21 2009
From: terry at jon.es (Terry Jones)
Date: Tue, 12 May 2009 13:39:21 +0200
Subject: [Twisted-Python] Consistent interfaces to
	asynchronous	partially-available services	using	Deferreds and
	state	machines (was Re: Another approach to allowing	__init__
	to	work with Deferreds)
In-Reply-To: Your message at 07:50:20 on Tuesday, 12 May 2009
References: <18952.20484.534748.921408@jon.es>
	<20090512075020.12555.1526761106.divmod.xquotient.11469@weber.divmod.com>
Message-ID: <18953.24553.54020.283769@jon.es>

Hi Glyph

>>>>> "glyph" == glyph  <glyph at divmod.com> writes:
> On 11 May, 04:19 pm, terry.jones at gmail.com wrote:
> 
> >I posted to this list back in Nov 2008 with subject:
> >A Python metaclass for Twisted allowing __init__ to return a Deferred
> 
> Let me try rephrasing your use-case here, for two reasons: one, I want to
> make sure I fully understand it, and two, I feel like the language this is
> couched in (hacks about __init__ and Deferreds and
> metaclass/mixin/decorator [ab]use) are detracting from the real core
> use-case here.

OK, fair enough. I'm happy to work upwards from my concrete problems to a
solution to a more general problem.

> You have a utility object which you want to create immediately and make
> immediately available to various pieces of calling code.  However, an
> instance of this class represents a shared interface to an external,
> asynchronous resource, to which you must establish a connection, and so
> you don't immediately have a connection when the class is created.

Yes, though I don't know why you use the word "shared". Perhaps because a
created instance might be passed to several other pieces of code that all
use it?

> However, you want to contain all this complexity behind a nice facade,
> and tell all the callers "just call these (Deferred-returning) methods
> and you will get sensible results no matter what state the connection is
> in".

Yes.

And as I mentioned in my later mail to Drew, a nice property of keeping the
complexity behind the interface is that when a vanilla class that is being
used in the manner you describe, is changed from being reliably in a single
state to having multiple states, the caller is not aware of that and does
not have to change how it instantiates or uses instances of the class.

> If my assessment of your use-case is flawed, please say so

Nope, that's about perfect.

> To skip ahead to the end: the answer is that you want a state-machine.
> And it is quite sad to me that Twisted doesn't have a nice, standard,
> full-featured state-machine class that we use for everything like this,
> because members of the Twisted team have implemented at least half a
> dozen of these, probably a lot more, in various applications.  I am like
> 90% sure that there's a ticket in the tracker for this, but I couldn't
> find it by searching around a bit.  I hope exarkun or jml or radix will
> have a better memory of this than I do.

I'll be interested to hear.

I've omitted a big chunk of your reply here - that I agree with and which
recaps what went down in the original thread and comments on Drew's
suggestion.

> But, although I still think this is generally good practice, it doesn't
> solve the underlying problem I think you're really getting at:
> consistency and convenience in the face of Deferred-ness.

I still like your approach (using a class method to hand you a fully
initialized instance), but didn't find it appropriate for my situation. The
main problem was that I was writing code in an __init__ method of a class
that was already in use by other code, including being called from the
__init__ method of other classes. Your solution is fine if you're in a
context where you can properly deal with deferreds. If you're not (e.g.,
you're in an __init__ method) then calling something that creates you an
instance of another class via a deferred just leaves you with the same
problem. I hope that's making sense.

Is the underlying problem "consistency and convenience in the face of
Deferred-ness"? You could look at it that way (and I'm happy to). My
__init__ case seems to be well summarized by my original comment:

    this is a general problem of the synchronous world (in which __init__
    is supposed to prepare a fully-fledged class instance and cannot return
    a deferred) meeting the asynchronous world in which we would like to
    (and must) use deferreds.

If Python allowed me to return a deferred from __init__, my problem would
vanish.  That's not going to happen though, I know :-)

Yours would remain though, and as you say, it's more general.

> Applications have to handle Deferreds from the connection's methods
> anyway, and there's no reason to force them to all have code to handle at
> least two (one for the connection, one for the actual application-level
> message), where one would do fine.

I'm not 100% sure that I follow this, but I think so.

> >Anyway.... fast forward 6 months and I've hit the same problem again.
> >It's with existing code, in which I would like an __init__ to call
> >something that (now, due to changes elsewhere) returns a deferred. So I
> >started thinking again, and came up with a much cleaner way to do the
> >alternate approach via a class mixin:
> 
> I think I like this a bit better than your earlier approaches.  It's
> automatic, its semantics are pretty clear, and it doesn't require any abuse
> of __init__'s implicit contract; your instance *is* in a fully valid state
> when it's created, it's just a different state than the state that it's in
> later.  However, you can still call all the same methods and get the same
> results.

Yes, those are the advantages. And the different state will, in most use
cases (I claim), be quite fleeting. It's that short-term not-quite-ready
window that the temporary state accounts for. And if the not-quite-ready
happens to not be short, then providing functionality like this (not
necessarily my implementation) is even more important.

I mention all this, for clarity, not for you - I know you already know -
but for others who might be reading along now or later.

> It still has one major flaw given your earlier example of a database
> connection (as I described above): it doesn't handle errors very well.

Right.

> In particular - and this is why you really need a state machine - it
> doesn't handle the case where errors start happening *later*.

OK, more on this below.

> It's also got a few implementation issues that you might not be aware of
> though - and you seem to appreciate a lot of detail in these responses,
> so I'll just look at it line by line, code-review style.

Yes, that's great, and thanks.

> I apologize in advance if this sounds like I'm being hypercritical - I
> realize you may have omitted certain details to keep this brief for
> discussion and so may have been aware of most of these problems.  Again,
> even if you fully understood all of these details I am sure there are
> many readers who didn't though :)

Some I'm aware of and skipped, others not.  I never know how much detail to
provide / go into, or if I'm bugging people on the list, etc.

> >    from twisted.internet import defer
> >
> >    class deferredInitMixin(object):
> >        def wrap(self, d, *wrappedMethods):
> 
> Just as a point of convenience, I would have automatically determined this
> list of method names by using a decorator or something.  Having it as a
> static list in the method invocation seems to me like it would be very easy
> to forget to add or remove a method from the list, and it would make diffs
> that touched a user of this class always have two hunks for adding a
> method; one at the method definition site, one at the call to wrap().

I started out trying to write this using decorators. But I didn't really
see how to do it. I was using two - one for __init__ and one for the
wrapped functions. I also tried with decorators and a super class. In the
end I saw a simple way to do it with the mixin, so went for that. I'd be
happier with a decorator solution for the reasons you mention.

> Also, it's not really clear to me how cooperative invocations of wrap() are
> meant to work with inheritance.  Using a decorator on methods which were
> intended to be deferred wouldn't fully solve that problem (you've still got
> to sort out what order methods get restored in, or if there are multiple
> calls to wrap() in different places in the inheritance tree which methods
> go with which Deferreds) but it would at least provide a convenient
> starting place to put that information.

Yes....

> >            self.waiting = []
> >            self.stored = {}
> 
> I'd make these attributes private if I were you.  I am pretty sure that
> you don't ever want application code poking around in there :).

Right. A bad habit of mine. I did at least think of this afterwards :-)

> >            def restore(_):
> >                for method in self.stored:
> >                    setattr(self, method, self.stored[method])
> 
> The reference you're cleaning up here has some edge-cases.  For example,
> if some other code comes along and grabs what it thinks is a regular
> bound method from your instance, and then invokes it after the Deferred
> has completed, it will still have the original method.

You mean it will still have the wrapped method, I think. Agreed that's a
problem. I was originally going to look at d.called in the mixin class to
short-circuit the wrapped behavior if the deferred had fired. I should do
something like that, else the deferred from the wrapper will never fire -
which is what I think you're saying.

> There are also some less severe, but potentially very confusing issues
> with making every instance of your class always participate in a
> bazillion circular references.

I don't think I fully understand this. The instance of my class only has
wrapped functions for a (typically?) very short time. I don't see the
circular references, but OTOH I haven't thought about that at all...

> By itself, this isn't really worth worrying about (Python added a garbage
> collector for a reason, after all) but it has historically been
> problematic in areas like making debugging memory leaks tricky.
> Especially when the circular references run through stack frames which
> refer to Deferreds :).  So if you do dynamically replace a method on a
> class, it's better to clean it up with delattr() than a subsequent
> setattr().

You mean "then" a subsequent setattr, right?

And thanks, I didn't know that at all.

> This wrapper doesn't preserve function metadata

Right - that was something I deliberately left out. I've even used
t.p.u.mergeFunctionMetadata in the past :-)

> I think some other decorator libraries have cuter / easier to use
> implementations of the same thing, this problem is not unique to
> Twisted).

There's also functools.update_wrapper

> >            d.addCallback(restore)
> 
> Here, on the final line, we come to the more serious problem of this
> approach: there's no error handling.  If the underlying Deferred
> encounters an errback, then all methods of this class will forever return
> Deferreds that never fire.

Ah yes :-)

Side note: I recently escaped from a fundamentalist religious organization
amongst whose axioms are "There Are No Accidents", and "Everything Happens
For A Reason". Accordingly, they code in a version of Python that doesn't
even have exceptions, and use a fork of Twisted in which deferreds don't
have an errback chain.

Ahem. You're right. At the very least I should add an errback that errbacks
the waiting calls, probably restores the methods, and returns the failure.
That's not a full solution, but it's better.

> Of course you could chalk up a failed connect Deferred to a failed
> startup and just reboot the process, but that pollutes your callers with
> knowledge of whether they're calling methods during startup.

Yes. There's also the question of what failure to pass to them, suppose I
do errback them (which I think I should).

> More importantly and realistically though - there's something that
> happens *later* which is never covered.  What happens when we *lose* the
> connection to the database?  Assuming a sensible underlying interface,
> everybody starts getting errbacked Deferreds, but in most systems like
> this you want some recovery facility.  And then you're not talking about
> just interesting behavior of __init__, but potentially of every method on
> the entire class.

Yes, and now we're into more interesting territory, where your state
machine solution would be nice to have.

> As I mentioned above, we've implemented this mechanism in other projects.
> One of them is Axiom.  Axiom has a batch-processing service which is a
> process pool that starts on demand, and tries to present a consistent
> interface to its callers regardless of what state the actual processes are
> in.  (This was written in no small part because we were using libraries
> which were flaky and unreliable and wanted to isolate their usage behind a
> nice facade which wouldn't freak out if they segfaulted.)
> 
> You can see a usage of our library here, which I believe meshes with your
> use-case:
> 
> http://divmod.org/trac/browser/trunk/Axiom/axiom/batch.py?rev=15165#L709

OK, I'll go check this out. I'd have done it already but commenting on it
here would make this reply even longer.

> I was originally going to include it inline here, but it turned out to be
> >100 lines of code to get the whole idea across, so I put it up here:
> 
>     http://divmod.org/trac/browser/sandbox/glyph/modality.py?rev=17275
> 
> This is still missing a lot of details, like for example handling truly
> failed connections (i.e. invalid credentials), timeouts and backoff,
> redirects, etc.  Still, I hope it's somewhat obvious how you would add
> additional methods beyond "bork()" to that example.

Yes. It looks clean and nice. But I'll have to spend time reading it again
and thinking about it to say more.

> It would be possible, I think, to implement a layer on top of epsilon.modal
> which would provide this pattern exactly so that you just need to plug in
> your retransmission and connection rules rather than doing it for every
> different application and protocol; that would be really cool.

Yeah, I'd use it :-)

> epsilon.modal is missing a few useful features, and has a few bugs.  I'm
> hoping that by drawing attention to it we can get some contributions from
> people who are enthusiastic about abstractions like this (hi, Terry! ;-))

Glyph, hi!

> >I quite like this approach. (...) It's nice because you don't reply with
> >an error and there's no need for locking or other form of coordination -
> >the work you need done is already in progress, so you get back a fresh
> >deferred and everything goes swimmingly.
> 
> IMHO this is a very important property.  The high-level abstract API should
> really have fewer failure modes and differing states for its callers to
> know about than the lower-level one - really that's the whole point :-).

Yes, agreed.

> >Comments welcome / wanted.
> 
> Enough comments for you? ;-)

Yep, and thanks for taking so much time and going into detail. I'll no
doubt continue to think about this. And I'll go look at epsilon.modal.

Terry



From phil at bubblehouse.org  Tue May 12 10:47:38 2009
From: phil at bubblehouse.org (Phil Christensen)
Date: Tue, 12 May 2009 10:47:38 -0400
Subject: [Twisted-Python] Consistent interfaces to
	asynchronous	partially-available services	using	Deferreds and
	state	machines (was Re: Another approach to allowing	__init__
	to	work with Deferreds)
In-Reply-To: <18953.24553.54020.283769@jon.es>
References: <18952.20484.534748.921408@jon.es>
	<20090512075020.12555.1526761106.divmod.xquotient.11469@weber.divmod.com>
	<18953.24553.54020.283769@jon.es>
Message-ID: <C11CC21F-3C40-47EC-AB11-1FCF8BF284D6@bubblehouse.org>

On May 12, 2009, at 7:39 AM, Terry Jones wrote:
>> Just as a point of convenience, I would have automatically  
>> determined this
>> list of method names by using a decorator or something.  Having it  
>> as a
>> static list in the method invocation seems to me like it would be  
>> very easy
>> to forget to add or remove a method from the list, and it would  
>> make diffs
>> that touched a user of this class always have two hunks for adding a
>> method; one at the method definition site, one at the call to wrap().
>
> I started out trying to write this using decorators. But I didn't  
> really
> see how to do it. I was using two - one for __init__ and one for the
> wrapped functions. I also tried with decorators and a super class.  
> In the
> end I saw a simple way to do it with the mixin, so went for that.  
> I'd be
> happier with a decorator solution for the reasons you mention.

I don't know if I agree with the need for such a feature (that is,  
deferred __init__ usage), but it was a very interesting coding  
challenge I wanted to take a whack at. I *think* I might have found a  
solution, but I don't know if it falls under the heading of "decorator  
abuse" ;-)

Basically, it requires that the init method set an instance variable  
bound to a Deferred that will fire when the initialization is  
finished. Then, @deferredInit decorators applied to each instance  
method handle checking for and adding callbacks to that original  
"initDeferred".

This way, any method that depends on "complete instantiation" (which  
is probably most or all of them) can have the decorator applied, and  
will have itself added as a callback to the original initDeferred.

Right now, the name of the Deferred used by __init__ is hard coded,  
but you could easily make the decorator take an argument that  
specifies the name to use.

This appears to work for me, but there's a lot of stuff I'm still  
learning about deferreds, and although I read most of this thread, I  
may have missed a use case that won't work in this manner.

Still, it was a fun challenge ;-)

Let me know what you think:


     from twisted.internet import defer, reactor
     from twisted.enterprise import adbapi

     def deferredInit(func):
         if not(hasattr(deferredInit, 'waiting')):
             deferredInit.waiting = {}

         def _deferredInit(self, *args, **kwargs):
             waiting_for_init = self in deferredInit.waiting

             if not(waiting_for_init):
                 if(hasattr(self, 'initDeferred')):
                     deferredInit.waiting[self] = self.initDeferred
                 else:
                     raise RuntimeError("%s doesn't seem to support  
deferred instantion." % self.__class__.__name__)

             def _finish(result):
                 del deferredInit.waiting[self]
                 return func(self, *args, **kwargs)

             def _finish_error(failure):
                 print '_finish_err: %s' % failure

             resultDeferred = defer.Deferred()
             resultDeferred.addCallbacks(_finish, _finish_error)

              
deferredInit.waiting[self].addCallbacks(resultDeferred.callback,  
resultDeferred.errback)

             return resultDeferred

         return _deferredInit

     class TestDeferredInit(object):
         def __init__(self):
             self.pool = adbapi.ConnectionPool("MySQLdb", 'localhost',  
'test', 'test')
             self.initDeferred = self.pool.runQuery("SELECT 'it  
worked';")
             def _finish_init(msg):
                 self.msg = msg
             def _finish_init_error(failure):
                 print '_finish_init_err: %s' % failure
             self.initDeferred.addCallbacks(_finish_init,  
_finish_init_error)

         @deferredInit
         def query(self):
             return self.msg

     if(__name__ == '__main__'):
         def _print(msg):
             print msg
             reactor.stop()

         def _print_error(failure):
             print '_print_err: %s' % failure

         test = TestDeferredInit()

         d = test.query()
         d.addCallbacks(_print, _print_error)

         reactor.run()



From phil at bubblehouse.org  Tue May 12 10:52:59 2009
From: phil at bubblehouse.org (Phil Christensen)
Date: Tue, 12 May 2009 10:52:59 -0400
Subject: [Twisted-Python] Consistent interfaces to
	asynchronous	partially-available services	using	Deferreds and
	state	machines (was Re: Another approach to allowing	__init__
	to	work with Deferreds)
In-Reply-To: <C11CC21F-3C40-47EC-AB11-1FCF8BF284D6@bubblehouse.org>
References: <18952.20484.534748.921408@jon.es>
	<20090512075020.12555.1526761106.divmod.xquotient.11469@weber.divmod.com>
	<18953.24553.54020.283769@jon.es>
	<C11CC21F-3C40-47EC-AB11-1FCF8BF284D6@bubblehouse.org>
Message-ID: <E8B7D657-B506-49D3-93E8-7AB60F9E9432@bubblehouse.org>

On May 12, 2009, at 10:47 AM, Phil Christensen wrote:
> I don't know if I agree with the need for such a feature (that is,
> deferred __init__ usage), but it was a very interesting coding
> challenge I wanted to take a whack at. I *think* I might have found a
> solution, but I don't know if it falls under the heading of "decorator
> abuse" ;-)

Ugh, that code got fairly mangled by my email client. Here's an  
attachment.

-phil

-------------- next part --------------
A non-text attachment was scrubbed...
Name: init_deferred.py
Type: text/x-python-script
Size: 1874 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20090512/2e96f8d3/attachment.bin 
-------------- next part --------------


From matusis at yahoo.com  Tue May 12 20:32:44 2009
From: matusis at yahoo.com (Alec Matusis)
Date: Tue, 12 May 2009 17:32:44 -0700
Subject: [Twisted-Python] installation error
Message-ID: <052401c9d362$554bda60$ffe38f20$@com>

Installing 8.2.0:

 

creating
/web20/encap/python-2.4.4/lib/python2.4/site-packages/Twisted-8.2.0-py2.4-li
nux-x86_64.egg

Extracting Twisted-8.2.0-py2.4-linux-x86_64.egg to
/web20/encap/python-2.4.4/lib/python2.4/site-packages

  File
"/web20/encap/python-2.4.4/lib/python2.4/site-packages/Twisted-8.2.0-py2.4-l
inux-x86_64.egg/twisted/test/generator_failure_tests.py", line 66

    yield

         ^

SyntaxError: invalid syntax

Adding Twisted 8.2.0 to easy-install.pth file

 

 

I think generator_failure_tests.py expects python 2.5+

Perhaps it should skip this test for python 2.4?

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090512/9178ac46/attachment.htm 

From matusis at yahoo.com  Tue May 12 20:45:30 2009
From: matusis at yahoo.com (Alec Matusis)
Date: Tue, 12 May 2009 17:45:30 -0700
Subject: [Twisted-Python] installation error
In-Reply-To: <052401c9d362$554bda60$ffe38f20$@com>
References: <052401c9d362$554bda60$ffe38f20$@com>
Message-ID: <053801c9d364$1e477680$5ad66380$@com>

Sorry never mind: I found that there?s a ticket for it, and downloaded a
patch from:

http://twistedmatrix.com/trac/attachment/ticket/3578/compile_error_avoid.pat
ch

From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Alec Matusis
Sent: Tuesday, May 12, 2009 5:33 PM
To: 'Twisted general discussion'
Subject: [Twisted-Python] installation error

Installing 8.2.0:

creating
/web20/encap/python-2.4.4/lib/python2.4/site-packages/Twisted-8.2.0-py2.4-li
nux-x86_64.egg
Extracting Twisted-8.2.0-py2.4-linux-x86_64.egg to
/web20/encap/python-2.4.4/lib/python2.4/site-packages
? File
"/web20/encap/python-2.4.4/lib/python2.4/site-packages/Twisted-8.2.0-py2.4-l
inux-x86_64.egg/twisted/test/generator_failure_tests.py", line 66
??? yield
???????? ^
SyntaxError: invalid syntax
Adding Twisted 8.2.0 to easy-install.pth file


I think generator_failure_tests.py expects python 2.5+
Perhaps it should skip this test for python 2.4?




From lists at collab.nl  Tue May 12 20:46:25 2009
From: lists at collab.nl (Thijs Triemstra | Collab)
Date: Wed, 13 May 2009 01:46:25 +0100
Subject: [Twisted-Python] installation error
In-Reply-To: <052401c9d362$554bda60$ffe38f20$@com>
References: <052401c9d362$554bda60$ffe38f20$@com>
Message-ID: <DCC7D182-4A40-4FFE-97D3-A69A6560E468@collab.nl>

Hi,

this is a known issue and has been reported in this ticket:

http://twistedmatrix.com/trac/ticket/3243

And apparently it should be fixed once this ticket is fixed:

http://twistedmatrix.com/trac/ticket/1696

Cheers,

Thijs

On 13 May 2009, at 01:32, Alec Matusis wrote:

> Installing 8.2.0:
>
> creating /web20/encap/python-2.4.4/lib/python2.4/site-packages/ 
> Twisted-8.2.0-py2.4-linux-x86_64.egg
> Extracting Twisted-8.2.0-py2.4-linux-x86_64.egg to /web20/encap/ 
> python-2.4.4/lib/python2.4/site-packages
>   File "/web20/encap/python-2.4.4/lib/python2.4/site-packages/ 
> Twisted-8.2.0-py2.4-linux-x86_64.egg/twisted/test/ 
> generator_failure_tests.py", line 66
>     yield
>          ^
> SyntaxError: invalid syntax
> Adding Twisted 8.2.0 to easy-install.pth file
>
>
> I think generator_failure_tests.py expects python 2.5+
> Perhaps it should skip this test for python 2.4?
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090513/abd3c325/attachment.htm 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 194 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20090513/abd3c325/attachment.pgp 

From bbxx789_05ss at yahoo.com  Wed May 13 02:08:28 2009
From: bbxx789_05ss at yahoo.com (bbxx789_05ss at yahoo.com)
Date: Tue, 12 May 2009 23:08:28 -0700 (PDT)
Subject: [Twisted-Python] can't get a simple client/server example to work!
Message-ID: <817079.14381.qm@web59406.mail.ac4.yahoo.com>

Here is the server code:-------------from twisted.internet.protocol import Protocol, Factoryfrom twisted.internet import reactorimport sys
class MyServer(Protocol):?? ?def connectionMade(self):
?? ? ? ?self.transport.write("Hello")
factory = Factory()factory.protocol = ?MyServer
reactor.listenTCP(2000, factory)
reactor.run()-----------

Here is the client code:--------------from twisted.internet.protocol import Protocol, ClientCreatorfrom twisted.internet import reactorimport sys
class MyClient(Protocol):?? ?def dataReceived(self, data):?? ? ? ?sys.stdout.write(data)?? ? ? ?self.transport.loseConnection()------------
What do I need to add to the client code to make it connect to the server? ?I think the "How To" documentation is woefully inadequate. ?For instance, it says this:
----Here is a simple example:from twisted.internet.protocol import Protocol
from sys import stdout

class Echo(Protocol):
    def dataReceived(self, data):
        stdout.write(data)------
Anyone who knows even a little bit of python should be able to recognize that that code does absolutely nothing. ?


      
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090512/7ee49253/attachment.htm 

From adam.bcn at gmail.com  Wed May 13 04:08:06 2009
From: adam.bcn at gmail.com (Adam)
Date: Wed, 13 May 2009 10:08:06 +0200
Subject: [Twisted-Python] can't get a simple client/server example to
	work!
In-Reply-To: <817079.14381.qm@web59406.mail.ac4.yahoo.com>
References: <817079.14381.qm@web59406.mail.ac4.yahoo.com>
Message-ID: <4983dddf0905130108i19ec89d7y407389d99b1540ff@mail.gmail.com>

2009/5/13 bbxx789_05ss at yahoo.com <bbxx789_05ss at yahoo.com>

> Here is the server code:-------------
> from twisted.internet.protocol import Protocol, Factory
> from twisted.internet import reactor
> import sys
>
> class MyServer(Protocol):
>     def connectionMade(self):
>         self.transport.write("Hello")
>
> factory = Factory()
> factory.protocol =  MyServer
>
> reactor.listenTCP(2000, factory)
> reactor.run()
> -----------
>
>
> Here is the client code:
> --------------
> from twisted.internet.protocol import Protocol, ClientCreator
> from twisted.internet import reactor
> import sys
>
> class MyClient(Protocol):
>     def dataReceived(self, data):
>         sys.stdout.write(data)
>         self.transport.loseConnection()
> ------------
>
> What do I need to add to the client code to make it connect to the server?
>  I think the "How To" documentation is woefully inadequate.  For instance,
> it says this:
>
> ----
>
> Here is a simple example:
>
> from twisted.internet.protocol import Protocolfrom sys import stdout
> class Echo(Protocol):
>     def dataReceived(self, data):
>         stdout.write(data)
>
> ------
>
> Anyone who knows even a little bit of python should be able to recognize
> that that code does absolutely nothing.
>


Greetings nameless-and-frustrated Twisted beginner!  Have a look at the
echoclient.py example, which you can download here:

http://twistedmatrix.com/projects/core/documentation/examples/index.html

Essentially you also need to create an EchoFactory and set it to run within
a reactor (notice that your server example already does this).

Hope that helps,

~Adam
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090513/09c60255/attachment.htm 

From itamar at itamarst.org  Wed May 13 07:43:11 2009
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 13 May 2009 07:43:11 -0400
Subject: [Twisted-Python] can't get a simple client/server example to
 work!
In-Reply-To: <817079.14381.qm@web59406.mail.ac4.yahoo.com>
References: <817079.14381.qm@web59406.mail.ac4.yahoo.com>
Message-ID: <1242214991.22389.8.camel@pintsize>

Have you read the client-side howto?

http://twistedmatrix.com/projects/core/documentation/howto/clients.html




From rlotun at gmail.com  Wed May 13 12:22:49 2009
From: rlotun at gmail.com (Reza Lotun)
Date: Wed, 13 May 2009 17:22:49 +0100
Subject: [Twisted-Python] How do I turn off certain log messages?
Message-ID: <95bb10690905130922x24b3ffcem657634bfd0af396@mail.gmail.com>

Hi,

I was just wondering about the best way to customize twisted logging -
specifically, I'd like to remove the:
"Starting factory.."
and "Stopping factory.."

log messages that pop up whenever I use twisted.web.client
HTTPClientFactory. Is it simply a matter of writing a custom Logging
Observer and specifically filtering those kinds of messages? I run a
twisted.web server with twistd (with DailyLogFile) that for every
connection to it makes a number of web-service calls using web.client.
I want to have Apache style access logs and be able to spit out error
conditions *without* anything extraneous creeping in. What are the
idioms and best practices?

Thanks,
Reza

-- 
Reza Lotun
+44 (0)7521 310 763
rlotun at gmail.com



From exarkun at divmod.com  Wed May 13 13:02:37 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 13 May 2009 13:02:37 -0400
Subject: [Twisted-Python] How do I turn off certain log messages?
In-Reply-To: <95bb10690905130922x24b3ffcem657634bfd0af396@mail.gmail.com>
Message-ID: <20090513170237.21531.606480413.divmod.quotient.20364@henry.divmod.com>

On Wed, 13 May 2009 17:22:49 +0100, Reza Lotun <rlotun at gmail.com> wrote:
>Hi,
>
>I was just wondering about the best way to customize twisted logging -
>specifically, I'd like to remove the:
>"Starting factory.."
>and "Stopping factory.."
>
>log messages that pop up whenever I use twisted.web.client
>HTTPClientFactory. Is it simply a matter of writing a custom Logging
>Observer and specifically filtering those kinds of messages?

For this particular case, you can set `noisy? to False on the factory
and it will stop logging those messages at all.

>I run a
>twisted.web server with twistd (with DailyLogFile) that for every
>connection to it makes a number of web-service calls using web.client.
>I want to have Apache style access logs and be able to spit out error
>conditions *without* anything extraneous creeping in. What are the
>idioms and best practices?

If you'd like a separate http access log, Site supports this if you
tell it where to put it - pass a name for the logPath parameter.  That
log file will just get access info (and the info will no longer appear
in your main log).

It is entirely possible to do this the way you suggested - by writing a
custom log observer and either picking just the messages you like to log
or by filtering out any messages you don't like to skip (or any other
custom logic you might like) - but it's probably simpler to use the noisy
feature or the logPath feature, in this case.

Jean-Paul



From bbxx789_05ss at yahoo.com  Wed May 13 13:28:19 2009
From: bbxx789_05ss at yahoo.com (bbxx789_05ss at yahoo.com)
Date: Wed, 13 May 2009 10:28:19 -0700 (PDT)
Subject: [Twisted-Python] can't get a simple client/server example to
	work!
Message-ID: <419375.143.qm@web59401.mail.ac4.yahoo.com>


Hi,


--- On Wed, 5/13/09, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:

>
> Have you read the client-side howto?
> 
> http://twistedmatrix.com/projects/core/documentation/howto/clients.html
> 
> 

Have you read my email?



      




From bbxx789_05ss at yahoo.com  Wed May 13 13:33:18 2009
From: bbxx789_05ss at yahoo.com (bbxx789_05ss at yahoo.com)
Date: Wed, 13 May 2009 10:33:18 -0700 (PDT)
Subject: [Twisted-Python] can't get a simple client/server example to
	work!
Message-ID: <330031.12475.qm@web59406.mail.ac4.yahoo.com>


Hi,



--- On Wed, 5/13/09, Adam <adam.bcn at gmail.com> wrote:

> From: Adam <adam.bcn at gmail.com>
> Subject: Re: [Twisted-Python] can't get a simple client/server example to work!
> To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
> Date: Wednesday, May 13, 2009, 1:08 AM
> 2009/5/13 bbxx789_05ss at yahoo.com
> <bbxx789_05ss at yahoo.com>
> 
> 
> Here is the server
> code:-------------from
> twisted.internet.protocol import Protocol,
> Factoryfrom twisted.internet import
> reactorimport sys
> class MyServer(Protocol):
> ?? ?def connectionMade(self):
> ?? ? ?
> ?self.transport.write("Hello")
> factory = Factory()factory.protocol =
> ?MyServer
> reactor.listenTCP(2000, factory)
> 
> reactor.run()-----------
> 
> Here is the client
> code:--------------from
> twisted.internet.protocol import Protocol,
>  ClientCreatorfrom twisted.internet import
> reactorimport sys
> class MyClient(Protocol):?? ?def
> dataReceived(self, data):?? ? ?
> ?sys.stdout.write(data)
> ?? ? ?
> ?self.transport.loseConnection()------------
> What do I need to add to the client code to make
> it connect to the server? ?I think the "How To"
> documentation is woefully inadequate. ?For instance, it
> says this:
> 
> ----Here is a simple example:
> from
> twisted.internet.protocol
> import Protocol
> from sys import stdout
> 
> class Echo(Protocol):
>     def dataReceived(self,
> data):
>        
> stdout.write(data)------
> Anyone who knows even a little bit of python
> should be able to recognize that that code does absolutely
> nothing. ?
> 
> 
> Greetings nameless-and-frustrated Twisted beginner!? Have
> a look at the echoclient.py example, which you can download
> here:
> 
> http://twistedmatrix.com/projects/core/documentation/examples/index.html
> 
> 
> Essentially you also need to create an EchoFactory and set
> it to run within a reactor (notice that your server example
> already does this).
> 
> Hope that helps,
> 
> ~Adam
> 

I can't get anything to work.  I asked a simple question, but I can't seem to pry an answer out of this group, and the simple examples in the documentation are incomplete.  I've decided not to pursue Twisted any longer.  Don't bother responding.  I am unsubscribing.







      




From robert at gravina.com  Wed May 13 23:32:22 2009
From: robert at gravina.com (Robert Gravina)
Date: Thu, 14 May 2009 12:32:22 +0900
Subject: [Twisted-Python] can't get a simple client/server example to
	work!
In-Reply-To: <330031.12475.qm@web59406.mail.ac4.yahoo.com>
References: <330031.12475.qm@web59406.mail.ac4.yahoo.com>
Message-ID: <dad637010905132032i8398291kb4c53ec26cb53b3b@mail.gmail.com>

2009/5/14 bbxx789_05ss at yahoo.com <bbxx789_05ss at yahoo.com>:

> I can't get anything to work. ?I asked a simple question, but I can't seem to pry an answer out of this group, and the simple examples in the documentation are incomplete. ?I've decided not to pursue Twisted any longer. ?Don't bother responding. ?I am unsubscribing.
>

Please wait a moment. I've worked with Twisted for years and found
that community very helpful and the library very well covered with
beginner tutorials... I think it's just a matter of some
misunderstanding here.

Here is a simple client/server example:
http://twistedmatrix.com/projects/core/documentation/examples/index.html#auto0

Try that out, and see if you can get it to run;

But, in order to understand what's going on I think you should start here:
http://twistedmatrix.com/projects/core/documentation/howto/index.html

1) Read the introduction (mainly, Asynchronous Programming with
Twisted). This will introduce the basic Twisted concepts.

2) Follow the tutorials listed under "Tutorials" until you either get
to the last one or you feel you've learned enough for now. The very
first tutorial covers a simple client/server.

I remember doing this over an hour or so when I first discovered
Twisted and was it was a great experience.

If you need help, please ask again.

Robert



From terry at jon.es  Thu May 14 04:01:05 2009
From: terry at jon.es (Terry Jones)
Date: Thu, 14 May 2009 10:01:05 +0200
Subject: [Twisted-Python] Consistent interfaces to
	asynchronous	partially-available services	using	Deferreds and
	state	machines (was Re: Another approach to allowing	__init__
	to	work with Deferreds)
In-Reply-To: Your message at 10:47:38 on Tuesday, 12 May 2009
References: <18952.20484.534748.921408@jon.es>
	<20090512075020.12555.1526761106.divmod.xquotient.11469@weber.divmod.com>
	<18953.24553.54020.283769@jon.es>
	<C11CC21F-3C40-47EC-AB11-1FCF8BF284D6@bubblehouse.org>
Message-ID: <18955.53185.984111.643482@jon.es>

>>>>> "Phil" == Phil Christensen <phil at bubblehouse.org> writes:

Phil> I don't know if I agree with the need for such a feature (that is,
Phil> deferred __init__ usage), but it was a very interesting coding
Phil> challenge I wanted to take a whack at. I *think* I might have found a
Phil> solution, but I don't know if it falls under the heading of
Phil> "decorator abuse" ;-)

Hi Phil

I finally had time to look at your solution a bit (though I've not run
it). It does a couple of things I wouldn't have thought of, like putting
the dictionary onto the deferredInit function. A couple of comments,
supposing I understand your code properly:

 - One thing I had hoped to avoid was to slow the class methods down by
   having them always check the original deferred (or a flag) before taking
   action. My approach does this by moving them aside and then putting them
   back in place once the deferred fires. Your solution requires that every
   decorated method does several extra things before it gets going. That
   could be greatly reduced if you were to check self.initDeferred.called
   and simply call the original function if the deferred has fired.

 - If multiple calls are made to instance methods before the init deferred
   has fired, they will, as I read it, all try to del
   deferredInit.waiting[self] in _finish. So I guess that del needs to be
   conditional or in a try/except.

 - Using self as a key into the dict on initDeferred seems like it
   addresses Glyph's observation/criticism that my approach raises
   questions wrt inheritance.

 - You could use chainDeferred where you're currently using
   .addCallbacks(resultDeferred.callback, resultDeferred.errback)


That's all for now. I'll see if I have more time to think about all this.
When I tried to use a decorator the first time, I was also using a super
class (whereas you're putting state into a dict on the deferredInit
function) but I got into a mess accessing self properly (partly because, I
think, I wanted to have a mixin class and I was looking at
self.__class__.__mro__).

In any case, thanks for replying, for playing with it, and for posting your
code. I got to learn new things as a result, which is really great :-)

Terry



From rlotun at gmail.com  Thu May 14 07:04:48 2009
From: rlotun at gmail.com (Reza Lotun)
Date: Thu, 14 May 2009 12:04:48 +0100
Subject: [Twisted-Python] How do I turn off certain log messages?
In-Reply-To: <20090513170237.21531.606480413.divmod.quotient.20364@henry.divmod.com>
References: <95bb10690905130922x24b3ffcem657634bfd0af396@mail.gmail.com>
	<20090513170237.21531.606480413.divmod.quotient.20364@henry.divmod.com>
Message-ID: <95bb10690905140404i23579c70m7a7d2d382e19f21c@mail.gmail.com>

On Wed, May 13, 2009 at 6:02 PM, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> It is entirely possible to do this the way you suggested - by writing a
> custom log observer and either picking just the messages you like to log
> or by filtering out any messages you don't like to skip (or any other
> custom logic you might like) - but it's probably simpler to use the noisy
> feature or the logPath feature, in this case.
>
> Jean-Paul

Excellent, thanks! That's just what I was looking for.

Also, just for the sake of it - what are other people's suggestions
and gotchas for working with twisted.web? In the past few weeks I've
learned some new stuff just from skimming the list:
 - setting request.channel.persistent = False to force non persistent
connections
 - setting HTTPClientFactory.noisy = False to turn off log messages

Any other quick tips and tricks people could offer? ;-) I'm
particularly concerned with squeezing some performance out of the
web.server and also web.client.

Thanks!
Reza


-- 
Reza Lotun
+44 (0)7521 310 763
rlotun at gmail.com



From rlotun at gmail.com  Thu May 14 07:10:36 2009
From: rlotun at gmail.com (Reza Lotun)
Date: Thu, 14 May 2009 12:10:36 +0100
Subject: [Twisted-Python] Recompiling _epoll.pyx
Message-ID: <95bb10690905140410q466a67c7wd5c38e921453e613@mail.gmail.com>

Hi,

I noticed in the documentation for _epoll.pyx that the corresponding
.c file was generated using pyrex 0.9.4.1. On a whim I downloaded
0.9.8.5 and regenerated the file and rebuilt python. I'm currently
testing my server but noticing nothing out of the ordinary.

Before I march on my merry way I was wondering if there could be any
potential pitfall of using the non-standard _epoll.c? I only though to
try it because
- I'm using Python 2.6 which I compiled from source
- I'm using Twisted trunk
- A quick glance between pyrex 0.9.4.1 to 0.9.8.5 showed a lot of
activity, some of which seemed marked with "bug fix" and "more
efficient code"
- I'm currently stress testing my server and wanted to see what sort
of changes could be induced by modifying different parts of the
system.

Anyway, just wondering.

Cheers,
Reza


-- 
Reza Lotun
+44 (0)7521 310 763
rlotun at gmail.com



From rlotun at gmail.com  Thu May 14 07:15:15 2009
From: rlotun at gmail.com (Reza Lotun)
Date: Thu, 14 May 2009 12:15:15 +0100
Subject: [Twisted-Python] Recompiling _epoll.pyx
In-Reply-To: <95bb10690905140410q466a67c7wd5c38e921453e613@mail.gmail.com>
References: <95bb10690905140410q466a67c7wd5c38e921453e613@mail.gmail.com>
Message-ID: <95bb10690905140415q4cabab06g88809a7593296256@mail.gmail.com>

> I noticed in the documentation for _epoll.pyx that the corresponding
> .c file was generated using pyrex 0.9.4.1. On a whim I downloaded
> 0.9.8.5 and regenerated the file and rebuilt python. I'm currently

Sorry, meant to say "rebuilt twisted".


-- 
Reza Lotun
+44 (0)7521 310 763
rlotun at gmail.com



From itamar at itamarst.org  Thu May 14 08:38:47 2009
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 14 May 2009 08:38:47 -0400
Subject: [Twisted-Python] How do I turn off certain log messages?
In-Reply-To: <95bb10690905140404i23579c70m7a7d2d382e19f21c@mail.gmail.com>
References: <95bb10690905130922x24b3ffcem657634bfd0af396@mail.gmail.com>
	<20090513170237.21531.606480413.divmod.quotient.20364@henry.divmod.com>
	<95bb10690905140404i23579c70m7a7d2d382e19f21c@mail.gmail.com>
Message-ID: <1242304727.22389.27.camel@pintsize>

On Thu, 2009-05-14 at 12:04 +0100, Reza Lotun wrote:

>  - setting request.channel.persistent = False to force non persistent
> connections

> I'm particularly concerned with squeezing some performance out of the
> web.server and also web.client.

Those two things are contradictory - persistent connections speed things
up :)




From rlotun at gmail.com  Thu May 14 09:49:03 2009
From: rlotun at gmail.com (Reza Lotun)
Date: Thu, 14 May 2009 14:49:03 +0100
Subject: [Twisted-Python] How do I turn off certain log messages?
In-Reply-To: <1242304727.22389.27.camel@pintsize>
References: <95bb10690905130922x24b3ffcem657634bfd0af396@mail.gmail.com>
	<20090513170237.21531.606480413.divmod.quotient.20364@henry.divmod.com>
	<95bb10690905140404i23579c70m7a7d2d382e19f21c@mail.gmail.com>
	<1242304727.22389.27.camel@pintsize>
Message-ID: <95bb10690905140649x6c1a5388pf7c43670bd34818c@mail.gmail.com>

On Thu, May 14, 2009 at 1:38 PM, Itamar Shtull-Trauring
<itamar at itamarst.org> wrote:
>> ?- setting request.channel.persistent = False to force non persistent
>> connections
>
>> I'm particularly concerned with squeezing some performance out of the
>> web.server and also web.client.
>
> Those two things are contradictory - persistent connections speed things
> up :)

That was my general impression, but I'm using HAProxy for a load
balancer, and its documentation has this snippet:

"Keep-alive was invented to reduce CPU usage on servers when CPUs were
100 times slower. But what is not said is that persistent connections
consume a lot of memory while not being usable by anybody except the
client who openned them. Today in 2009, CPUs are very cheap and memory
is still limited to a few gigabytes by the architecture or the price.
If a site needs keep-alive, there is a real problem. Highly loaded
sites often disable keep-alive to support the maximum number of
simultaneous clients. The real downside of not having keep-alive is a
slightly increased latency to fetch objects. Browsers double the
number of concurrent connections on non-keepalive sites to compensate
for this. "

So, I really should have mentioned that because HAProxy doesn't
currently support persistent connections, I want to force them to be
off.

Cheers,
Reza


-- 
Reza Lotun
+44 (0)7521 310 763
rlotun at gmail.com



From phil at bubblehouse.org  Thu May 14 11:48:02 2009
From: phil at bubblehouse.org (Phil Christensen)
Date: Thu, 14 May 2009 11:48:02 -0400
Subject: [Twisted-Python] Consistent interfaces to
	asynchronous	partially-available services	using	Deferreds and
	state	machines (was Re: Another approach to allowing	__init__
	to	work with Deferreds)
In-Reply-To: <18955.53185.984111.643482@jon.es>
References: <18952.20484.534748.921408@jon.es>
	<20090512075020.12555.1526761106.divmod.xquotient.11469@weber.divmod.com>
	<18953.24553.54020.283769@jon.es>
	<C11CC21F-3C40-47EC-AB11-1FCF8BF284D6@bubblehouse.org>
	<18955.53185.984111.643482@jon.es>
Message-ID: <F6B5BCFC-C3F7-4673-A7C3-15460B92A948@bubblehouse.org>

On May 14, 2009, at 4:01 AM, Terry Jones wrote:
>>>>>> "Phil" == Phil Christensen <phil at bubblehouse.org> writes:
>
> Phil> I don't know if I agree with the need for such a feature (that  
> is,
> Phil> deferred __init__ usage), but it was a very interesting coding
> Phil> challenge I wanted to take a whack at. I *think* I might have  
> found a
> Phil> solution, but I don't know if it falls under the heading of
> Phil> "decorator abuse" ;-)
>
> Hi Phil
>
> I finally had time to look at your solution a bit (though I've not run
> it). It does a couple of things I wouldn't have thought of, like  
> putting
> the dictionary onto the deferredInit function. A couple of comments,
> supposing I understand your code properly:
>
> - One thing I had hoped to avoid was to slow the class methods down by
>   having them always check the original deferred (or a flag) before  
> taking
>   action. My approach does this by moving them aside and then  
> putting them
>   back in place once the deferred fires. Your solution requires that  
> every
>   decorated method does several extra things before it gets going.  
> That
>   could be greatly reduced if you were to check  
> self.initDeferred.called
>   and simply call the original function if the deferred has fired.

Yeah, I see what you mean. I changed it to directly call the function  
if the initDeferred has already been fired. One catch is that I think  
it's important that the function always return a Deferred, even if  
it's just a succeed() wrapper, so as to provide a consistent interface  
whether __init__ is finished or not.

I added a couple additional calls to my test example to illustrate this.

> - If multiple calls are made to instance methods before the init  
> deferred
>   has fired, they will, as I read it, all try to del
>   deferredInit.waiting[self] in _finish. So I guess that del needs  
> to be
>   conditional or in a try/except.

I realized there's no reason to keep a dictionary anyways, since you  
always have access to `self`. The result means less bookkeeping, which  
is always good...

> - Using self as a key into the dict on initDeferred seems like it
>   addresses Glyph's observation/criticism that my approach raises
>   questions wrt inheritance.

I believe even though I removed that state dictionary, this should  
still work properly, since we always operate on/with `self`.

> - You could use chainDeferred where you're currently using
>   .addCallbacks(resultDeferred.callback, resultDeferred.errback)

Ah yes. I forgot this existed; a lot of my Deferred experience is with  
sequential processes, so I've been using inlineCallbacks for everything.

> That's all for now. I'll see if I have more time to think about all  
> this.
> When I tried to use a decorator the first time, I was also using a  
> super
> class (whereas you're putting state into a dict on the deferredInit
> function) but I got into a mess accessing self properly (partly  
> because, I
> think, I wanted to have a mixin class and I was looking at
> self.__class__.__mro__).
>
> In any case, thanks for replying, for playing with it, and for  
> posting your
> code. I got to learn new things as a result, which is really great :-)

Yeah, same here. It's pretty rare that I can get into any 'semi- 
advanced' discussions on here (things often seem to go between one  
extreme and the other), but I always learn lots when I do.

I'm still not sure if I would use this technique myself, but I'm  
reasonably satisfied with the "scent" of this code. Obviously though,  
I haven't thought through a whole bunch of use cases, but it seems to  
be pretty simple, in the end.

I've attached the revised version of the decorator. Let me know if you  
think of anything else.

Thanks,

-phil

-------------- next part --------------
A non-text attachment was scrubbed...
Name: init_deferred.py
Type: text/x-python-script
Size: 2272 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20090514/71b81de9/attachment.bin 
-------------- next part --------------


From powdahound at gmail.com  Thu May 14 11:08:07 2009
From: powdahound at gmail.com (Garret Heaton)
Date: Thu, 14 May 2009 08:08:07 -0700
Subject: [Twisted-Python] XMPP/Jabber server example
In-Reply-To: <20090512020711.12555.543742607.divmod.xquotient.11154@weber.divmod.com>
References: <812f32000905110916p36cb564fic5ad31e21e5298c9@mail.gmail.com> 
	<20090512020711.12555.543742607.divmod.xquotient.11154@weber.divmod.com>
Message-ID: <812f32000905140808q54ffac56v22c65f9753ff46@mail.gmail.com>

Thanks for the help! I created a ticket requesting examples here:
http://twistedmatrix.com/trac/ticket/3837. If the recent interest in Twisted
+ XMPP<https://mailman.ik.nu/pipermail/twisted-jabber/2008-September/000155.html>continues
I'd be happy to contribute to the goals listed
here <http://twistedmatrix.com/trac/wiki/XMPPServerArchitecture>. Would love
to hear from ralphm and/or metajack on the current status of this effort.

On Mon, May 11, 2009 at 7:07 PM, <glyph at divmod.com> wrote:

>
> On 11 May, 04:16 pm, powdahound at gmail.com wrote:
> >I'm trying to create an XMPP server using twisted.words and am having
> >difficulty finding the correct way to make use of the classes provided.
> >I
> >was hoping someone might have an example or short explanation of which
> >classes would be used to create a very basic server (using the latest
> >classes<
> http://twistedmatrix.com/documents/8.2.0/api/twisted.words.protocols.jabber.xmlstream.html
> >from
> >8.2.0).
>
> I'm not confident of my own knowledge of twisted.words.*xmpp* to provide
> you an accurate answer.  I assume you've looked at doc/words/examples/
> and there's nothing up to date.  If so, this is a doc bug that needs to
> be reported - please file it on twistedmatrix.com.
> >(snip some great questions)
>
> Can you itemize these questions on the ticket so that we can make sure
> they're all answered for future comers?
> >Is there still work being done on the goals listed at
> >http://twistedmatrix.com/trac/wiki/XMPPServerArchitecture?
>
> Yes, but very slowly.  Please help out, submit patches and so on!  A
> useful bit of work would be to trawl around through the bugtracker and
> add links from that page to tickets describing individual bits of work
> and vice versa.  And perhaps to file tickets describing the bits of work
> which aren't described as tickets yet :).
>
> A good example of what I mean is this page:
>
>    http://twistedmatrix.com/trac/wiki/ReleaseAutomation
> >Thanks! Really enjoying Twisted so far.
>
> Thank you!
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Garret Heaton
http://garret.myplaxo.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090514/cf0e25e7/attachment.htm 

From asset at impactdamage.com  Thu May 14 19:14:45 2009
From: asset at impactdamage.com (asset)
Date: Thu, 14 May 2009 16:14:45 -0700
Subject: [Twisted-Python] Conch Checkers Help
Message-ID: <13475284$cdad88c$54959c6c$@com>

Can somebody point me into the right direction in how to switch out 
checkers.InMemoryUsernamePasswordDatabaseDontUse with something that would 
authenticate linux users, like root?

On some things i just cant seem to get past documentation and api docs.  
Hoping for a slight push in the right direction.  Also doesnt help that im 
new to linux.

Any help would be greatly appreciated.

BTW, Im going to be working on a multiline version of conch.recvline to 
handle edit chars when transitioning screen rows, etc.  Went through the 
pain of doing it with another raw terminal library and now id rather 
implement what i did with that in conch.  Hopefully i wont be reinventing a 
wheel i havent spotted.

TWKiel
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090514/145bc2cb/attachment.htm 

From paulswartz at gmail.com  Thu May 14 20:10:07 2009
From: paulswartz at gmail.com (Paul Swartz)
Date: Thu, 14 May 2009 20:10:07 -0400
Subject: [Twisted-Python] Conch Checkers Help
In-Reply-To: <13475284$cdad88c$54959c6c$@com>
References: <13475284$cdad88c$54959c6c$@com>
Message-ID: <4A0CB2DF.2070807@gmail.com>

On 05/14/2009 07:14 PM, asset wrote:
> Can somebody point me into the right direction in how to switch out
> checkers.InMemoryUsernamePasswordDatabaseDontUse with something that
> would authenticate linux users, like root?

You're probably looking for twisted.conch.checkers.UnixPasswordDatabase.

-p
-- 
Paul Swartz
paulswartz at gmail dot com
http://paulswartz.net/
AIM: z3penguin




From asset at impactdamage.com  Thu May 14 20:36:04 2009
From: asset at impactdamage.com (asset)
Date: Thu, 14 May 2009 17:36:04 -0700
Subject: [Twisted-Python] SPAM-LOW:  Re:  Conch Checkers Help
Message-ID: <1a64e53a$7c5fb89c$15fd570c$@com>

I tried that checker, but it failed authentication.  Im not sure if
theres a way to tell it which users can authenticate or if it just
succeeds with any valid user, but it would'nt go through.  I'm also not
sure if it was intended for linux distros like Ubuntu (which is what im
testing on).  I even tried running my application via sudo in case the
OS was blocking auth tests from a non priviledged user.


I think ill do some manual tests with the pwd module it uses in order to 
drill out why its not working.


Thx for your help Paul.


TWKiel

----------------------------------------
From: "Paul Swartz" <paulswartz at gmail.com>
Sent: Thursday, May 14, 2009 12:11 PM
To: asset at impactdamage.com, "Twisted general discussion" 
<twisted-python at twistedmatrix.com>
Subject: SPAM-LOW:  Re: [Twisted-Python] Conch Checkers Help 

On 05/14/2009 07:14 PM, asset wrote:
> Can somebody point me into the right direction in how to switch out
> checkers.InMemoryUsernamePasswordDatabaseDontUse with something that
> would authenticate linux users, like root?

You're probably looking for twisted.conch.checkers.UnixPasswordDatabase.

-p
-- 
Paul Swartz
paulswartz at gmail dot com
http://paulswartz.net/
AIM: z3penguin

 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090514/83065ec0/attachment.htm 

From coder_gus at lavabit.com  Fri May 15 04:11:58 2009
From: coder_gus at lavabit.com (coder_gus)
Date: Fri, 15 May 2009 11:11:58 +0300
Subject: [Twisted-Python] How to make a service dependent of another?
Message-ID: <4A0D23CE.7030908@lavabit.com>

Hi,
I have a pb client and a tcp server. How can I make the server start 
only after/if the client started?

Thanks.




From terry at jon.es  Fri May 15 04:46:00 2009
From: terry at jon.es (Terry Jones)
Date: Fri, 15 May 2009 10:46:00 +0200
Subject: [Twisted-Python] How to make a service dependent of another?
In-Reply-To: Your message at 11:11:58 on Friday, 15 May 2009
References: <4A0D23CE.7030908@lavabit.com>
Message-ID: <18957.11208.18435.745564@jon.es>

>>>>> "Gus" == coder gus <coder_gus at lavabit.com> writes:
Gus> I have a pb client and a tcp server. How can I make the server start 
Gus> only after/if the client started?

Hi Gus

You might take a look at the code here

  http://www.twistedmatrix.com/pipermail/twisted-python/2009-February/019249.html

and if you go back a couple of mails in that thread you'll see some more
discussion.  BTW, this approach hasn't received much comment, so you
shouldn't assume it's bulletproof or even recommended. But I use it many
times every day to launch about half a dozen twistd multiservices, and have
never had a problem.

You use it like a regular multiservice, but you can pass it a service which
is treated slightly specially. The other services you add will not be
started unless the service you pass to __init__ starts properly (you can
know this by having its startService return a deferred). Make sense?

Terry



From radix at twistedmatrix.com  Fri May 15 10:09:30 2009
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 15 May 2009 10:09:30 -0400
Subject: [Twisted-Python] How to make a service dependent of another?
In-Reply-To: <4A0D23CE.7030908@lavabit.com>
References: <4A0D23CE.7030908@lavabit.com>
Message-ID: <60ed19d40905150709k404448bdyf6dd3174454412b6@mail.gmail.com>

On Fri, May 15, 2009 at 4:11 AM, coder_gus <coder_gus at lavabit.com> wrote:
> Hi,
> I have a pb client and a tcp server. How can I make the server start
> only after/if the client started?

Basically, you want to call listenTCP in one of the callbacks that get
invoked when a client is successfully connected. There are a few of
these:

* the connectionMade method of your client protocol
* the clientConnectionMade method of your client factory
* the deferred that's returned from ClientCreator, if you're using it.

Depending on your situation and the factoring that you want, any of
these could be the most appropriate.

-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
http://canonical.com/



From exarkun at divmod.com  Fri May 15 10:38:01 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 15 May 2009 10:38:01 -0400
Subject: [Twisted-Python] How to make a service dependent of another?
In-Reply-To: <4A0D23CE.7030908@lavabit.com>
Message-ID: <20090515143801.21531.16278222.divmod.quotient.21221@henry.divmod.com>

On Fri, 15 May 2009 11:11:58 +0300, coder_gus <coder_gus at lavabit.com> wrote:
>Hi,
>I have a pb client and a tcp server. How can I make the server start
>only after/if the client started?

In general, the answer to "how do I do X when Y?" is "Put the code to do X
in the callback that tells you Y has happened."

So, for example, if you're using PBClientFactory.login, you might add a
callback to the Deferred it returns which starts your TCP server.  ie,


    f = PBClientFactory(...)
    d = f.login(...)
    def cbLoggedIn(avatar):
        reactor.listenTCP(...)
        ...
    d.addCallback(cbLoggedIn)
    ...
    reactor.connectTCP(..., f)
    reactor.run()

Jean-Paul



From luigiandcosolutions at gmail.com  Fri May 15 10:58:11 2009
From: luigiandcosolutions at gmail.com (Luigi Conte)
Date: Fri, 15 May 2009 16:58:11 +0200
Subject: [Twisted-Python] help using deferred
In-Reply-To: <20090511180121.21531.832920012.divmod.quotient.19615@henry.divmod.com>
References: <9cce290a0905111049j693150deye98c0129a977f070@mail.gmail.com>
	<20090511180121.21531.832920012.divmod.quotient.19615@henry.divmod.com>
Message-ID: <9cce290a0905150758n62cfe47bi628b0fa26fe0be0c@mail.gmail.com>

2009/5/11 Jean-Paul Calderone <exarkun at divmod.com>

> On Mon, 11 May 2009 19:49:19 +0200, Luigi Conte <
> luigiandcosolutions at gmail.com> wrote:
> >
> > [snip]
> >in my script I have to use connect method and then I have to do some
> >operations first of calling the start method
> >1) start connection
> >
> >    def startConnection(self):
> >        d = my_api.connect(self.ctrl_ip, self.ctrl_port, self.user,
> >self.pwd)
> >        d.addCallback(self.postConnection)
>
> Since you omitted the definition of postConnection, I have no way to know
> what this does.
>
> >        d.addErrback(twisted.python.log.err)
>
> Regardless, this is the wrong place to insert this errback.  You should
> read
> the Deferred documentation to learn what consequence it will have on your
> program's flow.
>
> http://twistedmatrix.com/projects/core/documentation/howto/defer.html is
> probably a good place to start.
>
> >        print "Connection added"
> >        return d
> >2) operation before starting a virtual machine:
> >def newVMCfg(self, new_vms_cfg):
> >       #...
> >       #some operations
> >       #if condition valid I try to start the virtual machine
> >                        # is this the correct way to pass args to the
> start
> >method?
> >                        d = self.d.addCallback(self.startVM,(new_vm,
> >self.lnms[i])
> >                        print "started vm %s"%new_vm
> >        return d
> >
> >in the main process I call them as:
> >d = startConnection()
> >d.addCallback(newVMCfg, arg)
> >
> >Is it correct? Because the process stops at the first method called: I see
> >only "connection added".
>
> That should indicate to you that something is going wrong after that print
> statement is reached.  So examine what your program tries to do after that
> point.  You may want to use a debugger.  You may want to try writing some
> unit tests.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>

I looked at the documentation and I understood something about defferd and
callbacks. I edited my code but it does nothing...
I'm going to explain the scenario and what I want to do:
- there is an api that provides some methods (connect, start, disconnect).
- all those methods return a deferred object
- I have an object that first tries to connect, then reads a file and calls
the start method many times in a loop cicle of his method.

I want to use the connect and wait until I'm really connected. How can I do
this using the deferred object that the api returns to me?
I want to do the same thing each time I call the start method from the api:
I want to wait the completing of start operation before doing another start
invocation.

so I do:
in the main process:
    d = gest.connettiCLI_to_CTRL()

in gest class I have:
    def connettiCLI_to_CTRL(self):
        d = api.connect(self.ctrl_ip, self.ctrl_port, self.user, self.pwd)
        d.addCallback(self.cbConnected)
        return d

    def cbConnected(self, connectResult):
        return self.postConnection()

    def postConnection(self):
        # I do something but I don't call api's methods here
        # then I go to the next step returning the next method
        return self.interpretaNewVMCfg(self.vms_cfg)

    def interpretaNewVMCfg(self, new_vms_cfg):
        for i in candidati:
            #start operation in loop
            #here I want to control each start operation
            d = api.startVM(new_vm, self.lnms[i])
        return d

thank you so much
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090515/1a48cb4f/attachment.htm 

From exarkun at twistedmatrix.com  Sun May 17 00:05:12 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 17 May 2009 04:05:12 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1242533112.76.1907360513@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090517/a4e07731/attachment.htm 

From arun.thampi at gmail.com  Mon May 18 07:34:20 2009
From: arun.thampi at gmail.com (Arun Thampi)
Date: Mon, 18 May 2009 19:34:20 +0800
Subject: [Twisted-Python] File persistence without blocking the main event
	loop?
Message-ID: <e2e56d2e0905180434g179aea44m930f7a06af91dcb6@mail.gmail.com>

Hi guys - I'm just beginning to learn about Twisted and was wondering if
there is a way to use the built-in Twisted persistence libraries such as
dirdbm etc. without blocking the main event loop? I read about an approach
which uses deferToThread (comment#3 here:
http://code.activestate.com/recipes/413609/) but if you are persisting quite
often, doesn't the creation of threads on every persist-call make it very
expensive?
Any pointers will be much appreciated.

Thanks guys!

Cheers,
Arun

-- 
It's better to be a pirate than join the Navy - Steve Jobs
http://arunthampi.wordpress.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090518/fabf2696/attachment.htm 

From itamar at itamarst.org  Mon May 18 08:31:56 2009
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 18 May 2009 08:31:56 -0400
Subject: [Twisted-Python] File persistence without blocking the main
 event loop?
In-Reply-To: <e2e56d2e0905180434g179aea44m930f7a06af91dcb6@mail.gmail.com>
References: <e2e56d2e0905180434g179aea44m930f7a06af91dcb6@mail.gmail.com>
Message-ID: <1242649916.27977.14.camel@pintsize>

On Mon, 2009-05-18 at 19:34 +0800, Arun Thampi wrote:
> Hi guys - I'm just beginning to learn about Twisted and was wondering
> if there is a way to use the built-in Twisted persistence libraries
> such as dirdbm etc. without blocking the main event loop? I read about
> an approach which uses deferToThread (comment#3
> here: http://code.activestate.com/recipes/413609/) but if you are
> persisting quite often, doesn't the creation of threads on every
> persist-call make it very expensive?

deferToThread uses a threadpool, so it's not *very* slow. It does slow
things down a bit, so it's better to do chunks of work rather than doing
writes separately. That being said, writing to disk in main eventloop is
often fast enough in practice, depending on how strong your latency
guarantees need to be.




From exarkun at divmod.com  Mon May 18 09:21:58 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 18 May 2009 09:21:58 -0400
Subject: [Twisted-Python] File persistence without blocking the main
 event loop?
In-Reply-To: <1242649916.27977.14.camel@pintsize>
Message-ID: <20090518132158.21531.1995018939.divmod.quotient.22772@henry.divmod.com>

On Mon, 18 May 2009 08:31:56 -0400, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
>On Mon, 2009-05-18 at 19:34 +0800, Arun Thampi wrote:
>> Hi guys - I'm just beginning to learn about Twisted and was wondering
>> if there is a way to use the built-in Twisted persistence libraries
>> such as dirdbm etc. without blocking the main event loop? I read about
>> an approach which uses deferToThread (comment#3
>> here: http://code.activestate.com/recipes/413609/) but if you are
>> persisting quite often, doesn't the creation of threads on every
>> persist-call make it very expensive?
>
>deferToThread uses a threadpool, so it's not *very* slow. It does slow
>things down a bit, so it's better to do chunks of work rather than doing
>writes separately. That being said, writing to disk in main eventloop is
>often fast enough in practice, depending on how strong your latency
>guarantees need to be.
>

More importantly, don't use dirdbm.  It's not a reliable data storage
library.  In fact, you probably shouldn't use anything in twisted.persisted.

You might be interested in <http://www.divmod.org/trac/wiki/DivmodAxiom>.

Jean-Paul



From exarkun at divmod.com  Mon May 18 09:31:55 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 18 May 2009 09:31:55 -0400
Subject: [Twisted-Python] help using deferred
In-Reply-To: <9cce290a0905150758n62cfe47bi628b0fa26fe0be0c@mail.gmail.com>
Message-ID: <20090518133155.21531.1982090254.divmod.quotient.22775@henry.divmod.com>

On Fri, 15 May 2009 16:58:11 +0200, Luigi Conte <luigiandcosolutions at gmail.com> wrote:
> [snip]
>
>I looked at the documentation and I understood something about defferd and
>callbacks. I edited my code but it does nothing...
>I'm going to explain the scenario and what I want to do:
>- there is an api that provides some methods (connect, start, disconnect).
>- all those methods return a deferred object
>- I have an object that first tries to connect, then reads a file and calls
>the start method many times in a loop cicle of his method.
>
> [snip]

I answered essentially this same question previously in this thread.  If
the answer was unclear, ask for clarification about the part that was not
clear.  Don't just start over at the beginning again.

Jean-Paul



From arun.thampi at gmail.com  Mon May 18 09:54:09 2009
From: arun.thampi at gmail.com (Arun Thampi)
Date: Mon, 18 May 2009 21:54:09 +0800
Subject: [Twisted-Python] File persistence without blocking the main
	event loop?
In-Reply-To: <20090518132158.21531.1995018939.divmod.quotient.22772@henry.divmod.com>
References: <1242649916.27977.14.camel@pintsize>
	<20090518132158.21531.1995018939.divmod.quotient.22772@henry.divmod.com>
Message-ID: <e2e56d2e0905180654l4891d168oea679763618f1a0e@mail.gmail.com>

@Itamar - Thanks for that. Didn't know deferToThread uses a threadpool.
@Jean-Paul - Wow thanks, looks interesting..will definitely take a look.

Thanks again guys.

Arun

On Mon, May 18, 2009 at 9:21 PM, Jean-Paul Calderone <exarkun at divmod.com>wrote:

> On Mon, 18 May 2009 08:31:56 -0400, Itamar Shtull-Trauring <
> itamar at itamarst.org> wrote:
> >On Mon, 2009-05-18 at 19:34 +0800, Arun Thampi wrote:
> >> Hi guys - I'm just beginning to learn about Twisted and was wondering
> >> if there is a way to use the built-in Twisted persistence libraries
> >> such as dirdbm etc. without blocking the main event loop? I read about
> >> an approach which uses deferToThread (comment#3
> >> here: http://code.activestate.com/recipes/413609/) but if you are
> >> persisting quite often, doesn't the creation of threads on every
> >> persist-call make it very expensive?
> >
> >deferToThread uses a threadpool, so it's not *very* slow. It does slow
> >things down a bit, so it's better to do chunks of work rather than doing
> >writes separately. That being said, writing to disk in main eventloop is
> >often fast enough in practice, depending on how strong your latency
> >guarantees need to be.
> >
>
> More importantly, don't use dirdbm.  It's not a reliable data storage
> library.  In fact, you probably shouldn't use anything in
> twisted.persisted.
>
> You might be interested in <http://www.divmod.org/trac/wiki/DivmodAxiom>.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
It's better to be a pirate than join the Navy - Steve Jobs
http://arunthampi.wordpress.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090518/e868303c/attachment.htm 

From jasper at peak.org  Mon May 18 19:39:07 2009
From: jasper at peak.org (Jasper)
Date: Mon, 18 May 2009 16:39:07 -0700
Subject: [Twisted-Python] Epsilon installation?
Message-ID: <4A11F19B.8070104@peak.org>

I'm interested in taking a look at divmod Vertex, which requires divmod 
Epsilon, which I downloaded from here:
http://divmod.org/trac/wiki/DivmodEpsilon

However, when I try to 'setup.py install' Epsilon, I get the following 
error:

Traceback (most recent call last):
  File "C:\Documents and 
Settings\Jasper\Desktop\Epsilon-0.5.12\setup.py", line 6, in ?
    version=version.short(),
  File "C:\Python24\lib\site-packages\twisted\python\versions.py", line 
37, in short
    svnver = self._getSVNVersion()
  File "C:\Python24\lib\site-packages\twisted\python\versions.py", line 
90, in _getSVNVersion
    doc = parse(file(ent)).documentElement
  File "C:\Python24\lib\xml\dom\minidom.py", line 1915, in parse
    return expatbuilder.parse(file)
  File "C:\Python24\lib\xml\dom\expatbuilder.py", line 928, in parse
    result = builder.parseFile(file)
  File "C:\Python24\lib\xml\dom\expatbuilder.py", line 207, in parseFile
    parser.Parse(buffer, 0)
xml.parsers.expat.ExpatError: syntax error: line 1, column 0


This appears to be happening while parsing 
.../Epsilon-0.5.12/epsilon/.svn/entries, which isn't xml at all...  
Inspecting version.py, I found I could avoid the issue by deleting the 
.svn dir.

Is this just a matter of the .svn dirs being accidentally included in 
the Epsilon release?  Or, put another way, am I masking some sort of 
meaningful version check by doing this?

-Jasper


PS  And what's up with the dom parsing of non-xml anyway?



From jasper at peak.org  Mon May 18 20:16:41 2009
From: jasper at peak.org (Jasper)
Date: Mon, 18 May 2009 17:16:41 -0700
Subject: [Twisted-Python] Epsilon installation?
In-Reply-To: <4A11F19B.8070104@peak.org>
References: <4A11F19B.8070104@peak.org>
Message-ID: <4A11FA69.6050304@peak.org>

Jasper wrote:
> I'm interested in taking a look at divmod Vertex, which requires divmod 
> Epsilon, which I downloaded from here:
> http://divmod.org/trac/wiki/DivmodEpsilon
>
> However, when I try to 'setup.py install' Epsilon, I get the following 
> error:
>   

Bah, nevermind.  I had an older version of Twisted, which I thought was 
sufficient.  I decided to take the plunge and upgrade to the most recent 
twisted, which fixes the problems I was seeing.

Now I just need to migrate my code to use the new twisted.

-Jasper




From petshmidt at googlemail.com  Tue May 19 03:51:39 2009
From: petshmidt at googlemail.com (Pet)
Date: Tue, 19 May 2009 09:51:39 +0200
Subject: [Twisted-Python] XML-RPC for paralell clients
Message-ID: <b460e9630905190051t616a949eq79965f722b387f73@mail.gmail.com>

Hi,

after playing with reactor, factory and protocol, I'm trying to
implement XML-RPC server, but it seems that it is not able to handle
several clients in parallel. If I call the slow function with first
client  and then with second client a fast function, second client
will receiver the results after slow function returned. There is no
factory for clients in server.Site() like in Protokoll? What is the
way to do that for XML-RPC?

Thanks for your help!
Pet

from twisted.web import xmlrpc, server
from twisted.application import internet

from time import sleep


PORT = 11111

class ExampleXMLRPCProtokoll(xmlrpc.XMLRPC):
    """An example object to be published."""
    def xmlrpc_echo(self, x):
        """
        Return all passed args.
        """
        return x

    def xmlrpc_add(self, a, b):
        """
        Return sum of arguments.
        """
        return a + b

    def xmlrpc_addslow(self, a, b):
        """
        Return sum of arguments. takes time
        """
        sleep(20)
        return a + b

    def xmlrpc_fault(self):
        """
        Raise a Fault indicating that the procedure should not be used.
        """
        raise xmlrpc.Fault(123, "The fault procedure is faulty.")


class ExampleXMLRPCService(internet.TCPServer):

    def __init__(self):
        print "Starting XML-RPC Service..."
        r = ExampleXMLRPCProtokoll()
        internet.TCPServer.__init__(self,PORT,server.Site(r))



def main():
    from twisted.internet import reactor
    r = ExampleXMLRPCProtokoll()
    reactor.listenTCP(PORT, server.Site(r))
    reactor.run()



if __name__ == '__main__':
    main()



From glyph at divmod.com  Tue May 19 04:59:15 2009
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 19 May 2009 08:59:15 -0000
Subject: [Twisted-Python] XML-RPC for paralell clients
In-Reply-To: <b460e9630905190051t616a949eq79965f722b387f73@mail.gmail.com>
References: <b460e9630905190051t616a949eq79965f722b387f73@mail.gmail.com>
Message-ID: <20090519085915.12555.438645077.divmod.xquotient.11518@weber.divmod.com>

On 07:51 am, petshmidt at googlemail.com wrote:
>after playing with reactor, factory and protocol, I'm trying to
>implement XML-RPC server, but it seems that it is not able to handle
>several clients in parallel. If I call the slow function with first
>client  and then with second client a fast function, second client
>will receiver the results after slow function returned. There is no
>factory for clients in server.Site() like in Protokoll? What is the
>way to do that for XML-RPC?

Whenever you perform some blocking work in a Twisted program, the 
reactor will block and no processing will occur in parallel.  This is 
not specific to XML-RPC.  server.Site() *is* a Factory for clients, 
exactly the same as any other protocol.  You can see its place in the 
inheritance hierarchy:

http://twistedmatrix.com/documents/8.2.0/api/classIndex.html#twisted.web.server.Site
>    def xmlrpc_addslow(self, a, b):
>        """
>        Return sum of arguments. takes time
>        """
>        sleep(20)
>        return a + b

The Twisted equivalent way to spell this is to return a Deferred which 
fires later from your xmlrpc_addslow method:

    from twisted.internet.task import deferLater
    from twisted.internet import reactor
    # ...
    def xmlrpc_addslow(self, a, b):
        return deferLater(reactor, 20, lambda : a + b)

However, if your "sleep(20)" is intended to simulate 20 seconds of work 
in a blocking API you can't control, you might want to return a Deferred 
that does the work in a thread instead:

    from time import sleep
    from twisted.internet.threads import deferToThread
    # ...
    def xmlrpc_addslow(self, a, b):
        def hardWork():
            sleep(20)
            return a + b
        return deferToThread(hardWork)

As with all Python programs, if you truly want CPU parallelism, then you 
will need to put the work into a subprocess instead.  You might want to 
look at the "ampoule" process-pool project: 
https://launchpad.net/ampoule

For many applications though, you shouldn't need to worry about 
parallelism this much.  Since Twisted's XMLRPC server support allows you 
to replace any method's return value with a Deferred without changing 
the externally observable behavior of XML-RPC server, you can add 
parallelism incrementally as you actually require it.  In other words, 
you probably don't need to worry about it as much as you think :).

Hope this helped!



From petshmidt at googlemail.com  Tue May 19 05:48:48 2009
From: petshmidt at googlemail.com (Pet)
Date: Tue, 19 May 2009 11:48:48 +0200
Subject: [Twisted-Python] XML-RPC for paralell clients
In-Reply-To: <20090519085915.12555.438645077.divmod.xquotient.11518@weber.divmod.com>
References: <b460e9630905190051t616a949eq79965f722b387f73@mail.gmail.com> 
	<20090519085915.12555.438645077.divmod.xquotient.11518@weber.divmod.com>
Message-ID: <b460e9630905190248l4793d658jd7695c7f4af97f9e@mail.gmail.com>

On Tue, May 19, 2009 at 10:59 AM,  <glyph at divmod.com> wrote:
> On 07:51 am, petshmidt at googlemail.com wrote:
>>after playing with reactor, factory and protocol, I'm trying to
>>implement XML-RPC server, but it seems that it is not able to handle
>>several clients in parallel. If I call the slow function with first
>>client ?and then with second client a fast function, second client
>>will receiver the results after slow function returned. There is no
>>factory for clients in server.Site() like in Protokoll? What is the
>>way to do that for XML-RPC?
>
> Whenever you perform some blocking work in a Twisted program, the
> reactor will block and no processing will occur in parallel. ?This is
> not specific to XML-RPC. ?server.Site() *is* a Factory for clients,
> exactly the same as any other protocol. ?You can see its place in the
> inheritance hierarchy:

Thank you for explanations!

I still have some questions :(
if server.Site() is Factory clients, what object is created for each
connection?
How can I ensure, that each client gets answer belonging to him and
not for other "slow" client? How can I close connection to a client?


>
> http://twistedmatrix.com/documents/8.2.0/api/classIndex.html#twisted.web.server.Site
>> ? ?def xmlrpc_addslow(self, a, b):
>> ? ? ? ?"""
>> ? ? ? ?Return sum of arguments. takes time
>> ? ? ? ?"""
>> ? ? ? ?sleep(20)
>> ? ? ? ?return a + b
>
> The Twisted equivalent way to spell this is to return a Deferred which
> fires later from your xmlrpc_addslow method:
>
> ? ?from twisted.internet.task import deferLater
> ? ?from twisted.internet import reactor
> ? ?# ...
> ? ?def xmlrpc_addslow(self, a, b):
> ? ? ? ?return deferLater(reactor, 20, lambda : a + b)
>
> However, if your "sleep(20)" is intended to simulate 20 seconds of work
> in a blocking API you can't control, you might want to return a Deferred
> that does the work in a thread instead:
>
> ? ?from time import sleep
> ? ?from twisted.internet.threads import deferToThread
> ? ?# ...
> ? ?def xmlrpc_addslow(self, a, b):
> ? ? ? ?def hardWork():
> ? ? ? ? ? ?sleep(20)
> ? ? ? ? ? ?return a + b
> ? ? ? ?return deferToThread(hardWork)

this should be ok for me.

>
> As with all Python programs, if you truly want CPU parallelism, then you
> will need to put the work into a subprocess instead. ?You might want to
> look at the "ampoule" process-pool project:
> https://launchpad.net/ampoule
>
> For many applications though, you shouldn't need to worry about
> parallelism this much. ?Since Twisted's XMLRPC server support allows you
> to replace any method's return value with a Deferred without changing
> the externally observable behavior of XML-RPC server, you can add
> parallelism incrementally as you actually require it. ?In other words,
> you probably don't need to worry about it as much as you think :).
>
> Hope this helped!
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From petshmidt at googlemail.com  Tue May 19 10:02:58 2009
From: petshmidt at googlemail.com (Pet)
Date: Tue, 19 May 2009 16:02:58 +0200
Subject: [Twisted-Python] XML-RPC for paralell clients
In-Reply-To: <b460e9630905190248l4793d658jd7695c7f4af97f9e@mail.gmail.com>
References: <b460e9630905190051t616a949eq79965f722b387f73@mail.gmail.com> 
	<20090519085915.12555.438645077.divmod.xquotient.11518@weber.divmod.com>
	<b460e9630905190248l4793d658jd7695c7f4af97f9e@mail.gmail.com>
Message-ID: <b460e9630905190702m6399646bn47dd336a4cceb86@mail.gmail.com>

On Tue, May 19, 2009 at 11:48 AM, Pet <petshmidt at googlemail.com> wrote:
> On Tue, May 19, 2009 at 10:59 AM, ?<glyph at divmod.com> wrote:
>> On 07:51 am, petshmidt at googlemail.com wrote:
>>>after playing with reactor, factory and protocol, I'm trying to
>>>implement XML-RPC server, but it seems that it is not able to handle
>>>several clients in parallel. If I call the slow function with first
>>>client ?and then with second client a fast function, second client
>>>will receiver the results after slow function returned. There is no
>>>factory for clients in server.Site() like in Protokoll? What is the
>>>way to do that for XML-RPC?
>>
>> Whenever you perform some blocking work in a Twisted program, the
>> reactor will block and no processing will occur in parallel. ?This is
>> not specific to XML-RPC. ?server.Site() *is* a Factory for clients,
>> exactly the same as any other protocol. ?You can see its place in the
>> inheritance hierarchy:
>
> Thank you for explanations!
>
> I still have some questions :(
> if server.Site() is Factory clients, what object is created for each
> connection?
> How can I ensure, that each client gets answer belonging to him and
> not for other "slow" client? How can I close connection to a client?

deferToThread or db.runInteraction seems to be the solution for me.
The "only" thing I don't know how to do is, logging requests *after*
response was send to the client. Obviously, it should happens after a
xmlrpc_method returns, but how can accomplish this?

Thanks for any help!

>
>
>>
>> http://twistedmatrix.com/documents/8.2.0/api/classIndex.html#twisted.web.server.Site
>>> ? ?def xmlrpc_addslow(self, a, b):
>>> ? ? ? ?"""
>>> ? ? ? ?Return sum of arguments. takes time
>>> ? ? ? ?"""
>>> ? ? ? ?sleep(20)
>>> ? ? ? ?return a + b
>>
>> The Twisted equivalent way to spell this is to return a Deferred which
>> fires later from your xmlrpc_addslow method:
>>
>> ? ?from twisted.internet.task import deferLater
>> ? ?from twisted.internet import reactor
>> ? ?# ...
>> ? ?def xmlrpc_addslow(self, a, b):
>> ? ? ? ?return deferLater(reactor, 20, lambda : a + b)
>>
>> However, if your "sleep(20)" is intended to simulate 20 seconds of work
>> in a blocking API you can't control, you might want to return a Deferred
>> that does the work in a thread instead:
>>
>> ? ?from time import sleep
>> ? ?from twisted.internet.threads import deferToThread
>> ? ?# ...
>> ? ?def xmlrpc_addslow(self, a, b):
>> ? ? ? ?def hardWork():
>> ? ? ? ? ? ?sleep(20)
>> ? ? ? ? ? ?return a + b
>> ? ? ? ?return deferToThread(hardWork)
>
> this should be ok for me.
>
>>
>> As with all Python programs, if you truly want CPU parallelism, then you
>> will need to put the work into a subprocess instead. ?You might want to
>> look at the "ampoule" process-pool project:
>> https://launchpad.net/ampoule
>>
>> For many applications though, you shouldn't need to worry about
>> parallelism this much. ?Since Twisted's XMLRPC server support allows you
>> to replace any method's return value with a Deferred without changing
>> the externally observable behavior of XML-RPC server, you can add
>> parallelism incrementally as you actually require it. ?In other words,
>> you probably don't need to worry about it as much as you think :).
>>
>> Hope this helped!
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>



From glyph at divmod.com  Tue May 19 11:51:03 2009
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 19 May 2009 15:51:03 -0000
Subject: [Twisted-Python] Upcoming Sprint
Message-ID: <20090519155103.12555.865218086.divmod.xquotient.11545@weber.divmod.com>


Hi folks,

It's getting to be about the time for another Twisted sprint.

Rumor has it that long-time Twisted hacker Kevin Turner will be in 
Cambridge the weekend of the 30th-31st, so we'll be hosting a sprint one 
of those days.  If this rumor is true, I'd appreciate it if our esteemed 
visitor could give us some feedback as to which day he'll be free :).



From patrick.thomson at gmail.com  Tue May 19 13:17:01 2009
From: patrick.thomson at gmail.com (Patrick Thomson)
Date: Tue, 19 May 2009 18:17:01 +0100
Subject: [Twisted-Python] offer of adding IRCD support to words.protocol.irc
Message-ID: <5eaa38050905191017v3bd0eb28jad1ef1b152b51c1c@mail.gmail.com>

I'm currently about to embark on building something from twisted which
has an IRCD, and I have found the capacity to run IRC servers is
lacking, in contrast to the excellent client/bot backend code.

I've found several other twisted projects already implement an IRCD,
and whilst I'm reinventing the wheel, I may as well go the extra mile
to get my code suitable for inclusion.

I wouldn't be asking for a lot, just some general guidelines (e.g. I
know my patch probably won't be accepted
without test code as well).

-- 
Patrick



From exarkun at divmod.com  Tue May 19 13:26:08 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 19 May 2009 13:26:08 -0400
Subject: [Twisted-Python] offer of adding IRCD support to
 words.protocol.irc
In-Reply-To: <5eaa38050905191017v3bd0eb28jad1ef1b152b51c1c@mail.gmail.com>
Message-ID: <20090519172608.21531.657862391.divmod.quotient.23394@henry.divmod.com>

On Tue, 19 May 2009 18:17:01 +0100, Patrick Thomson <patrick.thomson at gmail.com> wrote:
>I'm currently about to embark on building something from twisted which
>has an IRCD, and I have found the capacity to run IRC servers is
>lacking, in contrast to the excellent client/bot backend code.
>
>I've found several other twisted projects already implement an IRCD,
>and whilst I'm reinventing the wheel, I may as well go the extra mile
>to get my code suitable for inclusion.

Hi Patrick,

Cool!

I want to point you at what happens when you run this command:

  twistd -n words --irc-port 6667 --group irctest --auth=memory:username:password

Ideally, an IRCD in Twisted would be based on this (which certainly needs
some work).

>I wouldn't be asking for a lot, just some general guidelines (e.g. I
>know my patch probably won't be accepted
>without test code as well).

Tests are probably the most important single thing.  We also ask for full
docstring coverage (ie, docstrings for every class, method, function).  It
would also be best if you could structure your contributions incrementally.
Twenty patches of a couple hundred lines each is vastly preferable to one
patch of several thousand lines.

You can find much more detailed information on the wiki,

  http://twistedmatrix.com/trac/wiki/TwistedDevelopment

If anything there needs clarification, please ask. :)

Jean-Paul



From roastie at rochester.rr.com  Wed May 20 10:12:28 2009
From: roastie at rochester.rr.com (Uncle Roastie)
Date: Wed, 20 May 2009 09:12:28 -0500
Subject: [Twisted-Python] First time install of Twisted fails
Message-ID: <793a17940905200712x1ed8e91bob4087246d63981f5@mail.gmail.com>

I'm trying to do an install of Twisted for Python 2.5.4

on Windows XP.  I installed PyCrypto, OpenSSL for Windows,

and PyOpenSLL.   When I enter the Python interpreter

and say



>>> import OpenSLL



I get the following error:



"The procedure entry point SSL_CTX_set_info_callback could not be

located in the dynamic link library ssleay32.dll."



The DLL lives inside the OpenSLL bin directory, which is also on the search
PATH.



Any ideas?



Uncle Roastie
roastie at rochester.rr.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090520/3a41a3c5/attachment.htm 

From exarkun at divmod.com  Wed May 20 11:06:08 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 20 May 2009 11:06:08 -0400
Subject: [Twisted-Python] First time install of Twisted fails
In-Reply-To: <793a17940905200712x1ed8e91bob4087246d63981f5@mail.gmail.com>
Message-ID: <20090520150608.21531.2007270539.divmod.quotient.23961@henry.divmod.com>

On Wed, 20 May 2009 09:12:28 -0500, Uncle Roastie <roastie at rochester.rr.com> wrote:
>I'm trying to do an install of Twisted for Python 2.5.4
>on Windows XP.  I installed PyCrypto, OpenSSL for Windows,
>and PyOpenSLL.   When I enter the Python interpreter
>and say
>
>>>> import OpenSLL
>
>I get the following error:
>
>"The procedure entry point SSL_CTX_set_info_callback could not be
>located in the dynamic link library ssleay32.dll."
>
>The DLL lives inside the OpenSLL bin directory, which is also on the search
>PATH.
>
>Any ideas?
>

This question would be better directed at the pyOpenSSL mailing list, I
think.  pyOpenSSL is not part of Twisted, and this seems to be a pyOpenSSL
installation issue.

Additional important information you should include:

  - what version did you try to install?
  - which package did you try to install (full file name or download URL)?

Jean-Paul



From mithrandi at mithrandi.net  Wed May 20 18:10:30 2009
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Thu, 21 May 2009 00:10:30 +0200
Subject: [Twisted-Python] Consistent interfaces to asynchronous
	partially-available services using Deferreds and state
	machines (was Re: Another approach to allowing __init__ to
	work with Deferreds)
In-Reply-To: <18953.24553.54020.283769@jon.es>
References: <18952.20484.534748.921408@jon.es>
	<20090512075020.12555.1526761106.divmod.xquotient.11469@weber.divmod.com>
	<18953.24553.54020.283769@jon.es>
Message-ID: <f5eea9170905201510m6b50dc34u100c429f65bc737f@mail.gmail.com>

On Tue, May 12, 2009 at 1:39 PM, Terry Jones <terry at jon.es> wrote:
> If Python allowed me to return a deferred from __init__, my problem would
> vanish. ?That's not going to happen though, I know :-)

Well, if you /really/ want to, you can implement that; something like:

####
from twisted.internet import defer

class DeferredClass(object):
    def __new__(cls, *a, **kw):
        inst = super(DeferredClass, cls).__new__(cls, *a, **kw)
        return defer.maybeDeferred(inst.__init__, *a,
**kw).addCallback(lambda ign: inst)
####

Example usage:

####
class Example(DeferredClass):
    def __init__(self, value):
        def _cb(value):
            self.value = value
        return defer.succeed(value).addCallback(_cb)

def _printIt(x):
    print x.value

Example(42).addCallback(_printIt)  # Prints "42"
####

Of course, this doesn't implement your magic wrapping behaviour, so
maybe that's not what you meant.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar



From phil at bubblehouse.org  Thu May 21 10:37:16 2009
From: phil at bubblehouse.org (Phil Christensen)
Date: Thu, 21 May 2009 10:37:16 -0400
Subject: [Twisted-Python] Consistent interfaces to asynchronous
	partially-available services using Deferreds and state
	machines (was Re: Another approach to allowing __init__ to
	work with Deferreds)
In-Reply-To: <f5eea9170905201510m6b50dc34u100c429f65bc737f@mail.gmail.com>
References: <18952.20484.534748.921408@jon.es>
	<20090512075020.12555.1526761106.divmod.xquotient.11469@weber.divmod.com>
	<18953.24553.54020.283769@jon.es>
	<f5eea9170905201510m6b50dc34u100c429f65bc737f@mail.gmail.com>
Message-ID: <7BBB735D-BF25-4CF1-ABBC-658D60DD5BF2@bubblehouse.org>

On May 20, 2009, at 6:10 PM, Tristan Seligmann wrote:
> On Tue, May 12, 2009 at 1:39 PM, Terry Jones <terry at jon.es> wrote:
>> If Python allowed me to return a deferred from __init__, my problem  
>> would
>> vanish.  That's not going to happen though, I know :-)
>
> Well, if you /really/ want to, you can implement that; something like:
>
> ####
> from twisted.internet import defer
>
> class DeferredClass(object):
>    def __new__(cls, *a, **kw):
>        inst = super(DeferredClass, cls).__new__(cls, *a, **kw)
>        return defer.maybeDeferred(inst.__init__, *a,
> **kw).addCallback(lambda ign: inst)
> ####

That's a really succinct solution to the problem. I never even thought  
of using __new__ for this.

I'm inclined to say this is a better solution than the decorator-based  
one I sent along a few days ago, just because it's so simple. OTOH, my  
approach has one additional feature that I think is pretty nice, which  
is that you can call instance methods on the init-deferred object  
before the __init__ callback has been triggered, even if they need  
some of that initialized state (thus returning a Deferred).

-phil



From keturn at keturn.net  Fri May 22 00:43:39 2009
From: keturn at keturn.net (Kevin Turner)
Date: Thu, 21 May 2009 21:43:39 -0700
Subject: [Twisted-Python] Upcoming Sprint
In-Reply-To: <20090519155103.12555.865218086.divmod.xquotient.11545@weber.divmod.com>
References: <20090519155103.12555.865218086.divmod.xquotient.11545@weber.divmod.com>
Message-ID: <1242967419.7071.49491.camel@grinky>

Hey, that's me!  I'll be more free on the 30th than the 31st.  Even more
free on June 1st, but maybe you sprinters have day jobs or something.

But I do look forward to participating in a Twisted sprint.  Our
attempts to host code sprints here in Portland have been irregular at
best.





From thomas at apestaart.org  Fri May 22 11:18:41 2009
From: thomas at apestaart.org (Thomas Vander Stichele)
Date: Fri, 22 May 2009 17:18:41 +0200
Subject: [Twisted-Python] Twisted training
Message-ID: <1243005521.17718.136.camel@ana.amantes>

Hi people,

Is there anyone in the community who is available for a Twisted training
job ? Our team of developers is growing, and we are considering our
options on how we can smooth out their learning cycle.  Getting a
focused Twisted training is definately something we're considering.

The training would be on-site in Barcelona, Europe, if that helps you
make your decision :)

Feel free to either reply publically or privately.

Thanks
Thomas


-- 
I won't leave you
all you have is that spell
cast it will you
--
GStreamer - bringing multimedia to your desktop
http://gstreamer.freedesktop.org/





From thomas at apestaart.org  Fri May 22 11:19:28 2009
From: thomas at apestaart.org (Thomas Vander Stichele)
Date: Fri, 22 May 2009 17:19:28 +0200
Subject: [Twisted-Python] Available for short-term Twisted consulting,
	e.g. training, design (but not coding)
In-Reply-To: <1234894512.13141.25.camel@pintsize>
References: <1234894512.13141.25.camel@pintsize>
Message-ID: <1243005568.17718.138.camel@ana.amantes>

Hi Itamar,

I just sent out a mail to the list to ask for training, but I also saw
your mail from February.

I hope your RSI is better by now, but in case you'd still consider
training, feel free to let me know!

Regards,
Thomas

On Tue, 2009-02-17 at 13:15 -0500, Itamar Shtull-Trauring wrote:
> Need help with Twisted, distributed systems or or just plain old 
> software architecture?
> 
> Due to a repetitive strain injury I am unable to type much (though
> I am slowly improving), and so I'm taking time off of work to recover.
> As a result I am available for short-term consulting until I recover,
> e.g. training or design work, assuming of course it does not involve
> any typing.
> 
> I've worked on Twisted itself, as well as projects ranging from 
> high-performance distributed C++ servers, to an access control framework
> for an airline reservation system, to a multimedia kiosk system for the 
> Israel Museum in Jerusalem:
> http://itamarst.org/resume.html
> 
> Send me an e-mail if you're interested.
> 
> -- Itamar Shtull-Trauring
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-- 
if you ever lay a finger on my left side
if you ever lay a finger on me I will open
--
Flumotion - the only way to stream!
http://www.flumotion.net/





From glyph at divmod.com  Sat May 23 05:25:39 2009
From: glyph at divmod.com (glyph at divmod.com)
Date: Sat, 23 May 2009 09:25:39 -0000
Subject: [Twisted-Python] Upcoming Sprint
In-Reply-To: <1242967419.7071.49491.camel@grinky>
References: <20090519155103.12555.865218086.divmod.xquotient.11545@weber.divmod.com>
	<1242967419.7071.49491.camel@grinky>
Message-ID: <20090523092539.12555.1776739170.divmod.xquotient.11563@weber.divmod.com>




On 22 May, 04:43 am, keturn at keturn.net wrote:
>Hey, that's me!  I'll be more free on the 30th than the 31st.  Even 
>more
>free on June 1st, but maybe you sprinters have day jobs or something.

See you on the 30th then.  I believe most sprinters do have day jobs :).
>But I do look forward to participating in a Twisted sprint.  Our
>attempts to host code sprints here in Portland have been irregular at
>best.

Yeah, for a while it was the same here.  I'm impressed at how 
predictable our sprints have been lately, though.  Looking forward to 
seeing you!

Who else is coming?



From exarkun at twistedmatrix.com  Sun May 24 00:05:11 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 24 May 2009 04:05:11 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1243137911.98.1460944318@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090524/0a0c8b66/attachment.htm 

From muaazhussain128 at gmail.com  Sun May 24 02:15:15 2009
From: muaazhussain128 at gmail.com (Muaaz Hussain)
Date: Sun, 24 May 2009 09:15:15 +0300
Subject: [Twisted-Python] My twisted web server fall down
Message-ID: <1ac8ac10905232315u7090061ei457671eddfce81d5@mail.gmail.com>

Dear all,
I ran penetration testing tool against my twisted web server , the
tool used to make a huge number of threads, all that threads make a
connection to the twisted concurrently.
when I made the number of threads more than 1024 the twisted web
server eventually has fall down.
is there any method to let the twisted web server to limit the
concurrent connection per second or per host.



From adelagon at gmail.com  Sun May 24 02:49:37 2009
From: adelagon at gmail.com (Alvin Delagon)
Date: Sun, 24 May 2009 14:49:37 +0800
Subject: [Twisted-Python] My twisted web server fall down
In-Reply-To: <1ac8ac10905232315u7090061ei457671eddfce81d5@mail.gmail.com>
References: <1ac8ac10905232315u7090061ei457671eddfce81d5@mail.gmail.com>
Message-ID: <7a01f6c00905232349h48379791h8b61a9562f3dea70@mail.gmail.com>

Are logs saying something like this: "Too Many Open Files"? If it is, you
have to setup your file descriptor limit (ulimit -n) first before starting
the app.



On Sun, May 24, 2009 at 2:15 PM, Muaaz Hussain <muaazhussain128 at gmail.com>wrote:

> Dear all,
> I ran penetration testing tool against my twisted web server , the
> tool used to make a huge number of threads, all that threads make a
> connection to the twisted concurrently.
> when I made the number of threads more than 1024 the twisted web
> server eventually has fall down.
> is there any method to let the twisted web server to limit the
> concurrent connection per second or per host.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
http://www.alvinatorsplayground.blogspot.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090524/abc9c680/attachment.htm 

From micahel at gmail.com  Sun May 24 05:24:52 2009
From: micahel at gmail.com (Michael Hudson)
Date: Sun, 24 May 2009 10:24:52 +0100
Subject: [Twisted-Python] My twisted web server fall down
In-Reply-To: <1ac8ac10905232315u7090061ei457671eddfce81d5@mail.gmail.com>
References: <1ac8ac10905232315u7090061ei457671eddfce81d5@mail.gmail.com>
Message-ID: <aa0dfd860905240224j163c9c80g66f4f1252efedab4@mail.gmail.com>

2009/5/24 Muaaz Hussain <muaazhussain128 at gmail.com>:
> Dear all,
> I ran penetration testing tool against my twisted web server , the
> tool used to make a huge number of threads, all that threads make a
> connection to the twisted concurrently.
> when I made the number of threads more than 1024 the twisted web
> server eventually has fall down.
> is there any method to let the twisted web server to limit the
> concurrent connection per second or per host.

The twisted.protocols.policies module contains factories that limit
connections per peer or total connections:
http://twistedmatrix.com/documents/current/api/twisted.protocols.policies.html

There isn't one for connections per second, but I don't suppose it
would be too hard to write (and I might get around to writing it one
of these days, we could use it).

If you're really worried about attacks, it's probably better to do
this at the iptables/kernel level if you can though.

Cheers,
mwh



From rlotun at gmail.com  Sun May 24 05:39:19 2009
From: rlotun at gmail.com (Reza Lotun)
Date: Sun, 24 May 2009 10:39:19 +0100
Subject: [Twisted-Python] My twisted web server fall down
In-Reply-To: <7a01f6c00905232349h48379791h8b61a9562f3dea70@mail.gmail.com>
References: <1ac8ac10905232315u7090061ei457671eddfce81d5@mail.gmail.com>
	<7a01f6c00905232349h48379791h8b61a9562f3dea70@mail.gmail.com>
Message-ID: <95bb10690905240239k30b1ec5ck7383bdc6088d1506@mail.gmail.com>

On Sun, May 24, 2009 at 7:49 AM, Alvin Delagon <adelagon at gmail.com> wrote:
> Are logs saying something like this: "Too Many Open Files"? If it is, you
> have to setup your file descriptor limit (ulimit -n) first before starting
> the app.

In addition to changing ulimit -n values you should also take a look
at your kernel settings in sysctl and check that your fs.file-max
setting is something suitably high (this is assuming you're using
linux...).

Reza

-- 
Reza Lotun
+44 (0)7521 310 763
rlotun at gmail.com



From glyph at divmod.com  Sun May 24 06:39:24 2009
From: glyph at divmod.com (glyph at divmod.com)
Date: Sun, 24 May 2009 10:39:24 -0000
Subject: [Twisted-Python] My twisted web server fall down
In-Reply-To: <1ac8ac10905232315u7090061ei457671eddfce81d5@mail.gmail.com>
References: <1ac8ac10905232315u7090061ei457671eddfce81d5@mail.gmail.com>
Message-ID: <20090524103924.12555.176962757.divmod.xquotient.11582@weber.divmod.com>


On 06:15 am, muaazhussain128 at gmail.com wrote:
>I ran penetration testing tool against my twisted web server , the
>tool used to make a huge number of threads, all that threads make a
>connection to the twisted concurrently.
>when I made the number of threads more than 1024 the twisted web
>server eventually has fall down.
>is there any method to let the twisted web server to limit the
>concurrent connection per second or per host.

Would you mind answering a few questions more precisely -

What version of Twisted are you using?  8.2?

What penetration testing tool were you using?  Exactly what options did 
you give it?

What is your web server doing?  Just serving files, or some dynamic 
content of your own design?  Can you include your server's 
configuration?

Is there anything present in the logs before the server dies?

Can you try this with a recent snapshot of Twisted trunk and see if you 
get the same results?

There have been a few bugs in this area.  I *think* we've already 
addressed the particular problem of the server dying when there are 
simply too many connections, but I'd really like to make sure.  As such, 
I'd like to be able to run exactly the same test that you did :).



From bra at fsn.hu  Sun May 24 16:21:19 2009
From: bra at fsn.hu (Attila Nagy)
Date: Sun, 24 May 2009 22:21:19 +0200
Subject: [Twisted-Python] Processpool recommendation (for scaling to
	multiple CPUs)
Message-ID: <4A19AC3F.7030500@fsn.hu>

Hello,

Is there any efficient built-in machinery in twisted for running a (TCP, 
UDP or unix domain socket) service in a connection multiplexer->worker 
processes manner? Or if there isn't, what is the recommended way of 
doing this? (any examples maybe?)

I've got some CPU scalability issues (the application became CPU bound, 
but there are a lot more CPUs, which can't be used because of the 
uniprocess nature), threading is not a solution, so the next logical 
move could be starting multiple twisted reactors in different processes 
and transparently switching incoming connections between them.
There is no need for intra-process communication, I need only a thing, 
which does the process starting/stopping, connection multiplexing in a 
clean way.

Thanks,



From glyph at divmod.com  Sun May 24 17:46:39 2009
From: glyph at divmod.com (glyph at divmod.com)
Date: Sun, 24 May 2009 21:46:39 -0000
Subject: [Twisted-Python] Processpool recommendation (for scaling
	to	multiple CPUs)
In-Reply-To: <4A19AC3F.7030500@fsn.hu>
References: <4A19AC3F.7030500@fsn.hu>
Message-ID: <20090524214639.12555.379159608.divmod.xquotient.11583@weber.divmod.com>


On 08:21 pm, bra at fsn.hu wrote:
>I've got some CPU scalability issues (the application became CPU bound,
>but there are a lot more CPUs, which can't be used because of the
>uniprocess nature), threading is not a solution, so the next logical
>move could be starting multiple twisted reactors in different processes
>and transparently switching incoming connections between them.
>There is no need for intra-process communication, I need only a thing,
>which does the process starting/stopping, connection multiplexing in a
>clean way.

Have you looked at Ampoule?  https://launchpad.net/ampoule/



From esteve at sindominio.net  Mon May 25 04:04:01 2009
From: esteve at sindominio.net (Esteve Fernandez)
Date: Mon, 25 May 2009 10:04:01 +0200 (CEST)
Subject: [Twisted-Python] Twisted at UDS Karmic
Message-ID: <39113.80.67.104.102.1243238641.squirrel@webmail.sindominio.net>

Hi all,

I know quite a few Twisted developers love Ubuntu, so... is any of you here in
Barcelona for the Ubuntu Developer Summit for Karmic Koala? I'll be attending
some sprints, primarily about Ubuntu Server, messaging, cloud computing, etc.

Cheers.




From radix at twistedmatrix.com  Mon May 25 05:04:51 2009
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 25 May 2009 11:04:51 +0200
Subject: [Twisted-Python] Twisted at UDS Karmic
In-Reply-To: <39113.80.67.104.102.1243238641.squirrel@webmail.sindominio.net>
References: <39113.80.67.104.102.1243238641.squirrel@webmail.sindominio.net>
Message-ID: <60ed19d40905250204s34f93fc0i50384ab726e194b1@mail.gmail.com>

On Mon, May 25, 2009 at 10:04 AM, Esteve Fernandez
<esteve at sindominio.net> wrote:
> Hi all,
>
> I know quite a few Twisted developers love Ubuntu, so... is any of you here in
> Barcelona for the Ubuntu Developer Summit for Karmic Koala? I'll be attending
> some sprints, primarily about Ubuntu Server, messaging, cloud computing, etc.


I'm here! Also Thomas Herv?, Duncan McGreggor, Jonathan Lange, Andrew
Bennetts, Jamu Kakar, and maybe others.

I'm in a Cloud Computing session right now :-)


-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
http://canonical.com/



From adelagon at gmail.com  Mon May 25 05:24:21 2009
From: adelagon at gmail.com (Alvin Delagon)
Date: Mon, 25 May 2009 17:24:21 +0800
Subject: [Twisted-Python] Twisted at UDS Karmic
In-Reply-To: <60ed19d40905250204s34f93fc0i50384ab726e194b1@mail.gmail.com>
References: <39113.80.67.104.102.1243238641.squirrel@webmail.sindominio.net>
	<60ed19d40905250204s34f93fc0i50384ab726e194b1@mail.gmail.com>
Message-ID: <7a01f6c00905250224h609670cdhcbfd4126679fa976@mail.gmail.com>

Any Fluendo/Flumotion guys coming? You guys are close by, it might be a good
idea to attend.

---
Alvin

On Mon, May 25, 2009 at 5:04 PM, Christopher Armstrong <
radix at twistedmatrix.com> wrote:

> On Mon, May 25, 2009 at 10:04 AM, Esteve Fernandez
> <esteve at sindominio.net> wrote:
> > Hi all,
> >
> > I know quite a few Twisted developers love Ubuntu, so... is any of you
> here in
> > Barcelona for the Ubuntu Developer Summit for Karmic Koala? I'll be
> attending
> > some sprints, primarily about Ubuntu Server, messaging, cloud computing,
> etc.
>
>
> I'm here! Also Thomas Herv?, Duncan McGreggor, Jonathan Lange, Andrew
> Bennetts, Jamu Kakar, and maybe others.
>
> I'm in a Cloud Computing session right now :-)
>
>
> --
> Christopher Armstrong
> http://radix.twistedmatrix.com/
> http://planet-if.com/
> http://canonical.com/
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
http://www.alvinatorsplayground.blogspot.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090525/5764675c/attachment.htm 

From esteve at sindominio.net  Mon May 25 05:30:06 2009
From: esteve at sindominio.net (Esteve Fernandez)
Date: Mon, 25 May 2009 11:30:06 +0200 (CEST)
Subject: [Twisted-Python] Twisted at UDS Karmic
In-Reply-To: <60ed19d40905250204s34f93fc0i50384ab726e194b1@mail.gmail.com>
References: <39113.80.67.104.102.1243238641.squirrel@webmail.sindominio.net>
	<60ed19d40905250204s34f93fc0i50384ab726e194b1@mail.gmail.com>
Message-ID: <54119.80.67.104.102.1243243806.squirrel@webmail.sindominio.net>

> On Mon, May 25, 2009 at 10:04 AM, Esteve Fernandez
> <esteve at sindominio.net> wrote:
>> Hi all,
>>
>> I know quite a few Twisted developers love Ubuntu, so... is any of you here
>> in
>> Barcelona for the Ubuntu Developer Summit for Karmic Koala? I'll be
>> attending
>> some sprints, primarily about Ubuntu Server, messaging, cloud computing,
>> etc.
>
>
> I'm here! Also Thomas Herv?, Duncan McGreggor, Jonathan Lange, Andrew
> Bennetts, Jamu Kakar, and maybe others.
>
> I'm in a Cloud Computing session right now :-)

Heh, so am I :-) I'm wearing a PyCon t-shirt.

I think I spotted Duncan, five people in between him and me.

Cheers.




From micahel at gmail.com  Mon May 25 05:40:05 2009
From: micahel at gmail.com (Michael Hudson)
Date: Mon, 25 May 2009 10:40:05 +0100
Subject: [Twisted-Python] Twisted at UDS Karmic
In-Reply-To: <60ed19d40905250204s34f93fc0i50384ab726e194b1@mail.gmail.com>
References: <39113.80.67.104.102.1243238641.squirrel@webmail.sindominio.net>
	<60ed19d40905250204s34f93fc0i50384ab726e194b1@mail.gmail.com>
Message-ID: <aa0dfd860905250240v1b9a68i1f507808738f2b4d@mail.gmail.com>

2009/5/25 Christopher Armstrong <radix at twistedmatrix.com>:
> On Mon, May 25, 2009 at 10:04 AM, Esteve Fernandez
> <esteve at sindominio.net> wrote:
>> Hi all,
>>
>> I know quite a few Twisted developers love Ubuntu, so... is any of you here in
>> Barcelona for the Ubuntu Developer Summit for Karmic Koala? I'll be attending
>> some sprints, primarily about Ubuntu Server, messaging, cloud computing, etc.
>
>
> I'm here! Also Thomas Herv?, Duncan McGreggor, Jonathan Lange, Andrew
> Bennetts, Jamu Kakar, and maybe others.
>
> I'm in a Cloud Computing session right now :-)

I'm here too (also see
http://people.ubuntu.com/~mwh/canonical-men-of-twistery.jpg)

Cheers,
mwh



From exarkun at divmod.com  Tue May 26 16:36:18 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 26 May 2009 16:36:18 -0400
Subject: [Twisted-Python] Upcoming Sprint
In-Reply-To: <20090523092539.12555.1776739170.divmod.xquotient.11563@weber.divmod.com>
Message-ID: <20090526203618.21531.1031701929.divmod.quotient.25824@henry.divmod.com>

On Sat, 23 May 2009 09:25:39 -0000, glyph at divmod.com wrote:
>
>
>
>On 22 May, 04:43 am, keturn at keturn.net wrote:
>>Hey, that's me!  I'll be more free on the 30th than the 31st.  Even
>>more
>>free on June 1st, but maybe you sprinters have day jobs or something.
>
>See you on the 30th then.  I believe most sprinters do have day jobs :).
>>But I do look forward to participating in a Twisted sprint.  Our
>>attempts to host code sprints here in Portland have been irregular at
>>best.
>
>Yeah, for a while it was the same here.  I'm impressed at how
>predictable our sprints have been lately, though.  Looking forward to
>seeing you!
>
>Who else is coming?
>

I'll be there.

Jean-Paul



From larsivi at gmail.com  Wed May 27 09:08:49 2009
From: larsivi at gmail.com (Lars Ivar Igesund)
Date: Wed, 27 May 2009 15:08:49 +0200
Subject: [Twisted-Python] Reactor callback from the wrong thread
Message-ID: <24e981170905270608p25f6057fl2ad2b7f71cc2fac6@mail.gmail.com>

Hi!

I have an issue where the reactor calls the callback from a different
thread than the one the reactor is running in.

The usecase is as follows;

We are running tests using PyFit (Fitnesse), and where some of the
tests depends on receiving SNMP traps in the background. So at the
start we start a trap deamon defined as

class TrapDeamon(Thread, netsnmp.Session)

We use the pynetsnmp.twistedsnmp package and has a run() method that
looks like this

def run(self):
    self.awaitTraps(self.hostPort)
    twistedsnmp.updateReactor()
    reactor.run(installSignalHandlers=0)

In the callback from the reactor, we get the pdu of the trap which is
then sent into a trap buffer. On the PyFit side of things, we execute
some commands, and at some points we need a confirmation from a trap
before we can continue. This is done by waiting on a queue
(Queue.Queue). The trap buffer has a register over queues and awaited
trap OID's, and when the correct one is added to the buffer from the
reactor callback, it is put onto the queue, the test rejoice, and
continues.

However, I noticed that fairly often (say every 3rd wait), the wait
timed out even though I had seen the trap on wireshark. So I improved
the logging, and noticed that in the cases where the wait timed out,
the reactor callback for the trap I waited for happened in the main
thread (at least main thread id is reported by python logging), and
thus did not appear until immediately after the wait had failed and
unblocked. Most of the trap callbacks (both before and after these
misses) happens in the correct (reactor) thread though.

What can cause this and how may I debug it? AFAIK, PyFit does not use
twisted or threading at all, and we only have two simple background
threads our selves in addition to the one running the trap deamon.

Best regards,
Lars Ivar Igesund



From bra at fsn.hu  Wed May 27 11:28:40 2009
From: bra at fsn.hu (Attila Nagy)
Date: Wed, 27 May 2009 17:28:40 +0200
Subject: [Twisted-Python] Processpool recommendation (for
 scaling	to	multiple CPUs)
In-Reply-To: <20090524214639.12555.379159608.divmod.xquotient.11583@weber.divmod.com>
References: <4A19AC3F.7030500@fsn.hu>
	<20090524214639.12555.379159608.divmod.xquotient.11583@weber.divmod.com>
Message-ID: <4A1D5C28.8050307@fsn.hu>

glyph at divmod.com wrote:
> On 08:21 pm, bra at fsn.hu wrote:
>   
>> I've got some CPU scalability issues (the application became CPU bound,
>> but there are a lot more CPUs, which can't be used because of the
>> uniprocess nature), threading is not a solution, so the next logical
>> move could be starting multiple twisted reactors in different processes
>> and transparently switching incoming connections between them.
>> There is no need for intra-process communication, I need only a thing,
>> which does the process starting/stopping, connection multiplexing in a
>> clean way.
>>     
>
> Have you looked at Ampoule?  https://launchpad.net/ampoule/
>   
Wasn't aware of that.
Will do, thanks!



From exarkun at divmod.com  Wed May 27 11:43:22 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 27 May 2009 11:43:22 -0400
Subject: [Twisted-Python] Reactor callback from the wrong thread
In-Reply-To: <24e981170905270608p25f6057fl2ad2b7f71cc2fac6@mail.gmail.com>
Message-ID: <20090527154322.21531.781574174.divmod.quotient.26327@henry.divmod.com>

On Wed, 27 May 2009 15:08:49 +0200, Lars Ivar Igesund <larsivi at gmail.com> wrote:
>Hi!
>
>I have an issue where the reactor calls the callback from a different
>thread than the one the reactor is running in.

Generally speaking, the only callbacks the reactor invokes are protocol
methods (like dataReceived and connectionLost) and timed events (things
you pass to reactor.callLater).  It always calls these in the thread it
is running in.  What callbacks are you seeing be invoked in the "wrong"
thread?

> [snip]
>
>What can cause this and how may I debug it? AFAIK, PyFit does not use
>twisted or threading at all, and we only have two simple background
>threads our selves in addition to the one running the trap deamon.

The most likely explanation is that your code (perhaps by way of PyFit,
I'm not sure -- I've never used PyFit) is calling a Twisted API from a
thread other than the reactor thread.  So, examine all the places you
call Twisted APIs (including APIs in twistedsnmp which may call Twisted
APIs) and make sure they're only run in the reactor thread.

Jean-Paul



From ntoper at gmail.com  Wed May 27 12:16:52 2009
From: ntoper at gmail.com (Nicolas Toper)
Date: Wed, 27 May 2009 11:16:52 -0500
Subject: [Twisted-Python] ESMTP: method DIGEST-MD5 and IP authenticator
Message-ID: <fcbb46050905270916o1b446a56l864e847a545fcc4f@mail.gmail.com>

Hi,

I am going to add in the ESMTP class these two authentications
methods. Are you interested in a patch?

Best,
Nico
http://www.deviant-abstraction.net



From charnedn at muohio.edu  Wed May 27 14:39:45 2009
From: charnedn at muohio.edu (Dan)
Date: Wed, 27 May 2009 14:39:45 -0400
Subject: [Twisted-Python] Twisted protocol as Django data source
Message-ID: <D7D38F6A-59A3-4ABB-87AD-96E8EBC5451A@muohio.edu>

Hi all,

I have an application written in Twisted which multiplexes data from a  
variety of pieces of specialized hardware, and I'd like to make the  
live stream of this information viewable through a webpage.  
Unfortunately, on our server, port 80 is already taken by an Apache +  
mod_python + Django stack with which we host a number of webpages.

Ideally, I'd like to be able to write a quick Django app in which just  
import my Twisted protocol, connect to my network, and start streaming  
data. However, much googling has lead me to believe that this is  
unlikely to actually work. (Particularly, http://twistedmatrix.com/pipermail/twisted-web/2007-March/003311.html 
, which says that Twisted is simply not mod_python-friendly.)

The options I've thought of include using Twisted's builtin web server  
a nonstandard port, mod_proxy, or writing a Django app which just  
polls a database repeatedly and altering my Twisted app so it  
repeatedly does an UPDATE. All of these solutions feel hacky to me, so  
I'd like to ask you, the list, how you'd go about doing this.

Thanks,
Dan



From gtaylor at clemson.edu  Wed May 27 15:12:38 2009
From: gtaylor at clemson.edu (Greg Taylor)
Date: Wed, 27 May 2009 15:12:38 -0400
Subject: [Twisted-Python] Twisted protocol as Django data source
In-Reply-To: <D7D38F6A-59A3-4ABB-87AD-96E8EBC5451A@muohio.edu>
References: <D7D38F6A-59A3-4ABB-87AD-96E8EBC5451A@muohio.edu>
Message-ID: <8de369d70905271212g7aa36675yf6ff093521ace3f7@mail.gmail.com>

You might want to look into Orbited, there are a number of Django examples
out there:

http://www.orbited.org

On Wed, May 27, 2009 at 2:39 PM, Dan <charnedn at muohio.edu> wrote:

> Hi all,
>
> I have an application written in Twisted which multiplexes data from a
> variety of pieces of specialized hardware, and I'd like to make the
> live stream of this information viewable through a webpage.
> Unfortunately, on our server, port 80 is already taken by an Apache +
> mod_python + Django stack with which we host a number of webpages.
>
> Ideally, I'd like to be able to write a quick Django app in which just
> import my Twisted protocol, connect to my network, and start streaming
> data. However, much googling has lead me to believe that this is
> unlikely to actually work. (Particularly,
> http://twistedmatrix.com/pipermail/twisted-web/2007-March/003311.html
> , which says that Twisted is simply not mod_python-friendly.)
>
> The options I've thought of include using Twisted's builtin web server
> a nonstandard port, mod_proxy, or writing a Django app which just
> polls a database repeatedly and altering my Twisted app so it
> repeatedly does an UPDATE. All of these solutions feel hacky to me, so
> I'd like to ask you, the list, how you'd go about doing this.
>
> Thanks,
> Dan
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Greg Taylor
Clemson University, Class of 2009
Cell: (864) 888-7964
http://gc-taylor.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090527/42557801/attachment.htm 

From listsin at integrateddevcorp.com  Wed May 27 15:35:25 2009
From: listsin at integrateddevcorp.com (s s)
Date: Wed, 27 May 2009 15:35:25 -0400
Subject: [Twisted-Python] Twisted protocol as Django data source
In-Reply-To: <8de369d70905271212g7aa36675yf6ff093521ace3f7@mail.gmail.com>
References: <D7D38F6A-59A3-4ABB-87AD-96E8EBC5451A@muohio.edu>
	<8de369d70905271212g7aa36675yf6ff093521ace3f7@mail.gmail.com>
Message-ID: <0838AEC5-B747-49CC-B495-D61579A35E8E@integrateddevcorp.com>


On May 27, 2009, at 3:12 PM, Greg Taylor wrote:

> You might want to look into Orbited, there are a number of Django  
> examples out there:
>
> http://www.orbited.org

Website seems to be down.  Any idea who to ping to whack it?

S

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090527/3bad684f/attachment.htm 

From exarkun at divmod.com  Wed May 27 15:40:03 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 27 May 2009 15:40:03 -0400
Subject: [Twisted-Python] Twisted protocol as Django data source
In-Reply-To: <D7D38F6A-59A3-4ABB-87AD-96E8EBC5451A@muohio.edu>
Message-ID: <20090527194003.21531.615734528.divmod.quotient.26364@henry.divmod.com>

On Wed, 27 May 2009 14:39:45 -0400, Dan <charnedn at muohio.edu> wrote:
>Hi all,
>
>I have an application written in Twisted which multiplexes data from a
>variety of pieces of specialized hardware, and I'd like to make the
>live stream of this information viewable through a webpage.
>Unfortunately, on our server, port 80 is already taken by an Apache +
>mod_python + Django stack with which we host a number of webpages.
>
> [snip]
>
>The options I've thought of include using Twisted's builtin web server
>a nonstandard port, mod_proxy, or writing a Django app which just
>polls a database repeatedly and altering my Twisted app so it
>repeatedly does an UPDATE. All of these solutions feel hacky to me, so
>I'd like to ask you, the list, how you'd go about doing this.

Another option is to have Django talk to a Twisted process via some RPC
mechanism that won't require you to use Twisted in the Apache process.
For example, XML-RPC.

Jean-Paul



From dave at davebritton.com  Wed May 27 16:48:17 2009
From: dave at davebritton.com (Dave Britton)
Date: Wed, 27 May 2009 15:48:17 -0500
Subject: [Twisted-Python] Twisted protocol as Django data source
References: <D7D38F6A-59A3-4ABB-87AD-96E8EBC5451A@muohio.edu>
Message-ID: <064b01c9df0c$7676d270$0500a8c0@yoda>

I don't think the database option is a hack. Have twisted write the live
stream items into a ring-buffer SQL database table (eg. use records 1-100
over and over again), including a timestamp for each entry. Then your django
page can always retrieve the most current set of entries by SELECTing * from
the table in descending order by timestamp, which django is good at, staying
live with constant refreshing. There are no interprocess communication
pipes, broken sockets and timeouts etc. to screw up, no flaky javascript to
worry about, and the DBMS will handle the multiple simultaneous separate
data sources correctly. The central twisted application only has to keep
track of the buffer position. It's just not as much fun, though.
-Dave


----- Original Message -----
From: "Dan" <charnedn at muohio.edu>
To: <twisted-python at twistedmatrix.com>
Sent: Wednesday, May 27, 2009 1:39 PM
Subject: [Twisted-Python] Twisted protocol as Django data source


> Hi all,
>
> I have an application written in Twisted which multiplexes data from a
> variety of pieces of specialized hardware, and I'd like to make the
> live stream of this information viewable through a webpage.
> Unfortunately, on our server, port 80 is already taken by an Apache +
> mod_python + Django stack with which we host a number of webpages.
>
> Ideally, I'd like to be able to write a quick Django app in which just
> import my Twisted protocol, connect to my network, and start streaming
> data. However, much googling has lead me to believe that this is
> unlikely to actually work. (Particularly,
http://twistedmatrix.com/pipermail/twisted-web/2007-March/003311.html
> , which says that Twisted is simply not mod_python-friendly.)
>
> The options I've thought of include using Twisted's builtin web server
> a nonstandard port, mod_proxy, or writing a Django app which just
> polls a database repeatedly and altering my Twisted app so it
> repeatedly does an UPDATE. All of these solutions feel hacky to me, so
> I'd like to ask you, the list, how you'd go about doing this.
>
> Thanks,
> Dan
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From clemesha at gmail.com  Wed May 27 15:48:25 2009
From: clemesha at gmail.com (Alex Clemesha)
Date: Wed, 27 May 2009 12:48:25 -0700
Subject: [Twisted-Python] Twisted protocol as Django data source
In-Reply-To: <D7D38F6A-59A3-4ABB-87AD-96E8EBC5451A@muohio.edu>
References: <D7D38F6A-59A3-4ABB-87AD-96E8EBC5451A@muohio.edu>
Message-ID: <d272f0690905271248j64c54317h39c744607f3bd7a9@mail.gmail.com>

On Wed, May 27, 2009 at 11:39 AM, Dan <charnedn at muohio.edu> wrote:
> Hi all,
>
> I have an application written in Twisted which multiplexes data from a
> variety of pieces of specialized hardware, and I'd like to make the
> live stream of this information viewable through a webpage.
> Unfortunately, on our server, port 80 is already taken by an Apache +
> mod_python + Django stack with which we host a number of webpages.
>
> Ideally, I'd like to be able to write a quick Django app in which just
> import my Twisted protocol, connect to my network, and start streaming
> data. However, much googling has lead me to believe that this is
> unlikely to actually work. (Particularly, http://twistedmatrix.com/pipermail/twisted-web/2007-March/003311.html
> , which says that Twisted is simply not mod_python-friendly.)
>
> The options I've thought of include using Twisted's builtin web server
> a nonstandard port, mod_proxy, or writing a Django app which just
> polls a database repeatedly and altering my Twisted app so it
> repeatedly does an UPDATE. All of these solutions feel hacky to me, so
> I'd like to ask you, the list, how you'd go about doing this.

I wrote up some thoughts on this here:
http://clemesha.org/blog/2009/apr/23/Django-on-Twisted-using-latest-twisted-web-wsgi/

basically it comes down to running Django off the very latest WSGI
code (in the trunk still)
found in twisted.web, which I've found to work very well.

Also see here:
http://blog.dreid.org/2009/03/twisted-django-it-wont-burn-down-your.html



hope this helps some,
Alex






>
> Thanks,
> Dan
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Alex Clemesha
clemesha.org



From glyph at divmod.com  Wed May 27 16:16:23 2009
From: glyph at divmod.com (glyph at divmod.com)
Date: Wed, 27 May 2009 20:16:23 -0000
Subject: [Twisted-Python] Twisted protocol as Django data source
In-Reply-To: <20090527194003.21531.615734528.divmod.quotient.26364@henry.divmod.com>
References: <D7D38F6A-59A3-4ABB-87AD-96E8EBC5451A@muohio.edu>
	<20090527194003.21531.615734528.divmod.quotient.26364@henry.divmod.com>
Message-ID: <20090527201623.12555.1652233845.divmod.xquotient.11608@weber.divmod.com>


On 07:40 pm, exarkun at divmod.com wrote:
>On Wed, 27 May 2009 14:39:45 -0400, Dan <charnedn at muohio.edu> wrote:
>>Hi all,
>>
>>I have an application written in Twisted which multiplexes data from a
>>variety of pieces of specialized hardware, and I'd like to make the
>>live stream of this information viewable through a webpage.
>>Unfortunately, on our server, port 80 is already taken by an Apache +
>>mod_python + Django stack with which we host a number of webpages.
>>
>>[snip]
>>
>>The options I've thought of include using Twisted's builtin web server
>>a nonstandard port, mod_proxy, or writing a Django app which just
>>polls a database repeatedly and altering my Twisted app so it
>>repeatedly does an UPDATE. All of these solutions feel hacky to me, so
>>I'd like to ask you, the list, how you'd go about doing this.

Polling a database repeatedly and updating it "repeatedly" to 
synchronize data sounds pretty gross.  But then, if your Django 
application is rendering static web-pages and not updating them with 
some COMET technique, you can simply populate the database from Twisted 
when stuff changes and query it normally when the page is rendered - 
that doesn't seem bad to me.

If your Django application *is* using COMET to keep the page updated in 
real time, then you should look into Orbited - which, as it so happens, 
uses Twisted, so you can put it into your Twisted process.

Personally, I don't like using databases as a point of integration. 
Inevitably your Django app or your Twisted app will want to enforce 
constraints on the data and model things about the relationships between 
rows beyond what one can glean by inspecting the SQL schema.  Once the 
responsibility for managing the data's integrity has moved into 
middleware, you should be talking to the middleware and let that 
middleware manage your database.  Given that your Twisted process is the 
thing doing the UPDATEs here, I'd treat Twisted as the middleware, and 
agree with exarkun's recommendation:
>Another option is to have Django talk to a Twisted process via some RPC
>mechanism that won't require you to use Twisted in the Apache process.
>For example, XML-RPC.

In this vein, there is also a blocking-friendly implementation of the 
AMP protocol with no Twisted dependency:  https://launchpad.net/ampy - 
but it's maintained outside of Twisted and I wouldn't vouch for its 
quality.  On the other hand I wouldn't vouch for the quality of any XML- 
RPC client either ;-).

You can use whatever protocol you want for exchanging information 
between these two systems.  The important thing is really to make it a 
narrow, clearly-specified channel of communication.



From listsin at integrateddevcorp.com  Wed May 27 17:47:52 2009
From: listsin at integrateddevcorp.com (s s)
Date: Wed, 27 May 2009 17:47:52 -0400
Subject: [Twisted-Python] Twisted protocol as Django data source
In-Reply-To: <d272f0690905271248j64c54317h39c744607f3bd7a9@mail.gmail.com>
References: <D7D38F6A-59A3-4ABB-87AD-96E8EBC5451A@muohio.edu>
	<d272f0690905271248j64c54317h39c744607f3bd7a9@mail.gmail.com>
Message-ID: <2933D24F-7C26-4B22-B357-3E6E730E8FB3@integrateddevcorp.com>


On May 27, 2009, at 3:48 PM, Alex Clemesha wrote:

> On Wed, May 27, 2009 at 11:39 AM, Dan <charnedn at muohio.edu> wrote:
>> Hi all,
>>
>> I have an application written in Twisted which multiplexes data  
>> from a
>> variety of pieces of specialized hardware, and I'd like to make the
>> live stream of this information viewable through a webpage.
>> Unfortunately, on our server, port 80 is already taken by an Apache +
>> mod_python + Django stack with which we host a number of webpages.
>>
>> Ideally, I'd like to be able to write a quick Django app in which  
>> just
>> import my Twisted protocol, connect to my network, and start  
>> streaming
>> data. However, much googling has lead me to believe that this is
>> unlikely to actually work. (Particularly, http://twistedmatrix.com/pipermail/twisted-web/2007-March/003311.html
>> , which says that Twisted is simply not mod_python-friendly.)
>>
>> The options I've thought of include using Twisted's builtin web  
>> server
>> a nonstandard port, mod_proxy, or writing a Django app which just
>> polls a database repeatedly and altering my Twisted app so it
>> repeatedly does an UPDATE. All of these solutions feel hacky to me,  
>> so
>> I'd like to ask you, the list, how you'd go about doing this.
>
> I wrote up some thoughts on this here:
> http://clemesha.org/blog/2009/apr/23/Django-on-Twisted-using-latest-twisted-web-wsgi/
>
> basically it comes down to running Django off the very latest WSGI
> code (in the trunk still)
> found in twisted.web, which I've found to work very well.

I had some very strange errors and gave up and used CherryPy which  
worked right out of the box.  Has the Twisted WSGI changed much since  
the current release?  Did you have problems with the Twisted WSGI  
release version too and that's why you're running off trunk?

> Also see here:
> http://blog.dreid.org/2009/03/twisted-django-it-wont-burn-down-your.html

I followed those instructions, what there were of them, and got it  
running but it didn't seem to be able to serve static content.

I'd love it if the Twisted WSGI could run Django because the rest of  
my app relies on Twisted.

S






From asb.bush at gmail.com  Wed May 27 21:23:27 2009
From: asb.bush at gmail.com (Aaron Bush)
Date: Wed, 27 May 2009 21:23:27 -0400
Subject: [Twisted-Python] Guidance on Proxy-type Application
Message-ID: <5a8f2d170905271823x31855f68u8a27168c1efe863e@mail.gmail.com>

I have just started to look at the Twisted framework and would like to put
it to use for a new project I am working on.  Not being very familiar with
the framework and fairly new to Python in general I would like to ask a
design/architecture question.  (I have written similar applications in C but
would prefer to start this in the right direction and not write Python like
C.)

The application has the following model:

Many clients connect to the Application and prefer to leave the connection
open.  They will send messages across this connection.  They will expect to
get a message back at some point later, they do not wait for a response
(async).  The clients are already coded (legacy) and just need to send their
proprietary protocol to the new Application (written using Twisted).

The Twisted application will take the data from the clients and do some
transformation on it then send the message on to another server (3rd
party).  This connection to "another" server must be a single connection,
not one connection per client.  This connection should also be persistent
and not opened/closed for each client message sent.  Ideally if the 3rd
party server is down then I would also not accept client connections as the
messages are time sensitive and should not be stored and forwarded.  At some
point the 3rd part will send a message back and the Application will route
it back to the original source.  Basically request/reply pattern.

I have been reading through the archives and the twisted docs and have also
looked over the Hex-dump port-forwarding recipe but not found anything that
explains how to use twisted for this model.  Hex-dump is close but
opens/closes the connection to the server on each client connection.

I am thinking that there will be two Factories [and two protocols: 1) for
clients and 2) for 3rd party].  I am not sure how to best establish both the
listening factory and the client to 3rd party factory.  Once they are
established what is the preferred way in Twisted to pass a message from one
protocol to another?

Any pointers or sample code that you can offer is greatly appreciated.  I
would really like to cook this in Twisted and not go back to the C way.

Thanks,
-ab
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090527/50fd798d/attachment.htm 

From js at hipro.co.in  Thu May 28 01:54:02 2009
From: js at hipro.co.in (Joe Steeve)
Date: Thu, 28 May 2009 11:24:02 +0530
Subject: [Twisted-Python] twistd -y and
	'adbapi.ConnectionPool.runWithConnection'
Message-ID: <1243490042.4025.25.camel@lark.home.home>

Hello all,

I am doing a 'runWithConnection' call from the 'startService' of a
service.Service. In the callback, I startup more services based on the
results of the 'runWithConnection' and attach them to the main
application object.

This works fine when I start the script with 'twistd -noy'. However,
when I want to start it as a daemon using 'twisted -y', the
runWithConnection does not seem to work. The thread simply does not
start.

What could be wrong?

The database is 'PostgreSQL'. I am using the 'psycopg2' driver with the
adbapi.ConnectionPool.

Thanks a ton,
Joe

-- 
Joe Steeve
HiPro IT Solutions Pvt. Ltd.
http://hipro.co.in/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 197 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20090528/f48992c5/attachment.pgp 

From larsivi at gmail.com  Thu May 28 08:04:13 2009
From: larsivi at gmail.com (Lars Ivar Igesund)
Date: Thu, 28 May 2009 14:04:13 +0200
Subject: [Twisted-Python] Reactor callback from the wrong thread
In-Reply-To: <20090527154322.21531.781574174.divmod.quotient.26327@henry.divmod.com>
References: <24e981170905270608p25f6057fl2ad2b7f71cc2fac6@mail.gmail.com>
	<20090527154322.21531.781574174.divmod.quotient.26327@henry.divmod.com>
Message-ID: <24e981170905280504x7fa0dedexf91c45295dee706e@mail.gmail.com>

Hi, thanks for the reply.

On Wed, May 27, 2009 at 5:43 PM, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> On Wed, 27 May 2009 15:08:49 +0200, Lars Ivar Igesund <larsivi at gmail.com> wrote:
>>Hi!
>>
>>I have an issue where the reactor calls the callback from a different
>>thread than the one the reactor is running in.
>
> Generally speaking, the only callbacks the reactor invokes are protocol
> methods (like dataReceived and connectionLost) and timed events (things
> you pass to reactor.callLater). ?It always calls these in the thread it
> is running in. ?What callbacks are you seeing be invoked in the "wrong"
> thread?

Sorry for being a bit unclear; these callbacks originates from the
SNMP trap listen agent which at the bottom is Net-SNMP wrapped in
Python and a protocol for Twisted (incorporated in pynetsnmp, package
python-pynetsnmp in Ubuntu/Debian).

>
>> [snip]
>>
>>What can cause this and how may I debug it? AFAIK, PyFit does not use
>>twisted or threading at all, and we only have two simple background
>>threads our selves in addition to the one running the trap deamon.
>
> The most likely explanation is that your code (perhaps by way of PyFit,
> I'm not sure -- I've never used PyFit) is calling a Twisted API from a
> thread other than the reactor thread. ?So, examine all the places you
> call Twisted APIs (including APIs in twistedsnmp which may call Twisted
> APIs) and make sure they're only run in the reactor thread.

Googling further, it appears that NetSNMP is not considered thread
safe, and this is probably the reason for my troubles (there are
normal netsnmp calls going the other way from the apparently hijacked
thread).

PyFit did not have any twisted dependencies, so I don't consider it an
option at this point.

I have also tested the alternative Twisted SNMP package (based on
PySNMP), but unfortunately both of those appear to mature enough for
our use.

At this point I'm probably left with two options; either make all of
the SNMP communication go via pynetsnmp (will cause at least some
rewriting), or move the trap deamon part into its own application that
communicates with the test framework via a sockets. The latter would
guarantee no snmp thread confusion, but may be a bit overkill.

If anyone has a good advice, then I'd appreciate it.

Thanks!



From micahel at gmail.com  Thu May 28 08:36:52 2009
From: micahel at gmail.com (Michael Hudson)
Date: Thu, 28 May 2009 14:36:52 +0200
Subject: [Twisted-Python] Twisted protocol as Django data source
In-Reply-To: <2933D24F-7C26-4B22-B357-3E6E730E8FB3@integrateddevcorp.com>
References: <D7D38F6A-59A3-4ABB-87AD-96E8EBC5451A@muohio.edu>
	<d272f0690905271248j64c54317h39c744607f3bd7a9@mail.gmail.com>
	<2933D24F-7C26-4B22-B357-3E6E730E8FB3@integrateddevcorp.com>
Message-ID: <aa0dfd860905280536x5dd9c563od050a5b42956d8b6@mail.gmail.com>

2009/5/27 s s <listsin at integrateddevcorp.com>:

>> I wrote up some thoughts on this here:
>> http://clemesha.org/blog/2009/apr/23/Django-on-Twisted-using-latest-twisted-web-wsgi/
>>
>> basically it comes down to running Django off the very latest WSGI
>> code (in the trunk still)
>> found in twisted.web, which I've found to work very well.
>
> I had some very strange errors and gave up and used CherryPy which
> worked right out of the box. ?Has the Twisted WSGI changed much since
> the current release?

Yes.

Cheers,
mwh



From glyph at divmod.com  Thu May 28 09:02:09 2009
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 28 May 2009 13:02:09 -0000
Subject: [Twisted-Python] Twisted protocol as Django data source
In-Reply-To: <aa0dfd860905280536x5dd9c563od050a5b42956d8b6@mail.gmail.com>
References: <D7D38F6A-59A3-4ABB-87AD-96E8EBC5451A@muohio.edu>
	<d272f0690905271248j64c54317h39c744607f3bd7a9@mail.gmail.com>
	<2933D24F-7C26-4B22-B357-3E6E730E8FB3@integrateddevcorp.com>
	<aa0dfd860905280536x5dd9c563od050a5b42956d8b6@mail.gmail.com>
Message-ID: <20090528130209.12555.873641961.divmod.xquotient.11612@weber.divmod.com>




On 12:36 pm, micahel at gmail.com wrote:
>2009/5/27 s s <listsin at integrateddevcorp.com>:
>>>I wrote up some thoughts on this here:
>>>http://clemesha.org/blog/2009/apr/23/Django-on-Twisted-using-latest- 
>>>twisted-web-wsgi/

>>I had some very strange errors and gave up and used CherryPy which
>>worked right out of the box. ?Has the Twisted WSGI changed much since
>>the current release?
>
>Yes.

Specifically, we discovered bugs during the PyCon sprints and worked to 
fix the WSGI layer so that it would work with popular web frameworks 
such as Django.

See the "updates" on the bottom of this blog post:

  http://blog.dreid.org/2009/03/twisted-django-it-wont-burn-down- 
your.html



From glyph at divmod.com  Thu May 28 09:13:34 2009
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 28 May 2009 13:13:34 -0000
Subject: [Twisted-Python] twistd -y
	and	'adbapi.ConnectionPool.runWithConnection'
In-Reply-To: <1243490042.4025.25.camel@lark.home.home>
References: <1243490042.4025.25.camel@lark.home.home>
Message-ID: <20090528131334.12555.134859842.divmod.xquotient.11614@weber.divmod.com>


On 05:54 am, js at hipro.co.in wrote:
>Hello all,
>
>I am doing a 'runWithConnection' call from the 'startService' of a
>service.Service. In the callback, I startup more services based on the
>results of the 'runWithConnection' and attach them to the main
>application object.
>
>This works fine when I start the script with 'twistd -noy'. However,
>when I want to start it as a daemon using 'twisted -y', the
>runWithConnection does not seem to work. The thread simply does not
>start.
>
>What could be wrong?

This behavior sounds very peculiar.  Possibly a bug.  But, I've never 
seen such behavior.  Could you attach a minimal example that reproduces 
the problem you're seeing?



From itamar at itamarst.org  Thu May 28 09:18:35 2009
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 28 May 2009 09:18:35 -0400
Subject: [Twisted-Python] Upcoming Sprint
In-Reply-To: <20090526203618.21531.1031701929.divmod.quotient.25824@henry.divmod.com>
References: <20090526203618.21531.1031701929.divmod.quotient.25824@henry.divmod.com>
Message-ID: <1243516715.20948.213.camel@pintsize>

I should be there for some of the day, at least.




From itamar at itamarst.org  Thu May 28 09:21:51 2009
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 28 May 2009 09:21:51 -0400
Subject: [Twisted-Python] Reactor callback from the wrong thread
In-Reply-To: <24e981170905280504x7fa0dedexf91c45295dee706e@mail.gmail.com>
References: <24e981170905270608p25f6057fl2ad2b7f71cc2fac6@mail.gmail.com>
	<20090527154322.21531.781574174.divmod.quotient.26327@henry.divmod.com>
	<24e981170905280504x7fa0dedexf91c45295dee706e@mail.gmail.com>
Message-ID: <1243516911.20948.215.camel@pintsize>

On Thu, 2009-05-28 at 14:04 +0200, Lars Ivar Igesund wrote:

> If anyone has a good advice, then I'd appreciate it.

You can call any reactor API from another thread using
reactor.callFromThread, or the more useful
twisted.internet.threads.blockingCallFromThread. So just wrap all places
that call into the reactor.

Hopefully one day we will have feature to help debug this sort of
problem:
http://twistedmatrix.com/trac/ticket/792




From esteve at sindominio.net  Thu May 28 09:43:47 2009
From: esteve at sindominio.net (Esteve Fernandez)
Date: Thu, 28 May 2009 15:43:47 +0200
Subject: [Twisted-Python] Twisted protocol as Django data source
In-Reply-To: <d272f0690905271248j64c54317h39c744607f3bd7a9@mail.gmail.com>
References: <D7D38F6A-59A3-4ABB-87AD-96E8EBC5451A@muohio.edu>
	<d272f0690905271248j64c54317h39c744607f3bd7a9@mail.gmail.com>
Message-ID: <200905281543.47655.esteve@sindominio.net>

On Wednesday 27 May 2009 21:48:25 Alex Clemesha wrote:
> I wrote up some thoughts on this here:
> http://clemesha.org/blog/2009/apr/23/Django-on-Twisted-using-latest-twisted
>-web-wsgi/
>
> basically it comes down to running Django off the very latest WSGI
> code (in the trunk still)
> found in twisted.web, which I've found to work very well.
>
> Also see here:
> http://blog.dreid.org/2009/03/twisted-django-it-wont-burn-down-your.html

Having Django running on top of Twisted.web doesn't make Django a normal 
Twisted application. You'll have to use reactor.callFromThread in a lot of 
places to maintain thread-safety, since most of the Twisted code isn't.

Like JP has pointed out, a solution based around RPC is a viable option. It's 
pretty straightforward, safe and performant.

My take (which uses Thrift for RPC, could have imagined that? :-)):

- define a Thrift spec file that describes a service with the methods that 
your Django application will issue (like queryResults(), readData(), etc.)

- generate code using the Thrift compiler for both blocking and non-blocking 
Python:
$ thrift --gen py (for regular Python)
$ thrift --gen py:twisted (for Twisted)

beware that both commands will dump code to a directory called gen-py, which 
gets overwritten each time

- create a normal Twisted application which speaks your protocol on one end 
and Thrift on the other. Use whatever transport you like, if you want to make 
it ultra fast use unix sockets and a tmpfs filesystem (e.g. /tmp in most 
Linux distributions)

- connect from your Django application to the Twisted Thrift service and issue 
whichever calls you defined in the first step

I have some code sitting around that does this (for txAMQP, in my case), I'll 
try to upload it somewhere.

Cheers.



From JOHN at egh.com  Thu May 28 12:01:40 2009
From: JOHN at egh.com (John Santos)
Date: Thu, 28 May 2009 12:01:40 -0400
Subject: [Twisted-Python] Guidance on Proxy-type Application
In-Reply-To: <5a8f2d170905271823x31855f68u8a27168c1efe863e@mail.gmail.com>
Message-ID: <1090528112050.16483O-300000@Ives.egh.com>


Hi Adam -

I'm in pretty much the same situation as you and am working on a similar
problem.  Very much a Python and Twisted newbie.

The program I'm working on needs to talk to a variety of clients and to
a single server, with more-or-less permanent connections to all of them.

My problem is somewhat different from yours (and probably a little
simpler), since all input from all clients goes to the server, and
all output from the server goes to all clients (so I don't have to
tag and remember which response goes to which client.)  However,
there are other messages from the clients that don't go to the
server, but instead do other things, some requiring responses.
So the message handling in my program (what happens when dataRecieved
gets called) may be more complicated than in yours.  But that is
(at least from my perspective) the easy part.  Getting the twisted
app to talk to the server and all the clients, and not to fall over
dead when a client goes away, etc. is (to me) the hard part, and I
feel like I've just gotten over a huge hump now that that is (mostly)
working (as of two days ago.)


I am using two factories, one to generate the object that talks to the
server (using conch.telnet), and one to generate objects to talk to
the clients.  The clients can come and go but would typically be
permanent.  (Actually 3 factories right now, since I'm using the
StdioProxyFactory from the example for debugging, but that will
go away as I get the client protocol working.)

I started from the dataforward.py example in Twisted book, but by
now it has been massively changed.

Before starting the reactor, I do a reactor.connectTCP to the server
using the factory for the server connections and a reactor.listenTCP
using the client connection factory, to listen for client connections.

One change I had to make to the example was to promote the
InputForwarder object from an attribute of the client connection
object to a global object since it is common to all the
client connections.  (I hope I have the terminology correct here;
as I've said, I'm a Python newbie.)

It turns out to be fairly small amount of code, and I think it
can still be simplified some more.

So I think you are on the right track.  HTH!


-- 
John Santos
Evans Griffiths & Hart, Inc.
781-861-0670 ext 539
-------------- next part --------------
I have just started to look at the Twisted framework and would like to put

it to use for a new project I am working on.  Not being very familiar with

the framework and fairly new to Python in general I would like to ask a

design/architecture question.  (I have written similar applications in C but

would prefer to start this in the right direction and not write Python like

C.)



The application has the following model:



Many clients connect to the Application and prefer to leave the connection

open.  They will send messages across this connection.  They will expect to

get a message back at some point later, they do not wait for a response

(async).  The clients are already coded (legacy) and just need to send their

proprietary protocol to the new Application (written using Twisted).



The Twisted application will take the data from the clients and do some

transformation on it then send the message on to another server (3rd

party).  This connection to "another" server must be a single connection,

not one connection per client.  This connection should also be persistent

and not opened/closed for each client message sent.  Ideally if the 3rd

party server is down then I would also not accept client connections as the

messages are time sensitive and should not be stored and forwarded.  At some

point the 3rd part will send a message back and the Application will route

it back to the original source.  Basically request/reply pattern.



I have been reading through the archives and the twisted docs and have also

looked over the Hex-dump port-forwarding recipe but not found anything that

explains how to use twisted for this model.  Hex-dump is close but

opens/closes the connection to the server on each client connection.



I am thinking that there will be two Factories [and two protocols: 1) for

clients and 2) for 3rd party].  I am not sure how to best establish both the

listening factory and the client to 3rd party factory.  Once they are

established what is the preferred way in Twisted to pass a message from one

protocol to another?



Any pointers or sample code that you can offer is greatly appreciated.  I

would really like to cook this in Twisted and not go back to the C way.



Thanks,

-ab

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090528/f89ace8e/attachment.htm 

From asb.bush at gmail.com  Thu May 28 15:22:20 2009
From: asb.bush at gmail.com (Aaron Bush)
Date: Thu, 28 May 2009 15:22:20 -0400
Subject: [Twisted-Python] Guidance on Proxy-type Application
In-Reply-To: <1090528112050.16483O-300000@Ives.egh.com>
References: <5a8f2d170905271823x31855f68u8a27168c1efe863e@mail.gmail.com>
	<1090528112050.16483O-300000@Ives.egh.com>
Message-ID: <5a8f2d170905281222v79d84301k1050ad112a2c9e60@mail.gmail.com>

Thanks John.

Here is some sample code that is somewhat working for me right now.  Any and
all comments are greatly appreciated.

1) I setup a netcat listener on port 8080.
2) Start the twisted program, it connects to 8080 and then fires up a
listener on port 808 from the ChattyMCProtocol protocol.
3) Start a netcat client connection to the server process.
4) The client connection and any data they enter will be passed to the
'master control' process (ReconnectingClientFactory).

from twisted.internet.protocol import ReconnectingClientFactory,
ServerFactory
from twisted.protocols.basic import LineOnlyReceiver
from twisted.internet import reactor

"""Some test code using a chat-like approach with a master control node"""

class ChattyServerProtocol(LineOnlyReceiver):
    '''
    A test proto which will receive data and then forward it on the to the
master control
    '''
    delimiter = '\n'

    def connectionMade(self):
        self.transport.write("Welcome to the Server\n")
        """ Tell the master control that a client came in"""
        self.factory.parent.transport.write("Someone connected\n")

    def connectionLost(self, reason):
        self.factory.parent.transport.write("Server lost the connection to a
client")

    def lineReceived(self, line):
        print "Server got some data: " + line
        """ Now send the data to the master control"""
        self.factory.parent.transport.write("Client Said: %s\n" % line)


class ChattyServerFactory(ServerFactory):
    protocol = ChattyServerProtocol

    def __init__(self, parent):
        self.parent = parent
        pass

class ChattyMCProtocol(LineOnlyReceiver):
    delimiter = '\n'

    def __init__(self):
        """Connected so startup Server for clients"""
        self.server_factory = ChattyServerFactory(self)
        reactor.listenTCP(808, self.server_factory)

    def lineReceived(self, line):
        self.transport.write("Processing what you said: %s\n" % line)

class ChattyMCFactory(ReconnectingClientFactory):

    def startedConnecting(self, connector):
        print "Connecting..."

    def clientConnectionFailed(self, connector, reason):
        print "The connection failed"
        ReconnectingClientFactory.clientConnectionFailed(self, connector,
reason)

    def clientConnectionLost(self, connector, reason):
        print "The connection was lost"
        ReconnectingClientFactory.clientConnectionLost(self, connector,
reason)

    def buildProtocol(self, addr):
        print "Connected, reset the delay"
        self.resetDelay()
        # Next startup a server for the clients
        #self.server_factory = ChattyServerFactory(self)
        return ChattyMCProtocol()

reactor.connectTCP("127.0.0.1", 8080, ChattyMCFactory())
reactor.run()

Items that I don't know how to handle yet:
 - I need to determine how to better handle the case where the connection
made via ReconnectingClientFactory is dropped.  It does reconnect as the
Factory should but the problem is that the Server portion is not cleanly
shutdown so when the ChattyMCProtocol tries to listen it fails as the socket
is already in use.  Any ideas how to signal to the server to shutdown?
 - Much more to be done.  How to take this to the level of a proper Twisted
"application", etc.

Thanks,
-ab

On Thu, May 28, 2009 at 12:01 PM, John Santos <JOHN at egh.com> wrote:

>
> Hi Adam -
>
> I'm in pretty much the same situation as you and am working on a similar
> problem.  Very much a Python and Twisted newbie.
>
> The program I'm working on needs to talk to a variety of clients and to
> a single server, with more-or-less permanent connections to all of them.
>
> My problem is somewhat different from yours (and probably a little
> simpler), since all input from all clients goes to the server, and
> all output from the server goes to all clients (so I don't have to
> tag and remember which response goes to which client.)  However,
> there are other messages from the clients that don't go to the
> server, but instead do other things, some requiring responses.
> So the message handling in my program (what happens when dataRecieved
> gets called) may be more complicated than in yours.  But that is
> (at least from my perspective) the easy part.  Getting the twisted
> app to talk to the server and all the clients, and not to fall over
> dead when a client goes away, etc. is (to me) the hard part, and I
> feel like I've just gotten over a huge hump now that that is (mostly)
> working (as of two days ago.)
>
>
> I am using two factories, one to generate the object that talks to the
> server (using conch.telnet), and one to generate objects to talk to
> the clients.  The clients can come and go but would typically be
> permanent.  (Actually 3 factories right now, since I'm using the
> StdioProxyFactory from the example for debugging, but that will
> go away as I get the client protocol working.)
>
> I started from the dataforward.py example in Twisted book, but by
> now it has been massively changed.
>
> Before starting the reactor, I do a reactor.connectTCP to the server
> using the factory for the server connections and a reactor.listenTCP
> using the client connection factory, to listen for client connections.
>
> One change I had to make to the example was to promote the
> InputForwarder object from an attribute of the client connection
> object to a global object since it is common to all the
> client connections.  (I hope I have the terminology correct here;
> as I've said, I'm a Python newbie.)
>
> It turns out to be fairly small amount of code, and I think it
> can still be simplified some more.
>
> So I think you are on the right track.  HTH!
>
>
> --
> John Santos
> Evans Griffiths & Hart, Inc.
> 781-861-0670 ext 539
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090528/8db3556e/attachment.htm 

From exarkun at divmod.com  Thu May 28 15:45:46 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 28 May 2009 15:45:46 -0400
Subject: [Twisted-Python] Guidance on Proxy-type Application
In-Reply-To: <5a8f2d170905281222v79d84301k1050ad112a2c9e60@mail.gmail.com>
Message-ID: <20090528194546.21531.1440791729.divmod.quotient.26823@henry.divmod.com>

On Thu, 28 May 2009 15:22:20 -0400, Aaron Bush <asb.bush at gmail.com> wrote:
>Thanks John.
>
>Here is some sample code that is somewhat working for me right now.  Any and
>all comments are greatly appreciated.
>
> [snip]
> - I need to determine how to better handle the case where the connection
>made via ReconnectingClientFactory is dropped.  It does reconnect as the
>Factory should but the problem is that the Server portion is not cleanly
>shutdown so when the ChattyMCProtocol tries to listen it fails as the socket
>is already in use.  Any ideas how to signal to the server to shutdown?

reactor.listenTCP returns an IListeningPort provider.  This interface has
a stopListening method.  You probably just want to call this when your
client connection is lost.

Alternatively, just set up the listening port once, instead of once per
client connection, and re-use it across all of your client connections.

Jean-Paul



From jjconti at gmail.com  Thu May 28 16:24:49 2009
From: jjconti at gmail.com (Juanjo Conti)
Date: Thu, 28 May 2009 17:24:49 -0300
Subject: [Twisted-Python] Automatic test for Twisted
Message-ID: <3f9007680905281324n681415c1ia915cd8d8abaafd6@mail.gmail.com>

Hi,

is there a way to write sort of unittest for Twisted and run them?

-- 
Juanjo Conti



From drew.smathers at gmail.com  Thu May 28 16:41:20 2009
From: drew.smathers at gmail.com (Drew Smathers)
Date: Thu, 28 May 2009 16:41:20 -0400
Subject: [Twisted-Python] Automatic test for Twisted
In-Reply-To: <3f9007680905281324n681415c1ia915cd8d8abaafd6@mail.gmail.com>
References: <3f9007680905281324n681415c1ia915cd8d8abaafd6@mail.gmail.com>
Message-ID: <368574aa0905281341o2d19f395ob31e1a4299640333@mail.gmail.com>

On Thu, May 28, 2009 at 4:24 PM, Juanjo Conti <jjconti at gmail.com> wrote:
> Hi,
>
> is there a way to write sort of unittest for Twisted and run them?
>

Yes, with twisted.trial:

http://twistedmatrix.com/projects/core/documentation/howto/testing.html

-Drew



From bernat at luffy.cx  Thu May 28 16:44:26 2009
From: bernat at luffy.cx (Vincent Bernat)
Date: Thu, 28 May 2009 22:44:26 +0200
Subject: [Twisted-Python] Automatic test for Twisted
In-Reply-To: <3f9007680905281324n681415c1ia915cd8d8abaafd6@mail.gmail.com>
	(Juanjo Conti's message of "Thu, 28 May 2009 17:24:49 -0300")
References: <3f9007680905281324n681415c1ia915cd8d8abaafd6@mail.gmail.com>
Message-ID: <m3eiu9dkk5.fsf@neo.luffy.cx>

OoO  En cette  soir?e bien  amorc?e du  jeudi 28  mai 2009,  vers 22:24,
Juanjo Conti <jjconti at gmail.com> disait?:

> is there a way to write sort of unittest for Twisted and run them?

Twisted even has  its own engine to run unit tests.  Look at the sources
of Twisted in  the test/ directory. There is a lot  of unittests you can
look at.
-- 
BOFH excuse #60:
system has been recalled



From glyph at divmod.com  Thu May 28 18:30:07 2009
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 28 May 2009 22:30:07 -0000
Subject: [Twisted-Python] Automatic test for Twisted
In-Reply-To: <m3eiu9dkk5.fsf@neo.luffy.cx>
References: <3f9007680905281324n681415c1ia915cd8d8abaafd6@mail.gmail.com>
	<m3eiu9dkk5.fsf@neo.luffy.cx>
Message-ID: <20090528223007.12555.200468668.divmod.xquotient.11622@weber.divmod.com>


On 08:44 pm, bernat at luffy.cx wrote:
>OoO  En cette  soir?e bien  amorc?e du  jeudi 28  mai 2009,  vers 
>22:24,
>Juanjo Conti <jjconti at gmail.com> disait?:
>>is there a way to write sort of unittest for Twisted and run them?
>
>Twisted even has  its own engine to run unit tests.  Look at the 
>sources
>of Twisted in  the test/ directory. There is a lot  of unittests you 
>can
>look at.

Twisted also comes with a tool for running these tests (and others; for 
example, your own).

You can run all of our tests by doing 'trial twisted' at the command 
line.



From glyph at divmod.com  Thu May 28 18:58:00 2009
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 28 May 2009 22:58:00 -0000
Subject: [Twisted-Python] Guidance on Proxy-type Application
Message-ID: <20090528225800.12555.827283410.divmod.xquotient.11675@weber.divmod.com>


On 01:23 am, asb.bush at gmail.com wrote:
>I have just started to look at the Twisted framework and would like to 
>put it
>to use for a new project I am working on.  Not being very familiar with 
>the
>framework and fairly new to Python in general I would like to ask a
>design/architecture question.  (I have written similar applications in 
>C but
>would prefer to start this in the right direction and not write Python 
>like
>C.)

Thanks for asking!

I apologize for the delay in my answer.  I started writing up a simple 
example (attached) but was discouraged to find that it was 100 lines 
long and required too much explaining.

Then I started documenting it and explaining every line but that was a 
very long, tedious message.  So, it doesn't have much in the way of 
explanation; I hope you will find it useful regardless.
>The application has the following model:

>Many clients connect to the Application and prefer to leave the 
>connection
>open.  They will send messages across this connection.  They will 
>expect to
>get a message back at some point later, they do not wait for a response
>(async).  The clients are already coded (legacy) and just need to send 
>their
>proprietary protocol to the new Application (written using Twisted).

This is *almost* a FAQ.  At least, you may find this to be a useful 
answer:

<http://twistedmatrix.com/trac/wiki/FrequentlyAskedQuestions#HowdoImakeinputononeconnectionresultinoutputonanother>
>The Twisted application will take the data from the clients and do some
>transformation on it then send the message on to another server (3rd 
>party).
>This connection to "another" server must be a single connection, not 
>one
>connection per client.  This connection should also be persistent and 
>not
>opened/closed for each client message sent.  Ideally if the 3rd party 
>server
>is down then I would also not accept client connections as the messages 
>are
>time sensitive and should not be stored and forwarded.  At some point 
>the 3rd
>part will send a message back and the Application will route it back to 
>the
>original source.  Basically request/reply pattern.

The example that I've attached does basically this.  Run it and then run 
'telnet localhost 4322', and type some lines; you will see that they are 
transformed and echoed back to you, both by the proxy and by the 
protocol being proxied.

At a high level, the answer to your question is so simple that it's hard 
to express.  Basically, you just need to have all the relevant objects 
having references to each other, and calling methods to achieve the 
desired effect.  The less magic, the better.

More precisely, you need an object responsible for managing your 
outgoing connections to your legacy server, so that it can handle 
disconnection and reconnection, queueing messages and so on.  Then you 
need your proxy server factory to hold a reference to that object, so 
that it can create references from each proxy server protocol connection 
object to the connection manager.

This is related to another recent thread - you can see my message in 
that thread here:

    http://thread.gmane.org/gmane.comp.python.twisted/18377/focus=18385
>I have been reading through the archives and the twisted docs and have 
>also
>looked over the Hex-dump port-forwarding recipe but not found anything 
>that
>explains how to use twisted for this model.  Hex-dump is close but
>opens/closes the connection to the server on each client connection.

I'm not sure why hex-dump port-forwarding is particularly relevant to 
this example.  Is it just because this is an application that connects 
from one host to another?
>I am thinking that there will be two Factories [and two protocols: 1) 
>for
>clients and 2) for 3rd party].  I am not sure how to best establish 
>both the
>listening factory and the client to 3rd party factory.  Once they are
>established what is the preferred way in Twisted to pass a message from 
>one
>protocol to another?

This part of your question is almost exactly the FAQ I mentioned above 
:).  To reiterate that answer, you just need to have references between 
objects, and call methods on the objects you want to do stuff.

If you have a client connection object, just get a reference to that 
from the relevant server connection object and call methods on the 
client object to emit messages on the client protocol, handling any 
responses appropriately.  Deferreds can help with that latter part.

It is always better if you can establish that reference as simply as 
possible; for example, by passing parameters to the __init__ of various 
classes.  Again, for reasons that have nothing to do with Twisted 
specifically, it's a bad idea to try to establish these references by 
having global variables floating around.

Here's a very very simple example of the "good way" to propagate some 
data to protocol instances that need it:

    class MyProtocol(Protocol):
        def __init__(self, data):
            self.data = data

    class MyFactory(Factory):
        def __init__(self, data):
            self.data = data

        def buildProtocol(self, addr):
            return MyProtocol(self.data)

    reactor.listenTCP(8765, MyFactory("some data"))

and here's a simple example of a really bad way (don't do this!):

    class MyProtocol(Protocol):
        def connectionMade(self):
            self.bleh = bleh

    bleh = "some data"
    f = Factory()
    f.protocol = MyProtocol
    reactor.listenTCP(9876, f)

Even in C, I'm pretty sure it's better style to pass structures to 
functions than to abuse piles of local variables :).  I only illustrate 
this bad style here because it seems to be a common antipattern.  The 
Protocol class itself doesn't take any parameters to __init__, and 
Twisted's users don't always realize that protocols and factories and so 
on are just regular objects, with no special rules; they just get 
methods called on them by the reactor.
>Any pointers or sample code that you can offer is greatly appreciated. 
>I
>would really like to cook this in Twisted and not go back to the C way.

Based on what you've said so far, I think you're basically on the right 
track.  Good luck!
-------------- next part --------------
A non-text attachment was scrubbed...
Name: multiclient.py
Type: application/x-python
Size: 2998 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20090528/f3e6c1bf/attachment.bin 

From charnedn at muohio.edu  Thu May 28 21:39:14 2009
From: charnedn at muohio.edu (Dan)
Date: Thu, 28 May 2009 21:39:14 -0400
Subject: [Twisted-Python] Guidance on Proxy-type Application
In-Reply-To: <20090528225800.12555.827283410.divmod.xquotient.11675@weber.divmod.com>
References: <20090528225800.12555.827283410.divmod.xquotient.11675@weber.divmod.com>
Message-ID: <D162E141-1638-4D1B-80ED-827EF68A3712@muohio.edu>

Semi, OT: Having glyph's example (or one like it) would've probably  
shaved a week off my initial foray into Twisted.

I respectfully recommend that a version containing a docstring or two  
be included somewhere on the site, possibly alongside the "Finger"  
tutorial under the heading "a simple example of how to use Twisted for  
people with a deadline."

Also, this comment:
> Twisted's users don't always realize that protocols and factories  
> and so on are just regular objects, with no special rules; they just  
> get methods called on them by the reactor.

should be prominently featured somewhere.


-Dan



From dripton at ripton.net  Thu May 28 22:01:42 2009
From: dripton at ripton.net (David Ripton)
Date: Thu, 28 May 2009 19:01:42 -0700
Subject: [Twisted-Python] Automatic test for Twisted
In-Reply-To: <368574aa0905281341o2d19f395ob31e1a4299640333@mail.gmail.com>
References: <3f9007680905281324n681415c1ia915cd8d8abaafd6@mail.gmail.com>
	<368574aa0905281341o2d19f395ob31e1a4299640333@mail.gmail.com>
Message-ID: <20090529020142.GA17340@vidar.dreamhost.com>

On 2009.05.28 16:41:20 -0400, Drew Smathers wrote:
> On Thu, May 28, 2009 at 4:24 PM, Juanjo Conti <jjconti at gmail.com> wrote:
> > is there a way to write sort of unittest for Twisted and run them?
> 
> Yes, with twisted.trial:
> 
> http://twistedmatrix.com/projects/core/documentation/howto/testing.html

Another option is nose.  Google for "nose.twistedtools"  

-- 
David Ripton    dripton at ripton.net



From charnedn at muohio.edu  Thu May 28 22:38:01 2009
From: charnedn at muohio.edu (Dan)
Date: Thu, 28 May 2009 22:38:01 -0400
Subject: [Twisted-Python] Twisted protocol as Django data source
In-Reply-To: <200905281543.47655.esteve@sindominio.net>
References: <D7D38F6A-59A3-4ABB-87AD-96E8EBC5451A@muohio.edu>
	<d272f0690905271248j64c54317h39c744607f3bd7a9@mail.gmail.com>
	<200905281543.47655.esteve@sindominio.net>
Message-ID: <DE21BA77-FC20-4E25-82A5-EB2DD39B3F3D@muohio.edu>

Thanks for all your replies.

Greg wrote:
> You might want to look into Orbited, there are a number of Django  
> examples
> out there:
>
> http://www.orbited.org

This looks very cool.  http://preview.tinyurl.com/3suqth (CometDaily)  
makes it seem extremely easy to develop for. Gonna play with this when  
I get a chance.

Jean-Paul wrote:
> Another option is to have Django talk to a Twisted process via some  
> RPC
> mechanism that won't require you to use Twisted in the Apache process.
> For example, XML-RPC.


I should have thought of this, as we're already using XML-RPC  
extensively in the application. All I'd really need to do is write a  
get_latest_data function and have Ajax poll Django poll XML-RPC. I  
keep forgetting that the GIL isn't anywhere near as much of a problem  
for this application now that it's Twisted than it was back when it  
was done entirely in threads.

And Esteve, there's a very good chance I'm going to start using  
Thrift. Thanks for pointing that out.

Alex wrote:
> I wrote up some thoughts on this here:
> http://clemesha.org/blog/2009/apr/23/Django-on-Twisted-using-latest-twisted-web-wsgi/
>
> basically it comes down to running Django off the very latest WSGI
> code (in the trunk still)
> found in twisted.web, which I've found to work very well.
>
> Also see here:
> http://blog.dreid.org/2009/03/twisted-django-it-wont-burn-down-your.html

WSGI is scary to me mostly because it's done in threads. Trying to  
find GIL-related bugs in the old code cost me a LOT of time. And while  
presumably this integration is done by people who are far better  
coders than I, I can't shake the thread safety thing.

Also, I almost never use someone else's svn head code if I can avoid  
it. This is partly because I don't consider myself a good enough  
debugger to file good reports against somebody's enormous source tree,  
but mostly because I want to be spending most of my time worrying  
about my code than someone else's.

The other unfortunate restraint is that Apache in this instance is non- 
optional, as the box we're using also houses mod_svn repositories.

Dave wrote:
> I don't think the database option is a hack. Have twisted write the  
> live
> stream items into a ring-buffer SQL database table (eg. use records  
> 1-100
> over and over again), including a timestamp for each entry. Then  
> your django
> page can always retrieve the most current set of entries by  
> SELECTing * from
> the table in descending order by timestamp, which django is good at,  
> staying
> live with constant refreshing. There are no interprocess communication
> pipes, broken sockets and timeouts etc. to screw up, no flaky  
> javascript to
> worry about, and the DBMS will handle the multiple simultaneous  
> separate
> data sources correctly. The central twisted application only has to  
> keep
> track of the buffer position. It's just not as much fun, though.

glyph at divmod wrote:
> Personally, I don't like using databases as a point of integration.
> Inevitably your Django app or your Twisted app will want to enforce
> constraints on the data and model things about the relationships  
> between
> rows beyond what one can glean by inspecting the SQL schema.

Okay, so calling it a "hack" probably wasn't a good choice of words. I  
was actually leaning strongly towards using our Postgres installation  
for Dave's reasons. But the thought of using the database for  
integration bothers me for precisely glyph's reason, even though we  
already have the multiplexer sticking data into Postgres. That's  
pretty much the driving worry behind my initial post. I'm trying to  
avoid Django's nice builtin database API like the plague because we  
store a LOT of data. Our indices have to be optimized for INSERTs; a  
typical query on this data comes with a human-noticeable delay (I  
haven't timed it, but on the order of a second). Doing that for 30-odd  
satellites isn't going to happen fast enough to make the UI smooth as  
we would like.

If I followed Dave's suggestion to the letter (ring-buffer), it would  
work, but something in me strongly resists storing the same data in  
two places. Probably the fact that every time I've done that, I've had  
sync issues. I could write a trigger for the synchronization, but that  
would break sqlite support, which I'm trying to keep in since it was  
requested at a conference.

Thank you all again for the advice, and I'm sorry if I misspelled  
anybody's name.

As I continue to work with this project, you'll doubtless hear from me  
again.

-Dan



From ntoper at gmail.com  Fri May 29 02:00:05 2009
From: ntoper at gmail.com (Nicolas Toper)
Date: Fri, 29 May 2009 01:00:05 -0500
Subject: [Twisted-Python] ESMTP extension
Message-ID: <fcbb46050905282300j3e5f7b98yb480ea06fce7debd@mail.gmail.com>

Hi,

I am using SMTP-AUTH with Twisted. I have extended smtp.mail to handle
LOGIN and PLAIN on the server side (the version I have handles only
CRAM-MD5). I am adding currently DIGEST-MD5.

Do you want a patch?

If yes, what is the best way to submit a patch (I could not find it on
the wiki)?

Best,
Nicolas
http://www.deviant-abstraction.net



From larsivi at gmail.com  Fri May 29 03:02:11 2009
From: larsivi at gmail.com (Lars Ivar Igesund)
Date: Fri, 29 May 2009 09:02:11 +0200
Subject: [Twisted-Python] Reactor callback from the wrong thread
In-Reply-To: <1243516911.20948.215.camel@pintsize>
References: <24e981170905270608p25f6057fl2ad2b7f71cc2fac6@mail.gmail.com>
	<20090527154322.21531.781574174.divmod.quotient.26327@henry.divmod.com>
	<24e981170905280504x7fa0dedexf91c45295dee706e@mail.gmail.com>
	<1243516911.20948.215.camel@pintsize>
Message-ID: <24e981170905290002j6f5f483erd36e0b5b6257ac4d@mail.gmail.com>

Thanks for the tip,

however - in which version was blockingCallFromThread added? It did
not wish to be imported from the version I installed via Ubuntu which
appears to be 2.5.0. (Bit confused about the version numbering though
since Twisted appears to be at something like 8.2)

Best,
Lars Ivar

On Thu, May 28, 2009 at 3:21 PM, Itamar Shtull-Trauring
<itamar at itamarst.org> wrote:
> On Thu, 2009-05-28 at 14:04 +0200, Lars Ivar Igesund wrote:
>
>> If anyone has a good advice, then I'd appreciate it.
>
> You can call any reactor API from another thread using
> reactor.callFromThread, or the more useful
> twisted.internet.threads.blockingCallFromThread. So just wrap all places
> that call into the reactor.
>
> Hopefully one day we will have feature to help debug this sort of
> problem:
> http://twistedmatrix.com/trac/ticket/792
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From michaelnt at gmail.com  Fri May 29 04:24:45 2009
From: michaelnt at gmail.com (Michael Thompson)
Date: Fri, 29 May 2009 09:24:45 +0100
Subject: [Twisted-Python] Guidance on Proxy-type Application
In-Reply-To: <20090528225800.12555.827283410.divmod.xquotient.11675@weber.divmod.com>
References: <20090528225800.12555.827283410.divmod.xquotient.11675@weber.divmod.com>
Message-ID: <4d6ba3de0905290124h3206cd4cne8b8f8767a54940e@mail.gmail.com>

2009/5/28 <glyph at divmod.com>

>
> On 01:23 am, asb.bush at gmail.com wrote:
>
>> I have just started to look at the Twisted framework and would like to put
>> it
>> to use for a new project I am working on.  Not being very familiar with
>> the
>> framework and fairly new to Python in general I would like to ask a
>> design/architecture question.  (I have written similar applications in C
>> but
>> would prefer to start this in the right direction and not write Python
>> like
>> C.)
>>
>
> Thanks for asking!
>
> I apologize for the delay in my answer.  I started writing up a simple
> example (attached) but was discouraged to find that it was 100 lines long
> and required too much explaining.
>
> Then I started documenting it and explaining every line but that was a very
> long, tedious message.  So, it doesn't have much in the way of explanation;
> I hope you will find it useful regardless.


Thanks for the very interesting example which I mainly follow apart from the
lineReceived method in the ProxyClient, don't we need to add a callback to
the deferred before appending it to the requestQueue?

class ProxyClient(LineReceiver):
    def connectionMade(self):
        self.requestQueue = []

    def forwardLine(self, line):
        self.sendLine(line)
        d = Deferred()
        self.requestQueue.append(d)
        return d

    def lineReceived(self, line):
        self.requestQueue.pop(0).callback(line)

Thanks, Michael
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090529/b2231724/attachment.htm 

From michaelnt at gmail.com  Fri May 29 04:47:33 2009
From: michaelnt at gmail.com (Michael Thompson)
Date: Fri, 29 May 2009 09:47:33 +0100
Subject: [Twisted-Python] Guidance on Proxy-type Application
In-Reply-To: <4d6ba3de0905290124h3206cd4cne8b8f8767a54940e@mail.gmail.com>
References: <20090528225800.12555.827283410.divmod.xquotient.11675@weber.divmod.com>
	<4d6ba3de0905290124h3206cd4cne8b8f8767a54940e@mail.gmail.com>
Message-ID: <4d6ba3de0905290147i2be997eci820efaaa9f7ba42f@mail.gmail.com>

2009/5/29 Michael Thompson <michaelnt at gmail.com>

> 2009/5/28 <glyph at divmod.com>
>
>>
>> On 01:23 am, asb.bush at gmail.com wrote:
>>
>>> I have just started to look at the Twisted framework and would like to
>>> put it
>>> to use for a new project I am working on.  Not being very familiar with
>>> the
>>> framework and fairly new to Python in general I would like to ask a
>>> design/architecture question.  (I have written similar applications in C
>>> but
>>> would prefer to start this in the right direction and not write Python
>>> like
>>> C.)
>>>
>>
>> Thanks for asking!
>>
>> I apologize for the delay in my answer.  I started writing up a simple
>> example (attached) but was discouraged to find that it was 100 lines long
>> and required too much explaining.
>>
>> Then I started documenting it and explaining every line but that was a
>> very long, tedious message.  So, it doesn't have much in the way of
>> explanation; I hope you will find it useful regardless.
>
>
> Thanks for the very interesting example which I mainly follow apart from
> the lineReceived method in the ProxyClient, don't we need to add a callback
> to the deferred before appending it to the requestQueue?
>

Oops I see now that the callback is added in the proxy server lineReceived.

Thanks, Michael
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090529/42532c4e/attachment.htm 

From rlotun at gmail.com  Fri May 29 08:04:12 2009
From: rlotun at gmail.com (Reza Lotun)
Date: Fri, 29 May 2009 13:04:12 +0100
Subject: [Twisted-Python] Automatic test for Twisted
In-Reply-To: <20090529020142.GA17340@vidar.dreamhost.com>
References: <3f9007680905281324n681415c1ia915cd8d8abaafd6@mail.gmail.com>
	<368574aa0905281341o2d19f395ob31e1a4299640333@mail.gmail.com>
	<20090529020142.GA17340@vidar.dreamhost.com>
Message-ID: <95bb10690905290504j714805demca37e1c4f2dc0e7c@mail.gmail.com>

On Fri, May 29, 2009 at 3:01 AM, David Ripton <dripton at ripton.net> wrote:
> Another option is nose. ?Google for "nose.twistedtools"

I've used nose for twisted unittests - and it usually works fine for
my purposes.

Just to expand a bit on how *I've* used it:

from nose.twistedtools import deferred
from twisted.internet import defer

@deferred()
@defer.inlineCallbacks
def test_something():
   res = yield func_that_returns_deferred()
   assert res == 'something'

etc.

It's generally quite readable, and integrates nicely with non-twisted
unittests - I like the way that you can just write 'asserts'. However,
there are some caveats - namely that twisted is actually started in
another thread. So, if you plan to run a server to test calls against
(say in your setup_module) you need to make a wrapper around any
connection maker to use reactor.callFromThread.

Hope that's useful,
Reza

-- 
Reza Lotun
+44 (0)7521 310 763
rlotun at gmail.com



From exarkun at divmod.com  Fri May 29 08:25:56 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 29 May 2009 08:25:56 -0400
Subject: [Twisted-Python] ESMTP extension
In-Reply-To: <fcbb46050905282300j3e5f7b98yb480ea06fce7debd@mail.gmail.com>
Message-ID: <20090529122556.21531.1859389006.divmod.quotient.27034@henry.divmod.com>

On Fri, 29 May 2009 01:00:05 -0500, Nicolas Toper <ntoper at gmail.com> wrote:
>Hi,
>
>I am using SMTP-AUTH with Twisted. I have extended smtp.mail to handle
>LOGIN and PLAIN on the server side (the version I have handles only
>CRAM-MD5). I am adding currently DIGEST-MD5.
>
>Do you want a patch?
>
>If yes, what is the best way to submit a patch (I could not find it on
>the wiki)?

Hi Nicolas,

A patch adding DIGEST-MD5 support would be great.  You can find details on
how to contribute here:

  http://twistedmatrix.com/trac/wiki/TwistedDevelopment

You might also find twisted.cred.credentials.DigestedCredentials useful.

Jean-Paul



From thomas.jakobsen at alexandra.dk  Fri May 29 08:22:43 2009
From: thomas.jakobsen at alexandra.dk (Thomas Jakobsen)
Date: Fri, 29 May 2009 14:22:43 +0200
Subject: [Twisted-Python] reactor.stop() and deferToThead
Message-ID: <232f319b0905290522y7983b5f5h8fb95e6794c43b16@mail.gmail.com>

Hi

It seems that things being deferredToThread continue to run even
though reactor.stop() is called.

Output from the example below is:

stuff1 finished; stopping reactor
stuff2 finished

Is there a way to abort the remaining execution of stuff2 in this
case? It would be handy if, say, some exception happens in in stuff1
that causes the execution of the remaining stuff2 to be meaningless.

Kind regards,
Thomas

---------------------------------------------

from twisted.internet.threads import deferToThread
from twisted.internet import reactor

def stuff1():
    time.sleep(2)
    print "stuff1 finished; stopping reactor"
    reactor.stop()

def stuff2():
    time.sleep(4)
    print "stuff2 finished"

d1 = deferToThread(stuff1)
d2 = deferToThread(stuff2)

reactor.run()



From exarkun at divmod.com  Fri May 29 08:40:21 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 29 May 2009 08:40:21 -0400
Subject: [Twisted-Python] reactor.stop() and deferToThead
In-Reply-To: <232f319b0905290522y7983b5f5h8fb95e6794c43b16@mail.gmail.com>
Message-ID: <20090529124021.21531.27600129.divmod.quotient.27036@henry.divmod.com>

On Fri, 29 May 2009 14:22:43 +0200, Thomas Jakobsen <thomas.jakobsen at alexandra.dk> wrote:
>Hi
>
>It seems that things being deferredToThread continue to run even
>though reactor.stop() is called.

Threads cannot be interrupted.  They will run until they function they are
running returns.

>
>Output from the example below is:
>
>stuff1 finished; stopping reactor
>stuff2 finished
>
>Is there a way to abort the remaining execution of stuff2 in this
>case? It would be handy if, say, some exception happens in in stuff1
>that causes the execution of the remaining stuff2 to be meaningless.

You can make stuff2 cooperate with stuff1 so that it returns earlier.

> [snip]
>
>def stuff1():
>    time.sleep(2)
>    print "stuff1 finished; stopping reactor"
>    reactor.stop()

Also, you're calling reactor.stop() in a non-reactor thread here.  This is
not allowed.  You must call it in the reactor thread, along with almost
every other API.  Try reactor.callFromThread(reactor.stop), instead.

Jean-Paul



From charnedn at muohio.edu  Fri May 29 08:52:19 2009
From: charnedn at muohio.edu (Dan)
Date: Fri, 29 May 2009 08:52:19 -0400
Subject: [Twisted-Python] reactor.stop() and deferToThead
In-Reply-To: <232f319b0905290522y7983b5f5h8fb95e6794c43b16@mail.gmail.com>
References: <232f319b0905290522y7983b5f5h8fb95e6794c43b16@mail.gmail.com>
Message-ID: <2cbbbf391c5eda30435c2adc808b5b76@localhost>


Python seems to intentionally make aborting threads nigh impossible. You're
probably way better off doing something akin to this:

    def stuff2():
        time.sleep(4)
        if reactor.running:
            print "stuff2 finished"
        else:
            print "Don't need to stuff2"

Also iirc in Twisted you need to use callFromThread on reactor methods
rather than calling the reactor directly.


On Fri, 29 May 2009 14:22:43 +0200, Thomas Jakobsen
<thomas.jakobsen at alexandra.dk> wrote:
> Hi
> 
> It seems that things being deferredToThread continue to run even
> though reactor.stop() is called.
> 
> Output from the example below is:
> 
> stuff1 finished; stopping reactor
> stuff2 finished
> 
> Is there a way to abort the remaining execution of stuff2 in this
> case? It would be handy if, say, some exception happens in in stuff1
> that causes the execution of the remaining stuff2 to be meaningless.
> 
> Kind regards,
> Thomas
> 
> ---------------------------------------------
> 
> from twisted.internet.threads import deferToThread
> from twisted.internet import reactor
> 
> def stuff1():
>     time.sleep(2)
>     print "stuff1 finished; stopping reactor"
>     reactor.stop()
> 
> def stuff2():
>     time.sleep(4)
>     print "stuff2 finished"
> 
> d1 = deferToThread(stuff1)
> d2 = deferToThread(stuff2)
> 
> reactor.run()
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From thomas.jakobsen at alexandra.dk  Fri May 29 09:21:33 2009
From: thomas.jakobsen at alexandra.dk (Thomas Jakobsen)
Date: Fri, 29 May 2009 15:21:33 +0200
Subject: [Twisted-Python] reactor.stop() and deferToThead
In-Reply-To: <232f319b0905290620n6cbd7e28kcc04fff4c5ff235e@mail.gmail.com>
References: <232f319b0905290522y7983b5f5h8fb95e6794c43b16@mail.gmail.com>
	<2cbbbf391c5eda30435c2adc808b5b76@localhost>
	<232f319b0905290620n6cbd7e28kcc04fff4c5ff235e@mail.gmail.com>
Message-ID: <232f319b0905290621t4b135f94w985e7e9e8181c4e0@mail.gmail.com>

Thanks for the quick answers! Explicitly making stuff2() return as
soon as it discovers that the reactor has stopped solves the problem.

Regards,
Thomas



From itamar at itamarst.org  Fri May 29 09:39:44 2009
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 29 May 2009 09:39:44 -0400
Subject: [Twisted-Python] Reactor callback from the wrong thread
In-Reply-To: <24e981170905290002j6f5f483erd36e0b5b6257ac4d@mail.gmail.com>
References: <24e981170905270608p25f6057fl2ad2b7f71cc2fac6@mail.gmail.com>
	<20090527154322.21531.781574174.divmod.quotient.26327@henry.divmod.com>
	<24e981170905280504x7fa0dedexf91c45295dee706e@mail.gmail.com>
	<1243516911.20948.215.camel@pintsize>
	<24e981170905290002j6f5f483erd36e0b5b6257ac4d@mail.gmail.com>
Message-ID: <1243604384.8628.9.camel@pintsize>

On Fri, 2009-05-29 at 09:02 +0200, Lars Ivar Igesund wrote:
> Thanks for the tip,
> 
> however - in which version was blockingCallFromThread added? 

Post-2.5.0 apparently. I suggest at least reading the code so you can
see how it works.




From glyph at divmod.com  Fri May 29 11:22:40 2009
From: glyph at divmod.com (glyph at divmod.com)
Date: Fri, 29 May 2009 15:22:40 -0000
Subject: [Twisted-Python] Guidance on Proxy-type Application
In-Reply-To: <4d6ba3de0905290124h3206cd4cne8b8f8767a54940e@mail.gmail.com>
References: <20090528225800.12555.827283410.divmod.xquotient.11675@weber.divmod.com>
	<4d6ba3de0905290124h3206cd4cne8b8f8767a54940e@mail.gmail.com>
Message-ID: <20090529152240.12555.230203246.divmod.xquotient.12009@weber.divmod.com>


On 08:24 am, michaelnt at gmail.com wrote:
>2009/5/28 <glyph at divmod.com>

>Thanks for the very interesting example which I mainly follow apart 
>from the
>lineReceived method in the ProxyClient, don't we need to add a callback 
>to
>the deferred before appending it to the requestQueue?

Definitely not!  That would defeat the purpose.  The Deferred doesn't 
have a value yet: you're waiting for the other side of the connection to 
respond with an echo line.  As you can see, the result becomes available 
in lineReceived:
>class ProxyClient(LineReceiver):
>    def connectionMade(self):
>        self.requestQueue = []
>
>    def forwardLine(self, line):
>        self.sendLine(line)
>        d = Deferred()
>        self.requestQueue.append(d)
>        return d

And we callback the Deferred when it is available:
>    def lineReceived(self, line):
>        self.requestQueue.pop(0).callback(line)
>
>Thanks, Michael

HTH,

-glyph



From ntoper at gmail.com  Fri May 29 22:08:59 2009
From: ntoper at gmail.com (Nicolas Toper)
Date: Fri, 29 May 2009 21:08:59 -0500
Subject: [Twisted-Python] ESMTP extension
In-Reply-To: <20090529122556.21531.1859389006.divmod.quotient.27034@henry.divmod.com>
References: <fcbb46050905282300j3e5f7b98yb480ea06fce7debd@mail.gmail.com>
	<20090529122556.21531.1859389006.divmod.quotient.27034@henry.divmod.com>
Message-ID: <fcbb46050905291908j58410beah6da618c7659d99c4@mail.gmail.com>

No problem, just DIGEST-MD5. No need for PLAIN or LOGIN?


On Fri, May 29, 2009 at 7:25 AM, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> On Fri, 29 May 2009 01:00:05 -0500, Nicolas Toper <ntoper at gmail.com> wrote:
>>Hi,
>>
>>I am using SMTP-AUTH with Twisted. I have extended smtp.mail to handle
>>LOGIN and PLAIN on the server side (the version I have handles only
>>CRAM-MD5). I am adding currently DIGEST-MD5.
>>
>>Do you want a patch?
>>
>>If yes, what is the best way to submit a patch (I could not find it on
>>the wiki)?
>
> Hi Nicolas,
>
> A patch adding DIGEST-MD5 support would be great. ?You can find details on
> how to contribute here:
>
> ?http://twistedmatrix.com/trac/wiki/TwistedDevelopment
>
> You might also find twisted.cred.credentials.DigestedCredentials useful.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From exarkun at divmod.com  Sat May 30 02:19:30 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sat, 30 May 2009 02:19:30 -0400
Subject: [Twisted-Python] ESMTP extension
In-Reply-To: <fcbb46050905291908j58410beah6da618c7659d99c4@mail.gmail.com>
Message-ID: <20090530061930.21531.283615428.divmod.quotient.27484@henry.divmod.com>

On Fri, 29 May 2009 21:08:59 -0500, Nicolas Toper <ntoper at gmail.com> wrote:
>No problem, just DIGEST-MD5. No need for PLAIN or LOGIN?
>

I think it handles PLAIN and LOGIN already (and CRAM-MD5).  Maybe we're
not talking about the same API?  I was thinking about the ESMTP server.

Jean-Paul



From ntoper at gmail.com  Sat May 30 02:31:40 2009
From: ntoper at gmail.com (Nicolas Toper)
Date: Sat, 30 May 2009 01:31:40 -0500
Subject: [Twisted-Python] ESMTP extension
In-Reply-To: <20090530061930.21531.283615428.divmod.quotient.27484@henry.divmod.com>
References: <fcbb46050905291908j58410beah6da618c7659d99c4@mail.gmail.com>
	<20090530061930.21531.283615428.divmod.quotient.27484@henry.divmod.com>
Message-ID: <fcbb46050905292331x65e3bb1cv93a21f9b5ba34ff6@mail.gmail.com>

AFAIK the ESMTP client handles these cases, not the server. See
http://twistedmatrix.com/trac/browser/trunk/twisted/mail/protocols.py#L125

Maybe I did not get something.



On Sat, May 30, 2009 at 1:19 AM, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> On Fri, 29 May 2009 21:08:59 -0500, Nicolas Toper <ntoper at gmail.com> wrote:
>>No problem, just DIGEST-MD5. No need for PLAIN or LOGIN?
>>
>
> I think it handles PLAIN and LOGIN already (and CRAM-MD5). ?Maybe we're
> not talking about the same API? ?I was thinking about the ESMTP server.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From sakalsiz at gmail.com  Sat May 30 04:24:21 2009
From: sakalsiz at gmail.com (Mustafa Sakalsiz)
Date: Sat, 30 May 2009 11:24:21 +0300
Subject: [Twisted-Python] Twisted for Nokia S60 Platform
Message-ID: <767e5e0d0905300124g7f55ef54mec8a70fba1640a2d@mail.gmail.com>

Hi all,

I am wondering if somebody has tried to run the twisted on nokia's s60
platform. I am not expecting twisted operate with full functionality, but I
will be glad to hear about it if there are some efforts. I also wanted to be
involved in such an effort.

S60 platform already supports python 2.5.4 core and openssl.

Thanks in advance.

Saki
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090530/60b55838/attachment.htm 

From glyph at divmod.com  Sat May 30 12:54:44 2009
From: glyph at divmod.com (glyph at divmod.com)
Date: Sat, 30 May 2009 16:54:44 -0000
Subject: [Twisted-Python] Twisted for Nokia S60 Platform
Message-ID: <20090530165444.12555.1484301518.divmod.xquotient.12016@weber.divmod.com>

On 08:24 am, sakalsiz at gmail.com wrote:
>I am wondering if somebody has tried to run the twisted on nokia's s60
>platform. I am not expecting twisted operate with full functionality, 
>but I
>will be glad to hear about it if there are some efforts. I also wanted 
>to be
>involved in such an effort.
>
>S60 platform already supports python 2.5.4 core and openssl.

Unfortunately I haven't done this, but please let us know if you manage 
to succeed!  It would be cool to have a buildbot for S60 support, 
somehow.

Personally, I have run the very basic core of Twisted on PythonCE, which 
is a similarly limited environment, and it worked pretty well.



From wthie at thiengineering.ch  Sat May 30 12:59:38 2009
From: wthie at thiengineering.ch (Werner Thie)
Date: Sat, 30 May 2009 18:59:38 +0200
Subject: [Twisted-Python] Twisted for Nokia S60 Platform
In-Reply-To: <767e5e0d0905300124g7f55ef54mec8a70fba1640a2d@mail.gmail.com>
References: <767e5e0d0905300124g7f55ef54mec8a70fba1640a2d@mail.gmail.com>
Message-ID: <4A2165FA.5020605@thiengineering.ch>

Hi all

I diddled with twisted on my Nokia E61 and managed to get some basics 
working. A few patches were necessary but I had it up and running in a 
few hours. Will have a look if the code is still around.

BTW, I didn't follow the development on this side closely being busy 
with other projects, but is there now an official Nokia release of 
Python 2.5. I still have the late beta version with the unbearable lousy 
cam implementation

Werner

Mustafa Sakalsiz wrote:
> Hi all,
> 
> I am wondering if somebody has tried to run the twisted on nokia's s60 
> platform. I am not expecting twisted operate with full functionality, 
> but I will be glad to hear about it if there are some efforts. I also 
> wanted to be involved in such an effort.
> 
> S60 platform already supports python 2.5.4 core and openssl.
> 
> Thanks in advance.
> 
> Saki
> 
> 
> ------------------------------------------------------------------------
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From travis+ml-twisted at subspacefield.org  Sat May 30 19:17:54 2009
From: travis+ml-twisted at subspacefield.org (travis+ml-twisted at subspacefield.org)
Date: Sat, 30 May 2009 18:17:54 -0500
Subject: [Twisted-Python] buildProtocol never called
Message-ID: <20090530231754.GA10964@subspacefield.org>

Hello,

First let me introduce a piece of software I have written using
Twisted: it's called dfd_keeper[1], and is a BSD/pf port of a generic
concept I invented called the dynamic firewall daemon[2].

[1] http://www.subspacefield.org/security/dfd_keeper/
[2] http://www.subspacefield.org/security/dfd/

If you like the concept, please promote the idea; I think it's neat
but there hasn't exactly been a groundswell of interest in it.

In essence, it allows you to netcat or telnet to the daemon process
and issue text-like commands that alter your firewall rules.  You can
think of it as a "shell" for the firewall, and it can do neat things
like create firewall rules that expire automatically after a period of
time and so on.

The problem I'm having is this; I upgraded my firewall from OpenBSD
4.2 or so to OpenBSD 4.5, and now I'm working with newer versions of
all the software including Twisted.

The program works fine normally, and can run in the background, but if I
invoke a daemonize() routine that turns it into a network daemon, it
refuses to serve incoming TCP connections.  Actually the TCP connection
is made, but the software never responds to it.

Specifically, my twisted.internet.protocol.Factory instance is created,
but buildProtocol is never called.

Before I dive deeply into debugging the software, I thought I'd ask if
anyone knew off the top of their head any reason why Twisted might not
act the same if it was daemonized (no controlling terminal, no
stdin/out/err, forked as a background process).

Thanks!
Travis H.
-- 
Obama Nation | My emails do not have attachments; it's a digital signature
that your mail program doesn't understand. | http://www.subspacefield.org/~travis/ 
If you are a spammer, please email john at subspacefield.org to get blacklisted.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 833 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20090530/119e7f8b/attachment.pgp 

From travis+ml-twisted at subspacefield.org  Sat May 30 19:36:16 2009
From: travis+ml-twisted at subspacefield.org (travis+ml-twisted at subspacefield.org)
Date: Sat, 30 May 2009 18:36:16 -0500
Subject: [Twisted-Python] buildProtocol never called
In-Reply-To: <20090530231754.GA10964@subspacefield.org>
References: <20090530231754.GA10964@subspacefield.org>
Message-ID: <20090530233616.GB10964@subspacefield.org>

On Sat, May 30, 2009 at 06:17:54PM -0500, travis+ml-twisted at subspacefield.org wrote:
> The program works fine normally, and can run in the background, but if I
> invoke a daemonize() routine that turns it into a network daemon, it
> refuses to serve incoming TCP connections.  Actually the TCP connection
> is made, but the software never responds to it.
> 
> Specifically, my twisted.internet.protocol.Factory instance is created,
> but buildProtocol is never called.
> 
> Before I dive deeply into debugging the software, I thought I'd ask if
> anyone knew off the top of their head any reason why Twisted might not
> act the same if it was daemonized (no controlling terminal, no
> stdin/out/err, forked as a background process).

Here's some behavior I've gathered through debugging.  Note that all of
the daemonization occurs before starting the reactor.

If I don't close any file descriptors during daemonization, the
program works fine.

If I close all file descriptors (3, 4, 5, 6, 7)  and above, it works, but upon
disconnecting, I get the following error message:

  File "/etc/keeper_screen", line 675, in <module>
    reactor.run()
  File "/usr/local/lib/python2.5/site-packages/twisted/internet/base.py", line 1128, in run
    self.mainLoop()
--- <exception caught here> ---
  File "/usr/local/lib/python2.5/site-packages/twisted/internet/base.py", line 1140, in mainLoop
    self.doIteration(t)
  File "/usr/local/lib/python2.5/site-packages/twisted/internet/selectreactor.py", line 126, in doSelect
    self._preenDescriptors()
  File "/usr/local/lib/python2.5/site-packages/twisted/internet/selectreactor.py", line 88, in _preenDescriptors
    self._disconnectSelectable(selectable, e, False)
  File "/usr/local/lib/python2.5/site-packages/twisted/internet/posixbase.py", line 196, in _disconnectSelectable
    selectable.connectionLost(failure.Failure(why))
  File "/usr/local/lib/python2.5/site-packages/twisted/internet/posixbase.py", line 150, in connectionLost
    os.close(fd)
exceptions.OSError: [Errno 9] Bad file descriptor

If I close all file descriptors two and above, I get that error message immediately.

If I close all file descriptors eight and above, the program works normally.

Is there some code in Twisted that expects certain file descriptors to be open?

Anyone got a clue what could be happening here?
-- 
Obama Nation | My emails do not have attachments; it's a digital signature
that your mail program doesn't understand. | http://www.subspacefield.org/~travis/ 
If you are a spammer, please email john at subspacefield.org to get blacklisted.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 833 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20090530/2c7177f4/attachment.pgp 

From exarkun at divmod.com  Sat May 30 20:26:40 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sat, 30 May 2009 20:26:40 -0400
Subject: [Twisted-Python] buildProtocol never called
In-Reply-To: <20090530233616.GB10964@subspacefield.org>
Message-ID: <20090531002640.21531.301131641.divmod.quotient.27721@henry.divmod.com>

On Sat, 30 May 2009 18:36:16 -0500, travis+ml-twisted at subspacefield.org wrote:
>On Sat, May 30, 2009 at 06:17:54PM -0500, travis+ml-twisted at subspacefield.org wrote:
>> The program works fine normally, and can run in the background, but if I
>> invoke a daemonize() routine that turns it into a network daemon, it
>> refuses to serve incoming TCP connections.  Actually the TCP connection
>> is made, but the software never responds to it.
>>
>> Specifically, my twisted.internet.protocol.Factory instance is created,
>> but buildProtocol is never called.
>>
>> Before I dive deeply into debugging the software, I thought I'd ask if
>> anyone knew off the top of their head any reason why Twisted might not
>> act the same if it was daemonized (no controlling terminal, no
>> stdin/out/err, forked as a background process).
>
>Here's some behavior I've gathered through debugging.  Note that all of
>the daemonization occurs before starting the reactor.

Creating the reactor at all may create a file descriptor which is necessary
for its operation.  Closing these will very likely cause problems.

Also, Twisted has daemonization features already which are known to work
well. ;)  Why aren't you using these?

Jean-Paul



From exarkun at twistedmatrix.com  Sun May 31 00:05:19 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 31 May 2009 04:05:19 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1243742719.54.1518606384@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090531/4b4bd258/attachment.htm 

From travis+ml-twisted at subspacefield.org  Sun May 31 16:18:50 2009
From: travis+ml-twisted at subspacefield.org (travis+ml-twisted at subspacefield.org)
Date: Sun, 31 May 2009 15:18:50 -0500
Subject: [Twisted-Python] buildProtocol never called
In-Reply-To: <20090531002640.21531.301131641.divmod.quotient.27721@henry.divmod.com>
References: <20090530233616.GB10964@subspacefield.org>
	<20090531002640.21531.301131641.divmod.quotient.27721@henry.divmod.com>
Message-ID: <20090531201850.GD3055@subspacefield.org>

On Sat, May 30, 2009 at 08:26:40PM -0400, Jean-Paul Calderone wrote:
> Creating the reactor at all may create a file descriptor which is necessary
> for its operation.  Closing these will very likely cause problems.

This is all before calling any Twisted routines

> Also, Twisted has daemonization features already which are known to work
> well. ;)  Why aren't you using these?

Hadn't heard about it.  Where's the documentation?
-- 
Obama Nation | My emails do not have attachments; it's a digital signature
that your mail program doesn't understand. | http://www.subspacefield.org/~travis/ 
If you are a spammer, please email john at subspacefield.org to get blacklisted.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 833 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20090531/807a0a95/attachment.pgp 

From johann.borck at densedata.com  Sun May 31 17:51:17 2009
From: johann.borck at densedata.com (Johann Borck)
Date: Sun, 31 May 2009 23:51:17 +0200
Subject: [Twisted-Python] buildProtocol never called
In-Reply-To: <20090531201850.GD3055@subspacefield.org>
References: <20090530233616.GB10964@subspacefield.org>	<20090531002640.21531.301131641.divmod.quotient.27721@henry.divmod.com>
	<20090531201850.GD3055@subspacefield.org>
Message-ID: <4A22FBD5.4040507@densedata.com>

travis+ml-twisted at subspacefield.org wrote:
> On Sat, May 30, 2009 at 08:26:40PM -0400, Jean-Paul Calderone wrote:
>   
>> Creating the reactor at all may create a file descriptor which is necessary
>> for its operation.  Closing these will very likely cause problems.
>>     
>
> This is all before calling any Twisted routines
>
>   
>> Also, Twisted has daemonization features already which are known to work
>> well. ;)  Why aren't you using these?
>>     
>
> Hadn't heard about it.  Where's the documentation?
>   
>   
look for "twistd":

http://twistedmatrix.com/projects/core/documentation/man/twistd-man.html
http://twistedmatrix.com/projects/core/documentation/howto/basics.html
http://twistedmatrix.com/projects/core/documentation/howto/tap.html
http://twistedmatrix.com/projects/core/documentation/howto/application.html

Johann



From brandon.mcginty at gmail.com  Sun May 31 18:06:39 2009
From: brandon.mcginty at gmail.com (Brandon McGinty)
Date: Sun, 31 May 2009 18:06:39 -0400
Subject: [Twisted-Python] Twisted Question
Message-ID: <4A22FF6F.90201@gmail.com>

Hi All,
I just subscribed to this list, after viewing tons of documents about 
twisted, factories, and all the like.
Here is the situation.
I am trying to design a bridge between twisted.web and 
twisted.words.protocols.irc.
I have read a lot about using factories, and communicating with a 
central "program class" like in the finger tutorial.
However, I can not figure out how to communicate between two running 
protocols.
Here's an example:
User connects to web server.
Irc client connects to irc server
User clicks on search link, and enters query.
A command, along with that query, is sent to irc server via irc client.
Response is returned, processed, and sent to the page that is the result 
of submiting that form.
Process continues until user clicks log out, where in the irc client 
disconnects.
Any help anyone can give me is greatly appreciated.

Thanks,
Brandon McGinty





-- 
--
Brandon McGinty
Email:brandon.mcginty at gmail.com
Tel:(602)-904-6548
SMS:(602)-904-6548
Skype:brandon.mcginty
MSN:brandon_mcginty at hotmail.com



From clemesha at gmail.com  Sun May 31 18:21:05 2009
From: clemesha at gmail.com (Alex Clemesha)
Date: Sun, 31 May 2009 15:21:05 -0700
Subject: [Twisted-Python] Twisted Question
In-Reply-To: <4A22FF6F.90201@gmail.com>
References: <4A22FF6F.90201@gmail.com>
Message-ID: <d272f0690905311521w7db5c272he399185910fc7597@mail.gmail.com>

On Sun, May 31, 2009 at 3:06 PM, Brandon McGinty
<brandon.mcginty at gmail.com> wrote:
> Hi All,
> I just subscribed to this list, after viewing tons of documents about
> twisted, factories, and all the like.
> Here is the situation.
> I am trying to design a bridge between twisted.web and
> twisted.words.protocols.irc.
There is a project called "Punjab" that you might want to look at:
http://code.stanziq.com/punjab

What punjab does is it bridges twisted.web and
twisted.words.protocols.jabber (XMPP)
and generally uses "twisted.words" a lot.  Unless you have a strict
requirement on doing
something IRC related, you might find that XMPP does a lot of 'IRC
type' things really well,
and there is a lot of momentum behing XMPP tools right now.

I imagine that this might be a good jumping off point for the work
that you are trying to do.

hth,
Alex



> I have read a lot about using factories, and communicating with a
> central "program class" like in the finger tutorial.
> However, I can not figure out how to communicate between two running
> protocols.
> Here's an example:
> User connects to web server.
> Irc client connects to irc server
> User clicks on search link, and enters query.
> A command, along with that query, is sent to irc server via irc client.
> Response is returned, processed, and sent to the page that is the result
> of submiting that form.
> Process continues until user clicks log out, where in the irc client
> disconnects.
> Any help anyone can give me is greatly appreciated.
>
> Thanks,
> Brandon McGinty
>
>
>
>
>
> --
> --
> Brandon McGinty
> Email:brandon.mcginty at gmail.com
> Tel:(602)-904-6548
> SMS:(602)-904-6548
> Skype:brandon.mcginty
> MSN:brandon_mcginty at hotmail.com
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Alex Clemesha
clemesha.org



From brandon.mcginty at gmail.com  Sun May 31 19:12:56 2009
From: brandon.mcginty at gmail.com (Brandon McGinty)
Date: Sun, 31 May 2009 19:12:56 -0400
Subject: [Twisted-Python] Twisted Question
In-Reply-To: <d272f0690905311521w7db5c272he399185910fc7597@mail.gmail.com>
References: <4A22FF6F.90201@gmail.com>
	<d272f0690905311521w7db5c272he399185910fc7597@mail.gmail.com>
Message-ID: <4A230EF8.1080206@gmail.com>

I'll give that a shot...unfortunately, the data is only accessible via 
an irc server and protocol.
Hopefully I can gleen some useful information about cross-protocol 
communication by lokng at the source.
Thank You,
Brandon McGinty



Alex Clemesha wrote:
> On Sun, May 31, 2009 at 3:06 PM, Brandon McGinty
> <brandon.mcginty at gmail.com> wrote:
>> Hi All,
>> I just subscribed to this list, after viewing tons of documents about
>> twisted, factories, and all the like.
>> Here is the situation.
>> I am trying to design a bridge between twisted.web and
>> twisted.words.protocols.irc.
> There is a project called "Punjab" that you might want to look at:
> http://code.stanziq.com/punjab
> 
> What punjab does is it bridges twisted.web and
> twisted.words.protocols.jabber (XMPP)
> and generally uses "twisted.words" a lot.  Unless you have a strict
> requirement on doing
> something IRC related, you might find that XMPP does a lot of 'IRC
> type' things really well,
> and there is a lot of momentum behing XMPP tools right now.
> 
> I imagine that this might be a good jumping off point for the work
> that you are trying to do.
> 
> hth,
> Alex
> 
> 
> 
>> I have read a lot about using factories, and communicating with a
>> central "program class" like in the finger tutorial.
>> However, I can not figure out how to communicate between two running
>> protocols.
>> Here's an example:
>> User connects to web server.
>> Irc client connects to irc server
>> User clicks on search link, and enters query.
>> A command, along with that query, is sent to irc server via irc client.
>> Response is returned, processed, and sent to the page that is the result
>> of submiting that form.
>> Process continues until user clicks log out, where in the irc client
>> disconnects.
>> Any help anyone can give me is greatly appreciated.
>>
>> Thanks,
>> Brandon McGinty
>>
>>
>>
>>
>>
>> --
>> --
>> Brandon McGinty
>> Email:brandon.mcginty at gmail.com
>> Tel:(602)-904-6548
>> SMS:(602)-904-6548
>> Skype:brandon.mcginty
>> MSN:brandon_mcginty at hotmail.com
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
> 
> 
> 

-- 
--
Brandon McGinty
Email:brandon.mcginty at gmail.com
Tel:(602)-904-6548
SMS:(602)-904-6548
Skype:brandon.mcginty
MSN:brandon_mcginty at hotmail.com



From exarkun at divmod.com  Sun May 31 21:49:05 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 31 May 2009 21:49:05 -0400
Subject: [Twisted-Python] buildProtocol never called
In-Reply-To: <20090531201850.GD3055@subspacefield.org>
Message-ID: <20090601014905.22176.1148433446.divmod.quotient.410@henry.divmod.com>

On Sun, 31 May 2009 15:18:50 -0500, travis+ml-twisted at subspacefield.org wrote:
>On Sat, May 30, 2009 at 08:26:40PM -0400, Jean-Paul Calderone wrote:
>> Creating the reactor at all may create a file descriptor which is necessary
>> for its operation.  Closing these will very likely cause problems.
>
>This is all before calling any Twisted routines

It's pretty easily to unintentionally import and instantiate the default
reactor.  Are you certain daemonization all happens before that?

>> Also, Twisted has daemonization features already which are known to work
>> well. ;)  Why aren't you using these?
>
>Hadn't heard about it.  Where's the documentation?

It's a feature of twistd.  http://twistedmatrix.com/projects/core/documentation/howto/tap.html and http://twistedmatrix.com/projects/core/documentation/howto/application.html talk about how to structure your code so as to be able to take advantage of the features of twistd.

Jean-Paul



From exarkun at divmod.com  Sun May 31 21:50:27 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 31 May 2009 21:50:27 -0400
Subject: [Twisted-Python] Twisted Question
In-Reply-To: <4A230EF8.1080206@gmail.com>
Message-ID: <20090601015027.22176.772177042.divmod.quotient.411@henry.divmod.com>

On Sun, 31 May 2009 19:12:56 -0400, Brandon McGinty <brandon.mcginty at gmail.com> wrote:
>I'll give that a shot...unfortunately, the data is only accessible via
>an irc server and protocol.
>Hopefully I can gleen some useful information about cross-protocol
>communication by lokng at the source.

http://twistedmatrix.com/trac/wiki/FrequentlyAskedQuestions#HowdoImakeinputononeconnectionresultinoutputonanother answers a question very similar to yours.

Jean-Paul



From saurav.mohapatra at dimdim.com  Fri May  1 08:02:47 2009
From: saurav.mohapatra at dimdim.com (Mohapatra Saurav)
Date: Fri, 1 May 2009 09:02:47 -0500
Subject: [Twisted-Python] TCP Proxy scalability issue
Message-ID: <EA2F29B650A22546932C85031ED4F98AE07649@mail-37ps.atlarge.net>

Hi,

 

We're currently running a TCP proxy  / port multiplexer written in
Twisted to route to multiple worker server processes running on loopback
ports.

 

The architecture is something like this

 

Worker processes W1...n run listening on P1..n on the loopback and one
router process (twisted based) runs on public port P0 exposed to the
real world.

 

The clients connect to P0 and the first few bytes they send indicates
which worker process they wish to connect to. The Twisted protocol
implementation then creates a relay TCP connection to loopback worker
process port and after that forwards received data on P0 to the worker
port on loop back and sends back data received from worker port to the
external connection.

 

We're noticing significant degradation / starvation of the clients under
load (around 25 concurrent connections are enough to simulate this).

 

We're running on Linux (CentOS 5.2) using python 2.5 and Twisted latest
source tarball using the epoll reactor and all settings are default.
Each connection sends back around 8-24kb data per second.

 

My question is are there any "production" settings I need to do
(threadpool etc.) to get the maximum out of twisted.

 

Regards

Saurav

 

 

 

Saurav Mohapatra
Director of Technology


(  508.875.9501  | Mobile: 774.242.7422
*  saurav at dimdim.com
Skype: mohaps   |   AIM: mohaps

    Meet freely.

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090501/d4a6327e/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: image001.png
Type: image/png
Size: 6358 bytes
Desc: image001.png
URL: </pipermail/twisted-python/attachments/20090501/d4a6327e/attachment-0002.png>

From glyph at divmod.com  Fri May  1 09:54:56 2009
From: glyph at divmod.com (glyph at divmod.com)
Date: Fri, 01 May 2009 15:54:56 -0000
Subject: [Twisted-Python] TCP Proxy scalability issue
In-Reply-To: <EA2F29B650A22546932C85031ED4F98AE07649@mail-37ps.atlarge.net>
References: <EA2F29B650A22546932C85031ED4F98AE07649@mail-37ps.atlarge.net>
Message-ID: <20090501155456.12555.1002021953.divmod.xquotient.10153@weber.divmod.com>

On 02:02 pm, saurav.mohapatra at dimdim.com wrote:
>Worker processes W1...n run listening on P1..n on the loopback and one
>router process (twisted based) runs on public port P0 exposed to the
>real world.

I haven't used it myself, but that sounds a bit like txloadbalancer: 
https://launchpad.net/txloadbalancer

Are you using that?
>The clients connect to P0 and the first few bytes they send indicates
>which worker process they wish to connect to. The Twisted protocol
>implementation then creates a relay TCP connection to loopback worker
>process port and after that forwards received data on P0 to the worker
>port on loop back and sends back data received from worker port to the
>external connection.

>We're noticing significant degradation / starvation of the clients 
>under
>load (around 25 concurrent connections are enough to simulate this).

>We're running on Linux (CentOS 5.2) using python 2.5 and Twisted latest
>source tarball using the epoll reactor and all settings are default.
>Each connection sends back around 8-24kb data per second.

While every application is a unique beast in terms of performance 
tuning, these numbers all sound surprisingly low to me for something as 
simple as a TCP proxy.

Are you saturating your CPU?  What is the load like on the box in 
question, both from the Twisted proxy and from the other processes?

Can you provide a benchmark that we can run somewhere else, to 
demonstrate the issue you're having?
>My question is are there any "production" settings I need to do
>(threadpool etc.) to get the maximum out of twisted.

Nothing that you described will make any use of threads - is there some 
reason you mention threadpool size?

If you *are* using threads then perhaps you shouldn't be, and they're 
causing performance problems :)

However, aside from reactor selection, Twisted is designed to have very 
few knobs to turn; it has one button for performance tuning and we push 
it before it leaves the factory.  So if there's a performance problem, 
the issue is that we need to optimize something in Twisted, or you need 
to optimize something in your application.

You may be able to tweak various linux kernel parameters to be able to 
improve things a bit, but if you're running into problems at 25 
connections, it doesn't sound like you're running into kernel issues to 
me.



From saurav.mohapatra at dimdim.com  Fri May  1 10:31:33 2009
From: saurav.mohapatra at dimdim.com (Mohapatra Saurav)
Date: Fri, 1 May 2009 11:31:33 -0500
Subject: [Twisted-Python] TCP Proxy scalability issue
In-Reply-To: <mailman.8.1241193602.26899.twisted-python@twistedmatrix.com>
References: <mailman.8.1241193602.26899.twisted-python@twistedmatrix.com>
Message-ID: <EA2F29B650A22546932C85031ED4F98AE07667@mail-37ps.atlarge.net>

Glyph,

Thanks for the response.

We're trying to proxy multiple VNC processes for a screen sharing
application. So though CPU load is low, the data being pushed out is
pretty high. We have around 16Kb of data being pushed out per second per
client for a normal case. The test server is running on EC2, but we see
the degradation in the production deployment (on physical machines
running on a cogent fiber connection). I was thinking it might have
something to do with amount of data being written and number of
simultenous writes issued. Something to do with transport.write()

I'll take a look at txloadbalancer. 

I can make a benchmarking application available to you, please mail me
off the list at saurav.mohapatra at dimdim.com

Regards
Saurav

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of
twisted-python-request at twistedmatrix.com
Sent: Friday, May 01, 2009 12:00 PM
To: twisted-python at twistedmatrix.com
Subject: Twisted-Python Digest, Vol 62, Issue 2

Send Twisted-Python mailing list submissions to
	twisted-python at twistedmatrix.com

To subscribe or unsubscribe via the World Wide Web, visit
	http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
or, via email, send a message with subject or body 'help' to
	twisted-python-request at twistedmatrix.com

You can reach the person managing the list at
	twisted-python-owner at twistedmatrix.com

When replying, please edit your Subject line so it is more specific
than "Re: Contents of Twisted-Python digest..."


Today's Topics:

   1. Re: TCP Proxy scalability issue (glyph at divmod.com)


----------------------------------------------------------------------

Message: 1
Date: Fri, 01 May 2009 15:54:56 -0000
From: glyph at divmod.com
Subject: Re: [Twisted-Python] TCP Proxy scalability issue
To: Twisted general discussion <twisted-python at twistedmatrix.com>
Message-ID:
	
<20090501155456.12555.1002021953.divmod.xquotient.10153 at weber.divmod.com
>
	
Content-Type: text/plain; charset="utf-8"; format="flowed"

On 02:02 pm, saurav.mohapatra at dimdim.com wrote:
>Worker processes W1...n run listening on P1..n on the loopback and one
>router process (twisted based) runs on public port P0 exposed to the
>real world.

I haven't used it myself, but that sounds a bit like txloadbalancer: 
https://launchpad.net/txloadbalancer

Are you using that?
>The clients connect to P0 and the first few bytes they send indicates
>which worker process they wish to connect to. The Twisted protocol
>implementation then creates a relay TCP connection to loopback worker
>process port and after that forwards received data on P0 to the worker
>port on loop back and sends back data received from worker port to the
>external connection.

>We're noticing significant degradation / starvation of the clients 
>under
>load (around 25 concurrent connections are enough to simulate this).

>We're running on Linux (CentOS 5.2) using python 2.5 and Twisted latest
>source tarball using the epoll reactor and all settings are default.
>Each connection sends back around 8-24kb data per second.

While every application is a unique beast in terms of performance 
tuning, these numbers all sound surprisingly low to me for something as 
simple as a TCP proxy.

Are you saturating your CPU?  What is the load like on the box in 
question, both from the Twisted proxy and from the other processes?

Can you provide a benchmark that we can run somewhere else, to 
demonstrate the issue you're having?
>My question is are there any "production" settings I need to do
>(threadpool etc.) to get the maximum out of twisted.

Nothing that you described will make any use of threads - is there some 
reason you mention threadpool size?

If you *are* using threads then perhaps you shouldn't be, and they're 
causing performance problems :)

However, aside from reactor selection, Twisted is designed to have very 
few knobs to turn; it has one button for performance tuning and we push 
it before it leaves the factory.  So if there's a performance problem, 
the issue is that we need to optimize something in Twisted, or you need 
to optimize something in your application.

You may be able to tweak various linux kernel parameters to be able to 
improve things a bit, but if you're running into problems at 25 
connections, it doesn't sound like you're running into kernel issues to 
me.



------------------------------

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


End of Twisted-Python Digest, Vol 62, Issue 2
*********************************************



From glyph at divmod.com  Fri May  1 19:10:29 2009
From: glyph at divmod.com (glyph at divmod.com)
Date: Sat, 02 May 2009 01:10:29 -0000
Subject: [Twisted-Python] TCP Proxy scalability issue
In-Reply-To: <EA2F29B650A22546932C85031ED4F98AE07667@mail-37ps.atlarge.net>
References: <mailman.8.1241193602.26899.twisted-python@twistedmatrix.com>
	<EA2F29B650A22546932C85031ED4F98AE07667@mail-37ps.atlarge.net>
Message-ID: <20090502011029.12555.540014919.divmod.xquotient.10190@weber.divmod.com>

On 1 May, 04:31 pm, saurav.mohapatra at dimdim.com wrote:
>Glyph,
>
>Thanks for the response.

No problem.  Thanks for your clearly described inquiry :).
>We're trying to proxy multiple VNC processes for a screen sharing
>application. So though CPU load is low, the data being pushed out is
>pretty high. We have around 16Kb of data being pushed out per second 
>per
>client for a normal case. The test server is running on EC2, but we see
>the degradation in the production deployment (on physical machines
>running on a cogent fiber connection). I was thinking it might have
>something to do with amount of data being written and number of
>simultenous writes issued. Something to do with transport.write()

When you do a transport.write, twisted puts the data into a buffer on 
your transport and marks it as ready to write some data.  When you next 
get into epoll, epoll should wake up immediately, showing that lots of 
FDs are ready for writing, and Twisted will then immediately begin 
attempting to write all of the buffered data to those connections.

All of those sockets are in non-blocking mode and so send will 
immediately return regardless of how much data can actually be put onto 
the wire.

Therefore, in principle, if Twisted is not 100% busy on the CPU, then 
nothing *should* be causing it to deliver your data slower than it's 
coming in.  Unless, of course, there's a bug, which is always possible. 
But this is a pretty simple bit of code and inspecting it in the course 
of this email I don't see many places for such a bug to hide; so in this 
case I'd probably start the bug hunt in the application.  Or at least, 
by writing the simplest possible benchmark for Twisted itself, so that 
we can see the "raw" performance regardless of any application logic.
>I can make a benchmarking application available to you, please mail me
>off the list at saurav.mohapatra at dimdim.com

I have done so.
>Regards
>Saurav



From exarkun at twistedmatrix.com  Sun May  3 07:37:40 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 03 May 2009 13:37:40 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1241357860.1.273141619@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090503/0554720b/attachment.html>

From exarkun at divmod.com  Sun May  3 14:42:38 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 3 May 2009 16:42:38 -0400
Subject: [Twisted-Python] May 2nd Sprint
In-Reply-To: 0
Message-ID: <20090503204238.21531.1002843969.divmod.quotient.85@henry.divmod.com>

Hello all,

The sprint yesterday went quite well.  He's a quick peek at what everyone was
up to:

  * Drake Smith and Itamar Shtull-Trauring spent time fixing problems with our
    documentation and addressing a potential problem with the __str__ of
    DelayedCall

  * Dave Sturgis worked on adding frame-drop notification to LoopingCall

  * Thomas Hervé contributed remotely with code for the Conch "session"
    branch and tests for a regression fix in Conch's ssh agent support

  * Michael Hudson also participated remotely, continuing to work towards
    support for multiple byte ranges in HTTP range requests in the Twisted
    Web server

  * Glyph Lefkowitz finished the removal of a lot of decrepit gtk1-based
    application code, reviewed much of the other work done at the sprint,
    and triaged a bunch of tickets.

  * Chris Armstrong added an API to the new HTTP client currently under
    development to allow applications to interrupt it and disconnect at
    arbitrary times.  He also paired with me to fix a memory leak triggered
    by trial's --until-failure option.

  * I also worked on some Conch fixes, reviewed some code, and triaged
    some tickets.

Thanks to Divmod and the TSF sponsors who picked up lunch for all the
sprinters.

Jean-Paul



From dave at krondo.com  Sun May  3 16:38:51 2009
From: dave at krondo.com (Dave Peticolas)
Date: Sun, 03 May 2009 15:38:51 -0700
Subject: [Twisted-Python] cx_Oracle, Twisted - rollback failed
In-Reply-To: <920941.59090.qm@web111315.mail.gq1.yahoo.com>
References: <920941.59090.qm@web111315.mail.gq1.yahoo.com>
Message-ID: <49FE1CFB.6090906@krondo.com>

Steve Lewis wrote:
>> Is there some way it can determine that the connection has been lost aside
>> from trying the rollback (and is compatible with other DB-API 2.0 modules)?
>>
>> Jean-Paul
> 
> Oops, I actually did see my message going through now. Sorry for the duplicate. 
> 
> To answer your question, I was under the impression that the cp_reconnect would check to see if the connection existed already. Is there a way to have it check that query before rolling back? I'm guessing other databases/apis don't throw exceptions on a rollback if the connection is gone?
> Steve

The cp_reconnect flag tells the pool to re-open connections that have
failed the next time they are accessed. The query that 'discovers' the
lost connection will still fail and receive the ConnectionLost
exception.

When the reconnect flag is false, lost connections simply aren't
detected and continue to fail.

dave




From lrhazi at gmail.com  Mon May  4 00:15:25 2009
From: lrhazi at gmail.com (Mohamed Lrhazi)
Date: Mon, 4 May 2009 02:15:25 -0400
Subject: [Twisted-Python] RTFM about custom reactors
Message-ID: <c4ab18df0905032315m4f0b3f85vf900adddd7557000@mail.gmail.com>

Hello all,

I was wondering if someone could point me in the right direction....

I am attempting to connect a proprietary network OS plugin system to
Python, to allow for writing traffic handling plugins in Python, and
was wondering what it would take to connect such a system into
Twisted, thus allowing the writing of normal twisted apps on top....

Is it matter of learning and writing a custom reactor? My current
understanding is that the reactor is what detects and dispatches
events... but does it also dispatch the "data", as in the traffic
payload? what can I read to learn more?

Thanks a lot,
Mohamed.



From terry at jon.es  Mon May  4 04:26:33 2009
From: terry at jon.es (Terry Jones)
Date: Mon, 4 May 2009 12:26:33 +0200
Subject: [Twisted-Python] addCallback0 convenience method
Message-ID: <18942.49881.79556.867747@jon.es>

There are two minor niggles I frequently run into when writing code with
deferreds and callbacks:

 1. I very often write callbacks that ignore the incoming result: I tend to
    write this as def cb(_): ...

 2. I sometimes write functions that I want to call both from within a
    callback chain and when not in a callback chain. Usually this is
    another case of writing def x(_, arg1, arg2) etc. and documenting that
    the extra unused arg is for when the function is called as part of a
    callback chain. This looks odder when the function is some kind of
    utility living in different Python source file, and is thus distant
    from its use in a callback chain.

Seeing as n-1 of the add* methods of t.i.defer.Deferred are convenience
methods for calling addCallbacks, I propose another:

    def addCallback0(self, callback, *args, **kw):
        self.addCallback(lambda result: callback(*args, **kw))

This allows you to write callback functions that will not be passed the
result of the callback chain.  That means I never have to deal with 1 and 2
above. They're minor niggles, of course, but they make code look less
attractive and a little harder to understand. Yes, I could write my own
standalone function

    def addCallback0(d, callback, *args, **kw):
        d.addCallback(lambda result: callback(*args, **kw))

and pass it my deferreds. And yes, I can also write my own wrapper to call
other methods which don't take a callback result as their first argument.

But all this would be nicer if addCallback0 was part of the Deferred class.
I don't think we need a corresponding addBoth0 or addErrback0 etc., though.

Terry



From petshmidt at googlemail.com  Mon May  4 05:04:53 2009
From: petshmidt at googlemail.com (Pet)
Date: Mon, 4 May 2009 13:04:53 +0200
Subject: [Twisted-Python] design question
Message-ID: <b460e9630905040404geda63a4rfdcca71adcd095f@mail.gmail.com>

Hi,

I've written my first Twisted Server, which accept request from
clients, does DB queries, sends response back and logs some events in
DB. I wonder, if my design was good.
Basically,  I have a Factory where is db connectionPool created and
Protocol(basic.LineReceiver), which processes requests and sends data
back.
In Protocol, I instantiate my utility object which I try to keep
independent from twisted framework, so it can be easily used
somewhere else or can be replaced by other class.

def m(self, *args, **kwargs ):
       try:
           d = self.getData(params=kwargs['params'])
           if d:
               d.addCallback(self.sendResult)
               d.addErrback(log.err)

               d.addCallback(self.logFailedQuery)
               d.addErrback(log.err)
               return None
       except Exception, e:
           log.msg('Unknown error in m:', e)

def getData(self, *args, **kwargs):
   obj = MyObj(self.db)
   return self.db.runInteraction(obj.getDataFromDB,kwargs['parameter'])

What I don't like, I must pass db variable to obj.getDataFromDb and
may be other function called there. I think it would be better obj =
MyObj(self.db), but it doesn't work and runInteraction passes
automatically db variable to interaction method.

I'm new to Python and Twisted and would appreciate your advises.
Pet



From drew.smathers at gmail.com  Mon May  4 09:59:07 2009
From: drew.smathers at gmail.com (Drew Smathers)
Date: Mon, 4 May 2009 11:59:07 -0400
Subject: [Twisted-Python] addCallback0 convenience method
In-Reply-To: <18942.49881.79556.867747@jon.es>
References: <18942.49881.79556.867747@jon.es>
Message-ID: <368574aa0905040859s3df0c324wc38705befa549b1a@mail.gmail.com>

On Mon, May 4, 2009 at 6:26 AM, Terry Jones <terry at jon.es> wrote:
> There are two minor niggles I frequently run into when writing code with
> deferreds and callbacks:
>
>  1. I very often write callbacks that ignore the incoming result: I tend to
>    write this as def cb(_): ...
>
>  2. I sometimes write functions that I want to call both from within a
>    callback chain and when not in a callback chain. Usually this is
>    another case of writing def x(_, arg1, arg2) etc. and documenting that
>    the extra unused arg is for when the function is called as part of a
>    callback chain. This looks odder when the function is some kind of
>    utility living in different Python source file, and is thus distant
>    from its use in a callback chain.
>
> Seeing as n-1 of the add* methods of t.i.defer.Deferred are convenience
> methods for calling addCallbacks, I propose another:
>
>    def addCallback0(self, callback, *args, **kw):
>        self.addCallback(lambda result: callback(*args, **kw))
>
> This allows you to write callback functions that will not be passed the
> result of the callback chain.  That means I never have to deal with 1 and 2
> above. They're minor niggles, of course, but they make code look less
> attractive and a little harder to understand. Yes, I could write my own
> standalone function
>
>    def addCallback0(d, callback, *args, **kw):
>        d.addCallback(lambda result: callback(*args, **kw))
>
> and pass it my deferreds. And yes, I can also write my own wrapper to call
> other methods which don't take a callback result as their first argument.
>
> But all this would be nicer if addCallback0 was part of the Deferred class.
> I don't think we need a corresponding addBoth0 or addErrback0 etc., though.
>
> Terry
>

I vote instead to add a new function impartial() to standard library
functools module:

d.addCallback(impartial(callback))

Kidding, of source.  Seriously, though, I think the regular way of
attaching "lambda ign: cb(*a, **kw)" is concise enough to warrant not
adding more to the Deferred API.  A more general solution might be to
wrap functions - something like the inverse of functools.partial():

def shiftargs(level=1)
    def decorator(f)
        @wraps(f)
        def _wrapper(*a, **kw):
            return f(a[level:], **kw)
        return _wrapper
    return decorator

Still - just my opinion, of course - having such a function (either
callback0 or shiftargs) feels too esoteric, and the intent is less
explicit than the lambda statement.

-Drew



From lars.reimann at googlemail.com  Mon May  4 12:00:33 2009
From: lars.reimann at googlemail.com (Lars Reimann)
Date: Mon, 4 May 2009 20:00:33 +0200
Subject: [Twisted-Python] sending out RAW IP packets using sockets
Message-ID: <59acdf910905041100t70b3eeedo52d70e79ba9ed313@mail.gmail.com>

hello,

this question may be a bit off-topic, but nevertheless I am stuck atm.

I'm trying to send out RAW IP packets (incl. full header) which i
obtained previously using packet capture.

It has to be RAW IP packets because I want the kernel to do ARP lookup
stuff, etc for me . So an obtained packet should go through the normal
lookup process.

I've tried to use RAW sockets in python for this, but it constantly
tells me, that the "Protocol (is) not supported" using this code:

-------

self.rawserver = socket.socket(socket.AF_INET, socket.SOCK_RAW, self.proto)
      self.rawserver.bind((self.interface, self.proto))

-------

I would then simply 'send' the packets over that raw socket.

I've tried to specify IPPROTO_RAW, and others for 'self.proto' but my
python 2.5 won't accept this because they are unknown.

My question is why that error occurs and how I can enable my program to
send out RAW IP packets. Maybe the twisted framework could be helpful.
As I am new to network programming I ask for your help.


links to examples would also be greatly appreciated.


greetings,
l.r.



From itamar at itamarst.org  Mon May  4 12:08:39 2009
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 04 May 2009 14:08:39 -0400
Subject: [Twisted-Python] RTFM about custom reactors
In-Reply-To: <c4ab18df0905032315m4f0b3f85vf900adddd7557000@mail.gmail.com>
References: <c4ab18df0905032315m4f0b3f85vf900adddd7557000@mail.gmail.com>
Message-ID: <1241460519.22842.52.camel@pintsize>

On Mon, 2009-05-04 at 02:15 -0400, Mohamed Lrhazi wrote:
> Hello all,
> 
> I was wondering if someone could point me in the right direction....
> 
> I am attempting to connect a proprietary network OS plugin system to
> Python, to allow for writing traffic handling plugins in Python, and
> was wondering what it would take to connect such a system into
> Twisted, thus allowing the writing of normal twisted apps on top....
> 
> Is it matter of learning and writing a custom reactor? My current
> understanding is that the reactor is what detects and dispatches
> events... but does it also dispatch the "data", as in the traffic
> payload? what can I read to learn more?

The  reactor does low-level network events, like TCP reads, not
high-level plugins. What would these plugins do exactly?




From lrhazi at gmail.com  Mon May  4 12:23:59 2009
From: lrhazi at gmail.com (Mohamed Lrhazi)
Date: Mon, 4 May 2009 14:23:59 -0400
Subject: [Twisted-Python] RTFM about custom reactors
In-Reply-To: <1241460519.22842.52.camel@pintsize>
References: <c4ab18df0905032315m4f0b3f85vf900adddd7557000@mail.gmail.com>
	<1241460519.22842.52.camel@pintsize>
Message-ID: <c4ab18df0905041123q6a66bb17w203c79756b91f58d@mail.gmail.com>

On Mon, May 4, 2009 at 2:08 PM, Itamar Shtull-Trauring
<itamar at itamarst.org> wrote:
> The  reactor does low-level network events, like TCP reads, not
> high-level plugins. What would these plugins do exactly?
>

The Network OS acts as proxy, at the IP level, but also implements
several protocols, including http. It also allows a plugin to recieve
all network events, and access all payload and change anything in the
process... So the plugin could build its own protocol
implementations...

So, the question is, how do I write a custom reactor to handle the low
level network events and data?
is the actual source of the standar reactor the right place to start,
and is there an example our there of such a custom reactor?

Thanks a lot,
Mohamed.



From p.mayers at imperial.ac.uk  Tue May  5 03:16:00 2009
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue, 05 May 2009 10:16:00 +0100
Subject: [Twisted-Python] addCallback0 convenience method
In-Reply-To: <368574aa0905040859s3df0c324wc38705befa549b1a@mail.gmail.com>
References: <18942.49881.79556.867747@jon.es>
	<368574aa0905040859s3df0c324wc38705befa549b1a@mail.gmail.com>
Message-ID: <4A0003D0.8090709@imperial.ac.uk>

> Still - just my opinion, of course - having such a function (either
> callback0 or shiftargs) feels too esoteric, and the intent is less
> explicit than the lambda statement.

+1



From sophismus at gmx.de  Tue May  5 04:39:28 2009
From: sophismus at gmx.de (sophismus at gmx.de)
Date: Tue, 05 May 2009 12:39:28 +0200
Subject: [Twisted-Python] how do i do that
Message-ID: <20090505103928.201150@gmx.net>

hey,
i'm quite new in python and twisted and did things wrong from the start now i have to reconsider my prog.
first i thought of an easier example with almost the same functionality. 
functionality: client connects, sends info, all infos from all clients are concurrently processed, a special client with the right info at the right time gets a special msg 
i got this:
it is thought that a client writes an int as birthday back...

from twisted.internet import protocol, reactor, defer, threads
days = []
allprotocols = []
class BServerProtocol(protocol.Protocol):
        birthday = 0
        def connectionMade(self):
                print "puh"
                global allprotocols
                allprotocols.append(self)
                print "allprotocols",allprotocols
        def congratulate(self):
                self.transport.write("congratulations")
                return 'done'
        def dataReceived(self,data):
                print data
                if int (data)>0:
                        self.birthday = int(data)
                        print "self.bday:",self.birthday
                        global days
                        days.append(int(data))
                        self.transport.write("pff")
#                       self.factory.deferred.callback("uiuiui+1")
                if data == "thanks":
                        self.write("well done")
class BServerFactory(protocol.ServerFactory):
        protocol = BServerProtocol
        def __init__(self):
                self.deferred = defer.Deferred()
def proveday():
        day = 5 #of may, think of this date as new decided 
                #from a white rabbit every time it runs
        ret = -1
        found = False
        i = 0
        length = len(allprotocols)
        while (i<length and found == False):
                birthday = allprotocols[i].birthday
                print "birthday:",birthday
                if birthday == day:
                        print 'bday==day'
                        print "allprotocols[i]:",allprotocols[i]
                        found =True
                        ret = i
                        allprotocols[i].congratulate()
                i+=1
        return ret
def startprove():
        r = proveday()

bsf = BServerFactory()
#bsf.deferred.addCallback(registerSuccess)
reactor.listenTCP(55555,bsf)
reactor.callInThread(startprove)
#commands =[(startprove,[],{})]
#commands.append(startcong)#,[],{})
#threads.callMultipleInThread(commands)
reactor.run()
_______________________
allprotocols[i].congratulate() should get in connection with the client again, but nothing happens, when another client connects a lot of congratulations are thrown, it seems transport buffers. i tried a lot of things, with no better result, maybe i can get some hints to get a solution...
thx
stefan


-- 
Psssst! Schon vom neuen GMX MultiMessenger gehört? Der kann`s mit allen: http://www.gmx.net/de/go/multimessenger01



From sophismus at gmx.de  Tue May  5 05:08:12 2009
From: sophismus at gmx.de (Th. Born)
Date: Tue, 05 May 2009 13:08:12 +0200
Subject: [Twisted-Python] how do i do that
In-Reply-To: <20090505103928.201150@gmx.net>
References: <20090505103928.201150@gmx.net>
Message-ID: <20090505110812.88770@gmx.net>

> def startprove():
      while True:
>         r = proveday()

forgot while-loop...
-- 
Psssst! Schon vom neuen GMX MultiMessenger gehört? Der kann`s mit allen: http://www.gmx.net/de/go/multimessenger01



From sunshaoxuan at cdeledu.com  Tue May  5 05:33:57 2009
From: sunshaoxuan at cdeledu.com (=?GB2312?B?y+/J3ND5?=)
Date: Tue, 05 May 2009 19:33:57 +0800
Subject: [Twisted-Python] How can I change max simultaneously connection in
	twisted
Message-ID: <4A002425.2040609@cdeledu.com>

Hello all

I just wrote a small code to holding many http requests until server's
status change. Everything is fine but when simultaneously connection up
to 1k+, the server code didn't response to new connection. I've set
ulimit -n's value to 65535 and the code using epollreactor mode. Are
there have some limitations? How can I configure to support more
connections?
BTW: I use Python 2.4.3 on CentOS 5 64-bit. follow is the code, Thanks
for you help!

from twisted.internet import epollreactor
epollreactor.install()

from twisted.internet import reactor, defer, threads
from twisted.web import server, resource, client
from twisted.python import log
from time import sleep
import sys

def checkstatus_wait(laststatus):
timeout = 25
while timeout > 0:
if int(laststatus) < status:
return True
else:
timeout -= 1
sleep(1)
return False

class Simple(resource.Resource):
isLeaf = True
def render_GET(self, request):
if "cmd" in request.args:
cmd = request.args['cmd'][0]
else:
cmd = ""

if cmp(cmd,"listen") == 0:
if "laststatus" in request.args:
last = request.args['laststatus'][0]
if int(last) < status:
return "ret=1\nerrstring=need update\nlaststatus=%d\n\n" % status
else:
d = threads.deferToThread(checkstatus_wait, last)
d.addCallback(self.testReturn, request)
return server.NOT_DONE_YET
else:
return "ret=1\nerrstring=need update\nlaststatus=%d\n\n" % status
elif cmp(cmd,"updatestatus") == 0:
if status < 1000000:
status += 1
else:
status = 0
#client.getPage('http://211.157.0.47/videochat/listen?cmd=updatestatus')
return "ret=1\nerrstring=success update\n\n"
else:
return "ret=-1\nerrstring=wrong cmd\n\n"

def testReturn(self, ret, request):
if ret:
request.write("ret=1\nerrstring=need update\nlaststatus=%d\n\n" % status)
else:
request.write("ret=0\nerrstring=no need update\n\n")
request.finish()

status = 0

log.startLogging(sys.stdout)
site = server.Site(Simple())

reactor.suggestThreadPoolSize(5000)
reactor.listenTCP(8080, site)
reactor.run()

-- 


孙绍轩 Yorgo Sun
 
China Distance Education Holdings Limited
18th Floor, XueYuan International Tower, No.1 ZhiChun Road, HaiDian District, Beijing, China 100083
Phone: +8610-8231-9999 Ext 708
*********************************************************** 
CONFIDENTIALITY CAUTION:
This message is intended only for the use of the individual or entity to whom it is addressed and contains information that is privileged and confidential. If you, the reader of this message, are not the intended recipient, you should not disseminate, distribute or copy this communication. If you have received this communication in error, please notify us immediately by return email and delete the original message.





From hackingkk at gmail.com  Tue May  5 05:35:57 2009
From: hackingkk at gmail.com (Krishnakant)
Date: Tue, 05 May 2009 17:05:57 +0530
Subject: [Twisted-Python] problem accessing numeric datatype of postgresql
 in a twisted application
In-Reply-To: <20090505110812.88770@gmx.net>
References: <20090505103928.201150@gmx.net>  <20090505110812.88770@gmx.net>
Message-ID: <1241523357.3410.26.camel@kk-laptop>

hello all,
I am facing a strange problem with twisted which is probably a known bug
and perhaps also solved.

I use twisted with psycopg2 to connect with a postgresql 8.3 database.

I have to use numeric datatype and get "can't serialise object " error
when I try to access data from a field of type numeric.


Is there some thing which I can do to solve this problem?

Note that when I use just psycopg2, I don't get any error, so the
problem is surely with the twisted app.  I believe I need to cast it to
some thing?

happy hacking.
Krishnakant.









From therve at free.fr  Tue May  5 05:53:31 2009
From: therve at free.fr (Thomas =?ISO-8859-1?Q?Herv=E9?=)
Date: Tue, 05 May 2009 13:53:31 +0200
Subject: [Twisted-Python] problem accessing numeric datatype of
 postgresql in a twisted application
In-Reply-To: <1241523357.3410.26.camel@kk-laptop>
References: <20090505103928.201150@gmx.net>  <20090505110812.88770@gmx.net>
	<1241523357.3410.26.camel@kk-laptop>
Message-ID: <1241524411.6561.2.camel@brainwave>

Le mardi 05 mai 2009 à 17:05 +0530, Krishnakant a écrit :
> hello all,
> I am facing a strange problem with twisted which is probably a known bug
> and perhaps also solved.
> 
> I use twisted with psycopg2 to connect with a postgresql 8.3 database.
> 
> I have to use numeric datatype and get "can't serialise object " error
> when I try to access data from a field of type numeric.
> 
> 
> Is there some thing which I can do to solve this problem?
> 
> Note that when I use just psycopg2, I don't get any error, so the
> problem is surely with the twisted app.  I believe I need to cast it to
> some thing?


We're missing some information to help you. What's doing your Twisted
application? By itself Twisted doesn't serialize anything, so you're
probably using pb or xmlrpc?

-- 
Thomas




From sunshaoxuan at cdeledu.com  Tue May  5 06:22:22 2009
From: sunshaoxuan at cdeledu.com (=?GB2312?B?y+/J3ND5?=)
Date: Tue, 05 May 2009 20:22:22 +0800
Subject: [Twisted-Python] How can I change max simultaneously connection
 in	twisted
In-Reply-To: <4A002425.2040609@cdeledu.com>
References: <4A002425.2040609@cdeledu.com>
Message-ID: <4A002F7E.2010608@cdeledu.com>

孙绍轩 写道:
> Hello all
>
> I just wrote a small code to holding many http requests until server's
> status change. Everything is fine but when simultaneously connection up
> to 1k+, the server code didn't response to new connection. I've set
> ulimit -n's value to 65535 and the code using epollreactor mode. Are
> there have some limitations? How can I configure to support more
> connections?
> BTW: I use Python 2.4.3 on CentOS 5 64-bit. follow is the code, Thanks
> for you help!
>
> from twisted.internet import epollreactor
> epollreactor.install()
>
> from twisted.internet import reactor, defer, threads
> from twisted.web import server, resource, client
> from twisted.python import log
> from time import sleep
> import sys
>
> def checkstatus_wait(laststatus):
> timeout = 25
> while timeout > 0:
> if int(laststatus) < status:
> return True
> else:
> timeout -= 1
> sleep(1)
> return False
>
> class Simple(resource.Resource):
> isLeaf = True
> def render_GET(self, request):
> if "cmd" in request.args:
> cmd = request.args['cmd'][0]
> else:
> cmd = ""
>
> if cmp(cmd,"listen") == 0:
> if "laststatus" in request.args:
> last = request.args['laststatus'][0]
> if int(last) < status:
> return "ret=1\nerrstring=need update\nlaststatus=%d\n\n" % status
> else:
> d = threads.deferToThread(checkstatus_wait, last)
> d.addCallback(self.testReturn, request)
> return server.NOT_DONE_YET
> else:
> return "ret=1\nerrstring=need update\nlaststatus=%d\n\n" % status
> elif cmp(cmd,"updatestatus") == 0:
> if status < 1000000:
> status += 1
> else:
> status = 0
> #client.getPage('http://211.157.0.47/videochat/listen?cmd=updatestatus')
> return "ret=1\nerrstring=success update\n\n"
> else:
> return "ret=-1\nerrstring=wrong cmd\n\n"
>
> def testReturn(self, ret, request):
> if ret:
> request.write("ret=1\nerrstring=need update\nlaststatus=%d\n\n" % status)
> else:
> request.write("ret=0\nerrstring=no need update\n\n")
> request.finish()
>
> status = 0
>
> log.startLogging(sys.stdout)
> site = server.Site(Simple())
>
> reactor.suggestThreadPoolSize(5000)
> reactor.listenTCP(8080, site)
> reactor.run()
>
>   
I've found out how to solve the problem!
I've changed python from 2.4 to 2.5, the problem has gone. It's a bug in
twisted?

-- 


孙绍轩 Yorgo Sun
 
China Distance Education Holdings Limited
18th Floor, XueYuan International Tower, No.1 ZhiChun Road, HaiDian District, Beijing, China 100083
Phone: +8610-8231-9999 Ext 708
*********************************************************** 
CONFIDENTIALITY CAUTION:
This message is intended only for the use of the individual or entity to whom it is addressed and contains information that is privileged and confidential. If you, the reader of this message, are not the intended recipient, you should not disseminate, distribute or copy this communication. If you have received this communication in error, please notify us immediately by return email and delete the original message.





From exarkun at divmod.com  Tue May  5 06:27:17 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 5 May 2009 08:27:17 -0400
Subject: [Twisted-Python] How can I change max simultaneously connection
 in	twisted
In-Reply-To: <4A002F7E.2010608@cdeledu.com>
Message-ID: <20090505122717.21531.328191389.divmod.quotient.471@henry.divmod.com>

On Tue, 05 May 2009 20:22:22 +0800, 孙绍轩 <sunshaoxuan at cdeledu.com> wrote:
>孙绍轩 写道:
>> [snip]
>I've found out how to solve the problem!
>I've changed python from 2.4 to 2.5, the problem has gone. It's a bug in
>twisted?

No, a bug in Python.

http://mail.python.org/pipermail/python-bugs-list/2006-June/033701.html

Jean-Paul



From therve at free.fr  Tue May  5 06:42:16 2009
From: therve at free.fr (Thomas =?ISO-8859-1?Q?Herv=E9?=)
Date: Tue, 05 May 2009 14:42:16 +0200
Subject: [Twisted-Python] How can I change max simultaneously connection
 in twisted
In-Reply-To: <4A002425.2040609@cdeledu.com>
References: <4A002425.2040609@cdeledu.com>
Message-ID: <1241527336.6561.5.camel@brainwave>

Le mardi 05 mai 2009 à 19:33 +0800, 孙绍轩 a écrit :
> Hello all
> 
> I just wrote a small code to holding many http requests until server's
> status change. Everything is fine but when simultaneously connection up
> to 1k+, the server code didn't response to new connection. I've set
> ulimit -n's value to 65535 and the code using epollreactor mode. Are
> there have some limitations? How can I configure to support more
> connections?
> BTW: I use Python 2.4.3 on CentOS 5 64-bit. follow is the code, Thanks
> for you help!

This is known bug of Python 2.4.3. As far as I know it's only present in
this version (not 2.4.2 or 2.4.4, or any 2.5). Reported here:
http://bugs.python.org/issue1494314.

-- 
Thomas




From hackingkk at gmail.com  Tue May  5 07:10:29 2009
From: hackingkk at gmail.com (Krishnakant)
Date: Tue, 05 May 2009 18:40:29 +0530
Subject: [Twisted-Python] problem accessing numeric datatype of
 postgresql in a twisted application
In-Reply-To: <1241524411.6561.2.camel@brainwave>
References: <20090505103928.201150@gmx.net>  <20090505110812.88770@gmx.net>
	<1241523357.3410.26.camel@kk-laptop>
	<1241524411.6561.2.camel@brainwave>
Message-ID: <1241529029.4410.3.camel@kk-laptop>

On Tue, 2009-05-05 at 13:53 +0200, Thomas Hervé wrote:
> We're missing some information to help you. What's doing your Twisted
> application? By itself Twisted doesn't serialize anything, so you're
> probably using pb or xmlrpc?
> 
Yes, I am using xmlrpc in my twisted server.
the server sends queries to a postgresql database.  and there are
situations where data from a numeric datatype is selected and returned
to the calling xmlrpc function.
such as xmlrpc_getVender(vendercode) ...

When a field with datatype numeric is involved my xmlrpc server
application says "can't serialise object ".

would this information be sufficient?

happy ahcking.
Krishnakant.





From exarkun at divmod.com  Tue May  5 07:14:18 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 5 May 2009 09:14:18 -0400
Subject: [Twisted-Python] problem accessing numeric datatype of
 postgresql in a twisted application
In-Reply-To: <1241529029.4410.3.camel@kk-laptop>
Message-ID: <20090505131418.21531.1692371745.divmod.quotient.480@henry.divmod.com>

On Tue, 05 May 2009 18:40:29 +0530, Krishnakant <hackingkk at gmail.com> wrote:
>On Tue, 2009-05-05 at 13:53 +0200, Thomas Hervé wrote:
>> We're missing some information to help you. What's doing your Twisted
>> application? By itself Twisted doesn't serialize anything, so you're
>> probably using pb or xmlrpc?
>>
>Yes, I am using xmlrpc in my twisted server.
>the server sends queries to a postgresql database.  and there are
>situations where data from a numeric datatype is selected and returned
>to the calling xmlrpc function.
>such as xmlrpc_getVender(vendercode) ...
>
>When a field with datatype numeric is involved my xmlrpc server
>application says "can't serialise object ".

It sounds like your database API is giving you objects of a type which is
not supported by XML-RPC.  Twisted's XML-RPC server is based on the standard
xmlrpclib module, which can only serialize simple types - int, str, etc.  If
you have a custom pgsql-specific numeric type, you need to convert it before
giving it back to the XML-RPC code.

Jean-Paul



From andrewfr_ice at yahoo.com  Tue May  5 07:42:48 2009
From: andrewfr_ice at yahoo.com (andrewfr_ice at yahoo.com)
Date: Tue, 5 May 2009 06:42:48 -0700 (PDT)
Subject: [Twisted-Python] RTFM about custom reactors
Message-ID: <870344.22558.qm@web34201.mail.mud.yahoo.com>


Message: 3
Date: Mon, 4 May 2009 02:15:25 -0400
From: Mohamed Lrhazi <lrhazi at gmail.com>
Subject: [Twisted-Python] RTFM about custom reactors
To: twisted-python at twistedmatrix.com
Message-ID:
    <c4ab18df0905032315m4f0b3f85vf900adddd7557000 at mail.gmail.com>
Content-Type: text/plain; charset=ISO-8859-1

Hi Mohamed:

>I was wondering if someone could point me in the right direction....

>I am attempting to connect a proprietary network OS plugin system to
>Python, to allow for writing traffic handling plugins in Python, and
>was wondering what it would take to connect such a system into
>Twisted, thus allowing the writing of normal twisted apps on top....

>Is it matter of learning and writing a custom reactor? My current
>understanding is that the reactor is what detects and dispatches
>events... but does it also dispatch the "data", as in the traffic
>payload? what can I read to learn more?

I strongly suspect what you want to implement is a custom protocol rather than a custom reactor. Look at that first.

Based on past e-mail and examples, I believe the rule of thumb is one writes a custom reactor if you are porting to a new operating system/or taking advantage of some specific OS feature. There are exceptions like wxReactor that is to make Twisted interoperate with a windowing system but there functions that make the regular reactor interoperate with those systems.

Cheers,
Andrew
 







      



From dfarrell at mypublisher.com  Tue May  5 07:48:25 2009
From: dfarrell at mypublisher.com (Doug Farrell)
Date: Tue, 5 May 2009 09:48:25 -0400
Subject: [Twisted-Python] Question about deferreds
Message-ID: <318F79422ADC5041A93343721F84474D01C06609@exchange.mypublisher.local>

Hi all,

 

I consider myself a Twisted "newbie", so this might seem like a simple
couple of questions, hope you'll indulge me.

 

When I first began experimenting with deferreds I was breaking up tasks
into sequences of steps something like this:

 

d = Deferred()

d.succeed(True)

d.addCallback(step1)

d.addCallback(step2)

d.addCallback(step3)

etc.

 

When this runs I was under the mistaken impression that at the end of
each callback (step1, step2, step3, etc) the deferred would yield back
to the main loop (reactor) and allow other deferreds to run. Now I know
that the callback functions run sequentially one after another with no
break. So my first question is this: what is the advantage of this over
just combining the callback functions into one big function?, something
like this:

 

d = Deferred()

d.succeed(True)

d.addCallback(OneBigStep)

 

If step1(), step2() and step3() take a fair bit of time to complete,
doesn't this effectively block the reactor loop for the entire exection
of all the steps?

 

My second question is related to this; what is a recommended way to
create the cooperative state machine I'm thinking of using deferreds?
For example if I create something like this:

 

d1 = Deferred()

d1.succeed(True)

d1.addCallback(d1_step1)

d1.addCallback(d1_step2)

d1.addCallback(d1_step3)

 

d2 = Deferred()

d2.succeed(True)

d2.addCallback(d2_step1)

d2.addCallback(d2_step2)

d2.addCallback(d2_step3)

 

How do I get the execution of this to be this:

 

1)      d1_step1

2)      d2_step1

3)      d1_step2

4)      d2_step2

5)      d1_step3

6)      d2_step3

 

I want to have the state machines I create cooperatively 'multi-task',
yielding control back to the main loop at each state transition.

 

Thanks in advance for any help, guidance or references you can provide.
I really enjoy Twisted, I'm still working on getting the 'Zen' of it.

 

Doug

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090505/f4da5d28/attachment.html>

From glyph at divmod.com  Tue May  5 13:31:50 2009
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 05 May 2009 19:31:50 -0000
Subject: [Twisted-Python] Question about deferreds
In-Reply-To: <318F79422ADC5041A93343721F84474D01C06609@exchange.mypublisher.local>
References: <318F79422ADC5041A93343721F84474D01C06609@exchange.mypublisher.local>
Message-ID: <20090505193150.12555.1342013280.divmod.xquotient.10497@weber.divmod.com>

On 01:48 pm, dfarrell at mypublisher.com wrote:
>Hi all,

>I consider myself a Twisted "newbie", so this might seem like a simple
>couple of questions, hope you'll indulge me.

I hope a simple couple of answers will suffice.  Thank you for your 
clearly-worded questions :).
>When I first began experimenting with deferreds I was breaking up tasks
>into sequences of steps something like this.
(snip)
>When this runs I was under the mistaken impression that at the end of
>each callback (step1, step2, step3, etc) the deferred would yield back
>to the main loop (reactor) and allow other deferreds to run. Now I know
>that the callback functions run sequentially one after another with no
>break. So my first question is this: what is the advantage of this over
>just combining the callback functions into one big function?, something
>like this:

>d = Deferred()
>
>d.succeed(True)
>
>d.addCallback(OneBigStep)

Deferreds are not about breaking your work up into steps to save time. 
They're about breaking it up so that different systems can deal with the 
same asynchronous event in their own way.

For example, let's say you're working on a REST client that deals with 
invoices.  The server gives you data at a particular URL and you want to 
convert it into an "Invoice" instance.

Twisted itself isn't going to have that OneBigStep callback that 
converts HTTP straight into invoices for you, so you've got something 
that gives back a Deferred that fires with a string, getPage.  Then 
maybe there's an intermediary layer that deals with parsing XML or JSON 
or whatever.  Then there's a layer that takes the JSON or DOM structure 
and converts it into an Invoice.  Finally you've got your actual 
application code that wants to get the Invoice and *do* something with 
that Invoice.

And of course your final "do something with that invoice" step might 
need data retrieved asynchronously from other places, so it might need 
other Deferreds and other callbacks as well.

If you do have step1, step2, and step3 defined entirely in a single 
function, then yes, they should be in the same function.
>If step1(), step2() and step3() take a fair bit of time to complete,
>doesn't this effectively block the reactor loop for the entire exection
>of all the steps?

Yep.  That's the idea.  If you have long-running tasks that need to be 
split up into multiple steps, there are other facilities, *not* Deferred 
callbacks, that you can use.  For example, this:

http://twistedmatrix.com/documents/8.2.0/api/twisted.internet.task.html#coiterate
>My second question is related to this; what is a recommended way to
>create the cooperative state machine I'm thinking of using deferreds?

(...)
>How do I get the execution of this to be this:

>1)      d1_step1
>2)      d2_step1
>3)      d1_step2
>4)      d2_step2
>5)      d1_step3
>6)      d2_step3

>I want to have the state machines I create cooperatively 'multi-task',
>yielding control back to the main loop at each state transition.

If you actually wanted to interleave Deferred callbacks like that it 
would be tricky.  But if you just want interleaved callbacks, use 
Cooperator as I mentioned above :).
>Thanks in advance for any help, guidance or references you can provide.
>I really enjoy Twisted, I'm still working on getting the 'Zen' of it.

Thanks!



From sunshaoxuan at cdeledu.com  Tue May  5 19:56:01 2009
From: sunshaoxuan at cdeledu.com (=?UTF-8?B?5a2Z57uN6L2p?=)
Date: Wed, 06 May 2009 09:56:01 +0800
Subject: [Twisted-Python] How can I change max simultaneously connection
 in twisted
In-Reply-To: <1241527336.6561.5.camel@brainwave>
References: <4A002425.2040609@cdeledu.com> <1241527336.6561.5.camel@brainwave>
Message-ID: <4A00EE31.7090107@cdeledu.com>

Thomas Hervé 写道:
> Le mardi 05 mai 2009 à 19:33 +0800, 孙绍轩 a écrit :
>   
>> Hello all
>>
>> I just wrote a small code to holding many http requests until server's
>> status change. Everything is fine but when simultaneously connection up
>> to 1k+, the server code didn't response to new connection. I've set
>> ulimit -n's value to 65535 and the code using epollreactor mode. Are
>> there have some limitations? How can I configure to support more
>> connections?
>> BTW: I use Python 2.4.3 on CentOS 5 64-bit. follow is the code, Thanks
>> for you help!
>>     
>
> This is known bug of Python 2.4.3. As far as I know it's only present in
> this version (not 2.4.2 or 2.4.4, or any 2.5). Reported here:
> http://bugs.python.org/issue1494314.
>
>   
Got it!, Thinks for your help.

-- 


孙绍轩 Yorgo Sun
 
China Distance Education Holdings Limited
18th Floor, XueYuan International Tower, No.1 ZhiChun Road, HaiDian District, Beijing, China 100083
Phone: +8610-8231-9999 Ext 708
*********************************************************** 
CONFIDENTIALITY CAUTION:
This message is intended only for the use of the individual or entity to whom it is addressed and contains information that is privileged and confidential. If you, the reader of this message, are not the intended recipient, you should not disseminate, distribute or copy this communication. If you have received this communication in error, please notify us immediately by return email and delete the original message.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090506/4b1fb29e/attachment.html>

From gjango.py at gmail.com  Thu May  7 03:50:12 2009
From: gjango.py at gmail.com (ganesh gunasekaran)
Date: Thu, 7 May 2009 15:20:12 +0530
Subject: [Twisted-Python] how to authenticate SMPT server in Twisted
	Framework
Message-ID: <a0445b00905070250m49d9ab5epccc7466040aa36aa@mail.gmail.com>

Hi gp,
I'm very new to Twisted Framework ,
I wrote a very simple  code to send mails concurrently, using SMTP mail
server
the code as below


from twisted.mail.smtp import sendmail
from twisted.internet import reactor
from twisted.python.log import err
import time

MAILSERVER = 'mail.xxx.com'
listTo = ['ganesh.xxx at gmail.com', 'xxjango.py at gmail.com', '
lovely_xxx at yahoo.co.in']
FROM = 'gxxxkaran at xxxx.com'
MSGBODY = "hi this is test mail"
a= time.time()
done = sendmail(MAILSERVER, FROM, listTo, MSGBODY ,senderDomainName=None,
port=25)
done.addErrback(err)
done.addCallback(lambda ignored: reactor.stop())
reactor.run()
print "Took %s seconds" %str(time.time()-a)


hence i'm not aware of how to authenticate my mail server in Twisted
Framework ,this code gives me error saying ,"Relay access denied"
I will be grateful  if someone forward me the right solution.
Thanks
guptha
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090507/77da82f3/attachment.html>

From drew.smathers at gmail.com  Thu May  7 12:17:20 2009
From: drew.smathers at gmail.com (Drew Smathers)
Date: Thu, 7 May 2009 14:17:20 -0400
Subject: [Twisted-Python] how do i do that
In-Reply-To: <20090505103928.201150@gmx.net>
References: <20090505103928.201150@gmx.net>
Message-ID: <368574aa0905071117r26a50b12r6f62844929ec47cd@mail.gmail.com>

On Tue, May 5, 2009 at 6:39 AM,  <sophismus at gmx.de> wrote:
> hey,
> i'm quite new in python and twisted and did things wrong from the start now i have to reconsider my prog.
> first i thought of an easier example with almost the same functionality.
> functionality: client connects, sends info, all infos from all clients are concurrently processed, a special client with the right info at the right time gets a special msg
> i got this:
> it is thought that a client writes an int as birthday back...
>
> from twisted.internet import protocol, reactor, defer, threads
> days = []
> allprotocols = []
> class BServerProtocol(protocol.Protocol):
>        birthday = 0
>        def connectionMade(self):
>                print "puh"
>                global allprotocols
>                allprotocols.append(self)
>                print "allprotocols",allprotocols
>        def congratulate(self):
>                self.transport.write("congratulations")
>                return 'done'
>        def dataReceived(self,data):
>                print data
>                if int (data)>0:
>                        self.birthday = int(data)
>                        print "self.bday:",self.birthday
>                        global days
>                        days.append(int(data))
>                        self.transport.write("pff")
> #                       self.factory.deferred.callback("uiuiui+1")
>                if data == "thanks":
>                        self.write("well done")
> class BServerFactory(protocol.ServerFactory):
>        protocol = BServerProtocol
>        def __init__(self):
>                self.deferred = defer.Deferred()
> def proveday():
>        day = 5 #of may, think of this date as new decided
>                #from a white rabbit every time it runs
>        ret = -1
>        found = False
>        i = 0
>        length = len(allprotocols)
>        while (i<length and found == False):
>                birthday = allprotocols[i].birthday
>                print "birthday:",birthday
>                if birthday == day:
>                        print 'bday==day'
>                        print "allprotocols[i]:",allprotocols[i]
>                        found =True
>                        ret = i
>                        allprotocols[i].congratulate()
>                i+=1
>        return ret
> def startprove():
>        r = proveday()
>
> bsf = BServerFactory()
> #bsf.deferred.addCallback(registerSuccess)
> reactor.listenTCP(55555,bsf)
> reactor.callInThread(startprove)
> #commands =[(startprove,[],{})]
> #commands.append(startcong)#,[],{})
> #threads.callMultipleInThread(commands)
> reactor.run()
> _______________________
> allprotocols[i].congratulate() should get in connection with the client again, but nothing happens, when another client connects a lot of congratulations are thrown, it seems transport buffers. i tried a lot of things, with no better result, maybe i can get some hints to get a solution...
> thx
> stefan
>
>

One problem with the above code is you're calling transport.write from a thread:

http://twistedmatrix.com/trac/wiki/FrequentlyAskedQuestions#WhydoesittakealongtimefordataIsendwithtransport.writetoarriveattheothersideoftheconnection

The above code could also be improved by not using a thread and
instead scheduling a call to check birthdays:

http://twistedmatrix.com/documents/current/api/twisted.internet.task.LoopingCall.html

It would also make sense to attach such functionality to the Factory
rather than relying global state - maintain a list of protocols on the
Factory instance.

-Drew



From dfarrell at mypublisher.com  Thu May  7 14:11:26 2009
From: dfarrell at mypublisher.com (Doug Farrell)
Date: Thu, 7 May 2009 16:11:26 -0400
Subject: [Twisted-Python] Question about deferreds
Message-ID: <318F79422ADC5041A93343721F84474D01C9ED21@exchange.mypublisher.local>

Glyph,

 

Thank you very much for your response, it has provided me with material
that will help me take a big step in my Twisted education.

> 

> Deferreds are not about breaking your work up into steps to save time.

> They're about breaking it up so that different systems can deal with

> the

> same asynchronous event in their own way.

> 

> For example, let's say you're working on a REST client that deals with

> invoices.  The server gives you data at a particular URL and you want

> to

> convert it into an "Invoice" instance.

> 

(snip)

This whole section of your answer really helped me get a handle on a
deferred, well beyond the "promise that a function will have a result
later". J I was thinking kind of monolithically about how to use
deferreds, in that if I was writing everything why would I break it up?
However, the real case is more along the lines of what you said in your
answer; more than likely the eventual total behavior is made up of a
string of smaller behaviors 'glued' together by the deferred. And these
other behaviors would be code generated by others in my group or
libraries.

(snip)

> 

> If you actually wanted to interleave Deferred callbacks like that it

> would be tricky.  But if you just want interleaved callbacks, use

> Cooperator as I mentioned above :).

> 

This reference to the Cooperator really helped me out, I just didn't
know what to look for in the Twisted system to do what I wanted with
co-operating state machines. I did build a little prototype using
deferreds that does provide the behavior I was after, but it was awkward
at best to set up. I felt like there should be something more elegant,
and the Cooperator looks like exactly what I need. I'm going to try and
set up a prototype to experiment with so I understand it more.

 

Again, thanks for your reply and help!

Doug

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090507/006242b6/attachment.html>

From rlotun at gmail.com  Thu May  7 16:06:04 2009
From: rlotun at gmail.com (Reza Lotun)
Date: Thu, 7 May 2009 23:06:04 +0100
Subject: [Twisted-Python] Question about deferreds
In-Reply-To: <318F79422ADC5041A93343721F84474D01C9ED21@exchange.mypublisher.local>
References: <318F79422ADC5041A93343721F84474D01C9ED21@exchange.mypublisher.local>
Message-ID: <95bb10690905071506h321e0ba9s9ad17187456645e7@mail.gmail.com>

On Thu, May 7, 2009 at 9:11 PM, Doug Farrell <dfarrell at mypublisher.com> wrote:
> This reference to the Cooperator really helped me out, I just didn’t know
> what to look for in the Twisted system to do what I wanted with co-operating
> state machines. I did build a little prototype using deferreds that does
> provide the behavior I was after, but it was awkward at best to set up. I
> felt like there should be something more elegant, and the Cooperator looks
> like exactly what I need. I’m going to try and set up a prototype to
> experiment with so I understand it more.

Also, you might find the following useful in trying to understand task
Cooperator:
http://oubiwann.blogspot.com/2008/06/async-batching-with-twisted-walkthrough.html

It really helped me out when I was learning how to use it.

Good luck,
Reza

-- 
Reza Lotun
+44 (0)7521 310 763
rlotun at gmail.com



From exarkun at divmod.com  Fri May  8 05:44:22 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 8 May 2009 07:44:22 -0400
Subject: [Twisted-Python] how to authenticate SMPT server in Twisted
 Framework
In-Reply-To: <a0445b00905070250m49d9ab5epccc7466040aa36aa@mail.gmail.com>
Message-ID: <20090508114422.21531.2040776500.divmod.quotient.18711@henry.divmod.com>

On Thu, 7 May 2009 15:20:12 +0530, ganesh gunasekaran <gjango.py at gmail.com> wrote:
>Hi gp,
>I'm very new to Twisted Framework ,
>I wrote a very simple  code to send mails concurrently, using SMTP mail
>server
>the code as below
>
>
>from twisted.mail.smtp import sendmail
>from twisted.internet import reactor
>from twisted.python.log import err
>import time
>
>MAILSERVER = 'mail.xxx.com'
>listTo = ['ganesh.xxx at gmail.com', 'xxjango.py at gmail.com', '
>lovely_xxx at yahoo.co.in']
>FROM = 'gxxxkaran at xxxx.com'
>MSGBODY = "hi this is test mail"
>a= time.time()
>done = sendmail(MAILSERVER, FROM, listTo, MSGBODY ,senderDomainName=None,
>port=25)
>done.addErrback(err)
>done.addCallback(lambda ignored: reactor.stop())
>reactor.run()
>print "Took %s seconds" %str(time.time()-a)
>
>
>hence i'm not aware of how to authenticate my mail server in Twisted
>Framework ,this code gives me error saying ,"Relay access denied"
>I will be grateful  if someone forward me the right solution.

`sendmail´ can't be used to authenticate.  For that, you need to use
`ESMTPSenderFactory`.  It takes many of the same arguments as `sendmail´,
plus a `username´ and `password´ and some options related to security.

If you haven't worked with factories before, the client howto might be
helpful:

http://twistedmatrix.com/projects/core/documentation/howto/clients.html

Jean-Paul



From rlotun at gmail.com  Fri May  8 06:06:42 2009
From: rlotun at gmail.com (Reza Lotun)
Date: Fri, 8 May 2009 13:06:42 +0100
Subject: [Twisted-Python] Twisted HTTP 1.1 Web Client
Message-ID: <95bb10690905080506q239a8079rf18c2783daed341@mail.gmail.com>

Hi,

Just curious, but what's the roadmap for the new web client
(http://twistedmatrix.com/trac/ticket/886)? As I understand it only
the finalization of a public api remains?

Cheers,
Reza

-- 
Reza Lotun
+44 (0)7521 310 763
rlotun at gmail.com



From exarkun at divmod.com  Fri May  8 06:20:10 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 8 May 2009 08:20:10 -0400
Subject: [Twisted-Python] Twisted HTTP 1.1 Web Client
In-Reply-To: <95bb10690905080506q239a8079rf18c2783daed341@mail.gmail.com>
Message-ID: <20090508122010.21531.574097152.divmod.quotient.18717@henry.divmod.com>

On Fri, 8 May 2009 13:06:42 +0100, Reza Lotun <rlotun at gmail.com> wrote:
>Hi,
>
>Just curious, but what's the roadmap for the new web client
>(http://twistedmatrix.com/trac/ticket/886)? As I understand it only
>the finalization of a public api remains?

That, as well as the implementation of higher-level APIs on top of it.
For example, APIs which automatically handle redirects for you, or cookies,
timeouts, caching, etc.

Chris did a little work towards timeout support at the last sprint.  The
idea is that at least some of these higher-level APIs should be implemented
before we declare the low-level interface complete and public.

Jean-Paul



From exarkun at twistedmatrix.com  Sat May  9 22:05:17 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 10 May 2009 04:05:17 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1241928317.08.420091996@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090510/63171c5d/attachment.html>

From therve at free.fr  Sun May 10 03:17:28 2009
From: therve at free.fr (Thomas =?ISO-8859-1?Q?Herv=E9?=)
Date: Sun, 10 May 2009 11:17:28 +0200
Subject: [Twisted-Python] Announcing Twotp 0.6
Message-ID: <1241947048.6438.20.camel@brainwave>

Hello all!

I'm pleased to announce version 0.6 of Twotp [1].

What is Twotp? It's an implementation of the Erlang protocol using
Python and Twisted, similar with the built-in Jinterface [2] or
py_interface [3].

After some hibernating time, I've focused on implementing links and
monitoring of Erlang processes. Now it's even more complete than
Jinterface, which doesn't implement monitoring.

After implementing the lower layer, it made me realize that the current
API was all but convenient. So I built a complete new API simplifying
the whole task, around the concept of processes. It's now much easier to
implement real process communication with Erlang, instead of using
simple RPC. I've reworked the examples and the documentation, I hope
it's enough for helping people to start using it!

You can download it here: http://pypi.python.org/pypi/twotp

There is also a PPA for Ubuntu wih latest version:
https://launchpad.net/~twotp/+archive/ppa

Note: this is a backward-incompatible version. Changing to the new API
should be fairly easy, but I'd be glad to help anyone encountering
problems.

Please report bugs and successes! You can write here or on Freenode in
#twisted.

Thanks!

[1]: http://launchpad.net/twotp

[2]: http://erlang.org/doc/apps/jinterface/index.html

[3]: http://www.lysator.liu.se/~tab/erlang/py_interface/

-- 
Thomas




From gabriel.rossetti at arimaz.com  Sun May 10 04:32:40 2009
From: gabriel.rossetti at arimaz.com (Gabriel Rossetti)
Date: Sun, 10 May 2009 12:32:40 +0200
Subject: [Twisted-Python] Twisted plugins and py2exe
In-Reply-To: <20090224195505.12555.1349207332.divmod.xquotient.5060@weber.divmod.com>
References: <49A421C2.4010600@arimaz.com>	<20090224165527.12853.1836778921.divmod.quotient.13499@henry.divmod.com>
	<20090224195505.12555.1349207332.divmod.xquotient.5060@weber.divmod.com>
Message-ID: <4A06AD48.4050602@arimaz.com>

glyph at divmod.com wrote:
>
> On 04:55 pm, exarkun at divmod.com wrote:
>> Tue, 24 Feb 2009 17:35:14 +0100, Gabriel Rossetti 
>> <gabriel.rossetti at arimaz.com> wrote:
>>> Jean-Paul Calderone wrote:
>>>> On Tue, 24 Feb 2009 11:49:13 +0100, Gabriel Rossetti 
>>>> <gabriel.rossetti at arimaz.com> wrote:
>
>>>>> Has anyone ever had this problem while using plugins with Twisted 
>>>>> and py2exe?
>
>>>> No, but from the traceback, it seems fairly clear that the plugin 
>>>> system
>>>> is trying to write a plugin cache file into your py2exe-created zip 
>>>> file
>>>> of Python source.
>
>>> Ok, I could do this, teach it abot zip files and have it update it's 
>>> cache in the zip file, but in certain cases, like mine actually, if 
>>> you tell py2exe to include the zip file in the exec, then it won't 
>>> work. How about adding the possibility to specify where the cache is 
>>> to be written?
>
> This is almost certainly the wrong solution to your problem, but if 
> you disagree with this assessment please feel free to update this ticket:
>
>    http://twistedmatrix.com/trac/ticket/3348
>
> Several people have requested this feature and nobody has really made 
> a good case for why it should be implemented.  (I don't think it 
> should be, I just think we should record all the reasons why not on 
> that ticket :)).
>> Updating the cache in the zip file probably isn't the right thing to do.
>> Just skipping cache generation would probably make more sense.  It 
>> should
>> be easier to implement, anyway.
>
> Skipping the cache generation is like skipping bytecode compilation. 
> It's not a catastrophic error, everything should still work, but it 
> will result in more unnecessary work being done at runtime.
>
> IMHO the right solution in this particular case would be to get py2exe 
> (or some part of the setup process in py2exe, which I believe is 
> implemented using distutils) to generate a cache file as part of the 
> built zip file.  Presumably .pyc files are also created and included 
> in the zip file.  The appropriate procedure for forcibly generating 
> the cache is described here:
>
> http://twistedmatrix.com/projects/core/documentation/howto/plugin.html#auto3 
>
>
> A cache generated in this manner will be suitable for packaging into a 
> zip file.
Sorry for reviving this old thread now, but I found a way of doing it 
with almost no modifications to the way things are currently done. I 
just made twisted.python.zippath.ZipPath.open have the same signature as 
twisted.python.filepath.FilePath (see my patch) and then added the 
following to my py2exe setup file:

from py2exe.build_exe import py2exe as BuildExe
from twisted.plugin import getCache

class PluginCacheCollector(BuildExe):
    def copy_extensions(self, extensions):
        BuildExe.copy_extensions(self, extensions)
       
        # Import the plugin packages
        from mypackage.plugins.io import myioplugins
        from mypackage.plugins.misc import myotherplugins
        mods = [ myioplugins, myotherplugins ]
       
        for m in mods:
           
            # Pre-gen the plugin cache
            getCache(m)
           
            # Build the cache file's path in the build collect dir and 
copy the cache files there
            f = os.path.join(*(m.__name__.split('.') + ["dropin.cache"]))
            full = os.path.join(self.collect_dir, f)
            self.copy_file(f, full)
           
            # Add the cache file path to the list of files to be added 
to the py2exe zip file
            self.compiled_files.append(f)

and add this 'cmdclass={"py2exe": PluginCacheCollector}' to setup() like so:

opts = {
    "py2exe": {
        "packages": [ "mypackage" ],
        "includes": [ "myincludes" ],
        "excludes": [ "curses", "Tkinter", "Tkconstants", "doctest", 
"pdb", "unittest", "difflib", "pyreadline", "optparse", "calendar", 
"tcl", "pywin.debugger", "pywin.debugger.dbgcon",
                      "pywin.dialogs", "_gtkagg", "_tkagg" ],
        "dll_excludes": ["libgdk-win32-2.0-0.dll", 
"libgobject-2.0-0.dll", "tcl84.dll", "tk84.dll"],
        "dist_dir": "dist",
        "optimize": 2, # Use -OO when building (e.g. python -OO setup.py 
py2exe)
        "bundle_files": 1,
        "compressed": True,
    }
}

setup(  
    console=['mymain.py'],
    zipfile="library.zip",
    options=opts,
    data_files=[("icons", glob.glob("icons/*.*"))],
    cmdclass={"py2exe": PluginCacheCollector}, # <----------- add this
    )

And that does the trick, it will generate the cache files and they will 
be copied to the collect dir, then they will get added to the zip. What 
do you think?

Gabriel
>
> Another part of the solution would be to implement setContent on 
> ZipPath.  However, there are still likely to be erroneous deployment 
> scenarios where the ZipPath is not available for writing, just as an 
> installation path is frequently not available for writing now.  So an 
> initial implementation of setContent on ZipPath could just raise the 
> same exception that an unwritable FilePath would, for consistency in 
> error handling.
>
> For the issue of quieting the mostly-harmless error message now 
> produced by a failure to write the cache file, see here:
>
>    http://twistedmatrix.com/trac/ticket/2409
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From gabriel.rossetti at arimaz.com  Sun May 10 04:42:49 2009
From: gabriel.rossetti at arimaz.com (Gabriel Rossetti)
Date: Sun, 10 May 2009 12:42:49 +0200
Subject: [Twisted-Python] Twisted plugins and py2exe
In-Reply-To: <20090224195505.12555.1349207332.divmod.xquotient.5060@weber.divmod.com>
References: <49A421C2.4010600@arimaz.com>	<20090224165527.12853.1836778921.divmod.quotient.13499@henry.divmod.com>
	<20090224195505.12555.1349207332.divmod.xquotient.5060@weber.divmod.com>
Message-ID: <4A06AFA9.6070600@arimaz.com>

it would help if I attatched the patch :-)

glyph at divmod.com wrote:
>
> On 04:55 pm, exarkun at divmod.com wrote:
>> Tue, 24 Feb 2009 17:35:14 +0100, Gabriel Rossetti 
>> <gabriel.rossetti at arimaz.com> wrote:
>>> Jean-Paul Calderone wrote:
>>>> On Tue, 24 Feb 2009 11:49:13 +0100, Gabriel Rossetti 
>>>> <gabriel.rossetti at arimaz.com> wrote:
>
>>>>> Has anyone ever had this problem while using plugins with Twisted 
>>>>> and py2exe?
>
>>>> No, but from the traceback, it seems fairly clear that the plugin 
>>>> system
>>>> is trying to write a plugin cache file into your py2exe-created zip 
>>>> file
>>>> of Python source.
>
>>> Ok, I could do this, teach it abot zip files and have it update it's 
>>> cache in the zip file, but in certain cases, like mine actually, if 
>>> you tell py2exe to include the zip file in the exec, then it won't 
>>> work. How about adding the possibility to specify where the cache is 
>>> to be written?
>
> This is almost certainly the wrong solution to your problem, but if 
> you disagree with this assessment please feel free to update this ticket:
>
>    http://twistedmatrix.com/trac/ticket/3348
>
> Several people have requested this feature and nobody has really made 
> a good case for why it should be implemented.  (I don't think it 
> should be, I just think we should record all the reasons why not on 
> that ticket :)).
>> Updating the cache in the zip file probably isn't the right thing to do.
>> Just skipping cache generation would probably make more sense.  It 
>> should
>> be easier to implement, anyway.
>
> Skipping the cache generation is like skipping bytecode compilation. 
> It's not a catastrophic error, everything should still work, but it 
> will result in more unnecessary work being done at runtime.
>
> IMHO the right solution in this particular case would be to get py2exe 
> (or some part of the setup process in py2exe, which I believe is 
> implemented using distutils) to generate a cache file as part of the 
> built zip file.  Presumably .pyc files are also created and included 
> in the zip file.  The appropriate procedure for forcibly generating 
> the cache is described here:
>
> http://twistedmatrix.com/projects/core/documentation/howto/plugin.html#auto3 
>
>
> A cache generated in this manner will be suitable for packaging into a 
> zip file.
Sorry for reviving this old thread now, but I found a way of doing it
with almost no modifications to the way things are currently done. I
just made twisted.python.zippath.ZipPath.open have the same signature as
twisted.python.filepath.FilePath (see my patch) and then added the
following to my py2exe setup file:

from py2exe.build_exe import py2exe as BuildExe
from twisted.plugin import getCache

class PluginCacheCollector(BuildExe):
    def copy_extensions(self, extensions):
        BuildExe.copy_extensions(self, extensions)

        # Import the plugin packages
        from mypackage.plugins.io import myioplugins
        from mypackage.plugins.misc import myotherplugins
        mods = [ myioplugins, myotherplugins ]

        for m in mods:

            # Pre-gen the plugin cache
            getCache(m)

            # Build the cache file's path in the build collect dir and
copy the cache files there
            f = os.path.join(*(m.__name__.split('.') + ["dropin.cache"]))
            full = os.path.join(self.collect_dir, f)
            self.copy_file(f, full)

            # Add the cache file path to the list of files to be added
to the py2exe zip file
            self.compiled_files.append(f)

and add this 'cmdclass={"py2exe": PluginCacheCollector}' to setup() like so:

opts = {
    "py2exe": {
        "packages": [ "mypackage" ],
        "includes": [ "myincludes" ],
        "excludes": [ "curses", "Tkinter", "Tkconstants", "doctest",
"pdb", "unittest", "difflib", "pyreadline", "optparse", "calendar",
"tcl", "pywin.debugger", "pywin.debugger.dbgcon",
                      "pywin.dialogs", "_gtkagg", "_tkagg" ],
        "dll_excludes": ["libgdk-win32-2.0-0.dll",
"libgobject-2.0-0.dll", "tcl84.dll", "tk84.dll"],
        "dist_dir": "dist",
        "optimize": 2, # Use -OO when building (e.g. python -OO setup.py
py2exe)
        "bundle_files": 1,
        "compressed": True,
    }
}

setup(
    console=['mymain.py'],
    zipfile="library.zip",
    options=opts,
    data_files=[("icons", glob.glob("icons/*.*"))],
    cmdclass={"py2exe": PluginCacheCollector}, # <----------- add this
    )

And that does the trick, it will generate the cache files and they will
be copied to the collect dir, then they will get added to the zip. What
do you think?

Gabriel
>
> Another part of the solution would be to implement setContent on 
> ZipPath.  However, there are still likely to be erroneous deployment 
> scenarios where the ZipPath is not available for writing, just as an 
> installation path is frequently not available for writing now.  So an 
> initial implementation of setContent on ZipPath could just raise the 
> same exception that an unwritable FilePath would, for consistency in 
> error handling.
>
> For the issue of quieting the mostly-harmless error message now 
> produced by a failure to write the cache file, see here:
>
>    http://twistedmatrix.com/trac/ticket/2409
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: zippath.py.patch
Type: text/x-diff
Size: 358 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20090510/e480afba/attachment-0002.patch>

From luigiandcosolutions at gmail.com  Mon May 11 04:24:54 2009
From: luigiandcosolutions at gmail.com (Luigi Conte)
Date: Mon, 11 May 2009 12:24:54 +0200
Subject: [Twisted-Python] help using deferred
Message-ID: <9cce290a0905110324p241c236dxb2aecb077a7b51a9@mail.gmail.com>

Hi people,
I'm luigi and I'm a student at Politecnico di Milano, Italy. I'm working for
a graduate thesis on a framework called usher. It provides an API to do
connect e command operations. It manages all those calls with a defferred
object (i think). In fact when I call the connect it returns me a defferred
object. All that i want to know is how to call the other operations with
this object and how to know when an operation is completely done.
The procedure I call is simple: connect method, start method many times,
stop method, disconnect method. I want to call these methods sequentially
because I have to fallow a list of commands so I have to be sure the
previous methods are already been invoked. I'll post the main methods hoping
someone could help me in how to add the method in the deferred and how to
know when it is completely invoked.
# Connect
def connect(self, ctrl_host, ctrl_port, user, passwd):
        """Connect to an Usher control server.

        @param ctrl_host: fqdn where Usher controller is running
        @type ctrl_host: string
        @param ctrl_port: port number Usher controller is listening on
        @type ctrl_port: int
        @param user: username of user connecting to Usher controller
        @type user: string
        @param passwd: password of user connecting to Usher controller
        @type passwd: string

        return: Deferred which returns and L{UsherResult}
        rtype: twisted.internet.defer.Deferred
        """
        # serialize access to connect
        if not self.connect_lock.acquire(False):
            raise UsherEx, "Connection Pending"

        if self.factory:
            self.disconnect()

        # reset vms
        self.vms = {}
        # reset passwd to None until we're connected
        self.passwd = None
        self.factory = APIFactory()
        self.factory.api = self
        # connect to server
        reactor.connectSSL(ctrl_host, ctrl_port, self.factory,
            ssl.ClientContextFactory())
        d = self.factory.login(credentials.UsernamePassword(user, passwd),
            client=self)
        d.addErrback(self._handle_err, misc.whoami())
        d.addCallback(self._connected_to_ctrl, ctrl_host, ctrl_port, user,
            passwd)
        return d

# start
def start(self,
              cluster=None,
              prefix='',
              vmlist=None,
              count=None,
              first=None,
              last=None,
              dregex=None,
              dlist=None,
              dryrun=False,
              eid=None,
              **kw):
        """Start a VM or set of VMs

        @param cluster: Name of cluster to which VMs should belong
        @type cluster: string
        @param prefix: prefix to prepend to VM names
        @type prefix: string
        @param vmlist: list of strings of VMs to start
        @type vmlist: list of strings
        @param count: Number of consecutive VMs to start
        @type count: int
        @param first: Lowest number of VM to start
        @type first: int
        @param last: Highest number of VM to start
        @type last: int
        @param dregex: regular expression to match against destination LNM
            names
        @type dregex: list of strings
        @param dlist: list of strings to match against destination LNM names
        @type dlist: list of strings
        @param dryrun: Show what would have happened if the command had been
                run without the dryrun command (at the instant that the
dryrun
                command was run of course)
        @type dryrun: bool
        @param eid: mechanism for admin user to be able to specify an
alternate
                username for forming suffix for regex
        @type eid: string
        @param kw: Extra arguments passed to controller for use by plugins
or
            LNM.  Any keywords starting with 'vm_' are added to VM's uargs
            parameter.  Note, the controller actually checks for two kw
            arguments: ram and ip_addrs.  Though these are, strictly
speaking,
            VM parameters, they're considered important enough that the
            controller checks for them.
        @type kw: dict

        @return: Deferred which returns an L{UsherResult}
        @rtype: twisted.internet.defer.Deferred

        @raise UsherNotConnected: Raised when not connected to Usher
            Controller
        @raise UsherPBDeadRefEx: Raised when capability for Usher
            Controller goes stale.  Must reconnect when this happens
        @raise UsherInvalidInputEx: Raised when an invalid input or
            combination of parameters is received.

        @attention: The following conditions must hold:
                1. first, last, and count must be non-negative
                2. specifying first requires last or count
                3. cannot use count with vmlist
                4. cannot use count with both first and last

       """
        # make sure we're connected
        if not self.aref:
            raise UsherNotConnectedEx

        # combine these to reduce params
        if ((first and first < 0) or (last and last < 0) or (count and count
<
            0)):
            raise UsherInvalidInputEx(
                    "first, last, and count must be non-negative")
        vmrange = (first,last,count)
        # arg check
        self._arg_check(vmlist, vmrange)

        # get final destination list
        dlist = self._namecomplete(dlist, suffix=self.suffix)
        self._check_lnmlist(dlist)
        dregex = self._regex_append(dregex, dlist)
        dlist = self._regex_filter(dregex, self.lnms.keys())

        # complete names (if necessary) in the vmlist
        vmlist = self._namecomplete(vmlist, cluster, eid)
        # check that the vms specified don't already exist
        self._check_vmlist(vmlist, isin=True)
        vmlist = self._get_vm_names_to_start(vmlist, cluster, prefix,
vmrange,
            eid)

        # controller handles eid from kw, so add it
        if eid:
            kw['eid'] = eid

        if dryrun:
            d = UsherResult('dryrun', msg = 'started:' + linesep +
                    linesep.join(vmlist))
            return d

        try:
            if vmlist:
                d = self.aref.callRemote("start", vmlist, dlist,
                    **kw)
                d.addErrback(self._handle_err, misc.whoami())
            else:
                raise UsherInvalidInputEx(
                        "No VMs started.  No unique VMs specified in
command")
            return d
        except pb.DeadReferenceError, ex:
            raise UsherPBDeadRefEx

If you want, all the package is at
http://usher.ucsd.edu/downloads/snapshots/usher/latest/usher-latest.tgz
in the client folder you'll find the api.py

Thank you very much hoping someone will help this totally inexpert user,
Luigi.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090511/4f45a018/attachment.html>

From clemesha at gmail.com  Mon May 11 05:12:25 2009
From: clemesha at gmail.com (Alex Clemesha)
Date: Mon, 11 May 2009 04:12:25 -0700
Subject: [Twisted-Python] Announcing Twotp 0.6
In-Reply-To: <1241947048.6438.20.camel@brainwave>
References: <1241947048.6438.20.camel@brainwave>
Message-ID: <d272f0690905110412v4a6757f6wf53d13345c9a9268@mail.gmail.com>

Thomas,

Just wanted to say thanks for Twotp, it's been very useful so far!
(Also, thanks for the expert help on #twisted irc :-)

-Alex


On Sun, May 10, 2009 at 2:17 AM, Thomas Hervé <therve at free.fr> wrote:
> Hello all!
>
> I'm pleased to announce version 0.6 of Twotp [1].
>
> What is Twotp? It's an implementation of the Erlang protocol using
> Python and Twisted, similar with the built-in Jinterface [2] or
> py_interface [3].
>
> After some hibernating time, I've focused on implementing links and
> monitoring of Erlang processes. Now it's even more complete than
> Jinterface, which doesn't implement monitoring.
>
> After implementing the lower layer, it made me realize that the current
> API was all but convenient. So I built a complete new API simplifying
> the whole task, around the concept of processes. It's now much easier to
> implement real process communication with Erlang, instead of using
> simple RPC. I've reworked the examples and the documentation, I hope
> it's enough for helping people to start using it!
>
> You can download it here: http://pypi.python.org/pypi/twotp
>
> There is also a PPA for Ubuntu wih latest version:
> https://launchpad.net/~twotp/+archive/ppa
>
> Note: this is a backward-incompatible version. Changing to the new API
> should be fairly easy, but I'd be glad to help anyone encountering
> problems.
>
> Please report bugs and successes! You can write here or on Freenode in
> #twisted.
>
> Thanks!
>
> [1]: http://launchpad.net/twotp
>
> [2]: http://erlang.org/doc/apps/jinterface/index.html
>
> [3]: http://www.lysator.liu.se/~tab/erlang/py_interface/
>
> --
> Thomas
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Alex Clemesha
clemesha.org



From exarkun at divmod.com  Mon May 11 07:29:52 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 11 May 2009 09:29:52 -0400
Subject: [Twisted-Python] help using deferred
In-Reply-To: <9cce290a0905110324p241c236dxb2aecb077a7b51a9@mail.gmail.com>
Message-ID: <20090511132952.21531.1118624688.divmod.quotient.19562@henry.divmod.com>

On Mon, 11 May 2009 12:24:54 +0200, Luigi Conte <luigiandcosolutions at gmail.com> wrote:
>Hi people,
>I'm luigi and I'm a student at Politecnico di Milano, Italy. I'm working for
>a graduate thesis on a framework called usher. It provides an API to do
>connect e command operations. It manages all those calls with a defferred
>object (i think). In fact when I call the connect it returns me a defferred
>object. All that i want to know is how to call the other operations with
>this object and how to know when an operation is completely done.
>The procedure I call is simple: connect method, start method many times,
>stop method, disconnect method. I want to call these methods sequentially
>because I have to fallow a list of commands so I have to be sure the
>previous methods are already been invoked. I'll post the main methods hoping
>someone could help me in how to add the method in the deferred and how to
>know when it is completely invoked.

The Deferred tells you two things.  It tells you when an operation has
completed and it tells you the result of the operation.  It tells you
*when* by calling your callback function at that time.  It tells you
what *result* by the value it passes to that callback function.

So if you want to connect, then do the "start" operation many times, then
stop, then disconnect, you have some Deferreds and a simple recursion-
or loop-like structure.  For example,

    # First, set up the connection.
    taskDeferred = connect(...)
    def cbConnected(connectResult):
        # This function will run once the Deferred returned by `connect´
        # fires.  Here, "start" something.
        return start(...)
    taskDeferred.addCallback(cbConnected)

    def cbStarted(startResult):
        # Now the Deferred returned by `start´ has fired.
        if someStopCondition:
            # If we decide it is time to stop, then stop.
            return stop(...)
        # Otherwise, run `start´ again
        startAgainDeferred = start(...)
        # And call this callback again with this new call's result.
        startAgainDeferred.addCallback(cbStarted)
        return startAgainDeferred
    taskDeferred.addCallback(cbStarted)

    def cbStopped(stopResult):
        # The only exit from the earlier "loop" is through the code path
        # which calls `stop´.  This callback is called when the Deferred
        # returned by that call fires.  Do the disconnect now.
        return disconnect(...)
    taskDeferred.addCallback(cbStopped)

    def cbDisconnected(disconnectResult):
        print "All done"
    taskDeferred.addCallback(cbDisconnected)

    # It's possible something will go wrong in the above.  To make sure any
    # exceptions are reported, add a logging errback at the very end to
    # display whatever might go wrong.
    taskDeferred.addErrback(twisted.python.log.err)

Hope this helps,

Jean-Paul



From luigiandcosolutions at gmail.com  Mon May 11 08:55:40 2009
From: luigiandcosolutions at gmail.com (Luigi Conte)
Date: Mon, 11 May 2009 16:55:40 +0200
Subject: [Twisted-Python] help using deferred
In-Reply-To: <20090511132952.21531.1118624688.divmod.quotient.19562@henry.divmod.com>
References: <9cce290a0905110324p241c236dxb2aecb077a7b51a9@mail.gmail.com>
	<20090511132952.21531.1118624688.divmod.quotient.19562@henry.divmod.com>
Message-ID: <9cce290a0905110755i3988cab1j7a6041a55a440848@mail.gmail.com>

I'm sure you're saying only good things but I'm so inexpert in twisted that
I can't understand very well what to do.
I'll try to explain all that I want to do and how I did it wrongly:
first I have to call the connect method from the api and it returns a
deferred so I do:
in conn_to_ctrl i have:
d = api.connect(...)
return d

now I do some operations with config files to call many times the start
method from the api (I have to start many virtual machines) and the
api.start returns a deferred so what have I to do now?
I do so:
in examinecfg i have:
# tha same d that i used to add api.connect!
self.d.addCallback(api.start, (method_args))
return d

Then I have to call the disconnect method from the api. But i tried to print
out something to fallow the executing but I only see printing the first
method that call the connection. after that the process ends.

In the main I have:
defer = conn_to_ctrl()
or have I to add to defer also the examinecfg?

thank you very much

2009/5/11 Jean-Paul Calderone <exarkun at divmod.com>

> On Mon, 11 May 2009 12:24:54 +0200, Luigi Conte <
> luigiandcosolutions at gmail.com> wrote:
> >Hi people,
> >I'm luigi and I'm a student at Politecnico di Milano, Italy. I'm working
> for
> >a graduate thesis on a framework called usher. It provides an API to do
> >connect e command operations. It manages all those calls with a defferred
> >object (i think). In fact when I call the connect it returns me a
> defferred
> >object. All that i want to know is how to call the other operations with
> >this object and how to know when an operation is completely done.
> >The procedure I call is simple: connect method, start method many times,
> >stop method, disconnect method. I want to call these methods sequentially
> >because I have to fallow a list of commands so I have to be sure the
> >previous methods are already been invoked. I'll post the main methods
> hoping
> >someone could help me in how to add the method in the deferred and how to
> >know when it is completely invoked.
>
> The Deferred tells you two things.  It tells you when an operation has
> completed and it tells you the result of the operation.  It tells you
> *when* by calling your callback function at that time.  It tells you
> what *result* by the value it passes to that callback function.
>
> So if you want to connect, then do the "start" operation many times, then
> stop, then disconnect, you have some Deferreds and a simple recursion-
> or loop-like structure.  For example,
>
>    # First, set up the connection.
>    taskDeferred = connect(...)
>    def cbConnected(connectResult):
>        # This function will run once the Deferred returned by `connect´
>        # fires.  Here, "start" something.
>        return start(...)
>    taskDeferred.addCallback(cbConnected)
>
>    def cbStarted(startResult):
>        # Now the Deferred returned by `start´ has fired.
>        if someStopCondition:
>            # If we decide it is time to stop, then stop.
>            return stop(...)
>        # Otherwise, run `start´ again
>        startAgainDeferred = start(...)
>        # And call this callback again with this new call's result.
>        startAgainDeferred.addCallback(cbStarted)
>        return startAgainDeferred
>    taskDeferred.addCallback(cbStarted)
>
>    def cbStopped(stopResult):
>        # The only exit from the earlier "loop" is through the code path
>        # which calls `stop´.  This callback is called when the Deferred
>        # returned by that call fires.  Do the disconnect now.
>        return disconnect(...)
>    taskDeferred.addCallback(cbStopped)
>
>    def cbDisconnected(disconnectResult):
>        print "All done"
>    taskDeferred.addCallback(cbDisconnected)
>
>    # It's possible something will go wrong in the above.  To make sure any
>    # exceptions are reported, add a logging errback at the very end to
>    # display whatever might go wrong.
>    taskDeferred.addErrback(twisted.python.log.err)
>
> Hope this helps,
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090511/1efd1ce9/attachment.html>

From exarkun at divmod.com  Mon May 11 09:29:43 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 11 May 2009 11:29:43 -0400
Subject: [Twisted-Python] help using deferred
In-Reply-To: <9cce290a0905110755i3988cab1j7a6041a55a440848@mail.gmail.com>
Message-ID: <20090511152943.21531.38713624.divmod.quotient.19576@henry.divmod.com>

On Mon, 11 May 2009 16:55:40 +0200, Luigi Conte <luigiandcosolutions at gmail.com> wrote:
>I'm sure you're saying only good things but I'm so inexpert in twisted that
>I can't understand very well what to do.
>I'll try to explain all that I want to do and how I did it wrongly:
>first I have to call the connect method from the api and it returns a
>deferred so I do:
>in conn_to_ctrl i have:
>d = api.connect(...)
>return d
>
>now I do some operations with config files to call many times the start
>method from the api (I have to start many virtual machines) and the
>api.start returns a deferred so what have I to do now?
>I do so:
>in examinecfg i have:
># tha same d that i used to add api.connect!
>self.d.addCallback(api.start, (method_args))
>return d
>
>Then I have to call the disconnect method from the api. But i tried to print
>out something to fallow the executing but I only see printing the first
>method that call the connection. after that the process ends.
>
>In the main I have:
>defer = conn_to_ctrl()
>or have I to add to defer also the examinecfg?
>
>thank you very much

I'm not sure what you're doing wrong.  It's hard to understand mixed up
snippets and fragments of code.  Please:

  - don't top post
  - share complete, runnable examples (preferably minimal, too)
  - share the failure you're seeing - possibly including a traceback, or a
    description of the behavior that the program exhibits when you run it,
    and an explanation of how this differs from what you want

Jean-Paul



From powdahound at gmail.com  Mon May 11 10:16:32 2009
From: powdahound at gmail.com (Garret Heaton)
Date: Mon, 11 May 2009 09:16:32 -0700
Subject: [Twisted-Python] XMPP/Jabber server example
Message-ID: <812f32000905110916p36cb564fic5ad31e21e5298c9@mail.gmail.com>

I'm trying to create an XMPP server using twisted.words and am having
difficulty finding the correct way to make use of the classes provided. I
was hoping someone might have an example or short explanation of which
classes would be used to create a very basic server (using the latest
classes<http://twistedmatrix.com/documents/8.2.0/api/twisted.words.protocols.jabber.xmlstream.html>from
8.2.0).

So far I have a t.w.p.j.xmlstream.XmlStreamServerFactory object creating
t.w.x.xmlstream.XmlStream protocol instances. The
t.w.p.j.xmlstream.XmlStream objects are being given a
t.w.p.j.xmlstream.ListenAuthenticator object. The factory is being created
and given to a t.a.internet.TCPServer service which has a
t.a.service.Application as its parent service. Everything runs fine and I
can see data coming in, but I wasn't sure what the correct functions to
override and deal with the data were, or where to attach event listeners
using addBootstrap().

Also, how do xmlstream.StreamManager, xmlstream.XMPPHandler, and
xmlstream.XMPPHandlerCollection fit into this. Are they appropriate to use
for a server?

Is there still work being done on the goals listed at
http://twistedmatrix.com/trac/wiki/XMPPServerArchitecture?

Thanks! Really enjoying Twisted so far.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090511/0f238e27/attachment.html>

From terry.jones at gmail.com  Mon May 11 10:19:16 2009
From: terry.jones at gmail.com (Terry Jones)
Date: Mon, 11 May 2009 18:19:16 +0200
Subject: [Twisted-Python] Another approach to allowing __init__ to work with
	Deferreds
Message-ID: <18952.20484.534748.921408@jon.es>

I posted to this list back in Nov 2008 with subject:
A Python metaclass for Twisted allowing __init__ to return a Deferred

Briefly, I was trying to find a nice way to allow the __init__ method of a
class to work with deferreds in such a way that methods of the class could
use work done by __init__ safe in the knowledge that the deferreds had
completed.  E.g., if you have

    class X(object):
        def __init__(self, host, port):
            def final(connection):
                self.db = connection
            d = makeDBConnection(host, port)
            d.addCallback(final)

        def query(self, q):
            return self.db.runQuery(q)

Then when you make an X and call query on it, there's a chance the deferred
wont have fired, and you'll get an error.  This is just a very simple
illustrative example.  There are many more, and this is a general problem
of the synchronous world (in which __init__ is supposed to prepare a
fully-fledged class instance and cannot return a deferred) meeting the
asynchronous world in which we would like to (and must) use deferreds.

The earlier thread:

  http://twistedmatrix.com/pipermail/twisted-python/2008-November/018600.html

Although I learned a lot in that thread, I wasn't completely happy with any
of the solutions. Some of the things that still bugged me are in posts
towards the end of the thread:

  http://twistedmatrix.com/pipermail/twisted-python/2008-November/018624.html
  http://twistedmatrix.com/pipermail/twisted-python/2008-November/018634.html

The various approaches we took back then all boiled down to waiting for a
deferred to fire before the class instance was fully ready to use. When
that happened, you had your instance and could call its methods.

I had also thought about an alternate approach: having __init__ add a
callback to the deferreds it dealt with to set a flag in self and then have
all dependent methods check that flag to see if the class instance was
ready for use. But that 1) is ugly (too much extra code); 2) means the
caller has to be prepared to deal with errors due to the class instance not
being ready, and 3) adds a check to every method call. It would look
something like this:

    class X(object):
        def __init__(self, host, port):
            self.ready = False
            def final(connection):
                self.db = connection
                self.ready = True
            d = makeDBConnection(host, port)
            d.addCallback(final)

        def query(self, q):
            if not self.ready:
                raise IAmNotReadyException()
            return self.db.runQuery(q)

That was too ugly for my taste, for all of the above reasons, most
especially for forcing the unfortunate caller of my code to handle
IAmNotReadyException.


Anyway.... fast forward 6 months and I've hit the same problem again. It's
with existing code, in which I would like an __init__ to call something
that (now, due to changes elsewhere) returns a deferred. So I started
thinking again, and came up with a much cleaner way to do the alternate
approach via a class mixin:

    from twisted.internet import defer

    class deferredInitMixin(object):
        def wrap(self, d, *wrappedMethods):
            self.waiting = []
            self.stored = {}

            def restore(_):
                for method in self.stored:
                    setattr(self, method, self.stored[method])
                for d in self.waiting:
                    d.callback(None)

            def makeWrapper(method):
                def wrapper(*args, **kw):
                    d = defer.Deferred()
                    d.addCallback(lambda _: self.stored[method](*args, **kw))
                    self.waiting.append(d)
                    return d
                return wrapper

            for method in wrappedMethods:
                self.stored[method] = getattr(self, method)
                setattr(self, method, makeWrapper(method))

            d.addCallback(restore)


You use it as in the class Test below:

    from twisted.internet import defer, reactor

    def fire(d, value):
        print "I finally fired, with value", value
        d.callback(value)

    def late(value):
        d = defer.Deferred()
        reactor.callLater(1, fire, d, value)
        return d

    def called(result, what):
        print 'final callback of %s, result = %s' % (what, result)

    def stop(_):
        reactor.stop()


    class Test(deferredInitMixin):
        def __init__(self):
            d = late('Test')
            deferredInitMixin.wrap(self, d, 'f1', 'f2')

        def f1(self, arg):
            print "f1 called with", arg
            return late(arg)

        def f2(self, arg):
            print "f2 called with", arg
            return late(arg)


    if __name__ == '__main__':
        t = Test()
        d1 = t.f1(44)
        d1.addCallback(called, 'f1')
        d2 = t.f1(33)
        d2.addCallback(called, 'f1')
        d3 = t.f2(11)
        d3.addCallback(called, 'f2')
        d = defer.DeferredList([d1, d2, d3])
        d.addBoth(stop)
        reactor.run()


Effectively, the __init__ of my Test class asks deferredInitMixin to wrap
some of its methods. deferredInitMixin stores the original methods away and
replaces each of them with a function that immediately returns a deferred.
So after __init__ finishes, code that calls the now-wrapped methods of the
class instance before the deferred has fired will get a deferred back as
usual (but see * below). As far as they know, everything is normal.  Behind
the scenes, deferredInitMixin has arranged for these deferreds to fire only
after the deferred passed from __init__ has fired.  Once that happens,
deferredInitMixin also restores the original functions to the instance. As
a result there is no overhead later to check a flag to see if the instance
is ready to use. If the deferred from __init__ happens to fire before any
of the instance's methods are called, it will simply restore the original
methods.  Finally (obviously?) you only pass the method names to
deferredInitMixin that depend on the deferred in __init__ being done.

BTW, calling the methods passed to deferredInitMixin "wrapped" isn't really
accurate. They're just temporarily replaced.


I quite like this approach.  It's a second example of something I did in
http://twistedmatrix.com/pipermail/twisted-python/2009-April/019522.html in
which a pool of deferreds is accumulated and they're all fired when another
deferred fires. It's nice because you don't reply with an error and there's
no need for locking or other form of coordination - the work you need done
is already in progress, so you get back a fresh deferred and everything
goes swimmingly.

* Minor note: the methods you wrap should probably be ones that already
return deferreds. That way you always get a deferred back from them,
whether they're temporarily wrapped or not. The above mixin works just fine
if you ask it to wrap non-deferred-returning functions, but you have to
deal with the possibility that they will return a deferred (i.e., if you
call them while they're wrapped).

Comments welcome / wanted.

Terry



From adam.bcn at gmail.com  Mon May 11 10:26:37 2009
From: adam.bcn at gmail.com (Adam)
Date: Mon, 11 May 2009 18:26:37 +0200
Subject: [Twisted-Python] XMPP/Jabber server example
In-Reply-To: <812f32000905110916p36cb564fic5ad31e21e5298c9@mail.gmail.com>
References: <812f32000905110916p36cb564fic5ad31e21e5298c9@mail.gmail.com>
Message-ID: <4983dddf0905110926s11cf9746lca1b6353a0a755f@mail.gmail.com>

2009/5/11 Garret Heaton <powdahound at gmail.com>

> I'm trying to create an XMPP server using twisted.words and am having
> difficulty finding the correct way to make use of the classes provided. I
> was hoping someone might have an example or short explanation of which
> classes would be used to create a very basic server (using the latest
> classes<http://twistedmatrix.com/documents/8.2.0/api/twisted.words.protocols.jabber.xmlstream.html>from 8.2.0).
>
> So far I have a t.w.p.j.xmlstream.XmlStreamServerFactory object creating
> t.w.x.xmlstream.XmlStream protocol instances. The
> t.w.p.j.xmlstream.XmlStream objects are being given a
> t.w.p.j.xmlstream.ListenAuthenticator object. The factory is being created
> and given to a t.a.internet.TCPServer service which has a
> t.a.service.Application as its parent service. Everything runs fine and I
> can see data coming in, but I wasn't sure what the correct functions to
> override and deal with the data were, or where to attach event listeners
> using addBootstrap().
>
> Also, how do xmlstream.StreamManager, xmlstream.XMPPHandler, and
> xmlstream.XMPPHandlerCollection fit into this. Are they appropriate to use
> for a server?
>
> Is there still work being done on the goals listed at
> http://twistedmatrix.com/trac/wiki/XMPPServerArchitecture?
>
> Thanks! Really enjoying Twisted so far.
>

Hi Garret,

there's some Twisted/XMPP work going on over here, too:

http://wokkel.ik.nu/

Quote:

> Wokkel is collection of enhancements on top of the
> Twisted <http://www.twistedmatrix.com/> networking framework, written in
Python.
> It mostly provides a testing ground for enhancements
> to the Jabber/XMPP protocol implementation as
> found in Twisted Words, that are meant to eventually
> move there.

Hope that helps,

~Adam
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090511/f2c0650b/attachment.html>

From luigiandcosolutions at gmail.com  Mon May 11 11:49:19 2009
From: luigiandcosolutions at gmail.com (Luigi Conte)
Date: Mon, 11 May 2009 19:49:19 +0200
Subject: [Twisted-Python] help using deferred
In-Reply-To: <20090511152943.21531.38713624.divmod.quotient.19576@henry.divmod.com>
References: <9cce290a0905110755i3988cab1j7a6041a55a440848@mail.gmail.com>
	<20090511152943.21531.38713624.divmod.quotient.19576@henry.divmod.com>
Message-ID: <9cce290a0905111049j693150deye98c0129a977f070@mail.gmail.com>

2009/5/11 Jean-Paul Calderone <exarkun at divmod.com>

> On Mon, 11 May 2009 16:55:40 +0200, Luigi Conte <
> luigiandcosolutions at gmail.com> wrote:
> >I'm sure you're saying only good things but I'm so inexpert in twisted
> that
> >I can't understand very well what to do.
> >I'll try to explain all that I want to do and how I did it wrongly:
> >first I have to call the connect method from the api and it returns a
> >deferred so I do:
> >in conn_to_ctrl i have:
> >d = api.connect(...)
> >return d
> >
> >now I do some operations with config files to call many times the start
> >method from the api (I have to start many virtual machines) and the
> >api.start returns a deferred so what have I to do now?
> >I do so:
> >in examinecfg i have:
> ># tha same d that i used to add api.connect!
> >self.d.addCallback(api.start, (method_args))
> >return d
> >
> >Then I have to call the disconnect method from the api. But i tried to
> print
> >out something to fallow the executing but I only see printing the first
> >method that call the connection. after that the process ends.
> >
> >In the main I have:
> >defer = conn_to_ctrl()
> >or have I to add to defer also the examinecfg?
> >
> >thank you very much
>
> I'm not sure what you're doing wrong.  It's hard to understand mixed up
> snippets and fragments of code.  Please:
>
>  - don't top post
>  - share complete, runnable examples (preferably minimal, too)
>  - share the failure you're seeing - possibly including a traceback, or a
>    description of the behavior that the program exhibits when you run it,
>    and an explanation of how this differs from what you want
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>

Ok I'll try to explain what the api provides to me and what I want to do
with it:
mothods provided by api that I want to use:
1) connection

    def connect(self, ctrl_host, ctrl_port, user, passwd):
        """Connect to an Usher control server.
        @param ctrl_host: fqdn where Usher controller is running
        @type ctrl_host: string
        @param ctrl_port: port number Usher controller is listening on
        @type ctrl_port: int
        @param user: username of user connecting to Usher controller
        @type user: string
        @param passwd: password of user connecting to Usher controller
        @type passwd: string
        return: Deferred which returns and L{UsherResult}
        rtype: twisted.internet.defer.Deferred
        """
        # serialize access to connect
        if not self.connect_lock.acquire(False):
            raise UsherEx, "Connection Pending"
        if self.factory:
            self.disconnect()
        # reset vms
        self.vms = {}
        # reset passwd to None until we're connected
        self.passwd = None
        self.factory = APIFactory()
        self.factory.api = self
        # connect to server
        reactor.connectSSL(ctrl_host, ctrl_port, self.factory,
            ssl.ClientContextFactory())
        d = self.factory.login(credentials.UsernamePassword(user, passwd),
            client=self)
        d.addErrback(self._handle_err, misc.whoami())
        d.addCallback(self._connected_to_ctrl, ctrl_host, ctrl_port, user,
            passwd)
        return d

2) start single vm

    def start(self, cluster=None, prefix='', vmlist=None, count=None,
first=None, last=None, dregex=None,  dlist=None, dryrun=False, eid=None,
**kw):
        """Start a VM or set of VMs
        @param cluster: Name of cluster to which VMs should belong
        @type cluster: string
        @param prefix: prefix to prepend to VM names
        @type prefix: string
        @param vmlist: list of strings of VMs to start
        @type vmlist: list of strings
        @param count: Number of consecutive VMs to start
        @type count: int
        @param first: Lowest number of VM to start
        @type first: int
        @param last: Highest number of VM to start
        @type last: int
        @param dregex: regular expression to match against destination LNM
names
        @type dregex: list of strings
        @param dlist: list of strings to match against destination LNM names
        @type dlist: list of strings
        @param dryrun: Show what would have happened if the command had been
run without the dryrun command (at the instant that the dryrun command was
run of course)
        @type dryrun: bool
        @param eid: mechanism for admin user to be able to specify an
alternate username for forming suffix for regex
        @type eid: string
        @param kw: Extra arguments passed to controller for use by plugins
or LNM.  Any keywords starting with 'vm_' are added to VM's uargs
parameter.  Note, the controller actually checks for two kw arguments: ram
and ip_addrs.  Though these are, strictly speaking, VM parameters, they're
considered important enough that the controller checks for them.
        @type kw: dict

        @return: Deferred which returns an L{UsherResult}
        @rtype: twisted.internet.defer.Deferred
        @raise UsherNotConnected: Raised when not connected to Usher
Controller
        @raise UsherPBDeadRefEx: Raised when capability for Usher Controller
goes stale.  Must reconnect when this happens
        @raise UsherInvalidInputEx: Raised when an invalid input or
combination of parameters is received.
       """

        # make sure we're connected
        if not self.aref:
            raise UsherNotConnectedEx
        # combine these to reduce params
        if ((first and first < 0) or (last and last < 0) or (count and count
<
            0)):
            raise UsherInvalidInputEx("first, last, and count must be
non-negative")
        vmrange = (first,last,count)
        # arg check
        self._arg_check(vmlist, vmrange)
        # get final destination list
        dlist = self._namecomplete(dlist, suffix=self.suffix)
        self._check_lnmlist(dlist)
        dregex = self._regex_append(dregex, dlist)
        dlist = self._regex_filter(dregex, self.lnms.keys())
        # complete names (if necessary) in the vmlist
        vmlist = self._namecomplete(vmlist, cluster, eid)
        # check that the vms specified don't already exist
self._check_vmlist(vmlist, isin=True)
        vmlist = self._get_vm_names_to_start(vmlist, cluster, prefix,
vmrange, eid)
        # controller handles eid from kw, so add it
        if eid:
            kw['eid'] = eid
        if dryrun:
            d = UsherResult('dryrun', msg = 'started:' + linesep +
                    linesep.join(vmlist))
            return d
        try:
            if vmlist:
                d = self.aref.callRemote("start", vmlist, dlist, **kw)
                d.addErrback(self._handle_err, misc.whoami())
            else:
                raise UsherInvalidInputEx( "No VMs started.  No unique VMs
specified in command")
            return d
        except pb.DeadReferenceError, ex: raise UsherPBDeadRefEx

in my script I have to use connect method and then I have to do some
operations first of calling the start method
1) start connection

    def startConnection(self):
        d = my_api.connect(self.ctrl_ip, self.ctrl_port, self.user,
self.pwd)
        d.addCallback(self.postConnection)
        d.addErrback(twisted.python.log.err)
        print "Connection added"
        return d
2) operation before starting a virtual machine:
def newVMCfg(self, new_vms_cfg):
       #...
       #some operations
       #if condition valid I try to start the virtual machine
                        # is this the correct way to pass args to the start
method?
                        d = self.d.addCallback(self.startVM,(new_vm,
self.lnms[i])
                        print "started vm %s"%new_vm
        return d

in the main process I call them as:
d = startConnection()
d.addCallback(newVMCfg, arg)

Is it correct? Because the process stops at the first method called: I see
only "connection added".
Thank you for your help!!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090511/cdc0700d/attachment.html>

From exarkun at divmod.com  Mon May 11 12:01:21 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 11 May 2009 14:01:21 -0400
Subject: [Twisted-Python] help using deferred
In-Reply-To: <9cce290a0905111049j693150deye98c0129a977f070@mail.gmail.com>
Message-ID: <20090511180121.21531.832920012.divmod.quotient.19615@henry.divmod.com>

On Mon, 11 May 2009 19:49:19 +0200, Luigi Conte <luigiandcosolutions at gmail.com> wrote:
>
> [snip]
>in my script I have to use connect method and then I have to do some
>operations first of calling the start method
>1) start connection
>
>    def startConnection(self):
>        d = my_api.connect(self.ctrl_ip, self.ctrl_port, self.user,
>self.pwd)
>        d.addCallback(self.postConnection)

Since you omitted the definition of postConnection, I have no way to know
what this does.

>        d.addErrback(twisted.python.log.err)

Regardless, this is the wrong place to insert this errback.  You should read
the Deferred documentation to learn what consequence it will have on your
program's flow.

http://twistedmatrix.com/projects/core/documentation/howto/defer.html is
probably a good place to start.

>        print "Connection added"
>        return d
>2) operation before starting a virtual machine:
>def newVMCfg(self, new_vms_cfg):
>       #...
>       #some operations
>       #if condition valid I try to start the virtual machine
>                        # is this the correct way to pass args to the start
>method?
>                        d = self.d.addCallback(self.startVM,(new_vm,
>self.lnms[i])
>                        print "started vm %s"%new_vm
>        return d
>
>in the main process I call them as:
>d = startConnection()
>d.addCallback(newVMCfg, arg)
>
>Is it correct? Because the process stops at the first method called: I see
>only "connection added".

That should indicate to you that something is going wrong after that print
statement is reached.  So examine what your program tries to do after that
point.  You may want to use a debugger.  You may want to try writing some
unit tests.

Jean-Paul



From drew.smathers at gmail.com  Mon May 11 17:11:22 2009
From: drew.smathers at gmail.com (Drew Smathers)
Date: Mon, 11 May 2009 19:11:22 -0400
Subject: [Twisted-Python] Another approach to allowing __init__ to work
	with Deferreds
In-Reply-To: <18952.20484.534748.921408@jon.es>
References: <18952.20484.534748.921408@jon.es>
Message-ID: <368574aa0905111611w25fb29d3j84d2b49f34496565@mail.gmail.com>

On Mon, May 11, 2009 at 12:19 PM, Terry Jones <terry.jones at gmail.com> wrote:
> I posted to this list back in Nov 2008 with subject:
> A Python metaclass for Twisted allowing __init__ to return a Deferred
>
> Briefly, I was trying to find a nice way to allow the __init__ method of a
> class to work with deferreds in such a way that methods of the class could
> use work done by __init__ safe in the knowledge that the deferreds had
> completed.  E.g., if you have
>
>    class X(object):
>        def __init__(self, host, port):
>            def final(connection):
>                self.db = connection
>            d = makeDBConnection(host, port)
>            d.addCallback(final)
>
>        def query(self, q):
>            return self.db.runQuery(q)
>
> Then when you make an X and call query on it, there's a chance the deferred
> wont have fired, and you'll get an error.  This is just a very simple
> illustrative example.  There are many more, and this is a general problem
> of the synchronous world (in which __init__ is supposed to prepare a
> fully-fledged class instance and cannot return a deferred) meeting the
> asynchronous world in which we would like to (and must) use deferreds.
>
> The earlier thread:
>
>  http://twistedmatrix.com/pipermail/twisted-python/2008-November/018600.html
>
> Although I learned a lot in that thread, I wasn't completely happy with any
> of the solutions. Some of the things that still bugged me are in posts
> towards the end of the thread:
>
>  http://twistedmatrix.com/pipermail/twisted-python/2008-November/018624.html
>  http://twistedmatrix.com/pipermail/twisted-python/2008-November/018634.html
>
> The various approaches we took back then all boiled down to waiting for a
> deferred to fire before the class instance was fully ready to use. When
> that happened, you had your instance and could call its methods.
>
> I had also thought about an alternate approach: having __init__ add a
> callback to the deferreds it dealt with to set a flag in self and then have
> all dependent methods check that flag to see if the class instance was
> ready for use. But that 1) is ugly (too much extra code); 2) means the
> caller has to be prepared to deal with errors due to the class instance not
> being ready, and 3) adds a check to every method call. It would look
> something like this:
>
>    class X(object):
>        def __init__(self, host, port):
>            self.ready = False
>            def final(connection):
>                self.db = connection
>                self.ready = True
>            d = makeDBConnection(host, port)
>            d.addCallback(final)
>
>        def query(self, q):
>            if not self.ready:
>                raise IAmNotReadyException()
>            return self.db.runQuery(q)
>
> That was too ugly for my taste, for all of the above reasons, most
> especially for forcing the unfortunate caller of my code to handle
> IAmNotReadyException.
>
>
> Anyway.... fast forward 6 months and I've hit the same problem again. It's
> with existing code, in which I would like an __init__ to call something
> that (now, due to changes elsewhere) returns a deferred. So I started
> thinking again, and came up with a much cleaner way to do the alternate
> approach via a class mixin:
>
>    from twisted.internet import defer
>
>    class deferredInitMixin(object):
>        def wrap(self, d, *wrappedMethods):
>            self.waiting = []
>            self.stored = {}
>
>            def restore(_):
>                for method in self.stored:
>                    setattr(self, method, self.stored[method])
>                for d in self.waiting:
>                    d.callback(None)
>
>            def makeWrapper(method):
>                def wrapper(*args, **kw):
>                    d = defer.Deferred()
>                    d.addCallback(lambda _: self.stored[method](*args, **kw))
>                    self.waiting.append(d)
>                    return d
>                return wrapper
>
>            for method in wrappedMethods:
>                self.stored[method] = getattr(self, method)
>                setattr(self, method, makeWrapper(method))
>
>            d.addCallback(restore)
>
>
> You use it as in the class Test below:
>
>    from twisted.internet import defer, reactor
>
>    def fire(d, value):
>        print "I finally fired, with value", value
>        d.callback(value)
>
>    def late(value):
>        d = defer.Deferred()
>        reactor.callLater(1, fire, d, value)
>        return d
>
>    def called(result, what):
>        print 'final callback of %s, result = %s' % (what, result)
>
>    def stop(_):
>        reactor.stop()
>
>
>    class Test(deferredInitMixin):
>        def __init__(self):
>            d = late('Test')
>            deferredInitMixin.wrap(self, d, 'f1', 'f2')
>
>        def f1(self, arg):
>            print "f1 called with", arg
>            return late(arg)
>
>        def f2(self, arg):
>            print "f2 called with", arg
>            return late(arg)
>
>
>    if __name__ == '__main__':
>        t = Test()
>        d1 = t.f1(44)
>        d1.addCallback(called, 'f1')
>        d2 = t.f1(33)
>        d2.addCallback(called, 'f1')
>        d3 = t.f2(11)
>        d3.addCallback(called, 'f2')
>        d = defer.DeferredList([d1, d2, d3])
>        d.addBoth(stop)
>        reactor.run()
>
>
> Effectively, the __init__ of my Test class asks deferredInitMixin to wrap
> some of its methods. deferredInitMixin stores the original methods away and
> replaces each of them with a function that immediately returns a deferred.
> So after __init__ finishes, code that calls the now-wrapped methods of the
> class instance before the deferred has fired will get a deferred back as
> usual (but see * below). As far as they know, everything is normal.  Behind
> the scenes, deferredInitMixin has arranged for these deferreds to fire only
> after the deferred passed from __init__ has fired.  Once that happens,
> deferredInitMixin also restores the original functions to the instance. As
> a result there is no overhead later to check a flag to see if the instance
> is ready to use. If the deferred from __init__ happens to fire before any
> of the instance's methods are called, it will simply restore the original
> methods.  Finally (obviously?) you only pass the method names to
> deferredInitMixin that depend on the deferred in __init__ being done.
>
> BTW, calling the methods passed to deferredInitMixin "wrapped" isn't really
> accurate. They're just temporarily replaced.
>
>
> I quite like this approach.  It's a second example of something I did in
> http://twistedmatrix.com/pipermail/twisted-python/2009-April/019522.html in
> which a pool of deferreds is accumulated and they're all fired when another
> deferred fires. It's nice because you don't reply with an error and there's
> no need for locking or other form of coordination - the work you need done
> is already in progress, so you get back a fresh deferred and everything
> goes swimmingly.
>
> * Minor note: the methods you wrap should probably be ones that already
> return deferreds. That way you always get a deferred back from them,
> whether they're temporarily wrapped or not. The above mixin works just fine
> if you ask it to wrap non-deferred-returning functions, but you have to
> deal with the possibility that they will return a deferred (i.e., if you
> call them while they're wrapped).
>
> Comments welcome / wanted.
>
> Terry
>

Somewhere, someplace something has to get a reference to the object
and it seems to me you're trying to prevent that something from
calling methods on the instance of the object before it's ready.  So
why not just defer providing the reference instead of wrapping methods
and intercepting calls?  To illustrate, here's a simple modification
of your example--assuming that `deferred' is an attribute on Things
set in __int__()--that would achieve this without any special mixins:

def theThingThatGetsTheReference(t):
    d1 = t. f1(44)
    d1.addCallback(called, 'f1')
    d2 = t.f1(33)
    d2.addCallback(called, 'f1')
    d3 = t.f2(11)
    d3.addCallback(called, 'f2')
    d = defer.DeferredList([d1, d2, d3])
    d.addBoth(stop)

if __name__ == '__main__':
    t = Thing()
    t.deferred.addCallback(lambda ign: theThingThatGetTheReference(t))
    reactor.run()

-Drew



From glyph at divmod.com  Mon May 11 20:07:11 2009
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 12 May 2009 02:07:11 -0000
Subject: [Twisted-Python] XMPP/Jabber server example
In-Reply-To: <812f32000905110916p36cb564fic5ad31e21e5298c9@mail.gmail.com>
References: <812f32000905110916p36cb564fic5ad31e21e5298c9@mail.gmail.com>
Message-ID: <20090512020711.12555.543742607.divmod.xquotient.11154@weber.divmod.com>


On 11 May, 04:16 pm, powdahound at gmail.com wrote:
>I'm trying to create an XMPP server using twisted.words and am having
>difficulty finding the correct way to make use of the classes provided. 
>I
>was hoping someone might have an example or short explanation of which
>classes would be used to create a very basic server (using the latest
>classes<http://twistedmatrix.com/documents/8.2.0/api/twisted.words.protocols.jabber.xmlstream.html>from
>8.2.0).

I'm not confident of my own knowledge of twisted.words.*xmpp* to provide 
you an accurate answer.  I assume you've looked at doc/words/examples/ 
and there's nothing up to date.  If so, this is a doc bug that needs to 
be reported - please file it on twistedmatrix.com.
>(snip some great questions)

Can you itemize these questions on the ticket so that we can make sure 
they're all answered for future comers?
>Is there still work being done on the goals listed at
>http://twistedmatrix.com/trac/wiki/XMPPServerArchitecture?

Yes, but very slowly.  Please help out, submit patches and so on!  A 
useful bit of work would be to trawl around through the bugtracker and 
add links from that page to tickets describing individual bits of work 
and vice versa.  And perhaps to file tickets describing the bits of work 
which aren't described as tickets yet :).

A good example of what I mean is this page:

    http://twistedmatrix.com/trac/wiki/ReleaseAutomation
>Thanks! Really enjoying Twisted so far.

Thank you!



From terry.jones at gmail.com  Mon May 11 22:28:42 2009
From: terry.jones at gmail.com (Terry Jones)
Date: Tue, 12 May 2009 06:28:42 +0200
Subject: [Twisted-Python] Another approach to allowing __init__ to
	work	with Deferreds
In-Reply-To: Your message at 19:11:22 on Monday, 11 May 2009
References: <18952.20484.534748.921408@jon.es>
	<368574aa0905111611w25fb29d3j84d2b49f34496565@mail.gmail.com>
Message-ID: <18952.64250.10714.723759@jon.es>

Hi Drew. Thanks for the reply.

>>>>> "Drew" == Drew Smathers <drew.smathers at gmail.com> writes:

Drew> Somewhere, someplace something has to get a reference to the object
Drew> and it seems to me you're trying to prevent that something from
Drew> calling methods on the instance of the object before it's ready.  So
Drew> why not just defer providing the reference instead of wrapping
Drew> methods and intercepting calls?  To illustrate, here's a simple
Drew> modification of your example--assuming that `deferred' is an
Drew> attribute on Things set in __int__()--that would achieve this without
Drew> any special mixins:

Drew> def theThingThatGetsTheReference(t):
Drew>     d1 = t. f1(44)
[snip]
Drew> if __name__ == '__main__':
Drew> t = Thing()
Drew> t.deferred.addCallback(lambda ign: theThingThatGetTheReference(t))

I hadn't thought about doing it that way. It's in the first category of
approaches: making the instance available when the deferred fires. Several
approaches with the same flavor are in the original thread.  I agree your
way is simpler, but I like it less:

 - The class is now special, in the sense that a caller can't just treat it
   as a normal class and call its instance methods. You need to know this
   before using the class...

 - If you don't, it's nevertheless possible to call instance methods
   directly (without waiting on the deferred).  The solutions in the
   original thread did not allow this. They guaranteed that the deferred
   had fired via a metaclass, via using __new__, or via using a classmethod
   to call __init__.

 - It puts the extra work of getting a properly initialized instance onto
   the caller. This may seem like a trivial concern, but I'd rather my
   classes looked/behaved like regular Python classes if possible: i.e.,
   get an instance, immediately use it.

If I'd thought of your approach initially, I almost certainly would have
gone with it and not spent time trying to dream up more elaborate
solutions.  Thanks again for replying. It's good to get a reply at all,
and, as usual, I've learned something.

Terry



From terry.jones at gmail.com  Tue May 12 01:18:51 2009
From: terry.jones at gmail.com (Terry Jones)
Date: Tue, 12 May 2009 09:18:51 +0200
Subject: [Twisted-Python] Another approach to allowing __init__ to
	work	with Deferreds
In-Reply-To: Your message at 19:11:22 on Monday, 11 May 2009
References: <18952.20484.534748.921408@jon.es>
	<368574aa0905111611w25fb29d3j84d2b49f34496565@mail.gmail.com>
Message-ID: <18953.8923.433141.203476@jon.es>

Hi again Drew

I realized I could have added another reason why I like my approach (for my
current situation):

I'm changing an existing (i.e., deployed) class so that its __init__ calls
something returning a deferred which some instance methods of my class rely
on having fired. I already have other code that uses my class, and that
code is all written to use my class in the regular way. I could go change
all those calls, but that gets me into a further mess as some of those
calls are in the __init__ methods of still other classes... So I'd have to
go change all the uses of those classes too.

This part of my preference for my solution is due to having the class
already deployed. It's not really part of the core problem, just my
particular situation.

Terry



From glyph at divmod.com  Tue May 12 01:50:20 2009
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 12 May 2009 07:50:20 -0000
Subject: [Twisted-Python] Consistent interfaces to asynchronous
	partially-available services	using	Deferreds and state
	machines (was Re: Another approach to allowing	__init__ to
	work with Deferreds)
In-Reply-To: <18952.20484.534748.921408@jon.es>
References: <18952.20484.534748.921408@jon.es>
Message-ID: <20090512075020.12555.1526761106.divmod.xquotient.11469@weber.divmod.com>


On 11 May, 04:19 pm, terry.jones at gmail.com wrote:
>I posted to this list back in Nov 2008 with subject:
>A Python metaclass for Twisted allowing __init__ to return a Deferred

Let me try rephrasing your use-case here, for two reasons: one, I want 
to make sure I fully understand it, and two, I feel like the language 
this is couched in (hacks about __init__ and Deferreds and 
metaclass/mixin/decorator [ab]use) are detracting from the real core 
use-case here.  I think I've experienced the problem you're experiencing 
a number of times, I've just never tried to solve it the way you're 
describing :).

You have a utility object which you want to create immediately and make 
immediately available to various pieces of calling code.  However, an 
instance of this class represents a shared interface to an external, 
asynchronous resource, to which you must establish a connection, and so 
you don't immediately have a connection when the class is created.

However, you want to contain all this complexity behind a nice facade, 
and tell all the callers "just call these (Deferred-returning) methods 
and you will get sensible results no matter what state the connection is 
in".

If my assessment of your use-case is flawed, please say so - but 
regardless, I think the problem I'm describing is a pretty common one in 
the Twisted universe.  I'm going to write up some thoughts and critique 
your approach in that context even if I might not be responding to your 
requirements exactly, since I think it will possibly be helpful to 
others anyway.

To skip ahead to the end: the answer is that you want a state-machine. 
And it is quite sad to me that Twisted doesn't have a nice, standard, 
full-featured state-machine class that we use for everything like this, 
because members of the Twisted team have implemented at least half a 
dozen of these, probably a lot more, in various applications.  I am like 
90% sure that there's a ticket in the tracker for this, but I couldn't 
find it by searching around a bit.  I hope exarkun or jml or radix will 
have a better memory of this than I do.
>The various approaches we took back then all boiled down to waiting for 
>a
>deferred to fire before the class instance was fully ready to use. When
>that happened, you had your instance and could call its methods.

... and obviously, in the context I'm presenting, that is bad, because 
we don't want partially-initialized instances of the class floating 
around.

The main thrust of most of the counter-proposals (especially mine) was 
actually that the partially-initialized class should *not* be available 
to any calling code until it was fully-initialized; calling code should 
only have gotten a reference to the Deferred.

IMHO the thing that Drew suggests where you create an instance, then add 
callbacks to a Deferred *on* that instance before you start using that 
instance, is a bit of a Twisted antipattern.  For one thing, you can 
easily lose track of the contract of the Deferred; you don't really know 
what your callback is going to be getting if multiple callers access 
that attribute at different times, and for another, it's sort of the 
async equivalent of

    f = Foo()
    f.noOkayReallyInitializeIt()
    f.doSomething()

whereas what I was trying to suggest in the previous thread is more 
like:

    f = Foo.giveMeAFullyInitializedFoo()
    f.doSomething()

where giveMeAFullyInitializedFoo() looks like:

    @classmethod
    def giveMeAFullyInitializedFoo(cls):
        self = cls()
        self._noOkayReallyInitializeIt()
        # note that was private!  let's not expose implementation 
details!
        return self

But, although I still think this is generally good practice, it doesn't 
solve the underlying problem I think you're really getting at: 
consistency and convenience in the face of Deferred-ness.  Applications 
have to handle Deferreds from the connection's methods anyway, and 
there's no reason to force them to all have code to handle at least two 
(one for the connection, one for the actual application-level message), 
where one would do fine.

(In fact, when you look at it like that, it's not really a problem about 
Deferreds at all: this would be a problem if applications all had to 
blockingly call maybeConnectIfYoureNotConnectedYet() themselves and 
properly handle all the errors it might produce.)
>Anyway.... fast forward 6 months and I've hit the same problem again. 
>It's
>with existing code, in which I would like an __init__ to call something
>that (now, due to changes elsewhere) returns a deferred. So I started
>thinking again, and came up with a much cleaner way to do the alternate
>approach via a class mixin:

I think I like this a bit better than your earlier approaches.  It's 
automatic, its semantics are pretty clear, and it doesn't require any 
abuse of __init__'s implicit contract; your instance *is* in a fully 
valid state when it's created, it's just a different state than the 
state that it's in later.  However, you can still call all the same 
methods and get the same results.

It still has one major flaw given your earlier example of a database 
connection (as I described above): it doesn't handle errors very well.

In particular - and this is why you really need a state machine - it 
doesn't handle the case where errors start happening *later*.

It's also got a few implementation issues that you might not be aware of 
though - and you seem to appreciate a lot of detail in these responses, 
so I'll just look at it line by line, code-review style.

I apologize in advance if this sounds like I'm being hypercritical - I 
realize you may have omitted certain details to keep this brief for 
discussion and so may have been aware of most of these problems.  Again, 
even if you fully understood all of these details I am sure there are 
many readers who didn't though :).
>    from twisted.internet import defer
>
>    class deferredInitMixin(object):
>        def wrap(self, d, *wrappedMethods):

Just as a point of convenience, I would have automatically determined 
this list of method names by using a decorator or something.  Having it 
as a static list in the method invocation seems to me like it would be 
very easy to forget to add or remove a method from the list, and it 
would make diffs that touched a user of this class always have two hunks 
for adding a method; one at the method definition site, one at the call 
to wrap().

Also, it's not really clear to me how cooperative invocations of wrap() 
are meant to work with inheritance.  Using a decorator on methods which 
were intended to be deferred wouldn't fully solve that problem (you've 
still got to sort out what order methods get restored in, or if there 
are multiple calls to wrap() in different places in the inheritance tree 
which methods go with which Deferreds) but it would at least provide a 
convenient starting place to put that information.
>            self.waiting = []
>            self.stored = {}

I'd make these attributes private if I were you.  I am pretty sure that 
you don't ever want application code poking around in there :).
>            def restore(_):
>                for method in self.stored:
>                    setattr(self, method, self.stored[method])

The reference you're cleaning up here has some edge-cases.  For example, 
if some other code comes along and grabs what it thinks is a regular 
bound method from your instance, and then invokes it after the Deferred 
has completed, it will still have the original method.

Because of this, and issues like it, it's often better to have a 
decorator which works more like a regular method, and changes the 
behavior of the method rather than dynamically replacing the method on 
the instance.

There are also some less severe, but potentially very confusing issues 
with making every instance of your class always participate in a 
bazillion circular references.  By itself, this isn't really worth 
worrying about (Python added a garbage collector for a reason, after 
all) but it has historically been problematic in areas like making 
debugging memory leaks tricky.  Especially when the circular references 
run through stack frames which refer to Deferreds :).  So if you do 
dynamically replace a method on a class, it's better to clean it up with 
delattr() than a subsequent setattr().
>                for d in self.waiting:
>                    d.callback(None)
>
>            def makeWrapper(method):
>                def wrapper(*args, **kw):
>                    d = defer.Deferred()
>                    d.addCallback(lambda _: self.stored[method](*args, 
>**kw))
>                    self.waiting.append(d)
>                    return d
>                return wrapper

This wrapper doesn't preserve function metadata, so repr()s are going to 
look weird and certain kinds of introspection will break.  Granted, you 
probably don't care about pickling this class, but again, it makes 
debugging tricky when it looks like every method you're calling 
everywhere is actually called 'wrapper'. 
twisted.python.util.mergeFunctionMetadata has an implementation of the 
dance required to do this (and I think some other decorator libraries 
have cuter / easier to use implementations of the same thing, this 
problem is not unique to Twisted).
>            for method in wrappedMethods:
>                self.stored[method] = getattr(self, method)
>                setattr(self, method, makeWrapper(method))

>            d.addCallback(restore)

Here, on the final line, we come to the more serious problem of this 
approach: there's no error handling.  If the underlying Deferred 
encounters an errback, then all methods of this class will forever 
return Deferreds that never fire.

Of course you could chalk up a failed connect Deferred to a failed 
startup and just reboot the process, but that pollutes your callers with 
knowledge of whether they're calling methods during startup.  More 
importantly and realistically though - there's something that happens 
*later* which is never covered.  What happens when we *lose* the 
connection to the database?  Assuming a sensible underlying interface, 
everybody starts getting errbacked Deferreds, but in most systems like 
this you want some recovery facility.  And then you're not talking about 
just interesting behavior of __init__, but potentially of every method 
on the entire class.

As I mentioned above, we've implemented this mechanism in other 
projects.  One of them is Axiom.  Axiom has a batch-processing service 
which is a process pool that starts on demand, and tries to present a 
consistent interface to its callers regardless of what state the actual 
processes are in.  (This was written in no small part because we were 
using libraries which were flaky and unreliable and wanted to isolate 
their usage behind a nice facade which wouldn't freak out if they 
segfaulted.)

You can see a usage of our library here, which I believe meshes with 
your use-case:

http://divmod.org/trac/browser/trunk/Axiom/axiom/batch.py?rev=15165#L709

What you see there is a "mode" being defined - i.e. custom behavior of a 
set of methods - for the "starting" state.  You'll notice there's a 
"waitingForProcess" list, which implements a similar pattern to the one 
you described above.  And you can see a detailed description of all the 
states in the docstring:

http://divmod.org/trac/browser/trunk/Axiom/axiom/batch.py?rev=15165#L709

The library being used is here:

http://divmod.org/trac/browser/trunk/Epsilon/epsilon/modal.py?rev=6111

and since the batch-processor example is pretty involved and is doing a 
ton of other stuff, it behooves me to provide a simplified example which 
demonstrates how the simplest example of this pattern might be 
implemented.  I was originally going to include it inline here, but it 
turned out to be >100 lines of code to get the whole idea across, so I 
put it up here:

    http://divmod.org/trac/browser/sandbox/glyph/modality.py?rev=17275

This is still missing a lot of details, like for example handling truly 
failed connections (i.e. invalid credentials), timeouts and backoff, 
redirects, etc.  Still, I hope it's somewhat obvious how you would add 
additional methods beyond "bork()" to that example.

It would be possible, I think, to implement a layer on top of 
epsilon.modal which would provide this pattern exactly so that you just 
need to plug in your retransmission and connection rules rather than 
doing it for every different application and protocol; that would be 
really cool.

epsilon.modal is missing a few useful features, and has a few bugs.  I'm 
hoping that by drawing attention to it we can get some contributions 
from people who are enthusiastic about abstractions like this (hi, 
Terry! ;-)) and perhaps get it folded into Twisted proper, where we 
might be able to use it to eliminate some duplication in places like 
twisted.protocols.basic, since protocol parsing is also a state-machine 
based thing.
>You use it as in the class Test below:

(snipped example usage since I think that was all pretty clear)
>I quite like this approach. (...) It's nice because you don't reply 
>with an error and there's
>no need for locking or other form of coordination - the work you need 
>done
>is already in progress, so you get back a fresh deferred and everything
>goes swimmingly.

IMHO this is a very important property.  The high-level abstract API 
should really have fewer failure modes and differing states for its 
callers to know about than the lower-level one - really that's the whole 
point :-).
>Comments welcome / wanted.

Enough comments for you? ;-)



From terry at jon.es  Tue May 12 05:39:21 2009
From: terry at jon.es (Terry Jones)
Date: Tue, 12 May 2009 13:39:21 +0200
Subject: [Twisted-Python] Consistent interfaces to
	asynchronous	partially-available services	using	Deferreds and
	state	machines (was Re: Another approach to allowing	__init__
	to	work with Deferreds)
In-Reply-To: Your message at 07:50:20 on Tuesday, 12 May 2009
References: <18952.20484.534748.921408@jon.es>
	<20090512075020.12555.1526761106.divmod.xquotient.11469@weber.divmod.com>
Message-ID: <18953.24553.54020.283769@jon.es>

Hi Glyph

>>>>> "glyph" == glyph  <glyph at divmod.com> writes:
> On 11 May, 04:19 pm, terry.jones at gmail.com wrote:
> 
> >I posted to this list back in Nov 2008 with subject:
> >A Python metaclass for Twisted allowing __init__ to return a Deferred
> 
> Let me try rephrasing your use-case here, for two reasons: one, I want to
> make sure I fully understand it, and two, I feel like the language this is
> couched in (hacks about __init__ and Deferreds and
> metaclass/mixin/decorator [ab]use) are detracting from the real core
> use-case here.

OK, fair enough. I'm happy to work upwards from my concrete problems to a
solution to a more general problem.

> You have a utility object which you want to create immediately and make
> immediately available to various pieces of calling code.  However, an
> instance of this class represents a shared interface to an external,
> asynchronous resource, to which you must establish a connection, and so
> you don't immediately have a connection when the class is created.

Yes, though I don't know why you use the word "shared". Perhaps because a
created instance might be passed to several other pieces of code that all
use it?

> However, you want to contain all this complexity behind a nice facade,
> and tell all the callers "just call these (Deferred-returning) methods
> and you will get sensible results no matter what state the connection is
> in".

Yes.

And as I mentioned in my later mail to Drew, a nice property of keeping the
complexity behind the interface is that when a vanilla class that is being
used in the manner you describe, is changed from being reliably in a single
state to having multiple states, the caller is not aware of that and does
not have to change how it instantiates or uses instances of the class.

> If my assessment of your use-case is flawed, please say so

Nope, that's about perfect.

> To skip ahead to the end: the answer is that you want a state-machine.
> And it is quite sad to me that Twisted doesn't have a nice, standard,
> full-featured state-machine class that we use for everything like this,
> because members of the Twisted team have implemented at least half a
> dozen of these, probably a lot more, in various applications.  I am like
> 90% sure that there's a ticket in the tracker for this, but I couldn't
> find it by searching around a bit.  I hope exarkun or jml or radix will
> have a better memory of this than I do.

I'll be interested to hear.

I've omitted a big chunk of your reply here - that I agree with and which
recaps what went down in the original thread and comments on Drew's
suggestion.

> But, although I still think this is generally good practice, it doesn't
> solve the underlying problem I think you're really getting at:
> consistency and convenience in the face of Deferred-ness.

I still like your approach (using a class method to hand you a fully
initialized instance), but didn't find it appropriate for my situation. The
main problem was that I was writing code in an __init__ method of a class
that was already in use by other code, including being called from the
__init__ method of other classes. Your solution is fine if you're in a
context where you can properly deal with deferreds. If you're not (e.g.,
you're in an __init__ method) then calling something that creates you an
instance of another class via a deferred just leaves you with the same
problem. I hope that's making sense.

Is the underlying problem "consistency and convenience in the face of
Deferred-ness"? You could look at it that way (and I'm happy to). My
__init__ case seems to be well summarized by my original comment:

    this is a general problem of the synchronous world (in which __init__
    is supposed to prepare a fully-fledged class instance and cannot return
    a deferred) meeting the asynchronous world in which we would like to
    (and must) use deferreds.

If Python allowed me to return a deferred from __init__, my problem would
vanish.  That's not going to happen though, I know :-)

Yours would remain though, and as you say, it's more general.

> Applications have to handle Deferreds from the connection's methods
> anyway, and there's no reason to force them to all have code to handle at
> least two (one for the connection, one for the actual application-level
> message), where one would do fine.

I'm not 100% sure that I follow this, but I think so.

> >Anyway.... fast forward 6 months and I've hit the same problem again.
> >It's with existing code, in which I would like an __init__ to call
> >something that (now, due to changes elsewhere) returns a deferred. So I
> >started thinking again, and came up with a much cleaner way to do the
> >alternate approach via a class mixin:
> 
> I think I like this a bit better than your earlier approaches.  It's
> automatic, its semantics are pretty clear, and it doesn't require any abuse
> of __init__'s implicit contract; your instance *is* in a fully valid state
> when it's created, it's just a different state than the state that it's in
> later.  However, you can still call all the same methods and get the same
> results.

Yes, those are the advantages. And the different state will, in most use
cases (I claim), be quite fleeting. It's that short-term not-quite-ready
window that the temporary state accounts for. And if the not-quite-ready
happens to not be short, then providing functionality like this (not
necessarily my implementation) is even more important.

I mention all this, for clarity, not for you - I know you already know -
but for others who might be reading along now or later.

> It still has one major flaw given your earlier example of a database
> connection (as I described above): it doesn't handle errors very well.

Right.

> In particular - and this is why you really need a state machine - it
> doesn't handle the case where errors start happening *later*.

OK, more on this below.

> It's also got a few implementation issues that you might not be aware of
> though - and you seem to appreciate a lot of detail in these responses,
> so I'll just look at it line by line, code-review style.

Yes, that's great, and thanks.

> I apologize in advance if this sounds like I'm being hypercritical - I
> realize you may have omitted certain details to keep this brief for
> discussion and so may have been aware of most of these problems.  Again,
> even if you fully understood all of these details I am sure there are
> many readers who didn't though :)

Some I'm aware of and skipped, others not.  I never know how much detail to
provide / go into, or if I'm bugging people on the list, etc.

> >    from twisted.internet import defer
> >
> >    class deferredInitMixin(object):
> >        def wrap(self, d, *wrappedMethods):
> 
> Just as a point of convenience, I would have automatically determined this
> list of method names by using a decorator or something.  Having it as a
> static list in the method invocation seems to me like it would be very easy
> to forget to add or remove a method from the list, and it would make diffs
> that touched a user of this class always have two hunks for adding a
> method; one at the method definition site, one at the call to wrap().

I started out trying to write this using decorators. But I didn't really
see how to do it. I was using two - one for __init__ and one for the
wrapped functions. I also tried with decorators and a super class. In the
end I saw a simple way to do it with the mixin, so went for that. I'd be
happier with a decorator solution for the reasons you mention.

> Also, it's not really clear to me how cooperative invocations of wrap() are
> meant to work with inheritance.  Using a decorator on methods which were
> intended to be deferred wouldn't fully solve that problem (you've still got
> to sort out what order methods get restored in, or if there are multiple
> calls to wrap() in different places in the inheritance tree which methods
> go with which Deferreds) but it would at least provide a convenient
> starting place to put that information.

Yes....

> >            self.waiting = []
> >            self.stored = {}
> 
> I'd make these attributes private if I were you.  I am pretty sure that
> you don't ever want application code poking around in there :).

Right. A bad habit of mine. I did at least think of this afterwards :-)

> >            def restore(_):
> >                for method in self.stored:
> >                    setattr(self, method, self.stored[method])
> 
> The reference you're cleaning up here has some edge-cases.  For example,
> if some other code comes along and grabs what it thinks is a regular
> bound method from your instance, and then invokes it after the Deferred
> has completed, it will still have the original method.

You mean it will still have the wrapped method, I think. Agreed that's a
problem. I was originally going to look at d.called in the mixin class to
short-circuit the wrapped behavior if the deferred had fired. I should do
something like that, else the deferred from the wrapper will never fire -
which is what I think you're saying.

> There are also some less severe, but potentially very confusing issues
> with making every instance of your class always participate in a
> bazillion circular references.

I don't think I fully understand this. The instance of my class only has
wrapped functions for a (typically?) very short time. I don't see the
circular references, but OTOH I haven't thought about that at all...

> By itself, this isn't really worth worrying about (Python added a garbage
> collector for a reason, after all) but it has historically been
> problematic in areas like making debugging memory leaks tricky.
> Especially when the circular references run through stack frames which
> refer to Deferreds :).  So if you do dynamically replace a method on a
> class, it's better to clean it up with delattr() than a subsequent
> setattr().

You mean "then" a subsequent setattr, right?

And thanks, I didn't know that at all.

> This wrapper doesn't preserve function metadata

Right - that was something I deliberately left out. I've even used
t.p.u.mergeFunctionMetadata in the past :-)

> I think some other decorator libraries have cuter / easier to use
> implementations of the same thing, this problem is not unique to
> Twisted).

There's also functools.update_wrapper

> >            d.addCallback(restore)
> 
> Here, on the final line, we come to the more serious problem of this
> approach: there's no error handling.  If the underlying Deferred
> encounters an errback, then all methods of this class will forever return
> Deferreds that never fire.

Ah yes :-)

Side note: I recently escaped from a fundamentalist religious organization
amongst whose axioms are "There Are No Accidents", and "Everything Happens
For A Reason". Accordingly, they code in a version of Python that doesn't
even have exceptions, and use a fork of Twisted in which deferreds don't
have an errback chain.

Ahem. You're right. At the very least I should add an errback that errbacks
the waiting calls, probably restores the methods, and returns the failure.
That's not a full solution, but it's better.

> Of course you could chalk up a failed connect Deferred to a failed
> startup and just reboot the process, but that pollutes your callers with
> knowledge of whether they're calling methods during startup.

Yes. There's also the question of what failure to pass to them, suppose I
do errback them (which I think I should).

> More importantly and realistically though - there's something that
> happens *later* which is never covered.  What happens when we *lose* the
> connection to the database?  Assuming a sensible underlying interface,
> everybody starts getting errbacked Deferreds, but in most systems like
> this you want some recovery facility.  And then you're not talking about
> just interesting behavior of __init__, but potentially of every method on
> the entire class.

Yes, and now we're into more interesting territory, where your state
machine solution would be nice to have.

> As I mentioned above, we've implemented this mechanism in other projects.
> One of them is Axiom.  Axiom has a batch-processing service which is a
> process pool that starts on demand, and tries to present a consistent
> interface to its callers regardless of what state the actual processes are
> in.  (This was written in no small part because we were using libraries
> which were flaky and unreliable and wanted to isolate their usage behind a
> nice facade which wouldn't freak out if they segfaulted.)
> 
> You can see a usage of our library here, which I believe meshes with your
> use-case:
> 
> http://divmod.org/trac/browser/trunk/Axiom/axiom/batch.py?rev=15165#L709

OK, I'll go check this out. I'd have done it already but commenting on it
here would make this reply even longer.

> I was originally going to include it inline here, but it turned out to be
> >100 lines of code to get the whole idea across, so I put it up here:
> 
>     http://divmod.org/trac/browser/sandbox/glyph/modality.py?rev=17275
> 
> This is still missing a lot of details, like for example handling truly
> failed connections (i.e. invalid credentials), timeouts and backoff,
> redirects, etc.  Still, I hope it's somewhat obvious how you would add
> additional methods beyond "bork()" to that example.

Yes. It looks clean and nice. But I'll have to spend time reading it again
and thinking about it to say more.

> It would be possible, I think, to implement a layer on top of epsilon.modal
> which would provide this pattern exactly so that you just need to plug in
> your retransmission and connection rules rather than doing it for every
> different application and protocol; that would be really cool.

Yeah, I'd use it :-)

> epsilon.modal is missing a few useful features, and has a few bugs.  I'm
> hoping that by drawing attention to it we can get some contributions from
> people who are enthusiastic about abstractions like this (hi, Terry! ;-))

Glyph, hi!

> >I quite like this approach. (...) It's nice because you don't reply with
> >an error and there's no need for locking or other form of coordination -
> >the work you need done is already in progress, so you get back a fresh
> >deferred and everything goes swimmingly.
> 
> IMHO this is a very important property.  The high-level abstract API should
> really have fewer failure modes and differing states for its callers to
> know about than the lower-level one - really that's the whole point :-).

Yes, agreed.

> >Comments welcome / wanted.
> 
> Enough comments for you? ;-)

Yep, and thanks for taking so much time and going into detail. I'll no
doubt continue to think about this. And I'll go look at epsilon.modal.

Terry



From phil at bubblehouse.org  Tue May 12 08:47:38 2009
From: phil at bubblehouse.org (Phil Christensen)
Date: Tue, 12 May 2009 10:47:38 -0400
Subject: [Twisted-Python] Consistent interfaces to
	asynchronous	partially-available services	using	Deferreds and
	state	machines (was Re: Another approach to allowing	__init__
	to	work with Deferreds)
In-Reply-To: <18953.24553.54020.283769@jon.es>
References: <18952.20484.534748.921408@jon.es>
	<20090512075020.12555.1526761106.divmod.xquotient.11469@weber.divmod.com>
	<18953.24553.54020.283769@jon.es>
Message-ID: <C11CC21F-3C40-47EC-AB11-1FCF8BF284D6@bubblehouse.org>

On May 12, 2009, at 7:39 AM, Terry Jones wrote:
>> Just as a point of convenience, I would have automatically  
>> determined this
>> list of method names by using a decorator or something.  Having it  
>> as a
>> static list in the method invocation seems to me like it would be  
>> very easy
>> to forget to add or remove a method from the list, and it would  
>> make diffs
>> that touched a user of this class always have two hunks for adding a
>> method; one at the method definition site, one at the call to wrap().
>
> I started out trying to write this using decorators. But I didn't  
> really
> see how to do it. I was using two - one for __init__ and one for the
> wrapped functions. I also tried with decorators and a super class.  
> In the
> end I saw a simple way to do it with the mixin, so went for that.  
> I'd be
> happier with a decorator solution for the reasons you mention.

I don't know if I agree with the need for such a feature (that is,  
deferred __init__ usage), but it was a very interesting coding  
challenge I wanted to take a whack at. I *think* I might have found a  
solution, but I don't know if it falls under the heading of "decorator  
abuse" ;-)

Basically, it requires that the init method set an instance variable  
bound to a Deferred that will fire when the initialization is  
finished. Then, @deferredInit decorators applied to each instance  
method handle checking for and adding callbacks to that original  
"initDeferred".

This way, any method that depends on "complete instantiation" (which  
is probably most or all of them) can have the decorator applied, and  
will have itself added as a callback to the original initDeferred.

Right now, the name of the Deferred used by __init__ is hard coded,  
but you could easily make the decorator take an argument that  
specifies the name to use.

This appears to work for me, but there's a lot of stuff I'm still  
learning about deferreds, and although I read most of this thread, I  
may have missed a use case that won't work in this manner.

Still, it was a fun challenge ;-)

Let me know what you think:


     from twisted.internet import defer, reactor
     from twisted.enterprise import adbapi

     def deferredInit(func):
         if not(hasattr(deferredInit, 'waiting')):
             deferredInit.waiting = {}

         def _deferredInit(self, *args, **kwargs):
             waiting_for_init = self in deferredInit.waiting

             if not(waiting_for_init):
                 if(hasattr(self, 'initDeferred')):
                     deferredInit.waiting[self] = self.initDeferred
                 else:
                     raise RuntimeError("%s doesn't seem to support  
deferred instantion." % self.__class__.__name__)

             def _finish(result):
                 del deferredInit.waiting[self]
                 return func(self, *args, **kwargs)

             def _finish_error(failure):
                 print '_finish_err: %s' % failure

             resultDeferred = defer.Deferred()
             resultDeferred.addCallbacks(_finish, _finish_error)

              
deferredInit.waiting[self].addCallbacks(resultDeferred.callback,  
resultDeferred.errback)

             return resultDeferred

         return _deferredInit

     class TestDeferredInit(object):
         def __init__(self):
             self.pool = adbapi.ConnectionPool("MySQLdb", 'localhost',  
'test', 'test')
             self.initDeferred = self.pool.runQuery("SELECT 'it  
worked';")
             def _finish_init(msg):
                 self.msg = msg
             def _finish_init_error(failure):
                 print '_finish_init_err: %s' % failure
             self.initDeferred.addCallbacks(_finish_init,  
_finish_init_error)

         @deferredInit
         def query(self):
             return self.msg

     if(__name__ == '__main__'):
         def _print(msg):
             print msg
             reactor.stop()

         def _print_error(failure):
             print '_print_err: %s' % failure

         test = TestDeferredInit()

         d = test.query()
         d.addCallbacks(_print, _print_error)

         reactor.run()



From phil at bubblehouse.org  Tue May 12 08:52:59 2009
From: phil at bubblehouse.org (Phil Christensen)
Date: Tue, 12 May 2009 10:52:59 -0400
Subject: [Twisted-Python] Consistent interfaces to
	asynchronous	partially-available services	using	Deferreds and
	state	machines (was Re: Another approach to allowing	__init__
	to	work with Deferreds)
In-Reply-To: <C11CC21F-3C40-47EC-AB11-1FCF8BF284D6@bubblehouse.org>
References: <18952.20484.534748.921408@jon.es>
	<20090512075020.12555.1526761106.divmod.xquotient.11469@weber.divmod.com>
	<18953.24553.54020.283769@jon.es>
	<C11CC21F-3C40-47EC-AB11-1FCF8BF284D6@bubblehouse.org>
Message-ID: <E8B7D657-B506-49D3-93E8-7AB60F9E9432@bubblehouse.org>

On May 12, 2009, at 10:47 AM, Phil Christensen wrote:
> I don't know if I agree with the need for such a feature (that is,
> deferred __init__ usage), but it was a very interesting coding
> challenge I wanted to take a whack at. I *think* I might have found a
> solution, but I don't know if it falls under the heading of "decorator
> abuse" ;-)

Ugh, that code got fairly mangled by my email client. Here's an  
attachment.

-phil

-------------- next part --------------
A non-text attachment was scrubbed...
Name: init_deferred.py
Type: text/x-python-script
Size: 1874 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20090512/2e96f8d3/attachment-0002.bin>
-------------- next part --------------


From matusis at yahoo.com  Tue May 12 18:32:44 2009
From: matusis at yahoo.com (Alec Matusis)
Date: Tue, 12 May 2009 17:32:44 -0700
Subject: [Twisted-Python] installation error
Message-ID: <052401c9d362$554bda60$ffe38f20$@com>

Installing 8.2.0:

 

creating
/web20/encap/python-2.4.4/lib/python2.4/site-packages/Twisted-8.2.0-py2.4-li
nux-x86_64.egg

Extracting Twisted-8.2.0-py2.4-linux-x86_64.egg to
/web20/encap/python-2.4.4/lib/python2.4/site-packages

  File
"/web20/encap/python-2.4.4/lib/python2.4/site-packages/Twisted-8.2.0-py2.4-l
inux-x86_64.egg/twisted/test/generator_failure_tests.py", line 66

    yield

         ^

SyntaxError: invalid syntax

Adding Twisted 8.2.0 to easy-install.pth file

 

 

I think generator_failure_tests.py expects python 2.5+

Perhaps it should skip this test for python 2.4?

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090512/9178ac46/attachment.html>

From matusis at yahoo.com  Tue May 12 18:45:30 2009
From: matusis at yahoo.com (Alec Matusis)
Date: Tue, 12 May 2009 17:45:30 -0700
Subject: [Twisted-Python] installation error
In-Reply-To: <052401c9d362$554bda60$ffe38f20$@com>
References: <052401c9d362$554bda60$ffe38f20$@com>
Message-ID: <053801c9d364$1e477680$5ad66380$@com>

Sorry never mind: I found that theres a ticket for it, and downloaded a
patch from:

http://twistedmatrix.com/trac/attachment/ticket/3578/compile_error_avoid.pat
ch

From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Alec Matusis
Sent: Tuesday, May 12, 2009 5:33 PM
To: 'Twisted general discussion'
Subject: [Twisted-Python] installation error

Installing 8.2.0:

creating
/web20/encap/python-2.4.4/lib/python2.4/site-packages/Twisted-8.2.0-py2.4-li
nux-x86_64.egg
Extracting Twisted-8.2.0-py2.4-linux-x86_64.egg to
/web20/encap/python-2.4.4/lib/python2.4/site-packages
  File
"/web20/encap/python-2.4.4/lib/python2.4/site-packages/Twisted-8.2.0-py2.4-l
inux-x86_64.egg/twisted/test/generator_failure_tests.py", line 66
    yield
         ^
SyntaxError: invalid syntax
Adding Twisted 8.2.0 to easy-install.pth file


I think generator_failure_tests.py expects python 2.5+
Perhaps it should skip this test for python 2.4?




From lists at collab.nl  Tue May 12 18:46:25 2009
From: lists at collab.nl (Thijs Triemstra | Collab)
Date: Wed, 13 May 2009 01:46:25 +0100
Subject: [Twisted-Python] installation error
In-Reply-To: <052401c9d362$554bda60$ffe38f20$@com>
References: <052401c9d362$554bda60$ffe38f20$@com>
Message-ID: <DCC7D182-4A40-4FFE-97D3-A69A6560E468@collab.nl>

Hi,

this is a known issue and has been reported in this ticket:

http://twistedmatrix.com/trac/ticket/3243

And apparently it should be fixed once this ticket is fixed:

http://twistedmatrix.com/trac/ticket/1696

Cheers,

Thijs

On 13 May 2009, at 01:32, Alec Matusis wrote:

> Installing 8.2.0:
>
> creating /web20/encap/python-2.4.4/lib/python2.4/site-packages/ 
> Twisted-8.2.0-py2.4-linux-x86_64.egg
> Extracting Twisted-8.2.0-py2.4-linux-x86_64.egg to /web20/encap/ 
> python-2.4.4/lib/python2.4/site-packages
>   File "/web20/encap/python-2.4.4/lib/python2.4/site-packages/ 
> Twisted-8.2.0-py2.4-linux-x86_64.egg/twisted/test/ 
> generator_failure_tests.py", line 66
>     yield
>          ^
> SyntaxError: invalid syntax
> Adding Twisted 8.2.0 to easy-install.pth file
>
>
> I think generator_failure_tests.py expects python 2.5+
> Perhaps it should skip this test for python 2.4?
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090513/abd3c325/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 194 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20090513/abd3c325/attachment.sig>

From bbxx789_05ss at yahoo.com  Wed May 13 00:08:28 2009
From: bbxx789_05ss at yahoo.com (bbxx789_05ss at yahoo.com)
Date: Tue, 12 May 2009 23:08:28 -0700 (PDT)
Subject: [Twisted-Python] can't get a simple client/server example to work!
Message-ID: <817079.14381.qm@web59406.mail.ac4.yahoo.com>

Here is the server code:-------------from twisted.internet.protocol import Protocol, Factoryfrom twisted.internet import reactorimport sys
class MyServer(Protocol):    def connectionMade(self):
        self.transport.write("Hello")
factory = Factory()factory.protocol =  MyServer
reactor.listenTCP(2000, factory)
reactor.run()-----------

Here is the client code:--------------from twisted.internet.protocol import Protocol, ClientCreatorfrom twisted.internet import reactorimport sys
class MyClient(Protocol):    def dataReceived(self, data):        sys.stdout.write(data)        self.transport.loseConnection()------------
What do I need to add to the client code to make it connect to the server?  I think the "How To" documentation is woefully inadequate.  For instance, it says this:
----Here is a simple example:from twisted.internet.protocol import Protocol
from sys import stdout

class Echo(Protocol):
    def dataReceived(self, data):
        stdout.write(data)------
Anyone who knows even a little bit of python should be able to recognize that that code does absolutely nothing.  


      
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090512/7ee49253/attachment.html>

From adam.bcn at gmail.com  Wed May 13 02:08:06 2009
From: adam.bcn at gmail.com (Adam)
Date: Wed, 13 May 2009 10:08:06 +0200
Subject: [Twisted-Python] can't get a simple client/server example to
	work!
In-Reply-To: <817079.14381.qm@web59406.mail.ac4.yahoo.com>
References: <817079.14381.qm@web59406.mail.ac4.yahoo.com>
Message-ID: <4983dddf0905130108i19ec89d7y407389d99b1540ff@mail.gmail.com>

2009/5/13 bbxx789_05ss at yahoo.com <bbxx789_05ss at yahoo.com>

> Here is the server code:-------------
> from twisted.internet.protocol import Protocol, Factory
> from twisted.internet import reactor
> import sys
>
> class MyServer(Protocol):
>     def connectionMade(self):
>         self.transport.write("Hello")
>
> factory = Factory()
> factory.protocol =  MyServer
>
> reactor.listenTCP(2000, factory)
> reactor.run()
> -----------
>
>
> Here is the client code:
> --------------
> from twisted.internet.protocol import Protocol, ClientCreator
> from twisted.internet import reactor
> import sys
>
> class MyClient(Protocol):
>     def dataReceived(self, data):
>         sys.stdout.write(data)
>         self.transport.loseConnection()
> ------------
>
> What do I need to add to the client code to make it connect to the server?
>  I think the "How To" documentation is woefully inadequate.  For instance,
> it says this:
>
> ----
>
> Here is a simple example:
>
> from twisted.internet.protocol import Protocolfrom sys import stdout
> class Echo(Protocol):
>     def dataReceived(self, data):
>         stdout.write(data)
>
> ------
>
> Anyone who knows even a little bit of python should be able to recognize
> that that code does absolutely nothing.
>


Greetings nameless-and-frustrated Twisted beginner!  Have a look at the
echoclient.py example, which you can download here:

http://twistedmatrix.com/projects/core/documentation/examples/index.html

Essentially you also need to create an EchoFactory and set it to run within
a reactor (notice that your server example already does this).

Hope that helps,

~Adam
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090513/09c60255/attachment.html>

From itamar at itamarst.org  Wed May 13 05:43:11 2009
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 13 May 2009 07:43:11 -0400
Subject: [Twisted-Python] can't get a simple client/server example to
 work!
In-Reply-To: <817079.14381.qm@web59406.mail.ac4.yahoo.com>
References: <817079.14381.qm@web59406.mail.ac4.yahoo.com>
Message-ID: <1242214991.22389.8.camel@pintsize>

Have you read the client-side howto?

http://twistedmatrix.com/projects/core/documentation/howto/clients.html




From rlotun at gmail.com  Wed May 13 10:22:49 2009
From: rlotun at gmail.com (Reza Lotun)
Date: Wed, 13 May 2009 17:22:49 +0100
Subject: [Twisted-Python] How do I turn off certain log messages?
Message-ID: <95bb10690905130922x24b3ffcem657634bfd0af396@mail.gmail.com>

Hi,

I was just wondering about the best way to customize twisted logging -
specifically, I'd like to remove the:
"Starting factory.."
and "Stopping factory.."

log messages that pop up whenever I use twisted.web.client
HTTPClientFactory. Is it simply a matter of writing a custom Logging
Observer and specifically filtering those kinds of messages? I run a
twisted.web server with twistd (with DailyLogFile) that for every
connection to it makes a number of web-service calls using web.client.
I want to have Apache style access logs and be able to spit out error
conditions *without* anything extraneous creeping in. What are the
idioms and best practices?

Thanks,
Reza

-- 
Reza Lotun
+44 (0)7521 310 763
rlotun at gmail.com



From exarkun at divmod.com  Wed May 13 11:02:37 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 13 May 2009 13:02:37 -0400
Subject: [Twisted-Python] How do I turn off certain log messages?
In-Reply-To: <95bb10690905130922x24b3ffcem657634bfd0af396@mail.gmail.com>
Message-ID: <20090513170237.21531.606480413.divmod.quotient.20364@henry.divmod.com>

On Wed, 13 May 2009 17:22:49 +0100, Reza Lotun <rlotun at gmail.com> wrote:
>Hi,
>
>I was just wondering about the best way to customize twisted logging -
>specifically, I'd like to remove the:
>"Starting factory.."
>and "Stopping factory.."
>
>log messages that pop up whenever I use twisted.web.client
>HTTPClientFactory. Is it simply a matter of writing a custom Logging
>Observer and specifically filtering those kinds of messages?

For this particular case, you can set `noisy´ to False on the factory
and it will stop logging those messages at all.

>I run a
>twisted.web server with twistd (with DailyLogFile) that for every
>connection to it makes a number of web-service calls using web.client.
>I want to have Apache style access logs and be able to spit out error
>conditions *without* anything extraneous creeping in. What are the
>idioms and best practices?

If you'd like a separate http access log, Site supports this if you
tell it where to put it - pass a name for the logPath parameter.  That
log file will just get access info (and the info will no longer appear
in your main log).

It is entirely possible to do this the way you suggested - by writing a
custom log observer and either picking just the messages you like to log
or by filtering out any messages you don't like to skip (or any other
custom logic you might like) - but it's probably simpler to use the noisy
feature or the logPath feature, in this case.

Jean-Paul



From bbxx789_05ss at yahoo.com  Wed May 13 11:28:19 2009
From: bbxx789_05ss at yahoo.com (bbxx789_05ss at yahoo.com)
Date: Wed, 13 May 2009 10:28:19 -0700 (PDT)
Subject: [Twisted-Python] can't get a simple client/server example to
	work!
Message-ID: <419375.143.qm@web59401.mail.ac4.yahoo.com>


Hi,


--- On Wed, 5/13/09, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:

>
> Have you read the client-side howto?
> 
> http://twistedmatrix.com/projects/core/documentation/howto/clients.html
> 
> 

Have you read my email?



      




From bbxx789_05ss at yahoo.com  Wed May 13 11:33:18 2009
From: bbxx789_05ss at yahoo.com (bbxx789_05ss at yahoo.com)
Date: Wed, 13 May 2009 10:33:18 -0700 (PDT)
Subject: [Twisted-Python] can't get a simple client/server example to
	work!
Message-ID: <330031.12475.qm@web59406.mail.ac4.yahoo.com>


Hi,



--- On Wed, 5/13/09, Adam <adam.bcn at gmail.com> wrote:

> From: Adam <adam.bcn at gmail.com>
> Subject: Re: [Twisted-Python] can't get a simple client/server example to work!
> To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
> Date: Wednesday, May 13, 2009, 1:08 AM
> 2009/5/13 bbxx789_05ss at yahoo.com
> <bbxx789_05ss at yahoo.com>
> 
> 
> Here is the server
> code:-------------from
> twisted.internet.protocol import Protocol,
> Factoryfrom twisted.internet import
> reactorimport sys
> class MyServer(Protocol):
>     def connectionMade(self):
>       
>  self.transport.write("Hello")
> factory = Factory()factory.protocol =
>  MyServer
> reactor.listenTCP(2000, factory)
> 
> reactor.run()-----------
> 
> Here is the client
> code:--------------from
> twisted.internet.protocol import Protocol,
>  ClientCreatorfrom twisted.internet import
> reactorimport sys
> class MyClient(Protocol):    def
> dataReceived(self, data):      
>  sys.stdout.write(data)
>       
>  self.transport.loseConnection()------------
> What do I need to add to the client code to make
> it connect to the server?  I think the "How To"
> documentation is woefully inadequate.  For instance, it
> says this:
> 
> ----Here is a simple example:
> from
> twisted.internet.protocol
> import Protocol
> from sys import stdout
> 
> class Echo(Protocol):
>     def dataReceived(self,
> data):
>        
> stdout.write(data)------
> Anyone who knows even a little bit of python
> should be able to recognize that that code does absolutely
> nothing.  
> 
> 
> Greetings nameless-and-frustrated Twisted beginner!  Have
> a look at the echoclient.py example, which you can download
> here:
> 
> http://twistedmatrix.com/projects/core/documentation/examples/index.html
> 
> 
> Essentially you also need to create an EchoFactory and set
> it to run within a reactor (notice that your server example
> already does this).
> 
> Hope that helps,
> 
> ~Adam
> 

I can't get anything to work.  I asked a simple question, but I can't seem to pry an answer out of this group, and the simple examples in the documentation are incomplete.  I've decided not to pursue Twisted any longer.  Don't bother responding.  I am unsubscribing.







      




From robert at gravina.com  Wed May 13 21:32:22 2009
From: robert at gravina.com (Robert Gravina)
Date: Thu, 14 May 2009 12:32:22 +0900
Subject: [Twisted-Python] can't get a simple client/server example to
	work!
In-Reply-To: <330031.12475.qm@web59406.mail.ac4.yahoo.com>
References: <330031.12475.qm@web59406.mail.ac4.yahoo.com>
Message-ID: <dad637010905132032i8398291kb4c53ec26cb53b3b@mail.gmail.com>

2009/5/14 bbxx789_05ss at yahoo.com <bbxx789_05ss at yahoo.com>:

> I can't get anything to work.  I asked a simple question, but I can't seem to pry an answer out of this group, and the simple examples in the documentation are incomplete.  I've decided not to pursue Twisted any longer.  Don't bother responding.  I am unsubscribing.
>

Please wait a moment. I've worked with Twisted for years and found
that community very helpful and the library very well covered with
beginner tutorials... I think it's just a matter of some
misunderstanding here.

Here is a simple client/server example:
http://twistedmatrix.com/projects/core/documentation/examples/index.html#auto0

Try that out, and see if you can get it to run;

But, in order to understand what's going on I think you should start here:
http://twistedmatrix.com/projects/core/documentation/howto/index.html

1) Read the introduction (mainly, Asynchronous Programming with
Twisted). This will introduce the basic Twisted concepts.

2) Follow the tutorials listed under "Tutorials" until you either get
to the last one or you feel you've learned enough for now. The very
first tutorial covers a simple client/server.

I remember doing this over an hour or so when I first discovered
Twisted and was it was a great experience.

If you need help, please ask again.

Robert



From terry at jon.es  Thu May 14 02:01:05 2009
From: terry at jon.es (Terry Jones)
Date: Thu, 14 May 2009 10:01:05 +0200
Subject: [Twisted-Python] Consistent interfaces to
	asynchronous	partially-available services	using	Deferreds and
	state	machines (was Re: Another approach to allowing	__init__
	to	work with Deferreds)
In-Reply-To: Your message at 10:47:38 on Tuesday, 12 May 2009
References: <18952.20484.534748.921408@jon.es>
	<20090512075020.12555.1526761106.divmod.xquotient.11469@weber.divmod.com>
	<18953.24553.54020.283769@jon.es>
	<C11CC21F-3C40-47EC-AB11-1FCF8BF284D6@bubblehouse.org>
Message-ID: <18955.53185.984111.643482@jon.es>

>>>>> "Phil" == Phil Christensen <phil at bubblehouse.org> writes:

Phil> I don't know if I agree with the need for such a feature (that is,
Phil> deferred __init__ usage), but it was a very interesting coding
Phil> challenge I wanted to take a whack at. I *think* I might have found a
Phil> solution, but I don't know if it falls under the heading of
Phil> "decorator abuse" ;-)

Hi Phil

I finally had time to look at your solution a bit (though I've not run
it). It does a couple of things I wouldn't have thought of, like putting
the dictionary onto the deferredInit function. A couple of comments,
supposing I understand your code properly:

 - One thing I had hoped to avoid was to slow the class methods down by
   having them always check the original deferred (or a flag) before taking
   action. My approach does this by moving them aside and then putting them
   back in place once the deferred fires. Your solution requires that every
   decorated method does several extra things before it gets going. That
   could be greatly reduced if you were to check self.initDeferred.called
   and simply call the original function if the deferred has fired.

 - If multiple calls are made to instance methods before the init deferred
   has fired, they will, as I read it, all try to del
   deferredInit.waiting[self] in _finish. So I guess that del needs to be
   conditional or in a try/except.

 - Using self as a key into the dict on initDeferred seems like it
   addresses Glyph's observation/criticism that my approach raises
   questions wrt inheritance.

 - You could use chainDeferred where you're currently using
   .addCallbacks(resultDeferred.callback, resultDeferred.errback)


That's all for now. I'll see if I have more time to think about all this.
When I tried to use a decorator the first time, I was also using a super
class (whereas you're putting state into a dict on the deferredInit
function) but I got into a mess accessing self properly (partly because, I
think, I wanted to have a mixin class and I was looking at
self.__class__.__mro__).

In any case, thanks for replying, for playing with it, and for posting your
code. I got to learn new things as a result, which is really great :-)

Terry



From rlotun at gmail.com  Thu May 14 05:04:48 2009
From: rlotun at gmail.com (Reza Lotun)
Date: Thu, 14 May 2009 12:04:48 +0100
Subject: [Twisted-Python] How do I turn off certain log messages?
In-Reply-To: <20090513170237.21531.606480413.divmod.quotient.20364@henry.divmod.com>
References: <95bb10690905130922x24b3ffcem657634bfd0af396@mail.gmail.com>
	<20090513170237.21531.606480413.divmod.quotient.20364@henry.divmod.com>
Message-ID: <95bb10690905140404i23579c70m7a7d2d382e19f21c@mail.gmail.com>

On Wed, May 13, 2009 at 6:02 PM, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> It is entirely possible to do this the way you suggested - by writing a
> custom log observer and either picking just the messages you like to log
> or by filtering out any messages you don't like to skip (or any other
> custom logic you might like) - but it's probably simpler to use the noisy
> feature or the logPath feature, in this case.
>
> Jean-Paul

Excellent, thanks! That's just what I was looking for.

Also, just for the sake of it - what are other people's suggestions
and gotchas for working with twisted.web? In the past few weeks I've
learned some new stuff just from skimming the list:
 - setting request.channel.persistent = False to force non persistent
connections
 - setting HTTPClientFactory.noisy = False to turn off log messages

Any other quick tips and tricks people could offer? ;-) I'm
particularly concerned with squeezing some performance out of the
web.server and also web.client.

Thanks!
Reza


-- 
Reza Lotun
+44 (0)7521 310 763
rlotun at gmail.com



From rlotun at gmail.com  Thu May 14 05:10:36 2009
From: rlotun at gmail.com (Reza Lotun)
Date: Thu, 14 May 2009 12:10:36 +0100
Subject: [Twisted-Python] Recompiling _epoll.pyx
Message-ID: <95bb10690905140410q466a67c7wd5c38e921453e613@mail.gmail.com>

Hi,

I noticed in the documentation for _epoll.pyx that the corresponding
.c file was generated using pyrex 0.9.4.1. On a whim I downloaded
0.9.8.5 and regenerated the file and rebuilt python. I'm currently
testing my server but noticing nothing out of the ordinary.

Before I march on my merry way I was wondering if there could be any
potential pitfall of using the non-standard _epoll.c? I only though to
try it because
- I'm using Python 2.6 which I compiled from source
- I'm using Twisted trunk
- A quick glance between pyrex 0.9.4.1 to 0.9.8.5 showed a lot of
activity, some of which seemed marked with "bug fix" and "more
efficient code"
- I'm currently stress testing my server and wanted to see what sort
of changes could be induced by modifying different parts of the
system.

Anyway, just wondering.

Cheers,
Reza


-- 
Reza Lotun
+44 (0)7521 310 763
rlotun at gmail.com



From rlotun at gmail.com  Thu May 14 05:15:15 2009
From: rlotun at gmail.com (Reza Lotun)
Date: Thu, 14 May 2009 12:15:15 +0100
Subject: [Twisted-Python] Recompiling _epoll.pyx
In-Reply-To: <95bb10690905140410q466a67c7wd5c38e921453e613@mail.gmail.com>
References: <95bb10690905140410q466a67c7wd5c38e921453e613@mail.gmail.com>
Message-ID: <95bb10690905140415q4cabab06g88809a7593296256@mail.gmail.com>

> I noticed in the documentation for _epoll.pyx that the corresponding
> .c file was generated using pyrex 0.9.4.1. On a whim I downloaded
> 0.9.8.5 and regenerated the file and rebuilt python. I'm currently

Sorry, meant to say "rebuilt twisted".


-- 
Reza Lotun
+44 (0)7521 310 763
rlotun at gmail.com



From itamar at itamarst.org  Thu May 14 06:38:47 2009
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 14 May 2009 08:38:47 -0400
Subject: [Twisted-Python] How do I turn off certain log messages?
In-Reply-To: <95bb10690905140404i23579c70m7a7d2d382e19f21c@mail.gmail.com>
References: <95bb10690905130922x24b3ffcem657634bfd0af396@mail.gmail.com>
	<20090513170237.21531.606480413.divmod.quotient.20364@henry.divmod.com>
	<95bb10690905140404i23579c70m7a7d2d382e19f21c@mail.gmail.com>
Message-ID: <1242304727.22389.27.camel@pintsize>

On Thu, 2009-05-14 at 12:04 +0100, Reza Lotun wrote:

>  - setting request.channel.persistent = False to force non persistent
> connections

> I'm particularly concerned with squeezing some performance out of the
> web.server and also web.client.

Those two things are contradictory - persistent connections speed things
up :)




From rlotun at gmail.com  Thu May 14 07:49:03 2009
From: rlotun at gmail.com (Reza Lotun)
Date: Thu, 14 May 2009 14:49:03 +0100
Subject: [Twisted-Python] How do I turn off certain log messages?
In-Reply-To: <1242304727.22389.27.camel@pintsize>
References: <95bb10690905130922x24b3ffcem657634bfd0af396@mail.gmail.com>
	<20090513170237.21531.606480413.divmod.quotient.20364@henry.divmod.com>
	<95bb10690905140404i23579c70m7a7d2d382e19f21c@mail.gmail.com>
	<1242304727.22389.27.camel@pintsize>
Message-ID: <95bb10690905140649x6c1a5388pf7c43670bd34818c@mail.gmail.com>

On Thu, May 14, 2009 at 1:38 PM, Itamar Shtull-Trauring
<itamar at itamarst.org> wrote:
>>  - setting request.channel.persistent = False to force non persistent
>> connections
>
>> I'm particularly concerned with squeezing some performance out of the
>> web.server and also web.client.
>
> Those two things are contradictory - persistent connections speed things
> up :)

That was my general impression, but I'm using HAProxy for a load
balancer, and its documentation has this snippet:

"Keep-alive was invented to reduce CPU usage on servers when CPUs were
100 times slower. But what is not said is that persistent connections
consume a lot of memory while not being usable by anybody except the
client who openned them. Today in 2009, CPUs are very cheap and memory
is still limited to a few gigabytes by the architecture or the price.
If a site needs keep-alive, there is a real problem. Highly loaded
sites often disable keep-alive to support the maximum number of
simultaneous clients. The real downside of not having keep-alive is a
slightly increased latency to fetch objects. Browsers double the
number of concurrent connections on non-keepalive sites to compensate
for this. "

So, I really should have mentioned that because HAProxy doesn't
currently support persistent connections, I want to force them to be
off.

Cheers,
Reza


-- 
Reza Lotun
+44 (0)7521 310 763
rlotun at gmail.com



From phil at bubblehouse.org  Thu May 14 09:48:02 2009
From: phil at bubblehouse.org (Phil Christensen)
Date: Thu, 14 May 2009 11:48:02 -0400
Subject: [Twisted-Python] Consistent interfaces to
	asynchronous	partially-available services	using	Deferreds and
	state	machines (was Re: Another approach to allowing	__init__
	to	work with Deferreds)
In-Reply-To: <18955.53185.984111.643482@jon.es>
References: <18952.20484.534748.921408@jon.es>
	<20090512075020.12555.1526761106.divmod.xquotient.11469@weber.divmod.com>
	<18953.24553.54020.283769@jon.es>
	<C11CC21F-3C40-47EC-AB11-1FCF8BF284D6@bubblehouse.org>
	<18955.53185.984111.643482@jon.es>
Message-ID: <F6B5BCFC-C3F7-4673-A7C3-15460B92A948@bubblehouse.org>

On May 14, 2009, at 4:01 AM, Terry Jones wrote:
>>>>>> "Phil" == Phil Christensen <phil at bubblehouse.org> writes:
>
> Phil> I don't know if I agree with the need for such a feature (that  
> is,
> Phil> deferred __init__ usage), but it was a very interesting coding
> Phil> challenge I wanted to take a whack at. I *think* I might have  
> found a
> Phil> solution, but I don't know if it falls under the heading of
> Phil> "decorator abuse" ;-)
>
> Hi Phil
>
> I finally had time to look at your solution a bit (though I've not run
> it). It does a couple of things I wouldn't have thought of, like  
> putting
> the dictionary onto the deferredInit function. A couple of comments,
> supposing I understand your code properly:
>
> - One thing I had hoped to avoid was to slow the class methods down by
>   having them always check the original deferred (or a flag) before  
> taking
>   action. My approach does this by moving them aside and then  
> putting them
>   back in place once the deferred fires. Your solution requires that  
> every
>   decorated method does several extra things before it gets going.  
> That
>   could be greatly reduced if you were to check  
> self.initDeferred.called
>   and simply call the original function if the deferred has fired.

Yeah, I see what you mean. I changed it to directly call the function  
if the initDeferred has already been fired. One catch is that I think  
it's important that the function always return a Deferred, even if  
it's just a succeed() wrapper, so as to provide a consistent interface  
whether __init__ is finished or not.

I added a couple additional calls to my test example to illustrate this.

> - If multiple calls are made to instance methods before the init  
> deferred
>   has fired, they will, as I read it, all try to del
>   deferredInit.waiting[self] in _finish. So I guess that del needs  
> to be
>   conditional or in a try/except.

I realized there's no reason to keep a dictionary anyways, since you  
always have access to `self`. The result means less bookkeeping, which  
is always good...

> - Using self as a key into the dict on initDeferred seems like it
>   addresses Glyph's observation/criticism that my approach raises
>   questions wrt inheritance.

I believe even though I removed that state dictionary, this should  
still work properly, since we always operate on/with `self`.

> - You could use chainDeferred where you're currently using
>   .addCallbacks(resultDeferred.callback, resultDeferred.errback)

Ah yes. I forgot this existed; a lot of my Deferred experience is with  
sequential processes, so I've been using inlineCallbacks for everything.

> That's all for now. I'll see if I have more time to think about all  
> this.
> When I tried to use a decorator the first time, I was also using a  
> super
> class (whereas you're putting state into a dict on the deferredInit
> function) but I got into a mess accessing self properly (partly  
> because, I
> think, I wanted to have a mixin class and I was looking at
> self.__class__.__mro__).
>
> In any case, thanks for replying, for playing with it, and for  
> posting your
> code. I got to learn new things as a result, which is really great :-)

Yeah, same here. It's pretty rare that I can get into any 'semi- 
advanced' discussions on here (things often seem to go between one  
extreme and the other), but I always learn lots when I do.

I'm still not sure if I would use this technique myself, but I'm  
reasonably satisfied with the "scent" of this code. Obviously though,  
I haven't thought through a whole bunch of use cases, but it seems to  
be pretty simple, in the end.

I've attached the revised version of the decorator. Let me know if you  
think of anything else.

Thanks,

-phil

-------------- next part --------------
A non-text attachment was scrubbed...
Name: init_deferred.py
Type: text/x-python-script
Size: 2272 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20090514/71b81de9/attachment-0002.bin>
-------------- next part --------------


From powdahound at gmail.com  Thu May 14 09:08:07 2009
From: powdahound at gmail.com (Garret Heaton)
Date: Thu, 14 May 2009 08:08:07 -0700
Subject: [Twisted-Python] XMPP/Jabber server example
In-Reply-To: <20090512020711.12555.543742607.divmod.xquotient.11154@weber.divmod.com>
References: <812f32000905110916p36cb564fic5ad31e21e5298c9@mail.gmail.com> 
	<20090512020711.12555.543742607.divmod.xquotient.11154@weber.divmod.com>
Message-ID: <812f32000905140808q54ffac56v22c65f9753ff46@mail.gmail.com>

Thanks for the help! I created a ticket requesting examples here:
http://twistedmatrix.com/trac/ticket/3837. If the recent interest in Twisted
+ XMPP<https://mailman.ik.nu/pipermail/twisted-jabber/2008-September/000155.html>continues
I'd be happy to contribute to the goals listed
here <http://twistedmatrix.com/trac/wiki/XMPPServerArchitecture>. Would love
to hear from ralphm and/or metajack on the current status of this effort.

On Mon, May 11, 2009 at 7:07 PM, <glyph at divmod.com> wrote:

>
> On 11 May, 04:16 pm, powdahound at gmail.com wrote:
> >I'm trying to create an XMPP server using twisted.words and am having
> >difficulty finding the correct way to make use of the classes provided.
> >I
> >was hoping someone might have an example or short explanation of which
> >classes would be used to create a very basic server (using the latest
> >classes<
> http://twistedmatrix.com/documents/8.2.0/api/twisted.words.protocols.jabber.xmlstream.html
> >from
> >8.2.0).
>
> I'm not confident of my own knowledge of twisted.words.*xmpp* to provide
> you an accurate answer.  I assume you've looked at doc/words/examples/
> and there's nothing up to date.  If so, this is a doc bug that needs to
> be reported - please file it on twistedmatrix.com.
> >(snip some great questions)
>
> Can you itemize these questions on the ticket so that we can make sure
> they're all answered for future comers?
> >Is there still work being done on the goals listed at
> >http://twistedmatrix.com/trac/wiki/XMPPServerArchitecture?
>
> Yes, but very slowly.  Please help out, submit patches and so on!  A
> useful bit of work would be to trawl around through the bugtracker and
> add links from that page to tickets describing individual bits of work
> and vice versa.  And perhaps to file tickets describing the bits of work
> which aren't described as tickets yet :).
>
> A good example of what I mean is this page:
>
>    http://twistedmatrix.com/trac/wiki/ReleaseAutomation
> >Thanks! Really enjoying Twisted so far.
>
> Thank you!
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Garret Heaton
http://garret.myplaxo.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090514/cf0e25e7/attachment.html>

From asset at impactdamage.com  Thu May 14 17:14:45 2009
From: asset at impactdamage.com (asset)
Date: Thu, 14 May 2009 16:14:45 -0700
Subject: [Twisted-Python] Conch Checkers Help
Message-ID: <13475284$cdad88c$54959c6c$@com>

Can somebody point me into the right direction in how to switch out 
checkers.InMemoryUsernamePasswordDatabaseDontUse with something that would 
authenticate linux users, like root?

On some things i just cant seem to get past documentation and api docs.  
Hoping for a slight push in the right direction.  Also doesnt help that im 
new to linux.

Any help would be greatly appreciated.

BTW, Im going to be working on a multiline version of conch.recvline to 
handle edit chars when transitioning screen rows, etc.  Went through the 
pain of doing it with another raw terminal library and now id rather 
implement what i did with that in conch.  Hopefully i wont be reinventing a 
wheel i havent spotted.

TWKiel
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090514/145bc2cb/attachment.html>

From paulswartz at gmail.com  Thu May 14 18:10:07 2009
From: paulswartz at gmail.com (Paul Swartz)
Date: Thu, 14 May 2009 20:10:07 -0400
Subject: [Twisted-Python] Conch Checkers Help
In-Reply-To: <13475284$cdad88c$54959c6c$@com>
References: <13475284$cdad88c$54959c6c$@com>
Message-ID: <4A0CB2DF.2070807@gmail.com>

On 05/14/2009 07:14 PM, asset wrote:
> Can somebody point me into the right direction in how to switch out
> checkers.InMemoryUsernamePasswordDatabaseDontUse with something that
> would authenticate linux users, like root?

You're probably looking for twisted.conch.checkers.UnixPasswordDatabase.

-p
-- 
Paul Swartz
paulswartz at gmail dot com
http://paulswartz.net/
AIM: z3penguin




From asset at impactdamage.com  Thu May 14 18:36:04 2009
From: asset at impactdamage.com (asset)
Date: Thu, 14 May 2009 17:36:04 -0700
Subject: [Twisted-Python] SPAM-LOW:  Re:  Conch Checkers Help
Message-ID: <1a64e53a$7c5fb89c$15fd570c$@com>

I tried that checker, but it failed authentication.  Im not sure if
theres a way to tell it which users can authenticate or if it just
succeeds with any valid user, but it would'nt go through.  I'm also not
sure if it was intended for linux distros like Ubuntu (which is what im
testing on).  I even tried running my application via sudo in case the
OS was blocking auth tests from a non priviledged user.


I think ill do some manual tests with the pwd module it uses in order to 
drill out why its not working.


Thx for your help Paul.


TWKiel

----------------------------------------
From: "Paul Swartz" <paulswartz at gmail.com>
Sent: Thursday, May 14, 2009 12:11 PM
To: asset at impactdamage.com, "Twisted general discussion" 
<twisted-python at twistedmatrix.com>
Subject: SPAM-LOW:  Re: [Twisted-Python] Conch Checkers Help 

On 05/14/2009 07:14 PM, asset wrote:
> Can somebody point me into the right direction in how to switch out
> checkers.InMemoryUsernamePasswordDatabaseDontUse with something that
> would authenticate linux users, like root?

You're probably looking for twisted.conch.checkers.UnixPasswordDatabase.

-p
-- 
Paul Swartz
paulswartz at gmail dot com
http://paulswartz.net/
AIM: z3penguin

 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090514/83065ec0/attachment.html>

From coder_gus at lavabit.com  Fri May 15 02:11:58 2009
From: coder_gus at lavabit.com (coder_gus)
Date: Fri, 15 May 2009 11:11:58 +0300
Subject: [Twisted-Python] How to make a service dependent of another?
Message-ID: <4A0D23CE.7030908@lavabit.com>

Hi,
I have a pb client and a tcp server. How can I make the server start 
only after/if the client started?

Thanks.




From terry at jon.es  Fri May 15 02:46:00 2009
From: terry at jon.es (Terry Jones)
Date: Fri, 15 May 2009 10:46:00 +0200
Subject: [Twisted-Python] How to make a service dependent of another?
In-Reply-To: Your message at 11:11:58 on Friday, 15 May 2009
References: <4A0D23CE.7030908@lavabit.com>
Message-ID: <18957.11208.18435.745564@jon.es>

>>>>> "Gus" == coder gus <coder_gus at lavabit.com> writes:
Gus> I have a pb client and a tcp server. How can I make the server start 
Gus> only after/if the client started?

Hi Gus

You might take a look at the code here

  http://www.twistedmatrix.com/pipermail/twisted-python/2009-February/019249.html

and if you go back a couple of mails in that thread you'll see some more
discussion.  BTW, this approach hasn't received much comment, so you
shouldn't assume it's bulletproof or even recommended. But I use it many
times every day to launch about half a dozen twistd multiservices, and have
never had a problem.

You use it like a regular multiservice, but you can pass it a service which
is treated slightly specially. The other services you add will not be
started unless the service you pass to __init__ starts properly (you can
know this by having its startService return a deferred). Make sense?

Terry



From radix at twistedmatrix.com  Fri May 15 08:09:30 2009
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 15 May 2009 10:09:30 -0400
Subject: [Twisted-Python] How to make a service dependent of another?
In-Reply-To: <4A0D23CE.7030908@lavabit.com>
References: <4A0D23CE.7030908@lavabit.com>
Message-ID: <60ed19d40905150709k404448bdyf6dd3174454412b6@mail.gmail.com>

On Fri, May 15, 2009 at 4:11 AM, coder_gus <coder_gus at lavabit.com> wrote:
> Hi,
> I have a pb client and a tcp server. How can I make the server start
> only after/if the client started?

Basically, you want to call listenTCP in one of the callbacks that get
invoked when a client is successfully connected. There are a few of
these:

* the connectionMade method of your client protocol
* the clientConnectionMade method of your client factory
* the deferred that's returned from ClientCreator, if you're using it.

Depending on your situation and the factoring that you want, any of
these could be the most appropriate.

-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
http://canonical.com/



From exarkun at divmod.com  Fri May 15 08:38:01 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 15 May 2009 10:38:01 -0400
Subject: [Twisted-Python] How to make a service dependent of another?
In-Reply-To: <4A0D23CE.7030908@lavabit.com>
Message-ID: <20090515143801.21531.16278222.divmod.quotient.21221@henry.divmod.com>

On Fri, 15 May 2009 11:11:58 +0300, coder_gus <coder_gus at lavabit.com> wrote:
>Hi,
>I have a pb client and a tcp server. How can I make the server start
>only after/if the client started?

In general, the answer to "how do I do X when Y?" is "Put the code to do X
in the callback that tells you Y has happened."

So, for example, if you're using PBClientFactory.login, you might add a
callback to the Deferred it returns which starts your TCP server.  ie,


    f = PBClientFactory(...)
    d = f.login(...)
    def cbLoggedIn(avatar):
        reactor.listenTCP(...)
        ...
    d.addCallback(cbLoggedIn)
    ...
    reactor.connectTCP(..., f)
    reactor.run()

Jean-Paul



From luigiandcosolutions at gmail.com  Fri May 15 08:58:11 2009
From: luigiandcosolutions at gmail.com (Luigi Conte)
Date: Fri, 15 May 2009 16:58:11 +0200
Subject: [Twisted-Python] help using deferred
In-Reply-To: <20090511180121.21531.832920012.divmod.quotient.19615@henry.divmod.com>
References: <9cce290a0905111049j693150deye98c0129a977f070@mail.gmail.com>
	<20090511180121.21531.832920012.divmod.quotient.19615@henry.divmod.com>
Message-ID: <9cce290a0905150758n62cfe47bi628b0fa26fe0be0c@mail.gmail.com>

2009/5/11 Jean-Paul Calderone <exarkun at divmod.com>

> On Mon, 11 May 2009 19:49:19 +0200, Luigi Conte <
> luigiandcosolutions at gmail.com> wrote:
> >
> > [snip]
> >in my script I have to use connect method and then I have to do some
> >operations first of calling the start method
> >1) start connection
> >
> >    def startConnection(self):
> >        d = my_api.connect(self.ctrl_ip, self.ctrl_port, self.user,
> >self.pwd)
> >        d.addCallback(self.postConnection)
>
> Since you omitted the definition of postConnection, I have no way to know
> what this does.
>
> >        d.addErrback(twisted.python.log.err)
>
> Regardless, this is the wrong place to insert this errback.  You should
> read
> the Deferred documentation to learn what consequence it will have on your
> program's flow.
>
> http://twistedmatrix.com/projects/core/documentation/howto/defer.html is
> probably a good place to start.
>
> >        print "Connection added"
> >        return d
> >2) operation before starting a virtual machine:
> >def newVMCfg(self, new_vms_cfg):
> >       #...
> >       #some operations
> >       #if condition valid I try to start the virtual machine
> >                        # is this the correct way to pass args to the
> start
> >method?
> >                        d = self.d.addCallback(self.startVM,(new_vm,
> >self.lnms[i])
> >                        print "started vm %s"%new_vm
> >        return d
> >
> >in the main process I call them as:
> >d = startConnection()
> >d.addCallback(newVMCfg, arg)
> >
> >Is it correct? Because the process stops at the first method called: I see
> >only "connection added".
>
> That should indicate to you that something is going wrong after that print
> statement is reached.  So examine what your program tries to do after that
> point.  You may want to use a debugger.  You may want to try writing some
> unit tests.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>

I looked at the documentation and I understood something about defferd and
callbacks. I edited my code but it does nothing...
I'm going to explain the scenario and what I want to do:
- there is an api that provides some methods (connect, start, disconnect).
- all those methods return a deferred object
- I have an object that first tries to connect, then reads a file and calls
the start method many times in a loop cicle of his method.

I want to use the connect and wait until I'm really connected. How can I do
this using the deferred object that the api returns to me?
I want to do the same thing each time I call the start method from the api:
I want to wait the completing of start operation before doing another start
invocation.

so I do:
in the main process:
    d = gest.connettiCLI_to_CTRL()

in gest class I have:
    def connettiCLI_to_CTRL(self):
        d = api.connect(self.ctrl_ip, self.ctrl_port, self.user, self.pwd)
        d.addCallback(self.cbConnected)
        return d

    def cbConnected(self, connectResult):
        return self.postConnection()

    def postConnection(self):
        # I do something but I don't call api's methods here
        # then I go to the next step returning the next method
        return self.interpretaNewVMCfg(self.vms_cfg)

    def interpretaNewVMCfg(self, new_vms_cfg):
        for i in candidati:
            #start operation in loop
            #here I want to control each start operation
            d = api.startVM(new_vm, self.lnms[i])
        return d

thank you so much
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090515/1a48cb4f/attachment.html>

From exarkun at twistedmatrix.com  Sat May 16 22:05:12 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 17 May 2009 04:05:12 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1242533112.76.1907360513@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090517/a4e07731/attachment.html>

From arun.thampi at gmail.com  Mon May 18 05:34:20 2009
From: arun.thampi at gmail.com (Arun Thampi)
Date: Mon, 18 May 2009 19:34:20 +0800
Subject: [Twisted-Python] File persistence without blocking the main event
	loop?
Message-ID: <e2e56d2e0905180434g179aea44m930f7a06af91dcb6@mail.gmail.com>

Hi guys - I'm just beginning to learn about Twisted and was wondering if
there is a way to use the built-in Twisted persistence libraries such as
dirdbm etc. without blocking the main event loop? I read about an approach
which uses deferToThread (comment#3 here:
http://code.activestate.com/recipes/413609/) but if you are persisting quite
often, doesn't the creation of threads on every persist-call make it very
expensive?
Any pointers will be much appreciated.

Thanks guys!

Cheers,
Arun

-- 
It's better to be a pirate than join the Navy - Steve Jobs
http://arunthampi.wordpress.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090518/fabf2696/attachment.html>

From itamar at itamarst.org  Mon May 18 06:31:56 2009
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 18 May 2009 08:31:56 -0400
Subject: [Twisted-Python] File persistence without blocking the main
 event loop?
In-Reply-To: <e2e56d2e0905180434g179aea44m930f7a06af91dcb6@mail.gmail.com>
References: <e2e56d2e0905180434g179aea44m930f7a06af91dcb6@mail.gmail.com>
Message-ID: <1242649916.27977.14.camel@pintsize>

On Mon, 2009-05-18 at 19:34 +0800, Arun Thampi wrote:
> Hi guys - I'm just beginning to learn about Twisted and was wondering
> if there is a way to use the built-in Twisted persistence libraries
> such as dirdbm etc. without blocking the main event loop? I read about
> an approach which uses deferToThread (comment#3
> here: http://code.activestate.com/recipes/413609/) but if you are
> persisting quite often, doesn't the creation of threads on every
> persist-call make it very expensive?

deferToThread uses a threadpool, so it's not *very* slow. It does slow
things down a bit, so it's better to do chunks of work rather than doing
writes separately. That being said, writing to disk in main eventloop is
often fast enough in practice, depending on how strong your latency
guarantees need to be.




From exarkun at divmod.com  Mon May 18 07:21:58 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 18 May 2009 09:21:58 -0400
Subject: [Twisted-Python] File persistence without blocking the main
 event loop?
In-Reply-To: <1242649916.27977.14.camel@pintsize>
Message-ID: <20090518132158.21531.1995018939.divmod.quotient.22772@henry.divmod.com>

On Mon, 18 May 2009 08:31:56 -0400, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
>On Mon, 2009-05-18 at 19:34 +0800, Arun Thampi wrote:
>> Hi guys - I'm just beginning to learn about Twisted and was wondering
>> if there is a way to use the built-in Twisted persistence libraries
>> such as dirdbm etc. without blocking the main event loop? I read about
>> an approach which uses deferToThread (comment#3
>> here: http://code.activestate.com/recipes/413609/) but if you are
>> persisting quite often, doesn't the creation of threads on every
>> persist-call make it very expensive?
>
>deferToThread uses a threadpool, so it's not *very* slow. It does slow
>things down a bit, so it's better to do chunks of work rather than doing
>writes separately. That being said, writing to disk in main eventloop is
>often fast enough in practice, depending on how strong your latency
>guarantees need to be.
>

More importantly, don't use dirdbm.  It's not a reliable data storage
library.  In fact, you probably shouldn't use anything in twisted.persisted.

You might be interested in <http://www.divmod.org/trac/wiki/DivmodAxiom>.

Jean-Paul



From exarkun at divmod.com  Mon May 18 07:31:55 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 18 May 2009 09:31:55 -0400
Subject: [Twisted-Python] help using deferred
In-Reply-To: <9cce290a0905150758n62cfe47bi628b0fa26fe0be0c@mail.gmail.com>
Message-ID: <20090518133155.21531.1982090254.divmod.quotient.22775@henry.divmod.com>

On Fri, 15 May 2009 16:58:11 +0200, Luigi Conte <luigiandcosolutions at gmail.com> wrote:
> [snip]
>
>I looked at the documentation and I understood something about defferd and
>callbacks. I edited my code but it does nothing...
>I'm going to explain the scenario and what I want to do:
>- there is an api that provides some methods (connect, start, disconnect).
>- all those methods return a deferred object
>- I have an object that first tries to connect, then reads a file and calls
>the start method many times in a loop cicle of his method.
>
> [snip]

I answered essentially this same question previously in this thread.  If
the answer was unclear, ask for clarification about the part that was not
clear.  Don't just start over at the beginning again.

Jean-Paul



From arun.thampi at gmail.com  Mon May 18 07:54:09 2009
From: arun.thampi at gmail.com (Arun Thampi)
Date: Mon, 18 May 2009 21:54:09 +0800
Subject: [Twisted-Python] File persistence without blocking the main
	event loop?
In-Reply-To: <20090518132158.21531.1995018939.divmod.quotient.22772@henry.divmod.com>
References: <1242649916.27977.14.camel@pintsize>
	<20090518132158.21531.1995018939.divmod.quotient.22772@henry.divmod.com>
Message-ID: <e2e56d2e0905180654l4891d168oea679763618f1a0e@mail.gmail.com>

@Itamar - Thanks for that. Didn't know deferToThread uses a threadpool.
@Jean-Paul - Wow thanks, looks interesting..will definitely take a look.

Thanks again guys.

Arun

On Mon, May 18, 2009 at 9:21 PM, Jean-Paul Calderone <exarkun at divmod.com>wrote:

> On Mon, 18 May 2009 08:31:56 -0400, Itamar Shtull-Trauring <
> itamar at itamarst.org> wrote:
> >On Mon, 2009-05-18 at 19:34 +0800, Arun Thampi wrote:
> >> Hi guys - I'm just beginning to learn about Twisted and was wondering
> >> if there is a way to use the built-in Twisted persistence libraries
> >> such as dirdbm etc. without blocking the main event loop? I read about
> >> an approach which uses deferToThread (comment#3
> >> here: http://code.activestate.com/recipes/413609/) but if you are
> >> persisting quite often, doesn't the creation of threads on every
> >> persist-call make it very expensive?
> >
> >deferToThread uses a threadpool, so it's not *very* slow. It does slow
> >things down a bit, so it's better to do chunks of work rather than doing
> >writes separately. That being said, writing to disk in main eventloop is
> >often fast enough in practice, depending on how strong your latency
> >guarantees need to be.
> >
>
> More importantly, don't use dirdbm.  It's not a reliable data storage
> library.  In fact, you probably shouldn't use anything in
> twisted.persisted.
>
> You might be interested in <http://www.divmod.org/trac/wiki/DivmodAxiom>.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
It's better to be a pirate than join the Navy - Steve Jobs
http://arunthampi.wordpress.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090518/e868303c/attachment.html>

From jasper at peak.org  Mon May 18 17:39:07 2009
From: jasper at peak.org (Jasper)
Date: Mon, 18 May 2009 16:39:07 -0700
Subject: [Twisted-Python] Epsilon installation?
Message-ID: <4A11F19B.8070104@peak.org>

I'm interested in taking a look at divmod Vertex, which requires divmod 
Epsilon, which I downloaded from here:
http://divmod.org/trac/wiki/DivmodEpsilon

However, when I try to 'setup.py install' Epsilon, I get the following 
error:

Traceback (most recent call last):
  File "C:\Documents and 
Settings\Jasper\Desktop\Epsilon-0.5.12\setup.py", line 6, in ?
    version=version.short(),
  File "C:\Python24\lib\site-packages\twisted\python\versions.py", line 
37, in short
    svnver = self._getSVNVersion()
  File "C:\Python24\lib\site-packages\twisted\python\versions.py", line 
90, in _getSVNVersion
    doc = parse(file(ent)).documentElement
  File "C:\Python24\lib\xml\dom\minidom.py", line 1915, in parse
    return expatbuilder.parse(file)
  File "C:\Python24\lib\xml\dom\expatbuilder.py", line 928, in parse
    result = builder.parseFile(file)
  File "C:\Python24\lib\xml\dom\expatbuilder.py", line 207, in parseFile
    parser.Parse(buffer, 0)
xml.parsers.expat.ExpatError: syntax error: line 1, column 0


This appears to be happening while parsing 
.../Epsilon-0.5.12/epsilon/.svn/entries, which isn't xml at all...  
Inspecting version.py, I found I could avoid the issue by deleting the 
.svn dir.

Is this just a matter of the .svn dirs being accidentally included in 
the Epsilon release?  Or, put another way, am I masking some sort of 
meaningful version check by doing this?

-Jasper


PS  And what's up with the dom parsing of non-xml anyway?



From jasper at peak.org  Mon May 18 18:16:41 2009
From: jasper at peak.org (Jasper)
Date: Mon, 18 May 2009 17:16:41 -0700
Subject: [Twisted-Python] Epsilon installation?
In-Reply-To: <4A11F19B.8070104@peak.org>
References: <4A11F19B.8070104@peak.org>
Message-ID: <4A11FA69.6050304@peak.org>

Jasper wrote:
> I'm interested in taking a look at divmod Vertex, which requires divmod 
> Epsilon, which I downloaded from here:
> http://divmod.org/trac/wiki/DivmodEpsilon
>
> However, when I try to 'setup.py install' Epsilon, I get the following 
> error:
>   

Bah, nevermind.  I had an older version of Twisted, which I thought was 
sufficient.  I decided to take the plunge and upgrade to the most recent 
twisted, which fixes the problems I was seeing.

Now I just need to migrate my code to use the new twisted.

-Jasper




From petshmidt at googlemail.com  Tue May 19 01:51:39 2009
From: petshmidt at googlemail.com (Pet)
Date: Tue, 19 May 2009 09:51:39 +0200
Subject: [Twisted-Python] XML-RPC for paralell clients
Message-ID: <b460e9630905190051t616a949eq79965f722b387f73@mail.gmail.com>

Hi,

after playing with reactor, factory and protocol, I'm trying to
implement XML-RPC server, but it seems that it is not able to handle
several clients in parallel. If I call the slow function with first
client  and then with second client a fast function, second client
will receiver the results after slow function returned. There is no
factory for clients in server.Site() like in Protokoll? What is the
way to do that for XML-RPC?

Thanks for your help!
Pet

from twisted.web import xmlrpc, server
from twisted.application import internet

from time import sleep


PORT = 11111

class ExampleXMLRPCProtokoll(xmlrpc.XMLRPC):
    """An example object to be published."""
    def xmlrpc_echo(self, x):
        """
        Return all passed args.
        """
        return x

    def xmlrpc_add(self, a, b):
        """
        Return sum of arguments.
        """
        return a + b

    def xmlrpc_addslow(self, a, b):
        """
        Return sum of arguments. takes time
        """
        sleep(20)
        return a + b

    def xmlrpc_fault(self):
        """
        Raise a Fault indicating that the procedure should not be used.
        """
        raise xmlrpc.Fault(123, "The fault procedure is faulty.")


class ExampleXMLRPCService(internet.TCPServer):

    def __init__(self):
        print "Starting XML-RPC Service..."
        r = ExampleXMLRPCProtokoll()
        internet.TCPServer.__init__(self,PORT,server.Site(r))



def main():
    from twisted.internet import reactor
    r = ExampleXMLRPCProtokoll()
    reactor.listenTCP(PORT, server.Site(r))
    reactor.run()



if __name__ == '__main__':
    main()



From glyph at divmod.com  Tue May 19 02:59:15 2009
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 19 May 2009 08:59:15 -0000
Subject: [Twisted-Python] XML-RPC for paralell clients
In-Reply-To: <b460e9630905190051t616a949eq79965f722b387f73@mail.gmail.com>
References: <b460e9630905190051t616a949eq79965f722b387f73@mail.gmail.com>
Message-ID: <20090519085915.12555.438645077.divmod.xquotient.11518@weber.divmod.com>

On 07:51 am, petshmidt at googlemail.com wrote:
>after playing with reactor, factory and protocol, I'm trying to
>implement XML-RPC server, but it seems that it is not able to handle
>several clients in parallel. If I call the slow function with first
>client  and then with second client a fast function, second client
>will receiver the results after slow function returned. There is no
>factory for clients in server.Site() like in Protokoll? What is the
>way to do that for XML-RPC?

Whenever you perform some blocking work in a Twisted program, the 
reactor will block and no processing will occur in parallel.  This is 
not specific to XML-RPC.  server.Site() *is* a Factory for clients, 
exactly the same as any other protocol.  You can see its place in the 
inheritance hierarchy:

http://twistedmatrix.com/documents/8.2.0/api/classIndex.html#twisted.web.server.Site
>    def xmlrpc_addslow(self, a, b):
>        """
>        Return sum of arguments. takes time
>        """
>        sleep(20)
>        return a + b

The Twisted equivalent way to spell this is to return a Deferred which 
fires later from your xmlrpc_addslow method:

    from twisted.internet.task import deferLater
    from twisted.internet import reactor
    # ...
    def xmlrpc_addslow(self, a, b):
        return deferLater(reactor, 20, lambda : a + b)

However, if your "sleep(20)" is intended to simulate 20 seconds of work 
in a blocking API you can't control, you might want to return a Deferred 
that does the work in a thread instead:

    from time import sleep
    from twisted.internet.threads import deferToThread
    # ...
    def xmlrpc_addslow(self, a, b):
        def hardWork():
            sleep(20)
            return a + b
        return deferToThread(hardWork)

As with all Python programs, if you truly want CPU parallelism, then you 
will need to put the work into a subprocess instead.  You might want to 
look at the "ampoule" process-pool project: 
https://launchpad.net/ampoule

For many applications though, you shouldn't need to worry about 
parallelism this much.  Since Twisted's XMLRPC server support allows you 
to replace any method's return value with a Deferred without changing 
the externally observable behavior of XML-RPC server, you can add 
parallelism incrementally as you actually require it.  In other words, 
you probably don't need to worry about it as much as you think :).

Hope this helped!



From petshmidt at googlemail.com  Tue May 19 03:48:48 2009
From: petshmidt at googlemail.com (Pet)
Date: Tue, 19 May 2009 11:48:48 +0200
Subject: [Twisted-Python] XML-RPC for paralell clients
In-Reply-To: <20090519085915.12555.438645077.divmod.xquotient.11518@weber.divmod.com>
References: <b460e9630905190051t616a949eq79965f722b387f73@mail.gmail.com> 
	<20090519085915.12555.438645077.divmod.xquotient.11518@weber.divmod.com>
Message-ID: <b460e9630905190248l4793d658jd7695c7f4af97f9e@mail.gmail.com>

On Tue, May 19, 2009 at 10:59 AM,  <glyph at divmod.com> wrote:
> On 07:51 am, petshmidt at googlemail.com wrote:
>>after playing with reactor, factory and protocol, I'm trying to
>>implement XML-RPC server, but it seems that it is not able to handle
>>several clients in parallel. If I call the slow function with first
>>client  and then with second client a fast function, second client
>>will receiver the results after slow function returned. There is no
>>factory for clients in server.Site() like in Protokoll? What is the
>>way to do that for XML-RPC?
>
> Whenever you perform some blocking work in a Twisted program, the
> reactor will block and no processing will occur in parallel.  This is
> not specific to XML-RPC.  server.Site() *is* a Factory for clients,
> exactly the same as any other protocol.  You can see its place in the
> inheritance hierarchy:

Thank you for explanations!

I still have some questions :(
if server.Site() is Factory clients, what object is created for each
connection?
How can I ensure, that each client gets answer belonging to him and
not for other "slow" client? How can I close connection to a client?


>
> http://twistedmatrix.com/documents/8.2.0/api/classIndex.html#twisted.web.server.Site
>>    def xmlrpc_addslow(self, a, b):
>>        """
>>        Return sum of arguments. takes time
>>        """
>>        sleep(20)
>>        return a + b
>
> The Twisted equivalent way to spell this is to return a Deferred which
> fires later from your xmlrpc_addslow method:
>
>    from twisted.internet.task import deferLater
>    from twisted.internet import reactor
>    # ...
>    def xmlrpc_addslow(self, a, b):
>        return deferLater(reactor, 20, lambda : a + b)
>
> However, if your "sleep(20)" is intended to simulate 20 seconds of work
> in a blocking API you can't control, you might want to return a Deferred
> that does the work in a thread instead:
>
>    from time import sleep
>    from twisted.internet.threads import deferToThread
>    # ...
>    def xmlrpc_addslow(self, a, b):
>        def hardWork():
>            sleep(20)
>            return a + b
>        return deferToThread(hardWork)

this should be ok for me.

>
> As with all Python programs, if you truly want CPU parallelism, then you
> will need to put the work into a subprocess instead.  You might want to
> look at the "ampoule" process-pool project:
> https://launchpad.net/ampoule
>
> For many applications though, you shouldn't need to worry about
> parallelism this much.  Since Twisted's XMLRPC server support allows you
> to replace any method's return value with a Deferred without changing
> the externally observable behavior of XML-RPC server, you can add
> parallelism incrementally as you actually require it.  In other words,
> you probably don't need to worry about it as much as you think :).
>
> Hope this helped!
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From petshmidt at googlemail.com  Tue May 19 08:02:58 2009
From: petshmidt at googlemail.com (Pet)
Date: Tue, 19 May 2009 16:02:58 +0200
Subject: [Twisted-Python] XML-RPC for paralell clients
In-Reply-To: <b460e9630905190248l4793d658jd7695c7f4af97f9e@mail.gmail.com>
References: <b460e9630905190051t616a949eq79965f722b387f73@mail.gmail.com> 
	<20090519085915.12555.438645077.divmod.xquotient.11518@weber.divmod.com>
	<b460e9630905190248l4793d658jd7695c7f4af97f9e@mail.gmail.com>
Message-ID: <b460e9630905190702m6399646bn47dd336a4cceb86@mail.gmail.com>

On Tue, May 19, 2009 at 11:48 AM, Pet <petshmidt at googlemail.com> wrote:
> On Tue, May 19, 2009 at 10:59 AM,  <glyph at divmod.com> wrote:
>> On 07:51 am, petshmidt at googlemail.com wrote:
>>>after playing with reactor, factory and protocol, I'm trying to
>>>implement XML-RPC server, but it seems that it is not able to handle
>>>several clients in parallel. If I call the slow function with first
>>>client  and then with second client a fast function, second client
>>>will receiver the results after slow function returned. There is no
>>>factory for clients in server.Site() like in Protokoll? What is the
>>>way to do that for XML-RPC?
>>
>> Whenever you perform some blocking work in a Twisted program, the
>> reactor will block and no processing will occur in parallel.  This is
>> not specific to XML-RPC.  server.Site() *is* a Factory for clients,
>> exactly the same as any other protocol.  You can see its place in the
>> inheritance hierarchy:
>
> Thank you for explanations!
>
> I still have some questions :(
> if server.Site() is Factory clients, what object is created for each
> connection?
> How can I ensure, that each client gets answer belonging to him and
> not for other "slow" client? How can I close connection to a client?

deferToThread or db.runInteraction seems to be the solution for me.
The "only" thing I don't know how to do is, logging requests *after*
response was send to the client. Obviously, it should happens after a
xmlrpc_method returns, but how can accomplish this?

Thanks for any help!

>
>
>>
>> http://twistedmatrix.com/documents/8.2.0/api/classIndex.html#twisted.web.server.Site
>>>    def xmlrpc_addslow(self, a, b):
>>>        """
>>>        Return sum of arguments. takes time
>>>        """
>>>        sleep(20)
>>>        return a + b
>>
>> The Twisted equivalent way to spell this is to return a Deferred which
>> fires later from your xmlrpc_addslow method:
>>
>>    from twisted.internet.task import deferLater
>>    from twisted.internet import reactor
>>    # ...
>>    def xmlrpc_addslow(self, a, b):
>>        return deferLater(reactor, 20, lambda : a + b)
>>
>> However, if your "sleep(20)" is intended to simulate 20 seconds of work
>> in a blocking API you can't control, you might want to return a Deferred
>> that does the work in a thread instead:
>>
>>    from time import sleep
>>    from twisted.internet.threads import deferToThread
>>    # ...
>>    def xmlrpc_addslow(self, a, b):
>>        def hardWork():
>>            sleep(20)
>>            return a + b
>>        return deferToThread(hardWork)
>
> this should be ok for me.
>
>>
>> As with all Python programs, if you truly want CPU parallelism, then you
>> will need to put the work into a subprocess instead.  You might want to
>> look at the "ampoule" process-pool project:
>> https://launchpad.net/ampoule
>>
>> For many applications though, you shouldn't need to worry about
>> parallelism this much.  Since Twisted's XMLRPC server support allows you
>> to replace any method's return value with a Deferred without changing
>> the externally observable behavior of XML-RPC server, you can add
>> parallelism incrementally as you actually require it.  In other words,
>> you probably don't need to worry about it as much as you think :).
>>
>> Hope this helped!
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>



From glyph at divmod.com  Tue May 19 09:51:03 2009
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 19 May 2009 15:51:03 -0000
Subject: [Twisted-Python] Upcoming Sprint
Message-ID: <20090519155103.12555.865218086.divmod.xquotient.11545@weber.divmod.com>


Hi folks,

It's getting to be about the time for another Twisted sprint.

Rumor has it that long-time Twisted hacker Kevin Turner will be in 
Cambridge the weekend of the 30th-31st, so we'll be hosting a sprint one 
of those days.  If this rumor is true, I'd appreciate it if our esteemed 
visitor could give us some feedback as to which day he'll be free :).



From patrick.thomson at gmail.com  Tue May 19 11:17:01 2009
From: patrick.thomson at gmail.com (Patrick Thomson)
Date: Tue, 19 May 2009 18:17:01 +0100
Subject: [Twisted-Python] offer of adding IRCD support to words.protocol.irc
Message-ID: <5eaa38050905191017v3bd0eb28jad1ef1b152b51c1c@mail.gmail.com>

I'm currently about to embark on building something from twisted which
has an IRCD, and I have found the capacity to run IRC servers is
lacking, in contrast to the excellent client/bot backend code.

I've found several other twisted projects already implement an IRCD,
and whilst I'm reinventing the wheel, I may as well go the extra mile
to get my code suitable for inclusion.

I wouldn't be asking for a lot, just some general guidelines (e.g. I
know my patch probably won't be accepted
without test code as well).

-- 
Patrick



From exarkun at divmod.com  Tue May 19 11:26:08 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 19 May 2009 13:26:08 -0400
Subject: [Twisted-Python] offer of adding IRCD support to
 words.protocol.irc
In-Reply-To: <5eaa38050905191017v3bd0eb28jad1ef1b152b51c1c@mail.gmail.com>
Message-ID: <20090519172608.21531.657862391.divmod.quotient.23394@henry.divmod.com>

On Tue, 19 May 2009 18:17:01 +0100, Patrick Thomson <patrick.thomson at gmail.com> wrote:
>I'm currently about to embark on building something from twisted which
>has an IRCD, and I have found the capacity to run IRC servers is
>lacking, in contrast to the excellent client/bot backend code.
>
>I've found several other twisted projects already implement an IRCD,
>and whilst I'm reinventing the wheel, I may as well go the extra mile
>to get my code suitable for inclusion.

Hi Patrick,

Cool!

I want to point you at what happens when you run this command:

  twistd -n words --irc-port 6667 --group irctest --auth=memory:username:password

Ideally, an IRCD in Twisted would be based on this (which certainly needs
some work).

>I wouldn't be asking for a lot, just some general guidelines (e.g. I
>know my patch probably won't be accepted
>without test code as well).

Tests are probably the most important single thing.  We also ask for full
docstring coverage (ie, docstrings for every class, method, function).  It
would also be best if you could structure your contributions incrementally.
Twenty patches of a couple hundred lines each is vastly preferable to one
patch of several thousand lines.

You can find much more detailed information on the wiki,

  http://twistedmatrix.com/trac/wiki/TwistedDevelopment

If anything there needs clarification, please ask. :)

Jean-Paul



From roastie at rochester.rr.com  Wed May 20 08:12:28 2009
From: roastie at rochester.rr.com (Uncle Roastie)
Date: Wed, 20 May 2009 09:12:28 -0500
Subject: [Twisted-Python] First time install of Twisted fails
Message-ID: <793a17940905200712x1ed8e91bob4087246d63981f5@mail.gmail.com>

I'm trying to do an install of Twisted for Python 2.5.4

on Windows XP.  I installed PyCrypto, OpenSSL for Windows,

and PyOpenSLL.   When I enter the Python interpreter

and say



>>> import OpenSLL



I get the following error:



"The procedure entry point SSL_CTX_set_info_callback could not be

located in the dynamic link library ssleay32.dll."



The DLL lives inside the OpenSLL bin directory, which is also on the search
PATH.



Any ideas?



Uncle Roastie
roastie at rochester.rr.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090520/3a41a3c5/attachment.html>

From exarkun at divmod.com  Wed May 20 09:06:08 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 20 May 2009 11:06:08 -0400
Subject: [Twisted-Python] First time install of Twisted fails
In-Reply-To: <793a17940905200712x1ed8e91bob4087246d63981f5@mail.gmail.com>
Message-ID: <20090520150608.21531.2007270539.divmod.quotient.23961@henry.divmod.com>

On Wed, 20 May 2009 09:12:28 -0500, Uncle Roastie <roastie at rochester.rr.com> wrote:
>I'm trying to do an install of Twisted for Python 2.5.4
>on Windows XP.  I installed PyCrypto, OpenSSL for Windows,
>and PyOpenSLL.   When I enter the Python interpreter
>and say
>
>>>> import OpenSLL
>
>I get the following error:
>
>"The procedure entry point SSL_CTX_set_info_callback could not be
>located in the dynamic link library ssleay32.dll."
>
>The DLL lives inside the OpenSLL bin directory, which is also on the search
>PATH.
>
>Any ideas?
>

This question would be better directed at the pyOpenSSL mailing list, I
think.  pyOpenSSL is not part of Twisted, and this seems to be a pyOpenSSL
installation issue.

Additional important information you should include:

  - what version did you try to install?
  - which package did you try to install (full file name or download URL)?

Jean-Paul



From mithrandi at mithrandi.net  Wed May 20 16:10:30 2009
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Thu, 21 May 2009 00:10:30 +0200
Subject: [Twisted-Python] Consistent interfaces to asynchronous
	partially-available services using Deferreds and state
	machines (was Re: Another approach to allowing __init__ to
	work with Deferreds)
In-Reply-To: <18953.24553.54020.283769@jon.es>
References: <18952.20484.534748.921408@jon.es>
	<20090512075020.12555.1526761106.divmod.xquotient.11469@weber.divmod.com>
	<18953.24553.54020.283769@jon.es>
Message-ID: <f5eea9170905201510m6b50dc34u100c429f65bc737f@mail.gmail.com>

On Tue, May 12, 2009 at 1:39 PM, Terry Jones <terry at jon.es> wrote:
> If Python allowed me to return a deferred from __init__, my problem would
> vanish.  That's not going to happen though, I know :-)

Well, if you /really/ want to, you can implement that; something like:

####
from twisted.internet import defer

class DeferredClass(object):
    def __new__(cls, *a, **kw):
        inst = super(DeferredClass, cls).__new__(cls, *a, **kw)
        return defer.maybeDeferred(inst.__init__, *a,
**kw).addCallback(lambda ign: inst)
####

Example usage:

####
class Example(DeferredClass):
    def __init__(self, value):
        def _cb(value):
            self.value = value
        return defer.succeed(value).addCallback(_cb)

def _printIt(x):
    print x.value

Example(42).addCallback(_printIt)  # Prints "42"
####

Of course, this doesn't implement your magic wrapping behaviour, so
maybe that's not what you meant.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar



From phil at bubblehouse.org  Thu May 21 08:37:16 2009
From: phil at bubblehouse.org (Phil Christensen)
Date: Thu, 21 May 2009 10:37:16 -0400
Subject: [Twisted-Python] Consistent interfaces to asynchronous
	partially-available services using Deferreds and state
	machines (was Re: Another approach to allowing __init__ to
	work with Deferreds)
In-Reply-To: <f5eea9170905201510m6b50dc34u100c429f65bc737f@mail.gmail.com>
References: <18952.20484.534748.921408@jon.es>
	<20090512075020.12555.1526761106.divmod.xquotient.11469@weber.divmod.com>
	<18953.24553.54020.283769@jon.es>
	<f5eea9170905201510m6b50dc34u100c429f65bc737f@mail.gmail.com>
Message-ID: <7BBB735D-BF25-4CF1-ABBC-658D60DD5BF2@bubblehouse.org>

On May 20, 2009, at 6:10 PM, Tristan Seligmann wrote:
> On Tue, May 12, 2009 at 1:39 PM, Terry Jones <terry at jon.es> wrote:
>> If Python allowed me to return a deferred from __init__, my problem  
>> would
>> vanish.  That's not going to happen though, I know :-)
>
> Well, if you /really/ want to, you can implement that; something like:
>
> ####
> from twisted.internet import defer
>
> class DeferredClass(object):
>    def __new__(cls, *a, **kw):
>        inst = super(DeferredClass, cls).__new__(cls, *a, **kw)
>        return defer.maybeDeferred(inst.__init__, *a,
> **kw).addCallback(lambda ign: inst)
> ####

That's a really succinct solution to the problem. I never even thought  
of using __new__ for this.

I'm inclined to say this is a better solution than the decorator-based  
one I sent along a few days ago, just because it's so simple. OTOH, my  
approach has one additional feature that I think is pretty nice, which  
is that you can call instance methods on the init-deferred object  
before the __init__ callback has been triggered, even if they need  
some of that initialized state (thus returning a Deferred).

-phil



From keturn at keturn.net  Thu May 21 22:43:39 2009
From: keturn at keturn.net (Kevin Turner)
Date: Thu, 21 May 2009 21:43:39 -0700
Subject: [Twisted-Python] Upcoming Sprint
In-Reply-To: <20090519155103.12555.865218086.divmod.xquotient.11545@weber.divmod.com>
References: <20090519155103.12555.865218086.divmod.xquotient.11545@weber.divmod.com>
Message-ID: <1242967419.7071.49491.camel@grinky>

Hey, that's me!  I'll be more free on the 30th than the 31st.  Even more
free on June 1st, but maybe you sprinters have day jobs or something.

But I do look forward to participating in a Twisted sprint.  Our
attempts to host code sprints here in Portland have been irregular at
best.





From thomas at apestaart.org  Fri May 22 09:18:41 2009
From: thomas at apestaart.org (Thomas Vander Stichele)
Date: Fri, 22 May 2009 17:18:41 +0200
Subject: [Twisted-Python] Twisted training
Message-ID: <1243005521.17718.136.camel@ana.amantes>

Hi people,

Is there anyone in the community who is available for a Twisted training
job ? Our team of developers is growing, and we are considering our
options on how we can smooth out their learning cycle.  Getting a
focused Twisted training is definately something we're considering.

The training would be on-site in Barcelona, Europe, if that helps you
make your decision :)

Feel free to either reply publically or privately.

Thanks
Thomas


-- 
I won't leave you
all you have is that spell
cast it will you
--
GStreamer - bringing multimedia to your desktop
http://gstreamer.freedesktop.org/





From thomas at apestaart.org  Fri May 22 09:19:28 2009
From: thomas at apestaart.org (Thomas Vander Stichele)
Date: Fri, 22 May 2009 17:19:28 +0200
Subject: [Twisted-Python] Available for short-term Twisted consulting,
	e.g. training, design (but not coding)
In-Reply-To: <1234894512.13141.25.camel@pintsize>
References: <1234894512.13141.25.camel@pintsize>
Message-ID: <1243005568.17718.138.camel@ana.amantes>

Hi Itamar,

I just sent out a mail to the list to ask for training, but I also saw
your mail from February.

I hope your RSI is better by now, but in case you'd still consider
training, feel free to let me know!

Regards,
Thomas

On Tue, 2009-02-17 at 13:15 -0500, Itamar Shtull-Trauring wrote:
> Need help with Twisted, distributed systems or or just plain old 
> software architecture?
> 
> Due to a repetitive strain injury I am unable to type much (though
> I am slowly improving), and so I'm taking time off of work to recover.
> As a result I am available for short-term consulting until I recover,
> e.g. training or design work, assuming of course it does not involve
> any typing.
> 
> I've worked on Twisted itself, as well as projects ranging from 
> high-performance distributed C++ servers, to an access control framework
> for an airline reservation system, to a multimedia kiosk system for the 
> Israel Museum in Jerusalem:
> http://itamarst.org/resume.html
> 
> Send me an e-mail if you're interested.
> 
> -- Itamar Shtull-Trauring
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-- 
if you ever lay a finger on my left side
if you ever lay a finger on me I will open
--
Flumotion - the only way to stream!
http://www.flumotion.net/





From glyph at divmod.com  Sat May 23 03:25:39 2009
From: glyph at divmod.com (glyph at divmod.com)
Date: Sat, 23 May 2009 09:25:39 -0000
Subject: [Twisted-Python] Upcoming Sprint
In-Reply-To: <1242967419.7071.49491.camel@grinky>
References: <20090519155103.12555.865218086.divmod.xquotient.11545@weber.divmod.com>
	<1242967419.7071.49491.camel@grinky>
Message-ID: <20090523092539.12555.1776739170.divmod.xquotient.11563@weber.divmod.com>




On 22 May, 04:43 am, keturn at keturn.net wrote:
>Hey, that's me!  I'll be more free on the 30th than the 31st.  Even 
>more
>free on June 1st, but maybe you sprinters have day jobs or something.

See you on the 30th then.  I believe most sprinters do have day jobs :).
>But I do look forward to participating in a Twisted sprint.  Our
>attempts to host code sprints here in Portland have been irregular at
>best.

Yeah, for a while it was the same here.  I'm impressed at how 
predictable our sprints have been lately, though.  Looking forward to 
seeing you!

Who else is coming?



From exarkun at twistedmatrix.com  Sat May 23 22:05:11 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 24 May 2009 04:05:11 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1243137911.98.1460944318@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090524/0a0c8b66/attachment.html>

From muaazhussain128 at gmail.com  Sun May 24 00:15:15 2009
From: muaazhussain128 at gmail.com (Muaaz Hussain)
Date: Sun, 24 May 2009 09:15:15 +0300
Subject: [Twisted-Python] My twisted web server fall down
Message-ID: <1ac8ac10905232315u7090061ei457671eddfce81d5@mail.gmail.com>

Dear all,
I ran penetration testing tool against my twisted web server , the
tool used to make a huge number of threads, all that threads make a
connection to the twisted concurrently.
when I made the number of threads more than 1024 the twisted web
server eventually has fall down.
is there any method to let the twisted web server to limit the
concurrent connection per second or per host.



From adelagon at gmail.com  Sun May 24 00:49:37 2009
From: adelagon at gmail.com (Alvin Delagon)
Date: Sun, 24 May 2009 14:49:37 +0800
Subject: [Twisted-Python] My twisted web server fall down
In-Reply-To: <1ac8ac10905232315u7090061ei457671eddfce81d5@mail.gmail.com>
References: <1ac8ac10905232315u7090061ei457671eddfce81d5@mail.gmail.com>
Message-ID: <7a01f6c00905232349h48379791h8b61a9562f3dea70@mail.gmail.com>

Are logs saying something like this: "Too Many Open Files"? If it is, you
have to setup your file descriptor limit (ulimit -n) first before starting
the app.



On Sun, May 24, 2009 at 2:15 PM, Muaaz Hussain <muaazhussain128 at gmail.com>wrote:

> Dear all,
> I ran penetration testing tool against my twisted web server , the
> tool used to make a huge number of threads, all that threads make a
> connection to the twisted concurrently.
> when I made the number of threads more than 1024 the twisted web
> server eventually has fall down.
> is there any method to let the twisted web server to limit the
> concurrent connection per second or per host.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
http://www.alvinatorsplayground.blogspot.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090524/abc9c680/attachment.html>

From micahel at gmail.com  Sun May 24 03:24:52 2009
From: micahel at gmail.com (Michael Hudson)
Date: Sun, 24 May 2009 10:24:52 +0100
Subject: [Twisted-Python] My twisted web server fall down
In-Reply-To: <1ac8ac10905232315u7090061ei457671eddfce81d5@mail.gmail.com>
References: <1ac8ac10905232315u7090061ei457671eddfce81d5@mail.gmail.com>
Message-ID: <aa0dfd860905240224j163c9c80g66f4f1252efedab4@mail.gmail.com>

2009/5/24 Muaaz Hussain <muaazhussain128 at gmail.com>:
> Dear all,
> I ran penetration testing tool against my twisted web server , the
> tool used to make a huge number of threads, all that threads make a
> connection to the twisted concurrently.
> when I made the number of threads more than 1024 the twisted web
> server eventually has fall down.
> is there any method to let the twisted web server to limit the
> concurrent connection per second or per host.

The twisted.protocols.policies module contains factories that limit
connections per peer or total connections:
http://twistedmatrix.com/documents/current/api/twisted.protocols.policies.html

There isn't one for connections per second, but I don't suppose it
would be too hard to write (and I might get around to writing it one
of these days, we could use it).

If you're really worried about attacks, it's probably better to do
this at the iptables/kernel level if you can though.

Cheers,
mwh



From rlotun at gmail.com  Sun May 24 03:39:19 2009
From: rlotun at gmail.com (Reza Lotun)
Date: Sun, 24 May 2009 10:39:19 +0100
Subject: [Twisted-Python] My twisted web server fall down
In-Reply-To: <7a01f6c00905232349h48379791h8b61a9562f3dea70@mail.gmail.com>
References: <1ac8ac10905232315u7090061ei457671eddfce81d5@mail.gmail.com>
	<7a01f6c00905232349h48379791h8b61a9562f3dea70@mail.gmail.com>
Message-ID: <95bb10690905240239k30b1ec5ck7383bdc6088d1506@mail.gmail.com>

On Sun, May 24, 2009 at 7:49 AM, Alvin Delagon <adelagon at gmail.com> wrote:
> Are logs saying something like this: "Too Many Open Files"? If it is, you
> have to setup your file descriptor limit (ulimit -n) first before starting
> the app.

In addition to changing ulimit -n values you should also take a look
at your kernel settings in sysctl and check that your fs.file-max
setting is something suitably high (this is assuming you're using
linux...).

Reza

-- 
Reza Lotun
+44 (0)7521 310 763
rlotun at gmail.com



From glyph at divmod.com  Sun May 24 04:39:24 2009
From: glyph at divmod.com (glyph at divmod.com)
Date: Sun, 24 May 2009 10:39:24 -0000
Subject: [Twisted-Python] My twisted web server fall down
In-Reply-To: <1ac8ac10905232315u7090061ei457671eddfce81d5@mail.gmail.com>
References: <1ac8ac10905232315u7090061ei457671eddfce81d5@mail.gmail.com>
Message-ID: <20090524103924.12555.176962757.divmod.xquotient.11582@weber.divmod.com>


On 06:15 am, muaazhussain128 at gmail.com wrote:
>I ran penetration testing tool against my twisted web server , the
>tool used to make a huge number of threads, all that threads make a
>connection to the twisted concurrently.
>when I made the number of threads more than 1024 the twisted web
>server eventually has fall down.
>is there any method to let the twisted web server to limit the
>concurrent connection per second or per host.

Would you mind answering a few questions more precisely -

What version of Twisted are you using?  8.2?

What penetration testing tool were you using?  Exactly what options did 
you give it?

What is your web server doing?  Just serving files, or some dynamic 
content of your own design?  Can you include your server's 
configuration?

Is there anything present in the logs before the server dies?

Can you try this with a recent snapshot of Twisted trunk and see if you 
get the same results?

There have been a few bugs in this area.  I *think* we've already 
addressed the particular problem of the server dying when there are 
simply too many connections, but I'd really like to make sure.  As such, 
I'd like to be able to run exactly the same test that you did :).



From bra at fsn.hu  Sun May 24 14:21:19 2009
From: bra at fsn.hu (Attila Nagy)
Date: Sun, 24 May 2009 22:21:19 +0200
Subject: [Twisted-Python] Processpool recommendation (for scaling to
	multiple CPUs)
Message-ID: <4A19AC3F.7030500@fsn.hu>

Hello,

Is there any efficient built-in machinery in twisted for running a (TCP, 
UDP or unix domain socket) service in a connection multiplexer->worker 
processes manner? Or if there isn't, what is the recommended way of 
doing this? (any examples maybe?)

I've got some CPU scalability issues (the application became CPU bound, 
but there are a lot more CPUs, which can't be used because of the 
uniprocess nature), threading is not a solution, so the next logical 
move could be starting multiple twisted reactors in different processes 
and transparently switching incoming connections between them.
There is no need for intra-process communication, I need only a thing, 
which does the process starting/stopping, connection multiplexing in a 
clean way.

Thanks,



From glyph at divmod.com  Sun May 24 15:46:39 2009
From: glyph at divmod.com (glyph at divmod.com)
Date: Sun, 24 May 2009 21:46:39 -0000
Subject: [Twisted-Python] Processpool recommendation (for scaling
	to	multiple CPUs)
In-Reply-To: <4A19AC3F.7030500@fsn.hu>
References: <4A19AC3F.7030500@fsn.hu>
Message-ID: <20090524214639.12555.379159608.divmod.xquotient.11583@weber.divmod.com>


On 08:21 pm, bra at fsn.hu wrote:
>I've got some CPU scalability issues (the application became CPU bound,
>but there are a lot more CPUs, which can't be used because of the
>uniprocess nature), threading is not a solution, so the next logical
>move could be starting multiple twisted reactors in different processes
>and transparently switching incoming connections between them.
>There is no need for intra-process communication, I need only a thing,
>which does the process starting/stopping, connection multiplexing in a
>clean way.

Have you looked at Ampoule?  https://launchpad.net/ampoule/



From esteve at sindominio.net  Mon May 25 02:04:01 2009
From: esteve at sindominio.net (Esteve Fernandez)
Date: Mon, 25 May 2009 10:04:01 +0200 (CEST)
Subject: [Twisted-Python] Twisted at UDS Karmic
Message-ID: <39113.80.67.104.102.1243238641.squirrel@webmail.sindominio.net>

Hi all,

I know quite a few Twisted developers love Ubuntu, so... is any of you here in
Barcelona for the Ubuntu Developer Summit for Karmic Koala? I'll be attending
some sprints, primarily about Ubuntu Server, messaging, cloud computing, etc.

Cheers.




From radix at twistedmatrix.com  Mon May 25 03:04:51 2009
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 25 May 2009 11:04:51 +0200
Subject: [Twisted-Python] Twisted at UDS Karmic
In-Reply-To: <39113.80.67.104.102.1243238641.squirrel@webmail.sindominio.net>
References: <39113.80.67.104.102.1243238641.squirrel@webmail.sindominio.net>
Message-ID: <60ed19d40905250204s34f93fc0i50384ab726e194b1@mail.gmail.com>

On Mon, May 25, 2009 at 10:04 AM, Esteve Fernandez
<esteve at sindominio.net> wrote:
> Hi all,
>
> I know quite a few Twisted developers love Ubuntu, so... is any of you here in
> Barcelona for the Ubuntu Developer Summit for Karmic Koala? I'll be attending
> some sprints, primarily about Ubuntu Server, messaging, cloud computing, etc.


I'm here! Also Thomas Hervé, Duncan McGreggor, Jonathan Lange, Andrew
Bennetts, Jamu Kakar, and maybe others.

I'm in a Cloud Computing session right now :-)


-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
http://canonical.com/



From adelagon at gmail.com  Mon May 25 03:24:21 2009
From: adelagon at gmail.com (Alvin Delagon)
Date: Mon, 25 May 2009 17:24:21 +0800
Subject: [Twisted-Python] Twisted at UDS Karmic
In-Reply-To: <60ed19d40905250204s34f93fc0i50384ab726e194b1@mail.gmail.com>
References: <39113.80.67.104.102.1243238641.squirrel@webmail.sindominio.net>
	<60ed19d40905250204s34f93fc0i50384ab726e194b1@mail.gmail.com>
Message-ID: <7a01f6c00905250224h609670cdhcbfd4126679fa976@mail.gmail.com>

Any Fluendo/Flumotion guys coming? You guys are close by, it might be a good
idea to attend.

---
Alvin

On Mon, May 25, 2009 at 5:04 PM, Christopher Armstrong <
radix at twistedmatrix.com> wrote:

> On Mon, May 25, 2009 at 10:04 AM, Esteve Fernandez
> <esteve at sindominio.net> wrote:
> > Hi all,
> >
> > I know quite a few Twisted developers love Ubuntu, so... is any of you
> here in
> > Barcelona for the Ubuntu Developer Summit for Karmic Koala? I'll be
> attending
> > some sprints, primarily about Ubuntu Server, messaging, cloud computing,
> etc.
>
>
> I'm here! Also Thomas Hervé, Duncan McGreggor, Jonathan Lange, Andrew
> Bennetts, Jamu Kakar, and maybe others.
>
> I'm in a Cloud Computing session right now :-)
>
>
> --
> Christopher Armstrong
> http://radix.twistedmatrix.com/
> http://planet-if.com/
> http://canonical.com/
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
http://www.alvinatorsplayground.blogspot.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090525/5764675c/attachment.html>

From esteve at sindominio.net  Mon May 25 03:30:06 2009
From: esteve at sindominio.net (Esteve Fernandez)
Date: Mon, 25 May 2009 11:30:06 +0200 (CEST)
Subject: [Twisted-Python] Twisted at UDS Karmic
In-Reply-To: <60ed19d40905250204s34f93fc0i50384ab726e194b1@mail.gmail.com>
References: <39113.80.67.104.102.1243238641.squirrel@webmail.sindominio.net>
	<60ed19d40905250204s34f93fc0i50384ab726e194b1@mail.gmail.com>
Message-ID: <54119.80.67.104.102.1243243806.squirrel@webmail.sindominio.net>

> On Mon, May 25, 2009 at 10:04 AM, Esteve Fernandez
> <esteve at sindominio.net> wrote:
>> Hi all,
>>
>> I know quite a few Twisted developers love Ubuntu, so... is any of you here
>> in
>> Barcelona for the Ubuntu Developer Summit for Karmic Koala? I'll be
>> attending
>> some sprints, primarily about Ubuntu Server, messaging, cloud computing,
>> etc.
>
>
> I'm here! Also Thomas Hervé, Duncan McGreggor, Jonathan Lange, Andrew
> Bennetts, Jamu Kakar, and maybe others.
>
> I'm in a Cloud Computing session right now :-)

Heh, so am I :-) I'm wearing a PyCon t-shirt.

I think I spotted Duncan, five people in between him and me.

Cheers.




From micahel at gmail.com  Mon May 25 03:40:05 2009
From: micahel at gmail.com (Michael Hudson)
Date: Mon, 25 May 2009 10:40:05 +0100
Subject: [Twisted-Python] Twisted at UDS Karmic
In-Reply-To: <60ed19d40905250204s34f93fc0i50384ab726e194b1@mail.gmail.com>
References: <39113.80.67.104.102.1243238641.squirrel@webmail.sindominio.net>
	<60ed19d40905250204s34f93fc0i50384ab726e194b1@mail.gmail.com>
Message-ID: <aa0dfd860905250240v1b9a68i1f507808738f2b4d@mail.gmail.com>

2009/5/25 Christopher Armstrong <radix at twistedmatrix.com>:
> On Mon, May 25, 2009 at 10:04 AM, Esteve Fernandez
> <esteve at sindominio.net> wrote:
>> Hi all,
>>
>> I know quite a few Twisted developers love Ubuntu, so... is any of you here in
>> Barcelona for the Ubuntu Developer Summit for Karmic Koala? I'll be attending
>> some sprints, primarily about Ubuntu Server, messaging, cloud computing, etc.
>
>
> I'm here! Also Thomas Hervé, Duncan McGreggor, Jonathan Lange, Andrew
> Bennetts, Jamu Kakar, and maybe others.
>
> I'm in a Cloud Computing session right now :-)

I'm here too (also see
http://people.ubuntu.com/~mwh/canonical-men-of-twistery.jpg)

Cheers,
mwh



From exarkun at divmod.com  Tue May 26 14:36:18 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 26 May 2009 16:36:18 -0400
Subject: [Twisted-Python] Upcoming Sprint
In-Reply-To: <20090523092539.12555.1776739170.divmod.xquotient.11563@weber.divmod.com>
Message-ID: <20090526203618.21531.1031701929.divmod.quotient.25824@henry.divmod.com>

On Sat, 23 May 2009 09:25:39 -0000, glyph at divmod.com wrote:
>
>
>
>On 22 May, 04:43 am, keturn at keturn.net wrote:
>>Hey, that's me!  I'll be more free on the 30th than the 31st.  Even
>>more
>>free on June 1st, but maybe you sprinters have day jobs or something.
>
>See you on the 30th then.  I believe most sprinters do have day jobs :).
>>But I do look forward to participating in a Twisted sprint.  Our
>>attempts to host code sprints here in Portland have been irregular at
>>best.
>
>Yeah, for a while it was the same here.  I'm impressed at how
>predictable our sprints have been lately, though.  Looking forward to
>seeing you!
>
>Who else is coming?
>

I'll be there.

Jean-Paul



From larsivi at gmail.com  Wed May 27 07:08:49 2009
From: larsivi at gmail.com (Lars Ivar Igesund)
Date: Wed, 27 May 2009 15:08:49 +0200
Subject: [Twisted-Python] Reactor callback from the wrong thread
Message-ID: <24e981170905270608p25f6057fl2ad2b7f71cc2fac6@mail.gmail.com>

Hi!

I have an issue where the reactor calls the callback from a different
thread than the one the reactor is running in.

The usecase is as follows;

We are running tests using PyFit (Fitnesse), and where some of the
tests depends on receiving SNMP traps in the background. So at the
start we start a trap deamon defined as

class TrapDeamon(Thread, netsnmp.Session)

We use the pynetsnmp.twistedsnmp package and has a run() method that
looks like this

def run(self):
    self.awaitTraps(self.hostPort)
    twistedsnmp.updateReactor()
    reactor.run(installSignalHandlers=0)

In the callback from the reactor, we get the pdu of the trap which is
then sent into a trap buffer. On the PyFit side of things, we execute
some commands, and at some points we need a confirmation from a trap
before we can continue. This is done by waiting on a queue
(Queue.Queue). The trap buffer has a register over queues and awaited
trap OID's, and when the correct one is added to the buffer from the
reactor callback, it is put onto the queue, the test rejoice, and
continues.

However, I noticed that fairly often (say every 3rd wait), the wait
timed out even though I had seen the trap on wireshark. So I improved
the logging, and noticed that in the cases where the wait timed out,
the reactor callback for the trap I waited for happened in the main
thread (at least main thread id is reported by python logging), and
thus did not appear until immediately after the wait had failed and
unblocked. Most of the trap callbacks (both before and after these
misses) happens in the correct (reactor) thread though.

What can cause this and how may I debug it? AFAIK, PyFit does not use
twisted or threading at all, and we only have two simple background
threads our selves in addition to the one running the trap deamon.

Best regards,
Lars Ivar Igesund



From bra at fsn.hu  Wed May 27 09:28:40 2009
From: bra at fsn.hu (Attila Nagy)
Date: Wed, 27 May 2009 17:28:40 +0200
Subject: [Twisted-Python] Processpool recommendation (for
 scaling	to	multiple CPUs)
In-Reply-To: <20090524214639.12555.379159608.divmod.xquotient.11583@weber.divmod.com>
References: <4A19AC3F.7030500@fsn.hu>
	<20090524214639.12555.379159608.divmod.xquotient.11583@weber.divmod.com>
Message-ID: <4A1D5C28.8050307@fsn.hu>

glyph at divmod.com wrote:
> On 08:21 pm, bra at fsn.hu wrote:
>   
>> I've got some CPU scalability issues (the application became CPU bound,
>> but there are a lot more CPUs, which can't be used because of the
>> uniprocess nature), threading is not a solution, so the next logical
>> move could be starting multiple twisted reactors in different processes
>> and transparently switching incoming connections between them.
>> There is no need for intra-process communication, I need only a thing,
>> which does the process starting/stopping, connection multiplexing in a
>> clean way.
>>     
>
> Have you looked at Ampoule?  https://launchpad.net/ampoule/
>   
Wasn't aware of that.
Will do, thanks!



From exarkun at divmod.com  Wed May 27 09:43:22 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 27 May 2009 11:43:22 -0400
Subject: [Twisted-Python] Reactor callback from the wrong thread
In-Reply-To: <24e981170905270608p25f6057fl2ad2b7f71cc2fac6@mail.gmail.com>
Message-ID: <20090527154322.21531.781574174.divmod.quotient.26327@henry.divmod.com>

On Wed, 27 May 2009 15:08:49 +0200, Lars Ivar Igesund <larsivi at gmail.com> wrote:
>Hi!
>
>I have an issue where the reactor calls the callback from a different
>thread than the one the reactor is running in.

Generally speaking, the only callbacks the reactor invokes are protocol
methods (like dataReceived and connectionLost) and timed events (things
you pass to reactor.callLater).  It always calls these in the thread it
is running in.  What callbacks are you seeing be invoked in the "wrong"
thread?

> [snip]
>
>What can cause this and how may I debug it? AFAIK, PyFit does not use
>twisted or threading at all, and we only have two simple background
>threads our selves in addition to the one running the trap deamon.

The most likely explanation is that your code (perhaps by way of PyFit,
I'm not sure -- I've never used PyFit) is calling a Twisted API from a
thread other than the reactor thread.  So, examine all the places you
call Twisted APIs (including APIs in twistedsnmp which may call Twisted
APIs) and make sure they're only run in the reactor thread.

Jean-Paul



From ntoper at gmail.com  Wed May 27 10:16:52 2009
From: ntoper at gmail.com (Nicolas Toper)
Date: Wed, 27 May 2009 11:16:52 -0500
Subject: [Twisted-Python] ESMTP: method DIGEST-MD5 and IP authenticator
Message-ID: <fcbb46050905270916o1b446a56l864e847a545fcc4f@mail.gmail.com>

Hi,

I am going to add in the ESMTP class these two authentications
methods. Are you interested in a patch?

Best,
Nico
http://www.deviant-abstraction.net



From charnedn at muohio.edu  Wed May 27 12:39:45 2009
From: charnedn at muohio.edu (Dan)
Date: Wed, 27 May 2009 14:39:45 -0400
Subject: [Twisted-Python] Twisted protocol as Django data source
Message-ID: <D7D38F6A-59A3-4ABB-87AD-96E8EBC5451A@muohio.edu>

Hi all,

I have an application written in Twisted which multiplexes data from a  
variety of pieces of specialized hardware, and I'd like to make the  
live stream of this information viewable through a webpage.  
Unfortunately, on our server, port 80 is already taken by an Apache +  
mod_python + Django stack with which we host a number of webpages.

Ideally, I'd like to be able to write a quick Django app in which just  
import my Twisted protocol, connect to my network, and start streaming  
data. However, much googling has lead me to believe that this is  
unlikely to actually work. (Particularly, http://twistedmatrix.com/pipermail/twisted-web/2007-March/003311.html 
, which says that Twisted is simply not mod_python-friendly.)

The options I've thought of include using Twisted's builtin web server  
a nonstandard port, mod_proxy, or writing a Django app which just  
polls a database repeatedly and altering my Twisted app so it  
repeatedly does an UPDATE. All of these solutions feel hacky to me, so  
I'd like to ask you, the list, how you'd go about doing this.

Thanks,
Dan



From gtaylor at clemson.edu  Wed May 27 13:12:38 2009
From: gtaylor at clemson.edu (Greg Taylor)
Date: Wed, 27 May 2009 15:12:38 -0400
Subject: [Twisted-Python] Twisted protocol as Django data source
In-Reply-To: <D7D38F6A-59A3-4ABB-87AD-96E8EBC5451A@muohio.edu>
References: <D7D38F6A-59A3-4ABB-87AD-96E8EBC5451A@muohio.edu>
Message-ID: <8de369d70905271212g7aa36675yf6ff093521ace3f7@mail.gmail.com>

You might want to look into Orbited, there are a number of Django examples
out there:

http://www.orbited.org

On Wed, May 27, 2009 at 2:39 PM, Dan <charnedn at muohio.edu> wrote:

> Hi all,
>
> I have an application written in Twisted which multiplexes data from a
> variety of pieces of specialized hardware, and I'd like to make the
> live stream of this information viewable through a webpage.
> Unfortunately, on our server, port 80 is already taken by an Apache +
> mod_python + Django stack with which we host a number of webpages.
>
> Ideally, I'd like to be able to write a quick Django app in which just
> import my Twisted protocol, connect to my network, and start streaming
> data. However, much googling has lead me to believe that this is
> unlikely to actually work. (Particularly,
> http://twistedmatrix.com/pipermail/twisted-web/2007-March/003311.html
> , which says that Twisted is simply not mod_python-friendly.)
>
> The options I've thought of include using Twisted's builtin web server
> a nonstandard port, mod_proxy, or writing a Django app which just
> polls a database repeatedly and altering my Twisted app so it
> repeatedly does an UPDATE. All of these solutions feel hacky to me, so
> I'd like to ask you, the list, how you'd go about doing this.
>
> Thanks,
> Dan
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Greg Taylor
Clemson University, Class of 2009
Cell: (864) 888-7964
http://gc-taylor.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090527/42557801/attachment.html>

From listsin at integrateddevcorp.com  Wed May 27 13:35:25 2009
From: listsin at integrateddevcorp.com (s s)
Date: Wed, 27 May 2009 15:35:25 -0400
Subject: [Twisted-Python] Twisted protocol as Django data source
In-Reply-To: <8de369d70905271212g7aa36675yf6ff093521ace3f7@mail.gmail.com>
References: <D7D38F6A-59A3-4ABB-87AD-96E8EBC5451A@muohio.edu>
	<8de369d70905271212g7aa36675yf6ff093521ace3f7@mail.gmail.com>
Message-ID: <0838AEC5-B747-49CC-B495-D61579A35E8E@integrateddevcorp.com>


On May 27, 2009, at 3:12 PM, Greg Taylor wrote:

> You might want to look into Orbited, there are a number of Django  
> examples out there:
>
> http://www.orbited.org

Website seems to be down.  Any idea who to ping to whack it?

S

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090527/3bad684f/attachment.html>

From exarkun at divmod.com  Wed May 27 13:40:03 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 27 May 2009 15:40:03 -0400
Subject: [Twisted-Python] Twisted protocol as Django data source
In-Reply-To: <D7D38F6A-59A3-4ABB-87AD-96E8EBC5451A@muohio.edu>
Message-ID: <20090527194003.21531.615734528.divmod.quotient.26364@henry.divmod.com>

On Wed, 27 May 2009 14:39:45 -0400, Dan <charnedn at muohio.edu> wrote:
>Hi all,
>
>I have an application written in Twisted which multiplexes data from a
>variety of pieces of specialized hardware, and I'd like to make the
>live stream of this information viewable through a webpage.
>Unfortunately, on our server, port 80 is already taken by an Apache +
>mod_python + Django stack with which we host a number of webpages.
>
> [snip]
>
>The options I've thought of include using Twisted's builtin web server
>a nonstandard port, mod_proxy, or writing a Django app which just
>polls a database repeatedly and altering my Twisted app so it
>repeatedly does an UPDATE. All of these solutions feel hacky to me, so
>I'd like to ask you, the list, how you'd go about doing this.

Another option is to have Django talk to a Twisted process via some RPC
mechanism that won't require you to use Twisted in the Apache process.
For example, XML-RPC.

Jean-Paul



From dave at davebritton.com  Wed May 27 14:48:17 2009
From: dave at davebritton.com (Dave Britton)
Date: Wed, 27 May 2009 15:48:17 -0500
Subject: [Twisted-Python] Twisted protocol as Django data source
References: <D7D38F6A-59A3-4ABB-87AD-96E8EBC5451A@muohio.edu>
Message-ID: <064b01c9df0c$7676d270$0500a8c0@yoda>

I don't think the database option is a hack. Have twisted write the live
stream items into a ring-buffer SQL database table (eg. use records 1-100
over and over again), including a timestamp for each entry. Then your django
page can always retrieve the most current set of entries by SELECTing * from
the table in descending order by timestamp, which django is good at, staying
live with constant refreshing. There are no interprocess communication
pipes, broken sockets and timeouts etc. to screw up, no flaky javascript to
worry about, and the DBMS will handle the multiple simultaneous separate
data sources correctly. The central twisted application only has to keep
track of the buffer position. It's just not as much fun, though.
-Dave


----- Original Message -----
From: "Dan" <charnedn at muohio.edu>
To: <twisted-python at twistedmatrix.com>
Sent: Wednesday, May 27, 2009 1:39 PM
Subject: [Twisted-Python] Twisted protocol as Django data source


> Hi all,
>
> I have an application written in Twisted which multiplexes data from a
> variety of pieces of specialized hardware, and I'd like to make the
> live stream of this information viewable through a webpage.
> Unfortunately, on our server, port 80 is already taken by an Apache +
> mod_python + Django stack with which we host a number of webpages.
>
> Ideally, I'd like to be able to write a quick Django app in which just
> import my Twisted protocol, connect to my network, and start streaming
> data. However, much googling has lead me to believe that this is
> unlikely to actually work. (Particularly,
http://twistedmatrix.com/pipermail/twisted-web/2007-March/003311.html
> , which says that Twisted is simply not mod_python-friendly.)
>
> The options I've thought of include using Twisted's builtin web server
> a nonstandard port, mod_proxy, or writing a Django app which just
> polls a database repeatedly and altering my Twisted app so it
> repeatedly does an UPDATE. All of these solutions feel hacky to me, so
> I'd like to ask you, the list, how you'd go about doing this.
>
> Thanks,
> Dan
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From clemesha at gmail.com  Wed May 27 13:48:25 2009
From: clemesha at gmail.com (Alex Clemesha)
Date: Wed, 27 May 2009 12:48:25 -0700
Subject: [Twisted-Python] Twisted protocol as Django data source
In-Reply-To: <D7D38F6A-59A3-4ABB-87AD-96E8EBC5451A@muohio.edu>
References: <D7D38F6A-59A3-4ABB-87AD-96E8EBC5451A@muohio.edu>
Message-ID: <d272f0690905271248j64c54317h39c744607f3bd7a9@mail.gmail.com>

On Wed, May 27, 2009 at 11:39 AM, Dan <charnedn at muohio.edu> wrote:
> Hi all,
>
> I have an application written in Twisted which multiplexes data from a
> variety of pieces of specialized hardware, and I'd like to make the
> live stream of this information viewable through a webpage.
> Unfortunately, on our server, port 80 is already taken by an Apache +
> mod_python + Django stack with which we host a number of webpages.
>
> Ideally, I'd like to be able to write a quick Django app in which just
> import my Twisted protocol, connect to my network, and start streaming
> data. However, much googling has lead me to believe that this is
> unlikely to actually work. (Particularly, http://twistedmatrix.com/pipermail/twisted-web/2007-March/003311.html
> , which says that Twisted is simply not mod_python-friendly.)
>
> The options I've thought of include using Twisted's builtin web server
> a nonstandard port, mod_proxy, or writing a Django app which just
> polls a database repeatedly and altering my Twisted app so it
> repeatedly does an UPDATE. All of these solutions feel hacky to me, so
> I'd like to ask you, the list, how you'd go about doing this.

I wrote up some thoughts on this here:
http://clemesha.org/blog/2009/apr/23/Django-on-Twisted-using-latest-twisted-web-wsgi/

basically it comes down to running Django off the very latest WSGI
code (in the trunk still)
found in twisted.web, which I've found to work very well.

Also see here:
http://blog.dreid.org/2009/03/twisted-django-it-wont-burn-down-your.html



hope this helps some,
Alex






>
> Thanks,
> Dan
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Alex Clemesha
clemesha.org



From glyph at divmod.com  Wed May 27 14:16:23 2009
From: glyph at divmod.com (glyph at divmod.com)
Date: Wed, 27 May 2009 20:16:23 -0000
Subject: [Twisted-Python] Twisted protocol as Django data source
In-Reply-To: <20090527194003.21531.615734528.divmod.quotient.26364@henry.divmod.com>
References: <D7D38F6A-59A3-4ABB-87AD-96E8EBC5451A@muohio.edu>
	<20090527194003.21531.615734528.divmod.quotient.26364@henry.divmod.com>
Message-ID: <20090527201623.12555.1652233845.divmod.xquotient.11608@weber.divmod.com>


On 07:40 pm, exarkun at divmod.com wrote:
>On Wed, 27 May 2009 14:39:45 -0400, Dan <charnedn at muohio.edu> wrote:
>>Hi all,
>>
>>I have an application written in Twisted which multiplexes data from a
>>variety of pieces of specialized hardware, and I'd like to make the
>>live stream of this information viewable through a webpage.
>>Unfortunately, on our server, port 80 is already taken by an Apache +
>>mod_python + Django stack with which we host a number of webpages.
>>
>>[snip]
>>
>>The options I've thought of include using Twisted's builtin web server
>>a nonstandard port, mod_proxy, or writing a Django app which just
>>polls a database repeatedly and altering my Twisted app so it
>>repeatedly does an UPDATE. All of these solutions feel hacky to me, so
>>I'd like to ask you, the list, how you'd go about doing this.

Polling a database repeatedly and updating it "repeatedly" to 
synchronize data sounds pretty gross.  But then, if your Django 
application is rendering static web-pages and not updating them with 
some COMET technique, you can simply populate the database from Twisted 
when stuff changes and query it normally when the page is rendered - 
that doesn't seem bad to me.

If your Django application *is* using COMET to keep the page updated in 
real time, then you should look into Orbited - which, as it so happens, 
uses Twisted, so you can put it into your Twisted process.

Personally, I don't like using databases as a point of integration. 
Inevitably your Django app or your Twisted app will want to enforce 
constraints on the data and model things about the relationships between 
rows beyond what one can glean by inspecting the SQL schema.  Once the 
responsibility for managing the data's integrity has moved into 
middleware, you should be talking to the middleware and let that 
middleware manage your database.  Given that your Twisted process is the 
thing doing the UPDATEs here, I'd treat Twisted as the middleware, and 
agree with exarkun's recommendation:
>Another option is to have Django talk to a Twisted process via some RPC
>mechanism that won't require you to use Twisted in the Apache process.
>For example, XML-RPC.

In this vein, there is also a blocking-friendly implementation of the 
AMP protocol with no Twisted dependency:  https://launchpad.net/ampy - 
but it's maintained outside of Twisted and I wouldn't vouch for its 
quality.  On the other hand I wouldn't vouch for the quality of any XML- 
RPC client either ;-).

You can use whatever protocol you want for exchanging information 
between these two systems.  The important thing is really to make it a 
narrow, clearly-specified channel of communication.



From listsin at integrateddevcorp.com  Wed May 27 15:47:52 2009
From: listsin at integrateddevcorp.com (s s)
Date: Wed, 27 May 2009 17:47:52 -0400
Subject: [Twisted-Python] Twisted protocol as Django data source
In-Reply-To: <d272f0690905271248j64c54317h39c744607f3bd7a9@mail.gmail.com>
References: <D7D38F6A-59A3-4ABB-87AD-96E8EBC5451A@muohio.edu>
	<d272f0690905271248j64c54317h39c744607f3bd7a9@mail.gmail.com>
Message-ID: <2933D24F-7C26-4B22-B357-3E6E730E8FB3@integrateddevcorp.com>


On May 27, 2009, at 3:48 PM, Alex Clemesha wrote:

> On Wed, May 27, 2009 at 11:39 AM, Dan <charnedn at muohio.edu> wrote:
>> Hi all,
>>
>> I have an application written in Twisted which multiplexes data  
>> from a
>> variety of pieces of specialized hardware, and I'd like to make the
>> live stream of this information viewable through a webpage.
>> Unfortunately, on our server, port 80 is already taken by an Apache +
>> mod_python + Django stack with which we host a number of webpages.
>>
>> Ideally, I'd like to be able to write a quick Django app in which  
>> just
>> import my Twisted protocol, connect to my network, and start  
>> streaming
>> data. However, much googling has lead me to believe that this is
>> unlikely to actually work. (Particularly, http://twistedmatrix.com/pipermail/twisted-web/2007-March/003311.html
>> , which says that Twisted is simply not mod_python-friendly.)
>>
>> The options I've thought of include using Twisted's builtin web  
>> server
>> a nonstandard port, mod_proxy, or writing a Django app which just
>> polls a database repeatedly and altering my Twisted app so it
>> repeatedly does an UPDATE. All of these solutions feel hacky to me,  
>> so
>> I'd like to ask you, the list, how you'd go about doing this.
>
> I wrote up some thoughts on this here:
> http://clemesha.org/blog/2009/apr/23/Django-on-Twisted-using-latest-twisted-web-wsgi/
>
> basically it comes down to running Django off the very latest WSGI
> code (in the trunk still)
> found in twisted.web, which I've found to work very well.

I had some very strange errors and gave up and used CherryPy which  
worked right out of the box.  Has the Twisted WSGI changed much since  
the current release?  Did you have problems with the Twisted WSGI  
release version too and that's why you're running off trunk?

> Also see here:
> http://blog.dreid.org/2009/03/twisted-django-it-wont-burn-down-your.html

I followed those instructions, what there were of them, and got it  
running but it didn't seem to be able to serve static content.

I'd love it if the Twisted WSGI could run Django because the rest of  
my app relies on Twisted.

S






From asb.bush at gmail.com  Wed May 27 19:23:27 2009
From: asb.bush at gmail.com (Aaron Bush)
Date: Wed, 27 May 2009 21:23:27 -0400
Subject: [Twisted-Python] Guidance on Proxy-type Application
Message-ID: <5a8f2d170905271823x31855f68u8a27168c1efe863e@mail.gmail.com>

I have just started to look at the Twisted framework and would like to put
it to use for a new project I am working on.  Not being very familiar with
the framework and fairly new to Python in general I would like to ask a
design/architecture question.  (I have written similar applications in C but
would prefer to start this in the right direction and not write Python like
C.)

The application has the following model:

Many clients connect to the Application and prefer to leave the connection
open.  They will send messages across this connection.  They will expect to
get a message back at some point later, they do not wait for a response
(async).  The clients are already coded (legacy) and just need to send their
proprietary protocol to the new Application (written using Twisted).

The Twisted application will take the data from the clients and do some
transformation on it then send the message on to another server (3rd
party).  This connection to "another" server must be a single connection,
not one connection per client.  This connection should also be persistent
and not opened/closed for each client message sent.  Ideally if the 3rd
party server is down then I would also not accept client connections as the
messages are time sensitive and should not be stored and forwarded.  At some
point the 3rd part will send a message back and the Application will route
it back to the original source.  Basically request/reply pattern.

I have been reading through the archives and the twisted docs and have also
looked over the Hex-dump port-forwarding recipe but not found anything that
explains how to use twisted for this model.  Hex-dump is close but
opens/closes the connection to the server on each client connection.

I am thinking that there will be two Factories [and two protocols: 1) for
clients and 2) for 3rd party].  I am not sure how to best establish both the
listening factory and the client to 3rd party factory.  Once they are
established what is the preferred way in Twisted to pass a message from one
protocol to another?

Any pointers or sample code that you can offer is greatly appreciated.  I
would really like to cook this in Twisted and not go back to the C way.

Thanks,
-ab
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090527/50fd798d/attachment.html>

From js at hipro.co.in  Wed May 27 23:54:02 2009
From: js at hipro.co.in (Joe Steeve)
Date: Thu, 28 May 2009 11:24:02 +0530
Subject: [Twisted-Python] twistd -y and
	'adbapi.ConnectionPool.runWithConnection'
Message-ID: <1243490042.4025.25.camel@lark.home.home>

Hello all,

I am doing a 'runWithConnection' call from the 'startService' of a
service.Service. In the callback, I startup more services based on the
results of the 'runWithConnection' and attach them to the main
application object.

This works fine when I start the script with 'twistd -noy'. However,
when I want to start it as a daemon using 'twisted -y', the
runWithConnection does not seem to work. The thread simply does not
start.

What could be wrong?

The database is 'PostgreSQL'. I am using the 'psycopg2' driver with the
adbapi.ConnectionPool.

Thanks a ton,
Joe

-- 
Joe Steeve
HiPro IT Solutions Pvt. Ltd.
http://hipro.co.in/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 197 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20090528/f48992c5/attachment.sig>

From larsivi at gmail.com  Thu May 28 06:04:13 2009
From: larsivi at gmail.com (Lars Ivar Igesund)
Date: Thu, 28 May 2009 14:04:13 +0200
Subject: [Twisted-Python] Reactor callback from the wrong thread
In-Reply-To: <20090527154322.21531.781574174.divmod.quotient.26327@henry.divmod.com>
References: <24e981170905270608p25f6057fl2ad2b7f71cc2fac6@mail.gmail.com>
	<20090527154322.21531.781574174.divmod.quotient.26327@henry.divmod.com>
Message-ID: <24e981170905280504x7fa0dedexf91c45295dee706e@mail.gmail.com>

Hi, thanks for the reply.

On Wed, May 27, 2009 at 5:43 PM, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> On Wed, 27 May 2009 15:08:49 +0200, Lars Ivar Igesund <larsivi at gmail.com> wrote:
>>Hi!
>>
>>I have an issue where the reactor calls the callback from a different
>>thread than the one the reactor is running in.
>
> Generally speaking, the only callbacks the reactor invokes are protocol
> methods (like dataReceived and connectionLost) and timed events (things
> you pass to reactor.callLater).  It always calls these in the thread it
> is running in.  What callbacks are you seeing be invoked in the "wrong"
> thread?

Sorry for being a bit unclear; these callbacks originates from the
SNMP trap listen agent which at the bottom is Net-SNMP wrapped in
Python and a protocol for Twisted (incorporated in pynetsnmp, package
python-pynetsnmp in Ubuntu/Debian).

>
>> [snip]
>>
>>What can cause this and how may I debug it? AFAIK, PyFit does not use
>>twisted or threading at all, and we only have two simple background
>>threads our selves in addition to the one running the trap deamon.
>
> The most likely explanation is that your code (perhaps by way of PyFit,
> I'm not sure -- I've never used PyFit) is calling a Twisted API from a
> thread other than the reactor thread.  So, examine all the places you
> call Twisted APIs (including APIs in twistedsnmp which may call Twisted
> APIs) and make sure they're only run in the reactor thread.

Googling further, it appears that NetSNMP is not considered thread
safe, and this is probably the reason for my troubles (there are
normal netsnmp calls going the other way from the apparently hijacked
thread).

PyFit did not have any twisted dependencies, so I don't consider it an
option at this point.

I have also tested the alternative Twisted SNMP package (based on
PySNMP), but unfortunately both of those appear to mature enough for
our use.

At this point I'm probably left with two options; either make all of
the SNMP communication go via pynetsnmp (will cause at least some
rewriting), or move the trap deamon part into its own application that
communicates with the test framework via a sockets. The latter would
guarantee no snmp thread confusion, but may be a bit overkill.

If anyone has a good advice, then I'd appreciate it.

Thanks!



From micahel at gmail.com  Thu May 28 06:36:52 2009
From: micahel at gmail.com (Michael Hudson)
Date: Thu, 28 May 2009 14:36:52 +0200
Subject: [Twisted-Python] Twisted protocol as Django data source
In-Reply-To: <2933D24F-7C26-4B22-B357-3E6E730E8FB3@integrateddevcorp.com>
References: <D7D38F6A-59A3-4ABB-87AD-96E8EBC5451A@muohio.edu>
	<d272f0690905271248j64c54317h39c744607f3bd7a9@mail.gmail.com>
	<2933D24F-7C26-4B22-B357-3E6E730E8FB3@integrateddevcorp.com>
Message-ID: <aa0dfd860905280536x5dd9c563od050a5b42956d8b6@mail.gmail.com>

2009/5/27 s s <listsin at integrateddevcorp.com>:

>> I wrote up some thoughts on this here:
>> http://clemesha.org/blog/2009/apr/23/Django-on-Twisted-using-latest-twisted-web-wsgi/
>>
>> basically it comes down to running Django off the very latest WSGI
>> code (in the trunk still)
>> found in twisted.web, which I've found to work very well.
>
> I had some very strange errors and gave up and used CherryPy which
> worked right out of the box.  Has the Twisted WSGI changed much since
> the current release?

Yes.

Cheers,
mwh



From glyph at divmod.com  Thu May 28 07:02:09 2009
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 28 May 2009 13:02:09 -0000
Subject: [Twisted-Python] Twisted protocol as Django data source
In-Reply-To: <aa0dfd860905280536x5dd9c563od050a5b42956d8b6@mail.gmail.com>
References: <D7D38F6A-59A3-4ABB-87AD-96E8EBC5451A@muohio.edu>
	<d272f0690905271248j64c54317h39c744607f3bd7a9@mail.gmail.com>
	<2933D24F-7C26-4B22-B357-3E6E730E8FB3@integrateddevcorp.com>
	<aa0dfd860905280536x5dd9c563od050a5b42956d8b6@mail.gmail.com>
Message-ID: <20090528130209.12555.873641961.divmod.xquotient.11612@weber.divmod.com>




On 12:36 pm, micahel at gmail.com wrote:
>2009/5/27 s s <listsin at integrateddevcorp.com>:
>>>I wrote up some thoughts on this here:
>>>http://clemesha.org/blog/2009/apr/23/Django-on-Twisted-using-latest- 
>>>twisted-web-wsgi/

>>I had some very strange errors and gave up and used CherryPy which
>>worked right out of the box. �Has the Twisted WSGI changed much since
>>the current release?
>
>Yes.

Specifically, we discovered bugs during the PyCon sprints and worked to 
fix the WSGI layer so that it would work with popular web frameworks 
such as Django.

See the "updates" on the bottom of this blog post:

  http://blog.dreid.org/2009/03/twisted-django-it-wont-burn-down- 
your.html



From glyph at divmod.com  Thu May 28 07:13:34 2009
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 28 May 2009 13:13:34 -0000
Subject: [Twisted-Python] twistd -y
	and	'adbapi.ConnectionPool.runWithConnection'
In-Reply-To: <1243490042.4025.25.camel@lark.home.home>
References: <1243490042.4025.25.camel@lark.home.home>
Message-ID: <20090528131334.12555.134859842.divmod.xquotient.11614@weber.divmod.com>


On 05:54 am, js at hipro.co.in wrote:
>Hello all,
>
>I am doing a 'runWithConnection' call from the 'startService' of a
>service.Service. In the callback, I startup more services based on the
>results of the 'runWithConnection' and attach them to the main
>application object.
>
>This works fine when I start the script with 'twistd -noy'. However,
>when I want to start it as a daemon using 'twisted -y', the
>runWithConnection does not seem to work. The thread simply does not
>start.
>
>What could be wrong?

This behavior sounds very peculiar.  Possibly a bug.  But, I've never 
seen such behavior.  Could you attach a minimal example that reproduces 
the problem you're seeing?



From itamar at itamarst.org  Thu May 28 07:18:35 2009
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 28 May 2009 09:18:35 -0400
Subject: [Twisted-Python] Upcoming Sprint
In-Reply-To: <20090526203618.21531.1031701929.divmod.quotient.25824@henry.divmod.com>
References: <20090526203618.21531.1031701929.divmod.quotient.25824@henry.divmod.com>
Message-ID: <1243516715.20948.213.camel@pintsize>

I should be there for some of the day, at least.




From itamar at itamarst.org  Thu May 28 07:21:51 2009
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 28 May 2009 09:21:51 -0400
Subject: [Twisted-Python] Reactor callback from the wrong thread
In-Reply-To: <24e981170905280504x7fa0dedexf91c45295dee706e@mail.gmail.com>
References: <24e981170905270608p25f6057fl2ad2b7f71cc2fac6@mail.gmail.com>
	<20090527154322.21531.781574174.divmod.quotient.26327@henry.divmod.com>
	<24e981170905280504x7fa0dedexf91c45295dee706e@mail.gmail.com>
Message-ID: <1243516911.20948.215.camel@pintsize>

On Thu, 2009-05-28 at 14:04 +0200, Lars Ivar Igesund wrote:

> If anyone has a good advice, then I'd appreciate it.

You can call any reactor API from another thread using
reactor.callFromThread, or the more useful
twisted.internet.threads.blockingCallFromThread. So just wrap all places
that call into the reactor.

Hopefully one day we will have feature to help debug this sort of
problem:
http://twistedmatrix.com/trac/ticket/792




From esteve at sindominio.net  Thu May 28 07:43:47 2009
From: esteve at sindominio.net (Esteve Fernandez)
Date: Thu, 28 May 2009 15:43:47 +0200
Subject: [Twisted-Python] Twisted protocol as Django data source
In-Reply-To: <d272f0690905271248j64c54317h39c744607f3bd7a9@mail.gmail.com>
References: <D7D38F6A-59A3-4ABB-87AD-96E8EBC5451A@muohio.edu>
	<d272f0690905271248j64c54317h39c744607f3bd7a9@mail.gmail.com>
Message-ID: <200905281543.47655.esteve@sindominio.net>

On Wednesday 27 May 2009 21:48:25 Alex Clemesha wrote:
> I wrote up some thoughts on this here:
> http://clemesha.org/blog/2009/apr/23/Django-on-Twisted-using-latest-twisted
>-web-wsgi/
>
> basically it comes down to running Django off the very latest WSGI
> code (in the trunk still)
> found in twisted.web, which I've found to work very well.
>
> Also see here:
> http://blog.dreid.org/2009/03/twisted-django-it-wont-burn-down-your.html

Having Django running on top of Twisted.web doesn't make Django a normal 
Twisted application. You'll have to use reactor.callFromThread in a lot of 
places to maintain thread-safety, since most of the Twisted code isn't.

Like JP has pointed out, a solution based around RPC is a viable option. It's 
pretty straightforward, safe and performant.

My take (which uses Thrift for RPC, could have imagined that? :-)):

- define a Thrift spec file that describes a service with the methods that 
your Django application will issue (like queryResults(), readData(), etc.)

- generate code using the Thrift compiler for both blocking and non-blocking 
Python:
$ thrift --gen py (for regular Python)
$ thrift --gen py:twisted (for Twisted)

beware that both commands will dump code to a directory called gen-py, which 
gets overwritten each time

- create a normal Twisted application which speaks your protocol on one end 
and Thrift on the other. Use whatever transport you like, if you want to make 
it ultra fast use unix sockets and a tmpfs filesystem (e.g. /tmp in most 
Linux distributions)

- connect from your Django application to the Twisted Thrift service and issue 
whichever calls you defined in the first step

I have some code sitting around that does this (for txAMQP, in my case), I'll 
try to upload it somewhere.

Cheers.



From JOHN at egh.com  Thu May 28 10:01:40 2009
From: JOHN at egh.com (John Santos)
Date: Thu, 28 May 2009 12:01:40 -0400
Subject: [Twisted-Python] Guidance on Proxy-type Application
In-Reply-To: <5a8f2d170905271823x31855f68u8a27168c1efe863e@mail.gmail.com>
Message-ID: <1090528112050.16483O-300000@Ives.egh.com>


Hi Adam -

I'm in pretty much the same situation as you and am working on a similar
problem.  Very much a Python and Twisted newbie.

The program I'm working on needs to talk to a variety of clients and to
a single server, with more-or-less permanent connections to all of them.

My problem is somewhat different from yours (and probably a little
simpler), since all input from all clients goes to the server, and
all output from the server goes to all clients (so I don't have to
tag and remember which response goes to which client.)  However,
there are other messages from the clients that don't go to the
server, but instead do other things, some requiring responses.
So the message handling in my program (what happens when dataRecieved
gets called) may be more complicated than in yours.  But that is
(at least from my perspective) the easy part.  Getting the twisted
app to talk to the server and all the clients, and not to fall over
dead when a client goes away, etc. is (to me) the hard part, and I
feel like I've just gotten over a huge hump now that that is (mostly)
working (as of two days ago.)


I am using two factories, one to generate the object that talks to the
server (using conch.telnet), and one to generate objects to talk to
the clients.  The clients can come and go but would typically be
permanent.  (Actually 3 factories right now, since I'm using the
StdioProxyFactory from the example for debugging, but that will
go away as I get the client protocol working.)

I started from the dataforward.py example in Twisted book, but by
now it has been massively changed.

Before starting the reactor, I do a reactor.connectTCP to the server
using the factory for the server connections and a reactor.listenTCP
using the client connection factory, to listen for client connections.

One change I had to make to the example was to promote the
InputForwarder object from an attribute of the client connection
object to a global object since it is common to all the
client connections.  (I hope I have the terminology correct here;
as I've said, I'm a Python newbie.)

It turns out to be fairly small amount of code, and I think it
can still be simplified some more.

So I think you are on the right track.  HTH!


-- 
John Santos
Evans Griffiths & Hart, Inc.
781-861-0670 ext 539
-------------- next part --------------
I have just started to look at the Twisted framework and would like to put

it to use for a new project I am working on.  Not being very familiar with

the framework and fairly new to Python in general I would like to ask a

design/architecture question.  (I have written similar applications in C but

would prefer to start this in the right direction and not write Python like

C.)



The application has the following model:



Many clients connect to the Application and prefer to leave the connection

open.  They will send messages across this connection.  They will expect to

get a message back at some point later, they do not wait for a response

(async).  The clients are already coded (legacy) and just need to send their

proprietary protocol to the new Application (written using Twisted).



The Twisted application will take the data from the clients and do some

transformation on it then send the message on to another server (3rd

party).  This connection to "another" server must be a single connection,

not one connection per client.  This connection should also be persistent

and not opened/closed for each client message sent.  Ideally if the 3rd

party server is down then I would also not accept client connections as the

messages are time sensitive and should not be stored and forwarded.  At some

point the 3rd part will send a message back and the Application will route

it back to the original source.  Basically request/reply pattern.



I have been reading through the archives and the twisted docs and have also

looked over the Hex-dump port-forwarding recipe but not found anything that

explains how to use twisted for this model.  Hex-dump is close but

opens/closes the connection to the server on each client connection.



I am thinking that there will be two Factories [and two protocols: 1) for

clients and 2) for 3rd party].  I am not sure how to best establish both the

listening factory and the client to 3rd party factory.  Once they are

established what is the preferred way in Twisted to pass a message from one

protocol to another?



Any pointers or sample code that you can offer is greatly appreciated.  I

would really like to cook this in Twisted and not go back to the C way.



Thanks,

-ab

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090528/f89ace8e/attachment.html>

From asb.bush at gmail.com  Thu May 28 13:22:20 2009
From: asb.bush at gmail.com (Aaron Bush)
Date: Thu, 28 May 2009 15:22:20 -0400
Subject: [Twisted-Python] Guidance on Proxy-type Application
In-Reply-To: <1090528112050.16483O-300000@Ives.egh.com>
References: <5a8f2d170905271823x31855f68u8a27168c1efe863e@mail.gmail.com>
	<1090528112050.16483O-300000@Ives.egh.com>
Message-ID: <5a8f2d170905281222v79d84301k1050ad112a2c9e60@mail.gmail.com>

Thanks John.

Here is some sample code that is somewhat working for me right now.  Any and
all comments are greatly appreciated.

1) I setup a netcat listener on port 8080.
2) Start the twisted program, it connects to 8080 and then fires up a
listener on port 808 from the ChattyMCProtocol protocol.
3) Start a netcat client connection to the server process.
4) The client connection and any data they enter will be passed to the
'master control' process (ReconnectingClientFactory).

from twisted.internet.protocol import ReconnectingClientFactory,
ServerFactory
from twisted.protocols.basic import LineOnlyReceiver
from twisted.internet import reactor

"""Some test code using a chat-like approach with a master control node"""

class ChattyServerProtocol(LineOnlyReceiver):
    '''
    A test proto which will receive data and then forward it on the to the
master control
    '''
    delimiter = '\n'

    def connectionMade(self):
        self.transport.write("Welcome to the Server\n")
        """ Tell the master control that a client came in"""
        self.factory.parent.transport.write("Someone connected\n")

    def connectionLost(self, reason):
        self.factory.parent.transport.write("Server lost the connection to a
client")

    def lineReceived(self, line):
        print "Server got some data: " + line
        """ Now send the data to the master control"""
        self.factory.parent.transport.write("Client Said: %s\n" % line)


class ChattyServerFactory(ServerFactory):
    protocol = ChattyServerProtocol

    def __init__(self, parent):
        self.parent = parent
        pass

class ChattyMCProtocol(LineOnlyReceiver):
    delimiter = '\n'

    def __init__(self):
        """Connected so startup Server for clients"""
        self.server_factory = ChattyServerFactory(self)
        reactor.listenTCP(808, self.server_factory)

    def lineReceived(self, line):
        self.transport.write("Processing what you said: %s\n" % line)

class ChattyMCFactory(ReconnectingClientFactory):

    def startedConnecting(self, connector):
        print "Connecting..."

    def clientConnectionFailed(self, connector, reason):
        print "The connection failed"
        ReconnectingClientFactory.clientConnectionFailed(self, connector,
reason)

    def clientConnectionLost(self, connector, reason):
        print "The connection was lost"
        ReconnectingClientFactory.clientConnectionLost(self, connector,
reason)

    def buildProtocol(self, addr):
        print "Connected, reset the delay"
        self.resetDelay()
        # Next startup a server for the clients
        #self.server_factory = ChattyServerFactory(self)
        return ChattyMCProtocol()

reactor.connectTCP("127.0.0.1", 8080, ChattyMCFactory())
reactor.run()

Items that I don't know how to handle yet:
 - I need to determine how to better handle the case where the connection
made via ReconnectingClientFactory is dropped.  It does reconnect as the
Factory should but the problem is that the Server portion is not cleanly
shutdown so when the ChattyMCProtocol tries to listen it fails as the socket
is already in use.  Any ideas how to signal to the server to shutdown?
 - Much more to be done.  How to take this to the level of a proper Twisted
"application", etc.

Thanks,
-ab

On Thu, May 28, 2009 at 12:01 PM, John Santos <JOHN at egh.com> wrote:

>
> Hi Adam -
>
> I'm in pretty much the same situation as you and am working on a similar
> problem.  Very much a Python and Twisted newbie.
>
> The program I'm working on needs to talk to a variety of clients and to
> a single server, with more-or-less permanent connections to all of them.
>
> My problem is somewhat different from yours (and probably a little
> simpler), since all input from all clients goes to the server, and
> all output from the server goes to all clients (so I don't have to
> tag and remember which response goes to which client.)  However,
> there are other messages from the clients that don't go to the
> server, but instead do other things, some requiring responses.
> So the message handling in my program (what happens when dataRecieved
> gets called) may be more complicated than in yours.  But that is
> (at least from my perspective) the easy part.  Getting the twisted
> app to talk to the server and all the clients, and not to fall over
> dead when a client goes away, etc. is (to me) the hard part, and I
> feel like I've just gotten over a huge hump now that that is (mostly)
> working (as of two days ago.)
>
>
> I am using two factories, one to generate the object that talks to the
> server (using conch.telnet), and one to generate objects to talk to
> the clients.  The clients can come and go but would typically be
> permanent.  (Actually 3 factories right now, since I'm using the
> StdioProxyFactory from the example for debugging, but that will
> go away as I get the client protocol working.)
>
> I started from the dataforward.py example in Twisted book, but by
> now it has been massively changed.
>
> Before starting the reactor, I do a reactor.connectTCP to the server
> using the factory for the server connections and a reactor.listenTCP
> using the client connection factory, to listen for client connections.
>
> One change I had to make to the example was to promote the
> InputForwarder object from an attribute of the client connection
> object to a global object since it is common to all the
> client connections.  (I hope I have the terminology correct here;
> as I've said, I'm a Python newbie.)
>
> It turns out to be fairly small amount of code, and I think it
> can still be simplified some more.
>
> So I think you are on the right track.  HTH!
>
>
> --
> John Santos
> Evans Griffiths & Hart, Inc.
> 781-861-0670 ext 539
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090528/8db3556e/attachment.html>

From exarkun at divmod.com  Thu May 28 13:45:46 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 28 May 2009 15:45:46 -0400
Subject: [Twisted-Python] Guidance on Proxy-type Application
In-Reply-To: <5a8f2d170905281222v79d84301k1050ad112a2c9e60@mail.gmail.com>
Message-ID: <20090528194546.21531.1440791729.divmod.quotient.26823@henry.divmod.com>

On Thu, 28 May 2009 15:22:20 -0400, Aaron Bush <asb.bush at gmail.com> wrote:
>Thanks John.
>
>Here is some sample code that is somewhat working for me right now.  Any and
>all comments are greatly appreciated.
>
> [snip]
> - I need to determine how to better handle the case where the connection
>made via ReconnectingClientFactory is dropped.  It does reconnect as the
>Factory should but the problem is that the Server portion is not cleanly
>shutdown so when the ChattyMCProtocol tries to listen it fails as the socket
>is already in use.  Any ideas how to signal to the server to shutdown?

reactor.listenTCP returns an IListeningPort provider.  This interface has
a stopListening method.  You probably just want to call this when your
client connection is lost.

Alternatively, just set up the listening port once, instead of once per
client connection, and re-use it across all of your client connections.

Jean-Paul



From jjconti at gmail.com  Thu May 28 14:24:49 2009
From: jjconti at gmail.com (Juanjo Conti)
Date: Thu, 28 May 2009 17:24:49 -0300
Subject: [Twisted-Python] Automatic test for Twisted
Message-ID: <3f9007680905281324n681415c1ia915cd8d8abaafd6@mail.gmail.com>

Hi,

is there a way to write sort of unittest for Twisted and run them?

-- 
Juanjo Conti



From drew.smathers at gmail.com  Thu May 28 14:41:20 2009
From: drew.smathers at gmail.com (Drew Smathers)
Date: Thu, 28 May 2009 16:41:20 -0400
Subject: [Twisted-Python] Automatic test for Twisted
In-Reply-To: <3f9007680905281324n681415c1ia915cd8d8abaafd6@mail.gmail.com>
References: <3f9007680905281324n681415c1ia915cd8d8abaafd6@mail.gmail.com>
Message-ID: <368574aa0905281341o2d19f395ob31e1a4299640333@mail.gmail.com>

On Thu, May 28, 2009 at 4:24 PM, Juanjo Conti <jjconti at gmail.com> wrote:
> Hi,
>
> is there a way to write sort of unittest for Twisted and run them?
>

Yes, with twisted.trial:

http://twistedmatrix.com/projects/core/documentation/howto/testing.html

-Drew



From bernat at luffy.cx  Thu May 28 14:44:26 2009
From: bernat at luffy.cx (Vincent Bernat)
Date: Thu, 28 May 2009 22:44:26 +0200
Subject: [Twisted-Python] Automatic test for Twisted
In-Reply-To: <3f9007680905281324n681415c1ia915cd8d8abaafd6@mail.gmail.com>
	(Juanjo Conti's message of "Thu, 28 May 2009 17:24:49 -0300")
References: <3f9007680905281324n681415c1ia915cd8d8abaafd6@mail.gmail.com>
Message-ID: <m3eiu9dkk5.fsf@neo.luffy.cx>

OoO  En cette  soirée bien  amorcée du  jeudi 28  mai 2009,  vers 22:24,
Juanjo Conti <jjconti at gmail.com> disait :

> is there a way to write sort of unittest for Twisted and run them?

Twisted even has  its own engine to run unit tests.  Look at the sources
of Twisted in  the test/ directory. There is a lot  of unittests you can
look at.
-- 
BOFH excuse #60:
system has been recalled



From glyph at divmod.com  Thu May 28 16:30:07 2009
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 28 May 2009 22:30:07 -0000
Subject: [Twisted-Python] Automatic test for Twisted
In-Reply-To: <m3eiu9dkk5.fsf@neo.luffy.cx>
References: <3f9007680905281324n681415c1ia915cd8d8abaafd6@mail.gmail.com>
	<m3eiu9dkk5.fsf@neo.luffy.cx>
Message-ID: <20090528223007.12555.200468668.divmod.xquotient.11622@weber.divmod.com>


On 08:44 pm, bernat at luffy.cx wrote:
>OoO  En cette  soir�e bien  amorc�e du  jeudi 28  mai 2009,  vers 
>22:24,
>Juanjo Conti <jjconti at gmail.com> disait�:
>>is there a way to write sort of unittest for Twisted and run them?
>
>Twisted even has  its own engine to run unit tests.  Look at the 
>sources
>of Twisted in  the test/ directory. There is a lot  of unittests you 
>can
>look at.

Twisted also comes with a tool for running these tests (and others; for 
example, your own).

You can run all of our tests by doing 'trial twisted' at the command 
line.



From glyph at divmod.com  Thu May 28 16:58:00 2009
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 28 May 2009 22:58:00 -0000
Subject: [Twisted-Python] Guidance on Proxy-type Application
Message-ID: <20090528225800.12555.827283410.divmod.xquotient.11675@weber.divmod.com>


On 01:23 am, asb.bush at gmail.com wrote:
>I have just started to look at the Twisted framework and would like to 
>put it
>to use for a new project I am working on.  Not being very familiar with 
>the
>framework and fairly new to Python in general I would like to ask a
>design/architecture question.  (I have written similar applications in 
>C but
>would prefer to start this in the right direction and not write Python 
>like
>C.)

Thanks for asking!

I apologize for the delay in my answer.  I started writing up a simple 
example (attached) but was discouraged to find that it was 100 lines 
long and required too much explaining.

Then I started documenting it and explaining every line but that was a 
very long, tedious message.  So, it doesn't have much in the way of 
explanation; I hope you will find it useful regardless.
>The application has the following model:

>Many clients connect to the Application and prefer to leave the 
>connection
>open.  They will send messages across this connection.  They will 
>expect to
>get a message back at some point later, they do not wait for a response
>(async).  The clients are already coded (legacy) and just need to send 
>their
>proprietary protocol to the new Application (written using Twisted).

This is *almost* a FAQ.  At least, you may find this to be a useful 
answer:

<http://twistedmatrix.com/trac/wiki/FrequentlyAskedQuestions#HowdoImakeinputononeconnectionresultinoutputonanother>
>The Twisted application will take the data from the clients and do some
>transformation on it then send the message on to another server (3rd 
>party).
>This connection to "another" server must be a single connection, not 
>one
>connection per client.  This connection should also be persistent and 
>not
>opened/closed for each client message sent.  Ideally if the 3rd party 
>server
>is down then I would also not accept client connections as the messages 
>are
>time sensitive and should not be stored and forwarded.  At some point 
>the 3rd
>part will send a message back and the Application will route it back to 
>the
>original source.  Basically request/reply pattern.

The example that I've attached does basically this.  Run it and then run 
'telnet localhost 4322', and type some lines; you will see that they are 
transformed and echoed back to you, both by the proxy and by the 
protocol being proxied.

At a high level, the answer to your question is so simple that it's hard 
to express.  Basically, you just need to have all the relevant objects 
having references to each other, and calling methods to achieve the 
desired effect.  The less magic, the better.

More precisely, you need an object responsible for managing your 
outgoing connections to your legacy server, so that it can handle 
disconnection and reconnection, queueing messages and so on.  Then you 
need your proxy server factory to hold a reference to that object, so 
that it can create references from each proxy server protocol connection 
object to the connection manager.

This is related to another recent thread - you can see my message in 
that thread here:

    http://thread.gmane.org/gmane.comp.python.twisted/18377/focus=18385
>I have been reading through the archives and the twisted docs and have 
>also
>looked over the Hex-dump port-forwarding recipe but not found anything 
>that
>explains how to use twisted for this model.  Hex-dump is close but
>opens/closes the connection to the server on each client connection.

I'm not sure why hex-dump port-forwarding is particularly relevant to 
this example.  Is it just because this is an application that connects 
from one host to another?
>I am thinking that there will be two Factories [and two protocols: 1) 
>for
>clients and 2) for 3rd party].  I am not sure how to best establish 
>both the
>listening factory and the client to 3rd party factory.  Once they are
>established what is the preferred way in Twisted to pass a message from 
>one
>protocol to another?

This part of your question is almost exactly the FAQ I mentioned above 
:).  To reiterate that answer, you just need to have references between 
objects, and call methods on the objects you want to do stuff.

If you have a client connection object, just get a reference to that 
from the relevant server connection object and call methods on the 
client object to emit messages on the client protocol, handling any 
responses appropriately.  Deferreds can help with that latter part.

It is always better if you can establish that reference as simply as 
possible; for example, by passing parameters to the __init__ of various 
classes.  Again, for reasons that have nothing to do with Twisted 
specifically, it's a bad idea to try to establish these references by 
having global variables floating around.

Here's a very very simple example of the "good way" to propagate some 
data to protocol instances that need it:

    class MyProtocol(Protocol):
        def __init__(self, data):
            self.data = data

    class MyFactory(Factory):
        def __init__(self, data):
            self.data = data

        def buildProtocol(self, addr):
            return MyProtocol(self.data)

    reactor.listenTCP(8765, MyFactory("some data"))

and here's a simple example of a really bad way (don't do this!):

    class MyProtocol(Protocol):
        def connectionMade(self):
            self.bleh = bleh

    bleh = "some data"
    f = Factory()
    f.protocol = MyProtocol
    reactor.listenTCP(9876, f)

Even in C, I'm pretty sure it's better style to pass structures to 
functions than to abuse piles of local variables :).  I only illustrate 
this bad style here because it seems to be a common antipattern.  The 
Protocol class itself doesn't take any parameters to __init__, and 
Twisted's users don't always realize that protocols and factories and so 
on are just regular objects, with no special rules; they just get 
methods called on them by the reactor.
>Any pointers or sample code that you can offer is greatly appreciated. 
>I
>would really like to cook this in Twisted and not go back to the C way.

Based on what you've said so far, I think you're basically on the right 
track.  Good luck!
-------------- next part --------------
A non-text attachment was scrubbed...
Name: multiclient.py
Type: application/x-python
Size: 2998 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20090528/f3e6c1bf/attachment-0002.bin>

From charnedn at muohio.edu  Thu May 28 19:39:14 2009
From: charnedn at muohio.edu (Dan)
Date: Thu, 28 May 2009 21:39:14 -0400
Subject: [Twisted-Python] Guidance on Proxy-type Application
In-Reply-To: <20090528225800.12555.827283410.divmod.xquotient.11675@weber.divmod.com>
References: <20090528225800.12555.827283410.divmod.xquotient.11675@weber.divmod.com>
Message-ID: <D162E141-1638-4D1B-80ED-827EF68A3712@muohio.edu>

Semi, OT: Having glyph's example (or one like it) would've probably  
shaved a week off my initial foray into Twisted.

I respectfully recommend that a version containing a docstring or two  
be included somewhere on the site, possibly alongside the "Finger"  
tutorial under the heading "a simple example of how to use Twisted for  
people with a deadline."

Also, this comment:
> Twisted's users don't always realize that protocols and factories  
> and so on are just regular objects, with no special rules; they just  
> get methods called on them by the reactor.

should be prominently featured somewhere.


-Dan



From dripton at ripton.net  Thu May 28 20:01:42 2009
From: dripton at ripton.net (David Ripton)
Date: Thu, 28 May 2009 19:01:42 -0700
Subject: [Twisted-Python] Automatic test for Twisted
In-Reply-To: <368574aa0905281341o2d19f395ob31e1a4299640333@mail.gmail.com>
References: <3f9007680905281324n681415c1ia915cd8d8abaafd6@mail.gmail.com>
	<368574aa0905281341o2d19f395ob31e1a4299640333@mail.gmail.com>
Message-ID: <20090529020142.GA17340@vidar.dreamhost.com>

On 2009.05.28 16:41:20 -0400, Drew Smathers wrote:
> On Thu, May 28, 2009 at 4:24 PM, Juanjo Conti <jjconti at gmail.com> wrote:
> > is there a way to write sort of unittest for Twisted and run them?
> 
> Yes, with twisted.trial:
> 
> http://twistedmatrix.com/projects/core/documentation/howto/testing.html

Another option is nose.  Google for "nose.twistedtools"  

-- 
David Ripton    dripton at ripton.net



From charnedn at muohio.edu  Thu May 28 20:38:01 2009
From: charnedn at muohio.edu (Dan)
Date: Thu, 28 May 2009 22:38:01 -0400
Subject: [Twisted-Python] Twisted protocol as Django data source
In-Reply-To: <200905281543.47655.esteve@sindominio.net>
References: <D7D38F6A-59A3-4ABB-87AD-96E8EBC5451A@muohio.edu>
	<d272f0690905271248j64c54317h39c744607f3bd7a9@mail.gmail.com>
	<200905281543.47655.esteve@sindominio.net>
Message-ID: <DE21BA77-FC20-4E25-82A5-EB2DD39B3F3D@muohio.edu>

Thanks for all your replies.

Greg wrote:
> You might want to look into Orbited, there are a number of Django  
> examples
> out there:
>
> http://www.orbited.org

This looks very cool.  http://preview.tinyurl.com/3suqth (CometDaily)  
makes it seem extremely easy to develop for. Gonna play with this when  
I get a chance.

Jean-Paul wrote:
> Another option is to have Django talk to a Twisted process via some  
> RPC
> mechanism that won't require you to use Twisted in the Apache process.
> For example, XML-RPC.


I should have thought of this, as we're already using XML-RPC  
extensively in the application. All I'd really need to do is write a  
get_latest_data function and have Ajax poll Django poll XML-RPC. I  
keep forgetting that the GIL isn't anywhere near as much of a problem  
for this application now that it's Twisted than it was back when it  
was done entirely in threads.

And Esteve, there's a very good chance I'm going to start using  
Thrift. Thanks for pointing that out.

Alex wrote:
> I wrote up some thoughts on this here:
> http://clemesha.org/blog/2009/apr/23/Django-on-Twisted-using-latest-twisted-web-wsgi/
>
> basically it comes down to running Django off the very latest WSGI
> code (in the trunk still)
> found in twisted.web, which I've found to work very well.
>
> Also see here:
> http://blog.dreid.org/2009/03/twisted-django-it-wont-burn-down-your.html

WSGI is scary to me mostly because it's done in threads. Trying to  
find GIL-related bugs in the old code cost me a LOT of time. And while  
presumably this integration is done by people who are far better  
coders than I, I can't shake the thread safety thing.

Also, I almost never use someone else's svn head code if I can avoid  
it. This is partly because I don't consider myself a good enough  
debugger to file good reports against somebody's enormous source tree,  
but mostly because I want to be spending most of my time worrying  
about my code than someone else's.

The other unfortunate restraint is that Apache in this instance is non- 
optional, as the box we're using also houses mod_svn repositories.

Dave wrote:
> I don't think the database option is a hack. Have twisted write the  
> live
> stream items into a ring-buffer SQL database table (eg. use records  
> 1-100
> over and over again), including a timestamp for each entry. Then  
> your django
> page can always retrieve the most current set of entries by  
> SELECTing * from
> the table in descending order by timestamp, which django is good at,  
> staying
> live with constant refreshing. There are no interprocess communication
> pipes, broken sockets and timeouts etc. to screw up, no flaky  
> javascript to
> worry about, and the DBMS will handle the multiple simultaneous  
> separate
> data sources correctly. The central twisted application only has to  
> keep
> track of the buffer position. It's just not as much fun, though.

glyph at divmod wrote:
> Personally, I don't like using databases as a point of integration.
> Inevitably your Django app or your Twisted app will want to enforce
> constraints on the data and model things about the relationships  
> between
> rows beyond what one can glean by inspecting the SQL schema.

Okay, so calling it a "hack" probably wasn't a good choice of words. I  
was actually leaning strongly towards using our Postgres installation  
for Dave's reasons. But the thought of using the database for  
integration bothers me for precisely glyph's reason, even though we  
already have the multiplexer sticking data into Postgres. That's  
pretty much the driving worry behind my initial post. I'm trying to  
avoid Django's nice builtin database API like the plague because we  
store a LOT of data. Our indices have to be optimized for INSERTs; a  
typical query on this data comes with a human-noticeable delay (I  
haven't timed it, but on the order of a second). Doing that for 30-odd  
satellites isn't going to happen fast enough to make the UI smooth as  
we would like.

If I followed Dave's suggestion to the letter (ring-buffer), it would  
work, but something in me strongly resists storing the same data in  
two places. Probably the fact that every time I've done that, I've had  
sync issues. I could write a trigger for the synchronization, but that  
would break sqlite support, which I'm trying to keep in since it was  
requested at a conference.

Thank you all again for the advice, and I'm sorry if I misspelled  
anybody's name.

As I continue to work with this project, you'll doubtless hear from me  
again.

-Dan



From ntoper at gmail.com  Fri May 29 00:00:05 2009
From: ntoper at gmail.com (Nicolas Toper)
Date: Fri, 29 May 2009 01:00:05 -0500
Subject: [Twisted-Python] ESMTP extension
Message-ID: <fcbb46050905282300j3e5f7b98yb480ea06fce7debd@mail.gmail.com>

Hi,

I am using SMTP-AUTH with Twisted. I have extended smtp.mail to handle
LOGIN and PLAIN on the server side (the version I have handles only
CRAM-MD5). I am adding currently DIGEST-MD5.

Do you want a patch?

If yes, what is the best way to submit a patch (I could not find it on
the wiki)?

Best,
Nicolas
http://www.deviant-abstraction.net



From larsivi at gmail.com  Fri May 29 01:02:11 2009
From: larsivi at gmail.com (Lars Ivar Igesund)
Date: Fri, 29 May 2009 09:02:11 +0200
Subject: [Twisted-Python] Reactor callback from the wrong thread
In-Reply-To: <1243516911.20948.215.camel@pintsize>
References: <24e981170905270608p25f6057fl2ad2b7f71cc2fac6@mail.gmail.com>
	<20090527154322.21531.781574174.divmod.quotient.26327@henry.divmod.com>
	<24e981170905280504x7fa0dedexf91c45295dee706e@mail.gmail.com>
	<1243516911.20948.215.camel@pintsize>
Message-ID: <24e981170905290002j6f5f483erd36e0b5b6257ac4d@mail.gmail.com>

Thanks for the tip,

however - in which version was blockingCallFromThread added? It did
not wish to be imported from the version I installed via Ubuntu which
appears to be 2.5.0. (Bit confused about the version numbering though
since Twisted appears to be at something like 8.2)

Best,
Lars Ivar

On Thu, May 28, 2009 at 3:21 PM, Itamar Shtull-Trauring
<itamar at itamarst.org> wrote:
> On Thu, 2009-05-28 at 14:04 +0200, Lars Ivar Igesund wrote:
>
>> If anyone has a good advice, then I'd appreciate it.
>
> You can call any reactor API from another thread using
> reactor.callFromThread, or the more useful
> twisted.internet.threads.blockingCallFromThread. So just wrap all places
> that call into the reactor.
>
> Hopefully one day we will have feature to help debug this sort of
> problem:
> http://twistedmatrix.com/trac/ticket/792
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From michaelnt at gmail.com  Fri May 29 02:24:45 2009
From: michaelnt at gmail.com (Michael Thompson)
Date: Fri, 29 May 2009 09:24:45 +0100
Subject: [Twisted-Python] Guidance on Proxy-type Application
In-Reply-To: <20090528225800.12555.827283410.divmod.xquotient.11675@weber.divmod.com>
References: <20090528225800.12555.827283410.divmod.xquotient.11675@weber.divmod.com>
Message-ID: <4d6ba3de0905290124h3206cd4cne8b8f8767a54940e@mail.gmail.com>

2009/5/28 <glyph at divmod.com>

>
> On 01:23 am, asb.bush at gmail.com wrote:
>
>> I have just started to look at the Twisted framework and would like to put
>> it
>> to use for a new project I am working on.  Not being very familiar with
>> the
>> framework and fairly new to Python in general I would like to ask a
>> design/architecture question.  (I have written similar applications in C
>> but
>> would prefer to start this in the right direction and not write Python
>> like
>> C.)
>>
>
> Thanks for asking!
>
> I apologize for the delay in my answer.  I started writing up a simple
> example (attached) but was discouraged to find that it was 100 lines long
> and required too much explaining.
>
> Then I started documenting it and explaining every line but that was a very
> long, tedious message.  So, it doesn't have much in the way of explanation;
> I hope you will find it useful regardless.


Thanks for the very interesting example which I mainly follow apart from the
lineReceived method in the ProxyClient, don't we need to add a callback to
the deferred before appending it to the requestQueue?

class ProxyClient(LineReceiver):
    def connectionMade(self):
        self.requestQueue = []

    def forwardLine(self, line):
        self.sendLine(line)
        d = Deferred()
        self.requestQueue.append(d)
        return d

    def lineReceived(self, line):
        self.requestQueue.pop(0).callback(line)

Thanks, Michael
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090529/b2231724/attachment.html>

From michaelnt at gmail.com  Fri May 29 02:47:33 2009
From: michaelnt at gmail.com (Michael Thompson)
Date: Fri, 29 May 2009 09:47:33 +0100
Subject: [Twisted-Python] Guidance on Proxy-type Application
In-Reply-To: <4d6ba3de0905290124h3206cd4cne8b8f8767a54940e@mail.gmail.com>
References: <20090528225800.12555.827283410.divmod.xquotient.11675@weber.divmod.com>
	<4d6ba3de0905290124h3206cd4cne8b8f8767a54940e@mail.gmail.com>
Message-ID: <4d6ba3de0905290147i2be997eci820efaaa9f7ba42f@mail.gmail.com>

2009/5/29 Michael Thompson <michaelnt at gmail.com>

> 2009/5/28 <glyph at divmod.com>
>
>>
>> On 01:23 am, asb.bush at gmail.com wrote:
>>
>>> I have just started to look at the Twisted framework and would like to
>>> put it
>>> to use for a new project I am working on.  Not being very familiar with
>>> the
>>> framework and fairly new to Python in general I would like to ask a
>>> design/architecture question.  (I have written similar applications in C
>>> but
>>> would prefer to start this in the right direction and not write Python
>>> like
>>> C.)
>>>
>>
>> Thanks for asking!
>>
>> I apologize for the delay in my answer.  I started writing up a simple
>> example (attached) but was discouraged to find that it was 100 lines long
>> and required too much explaining.
>>
>> Then I started documenting it and explaining every line but that was a
>> very long, tedious message.  So, it doesn't have much in the way of
>> explanation; I hope you will find it useful regardless.
>
>
> Thanks for the very interesting example which I mainly follow apart from
> the lineReceived method in the ProxyClient, don't we need to add a callback
> to the deferred before appending it to the requestQueue?
>

Oops I see now that the callback is added in the proxy server lineReceived.

Thanks, Michael
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090529/42532c4e/attachment.html>

From rlotun at gmail.com  Fri May 29 06:04:12 2009
From: rlotun at gmail.com (Reza Lotun)
Date: Fri, 29 May 2009 13:04:12 +0100
Subject: [Twisted-Python] Automatic test for Twisted
In-Reply-To: <20090529020142.GA17340@vidar.dreamhost.com>
References: <3f9007680905281324n681415c1ia915cd8d8abaafd6@mail.gmail.com>
	<368574aa0905281341o2d19f395ob31e1a4299640333@mail.gmail.com>
	<20090529020142.GA17340@vidar.dreamhost.com>
Message-ID: <95bb10690905290504j714805demca37e1c4f2dc0e7c@mail.gmail.com>

On Fri, May 29, 2009 at 3:01 AM, David Ripton <dripton at ripton.net> wrote:
> Another option is nose.  Google for "nose.twistedtools"

I've used nose for twisted unittests - and it usually works fine for
my purposes.

Just to expand a bit on how *I've* used it:

from nose.twistedtools import deferred
from twisted.internet import defer

@deferred()
@defer.inlineCallbacks
def test_something():
   res = yield func_that_returns_deferred()
   assert res == 'something'

etc.

It's generally quite readable, and integrates nicely with non-twisted
unittests - I like the way that you can just write 'asserts'. However,
there are some caveats - namely that twisted is actually started in
another thread. So, if you plan to run a server to test calls against
(say in your setup_module) you need to make a wrapper around any
connection maker to use reactor.callFromThread.

Hope that's useful,
Reza

-- 
Reza Lotun
+44 (0)7521 310 763
rlotun at gmail.com



From exarkun at divmod.com  Fri May 29 06:25:56 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 29 May 2009 08:25:56 -0400
Subject: [Twisted-Python] ESMTP extension
In-Reply-To: <fcbb46050905282300j3e5f7b98yb480ea06fce7debd@mail.gmail.com>
Message-ID: <20090529122556.21531.1859389006.divmod.quotient.27034@henry.divmod.com>

On Fri, 29 May 2009 01:00:05 -0500, Nicolas Toper <ntoper at gmail.com> wrote:
>Hi,
>
>I am using SMTP-AUTH with Twisted. I have extended smtp.mail to handle
>LOGIN and PLAIN on the server side (the version I have handles only
>CRAM-MD5). I am adding currently DIGEST-MD5.
>
>Do you want a patch?
>
>If yes, what is the best way to submit a patch (I could not find it on
>the wiki)?

Hi Nicolas,

A patch adding DIGEST-MD5 support would be great.  You can find details on
how to contribute here:

  http://twistedmatrix.com/trac/wiki/TwistedDevelopment

You might also find twisted.cred.credentials.DigestedCredentials useful.

Jean-Paul



From thomas.jakobsen at alexandra.dk  Fri May 29 06:22:43 2009
From: thomas.jakobsen at alexandra.dk (Thomas Jakobsen)
Date: Fri, 29 May 2009 14:22:43 +0200
Subject: [Twisted-Python] reactor.stop() and deferToThead
Message-ID: <232f319b0905290522y7983b5f5h8fb95e6794c43b16@mail.gmail.com>

Hi

It seems that things being deferredToThread continue to run even
though reactor.stop() is called.

Output from the example below is:

stuff1 finished; stopping reactor
stuff2 finished

Is there a way to abort the remaining execution of stuff2 in this
case? It would be handy if, say, some exception happens in in stuff1
that causes the execution of the remaining stuff2 to be meaningless.

Kind regards,
Thomas

---------------------------------------------

from twisted.internet.threads import deferToThread
from twisted.internet import reactor

def stuff1():
    time.sleep(2)
    print "stuff1 finished; stopping reactor"
    reactor.stop()

def stuff2():
    time.sleep(4)
    print "stuff2 finished"

d1 = deferToThread(stuff1)
d2 = deferToThread(stuff2)

reactor.run()



From exarkun at divmod.com  Fri May 29 06:40:21 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 29 May 2009 08:40:21 -0400
Subject: [Twisted-Python] reactor.stop() and deferToThead
In-Reply-To: <232f319b0905290522y7983b5f5h8fb95e6794c43b16@mail.gmail.com>
Message-ID: <20090529124021.21531.27600129.divmod.quotient.27036@henry.divmod.com>

On Fri, 29 May 2009 14:22:43 +0200, Thomas Jakobsen <thomas.jakobsen at alexandra.dk> wrote:
>Hi
>
>It seems that things being deferredToThread continue to run even
>though reactor.stop() is called.

Threads cannot be interrupted.  They will run until they function they are
running returns.

>
>Output from the example below is:
>
>stuff1 finished; stopping reactor
>stuff2 finished
>
>Is there a way to abort the remaining execution of stuff2 in this
>case? It would be handy if, say, some exception happens in in stuff1
>that causes the execution of the remaining stuff2 to be meaningless.

You can make stuff2 cooperate with stuff1 so that it returns earlier.

> [snip]
>
>def stuff1():
>    time.sleep(2)
>    print "stuff1 finished; stopping reactor"
>    reactor.stop()

Also, you're calling reactor.stop() in a non-reactor thread here.  This is
not allowed.  You must call it in the reactor thread, along with almost
every other API.  Try reactor.callFromThread(reactor.stop), instead.

Jean-Paul



From charnedn at muohio.edu  Fri May 29 06:52:19 2009
From: charnedn at muohio.edu (Dan)
Date: Fri, 29 May 2009 08:52:19 -0400
Subject: [Twisted-Python] reactor.stop() and deferToThead
In-Reply-To: <232f319b0905290522y7983b5f5h8fb95e6794c43b16@mail.gmail.com>
References: <232f319b0905290522y7983b5f5h8fb95e6794c43b16@mail.gmail.com>
Message-ID: <2cbbbf391c5eda30435c2adc808b5b76@localhost>


Python seems to intentionally make aborting threads nigh impossible. You're
probably way better off doing something akin to this:

    def stuff2():
        time.sleep(4)
        if reactor.running:
            print "stuff2 finished"
        else:
            print "Don't need to stuff2"

Also iirc in Twisted you need to use callFromThread on reactor methods
rather than calling the reactor directly.


On Fri, 29 May 2009 14:22:43 +0200, Thomas Jakobsen
<thomas.jakobsen at alexandra.dk> wrote:
> Hi
> 
> It seems that things being deferredToThread continue to run even
> though reactor.stop() is called.
> 
> Output from the example below is:
> 
> stuff1 finished; stopping reactor
> stuff2 finished
> 
> Is there a way to abort the remaining execution of stuff2 in this
> case? It would be handy if, say, some exception happens in in stuff1
> that causes the execution of the remaining stuff2 to be meaningless.
> 
> Kind regards,
> Thomas
> 
> ---------------------------------------------
> 
> from twisted.internet.threads import deferToThread
> from twisted.internet import reactor
> 
> def stuff1():
>     time.sleep(2)
>     print "stuff1 finished; stopping reactor"
>     reactor.stop()
> 
> def stuff2():
>     time.sleep(4)
>     print "stuff2 finished"
> 
> d1 = deferToThread(stuff1)
> d2 = deferToThread(stuff2)
> 
> reactor.run()
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From thomas.jakobsen at alexandra.dk  Fri May 29 07:21:33 2009
From: thomas.jakobsen at alexandra.dk (Thomas Jakobsen)
Date: Fri, 29 May 2009 15:21:33 +0200
Subject: [Twisted-Python] reactor.stop() and deferToThead
In-Reply-To: <232f319b0905290620n6cbd7e28kcc04fff4c5ff235e@mail.gmail.com>
References: <232f319b0905290522y7983b5f5h8fb95e6794c43b16@mail.gmail.com>
	<2cbbbf391c5eda30435c2adc808b5b76@localhost>
	<232f319b0905290620n6cbd7e28kcc04fff4c5ff235e@mail.gmail.com>
Message-ID: <232f319b0905290621t4b135f94w985e7e9e8181c4e0@mail.gmail.com>

Thanks for the quick answers! Explicitly making stuff2() return as
soon as it discovers that the reactor has stopped solves the problem.

Regards,
Thomas



From itamar at itamarst.org  Fri May 29 07:39:44 2009
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 29 May 2009 09:39:44 -0400
Subject: [Twisted-Python] Reactor callback from the wrong thread
In-Reply-To: <24e981170905290002j6f5f483erd36e0b5b6257ac4d@mail.gmail.com>
References: <24e981170905270608p25f6057fl2ad2b7f71cc2fac6@mail.gmail.com>
	<20090527154322.21531.781574174.divmod.quotient.26327@henry.divmod.com>
	<24e981170905280504x7fa0dedexf91c45295dee706e@mail.gmail.com>
	<1243516911.20948.215.camel@pintsize>
	<24e981170905290002j6f5f483erd36e0b5b6257ac4d@mail.gmail.com>
Message-ID: <1243604384.8628.9.camel@pintsize>

On Fri, 2009-05-29 at 09:02 +0200, Lars Ivar Igesund wrote:
> Thanks for the tip,
> 
> however - in which version was blockingCallFromThread added? 

Post-2.5.0 apparently. I suggest at least reading the code so you can
see how it works.




From glyph at divmod.com  Fri May 29 09:22:40 2009
From: glyph at divmod.com (glyph at divmod.com)
Date: Fri, 29 May 2009 15:22:40 -0000
Subject: [Twisted-Python] Guidance on Proxy-type Application
In-Reply-To: <4d6ba3de0905290124h3206cd4cne8b8f8767a54940e@mail.gmail.com>
References: <20090528225800.12555.827283410.divmod.xquotient.11675@weber.divmod.com>
	<4d6ba3de0905290124h3206cd4cne8b8f8767a54940e@mail.gmail.com>
Message-ID: <20090529152240.12555.230203246.divmod.xquotient.12009@weber.divmod.com>


On 08:24 am, michaelnt at gmail.com wrote:
>2009/5/28 <glyph at divmod.com>

>Thanks for the very interesting example which I mainly follow apart 
>from the
>lineReceived method in the ProxyClient, don't we need to add a callback 
>to
>the deferred before appending it to the requestQueue?

Definitely not!  That would defeat the purpose.  The Deferred doesn't 
have a value yet: you're waiting for the other side of the connection to 
respond with an echo line.  As you can see, the result becomes available 
in lineReceived:
>class ProxyClient(LineReceiver):
>    def connectionMade(self):
>        self.requestQueue = []
>
>    def forwardLine(self, line):
>        self.sendLine(line)
>        d = Deferred()
>        self.requestQueue.append(d)
>        return d

And we callback the Deferred when it is available:
>    def lineReceived(self, line):
>        self.requestQueue.pop(0).callback(line)
>
>Thanks, Michael

HTH,

-glyph



From ntoper at gmail.com  Fri May 29 20:08:59 2009
From: ntoper at gmail.com (Nicolas Toper)
Date: Fri, 29 May 2009 21:08:59 -0500
Subject: [Twisted-Python] ESMTP extension
In-Reply-To: <20090529122556.21531.1859389006.divmod.quotient.27034@henry.divmod.com>
References: <fcbb46050905282300j3e5f7b98yb480ea06fce7debd@mail.gmail.com>
	<20090529122556.21531.1859389006.divmod.quotient.27034@henry.divmod.com>
Message-ID: <fcbb46050905291908j58410beah6da618c7659d99c4@mail.gmail.com>

No problem, just DIGEST-MD5. No need for PLAIN or LOGIN?


On Fri, May 29, 2009 at 7:25 AM, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> On Fri, 29 May 2009 01:00:05 -0500, Nicolas Toper <ntoper at gmail.com> wrote:
>>Hi,
>>
>>I am using SMTP-AUTH with Twisted. I have extended smtp.mail to handle
>>LOGIN and PLAIN on the server side (the version I have handles only
>>CRAM-MD5). I am adding currently DIGEST-MD5.
>>
>>Do you want a patch?
>>
>>If yes, what is the best way to submit a patch (I could not find it on
>>the wiki)?
>
> Hi Nicolas,
>
> A patch adding DIGEST-MD5 support would be great.  You can find details on
> how to contribute here:
>
>  http://twistedmatrix.com/trac/wiki/TwistedDevelopment
>
> You might also find twisted.cred.credentials.DigestedCredentials useful.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From exarkun at divmod.com  Sat May 30 00:19:30 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sat, 30 May 2009 02:19:30 -0400
Subject: [Twisted-Python] ESMTP extension
In-Reply-To: <fcbb46050905291908j58410beah6da618c7659d99c4@mail.gmail.com>
Message-ID: <20090530061930.21531.283615428.divmod.quotient.27484@henry.divmod.com>

On Fri, 29 May 2009 21:08:59 -0500, Nicolas Toper <ntoper at gmail.com> wrote:
>No problem, just DIGEST-MD5. No need for PLAIN or LOGIN?
>

I think it handles PLAIN and LOGIN already (and CRAM-MD5).  Maybe we're
not talking about the same API?  I was thinking about the ESMTP server.

Jean-Paul



From ntoper at gmail.com  Sat May 30 00:31:40 2009
From: ntoper at gmail.com (Nicolas Toper)
Date: Sat, 30 May 2009 01:31:40 -0500
Subject: [Twisted-Python] ESMTP extension
In-Reply-To: <20090530061930.21531.283615428.divmod.quotient.27484@henry.divmod.com>
References: <fcbb46050905291908j58410beah6da618c7659d99c4@mail.gmail.com>
	<20090530061930.21531.283615428.divmod.quotient.27484@henry.divmod.com>
Message-ID: <fcbb46050905292331x65e3bb1cv93a21f9b5ba34ff6@mail.gmail.com>

AFAIK the ESMTP client handles these cases, not the server. See
http://twistedmatrix.com/trac/browser/trunk/twisted/mail/protocols.py#L125

Maybe I did not get something.



On Sat, May 30, 2009 at 1:19 AM, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> On Fri, 29 May 2009 21:08:59 -0500, Nicolas Toper <ntoper at gmail.com> wrote:
>>No problem, just DIGEST-MD5. No need for PLAIN or LOGIN?
>>
>
> I think it handles PLAIN and LOGIN already (and CRAM-MD5).  Maybe we're
> not talking about the same API?  I was thinking about the ESMTP server.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From sakalsiz at gmail.com  Sat May 30 02:24:21 2009
From: sakalsiz at gmail.com (Mustafa Sakalsiz)
Date: Sat, 30 May 2009 11:24:21 +0300
Subject: [Twisted-Python] Twisted for Nokia S60 Platform
Message-ID: <767e5e0d0905300124g7f55ef54mec8a70fba1640a2d@mail.gmail.com>

Hi all,

I am wondering if somebody has tried to run the twisted on nokia's s60
platform. I am not expecting twisted operate with full functionality, but I
will be glad to hear about it if there are some efforts. I also wanted to be
involved in such an effort.

S60 platform already supports python 2.5.4 core and openssl.

Thanks in advance.

Saki
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090530/60b55838/attachment.html>

From glyph at divmod.com  Sat May 30 10:54:44 2009
From: glyph at divmod.com (glyph at divmod.com)
Date: Sat, 30 May 2009 16:54:44 -0000
Subject: [Twisted-Python] Twisted for Nokia S60 Platform
Message-ID: <20090530165444.12555.1484301518.divmod.xquotient.12016@weber.divmod.com>

On 08:24 am, sakalsiz at gmail.com wrote:
>I am wondering if somebody has tried to run the twisted on nokia's s60
>platform. I am not expecting twisted operate with full functionality, 
>but I
>will be glad to hear about it if there are some efforts. I also wanted 
>to be
>involved in such an effort.
>
>S60 platform already supports python 2.5.4 core and openssl.

Unfortunately I haven't done this, but please let us know if you manage 
to succeed!  It would be cool to have a buildbot for S60 support, 
somehow.

Personally, I have run the very basic core of Twisted on PythonCE, which 
is a similarly limited environment, and it worked pretty well.



From wthie at thiengineering.ch  Sat May 30 10:59:38 2009
From: wthie at thiengineering.ch (Werner Thie)
Date: Sat, 30 May 2009 18:59:38 +0200
Subject: [Twisted-Python] Twisted for Nokia S60 Platform
In-Reply-To: <767e5e0d0905300124g7f55ef54mec8a70fba1640a2d@mail.gmail.com>
References: <767e5e0d0905300124g7f55ef54mec8a70fba1640a2d@mail.gmail.com>
Message-ID: <4A2165FA.5020605@thiengineering.ch>

Hi all

I diddled with twisted on my Nokia E61 and managed to get some basics 
working. A few patches were necessary but I had it up and running in a 
few hours. Will have a look if the code is still around.

BTW, I didn't follow the development on this side closely being busy 
with other projects, but is there now an official Nokia release of 
Python 2.5. I still have the late beta version with the unbearable lousy 
cam implementation

Werner

Mustafa Sakalsiz wrote:
> Hi all,
> 
> I am wondering if somebody has tried to run the twisted on nokia's s60 
> platform. I am not expecting twisted operate with full functionality, 
> but I will be glad to hear about it if there are some efforts. I also 
> wanted to be involved in such an effort.
> 
> S60 platform already supports python 2.5.4 core and openssl.
> 
> Thanks in advance.
> 
> Saki
> 
> 
> ------------------------------------------------------------------------
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From travis+ml-twisted at subspacefield.org  Sat May 30 17:17:54 2009
From: travis+ml-twisted at subspacefield.org (travis+ml-twisted at subspacefield.org)
Date: Sat, 30 May 2009 18:17:54 -0500
Subject: [Twisted-Python] buildProtocol never called
Message-ID: <20090530231754.GA10964@subspacefield.org>

Hello,

First let me introduce a piece of software I have written using
Twisted: it's called dfd_keeper[1], and is a BSD/pf port of a generic
concept I invented called the dynamic firewall daemon[2].

[1] http://www.subspacefield.org/security/dfd_keeper/
[2] http://www.subspacefield.org/security/dfd/

If you like the concept, please promote the idea; I think it's neat
but there hasn't exactly been a groundswell of interest in it.

In essence, it allows you to netcat or telnet to the daemon process
and issue text-like commands that alter your firewall rules.  You can
think of it as a "shell" for the firewall, and it can do neat things
like create firewall rules that expire automatically after a period of
time and so on.

The problem I'm having is this; I upgraded my firewall from OpenBSD
4.2 or so to OpenBSD 4.5, and now I'm working with newer versions of
all the software including Twisted.

The program works fine normally, and can run in the background, but if I
invoke a daemonize() routine that turns it into a network daemon, it
refuses to serve incoming TCP connections.  Actually the TCP connection
is made, but the software never responds to it.

Specifically, my twisted.internet.protocol.Factory instance is created,
but buildProtocol is never called.

Before I dive deeply into debugging the software, I thought I'd ask if
anyone knew off the top of their head any reason why Twisted might not
act the same if it was daemonized (no controlling terminal, no
stdin/out/err, forked as a background process).

Thanks!
Travis H.
-- 
Obama Nation | My emails do not have attachments; it's a digital signature
that your mail program doesn't understand. | http://www.subspacefield.org/~travis/ 
If you are a spammer, please email john at subspacefield.org to get blacklisted.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 833 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20090530/119e7f8b/attachment.sig>

From travis+ml-twisted at subspacefield.org  Sat May 30 17:36:16 2009
From: travis+ml-twisted at subspacefield.org (travis+ml-twisted at subspacefield.org)
Date: Sat, 30 May 2009 18:36:16 -0500
Subject: [Twisted-Python] buildProtocol never called
In-Reply-To: <20090530231754.GA10964@subspacefield.org>
References: <20090530231754.GA10964@subspacefield.org>
Message-ID: <20090530233616.GB10964@subspacefield.org>

On Sat, May 30, 2009 at 06:17:54PM -0500, travis+ml-twisted at subspacefield.org wrote:
> The program works fine normally, and can run in the background, but if I
> invoke a daemonize() routine that turns it into a network daemon, it
> refuses to serve incoming TCP connections.  Actually the TCP connection
> is made, but the software never responds to it.
> 
> Specifically, my twisted.internet.protocol.Factory instance is created,
> but buildProtocol is never called.
> 
> Before I dive deeply into debugging the software, I thought I'd ask if
> anyone knew off the top of their head any reason why Twisted might not
> act the same if it was daemonized (no controlling terminal, no
> stdin/out/err, forked as a background process).

Here's some behavior I've gathered through debugging.  Note that all of
the daemonization occurs before starting the reactor.

If I don't close any file descriptors during daemonization, the
program works fine.

If I close all file descriptors (3, 4, 5, 6, 7)  and above, it works, but upon
disconnecting, I get the following error message:

  File "/etc/keeper_screen", line 675, in <module>
    reactor.run()
  File "/usr/local/lib/python2.5/site-packages/twisted/internet/base.py", line 1128, in run
    self.mainLoop()
--- <exception caught here> ---
  File "/usr/local/lib/python2.5/site-packages/twisted/internet/base.py", line 1140, in mainLoop
    self.doIteration(t)
  File "/usr/local/lib/python2.5/site-packages/twisted/internet/selectreactor.py", line 126, in doSelect
    self._preenDescriptors()
  File "/usr/local/lib/python2.5/site-packages/twisted/internet/selectreactor.py", line 88, in _preenDescriptors
    self._disconnectSelectable(selectable, e, False)
  File "/usr/local/lib/python2.5/site-packages/twisted/internet/posixbase.py", line 196, in _disconnectSelectable
    selectable.connectionLost(failure.Failure(why))
  File "/usr/local/lib/python2.5/site-packages/twisted/internet/posixbase.py", line 150, in connectionLost
    os.close(fd)
exceptions.OSError: [Errno 9] Bad file descriptor

If I close all file descriptors two and above, I get that error message immediately.

If I close all file descriptors eight and above, the program works normally.

Is there some code in Twisted that expects certain file descriptors to be open?

Anyone got a clue what could be happening here?
-- 
Obama Nation | My emails do not have attachments; it's a digital signature
that your mail program doesn't understand. | http://www.subspacefield.org/~travis/ 
If you are a spammer, please email john at subspacefield.org to get blacklisted.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 833 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20090530/2c7177f4/attachment.sig>

From exarkun at divmod.com  Sat May 30 18:26:40 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sat, 30 May 2009 20:26:40 -0400
Subject: [Twisted-Python] buildProtocol never called
In-Reply-To: <20090530233616.GB10964@subspacefield.org>
Message-ID: <20090531002640.21531.301131641.divmod.quotient.27721@henry.divmod.com>

On Sat, 30 May 2009 18:36:16 -0500, travis+ml-twisted at subspacefield.org wrote:
>On Sat, May 30, 2009 at 06:17:54PM -0500, travis+ml-twisted at subspacefield.org wrote:
>> The program works fine normally, and can run in the background, but if I
>> invoke a daemonize() routine that turns it into a network daemon, it
>> refuses to serve incoming TCP connections.  Actually the TCP connection
>> is made, but the software never responds to it.
>>
>> Specifically, my twisted.internet.protocol.Factory instance is created,
>> but buildProtocol is never called.
>>
>> Before I dive deeply into debugging the software, I thought I'd ask if
>> anyone knew off the top of their head any reason why Twisted might not
>> act the same if it was daemonized (no controlling terminal, no
>> stdin/out/err, forked as a background process).
>
>Here's some behavior I've gathered through debugging.  Note that all of
>the daemonization occurs before starting the reactor.

Creating the reactor at all may create a file descriptor which is necessary
for its operation.  Closing these will very likely cause problems.

Also, Twisted has daemonization features already which are known to work
well. ;)  Why aren't you using these?

Jean-Paul



From exarkun at twistedmatrix.com  Sat May 30 22:05:19 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 31 May 2009 04:05:19 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1243742719.54.1518606384@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090531/4b4bd258/attachment.html>

From travis+ml-twisted at subspacefield.org  Sun May 31 14:18:50 2009
From: travis+ml-twisted at subspacefield.org (travis+ml-twisted at subspacefield.org)
Date: Sun, 31 May 2009 15:18:50 -0500
Subject: [Twisted-Python] buildProtocol never called
In-Reply-To: <20090531002640.21531.301131641.divmod.quotient.27721@henry.divmod.com>
References: <20090530233616.GB10964@subspacefield.org>
	<20090531002640.21531.301131641.divmod.quotient.27721@henry.divmod.com>
Message-ID: <20090531201850.GD3055@subspacefield.org>

On Sat, May 30, 2009 at 08:26:40PM -0400, Jean-Paul Calderone wrote:
> Creating the reactor at all may create a file descriptor which is necessary
> for its operation.  Closing these will very likely cause problems.

This is all before calling any Twisted routines

> Also, Twisted has daemonization features already which are known to work
> well. ;)  Why aren't you using these?

Hadn't heard about it.  Where's the documentation?
-- 
Obama Nation | My emails do not have attachments; it's a digital signature
that your mail program doesn't understand. | http://www.subspacefield.org/~travis/ 
If you are a spammer, please email john at subspacefield.org to get blacklisted.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 833 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20090531/807a0a95/attachment.sig>

From johann.borck at densedata.com  Sun May 31 15:51:17 2009
From: johann.borck at densedata.com (Johann Borck)
Date: Sun, 31 May 2009 23:51:17 +0200
Subject: [Twisted-Python] buildProtocol never called
In-Reply-To: <20090531201850.GD3055@subspacefield.org>
References: <20090530233616.GB10964@subspacefield.org>	<20090531002640.21531.301131641.divmod.quotient.27721@henry.divmod.com>
	<20090531201850.GD3055@subspacefield.org>
Message-ID: <4A22FBD5.4040507@densedata.com>

travis+ml-twisted at subspacefield.org wrote:
> On Sat, May 30, 2009 at 08:26:40PM -0400, Jean-Paul Calderone wrote:
>   
>> Creating the reactor at all may create a file descriptor which is necessary
>> for its operation.  Closing these will very likely cause problems.
>>     
>
> This is all before calling any Twisted routines
>
>   
>> Also, Twisted has daemonization features already which are known to work
>> well. ;)  Why aren't you using these?
>>     
>
> Hadn't heard about it.  Where's the documentation?
>   
>   
look for "twistd":

http://twistedmatrix.com/projects/core/documentation/man/twistd-man.html
http://twistedmatrix.com/projects/core/documentation/howto/basics.html
http://twistedmatrix.com/projects/core/documentation/howto/tap.html
http://twistedmatrix.com/projects/core/documentation/howto/application.html

Johann



From brandon.mcginty at gmail.com  Sun May 31 16:06:39 2009
From: brandon.mcginty at gmail.com (Brandon McGinty)
Date: Sun, 31 May 2009 18:06:39 -0400
Subject: [Twisted-Python] Twisted Question
Message-ID: <4A22FF6F.90201@gmail.com>

Hi All,
I just subscribed to this list, after viewing tons of documents about 
twisted, factories, and all the like.
Here is the situation.
I am trying to design a bridge between twisted.web and 
twisted.words.protocols.irc.
I have read a lot about using factories, and communicating with a 
central "program class" like in the finger tutorial.
However, I can not figure out how to communicate between two running 
protocols.
Here's an example:
User connects to web server.
Irc client connects to irc server
User clicks on search link, and enters query.
A command, along with that query, is sent to irc server via irc client.
Response is returned, processed, and sent to the page that is the result 
of submiting that form.
Process continues until user clicks log out, where in the irc client 
disconnects.
Any help anyone can give me is greatly appreciated.

Thanks,
Brandon McGinty





-- 
--
Brandon McGinty
Email:brandon.mcginty at gmail.com
Tel:(602)-904-6548
SMS:(602)-904-6548
Skype:brandon.mcginty
MSN:brandon_mcginty at hotmail.com



From clemesha at gmail.com  Sun May 31 16:21:05 2009
From: clemesha at gmail.com (Alex Clemesha)
Date: Sun, 31 May 2009 15:21:05 -0700
Subject: [Twisted-Python] Twisted Question
In-Reply-To: <4A22FF6F.90201@gmail.com>
References: <4A22FF6F.90201@gmail.com>
Message-ID: <d272f0690905311521w7db5c272he399185910fc7597@mail.gmail.com>

On Sun, May 31, 2009 at 3:06 PM, Brandon McGinty
<brandon.mcginty at gmail.com> wrote:
> Hi All,
> I just subscribed to this list, after viewing tons of documents about
> twisted, factories, and all the like.
> Here is the situation.
> I am trying to design a bridge between twisted.web and
> twisted.words.protocols.irc.
There is a project called "Punjab" that you might want to look at:
http://code.stanziq.com/punjab

What punjab does is it bridges twisted.web and
twisted.words.protocols.jabber (XMPP)
and generally uses "twisted.words" a lot.  Unless you have a strict
requirement on doing
something IRC related, you might find that XMPP does a lot of 'IRC
type' things really well,
and there is a lot of momentum behing XMPP tools right now.

I imagine that this might be a good jumping off point for the work
that you are trying to do.

hth,
Alex



> I have read a lot about using factories, and communicating with a
> central "program class" like in the finger tutorial.
> However, I can not figure out how to communicate between two running
> protocols.
> Here's an example:
> User connects to web server.
> Irc client connects to irc server
> User clicks on search link, and enters query.
> A command, along with that query, is sent to irc server via irc client.
> Response is returned, processed, and sent to the page that is the result
> of submiting that form.
> Process continues until user clicks log out, where in the irc client
> disconnects.
> Any help anyone can give me is greatly appreciated.
>
> Thanks,
> Brandon McGinty
>
>
>
>
>
> --
> --
> Brandon McGinty
> Email:brandon.mcginty at gmail.com
> Tel:(602)-904-6548
> SMS:(602)-904-6548
> Skype:brandon.mcginty
> MSN:brandon_mcginty at hotmail.com
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Alex Clemesha
clemesha.org



From brandon.mcginty at gmail.com  Sun May 31 17:12:56 2009
From: brandon.mcginty at gmail.com (Brandon McGinty)
Date: Sun, 31 May 2009 19:12:56 -0400
Subject: [Twisted-Python] Twisted Question
In-Reply-To: <d272f0690905311521w7db5c272he399185910fc7597@mail.gmail.com>
References: <4A22FF6F.90201@gmail.com>
	<d272f0690905311521w7db5c272he399185910fc7597@mail.gmail.com>
Message-ID: <4A230EF8.1080206@gmail.com>

I'll give that a shot...unfortunately, the data is only accessible via 
an irc server and protocol.
Hopefully I can gleen some useful information about cross-protocol 
communication by lokng at the source.
Thank You,
Brandon McGinty



Alex Clemesha wrote:
> On Sun, May 31, 2009 at 3:06 PM, Brandon McGinty
> <brandon.mcginty at gmail.com> wrote:
>> Hi All,
>> I just subscribed to this list, after viewing tons of documents about
>> twisted, factories, and all the like.
>> Here is the situation.
>> I am trying to design a bridge between twisted.web and
>> twisted.words.protocols.irc.
> There is a project called "Punjab" that you might want to look at:
> http://code.stanziq.com/punjab
> 
> What punjab does is it bridges twisted.web and
> twisted.words.protocols.jabber (XMPP)
> and generally uses "twisted.words" a lot.  Unless you have a strict
> requirement on doing
> something IRC related, you might find that XMPP does a lot of 'IRC
> type' things really well,
> and there is a lot of momentum behing XMPP tools right now.
> 
> I imagine that this might be a good jumping off point for the work
> that you are trying to do.
> 
> hth,
> Alex
> 
> 
> 
>> I have read a lot about using factories, and communicating with a
>> central "program class" like in the finger tutorial.
>> However, I can not figure out how to communicate between two running
>> protocols.
>> Here's an example:
>> User connects to web server.
>> Irc client connects to irc server
>> User clicks on search link, and enters query.
>> A command, along with that query, is sent to irc server via irc client.
>> Response is returned, processed, and sent to the page that is the result
>> of submiting that form.
>> Process continues until user clicks log out, where in the irc client
>> disconnects.
>> Any help anyone can give me is greatly appreciated.
>>
>> Thanks,
>> Brandon McGinty
>>
>>
>>
>>
>>
>> --
>> --
>> Brandon McGinty
>> Email:brandon.mcginty at gmail.com
>> Tel:(602)-904-6548
>> SMS:(602)-904-6548
>> Skype:brandon.mcginty
>> MSN:brandon_mcginty at hotmail.com
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
> 
> 
> 

-- 
--
Brandon McGinty
Email:brandon.mcginty at gmail.com
Tel:(602)-904-6548
SMS:(602)-904-6548
Skype:brandon.mcginty
MSN:brandon_mcginty at hotmail.com



From exarkun at divmod.com  Sun May 31 19:49:05 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 31 May 2009 21:49:05 -0400
Subject: [Twisted-Python] buildProtocol never called
In-Reply-To: <20090531201850.GD3055@subspacefield.org>
Message-ID: <20090601014905.22176.1148433446.divmod.quotient.410@henry.divmod.com>

On Sun, 31 May 2009 15:18:50 -0500, travis+ml-twisted at subspacefield.org wrote:
>On Sat, May 30, 2009 at 08:26:40PM -0400, Jean-Paul Calderone wrote:
>> Creating the reactor at all may create a file descriptor which is necessary
>> for its operation.  Closing these will very likely cause problems.
>
>This is all before calling any Twisted routines

It's pretty easily to unintentionally import and instantiate the default
reactor.  Are you certain daemonization all happens before that?

>> Also, Twisted has daemonization features already which are known to work
>> well. ;)  Why aren't you using these?
>
>Hadn't heard about it.  Where's the documentation?

It's a feature of twistd.  http://twistedmatrix.com/projects/core/documentation/howto/tap.html and http://twistedmatrix.com/projects/core/documentation/howto/application.html talk about how to structure your code so as to be able to take advantage of the features of twistd.

Jean-Paul



From exarkun at divmod.com  Sun May 31 19:50:27 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 31 May 2009 21:50:27 -0400
Subject: [Twisted-Python] Twisted Question
In-Reply-To: <4A230EF8.1080206@gmail.com>
Message-ID: <20090601015027.22176.772177042.divmod.quotient.411@henry.divmod.com>

On Sun, 31 May 2009 19:12:56 -0400, Brandon McGinty <brandon.mcginty at gmail.com> wrote:
>I'll give that a shot...unfortunately, the data is only accessible via
>an irc server and protocol.
>Hopefully I can gleen some useful information about cross-protocol
>communication by lokng at the source.

http://twistedmatrix.com/trac/wiki/FrequentlyAskedQuestions#HowdoImakeinputononeconnectionresultinoutputonanother answers a question very similar to yours.

Jean-Paul



