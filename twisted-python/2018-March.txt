From twotonespirit at gmail.com  Sat Mar  3 15:38:14 2018
From: twotonespirit at gmail.com (Justin Myles Holmes)
Date: Sat, 3 Mar 2018 14:38:14 -0800
Subject: [Twisted-Python] Does Twisted support ECC for TLS?
Message-ID: <CAMGywB5vB+NiTUdVbgfwfkMdr93mu0MEc=s001VcvxDxPiaGFg@mail.gmail.com>

I'm trying to bend a little bit of custom TLS - one possible use case for
me is a HendrixDeploy object which uses an ethereum keypair to self-sign a
certificate.

So I'm wondering: is it currently possible to use an ECC keypair for TLS
with Twisted?

Here's what I've discovered:

twisted.internet.sssl.ContextFactory has a method, use_privatekey().  This
thing wants an OpenSSL.crypto.PKey object.  And, lo and behold, PKey offers
a facility, from_cryptography_key(), which attempts to use a key from
cryptography.io, from whence I'm generating keys anyway.  However, it
expects an RSA or DSA key, not an EC or ECDSA key.

Glyph suggested that, instead of trying to handle PKeys myself, I might try
loading PEM files with txsni or the like.

I can actually get txsni to work with my cert/keypair, but I don't seem to
be able to get a client to connect.  For example, Firefox tells me
"SSL_ERROR_NO_CYPHER_OVERLAP".

I tried the same things with SSL4ServerEndpoint, and I get exactly the same
thing - my protocol's dataReceived method is never run, no output appears
in the console, but the client gets this same error.

I notice that there's an issue on PyOpenSSL which appears to address this:


-- 
Justin Myles Holmes
justinholmes.com
thisisthebus.com
github.com/jMyles/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180303/115af3db/attachment.html>

From glyph at twistedmatrix.com  Sat Mar  3 20:06:15 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 3 Mar 2018 19:06:15 -0800
Subject: [Twisted-Python] Does Twisted support ECC for TLS?
In-Reply-To: <CAMGywB5vB+NiTUdVbgfwfkMdr93mu0MEc=s001VcvxDxPiaGFg@mail.gmail.com>
References: <CAMGywB5vB+NiTUdVbgfwfkMdr93mu0MEc=s001VcvxDxPiaGFg@mail.gmail.com>
Message-ID: <83B93268-D5EF-4ED3-8896-7498DD372AE5@twistedmatrix.com>



> On Mar 3, 2018, at 2:38 PM, Justin Myles Holmes <twotonespirit at gmail.com> wrote:
> 
> I'm trying to bend a little bit of custom TLS - one possible use case for me is a HendrixDeploy object which uses an ethereum keypair to self-sign a certificate.
> 
> So I'm wondering: is it currently possible to use an ECC keypair for TLS with Twisted? 
> 
> Here's what I've discovered:
> 
> twisted.internet.sssl.ContextFactory has a method, use_privatekey().  This thing wants an OpenSSL.crypto.PKey object.  And, lo and behold, PKey offers a facility, from_cryptography_key(), which attempts to use a key from cryptography.io <http://cryptography.io/>, from whence I'm generating keys anyway.  However, it expects an RSA or DSA key, not an EC or ECDSA key.
> 
> Glyph suggested that, instead of trying to handle PKeys myself, I might try loading PEM files with txsni or the like.
> 
> I can actually get txsni to work with my cert/keypair, but I don't seem to be able to get a client to connect.  For example, Firefox tells me "SSL_ERROR_NO_CYPHER_OVERLAP".
> 
> I tried the same things with SSL4ServerEndpoint, and I get exactly the same thing - my protocol's dataReceived method is never run, no output appears in the console, but the client gets this same error.
> 
> I notice that there's an issue on PyOpenSSL which appears to address this:

Looks like your message was truncated before getting to the link :-).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180303/d8ebbf5c/attachment.html>

From twotonespirit at gmail.com  Sat Mar  3 21:14:49 2018
From: twotonespirit at gmail.com (Justin Myles Holmes)
Date: Sat, 3 Mar 2018 20:14:49 -0800
Subject: [Twisted-Python] Does Twisted support ECC for TLS?
In-Reply-To: <83B93268-D5EF-4ED3-8896-7498DD372AE5@twistedmatrix.com>
References: <CAMGywB5vB+NiTUdVbgfwfkMdr93mu0MEc=s001VcvxDxPiaGFg@mail.gmail.com>
 <83B93268-D5EF-4ED3-8896-7498DD372AE5@twistedmatrix.com>
Message-ID: <CAMGywB6NheSyc5iTFW2zMG+HdxF_=jZwd=TO1NxMzkuzpTXt-w@mail.gmail.com>

Righto!

I notice that there's an issue on PyOpenSSL which appears to address this:

https://github.com/pyca/pyopenssl/pull/636

However, it's not clear that this actually moves the issue forward, as it
only provides for getting a PKey from a cryptography EC key, not for
actually using it for TLS.

One interesting tidbit I've noticed is that txsni does appear to support
TLS with ciphers that use SECP256R1 (also called "NIST P-256" - a curve of
questionable parentage), but not SECP256K1 (a curve used by several
prominent blockchain projects).

I'm not entirely sure where to turn next.



On Sat, Mar 3, 2018 at 7:06 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
>
> On Mar 3, 2018, at 2:38 PM, Justin Myles Holmes <twotonespirit at gmail.com>
> wrote:
>
> I'm trying to bend a little bit of custom TLS - one possible use case for
> me is a HendrixDeploy object which uses an ethereum keypair to self-sign a
> certificate.
>
> So I'm wondering: is it currently possible to use an ECC keypair for TLS
> with Twisted?
>
> Here's what I've discovered:
>
> twisted.internet.sssl.ContextFactory has a method, use_privatekey().
> This thing wants an OpenSSL.crypto.PKey object.  And, lo and behold, PKey
> offers a facility, from_cryptography_key(), which attempts to use a key
> from cryptography.io, from whence I'm generating keys anyway.  However,
> it expects an RSA or DSA key, not an EC or ECDSA key.
>
> Glyph suggested that, instead of trying to handle PKeys myself, I might
> try loading PEM files with txsni or the like.
>
> I can actually get txsni to work with my cert/keypair, but I don't seem to
> be able to get a client to connect.  For example, Firefox tells me
> "SSL_ERROR_NO_CYPHER_OVERLAP".
>
> I tried the same things with SSL4ServerEndpoint, and I get exactly the
> same thing - my protocol's dataReceived method is never run, no output
> appears in the console, but the client gets this same error.
>
> I notice that there's an issue on PyOpenSSL which appears to address this:
>
>
> Looks like your message was truncated before getting to the link :-).
>
> -glyph
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
Justin Myles Holmes
justinholmes.com
thisisthebus.com
github.com/jMyles/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180303/6d3900e0/attachment.html>

From twotonespirit at gmail.com  Sat Mar  3 23:31:49 2018
From: twotonespirit at gmail.com (Justin Myles Holmes)
Date: Sat, 3 Mar 2018 22:31:49 -0800
Subject: [Twisted-Python] Does Twisted support ECC for TLS?
In-Reply-To: <CAMGywB6NheSyc5iTFW2zMG+HdxF_=jZwd=TO1NxMzkuzpTXt-w@mail.gmail.com>
References: <CAMGywB5vB+NiTUdVbgfwfkMdr93mu0MEc=s001VcvxDxPiaGFg@mail.gmail.com>
 <83B93268-D5EF-4ED3-8896-7498DD372AE5@twistedmatrix.com>
 <CAMGywB6NheSyc5iTFW2zMG+HdxF_=jZwd=TO1NxMzkuzpTXt-w@mail.gmail.com>
Message-ID: <CAMGywB5cFuMJJGEaf2uktdb8YddjHfrUvvApeT2QVpjFa=QTOw@mail.gmail.com>

OK, I think I've got it figured out, but I'm still not sure what to do
about it.

In twisted.internet._sslverify.py, there's:

_defaultCurveName = u"prime256v1"

Then, later, this curve is set as self.ecCurve on
OpenSSLCertificateOptions.  There appears to be no way to change this, but
of course "prime256v1" is not the curve I want.

There was a PR recently merged - #928, which uses a PyOpenSSL curve instead
of the proxy class which existed prior.  However, it still doesn't allow me
to pass a curve name or nid - how can I specify a curve of my choice?

On Sat, Mar 3, 2018 at 8:14 PM, Justin Myles Holmes <twotonespirit at gmail.com
> wrote:

> Righto!
>
> I notice that there's an issue on PyOpenSSL which appears to address this:
>
> https://github.com/pyca/pyopenssl/pull/636
>
> However, it's not clear that this actually moves the issue forward, as it
> only provides for getting a PKey from a cryptography EC key, not for
> actually using it for TLS.
>
> One interesting tidbit I've noticed is that txsni does appear to support
> TLS with ciphers that use SECP256R1 (also called "NIST P-256" - a curve of
> questionable parentage), but not SECP256K1 (a curve used by several
> prominent blockchain projects).
>
> I'm not entirely sure where to turn next.
>
>
>
> On Sat, Mar 3, 2018 at 7:06 PM, Glyph <glyph at twistedmatrix.com> wrote:
>
>>
>>
>> On Mar 3, 2018, at 2:38 PM, Justin Myles Holmes <twotonespirit at gmail.com>
>> wrote:
>>
>> I'm trying to bend a little bit of custom TLS - one possible use case for
>> me is a HendrixDeploy object which uses an ethereum keypair to self-sign a
>> certificate.
>>
>> So I'm wondering: is it currently possible to use an ECC keypair for TLS
>> with Twisted?
>>
>> Here's what I've discovered:
>>
>> twisted.internet.sssl.ContextFactory has a method, use_privatekey().
>> This thing wants an OpenSSL.crypto.PKey object.  And, lo and behold, PKey
>> offers a facility, from_cryptography_key(), which attempts to use a key
>> from cryptography.io, from whence I'm generating keys anyway.  However,
>> it expects an RSA or DSA key, not an EC or ECDSA key.
>>
>> Glyph suggested that, instead of trying to handle PKeys myself, I might
>> try loading PEM files with txsni or the like.
>>
>> I can actually get txsni to work with my cert/keypair, but I don't seem
>> to be able to get a client to connect.  For example, Firefox tells me
>> "SSL_ERROR_NO_CYPHER_OVERLAP".
>>
>> I tried the same things with SSL4ServerEndpoint, and I get exactly the
>> same thing - my protocol's dataReceived method is never run, no output
>> appears in the console, but the client gets this same error.
>>
>> I notice that there's an issue on PyOpenSSL which appears to address this:
>>
>>
>> Looks like your message was truncated before getting to the link :-).
>>
>> -glyph
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
>
> --
> Justin Myles Holmes
> justinholmes.com
> thisisthebus.com
> github.com/jMyles/
>



-- 
Justin Myles Holmes
justinholmes.com
thisisthebus.com
github.com/jMyles/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180303/d0c46fb3/attachment-0001.html>

From trac at twistedmatrix.com  Sun Mar  4 00:05:40 2018
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 04 Mar 2018 07:05:40 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1520147140.34.9131413427874854338@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180304/f10716df/attachment.html>

From wiml at omnigroup.com  Tue Mar  6 13:20:36 2018
From: wiml at omnigroup.com (Wim Lewis)
Date: Tue, 6 Mar 2018 12:20:36 -0800
Subject: [Twisted-Python] INCOMPATIBLE CHANGE: Removal of
	t.c.ssh.filetransfer.FileTransferClient.wasAFile
Message-ID: <999EECC6-25E7-4F29-B7D2-3CBC6A9E2D0F@omnigroup.com>

In PR 949 ("Remove “terrible hack” in t.c.ssh.filetransfer.FileTransferClient", trac bug 9362) I'm removing an attribute of FileTransferClient which I'm pretty sure was never intended to be public. Adi Roiban points out that this is technically a compatibility-breaking change, though, and so it needs more public review.

My reasoning for thinking that this will not break any user code: the attribute, although not prefixed with an underscore, was undocumented; anyone relying on it would have had to read the source code to discover what it does, and in the source it was commented as a "TERRIBLE HACK". I'd hope this would be enough of a warning. (Also, I can't think of a use for it.)

trac: https://twistedmatrix.com/trac/ticket/9362
pr: https://github.com/twisted/twisted/pull/949



From adi at roiban.ro  Wed Mar  7 03:12:53 2018
From: adi at roiban.ro (Adi Roiban)
Date: Wed, 7 Mar 2018 10:12:53 +0000
Subject: [Twisted-Python] INCOMPATIBLE CHANGE: Removal of
	t.c.ssh.filetransfer.FileTransferClient.wasAFile
In-Reply-To: <999EECC6-25E7-4F29-B7D2-3CBC6A9E2D0F@omnigroup.com>
References: <999EECC6-25E7-4F29-B7D2-3CBC6A9E2D0F@omnigroup.com>
Message-ID: <CAFycZ9eNLOPEtGL=H97peeQg938TjGutmbDMr8sTADdx-w_b_g@mail.gmail.com>

Hi,

Thank you so much Wim for helping with this cleanup.

As commented in the PR I am +1 for this exceptions.

Cheers,
Adi

On 6 March 2018 at 20:20, Wim Lewis <wiml at omnigroup.com> wrote:
> In PR 949 ("Remove “terrible hack” in t.c.ssh.filetransfer.FileTransferClient", trac bug 9362) I'm removing an attribute of FileTransferClient which I'm pretty sure was never intended to be public. Adi Roiban points out that this is technically a compatibility-breaking change, though, and so it needs more public review.
>
> My reasoning for thinking that this will not break any user code: the attribute, although not prefixed with an underscore, was undocumented; anyone relying on it would have had to read the source code to discover what it does, and in the source it was commented as a "TERRIBLE HACK". I'd hope this would be enough of a warning. (Also, I can't think of a use for it.)
>
> trac: https://twistedmatrix.com/trac/ticket/9362
> pr: https://github.com/twisted/twisted/pull/949
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



-- 
Adi Roiban


From ilyaskriblovsky at gmail.com  Fri Mar  9 05:03:25 2018
From: ilyaskriblovsky at gmail.com (Ilya Skriblovsky)
Date: Fri, 09 Mar 2018 12:03:25 +0000
Subject: [Twisted-Python] Circular references in TLSMemoryBIOProtocol
In-Reply-To: <C3E8F5B0-BAD1-4077-B15B-A96D2C361AC1@twistedmatrix.com>
References: <CAOG7vkw5GSRcz=SPQMoiF+sFy3e-WsW2f3n7nwH0mGMtgTzudA@mail.gmail.com>
 <CAOG7vkyoPvvppR-6MivPhD86vnW9QYsAshBw2G4-E38uN9eZWA@mail.gmail.com>
 <B6CD6518-1407-449E-B347-C0FF54E77381@twistedmatrix.com>
 <CAOG7vkx+mApGk0dsd1vn8SXGSDZrqaWtA=4kqih901-XZ2ru+g@mail.gmail.com>
 <5C0AD3B3-C328-4057-B268-B01A7D811784@twistedmatrix.com>
 <CAOG7vkxSj++9WPM0Ukb-siM8ZaQPAEP0otpB0eFsNqK0HCXB=g@mail.gmail.com>
 <3F914B30-7F46-4753-9789-C32F19BF891D@twistedmatrix.com>
 <CAOG7vkyDLtjGJpm3UH3T2xxfwSFJepqByZ4+HSkbv9Ug4=vRDg@mail.gmail.com>
 <CAOG7vky7Lh3VLqPM0fOKktU9ua3_Wukx7k-Og_URZEqodBKuUw@mail.gmail.com>
 <C3E8F5B0-BAD1-4077-B15B-A96D2C361AC1@twistedmatrix.com>
Message-ID: <CAOG7vkx-WtvqqwV6dGX7na__o8PpKjnFdY-CtJqkrdDqSRizMQ@mail.gmail.com>

Just wanted to make sure, did I all what I should do for putting this
ticket into review: https://twistedmatrix.com/trac/ticket/9374 ?
Should I just wait for maintainers to review it?

Thanks

вт, 30 янв. 2018 г. в 6:28, Glyph <glyph at twistedmatrix.com>:

>
>
> On Jan 29, 2018, at 12:27 PM, Ilya Skriblovsky <ilyaskriblovsky at gmail.com>
> wrote:
>
> Never mind, I realized I didn't some steps 10+ from The Manual
> http://twistedmatrix.com/trac/wiki/TwistedDevelopment#SubmittingaPatch
> Will fix that
>
> No worries, the process is always a little tricky the first time :-).
>
> Thanks for contributing!
>
> -g
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180309/0b0a69ab/attachment.html>

From glyph at twistedmatrix.com  Fri Mar  9 21:57:41 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 9 Mar 2018 20:57:41 -0800
Subject: [Twisted-Python] Circular references in TLSMemoryBIOProtocol
In-Reply-To: <CAOG7vkx-WtvqqwV6dGX7na__o8PpKjnFdY-CtJqkrdDqSRizMQ@mail.gmail.com>
References: <CAOG7vkw5GSRcz=SPQMoiF+sFy3e-WsW2f3n7nwH0mGMtgTzudA@mail.gmail.com>
 <CAOG7vkyoPvvppR-6MivPhD86vnW9QYsAshBw2G4-E38uN9eZWA@mail.gmail.com>
 <B6CD6518-1407-449E-B347-C0FF54E77381@twistedmatrix.com>
 <CAOG7vkx+mApGk0dsd1vn8SXGSDZrqaWtA=4kqih901-XZ2ru+g@mail.gmail.com>
 <5C0AD3B3-C328-4057-B268-B01A7D811784@twistedmatrix.com>
 <CAOG7vkxSj++9WPM0Ukb-siM8ZaQPAEP0otpB0eFsNqK0HCXB=g@mail.gmail.com>
 <3F914B30-7F46-4753-9789-C32F19BF891D@twistedmatrix.com>
 <CAOG7vkyDLtjGJpm3UH3T2xxfwSFJepqByZ4+HSkbv9Ug4=vRDg@mail.gmail.com>
 <CAOG7vky7Lh3VLqPM0fOKktU9ua3_Wukx7k-Og_URZEqodBKuUw@mail.gmail.com>
 <C3E8F5B0-BAD1-4077-B15B-A96D2C361AC1@twistedmatrix.com>
 <CAOG7vkx-WtvqqwV6dGX7na__o8PpKjnFdY-CtJqkrdDqSRizMQ@mail.gmail.com>
Message-ID: <C18396BB-6E18-46F0-A00B-B0C1FB6321EE@twistedmatrix.com>

On Mar 9, 2018, at 4:03 AM, Ilya Skriblovsky <ilyaskriblovsky at gmail.com> wrote:
> 
> Just wanted to make sure, did I all what I should do for putting this ticket into review: https://twistedmatrix.com/trac/ticket/9374 <https://twistedmatrix.com/trac/ticket/9374> ?
> Should I just wait for maintainers to review it?

You've done all the right things. :)

Twisted maintainers go through the list at https://twisted.reviews <https://twisted.reviews/> and review things, and you can indeed see that your change is on that list.

Unfortunately, as you can see, there's quite a backlog.  Personally I have been quite busy with a new child and a new startup, so (as previously discussed on this very mailing list) I haven't been doing much in the way of code review myself recently.  Even what little open source time I have needs to be focused elsewhere at the moment.

The best thing you can do to accelerate your own change getting reviewed is to code review others' changes, so that when a reviewer arrives to stochastically select something to review it is more likely that they'll select your thing instead of one of the other things :-).

The second best thing you can do is to donate a lot of money using the form on the front page of the web site: https://twistedmatrix.com/trac/#DonatetoTwisted <https://twistedmatrix.com/trac/#DonatetoTwisted>, which, at some point, will allow us to re-start the Twisted fellowship program http://labs.twistedmatrix.com/2015/06/twisted-fellowship-2015-call-for.html <http://labs.twistedmatrix.com/2015/06/twisted-fellowship-2015-call-for.html> and have someone actually keep the review queue clear as their actual paid responsibility :).

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180309/5585a140/attachment.html>

From adi at roiban.ro  Sat Mar 10 01:49:34 2018
From: adi at roiban.ro (Adi Roiban)
Date: Sat, 10 Mar 2018 08:49:34 +0000
Subject: [Twisted-Python] Circular references in TLSMemoryBIOProtocol
In-Reply-To: <C18396BB-6E18-46F0-A00B-B0C1FB6321EE@twistedmatrix.com>
References: <CAOG7vkw5GSRcz=SPQMoiF+sFy3e-WsW2f3n7nwH0mGMtgTzudA@mail.gmail.com>
 <CAOG7vkyoPvvppR-6MivPhD86vnW9QYsAshBw2G4-E38uN9eZWA@mail.gmail.com>
 <B6CD6518-1407-449E-B347-C0FF54E77381@twistedmatrix.com>
 <CAOG7vkx+mApGk0dsd1vn8SXGSDZrqaWtA=4kqih901-XZ2ru+g@mail.gmail.com>
 <5C0AD3B3-C328-4057-B268-B01A7D811784@twistedmatrix.com>
 <CAOG7vkxSj++9WPM0Ukb-siM8ZaQPAEP0otpB0eFsNqK0HCXB=g@mail.gmail.com>
 <3F914B30-7F46-4753-9789-C32F19BF891D@twistedmatrix.com>
 <CAOG7vkyDLtjGJpm3UH3T2xxfwSFJepqByZ4+HSkbv9Ug4=vRDg@mail.gmail.com>
 <CAOG7vky7Lh3VLqPM0fOKktU9ua3_Wukx7k-Og_URZEqodBKuUw@mail.gmail.com>
 <C3E8F5B0-BAD1-4077-B15B-A96D2C361AC1@twistedmatrix.com>
 <CAOG7vkx-WtvqqwV6dGX7na__o8PpKjnFdY-CtJqkrdDqSRizMQ@mail.gmail.com>
 <C18396BB-6E18-46F0-A00B-B0C1FB6321EE@twistedmatrix.com>
Message-ID: <CAFycZ9eFRmxD0uWGOK5+mWH_at09hhi33x98_0giexYOAddRPg@mail.gmail.com>

On 10 March 2018 at 04:57, Glyph <glyph at twistedmatrix.com> wrote:
> On Mar 9, 2018, at 4:03 AM, Ilya Skriblovsky <ilyaskriblovsky at gmail.com>
> wrote:
>
>
> Just wanted to make sure, did I all what I should do for putting this ticket
> into review: https://twistedmatrix.com/trac/ticket/9374 ?
> Should I just wait for maintainers to review it?
>
>
> You've done all the right things. :)

I went for an initial review.

> The best thing you can do to accelerate your own change getting reviewed is
> to code review others' changes, so that when a reviewer arrives to
> stochastically select something to review it is more likely that they'll
> select your thing instead of one of the other things :-).

+1

I am thinking of adding this to the wiki page for the review process.

I think that we can try and see how it goes.

Doing a review is not easy, you end up with the responsibility for the
approved code, but with the size of the queue I think that we should
try.

> The second best thing you can do is to donate a lot of money using the form
> on the front page of the web site:
> https://twistedmatrix.com/trac/#DonatetoTwisted, which, at some point, will
> allow us to re-start the Twisted fellowship program
> http://labs.twistedmatrix.com/2015/06/twisted-fellowship-2015-call-for.html
> and have someone actually keep the review queue clear as their actual paid
> responsibility :).

> -g

+1 on this.
I think that it might work even if we get someone to work on this 1
hour per day.

Glyph, do you know what is the required money we need to raise to
start this program... and are the current money on bank now?

Thanks!
-- 
Adi Roiban


From ilyaskriblovsky at gmail.com  Sat Mar 10 14:05:49 2018
From: ilyaskriblovsky at gmail.com (Ilya Skriblovsky)
Date: Sat, 10 Mar 2018 21:05:49 +0000
Subject: [Twisted-Python] Circular references in TLSMemoryBIOProtocol
In-Reply-To: <C18396BB-6E18-46F0-A00B-B0C1FB6321EE@twistedmatrix.com>
References: <CAOG7vkw5GSRcz=SPQMoiF+sFy3e-WsW2f3n7nwH0mGMtgTzudA@mail.gmail.com>
 <CAOG7vkyoPvvppR-6MivPhD86vnW9QYsAshBw2G4-E38uN9eZWA@mail.gmail.com>
 <B6CD6518-1407-449E-B347-C0FF54E77381@twistedmatrix.com>
 <CAOG7vkx+mApGk0dsd1vn8SXGSDZrqaWtA=4kqih901-XZ2ru+g@mail.gmail.com>
 <5C0AD3B3-C328-4057-B268-B01A7D811784@twistedmatrix.com>
 <CAOG7vkxSj++9WPM0Ukb-siM8ZaQPAEP0otpB0eFsNqK0HCXB=g@mail.gmail.com>
 <3F914B30-7F46-4753-9789-C32F19BF891D@twistedmatrix.com>
 <CAOG7vkyDLtjGJpm3UH3T2xxfwSFJepqByZ4+HSkbv9Ug4=vRDg@mail.gmail.com>
 <CAOG7vky7Lh3VLqPM0fOKktU9ua3_Wukx7k-Og_URZEqodBKuUw@mail.gmail.com>
 <C3E8F5B0-BAD1-4077-B15B-A96D2C361AC1@twistedmatrix.com>
 <CAOG7vkx-WtvqqwV6dGX7na__o8PpKjnFdY-CtJqkrdDqSRizMQ@mail.gmail.com>
 <C18396BB-6E18-46F0-A00B-B0C1FB6321EE@twistedmatrix.com>
Message-ID: <CAOG7vkysBTH8r_zjaZB9nFKDQwNrUKkinPttcrnEQb2aX3naiQ@mail.gmail.com>

> You've done all the right things. :)

Thanks for clarifications and congrats on your newborn!

сб, 10 мар. 2018 г. в 7:58, Glyph <glyph at twistedmatrix.com>:

> On Mar 9, 2018, at 4:03 AM, Ilya Skriblovsky <ilyaskriblovsky at gmail.com>
> wrote:
>
>
> Just wanted to make sure, did I all what I should do for putting this
> ticket into review: https://twistedmatrix.com/trac/ticket/9374 ?
> Should I just wait for maintainers to review it?
>
>
> You've done all the right things. :)
>
> Twisted maintainers go through the list at https://twisted.reviews and
> review things, and you can indeed see that your change is on that list.
>
> Unfortunately, as you can see, there's quite a backlog.  Personally I have
> been quite busy with a new child and a new startup, so (as previously
> discussed on this very mailing list) I haven't been doing much in the way
> of code review myself recently.  Even what little open source time I have
> needs to be focused elsewhere at the moment.
>
> The best thing you can do to accelerate your own change getting reviewed
> is to code review others' changes, so that when a reviewer arrives to
> stochastically select something to review it is more likely that they'll
> select your thing instead of one of the other things :-).
>
> The second best thing you can do is to donate a lot of money using the
> form on the front page of the web site:
> https://twistedmatrix.com/trac/#DonatetoTwisted, which, at some point,
> will allow us to re-start the Twisted fellowship program
> http://labs.twistedmatrix.com/2015/06/twisted-fellowship-2015-call-for.html and
> have someone actually keep the review queue clear as their actual paid
> responsibility :).
>
> -g
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180310/84f7af69/attachment.html>

From trac at twistedmatrix.com  Sun Mar 11 00:05:29 2018
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 11 Mar 2018 07:05:29 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1520751929.58.5450280955943677827@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180311/c0c9f393/attachment.html>

From adi at roiban.ro  Mon Mar 12 05:59:49 2018
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 12 Mar 2018 11:59:49 +0000
Subject: [Twisted-Python] List of required builds before a merge
Message-ID: <CAFycZ9eFeX0BnoqDYXToOFQDMBRvAHa=5mjxes4=YTKpbxVg4g@mail.gmail.com>

Hi,

It is not clear to me what builders need to pass before we can merge something.

I expect that all supported "platforms" need to pass, but it is not
clear what are the currently supported platforms.

We have this info in the wiki but it does not help.
https://twistedmatrix.com/trac/wiki/ReviewProcess#Authors:Howtomergethechangetotrunk

In GitHub I can see Travis / Appveyor and OSX from Buildot as "Required"

Is that all?

----------

If I check the "supported" group in Buildbot, I see many more builders.
The problem is that a significant number of slaves are down and those
builders are not available.

--------

Is Fedora still supported and required?

-------

I suggest to use GitHub "Required" marker to document what platforms
are supported.

We don't have time to maintain the infrastructure, so I suggest to
drop support for anything that is not supported by Travis and
Appveyor.

I know that this might be disruptive.
I think that we need it in order to raise awareness that supporting a
platform is not easy.
If someone (including me) cares about a platform they should find a
way to help to project supporting that platform.

What do you think?
-- 
Adi Roiban


From exarkun at twistedmatrix.com  Mon Mar 12 06:14:55 2018
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Mon, 12 Mar 2018 08:14:55 -0400
Subject: [Twisted-Python] List of required builds before a merge
In-Reply-To: <CAFycZ9eFeX0BnoqDYXToOFQDMBRvAHa=5mjxes4=YTKpbxVg4g@mail.gmail.com>
References: <CAFycZ9eFeX0BnoqDYXToOFQDMBRvAHa=5mjxes4=YTKpbxVg4g@mail.gmail.com>
Message-ID: <CAEeXt4P2-ah8X5GXOaTsqA0MFvnvDX3K5rqZf3HGEKdCnnzOEw@mail.gmail.com>

On Mon, Mar 12, 2018 at 7:59 AM, Adi Roiban <adi at roiban.ro> wrote:

> Hi,
>
> It is not clear to me what builders need to pass before we can merge
> something.
>
> I expect that all supported "platforms" need to pass, but it is not
> clear what are the currently supported platforms.
>
> We have this info in the wiki but it does not help.
> https://twistedmatrix.com/trac/wiki/ReviewProcess#Authors:
> Howtomergethechangetotrunk
>
> In GitHub I can see Travis / Appveyor and OSX from Buildot as "Required"
>
> Is that all?
>
> ----------
>
> If I check the "supported" group in Buildbot, I see many more builders.
> The problem is that a significant number of slaves are down and those
> builders are not available.
>
> --------
>
> Is Fedora still supported and required?
>
> -------
>
> I suggest to use GitHub "Required" marker to document what platforms
> are supported.
>
> We don't have time to maintain the infrastructure, so I suggest to
> drop support for anything that is not supported by Travis and
> Appveyor.
>

It would help to have a list of what coverage this would remove.  What
platforms are only covered by Travis and Appveyor?   What tests are only
run there?  What platforms are only covered by Buildbot?  What tests are
only run there?

Without this information, it's not really possible to make an informed
decision.  No user cares about whether we drop buildbot.  Some user might
care if we, for example, drop HTTP support.


>
> I know that this might be disruptive.
> I think that we need it in order to raise awareness that supporting a
> platform is not easy.
> If someone (including me) cares about a platform they should find a
> way to help to project supporting that platform.
>
>
Note that some people cared about some platforms and they found a way to
help in donating a buildslave.  Do the operators of the offline slaves
*know* that the slaves are offline?  Maybe all that's missing is some
notification to the operators when their slave goes away.  If that's all,
jumping straight to "throw away all of buildbot" seems like an overreaction.

Jean-Paul



> What do you think?
> --
> Adi Roiban
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180312/d78d506e/attachment.html>

From richard at matrix.org  Mon Mar 12 12:49:24 2018
From: richard at matrix.org (Richard van der Hoff)
Date: Mon, 12 Mar 2018 18:49:24 +0000
Subject: [Twisted-Python] Waiting for a contended resource
Message-ID: <72bd5441-e86a-b438-cc8e-db2f95d36d52@matrix.org>

Hi folks,

I thought I'd poll the list on the best way to approach a problem in 
Twisted.

The background is that we have a number of resources which can be 
requested by a REST client, and which are calculated on demand. The 
calculation is moderately expensive (can take multiple seconds), so the 
results of the calculation are cached so multiple lookups of the same 
resource are more efficient.

The problem comes in trying to handle multiple clients requesting the 
same resource at once. Obviously if 200 clients all request the same 
resource at the same time, we don't want to fire off 200 calculation 
requests.

The approach we adopted was, effectively, to maintain a lock for each 
resource:

> lock = defer.DeferredLock()
> cached_result = None
>
> @defer.inlineCallbacks
> def getResource():
>      yield lock.acquire()
>      try:
>          if cached_result is None:
>              cached_result = yield do_expensive_calculation()
>          defer.returnValue(cached_result)
>      finally:
>          lock.release()

(Of course one can optimise the above to avoid getting the lock if we 
already have the cached result - I've omitted that for simplicity.)

That's all very well, but it falls down when we get more than about 200 
requests for the same resource: once the calculation completes, we can 
suddenly serve all the requests, and the Deferreds returned by 
DeferredLock end up chaining together in a way that overflows the stack.

I reported this as http://twistedmatrix.com/trac/ticket/9304 and, at the 
time, worked around it by adding a call to reactor.callLater(0) into our 
implementation. However, Jean-Paul's comments on that bug implied that 
we were approaching the problem in completely the wrong way, and instead 
we should be avoiding queuing up work like this in the first place.

It's worth reiterating that the requests arrive from REST clients which 
we have no direct control over. We *could* keep track of the number of 
waiting clients, and make the API respond with a 5xx error or similar if 
that number gets too high, with the expectation that the client retries 
- but one concern would be that the load from the additional HTTP 
traffic would outweigh any efficiency gained by not stacking up Deferreds.

So, I'd welcome any advice on better ways to approach the problem.

Richard


From ldanielburr at me.com  Mon Mar 12 13:36:06 2018
From: ldanielburr at me.com (L. Daniel Burr)
Date: Mon, 12 Mar 2018 14:36:06 -0500
Subject: [Twisted-Python] Waiting for a contended resource
In-Reply-To: <72bd5441-e86a-b438-cc8e-db2f95d36d52@matrix.org>
References: <72bd5441-e86a-b438-cc8e-db2f95d36d52@matrix.org>
Message-ID: <etPan.5aa6d6a6.7a5ae51b.287d@me.com>

Hi Richard,
On March 12, 2018 at 1:49:41 PM, Richard van der Hoff (richard at matrix.org) wrote:

Hi folks,

I thought I'd poll the list on the best way to approach a problem in 
Twisted.

The background is that we have a number of resources which can be 
requested by a REST client, and which are calculated on demand. The 
calculation is moderately expensive (can take multiple seconds), so the 
results of the calculation are cached so multiple lookups of the same 
resource are more efficient.

The problem comes in trying to handle multiple clients requesting the 
same resource at once. Obviously if 200 clients all request the same 
resource at the same time, we don't want to fire off 200 calculation 
requests.

The approach we adopted was, effectively, to maintain a lock for each 
resource:

> lock = defer.DeferredLock()
> cached_result = None
>
> @defer.inlineCallbacks
> def getResource():
> yield lock.acquire()
> try:
> if cached_result is None:
> cached_result = yield do_expensive_calculation()
> defer.returnValue(cached_result)
> finally:
> lock.release()

(Of course one can optimise the above to avoid getting the lock if we 
already have the cached result - I've omitted that for simplicity.)

That's all very well, but it falls down when we get more than about 200 
requests for the same resource: once the calculation completes, we can 
suddenly serve all the requests, and the Deferreds returned by 
DeferredLock end up chaining together in a way that overflows the stack.

I reported this as http://twistedmatrix.com/trac/ticket/9304 and, at the 
time, worked around it by adding a call to reactor.callLater(0) into our 
implementation. However, Jean-Paul's comments on that bug implied that 
we were approaching the problem in completely the wrong way, and instead 
we should be avoiding queuing up work like this in the first place.


You mention using callLater to solve this problem, so I’m guessing that instead of using a lock you are re-scheduling the call to getResource if there is no cached_result value.  I’ve used this solution plenty of times across multiple projects, and have found it both simple and reliable.  Is there some reason why this solution is not desirable in your case?

It's worth reiterating that the requests arrive from REST clients which 
we have no direct control over. We *could* keep track of the number of 
waiting clients, and make the API respond with a 5xx error or similar if 
that number gets too high, with the expectation that the client retries 
- but one concern would be that the load from the additional HTTP 
traffic would outweigh any efficiency gained by not stacking up Deferreds.


Have you validated this concern through load-testing?  You may find that there is no meaningful negative impact to this approach.

So, I'd welcome any advice on better ways to approach the problem.

Richard
Hope this helps,

L. Daniel Burr
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180312/d98197a3/attachment.html>

From ilyaskriblovsky at gmail.com  Mon Mar 12 13:52:43 2018
From: ilyaskriblovsky at gmail.com (Ilya Skriblovsky)
Date: Mon, 12 Mar 2018 19:52:43 +0000
Subject: [Twisted-Python] Waiting for a contended resource
In-Reply-To: <etPan.5aa6d6a6.7a5ae51b.287d@me.com>
References: <72bd5441-e86a-b438-cc8e-db2f95d36d52@matrix.org>
 <etPan.5aa6d6a6.7a5ae51b.287d@me.com>
Message-ID: <CAOG7vkw+KnzjUF-dap9ZK-9DNhi1EHD3dibKwqa_z_RLTO00yQ@mail.gmail.com>

Hi, Richard,

I've used class like this to cache the result of Expensive Calculation:

class DeferredCache:
    pending = None
    result = None
    failure = None

    def __init__(self, expensive_func):
        self.expensive_func = expensive_func

    def __call__(self):
        if self.pending is None:
            def on_ready(result):
                self.result = result
            def on_fail(failure):
                self.failure = failure

            self.pending =
defer.maybeDeferred(self.expensive_func).addCallbacks(on_ready, on_fail)

        return self.pending.addCallback(self._return_result)

    def _return_result(self, _):
        return self.failure or self.result

Using it you can get rid of DeferredLocks:

    deferred_cache = DeferredCache(do_expensive_calculation)

    def getResource():
        return deferred_cache()

It will start `expensive_func` on the first call. The second and
consequtive calls will return deferreds that resolves with the result when
expensive_func is done. If you call it when result is already here, it will
return alread-fired deferred.

Of course, it will require some more work if you need to pass arguments to
`expensive_func` and memoize results per arguments values.

-- ilya

пн, 12 мар. 2018 г. в 22:38, L. Daniel Burr <ldanielburr at me.com>:

> Hi Richard,
>
> On March 12, 2018 at 1:49:41 PM, Richard van der Hoff (richard at matrix.org)
> wrote:
>
> Hi folks,
>
> I thought I'd poll the list on the best way to approach a problem in
> Twisted.
>
> The background is that we have a number of resources which can be
> requested by a REST client, and which are calculated on demand. The
> calculation is moderately expensive (can take multiple seconds), so the
> results of the calculation are cached so multiple lookups of the same
> resource are more efficient.
>
> The problem comes in trying to handle multiple clients requesting the
> same resource at once. Obviously if 200 clients all request the same
> resource at the same time, we don't want to fire off 200 calculation
> requests.
>
> The approach we adopted was, effectively, to maintain a lock for each
> resource:
>
> > lock = defer.DeferredLock()
> > cached_result = None
> >
> > @defer.inlineCallbacks
> > def getResource():
> > yield lock.acquire()
> > try:
> > if cached_result is None:
> > cached_result = yield do_expensive_calculation()
> > defer.returnValue(cached_result)
> > finally:
> > lock.release()
>
> (Of course one can optimise the above to avoid getting the lock if we
> already have the cached result - I've omitted that for simplicity.)
>
> That's all very well, but it falls down when we get more than about 200
> requests for the same resource: once the calculation completes, we can
> suddenly serve all the requests, and the Deferreds returned by
> DeferredLock end up chaining together in a way that overflows the stack.
>
> I reported this as http://twistedmatrix.com/trac/ticket/9304 and, at the
> time, worked around it by adding a call to reactor.callLater(0) into our
> implementation. However, Jean-Paul's comments on that bug implied that
> we were approaching the problem in completely the wrong way, and instead
> we should be avoiding queuing up work like this in the first place.
>
>
> You mention using callLater to solve this problem, so I’m guessing that
> instead of using a lock you are re-scheduling the call to getResource if
> there is no cached_result value.  I’ve used this solution plenty of times
> across multiple projects, and have found it both simple and reliable.  Is
> there some reason why this solution is not desirable in your case?
>
> It's worth reiterating that the requests arrive from REST clients which
> we have no direct control over. We *could* keep track of the number of
> waiting clients, and make the API respond with a 5xx error or similar if
> that number gets too high, with the expectation that the client retries
> - but one concern would be that the load from the additional HTTP
> traffic would outweigh any efficiency gained by not stacking up Deferreds.
>
>
> Have you validated this concern through load-testing?  You may find that
> there is no meaningful negative impact to this approach.
>
> So, I'd welcome any advice on better ways to approach the problem.
>
> Richard
>
> Hope this helps,
>
> L. Daniel Burr
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180312/55985d17/attachment-0001.html>

From exarkun at twistedmatrix.com  Mon Mar 12 14:00:08 2018
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Mon, 12 Mar 2018 16:00:08 -0400
Subject: [Twisted-Python] Waiting for a contended resource
In-Reply-To: <CAOG7vkw+KnzjUF-dap9ZK-9DNhi1EHD3dibKwqa_z_RLTO00yQ@mail.gmail.com>
References: <72bd5441-e86a-b438-cc8e-db2f95d36d52@matrix.org>
 <etPan.5aa6d6a6.7a5ae51b.287d@me.com>
 <CAOG7vkw+KnzjUF-dap9ZK-9DNhi1EHD3dibKwqa_z_RLTO00yQ@mail.gmail.com>
Message-ID: <CAEeXt4PvzBp0+QnGZhgx1Vo+GvieLYpCxDaHOcDW=nEpQKE6ew@mail.gmail.com>

On Mon, Mar 12, 2018 at 3:52 PM, Ilya Skriblovsky <ilyaskriblovsky at gmail.com
> wrote:

> Hi, Richard,
>
> I've used class like this to cache the result of Expensive Calculation:
>
> class DeferredCache:
>     pending = None
>     result = None
>     failure = None
>
>     def __init__(self, expensive_func):
>         self.expensive_func = expensive_func
>
>     def __call__(self):
>         if self.pending is None:
>             def on_ready(result):
>                 self.result = result
>             def on_fail(failure):
>                 self.failure = failure
>
>             self.pending = defer.maybeDeferred(self.
> expensive_func).addCallbacks(on_ready, on_fail)
>
>         return self.pending.addCallback(self._return_result)
>
>
This seems like basically a correct answer to me.  However, I suggest one
small change.

You probably want to create and return a new Deferred for each result.  If
you don't, then your internal `pending` Deferred is now reachable by
application code.

As written, an application might (very, very reasonably):

    d = getResource()
    d.addCallback(long_async_operation)

Now `pending` has `long_async_operation` as a callback on its chain.  This
will prevent anyone else from getting a result until `long_async_operation`
is done.

You can fix this by:

    result = Deferred()
    self.pending.addCallback(self._return_result).chainDeferred(result)
    return result

Now the application can only reach `result`.  Nothing they do to `result`
will make much difference to `pending` because `chainDeferred` only puts
`callback` (and `errback`) onto `pending`'s callback chain.  `callback` and
`errback` don't wait on anything.

You have to be a little careful with `chainDeferred` because it doesn't
have the recursion-avoidance logic that implicit chaining has.  However,
that doesn't matter in this particular case because the chain depth is
fixed at two (`pending` and `result`).  The problems only arise if you
extend the chain out in this direction without bound.

Jean-Paul



>     def _return_result(self, _):
>         return self.failure or self.result
>
> Using it you can get rid of DeferredLocks:
>
>     deferred_cache = DeferredCache(do_expensive_calculation)
>
>     def getResource():
>         return deferred_cache()
>
> It will start `expensive_func` on the first call. The second and
> consequtive calls will return deferreds that resolves with the result when
> expensive_func is done. If you call it when result is already here, it will
> return alread-fired deferred.
>
> Of course, it will require some more work if you need to pass arguments to
> `expensive_func` and memoize results per arguments values.
>
> -- ilya
>
> пн, 12 мар. 2018 г. в 22:38, L. Daniel Burr <ldanielburr at me.com>:
>
>> Hi Richard,
>>
>> On March 12, 2018 at 1:49:41 PM, Richard van der Hoff (richard at matrix.org)
>> wrote:
>>
>> Hi folks,
>>
>> I thought I'd poll the list on the best way to approach a problem in
>> Twisted.
>>
>> The background is that we have a number of resources which can be
>> requested by a REST client, and which are calculated on demand. The
>> calculation is moderately expensive (can take multiple seconds), so the
>> results of the calculation are cached so multiple lookups of the same
>> resource are more efficient.
>>
>> The problem comes in trying to handle multiple clients requesting the
>> same resource at once. Obviously if 200 clients all request the same
>> resource at the same time, we don't want to fire off 200 calculation
>> requests.
>>
>> The approach we adopted was, effectively, to maintain a lock for each
>> resource:
>>
>> > lock = defer.DeferredLock()
>> > cached_result = None
>> >
>> > @defer.inlineCallbacks
>> > def getResource():
>> > yield lock.acquire()
>> > try:
>> > if cached_result is None:
>> > cached_result = yield do_expensive_calculation()
>> > defer.returnValue(cached_result)
>> > finally:
>> > lock.release()
>>
>> (Of course one can optimise the above to avoid getting the lock if we
>> already have the cached result - I've omitted that for simplicity.)
>>
>> That's all very well, but it falls down when we get more than about 200
>> requests for the same resource: once the calculation completes, we can
>> suddenly serve all the requests, and the Deferreds returned by
>> DeferredLock end up chaining together in a way that overflows the stack.
>>
>> I reported this as http://twistedmatrix.com/trac/ticket/9304 and, at the
>> time, worked around it by adding a call to reactor.callLater(0) into our
>> implementation. However, Jean-Paul's comments on that bug implied that
>> we were approaching the problem in completely the wrong way, and instead
>> we should be avoiding queuing up work like this in the first place.
>>
>>
>> You mention using callLater to solve this problem, so I’m guessing that
>> instead of using a lock you are re-scheduling the call to getResource if
>> there is no cached_result value.  I’ve used this solution plenty of times
>> across multiple projects, and have found it both simple and reliable.  Is
>> there some reason why this solution is not desirable in your case?
>>
>> It's worth reiterating that the requests arrive from REST clients which
>> we have no direct control over. We *could* keep track of the number of
>> waiting clients, and make the API respond with a 5xx error or similar if
>> that number gets too high, with the expectation that the client retries
>> - but one concern would be that the load from the additional HTTP
>> traffic would outweigh any efficiency gained by not stacking up Deferreds.
>>
>>
>> Have you validated this concern through load-testing?  You may find that
>> there is no meaningful negative impact to this approach.
>>
>> So, I'd welcome any advice on better ways to approach the problem.
>>
>> Richard
>>
>> Hope this helps,
>>
>> L. Daniel Burr
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180312/1cbdd763/attachment.html>

From ilyaskriblovsky at gmail.com  Mon Mar 12 15:31:25 2018
From: ilyaskriblovsky at gmail.com (Ilya Skriblovsky)
Date: Mon, 12 Mar 2018 21:31:25 +0000
Subject: [Twisted-Python] Waiting for a contended resource
In-Reply-To: <CAEeXt4PvzBp0+QnGZhgx1Vo+GvieLYpCxDaHOcDW=nEpQKE6ew@mail.gmail.com>
References: <72bd5441-e86a-b438-cc8e-db2f95d36d52@matrix.org>
 <etPan.5aa6d6a6.7a5ae51b.287d@me.com>
 <CAOG7vkw+KnzjUF-dap9ZK-9DNhi1EHD3dibKwqa_z_RLTO00yQ@mail.gmail.com>
 <CAEeXt4PvzBp0+QnGZhgx1Vo+GvieLYpCxDaHOcDW=nEpQKE6ew@mail.gmail.com>
Message-ID: <CAOG7vkxvVQJ-Ndo8ZG7RNs+6eGqrTxyjDrX7fKmi6XG3MP2rUA@mail.gmail.com>

Thanks for correction, Jean-Paul, you're absolutly right

пн, 12 мар. 2018 г. в 23:00, Jean-Paul Calderone <exarkun at twistedmatrix.com
>:

> On Mon, Mar 12, 2018 at 3:52 PM, Ilya Skriblovsky <
> ilyaskriblovsky at gmail.com> wrote:
>
>> Hi, Richard,
>>
>> I've used class like this to cache the result of Expensive Calculation:
>>
>> class DeferredCache:
>>     pending = None
>>     result = None
>>     failure = None
>>
>>     def __init__(self, expensive_func):
>>         self.expensive_func = expensive_func
>>
>>     def __call__(self):
>>         if self.pending is None:
>>             def on_ready(result):
>>                 self.result = result
>>             def on_fail(failure):
>>                 self.failure = failure
>>
>>             self.pending =
>> defer.maybeDeferred(self.expensive_func).addCallbacks(on_ready, on_fail)
>>
>>         return self.pending.addCallback(self._return_result)
>>
>>
> This seems like basically a correct answer to me.  However, I suggest one
> small change.
>
> You probably want to create and return a new Deferred for each result.  If
> you don't, then your internal `pending` Deferred is now reachable by
> application code.
>
> As written, an application might (very, very reasonably):
>
>     d = getResource()
>     d.addCallback(long_async_operation)
>
> Now `pending` has `long_async_operation` as a callback on its chain.  This
> will prevent anyone else from getting a result until `long_async_operation`
> is done.
>
> You can fix this by:
>
>     result = Deferred()
>     self.pending.addCallback(self._return_result).chainDeferred(result)
>     return result
>
> Now the application can only reach `result`.  Nothing they do to `result`
> will make much difference to `pending` because `chainDeferred` only puts
> `callback` (and `errback`) onto `pending`'s callback chain.  `callback` and
> `errback` don't wait on anything.
>
> You have to be a little careful with `chainDeferred` because it doesn't
> have the recursion-avoidance logic that implicit chaining has.  However,
> that doesn't matter in this particular case because the chain depth is
> fixed at two (`pending` and `result`).  The problems only arise if you
> extend the chain out in this direction without bound.
>
> Jean-Paul
>
>
>
>>     def _return_result(self, _):
>>         return self.failure or self.result
>>
>> Using it you can get rid of DeferredLocks:
>>
>>     deferred_cache = DeferredCache(do_expensive_calculation)
>>
>>     def getResource():
>>         return deferred_cache()
>>
>> It will start `expensive_func` on the first call. The second and
>> consequtive calls will return deferreds that resolves with the result when
>> expensive_func is done. If you call it when result is already here, it will
>> return alread-fired deferred.
>>
>> Of course, it will require some more work if you need to pass arguments
>> to `expensive_func` and memoize results per arguments values.
>>
>> -- ilya
>>
>> пн, 12 мар. 2018 г. в 22:38, L. Daniel Burr <ldanielburr at me.com>:
>>
>>> Hi Richard,
>>>
>>> On March 12, 2018 at 1:49:41 PM, Richard van der Hoff (
>>> richard at matrix.org) wrote:
>>>
>>> Hi folks,
>>>
>>> I thought I'd poll the list on the best way to approach a problem in
>>> Twisted.
>>>
>>> The background is that we have a number of resources which can be
>>> requested by a REST client, and which are calculated on demand. The
>>> calculation is moderately expensive (can take multiple seconds), so the
>>> results of the calculation are cached so multiple lookups of the same
>>> resource are more efficient.
>>>
>>> The problem comes in trying to handle multiple clients requesting the
>>> same resource at once. Obviously if 200 clients all request the same
>>> resource at the same time, we don't want to fire off 200 calculation
>>> requests.
>>>
>>> The approach we adopted was, effectively, to maintain a lock for each
>>> resource:
>>>
>>> > lock = defer.DeferredLock()
>>> > cached_result = None
>>> >
>>> > @defer.inlineCallbacks
>>> > def getResource():
>>> > yield lock.acquire()
>>> > try:
>>> > if cached_result is None:
>>> > cached_result = yield do_expensive_calculation()
>>> > defer.returnValue(cached_result)
>>> > finally:
>>> > lock.release()
>>>
>>> (Of course one can optimise the above to avoid getting the lock if we
>>> already have the cached result - I've omitted that for simplicity.)
>>>
>>> That's all very well, but it falls down when we get more than about 200
>>> requests for the same resource: once the calculation completes, we can
>>> suddenly serve all the requests, and the Deferreds returned by
>>> DeferredLock end up chaining together in a way that overflows the stack.
>>>
>>> I reported this as http://twistedmatrix.com/trac/ticket/9304 and, at the
>>>
>>> time, worked around it by adding a call to reactor.callLater(0) into our
>>>
>>> implementation. However, Jean-Paul's comments on that bug implied that
>>> we were approaching the problem in completely the wrong way, and instead
>>>
>>> we should be avoiding queuing up work like this in the first place.
>>>
>>>
>>> You mention using callLater to solve this problem, so I’m guessing that
>>> instead of using a lock you are re-scheduling the call to getResource if
>>> there is no cached_result value.  I’ve used this solution plenty of times
>>> across multiple projects, and have found it both simple and reliable.  Is
>>> there some reason why this solution is not desirable in your case?
>>>
>>> It's worth reiterating that the requests arrive from REST clients which
>>> we have no direct control over. We *could* keep track of the number of
>>> waiting clients, and make the API respond with a 5xx error or similar if
>>>
>>> that number gets too high, with the expectation that the client retries
>>> - but one concern would be that the load from the additional HTTP
>>> traffic would outweigh any efficiency gained by not stacking up
>>> Deferreds.
>>>
>>>
>>> Have you validated this concern through load-testing?  You may find that
>>> there is no meaningful negative impact to this approach.
>>>
>>> So, I'd welcome any advice on better ways to approach the problem.
>>>
>>> Richard
>>>
>>> Hope this helps,
>>>
>>> L. Daniel Burr
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180312/ceb06f18/attachment-0001.html>

From richard at matrix.org  Mon Mar 12 16:56:42 2018
From: richard at matrix.org (Richard van der Hoff)
Date: Mon, 12 Mar 2018 22:56:42 +0000
Subject: [Twisted-Python] Waiting for a contended resource
In-Reply-To: <CAEeXt4PvzBp0+QnGZhgx1Vo+GvieLYpCxDaHOcDW=nEpQKE6ew@mail.gmail.com>
References: <72bd5441-e86a-b438-cc8e-db2f95d36d52@matrix.org>
 <etPan.5aa6d6a6.7a5ae51b.287d@me.com>
 <CAOG7vkw+KnzjUF-dap9ZK-9DNhi1EHD3dibKwqa_z_RLTO00yQ@mail.gmail.com>
 <CAEeXt4PvzBp0+QnGZhgx1Vo+GvieLYpCxDaHOcDW=nEpQKE6ew@mail.gmail.com>
Message-ID: <910511f9-cd97-203e-561f-bd8a6542032e@matrix.org>

Thank you for all for all the answers so far, particularly to Ilya and 
Jean-Paul who provided some very helpful code samples.

It's interesting to realise that, by avoiding locking, we can end up 
with a much more efficient implementation. I'll have to figure out how 
widely we can apply this technique - and how often it's going to be 
worth rewriting things to allow that. Thanks for some useful pointers!

Richard


On 12/03/18 20:00, Jean-Paul Calderone wrote:
> On Mon, Mar 12, 2018 at 3:52 PM, Ilya Skriblovsky 
> <ilyaskriblovsky at gmail.com <mailto:ilyaskriblovsky at gmail.com>> wrote:
>
>     Hi, Richard,
>
>     I've used class like this to cache the result of Expensive
>     Calculation:
>
>     class DeferredCache:
>     pending = None
>     result = None
>     failure = None
>
>     def __init__(self, expensive_func):
>       self.expensive_func = expensive_func
>
>     def __call__(self):
>       if self.pending is None:
>           def on_ready(result):
>               self.result = result
>           def on_fail(failure):
>               self.failure = failure
>
>           self.pending =
>     defer.maybeDeferred(self.expensive_func).addCallbacks(on_ready,
>     on_fail)
>
>       return self.pending.addCallback(self._return_result)
>
>
> This seems like basically a correct answer to me. However, I suggest 
> one small change.
>
> You probably want to create and return a new Deferred for each 
> result.  If you don't, then your internal `pending` Deferred is now 
> reachable by application code.
>
> As written, an application might (very, very reasonably):
>
>     d = getResource()
>     d.addCallback(long_async_operation)
>
> Now `pending` has `long_async_operation` as a callback on its chain.  
> This will prevent anyone else from getting a result until 
> `long_async_operation` is done.
>
> You can fix this by:
>
>     result = Deferred()
> self.pending.addCallback(self._return_result).chainDeferred(result)
>     return result
>
> Now the application can only reach `result`.  Nothing they do to 
> `result` will make much difference to `pending` because 
> `chainDeferred` only puts `callback` (and `errback`) onto `pending`'s 
> callback chain.  `callback` and `errback` don't wait on anything.
>
> You have to be a little careful with `chainDeferred` because it 
> doesn't have the recursion-avoidance logic that implicit chaining 
> has.  However, that doesn't matter in this particular case because the 
> chain depth is fixed at two (`pending` and `result`).  The problems 
> only arise if you extend the chain out in this direction without bound.
>
> Jean-Paul
>
>     def _return_result(self, _):
>       return self.failure or self.result
>
>     Using it you can get rid of DeferredLocks:
>
>         deferred_cache = DeferredCache(do_expensive_calculation)
>
>         def getResource():
>             return deferred_cache()
>
>     It will start `expensive_func` on the first call. The second and
>     consequtive calls will return deferreds that resolves with the
>     result when expensive_func is done. If you call it when result is
>     already here, it will return alread-fired deferred.
>
>     Of course, it will require some more work if you need to pass
>     arguments to `expensive_func` and memoize results per arguments
>     values.
>
>     -- ilya
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180312/7d6bca68/attachment.html>

From glyph at twistedmatrix.com  Mon Mar 12 23:08:11 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 12 Mar 2018 22:08:11 -0700
Subject: [Twisted-Python] List of required builds before a merge
In-Reply-To: <CAFycZ9eFeX0BnoqDYXToOFQDMBRvAHa=5mjxes4=YTKpbxVg4g@mail.gmail.com>
References: <CAFycZ9eFeX0BnoqDYXToOFQDMBRvAHa=5mjxes4=YTKpbxVg4g@mail.gmail.com>
Message-ID: <5DB035CE-E3A5-454B-B827-C57B848F38CA@twistedmatrix.com>



> On Mar 12, 2018, at 4:59 AM, Adi Roiban <adi at roiban.ro> wrote:
> 
> Hi,
> 
> It is not clear to me what builders need to pass before we can merge something.
> 
> I expect that all supported "platforms" need to pass, but it is not
> clear what are the currently supported platforms.
> 
> We have this info in the wiki but it does not help.
> https://twistedmatrix.com/trac/wiki/ReviewProcess#Authors:Howtomergethechangetotrunk
> 
> In GitHub I can see Travis / Appveyor and OSX from Buildot as "Required"

These are marked as "required" because they're necessary, but not sufficient.

> Is that all?

Ideally all the supported buildbots should be passing.  It's a real shame that the offline buildbots do not report any status, because it makes it very easy to miss them.  (I personally did not realize the ramifications of the way buildbot repots status until I looked at https://buildbot.twistedmatrix.com/boxes-all?branch=trunk&num_builds=10 <https://buildbot.twistedmatrix.com/boxes-all?branch=trunk&num_builds=10> just now).

> If I check the "supported" group in Buildbot, I see many more builders.
> The problem is that a significant number of slaves are down and those
> builders are not available.

So, normally I'd say, like Jean-Paul did, that we should just get in touch with the maintainers of the buildbots in question.

But it seems the buildbots in question were the ones we had running on our donated Rackspace Cloud account.

Logging into the control panel for that account, literally all the servers except for the buildmaster (i.e. buildbot.twistedmatrix.com <http://buildbot.twistedmatrix.com/>) have been deleted.  Not just shut down, but, completely gone.  This is baffling to me.  I do not know who could have done this or why.  There does not appear to be an audit log I can consult.  Based on billing data, and consistent with the buildbot logs, it appears that this occurred some time in early January.

> Is Fedora still supported and required?

That's the hope.  Those buildbots appear to be online.

> I suggest to use GitHub "Required" marker to document what platforms are supported.

I want to agree with you.  However, our tests are not reliable or performant enough for this.

The "required" marker makes it impossible to merge changes without a passing status or an administrator override.  This has an unfortunate set of corollaries.  Assuming a non-administrator reviewer:

If a single builder has a temporary configuration issue and you're not an administrator, you can't merge any code.
Let's say the probably of an intermittent test failing is 50 to 1.  A 2% chance.  The probability of a test suite passing is 98%.  We have 36 supported builders.  The probability of all the builders passing for a successful run is then just 13%; roughly 1 in 10 valid branches will be able to land. (I think our probability is actually quite a bit better than this these days, but you get my drift.)
Even if a contributor can force all the builds to re-run (which requires special permissions, and thus needs to wait for a project member) getting a successful run on every builder could require 2 or 3 tries, which could be 2 or 3 hours of waiting just to get one successful run on a platform that you know is not relevant to the change you're testing.

Therefore keeping a small core set of "most pass" statuses and allowing for some human judgement about the rest is a practical necessity given the level of compute resources available to us.

> We don't have time to maintain the infrastructure, so I suggest to
> drop support for anything that is not supported by Travis and
> Appveyor.

My preference would be to simply drop all the buildbots which have been (for some reason) destroyed from the supported build matrix, since the buildbots are still covering a multiplicity of kernels and environments that travis and appveyor aren't.  But, I don't have the time to do much more than write this email, so if we have no other volunteers for maintenance, I will support your decision to tear down the buildbots for now.

Jean-Paul recently pointed out that CircleCI has much more performant macOS builds than Travis, so if someone were motivated to make that change but didn't want to keep maintaining hardware, that might be one way to go.

> I know that this might be disruptive.
> I think that we need it in order to raise awareness that supporting a
> platform is not easy.

I do hope that this will provoke some potential volunteers to come forward to help maintain our failing infrastructure.

> If someone (including me) cares about a platform they should find a way to help to project supporting that platform.

> What do you think?

I do hope that if you're going to make a change, you'll consider something slightly less drastic than blowing up the buildbots entirely :).  But with a dozen servers having just disappeared with no explanation, it's a course of action which at least makes sense.

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180312/4639b2ca/attachment-0001.html>

From hawkowl at atleastfornow.net  Mon Mar 12 23:27:26 2018
From: hawkowl at atleastfornow.net (Amber Brown)
Date: Tue, 13 Mar 2018 16:27:26 +1100
Subject: [Twisted-Python] List of required builds before a merge
In-Reply-To: <5DB035CE-E3A5-454B-B827-C57B848F38CA@twistedmatrix.com>
References: <CAFycZ9eFeX0BnoqDYXToOFQDMBRvAHa=5mjxes4=YTKpbxVg4g@mail.gmail.com>
 <5DB035CE-E3A5-454B-B827-C57B848F38CA@twistedmatrix.com>
Message-ID: <CAMxb2ivN5TeE2NAyzYiQpUEFof-RujSQ8-Nmt3uiftdbfHjwVg@mail.gmail.com>

The buildbots went after someone said that the RAX hosting was going away,
and I (and a few others) didn't get the (annoyingly quiet) correction that
it was only for new projects (which was not how the original was written).
All the twisted list got was the original letter from the SFC without a
"false alarm" followup. By the time people pointed it out, it was too late.

I have the ansible configs to rebuild them all, but unfortunately, Life has
not stopped since January and hasn't got worse. If anyone wants to take a
stab, the ansible configs are in the twisted-infra repo.

- Amber

On 13 Mar. 2018 16:08, "Glyph" <glyph at twistedmatrix.com> wrote:

>
>
> On Mar 12, 2018, at 4:59 AM, Adi Roiban <adi at roiban.ro> wrote:
>
> Hi,
>
> It is not clear to me what builders need to pass before we can merge
> something.
>
> I expect that all supported "platforms" need to pass, but it is not
> clear what are the currently supported platforms.
>
> We have this info in the wiki but it does not help.
> https://twistedmatrix.com/trac/wiki/ReviewProcess#Authors:
> Howtomergethechangetotrunk
>
> In GitHub I can see Travis / Appveyor and OSX from Buildot as "Required"
>
>
> These are marked as "required" because they're necessary, but not
> sufficient.
>
> Is that all?
>
>
> Ideally all the supported buildbots should be passing.  It's a real shame
> that the offline buildbots do not report any status, because it makes it
> very easy to miss them.  (I personally did not realize the ramifications of
> the way buildbot repots status until I looked at https://buildbot.
> twistedmatrix.com/boxes-all?branch=trunk&num_builds=10 just now).
>
> If I check the "supported" group in Buildbot, I see many more builders.
> The problem is that a significant number of slaves are down and those
> builders are not available.
>
>
> So, normally I'd say, like Jean-Paul did, that we should just get in touch
> with the maintainers of the buildbots in question.
>
> But it seems the buildbots in question were the ones we had running on our
> donated Rackspace Cloud account.
>
> Logging into the control panel for that account, literally all the servers
> except for the buildmaster (i.e. buildbot.twistedmatrix.com) have been
> deleted.  Not just shut down, but, completely gone.  This is baffling to
> me.  I do not know who could have done this or why.  There does not appear
> to be an audit log I can consult.  Based on billing data, and consistent
> with the buildbot logs, it appears that this occurred some time in early
> January.
>
> Is Fedora still supported and required?
>
>
> That's the hope.  Those buildbots appear to be online.
>
> I suggest to use GitHub "Required" marker to document what platforms are
> supported.
>
>
> I want to agree with you.  However, our tests are not reliable or
> performant enough for this.
>
> The "required" marker makes it *impossible *to merge changes without a
> passing status or an administrator override.  This has an unfortunate set
> of corollaries.  Assuming a non-administrator reviewer:
>
>
>    1. If a single builder has a temporary configuration issue and you're
>    not an administrator, you can't merge any code.
>    2. Let's say the probably of an intermittent test failing is 50 to 1.
>    A 2% chance.  The probability of a test suite passing is 98%.  We have 36
>    supported builders.  The probability of all the builders passing for a
>    successful run is then just *13%*; roughly 1 in 10 valid branches will
>    be able to land. (I think our probability is actually quite a bit better
>    than this these days, but you get my drift.)
>    3. Even if a contributor can force all the builds to re-run (which
>    requires special permissions, and thus needs to wait for a project member)
>    getting a successful run on every builder could require 2 or 3 tries, which
>    could be 2 or 3 *hours* of waiting just to get one successful run on a
>    platform that you know is not relevant to the change you're testing.
>
>
> Therefore keeping a small core set of "most pass" statuses and allowing
> for some human judgement about the rest is a practical necessity given the
> level of compute resources available to us.
>
> We don't have time to maintain the infrastructure, so I suggest to
> drop support for anything that is not supported by Travis and
> Appveyor.
>
>
> My preference would be to simply drop all the buildbots which have been
> (for some reason) destroyed from the supported build matrix, since the
> buildbots are still covering a multiplicity of kernels and environments
> that travis and appveyor aren't.  But, I don't have the time to do much
> more than write this email, so if we have no other volunteers for
> maintenance, I will support your decision to tear down the buildbots for
> now.
>
> Jean-Paul recently pointed out that CircleCI has much more performant
> macOS builds than Travis, so if someone were motivated to make that change
> but didn't want to keep maintaining hardware, that might be one way to go.
>
> I know that this might be disruptive.
> I think that we need it in order to raise awareness that supporting a
> platform is not easy.
>
>
> I do hope that this will provoke some potential volunteers to come forward
> to help maintain our failing infrastructure.
>
> If someone (including me) cares about a platform they should find a way to
> help to project supporting that platform.
>
>
> What do you think?
>
>
> I do hope that if you're going to make a change, you'll consider something
> slightly less drastic than blowing up the buildbots entirely :).  But with
> a dozen servers having just disappeared with no explanation, it's a course
> of action which at least makes sense.
>
> -g
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180313/f950978c/attachment.html>

From glyph at twistedmatrix.com  Mon Mar 12 23:42:08 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 12 Mar 2018 22:42:08 -0700
Subject: [Twisted-Python] List of required builds before a merge
In-Reply-To: <CAMxb2ivN5TeE2NAyzYiQpUEFof-RujSQ8-Nmt3uiftdbfHjwVg@mail.gmail.com>
References: <CAFycZ9eFeX0BnoqDYXToOFQDMBRvAHa=5mjxes4=YTKpbxVg4g@mail.gmail.com>
 <5DB035CE-E3A5-454B-B827-C57B848F38CA@twistedmatrix.com>
 <CAMxb2ivN5TeE2NAyzYiQpUEFof-RujSQ8-Nmt3uiftdbfHjwVg@mail.gmail.com>
Message-ID: <E9779528-484D-49C6-AB3E-3E1A434C0555@twistedmatrix.com>

On Mar 12, 2018, at 10:27 PM, Amber Brown <hawkowl at atleastfornow.net> wrote:
> 
> The buildbots went after someone said that the RAX hosting was going away, and I (and a few others) didn't get the (annoyingly quiet) correction that it was only for new projects (which was not how the original was written). All the twisted list got was the original letter from the SFC without a "false alarm" followup. By the time people pointed it out, it was too late.
> 
> I have the ansible configs to rebuild them all, but unfortunately, Life has not stopped since January and hasn't got worse. If anyone wants to take a stab, the ansible configs are in the twisted-infra repo.

Thanks for the explanation; I was tearing my hair out (what little remains, anyway) trying to figure out what the heck had happened! :)  I do remember that ill-fated email.  Normally I'd say we should never deprovision infrastructure until it's torn, bloody, from our lifeless hands, but the way the free Rackspace account is set up means overages go to bill the SFC and deplete their general fund, so I can see not wanting to have anything unnecessary hanging around there if the discount were to end.

(For those of you that may not have been informed at the time: https://www.theregister.co.uk/2017/10/20/rackspace_ends_discount_hosting_for_open_source_projects/ <https://www.theregister.co.uk/2017/10/20/rackspace_ends_discount_hosting_for_open_source_projects/> )

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180312/5165252a/attachment.html>

From adi at roiban.ro  Tue Mar 13 07:36:42 2018
From: adi at roiban.ro (Adi Roiban)
Date: Tue, 13 Mar 2018 13:36:42 +0000
Subject: [Twisted-Python] List of required builds before a merge
In-Reply-To: <E9779528-484D-49C6-AB3E-3E1A434C0555@twistedmatrix.com>
References: <CAFycZ9eFeX0BnoqDYXToOFQDMBRvAHa=5mjxes4=YTKpbxVg4g@mail.gmail.com>
 <5DB035CE-E3A5-454B-B827-C57B848F38CA@twistedmatrix.com>
 <CAMxb2ivN5TeE2NAyzYiQpUEFof-RujSQ8-Nmt3uiftdbfHjwVg@mail.gmail.com>
 <E9779528-484D-49C6-AB3E-3E1A434C0555@twistedmatrix.com>
Message-ID: <CAFycZ9cKUT_KOPzKxp3pP1xUOJA_1p1mGGWJtRTafOM7T9rfbA@mail.gmail.com>

>  If that's all, jumping straight to "throw away all of buildbot" seems like an overreaction.

I am trying to be pragmatic.
I think that the whole code review / PR contribution to Twisted for
external (but also for team member) is a bad experience and is not
helping with the development of Twisted.

So we need a "shock" in order to put the things back together :)

We all have little time and I am trying to simplify the process and
let people know that we want them to contribute to Twisted.

-------------

> Ideally all the supported buildbots should be passing.  It's a real shame that the offline buildbots do not report any status,

Buildbot should send email when a slave is down to buildbot at
twistedmatrix.com ... not sure who is reading those emails.

> The "required" marker makes it impossible to merge changes without a passing status

In such a case, maybe the "administrators" can be pinged and do a final review.

------

> But, I don't have the time to do much more than write this email, so if we have no other volunteers for maintenance, I will support your decision to tear down the buildbots for now.

I tried to maintain the Buildbots and have a Vagrant master and slave
to allow development... but I failed to coordinate with the other team
members.
I failed to have a testing environment which always works.
Many times there were changes made in production which went out of
sync with the Vagrant VM.

I know that we are all busy, but is not ok to just destory some slaves
wihtout updating the buildbot configuration... we end up with huge
queues https://buildbot.twistedmatrix.com/builders/freebsd10-py2.7

I am a fan of Buildbot and I am using Buildbot for my project.
With 30+ builders, running them in stages was the only way to the
handle spurious failures.
Now Travis-CI also has stages... and Circle-CI also has stages.

I can try to create a brand new buildmaster and rebuild it using
latest buildbot and with a simplified configuration... just calling a
set of scripts in each step and making sure we can replicate it in
vagrant or have a separate staging server for doing dev work.
A simplified one, would be one just calling scripts in the branch, so
that we have minimal configuration and buildbot and to match.
Also, the new buildmaster can look for ways to allow non-team members
to run tests...maybe use GitHub api to discover if they have previosly
commits in trunk.

The build history will not be available, but we can keep the old
master in read-only mode.

-----

I would want to do whatever it takes to not merge with red tests. They
are contagious and can lead to accidentally ignoring an error which is
related to the changes but might not look like one.

See https://github.com/twisted/twisted/pull/946 where there was a
failure which looks unrelated, but I think that might be related.

One option is to break the tests into smaller builds and be able to
retry only those builds.

Ex. instead of running select + poll + epool in a single run, break
them into 3 separate builds.

On Buildbot you can restart a builder. On Travis-CI you can restart a
single job... and maybe we can lobby Appveyor to allow restarting a
job (and not the whole PR gig).

------

We can try Circle-CI.
They don't offer any free versions. Even for open source.
When I did the initial work for Twisted with Travis and Appveyor I
contacted Circle-CI to see if we can get a discount.

They offered OSX - Seed plan which comes with 500 minutes/month - free.

I stopped as the people on IRC told me that Circle-CI is not better than Travis.

I am happy to try again with Circle-CI

------

We might go over 500 minutes. I suggest running the tests in stages.

Run twistedchecker/pyflakes/newsfragment/Ubuntu tests first.
Only when they all pass we should trigger Windows and OSX tests.

I am also running the tests on stage... For example, Debian/RHEL/SUSE
pass 99.99% if Ubuntu pass... so those tests are executed only later
in the stage.

------


I don't have much time to contribute to Twisted infrastructure, and I
would like to spend the available time doing reviews and helping
people contribute to Twisted.

If there is a better plan, I am happy to go with that.

Thanks for your time :)
Adi


From exarkun at twistedmatrix.com  Tue Mar 13 07:54:11 2018
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Tue, 13 Mar 2018 09:54:11 -0400
Subject: [Twisted-Python] List of required builds before a merge
In-Reply-To: <CAFycZ9cKUT_KOPzKxp3pP1xUOJA_1p1mGGWJtRTafOM7T9rfbA@mail.gmail.com>
References: <CAFycZ9eFeX0BnoqDYXToOFQDMBRvAHa=5mjxes4=YTKpbxVg4g@mail.gmail.com>
 <5DB035CE-E3A5-454B-B827-C57B848F38CA@twistedmatrix.com>
 <CAMxb2ivN5TeE2NAyzYiQpUEFof-RujSQ8-Nmt3uiftdbfHjwVg@mail.gmail.com>
 <E9779528-484D-49C6-AB3E-3E1A434C0555@twistedmatrix.com>
 <CAFycZ9cKUT_KOPzKxp3pP1xUOJA_1p1mGGWJtRTafOM7T9rfbA@mail.gmail.com>
Message-ID: <CAEeXt4Pi_66+9hG9FZoBQeGHaTb417mQAiy+=ZoL_Pc81RkuwQ@mail.gmail.com>

On Tue, Mar 13, 2018 at 9:36 AM, Adi Roiban <adi at roiban.ro> wrote:

> We can try Circle-CI.
> They don't offer any free versions. Even for open source.
> When I did the initial work for Twisted with Travis and Appveyor I
> contacted Circle-CI to see if we can get a discount.
>
> They offered OSX - Seed plan which comes with 500 minutes/month - free.
>

They advertise this on their site now:
https://circleci.com/pricing/#faq-section-os-x

So I would expect Twisted could get it.

Your point about the minutes limit is a good one though.  What is 500
minutes to Twisted?  Around 30 builds?  It seems likely Twisted would run
out most months.  Certainly, maintaining separate coverage and non-coverage
builds would totally blow this limit.  And one of the big advantages of
hosted CI over buildbot - letting third-party PRs trigger builds - would
seem to be out of the question.


> I stopped as the people on IRC told me that Circle-CI is not better than
> Travis.
>

Presumably at some point this was true.  These days, in my experience,
CircleCI definitely seems competitive.  It has near feature parity (and
more features in some areas), a less crufty configuration system, and seems
better resourced (but this may just be better resource management - eg, the
500 minute macOS limit for free open source users).

Of course, there's also the fact that the macOS Buildbot slaves are
*not* offline
right now.  I know they've gone offline but as far as I know, their
maintainer is fairly responsive to reports of this.  So, is macOS really
part of this problem?

The immediate problem is all of the Rackspace-hosted slaves that are gone,
right?

So maybe what's more interesting is that CircleCI offers a way to replace
those - with either VM or container (including custom-image) builders.

Jean-Paul


>
> I am happy to try again with Circle-CI
>
> ------
>
> We might go over 500 minutes. I suggest running the tests in stages.
>
> Run twistedchecker/pyflakes/newsfragment/Ubuntu tests first.
> Only when they all pass we should trigger Windows and OSX tests.
>
> I am also running the tests on stage... For example, Debian/RHEL/SUSE
> pass 99.99% if Ubuntu pass... so those tests are executed only later
> in the stage.
>
> ------
>
>
> I don't have much time to contribute to Twisted infrastructure, and I
> would like to spend the available time doing reviews and helping
> people contribute to Twisted.
>
> If there is a better plan, I am happy to go with that.
>
> Thanks for your time :)
> Adi
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180313/53600f0e/attachment.html>

From adi at roiban.ro  Tue Mar 13 11:55:14 2018
From: adi at roiban.ro (Adi Roiban)
Date: Tue, 13 Mar 2018 17:55:14 +0000
Subject: [Twisted-Python] List of required builds before a merge
In-Reply-To: <CAEeXt4Pi_66+9hG9FZoBQeGHaTb417mQAiy+=ZoL_Pc81RkuwQ@mail.gmail.com>
References: <CAFycZ9eFeX0BnoqDYXToOFQDMBRvAHa=5mjxes4=YTKpbxVg4g@mail.gmail.com>
 <5DB035CE-E3A5-454B-B827-C57B848F38CA@twistedmatrix.com>
 <CAMxb2ivN5TeE2NAyzYiQpUEFof-RujSQ8-Nmt3uiftdbfHjwVg@mail.gmail.com>
 <E9779528-484D-49C6-AB3E-3E1A434C0555@twistedmatrix.com>
 <CAFycZ9cKUT_KOPzKxp3pP1xUOJA_1p1mGGWJtRTafOM7T9rfbA@mail.gmail.com>
 <CAEeXt4Pi_66+9hG9FZoBQeGHaTb417mQAiy+=ZoL_Pc81RkuwQ@mail.gmail.com>
Message-ID: <CAFycZ9cXnNxpUuWYf+nZ0mFZW2eSCGedTf0egThogT+ULYUhqw@mail.gmail.com>

On 13 March 2018 at 13:54, Jean-Paul Calderone
<exarkun at twistedmatrix.com> wrote:
> On Tue, Mar 13, 2018 at 9:36 AM, Adi Roiban <adi at roiban.ro> wrote:
>>
>> We can try Circle-CI.
>> They don't offer any free versions. Even for open source.
>> When I did the initial work for Twisted with Travis and Appveyor I
>> contacted Circle-CI to see if we can get a discount.
>>
>> They offered OSX - Seed plan which comes with 500 minutes/month - free.
>
>
> They advertise this on their site now:
> https://circleci.com/pricing/#faq-section-os-x
>
> So I would expect Twisted could get it.
>
> Your point about the minutes limit is a good one though.  What is 500
> minutes to Twisted?  Around 30 builds?  It seems likely Twisted would run
> out most months.  Certainly, maintaining separate coverage and non-coverage
> builds would totally blow this limit.  And one of the big advantages of
> hosted CI over buildbot - letting third-party PRs trigger builds - would
> seem to be out of the question.

I asked for this on July 2016... so maybe they have a different
offering for open source now.
Circle-CI ticket id for this request is #8736.

>>
>> I stopped as the people on IRC told me that Circle-CI is not better than
>> Travis.
>
>
> Presumably at some point this was true.  These days, in my experience,
> CircleCI definitely seems competitive.  It has near feature parity (and more
> features in some areas), a less crufty configuration system, and seems
> better resourced (but this may just be better resource management - eg, the
> 500 minute macOS limit for free open source users).
>
> Of course, there's also the fact that the macOS Buildbot slaves are not
> offline right now.  I know they've gone offline but as far as I know, their
> maintainer is fairly responsive to reports of this.  So, is macOS really
> part of this problem?

Keeping slave online is not that much of a work.

My issue is with the buildmaster configuration and its maintenance in general.

> The immediate problem is all of the Rackspace-hosted slaves that are gone,
> right?

I don't know. I don't know when and where this was discussed.

My issue is that I am checking https://github.com/twisted-infra/braid
and there was no update for the removal of the slaves in the
buildmaster configuration.

> So maybe what's more interesting is that CircleCI offers a way to replace
> those - with either VM or container (including custom-image) builders.

I don't think that Circle-CI provides support for FreeBSD10, RHEL7,
Debian 8 and 9.

I think that Rackspace still offers us generous resources, so we can
use Rackspace for that.

We can run 1 or 2 Windows slaves in Azure as they gave us $150 monthly credit.

-----

I think that we should find a way to make it super simple to run more
tests on local systems.
It might not be easy to run all 2.7 / 3.4 / 3.5 / 3.6 on Windows /
Linux / BSD/ OSX, but maybe we can find a simple script
which runs the core tests in under 1 minute.
Devs will then be asked to run these tests before pushing to a PR...
and in the same time these teste can be used as stage 1.
If they don't pass we don't spin OSX / Windows and other resource-heavy tests.

-------

On Appveyor we have 4 builders/jobs

Maybe we can stage Windows test... and execute iocp reactor only after
select tests pass... on 2.7.

We still have Windows on Buildbot, so maybe run fewer tests on
Appveyor (to speed it up),
since we will run all Windows tests anyway in Buildbot.

----

For external contributors, we are effectively now running the tests in 2 stages
Unless Travis and Appveyor don't pass, we don't manually trigger the
Buildbot tests.

--------

When I have time, I will retry Circe-CI for OSX.
Just to give it a spin and see where we are and how much time we need
per month for OSX.
I think that we can tune the number of tests we run on Circle-CI to
get into the budget.
The Circle-CI can server as a stage-1 builder for external
contributors... and we will still have the OSX slave maintained by
Glyph.

> Jean-Paul
>
>>
>>
>> I am happy to try again with Circle-CI
>>
>> ------
>>
>> We might go over 500 minutes. I suggest running the tests in stages.
>>
>> Run twistedchecker/pyflakes/newsfragment/Ubuntu tests first.
>> Only when they all pass we should trigger Windows and OSX tests.
>>
>> I am also running the tests on stage... For example, Debian/RHEL/SUSE
>> pass 99.99% if Ubuntu pass... so those tests are executed only later
>> in the stage.
>>
>> ------
>>
>>
>> I don't have much time to contribute to Twisted infrastructure, and I
>> would like to spend the available time doing reviews and helping
>> people contribute to Twisted.
>>
>> If there is a better plan, I am happy to go with that.
>>
>> Thanks for your time :)
>> Adi
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Adi Roiban


From adi at roiban.ro  Thu Mar 15 04:35:43 2018
From: adi at roiban.ro (Adi Roiban)
Date: Thu, 15 Mar 2018 10:35:43 +0000
Subject: [Twisted-Python] New member of the twisted/twisted-contributors
	team.
Message-ID: <CAFycZ9ct+ZnvE=8O+pXGWeqh3ZF2NSa+gwpRXPAySNWBPw5ezw@mail.gmail.com>

Hi,

Just a quick announcement.

I made Ilya Skriblovsky (https://github.com/IlyaSkriblovsky) a member
of twisted/twisted-contributors team.

The main reason is to make it easier to work with Ilya and allow him
to run tests on Buildbot.

Let me know if you want this change reverted.

Regards,
-- 
Adi Roiban


From johnaherne at rocs.co.uk  Sat Mar 17 03:58:41 2018
From: johnaherne at rocs.co.uk (John Aherne)
Date: Sat, 17 Mar 2018 09:58:41 +0000
Subject: [Twisted-Python] RunningTwisted tests on Windows and SSL
Message-ID: <CAKmUHjas5=NQzr2BmPv0gUEOcjYpTR_vAr2MPn6uHNh8Or5gUw@mail.gmail.com>

When I run the test suite on windows I end up with the following errors and
failures - see below.

So my basic question is. Can anyone tell me what the latest state is for
running tests on windows and in particular the state of running SSL on
windows.

When I look at the buildbots status by and large they all show the windows
results as green for python 2.7 and 3.6.

I assume then that the tests are passing. But maybe I misunderstand what
the buildbot status is telling me.

So should I be seeing these errors when the buildbots all show green. And
if I should not,  what am I doing wrong when running the tests.

Another point is regarding SSL which is why I am running the tests in the
first place. I am looking at https://twistedmatrix.com/trac/ticket/6371
with a view to getting the wincertstore working to load the system
certificates. When I checked the standard library they are also loading the
windows certificate store. So it seems best to stay in sync with them.

However, I see the following message from the test results that imply that
the SSL port to python3 has not been completed. That stops me in my tracks
and I wonder whether the SSL port for python3 is waiting for some
fundamental work to be finished off.

[SKIPPED]
Re-enable once the Python 3 SSL port is done.

twisted.test.test_internet.PortStringificationTests.testSSL



Nevertheless, when I add the patch 6371 for _sslverify and run the tests
for it, all works fine.

Then I run an https get using treq against www.google.com and
twistedmatrix.com I get a 200 and the results back,

If I run the treq test without wincertstore installed, it fails with a
wincertstore not installed message.

These simple tests imply that SSL is working, but I may be glossing over
some important missing feature.

Has anyone got some helpful suggestions?


Below are the test results:
-------------------------------


First for Python2.7.13 32bit Twisted 17.9.1 Windows 2012 R2 Server
---------------------------------------------------------------------------------------------

The sslChainLoads test I can work around by fixing the line endings.

The SSHCheckerTests I think is because conch plugin is not loaded.

However I am under the impression that conch did not work on windows anyway.

[ERROR]
    raise InvalidAuthType(authType)
twisted.cred.strcred.InvalidAuthType: sshkey

twisted.cred.test.test_strcred.SSHCheckerTests.test_isChecker
===============================================================================
[ERROR]
Traceback (most recent call last):
exceptions.ValueError: Specified chain file
'c:\twistedssl\twisted\src\twisted\internet\test\fake_CAs\chain.pem'
doesn't contain any valid certificates in PEM format.

twisted.internet.test.test_endpoints.ServerStringTests.test_sslChainLoads
-------------------------------------------------------------------------------
Ran 11883 tests in 629.094s

FAILED (skips=2890, errors=2, successes=8991)
---------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------


Second for python 3.6.3 32 bit twisted 17.9.1 on Windows 10 Pro Version
1709 (OS build 16229.309)
---------------------------------------------------------------------------------------------------------------------

The StringIO errors are because it is not available on python3

The SSH check error is I imagine the same as for python2.7

The mail and test_hook errors I have not looked into yet.


Python3.6-32

[SKIPPED]
Re-enable once the Python 3 SSL port is done.

twisted.test.test_internet.PortStringificationTests.testSSL

[FAIL]
Traceback (most recent call last):
    raise self.failureException(msg)
twisted.trial.unittest.FailTest: True is not false : Module
twisted.mail.alias exists

twisted.python.test.test_dist3.ModulesToInstallTests.test_notexist
===============================================================================
[ERROR]
Traceback (most recent call last):
  File "c:\twistedssl\twisted\src\twisted\cred\strcred.py", line 114, in
findCheckerFactory
    raise InvalidAuthType(authType)
twisted.cred.strcred.InvalidAuthType: sshkey

twisted.cred.test.test_strcred.SSHCheckerTests.test_isChecker
===============================================================================
[ERROR]
Traceback (most recent call last):
  File "c:\twistedssl\twisted\src\twisted\mail\test\test_mail.py", line 12,
in <module>
    import StringIO
builtins.ModuleNotFoundError: No module named 'StringIO'

twisted.mail.test.test_mail
===============================================================================
[ERROR]
Traceback (most recent call last):
  File "c:\twistedssl\twisted\src\twisted\mail\test\test_mailmail.py", line
10, in <module>
    from StringIO import StringIO
builtins.ModuleNotFoundError: No module named 'StringIO'

twisted.mail.test.test_mailmail
===============================================================================
[ERROR]
Traceback (most recent call last):
  File "c:\twistedssl\twisted\src\twisted\mail\maildir.py", line 20, in
<module>
    import StringIO
builtins.ModuleNotFoundError: No module named 'StringIO'

twisted.mail.test.test_options
===============================================================================
[ERROR]
Traceback (most recent call last):
    from email.Parser import Parser
builtins.ModuleNotFoundError: No module named 'email.Parser'

twisted.news.test.test_database
===============================================================================
[ERROR]
Traceback (most recent call last):
  File "c:\twistedssl\twisted\src\twisted\news\database.py", line 11, in
<module>
    import StringIO
builtins.ModuleNotFoundError: No module named 'StringIO'

twisted.news.test.test_news
===============================================================================
[ERROR]
Traceback (most recent call last):
  File "c:\twistedssl\twisted\src\twisted\news\database.py", line 11, in
<module>
    import StringIO
builtins.ModuleNotFoundError: No module named 'StringIO'

twisted.news.test.test_nntp
===============================================================================
[ERROR]
Traceback (most recent call last):
  File "c:\twistedssl\twisted\src\twisted\test\test_hook.py", line 89, in
setUp
    BaseClass.__dict__.clear()
builtins.AttributeError: 'mappingproxy' object has no attribute 'clear'

twisted.test.test_hook.HookTests.testBaseHook
twisted.test.test_hook.HookTests.testSubHook
-------------------------------------------------------------------------------
Ran 11751 tests in 299.633s

FAILED (skips=2770, failures=1, errors=9, successes=8971)

-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180317/1802fc6e/attachment.html>

From adi at roiban.ro  Sat Mar 17 12:16:50 2018
From: adi at roiban.ro (Adi Roiban)
Date: Sat, 17 Mar 2018 18:16:50 +0000
Subject: [Twisted-Python] Buildmaster is down
Message-ID: <CAFycZ9dkKGr7vOHTZbTu85+ed2=7xwjs-AmSPqQNkUH34Q9TPg@mail.gmail.com>

Hi,

Today, I tried to reconfigure the Buildbot master from braid/master
and it failed.

It looks like it is missing the configuration for some slaves.
I have checked the private files, and it looks like newer slaves are missing.

I guess that the changes were made outside braid or of the
twisted-infra-secret repo and were overwritten when I have applied the
braid changes.

I don't know from where to get the latest list of slaves.

I hope that someone can help:)

Thanks!
-- 
Adi Roiban


From glyph at twistedmatrix.com  Sat Mar 17 21:34:57 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 17 Mar 2018 20:34:57 -0700
Subject: [Twisted-Python] INCOMPATIBLE CHANGE: Removal
	of	t.c.ssh.filetransfer.FileTransferClient.wasAFile
In-Reply-To: <CAFycZ9eNLOPEtGL=H97peeQg938TjGutmbDMr8sTADdx-w_b_g@mail.gmail.com>
References: <999EECC6-25E7-4F29-B7D2-3CBC6A9E2D0F@omnigroup.com>
 <CAFycZ9eNLOPEtGL=H97peeQg938TjGutmbDMr8sTADdx-w_b_g@mail.gmail.com>
Message-ID: <6FDCEC32-F7B4-484B-AAA7-35A8A8155748@twistedmatrix.com>

Hi Wim,

Thanks for following the process.  Glad to see that this got resolved.  And thanks for cleaning up our TERRIBLE HACKs :).

-g

> On Mar 7, 2018, at 2:12 AM, Adi Roiban <adi at roiban.ro> wrote:
> 
> Hi,
> 
> Thank you so much Wim for helping with this cleanup.
> 
> As commented in the PR I am +1 for this exceptions.
> 
> Cheers,
> Adi
> 
> On 6 March 2018 at 20:20, Wim Lewis <wiml at omnigroup.com> wrote:
>> In PR 949 ("Remove “terrible hack” in t.c.ssh.filetransfer.FileTransferClient", trac bug 9362) I'm removing an attribute of FileTransferClient which I'm pretty sure was never intended to be public. Adi Roiban points out that this is technically a compatibility-breaking change, though, and so it needs more public review.
>> 
>> My reasoning for thinking that this will not break any user code: the attribute, although not prefixed with an underscore, was undocumented; anyone relying on it would have had to read the source code to discover what it does, and in the source it was commented as a "TERRIBLE HACK". I'd hope this would be enough of a warning. (Also, I can't think of a use for it.)
>> 
>> trac: https://twistedmatrix.com/trac/ticket/9362
>> pr: https://github.com/twisted/twisted/pull/949
>> 
>> 
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> 
> -- 
> Adi Roiban
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From glyph at twistedmatrix.com  Sat Mar 17 22:25:35 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 17 Mar 2018 21:25:35 -0700
Subject: [Twisted-Python] New member of the
	twisted/twisted-contributors	team.
In-Reply-To: <CAFycZ9ct+ZnvE=8O+pXGWeqh3ZF2NSa+gwpRXPAySNWBPw5ezw@mail.gmail.com>
References: <CAFycZ9ct+ZnvE=8O+pXGWeqh3ZF2NSa+gwpRXPAySNWBPw5ezw@mail.gmail.com>
Message-ID: <686F5388-8AFD-4257-BC23-9E1B4C64C9E2@twistedmatrix.com>



> On Mar 15, 2018, at 3:35 AM, Adi Roiban <adi at roiban.ro> wrote:
> 
> Hi,
> 
> Just a quick announcement.
> 
> I made Ilya Skriblovsky (https://github.com/IlyaSkriblovsky) a member
> of twisted/twisted-contributors team.
> 
> The main reason is to make it easier to work with Ilya and allow him
> to run tests on Buildbot.
> 
> Let me know if you want this change reverted.

Far from it.  We need all the help we can get right now :).

Congratulations, Ilya!  I hope Adi already told you this, but please read https://twistedmatrix.com/trac/wiki/CommitterCheckList <https://twistedmatrix.com/trac/wiki/CommitterCheckList>, and welcome to the team :).

In the past we've had some hand-wringing on this list about how exactly our "become a committer" process should work.  Given the growing length of the review queue, I should just say: if you want to become a Twisted project member, now's your chance.  If you'll commit to doing even 1 review a month, I'll be happy to hand out repo:write privileges at this point to anyone whose name I can passably recognize and who has a stated interest :).

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180317/78ebb6f5/attachment.html>

From glyph at twistedmatrix.com  Sat Mar 17 22:56:45 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 17 Mar 2018 21:56:45 -0700
Subject: [Twisted-Python] Buildmaster is down
In-Reply-To: <CAFycZ9dkKGr7vOHTZbTu85+ed2=7xwjs-AmSPqQNkUH34Q9TPg@mail.gmail.com>
References: <CAFycZ9dkKGr7vOHTZbTu85+ed2=7xwjs-AmSPqQNkUH34Q9TPg@mail.gmail.com>
Message-ID: <C4B81344-0E6D-491B-B755-0CC9495AD1E2@twistedmatrix.com>



> On Mar 17, 2018, at 11:16 AM, Adi Roiban <adi at roiban.ro> wrote:
> 
> Hi,
> 
> Today, I tried to reconfigure the Buildbot master from braid/master
> and it failed.
> 
> It looks like it is missing the configuration for some slaves.
> I have checked the private files, and it looks like newer slaves are missing.
> 
> I guess that the changes were made outside braid or of the
> twisted-infra-secret repo and were overwritten when I have applied the
> braid changes.
> 
> I don't know from where to get the latest list of slaves.
> 
> I hope that someone can help:)

It's up and running again.

I don't believe the issue was changes made outside Braid; based on the failure mode it looks to me like you had an out-of-date or edited twisted-infra-secret repo.  Please be sure to git fetch (git reset --hard origin/master ; git secret reveal) before doing anything in prod.

I just fixed it by ensuring everything was up to date, and then doing `fab config.production buildbot.update` locally.

-g

From trac at twistedmatrix.com  Sun Mar 18 00:05:25 2018
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 18 Mar 2018 06:05:25 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1521353125.2.8134576971552300725@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180318/b4383e76/attachment-0001.html>

From johnaherne at rocs.co.uk  Sun Mar 18 00:51:00 2018
From: johnaherne at rocs.co.uk (John Aherne)
Date: Sun, 18 Mar 2018 06:51:00 +0000
Subject: [Twisted-Python] RunningTwisted tests on Windows and SSL
Message-ID: <CAKmUHjbmgWtMHUx3ObMPE_27aqLoReiiU65kW0TA1_YZjJ5JUw@mail.gmail.com>

 Some clarification on running the tests.

For the tests on test_sslverify

If I apply the patches from 6371 on python2.7.13 32bit windows2012R2, the
test_sslverify runs without error or failure.

  TrustRootTests
    test_caCertsPlatformDefaults ...
 [OK]
    test_caCertsWindows ...
[OK]
    test_trustRootPlatformRejectsUntrustedCA ...
 [OK]
    test_trustRootSpecificCertificate ...
[OK]

============================================================
===================
[SKIPPED]
NPN/ALPN is present on this platform

twisted.test.test_sslverify.NPNAndALPNAbsentTests.test_
NPNAndALPNNotImplemented
twisted.test.test_sslverify.NPNAndALPNAbsentTests.test_
NegotiatedProtocolReturns
None
twisted.test.test_sslverify.NPNAndALPNAbsentTests.test_
nextProtocolMechanismsNoN
egotiationSupported
------------------------------------------------------------
-------------------
Ran 113 tests in 496.749s

PASSED (skips=3, successes=110)
------------------------------------------------------------
---------------------------------------------------------------------------



If I apply the patch on python3.6.3 32bit Windows10Pro, the test_sslverify
produces 1 error and 1 failure.

The test_caCertsWindows passes

Looking at the Error on  test_ecDoesNotBreakConstructor, I don't see where
I can find  _getEllipticCurve.

I can't see it in  OpenSSLCertificateOptions. And so far google does not
help

============================================================
===================
[FAIL]
Traceback (most recent call last):
  File "c:\twistedssl\twisted\src\twisted\test\test_sslverify.py", line
1292, in test_ecSuccessWithRealBindings
    self.assertEqual(defaultCurve, opts._ecCurve)
  File "c:\twistedssl\twisted\src\twisted\trial\_synctest.py", line 432, in
assertEqual
    super(_Assertions, self).assertEqual(first, second, msg)
  File "c:\program files (x86)\python36-32\Lib\unittest\case.py", line 829,
in assertEqual
    assertion_func(first, second, msg=msg)
  File "c:\program files (x86)\python36-32\Lib\unittest\case.py", line 822,
in _baseAssertEqual
    raise self.failureException(msg)
twisted.trial.unittest.FailTest: <Curve 'prime256v1'> !=
<twisted.internet._sslverify._OpenSSLECCurve object at 0x06B4FDF0>

twisted.test.test_sslverify.OpenSSLOptionsTests.test_
ecSuccessWithRealBindings
============================================================
===================
[ERROR]
Traceback (most recent call last):
  File "c:\twistedssl\twisted\src\twisted\test\test_sslverify.py", line
1254, in test_ecDoesNotBreakConstructor
    sslverify.OpenSSLCertificateOptions, "_getEllipticCurve", missing)
  File "c:\twistedssl\twisted\src\twisted\trial\_synctest.py", line 1086,
in patch
    monkeyPatch.patch()
  File "c:\twistedssl\twisted\src\twisted\python\monkey.py", line 53, in
patch
    self._originals.append((obj, name, getattr(obj, name)))
builtins.AttributeError: type object 'OpenSSLCertificateOptions' has no
attribute '_getEllipticCurve'

twisted.test.test_sslverify.OpenSSLOptionsTests.test_
ecDoesNotBreakConstructor
------------------------------------------------------------
-------------------
Ran 113 tests in 185.166s

FAILED (skips=3, failures=1, errors=1, successes=108)

The following is what monkeypatch is working with

    test_ecDoesNotBreakConstructor ... *******PATCH******* <class
'twisted.internet._sslverify.OpenSSLCertificateOptions'>

*******PATCH******* _getEllipticCurve
                                           [ERROR]


    test_caCertsPlatformDefaults ...
 [OK]
    test_caCertsWindows ...
[OK]
    test_trustRootPlatformRejectsUntrustedCA ...
 [OK]

Any pointers would be welcome

John Aherne



-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180318/224455f4/attachment.html>

From ilyaskriblovsky at gmail.com  Sun Mar 18 01:50:28 2018
From: ilyaskriblovsky at gmail.com (Ilya Skriblovsky)
Date: Sun, 18 Mar 2018 07:50:28 +0000
Subject: [Twisted-Python] New member of the twisted/twisted-contributors
	team.
In-Reply-To: <686F5388-8AFD-4257-BC23-9E1B4C64C9E2@twistedmatrix.com>
References: <CAFycZ9ct+ZnvE=8O+pXGWeqh3ZF2NSa+gwpRXPAySNWBPw5ezw@mail.gmail.com>
 <686F5388-8AFD-4257-BC23-9E1B4C64C9E2@twistedmatrix.com>
Message-ID: <CAOG7vkxaZ9rMcAYFP8wPo_OdUY4VFno5Wh51rCkPQp6WL2jBrA@mail.gmail.com>

Thanks, I greatly appreciate!

I'll try to find time to commit it to reviews

вс, 18 мар. 2018 г., 7:26 Glyph <glyph at twistedmatrix.com>:

>
>
> On Mar 15, 2018, at 3:35 AM, Adi Roiban <adi at roiban.ro> wrote:
>
> Hi,
>
> Just a quick announcement.
>
> I made Ilya Skriblovsky (https://github.com/IlyaSkriblovsky) a member
> of twisted/twisted-contributors team.
>
> The main reason is to make it easier to work with Ilya and allow him
> to run tests on Buildbot.
>
> Let me know if you want this change reverted.
>
>
> Far from it.  We need all the help we can get right now :).
>
> Congratulations, Ilya!  I hope Adi already told you this, but please read
> https://twistedmatrix.com/trac/wiki/CommitterCheckList, and welcome to
> the team :).
>
> In the past we've had some hand-wringing on this list about how exactly
> our "become a committer" process should work.  Given the growing length of
> the review queue, I should just say: if you want to become a Twisted
> project member, now's your chance.  If you'll commit to doing even 1 review
> a month, I'll be happy to hand out repo:write privileges at this point to
> anyone whose name I can passably recognize and who has a stated interest :).
>
> -g
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180318/23015c96/attachment-0001.html>

From glyph at twistedmatrix.com  Sun Mar 18 01:52:32 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 18 Mar 2018 00:52:32 -0700
Subject: [Twisted-Python] New member of the
	twisted/twisted-contributors	team.
In-Reply-To: <CAOG7vkxaZ9rMcAYFP8wPo_OdUY4VFno5Wh51rCkPQp6WL2jBrA@mail.gmail.com>
References: <CAFycZ9ct+ZnvE=8O+pXGWeqh3ZF2NSa+gwpRXPAySNWBPw5ezw@mail.gmail.com>
 <686F5388-8AFD-4257-BC23-9E1B4C64C9E2@twistedmatrix.com>
 <CAOG7vkxaZ9rMcAYFP8wPo_OdUY4VFno5Wh51rCkPQp6WL2jBrA@mail.gmail.com>
Message-ID: <FF0C03C1-EC7C-41F6-BFE3-AF82155A2C31@twistedmatrix.com>



> On Mar 18, 2018, at 12:50 AM, Ilya Skriblovsky <ilyaskriblovsky at gmail.com> wrote:
> 
> Thanks, I greatly appreciate!
> 
> I'll try to find time to commit it to reviews

✨❤️✨

-g


From adi at roiban.ro  Sun Mar 18 05:43:49 2018
From: adi at roiban.ro (Adi Roiban)
Date: Sun, 18 Mar 2018 11:43:49 +0000
Subject: [Twisted-Python] Buildmaster is down
In-Reply-To: <C4B81344-0E6D-491B-B755-0CC9495AD1E2@twistedmatrix.com>
References: <CAFycZ9dkKGr7vOHTZbTu85+ed2=7xwjs-AmSPqQNkUH34Q9TPg@mail.gmail.com>
 <C4B81344-0E6D-491B-B755-0CC9495AD1E2@twistedmatrix.com>
Message-ID: <CAFycZ9ci_t9Mzb_JAyuTkNrYFi7cH8_-vUjxHfVgWREQXTC8-w@mail.gmail.com>

On 18 March 2018 at 04:56, Glyph <glyph at twistedmatrix.com> wrote:
>
>
>> On Mar 17, 2018, at 11:16 AM, Adi Roiban <adi at roiban.ro> wrote:
>>
>> Hi,
>>
>> Today, I tried to reconfigure the Buildbot master from braid/master
>> and it failed.

[snip]

> I don't believe the issue was changes made outside Braid; based on the failure mode it looks to me like you had an out-of-date or edited twisted-infra-secret repo.  Please be sure to git fetch (git reset --hard origin/master ; git secret reveal) before doing anything in prod.

Thanks. `git secret reveal` was the issue on my side.
I knew about git secret, but I was expecting that there will be a
warning when the decrypted version is out of sync at pull.

There is `fab config.production buildbot.reconfigure` which should
just touch the configuration, without updating the virtualenv.
Usually this is much faster.

Thanks again for the fix, my bad for getting into this!
Adi


From johnaherne at rocs.co.uk  Sun Mar 18 07:45:54 2018
From: johnaherne at rocs.co.uk (John Aherne)
Date: Sun, 18 Mar 2018 13:45:54 +0000
Subject: [Twisted-Python] RunningTwisted tests on Windows and SSL
Message-ID: <CAKmUHjZTcTUH-m0z3JQhbp-1eEKghbRO7OEv2X1oK7HqrQH0pQ@mail.gmail.com>

This is useful info for anyone else running into these issues. At least
they might save a bit of time not having to run down what is happening.


Seems that the mail,email, test_hook and StringIO errors all come from not
ported modules as seen in twisted\src\python\_setup.py.

The _getEllipticCurve error

<< builtins.AttributeError: type object 'OpenSSLCertificateOptions' has no
attribute '_getEllipticCurve'

twisted.test.test_sslverify.OpenSSLOptionsTests.test_ecDoesNotBreakConstructor
>>

is because getattr will raise an AttributeError, which is what it is doing
here. But it does not do this for python2.7.

The test is not to break if the ECCurve is missing. It is missing since it
is not found. Still looking at this.

With wincertstore being used, we get a failing test as follows:

[FAIL]
Traceback (most recent call last):
  File "c:\twistedssl\twisted\src\twisted\web\test\test_agent.py", line
1568, in test_setsTrustRootOnContextToDefaultTrustRoot
    certificateOptions.trustRoot, ssl.OpenSSLDefaultPaths)
  File "c:\twistedssl\twisted\src\twisted\trial\_synctest.py", line 649, in
assertIsInstance
    instance, classOrTuple, suffix))
twisted.trial.unittest.FailTest:
<twisted.internet._sslverify.OpenSSLWindowsCertificateAuthorities object at
0x0CFDA810> is not an instance of <class
'twisted.internet._sslverify.OpenSSLDefaultPaths'>

twisted.web.test.test_agent.WebClientContextFactoryTests.test_setsTrustRootOnContextToDefaultTrustRoot

So a new test is needed to fix this.

Also, the current patch only loads the ROOT certificates. The standard
library loads ['CA', 'ROOT'], so we should be doing the same I imagine.



-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180318/c3b57f42/attachment.html>

From ralienpp at gmail.com  Sun Mar 18 09:04:52 2018
From: ralienpp at gmail.com (Alex Railean)
Date: Sun, 18 Mar 2018 16:04:52 +0100
Subject: [Twisted-Python] Strategy for finding source of unhandled error in
	Deferred
Message-ID: <295015210.20180318160452@gmail.com>

Hello,

I have inherited a misbehaving system and am trying to troubleshoot it. The code
is not documented and I cannot produce a minimal working example that illustrates
the problem yet, as I don't know which parts are involved and how they relate.

The version of Twisted used is 16.1.1, running on Fedora 15.


My first attempt is to leverage Twisted's logging capabilities and retrieve
information about the place in the code that leads to the error:

from twisted.python import log as twisted_log
observer = twisted_log.PythonLoggingObserver(loggerName='twcore')
observer.start()



This produces the following entries in the log:
Unhandled error in Deferred:
CRITICAL _legacy       twcore Unhandled error in Deferred:

Traceback (most recent call last):
Failure: __builtin__.type: <class 'twisted.internet.error.TimeoutError'>
CRITICAL _legacy       twcore



How can I get more clues about what is going on? I was expecting a line number,
or a complete call-stack.


What are the recommended troubleshooting steps for finding the Deferred in which
the error occurred?  There are are around 30 of them throughout the code, is
there a heuristic I can use to narrow down the list of suspects?









From exarkun at twistedmatrix.com  Sun Mar 18 09:21:25 2018
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Sun, 18 Mar 2018 11:21:25 -0400
Subject: [Twisted-Python] Strategy for finding source of unhandled error
 in Deferred
In-Reply-To: <295015210.20180318160452@gmail.com>
References: <295015210.20180318160452@gmail.com>
Message-ID: <CAEeXt4PYvQay7f6wPOb2HfFR7aMYPmJWj1c6E2JtTrRxyC_82Q@mail.gmail.com>

On Sun, Mar 18, 2018 at 11:04 AM, Alex Railean <ralienpp at gmail.com> wrote:

> Hello,
>
> I have inherited a misbehaving system and am trying to troubleshoot it.
> The code
> is not documented and I cannot produce a minimal working example that
> illustrates
> the problem yet, as I don't know which parts are involved and how they
> relate.
>
This produces the following entries in the log:
> Unhandled error in Deferred:
> CRITICAL _legacy       twcore Unhandled error in Deferred:
>
> Traceback (most recent call last):
> Failure: __builtin__.type: <class 'twisted.internet.error.TimeoutError'>
> CRITICAL _legacy       twcore
>
>
>
> How can I get more clues about what is going on? I was expecting a line
> number,
> or a complete call-stack.
>
>
> What are the recommended troubleshooting steps for finding the Deferred in
> which
> the error occurred?  There are are around 30 of them throughout the code,
> is
> there a heuristic I can use to narrow down the list of suspects?
>
>
>
>
>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180318/074b097b/attachment-0001.html>

From exarkun at twistedmatrix.com  Sun Mar 18 09:23:58 2018
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Sun, 18 Mar 2018 11:23:58 -0400
Subject: [Twisted-Python] Strategy for finding source of unhandled error
 in Deferred
In-Reply-To: <CAEeXt4PYvQay7f6wPOb2HfFR7aMYPmJWj1c6E2JtTrRxyC_82Q@mail.gmail.com>
References: <295015210.20180318160452@gmail.com>
 <CAEeXt4PYvQay7f6wPOb2HfFR7aMYPmJWj1c6E2JtTrRxyC_82Q@mail.gmail.com>
Message-ID: <CAEeXt4O8=qnLQ2DKPcyvwU57Ax_hdCpurUuMryA1UcuEC1T2hQ@mail.gmail.com>

On Sun, Mar 18, 2018 at 11:21 AM, Jean-Paul Calderone <
exarkun at twistedmatrix.com> wrote:

> On Sun, Mar 18, 2018 at 11:04 AM, Alex Railean <ralienpp at gmail.com> wrote:
>
>> Hello,
>>
>> I have inherited a misbehaving system and am trying to troubleshoot it.
>> The code
>> is not documented and I cannot produce a minimal working example that
>> illustrates
>> the problem yet, as I don't know which parts are involved and how they
>> relate.
>>
> This produces the following entries in the log:
>> Unhandled error in Deferred:
>> CRITICAL _legacy       twcore Unhandled error in Deferred:
>>
>> Traceback (most recent call last):
>> Failure: __builtin__.type: <class 'twisted.internet.error.TimeoutError'>
>> CRITICAL _legacy       twcore
>>
>>
>>
>> How can I get more clues about what is going on? I was expecting a line
>> number,
>> or a complete call-stack.
>>
>
Try this:

    from twisted.internet.defer import setDebugging
    setDebugging(True)

This gives you creation and callback stacks in the logs.

Jean-Paul


>
>>
>> What are the recommended troubleshooting steps for finding the Deferred
>> in which
>> the error occurred?  There are are around 30 of them throughout the code,
>> is
>> there a heuristic I can use to narrow down the list of suspects?
>>
>>
>>
>>
>>
>>
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180318/28d88ec2/attachment.html>

From rodrigc at crodrigues.org  Sun Mar 18 13:17:24 2018
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Sun, 18 Mar 2018 12:17:24 -0700
Subject: [Twisted-Python] RunningTwisted tests on Windows and SSL
In-Reply-To: <CAKmUHjas5=NQzr2BmPv0gUEOcjYpTR_vAr2MPn6uHNh8Or5gUw@mail.gmail.com>
References: <CAKmUHjas5=NQzr2BmPv0gUEOcjYpTR_vAr2MPn6uHNh8Or5gUw@mail.gmail.com>
Message-ID: <CAG=rPVe_zyG4oXOXnpgkoqnKP9tt3uariNwU94pKqA3uYbv=OQ@mail.gmail.com>

Do not run the tests directly from the source tree.
Instead, you should install Twisted into a virtualenv
and run "trial twisted" from inside the virtualenv and outside the source
tree.
The installer has some logic to omit the installation of certain modules
and tests
which do not work on Python 3.

You can also run the tests by using tox as specified here:

https://github.com/twisted/twisted/blob/trunk/README.rst#unit-tests

because tox takes care of setting up the virtualenv and running the
tests inside the virtualenv.

--
Craig



On Sat, Mar 17, 2018 at 2:58 AM, John Aherne <johnaherne at rocs.co.uk> wrote:

>
>
> twisted.cred.test.test_strcred.SSHCheckerTests.test_isChecker
> ============================================================
> ===================
> [ERROR]
> Traceback (most recent call last):
>   File "c:\twistedssl\twisted\src\twisted\mail\test\test_mail.py", line
> 12, in <module>
>     import StringIO
> builtins.ModuleNotFoundError: No module named 'StringIO'
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180318/0ff53340/attachment.html>

From glyph at twistedmatrix.com  Sun Mar 18 23:26:41 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 18 Mar 2018 22:26:41 -0700
Subject: [Twisted-Python] we can stop depending on pypiwin32
Message-ID: <8F2F5347-E63B-4733-B524-74D7D1B8BFE0@twistedmatrix.com>

As per the release announcement in https://mail.python.org/pipermail/python-win32/2018-February/014000.html <https://mail.python.org/pipermail/python-win32/2018-February/014000.html>, PyWin32 now does development on Github, and uploads binary wheels to PyPI, as you can see here: https://pypi.org/project/pywin32/223/#files <https://pypi.org/project/pywin32/223/#files>.  So we can stop depending on my ill-fated pypiwin32 fork.

If anybody is interested in doing some minor Windows maintenance, I would like very much to never think about PyPIWin32 again :).

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180318/6e2f1e58/attachment.html>

From johnaherne at rocs.co.uk  Mon Mar 19 11:08:02 2018
From: johnaherne at rocs.co.uk (John Aherne)
Date: Mon, 19 Mar 2018 17:08:02 +0000
Subject: [Twisted-Python] RunningTwisted tests on Windows and SSL
In-Reply-To: <CAG=rPVe_zyG4oXOXnpgkoqnKP9tt3uariNwU94pKqA3uYbv=OQ@mail.gmail.com>
References: <CAKmUHjas5=NQzr2BmPv0gUEOcjYpTR_vAr2MPn6uHNh8Or5gUw@mail.gmail.com>
 <CAG=rPVe_zyG4oXOXnpgkoqnKP9tt3uariNwU94pKqA3uYbv=OQ@mail.gmail.com>
Message-ID: <CAKmUHjZVPP7QE7sRPngUr3zu2Sw-cAcB39rmpeHvzzW3fU7VAw@mail.gmail.com>

Thanks.

I was using a virtualenv.

Just loaded everything again and all is now cleaner.

Now the not ported modules don't appear.

Just have the sslChainLoads test to look at.

Regards

John Aherne




On Sun, Mar 18, 2018 at 7:17 PM, Craig Rodrigues <rodrigc at crodrigues.org>
wrote:

> Do not run the tests directly from the source tree.
> Instead, you should install Twisted into a virtualenv
> and run "trial twisted" from inside the virtualenv and outside the source
> tree.
> The installer has some logic to omit the installation of certain modules
> and tests
> which do not work on Python 3.
>
> You can also run the tests by using tox as specified here:
>
> https://github.com/twisted/twisted/blob/trunk/README.rst#unit-tests
>
> because tox takes care of setting up the virtualenv and running the
> tests inside the virtualenv.
>
> --
> Craig
>
>
>
> On Sat, Mar 17, 2018 at 2:58 AM, John Aherne <johnaherne at rocs.co.uk>
> wrote:
>
>>
>>
>> twisted.cred.test.test_strcred.SSHCheckerTests.test_isChecker
>> ============================================================
>> ===================
>> [ERROR]
>> Traceback (most recent call last):
>>   File "c:\twistedssl\twisted\src\twisted\mail\test\test_mail.py", line
>> 12, in <module>
>>     import StringIO
>> builtins.ModuleNotFoundError: No module named 'StringIO'
>>
>>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180319/06231811/attachment.html>

From peter.westlake at pobox.com  Fri Mar 23 05:16:57 2018
From: peter.westlake at pobox.com (Peter Westlake)
Date: Fri, 23 Mar 2018 11:16:57 +0000
Subject: [Twisted-Python] Asynchronous code in a context manager
Message-ID: <1521803817.3234826.1313425600.055CCD14@webmail.messagingengine.com>

I have a context manager whose __exit__ method needs to run some asynchronous Twisted code. Using Crochet's @wait_for very nearly works:

no_setup()

class Example(object):
    def __exit__(t, v, tb):
            return self.cleanup()

   @wait_for
   @inlineCallbacks
    def cleanup(self):
           yield .....
           returnValue(False)

    ....

Then
     with e as Example():

This gets an error because the cleanup function is being called in the reactor thread. Using reactor.callInThread(self.cleanup()) makes it work up to a point, but it doesn't wait for the thread to finish. Is there a way to make this work? The alternative is simply to call the cleanup function explicitly from the with statement, and have the __exit__ handler throw an error if you forget. So any solution needs to be cleaner than that, or there's no point. I'm beginning to suspect that this is the case!

Peter.


From meejah at meejah.ca  Fri Mar 23 10:54:04 2018
From: meejah at meejah.ca (meejah)
Date: Fri, 23 Mar 2018 20:54:04 +0400
Subject: [Twisted-Python] Asynchronous code in a context manager
In-Reply-To: <1521803817.3234826.1313425600.055CCD14@webmail.messagingengine.com>
 (Peter Westlake's message of "Fri, 23 Mar 2018 11:16:57 +0000")
References: <1521803817.3234826.1313425600.055CCD14@webmail.messagingengine.com>
Message-ID: <86sh8q3f83.fsf@atlantis.meejah.ca>


Are you using Python3? Then there's "asynchronous context managers". I
finally found a use-case for one in txtorcon, so here's an example:

   http://txtorcon.readthedocs.io/en/latest/txtorcon-controller.html#txtorcon.Tor.onion_authentication

-- 
meejah


From rodrigc at crodrigues.org  Sat Mar 24 17:28:19 2018
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Sat, 24 Mar 2018 16:28:19 -0700
Subject: [Twisted-Python] Enable rolling builds for Appveyor
Message-ID: <CAG=rPVcSm=nXLZk50XwdZ0Ryy=2K6DWSAg4-UfK0gn0+Qfi8Mg@mail.gmail.com>

Adi,

Can you enable "rolling builds" on Appveyor:

https://www.appveyor.com/docs/build-configuration/#rolling-builds


If someone pushes a new commit to a branch, that will
stop old builds currently in-progress or queued for the branch,
and just queue the new commit for the branch.

This can be done on the settings page at:

https://ci.appveyor.com/project/adiroiban/twisted/settings

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180324/d4686cfc/attachment.html>

From mrw at enotuniq.org  Sat Mar 24 18:05:54 2018
From: mrw at enotuniq.org (Mark Williams)
Date: Sat, 24 Mar 2018 17:05:54 -0700
Subject: [Twisted-Python] Enable rolling builds for Appveyor
In-Reply-To: <CAG=rPVcSm=nXLZk50XwdZ0Ryy=2K6DWSAg4-UfK0gn0+Qfi8Mg@mail.gmail.com>
References: <CAG=rPVcSm=nXLZk50XwdZ0Ryy=2K6DWSAg4-UfK0gn0+Qfi8Mg@mail.gmail.com>
Message-ID: <1521936354.3212140.1314927944.09585184@webmail.messagingengine.com>

On Sat, Mar 24, 2018, at 4:28 PM, Craig Rodrigues wrote:
> Can you enable "rolling builds" on Appveyor:

Done.

--
  Mark Williams
  mrw at enotuniq.org


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180324/1afb9eeb/attachment.html>

From adi at roiban.ro  Sat Mar 24 18:35:39 2018
From: adi at roiban.ro (Adi Roiban)
Date: Sun, 25 Mar 2018 00:35:39 +0000
Subject: [Twisted-Python] Enable rolling builds for Appveyor
In-Reply-To: <CAG=rPVcSm=nXLZk50XwdZ0Ryy=2K6DWSAg4-UfK0gn0+Qfi8Mg@mail.gmail.com>
References: <CAG=rPVcSm=nXLZk50XwdZ0Ryy=2K6DWSAg4-UfK0gn0+Qfi8Mg@mail.gmail.com>
Message-ID: <CAFycZ9cSrvAF4jRD2KbwqAbO63Nr++PCf++M_sMY=K9n-MZ0GA@mail.gmail.com>

On 24 March 2018 at 23:28, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> Adi,
>
> Can you enable "rolling builds" on Appveyor:
>
> https://www.appveyor.com/docs/build-configuration/#rolling-builds
>
>
> If someone pushes a new commit to a branch, that will
> stop old builds currently in-progress or queued for the branch,
> and just queue the new commit for the branch.
>
> This can be done on the settings page at:
>
> https://ci.appveyor.com/project/adiroiban/twisted/settings

Mark is fast :)

While the Appveyor is set up under my username, I think that the whole
Twisted team has admin permissions.

Not sure if automatically, or someone else is manually adding team members.
I see that Ilya Skriblovsky is onboard :)

Craig, you are registered as admin using the bsd email address.
Let us know if you are using other email for Appveyor.

I would like to move this to something like
https://ci.appveyor.com/project/TWISTED/twisted/, but I don't know
how.

-- 
Adi Roiban


From rodrigc at crodrigues.org  Sat Mar 24 18:46:13 2018
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Sat, 24 Mar 2018 17:46:13 -0700
Subject: [Twisted-Python] Enable rolling builds for Appveyor
In-Reply-To: <CAFycZ9cSrvAF4jRD2KbwqAbO63Nr++PCf++M_sMY=K9n-MZ0GA@mail.gmail.com>
References: <CAG=rPVcSm=nXLZk50XwdZ0Ryy=2K6DWSAg4-UfK0gn0+Qfi8Mg@mail.gmail.com>
 <CAFycZ9cSrvAF4jRD2KbwqAbO63Nr++PCf++M_sMY=K9n-MZ0GA@mail.gmail.com>
Message-ID: <CAG=rPVeUY+9oDCwBDCqCN8yZ-VmdbtYkhw_Dk5yYNOVM+3wCjA@mail.gmail.com>

On Sat, Mar 24, 2018 at 5:35 PM, Adi Roiban <adi at roiban.ro> wrote:

>
> Mark is fast :)
>
> While the Appveyor is set up under my username, I think that the whole
> Twisted team has admin permissions.
>
> Not sure if automatically, or someone else is manually adding team members.
> I see that Ilya Skriblovsky is onboard :)
>
> Craig, you are registered as admin using the bsd email address.
> Let us know if you are using other email for Appveyor.
>
> I would like to move this to something like
> https://ci.appveyor.com/project/TWISTED/twisted/, but I don't know
> how.
>


Thanks, Mark, for making the change.
Since I didn't set up appveyor and it isn't in my name, I didn't
want to touch anything in it without at least letting folks know on
this list.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180324/02f28c4e/attachment.html>

From rodrigc at crodrigues.org  Sat Mar 24 22:14:07 2018
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Sat, 24 Mar 2018 21:14:07 -0700
Subject: [Twisted-Python] Problem with osx10.10-py2.7 builder
Message-ID: <CAG=rPVeZHjmw2RuFuzbf3jR9j=WPNsmkrGM+U9kzr7c68qTbjQ@mail.gmail.com>

Hi,

Can someone check this builder:

https://buildbot.twistedmatrix.com/builders/osx10.10-py2.7

It is failing randomly in weird ways during builds.  For example,
in some cases it fails to install tox.  In other cases, the tests terminate
in
some random spot.

This builder is marked as "Required", so it is a bit annoying.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180324/70602c43/attachment.html>

From trac at twistedmatrix.com  Sun Mar 25 00:05:42 2018
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 25 Mar 2018 06:05:42 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1521957942.67.6137094562933861489@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180325/6cd98220/attachment-0001.html>

From adi at roiban.ro  Sun Mar 25 06:01:01 2018
From: adi at roiban.ro (Adi Roiban)
Date: Sun, 25 Mar 2018 13:01:01 +0100
Subject: [Twisted-Python] Problem with osx10.10-py2.7 builder
In-Reply-To: <CAG=rPVeZHjmw2RuFuzbf3jR9j=WPNsmkrGM+U9kzr7c68qTbjQ@mail.gmail.com>
References: <CAG=rPVeZHjmw2RuFuzbf3jR9j=WPNsmkrGM+U9kzr7c68qTbjQ@mail.gmail.com>
Message-ID: <CAFycZ9cnVeQcc3JxqNMjR9ki_S3PedS763LsbkcsYg0NO4L-zg@mail.gmail.com>

Hi,


On 25 March 2018 at 05:14, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> Hi,
>
> Can someone check this builder:
>
> https://buildbot.twistedmatrix.com/builders/osx10.10-py2.7
>
> It is failing randomly in weird ways during builds.  For example,
> in some cases it fails to install tox.  In other cases, the tests terminate
> in
> some random spot.

I will try and take a look at it.

If someone knows more about the slave running this build, please add
the info on wiki at:

https://twistedmatrix.com/trac/wiki/ContinuousIntegration/Buildslaves


> This builder is marked as "Required", so it is a bit annoying.
>


My understanding from the previous discussion about the supported
platforms is that any build is required.
The osx is there as I reminder to run the buildbot tests and not to
merge a PR with only Travis and Appveyor.

I have reconfigured GitHub to require  ubuntu16.04-py2.7-coverage as
this is backed by 3 slaves.



-----

We have the circle-ci macOS and for the next  2 days, we can use that :)
We are already used 55% of the macOS time and Circle-CI was enalbled
in trunk in the last 2 days...so I don't think that we can use
Circle-CI for macOS for the long term.
I will write them to see if we can get an exception or a discount.

Otherwise, I plan to rent a macOS  so that it can act as a second
slave for osx10.10-py2.7
So far, the support from macincloud was not helpful or friendly, but I
guess that we can just try their service for 1 month and see how it
goes.

-- 
Adi Roiban


From glyph at twistedmatrix.com  Mon Mar 26 00:58:54 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 25 Mar 2018 23:58:54 -0700
Subject: [Twisted-Python] Problem with osx10.10-py2.7 builder
In-Reply-To: <CAFycZ9cnVeQcc3JxqNMjR9ki_S3PedS763LsbkcsYg0NO4L-zg@mail.gmail.com>
References: <CAG=rPVeZHjmw2RuFuzbf3jR9j=WPNsmkrGM+U9kzr7c68qTbjQ@mail.gmail.com>
 <CAFycZ9cnVeQcc3JxqNMjR9ki_S3PedS763LsbkcsYg0NO4L-zg@mail.gmail.com>
Message-ID: <B5B15382-9E5F-4DA0-B058-DDFB6F470570@twistedmatrix.com>



> On Mar 25, 2018, at 5:01 AM, Adi Roiban <adi at roiban.ro> wrote:
> 
> Hi,
> 
> 
> On 25 March 2018 at 05:14, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
>> Hi,
>> 
>> Can someone check this builder:
>> 
>> https://buildbot.twistedmatrix.com/builders/osx10.10-py2.7
>> 
>> It is failing randomly in weird ways during builds.  For example,
>> in some cases it fails to install tox.  In other cases, the tests terminate
>> in
>> some random spot.
> 
> I will try and take a look at it.

Adi, myself, and Mark looked at it by turns and eventually I think we got it into a mostly working state.

Builds are now passing.  However, if you attempt to view the logs of a build in progress, it appears to fail with a purple exception.  This actually looks like it's a bug in the build master which I'm a little confused about why it isn't affecting other builders.

> If someone knows more about the slave running this build, please add
> the info on wiki at:
> 
> https://twistedmatrix.com/trac/wiki/ContinuousIntegration/Buildslaves <https://twistedmatrix.com/trac/wiki/ContinuousIntegration/Buildslaves>

Looks like you beat me to the punch: https://twistedmatrix.com/trac/wiki/ContinuousIntegration/Buildslaves/d3 <https://twistedmatrix.com/trac/wiki/ContinuousIntegration/Buildslaves/d3>

Is there other information you need?

>> This builder is marked as "Required", so it is a bit annoying.
> 
> My understanding from the previous discussion about the supported
> platforms is that any build is required.
> The osx is there as I reminder to run the buildbot tests and not to
> merge a PR with only Travis and Appveyor.
> 
> I have reconfigured GitHub to require  ubuntu16.04-py2.7-coverage as
> this is backed by 3 slaves.

Primarily it's required because it's the only reasonable way we have to verify that things work on macOS, which is by far our most popular developer operating system.  I've reverted this configuration change, since it's more reasonable to give the reviewers some discretion about the fact that Travis is representative of Linux than that a random assortment of non-macOS buildbots are representative of macOS.

> We have the circle-ci macOS and for the next  2 days, we can use that :)
> We are already used 55% of the macOS time and Circle-CI was enalbled
> in trunk in the last 2 days...so I don't think that we can use
> Circle-CI for macOS for the long term.
> I will write them to see if we can get an exception or a discount.

I would definitely like it if we could move to something hosted :).

> Otherwise, I plan to rent a macOS  so that it can act as a second
> slave for osx10.10-py2.7
> So far, the support from macincloud was not helpful or friendly, but I
> guess that we can just try their service for 1 month and see how it
> goes.

Bummer.  This seems like the sort of thing that we should have the Conservancy pay for, rather than you personally.  Better yet, of course, to get a commercially interested macOS user to supply some hardware or mac cloud boxes or something.

Alternately...

The reason we're doing this at all is that Travis's macOS situation was pretty dismal when we last tried it.  But then, the graphs on https://www.traviscistatus.com <https://www.traviscistatus.com/> at the time matched that experience: routinely there were build queues in the hundreds.  Right now the "Backlog macOS Builds for Open Source Projects" shows a completely flat line, zero for the last 24 hours.

It might be worth trying out Travis again.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180325/f976871c/attachment.html>

From exarkun at twistedmatrix.com  Mon Mar 26 04:32:16 2018
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Mon, 26 Mar 2018 06:32:16 -0400
Subject: [Twisted-Python] Problem with osx10.10-py2.7 builder
In-Reply-To: <B5B15382-9E5F-4DA0-B058-DDFB6F470570@twistedmatrix.com>
References: <CAG=rPVeZHjmw2RuFuzbf3jR9j=WPNsmkrGM+U9kzr7c68qTbjQ@mail.gmail.com>
 <CAFycZ9cnVeQcc3JxqNMjR9ki_S3PedS763LsbkcsYg0NO4L-zg@mail.gmail.com>
 <B5B15382-9E5F-4DA0-B058-DDFB6F470570@twistedmatrix.com>
Message-ID: <CAEeXt4NZL=XJ6yZRX2OtwYRHGBAft1Jn5O1t2q=Jw7f5+yHn4g@mail.gmail.com>

On Mon, Mar 26, 2018 at 2:58 AM, Glyph <glyph at twistedmatrix.com> wrote:

> Alternately...
>
> The reason we're doing this at all is that Travis's macOS situation was
> pretty dismal when we last tried it.  But then, the graphs on
> https://www.traviscistatus.com at the time matched that experience:
> routinely there were build queues in the hundreds.  Right now the "Backlog
> macOS Builds for Open Source Projects" shows a completely flat line, zero
> for the last 24 hours.
>
> It might be worth trying out Travis again.
>

FWIW, I moved another project's macOS CI from Travis to CircleCI about a
month ago because the Travis macOS job queue was so long.  Counting queue
time, CircleCI finishes those jobs around 6x faster than TravisCI.

Maybe things have improved on Travis but they're still pretty bad.

Jean-Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180326/334e6bf7/attachment.html>

From peter.westlake at pobox.com  Mon Mar 26 06:47:40 2018
From: peter.westlake at pobox.com (Peter Westlake)
Date: Mon, 26 Mar 2018 13:47:40 +0100
Subject: [Twisted-Python] Asynchronous code in a context manager
In-Reply-To: <86sh8q3f83.fsf@atlantis.meejah.ca>
References: <1521803817.3234826.1313425600.055CCD14@webmail.messagingengine.com>
 <86sh8q3f83.fsf@atlantis.meejah.ca>
Message-ID: <1522068460.1654826.1316230416.1DD2CED7@webmail.messagingengine.com>

Sadly, no. Should have said, sorry: it's 2.7.3.

Peter.

On Fri, 23 Mar 2018, at 17:54, meejah wrote:
> 
> Are you using Python3? Then there's "asynchronous context managers". I
> finally found a use-case for one in txtorcon, so here's an example:
> 
>    
> http://txtorcon.readthedocs.io/en/latest/txtorcon-controller.html#txtorcon.Tor.onion_authentication
> 
> -- 
> meejah
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From barry.scott at forcepoint.com  Mon Mar 26 08:47:00 2018
From: barry.scott at forcepoint.com (Barry Scott)
Date: Mon, 26 Mar 2018 15:47:00 +0100
Subject: [Twisted-Python] Strategy for finding source of unhandled error
	in Deferred
In-Reply-To: <CAEeXt4O8=qnLQ2DKPcyvwU57Ax_hdCpurUuMryA1UcuEC1T2hQ@mail.gmail.com>
References: <295015210.20180318160452@gmail.com>
 <CAEeXt4PYvQay7f6wPOb2HfFR7aMYPmJWj1c6E2JtTrRxyC_82Q@mail.gmail.com>
 <CAEeXt4O8=qnLQ2DKPcyvwU57Ax_hdCpurUuMryA1UcuEC1T2hQ@mail.gmail.com>
Message-ID: <2336641.NTemcomRiW@barry-scott-desktop>

On Sunday, 18 March 2018 15:23:58 BST Jean-Paul Calderone wrote:
> On Sun, Mar 18, 2018 at 11:21 AM, Jean-Paul Calderone <
> 
> exarkun at twistedmatrix.com> wrote:
> > On Sun, Mar 18, 2018 at 11:04 AM, Alex Railean <ralienpp at gmail.com> wrote:
> >> Hello,
> >> 
> >> I have inherited a misbehaving system and am trying to troubleshoot it.
> >> The code
> >> is not documented and I cannot produce a minimal working example that
> >> illustrates
> >> the problem yet, as I don't know which parts are involved and how they
> >> relate.
> > 
> > This produces the following entries in the log:
> >> Unhandled error in Deferred:
> >> CRITICAL _legacy       twcore Unhandled error in Deferred:
> >> 
> >> Traceback (most recent call last):
> >> Failure: __builtin__.type: <class 'twisted.internet.error.TimeoutError'>
> >> CRITICAL _legacy       twcore
> >> 
> >> 
> >> 
> >> How can I get more clues about what is going on? I was expecting a line
> >> number,
> >> or a complete call-stack.
> 
> Try this:
> 
>     from twisted.internet.defer import setDebugging
>     setDebugging(True)
> 
> This gives you creation and callback stacks in the logs.

If you need to track down who put the value into the deferred
you need to patch the defer.py code to log that info.

There are 2 places that a value enters the Deferred.
The first is the callback() call. The other is in

defer.py:653 Deffered._runCallbacks()

653:                        current.result = callback(current.result, *args, 
**kw)

Barry


> 
> Jean-Paul
> 
> >> What are the recommended troubleshooting steps for finding the Deferred
> >> in which
> >> the error occurred?  There are are around 30 of them throughout the code,
> >> is
> >> there a heuristic I can use to narrow down the list of suspects?
> >> 
> >> 
> >> 
> >> 
> >> 
> >> 
> >> 
> >> 
> >> _______________________________________________
> >> Twisted-Python mailing list
> >> Twisted-Python at twistedmatrix.com
> >> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python





From exarkun at twistedmatrix.com  Mon Mar 26 08:57:58 2018
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Mon, 26 Mar 2018 10:57:58 -0400
Subject: [Twisted-Python] Strategy for finding source of unhandled error
 in Deferred
In-Reply-To: <2336641.NTemcomRiW@barry-scott-desktop>
References: <295015210.20180318160452@gmail.com>
 <CAEeXt4PYvQay7f6wPOb2HfFR7aMYPmJWj1c6E2JtTrRxyC_82Q@mail.gmail.com>
 <CAEeXt4O8=qnLQ2DKPcyvwU57Ax_hdCpurUuMryA1UcuEC1T2hQ@mail.gmail.com>
 <2336641.NTemcomRiW@barry-scott-desktop>
Message-ID: <CAEeXt4O-DZ9NBuWd1uz8MFO=H4a9vVjWg=e31YDNhM+nRLcNeg@mail.gmail.com>

On Mon, Mar 26, 2018 at 10:47 AM, Barry Scott <barry.scott at forcepoint.com>
wrote:

> On Sunday, 18 March 2018 15:23:58 BST Jean-Paul Calderone wrote:
> >
> > Try this:
> >
> >     from twisted.internet.defer import setDebugging
> >     setDebugging(True)
> >
> > This gives you creation and callback stacks in the logs.
>
> If you need to track down who put the value into the deferred
> you need to patch the defer.py code to log that info.
>
> There are 2 places that a value enters the Deferred.
> The first is the callback() call. The other is in
>
> defer.py:653 Deffered._runCallbacks()
>
> 653:                        current.result = callback(current.result,
> *args,
> **kw)
>

No, you don't:

exarkun at baryon:/tmp$ cat deferreddebug.py
from twisted.internet.defer import fail, setDebugging
setDebugging(True)
def foo():
    return fail(Exception("boo"))
foo()
exarkun at baryon:/tmp$ python deferreddebug.py
Unhandled error in Deferred:
(debug:  C: Deferred was created:
 C:  File "deferreddebug.py", line 5, in <module>
 C:    foo()
 C:  File "deferreddebug.py", line 4, in foo
 C:    return fail(Exception("boo"))
 C:  File
"/home/exarkun/.local/lib/python2.7/site-packages/twisted/internet/defer.py",
line 106, in fail
 C:    d = Deferred()
 I: First Invoker was:
 I:  File "deferreddebug.py", line 5, in <module>
 I:    foo()
 I:  File "deferreddebug.py", line 4, in foo
 I:    return fail(Exception("boo"))
 I:  File
"/home/exarkun/.local/lib/python2.7/site-packages/twisted/internet/defer.py",
line 107, in fail
 I:    d.errback(result)
)
exarkun at baryon:/tmp$


Although it is true that you only get this behavior for the "Unhandled
error in Deferred" case.  If you explicitly log a Failure from a Deferred,
even with Deferred debugging on, you will not get a callstack for the
creator or invoker.  You'll just get whatever callstack the Failure has
(and the Failure is independent of the Deferred).

Jean-Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180326/d28abce9/attachment.html>

From veeresh at khanorkar.com  Mon Mar 26 12:36:56 2018
From: veeresh at khanorkar.com (Khanorkar, Veeresh)
Date: Mon, 26 Mar 2018 18:36:56 +0000
Subject: [Twisted-Python] Anonymous ESMTP Server
Message-ID: <CAN_99b+Eo13AJoACnCSju8EN+=j-aOzLRpnwpgaX2hBixqHepA@mail.gmail.com>

All,

In order to accomdate a very old system, I need to write anonymous esmtp
server.

Is a sample code available somewhere?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180326/26aad2d3/attachment.html>

From glyph at twistedmatrix.com  Mon Mar 26 23:39:21 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 26 Mar 2018 22:39:21 -0700
Subject: [Twisted-Python] Problem with osx10.10-py2.7 builder
In-Reply-To: <CAEeXt4NZL=XJ6yZRX2OtwYRHGBAft1Jn5O1t2q=Jw7f5+yHn4g@mail.gmail.com>
References: <CAG=rPVeZHjmw2RuFuzbf3jR9j=WPNsmkrGM+U9kzr7c68qTbjQ@mail.gmail.com>
 <CAFycZ9cnVeQcc3JxqNMjR9ki_S3PedS763LsbkcsYg0NO4L-zg@mail.gmail.com>
 <B5B15382-9E5F-4DA0-B058-DDFB6F470570@twistedmatrix.com>
 <CAEeXt4NZL=XJ6yZRX2OtwYRHGBAft1Jn5O1t2q=Jw7f5+yHn4g@mail.gmail.com>
Message-ID: <B00F7EB6-7D9E-4FF6-9488-479F19FB99C4@twistedmatrix.com>



> On Mar 26, 2018, at 3:32 AM, Jean-Paul Calderone <exarkun at twistedmatrix.com> wrote:
> 
> On Mon, Mar 26, 2018 at 2:58 AM, Glyph <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> Alternately...
> 
> The reason we're doing this at all is that Travis's macOS situation was pretty dismal when we last tried it.  But then, the graphs on https://www.traviscistatus.com <https://www.traviscistatus.com/> at the time matched that experience: routinely there were build queues in the hundreds.  Right now the "Backlog macOS Builds for Open Source Projects" shows a completely flat line, zero for the last 24 hours.
> 
> It might be worth trying out Travis again.
> 
> FWIW, I moved another project's macOS CI from Travis to CircleCI about a month ago because the Travis macOS job queue was so long.  Counting queue time, CircleCI finishes those jobs around 6x faster than TravisCI.
> 
> Maybe things have improved on Travis but they're still pretty bad.

That's a bummer, but thanks for providing the data point.

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180326/b7a7d7e0/attachment.html>

From palbrecht at glccom.com  Tue Mar 27 13:32:10 2018
From: palbrecht at glccom.com (Paul Albrecht)
Date: Tue, 27 Mar 2018 19:32:10 +0000
Subject: [Twisted-Python] twistd script python path
Message-ID: <3B09F76B-0AF7-4D7D-AC60-0F751551D696@glccom.com>

Hi,

I'm trying to debug a memory leak in a twisted application and I’d like to use tracemalloc. Unfortunately, the application hasn’t been updated to python 3 so I have to patch python 2.7. Here’s my problem: After downloading and compiling python in /usr/local, I tried running my twisted application with the twistd in /usr/local, but it uses the python in /usr/bin. My question: How do I get twistd to use the python in /usr/local? 

From glyph at twistedmatrix.com  Tue Mar 27 16:54:10 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 27 Mar 2018 15:54:10 -0700
Subject: [Twisted-Python] Problem with osx10.10-py2.7 builder
In-Reply-To: <B00F7EB6-7D9E-4FF6-9488-479F19FB99C4@twistedmatrix.com>
References: <CAG=rPVeZHjmw2RuFuzbf3jR9j=WPNsmkrGM+U9kzr7c68qTbjQ@mail.gmail.com>
 <CAFycZ9cnVeQcc3JxqNMjR9ki_S3PedS763LsbkcsYg0NO4L-zg@mail.gmail.com>
 <B5B15382-9E5F-4DA0-B058-DDFB6F470570@twistedmatrix.com>
 <CAEeXt4NZL=XJ6yZRX2OtwYRHGBAft1Jn5O1t2q=Jw7f5+yHn4g@mail.gmail.com>
 <B00F7EB6-7D9E-4FF6-9488-479F19FB99C4@twistedmatrix.com>
Message-ID: <1522191250.3622996.1318320048.778C9DEB@webmail.messagingengine.com>




On Mon, Mar 26, 2018, at 10:39 PM, Glyph wrote:
> 
> 
>> On Mar 26, 2018, at 3:32 AM, Jean-Paul Calderone
>> <exarkun at twistedmatrix.com> wrote:>> 
>> On Mon, Mar 26, 2018 at 2:58 AM, Glyph
>> <glyph at twistedmatrix.com> wrote:>>> Alternately...
>>> 
>>> The reason we're doing this at all is that Travis's macOS situation
>>> was pretty dismal when we last tried it.  But then, the graphs on
>>> https://www.traviscistatus.com[1] at the time matched that
>>> experience: routinely there were build queues in the hundreds.
>>> Right now the "Backlog macOS Builds for Open Source Projects" shows
>>> a completely flat line, zero for the last 24 hours.>>> 
>>> It might be worth trying out Travis again.
>> 
>> FWIW, I moved another project's macOS CI from Travis to CircleCI
>> about a month ago because the Travis macOS job queue was so long.
>> Counting queue time, CircleCI finishes those jobs around 6x faster
>> than TravisCI.>> 
>> Maybe things have improved on Travis but they're still pretty bad.
> 
> That's a bummer, but thanks for providing the data point.
> 
> -g


I guess I just needed to look during the PST workday... 
 


Links:

  1. https://www.traviscistatus.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180327/53a7a541/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: image.png
Type: image/png
Size: 23592 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20180327/53a7a541/attachment-0001.png>

From twisted-python at 2xlp.com  Wed Mar 28 13:56:05 2018
From: twisted-python at 2xlp.com (jonathan vanasco)
Date: Wed, 28 Mar 2018 15:56:05 -0400
Subject: [Twisted-Python] twistd script python path
In-Reply-To: <3B09F76B-0AF7-4D7D-AC60-0F751551D696@glccom.com>
References: <3B09F76B-0AF7-4D7D-AC60-0F751551D696@glccom.com>
Message-ID: <36C923B4-1118-453E-A1E4-FA236A6AD671@2xlp.com>


> On Mar 27, 2018, at 3:32 PM, Paul Albrecht <palbrecht at glccom.com> wrote:
> 
> I'm trying to debug a memory leak in a twisted application and I’d like to use tracemalloc. Unfortunately, the application hasn’t been updated to python 3 so I have to patch python 2.7. Here’s my problem: After downloading and compiling python in /usr/local, I tried running my twisted application with the twistd in /usr/local, but it uses the python in /usr/bin. My question: How do I get twistd to use the python in /usr/local? 

for this sort of stuff I just use a virtualenv created with an explicit python:

something like this:

	iPood:~ jonathan$ virtualenv —python=/usr/local/python issue-debug-venv
	iPood:~ jonathan$ source issue-debug-venv/bin/activate
	(issue-debug-venv) iPoodd:~ jonathan$ pip install {{twisted version}}

that should install a twistd into `issue-debug-venv/bin` which uses the specified virtualenv. 



From twotonespirit at gmail.com  Sat Mar  3 15:38:14 2018
From: twotonespirit at gmail.com (Justin Myles Holmes)
Date: Sat, 3 Mar 2018 14:38:14 -0800
Subject: [Twisted-Python] Does Twisted support ECC for TLS?
Message-ID: <CAMGywB5vB+NiTUdVbgfwfkMdr93mu0MEc=s001VcvxDxPiaGFg@mail.gmail.com>

I'm trying to bend a little bit of custom TLS - one possible use case for
me is a HendrixDeploy object which uses an ethereum keypair to self-sign a
certificate.

So I'm wondering: is it currently possible to use an ECC keypair for TLS
with Twisted?

Here's what I've discovered:

twisted.internet.sssl.ContextFactory has a method, use_privatekey().  This
thing wants an OpenSSL.crypto.PKey object.  And, lo and behold, PKey offers
a facility, from_cryptography_key(), which attempts to use a key from
cryptography.io, from whence I'm generating keys anyway.  However, it
expects an RSA or DSA key, not an EC or ECDSA key.

Glyph suggested that, instead of trying to handle PKeys myself, I might try
loading PEM files with txsni or the like.

I can actually get txsni to work with my cert/keypair, but I don't seem to
be able to get a client to connect.  For example, Firefox tells me
"SSL_ERROR_NO_CYPHER_OVERLAP".

I tried the same things with SSL4ServerEndpoint, and I get exactly the same
thing - my protocol's dataReceived method is never run, no output appears
in the console, but the client gets this same error.

I notice that there's an issue on PyOpenSSL which appears to address this:


-- 
Justin Myles Holmes
justinholmes.com
thisisthebus.com
github.com/jMyles/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180303/115af3db/attachment-0002.html>

From glyph at twistedmatrix.com  Sat Mar  3 20:06:15 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 3 Mar 2018 19:06:15 -0800
Subject: [Twisted-Python] Does Twisted support ECC for TLS?
In-Reply-To: <CAMGywB5vB+NiTUdVbgfwfkMdr93mu0MEc=s001VcvxDxPiaGFg@mail.gmail.com>
References: <CAMGywB5vB+NiTUdVbgfwfkMdr93mu0MEc=s001VcvxDxPiaGFg@mail.gmail.com>
Message-ID: <83B93268-D5EF-4ED3-8896-7498DD372AE5@twistedmatrix.com>



> On Mar 3, 2018, at 2:38 PM, Justin Myles Holmes <twotonespirit at gmail.com> wrote:
> 
> I'm trying to bend a little bit of custom TLS - one possible use case for me is a HendrixDeploy object which uses an ethereum keypair to self-sign a certificate.
> 
> So I'm wondering: is it currently possible to use an ECC keypair for TLS with Twisted? 
> 
> Here's what I've discovered:
> 
> twisted.internet.sssl.ContextFactory has a method, use_privatekey().  This thing wants an OpenSSL.crypto.PKey object.  And, lo and behold, PKey offers a facility, from_cryptography_key(), which attempts to use a key from cryptography.io <http://cryptography.io/>, from whence I'm generating keys anyway.  However, it expects an RSA or DSA key, not an EC or ECDSA key.
> 
> Glyph suggested that, instead of trying to handle PKeys myself, I might try loading PEM files with txsni or the like.
> 
> I can actually get txsni to work with my cert/keypair, but I don't seem to be able to get a client to connect.  For example, Firefox tells me "SSL_ERROR_NO_CYPHER_OVERLAP".
> 
> I tried the same things with SSL4ServerEndpoint, and I get exactly the same thing - my protocol's dataReceived method is never run, no output appears in the console, but the client gets this same error.
> 
> I notice that there's an issue on PyOpenSSL which appears to address this:

Looks like your message was truncated before getting to the link :-).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180303/d8ebbf5c/attachment-0002.html>

From twotonespirit at gmail.com  Sat Mar  3 21:14:49 2018
From: twotonespirit at gmail.com (Justin Myles Holmes)
Date: Sat, 3 Mar 2018 20:14:49 -0800
Subject: [Twisted-Python] Does Twisted support ECC for TLS?
In-Reply-To: <83B93268-D5EF-4ED3-8896-7498DD372AE5@twistedmatrix.com>
References: <CAMGywB5vB+NiTUdVbgfwfkMdr93mu0MEc=s001VcvxDxPiaGFg@mail.gmail.com>
 <83B93268-D5EF-4ED3-8896-7498DD372AE5@twistedmatrix.com>
Message-ID: <CAMGywB6NheSyc5iTFW2zMG+HdxF_=jZwd=TO1NxMzkuzpTXt-w@mail.gmail.com>

Righto!

I notice that there's an issue on PyOpenSSL which appears to address this:

https://github.com/pyca/pyopenssl/pull/636

However, it's not clear that this actually moves the issue forward, as it
only provides for getting a PKey from a cryptography EC key, not for
actually using it for TLS.

One interesting tidbit I've noticed is that txsni does appear to support
TLS with ciphers that use SECP256R1 (also called "NIST P-256" - a curve of
questionable parentage), but not SECP256K1 (a curve used by several
prominent blockchain projects).

I'm not entirely sure where to turn next.



On Sat, Mar 3, 2018 at 7:06 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
>
> On Mar 3, 2018, at 2:38 PM, Justin Myles Holmes <twotonespirit at gmail.com>
> wrote:
>
> I'm trying to bend a little bit of custom TLS - one possible use case for
> me is a HendrixDeploy object which uses an ethereum keypair to self-sign a
> certificate.
>
> So I'm wondering: is it currently possible to use an ECC keypair for TLS
> with Twisted?
>
> Here's what I've discovered:
>
> twisted.internet.sssl.ContextFactory has a method, use_privatekey().
> This thing wants an OpenSSL.crypto.PKey object.  And, lo and behold, PKey
> offers a facility, from_cryptography_key(), which attempts to use a key
> from cryptography.io, from whence I'm generating keys anyway.  However,
> it expects an RSA or DSA key, not an EC or ECDSA key.
>
> Glyph suggested that, instead of trying to handle PKeys myself, I might
> try loading PEM files with txsni or the like.
>
> I can actually get txsni to work with my cert/keypair, but I don't seem to
> be able to get a client to connect.  For example, Firefox tells me
> "SSL_ERROR_NO_CYPHER_OVERLAP".
>
> I tried the same things with SSL4ServerEndpoint, and I get exactly the
> same thing - my protocol's dataReceived method is never run, no output
> appears in the console, but the client gets this same error.
>
> I notice that there's an issue on PyOpenSSL which appears to address this:
>
>
> Looks like your message was truncated before getting to the link :-).
>
> -glyph
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
Justin Myles Holmes
justinholmes.com
thisisthebus.com
github.com/jMyles/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180303/6d3900e0/attachment-0002.html>

From twotonespirit at gmail.com  Sat Mar  3 23:31:49 2018
From: twotonespirit at gmail.com (Justin Myles Holmes)
Date: Sat, 3 Mar 2018 22:31:49 -0800
Subject: [Twisted-Python] Does Twisted support ECC for TLS?
In-Reply-To: <CAMGywB6NheSyc5iTFW2zMG+HdxF_=jZwd=TO1NxMzkuzpTXt-w@mail.gmail.com>
References: <CAMGywB5vB+NiTUdVbgfwfkMdr93mu0MEc=s001VcvxDxPiaGFg@mail.gmail.com>
 <83B93268-D5EF-4ED3-8896-7498DD372AE5@twistedmatrix.com>
 <CAMGywB6NheSyc5iTFW2zMG+HdxF_=jZwd=TO1NxMzkuzpTXt-w@mail.gmail.com>
Message-ID: <CAMGywB5cFuMJJGEaf2uktdb8YddjHfrUvvApeT2QVpjFa=QTOw@mail.gmail.com>

OK, I think I've got it figured out, but I'm still not sure what to do
about it.

In twisted.internet._sslverify.py, there's:

_defaultCurveName = u"prime256v1"

Then, later, this curve is set as self.ecCurve on
OpenSSLCertificateOptions.  There appears to be no way to change this, but
of course "prime256v1" is not the curve I want.

There was a PR recently merged - #928, which uses a PyOpenSSL curve instead
of the proxy class which existed prior.  However, it still doesn't allow me
to pass a curve name or nid - how can I specify a curve of my choice?

On Sat, Mar 3, 2018 at 8:14 PM, Justin Myles Holmes <twotonespirit at gmail.com
> wrote:

> Righto!
>
> I notice that there's an issue on PyOpenSSL which appears to address this:
>
> https://github.com/pyca/pyopenssl/pull/636
>
> However, it's not clear that this actually moves the issue forward, as it
> only provides for getting a PKey from a cryptography EC key, not for
> actually using it for TLS.
>
> One interesting tidbit I've noticed is that txsni does appear to support
> TLS with ciphers that use SECP256R1 (also called "NIST P-256" - a curve of
> questionable parentage), but not SECP256K1 (a curve used by several
> prominent blockchain projects).
>
> I'm not entirely sure where to turn next.
>
>
>
> On Sat, Mar 3, 2018 at 7:06 PM, Glyph <glyph at twistedmatrix.com> wrote:
>
>>
>>
>> On Mar 3, 2018, at 2:38 PM, Justin Myles Holmes <twotonespirit at gmail.com>
>> wrote:
>>
>> I'm trying to bend a little bit of custom TLS - one possible use case for
>> me is a HendrixDeploy object which uses an ethereum keypair to self-sign a
>> certificate.
>>
>> So I'm wondering: is it currently possible to use an ECC keypair for TLS
>> with Twisted?
>>
>> Here's what I've discovered:
>>
>> twisted.internet.sssl.ContextFactory has a method, use_privatekey().
>> This thing wants an OpenSSL.crypto.PKey object.  And, lo and behold, PKey
>> offers a facility, from_cryptography_key(), which attempts to use a key
>> from cryptography.io, from whence I'm generating keys anyway.  However,
>> it expects an RSA or DSA key, not an EC or ECDSA key.
>>
>> Glyph suggested that, instead of trying to handle PKeys myself, I might
>> try loading PEM files with txsni or the like.
>>
>> I can actually get txsni to work with my cert/keypair, but I don't seem
>> to be able to get a client to connect.  For example, Firefox tells me
>> "SSL_ERROR_NO_CYPHER_OVERLAP".
>>
>> I tried the same things with SSL4ServerEndpoint, and I get exactly the
>> same thing - my protocol's dataReceived method is never run, no output
>> appears in the console, but the client gets this same error.
>>
>> I notice that there's an issue on PyOpenSSL which appears to address this:
>>
>>
>> Looks like your message was truncated before getting to the link :-).
>>
>> -glyph
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
>
> --
> Justin Myles Holmes
> justinholmes.com
> thisisthebus.com
> github.com/jMyles/
>



-- 
Justin Myles Holmes
justinholmes.com
thisisthebus.com
github.com/jMyles/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180303/d0c46fb3/attachment-0002.html>

From trac at twistedmatrix.com  Sun Mar  4 00:05:40 2018
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 04 Mar 2018 07:05:40 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1520147140.34.9131413427874854338@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180304/f10716df/attachment-0002.html>

From wiml at omnigroup.com  Tue Mar  6 13:20:36 2018
From: wiml at omnigroup.com (Wim Lewis)
Date: Tue, 6 Mar 2018 12:20:36 -0800
Subject: [Twisted-Python] INCOMPATIBLE CHANGE: Removal of
	t.c.ssh.filetransfer.FileTransferClient.wasAFile
Message-ID: <999EECC6-25E7-4F29-B7D2-3CBC6A9E2D0F@omnigroup.com>

In PR 949 ("Remove “terrible hack” in t.c.ssh.filetransfer.FileTransferClient", trac bug 9362) I'm removing an attribute of FileTransferClient which I'm pretty sure was never intended to be public. Adi Roiban points out that this is technically a compatibility-breaking change, though, and so it needs more public review.

My reasoning for thinking that this will not break any user code: the attribute, although not prefixed with an underscore, was undocumented; anyone relying on it would have had to read the source code to discover what it does, and in the source it was commented as a "TERRIBLE HACK". I'd hope this would be enough of a warning. (Also, I can't think of a use for it.)

trac: https://twistedmatrix.com/trac/ticket/9362
pr: https://github.com/twisted/twisted/pull/949




From adi at roiban.ro  Wed Mar  7 03:12:53 2018
From: adi at roiban.ro (Adi Roiban)
Date: Wed, 7 Mar 2018 10:12:53 +0000
Subject: [Twisted-Python] INCOMPATIBLE CHANGE: Removal of
	t.c.ssh.filetransfer.FileTransferClient.wasAFile
In-Reply-To: <999EECC6-25E7-4F29-B7D2-3CBC6A9E2D0F@omnigroup.com>
References: <999EECC6-25E7-4F29-B7D2-3CBC6A9E2D0F@omnigroup.com>
Message-ID: <CAFycZ9eNLOPEtGL=H97peeQg938TjGutmbDMr8sTADdx-w_b_g@mail.gmail.com>

Hi,

Thank you so much Wim for helping with this cleanup.

As commented in the PR I am +1 for this exceptions.

Cheers,
Adi

On 6 March 2018 at 20:20, Wim Lewis <wiml at omnigroup.com> wrote:
> In PR 949 ("Remove “terrible hack” in t.c.ssh.filetransfer.FileTransferClient", trac bug 9362) I'm removing an attribute of FileTransferClient which I'm pretty sure was never intended to be public. Adi Roiban points out that this is technically a compatibility-breaking change, though, and so it needs more public review.
>
> My reasoning for thinking that this will not break any user code: the attribute, although not prefixed with an underscore, was undocumented; anyone relying on it would have had to read the source code to discover what it does, and in the source it was commented as a "TERRIBLE HACK". I'd hope this would be enough of a warning. (Also, I can't think of a use for it.)
>
> trac: https://twistedmatrix.com/trac/ticket/9362
> pr: https://github.com/twisted/twisted/pull/949
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



-- 
Adi Roiban



From ilyaskriblovsky at gmail.com  Fri Mar  9 05:03:25 2018
From: ilyaskriblovsky at gmail.com (Ilya Skriblovsky)
Date: Fri, 09 Mar 2018 12:03:25 +0000
Subject: [Twisted-Python] Circular references in TLSMemoryBIOProtocol
In-Reply-To: <C3E8F5B0-BAD1-4077-B15B-A96D2C361AC1@twistedmatrix.com>
References: <CAOG7vkw5GSRcz=SPQMoiF+sFy3e-WsW2f3n7nwH0mGMtgTzudA@mail.gmail.com>
 <CAOG7vkyoPvvppR-6MivPhD86vnW9QYsAshBw2G4-E38uN9eZWA@mail.gmail.com>
 <B6CD6518-1407-449E-B347-C0FF54E77381@twistedmatrix.com>
 <CAOG7vkx+mApGk0dsd1vn8SXGSDZrqaWtA=4kqih901-XZ2ru+g@mail.gmail.com>
 <5C0AD3B3-C328-4057-B268-B01A7D811784@twistedmatrix.com>
 <CAOG7vkxSj++9WPM0Ukb-siM8ZaQPAEP0otpB0eFsNqK0HCXB=g@mail.gmail.com>
 <3F914B30-7F46-4753-9789-C32F19BF891D@twistedmatrix.com>
 <CAOG7vkyDLtjGJpm3UH3T2xxfwSFJepqByZ4+HSkbv9Ug4=vRDg@mail.gmail.com>
 <CAOG7vky7Lh3VLqPM0fOKktU9ua3_Wukx7k-Og_URZEqodBKuUw@mail.gmail.com>
 <C3E8F5B0-BAD1-4077-B15B-A96D2C361AC1@twistedmatrix.com>
Message-ID: <CAOG7vkx-WtvqqwV6dGX7na__o8PpKjnFdY-CtJqkrdDqSRizMQ@mail.gmail.com>

Just wanted to make sure, did I all what I should do for putting this
ticket into review: https://twistedmatrix.com/trac/ticket/9374 ?
Should I just wait for maintainers to review it?

Thanks

вт, 30 янв. 2018 г. в 6:28, Glyph <glyph at twistedmatrix.com>:

>
>
> On Jan 29, 2018, at 12:27 PM, Ilya Skriblovsky <ilyaskriblovsky at gmail.com>
> wrote:
>
> Never mind, I realized I didn't some steps 10+ from The Manual
> http://twistedmatrix.com/trac/wiki/TwistedDevelopment#SubmittingaPatch
> Will fix that
>
> No worries, the process is always a little tricky the first time :-).
>
> Thanks for contributing!
>
> -g
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180309/0b0a69ab/attachment-0002.html>

From glyph at twistedmatrix.com  Fri Mar  9 21:57:41 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 9 Mar 2018 20:57:41 -0800
Subject: [Twisted-Python] Circular references in TLSMemoryBIOProtocol
In-Reply-To: <CAOG7vkx-WtvqqwV6dGX7na__o8PpKjnFdY-CtJqkrdDqSRizMQ@mail.gmail.com>
References: <CAOG7vkw5GSRcz=SPQMoiF+sFy3e-WsW2f3n7nwH0mGMtgTzudA@mail.gmail.com>
 <CAOG7vkyoPvvppR-6MivPhD86vnW9QYsAshBw2G4-E38uN9eZWA@mail.gmail.com>
 <B6CD6518-1407-449E-B347-C0FF54E77381@twistedmatrix.com>
 <CAOG7vkx+mApGk0dsd1vn8SXGSDZrqaWtA=4kqih901-XZ2ru+g@mail.gmail.com>
 <5C0AD3B3-C328-4057-B268-B01A7D811784@twistedmatrix.com>
 <CAOG7vkxSj++9WPM0Ukb-siM8ZaQPAEP0otpB0eFsNqK0HCXB=g@mail.gmail.com>
 <3F914B30-7F46-4753-9789-C32F19BF891D@twistedmatrix.com>
 <CAOG7vkyDLtjGJpm3UH3T2xxfwSFJepqByZ4+HSkbv9Ug4=vRDg@mail.gmail.com>
 <CAOG7vky7Lh3VLqPM0fOKktU9ua3_Wukx7k-Og_URZEqodBKuUw@mail.gmail.com>
 <C3E8F5B0-BAD1-4077-B15B-A96D2C361AC1@twistedmatrix.com>
 <CAOG7vkx-WtvqqwV6dGX7na__o8PpKjnFdY-CtJqkrdDqSRizMQ@mail.gmail.com>
Message-ID: <C18396BB-6E18-46F0-A00B-B0C1FB6321EE@twistedmatrix.com>

On Mar 9, 2018, at 4:03 AM, Ilya Skriblovsky <ilyaskriblovsky at gmail.com> wrote:
> 
> Just wanted to make sure, did I all what I should do for putting this ticket into review: https://twistedmatrix.com/trac/ticket/9374 <https://twistedmatrix.com/trac/ticket/9374> ?
> Should I just wait for maintainers to review it?

You've done all the right things. :)

Twisted maintainers go through the list at https://twisted.reviews <https://twisted.reviews/> and review things, and you can indeed see that your change is on that list.

Unfortunately, as you can see, there's quite a backlog.  Personally I have been quite busy with a new child and a new startup, so (as previously discussed on this very mailing list) I haven't been doing much in the way of code review myself recently.  Even what little open source time I have needs to be focused elsewhere at the moment.

The best thing you can do to accelerate your own change getting reviewed is to code review others' changes, so that when a reviewer arrives to stochastically select something to review it is more likely that they'll select your thing instead of one of the other things :-).

The second best thing you can do is to donate a lot of money using the form on the front page of the web site: https://twistedmatrix.com/trac/#DonatetoTwisted <https://twistedmatrix.com/trac/#DonatetoTwisted>, which, at some point, will allow us to re-start the Twisted fellowship program http://labs.twistedmatrix.com/2015/06/twisted-fellowship-2015-call-for.html <http://labs.twistedmatrix.com/2015/06/twisted-fellowship-2015-call-for.html> and have someone actually keep the review queue clear as their actual paid responsibility :).

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180309/5585a140/attachment-0002.html>

From adi at roiban.ro  Sat Mar 10 01:49:34 2018
From: adi at roiban.ro (Adi Roiban)
Date: Sat, 10 Mar 2018 08:49:34 +0000
Subject: [Twisted-Python] Circular references in TLSMemoryBIOProtocol
In-Reply-To: <C18396BB-6E18-46F0-A00B-B0C1FB6321EE@twistedmatrix.com>
References: <CAOG7vkw5GSRcz=SPQMoiF+sFy3e-WsW2f3n7nwH0mGMtgTzudA@mail.gmail.com>
 <CAOG7vkyoPvvppR-6MivPhD86vnW9QYsAshBw2G4-E38uN9eZWA@mail.gmail.com>
 <B6CD6518-1407-449E-B347-C0FF54E77381@twistedmatrix.com>
 <CAOG7vkx+mApGk0dsd1vn8SXGSDZrqaWtA=4kqih901-XZ2ru+g@mail.gmail.com>
 <5C0AD3B3-C328-4057-B268-B01A7D811784@twistedmatrix.com>
 <CAOG7vkxSj++9WPM0Ukb-siM8ZaQPAEP0otpB0eFsNqK0HCXB=g@mail.gmail.com>
 <3F914B30-7F46-4753-9789-C32F19BF891D@twistedmatrix.com>
 <CAOG7vkyDLtjGJpm3UH3T2xxfwSFJepqByZ4+HSkbv9Ug4=vRDg@mail.gmail.com>
 <CAOG7vky7Lh3VLqPM0fOKktU9ua3_Wukx7k-Og_URZEqodBKuUw@mail.gmail.com>
 <C3E8F5B0-BAD1-4077-B15B-A96D2C361AC1@twistedmatrix.com>
 <CAOG7vkx-WtvqqwV6dGX7na__o8PpKjnFdY-CtJqkrdDqSRizMQ@mail.gmail.com>
 <C18396BB-6E18-46F0-A00B-B0C1FB6321EE@twistedmatrix.com>
Message-ID: <CAFycZ9eFRmxD0uWGOK5+mWH_at09hhi33x98_0giexYOAddRPg@mail.gmail.com>

On 10 March 2018 at 04:57, Glyph <glyph at twistedmatrix.com> wrote:
> On Mar 9, 2018, at 4:03 AM, Ilya Skriblovsky <ilyaskriblovsky at gmail.com>
> wrote:
>
>
> Just wanted to make sure, did I all what I should do for putting this ticket
> into review: https://twistedmatrix.com/trac/ticket/9374 ?
> Should I just wait for maintainers to review it?
>
>
> You've done all the right things. :)

I went for an initial review.

> The best thing you can do to accelerate your own change getting reviewed is
> to code review others' changes, so that when a reviewer arrives to
> stochastically select something to review it is more likely that they'll
> select your thing instead of one of the other things :-).

+1

I am thinking of adding this to the wiki page for the review process.

I think that we can try and see how it goes.

Doing a review is not easy, you end up with the responsibility for the
approved code, but with the size of the queue I think that we should
try.

> The second best thing you can do is to donate a lot of money using the form
> on the front page of the web site:
> https://twistedmatrix.com/trac/#DonatetoTwisted, which, at some point, will
> allow us to re-start the Twisted fellowship program
> http://labs.twistedmatrix.com/2015/06/twisted-fellowship-2015-call-for.html
> and have someone actually keep the review queue clear as their actual paid
> responsibility :).

> -g

+1 on this.
I think that it might work even if we get someone to work on this 1
hour per day.

Glyph, do you know what is the required money we need to raise to
start this program... and are the current money on bank now?

Thanks!
-- 
Adi Roiban



From ilyaskriblovsky at gmail.com  Sat Mar 10 14:05:49 2018
From: ilyaskriblovsky at gmail.com (Ilya Skriblovsky)
Date: Sat, 10 Mar 2018 21:05:49 +0000
Subject: [Twisted-Python] Circular references in TLSMemoryBIOProtocol
In-Reply-To: <C18396BB-6E18-46F0-A00B-B0C1FB6321EE@twistedmatrix.com>
References: <CAOG7vkw5GSRcz=SPQMoiF+sFy3e-WsW2f3n7nwH0mGMtgTzudA@mail.gmail.com>
 <CAOG7vkyoPvvppR-6MivPhD86vnW9QYsAshBw2G4-E38uN9eZWA@mail.gmail.com>
 <B6CD6518-1407-449E-B347-C0FF54E77381@twistedmatrix.com>
 <CAOG7vkx+mApGk0dsd1vn8SXGSDZrqaWtA=4kqih901-XZ2ru+g@mail.gmail.com>
 <5C0AD3B3-C328-4057-B268-B01A7D811784@twistedmatrix.com>
 <CAOG7vkxSj++9WPM0Ukb-siM8ZaQPAEP0otpB0eFsNqK0HCXB=g@mail.gmail.com>
 <3F914B30-7F46-4753-9789-C32F19BF891D@twistedmatrix.com>
 <CAOG7vkyDLtjGJpm3UH3T2xxfwSFJepqByZ4+HSkbv9Ug4=vRDg@mail.gmail.com>
 <CAOG7vky7Lh3VLqPM0fOKktU9ua3_Wukx7k-Og_URZEqodBKuUw@mail.gmail.com>
 <C3E8F5B0-BAD1-4077-B15B-A96D2C361AC1@twistedmatrix.com>
 <CAOG7vkx-WtvqqwV6dGX7na__o8PpKjnFdY-CtJqkrdDqSRizMQ@mail.gmail.com>
 <C18396BB-6E18-46F0-A00B-B0C1FB6321EE@twistedmatrix.com>
Message-ID: <CAOG7vkysBTH8r_zjaZB9nFKDQwNrUKkinPttcrnEQb2aX3naiQ@mail.gmail.com>

> You've done all the right things. :)

Thanks for clarifications and congrats on your newborn!

сб, 10 мар. 2018 г. в 7:58, Glyph <glyph at twistedmatrix.com>:

> On Mar 9, 2018, at 4:03 AM, Ilya Skriblovsky <ilyaskriblovsky at gmail.com>
> wrote:
>
>
> Just wanted to make sure, did I all what I should do for putting this
> ticket into review: https://twistedmatrix.com/trac/ticket/9374 ?
> Should I just wait for maintainers to review it?
>
>
> You've done all the right things. :)
>
> Twisted maintainers go through the list at https://twisted.reviews and
> review things, and you can indeed see that your change is on that list.
>
> Unfortunately, as you can see, there's quite a backlog.  Personally I have
> been quite busy with a new child and a new startup, so (as previously
> discussed on this very mailing list) I haven't been doing much in the way
> of code review myself recently.  Even what little open source time I have
> needs to be focused elsewhere at the moment.
>
> The best thing you can do to accelerate your own change getting reviewed
> is to code review others' changes, so that when a reviewer arrives to
> stochastically select something to review it is more likely that they'll
> select your thing instead of one of the other things :-).
>
> The second best thing you can do is to donate a lot of money using the
> form on the front page of the web site:
> https://twistedmatrix.com/trac/#DonatetoTwisted, which, at some point,
> will allow us to re-start the Twisted fellowship program
> http://labs.twistedmatrix.com/2015/06/twisted-fellowship-2015-call-for.html and
> have someone actually keep the review queue clear as their actual paid
> responsibility :).
>
> -g
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180310/84f7af69/attachment-0002.html>

From trac at twistedmatrix.com  Sun Mar 11 00:05:29 2018
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 11 Mar 2018 07:05:29 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1520751929.58.5450280955943677827@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180311/c0c9f393/attachment-0002.html>

From adi at roiban.ro  Mon Mar 12 05:59:49 2018
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 12 Mar 2018 11:59:49 +0000
Subject: [Twisted-Python] List of required builds before a merge
Message-ID: <CAFycZ9eFeX0BnoqDYXToOFQDMBRvAHa=5mjxes4=YTKpbxVg4g@mail.gmail.com>

Hi,

It is not clear to me what builders need to pass before we can merge something.

I expect that all supported "platforms" need to pass, but it is not
clear what are the currently supported platforms.

We have this info in the wiki but it does not help.
https://twistedmatrix.com/trac/wiki/ReviewProcess#Authors:Howtomergethechangetotrunk

In GitHub I can see Travis / Appveyor and OSX from Buildot as "Required"

Is that all?

----------

If I check the "supported" group in Buildbot, I see many more builders.
The problem is that a significant number of slaves are down and those
builders are not available.

--------

Is Fedora still supported and required?

-------

I suggest to use GitHub "Required" marker to document what platforms
are supported.

We don't have time to maintain the infrastructure, so I suggest to
drop support for anything that is not supported by Travis and
Appveyor.

I know that this might be disruptive.
I think that we need it in order to raise awareness that supporting a
platform is not easy.
If someone (including me) cares about a platform they should find a
way to help to project supporting that platform.

What do you think?
-- 
Adi Roiban



From exarkun at twistedmatrix.com  Mon Mar 12 06:14:55 2018
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Mon, 12 Mar 2018 08:14:55 -0400
Subject: [Twisted-Python] List of required builds before a merge
In-Reply-To: <CAFycZ9eFeX0BnoqDYXToOFQDMBRvAHa=5mjxes4=YTKpbxVg4g@mail.gmail.com>
References: <CAFycZ9eFeX0BnoqDYXToOFQDMBRvAHa=5mjxes4=YTKpbxVg4g@mail.gmail.com>
Message-ID: <CAEeXt4P2-ah8X5GXOaTsqA0MFvnvDX3K5rqZf3HGEKdCnnzOEw@mail.gmail.com>

On Mon, Mar 12, 2018 at 7:59 AM, Adi Roiban <adi at roiban.ro> wrote:

> Hi,
>
> It is not clear to me what builders need to pass before we can merge
> something.
>
> I expect that all supported "platforms" need to pass, but it is not
> clear what are the currently supported platforms.
>
> We have this info in the wiki but it does not help.
> https://twistedmatrix.com/trac/wiki/ReviewProcess#Authors:
> Howtomergethechangetotrunk
>
> In GitHub I can see Travis / Appveyor and OSX from Buildot as "Required"
>
> Is that all?
>
> ----------
>
> If I check the "supported" group in Buildbot, I see many more builders.
> The problem is that a significant number of slaves are down and those
> builders are not available.
>
> --------
>
> Is Fedora still supported and required?
>
> -------
>
> I suggest to use GitHub "Required" marker to document what platforms
> are supported.
>
> We don't have time to maintain the infrastructure, so I suggest to
> drop support for anything that is not supported by Travis and
> Appveyor.
>

It would help to have a list of what coverage this would remove.  What
platforms are only covered by Travis and Appveyor?   What tests are only
run there?  What platforms are only covered by Buildbot?  What tests are
only run there?

Without this information, it's not really possible to make an informed
decision.  No user cares about whether we drop buildbot.  Some user might
care if we, for example, drop HTTP support.


>
> I know that this might be disruptive.
> I think that we need it in order to raise awareness that supporting a
> platform is not easy.
> If someone (including me) cares about a platform they should find a
> way to help to project supporting that platform.
>
>
Note that some people cared about some platforms and they found a way to
help in donating a buildslave.  Do the operators of the offline slaves
*know* that the slaves are offline?  Maybe all that's missing is some
notification to the operators when their slave goes away.  If that's all,
jumping straight to "throw away all of buildbot" seems like an overreaction.

Jean-Paul



> What do you think?
> --
> Adi Roiban
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180312/d78d506e/attachment-0002.html>

From richard at matrix.org  Mon Mar 12 12:49:24 2018
From: richard at matrix.org (Richard van der Hoff)
Date: Mon, 12 Mar 2018 18:49:24 +0000
Subject: [Twisted-Python] Waiting for a contended resource
Message-ID: <72bd5441-e86a-b438-cc8e-db2f95d36d52@matrix.org>

Hi folks,

I thought I'd poll the list on the best way to approach a problem in 
Twisted.

The background is that we have a number of resources which can be 
requested by a REST client, and which are calculated on demand. The 
calculation is moderately expensive (can take multiple seconds), so the 
results of the calculation are cached so multiple lookups of the same 
resource are more efficient.

The problem comes in trying to handle multiple clients requesting the 
same resource at once. Obviously if 200 clients all request the same 
resource at the same time, we don't want to fire off 200 calculation 
requests.

The approach we adopted was, effectively, to maintain a lock for each 
resource:

> lock = defer.DeferredLock()
> cached_result = None
>
> @defer.inlineCallbacks
> def getResource():
>      yield lock.acquire()
>      try:
>          if cached_result is None:
>              cached_result = yield do_expensive_calculation()
>          defer.returnValue(cached_result)
>      finally:
>          lock.release()

(Of course one can optimise the above to avoid getting the lock if we 
already have the cached result - I've omitted that for simplicity.)

That's all very well, but it falls down when we get more than about 200 
requests for the same resource: once the calculation completes, we can 
suddenly serve all the requests, and the Deferreds returned by 
DeferredLock end up chaining together in a way that overflows the stack.

I reported this as http://twistedmatrix.com/trac/ticket/9304 and, at the 
time, worked around it by adding a call to reactor.callLater(0) into our 
implementation. However, Jean-Paul's comments on that bug implied that 
we were approaching the problem in completely the wrong way, and instead 
we should be avoiding queuing up work like this in the first place.

It's worth reiterating that the requests arrive from REST clients which 
we have no direct control over. We *could* keep track of the number of 
waiting clients, and make the API respond with a 5xx error or similar if 
that number gets too high, with the expectation that the client retries 
- but one concern would be that the load from the additional HTTP 
traffic would outweigh any efficiency gained by not stacking up Deferreds.

So, I'd welcome any advice on better ways to approach the problem.

Richard



From ldanielburr at me.com  Mon Mar 12 13:36:06 2018
From: ldanielburr at me.com (L. Daniel Burr)
Date: Mon, 12 Mar 2018 14:36:06 -0500
Subject: [Twisted-Python] Waiting for a contended resource
In-Reply-To: <72bd5441-e86a-b438-cc8e-db2f95d36d52@matrix.org>
References: <72bd5441-e86a-b438-cc8e-db2f95d36d52@matrix.org>
Message-ID: <etPan.5aa6d6a6.7a5ae51b.287d@me.com>

Hi Richard,
On March 12, 2018 at 1:49:41 PM, Richard van der Hoff (richard at matrix.org) wrote:

Hi folks,

I thought I'd poll the list on the best way to approach a problem in 
Twisted.

The background is that we have a number of resources which can be 
requested by a REST client, and which are calculated on demand. The 
calculation is moderately expensive (can take multiple seconds), so the 
results of the calculation are cached so multiple lookups of the same 
resource are more efficient.

The problem comes in trying to handle multiple clients requesting the 
same resource at once. Obviously if 200 clients all request the same 
resource at the same time, we don't want to fire off 200 calculation 
requests.

The approach we adopted was, effectively, to maintain a lock for each 
resource:

> lock = defer.DeferredLock()
> cached_result = None
>
> @defer.inlineCallbacks
> def getResource():
> yield lock.acquire()
> try:
> if cached_result is None:
> cached_result = yield do_expensive_calculation()
> defer.returnValue(cached_result)
> finally:
> lock.release()

(Of course one can optimise the above to avoid getting the lock if we 
already have the cached result - I've omitted that for simplicity.)

That's all very well, but it falls down when we get more than about 200 
requests for the same resource: once the calculation completes, we can 
suddenly serve all the requests, and the Deferreds returned by 
DeferredLock end up chaining together in a way that overflows the stack.

I reported this as http://twistedmatrix.com/trac/ticket/9304 and, at the 
time, worked around it by adding a call to reactor.callLater(0) into our 
implementation. However, Jean-Paul's comments on that bug implied that 
we were approaching the problem in completely the wrong way, and instead 
we should be avoiding queuing up work like this in the first place.


You mention using callLater to solve this problem, so I’m guessing that instead of using a lock you are re-scheduling the call to getResource if there is no cached_result value.  I’ve used this solution plenty of times across multiple projects, and have found it both simple and reliable.  Is there some reason why this solution is not desirable in your case?

It's worth reiterating that the requests arrive from REST clients which 
we have no direct control over. We *could* keep track of the number of 
waiting clients, and make the API respond with a 5xx error or similar if 
that number gets too high, with the expectation that the client retries 
- but one concern would be that the load from the additional HTTP 
traffic would outweigh any efficiency gained by not stacking up Deferreds.


Have you validated this concern through load-testing?  You may find that there is no meaningful negative impact to this approach.

So, I'd welcome any advice on better ways to approach the problem.

Richard
Hope this helps,

L. Daniel Burr
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180312/d98197a3/attachment-0002.html>

From ilyaskriblovsky at gmail.com  Mon Mar 12 13:52:43 2018
From: ilyaskriblovsky at gmail.com (Ilya Skriblovsky)
Date: Mon, 12 Mar 2018 19:52:43 +0000
Subject: [Twisted-Python] Waiting for a contended resource
In-Reply-To: <etPan.5aa6d6a6.7a5ae51b.287d@me.com>
References: <72bd5441-e86a-b438-cc8e-db2f95d36d52@matrix.org>
 <etPan.5aa6d6a6.7a5ae51b.287d@me.com>
Message-ID: <CAOG7vkw+KnzjUF-dap9ZK-9DNhi1EHD3dibKwqa_z_RLTO00yQ@mail.gmail.com>

Hi, Richard,

I've used class like this to cache the result of Expensive Calculation:

class DeferredCache:
    pending = None
    result = None
    failure = None

    def __init__(self, expensive_func):
        self.expensive_func = expensive_func

    def __call__(self):
        if self.pending is None:
            def on_ready(result):
                self.result = result
            def on_fail(failure):
                self.failure = failure

            self.pending =
defer.maybeDeferred(self.expensive_func).addCallbacks(on_ready, on_fail)

        return self.pending.addCallback(self._return_result)

    def _return_result(self, _):
        return self.failure or self.result

Using it you can get rid of DeferredLocks:

    deferred_cache = DeferredCache(do_expensive_calculation)

    def getResource():
        return deferred_cache()

It will start `expensive_func` on the first call. The second and
consequtive calls will return deferreds that resolves with the result when
expensive_func is done. If you call it when result is already here, it will
return alread-fired deferred.

Of course, it will require some more work if you need to pass arguments to
`expensive_func` and memoize results per arguments values.

-- ilya

пн, 12 мар. 2018 г. в 22:38, L. Daniel Burr <ldanielburr at me.com>:

> Hi Richard,
>
> On March 12, 2018 at 1:49:41 PM, Richard van der Hoff (richard at matrix.org)
> wrote:
>
> Hi folks,
>
> I thought I'd poll the list on the best way to approach a problem in
> Twisted.
>
> The background is that we have a number of resources which can be
> requested by a REST client, and which are calculated on demand. The
> calculation is moderately expensive (can take multiple seconds), so the
> results of the calculation are cached so multiple lookups of the same
> resource are more efficient.
>
> The problem comes in trying to handle multiple clients requesting the
> same resource at once. Obviously if 200 clients all request the same
> resource at the same time, we don't want to fire off 200 calculation
> requests.
>
> The approach we adopted was, effectively, to maintain a lock for each
> resource:
>
> > lock = defer.DeferredLock()
> > cached_result = None
> >
> > @defer.inlineCallbacks
> > def getResource():
> > yield lock.acquire()
> > try:
> > if cached_result is None:
> > cached_result = yield do_expensive_calculation()
> > defer.returnValue(cached_result)
> > finally:
> > lock.release()
>
> (Of course one can optimise the above to avoid getting the lock if we
> already have the cached result - I've omitted that for simplicity.)
>
> That's all very well, but it falls down when we get more than about 200
> requests for the same resource: once the calculation completes, we can
> suddenly serve all the requests, and the Deferreds returned by
> DeferredLock end up chaining together in a way that overflows the stack.
>
> I reported this as http://twistedmatrix.com/trac/ticket/9304 and, at the
> time, worked around it by adding a call to reactor.callLater(0) into our
> implementation. However, Jean-Paul's comments on that bug implied that
> we were approaching the problem in completely the wrong way, and instead
> we should be avoiding queuing up work like this in the first place.
>
>
> You mention using callLater to solve this problem, so I’m guessing that
> instead of using a lock you are re-scheduling the call to getResource if
> there is no cached_result value.  I’ve used this solution plenty of times
> across multiple projects, and have found it both simple and reliable.  Is
> there some reason why this solution is not desirable in your case?
>
> It's worth reiterating that the requests arrive from REST clients which
> we have no direct control over. We *could* keep track of the number of
> waiting clients, and make the API respond with a 5xx error or similar if
> that number gets too high, with the expectation that the client retries
> - but one concern would be that the load from the additional HTTP
> traffic would outweigh any efficiency gained by not stacking up Deferreds.
>
>
> Have you validated this concern through load-testing?  You may find that
> there is no meaningful negative impact to this approach.
>
> So, I'd welcome any advice on better ways to approach the problem.
>
> Richard
>
> Hope this helps,
>
> L. Daniel Burr
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180312/55985d17/attachment-0002.html>

From exarkun at twistedmatrix.com  Mon Mar 12 14:00:08 2018
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Mon, 12 Mar 2018 16:00:08 -0400
Subject: [Twisted-Python] Waiting for a contended resource
In-Reply-To: <CAOG7vkw+KnzjUF-dap9ZK-9DNhi1EHD3dibKwqa_z_RLTO00yQ@mail.gmail.com>
References: <72bd5441-e86a-b438-cc8e-db2f95d36d52@matrix.org>
 <etPan.5aa6d6a6.7a5ae51b.287d@me.com>
 <CAOG7vkw+KnzjUF-dap9ZK-9DNhi1EHD3dibKwqa_z_RLTO00yQ@mail.gmail.com>
Message-ID: <CAEeXt4PvzBp0+QnGZhgx1Vo+GvieLYpCxDaHOcDW=nEpQKE6ew@mail.gmail.com>

On Mon, Mar 12, 2018 at 3:52 PM, Ilya Skriblovsky <ilyaskriblovsky at gmail.com
> wrote:

> Hi, Richard,
>
> I've used class like this to cache the result of Expensive Calculation:
>
> class DeferredCache:
>     pending = None
>     result = None
>     failure = None
>
>     def __init__(self, expensive_func):
>         self.expensive_func = expensive_func
>
>     def __call__(self):
>         if self.pending is None:
>             def on_ready(result):
>                 self.result = result
>             def on_fail(failure):
>                 self.failure = failure
>
>             self.pending = defer.maybeDeferred(self.
> expensive_func).addCallbacks(on_ready, on_fail)
>
>         return self.pending.addCallback(self._return_result)
>
>
This seems like basically a correct answer to me.  However, I suggest one
small change.

You probably want to create and return a new Deferred for each result.  If
you don't, then your internal `pending` Deferred is now reachable by
application code.

As written, an application might (very, very reasonably):

    d = getResource()
    d.addCallback(long_async_operation)

Now `pending` has `long_async_operation` as a callback on its chain.  This
will prevent anyone else from getting a result until `long_async_operation`
is done.

You can fix this by:

    result = Deferred()
    self.pending.addCallback(self._return_result).chainDeferred(result)
    return result

Now the application can only reach `result`.  Nothing they do to `result`
will make much difference to `pending` because `chainDeferred` only puts
`callback` (and `errback`) onto `pending`'s callback chain.  `callback` and
`errback` don't wait on anything.

You have to be a little careful with `chainDeferred` because it doesn't
have the recursion-avoidance logic that implicit chaining has.  However,
that doesn't matter in this particular case because the chain depth is
fixed at two (`pending` and `result`).  The problems only arise if you
extend the chain out in this direction without bound.

Jean-Paul



>     def _return_result(self, _):
>         return self.failure or self.result
>
> Using it you can get rid of DeferredLocks:
>
>     deferred_cache = DeferredCache(do_expensive_calculation)
>
>     def getResource():
>         return deferred_cache()
>
> It will start `expensive_func` on the first call. The second and
> consequtive calls will return deferreds that resolves with the result when
> expensive_func is done. If you call it when result is already here, it will
> return alread-fired deferred.
>
> Of course, it will require some more work if you need to pass arguments to
> `expensive_func` and memoize results per arguments values.
>
> -- ilya
>
> пн, 12 мар. 2018 г. в 22:38, L. Daniel Burr <ldanielburr at me.com>:
>
>> Hi Richard,
>>
>> On March 12, 2018 at 1:49:41 PM, Richard van der Hoff (richard at matrix.org)
>> wrote:
>>
>> Hi folks,
>>
>> I thought I'd poll the list on the best way to approach a problem in
>> Twisted.
>>
>> The background is that we have a number of resources which can be
>> requested by a REST client, and which are calculated on demand. The
>> calculation is moderately expensive (can take multiple seconds), so the
>> results of the calculation are cached so multiple lookups of the same
>> resource are more efficient.
>>
>> The problem comes in trying to handle multiple clients requesting the
>> same resource at once. Obviously if 200 clients all request the same
>> resource at the same time, we don't want to fire off 200 calculation
>> requests.
>>
>> The approach we adopted was, effectively, to maintain a lock for each
>> resource:
>>
>> > lock = defer.DeferredLock()
>> > cached_result = None
>> >
>> > @defer.inlineCallbacks
>> > def getResource():
>> > yield lock.acquire()
>> > try:
>> > if cached_result is None:
>> > cached_result = yield do_expensive_calculation()
>> > defer.returnValue(cached_result)
>> > finally:
>> > lock.release()
>>
>> (Of course one can optimise the above to avoid getting the lock if we
>> already have the cached result - I've omitted that for simplicity.)
>>
>> That's all very well, but it falls down when we get more than about 200
>> requests for the same resource: once the calculation completes, we can
>> suddenly serve all the requests, and the Deferreds returned by
>> DeferredLock end up chaining together in a way that overflows the stack.
>>
>> I reported this as http://twistedmatrix.com/trac/ticket/9304 and, at the
>> time, worked around it by adding a call to reactor.callLater(0) into our
>> implementation. However, Jean-Paul's comments on that bug implied that
>> we were approaching the problem in completely the wrong way, and instead
>> we should be avoiding queuing up work like this in the first place.
>>
>>
>> You mention using callLater to solve this problem, so I’m guessing that
>> instead of using a lock you are re-scheduling the call to getResource if
>> there is no cached_result value.  I’ve used this solution plenty of times
>> across multiple projects, and have found it both simple and reliable.  Is
>> there some reason why this solution is not desirable in your case?
>>
>> It's worth reiterating that the requests arrive from REST clients which
>> we have no direct control over. We *could* keep track of the number of
>> waiting clients, and make the API respond with a 5xx error or similar if
>> that number gets too high, with the expectation that the client retries
>> - but one concern would be that the load from the additional HTTP
>> traffic would outweigh any efficiency gained by not stacking up Deferreds.
>>
>>
>> Have you validated this concern through load-testing?  You may find that
>> there is no meaningful negative impact to this approach.
>>
>> So, I'd welcome any advice on better ways to approach the problem.
>>
>> Richard
>>
>> Hope this helps,
>>
>> L. Daniel Burr
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180312/1cbdd763/attachment-0002.html>

From ilyaskriblovsky at gmail.com  Mon Mar 12 15:31:25 2018
From: ilyaskriblovsky at gmail.com (Ilya Skriblovsky)
Date: Mon, 12 Mar 2018 21:31:25 +0000
Subject: [Twisted-Python] Waiting for a contended resource
In-Reply-To: <CAEeXt4PvzBp0+QnGZhgx1Vo+GvieLYpCxDaHOcDW=nEpQKE6ew@mail.gmail.com>
References: <72bd5441-e86a-b438-cc8e-db2f95d36d52@matrix.org>
 <etPan.5aa6d6a6.7a5ae51b.287d@me.com>
 <CAOG7vkw+KnzjUF-dap9ZK-9DNhi1EHD3dibKwqa_z_RLTO00yQ@mail.gmail.com>
 <CAEeXt4PvzBp0+QnGZhgx1Vo+GvieLYpCxDaHOcDW=nEpQKE6ew@mail.gmail.com>
Message-ID: <CAOG7vkxvVQJ-Ndo8ZG7RNs+6eGqrTxyjDrX7fKmi6XG3MP2rUA@mail.gmail.com>

Thanks for correction, Jean-Paul, you're absolutly right

пн, 12 мар. 2018 г. в 23:00, Jean-Paul Calderone <exarkun at twistedmatrix.com
>:

> On Mon, Mar 12, 2018 at 3:52 PM, Ilya Skriblovsky <
> ilyaskriblovsky at gmail.com> wrote:
>
>> Hi, Richard,
>>
>> I've used class like this to cache the result of Expensive Calculation:
>>
>> class DeferredCache:
>>     pending = None
>>     result = None
>>     failure = None
>>
>>     def __init__(self, expensive_func):
>>         self.expensive_func = expensive_func
>>
>>     def __call__(self):
>>         if self.pending is None:
>>             def on_ready(result):
>>                 self.result = result
>>             def on_fail(failure):
>>                 self.failure = failure
>>
>>             self.pending =
>> defer.maybeDeferred(self.expensive_func).addCallbacks(on_ready, on_fail)
>>
>>         return self.pending.addCallback(self._return_result)
>>
>>
> This seems like basically a correct answer to me.  However, I suggest one
> small change.
>
> You probably want to create and return a new Deferred for each result.  If
> you don't, then your internal `pending` Deferred is now reachable by
> application code.
>
> As written, an application might (very, very reasonably):
>
>     d = getResource()
>     d.addCallback(long_async_operation)
>
> Now `pending` has `long_async_operation` as a callback on its chain.  This
> will prevent anyone else from getting a result until `long_async_operation`
> is done.
>
> You can fix this by:
>
>     result = Deferred()
>     self.pending.addCallback(self._return_result).chainDeferred(result)
>     return result
>
> Now the application can only reach `result`.  Nothing they do to `result`
> will make much difference to `pending` because `chainDeferred` only puts
> `callback` (and `errback`) onto `pending`'s callback chain.  `callback` and
> `errback` don't wait on anything.
>
> You have to be a little careful with `chainDeferred` because it doesn't
> have the recursion-avoidance logic that implicit chaining has.  However,
> that doesn't matter in this particular case because the chain depth is
> fixed at two (`pending` and `result`).  The problems only arise if you
> extend the chain out in this direction without bound.
>
> Jean-Paul
>
>
>
>>     def _return_result(self, _):
>>         return self.failure or self.result
>>
>> Using it you can get rid of DeferredLocks:
>>
>>     deferred_cache = DeferredCache(do_expensive_calculation)
>>
>>     def getResource():
>>         return deferred_cache()
>>
>> It will start `expensive_func` on the first call. The second and
>> consequtive calls will return deferreds that resolves with the result when
>> expensive_func is done. If you call it when result is already here, it will
>> return alread-fired deferred.
>>
>> Of course, it will require some more work if you need to pass arguments
>> to `expensive_func` and memoize results per arguments values.
>>
>> -- ilya
>>
>> пн, 12 мар. 2018 г. в 22:38, L. Daniel Burr <ldanielburr at me.com>:
>>
>>> Hi Richard,
>>>
>>> On March 12, 2018 at 1:49:41 PM, Richard van der Hoff (
>>> richard at matrix.org) wrote:
>>>
>>> Hi folks,
>>>
>>> I thought I'd poll the list on the best way to approach a problem in
>>> Twisted.
>>>
>>> The background is that we have a number of resources which can be
>>> requested by a REST client, and which are calculated on demand. The
>>> calculation is moderately expensive (can take multiple seconds), so the
>>> results of the calculation are cached so multiple lookups of the same
>>> resource are more efficient.
>>>
>>> The problem comes in trying to handle multiple clients requesting the
>>> same resource at once. Obviously if 200 clients all request the same
>>> resource at the same time, we don't want to fire off 200 calculation
>>> requests.
>>>
>>> The approach we adopted was, effectively, to maintain a lock for each
>>> resource:
>>>
>>> > lock = defer.DeferredLock()
>>> > cached_result = None
>>> >
>>> > @defer.inlineCallbacks
>>> > def getResource():
>>> > yield lock.acquire()
>>> > try:
>>> > if cached_result is None:
>>> > cached_result = yield do_expensive_calculation()
>>> > defer.returnValue(cached_result)
>>> > finally:
>>> > lock.release()
>>>
>>> (Of course one can optimise the above to avoid getting the lock if we
>>> already have the cached result - I've omitted that for simplicity.)
>>>
>>> That's all very well, but it falls down when we get more than about 200
>>> requests for the same resource: once the calculation completes, we can
>>> suddenly serve all the requests, and the Deferreds returned by
>>> DeferredLock end up chaining together in a way that overflows the stack.
>>>
>>> I reported this as http://twistedmatrix.com/trac/ticket/9304 and, at the
>>>
>>> time, worked around it by adding a call to reactor.callLater(0) into our
>>>
>>> implementation. However, Jean-Paul's comments on that bug implied that
>>> we were approaching the problem in completely the wrong way, and instead
>>>
>>> we should be avoiding queuing up work like this in the first place.
>>>
>>>
>>> You mention using callLater to solve this problem, so I’m guessing that
>>> instead of using a lock you are re-scheduling the call to getResource if
>>> there is no cached_result value.  I’ve used this solution plenty of times
>>> across multiple projects, and have found it both simple and reliable.  Is
>>> there some reason why this solution is not desirable in your case?
>>>
>>> It's worth reiterating that the requests arrive from REST clients which
>>> we have no direct control over. We *could* keep track of the number of
>>> waiting clients, and make the API respond with a 5xx error or similar if
>>>
>>> that number gets too high, with the expectation that the client retries
>>> - but one concern would be that the load from the additional HTTP
>>> traffic would outweigh any efficiency gained by not stacking up
>>> Deferreds.
>>>
>>>
>>> Have you validated this concern through load-testing?  You may find that
>>> there is no meaningful negative impact to this approach.
>>>
>>> So, I'd welcome any advice on better ways to approach the problem.
>>>
>>> Richard
>>>
>>> Hope this helps,
>>>
>>> L. Daniel Burr
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180312/ceb06f18/attachment-0002.html>

From richard at matrix.org  Mon Mar 12 16:56:42 2018
From: richard at matrix.org (Richard van der Hoff)
Date: Mon, 12 Mar 2018 22:56:42 +0000
Subject: [Twisted-Python] Waiting for a contended resource
In-Reply-To: <CAEeXt4PvzBp0+QnGZhgx1Vo+GvieLYpCxDaHOcDW=nEpQKE6ew@mail.gmail.com>
References: <72bd5441-e86a-b438-cc8e-db2f95d36d52@matrix.org>
 <etPan.5aa6d6a6.7a5ae51b.287d@me.com>
 <CAOG7vkw+KnzjUF-dap9ZK-9DNhi1EHD3dibKwqa_z_RLTO00yQ@mail.gmail.com>
 <CAEeXt4PvzBp0+QnGZhgx1Vo+GvieLYpCxDaHOcDW=nEpQKE6ew@mail.gmail.com>
Message-ID: <910511f9-cd97-203e-561f-bd8a6542032e@matrix.org>

Thank you for all for all the answers so far, particularly to Ilya and 
Jean-Paul who provided some very helpful code samples.

It's interesting to realise that, by avoiding locking, we can end up 
with a much more efficient implementation. I'll have to figure out how 
widely we can apply this technique - and how often it's going to be 
worth rewriting things to allow that. Thanks for some useful pointers!

Richard


On 12/03/18 20:00, Jean-Paul Calderone wrote:
> On Mon, Mar 12, 2018 at 3:52 PM, Ilya Skriblovsky 
> <ilyaskriblovsky at gmail.com <mailto:ilyaskriblovsky at gmail.com>> wrote:
>
>     Hi, Richard,
>
>     I've used class like this to cache the result of Expensive
>     Calculation:
>
>     class DeferredCache:
>     pending = None
>     result = None
>     failure = None
>
>     def __init__(self, expensive_func):
>       self.expensive_func = expensive_func
>
>     def __call__(self):
>       if self.pending is None:
>           def on_ready(result):
>               self.result = result
>           def on_fail(failure):
>               self.failure = failure
>
>           self.pending =
>     defer.maybeDeferred(self.expensive_func).addCallbacks(on_ready,
>     on_fail)
>
>       return self.pending.addCallback(self._return_result)
>
>
> This seems like basically a correct answer to me. However, I suggest 
> one small change.
>
> You probably want to create and return a new Deferred for each 
> result.  If you don't, then your internal `pending` Deferred is now 
> reachable by application code.
>
> As written, an application might (very, very reasonably):
>
>     d = getResource()
>     d.addCallback(long_async_operation)
>
> Now `pending` has `long_async_operation` as a callback on its chain.  
> This will prevent anyone else from getting a result until 
> `long_async_operation` is done.
>
> You can fix this by:
>
>     result = Deferred()
> self.pending.addCallback(self._return_result).chainDeferred(result)
>     return result
>
> Now the application can only reach `result`.  Nothing they do to 
> `result` will make much difference to `pending` because 
> `chainDeferred` only puts `callback` (and `errback`) onto `pending`'s 
> callback chain.  `callback` and `errback` don't wait on anything.
>
> You have to be a little careful with `chainDeferred` because it 
> doesn't have the recursion-avoidance logic that implicit chaining 
> has.  However, that doesn't matter in this particular case because the 
> chain depth is fixed at two (`pending` and `result`).  The problems 
> only arise if you extend the chain out in this direction without bound.
>
> Jean-Paul
>
>     def _return_result(self, _):
>       return self.failure or self.result
>
>     Using it you can get rid of DeferredLocks:
>
>         deferred_cache = DeferredCache(do_expensive_calculation)
>
>         def getResource():
>             return deferred_cache()
>
>     It will start `expensive_func` on the first call. The second and
>     consequtive calls will return deferreds that resolves with the
>     result when expensive_func is done. If you call it when result is
>     already here, it will return alread-fired deferred.
>
>     Of course, it will require some more work if you need to pass
>     arguments to `expensive_func` and memoize results per arguments
>     values.
>
>     -- ilya
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180312/7d6bca68/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Mar 12 23:08:11 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 12 Mar 2018 22:08:11 -0700
Subject: [Twisted-Python] List of required builds before a merge
In-Reply-To: <CAFycZ9eFeX0BnoqDYXToOFQDMBRvAHa=5mjxes4=YTKpbxVg4g@mail.gmail.com>
References: <CAFycZ9eFeX0BnoqDYXToOFQDMBRvAHa=5mjxes4=YTKpbxVg4g@mail.gmail.com>
Message-ID: <5DB035CE-E3A5-454B-B827-C57B848F38CA@twistedmatrix.com>



> On Mar 12, 2018, at 4:59 AM, Adi Roiban <adi at roiban.ro> wrote:
> 
> Hi,
> 
> It is not clear to me what builders need to pass before we can merge something.
> 
> I expect that all supported "platforms" need to pass, but it is not
> clear what are the currently supported platforms.
> 
> We have this info in the wiki but it does not help.
> https://twistedmatrix.com/trac/wiki/ReviewProcess#Authors:Howtomergethechangetotrunk
> 
> In GitHub I can see Travis / Appveyor and OSX from Buildot as "Required"

These are marked as "required" because they're necessary, but not sufficient.

> Is that all?

Ideally all the supported buildbots should be passing.  It's a real shame that the offline buildbots do not report any status, because it makes it very easy to miss them.  (I personally did not realize the ramifications of the way buildbot repots status until I looked at https://buildbot.twistedmatrix.com/boxes-all?branch=trunk&num_builds=10 <https://buildbot.twistedmatrix.com/boxes-all?branch=trunk&num_builds=10> just now).

> If I check the "supported" group in Buildbot, I see many more builders.
> The problem is that a significant number of slaves are down and those
> builders are not available.

So, normally I'd say, like Jean-Paul did, that we should just get in touch with the maintainers of the buildbots in question.

But it seems the buildbots in question were the ones we had running on our donated Rackspace Cloud account.

Logging into the control panel for that account, literally all the servers except for the buildmaster (i.e. buildbot.twistedmatrix.com <http://buildbot.twistedmatrix.com/>) have been deleted.  Not just shut down, but, completely gone.  This is baffling to me.  I do not know who could have done this or why.  There does not appear to be an audit log I can consult.  Based on billing data, and consistent with the buildbot logs, it appears that this occurred some time in early January.

> Is Fedora still supported and required?

That's the hope.  Those buildbots appear to be online.

> I suggest to use GitHub "Required" marker to document what platforms are supported.

I want to agree with you.  However, our tests are not reliable or performant enough for this.

The "required" marker makes it impossible to merge changes without a passing status or an administrator override.  This has an unfortunate set of corollaries.  Assuming a non-administrator reviewer:

If a single builder has a temporary configuration issue and you're not an administrator, you can't merge any code.
Let's say the probably of an intermittent test failing is 50 to 1.  A 2% chance.  The probability of a test suite passing is 98%.  We have 36 supported builders.  The probability of all the builders passing for a successful run is then just 13%; roughly 1 in 10 valid branches will be able to land. (I think our probability is actually quite a bit better than this these days, but you get my drift.)
Even if a contributor can force all the builds to re-run (which requires special permissions, and thus needs to wait for a project member) getting a successful run on every builder could require 2 or 3 tries, which could be 2 or 3 hours of waiting just to get one successful run on a platform that you know is not relevant to the change you're testing.

Therefore keeping a small core set of "most pass" statuses and allowing for some human judgement about the rest is a practical necessity given the level of compute resources available to us.

> We don't have time to maintain the infrastructure, so I suggest to
> drop support for anything that is not supported by Travis and
> Appveyor.

My preference would be to simply drop all the buildbots which have been (for some reason) destroyed from the supported build matrix, since the buildbots are still covering a multiplicity of kernels and environments that travis and appveyor aren't.  But, I don't have the time to do much more than write this email, so if we have no other volunteers for maintenance, I will support your decision to tear down the buildbots for now.

Jean-Paul recently pointed out that CircleCI has much more performant macOS builds than Travis, so if someone were motivated to make that change but didn't want to keep maintaining hardware, that might be one way to go.

> I know that this might be disruptive.
> I think that we need it in order to raise awareness that supporting a
> platform is not easy.

I do hope that this will provoke some potential volunteers to come forward to help maintain our failing infrastructure.

> If someone (including me) cares about a platform they should find a way to help to project supporting that platform.

> What do you think?

I do hope that if you're going to make a change, you'll consider something slightly less drastic than blowing up the buildbots entirely :).  But with a dozen servers having just disappeared with no explanation, it's a course of action which at least makes sense.

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180312/4639b2ca/attachment-0002.html>

From hawkowl at atleastfornow.net  Mon Mar 12 23:27:26 2018
From: hawkowl at atleastfornow.net (Amber Brown)
Date: Tue, 13 Mar 2018 16:27:26 +1100
Subject: [Twisted-Python] List of required builds before a merge
In-Reply-To: <5DB035CE-E3A5-454B-B827-C57B848F38CA@twistedmatrix.com>
References: <CAFycZ9eFeX0BnoqDYXToOFQDMBRvAHa=5mjxes4=YTKpbxVg4g@mail.gmail.com>
 <5DB035CE-E3A5-454B-B827-C57B848F38CA@twistedmatrix.com>
Message-ID: <CAMxb2ivN5TeE2NAyzYiQpUEFof-RujSQ8-Nmt3uiftdbfHjwVg@mail.gmail.com>

The buildbots went after someone said that the RAX hosting was going away,
and I (and a few others) didn't get the (annoyingly quiet) correction that
it was only for new projects (which was not how the original was written).
All the twisted list got was the original letter from the SFC without a
"false alarm" followup. By the time people pointed it out, it was too late.

I have the ansible configs to rebuild them all, but unfortunately, Life has
not stopped since January and hasn't got worse. If anyone wants to take a
stab, the ansible configs are in the twisted-infra repo.

- Amber

On 13 Mar. 2018 16:08, "Glyph" <glyph at twistedmatrix.com> wrote:

>
>
> On Mar 12, 2018, at 4:59 AM, Adi Roiban <adi at roiban.ro> wrote:
>
> Hi,
>
> It is not clear to me what builders need to pass before we can merge
> something.
>
> I expect that all supported "platforms" need to pass, but it is not
> clear what are the currently supported platforms.
>
> We have this info in the wiki but it does not help.
> https://twistedmatrix.com/trac/wiki/ReviewProcess#Authors:
> Howtomergethechangetotrunk
>
> In GitHub I can see Travis / Appveyor and OSX from Buildot as "Required"
>
>
> These are marked as "required" because they're necessary, but not
> sufficient.
>
> Is that all?
>
>
> Ideally all the supported buildbots should be passing.  It's a real shame
> that the offline buildbots do not report any status, because it makes it
> very easy to miss them.  (I personally did not realize the ramifications of
> the way buildbot repots status until I looked at https://buildbot.
> twistedmatrix.com/boxes-all?branch=trunk&num_builds=10 just now).
>
> If I check the "supported" group in Buildbot, I see many more builders.
> The problem is that a significant number of slaves are down and those
> builders are not available.
>
>
> So, normally I'd say, like Jean-Paul did, that we should just get in touch
> with the maintainers of the buildbots in question.
>
> But it seems the buildbots in question were the ones we had running on our
> donated Rackspace Cloud account.
>
> Logging into the control panel for that account, literally all the servers
> except for the buildmaster (i.e. buildbot.twistedmatrix.com) have been
> deleted.  Not just shut down, but, completely gone.  This is baffling to
> me.  I do not know who could have done this or why.  There does not appear
> to be an audit log I can consult.  Based on billing data, and consistent
> with the buildbot logs, it appears that this occurred some time in early
> January.
>
> Is Fedora still supported and required?
>
>
> That's the hope.  Those buildbots appear to be online.
>
> I suggest to use GitHub "Required" marker to document what platforms are
> supported.
>
>
> I want to agree with you.  However, our tests are not reliable or
> performant enough for this.
>
> The "required" marker makes it *impossible *to merge changes without a
> passing status or an administrator override.  This has an unfortunate set
> of corollaries.  Assuming a non-administrator reviewer:
>
>
>    1. If a single builder has a temporary configuration issue and you're
>    not an administrator, you can't merge any code.
>    2. Let's say the probably of an intermittent test failing is 50 to 1.
>    A 2% chance.  The probability of a test suite passing is 98%.  We have 36
>    supported builders.  The probability of all the builders passing for a
>    successful run is then just *13%*; roughly 1 in 10 valid branches will
>    be able to land. (I think our probability is actually quite a bit better
>    than this these days, but you get my drift.)
>    3. Even if a contributor can force all the builds to re-run (which
>    requires special permissions, and thus needs to wait for a project member)
>    getting a successful run on every builder could require 2 or 3 tries, which
>    could be 2 or 3 *hours* of waiting just to get one successful run on a
>    platform that you know is not relevant to the change you're testing.
>
>
> Therefore keeping a small core set of "most pass" statuses and allowing
> for some human judgement about the rest is a practical necessity given the
> level of compute resources available to us.
>
> We don't have time to maintain the infrastructure, so I suggest to
> drop support for anything that is not supported by Travis and
> Appveyor.
>
>
> My preference would be to simply drop all the buildbots which have been
> (for some reason) destroyed from the supported build matrix, since the
> buildbots are still covering a multiplicity of kernels and environments
> that travis and appveyor aren't.  But, I don't have the time to do much
> more than write this email, so if we have no other volunteers for
> maintenance, I will support your decision to tear down the buildbots for
> now.
>
> Jean-Paul recently pointed out that CircleCI has much more performant
> macOS builds than Travis, so if someone were motivated to make that change
> but didn't want to keep maintaining hardware, that might be one way to go.
>
> I know that this might be disruptive.
> I think that we need it in order to raise awareness that supporting a
> platform is not easy.
>
>
> I do hope that this will provoke some potential volunteers to come forward
> to help maintain our failing infrastructure.
>
> If someone (including me) cares about a platform they should find a way to
> help to project supporting that platform.
>
>
> What do you think?
>
>
> I do hope that if you're going to make a change, you'll consider something
> slightly less drastic than blowing up the buildbots entirely :).  But with
> a dozen servers having just disappeared with no explanation, it's a course
> of action which at least makes sense.
>
> -g
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180313/f950978c/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Mar 12 23:42:08 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 12 Mar 2018 22:42:08 -0700
Subject: [Twisted-Python] List of required builds before a merge
In-Reply-To: <CAMxb2ivN5TeE2NAyzYiQpUEFof-RujSQ8-Nmt3uiftdbfHjwVg@mail.gmail.com>
References: <CAFycZ9eFeX0BnoqDYXToOFQDMBRvAHa=5mjxes4=YTKpbxVg4g@mail.gmail.com>
 <5DB035CE-E3A5-454B-B827-C57B848F38CA@twistedmatrix.com>
 <CAMxb2ivN5TeE2NAyzYiQpUEFof-RujSQ8-Nmt3uiftdbfHjwVg@mail.gmail.com>
Message-ID: <E9779528-484D-49C6-AB3E-3E1A434C0555@twistedmatrix.com>

On Mar 12, 2018, at 10:27 PM, Amber Brown <hawkowl at atleastfornow.net> wrote:
> 
> The buildbots went after someone said that the RAX hosting was going away, and I (and a few others) didn't get the (annoyingly quiet) correction that it was only for new projects (which was not how the original was written). All the twisted list got was the original letter from the SFC without a "false alarm" followup. By the time people pointed it out, it was too late.
> 
> I have the ansible configs to rebuild them all, but unfortunately, Life has not stopped since January and hasn't got worse. If anyone wants to take a stab, the ansible configs are in the twisted-infra repo.

Thanks for the explanation; I was tearing my hair out (what little remains, anyway) trying to figure out what the heck had happened! :)  I do remember that ill-fated email.  Normally I'd say we should never deprovision infrastructure until it's torn, bloody, from our lifeless hands, but the way the free Rackspace account is set up means overages go to bill the SFC and deplete their general fund, so I can see not wanting to have anything unnecessary hanging around there if the discount were to end.

(For those of you that may not have been informed at the time: https://www.theregister.co.uk/2017/10/20/rackspace_ends_discount_hosting_for_open_source_projects/ <https://www.theregister.co.uk/2017/10/20/rackspace_ends_discount_hosting_for_open_source_projects/> )

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180312/5165252a/attachment-0002.html>

From adi at roiban.ro  Tue Mar 13 07:36:42 2018
From: adi at roiban.ro (Adi Roiban)
Date: Tue, 13 Mar 2018 13:36:42 +0000
Subject: [Twisted-Python] List of required builds before a merge
In-Reply-To: <E9779528-484D-49C6-AB3E-3E1A434C0555@twistedmatrix.com>
References: <CAFycZ9eFeX0BnoqDYXToOFQDMBRvAHa=5mjxes4=YTKpbxVg4g@mail.gmail.com>
 <5DB035CE-E3A5-454B-B827-C57B848F38CA@twistedmatrix.com>
 <CAMxb2ivN5TeE2NAyzYiQpUEFof-RujSQ8-Nmt3uiftdbfHjwVg@mail.gmail.com>
 <E9779528-484D-49C6-AB3E-3E1A434C0555@twistedmatrix.com>
Message-ID: <CAFycZ9cKUT_KOPzKxp3pP1xUOJA_1p1mGGWJtRTafOM7T9rfbA@mail.gmail.com>

>  If that's all, jumping straight to "throw away all of buildbot" seems like an overreaction.

I am trying to be pragmatic.
I think that the whole code review / PR contribution to Twisted for
external (but also for team member) is a bad experience and is not
helping with the development of Twisted.

So we need a "shock" in order to put the things back together :)

We all have little time and I am trying to simplify the process and
let people know that we want them to contribute to Twisted.

-------------

> Ideally all the supported buildbots should be passing.  It's a real shame that the offline buildbots do not report any status,

Buildbot should send email when a slave is down to buildbot at
twistedmatrix.com ... not sure who is reading those emails.

> The "required" marker makes it impossible to merge changes without a passing status

In such a case, maybe the "administrators" can be pinged and do a final review.

------

> But, I don't have the time to do much more than write this email, so if we have no other volunteers for maintenance, I will support your decision to tear down the buildbots for now.

I tried to maintain the Buildbots and have a Vagrant master and slave
to allow development... but I failed to coordinate with the other team
members.
I failed to have a testing environment which always works.
Many times there were changes made in production which went out of
sync with the Vagrant VM.

I know that we are all busy, but is not ok to just destory some slaves
wihtout updating the buildbot configuration... we end up with huge
queues https://buildbot.twistedmatrix.com/builders/freebsd10-py2.7

I am a fan of Buildbot and I am using Buildbot for my project.
With 30+ builders, running them in stages was the only way to the
handle spurious failures.
Now Travis-CI also has stages... and Circle-CI also has stages.

I can try to create a brand new buildmaster and rebuild it using
latest buildbot and with a simplified configuration... just calling a
set of scripts in each step and making sure we can replicate it in
vagrant or have a separate staging server for doing dev work.
A simplified one, would be one just calling scripts in the branch, so
that we have minimal configuration and buildbot and to match.
Also, the new buildmaster can look for ways to allow non-team members
to run tests...maybe use GitHub api to discover if they have previosly
commits in trunk.

The build history will not be available, but we can keep the old
master in read-only mode.

-----

I would want to do whatever it takes to not merge with red tests. They
are contagious and can lead to accidentally ignoring an error which is
related to the changes but might not look like one.

See https://github.com/twisted/twisted/pull/946 where there was a
failure which looks unrelated, but I think that might be related.

One option is to break the tests into smaller builds and be able to
retry only those builds.

Ex. instead of running select + poll + epool in a single run, break
them into 3 separate builds.

On Buildbot you can restart a builder. On Travis-CI you can restart a
single job... and maybe we can lobby Appveyor to allow restarting a
job (and not the whole PR gig).

------

We can try Circle-CI.
They don't offer any free versions. Even for open source.
When I did the initial work for Twisted with Travis and Appveyor I
contacted Circle-CI to see if we can get a discount.

They offered OSX - Seed plan which comes with 500 minutes/month - free.

I stopped as the people on IRC told me that Circle-CI is not better than Travis.

I am happy to try again with Circle-CI

------

We might go over 500 minutes. I suggest running the tests in stages.

Run twistedchecker/pyflakes/newsfragment/Ubuntu tests first.
Only when they all pass we should trigger Windows and OSX tests.

I am also running the tests on stage... For example, Debian/RHEL/SUSE
pass 99.99% if Ubuntu pass... so those tests are executed only later
in the stage.

------


I don't have much time to contribute to Twisted infrastructure, and I
would like to spend the available time doing reviews and helping
people contribute to Twisted.

If there is a better plan, I am happy to go with that.

Thanks for your time :)
Adi



From exarkun at twistedmatrix.com  Tue Mar 13 07:54:11 2018
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Tue, 13 Mar 2018 09:54:11 -0400
Subject: [Twisted-Python] List of required builds before a merge
In-Reply-To: <CAFycZ9cKUT_KOPzKxp3pP1xUOJA_1p1mGGWJtRTafOM7T9rfbA@mail.gmail.com>
References: <CAFycZ9eFeX0BnoqDYXToOFQDMBRvAHa=5mjxes4=YTKpbxVg4g@mail.gmail.com>
 <5DB035CE-E3A5-454B-B827-C57B848F38CA@twistedmatrix.com>
 <CAMxb2ivN5TeE2NAyzYiQpUEFof-RujSQ8-Nmt3uiftdbfHjwVg@mail.gmail.com>
 <E9779528-484D-49C6-AB3E-3E1A434C0555@twistedmatrix.com>
 <CAFycZ9cKUT_KOPzKxp3pP1xUOJA_1p1mGGWJtRTafOM7T9rfbA@mail.gmail.com>
Message-ID: <CAEeXt4Pi_66+9hG9FZoBQeGHaTb417mQAiy+=ZoL_Pc81RkuwQ@mail.gmail.com>

On Tue, Mar 13, 2018 at 9:36 AM, Adi Roiban <adi at roiban.ro> wrote:

> We can try Circle-CI.
> They don't offer any free versions. Even for open source.
> When I did the initial work for Twisted with Travis and Appveyor I
> contacted Circle-CI to see if we can get a discount.
>
> They offered OSX - Seed plan which comes with 500 minutes/month - free.
>

They advertise this on their site now:
https://circleci.com/pricing/#faq-section-os-x

So I would expect Twisted could get it.

Your point about the minutes limit is a good one though.  What is 500
minutes to Twisted?  Around 30 builds?  It seems likely Twisted would run
out most months.  Certainly, maintaining separate coverage and non-coverage
builds would totally blow this limit.  And one of the big advantages of
hosted CI over buildbot - letting third-party PRs trigger builds - would
seem to be out of the question.


> I stopped as the people on IRC told me that Circle-CI is not better than
> Travis.
>

Presumably at some point this was true.  These days, in my experience,
CircleCI definitely seems competitive.  It has near feature parity (and
more features in some areas), a less crufty configuration system, and seems
better resourced (but this may just be better resource management - eg, the
500 minute macOS limit for free open source users).

Of course, there's also the fact that the macOS Buildbot slaves are
*not* offline
right now.  I know they've gone offline but as far as I know, their
maintainer is fairly responsive to reports of this.  So, is macOS really
part of this problem?

The immediate problem is all of the Rackspace-hosted slaves that are gone,
right?

So maybe what's more interesting is that CircleCI offers a way to replace
those - with either VM or container (including custom-image) builders.

Jean-Paul


>
> I am happy to try again with Circle-CI
>
> ------
>
> We might go over 500 minutes. I suggest running the tests in stages.
>
> Run twistedchecker/pyflakes/newsfragment/Ubuntu tests first.
> Only when they all pass we should trigger Windows and OSX tests.
>
> I am also running the tests on stage... For example, Debian/RHEL/SUSE
> pass 99.99% if Ubuntu pass... so those tests are executed only later
> in the stage.
>
> ------
>
>
> I don't have much time to contribute to Twisted infrastructure, and I
> would like to spend the available time doing reviews and helping
> people contribute to Twisted.
>
> If there is a better plan, I am happy to go with that.
>
> Thanks for your time :)
> Adi
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180313/53600f0e/attachment-0002.html>

From adi at roiban.ro  Tue Mar 13 11:55:14 2018
From: adi at roiban.ro (Adi Roiban)
Date: Tue, 13 Mar 2018 17:55:14 +0000
Subject: [Twisted-Python] List of required builds before a merge
In-Reply-To: <CAEeXt4Pi_66+9hG9FZoBQeGHaTb417mQAiy+=ZoL_Pc81RkuwQ@mail.gmail.com>
References: <CAFycZ9eFeX0BnoqDYXToOFQDMBRvAHa=5mjxes4=YTKpbxVg4g@mail.gmail.com>
 <5DB035CE-E3A5-454B-B827-C57B848F38CA@twistedmatrix.com>
 <CAMxb2ivN5TeE2NAyzYiQpUEFof-RujSQ8-Nmt3uiftdbfHjwVg@mail.gmail.com>
 <E9779528-484D-49C6-AB3E-3E1A434C0555@twistedmatrix.com>
 <CAFycZ9cKUT_KOPzKxp3pP1xUOJA_1p1mGGWJtRTafOM7T9rfbA@mail.gmail.com>
 <CAEeXt4Pi_66+9hG9FZoBQeGHaTb417mQAiy+=ZoL_Pc81RkuwQ@mail.gmail.com>
Message-ID: <CAFycZ9cXnNxpUuWYf+nZ0mFZW2eSCGedTf0egThogT+ULYUhqw@mail.gmail.com>

On 13 March 2018 at 13:54, Jean-Paul Calderone
<exarkun at twistedmatrix.com> wrote:
> On Tue, Mar 13, 2018 at 9:36 AM, Adi Roiban <adi at roiban.ro> wrote:
>>
>> We can try Circle-CI.
>> They don't offer any free versions. Even for open source.
>> When I did the initial work for Twisted with Travis and Appveyor I
>> contacted Circle-CI to see if we can get a discount.
>>
>> They offered OSX - Seed plan which comes with 500 minutes/month - free.
>
>
> They advertise this on their site now:
> https://circleci.com/pricing/#faq-section-os-x
>
> So I would expect Twisted could get it.
>
> Your point about the minutes limit is a good one though.  What is 500
> minutes to Twisted?  Around 30 builds?  It seems likely Twisted would run
> out most months.  Certainly, maintaining separate coverage and non-coverage
> builds would totally blow this limit.  And one of the big advantages of
> hosted CI over buildbot - letting third-party PRs trigger builds - would
> seem to be out of the question.

I asked for this on July 2016... so maybe they have a different
offering for open source now.
Circle-CI ticket id for this request is #8736.

>>
>> I stopped as the people on IRC told me that Circle-CI is not better than
>> Travis.
>
>
> Presumably at some point this was true.  These days, in my experience,
> CircleCI definitely seems competitive.  It has near feature parity (and more
> features in some areas), a less crufty configuration system, and seems
> better resourced (but this may just be better resource management - eg, the
> 500 minute macOS limit for free open source users).
>
> Of course, there's also the fact that the macOS Buildbot slaves are not
> offline right now.  I know they've gone offline but as far as I know, their
> maintainer is fairly responsive to reports of this.  So, is macOS really
> part of this problem?

Keeping slave online is not that much of a work.

My issue is with the buildmaster configuration and its maintenance in general.

> The immediate problem is all of the Rackspace-hosted slaves that are gone,
> right?

I don't know. I don't know when and where this was discussed.

My issue is that I am checking https://github.com/twisted-infra/braid
and there was no update for the removal of the slaves in the
buildmaster configuration.

> So maybe what's more interesting is that CircleCI offers a way to replace
> those - with either VM or container (including custom-image) builders.

I don't think that Circle-CI provides support for FreeBSD10, RHEL7,
Debian 8 and 9.

I think that Rackspace still offers us generous resources, so we can
use Rackspace for that.

We can run 1 or 2 Windows slaves in Azure as they gave us $150 monthly credit.

-----

I think that we should find a way to make it super simple to run more
tests on local systems.
It might not be easy to run all 2.7 / 3.4 / 3.5 / 3.6 on Windows /
Linux / BSD/ OSX, but maybe we can find a simple script
which runs the core tests in under 1 minute.
Devs will then be asked to run these tests before pushing to a PR...
and in the same time these teste can be used as stage 1.
If they don't pass we don't spin OSX / Windows and other resource-heavy tests.

-------

On Appveyor we have 4 builders/jobs

Maybe we can stage Windows test... and execute iocp reactor only after
select tests pass... on 2.7.

We still have Windows on Buildbot, so maybe run fewer tests on
Appveyor (to speed it up),
since we will run all Windows tests anyway in Buildbot.

----

For external contributors, we are effectively now running the tests in 2 stages
Unless Travis and Appveyor don't pass, we don't manually trigger the
Buildbot tests.

--------

When I have time, I will retry Circe-CI for OSX.
Just to give it a spin and see where we are and how much time we need
per month for OSX.
I think that we can tune the number of tests we run on Circle-CI to
get into the budget.
The Circle-CI can server as a stage-1 builder for external
contributors... and we will still have the OSX slave maintained by
Glyph.

> Jean-Paul
>
>>
>>
>> I am happy to try again with Circle-CI
>>
>> ------
>>
>> We might go over 500 minutes. I suggest running the tests in stages.
>>
>> Run twistedchecker/pyflakes/newsfragment/Ubuntu tests first.
>> Only when they all pass we should trigger Windows and OSX tests.
>>
>> I am also running the tests on stage... For example, Debian/RHEL/SUSE
>> pass 99.99% if Ubuntu pass... so those tests are executed only later
>> in the stage.
>>
>> ------
>>
>>
>> I don't have much time to contribute to Twisted infrastructure, and I
>> would like to spend the available time doing reviews and helping
>> people contribute to Twisted.
>>
>> If there is a better plan, I am happy to go with that.
>>
>> Thanks for your time :)
>> Adi
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Adi Roiban



From adi at roiban.ro  Thu Mar 15 04:35:43 2018
From: adi at roiban.ro (Adi Roiban)
Date: Thu, 15 Mar 2018 10:35:43 +0000
Subject: [Twisted-Python] New member of the twisted/twisted-contributors
	team.
Message-ID: <CAFycZ9ct+ZnvE=8O+pXGWeqh3ZF2NSa+gwpRXPAySNWBPw5ezw@mail.gmail.com>

Hi,

Just a quick announcement.

I made Ilya Skriblovsky (https://github.com/IlyaSkriblovsky) a member
of twisted/twisted-contributors team.

The main reason is to make it easier to work with Ilya and allow him
to run tests on Buildbot.

Let me know if you want this change reverted.

Regards,
-- 
Adi Roiban



From johnaherne at rocs.co.uk  Sat Mar 17 03:58:41 2018
From: johnaherne at rocs.co.uk (John Aherne)
Date: Sat, 17 Mar 2018 09:58:41 +0000
Subject: [Twisted-Python] RunningTwisted tests on Windows and SSL
Message-ID: <CAKmUHjas5=NQzr2BmPv0gUEOcjYpTR_vAr2MPn6uHNh8Or5gUw@mail.gmail.com>

When I run the test suite on windows I end up with the following errors and
failures - see below.

So my basic question is. Can anyone tell me what the latest state is for
running tests on windows and in particular the state of running SSL on
windows.

When I look at the buildbots status by and large they all show the windows
results as green for python 2.7 and 3.6.

I assume then that the tests are passing. But maybe I misunderstand what
the buildbot status is telling me.

So should I be seeing these errors when the buildbots all show green. And
if I should not,  what am I doing wrong when running the tests.

Another point is regarding SSL which is why I am running the tests in the
first place. I am looking at https://twistedmatrix.com/trac/ticket/6371
with a view to getting the wincertstore working to load the system
certificates. When I checked the standard library they are also loading the
windows certificate store. So it seems best to stay in sync with them.

However, I see the following message from the test results that imply that
the SSL port to python3 has not been completed. That stops me in my tracks
and I wonder whether the SSL port for python3 is waiting for some
fundamental work to be finished off.

[SKIPPED]
Re-enable once the Python 3 SSL port is done.

twisted.test.test_internet.PortStringificationTests.testSSL



Nevertheless, when I add the patch 6371 for _sslverify and run the tests
for it, all works fine.

Then I run an https get using treq against www.google.com and
twistedmatrix.com I get a 200 and the results back,

If I run the treq test without wincertstore installed, it fails with a
wincertstore not installed message.

These simple tests imply that SSL is working, but I may be glossing over
some important missing feature.

Has anyone got some helpful suggestions?


Below are the test results:
-------------------------------


First for Python2.7.13 32bit Twisted 17.9.1 Windows 2012 R2 Server
---------------------------------------------------------------------------------------------

The sslChainLoads test I can work around by fixing the line endings.

The SSHCheckerTests I think is because conch plugin is not loaded.

However I am under the impression that conch did not work on windows anyway.

[ERROR]
    raise InvalidAuthType(authType)
twisted.cred.strcred.InvalidAuthType: sshkey

twisted.cred.test.test_strcred.SSHCheckerTests.test_isChecker
===============================================================================
[ERROR]
Traceback (most recent call last):
exceptions.ValueError: Specified chain file
'c:\twistedssl\twisted\src\twisted\internet\test\fake_CAs\chain.pem'
doesn't contain any valid certificates in PEM format.

twisted.internet.test.test_endpoints.ServerStringTests.test_sslChainLoads
-------------------------------------------------------------------------------
Ran 11883 tests in 629.094s

FAILED (skips=2890, errors=2, successes=8991)
---------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------


Second for python 3.6.3 32 bit twisted 17.9.1 on Windows 10 Pro Version
1709 (OS build 16229.309)
---------------------------------------------------------------------------------------------------------------------

The StringIO errors are because it is not available on python3

The SSH check error is I imagine the same as for python2.7

The mail and test_hook errors I have not looked into yet.


Python3.6-32

[SKIPPED]
Re-enable once the Python 3 SSL port is done.

twisted.test.test_internet.PortStringificationTests.testSSL

[FAIL]
Traceback (most recent call last):
    raise self.failureException(msg)
twisted.trial.unittest.FailTest: True is not false : Module
twisted.mail.alias exists

twisted.python.test.test_dist3.ModulesToInstallTests.test_notexist
===============================================================================
[ERROR]
Traceback (most recent call last):
  File "c:\twistedssl\twisted\src\twisted\cred\strcred.py", line 114, in
findCheckerFactory
    raise InvalidAuthType(authType)
twisted.cred.strcred.InvalidAuthType: sshkey

twisted.cred.test.test_strcred.SSHCheckerTests.test_isChecker
===============================================================================
[ERROR]
Traceback (most recent call last):
  File "c:\twistedssl\twisted\src\twisted\mail\test\test_mail.py", line 12,
in <module>
    import StringIO
builtins.ModuleNotFoundError: No module named 'StringIO'

twisted.mail.test.test_mail
===============================================================================
[ERROR]
Traceback (most recent call last):
  File "c:\twistedssl\twisted\src\twisted\mail\test\test_mailmail.py", line
10, in <module>
    from StringIO import StringIO
builtins.ModuleNotFoundError: No module named 'StringIO'

twisted.mail.test.test_mailmail
===============================================================================
[ERROR]
Traceback (most recent call last):
  File "c:\twistedssl\twisted\src\twisted\mail\maildir.py", line 20, in
<module>
    import StringIO
builtins.ModuleNotFoundError: No module named 'StringIO'

twisted.mail.test.test_options
===============================================================================
[ERROR]
Traceback (most recent call last):
    from email.Parser import Parser
builtins.ModuleNotFoundError: No module named 'email.Parser'

twisted.news.test.test_database
===============================================================================
[ERROR]
Traceback (most recent call last):
  File "c:\twistedssl\twisted\src\twisted\news\database.py", line 11, in
<module>
    import StringIO
builtins.ModuleNotFoundError: No module named 'StringIO'

twisted.news.test.test_news
===============================================================================
[ERROR]
Traceback (most recent call last):
  File "c:\twistedssl\twisted\src\twisted\news\database.py", line 11, in
<module>
    import StringIO
builtins.ModuleNotFoundError: No module named 'StringIO'

twisted.news.test.test_nntp
===============================================================================
[ERROR]
Traceback (most recent call last):
  File "c:\twistedssl\twisted\src\twisted\test\test_hook.py", line 89, in
setUp
    BaseClass.__dict__.clear()
builtins.AttributeError: 'mappingproxy' object has no attribute 'clear'

twisted.test.test_hook.HookTests.testBaseHook
twisted.test.test_hook.HookTests.testSubHook
-------------------------------------------------------------------------------
Ran 11751 tests in 299.633s

FAILED (skips=2770, failures=1, errors=9, successes=8971)

-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180317/1802fc6e/attachment-0002.html>

From adi at roiban.ro  Sat Mar 17 12:16:50 2018
From: adi at roiban.ro (Adi Roiban)
Date: Sat, 17 Mar 2018 18:16:50 +0000
Subject: [Twisted-Python] Buildmaster is down
Message-ID: <CAFycZ9dkKGr7vOHTZbTu85+ed2=7xwjs-AmSPqQNkUH34Q9TPg@mail.gmail.com>

Hi,

Today, I tried to reconfigure the Buildbot master from braid/master
and it failed.

It looks like it is missing the configuration for some slaves.
I have checked the private files, and it looks like newer slaves are missing.

I guess that the changes were made outside braid or of the
twisted-infra-secret repo and were overwritten when I have applied the
braid changes.

I don't know from where to get the latest list of slaves.

I hope that someone can help:)

Thanks!
-- 
Adi Roiban



From glyph at twistedmatrix.com  Sat Mar 17 21:34:57 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 17 Mar 2018 20:34:57 -0700
Subject: [Twisted-Python] INCOMPATIBLE CHANGE: Removal
	of	t.c.ssh.filetransfer.FileTransferClient.wasAFile
In-Reply-To: <CAFycZ9eNLOPEtGL=H97peeQg938TjGutmbDMr8sTADdx-w_b_g@mail.gmail.com>
References: <999EECC6-25E7-4F29-B7D2-3CBC6A9E2D0F@omnigroup.com>
 <CAFycZ9eNLOPEtGL=H97peeQg938TjGutmbDMr8sTADdx-w_b_g@mail.gmail.com>
Message-ID: <6FDCEC32-F7B4-484B-AAA7-35A8A8155748@twistedmatrix.com>

Hi Wim,

Thanks for following the process.  Glad to see that this got resolved.  And thanks for cleaning up our TERRIBLE HACKs :).

-g

> On Mar 7, 2018, at 2:12 AM, Adi Roiban <adi at roiban.ro> wrote:
> 
> Hi,
> 
> Thank you so much Wim for helping with this cleanup.
> 
> As commented in the PR I am +1 for this exceptions.
> 
> Cheers,
> Adi
> 
> On 6 March 2018 at 20:20, Wim Lewis <wiml at omnigroup.com> wrote:
>> In PR 949 ("Remove “terrible hack” in t.c.ssh.filetransfer.FileTransferClient", trac bug 9362) I'm removing an attribute of FileTransferClient which I'm pretty sure was never intended to be public. Adi Roiban points out that this is technically a compatibility-breaking change, though, and so it needs more public review.
>> 
>> My reasoning for thinking that this will not break any user code: the attribute, although not prefixed with an underscore, was undocumented; anyone relying on it would have had to read the source code to discover what it does, and in the source it was commented as a "TERRIBLE HACK". I'd hope this would be enough of a warning. (Also, I can't think of a use for it.)
>> 
>> trac: https://twistedmatrix.com/trac/ticket/9362
>> pr: https://github.com/twisted/twisted/pull/949
>> 
>> 
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> 
> -- 
> Adi Roiban
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From glyph at twistedmatrix.com  Sat Mar 17 22:25:35 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 17 Mar 2018 21:25:35 -0700
Subject: [Twisted-Python] New member of the
	twisted/twisted-contributors	team.
In-Reply-To: <CAFycZ9ct+ZnvE=8O+pXGWeqh3ZF2NSa+gwpRXPAySNWBPw5ezw@mail.gmail.com>
References: <CAFycZ9ct+ZnvE=8O+pXGWeqh3ZF2NSa+gwpRXPAySNWBPw5ezw@mail.gmail.com>
Message-ID: <686F5388-8AFD-4257-BC23-9E1B4C64C9E2@twistedmatrix.com>



> On Mar 15, 2018, at 3:35 AM, Adi Roiban <adi at roiban.ro> wrote:
> 
> Hi,
> 
> Just a quick announcement.
> 
> I made Ilya Skriblovsky (https://github.com/IlyaSkriblovsky) a member
> of twisted/twisted-contributors team.
> 
> The main reason is to make it easier to work with Ilya and allow him
> to run tests on Buildbot.
> 
> Let me know if you want this change reverted.

Far from it.  We need all the help we can get right now :).

Congratulations, Ilya!  I hope Adi already told you this, but please read https://twistedmatrix.com/trac/wiki/CommitterCheckList <https://twistedmatrix.com/trac/wiki/CommitterCheckList>, and welcome to the team :).

In the past we've had some hand-wringing on this list about how exactly our "become a committer" process should work.  Given the growing length of the review queue, I should just say: if you want to become a Twisted project member, now's your chance.  If you'll commit to doing even 1 review a month, I'll be happy to hand out repo:write privileges at this point to anyone whose name I can passably recognize and who has a stated interest :).

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180317/78ebb6f5/attachment-0002.html>

From glyph at twistedmatrix.com  Sat Mar 17 22:56:45 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 17 Mar 2018 21:56:45 -0700
Subject: [Twisted-Python] Buildmaster is down
In-Reply-To: <CAFycZ9dkKGr7vOHTZbTu85+ed2=7xwjs-AmSPqQNkUH34Q9TPg@mail.gmail.com>
References: <CAFycZ9dkKGr7vOHTZbTu85+ed2=7xwjs-AmSPqQNkUH34Q9TPg@mail.gmail.com>
Message-ID: <C4B81344-0E6D-491B-B755-0CC9495AD1E2@twistedmatrix.com>



> On Mar 17, 2018, at 11:16 AM, Adi Roiban <adi at roiban.ro> wrote:
> 
> Hi,
> 
> Today, I tried to reconfigure the Buildbot master from braid/master
> and it failed.
> 
> It looks like it is missing the configuration for some slaves.
> I have checked the private files, and it looks like newer slaves are missing.
> 
> I guess that the changes were made outside braid or of the
> twisted-infra-secret repo and were overwritten when I have applied the
> braid changes.
> 
> I don't know from where to get the latest list of slaves.
> 
> I hope that someone can help:)

It's up and running again.

I don't believe the issue was changes made outside Braid; based on the failure mode it looks to me like you had an out-of-date or edited twisted-infra-secret repo.  Please be sure to git fetch (git reset --hard origin/master ; git secret reveal) before doing anything in prod.

I just fixed it by ensuring everything was up to date, and then doing `fab config.production buildbot.update` locally.

-g


From trac at twistedmatrix.com  Sun Mar 18 00:05:25 2018
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 18 Mar 2018 06:05:25 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1521353125.2.8134576971552300725@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180318/b4383e76/attachment-0002.html>

From johnaherne at rocs.co.uk  Sun Mar 18 00:51:00 2018
From: johnaherne at rocs.co.uk (John Aherne)
Date: Sun, 18 Mar 2018 06:51:00 +0000
Subject: [Twisted-Python] RunningTwisted tests on Windows and SSL
Message-ID: <CAKmUHjbmgWtMHUx3ObMPE_27aqLoReiiU65kW0TA1_YZjJ5JUw@mail.gmail.com>

 Some clarification on running the tests.

For the tests on test_sslverify

If I apply the patches from 6371 on python2.7.13 32bit windows2012R2, the
test_sslverify runs without error or failure.

  TrustRootTests
    test_caCertsPlatformDefaults ...
 [OK]
    test_caCertsWindows ...
[OK]
    test_trustRootPlatformRejectsUntrustedCA ...
 [OK]
    test_trustRootSpecificCertificate ...
[OK]

============================================================
===================
[SKIPPED]
NPN/ALPN is present on this platform

twisted.test.test_sslverify.NPNAndALPNAbsentTests.test_
NPNAndALPNNotImplemented
twisted.test.test_sslverify.NPNAndALPNAbsentTests.test_
NegotiatedProtocolReturns
None
twisted.test.test_sslverify.NPNAndALPNAbsentTests.test_
nextProtocolMechanismsNoN
egotiationSupported
------------------------------------------------------------
-------------------
Ran 113 tests in 496.749s

PASSED (skips=3, successes=110)
------------------------------------------------------------
---------------------------------------------------------------------------



If I apply the patch on python3.6.3 32bit Windows10Pro, the test_sslverify
produces 1 error and 1 failure.

The test_caCertsWindows passes

Looking at the Error on  test_ecDoesNotBreakConstructor, I don't see where
I can find  _getEllipticCurve.

I can't see it in  OpenSSLCertificateOptions. And so far google does not
help

============================================================
===================
[FAIL]
Traceback (most recent call last):
  File "c:\twistedssl\twisted\src\twisted\test\test_sslverify.py", line
1292, in test_ecSuccessWithRealBindings
    self.assertEqual(defaultCurve, opts._ecCurve)
  File "c:\twistedssl\twisted\src\twisted\trial\_synctest.py", line 432, in
assertEqual
    super(_Assertions, self).assertEqual(first, second, msg)
  File "c:\program files (x86)\python36-32\Lib\unittest\case.py", line 829,
in assertEqual
    assertion_func(first, second, msg=msg)
  File "c:\program files (x86)\python36-32\Lib\unittest\case.py", line 822,
in _baseAssertEqual
    raise self.failureException(msg)
twisted.trial.unittest.FailTest: <Curve 'prime256v1'> !=
<twisted.internet._sslverify._OpenSSLECCurve object at 0x06B4FDF0>

twisted.test.test_sslverify.OpenSSLOptionsTests.test_
ecSuccessWithRealBindings
============================================================
===================
[ERROR]
Traceback (most recent call last):
  File "c:\twistedssl\twisted\src\twisted\test\test_sslverify.py", line
1254, in test_ecDoesNotBreakConstructor
    sslverify.OpenSSLCertificateOptions, "_getEllipticCurve", missing)
  File "c:\twistedssl\twisted\src\twisted\trial\_synctest.py", line 1086,
in patch
    monkeyPatch.patch()
  File "c:\twistedssl\twisted\src\twisted\python\monkey.py", line 53, in
patch
    self._originals.append((obj, name, getattr(obj, name)))
builtins.AttributeError: type object 'OpenSSLCertificateOptions' has no
attribute '_getEllipticCurve'

twisted.test.test_sslverify.OpenSSLOptionsTests.test_
ecDoesNotBreakConstructor
------------------------------------------------------------
-------------------
Ran 113 tests in 185.166s

FAILED (skips=3, failures=1, errors=1, successes=108)

The following is what monkeypatch is working with

    test_ecDoesNotBreakConstructor ... *******PATCH******* <class
'twisted.internet._sslverify.OpenSSLCertificateOptions'>

*******PATCH******* _getEllipticCurve
                                           [ERROR]


    test_caCertsPlatformDefaults ...
 [OK]
    test_caCertsWindows ...
[OK]
    test_trustRootPlatformRejectsUntrustedCA ...
 [OK]

Any pointers would be welcome

John Aherne



-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180318/224455f4/attachment-0002.html>

From ilyaskriblovsky at gmail.com  Sun Mar 18 01:50:28 2018
From: ilyaskriblovsky at gmail.com (Ilya Skriblovsky)
Date: Sun, 18 Mar 2018 07:50:28 +0000
Subject: [Twisted-Python] New member of the twisted/twisted-contributors
	team.
In-Reply-To: <686F5388-8AFD-4257-BC23-9E1B4C64C9E2@twistedmatrix.com>
References: <CAFycZ9ct+ZnvE=8O+pXGWeqh3ZF2NSa+gwpRXPAySNWBPw5ezw@mail.gmail.com>
 <686F5388-8AFD-4257-BC23-9E1B4C64C9E2@twistedmatrix.com>
Message-ID: <CAOG7vkxaZ9rMcAYFP8wPo_OdUY4VFno5Wh51rCkPQp6WL2jBrA@mail.gmail.com>

Thanks, I greatly appreciate!

I'll try to find time to commit it to reviews

вс, 18 мар. 2018 г., 7:26 Glyph <glyph at twistedmatrix.com>:

>
>
> On Mar 15, 2018, at 3:35 AM, Adi Roiban <adi at roiban.ro> wrote:
>
> Hi,
>
> Just a quick announcement.
>
> I made Ilya Skriblovsky (https://github.com/IlyaSkriblovsky) a member
> of twisted/twisted-contributors team.
>
> The main reason is to make it easier to work with Ilya and allow him
> to run tests on Buildbot.
>
> Let me know if you want this change reverted.
>
>
> Far from it.  We need all the help we can get right now :).
>
> Congratulations, Ilya!  I hope Adi already told you this, but please read
> https://twistedmatrix.com/trac/wiki/CommitterCheckList, and welcome to
> the team :).
>
> In the past we've had some hand-wringing on this list about how exactly
> our "become a committer" process should work.  Given the growing length of
> the review queue, I should just say: if you want to become a Twisted
> project member, now's your chance.  If you'll commit to doing even 1 review
> a month, I'll be happy to hand out repo:write privileges at this point to
> anyone whose name I can passably recognize and who has a stated interest :).
>
> -g
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180318/23015c96/attachment-0002.html>

From glyph at twistedmatrix.com  Sun Mar 18 01:52:32 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 18 Mar 2018 00:52:32 -0700
Subject: [Twisted-Python] New member of the
	twisted/twisted-contributors	team.
In-Reply-To: <CAOG7vkxaZ9rMcAYFP8wPo_OdUY4VFno5Wh51rCkPQp6WL2jBrA@mail.gmail.com>
References: <CAFycZ9ct+ZnvE=8O+pXGWeqh3ZF2NSa+gwpRXPAySNWBPw5ezw@mail.gmail.com>
 <686F5388-8AFD-4257-BC23-9E1B4C64C9E2@twistedmatrix.com>
 <CAOG7vkxaZ9rMcAYFP8wPo_OdUY4VFno5Wh51rCkPQp6WL2jBrA@mail.gmail.com>
Message-ID: <FF0C03C1-EC7C-41F6-BFE3-AF82155A2C31@twistedmatrix.com>



> On Mar 18, 2018, at 12:50 AM, Ilya Skriblovsky <ilyaskriblovsky at gmail.com> wrote:
> 
> Thanks, I greatly appreciate!
> 
> I'll try to find time to commit it to reviews

✨❤️✨

-g



From adi at roiban.ro  Sun Mar 18 05:43:49 2018
From: adi at roiban.ro (Adi Roiban)
Date: Sun, 18 Mar 2018 11:43:49 +0000
Subject: [Twisted-Python] Buildmaster is down
In-Reply-To: <C4B81344-0E6D-491B-B755-0CC9495AD1E2@twistedmatrix.com>
References: <CAFycZ9dkKGr7vOHTZbTu85+ed2=7xwjs-AmSPqQNkUH34Q9TPg@mail.gmail.com>
 <C4B81344-0E6D-491B-B755-0CC9495AD1E2@twistedmatrix.com>
Message-ID: <CAFycZ9ci_t9Mzb_JAyuTkNrYFi7cH8_-vUjxHfVgWREQXTC8-w@mail.gmail.com>

On 18 March 2018 at 04:56, Glyph <glyph at twistedmatrix.com> wrote:
>
>
>> On Mar 17, 2018, at 11:16 AM, Adi Roiban <adi at roiban.ro> wrote:
>>
>> Hi,
>>
>> Today, I tried to reconfigure the Buildbot master from braid/master
>> and it failed.

[snip]

> I don't believe the issue was changes made outside Braid; based on the failure mode it looks to me like you had an out-of-date or edited twisted-infra-secret repo.  Please be sure to git fetch (git reset --hard origin/master ; git secret reveal) before doing anything in prod.

Thanks. `git secret reveal` was the issue on my side.
I knew about git secret, but I was expecting that there will be a
warning when the decrypted version is out of sync at pull.

There is `fab config.production buildbot.reconfigure` which should
just touch the configuration, without updating the virtualenv.
Usually this is much faster.

Thanks again for the fix, my bad for getting into this!
Adi



From johnaherne at rocs.co.uk  Sun Mar 18 07:45:54 2018
From: johnaherne at rocs.co.uk (John Aherne)
Date: Sun, 18 Mar 2018 13:45:54 +0000
Subject: [Twisted-Python] RunningTwisted tests on Windows and SSL
Message-ID: <CAKmUHjZTcTUH-m0z3JQhbp-1eEKghbRO7OEv2X1oK7HqrQH0pQ@mail.gmail.com>

This is useful info for anyone else running into these issues. At least
they might save a bit of time not having to run down what is happening.


Seems that the mail,email, test_hook and StringIO errors all come from not
ported modules as seen in twisted\src\python\_setup.py.

The _getEllipticCurve error

<< builtins.AttributeError: type object 'OpenSSLCertificateOptions' has no
attribute '_getEllipticCurve'

twisted.test.test_sslverify.OpenSSLOptionsTests.test_ecDoesNotBreakConstructor
>>

is because getattr will raise an AttributeError, which is what it is doing
here. But it does not do this for python2.7.

The test is not to break if the ECCurve is missing. It is missing since it
is not found. Still looking at this.

With wincertstore being used, we get a failing test as follows:

[FAIL]
Traceback (most recent call last):
  File "c:\twistedssl\twisted\src\twisted\web\test\test_agent.py", line
1568, in test_setsTrustRootOnContextToDefaultTrustRoot
    certificateOptions.trustRoot, ssl.OpenSSLDefaultPaths)
  File "c:\twistedssl\twisted\src\twisted\trial\_synctest.py", line 649, in
assertIsInstance
    instance, classOrTuple, suffix))
twisted.trial.unittest.FailTest:
<twisted.internet._sslverify.OpenSSLWindowsCertificateAuthorities object at
0x0CFDA810> is not an instance of <class
'twisted.internet._sslverify.OpenSSLDefaultPaths'>

twisted.web.test.test_agent.WebClientContextFactoryTests.test_setsTrustRootOnContextToDefaultTrustRoot

So a new test is needed to fix this.

Also, the current patch only loads the ROOT certificates. The standard
library loads ['CA', 'ROOT'], so we should be doing the same I imagine.



-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180318/c3b57f42/attachment-0002.html>

From ralienpp at gmail.com  Sun Mar 18 09:04:52 2018
From: ralienpp at gmail.com (Alex Railean)
Date: Sun, 18 Mar 2018 16:04:52 +0100
Subject: [Twisted-Python] Strategy for finding source of unhandled error in
	Deferred
Message-ID: <295015210.20180318160452@gmail.com>

Hello,

I have inherited a misbehaving system and am trying to troubleshoot it. The code
is not documented and I cannot produce a minimal working example that illustrates
the problem yet, as I don't know which parts are involved and how they relate.

The version of Twisted used is 16.1.1, running on Fedora 15.


My first attempt is to leverage Twisted's logging capabilities and retrieve
information about the place in the code that leads to the error:

from twisted.python import log as twisted_log
observer = twisted_log.PythonLoggingObserver(loggerName='twcore')
observer.start()



This produces the following entries in the log:
Unhandled error in Deferred:
CRITICAL _legacy       twcore Unhandled error in Deferred:

Traceback (most recent call last):
Failure: __builtin__.type: <class 'twisted.internet.error.TimeoutError'>
CRITICAL _legacy       twcore



How can I get more clues about what is going on? I was expecting a line number,
or a complete call-stack.


What are the recommended troubleshooting steps for finding the Deferred in which
the error occurred?  There are are around 30 of them throughout the code, is
there a heuristic I can use to narrow down the list of suspects?










From exarkun at twistedmatrix.com  Sun Mar 18 09:21:25 2018
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Sun, 18 Mar 2018 11:21:25 -0400
Subject: [Twisted-Python] Strategy for finding source of unhandled error
 in Deferred
In-Reply-To: <295015210.20180318160452@gmail.com>
References: <295015210.20180318160452@gmail.com>
Message-ID: <CAEeXt4PYvQay7f6wPOb2HfFR7aMYPmJWj1c6E2JtTrRxyC_82Q@mail.gmail.com>

On Sun, Mar 18, 2018 at 11:04 AM, Alex Railean <ralienpp at gmail.com> wrote:

> Hello,
>
> I have inherited a misbehaving system and am trying to troubleshoot it.
> The code
> is not documented and I cannot produce a minimal working example that
> illustrates
> the problem yet, as I don't know which parts are involved and how they
> relate.
>
This produces the following entries in the log:
> Unhandled error in Deferred:
> CRITICAL _legacy       twcore Unhandled error in Deferred:
>
> Traceback (most recent call last):
> Failure: __builtin__.type: <class 'twisted.internet.error.TimeoutError'>
> CRITICAL _legacy       twcore
>
>
>
> How can I get more clues about what is going on? I was expecting a line
> number,
> or a complete call-stack.
>
>
> What are the recommended troubleshooting steps for finding the Deferred in
> which
> the error occurred?  There are are around 30 of them throughout the code,
> is
> there a heuristic I can use to narrow down the list of suspects?
>
>
>
>
>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180318/074b097b/attachment-0002.html>

From exarkun at twistedmatrix.com  Sun Mar 18 09:23:58 2018
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Sun, 18 Mar 2018 11:23:58 -0400
Subject: [Twisted-Python] Strategy for finding source of unhandled error
 in Deferred
In-Reply-To: <CAEeXt4PYvQay7f6wPOb2HfFR7aMYPmJWj1c6E2JtTrRxyC_82Q@mail.gmail.com>
References: <295015210.20180318160452@gmail.com>
 <CAEeXt4PYvQay7f6wPOb2HfFR7aMYPmJWj1c6E2JtTrRxyC_82Q@mail.gmail.com>
Message-ID: <CAEeXt4O8=qnLQ2DKPcyvwU57Ax_hdCpurUuMryA1UcuEC1T2hQ@mail.gmail.com>

On Sun, Mar 18, 2018 at 11:21 AM, Jean-Paul Calderone <
exarkun at twistedmatrix.com> wrote:

> On Sun, Mar 18, 2018 at 11:04 AM, Alex Railean <ralienpp at gmail.com> wrote:
>
>> Hello,
>>
>> I have inherited a misbehaving system and am trying to troubleshoot it.
>> The code
>> is not documented and I cannot produce a minimal working example that
>> illustrates
>> the problem yet, as I don't know which parts are involved and how they
>> relate.
>>
> This produces the following entries in the log:
>> Unhandled error in Deferred:
>> CRITICAL _legacy       twcore Unhandled error in Deferred:
>>
>> Traceback (most recent call last):
>> Failure: __builtin__.type: <class 'twisted.internet.error.TimeoutError'>
>> CRITICAL _legacy       twcore
>>
>>
>>
>> How can I get more clues about what is going on? I was expecting a line
>> number,
>> or a complete call-stack.
>>
>
Try this:

    from twisted.internet.defer import setDebugging
    setDebugging(True)

This gives you creation and callback stacks in the logs.

Jean-Paul


>
>>
>> What are the recommended troubleshooting steps for finding the Deferred
>> in which
>> the error occurred?  There are are around 30 of them throughout the code,
>> is
>> there a heuristic I can use to narrow down the list of suspects?
>>
>>
>>
>>
>>
>>
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180318/28d88ec2/attachment-0002.html>

From rodrigc at crodrigues.org  Sun Mar 18 13:17:24 2018
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Sun, 18 Mar 2018 12:17:24 -0700
Subject: [Twisted-Python] RunningTwisted tests on Windows and SSL
In-Reply-To: <CAKmUHjas5=NQzr2BmPv0gUEOcjYpTR_vAr2MPn6uHNh8Or5gUw@mail.gmail.com>
References: <CAKmUHjas5=NQzr2BmPv0gUEOcjYpTR_vAr2MPn6uHNh8Or5gUw@mail.gmail.com>
Message-ID: <CAG=rPVe_zyG4oXOXnpgkoqnKP9tt3uariNwU94pKqA3uYbv=OQ@mail.gmail.com>

Do not run the tests directly from the source tree.
Instead, you should install Twisted into a virtualenv
and run "trial twisted" from inside the virtualenv and outside the source
tree.
The installer has some logic to omit the installation of certain modules
and tests
which do not work on Python 3.

You can also run the tests by using tox as specified here:

https://github.com/twisted/twisted/blob/trunk/README.rst#unit-tests

because tox takes care of setting up the virtualenv and running the
tests inside the virtualenv.

--
Craig



On Sat, Mar 17, 2018 at 2:58 AM, John Aherne <johnaherne at rocs.co.uk> wrote:

>
>
> twisted.cred.test.test_strcred.SSHCheckerTests.test_isChecker
> ============================================================
> ===================
> [ERROR]
> Traceback (most recent call last):
>   File "c:\twistedssl\twisted\src\twisted\mail\test\test_mail.py", line
> 12, in <module>
>     import StringIO
> builtins.ModuleNotFoundError: No module named 'StringIO'
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180318/0ff53340/attachment-0002.html>

From glyph at twistedmatrix.com  Sun Mar 18 23:26:41 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 18 Mar 2018 22:26:41 -0700
Subject: [Twisted-Python] we can stop depending on pypiwin32
Message-ID: <8F2F5347-E63B-4733-B524-74D7D1B8BFE0@twistedmatrix.com>

As per the release announcement in https://mail.python.org/pipermail/python-win32/2018-February/014000.html <https://mail.python.org/pipermail/python-win32/2018-February/014000.html>, PyWin32 now does development on Github, and uploads binary wheels to PyPI, as you can see here: https://pypi.org/project/pywin32/223/#files <https://pypi.org/project/pywin32/223/#files>.  So we can stop depending on my ill-fated pypiwin32 fork.

If anybody is interested in doing some minor Windows maintenance, I would like very much to never think about PyPIWin32 again :).

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180318/6e2f1e58/attachment-0002.html>

From johnaherne at rocs.co.uk  Mon Mar 19 11:08:02 2018
From: johnaherne at rocs.co.uk (John Aherne)
Date: Mon, 19 Mar 2018 17:08:02 +0000
Subject: [Twisted-Python] RunningTwisted tests on Windows and SSL
In-Reply-To: <CAG=rPVe_zyG4oXOXnpgkoqnKP9tt3uariNwU94pKqA3uYbv=OQ@mail.gmail.com>
References: <CAKmUHjas5=NQzr2BmPv0gUEOcjYpTR_vAr2MPn6uHNh8Or5gUw@mail.gmail.com>
 <CAG=rPVe_zyG4oXOXnpgkoqnKP9tt3uariNwU94pKqA3uYbv=OQ@mail.gmail.com>
Message-ID: <CAKmUHjZVPP7QE7sRPngUr3zu2Sw-cAcB39rmpeHvzzW3fU7VAw@mail.gmail.com>

Thanks.

I was using a virtualenv.

Just loaded everything again and all is now cleaner.

Now the not ported modules don't appear.

Just have the sslChainLoads test to look at.

Regards

John Aherne




On Sun, Mar 18, 2018 at 7:17 PM, Craig Rodrigues <rodrigc at crodrigues.org>
wrote:

> Do not run the tests directly from the source tree.
> Instead, you should install Twisted into a virtualenv
> and run "trial twisted" from inside the virtualenv and outside the source
> tree.
> The installer has some logic to omit the installation of certain modules
> and tests
> which do not work on Python 3.
>
> You can also run the tests by using tox as specified here:
>
> https://github.com/twisted/twisted/blob/trunk/README.rst#unit-tests
>
> because tox takes care of setting up the virtualenv and running the
> tests inside the virtualenv.
>
> --
> Craig
>
>
>
> On Sat, Mar 17, 2018 at 2:58 AM, John Aherne <johnaherne at rocs.co.uk>
> wrote:
>
>>
>>
>> twisted.cred.test.test_strcred.SSHCheckerTests.test_isChecker
>> ============================================================
>> ===================
>> [ERROR]
>> Traceback (most recent call last):
>>   File "c:\twistedssl\twisted\src\twisted\mail\test\test_mail.py", line
>> 12, in <module>
>>     import StringIO
>> builtins.ModuleNotFoundError: No module named 'StringIO'
>>
>>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180319/06231811/attachment-0002.html>

From peter.westlake at pobox.com  Fri Mar 23 05:16:57 2018
From: peter.westlake at pobox.com (Peter Westlake)
Date: Fri, 23 Mar 2018 11:16:57 +0000
Subject: [Twisted-Python] Asynchronous code in a context manager
Message-ID: <1521803817.3234826.1313425600.055CCD14@webmail.messagingengine.com>

I have a context manager whose __exit__ method needs to run some asynchronous Twisted code. Using Crochet's @wait_for very nearly works:

no_setup()

class Example(object):
    def __exit__(t, v, tb):
            return self.cleanup()

   @wait_for
   @inlineCallbacks
    def cleanup(self):
           yield .....
           returnValue(False)

    ....

Then
     with e as Example():

This gets an error because the cleanup function is being called in the reactor thread. Using reactor.callInThread(self.cleanup()) makes it work up to a point, but it doesn't wait for the thread to finish. Is there a way to make this work? The alternative is simply to call the cleanup function explicitly from the with statement, and have the __exit__ handler throw an error if you forget. So any solution needs to be cleaner than that, or there's no point. I'm beginning to suspect that this is the case!

Peter.



From meejah at meejah.ca  Fri Mar 23 10:54:04 2018
From: meejah at meejah.ca (meejah)
Date: Fri, 23 Mar 2018 20:54:04 +0400
Subject: [Twisted-Python] Asynchronous code in a context manager
In-Reply-To: <1521803817.3234826.1313425600.055CCD14@webmail.messagingengine.com>
 (Peter Westlake's message of "Fri, 23 Mar 2018 11:16:57 +0000")
References: <1521803817.3234826.1313425600.055CCD14@webmail.messagingengine.com>
Message-ID: <86sh8q3f83.fsf@atlantis.meejah.ca>


Are you using Python3? Then there's "asynchronous context managers". I
finally found a use-case for one in txtorcon, so here's an example:

   http://txtorcon.readthedocs.io/en/latest/txtorcon-controller.html#txtorcon.Tor.onion_authentication

-- 
meejah



From rodrigc at crodrigues.org  Sat Mar 24 17:28:19 2018
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Sat, 24 Mar 2018 16:28:19 -0700
Subject: [Twisted-Python] Enable rolling builds for Appveyor
Message-ID: <CAG=rPVcSm=nXLZk50XwdZ0Ryy=2K6DWSAg4-UfK0gn0+Qfi8Mg@mail.gmail.com>

Adi,

Can you enable "rolling builds" on Appveyor:

https://www.appveyor.com/docs/build-configuration/#rolling-builds


If someone pushes a new commit to a branch, that will
stop old builds currently in-progress or queued for the branch,
and just queue the new commit for the branch.

This can be done on the settings page at:

https://ci.appveyor.com/project/adiroiban/twisted/settings

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180324/d4686cfc/attachment-0002.html>

From mrw at enotuniq.org  Sat Mar 24 18:05:54 2018
From: mrw at enotuniq.org (Mark Williams)
Date: Sat, 24 Mar 2018 17:05:54 -0700
Subject: [Twisted-Python] Enable rolling builds for Appveyor
In-Reply-To: <CAG=rPVcSm=nXLZk50XwdZ0Ryy=2K6DWSAg4-UfK0gn0+Qfi8Mg@mail.gmail.com>
References: <CAG=rPVcSm=nXLZk50XwdZ0Ryy=2K6DWSAg4-UfK0gn0+Qfi8Mg@mail.gmail.com>
Message-ID: <1521936354.3212140.1314927944.09585184@webmail.messagingengine.com>

On Sat, Mar 24, 2018, at 4:28 PM, Craig Rodrigues wrote:
> Can you enable "rolling builds" on Appveyor:

Done.

--
  Mark Williams
  mrw at enotuniq.org


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180324/1afb9eeb/attachment-0002.html>

From adi at roiban.ro  Sat Mar 24 18:35:39 2018
From: adi at roiban.ro (Adi Roiban)
Date: Sun, 25 Mar 2018 00:35:39 +0000
Subject: [Twisted-Python] Enable rolling builds for Appveyor
In-Reply-To: <CAG=rPVcSm=nXLZk50XwdZ0Ryy=2K6DWSAg4-UfK0gn0+Qfi8Mg@mail.gmail.com>
References: <CAG=rPVcSm=nXLZk50XwdZ0Ryy=2K6DWSAg4-UfK0gn0+Qfi8Mg@mail.gmail.com>
Message-ID: <CAFycZ9cSrvAF4jRD2KbwqAbO63Nr++PCf++M_sMY=K9n-MZ0GA@mail.gmail.com>

On 24 March 2018 at 23:28, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> Adi,
>
> Can you enable "rolling builds" on Appveyor:
>
> https://www.appveyor.com/docs/build-configuration/#rolling-builds
>
>
> If someone pushes a new commit to a branch, that will
> stop old builds currently in-progress or queued for the branch,
> and just queue the new commit for the branch.
>
> This can be done on the settings page at:
>
> https://ci.appveyor.com/project/adiroiban/twisted/settings

Mark is fast :)

While the Appveyor is set up under my username, I think that the whole
Twisted team has admin permissions.

Not sure if automatically, or someone else is manually adding team members.
I see that Ilya Skriblovsky is onboard :)

Craig, you are registered as admin using the bsd email address.
Let us know if you are using other email for Appveyor.

I would like to move this to something like
https://ci.appveyor.com/project/TWISTED/twisted/, but I don't know
how.

-- 
Adi Roiban



From rodrigc at crodrigues.org  Sat Mar 24 18:46:13 2018
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Sat, 24 Mar 2018 17:46:13 -0700
Subject: [Twisted-Python] Enable rolling builds for Appveyor
In-Reply-To: <CAFycZ9cSrvAF4jRD2KbwqAbO63Nr++PCf++M_sMY=K9n-MZ0GA@mail.gmail.com>
References: <CAG=rPVcSm=nXLZk50XwdZ0Ryy=2K6DWSAg4-UfK0gn0+Qfi8Mg@mail.gmail.com>
 <CAFycZ9cSrvAF4jRD2KbwqAbO63Nr++PCf++M_sMY=K9n-MZ0GA@mail.gmail.com>
Message-ID: <CAG=rPVeUY+9oDCwBDCqCN8yZ-VmdbtYkhw_Dk5yYNOVM+3wCjA@mail.gmail.com>

On Sat, Mar 24, 2018 at 5:35 PM, Adi Roiban <adi at roiban.ro> wrote:

>
> Mark is fast :)
>
> While the Appveyor is set up under my username, I think that the whole
> Twisted team has admin permissions.
>
> Not sure if automatically, or someone else is manually adding team members.
> I see that Ilya Skriblovsky is onboard :)
>
> Craig, you are registered as admin using the bsd email address.
> Let us know if you are using other email for Appveyor.
>
> I would like to move this to something like
> https://ci.appveyor.com/project/TWISTED/twisted/, but I don't know
> how.
>


Thanks, Mark, for making the change.
Since I didn't set up appveyor and it isn't in my name, I didn't
want to touch anything in it without at least letting folks know on
this list.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180324/02f28c4e/attachment-0002.html>

From rodrigc at crodrigues.org  Sat Mar 24 22:14:07 2018
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Sat, 24 Mar 2018 21:14:07 -0700
Subject: [Twisted-Python] Problem with osx10.10-py2.7 builder
Message-ID: <CAG=rPVeZHjmw2RuFuzbf3jR9j=WPNsmkrGM+U9kzr7c68qTbjQ@mail.gmail.com>

Hi,

Can someone check this builder:

https://buildbot.twistedmatrix.com/builders/osx10.10-py2.7

It is failing randomly in weird ways during builds.  For example,
in some cases it fails to install tox.  In other cases, the tests terminate
in
some random spot.

This builder is marked as "Required", so it is a bit annoying.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180324/70602c43/attachment-0002.html>

From trac at twistedmatrix.com  Sun Mar 25 00:05:42 2018
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 25 Mar 2018 06:05:42 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1521957942.67.6137094562933861489@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180325/6cd98220/attachment-0002.html>

From adi at roiban.ro  Sun Mar 25 06:01:01 2018
From: adi at roiban.ro (Adi Roiban)
Date: Sun, 25 Mar 2018 13:01:01 +0100
Subject: [Twisted-Python] Problem with osx10.10-py2.7 builder
In-Reply-To: <CAG=rPVeZHjmw2RuFuzbf3jR9j=WPNsmkrGM+U9kzr7c68qTbjQ@mail.gmail.com>
References: <CAG=rPVeZHjmw2RuFuzbf3jR9j=WPNsmkrGM+U9kzr7c68qTbjQ@mail.gmail.com>
Message-ID: <CAFycZ9cnVeQcc3JxqNMjR9ki_S3PedS763LsbkcsYg0NO4L-zg@mail.gmail.com>

Hi,


On 25 March 2018 at 05:14, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> Hi,
>
> Can someone check this builder:
>
> https://buildbot.twistedmatrix.com/builders/osx10.10-py2.7
>
> It is failing randomly in weird ways during builds.  For example,
> in some cases it fails to install tox.  In other cases, the tests terminate
> in
> some random spot.

I will try and take a look at it.

If someone knows more about the slave running this build, please add
the info on wiki at:

https://twistedmatrix.com/trac/wiki/ContinuousIntegration/Buildslaves


> This builder is marked as "Required", so it is a bit annoying.
>


My understanding from the previous discussion about the supported
platforms is that any build is required.
The osx is there as I reminder to run the buildbot tests and not to
merge a PR with only Travis and Appveyor.

I have reconfigured GitHub to require  ubuntu16.04-py2.7-coverage as
this is backed by 3 slaves.



-----

We have the circle-ci macOS and for the next  2 days, we can use that :)
We are already used 55% of the macOS time and Circle-CI was enalbled
in trunk in the last 2 days...so I don't think that we can use
Circle-CI for macOS for the long term.
I will write them to see if we can get an exception or a discount.

Otherwise, I plan to rent a macOS  so that it can act as a second
slave for osx10.10-py2.7
So far, the support from macincloud was not helpful or friendly, but I
guess that we can just try their service for 1 month and see how it
goes.

-- 
Adi Roiban



From glyph at twistedmatrix.com  Mon Mar 26 00:58:54 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 25 Mar 2018 23:58:54 -0700
Subject: [Twisted-Python] Problem with osx10.10-py2.7 builder
In-Reply-To: <CAFycZ9cnVeQcc3JxqNMjR9ki_S3PedS763LsbkcsYg0NO4L-zg@mail.gmail.com>
References: <CAG=rPVeZHjmw2RuFuzbf3jR9j=WPNsmkrGM+U9kzr7c68qTbjQ@mail.gmail.com>
 <CAFycZ9cnVeQcc3JxqNMjR9ki_S3PedS763LsbkcsYg0NO4L-zg@mail.gmail.com>
Message-ID: <B5B15382-9E5F-4DA0-B058-DDFB6F470570@twistedmatrix.com>



> On Mar 25, 2018, at 5:01 AM, Adi Roiban <adi at roiban.ro> wrote:
> 
> Hi,
> 
> 
> On 25 March 2018 at 05:14, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
>> Hi,
>> 
>> Can someone check this builder:
>> 
>> https://buildbot.twistedmatrix.com/builders/osx10.10-py2.7
>> 
>> It is failing randomly in weird ways during builds.  For example,
>> in some cases it fails to install tox.  In other cases, the tests terminate
>> in
>> some random spot.
> 
> I will try and take a look at it.

Adi, myself, and Mark looked at it by turns and eventually I think we got it into a mostly working state.

Builds are now passing.  However, if you attempt to view the logs of a build in progress, it appears to fail with a purple exception.  This actually looks like it's a bug in the build master which I'm a little confused about why it isn't affecting other builders.

> If someone knows more about the slave running this build, please add
> the info on wiki at:
> 
> https://twistedmatrix.com/trac/wiki/ContinuousIntegration/Buildslaves <https://twistedmatrix.com/trac/wiki/ContinuousIntegration/Buildslaves>

Looks like you beat me to the punch: https://twistedmatrix.com/trac/wiki/ContinuousIntegration/Buildslaves/d3 <https://twistedmatrix.com/trac/wiki/ContinuousIntegration/Buildslaves/d3>

Is there other information you need?

>> This builder is marked as "Required", so it is a bit annoying.
> 
> My understanding from the previous discussion about the supported
> platforms is that any build is required.
> The osx is there as I reminder to run the buildbot tests and not to
> merge a PR with only Travis and Appveyor.
> 
> I have reconfigured GitHub to require  ubuntu16.04-py2.7-coverage as
> this is backed by 3 slaves.

Primarily it's required because it's the only reasonable way we have to verify that things work on macOS, which is by far our most popular developer operating system.  I've reverted this configuration change, since it's more reasonable to give the reviewers some discretion about the fact that Travis is representative of Linux than that a random assortment of non-macOS buildbots are representative of macOS.

> We have the circle-ci macOS and for the next  2 days, we can use that :)
> We are already used 55% of the macOS time and Circle-CI was enalbled
> in trunk in the last 2 days...so I don't think that we can use
> Circle-CI for macOS for the long term.
> I will write them to see if we can get an exception or a discount.

I would definitely like it if we could move to something hosted :).

> Otherwise, I plan to rent a macOS  so that it can act as a second
> slave for osx10.10-py2.7
> So far, the support from macincloud was not helpful or friendly, but I
> guess that we can just try their service for 1 month and see how it
> goes.

Bummer.  This seems like the sort of thing that we should have the Conservancy pay for, rather than you personally.  Better yet, of course, to get a commercially interested macOS user to supply some hardware or mac cloud boxes or something.

Alternately...

The reason we're doing this at all is that Travis's macOS situation was pretty dismal when we last tried it.  But then, the graphs on https://www.traviscistatus.com <https://www.traviscistatus.com/> at the time matched that experience: routinely there were build queues in the hundreds.  Right now the "Backlog macOS Builds for Open Source Projects" shows a completely flat line, zero for the last 24 hours.

It might be worth trying out Travis again.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180325/f976871c/attachment-0002.html>

From exarkun at twistedmatrix.com  Mon Mar 26 04:32:16 2018
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Mon, 26 Mar 2018 06:32:16 -0400
Subject: [Twisted-Python] Problem with osx10.10-py2.7 builder
In-Reply-To: <B5B15382-9E5F-4DA0-B058-DDFB6F470570@twistedmatrix.com>
References: <CAG=rPVeZHjmw2RuFuzbf3jR9j=WPNsmkrGM+U9kzr7c68qTbjQ@mail.gmail.com>
 <CAFycZ9cnVeQcc3JxqNMjR9ki_S3PedS763LsbkcsYg0NO4L-zg@mail.gmail.com>
 <B5B15382-9E5F-4DA0-B058-DDFB6F470570@twistedmatrix.com>
Message-ID: <CAEeXt4NZL=XJ6yZRX2OtwYRHGBAft1Jn5O1t2q=Jw7f5+yHn4g@mail.gmail.com>

On Mon, Mar 26, 2018 at 2:58 AM, Glyph <glyph at twistedmatrix.com> wrote:

> Alternately...
>
> The reason we're doing this at all is that Travis's macOS situation was
> pretty dismal when we last tried it.  But then, the graphs on
> https://www.traviscistatus.com at the time matched that experience:
> routinely there were build queues in the hundreds.  Right now the "Backlog
> macOS Builds for Open Source Projects" shows a completely flat line, zero
> for the last 24 hours.
>
> It might be worth trying out Travis again.
>

FWIW, I moved another project's macOS CI from Travis to CircleCI about a
month ago because the Travis macOS job queue was so long.  Counting queue
time, CircleCI finishes those jobs around 6x faster than TravisCI.

Maybe things have improved on Travis but they're still pretty bad.

Jean-Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180326/334e6bf7/attachment-0002.html>

From peter.westlake at pobox.com  Mon Mar 26 06:47:40 2018
From: peter.westlake at pobox.com (Peter Westlake)
Date: Mon, 26 Mar 2018 13:47:40 +0100
Subject: [Twisted-Python] Asynchronous code in a context manager
In-Reply-To: <86sh8q3f83.fsf@atlantis.meejah.ca>
References: <1521803817.3234826.1313425600.055CCD14@webmail.messagingengine.com>
 <86sh8q3f83.fsf@atlantis.meejah.ca>
Message-ID: <1522068460.1654826.1316230416.1DD2CED7@webmail.messagingengine.com>

Sadly, no. Should have said, sorry: it's 2.7.3.

Peter.

On Fri, 23 Mar 2018, at 17:54, meejah wrote:
> 
> Are you using Python3? Then there's "asynchronous context managers". I
> finally found a use-case for one in txtorcon, so here's an example:
> 
>    
> http://txtorcon.readthedocs.io/en/latest/txtorcon-controller.html#txtorcon.Tor.onion_authentication
> 
> -- 
> meejah
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From barry.scott at forcepoint.com  Mon Mar 26 08:47:00 2018
From: barry.scott at forcepoint.com (Barry Scott)
Date: Mon, 26 Mar 2018 15:47:00 +0100
Subject: [Twisted-Python] Strategy for finding source of unhandled error
	in Deferred
In-Reply-To: <CAEeXt4O8=qnLQ2DKPcyvwU57Ax_hdCpurUuMryA1UcuEC1T2hQ@mail.gmail.com>
References: <295015210.20180318160452@gmail.com>
 <CAEeXt4PYvQay7f6wPOb2HfFR7aMYPmJWj1c6E2JtTrRxyC_82Q@mail.gmail.com>
 <CAEeXt4O8=qnLQ2DKPcyvwU57Ax_hdCpurUuMryA1UcuEC1T2hQ@mail.gmail.com>
Message-ID: <2336641.NTemcomRiW@barry-scott-desktop>

On Sunday, 18 March 2018 15:23:58 BST Jean-Paul Calderone wrote:
> On Sun, Mar 18, 2018 at 11:21 AM, Jean-Paul Calderone <
> 
> exarkun at twistedmatrix.com> wrote:
> > On Sun, Mar 18, 2018 at 11:04 AM, Alex Railean <ralienpp at gmail.com> wrote:
> >> Hello,
> >> 
> >> I have inherited a misbehaving system and am trying to troubleshoot it.
> >> The code
> >> is not documented and I cannot produce a minimal working example that
> >> illustrates
> >> the problem yet, as I don't know which parts are involved and how they
> >> relate.
> > 
> > This produces the following entries in the log:
> >> Unhandled error in Deferred:
> >> CRITICAL _legacy       twcore Unhandled error in Deferred:
> >> 
> >> Traceback (most recent call last):
> >> Failure: __builtin__.type: <class 'twisted.internet.error.TimeoutError'>
> >> CRITICAL _legacy       twcore
> >> 
> >> 
> >> 
> >> How can I get more clues about what is going on? I was expecting a line
> >> number,
> >> or a complete call-stack.
> 
> Try this:
> 
>     from twisted.internet.defer import setDebugging
>     setDebugging(True)
> 
> This gives you creation and callback stacks in the logs.

If you need to track down who put the value into the deferred
you need to patch the defer.py code to log that info.

There are 2 places that a value enters the Deferred.
The first is the callback() call. The other is in

defer.py:653 Deffered._runCallbacks()

653:                        current.result = callback(current.result, *args, 
**kw)

Barry


> 
> Jean-Paul
> 
> >> What are the recommended troubleshooting steps for finding the Deferred
> >> in which
> >> the error occurred?  There are are around 30 of them throughout the code,
> >> is
> >> there a heuristic I can use to narrow down the list of suspects?
> >> 
> >> 
> >> 
> >> 
> >> 
> >> 
> >> 
> >> 
> >> _______________________________________________
> >> Twisted-Python mailing list
> >> Twisted-Python at twistedmatrix.com
> >> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python






From exarkun at twistedmatrix.com  Mon Mar 26 08:57:58 2018
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Mon, 26 Mar 2018 10:57:58 -0400
Subject: [Twisted-Python] Strategy for finding source of unhandled error
 in Deferred
In-Reply-To: <2336641.NTemcomRiW@barry-scott-desktop>
References: <295015210.20180318160452@gmail.com>
 <CAEeXt4PYvQay7f6wPOb2HfFR7aMYPmJWj1c6E2JtTrRxyC_82Q@mail.gmail.com>
 <CAEeXt4O8=qnLQ2DKPcyvwU57Ax_hdCpurUuMryA1UcuEC1T2hQ@mail.gmail.com>
 <2336641.NTemcomRiW@barry-scott-desktop>
Message-ID: <CAEeXt4O-DZ9NBuWd1uz8MFO=H4a9vVjWg=e31YDNhM+nRLcNeg@mail.gmail.com>

On Mon, Mar 26, 2018 at 10:47 AM, Barry Scott <barry.scott at forcepoint.com>
wrote:

> On Sunday, 18 March 2018 15:23:58 BST Jean-Paul Calderone wrote:
> >
> > Try this:
> >
> >     from twisted.internet.defer import setDebugging
> >     setDebugging(True)
> >
> > This gives you creation and callback stacks in the logs.
>
> If you need to track down who put the value into the deferred
> you need to patch the defer.py code to log that info.
>
> There are 2 places that a value enters the Deferred.
> The first is the callback() call. The other is in
>
> defer.py:653 Deffered._runCallbacks()
>
> 653:                        current.result = callback(current.result,
> *args,
> **kw)
>

No, you don't:

exarkun at baryon:/tmp$ cat deferreddebug.py
from twisted.internet.defer import fail, setDebugging
setDebugging(True)
def foo():
    return fail(Exception("boo"))
foo()
exarkun at baryon:/tmp$ python deferreddebug.py
Unhandled error in Deferred:
(debug:  C: Deferred was created:
 C:  File "deferreddebug.py", line 5, in <module>
 C:    foo()
 C:  File "deferreddebug.py", line 4, in foo
 C:    return fail(Exception("boo"))
 C:  File
"/home/exarkun/.local/lib/python2.7/site-packages/twisted/internet/defer.py",
line 106, in fail
 C:    d = Deferred()
 I: First Invoker was:
 I:  File "deferreddebug.py", line 5, in <module>
 I:    foo()
 I:  File "deferreddebug.py", line 4, in foo
 I:    return fail(Exception("boo"))
 I:  File
"/home/exarkun/.local/lib/python2.7/site-packages/twisted/internet/defer.py",
line 107, in fail
 I:    d.errback(result)
)
exarkun at baryon:/tmp$


Although it is true that you only get this behavior for the "Unhandled
error in Deferred" case.  If you explicitly log a Failure from a Deferred,
even with Deferred debugging on, you will not get a callstack for the
creator or invoker.  You'll just get whatever callstack the Failure has
(and the Failure is independent of the Deferred).

Jean-Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180326/d28abce9/attachment-0002.html>

From veeresh at khanorkar.com  Mon Mar 26 12:36:56 2018
From: veeresh at khanorkar.com (Khanorkar, Veeresh)
Date: Mon, 26 Mar 2018 18:36:56 +0000
Subject: [Twisted-Python] Anonymous ESMTP Server
Message-ID: <CAN_99b+Eo13AJoACnCSju8EN+=j-aOzLRpnwpgaX2hBixqHepA@mail.gmail.com>

All,

In order to accomdate a very old system, I need to write anonymous esmtp
server.

Is a sample code available somewhere?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180326/26aad2d3/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Mar 26 23:39:21 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 26 Mar 2018 22:39:21 -0700
Subject: [Twisted-Python] Problem with osx10.10-py2.7 builder
In-Reply-To: <CAEeXt4NZL=XJ6yZRX2OtwYRHGBAft1Jn5O1t2q=Jw7f5+yHn4g@mail.gmail.com>
References: <CAG=rPVeZHjmw2RuFuzbf3jR9j=WPNsmkrGM+U9kzr7c68qTbjQ@mail.gmail.com>
 <CAFycZ9cnVeQcc3JxqNMjR9ki_S3PedS763LsbkcsYg0NO4L-zg@mail.gmail.com>
 <B5B15382-9E5F-4DA0-B058-DDFB6F470570@twistedmatrix.com>
 <CAEeXt4NZL=XJ6yZRX2OtwYRHGBAft1Jn5O1t2q=Jw7f5+yHn4g@mail.gmail.com>
Message-ID: <B00F7EB6-7D9E-4FF6-9488-479F19FB99C4@twistedmatrix.com>



> On Mar 26, 2018, at 3:32 AM, Jean-Paul Calderone <exarkun at twistedmatrix.com> wrote:
> 
> On Mon, Mar 26, 2018 at 2:58 AM, Glyph <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> Alternately...
> 
> The reason we're doing this at all is that Travis's macOS situation was pretty dismal when we last tried it.  But then, the graphs on https://www.traviscistatus.com <https://www.traviscistatus.com/> at the time matched that experience: routinely there were build queues in the hundreds.  Right now the "Backlog macOS Builds for Open Source Projects" shows a completely flat line, zero for the last 24 hours.
> 
> It might be worth trying out Travis again.
> 
> FWIW, I moved another project's macOS CI from Travis to CircleCI about a month ago because the Travis macOS job queue was so long.  Counting queue time, CircleCI finishes those jobs around 6x faster than TravisCI.
> 
> Maybe things have improved on Travis but they're still pretty bad.

That's a bummer, but thanks for providing the data point.

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180326/b7a7d7e0/attachment-0002.html>

From palbrecht at glccom.com  Tue Mar 27 13:32:10 2018
From: palbrecht at glccom.com (Paul Albrecht)
Date: Tue, 27 Mar 2018 19:32:10 +0000
Subject: [Twisted-Python] twistd script python path
Message-ID: <3B09F76B-0AF7-4D7D-AC60-0F751551D696@glccom.com>

Hi,

I'm trying to debug a memory leak in a twisted application and I’d like to use tracemalloc. Unfortunately, the application hasn’t been updated to python 3 so I have to patch python 2.7. Here’s my problem: After downloading and compiling python in /usr/local, I tried running my twisted application with the twistd in /usr/local, but it uses the python in /usr/bin. My question: How do I get twistd to use the python in /usr/local? 

From glyph at twistedmatrix.com  Tue Mar 27 16:54:10 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 27 Mar 2018 15:54:10 -0700
Subject: [Twisted-Python] Problem with osx10.10-py2.7 builder
In-Reply-To: <B00F7EB6-7D9E-4FF6-9488-479F19FB99C4@twistedmatrix.com>
References: <CAG=rPVeZHjmw2RuFuzbf3jR9j=WPNsmkrGM+U9kzr7c68qTbjQ@mail.gmail.com>
 <CAFycZ9cnVeQcc3JxqNMjR9ki_S3PedS763LsbkcsYg0NO4L-zg@mail.gmail.com>
 <B5B15382-9E5F-4DA0-B058-DDFB6F470570@twistedmatrix.com>
 <CAEeXt4NZL=XJ6yZRX2OtwYRHGBAft1Jn5O1t2q=Jw7f5+yHn4g@mail.gmail.com>
 <B00F7EB6-7D9E-4FF6-9488-479F19FB99C4@twistedmatrix.com>
Message-ID: <1522191250.3622996.1318320048.778C9DEB@webmail.messagingengine.com>




On Mon, Mar 26, 2018, at 10:39 PM, Glyph wrote:
> 
> 
>> On Mar 26, 2018, at 3:32 AM, Jean-Paul Calderone
>> <exarkun at twistedmatrix.com> wrote:>> 
>> On Mon, Mar 26, 2018 at 2:58 AM, Glyph
>> <glyph at twistedmatrix.com> wrote:>>> Alternately...
>>> 
>>> The reason we're doing this at all is that Travis's macOS situation
>>> was pretty dismal when we last tried it.  But then, the graphs on
>>> https://www.traviscistatus.com[1] at the time matched that
>>> experience: routinely there were build queues in the hundreds.
>>> Right now the "Backlog macOS Builds for Open Source Projects" shows
>>> a completely flat line, zero for the last 24 hours.>>> 
>>> It might be worth trying out Travis again.
>> 
>> FWIW, I moved another project's macOS CI from Travis to CircleCI
>> about a month ago because the Travis macOS job queue was so long.
>> Counting queue time, CircleCI finishes those jobs around 6x faster
>> than TravisCI.>> 
>> Maybe things have improved on Travis but they're still pretty bad.
> 
> That's a bummer, but thanks for providing the data point.
> 
> -g


I guess I just needed to look during the PST workday... 
 


Links:

  1. https://www.traviscistatus.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180327/53a7a541/attachment-0002.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: image.png
Type: image/png
Size: 23592 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20180327/53a7a541/attachment-0002.png>

From twisted-python at 2xlp.com  Wed Mar 28 13:56:05 2018
From: twisted-python at 2xlp.com (jonathan vanasco)
Date: Wed, 28 Mar 2018 15:56:05 -0400
Subject: [Twisted-Python] twistd script python path
In-Reply-To: <3B09F76B-0AF7-4D7D-AC60-0F751551D696@glccom.com>
References: <3B09F76B-0AF7-4D7D-AC60-0F751551D696@glccom.com>
Message-ID: <36C923B4-1118-453E-A1E4-FA236A6AD671@2xlp.com>


> On Mar 27, 2018, at 3:32 PM, Paul Albrecht <palbrecht at glccom.com> wrote:
> 
> I'm trying to debug a memory leak in a twisted application and I’d like to use tracemalloc. Unfortunately, the application hasn’t been updated to python 3 so I have to patch python 2.7. Here’s my problem: After downloading and compiling python in /usr/local, I tried running my twisted application with the twistd in /usr/local, but it uses the python in /usr/bin. My question: How do I get twistd to use the python in /usr/local? 

for this sort of stuff I just use a virtualenv created with an explicit python:

something like this:

	iPood:~ jonathan$ virtualenv —python=/usr/local/python issue-debug-venv
	iPood:~ jonathan$ source issue-debug-venv/bin/activate
	(issue-debug-venv) iPoodd:~ jonathan$ pip install {{twisted version}}

that should install a twistd into `issue-debug-venv/bin` which uses the specified virtualenv. 




