From glyph at twistedmatrix.com  Sat Mar  1 00:08:19 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 28 Feb 2003 23:08:19 -0600 (CST)
Subject: [Twisted-Python] [OT] Make Python Faster
In-Reply-To: <20030301042000.GA22038@meson.dyndns.org>
References: <20030301042000.GA22038@meson.dyndns.org>
Message-ID: <20030228.230819.59483150.glyph@twistedmatrix.com>


On Fri, 28 Feb 2003 23:20:00 -0500, Jp Calderone <exarkun at intarweb.us> wrote:
>   I don't propose this for inclusion with Twisted, but if anyone wants to
> apply it to their local copy and run real apps with it, it would be helpful
> to Python, and I'm sure Skip would appreciate the extra data points.

I disagree.  This is exactly the kind of thing that we should make easy, to
give the Python developers, and ourselves, as much useful information as we can
about the community.  It should perhaps not be a default, but having a flag to
twistd (maybe --profile-me-harder?) so that people have a "one click" way to
report their run-time results would increase the number of people using it, I'm
sure.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030228/2e27e0e6/attachment.pgp 

From exarkun at intarweb.us  Sat Mar  1 12:30:39 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Sat, 1 Mar 2003 12:30:39 -0500
Subject: [Twisted-Python] [OT] Make Python Faster
In-Reply-To: <20030228.230819.59483150.glyph@twistedmatrix.com>
References: <20030301042000.GA22038@meson.dyndns.org> <20030228.230819.59483150.glyph@twistedmatrix.com>
Message-ID: <20030301173039.GA26786@meson.dyndns.org>

On Fri, Feb 28, 2003 at 11:08:19PM -0600, Glyph Lefkowitz wrote:
> 
> On Fri, 28 Feb 2003 23:20:00 -0500, Jp Calderone <exarkun at intarweb.us> wrote:
> >   I don't propose this for inclusion with Twisted, but if anyone wants to
> > apply it to their local copy and run real apps with it, it would be helpful
> > to Python, and I'm sure Skip would appreciate the extra data points.
> 
> I disagree.  This is exactly the kind of thing that we should make easy, to
> give the Python developers, and ourselves, as much useful information as we can
> about the community.  It should perhaps not be a default, but having a flag to
> twistd (maybe --profile-me-harder?) so that people have a "one click" way to
> report their run-time results would increase the number of people using it, I'm
> sure.

  Thy will be done!

  Jp

-- 
http://catandgirl.com/view.cgi?44
-- 
 up 20 days, 22:29, 4 users, load average: 0.45, 0.27, 0.26
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030301/8847e38c/attachment.pgp 

From acapnotic at twistedmatrix.com  Sat Mar  1 19:38:09 2003
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 01 Mar 2003 16:38:09 -0800
Subject: [Twisted-Python] GtkWindow
In-Reply-To: <b3o9v3$is2$1@main.gmane.org>
References: <b3o9v3$is2$1@main.gmane.org>
Message-ID: <1046565487.1165.153.camel@troglodyte.funhouse>

On Fri, 2003-02-28 at 10:31, Philippe Lafoucri?re wrote:
> manhole pygtk seems to be outdated !

It is you sir who are outdated!  That is to say, this was Fixed In CVS
on or about Feb 23rd, and will be in the next release.

Cheers,

 - Kevin

-- 
The moon is new, 2.0% illuminated, 28.2 days old.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030301/d8bb4382/attachment.pgp 

From lafou at wanadoo.fr  Sun Mar  2 05:26:13 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: Sun, 02 Mar 2003 11:26:13 +0100
Subject: [Twisted-Python] Re: GtkWindow
References: <b3o9v3$is2$1@main.gmane.org> <1046565487.1165.153.camel@troglodyte.funhouse>
Message-ID: <b3sm8k$18n$1@main.gmane.org>

Excuse-me

I discovered Twisted a few days ago, and work with the STABLE version (which 
is obviously not stable :p ).

Do you have any idea of the next release date ?

Thank you

Philippe

Kevin Turner wrote:

> On Fri, 2003-02-28 at 10:31, Philippe Lafoucri?re wrote:
>> manhole pygtk seems to be outdated !
> 
> It is you sir who are outdated!  That is to say, this was Fixed In CVS
> on or about Feb 23rd, and will be in the next release.
> 
> Cheers,
> 
>  - Kevin
> 





From twisted at itamarst.org  Sun Mar  2 11:51:06 2003
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 2 Mar 2003 11:51:06 -0500
Subject: [Twisted-Python] PEP 308 (ternary operation) voting is open
Message-ID: <20030302115106.616fbf3c.twisted@itamarst.org>

http://mail.python.org/pipermail/python-announce-list/2003-March/002083.html

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting
***> Stop the war: http://unitedforpeace.org/ <***



From cce at clarkevans.com  Mon Mar  3 13:17:48 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Mon, 3 Mar 2003 18:17:48 +0000
Subject: [Twisted-Python] threadable.init() operation
Message-ID: <20030303181748.GA48059@doublegemini.com>

I've read the threading/enterprise howtos and am still
trying to grok thread <-> event loop communication.  In
particular, I'm curious what exactly what threadable.init()
does.  I was expecting something rather simple, which 
implementes communcation between the main event pump and
each thread (callInThread, callFromThread).  However, this
code seems to be doing much more than that, and I don't
quite understand what it is doing or why.  A bit of a 
primer would be great.

I'm asking this question beacuse adbapi isn't quite what
I need and before I go hacking around I was trying to get
a firmer grip on thread <-> event loop communication.

Best,

Clark



From cce at clarkevans.com  Mon Mar  3 19:15:37 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Tue, 4 Mar 2003 00:15:37 +0000
Subject: [Twisted-Python] fetchmany and deferreds which call back more than once
Message-ID: <20030304001537.GA50334@doublegemini.com>

I have a result set with potentially 100's (1000's or more) 
of rows from a database that I need to stream back to the 
client after HTML formatting.  Anyway, I've looked at the
enterprise adapter, and it only returns "once" for a given
query with the return value of fetchall() of the cursor.
While this is interesting, what I'd really like is a way
to pass "chunks" of the result back via fetchmany(). 
 
I'm kinda stumped as to where to begin, I've gone through
much of the database adapter and threading and deferred
code but don't quite know where to start.

On a related item, some database adapters (pypgsql) have
a non-blocking execute so that you can pool for results
instead of blocking.  I was wondering how the above 
"producer" mechanism could be used without requiring
threads (via pooling now and again).

Best,

Clark



From andrewextra at puzzling.org  Mon Mar  3 19:24:56 2003
From: andrewextra at puzzling.org (andrewextra at puzzling.org)
Date: Mon, 3 Mar 2003 19:24:56 -0500 (EST)
Subject: [Twisted-Python] fetchmany and deferreds which call back more 
     than once
In-Reply-To: <20030304001537.GA50334@doublegemini.com>
References: <20030304001537.GA50334@doublegemini.com>
Message-ID: <1378.202.129.64.242.1046737496.squirrel@mail.puzzling.org>

> On a related item, some database adapters (pypgsql) have
> a non-blocking execute so that you can pool for results
                                         ^^^^
> instead of blocking.  I was wondering how the above
> "producer" mechanism could be used without requiring
> threads (via pooling now and again).
               ^^^^^^^

Do you mean "poll"/"polling"?

-Andrew.




From cce at clarkevans.com  Tue Mar  4 00:46:48 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Tue, 4 Mar 2003 05:46:48 +0000
Subject: [Twisted-Python] patch implementing deferIterationToThread
Message-ID: <20030304054648.GA51485@doublegemini.com>

Please find a patch to internet/defer.py and iternet/threads.py
which enables an "iterator" to be deferred to a thread.  This is
useful since often you have a long running process (a database
query for example) which you'd like to return results every
once and a while rather than delivering all of the output 
at the end of the process.  This patch adds to the given
files (it doesn't change any code).

The remainder of the message is hereby public domain.

#
# code to append to defer.py
#
class MultiCallDeferred(Deferred):
    """This is a verision of Deferred which can be invoked more
       than once.  This is accomplished by cloning the current
       deferred object and carrying out the callbacks on the clone.
    """
    def _startRunCallbacks(self, result, isError):
        clone = Deferred()
        clone.default = self.default
        for x in self.callbacks:
            clone.callbacks.append(x)
        clone._startRunCallbacks(result, isError)

#
# code to be added to threads.py
#
def _putIterationInDeferred(deferred, f, args, kwargs):
    """Send the results of an iteration to a deferred.
       The function called should return an object
       with a next() operator.  This is the ideal mechanism
       to defer a generator.
    """
    from twisted.internet import reactor
    try:
        itr = apply(f, args, kwargs)
        while 1:
            reactor.callFromThread(deferred.callback, itr.next())
    except StopIteration: pass
    except:
        f = failure.Failure()
        reactor.callFromThread(deferred.errback, f)
def deferIterationToThread(f, *args, **kwargs):
    """Run the results of an iterator in a thread."""
    d = defer.MultiCallDeferred()
    reactor.callInThread(_putIterationInDeferred, d, f, args, kwargs)
    return d

#
# usage using iterators (or generators for simpler syntax)
# 
from twisted.internet.threads import deferIterationToThread
from twisted.internet import reactor
class producer:
    def __init__(self):
        self.val = 9
    def next(self):
        val = self.val
        if val < 1: raise StopIteration
        self.val -= 1
        return val
def bldr(): return producer()
def printResult(x): print x
d = deferIterationToThread(bldr)
d.addCallback(printResult)
try: # if you have generators
    from __future__ import generators
    def gene(start=99):
        while(start > 90):
            yield start
            start -= 1
    d = deferIterationToThread(gene)
    d.addCallback(printResult)
except: pass
reactor.run()




From cce at clarkevans.com  Tue Mar  4 01:16:12 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Tue, 4 Mar 2003 06:16:12 +0000
Subject: [Twisted-Python] coding standard: column width?
Message-ID: <20030304061612.GA52189@doublegemini.com>

The (very clear) coding standards don't mention a preferred column width.  
Could it be possible to add a 76 column code wrap requirement.  This is 
useful for those of us who use your aged 80 column terminals, and more 
importantly for those who want to forward/comment on code via e-mail.
Most (95%) of the code is already following this rule, and it probably
wouldn't take much effort to fix when people run into long lines that
could/should be broken up.

Clark



From cce at clarkevans.com  Tue Mar  4 01:21:06 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Tue, 4 Mar 2003 06:21:06 +0000
Subject: [Twisted-Python] fetchmany and deferreds which call back more than once
In-Reply-To: <1378.202.129.64.242.1046737496.squirrel@mail.puzzling.org>
References: <20030304001537.GA50334@doublegemini.com> <1378.202.129.64.242.1046737496.squirrel@mail.puzzling.org>
Message-ID: <20030304062106.GB52189@doublegemini.com>

On Mon, Mar 03, 2003 at 07:24:56PM -0500, andrewextra at puzzling.org wrote:
| > On a related item, some database adapters (pypgsql) have
| > a non-blocking execute so that you can pool for results
|                                          ^^^^
| Do you mean "poll"/"polling"?

Err, yai; oops.  I found in the archives Gerhard's posting [1]
and its follow up discussion which is exactly what I was 
looking for.   For the Microsoft SQL binding, I'm almost done
with a patch to enterprise/adbapi.py, using the previous patch
posted for iterators deferred to a thread.

Womble on,

Clark
[1] http://twistedmatrix.com/pipermail/twisted-python/2002-December/002419.html




From cce at clarkevans.com  Tue Mar  4 02:32:28 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Tue, 4 Mar 2003 07:32:28 +0000
Subject: [Twisted-Python] patch implementing "fetchmany" from enterprise.adbapi
Message-ID: <20030304073228.GA52396@doublegemini.com>

Please find following a patch to add the ability for fetchmany()
to be used from within the enterprise adbapi.py interface.  This
uses the patches previously posted (and included following) which
enable an iterator to be deferred via a thread.  

Basically, one can use runQueryChunked instead of runQuery 
and it will call your callback once for each "fetchmany"
return, which, depending on the database driver can be
about 10-50 rows at a time.  This is essential for incremental
handling of large query results.

The patch also tests for "threadsaftey", for some reason
mxODBC has an apilevel of "2.0" yet they are missing this
attribute (they call it threadlevel).   I'm not fond of
this part of the patch, but it is included since this
is what I tested with (I don't have permissions to change
mxODBC).

The remainder of the message is hereby public domain.

Best,

Clark

--- adbapi.py.orig	Fri Feb 28 16:51:08 2003
+++ adbapi.py	Tue Mar  4 02:01:36 2003
@@ -52,7 +52,9 @@
             log.msg("Connecting to database: %s %s %s" % (dbapiName, connargs, connkw))
         self.dbapi = reflect.namedModule(dbapiName)
         assert self.dbapi.apilevel == '2.0', 'DB API module not DB API 2.0 compliant.'
-        assert self.dbapi.threadsafety > 0, 'DB API module not sufficiently thread-safe.'
+        if hasattr(self.dbapi,"threadsaftey"):
+           test = self.dbapi.threadsaftey > 0 
+           assert test, 'DB API module not sufficiently thread-safe.'
         self.connargs = connargs
         self.connkw = connkw
         import thread
@@ -99,6 +101,21 @@
         curs.close()
         return result
 
+    def _runQueryChunked(self, args, kw):
+        conn = self.connect()
+        curs = conn.cursor()
+        apply(curs.execute, args, kw)
+        class fetchChunk:
+            def __init__(self,curs):
+                self.curs = curs
+            def next(self):
+                ret = self.curs.fetchmany()
+                if not ret:
+                    self.curs.close()
+                    raise StopIteration
+                return ret
+        return fetchChunk(curs)
+
     def _runOperation(self, args, kw):
         """This is used for non-query operations that don't want "fetch*" to be called
         """
@@ -121,6 +138,10 @@
         threads.deferToThread(self._runQuery, args, kw).addCallbacks(
             callback, errback)
 
+    def queryChunked(self, callback, errback, *args, **kw):
+        threads.deferIterationToThread(self._runQueryChunked, args, kw
+                                      ).addCallbacks(callback, errback)
+
     def operation(self, callback, errback, *args, **kw):
         threads.deferToThread(self._runOperation, args, kw).addCallbacks(
             callback, errback)
@@ -229,6 +250,11 @@
         apply(self.dbpool.query, (d.callback, d.errback)+args, kw)
         return d
 
+    def runQueryChunked(self, *args, **kw):
+        d = defer.MultiCallDeferred()
+        apply(self.dbpool.queryChunked, (d.callback, d.errback)+args, kw)
+        return d
+
     def runOperation(self, *args, **kw):
         d = defer.Deferred()
         apply(self.dbpool.operation, (d.callback,d.errback)+args, kw)



----- Forwarded message from "Clark C. Evans" <cce at clarkevans.com> -----
From: "Clark C. Evans" <cce at clarkevans.com>
To: twisted-python at twistedmatrix.com
Subject: [Twisted-Python] patch implementing deferIterationToThread
Date: Tue, 4 Mar 2003 05:46:48 +0000

Please find a patch to internet/defer.py and iternet/threads.py
which enables an "iterator" to be deferred to a thread.  This is
useful since often you have a long running process (a database
query for example) which you'd like to return results every
once and a while rather than delivering all of the output 
at the end of the process.  This patch adds to the given
files (it doesn't change any code).

The remainder of the message is hereby public domain.

#
# code to append to defer.py
#
class MultiCallDeferred(Deferred):
    """This is a verision of Deferred which can be invoked more
       than once.  This is accomplished by cloning the current
       deferred object and carrying out the callbacks on the clone.
    """
    def _startRunCallbacks(self, result, isError):
        clone = Deferred()
        clone.default = self.default
        for x in self.callbacks:
            clone.callbacks.append(x)
        clone._startRunCallbacks(result, isError)

#
# code to be added to threads.py
#
def _putIterationInDeferred(deferred, f, args, kwargs):
    """Send the results of an iteration to a deferred.
       The function called should return an object
       with a next() operator.  This is the ideal mechanism
       to defer a generator.
    """
    from twisted.internet import reactor
    try:
        itr = apply(f, args, kwargs)
        while 1:
            reactor.callFromThread(deferred.callback, itr.next())
    except StopIteration: pass
    except:
        f = failure.Failure()
        reactor.callFromThread(deferred.errback, f)
def deferIterationToThread(f, *args, **kwargs):
    """Run the results of an iterator in a thread."""
    d = defer.MultiCallDeferred()
    reactor.callInThread(_putIterationInDeferred, d, f, args, kwargs)
    return d

#
# usage using iterators (or generators for simpler syntax)
# 
from twisted.internet.threads import deferIterationToThread
from twisted.internet import reactor
class producer:
    def __init__(self):
        self.val = 9
    def next(self):
        val = self.val
        if val < 1: raise StopIteration
        self.val -= 1
        return val
def bldr(): return producer()
def printResult(x): print x
d = deferIterationToThread(bldr)
d.addCallback(printResult)
try: # if you have generators
    from __future__ import generators
    def gene(start=99):
        while(start > 90):
            yield start
            start -= 1
    d = deferIterationToThread(gene)
    d.addCallback(printResult)
except: pass
reactor.run()


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

----- End forwarded message -----



From andrewextra at puzzling.org  Tue Mar  4 02:55:16 2003
From: andrewextra at puzzling.org (andrewextra at puzzling.org)
Date: Tue, 4 Mar 2003 02:55:16 -0500 (EST)
Subject: [Twisted-Python] patch implementing 'fetchmany' from 
     enterprise.adbapi
In-Reply-To: <20030304073228.GA52396@doublegemini.com>
References: <20030304073228.GA52396@doublegemini.com>
Message-ID: <2046.202.129.64.242.1046764516.squirrel@mail.puzzling.org>

>
> The patch also tests for "threadsaftey", for some reason
> mxODBC has an apilevel of "2.0" yet they are missing this
> attribute (they call it threadlevel).   I'm not fond of
> this part of the patch, but it is included since this
> is what I tested with (I don't have permissions to change
> mxODBC).

Of course you have permissions to change mxODBC:
    import mxODBC
    mxODBC.threadsafety = mxODBC.threadlevel

:)

-Andrew.




From cce at clarkevans.com  Tue Mar  4 04:01:09 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Tue, 4 Mar 2003 09:01:09 +0000
Subject: [Twisted-Python] patch implementing 'fetchmany' from enterprise.adbapi
In-Reply-To: <2046.202.129.64.242.1046764516.squirrel@mail.puzzling.org>
References: <20030304073228.GA52396@doublegemini.com> <2046.202.129.64.242.1046764516.squirrel@mail.puzzling.org>
Message-ID: <20030304090109.GA53478@doublegemini.com>

On Tue, Mar 04, 2003 at 02:55:16AM -0500, andrewextra at puzzling.org wrote:
| >
| > The patch also tests for "threadsaftey", for some reason
| > mxODBC has an apilevel of "2.0" yet they are missing this
| > attribute (they call it threadlevel).   I'm not fond of
| > this part of the patch, but it is included since this
| > is what I tested with (I don't have permissions to change
| > mxODBC).
| 
| Of course you have permissions to change mxODBC:
|     import mxODBC
|     mxODBC.threadsafety = mxODBC.threadlevel
| 

I tried that before I hacked.  However, the threadsaftey attribute
doesn't seem to be picked up within the ConnectionPool constructor,
which is passed the fully qualified class as a string.  I'm sure
there is another way to do it...  in any case, that part of the
patch can be easily dropped.   Following is the modified patch 
without the threadsaftey hack.  ;) Clark


--- adbapi.py.orig	Fri Feb 28 16:51:08 2003
+++ adbapi.py	Tue Mar  4 02:01:36 2003
@@ -99,6 +101,21 @@
         curs.close()
         return result
 
+    def _runQueryChunked(self, args, kw):
+        conn = self.connect()
+        curs = conn.cursor()
+        apply(curs.execute, args, kw)
+        class fetchChunk:
+            def __init__(self,curs):
+                self.curs = curs
+            def next(self):
+                ret = self.curs.fetchmany()
+                if not ret:
+                    self.curs.close()
+                    raise StopIteration
+                return ret
+        return fetchChunk(curs)
+
     def _runOperation(self, args, kw):
         """This is used for non-query operations that don't want "fetch*" to be called
         """
@@ -121,6 +138,10 @@
         threads.deferToThread(self._runQuery, args, kw).addCallbacks(
             callback, errback)
 
+    def queryChunked(self, callback, errback, *args, **kw):
+        threads.deferIterationToThread(self._runQueryChunked, args, kw
+                                      ).addCallbacks(callback, errback)
+
     def operation(self, callback, errback, *args, **kw):
         threads.deferToThread(self._runOperation, args, kw).addCallbacks(
             callback, errback)
@@ -229,6 +250,11 @@
         apply(self.dbpool.query, (d.callback, d.errback)+args, kw)
         return d
 
+    def runQueryChunked(self, *args, **kw):
+        d = defer.MultiCallDeferred()
+        apply(self.dbpool.queryChunked, (d.callback, d.errback)+args, kw)
+        return d
+
     def runOperation(self, *args, **kw):
         d = defer.Deferred()
         apply(self.dbpool.operation, (d.callback,d.errback)+args, kw)



From andrew-twisted at puzzling.org  Tue Mar  4 07:58:57 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 4 Mar 2003 23:58:57 +1100
Subject: [Twisted-Python] patch implementing 'fetchmany' from enterprise.adbapi
In-Reply-To: <20030304090109.GA53478@doublegemini.com>
References: <20030304073228.GA52396@doublegemini.com> <2046.202.129.64.242.1046764516.squirrel@mail.puzzling.org> <20030304090109.GA53478@doublegemini.com>
Message-ID: <20030304125857.GB615@frobozz.local>

On Tue, Mar 04, 2003 at 09:01:09AM +0000, Clark C. Evans wrote:
> On Tue, Mar 04, 2003 at 02:55:16AM -0500, I wrote:
> |     import mxODBC
> |     mxODBC.threadsafety = mxODBC.threadlevel
> | 
> 
> I tried that before I hacked.  However, the threadsaftey attribute
> doesn't seem to be picked up within the ConnectionPool constructor,
> which is passed the fully qualified class as a string.  I'm sure
> there is another way to do it...  in any case, that part of the
> patch can be easily dropped.   Following is the modified patch 
> without the threadsaftey hack.  ;) Clark

I've done this succesfully before:
    http://twistedmatrix.com/pipermail/twisted-python/2002-August/001447.html

IIRC, the trick is to twiddle with the module *before* creating your
ConnectionPool, so that it's fixed by the time it imports the module and
checks its threadsafety attribute.

-Andrew.




From cce at clarkevans.com  Tue Mar  4 08:32:15 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Tue, 4 Mar 2003 13:32:15 +0000
Subject: [Twisted-Python] patch implementing 'fetchmany' from enterprise.adbapi
In-Reply-To: <20030304125857.GB615@frobozz.local>
References: <20030304073228.GA52396@doublegemini.com> <2046.202.129.64.242.1046764516.squirrel@mail.puzzling.org> <20030304090109.GA53478@doublegemini.com> <20030304125857.GB615@frobozz.local>
Message-ID: <20030304133215.GA55185@doublegemini.com>

On Tue, Mar 04, 2003 at 11:58:57PM +1100, Andrew Bennetts wrote:
| I've done this succesfully before:
|     http://twistedmatrix.com/pipermail/twisted-python/2002-August/001447.html
| 
| IIRC, the trick is to twiddle with the module *before* creating your
| ConnectionPool, so that it's fixed by the time it imports the module and
| checks its threadsafety attribute.

Andrew,

Thank you for your help.  I've twiddled with it for at least 40 min 
now, about 20 min before the first post and another 10-20 min now.
I've tried many permutations, including, but not limited to...

   import mx.ODBC.EasySoft
   mx.ODBC.EasySoft.threadsaftey = 1
   from twisted.enterprise import adbapi
   pool = adbapi.ConnectionPool("mx.ODBC.EasySoft","MyDSN")

Anyway, can we talk about other aspects of the patch?  This hack
really isn't important...

Clark



From tv at twistedmatrix.com  Tue Mar  4 02:38:37 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Tue, 4 Mar 2003 09:38:37 +0200
Subject: [Twisted-Python] fetchmany and deferreds which call back more than once
In-Reply-To: <20030304001537.GA50334@doublegemini.com>
References: <20030304001537.GA50334@doublegemini.com>
Message-ID: <20030304073837.GA27251@lapdog>

On Tue, Mar 04, 2003 at 12:15:37AM +0000, Clark C. Evans wrote:
> I have a result set with potentially 100's (1000's or more) 
> of rows from a database that I need to stream back to the 
> client after HTML formatting.  Anyway, I've looked at the
> enterprise adapter, and it only returns "once" for a given
> query with the return value of fetchall() of the cursor.
> While this is interesting, what I'd really like is a way
> to pass "chunks" of the result back via fetchmany(). 

	Here's what I've done, with LDAP queries that can
	return arbitrarily many results:

	http://tv.debian.net/software/ldaptor/api/public/ldaptor.pro
tocols.ldap.ldapsyntax.LDAPObject-class.html#search

	Basically, you can either pass a callback to search() that
	will be called once per result, or if you don't pass one,
	it'll gather all the results into a list. The Deferred you
	get either evaluates to None or to a list of results,
	depending on whether you passed the callback or not.

-- 
:(){ :|:&};:



From tv at twistedmatrix.com  Tue Mar  4 09:13:41 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Tue, 4 Mar 2003 16:13:41 +0200
Subject: [Twisted-Python] Uid race in t.runner.procmon
Message-ID: <20030304141341.GC13198@lapdog>

	If you use mktap -u 42, there's a race in
	twisted.runner.procmon; the first time the process is started,
	it gets started as root, the later runs happen as user
	42. This is due to the first run happening from startService,
	which is called before setuid(42).

	Either the startService() call should be delayed after the
	setuid() (separate port binding from other service startup
	things), or procmon should use something like callLater.

-- 
:(){ :|:&};:



From tv at twistedmatrix.com  Tue Mar  4 09:10:00 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Tue, 4 Mar 2003 16:10:00 +0200
Subject: [Twisted-Python] tap2deb -v/--version bug
Message-ID: <20030304141000.GB13198@lapdog>

	tap2deb --version option is overridden by global handling
	for --version that just displays the version number.

[0 tv at lapdog ~]$ tap2deb --help
Usage: tap2deb [options]
Options:
  -u, --unsigned           
  -t, --tapfile=           [default: twistd.tap]
  -m, --maintainer=        [default: ]
  -p, --protocol=          [default: ]
  -e, --description=       [default: ]
  -l, --long_description=  [default: ]
  -v, --version=           [default: 1.0]
  -d, --debfile=           
  -y, --type=              type of configuration: 'tap', 'xml, 'source' or
                           'python' [default: tap]
      --help               Display this help and exit.

tap2deb
[0 tv at lapdog ~]$ tap2deb --version=42 -t foo.tap
/usr/bin/tap2deb: option --version must not have an argument
[1 tv at lapdog ~]$ 

	Here's a patch that changes the option to --set-version=,
	and the short option to -V. Please tell if you approve this
	change.

diff -u -u -r1.9 tap2deb.py
--- twisted/scripts/tap2deb.py	3 Oct 2002 07:56:14 -0000	1.9
+++ twisted/scripts/tap2deb.py	4 Mar 2003 14:09:13 -0000
@@ -26,7 +26,7 @@
                   ["protocol", "p", ""],
                   ["description", "e", ""],
                   ["long_description", "l", ""],
-                  ["version", "v", "1.0"],
+                  ["set-version", "V", "1.0"],
                   ["debfile", "d", None],
                   ["type", "y", "tap", "type of configuration: 'tap', 'xml, 'source' or 'python'"]]
 
@@ -54,7 +54,7 @@
     base_tap_file = os.path.basename(config['tapfile'])
     protocol = (config['protocol'] or os.path.splitext(base_tap_file)[0])
     deb_file = config['debfile'] or 'twisted-'+protocol
-    version = config['version']
+    version = config['set-version']
     maintainer = config['maintainer']
     description = config['description'] or ('A TCP server for %(protocol)s' %
                                             vars())



-- 
:(){ :|:&};:



From tv at twistedmatrix.com  Tue Mar  4 09:03:33 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Tue, 4 Mar 2003 16:03:33 +0200
Subject: [Twisted-Python] mktap --uid=0 bug
Message-ID: <20030304140333.GA13198@lapdog>

	If you do mktap --uid=0 --gid=0, t.i.app ignores your
	setting and stores the uid/gid of the user running mktap.
	Here's a patch; if I hear no objections, I will commit.

Index: twisted/internet/app.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/app.py,v
retrieving revision 1.79
diff -u -u -r1.79 app.py
--- twisted/internet/app.py	1 Mar 2003 21:58:47 -0000	1.79
+++ twisted/internet/app.py	4 Mar 2003 13:55:05 -0000
@@ -281,8 +282,12 @@
             self._authorizer = a
             self._authorizer.setApplication(self)
         if platform.getType() == "posix":
-            self.uid = uid or os.getuid()
-            self.gid = gid or os.getgid()
+            if uid is None:
+                uid = os.getuid()
+            self.uid = uid
+            if gid is None:
+                gid = os.getgid()
+            self.gid = gid
 
     persistenceVersion = 12
 


-- 
:(){ :|:&};:



From iggeres at yahoo.es  Tue Mar  4 09:51:33 2003
From: iggeres at yahoo.es (=?iso-8859-1?q?Iggeres=20Bet?=)
Date: Tue, 4 Mar 2003 15:51:33 +0100 (CET)
Subject: [Twisted-Python] [Twisted Newbie] Proxies
Message-ID: <20030304145133.13174.qmail@web20106.mail.yahoo.com>

Dear Twisted List,

I am a Twisted Newbie, searching in the examples
directory I didn't find one sample to guide me how to
use the Spider with a Proxy.

I know it must be a simple solution and I would like
to know that solution.

The spider sample is very simple:

----- o -----
#!/usr/bin/python
  
from twisted.web import spider
from twisted.web import proxy
 
from twisted.internet import app
from twisted.python.util import println
 
a = app.Application("spider")
 
s = spider.SpiderSender("spider", a)
s.addTargets(['http://www.yahoo.com/'])
s.maxDepth = 1
s.notifyDownloadStart = lambda uri:
println('starting', uri)
s.notifyDownloadEnd = lambda uri: println('stopping',
uri)
a.run(save=0)
----- o ----

What is the code to use it beyond a proxy?


Thank You All
Iggeres

___________________________________________________
Yahoo! M?viles
Personaliza tu m?vil con tu logo y melod?a favorito 
en http://moviles.yahoo.es



From m at moshez.org  Tue Mar  4 11:03:33 2003
From: m at moshez.org (Moshe Zadka)
Date: 4 Mar 2003 16:03:33 -0000
Subject: [Twisted-Python] [Twisted Newbie] Proxies
In-Reply-To: <20030304145133.13174.qmail@web20106.mail.yahoo.com>
References: <20030304145133.13174.qmail@web20106.mail.yahoo.com>
Message-ID: <20030304160333.25536.qmail@green.zadka.com>

On Tue, 4 Mar 2003, =?iso-8859-1?q?Iggeres=20Bet?= <iggeres at yahoo.es> wrote:

> The spider sample is very simple:
...
> What is the code to use it beyond a proxy?

Currently, the Spider does not support proxies. Patches happily accepted.
 
-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.



From twisted at itamarst.org  Tue Mar  4 12:40:22 2003
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 4 Mar 2003 12:40:22 -0500
Subject: [Twisted-Python] threadable.init() operation
In-Reply-To: <20030303181748.GA48059@doublegemini.com>
References: <20030303181748.GA48059@doublegemini.com>
Message-ID: <20030304124022.6866d4ff.twisted@itamarst.org>

On Mon, 3 Mar 2003 18:17:48 +0000
"Clark C. Evans" <cce at clarkevans.com> wrote:

> I've read the threading/enterprise howtos and am still
> trying to grok thread <-> event loop communication.  In
> particular, I'm curious what exactly what threadable.init()
> does.  I was expecting something rather simple, which 
> implementes communcation between the main event pump and
> each thread (callInThread, callFromThread).  However, this
> code seems to be doing much more than that, and I don't
> quite understand what it is doing or why.  A bit of a 
> primer would be great.

All it really does it turn on all the threading support (e.g. locks and
whatever else modules have to set up to deal with threads and
thread-safety issues). The idea is that if you don't use threading you
shouldn't need to pay the price for locking.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting
***> Stop the war: http://unitedforpeace.org/ <***



From twisted at itamarst.org  Tue Mar  4 12:43:59 2003
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 4 Mar 2003 12:43:59 -0500
Subject: [Twisted-Python] patch implementing "fetchmany" from enterprise.adbapi
In-Reply-To: <20030304073228.GA52396@doublegemini.com>
References: <20030304073228.GA52396@doublegemini.com>
Message-ID: <20030304124359.0ac7fe72.twisted@itamarst.org>

On Tue, 4 Mar 2003 07:32:28 +0000
"Clark C. Evans" <cce at clarkevans.com> wrote:

> Please find following a patch to add the ability for fetchmany()
> to be used from within the enterprise adbapi.py interface.  This
> uses the patches previously posted (and included following) which
> enable an iterator to be deferred via a thread.  

This sounds like a good idea, and the iterator deferred thing does as
well. But, as is the fetchmany() support will only work in 2.2, I think?
This is a problem, we can't have core functionality run only in 2.2. 

Adding the deferred/iterator thing is not an issue (assuming the codee
is good, no chance to look at it yet), since that adds additional
functionality for 2.2 users. The problem is adding generally useful code
that doesn't run in 2.1.



From tv at twistedmatrix.com  Tue Mar  4 13:02:37 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Tue, 4 Mar 2003 20:02:37 +0200
Subject: [Twisted-Python] tap2deb -v/--version bug
In-Reply-To: <20030304141000.GB13198@lapdog>
References: <20030304141000.GB13198@lapdog>
Message-ID: <20030304180237.GA19482@lapdog>

On Tue, Mar 04, 2003 at 04:10:00PM +0200, Tommi Virtanen wrote:
> 	tap2deb --version option is overridden by global handling
> 	for --version that just displays the version number.

	Moshez said "go ahead and commit, but fix the manpage too", so
	I did just that.

-- 
:(){ :|:&};:



From tv at twistedmatrix.com  Tue Mar  4 13:32:40 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Tue, 4 Mar 2003 20:32:40 +0200
Subject: [Twisted-Python] mktap --uid=0 bug
In-Reply-To: <20030304140333.GA13198@lapdog>
References: <20030304140333.GA13198@lapdog>
Message-ID: <20030304183240.GB19482@lapdog>

On Tue, Mar 04, 2003 at 04:03:33PM +0200, Tommi Virtanen wrote:
> 	If you do mktap --uid=0 --gid=0, t.i.app ignores your
> 	setting and stores the uid/gid of the user running mktap.
> 	Here's a patch; if I hear no objections, I will commit.

	An updated version was just committed after review by itamar;
	as a bonus mktap now has --help for --uid and --gid, and
	understands user and group names.

-- 
:(){ :|:&};:



From matthew at yak.org  Tue Mar  4 15:15:29 2003
From: matthew at yak.org (Matthew J. Probst)
Date: Tue, 04 Mar 2003 14:15:29 -0600
Subject: [Twisted-Python] Clearer information about virtual hosts
Message-ID: <5.2.0.9.0.20030304135809.00b26db0@192.168.0.253>

I'm quite familiar with Python, but I'm having a hard time wrapping my mind 
round Twisted documentation.  I suspect that the given instructions aren't 
as useful until one understands a critical mass of the object models used, 
and that I haven't reached that point yet.

I've been trying to set up independent named virtual hosts serving static 
HTML from different directories.  I can't figure out how this can be made 
to work.  As a baseline I'm using the howto located at

http://www.twistedmatrix.com/documents/howto/using-twistedweb

Spreadable servers are mentioned, and appear to be part of the solution, 
but using the --help option on mktap shows no option allowing me to name 
each server, so how would traffic be routed to the appropriate virtual 
server?  I see VHostMonster, which can route to servers running on 
differnet ports, and I can see how that might help when combined with some 
kind of rewriting/subclassing through resources, but once again, is this 
the right model?

Perhaps the problem is that there are many models that work, with drawbacks 
and benefits, or just different qualities.  Or maybe I'm totally failing to 
see something that's obvious to those with more Twisted experience.  In any 
case, I feel like I'm just around the corner from some tidbit of 
information that will help me understand.

How about a simple example for serving static HTML?  Say I have HTML files 
in /var/www/www.foo.com and /var/www/www.bar.com, and that I want to serve 
these up as www.foo.com and www.bar.com, respectively.  Say they both 
reside on port 80 on the same server.  How might I accomplish this and get 
started with experimenting?  Granted, this does not use much of the power 
available, but would be a great start.




From cce at clarkevans.com  Tue Mar  4 16:01:20 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Tue, 4 Mar 2003 21:01:20 +0000
Subject: [Twisted-Python] fetchmany and deferreds which call back more than once
In-Reply-To: <20030304073837.GA27251@lapdog>
References: <20030304001537.GA50334@doublegemini.com> <20030304073837.GA27251@lapdog>
Message-ID: <20030304210120.GA56349@doublegemini.com>

Tommi,

Thank you for your suggestion.  Although this is nice, I was
looking for more of a cooked solution that builds on the
deferred mechanism.  For example, the mechanism you have 
doesn't really handle the case of chaining the callbacks
or any of the other nice aspects of the Deferred object.

Best,

Clark

On Tue, Mar 04, 2003 at 09:38:37AM +0200, Tommi Virtanen wrote:
| 	Here's what I've done, with LDAP queries that can
| 	return arbitrarily many results:
| 
| 	http://tv.debian.net/software/ldaptor/api/public/ldaptor.pro
| tocols.ldap.ldapsyntax.LDAPObject-class.html#search
| 
| 	Basically, you can either pass a callback to search() that
| 	will be called once per result, or if you don't pass one,
| 	it'll gather all the results into a list. The Deferred you
| 	get either evaluates to None or to a list of results,
| 	depending on whether you passed the callback or not.



From cce at clarkevans.com  Tue Mar  4 16:44:35 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Tue, 4 Mar 2003 21:44:35 +0000
Subject: [Twisted-Python] patch implementing "fetchmany" from enterprise.adbapi
In-Reply-To: <20030304124359.0ac7fe72.twisted@itamarst.org>
References: <20030304073228.GA52396@doublegemini.com> <20030304124359.0ac7fe72.twisted@itamarst.org>
Message-ID: <20030304214435.GB56349@doublegemini.com>

On Tue, Mar 04, 2003 at 12:43:59PM -0500, Itamar Shtull-Trauring wrote:
| This sounds like a good idea, and the iterator deferred thing does as
| well. But, as is the fetchmany() support will only work in 2.2, I think?
| This is a problem, we can't have core functionality run only in 2.2. 
|
| Adding the deferred/iterator thing is not an issue (assuming the codee
| is good, no chance to look at it yet), since that adds additional
| functionality for 2.2 users. The problem is adding generally useful code
| that doesn't run in 2.1.

I've made three updates to the patches:

  0) Added isError to Deferrable as in some cases this
     attribute isn't added before __del__ is invoked. 

  1) I added addFinishCallback to the MultiDeferred so that
     it is possible to be notified when iteration is finished.
     I didn't know what to call the finish_callback function...

  2) I added threads.StopIteration so that the whole mechanism
     is useable from 2.1 as well.  Besides the exception which
     marks the stop of the iteration loop, the whole iterator
     concept is more of a convention (with a wee bit of build-in
     sugar).  Since this code doesn't use the sugar, and uses
     a mock exception when the built-in exception isn't available,
     it should work well with both 2.1 and 2.2

Here are the new patches...  public domain as usual

--- defer.py.orig	Mon Mar  3 21:59:25 2003
+++ defer.py	Tue Mar  4 16:02:37 2003
@@ -94,6 +94,7 @@
     called = 0
     default = 0
     paused = 0
+    isError = 0
 
     def __init__(self):
         self.callbacks = []
@@ -291,6 +292,41 @@
             log.msg("Unhandled error in Deferred:")
             log.err(self.result)
 
+class MultiDeferred(Deferred):
+    """I am a deferred that can be called (visited) more than once.
+
+       This is a verision of Deferred where the callback can be
+       invoked as many times as necessary, but where the errback
+       can only be activated once.  This is accomplished by cloning
+       the current deferred object and carrying out the callbacks
+       on the clone.  When the callback is called, we call this
+       a 'visit'.
+
+       This Deferred adds a 'finish' callback which can be invoked
+       once all visits are completed.  Finish callbacks can be added
+       via 'addFinishCallback' and invoked with 'finish_callback'
+    """
+    def __init__(self):
+        Deferred.__init__(self)
+        self._finish = Deferred()
+    def _startRunCallbacks(self, result, isError):
+        if isError: 
+            Deferred._startRunCallbacks(result,1)
+            return
+        visit = Deferred()
+        visit.default = self.default
+        for x in self.callbacks:
+            visit.callbacks.append(x)
+        visit._startRunCallbacks(result,0)
+    def addFinishCallback(self, callback, *args, **kw):
+        """Add a callback to be executed when finished visiting"""
+        return self._finish.addCallbacks(callback, callbackArgs=args,
+                                         callbackKeywords=kw)
+    def finish_callback(self,result):
+        """Run all finish callbacks which have been added to
+           this deferred."""
+        self.called = 1
+        self._finish.callback(result)
 
 class DeferredList(Deferred):
     """I combine a group of deferreds into one callback.



--- threads.py.orig	Mon Mar  3 21:49:07 2003
+++ threads.py	Tue Mar  4 15:35:58 2003
@@ -60,5 +60,43 @@
     """
     reactor.callInThread(_runMultiple, tupleList)
 
+# support iterators for 2.1
+try: 
+   StopIteration = StopIteration  
+except:
+   class StopIteration(Exception): pass
+
+def _putIterationInDeferred(deferred, f, args, kwargs):
+    """Send the results of an iteration to a deferred.
+       The function called should return an object
+       with a next() operator.
+    """
+    from twisted.internet import reactor
+    try:
+        itr = apply(f, args, kwargs)
+        nCount = 0
+        while 1:
+            reactor.callFromThread(deferred.callback, itr.next())
+            nCount += 1
+    except StopIteration: 
+        reactor.callFromThread(deferred.finish_callback, nCount)
+    except:
+        f = failure.Failure()
+        reactor.callFromThread(deferred.errback, f)
+
+def deferIterationToThread(f, *args, **kwargs):
+    """Run the results of an iterator in a thread.
+
+       This returns a MultiDeferred object, which is a deferred 
+       having an added method, addFinishCallback to provide
+       a callback once the iteration has finished.
+
+       The function passed, when arguments applied, should
+       return an object with a next() method raising 
+       StopIteration when there isn't any more content.       
+    """
+    deferred = defer.MultiDeferred()
+    reactor.callInThread(_putIterationInDeferred, deferred, f, args, kwargs)
+    return deferred
 
 __all__ = ["deferToThread", "callMultipleInThread"]



--- adbapi.py.orig	Tue Mar  4 03:40:13 2003
+++ adbapi.py	Tue Mar  4 15:40:53 2003
@@ -99,6 +101,23 @@
         curs.close()
         return result
 
+    def _runQueryChunked(self, args, kw):
+        conn = self.connect()
+        curs = conn.cursor()
+        apply(curs.execute, args, kw)
+        class chunkIterator:
+            def __init__(self,curs):
+                self.curs = curs
+            def __iter__(self): 
+                return self
+            def next(self):
+                ret = self.curs.fetchmany()
+                if not ret:
+                    self.curs.close()
+                    raise threads.StopIteration
+                return ret
+        return chunkIterator(curs)
+
     def _runOperation(self, args, kw):
         """This is used for non-query operations that don't want "fetch*" to be called
         """
@@ -121,6 +140,15 @@
         threads.deferToThread(self._runQuery, args, kw).addCallbacks(
             callback, errback)
 
+    def queryChunked(self, *args, **kw):
+        """ Sets up a deferred execution query that returns
+            one or more result chunks.
+      
+            This method returns a MultiDeferred, which is notified when
+            the query has finished via its FinishCallback.
+        """
+        return threads.deferIterationToThread(self._runQueryChunked, args, kw)
+
     def operation(self, callback, errback, *args, **kw):
         threads.deferToThread(self._runOperation, args, kw).addCallbacks(
             callback, errback)


#
# usage of the new iterator deferred using 2.1
# (this works under 2.2 and should work under 2.1
#  but it has not been tested there)
#
from twisted.internet.threads import StopIteration
from twisted.internet.threads import deferIterationToThread
from twisted.internet import reactor
class producer:
    def __init__(self):
        self.val = 9
    def next(self):
        val = self.val
        if val < 1: raise StopIteration
        self.val -= 1
        return val
def bldr(): return producer()
def printResult(x): print x
def printDone(x): print "done", x
d = deferIterationToThread(bldr)
d.addCallback(printResult)
d.addFinishCallback(printDone)
reactor.run()

#
# usage of the new iterator deferred using 2.2
#
from __future__ import generators
from twisted.internet import threads
from twisted.internet import reactor
def printResult(x): print x
def printDone(x): print "done", x
def gene(start=99):
    while(start > 90):
        yield start
        start -= 1
d = threads.deferIterationToThread(gene)
d.addFinishCallback(printDone)
d.addCallback(printResult)
reactor.run()

#
# usage of the Chunked adbapi patch
#
from twisted.enterprise import adbapi
pool = adbapi.ConnectionPool("mx.ODBC.EasySoft","SomeDSN")
def good(lst):
    for itm in lst:
        print itm[0]
def done(cnt): print "done, blocks = ", cnt
d = pool.queryChunked("SELECT <query>")
d.addCallback(good)
d.addFinishCallback(done)
from twisted.internet import reactor
reactor.run()




From naesten at myrealbox.com  Tue Mar  4 23:33:39 2003
From: naesten at myrealbox.com (Samuel Bronson)
Date: Tue, 04 Mar 2003 23:33:39 -0500
Subject: [Twisted-Python] coding standard: column width?
References: <20030304061612.GA52189@doublegemini.com>
Message-ID: <3E657E23.10908@myrealbox.com>

Clark C. Evans wrote:

>The (very clear) coding standards don't mention a preferred column width.  
>Could it be possible to add a 76 column code wrap requirement.  This is 
>useful for those of us who use your aged 80 column terminals, and more
>
Or code at the console, or prefer 80 column emacs windows ;-)
--Sam





From golux at comcast.net  Tue Mar  4 23:44:53 2003
From: golux at comcast.net (Steve Waterbury)
Date: Tue, 04 Mar 2003 23:44:53 -0500
Subject: [Twisted-Python] coding standard: column width?
In-Reply-To: <3E657E23.10908@myrealbox.com>
References: <20030304061612.GA52189@doublegemini.com>
 <3E657E23.10908@myrealbox.com>
Message-ID: <1046839493.955.66.camel@golux>

On Tue, 2003-03-04 at 23:33, Samuel Bronson wrote:
> Clark C. Evans wrote:
> 
> >The (very clear) coding standards don't mention a preferred column width.  
> >Could it be possible to add a 76 column code wrap requirement.  This is 
> >useful for those of us who use your aged 80 column terminals, and more
> >
> Or code at the console, or prefer 80 column emacs windows ;-)

Right.  The Twisted coding standards are clear ... but they 
shouldn't have to say everything:  in the absence of explicit 
direction from the Twisted coding standard, the Python style 
guidelines should be followed (PEP 8 and PEP 257).
>From PEP 8 (http://www.python.org/peps/pep-0008.html):

    There are still many devices around that are limited to 80
    character lines; plus, limiting windows to 80 characters makes it
    possible to have several windows side-by-side.  The default
    wrapping on such devices looks ugly.  Therefore, please limit all
    lines to a maximum of 79 characters (Emacs wraps lines that are
    exactly 80 characters long).  For flowing long blocks of text
    (docstrings or comments), limiting the length to 72 characters is
    recommended.

Etc.

- Steve.





From martin at datacash.com  Wed Mar  5 04:34:27 2003
From: martin at datacash.com (Martin Waite)
Date: 05 Mar 2003 09:34:27 +0000
Subject: [Twisted-Python] newbie question about using deferreds
Message-ID: <1046856868.4995.36.camel@pascal>

Hi,

Twisted newbie here with a plan. Could
someone please tell me if I'm barking up trees here ?

In my application, I want to run a Twisted listener
that collects incoming request messages and passes these to a 
thread that posts the message into a queue table in a database.
Another thread polls the database for responses, and 
distributes these to the connections that made the corresponding
requests.  

My understanding is that somehow I can do this using the Deferred
mechanism - only I'm not sure how.

My plan is to keep a global hash table of RequestID -> Deferred.
When the listener identifies the end of a request, a deferred is 
created and stored against the RequestID.  When the thread polling
for responses from the database gets a response, it looks for 
a matching deferred from the global hash table and then somehow
activates the deferred.

Is this sane or am I missing an easier way to do this ?

TIA, 
Martin







From radix at twistedmatrix.com  Wed Mar  5 05:04:20 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 5 Mar 2003 05:04:20 -0500
Subject: [Twisted-Python] newbie question about using deferreds
In-Reply-To: <1046856868.4995.36.camel@pascal>
References: <1046856868.4995.36.camel@pascal>
Message-ID: <20030305100420.GG10282@radii>

On Wed, Mar 05, 2003 at 09:34:27AM +0000, Martin Waite wrote:
> Hi,
> 
> My plan is to keep a global hash table of RequestID -> Deferred.
> When the listener identifies the end of a request, a deferred is 
> created and stored against the RequestID.  When the thread polling
> for responses from the database gets a response, it looks for 
> a matching deferred from the global hash table and then somehow
> activates the deferred.
> 
> Is this sane or am I missing an easier way to do this ?

Mapping of RID:Deferred is quite sane, I think. It could probably
even be called an idiom, by now.

"somehow activates the Deferred" is just
self.requests[rid].callback(val), where self.requests is your mapping,
rid is the request ID, and val is the value that was recently made
available.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From andrew-twisted at puzzling.org  Wed Mar  5 06:51:29 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 5 Mar 2003 22:51:29 +1100
Subject: [Twisted-Python] Re: [Twisted-commits] mktap now accepts --uid=0 and --gid=0 to really mean root, has command
In-Reply-To: <E18qHDI-0007rx-00@pyramid.twistedmatrix.com>
References: <E18qHDI-0007rx-00@pyramid.twistedmatrix.com>
Message-ID: <20030305115129.GA3252@frobozz.local>

On Tue, Mar 04, 2003 at 12:32:28PM -0600, tv CVS wrote:
> Modified files:
> Twisted/twisted/scripts/mktap.py 1.26 1.27
> Twisted/twisted/internet/app.py 1.79 1.80
> Twisted/ChangeLog 1.279 1.280
> 
> Log message:
> mktap now accepts --uid=0 and --gid=0 to really mean root, has command
> line help for --uid=/--gid=, and understands user and group names in
> addition to numbers.

[..snip..]

>  """ Implementation module for the `mktap` command.
>  """
> @@ -25,7 +25,7 @@
>  from twisted.python import usage, util
>  from twisted.spread import pb
>  
> -import sys, traceback, os, cPickle, glob
> +import sys, traceback, os, cPickle, glob, pwd

My docs for pwd say that it's only available on unix -- does this change
mean mktap is broken on win32?

-Andrew.




From twisted at itamarst.org  Wed Mar  5 12:26:18 2003
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 5 Mar 2003 12:26:18 -0500
Subject: [Twisted-Python] A fun site using Twisted
Message-ID: <20030305122618.5d97cda8.twisted@itamarst.org>

http://mysteryrobot.com/

Pointed out by someone on the IRC channel, I forget who.



From cce at clarkevans.com  Wed Mar  5 13:15:24 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Wed, 5 Mar 2003 18:15:24 +0000
Subject: [Twisted-Python] coding standard: column width?
In-Reply-To: <1046839493.955.66.camel@golux>
References: <20030304061612.GA52189@doublegemini.com> <3E657E23.10908@myrealbox.com> <1046839493.955.66.camel@golux>
Message-ID: <20030305181524.GA62536@doublegemini.com>

So, would purely whitespace patches fixing lines that
go over 79 columns be accepted?

On Tue, Mar 04, 2003 at 11:44:53PM -0500, Steve Waterbury wrote:
| On Tue, 2003-03-04 at 23:33, Samuel Bronson wrote:
| > Clark C. Evans wrote:
| > >The (very clear) coding standards don't mention a preferred column width.  
| > >Could it be possible to add a 76 column code wrap requirement.  This is 
| > >useful for those of us who use your aged 80 column terminals, and more
| >  
| > Or code at the console, or prefer 80 column emacs windows ;-)
| 
| Right.  The Twisted coding standards are clear ... but they 
| shouldn't have to say everything:  in the absence of explicit 
| direction from the Twisted coding standard, the Python style 
| guidelines should be followed (PEP 8 and PEP 257).

| From PEP 8 (http://www.python.org/peps/pep-0008.html):
| 
|     There are still many devices around that are limited to 80
|     character lines; plus, limiting windows to 80 characters makes it
|     possible to have several windows side-by-side.  The default
|     wrapping on such devices looks ugly.  Therefore, please limit all
|     lines to a maximum of 79 characters (Emacs wraps lines that are
|     exactly 80 characters long).  For flowing long blocks of text
|     (docstrings or comments), limiting the length to 72 characters is
|     recommended.



From tjacobs at kinematic.com  Wed Mar  5 13:15:37 2003
From: tjacobs at kinematic.com (Thad Jacobs)
Date: Wed, 5 Mar 2003 10:15:37 -0800 
Subject: [Twisted-Python] NT Service
Message-ID: <D1A1551B3520D51186B300508B1278FE367ED1@FS2>

Hello All,

I've created a module that makes COM calls to our non-sql database using
win32com, and converts the results to XML format (through simple string
concatenations).  I've created a rpy script that calls this module, and
returns the XML to the browser.

I am currently running the HTTP server per the introduction using the
command line.

My question:

How should I best deploy this application into a production environment?  It
will be running on an Windows 2000 server, and needs to automatically load
and run before anyone logs on in the machine.  Is there a way I can deploy
Twisted Web as an NT service?  Are there other web servers (besides IIS)
that can be configured to run my rpy script and still allow me to utilize
win32com in my class module?

Thanks in advance,

Thaddeus Jacobs
IT Developer
Kinematic Automation, Inc.
mailto:tjacobs at kinematic.com



From bob at redivi.com  Wed Mar  5 13:41:24 2003
From: bob at redivi.com (Bob Ippolito)
Date: Wed, 5 Mar 2003 13:41:24 -0500
Subject: [Twisted-Python] NT Service
In-Reply-To: <D1A1551B3520D51186B300508B1278FE367ED1@FS2>
Message-ID: <10E13DF0-4F3A-11D7-9599-000A95686CD8@redivi.com>

On Wednesday, Mar 5, 2003, at 13:15 America/New_York, Thad Jacobs wrote:

> Hello All,
>
> I've created a module that makes COM calls to our non-sql database 
> using
> win32com, and converts the results to XML format (through simple string
> concatenations).  I've created a rpy script that calls this module, and
> returns the XML to the browser.
>
> I am currently running the HTTP server per the introduction using the
> command line.
>
> My question:
>
> How should I best deploy this application into a production 
> environment?  It
> will be running on an Windows 2000 server, and needs to automatically 
> load
> and run before anyone logs on in the machine.  Is there a way I can 
> deploy
> Twisted Web as an NT service?  Are there other web servers (besides 
> IIS)
> that can be configured to run my rpy script and still allow me to 
> utilize
> win32com in my class module?

I'm assuming you've already RTFM'ed about win32all's win32service and 
Twisted.  Here's a stripped example of what has worked very well for me 
for the few times I was forced to deploy under Windows:

import win32serviceutil
import win32service
import win32event
class MyTwistedService(win32serviceutil.ServiceFramework):
   _svc_name_ = "MyTwistedService"
   _svc_display_name_ = "Example Twisted NT Service"
   def __init__(self, args):
     win32serviceutil.ServiceFramework.__init__(self, args)
     self.hWaitStop = win32event.CreateEvent(None, 0, 0, None)

   def SvcStop(self):
     self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)
     win32event.SetEvent(self.hWaitStop)

   def SvcDoRun(self):
     from twisted.python.log import startLogging
     # we don't have the console, so we log somewhere
     # the NT service logging facilities probably isn't the right place
     startLogging(open('c:/twistedexample.log','a'))
     self.CheckForQuit()
     startTwisted()

   def CheckForQuit(self):
     #print "Check For Quit"
     rv = win32event.WaitForSingleObject(self.hWaitStop, 10.0)
     if not rv == win32event.WAIT_TIMEOUT:
       print "Received Quit from Win32"
       reactor.stop()
     reactor.callLater(1.0, self.CheckForQuit)

def startTwisted():
   from twisted.internet.app import Application
   app = Application("MyExampleTwistedService")
   app.run(save=0)
   print "Finished"

if __name__=='__main__':
   # you could call startTwisted to run as not-a-service
   # or use it for cross-platform reasons
   win32serviceutil.HandleCommandLine(MyTwistedService)




From naesten at myrealbox.com  Wed Mar  5 14:05:06 2003
From: naesten at myrealbox.com (Samuel Bronson)
Date: Wed, 05 Mar 2003 14:05:06 -0500
Subject: [Twisted-Python] tap2deb -v/--version bug
References: <20030304141000.GB13198@lapdog> <20030304180237.GA19482@lapdog>
Message-ID: <3E664A62.2070300@myrealbox.com>

 Tommi Virtanen wrote:

>	Moshez said "go ahead and commit, but fix the manpage too", so
>	I did just that.
>
I think manpages would ideally be generated from the source code. Then
it would be easy to remember to do it, and maybe you wouldn't have to
type a bunch of stuff twice. Might be prohibitively complex to
implement, though.
--Sam





From naesten at myrealbox.com  Wed Mar  5 14:10:31 2003
From: naesten at myrealbox.com (Samuel Bronson)
Date: Wed, 05 Mar 2003 14:10:31 -0500
Subject: [Twisted-Python] Re: [Twisted-commits] mktap now accepts --uid=0
 and --gid=0 to really mean root, has command
References: <E18qHDI-0007rx-00@pyramid.twistedmatrix.com> <20030305115129.GA3252@frobozz.local>
Message-ID: <3E664BA7.3090400@myrealbox.com>

Andrew Bennetts wrote:

>On Tue, Mar 04, 2003 at 12:32:28PM -0600, tv CVS wrote:
>
>>-import sys, traceback, os, cPickle, glob
>>+import sys, traceback, os, cPickle, glob, pwd
>>    
>>
>My docs for pwd say that it's only available on unix -- does this change
>mean mktap is broken on win32?
>  
>
Perhaps it would be better to import it only right before using it
(inside the if block)?
--Sam




From glyph at twistedmatrix.com  Wed Mar  5 14:15:06 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 5 Mar 2003 13:15:06 -0600
Subject: [Twisted-Python] NT Service
In-Reply-To: <10E13DF0-4F3A-11D7-9599-000A95686CD8@redivi.com>
Message-ID: <C65C42F4-4F3E-11D7-9352-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Wednesday, March 5, 2003, at 12:41 PM, Bob Ippolito wrote:

> I'm assuming you've already RTFM'ed about win32all's win32service and 
> Twisted.  Here's a stripped example of what has worked very well for 
> me for the few times I was forced to deploy under Windows:

It would be really great if someone could genericize this and create a 
version that had a configuration dialog that allowed you to select a 
particular .tap file to load, rather than instantiating the Application 
inline.  That way deploying on Win32 would be much more directly 
analagous to deploying on unix.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+Zky+vVGR4uSOE2wRAqdLAJ9+KogR9IgvsEwlyhVJT4FQhBQVlQCfdkOL
c7FtjeYrzf8H0fZuNz6mGi4=
=oWYP
-----END PGP SIGNATURE-----




From tv at twistedmatrix.com  Wed Mar  5 14:33:14 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Wed, 5 Mar 2003 21:33:14 +0200
Subject: [Twisted-Python] Re: [Twisted-commits] mktap now accepts --uid=0 and --gid=0 to really mean root, has command
In-Reply-To: <3E664BA7.3090400@myrealbox.com>
References: <E18qHDI-0007rx-00@pyramid.twistedmatrix.com> <20030305115129.GA3252@frobozz.local> <3E664BA7.3090400@myrealbox.com>
Message-ID: <20030305193314.GA8068@lapdog>

On Wed, Mar 05, 2003 at 02:10:31PM -0500, Samuel Bronson wrote:
> >My docs for pwd say that it's only available on unix -- does this change
> >mean mktap is broken on win32?
> >
> Perhaps it would be better to import it only right before using it
> (inside the if block)?

	All I have is this snippet from #twisted, from which I
	understood unconditionally importing pwd to be all ok.

<Tv> Is "import pwd" allowed in twisted codebase?
<Tv> Should I wrap it in something to make it optional?
<itamar> welll
<_moshez> Tv: where
<itamar> it won't work on windows?
<Tv> _moshez: I'm thinking of supporting user/group names in mktap
<glyphBook> Tv: Ideally you should be using cred, but it's
            understandable if that doesn't make sense.
            twisted.web.distrib uses pwd, I think.
<itamar> ooh, nice
<glyphBook> Tv: oh yeah, definitely, that's fine
<Tv> Cool.

	If you guys want me to move it around so it's not imported
	until needed, I _can_ do that. I'd just like a straight
	answer.

-- 
:(){ :|:&};:



From glyph at twistedmatrix.com  Wed Mar  5 14:42:51 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 5 Mar 2003 13:42:51 -0600
Subject: [Twisted-Python] Re: [Twisted-commits] mktap now accepts --uid=0 and --gid=0 to really mean root, has command
In-Reply-To: <20030305193314.GA8068@lapdog>
Message-ID: <A6DDDE0E-4F42-11D7-9352-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Wednesday, March 5, 2003, at 01:33 PM, Tommi Virtanen wrote:

> 	All I have is this snippet from #twisted, from which I
> 	understood unconditionally importing pwd to be all ok.

Sorry about that.

> <Tv> Should I wrap it in something to make it optional?

I understood this differently than what you were asking :).  Wrapping 
and "magic module" objects are  sub-optimal for situations like this; 
best is to import it only when needed so you get an ImportError if and 
only if you try to invoke the functionality that requires pwd on a 
platform that doesn't have it.

This should probably be in the coding standard someplace.

We _also_ need a test farm set up so we can tell when people do this 
:-).  I really need to specify what kind of code needs to work in 
Jython; I'm pretty sure I saw some patches recently that moved errno 
imports around so that Jython will now fail to run twistd or mktap.

> 	If you guys want me to move it around so it's not imported
> 	until needed, I _can_ do that. I'd just like a straight
> 	answer.

That would be best, thanks.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+ZlNAvVGR4uSOE2wRAsrfAJ9AvM667NVO2GzONswBgcV+kJ+lxACePNfM
KgTP8UYbW5fKw5GIZV3nESo=
=Tvp6
-----END PGP SIGNATURE-----




From twisted at itamarst.org  Wed Mar  5 14:44:28 2003
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 5 Mar 2003 14:44:28 -0500
Subject: [Twisted-Python] Re: [Twisted-commits] mktap now accepts --uid=0 and --gid=0 to really mean root, has command
In-Reply-To: <20030305193314.GA8068@lapdog>
References: <E18qHDI-0007rx-00@pyramid.twistedmatrix.com>
	<20030305115129.GA3252@frobozz.local>
	<3E664BA7.3090400@myrealbox.com>
	<20030305193314.GA8068@lapdog>
Message-ID: <20030305144428.1805aa1b.twisted@itamarst.org>

On Wed, 5 Mar 2003 21:33:14 +0200
Tommi Virtanen <tv at twistedmatrix.com> wrote:

> 	If you guys want me to move it around so it's not imported
> 	until needed, I _can_ do that. I'd just like a straight
> 	answer.

I fixed it in CVS - what we meant to say is "you can use so long as it
fails gracefully on Windows".



From tjacobs at kinematic.com  Wed Mar  5 16:01:24 2003
From: tjacobs at kinematic.com (Thad Jacobs)
Date: Wed, 5 Mar 2003 13:01:24 -0800 
Subject: [Twisted-Python] NT Service
Message-ID: <D1A1551B3520D51186B300508B1278FE367ED2@FS2>

Glyph,

I've got the service up and running, but it doesn't do anything.  All I want
to do is make a twisted web application that listens on port 8080 and serves
files out of c:\web  -- or better yet, it would be nice if  I could simply
instantiate the web.tap file just as I would using "twistd -f web.tap".

I'm willing to get under the hood and make this happen, but unfortunately
I'm under a bit of a time constraint.  I've been RTFM'ing all morning, but
the documentation is scattered, and I am a bit green in the realms of
asynchronous server programming, and have been coding in python for less
than a week.

Could you advise me as to what direction to take in instantiating a twisted
web application from within the service?  I was thinking of simply importing
twisted.py, but I can't figure out how to make it run with options I dictate
programatically, than the system command line switches.

Once I've figured this out, I'll  be sure to post the full source, so others
may benefit.


Here's the basic service, almost Identical to the one Bob posted, though I
had to import twisted.internet.reactor to get it to work.

import win32serviceutil
import win32service
import win32event
class KAQueryService(win32serviceutil.ServiceFramework):
   _svc_name_ = "KAQueryService"
   _svc_display_name_ = "Kinematic Query Service"
   def __init__(self, args):
     win32serviceutil.ServiceFramework.__init__(self, args)
     self.hWaitStop = win32event.CreateEvent(None, 0, 0, None)

   def SvcStop(self):
     self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)
     win32event.SetEvent(self.hWaitStop)

   def SvcDoRun(self):
     from twisted.python.log import startLogging
     # we don't have the console, so we log somewhere
     # the NT service logging facilities probably isn't the right place
     startLogging(open('c:/twistedexample.log','a'))
     self.CheckForQuit()
     startTwisted()

   def CheckForQuit(self):
     from twisted.internet import reactor
     #print "Check For Quit"
     rv = win32event.WaitForSingleObject(self.hWaitStop, 10.0)
     if not rv == win32event.WAIT_TIMEOUT:
       print "Received Quit from Win32"
       reactor.stop()
     reactor.callLater(1.0, self.CheckForQuit)

def startTwisted():
   from twisted.internet.app import Application

   #How do I specify a port or load a tap file?
   app = Application("web")
   app.run(save=0)
   print "Finished"

if __name__=='__main__':
   # you could call startTwisted to run as not-a-service
   # or use it for cross-platform reasons
   win32serviceutil.HandleCommandLine(KAQueryService)


-----Original Message-----
From: Glyph Lefkowitz [mailto:glyph at twistedmatrix.com]
Sent: Wednesday, March 05, 2003 11:15 AM
To: twisted-python at twistedmatrix.com
Subject: Re: [Twisted-Python] NT Service


-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Wednesday, March 5, 2003, at 12:41 PM, Bob Ippolito wrote:

> I'm assuming you've already RTFM'ed about win32all's win32service and 
> Twisted.  Here's a stripped example of what has worked very well for 
> me for the few times I was forced to deploy under Windows:

It would be really great if someone could genericize this and create a 
version that had a configuration dialog that allowed you to select a 
particular .tap file to load, rather than instantiating the Application 
inline.  That way deploying on Win32 would be much more directly 
analagous to deploying on unix.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+Zky+vVGR4uSOE2wRAqdLAJ9+KogR9IgvsEwlyhVJT4FQhBQVlQCfdkOL
c7FtjeYrzf8H0fZuNz6mGi4=
=oWYP
-----END PGP SIGNATURE-----


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From dp at twistedmatrix.com  Wed Mar  5 16:18:57 2003
From: dp at twistedmatrix.com (Donovan Preston)
Date: Wed, 5 Mar 2003 13:18:57 -0800
Subject: [Twisted-Python] NT Service
In-Reply-To: <D1A1551B3520D51186B300508B1278FE367ED2@FS2>
Message-ID: <13A19380-4F50-11D7-A546-000393B3EC2C@twistedmatrix.com>

On Wednesday, March 5, 2003, at 01:01 PM, Thad Jacobs wrote:

[ snip snip ]

> def startTwisted():
>    from twisted.internet.app import Application
>
>    #How do I specify a port or load a tap file?
>    app = Application("web")

     # This is for creating a web root and listening on a port manually;
     # You could also probably load a tap but I don't know how.
     from twisted.web import server, static
     root = server.Site(static.File("c:\\web"))

     app.listenTCP(8080, site)

>    app.run(save=0)
>    print "Finished"
>
> if __name__=='__main__':
>    # you could call startTwisted to run as not-a-service
>    # or use it for cross-platform reasons
>    win32serviceutil.HandleCommandLine(KAQueryService)

mktap does the bit of code where you create the Site and File instances 
and call listenTCP. A good goal for making twisted better on windows 
(low on most priority lists since most of the twisted developers don't 
use windows) would be some sort of way to say "install this TAP as a 
service" which basically runs all that boilerplate; I have no idea 
about any of the details of how this would work though.

Hope this helps.

Donovan




From dp at twistedmatrix.com  Wed Mar  5 16:21:41 2003
From: dp at twistedmatrix.com (Donovan Preston)
Date: Wed, 5 Mar 2003 13:21:41 -0800
Subject: [Twisted-Python] NT Service
In-Reply-To: <13A19380-4F50-11D7-A546-000393B3EC2C@twistedmatrix.com>
Message-ID: <753C366B-4F50-11D7-A546-000393B3EC2C@twistedmatrix.com>

Whoops, typo in my code. Sorry.

On Wednesday, March 5, 2003, at 01:18 PM, Donovan Preston wrote:
>
>     # This is for creating a web root and listening on a port manually;
>     # You could also probably load a tap but I don't know how.
>     from twisted.web import server, static
>     site = server.Site(static.File("c:\\web"))
>
>     app.listenTCP(8080, site)




From tjacobs at kinematic.com  Wed Mar  5 16:35:03 2003
From: tjacobs at kinematic.com (Thad Jacobs)
Date: Wed, 5 Mar 2003 13:35:03 -0800 
Subject: [Twisted-Python] NT Service
Message-ID: <D1A1551B3520D51186B300508B1278FE367ED3@FS2>

Works like a charm!!  Thanks, Donovan

-----Original Message-----
From: Donovan Preston [mailto:dp at twistedmatrix.com]
Sent: Wednesday, March 05, 2003 1:19 PM
To: twisted-python at twistedmatrix.com
Subject: Re: [Twisted-Python] NT Service



On Wednesday, March 5, 2003, at 01:01 PM, Thad Jacobs wrote:

[ snip snip ]

> def startTwisted():
>    from twisted.internet.app import Application
>
>    #How do I specify a port or load a tap file?
>    app = Application("web")

     # This is for creating a web root and listening on a port manually;
     # You could also probably load a tap but I don't know how.
     from twisted.web import server, static
     root = server.Site(static.File("c:\\web"))

     app.listenTCP(8080, site)

>    app.run(save=0)
>    print "Finished"
>
> if __name__=='__main__':
>    # you could call startTwisted to run as not-a-service
>    # or use it for cross-platform reasons
>    win32serviceutil.HandleCommandLine(KAQueryService)

mktap does the bit of code where you create the Site and File instances 
and call listenTCP. A good goal for making twisted better on windows 
(low on most priority lists since most of the twisted developers don't 
use windows) would be some sort of way to say "install this TAP as a 
service" which basically runs all that boilerplate; I have no idea 
about any of the details of how this would work though.

Hope this helps.

Donovan


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From tjacobs at kinematic.com  Wed Mar  5 17:20:58 2003
From: tjacobs at kinematic.com (Thad Jacobs)
Date: Wed, 5 Mar 2003 14:20:58 -0800 
Subject: [Twisted-Python] Sample Twisted Web NT Service
Message-ID: <D1A1551B3520D51186B300508B1278FE367ED4@FS2>

#This sample code demonstrates how to mount Twisted Web as a 
#Windows XP / 2000 / NT Service using win32all's win32service

import win32serviceutil
import win32service
import win32event
class TwistedWebNTService(win32serviceutil.ServiceFramework):
   _svc_name_ = "TwistedWebNTService"
   _svc_display_name_ = "Twisted Web NT Service"
   def __init__(self, args):
     win32serviceutil.ServiceFramework.__init__(self, args)
     self.hWaitStop = win32event.CreateEvent(None, 0, 0, None)

   def SvcStop(self):
     self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)
     win32event.SetEvent(self.hWaitStop)

   def SvcDoRun(self):
     from twisted.python.log import startLogging
     # we don't have the console, so we log somewhere
     # the NT service logging facilities probably isn't the right place
     startLogging(open('c:/twistedwebNTService.log','a'))
     self.CheckForQuit()
     startTwisted()

   def CheckForQuit(self):
     from twisted.internet import reactor
     #print "Check For Quit"
     rv = win32event.WaitForSingleObject(self.hWaitStop, 10.0)
     if not rv == win32event.WAIT_TIMEOUT:
       print "Received Quit from Win32"
       reactor.stop()
     reactor.callLater(1.0, self.CheckForQuit)

def startTwisted():
   from twisted.internet.app import Application
   app = Application("web")
   from twisted.web import server, static, twcgi, script, trp
   root = static.File("c:\\web") #Serve files out of c:\\web

  #Add the appropriate processors if you want to serve scripts
   root.processors = {
            '.cgi': twcgi.CGIScript,
            '.php3': twcgi.PHP3Script,
            '.php': twcgi.PHPScript,
            '.epy': script.PythonScript,
            '.rpy': script.ResourceScript,
            '.trp': trp.ResourceUnpickler,
            }
   
   site = server.Site(root)

   app.listenTCP(8080, site)

   app.run(save=0)
   print "Finished"

if __name__=='__main__':
   # you could call startTwisted to run as not-a-service
   # or use it for cross-platform reasons
   win32serviceutil.HandleCommandLine(TwistedWebNTService)



From dw85745 at sprintmail.com  Wed Mar  5 19:34:54 2003
From: dw85745 at sprintmail.com (X)
Date: Wed, 5 Mar 2003 17:34:54 -0700
Subject: [Twisted-Python] Waitable Timers and Events
Message-ID: <002301c2e378$35ddbc60$51c79d40@x>

I have what I think is a unique issue and hoping someone might be able to offer a suggestion.

PROBLEM:  Can't get Do/Loop and Timer/Loop to Exit

I have a static counter in the PAINT event to set up a trigger to call a Do/Loop.
This is done to allow the screen to be painted to a certain point and then the loop is designed to finish painting the screen in slow motion.

Once the Do/Loop is entered it is controlled (slow motion) by calling the Timer/Loop routine which uses SetWaitableTimer and MsgWaitForMultipleObjects to control the speed of painting and allow the user interface to still be active.

Everything works well.

----- Heres were the problem is:

If the program is to exited prior to the loop finishing,  the user clicks File/Exit.
A global structure variable was included in the loop in an attempt to quickly exit both the Do/Loop and the Timer/Loop, but whatever reason is never seen by the Loops prior to the call to unload the MDI form.  The system locks or generates an error.

Any ideas how to resolve?

Thanks
David



-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20030305/a034d949/attachment.htm 

From cce at clarkevans.com  Thu Mar  6 01:02:23 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu, 6 Mar 2003 06:02:23 +0000
Subject: [Twisted-Python] Thoughts on Deferred
Message-ID: <20030306060223.GA66896@doublegemini.com>

Ok.  I've been using Deferreds some time now, actually I've
coverted my report server to now use the mechanism as my 
core 'construction' model.   I'd like to report some 
observations:

  1.  The entire deferred processing chain is quite nice, 
      although the bulk of the time my callbacks don't take
      any arguments.  I suspect that most people who do have
      callback args can just make an object and pass a bound
      method as their callback instead of the 'args' mechanism.
      This mechanism could be better supported by providing 
      a wrapper class instead of maintaining all of the args 
      throught the code:

          class DispatchCallback:
              def __init__(self, callback, args, kw):
                  self.callback = callback
                  self.args = args or ()
                  self.kw   = kw or {}
              def apply(self,result):
                  return apply(self.callback, (result,)+self.args, kw)

      Then, in addCallbacks, if any callback was given which had
      args or a kw, you could just construct this dispatch object
      and put the ob.apply into the callback stack.   In this 
      way only users who passed in callbacks with args pay for the
      penalty of applying them.

  2.  The error handling could use help.  The cross-over behavior,
      while unique, doesn't provide any more value over a simple 
      stack /w state flag (good/bad) attach to each callback.

        def _addCallback(self, callback, *args=None, **kw=None, state=good):
            if args or kw: callback = DispatchCallback(callback,args,kw)
            self.callbacks.append((state,callback))

      Of course, existing functions can then be expressed as a
      sequence of addCallback /w state flag.
            
            addCallback  => _addCallback(self,callback,args,kw,state=good)
            addErrback   => _addCallback(self,errback,args,kw,state=bad)
            addCallbacks => addErrback(...); addCallback(...);
           
      It would have the same behavior since the current cross/over
      can easily be denormalized into two entries into the stack, one
      for a bad state (first) and then one for a good state (second).
      With these changes in place, _runCallbacks() is much simpler...

  3.  Deferred also "artifically limits" so that the entire callback
      tree can only be done once.   This involves a hack "MultiDeferred"
      to solve the problem; but with a slightly different _runCallbacks
      plus a __init__ flag, this need not be the case.

      In short, the "multi-call deferred" that I need shouldn't be
      a separate class, its behavior can be rolled into the core Deferred
      without changing existing behavior (default to callOnceOnly).

  4.  Lastly, I'd like to see other "state" variables for the deferred. 
      Essentially, what I see is a process flow, aka state transition
      mechnanism emerging.   For an SQL query, one of the states
      is 'good', 'bad', and 'finished'.  Perhaps I'm a bit off here,
      but being able to handle more than two states could be useful.
      
      I say this beacuse the MultiDeferred class has a addFinishCallback,
      which is fired on the 'finish' state.  Note that errors in the 
      'row' callback and the 'finish' callback could possibly be treated
      the same, so there probably isn't a reason to split this... but
      maybye not.. I'm still thinking this one out.

Just some thoughts.  If you like, I could refactor the Deferred
object as above (it'd be less code & probably cleaner), as well
as updating the documentation and providing examples which run
without modification.

All in all, this is a great concept... and it's working beautyfully
in my current application (mod the minor blemishes above).

Best,

Clark



From twisted at itamarst.org  Thu Mar  6 01:18:01 2003
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 6 Mar 2003 01:18:01 -0500
Subject: [Twisted-Python] Thoughts on Deferred
In-Reply-To: <20030306060223.GA66896@doublegemini.com>
References: <20030306060223.GA66896@doublegemini.com>
Message-ID: <20030306011801.1c49d2cc.twisted@itamarst.org>

On Thu, 6 Mar 2003 06:02:23 +0000
"Clark C. Evans" <cce at clarkevans.com> wrote:

>   2.  The error handling could use help.  The cross-over behavior,
>       while unique, doesn't provide any more value over a simple 
>       stack /w state flag (good/bad) attach to each callback.

Look again :)

In fac, the cross-over behaviour is designed to mimic Python's
try/except semantics in a callback oriented way. And exceptions are
*useful*.

 try:
     x = foo(2)
 except FooError:
     x = None

becomes:

 d = foo(2)
 def err(f):
     f.trap(FooError)
     return None
 d.addErrback(err).addCallback(gotX)



From pyp at gmx.net  Thu Mar  6 01:38:28 2003
From: pyp at gmx.net (Mike =?iso-8859-1?Q?M=FCller?=)
Date: Thu, 06 Mar 2003 07:38:28 +0100
Subject: [Twisted-Python] Twisted.Web as scgi client
Message-ID: <4.3.1.1.20030305223225.00aaaa70@pop.gmx.net>

Hi,

I am new to this list and twisted. I just played around with the howto 
setting up a web server with Twisted.Web serving static content, cgi and 
*.rpy. Works very nicely. I am impressed.
I also like Quixote. Running it as a cgi script has all the overhead of 
starting everything again for each request. It would be nice to have 
Twisted.Web act as scgi client 
(http://www.mems-exchange.org/software/scgi/) that redirects all requests 
to, lets say, www.mydomain.com/askscgi to the scgi server that is run by 
Quixote. This way I can use all of Twisted.Web or Quixote when I want. 
Since the scgi protocol is designed to be implemented more easily than 
FastCGI somebody might already have done something like this. Or is it 
planned to be done sometime?

Thanks

Mike




From cce at clarkevans.com  Thu Mar  6 02:11:04 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu, 6 Mar 2003 07:11:04 +0000
Subject: [Twisted-Python] Thoughts on Producer / Consumer
In-Reply-To: <20030306060223.GA66896@doublegemini.com>
References: <20030306060223.GA66896@doublegemini.com>
Message-ID: <20030306071104.GA67095@doublegemini.com>

While I'm musing... I have a few thoughts on Producer/Consumer as well;
but I don't yet have any experience with the Twisted constructs yet...
so I could be speaking incorrectly.

Before I get going, I wanted to point out that there is some overlap
with this producer/consumer mechanism and the Deferred mechnaism.  In
particular, the callback chain processing in _runCallbacks seems very
much like a sequence of steps in an operation.  And, the Deferred
package also has a mechanism to merge two or more deferreds into a
single deferred, etc.  These things are very much in the spirit of a
event 'reactor' processing.  This observation is especially true when
you allow the Deferred operation to 'return multiple times', aka one
callback per row.

That said, I expected a Producer/Consumer chain to have something like
the following:
  
   class Producer:
      def cancel(self): pass           # permanently stop processing
      def pause(self): pass            # stop producing events
      def resume(self): pass           # resume after being paused
      
   class Consumer(self):
      def start(self): pass            # called before events start
      def handle(self,data): pass      # called for each event
      def finish(self): pass           # called after events are done

   class Processor(Producer,Consumer): pass

   Further, it could be possible that a consumers and producers have
   a many-to-one relationship, in which case, all of the Producer
   functions would take a consumer argument and all of the Consumer
   functions would take a producer argument.

The IConsumer interface seems close, I guess start/handle/finish is the
same as registerProducer/write/unregisterProducer.  Besides not liking
the names, I'm not sure if it is semantically the same as what I was
thinking.  The registerProducer call seems to hint at a
many-producer-to-one-consumer call model, where a consumer can be the
target of many producers.  However, I don't see a corresponding producer
argument in the 'write' or 'unregisterProducer'... so that can't be it.
Lastly, I think that 'write' is too specific, in a database case you
want to hand rows to the consumer, not strings (as implied by the
'write' name).

I grok the IProducer interface much better, in fact it has almost the
same arguments that I expected.  As for the 'streaming' flag, if it is
set, it seems that the producer will generate one event and then
automatically pause.  So, I'd rename streaming to "autopause" or
"pauseonwrite" as this better reflects the semantics -- right now, after
just reading the code, I'm not sure if 'streaming' means that it pauses
automatically after each write or not.  Further, the choice if a
producer is started initially or stopped initally seems one that should
be made higher-up; tying it to 'streaming' or 'unstreaming' doesn't
really make sense.  Finally, the producer interface should probably have
two attributes, 'autopause' and 'isPaused' or something equivalent; the
registerProducer function doesn't need the streaming flag.

Exception handling doesn't seem to be spelled out at all in this chain,
perhaps it need not be.  I don't know, but it seems that some sort of
error propigation would be very useful so that the offending 'initial'
data can be found when something down-stream goes bezerk.  So, someway
to collect a stack trace up the producer/consumer chain would be quite
useful.  This could be done with one function on the Producer:
getErrorContext(), which returns a string

Another useful thing for this model to do is allow a 'tag' to be passed
as an argument to each of the start/handle/finish functions.  This,
together with allowing nested start/finish calls would allow
hierarchical streams to be handled.  In this model, the 'start' call
could provide a subordinate consumer to handle events for a particular
child subtree.   This mechanism is very handy for common
content-producing patterns.

Lastly, the linkage back to the Deferred could be done by a
DeferredProcess, where each item added to a DeferredProcess is one of a
Producer (the first item in the stack), a Process (middle items), and a
Consumer (final item).

Clark



From cce at clarkevans.com  Thu Mar  6 02:19:28 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu, 6 Mar 2003 07:19:28 +0000
Subject: [Twisted-Python] Thoughts on Deferred
In-Reply-To: <20030306011801.1c49d2cc.twisted@itamarst.org>
References: <20030306060223.GA66896@doublegemini.com> <20030306011801.1c49d2cc.twisted@itamarst.org>
Message-ID: <20030306071928.GA67204@doublegemini.com>

On Thu, Mar 06, 2003 at 01:18:01AM -0500, Itamar Shtull-Trauring wrote:
| In fac, the cross-over behaviour is designed to mimic Python's
| try/except semantics in a callback oriented way. And exceptions are
| *useful*.
| 
|  try:
|      x = foo(2)
|  except FooError:
|      x = None
| 
| becomes:
| 
|  d = foo(2)
|  def err(f):
|      f.trap(FooError)
|      return None
|  d.addErrback(err).addCallback(gotX)

You just proved my point; and I agree this is very useful.  ;)

By using addErrback and addCallback as distinct calls you are infact
*disabling* the cross-over behavior (which is confusing anyway) and just
using the Deferred stack in a linear way.  You only get the 'cross-over'
behavior if you use addCallbacks or addBoth, the latter, IMHO, being
somewhat deceptive since it is equivalent to addErrback _followedby_
addCallback, and I would have expected the opposite since callback
comes before errback in the arguments to addCallbacks.

I'm talking about a refactor which would clean up the innerds of
the Deferred mechanism... without changing any of the exposed 
behavior... besides being easier to explain.

Grins,

Clark



From cce at clarkevans.com  Thu Mar  6 03:03:04 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu, 6 Mar 2003 08:03:04 +0000
Subject: [Twisted-Python] Thoughts on Deferred
In-Reply-To: <20030306011801.1c49d2cc.twisted@itamarst.org>
References: <20030306060223.GA66896@doublegemini.com> <20030306011801.1c49d2cc.twisted@itamarst.org>
Message-ID: <20030306080304.GA67355@doublegemini.com>

Itamar,

I had another question on Deferreds: in the comments for DeferredList it
states that an errback on the list itself won't cover errors to the list
items.  I was wondering why this sort of logic wasn't implemented.  I'm
asking beacuse I'm using DeferredList and this is the sort of thing that
I expected (and would want).   Also, it's similar to a concern I have
with the MultiDeferred thingy that I wrote.   BTW, if multi-callback
deferral is added to Deferred, then the DeferredList could just
'forward' the items from each deferred into a stream of calls... 

Clark

P.S.  I think I now see what you mean by cross-over.  The docs for
Deferred should include the example you have below as to how to use it.
Although the explnation can be simpler:
       
   The Deferred mechanism may be visualized as a stack of callback
   and errback functions.  The mechanism starts at the top of the
   stack (the first function to be added), with a seed result or
   exception from the function which was deferred.  If the current
   item is a result, the callback processing mechanism pops the 
   stack untill a callback is found, skipping any errbacks found
   along the way.  This callback can then either return a result
   or throw an exception.  If an exception is encountered, either 
   from one of the callbacks or from the initial seed, then 
   functions are popped off the stack until a errback is found, 
   skipping any intermediate callbacks.  The errback is then called
   with the fault, and processing continues, calling the next 
   errback if the errback raises an exception (or returns the
   failure.Failure object).  

Yes; the Deferred mechanism doesn't do "try/except" in the
_runCallbacks, but it should... so that exceptions can be
raised as well as returning failure.Failure.  Yet another
patch... ;)



From martin at datacash.com  Thu Mar  6 04:31:49 2003
From: martin at datacash.com (Martin Waite)
Date: 06 Mar 2003 09:31:49 +0000
Subject: [Twisted-Python] newbie question about using deferreds and
	threads
In-Reply-To: <20030305100420.GG10282@radii>
References: <1046856868.4995.36.camel@pascal> 
	<20030305100420.GG10282@radii>
Message-ID: <1046943109.3415.74.camel@pascal>

On Wed, 2003-03-05 at 10:04, Christopher Armstrong wrote:
> 
> Mapping of RID:Deferred is quite sane, I think. It could probably
> even be called an idiom, by now.
> 
> "somehow activates the Deferred" is just
> self.requests[rid].callback(val), where self.requests is your mapping,
> rid is the request ID, and val is the value that was recently made
> available.
> 
Thanks for the advice Chris.

I've hacked away for a few hours and nearly have something working.

I have two database threads, one running write_db_request and the
other running read_db_response.  The listener posts completed
requests (end of request is a line containing only a '.') to
write_db_request via a queue, and also allocates a RID and pops
a deferred into the request hash.

The read_db_response thread polls the database for 'new' responses,
pulls the RID and response data, and activates the deferred
via the request hash.  The deferred calls printData which in turn
invokes Frontd.Respond, which prints the response and closes the 
connection.

I still have a way to go on this.  Problems are

1) I need a mutex around the request hash. I can use the 
   lock mechanism from the thread module for this.

2) If i do use a mutex (and I already am indirectly by
   using a Queue), then aren't I running the risk of blocking ?

3) When using telnet to test the program, I enter some data
   followed by the terminator (".\n") - and I get a response.
   However the connection remains open until I enter a newline.

4) The database threads continue to run after the program has stopped.

I include my code below for your entertainment. Any pointers on how 
I can improve on this are welcomed.

My next line of attack is to try and get rid of the database threads
and also bring in the Application object.  If I get rid of the threads, 
I get rid of the mutex issues.  Will adbapi allow me to do this ?

regards,
Martin

========================================================================

from twisted.internet.protocol import Factory, Protocol
from twisted.internet import reactor
from twisted.internet import defer

from Queue import Queue
from sys import stdout
import MySQLdb
import re

q = Queue(0)
request = {}

rid = 0

class Frontd(Protocol):

    def connectionMade(self):
        self.data = ''
        self.active = 1

    def dataReceived(self,data):
        stdout.write( data )
        if self.active == 1:
            self.data = self.data + data
            if ( re.search("^\s*\.\s*$", self.data, re.M ) ):
                global rid;  
                rid = rid + 1 
                q.put( { 'rid' : rid, 'msg' : self.data } )
                d = defer.Deferred()  
                d.addCallback(printData, self)
                
                request[rid] = d   # need a mutex around this !!!!
                self.active = 0
                #self.transport.stopReading()

    def respond(self,data):
        self.transport.write(data + "\n")
        self.transport.loseConnection()

class FrontdFactory(Factory):

    protocol = Frontd

def printData(d, frontd):
    frontd.respond(d)
    
def read_db_response():
    import time
    cursor = conn_in.cursor()
    while (1) :
        time.sleep(0.5)
        cursor.execute( "update msg set status = 'wip' where status = 'new'" )
        cursor.execute( "select rid, response from msg where status = 'wip'" )
        rows = cursor.fetchall()
        for row in rows:
            stdout.write( "rid %d response '%s'\n" % (row[0], row[1]))
            request[row[0]].callback( row[1] )
        cursor.execute( "update msg set status = 'done' where status = 'wip'" )

def write_db_request():
    import time
    cursor = conn_out.cursor()
    while (1) :
        req = q.get()
        cursor.execute( "insert into msg set rid=%s, msg=%s, response='help'", (req['rid'], req['msg']) )

conn_in  = MySQLdb.connect(  host = 'localhost', user = 'martin', passwd = 'password', db = 'test' );
conn_out = MySQLdb.connect(  host = 'localhost', user = 'martin', passwd = 'password', db = 'test' );

# run method in thread
reactor.callInThread( read_db_response )
reactor.callInThread( write_db_request )

reactor.listenTCP(8007, FrontdFactory())
reactor.run()





From glyph at twistedmatrix.com  Thu Mar  6 06:34:29 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 6 Mar 2003 05:34:29 -0600
Subject: [Twisted-Python] Thoughts on Deferred
In-Reply-To: <20030306060223.GA66896@doublegemini.com>
Message-ID: <98040940-4FC7-11D7-9352-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Thursday, March 6, 2003, at 12:02 AM, Clark C. Evans wrote:

>   1.  The entire deferred processing chain is quite nice,
>       although the bulk of the time my callbacks don't take
>       any arguments.  I suspect that most people who do have
>       callback args can just make an object and pass a bound
>       method as their callback instead of the 'args' mechanism.

Interesting idea, but I'm not sure about it yet.  Need to think it over.

>   2.  The error handling could use help.

You don't seem to understand it completely.  See itamar's post.

>   3.  Deferred also "artifically limits" so that the entire callback
>       tree can only be done once.   This involves a hack 
> "MultiDeferred"
>       to solve the problem; but with a slightly different _runCallbacks
>       plus a __init__ flag, this need not be the case.

If you actually try this and figure out how to get it work with the 
cases that Deferreds are used, I would be interested in seeing it, 
since this is a common criticism.  However, Deferreds are not event 
broadcasters, they are deferred results, and requests that are made 
once should only be answered once.  The following behavior, for example:

	d = Deferred()
	d.addCallback(foo)
	d.callback(bar)
	d.addCallback(baz)

only calls 'foo' and 'baz' once, which makes perfect sense: each 
callback is called as soon as possible with the result at that point in 
the chain.

In a "multi-"deferred case, though, what happens?  We add another 
'd.callback(boz)' to the end.  Then what?  does 'foo' get called once 
and 'baz' get called once?  'foo' called twice and 'baz' called once?  
'foo' and 'baz' both called twice with foo and with bar?

This makes callback execution highly dependent upon the order in which 
callbacks are registered.  Some other, similar callback abstraction 
mechanism might be useful here, but the semantics of deferreds would 
become pretty badly polluted to add something which _does_ depend on 
timing of the '.callback' method, where Deferreds have spent so much 
energy trying to get away from caring about that order.  Having to care 
about this on a regular basis smacks of the same sort of mandatory 
awareness of order-of-execution that thread programming brings.

>   4.  Lastly, I'd like to see other "state" variables for the deferred.
>       Essentially, what I see is a process flow, aka state transition
>       mechnanism emerging.   For an SQL query, one of the states
>       is 'good', 'bad', and 'finished'.  Perhaps I'm a bit off here,
>       but being able to handle more than two states could be useful.

This is why the Failure object has an exception type.  See the trap 
method.  For things that aren't errors you should be able to 
encapsulate that state information in the result.

More than two states smells like overengineering to me.  Does anyone 
else need this?

> Just some thoughts.  If you like, I could refactor the Deferred
> object as above (it'd be less code & probably cleaner), as well
> as updating the documentation and providing examples which run
> without modification.

Regardless of my criticisms I'd like to see you mail a patch to the 
list, so that I can comment on it more specifically.  Especially the 
first point: some more examples of how that would work would be helpful.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+ZzJJvVGR4uSOE2wRAvg8AKCEUUK4FvoOoTQzm3a2dUAVfLZCfACePMRW
ENuwW/CTSXdtI3H/GeHt/cY=
=O01d
-----END PGP SIGNATURE-----




From fog at initd.org  Thu Mar  6 06:50:06 2003
From: fog at initd.org (Federico Di Gregorio)
Date: 06 Mar 2003 12:50:06 +0100
Subject: [Twisted-Python] runQuery isolation patch
Message-ID: <1046951406.990.107.camel@momo.initd.org>

runQuery has a problem when used with databases with transactions and
high isolation levels (like postgresql+psycopg): it never closes the
transaction leaving threads using that connection from the pool
completely isolated from changes to the database. the solution is to
call rollback() on the connection just after the query has been
executed.

simple patch follows:

--- adbapi.py-old       2003-03-06 12:48:02.000000000 +0100
+++ adbapi.py   2003-03-06 12:49:01.000000000 +0100
@@ -97,6 +97,7 @@
         apply(curs.execute, args, kw)
         result = curs.fetchall()
         curs.close()
+       conn.rollback()
         return result
  
     def _runOperation(self, args, kw):

-- 
Federico Di Gregorio
Debian GNU/Linux Developer                                fog at debian.org
INIT.D Developer                                           fog at initd.org
  Gli esseri umani, a volte, sono destinati, per il solo fatto di
   esistere, a fare del male a qualcuno.              -- Haruki Murakami
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030306/35099af2/attachment.pgp 

From fog at initd.org  Thu Mar  6 09:04:44 2003
From: fog at initd.org (Federico Di Gregorio)
Date: 06 Mar 2003 15:04:44 +0100
Subject: [Twisted-Python] PATCH: runQuery
Message-ID: <1046959484.991.142.camel@momo.initd.org>

while patching runQuery to solve my postgresql/psycopg problems i
discovered a much problematic problem.

essentially if a query run through runQuery raise an exception, the
exception is propagated but rollback() is never called on the
connection. this leaves the connection in a "dirty" state and the
effects on the next query are database dependent (postgresql, for
example,  will simply discard all following queries until next
rollback()).

a patch follows:

--- adbapi.py-old       2003-03-06 12:48:02.000000000 +0100
+++ adbapi.py   2003-03-06 13:02:33.000000000 +0100
@@ -94,9 +94,12 @@
     def _runQuery(self, args, kw):
         conn = self.connect()
         curs = conn.cursor()
-        apply(curs.execute, args, kw)
-        result = curs.fetchall()
-        curs.close()
+       try:
+           apply(curs.execute, args, kw)
+           result = curs.fetchall()
+           curs.close()
+       finally:
+           conn.rollback()
         return result
  
     def _runOperation(self, args, kw):

-- 
Federico Di Gregorio
Debian GNU/Linux Developer                                fog at debian.org
INIT.D Developer                                           fog at initd.org
                             Best friends are often failed lovers. -- Me
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030306/de97b76a/attachment.pgp 

From cce at clarkevans.com  Thu Mar  6 10:03:25 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu, 6 Mar 2003 15:03:25 +0000
Subject: [Twisted-Python] Thoughts on Deferred
In-Reply-To: <98040940-4FC7-11D7-9352-000393C9700E@twistedmatrix.com>
References: <20030306060223.GA66896@doublegemini.com> <98040940-4FC7-11D7-9352-000393C9700E@twistedmatrix.com>
Message-ID: <20030306150325.GB68231@doublegemini.com>

On Thu, Mar 06, 2003 at 05:34:29AM -0600, Glyph Lefkowitz wrote:
| On Thursday, March 6, 2003, at 12:02 AM, Clark C. Evans wrote:
| >  1.  The entire deferred processing chain is quite nice,
| >      although the bulk of the time my callbacks don't take
| >      any arguments.  I suspect that most people who do have
| >      callback args can just make an object and pass a bound
| >      method as their callback instead of the 'args' mechanism.
| 
| Interesting idea, but I'm not sure about it yet.  Need to think it over.

Ok.  I'll post a patch for approval.

| >  2.  The error handling could use help.
| 
| You don't seem to understand it completely.  See itamar's post.

I think I was proposing an functionally equivalent option to
the current implementation.  After some thought, there really
isn't an advantage either way, although your implementation
could be ever-so-slightly-faster.   Let's drop this one.

| >  3.  Deferred also "artifically limits" so that the entire callback
| >      tree can only be done once.   This involves a hack 
| >"MultiDeferred"
| >      to solve the problem; but with a slightly different _runCallbacks
| >      plus a __init__ flag, this need not be the case.
| 
| If you actually try this and figure out how to get it work with the 
| cases that Deferreds are used, I would be interested in seeing it, 
| since this is a common criticism.  However, Deferreds are not event 
| broadcasters, they are deferred results, and requests that are made 
| once should only be answered once.

Yes, this just doesn't fit since I want to provide for "partial" 
results along the way; aka a database query or a fragment of 
a file, etc.   

|  The following behavior, for example:
| 
| 	d = Deferred()
| 	d.addCallback(foo)
| 	d.callback(bar)
| 	d.addCallback(baz)

Is this common?  

I think in a multi-result case, you can't add additional 
callbacks once 'callback' has been invoked; this restriction
is needed since you don't want to cache every value 
just-in-case another callback would be added later.

| only calls 'foo' and 'baz' once, which makes perfect sense: each 
| callback is called as soon as possible with the result at that point in 
| the chain.

Right; and any modifications would maintain the current behavior.  The
implementation path would add an additional flag to Deferred to indicate
if it was a multi-result thingy.   I'm still trying to figure out how
to send a 'finished' message down the chain.  I think this is somewhat
related to consumer/producer as well... a bit more thought is needed.

| In a "multi-"deferred case, though, what happens?  We add another 
| 'd.callback(boz)' to the end.  Then what?  does 'foo' get called once 
| and 'baz' get called once?  'foo' called twice and 'baz' called once?  
| 'foo' and 'baz' both called twice with foo and with bar?

You'd have one more call of 'foo' and 'bar', 'foo' passed 'boz', 
assuming that the callback(bar) happened after addCallback(baz).
I can't see how you'd make it work otherwise, beacuse you don't
really want to cache the value.

| This makes callback execution highly dependent upon the order in which 
| callbacks are registered.

It is already hightly dependent on this... addCallback(foo) followed
by addCallback(bar) is very different than addCallback(bar) followed
by addCallback(foo).  ;)

| Having to care about this on a regular basis smacks of the same 
| sort of mandatory awareness of order-of-execution that thread
| programming brings.

Agreed.  So you probably could'nt support the full semantics, i.e.,
the call chain would be much less dynamic.

| >  4.  Lastly, I'd like to see other "state" variables for the deferred.
| >      Essentially, what I see is a process flow, aka state transition
| >      mechnanism emerging.   For an SQL query, one of the states
| >      is 'good', 'bad', and 'finished'.  Perhaps I'm a bit off here,
| >      but being able to handle more than two states could be useful.
| 
| This is why the Failure object has an exception type.  See the trap 
| method.  For things that aren't errors you should be able to 
| encapsulate that state information in the result.

Ok.  I was just trying to differentate between a 'chunk' notify
and a finish message.  Probably this is another difference 
between the two Deferred and MultiDeferred.  Perhaps they should
stay distinct then.




From twisted at itamarst.org  Thu Mar  6 10:28:30 2003
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 6 Mar 2003 10:28:30 -0500
Subject: [Twisted-Python] Thoughts on Deferred
In-Reply-To: <20030306080304.GA67355@doublegemini.com>
References: <20030306060223.GA66896@doublegemini.com>
	<20030306011801.1c49d2cc.twisted@itamarst.org>
	<20030306080304.GA67355@doublegemini.com>
Message-ID: <20030306102830.16f54f6c.twisted@itamarst.org>

On Thu, 6 Mar 2003 08:03:04 +0000
"Clark C. Evans" <cce at clarkevans.com> wrote:

> Yes; the Deferred mechanism doesn't do "try/except" in the
> _runCallbacks, but it should... so that exceptions can be
> raised as well as returning failure.Failure.  Yet another
> patch... ;)

If an exception is raised in a callback function t will be passed to the
next errback in the chain.



From abe at fettig.net  Thu Mar  6 15:13:38 2003
From: abe at fettig.net (Abe Fettig)
Date: 06 Mar 2003 15:13:38 -0500
Subject: [Twisted-Python] gtk2reactor still broken?
Message-ID: <1046981618.734.15.camel@mingus>

Hi folks,

I just apt-get upgraded my python2.2-twisted (to verion
1.0.3+1.0.4alpha1) and python2.2-gtk2 (to version 1.99.15), and now the
Twisted/GTK2 app I've been working on can no longer connectTCP - it gets
a Timeout error every time.  Last month there was some discussion about
a problem with th gtk2reactor and the latest pygtk builds, but
supposedly the problem was fixed (see http://www.twistedmatrix.com/
pipermail/twisted-python/2003-February/002762.html).

It seems to me that the problem isn't fixed.  As a test I did 

import gtk2reactor
gtk2reactor.install()

at the beginning of another twisted script, and it seemed to create the
same problem.

Is there anybody who is having success with gtk2reactor and the latest
pygtk?

-- 
Abe Fettig <abe at fettig.net>




From cce at clarkevans.com  Thu Mar  6 16:01:43 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu, 6 Mar 2003 21:01:43 +0000
Subject: [Twisted-Python] PATCH: runQuery
In-Reply-To: <1046959484.991.142.camel@momo.initd.org>
References: <1046959484.991.142.camel@momo.initd.org>
Message-ID: <20030306210143.GB69568@doublegemini.com>

Federico,

Glyph is giving me CVS access soon; when he does, I'll
patch and test (beacuse I need to merge it in with my
'fetchmany' code).

Thanks for the patch,

Clark

On Thu, Mar 06, 2003 at 03:04:44PM +0100, Federico Di Gregorio wrote:
| while patching runQuery to solve my postgresql/psycopg problems i
| discovered a much problematic problem.
| 
| essentially if a query run through runQuery raise an exception, the
| exception is propagated but rollback() is never called on the
| connection. this leaves the connection in a "dirty" state and the
| effects on the next query are database dependent (postgresql, for
| example,  will simply discard all following queries until next
| rollback()).
| 
| a patch follows:
| 
| --- adbapi.py-old       2003-03-06 12:48:02.000000000 +0100
| +++ adbapi.py   2003-03-06 13:02:33.000000000 +0100
| @@ -94,9 +94,12 @@
|      def _runQuery(self, args, kw):
|          conn = self.connect()
|          curs = conn.cursor()
| -        apply(curs.execute, args, kw)
| -        result = curs.fetchall()
| -        curs.close()
| +       try:
| +           apply(curs.execute, args, kw)
| +           result = curs.fetchall()
| +           curs.close()
| +       finally:
| +           conn.rollback()
|          return result
|   
|      def _runOperation(self, args, kw):
| 
| -- 
| Federico Di Gregorio
| Debian GNU/Linux Developer                                fog at debian.org
| INIT.D Developer                                           fog at initd.org
|                              Best friends are often failed lovers. -- Me





From cce at clarkevans.com  Thu Mar  6 16:08:07 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu, 6 Mar 2003 21:08:07 +0000
Subject: [Twisted-Python] coding standard: column width?
In-Reply-To: <20030305181524.GA62536@doublegemini.com>
References: <20030304061612.GA52189@doublegemini.com> <3E657E23.10908@myrealbox.com> <1046839493.955.66.camel@golux> <20030305181524.GA62536@doublegemini.com>
Message-ID: <20030306210807.GC69568@doublegemini.com>

I asked this question in private (with regard to getting CVS access)
and Glyph indicated that he wouldn't mind whitespace changes
that strictly followed the indenting guidelines (4 spaces, no tabs),
but that he only wanted stuff like this changed when one is in
the vicinity of the offence; I infer, as to minimise testing overhead.

Best,

Clark

On Wed, Mar 05, 2003 at 06:15:24PM +0000, Clark C. Evans wrote:
| So, would purely whitespace patches fixing lines that
| go over 79 columns be accepted?
| 
| On Tue, Mar 04, 2003 at 11:44:53PM -0500, Steve Waterbury wrote:
| | On Tue, 2003-03-04 at 23:33, Samuel Bronson wrote:
| | > Clark C. Evans wrote:
| | > >The (very clear) coding standards don't mention a preferred column width.  
| | > >Could it be possible to add a 76 column code wrap requirement.  This is 
| | > >useful for those of us who use your aged 80 column terminals, and more
| | >  
| | > Or code at the console, or prefer 80 column emacs windows ;-)
| | 
| | Right.  The Twisted coding standards are clear ... but they 
| | shouldn't have to say everything:  in the absence of explicit 
| | direction from the Twisted coding standard, the Python style 
| | guidelines should be followed (PEP 8 and PEP 257).
| 
| | From PEP 8 (http://www.python.org/peps/pep-0008.html):
| | 
| |     There are still many devices around that are limited to 80
| |     character lines; plus, limiting windows to 80 characters makes it
| |     possible to have several windows side-by-side.  The default
| |     wrapping on such devices looks ugly.  Therefore, please limit all
| |     lines to a maximum of 79 characters (Emacs wraps lines that are
| |     exactly 80 characters long).  For flowing long blocks of text
| |     (docstrings or comments), limiting the length to 72 characters is
| |     recommended.
| 
| _______________________________________________
| Twisted-Python mailing list
| Twisted-Python at twistedmatrix.com
| http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From dave at krondo.com  Thu Mar  6 15:53:03 2003
From: dave at krondo.com (Dave Peticolas)
Date: 06 Mar 2003 12:53:03 -0800
Subject: [Twisted-Python] PATCH: runQuery
In-Reply-To: <1046959484.991.142.camel@momo.initd.org>
References: <1046959484.991.142.camel@momo.initd.org>
Message-ID: <1046983983.1834.149.camel@oneiros>

On Thu, 2003-03-06 at 06:04, Federico Di Gregorio wrote:
> while patching runQuery to solve my postgresql/psycopg problems i
> discovered a much problematic problem.
> 
> essentially if a query run through runQuery raise an exception, the
> exception is propagated but rollback() is never called on the
> connection. this leaves the connection in a "dirty" state and the
> effects on the next query are database dependent (postgresql, for
> example,  will simply discard all following queries until next
> rollback()).
> 
> a patch follows:
> 
> --- adbapi.py-old       2003-03-06 12:48:02.000000000 +0100
> +++ adbapi.py   2003-03-06 13:02:33.000000000 +0100
> @@ -94,9 +94,12 @@
>      def _runQuery(self, args, kw):
>          conn = self.connect()
>          curs = conn.cursor()
> -        apply(curs.execute, args, kw)
> -        result = curs.fetchall()
> -        curs.close()
> +       try:
> +           apply(curs.execute, args, kw)
> +           result = curs.fetchall()
> +           curs.close()
> +       finally:
> +           conn.rollback()
>          return result
>   
>      def _runOperation(self, args, kw):

Good catch! I wonder, though, shouldn't we be calling
commit() instead of rollback()? What if the query had
side-effects in the database, won't it undo those
changes?

dave

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030306/9e792846/attachment.pgp 

From twisted at itamarst.org  Thu Mar  6 15:55:13 2003
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 6 Mar 2003 15:55:13 -0500
Subject: [Twisted-Python] PATCH: runQuery
In-Reply-To: <20030306210143.GB69568@doublegemini.com>
References: <1046959484.991.142.camel@momo.initd.org>
	<20030306210143.GB69568@doublegemini.com>
Message-ID: <20030306155513.48317ab0.twisted@itamarst.org>

On Thu, 6 Mar 2003 21:01:43 +0000
"Clark C. Evans" <cce at clarkevans.com> wrote:

> Glyph is giving me CVS access soon; when he does, I'll
> patch and test (beacuse I need to merge it in with my
> 'fetchmany' code).

I've already commited this. Time to subscribe to twisted-commits :)



From andrew-twisted at puzzling.org  Thu Mar  6 17:35:11 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 7 Mar 2003 09:35:11 +1100
Subject: [Twisted-Python] tap2deb -v/--version bug
In-Reply-To: <3E664A62.2070300@myrealbox.com>
References: <20030304141000.GB13198@lapdog> <20030304180237.GA19482@lapdog> <3E664A62.2070300@myrealbox.com>
Message-ID: <20030306223511.GC11021@frobozz.local>

On Wed, Mar 05, 2003 at 02:05:06PM -0500, Samuel Bronson wrote:
>  Tommi Virtanen wrote:
> 
> >	Moshez said "go ahead and commit, but fix the manpage too", so
> >	I did just that.
> >
> I think manpages would ideally be generated from the source code. Then
> it would be easy to remember to do it, and maybe you wouldn't have to
> type a bunch of stuff twice. Might be prohibitively complex to
> implement, though.

You're welcome to try :)

I doubt you'll be able to generate a man page for mktap that's as good as
the current one.  One reason is that the descriptions of the various options
is a bit longer in a man page than in the --help...  I don't much like the
duplication either, but I see no better alternative.

-Andrew.




From fog at initd.org  Thu Mar  6 18:12:29 2003
From: fog at initd.org (Federico Di Gregorio)
Date: 07 Mar 2003 00:12:29 +0100
Subject: [Twisted-Python] PATCH: runQuery
In-Reply-To: <1046983983.1834.149.camel@oneiros>
References: <1046959484.991.142.camel@momo.initd.org>
	 <1046983983.1834.149.camel@oneiros>
Message-ID: <1046992349.1052.10.camel@momo.initd.org>

Il gio, 2003-03-06 alle 21:53, Dave Peticolas ha scritto:

> Good catch! I wonder, though, shouldn't we be calling
> commit() instead of rollback()? What if the query had
> side-effects in the database, won't it undo those
> changes?

this is exactly why rollback is used. a select is supposed to *not* have
side-effects and having your app depend on some side-effect commited by
a method call supposed to just read from the database is quite wrong.
(note that selects on stuff like nextval() on sequences are transaction
transparent and so not influenced by rollback and commit.)

-- 
Federico Di Gregorio
Debian GNU/Linux Developer                                fog at debian.org
INIT.D Developer                                           fog at initd.org
  Gli avvoltoi cinesi si nutrono di arte, ma possono anche mangiare
   i `domani'.                                        -- Haruki Murakami
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030307/23ac6dc2/attachment.pgp 

From exarkun at intarweb.us  Thu Mar  6 18:24:50 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Thu, 6 Mar 2003 18:24:50 -0500
Subject: [Twisted-Python] Pending PendingDeprecationWarning
Message-ID: <20030306232450.GB553@meson.dyndns.org>

  As some may already know, Python 2.3 will see apply() change to a function
implemented in Python and deprecated through the use of the
PendingDeprecationWarning.  While it will still be around for some time, as
of 2.3 it will a stiff runtime penalty.

  I'd like to suggest that everyone use the new syntax when writing new code
for Twisted, and if you happen to be making changes to existing code that
uses apply(), to update these usages to the new syntax as well.

  I considered doing a monolothic patch to fix all current usages, but I
think at least some of you will agree that an incremental approach is a
better idea.

  Jp

-- 
 up 3 days, 15:58, 6 users, load average: 0.04, 0.05, 0.00
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030306/ef94adf3/attachment.pgp 

From fog at initd.org  Thu Mar  6 18:24:11 2003
From: fog at initd.org (Federico Di Gregorio)
Date: 07 Mar 2003 00:24:11 +0100
Subject: [Twisted-Python] gtk2reactor still broken?
In-Reply-To: <1046981618.734.15.camel@mingus>
References: <1046981618.734.15.camel@mingus>
Message-ID: <1046993051.1052.24.camel@momo.initd.org>

Il gio, 2003-03-06 alle 21:13, Abe Fettig ha scritto:
> Hi folks,
> 
> I just apt-get upgraded my python2.2-twisted (to verion
> 1.0.3+1.0.4alpha1) and python2.2-gtk2 (to version 1.99.15), and now the
> Twisted/GTK2 app I've been working on can no longer connectTCP - it gets
> a Timeout error every time.  Last month there was some discussion about
> a problem with th gtk2reactor and the latest pygtk builds, but
> supposedly the problem was fixed (see http://www.twistedmatrix.com/
> pipermail/twisted-python/2003-February/002762.html).
> 
> It seems to me that the problem isn't fixed.  As a test I did 
> 
> import gtk2reactor
> gtk2reactor.install()
> 
> at the beginning of another twisted script, and it seemed to create the
> same problem.
> 
> Is there anybody who is having success with gtk2reactor and the latest
> pygtk?

i apt-get updated yesterday and my application is still working right.
here are the versions i use:

ii  python2.2-twisted  1.0.3+1.0.4alpha1-1
ii  python2.2-gtk2     1.99.15-2

note that i don't use listenTCP on the Gtk2 client, only connect and
then a lot of remote calls. if you send me a minimalist example i'll
test it for you and try to fix bugs to my best (can't guarantee success
though, i am quite young to twisted..)

-- 
Federico Di Gregorio
Debian GNU/Linux Developer                                fog at debian.org
INIT.D Developer                                           fog at initd.org
  We should forget about small efficiencies, say about 97% of the
   time: premature optimization is the root of all evil.    -- D.E.Knuth
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030307/ba8d25e7/attachment.pgp 

From acapnotic at twistedmatrix.com  Thu Mar  6 20:14:05 2003
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 06 Mar 2003 17:14:05 -0800
Subject: [Twisted-Python] Portland Perspective Broker presentation Monday
Message-ID: <1046999486.28102.50.camel@troglodyte.funhouse>

This coming Monday (March 10th), I will be addressing the Portland
Python Interest Group on the subject of Twisted's Perspective Broker. 
Topics will include a few words on security, an example of how to
implement a Observer/Observable system across the network, and
whatever else I dream up between now and Monday.

You can take this as a free prelude to Brian Warner's more extensive
treatment of the topic later this month at PyCon, or Glyph's many hour
tutorial (pending confirmation) at OSCON here in Portland later this
year.

Where: Fox Tower in downtown Portland, Oregon.  Lobby entrances are on Broadway and Park avenues,
between SW Yamhill and Taylor streets, just southwest of Pioneer
Courthouse Square.

When: Monday, March 10th, 7 PM.  Please meet us in the lobby some
minutes *early* so that our host may escort us to the conference room. 
Bands of scruffy geeks roaming around after hours seems to make building
security touchy.

Cheers,

 - Kevin


-- 
The moon is waxing crescent, 11.7% illuminated, 3.3 days old.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030306/ba739d84/attachment.pgp 

From dave at krondo.com  Thu Mar  6 20:49:51 2003
From: dave at krondo.com (Dave Peticolas)
Date: 06 Mar 2003 17:49:51 -0800
Subject: [Twisted-Python] PATCH: runQuery
In-Reply-To: <1046992349.1052.10.camel@momo.initd.org>
References: <1046959484.991.142.camel@momo.initd.org>
	 <1046983983.1834.149.camel@oneiros>
	 <1046992349.1052.10.camel@momo.initd.org>
Message-ID: <1047001791.25901.4.camel@oneiros>

On Thu, 2003-03-06 at 15:12, Federico Di Gregorio wrote:
> Il gio, 2003-03-06 alle 21:53, Dave Peticolas ha scritto:
> 
> > Good catch! I wonder, though, shouldn't we be calling
> > commit() instead of rollback()? What if the query had
> > side-effects in the database, won't it undo those
> > changes?
> 
> this is exactly why rollback is used. a select is supposed to *not* have
> side-effects and having your app depend on some side-effect commited by
> a method call supposed to just read from the database is quite wrong.
> (note that selects on stuff like nextval() on sequences are transaction
> transparent and so not influenced by rollback and commit.)

I disagree. A select generally doesn't have side-effects,
but it is possible to write a select call which does. One
example is a rule which logs queries. Why should we
arbitrarily rollback select calls just because *we*
think it's wrong to use selects with side-effects?

I think you are imposing policy for no reason.

dave

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030306/f0ad7ba6/attachment.pgp 

From glyph at twistedmatrix.com  Thu Mar  6 21:02:07 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 6 Mar 2003 20:02:07 -0600
Subject: [Twisted-Python] PATCH: runQuery
In-Reply-To: <1047001791.25901.4.camel@oneiros>
Message-ID: <CD0945E1-5040-11D7-9352-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Thursday, March 6, 2003, at 07:49 PM, Dave Peticolas wrote:

> I think you are imposing policy for no reason.

I think that this is a tough call, although I am very slightly inclined 
to agree with davep.

Why don't we make committing an optional argument, by default on, which 
you can easily turn off if you want a rollback instead?  (At the risk 
of making an overbroad generalization: rollback() tends to be more 
expensive than commit() most of the time, which is another good reason 
to make it the default.)


-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+Z/2jvVGR4uSOE2wRAgxXAKCffoPDsQHU25B3vDcGHTBaa95itACgrBG8
H6IJPORVHbx+w3LYWI6Zzlg=
=0pmv
-----END PGP SIGNATURE-----




From cce at clarkevans.com  Thu Mar  6 21:27:31 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Fri, 7 Mar 2003 02:27:31 +0000
Subject: [Twisted-Python] PATCH: runQuery
In-Reply-To: <CD0945E1-5040-11D7-9352-000393C9700E@twistedmatrix.com>
References: <1047001791.25901.4.camel@oneiros> <CD0945E1-5040-11D7-9352-000393C9700E@twistedmatrix.com>
Message-ID: <20030307022731.GA71982@doublegemini.com>

On Thu, Mar 06, 2003 at 08:02:07PM -0600, Glyph Lefkowitz wrote:
| On Thursday, March 6, 2003, at 07:49 PM, Dave Peticolas wrote:
| >I think you are imposing policy for no reason.
| 
| I think that this is a tough call, although I am very slightly inclined 
| to agree with davep.
| 
| Why don't we make committing an optional argument, by default on, which 
| you can easily turn off if you want a rollback instead?  (At the risk 
| of making an overbroad generalization: rollback() tends to be more 
| expensive than commit() most of the time, which is another good reason 
| to make it the default.)

Typically one would call rollback() before you put 
the connection back into the connection pool.  Overall,
I think there is a lower level design problem with
the adbapi module.  If you are only running one query
then there isn't a rpoblem, but if you are executing
3 queries, say sequentially, then you don't want
that rollback.  The adbapi needs to expose 'connection'
object as a whole, with cursors.   I'll need to fix
this for myself... so if no one else does, I'll patch.

For now, I think rolling back between each query is
good enough... if someone wants to run several queries
in a row, then they really should help me patch.

The other related item is that some databases allow
for multiple cursors with the same connection; and
thus a single request may want to run N deferreds in
parallel (I do, for example) and these deferreds should
all come from the same connection if at all possible.

In short, this is one small issue that needs to be
resolved in that module.

Best,

Clark



From cce at clarkevans.com  Fri Mar  7 02:07:35 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Fri, 7 Mar 2003 07:07:35 +0000
Subject: [Twisted-Python] flow - a state-machine consumer
Message-ID: <20030307070735.GA73244@doublegemini.com>

After being convinced on IRC that my use cases arn't what Deferred
is meant to solve, Donovan "wzZzy" and I put together a first pass
at a more granular 'consumer'.  I'm now using it to build some 
fairly complicated web pages from a database, and may find its 
way into Woven (although perhaps not in its current form). 

Anyway, the tool includes:

  0. the Flow dispatcher, which is a reactor like
     mechanism driving events.

  1. a mechanism to execute a function in a thread,
     where the function returns an iterator which
     is used to generate events in the main thread.

  2. an superclass of adbapi.ConnectionPool with
     a queryChunked function which returns a result
     set incrementally (row by row) to the main 
     thread for further processing

Future plans:

  0. Work on exception handling and trapping just
     to verify that it works as coded.

  1. Incorporate some way for the reactor to 'pause'
     itself (and throw it self into the event queue)
     so that other events can be processed

  2. Update the code so that the execute to thread
     function can take an initial state for an 
     argument

  3. Update the SQL linkage so that it can take
     more than one query in parallel, sequencing
     the result sets, and returning them to a 
     shared flow object using different state
     arguments.

It isn't stable, but you can find it in CVS, or at
   http://clarkevans.com/flow.py

Comments are encouraged.

Best,

Clark



From andrew-twisted at puzzling.org  Fri Mar  7 03:31:49 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 7 Mar 2003 19:31:49 +1100
Subject: [Twisted-Python] flow - a state-machine consumer
In-Reply-To: <20030307070735.GA73244@doublegemini.com>
References: <20030307070735.GA73244@doublegemini.com>
Message-ID: <20030307083149.GB13439@frobozz.local>

On Fri, Mar 07, 2003 at 07:07:35AM +0000, Clark C. Evans wrote:
[..snip..]
> Comments are encouraged.

I haven't looked at flow in detail yet, but my intuition is that the
state-machine and the consumer mechanism should be decoupled.  I think there
will be uses for a consumer/producer where a state machine is overkill --
most of the time all you really want to do is receive data occasionally, and
that's it.

-Andrew.




From fog at initd.org  Fri Mar  7 03:33:58 2003
From: fog at initd.org (Federico Di Gregorio)
Date: 07 Mar 2003 09:33:58 +0100
Subject: [Twisted-Python] PATCH: runQuery
In-Reply-To: <1047001791.25901.4.camel@oneiros>
References: <1046959484.991.142.camel@momo.initd.org>
	 <1046983983.1834.149.camel@oneiros>
	 <1046992349.1052.10.camel@momo.initd.org>
	 <1047001791.25901.4.camel@oneiros>
Message-ID: <1047026038.1171.6.camel@momo.initd.org>

Il ven, 2003-03-07 alle 02:49, Dave Peticolas ha scritto:
> On Thu, 2003-03-06 at 15:12, Federico Di Gregorio wrote:
> > Il gio, 2003-03-06 alle 21:53, Dave Peticolas ha scritto:
> > 
> > > Good catch! I wonder, though, shouldn't we be calling
> > > commit() instead of rollback()? What if the query had
> > > side-effects in the database, won't it undo those
> > > changes?
> > 
> > this is exactly why rollback is used. a select is supposed to *not* have
> > side-effects and having your app depend on some side-effect commited by
> > a method call supposed to just read from the database is quite wrong.
> > (note that selects on stuff like nextval() on sequences are transaction
> > transparent and so not influenced by rollback and commit.)
> 
> I disagree. A select generally doesn't have side-effects,
> but it is possible to write a select call which does. One
> example is a rule which logs queries. Why should we
> arbitrarily rollback select calls just because *we*
> think it's wrong to use selects with side-effects?
> 
> I think you are imposing policy for no reason.

you're right. btw, to put it simple, i think the whole concept of
runQuery/runOperation is b0rken. 

i'll resend a patch with s/rollback/commit/.

-- 
Federico Di Gregorio
Debian GNU/Linux Developer & Italian Press Contact        fog at debian.org
INIT.D Developer                                           fog at initd.org
  99.99999999999999999999% still isn't 100% but sometimes suffice. -- Me
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030307/6008364c/attachment.pgp 

From fog at initd.org  Fri Mar  7 03:35:04 2003
From: fog at initd.org (Federico Di Gregorio)
Date: 07 Mar 2003 09:35:04 +0100
Subject: [Twisted-Python] PATCH: runQuery
In-Reply-To: <20030307022731.GA71982@doublegemini.com>
References: <1047001791.25901.4.camel@oneiros>
	 <CD0945E1-5040-11D7-9352-000393C9700E@twistedmatrix.com>
	 <20030307022731.GA71982@doublegemini.com>
Message-ID: <1047026104.1124.8.camel@momo.initd.org>

Il ven, 2003-03-07 alle 03:27, Clark C. Evans ha scritto:
> On Thu, Mar 06, 2003 at 08:02:07PM -0600, Glyph Lefkowitz wrote:
> | On Thursday, March 6, 2003, at 07:49 PM, Dave Peticolas wrote:
> | >I think you are imposing policy for no reason.
> | 
> | I think that this is a tough call, although I am very slightly inclined 
> | to agree with davep.
> | 
> | Why don't we make committing an optional argument, by default on, which 
> | you can easily turn off if you want a rollback instead?  (At the risk 
> | of making an overbroad generalization: rollback() tends to be more 
> | expensive than commit() most of the time, which is another good reason 
> | to make it the default.)
> 
> Typically one would call rollback() before you put 
> the connection back into the connection pool.  Overall,
> I think there is a lower level design problem with
> the adbapi module.  If you are only running one query
> then there isn't a rpoblem, but if you are executing
> 3 queries, say sequentially, then you don't want
> that rollback.  The adbapi needs to expose 'connection'
> object as a whole, with cursors.   I'll need to fix
> this for myself... so if no one else does, I'll patch.

it does. look at runInteraction and the Transaction object.

-- 
Federico Di Gregorio
Debian GNU/Linux Developer                                fog at debian.org
INIT.D Developer                                           fog at initd.org
                   I came like Water, and like Wind I go. -- Omar Khayam
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030307/127b0a4c/attachment.pgp 

From wilk-ml at flibuste.net  Sat Mar  8 15:32:36 2003
From: wilk-ml at flibuste.net (William Dode)
Date: 08 Mar 2003 21:32:36 +0100
Subject: [Twisted-Python] gzip with web
Message-ID: <87u1edy4yj.fsf@flibuste.net>

hi,

I convert a cgi site in twisted. On the server, the script run 10x
faster ! but my users doesn't understand why i'm so happy since the see
the page less quickly... I think it's because apache use mod_gzip. 
How can i send the content with gzip ?

bye

-- 
William Dode - http://flibuste.net



From wilk-ml at flibuste.net  Sat Mar  8 16:11:15 2003
From: wilk-ml at flibuste.net (William Dode)
Date: 08 Mar 2003 22:11:15 +0100
Subject: [Twisted-Python] gzip with web
In-Reply-To: <87u1edy4yj.fsf@flibuste.net>
References: <87u1edy4yj.fsf@flibuste.net>
Message-ID: <87ptp1y364.fsf@flibuste.net>

William Dode <wilk-ml at flibuste.net> writes:

> hi,
> 
> I convert a cgi site in twisted. On the server, the script run 10x
> faster ! but my users doesn't understand why i'm so happy since the see
> the page less quickly... I think it's because apache use mod_gzip. 
> How can i send the content with gzip ?

I answer to me...
        encoding = request.getHeader("accept-encoding")
        if encoding and encoding.find("gzip")>=0:
            import cStringIO,gzip
            zbuf = cStringIO.StringIO()
            zfile = gzip.GzipFile(None, 'wb', 9, zbuf)
            zfile.write(content)
            zfile.close()
            request.setHeader("Content-encoding","gzip")
            return zbuf.getvalue()
        else:
            return content

It works, i'm right ?

-- 
William Dode - http://flibuste.net



From cce at clarkevans.com  Sat Mar  8 18:06:22 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Sat, 8 Mar 2003 23:06:22 +0000
Subject: [Twisted-Python] updated defer.html in cvs
Message-ID: <20030308230622.GA78812@doublegemini.com>

Hello.  I updated defer.html in CVS so that it has runnable
examples.  Also, in the first couple paragarphs it wasn't 
clear that Deferred actually doesn't defer execution, but
rather is a callback/errback handler mechanism.  So, I edited
a small chunk of prose to help reflect that.  {this particular
point threw me for a loop on my first reading when I was a newbie}

Anyway, I put a snapshot of the file on my site:
   http://clarkevans.com/defer.html  it doesn't have
any of the images, stylesheets, etc.  But, you can
grab the examples from there and run them.

Clark




From radix at twistedmatrix.com  Sat Mar  8 20:53:45 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sat, 8 Mar 2003 20:53:45 -0500
Subject: [Twisted-Python] updated defer.html in cvs
In-Reply-To: <20030308230622.GA78812@doublegemini.com>
References: <20030308230622.GA78812@doublegemini.com>
Message-ID: <20030309015345.GA21976@radii>

On Sat, Mar 08, 2003 at 11:06:22PM +0000, Clark C. Evans wrote:
> Hello.  I updated defer.html in CVS so that it has runnable
> examples.  Also, in the first couple paragarphs it wasn't 
> clear that Deferred actually doesn't defer execution, but
> rather is a callback/errback handler mechanism.  So, I edited
> a small chunk of prose to help reflect that.  {this particular
> point threw me for a loop on my first reading when I was a newbie}

The title needs to be changed. That's bugged me for a while, but I've
been forgetting to say so. What's a good alternative? "Deferring
Results"?

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From cce at clarkevans.com  Sat Mar  8 21:38:08 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Sun, 9 Mar 2003 02:38:08 +0000
Subject: [Twisted-Python] updated defer.html in cvs
In-Reply-To: <20030309015345.GA21976@radii>
References: <20030308230622.GA78812@doublegemini.com> <20030309015345.GA21976@radii>
Message-ID: <20030309023808.GA79214@doublegemini.com>

On Sat, Mar 08, 2003 at 08:53:45PM -0500, Christopher Armstrong wrote:
| On Sat, Mar 08, 2003 at 11:06:22PM +0000, Clark C. Evans wrote:
| > Hello.  I updated defer.html in CVS so that it has runnable
| > examples.  Also, in the first couple paragarphs it wasn't 
| > clear that Deferred actually doesn't defer execution, but
| > rather is a callback/errback handler mechanism.  So, I edited
| > a small chunk of prose to help reflect that.  {this particular
| > point threw me for a loop on my first reading when I was a newbie}
| 
| The title needs to be changed. That's bugged me for a while, but I've
| been forgetting to say so. What's a good alternative? "Deferring
| Results"?

Deferred ; Reporting Results from a Deferred Operation

Clark



From golux at comcast.net  Sat Mar  8 21:30:48 2003
From: golux at comcast.net (Steve Waterbury)
Date: Sat, 08 Mar 2003 21:30:48 -0500
Subject: [Twisted-Python] updated defer.html in cvs
In-Reply-To: <20030309015345.GA21976@radii>
References: <20030308230622.GA78812@doublegemini.com>
 <20030309015345.GA21976@radii>
Message-ID: <1047177048.955.90.camel@golux>

On Sat, 2003-03-08 at 20:53, Christopher Armstrong wrote:
> On Sat, Mar 08, 2003 at 11:06:22PM +0000, Clark C. Evans wrote:
> > Hello.  I updated defer.html in CVS so that it has runnable
> > examples.  Also, in the first couple paragarphs it wasn't 
> > clear that Deferred actually doesn't defer execution, but
> > rather is a callback/errback handler mechanism.  So, I edited
> > a small chunk of prose to help reflect that.  {this particular
> > point threw me for a loop on my first reading when I was a newbie}
> 
> The title needs to be changed. That's bugged me for a while, but I've
> been forgetting to say so. What's a good alternative? "Deferring
> Results"?

How about something real explicit, like:  
"Getting Results Asynchronously" ... 
The app isn't really deferring the results; the results 
are deferring themselves; it's just telling them to 
give it a call when they arrive.  Rather than 
"deferring", I'd say what the app is doing is more like 
"subscribing".  "Deferred" might really be more like 
"stacked".  

- Steve.





From andrew-twistedcommits at puzzling.org  Sat Mar  8 20:49:32 2003
From: andrew-twistedcommits at puzzling.org (Andrew Bennetts)
Date: Sun, 9 Mar 2003 12:49:32 +1100
Subject: [Twisted-Python] Re: [Twisted-commits] Updated defer.html so that the first 4 examples are runnable, split the 3rd
In-Reply-To: <E18rn3o-0008OQ-00@pyramid.twistedmatrix.com>
References: <E18rn3o-0008OQ-00@pyramid.twistedmatrix.com>
Message-ID: <20030309014932.GA21808@frobozz.local>

On Sat, Mar 08, 2003 at 04:44:56PM -0600, cce CVS wrote:
> Modified files:
> Twisted/doc/howto/defer.html 1.29 1.30

[..snip..]
> @@ -19,14 +19,22 @@
>  methods where the common idiom is to block until a result is
>  gotten.</p>
>  <pre class="python">
> +
>  class Getter:
>  
>      def getData(self, x):
> -        self.blockUntilResult(x)
> -        return result
> +        return self.someBlockingCall(x)
> +
> +    def someBlockingCall(self,x)
> +        print "blocking"
> +        import time
> +        time.sleep(4)
> +        return x * 3
>  
>  g = Getter()
>  print g.getData(3)
> +print "blocking"
> +
>  </pre>

Why does this code snippet now do 'print "blocking"' twice?

>  <h3>Don't Call Us, We'll Call You</h3>
> @@ -39,29 +47,43 @@
>  understand the necessity for Deferreds.</p>
>  
>  <pre class="python">
> +
>  class Getter:
>  
>      def getData(self, x, callback):
> -        self.callback = callback
> -        # this call does not block, it ensure self.gotResult is called
> -        # when we have the result
> -        self.onResult(x, self.gotResult)
> -    
> -    def gotResult(self, result):
> -        self.callback(result)
> +        self.callback = callback; self.x = x

Why not two seperate lines here?

> +        self.nonBlockingOperation()
> +        #
> +        # Timer class happens to wrap the previous code in 
> +        # a thread; but this could be any asyncronous operation 
> +        # such as selecting from a socket, etc.
> +        #
> +        from threading import Timer
> +        t = Timer(4, self.gotResult)
> +        t.start()
> +
> +    def nonBlockingOperation(self): 
> +        print "non-blocking"
> +
> +    def gotResult(self):
> +        self.callback(3*self.x)
>  
>  def gotData(d):
>      print d
>  
>  g = Getter()
>  g.getData(3, gotData)
> +
>  </pre>

You've sacrificed clarity for runnability.  I'm not sure that's the right
thing to do; the point of this example is now obscured behind details like
how threading.Timer works, and spelling out a dummy "nonBlockingOperation"
method where before it was quite clear without it.  Not all example code
in the Howtos must be immediately executable standalone... I think perhaps
this example code would be better in the doc/examples directory, where it is
more appropriate for examples to be verbose like this.

Also, the way the example used to be reflected an idiomatic use in Twisted:
where there is some event handler, e.g. onResult, fired at an arbitrary time
by some external source.  Think of e.g. Protocol objects with dataReceived.
The example as it was emphasised that Deferreds can apply equally well when
you don't have control over when some event completes -- regardless of
whether it came from a thread, or the network, or anywhere.

>  
> -<p>There are several things missing in this simple example.  There is no way to
> -know if the data never comes back; no mechanism for handling errors.  There is
> -no way to distinguish between different calls to gotData from different
> -sessions.  <code>Deferred</code> solves these problems, by creating a single,
> -unified way to defer execution of code that depends on blocking calls.</p>
> +<p>There are several things missing in this simple example.  There is no way
> +to know if the data never comes back; no mechanism for handling errors.  The
> +example does not handle a multiple callback functions, nor does it give a
> +method to merge arguments before and after execution.  Further, there is no
> +way to distinguish between different calls to gotData from different
> +producer objects. <code>Deferred</code> solves these problems, by creating 
> +a single, unified way to handle callbacks and errors from deferred
> +execution.</p>

What does "merge arguments before and after execution" mean to a Twisted
newbie?  Why would they want to do it?

>  
>  <h2>Deferreds</h2>
>  
> @@ -69,9 +91,45 @@
>  a function will at some point have a result.  We can attach callback functions
>  to a Deferred, and once it gets a result these callbacks will be called. In
>  addition Deferreds allow the developer to register a callback for an error,
> -with the default behavior of logging the error. This is an asynchronous
> -equivalent of the common idiom of blocking until a result is returned or an
> -exception it raised.</p>
> +with the default behavior of logging the error.  The deferred mechanism 
> +standardizes the application programmer's interface with all sorts of 
> +blocking or delayed operations.</p>

That probably should be "*D*eferred", not "deferred".  I think I'd also like
to add back the comment about "This is an asynchronous equivalent of ..." --
perhaps it's overly jargonistic, but it is the way I think about Deferreds;
they are the primary tool Twisted provides to abstract away blocking
operations into a fundamentally asynchronous framework.

> @@ -82,39 +140,48 @@
>  to return the result to the HTTP client.</p>
>  
>  <pre class="python">
[..snip..]
>  </pre>

Again, with the next two examples I think you've obscured the point in your
efforts to make everything explicit.  I'd rather have a 10 line example
that illustrates a concept, than a 20 line example that obscures the same
concept behind irrelevant method definitions, etc.  On the other hand, I
think long examples, say 50 lines or more, should be runnable, because
anything long enough to require that many lines to explain probably should
be ready for a newbie to play with.  

Informally, I'd say this is the different between <pre class="python"> and
<a href=... class="py-listing"> -- when you're listing a file, it *should*
be a complete, runnable example.  In fact, complete, runnable examples
probably should be a listing for the reader's convenience, i.e. put the code
in doc/listings somewhere, rather that in the .html file.

Please don't be discouraged from working on the docs!  They *do* need
work... I just happen to think that defer.html is probably the doc least in
need of improvement :)

-Andrew.




From golux at comcast.net  Sun Mar  9 01:12:22 2003
From: golux at comcast.net (Steve Waterbury)
Date: Sun, 09 Mar 2003 01:12:22 -0500
Subject: [Twisted-Python] Re: [Twisted-commits] Updated defer.html so	that
 the first 4 examples are runnable, split the 3rd
In-Reply-To: <20030309014932.GA21808@frobozz.local>
References: <E18rn3o-0008OQ-00@pyramid.twistedmatrix.com>
 <20030309014932.GA21808@frobozz.local>
Message-ID: <1047190343.957.130.camel@golux>

As one who has perpetual newbie-mind, I feel I should comment ...

On Sat, 2003-03-08 at 20:49, Andrew Bennetts wrote:
> You've sacrificed clarity for runnability.  

Having read it carefully, I have to agree with Andrew here.  

> I'm not sure that's the right
> thing to do; the point of this example is now obscured behind details like
> how threading.Timer works, and spelling out a dummy "nonBlockingOperation"
> method where before it was quite clear without it.  

These were criticisms I had, too.

> Not all example code
> in the Howtos must be immediately executable standalone... I think perhaps
> this example code would be better in the doc/examples directory, where it is
> more appropriate for examples to be verbose like this.

Here I disagree.  Newbies are generally served better by 
examples with lots of (germane) comments ... but not 
extraneous stuff, like the Timer.  And I think it would be 
"nice" if they were executable, but if it comes down to 
choosing between clarity and executability, clarity should win.  

> Also, the way the example used to be reflected an idiomatic use in Twisted:
> where there is some event handler, e.g. onResult, fired at an arbitrary time
> by some external source.  Think of e.g. Protocol objects with dataReceived.
> The example as it was emphasised that Deferreds can apply equally well when
> you don't have control over when some event completes -- regardless of
> whether it came from a thread, or the network, or anywhere.

Which is almost always the case, of course.

> > -<p>There are several things missing in this simple example.  There is no way to
> > -know if the data never comes back; no mechanism for handling errors.  There is
> > -no way to distinguish between different calls to gotData from different
> > -sessions.  <code>Deferred</code> solves these problems, by creating a single,
> > -unified way to defer execution of code that depends on blocking calls.</p>
> > +<p>There are several things missing in this simple example.  There is no way
> > +to know if the data never comes back; no mechanism for handling errors.  The
> > +example does not handle a multiple callback functions, nor does it give a
> > +method to merge arguments before and after execution.  Further, there is no
> > +way to distinguish between different calls to gotData from different
> > +producer objects. <code>Deferred</code> solves these problems, by creating 
> > +a single, unified way to handle callbacks and errors from deferred
> > +execution.</p>
> 
> What does "merge arguments before and after execution" mean to a Twisted
> newbie?  Why would they want to do it?

Here I disagree again.  I think I know what is meant (although 
clarity could be improved, again), and it was one of the first things 
I wanted to do ... of course, it didn't take too long to suss that 
lambdas are the preferred idiom for that ... 

> ....  I think I'd also like
> to add back the comment about "This is an asynchronous equivalent of ..." --
> perhaps it's overly jargonistic, but it is the way I think about Deferreds;
> they are the primary tool Twisted provides to abstract away blocking
> operations into a fundamentally asynchronous framework.

Total agreement.  If they don't know what "asynchronous" 
means, they can look it up!  Sheesh, it's a standard term.  
(Twisted-specific jargon is not a problem in the docs 
either, as it is always defined when introduced.)

> Again, with the next two examples I think you've obscured the point in your
> efforts to make everything explicit.  I'd rather have a 10 line example
> that illustrates a concept, than a 20 line example that obscures the same
> concept behind irrelevant method definitions, etc.  ...

Agreed also.  

That said, I think there are cases where the in-line examples seem
a trifle too elliptical.  I'll have to be more specific, I know, 
so I'll send an example when I have time.  

- Steve.





From andrew-twisted at puzzling.org  Sun Mar  9 01:51:02 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sun, 9 Mar 2003 17:51:02 +1100
Subject: [Twisted-Python] Re: [Twisted-commits] Updated defer.html so	that the first 4 examples are runnable, split the 3rd
In-Reply-To: <1047190343.957.130.camel@golux>
References: <E18rn3o-0008OQ-00@pyramid.twistedmatrix.com> <20030309014932.GA21808@frobozz.local> <1047190343.957.130.camel@golux>
Message-ID: <20030309065102.GA8620@frobozz.local>

On Sun, Mar 09, 2003 at 01:12:22AM -0500, Steve Waterbury wrote:
> As one who has perpetual newbie-mind, I feel I should comment ...

Excellent :)

I was worried that my criticisms were based too much from the perspective of
someone who is already familiar with Deferreds.

> On Sat, 2003-03-08 at 20:49, Andrew Bennetts wrote:
[..snip..]
> > Not all example code
> > in the Howtos must be immediately executable standalone... I think perhaps
> > this example code would be better in the doc/examples directory, where it is
> > more appropriate for examples to be verbose like this.
> 
> Here I disagree.  Newbies are generally served better by 
> examples with lots of (germane) comments ... but not 
> extraneous stuff, like the Timer.  And I think it would be 
> "nice" if they were executable, but if it comes down to 
> choosing between clarity and executability, clarity should win.  

Yeah, true.  I over-emphasised a bit.  I guess I was thinking that the
Deferred doc is already quite long, and padding it with more examples that
are quite similar could be detrimental.  I certainly have no objections to
adding comments :)

> > > -<p>There are several things missing in this simple example.  There is no way to
> > > -know if the data never comes back; no mechanism for handling errors.  There is
> > > -no way to distinguish between different calls to gotData from different
> > > -sessions.  <code>Deferred</code> solves these problems, by creating a single,
> > > -unified way to defer execution of code that depends on blocking calls.</p>
> > > +<p>There are several things missing in this simple example.  There is no way
> > > +to know if the data never comes back; no mechanism for handling errors.  The
> > > +example does not handle a multiple callback functions, nor does it give a
> > > +method to merge arguments before and after execution.  Further, there is no
> > > +way to distinguish between different calls to gotData from different
> > > +producer objects. <code>Deferred</code> solves these problems, by creating 
> > > +a single, unified way to handle callbacks and errors from deferred
> > > +execution.</p>
> > 
> > What does "merge arguments before and after execution" mean to a Twisted
> > newbie?  Why would they want to do it?
> 
> Here I disagree again.  I think I know what is meant (although 
> clarity could be improved, again), and it was one of the first things 
> I wanted to do ... of course, it didn't take too long to suss that 
> lambdas are the preferred idiom for that ... 

Asking "Why would they want to do it?" wasn't meant to question that newbies
wanted to do it.  I meant to point out that it was referring to a concept
that wouldn't be clear to many newbies, and would thus serve to confuse them
because they didn't know what it meant or why it might apply to them.
"Merging arguments" isn't terminology I've ever heard before, in Python or
elsewhere, so if I was a newbie I'd be wondering if this was yet another
Twisted thing.

Probably explicitly spelling out that chaining callbacks is useful for
progressively munging data is worth doing, though, maybe with an example
like:

    d = getItemsFromDB()

    def convertResultlistToHTML(results):
        return '<ul>' + ['<li>' + x for x in results] + '</ul>'
    d.addCallback(convertResultlistToHTML)

Or should it be more contrived?  E.g.:

    d = getNumber()
    d.addCallback(lambda r: r + 10)       # Add ten
    d.addCallback(lambda r: 1.0 / r)      # Take the reciprocal
    def catchDivByZero(failure):
        failure.trap(ZeroDivisionError)
        return 0
    d.addErrback(catchDivByZero)
    d.addCallback(lambda r: '%0.3f' % r)  # Convert to string of up to 3
                                          # decimal places
    d.addCallback(lambda r: '<b>%s</b>' % r) # Wrap in HTML

Is it already clear to newbies how callbacks chain and what they are good
for?

> > ....  I think I'd also like
> > to add back the comment about "This is an asynchronous equivalent of ..." --
> > perhaps it's overly jargonistic, but it is the way I think about Deferreds;
> > they are the primary tool Twisted provides to abstract away blocking
> > operations into a fundamentally asynchronous framework.
> 
> Total agreement.  If they don't know what "asynchronous" 
> means, they can look it up!  Sheesh, it's a standard term.  
> (Twisted-specific jargon is not a problem in the docs 
> either, as it is always defined when introduced.)

And Twisted-specific jargon should be added to the glossary, where possible.
Possibly 'asynchronous' should be added too, if it isn't already there.

> > Again, with the next two examples I think you've obscured the point in your
> > efforts to make everything explicit.  I'd rather have a 10 line example
> > that illustrates a concept, than a 20 line example that obscures the same
> > concept behind irrelevant method definitions, etc.  ...
> 
> Agreed also.  
> 
> That said, I think there are cases where the in-line examples seem
> a trifle too elliptical.  I'll have to be more specific, I know, 
> so I'll send an example when I have time.  

Patches are, of course, welcome :)

-Andrew.




From liiwi at iki.fi  Sun Mar  9 09:23:07 2003
From: liiwi at iki.fi (Jaakko Niemi)
Date: Sun, 09 Mar 2003 16:23:07 +0200
Subject: [Twisted-Python] slap bandaid on shoutcast
Message-ID: <87u1ecty9g.fsf@jumper.lonesom.pp.fi>

--- shoutcast.py        2003-03-09 16:17:01.000000000 +0200
+++ shoutcast.py.working        2003-03-09 16:16:04.000000000 +0200
@@ -32,6 +32,7 @@
         self.path = path
         self.metamode = "mp3"
         self.databuffer = ""
+       self.metaint = ""
     
     def connectionMade(self):
         self.sendCommand("GET", self.path)



From cce at clarkevans.com  Sun Mar  9 16:39:19 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Sun, 9 Mar 2003 21:39:19 +0000
Subject: [Twisted-Python] Updated defer.html
In-Reply-To: <1047190343.957.130.camel@golux>
References: <E18rn3o-0008OQ-00@pyramid.twistedmatrix.com> <20030309014932.GA21808@frobozz.local> <1047190343.957.130.camel@golux>
Message-ID: <20030309213919.GA82276@doublegemini.com>

On Sun, Mar 09, 2003 at 01:12:22AM -0500, Steve Waterbury wrote:
| > You've sacrificed clarity for runnability.  
| Having read it carefully, I have to agree with Andrew here.  

Runnable vs clarity is a false choice.  If it isn't runnable then
it has no hope of being clear.  [clear changes to already runnable
code counts as runnable]

In fact, I had a complete mis-understanding of what Deferred
was all about for quite some time, mostly a fault of that
document for not having a runnable example.   The focus on 
'clarity' failed to show what Deferred actually *does*; it
had stuff, for example, about the main reactor event loop,
which is a completely othogonal issue, you don't neven need
the twisted reactor to use Deferred.   By the previous
documentation not focusing on a *tangable* runnable result
the explanation sunk into ickyness.

| Here I disagree.  Newbies are generally served better by 
| examples with lots of (germane) comments ... but not 
| extraneous stuff, like the Timer.  And I think it would be 
| "nice" if they were executable, but if it comes down to 
| choosing between clarity and executability, clarity should win.  

Documenting Deferreds suffers from a bootstrap problem; it is 
advantageous to introduce Deferreds before Threads, but to 
understand why you need Deferrerds you must already have
read about Threads.   The typical solution to a bootstrap 
documentation problems is to iterate into a circle, introduce
each concept and then after both concepts are glossed over
going into more detail about each one.   An introduction 
to threads, and the Timer is the simplest threaded operation,
is essential for motivating Deferreds...  And, to be a bit
defensive, you can't jump on my case here as examples later
on use the Timer.

Suggestion for improvement:

  Move the 'timer' example into the first part showing
  how a blocking operation becomes threaded, and showing
  how Python (without Twisted) supports callbacks.  

  Then, use this example of Python's callbacks to describe
  how it has several problems: (a) it doesn't handle errors
  well, (b) it doesn't allow for more than one callback, etc.

  Finally, re-write the timer example using Deferred for a 
  callback.   In this example, put the previously introduced
  code in a *grey* font so that it isn't destracting.

But, really, all examples should be completely runnable
or else you make a serious risk of losing the reader.

| > perhaps it's overly jargonistic, but it is the way I think about Deferreds;
| > they are the primary tool Twisted provides to abstract away blocking
| > operations into a fundamentally asynchronous framework.
| 
| Total agreement.  If they don't know what "asynchronous" 
| means, they can look it up!  Sheesh, it's a standard term.  
| (Twisted-specific jargon is not a problem in the docs 
| either, as it is always defined when introduced.)

Deferreds have *nothing* to do with deferring execution.  They are
only an improvement/embellishment on the Python callback mechanism.
That they are very useful in asynchronous contexts is nice, but
that isn't what they do - they don't provide asychronous execution.


| > Again, with the next two examples I think you've obscured the point in your
| > efforts to make everything explicit.  I'd rather have a 10 line example
| > that illustrates a concept, than a 20 line example that obscures the same
| > concept behind irrelevant method definitions, etc.  ...
| 
| Agreed also.  
| 
| That said, I think there are cases where the in-line examples seem
| a trifle too elliptical.  I'll have to be more specific, I know, 
| so I'll send an example when I have time.  

Well, I disagree with both of you here.  You need *all* of
the code so that a newbie doesn't have to fill-in the 
details, and get frustrated when they don't grok it.

In general, examples should build on the previous example,
and to make things clear, code that hasn't changed could
be made grey; or code that has changed can be made bold.
Use visual clues.  Electrons on the screen are cheap.

Best,

Clark



From cce at clarkevans.com  Sun Mar  9 16:45:55 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Sun, 9 Mar 2003 21:45:55 +0000
Subject: [Twisted-Python] Re: [Twisted-commits] Updated defer.html so that the first 4 examples are runnable, split the 3rd
In-Reply-To: <20030309014932.GA21808@frobozz.local>
References: <E18rn3o-0008OQ-00@pyramid.twistedmatrix.com> <20030309014932.GA21808@frobozz.local>
Message-ID: <20030309214555.GB82276@doublegemini.com>

On Sun, Mar 09, 2003 at 12:49:32PM +1100, Andrew Bennetts wrote:
| >  class Getter:
| >  
| >      def getData(self, x):
| > -        self.blockUntilResult(x)
| > -        return result
| > +        return self.someBlockingCall(x)
| > +
| > +    def someBlockingCall(self,x)
             <font color="grey">
| > +        print "blocking"
| > +        import time
| > +        time.sleep(4)
| > +        return x * 3
             </font>
| >  
| >  g = Getter()
| >  print g.getData(3)
| > +print "blocking"
| > +
| >  </pre>
| 
| Why does this code snippet now do 'print "blocking"' twice?

bug, sorry

| Please don't be discouraged from working on the docs!  They *do* need
| work... I just happen to think that defer.html is probably the doc least in
| need of improvement :)

Well, I picked it beacuse I've heared two newbies 
get confused by it, not including myself.  

;) Clark



From cce at clarkevans.com  Sun Mar  9 18:04:19 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Sun, 9 Mar 2003 23:04:19 +0000
Subject: [Twisted-Python] Updated defer.html
In-Reply-To: <1047190343.957.130.camel@golux>
References: <E18rn3o-0008OQ-00@pyramid.twistedmatrix.com> <20030309014932.GA21808@frobozz.local> <1047190343.957.130.camel@golux>
Message-ID: <20030309230419.GA82729@doublegemini.com>

On Sun, Mar 09, 2003 at 01:12:22AM -0500, Steve Waterbury wrote:
| Here I disagree.  Newbies are generally served better by 
| examples with lots of (germane) comments ... but not 
| extraneous stuff, like the Timer.  And I think it would be 
| "nice" if they were executable, but if it comes down to 
| choosing between clarity and executability, clarity should win.  

Ok.  I spent a good amount of time refactoring the first 
four examples.  Basically, the first example is runnable, 
but the remaining examples arn't, and instead focus on 
the incremental change to the code.  

However, if one were to cut&paste each example, as they
occur in the document, into a python interpreter, then
every example would work...

;) Clark



From waterbug at beeblebrox.gsfc.nasa.gov  Sun Mar  9 18:28:08 2003
From: waterbug at beeblebrox.gsfc.nasa.gov (Steve Waterbury)
Date: Sun, 09 Mar 2003 18:28:08 -0500
Subject: [Twisted-Python] Updated defer.html
References: <E18rn3o-0008OQ-00@pyramid.twistedmatrix.com> <20030309014932.GA21808@frobozz.local> <1047190343.957.130.camel@golux> <20030309213919.GA82276@doublegemini.com>
Message-ID: <3E6BCE07.B131BD48@beeblebrox.gsfc.nasa.gov>

"Clark C. Evans" wrote:
> 
> In fact, I had a complete mis-understanding of what Deferred
> was all about for quite some time, mostly a fault of that
> document for not having a runnable example.   

I agree the document needs improving to be useful 
to newbies.  The runnable examples in doc/examples are 
what saved me ... in fact, IMO the examples are way 
more important than the docs.  But I'd like to see more 
comments in them ... as Rob McCool says in the original 
mime.types file that came with NCSA httpd, 
"# This is a comment. I love comments."  :^)

> Documenting Deferreds suffers from a bootstrap problem; it is
> advantageous to introduce Deferreds before Threads, but to
> understand why you need Deferrerds you must already have
> read about Threads.   The typical solution to a bootstrap
> documentation problems is to iterate into a circle, introduce
> each concept and then after both concepts are glossed over
> going into more detail about each one.   An introduction
> to threads, and the Timer is the simplest threaded operation,
> is essential for motivating Deferreds...  

IMO, it doesn't take very much motivation ... I've never 
written a threaded program, and whereas it might be good 
for my soul, I'm not that eager to try it.  

> And, to be a bit
> defensive, you can't jump on my case here as examples later
> on use the Timer.

Now, now ... don't take it personally -- you're contributing 
something, which is more than I've done!  :^)  

I'm sure the later timer examples are fine, but I just 
didn't pay much attention to them as they weren't relevant 
to what I wanted to do with Twisted.  :^)

> | > perhaps it's overly jargonistic, but it is the way I think about Deferreds;
> | > they are the primary tool Twisted provides to abstract away blocking
> | > operations into a fundamentally asynchronous framework.
> |
> | Total agreement.  If they don't know what "asynchronous"
> | means, they can look it up!  Sheesh, it's a standard term.
> | (Twisted-specific jargon is not a problem in the docs
> | either, as it is always defined when introduced.)
> 
> Deferreds have *nothing* to do with deferring execution.  They are
> only an improvement/embellishment on the Python callback mechanism.
> That they are very useful in asynchronous contexts is nice, but
> that isn't what they do - they don't provide asychronous execution.

Yes, but Twisted *is* an asynchronous context; in Twisted 
that's what deferred's are used for.  :^)

> | > Again, with the next two examples I think you've obscured the point in your
> | > efforts to make everything explicit.  I'd rather have a 10 line example
> | > that illustrates a concept, than a 20 line example that obscures the same
> | > concept behind irrelevant method definitions, etc.  ...
> |
> | Agreed also.
> |
> | That said, I think there are cases where the in-line examples seem
> | a trifle too elliptical.  I'll have to be more specific, I know,
> | so I'll send an example when I have time.
> 
> Well, I disagree with both of you here.  You need *all* of
> the code so that a newbie doesn't have to fill-in the
> details, and get frustrated when they don't grok it.

Sounds like you agree with *me* at least:  
"elliptical:  of or relating to deliberate obscurity 
(as of literary or conversational style)" ... ;^)

Of course, I'm full of ideas, but you're actually contributing, 
so I'll shut up now ... just some suggestions from 
the peanut gallery ... carry on, Clark!  :^)  

Peace,
- Steve.



From waterbug at beeblebrox.gsfc.nasa.gov  Sun Mar  9 18:31:07 2003
From: waterbug at beeblebrox.gsfc.nasa.gov (Steve Waterbury)
Date: Sun, 09 Mar 2003 18:31:07 -0500
Subject: [Twisted-Python] Updated defer.html
References: <E18rn3o-0008OQ-00@pyramid.twistedmatrix.com> <20030309014932.GA21808@frobozz.local> <1047190343.957.130.camel@golux> <20030309230419.GA82729@doublegemini.com>
Message-ID: <3E6BCEBB.EAC9E05E@beeblebrox.gsfc.nasa.gov>

"Clark C. Evans" wrote:
> 
> On Sun, Mar 09, 2003 at 01:12:22AM -0500, Steve Waterbury wrote:
> | Here I disagree.  Newbies are generally served better by
> | examples with lots of (germane) comments ... but not
> | extraneous stuff, like the Timer.  And I think it would be
> | "nice" if they were executable, but if it comes down to
> | choosing between clarity and executability, clarity should win.
> 
> Ok.  I spent a good amount of time refactoring the first
> four examples.  Basically, the first example is runnable,
> but the remaining examples arn't, and instead focus on
> the incremental change to the code.
> 
> However, if one were to cut&paste each example, as they
> occur in the document, into a python interpreter, then
> every example would work...

Cool!

- Steve.



From twisted at itamarst.org  Sun Mar  9 20:42:31 2003
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 9 Mar 2003 20:42:31 -0500
Subject: [Twisted-Python] Re: [Twisted-commits] minor code cleaup
In-Reply-To: <E18sB50-0008EK-00@pyramid.twistedmatrix.com>
References: <E18sB50-0008EK-00@pyramid.twistedmatrix.com>
Message-ID: <20030309204231.2918d3dc.twisted@itamarst.org>

Hi,

I don't like these changes to defer.html. They give the message that you
only use Deferreds with threads - this is not true, and very
misleading...



From twisted at itamarst.org  Sun Mar  9 20:48:53 2003
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 9 Mar 2003 20:48:53 -0500
Subject: [Twisted-Python] gzip with web
In-Reply-To: <87ptp1y364.fsf@flibuste.net>
References: <87u1edy4yj.fsf@flibuste.net>
	<87ptp1y364.fsf@flibuste.net>
Message-ID: <20030309204853.452f2ec7.twisted@itamarst.org>

On 08 Mar 2003 22:11:15 +0100
William Dode <wilk-ml at flibuste.net> wrote:

>         encoding = request.getHeader("accept-encoding")
>         if encoding and encoding.find("gzip")>=0:
>             import cStringIO,gzip
>             zbuf = cStringIO.StringIO()
>             zfile = gzip.GzipFile(None, 'wb', 9, zbuf)
>             zfile.write(content)
>             zfile.close()
>             request.setHeader("Content-encoding","gzip")
>             return zbuf.getvalue()
>         else:
>             return content

I think ideally you'd want this to be in twisted.protocols.http, and
deal with write()s and so on instead of assuming it's all one string.

I'd be happy to accept a patch!



From radix at twistedmatrix.com  Sun Mar  9 23:46:29 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 9 Mar 2003 23:46:29 -0500
Subject: [Twisted-Python] Updated defer.html
In-Reply-To: <20030309213919.GA82276@doublegemini.com>
References: <E18rn3o-0008OQ-00@pyramid.twistedmatrix.com> <20030309014932.GA21808@frobozz.local> <1047190343.957.130.camel@golux> <20030309213919.GA82276@doublegemini.com>
Message-ID: <20030310044629.GA1121@radii>

On Sun, Mar 09, 2003 at 09:39:19PM +0000, Clark C. Evans wrote:
> Documenting Deferreds suffers from a bootstrap problem; it is 
> advantageous to introduce Deferreds before Threads, but to 
> understand why you need Deferrerds you must already have
> read about Threads.   The typical solution to a bootstrap 

This makes no sense. Almost *all* of Deferreds used in Twisted (and
certainly most Twisted-using code) have nothing to do with threads.

Anyway, I think having one (runnable) example that doesn't even depend
on asynchrony might even be a good thing. Something like:

  d = Deferred()
  d.addCallbacks(...)
  d.callback(x)
  # maybe another d.addCallbacks(), etc

The point would be to show that indeed Deferreds don't have anything
special to do with asynchrony (or especially threads), as well make it
more clear what Deferreds are really doing, by showing it in the
simplest manner possible.

So yeah, I think we should have a few good runnable examples in the
document, including one like I mentioned, as well as some "case-study"
things like threading, refID-mapping (This was mentioned in another
recent thread), etc.

<insert typical apologetic non-promise to implement here>

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From cce at clarkevans.com  Mon Mar 10 01:34:29 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Mon, 10 Mar 2003 06:34:29 +0000
Subject: [Twisted-Python] iterators/generator
Message-ID: <20030310063429.GA84132@doublegemini.com>

Hello.  I'd like to write my 'user' level code with generators,
and thus, was thinking that new code could perhaps be at least
generator friendly... what do you think:

1.  We add the following code fragment somewhere in a python.util
    or equivalent:

    # primative support iterators for 2.1
    try:
       StopIteration = StopIteration
       iter = iter
    except:
       class StopIteration(Exception): pass
       class _ListIterator:
           def __init__(self,lst):
               self.lst = list(lst)
           def next()
               if self.lst: return self.lst.pop(0)
               else: raise StopIteration
       def iter(lst):
           if type(lst) == type([]) or type(lst) == type(tuple()):
               return _ListIterator(lst)
           else:
               return lst
   
2. Then, code within twisted which could possible accept an 
   iterator or generator could be written like this. 

      import python.twisted.util
      try:
           itr = util.iter(getIterator())
           val = itr.next()
           while 1:
              doSomething(val)
              val = itr.next()
      except util.StopIteration: pass

Just thoughts... using generators from 'user' land is really
very useful, and it'd be nice if lower levels of Twisted allowed
for this by a mechanism similar to the above.

Clark



From andrew-twisted at puzzling.org  Mon Mar 10 03:55:50 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 10 Mar 2003 19:55:50 +1100
Subject: [Twisted-Python] Updated defer.html
In-Reply-To: <20030310044629.GA1121@radii>
References: <E18rn3o-0008OQ-00@pyramid.twistedmatrix.com> <20030309014932.GA21808@frobozz.local> <1047190343.957.130.camel@golux> <20030309213919.GA82276@doublegemini.com> <20030310044629.GA1121@radii>
Message-ID: <20030310085550.GB25802@frobozz.local>

I was going to reply to Clark directly, but others have already made much
the same points... :)

On Sun, Mar 09, 2003 at 11:46:29PM -0500, Christopher Armstrong wrote:
> On Sun, Mar 09, 2003 at 09:39:19PM +0000, Clark C. Evans wrote:
> > Documenting Deferreds suffers from a bootstrap problem; it is 
> > advantageous to introduce Deferreds before Threads, but to 
> > understand why you need Deferrerds you must already have
> > read about Threads.   The typical solution to a bootstrap 
> 
> This makes no sense. Almost *all* of Deferreds used in Twisted (and
> certainly most Twisted-using code) have nothing to do with threads.

Indeed!  There is virtually no need to mention threads in defer.html at all.

> Anyway, I think having one (runnable) example that doesn't even depend
> on asynchrony might even be a good thing. Something like:
> 
>   d = Deferred()
>   d.addCallbacks(...)
>   d.callback(x)
>   # maybe another d.addCallbacks(), etc

Yes, that's a good idea.  It's worth emphasising that there's really no
voodoo here.  Possibly even demonstrate it in an interactive session, so
that it is really clear that nothing happens until it is called.

> The point would be to show that indeed Deferreds don't have anything
> special to do with asynchrony (or especially threads), as well make it
> more clear what Deferreds are really doing, by showing it in the
> simplest manner possible.

Which reminds me: the title should probably be "Deferred Results".  I think
perhaps this is what confuses people; Deferreds aren't about delaying
execution arbitrarily, or doing work in threads, or hooking into the event
loop, they're about handling results that haven't arrived yet.  A Deferred
doesn't represent a *callback*, it represents a *result*, and it provides
simple (and powerful) ways to register callbacks to operate on the result,
whenever it becomes available.

> So yeah, I think we should have a few good runnable examples in the
> document, including one like I mentioned, as well as some "case-study"
> things like threading, refID-mapping (This was mentioned in another
> recent thread), etc.

Case studies would be worthwhile.  I don't really like the idea of padding
out the document many more with more examples, because it's already a long
read.  But adding a section to the end called Case Studies would allow
plenty of room to add complete, verbose examples, without detracting from
the exposition of the core concepts.

So in my opinion, the code samples should be left pretty much as they were
-- minimal, clear examples of the general principles, not necessarily
ready-to-run, and then add case studies to the end.  I'm even tempted to say
this is a pattern that more of the docs should follow.... :)

> <insert typical apologetic non-promise to implement here>

As always :)

-Andrew.




From twisted at itamarst.org  Mon Mar 10 10:19:42 2003
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 10 Mar 2003 10:19:42 -0500
Subject: [Twisted-Python] iterators/generator
In-Reply-To: <20030310063429.GA84132@doublegemini.com>
References: <20030310063429.GA84132@doublegemini.com>
Message-ID: <20030310101942.0e868466.twisted@itamarst.org>

On Mon, 10 Mar 2003 06:34:29 +0000
"Clark C. Evans" <cce at clarkevans.com> wrote:

> Hello.  I'd like to write my 'user' level code with generators,
> and thus, was thinking that new code could perhaps be at least
> generator friendly... what do you think:

I'd rather you just use 2.1 style iterators (i.e. define a __getitem__)
in code that goes into Twisted.

class Iterator:

   index = 0

   def __getitem__(self, index):
       if index != self.index: raise TypeError, "this is an iterator"
       self.index += 1
       if self.hasMoreData:
          return self.getData()
       else:
          raise IndexError



From cce at clarkevans.com  Mon Mar 10 11:04:00 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Mon, 10 Mar 2003 16:04:00 +0000
Subject: [Twisted-Python] iterators/generator
In-Reply-To: <20030310101942.0e868466.twisted@itamarst.org>
References: <20030310063429.GA84132@doublegemini.com> <20030310101942.0e868466.twisted@itamarst.org>
Message-ID: <20030310160400.GA85401@doublegemini.com>

On Mon, Mar 10, 2003 at 10:19:42AM -0500, Itamar Shtull-Trauring wrote:
| I'd rather you just use 2.1 style iterators (i.e. define a __getitem__)
| in code that goes into Twisted.

Perfect.  Thanks.

Clark



From cce at clarkevans.com  Mon Mar 10 11:17:07 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Mon, 10 Mar 2003 16:17:07 +0000
Subject: [Twisted-Python] Updated defer.html
In-Reply-To: <20030310085550.GB25802@frobozz.local>
References: <E18rn3o-0008OQ-00@pyramid.twistedmatrix.com> <20030309014932.GA21808@frobozz.local> <1047190343.957.130.camel@golux> <20030309213919.GA82276@doublegemini.com> <20030310044629.GA1121@radii> <20030310085550.GB25802@frobozz.local>
Message-ID: <20030310161707.GB85401@doublegemini.com>

On Mon, Mar 10, 2003 at 07:55:50PM +1100, Andrew Bennetts wrote:
| I was going to reply to Clark directly, but others have already made much
| the same points... :)

Oh, I'm not one to take critique too personally... if I don't
"get it", I don't get it.  ;)

| > On Sun, Mar 09, 2003 at 09:39:19PM +0000, Clark C. Evans wrote:
| > > Documenting Deferreds suffers from a bootstrap problem; it is 
| > > advantageous to introduce Deferreds before Threads, but to 
| > > understand why you need Deferrerds you must already have
| > > read about Threads.   The typical solution to a bootstrap 
| > 
| > This makes no sense. Almost *all* of Deferreds used in Twisted (and
| > certainly most Twisted-using code) have nothing to do with threads.
| 
| Indeed!  There is virtually no need to mention threads in defer.html at all.

Ok. I'll re-write to pull threads out.  I was just trying
to re-write the code so that it was runnable.  In particular,
I was looking for a trivial example of something which would
be defered.   Perhaps a small example using reactor.callLater
would be a better choice.

| > Anyway, I think having one (runnable) example that doesn't even depend
| > on asynchrony might even be a good thing. Something like:
| > 
| >   d = Deferred()
| >   d.addCallbacks(...)
| >   d.callback(x)
| >   # maybe another d.addCallbacks(), etc
| 
| Yes, that's a good idea.  It's worth emphasising that there's really no
| voodoo here.  Possibly even demonstrate it in an interactive session, so
| that it is really clear that nothing happens until it is called.

Yes, good idea.

| > The point would be to show that indeed Deferreds don't have anything
| > special to do with asynchrony (or especially threads), as well make it
| > more clear what Deferreds are really doing, by showing it in the
| > simplest manner possible.
| 
| Which reminds me: the title should probably be "Deferred Results".  I think
| perhaps this is what confuses people; Deferreds aren't about delaying
| execution arbitrarily, or doing work in threads, or hooking into the event
| loop, they're about handling results that haven't arrived yet.  A Deferred
| doesn't represent a *callback*, it represents a *result*, and it provides
| simple (and powerful) ways to register callbacks to operate on the result,
| whenever it becomes available.

Great explanation.

| > So yeah, I think we should have a few good runnable examples in the
| > document, including one like I mentioned, as well as some "case-study"
| > things like threading, refID-mapping (This was mentioned in another
| > recent thread), etc.
| 
| Case studies would be worthwhile.  I don't really like the idea of padding
| out the document many more with more examples, because it's already a long
| read.  But adding a section to the end called Case Studies would allow
| plenty of room to add complete, verbose examples, without detracting from
| the exposition of the core concepts.
| 
| So in my opinion, the code samples should be left pretty much as they were
| -- minimal, clear examples of the general principles, not necessarily
| ready-to-run, and then add case studies to the end.  I'm even tempted to say
| this is a pattern that more of the docs should follow.... :)

I think the CaseStudies should kinda be distinct, in the
"Examples" directory or something like that.   However,
the 'deferred' could give an index of how the concept
was used in various examples.

I don't have time to further patch today/tomorow, but I'll
fix it by Wed.

Clark



From twisted at itamarst.org  Mon Mar 10 11:41:40 2003
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 10 Mar 2003 11:41:40 -0500
Subject: [Twisted-Python] Updated defer.html
In-Reply-To: <20030310161707.GB85401@doublegemini.com>
References: <E18rn3o-0008OQ-00@pyramid.twistedmatrix.com>
	<20030309014932.GA21808@frobozz.local>
	<1047190343.957.130.camel@golux>
	<20030309213919.GA82276@doublegemini.com>
	<20030310044629.GA1121@radii>
	<20030310085550.GB25802@frobozz.local>
	<20030310161707.GB85401@doublegemini.com>
Message-ID: <20030310114140.7112407a.twisted@itamarst.org>

On Mon, 10 Mar 2003 16:17:07 +0000
"Clark C. Evans" <cce at clarkevans.com> wrote:

> Ok. I'll re-write to pull threads out.  I was just trying
> to re-write the code so that it was runnable.  In particular,
> I was looking for a trivial example of something which would
> be defered.   Perhaps a small example using reactor.callLater
> would be a better choice.

I already did this in CVS. You should probably check the code is
runnable though, I may have some typos.



From cce at clarkevans.com  Mon Mar 10 12:34:48 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Mon, 10 Mar 2003 17:34:48 +0000
Subject: [Twisted-Python] Updated defer.html
In-Reply-To: <20030310114140.7112407a.twisted@itamarst.org>
References: <E18rn3o-0008OQ-00@pyramid.twistedmatrix.com> <20030309014932.GA21808@frobozz.local> <1047190343.957.130.camel@golux> <20030309213919.GA82276@doublegemini.com> <20030310044629.GA1121@radii> <20030310085550.GB25802@frobozz.local> <20030310161707.GB85401@doublegemini.com> <20030310114140.7112407a.twisted@itamarst.org>
Message-ID: <20030310173448.GB85958@doublegemini.com>

On Mon, Mar 10, 2003 at 11:41:40AM -0500, Itamar Shtull-Trauring wrote:
| On Mon, 10 Mar 2003 16:17:07 +0000
| "Clark C. Evans" <cce at clarkevans.com> wrote:
| > Ok. I'll re-write to pull threads out.  I was just trying
| > to re-write the code so that it was runnable.  In particular,
| > I was looking for a trivial example of something which would
| > be defered.   Perhaps a small example using reactor.callLater
| > would be a better choice.
| 
| I already did this in CVS. You should probably check the code is
| runnable though, I may have some typos.

Just had to add code to run the reactor, and exit after 4 sec.

BTW, is there anyway to ask the reactor to run it's current 'queue'
and then _stop_ when it's idle.  in other words, I'd like
something like:

   reactor.run(daemon=0)  # only runs currently queued stuff

Best,

Clark



From iko at strakt.com  Mon Mar 10 12:29:10 2003
From: iko at strakt.com (Anders Hammarquist)
Date: Mon, 10 Mar 2003 18:29:10 +0100
Subject: [Twisted-Python] SMTPClient
Message-ID: <200303101729.h2AHTAM4030136@fido.strakt.com>

Hi gang,

I found a small bug in dealing with error messages from the SMTP server.
Here's the revised patch to take care of this.

/Anders

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: text/x-patch
Size: 28908 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030310/7e9a5403/attachment.bin 

From cce at clarkevans.com  Mon Mar 10 12:56:49 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Mon, 10 Mar 2003 17:56:49 +0000
Subject: [Twisted-Python] iterators/generator
In-Reply-To: <20030310101942.0e868466.twisted@itamarst.org>
References: <20030310063429.GA84132@doublegemini.com> <20030310101942.0e868466.twisted@itamarst.org>
Message-ID: <20030310175649.GA86194@doublegemini.com>

On Mon, Mar 10, 2003 at 10:19:42AM -0500, Itamar Shtull-Trauring wrote:
| I'd rather you just use 2.1 style iterators (i.e. define a __getitem__)
| in code that goes into Twisted.
| 
| class Iterator:
| 
|    index = 0
| 
|    def __getitem__(self, index):
|        if index != self.index: raise TypeError, "this is an iterator"
|        self.index += 1
|        if self.hasMoreData:
|           return self.getData()
|        else:
|           raise IndexError

After some thinking, the above won't work for me:

  1)  The whole point of an iterator is to be able to ask
      it for the next() object; using the above idiom doesn't
      allow me to 'yield' easily between calls to next(); for
      more detail see the FlowIterator in the flow.py code

  2)  The goal is to move foward with 2.2 style iterators and
      generators, but to do so in a way that the code still
      works for 2.1 users.  

The code has grown up a bit...

    try:
       # if we are using 2.2, just make a local copy
       # of the StopIteration and iter() built-in
       StopIteration = StopIteration
       iter = iter
    except:
       # Simulate StopIteration and iter() for 2.1
       # This can eventually be removed once we
       # stop supporting 2.1
       class StopIteration(Exception): pass
       class _ListIterator:
           def __init__(self,lst):
               self.lst = list(lst)
           def next():
               if self.lst: return self.lst.pop(0)
               else: raise StopIteration
       def iter(lst):
           from types import ListType, TupleType
           if type(lst) == type([]) or type(lst) == type(tuple()):
               return _ListIterator(lst)
           else:
               return lst.__iter__()

In this way, code with the toolkit can be written like

    from <the-place-for-this> import iter, StopIteration

    traverse(someIterable):
        iterator = iter(someIterable)
        try:
            while 1:
                val = iterator.next()
                # process val, perhaps Yielding
                # or doing other things not possible
                # in a 'for val in someIterable:
        except StopIteration: pass

The advantage, is that traverse is now 'generator' friendly
but will work with lists and tuples for those in 2.1 land.
Further, if someone implements __iter__ and next() in 2.1
it will still work.   Its a win-win.  And the best part, 
is that once we stop supporting 2.1, we can just kill the
"from <the-place-for-this>" line and all is well.

;) Clark



From glyph at twistedmatrix.com  Mon Mar 10 17:18:45 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 10 Mar 2003 16:18:45 -0600
Subject: [Twisted-Python] Updated defer.html
In-Reply-To: <20030310173448.GB85958@doublegemini.com>
Message-ID: <42857D24-5346-11D7-9352-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

First, I'd like to make it clear that I completely agree with Itamar 
and Andrew... I had a message composed on the plane that said almost 
exactly what they said in the last few exchanges :).

Thanks for looking at this documentation from a new-user perspective, 
Clark.

On Monday, March 10, 2003, at 11:34 AM, Clark C. Evans wrote:

> BTW, is there anyway to ask the reactor to run it's current 'queue'
> and then _stop_ when it's idle.  in other words, I'd like
> something like:
>
>    reactor.run(daemon=0)  # only runs currently queued stuff

If the OS would do something sensible like give us a queue of events to 
run, we could do that.  However, the reactor already goes through a few 
contortions to create the illusion that something like that is 
happening in the background; it is difficult to deterministically say 
what the "current queue" is, especially given the surprising behavior 
of certain modules like HTTP, which register infinitely recurring 
timers.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+bQ9JvVGR4uSOE2wRAtiyAKCuwlo4Zrkm3WFIjm8tzNuNq3r4GQCeOQI/
kuFPjroIKn0NoNlGFMov5g4=
=5LNV
-----END PGP SIGNATURE-----




From bob at redivi.com  Mon Mar 10 21:36:30 2003
From: bob at redivi.com (Bob Ippolito)
Date: Mon, 10 Mar 2003 21:36:30 -0500
Subject: [Twisted-Python] Updated defer.html
In-Reply-To: <42857D24-5346-11D7-9352-000393C9700E@twistedmatrix.com>
Message-ID: <444E0062-536A-11D7-BBBB-000A95686CD8@redivi.com>

On Monday, Mar 10, 2003, at 17:18 America/New_York, Glyph Lefkowitz 
wrote:

> On Monday, March 10, 2003, at 11:34 AM, Clark C. Evans wrote:
>
>> BTW, is there anyway to ask the reactor to run it's current 'queue'
>> and then _stop_ when it's idle.  in other words, I'd like
>> something like:
>>
>>    reactor.run(daemon=0)  # only runs currently queued stuff
>
> If the OS would do something sensible like give us a queue of events 
> to run, we could do that.  However, the reactor already goes through a 
> few contortions to create the illusion that something like that is 
> happening in the background; it is difficult to deterministically say 
> what the "current queue" is, especially given the surprising behavior 
> of certain modules like HTTP, which register infinitely recurring 
> timers.

Well, the simple solution is just to make a DeferredList with all of 
your "high level tasks".  When that DeferredList completes, do a 
reactor.stop().

On a somewhat related note, something that might be of some utility is 
to have some sort of "deferred callback wrapper" for callback or 
errback that allows you to make callbacks that don't expect a result or 
to integrate into the deferred callback chain.  It's something that 
happens pretty often I think?  It'd be a really simple construction:

class Passthrough:
	def __init__(self, fn):
		self.fn = fn
	def __call__(self, result, *args, **kwargs):
		self.fn(*args, **kwargs)
		return result

Is something like that worthy of sitting in defer.py ?

-bob




From radix at twistedmatrix.com  Tue Mar 11 00:26:38 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 11 Mar 2003 00:26:38 -0500
Subject: [Twisted-Python] Updated defer.html
In-Reply-To: <444E0062-536A-11D7-BBBB-000A95686CD8@redivi.com>
References: <42857D24-5346-11D7-9352-000393C9700E@twistedmatrix.com> <444E0062-536A-11D7-BBBB-000A95686CD8@redivi.com>
Message-ID: <20030311052638.GA1141@radii>

On Mon, Mar 10, 2003 at 09:36:30PM -0500, Bob Ippolito wrote:
> class Passthrough:
> 	def __init__(self, fn):
> 		self.fn = fn
> 	def __call__(self, result, *args, **kwargs):
> 		self.fn(*args, **kwargs)
> 		return result
> 
> Is something like that worthy of sitting in defer.py ?

Well, for one, it could be implemented like this:

  def passThrough(fn):
      return lambda *args, **kwargs: fn(*args, **kwargs)

for two, I don't think it's worth it when people can just in-line a
similar lambda into their code. I use stuff like this all the time:

  d.addCallback(lambda r: foo(bar, baz))

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From acapnotic at twistedmatrix.com  Tue Mar 11 01:38:35 2003
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 10 Mar 2003 22:38:35 -0800
Subject: [Twisted-Python] Portland Perspective Broker presentation
	Monday
In-Reply-To: <1046999486.28102.50.camel@troglodyte.funhouse>
References: <1046999486.28102.50.camel@troglodyte.funhouse>
Message-ID: <1047364583.13824.6.camel@troglodyte.funhouse>

Here's the bibliography from tonight's presentation:
http://twistedmatrix.com/users/acapnotic/porpig/bibliography.html

For those of you that missed it, and those of you who are preparing
slides of your own for upcoming presentations, you can see the complete
"slide show" (minus my rambling commentary) by hitting the "restart"
link at the bottom of the page.

-- 
The moon is first quarter, 46.6% illuminated, 7.1 days old.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030310/8e4cffc0/attachment.pgp 

From bob at redivi.com  Tue Mar 11 02:07:19 2003
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 11 Mar 2003 02:07:19 -0500
Subject: [Twisted-Python] Updated defer.html
In-Reply-To: <20030311052638.GA1141@radii>
Message-ID: <190DF3F2-5390-11D7-BBBB-000A95686CD8@redivi.com>

On Tuesday, Mar 11, 2003, at 00:26 America/New_York, Christopher 
Armstrong wrote:

> On Mon, Mar 10, 2003 at 09:36:30PM -0500, Bob Ippolito wrote:
>> class Passthrough:
>> 	def __init__(self, fn):
>> 		self.fn = fn
>> 	def __call__(self, result, *args, **kwargs):
>> 		self.fn(*args, **kwargs)
>> 		return result
>>
>> Is something like that worthy of sitting in defer.py ?
>
> Well, for one, it could be implemented like this:
>
>   def passThrough(fn):
>       return lambda *args, **kwargs: fn(*args, **kwargs)
>
> for two, I don't think it's worth it when people can just in-line a
> similar lambda into their code. I use stuff like this all the time:
>
>   d.addCallback(lambda r: foo(bar, baz))

Yeah but that doesn't pass the result through to the next deferred in 
the callback chain, that passes on whatever fn() returns.. which could 
very well be just None.  For most cases that's ok, but not for all.

-bob




From martin at datacash.com  Tue Mar 11 04:36:56 2003
From: martin at datacash.com (Martin Waite)
Date: 11 Mar 2003 09:36:56 +0000
Subject: [Twisted-Python] newbie adbapi question
Message-ID: <1047375416.8709.56.camel@pascal>

Hi,

I'm making some progress on my application, but there are
a few ugly looking things in here and I wonder if I'm doing 
them right:

1) one theme (I would have said thread, but I'm not using 
   threads) of execution requires that 3 database queries
   are executed one after the other.  My current solution 
   involves chaining calls to adbapi.operation() and 
   adbapi.query() together.  My first query updates a table
   and so calls adbapi.operation().  In the callback to this,
   I make a call to adbapi.query().  In the callback to this, 
   I make another call to adbapi.operation().  My final callback
   reschedules the original call with the reactor - effectively
   making this sequence of operations repeat indefinitely.

   This seems to work, but is making my code look a bit like 
   a state machine.  This could get hairy.  Instead, should I be 
   adding all my callbacks at one time to the same Deferred ?

2) I'm using MySQL as the database.  Normally, following an update,
   I would fetch the result code. adbapi._run_operation() seems to 
   throw it away however, so all I ever get is None.  I would prefer
   to get the MySQL result, which tells me how many rows I updated.
   This lets me decide whether to run other queries.

   The suspicious code in _run_operation (v1.0.2):

        try:
            apply(curs.execute, args, kw)
            result = None
            curs.close()
            conn.commit()

   To me, this doesn't look interested in the result code from the   
   database. I'm used to using the Perl DBI - that distinguishes 
   between queries returning rows (select) and those
   returning result codes (delete, update).  Am I mistaken mapping
   these onto adbapi.query() and adbapi.operation() ?

regards,
Martin

   	





From andrew-twisted at puzzling.org  Tue Mar 11 07:10:26 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 11 Mar 2003 23:10:26 +1100
Subject: [Twisted-Python] Updated defer.html
In-Reply-To: <20030310114140.7112407a.twisted@itamarst.org>
References: <E18rn3o-0008OQ-00@pyramid.twistedmatrix.com> <20030309014932.GA21808@frobozz.local> <1047190343.957.130.camel@golux> <20030309213919.GA82276@doublegemini.com> <20030310044629.GA1121@radii> <20030310085550.GB25802@frobozz.local> <20030310161707.GB85401@doublegemini.com> <20030310114140.7112407a.twisted@itamarst.org>
Message-ID: <20030311121026.GB30439@frobozz.local>

On Mon, Mar 10, 2003 at 11:41:40AM -0500, Itamar Shtull-Trauring wrote:
> On Mon, 10 Mar 2003 16:17:07 +0000
> "Clark C. Evans" <cce at clarkevans.com> wrote:
> 
> > Ok. I'll re-write to pull threads out.  I was just trying
> > to re-write the code so that it was runnable.  In particular,
> > I was looking for a trivial example of something which would
> > be defered.   Perhaps a small example using reactor.callLater
> > would be a better choice.
> 
> I already did this in CVS. You should probably check the code is
> runnable though, I may have some typos.

If you use lint ("lore -o lint"), it will warn about invalid python syntax
inside <pre class="python">.  Of course, this doesn't guarantee that the
code *works*, but it's a start :)

-Andrew.




From andrew-twisted at puzzling.org  Tue Mar 11 07:29:34 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 11 Mar 2003 23:29:34 +1100
Subject: [Twisted-Python] Updated defer.html
In-Reply-To: <20030311052638.GA1141@radii>
References: <42857D24-5346-11D7-9352-000393C9700E@twistedmatrix.com> <444E0062-536A-11D7-BBBB-000A95686CD8@redivi.com> <20030311052638.GA1141@radii>
Message-ID: <20030311122934.GC30439@frobozz.local>

On Tue, Mar 11, 2003 at 12:26:38AM -0500, Christopher Armstrong wrote:
> On Mon, Mar 10, 2003 at 09:36:30PM -0500, Bob Ippolito wrote:
> > class Passthrough:
> > 	def __init__(self, fn):
> > 		self.fn = fn
> > 	def __call__(self, result, *args, **kwargs):
> > 		self.fn(*args, **kwargs)
> > 		return result
                ^^^^^^^^^^^^^  Note this line
> > 
> > Is something like that worthy of sitting in defer.py ?
> 
> Well, for one, it could be implemented like this:
> 
>   def passThrough(fn):
>       return lambda *args, **kwargs: fn(*args, **kwargs)

This will return None, not the result of the last callback (or errback).
Still, I think the above would be better as:

    from __future__ import nested_scopes

    def passThrough(fn):
        def foo(result, *args, **kwargs):
            fn(*args, **kwargs)
            return result
        return foo

Although wrapping the call to fn in a try/finally may be desirable.

> for two, I don't think it's worth it when people can just in-line a
> similar lambda into their code. I use stuff like this all the time:
> 
>   d.addCallback(lambda r: foo(bar, baz))

Well, I used to use:

    d.addCallback(lambda r: foo(bar, baz) or r)

But I soon found that it was way too hard to read when the expressions got
complex -- variations like "[foo(bar, baz)] and r" just weren't worth the
pain.

-Andrew.




From m at moshez.org  Tue Mar 11 08:23:04 2003
From: m at moshez.org (Moshe Zadka)
Date: 11 Mar 2003 13:23:04 -0000
Subject: [Twisted-Python] Updated defer.html
In-Reply-To: <20030311122934.GC30439@frobozz.local>
References: <20030311122934.GC30439@frobozz.local>, <42857D24-5346-11D7-9352-000393C9700E@twistedmatrix.com> <444E0062-536A-11D7-BBBB-000A95686CD8@redivi.com> <20030311052638.GA1141@radii>
Message-ID: <20030311132304.23203.qmail@green.zadka.com>

On Tue, 11 Mar 2003, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:

>     def passThrough(fn):
>         def foo(result, *args, **kwargs):
>             fn(*args, **kwargs)
>             return result
>         return foo

Equivalently

def passThrough(fn):
    lambda result, *args, **kw: (fn(*args, **kwargs), result)[1]

Yeah, yeah.
I know.
-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.



From tv at twistedmatrix.com  Tue Mar 11 08:25:10 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Tue, 11 Mar 2003 15:25:10 +0200
Subject: [Twisted-Python] t.i.process uid/gid suckiness
Message-ID: <20030311132510.GA11040@lapdog>

	The handling of uid/gid changes and SIGCHLD all around twisted
	are in an appalling state. I've tried to bitch at the right
	people, but that hasn't helped, so I'm taking the more
	heavyhanded approach of just fixing stuff. Let the code talk.

	However, I still don't consider myself an authority on what
	Twisted should do, don't have that much time longer term (I
	will not maintain this code permanently), and don't know what
	silly limitations the windows port of python has. So, I'll try
	to write down what changes I'm planning on doing, so you have
	a chance of vetoing. If I get no comments, I'll just basically
	go ahead and commit what I happen to want to, touching a many
	areas of mktap/t.i.process/procmon/whatever. If you want to
	avoid a de facto hijack-fix-abandon process, TALK NOW

	0) make the t.i.process setuid/setgid code actually work (see
	   patch; BTW is the initgroups part really needed? I feel my
	   pure-python 6-liner does the same thing.)

	1) make all places that take uid/gid just silently take in
	   strings, too, and use pwd/grp to convert them to uids and
	   gids as necessary

	2) make .taps store uids and gids as strings

	3) defer procmon startup so the processes are forked only
           after setuid has happened.

	4) try to fix the child process races, atleast including
           deferring signal-triggered processing to happen outside the
           actual signal handler, rewriting the reap logic silliness,
	   and stopping procmon from trying to kill reaped children.

	5) fix whatever problems I noticed while fixing the above

	6) whatever else I feel like improving at the time

	7) ???

	8) profit!

diff -u -u -r1.50 process.py
--- twisted/internet/process.py	10 Mar 2003 20:16:57 -0000	1.50
+++ twisted/internet/process.py	11 Mar 2003 13:08:00 -0000
@@ -33,10 +33,25 @@
     pty = None
 
 try:
-    from initgroups import initgroups
     import pwd
+    try:
+        from initgroups import initgroups
+    except:
+        import grp
+        def initgroups(username, dummy):
+            l=[]
+            for groupname, password, gid, userlist in grp.getgrall():
+                if username in userlist:
+                    l.append(gid)
+            os.setgroups(l)
+    def switch_uid(uid, gid):
+        os.setgid(gid)
+        initgroups(pwd.getpwuid(uid)[0], gid)
+        os.setuid(uid)
 except:
-    def initgroups(*args): pass
+    def switch_uid(uid, gid):
+        os.setgid(gid)
+        os.setuid(uid)
 
 from twisted.persisted import styles
 from twisted.python import log, failure
@@ -229,9 +244,7 @@
                     os.chdir(path)
                 # set the UID before I actually exec the process
                 if settingUID:
-                    os.setgid(gid)
-                    initgroups(pwd.getpwuid(uid)[0], gid)
-                    os.setuid(uid)
+                    switch_uid(uid, gid)
                 os.execvpe(command, args, environment)
             except:
                 # If there are errors, bail and try to write something
@@ -482,9 +495,7 @@
 
                 # set the UID before I actually exec the process
                 if settingUID:
-                    os.setgid(gid)
-                    initgroups(pwd.getpwuid(uid)[0], gid)
-                    os.setuid(uid)
+                    switch_uid(uid, gid)
                 os.execvpe(command, args, environment)
             except:
                 stderr = os.fdopen(1, 'w')


-- 
:(){ :|:&};:



From anthony at interlink.com.au  Tue Mar 11 09:17:55 2003
From: anthony at interlink.com.au (Anthony Baxter)
Date: Wed, 12 Mar 2003 01:17:55 +1100
Subject: [Twisted-Python] t.i.process uid/gid suckiness 
In-Reply-To: <20030311132510.GA11040@lapdog> 
Message-ID: <200303111417.h2BEHt327030@localhost.localdomain>

>>> Tommi Virtanen wrote
> 	0) make the t.i.process setuid/setgid code actually work (see
> 	   patch; BTW is the initgroups part really needed? I feel my
> 	   pure-python 6-liner does the same thing.)

> +        def initgroups(username, dummy):
> +            l=[]
> +            for groupname, password, gid, userlist in grp.getgrall():
> +                if username in userlist:
> +                    l.append(gid)
> +            os.setgroups(l)

Certainly on the operating systems that I can recall, your initgroups()
is doing the same thing as the C level initgroups. But if the C level
one is available, it seems more prudent to use it if it's there - gods
only know what some weirdo systems do (shuddering to recall some of 
DEC's "enhanced security" cruft in Ultrix and OSF/1...)

-- 
Anthony Baxter     <anthony at interlink.com.au>   
It's never too late to have a happy childhood.



From ivo at amaze.nl  Tue Mar 11 09:27:45 2003
From: ivo at amaze.nl (Ivo van der Wijk)
Date: Tue, 11 Mar 2003 15:27:45 +0100
Subject: [Twisted-Python] Twisted and wxPython on windows
Message-ID: <20030311152745.M8571@amaze.nl>

Hi all,

I'm currently testing my python/twisted/wxWindows application under Win98
(development is done under Linux).

Has anyone tested this before?

The application is rather unresponsive sometimes, even with the
win32evenreactor installed.

Does anyone know if things will perform better under win2k?

I avoid touching Windows as much as possible, so I'm somewhat of a
newbie in this area (windows development and python under windows).

Cheers

	Ivo

-- 
Drs. I.R. van der Wijk                                      -=-              
Brouwersgracht 132                             Amaze Internet Services V.O.F.
1013 HA Amsterdam, NL                                       -=-              
T +31-20-4688336         F +31-20-4688337        Linux/Web/Zope/SQL/MMBase   
W http://www.amaze.nl    E info at amaze.nl             Network Solutions        
W http://vanderwijk.info E ivo at amaze.nl                 Consultancy          
PGP http://vanderwijk.info/pgp                              -=-              



From waterbug at beeblebrox.gsfc.nasa.gov  Tue Mar 11 09:42:10 2003
From: waterbug at beeblebrox.gsfc.nasa.gov (Steve Waterbury)
Date: Tue, 11 Mar 2003 09:42:10 -0500
Subject: [Twisted-Python] Portland Perspective Broker presentationMonday
References: <1046999486.28102.50.camel@troglodyte.funhouse> <1047364583.13824.6.camel@troglodyte.funhouse>
Message-ID: <3E6DF5C2.5B3A0CFA@beeblebrox.gsfc.nasa.gov>

Kevin Turner wrote:
> 
> Here's the bibliography from tonight's presentation:
> http://twistedmatrix.com/users/acapnotic/porpig/bibliography.html

Having trouble bringing up your site ... looks like you've been 
"twist-dotted" ... :^)

- Steve.



From theller at python.net  Tue Mar 11 09:47:30 2003
From: theller at python.net (Thomas Heller)
Date: 11 Mar 2003 15:47:30 +0100
Subject: [Twisted-Python] Re: Twisted and wxPython on windows
References: <20030311152745.M8571@amaze.nl>
Message-ID: <wuj62c59.fsf@python.net>

Ivo van der Wijk <ivo at amaze.nl> writes:

> Hi all,
> 
> I'm currently testing my python/twisted/wxWindows application under Win98
> (development is done under Linux).
> 
> Has anyone tested this before?
> 
> The application is rather unresponsive sometimes, even with the
> win32evenreactor installed.
> 
> Does anyone know if things will perform better under win2k?
> 

You might want to try (if you're brave) the win32guireactor I posted
here some time ago (although it's really not finished).

IMO the problem is that the current win32 reactor isn't really event
driven, it does polling behind the scenes.

Thomas




From twisted at itamarst.org  Tue Mar 11 10:56:10 2003
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 11 Mar 2003 10:56:10 -0500
Subject: [Twisted-Python] newbie adbapi question
In-Reply-To: <1047375416.8709.56.camel@pascal>
References: <1047375416.8709.56.camel@pascal>
Message-ID: <20030311105610.3e1eaca8.twisted@itamarst.org>

On 11 Mar 2003 09:36:56 +0000
Martin Waite <martin at datacash.com> wrote:

> Hi,
> 
> I'm making some progress on my application, but there are
> a few ugly looking things in here and I wonder if I'm doing 
> them right:
> 
> 1) one theme (I would have said thread, but I'm not using 
>    threads) of execution requires that 3 database queries
>    are executed one after the other.  My current solution 

Look at the "Transaction" methods in adbapi. It allows you to run a
series of SQL commands at one go.



From uwe at oss4u.com  Tue Mar 11 12:46:23 2003
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Tue, 11 Mar 2003 09:46:23 -0800
Subject: [Twisted-Python] Twisted and wxPython on windows
In-Reply-To: <20030311152745.M8571@amaze.nl>
References: <20030311152745.M8571@amaze.nl>
Message-ID: <200303110946.23356.uwe@oss4u.com>

On Tuesday 11 March 2003 06:27 am, Ivo van der Wijk wrote:
> Hi all,
>
> I'm currently testing my python/twisted/wxWindows application under Win98
> (development is done under Linux).
>
> Has anyone tested this before?
>
> The application is rather unresponsive sometimes, even with the
> win32evenreactor installed.
>
> Does anyone know if things will perform better under win2k?
>
> I avoid touching Windows as much as possible, so I'm somewhat of a
> newbie in this area (windows development and python under windows).

The basic problem with wxPython and Twisted is the wxpython internal event 
loop. If you follow the demos and docs of Twisted (using wxsupport) your app 
will freeze whenever you open a menu or a modal dialogbox. This is due to the 
fact that wxWindows uses a different eventloop to handle this type of events. 
The wx main eventloop will suspend until the menu etc. closes. 
Using wxsupport this will also freeze the twisted eventloop.
Ergo - nothing works until you close whatever popped up.

I posted a recipe in the Python Cookbook (activestate.com) a while ago.
Basically I solved the problem by running the normal wx eventloop and using 
timers to run the twisted events. just check it out. It's only tested on 
linux but maybe it helps you.
 
 
	UC

--
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417




From twisted at moberley.com  Tue Mar 11 17:46:44 2003
From: twisted at moberley.com (Bradley Duane Peters)
Date: Tue, 11 Mar 2003 16:46:44 -0600
Subject: [Twisted-Python] Confusing traceback from mktap.py
Message-ID: <3E6E12F4.13823.2BBAF818@localhost>

Greetings,

I have somehow caused my Twisted application to become un-TAPable. 
Running it through mktap.py (in the same fashion as when it did work) 
results in the following traceback.

Traceback (most recent call last):
  File "mktap.py", line 30, in ?
    run()
  File "C:\Python22\Lib\site-packages\twisted\scripts\mktap.py",
      line 178, in run
    a.save()
  File "C:\Python22\Lib\site-packages\twisted\internet\app.py",
      line 634, in save
    dumpFunc(self, f)
  File "C:\Python22\Lib\site-packages\twisted\internet\app.py",
      line 616, in dumpFunc
    _dump(obj, file, 1)
TypeError: 'NoneType' object is not callable

Unfortunately, I don't have an old version to go back to, and I don't 
know enough about Twisted to know where I should look for a problem. 
I did try converting my TAP plug-in to just run, which resulted in 
the same error. At this point, I'm so completely lost that I'm not 
sure what, if any, or my source code I should be asking about.

If someone on this list can offer me a suggestion about where I might 
start looking for a problem, it would be very much appreciated.

(In case it makes a difference, I'm using Windows 98 and ActivePython 
2.2.)

Thank you for your time.

Sincerely,
Bradley Peters.  




From haering_python at gmx.de  Tue Mar 11 08:17:32 2003
From: haering_python at gmx.de (Gerhard =?iso-8859-1?Q?H=E4ring?=)
Date: Tue, 11 Mar 2003 13:17:32 +0000 (UTC)
Subject: [Twisted-Python] www.twistedmatrix.com down
Message-ID: <slrnb6roen.vg.gerhard.haering@haering.opus-gmbh.net>

At the moment I recommend to somebody on c.l.py to check out Twisted, and
verify if I typed the URL correctly, I can't connect to the HTTP port :-(

The host is not completely down, as I can connect to
www.twistedmatrix.com:smtp.

<sarcasm>
Speaking of which, I remember seeing the Twisted web server advertised as
"enterprise-ready" here ...
</sarcasm>

-- Gerhard




From tracy at reinventnow.com  Tue Mar 11 09:59:03 2003
From: tracy at reinventnow.com (Tracy S. Ruggles)
Date: Tue, 11 Mar 2003 08:59:03 -0600
Subject: [Twisted-Python] Portland Perspective Broker presentationMonday
In-Reply-To: <3E6DF5C2.5B3A0CFA@beeblebrox.gsfc.nasa.gov>
Message-ID: <FFB73BD7-53D1-11D7-ADEF-000393CE1304@reinventnow.com>

I can't get to twistedmatrix.com either (8.58a central)

--T

On Tuesday, March 11, 2003, at 08:42 AM, Steve Waterbury wrote:

> Kevin Turner wrote:
>>
>> Here's the bibliography from tonight's presentation:
>> http://twistedmatrix.com/users/acapnotic/porpig/bibliography.html
>
> Having trouble bringing up your site ... looks like you've been
> "twist-dotted" ... :^)
>
> - Steve.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>




From exarkun at intarweb.us  Tue Mar 11 19:10:11 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Tue, 11 Mar 2003 19:10:11 -0500
Subject: [Twisted-Python] Confusing traceback from mktap.py
In-Reply-To: <3E6E12F4.13823.2BBAF818@localhost>
References: <3E6E12F4.13823.2BBAF818@localhost>
Message-ID: <20030312001011.GB24369@meson.dyndns.org>

On Tue, Mar 11, 2003 at 04:46:44PM -0600, Bradley Duane Peters wrote:
> Greetings,
> 
> I have somehow caused my Twisted application to become un-TAPable. 
> Running it through mktap.py (in the same fashion as when it did work) 
> results in the following traceback.
> 
> Traceback (most recent call last):
>   File "mktap.py", line 30, in ?
>     run()
>   File "C:\Python22\Lib\site-packages\twisted\scripts\mktap.py",
>       line 178, in run
>     a.save()
>   File "C:\Python22\Lib\site-packages\twisted\internet\app.py",
>       line 634, in save
>     dumpFunc(self, f)
>   File "C:\Python22\Lib\site-packages\twisted\internet\app.py",
>       line 616, in dumpFunc
>     _dump(obj, file, 1)
> TypeError: 'NoneType' object is not callable
> 

  You shouldn't be able to induce this error with your code.  I can't
actually imagine -how- this might be induced, apparently "cPickle.dump" has
gotten itself to be None.  Perhaps you have "cPickle.py" in your source,
with "dump = None" in it?  Could you try this interactively, preferably
in your package's directory, and/or where you ran mktap from?

    import cPickle
    print cPickle.__file__, cPickle.dump

> Unfortunately, I don't have an old version to go back to, and I don't 
> know enough about Twisted to know where I should look for a problem. 

  Did you upgrade your app, or Twisted?  BTW, random piece of advise, always
develop with some sort of RCS software, be it CVS or something else.  It's
great for situations where you can't track down what has broken something...
you just back out changes until it works again.

  Jp

-- 
A disciple of another sect once came to Drescher as he was eating his
morning meal. "I would like to give you this personality test," said the
outsider, "because I want you to be happy." Drescher took the paper that was
offered him and put it into the toaster: "I wish the toaster to be happy, 
too."
-- 
 up 8 days, 15:59, 8 users, load average: 0.22, 0.13, 0.04
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030311/f1de741b/attachment.pgp 

From twisted at moberley.com  Wed Mar 12 00:12:37 2003
From: twisted at moberley.com (Bradley Duane Peters)
Date: Tue, 11 Mar 2003 23:12:37 -0600
Subject: [Twisted-Python] Confusing traceback from mktap.py
In-Reply-To: <20030312001011.GB24369@meson.dyndns.org>
References: <3E6E12F4.13823.2BBAF818@localhost>
Message-ID: <3E6E6D65.4483.2D1C4C5A@localhost>

On 11 Mar 2003 at 19:10, Jp Calderone wrote:
> Perhaps you have "cPickle.py" in your source, with "dump = None" in
> it?  Could you try this interactively, preferably in your package's
> directory, and/or where you ran mktap from?
> 
>     import cPickle
>     print cPickle.__file__, cPickle.dump

Unless it's part of something imported from Twisted, I haven't used 
cPickle.py in my source and I can't find anything like "dump = None". 
I tried the two lines above in the Python shell starting from where I 
run mktap from, and from my package's directory. In all cases, it 
resulted in the following traceback:

Traceback (most recent call last):
  File "<stdin>", line 1, in ?
AttributeError: 'module' object has no attribute '__file__'

> Did you upgrade your app, or Twisted?

I had just made some modifications to my app, and was running it 
through mktap so I could test them. I didn't make any changes to 
Twisted itself.

Thanks,
Bradley Peters.  




From tv at twistedmatrix.com  Tue Mar 11 10:16:04 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Tue, 11 Mar 2003 17:16:04 +0200
Subject: [Twisted-Python] t.i.process uid/gid suckiness
In-Reply-To: <200303111417.h2BEHt327030@localhost.localdomain>
References: <20030311132510.GA11040@lapdog> <200303111417.h2BEHt327030@localhost.localdomain>
Message-ID: <20030311151604.GB12367@lapdog>

On Wed, Mar 12, 2003 at 01:17:55AM +1100, Anthony Baxter wrote:
> Certainly on the operating systems that I can recall, your initgroups()
> is doing the same thing as the C level initgroups. But if the C level
> one is available, it seems more prudent to use it if it's there - gods
> only know what some weirdo systems do (shuddering to recall some of 
> DEC's "enhanced security" cruft in Ultrix and OSF/1...)

	Well, I think the effective point was that the C function
	isn't normally available. The only python-accessible was
	z3p's C module, which was v0.1 according to the Vault, but
	http://www.twistedmatrix.com/users/z3p.twistd/ doesn't seem
	to work.

	I feel the C module is so rare and so unlikely to provide
	extra value, it's very unlikely twisted will ever need it.
	My guess at its reason for existence is that z3p didn't know
	it equals my 6-liner.

-- 
:(){ :|:&};:



From glyph at twistedmatrix.com  Wed Mar 12 02:39:42 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 12 Mar 2003 01:39:42 -0600
Subject: [Twisted-Python] t.i.process uid/gid suckiness
In-Reply-To: <20030311132510.GA11040@lapdog>
Message-ID: <C9EF9D4C-545D-11D7-9803-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Tuesday, March 11, 2003, at 07:25 AM, Tommi Virtanen wrote:

> 	The handling of uid/gid changes and SIGCHLD all around twisted
> 	are in an appalling state. I've tried to bitch at the right
> 	people, but that hasn't helped, so I'm taking the more
> 	heavyhanded approach of just fixing stuff. Let the code talk.

Thanks for taking a commanding lead on this :-).

The appropriate people are all pretty busy right now, and I would guess 
that their unix-fu is weaker than yours.  (I'd certainly guess *mine* 
is.)  The 'generic' process-running code in twisted currently doesn't 
work at all on Windows, except under cygwin, which should behave more 
or less like Linux, so just don't make any other code depend on 
unix-only imports.  win32eventreactor should not be affected to any 
changes here :-).

Your list of proposed changes looks good, and I have been bothered by 
the lack of formal correctness of this code for a while.  When you're 
done, please let us know if there are any further changes that you 
think need to be made; I'd like Twisted to be as safe as possible to be 
left suid.

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+buRCvVGR4uSOE2wRAuXMAKCv88CH3ZUSXUzqmYZ1Zhu4DUqaOwCdFeR0
J6PYUrzoqtIlD242KnZFG28=
=l5xQ
-----END PGP SIGNATURE-----




From cce at clarkevans.com  Wed Mar 12 13:21:04 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Wed, 12 Mar 2003 18:21:04 +0000
Subject: [Twisted-Python] iterators/generator
In-Reply-To: <20030310101942.0e868466.twisted@itamarst.org>
References: <20030310063429.GA84132@doublegemini.com> <20030310101942.0e868466.twisted@itamarst.org>
Message-ID: <20030312182104.GA94400@doublegemini.com>

On Mon, Mar 10, 2003 at 10:19:42AM -0500, Itamar Shtull-Trauring wrote:
| > Hello.  I'd like to write my 'user' level code with generators,
| > and thus, was thinking that new code could perhaps be at least
| > generator friendly... what do you think:
| 
|    def __getitem__(self, index):
|        if index != self.index: raise TypeError, "this is an iterator"
|        self.index += 1
|        if self.hasMoreData:
|           return self.getData()
|        else:
|           raise IndexError

I think that the code below is a fairly good 'first-cut' at supporting
user-level 2.2 generators with code that works in Python 2.1

Anyone object committing the following to python.compat?

Clark

    #
    # This compatibility hack allows for code to be written that 
    # supports 2.2 iterator/generator semantics within Python 2.1
    # This wraps 2.1 lists, mappings, and classes using the __getitem__
    # style iterator to use iter/next
    #
    try:
       StopIteration = StopIteration
       iter = iter
    except:
       # Python 2.1
       StopIteration = IndexError
       class _ListIterator:
           def __init__(self,lst):
               self.idx = 0
               if getattr(lst,'keys',None): lst = lst.keys()
               self.lst = lst
           def next(self):
               idx = self.idx
               self.idx += 1
               return self.lst[idx]
       def iter(lst):
           if hasattr(lst,'__iter__'):
               return lst.__iter__()
           else:
               return _ListIterator(lst)
    
    #
    if __name__ == '__main__:
        def dumpiter(itr):
            next = iter(itr).next
            try:
                while 1: print next()
            except StopIteration: pass
        dumpiter([1,2,3])
        dumpiter({'one': 'value', 'two': 'twoval'})



From z3p at twistedmatrix.com  Wed Mar 12 13:10:35 2003
From: z3p at twistedmatrix.com (Paul Swartz)
Date: Wed, 12 Mar 2003 12:10:35 -0600
Subject: [Twisted-Python] t.i.process uid/gid suckiness
In-Reply-To: <20030311151604.GB12367@lapdog>
References: <20030311132510.GA11040@lapdog> <200303111417.h2BEHt327030@localhost.localdomain> <20030311151604.GB12367@lapdog>
Message-ID: <20030312181035.GA1295@pyramid.twistedmatrix.com>

On Tue, Mar 11, 2003 at 05:16:04PM +0200, Tommi Virtanen wrote:
> 	I feel the C module is so rare and so unlikely to provide
> 	extra value, it's very unlikely twisted will ever need it.
> 	My guess at its reason for existence is that z3p didn't know
> 	it equals my 6-liner.

You're right.  The pty code is more-or-less stolen from the OpenSSH pty
code, so I didn't know how to emulate initgroups other than with an
external module.  Thanks for the fix. :)

-p
-- 
       Paul Swartz
(o_    http://www.twistedmatrix.com/users/z3p.twistd/  _o)
//\    z3p at twistedmatrix.com                           /\\
V_/_   AIM: z3penguin                                 _\_V->



From lordvan at lordvan.com  Wed Mar 12 15:01:14 2003
From: lordvan at lordvan.com (Thomas Raschbacher)
Date: Wed, 12 Mar 2003 21:01:14 +0100 (CET)
Subject: [Twisted-Python] t.web vhost -> personal server mapping
Message-ID: <65137.62.47.64.183.1047499274.squirrel@mail-at.net>

hi!

itamar asked me to post this to the list so here it is:

attached a small .rpy which can be used to map different vhosts ->
'personal' twisted.web servers listening on udp sockets (or anything else)

the getChild is just a hack and i'm not completely sure if it's the
only/best solution for this but it works this way (i mean the path stuff)

btw it's best used with a server creatd like this (imho ;)):
mktap --resource-script=vhostuser.rpy
and then user-servers like this:
mktap --path=/path/to/my/files --personal

comments, suggestions, improvments welcome :)

greetz, LordVan

-- 
-----BEGIN GEEK CODE BLOCK-----
GCS/CC/E/M/MU/S d- s: a--- C++++(++) UL++++ P+ L++++ E W+++ N+++ o-- K w-- O
M-- V- PS+ PE-- Y++ PGP+++ t+++ 5+ X- R tv b++++ DI- D+ G++ e-->+++++ h-- !r
z-
------END GEEK CODE BLOCK------


-----------------------------------------
This email was sent using SquirrelMail.
   "Webmail for nuts!"
http://squirrelmail.org/

-------------- next part --------------
A non-text attachment was scrubbed...
Name: vhostuser.rpy
Type: application/octet-stream
Size: 2133 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030312/c909fb82/attachment.obj 

From lafou at wanadoo.fr  Wed Mar 12 02:59:46 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: Wed, 12 Mar 2003 08:59:46 +0100
Subject: [Twisted-Python] Re: Twisted and wxPython on windows
References: <20030311152745.M8571@amaze.nl> <200303110946.23356.uwe@oss4u.com>
Message-ID: <b4mpf4$14u$1@main.gmane.org>

In documentation :
"WxPython

As with Tkinter, the support for integrating Twisted with a WxPython 
application uses specialized support code rather than a simple reactor.

from wxPython.wx import *
from twisted.internet import wxsupport, reactor

myWxAppInstance = MyWxApp(0)
wxsupport.install(myWxAppInstance)
reactor.run()"

And I have seen a wxsupport(app) in the API documentation, but can't find it 
again.


Uwe C. Schroeder wrote:

> On Tuesday 11 March 2003 06:27 am, Ivo van der Wijk wrote:
>> Hi all,
>>
>> I'm currently testing my python/twisted/wxWindows application under Win98
>> (development is done under Linux).
>>
>> Has anyone tested this before?
>>
>> The application is rather unresponsive sometimes, even with the
>> win32evenreactor installed.
>>
>> Does anyone know if things will perform better under win2k?
>>
>> I avoid touching Windows as much as possible, so I'm somewhat of a
>> newbie in this area (windows development and python under windows).
> 
> The basic problem with wxPython and Twisted is the wxpython internal event
> loop. If you follow the demos and docs of Twisted (using wxsupport) your
> app will freeze whenever you open a menu or a modal dialogbox. This is due
> to the fact that wxWindows uses a different eventloop to handle this type
> of events. The wx main eventloop will suspend until the menu etc. closes.
> Using wxsupport this will also freeze the twisted eventloop.
> Ergo - nothing works until you close whatever popped up.
> 
> I posted a recipe in the Python Cookbook (activestate.com) a while ago.
> Basically I solved the problem by running the normal wx eventloop and
> using timers to run the twisted events. just check it out. It's only
> tested on linux but maybe it helps you.
>  
>  
> UC
> 
> --
> Open Source Solutions 4U, LLC 2570 Fleetwood Drive
> Phone:  +1 650 872 2425               San Bruno, CA 94066
> Cell:   +1 650 302 2405               United States
> Fax:    +1 650 872 2417





From lafou at wanadoo.fr  Wed Mar 12 07:51:49 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: Wed, 12 Mar 2003 13:51:49 +0100
Subject: [Twisted-Python] Protocol dataReceived
Message-ID: <b4nai7$2vr$1@main.gmane.org>

Hello,

I hav a question about twisted.protocol. I want to create a new server, with 
its own protocol.
this would be :

[----]       [--]  [---------...-----------] |   [--] [--------....---] [00]


4 chars for a command (like prnt to "print")
2 chars for size a data1
n chars for data1
eventually 2 chars & n chars for data2, etc.
and 00 as end of line for example


The problem is that data1, data2, datan, would be binary data. 
I am not sure that it won't pose a problem in strings used with protocol 
(such end of string).

Someone can help me please ?

thank you
Philippe






From bob at redivi.com  Wed Mar 12 17:46:17 2003
From: bob at redivi.com (Bob Ippolito)
Date: Wed, 12 Mar 2003 17:46:17 -0500
Subject: [Twisted-Python] Protocol dataReceived
In-Reply-To: <b4nai7$2vr$1@main.gmane.org>
Message-ID: <6F9403A2-54DC-11D7-A6D6-000A95686CD8@redivi.com>

On Wednesday, Mar 12, 2003, at 07:51 America/New_York, Philippe 
Lafoucri?re wrote:

> Hello,
>
> I hav a question about twisted.protocol. I want to create a new 
> server, with
> its own protocol.
> this would be :

Basically what you want to do is look at twisted/protocols/basic.py -- 
specifically Int16StringReceiver (to see how to read in a 
length-prefixed string chunks at a time), NetstringReceiver (an example 
of having multiple states), and StatefulStringProtocol (this pattern 
will be useful for implementing your commands).

> The problem is that data1, data2, datan, would be binary data.
> I am not sure that it won't pose a problem in strings used with 
> protocol
> (such end of string).

Python strings are entirely 8-bit safe, for example len('\x00hi\xff') 
== 4 is a true statement.. so that will not cause you problems unless 
the transport has problems with it (i.e. a serial port or tty not 
explicitly configured to be 8bit clean may cause problems, and TCP/UDP 
sockets as a transport will never have this problem).

-bob



From rprice at collegenet.com  Wed Mar 12 18:03:03 2003
From: rprice at collegenet.com (rprice at collegenet.com)
Date: Wed, 12 Mar 2003 15:03:03 -0800 (PST)
Subject: [Twisted-Python] documentation issue?
Message-ID: <58285.10.1.4.156.1047510183.squirrel@webmail.collegenet.com>

Hi,

I am working my way through "The Twisted Documentation" Jan 29, 2003 and
found  a problem with an example (or with me).  At
http://twistedmatrix.com/documents/howto/plugin  it says:
% mktap qotd
Saving qotd application to qotd.tap...
Saved.
% twistd -f qotd.tap
% nc localhost 8007
An apple a day keeps the doctor away.
% kill `cat twistd.pid`


The problem is when I run 'mktap qotd' I get the following error:
Unknown command: qotd
and then it prints the usage and options help.

I am using python 2.2.1 and Twisted 1.0.3

Any help would be appreciated.

Ray









From exarkun at intarweb.us  Wed Mar 12 19:31:51 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Wed, 12 Mar 2003 19:31:51 -0500
Subject: [Twisted-Python] [bass@slinkp.com: [OT] Pycon: "pythooooon" t-shirts]
Message-ID: <20030313003151.GA31716@meson.dyndns.org>

  Since this strip was inspired by Twisted and suggested to Cube by itamar,
I thought I'd forward this to the list.

  I will be buying at least one. :)

  Jp

-- 
http://catandgirl.com/view.cgi?90
-- 
 up 9 days, 15:59, 11 users, load average: 0.09, 0.03, 0.01
-------------- next part --------------
An embedded message was scrubbed...
From: bass at slinkp.com (Paul Winkler)
Subject: [OT] Pycon: "pythooooon" t-shirts
Date: 12 Mar 2003 11:29:36 -0800
Size: 4426
Url: http://twistedmatrix.com/pipermail/twisted-python/attachments/20030312/978f4d5d/attachment.eml 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030312/978f4d5d/attachment.pgp 

From radix at twistedmatrix.com  Wed Mar 12 19:57:31 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 12 Mar 2003 19:57:31 -0500
Subject: [Twisted-Python] [bass@slinkp.com: [OT] Pycon: "pythooooon" t-shirts]
In-Reply-To: <20030313003151.GA31716@meson.dyndns.org>
References: <20030313003151.GA31716@meson.dyndns.org>
Message-ID: <20030313005731.GE1112@radii>

On Wed, Mar 12, 2003 at 07:31:51PM -0500, Jp Calderone wrote:
>   Since this strip was inspired by Twisted and suggested to Cube by itamar,
> I thought I'd forward this to the list.
> 
>   I will be buying at least one. :)

mmm. I want the second panel on a shirt. Just imagine the Twisted team
looking out onto a world in chaos after incinerating its dollars with
TCP/IP beams; triumphant, waving a twisted flag of victory. Now,
imagine controlling mens' minds with that fearsome image plastered
across your chest. "This is what will happen if you do not submit!!!"

http://isometric.spaceninja.com/_/twisted_plutonium/2.jpg

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From radix at twistedmatrix.com  Wed Mar 12 20:01:41 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 12 Mar 2003 20:01:41 -0500
Subject: [Twisted-Python] [skeom@esolnet.net: Hello......]
Message-ID: <20030313010141.GF1112@radii>

For some reason `skeom' decided to send me this email. I guess he's
not on the mailing list, so please Cc: him in responses. Oh, and I
assume he means "zerocopy" rather than "zerocoy".

----- Forwarded message from ?????? <skeom at esolnet.net> -----

From: ?????? <skeom at esolnet.net>
Subject: Hello......
To: <radix at twistedmatrix.com>
Importance: Normal

Hello.. I'm novice in python , especially twisted.

I havs one question.......

As you know, medusa is most famous development kit which supply
asynchronous socket ( zerocoy ), thread management, and so much
friendly function........
I herd that medusa can make more fast about 4 times or 10 times than
general python program using standard library.(unbelibable....)

Do twisted support zerocoy socket method?
And In your opinion, twisted is sufficiently competitive against
medusa in performance and any other part?

thank you for reading......^^

----- End forwarded message -----

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From cce at clarkevans.com  Wed Mar 12 21:12:13 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu, 13 Mar 2003 02:12:13 +0000
Subject: [Twisted-Python] Flow - an approach to interuptable data flows
Message-ID: <20030313021213.GA95174@doublegemini.com>

Hello.  Just checked in what I think is a stable version
of this 'flow' code I've been working on. 

  Problem: >
    In twisted, one would like to have a mechanism for
    managing large, perhaps blocking operations in 
    such a way that they can be resumable.

  Context:
    - >
      When doing page web page building, for example,
      the process often gets nested quite deeply into
      several layers of nested tags
    - >
      Many parts of a web page may have to block till
      data is ready, as a database query may not have
      finished [not necessarly implying threads, for 
      example Gerhard H?ring's code async PostgreSQL
      linkage]
    - >
      Some parts of the page building may also be 
      computational expensive, and thus, it would be
      polite to take a break now and then to let the
      main event loop process other events
    - > 
      Maintaining your context when constructing detailed
      (and highly nested) information is easy when you
      are using threads; but in Twisted's non-thread
      setting, it is quite tedious

  Solution:
    - >
      The construction of a 'Flow' object which describes
      a particular nesting of sub-routines so that intermediate
      stages could be added dynamically (for example, depending
      on a user's security).
    - > 
      A way of executing said Flow via a "execution stack", or
      FlowStack which is not the program stack; in this way, 
      a given Flow can be paused to allow other events to 
      get processed and then 'resumed' automatically.
    - >
      A set of FlowStages which are "atomic", non-inturruptable
      operations.   Each FlowStage has an 'input' and an 
      'output', if a Stage produces output, then the data moves
      onto subsequent stages.
    - >
      A mechanism for doing explosions (one-to-many iteration)  
      and reductions (many-to-one aggregations) which are both
      resumable.  In particular support for built-in lists and
      for 2.2, generators
    - > 
      A third mechansim for linking said Flow execution with
      a thread output, so that an iterator in a thread is 
      'transparently' marshalled into the main thread pump;
      so that when the thread blocks, the Flow Pauses, allowing
      other events to be handled within Twisted

Anyway, it's still experimental; but I'm rather happy with the
bugger, and it's producing some quite nice reports.  Comments 
would be helpful.

Clark


# Twisted, the Framework of Your Internet
# Copyright (C) 2003 Axista, Inc.
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of version 2.1 of the GNU Lesser General
# Public License as published by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
# USA

""" A resumable execution flow mechanism.

    Within single-threaded twisted main-loop, all code shares the same
    execution stack.  Sometimes it is useful when writing a handler
    to allow the handler to return (for example, if must block), but 
    saving the handler's state so it can be resumed later. 
"""

from __future__ import nested_scopes

class Flow:
    '''
       This object maintains a sequence of FlowStages which can be
       executed in order, where the output of one flow stage becomes
       the input of the next.   A flow starts with a top-level FlowStage,
       usually a producer of some sort, perhaps a database query, 
       followed by other filter stages until the data passed is 
       eventually consumed and None is returned.
   '''
    def __init__(self):
        '''
           Initializes a Flow object.  Processing starts at initialStage
           and then proceeds recursively.  Note that the stages are 
           recorded here as a StageItem singly-linked list.
        '''
        self.stageHead    = None
        self.stageTail    = None
        self.waitInterval = 0
    #     
    def append(self, stage):
        '''
            This appends an additional stage to the singly-linked
            list, starting with stageHead.
        '''
        link = FlowItem(stage)
        if not self.stageHead:
            self.stageHead = link
            self.stageTail = link
        else:
            self.stageTail.next = link
            self.stageTail = link
        return self

    def addFunction(self, callable, stop=None):
        self.append(FlowFunction(callable, stop))

    def addSequence(self, callable, onFinish = None):
        self.append(FlowSequence(callable, onFinish))

    def addContext(self, onFlush = None):
        self.append(FlowContext(onFlush))

    def addAccumulator(self, accum, start = None, 
                       finish = None, bucket = None):
        self.append(FlowAccumulator(accum, start, finish, bucket))

    def addDiscard(self):
        self.append(FlowStage())
    
    def execute(self, data = None):
        '''
           This executes the current flow, given empty
           starting data and the default initial state.
        '''
        if self.stageHead:
            stack = FlowStack(self.stageHead, data, self.waitInterval)
            stack.execute()

class FlowStack:
    '''
       a stack of FlowStages and a means for their execution
    '''
    def __init__(self, flowitem, data = None, waitInterval = 0):
        '''
           bootstraps the processing of the flow:

             flowitem      the very first stage in the process
             data          starting argument
             waitInterval  a useful item to slow the flow
        '''
        self._waitInterval = waitInterval
        self._stack   = []
        self._context = []  # see FlowContext
        self._stack.append((data, flowitem.stage, flowitem.next))
    #
    def context(self):
        cntx = self._context
        if cntx: 
            return cntx[-1]
    # 
    def push(self, data, stage=None, next=None):
        '''
           pushes a function to be executed onto the stack:
           
             data    argument to be passed
             stage   callable to be executed
             next    a FlowItem for subsequent stages
        '''
        if not stage:
            # assume the next stage in the process
            curr = self._current[2]
            if curr:
                stage = curr.stage
                next  = curr.next
        elif not next:
            # assume same stage, different function
            next = self._current[2]
        self._stack.append((data, stage, next))
    #
    def execute(self):
        '''
           This executes the current flow.
        '''
        stack = self._stack
        while stack:
            self._current = stack.pop()
            (data, stage, next) = self._current
            if not(stage): raise "unconsumed data"
            try:
                stage(self, data)
            except PauseFlow:
                self.push(data, stage, next)
                reactor.callLater(self._waitInterval,self.execute)
                return


class PauseFlow(Exception):
   '''
      This exception is used to pause a Flow, returning control
      back to the main event loop.  The flow automatically 
      reschedules itself to resume execution, resuming at the
      stage where it left off.
  '''

class FlowStage:
    ''' 
        operational unit in a flow, performs some sort of operation
        and optionally pushes other stages onto the call stack
    '''
    # 
    def __call__(self, flow, data):
        '''
            this is the minimum flow stage, it simply returns None,
            and thus indicates that the current branch is complete
        '''
        pass
 
class FlowFunction(FlowStage):
    ''' 
        wraps a function takign an input and returning a result; 
        in effect this implements one-to-one behavior
    '''
    def __init__(self, callable, stop = None):
        self.callable  = callable
        self.stop      = stop
    # 
    def __call__(self, flow, data):
        '''
            executes the callable and passes this data onto the next 
            stage in the flow; since this only pushes one item on
            to the stack, it is tail-recursive
        '''
        ret = self.callable(data)
        if ret is not self.stop:
            flow.push(ret)

class _FlowContext:
    '''
        innerds of the flow context, this object is created
        for each descend of a FlowContext stage, and has 
        attached callbacks.

        addOnFlush   adds a function to be called, optionally
                     with the 'context' attribute
    '''
    def __init__(self):
        self._flush = []
    #
    def addFlush(self, onFlush, bucket = None):
        args = onFlush.func_code.co_argcount
        if 0 == args: 
           fnc = lambda flow, cntx: onFlush()
        elif 1 == args:
           fnc = lambda flow, cntx: onFlush(getattr(cntx,bucket,None))
        else:
           fnc = onFlush
        self._flush.append(fnc)
   
class FlowContext(FlowStage):
    ''' 
        represents a branch of execution which may hold accumulated
        results and may have 'flush' handlers attached, which fire
        when the context is closed
    '''
    def __init__(self, onFlush = None):
        self.onFlush = onFlush

    def __call__(self, flow, data):
        ''' 
            adds the _FlowContext to the FlowStack's _context stack
        '''
        cntx = _FlowContext()
        if self.onFlush: 
            cntx.addFlush(self.onFlush)
        flow._context.append(cntx)
        flow.push(cntx, self.flush)
        flow.push(data)

    def flush(self, flow, cntx):
        '''
           cleans up the context and fires onFlush events
        '''
        top = flow._context.pop()
        assert top is cntx
        fncs = cntx._flush
        while fncs: flow.push(cntx, fncs.pop())


class FlowSequence(FlowStage):
    '''
        allows callable objects returning an iterator to be used
        within the system; this implements one-to-many behavior
    '''
    def __init__(self, callable, onFinish = None):
        self.callable = callable
        self.onFinish = onFinish
    # 
    def __call__(self, flow, data):
        '''
            executes the callable, and if an iterator object 
            is returned, schedules its next method
        '''
        ret = self.callable(data)
        if ret is not None:
            next = iter(ret).next
            flow.push(next, self.iterate)
    #
    def iterate(self, flow, next):
        '''
            if the next method has results, then schedule the
            next stage of the flow, otherwise finish up
        '''
        try:
            data = next()
            flow.push(next, self.iterate)
            flow.push(data)
        except StopIteration:
            if self.onFinish:
               self.onFinish()

class FlowAccumulator(FlowStage):
    '''
        the opposite of a FlowSequence, this takes multiple calls
        and converges them into a single call; this implements
        many-to-one behavior;  for the accumulator to work, it
        requires a FlowContext be higher up the call stack
    '''
    def __init__(self, accum, start = None, finish = None, bucket = None):
        if not bucket: bucket = id(self)
        self.bucket = str(bucket)
        self.start  = start
        self.accum  = accum
        self.finish = finish
    #
    def __call__(self, flow, data):
        '''
            executes the accum function
        '''
        cntx = flow.context()
        assert cntx, "FlowAccumulator needs a prior FlowContext"
        if not hasattr(cntx, self.bucket):
             if self.finish: cntx.addFlush(self.finish, self.bucket)
             acc = self.start
             if callable(acc): acc = acc()
        else:
             acc = getattr(cntx, self.bucket)
        acc = self.accum(acc, data)
        setattr(cntx, self.bucket, acc)

class FlowItem:
    '''
       a Flow is implemented as a series of FlowStage objects
       in a linked-list; this is the link node
        
         stage   a FlowStage in the linked list
         next    next FlowStageLink in this list
 
    '''
    def __init__(self,stage):
        self.stage = stage
        self.next  = None

class FlowIterator:
    '''
       This is an iterator base class which can be used to build
       iterators which are constructed and run within a Flow
    '''
    #
    def __init__(self, data = None):
        from twisted.internet.reactor import callInThread
        self.data = data  
        tunnel = _TunnelIterator(self)
        callInThread(tunnel.process)
        self._tunnel = tunnel
    #
    def __iter__(self): 
        return self._tunnel
    #
    def next(self):
        ''' 
            The method used to fetch the next value
        '''
        raise StopIteration

class _TunnelIterator:
    '''
       This is an iterator which tunnels output from an iterator
       executed in a thread to the main thread.   Note, unlike
       regular iterators, this one throws a PauseFlow exception
       which must be handled by calling reactor.callLater so that
       the producer threads can have a chance to send events to 
       the main thread.
    '''
    def __init__(self, source):
        '''
            This is the setup, the source argument is the iterator
            being wrapped, which exists in another thread.
        '''
        self.source     = source
        self.isFinished = 0
        self.failure    = None
        self.buff       = []
        self.append     = self.buff.append
    #
    def process(self):
        '''
            This is called in the 'source' thread, and 
            just basically sucks the iterator, appending
            items back to the main thread.
        '''
        from twisted.internet.reactor import callFromThread
        try:
            while 1:
                val = self.source.next()
                callFromThread(self.append,val)
        except StopIteration:
            callFromThread(self.stop)
        except Exception, e:
            print str(e)
            #failure = failure.Failure()
            #print "failing", failure
            #callFromThread(self.setFailure,failure)
    #
    def setFailure(self, failure):
        self.failure = failure
    #
    def stop(self):
        self.isFinished = 1
    #
    def next(self):
        if self.buff:
           return self.buff.pop(0)
        if self.isFinished:  
            raise StopIteration
        if self.failure:
            raise self.failure
        raise PauseFlow


class FlowQueryIterator(FlowIterator):
    def __init__(self, pool, sql):
        FlowIterator.__init__(self)
        self.curs = None
        self.sql  = sql
        self.pool = pool
        self.data = None
    def __call__(self,data):
        ret = FlowIterator.__call__(self,data)
        ret.append = ret.buff.extend
        return ret
    def next(self):
        if not self.curs:
            conn = self.pool.connect()
            self.curs = conn.cursor()
            if self.data: self.curs.execute(self.sql % self.data) 
            else: self.curs.execute(self.sql)
        res = self.curs.fetchone() # TODO: change to fetchmany
        if not(res): 
            self.curs.close()
            raise StopIteration
        return res

def testFlowIterator():
    class CountIterator(FlowIterator):
        def next(self): # this is run in a separate thread
            print "."
            from time import sleep
            sleep(.5)
            val = self.data
            if not(val):
                print "done counting"
                raise StopIteration
            self.data -= 1
            return val
    def printResult(data): print data
    def finished(): print "finished"
    f = Flow()
    f.addSequence(CountIterator, onFinish=finished)
    f.addFunction(printResult)
    f.waitInterval = 1
    f.execute(5)

def testFlow():
    '''
       primary tests of the Flow construct
    '''
    def addOne(data): return  data+1
    def printResult(data): print data
    def finished(): print "finished"
    def dataSource(data):  return [1, 1+data, 1+data*2]
    f = Flow()
    f.execute()
    f.addSequence(dataSource, finished)
    f.addFunction(addOne)
    f.addFunction(printResult)
    f.execute(2)
    f.execute(11)
    
    class simpleIterator:
        def __init__(self, data): 
            self.data = data
        def __iter__(self): 
            return self
        def next(self): 
            if self.data < 0: raise StopIteration
            ret = self.data
            self.data -= 1
            return ret
    
    import operator
    f = Flow()
    f.addContext(finished)
    f.addSequence(simpleIterator)
    f.addAccumulator(operator.add, 0, printResult)


def testFlowConnect():
    from twisted.enterprise.adbapi import ConnectionPool
    pool = ConnectionPool("mx.ODBC.EasySoft","PSICustomerProto")
    def printResult(x): print x
    def printDone(): print "done"
    sql = "SELECT caption from vw_date"
    f = Flow()
    f.waitInterval = 1
    f.addStage(FlowQueryIterator(pool,sql),onFinish=printDone)
    f.addStage(printResult)
    f.execute()

# support iterators for 2.1
try:
   StopIteration = StopIteration
   iter = iter
except:
   StopIteration = IndexError
   class _ListIterator:
       def __init__(self,lst):
           self.idx = 0
           if getattr(lst,'keys',None): lst = lst.keys()
           self.lst = lst
       def next(self):
           idx = self.idx
           self.idx += 1
           return self.lst[idx]
   def iter(lst): 
       if hasattr(lst,'__iter__'):
           return lst.__iter__()
       else:
           return _ListIterator(lst)

if '__main__' == __name__:
    from twisted.internet import reactor
    testFlow()
    testFlowIterator()
    #testFlowConnect()
    reactor.callLater(5,reactor.stop)
    reactor.run()



From radix at twistedmatrix.com  Wed Mar 12 21:37:55 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 12 Mar 2003 21:37:55 -0500
Subject: [Twisted-Python] Flow - an approach to interuptable data flows
In-Reply-To: <20030313021213.GA95174@doublegemini.com>
References: <20030313021213.GA95174@doublegemini.com>
Message-ID: <20030313023755.GH1112@radii>

On Thu, Mar 13, 2003 at 02:12:13AM +0000, Clark C. Evans wrote:
> # Twisted, the Framework of Your Internet
> # Copyright (C) 2003 Axista, Inc.

All code in Twisted needs to be Copyright Glyph. Please remove this
code from CVS or change the copyright asap... (Since it's copyrighted
by a corporation right now, you may have to get them to officially
sign the agreement in doc/legal/).

Temp-vigilante-while-glyph-is-busy,

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From bruce at cubik.org  Wed Mar 12 21:42:36 2003
From: bruce at cubik.org (Bruce Mitchener)
Date: Wed, 12 Mar 2003 19:42:36 -0700
Subject: [Twisted-Python] small bugs
Message-ID: <3E6FF01C.5050709@cubik.org>

I've started using Twisted again finally, and found some small issues.

I don't have the time to fix them, but maybe someone else does.  Most of 
these are too small (and not worth the time) to put into the bug 
tracker, so here they are:

    * mktap -d and mktap -p don't appear to work (or at least
      they didn't do anything).
    * Spacing error in comments at start of
      listings/Twisted/Quotes/quotetap.py visible in the
      plugin howto.
    * lists/application/app3.py refers to a comment in
      doc/examples/echoserv.py that doesn't exist. visible
      in the application howto.
    * Copyright from twistd --version is still 2000-2002.
    * mktap --version doesn't output copyright info at all.
      (I didn't look at other utilities because I can't
      remember if any others exist.)

Also, the progression through the docs to get a .tap-based application 
up and running is confusing.  I figured I was writing a server, so I 
looked at the howto for that, then was pointed towards the application 
writing howto, and then finally that pointed to the plugin howto.  I 
eventually got to the right place, but it was a bit painful doing so. 
(and the stuff surrounding plugins.tml is still as confusing as it was 
in October and assumes too much Python knowledge about modules and so on.)

  - Bruce




From bruce at cubik.org  Wed Mar 12 21:45:38 2003
From: bruce at cubik.org (Bruce Mitchener)
Date: Wed, 12 Mar 2003 19:45:38 -0700
Subject: [Twisted-Python] Flow - an approach to interuptable data flows
References: <20030313021213.GA95174@doublegemini.com> <20030313023755.GH1112@radii>
Message-ID: <3E6FF0D2.4020509@cubik.org>

Christopher Armstrong wrote:
> On Thu, Mar 13, 2003 at 02:12:13AM +0000, Clark C. Evans wrote:
>># Twisted, the Framework of Your Internet
>># Copyright (C) 2003 Axista, Inc.
> 
> All code in Twisted needs to be Copyright Glyph. Please remove this
> code from CVS or change the copyright asap... (Since it's copyrighted
> by a corporation right now, you may have to get them to officially
> sign the agreement in doc/legal/).

A more permissive license, such as the BSD-without-advertising, or the 
MIT/X11 license would work as well, since that'd give Glyph all of the 
rights that he needs?

  - Bruce




From cce at clarkevans.com  Wed Mar 12 22:47:46 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu, 13 Mar 2003 03:47:46 +0000
Subject: [Twisted-Python] Flow - an approach to interuptable data flows
In-Reply-To: <3E6FF0D2.4020509@cubik.org>
References: <20030313021213.GA95174@doublegemini.com> <20030313023755.GH1112@radii> <3E6FF0D2.4020509@cubik.org>
Message-ID: <20030313034746.GA95602@doublegemini.com>

Quite right.  I added Glyph to the copyright.   

On Wed, Mar 12, 2003 at 07:45:38PM -0700, Bruce Mitchener wrote:
| Christopher Armstrong wrote:
| >All code in Twisted needs to be Copyright Glyph. Please remove this
| >code from CVS or change the copyright asap... (Since it's copyrighted
| >by a corporation right now, you may have to get them to officially
| >sign the agreement in doc/legal/).

twisted/protocols/gnutella.py:# Copyright (C) 2002 Bryce "Zooko" O'Whielacronx
twisted/zoot/AFactory.py:# Copyright (C) 2002 Bryce "Zooko" Wilcox-O'Hearn
twisted/zoot/pingertap.py:# Copyright (C) 2002 Bryce "Zooko" Wilcox-O'Hearn
twisted/zoot/pongertap.py:# Copyright (C) 2002 Bryce "Zooko" Wilcox-O'Hearn
twisted/zoot/zoot.py:# Copyright (C) 2002 Bryce "Zooko" Wilcox-O'Hearn
twisted/zoot/zoottap.py:# Copyright (C) 2002 Bryce "Zooko" Wilcox-O'Hearn
  etc...


| A more permissive license, such as the BSD-without-advertising, or the 
| MIT/X11 license would work as well, since that'd give Glyph all of the 
| rights that he needs?

I'd actually perfer this over the LGPL, especially if I'm the author.

Best,

Clark



From radix at twistedmatrix.com  Wed Mar 12 22:45:54 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 12 Mar 2003 22:45:54 -0500
Subject: [Twisted-Python] Flow - an approach to interuptable data flows
In-Reply-To: <20030313034746.GA95602@doublegemini.com>
References: <20030313021213.GA95174@doublegemini.com> <20030313023755.GH1112@radii> <3E6FF0D2.4020509@cubik.org> <20030313034746.GA95602@doublegemini.com>
Message-ID: <20030313034554.GI1112@radii>

On Thu, Mar 13, 2003 at 03:47:46AM +0000, Clark C. Evans wrote:
> Quite right.  I added Glyph to the copyright.   
> 
> On Wed, Mar 12, 2003 at 07:45:38PM -0700, Bruce Mitchener wrote:
> | Christopher Armstrong wrote:
> | >All code in Twisted needs to be Copyright Glyph. Please remove this
> | >code from CVS or change the copyright asap... (Since it's copyrighted
> | >by a corporation right now, you may have to get them to officially
> | >sign the agreement in doc/legal/).
> 
> twisted/protocols/gnutella.py:# Copyright (C) 2002 Bryce "Zooko" O'Whielacronx
> twisted/zoot/AFactory.py:# Copyright (C) 2002 Bryce "Zooko" Wilcox-O'Hearn
> twisted/zoot/pingertap.py:# Copyright (C) 2002 Bryce "Zooko" Wilcox-O'Hearn
> twisted/zoot/pongertap.py:# Copyright (C) 2002 Bryce "Zooko" Wilcox-O'Hearn
> twisted/zoot/zoot.py:# Copyright (C) 2002 Bryce "Zooko" Wilcox-O'Hearn
> twisted/zoot/zoottap.py:# Copyright (C) 2002 Bryce "Zooko" Wilcox-O'Hearn
>   etc...

Huh. I thought that was cleared up a long time ago... I remember when
Zooko first added that code, and glyph explained the copyright policy,
and IIRC Zooko agreed to it. I don't know why it's never been
changed. Glyph? :)

> | A more permissive license, such as the BSD-without-advertising, or the 
> | MIT/X11 license would work as well, since that'd give Glyph all of the 
> | rights that he needs?
> 
> I'd actually perfer this over the LGPL, especially if I'm the author.

You still have a copyright on that code, and you can distribute it
however you want, of course. It's just non-mutual copyright, as glyph
has the same rights as you (If you agree, anyway).

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From cce at clarkevans.com  Thu Mar 13 01:31:05 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu, 13 Mar 2003 06:31:05 +0000
Subject: [Twisted-Python] Flow - an approach to interuptable data flows
In-Reply-To: <20030313034554.GI1112@radii>
References: <20030313021213.GA95174@doublegemini.com> <20030313023755.GH1112@radii> <3E6FF0D2.4020509@cubik.org> <20030313034746.GA95602@doublegemini.com> <20030313034554.GI1112@radii>
Message-ID: <20030313063105.GA96049@doublegemini.com>

On Wed, Mar 12, 2003 at 10:45:54PM -0500, Christopher Armstrong wrote:
| You still have a copyright on that code, and you can distribute it
| however you want, of course. It's just non-mutual copyright, as glyph
| has the same rights as you (If you agree, anyway).

Perfect.

Clark



From mario at ruggier.org  Thu Mar 13 03:09:24 2003
From: mario at ruggier.org (Mario Ruggier)
Date: Thu, 13 Mar 2003 09:09:24 +0100
Subject: [Twisted-Python] documentation issue?
In-Reply-To: <58285.10.1.4.156.1047510183.squirrel@webmail.collegenet.com>
Message-ID: <1A41CC32-552B-11D7-A266-000393756786@ruggier.org>

Is the TwsitedQuotes package in your python path (can you import it) ?

Did you copy all the necessary files to this package dir
(__init__.py, plugins.tml, quoteproto.py, quoters.py, quotetap.py) ?

mario


> Hi,
>
> I am working my way through "The Twisted Documentation" Jan 29, 2003 
> and
> found  a problem with an example (or with me).  At
> http://twistedmatrix.com/documents/howto/plugin  it says:
> % mktap qotd
> Saving qotd application to qotd.tap...
> Saved.
> % twistd -f qotd.tap
> % nc localhost 8007
> An apple a day keeps the doctor away.
> % kill `cat twistd.pid`
>
>
> The problem is when I run 'mktap qotd' I get the following error:
> Unknown command: qotd
> and then it prints the usage and options help.
>
> I am using python 2.2.1 and Twisted 1.0.3
>
> Any help would be appreciated.
>
> Ray




From ivo at amaze.nl  Thu Mar 13 05:08:00 2003
From: ivo at amaze.nl (Ivo van der Wijk)
Date: Thu, 13 Mar 2003 11:08:00 +0100
Subject: [Twisted-Python] Re: Twisted and wxPython on windows
In-Reply-To: <b4mpf4$14u$1@main.gmane.org>; from lafou@wanadoo.fr on Wed, Mar 12, 2003 at 08:59:46AM +0100
References: <20030311152745.M8571@amaze.nl> <200303110946.23356.uwe@oss4u.com> <b4mpf4$14u$1@main.gmane.org>
Message-ID: <20030313110758.T8571@amaze.nl>

On Wed, Mar 12, 2003 at 08:59:46AM +0100, Philippe Lafoucri?re wrote:
> In documentation :
> "WxPython
> 
> As with Tkinter, the support for integrating Twisted with a WxPython 
> application uses specialized support code rather than a simple reactor.
> 
> from wxPython.wx import *
> from twisted.internet import wxsupport, reactor
> 
> myWxAppInstance = MyWxApp(0)
> wxsupport.install(myWxAppInstance)
> reactor.run()"
> 
> And I have seen a wxsupport(app) in the API documentation, but can't find it 
> again.
> 

This is not the issue. The problem is the reactor that seems 'sluggish'
under windows, making the app freeze quite often.

It seems that win2k does alot better, so perhaps that should be the target
platform.

I'll give the guieventreactor a try tough.

Cheers

	Ivo

-- 
Drs. I.R. van der Wijk                                      -=-              
Brouwersgracht 132                             Amaze Internet Services V.O.F.
1013 HA Amsterdam, NL                                       -=-              
T +31-20-4688336         F +31-20-4688337        Linux/Web/Zope/SQL/MMBase   
W http://www.amaze.nl    E info at amaze.nl             Network Solutions        
W http://vanderwijk.info E ivo at amaze.nl                 Consultancy          
PGP http://vanderwijk.info/pgp                              -=-              



From andrew-twisted at puzzling.org  Thu Mar 13 06:40:25 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu, 13 Mar 2003 22:40:25 +1100
Subject: [Twisted-Python] small bugs
In-Reply-To: <3E6FF01C.5050709@cubik.org>
References: <3E6FF01C.5050709@cubik.org>
Message-ID: <20030313114025.GE4315@frobozz.local>

On Wed, Mar 12, 2003 at 07:42:36PM -0700, Bruce Mitchener wrote:
> I've started using Twisted again finally, and found some small issues.

Good to hear from you again :)

Regarding some of your small bugs:

>    * Spacing error in comments at start of
>      listings/Twisted/Quotes/quotetap.py visible in the
>      plugin howto.

Fixed.

>    * lists/application/app3.py refers to a comment in
>      doc/examples/echoserv.py that doesn't exist. visible
>      in the application howto.

Looks like itamar fixed this.

>    * mktap --version doesn't output copyright info at all.
>      (I didn't look at other utilities because I can't
>      remember if any others exist.)

Look at bin/* in CVS, or twisted/scripts for an idea of what utilities we
have.

Thanks!

-Andrew.




From nbm at mithrandr.moria.org  Thu Mar 13 09:11:46 2003
From: nbm at mithrandr.moria.org (Neil Blakey-Milner)
Date: Thu, 13 Mar 2003 16:11:46 +0200
Subject: [Twisted-Python] StikiWiki and textarea/woven/model problem.
Message-ID: <20030313141146.GA36050@mithrandr.moria.org>

Hi,

Firstly, StikiWiki is a simple example of a somewhat Wiki-like web
application in Twisted that can create and edit reStructuredText
documents, and display them as HTML.  It's attached as stikiwiki.py.

Well, you can create documents.  Editing isn't as much editing as
rewriting.  I'm using a textarea for input, and since I haven't looked
all that much at woven, I can't figure out why its contents aren't
replaced with the existing content (via getData on the given model).

So, at the moment, you can create a page (localhost:9080/asdf/create),
type in some reST, and then go to localhost:9080/asdf and view it.  Then
go to localhost:9080/asdf/create and rewrite it.  I want to figure out
why the model's getData doesn't get involved.

Any help greatly appreciated.

Thanks,

Neil
-- 
Neil Blakey-Milner
nbm at mithrandr.moria.org
-------------- next part --------------
#!/usr/local/bin/python
#
# Copyright (c) 2003 Neil Blakey-Milner
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#

from twisted.cred import service
from twisted.internet import app, reactor
from twisted.web import resource, server, static
from twisted.web.woven import model, page

from docutils import core, io
from StringIO import StringIO
from cog import db, base

entry_xhtml = """
<html>
    <head>
        <title model="title">Quotes Galore!</title>
        <style>.quote {color: green;}</style>
    </head>

    <body>
        <h1 model="title">New Page!</h1>

        <form action="">
            <textarea rows="15" cols="50" name="entry" model="entry"
                controller="Anything" >
                Something
            </textarea>
            <input type="submit" />
        </form>
    </body>
</html>
"""

default_css = """
/*
:Author: David Goodger
:Contact: goodger at users.sourceforge.net
:date: $Date: 2002/07/27 14:55:52 $
:version: $Revision: 1.12 $
:copyright: This stylesheet has been placed in the public domain.

Default cascading style sheet for the HTML output of Docutils.
*/

a.footnote-reference {
  font-size: smaller ;
  vertical-align: super }

a.target {
  color: blue }

a.toc-backref {
  text-decoration: none ;
  color: black }

dd {
  margin-bottom: 0.5em }

div.abstract {
  margin: 2em 5em }

div.abstract p.topic-title {
  font-weight: bold ;
  text-align: center }

div.attention, div.caution, div.danger, div.error, div.hint,
div.important, div.note, div.tip, div.warning {
  margin: 2em ;
  border: medium outset ;
  padding: 1em }

div.attention p.admonition-title, div.caution p.admonition-title,
div.danger p.admonition-title, div.error p.admonition-title,
div.warning p.admonition-title {
  color: red ;
  font-weight: bold ;
  font-family: sans-serif }

div.hint p.admonition-title, div.important p.admonition-title,
div.note p.admonition-title, div.tip p.admonition-title {
  font-weight: bold ;
  font-family: sans-serif }

div.dedication {
  margin: 2em 5em ;
  text-align: center ;
  font-style: italic }

div.dedication p.topic-title {
  font-weight: bold ;
  font-style: normal }

div.figure {
  margin-left: 2em }

div.footer, div.header {
  font-size: smaller }

div.system-messages {
  margin: 5em }

div.system-messages h1 {
  color: red }

div.system-message {
  border: medium outset ;
  padding: 1em }

div.system-message p.system-message-title {
  color: red ;
  font-weight: bold }

div.topic {
  margin: 2em }

h1.title {
  text-align: center }

h2.subtitle {
  text-align: center }

hr {
  width: 75% }

ol.simple, ul.simple {
  margin-bottom: 1em }

ol.arabic {
  list-style: decimal }

ol.loweralpha {
  list-style: lower-alpha }

ol.upperalpha {
  list-style: upper-alpha }

ol.lowerroman {
  list-style: lower-roman }

ol.upperroman {
  list-style: upper-roman }

p.caption {
  font-style: italic }

p.credits {
  font-style: italic ;
  font-size: smaller }

p.first {
  margin-top: 0 }

p.label {
  white-space: nowrap }

p.topic-title {
  font-weight: bold }

pre.literal-block, pre.doctest-block {
  margin-left: 2em ;
  margin-right: 2em ;
  background-color: #eeeeee }

span.classifier {
  font-family: sans-serif ;
  font-style: oblique }

span.classifier-delimiter {
  font-family: sans-serif ;
  font-weight: bold }

span.field-argument {
  font-style: italic }

span.interpreted {
  font-family: sans-serif }

span.option-argument {
  font-style: italic }

span.problematic {
  color: red }

table {
  margin-top: 0.5em ;
  margin-bottom: 0.5em }

table.citation {
  border-left: solid thin gray ;
  padding-left: 0.5ex }

table.docinfo {
  margin: 2em 4em }

table.footnote {
  border-left: solid thin black ;
  padding-left: 0.5ex }

td, th {
  padding-left: 0.5em ;
  padding-right: 0.5em ;
  vertical-align: baseline }

td.docinfo-name {
  font-weight: bold ;
  text-align: right }

td.field-name {
  font-weight: bold }
"""

class MStikiEntry(model.Model):
    def __init__(self, page, path, value):
        model.Model.__init__(self)
        self.page = page
        self.path = path
        self.value = value

    def getData(self):
        return self.value
        pass

    def setData(self, data):
        p = StikiPage(self.page.parent, self.path, data)
        self.page.parent.putChild(self.path, p)
        print "putChild with %s and %s on %s" % (self.path, p.id, self.page.parent.id)

class StikiPage(object, resource.Resource):
    __persistent__ = 1

    value = """
Uninitialised StikiPage
-----------------------

This StikiPage exists, but doesn't have any content in it."""

    def __init__(self, parent, path, value = None):
        self.errorpage = 0
        self.final = 0
        resource.Resource.__init__(self)
        self.parent = parent
        if value:
            self.value = value
        self.id = path
        base.setDirty(self, 1)

    def getChild(self, path, request):

        if path == "":
            return self

        fullpath = "/".join(request.acqpath[:-2])
        shortpath = request.acqpath[-2]

        self.model = {'entry': MStikiEntry(self, shortpath, self.value), 'title': "New StikiWiki Entry!"}

        if path == "create":
            p = page.Page(self.model, templateFile="create.xhtml")
            p.template = entry_xhtml
            return p

        if path == "delete":
            return StikiErrorPage(self, path, request.uri)

        return StikiErrorPage(self, path, request.uri)

    def render(self, request):
        pub = core.Publisher()
        pub.set_reader('restructuredtext', None, 'restructuredtext')
        pub.set_writer('html')
        pub.set_options()
        pub.options._destination = ''
        pub.options.stylesheet = '/default.css'
        pub.source = io.StringIO(pub.options, source = self.value)
        pub.destination = io.StringIO(pub.options)
        pub.options.report_level = 5
        pub.options.halt_level = 6
        warnings = StringIO()
        pub.options.warning_stream = warnings
        return pub.publish()

    def putChild(self, path, res):
        resource.Resource.putChild(self, path, res)
        base.setDirty(self, 1)

class StikiErrorPage(StikiPage):
    def __init__(self, parent, path, uri, final = 0):
        StikiPage.__init__(self, parent, path)
        self.errorpage = 1
        self.final = final
        self.value = """
No such entry
-------------

There is no such entry in this StikiWiki."""

        if not final:
            if not uri.endswith("/"):
                uri += "/"
            uri += "create"
            self.value += """  `Create it?`_
            
.. _`Create it?`: %s""" % (uri)

    def getChild(self, path, request):
        if self.final:
            return StikiErrorPage(self, path, request.uri, 1)

        if not self.final and path == "":
            self.final = 1
            return self

        fullpath = "/".join(request.acqpath[:-2])
        shortpath = request.acqpath[-2]

        self.model = {'entry': MStikiEntry(self, shortpath, self.value), 'title': "New StikiWiki Entry!"}

        if path == "create":
            p = page.Page(self.model, templateFile="create.xhtml")
            p.template = entry_xhtml
            return p

        #if path == "delete":
        #    return StikiErrorPage(self, path, request.uri)

        #if self.errorpage:
        #    self.final = 1

        return StikiErrorPage(self, path, request.uri, 1)


class StikiSite(object, resource.Resource):
    __persistent__ = 1

    def __init__(self):
        resource.Resource.__init__(self)
        self.id = "site"

    def getChild(self, path, request):
        if path == "":
            return self.getChildWithDefault("Index", request)
        return StikiErrorPage(self, path, request.uri)

    def putChild(self, path, res):
        resource.Resource.putChild(self, path, res)
        base.setDirty(self, 1)

class StikiService(app.ApplicationService):
    def startService(self):
        app.ApplicationService.startService(self)
        reactor.callLater(0, self.addDefaults)

    def addDefaults(self):
        db = self.serviceParent.getServiceNamed("cog").db

        if not db.registry.has_key("stikisite"):
            self.ss = StikiSite()
            db.registry.set("stikisite", self.ss)
        else:
            self.ss = db.registry.get("stikisite")
            self.ss._load()

        self.serviceParent.listenTCP(9080, server.Site(self.ss))

        if "Index" not in self.ss.listStaticNames():
            self.ss.putChild("Index", StikiPage(self.ss, "Index",
                """
Hello World!
-----------

Hey there!"""))

        if "default.css" not in self.ss.listStaticNames():
            self.ss.putChild("default.css", static.Data(default_css, "text/css"))

        db.flush()
        del db

class CogService(app.ApplicationService):
    def __init__(self, path, serviceName, serviceParent=None):
        app.ApplicationService.__init__(self, serviceName, serviceParent=serviceParent)
        self.path = path

    def startService(self):
        self.db = db.openDatabase(self.path)
        self.scheduledWork = reactor.callLater(60, self.doPeriodicWork)

    def stopService(self):
        self.scheduledWork.cancel()
        del self.scheduledWork
        self.db.close()
        del self.db

    def doPeriodicWork(self):
        delay = self.db.do_periodic_work()
        self.scheduledWork = reactor.callLater(delay, self.doPeriodicWork)

    def commit(self):
        self.db.flush()

def main():
    a = app.Application("stikiwiki")
    s = StikiService("stiki", a)
    c = CogService("/tmp/cog/", "cog", a)
    a.run(save=0)

if __name__ == "__main__":
    main()

From robert at dumond.org  Thu Mar 13 09:13:39 2003
From: robert at dumond.org (Robert W. Dumond)
Date: Thu, 13 Mar 2003 09:13:39 -0500
Subject: [Twisted-Python] greetings!
Message-ID: <3E709213.5040701@dumond.org>

hallo, everyone!  i just thought i would introduce myself, because i 
think i am going to be posting a lot of questions on this list.  i keep 
on reading how easy it is to program with your product, but my 
experience with python is very limited, and ,honestly, i really don't 
have that much time for it because of work.  i still put in plenty of 
time with it, though.  i love the language.  it beats the hell out of 
java, which i have to use everyday for work.  it really feels like i am 
playing instead of programming.  =-)

i also wanted to discuss with you my plans with my new found language. 
i am currently working for a startup.  i am designing their first 
project, and i am the sole programmer.  when our company starts hiring, 
i will be in charge of development, tech support, and q.a..  what i want 
is a centralized system to support all three of these departments.  i 
want a cvs, project management, bug tracking, bug assignment, tech 
suport logging, customer support log, registration server, update 
server, and document server (for emailing customers .pdf copies of the 
manuals).  i understand that this is a monumental task.  *shrug*  one of 
the things that i hated about my old job (besides management ;-) was 
that i had to use 5 programs to do everything i had to do.  it was a 
pain in the ass.  i don't want my crew to have to go through that stupid 
little hell.

(side track - oh, and yeah, i do know about zope.  i worked with it 
some, but i decided i would rather work with your product so i could 
work with pure python.)

right now, i am tightening up my python skills by going through some 
books.  so i thought i would send out this email, get some ideas on how 
to start (or maybe to stop =-P), and then start the design phase, and, 
who knows, maybe even write some test.  (i really just discovered unit 
testing.  i was out of the programming loop for about a year until six 
months ago.)

so, tell me, am i shooting too high?  is this feasible?  any thoughts 
you have would be greatly appreciated and thanked!

guhby,
rwd




From bob at redivi.com  Thu Mar 13 10:08:13 2003
From: bob at redivi.com (Bob Ippolito)
Date: Thu, 13 Mar 2003 10:08:13 -0500
Subject: [Twisted-Python] greetings!
In-Reply-To: <3E709213.5040701@dumond.org>
References: <3E709213.5040701@dumond.org>
Message-ID: <20030313100812.A28042@redivi.com>

On Thu, Mar 13, 2003 at 09:13:39AM -0500, Robert W. Dumond wrote:
> (side track - oh, and yeah, i do know about zope.  i worked with it 
> some, but i decided i would rather work with your product so i could 
> work with pure python.)

Well there are already Zope products to do just about everything you want to do.  There are very few, if any, complete implementations of what you want in Twisted.  Although it would be great if someone were to make all of this available in Twisted, I think it's too much for one person to do well in a reasonable amount of time, and that you should take another look at Zope/Plone/etc..

-bob



From rprice at collegenet.com  Thu Mar 13 12:05:32 2003
From: rprice at collegenet.com (rprice at collegenet.com)
Date: Thu, 13 Mar 2003 09:05:32 -0800 (PST)
Subject: [Twisted-Python] documentation issue?
In-Reply-To: <1A41CC32-552B-11D7-A266-000393756786@ruggier.org>
References: <58285.10.1.4.156.1047510183.squirrel@webmail.collegenet.com>
        <1A41CC32-552B-11D7-A266-000393756786@ruggier.org>
Message-ID: <58956.10.1.4.156.1047575132.squirrel@webmail.collegenet.com>

Hi Mario,

> Is the TwsitedQuotes package in your python path (can you import it) ?

Nope. That did it.

>
> Did you copy all the necessary files to this package dir
> (__init__.py, plugins.tml, quoteproto.py, quoters.py, quotetap.py) ?
>
> mario
>
>
>> Hi,
>>
>> I am working my way through "The Twisted Documentation" Jan 29, 2003
>> and
>> found  a problem with an example (or with me).  At
>> http://twistedmatrix.com/documents/howto/plugin  it says:
>> % mktap qotd
>> Saving qotd application to qotd.tap...
>> Saved.
>> % twistd -f qotd.tap
>> % nc localhost 8007
>> An apple a day keeps the doctor away.
>> % kill `cat twistd.pid`
>>
>>
>> The problem is when I run 'mktap qotd' I get the following error:
>> Unknown command: qotd
>> and then it prints the usage and options help.
>>
>> I am using python 2.2.1 and Twisted 1.0.3
>>
>> Any help would be appreciated.
>>
>> Ray
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


Ray





From nbm at mithrandr.moria.org  Thu Mar 13 15:59:00 2003
From: nbm at mithrandr.moria.org (Neil Blakey-Milner)
Date: Thu, 13 Mar 2003 22:59:00 +0200
Subject: [Twisted-Python] StikiWiki and textarea/woven/model problem.
In-Reply-To: <20030313141146.GA36050@mithrandr.moria.org>
References: <20030313141146.GA36050@mithrandr.moria.org>
Message-ID: <20030313205859.GA76980@mithrandr.moria.org>

On Thu 2003-03-13 (16:11), Neil Blakey-Milner wrote:
> Well, you can create documents.  Editing isn't as much editing as
> rewriting.  I'm using a textarea for input, and since I haven't looked
> all that much at woven, I can't figure out why its contents aren't
> replaced with the existing content (via getData on the given model).
> 
> So, at the moment, you can create a page (localhost:9080/asdf/create),
> type in some reST, and then go to localhost:9080/asdf and view it.  Then
> go to localhost:9080/asdf/create and rewrite it.  I want to figure out
> why the model's getData doesn't get involved.

Thanks to "wzZzy" for pointing out I don't have the view set.

Attached the minimal changes.

Basically, you need docutils (0.2) from docutils.sf.net, and cog (0.3)
from http://www.itamarst.org/software/cog/.

Then, create /tmp/cog.

Run.

Connect to localhost:9080.  Create pages by going to another page, and
adding the name you want and "/create".  So, to create
http://localhost:9080/asdf, go to http://localhost:9080/asdf/create.

You can edit any page by putting "/edit" at the end.  Or, use the link
at the bottom of the page to edit or create the page.

The main page is different - use http://localhost:9080/Index/edit for
it.

Night,

Neil
-- 
Neil Blakey-Milner
nbm at mithrandr.moria.org
-------------- next part --------------
#!/usr/local/bin/python
#
# Copyright (c) 2003 Neil Blakey-Milner
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#

from twisted.cred import service
from twisted.internet import app, reactor
from twisted.web import resource, server, static
from twisted.web.woven import model, page

from docutils import core, io
from StringIO import StringIO
from cog import db, base

entry_xhtml = """
<html>
    <head>
        <title model="title">Quotes Galore!</title>
        <style>.quote {color: green;}</style>
    </head>

    <body>
        <h1 model="title">New Page!</h1>

        <form action="">
            <textarea rows="15" cols="50" name="entry" model="entry"
                controller="Anything" view="Text">
                Something
            </textarea>
            <input type="submit" />
        </form>
    </body>
</html>
"""

default_css = """
/*
:Author: David Goodger
:Contact: goodger at users.sourceforge.net
:date: $Date: 2002/07/27 14:55:52 $
:version: $Revision: 1.12 $
:copyright: This stylesheet has been placed in the public domain.

Default cascading style sheet for the HTML output of Docutils.
*/

a.footnote-reference {
  font-size: smaller ;
  vertical-align: super }

a.target {
  color: blue }

a.toc-backref {
  text-decoration: none ;
  color: black }

dd {
  margin-bottom: 0.5em }

div.abstract {
  margin: 2em 5em }

div.abstract p.topic-title {
  font-weight: bold ;
  text-align: center }

div.attention, div.caution, div.danger, div.error, div.hint,
div.important, div.note, div.tip, div.warning {
  margin: 2em ;
  border: medium outset ;
  padding: 1em }

div.attention p.admonition-title, div.caution p.admonition-title,
div.danger p.admonition-title, div.error p.admonition-title,
div.warning p.admonition-title {
  color: red ;
  font-weight: bold ;
  font-family: sans-serif }

div.hint p.admonition-title, div.important p.admonition-title,
div.note p.admonition-title, div.tip p.admonition-title {
  font-weight: bold ;
  font-family: sans-serif }

div.dedication {
  margin: 2em 5em ;
  text-align: center ;
  font-style: italic }

div.dedication p.topic-title {
  font-weight: bold ;
  font-style: normal }

div.figure {
  margin-left: 2em }

div.footer, div.header {
  font-size: smaller }

div.system-messages {
  margin: 5em }

div.system-messages h1 {
  color: red }

div.system-message {
  border: medium outset ;
  padding: 1em }

div.system-message p.system-message-title {
  color: red ;
  font-weight: bold }

div.topic {
  margin: 2em }

h1.title {
  text-align: center }

h2.subtitle {
  text-align: center }

hr {
  width: 75% }

ol.simple, ul.simple {
  margin-bottom: 1em }

ol.arabic {
  list-style: decimal }

ol.loweralpha {
  list-style: lower-alpha }

ol.upperalpha {
  list-style: upper-alpha }

ol.lowerroman {
  list-style: lower-roman }

ol.upperroman {
  list-style: upper-roman }

p.caption {
  font-style: italic }

p.credits {
  font-style: italic ;
  font-size: smaller }

p.first {
  margin-top: 0 }

p.label {
  white-space: nowrap }

p.topic-title {
  font-weight: bold }

pre.literal-block, pre.doctest-block {
  margin-left: 2em ;
  margin-right: 2em ;
  background-color: #eeeeee }

span.classifier {
  font-family: sans-serif ;
  font-style: oblique }

span.classifier-delimiter {
  font-family: sans-serif ;
  font-weight: bold }

span.field-argument {
  font-style: italic }

span.interpreted {
  font-family: sans-serif }

span.option-argument {
  font-style: italic }

span.problematic {
  color: red }

table {
  margin-top: 0.5em ;
  margin-bottom: 0.5em }

table.citation {
  border-left: solid thin gray ;
  padding-left: 0.5ex }

table.docinfo {
  margin: 2em 4em }

table.footnote {
  border-left: solid thin black ;
  padding-left: 0.5ex }

td, th {
  padding-left: 0.5em ;
  padding-right: 0.5em ;
  vertical-align: baseline }

td.docinfo-name {
  font-weight: bold ;
  text-align: right }

td.field-name {
  font-weight: bold }
"""

class MStikiEntry(model.Model):
    def __init__(self, page, path, value):
        model.Model.__init__(self)
        self.page = page
        self.path = path
        self.value = value

    def getData(self):
        return self.value
        pass

    def setData(self, data):
        p = StikiPage(self.page.parent, self.path, data)
        self.page.parent.putChild(self.path, p)
        print "putChild with %s and %s on %s" % (self.path, p.id, self.page.parent.id)

class StikiPage(object, resource.Resource):
    __persistent__ = 1

    value = """
Uninitialised StikiPage
-----------------------

This StikiPage exists, but doesn't have any content in it."""

    def __init__(self, parent, path, value = None):
        self.errorpage = 0
        self.final = 0
        resource.Resource.__init__(self)
        self.parent = parent
        if value:
            self.value = value
        self.id = path
        base.setDirty(self, 1)

    def getChild(self, path, request):

        if path == "":
            return self

        fullpath = "/".join(request.acqpath[:-2])
        shortpath = request.acqpath[-2]

        self.model = {'entry': MStikiEntry(self, shortpath, self.value), 'title': "New StikiWiki Entry!"}

        if path == "edit":
            p = page.Page(self.model, templateFile="create.xhtml")
            p.template = entry_xhtml
            return p

        if path == "delete":
            return StikiErrorPage(self, path, request.uri)

        return StikiErrorPage(self, path, request.uri)

    def render(self, request):
        pub = core.Publisher()
        pub.set_reader('restructuredtext', None, 'restructuredtext')
        pub.set_writer('html')
        pub.set_options()
        pub.options._destination = ''
        pub.options.stylesheet = '/default.css'
        source = self.value
        uri = request.uri
        if not uri.endswith("/"):
            uri += "/"
        uri += "edit"
        source += """
        
`Edit this?`_
            
.. _`edit this?`: %s""" % (uri)
        pub.source = io.StringIO(pub.options, source = source)
        pub.destination = io.StringIO(pub.options)
        pub.options.report_level = 5
        pub.options.halt_level = 6
        warnings = StringIO()
        pub.options.warning_stream = warnings
        return pub.publish()

    def putChild(self, path, res):
        resource.Resource.putChild(self, path, res)
        base.setDirty(self, 1)

class StikiErrorPage(StikiPage):
    def __init__(self, parent, path, uri, final = 0):
        StikiPage.__init__(self, parent, path)
        self.errorpage = 1
        self.final = final
        self.value = """
No such entry
-------------

There is no such entry in this StikiWiki."""

        if not final:
            if not uri.endswith("/"):
                uri += "/"
            uri += "create"
            self.value += """  `Create it?`_
            
.. _`Create it?`: %s""" % (uri)

    def getChild(self, path, request):
        if self.final:
            return StikiErrorPage(self, path, request.uri, 1)

        if not self.final and path == "":
            self.final = 1
            return self

        fullpath = "/".join(request.acqpath[:-2])
        shortpath = request.acqpath[-2]

        self.model = {'entry': MStikiEntry(self, shortpath, self.value), 'title': "New StikiWiki Entry!"}

        if path == "create":
            p = page.Page(self.model, templateFile="create.xhtml")
            p.template = entry_xhtml
            return p

        #if path == "delete":
        #    return StikiErrorPage(self, path, request.uri)

        #if self.errorpage:
        #    self.final = 1

        return StikiErrorPage(self, path, request.uri, 1)


class StikiSite(object, resource.Resource):
    __persistent__ = 1

    def __init__(self):
        resource.Resource.__init__(self)
        self.id = "site"

    def getChild(self, path, request):
        if path == "":
            return self.getChildWithDefault("Index", request)
        return StikiErrorPage(self, path, request.uri)

    def putChild(self, path, res):
        resource.Resource.putChild(self, path, res)
        base.setDirty(self, 1)

class StikiService(app.ApplicationService):
    def startService(self):
        app.ApplicationService.startService(self)
        reactor.callLater(0, self.addDefaults)

    def addDefaults(self):
        db = self.serviceParent.getServiceNamed("cog").db

        if not db.registry.has_key("stikisite"):
            self.ss = StikiSite()
            db.registry.set("stikisite", self.ss)
        else:
            self.ss = db.registry.get("stikisite")
            self.ss._load()

        self.serviceParent.listenTCP(9080, server.Site(self.ss))

        if "Index" not in self.ss.listStaticNames():
            self.ss.putChild("Index", StikiPage(self.ss, "Index",
                """
Hello World!
-----------

Hey there!"""))

        if "default.css" not in self.ss.listStaticNames():
            self.ss.putChild("default.css", static.Data(default_css, "text/css"))

        db.flush()
        del db

class CogService(app.ApplicationService):
    def __init__(self, path, serviceName, serviceParent=None):
        app.ApplicationService.__init__(self, serviceName, serviceParent=serviceParent)
        self.path = path

    def startService(self):
        self.db = db.openDatabase(self.path)
        self.scheduledWork = reactor.callLater(60, self.doPeriodicWork)

    def stopService(self):
        self.scheduledWork.cancel()
        del self.scheduledWork
        self.db.close()
        del self.db

    def doPeriodicWork(self):
        delay = self.db.do_periodic_work()
        self.scheduledWork = reactor.callLater(delay, self.doPeriodicWork)

    def commit(self):
        self.db.flush()

def main():
    a = app.Application("stikiwiki")
    s = StikiService("stiki", a)
    c = CogService("/tmp/cog/", "cog", a)
    a.run(save=0)

if __name__ == "__main__":
    main()

From cce at clarkevans.com  Fri Mar 14 01:50:03 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Fri, 14 Mar 2003 06:50:03 +0000
Subject: [Twisted-Python] more thoughts on resumable async data flows
Message-ID: <20030314065003.GA99373@doublegemini.com>

Howdy.   I've made quite a few changes to flow.py and it's 
quickly approaching maturity.   To summarize, flow.py is a
way to express sequential, streaming data flows that are 
interruptable as a collection of small, atomic operations.
This is needed since sometimes an operation must block,
flow.py takes care of resuming your flow at a later time.

It's trivial, but here is an example...

    def printResult(data): print data
    def addOne(data): return  data+1
    def finished(): print "finished"
    def dataSource(data):  return [1, 1+data, 1+data*2]

    a = Flow()
    a.addBranch(dataSource, finished)
    a.addCallable(addOne)
    a.addCallable(printResult)
    a.execute(2)
    a.execute(8)

The above code constructs a flow, starting with a
'branch' operation that generates a series of events,
in this case, the lists [1,3,5] and then in a 
second execution, [1,9,17].  For each one of these 
events, a function addOne is called on them, and 
then the output of that function is directed to be printed. 

This mechanism works with generators...

    def simpleGenerator(data):
        for x in range(data):
            yield x

    b = Flow()
    b.addBranch(simpleGenerator)
    b.addCallable(printResult)
    b.execute(5)

While this may not be all that useful, what Flow brings
to the table is the ability to PauseFlow within a 
processing stage, for example

    class simpleIterator:
        def __init__(self, data):
            self.data = data
        def __iter__(self):
            return self
        def next(self):
            print "."
            if self.data < 0: raise StopIteration
            ret = self.data
            self.data -= 1
            #
            # imagine a blocking operation here... sometime
            if ret % 2:
                raise PauseFlow   # <= Goes to main event loop
            return ret

    c = Flow()
    c.addBranch(simpleIterator)
    c.addCallable(printResult)
    c.execute(5)

The above code produces 4, 2, 0 ; while this may not
be all that interesting, if there were N stages above
this code, they would all be resumed properly.  By 
tossing PauseFlow, the entire Flow event loop is 
stopped, and a reactor.callLater(0, loop-again) is
called; giving other events in the queue to work.

Thus, the flow construct provides a way to not only manage
a bunch of useful code snippets into a process; but more
importantly gives a way that the entire flow can be 
interruped and then resumed later when data arrives.

Anyway, it's in the sandbox if anyone wants to play...

Clark

P.S.  Unfortunately, it looks like PauseFlow doesn't
work in the context of a generator... pity.  Hopefully
I'm doing something wrong.





From kwaker at uch.net  Fri Mar 14 02:03:29 2003
From: kwaker at uch.net (Dmitry Litovchenko)
Date: Fri, 14 Mar 2003 09:03:29 +0200
Subject: [Twisted-Python] defer.AlreadyCalled error
Message-ID: <14142272484.20030314090329@uch.net>

Hello, all

Using my handcrafted socks5 client I've got the situation where

-- 
Best regards,
 Dmitry                          mailto:kwaker at uch.net




From kwaker at uch.net  Fri Mar 14 02:06:37 2003
From: kwaker at uch.net (Dmitry Litovchenko)
Date: Fri, 14 Mar 2003 09:06:37 +0200
Subject: [Twisted-Python] defer.AlreadyCalled error
Message-ID: <15242461005.20030314090637@uch.net>

Hello, all

Using my handcrafted socks5 client I've got the situation where my
ClientFactory.clientConnectionLost and clientConnectionFailed get
execution after errback is already called, so I get
defer.AlreadyCalled error.

The fastest thing that solves it was try/except with raising error
again if its not AlreadyCalled.

Is this solution correct or I should inherit some another method of
ClientFactory or ClientProtocol to intercept this situation before its
AlreadyCalled.

-- 
Best regards,
 Dmitry                          mailto:kwaker at uch.net




From magnus at thinkware.se  Fri Mar 14 07:33:28 2003
From: magnus at thinkware.se (Magnus Lycka)
Date: Fri, 14 Mar 2003 13:33:28 +0100
Subject: [Twisted-Python] EuroPython 2003
Message-ID: <5.1.0.14.0.20030314132808.03685d00@www.thinkware.se>

Are there any Twisted plans for EuroPython 2003 in June
among the gurus? I'd really like to see a Twisted tutorial
there.


-- 
Magnus Lycka, Thinkware AB
Alvans vag 99, SE-907 50 UMEA, SWEDEN
phone: int+46 70 582 80 65, fax: int+46 70 612 80 65
http://www.thinkware.se/  mailto:magnus at thinkware.se




From ivo at amaze.nl  Fri Mar 14 09:13:55 2003
From: ivo at amaze.nl (Ivo van der Wijk)
Date: Fri, 14 Mar 2003 15:13:55 +0100
Subject: [Twisted-Python] Re: Twisted and wxPython on windows
In-Reply-To: <b4mpf4$14u$1@main.gmane.org>; from lafou@wanadoo.fr on Wed, Mar 12, 2003 at 08:59:46AM +0100
References: <20030311152745.M8571@amaze.nl> <200303110946.23356.uwe@oss4u.com> <b4mpf4$14u$1@main.gmane.org>
Message-ID: <20030314151355.F8571@amaze.nl>

Thomas, could you please send me a link to your win32guireactor / posting?
I'm not able to find anything google.

Also, I'm not really impressed by the basic Twisted support for wxPython -
it basically does a polling loop. Are better solutions impossible?

Cheers

	Ivo

-- 
Drs. I.R. van der Wijk                                      -=-              
Brouwersgracht 132                             Amaze Internet Services V.O.F.
1013 HA Amsterdam, NL                                       -=-              
T +31-20-4688336         F +31-20-4688337        Linux/Web/Zope/SQL/MMBase   
W http://www.amaze.nl    E info at amaze.nl             Network Solutions        
W http://vanderwijk.info E ivo at amaze.nl                 Consultancy          
PGP http://vanderwijk.info/pgp                              -=-              



From theller at python.net  Fri Mar 14 10:03:46 2003
From: theller at python.net (Thomas Heller)
Date: 14 Mar 2003 16:03:46 +0100
Subject: [Twisted-Python] Re: Twisted and wxPython on windows
References: <20030311152745.M8571@amaze.nl> <200303110946.23356.uwe@oss4u.com> <b4mpf4$14u$1@main.gmane.org> <20030314151355.F8571@amaze.nl>
Message-ID: <fzpq9ei5.fsf@python.net>

[posted and mailed]
Ivo van der Wijk <ivo at amaze.nl> writes:

> Thomas, could you please send me a link to your win32guireactor / posting?
> I'm not able to find anything google.

http://twistedmatrix.com/pipermail/twisted-python/2003-February/002911.html

> 
> Also, I'm not really impressed by the basic Twisted support for wxPython -
> it basically does a polling loop. Are better solutions impossible?
> 

IMO the twisted wxreactor (or what it's called) does it wrong (Note that
I'm only talking about Windows here, I have no clue about Linux or other
systems): it tries to integrate the wxPython eventloop into twisted's
event loop, while it should be exactly reverse: the twisted 'events'
must be passed through wxPython's event loop, which is a Windows
messageloop.  See also the description in the post mentioned above.
And it *should* also work unchanged with other GUI toolkits, Tkinter
for example, although I didn't try this.

But win32guireactor is incomplete and not finished, read the source to
find out more.

Thomas




From nbm at mithrandr.moria.org  Fri Mar 14 10:23:52 2003
From: nbm at mithrandr.moria.org (Neil Blakey-Milner)
Date: Fri, 14 Mar 2003 17:23:52 +0200
Subject: [Twisted-Python] Redirecting after form completion using woven
Message-ID: <20030314152352.GA90615@mithrandr.moria.org>

Hi,

Two things:

Firstly, using Twisted 1.0.3, when form submissions has occurred, it
seems that the getData to build the form is done before the setData to
make the changes.  This means that the _old_ information is in the
forms, which is somewhat confusing.  For an example, use stikiwiki and
edit a page.  It's entirely possible I'm using things incorrectly,
though.

Secondly, how would I organise for a redirect to another page after my
form has been parsed and data handled with setData?  Again, stikiwiki
probably wants to redirect people to the page they've just edited or
created instead of giving them an opportunity to edit it again.

Thanks,

Neil
-- 
Neil Blakey-Milner
nbm at mithrandr.moria.org



From twisted at itamarst.org  Fri Mar 14 11:20:13 2003
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 14 Mar 2003 11:20:13 -0500
Subject: [Twisted-Python] Re: Twisted and wxPython on windows
In-Reply-To: <fzpq9ei5.fsf@python.net>
References: <20030311152745.M8571@amaze.nl>
	<200303110946.23356.uwe@oss4u.com>
	<b4mpf4$14u$1@main.gmane.org>
	<20030314151355.F8571@amaze.nl>
	<fzpq9ei5.fsf@python.net>
Message-ID: <20030314112013.75d3cc18.twisted@itamarst.org>

On 14 Mar 2003 16:03:46 +0100
Thomas Heller <theller at python.net> wrote:

> IMO the twisted wxreactor (or what it's called) does it wrong (Note
> that I'm only talking about Windows here, I have no clue about Linux
> or other systems): it tries to integrate the wxPython eventloop into
> twisted's event loop, while it should be exactly reverse: the twisted
> 'events' must be passed through wxPython's event loop, which is a
> Windows messageloop.  See also the description in the post mentioned
> above. And it *should* also work unchanged with other GUI toolkits,
> Tkinter for example, although I didn't try this.

I will at some point investigate this as a replacement for the current
wx support.



From dp at twistedmatrix.com  Fri Mar  7 13:35:18 2003
From: dp at twistedmatrix.com (Donovan Preston)
Date: Fri, 7 Mar 2003 10:35:18 -0800
Subject: [Twisted-Python] Redirecting after form completion using woven
In-Reply-To: <20030314152352.GA90615@mithrandr.moria.org>
Message-ID: <8BE6AEC0-50CB-11D7-9B7F-000393B3EC2C@twistedmatrix.com>


On Friday, March 14, 2003, at 07:23 AM, Neil Blakey-Milner wrote:

> Hi,
>
> Two things:
>
> Firstly, using Twisted 1.0.3, when form submissions has occurred, it
> seems that the getData to build the form is done before the setData to
> make the changes.  This means that the _old_ information is in the
> forms, which is somewhat confusing.  For an example, use stikiwiki and
> edit a page.  It's entirely possible I'm using things incorrectly,
> though.

Here is what is happening: Since the views and controllers are 
triggered by traversing the DOM tree, if the view is above the 
controller, the view will render with the old data before the 
controller gets a chance to update the model with the new data. There 
are a couple of solutions, and the redirect is the best solution for 
you.

1) Redirect the user after a successful controller commit, either to 
the same page, or a different page. This causes the page to get 
rerendered, and the new data will be available.

2) Notify the model that it's data has changed. The model will pass the 
notification on to the views which rely on the data, and the views will 
rerender themselves. There is an example of this technique in 
NewReality, and also in the unittests for woven.

>
> Secondly, how would I organise for a redirect to another page after my
> form has been parsed and data handled with setData?  Again, stikiwiki
> probably wants to redirect people to the page they've just edited or
> created instead of giving them an opportunity to edit it again.

Here's some code I use to do redirects; you can modify it for your 
needs. The only issue then is calling this code when the controller 
commits; if you're using input.Anything, you don't really have control 
over what happens when the controller gets some data and calls setData. 
I'll reread your code and come up with a suggestion.

def redirectToParent(request, now=1):
     """Redirect the current request to the immediate parent URL of the
     current request URL. Useful for redirecting from a tab URL to the
     main tab.
     """
     parent = request.pathRef().parentRef()
     method, host, port = request.getHost()
     url = "http%s://%s%s/%s/" % (method is 'SSL' and 's' or '',
         getattr(request.site, 'serverName', host),
         getattr(request.site, 'serverPort', port) is 80 and '' or ':' + 
str(port),
             '/'.join(parent.path))
     if now:
         request.redirect(url)
     return url


>
> Thanks,
>
> Neil
> -- 
> Neil Blakey-Milner
> nbm at mithrandr.moria.org
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: text/enriched
Size: 3709 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030307/960552ce/attachment.bin 

From andrew-twisted at puzzling.org  Fri Mar 14 20:29:54 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sat, 15 Mar 2003 12:29:54 +1100
Subject: [Twisted-Python] defer.AlreadyCalled error
In-Reply-To: <15242461005.20030314090637@uch.net>
References: <15242461005.20030314090637@uch.net>
Message-ID: <20030315012954.GH4315@frobozz.local>

On Fri, Mar 14, 2003 at 09:06:37AM +0200, Dmitry Litovchenko wrote:
> Hello, all
> 
> Using my handcrafted socks5 client I've got the situation where my
> ClientFactory.clientConnectionLost and clientConnectionFailed get
> execution after errback is already called, so I get
> defer.AlreadyCalled error.
> 
> The fastest thing that solves it was try/except with raising error
> again if its not AlreadyCalled.
> 
> Is this solution correct or I should inherit some another method of
> ClientFactory or ClientProtocol to intercept this situation before its
> AlreadyCalled.

Your solution is fine.

I can think of another approach though, that is almost certainly too complex
and overkill for your problem, just in case you are interested:

Perhaps you could use a DeferredList instead, with fireOnOneCallback=1 (so
that results get passed immediately) and fireOnOneErrback=1 (so that errors
happen immediately).  

So what you'd do is create a DeferredList with two Deferreds:
  1. the Deferred you are using already
  2. a new Deferred that clientConnectionLost/Failed will call

Then add your callbacks and errbacks to the DeferredList instead of the
original Deferred.  DeferredList with fireOnOneErrback=1 will call its
errbacks as soon as any of its Deferreds errback, but won't raise
AlreadyCalled error no matter how many of its Deferreds errback.

The reason for also setting fireOnOneCallback=1 is to ensure that the
DeferredList doesn't wait for the second Deferred to callback, which should
never happen.

Basically, a DeferredList([...], fireOnOneCallback=1, fireOnOneErrback=1)
has the odd behaviour of effectively taking the first result (good or bad)
to arrive, and ignoring the rest.

In short, I think you're better off with the try/except :)

-Andrew.




From ivo at amaze.nl  Sat Mar 15 06:31:22 2003
From: ivo at amaze.nl (Ivo van der Wijk)
Date: Sat, 15 Mar 2003 12:31:22 +0100
Subject: [Twisted-Python] Re: Twisted and wxPython on windows
In-Reply-To: <fzpq9ei5.fsf@python.net>; from theller@python.net on Fri, Mar 14, 2003 at 04:03:46PM +0100
References: <20030311152745.M8571@amaze.nl> <200303110946.23356.uwe@oss4u.com> <b4mpf4$14u$1@main.gmane.org> <20030314151355.F8571@amaze.nl> <fzpq9ei5.fsf@python.net>
Message-ID: <20030315123122.H8571@amaze.nl>

On Fri, Mar 14, 2003 at 04:03:46PM +0100, Thomas Heller wrote:
> [posted and mailed]
> Ivo van der Wijk <ivo at amaze.nl> writes:
> 
> > Thomas, could you please send me a link to your win32guireactor / posting?
> > I'm not able to find anything google.
> 
> http://twistedmatrix.com/pipermail/twisted-python/2003-February/002911.html
> 
> > 
> > Also, I'm not really impressed by the basic Twisted support for wxPython -
> > it basically does a polling loop. Are better solutions impossible?
> > 
> 
> IMO the twisted wxreactor (or what it's called) does it wrong (Note that
> I'm only talking about Windows here, I have no clue about Linux or other
> systems): it tries to integrate the wxPython eventloop into twisted's
> event loop, while it should be exactly reverse: the twisted 'events'
> must be passed through wxPython's event loop, which is a Windows
> messageloop.  

I agree - this is how the other reactors (gtk, qt) work as well. I assume
wxWindows doesn't have enough 'hooks' by default to create a reactor for it?

> See also the description in the post mentioned above.
> And it *should* also work unchanged with other GUI toolkits, Tkinter
> for example, although I didn't try this.
> 
> But win32guireactor is incomplete and not finished, read the source to
> find out more.

Well, I'm completely unfamiliar with the win32 api. Could you give any hints
on what functionality is lacking? 

Cheers

	Ivo


-- 
Drs. I.R. van der Wijk                                      -=-              
Brouwersgracht 132                             Amaze Internet Services V.O.F.
1013 HA Amsterdam, NL                                       -=-              
T +31-20-4688336         F +31-20-4688337        Linux/Web/Zope/SQL/MMBase   
W http://www.amaze.nl    E info at amaze.nl             Network Solutions        
W http://vanderwijk.info E ivo at amaze.nl                 Consultancy          
PGP http://vanderwijk.info/pgp                              -=-              



From fig at monitor.net  Sat Mar 15 12:13:45 2003
From: fig at monitor.net (Stephen Figgins)
Date: Sat, 15 Mar 2003 11:13:45 -0600
Subject: [Twisted-Python] Need a mother?
Message-ID: <3E735F49.2030508@monitor.net>

I am evaluating twisted matrix as the framework for an enterprise 
solution, a workflow/inventory/point of sale, does-all-kinds-of-things 
system.  It needs to be highly secure, supporting SSL and encryption, 
and some decent Auth utilities.   Our inclination is toward an n-tier 
solution for each store, with some connectivity between stores in a 
chain or under some kind of central management.

Because there are many pieces to this puzzle, lots of optional services 
a system may need to provide and some specialized interfaces, my thought 
has been to take a component approach.  This way we can drop in new 
components or update components as needed.

We would like some way to centrally manage and load balance those 
components, within a single host as well as over multiple hosts.  I am 
beginning to grasp how PB works, some. What I don't see is any kind of 
central registry for those components.  It looks like the client needs 
to know the host and port of the component it wants in order to be able 
to use it.   It looks to me like twisted.sister is meant to fulfill both 
of these functions, centralizing login, load balancing, name services, 
connecting clients to components.

I think a mother is just the thing I need.  Is it?

If so, then how should I go about learning to use it.  (I can create a 
parent tap easily enough with mktap, but I am uncertain how to customize 
it for our own authentication and encryption needs.)  Anyone have 
examples of twisted sister in action?

How far off are we from a stable implementation of twisted.sister?  Our 
goal for the system we are developing is to roll it out in about a year. 
      It would be nice if the framework components we used were at least 
semi-stable.

Based on this very rough description, does twisted sound like the 
framework for me?

Thanks for any assistance!

-Stephen




From exarkun at intarweb.us  Sun Mar 16 13:53:54 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Sun, 16 Mar 2003 13:53:54 -0500
Subject: [Twisted-Python] Need a mother?
In-Reply-To: <3E735F49.2030508@monitor.net>
References: <3E735F49.2030508@monitor.net>
Message-ID: <20030316185354.GA20366@meson.dyndns.org>

On Sat, Mar 15, 2003 at 11:13:45AM -0600, Stephen Figgins wrote:
> I am evaluating twisted matrix as the framework for an enterprise 
> solution, a workflow/inventory/point of sale, does-all-kinds-of-things 
> system.  It needs to be highly secure, supporting SSL and encryption, 
> and some decent Auth utilities.   Our inclination is toward an n-tier 
> solution for each store, with some connectivity between stores in a 
> chain or under some kind of central management.
> 
> Because there are many pieces to this puzzle, lots of optional services 
> a system may need to provide and some specialized interfaces, my thought 
> has been to take a component approach.  This way we can drop in new 
> components or update components as needed.
> 
> We would like some way to centrally manage and load balance those 
> components, within a single host as well as over multiple hosts.  I am 
> beginning to grasp how PB works, some. What I don't see is any kind of 
> central registry for those components.  It looks like the client needs 
> to know the host and port of the component it wants in order to be able 
> to use it.   It looks to me like twisted.sister is meant to fulfill both 
> of these functions, centralizing login, load balancing, name services, 
> connecting clients to components.
> 
> I think a mother is just the thing I need.  Is it?
> 
> If so, then how should I go about learning to use it.  (I can create a 
> parent tap easily enough with mktap, but I am uncertain how to customize 
> it for our own authentication and encryption needs.)  Anyone have 
> examples of twisted sister in action?
> 
> How far off are we from a stable implementation of twisted.sister?  Our 
> goal for the system we are developing is to roll it out in about a year. 
>      It would be nice if the framework components we used were at least 
> semi-stable.

  Since no one else has jumped in yet, I'll tell you what I know (not a
lot).  As it stands now, Twisted.sister has a problem with authorizers. 
Some stuff it depends on got changed around, and no one brought Sister up to
date.  I posted a patch that fixes it to the list a while back, but it
seemed like a bad hack around a more basic problem.  No one responded, so I
never checked it in (I can make it available if you want and can't find it
in the archives).

  This is just one symptom of the real problem, I think: Twisted.sister has
no real users right now.  Twisted practices XP development most of the time,
which means the code that no one really has a use case for can sometimes get
into pretty bad shape.

  I might be overstating the problems with Sister - as I said, I don't know
too much about it - but in any case, I think many of the other features
Twisted offers *do* make it suited for your goal.  With a real user with
real use cases, Sister would definitely see improvement (You'd yell at us
when it broke, or if you're more proactive than that, you'd give us unit
tests for it ;).

  So what's my point?  Ahh, Twisted is good for this, but Sister might not
be ready for what you need it to do, because no one has asked Sister to do
*anything* before.  Give it a nudge in the right direction and it will
probably turn into what you need, or if it doesn't, doing what you need
"from scratch" (on top of Twisted) shouldn't be much more effort.

  Hope this helps,

  Jp
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030316/abaf62e0/attachment.pgp 

From sean at twistedmatrix.com  Sun Mar 16 14:21:21 2003
From: sean at twistedmatrix.com (Sean Riley)
Date: Sun, 16 Mar 2003 13:21:21 -0600
Subject: [Twisted-Python] Need a mother?
In-Reply-To: <20030316185354.GA20366@meson.dyndns.org>
Message-ID: <HOEEKPCOKELHCNIJNMAGMECKCKAA.sean@twistedmatrix.com>

A little history about the sister code...

I (along with Glyph) was the original developer of this code for a game
project. At one stage, it was fully integrated with authorizers and
enterprise and I had distributed logins working, spawning of "game servers"
on multiple machines in a cluster, object loading from a database, and
centralized locking of resources across the distributed system.  I had a set
of twisted servers running my game world across three different machines on
different operating systems almost transparently to the application code.

Unfortunately, I am no longer at that company on that project and no-one is
using or really maintaining the sister code. Jp is right in saying that it
needs users - it really also needs developers. It's probably not a huge task
to bring it back up to date, but i admit I haven't looked at the code in
about four or five months and don't have the time or motivation to spend on
it these days, but i would be willing to answer any questions if that is
useful.

Also, it's original purpose was actually more to distribute a single type of
application rather than to connect a set of different applications as the
origin poster suggests.

Sean.

-----Original Message-----
From: twisted-python-admin at twistedmatrix.com
[mailto:twisted-python-admin at twistedmatrix.com]On Behalf Of Jp Calderone
Sent: Sunday, March 16, 2003 12:54 PM
To: twisted-python at twistedmatrix.com
Subject: Re: [Twisted-Python] Need a mother?


On Sat, Mar 15, 2003 at 11:13:45AM -0600, Stephen Figgins wrote:
> I am evaluating twisted matrix as the framework for an enterprise
> solution, a workflow/inventory/point of sale, does-all-kinds-of-things
> system.  It needs to be highly secure, supporting SSL and encryption,
> and some decent Auth utilities.   Our inclination is toward an n-tier
> solution for each store, with some connectivity between stores in a
> chain or under some kind of central management.
>
> Because there are many pieces to this puzzle, lots of optional services
> a system may need to provide and some specialized interfaces, my thought
> has been to take a component approach.  This way we can drop in new
> components or update components as needed.
>
> We would like some way to centrally manage and load balance those
> components, within a single host as well as over multiple hosts.  I am
> beginning to grasp how PB works, some. What I don't see is any kind of
> central registry for those components.  It looks like the client needs
> to know the host and port of the component it wants in order to be able
> to use it.   It looks to me like twisted.sister is meant to fulfill both
> of these functions, centralizing login, load balancing, name services,
> connecting clients to components.
>
> I think a mother is just the thing I need.  Is it?
>
> If so, then how should I go about learning to use it.  (I can create a
> parent tap easily enough with mktap, but I am uncertain how to customize
> it for our own authentication and encryption needs.)  Anyone have
> examples of twisted sister in action?
>
> How far off are we from a stable implementation of twisted.sister?  Our
> goal for the system we are developing is to roll it out in about a year.
>      It would be nice if the framework components we used were at least
> semi-stable.

  Since no one else has jumped in yet, I'll tell you what I know (not a
lot).  As it stands now, Twisted.sister has a problem with authorizers.
Some stuff it depends on got changed around, and no one brought Sister up to
date.  I posted a patch that fixes it to the list a while back, but it
seemed like a bad hack around a more basic problem.  No one responded, so I
never checked it in (I can make it available if you want and can't find it
in the archives).

  This is just one symptom of the real problem, I think: Twisted.sister has
no real users right now.  Twisted practices XP development most of the time,
which means the code that no one really has a use case for can sometimes get
into pretty bad shape.

  I might be overstating the problems with Sister - as I said, I don't know
too much about it - but in any case, I think many of the other features
Twisted offers *do* make it suited for your goal.  With a real user with
real use cases, Sister would definitely see improvement (You'd yell at us
when it broke, or if you're more proactive than that, you'd give us unit
tests for it ;).

  So what's my point?  Ahh, Twisted is good for this, but Sister might not
be ready for what you need it to do, because no one has asked Sister to do
*anything* before.  Give it a nudge in the right direction and it will
probably turn into what you need, or if it doesn't, doing what you need
"from scratch" (on top of Twisted) shouldn't be much more effort.

  Hope this helps,

  Jp




From cce at clarkevans.com  Mon Mar 17 01:42:17 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Mon, 17 Mar 2003 06:42:17 +0000
Subject: [Twisted-Python] Re-Occuring Operations
Message-ID: <20030317064217.GA9305@doublegemini.com>

Hello.   I was wondering if there is anything which handles 
re-occuring functions; that is, an auto-rescheduler or
something of that nature.   Here is what I came up with,
I'm sure there is a shorter 'lambda' form, but I was
going for clarity here.


  class MultiRun:
      """ apply a callable while it returns true """
      def __init__(self, callable, waitInterval = 0):
          self.callable = callable
          self.waitInterval = waitInterval
          self.iterate(starting = 1)
      def iterate(self, starting = 0):
          if starting or self.callable():
              from twisted.internet import reactor
              reactor.callLater(self.waitInterval, self.iterate)


Something like this would be useful, it's already emerged in
two different contexts in my code:

   (a) a background operation (which never returns true)
       that runs every 5 minutes, 

   (b) an operation which keeps pooling a resource, if 
       the resource is busy it returns true, otherwise 
       it processes the resource and returns false to
       signal that it is done

Perhaps calling this an "Operation" would be good.

Best,

clark



From andrew-twisted at puzzling.org  Mon Mar 17 07:46:45 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 17 Mar 2003 23:46:45 +1100
Subject: [Twisted-Python] Re-Occuring Operations
In-Reply-To: <20030317064217.GA9305@doublegemini.com>
References: <20030317064217.GA9305@doublegemini.com>
Message-ID: <20030317124645.GC22628@frobozz.local>

On Mon, Mar 17, 2003 at 06:42:17AM +0000, Clark C. Evans wrote:
> Hello.   I was wondering if there is anything which handles 
> re-occuring functions; that is, an auto-rescheduler or
> something of that nature.   Here is what I came up with,
> I'm sure there is a shorter 'lambda' form, but I was
> going for clarity here.

There is.  This is copied straight from doc/howto/time.html:

"""
    If we want a task to run every X seconds repeatedly, we can
    just re-add it every time it's run:

        from twisted.internet import reactor
        
        def runEverySecond():
            print "a second has passed"
            reactor.callLater(1, runEverySecond)
        
        reactor.callLater(1, runEverySecond)
"""


>   class MultiRun:
>       """ apply a callable while it returns true """
>       def __init__(self, callable, waitInterval = 0):
>           self.callable = callable
>           self.waitInterval = waitInterval
>           self.iterate(starting = 1)
>       def iterate(self, starting = 0):
>           if starting or self.callable():
>               from twisted.internet import reactor
>               reactor.callLater(self.waitInterval, self.iterate)

Or:

    from __future__ import nested_scopes  # For you retro Python 2.1 hippies
    
    def multiRun(interval, func):
        from twisted.internet import reactor
        def iterate():
            if func():
                reactor.callLater(interval, iterate)
        iterate()

Except to fit in with the Twisted naming scheme, you'd have to call it
'mindlessReruns' ;)

On the other hand, being a fairly straightforward six-line function, it
probably doesn't need to be in Twisted.

> Something like this would be useful, it's already emerged in
> two different contexts in my code:
> 
>    (a) a background operation (which never returns true)
>        that runs every 5 minutes, 

That's amply catered for by the first example, possibly with a try/finally
thrown in.

>    (b) an operation which keeps pooling a resource, if 
>        the resource is busy it returns true, otherwise 
>        it processes the resource and returns false to
>        signal that it is done

I don't quite understand your terminology.  I think you mean there's a queue
of operations that can only be processed if there's some sort of resource
available to process them, and you wish to occasionally poll the resource
pool to see if there's one free.  If so, it's probably better to arrange
your code to avoid polling, i.e. make the resource pool check the queue
automatically when a resource is freed.  This reduces latency and is usually
simpler.

Regardless, I'm not sure this deserves or requires special support in
Twisted.  Merely documenting the necessary idioms is probably better.  After
all there are lots of possible small variations (e.g. dynamically varying
the interval based on the function's return value) that would be tedious to
build into a generic class or function, but are dead simple to build into
your own six-line implementation. 

Or perhaps I'm wrong, and there's a nice class with lots of use-cases just
waiting to be implemented :)

-Andrew.




From andrew-twisted at puzzling.org  Mon Mar 17 08:19:16 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 18 Mar 2003 00:19:16 +1100
Subject: [Twisted-Python] Re-Occuring Operations
In-Reply-To: <20030317124645.GC22628@frobozz.local>
References: <20030317064217.GA9305@doublegemini.com> <20030317124645.GC22628@frobozz.local>
Message-ID: <20030317131916.GD22628@frobozz.local>

On Mon, Mar 17, 2003 at 11:46:45PM +1100, Andrew Bennetts wrote:
> 
> Or perhaps I'm wrong, and there's a nice class with lots of use-cases just
> waiting to be implemented :)

Oh, and I forgot to mention: we used to have such a beast, called Delayed.
It was awkward and confusing.  So any solution you propose will have to, as
a minimum, suck less than Delayeds did :)

-Andrew.




From fig at monitor.net  Mon Mar 17 09:47:28 2003
From: fig at monitor.net (Stephen R. Figgins)
Date: Mon, 17 Mar 2003 08:47:28 -0600
Subject: [Twisted-Python] Thinking Twisted (was Re: Need a mother?)
In-Reply-To: <HOEEKPCOKELHCNIJNMAGMECKCKAA.sean@twistedmatrix.com>
Message-ID: <BA9B3C20.D527%fig@monitor.net>

Thanks for your responses, Jp and  Sean.

I hear you saying that if we need twisted.sister, we'll need to do some work
on it first.  It's a fixer-upper.  If we use it, and contribute to its
development, we might get some help from the twisted developers, who have
largely neglected it because no one is currently using it.

It also sounds like the primary task I want to put it towards, a central
naming service/message queue sort of thing may not be the right match for
twisted.sister.  Though if fixed up, I sounds like it could load balance
such a registry or an overtaxed component on my system.

I am beginning to question my model of what the system should look like.
This function seems basic to a distributed component system with a dozen or
more components.   Is anyone using Twisted.spread to implement such a
system?

Maybe my thoughts on this are too patterned on Corba.  I am seeing Twisted
as a lightweight asynchronous event-driven alternative to Corba, so I keep
trying to map it to that: where is the POA?  Where is the name server?

I would sure appreciate any help wrapping my head around the twisted way of
doing things.  The problem set is:

I want to create an n-tier application to manage stores in a vertical market
that has many changing yet strict federally mandated security requirements,
many interfaces to a variety of equipment (signature capture devices,
dispensing devices, etc.), and interoperate with different B2B business
partners.   

There is a limited set of services all stores will need, but each
store/chain will have its own service needs.  All stores/chains will need a
common subset of services, but will also need a specialized set of extended
services depending on their equipment, workflow and business partners.  The
clients need to be GUI and curses applications on Windows/Linux though
possibly with an option for some thin web browser clients.   Instead of
thousands of clients hitting a central application intermittently (like a
web server) Each store will have maybe a couple dozen clients that will
interact with the server almost constantly throughout the day.

It would be nice if the system could scale up (to multi-processor systems)
as well as out (to a server farm) for larger chains which may want central
hosting (though probably serving no more than a couple hundred stores.)


What would be the twisted approach to this?


Thanks, 

Stephen




From twisted at itamarst.org  Mon Mar 17 11:07:08 2003
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 17 Mar 2003 11:07:08 -0500
Subject: [Twisted-Python] Thinking Twisted (was Re: Need a mother?)
In-Reply-To: <BA9B3C20.D527%fig@monitor.net>
References: <HOEEKPCOKELHCNIJNMAGMECKCKAA.sean@twistedmatrix.com>
	<BA9B3C20.D527%fig@monitor.net>
Message-ID: <20030317110708.3b50c95d.twisted@itamarst.org>

On Mon, 17 Mar 2003 08:47:28 -0600
"Stephen R. Figgins" <fig at monitor.net> wrote:

> Maybe my thoughts on this are too patterned on Corba.  I am seeing
> Twisted as a lightweight asynchronous event-driven alternative to
> Corba, so I keep trying to map it to that: where is the POA?  Where is
> the name server?

Standard Twisted Feature Request Answer:

Basically, no one has written one yet. Unfortanutely, we don't have the
time to write every single a thing a distributed system might need, this
being an open source project. So when someone eventually needs one, it
will get written. Probably by them (i.e. by you?) although you could
also pay someone to implement it. Otherwise you could just wait until
one of the developers feels the need for a lookup service.

Oh, and I'd love if it could use zeroconf in addition to a PB based
lookup mechanism.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting
***> Stop the war: http://unitedforpeace.org/ <***



From bob at redivi.com  Mon Mar 17 11:51:45 2003
From: bob at redivi.com (Bob Ippolito)
Date: Mon, 17 Mar 2003 11:51:45 -0500
Subject: [Twisted-Python] Thinking Twisted (was Re: Need a mother?)
In-Reply-To: <20030317110708.3b50c95d.twisted@itamarst.org>
Message-ID: <BCDFA67C-5898-11D7-BA18-000A95686CD8@redivi.com>

On Monday, Mar 17, 2003, at 11:07 America/New_York, Itamar 
Shtull-Trauring wrote:

> Oh, and I'd love if it could use zeroconf in addition to a PB based
> lookup mechanism.

Yeah, zeroconf would be great.. It's already really easy to publish and 
discover services using the PyObjC bridge, but only on OS X of course.

-bob




From fig at monitor.net  Mon Mar 17 12:36:23 2003
From: fig at monitor.net (Stephen Figgins)
Date: Mon, 17 Mar 2003 11:36:23 -0600
Subject: [Twisted-Python] Thinking Twisted (was Re: Need a mother?)
References: <HOEEKPCOKELHCNIJNMAGMECKCKAA.sean@twistedmatrix.com>	<BA9B3C20.D527%fig@monitor.net> <20030317110708.3b50c95d.twisted@itamarst.org>
Message-ID: <3E760797.80100@monitor.net>

Itamar Shtull-Trauring wrote:
> "Stephen R. Figgins" <fig at monitor.net> wrote:
>>Maybe my thoughts on this are too patterned on Corba.  I am seeing
>>Twisted as a lightweight asynchronous event-driven alternative to
>>Corba, so I keep trying to map it to that: where is the POA?  Where is
>>the name server?
> 
> Standard Twisted Feature Request Answer:

I hadn't meant those questions as requests for features.  I'm think my 
expecting these things to exist may be what is tripping me up.  Instead 
of trying to make twisted fit my mental model of distributed computing, 
I want to know the twisted approach to my problem.  Should I consider 
adding the functionality that fit's my model or is there another 
approach I should use instead?

By the way, I will let the company I am working with know about Zoteca. 
  HIPAA is an issue they need to work with on this project, and if they 
do go with a twisted solution, they might be interested in ZBE.

-Stephen








From cce at clarkevans.com  Mon Mar 17 13:55:49 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Mon, 17 Mar 2003 18:55:49 +0000
Subject: [Twisted-Python] Re-Occuring Operations
In-Reply-To: <20030317124645.GC22628@frobozz.local>
References: <20030317064217.GA9305@doublegemini.com> <20030317124645.GC22628@frobozz.local>
Message-ID: <20030317185549.GA13998@doublegemini.com>

On Mon, Mar 17, 2003 at 11:46:45PM +1100, Andrew Bennetts wrote:
| On the other hand, being a fairly straightforward six-line function, it
| probably doesn't need to be in Twisted.

Yes, it is a straight-foward 6-liner, but there are quite 
a few 6-liners in Twisted.  Anyway, I think it'd be useful.

| >    (b) an operation which keeps pooling a resource, if 
| >        the resource is busy it returns true, otherwise 
| >        it processes the resource and returns false to
| >        signal that it is done
| 
| I don't quite understand your terminology.  I think you mean there's a queue
| of operations that can only be processed if there's some sort of resource
| available to process them, and you wish to occasionally poll the resource
| pool to see if there's one free.  If so, it's probably better to arrange
| your code to avoid polling, i.e. make the resource pool check the queue
| automatically when a resource is freed.  This reduces latency and is usually
| simpler.

Cool.  Is there an example?  I have a database select statement,
and I need to reschedule several operations till it produces
information.  Further, it may consume faster than the database
can produce rows; so it'be be nice to have it add back to the
wait queue every once and a while.  

For a simple example, assume I have an array; and a thread
which is populating the array, using callFromThread(array.append, value)
in the main IO thread, I'd like to have my function wait till
the array has items in it, and pause when the array is empty.
I'm using the array as the 'input queue' so to speak.

I'd love to know the 'preferred' way to do this, right now
I'm pooling the array to see if it's size is > 0.  Not clean.

| Regardless, I'm not sure this deserves or requires special support in
| Twisted.  Merely documenting the necessary idioms is probably better.  After
| all there are lots of possible small variations (e.g. dynamically varying
| the interval based on the function's return value) that would be tedious to
| build into a generic class or function, but are dead simple to build into
| your own six-line implementation. 

I don't think that there are many permutations on this case; and
yes, allowing the function to specify how long to wait would be
a perfect example.   In fact, it fits in really nicely with
the iterator pattern; make the loop break with a StopIteration
exception.  And, take the return value of the function to 
figure out how long from now the next invocation should be;
None could be equivalent to 0.

| Or perhaps I'm wrong, and there's a nice class with lots of use-cases just
| waiting to be implemented :)

The advantage of having a standard 6-liner is that it helps
in documentation this seems to be common enough that it
reoccurs in various projects.

Clark



From radix at twistedmatrix.com  Mon Mar 17 14:51:26 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 17 Mar 2003 14:51:26 -0500
Subject: [Twisted-Python] Re-Occuring Operations
In-Reply-To: <20030317064217.GA9305@doublegemini.com>
References: <20030317064217.GA9305@doublegemini.com>
Message-ID: <20030317195126.GB911@radii>

On Mon, Mar 17, 2003 at 06:42:17AM +0000, Clark C. Evans wrote:
> Hello.   I was wondering if there is anything which handles 
> re-occuring functions; that is, an auto-rescheduler or
> something of that nature.   Here is what I came up with,
> I'm sure there is a shorter 'lambda' form, but I was
> going for clarity here.

I think we need to add a new rule to the coding standard.

"Don't add new utility code that nothing else in Twisted uses"


-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From rich at enflyer.com  Mon Mar 17 12:37:08 2003
From: rich at enflyer.com (Rich Cavanaugh)
Date: Mon, 17 Mar 2003 12:37:08 -0500
Subject: [Twisted-Python] Thinking Twisted (was Re: Need a mother?)
In-Reply-To: <BCDFA67C-5898-11D7-BA18-000A95686CD8@redivi.com>
References: <BCDFA67C-5898-11D7-BA18-000A95686CD8@redivi.com>
Message-ID: <3E7607C4.6000603@enflyer.com>

Bob Ippolito wrote:
> Yeah, zeroconf would be great.. It's already really easy to publish and 
> discover services using the PyObjC bridge, but only on OS X of course.
> 

There's a nice ZeroConf discovery implementation in pure python located 
at 
http://radio.weblogs.com/0105002/stories/2003/01/06/multicastDnsServiceDiscoverForPython.html

I've been playing with it and it seems to work quite well.

rich




From twisted at itamarst.org  Mon Mar 17 21:44:34 2003
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 17 Mar 2003 21:44:34 -0500
Subject: [Twisted-Python] Thinking Twisted (was Re: Need a mother?)
In-Reply-To: <3E7607C4.6000603@enflyer.com>
References: <BCDFA67C-5898-11D7-BA18-000A95686CD8@redivi.com>
	<3E7607C4.6000603@enflyer.com>
Message-ID: <20030317214434.252c9cda.twisted@itamarst.org>

On Mon, 17 Mar 2003 12:37:08 -0500
Rich Cavanaugh <rich at enflyer.com> wrote:

> There's a nice ZeroConf discovery implementation in pure python
> located at 
> http://radio.weblogs.com/0105002/stories/2003/01/06/multicastDnsServiceDiscoverForPython.html
> 
> I've been playing with it and it seems to work quite well.

Except that it's licensed under "non-commercial use only", and uses
threads, so it's not much help for us (other than being a nicer way to
grok the protocol.)



From tv at twistedmatrix.com  Tue Mar 18 12:29:10 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Tue, 18 Mar 2003 19:29:10 +0200
Subject: [Twisted-Python] Thinking Twisted (was Re: Need a mother?)
In-Reply-To: <BA9B3C20.D527%fig@monitor.net>
References: <HOEEKPCOKELHCNIJNMAGMECKCKAA.sean@twistedmatrix.com> <BA9B3C20.D527%fig@monitor.net>
Message-ID: <20030318172910.GA3329@lapdog>

On Mon, Mar 17, 2003 at 08:47:28AM -0600, Stephen R. Figgins wrote:
> I want to create an n-tier application to manage stores in a vertical market
> that has many changing yet strict federally mandated security requirements,
> many interfaces to a variety of equipment (signature capture devices,
> dispensing devices, etc.), and interoperate with different B2B business
> partners.   

	BINGO!


	(sorry)

-- 
:(){ :|:&};:



From naesten at myrealbox.com  Tue Mar 18 14:12:37 2003
From: naesten at myrealbox.com (Samuel Bronson)
Date: Tue, 18 Mar 2003 14:12:37 -0500
Subject: [Twisted-Python] Thinking Twisted (was Re: Need a mother?)
References: <HOEEKPCOKELHCNIJNMAGMECKCKAA.sean@twistedmatrix.com> <BA9B3C20.D527%fig@monitor.net> <20030318172910.GA3329@lapdog>
Message-ID: <3E776FA5.2090209@myrealbox.com>

Tommi Virtanen wrote:

>On Mon, Mar 17, 2003 at 08:47:28AM -0600, Stephen R. Figgins wrote:
>  
>
>>I want to create an n-tier application to manage stores in a vertical market
>>that has many changing yet strict federally mandated security requirements,
>>many interfaces to a variety of equipment (signature capture devices,
>>dispensing devices, etc.), and interoperate with different B2B business
>>partners.   
>>    
>>
>	BINGO!
>
>	(sorry)
>
Playing buzzword bingo, are you?




From fig at monitor.net  Tue Mar 18 16:03:53 2003
From: fig at monitor.net (Stephen R. Figgins)
Date: Tue, 18 Mar 2003 15:03:53 -0600
Subject: [Twisted-Python] Thinking Twisted (was Re: Need a mother?)
In-Reply-To: <20030318172910.GA3329@lapdog>
Message-ID: <BA9CE5D9.D60D%fig@monitor.net>

On 3/18/03 11:29 AM, "Tommi Virtanen" <tv at twistedmatrix.com> wrote:

> BINGO!
> 
> 
> (sorry)

I would rather you elaborate than apologize.  When you read my description
and saw words like "n-tier" and "B2B", were you skeptical that I might need
them?  That they may be more buzzword than useful?   Particularly when I use
terminology like "n-tier" or perhaps just my use of "B2B"?  Or were those
terms not clear enough?

Since I haven't received an answer to my questions yet, I worry that either
nobody knows or you are all feeling annoyed reading my barrage of ignorant
questions.  Maybe I just haven't asked clearly enough, so I will try once
more to be clearer in my request.

The solution needn't be buzzword compliant. I just want to know the twisted
approach.  Considering what I have described, would you write one server and
throw in all your basic components as modules to that server?  Would you use
Twisted's plug-in technology to add new features as you need them?     Would
you write components as servers/servants, and have them interact with each
other via PB in a more DO approach?  Would you write a front end server as a
fa?ade for those components?    It looks like I could do any of the above
and much more with Twisted.  Is one way better than others?  What has worked
well for other large scale solutions?

In a couple of articles on Python and Twisted, Aaron Trauring has made the
point that multiple Twisted services (web, im, email, etc.)  can all run in
a single process.  Is the single process approach desirable over a multiple
component approach?  Or is that only desirable when your needs are small and
your application is unlikely to become CPU bound?

There is so much here I am having a hard time making sense of it all.  I
sure would appreciate some direction from someone who understands twisted
much better than I do.


-Stephen 





From radix at twistedmatrix.com  Tue Mar 18 16:40:36 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 18 Mar 2003 16:40:36 -0500
Subject: [Twisted-Python] Thinking Twisted (was Re: Need a mother?)
In-Reply-To: <BA9CE5D9.D60D%fig@monitor.net>
References: <20030318172910.GA3329@lapdog> <BA9CE5D9.D60D%fig@monitor.net>
Message-ID: <20030318214036.GB13357@radii>

On Tue, Mar 18, 2003 at 03:03:53PM -0600, Stephen R. Figgins wrote:
> On 3/18/03 11:29 AM, "Tommi Virtanen" <tv at twistedmatrix.com> wrote:
> 
> > BINGO!
> > 
> > 
> > (sorry)
> 

> Since I haven't received an answer to my questions yet, I worry that either
> nobody knows or you are all feeling annoyed reading my barrage of ignorant
> questions. 

Don't mind Tv's troll. Admittedly it was a litte amusing to see a
buzzword-filled post, but nothing any of us would really get annoyed
with. :-)

> The solution needn't be buzzword compliant. I just want to know the twisted
> approach.  Considering what I have described, would you write one server and
> throw in all your basic components as modules to that server?  Would you use
> Twisted's plug-in technology to add new features as you need them?     Would
> you write components as servers/servants, and have them interact with each
> other via PB in a more DO approach?  Would you write a front end server as a
> fa?ade for those components?    It looks like I could do any of the above
> and much more with Twisted.  Is one way better than others?  What has worked
> well for other large scale solutions?

I think what most needs to be defined here is the interactions that
are required between the different services. What hosts/ports the
clients connect to the services with are pretty much irrelevant (i.e.,
facade). Once you have the interactions figured out, you can just use
PB to have the different services talk to each other (if they need to
be on separate hosts), as well as for the clients to talk to the
services.

Also, the plugin/component stuff is mostly fluff. Plugins are only
useful when you want 3rd parties to add functionality to your service
through some application-specific API, and I gather that's not going
to be a requirement for you.

Just know that it's probably simpler than you think. A few python
servers that use PB to talk to each other. :)

> In a couple of articles on Python and Twisted, Aaron Trauring has made the
> point that multiple Twisted services (web, im, email, etc.)  can all run in
> a single process.  Is the single process approach desirable over a multiple
> component approach?  Or is that only desirable when your needs are small and
> your application is unlikely to become CPU bound?

If you need to be able to put the services on separate hosts, then
yeah, you'll need to use separate processes and use PB to talk between
them. If you don't, however, it's much easier and simpler to just let
the services live in the same process and have synchronous access to
all the objects in the system.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From fig at monitor.net  Tue Mar 18 17:03:16 2003
From: fig at monitor.net (Stephen R. Figgins)
Date: Tue, 18 Mar 2003 16:03:16 -0600
Subject: [Twisted-Python] Thinking Twisted (was Re: Need a mother?)
In-Reply-To: <20030318214036.GB13357@radii>
Message-ID: <BA9CF3C4.D634%fig@monitor.net>

On 3/18/03 3:40 PM, "Christopher Armstrong" <radix at twistedmatrix.com> wrote:

> Just know that it's probably simpler than you think. A few python
> servers that use PB to talk to each other. :)

Thanks, Christopher.  I think that is where I was headed, grouping related
components into just a few servers, rather than having 50 different very
specific components all communicating through some coordinating component.
I can see the flexibility in small components, but the complexity seemed
overwhelming, particularly without a central POA sort of server.

> If you need to be able to put the services on separate hosts, then
> yeah, you'll need to use separate processes and use PB to talk between
> them. If you don't, however, it's much easier and simpler to just let
> the services live in the same process and have synchronous access to
> all the objects in the system.

My concern here is that multiple processor systems are becoming much more
affordable.  Already dual Pentium systems are as common as dirt.  It would
be nice to have a design that could take advantage of such a system.  Any
ideas on how to make Twisted applications that can scale up to multiple
processor systems?  Maybe that is where we would need to work on getting
Twisted Sister updated - to provide some kind of load balancing between
multiple servers on the same host.

-Stephen




From bruce at cubik.org  Tue Mar 18 18:08:06 2003
From: bruce at cubik.org (Bruce Mitchener)
Date: Tue, 18 Mar 2003 16:08:06 -0700
Subject: [Twisted-Python] odd problem with daemonization?
Message-ID: <3E77A6D6.1000409@cubik.org>

I've got a pretty simple server using a factory and some protocol 
objects.  This code handles access to an extension module (the details 
of which are probably not useful, but it is written in C++, wrapped with 
SWIG) which implements the majority of our application logic.

The C++ code tends to dump a ton of output to stdout, and when I twistd 
like this:

   twistd -f myveryown.tap

and have a connected protocol instance, the log out put from the C++ 
code end up getting written directly to the socket and sent to the client.

When I run things like this:

   twistd -n -f myveryown.tap

Things are just fine and nothing goes wrong in that part of the code.

I do use twisted.python.log in the Python side of things. The protocol 
is a child of twisted.protocols.basic.Int32StringReceiver.

I haven't yet tried to come up with a more minimal test case, but will 
try later tonight if no one has any thoughts.

  - Bruce




From radix at twistedmatrix.com  Tue Mar 18 18:16:52 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 18 Mar 2003 18:16:52 -0500
Subject: [Twisted-Python] Thinking Twisted (was Re: Need a mother?)
In-Reply-To: <BA9CF3C4.D634%fig@monitor.net>
References: <20030318214036.GB13357@radii> <BA9CF3C4.D634%fig@monitor.net>
Message-ID: <20030318231652.GC13357@radii>

On Tue, Mar 18, 2003 at 04:03:16PM -0600, Stephen R. Figgins wrote:
> On 3/18/03 3:40 PM, "Christopher Armstrong" <radix at twistedmatrix.com> wrote:
> > If you need to be able to put the services on separate hosts, then
> > yeah, you'll need to use separate processes and use PB to talk between
> > them. If you don't, however, it's much easier and simpler to just let
> > the services live in the same process and have synchronous access to
> > all the objects in the system.
> 
> My concern here is that multiple processor systems are becoming much more
> affordable.  Already dual Pentium systems are as common as dirt.  It would
> be nice to have a design that could take advantage of such a system.  Any
> ideas on how to make Twisted applications that can scale up to multiple
> processor systems?  Maybe that is where we would need to work on getting
> Twisted Sister updated - to provide some kind of load balancing between
> multiple servers on the same host.

If you write the service such that it can use multiple processes
(communicating via PB), then you can both take advantage of multi-CPU
hosts as well as multiple distributed hosts. You would just run
multiple nodes on one multi-CPU hosts, or one node per single-CPU
host.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From bob at redivi.com  Tue Mar 18 18:28:21 2003
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 18 Mar 2003 18:28:21 -0500
Subject: [Twisted-Python] Thinking Twisted (was Re: Need a mother?)
In-Reply-To: <20030318231652.GC13357@radii>
Message-ID: <4EECCA2D-5999-11D7-8651-000A95686CD8@redivi.com>

On Tuesday, Mar 18, 2003, at 18:16 America/New_York, Christopher 
Armstrong wrote:
> If you write the service such that it can use multiple processes
> (communicating via PB), then you can both take advantage of multi-CPU
> hosts as well as multiple distributed hosts. You would just run
> multiple nodes on one multi-CPU hosts, or one node per single-CPU
> host.

and once we get zeroconf into Twisted they can all find each other 
effortlessly on the LAN (and/or loopback).. how nice would that be :)

-bob




From johan.lubcke at appload.net  Tue Mar 18 07:58:53 2003
From: johan.lubcke at appload.net (Johan =?ISO-8859-1?Q?L=FCbcke?=)
Date: 18 Mar 2003 13:58:53 +0100
Subject: [Twisted-Python] HTTP client with authorization
Message-ID: <1047992333.10461.19.camel@johan.office.appload.net>

Hi

I've just started to use twisted for a small project to relay GSM SMS
messages to Zope, and for that I need to do HTTP requests with basic
authentication. Would this be something that would be interesting to
have in twisted.web.client?

I ended up with this:

import base64
import twisted.internet.reactor
import twisted.web.client
import urlparse

class AuthHTTPPageGetter(twisted.web.client.HTTPPageGetter):

    def connectionMade(self):
        self.sendCommand('GET', self.factory.url)
        self.sendHeader('Host', self.factory.host)
        self.sendHeader('User-Agent', self.factory.agent)

        if self.factory.http_user:
            cred = '%s:%s' % (self.factory.http_user,
                              self.factory.http_password)
            auth = "Basic " +
base64.encodestring(cred).replace('\012','')
            self.sendHeader('Authorization', auth)

        self.endHeaders()
        self.headers = {}


def _parse(url):
    parsed = urlparse.urlparse(url)
    path = urlparse.urlunparse(('','')+parsed[2:])
    host, port = parsed[1], 80
    if ':' in host:
        host, port = host.split(':')
        port = int(port)
    return host, port, path


def getPage(url, http_user=None, http_password=None):
    host, port, url = _parse(url)
    factory = twisted.web.client.HTTPClientFactory(host, url)
    factory.http_user = http_user
    factory.http_password = http_password
    factory.protocol = AuthHTTPPageGetter
    twisted.internet.reactor.connectTCP(host, port, factory)
    return factory.deferred


Thanks for a great framework! Comming from asyncore, twisted makes
things quite a lot easier...

  / Johan


-- 
Johan L?bcke, System Architect                         Appload Nordic AB          
Mobile: +46 730 632303                            http://www.appload.com
Office: +46 8 4420933                    mailto:johan.lubcke at appload.com

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030318/5ddcdcb5/attachment.pgp 

From faassen at vet.uu.nl  Tue Mar 18 13:51:06 2003
From: faassen at vet.uu.nl (Martijn Faassen)
Date: Tue, 18 Mar 2003 19:51:06 +0100
Subject: [Twisted-Python] Twisted talk at EuroPython 2003
Message-ID: <20030318185106.GC18469@vet.uu.nl>

Hi there,

I'm the track chair for the Python Frameworks track for EuroPython 2003,
to be held the end of june in Charleroi, Belgium.

http://www.europython.org

I was wondering if anyone was interested in giving a talk about Twisted
at the conference. You could give a 30 minute or 45 minute talk, but
there's also interest in a Twisted tutorial, which could be longer.

Please drop me a mail if you're interested.

Regards,

Martijn




From glyph at twistedmatrix.com  Wed Mar 19 01:02:46 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 19 Mar 2003 00:02:46 -0600
Subject: [Twisted-Python] odd problem with daemonization?
In-Reply-To: <3E77A6D6.1000409@cubik.org>
Message-ID: <68236FB5-59D0-11D7-BB45-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Tuesday, March 18, 2003, at 05:08 PM, Bruce Mitchener wrote:

> I've got a pretty simple server using a factory and some protocol 
> objects.  This code handles access to an extension module (the details 
> of which are probably not useful, but it is written in C++, wrapped 
> with SWIG) which implements the majority of our application logic.

Just a brief word of warning... while I've had a few good experiences 
integrating C/C++ code with Python, SWIG has uniformly been horrible.  
This particular issue is not with SWIG, but it may create interference 
later on.

> The C++ code tends to dump a ton of output to stdout, and when I 
> twistd like this:
>
>   twistd -f myveryown.tap
>
> and have a connected protocol instance, the log out put from the C++ 
> code end up getting written directly to the socket and sent to the 
> client.

The reason that you're having this problem is that on the C++ side of 
things, FD 0,1,2 are just normal FDs.  This is due to the fact that we 
trap the sys.stdout _object_ in python, but we don't keep the 
file-descriptors around.  The Transport of your Protocol is getting 
created after those FDs have been closed, and is therefore haplessly 
allocating the FD of stdout by chance.

I don't know how to create a file-descriptor in C which translates to 
function calls on a Python file-type object.  In fact, I don't even 
know if that's possible.  However, this is clearly incorrect behavior 
for cout<< and printf.  Can anyone with more experience in this area 
propose a solution?
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+eAgKvVGR4uSOE2wRAkREAJsG/w54utuFUiGoOF5sFTosC0mUyACfWmqk
t7YY/4sBaVjtoZQpoqo1YAA=
=ygqD
-----END PGP SIGNATURE-----




From jjn at kriln.com  Wed Mar 19 00:17:10 2003
From: jjn at kriln.com (Jeremy Noetzelman)
Date: Wed, 19 Mar 2003 05:17:10 +0000 (GMT)
Subject: [Twisted-Python] odd problem with daemonization?
In-Reply-To: <68236FB5-59D0-11D7-BB45-000393C9700E@twistedmatrix.com>
Message-ID: <20030319051617.M93757-100000@nosferatu.kriln.com>

On Wed, 19 Mar 2003, Glyph Lefkowitz wrote:

> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
> On Tuesday, March 18, 2003, at 05:08 PM, Bruce Mitchener wrote:
>
> > I've got a pretty simple server using a factory and some protocol
> > objects.  This code handles access to an extension module (the details
> > of which are probably not useful, but it is written in C++, wrapped
> > with SWIG) which implements the majority of our application logic.
>
> Just a brief word of warning... while I've had a few good experiences
> integrating C/C++ code with Python, SWIG has uniformly been horrible.
> This particular issue is not with SWIG, but it may create interference
> later on.

Can you elaborate please?  I've heard equally as many horror stories about
Boost.Python, for example, and am curious.






From exarkun at twistedmatrix.com  Wed Mar 19 12:23:54 2003
From: exarkun at twistedmatrix.com (Jp Calderone)
Date: Wed, 19 Mar 2003 12:23:54 -0500
Subject: [Twisted-Python] Lore bug
Message-ID: <20030319172354.GA5929@meson.dyndns.org>

  This isn't the bug I meant to report, but I found it in the process of
trying to make an example of that one.  So:

<html><body>
<pre class="python">
def foo():
    print 'bar'
foo()
</pre>
</body></html>

  Running lore on this file (using the PyCon template), raises this
exception:

Traceback (most recent call last):#######] (foo)                               
  File "/usr/local/bin/lore", line 30, in ?
    run()
  File "/home/exarkun/projects/python/Twisted/twisted/scripts/lore.py", line 87, in run
    w.generate()
  File "/home/exarkun/projects/python/Twisted/twisted/lore/process.py", line 60, in generate
    self.df(fullpath, linkrel)
  File "/home/exarkun/projects/python/Twisted/twisted/lore/default.py", line 41, in <lambda>
    d['baseurl'], templ)
  File "/home/exarkun/projects/python/Twisted/twisted/lore/tree.py", line 231, in doFile
    munge(doc, cn, linkrel, os.path.dirname(fn), fn, ext, url)
  File "/home/exarkun/projects/python/Twisted/twisted/lore/tree.py", line 201, in munge
    title = domhelpers.findNodesNamed(document, 'title')[0].childNodes
IndexError: list index out of range

  Jp

-- 
Where a calculator on the ENIAC is equipped with 18,000 vacuum tubes and
weighs 30 tons, computers in the future may have only 1,000 vacuum tubes and
weigh only 1.5 tons.    -- Popular Mechanics, March 1949
-- 
 up 16 days, 10:00, 7 users, load average: 0.01, 0.03, 0.00
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030319/d47d1c11/attachment.pgp 

From jasper at peak.org  Wed Mar 19 19:03:32 2003
From: jasper at peak.org (Jasper Phillips)
Date: Wed, 19 Mar 2003 16:03:32 -0800 (PST)
Subject: [Twisted-Python] Problems with PB and Jelly...
Message-ID: <Pine.LNX.4.44.0303191537250.20559-100000@localhost.localdomain>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

I'm new to twisted, and attempting to use it for networkable gaming;
unfortunately I've run into some problems.

I have a Perspective <-> Referenceable server/client setup, and am trying to
pass objects between them.  Following the online docs I've set all the
relavent classes to inherit from pb.Copyable + pb.RemoteCopy, and passed them
all to pb.setUnjellyableForClass.

However, I still get "Module not allowed" exceptions raised in
twisted.spread.jelly.py line 523.  Looking more closely, I see that modules
are not allowed unless passed to SecurityOptions.allowModules(), which is
only called from SecurityOptions.allowInstancesOf(), which is not exposed
through pb...

In short I don't see how the example code on:
http://twistedmatrix.com/documents/howto/pb-copyable
could possibly work!  Is it indeed necessary to call allowInstancesOf()
directly?  Hopefully I am just missing something... :-)


I'm also unsure what to make of the last bullet under "Things To Watch Out
For" on the above webpage.  It seems unsure whether using __init__ to
initialize transferable objects is ok...  Must I truly go and hack all
my objects to not use __init__, and instead use setCopyableState()?

This, especially when combined with the need to inherit from pb.Copyable +
pb.RemoteCopy, seems onerous when compared to the minimal interface of
pickle.  I would like to be able to simple pass objects of arbitrary classes,
provided I've registered them as UnJellyable.  Hopefully I'm missing
something here as well!

Thanks in advance,
- -Jasper

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE+eQVb8EpjZ7/X9bIRAoGmAKDOp/mMXUV0wGG057+CK5Shf75k9ACgu9Cb
EuFB62b9vaObg3LZZlJ81jg=
=8Dte
-----END PGP SIGNATURE-----




From cce at clarkevans.com  Wed Mar 19 20:58:43 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu, 20 Mar 2003 01:58:43 +0000
Subject: [Twisted-Python] supporting start/stop/restart behavior
Message-ID: <20030320015843.GA29224@doublegemini.com>

First, before I get started, I'd like to say that I'm a new
fan of twistd, it is quite nice tool, and I think everyone
should use it.   However, that being said, what it misses,
IMHO, is a simple interface to stop and restart.  Also, it
lacks a nice way to be embedded within a python script 
so that the __main__ == __name__ hack runs the file properly.

Anyway, what I'd like... is to take my arbitrary "test.py" file,
let's say an application as simple as...

    from twisted.internet import app
    from twisted.web.server import Site
    from twisted.web.static import File
    
    application = app.Application('test')
    application.listenTCP(8080, Site(File('.')))

And add these three lines of code to make it runnable...

    if '__main__' == __name__:
        from twisted.scripts.twistd import runDirect
        runDirect(save=1)

In this way, the following commands 'just work':

    python test.py          # runs the app directly (no daemon)
    python test.py start    # runs the app as a deamon
    python test.py stop     # stops the app as a deamon
    python test.py restart  # restarts the app as a deamon

And, even twistd options can be included...

    python test.py --quiet start
    python test.py --quiet

What this involves is two things:

  1. Refactoring runApp to remove a hunk of code which 
     runs os.kill on a pid found in the given pidfile.
     This is moved to another function, killApp, which
     takes two arguments, config and signal.   From the
     runApp the code then calls killApp(config, signal=0)

  2. Adding a new function, runDirect which does
     several things:

     a.  takes 'start', 'stop', and 'restart' as the last
         argument on the command line, if none of these 
         are found, then the application is assumed to be
         run interactively (nodaemon); and

     b.  it adds --python <filename> where filename is the
         name of the current python file (argv[0]), further,
         it gives a direct option in the function arguments
         to not save the tap file (saving a tap file is
         not always useful, and as an argument it is hard
         to miss); and

     c.  if stop or restart are chosen, then this kills the
         current process using the given pidfile (which defaults
         to twistd.pid in the current directory) through
         killApp(signal=SIGTERM)

     d.  unless stop is chosen, the app is then started using
         the configuration options as parsed (and modified via
         the --python option)

     This function could be broken into the start/stop/restart
     behavior from the --python option; but I don't have this
     requirement and people in the IRC list didn't seem to think
     that either of these two functions are useful.

Anyway, I'm posting to this list beacuse I think the way in
which twistd is used isn't obvious... i.e. the primary way
you'd use it with a python source file is an option buried 
among many others. 

I raised this change on the IRC list, and the primary argument
against the above was that it is out-of-scope; in other words,
one could write a shell script to do the same.   I think this
is a bad argument beacuse _all_ of twistd could be done in 
a shell script.  For example, if you ask D. J. Bernstein, he'd
say that none of this deamon / logging behavior needs to be
in an application, and this is why he has his 'daemontools'.

So, the argument shouldn't be _can_ this be done externally, 
of course it can.  The question is does it make sence to 
standardize on particular ways of using twisted so that everyone
doesn't have their own approach, to logging, etc.  I feel that
this comes all the way down to Twisted having a simple way
to start/stop/restart a server without having to rely upon
external, non-Twisted scripts.  

At the very least, I'd like the killApp refactor to be
accepted, as I'd rather not have to duplicate killApp
code within a private/sandbox copy of runDirect.

Best,

Clark



From cce at clarkevans.com  Wed Mar 19 20:59:56 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu, 20 Mar 2003 01:59:56 +0000
Subject: [Twisted-Python] Re: supporting start/stop/restart behavior
In-Reply-To: <20030320015843.GA29224@doublegemini.com>
References: <20030320015843.GA29224@doublegemini.com>
Message-ID: <20030320015956.GB29224@doublegemini.com>

--- twistd.py.orig	Wed Mar 19 16:21:46 2003
+++ twistd.py	Wed Mar 19 20:19:15 2003
@@ -211,6 +211,31 @@
     import pdb
     pdb.set_trace()
 
+def killApp(config, signal = 0):
+    if os.path.exists(config['pidfile']):
+        try:
+            pid = int(open(config['pidfile']).read())
+        except ValueError:
+            sys.exit('Pidfile %s contains non numeric value' % config['pidfile'])
+
+        try:
+            os.kill(pid, signal)
+        except OSError, why:
+            if why[0] == errno.ESRCH:
+                # The pid doesnt exists.
+                if not config['quiet']:
+                    print 'Removing stale pidfile %s' % config['pidfile']
+                    os.remove(config['pidfile'])
+            else:
+                sys.exit('Can\'t check status of PID %s from pidfile %s: %s' % (pid, config['pidfile'], why[1]))
+        else:
+            if not(signal):
+                sys.exit("""\
+Another twistd server is running, PID %s\n
+This could either be a previously started instance of your application or a
+different application entirely. To start a new one, either run it in some other
+directory, or use my --pidfile and --logfile parameters to avoid clashes.
+""" %  pid)
 
 def runApp(config):
     global initRun
@@ -248,29 +273,7 @@
     # This will fix up accidental function definitions in evaluation spaces
     # and the like.
     initRun = 0
-    if os.path.exists(config['pidfile']):
-        try:
-            pid = int(open(config['pidfile']).read())
-        except ValueError:
-            sys.exit('Pidfile %s contains non numeric value' % config['pidfile'])
-
-        try:
-            os.kill(pid, 0)
-        except OSError, why:
-            if why[0] == errno.ESRCH:
-                # The pid doesnt exists.
-                if not config['quiet']:
-                    print 'Removing stale pidfile %s' % config['pidfile']
-                    os.remove(config['pidfile'])
-            else:
-                sys.exit('Can\'t check status of PID %s from pidfile %s: %s' % (pid, config['pidfile'], why[1]))
-        else:
-            sys.exit("""\
-Another twistd server is running, PID %s\n
-This could either be a previously started instance of your application or a
-different application entirely. To start a new one, either run it in some other
-directory, or use my --pidfile and --logfile parameters to avoid clashes.
-""" %  pid)
+    killApp(config)
 
     if config['logfile'] == '-':
         if not config['nodaemon']:
@@ -472,3 +475,66 @@
         os._exit(1)
 
     runApp(config)
+
+def runDirect(save=1):
+    """ run directly from python file
+
+        You can use this function to include start/stop/restart
+        functionality directly from your twisted application.
+        Following is example code, let us call it test.py,
+
+            if '__main__' == __name__:
+                # run this before twisted.internet.reactor is imported
+                from twisted.scripts.twistd import runDirect
+                runDirect(save=1)
+
+            from twisted.internet import app
+            from twisted.web.server import Site
+            from twisted.web.static import File
+            
+            application = app.Application('test')
+            application.listenTCP(8080, Site(File('.')))
+            
+
+        Given this code, the following will now work,
+           python test.py          # runs the app directly (no daemon)
+           python test.py start    # runs the app as a deamon
+           python test.py stop     # stops the app as a deamon
+           python test.py restart  # restarts the app as a deamon 
+       
+        Options can be included as well, for example, 
+           python test.py --quiet start    # deamon
+           python test.py --quiet          # no deamon
+    """
+    from sys import argv, exit
+    config = ServerOptions()
+    config.synopsis = "Usage: %s [options] start|stop|restart" % argv[0]
+    bStop = 0; bStart = 1; bDaemon = 0
+    cmd = argv[-1]
+    if cmd in ('start', 'stop', 'restart'):
+        argv.pop()
+        bDaemon = 1
+        if 'restart' == cmd:
+            bStop = 1
+        if 'stop' == cmd:
+            bStart = 0
+            bStop = 1
+    try:
+        config.parseOptions()
+    except usage.error, ue:
+        print config.opt_help()
+        exit(1)
+    if bStop:
+        from signal import SIGTERM
+        from os.path import exists
+        from time import sleep
+        killApp(config, SIGTERM)
+        nWait = 0  # processes do not die instantly
+        while exists(config['pidfile']) and nWait < 20:
+            sleep(.1)
+            nWait += 1
+    if bStart:
+        if not save:    config["no_save"] = 1
+        if not bDaemon: config['nodaemon'] = 1
+        config["python"] = argv[0]
+        runApp(config)



From sean at twistedmatrix.com  Wed Mar 19 22:01:58 2003
From: sean at twistedmatrix.com (Sean Riley)
Date: Wed, 19 Mar 2003 21:01:58 -0600
Subject: [Twisted-Python] Problems with PB and Jelly...
In-Reply-To: <Pine.LNX.4.44.0303191537250.20559-100000@localhost.localdomain>
Message-ID: <HOEEKPCOKELHCNIJNMAGCEEECKAA.sean@twistedmatrix.com>

The "Module not allowed" exception means that you need to call
setCopierForClass for the class. This maps a server-side class string to a
client side class so the Jelly knows what type of object to create on the
client.  For example:

pb.setCopierForClass('MyApp.game.server.door.Door', RemoteDoor)

This is usually done at the bottom of the file that the class client-side is
defined in.

As far the inheritance, you should only to inherit from RemoteCopy for
client side objects, not both pb.Copyable and pb.RemoteCopy...

The "setCopyableState" idiom for constructing remote classes may seem
onerous at first, but its use really is necessary. Distributed objects _are_
different from regular local objects and the requirements for managing them
are different too. One of the benefits of PB is its inherent security
model - it is far more secure and resistant to hackery than using Pickle.
Pickle's internal use of Python's eval function makes it very scary to
unserialized Pickled objects on a server...

-----Original Message-----
From: twisted-python-admin at twistedmatrix.com
[mailto:twisted-python-admin at twistedmatrix.com]On Behalf Of Jasper
Phillips
Sent: Wednesday, March 19, 2003 6:04 PM
To: twisted-python at twistedmatrix.com
Subject: [Twisted-Python] Problems with PB and Jelly...


-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

I'm new to twisted, and attempting to use it for networkable gaming;
unfortunately I've run into some problems.

I have a Perspective <-> Referenceable server/client setup, and am trying to
pass objects between them.  Following the online docs I've set all the
relavent classes to inherit from pb.Copyable + pb.RemoteCopy, and passed
them
all to pb.setUnjellyableForClass.

However, I still get "Module not allowed" exceptions raised in
twisted.spread.jelly.py line 523.  Looking more closely, I see that modules
are not allowed unless passed to SecurityOptions.allowModules(), which is
only called from SecurityOptions.allowInstancesOf(), which is not exposed
through pb...

In short I don't see how the example code on:
http://twistedmatrix.com/documents/howto/pb-copyable
could possibly work!  Is it indeed necessary to call allowInstancesOf()
directly?  Hopefully I am just missing something... :-)


I'm also unsure what to make of the last bullet under "Things To Watch Out
For" on the above webpage.  It seems unsure whether using __init__ to
initialize transferable objects is ok...  Must I truly go and hack all
my objects to not use __init__, and instead use setCopyableState()?

This, especially when combined with the need to inherit from pb.Copyable +
pb.RemoteCopy, seems onerous when compared to the minimal interface of
pickle.  I would like to be able to simple pass objects of arbitrary
classes,
provided I've registered them as UnJellyable.  Hopefully I'm missing
something here as well!

Thanks in advance,
- -Jasper

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE+eQVb8EpjZ7/X9bIRAoGmAKDOp/mMXUV0wGG057+CK5Shf75k9ACgu9Cb
EuFB62b9vaObg3LZZlJ81jg=
=8Dte
-----END PGP SIGNATURE-----


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From konrad at wam.umd.edu  Wed Mar 19 22:50:12 2003
From: konrad at wam.umd.edu (Konrad Rokicki)
Date: Wed, 19 Mar 2003 22:50:12 -0500 (EST)
Subject: [Twisted-Python] clients with parameters
Message-ID: <Pine.SOL.4.44.0303192220240.14540-100000@rac2.wam.umd.edu>

Hi, got a quick question.
With any client where the __init__() method takes some parameters,
(i.e. FTPClient, TOCClient, etc), how can I use the connectTCP/factory
mechanisms and also pass it the parameters from the main program?
I started with this:

if __name__ == "__main__":
    config = {} # configuration is loaded into this
    fact = AIMFactory(config['nick'], config['password'])
    reactor.connectTCP(config['server'], config['port'], fact)

class AIMFactory(protocol.ClientFactory):
    protocol = AIM
    def __init__(self, nick, password):
        self.nick = nick
        self.password = password
    # etc

class AIM(toc.TOCClient):
    def __init__(self):
	""" I don't have access to the factory here
            so I don't know these parameters...
        """
        toc.TOCClient.__init__(self, username, password)

This is probably all wrong, and I guess the factory isn't a good
place for those parameters to be. But I have a configuration file that I
read into a structure and I want to use those options.

I looked at the ClientCreator which kind of does what I need but I'd
still like to have the factory for other things like logging. Actually,
I dont think I'll ever create more than one instance of the client, so I
could just use that, but I'd like to know the "right" way of doing this.

Thanks,
Konrad Rokicki




From radix at twistedmatrix.com  Thu Mar 20 00:13:15 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Thu, 20 Mar 2003 00:13:15 -0500
Subject: [Twisted-Python] clients with parameters
In-Reply-To: <Pine.SOL.4.44.0303192220240.14540-100000@rac2.wam.umd.edu>
References: <Pine.SOL.4.44.0303192220240.14540-100000@rac2.wam.umd.edu>
Message-ID: <20030320051315.GF13357@radii>

On Wed, Mar 19, 2003 at 10:50:12PM -0500, Konrad Rokicki wrote:
> class AIMFactory(protocol.ClientFactory):
>     protocol = AIM
>     def __init__(self, nick, password):
>         self.nick = nick
>         self.password = password
>     # etc
> 
> class AIM(toc.TOCClient):
>     def __init__(self):
> 	""" I don't have access to the factory here
>             so I don't know these parameters...
>         """
>         toc.TOCClient.__init__(self, username, password)
> 

You need to override the buildProtocol method of your Factory; it must
create and return the Protocol instance. See
twisted.protocols.toc.TOCFactory, for example.


-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From glyph at twistedmatrix.com  Thu Mar 20 00:35:39 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 19 Mar 2003 23:35:39 -0600
Subject: [Twisted-Python] supporting start/stop/restart behavior
In-Reply-To: <20030320015843.GA29224@doublegemini.com>
Message-ID: <C8B9F9A2-5A95-11D7-A96E-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Wednesday, March 19, 2003, at 07:58 PM, Clark C. Evans wrote:

> ... what [Twisted] misses, IMHO, is a simple interface to stop and 
> restart.

You're right, but this is the wrong way to go about fixing it.

> Also, it lacks a nice way to be embedded within a python script so 
> that the __main__ == __name__ hack runs the file properly.

I disagree.  Despite the fact that I occasionally write quick scripts 
that work this way, it's for quick hacks only, and providing better 
support for it is a misleading band-aid on the deficiencies of 
multi-platform twistd functionality.

> And add these three lines of code to make it runnable...
>
>     if '__main__' == __name__:
>         from twisted.scripts.twistd import runDirect
>         runDirect(save=1)
>
> In this way, the following commands 'just work':
>
>     python test.py          # runs the app directly (no daemon)
>     python test.py start    # runs the app as a deamon
>     python test.py stop     # stops the app as a deamon
>     python test.py restart  # restarts the app as a deamon

... on UNIX.

But, what does "restart" mean if you're running on Jython?  On win32?  
What interaction does this imply with native OS services?

> And, even twistd options can be included...
>
>     python test.py --quiet start
>     python test.py --quiet

In that case, why not 'twistd -y test.py --quiet'?

>   1. Refactoring runApp to remove a hunk of code which
>      runs os.kill on a pid found in the given pidfile.
>      This is moved to another function, killApp, which
>      takes two arguments, config and signal.   From the
>      runApp the code then calls killApp(config, signal=0)

Currently, that code is there _only_ to determine, in a rather 
platform-specific way, whether the server should attempt to keep 
starting or not.  It's not a generalized stop-the-application.

>   2. Adding a new function, runDirect which does
>      several things:
>
>      b.  it adds --python <filename> where filename is the
>          name of the current python file (argv[0]), further,
>          it gives a direct option in the function arguments
>          to not save the tap file (saving a tap file is
>          not always useful, and as an argument it is hard
>          to miss); and

Saving a tap file is pretty much always useful.  It provides a common 
ground for introspection tools to look at what a server is doing.  I 
have gone over this in previous mails.

>      c.  if stop or restart are chosen, then this kills the
>          current process using the given pidfile (which defaults
>          to twistd.pid in the current directory) through
>          killApp(signal=SIGTERM)

Why put this into Twisted where we have to swaddle it in a layer of 
cross-platform compatibility rather than just letting the user use 
whatever tools are available on their system for interacting with 
Twisted?

>      This function could be broken into the start/stop/restart
>      behavior from the --python option; but I don't have this
>      requirement and people in the IRC list didn't seem to think
>      that either of these two functions are useful.
>
> Anyway, I'm posting to this list beacuse I think the way in
> which twistd is used isn't obvious... i.e. the primary way
> you'd use it with a python source file is an option buried
> among many others.

So you are trying to solve a documentation problem by adding 
functionality to a different place, necessitating more documentation? 
:-)

> I raised this change on the IRC list, and the primary argument
> against the above was that it is out-of-scope; in other words,
> one could write a shell script to do the same.   I think this
> is a bad argument beacuse _all_ of twistd could be done in
> a shell script.  For example, if you ask D. J. Bernstein, he'd
> say that none of this deamon / logging behavior needs to be
> in an application, and this is why he has his 'daemontools'.

D.J. Bernstein doesn't give a rip about portability outside of UNIX, so 
he makes the decision to write his framework for logging and 
daemonization in sh.  We write these frameworks in Python, but I agree 
with this point: none of this daemon/logging/startup/shutdown behavior 
needs to be in an application.

My view on functionality like this is that it is a platform-specific 
thing.  Even assuming that signals worked like you expect them to 
across all platforms that we are trying to support, there are other 
issues.  What about the cultural expectation of command lines?  On 
win32, the way Python programs are run isn't very natural.  On the 
command line, the location of the .exe is significant, there's no such 
thing as a shebang line, and users aren't accustomed to running 
interpreters on scripts.  They expect to have an icon to click on, 
usually a Service.  There are also differing cultural expectations of 
how you run stuff like this on MacOS.  Does the start/stop thing have a 
GUI?  A monitoring icon in the dock?

Now, we don't *currently* have functionality like that, but we hope to 
one day.  I am beginning to despair of ever actually achieving that 
goal, though, since nobody who understands it has time, and so many 
other programmers have habits that are opposed to this approach...

Supporting mechanisms in the framework that make configuration and 
introspection impossible without editing the start-up code for your 
particular application would make this eventual goal even more 
difficult than it already is.

Components written for twisted should be written in such a way that 
they can be loaded into existing applications without running a script. 
  The --python option to twistd is pushing about as far as we want to go 
in the direction of hard-coding custom functionality for a particular 
server process.

> So, the argument shouldn't be _can_ this be done externally,
> of course it can.  The question is does it make sence to
> standardize on particular ways of using twisted so that everyone
> doesn't have their own approach, to logging, etc.  I feel that
> this comes all the way down to Twisted having a simple way
> to start/stop/restart a server without having to rely upon
> external, non-Twisted scripts.

If you want to improve twistd, please feel free to suggest ways that 
stopping/restarting could be made easier or even more consistent across 
platforms.  For example, "killApp" might make sense if, on 
signals-challenged platforms, twistd automatically opened a 
localhost-only socket which allowed communication with the server.

> At the very least, I'd like the killApp refactor to be
> accepted, as I'd rather not have to duplicate killApp
> code within a private/sandbox copy of runDirect.

What functionality, exactly, is your platform's kill(1) missing that 
makes you want a Python version of it?
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+eVMwvVGR4uSOE2wRAopTAJ4+JQiM0WrJYIAH2qPMCbil4bE1+gCeMRaF
X5qxxeDWi10E8IeWcuBkQE4=
=L2sp
-----END PGP SIGNATURE-----




From cce at clarkevans.com  Thu Mar 20 02:18:32 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu, 20 Mar 2003 07:18:32 +0000
Subject: [Twisted-Python] supporting start/stop/restart behavior
In-Reply-To: <C8B9F9A2-5A95-11D7-A96E-000393C9700E@twistedmatrix.com>
References: <20030320015843.GA29224@doublegemini.com> <C8B9F9A2-5A95-11D7-A96E-000393C9700E@twistedmatrix.com>
Message-ID: <20030320071832.GA30645@doublegemini.com>

Glyph,

Thanks for responding, I know you're quite busy before PyCon.

On Wed, Mar 19, 2003 at 11:35:39PM -0600, Glyph Lefkowitz wrote:
| >... what [Twisted] misses, IMHO, is a simple interface to stop and 
| >restart.
| 
| You're right, but this is the wrong way to go about fixing it.

Ok. 

| >  1. Refactoring runApp to remove a hunk of code which
| >     runs os.kill on a pid found in the given pidfile.
| >     This is moved to another function, killApp, which
| >     takes two arguments, config and signal.   From the
| >     runApp the code then calls killApp(config, signal=0)
| 
| Currently, that code is there _only_ to determine, in a rather 
| platform-specific way, whether the server should attempt to keep 
| starting or not.  It's not a generalized stop-the-application.

If twistd adds (in a "rather platform-specific" way) support for 
stop and restart, then I'm sure platform-specific linkages can be
added later on; for example doing NT based service API calls
instead of fork / pidfiles / signals.

| >     c.  if stop or restart are chosen, then this kills the
| >         current process using the given pidfile (which defaults
| >         to twistd.pid in the current directory) through
| >         killApp(signal=SIGTERM)
| 
| Why put this into Twisted where we have to swaddle it in a layer of 
| cross-platform compatibility rather than just letting the user use 
| whatever tools are available on their system for interacting with 
| Twisted?

Why not?  With twistd, Twisted is taking on responsibility for
'starting' an application, shouldn't it finish the job with
stop and restart?

| So you are trying to solve a documentation problem by adding 
| functionality to a different place, necessitating more documentation? 

Got me.  ;)

| We write these frameworks in Python, but I agree with this point: 
| none of this daemon/logging/startup/shutdown behavior needs to 
| be in an application.

Cool.  Does it belong in a framework?   If not, where?

| My view on functionality like this is that it is a platform-specific 
| thing.  Even assuming that signals worked like you expect them to 
| across all platforms that we are trying to support, there are other 
| issues.  What about the cultural expectation of command lines?  On 
| win32, the way Python programs are run isn't very natural.  On the 
| command line, the location of the .exe is significant, there's no such 
| thing as a shebang line, and users aren't accustomed to running 
| interpreters on scripts.  They expect to have an icon to click on, 
| usually a Service.  There are also differing cultural expectations of 
| how you run stuff like this on MacOS.  Does the start/stop thing have a 
| GUI?  A monitoring icon in the dock?
| 
| Now, we don't *currently* have functionality like that, but we hope to 
| one day.  I am beginning to despair of ever actually achieving that 
| goal, though, since nobody who understands it has time, and so many 
| other programmers have habits that are opposed to this approach...

All of this is great.  But I've got many applications that I am
writing, and would like to write; and I'd like a nice way to 
start, stop, and restart my twisted daemons.  Currently, "twistd" 
seems to be the preferred command line approach.

| Supporting mechanisms in the framework that make configuration and 
| introspection impossible without editing the start-up code for your 
| particular application would make this eventual goal even more 
| difficult than it already is.
| 
| Components written for twisted should be written in such a way that 
| they can be loaded into existing applications without running a script. 

Uncle! Uncle!  Ok.  Ok.  '__main__' == __name__ is bad.

| If you want to improve twistd, please feel free to suggest ways that 
| stopping/restarting could be made easier or even more consistent across 
| platforms.  For example, "killApp" might make sense if, on 
| signals-challenged platforms, twistd automatically opened a 
| localhost-only socket which allowed communication with the server.

Ok.  Could we add to twistd 'start', 'stop' and 'restart' sub-commands,
with 'start' being the default.  For now, we implement stop with kill
signals.  When we get time we refactor the whole start/stop/restart code
so that it uses a 'Process' object that is platform specific.   The
process object has 'start', 'stop', and 'restart' methods, and it has
two or more implementations, including, but not limited to a
UnixProcess, which uses kill/signals/pidfile, and a NT Process, which
uses NT services, etc.

As for GUIs.  What would be useful is one more sub-command, 'query'.
Which returns a status of the given process, 'starting', 'stopping',
'running', 'restarting', 'stopped'.  With those in place, I'm sure
someone could write a nice cross-platform wxWindows viewer which calls
twistd to check the status of various processes, etc.  We'd probably
at that point also have to start thinking about registry entries,
i.e. configuration settings (Coca?).

Best,

Clark



From smurf at noris.de  Thu Mar 20 04:46:55 2003
From: smurf at noris.de (Matthias Urlichs)
Date: Thu, 20 Mar 2003 10:46:55 +0100
Subject: [Twisted-Python] more thoughts on resumable async data flows
References: <20030314065003.GA99373@doublegemini.com>
Message-ID: <pan.2003.03.20.09.46.53.743414@smurf.noris.de>

Hi,

On Fri, 14 Mar 2003 06:50:03 +0000, Clark C. Evans wrote:

> Anyway, it's in the sandbox if anyone wants to play...
> 
Looks nice. I'll probably use that (for processing a rather large
amount of database results).

> P.S.  Unfortunately, it looks like PauseFlow doesn't
> work in the context of a generator... pity.  Hopefully
> I'm doing something wrong.
> 
You can't leave a generator with an exception and expect it to be
resumable. (Where should it continue?? There's no mechanism to re-enter it
at any point other than a yield(), which is not what you want to do!)

The best idea would probably be to "yield PauseFlow", and to special-case
that in the flow engine. I don't know what your use case is, though; my
iterators either don't wait for something (they don't need this), or
they block on something (I park them in a different thread), or they
wait on a Deferred or whatever (they're not written as generators).

-- 
Matthias




From andrew-twisted at puzzling.org  Thu Mar 20 05:19:39 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu, 20 Mar 2003 21:19:39 +1100
Subject: [Twisted-Python] Lore bug
In-Reply-To: <20030319172354.GA5929@meson.dyndns.org>
References: <20030319172354.GA5929@meson.dyndns.org>
Message-ID: <20030320101939.GF3390@frobozz.local>

On Wed, Mar 19, 2003 at 12:23:54PM -0500, Jp Calderone wrote:
>   This isn't the bug I meant to report, but I found it in the process of
> trying to make an example of that one.  So:
> 
> <html><body>
> <pre class="python">
> def foo():
>     print 'bar'
> foo()
> </pre>
> </body></html>
> 
>   Running lore on this file (using the PyCon template), raises this
> exception:

[snip]

As discussed on IRC, this is actually a feature ;)

Using lint (lore -o lint) will warn that the document is malformed (in this
case, missing a title tag), so Lore makes no guarantee to be able to do
anything with it... I'm not interested in encouraging HTML-style "let's
parse any old crud that looks vaguely recognisable".

That said, giving a traceback is pretty rude.  I'll patch it to give a
friendly message suggesting you run lint to find out why Lore can't process
your document, and probably provide a --debug, in case people still want to
be able to see tracebacks (like me :).

-Andrew.




From tv at twistedmatrix.com  Thu Mar 20 02:03:07 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Thu, 20 Mar 2003 09:03:07 +0200
Subject: [Twisted-Python] odd problem with daemonization?
In-Reply-To: <68236FB5-59D0-11D7-BB45-000393C9700E@twistedmatrix.com>
References: <3E77A6D6.1000409@cubik.org> <68236FB5-59D0-11D7-BB45-000393C9700E@twistedmatrix.com>
Message-ID: <20030320070307.GA31415@lapdog>

On Wed, Mar 19, 2003 at 12:02:46AM -0600, Glyph Lefkowitz wrote:
> The reason that you're having this problem is that on the C++ side of 
> things, FD 0,1,2 are just normal FDs.  This is due to the fact that we 
> trap the sys.stdout _object_ in python, but we don't keep the 
> file-descriptors around.  The Transport of your Protocol is getting 
> created after those FDs have been closed, and is therefore haplessly 
> allocating the FD of stdout by chance.

	Give up hope of being able to process the data written to fd 1
	or 2 directly by the C part, and dup2 /dev/null to 0, 1 and 2?

-- 
:(){ :|:&};:



From cce at clarkevans.com  Thu Mar 20 12:25:27 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu, 20 Mar 2003 17:25:27 +0000
Subject: [Twisted-Python] more thoughts on resumable async data flows
In-Reply-To: <pan.2003.03.20.09.46.53.743414@smurf.noris.de>
References: <20030314065003.GA99373@doublegemini.com> <pan.2003.03.20.09.46.53.743414@smurf.noris.de>
Message-ID: <20030320172527.GC32852@doublegemini.com>

Matthias,

Since I wrote this, I've been informed of two relevant posts:
twistedmatrix.com/pipermail/twisted-python/2002-September/001685.html
twistedmatrix.com/pipermail/twisted-python/2003-February/002808.html.

Both of these are doing the same sort of thing, only that they
are using a 'pull' mechanism rather than a 'push' technique.  Anyway,
at first I was thinking that the 'pull' approach is better and that
the stuff I wrote may not be useful; but upon further rework, I 
now think that both approaches are somewhat complementary, and 
perhaps they could both be supported.

Also, the current version in the Sandbox has a few problems
as far as usage.  I'm not sure how to fix them, but another
refactor is needed.   Specifically, I'm using addFilter about
80% of the time and the mechansim needs to put addFlush in 
its public interface (I needed it about 3 times when I was
re-working some of my application code... )

Best,

Clark

On Thu, Mar 20, 2003 at 10:46:55AM +0100, Matthias Urlichs wrote:
| Hi,
| 
| On Fri, 14 Mar 2003 06:50:03 +0000, Clark C. Evans wrote:
| 
| > Anyway, it's in the sandbox if anyone wants to play...
| > 
| Looks nice. I'll probably use that (for processing a rather large
| amount of database results).
| 
| > P.S.  Unfortunately, it looks like PauseFlow doesn't
| > work in the context of a generator... pity.  Hopefully
| > I'm doing something wrong.
| > 
| You can't leave a generator with an exception and expect it to be
| resumable. (Where should it continue?? There's no mechanism to re-enter it
| at any point other than a yield(), which is not what you want to do!)
| 
| The best idea would probably be to "yield PauseFlow", and to special-case
| that in the flow engine. I don't know what your use case is, though; my
| iterators either don't wait for something (they don't need this), or
| they block on something (I park them in a different thread), or they
| wait on a Deferred or whatever (they're not written as generators).
| 
| -- 
| Matthias
| 
| 
| _______________________________________________
| Twisted-Python mailing list
| Twisted-Python at twistedmatrix.com
| http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From cce at clarkevans.com  Thu Mar 20 13:08:58 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu, 20 Mar 2003 18:08:58 +0000
Subject: [Twisted-Python] supporting start/stop/restart behavior
In-Reply-To: <20030320071832.GA30645@doublegemini.com>
References: <20030320015843.GA29224@doublegemini.com> <C8B9F9A2-5A95-11D7-A96E-000393C9700E@twistedmatrix.com> <20030320071832.GA30645@doublegemini.com>
Message-ID: <20030320180858.GA33168@doublegemini.com>

This patch adds 'stop', 'start', and 'restart' commands to twistd,
so that a simple program, say,

    from twisted.internet import app
    from twisted.web.server import Site
    from twisted.web.static import File

    application = app.Application('test')
    application.listenTCP(8080, Site(File('.')))

Can be 'started'   using:     twistd -y test.py
   and 'stopped'   using:     twistd -y test.py stop
   and 'restarted' using:     twistd -y test.py restart

This is a good way to start thinking cross-platform, as twistd
could be refactored later to, say on Win NT, use NT services
for the start/stop/restart behavior.   For now the current patch
just uses the current "PID" file approach.   Besides providing
a cross-platform iterface, it doesn't require that users new to 
unix learn "kill" or have to get involved with finding the right
pid file.  Lastly, it provides the necessary delay so that a
restart can happen using a single command.

Best,

Clark



--- twistd.py.orig	Wed Mar 19 16:21:46 2003
+++ twistd.py	Thu Mar 20 12:37:56 2003
@@ -43,7 +43,7 @@
 
 
 class ServerOptions(usage.Options):
-    synopsis = "Usage: twistd [options]"
+    synopsis = "Usage: twistd [options] [start|stop|restart]"
 
     optFlags = [['nodaemon','n',  "don't daemonize"],
                 ['savestats', None, "save the Stats object rather than the text output of the profiler."],
@@ -87,6 +87,13 @@
                    'This will only take effect if the application to be run has an application '
                    'name.']]
 
+    subCommands = [['start', None, usage.Options, 
+                    'starts the application requested (default)'],
+                   ['stop', None, usage.Options,
+                    'shuts the given application down if it is running'],
+                   ['restart',None, usage.Options,
+                    'restarts the application']] 
+
     def opt_plugin(self, pkgname):
         """read config.tac from a plugin package, as with -y
         """
@@ -211,6 +218,31 @@
     import pdb
     pdb.set_trace()
 
+def signalApp(config, signal = 0):
+    if os.path.exists(config['pidfile']):
+        try:
+            pid = int(open(config['pidfile']).read())
+        except ValueError:
+            sys.exit('Pidfile %s contains non numeric value' % config['pidfile'])
+
+        try:
+            os.kill(pid, signal)
+        except OSError, why:
+            if why[0] == errno.ESRCH:
+                # The pid doesnt exists.
+                if not config['quiet']:
+                    print 'Removing stale pidfile %s' % config['pidfile']
+                    os.remove(config['pidfile'])
+            else:
+                sys.exit('Can\'t check status of PID %s from pidfile %s: %s' % (pid, config['pidfile'], why[1]))
+        else:
+            if not(signal):
+                sys.exit("""\
+Another twistd server is running, PID %s\n
+This could either be a previously started instance of your application or a
+different application entirely. To start a new one, either run it in some other
+directory, or use my --pidfile and --logfile parameters to avoid clashes.
+""" %  pid)
 
 def runApp(config):
     global initRun
@@ -248,29 +280,7 @@
     # This will fix up accidental function definitions in evaluation spaces
     # and the like.
     initRun = 0
-    if os.path.exists(config['pidfile']):
-        try:
-            pid = int(open(config['pidfile']).read())
-        except ValueError:
-            sys.exit('Pidfile %s contains non numeric value' % config['pidfile'])
-
-        try:
-            os.kill(pid, 0)
-        except OSError, why:
-            if why[0] == errno.ESRCH:
-                # The pid doesnt exists.
-                if not config['quiet']:
-                    print 'Removing stale pidfile %s' % config['pidfile']
-                    os.remove(config['pidfile'])
-            else:
-                sys.exit('Can\'t check status of PID %s from pidfile %s: %s' % (pid, config['pidfile'], why[1]))
-        else:
-            sys.exit("""\
-Another twistd server is running, PID %s\n
-This could either be a previously started instance of your application or a
-different application entirely. To start a new one, either run it in some other
-directory, or use my --pidfile and --logfile parameters to avoid clashes.
-""" %  pid)
+    signalApp(config)
 
     if config['logfile'] == '-':
         if not config['nodaemon']:
@@ -457,6 +467,19 @@
             log.err("--report-profile specified but application has no name (--appname unspecified)")
     log.msg("Server Shut Down.")
 
+def stopApp(config):
+    from signal import SIGTERM
+    from os.path import exists
+    from time import sleep
+    signalApp(config, SIGTERM)
+    nWait = 0  # processes do not die instantly
+    while exists(config['pidfile']) and nWait < 20:
+        sleep(.1)
+        nWait += 1
+
+def restartApp(config):
+    stopApp(config)
+    runApp(config)
 
 def run():
     # make default be "--help"
@@ -471,4 +494,7 @@
         print "%s: %s" % (sys.argv[0], ue)
         os._exit(1)
 
+    cmd = getattr(config,'subCommand','start')
+    if 'stop'    == cmd: return stopApp(config)
+    if 'restart' == cmd: return restartApp(config)
     runApp(config)



From glyph at twistedmatrix.com  Thu Mar 20 16:52:52 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 20 Mar 2003 15:52:52 -0600
Subject: [Twisted-Python] odd problem with daemonization?
In-Reply-To: <20030320070307.GA31415@lapdog>
Message-ID: <4C9F359E-5B1E-11D7-BB9F-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Thursday, March 20, 2003, at 01:03 AM, Tommi Virtanen wrote:

> On Wed, Mar 19, 2003 at 12:02:46AM -0600, Glyph Lefkowitz wrote:
>> The reason that you're having this problem is that on the C++ side of
>> things, FD 0,1,2 are just normal FDs.
>
> 	Give up hope of being able to process the data written to fd 1
> 	or 2 directly by the C part, and dup2 /dev/null to 0, 1 and 2?

Hmm.  What about using pipes that are funneled to the logger for 1 and 
2, and just dup2'ing 0 to /dev/null?
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+ejg5vVGR4uSOE2wRAsU0AJ9/ajbl4Opm3fawaw3hpBY2zhztUACfSS4p
ZxhdWIQtJfjXehNB6i8f9ds=
=oYUh
-----END PGP SIGNATURE-----




From jasper at peak.org  Thu Mar 20 17:20:36 2003
From: jasper at peak.org (Jasper Phillips)
Date: Thu, 20 Mar 2003 14:20:36 -0800 (PST)
Subject: [Twisted-Python] Problems with PB and Jelly...
In-Reply-To: <HOEEKPCOKELHCNIJNMAGCEEECKAA.sean@twistedmatrix.com>
Message-ID: <Pine.LNX.4.44.0303201315350.18841-100000@localhost.localdomain>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Wed, 19 Mar 2003, Sean Riley wrote:

Thanks for your response!

> The "Module not allowed" exception means that you need to call
> setCopierForClass for the class. This maps a server-side class string to a
> client side class so the Jelly knows what type of object to create on the
> client.  For example:
> 
> pb.setCopierForClass('MyApp.game.server.door.Door', RemoteDoor)
> 
> This is usually done at the bottom of the file that the class client-side is
> defined in.

I thought this was what pb.SetUnjellableForClass() was for...  Inspecting
pb.py leads to flavors.py, where I see that setCopierForClass is actually a
reference to setUnjellyableForClass.  So I'm already doing this -- note that
I'm not getting class not allowed exceptions, but module not allowed.

Moreover following the logic through to it's culmination in
jelly.SecurityOptions.allowTypes(), I still can't see how this could affect
which modules are allowed.

It looks like I need to call jelly.globalSecurity.allowInstancesOf()
directly.  Probably in a similar manner to how jelly.SetUnjellyableForClass()
calls globalSecuirty.allowTypes().  Actually, this looks like a bug:
shouldn't SetUnjellyableForClass() call allowInstancesOf() rather than
allowTypes()?

> As far the inheritance, you should only to inherit from RemoteCopy for
> client side objects, not both pb.Copyable and pb.RemoteCopy...

The objects can go both ways, and so it is easiest to set them all to inherit
from both.  This is what's suggested by the documention, so i figured it
shouldn't hurt anything.

> The "setCopyableState" idiom for constructing remote classes may seem
> onerous at first, but its use really is necessary. Distributed objects _are_
> different from regular local objects and the requirements for managing them
> are different too. One of the benefits of PB is its inherent security
> model - it is far more secure and resistant to hackery than using Pickle.
> Pickle's internal use of Python's eval function makes it very scary to
> unserialized Pickled objects on a server...

I do like the security, and many aspects of the architecture are quite nice!

Looking more closely at jelly.py I see that I probably don't need to worry
about setCopyableState(), as it seems to do it's business without relying
upon __init__, and thus __init__ can still be used traditionally.

- -Jasper

> -----Original Message-----
> Sent: Wednesday, March 19, 2003 6:04 PM
> Subject: [Twisted-Python] Problems with PB and Jelly...
> 
> I'm new to twisted, and attempting to use it for networkable gaming;
> unfortunately I've run into some problems.
> 
> I have a Perspective <-> Referenceable server/client setup, and am trying to
> pass objects between them.  Following the online docs I've set all the
> relavent classes to inherit from pb.Copyable + pb.RemoteCopy, and passed
> them
> all to pb.setUnjellyableForClass.
> 
> However, I still get "Module not allowed" exceptions raised in
> twisted.spread.jelly.py line 523.  Looking more closely, I see that modules
> are not allowed unless passed to SecurityOptions.allowModules(), which is
> only called from SecurityOptions.allowInstancesOf(), which is not exposed
> through pb...
> 
> In short I don't see how the example code on:
> http://twistedmatrix.com/documents/howto/pb-copyable
> could possibly work!  Is it indeed necessary to call allowInstancesOf()
> directly?  Hopefully I am just missing something... :-)
> 
> 
> I'm also unsure what to make of the last bullet under "Things To Watch Out
> For" on the above webpage.  It seems unsure whether using __init__ to
> initialize transferable objects is ok...  Must I truly go and hack all
> my objects to not use __init__, and instead use setCopyableState()?
> 
> This, especially when combined with the need to inherit from pb.Copyable +
> pb.RemoteCopy, seems onerous when compared to the minimal interface of
> pickle.  I would like to be able to simple pass objects of arbitrary
> classes,
> provided I've registered them as UnJellyable.  Hopefully I'm missing
> something here as well!
> 
> Thanks in advance,
> - -Jasper
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE+ej658EpjZ7/X9bIRAn6SAKDQ3sl9QMcFYIU3OoOyh6Sh+AFqOACggT0m
PnpcFNBsxqhPk9ioke8picY=
=9G/G
-----END PGP SIGNATURE-----




From glyph at twistedmatrix.com  Thu Mar 20 17:08:32 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 20 Mar 2003 16:08:32 -0600
Subject: [Twisted-Python] supporting start/stop/restart behavior
In-Reply-To: <20030320180858.GA33168@doublegemini.com>
Message-ID: <7CCA809A-5B20-11D7-BB9F-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Thursday, March 20, 2003, at 12:08 PM, Clark C. Evans wrote:

> Can be 'started'   using:     twistd -y test.py
>    and 'stopped'   using:     twistd -y test.py stop
>    and 'restarted' using:     twistd -y test.py restart

I think I like this patch, because if I understand correctly, -y isn't 
a requirement :-).  This should work fine with 'twistd -f test.tap 
restart', correct?

There should probably be some more defined interactions with 
persistence.  But I like the direction.  Can some other 
twisted.internet wizard evaluate as well?
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+ejvjvVGR4uSOE2wRAtDeAKCUPwrCFcTka5IrjmB2VrNY5jXnCgCfSUuE
X8a9qoPkCOk7kZpb9+a/GNs=
=dMH0
-----END PGP SIGNATURE-----




From jasper at peak.org  Thu Mar 20 18:54:39 2003
From: jasper at peak.org (Jasper Phillips)
Date: Thu, 20 Mar 2003 15:54:39 -0800 (PST)
Subject: [Twisted-Python] Problems with PB and Jelly...
In-Reply-To: <Pine.LNX.4.44.0303201315350.18841-100000@localhost.localdomain>
Message-ID: <Pine.LNX.4.44.0303201542520.27156-100000@localhost.localdomain>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Thu, 20 Mar 2003, Jasper Phillips wrote:
> On Wed, 19 Mar 2003, Sean Riley wrote:
> 
> Thanks for your response!
> 
> > The "Module not allowed" exception means that you need to call
> > setCopierForClass for the class. This maps a server-side class string to a
> > client side class so the Jelly knows what type of object to create on the
> > client.  For example:
> >
> > pb.setCopierForClass('MyApp.game.server.door.Door', RemoteDoor)
> >
> > This is usually done at the bottom of the file that the class client-side is
> > defined in.
> 
> I thought this was what pb.SetUnjellableForClass() was for...  Inspecting
> pb.py leads to flavors.py, where I see that setCopierForClass is actually a
> reference to setUnjellyableForClass.  So I'm already doing this -- note that
> I'm not getting class not allowed exceptions, but module not allowed.
> 
> Moreover following the logic through to it's culmination in
> jelly.SecurityOptions.allowTypes(), I still can't see how this could affect
> which modules are allowed.
> 
> It looks like I need to call jelly.globalSecurity.allowInstancesOf()
> directly.  Probably in a similar manner to how jelly.SetUnjellyableForClass()
> calls globalSecuirty.allowTypes().  Actually, this looks like a bug:
> shouldn't SetUnjellyableForClass() call allowInstancesOf() rather than
> allowTypes()?

I see my error now!  I was missing a call to SetUnjellyableForClass() (I
should use SetUnjellyableForClassTree() ).

The "module not allowed" exception is misleading, and stems from what appears
to be an obsolete branch "else" branch of jelly._Unjellier.unjelly(), judging
by the fact that it uses the temp variable jelType for something different
than the "if" branch.

Sorry for all the fuss. :-(
- -Jasper

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE+elTK8EpjZ7/X9bIRAqcRAJ9M6OcyjpsqZ08axlXHErB9k/ZLzwCg/dTe
jLo18sFG5VDnw+YO5E16NxU=
=5xdl
-----END PGP SIGNATURE-----




From tv at twistedmatrix.com  Fri Mar 21 00:48:09 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Fri, 21 Mar 2003 07:48:09 +0200
Subject: [Twisted-Python] odd problem with daemonization?
In-Reply-To: <4C9F359E-5B1E-11D7-BB9F-000393C9700E@twistedmatrix.com>
References: <20030320070307.GA31415@lapdog> <4C9F359E-5B1E-11D7-BB9F-000393C9700E@twistedmatrix.com>
Message-ID: <20030321054809.GA28751@lapdog>

On Thu, Mar 20, 2003 at 03:52:52PM -0600, Glyph Lefkowitz wrote:
> >	Give up hope of being able to process the data written to fd 1
> >	or 2 directly by the C part, and dup2 /dev/null to 0, 1 and 2?
> 
> Hmm.  What about using pipes that are funneled to the logger for 1 and 
> 2, and just dup2'ing 0 to /dev/null?

	That would work. It does make the log weirdly out-of-sync as the
	pipe buffers, but otherwise it's ok.

-- 
:(){ :|:&};:



From cce at clarkevans.com  Fri Mar 21 16:01:17 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Fri, 21 Mar 2003 21:01:17 +0000
Subject: [Twisted-Python] supporting start/stop/restart behavior
In-Reply-To: <7CCA809A-5B20-11D7-BB9F-000393C9700E@twistedmatrix.com>
References: <20030320180858.GA33168@doublegemini.com> <7CCA809A-5B20-11D7-BB9F-000393C9700E@twistedmatrix.com>
Message-ID: <20030321210117.GA40172@doublegemini.com>

On Thu, Mar 20, 2003 at 04:08:32PM -0600, Glyph Lefkowitz wrote:
| On Thursday, March 20, 2003, at 12:08 PM, Clark C. Evans wrote:
| >Can be 'started'   using:     twistd -y test.py
| >   and 'stopped'   using:     twistd -y test.py stop
| >   and 'restarted' using:     twistd -y test.py restart
| 
| I think I like this patch, because if I understand correctly, -y isn't 
| a requirement :-).  This should work fine with 'twistd -f test.tap 
| restart', correct?

Correct.  It is 'othogonal' to the other functions of twistd.

| There should probably be some more defined interactions with 
| persistence.  But I like the direction.  Can some other 
| twisted.internet wizard evaluate as well?

Given that it sends the appropriate signal (shutdown), if
taps are used it should save/restore appropriately.

Clark



From dp at twistedmatrix.com  Fri Mar 21 15:58:51 2003
From: dp at twistedmatrix.com (Donovan Preston)
Date: Fri, 21 Mar 2003 12:58:51 -0800
Subject: [Twisted-Python] supporting start/stop/restart behavior
In-Reply-To: <20030321210117.GA40172@doublegemini.com>
Message-ID: <EB34FE68-5BDF-11D7-9BA4-000393B3EC2C@twistedmatrix.com>

On Friday, March 21, 2003, at 01:01 PM, Clark C. Evans wrote:
>
> Given that it sends the appropriate signal (shutdown), if
> taps are used it should save/restore appropriately.

One big question is what happens when you do a restart; does it stop 
the server and then start it with the original tap, or with the 
-shutdown.tap?

I vote for it restarting the -shutdown.tap, but there are plenty of 
reasons not to do this, too.

Donovan




From cce at clarkevans.com  Fri Mar 21 17:41:34 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Fri, 21 Mar 2003 22:41:34 +0000
Subject: [Twisted-Python] supporting start/stop/restart behavior
In-Reply-To: <EB34FE68-5BDF-11D7-9BA4-000393B3EC2C@twistedmatrix.com>
References: <20030321210117.GA40172@doublegemini.com> <EB34FE68-5BDF-11D7-9BA4-000393B3EC2C@twistedmatrix.com>
Message-ID: <20030321224134.GA40909@doublegemini.com>

On Fri, Mar 21, 2003 at 12:58:51PM -0800, Donovan Preston wrote:
| One big question is what happens when you do a restart; does it stop 
| the server and then start it with the original tap, or with the 
| -shutdown.tap?
| 
| I vote for it restarting the -shutdown.tap, but there are plenty of 
| reasons not to do this, too.

I don't have an opinion, other than pointing out that if 
--no_save is used, then there won't be a -shutdown.tap 
and therefore, this sort of feature would be disabled.   

Proposed implementation:

  Suppose that xxx.tap was the initial application file
  and that it was started with twistd -f xxx.tap; on 
  shutdown this would create a xxx-shutdown.tap

  Then, the 'restart' command would do the following:

    1) if a xxx-initial.tap file isn't there, it 
       should copy xxx.tap to xxx-initial.tap

    2) if a xxx-shutdown.tap file exists, it should
       copy xxx-shutdown.tap to xxx.tap

    3) it should then follow the same process
       as 'start'

On a related topic, I would very much like --python
to imply --no_save ; if someone wants to use taps then
they should write their app.py file to use app.save
functionality to make a .tap file.   It is those people
who arn't using '.tap' saved state files that, in most
cases, will be using the --python option.

Best,

Clark



From tonylim at htmlab.net  Sat Mar 22 00:14:41 2003
From: tonylim at htmlab.net (Anthony Lim)
Date: Sat, 22 Mar 2003 13:14:41 +0800
Subject: [Twisted-Python] game server
Message-ID: <000501c2f031$f1a71d40$5801000a@hermes>

Hi:

 

I am new to Twisted but after browsing the Twisted web site feels that
it may be what I need. I am developing a game server for online
multiplayer turn-based games like the one in http://games.yahoo.com
<http://games.yahoo.com/> . Does anyone have any experience in applying
Twisted in this area? Need all the advice I can get. 

 

I am looking at supporting 20K users with 10% online, and the
possibility of scaling up to 200,000 users or more. Can Twisted be used
for supporting these figures? Any benchmark I can refer to? 

 

Regards

Anthony Lim

 

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20030322/fdfa7f56/attachment.htm 

From anthony.lim at converzal.com  Sat Mar 22 00:12:26 2003
From: anthony.lim at converzal.com (Anthony)
Date: Sat, 22 Mar 2003 13:12:26 +0800
Subject: [Twisted-Python] game server
Message-ID: <000001c2f031$a117f200$5801000a@hermes>

Hi:

 

I am new to Twisted but after browsing the Twisted web site feels that
it may be what I need. I am developing a game server for online
multiplayer turn-based games like the one in http://games.yahoo.com
<http://games.yahoo.com/> . Does anyone have any experience in applying
Twisted in this area? Need all the advice I can get. 

 

I am looking at supporting 20K users with 10% online, and the
possibility of scaling up to 200,000 users or more. Can Twisted be used
for supporting these figures? Any benchmark I can refer to? 

 

Regards

Anthony Lim

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20030322/fc76f0b6/attachment.htm 

From s9900164 at sms.ed.ac.uk  Sat Mar 22 07:04:39 2003
From: s9900164 at sms.ed.ac.uk (Joe Halliwell)
Date: Sat, 22 Mar 2003 12:04:39 +0000
Subject: [Twisted-Python] game server
In-Reply-To: <000501c2f031$f1a71d40$5801000a@hermes>
References: <000501c2f031$f1a71d40$5801000a@hermes>
Message-ID: <200303221204.40392.s9900164@sms.ed.ac.uk>

Hi,

I've been sporadically developing some code for a tic-tac-toe client and 
server upon which I intended to base a tutorial. I've not got around to 
starting the document, but I'd be happy to make the code available to you 
and/or any other interested parties.

Thanks,
Joe

On Saturday 22 Mar 2003 5:14 am, Anthony Lim wrote:
> Hi:
>
>
>
> I am new to Twisted but after browsing the Twisted web site feels that
> it may be what I need. I am developing a game server for online
> multiplayer turn-based games like the one in http://games.yahoo.com
> <http://games.yahoo.com/> . Does anyone have any experience in applying
> Twisted in this area? Need all the advice I can get.
>
>
>
> I am looking at supporting 20K users with 10% online, and the
> possibility of scaling up to 200,000 users or more. Can Twisted be used
> for supporting these figures? Any benchmark I can refer to?
>
>
>
> Regards
>
> Anthony Lim




From missive at hotmail.com  Sat Mar 22 21:30:06 2003
From: missive at hotmail.com (Lee Harr)
Date: Sun, 23 Mar 2003 02:30:06 +0000
Subject: [Twisted-Python] Re: game server
Message-ID: <BAY2-F13d6QR7j1HaKt00076fe2@hotmail.com>

>I've been sporadically developing some code for a tic-tac-toe client and
>server


That's funny. I have one of those too...  :o)

http://www.nongnu.org/pygsear/

Look in the examples/twist_tac_toe/ directory in the distribution.






_________________________________________________________________
The new MSN 8: smart spam protection and 2 months FREE*  
http://join.msn.com/?page=features/junkmail




From s9900164 at sms.ed.ac.uk  Sat Mar 22 17:51:03 2003
From: s9900164 at sms.ed.ac.uk (Joe Halliwell)
Date: Sat, 22 Mar 2003 22:51:03 +0000
Subject: [Twisted-Python] game server
In-Reply-To: <200303221204.40392.s9900164@sms.ed.ac.uk>
References: <000501c2f031$f1a71d40$5801000a@hermes> <200303221204.40392.s9900164@sms.ed.ac.uk>
Message-ID: <200303222251.04324.s9900164@sms.ed.ac.uk>

Since a couple of people have expressed interest in my tutorial-to-be, and I 
have no time to work on it at present, I've posted what little there is on:

http://bigred.homelinux.org/~joe/tictactoe/

It's horrible hacky code and it doesn't seem to work with the latest (CVS) 
Twisted, but hopefully there'll be something there of use...

Cheers,
Joe

On Saturday 22 Mar 2003 12:04 pm, Joe Halliwell wrote:
> Hi,
>
> I've been sporadically developing some code for a tic-tac-toe client and
> server upon which I intended to base a tutorial. I've not got around to
> starting the document, but I'd be happy to make the code available to you
> and/or any other interested parties.
>
> Thanks,
> Joe
>
> On Saturday 22 Mar 2003 5:14 am, Anthony Lim wrote:
> > Hi:
> >
> >
> >
> > I am new to Twisted but after browsing the Twisted web site feels that
> > it may be what I need. I am developing a game server for online
> > multiplayer turn-based games like the one in http://games.yahoo.com
> > <http://games.yahoo.com/> . Does anyone have any experience in applying
> > Twisted in this area? Need all the advice I can get.
> >
> >
> >
> > I am looking at supporting 20K users with 10% online, and the
> > possibility of scaling up to 200,000 users or more. Can Twisted be used
> > for supporting these figures? Any benchmark I can refer to?
> >
> >
> >
> > Regards
> >
> > Anthony Lim
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From warner at lothar.com  Sun Mar 23 02:34:26 2003
From: warner at lothar.com (Brian Warner)
Date: Sat, 22 Mar 2003 23:34:26 -0800 (PST)
Subject: [Twisted-Python] Problems with PB and Jelly...
References: <Pine.LNX.4.44.0303191537250.20559-100000@localhost.localdomain>
Message-ID: <20030322.233426.61636994.warner@lothar.com>

> I have a Perspective <-> Referenceable server/client setup, and am trying to
> pass objects between them.  Following the online docs I've set all the
> relavent classes to inherit from pb.Copyable + pb.RemoteCopy, and passed them
> all to pb.setUnjellyableForClass.

I'll take responsibility for that one (I wrote those docs :). If the classes
behave the same way on both ends, then it can make sense to inherit from both
Copyable and RemoteCopy. If objects are supposed to behave differently
depending upon whether they are the "home" or the "away" form, then you'll
want two classes, where the "home" form is pb.Copyable and the receiving
"away" form is pb.RemoteCopy. Often this depends upon whether the object
really has a home: if it is just a container for some chunk of state, and
doesn't hold any references to other objects, then it doesn't really have a
home and you can use the dual-inheritance trick to cut down on some typing.
In particular classes which could be replaced by dictionaries without losing
any functionality fall into this category.

You still have to keep in mind that the setCopyableState method is the point
where you get to exercise security. The 'state' provided to this method comes
from malicious invaders intent upon compromising your application. Make sure
it can deal with whatever evil it is given.

> I'm also unsure what to make of the last bullet under "Things To Watch Out
> For" on the above webpage.  It seems unsure whether using __init__ to
> initialize transferable objects is ok...  Must I truly go and hack all
> my objects to not use __init__, and instead use setCopyableState()?

To be precise, the received objects are created with a hack that creates an
object of a dummy class, then transforms it into the correct class, then runs
setCopyableState to populate the attributes. By doing this, it avoids running
the new class' __init__ method altogether. When the object is created by you
(by using the class name as a callable), it will run __init__. When it is
created in response to a received serialized instance, it will not run
__init__ but will run setCopyableState instead. This lets you set up objects
differently in the two different situations.

> The "module not allowed" exception is misleading, and stems from what
> appears to be an obsolete branch "else" branch of
> jelly._Unjellier.unjelly(), judging by the fact that it uses the temp
> variable jelType for something different than the "if" branch.

I think you might be right. We have a review of PB scheduled for the PyCon
sprint next tuesday.. I've added that code to the list of stuff to be
examined. We'll try to clear out all the dead code on that day.

cheers,
 -Brian



From jasper at peak.org  Sun Mar 23 06:59:15 2003
From: jasper at peak.org (Jasper Phillips)
Date: Sun, 23 Mar 2003 03:59:15 -0800 (PST)
Subject: [Twisted-Python] Problems with PB and Jelly...
In-Reply-To: <20030322.233426.61636994.warner@lothar.com>
Message-ID: <Pine.LNX.4.44.0303230240270.31265-100000@localhost.localdomain>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Sat, 22 Mar 2003, Brian Warner wrote:

> > I have a Perspective <-> Referenceable server/client setup, and am trying
> > to pass objects between them.  Following the online docs I've set all the
> > relavent classes to inherit from pb.Copyable + pb.RemoteCopy, and passed
> > them all to pb.setUnjellyableForClass.
> 
> I'll take responsibility for that one (I wrote those docs :). If the classes
> behave the same way on both ends, then it can make sense to inherit from both
> Copyable and RemoteCopy. If objects are supposed to behave differently
> depending upon whether they are the "home" or the "away" form, then you'll
> want two classes, where the "home" form is pb.Copyable and the receiving
> "away" form is pb.RemoteCopy.

The way you wrote it in the docs made sense to me!  As my objects are treated
the same on either side, I chose to use multiple inheritence to avoid
tripling the number of classes I needed.

> Often this depends upon whether the object really has a home: if it is just
> a container for some chunk of state, and doesn't hold any references to
> other objects, then it doesn't really have a home and you can use the
> dual-inheritance trick to cut down on some typing.
[snip]

Hmmmm.  You're implying that the state can't hold references to other
objects?  That might explain an exception I'm getting, which I'll describe
below.  If this is true, is there some easy way around this, or do I need
a custom setCopyableState()?

> > I'm also unsure what to make of the last bullet under "Things To Watch Out
> > For" on the above webpage.  It seems unsure whether using __init__ to
> > initialize transferable objects is ok...  Must I truly go and hack all
> > my objects to not use __init__, and instead use setCopyableState()?
> 
> To be precise, the received objects are created with a hack that creates an
> object of a dummy class, then transforms it into the correct class, then runs
> setCopyableState to populate the attributes. By doing this, it avoids running
> the new class' __init__ method altogether. When the object is created by you
> (by using the class name as a callable), it will run __init__. When it is
> created in response to a received serialized instance, it will not run
> __init__ but will run setCopyableState instead. This lets you set up objects
> differently in the two different situations.

I've since gone and investigated more close what's going on.  I've used this
hack before, and it was exactly what I was hoping to see.

However, I'm sometimes getting an exception when the actual dictionary
copying is done, as something other than a dict is being copied into
__dict__.  At this point the "jelType" is "dereference"...

Suddenly, I wonder if this is because I'm using a circular reference?
I have a "map" which contains "cells", which contain "links" having
a reference to "map"...


Damn, it looks like this might be the cuplrit.  "reference" jelyTypes are
recursively descended into before they are stored, and if a dereference is
found before it's stored... some sort of _Dereference object is created?
An attempt is then made to copy this into __dict__, and boom.

I can think of two ways to avoid this problem: 2 passes, or creating
instances and storing a ref to them before recursing to determine their their
state.  Perhaps this _Dereference is intended to be replaced with a real
reference in some sort of 2nd pass?

I'll have to look into this more closely latter.  At first glance it appears
to be something best fixed in twisted itself rather than a local
setCopyableState()... at least to this twisted newbie. ;-)

> > The "module not allowed" exception is misleading, and stems from what
> > appears to be an obsolete branch "else" branch of
> > jelly._Unjellier.unjelly(), judging by the fact that it uses the temp
> > variable jelType for something different than the "if" branch.
> 
> I think you might be right. We have a review of PB scheduled for the PyCon
> sprint next tuesday.. I've added that code to the list of stuff to be
> examined. We'll try to clear out all the dead code on that day.

I've since looked at this code more closely as well.  The "else" branch in
question is most definitely _not_ dead code, but it is confusing.  ;-)

jelly._Unjellier.unjelly() is used in two manners, which you can see fairly
easily by printing out the local variable "jelType".  Sometimes this is a
"type" name that gets munged into a _unjelly_"type" method call (ie the final
"if" branch), and other times "jelType" is a class's local import name, which
is parsed into recursive unjelly commands (the "else" branch).

Then again, that's what I think is going on.  Hard to say, since I'm still
getting exceptions out of it I don't quite grasp. ;-(

- -Jasper

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE+faGY8EpjZ7/X9bIRAq3bAKDOyRV9oB98xDlTlUdx9rgEz1eItgCgx4Yu
7S3uLjnNpZ1JLDNEmMhWT9Y=
=+Ilk
-----END PGP SIGNATURE-----




From missive at hotmail.com  Sun Mar 23 09:19:37 2003
From: missive at hotmail.com (Lee Harr)
Date: Sun, 23 Mar 2003 14:19:37 +0000
Subject: [Twisted-Python] PATCH: doc/howto/conch_client.html
Message-ID: <BAY2-F203atao8KK8Zt00077972@hotmail.com>

Hi;

Found a typo in one of the examples...  Also, I am getting an odd
message from cvs at the end of the file... Not sure what to make
of that.


9:14 >cvs diff -u conch_client.html
Index: conch_client.html
===================================================================
RCS file: /cvs/Twisted/doc/howto/conch_client.html,v
retrieving revision 1.2
diff -u -r1.2 conch_client.html
--- conch_client.html   18 Mar 2003 05:11:45 -0000      1.2
+++ conch_client.html   23 Mar 2003 14:18:30 -0000
@@ -114,7 +114,7 @@
     name = 'session'

     def channelOpen(self, data):
-        d = self.conn.sendRequest(self, 'exec', commons.NS('cat'),
+        d = self.conn.sendRequest(self, 'exec', common.NS('cat'),
                                   wantReply = 1)
         d.addCallback(self._cbSendRequest)
         self.catData = ''
@@ -154,4 +154,4 @@
but we will still receive data through dataReceived().  The closed() method 
is called
when both sides of the connection are closed, and we use it to display the 
data we
received (which should be the same as the data we sent.)</p>
-</body></html>
\ No newline at end of file
+</body></html>






_________________________________________________________________
Tired of spam? Get advanced junk mail protection with MSN 8. 
http://join.msn.com/?page=features/junkmail




From smurf at noris.de  Sun Mar 23 15:04:31 2003
From: smurf at noris.de (Matthias Urlichs)
Date: Sun, 23 Mar 2003 21:04:31 +0100
Subject: [Twisted-Python] read timeouts ?
Message-ID: <200303232104.31413@smurf.noris.de>

Hi,

I have one rather large problem with using Twisted as a Web server (and in 
fact most other kinds of server), which is that there is no timeout.

Thus, stale connections keep piling up, and sooner or later the open file 
limit is reached.  :-(

Suggestions as to where to place some time-out code are appreciated; I'm 
not that well-read in the Twisted internals.

-- 
Matthias Urlichs    |    noris network AG    |    http://smurf.noris.de/
-- 
You can take all the impact that science considerations have on funding
decisions at NASA, put them in the navel of a flea, and have room left
over for a caraway seed and Tony Calio's heart.
                -- F. Allen




From twisted at itamarst.org  Sun Mar 23 15:33:21 2003
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 23 Mar 2003 15:33:21 -0500
Subject: [Twisted-Python] read timeouts ?
In-Reply-To: <200303232104.31413@smurf.noris.de>
References: <200303232104.31413@smurf.noris.de>
Message-ID: <20030323153321.5897c83a.twisted@itamarst.org>

On Sun, 23 Mar 2003 21:04:31 +0100
Matthias Urlichs <smurf at noris.de> wrote:

> I have one rather large problem with using Twisted as a Web server
> (and in fact most other kinds of server), which is that there is no
> timeout.
> 
> Thus, stale connections keep piling up, and sooner or later the open
> file limit is reached.  :-(

I am hoping to get this done at the sprint this week.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From warner at lothar.com  Sun Mar 23 16:17:13 2003
From: warner at lothar.com (Brian Warner)
Date: Sun, 23 Mar 2003 13:17:13 -0800 (PST)
Subject: [Twisted-Python] PATCH: doc/howto/conch_client.html
References: <BAY2-F203atao8KK8Zt00077972@hotmail.com>
Message-ID: <20030323.131713.126579701.warner@lothar.com>

"Lee Harr" <missive at hotmail.com> writes:
> 
> Found a typo in one of the examples...  Also, I am getting an odd
> message from cvs at the end of the file... Not sure what to make
> of that.

Applied.. thanks!

The CVS message is complaining about the fact that the original file ended
with the '>' at the end of '</html>'. 'diff' (as well as some editors) really
prefers files to be composed of complete lines, so it warns you when one of
the files being compared ends with a newline ('</html>\n') and the other
doesn't.

thanks,
 -Brian



From warner at lothar.com  Sun Mar 23 17:22:53 2003
From: warner at lothar.com (Brian Warner)
Date: Sun, 23 Mar 2003 14:22:53 -0800 (PST)
Subject: [Twisted-Python] Problems with PB and Jelly...
References: <Pine.LNX.4.44.0303230240270.31265-100000@localhost.localdomain>
Message-ID: <20030323.142253.52688406.warner@lothar.com>

> Hmmmm.  You're implying that the state can't hold references to other
> objects?  That might explain an exception I'm getting, which I'll describe
> below.  If this is true, is there some easy way around this, or do I need
> a custom setCopyableState()?

The state *can* hold references to other objects (as long as those objects
are themselves somehow transferrable, like pb.Copyable). I draw a distinction
between having or not having references to other objects because data that is
standalone makes more sense when transferred to other memory spaces.

Imagine your data structures make up a big directed graph. The edges are
references, each contained in one object and pointing at another. When you
copy one of the objects out to another memory space, you're plucking a node
out of the graph and putting it somewhere else. What happens to the edges?

It depends upon what flavor the referenced objects inherit from. If they are
pb.Referenceable, the edges turn into pb.RemoteReferences, and it's as if the
edge-arrows are stretched to run from the object's new location back to the
home memory space. If they are pb.Copyable, the reference is followed and the
target object copied just like the original object was. If they are neither,
you get an InsecureJelly exception. The idea is to prevent you from
accidentially copying out objects that you didn't intend to be shared.

So if the object points to a lot of other objects, those referents make up an
environment. If the environment doesn't come with the object, then that
object could be said to have a "home", and then it makes sense to talk about
the "home" version of an object versus a copy that lives somewhere "away"
from that home. If the object is mostly standalone, then it doesn't matter
where the object lives and the home/away distinction is moot.

> However, I'm sometimes getting an exception when the actual dictionary
> copying is done, as something other than a dict is being copied into
> __dict__.  At this point the "jelType" is "dereference"...

Which exception is being raised? If it's the InsecureJelly, then you're
referencing an object that doesn't inherit from one of the PB flavors. You
either need to remove that reference in your getStateToCopy() method (cut the
edge-arrow) or you need to make the referenced objects inherit from something
like pb.Copyable.

If it's something else, let us know (and provide a small test case??) so we can
fix it at the sprint.

> Damn, it looks like this might be the cuplrit.  "reference" jelyTypes are
> recursively descended into before they are stored, and if a dereference is
> found before it's stored... some sort of _Dereference object is created?
> An attempt is then made to copy this into __dict__, and boom.

Yes, the current Jelly code looks for objects that are referenced multiple
times in the same jellying call and marks them with "reference" tags. When
another reference to the same object is detected, it is jellied with a
"dereference" tag that points to the earlier "reference" marker. The "cook",
"prepare", and "preserve" methods are used to implement these multiple
phases. Circular or recursive references are handled because the reference
number is allocated when we start to jelly the object, even though the state
is not yet known.

This scheme will change on Tuesday. The "reference" tags will go away and be
replaced by an implicit marker that is notionally inserted every time we
start jellying a new mutable object. The "dereference" tags will then point
to these implicit markers. This should improve performance quite a bit, and
will pave the way to a combined jelly+banana extension module that should
give an enormous speedup (doing everything in C).

> I'll have to look into this more closely latter.  At first glance it appears
> to be something best fixed in twisted itself rather than a local
> setCopyableState()... at least to this twisted newbie. ;-)

Definitely. Twisted should "just handle" arbitrary reference graphs with no
problems right now.. the change planned for the PyCon sprint will make it
handle them faster and with less on-wire traffic than before.

> I've since looked at this code more closely as well.  The "else" branch in
> question is most definitely _not_ dead code, but it is confusing.  ;-)

I think _unjelly_instance might be dead code, because I don't see anywhere an
"instance" tag could be inserted into the stream. That might be compatibility
with an older version of the jelly side, though. Another item on the PB
sprint will be to implement proper version markers so this sort of thing can
be done properly next time.

cheers,
 -Brian



From mark at metaconcepts.com  Sun Mar 23 17:03:57 2003
From: mark at metaconcepts.com (Mark Brady)
Date: Sun, 23 Mar 2003 22:03:57 +0000
Subject: [Twisted-Python] Twisted https support?
Message-ID: <5.2.0.9.0.20030323220324.00a800b8@mail.metaconcepts.com>

Hello,
	I am new to twisted and having a problem getting https support working. I 
can get the twisted webserver up and running and everything including woven 
works fine however the https option for mktap web just displays the list of 
mktap web options as if I had just typed 'mktap web --help' when I actually 
typed 'mktap web --https=8081'. The port and logfile options work fine. I 
am using activestate python 2.2.2 with twisted 1.0.3 on windows 2000 sp3. I 
have a self signed server.pem in the directory (created using suns 
keytool). Am I using the https option incorrectly? Thank you for your help,

Regards,
Mark Brady. 




From bob at redivi.com  Mon Mar 24 00:22:50 2003
From: bob at redivi.com (Bob Ippolito)
Date: Mon, 24 Mar 2003 00:22:50 -0500
Subject: [Twisted-Python] PyRendezvous has been relicensed to LGPL(!)
Message-ID: <A84BC6E0-5DB8-11D7-835F-000A95686CD8@redivi.com>

I saw on freshmeat today that PyRendezvous (  
http://radio.weblogs.com/0105002/stories/2003/01/06/ 
multicastDnsServiceDiscoverForPython.html ) has been relicensed to  
LGPL, so maybe we don't have to write our own, at least not all of it.

-bob




From glyph at twistedmatrix.com  Mon Mar 24 06:40:53 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 24 Mar 2003 05:40:53 -0600
Subject: [Twisted-Python] PyRendezvous has been relicensed to LGPL(!)
In-Reply-To: <A84BC6E0-5DB8-11D7-835F-000A95686CD8@redivi.com>
Message-ID: <786E374F-5DED-11D7-914F-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Sunday, March 23, 2003, at 11:22 PM, Bob Ippolito wrote:

> I saw on freshmeat today that PyRendezvous (  
> http://radio.weblogs.com/0105002/stories/2003/01/06/ 
> multicastDnsServiceDiscoverForPython.html ) has been relicensed to  
> LGPL, so maybe we don't have to write our own, at least not all of it.

We do tend to NIH here, but there are usually good reasons.  Here are a  
few why rewriting would be a good idea in this case:

1. I can't accept GPL'd software into Twisted if the author isn't  
willing to contribute it.  Perhaps this means we need some kind of  
'contrib' section?

2. That particular project's implementation was completely terrible; I  
may be wrong about this, because I haven't evaluated it thoroughly, but  
it's pretty well tied to threading and blocking.

3. Twisted is going to need to rely on service discovery for a lot of  
stuff, eventually.  I _want_ a version of this rewritten from scratch  
with Twisted idioms in mind.  (I also wouldn't want something this  
potentially important to the core to be off in a seldom-maintained  
'contrib' module.)
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+fu7JvVGR4uSOE2wRAokIAKCipEcWJg0q4mODehtLapPUB64IHACeLWA3
zXGf/PEDx5j16B8gI7R0JHY=
=0Zay
-----END PGP SIGNATURE-----




From bob at redivi.com  Mon Mar 24 07:11:53 2003
From: bob at redivi.com (Bob Ippolito)
Date: Mon, 24 Mar 2003 07:11:53 -0500
Subject: [Twisted-Python] PyRendezvous has been relicensed to LGPL(!)
In-Reply-To: <786E374F-5DED-11D7-914F-000393C9700E@twistedmatrix.com>
Message-ID: <CD0BB084-5DF1-11D7-835F-000A95686CD8@redivi.com>

On Monday, Mar 24, 2003, at 06:40 America/New_York, Glyph Lefkowitz  
wrote:

> On Sunday, March 23, 2003, at 11:22 PM, Bob Ippolito wrote:
>
>> I saw on freshmeat today that PyRendezvous (  
>> http://radio.weblogs.com/0105002/stories/2003/01/06/ 
>> multicastDnsServiceDiscoverForPython.html ) has been relicensed to  
>> LGPL, so maybe we don't have to write our own, at least not all of >> it.
>
> We do tend to NIH here, but there are usually good reasons.  Here are  
> a few why rewriting would be a good idea in this case:
>
> 1. I can't accept GPL'd software into Twisted if the author isn't  
> willing to contribute it.  Perhaps this means we need some kind of  
> 'contrib' section?

That's entirely true.. a contrib section would probably be pretty  
interesting, I don't know how that would work or if it would ever  
really get used though.

> 2. That particular project's implementation was completely terrible; I  
> may be wrong about this, because I haven't evaluated it thoroughly,  
> but it's pretty well tied to threading and blocking.

At a cursory glance, that's what it looked like to me as well.. but  
then I looked a little closer and saw that most of this stuff could be  
hacked apart rather easily (i.e. deleting a bunch of code) and modified  
to fit the reactor pattern.

> 3. Twisted is going to need to rely on service discovery for a lot of  
> stuff, eventually.  I _want_ a version of this rewritten from scratch  
> with Twisted idioms in mind.  (I also wouldn't want something this  
> potentially important to the core to be off in a seldom-maintained  
> 'contrib' module.)

I agree, but if we can create a throwaway prototype of zeroconf service  
discovery by modifying this module then I think we'll be much better  
off for when we do develop our own.  It'll give us a clear picture of  
how NOT to do it in Twisted, what we can and can't do with it, and how  
best to make the API because we'll have surely used one that didn't  
quite make perfect sense in the Twisted world.

-bob




From glyph at twistedmatrix.com  Mon Mar 24 07:50:10 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 24 Mar 2003 06:50:10 -0600
Subject: [Twisted-Python] PyRendezvous has been relicensed to LGPL(!)
In-Reply-To: <CD0BB084-5DF1-11D7-835F-000A95686CD8@redivi.com>
Message-ID: <25AA9582-5DF7-11D7-914F-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Monday, March 24, 2003, at 06:11 AM, Bob Ippolito wrote:

> if we can create a throwaway prototype of zeroconf service discovery 
> by modifying this module then I think we'll be much better off for 
> when we do develop our own.  It'll give us a clear picture of how NOT 
> to do it in Twisted, what we can and can't do with it, and how best to 
> make the API because we'll have surely used one that didn't quite make 
> perfect sense in the Twisted world.

Oh, there's no doubt that having this around as example code would be 
wonderful!  Doing a rapid prototype to experiment would also be good, 
although I think it may end up being easier for someone like exarkun to 
put together a prototype using the existing DNS code we have in 
twisted.names rather than actually copying this project.

I don't know enough about either to be sure, though.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD4DBQE+fv8FvVGR4uSOE2wRAt5kAJj7nI4GBOWLfAtycALoCcLjMDbQAJ46J+Ns
Xw6jnvXZM/fSe2dvSDuQLQ==
=+zW3
-----END PGP SIGNATURE-----




From exarkun at intarweb.us  Mon Mar 24 12:26:15 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Mon, 24 Mar 2003 12:26:15 -0500
Subject: [Twisted-Python] PyCon Logistics
In-Reply-To: <200302120120.h1C1KCjL017055@ratthing-b246.strakt.com>
References: <20030211.191234.596544096.washort@twistedmatrix.com> <200302120120.h1C1KCjL017055@ratthing-b246.strakt.com>
Message-ID: <20030324172615.GA14310@meson.dyndns.org>

On Wed, Feb 12, 2003 at 02:20:12AM +0100, Laura Creighton wrote:
> Thank you very much for the hotel information.
> In return: sushi information!
> 
> http://www.sushitaro.com/
> 
> Sushi Taro
> 1503 17th St., NW (P St.)
> Washington (202) 462-8999
> 
> It has been 2 years, but that was the best last time I was in D.C.
> Near Metro.
> 

  Laura has asked me to negate this recommendation for her.  She visited it
again and it was awful.

  Visit it at your peril ;)

  Jp

-- 
http://catandgirl.com/view.cgi?44
-- 
 up 4 days, 13:59, 6 users, load average: 0.00, 0.00, 0.00



From jjn at kriln.com  Mon Mar 24 16:56:46 2003
From: jjn at kriln.com (Jeremy Noetzelman)
Date: Mon, 24 Mar 2003 21:56:46 +0000 (GMT)
Subject: [Twisted-Python] Twisted, Windows, and Py2Exe
Message-ID: <20030324215446.W10883-100000@nosferatu.kriln.com>

I'm trying to get a very simple application which uses Twisted to package
properly via distutils+py2exe.  It doesn't seem to work very well, and in
fact complains about not being able to find a bunch of things (at the
distutils point in the build process)

The resulting executable doesn't run.  And at this point, it's just a
simple loop which does reactor.iterate(), and that's the extent of the
Twisted code.  W/o any Twisted code, everything works great.

Has anyone used py2exe successfully with a twisted application?

J




From jasper at peak.org  Mon Mar 24 18:02:17 2003
From: jasper at peak.org (Jasper Phillips)
Date: Mon, 24 Mar 2003 15:02:17 -0800 (PST)
Subject: [Twisted-Python] Problems with PB and Jelly...
In-Reply-To: <20030323.142253.52688406.warner@lothar.com>
Message-ID: <Pine.LNX.4.44.0303241427460.7028-100000@localhost.localdomain>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Sun, 23 Mar 2003, Brian Warner wrote:

Thanks for the response!

[snip: pb.Copyable copies all references found]

> > However, I'm sometimes getting an exception when the actual dictionary
> > copying is done, as something other than a dict is being copied into
> > __dict__.  At this point the "jelType" is "dereference"...
 
[snip]
> If it's something else, let us know (and provide a small test case??) so we
> can fix it at the sprint.

Here's the relavent end of the error:
File "..\twisted\spread\flavors.py", line 386, in setCopyableState
  self.__dict__ = state
exceptions.TypeError: __dict__ must be set to a dictionary

I've included a test case at the end of the message.

> > Damn, it looks like this might be the cuplrit.  "reference" jelyTypes are
> > recursively descended into before they are stored, and if a dereference is
> > found before it's stored... some sort of _Dereference object is created?
> > An attempt is then made to copy this into __dict__, and boom.
> 
> Yes, the current Jelly code looks for objects that are referenced multiple
> times in the same jellying call and marks them with "reference" tags. When
> another reference to the same object is detected, it is jellied with a
> "dereference" tag that points to the earlier "reference" marker. The "cook",
> "prepare", and "preserve" methods are used to implement these multiple
> phases. Circular or recursive references are handled because the reference
> number is allocated when we start to jelly the object, even though the state
> is not yet known.

The number is allocated earlier on, but it isn't stored for use by
"derference" jelTypes until after recursion, as I will attempt to describe:

Here are the relavent parts of jelly._Unjellier.  Note that the reference is
stored after it's value is recursively computed -+
                                                 |
def _unjelly_reference(self, lst):               |
    refid = lst[0]                               |
    exp   = lst[1]                               |
    o     = self.unjelly(exp)           <--------+
    ref   = self.references.get(refid)  <--------+
    if (ref is None):
        self.references[refid] = o
    elif isinstance(ref, NotKnown):
        ref.resolveDependants(o)
        self.references[refid] = o
    else:
        assert 0, "Multiple references with same ID!"
    return o

This ends up causing the following method to return a _Dereference, rather
than a state dictionary that unjelly() would normally return.  This then
results in the error I list above.

def _unjelly_dereference(self, lst):
    refid = lst[0]
    print refid #!!! added
    x = self.references.get(refid)
    if x is not None:
        return x
    der = _Dereference(refid)
    self.references[refid] = der
    return der


> This scheme will change on Tuesday. The "reference" tags will go away and be
> replaced by an implicit marker that is notionally inserted every time we
> start jellying a new mutable object. The "dereference" tags will then point
> to these implicit markers. This should improve performance quite a bit, and
> will pave the way to a combined jelly+banana extension module that should
> give an enormous speedup (doing everything in C).

Sounds good!  No point in my suggesting a fix then. ;-)  Will a new version
of twisted be released along with these changes, or would I have to go
through CVS?

[snip]

Here are 3 files for reproducing the "Unjellying a Circular Reference Bug".
Just stick them all in the same place, and start the server then the
client.

- -Jasper


Listing for objectBug.py
=-=-=-=-=-=-=-=-=-=-=-=-
from twisted.spread import pb

class ClassA( pb.Copyable, pb.RemoteCopy ):
    def __init__( self ):
        self.ref = ClassB( self )

class ClassB( pb.Copyable, pb.RemoteCopy ):
    def __init__( self, ref ):
        self.ref = ref

import sys
pb.setCopierForClassTree( sys.modules[__name__], pb.Copyable )


Listing for serverBug.py
=-=-=-=-=-=-=-=-=-=-=-=-
#/usr/bin/env python
from twisted.internet import app
from twisted.spread   import pb
from twisted.cred     import authorizer
import clientBug, objectBug

class MyPer( pb.Perspective ):
    def attached( self, client, identity ):
        self.client = client
        return pb.Perspective.attached( self, client, identity )

    def perspective_receive( self, obj ):
        self.client.callRemote( "receive", obj )

class MyService( pb.Service ):
    perspectiveClass = MyPer

    def __init__( self, serviceParent, auth ):
        pb.Service.__init__( self, "MyService", serviceParent, auth )

def startServer():
    myApp = app.Application("pbServer")
    auth  = authorizer.DefaultAuthorizer( myApp )
    s     = MyService( myApp, auth )

    s.createPerspective( "player1" ).makeIdentity( "password1" )

    myApp.listenTCP( 9000, pb.BrokerFactory( pb.AuthRoot( auth )))
    myApp.run( save=0 )

if __name__ == '__main__':
    startServer()


Listing for clientBug.py
=-=-=-=-=-=-=-=-=-=-=-=-
#/usr/bin/env python
from twisted.internet import reactor
from twisted.spread   import pb
import objectBug

class MyClient( pb.Referenceable ):
    def connect( self, ipAddress, port, user, password ):
        defer = pb.connect( ipAddress, port, user, password,
                            "MyService", client=self, timeout=3 )
        defer.addCallback( self.connected )

    def connected( self, perspective ):
        perspective.callRemote( "receive", objectBug.ClassA() )

    def remote_receive( self, obj ):
        print "Object received back"

def startClient():
    client = MyClient()
    client.connect( "localhost", 9000, "player1", "password1" )
    reactor.run()

if __name__ == '__main__':
    startClient()

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE+f45+8EpjZ7/X9bIRAr0yAJ9P2dwozcY478sVL6GKemwYoHAZmwCfYbhT
ppjMznAw88wjXItJDczxTVU=
=LvPx
-----END PGP SIGNATURE-----




From screwtape at froup.com  Mon Mar 24 19:54:03 2003
From: screwtape at froup.com (screwtape at froup.com)
Date: Tue, 25 Mar 2003 11:54:03 +1100
Subject: [Twisted-Python] Twisted, Windows, and Py2Exe
In-Reply-To: <20030324215446.W10883-100000@nosferatu.kriln.com>
References: <20030324215446.W10883-100000@nosferatu.kriln.com>
Message-ID: <20030325005403.GA30760@ferd2.thristian.org>

On Mon, Mar 24, 2003 at 09:56:46PM +0000, Jeremy Noetzelman wrote:
> Has anyone used py2exe successfully with a twisted application?

Actually, I have, but I don't recall having to do any trickery to make
it run - once it compiled. it ran fine.

Now, using py2exe to build an Twisted-based NT service, that doesn't
work at all - at least, I couldn't get it to run. Such things tend to
end with a backtrace that looks like:

	File "twisted\internet\app.pyc", line 628, in run 
	File "twisted\internet\main.pyc", line 106, in run 
	File "twisted\internet\default.pyc", line 222, in run 
	File "twisted\internet\default.pyc", line 218, in startRunning 
	File "twisted\internet\default.pyc", line 204, in _handleSignals,  
		exceptions.ValueError, signal only works in main thread. 

..or at least, they did the last time I tried.

-- 
 ___________ ____________________________
| Screwtape | Reply-To: munged on Usenet |________ ______ ____ __ _  _   _
|
| | <-- You must be smarter than this stick to ride the Internet.
|



From david at rebirthing.co.nz  Tue Mar 25 08:41:07 2003
From: david at rebirthing.co.nz (David McNab)
Date: 26 Mar 2003 01:41:07 +1200
Subject: [Twisted-Python] wanting more example progs for servers
Message-ID: <1048599667.1622.7.camel@rebirth>

Hi,

I'm just getting acquainted with Twisted.

The examples provided are invaluable, at least the examples I can
presently understand.

But there's areas in Twisted that aren't covered by examples - eg
IRCChatter. My initial attempts to write a basic IRC server using this
protocol (based on simpleserver.py example) were unsuccessful.

If one is an independent developer, and can't afford to pay for
professional Twisted support, what's the best way to get across these
protocol classes?

Is it a matter of reading source code (in cases where the API docs are
incomplete)? Or asking for help on #twisted?

Are there any more example progs in addition to the ones which come with
the standard Twisted distribution?

What has proven to be the fastest way for people to come up to speed
with Twisted?

All help appreciated

Cheers
David





From cce at clarkevans.com  Tue Mar 25 15:57:33 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Tue, 25 Mar 2003 20:57:33 +0000
Subject: [Twisted-Python] ssl.py patch + example client /w server certificate verify
Message-ID: <20030325205733.GA53709@doublegemini.com>

Howdy.  Thanks to those who helped me get this bootstrapped, so that
others may find the task easier... here is an example of a client
which has its own certificate, and verifies a known client certificate.

        from twisted.internet import reactor, protocol
        from twisted.protocols import http
        from twisted.internet import ssl

        class Client(http.HTTPClient):
            def connectionMade(self):
                print 'Connected.'
                self.sendCommand('GET', "/")
                self.sendHeader('User-Agent', 'Twisted-Example')
                self.endHeaders()
                print 'Sent request.'
        
            def handleResponse(self, data):
                print 'Got response.'
                #print data
        
        
        def verifyCert(cert): 
            return ssl.dumpCertificate(cert) == file("server.crt").read()
        
        def fetchURL():
            print 'Connecting to.'
            context = ssl.DefaultOpenSSLContextFactory(
                          "client.key","client.crt",
                          verifyCallback = verifyCert)
            context.isClient = 1
            factory = protocol.ClientFactory()
            factory.protocol = Client
            reactor.connectSSL('localhost', 8443, factory, context)
        
        if __name__ == '__main__':
            reactor.callLater(5,reactor.stop)
            reactor.callLater(1,fetchURL)
            reactor.run()
        
Anyway, it's not the prettiest... in particular, why is there a 
separate class Default* ... could not this default behavior gone
into the shorter ssl.ContextFactory? 

And... here is the patch to ssl.py

--- ssl.py.orig	Tue Mar 25 13:44:40 2003
+++ ssl.py	Tue Mar 25 15:32:15 2003
@@ -36,7 +36,7 @@
 """
 
 # System imports
-from OpenSSL import SSL
+from OpenSSL import SSL, crypto
 import socket
 
 # sibling imports
@@ -55,20 +55,32 @@
         """Return a SSL.Context object. override in subclasses."""
         raise NotImplementedError
 
+def dumpCertificate(cert, filetype = crypto.FILETYPE_PEM ):
+    ''' a helper to dump an incoming cert as a PEM '''
+    return crypto.dump_certificate(filetype, cert)
 
 class DefaultOpenSSLContextFactory(ContextFactory):
 
     def __init__(self, privateKeyFileName, certificateFileName,
-                 sslmethod=SSL.SSLv23_METHOD):
-        self.privateKeyFileName = privateKeyFileName
+                 sslmethod=SSL.SSLv23_METHOD, verifyCallback = None):
+        self.verifyCallback      = (verifyCallback, )      
+        self.privateKeyFileName  = privateKeyFileName
         self.certificateFileName = certificateFileName
         self.sslmethod = sslmethod
         self.cacheContext()
 
+                        
+    def verifyCertificate(self, conn, cert, errno, depth, retcode):
+        cb = self.verifyCallback[0]
+        if cb: return cb(cert)
+        return 1
+
     def cacheContext(self):
         ctx = SSL.Context(self.sslmethod)
         ctx.use_certificate_file(self.certificateFileName)
         ctx.use_privatekey_file(self.privateKeyFileName)
+        if self.verifyCallback[0]:
+            ctx.set_verify(SSL.VERIFY_PEER, self.verifyCertificate) 
         self._context = ctx
 
     def __getstate__(self):





From tv at twistedmatrix.com  Tue Mar 25 11:58:00 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Tue, 25 Mar 2003 18:58:00 +0200
Subject: [Twisted-Python] PyRendezvous has been relicensed to LGPL(!)
In-Reply-To: <786E374F-5DED-11D7-914F-000393C9700E@twistedmatrix.com>
References: <A84BC6E0-5DB8-11D7-835F-000A95686CD8@redivi.com> <786E374F-5DED-11D7-914F-000393C9700E@twistedmatrix.com>
Message-ID: <20030325165800.GB26156@lapdog>

On Mon, Mar 24, 2003 at 05:40:53AM -0600, Glyph Lefkowitz wrote:
> >I saw on freshmeat today that PyRendezvous (  
> >http://radio.weblogs.com/0105002/stories/2003/01/06/ 
> >multicastDnsServiceDiscoverForPython.html ) has been relicensed to  
> >LGPL, so maybe we don't have to write our own, at least not all of it.
   ^^^^
[...]
> 1. I can't accept GPL'd software into Twisted if the author isn't  
                    ^^^
> willing to contribute it.  Perhaps this means we need some kind of  
> 'contrib' section?

	So, how's your dyslexia doing?

	(Yeah, I know you want copyright assignment. But I also feel
	that's evil. The non-good kind of evil.)

-- 
:(){ :|:&};:



From tv at twistedmatrix.com  Tue Mar 25 15:45:54 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Tue, 25 Mar 2003 22:45:54 +0200
Subject: [Twisted-Python] ANN: Eunuchs -- Missing manly parts of UNIX API for Python
Message-ID: <20030325204554.GA557@lapdog>

	At http://twistedmatrix.com/~tv/eunuchs/ and in Debian
	incoming.

$ dpkg -s python-eunuchs
Package: python-eunuchs
Status: install ok installed
Priority: optional
Section: devel
Installed-Size: 36
Maintainer: Tommi Virtanen <tv at debian.org>
Source: eunuchs
Version: 20030325.1
Depends: python, python-twisted, pwgen, python2.2-eunuchs
Description: Missing manly parts of UNIX API for Python
 Eunuchs is a library of Python extension that complement the standard
 libraries in parts where full support for the UNIX API (or the Linux
 API) is missing.
 .
 Most of the functions wrapped by Eunuchs are low-level, dirty, but
 absolutely necessary functions for real systems programming. The aim is
 to have the functions added to mainstream Python libraries.
 .
 Current list of functions included:
 .
 - fchdir(2)
 .
 - recvmsg(2) and sendmsg(2), including use of cmsg(3)
 .
 This is a dummy package that depends on the correct version of
 python-eunuchs for the default version of Python.


-- 
:(){ :|:&};:



From twisted at itamarst.org  Tue Mar 25 15:48:21 2003
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 25 Mar 2003 15:48:21 -0500
Subject: [Twisted-Python] Re: [Twisted-commits] work in progress
In-Reply-To: <E18xv15-0001JU-00@pyramid.twistedmatrix.com>
References: <E18xv15-0001JU-00@pyramid.twistedmatrix.com>
Message-ID: <20030325154821.418ba956.twisted@itamarst.org>

On Tue, 25 Mar 2003 14:27:27 -0600
warner CVS <warner at twistedmatrix.com> wrote:

> Modified files:
> Twisted/twisted/spread/newjelly.py None 1.1

Use a branch, maybe?

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From cce at clarkevans.com  Tue Mar 25 18:04:10 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Tue, 25 Mar 2003 23:04:10 +0000
Subject: [Twisted-Python] ssl.py patch + example client /w server certificate verify
In-Reply-To: <20030325205733.GA53709@doublegemini.com>
References: <20030325205733.GA53709@doublegemini.com>
Message-ID: <20030325230410.GA53961@doublegemini.com>

With some help from etrepum (Bob Ippolito), the example is smaller,
and it even includes using POST.   Thanks Bob.

    from twisted.internet import reactor, ssl
    from twisted.web import client
    import urllib
    
    HOST = 'localhost'; PORT = 8443
    serverCertificate = file("server.crt").read()
    
    def verifyCert(cert):
        return ssl.dumpCertificate(cert) == serverCertificate
    
    def getdata():
        postdata = urllib.urlencode({'some': 'argument', 'another': 'arg'})
        headers  = {"Content-type":"application/x-www-form-urlencoded"}
        context  = ssl.DefaultOpenSSLContextFactory(
                      "client.key","client.crt",
                      verifyCallback = verifyCert)
        factory = client.HTTPClientFactory(HOST, "/some/path", "POST",
                                    postdata,  headers )
        reactor.connectSSL(HOST, PORT, factory, context)
        return factory.deferred
    
    def result(data): print data
    
    if __name__ == '__main__':
        reactor.callLater(5, reactor.stop)
        deferred = getdata()
        deferred.addCallback(result)
        reactor.run()

Ooh, this still requires the following patch to twisted.internet.ssl

--- ssl.py.orig	Tue Mar 25 13:44:40 2003
+++ ssl.py	Tue Mar 25 15:32:15 2003
@@ -36,7 +36,7 @@
 """
 
 # System imports
-from OpenSSL import SSL
+from OpenSSL import SSL, crypto
 import socket
 
 # sibling imports
@@ -55,20 +55,32 @@
         """Return a SSL.Context object. override in subclasses."""
         raise NotImplementedError
 
+def dumpCertificate(cert, filetype = crypto.FILETYPE_PEM ):
+    ''' a helper to dump an incoming cert as a PEM '''
+    return crypto.dump_certificate(filetype, cert)
 
 class DefaultOpenSSLContextFactory(ContextFactory):
 
     def __init__(self, privateKeyFileName, certificateFileName,
-                 sslmethod=SSL.SSLv23_METHOD):
-        self.privateKeyFileName = privateKeyFileName
+                 sslmethod=SSL.SSLv23_METHOD, verifyCallback = None):
+        self.verifyCallback      = (verifyCallback, )      
+        self.privateKeyFileName  = privateKeyFileName
         self.certificateFileName = certificateFileName
         self.sslmethod = sslmethod
         self.cacheContext()
 
+                        
+    def verifyCertificate(self, conn, cert, errno, depth, retcode):
+        cb = self.verifyCallback[0]
+        if cb: return cb(cert)
+        return 1
+
     def cacheContext(self):
         ctx = SSL.Context(self.sslmethod)
         ctx.use_certificate_file(self.certificateFileName)
         ctx.use_privatekey_file(self.privateKeyFileName)
+        if self.verifyCallback[0]:
+            ctx.set_verify(SSL.VERIFY_PEER, self.verifyCertificate) 
         self._context = ctx
 
     def __getstate__(self):




From david at rebirthing.co.nz  Tue Mar 25 16:58:38 2003
From: david at rebirthing.co.nz (David McNab)
Date: 26 Mar 2003 09:58:38 +1200
Subject: [Twisted-Python] Question re twisted.protocols.irc.IRC
Message-ID: <1048629518.1269.3.camel@rebirth>

Hi,

Thx to exarkun who told me T need to implement methods irc_*, eg
irc_JOIN, irc_NICK etc.

Has anyone got any sample code for such methods, to the point of
implementing the basics of ircd, so that clients can register their
nicks, join channels, talk to other users etc?

Thx
David





From david at rebirthing.co.nz  Tue Mar 25 17:04:37 2003
From: david at rebirthing.co.nz (David McNab)
Date: 26 Mar 2003 10:04:37 +1200
Subject: [Twisted-Python] contribution - telnetd example
Message-ID: <1048629877.1269.7.camel@rebirth>

Hi,

Below is an example script that demonstrates usage of the telnet server.
Submitted for possible inclusion in doc/examples

Probably incorrect and ugly from a twisted veteran's perspective, but
it's better than nothing.

Cheers
David


-------------- next part --------------
A non-text attachment was scrubbed...
Name: mytelnetd.py
Type: text/x-python
Size: 1191 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030326/650f756d/attachment.py 

From cce at clarkevans.com  Tue Mar 25 19:19:22 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Wed, 26 Mar 2003 00:19:22 +0000
Subject: [Twisted-Python] ssl.py/client.py patches to implement getSecurePage()
In-Reply-To: <20030325205733.GA53709@doublegemini.com>
References: <20030325205733.GA53709@doublegemini.com>
Message-ID: <20030326001922.GA54084@doublegemini.com>

Well, as per the last post, there seems to be a 'straight-forward'
version of twisted.web.client.getPage ; attached are two patches
which make code like below work.

    from twisted.internet import reactor, ssl
    from twisted.web import client
    import urllib
    
    def result(data): print data
    
    if __name__ == '__main__':
        reactor.callLater(5, reactor.stop)
        # a very simple example
        deferred = client.getSecurePage("https://localhost/some/path")
        deferred.addCallback(result)
        # a more complicated one
        postdata = urllib.urlencode({'some': 'argument', 'another': 'arg'})
        headers  = {"Content-type":"application/x-www-form-urlencoded"}
        deferred = client.getSecurePage("https://localhost:8443/some/path",
                       "POST", postdata, headers,
                       privateKeyFileName = "client.key",
                       certificateFileName = "client.crt",
                       serverCertificateFileName="server.crt")
        deferred.addCallback(result)
        reactor.run()

Best,

Clark
-------------- next part --------------
--- ssl.py.orig	Tue Mar 25 13:44:40 2003
+++ ssl.py	Tue Mar 25 15:32:15 2003
@@ -36,7 +36,7 @@
 """
 
 # System imports
-from OpenSSL import SSL
+from OpenSSL import SSL, crypto
 import socket
 
 # sibling imports
@@ -55,20 +55,32 @@
         """Return a SSL.Context object. override in subclasses."""
         raise NotImplementedError
 
+def dumpCertificate(cert, filetype = crypto.FILETYPE_PEM ):
+    ''' a helper to dump an incoming cert as a PEM '''
+    return crypto.dump_certificate(filetype, cert)
 
 class DefaultOpenSSLContextFactory(ContextFactory):
 
     def __init__(self, privateKeyFileName, certificateFileName,
-                 sslmethod=SSL.SSLv23_METHOD):
-        self.privateKeyFileName = privateKeyFileName
+                 sslmethod=SSL.SSLv23_METHOD, verifyCallback = None):
+        self.verifyCallback      = (verifyCallback, )      
+        self.privateKeyFileName  = privateKeyFileName
         self.certificateFileName = certificateFileName
         self.sslmethod = sslmethod
         self.cacheContext()
 
+                        
+    def verifyCertificate(self, conn, cert, errno, depth, retcode):
+        cb = self.verifyCallback[0]
+        if cb: return cb(cert)
+        return 1
+
     def cacheContext(self):
         ctx = SSL.Context(self.sslmethod)
         ctx.use_certificate_file(self.certificateFileName)
         ctx.use_privatekey_file(self.privateKeyFileName)
+        if self.verifyCallback[0]:
+            ctx.set_verify(SSL.VERIFY_PEER, self.verifyCertificate) 
         self._context = ctx
 
     def __getstate__(self):
-------------- next part --------------
--- client.py.orig	Tue Mar 25 18:10:28 2003
+++ client.py	Tue Mar 25 18:55:08 2003
@@ -63,7 +63,8 @@
         l = self.headers.get('location')
         if not l:
             self.handleStatusDefault()
-        host, port, url = _parse(l[0])
+        https, host, port, url = _parse(l[0])
+        assert not https, "https redirects not implemented yet"
         self.factory.host, self.factory.url = host, url
         reactor.connectTCP(host, port, self.factory)
         self.quietLoss = 1
@@ -105,7 +106,9 @@
 
     protocol = HTTPPageGetter
 
-    def __init__(self, host, url, method='GET', postdata=None, headers=None, agent="Twisted PageGetter"):
+    def __init__(self, host, url, method='GET', postdata=None, 
+                 headers=None, agent=None):
+        if agent is None: agent = "Twisted PageGetter"
         if headers is not None:
             self.headers = headers
         if postdata is not None:
@@ -141,8 +144,10 @@
     protocol = HTTPPageDownloader
     value = None
 
-    def __init__(self, host, url, fileName, method='GET', postdata=None, headers=None, agent="Twisted client"):
-        HTTPClientFactory.__init__(self, host, url, method=method, postdata=postdata, headers=headers, agent=agent)
+    def __init__(self, host, url, fileName, method='GET', postdata=None, 
+                 headers=None, agent = None):
+        HTTPClientFactory.__init__(self, host, url, method, 
+                                   postdata, headers, agent)
         self.fileName = fileName
         self.deferred = defer.Deferred()
         self.waiting = 1
@@ -166,26 +171,59 @@
 def _parse(url):
     parsed = urlparse.urlparse(url)
     url = urlparse.urlunparse(('','')+parsed[2:])
-    host, port = parsed[1], 80
+    host = parsed[1]
+    if 'https' == parsed[0]:
+        https, port = 1, 443
+    else:
+        https, port = 0, 80
     if ':' in host:
         host, port = host.split(':')
         port = int(port)
-    return host, port, url
+    return https, host, port, url
 
-def getPage(url, *args, **kwargs):
+def getPage(url, method='GET', postdata=None, headers=None, agent = None):
     '''download a web page
 
     Download a page. Return a deferred, which will
     callback with a page or errback with a description
     of the error.
     '''
-    host, port, url = _parse(url)
-    factory = HTTPClientFactory(host, url, *args, **kwargs)
+    https, host, port, path = _parse(url)
+    if https: return getSecurePage(url, method, postdata, headers, agent)
+    factory = HTTPClientFactory(host, path, method, postdata, headers, agent)
     reactor.connectTCP(host, port, factory)
     return factory.deferred
 
+try:
+    from twisted.internet import ssl
+    def getSecurePage(url, method='GET', postdata=None, headers=None, 
+                      agent = None,
+                      privateKeyFileName = None, certificateFileName = None,
+                      sslmethod=ssl.SSL.SSLv23_METHOD, verifyCallback = None, 
+                      serverCertificateFileName = None):
+        """ download a secure page """
+        https, host, port, path = _parse(url)
+        if serverCertificateFileName:
+            cert = file(serverCertificateFileName).read()
+            verifyCallback = lambda rhs: ssl.dumpCertificate(cert) == rhs
+        if verifyCallback or certificateFileName or privateKeyFileName:
+            context = ssl.DefaultOpenSSLContextFactory(
+                          privateKeyFileName, certificateFileName,
+                          sslmethod, verifyCallback)
+            context.isClient = 1
+        else:
+            context = ssl.ClientContextFactory()
+        factory = HTTPClientFactory(host, path, method, postdata, headers)
+        reactor.connectSSL(host, port, factory, context)
+        return factory.deferred
+except:
+    def getSecurePage(*args,**kwargs):
+        raise Exception("ssl not available")
+
 def downloadPage(url, file, *args, **kwargs):
-    host, port, url = _parse(url)
-    factory = HTTPDownloader(host, url, file, *args, **kwargs)
+    https, host, port, path = _parse(url)
+    assert not https, "https is not yet implemented here"
+    factory = HTTPDownloader(host, path, file, *args, **kwargs)
     reactor.connectTCP(host, port, factory)
     return factory.deferred
+

From cce at clarkevans.com  Tue Mar 25 19:33:14 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Wed, 26 Mar 2003 00:33:14 +0000
Subject: [Twisted-Python] PyCon Logistics
In-Reply-To: <20030324172615.GA14310@meson.dyndns.org>
References: <20030211.191234.596544096.washort@twistedmatrix.com> <200302120120.h1C1KCjL017055@ratthing-b246.strakt.com> <20030324172615.GA14310@meson.dyndns.org>
Message-ID: <20030326003314.GA54258@doublegemini.com>

On Mon, Mar 24, 2003 at 12:26:15PM -0500, Jp Calderone wrote:
| On Wed, Feb 12, 2003 at 02:20:12AM +0100, Laura Creighton wrote:
| > Sushi Taro
| > 1503 17th St., NW (P St.)
| > Washington (202) 462-8999
| 
| Laura has asked me to negate this recommendation for her.  She visited it
| again and it was awful.

As of last summer, this was a very good place to eat (albeit a 
bit on the pricy end of things).  I'm curious what she ordered...

Clark



From david at rebirthing.co.nz  Tue Mar 25 23:32:11 2003
From: david at rebirthing.co.nz (David McNab)
Date: 26 Mar 2003 16:32:11 +1200
Subject: [Twisted-Python] help! - listenTCP failing
Message-ID: <1048653131.1631.38.camel@rebirth>

Hi,

I'm building an app that will need the ability to start and stop
protocol servers dynamically.

As part of figuring this out, I've added an ApplicationService to the
app, and within ApplicationService.startService(), I'm calling
self.get_application.listenTCP(portnum, myprotocol).

This is having no visible effect, since the port is not getting opened.

I tried, within startService(), calling reactor.listenTCP() instead.
This starts up the protocol and opens the port just fine, but when I
later call app.unlistenTCP(port) to shut down the protocol, I get the
exception (see below).

What am I doing wrong?
What's the best and simplest way to dynamically start and stop server
protocols at runtime()?

Thanks in advance
David

Traceback (most recent call last):
  File "/usr/lib/python2.2/site-packages/twisted/internet/app.py", line
744, in run
    main.run(installSignalHandlers=installSignalHandlers)
  File "/usr/lib/python2.2/site-packages/twisted/internet/main.py", line
106, in run
    _getReactor().run()
  File "/usr/lib/python2.2/site-packages/twisted/internet/default.py",
line 113, in run
    self.mainLoop()
  File "/usr/lib/python2.2/site-packages/twisted/internet/default.py",
line 124, in mainLoop
    self.doIteration(t)
--- <exception caught here> ---
  File "/usr/lib/python2.2/site-packages/twisted/internet/default.py",
line 450, in doSelect
    why = getattr(selectable, method)()
  File "/usr/lib/python2.2/site-packages/twisted/internet/tcp.py", line
105, in doRead
    return self.protocol.dataReceived(data)
  File "/usr/lib/python2.2/site-packages/twisted/protocols/telnet.py",
line 314, in dataReceived
    why = self.processChunk(c)
  File "/usr/lib/python2.2/site-packages/twisted/protocols/telnet.py",
line 261, in processChunk
    self.processLine(buf)
  File "/usr/lib/python2.2/site-packages/twisted/protocols/telnet.py",
line 221, in processLine
    self.mode = getattr(self, "telnet_"+self.mode)(line)
  File "/usr/lib/python2.2/site-packages/twisted/protocols/telnet.py",
line 237, in telnet_Password
    if not self.checkUserAndPass(self.username, paswd):
  File "mytelnetd.py", line 34, in checkUserAndPass
    self.factory.appl.killTelnet()
  File "mytelnetd.py", line 61, in killTelnet
    self.unlistenTCP(2000)
  File "/usr/lib/python2.2/site-packages/twisted/internet/app.py", line
444, in unlistenTCP
    if self._listenerDict.has_key((port_, interface_)):
exceptions.UnboundLocalError: local variable 'port_' referenced before
assignment
 





From exarkun at intarweb.us  Wed Mar 26 20:34:43 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Wed, 26 Mar 2003 20:34:43 -0500
Subject: [Twisted-Python] Interface Inheritance (Ha ha METACLASS)
Message-ID: <20030327013443.GA22509@meson.dyndns.org>

    from twisted.python.components import Interface

    class InterfaceImplementor(type):
        def __new__(klass, name, bases, dict):
            realBases = []
            faceBases = []
            for b in bases:
                if isinstance(b, Interface):
                    faceBases.append(b)
                elif hasattr(b, '__implements__'):
                    faceBases.extend(b.__implements__)
                else:
                    realBases.append(b)
            dict['__implement__'] = tuple(faceBases)
            return type.__new__(klass, name, realBases, dict)


  Inspired by fzZzy ;)

  Jp

-- 
"There is no reason for any individual to have a computer in their
home."
                -- Ken Olson, President of DEC, World Future Society
                   Convention, 1977
-- 
 up 6 days, 21:59, 4 users, load average: 0.52, 0.41, 0.19
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030326/e600c1d8/attachment.pgp 

From exarkun at intarweb.us  Wed Mar 26 20:54:48 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Wed, 26 Mar 2003 20:54:48 -0500
Subject: [Twisted-Python] help! - listenTCP failing
In-Reply-To: <1048653131.1631.38.camel@rebirth>
References: <1048653131.1631.38.camel@rebirth>
Message-ID: <20030327015448.GB22509@meson.dyndns.org>

On Wed, Mar 26, 2003 at 04:32:11PM +1200, David McNab wrote:
> Hi,
> 
> I'm building an app that will need the ability to start and stop
> protocol servers dynamically.
> 
> As part of figuring this out, I've added an ApplicationService to the
> app, and within ApplicationService.startService(), I'm calling
> self.get_application.listenTCP(portnum, myprotocol).
> 
> This is having no visible effect, since the port is not getting opened.
> 
> I tried, within startService(), calling reactor.listenTCP() instead.
> This starts up the protocol and opens the port just fine, but when I
> later call app.unlistenTCP(port) to shut down the protocol, I get the
> exception (see below).
> 
> What am I doing wrong?
> What's the best and simplest way to dynamically start and stop server
> protocols at runtime()?
> 

  It seems as though reactor.listenTCP() is never being invoked.  The
traceback you got below is a result of this.  I've fixed it in CVS so that
it raises twisted.internet.error.NotListeningError now, instead of a
confusing UnboundLocalError.

  Why reactor.listenTCP() isn't being invoked is unclear.  You might try
adding some debug prints to the critical portions of the code, or stepping
through it with pdb.

  If you are still stuck after some attempts, post a little code (keyword:
little) that demonstrates the problem, so a developer can easily duplicate
and then fix it.

  Jp

-- 
"There is no reason for any individual to have a computer in their
home."
                -- Ken Olson, President of DEC, World Future Society
                   Convention, 1977
-- 
 up 6 days, 21:59, 4 users, load average: 0.52, 0.41, 0.19



From dpjanes at sympatico.ca  Wed Mar 26 16:48:41 2003
From: dpjanes at sympatico.ca (David P. Janes)
Date: Wed, 26 Mar 2003 16:48:41 -0500
Subject: [Twisted-Python] Newbie question, using Twisted with cygwin
Message-ID: <009d01c2f3e1$77943cf0$c840e540@sympatico.ca>

So, I've installed Twisted using the Windows installer, using a plain
vanilla Python 2.2 installation. I'm in cygwin, so I set up appropriate
aliases:

alias mktap='python c:/python22/lib/site-packages/twisted/scripts/mktap.py'
alias twistd='python
c:/python22/lib/site-packages/twisted/scripts/twistd.py'

No errors occur during the installation.

I run "mktap", specifying a port and a log file, and I get a "web.tap" file.
Then I run
twistd -f web.tap

And I get .... nothing. No log file, no errors, no process running.

Very very strange...






From exarkun at intarweb.us  Wed Mar 26 22:45:55 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Wed, 26 Mar 2003 22:45:55 -0500
Subject: [Twisted-Python] Newbie question, using Twisted with cygwin
In-Reply-To: <009d01c2f3e1$77943cf0$c840e540@sympatico.ca>
References: <009d01c2f3e1$77943cf0$c840e540@sympatico.ca>
Message-ID: <20030327034555.GA22656@meson.dyndns.org>

On Wed, Mar 26, 2003 at 04:48:41PM -0500, David P. Janes wrote:
> So, I've installed Twisted using the Windows installer, using a plain
> vanilla Python 2.2 installation. I'm in cygwin, so I set up appropriate
> aliases:
> 
> alias mktap='python c:/python22/lib/site-packages/twisted/scripts/mktap.py'
> alias twistd='python
> c:/python22/lib/site-packages/twisted/scripts/twistd.py'
> 
> No errors occur during the installation.
> 
> I run "mktap", specifying a port and a log file, and I get a "web.tap" file.
> Then I run
> twistd -f web.tap
> 
> And I get .... nothing. No log file, no errors, no process running.
> 
> Very very strange...
> 

  Possibly very strange indeed... though allowances must be made when
running on emulation layers ;)

  You might want to try running twistd with a couple extra options,
--nodeamon and --spew.  The output will hopefully let you track down the
exact point of the problem, and give us a more informative report :)

  Jp

-- 
It is practically impossible to teach good programming style to
students that have had prior exposure to BASIC: as potential
programmers they are mentally mutilated beyond hope of
regeneration.        -- Dijkstra
-- 
 up 6 days, 23:59, 9 users, load average: 0.11, 0.04, 0.01
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030326/50f00954/attachment.pgp 

From mario at ruggier.org  Fri Mar 28 10:00:46 2003
From: mario at ruggier.org (Mario Ruggier)
Date: Fri, 28 Mar 2003 16:00:46 +0100
Subject: [Twisted-Python] response with special characters, utf-8
Message-ID: <0E1F58F6-612E-11D7-9F25-000393756786@ruggier.org>

Hello,

the rpy below returns a string with special characters, which I
would like to be displayed by the web client. However the 3 non-ascii
characters below are displayed as garbage (even if differently), in two
browsers I have tried with (IE and Safari). What am I missing?

Thanks for any help,

	mario


##################################
### chars_test.rpy

from twisted.web import resource
from twisted.web.server import NOT_DONE_YET

def errBack(err, request):
     request.write('error: ' + str(err) )
     request.finish()

def returnString(result, request):
     request.setHeader = ('Content-Type', 'text/html; charset=utf-8')
     request.write(result)
     request.finish()

def responseString(request):
     return '''<html><title>characters test</title>
         </head>
         <body>
             3 sample ??? characters (e+grave, c+cedille, e+aigu)
         </body>
         </html>
         '''

class MyResource(resource.Resource):
     def render(self, request):
         from twisted.internet import threads
         d = threads.deferToThread(responseString,request)
         d.addCallback(returnString,request)
         d.addErrback(errBack, request)
         return NOT_DONE_YET

###

resource = MyResource()

###



From smurf at noris.de  Sat Mar 29 00:42:30 2003
From: smurf at noris.de (Matthias Urlichs)
Date: Sat, 29 Mar 2003 06:42:30 +0100
Subject: [Twisted-Python] response with special characters, utf-8
References: <0E1F58F6-612E-11D7-9F25-000393756786@ruggier.org>
Message-ID: <pan.2003.03.29.05.42.28.83604@smurf.noris.de>

Hi,

On Fri, 28 Mar 2003 15:00:46 +0000, Mario Ruggier wrote:

This

> request.setHeader = ('Content-Type', 'text/html; charset=utf-8')

seems to have a '=' sign in it which doesn't make ANY sense at all.

>              3 sample ??? characters (e+grave, c+cedille, e+aigu)

Note that your email was encoded as iso-8859-1.

-- 
Matthias




From mario at ruggier.org  Sat Mar 29 05:41:00 2003
From: mario at ruggier.org (Mario Ruggier)
Date: Sat, 29 Mar 2003 11:41:00 +0100
Subject: [Twisted-Python] response with special characters, utf-8
In-Reply-To: <pan.2003.03.29.05.42.28.83604@smurf.noris.de>
Message-ID: <EE78A0B2-61D2-11D7-BB27-000393756786@ruggier.org>

On samedi, mars 29, 2003, at 06:42 Europe/Amsterdam, Matthias Urlichs 
wrote:
>> request.setHeader = ('Content-Type', 'text/html; charset=utf-8')
>
> seems to have a '=' sign in it which doesn't make ANY sense at all.

Yeah, looks bizarre. But that's how they say it should be set:
http://www.w3.org/International/O-HTTP-charset

>>              3 sample ??? characters (e+grave, c+cedille, e+aigu)
>
> Note that your email was encoded as iso-8859-1.

Yes, what can I say -- that's mail...

If I try to manually tell python that a string is latin-1, and i want it
in utf-8, i get similar garbage results in the client browsers:

	return unicode('???','latin-1').encode('utf-8')

How can I verify that the web clients are indeed receiving utf-8?
It seems that they are, but something very strange is happening
here, on Mac OS Jaguar (note that I am running with
sys.setdefaultencoding('utf-8') in sitecustomize.py):

- in IE:mac 5.2, the character set chosen by default is indeed
UTF-8, but the 3 non-ascii characters are just not displayed,
and IE does not allow to dynamically change the automatically
selected character set

- in Safari (beta 6) the indicated character set is "default", whatever 
that is,
where the 3 chars are not displayed. iIf I change to utf-8 (he allows 
it),
the 3 chars are still not displayed, but if i choose the char set he 
calls
"Western (Mac OS Roman)" the 3 chars are displayed correctly.

Anyone can tell what's going on?
Also, can anyone tell me if the rpy below works correctly on some
python/twistedweb/client configuration ?

Thanks for any help,

	mario


##################################
## chars_test.rpy

from twisted.web import resource
from twisted.web.server import NOT_DONE_YET

def errBack(err, request):
     request.write('error: ' + str(err) )
     request.finish()

def returnString(result, request):
     request.setHeader = ('Content-Type', 'text/html; charset=utf-8')
     request.write(result)
     request.finish()

def responseString(request):
     return '''<html><title>characters test</title>
         <meta http-equiv="Content-Type" content="text/html; 
charset=utf-8">
         </head>
         <body>
             -a- 3 sample chars -b- ??? -c- &egrave;&ccedil;&eacute; -d-
         </body>
         </html>
         '''

class MyResource(resource.Resource):
     def render(self, request):
         from twisted.internet import threads
         d = threads.deferToThread(responseString,request)
         d.addCallback(returnString,request)
         d.addErrback(errBack, request)
         return NOT_DONE_YET

###

resource = MyResource()

###



From twisted at itamarst.org  Sun Mar 30 15:32:24 2003
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 30 Mar 2003 15:32:24 -0500
Subject: [Twisted-Python] response with special characters, utf-8
In-Reply-To: <pan.2003.03.29.05.42.28.83604@smurf.noris.de>
References: <0E1F58F6-612E-11D7-9F25-000393756786@ruggier.org>
	<pan.2003.03.29.05.42.28.83604@smurf.noris.de>
Message-ID: <20030330153224.30347970.twisted@itamarst.org>

On Sat, 29 Mar 2003 06:42:30 +0100
"Matthias Urlichs" <smurf at noris.de> wrote:

> > request.setHeader = ('Content-Type', 'text/html; charset=utf-8')
> 
> seems to have a '=' sign in it which doesn't make ANY sense at all.

Exactly! This should be: 

request.setHeader('Content-Type', 'text/html; charset=utf-8')

I assume.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From twisted at itamarst.org  Sun Mar 30 15:43:52 2003
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 30 Mar 2003 15:43:52 -0500
Subject: [Twisted-Python] help! - listenTCP failing
In-Reply-To: <1048653131.1631.38.camel@rebirth>
References: <1048653131.1631.38.camel@rebirth>
Message-ID: <20030330154352.2186a52c.twisted@itamarst.org>

On 26 Mar 2003 16:32:11 +1200
David McNab <david at rebirthing.co.nz> wrote:

> I'm building an app that will need the ability to start and stop
> protocol servers dynamically.
> 
> As part of figuring this out, I've added an ApplicationService to the
> app, and within ApplicationService.startService(), I'm calling
> self.get_application.listenTCP(portnum, myprotocol).

You probably want to do this on the reactor anyway, since these are not
"persistent" servers, as it were. That being said, this is a bug in
Twisted - I fixed it in CVS, hopefully.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From twisted at itamarst.org  Sun Mar 30 15:48:04 2003
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 30 Mar 2003 15:48:04 -0500
Subject: [Twisted-Python] Question re twisted.protocols.irc.IRC
In-Reply-To: <1048629518.1269.3.camel@rebirth>
References: <1048629518.1269.3.camel@rebirth>
Message-ID: <20030330154804.1b56827e.twisted@itamarst.org>

On 26 Mar 2003 09:58:38 +1200
David McNab <david at rebirthing.co.nz> wrote:

> Thx to exarkun who told me T need to implement methods irc_*, eg
> irc_JOIN, irc_NICK etc.
> 
> Has anyone got any sample code for such methods, to the point of
> implementing the basics of ircd, so that clients can register their
> nicks, join channels, talk to other users etc?

Look at the twisted.words package.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From mario at ruggier.org  Sun Mar 30 16:51:20 2003
From: mario at ruggier.org (Mario Ruggier)
Date: Sun, 30 Mar 2003 23:51:20 +0200
Subject: [Twisted-Python] response with special characters, utf-8
In-Reply-To: <20030330153224.30347970.twisted@itamarst.org>
Message-ID: <BE4671FA-62F9-11D7-BB27-000393756786@ruggier.org>

On dimanche, mars 30, 2003, at 22:32 Europe/Amsterdam, Itamar 
Shtull-Trauring wrote:
> On Sat, 29 Mar 2003 06:42:30 +0100
> "Matthias Urlichs" <smurf at noris.de> wrote:
>
>>> request.setHeader = ('Content-Type', 'text/html; charset=utf-8')
>>
>> seems to have a '=' sign in it which doesn't make ANY sense at all.
>
> Exactly! This should be:
>
> request.setHeader('Content-Type', 'text/html; charset=utf-8')
>

Ooops! Do not know how many times i;ve looked at that!
Thanks, both of you...

mario


> I assume.
>
> -- 
> Itamar Shtull-Trauring    http://itamarst.org/
> http://www.zoteca.com -- Python & Twisted consulting




From acapnotic at twistedmatrix.com  Sun Mar 30 19:04:51 2003
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 30 Mar 2003 16:04:51 -0800
Subject: [Twisted-Python] Newbie question, using Twisted with cygwin
In-Reply-To: <009d01c2f3e1$77943cf0$c840e540@sympatico.ca>
References: <009d01c2f3e1$77943cf0$c840e540@sympatico.ca>
Message-ID: <1049069089.16699.27.camel@troglodyte.funhouse>

On Wed, 2003-03-26 at 13:48, David P. Janes wrote:
> alias mktap='python c:/python22/lib/site-packages/twisted/scripts/mktap.py'
> alias twistd='python
> c:/python22/lib/site-packages/twisted/scripts/twistd.py'

This is wrong; you want to be running the scripts found in Twisted/bin,
not the modules in twisted.scripts.  I don't know where the windows
installer puts those.

-- 
The moon is waning crescent, 4.3% illuminated, 27.6 days old.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030330/f597a36a/attachment.pgp 

From twisted at itamarst.org  Sun Mar 30 19:23:30 2003
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 30 Mar 2003 19:23:30 -0500
Subject: [Twisted-Python] Newbie question, using Twisted with cygwin
In-Reply-To: <1049069089.16699.27.camel@troglodyte.funhouse>
References: <009d01c2f3e1$77943cf0$c840e540@sympatico.ca>
	<1049069089.16699.27.camel@troglodyte.funhouse>
Message-ID: <20030330192330.5770094c.twisted@itamarst.org>

On 30 Mar 2003 16:04:51 -0800
Kevin Turner <acapnotic at twistedmatrix.com> wrote:

> On Wed, 2003-03-26 at 13:48, David P. Janes wrote:
> > alias mktap='python
> > c:/python22/lib/site-packages/twisted/scripts/mktap.py' alias
> > twistd='python
> > c:/python22/lib/site-packages/twisted/scripts/twistd.py'
> 
> This is wrong; you want to be running the scripts found in
> Twisted/bin, not the modules in twisted.scripts.  I don't know where
> the windows installer puts those.

C:\Python22\scripts\twistd.py etc.


-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From exarkun at intarweb.us  Sat Mar  1 10:30:39 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Sat, 1 Mar 2003 12:30:39 -0500
Subject: [Twisted-Python] [OT] Make Python Faster
In-Reply-To: <20030228.230819.59483150.glyph@twistedmatrix.com>
References: <20030301042000.GA22038@meson.dyndns.org> <20030228.230819.59483150.glyph@twistedmatrix.com>
Message-ID: <20030301173039.GA26786@meson.dyndns.org>

On Fri, Feb 28, 2003 at 11:08:19PM -0600, Glyph Lefkowitz wrote:
> 
> On Fri, 28 Feb 2003 23:20:00 -0500, Jp Calderone <exarkun at intarweb.us> wrote:
> >   I don't propose this for inclusion with Twisted, but if anyone wants to
> > apply it to their local copy and run real apps with it, it would be helpful
> > to Python, and I'm sure Skip would appreciate the extra data points.
> 
> I disagree.  This is exactly the kind of thing that we should make easy, to
> give the Python developers, and ourselves, as much useful information as we can
> about the community.  It should perhaps not be a default, but having a flag to
> twistd (maybe --profile-me-harder?) so that people have a "one click" way to
> report their run-time results would increase the number of people using it, I'm
> sure.

  Thy will be done!

  Jp

-- 
http://catandgirl.com/view.cgi?44
-- 
 up 20 days, 22:29, 4 users, load average: 0.45, 0.27, 0.26
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030301/8847e38c/attachment.sig>

From acapnotic at twistedmatrix.com  Sat Mar  1 17:38:09 2003
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 01 Mar 2003 16:38:09 -0800
Subject: [Twisted-Python] GtkWindow
In-Reply-To: <b3o9v3$is2$1@main.gmane.org>
References: <b3o9v3$is2$1@main.gmane.org>
Message-ID: <1046565487.1165.153.camel@troglodyte.funhouse>

On Fri, 2003-02-28 at 10:31, Philippe Lafoucrière wrote:
> manhole pygtk seems to be outdated !

It is you sir who are outdated!  That is to say, this was Fixed In CVS
on or about Feb 23rd, and will be in the next release.

Cheers,

 - Kevin

-- 
The moon is new, 2.0% illuminated, 28.2 days old.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20030301/d8bb4382/attachment.sig>

From lafou at wanadoo.fr  Sun Mar  2 03:26:13 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: Sun, 02 Mar 2003 11:26:13 +0100
Subject: [Twisted-Python] Re: GtkWindow
References: <b3o9v3$is2$1@main.gmane.org> <1046565487.1165.153.camel@troglodyte.funhouse>
Message-ID: <b3sm8k$18n$1@main.gmane.org>

Excuse-me

I discovered Twisted a few days ago, and work with the STABLE version (which 
is obviously not stable :p ).

Do you have any idea of the next release date ?

Thank you

Philippe

Kevin Turner wrote:

> On Fri, 2003-02-28 at 10:31, Philippe Lafoucri�re wrote:
>> manhole pygtk seems to be outdated !
> 
> It is you sir who are outdated!  That is to say, this was Fixed In CVS
> on or about Feb 23rd, and will be in the next release.
> 
> Cheers,
> 
>  - Kevin
> 





From twisted at itamarst.org  Sun Mar  2 09:51:06 2003
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 2 Mar 2003 11:51:06 -0500
Subject: [Twisted-Python] PEP 308 (ternary operation) voting is open
Message-ID: <20030302115106.616fbf3c.twisted@itamarst.org>

http://mail.python.org/pipermail/python-announce-list/2003-March/002083.html

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting
***> Stop the war: http://unitedforpeace.org/ <***



From cce at clarkevans.com  Mon Mar  3 11:17:48 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Mon, 3 Mar 2003 18:17:48 +0000
Subject: [Twisted-Python] threadable.init() operation
Message-ID: <20030303181748.GA48059@doublegemini.com>

I've read the threading/enterprise howtos and am still
trying to grok thread <-> event loop communication.  In
particular, I'm curious what exactly what threadable.init()
does.  I was expecting something rather simple, which 
implementes communcation between the main event pump and
each thread (callInThread, callFromThread).  However, this
code seems to be doing much more than that, and I don't
quite understand what it is doing or why.  A bit of a 
primer would be great.

I'm asking this question beacuse adbapi isn't quite what
I need and before I go hacking around I was trying to get
a firmer grip on thread <-> event loop communication.

Best,

Clark



From cce at clarkevans.com  Mon Mar  3 17:15:37 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Tue, 4 Mar 2003 00:15:37 +0000
Subject: [Twisted-Python] fetchmany and deferreds which call back more than once
Message-ID: <20030304001537.GA50334@doublegemini.com>

I have a result set with potentially 100's (1000's or more) 
of rows from a database that I need to stream back to the 
client after HTML formatting.  Anyway, I've looked at the
enterprise adapter, and it only returns "once" for a given
query with the return value of fetchall() of the cursor.
While this is interesting, what I'd really like is a way
to pass "chunks" of the result back via fetchmany(). 
 
I'm kinda stumped as to where to begin, I've gone through
much of the database adapter and threading and deferred
code but don't quite know where to start.

On a related item, some database adapters (pypgsql) have
a non-blocking execute so that you can pool for results
instead of blocking.  I was wondering how the above 
"producer" mechanism could be used without requiring
threads (via pooling now and again).

Best,

Clark



From andrewextra at puzzling.org  Mon Mar  3 17:24:56 2003
From: andrewextra at puzzling.org (andrewextra at puzzling.org)
Date: Mon, 3 Mar 2003 19:24:56 -0500 (EST)
Subject: [Twisted-Python] fetchmany and deferreds which call back more 
     than once
In-Reply-To: <20030304001537.GA50334@doublegemini.com>
References: <20030304001537.GA50334@doublegemini.com>
Message-ID: <1378.202.129.64.242.1046737496.squirrel@mail.puzzling.org>

> On a related item, some database adapters (pypgsql) have
> a non-blocking execute so that you can pool for results
                                         ^^^^
> instead of blocking.  I was wondering how the above
> "producer" mechanism could be used without requiring
> threads (via pooling now and again).
               ^^^^^^^

Do you mean "poll"/"polling"?

-Andrew.




From cce at clarkevans.com  Mon Mar  3 22:46:48 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Tue, 4 Mar 2003 05:46:48 +0000
Subject: [Twisted-Python] patch implementing deferIterationToThread
Message-ID: <20030304054648.GA51485@doublegemini.com>

Please find a patch to internet/defer.py and iternet/threads.py
which enables an "iterator" to be deferred to a thread.  This is
useful since often you have a long running process (a database
query for example) which you'd like to return results every
once and a while rather than delivering all of the output 
at the end of the process.  This patch adds to the given
files (it doesn't change any code).

The remainder of the message is hereby public domain.

#
# code to append to defer.py
#
class MultiCallDeferred(Deferred):
    """This is a verision of Deferred which can be invoked more
       than once.  This is accomplished by cloning the current
       deferred object and carrying out the callbacks on the clone.
    """
    def _startRunCallbacks(self, result, isError):
        clone = Deferred()
        clone.default = self.default
        for x in self.callbacks:
            clone.callbacks.append(x)
        clone._startRunCallbacks(result, isError)

#
# code to be added to threads.py
#
def _putIterationInDeferred(deferred, f, args, kwargs):
    """Send the results of an iteration to a deferred.
       The function called should return an object
       with a next() operator.  This is the ideal mechanism
       to defer a generator.
    """
    from twisted.internet import reactor
    try:
        itr = apply(f, args, kwargs)
        while 1:
            reactor.callFromThread(deferred.callback, itr.next())
    except StopIteration: pass
    except:
        f = failure.Failure()
        reactor.callFromThread(deferred.errback, f)
def deferIterationToThread(f, *args, **kwargs):
    """Run the results of an iterator in a thread."""
    d = defer.MultiCallDeferred()
    reactor.callInThread(_putIterationInDeferred, d, f, args, kwargs)
    return d

#
# usage using iterators (or generators for simpler syntax)
# 
from twisted.internet.threads import deferIterationToThread
from twisted.internet import reactor
class producer:
    def __init__(self):
        self.val = 9
    def next(self):
        val = self.val
        if val < 1: raise StopIteration
        self.val -= 1
        return val
def bldr(): return producer()
def printResult(x): print x
d = deferIterationToThread(bldr)
d.addCallback(printResult)
try: # if you have generators
    from __future__ import generators
    def gene(start=99):
        while(start > 90):
            yield start
            start -= 1
    d = deferIterationToThread(gene)
    d.addCallback(printResult)
except: pass
reactor.run()




From cce at clarkevans.com  Mon Mar  3 23:16:12 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Tue, 4 Mar 2003 06:16:12 +0000
Subject: [Twisted-Python] coding standard: column width?
Message-ID: <20030304061612.GA52189@doublegemini.com>

The (very clear) coding standards don't mention a preferred column width.  
Could it be possible to add a 76 column code wrap requirement.  This is 
useful for those of us who use your aged 80 column terminals, and more 
importantly for those who want to forward/comment on code via e-mail.
Most (95%) of the code is already following this rule, and it probably
wouldn't take much effort to fix when people run into long lines that
could/should be broken up.

Clark



From cce at clarkevans.com  Mon Mar  3 23:21:06 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Tue, 4 Mar 2003 06:21:06 +0000
Subject: [Twisted-Python] fetchmany and deferreds which call back more than once
In-Reply-To: <1378.202.129.64.242.1046737496.squirrel@mail.puzzling.org>
References: <20030304001537.GA50334@doublegemini.com> <1378.202.129.64.242.1046737496.squirrel@mail.puzzling.org>
Message-ID: <20030304062106.GB52189@doublegemini.com>

On Mon, Mar 03, 2003 at 07:24:56PM -0500, andrewextra at puzzling.org wrote:
| > On a related item, some database adapters (pypgsql) have
| > a non-blocking execute so that you can pool for results
|                                          ^^^^
| Do you mean "poll"/"polling"?

Err, yai; oops.  I found in the archives Gerhard's posting [1]
and its follow up discussion which is exactly what I was 
looking for.   For the Microsoft SQL binding, I'm almost done
with a patch to enterprise/adbapi.py, using the previous patch
posted for iterators deferred to a thread.

Womble on,

Clark
[1] http://twistedmatrix.com/pipermail/twisted-python/2002-December/002419.html




From cce at clarkevans.com  Tue Mar  4 00:32:28 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Tue, 4 Mar 2003 07:32:28 +0000
Subject: [Twisted-Python] patch implementing "fetchmany" from enterprise.adbapi
Message-ID: <20030304073228.GA52396@doublegemini.com>

Please find following a patch to add the ability for fetchmany()
to be used from within the enterprise adbapi.py interface.  This
uses the patches previously posted (and included following) which
enable an iterator to be deferred via a thread.  

Basically, one can use runQueryChunked instead of runQuery 
and it will call your callback once for each "fetchmany"
return, which, depending on the database driver can be
about 10-50 rows at a time.  This is essential for incremental
handling of large query results.

The patch also tests for "threadsaftey", for some reason
mxODBC has an apilevel of "2.0" yet they are missing this
attribute (they call it threadlevel).   I'm not fond of
this part of the patch, but it is included since this
is what I tested with (I don't have permissions to change
mxODBC).

The remainder of the message is hereby public domain.

Best,

Clark

--- adbapi.py.orig	Fri Feb 28 16:51:08 2003
+++ adbapi.py	Tue Mar  4 02:01:36 2003
@@ -52,7 +52,9 @@
             log.msg("Connecting to database: %s %s %s" % (dbapiName, connargs, connkw))
         self.dbapi = reflect.namedModule(dbapiName)
         assert self.dbapi.apilevel == '2.0', 'DB API module not DB API 2.0 compliant.'
-        assert self.dbapi.threadsafety > 0, 'DB API module not sufficiently thread-safe.'
+        if hasattr(self.dbapi,"threadsaftey"):
+           test = self.dbapi.threadsaftey > 0 
+           assert test, 'DB API module not sufficiently thread-safe.'
         self.connargs = connargs
         self.connkw = connkw
         import thread
@@ -99,6 +101,21 @@
         curs.close()
         return result
 
+    def _runQueryChunked(self, args, kw):
+        conn = self.connect()
+        curs = conn.cursor()
+        apply(curs.execute, args, kw)
+        class fetchChunk:
+            def __init__(self,curs):
+                self.curs = curs
+            def next(self):
+                ret = self.curs.fetchmany()
+                if not ret:
+                    self.curs.close()
+                    raise StopIteration
+                return ret
+        return fetchChunk(curs)
+
     def _runOperation(self, args, kw):
         """This is used for non-query operations that don't want "fetch*" to be called
         """
@@ -121,6 +138,10 @@
         threads.deferToThread(self._runQuery, args, kw).addCallbacks(
             callback, errback)
 
+    def queryChunked(self, callback, errback, *args, **kw):
+        threads.deferIterationToThread(self._runQueryChunked, args, kw
+                                      ).addCallbacks(callback, errback)
+
     def operation(self, callback, errback, *args, **kw):
         threads.deferToThread(self._runOperation, args, kw).addCallbacks(
             callback, errback)
@@ -229,6 +250,11 @@
         apply(self.dbpool.query, (d.callback, d.errback)+args, kw)
         return d
 
+    def runQueryChunked(self, *args, **kw):
+        d = defer.MultiCallDeferred()
+        apply(self.dbpool.queryChunked, (d.callback, d.errback)+args, kw)
+        return d
+
     def runOperation(self, *args, **kw):
         d = defer.Deferred()
         apply(self.dbpool.operation, (d.callback,d.errback)+args, kw)



----- Forwarded message from "Clark C. Evans" <cce at clarkevans.com> -----
From: "Clark C. Evans" <cce at clarkevans.com>
To: twisted-python at twistedmatrix.com
Subject: [Twisted-Python] patch implementing deferIterationToThread
Date: Tue, 4 Mar 2003 05:46:48 +0000

Please find a patch to internet/defer.py and iternet/threads.py
which enables an "iterator" to be deferred to a thread.  This is
useful since often you have a long running process (a database
query for example) which you'd like to return results every
once and a while rather than delivering all of the output 
at the end of the process.  This patch adds to the given
files (it doesn't change any code).

The remainder of the message is hereby public domain.

#
# code to append to defer.py
#
class MultiCallDeferred(Deferred):
    """This is a verision of Deferred which can be invoked more
       than once.  This is accomplished by cloning the current
       deferred object and carrying out the callbacks on the clone.
    """
    def _startRunCallbacks(self, result, isError):
        clone = Deferred()
        clone.default = self.default
        for x in self.callbacks:
            clone.callbacks.append(x)
        clone._startRunCallbacks(result, isError)

#
# code to be added to threads.py
#
def _putIterationInDeferred(deferred, f, args, kwargs):
    """Send the results of an iteration to a deferred.
       The function called should return an object
       with a next() operator.  This is the ideal mechanism
       to defer a generator.
    """
    from twisted.internet import reactor
    try:
        itr = apply(f, args, kwargs)
        while 1:
            reactor.callFromThread(deferred.callback, itr.next())
    except StopIteration: pass
    except:
        f = failure.Failure()
        reactor.callFromThread(deferred.errback, f)
def deferIterationToThread(f, *args, **kwargs):
    """Run the results of an iterator in a thread."""
    d = defer.MultiCallDeferred()
    reactor.callInThread(_putIterationInDeferred, d, f, args, kwargs)
    return d

#
# usage using iterators (or generators for simpler syntax)
# 
from twisted.internet.threads import deferIterationToThread
from twisted.internet import reactor
class producer:
    def __init__(self):
        self.val = 9
    def next(self):
        val = self.val
        if val < 1: raise StopIteration
        self.val -= 1
        return val
def bldr(): return producer()
def printResult(x): print x
d = deferIterationToThread(bldr)
d.addCallback(printResult)
try: # if you have generators
    from __future__ import generators
    def gene(start=99):
        while(start > 90):
            yield start
            start -= 1
    d = deferIterationToThread(gene)
    d.addCallback(printResult)
except: pass
reactor.run()


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

----- End forwarded message -----



From andrewextra at puzzling.org  Tue Mar  4 00:55:16 2003
From: andrewextra at puzzling.org (andrewextra at puzzling.org)
Date: Tue, 4 Mar 2003 02:55:16 -0500 (EST)
Subject: [Twisted-Python] patch implementing 'fetchmany' from 
     enterprise.adbapi
In-Reply-To: <20030304073228.GA52396@doublegemini.com>
References: <20030304073228.GA52396@doublegemini.com>
Message-ID: <2046.202.129.64.242.1046764516.squirrel@mail.puzzling.org>

>
> The patch also tests for "threadsaftey", for some reason
> mxODBC has an apilevel of "2.0" yet they are missing this
> attribute (they call it threadlevel).   I'm not fond of
> this part of the patch, but it is included since this
> is what I tested with (I don't have permissions to change
> mxODBC).

Of course you have permissions to change mxODBC:
    import mxODBC
    mxODBC.threadsafety = mxODBC.threadlevel

:)

-Andrew.




From cce at clarkevans.com  Tue Mar  4 02:01:09 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Tue, 4 Mar 2003 09:01:09 +0000
Subject: [Twisted-Python] patch implementing 'fetchmany' from enterprise.adbapi
In-Reply-To: <2046.202.129.64.242.1046764516.squirrel@mail.puzzling.org>
References: <20030304073228.GA52396@doublegemini.com> <2046.202.129.64.242.1046764516.squirrel@mail.puzzling.org>
Message-ID: <20030304090109.GA53478@doublegemini.com>

On Tue, Mar 04, 2003 at 02:55:16AM -0500, andrewextra at puzzling.org wrote:
| >
| > The patch also tests for "threadsaftey", for some reason
| > mxODBC has an apilevel of "2.0" yet they are missing this
| > attribute (they call it threadlevel).   I'm not fond of
| > this part of the patch, but it is included since this
| > is what I tested with (I don't have permissions to change
| > mxODBC).
| 
| Of course you have permissions to change mxODBC:
|     import mxODBC
|     mxODBC.threadsafety = mxODBC.threadlevel
| 

I tried that before I hacked.  However, the threadsaftey attribute
doesn't seem to be picked up within the ConnectionPool constructor,
which is passed the fully qualified class as a string.  I'm sure
there is another way to do it...  in any case, that part of the
patch can be easily dropped.   Following is the modified patch 
without the threadsaftey hack.  ;) Clark


--- adbapi.py.orig	Fri Feb 28 16:51:08 2003
+++ adbapi.py	Tue Mar  4 02:01:36 2003
@@ -99,6 +101,21 @@
         curs.close()
         return result
 
+    def _runQueryChunked(self, args, kw):
+        conn = self.connect()
+        curs = conn.cursor()
+        apply(curs.execute, args, kw)
+        class fetchChunk:
+            def __init__(self,curs):
+                self.curs = curs
+            def next(self):
+                ret = self.curs.fetchmany()
+                if not ret:
+                    self.curs.close()
+                    raise StopIteration
+                return ret
+        return fetchChunk(curs)
+
     def _runOperation(self, args, kw):
         """This is used for non-query operations that don't want "fetch*" to be called
         """
@@ -121,6 +138,10 @@
         threads.deferToThread(self._runQuery, args, kw).addCallbacks(
             callback, errback)
 
+    def queryChunked(self, callback, errback, *args, **kw):
+        threads.deferIterationToThread(self._runQueryChunked, args, kw
+                                      ).addCallbacks(callback, errback)
+
     def operation(self, callback, errback, *args, **kw):
         threads.deferToThread(self._runOperation, args, kw).addCallbacks(
             callback, errback)
@@ -229,6 +250,11 @@
         apply(self.dbpool.query, (d.callback, d.errback)+args, kw)
         return d
 
+    def runQueryChunked(self, *args, **kw):
+        d = defer.MultiCallDeferred()
+        apply(self.dbpool.queryChunked, (d.callback, d.errback)+args, kw)
+        return d
+
     def runOperation(self, *args, **kw):
         d = defer.Deferred()
         apply(self.dbpool.operation, (d.callback,d.errback)+args, kw)



From andrew-twisted at puzzling.org  Tue Mar  4 05:58:57 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 4 Mar 2003 23:58:57 +1100
Subject: [Twisted-Python] patch implementing 'fetchmany' from enterprise.adbapi
In-Reply-To: <20030304090109.GA53478@doublegemini.com>
References: <20030304073228.GA52396@doublegemini.com> <2046.202.129.64.242.1046764516.squirrel@mail.puzzling.org> <20030304090109.GA53478@doublegemini.com>
Message-ID: <20030304125857.GB615@frobozz.local>

On Tue, Mar 04, 2003 at 09:01:09AM +0000, Clark C. Evans wrote:
> On Tue, Mar 04, 2003 at 02:55:16AM -0500, I wrote:
> |     import mxODBC
> |     mxODBC.threadsafety = mxODBC.threadlevel
> | 
> 
> I tried that before I hacked.  However, the threadsaftey attribute
> doesn't seem to be picked up within the ConnectionPool constructor,
> which is passed the fully qualified class as a string.  I'm sure
> there is another way to do it...  in any case, that part of the
> patch can be easily dropped.   Following is the modified patch 
> without the threadsaftey hack.  ;) Clark

I've done this succesfully before:
    http://twistedmatrix.com/pipermail/twisted-python/2002-August/001447.html

IIRC, the trick is to twiddle with the module *before* creating your
ConnectionPool, so that it's fixed by the time it imports the module and
checks its threadsafety attribute.

-Andrew.




From cce at clarkevans.com  Tue Mar  4 06:32:15 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Tue, 4 Mar 2003 13:32:15 +0000
Subject: [Twisted-Python] patch implementing 'fetchmany' from enterprise.adbapi
In-Reply-To: <20030304125857.GB615@frobozz.local>
References: <20030304073228.GA52396@doublegemini.com> <2046.202.129.64.242.1046764516.squirrel@mail.puzzling.org> <20030304090109.GA53478@doublegemini.com> <20030304125857.GB615@frobozz.local>
Message-ID: <20030304133215.GA55185@doublegemini.com>

On Tue, Mar 04, 2003 at 11:58:57PM +1100, Andrew Bennetts wrote:
| I've done this succesfully before:
|     http://twistedmatrix.com/pipermail/twisted-python/2002-August/001447.html
| 
| IIRC, the trick is to twiddle with the module *before* creating your
| ConnectionPool, so that it's fixed by the time it imports the module and
| checks its threadsafety attribute.

Andrew,

Thank you for your help.  I've twiddled with it for at least 40 min 
now, about 20 min before the first post and another 10-20 min now.
I've tried many permutations, including, but not limited to...

   import mx.ODBC.EasySoft
   mx.ODBC.EasySoft.threadsaftey = 1
   from twisted.enterprise import adbapi
   pool = adbapi.ConnectionPool("mx.ODBC.EasySoft","MyDSN")

Anyway, can we talk about other aspects of the patch?  This hack
really isn't important...

Clark



From tv at twistedmatrix.com  Tue Mar  4 00:38:37 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Tue, 4 Mar 2003 09:38:37 +0200
Subject: [Twisted-Python] fetchmany and deferreds which call back more than once
In-Reply-To: <20030304001537.GA50334@doublegemini.com>
References: <20030304001537.GA50334@doublegemini.com>
Message-ID: <20030304073837.GA27251@lapdog>

On Tue, Mar 04, 2003 at 12:15:37AM +0000, Clark C. Evans wrote:
> I have a result set with potentially 100's (1000's or more) 
> of rows from a database that I need to stream back to the 
> client after HTML formatting.  Anyway, I've looked at the
> enterprise adapter, and it only returns "once" for a given
> query with the return value of fetchall() of the cursor.
> While this is interesting, what I'd really like is a way
> to pass "chunks" of the result back via fetchmany(). 

	Here's what I've done, with LDAP queries that can
	return arbitrarily many results:

	http://tv.debian.net/software/ldaptor/api/public/ldaptor.pro
tocols.ldap.ldapsyntax.LDAPObject-class.html#search

	Basically, you can either pass a callback to search() that
	will be called once per result, or if you don't pass one,
	it'll gather all the results into a list. The Deferred you
	get either evaluates to None or to a list of results,
	depending on whether you passed the callback or not.

-- 
:(){ :|:&};:



From tv at twistedmatrix.com  Tue Mar  4 07:13:41 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Tue, 4 Mar 2003 16:13:41 +0200
Subject: [Twisted-Python] Uid race in t.runner.procmon
Message-ID: <20030304141341.GC13198@lapdog>

	If you use mktap -u 42, there's a race in
	twisted.runner.procmon; the first time the process is started,
	it gets started as root, the later runs happen as user
	42. This is due to the first run happening from startService,
	which is called before setuid(42).

	Either the startService() call should be delayed after the
	setuid() (separate port binding from other service startup
	things), or procmon should use something like callLater.

-- 
:(){ :|:&};:



From tv at twistedmatrix.com  Tue Mar  4 07:10:00 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Tue, 4 Mar 2003 16:10:00 +0200
Subject: [Twisted-Python] tap2deb -v/--version bug
Message-ID: <20030304141000.GB13198@lapdog>

	tap2deb --version option is overridden by global handling
	for --version that just displays the version number.

[0 tv at lapdog ~]$ tap2deb --help
Usage: tap2deb [options]
Options:
  -u, --unsigned           
  -t, --tapfile=           [default: twistd.tap]
  -m, --maintainer=        [default: ]
  -p, --protocol=          [default: ]
  -e, --description=       [default: ]
  -l, --long_description=  [default: ]
  -v, --version=           [default: 1.0]
  -d, --debfile=           
  -y, --type=              type of configuration: 'tap', 'xml, 'source' or
                           'python' [default: tap]
      --help               Display this help and exit.

tap2deb
[0 tv at lapdog ~]$ tap2deb --version=42 -t foo.tap
/usr/bin/tap2deb: option --version must not have an argument
[1 tv at lapdog ~]$ 

	Here's a patch that changes the option to --set-version=,
	and the short option to -V. Please tell if you approve this
	change.

diff -u -u -r1.9 tap2deb.py
--- twisted/scripts/tap2deb.py	3 Oct 2002 07:56:14 -0000	1.9
+++ twisted/scripts/tap2deb.py	4 Mar 2003 14:09:13 -0000
@@ -26,7 +26,7 @@
                   ["protocol", "p", ""],
                   ["description", "e", ""],
                   ["long_description", "l", ""],
-                  ["version", "v", "1.0"],
+                  ["set-version", "V", "1.0"],
                   ["debfile", "d", None],
                   ["type", "y", "tap", "type of configuration: 'tap', 'xml, 'source' or 'python'"]]
 
@@ -54,7 +54,7 @@
     base_tap_file = os.path.basename(config['tapfile'])
     protocol = (config['protocol'] or os.path.splitext(base_tap_file)[0])
     deb_file = config['debfile'] or 'twisted-'+protocol
-    version = config['version']
+    version = config['set-version']
     maintainer = config['maintainer']
     description = config['description'] or ('A TCP server for %(protocol)s' %
                                             vars())



-- 
:(){ :|:&};:



From tv at twistedmatrix.com  Tue Mar  4 07:03:33 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Tue, 4 Mar 2003 16:03:33 +0200
Subject: [Twisted-Python] mktap --uid=0 bug
Message-ID: <20030304140333.GA13198@lapdog>

	If you do mktap --uid=0 --gid=0, t.i.app ignores your
	setting and stores the uid/gid of the user running mktap.
	Here's a patch; if I hear no objections, I will commit.

Index: twisted/internet/app.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/app.py,v
retrieving revision 1.79
diff -u -u -r1.79 app.py
--- twisted/internet/app.py	1 Mar 2003 21:58:47 -0000	1.79
+++ twisted/internet/app.py	4 Mar 2003 13:55:05 -0000
@@ -281,8 +282,12 @@
             self._authorizer = a
             self._authorizer.setApplication(self)
         if platform.getType() == "posix":
-            self.uid = uid or os.getuid()
-            self.gid = gid or os.getgid()
+            if uid is None:
+                uid = os.getuid()
+            self.uid = uid
+            if gid is None:
+                gid = os.getgid()
+            self.gid = gid
 
     persistenceVersion = 12
 


-- 
:(){ :|:&};:



From iggeres at yahoo.es  Tue Mar  4 07:51:33 2003
From: iggeres at yahoo.es (=?iso-8859-1?q?Iggeres=20Bet?=)
Date: Tue, 4 Mar 2003 15:51:33 +0100 (CET)
Subject: [Twisted-Python] [Twisted Newbie] Proxies
Message-ID: <20030304145133.13174.qmail@web20106.mail.yahoo.com>

Dear Twisted List,

I am a Twisted Newbie, searching in the examples
directory I didn't find one sample to guide me how to
use the Spider with a Proxy.

I know it must be a simple solution and I would like
to know that solution.

The spider sample is very simple:

----- o -----
#!/usr/bin/python
  
from twisted.web import spider
from twisted.web import proxy
 
from twisted.internet import app
from twisted.python.util import println
 
a = app.Application("spider")
 
s = spider.SpiderSender("spider", a)
s.addTargets(['http://www.yahoo.com/'])
s.maxDepth = 1
s.notifyDownloadStart = lambda uri:
println('starting', uri)
s.notifyDownloadEnd = lambda uri: println('stopping',
uri)
a.run(save=0)
----- o ----

What is the code to use it beyond a proxy?


Thank You All
Iggeres

___________________________________________________
Yahoo! Móviles
Personaliza tu móvil con tu logo y melodía favorito 
en http://moviles.yahoo.es



From m at moshez.org  Tue Mar  4 09:03:33 2003
From: m at moshez.org (Moshe Zadka)
Date: 4 Mar 2003 16:03:33 -0000
Subject: [Twisted-Python] [Twisted Newbie] Proxies
In-Reply-To: <20030304145133.13174.qmail@web20106.mail.yahoo.com>
References: <20030304145133.13174.qmail@web20106.mail.yahoo.com>
Message-ID: <20030304160333.25536.qmail@green.zadka.com>

On Tue, 4 Mar 2003, =?iso-8859-1?q?Iggeres=20Bet?= <iggeres at yahoo.es> wrote:

> The spider sample is very simple:
...
> What is the code to use it beyond a proxy?

Currently, the Spider does not support proxies. Patches happily accepted.
 
-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.



From twisted at itamarst.org  Tue Mar  4 10:40:22 2003
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 4 Mar 2003 12:40:22 -0500
Subject: [Twisted-Python] threadable.init() operation
In-Reply-To: <20030303181748.GA48059@doublegemini.com>
References: <20030303181748.GA48059@doublegemini.com>
Message-ID: <20030304124022.6866d4ff.twisted@itamarst.org>

On Mon, 3 Mar 2003 18:17:48 +0000
"Clark C. Evans" <cce at clarkevans.com> wrote:

> I've read the threading/enterprise howtos and am still
> trying to grok thread <-> event loop communication.  In
> particular, I'm curious what exactly what threadable.init()
> does.  I was expecting something rather simple, which 
> implementes communcation between the main event pump and
> each thread (callInThread, callFromThread).  However, this
> code seems to be doing much more than that, and I don't
> quite understand what it is doing or why.  A bit of a 
> primer would be great.

All it really does it turn on all the threading support (e.g. locks and
whatever else modules have to set up to deal with threads and
thread-safety issues). The idea is that if you don't use threading you
shouldn't need to pay the price for locking.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting
***> Stop the war: http://unitedforpeace.org/ <***



From twisted at itamarst.org  Tue Mar  4 10:43:59 2003
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 4 Mar 2003 12:43:59 -0500
Subject: [Twisted-Python] patch implementing "fetchmany" from enterprise.adbapi
In-Reply-To: <20030304073228.GA52396@doublegemini.com>
References: <20030304073228.GA52396@doublegemini.com>
Message-ID: <20030304124359.0ac7fe72.twisted@itamarst.org>

On Tue, 4 Mar 2003 07:32:28 +0000
"Clark C. Evans" <cce at clarkevans.com> wrote:

> Please find following a patch to add the ability for fetchmany()
> to be used from within the enterprise adbapi.py interface.  This
> uses the patches previously posted (and included following) which
> enable an iterator to be deferred via a thread.  

This sounds like a good idea, and the iterator deferred thing does as
well. But, as is the fetchmany() support will only work in 2.2, I think?
This is a problem, we can't have core functionality run only in 2.2. 

Adding the deferred/iterator thing is not an issue (assuming the codee
is good, no chance to look at it yet), since that adds additional
functionality for 2.2 users. The problem is adding generally useful code
that doesn't run in 2.1.



From tv at twistedmatrix.com  Tue Mar  4 11:02:37 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Tue, 4 Mar 2003 20:02:37 +0200
Subject: [Twisted-Python] tap2deb -v/--version bug
In-Reply-To: <20030304141000.GB13198@lapdog>
References: <20030304141000.GB13198@lapdog>
Message-ID: <20030304180237.GA19482@lapdog>

On Tue, Mar 04, 2003 at 04:10:00PM +0200, Tommi Virtanen wrote:
> 	tap2deb --version option is overridden by global handling
> 	for --version that just displays the version number.

	Moshez said "go ahead and commit, but fix the manpage too", so
	I did just that.

-- 
:(){ :|:&};:



From tv at twistedmatrix.com  Tue Mar  4 11:32:40 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Tue, 4 Mar 2003 20:32:40 +0200
Subject: [Twisted-Python] mktap --uid=0 bug
In-Reply-To: <20030304140333.GA13198@lapdog>
References: <20030304140333.GA13198@lapdog>
Message-ID: <20030304183240.GB19482@lapdog>

On Tue, Mar 04, 2003 at 04:03:33PM +0200, Tommi Virtanen wrote:
> 	If you do mktap --uid=0 --gid=0, t.i.app ignores your
> 	setting and stores the uid/gid of the user running mktap.
> 	Here's a patch; if I hear no objections, I will commit.

	An updated version was just committed after review by itamar;
	as a bonus mktap now has --help for --uid and --gid, and
	understands user and group names.

-- 
:(){ :|:&};:



From matthew at yak.org  Tue Mar  4 13:15:29 2003
From: matthew at yak.org (Matthew J. Probst)
Date: Tue, 04 Mar 2003 14:15:29 -0600
Subject: [Twisted-Python] Clearer information about virtual hosts
Message-ID: <5.2.0.9.0.20030304135809.00b26db0@192.168.0.253>

I'm quite familiar with Python, but I'm having a hard time wrapping my mind 
round Twisted documentation.  I suspect that the given instructions aren't 
as useful until one understands a critical mass of the object models used, 
and that I haven't reached that point yet.

I've been trying to set up independent named virtual hosts serving static 
HTML from different directories.  I can't figure out how this can be made 
to work.  As a baseline I'm using the howto located at

http://www.twistedmatrix.com/documents/howto/using-twistedweb

Spreadable servers are mentioned, and appear to be part of the solution, 
but using the --help option on mktap shows no option allowing me to name 
each server, so how would traffic be routed to the appropriate virtual 
server?  I see VHostMonster, which can route to servers running on 
differnet ports, and I can see how that might help when combined with some 
kind of rewriting/subclassing through resources, but once again, is this 
the right model?

Perhaps the problem is that there are many models that work, with drawbacks 
and benefits, or just different qualities.  Or maybe I'm totally failing to 
see something that's obvious to those with more Twisted experience.  In any 
case, I feel like I'm just around the corner from some tidbit of 
information that will help me understand.

How about a simple example for serving static HTML?  Say I have HTML files 
in /var/www/www.foo.com and /var/www/www.bar.com, and that I want to serve 
these up as www.foo.com and www.bar.com, respectively.  Say they both 
reside on port 80 on the same server.  How might I accomplish this and get 
started with experimenting?  Granted, this does not use much of the power 
available, but would be a great start.




From cce at clarkevans.com  Tue Mar  4 14:01:20 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Tue, 4 Mar 2003 21:01:20 +0000
Subject: [Twisted-Python] fetchmany and deferreds which call back more than once
In-Reply-To: <20030304073837.GA27251@lapdog>
References: <20030304001537.GA50334@doublegemini.com> <20030304073837.GA27251@lapdog>
Message-ID: <20030304210120.GA56349@doublegemini.com>

Tommi,

Thank you for your suggestion.  Although this is nice, I was
looking for more of a cooked solution that builds on the
deferred mechanism.  For example, the mechanism you have 
doesn't really handle the case of chaining the callbacks
or any of the other nice aspects of the Deferred object.

Best,

Clark

On Tue, Mar 04, 2003 at 09:38:37AM +0200, Tommi Virtanen wrote:
| 	Here's what I've done, with LDAP queries that can
| 	return arbitrarily many results:
| 
| 	http://tv.debian.net/software/ldaptor/api/public/ldaptor.pro
| tocols.ldap.ldapsyntax.LDAPObject-class.html#search
| 
| 	Basically, you can either pass a callback to search() that
| 	will be called once per result, or if you don't pass one,
| 	it'll gather all the results into a list. The Deferred you
| 	get either evaluates to None or to a list of results,
| 	depending on whether you passed the callback or not.



From cce at clarkevans.com  Tue Mar  4 14:44:35 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Tue, 4 Mar 2003 21:44:35 +0000
Subject: [Twisted-Python] patch implementing "fetchmany" from enterprise.adbapi
In-Reply-To: <20030304124359.0ac7fe72.twisted@itamarst.org>
References: <20030304073228.GA52396@doublegemini.com> <20030304124359.0ac7fe72.twisted@itamarst.org>
Message-ID: <20030304214435.GB56349@doublegemini.com>

On Tue, Mar 04, 2003 at 12:43:59PM -0500, Itamar Shtull-Trauring wrote:
| This sounds like a good idea, and the iterator deferred thing does as
| well. But, as is the fetchmany() support will only work in 2.2, I think?
| This is a problem, we can't have core functionality run only in 2.2. 
|
| Adding the deferred/iterator thing is not an issue (assuming the codee
| is good, no chance to look at it yet), since that adds additional
| functionality for 2.2 users. The problem is adding generally useful code
| that doesn't run in 2.1.

I've made three updates to the patches:

  0) Added isError to Deferrable as in some cases this
     attribute isn't added before __del__ is invoked. 

  1) I added addFinishCallback to the MultiDeferred so that
     it is possible to be notified when iteration is finished.
     I didn't know what to call the finish_callback function...

  2) I added threads.StopIteration so that the whole mechanism
     is useable from 2.1 as well.  Besides the exception which
     marks the stop of the iteration loop, the whole iterator
     concept is more of a convention (with a wee bit of build-in
     sugar).  Since this code doesn't use the sugar, and uses
     a mock exception when the built-in exception isn't available,
     it should work well with both 2.1 and 2.2

Here are the new patches...  public domain as usual

--- defer.py.orig	Mon Mar  3 21:59:25 2003
+++ defer.py	Tue Mar  4 16:02:37 2003
@@ -94,6 +94,7 @@
     called = 0
     default = 0
     paused = 0
+    isError = 0
 
     def __init__(self):
         self.callbacks = []
@@ -291,6 +292,41 @@
             log.msg("Unhandled error in Deferred:")
             log.err(self.result)
 
+class MultiDeferred(Deferred):
+    """I am a deferred that can be called (visited) more than once.
+
+       This is a verision of Deferred where the callback can be
+       invoked as many times as necessary, but where the errback
+       can only be activated once.  This is accomplished by cloning
+       the current deferred object and carrying out the callbacks
+       on the clone.  When the callback is called, we call this
+       a 'visit'.
+
+       This Deferred adds a 'finish' callback which can be invoked
+       once all visits are completed.  Finish callbacks can be added
+       via 'addFinishCallback' and invoked with 'finish_callback'
+    """
+    def __init__(self):
+        Deferred.__init__(self)
+        self._finish = Deferred()
+    def _startRunCallbacks(self, result, isError):
+        if isError: 
+            Deferred._startRunCallbacks(result,1)
+            return
+        visit = Deferred()
+        visit.default = self.default
+        for x in self.callbacks:
+            visit.callbacks.append(x)
+        visit._startRunCallbacks(result,0)
+    def addFinishCallback(self, callback, *args, **kw):
+        """Add a callback to be executed when finished visiting"""
+        return self._finish.addCallbacks(callback, callbackArgs=args,
+                                         callbackKeywords=kw)
+    def finish_callback(self,result):
+        """Run all finish callbacks which have been added to
+           this deferred."""
+        self.called = 1
+        self._finish.callback(result)
 
 class DeferredList(Deferred):
     """I combine a group of deferreds into one callback.



--- threads.py.orig	Mon Mar  3 21:49:07 2003
+++ threads.py	Tue Mar  4 15:35:58 2003
@@ -60,5 +60,43 @@
     """
     reactor.callInThread(_runMultiple, tupleList)
 
+# support iterators for 2.1
+try: 
+   StopIteration = StopIteration  
+except:
+   class StopIteration(Exception): pass
+
+def _putIterationInDeferred(deferred, f, args, kwargs):
+    """Send the results of an iteration to a deferred.
+       The function called should return an object
+       with a next() operator.
+    """
+    from twisted.internet import reactor
+    try:
+        itr = apply(f, args, kwargs)
+        nCount = 0
+        while 1:
+            reactor.callFromThread(deferred.callback, itr.next())
+            nCount += 1
+    except StopIteration: 
+        reactor.callFromThread(deferred.finish_callback, nCount)
+    except:
+        f = failure.Failure()
+        reactor.callFromThread(deferred.errback, f)
+
+def deferIterationToThread(f, *args, **kwargs):
+    """Run the results of an iterator in a thread.
+
+       This returns a MultiDeferred object, which is a deferred 
+       having an added method, addFinishCallback to provide
+       a callback once the iteration has finished.
+
+       The function passed, when arguments applied, should
+       return an object with a next() method raising 
+       StopIteration when there isn't any more content.       
+    """
+    deferred = defer.MultiDeferred()
+    reactor.callInThread(_putIterationInDeferred, deferred, f, args, kwargs)
+    return deferred
 
 __all__ = ["deferToThread", "callMultipleInThread"]



--- adbapi.py.orig	Tue Mar  4 03:40:13 2003
+++ adbapi.py	Tue Mar  4 15:40:53 2003
@@ -99,6 +101,23 @@
         curs.close()
         return result
 
+    def _runQueryChunked(self, args, kw):
+        conn = self.connect()
+        curs = conn.cursor()
+        apply(curs.execute, args, kw)
+        class chunkIterator:
+            def __init__(self,curs):
+                self.curs = curs
+            def __iter__(self): 
+                return self
+            def next(self):
+                ret = self.curs.fetchmany()
+                if not ret:
+                    self.curs.close()
+                    raise threads.StopIteration
+                return ret
+        return chunkIterator(curs)
+
     def _runOperation(self, args, kw):
         """This is used for non-query operations that don't want "fetch*" to be called
         """
@@ -121,6 +140,15 @@
         threads.deferToThread(self._runQuery, args, kw).addCallbacks(
             callback, errback)
 
+    def queryChunked(self, *args, **kw):
+        """ Sets up a deferred execution query that returns
+            one or more result chunks.
+      
+            This method returns a MultiDeferred, which is notified when
+            the query has finished via its FinishCallback.
+        """
+        return threads.deferIterationToThread(self._runQueryChunked, args, kw)
+
     def operation(self, callback, errback, *args, **kw):
         threads.deferToThread(self._runOperation, args, kw).addCallbacks(
             callback, errback)


#
# usage of the new iterator deferred using 2.1
# (this works under 2.2 and should work under 2.1
#  but it has not been tested there)
#
from twisted.internet.threads import StopIteration
from twisted.internet.threads import deferIterationToThread
from twisted.internet import reactor
class producer:
    def __init__(self):
        self.val = 9
    def next(self):
        val = self.val
        if val < 1: raise StopIteration
        self.val -= 1
        return val
def bldr(): return producer()
def printResult(x): print x
def printDone(x): print "done", x
d = deferIterationToThread(bldr)
d.addCallback(printResult)
d.addFinishCallback(printDone)
reactor.run()

#
# usage of the new iterator deferred using 2.2
#
from __future__ import generators
from twisted.internet import threads
from twisted.internet import reactor
def printResult(x): print x
def printDone(x): print "done", x
def gene(start=99):
    while(start > 90):
        yield start
        start -= 1
d = threads.deferIterationToThread(gene)
d.addFinishCallback(printDone)
d.addCallback(printResult)
reactor.run()

#
# usage of the Chunked adbapi patch
#
from twisted.enterprise import adbapi
pool = adbapi.ConnectionPool("mx.ODBC.EasySoft","SomeDSN")
def good(lst):
    for itm in lst:
        print itm[0]
def done(cnt): print "done, blocks = ", cnt
d = pool.queryChunked("SELECT <query>")
d.addCallback(good)
d.addFinishCallback(done)
from twisted.internet import reactor
reactor.run()




From naesten at myrealbox.com  Tue Mar  4 21:33:39 2003
From: naesten at myrealbox.com (Samuel Bronson)
Date: Tue, 04 Mar 2003 23:33:39 -0500
Subject: [Twisted-Python] coding standard: column width?
References: <20030304061612.GA52189@doublegemini.com>
Message-ID: <3E657E23.10908@myrealbox.com>

Clark C. Evans wrote:

>The (very clear) coding standards don't mention a preferred column width.  
>Could it be possible to add a 76 column code wrap requirement.  This is 
>useful for those of us who use your aged 80 column terminals, and more
>
Or code at the console, or prefer 80 column emacs windows ;-)
--Sam





From golux at comcast.net  Tue Mar  4 21:44:53 2003
From: golux at comcast.net (Steve Waterbury)
Date: Tue, 04 Mar 2003 23:44:53 -0500
Subject: [Twisted-Python] coding standard: column width?
In-Reply-To: <3E657E23.10908@myrealbox.com>
References: <20030304061612.GA52189@doublegemini.com>
 <3E657E23.10908@myrealbox.com>
Message-ID: <1046839493.955.66.camel@golux>

On Tue, 2003-03-04 at 23:33, Samuel Bronson wrote:
> Clark C. Evans wrote:
> 
> >The (very clear) coding standards don't mention a preferred column width.  
> >Could it be possible to add a 76 column code wrap requirement.  This is 
> >useful for those of us who use your aged 80 column terminals, and more
> >
> Or code at the console, or prefer 80 column emacs windows ;-)

Right.  The Twisted coding standards are clear ... but they 
shouldn't have to say everything:  in the absence of explicit 
direction from the Twisted coding standard, the Python style 
guidelines should be followed (PEP 8 and PEP 257).
>From PEP 8 (http://www.python.org/peps/pep-0008.html):

    There are still many devices around that are limited to 80
    character lines; plus, limiting windows to 80 characters makes it
    possible to have several windows side-by-side.  The default
    wrapping on such devices looks ugly.  Therefore, please limit all
    lines to a maximum of 79 characters (Emacs wraps lines that are
    exactly 80 characters long).  For flowing long blocks of text
    (docstrings or comments), limiting the length to 72 characters is
    recommended.

Etc.

- Steve.





From martin at datacash.com  Wed Mar  5 02:34:27 2003
From: martin at datacash.com (Martin Waite)
Date: 05 Mar 2003 09:34:27 +0000
Subject: [Twisted-Python] newbie question about using deferreds
Message-ID: <1046856868.4995.36.camel@pascal>

Hi,

Twisted newbie here with a plan. Could
someone please tell me if I'm barking up trees here ?

In my application, I want to run a Twisted listener
that collects incoming request messages and passes these to a 
thread that posts the message into a queue table in a database.
Another thread polls the database for responses, and 
distributes these to the connections that made the corresponding
requests.  

My understanding is that somehow I can do this using the Deferred
mechanism - only I'm not sure how.

My plan is to keep a global hash table of RequestID -> Deferred.
When the listener identifies the end of a request, a deferred is 
created and stored against the RequestID.  When the thread polling
for responses from the database gets a response, it looks for 
a matching deferred from the global hash table and then somehow
activates the deferred.

Is this sane or am I missing an easier way to do this ?

TIA, 
Martin







From radix at twistedmatrix.com  Wed Mar  5 03:04:20 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 5 Mar 2003 05:04:20 -0500
Subject: [Twisted-Python] newbie question about using deferreds
In-Reply-To: <1046856868.4995.36.camel@pascal>
References: <1046856868.4995.36.camel@pascal>
Message-ID: <20030305100420.GG10282@radii>

On Wed, Mar 05, 2003 at 09:34:27AM +0000, Martin Waite wrote:
> Hi,
> 
> My plan is to keep a global hash table of RequestID -> Deferred.
> When the listener identifies the end of a request, a deferred is 
> created and stored against the RequestID.  When the thread polling
> for responses from the database gets a response, it looks for 
> a matching deferred from the global hash table and then somehow
> activates the deferred.
> 
> Is this sane or am I missing an easier way to do this ?

Mapping of RID:Deferred is quite sane, I think. It could probably
even be called an idiom, by now.

"somehow activates the Deferred" is just
self.requests[rid].callback(val), where self.requests is your mapping,
rid is the request ID, and val is the value that was recently made
available.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From andrew-twisted at puzzling.org  Wed Mar  5 04:51:29 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 5 Mar 2003 22:51:29 +1100
Subject: [Twisted-Python] Re: [Twisted-commits] mktap now accepts --uid=0 and --gid=0 to really mean root, has command
In-Reply-To: <E18qHDI-0007rx-00@pyramid.twistedmatrix.com>
References: <E18qHDI-0007rx-00@pyramid.twistedmatrix.com>
Message-ID: <20030305115129.GA3252@frobozz.local>

On Tue, Mar 04, 2003 at 12:32:28PM -0600, tv CVS wrote:
> Modified files:
> Twisted/twisted/scripts/mktap.py 1.26 1.27
> Twisted/twisted/internet/app.py 1.79 1.80
> Twisted/ChangeLog 1.279 1.280
> 
> Log message:
> mktap now accepts --uid=0 and --gid=0 to really mean root, has command
> line help for --uid=/--gid=, and understands user and group names in
> addition to numbers.

[..snip..]

>  """ Implementation module for the `mktap` command.
>  """
> @@ -25,7 +25,7 @@
>  from twisted.python import usage, util
>  from twisted.spread import pb
>  
> -import sys, traceback, os, cPickle, glob
> +import sys, traceback, os, cPickle, glob, pwd

My docs for pwd say that it's only available on unix -- does this change
mean mktap is broken on win32?

-Andrew.




From twisted at itamarst.org  Wed Mar  5 10:26:18 2003
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 5 Mar 2003 12:26:18 -0500
Subject: [Twisted-Python] A fun site using Twisted
Message-ID: <20030305122618.5d97cda8.twisted@itamarst.org>

http://mysteryrobot.com/

Pointed out by someone on the IRC channel, I forget who.



From cce at clarkevans.com  Wed Mar  5 11:15:24 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Wed, 5 Mar 2003 18:15:24 +0000
Subject: [Twisted-Python] coding standard: column width?
In-Reply-To: <1046839493.955.66.camel@golux>
References: <20030304061612.GA52189@doublegemini.com> <3E657E23.10908@myrealbox.com> <1046839493.955.66.camel@golux>
Message-ID: <20030305181524.GA62536@doublegemini.com>

So, would purely whitespace patches fixing lines that
go over 79 columns be accepted?

On Tue, Mar 04, 2003 at 11:44:53PM -0500, Steve Waterbury wrote:
| On Tue, 2003-03-04 at 23:33, Samuel Bronson wrote:
| > Clark C. Evans wrote:
| > >The (very clear) coding standards don't mention a preferred column width.  
| > >Could it be possible to add a 76 column code wrap requirement.  This is 
| > >useful for those of us who use your aged 80 column terminals, and more
| >  
| > Or code at the console, or prefer 80 column emacs windows ;-)
| 
| Right.  The Twisted coding standards are clear ... but they 
| shouldn't have to say everything:  in the absence of explicit 
| direction from the Twisted coding standard, the Python style 
| guidelines should be followed (PEP 8 and PEP 257).

| From PEP 8 (http://www.python.org/peps/pep-0008.html):
| 
|     There are still many devices around that are limited to 80
|     character lines; plus, limiting windows to 80 characters makes it
|     possible to have several windows side-by-side.  The default
|     wrapping on such devices looks ugly.  Therefore, please limit all
|     lines to a maximum of 79 characters (Emacs wraps lines that are
|     exactly 80 characters long).  For flowing long blocks of text
|     (docstrings or comments), limiting the length to 72 characters is
|     recommended.



From tjacobs at kinematic.com  Wed Mar  5 11:15:37 2003
From: tjacobs at kinematic.com (Thad Jacobs)
Date: Wed, 5 Mar 2003 10:15:37 -0800 
Subject: [Twisted-Python] NT Service
Message-ID: <D1A1551B3520D51186B300508B1278FE367ED1@FS2>

Hello All,

I've created a module that makes COM calls to our non-sql database using
win32com, and converts the results to XML format (through simple string
concatenations).  I've created a rpy script that calls this module, and
returns the XML to the browser.

I am currently running the HTTP server per the introduction using the
command line.

My question:

How should I best deploy this application into a production environment?  It
will be running on an Windows 2000 server, and needs to automatically load
and run before anyone logs on in the machine.  Is there a way I can deploy
Twisted Web as an NT service?  Are there other web servers (besides IIS)
that can be configured to run my rpy script and still allow me to utilize
win32com in my class module?

Thanks in advance,

Thaddeus Jacobs
IT Developer
Kinematic Automation, Inc.
mailto:tjacobs at kinematic.com



From bob at redivi.com  Wed Mar  5 11:41:24 2003
From: bob at redivi.com (Bob Ippolito)
Date: Wed, 5 Mar 2003 13:41:24 -0500
Subject: [Twisted-Python] NT Service
In-Reply-To: <D1A1551B3520D51186B300508B1278FE367ED1@FS2>
Message-ID: <10E13DF0-4F3A-11D7-9599-000A95686CD8@redivi.com>

On Wednesday, Mar 5, 2003, at 13:15 America/New_York, Thad Jacobs wrote:

> Hello All,
>
> I've created a module that makes COM calls to our non-sql database 
> using
> win32com, and converts the results to XML format (through simple string
> concatenations).  I've created a rpy script that calls this module, and
> returns the XML to the browser.
>
> I am currently running the HTTP server per the introduction using the
> command line.
>
> My question:
>
> How should I best deploy this application into a production 
> environment?  It
> will be running on an Windows 2000 server, and needs to automatically 
> load
> and run before anyone logs on in the machine.  Is there a way I can 
> deploy
> Twisted Web as an NT service?  Are there other web servers (besides 
> IIS)
> that can be configured to run my rpy script and still allow me to 
> utilize
> win32com in my class module?

I'm assuming you've already RTFM'ed about win32all's win32service and 
Twisted.  Here's a stripped example of what has worked very well for me 
for the few times I was forced to deploy under Windows:

import win32serviceutil
import win32service
import win32event
class MyTwistedService(win32serviceutil.ServiceFramework):
   _svc_name_ = "MyTwistedService"
   _svc_display_name_ = "Example Twisted NT Service"
   def __init__(self, args):
     win32serviceutil.ServiceFramework.__init__(self, args)
     self.hWaitStop = win32event.CreateEvent(None, 0, 0, None)

   def SvcStop(self):
     self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)
     win32event.SetEvent(self.hWaitStop)

   def SvcDoRun(self):
     from twisted.python.log import startLogging
     # we don't have the console, so we log somewhere
     # the NT service logging facilities probably isn't the right place
     startLogging(open('c:/twistedexample.log','a'))
     self.CheckForQuit()
     startTwisted()

   def CheckForQuit(self):
     #print "Check For Quit"
     rv = win32event.WaitForSingleObject(self.hWaitStop, 10.0)
     if not rv == win32event.WAIT_TIMEOUT:
       print "Received Quit from Win32"
       reactor.stop()
     reactor.callLater(1.0, self.CheckForQuit)

def startTwisted():
   from twisted.internet.app import Application
   app = Application("MyExampleTwistedService")
   app.run(save=0)
   print "Finished"

if __name__=='__main__':
   # you could call startTwisted to run as not-a-service
   # or use it for cross-platform reasons
   win32serviceutil.HandleCommandLine(MyTwistedService)




From naesten at myrealbox.com  Wed Mar  5 12:05:06 2003
From: naesten at myrealbox.com (Samuel Bronson)
Date: Wed, 05 Mar 2003 14:05:06 -0500
Subject: [Twisted-Python] tap2deb -v/--version bug
References: <20030304141000.GB13198@lapdog> <20030304180237.GA19482@lapdog>
Message-ID: <3E664A62.2070300@myrealbox.com>

 Tommi Virtanen wrote:

>	Moshez said "go ahead and commit, but fix the manpage too", so
>	I did just that.
>
I think manpages would ideally be generated from the source code. Then
it would be easy to remember to do it, and maybe you wouldn't have to
type a bunch of stuff twice. Might be prohibitively complex to
implement, though.
--Sam





From naesten at myrealbox.com  Wed Mar  5 12:10:31 2003
From: naesten at myrealbox.com (Samuel Bronson)
Date: Wed, 05 Mar 2003 14:10:31 -0500
Subject: [Twisted-Python] Re: [Twisted-commits] mktap now accepts --uid=0
 and --gid=0 to really mean root, has command
References: <E18qHDI-0007rx-00@pyramid.twistedmatrix.com> <20030305115129.GA3252@frobozz.local>
Message-ID: <3E664BA7.3090400@myrealbox.com>

Andrew Bennetts wrote:

>On Tue, Mar 04, 2003 at 12:32:28PM -0600, tv CVS wrote:
>
>>-import sys, traceback, os, cPickle, glob
>>+import sys, traceback, os, cPickle, glob, pwd
>>    
>>
>My docs for pwd say that it's only available on unix -- does this change
>mean mktap is broken on win32?
>  
>
Perhaps it would be better to import it only right before using it
(inside the if block)?
--Sam




From glyph at twistedmatrix.com  Wed Mar  5 12:15:06 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 5 Mar 2003 13:15:06 -0600
Subject: [Twisted-Python] NT Service
In-Reply-To: <10E13DF0-4F3A-11D7-9599-000A95686CD8@redivi.com>
Message-ID: <C65C42F4-4F3E-11D7-9352-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Wednesday, March 5, 2003, at 12:41 PM, Bob Ippolito wrote:

> I'm assuming you've already RTFM'ed about win32all's win32service and 
> Twisted.  Here's a stripped example of what has worked very well for 
> me for the few times I was forced to deploy under Windows:

It would be really great if someone could genericize this and create a 
version that had a configuration dialog that allowed you to select a 
particular .tap file to load, rather than instantiating the Application 
inline.  That way deploying on Win32 would be much more directly 
analagous to deploying on unix.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+Zky+vVGR4uSOE2wRAqdLAJ9+KogR9IgvsEwlyhVJT4FQhBQVlQCfdkOL
c7FtjeYrzf8H0fZuNz6mGi4=
=oWYP
-----END PGP SIGNATURE-----




From tv at twistedmatrix.com  Wed Mar  5 12:33:14 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Wed, 5 Mar 2003 21:33:14 +0200
Subject: [Twisted-Python] Re: [Twisted-commits] mktap now accepts --uid=0 and --gid=0 to really mean root, has command
In-Reply-To: <3E664BA7.3090400@myrealbox.com>
References: <E18qHDI-0007rx-00@pyramid.twistedmatrix.com> <20030305115129.GA3252@frobozz.local> <3E664BA7.3090400@myrealbox.com>
Message-ID: <20030305193314.GA8068@lapdog>

On Wed, Mar 05, 2003 at 02:10:31PM -0500, Samuel Bronson wrote:
> >My docs for pwd say that it's only available on unix -- does this change
> >mean mktap is broken on win32?
> >
> Perhaps it would be better to import it only right before using it
> (inside the if block)?

	All I have is this snippet from #twisted, from which I
	understood unconditionally importing pwd to be all ok.

<Tv> Is "import pwd" allowed in twisted codebase?
<Tv> Should I wrap it in something to make it optional?
<itamar> welll
<_moshez> Tv: where
<itamar> it won't work on windows?
<Tv> _moshez: I'm thinking of supporting user/group names in mktap
<glyphBook> Tv: Ideally you should be using cred, but it's
            understandable if that doesn't make sense.
            twisted.web.distrib uses pwd, I think.
<itamar> ooh, nice
<glyphBook> Tv: oh yeah, definitely, that's fine
<Tv> Cool.

	If you guys want me to move it around so it's not imported
	until needed, I _can_ do that. I'd just like a straight
	answer.

-- 
:(){ :|:&};:



From glyph at twistedmatrix.com  Wed Mar  5 12:42:51 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 5 Mar 2003 13:42:51 -0600
Subject: [Twisted-Python] Re: [Twisted-commits] mktap now accepts --uid=0 and --gid=0 to really mean root, has command
In-Reply-To: <20030305193314.GA8068@lapdog>
Message-ID: <A6DDDE0E-4F42-11D7-9352-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Wednesday, March 5, 2003, at 01:33 PM, Tommi Virtanen wrote:

> 	All I have is this snippet from #twisted, from which I
> 	understood unconditionally importing pwd to be all ok.

Sorry about that.

> <Tv> Should I wrap it in something to make it optional?

I understood this differently than what you were asking :).  Wrapping 
and "magic module" objects are  sub-optimal for situations like this; 
best is to import it only when needed so you get an ImportError if and 
only if you try to invoke the functionality that requires pwd on a 
platform that doesn't have it.

This should probably be in the coding standard someplace.

We _also_ need a test farm set up so we can tell when people do this 
:-).  I really need to specify what kind of code needs to work in 
Jython; I'm pretty sure I saw some patches recently that moved errno 
imports around so that Jython will now fail to run twistd or mktap.

> 	If you guys want me to move it around so it's not imported
> 	until needed, I _can_ do that. I'd just like a straight
> 	answer.

That would be best, thanks.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+ZlNAvVGR4uSOE2wRAsrfAJ9AvM667NVO2GzONswBgcV+kJ+lxACePNfM
KgTP8UYbW5fKw5GIZV3nESo=
=Tvp6
-----END PGP SIGNATURE-----




From twisted at itamarst.org  Wed Mar  5 12:44:28 2003
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 5 Mar 2003 14:44:28 -0500
Subject: [Twisted-Python] Re: [Twisted-commits] mktap now accepts --uid=0 and --gid=0 to really mean root, has command
In-Reply-To: <20030305193314.GA8068@lapdog>
References: <E18qHDI-0007rx-00@pyramid.twistedmatrix.com>
	<20030305115129.GA3252@frobozz.local>
	<3E664BA7.3090400@myrealbox.com>
	<20030305193314.GA8068@lapdog>
Message-ID: <20030305144428.1805aa1b.twisted@itamarst.org>

On Wed, 5 Mar 2003 21:33:14 +0200
Tommi Virtanen <tv at twistedmatrix.com> wrote:

> 	If you guys want me to move it around so it's not imported
> 	until needed, I _can_ do that. I'd just like a straight
> 	answer.

I fixed it in CVS - what we meant to say is "you can use so long as it
fails gracefully on Windows".



From tjacobs at kinematic.com  Wed Mar  5 14:01:24 2003
From: tjacobs at kinematic.com (Thad Jacobs)
Date: Wed, 5 Mar 2003 13:01:24 -0800 
Subject: [Twisted-Python] NT Service
Message-ID: <D1A1551B3520D51186B300508B1278FE367ED2@FS2>

Glyph,

I've got the service up and running, but it doesn't do anything.  All I want
to do is make a twisted web application that listens on port 8080 and serves
files out of c:\web  -- or better yet, it would be nice if  I could simply
instantiate the web.tap file just as I would using "twistd -f web.tap".

I'm willing to get under the hood and make this happen, but unfortunately
I'm under a bit of a time constraint.  I've been RTFM'ing all morning, but
the documentation is scattered, and I am a bit green in the realms of
asynchronous server programming, and have been coding in python for less
than a week.

Could you advise me as to what direction to take in instantiating a twisted
web application from within the service?  I was thinking of simply importing
twisted.py, but I can't figure out how to make it run with options I dictate
programatically, than the system command line switches.

Once I've figured this out, I'll  be sure to post the full source, so others
may benefit.


Here's the basic service, almost Identical to the one Bob posted, though I
had to import twisted.internet.reactor to get it to work.

import win32serviceutil
import win32service
import win32event
class KAQueryService(win32serviceutil.ServiceFramework):
   _svc_name_ = "KAQueryService"
   _svc_display_name_ = "Kinematic Query Service"
   def __init__(self, args):
     win32serviceutil.ServiceFramework.__init__(self, args)
     self.hWaitStop = win32event.CreateEvent(None, 0, 0, None)

   def SvcStop(self):
     self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)
     win32event.SetEvent(self.hWaitStop)

   def SvcDoRun(self):
     from twisted.python.log import startLogging
     # we don't have the console, so we log somewhere
     # the NT service logging facilities probably isn't the right place
     startLogging(open('c:/twistedexample.log','a'))
     self.CheckForQuit()
     startTwisted()

   def CheckForQuit(self):
     from twisted.internet import reactor
     #print "Check For Quit"
     rv = win32event.WaitForSingleObject(self.hWaitStop, 10.0)
     if not rv == win32event.WAIT_TIMEOUT:
       print "Received Quit from Win32"
       reactor.stop()
     reactor.callLater(1.0, self.CheckForQuit)

def startTwisted():
   from twisted.internet.app import Application

   #How do I specify a port or load a tap file?
   app = Application("web")
   app.run(save=0)
   print "Finished"

if __name__=='__main__':
   # you could call startTwisted to run as not-a-service
   # or use it for cross-platform reasons
   win32serviceutil.HandleCommandLine(KAQueryService)


-----Original Message-----
From: Glyph Lefkowitz [mailto:glyph at twistedmatrix.com]
Sent: Wednesday, March 05, 2003 11:15 AM
To: twisted-python at twistedmatrix.com
Subject: Re: [Twisted-Python] NT Service


-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Wednesday, March 5, 2003, at 12:41 PM, Bob Ippolito wrote:

> I'm assuming you've already RTFM'ed about win32all's win32service and 
> Twisted.  Here's a stripped example of what has worked very well for 
> me for the few times I was forced to deploy under Windows:

It would be really great if someone could genericize this and create a 
version that had a configuration dialog that allowed you to select a 
particular .tap file to load, rather than instantiating the Application 
inline.  That way deploying on Win32 would be much more directly 
analagous to deploying on unix.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+Zky+vVGR4uSOE2wRAqdLAJ9+KogR9IgvsEwlyhVJT4FQhBQVlQCfdkOL
c7FtjeYrzf8H0fZuNz6mGi4=
=oWYP
-----END PGP SIGNATURE-----


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From dp at twistedmatrix.com  Wed Mar  5 14:18:57 2003
From: dp at twistedmatrix.com (Donovan Preston)
Date: Wed, 5 Mar 2003 13:18:57 -0800
Subject: [Twisted-Python] NT Service
In-Reply-To: <D1A1551B3520D51186B300508B1278FE367ED2@FS2>
Message-ID: <13A19380-4F50-11D7-A546-000393B3EC2C@twistedmatrix.com>

On Wednesday, March 5, 2003, at 01:01 PM, Thad Jacobs wrote:

[ snip snip ]

> def startTwisted():
>    from twisted.internet.app import Application
>
>    #How do I specify a port or load a tap file?
>    app = Application("web")

     # This is for creating a web root and listening on a port manually;
     # You could also probably load a tap but I don't know how.
     from twisted.web import server, static
     root = server.Site(static.File("c:\\web"))

     app.listenTCP(8080, site)

>    app.run(save=0)
>    print "Finished"
>
> if __name__=='__main__':
>    # you could call startTwisted to run as not-a-service
>    # or use it for cross-platform reasons
>    win32serviceutil.HandleCommandLine(KAQueryService)

mktap does the bit of code where you create the Site and File instances 
and call listenTCP. A good goal for making twisted better on windows 
(low on most priority lists since most of the twisted developers don't 
use windows) would be some sort of way to say "install this TAP as a 
service" which basically runs all that boilerplate; I have no idea 
about any of the details of how this would work though.

Hope this helps.

Donovan




From dp at twistedmatrix.com  Wed Mar  5 14:21:41 2003
From: dp at twistedmatrix.com (Donovan Preston)
Date: Wed, 5 Mar 2003 13:21:41 -0800
Subject: [Twisted-Python] NT Service
In-Reply-To: <13A19380-4F50-11D7-A546-000393B3EC2C@twistedmatrix.com>
Message-ID: <753C366B-4F50-11D7-A546-000393B3EC2C@twistedmatrix.com>

Whoops, typo in my code. Sorry.

On Wednesday, March 5, 2003, at 01:18 PM, Donovan Preston wrote:
>
>     # This is for creating a web root and listening on a port manually;
>     # You could also probably load a tap but I don't know how.
>     from twisted.web import server, static
>     site = server.Site(static.File("c:\\web"))
>
>     app.listenTCP(8080, site)




From tjacobs at kinematic.com  Wed Mar  5 14:35:03 2003
From: tjacobs at kinematic.com (Thad Jacobs)
Date: Wed, 5 Mar 2003 13:35:03 -0800 
Subject: [Twisted-Python] NT Service
Message-ID: <D1A1551B3520D51186B300508B1278FE367ED3@FS2>

Works like a charm!!  Thanks, Donovan

-----Original Message-----
From: Donovan Preston [mailto:dp at twistedmatrix.com]
Sent: Wednesday, March 05, 2003 1:19 PM
To: twisted-python at twistedmatrix.com
Subject: Re: [Twisted-Python] NT Service



On Wednesday, March 5, 2003, at 01:01 PM, Thad Jacobs wrote:

[ snip snip ]

> def startTwisted():
>    from twisted.internet.app import Application
>
>    #How do I specify a port or load a tap file?
>    app = Application("web")

     # This is for creating a web root and listening on a port manually;
     # You could also probably load a tap but I don't know how.
     from twisted.web import server, static
     root = server.Site(static.File("c:\\web"))

     app.listenTCP(8080, site)

>    app.run(save=0)
>    print "Finished"
>
> if __name__=='__main__':
>    # you could call startTwisted to run as not-a-service
>    # or use it for cross-platform reasons
>    win32serviceutil.HandleCommandLine(KAQueryService)

mktap does the bit of code where you create the Site and File instances 
and call listenTCP. A good goal for making twisted better on windows 
(low on most priority lists since most of the twisted developers don't 
use windows) would be some sort of way to say "install this TAP as a 
service" which basically runs all that boilerplate; I have no idea 
about any of the details of how this would work though.

Hope this helps.

Donovan


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From tjacobs at kinematic.com  Wed Mar  5 15:20:58 2003
From: tjacobs at kinematic.com (Thad Jacobs)
Date: Wed, 5 Mar 2003 14:20:58 -0800 
Subject: [Twisted-Python] Sample Twisted Web NT Service
Message-ID: <D1A1551B3520D51186B300508B1278FE367ED4@FS2>

#This sample code demonstrates how to mount Twisted Web as a 
#Windows XP / 2000 / NT Service using win32all's win32service

import win32serviceutil
import win32service
import win32event
class TwistedWebNTService(win32serviceutil.ServiceFramework):
   _svc_name_ = "TwistedWebNTService"
   _svc_display_name_ = "Twisted Web NT Service"
   def __init__(self, args):
     win32serviceutil.ServiceFramework.__init__(self, args)
     self.hWaitStop = win32event.CreateEvent(None, 0, 0, None)

   def SvcStop(self):
     self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)
     win32event.SetEvent(self.hWaitStop)

   def SvcDoRun(self):
     from twisted.python.log import startLogging
     # we don't have the console, so we log somewhere
     # the NT service logging facilities probably isn't the right place
     startLogging(open('c:/twistedwebNTService.log','a'))
     self.CheckForQuit()
     startTwisted()

   def CheckForQuit(self):
     from twisted.internet import reactor
     #print "Check For Quit"
     rv = win32event.WaitForSingleObject(self.hWaitStop, 10.0)
     if not rv == win32event.WAIT_TIMEOUT:
       print "Received Quit from Win32"
       reactor.stop()
     reactor.callLater(1.0, self.CheckForQuit)

def startTwisted():
   from twisted.internet.app import Application
   app = Application("web")
   from twisted.web import server, static, twcgi, script, trp
   root = static.File("c:\\web") #Serve files out of c:\\web

  #Add the appropriate processors if you want to serve scripts
   root.processors = {
            '.cgi': twcgi.CGIScript,
            '.php3': twcgi.PHP3Script,
            '.php': twcgi.PHPScript,
            '.epy': script.PythonScript,
            '.rpy': script.ResourceScript,
            '.trp': trp.ResourceUnpickler,
            }
   
   site = server.Site(root)

   app.listenTCP(8080, site)

   app.run(save=0)
   print "Finished"

if __name__=='__main__':
   # you could call startTwisted to run as not-a-service
   # or use it for cross-platform reasons
   win32serviceutil.HandleCommandLine(TwistedWebNTService)



From dw85745 at sprintmail.com  Wed Mar  5 17:34:54 2003
From: dw85745 at sprintmail.com (X)
Date: Wed, 5 Mar 2003 17:34:54 -0700
Subject: [Twisted-Python] Waitable Timers and Events
Message-ID: <002301c2e378$35ddbc60$51c79d40@x>

I have what I think is a unique issue and hoping someone might be able to offer a suggestion.

PROBLEM:  Can't get Do/Loop and Timer/Loop to Exit

I have a static counter in the PAINT event to set up a trigger to call a Do/Loop.
This is done to allow the screen to be painted to a certain point and then the loop is designed to finish painting the screen in slow motion.

Once the Do/Loop is entered it is controlled (slow motion) by calling the Timer/Loop routine which uses SetWaitableTimer and MsgWaitForMultipleObjects to control the speed of painting and allow the user interface to still be active.

Everything works well.

----- Heres were the problem is:

If the program is to exited prior to the loop finishing,  the user clicks File/Exit.
A global structure variable was included in the loop in an attempt to quickly exit both the Do/Loop and the Timer/Loop, but whatever reason is never seen by the Loops prior to the call to unload the MDI form.  The system locks or generates an error.

Any ideas how to resolve?

Thanks
David



-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20030305/a034d949/attachment.html>

From cce at clarkevans.com  Wed Mar  5 23:02:23 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu, 6 Mar 2003 06:02:23 +0000
Subject: [Twisted-Python] Thoughts on Deferred
Message-ID: <20030306060223.GA66896@doublegemini.com>

Ok.  I've been using Deferreds some time now, actually I've
coverted my report server to now use the mechanism as my 
core 'construction' model.   I'd like to report some 
observations:

  1.  The entire deferred processing chain is quite nice, 
      although the bulk of the time my callbacks don't take
      any arguments.  I suspect that most people who do have
      callback args can just make an object and pass a bound
      method as their callback instead of the 'args' mechanism.
      This mechanism could be better supported by providing 
      a wrapper class instead of maintaining all of the args 
      throught the code:

          class DispatchCallback:
              def __init__(self, callback, args, kw):
                  self.callback = callback
                  self.args = args or ()
                  self.kw   = kw or {}
              def apply(self,result):
                  return apply(self.callback, (result,)+self.args, kw)

      Then, in addCallbacks, if any callback was given which had
      args or a kw, you could just construct this dispatch object
      and put the ob.apply into the callback stack.   In this 
      way only users who passed in callbacks with args pay for the
      penalty of applying them.

  2.  The error handling could use help.  The cross-over behavior,
      while unique, doesn't provide any more value over a simple 
      stack /w state flag (good/bad) attach to each callback.

        def _addCallback(self, callback, *args=None, **kw=None, state=good):
            if args or kw: callback = DispatchCallback(callback,args,kw)
            self.callbacks.append((state,callback))

      Of course, existing functions can then be expressed as a
      sequence of addCallback /w state flag.
            
            addCallback  => _addCallback(self,callback,args,kw,state=good)
            addErrback   => _addCallback(self,errback,args,kw,state=bad)
            addCallbacks => addErrback(...); addCallback(...);
           
      It would have the same behavior since the current cross/over
      can easily be denormalized into two entries into the stack, one
      for a bad state (first) and then one for a good state (second).
      With these changes in place, _runCallbacks() is much simpler...

  3.  Deferred also "artifically limits" so that the entire callback
      tree can only be done once.   This involves a hack "MultiDeferred"
      to solve the problem; but with a slightly different _runCallbacks
      plus a __init__ flag, this need not be the case.

      In short, the "multi-call deferred" that I need shouldn't be
      a separate class, its behavior can be rolled into the core Deferred
      without changing existing behavior (default to callOnceOnly).

  4.  Lastly, I'd like to see other "state" variables for the deferred. 
      Essentially, what I see is a process flow, aka state transition
      mechnanism emerging.   For an SQL query, one of the states
      is 'good', 'bad', and 'finished'.  Perhaps I'm a bit off here,
      but being able to handle more than two states could be useful.
      
      I say this beacuse the MultiDeferred class has a addFinishCallback,
      which is fired on the 'finish' state.  Note that errors in the 
      'row' callback and the 'finish' callback could possibly be treated
      the same, so there probably isn't a reason to split this... but
      maybye not.. I'm still thinking this one out.

Just some thoughts.  If you like, I could refactor the Deferred
object as above (it'd be less code & probably cleaner), as well
as updating the documentation and providing examples which run
without modification.

All in all, this is a great concept... and it's working beautyfully
in my current application (mod the minor blemishes above).

Best,

Clark



From twisted at itamarst.org  Wed Mar  5 23:18:01 2003
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 6 Mar 2003 01:18:01 -0500
Subject: [Twisted-Python] Thoughts on Deferred
In-Reply-To: <20030306060223.GA66896@doublegemini.com>
References: <20030306060223.GA66896@doublegemini.com>
Message-ID: <20030306011801.1c49d2cc.twisted@itamarst.org>

On Thu, 6 Mar 2003 06:02:23 +0000
"Clark C. Evans" <cce at clarkevans.com> wrote:

>   2.  The error handling could use help.  The cross-over behavior,
>       while unique, doesn't provide any more value over a simple 
>       stack /w state flag (good/bad) attach to each callback.

Look again :)

In fac, the cross-over behaviour is designed to mimic Python's
try/except semantics in a callback oriented way. And exceptions are
*useful*.

 try:
     x = foo(2)
 except FooError:
     x = None

becomes:

 d = foo(2)
 def err(f):
     f.trap(FooError)
     return None
 d.addErrback(err).addCallback(gotX)



From pyp at gmx.net  Wed Mar  5 23:38:28 2003
From: pyp at gmx.net (Mike =?iso-8859-1?Q?M=FCller?=)
Date: Thu, 06 Mar 2003 07:38:28 +0100
Subject: [Twisted-Python] Twisted.Web as scgi client
Message-ID: <4.3.1.1.20030305223225.00aaaa70@pop.gmx.net>

Hi,

I am new to this list and twisted. I just played around with the howto 
setting up a web server with Twisted.Web serving static content, cgi and 
*.rpy. Works very nicely. I am impressed.
I also like Quixote. Running it as a cgi script has all the overhead of 
starting everything again for each request. It would be nice to have 
Twisted.Web act as scgi client 
(http://www.mems-exchange.org/software/scgi/) that redirects all requests 
to, lets say, www.mydomain.com/askscgi to the scgi server that is run by 
Quixote. This way I can use all of Twisted.Web or Quixote when I want. 
Since the scgi protocol is designed to be implemented more easily than 
FastCGI somebody might already have done something like this. Or is it 
planned to be done sometime?

Thanks

Mike




From cce at clarkevans.com  Thu Mar  6 00:11:04 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu, 6 Mar 2003 07:11:04 +0000
Subject: [Twisted-Python] Thoughts on Producer / Consumer
In-Reply-To: <20030306060223.GA66896@doublegemini.com>
References: <20030306060223.GA66896@doublegemini.com>
Message-ID: <20030306071104.GA67095@doublegemini.com>

While I'm musing... I have a few thoughts on Producer/Consumer as well;
but I don't yet have any experience with the Twisted constructs yet...
so I could be speaking incorrectly.

Before I get going, I wanted to point out that there is some overlap
with this producer/consumer mechanism and the Deferred mechnaism.  In
particular, the callback chain processing in _runCallbacks seems very
much like a sequence of steps in an operation.  And, the Deferred
package also has a mechanism to merge two or more deferreds into a
single deferred, etc.  These things are very much in the spirit of a
event 'reactor' processing.  This observation is especially true when
you allow the Deferred operation to 'return multiple times', aka one
callback per row.

That said, I expected a Producer/Consumer chain to have something like
the following:
  
   class Producer:
      def cancel(self): pass           # permanently stop processing
      def pause(self): pass            # stop producing events
      def resume(self): pass           # resume after being paused
      
   class Consumer(self):
      def start(self): pass            # called before events start
      def handle(self,data): pass      # called for each event
      def finish(self): pass           # called after events are done

   class Processor(Producer,Consumer): pass

   Further, it could be possible that a consumers and producers have
   a many-to-one relationship, in which case, all of the Producer
   functions would take a consumer argument and all of the Consumer
   functions would take a producer argument.

The IConsumer interface seems close, I guess start/handle/finish is the
same as registerProducer/write/unregisterProducer.  Besides not liking
the names, I'm not sure if it is semantically the same as what I was
thinking.  The registerProducer call seems to hint at a
many-producer-to-one-consumer call model, where a consumer can be the
target of many producers.  However, I don't see a corresponding producer
argument in the 'write' or 'unregisterProducer'... so that can't be it.
Lastly, I think that 'write' is too specific, in a database case you
want to hand rows to the consumer, not strings (as implied by the
'write' name).

I grok the IProducer interface much better, in fact it has almost the
same arguments that I expected.  As for the 'streaming' flag, if it is
set, it seems that the producer will generate one event and then
automatically pause.  So, I'd rename streaming to "autopause" or
"pauseonwrite" as this better reflects the semantics -- right now, after
just reading the code, I'm not sure if 'streaming' means that it pauses
automatically after each write or not.  Further, the choice if a
producer is started initially or stopped initally seems one that should
be made higher-up; tying it to 'streaming' or 'unstreaming' doesn't
really make sense.  Finally, the producer interface should probably have
two attributes, 'autopause' and 'isPaused' or something equivalent; the
registerProducer function doesn't need the streaming flag.

Exception handling doesn't seem to be spelled out at all in this chain,
perhaps it need not be.  I don't know, but it seems that some sort of
error propigation would be very useful so that the offending 'initial'
data can be found when something down-stream goes bezerk.  So, someway
to collect a stack trace up the producer/consumer chain would be quite
useful.  This could be done with one function on the Producer:
getErrorContext(), which returns a string

Another useful thing for this model to do is allow a 'tag' to be passed
as an argument to each of the start/handle/finish functions.  This,
together with allowing nested start/finish calls would allow
hierarchical streams to be handled.  In this model, the 'start' call
could provide a subordinate consumer to handle events for a particular
child subtree.   This mechanism is very handy for common
content-producing patterns.

Lastly, the linkage back to the Deferred could be done by a
DeferredProcess, where each item added to a DeferredProcess is one of a
Producer (the first item in the stack), a Process (middle items), and a
Consumer (final item).

Clark



From cce at clarkevans.com  Thu Mar  6 00:19:28 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu, 6 Mar 2003 07:19:28 +0000
Subject: [Twisted-Python] Thoughts on Deferred
In-Reply-To: <20030306011801.1c49d2cc.twisted@itamarst.org>
References: <20030306060223.GA66896@doublegemini.com> <20030306011801.1c49d2cc.twisted@itamarst.org>
Message-ID: <20030306071928.GA67204@doublegemini.com>

On Thu, Mar 06, 2003 at 01:18:01AM -0500, Itamar Shtull-Trauring wrote:
| In fac, the cross-over behaviour is designed to mimic Python's
| try/except semantics in a callback oriented way. And exceptions are
| *useful*.
| 
|  try:
|      x = foo(2)
|  except FooError:
|      x = None
| 
| becomes:
| 
|  d = foo(2)
|  def err(f):
|      f.trap(FooError)
|      return None
|  d.addErrback(err).addCallback(gotX)

You just proved my point; and I agree this is very useful.  ;)

By using addErrback and addCallback as distinct calls you are infact
*disabling* the cross-over behavior (which is confusing anyway) and just
using the Deferred stack in a linear way.  You only get the 'cross-over'
behavior if you use addCallbacks or addBoth, the latter, IMHO, being
somewhat deceptive since it is equivalent to addErrback _followedby_
addCallback, and I would have expected the opposite since callback
comes before errback in the arguments to addCallbacks.

I'm talking about a refactor which would clean up the innerds of
the Deferred mechanism... without changing any of the exposed 
behavior... besides being easier to explain.

Grins,

Clark



From cce at clarkevans.com  Thu Mar  6 01:03:04 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu, 6 Mar 2003 08:03:04 +0000
Subject: [Twisted-Python] Thoughts on Deferred
In-Reply-To: <20030306011801.1c49d2cc.twisted@itamarst.org>
References: <20030306060223.GA66896@doublegemini.com> <20030306011801.1c49d2cc.twisted@itamarst.org>
Message-ID: <20030306080304.GA67355@doublegemini.com>

Itamar,

I had another question on Deferreds: in the comments for DeferredList it
states that an errback on the list itself won't cover errors to the list
items.  I was wondering why this sort of logic wasn't implemented.  I'm
asking beacuse I'm using DeferredList and this is the sort of thing that
I expected (and would want).   Also, it's similar to a concern I have
with the MultiDeferred thingy that I wrote.   BTW, if multi-callback
deferral is added to Deferred, then the DeferredList could just
'forward' the items from each deferred into a stream of calls... 

Clark

P.S.  I think I now see what you mean by cross-over.  The docs for
Deferred should include the example you have below as to how to use it.
Although the explnation can be simpler:
       
   The Deferred mechanism may be visualized as a stack of callback
   and errback functions.  The mechanism starts at the top of the
   stack (the first function to be added), with a seed result or
   exception from the function which was deferred.  If the current
   item is a result, the callback processing mechanism pops the 
   stack untill a callback is found, skipping any errbacks found
   along the way.  This callback can then either return a result
   or throw an exception.  If an exception is encountered, either 
   from one of the callbacks or from the initial seed, then 
   functions are popped off the stack until a errback is found, 
   skipping any intermediate callbacks.  The errback is then called
   with the fault, and processing continues, calling the next 
   errback if the errback raises an exception (or returns the
   failure.Failure object).  

Yes; the Deferred mechanism doesn't do "try/except" in the
_runCallbacks, but it should... so that exceptions can be
raised as well as returning failure.Failure.  Yet another
patch... ;)



From martin at datacash.com  Thu Mar  6 02:31:49 2003
From: martin at datacash.com (Martin Waite)
Date: 06 Mar 2003 09:31:49 +0000
Subject: [Twisted-Python] newbie question about using deferreds and
	threads
In-Reply-To: <20030305100420.GG10282@radii>
References: <1046856868.4995.36.camel@pascal> 
	<20030305100420.GG10282@radii>
Message-ID: <1046943109.3415.74.camel@pascal>

On Wed, 2003-03-05 at 10:04, Christopher Armstrong wrote:
> 
> Mapping of RID:Deferred is quite sane, I think. It could probably
> even be called an idiom, by now.
> 
> "somehow activates the Deferred" is just
> self.requests[rid].callback(val), where self.requests is your mapping,
> rid is the request ID, and val is the value that was recently made
> available.
> 
Thanks for the advice Chris.

I've hacked away for a few hours and nearly have something working.

I have two database threads, one running write_db_request and the
other running read_db_response.  The listener posts completed
requests (end of request is a line containing only a '.') to
write_db_request via a queue, and also allocates a RID and pops
a deferred into the request hash.

The read_db_response thread polls the database for 'new' responses,
pulls the RID and response data, and activates the deferred
via the request hash.  The deferred calls printData which in turn
invokes Frontd.Respond, which prints the response and closes the 
connection.

I still have a way to go on this.  Problems are

1) I need a mutex around the request hash. I can use the 
   lock mechanism from the thread module for this.

2) If i do use a mutex (and I already am indirectly by
   using a Queue), then aren't I running the risk of blocking ?

3) When using telnet to test the program, I enter some data
   followed by the terminator (".\n") - and I get a response.
   However the connection remains open until I enter a newline.

4) The database threads continue to run after the program has stopped.

I include my code below for your entertainment. Any pointers on how 
I can improve on this are welcomed.

My next line of attack is to try and get rid of the database threads
and also bring in the Application object.  If I get rid of the threads, 
I get rid of the mutex issues.  Will adbapi allow me to do this ?

regards,
Martin

========================================================================

from twisted.internet.protocol import Factory, Protocol
from twisted.internet import reactor
from twisted.internet import defer

from Queue import Queue
from sys import stdout
import MySQLdb
import re

q = Queue(0)
request = {}

rid = 0

class Frontd(Protocol):

    def connectionMade(self):
        self.data = ''
        self.active = 1

    def dataReceived(self,data):
        stdout.write( data )
        if self.active == 1:
            self.data = self.data + data
            if ( re.search("^\s*\.\s*$", self.data, re.M ) ):
                global rid;  
                rid = rid + 1 
                q.put( { 'rid' : rid, 'msg' : self.data } )
                d = defer.Deferred()  
                d.addCallback(printData, self)
                
                request[rid] = d   # need a mutex around this !!!!
                self.active = 0
                #self.transport.stopReading()

    def respond(self,data):
        self.transport.write(data + "\n")
        self.transport.loseConnection()

class FrontdFactory(Factory):

    protocol = Frontd

def printData(d, frontd):
    frontd.respond(d)
    
def read_db_response():
    import time
    cursor = conn_in.cursor()
    while (1) :
        time.sleep(0.5)
        cursor.execute( "update msg set status = 'wip' where status = 'new'" )
        cursor.execute( "select rid, response from msg where status = 'wip'" )
        rows = cursor.fetchall()
        for row in rows:
            stdout.write( "rid %d response '%s'\n" % (row[0], row[1]))
            request[row[0]].callback( row[1] )
        cursor.execute( "update msg set status = 'done' where status = 'wip'" )

def write_db_request():
    import time
    cursor = conn_out.cursor()
    while (1) :
        req = q.get()
        cursor.execute( "insert into msg set rid=%s, msg=%s, response='help'", (req['rid'], req['msg']) )

conn_in  = MySQLdb.connect(  host = 'localhost', user = 'martin', passwd = 'password', db = 'test' );
conn_out = MySQLdb.connect(  host = 'localhost', user = 'martin', passwd = 'password', db = 'test' );

# run method in thread
reactor.callInThread( read_db_response )
reactor.callInThread( write_db_request )

reactor.listenTCP(8007, FrontdFactory())
reactor.run()





From glyph at twistedmatrix.com  Thu Mar  6 04:34:29 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 6 Mar 2003 05:34:29 -0600
Subject: [Twisted-Python] Thoughts on Deferred
In-Reply-To: <20030306060223.GA66896@doublegemini.com>
Message-ID: <98040940-4FC7-11D7-9352-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Thursday, March 6, 2003, at 12:02 AM, Clark C. Evans wrote:

>   1.  The entire deferred processing chain is quite nice,
>       although the bulk of the time my callbacks don't take
>       any arguments.  I suspect that most people who do have
>       callback args can just make an object and pass a bound
>       method as their callback instead of the 'args' mechanism.

Interesting idea, but I'm not sure about it yet.  Need to think it over.

>   2.  The error handling could use help.

You don't seem to understand it completely.  See itamar's post.

>   3.  Deferred also "artifically limits" so that the entire callback
>       tree can only be done once.   This involves a hack 
> "MultiDeferred"
>       to solve the problem; but with a slightly different _runCallbacks
>       plus a __init__ flag, this need not be the case.

If you actually try this and figure out how to get it work with the 
cases that Deferreds are used, I would be interested in seeing it, 
since this is a common criticism.  However, Deferreds are not event 
broadcasters, they are deferred results, and requests that are made 
once should only be answered once.  The following behavior, for example:

	d = Deferred()
	d.addCallback(foo)
	d.callback(bar)
	d.addCallback(baz)

only calls 'foo' and 'baz' once, which makes perfect sense: each 
callback is called as soon as possible with the result at that point in 
the chain.

In a "multi-"deferred case, though, what happens?  We add another 
'd.callback(boz)' to the end.  Then what?  does 'foo' get called once 
and 'baz' get called once?  'foo' called twice and 'baz' called once?  
'foo' and 'baz' both called twice with foo and with bar?

This makes callback execution highly dependent upon the order in which 
callbacks are registered.  Some other, similar callback abstraction 
mechanism might be useful here, but the semantics of deferreds would 
become pretty badly polluted to add something which _does_ depend on 
timing of the '.callback' method, where Deferreds have spent so much 
energy trying to get away from caring about that order.  Having to care 
about this on a regular basis smacks of the same sort of mandatory 
awareness of order-of-execution that thread programming brings.

>   4.  Lastly, I'd like to see other "state" variables for the deferred.
>       Essentially, what I see is a process flow, aka state transition
>       mechnanism emerging.   For an SQL query, one of the states
>       is 'good', 'bad', and 'finished'.  Perhaps I'm a bit off here,
>       but being able to handle more than two states could be useful.

This is why the Failure object has an exception type.  See the trap 
method.  For things that aren't errors you should be able to 
encapsulate that state information in the result.

More than two states smells like overengineering to me.  Does anyone 
else need this?

> Just some thoughts.  If you like, I could refactor the Deferred
> object as above (it'd be less code & probably cleaner), as well
> as updating the documentation and providing examples which run
> without modification.

Regardless of my criticisms I'd like to see you mail a patch to the 
list, so that I can comment on it more specifically.  Especially the 
first point: some more examples of how that would work would be helpful.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+ZzJJvVGR4uSOE2wRAvg8AKCEUUK4FvoOoTQzm3a2dUAVfLZCfACePMRW
ENuwW/CTSXdtI3H/GeHt/cY=
=O01d
-----END PGP SIGNATURE-----




From fog at initd.org  Thu Mar  6 04:50:06 2003
From: fog at initd.org (Federico Di Gregorio)
Date: 06 Mar 2003 12:50:06 +0100
Subject: [Twisted-Python] runQuery isolation patch
Message-ID: <1046951406.990.107.camel@momo.initd.org>

runQuery has a problem when used with databases with transactions and
high isolation levels (like postgresql+psycopg): it never closes the
transaction leaving threads using that connection from the pool
completely isolated from changes to the database. the solution is to
call rollback() on the connection just after the query has been
executed.

simple patch follows:

--- adbapi.py-old       2003-03-06 12:48:02.000000000 +0100
+++ adbapi.py   2003-03-06 12:49:01.000000000 +0100
@@ -97,6 +97,7 @@
         apply(curs.execute, args, kw)
         result = curs.fetchall()
         curs.close()
+       conn.rollback()
         return result
  
     def _runOperation(self, args, kw):

-- 
Federico Di Gregorio
Debian GNU/Linux Developer                                fog at debian.org
INIT.D Developer                                           fog at initd.org
  Gli esseri umani, a volte, sono destinati, per il solo fatto di
   esistere, a fare del male a qualcuno.              -- Haruki Murakami
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030306/35099af2/attachment.sig>

From fog at initd.org  Thu Mar  6 07:04:44 2003
From: fog at initd.org (Federico Di Gregorio)
Date: 06 Mar 2003 15:04:44 +0100
Subject: [Twisted-Python] PATCH: runQuery
Message-ID: <1046959484.991.142.camel@momo.initd.org>

while patching runQuery to solve my postgresql/psycopg problems i
discovered a much problematic problem.

essentially if a query run through runQuery raise an exception, the
exception is propagated but rollback() is never called on the
connection. this leaves the connection in a "dirty" state and the
effects on the next query are database dependent (postgresql, for
example,  will simply discard all following queries until next
rollback()).

a patch follows:

--- adbapi.py-old       2003-03-06 12:48:02.000000000 +0100
+++ adbapi.py   2003-03-06 13:02:33.000000000 +0100
@@ -94,9 +94,12 @@
     def _runQuery(self, args, kw):
         conn = self.connect()
         curs = conn.cursor()
-        apply(curs.execute, args, kw)
-        result = curs.fetchall()
-        curs.close()
+       try:
+           apply(curs.execute, args, kw)
+           result = curs.fetchall()
+           curs.close()
+       finally:
+           conn.rollback()
         return result
  
     def _runOperation(self, args, kw):

-- 
Federico Di Gregorio
Debian GNU/Linux Developer                                fog at debian.org
INIT.D Developer                                           fog at initd.org
                             Best friends are often failed lovers. -- Me
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030306/de97b76a/attachment.sig>

From cce at clarkevans.com  Thu Mar  6 08:03:25 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu, 6 Mar 2003 15:03:25 +0000
Subject: [Twisted-Python] Thoughts on Deferred
In-Reply-To: <98040940-4FC7-11D7-9352-000393C9700E@twistedmatrix.com>
References: <20030306060223.GA66896@doublegemini.com> <98040940-4FC7-11D7-9352-000393C9700E@twistedmatrix.com>
Message-ID: <20030306150325.GB68231@doublegemini.com>

On Thu, Mar 06, 2003 at 05:34:29AM -0600, Glyph Lefkowitz wrote:
| On Thursday, March 6, 2003, at 12:02 AM, Clark C. Evans wrote:
| >  1.  The entire deferred processing chain is quite nice,
| >      although the bulk of the time my callbacks don't take
| >      any arguments.  I suspect that most people who do have
| >      callback args can just make an object and pass a bound
| >      method as their callback instead of the 'args' mechanism.
| 
| Interesting idea, but I'm not sure about it yet.  Need to think it over.

Ok.  I'll post a patch for approval.

| >  2.  The error handling could use help.
| 
| You don't seem to understand it completely.  See itamar's post.

I think I was proposing an functionally equivalent option to
the current implementation.  After some thought, there really
isn't an advantage either way, although your implementation
could be ever-so-slightly-faster.   Let's drop this one.

| >  3.  Deferred also "artifically limits" so that the entire callback
| >      tree can only be done once.   This involves a hack 
| >"MultiDeferred"
| >      to solve the problem; but with a slightly different _runCallbacks
| >      plus a __init__ flag, this need not be the case.
| 
| If you actually try this and figure out how to get it work with the 
| cases that Deferreds are used, I would be interested in seeing it, 
| since this is a common criticism.  However, Deferreds are not event 
| broadcasters, they are deferred results, and requests that are made 
| once should only be answered once.

Yes, this just doesn't fit since I want to provide for "partial" 
results along the way; aka a database query or a fragment of 
a file, etc.   

|  The following behavior, for example:
| 
| 	d = Deferred()
| 	d.addCallback(foo)
| 	d.callback(bar)
| 	d.addCallback(baz)

Is this common?  

I think in a multi-result case, you can't add additional 
callbacks once 'callback' has been invoked; this restriction
is needed since you don't want to cache every value 
just-in-case another callback would be added later.

| only calls 'foo' and 'baz' once, which makes perfect sense: each 
| callback is called as soon as possible with the result at that point in 
| the chain.

Right; and any modifications would maintain the current behavior.  The
implementation path would add an additional flag to Deferred to indicate
if it was a multi-result thingy.   I'm still trying to figure out how
to send a 'finished' message down the chain.  I think this is somewhat
related to consumer/producer as well... a bit more thought is needed.

| In a "multi-"deferred case, though, what happens?  We add another 
| 'd.callback(boz)' to the end.  Then what?  does 'foo' get called once 
| and 'baz' get called once?  'foo' called twice and 'baz' called once?  
| 'foo' and 'baz' both called twice with foo and with bar?

You'd have one more call of 'foo' and 'bar', 'foo' passed 'boz', 
assuming that the callback(bar) happened after addCallback(baz).
I can't see how you'd make it work otherwise, beacuse you don't
really want to cache the value.

| This makes callback execution highly dependent upon the order in which 
| callbacks are registered.

It is already hightly dependent on this... addCallback(foo) followed
by addCallback(bar) is very different than addCallback(bar) followed
by addCallback(foo).  ;)

| Having to care about this on a regular basis smacks of the same 
| sort of mandatory awareness of order-of-execution that thread
| programming brings.

Agreed.  So you probably could'nt support the full semantics, i.e.,
the call chain would be much less dynamic.

| >  4.  Lastly, I'd like to see other "state" variables for the deferred.
| >      Essentially, what I see is a process flow, aka state transition
| >      mechnanism emerging.   For an SQL query, one of the states
| >      is 'good', 'bad', and 'finished'.  Perhaps I'm a bit off here,
| >      but being able to handle more than two states could be useful.
| 
| This is why the Failure object has an exception type.  See the trap 
| method.  For things that aren't errors you should be able to 
| encapsulate that state information in the result.

Ok.  I was just trying to differentate between a 'chunk' notify
and a finish message.  Probably this is another difference 
between the two Deferred and MultiDeferred.  Perhaps they should
stay distinct then.




From twisted at itamarst.org  Thu Mar  6 08:28:30 2003
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 6 Mar 2003 10:28:30 -0500
Subject: [Twisted-Python] Thoughts on Deferred
In-Reply-To: <20030306080304.GA67355@doublegemini.com>
References: <20030306060223.GA66896@doublegemini.com>
	<20030306011801.1c49d2cc.twisted@itamarst.org>
	<20030306080304.GA67355@doublegemini.com>
Message-ID: <20030306102830.16f54f6c.twisted@itamarst.org>

On Thu, 6 Mar 2003 08:03:04 +0000
"Clark C. Evans" <cce at clarkevans.com> wrote:

> Yes; the Deferred mechanism doesn't do "try/except" in the
> _runCallbacks, but it should... so that exceptions can be
> raised as well as returning failure.Failure.  Yet another
> patch... ;)

If an exception is raised in a callback function t will be passed to the
next errback in the chain.



From abe at fettig.net  Thu Mar  6 13:13:38 2003
From: abe at fettig.net (Abe Fettig)
Date: 06 Mar 2003 15:13:38 -0500
Subject: [Twisted-Python] gtk2reactor still broken?
Message-ID: <1046981618.734.15.camel@mingus>

Hi folks,

I just apt-get upgraded my python2.2-twisted (to verion
1.0.3+1.0.4alpha1) and python2.2-gtk2 (to version 1.99.15), and now the
Twisted/GTK2 app I've been working on can no longer connectTCP - it gets
a Timeout error every time.  Last month there was some discussion about
a problem with th gtk2reactor and the latest pygtk builds, but
supposedly the problem was fixed (see http://www.twistedmatrix.com/
pipermail/twisted-python/2003-February/002762.html).

It seems to me that the problem isn't fixed.  As a test I did 

import gtk2reactor
gtk2reactor.install()

at the beginning of another twisted script, and it seemed to create the
same problem.

Is there anybody who is having success with gtk2reactor and the latest
pygtk?

-- 
Abe Fettig <abe at fettig.net>




From cce at clarkevans.com  Thu Mar  6 14:01:43 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu, 6 Mar 2003 21:01:43 +0000
Subject: [Twisted-Python] PATCH: runQuery
In-Reply-To: <1046959484.991.142.camel@momo.initd.org>
References: <1046959484.991.142.camel@momo.initd.org>
Message-ID: <20030306210143.GB69568@doublegemini.com>

Federico,

Glyph is giving me CVS access soon; when he does, I'll
patch and test (beacuse I need to merge it in with my
'fetchmany' code).

Thanks for the patch,

Clark

On Thu, Mar 06, 2003 at 03:04:44PM +0100, Federico Di Gregorio wrote:
| while patching runQuery to solve my postgresql/psycopg problems i
| discovered a much problematic problem.
| 
| essentially if a query run through runQuery raise an exception, the
| exception is propagated but rollback() is never called on the
| connection. this leaves the connection in a "dirty" state and the
| effects on the next query are database dependent (postgresql, for
| example,  will simply discard all following queries until next
| rollback()).
| 
| a patch follows:
| 
| --- adbapi.py-old       2003-03-06 12:48:02.000000000 +0100
| +++ adbapi.py   2003-03-06 13:02:33.000000000 +0100
| @@ -94,9 +94,12 @@
|      def _runQuery(self, args, kw):
|          conn = self.connect()
|          curs = conn.cursor()
| -        apply(curs.execute, args, kw)
| -        result = curs.fetchall()
| -        curs.close()
| +       try:
| +           apply(curs.execute, args, kw)
| +           result = curs.fetchall()
| +           curs.close()
| +       finally:
| +           conn.rollback()
|          return result
|   
|      def _runOperation(self, args, kw):
| 
| -- 
| Federico Di Gregorio
| Debian GNU/Linux Developer                                fog at debian.org
| INIT.D Developer                                           fog at initd.org
|                              Best friends are often failed lovers. -- Me





From cce at clarkevans.com  Thu Mar  6 14:08:07 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu, 6 Mar 2003 21:08:07 +0000
Subject: [Twisted-Python] coding standard: column width?
In-Reply-To: <20030305181524.GA62536@doublegemini.com>
References: <20030304061612.GA52189@doublegemini.com> <3E657E23.10908@myrealbox.com> <1046839493.955.66.camel@golux> <20030305181524.GA62536@doublegemini.com>
Message-ID: <20030306210807.GC69568@doublegemini.com>

I asked this question in private (with regard to getting CVS access)
and Glyph indicated that he wouldn't mind whitespace changes
that strictly followed the indenting guidelines (4 spaces, no tabs),
but that he only wanted stuff like this changed when one is in
the vicinity of the offence; I infer, as to minimise testing overhead.

Best,

Clark

On Wed, Mar 05, 2003 at 06:15:24PM +0000, Clark C. Evans wrote:
| So, would purely whitespace patches fixing lines that
| go over 79 columns be accepted?
| 
| On Tue, Mar 04, 2003 at 11:44:53PM -0500, Steve Waterbury wrote:
| | On Tue, 2003-03-04 at 23:33, Samuel Bronson wrote:
| | > Clark C. Evans wrote:
| | > >The (very clear) coding standards don't mention a preferred column width.  
| | > >Could it be possible to add a 76 column code wrap requirement.  This is 
| | > >useful for those of us who use your aged 80 column terminals, and more
| | >  
| | > Or code at the console, or prefer 80 column emacs windows ;-)
| | 
| | Right.  The Twisted coding standards are clear ... but they 
| | shouldn't have to say everything:  in the absence of explicit 
| | direction from the Twisted coding standard, the Python style 
| | guidelines should be followed (PEP 8 and PEP 257).
| 
| | From PEP 8 (http://www.python.org/peps/pep-0008.html):
| | 
| |     There are still many devices around that are limited to 80
| |     character lines; plus, limiting windows to 80 characters makes it
| |     possible to have several windows side-by-side.  The default
| |     wrapping on such devices looks ugly.  Therefore, please limit all
| |     lines to a maximum of 79 characters (Emacs wraps lines that are
| |     exactly 80 characters long).  For flowing long blocks of text
| |     (docstrings or comments), limiting the length to 72 characters is
| |     recommended.
| 
| _______________________________________________
| Twisted-Python mailing list
| Twisted-Python at twistedmatrix.com
| http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From dave at krondo.com  Thu Mar  6 13:53:03 2003
From: dave at krondo.com (Dave Peticolas)
Date: 06 Mar 2003 12:53:03 -0800
Subject: [Twisted-Python] PATCH: runQuery
In-Reply-To: <1046959484.991.142.camel@momo.initd.org>
References: <1046959484.991.142.camel@momo.initd.org>
Message-ID: <1046983983.1834.149.camel@oneiros>

On Thu, 2003-03-06 at 06:04, Federico Di Gregorio wrote:
> while patching runQuery to solve my postgresql/psycopg problems i
> discovered a much problematic problem.
> 
> essentially if a query run through runQuery raise an exception, the
> exception is propagated but rollback() is never called on the
> connection. this leaves the connection in a "dirty" state and the
> effects on the next query are database dependent (postgresql, for
> example,  will simply discard all following queries until next
> rollback()).
> 
> a patch follows:
> 
> --- adbapi.py-old       2003-03-06 12:48:02.000000000 +0100
> +++ adbapi.py   2003-03-06 13:02:33.000000000 +0100
> @@ -94,9 +94,12 @@
>      def _runQuery(self, args, kw):
>          conn = self.connect()
>          curs = conn.cursor()
> -        apply(curs.execute, args, kw)
> -        result = curs.fetchall()
> -        curs.close()
> +       try:
> +           apply(curs.execute, args, kw)
> +           result = curs.fetchall()
> +           curs.close()
> +       finally:
> +           conn.rollback()
>          return result
>   
>      def _runOperation(self, args, kw):

Good catch! I wonder, though, shouldn't we be calling
commit() instead of rollback()? What if the query had
side-effects in the database, won't it undo those
changes?

dave

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20030306/9e792846/attachment.sig>

From twisted at itamarst.org  Thu Mar  6 13:55:13 2003
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 6 Mar 2003 15:55:13 -0500
Subject: [Twisted-Python] PATCH: runQuery
In-Reply-To: <20030306210143.GB69568@doublegemini.com>
References: <1046959484.991.142.camel@momo.initd.org>
	<20030306210143.GB69568@doublegemini.com>
Message-ID: <20030306155513.48317ab0.twisted@itamarst.org>

On Thu, 6 Mar 2003 21:01:43 +0000
"Clark C. Evans" <cce at clarkevans.com> wrote:

> Glyph is giving me CVS access soon; when he does, I'll
> patch and test (beacuse I need to merge it in with my
> 'fetchmany' code).

I've already commited this. Time to subscribe to twisted-commits :)



From andrew-twisted at puzzling.org  Thu Mar  6 15:35:11 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 7 Mar 2003 09:35:11 +1100
Subject: [Twisted-Python] tap2deb -v/--version bug
In-Reply-To: <3E664A62.2070300@myrealbox.com>
References: <20030304141000.GB13198@lapdog> <20030304180237.GA19482@lapdog> <3E664A62.2070300@myrealbox.com>
Message-ID: <20030306223511.GC11021@frobozz.local>

On Wed, Mar 05, 2003 at 02:05:06PM -0500, Samuel Bronson wrote:
>  Tommi Virtanen wrote:
> 
> >	Moshez said "go ahead and commit, but fix the manpage too", so
> >	I did just that.
> >
> I think manpages would ideally be generated from the source code. Then
> it would be easy to remember to do it, and maybe you wouldn't have to
> type a bunch of stuff twice. Might be prohibitively complex to
> implement, though.

You're welcome to try :)

I doubt you'll be able to generate a man page for mktap that's as good as
the current one.  One reason is that the descriptions of the various options
is a bit longer in a man page than in the --help...  I don't much like the
duplication either, but I see no better alternative.

-Andrew.




From fog at initd.org  Thu Mar  6 16:12:29 2003
From: fog at initd.org (Federico Di Gregorio)
Date: 07 Mar 2003 00:12:29 +0100
Subject: [Twisted-Python] PATCH: runQuery
In-Reply-To: <1046983983.1834.149.camel@oneiros>
References: <1046959484.991.142.camel@momo.initd.org>
	 <1046983983.1834.149.camel@oneiros>
Message-ID: <1046992349.1052.10.camel@momo.initd.org>

Il gio, 2003-03-06 alle 21:53, Dave Peticolas ha scritto:

> Good catch! I wonder, though, shouldn't we be calling
> commit() instead of rollback()? What if the query had
> side-effects in the database, won't it undo those
> changes?

this is exactly why rollback is used. a select is supposed to *not* have
side-effects and having your app depend on some side-effect commited by
a method call supposed to just read from the database is quite wrong.
(note that selects on stuff like nextval() on sequences are transaction
transparent and so not influenced by rollback and commit.)

-- 
Federico Di Gregorio
Debian GNU/Linux Developer                                fog at debian.org
INIT.D Developer                                           fog at initd.org
  Gli avvoltoi cinesi si nutrono di arte, ma possono anche mangiare
   i `domani'.                                        -- Haruki Murakami
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030307/23ac6dc2/attachment.sig>

From exarkun at intarweb.us  Thu Mar  6 16:24:50 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Thu, 6 Mar 2003 18:24:50 -0500
Subject: [Twisted-Python] Pending PendingDeprecationWarning
Message-ID: <20030306232450.GB553@meson.dyndns.org>

  As some may already know, Python 2.3 will see apply() change to a function
implemented in Python and deprecated through the use of the
PendingDeprecationWarning.  While it will still be around for some time, as
of 2.3 it will a stiff runtime penalty.

  I'd like to suggest that everyone use the new syntax when writing new code
for Twisted, and if you happen to be making changes to existing code that
uses apply(), to update these usages to the new syntax as well.

  I considered doing a monolothic patch to fix all current usages, but I
think at least some of you will agree that an incremental approach is a
better idea.

  Jp

-- 
 up 3 days, 15:58, 6 users, load average: 0.04, 0.05, 0.00
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030306/ef94adf3/attachment.sig>

From fog at initd.org  Thu Mar  6 16:24:11 2003
From: fog at initd.org (Federico Di Gregorio)
Date: 07 Mar 2003 00:24:11 +0100
Subject: [Twisted-Python] gtk2reactor still broken?
In-Reply-To: <1046981618.734.15.camel@mingus>
References: <1046981618.734.15.camel@mingus>
Message-ID: <1046993051.1052.24.camel@momo.initd.org>

Il gio, 2003-03-06 alle 21:13, Abe Fettig ha scritto:
> Hi folks,
> 
> I just apt-get upgraded my python2.2-twisted (to verion
> 1.0.3+1.0.4alpha1) and python2.2-gtk2 (to version 1.99.15), and now the
> Twisted/GTK2 app I've been working on can no longer connectTCP - it gets
> a Timeout error every time.  Last month there was some discussion about
> a problem with th gtk2reactor and the latest pygtk builds, but
> supposedly the problem was fixed (see http://www.twistedmatrix.com/
> pipermail/twisted-python/2003-February/002762.html).
> 
> It seems to me that the problem isn't fixed.  As a test I did 
> 
> import gtk2reactor
> gtk2reactor.install()
> 
> at the beginning of another twisted script, and it seemed to create the
> same problem.
> 
> Is there anybody who is having success with gtk2reactor and the latest
> pygtk?

i apt-get updated yesterday and my application is still working right.
here are the versions i use:

ii  python2.2-twisted  1.0.3+1.0.4alpha1-1
ii  python2.2-gtk2     1.99.15-2

note that i don't use listenTCP on the Gtk2 client, only connect and
then a lot of remote calls. if you send me a minimalist example i'll
test it for you and try to fix bugs to my best (can't guarantee success
though, i am quite young to twisted..)

-- 
Federico Di Gregorio
Debian GNU/Linux Developer                                fog at debian.org
INIT.D Developer                                           fog at initd.org
  We should forget about small efficiencies, say about 97% of the
   time: premature optimization is the root of all evil.    -- D.E.Knuth
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030307/ba8d25e7/attachment.sig>

From acapnotic at twistedmatrix.com  Thu Mar  6 18:14:05 2003
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 06 Mar 2003 17:14:05 -0800
Subject: [Twisted-Python] Portland Perspective Broker presentation Monday
Message-ID: <1046999486.28102.50.camel@troglodyte.funhouse>

This coming Monday (March 10th), I will be addressing the Portland
Python Interest Group on the subject of Twisted's Perspective Broker. 
Topics will include a few words on security, an example of how to
implement a Observer/Observable system across the network, and
whatever else I dream up between now and Monday.

You can take this as a free prelude to Brian Warner's more extensive
treatment of the topic later this month at PyCon, or Glyph's many hour
tutorial (pending confirmation) at OSCON here in Portland later this
year.

Where: Fox Tower in downtown Portland, Oregon.  Lobby entrances are on Broadway and Park avenues,
between SW Yamhill and Taylor streets, just southwest of Pioneer
Courthouse Square.

When: Monday, March 10th, 7 PM.  Please meet us in the lobby some
minutes *early* so that our host may escort us to the conference room. 
Bands of scruffy geeks roaming around after hours seems to make building
security touchy.

Cheers,

 - Kevin


-- 
The moon is waxing crescent, 11.7% illuminated, 3.3 days old.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20030306/ba739d84/attachment.sig>

From dave at krondo.com  Thu Mar  6 18:49:51 2003
From: dave at krondo.com (Dave Peticolas)
Date: 06 Mar 2003 17:49:51 -0800
Subject: [Twisted-Python] PATCH: runQuery
In-Reply-To: <1046992349.1052.10.camel@momo.initd.org>
References: <1046959484.991.142.camel@momo.initd.org>
	 <1046983983.1834.149.camel@oneiros>
	 <1046992349.1052.10.camel@momo.initd.org>
Message-ID: <1047001791.25901.4.camel@oneiros>

On Thu, 2003-03-06 at 15:12, Federico Di Gregorio wrote:
> Il gio, 2003-03-06 alle 21:53, Dave Peticolas ha scritto:
> 
> > Good catch! I wonder, though, shouldn't we be calling
> > commit() instead of rollback()? What if the query had
> > side-effects in the database, won't it undo those
> > changes?
> 
> this is exactly why rollback is used. a select is supposed to *not* have
> side-effects and having your app depend on some side-effect commited by
> a method call supposed to just read from the database is quite wrong.
> (note that selects on stuff like nextval() on sequences are transaction
> transparent and so not influenced by rollback and commit.)

I disagree. A select generally doesn't have side-effects,
but it is possible to write a select call which does. One
example is a rule which logs queries. Why should we
arbitrarily rollback select calls just because *we*
think it's wrong to use selects with side-effects?

I think you are imposing policy for no reason.

dave

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20030306/f0ad7ba6/attachment.sig>

From glyph at twistedmatrix.com  Thu Mar  6 19:02:07 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 6 Mar 2003 20:02:07 -0600
Subject: [Twisted-Python] PATCH: runQuery
In-Reply-To: <1047001791.25901.4.camel@oneiros>
Message-ID: <CD0945E1-5040-11D7-9352-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Thursday, March 6, 2003, at 07:49 PM, Dave Peticolas wrote:

> I think you are imposing policy for no reason.

I think that this is a tough call, although I am very slightly inclined 
to agree with davep.

Why don't we make committing an optional argument, by default on, which 
you can easily turn off if you want a rollback instead?  (At the risk 
of making an overbroad generalization: rollback() tends to be more 
expensive than commit() most of the time, which is another good reason 
to make it the default.)


-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+Z/2jvVGR4uSOE2wRAgxXAKCffoPDsQHU25B3vDcGHTBaa95itACgrBG8
H6IJPORVHbx+w3LYWI6Zzlg=
=0pmv
-----END PGP SIGNATURE-----




From cce at clarkevans.com  Thu Mar  6 19:27:31 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Fri, 7 Mar 2003 02:27:31 +0000
Subject: [Twisted-Python] PATCH: runQuery
In-Reply-To: <CD0945E1-5040-11D7-9352-000393C9700E@twistedmatrix.com>
References: <1047001791.25901.4.camel@oneiros> <CD0945E1-5040-11D7-9352-000393C9700E@twistedmatrix.com>
Message-ID: <20030307022731.GA71982@doublegemini.com>

On Thu, Mar 06, 2003 at 08:02:07PM -0600, Glyph Lefkowitz wrote:
| On Thursday, March 6, 2003, at 07:49 PM, Dave Peticolas wrote:
| >I think you are imposing policy for no reason.
| 
| I think that this is a tough call, although I am very slightly inclined 
| to agree with davep.
| 
| Why don't we make committing an optional argument, by default on, which 
| you can easily turn off if you want a rollback instead?  (At the risk 
| of making an overbroad generalization: rollback() tends to be more 
| expensive than commit() most of the time, which is another good reason 
| to make it the default.)

Typically one would call rollback() before you put 
the connection back into the connection pool.  Overall,
I think there is a lower level design problem with
the adbapi module.  If you are only running one query
then there isn't a rpoblem, but if you are executing
3 queries, say sequentially, then you don't want
that rollback.  The adbapi needs to expose 'connection'
object as a whole, with cursors.   I'll need to fix
this for myself... so if no one else does, I'll patch.

For now, I think rolling back between each query is
good enough... if someone wants to run several queries
in a row, then they really should help me patch.

The other related item is that some databases allow
for multiple cursors with the same connection; and
thus a single request may want to run N deferreds in
parallel (I do, for example) and these deferreds should
all come from the same connection if at all possible.

In short, this is one small issue that needs to be
resolved in that module.

Best,

Clark



From cce at clarkevans.com  Fri Mar  7 00:07:35 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Fri, 7 Mar 2003 07:07:35 +0000
Subject: [Twisted-Python] flow - a state-machine consumer
Message-ID: <20030307070735.GA73244@doublegemini.com>

After being convinced on IRC that my use cases arn't what Deferred
is meant to solve, Donovan "wzZzy" and I put together a first pass
at a more granular 'consumer'.  I'm now using it to build some 
fairly complicated web pages from a database, and may find its 
way into Woven (although perhaps not in its current form). 

Anyway, the tool includes:

  0. the Flow dispatcher, which is a reactor like
     mechanism driving events.

  1. a mechanism to execute a function in a thread,
     where the function returns an iterator which
     is used to generate events in the main thread.

  2. an superclass of adbapi.ConnectionPool with
     a queryChunked function which returns a result
     set incrementally (row by row) to the main 
     thread for further processing

Future plans:

  0. Work on exception handling and trapping just
     to verify that it works as coded.

  1. Incorporate some way for the reactor to 'pause'
     itself (and throw it self into the event queue)
     so that other events can be processed

  2. Update the code so that the execute to thread
     function can take an initial state for an 
     argument

  3. Update the SQL linkage so that it can take
     more than one query in parallel, sequencing
     the result sets, and returning them to a 
     shared flow object using different state
     arguments.

It isn't stable, but you can find it in CVS, or at
   http://clarkevans.com/flow.py

Comments are encouraged.

Best,

Clark



From andrew-twisted at puzzling.org  Fri Mar  7 01:31:49 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 7 Mar 2003 19:31:49 +1100
Subject: [Twisted-Python] flow - a state-machine consumer
In-Reply-To: <20030307070735.GA73244@doublegemini.com>
References: <20030307070735.GA73244@doublegemini.com>
Message-ID: <20030307083149.GB13439@frobozz.local>

On Fri, Mar 07, 2003 at 07:07:35AM +0000, Clark C. Evans wrote:
[..snip..]
> Comments are encouraged.

I haven't looked at flow in detail yet, but my intuition is that the
state-machine and the consumer mechanism should be decoupled.  I think there
will be uses for a consumer/producer where a state machine is overkill --
most of the time all you really want to do is receive data occasionally, and
that's it.

-Andrew.




From fog at initd.org  Fri Mar  7 01:33:58 2003
From: fog at initd.org (Federico Di Gregorio)
Date: 07 Mar 2003 09:33:58 +0100
Subject: [Twisted-Python] PATCH: runQuery
In-Reply-To: <1047001791.25901.4.camel@oneiros>
References: <1046959484.991.142.camel@momo.initd.org>
	 <1046983983.1834.149.camel@oneiros>
	 <1046992349.1052.10.camel@momo.initd.org>
	 <1047001791.25901.4.camel@oneiros>
Message-ID: <1047026038.1171.6.camel@momo.initd.org>

Il ven, 2003-03-07 alle 02:49, Dave Peticolas ha scritto:
> On Thu, 2003-03-06 at 15:12, Federico Di Gregorio wrote:
> > Il gio, 2003-03-06 alle 21:53, Dave Peticolas ha scritto:
> > 
> > > Good catch! I wonder, though, shouldn't we be calling
> > > commit() instead of rollback()? What if the query had
> > > side-effects in the database, won't it undo those
> > > changes?
> > 
> > this is exactly why rollback is used. a select is supposed to *not* have
> > side-effects and having your app depend on some side-effect commited by
> > a method call supposed to just read from the database is quite wrong.
> > (note that selects on stuff like nextval() on sequences are transaction
> > transparent and so not influenced by rollback and commit.)
> 
> I disagree. A select generally doesn't have side-effects,
> but it is possible to write a select call which does. One
> example is a rule which logs queries. Why should we
> arbitrarily rollback select calls just because *we*
> think it's wrong to use selects with side-effects?
> 
> I think you are imposing policy for no reason.

you're right. btw, to put it simple, i think the whole concept of
runQuery/runOperation is b0rken. 

i'll resend a patch with s/rollback/commit/.

-- 
Federico Di Gregorio
Debian GNU/Linux Developer & Italian Press Contact        fog at debian.org
INIT.D Developer                                           fog at initd.org
  99.99999999999999999999% still isn't 100% but sometimes suffice. -- Me
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030307/6008364c/attachment.sig>

From fog at initd.org  Fri Mar  7 01:35:04 2003
From: fog at initd.org (Federico Di Gregorio)
Date: 07 Mar 2003 09:35:04 +0100
Subject: [Twisted-Python] PATCH: runQuery
In-Reply-To: <20030307022731.GA71982@doublegemini.com>
References: <1047001791.25901.4.camel@oneiros>
	 <CD0945E1-5040-11D7-9352-000393C9700E@twistedmatrix.com>
	 <20030307022731.GA71982@doublegemini.com>
Message-ID: <1047026104.1124.8.camel@momo.initd.org>

Il ven, 2003-03-07 alle 03:27, Clark C. Evans ha scritto:
> On Thu, Mar 06, 2003 at 08:02:07PM -0600, Glyph Lefkowitz wrote:
> | On Thursday, March 6, 2003, at 07:49 PM, Dave Peticolas wrote:
> | >I think you are imposing policy for no reason.
> | 
> | I think that this is a tough call, although I am very slightly inclined 
> | to agree with davep.
> | 
> | Why don't we make committing an optional argument, by default on, which 
> | you can easily turn off if you want a rollback instead?  (At the risk 
> | of making an overbroad generalization: rollback() tends to be more 
> | expensive than commit() most of the time, which is another good reason 
> | to make it the default.)
> 
> Typically one would call rollback() before you put 
> the connection back into the connection pool.  Overall,
> I think there is a lower level design problem with
> the adbapi module.  If you are only running one query
> then there isn't a rpoblem, but if you are executing
> 3 queries, say sequentially, then you don't want
> that rollback.  The adbapi needs to expose 'connection'
> object as a whole, with cursors.   I'll need to fix
> this for myself... so if no one else does, I'll patch.

it does. look at runInteraction and the Transaction object.

-- 
Federico Di Gregorio
Debian GNU/Linux Developer                                fog at debian.org
INIT.D Developer                                           fog at initd.org
                   I came like Water, and like Wind I go. -- Omar Khayam
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030307/127b0a4c/attachment.sig>

From wilk-ml at flibuste.net  Sat Mar  8 13:32:36 2003
From: wilk-ml at flibuste.net (William Dode)
Date: 08 Mar 2003 21:32:36 +0100
Subject: [Twisted-Python] gzip with web
Message-ID: <87u1edy4yj.fsf@flibuste.net>

hi,

I convert a cgi site in twisted. On the server, the script run 10x
faster ! but my users doesn't understand why i'm so happy since the see
the page less quickly... I think it's because apache use mod_gzip. 
How can i send the content with gzip ?

bye

-- 
William Dode - http://flibuste.net



From wilk-ml at flibuste.net  Sat Mar  8 14:11:15 2003
From: wilk-ml at flibuste.net (William Dode)
Date: 08 Mar 2003 22:11:15 +0100
Subject: [Twisted-Python] gzip with web
In-Reply-To: <87u1edy4yj.fsf@flibuste.net>
References: <87u1edy4yj.fsf@flibuste.net>
Message-ID: <87ptp1y364.fsf@flibuste.net>

William Dode <wilk-ml at flibuste.net> writes:

> hi,
> 
> I convert a cgi site in twisted. On the server, the script run 10x
> faster ! but my users doesn't understand why i'm so happy since the see
> the page less quickly... I think it's because apache use mod_gzip. 
> How can i send the content with gzip ?

I answer to me...
        encoding = request.getHeader("accept-encoding")
        if encoding and encoding.find("gzip")>=0:
            import cStringIO,gzip
            zbuf = cStringIO.StringIO()
            zfile = gzip.GzipFile(None, 'wb', 9, zbuf)
            zfile.write(content)
            zfile.close()
            request.setHeader("Content-encoding","gzip")
            return zbuf.getvalue()
        else:
            return content

It works, i'm right ?

-- 
William Dode - http://flibuste.net



From cce at clarkevans.com  Sat Mar  8 16:06:22 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Sat, 8 Mar 2003 23:06:22 +0000
Subject: [Twisted-Python] updated defer.html in cvs
Message-ID: <20030308230622.GA78812@doublegemini.com>

Hello.  I updated defer.html in CVS so that it has runnable
examples.  Also, in the first couple paragarphs it wasn't 
clear that Deferred actually doesn't defer execution, but
rather is a callback/errback handler mechanism.  So, I edited
a small chunk of prose to help reflect that.  {this particular
point threw me for a loop on my first reading when I was a newbie}

Anyway, I put a snapshot of the file on my site:
   http://clarkevans.com/defer.html  it doesn't have
any of the images, stylesheets, etc.  But, you can
grab the examples from there and run them.

Clark




From radix at twistedmatrix.com  Sat Mar  8 18:53:45 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sat, 8 Mar 2003 20:53:45 -0500
Subject: [Twisted-Python] updated defer.html in cvs
In-Reply-To: <20030308230622.GA78812@doublegemini.com>
References: <20030308230622.GA78812@doublegemini.com>
Message-ID: <20030309015345.GA21976@radii>

On Sat, Mar 08, 2003 at 11:06:22PM +0000, Clark C. Evans wrote:
> Hello.  I updated defer.html in CVS so that it has runnable
> examples.  Also, in the first couple paragarphs it wasn't 
> clear that Deferred actually doesn't defer execution, but
> rather is a callback/errback handler mechanism.  So, I edited
> a small chunk of prose to help reflect that.  {this particular
> point threw me for a loop on my first reading when I was a newbie}

The title needs to be changed. That's bugged me for a while, but I've
been forgetting to say so. What's a good alternative? "Deferring
Results"?

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From cce at clarkevans.com  Sat Mar  8 19:38:08 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Sun, 9 Mar 2003 02:38:08 +0000
Subject: [Twisted-Python] updated defer.html in cvs
In-Reply-To: <20030309015345.GA21976@radii>
References: <20030308230622.GA78812@doublegemini.com> <20030309015345.GA21976@radii>
Message-ID: <20030309023808.GA79214@doublegemini.com>

On Sat, Mar 08, 2003 at 08:53:45PM -0500, Christopher Armstrong wrote:
| On Sat, Mar 08, 2003 at 11:06:22PM +0000, Clark C. Evans wrote:
| > Hello.  I updated defer.html in CVS so that it has runnable
| > examples.  Also, in the first couple paragarphs it wasn't 
| > clear that Deferred actually doesn't defer execution, but
| > rather is a callback/errback handler mechanism.  So, I edited
| > a small chunk of prose to help reflect that.  {this particular
| > point threw me for a loop on my first reading when I was a newbie}
| 
| The title needs to be changed. That's bugged me for a while, but I've
| been forgetting to say so. What's a good alternative? "Deferring
| Results"?

Deferred ; Reporting Results from a Deferred Operation

Clark



From golux at comcast.net  Sat Mar  8 19:30:48 2003
From: golux at comcast.net (Steve Waterbury)
Date: Sat, 08 Mar 2003 21:30:48 -0500
Subject: [Twisted-Python] updated defer.html in cvs
In-Reply-To: <20030309015345.GA21976@radii>
References: <20030308230622.GA78812@doublegemini.com>
 <20030309015345.GA21976@radii>
Message-ID: <1047177048.955.90.camel@golux>

On Sat, 2003-03-08 at 20:53, Christopher Armstrong wrote:
> On Sat, Mar 08, 2003 at 11:06:22PM +0000, Clark C. Evans wrote:
> > Hello.  I updated defer.html in CVS so that it has runnable
> > examples.  Also, in the first couple paragarphs it wasn't 
> > clear that Deferred actually doesn't defer execution, but
> > rather is a callback/errback handler mechanism.  So, I edited
> > a small chunk of prose to help reflect that.  {this particular
> > point threw me for a loop on my first reading when I was a newbie}
> 
> The title needs to be changed. That's bugged me for a while, but I've
> been forgetting to say so. What's a good alternative? "Deferring
> Results"?

How about something real explicit, like:  
"Getting Results Asynchronously" ... 
The app isn't really deferring the results; the results 
are deferring themselves; it's just telling them to 
give it a call when they arrive.  Rather than 
"deferring", I'd say what the app is doing is more like 
"subscribing".  "Deferred" might really be more like 
"stacked".  

- Steve.





From andrew-twistedcommits at puzzling.org  Sat Mar  8 18:49:32 2003
From: andrew-twistedcommits at puzzling.org (Andrew Bennetts)
Date: Sun, 9 Mar 2003 12:49:32 +1100
Subject: [Twisted-Python] Re: [Twisted-commits] Updated defer.html so that the first 4 examples are runnable, split the 3rd
In-Reply-To: <E18rn3o-0008OQ-00@pyramid.twistedmatrix.com>
References: <E18rn3o-0008OQ-00@pyramid.twistedmatrix.com>
Message-ID: <20030309014932.GA21808@frobozz.local>

On Sat, Mar 08, 2003 at 04:44:56PM -0600, cce CVS wrote:
> Modified files:
> Twisted/doc/howto/defer.html 1.29 1.30

[..snip..]
> @@ -19,14 +19,22 @@
>  methods where the common idiom is to block until a result is
>  gotten.</p>
>  <pre class="python">
> +
>  class Getter:
>  
>      def getData(self, x):
> -        self.blockUntilResult(x)
> -        return result
> +        return self.someBlockingCall(x)
> +
> +    def someBlockingCall(self,x)
> +        print "blocking"
> +        import time
> +        time.sleep(4)
> +        return x * 3
>  
>  g = Getter()
>  print g.getData(3)
> +print "blocking"
> +
>  </pre>

Why does this code snippet now do 'print "blocking"' twice?

>  <h3>Don't Call Us, We'll Call You</h3>
> @@ -39,29 +47,43 @@
>  understand the necessity for Deferreds.</p>
>  
>  <pre class="python">
> +
>  class Getter:
>  
>      def getData(self, x, callback):
> -        self.callback = callback
> -        # this call does not block, it ensure self.gotResult is called
> -        # when we have the result
> -        self.onResult(x, self.gotResult)
> -    
> -    def gotResult(self, result):
> -        self.callback(result)
> +        self.callback = callback; self.x = x

Why not two seperate lines here?

> +        self.nonBlockingOperation()
> +        #
> +        # Timer class happens to wrap the previous code in 
> +        # a thread; but this could be any asyncronous operation 
> +        # such as selecting from a socket, etc.
> +        #
> +        from threading import Timer
> +        t = Timer(4, self.gotResult)
> +        t.start()
> +
> +    def nonBlockingOperation(self): 
> +        print "non-blocking"
> +
> +    def gotResult(self):
> +        self.callback(3*self.x)
>  
>  def gotData(d):
>      print d
>  
>  g = Getter()
>  g.getData(3, gotData)
> +
>  </pre>

You've sacrificed clarity for runnability.  I'm not sure that's the right
thing to do; the point of this example is now obscured behind details like
how threading.Timer works, and spelling out a dummy "nonBlockingOperation"
method where before it was quite clear without it.  Not all example code
in the Howtos must be immediately executable standalone... I think perhaps
this example code would be better in the doc/examples directory, where it is
more appropriate for examples to be verbose like this.

Also, the way the example used to be reflected an idiomatic use in Twisted:
where there is some event handler, e.g. onResult, fired at an arbitrary time
by some external source.  Think of e.g. Protocol objects with dataReceived.
The example as it was emphasised that Deferreds can apply equally well when
you don't have control over when some event completes -- regardless of
whether it came from a thread, or the network, or anywhere.

>  
> -<p>There are several things missing in this simple example.  There is no way to
> -know if the data never comes back; no mechanism for handling errors.  There is
> -no way to distinguish between different calls to gotData from different
> -sessions.  <code>Deferred</code> solves these problems, by creating a single,
> -unified way to defer execution of code that depends on blocking calls.</p>
> +<p>There are several things missing in this simple example.  There is no way
> +to know if the data never comes back; no mechanism for handling errors.  The
> +example does not handle a multiple callback functions, nor does it give a
> +method to merge arguments before and after execution.  Further, there is no
> +way to distinguish between different calls to gotData from different
> +producer objects. <code>Deferred</code> solves these problems, by creating 
> +a single, unified way to handle callbacks and errors from deferred
> +execution.</p>

What does "merge arguments before and after execution" mean to a Twisted
newbie?  Why would they want to do it?

>  
>  <h2>Deferreds</h2>
>  
> @@ -69,9 +91,45 @@
>  a function will at some point have a result.  We can attach callback functions
>  to a Deferred, and once it gets a result these callbacks will be called. In
>  addition Deferreds allow the developer to register a callback for an error,
> -with the default behavior of logging the error. This is an asynchronous
> -equivalent of the common idiom of blocking until a result is returned or an
> -exception it raised.</p>
> +with the default behavior of logging the error.  The deferred mechanism 
> +standardizes the application programmer's interface with all sorts of 
> +blocking or delayed operations.</p>

That probably should be "*D*eferred", not "deferred".  I think I'd also like
to add back the comment about "This is an asynchronous equivalent of ..." --
perhaps it's overly jargonistic, but it is the way I think about Deferreds;
they are the primary tool Twisted provides to abstract away blocking
operations into a fundamentally asynchronous framework.

> @@ -82,39 +140,48 @@
>  to return the result to the HTTP client.</p>
>  
>  <pre class="python">
[..snip..]
>  </pre>

Again, with the next two examples I think you've obscured the point in your
efforts to make everything explicit.  I'd rather have a 10 line example
that illustrates a concept, than a 20 line example that obscures the same
concept behind irrelevant method definitions, etc.  On the other hand, I
think long examples, say 50 lines or more, should be runnable, because
anything long enough to require that many lines to explain probably should
be ready for a newbie to play with.  

Informally, I'd say this is the different between <pre class="python"> and
<a href=... class="py-listing"> -- when you're listing a file, it *should*
be a complete, runnable example.  In fact, complete, runnable examples
probably should be a listing for the reader's convenience, i.e. put the code
in doc/listings somewhere, rather that in the .html file.

Please don't be discouraged from working on the docs!  They *do* need
work... I just happen to think that defer.html is probably the doc least in
need of improvement :)

-Andrew.




From golux at comcast.net  Sat Mar  8 23:12:22 2003
From: golux at comcast.net (Steve Waterbury)
Date: Sun, 09 Mar 2003 01:12:22 -0500
Subject: [Twisted-Python] Re: [Twisted-commits] Updated defer.html so	that
 the first 4 examples are runnable, split the 3rd
In-Reply-To: <20030309014932.GA21808@frobozz.local>
References: <E18rn3o-0008OQ-00@pyramid.twistedmatrix.com>
 <20030309014932.GA21808@frobozz.local>
Message-ID: <1047190343.957.130.camel@golux>

As one who has perpetual newbie-mind, I feel I should comment ...

On Sat, 2003-03-08 at 20:49, Andrew Bennetts wrote:
> You've sacrificed clarity for runnability.  

Having read it carefully, I have to agree with Andrew here.  

> I'm not sure that's the right
> thing to do; the point of this example is now obscured behind details like
> how threading.Timer works, and spelling out a dummy "nonBlockingOperation"
> method where before it was quite clear without it.  

These were criticisms I had, too.

> Not all example code
> in the Howtos must be immediately executable standalone... I think perhaps
> this example code would be better in the doc/examples directory, where it is
> more appropriate for examples to be verbose like this.

Here I disagree.  Newbies are generally served better by 
examples with lots of (germane) comments ... but not 
extraneous stuff, like the Timer.  And I think it would be 
"nice" if they were executable, but if it comes down to 
choosing between clarity and executability, clarity should win.  

> Also, the way the example used to be reflected an idiomatic use in Twisted:
> where there is some event handler, e.g. onResult, fired at an arbitrary time
> by some external source.  Think of e.g. Protocol objects with dataReceived.
> The example as it was emphasised that Deferreds can apply equally well when
> you don't have control over when some event completes -- regardless of
> whether it came from a thread, or the network, or anywhere.

Which is almost always the case, of course.

> > -<p>There are several things missing in this simple example.  There is no way to
> > -know if the data never comes back; no mechanism for handling errors.  There is
> > -no way to distinguish between different calls to gotData from different
> > -sessions.  <code>Deferred</code> solves these problems, by creating a single,
> > -unified way to defer execution of code that depends on blocking calls.</p>
> > +<p>There are several things missing in this simple example.  There is no way
> > +to know if the data never comes back; no mechanism for handling errors.  The
> > +example does not handle a multiple callback functions, nor does it give a
> > +method to merge arguments before and after execution.  Further, there is no
> > +way to distinguish between different calls to gotData from different
> > +producer objects. <code>Deferred</code> solves these problems, by creating 
> > +a single, unified way to handle callbacks and errors from deferred
> > +execution.</p>
> 
> What does "merge arguments before and after execution" mean to a Twisted
> newbie?  Why would they want to do it?

Here I disagree again.  I think I know what is meant (although 
clarity could be improved, again), and it was one of the first things 
I wanted to do ... of course, it didn't take too long to suss that 
lambdas are the preferred idiom for that ... 

> ....  I think I'd also like
> to add back the comment about "This is an asynchronous equivalent of ..." --
> perhaps it's overly jargonistic, but it is the way I think about Deferreds;
> they are the primary tool Twisted provides to abstract away blocking
> operations into a fundamentally asynchronous framework.

Total agreement.  If they don't know what "asynchronous" 
means, they can look it up!  Sheesh, it's a standard term.  
(Twisted-specific jargon is not a problem in the docs 
either, as it is always defined when introduced.)

> Again, with the next two examples I think you've obscured the point in your
> efforts to make everything explicit.  I'd rather have a 10 line example
> that illustrates a concept, than a 20 line example that obscures the same
> concept behind irrelevant method definitions, etc.  ...

Agreed also.  

That said, I think there are cases where the in-line examples seem
a trifle too elliptical.  I'll have to be more specific, I know, 
so I'll send an example when I have time.  

- Steve.





From andrew-twisted at puzzling.org  Sat Mar  8 23:51:02 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sun, 9 Mar 2003 17:51:02 +1100
Subject: [Twisted-Python] Re: [Twisted-commits] Updated defer.html so	that the first 4 examples are runnable, split the 3rd
In-Reply-To: <1047190343.957.130.camel@golux>
References: <E18rn3o-0008OQ-00@pyramid.twistedmatrix.com> <20030309014932.GA21808@frobozz.local> <1047190343.957.130.camel@golux>
Message-ID: <20030309065102.GA8620@frobozz.local>

On Sun, Mar 09, 2003 at 01:12:22AM -0500, Steve Waterbury wrote:
> As one who has perpetual newbie-mind, I feel I should comment ...

Excellent :)

I was worried that my criticisms were based too much from the perspective of
someone who is already familiar with Deferreds.

> On Sat, 2003-03-08 at 20:49, Andrew Bennetts wrote:
[..snip..]
> > Not all example code
> > in the Howtos must be immediately executable standalone... I think perhaps
> > this example code would be better in the doc/examples directory, where it is
> > more appropriate for examples to be verbose like this.
> 
> Here I disagree.  Newbies are generally served better by 
> examples with lots of (germane) comments ... but not 
> extraneous stuff, like the Timer.  And I think it would be 
> "nice" if they were executable, but if it comes down to 
> choosing between clarity and executability, clarity should win.  

Yeah, true.  I over-emphasised a bit.  I guess I was thinking that the
Deferred doc is already quite long, and padding it with more examples that
are quite similar could be detrimental.  I certainly have no objections to
adding comments :)

> > > -<p>There are several things missing in this simple example.  There is no way to
> > > -know if the data never comes back; no mechanism for handling errors.  There is
> > > -no way to distinguish between different calls to gotData from different
> > > -sessions.  <code>Deferred</code> solves these problems, by creating a single,
> > > -unified way to defer execution of code that depends on blocking calls.</p>
> > > +<p>There are several things missing in this simple example.  There is no way
> > > +to know if the data never comes back; no mechanism for handling errors.  The
> > > +example does not handle a multiple callback functions, nor does it give a
> > > +method to merge arguments before and after execution.  Further, there is no
> > > +way to distinguish between different calls to gotData from different
> > > +producer objects. <code>Deferred</code> solves these problems, by creating 
> > > +a single, unified way to handle callbacks and errors from deferred
> > > +execution.</p>
> > 
> > What does "merge arguments before and after execution" mean to a Twisted
> > newbie?  Why would they want to do it?
> 
> Here I disagree again.  I think I know what is meant (although 
> clarity could be improved, again), and it was one of the first things 
> I wanted to do ... of course, it didn't take too long to suss that 
> lambdas are the preferred idiom for that ... 

Asking "Why would they want to do it?" wasn't meant to question that newbies
wanted to do it.  I meant to point out that it was referring to a concept
that wouldn't be clear to many newbies, and would thus serve to confuse them
because they didn't know what it meant or why it might apply to them.
"Merging arguments" isn't terminology I've ever heard before, in Python or
elsewhere, so if I was a newbie I'd be wondering if this was yet another
Twisted thing.

Probably explicitly spelling out that chaining callbacks is useful for
progressively munging data is worth doing, though, maybe with an example
like:

    d = getItemsFromDB()

    def convertResultlistToHTML(results):
        return '<ul>' + ['<li>' + x for x in results] + '</ul>'
    d.addCallback(convertResultlistToHTML)

Or should it be more contrived?  E.g.:

    d = getNumber()
    d.addCallback(lambda r: r + 10)       # Add ten
    d.addCallback(lambda r: 1.0 / r)      # Take the reciprocal
    def catchDivByZero(failure):
        failure.trap(ZeroDivisionError)
        return 0
    d.addErrback(catchDivByZero)
    d.addCallback(lambda r: '%0.3f' % r)  # Convert to string of up to 3
                                          # decimal places
    d.addCallback(lambda r: '<b>%s</b>' % r) # Wrap in HTML

Is it already clear to newbies how callbacks chain and what they are good
for?

> > ....  I think I'd also like
> > to add back the comment about "This is an asynchronous equivalent of ..." --
> > perhaps it's overly jargonistic, but it is the way I think about Deferreds;
> > they are the primary tool Twisted provides to abstract away blocking
> > operations into a fundamentally asynchronous framework.
> 
> Total agreement.  If they don't know what "asynchronous" 
> means, they can look it up!  Sheesh, it's a standard term.  
> (Twisted-specific jargon is not a problem in the docs 
> either, as it is always defined when introduced.)

And Twisted-specific jargon should be added to the glossary, where possible.
Possibly 'asynchronous' should be added too, if it isn't already there.

> > Again, with the next two examples I think you've obscured the point in your
> > efforts to make everything explicit.  I'd rather have a 10 line example
> > that illustrates a concept, than a 20 line example that obscures the same
> > concept behind irrelevant method definitions, etc.  ...
> 
> Agreed also.  
> 
> That said, I think there are cases where the in-line examples seem
> a trifle too elliptical.  I'll have to be more specific, I know, 
> so I'll send an example when I have time.  

Patches are, of course, welcome :)

-Andrew.




From liiwi at iki.fi  Sun Mar  9 07:23:07 2003
From: liiwi at iki.fi (Jaakko Niemi)
Date: Sun, 09 Mar 2003 16:23:07 +0200
Subject: [Twisted-Python] slap bandaid on shoutcast
Message-ID: <87u1ecty9g.fsf@jumper.lonesom.pp.fi>

--- shoutcast.py        2003-03-09 16:17:01.000000000 +0200
+++ shoutcast.py.working        2003-03-09 16:16:04.000000000 +0200
@@ -32,6 +32,7 @@
         self.path = path
         self.metamode = "mp3"
         self.databuffer = ""
+       self.metaint = ""
     
     def connectionMade(self):
         self.sendCommand("GET", self.path)



From cce at clarkevans.com  Sun Mar  9 14:39:19 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Sun, 9 Mar 2003 21:39:19 +0000
Subject: [Twisted-Python] Updated defer.html
In-Reply-To: <1047190343.957.130.camel@golux>
References: <E18rn3o-0008OQ-00@pyramid.twistedmatrix.com> <20030309014932.GA21808@frobozz.local> <1047190343.957.130.camel@golux>
Message-ID: <20030309213919.GA82276@doublegemini.com>

On Sun, Mar 09, 2003 at 01:12:22AM -0500, Steve Waterbury wrote:
| > You've sacrificed clarity for runnability.  
| Having read it carefully, I have to agree with Andrew here.  

Runnable vs clarity is a false choice.  If it isn't runnable then
it has no hope of being clear.  [clear changes to already runnable
code counts as runnable]

In fact, I had a complete mis-understanding of what Deferred
was all about for quite some time, mostly a fault of that
document for not having a runnable example.   The focus on 
'clarity' failed to show what Deferred actually *does*; it
had stuff, for example, about the main reactor event loop,
which is a completely othogonal issue, you don't neven need
the twisted reactor to use Deferred.   By the previous
documentation not focusing on a *tangable* runnable result
the explanation sunk into ickyness.

| Here I disagree.  Newbies are generally served better by 
| examples with lots of (germane) comments ... but not 
| extraneous stuff, like the Timer.  And I think it would be 
| "nice" if they were executable, but if it comes down to 
| choosing between clarity and executability, clarity should win.  

Documenting Deferreds suffers from a bootstrap problem; it is 
advantageous to introduce Deferreds before Threads, but to 
understand why you need Deferrerds you must already have
read about Threads.   The typical solution to a bootstrap 
documentation problems is to iterate into a circle, introduce
each concept and then after both concepts are glossed over
going into more detail about each one.   An introduction 
to threads, and the Timer is the simplest threaded operation,
is essential for motivating Deferreds...  And, to be a bit
defensive, you can't jump on my case here as examples later
on use the Timer.

Suggestion for improvement:

  Move the 'timer' example into the first part showing
  how a blocking operation becomes threaded, and showing
  how Python (without Twisted) supports callbacks.  

  Then, use this example of Python's callbacks to describe
  how it has several problems: (a) it doesn't handle errors
  well, (b) it doesn't allow for more than one callback, etc.

  Finally, re-write the timer example using Deferred for a 
  callback.   In this example, put the previously introduced
  code in a *grey* font so that it isn't destracting.

But, really, all examples should be completely runnable
or else you make a serious risk of losing the reader.

| > perhaps it's overly jargonistic, but it is the way I think about Deferreds;
| > they are the primary tool Twisted provides to abstract away blocking
| > operations into a fundamentally asynchronous framework.
| 
| Total agreement.  If they don't know what "asynchronous" 
| means, they can look it up!  Sheesh, it's a standard term.  
| (Twisted-specific jargon is not a problem in the docs 
| either, as it is always defined when introduced.)

Deferreds have *nothing* to do with deferring execution.  They are
only an improvement/embellishment on the Python callback mechanism.
That they are very useful in asynchronous contexts is nice, but
that isn't what they do - they don't provide asychronous execution.


| > Again, with the next two examples I think you've obscured the point in your
| > efforts to make everything explicit.  I'd rather have a 10 line example
| > that illustrates a concept, than a 20 line example that obscures the same
| > concept behind irrelevant method definitions, etc.  ...
| 
| Agreed also.  
| 
| That said, I think there are cases where the in-line examples seem
| a trifle too elliptical.  I'll have to be more specific, I know, 
| so I'll send an example when I have time.  

Well, I disagree with both of you here.  You need *all* of
the code so that a newbie doesn't have to fill-in the 
details, and get frustrated when they don't grok it.

In general, examples should build on the previous example,
and to make things clear, code that hasn't changed could
be made grey; or code that has changed can be made bold.
Use visual clues.  Electrons on the screen are cheap.

Best,

Clark



From cce at clarkevans.com  Sun Mar  9 14:45:55 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Sun, 9 Mar 2003 21:45:55 +0000
Subject: [Twisted-Python] Re: [Twisted-commits] Updated defer.html so that the first 4 examples are runnable, split the 3rd
In-Reply-To: <20030309014932.GA21808@frobozz.local>
References: <E18rn3o-0008OQ-00@pyramid.twistedmatrix.com> <20030309014932.GA21808@frobozz.local>
Message-ID: <20030309214555.GB82276@doublegemini.com>

On Sun, Mar 09, 2003 at 12:49:32PM +1100, Andrew Bennetts wrote:
| >  class Getter:
| >  
| >      def getData(self, x):
| > -        self.blockUntilResult(x)
| > -        return result
| > +        return self.someBlockingCall(x)
| > +
| > +    def someBlockingCall(self,x)
             <font color="grey">
| > +        print "blocking"
| > +        import time
| > +        time.sleep(4)
| > +        return x * 3
             </font>
| >  
| >  g = Getter()
| >  print g.getData(3)
| > +print "blocking"
| > +
| >  </pre>
| 
| Why does this code snippet now do 'print "blocking"' twice?

bug, sorry

| Please don't be discouraged from working on the docs!  They *do* need
| work... I just happen to think that defer.html is probably the doc least in
| need of improvement :)

Well, I picked it beacuse I've heared two newbies 
get confused by it, not including myself.  

;) Clark



From cce at clarkevans.com  Sun Mar  9 16:04:19 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Sun, 9 Mar 2003 23:04:19 +0000
Subject: [Twisted-Python] Updated defer.html
In-Reply-To: <1047190343.957.130.camel@golux>
References: <E18rn3o-0008OQ-00@pyramid.twistedmatrix.com> <20030309014932.GA21808@frobozz.local> <1047190343.957.130.camel@golux>
Message-ID: <20030309230419.GA82729@doublegemini.com>

On Sun, Mar 09, 2003 at 01:12:22AM -0500, Steve Waterbury wrote:
| Here I disagree.  Newbies are generally served better by 
| examples with lots of (germane) comments ... but not 
| extraneous stuff, like the Timer.  And I think it would be 
| "nice" if they were executable, but if it comes down to 
| choosing between clarity and executability, clarity should win.  

Ok.  I spent a good amount of time refactoring the first 
four examples.  Basically, the first example is runnable, 
but the remaining examples arn't, and instead focus on 
the incremental change to the code.  

However, if one were to cut&paste each example, as they
occur in the document, into a python interpreter, then
every example would work...

;) Clark



From waterbug at beeblebrox.gsfc.nasa.gov  Sun Mar  9 16:28:08 2003
From: waterbug at beeblebrox.gsfc.nasa.gov (Steve Waterbury)
Date: Sun, 09 Mar 2003 18:28:08 -0500
Subject: [Twisted-Python] Updated defer.html
References: <E18rn3o-0008OQ-00@pyramid.twistedmatrix.com> <20030309014932.GA21808@frobozz.local> <1047190343.957.130.camel@golux> <20030309213919.GA82276@doublegemini.com>
Message-ID: <3E6BCE07.B131BD48@beeblebrox.gsfc.nasa.gov>

"Clark C. Evans" wrote:
> 
> In fact, I had a complete mis-understanding of what Deferred
> was all about for quite some time, mostly a fault of that
> document for not having a runnable example.   

I agree the document needs improving to be useful 
to newbies.  The runnable examples in doc/examples are 
what saved me ... in fact, IMO the examples are way 
more important than the docs.  But I'd like to see more 
comments in them ... as Rob McCool says in the original 
mime.types file that came with NCSA httpd, 
"# This is a comment. I love comments."  :^)

> Documenting Deferreds suffers from a bootstrap problem; it is
> advantageous to introduce Deferreds before Threads, but to
> understand why you need Deferrerds you must already have
> read about Threads.   The typical solution to a bootstrap
> documentation problems is to iterate into a circle, introduce
> each concept and then after both concepts are glossed over
> going into more detail about each one.   An introduction
> to threads, and the Timer is the simplest threaded operation,
> is essential for motivating Deferreds...  

IMO, it doesn't take very much motivation ... I've never 
written a threaded program, and whereas it might be good 
for my soul, I'm not that eager to try it.  

> And, to be a bit
> defensive, you can't jump on my case here as examples later
> on use the Timer.

Now, now ... don't take it personally -- you're contributing 
something, which is more than I've done!  :^)  

I'm sure the later timer examples are fine, but I just 
didn't pay much attention to them as they weren't relevant 
to what I wanted to do with Twisted.  :^)

> | > perhaps it's overly jargonistic, but it is the way I think about Deferreds;
> | > they are the primary tool Twisted provides to abstract away blocking
> | > operations into a fundamentally asynchronous framework.
> |
> | Total agreement.  If they don't know what "asynchronous"
> | means, they can look it up!  Sheesh, it's a standard term.
> | (Twisted-specific jargon is not a problem in the docs
> | either, as it is always defined when introduced.)
> 
> Deferreds have *nothing* to do with deferring execution.  They are
> only an improvement/embellishment on the Python callback mechanism.
> That they are very useful in asynchronous contexts is nice, but
> that isn't what they do - they don't provide asychronous execution.

Yes, but Twisted *is* an asynchronous context; in Twisted 
that's what deferred's are used for.  :^)

> | > Again, with the next two examples I think you've obscured the point in your
> | > efforts to make everything explicit.  I'd rather have a 10 line example
> | > that illustrates a concept, than a 20 line example that obscures the same
> | > concept behind irrelevant method definitions, etc.  ...
> |
> | Agreed also.
> |
> | That said, I think there are cases where the in-line examples seem
> | a trifle too elliptical.  I'll have to be more specific, I know,
> | so I'll send an example when I have time.
> 
> Well, I disagree with both of you here.  You need *all* of
> the code so that a newbie doesn't have to fill-in the
> details, and get frustrated when they don't grok it.

Sounds like you agree with *me* at least:  
"elliptical:  of or relating to deliberate obscurity 
(as of literary or conversational style)" ... ;^)

Of course, I'm full of ideas, but you're actually contributing, 
so I'll shut up now ... just some suggestions from 
the peanut gallery ... carry on, Clark!  :^)  

Peace,
- Steve.



From waterbug at beeblebrox.gsfc.nasa.gov  Sun Mar  9 16:31:07 2003
From: waterbug at beeblebrox.gsfc.nasa.gov (Steve Waterbury)
Date: Sun, 09 Mar 2003 18:31:07 -0500
Subject: [Twisted-Python] Updated defer.html
References: <E18rn3o-0008OQ-00@pyramid.twistedmatrix.com> <20030309014932.GA21808@frobozz.local> <1047190343.957.130.camel@golux> <20030309230419.GA82729@doublegemini.com>
Message-ID: <3E6BCEBB.EAC9E05E@beeblebrox.gsfc.nasa.gov>

"Clark C. Evans" wrote:
> 
> On Sun, Mar 09, 2003 at 01:12:22AM -0500, Steve Waterbury wrote:
> | Here I disagree.  Newbies are generally served better by
> | examples with lots of (germane) comments ... but not
> | extraneous stuff, like the Timer.  And I think it would be
> | "nice" if they were executable, but if it comes down to
> | choosing between clarity and executability, clarity should win.
> 
> Ok.  I spent a good amount of time refactoring the first
> four examples.  Basically, the first example is runnable,
> but the remaining examples arn't, and instead focus on
> the incremental change to the code.
> 
> However, if one were to cut&paste each example, as they
> occur in the document, into a python interpreter, then
> every example would work...

Cool!

- Steve.



From twisted at itamarst.org  Sun Mar  9 18:42:31 2003
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 9 Mar 2003 20:42:31 -0500
Subject: [Twisted-Python] Re: [Twisted-commits] minor code cleaup
In-Reply-To: <E18sB50-0008EK-00@pyramid.twistedmatrix.com>
References: <E18sB50-0008EK-00@pyramid.twistedmatrix.com>
Message-ID: <20030309204231.2918d3dc.twisted@itamarst.org>

Hi,

I don't like these changes to defer.html. They give the message that you
only use Deferreds with threads - this is not true, and very
misleading...



From twisted at itamarst.org  Sun Mar  9 18:48:53 2003
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 9 Mar 2003 20:48:53 -0500
Subject: [Twisted-Python] gzip with web
In-Reply-To: <87ptp1y364.fsf@flibuste.net>
References: <87u1edy4yj.fsf@flibuste.net>
	<87ptp1y364.fsf@flibuste.net>
Message-ID: <20030309204853.452f2ec7.twisted@itamarst.org>

On 08 Mar 2003 22:11:15 +0100
William Dode <wilk-ml at flibuste.net> wrote:

>         encoding = request.getHeader("accept-encoding")
>         if encoding and encoding.find("gzip")>=0:
>             import cStringIO,gzip
>             zbuf = cStringIO.StringIO()
>             zfile = gzip.GzipFile(None, 'wb', 9, zbuf)
>             zfile.write(content)
>             zfile.close()
>             request.setHeader("Content-encoding","gzip")
>             return zbuf.getvalue()
>         else:
>             return content

I think ideally you'd want this to be in twisted.protocols.http, and
deal with write()s and so on instead of assuming it's all one string.

I'd be happy to accept a patch!



From radix at twistedmatrix.com  Sun Mar  9 21:46:29 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 9 Mar 2003 23:46:29 -0500
Subject: [Twisted-Python] Updated defer.html
In-Reply-To: <20030309213919.GA82276@doublegemini.com>
References: <E18rn3o-0008OQ-00@pyramid.twistedmatrix.com> <20030309014932.GA21808@frobozz.local> <1047190343.957.130.camel@golux> <20030309213919.GA82276@doublegemini.com>
Message-ID: <20030310044629.GA1121@radii>

On Sun, Mar 09, 2003 at 09:39:19PM +0000, Clark C. Evans wrote:
> Documenting Deferreds suffers from a bootstrap problem; it is 
> advantageous to introduce Deferreds before Threads, but to 
> understand why you need Deferrerds you must already have
> read about Threads.   The typical solution to a bootstrap 

This makes no sense. Almost *all* of Deferreds used in Twisted (and
certainly most Twisted-using code) have nothing to do with threads.

Anyway, I think having one (runnable) example that doesn't even depend
on asynchrony might even be a good thing. Something like:

  d = Deferred()
  d.addCallbacks(...)
  d.callback(x)
  # maybe another d.addCallbacks(), etc

The point would be to show that indeed Deferreds don't have anything
special to do with asynchrony (or especially threads), as well make it
more clear what Deferreds are really doing, by showing it in the
simplest manner possible.

So yeah, I think we should have a few good runnable examples in the
document, including one like I mentioned, as well as some "case-study"
things like threading, refID-mapping (This was mentioned in another
recent thread), etc.

<insert typical apologetic non-promise to implement here>

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From cce at clarkevans.com  Sun Mar  9 23:34:29 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Mon, 10 Mar 2003 06:34:29 +0000
Subject: [Twisted-Python] iterators/generator
Message-ID: <20030310063429.GA84132@doublegemini.com>

Hello.  I'd like to write my 'user' level code with generators,
and thus, was thinking that new code could perhaps be at least
generator friendly... what do you think:

1.  We add the following code fragment somewhere in a python.util
    or equivalent:

    # primative support iterators for 2.1
    try:
       StopIteration = StopIteration
       iter = iter
    except:
       class StopIteration(Exception): pass
       class _ListIterator:
           def __init__(self,lst):
               self.lst = list(lst)
           def next()
               if self.lst: return self.lst.pop(0)
               else: raise StopIteration
       def iter(lst):
           if type(lst) == type([]) or type(lst) == type(tuple()):
               return _ListIterator(lst)
           else:
               return lst
   
2. Then, code within twisted which could possible accept an 
   iterator or generator could be written like this. 

      import python.twisted.util
      try:
           itr = util.iter(getIterator())
           val = itr.next()
           while 1:
              doSomething(val)
              val = itr.next()
      except util.StopIteration: pass

Just thoughts... using generators from 'user' land is really
very useful, and it'd be nice if lower levels of Twisted allowed
for this by a mechanism similar to the above.

Clark



From andrew-twisted at puzzling.org  Mon Mar 10 01:55:50 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 10 Mar 2003 19:55:50 +1100
Subject: [Twisted-Python] Updated defer.html
In-Reply-To: <20030310044629.GA1121@radii>
References: <E18rn3o-0008OQ-00@pyramid.twistedmatrix.com> <20030309014932.GA21808@frobozz.local> <1047190343.957.130.camel@golux> <20030309213919.GA82276@doublegemini.com> <20030310044629.GA1121@radii>
Message-ID: <20030310085550.GB25802@frobozz.local>

I was going to reply to Clark directly, but others have already made much
the same points... :)

On Sun, Mar 09, 2003 at 11:46:29PM -0500, Christopher Armstrong wrote:
> On Sun, Mar 09, 2003 at 09:39:19PM +0000, Clark C. Evans wrote:
> > Documenting Deferreds suffers from a bootstrap problem; it is 
> > advantageous to introduce Deferreds before Threads, but to 
> > understand why you need Deferrerds you must already have
> > read about Threads.   The typical solution to a bootstrap 
> 
> This makes no sense. Almost *all* of Deferreds used in Twisted (and
> certainly most Twisted-using code) have nothing to do with threads.

Indeed!  There is virtually no need to mention threads in defer.html at all.

> Anyway, I think having one (runnable) example that doesn't even depend
> on asynchrony might even be a good thing. Something like:
> 
>   d = Deferred()
>   d.addCallbacks(...)
>   d.callback(x)
>   # maybe another d.addCallbacks(), etc

Yes, that's a good idea.  It's worth emphasising that there's really no
voodoo here.  Possibly even demonstrate it in an interactive session, so
that it is really clear that nothing happens until it is called.

> The point would be to show that indeed Deferreds don't have anything
> special to do with asynchrony (or especially threads), as well make it
> more clear what Deferreds are really doing, by showing it in the
> simplest manner possible.

Which reminds me: the title should probably be "Deferred Results".  I think
perhaps this is what confuses people; Deferreds aren't about delaying
execution arbitrarily, or doing work in threads, or hooking into the event
loop, they're about handling results that haven't arrived yet.  A Deferred
doesn't represent a *callback*, it represents a *result*, and it provides
simple (and powerful) ways to register callbacks to operate on the result,
whenever it becomes available.

> So yeah, I think we should have a few good runnable examples in the
> document, including one like I mentioned, as well as some "case-study"
> things like threading, refID-mapping (This was mentioned in another
> recent thread), etc.

Case studies would be worthwhile.  I don't really like the idea of padding
out the document many more with more examples, because it's already a long
read.  But adding a section to the end called Case Studies would allow
plenty of room to add complete, verbose examples, without detracting from
the exposition of the core concepts.

So in my opinion, the code samples should be left pretty much as they were
-- minimal, clear examples of the general principles, not necessarily
ready-to-run, and then add case studies to the end.  I'm even tempted to say
this is a pattern that more of the docs should follow.... :)

> <insert typical apologetic non-promise to implement here>

As always :)

-Andrew.




From twisted at itamarst.org  Mon Mar 10 08:19:42 2003
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 10 Mar 2003 10:19:42 -0500
Subject: [Twisted-Python] iterators/generator
In-Reply-To: <20030310063429.GA84132@doublegemini.com>
References: <20030310063429.GA84132@doublegemini.com>
Message-ID: <20030310101942.0e868466.twisted@itamarst.org>

On Mon, 10 Mar 2003 06:34:29 +0000
"Clark C. Evans" <cce at clarkevans.com> wrote:

> Hello.  I'd like to write my 'user' level code with generators,
> and thus, was thinking that new code could perhaps be at least
> generator friendly... what do you think:

I'd rather you just use 2.1 style iterators (i.e. define a __getitem__)
in code that goes into Twisted.

class Iterator:

   index = 0

   def __getitem__(self, index):
       if index != self.index: raise TypeError, "this is an iterator"
       self.index += 1
       if self.hasMoreData:
          return self.getData()
       else:
          raise IndexError



From cce at clarkevans.com  Mon Mar 10 09:04:00 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Mon, 10 Mar 2003 16:04:00 +0000
Subject: [Twisted-Python] iterators/generator
In-Reply-To: <20030310101942.0e868466.twisted@itamarst.org>
References: <20030310063429.GA84132@doublegemini.com> <20030310101942.0e868466.twisted@itamarst.org>
Message-ID: <20030310160400.GA85401@doublegemini.com>

On Mon, Mar 10, 2003 at 10:19:42AM -0500, Itamar Shtull-Trauring wrote:
| I'd rather you just use 2.1 style iterators (i.e. define a __getitem__)
| in code that goes into Twisted.

Perfect.  Thanks.

Clark



From cce at clarkevans.com  Mon Mar 10 09:17:07 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Mon, 10 Mar 2003 16:17:07 +0000
Subject: [Twisted-Python] Updated defer.html
In-Reply-To: <20030310085550.GB25802@frobozz.local>
References: <E18rn3o-0008OQ-00@pyramid.twistedmatrix.com> <20030309014932.GA21808@frobozz.local> <1047190343.957.130.camel@golux> <20030309213919.GA82276@doublegemini.com> <20030310044629.GA1121@radii> <20030310085550.GB25802@frobozz.local>
Message-ID: <20030310161707.GB85401@doublegemini.com>

On Mon, Mar 10, 2003 at 07:55:50PM +1100, Andrew Bennetts wrote:
| I was going to reply to Clark directly, but others have already made much
| the same points... :)

Oh, I'm not one to take critique too personally... if I don't
"get it", I don't get it.  ;)

| > On Sun, Mar 09, 2003 at 09:39:19PM +0000, Clark C. Evans wrote:
| > > Documenting Deferreds suffers from a bootstrap problem; it is 
| > > advantageous to introduce Deferreds before Threads, but to 
| > > understand why you need Deferrerds you must already have
| > > read about Threads.   The typical solution to a bootstrap 
| > 
| > This makes no sense. Almost *all* of Deferreds used in Twisted (and
| > certainly most Twisted-using code) have nothing to do with threads.
| 
| Indeed!  There is virtually no need to mention threads in defer.html at all.

Ok. I'll re-write to pull threads out.  I was just trying
to re-write the code so that it was runnable.  In particular,
I was looking for a trivial example of something which would
be defered.   Perhaps a small example using reactor.callLater
would be a better choice.

| > Anyway, I think having one (runnable) example that doesn't even depend
| > on asynchrony might even be a good thing. Something like:
| > 
| >   d = Deferred()
| >   d.addCallbacks(...)
| >   d.callback(x)
| >   # maybe another d.addCallbacks(), etc
| 
| Yes, that's a good idea.  It's worth emphasising that there's really no
| voodoo here.  Possibly even demonstrate it in an interactive session, so
| that it is really clear that nothing happens until it is called.

Yes, good idea.

| > The point would be to show that indeed Deferreds don't have anything
| > special to do with asynchrony (or especially threads), as well make it
| > more clear what Deferreds are really doing, by showing it in the
| > simplest manner possible.
| 
| Which reminds me: the title should probably be "Deferred Results".  I think
| perhaps this is what confuses people; Deferreds aren't about delaying
| execution arbitrarily, or doing work in threads, or hooking into the event
| loop, they're about handling results that haven't arrived yet.  A Deferred
| doesn't represent a *callback*, it represents a *result*, and it provides
| simple (and powerful) ways to register callbacks to operate on the result,
| whenever it becomes available.

Great explanation.

| > So yeah, I think we should have a few good runnable examples in the
| > document, including one like I mentioned, as well as some "case-study"
| > things like threading, refID-mapping (This was mentioned in another
| > recent thread), etc.
| 
| Case studies would be worthwhile.  I don't really like the idea of padding
| out the document many more with more examples, because it's already a long
| read.  But adding a section to the end called Case Studies would allow
| plenty of room to add complete, verbose examples, without detracting from
| the exposition of the core concepts.
| 
| So in my opinion, the code samples should be left pretty much as they were
| -- minimal, clear examples of the general principles, not necessarily
| ready-to-run, and then add case studies to the end.  I'm even tempted to say
| this is a pattern that more of the docs should follow.... :)

I think the CaseStudies should kinda be distinct, in the
"Examples" directory or something like that.   However,
the 'deferred' could give an index of how the concept
was used in various examples.

I don't have time to further patch today/tomorow, but I'll
fix it by Wed.

Clark



From twisted at itamarst.org  Mon Mar 10 09:41:40 2003
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 10 Mar 2003 11:41:40 -0500
Subject: [Twisted-Python] Updated defer.html
In-Reply-To: <20030310161707.GB85401@doublegemini.com>
References: <E18rn3o-0008OQ-00@pyramid.twistedmatrix.com>
	<20030309014932.GA21808@frobozz.local>
	<1047190343.957.130.camel@golux>
	<20030309213919.GA82276@doublegemini.com>
	<20030310044629.GA1121@radii>
	<20030310085550.GB25802@frobozz.local>
	<20030310161707.GB85401@doublegemini.com>
Message-ID: <20030310114140.7112407a.twisted@itamarst.org>

On Mon, 10 Mar 2003 16:17:07 +0000
"Clark C. Evans" <cce at clarkevans.com> wrote:

> Ok. I'll re-write to pull threads out.  I was just trying
> to re-write the code so that it was runnable.  In particular,
> I was looking for a trivial example of something which would
> be defered.   Perhaps a small example using reactor.callLater
> would be a better choice.

I already did this in CVS. You should probably check the code is
runnable though, I may have some typos.



From cce at clarkevans.com  Mon Mar 10 10:34:48 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Mon, 10 Mar 2003 17:34:48 +0000
Subject: [Twisted-Python] Updated defer.html
In-Reply-To: <20030310114140.7112407a.twisted@itamarst.org>
References: <E18rn3o-0008OQ-00@pyramid.twistedmatrix.com> <20030309014932.GA21808@frobozz.local> <1047190343.957.130.camel@golux> <20030309213919.GA82276@doublegemini.com> <20030310044629.GA1121@radii> <20030310085550.GB25802@frobozz.local> <20030310161707.GB85401@doublegemini.com> <20030310114140.7112407a.twisted@itamarst.org>
Message-ID: <20030310173448.GB85958@doublegemini.com>

On Mon, Mar 10, 2003 at 11:41:40AM -0500, Itamar Shtull-Trauring wrote:
| On Mon, 10 Mar 2003 16:17:07 +0000
| "Clark C. Evans" <cce at clarkevans.com> wrote:
| > Ok. I'll re-write to pull threads out.  I was just trying
| > to re-write the code so that it was runnable.  In particular,
| > I was looking for a trivial example of something which would
| > be defered.   Perhaps a small example using reactor.callLater
| > would be a better choice.
| 
| I already did this in CVS. You should probably check the code is
| runnable though, I may have some typos.

Just had to add code to run the reactor, and exit after 4 sec.

BTW, is there anyway to ask the reactor to run it's current 'queue'
and then _stop_ when it's idle.  in other words, I'd like
something like:

   reactor.run(daemon=0)  # only runs currently queued stuff

Best,

Clark



From iko at strakt.com  Mon Mar 10 10:29:10 2003
From: iko at strakt.com (Anders Hammarquist)
Date: Mon, 10 Mar 2003 18:29:10 +0100
Subject: [Twisted-Python] SMTPClient
Message-ID: <200303101729.h2AHTAM4030136@fido.strakt.com>

Hi gang,

I found a small bug in dealing with error messages from the SMTP server.
Here's the revised patch to take care of this.

/Anders

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: text/x-patch
Size: 28908 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030310/7e9a5403/attachment-0002.bin>

From cce at clarkevans.com  Mon Mar 10 10:56:49 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Mon, 10 Mar 2003 17:56:49 +0000
Subject: [Twisted-Python] iterators/generator
In-Reply-To: <20030310101942.0e868466.twisted@itamarst.org>
References: <20030310063429.GA84132@doublegemini.com> <20030310101942.0e868466.twisted@itamarst.org>
Message-ID: <20030310175649.GA86194@doublegemini.com>

On Mon, Mar 10, 2003 at 10:19:42AM -0500, Itamar Shtull-Trauring wrote:
| I'd rather you just use 2.1 style iterators (i.e. define a __getitem__)
| in code that goes into Twisted.
| 
| class Iterator:
| 
|    index = 0
| 
|    def __getitem__(self, index):
|        if index != self.index: raise TypeError, "this is an iterator"
|        self.index += 1
|        if self.hasMoreData:
|           return self.getData()
|        else:
|           raise IndexError

After some thinking, the above won't work for me:

  1)  The whole point of an iterator is to be able to ask
      it for the next() object; using the above idiom doesn't
      allow me to 'yield' easily between calls to next(); for
      more detail see the FlowIterator in the flow.py code

  2)  The goal is to move foward with 2.2 style iterators and
      generators, but to do so in a way that the code still
      works for 2.1 users.  

The code has grown up a bit...

    try:
       # if we are using 2.2, just make a local copy
       # of the StopIteration and iter() built-in
       StopIteration = StopIteration
       iter = iter
    except:
       # Simulate StopIteration and iter() for 2.1
       # This can eventually be removed once we
       # stop supporting 2.1
       class StopIteration(Exception): pass
       class _ListIterator:
           def __init__(self,lst):
               self.lst = list(lst)
           def next():
               if self.lst: return self.lst.pop(0)
               else: raise StopIteration
       def iter(lst):
           from types import ListType, TupleType
           if type(lst) == type([]) or type(lst) == type(tuple()):
               return _ListIterator(lst)
           else:
               return lst.__iter__()

In this way, code with the toolkit can be written like

    from <the-place-for-this> import iter, StopIteration

    traverse(someIterable):
        iterator = iter(someIterable)
        try:
            while 1:
                val = iterator.next()
                # process val, perhaps Yielding
                # or doing other things not possible
                # in a 'for val in someIterable:
        except StopIteration: pass

The advantage, is that traverse is now 'generator' friendly
but will work with lists and tuples for those in 2.1 land.
Further, if someone implements __iter__ and next() in 2.1
it will still work.   Its a win-win.  And the best part, 
is that once we stop supporting 2.1, we can just kill the
"from <the-place-for-this>" line and all is well.

;) Clark



From glyph at twistedmatrix.com  Mon Mar 10 15:18:45 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 10 Mar 2003 16:18:45 -0600
Subject: [Twisted-Python] Updated defer.html
In-Reply-To: <20030310173448.GB85958@doublegemini.com>
Message-ID: <42857D24-5346-11D7-9352-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

First, I'd like to make it clear that I completely agree with Itamar 
and Andrew... I had a message composed on the plane that said almost 
exactly what they said in the last few exchanges :).

Thanks for looking at this documentation from a new-user perspective, 
Clark.

On Monday, March 10, 2003, at 11:34 AM, Clark C. Evans wrote:

> BTW, is there anyway to ask the reactor to run it's current 'queue'
> and then _stop_ when it's idle.  in other words, I'd like
> something like:
>
>    reactor.run(daemon=0)  # only runs currently queued stuff

If the OS would do something sensible like give us a queue of events to 
run, we could do that.  However, the reactor already goes through a few 
contortions to create the illusion that something like that is 
happening in the background; it is difficult to deterministically say 
what the "current queue" is, especially given the surprising behavior 
of certain modules like HTTP, which register infinitely recurring 
timers.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+bQ9JvVGR4uSOE2wRAtiyAKCuwlo4Zrkm3WFIjm8tzNuNq3r4GQCeOQI/
kuFPjroIKn0NoNlGFMov5g4=
=5LNV
-----END PGP SIGNATURE-----




From bob at redivi.com  Mon Mar 10 19:36:30 2003
From: bob at redivi.com (Bob Ippolito)
Date: Mon, 10 Mar 2003 21:36:30 -0500
Subject: [Twisted-Python] Updated defer.html
In-Reply-To: <42857D24-5346-11D7-9352-000393C9700E@twistedmatrix.com>
Message-ID: <444E0062-536A-11D7-BBBB-000A95686CD8@redivi.com>

On Monday, Mar 10, 2003, at 17:18 America/New_York, Glyph Lefkowitz 
wrote:

> On Monday, March 10, 2003, at 11:34 AM, Clark C. Evans wrote:
>
>> BTW, is there anyway to ask the reactor to run it's current 'queue'
>> and then _stop_ when it's idle.  in other words, I'd like
>> something like:
>>
>>    reactor.run(daemon=0)  # only runs currently queued stuff
>
> If the OS would do something sensible like give us a queue of events 
> to run, we could do that.  However, the reactor already goes through a 
> few contortions to create the illusion that something like that is 
> happening in the background; it is difficult to deterministically say 
> what the "current queue" is, especially given the surprising behavior 
> of certain modules like HTTP, which register infinitely recurring 
> timers.

Well, the simple solution is just to make a DeferredList with all of 
your "high level tasks".  When that DeferredList completes, do a 
reactor.stop().

On a somewhat related note, something that might be of some utility is 
to have some sort of "deferred callback wrapper" for callback or 
errback that allows you to make callbacks that don't expect a result or 
to integrate into the deferred callback chain.  It's something that 
happens pretty often I think?  It'd be a really simple construction:

class Passthrough:
	def __init__(self, fn):
		self.fn = fn
	def __call__(self, result, *args, **kwargs):
		self.fn(*args, **kwargs)
		return result

Is something like that worthy of sitting in defer.py ?

-bob




From radix at twistedmatrix.com  Mon Mar 10 22:26:38 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 11 Mar 2003 00:26:38 -0500
Subject: [Twisted-Python] Updated defer.html
In-Reply-To: <444E0062-536A-11D7-BBBB-000A95686CD8@redivi.com>
References: <42857D24-5346-11D7-9352-000393C9700E@twistedmatrix.com> <444E0062-536A-11D7-BBBB-000A95686CD8@redivi.com>
Message-ID: <20030311052638.GA1141@radii>

On Mon, Mar 10, 2003 at 09:36:30PM -0500, Bob Ippolito wrote:
> class Passthrough:
> 	def __init__(self, fn):
> 		self.fn = fn
> 	def __call__(self, result, *args, **kwargs):
> 		self.fn(*args, **kwargs)
> 		return result
> 
> Is something like that worthy of sitting in defer.py ?

Well, for one, it could be implemented like this:

  def passThrough(fn):
      return lambda *args, **kwargs: fn(*args, **kwargs)

for two, I don't think it's worth it when people can just in-line a
similar lambda into their code. I use stuff like this all the time:

  d.addCallback(lambda r: foo(bar, baz))

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From acapnotic at twistedmatrix.com  Mon Mar 10 23:38:35 2003
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 10 Mar 2003 22:38:35 -0800
Subject: [Twisted-Python] Portland Perspective Broker presentation
	Monday
In-Reply-To: <1046999486.28102.50.camel@troglodyte.funhouse>
References: <1046999486.28102.50.camel@troglodyte.funhouse>
Message-ID: <1047364583.13824.6.camel@troglodyte.funhouse>

Here's the bibliography from tonight's presentation:
http://twistedmatrix.com/users/acapnotic/porpig/bibliography.html

For those of you that missed it, and those of you who are preparing
slides of your own for upcoming presentations, you can see the complete
"slide show" (minus my rambling commentary) by hitting the "restart"
link at the bottom of the page.

-- 
The moon is first quarter, 46.6% illuminated, 7.1 days old.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20030310/8e4cffc0/attachment.sig>

From bob at redivi.com  Tue Mar 11 00:07:19 2003
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 11 Mar 2003 02:07:19 -0500
Subject: [Twisted-Python] Updated defer.html
In-Reply-To: <20030311052638.GA1141@radii>
Message-ID: <190DF3F2-5390-11D7-BBBB-000A95686CD8@redivi.com>

On Tuesday, Mar 11, 2003, at 00:26 America/New_York, Christopher 
Armstrong wrote:

> On Mon, Mar 10, 2003 at 09:36:30PM -0500, Bob Ippolito wrote:
>> class Passthrough:
>> 	def __init__(self, fn):
>> 		self.fn = fn
>> 	def __call__(self, result, *args, **kwargs):
>> 		self.fn(*args, **kwargs)
>> 		return result
>>
>> Is something like that worthy of sitting in defer.py ?
>
> Well, for one, it could be implemented like this:
>
>   def passThrough(fn):
>       return lambda *args, **kwargs: fn(*args, **kwargs)
>
> for two, I don't think it's worth it when people can just in-line a
> similar lambda into their code. I use stuff like this all the time:
>
>   d.addCallback(lambda r: foo(bar, baz))

Yeah but that doesn't pass the result through to the next deferred in 
the callback chain, that passes on whatever fn() returns.. which could 
very well be just None.  For most cases that's ok, but not for all.

-bob




From martin at datacash.com  Tue Mar 11 02:36:56 2003
From: martin at datacash.com (Martin Waite)
Date: 11 Mar 2003 09:36:56 +0000
Subject: [Twisted-Python] newbie adbapi question
Message-ID: <1047375416.8709.56.camel@pascal>

Hi,

I'm making some progress on my application, but there are
a few ugly looking things in here and I wonder if I'm doing 
them right:

1) one theme (I would have said thread, but I'm not using 
   threads) of execution requires that 3 database queries
   are executed one after the other.  My current solution 
   involves chaining calls to adbapi.operation() and 
   adbapi.query() together.  My first query updates a table
   and so calls adbapi.operation().  In the callback to this,
   I make a call to adbapi.query().  In the callback to this, 
   I make another call to adbapi.operation().  My final callback
   reschedules the original call with the reactor - effectively
   making this sequence of operations repeat indefinitely.

   This seems to work, but is making my code look a bit like 
   a state machine.  This could get hairy.  Instead, should I be 
   adding all my callbacks at one time to the same Deferred ?

2) I'm using MySQL as the database.  Normally, following an update,
   I would fetch the result code. adbapi._run_operation() seems to 
   throw it away however, so all I ever get is None.  I would prefer
   to get the MySQL result, which tells me how many rows I updated.
   This lets me decide whether to run other queries.

   The suspicious code in _run_operation (v1.0.2):

        try:
            apply(curs.execute, args, kw)
            result = None
            curs.close()
            conn.commit()

   To me, this doesn't look interested in the result code from the   
   database. I'm used to using the Perl DBI - that distinguishes 
   between queries returning rows (select) and those
   returning result codes (delete, update).  Am I mistaken mapping
   these onto adbapi.query() and adbapi.operation() ?

regards,
Martin

   	





From andrew-twisted at puzzling.org  Tue Mar 11 05:10:26 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 11 Mar 2003 23:10:26 +1100
Subject: [Twisted-Python] Updated defer.html
In-Reply-To: <20030310114140.7112407a.twisted@itamarst.org>
References: <E18rn3o-0008OQ-00@pyramid.twistedmatrix.com> <20030309014932.GA21808@frobozz.local> <1047190343.957.130.camel@golux> <20030309213919.GA82276@doublegemini.com> <20030310044629.GA1121@radii> <20030310085550.GB25802@frobozz.local> <20030310161707.GB85401@doublegemini.com> <20030310114140.7112407a.twisted@itamarst.org>
Message-ID: <20030311121026.GB30439@frobozz.local>

On Mon, Mar 10, 2003 at 11:41:40AM -0500, Itamar Shtull-Trauring wrote:
> On Mon, 10 Mar 2003 16:17:07 +0000
> "Clark C. Evans" <cce at clarkevans.com> wrote:
> 
> > Ok. I'll re-write to pull threads out.  I was just trying
> > to re-write the code so that it was runnable.  In particular,
> > I was looking for a trivial example of something which would
> > be defered.   Perhaps a small example using reactor.callLater
> > would be a better choice.
> 
> I already did this in CVS. You should probably check the code is
> runnable though, I may have some typos.

If you use lint ("lore -o lint"), it will warn about invalid python syntax
inside <pre class="python">.  Of course, this doesn't guarantee that the
code *works*, but it's a start :)

-Andrew.




From andrew-twisted at puzzling.org  Tue Mar 11 05:29:34 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 11 Mar 2003 23:29:34 +1100
Subject: [Twisted-Python] Updated defer.html
In-Reply-To: <20030311052638.GA1141@radii>
References: <42857D24-5346-11D7-9352-000393C9700E@twistedmatrix.com> <444E0062-536A-11D7-BBBB-000A95686CD8@redivi.com> <20030311052638.GA1141@radii>
Message-ID: <20030311122934.GC30439@frobozz.local>

On Tue, Mar 11, 2003 at 12:26:38AM -0500, Christopher Armstrong wrote:
> On Mon, Mar 10, 2003 at 09:36:30PM -0500, Bob Ippolito wrote:
> > class Passthrough:
> > 	def __init__(self, fn):
> > 		self.fn = fn
> > 	def __call__(self, result, *args, **kwargs):
> > 		self.fn(*args, **kwargs)
> > 		return result
                ^^^^^^^^^^^^^  Note this line
> > 
> > Is something like that worthy of sitting in defer.py ?
> 
> Well, for one, it could be implemented like this:
> 
>   def passThrough(fn):
>       return lambda *args, **kwargs: fn(*args, **kwargs)

This will return None, not the result of the last callback (or errback).
Still, I think the above would be better as:

    from __future__ import nested_scopes

    def passThrough(fn):
        def foo(result, *args, **kwargs):
            fn(*args, **kwargs)
            return result
        return foo

Although wrapping the call to fn in a try/finally may be desirable.

> for two, I don't think it's worth it when people can just in-line a
> similar lambda into their code. I use stuff like this all the time:
> 
>   d.addCallback(lambda r: foo(bar, baz))

Well, I used to use:

    d.addCallback(lambda r: foo(bar, baz) or r)

But I soon found that it was way too hard to read when the expressions got
complex -- variations like "[foo(bar, baz)] and r" just weren't worth the
pain.

-Andrew.




From m at moshez.org  Tue Mar 11 06:23:04 2003
From: m at moshez.org (Moshe Zadka)
Date: 11 Mar 2003 13:23:04 -0000
Subject: [Twisted-Python] Updated defer.html
In-Reply-To: <20030311122934.GC30439@frobozz.local>
References: <20030311122934.GC30439@frobozz.local>, <42857D24-5346-11D7-9352-000393C9700E@twistedmatrix.com> <444E0062-536A-11D7-BBBB-000A95686CD8@redivi.com> <20030311052638.GA1141@radii>
Message-ID: <20030311132304.23203.qmail@green.zadka.com>

On Tue, 11 Mar 2003, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:

>     def passThrough(fn):
>         def foo(result, *args, **kwargs):
>             fn(*args, **kwargs)
>             return result
>         return foo

Equivalently

def passThrough(fn):
    lambda result, *args, **kw: (fn(*args, **kwargs), result)[1]

Yeah, yeah.
I know.
-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.



From tv at twistedmatrix.com  Tue Mar 11 06:25:10 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Tue, 11 Mar 2003 15:25:10 +0200
Subject: [Twisted-Python] t.i.process uid/gid suckiness
Message-ID: <20030311132510.GA11040@lapdog>

	The handling of uid/gid changes and SIGCHLD all around twisted
	are in an appalling state. I've tried to bitch at the right
	people, but that hasn't helped, so I'm taking the more
	heavyhanded approach of just fixing stuff. Let the code talk.

	However, I still don't consider myself an authority on what
	Twisted should do, don't have that much time longer term (I
	will not maintain this code permanently), and don't know what
	silly limitations the windows port of python has. So, I'll try
	to write down what changes I'm planning on doing, so you have
	a chance of vetoing. If I get no comments, I'll just basically
	go ahead and commit what I happen to want to, touching a many
	areas of mktap/t.i.process/procmon/whatever. If you want to
	avoid a de facto hijack-fix-abandon process, TALK NOW

	0) make the t.i.process setuid/setgid code actually work (see
	   patch; BTW is the initgroups part really needed? I feel my
	   pure-python 6-liner does the same thing.)

	1) make all places that take uid/gid just silently take in
	   strings, too, and use pwd/grp to convert them to uids and
	   gids as necessary

	2) make .taps store uids and gids as strings

	3) defer procmon startup so the processes are forked only
           after setuid has happened.

	4) try to fix the child process races, atleast including
           deferring signal-triggered processing to happen outside the
           actual signal handler, rewriting the reap logic silliness,
	   and stopping procmon from trying to kill reaped children.

	5) fix whatever problems I noticed while fixing the above

	6) whatever else I feel like improving at the time

	7) ???

	8) profit!

diff -u -u -r1.50 process.py
--- twisted/internet/process.py	10 Mar 2003 20:16:57 -0000	1.50
+++ twisted/internet/process.py	11 Mar 2003 13:08:00 -0000
@@ -33,10 +33,25 @@
     pty = None
 
 try:
-    from initgroups import initgroups
     import pwd
+    try:
+        from initgroups import initgroups
+    except:
+        import grp
+        def initgroups(username, dummy):
+            l=[]
+            for groupname, password, gid, userlist in grp.getgrall():
+                if username in userlist:
+                    l.append(gid)
+            os.setgroups(l)
+    def switch_uid(uid, gid):
+        os.setgid(gid)
+        initgroups(pwd.getpwuid(uid)[0], gid)
+        os.setuid(uid)
 except:
-    def initgroups(*args): pass
+    def switch_uid(uid, gid):
+        os.setgid(gid)
+        os.setuid(uid)
 
 from twisted.persisted import styles
 from twisted.python import log, failure
@@ -229,9 +244,7 @@
                     os.chdir(path)
                 # set the UID before I actually exec the process
                 if settingUID:
-                    os.setgid(gid)
-                    initgroups(pwd.getpwuid(uid)[0], gid)
-                    os.setuid(uid)
+                    switch_uid(uid, gid)
                 os.execvpe(command, args, environment)
             except:
                 # If there are errors, bail and try to write something
@@ -482,9 +495,7 @@
 
                 # set the UID before I actually exec the process
                 if settingUID:
-                    os.setgid(gid)
-                    initgroups(pwd.getpwuid(uid)[0], gid)
-                    os.setuid(uid)
+                    switch_uid(uid, gid)
                 os.execvpe(command, args, environment)
             except:
                 stderr = os.fdopen(1, 'w')


-- 
:(){ :|:&};:



From anthony at interlink.com.au  Tue Mar 11 07:17:55 2003
From: anthony at interlink.com.au (Anthony Baxter)
Date: Wed, 12 Mar 2003 01:17:55 +1100
Subject: [Twisted-Python] t.i.process uid/gid suckiness 
In-Reply-To: <20030311132510.GA11040@lapdog> 
Message-ID: <200303111417.h2BEHt327030@localhost.localdomain>

>>> Tommi Virtanen wrote
> 	0) make the t.i.process setuid/setgid code actually work (see
> 	   patch; BTW is the initgroups part really needed? I feel my
> 	   pure-python 6-liner does the same thing.)

> +        def initgroups(username, dummy):
> +            l=[]
> +            for groupname, password, gid, userlist in grp.getgrall():
> +                if username in userlist:
> +                    l.append(gid)
> +            os.setgroups(l)

Certainly on the operating systems that I can recall, your initgroups()
is doing the same thing as the C level initgroups. But if the C level
one is available, it seems more prudent to use it if it's there - gods
only know what some weirdo systems do (shuddering to recall some of 
DEC's "enhanced security" cruft in Ultrix and OSF/1...)

-- 
Anthony Baxter     <anthony at interlink.com.au>   
It's never too late to have a happy childhood.



From ivo at amaze.nl  Tue Mar 11 07:27:45 2003
From: ivo at amaze.nl (Ivo van der Wijk)
Date: Tue, 11 Mar 2003 15:27:45 +0100
Subject: [Twisted-Python] Twisted and wxPython on windows
Message-ID: <20030311152745.M8571@amaze.nl>

Hi all,

I'm currently testing my python/twisted/wxWindows application under Win98
(development is done under Linux).

Has anyone tested this before?

The application is rather unresponsive sometimes, even with the
win32evenreactor installed.

Does anyone know if things will perform better under win2k?

I avoid touching Windows as much as possible, so I'm somewhat of a
newbie in this area (windows development and python under windows).

Cheers

	Ivo

-- 
Drs. I.R. van der Wijk                                      -=-              
Brouwersgracht 132                             Amaze Internet Services V.O.F.
1013 HA Amsterdam, NL                                       -=-              
T +31-20-4688336         F +31-20-4688337        Linux/Web/Zope/SQL/MMBase   
W http://www.amaze.nl    E info at amaze.nl             Network Solutions        
W http://vanderwijk.info E ivo at amaze.nl                 Consultancy          
PGP http://vanderwijk.info/pgp                              -=-              



From waterbug at beeblebrox.gsfc.nasa.gov  Tue Mar 11 07:42:10 2003
From: waterbug at beeblebrox.gsfc.nasa.gov (Steve Waterbury)
Date: Tue, 11 Mar 2003 09:42:10 -0500
Subject: [Twisted-Python] Portland Perspective Broker presentationMonday
References: <1046999486.28102.50.camel@troglodyte.funhouse> <1047364583.13824.6.camel@troglodyte.funhouse>
Message-ID: <3E6DF5C2.5B3A0CFA@beeblebrox.gsfc.nasa.gov>

Kevin Turner wrote:
> 
> Here's the bibliography from tonight's presentation:
> http://twistedmatrix.com/users/acapnotic/porpig/bibliography.html

Having trouble bringing up your site ... looks like you've been 
"twist-dotted" ... :^)

- Steve.



From theller at python.net  Tue Mar 11 07:47:30 2003
From: theller at python.net (Thomas Heller)
Date: 11 Mar 2003 15:47:30 +0100
Subject: [Twisted-Python] Re: Twisted and wxPython on windows
References: <20030311152745.M8571@amaze.nl>
Message-ID: <wuj62c59.fsf@python.net>

Ivo van der Wijk <ivo at amaze.nl> writes:

> Hi all,
> 
> I'm currently testing my python/twisted/wxWindows application under Win98
> (development is done under Linux).
> 
> Has anyone tested this before?
> 
> The application is rather unresponsive sometimes, even with the
> win32evenreactor installed.
> 
> Does anyone know if things will perform better under win2k?
> 

You might want to try (if you're brave) the win32guireactor I posted
here some time ago (although it's really not finished).

IMO the problem is that the current win32 reactor isn't really event
driven, it does polling behind the scenes.

Thomas




From twisted at itamarst.org  Tue Mar 11 08:56:10 2003
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 11 Mar 2003 10:56:10 -0500
Subject: [Twisted-Python] newbie adbapi question
In-Reply-To: <1047375416.8709.56.camel@pascal>
References: <1047375416.8709.56.camel@pascal>
Message-ID: <20030311105610.3e1eaca8.twisted@itamarst.org>

On 11 Mar 2003 09:36:56 +0000
Martin Waite <martin at datacash.com> wrote:

> Hi,
> 
> I'm making some progress on my application, but there are
> a few ugly looking things in here and I wonder if I'm doing 
> them right:
> 
> 1) one theme (I would have said thread, but I'm not using 
>    threads) of execution requires that 3 database queries
>    are executed one after the other.  My current solution 

Look at the "Transaction" methods in adbapi. It allows you to run a
series of SQL commands at one go.



From uwe at oss4u.com  Tue Mar 11 10:46:23 2003
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Tue, 11 Mar 2003 09:46:23 -0800
Subject: [Twisted-Python] Twisted and wxPython on windows
In-Reply-To: <20030311152745.M8571@amaze.nl>
References: <20030311152745.M8571@amaze.nl>
Message-ID: <200303110946.23356.uwe@oss4u.com>

On Tuesday 11 March 2003 06:27 am, Ivo van der Wijk wrote:
> Hi all,
>
> I'm currently testing my python/twisted/wxWindows application under Win98
> (development is done under Linux).
>
> Has anyone tested this before?
>
> The application is rather unresponsive sometimes, even with the
> win32evenreactor installed.
>
> Does anyone know if things will perform better under win2k?
>
> I avoid touching Windows as much as possible, so I'm somewhat of a
> newbie in this area (windows development and python under windows).

The basic problem with wxPython and Twisted is the wxpython internal event 
loop. If you follow the demos and docs of Twisted (using wxsupport) your app 
will freeze whenever you open a menu or a modal dialogbox. This is due to the 
fact that wxWindows uses a different eventloop to handle this type of events. 
The wx main eventloop will suspend until the menu etc. closes. 
Using wxsupport this will also freeze the twisted eventloop.
Ergo - nothing works until you close whatever popped up.

I posted a recipe in the Python Cookbook (activestate.com) a while ago.
Basically I solved the problem by running the normal wx eventloop and using 
timers to run the twisted events. just check it out. It's only tested on 
linux but maybe it helps you.
 
 
	UC

--
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417




From twisted at moberley.com  Tue Mar 11 15:46:44 2003
From: twisted at moberley.com (Bradley Duane Peters)
Date: Tue, 11 Mar 2003 16:46:44 -0600
Subject: [Twisted-Python] Confusing traceback from mktap.py
Message-ID: <3E6E12F4.13823.2BBAF818@localhost>

Greetings,

I have somehow caused my Twisted application to become un-TAPable. 
Running it through mktap.py (in the same fashion as when it did work) 
results in the following traceback.

Traceback (most recent call last):
  File "mktap.py", line 30, in ?
    run()
  File "C:\Python22\Lib\site-packages\twisted\scripts\mktap.py",
      line 178, in run
    a.save()
  File "C:\Python22\Lib\site-packages\twisted\internet\app.py",
      line 634, in save
    dumpFunc(self, f)
  File "C:\Python22\Lib\site-packages\twisted\internet\app.py",
      line 616, in dumpFunc
    _dump(obj, file, 1)
TypeError: 'NoneType' object is not callable

Unfortunately, I don't have an old version to go back to, and I don't 
know enough about Twisted to know where I should look for a problem. 
I did try converting my TAP plug-in to just run, which resulted in 
the same error. At this point, I'm so completely lost that I'm not 
sure what, if any, or my source code I should be asking about.

If someone on this list can offer me a suggestion about where I might 
start looking for a problem, it would be very much appreciated.

(In case it makes a difference, I'm using Windows 98 and ActivePython 
2.2.)

Thank you for your time.

Sincerely,
Bradley Peters.  




From haering_python at gmx.de  Tue Mar 11 06:17:32 2003
From: haering_python at gmx.de (Gerhard =?iso-8859-1?Q?H=E4ring?=)
Date: Tue, 11 Mar 2003 13:17:32 +0000 (UTC)
Subject: [Twisted-Python] www.twistedmatrix.com down
Message-ID: <slrnb6roen.vg.gerhard.haering@haering.opus-gmbh.net>

At the moment I recommend to somebody on c.l.py to check out Twisted, and
verify if I typed the URL correctly, I can't connect to the HTTP port :-(

The host is not completely down, as I can connect to
www.twistedmatrix.com:smtp.

<sarcasm>
Speaking of which, I remember seeing the Twisted web server advertised as
"enterprise-ready" here ...
</sarcasm>

-- Gerhard




From tracy at reinventnow.com  Tue Mar 11 07:59:03 2003
From: tracy at reinventnow.com (Tracy S. Ruggles)
Date: Tue, 11 Mar 2003 08:59:03 -0600
Subject: [Twisted-Python] Portland Perspective Broker presentationMonday
In-Reply-To: <3E6DF5C2.5B3A0CFA@beeblebrox.gsfc.nasa.gov>
Message-ID: <FFB73BD7-53D1-11D7-ADEF-000393CE1304@reinventnow.com>

I can't get to twistedmatrix.com either (8.58a central)

--T

On Tuesday, March 11, 2003, at 08:42 AM, Steve Waterbury wrote:

> Kevin Turner wrote:
>>
>> Here's the bibliography from tonight's presentation:
>> http://twistedmatrix.com/users/acapnotic/porpig/bibliography.html
>
> Having trouble bringing up your site ... looks like you've been
> "twist-dotted" ... :^)
>
> - Steve.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>




From exarkun at intarweb.us  Tue Mar 11 17:10:11 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Tue, 11 Mar 2003 19:10:11 -0500
Subject: [Twisted-Python] Confusing traceback from mktap.py
In-Reply-To: <3E6E12F4.13823.2BBAF818@localhost>
References: <3E6E12F4.13823.2BBAF818@localhost>
Message-ID: <20030312001011.GB24369@meson.dyndns.org>

On Tue, Mar 11, 2003 at 04:46:44PM -0600, Bradley Duane Peters wrote:
> Greetings,
> 
> I have somehow caused my Twisted application to become un-TAPable. 
> Running it through mktap.py (in the same fashion as when it did work) 
> results in the following traceback.
> 
> Traceback (most recent call last):
>   File "mktap.py", line 30, in ?
>     run()
>   File "C:\Python22\Lib\site-packages\twisted\scripts\mktap.py",
>       line 178, in run
>     a.save()
>   File "C:\Python22\Lib\site-packages\twisted\internet\app.py",
>       line 634, in save
>     dumpFunc(self, f)
>   File "C:\Python22\Lib\site-packages\twisted\internet\app.py",
>       line 616, in dumpFunc
>     _dump(obj, file, 1)
> TypeError: 'NoneType' object is not callable
> 

  You shouldn't be able to induce this error with your code.  I can't
actually imagine -how- this might be induced, apparently "cPickle.dump" has
gotten itself to be None.  Perhaps you have "cPickle.py" in your source,
with "dump = None" in it?  Could you try this interactively, preferably
in your package's directory, and/or where you ran mktap from?

    import cPickle
    print cPickle.__file__, cPickle.dump

> Unfortunately, I don't have an old version to go back to, and I don't 
> know enough about Twisted to know where I should look for a problem. 

  Did you upgrade your app, or Twisted?  BTW, random piece of advise, always
develop with some sort of RCS software, be it CVS or something else.  It's
great for situations where you can't track down what has broken something...
you just back out changes until it works again.

  Jp

-- 
A disciple of another sect once came to Drescher as he was eating his
morning meal. "I would like to give you this personality test," said the
outsider, "because I want you to be happy." Drescher took the paper that was
offered him and put it into the toaster: "I wish the toaster to be happy, 
too."
-- 
 up 8 days, 15:59, 8 users, load average: 0.22, 0.13, 0.04
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030311/f1de741b/attachment.sig>

From twisted at moberley.com  Tue Mar 11 22:12:37 2003
From: twisted at moberley.com (Bradley Duane Peters)
Date: Tue, 11 Mar 2003 23:12:37 -0600
Subject: [Twisted-Python] Confusing traceback from mktap.py
In-Reply-To: <20030312001011.GB24369@meson.dyndns.org>
References: <3E6E12F4.13823.2BBAF818@localhost>
Message-ID: <3E6E6D65.4483.2D1C4C5A@localhost>

On 11 Mar 2003 at 19:10, Jp Calderone wrote:
> Perhaps you have "cPickle.py" in your source, with "dump = None" in
> it?  Could you try this interactively, preferably in your package's
> directory, and/or where you ran mktap from?
> 
>     import cPickle
>     print cPickle.__file__, cPickle.dump

Unless it's part of something imported from Twisted, I haven't used 
cPickle.py in my source and I can't find anything like "dump = None". 
I tried the two lines above in the Python shell starting from where I 
run mktap from, and from my package's directory. In all cases, it 
resulted in the following traceback:

Traceback (most recent call last):
  File "<stdin>", line 1, in ?
AttributeError: 'module' object has no attribute '__file__'

> Did you upgrade your app, or Twisted?

I had just made some modifications to my app, and was running it 
through mktap so I could test them. I didn't make any changes to 
Twisted itself.

Thanks,
Bradley Peters.  




From tv at twistedmatrix.com  Tue Mar 11 08:16:04 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Tue, 11 Mar 2003 17:16:04 +0200
Subject: [Twisted-Python] t.i.process uid/gid suckiness
In-Reply-To: <200303111417.h2BEHt327030@localhost.localdomain>
References: <20030311132510.GA11040@lapdog> <200303111417.h2BEHt327030@localhost.localdomain>
Message-ID: <20030311151604.GB12367@lapdog>

On Wed, Mar 12, 2003 at 01:17:55AM +1100, Anthony Baxter wrote:
> Certainly on the operating systems that I can recall, your initgroups()
> is doing the same thing as the C level initgroups. But if the C level
> one is available, it seems more prudent to use it if it's there - gods
> only know what some weirdo systems do (shuddering to recall some of 
> DEC's "enhanced security" cruft in Ultrix and OSF/1...)

	Well, I think the effective point was that the C function
	isn't normally available. The only python-accessible was
	z3p's C module, which was v0.1 according to the Vault, but
	http://www.twistedmatrix.com/users/z3p.twistd/ doesn't seem
	to work.

	I feel the C module is so rare and so unlikely to provide
	extra value, it's very unlikely twisted will ever need it.
	My guess at its reason for existence is that z3p didn't know
	it equals my 6-liner.

-- 
:(){ :|:&};:



From glyph at twistedmatrix.com  Wed Mar 12 00:39:42 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 12 Mar 2003 01:39:42 -0600
Subject: [Twisted-Python] t.i.process uid/gid suckiness
In-Reply-To: <20030311132510.GA11040@lapdog>
Message-ID: <C9EF9D4C-545D-11D7-9803-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Tuesday, March 11, 2003, at 07:25 AM, Tommi Virtanen wrote:

> 	The handling of uid/gid changes and SIGCHLD all around twisted
> 	are in an appalling state. I've tried to bitch at the right
> 	people, but that hasn't helped, so I'm taking the more
> 	heavyhanded approach of just fixing stuff. Let the code talk.

Thanks for taking a commanding lead on this :-).

The appropriate people are all pretty busy right now, and I would guess 
that their unix-fu is weaker than yours.  (I'd certainly guess *mine* 
is.)  The 'generic' process-running code in twisted currently doesn't 
work at all on Windows, except under cygwin, which should behave more 
or less like Linux, so just don't make any other code depend on 
unix-only imports.  win32eventreactor should not be affected to any 
changes here :-).

Your list of proposed changes looks good, and I have been bothered by 
the lack of formal correctness of this code for a while.  When you're 
done, please let us know if there are any further changes that you 
think need to be made; I'd like Twisted to be as safe as possible to be 
left suid.

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+buRCvVGR4uSOE2wRAuXMAKCv88CH3ZUSXUzqmYZ1Zhu4DUqaOwCdFeR0
J6PYUrzoqtIlD242KnZFG28=
=l5xQ
-----END PGP SIGNATURE-----




From cce at clarkevans.com  Wed Mar 12 11:21:04 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Wed, 12 Mar 2003 18:21:04 +0000
Subject: [Twisted-Python] iterators/generator
In-Reply-To: <20030310101942.0e868466.twisted@itamarst.org>
References: <20030310063429.GA84132@doublegemini.com> <20030310101942.0e868466.twisted@itamarst.org>
Message-ID: <20030312182104.GA94400@doublegemini.com>

On Mon, Mar 10, 2003 at 10:19:42AM -0500, Itamar Shtull-Trauring wrote:
| > Hello.  I'd like to write my 'user' level code with generators,
| > and thus, was thinking that new code could perhaps be at least
| > generator friendly... what do you think:
| 
|    def __getitem__(self, index):
|        if index != self.index: raise TypeError, "this is an iterator"
|        self.index += 1
|        if self.hasMoreData:
|           return self.getData()
|        else:
|           raise IndexError

I think that the code below is a fairly good 'first-cut' at supporting
user-level 2.2 generators with code that works in Python 2.1

Anyone object committing the following to python.compat?

Clark

    #
    # This compatibility hack allows for code to be written that 
    # supports 2.2 iterator/generator semantics within Python 2.1
    # This wraps 2.1 lists, mappings, and classes using the __getitem__
    # style iterator to use iter/next
    #
    try:
       StopIteration = StopIteration
       iter = iter
    except:
       # Python 2.1
       StopIteration = IndexError
       class _ListIterator:
           def __init__(self,lst):
               self.idx = 0
               if getattr(lst,'keys',None): lst = lst.keys()
               self.lst = lst
           def next(self):
               idx = self.idx
               self.idx += 1
               return self.lst[idx]
       def iter(lst):
           if hasattr(lst,'__iter__'):
               return lst.__iter__()
           else:
               return _ListIterator(lst)
    
    #
    if __name__ == '__main__:
        def dumpiter(itr):
            next = iter(itr).next
            try:
                while 1: print next()
            except StopIteration: pass
        dumpiter([1,2,3])
        dumpiter({'one': 'value', 'two': 'twoval'})



From z3p at twistedmatrix.com  Wed Mar 12 11:10:35 2003
From: z3p at twistedmatrix.com (Paul Swartz)
Date: Wed, 12 Mar 2003 12:10:35 -0600
Subject: [Twisted-Python] t.i.process uid/gid suckiness
In-Reply-To: <20030311151604.GB12367@lapdog>
References: <20030311132510.GA11040@lapdog> <200303111417.h2BEHt327030@localhost.localdomain> <20030311151604.GB12367@lapdog>
Message-ID: <20030312181035.GA1295@pyramid.twistedmatrix.com>

On Tue, Mar 11, 2003 at 05:16:04PM +0200, Tommi Virtanen wrote:
> 	I feel the C module is so rare and so unlikely to provide
> 	extra value, it's very unlikely twisted will ever need it.
> 	My guess at its reason for existence is that z3p didn't know
> 	it equals my 6-liner.

You're right.  The pty code is more-or-less stolen from the OpenSSH pty
code, so I didn't know how to emulate initgroups other than with an
external module.  Thanks for the fix. :)

-p
-- 
       Paul Swartz
(o_    http://www.twistedmatrix.com/users/z3p.twistd/  _o)
//\    z3p at twistedmatrix.com                           /\\
V_/_   AIM: z3penguin                                 _\_V->



From lordvan at lordvan.com  Wed Mar 12 13:01:14 2003
From: lordvan at lordvan.com (Thomas Raschbacher)
Date: Wed, 12 Mar 2003 21:01:14 +0100 (CET)
Subject: [Twisted-Python] t.web vhost -> personal server mapping
Message-ID: <65137.62.47.64.183.1047499274.squirrel@mail-at.net>

hi!

itamar asked me to post this to the list so here it is:

attached a small .rpy which can be used to map different vhosts ->
'personal' twisted.web servers listening on udp sockets (or anything else)

the getChild is just a hack and i'm not completely sure if it's the
only/best solution for this but it works this way (i mean the path stuff)

btw it's best used with a server creatd like this (imho ;)):
mktap --resource-script=vhostuser.rpy
and then user-servers like this:
mktap --path=/path/to/my/files --personal

comments, suggestions, improvments welcome :)

greetz, LordVan

-- 
-----BEGIN GEEK CODE BLOCK-----
GCS/CC/E/M/MU/S d- s: a--- C++++(++) UL++++ P+ L++++ E W+++ N+++ o-- K w-- O
M-- V- PS+ PE-- Y++ PGP+++ t+++ 5+ X- R tv b++++ DI- D+ G++ e-->+++++ h-- !r
z-
------END GEEK CODE BLOCK------


-----------------------------------------
This email was sent using SquirrelMail.
   "Webmail for nuts!"
http://squirrelmail.org/

-------------- next part --------------
A non-text attachment was scrubbed...
Name: vhostuser.rpy
Type: application/octet-stream
Size: 2133 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030312/c909fb82/attachment-0002.obj>

From lafou at wanadoo.fr  Wed Mar 12 00:59:46 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: Wed, 12 Mar 2003 08:59:46 +0100
Subject: [Twisted-Python] Re: Twisted and wxPython on windows
References: <20030311152745.M8571@amaze.nl> <200303110946.23356.uwe@oss4u.com>
Message-ID: <b4mpf4$14u$1@main.gmane.org>

In documentation :
"WxPython

As with Tkinter, the support for integrating Twisted with a WxPython 
application uses specialized support code rather than a simple reactor.

from wxPython.wx import *
from twisted.internet import wxsupport, reactor

myWxAppInstance = MyWxApp(0)
wxsupport.install(myWxAppInstance)
reactor.run()"

And I have seen a wxsupport(app) in the API documentation, but can't find it 
again.


Uwe C. Schroeder wrote:

> On Tuesday 11 March 2003 06:27 am, Ivo van der Wijk wrote:
>> Hi all,
>>
>> I'm currently testing my python/twisted/wxWindows application under Win98
>> (development is done under Linux).
>>
>> Has anyone tested this before?
>>
>> The application is rather unresponsive sometimes, even with the
>> win32evenreactor installed.
>>
>> Does anyone know if things will perform better under win2k?
>>
>> I avoid touching Windows as much as possible, so I'm somewhat of a
>> newbie in this area (windows development and python under windows).
> 
> The basic problem with wxPython and Twisted is the wxpython internal event
> loop. If you follow the demos and docs of Twisted (using wxsupport) your
> app will freeze whenever you open a menu or a modal dialogbox. This is due
> to the fact that wxWindows uses a different eventloop to handle this type
> of events. The wx main eventloop will suspend until the menu etc. closes.
> Using wxsupport this will also freeze the twisted eventloop.
> Ergo - nothing works until you close whatever popped up.
> 
> I posted a recipe in the Python Cookbook (activestate.com) a while ago.
> Basically I solved the problem by running the normal wx eventloop and
> using timers to run the twisted events. just check it out. It's only
> tested on linux but maybe it helps you.
>  
>  
> UC
> 
> --
> Open Source Solutions 4U, LLC 2570 Fleetwood Drive
> Phone:  +1 650 872 2425               San Bruno, CA 94066
> Cell:   +1 650 302 2405               United States
> Fax:    +1 650 872 2417





From lafou at wanadoo.fr  Wed Mar 12 05:51:49 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: Wed, 12 Mar 2003 13:51:49 +0100
Subject: [Twisted-Python] Protocol dataReceived
Message-ID: <b4nai7$2vr$1@main.gmane.org>

Hello,

I hav a question about twisted.protocol. I want to create a new server, with 
its own protocol.
this would be :

[----]       [--]  [---------...-----------] |   [--] [--------....---] [00]


4 chars for a command (like prnt to "print")
2 chars for size a data1
n chars for data1
eventually 2 chars & n chars for data2, etc.
and 00 as end of line for example


The problem is that data1, data2, datan, would be binary data. 
I am not sure that it won't pose a problem in strings used with protocol 
(such end of string).

Someone can help me please ?

thank you
Philippe






From bob at redivi.com  Wed Mar 12 15:46:17 2003
From: bob at redivi.com (Bob Ippolito)
Date: Wed, 12 Mar 2003 17:46:17 -0500
Subject: [Twisted-Python] Protocol dataReceived
In-Reply-To: <b4nai7$2vr$1@main.gmane.org>
Message-ID: <6F9403A2-54DC-11D7-A6D6-000A95686CD8@redivi.com>

On Wednesday, Mar 12, 2003, at 07:51 America/New_York, Philippe 
Lafoucrière wrote:

> Hello,
>
> I hav a question about twisted.protocol. I want to create a new 
> server, with
> its own protocol.
> this would be :

Basically what you want to do is look at twisted/protocols/basic.py -- 
specifically Int16StringReceiver (to see how to read in a 
length-prefixed string chunks at a time), NetstringReceiver (an example 
of having multiple states), and StatefulStringProtocol (this pattern 
will be useful for implementing your commands).

> The problem is that data1, data2, datan, would be binary data.
> I am not sure that it won't pose a problem in strings used with 
> protocol
> (such end of string).

Python strings are entirely 8-bit safe, for example len('\x00hi\xff') 
== 4 is a true statement.. so that will not cause you problems unless 
the transport has problems with it (i.e. a serial port or tty not 
explicitly configured to be 8bit clean may cause problems, and TCP/UDP 
sockets as a transport will never have this problem).

-bob



From rprice at collegenet.com  Wed Mar 12 16:03:03 2003
From: rprice at collegenet.com (rprice at collegenet.com)
Date: Wed, 12 Mar 2003 15:03:03 -0800 (PST)
Subject: [Twisted-Python] documentation issue?
Message-ID: <58285.10.1.4.156.1047510183.squirrel@webmail.collegenet.com>

Hi,

I am working my way through "The Twisted Documentation" Jan 29, 2003 and
found  a problem with an example (or with me).  At
http://twistedmatrix.com/documents/howto/plugin  it says:
% mktap qotd
Saving qotd application to qotd.tap...
Saved.
% twistd -f qotd.tap
% nc localhost 8007
An apple a day keeps the doctor away.
% kill `cat twistd.pid`


The problem is when I run 'mktap qotd' I get the following error:
Unknown command: qotd
and then it prints the usage and options help.

I am using python 2.2.1 and Twisted 1.0.3

Any help would be appreciated.

Ray









From exarkun at intarweb.us  Wed Mar 12 17:31:51 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Wed, 12 Mar 2003 19:31:51 -0500
Subject: [Twisted-Python] [bass@slinkp.com: [OT] Pycon: "pythooooon" t-shirts]
Message-ID: <20030313003151.GA31716@meson.dyndns.org>

  Since this strip was inspired by Twisted and suggested to Cube by itamar,
I thought I'd forward this to the list.

  I will be buying at least one. :)

  Jp

-- 
http://catandgirl.com/view.cgi?90
-- 
 up 9 days, 15:59, 11 users, load average: 0.09, 0.03, 0.01
-------------- next part --------------
An embedded message was scrubbed...
From: bass at slinkp.com (Paul Winkler)
Subject: [OT] Pycon: "pythooooon" t-shirts
Date: 12 Mar 2003 11:29:36 -0800
Size: 4425
URL: </pipermail/twisted-python/attachments/20030312/978f4d5d/attachment.mht>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030312/978f4d5d/attachment.sig>

From radix at twistedmatrix.com  Wed Mar 12 17:57:31 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 12 Mar 2003 19:57:31 -0500
Subject: [Twisted-Python] [bass@slinkp.com: [OT] Pycon: "pythooooon" t-shirts]
In-Reply-To: <20030313003151.GA31716@meson.dyndns.org>
References: <20030313003151.GA31716@meson.dyndns.org>
Message-ID: <20030313005731.GE1112@radii>

On Wed, Mar 12, 2003 at 07:31:51PM -0500, Jp Calderone wrote:
>   Since this strip was inspired by Twisted and suggested to Cube by itamar,
> I thought I'd forward this to the list.
> 
>   I will be buying at least one. :)

mmm. I want the second panel on a shirt. Just imagine the Twisted team
looking out onto a world in chaos after incinerating its dollars with
TCP/IP beams; triumphant, waving a twisted flag of victory. Now,
imagine controlling mens' minds with that fearsome image plastered
across your chest. "This is what will happen if you do not submit!!!"

http://isometric.spaceninja.com/_/twisted_plutonium/2.jpg

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From radix at twistedmatrix.com  Wed Mar 12 18:01:41 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 12 Mar 2003 20:01:41 -0500
Subject: [Twisted-Python] [skeom@esolnet.net: Hello......]
Message-ID: <20030313010141.GF1112@radii>

For some reason `skeom' decided to send me this email. I guess he's
not on the mailing list, so please Cc: him in responses. Oh, and I
assume he means "zerocopy" rather than "zerocoy".

----- Forwarded message from ������ <skeom at esolnet.net> -----

From: ������ <skeom at esolnet.net>
Subject: Hello......
To: <radix at twistedmatrix.com>
Importance: Normal

Hello.. I'm novice in python , especially twisted.

I havs one question.......

As you know, medusa is most famous development kit which supply
asynchronous socket ( zerocoy ), thread management, and so much
friendly function........
I herd that medusa can make more fast about 4 times or 10 times than
general python program using standard library.(unbelibable....)

Do twisted support zerocoy socket method?
And In your opinion, twisted is sufficiently competitive against
medusa in performance and any other part?

thank you for reading......^^

----- End forwarded message -----

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From cce at clarkevans.com  Wed Mar 12 19:12:13 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu, 13 Mar 2003 02:12:13 +0000
Subject: [Twisted-Python] Flow - an approach to interuptable data flows
Message-ID: <20030313021213.GA95174@doublegemini.com>

Hello.  Just checked in what I think is a stable version
of this 'flow' code I've been working on. 

  Problem: >
    In twisted, one would like to have a mechanism for
    managing large, perhaps blocking operations in 
    such a way that they can be resumable.

  Context:
    - >
      When doing page web page building, for example,
      the process often gets nested quite deeply into
      several layers of nested tags
    - >
      Many parts of a web page may have to block till
      data is ready, as a database query may not have
      finished [not necessarly implying threads, for 
      example Gerhard H�ring's code async PostgreSQL
      linkage]
    - >
      Some parts of the page building may also be 
      computational expensive, and thus, it would be
      polite to take a break now and then to let the
      main event loop process other events
    - > 
      Maintaining your context when constructing detailed
      (and highly nested) information is easy when you
      are using threads; but in Twisted's non-thread
      setting, it is quite tedious

  Solution:
    - >
      The construction of a 'Flow' object which describes
      a particular nesting of sub-routines so that intermediate
      stages could be added dynamically (for example, depending
      on a user's security).
    - > 
      A way of executing said Flow via a "execution stack", or
      FlowStack which is not the program stack; in this way, 
      a given Flow can be paused to allow other events to 
      get processed and then 'resumed' automatically.
    - >
      A set of FlowStages which are "atomic", non-inturruptable
      operations.   Each FlowStage has an 'input' and an 
      'output', if a Stage produces output, then the data moves
      onto subsequent stages.
    - >
      A mechanism for doing explosions (one-to-many iteration)  
      and reductions (many-to-one aggregations) which are both
      resumable.  In particular support for built-in lists and
      for 2.2, generators
    - > 
      A third mechansim for linking said Flow execution with
      a thread output, so that an iterator in a thread is 
      'transparently' marshalled into the main thread pump;
      so that when the thread blocks, the Flow Pauses, allowing
      other events to be handled within Twisted

Anyway, it's still experimental; but I'm rather happy with the
bugger, and it's producing some quite nice reports.  Comments 
would be helpful.

Clark


# Twisted, the Framework of Your Internet
# Copyright (C) 2003 Axista, Inc.
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of version 2.1 of the GNU Lesser General
# Public License as published by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
# USA

""" A resumable execution flow mechanism.

    Within single-threaded twisted main-loop, all code shares the same
    execution stack.  Sometimes it is useful when writing a handler
    to allow the handler to return (for example, if must block), but 
    saving the handler's state so it can be resumed later. 
"""

from __future__ import nested_scopes

class Flow:
    '''
       This object maintains a sequence of FlowStages which can be
       executed in order, where the output of one flow stage becomes
       the input of the next.   A flow starts with a top-level FlowStage,
       usually a producer of some sort, perhaps a database query, 
       followed by other filter stages until the data passed is 
       eventually consumed and None is returned.
   '''
    def __init__(self):
        '''
           Initializes a Flow object.  Processing starts at initialStage
           and then proceeds recursively.  Note that the stages are 
           recorded here as a StageItem singly-linked list.
        '''
        self.stageHead    = None
        self.stageTail    = None
        self.waitInterval = 0
    #     
    def append(self, stage):
        '''
            This appends an additional stage to the singly-linked
            list, starting with stageHead.
        '''
        link = FlowItem(stage)
        if not self.stageHead:
            self.stageHead = link
            self.stageTail = link
        else:
            self.stageTail.next = link
            self.stageTail = link
        return self

    def addFunction(self, callable, stop=None):
        self.append(FlowFunction(callable, stop))

    def addSequence(self, callable, onFinish = None):
        self.append(FlowSequence(callable, onFinish))

    def addContext(self, onFlush = None):
        self.append(FlowContext(onFlush))

    def addAccumulator(self, accum, start = None, 
                       finish = None, bucket = None):
        self.append(FlowAccumulator(accum, start, finish, bucket))

    def addDiscard(self):
        self.append(FlowStage())
    
    def execute(self, data = None):
        '''
           This executes the current flow, given empty
           starting data and the default initial state.
        '''
        if self.stageHead:
            stack = FlowStack(self.stageHead, data, self.waitInterval)
            stack.execute()

class FlowStack:
    '''
       a stack of FlowStages and a means for their execution
    '''
    def __init__(self, flowitem, data = None, waitInterval = 0):
        '''
           bootstraps the processing of the flow:

             flowitem      the very first stage in the process
             data          starting argument
             waitInterval  a useful item to slow the flow
        '''
        self._waitInterval = waitInterval
        self._stack   = []
        self._context = []  # see FlowContext
        self._stack.append((data, flowitem.stage, flowitem.next))
    #
    def context(self):
        cntx = self._context
        if cntx: 
            return cntx[-1]
    # 
    def push(self, data, stage=None, next=None):
        '''
           pushes a function to be executed onto the stack:
           
             data    argument to be passed
             stage   callable to be executed
             next    a FlowItem for subsequent stages
        '''
        if not stage:
            # assume the next stage in the process
            curr = self._current[2]
            if curr:
                stage = curr.stage
                next  = curr.next
        elif not next:
            # assume same stage, different function
            next = self._current[2]
        self._stack.append((data, stage, next))
    #
    def execute(self):
        '''
           This executes the current flow.
        '''
        stack = self._stack
        while stack:
            self._current = stack.pop()
            (data, stage, next) = self._current
            if not(stage): raise "unconsumed data"
            try:
                stage(self, data)
            except PauseFlow:
                self.push(data, stage, next)
                reactor.callLater(self._waitInterval,self.execute)
                return


class PauseFlow(Exception):
   '''
      This exception is used to pause a Flow, returning control
      back to the main event loop.  The flow automatically 
      reschedules itself to resume execution, resuming at the
      stage where it left off.
  '''

class FlowStage:
    ''' 
        operational unit in a flow, performs some sort of operation
        and optionally pushes other stages onto the call stack
    '''
    # 
    def __call__(self, flow, data):
        '''
            this is the minimum flow stage, it simply returns None,
            and thus indicates that the current branch is complete
        '''
        pass
 
class FlowFunction(FlowStage):
    ''' 
        wraps a function takign an input and returning a result; 
        in effect this implements one-to-one behavior
    '''
    def __init__(self, callable, stop = None):
        self.callable  = callable
        self.stop      = stop
    # 
    def __call__(self, flow, data):
        '''
            executes the callable and passes this data onto the next 
            stage in the flow; since this only pushes one item on
            to the stack, it is tail-recursive
        '''
        ret = self.callable(data)
        if ret is not self.stop:
            flow.push(ret)

class _FlowContext:
    '''
        innerds of the flow context, this object is created
        for each descend of a FlowContext stage, and has 
        attached callbacks.

        addOnFlush   adds a function to be called, optionally
                     with the 'context' attribute
    '''
    def __init__(self):
        self._flush = []
    #
    def addFlush(self, onFlush, bucket = None):
        args = onFlush.func_code.co_argcount
        if 0 == args: 
           fnc = lambda flow, cntx: onFlush()
        elif 1 == args:
           fnc = lambda flow, cntx: onFlush(getattr(cntx,bucket,None))
        else:
           fnc = onFlush
        self._flush.append(fnc)
   
class FlowContext(FlowStage):
    ''' 
        represents a branch of execution which may hold accumulated
        results and may have 'flush' handlers attached, which fire
        when the context is closed
    '''
    def __init__(self, onFlush = None):
        self.onFlush = onFlush

    def __call__(self, flow, data):
        ''' 
            adds the _FlowContext to the FlowStack's _context stack
        '''
        cntx = _FlowContext()
        if self.onFlush: 
            cntx.addFlush(self.onFlush)
        flow._context.append(cntx)
        flow.push(cntx, self.flush)
        flow.push(data)

    def flush(self, flow, cntx):
        '''
           cleans up the context and fires onFlush events
        '''
        top = flow._context.pop()
        assert top is cntx
        fncs = cntx._flush
        while fncs: flow.push(cntx, fncs.pop())


class FlowSequence(FlowStage):
    '''
        allows callable objects returning an iterator to be used
        within the system; this implements one-to-many behavior
    '''
    def __init__(self, callable, onFinish = None):
        self.callable = callable
        self.onFinish = onFinish
    # 
    def __call__(self, flow, data):
        '''
            executes the callable, and if an iterator object 
            is returned, schedules its next method
        '''
        ret = self.callable(data)
        if ret is not None:
            next = iter(ret).next
            flow.push(next, self.iterate)
    #
    def iterate(self, flow, next):
        '''
            if the next method has results, then schedule the
            next stage of the flow, otherwise finish up
        '''
        try:
            data = next()
            flow.push(next, self.iterate)
            flow.push(data)
        except StopIteration:
            if self.onFinish:
               self.onFinish()

class FlowAccumulator(FlowStage):
    '''
        the opposite of a FlowSequence, this takes multiple calls
        and converges them into a single call; this implements
        many-to-one behavior;  for the accumulator to work, it
        requires a FlowContext be higher up the call stack
    '''
    def __init__(self, accum, start = None, finish = None, bucket = None):
        if not bucket: bucket = id(self)
        self.bucket = str(bucket)
        self.start  = start
        self.accum  = accum
        self.finish = finish
    #
    def __call__(self, flow, data):
        '''
            executes the accum function
        '''
        cntx = flow.context()
        assert cntx, "FlowAccumulator needs a prior FlowContext"
        if not hasattr(cntx, self.bucket):
             if self.finish: cntx.addFlush(self.finish, self.bucket)
             acc = self.start
             if callable(acc): acc = acc()
        else:
             acc = getattr(cntx, self.bucket)
        acc = self.accum(acc, data)
        setattr(cntx, self.bucket, acc)

class FlowItem:
    '''
       a Flow is implemented as a series of FlowStage objects
       in a linked-list; this is the link node
        
         stage   a FlowStage in the linked list
         next    next FlowStageLink in this list
 
    '''
    def __init__(self,stage):
        self.stage = stage
        self.next  = None

class FlowIterator:
    '''
       This is an iterator base class which can be used to build
       iterators which are constructed and run within a Flow
    '''
    #
    def __init__(self, data = None):
        from twisted.internet.reactor import callInThread
        self.data = data  
        tunnel = _TunnelIterator(self)
        callInThread(tunnel.process)
        self._tunnel = tunnel
    #
    def __iter__(self): 
        return self._tunnel
    #
    def next(self):
        ''' 
            The method used to fetch the next value
        '''
        raise StopIteration

class _TunnelIterator:
    '''
       This is an iterator which tunnels output from an iterator
       executed in a thread to the main thread.   Note, unlike
       regular iterators, this one throws a PauseFlow exception
       which must be handled by calling reactor.callLater so that
       the producer threads can have a chance to send events to 
       the main thread.
    '''
    def __init__(self, source):
        '''
            This is the setup, the source argument is the iterator
            being wrapped, which exists in another thread.
        '''
        self.source     = source
        self.isFinished = 0
        self.failure    = None
        self.buff       = []
        self.append     = self.buff.append
    #
    def process(self):
        '''
            This is called in the 'source' thread, and 
            just basically sucks the iterator, appending
            items back to the main thread.
        '''
        from twisted.internet.reactor import callFromThread
        try:
            while 1:
                val = self.source.next()
                callFromThread(self.append,val)
        except StopIteration:
            callFromThread(self.stop)
        except Exception, e:
            print str(e)
            #failure = failure.Failure()
            #print "failing", failure
            #callFromThread(self.setFailure,failure)
    #
    def setFailure(self, failure):
        self.failure = failure
    #
    def stop(self):
        self.isFinished = 1
    #
    def next(self):
        if self.buff:
           return self.buff.pop(0)
        if self.isFinished:  
            raise StopIteration
        if self.failure:
            raise self.failure
        raise PauseFlow


class FlowQueryIterator(FlowIterator):
    def __init__(self, pool, sql):
        FlowIterator.__init__(self)
        self.curs = None
        self.sql  = sql
        self.pool = pool
        self.data = None
    def __call__(self,data):
        ret = FlowIterator.__call__(self,data)
        ret.append = ret.buff.extend
        return ret
    def next(self):
        if not self.curs:
            conn = self.pool.connect()
            self.curs = conn.cursor()
            if self.data: self.curs.execute(self.sql % self.data) 
            else: self.curs.execute(self.sql)
        res = self.curs.fetchone() # TODO: change to fetchmany
        if not(res): 
            self.curs.close()
            raise StopIteration
        return res

def testFlowIterator():
    class CountIterator(FlowIterator):
        def next(self): # this is run in a separate thread
            print "."
            from time import sleep
            sleep(.5)
            val = self.data
            if not(val):
                print "done counting"
                raise StopIteration
            self.data -= 1
            return val
    def printResult(data): print data
    def finished(): print "finished"
    f = Flow()
    f.addSequence(CountIterator, onFinish=finished)
    f.addFunction(printResult)
    f.waitInterval = 1
    f.execute(5)

def testFlow():
    '''
       primary tests of the Flow construct
    '''
    def addOne(data): return  data+1
    def printResult(data): print data
    def finished(): print "finished"
    def dataSource(data):  return [1, 1+data, 1+data*2]
    f = Flow()
    f.execute()
    f.addSequence(dataSource, finished)
    f.addFunction(addOne)
    f.addFunction(printResult)
    f.execute(2)
    f.execute(11)
    
    class simpleIterator:
        def __init__(self, data): 
            self.data = data
        def __iter__(self): 
            return self
        def next(self): 
            if self.data < 0: raise StopIteration
            ret = self.data
            self.data -= 1
            return ret
    
    import operator
    f = Flow()
    f.addContext(finished)
    f.addSequence(simpleIterator)
    f.addAccumulator(operator.add, 0, printResult)


def testFlowConnect():
    from twisted.enterprise.adbapi import ConnectionPool
    pool = ConnectionPool("mx.ODBC.EasySoft","PSICustomerProto")
    def printResult(x): print x
    def printDone(): print "done"
    sql = "SELECT caption from vw_date"
    f = Flow()
    f.waitInterval = 1
    f.addStage(FlowQueryIterator(pool,sql),onFinish=printDone)
    f.addStage(printResult)
    f.execute()

# support iterators for 2.1
try:
   StopIteration = StopIteration
   iter = iter
except:
   StopIteration = IndexError
   class _ListIterator:
       def __init__(self,lst):
           self.idx = 0
           if getattr(lst,'keys',None): lst = lst.keys()
           self.lst = lst
       def next(self):
           idx = self.idx
           self.idx += 1
           return self.lst[idx]
   def iter(lst): 
       if hasattr(lst,'__iter__'):
           return lst.__iter__()
       else:
           return _ListIterator(lst)

if '__main__' == __name__:
    from twisted.internet import reactor
    testFlow()
    testFlowIterator()
    #testFlowConnect()
    reactor.callLater(5,reactor.stop)
    reactor.run()



From radix at twistedmatrix.com  Wed Mar 12 19:37:55 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 12 Mar 2003 21:37:55 -0500
Subject: [Twisted-Python] Flow - an approach to interuptable data flows
In-Reply-To: <20030313021213.GA95174@doublegemini.com>
References: <20030313021213.GA95174@doublegemini.com>
Message-ID: <20030313023755.GH1112@radii>

On Thu, Mar 13, 2003 at 02:12:13AM +0000, Clark C. Evans wrote:
> # Twisted, the Framework of Your Internet
> # Copyright (C) 2003 Axista, Inc.

All code in Twisted needs to be Copyright Glyph. Please remove this
code from CVS or change the copyright asap... (Since it's copyrighted
by a corporation right now, you may have to get them to officially
sign the agreement in doc/legal/).

Temp-vigilante-while-glyph-is-busy,

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From bruce at cubik.org  Wed Mar 12 19:42:36 2003
From: bruce at cubik.org (Bruce Mitchener)
Date: Wed, 12 Mar 2003 19:42:36 -0700
Subject: [Twisted-Python] small bugs
Message-ID: <3E6FF01C.5050709@cubik.org>

I've started using Twisted again finally, and found some small issues.

I don't have the time to fix them, but maybe someone else does.  Most of 
these are too small (and not worth the time) to put into the bug 
tracker, so here they are:

    * mktap -d and mktap -p don't appear to work (or at least
      they didn't do anything).
    * Spacing error in comments at start of
      listings/Twisted/Quotes/quotetap.py visible in the
      plugin howto.
    * lists/application/app3.py refers to a comment in
      doc/examples/echoserv.py that doesn't exist. visible
      in the application howto.
    * Copyright from twistd --version is still 2000-2002.
    * mktap --version doesn't output copyright info at all.
      (I didn't look at other utilities because I can't
      remember if any others exist.)

Also, the progression through the docs to get a .tap-based application 
up and running is confusing.  I figured I was writing a server, so I 
looked at the howto for that, then was pointed towards the application 
writing howto, and then finally that pointed to the plugin howto.  I 
eventually got to the right place, but it was a bit painful doing so. 
(and the stuff surrounding plugins.tml is still as confusing as it was 
in October and assumes too much Python knowledge about modules and so on.)

  - Bruce




From bruce at cubik.org  Wed Mar 12 19:45:38 2003
From: bruce at cubik.org (Bruce Mitchener)
Date: Wed, 12 Mar 2003 19:45:38 -0700
Subject: [Twisted-Python] Flow - an approach to interuptable data flows
References: <20030313021213.GA95174@doublegemini.com> <20030313023755.GH1112@radii>
Message-ID: <3E6FF0D2.4020509@cubik.org>

Christopher Armstrong wrote:
> On Thu, Mar 13, 2003 at 02:12:13AM +0000, Clark C. Evans wrote:
>># Twisted, the Framework of Your Internet
>># Copyright (C) 2003 Axista, Inc.
> 
> All code in Twisted needs to be Copyright Glyph. Please remove this
> code from CVS or change the copyright asap... (Since it's copyrighted
> by a corporation right now, you may have to get them to officially
> sign the agreement in doc/legal/).

A more permissive license, such as the BSD-without-advertising, or the 
MIT/X11 license would work as well, since that'd give Glyph all of the 
rights that he needs?

  - Bruce




From cce at clarkevans.com  Wed Mar 12 20:47:46 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu, 13 Mar 2003 03:47:46 +0000
Subject: [Twisted-Python] Flow - an approach to interuptable data flows
In-Reply-To: <3E6FF0D2.4020509@cubik.org>
References: <20030313021213.GA95174@doublegemini.com> <20030313023755.GH1112@radii> <3E6FF0D2.4020509@cubik.org>
Message-ID: <20030313034746.GA95602@doublegemini.com>

Quite right.  I added Glyph to the copyright.   

On Wed, Mar 12, 2003 at 07:45:38PM -0700, Bruce Mitchener wrote:
| Christopher Armstrong wrote:
| >All code in Twisted needs to be Copyright Glyph. Please remove this
| >code from CVS or change the copyright asap... (Since it's copyrighted
| >by a corporation right now, you may have to get them to officially
| >sign the agreement in doc/legal/).

twisted/protocols/gnutella.py:# Copyright (C) 2002 Bryce "Zooko" O'Whielacronx
twisted/zoot/AFactory.py:# Copyright (C) 2002 Bryce "Zooko" Wilcox-O'Hearn
twisted/zoot/pingertap.py:# Copyright (C) 2002 Bryce "Zooko" Wilcox-O'Hearn
twisted/zoot/pongertap.py:# Copyright (C) 2002 Bryce "Zooko" Wilcox-O'Hearn
twisted/zoot/zoot.py:# Copyright (C) 2002 Bryce "Zooko" Wilcox-O'Hearn
twisted/zoot/zoottap.py:# Copyright (C) 2002 Bryce "Zooko" Wilcox-O'Hearn
  etc...


| A more permissive license, such as the BSD-without-advertising, or the 
| MIT/X11 license would work as well, since that'd give Glyph all of the 
| rights that he needs?

I'd actually perfer this over the LGPL, especially if I'm the author.

Best,

Clark



From radix at twistedmatrix.com  Wed Mar 12 20:45:54 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 12 Mar 2003 22:45:54 -0500
Subject: [Twisted-Python] Flow - an approach to interuptable data flows
In-Reply-To: <20030313034746.GA95602@doublegemini.com>
References: <20030313021213.GA95174@doublegemini.com> <20030313023755.GH1112@radii> <3E6FF0D2.4020509@cubik.org> <20030313034746.GA95602@doublegemini.com>
Message-ID: <20030313034554.GI1112@radii>

On Thu, Mar 13, 2003 at 03:47:46AM +0000, Clark C. Evans wrote:
> Quite right.  I added Glyph to the copyright.   
> 
> On Wed, Mar 12, 2003 at 07:45:38PM -0700, Bruce Mitchener wrote:
> | Christopher Armstrong wrote:
> | >All code in Twisted needs to be Copyright Glyph. Please remove this
> | >code from CVS or change the copyright asap... (Since it's copyrighted
> | >by a corporation right now, you may have to get them to officially
> | >sign the agreement in doc/legal/).
> 
> twisted/protocols/gnutella.py:# Copyright (C) 2002 Bryce "Zooko" O'Whielacronx
> twisted/zoot/AFactory.py:# Copyright (C) 2002 Bryce "Zooko" Wilcox-O'Hearn
> twisted/zoot/pingertap.py:# Copyright (C) 2002 Bryce "Zooko" Wilcox-O'Hearn
> twisted/zoot/pongertap.py:# Copyright (C) 2002 Bryce "Zooko" Wilcox-O'Hearn
> twisted/zoot/zoot.py:# Copyright (C) 2002 Bryce "Zooko" Wilcox-O'Hearn
> twisted/zoot/zoottap.py:# Copyright (C) 2002 Bryce "Zooko" Wilcox-O'Hearn
>   etc...

Huh. I thought that was cleared up a long time ago... I remember when
Zooko first added that code, and glyph explained the copyright policy,
and IIRC Zooko agreed to it. I don't know why it's never been
changed. Glyph? :)

> | A more permissive license, such as the BSD-without-advertising, or the 
> | MIT/X11 license would work as well, since that'd give Glyph all of the 
> | rights that he needs?
> 
> I'd actually perfer this over the LGPL, especially if I'm the author.

You still have a copyright on that code, and you can distribute it
however you want, of course. It's just non-mutual copyright, as glyph
has the same rights as you (If you agree, anyway).

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From cce at clarkevans.com  Wed Mar 12 23:31:05 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu, 13 Mar 2003 06:31:05 +0000
Subject: [Twisted-Python] Flow - an approach to interuptable data flows
In-Reply-To: <20030313034554.GI1112@radii>
References: <20030313021213.GA95174@doublegemini.com> <20030313023755.GH1112@radii> <3E6FF0D2.4020509@cubik.org> <20030313034746.GA95602@doublegemini.com> <20030313034554.GI1112@radii>
Message-ID: <20030313063105.GA96049@doublegemini.com>

On Wed, Mar 12, 2003 at 10:45:54PM -0500, Christopher Armstrong wrote:
| You still have a copyright on that code, and you can distribute it
| however you want, of course. It's just non-mutual copyright, as glyph
| has the same rights as you (If you agree, anyway).

Perfect.

Clark



From mario at ruggier.org  Thu Mar 13 01:09:24 2003
From: mario at ruggier.org (Mario Ruggier)
Date: Thu, 13 Mar 2003 09:09:24 +0100
Subject: [Twisted-Python] documentation issue?
In-Reply-To: <58285.10.1.4.156.1047510183.squirrel@webmail.collegenet.com>
Message-ID: <1A41CC32-552B-11D7-A266-000393756786@ruggier.org>

Is the TwsitedQuotes package in your python path (can you import it) ?

Did you copy all the necessary files to this package dir
(__init__.py, plugins.tml, quoteproto.py, quoters.py, quotetap.py) ?

mario


> Hi,
>
> I am working my way through "The Twisted Documentation" Jan 29, 2003 
> and
> found  a problem with an example (or with me).  At
> http://twistedmatrix.com/documents/howto/plugin  it says:
> % mktap qotd
> Saving qotd application to qotd.tap...
> Saved.
> % twistd -f qotd.tap
> % nc localhost 8007
> An apple a day keeps the doctor away.
> % kill `cat twistd.pid`
>
>
> The problem is when I run 'mktap qotd' I get the following error:
> Unknown command: qotd
> and then it prints the usage and options help.
>
> I am using python 2.2.1 and Twisted 1.0.3
>
> Any help would be appreciated.
>
> Ray




From ivo at amaze.nl  Thu Mar 13 03:08:00 2003
From: ivo at amaze.nl (Ivo van der Wijk)
Date: Thu, 13 Mar 2003 11:08:00 +0100
Subject: [Twisted-Python] Re: Twisted and wxPython on windows
In-Reply-To: <b4mpf4$14u$1@main.gmane.org>; from lafou@wanadoo.fr on Wed, Mar 12, 2003 at 08:59:46AM +0100
References: <20030311152745.M8571@amaze.nl> <200303110946.23356.uwe@oss4u.com> <b4mpf4$14u$1@main.gmane.org>
Message-ID: <20030313110758.T8571@amaze.nl>

On Wed, Mar 12, 2003 at 08:59:46AM +0100, Philippe Lafoucrière wrote:
> In documentation :
> "WxPython
> 
> As with Tkinter, the support for integrating Twisted with a WxPython 
> application uses specialized support code rather than a simple reactor.
> 
> from wxPython.wx import *
> from twisted.internet import wxsupport, reactor
> 
> myWxAppInstance = MyWxApp(0)
> wxsupport.install(myWxAppInstance)
> reactor.run()"
> 
> And I have seen a wxsupport(app) in the API documentation, but can't find it 
> again.
> 

This is not the issue. The problem is the reactor that seems 'sluggish'
under windows, making the app freeze quite often.

It seems that win2k does alot better, so perhaps that should be the target
platform.

I'll give the guieventreactor a try tough.

Cheers

	Ivo

-- 
Drs. I.R. van der Wijk                                      -=-              
Brouwersgracht 132                             Amaze Internet Services V.O.F.
1013 HA Amsterdam, NL                                       -=-              
T +31-20-4688336         F +31-20-4688337        Linux/Web/Zope/SQL/MMBase   
W http://www.amaze.nl    E info at amaze.nl             Network Solutions        
W http://vanderwijk.info E ivo at amaze.nl                 Consultancy          
PGP http://vanderwijk.info/pgp                              -=-              



From andrew-twisted at puzzling.org  Thu Mar 13 04:40:25 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu, 13 Mar 2003 22:40:25 +1100
Subject: [Twisted-Python] small bugs
In-Reply-To: <3E6FF01C.5050709@cubik.org>
References: <3E6FF01C.5050709@cubik.org>
Message-ID: <20030313114025.GE4315@frobozz.local>

On Wed, Mar 12, 2003 at 07:42:36PM -0700, Bruce Mitchener wrote:
> I've started using Twisted again finally, and found some small issues.

Good to hear from you again :)

Regarding some of your small bugs:

>    * Spacing error in comments at start of
>      listings/Twisted/Quotes/quotetap.py visible in the
>      plugin howto.

Fixed.

>    * lists/application/app3.py refers to a comment in
>      doc/examples/echoserv.py that doesn't exist. visible
>      in the application howto.

Looks like itamar fixed this.

>    * mktap --version doesn't output copyright info at all.
>      (I didn't look at other utilities because I can't
>      remember if any others exist.)

Look at bin/* in CVS, or twisted/scripts for an idea of what utilities we
have.

Thanks!

-Andrew.




From nbm at mithrandr.moria.org  Thu Mar 13 07:11:46 2003
From: nbm at mithrandr.moria.org (Neil Blakey-Milner)
Date: Thu, 13 Mar 2003 16:11:46 +0200
Subject: [Twisted-Python] StikiWiki and textarea/woven/model problem.
Message-ID: <20030313141146.GA36050@mithrandr.moria.org>

Hi,

Firstly, StikiWiki is a simple example of a somewhat Wiki-like web
application in Twisted that can create and edit reStructuredText
documents, and display them as HTML.  It's attached as stikiwiki.py.

Well, you can create documents.  Editing isn't as much editing as
rewriting.  I'm using a textarea for input, and since I haven't looked
all that much at woven, I can't figure out why its contents aren't
replaced with the existing content (via getData on the given model).

So, at the moment, you can create a page (localhost:9080/asdf/create),
type in some reST, and then go to localhost:9080/asdf and view it.  Then
go to localhost:9080/asdf/create and rewrite it.  I want to figure out
why the model's getData doesn't get involved.

Any help greatly appreciated.

Thanks,

Neil
-- 
Neil Blakey-Milner
nbm at mithrandr.moria.org
-------------- next part --------------
#!/usr/local/bin/python
#
# Copyright (c) 2003 Neil Blakey-Milner
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#

from twisted.cred import service
from twisted.internet import app, reactor
from twisted.web import resource, server, static
from twisted.web.woven import model, page

from docutils import core, io
from StringIO import StringIO
from cog import db, base

entry_xhtml = """
<html>
    <head>
        <title model="title">Quotes Galore!</title>
        <style>.quote {color: green;}</style>
    </head>

    <body>
        <h1 model="title">New Page!</h1>

        <form action="">
            <textarea rows="15" cols="50" name="entry" model="entry"
                controller="Anything" >
                Something
            </textarea>
            <input type="submit" />
        </form>
    </body>
</html>
"""

default_css = """
/*
:Author: David Goodger
:Contact: goodger at users.sourceforge.net
:date: $Date: 2002/07/27 14:55:52 $
:version: $Revision: 1.12 $
:copyright: This stylesheet has been placed in the public domain.

Default cascading style sheet for the HTML output of Docutils.
*/

a.footnote-reference {
  font-size: smaller ;
  vertical-align: super }

a.target {
  color: blue }

a.toc-backref {
  text-decoration: none ;
  color: black }

dd {
  margin-bottom: 0.5em }

div.abstract {
  margin: 2em 5em }

div.abstract p.topic-title {
  font-weight: bold ;
  text-align: center }

div.attention, div.caution, div.danger, div.error, div.hint,
div.important, div.note, div.tip, div.warning {
  margin: 2em ;
  border: medium outset ;
  padding: 1em }

div.attention p.admonition-title, div.caution p.admonition-title,
div.danger p.admonition-title, div.error p.admonition-title,
div.warning p.admonition-title {
  color: red ;
  font-weight: bold ;
  font-family: sans-serif }

div.hint p.admonition-title, div.important p.admonition-title,
div.note p.admonition-title, div.tip p.admonition-title {
  font-weight: bold ;
  font-family: sans-serif }

div.dedication {
  margin: 2em 5em ;
  text-align: center ;
  font-style: italic }

div.dedication p.topic-title {
  font-weight: bold ;
  font-style: normal }

div.figure {
  margin-left: 2em }

div.footer, div.header {
  font-size: smaller }

div.system-messages {
  margin: 5em }

div.system-messages h1 {
  color: red }

div.system-message {
  border: medium outset ;
  padding: 1em }

div.system-message p.system-message-title {
  color: red ;
  font-weight: bold }

div.topic {
  margin: 2em }

h1.title {
  text-align: center }

h2.subtitle {
  text-align: center }

hr {
  width: 75% }

ol.simple, ul.simple {
  margin-bottom: 1em }

ol.arabic {
  list-style: decimal }

ol.loweralpha {
  list-style: lower-alpha }

ol.upperalpha {
  list-style: upper-alpha }

ol.lowerroman {
  list-style: lower-roman }

ol.upperroman {
  list-style: upper-roman }

p.caption {
  font-style: italic }

p.credits {
  font-style: italic ;
  font-size: smaller }

p.first {
  margin-top: 0 }

p.label {
  white-space: nowrap }

p.topic-title {
  font-weight: bold }

pre.literal-block, pre.doctest-block {
  margin-left: 2em ;
  margin-right: 2em ;
  background-color: #eeeeee }

span.classifier {
  font-family: sans-serif ;
  font-style: oblique }

span.classifier-delimiter {
  font-family: sans-serif ;
  font-weight: bold }

span.field-argument {
  font-style: italic }

span.interpreted {
  font-family: sans-serif }

span.option-argument {
  font-style: italic }

span.problematic {
  color: red }

table {
  margin-top: 0.5em ;
  margin-bottom: 0.5em }

table.citation {
  border-left: solid thin gray ;
  padding-left: 0.5ex }

table.docinfo {
  margin: 2em 4em }

table.footnote {
  border-left: solid thin black ;
  padding-left: 0.5ex }

td, th {
  padding-left: 0.5em ;
  padding-right: 0.5em ;
  vertical-align: baseline }

td.docinfo-name {
  font-weight: bold ;
  text-align: right }

td.field-name {
  font-weight: bold }
"""

class MStikiEntry(model.Model):
    def __init__(self, page, path, value):
        model.Model.__init__(self)
        self.page = page
        self.path = path
        self.value = value

    def getData(self):
        return self.value
        pass

    def setData(self, data):
        p = StikiPage(self.page.parent, self.path, data)
        self.page.parent.putChild(self.path, p)
        print "putChild with %s and %s on %s" % (self.path, p.id, self.page.parent.id)

class StikiPage(object, resource.Resource):
    __persistent__ = 1

    value = """
Uninitialised StikiPage
-----------------------

This StikiPage exists, but doesn't have any content in it."""

    def __init__(self, parent, path, value = None):
        self.errorpage = 0
        self.final = 0
        resource.Resource.__init__(self)
        self.parent = parent
        if value:
            self.value = value
        self.id = path
        base.setDirty(self, 1)

    def getChild(self, path, request):

        if path == "":
            return self

        fullpath = "/".join(request.acqpath[:-2])
        shortpath = request.acqpath[-2]

        self.model = {'entry': MStikiEntry(self, shortpath, self.value), 'title': "New StikiWiki Entry!"}

        if path == "create":
            p = page.Page(self.model, templateFile="create.xhtml")
            p.template = entry_xhtml
            return p

        if path == "delete":
            return StikiErrorPage(self, path, request.uri)

        return StikiErrorPage(self, path, request.uri)

    def render(self, request):
        pub = core.Publisher()
        pub.set_reader('restructuredtext', None, 'restructuredtext')
        pub.set_writer('html')
        pub.set_options()
        pub.options._destination = ''
        pub.options.stylesheet = '/default.css'
        pub.source = io.StringIO(pub.options, source = self.value)
        pub.destination = io.StringIO(pub.options)
        pub.options.report_level = 5
        pub.options.halt_level = 6
        warnings = StringIO()
        pub.options.warning_stream = warnings
        return pub.publish()

    def putChild(self, path, res):
        resource.Resource.putChild(self, path, res)
        base.setDirty(self, 1)

class StikiErrorPage(StikiPage):
    def __init__(self, parent, path, uri, final = 0):
        StikiPage.__init__(self, parent, path)
        self.errorpage = 1
        self.final = final
        self.value = """
No such entry
-------------

There is no such entry in this StikiWiki."""

        if not final:
            if not uri.endswith("/"):
                uri += "/"
            uri += "create"
            self.value += """  `Create it?`_
            
.. _`Create it?`: %s""" % (uri)

    def getChild(self, path, request):
        if self.final:
            return StikiErrorPage(self, path, request.uri, 1)

        if not self.final and path == "":
            self.final = 1
            return self

        fullpath = "/".join(request.acqpath[:-2])
        shortpath = request.acqpath[-2]

        self.model = {'entry': MStikiEntry(self, shortpath, self.value), 'title': "New StikiWiki Entry!"}

        if path == "create":
            p = page.Page(self.model, templateFile="create.xhtml")
            p.template = entry_xhtml
            return p

        #if path == "delete":
        #    return StikiErrorPage(self, path, request.uri)

        #if self.errorpage:
        #    self.final = 1

        return StikiErrorPage(self, path, request.uri, 1)


class StikiSite(object, resource.Resource):
    __persistent__ = 1

    def __init__(self):
        resource.Resource.__init__(self)
        self.id = "site"

    def getChild(self, path, request):
        if path == "":
            return self.getChildWithDefault("Index", request)
        return StikiErrorPage(self, path, request.uri)

    def putChild(self, path, res):
        resource.Resource.putChild(self, path, res)
        base.setDirty(self, 1)

class StikiService(app.ApplicationService):
    def startService(self):
        app.ApplicationService.startService(self)
        reactor.callLater(0, self.addDefaults)

    def addDefaults(self):
        db = self.serviceParent.getServiceNamed("cog").db

        if not db.registry.has_key("stikisite"):
            self.ss = StikiSite()
            db.registry.set("stikisite", self.ss)
        else:
            self.ss = db.registry.get("stikisite")
            self.ss._load()

        self.serviceParent.listenTCP(9080, server.Site(self.ss))

        if "Index" not in self.ss.listStaticNames():
            self.ss.putChild("Index", StikiPage(self.ss, "Index",
                """
Hello World!
-----------

Hey there!"""))

        if "default.css" not in self.ss.listStaticNames():
            self.ss.putChild("default.css", static.Data(default_css, "text/css"))

        db.flush()
        del db

class CogService(app.ApplicationService):
    def __init__(self, path, serviceName, serviceParent=None):
        app.ApplicationService.__init__(self, serviceName, serviceParent=serviceParent)
        self.path = path

    def startService(self):
        self.db = db.openDatabase(self.path)
        self.scheduledWork = reactor.callLater(60, self.doPeriodicWork)

    def stopService(self):
        self.scheduledWork.cancel()
        del self.scheduledWork
        self.db.close()
        del self.db

    def doPeriodicWork(self):
        delay = self.db.do_periodic_work()
        self.scheduledWork = reactor.callLater(delay, self.doPeriodicWork)

    def commit(self):
        self.db.flush()

def main():
    a = app.Application("stikiwiki")
    s = StikiService("stiki", a)
    c = CogService("/tmp/cog/", "cog", a)
    a.run(save=0)

if __name__ == "__main__":
    main()

From robert at dumond.org  Thu Mar 13 07:13:39 2003
From: robert at dumond.org (Robert W. Dumond)
Date: Thu, 13 Mar 2003 09:13:39 -0500
Subject: [Twisted-Python] greetings!
Message-ID: <3E709213.5040701@dumond.org>

hallo, everyone!  i just thought i would introduce myself, because i 
think i am going to be posting a lot of questions on this list.  i keep 
on reading how easy it is to program with your product, but my 
experience with python is very limited, and ,honestly, i really don't 
have that much time for it because of work.  i still put in plenty of 
time with it, though.  i love the language.  it beats the hell out of 
java, which i have to use everyday for work.  it really feels like i am 
playing instead of programming.  =-)

i also wanted to discuss with you my plans with my new found language. 
i am currently working for a startup.  i am designing their first 
project, and i am the sole programmer.  when our company starts hiring, 
i will be in charge of development, tech support, and q.a..  what i want 
is a centralized system to support all three of these departments.  i 
want a cvs, project management, bug tracking, bug assignment, tech 
suport logging, customer support log, registration server, update 
server, and document server (for emailing customers .pdf copies of the 
manuals).  i understand that this is a monumental task.  *shrug*  one of 
the things that i hated about my old job (besides management ;-) was 
that i had to use 5 programs to do everything i had to do.  it was a 
pain in the ass.  i don't want my crew to have to go through that stupid 
little hell.

(side track - oh, and yeah, i do know about zope.  i worked with it 
some, but i decided i would rather work with your product so i could 
work with pure python.)

right now, i am tightening up my python skills by going through some 
books.  so i thought i would send out this email, get some ideas on how 
to start (or maybe to stop =-P), and then start the design phase, and, 
who knows, maybe even write some test.  (i really just discovered unit 
testing.  i was out of the programming loop for about a year until six 
months ago.)

so, tell me, am i shooting too high?  is this feasible?  any thoughts 
you have would be greatly appreciated and thanked!

guhby,
rwd




From bob at redivi.com  Thu Mar 13 08:08:13 2003
From: bob at redivi.com (Bob Ippolito)
Date: Thu, 13 Mar 2003 10:08:13 -0500
Subject: [Twisted-Python] greetings!
In-Reply-To: <3E709213.5040701@dumond.org>
References: <3E709213.5040701@dumond.org>
Message-ID: <20030313100812.A28042@redivi.com>

On Thu, Mar 13, 2003 at 09:13:39AM -0500, Robert W. Dumond wrote:
> (side track - oh, and yeah, i do know about zope.  i worked with it 
> some, but i decided i would rather work with your product so i could 
> work with pure python.)

Well there are already Zope products to do just about everything you want to do.  There are very few, if any, complete implementations of what you want in Twisted.  Although it would be great if someone were to make all of this available in Twisted, I think it's too much for one person to do well in a reasonable amount of time, and that you should take another look at Zope/Plone/etc..

-bob



From rprice at collegenet.com  Thu Mar 13 10:05:32 2003
From: rprice at collegenet.com (rprice at collegenet.com)
Date: Thu, 13 Mar 2003 09:05:32 -0800 (PST)
Subject: [Twisted-Python] documentation issue?
In-Reply-To: <1A41CC32-552B-11D7-A266-000393756786@ruggier.org>
References: <58285.10.1.4.156.1047510183.squirrel@webmail.collegenet.com>
        <1A41CC32-552B-11D7-A266-000393756786@ruggier.org>
Message-ID: <58956.10.1.4.156.1047575132.squirrel@webmail.collegenet.com>

Hi Mario,

> Is the TwsitedQuotes package in your python path (can you import it) ?

Nope. That did it.

>
> Did you copy all the necessary files to this package dir
> (__init__.py, plugins.tml, quoteproto.py, quoters.py, quotetap.py) ?
>
> mario
>
>
>> Hi,
>>
>> I am working my way through "The Twisted Documentation" Jan 29, 2003
>> and
>> found  a problem with an example (or with me).  At
>> http://twistedmatrix.com/documents/howto/plugin  it says:
>> % mktap qotd
>> Saving qotd application to qotd.tap...
>> Saved.
>> % twistd -f qotd.tap
>> % nc localhost 8007
>> An apple a day keeps the doctor away.
>> % kill `cat twistd.pid`
>>
>>
>> The problem is when I run 'mktap qotd' I get the following error:
>> Unknown command: qotd
>> and then it prints the usage and options help.
>>
>> I am using python 2.2.1 and Twisted 1.0.3
>>
>> Any help would be appreciated.
>>
>> Ray
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


Ray





From nbm at mithrandr.moria.org  Thu Mar 13 13:59:00 2003
From: nbm at mithrandr.moria.org (Neil Blakey-Milner)
Date: Thu, 13 Mar 2003 22:59:00 +0200
Subject: [Twisted-Python] StikiWiki and textarea/woven/model problem.
In-Reply-To: <20030313141146.GA36050@mithrandr.moria.org>
References: <20030313141146.GA36050@mithrandr.moria.org>
Message-ID: <20030313205859.GA76980@mithrandr.moria.org>

On Thu 2003-03-13 (16:11), Neil Blakey-Milner wrote:
> Well, you can create documents.  Editing isn't as much editing as
> rewriting.  I'm using a textarea for input, and since I haven't looked
> all that much at woven, I can't figure out why its contents aren't
> replaced with the existing content (via getData on the given model).
> 
> So, at the moment, you can create a page (localhost:9080/asdf/create),
> type in some reST, and then go to localhost:9080/asdf and view it.  Then
> go to localhost:9080/asdf/create and rewrite it.  I want to figure out
> why the model's getData doesn't get involved.

Thanks to "wzZzy" for pointing out I don't have the view set.

Attached the minimal changes.

Basically, you need docutils (0.2) from docutils.sf.net, and cog (0.3)
from http://www.itamarst.org/software/cog/.

Then, create /tmp/cog.

Run.

Connect to localhost:9080.  Create pages by going to another page, and
adding the name you want and "/create".  So, to create
http://localhost:9080/asdf, go to http://localhost:9080/asdf/create.

You can edit any page by putting "/edit" at the end.  Or, use the link
at the bottom of the page to edit or create the page.

The main page is different - use http://localhost:9080/Index/edit for
it.

Night,

Neil
-- 
Neil Blakey-Milner
nbm at mithrandr.moria.org
-------------- next part --------------
#!/usr/local/bin/python
#
# Copyright (c) 2003 Neil Blakey-Milner
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#

from twisted.cred import service
from twisted.internet import app, reactor
from twisted.web import resource, server, static
from twisted.web.woven import model, page

from docutils import core, io
from StringIO import StringIO
from cog import db, base

entry_xhtml = """
<html>
    <head>
        <title model="title">Quotes Galore!</title>
        <style>.quote {color: green;}</style>
    </head>

    <body>
        <h1 model="title">New Page!</h1>

        <form action="">
            <textarea rows="15" cols="50" name="entry" model="entry"
                controller="Anything" view="Text">
                Something
            </textarea>
            <input type="submit" />
        </form>
    </body>
</html>
"""

default_css = """
/*
:Author: David Goodger
:Contact: goodger at users.sourceforge.net
:date: $Date: 2002/07/27 14:55:52 $
:version: $Revision: 1.12 $
:copyright: This stylesheet has been placed in the public domain.

Default cascading style sheet for the HTML output of Docutils.
*/

a.footnote-reference {
  font-size: smaller ;
  vertical-align: super }

a.target {
  color: blue }

a.toc-backref {
  text-decoration: none ;
  color: black }

dd {
  margin-bottom: 0.5em }

div.abstract {
  margin: 2em 5em }

div.abstract p.topic-title {
  font-weight: bold ;
  text-align: center }

div.attention, div.caution, div.danger, div.error, div.hint,
div.important, div.note, div.tip, div.warning {
  margin: 2em ;
  border: medium outset ;
  padding: 1em }

div.attention p.admonition-title, div.caution p.admonition-title,
div.danger p.admonition-title, div.error p.admonition-title,
div.warning p.admonition-title {
  color: red ;
  font-weight: bold ;
  font-family: sans-serif }

div.hint p.admonition-title, div.important p.admonition-title,
div.note p.admonition-title, div.tip p.admonition-title {
  font-weight: bold ;
  font-family: sans-serif }

div.dedication {
  margin: 2em 5em ;
  text-align: center ;
  font-style: italic }

div.dedication p.topic-title {
  font-weight: bold ;
  font-style: normal }

div.figure {
  margin-left: 2em }

div.footer, div.header {
  font-size: smaller }

div.system-messages {
  margin: 5em }

div.system-messages h1 {
  color: red }

div.system-message {
  border: medium outset ;
  padding: 1em }

div.system-message p.system-message-title {
  color: red ;
  font-weight: bold }

div.topic {
  margin: 2em }

h1.title {
  text-align: center }

h2.subtitle {
  text-align: center }

hr {
  width: 75% }

ol.simple, ul.simple {
  margin-bottom: 1em }

ol.arabic {
  list-style: decimal }

ol.loweralpha {
  list-style: lower-alpha }

ol.upperalpha {
  list-style: upper-alpha }

ol.lowerroman {
  list-style: lower-roman }

ol.upperroman {
  list-style: upper-roman }

p.caption {
  font-style: italic }

p.credits {
  font-style: italic ;
  font-size: smaller }

p.first {
  margin-top: 0 }

p.label {
  white-space: nowrap }

p.topic-title {
  font-weight: bold }

pre.literal-block, pre.doctest-block {
  margin-left: 2em ;
  margin-right: 2em ;
  background-color: #eeeeee }

span.classifier {
  font-family: sans-serif ;
  font-style: oblique }

span.classifier-delimiter {
  font-family: sans-serif ;
  font-weight: bold }

span.field-argument {
  font-style: italic }

span.interpreted {
  font-family: sans-serif }

span.option-argument {
  font-style: italic }

span.problematic {
  color: red }

table {
  margin-top: 0.5em ;
  margin-bottom: 0.5em }

table.citation {
  border-left: solid thin gray ;
  padding-left: 0.5ex }

table.docinfo {
  margin: 2em 4em }

table.footnote {
  border-left: solid thin black ;
  padding-left: 0.5ex }

td, th {
  padding-left: 0.5em ;
  padding-right: 0.5em ;
  vertical-align: baseline }

td.docinfo-name {
  font-weight: bold ;
  text-align: right }

td.field-name {
  font-weight: bold }
"""

class MStikiEntry(model.Model):
    def __init__(self, page, path, value):
        model.Model.__init__(self)
        self.page = page
        self.path = path
        self.value = value

    def getData(self):
        return self.value
        pass

    def setData(self, data):
        p = StikiPage(self.page.parent, self.path, data)
        self.page.parent.putChild(self.path, p)
        print "putChild with %s and %s on %s" % (self.path, p.id, self.page.parent.id)

class StikiPage(object, resource.Resource):
    __persistent__ = 1

    value = """
Uninitialised StikiPage
-----------------------

This StikiPage exists, but doesn't have any content in it."""

    def __init__(self, parent, path, value = None):
        self.errorpage = 0
        self.final = 0
        resource.Resource.__init__(self)
        self.parent = parent
        if value:
            self.value = value
        self.id = path
        base.setDirty(self, 1)

    def getChild(self, path, request):

        if path == "":
            return self

        fullpath = "/".join(request.acqpath[:-2])
        shortpath = request.acqpath[-2]

        self.model = {'entry': MStikiEntry(self, shortpath, self.value), 'title': "New StikiWiki Entry!"}

        if path == "edit":
            p = page.Page(self.model, templateFile="create.xhtml")
            p.template = entry_xhtml
            return p

        if path == "delete":
            return StikiErrorPage(self, path, request.uri)

        return StikiErrorPage(self, path, request.uri)

    def render(self, request):
        pub = core.Publisher()
        pub.set_reader('restructuredtext', None, 'restructuredtext')
        pub.set_writer('html')
        pub.set_options()
        pub.options._destination = ''
        pub.options.stylesheet = '/default.css'
        source = self.value
        uri = request.uri
        if not uri.endswith("/"):
            uri += "/"
        uri += "edit"
        source += """
        
`Edit this?`_
            
.. _`edit this?`: %s""" % (uri)
        pub.source = io.StringIO(pub.options, source = source)
        pub.destination = io.StringIO(pub.options)
        pub.options.report_level = 5
        pub.options.halt_level = 6
        warnings = StringIO()
        pub.options.warning_stream = warnings
        return pub.publish()

    def putChild(self, path, res):
        resource.Resource.putChild(self, path, res)
        base.setDirty(self, 1)

class StikiErrorPage(StikiPage):
    def __init__(self, parent, path, uri, final = 0):
        StikiPage.__init__(self, parent, path)
        self.errorpage = 1
        self.final = final
        self.value = """
No such entry
-------------

There is no such entry in this StikiWiki."""

        if not final:
            if not uri.endswith("/"):
                uri += "/"
            uri += "create"
            self.value += """  `Create it?`_
            
.. _`Create it?`: %s""" % (uri)

    def getChild(self, path, request):
        if self.final:
            return StikiErrorPage(self, path, request.uri, 1)

        if not self.final and path == "":
            self.final = 1
            return self

        fullpath = "/".join(request.acqpath[:-2])
        shortpath = request.acqpath[-2]

        self.model = {'entry': MStikiEntry(self, shortpath, self.value), 'title': "New StikiWiki Entry!"}

        if path == "create":
            p = page.Page(self.model, templateFile="create.xhtml")
            p.template = entry_xhtml
            return p

        #if path == "delete":
        #    return StikiErrorPage(self, path, request.uri)

        #if self.errorpage:
        #    self.final = 1

        return StikiErrorPage(self, path, request.uri, 1)


class StikiSite(object, resource.Resource):
    __persistent__ = 1

    def __init__(self):
        resource.Resource.__init__(self)
        self.id = "site"

    def getChild(self, path, request):
        if path == "":
            return self.getChildWithDefault("Index", request)
        return StikiErrorPage(self, path, request.uri)

    def putChild(self, path, res):
        resource.Resource.putChild(self, path, res)
        base.setDirty(self, 1)

class StikiService(app.ApplicationService):
    def startService(self):
        app.ApplicationService.startService(self)
        reactor.callLater(0, self.addDefaults)

    def addDefaults(self):
        db = self.serviceParent.getServiceNamed("cog").db

        if not db.registry.has_key("stikisite"):
            self.ss = StikiSite()
            db.registry.set("stikisite", self.ss)
        else:
            self.ss = db.registry.get("stikisite")
            self.ss._load()

        self.serviceParent.listenTCP(9080, server.Site(self.ss))

        if "Index" not in self.ss.listStaticNames():
            self.ss.putChild("Index", StikiPage(self.ss, "Index",
                """
Hello World!
-----------

Hey there!"""))

        if "default.css" not in self.ss.listStaticNames():
            self.ss.putChild("default.css", static.Data(default_css, "text/css"))

        db.flush()
        del db

class CogService(app.ApplicationService):
    def __init__(self, path, serviceName, serviceParent=None):
        app.ApplicationService.__init__(self, serviceName, serviceParent=serviceParent)
        self.path = path

    def startService(self):
        self.db = db.openDatabase(self.path)
        self.scheduledWork = reactor.callLater(60, self.doPeriodicWork)

    def stopService(self):
        self.scheduledWork.cancel()
        del self.scheduledWork
        self.db.close()
        del self.db

    def doPeriodicWork(self):
        delay = self.db.do_periodic_work()
        self.scheduledWork = reactor.callLater(delay, self.doPeriodicWork)

    def commit(self):
        self.db.flush()

def main():
    a = app.Application("stikiwiki")
    s = StikiService("stiki", a)
    c = CogService("/tmp/cog/", "cog", a)
    a.run(save=0)

if __name__ == "__main__":
    main()

From cce at clarkevans.com  Thu Mar 13 23:50:03 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Fri, 14 Mar 2003 06:50:03 +0000
Subject: [Twisted-Python] more thoughts on resumable async data flows
Message-ID: <20030314065003.GA99373@doublegemini.com>

Howdy.   I've made quite a few changes to flow.py and it's 
quickly approaching maturity.   To summarize, flow.py is a
way to express sequential, streaming data flows that are 
interruptable as a collection of small, atomic operations.
This is needed since sometimes an operation must block,
flow.py takes care of resuming your flow at a later time.

It's trivial, but here is an example...

    def printResult(data): print data
    def addOne(data): return  data+1
    def finished(): print "finished"
    def dataSource(data):  return [1, 1+data, 1+data*2]

    a = Flow()
    a.addBranch(dataSource, finished)
    a.addCallable(addOne)
    a.addCallable(printResult)
    a.execute(2)
    a.execute(8)

The above code constructs a flow, starting with a
'branch' operation that generates a series of events,
in this case, the lists [1,3,5] and then in a 
second execution, [1,9,17].  For each one of these 
events, a function addOne is called on them, and 
then the output of that function is directed to be printed. 

This mechanism works with generators...

    def simpleGenerator(data):
        for x in range(data):
            yield x

    b = Flow()
    b.addBranch(simpleGenerator)
    b.addCallable(printResult)
    b.execute(5)

While this may not be all that useful, what Flow brings
to the table is the ability to PauseFlow within a 
processing stage, for example

    class simpleIterator:
        def __init__(self, data):
            self.data = data
        def __iter__(self):
            return self
        def next(self):
            print "."
            if self.data < 0: raise StopIteration
            ret = self.data
            self.data -= 1
            #
            # imagine a blocking operation here... sometime
            if ret % 2:
                raise PauseFlow   # <= Goes to main event loop
            return ret

    c = Flow()
    c.addBranch(simpleIterator)
    c.addCallable(printResult)
    c.execute(5)

The above code produces 4, 2, 0 ; while this may not
be all that interesting, if there were N stages above
this code, they would all be resumed properly.  By 
tossing PauseFlow, the entire Flow event loop is 
stopped, and a reactor.callLater(0, loop-again) is
called; giving other events in the queue to work.

Thus, the flow construct provides a way to not only manage
a bunch of useful code snippets into a process; but more
importantly gives a way that the entire flow can be 
interruped and then resumed later when data arrives.

Anyway, it's in the sandbox if anyone wants to play...

Clark

P.S.  Unfortunately, it looks like PauseFlow doesn't
work in the context of a generator... pity.  Hopefully
I'm doing something wrong.





From kwaker at uch.net  Fri Mar 14 00:03:29 2003
From: kwaker at uch.net (Dmitry Litovchenko)
Date: Fri, 14 Mar 2003 09:03:29 +0200
Subject: [Twisted-Python] defer.AlreadyCalled error
Message-ID: <14142272484.20030314090329@uch.net>

Hello, all

Using my handcrafted socks5 client I've got the situation where

-- 
Best regards,
 Dmitry                          mailto:kwaker at uch.net




From kwaker at uch.net  Fri Mar 14 00:06:37 2003
From: kwaker at uch.net (Dmitry Litovchenko)
Date: Fri, 14 Mar 2003 09:06:37 +0200
Subject: [Twisted-Python] defer.AlreadyCalled error
Message-ID: <15242461005.20030314090637@uch.net>

Hello, all

Using my handcrafted socks5 client I've got the situation where my
ClientFactory.clientConnectionLost and clientConnectionFailed get
execution after errback is already called, so I get
defer.AlreadyCalled error.

The fastest thing that solves it was try/except with raising error
again if its not AlreadyCalled.

Is this solution correct or I should inherit some another method of
ClientFactory or ClientProtocol to intercept this situation before its
AlreadyCalled.

-- 
Best regards,
 Dmitry                          mailto:kwaker at uch.net




From magnus at thinkware.se  Fri Mar 14 05:33:28 2003
From: magnus at thinkware.se (Magnus Lycka)
Date: Fri, 14 Mar 2003 13:33:28 +0100
Subject: [Twisted-Python] EuroPython 2003
Message-ID: <5.1.0.14.0.20030314132808.03685d00@www.thinkware.se>

Are there any Twisted plans for EuroPython 2003 in June
among the gurus? I'd really like to see a Twisted tutorial
there.


-- 
Magnus Lycka, Thinkware AB
Alvans vag 99, SE-907 50 UMEA, SWEDEN
phone: int+46 70 582 80 65, fax: int+46 70 612 80 65
http://www.thinkware.se/  mailto:magnus at thinkware.se




From ivo at amaze.nl  Fri Mar 14 07:13:55 2003
From: ivo at amaze.nl (Ivo van der Wijk)
Date: Fri, 14 Mar 2003 15:13:55 +0100
Subject: [Twisted-Python] Re: Twisted and wxPython on windows
In-Reply-To: <b4mpf4$14u$1@main.gmane.org>; from lafou@wanadoo.fr on Wed, Mar 12, 2003 at 08:59:46AM +0100
References: <20030311152745.M8571@amaze.nl> <200303110946.23356.uwe@oss4u.com> <b4mpf4$14u$1@main.gmane.org>
Message-ID: <20030314151355.F8571@amaze.nl>

Thomas, could you please send me a link to your win32guireactor / posting?
I'm not able to find anything google.

Also, I'm not really impressed by the basic Twisted support for wxPython -
it basically does a polling loop. Are better solutions impossible?

Cheers

	Ivo

-- 
Drs. I.R. van der Wijk                                      -=-              
Brouwersgracht 132                             Amaze Internet Services V.O.F.
1013 HA Amsterdam, NL                                       -=-              
T +31-20-4688336         F +31-20-4688337        Linux/Web/Zope/SQL/MMBase   
W http://www.amaze.nl    E info at amaze.nl             Network Solutions        
W http://vanderwijk.info E ivo at amaze.nl                 Consultancy          
PGP http://vanderwijk.info/pgp                              -=-              



From theller at python.net  Fri Mar 14 08:03:46 2003
From: theller at python.net (Thomas Heller)
Date: 14 Mar 2003 16:03:46 +0100
Subject: [Twisted-Python] Re: Twisted and wxPython on windows
References: <20030311152745.M8571@amaze.nl> <200303110946.23356.uwe@oss4u.com> <b4mpf4$14u$1@main.gmane.org> <20030314151355.F8571@amaze.nl>
Message-ID: <fzpq9ei5.fsf@python.net>

[posted and mailed]
Ivo van der Wijk <ivo at amaze.nl> writes:

> Thomas, could you please send me a link to your win32guireactor / posting?
> I'm not able to find anything google.

http://twistedmatrix.com/pipermail/twisted-python/2003-February/002911.html

> 
> Also, I'm not really impressed by the basic Twisted support for wxPython -
> it basically does a polling loop. Are better solutions impossible?
> 

IMO the twisted wxreactor (or what it's called) does it wrong (Note that
I'm only talking about Windows here, I have no clue about Linux or other
systems): it tries to integrate the wxPython eventloop into twisted's
event loop, while it should be exactly reverse: the twisted 'events'
must be passed through wxPython's event loop, which is a Windows
messageloop.  See also the description in the post mentioned above.
And it *should* also work unchanged with other GUI toolkits, Tkinter
for example, although I didn't try this.

But win32guireactor is incomplete and not finished, read the source to
find out more.

Thomas




From nbm at mithrandr.moria.org  Fri Mar 14 08:23:52 2003
From: nbm at mithrandr.moria.org (Neil Blakey-Milner)
Date: Fri, 14 Mar 2003 17:23:52 +0200
Subject: [Twisted-Python] Redirecting after form completion using woven
Message-ID: <20030314152352.GA90615@mithrandr.moria.org>

Hi,

Two things:

Firstly, using Twisted 1.0.3, when form submissions has occurred, it
seems that the getData to build the form is done before the setData to
make the changes.  This means that the _old_ information is in the
forms, which is somewhat confusing.  For an example, use stikiwiki and
edit a page.  It's entirely possible I'm using things incorrectly,
though.

Secondly, how would I organise for a redirect to another page after my
form has been parsed and data handled with setData?  Again, stikiwiki
probably wants to redirect people to the page they've just edited or
created instead of giving them an opportunity to edit it again.

Thanks,

Neil
-- 
Neil Blakey-Milner
nbm at mithrandr.moria.org



From twisted at itamarst.org  Fri Mar 14 09:20:13 2003
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 14 Mar 2003 11:20:13 -0500
Subject: [Twisted-Python] Re: Twisted and wxPython on windows
In-Reply-To: <fzpq9ei5.fsf@python.net>
References: <20030311152745.M8571@amaze.nl>
	<200303110946.23356.uwe@oss4u.com>
	<b4mpf4$14u$1@main.gmane.org>
	<20030314151355.F8571@amaze.nl>
	<fzpq9ei5.fsf@python.net>
Message-ID: <20030314112013.75d3cc18.twisted@itamarst.org>

On 14 Mar 2003 16:03:46 +0100
Thomas Heller <theller at python.net> wrote:

> IMO the twisted wxreactor (or what it's called) does it wrong (Note
> that I'm only talking about Windows here, I have no clue about Linux
> or other systems): it tries to integrate the wxPython eventloop into
> twisted's event loop, while it should be exactly reverse: the twisted
> 'events' must be passed through wxPython's event loop, which is a
> Windows messageloop.  See also the description in the post mentioned
> above. And it *should* also work unchanged with other GUI toolkits,
> Tkinter for example, although I didn't try this.

I will at some point investigate this as a replacement for the current
wx support.



From dp at twistedmatrix.com  Fri Mar  7 11:35:18 2003
From: dp at twistedmatrix.com (Donovan Preston)
Date: Fri, 7 Mar 2003 10:35:18 -0800
Subject: [Twisted-Python] Redirecting after form completion using woven
In-Reply-To: <20030314152352.GA90615@mithrandr.moria.org>
Message-ID: <8BE6AEC0-50CB-11D7-9B7F-000393B3EC2C@twistedmatrix.com>


On Friday, March 14, 2003, at 07:23 AM, Neil Blakey-Milner wrote:

> Hi,
>
> Two things:
>
> Firstly, using Twisted 1.0.3, when form submissions has occurred, it
> seems that the getData to build the form is done before the setData to
> make the changes.  This means that the _old_ information is in the
> forms, which is somewhat confusing.  For an example, use stikiwiki and
> edit a page.  It's entirely possible I'm using things incorrectly,
> though.

Here is what is happening: Since the views and controllers are 
triggered by traversing the DOM tree, if the view is above the 
controller, the view will render with the old data before the 
controller gets a chance to update the model with the new data. There 
are a couple of solutions, and the redirect is the best solution for 
you.

1) Redirect the user after a successful controller commit, either to 
the same page, or a different page. This causes the page to get 
rerendered, and the new data will be available.

2) Notify the model that it's data has changed. The model will pass the 
notification on to the views which rely on the data, and the views will 
rerender themselves. There is an example of this technique in 
NewReality, and also in the unittests for woven.

>
> Secondly, how would I organise for a redirect to another page after my
> form has been parsed and data handled with setData?  Again, stikiwiki
> probably wants to redirect people to the page they've just edited or
> created instead of giving them an opportunity to edit it again.

Here's some code I use to do redirects; you can modify it for your 
needs. The only issue then is calling this code when the controller 
commits; if you're using input.Anything, you don't really have control 
over what happens when the controller gets some data and calls setData. 
I'll reread your code and come up with a suggestion.

def redirectToParent(request, now=1):
     """Redirect the current request to the immediate parent URL of the
     current request URL. Useful for redirecting from a tab URL to the
     main tab.
     """
     parent = request.pathRef().parentRef()
     method, host, port = request.getHost()
     url = "http%s://%s%s/%s/" % (method is 'SSL' and 's' or '',
         getattr(request.site, 'serverName', host),
         getattr(request.site, 'serverPort', port) is 80 and '' or ':' + 
str(port),
             '/'.join(parent.path))
     if now:
         request.redirect(url)
     return url


>
> Thanks,
>
> Neil
> -- 
> Neil Blakey-Milner
> nbm at mithrandr.moria.org
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: text/enriched
Size: 3709 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030307/960552ce/attachment-0002.bin>

From andrew-twisted at puzzling.org  Fri Mar 14 18:29:54 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sat, 15 Mar 2003 12:29:54 +1100
Subject: [Twisted-Python] defer.AlreadyCalled error
In-Reply-To: <15242461005.20030314090637@uch.net>
References: <15242461005.20030314090637@uch.net>
Message-ID: <20030315012954.GH4315@frobozz.local>

On Fri, Mar 14, 2003 at 09:06:37AM +0200, Dmitry Litovchenko wrote:
> Hello, all
> 
> Using my handcrafted socks5 client I've got the situation where my
> ClientFactory.clientConnectionLost and clientConnectionFailed get
> execution after errback is already called, so I get
> defer.AlreadyCalled error.
> 
> The fastest thing that solves it was try/except with raising error
> again if its not AlreadyCalled.
> 
> Is this solution correct or I should inherit some another method of
> ClientFactory or ClientProtocol to intercept this situation before its
> AlreadyCalled.

Your solution is fine.

I can think of another approach though, that is almost certainly too complex
and overkill for your problem, just in case you are interested:

Perhaps you could use a DeferredList instead, with fireOnOneCallback=1 (so
that results get passed immediately) and fireOnOneErrback=1 (so that errors
happen immediately).  

So what you'd do is create a DeferredList with two Deferreds:
  1. the Deferred you are using already
  2. a new Deferred that clientConnectionLost/Failed will call

Then add your callbacks and errbacks to the DeferredList instead of the
original Deferred.  DeferredList with fireOnOneErrback=1 will call its
errbacks as soon as any of its Deferreds errback, but won't raise
AlreadyCalled error no matter how many of its Deferreds errback.

The reason for also setting fireOnOneCallback=1 is to ensure that the
DeferredList doesn't wait for the second Deferred to callback, which should
never happen.

Basically, a DeferredList([...], fireOnOneCallback=1, fireOnOneErrback=1)
has the odd behaviour of effectively taking the first result (good or bad)
to arrive, and ignoring the rest.

In short, I think you're better off with the try/except :)

-Andrew.




From ivo at amaze.nl  Sat Mar 15 04:31:22 2003
From: ivo at amaze.nl (Ivo van der Wijk)
Date: Sat, 15 Mar 2003 12:31:22 +0100
Subject: [Twisted-Python] Re: Twisted and wxPython on windows
In-Reply-To: <fzpq9ei5.fsf@python.net>; from theller@python.net on Fri, Mar 14, 2003 at 04:03:46PM +0100
References: <20030311152745.M8571@amaze.nl> <200303110946.23356.uwe@oss4u.com> <b4mpf4$14u$1@main.gmane.org> <20030314151355.F8571@amaze.nl> <fzpq9ei5.fsf@python.net>
Message-ID: <20030315123122.H8571@amaze.nl>

On Fri, Mar 14, 2003 at 04:03:46PM +0100, Thomas Heller wrote:
> [posted and mailed]
> Ivo van der Wijk <ivo at amaze.nl> writes:
> 
> > Thomas, could you please send me a link to your win32guireactor / posting?
> > I'm not able to find anything google.
> 
> http://twistedmatrix.com/pipermail/twisted-python/2003-February/002911.html
> 
> > 
> > Also, I'm not really impressed by the basic Twisted support for wxPython -
> > it basically does a polling loop. Are better solutions impossible?
> > 
> 
> IMO the twisted wxreactor (or what it's called) does it wrong (Note that
> I'm only talking about Windows here, I have no clue about Linux or other
> systems): it tries to integrate the wxPython eventloop into twisted's
> event loop, while it should be exactly reverse: the twisted 'events'
> must be passed through wxPython's event loop, which is a Windows
> messageloop.  

I agree - this is how the other reactors (gtk, qt) work as well. I assume
wxWindows doesn't have enough 'hooks' by default to create a reactor for it?

> See also the description in the post mentioned above.
> And it *should* also work unchanged with other GUI toolkits, Tkinter
> for example, although I didn't try this.
> 
> But win32guireactor is incomplete and not finished, read the source to
> find out more.

Well, I'm completely unfamiliar with the win32 api. Could you give any hints
on what functionality is lacking? 

Cheers

	Ivo


-- 
Drs. I.R. van der Wijk                                      -=-              
Brouwersgracht 132                             Amaze Internet Services V.O.F.
1013 HA Amsterdam, NL                                       -=-              
T +31-20-4688336         F +31-20-4688337        Linux/Web/Zope/SQL/MMBase   
W http://www.amaze.nl    E info at amaze.nl             Network Solutions        
W http://vanderwijk.info E ivo at amaze.nl                 Consultancy          
PGP http://vanderwijk.info/pgp                              -=-              



From fig at monitor.net  Sat Mar 15 10:13:45 2003
From: fig at monitor.net (Stephen Figgins)
Date: Sat, 15 Mar 2003 11:13:45 -0600
Subject: [Twisted-Python] Need a mother?
Message-ID: <3E735F49.2030508@monitor.net>

I am evaluating twisted matrix as the framework for an enterprise 
solution, a workflow/inventory/point of sale, does-all-kinds-of-things 
system.  It needs to be highly secure, supporting SSL and encryption, 
and some decent Auth utilities.   Our inclination is toward an n-tier 
solution for each store, with some connectivity between stores in a 
chain or under some kind of central management.

Because there are many pieces to this puzzle, lots of optional services 
a system may need to provide and some specialized interfaces, my thought 
has been to take a component approach.  This way we can drop in new 
components or update components as needed.

We would like some way to centrally manage and load balance those 
components, within a single host as well as over multiple hosts.  I am 
beginning to grasp how PB works, some. What I don't see is any kind of 
central registry for those components.  It looks like the client needs 
to know the host and port of the component it wants in order to be able 
to use it.   It looks to me like twisted.sister is meant to fulfill both 
of these functions, centralizing login, load balancing, name services, 
connecting clients to components.

I think a mother is just the thing I need.  Is it?

If so, then how should I go about learning to use it.  (I can create a 
parent tap easily enough with mktap, but I am uncertain how to customize 
it for our own authentication and encryption needs.)  Anyone have 
examples of twisted sister in action?

How far off are we from a stable implementation of twisted.sister?  Our 
goal for the system we are developing is to roll it out in about a year. 
      It would be nice if the framework components we used were at least 
semi-stable.

Based on this very rough description, does twisted sound like the 
framework for me?

Thanks for any assistance!

-Stephen




From exarkun at intarweb.us  Sun Mar 16 11:53:54 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Sun, 16 Mar 2003 13:53:54 -0500
Subject: [Twisted-Python] Need a mother?
In-Reply-To: <3E735F49.2030508@monitor.net>
References: <3E735F49.2030508@monitor.net>
Message-ID: <20030316185354.GA20366@meson.dyndns.org>

On Sat, Mar 15, 2003 at 11:13:45AM -0600, Stephen Figgins wrote:
> I am evaluating twisted matrix as the framework for an enterprise 
> solution, a workflow/inventory/point of sale, does-all-kinds-of-things 
> system.  It needs to be highly secure, supporting SSL and encryption, 
> and some decent Auth utilities.   Our inclination is toward an n-tier 
> solution for each store, with some connectivity between stores in a 
> chain or under some kind of central management.
> 
> Because there are many pieces to this puzzle, lots of optional services 
> a system may need to provide and some specialized interfaces, my thought 
> has been to take a component approach.  This way we can drop in new 
> components or update components as needed.
> 
> We would like some way to centrally manage and load balance those 
> components, within a single host as well as over multiple hosts.  I am 
> beginning to grasp how PB works, some. What I don't see is any kind of 
> central registry for those components.  It looks like the client needs 
> to know the host and port of the component it wants in order to be able 
> to use it.   It looks to me like twisted.sister is meant to fulfill both 
> of these functions, centralizing login, load balancing, name services, 
> connecting clients to components.
> 
> I think a mother is just the thing I need.  Is it?
> 
> If so, then how should I go about learning to use it.  (I can create a 
> parent tap easily enough with mktap, but I am uncertain how to customize 
> it for our own authentication and encryption needs.)  Anyone have 
> examples of twisted sister in action?
> 
> How far off are we from a stable implementation of twisted.sister?  Our 
> goal for the system we are developing is to roll it out in about a year. 
>      It would be nice if the framework components we used were at least 
> semi-stable.

  Since no one else has jumped in yet, I'll tell you what I know (not a
lot).  As it stands now, Twisted.sister has a problem with authorizers. 
Some stuff it depends on got changed around, and no one brought Sister up to
date.  I posted a patch that fixes it to the list a while back, but it
seemed like a bad hack around a more basic problem.  No one responded, so I
never checked it in (I can make it available if you want and can't find it
in the archives).

  This is just one symptom of the real problem, I think: Twisted.sister has
no real users right now.  Twisted practices XP development most of the time,
which means the code that no one really has a use case for can sometimes get
into pretty bad shape.

  I might be overstating the problems with Sister - as I said, I don't know
too much about it - but in any case, I think many of the other features
Twisted offers *do* make it suited for your goal.  With a real user with
real use cases, Sister would definitely see improvement (You'd yell at us
when it broke, or if you're more proactive than that, you'd give us unit
tests for it ;).

  So what's my point?  Ahh, Twisted is good for this, but Sister might not
be ready for what you need it to do, because no one has asked Sister to do
*anything* before.  Give it a nudge in the right direction and it will
probably turn into what you need, or if it doesn't, doing what you need
"from scratch" (on top of Twisted) shouldn't be much more effort.

  Hope this helps,

  Jp
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030316/abaf62e0/attachment.sig>

From sean at twistedmatrix.com  Sun Mar 16 12:21:21 2003
From: sean at twistedmatrix.com (Sean Riley)
Date: Sun, 16 Mar 2003 13:21:21 -0600
Subject: [Twisted-Python] Need a mother?
In-Reply-To: <20030316185354.GA20366@meson.dyndns.org>
Message-ID: <HOEEKPCOKELHCNIJNMAGMECKCKAA.sean@twistedmatrix.com>

A little history about the sister code...

I (along with Glyph) was the original developer of this code for a game
project. At one stage, it was fully integrated with authorizers and
enterprise and I had distributed logins working, spawning of "game servers"
on multiple machines in a cluster, object loading from a database, and
centralized locking of resources across the distributed system.  I had a set
of twisted servers running my game world across three different machines on
different operating systems almost transparently to the application code.

Unfortunately, I am no longer at that company on that project and no-one is
using or really maintaining the sister code. Jp is right in saying that it
needs users - it really also needs developers. It's probably not a huge task
to bring it back up to date, but i admit I haven't looked at the code in
about four or five months and don't have the time or motivation to spend on
it these days, but i would be willing to answer any questions if that is
useful.

Also, it's original purpose was actually more to distribute a single type of
application rather than to connect a set of different applications as the
origin poster suggests.

Sean.

-----Original Message-----
From: twisted-python-admin at twistedmatrix.com
[mailto:twisted-python-admin at twistedmatrix.com]On Behalf Of Jp Calderone
Sent: Sunday, March 16, 2003 12:54 PM
To: twisted-python at twistedmatrix.com
Subject: Re: [Twisted-Python] Need a mother?


On Sat, Mar 15, 2003 at 11:13:45AM -0600, Stephen Figgins wrote:
> I am evaluating twisted matrix as the framework for an enterprise
> solution, a workflow/inventory/point of sale, does-all-kinds-of-things
> system.  It needs to be highly secure, supporting SSL and encryption,
> and some decent Auth utilities.   Our inclination is toward an n-tier
> solution for each store, with some connectivity between stores in a
> chain or under some kind of central management.
>
> Because there are many pieces to this puzzle, lots of optional services
> a system may need to provide and some specialized interfaces, my thought
> has been to take a component approach.  This way we can drop in new
> components or update components as needed.
>
> We would like some way to centrally manage and load balance those
> components, within a single host as well as over multiple hosts.  I am
> beginning to grasp how PB works, some. What I don't see is any kind of
> central registry for those components.  It looks like the client needs
> to know the host and port of the component it wants in order to be able
> to use it.   It looks to me like twisted.sister is meant to fulfill both
> of these functions, centralizing login, load balancing, name services,
> connecting clients to components.
>
> I think a mother is just the thing I need.  Is it?
>
> If so, then how should I go about learning to use it.  (I can create a
> parent tap easily enough with mktap, but I am uncertain how to customize
> it for our own authentication and encryption needs.)  Anyone have
> examples of twisted sister in action?
>
> How far off are we from a stable implementation of twisted.sister?  Our
> goal for the system we are developing is to roll it out in about a year.
>      It would be nice if the framework components we used were at least
> semi-stable.

  Since no one else has jumped in yet, I'll tell you what I know (not a
lot).  As it stands now, Twisted.sister has a problem with authorizers.
Some stuff it depends on got changed around, and no one brought Sister up to
date.  I posted a patch that fixes it to the list a while back, but it
seemed like a bad hack around a more basic problem.  No one responded, so I
never checked it in (I can make it available if you want and can't find it
in the archives).

  This is just one symptom of the real problem, I think: Twisted.sister has
no real users right now.  Twisted practices XP development most of the time,
which means the code that no one really has a use case for can sometimes get
into pretty bad shape.

  I might be overstating the problems with Sister - as I said, I don't know
too much about it - but in any case, I think many of the other features
Twisted offers *do* make it suited for your goal.  With a real user with
real use cases, Sister would definitely see improvement (You'd yell at us
when it broke, or if you're more proactive than that, you'd give us unit
tests for it ;).

  So what's my point?  Ahh, Twisted is good for this, but Sister might not
be ready for what you need it to do, because no one has asked Sister to do
*anything* before.  Give it a nudge in the right direction and it will
probably turn into what you need, or if it doesn't, doing what you need
"from scratch" (on top of Twisted) shouldn't be much more effort.

  Hope this helps,

  Jp




From cce at clarkevans.com  Sun Mar 16 23:42:17 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Mon, 17 Mar 2003 06:42:17 +0000
Subject: [Twisted-Python] Re-Occuring Operations
Message-ID: <20030317064217.GA9305@doublegemini.com>

Hello.   I was wondering if there is anything which handles 
re-occuring functions; that is, an auto-rescheduler or
something of that nature.   Here is what I came up with,
I'm sure there is a shorter 'lambda' form, but I was
going for clarity here.


  class MultiRun:
      """ apply a callable while it returns true """
      def __init__(self, callable, waitInterval = 0):
          self.callable = callable
          self.waitInterval = waitInterval
          self.iterate(starting = 1)
      def iterate(self, starting = 0):
          if starting or self.callable():
              from twisted.internet import reactor
              reactor.callLater(self.waitInterval, self.iterate)


Something like this would be useful, it's already emerged in
two different contexts in my code:

   (a) a background operation (which never returns true)
       that runs every 5 minutes, 

   (b) an operation which keeps pooling a resource, if 
       the resource is busy it returns true, otherwise 
       it processes the resource and returns false to
       signal that it is done

Perhaps calling this an "Operation" would be good.

Best,

clark



From andrew-twisted at puzzling.org  Mon Mar 17 05:46:45 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 17 Mar 2003 23:46:45 +1100
Subject: [Twisted-Python] Re-Occuring Operations
In-Reply-To: <20030317064217.GA9305@doublegemini.com>
References: <20030317064217.GA9305@doublegemini.com>
Message-ID: <20030317124645.GC22628@frobozz.local>

On Mon, Mar 17, 2003 at 06:42:17AM +0000, Clark C. Evans wrote:
> Hello.   I was wondering if there is anything which handles 
> re-occuring functions; that is, an auto-rescheduler or
> something of that nature.   Here is what I came up with,
> I'm sure there is a shorter 'lambda' form, but I was
> going for clarity here.

There is.  This is copied straight from doc/howto/time.html:

"""
    If we want a task to run every X seconds repeatedly, we can
    just re-add it every time it's run:

        from twisted.internet import reactor
        
        def runEverySecond():
            print "a second has passed"
            reactor.callLater(1, runEverySecond)
        
        reactor.callLater(1, runEverySecond)
"""


>   class MultiRun:
>       """ apply a callable while it returns true """
>       def __init__(self, callable, waitInterval = 0):
>           self.callable = callable
>           self.waitInterval = waitInterval
>           self.iterate(starting = 1)
>       def iterate(self, starting = 0):
>           if starting or self.callable():
>               from twisted.internet import reactor
>               reactor.callLater(self.waitInterval, self.iterate)

Or:

    from __future__ import nested_scopes  # For you retro Python 2.1 hippies
    
    def multiRun(interval, func):
        from twisted.internet import reactor
        def iterate():
            if func():
                reactor.callLater(interval, iterate)
        iterate()

Except to fit in with the Twisted naming scheme, you'd have to call it
'mindlessReruns' ;)

On the other hand, being a fairly straightforward six-line function, it
probably doesn't need to be in Twisted.

> Something like this would be useful, it's already emerged in
> two different contexts in my code:
> 
>    (a) a background operation (which never returns true)
>        that runs every 5 minutes, 

That's amply catered for by the first example, possibly with a try/finally
thrown in.

>    (b) an operation which keeps pooling a resource, if 
>        the resource is busy it returns true, otherwise 
>        it processes the resource and returns false to
>        signal that it is done

I don't quite understand your terminology.  I think you mean there's a queue
of operations that can only be processed if there's some sort of resource
available to process them, and you wish to occasionally poll the resource
pool to see if there's one free.  If so, it's probably better to arrange
your code to avoid polling, i.e. make the resource pool check the queue
automatically when a resource is freed.  This reduces latency and is usually
simpler.

Regardless, I'm not sure this deserves or requires special support in
Twisted.  Merely documenting the necessary idioms is probably better.  After
all there are lots of possible small variations (e.g. dynamically varying
the interval based on the function's return value) that would be tedious to
build into a generic class or function, but are dead simple to build into
your own six-line implementation. 

Or perhaps I'm wrong, and there's a nice class with lots of use-cases just
waiting to be implemented :)

-Andrew.




From andrew-twisted at puzzling.org  Mon Mar 17 06:19:16 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 18 Mar 2003 00:19:16 +1100
Subject: [Twisted-Python] Re-Occuring Operations
In-Reply-To: <20030317124645.GC22628@frobozz.local>
References: <20030317064217.GA9305@doublegemini.com> <20030317124645.GC22628@frobozz.local>
Message-ID: <20030317131916.GD22628@frobozz.local>

On Mon, Mar 17, 2003 at 11:46:45PM +1100, Andrew Bennetts wrote:
> 
> Or perhaps I'm wrong, and there's a nice class with lots of use-cases just
> waiting to be implemented :)

Oh, and I forgot to mention: we used to have such a beast, called Delayed.
It was awkward and confusing.  So any solution you propose will have to, as
a minimum, suck less than Delayeds did :)

-Andrew.




From fig at monitor.net  Mon Mar 17 07:47:28 2003
From: fig at monitor.net (Stephen R. Figgins)
Date: Mon, 17 Mar 2003 08:47:28 -0600
Subject: [Twisted-Python] Thinking Twisted (was Re: Need a mother?)
In-Reply-To: <HOEEKPCOKELHCNIJNMAGMECKCKAA.sean@twistedmatrix.com>
Message-ID: <BA9B3C20.D527%fig@monitor.net>

Thanks for your responses, Jp and  Sean.

I hear you saying that if we need twisted.sister, we'll need to do some work
on it first.  It's a fixer-upper.  If we use it, and contribute to its
development, we might get some help from the twisted developers, who have
largely neglected it because no one is currently using it.

It also sounds like the primary task I want to put it towards, a central
naming service/message queue sort of thing may not be the right match for
twisted.sister.  Though if fixed up, I sounds like it could load balance
such a registry or an overtaxed component on my system.

I am beginning to question my model of what the system should look like.
This function seems basic to a distributed component system with a dozen or
more components.   Is anyone using Twisted.spread to implement such a
system?

Maybe my thoughts on this are too patterned on Corba.  I am seeing Twisted
as a lightweight asynchronous event-driven alternative to Corba, so I keep
trying to map it to that: where is the POA?  Where is the name server?

I would sure appreciate any help wrapping my head around the twisted way of
doing things.  The problem set is:

I want to create an n-tier application to manage stores in a vertical market
that has many changing yet strict federally mandated security requirements,
many interfaces to a variety of equipment (signature capture devices,
dispensing devices, etc.), and interoperate with different B2B business
partners.   

There is a limited set of services all stores will need, but each
store/chain will have its own service needs.  All stores/chains will need a
common subset of services, but will also need a specialized set of extended
services depending on their equipment, workflow and business partners.  The
clients need to be GUI and curses applications on Windows/Linux though
possibly with an option for some thin web browser clients.   Instead of
thousands of clients hitting a central application intermittently (like a
web server) Each store will have maybe a couple dozen clients that will
interact with the server almost constantly throughout the day.

It would be nice if the system could scale up (to multi-processor systems)
as well as out (to a server farm) for larger chains which may want central
hosting (though probably serving no more than a couple hundred stores.)


What would be the twisted approach to this?


Thanks, 

Stephen




From twisted at itamarst.org  Mon Mar 17 09:07:08 2003
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 17 Mar 2003 11:07:08 -0500
Subject: [Twisted-Python] Thinking Twisted (was Re: Need a mother?)
In-Reply-To: <BA9B3C20.D527%fig@monitor.net>
References: <HOEEKPCOKELHCNIJNMAGMECKCKAA.sean@twistedmatrix.com>
	<BA9B3C20.D527%fig@monitor.net>
Message-ID: <20030317110708.3b50c95d.twisted@itamarst.org>

On Mon, 17 Mar 2003 08:47:28 -0600
"Stephen R. Figgins" <fig at monitor.net> wrote:

> Maybe my thoughts on this are too patterned on Corba.  I am seeing
> Twisted as a lightweight asynchronous event-driven alternative to
> Corba, so I keep trying to map it to that: where is the POA?  Where is
> the name server?

Standard Twisted Feature Request Answer:

Basically, no one has written one yet. Unfortanutely, we don't have the
time to write every single a thing a distributed system might need, this
being an open source project. So when someone eventually needs one, it
will get written. Probably by them (i.e. by you?) although you could
also pay someone to implement it. Otherwise you could just wait until
one of the developers feels the need for a lookup service.

Oh, and I'd love if it could use zeroconf in addition to a PB based
lookup mechanism.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting
***> Stop the war: http://unitedforpeace.org/ <***



From bob at redivi.com  Mon Mar 17 09:51:45 2003
From: bob at redivi.com (Bob Ippolito)
Date: Mon, 17 Mar 2003 11:51:45 -0500
Subject: [Twisted-Python] Thinking Twisted (was Re: Need a mother?)
In-Reply-To: <20030317110708.3b50c95d.twisted@itamarst.org>
Message-ID: <BCDFA67C-5898-11D7-BA18-000A95686CD8@redivi.com>

On Monday, Mar 17, 2003, at 11:07 America/New_York, Itamar 
Shtull-Trauring wrote:

> Oh, and I'd love if it could use zeroconf in addition to a PB based
> lookup mechanism.

Yeah, zeroconf would be great.. It's already really easy to publish and 
discover services using the PyObjC bridge, but only on OS X of course.

-bob




From fig at monitor.net  Mon Mar 17 10:36:23 2003
From: fig at monitor.net (Stephen Figgins)
Date: Mon, 17 Mar 2003 11:36:23 -0600
Subject: [Twisted-Python] Thinking Twisted (was Re: Need a mother?)
References: <HOEEKPCOKELHCNIJNMAGMECKCKAA.sean@twistedmatrix.com>	<BA9B3C20.D527%fig@monitor.net> <20030317110708.3b50c95d.twisted@itamarst.org>
Message-ID: <3E760797.80100@monitor.net>

Itamar Shtull-Trauring wrote:
> "Stephen R. Figgins" <fig at monitor.net> wrote:
>>Maybe my thoughts on this are too patterned on Corba.  I am seeing
>>Twisted as a lightweight asynchronous event-driven alternative to
>>Corba, so I keep trying to map it to that: where is the POA?  Where is
>>the name server?
> 
> Standard Twisted Feature Request Answer:

I hadn't meant those questions as requests for features.  I'm think my 
expecting these things to exist may be what is tripping me up.  Instead 
of trying to make twisted fit my mental model of distributed computing, 
I want to know the twisted approach to my problem.  Should I consider 
adding the functionality that fit's my model or is there another 
approach I should use instead?

By the way, I will let the company I am working with know about Zoteca. 
  HIPAA is an issue they need to work with on this project, and if they 
do go with a twisted solution, they might be interested in ZBE.

-Stephen








From cce at clarkevans.com  Mon Mar 17 11:55:49 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Mon, 17 Mar 2003 18:55:49 +0000
Subject: [Twisted-Python] Re-Occuring Operations
In-Reply-To: <20030317124645.GC22628@frobozz.local>
References: <20030317064217.GA9305@doublegemini.com> <20030317124645.GC22628@frobozz.local>
Message-ID: <20030317185549.GA13998@doublegemini.com>

On Mon, Mar 17, 2003 at 11:46:45PM +1100, Andrew Bennetts wrote:
| On the other hand, being a fairly straightforward six-line function, it
| probably doesn't need to be in Twisted.

Yes, it is a straight-foward 6-liner, but there are quite 
a few 6-liners in Twisted.  Anyway, I think it'd be useful.

| >    (b) an operation which keeps pooling a resource, if 
| >        the resource is busy it returns true, otherwise 
| >        it processes the resource and returns false to
| >        signal that it is done
| 
| I don't quite understand your terminology.  I think you mean there's a queue
| of operations that can only be processed if there's some sort of resource
| available to process them, and you wish to occasionally poll the resource
| pool to see if there's one free.  If so, it's probably better to arrange
| your code to avoid polling, i.e. make the resource pool check the queue
| automatically when a resource is freed.  This reduces latency and is usually
| simpler.

Cool.  Is there an example?  I have a database select statement,
and I need to reschedule several operations till it produces
information.  Further, it may consume faster than the database
can produce rows; so it'be be nice to have it add back to the
wait queue every once and a while.  

For a simple example, assume I have an array; and a thread
which is populating the array, using callFromThread(array.append, value)
in the main IO thread, I'd like to have my function wait till
the array has items in it, and pause when the array is empty.
I'm using the array as the 'input queue' so to speak.

I'd love to know the 'preferred' way to do this, right now
I'm pooling the array to see if it's size is > 0.  Not clean.

| Regardless, I'm not sure this deserves or requires special support in
| Twisted.  Merely documenting the necessary idioms is probably better.  After
| all there are lots of possible small variations (e.g. dynamically varying
| the interval based on the function's return value) that would be tedious to
| build into a generic class or function, but are dead simple to build into
| your own six-line implementation. 

I don't think that there are many permutations on this case; and
yes, allowing the function to specify how long to wait would be
a perfect example.   In fact, it fits in really nicely with
the iterator pattern; make the loop break with a StopIteration
exception.  And, take the return value of the function to 
figure out how long from now the next invocation should be;
None could be equivalent to 0.

| Or perhaps I'm wrong, and there's a nice class with lots of use-cases just
| waiting to be implemented :)

The advantage of having a standard 6-liner is that it helps
in documentation this seems to be common enough that it
reoccurs in various projects.

Clark



From radix at twistedmatrix.com  Mon Mar 17 12:51:26 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 17 Mar 2003 14:51:26 -0500
Subject: [Twisted-Python] Re-Occuring Operations
In-Reply-To: <20030317064217.GA9305@doublegemini.com>
References: <20030317064217.GA9305@doublegemini.com>
Message-ID: <20030317195126.GB911@radii>

On Mon, Mar 17, 2003 at 06:42:17AM +0000, Clark C. Evans wrote:
> Hello.   I was wondering if there is anything which handles 
> re-occuring functions; that is, an auto-rescheduler or
> something of that nature.   Here is what I came up with,
> I'm sure there is a shorter 'lambda' form, but I was
> going for clarity here.

I think we need to add a new rule to the coding standard.

"Don't add new utility code that nothing else in Twisted uses"


-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From rich at enflyer.com  Mon Mar 17 10:37:08 2003
From: rich at enflyer.com (Rich Cavanaugh)
Date: Mon, 17 Mar 2003 12:37:08 -0500
Subject: [Twisted-Python] Thinking Twisted (was Re: Need a mother?)
In-Reply-To: <BCDFA67C-5898-11D7-BA18-000A95686CD8@redivi.com>
References: <BCDFA67C-5898-11D7-BA18-000A95686CD8@redivi.com>
Message-ID: <3E7607C4.6000603@enflyer.com>

Bob Ippolito wrote:
> Yeah, zeroconf would be great.. It's already really easy to publish and 
> discover services using the PyObjC bridge, but only on OS X of course.
> 

There's a nice ZeroConf discovery implementation in pure python located 
at 
http://radio.weblogs.com/0105002/stories/2003/01/06/multicastDnsServiceDiscoverForPython.html

I've been playing with it and it seems to work quite well.

rich




From twisted at itamarst.org  Mon Mar 17 19:44:34 2003
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 17 Mar 2003 21:44:34 -0500
Subject: [Twisted-Python] Thinking Twisted (was Re: Need a mother?)
In-Reply-To: <3E7607C4.6000603@enflyer.com>
References: <BCDFA67C-5898-11D7-BA18-000A95686CD8@redivi.com>
	<3E7607C4.6000603@enflyer.com>
Message-ID: <20030317214434.252c9cda.twisted@itamarst.org>

On Mon, 17 Mar 2003 12:37:08 -0500
Rich Cavanaugh <rich at enflyer.com> wrote:

> There's a nice ZeroConf discovery implementation in pure python
> located at 
> http://radio.weblogs.com/0105002/stories/2003/01/06/multicastDnsServiceDiscoverForPython.html
> 
> I've been playing with it and it seems to work quite well.

Except that it's licensed under "non-commercial use only", and uses
threads, so it's not much help for us (other than being a nicer way to
grok the protocol.)



From tv at twistedmatrix.com  Tue Mar 18 10:29:10 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Tue, 18 Mar 2003 19:29:10 +0200
Subject: [Twisted-Python] Thinking Twisted (was Re: Need a mother?)
In-Reply-To: <BA9B3C20.D527%fig@monitor.net>
References: <HOEEKPCOKELHCNIJNMAGMECKCKAA.sean@twistedmatrix.com> <BA9B3C20.D527%fig@monitor.net>
Message-ID: <20030318172910.GA3329@lapdog>

On Mon, Mar 17, 2003 at 08:47:28AM -0600, Stephen R. Figgins wrote:
> I want to create an n-tier application to manage stores in a vertical market
> that has many changing yet strict federally mandated security requirements,
> many interfaces to a variety of equipment (signature capture devices,
> dispensing devices, etc.), and interoperate with different B2B business
> partners.   

	BINGO!


	(sorry)

-- 
:(){ :|:&};:



From naesten at myrealbox.com  Tue Mar 18 12:12:37 2003
From: naesten at myrealbox.com (Samuel Bronson)
Date: Tue, 18 Mar 2003 14:12:37 -0500
Subject: [Twisted-Python] Thinking Twisted (was Re: Need a mother?)
References: <HOEEKPCOKELHCNIJNMAGMECKCKAA.sean@twistedmatrix.com> <BA9B3C20.D527%fig@monitor.net> <20030318172910.GA3329@lapdog>
Message-ID: <3E776FA5.2090209@myrealbox.com>

Tommi Virtanen wrote:

>On Mon, Mar 17, 2003 at 08:47:28AM -0600, Stephen R. Figgins wrote:
>  
>
>>I want to create an n-tier application to manage stores in a vertical market
>>that has many changing yet strict federally mandated security requirements,
>>many interfaces to a variety of equipment (signature capture devices,
>>dispensing devices, etc.), and interoperate with different B2B business
>>partners.   
>>    
>>
>	BINGO!
>
>	(sorry)
>
Playing buzzword bingo, are you?




From fig at monitor.net  Tue Mar 18 14:03:53 2003
From: fig at monitor.net (Stephen R. Figgins)
Date: Tue, 18 Mar 2003 15:03:53 -0600
Subject: [Twisted-Python] Thinking Twisted (was Re: Need a mother?)
In-Reply-To: <20030318172910.GA3329@lapdog>
Message-ID: <BA9CE5D9.D60D%fig@monitor.net>

On 3/18/03 11:29 AM, "Tommi Virtanen" <tv at twistedmatrix.com> wrote:

> BINGO!
> 
> 
> (sorry)

I would rather you elaborate than apologize.  When you read my description
and saw words like "n-tier" and "B2B", were you skeptical that I might need
them?  That they may be more buzzword than useful?   Particularly when I use
terminology like "n-tier" or perhaps just my use of "B2B"?  Or were those
terms not clear enough?

Since I haven't received an answer to my questions yet, I worry that either
nobody knows or you are all feeling annoyed reading my barrage of ignorant
questions.  Maybe I just haven't asked clearly enough, so I will try once
more to be clearer in my request.

The solution needn't be buzzword compliant. I just want to know the twisted
approach.  Considering what I have described, would you write one server and
throw in all your basic components as modules to that server?  Would you use
Twisted's plug-in technology to add new features as you need them?     Would
you write components as servers/servants, and have them interact with each
other via PB in a more DO approach?  Would you write a front end server as a
façade for those components?    It looks like I could do any of the above
and much more with Twisted.  Is one way better than others?  What has worked
well for other large scale solutions?

In a couple of articles on Python and Twisted, Aaron Trauring has made the
point that multiple Twisted services (web, im, email, etc.)  can all run in
a single process.  Is the single process approach desirable over a multiple
component approach?  Or is that only desirable when your needs are small and
your application is unlikely to become CPU bound?

There is so much here I am having a hard time making sense of it all.  I
sure would appreciate some direction from someone who understands twisted
much better than I do.


-Stephen 





From radix at twistedmatrix.com  Tue Mar 18 14:40:36 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 18 Mar 2003 16:40:36 -0500
Subject: [Twisted-Python] Thinking Twisted (was Re: Need a mother?)
In-Reply-To: <BA9CE5D9.D60D%fig@monitor.net>
References: <20030318172910.GA3329@lapdog> <BA9CE5D9.D60D%fig@monitor.net>
Message-ID: <20030318214036.GB13357@radii>

On Tue, Mar 18, 2003 at 03:03:53PM -0600, Stephen R. Figgins wrote:
> On 3/18/03 11:29 AM, "Tommi Virtanen" <tv at twistedmatrix.com> wrote:
> 
> > BINGO!
> > 
> > 
> > (sorry)
> 

> Since I haven't received an answer to my questions yet, I worry that either
> nobody knows or you are all feeling annoyed reading my barrage of ignorant
> questions. 

Don't mind Tv's troll. Admittedly it was a litte amusing to see a
buzzword-filled post, but nothing any of us would really get annoyed
with. :-)

> The solution needn't be buzzword compliant. I just want to know the twisted
> approach.  Considering what I have described, would you write one server and
> throw in all your basic components as modules to that server?  Would you use
> Twisted's plug-in technology to add new features as you need them?     Would
> you write components as servers/servants, and have them interact with each
> other via PB in a more DO approach?  Would you write a front end server as a
> fa?ade for those components?    It looks like I could do any of the above
> and much more with Twisted.  Is one way better than others?  What has worked
> well for other large scale solutions?

I think what most needs to be defined here is the interactions that
are required between the different services. What hosts/ports the
clients connect to the services with are pretty much irrelevant (i.e.,
facade). Once you have the interactions figured out, you can just use
PB to have the different services talk to each other (if they need to
be on separate hosts), as well as for the clients to talk to the
services.

Also, the plugin/component stuff is mostly fluff. Plugins are only
useful when you want 3rd parties to add functionality to your service
through some application-specific API, and I gather that's not going
to be a requirement for you.

Just know that it's probably simpler than you think. A few python
servers that use PB to talk to each other. :)

> In a couple of articles on Python and Twisted, Aaron Trauring has made the
> point that multiple Twisted services (web, im, email, etc.)  can all run in
> a single process.  Is the single process approach desirable over a multiple
> component approach?  Or is that only desirable when your needs are small and
> your application is unlikely to become CPU bound?

If you need to be able to put the services on separate hosts, then
yeah, you'll need to use separate processes and use PB to talk between
them. If you don't, however, it's much easier and simpler to just let
the services live in the same process and have synchronous access to
all the objects in the system.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From fig at monitor.net  Tue Mar 18 15:03:16 2003
From: fig at monitor.net (Stephen R. Figgins)
Date: Tue, 18 Mar 2003 16:03:16 -0600
Subject: [Twisted-Python] Thinking Twisted (was Re: Need a mother?)
In-Reply-To: <20030318214036.GB13357@radii>
Message-ID: <BA9CF3C4.D634%fig@monitor.net>

On 3/18/03 3:40 PM, "Christopher Armstrong" <radix at twistedmatrix.com> wrote:

> Just know that it's probably simpler than you think. A few python
> servers that use PB to talk to each other. :)

Thanks, Christopher.  I think that is where I was headed, grouping related
components into just a few servers, rather than having 50 different very
specific components all communicating through some coordinating component.
I can see the flexibility in small components, but the complexity seemed
overwhelming, particularly without a central POA sort of server.

> If you need to be able to put the services on separate hosts, then
> yeah, you'll need to use separate processes and use PB to talk between
> them. If you don't, however, it's much easier and simpler to just let
> the services live in the same process and have synchronous access to
> all the objects in the system.

My concern here is that multiple processor systems are becoming much more
affordable.  Already dual Pentium systems are as common as dirt.  It would
be nice to have a design that could take advantage of such a system.  Any
ideas on how to make Twisted applications that can scale up to multiple
processor systems?  Maybe that is where we would need to work on getting
Twisted Sister updated - to provide some kind of load balancing between
multiple servers on the same host.

-Stephen




From bruce at cubik.org  Tue Mar 18 16:08:06 2003
From: bruce at cubik.org (Bruce Mitchener)
Date: Tue, 18 Mar 2003 16:08:06 -0700
Subject: [Twisted-Python] odd problem with daemonization?
Message-ID: <3E77A6D6.1000409@cubik.org>

I've got a pretty simple server using a factory and some protocol 
objects.  This code handles access to an extension module (the details 
of which are probably not useful, but it is written in C++, wrapped with 
SWIG) which implements the majority of our application logic.

The C++ code tends to dump a ton of output to stdout, and when I twistd 
like this:

   twistd -f myveryown.tap

and have a connected protocol instance, the log out put from the C++ 
code end up getting written directly to the socket and sent to the client.

When I run things like this:

   twistd -n -f myveryown.tap

Things are just fine and nothing goes wrong in that part of the code.

I do use twisted.python.log in the Python side of things. The protocol 
is a child of twisted.protocols.basic.Int32StringReceiver.

I haven't yet tried to come up with a more minimal test case, but will 
try later tonight if no one has any thoughts.

  - Bruce




From radix at twistedmatrix.com  Tue Mar 18 16:16:52 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 18 Mar 2003 18:16:52 -0500
Subject: [Twisted-Python] Thinking Twisted (was Re: Need a mother?)
In-Reply-To: <BA9CF3C4.D634%fig@monitor.net>
References: <20030318214036.GB13357@radii> <BA9CF3C4.D634%fig@monitor.net>
Message-ID: <20030318231652.GC13357@radii>

On Tue, Mar 18, 2003 at 04:03:16PM -0600, Stephen R. Figgins wrote:
> On 3/18/03 3:40 PM, "Christopher Armstrong" <radix at twistedmatrix.com> wrote:
> > If you need to be able to put the services on separate hosts, then
> > yeah, you'll need to use separate processes and use PB to talk between
> > them. If you don't, however, it's much easier and simpler to just let
> > the services live in the same process and have synchronous access to
> > all the objects in the system.
> 
> My concern here is that multiple processor systems are becoming much more
> affordable.  Already dual Pentium systems are as common as dirt.  It would
> be nice to have a design that could take advantage of such a system.  Any
> ideas on how to make Twisted applications that can scale up to multiple
> processor systems?  Maybe that is where we would need to work on getting
> Twisted Sister updated - to provide some kind of load balancing between
> multiple servers on the same host.

If you write the service such that it can use multiple processes
(communicating via PB), then you can both take advantage of multi-CPU
hosts as well as multiple distributed hosts. You would just run
multiple nodes on one multi-CPU hosts, or one node per single-CPU
host.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From bob at redivi.com  Tue Mar 18 16:28:21 2003
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 18 Mar 2003 18:28:21 -0500
Subject: [Twisted-Python] Thinking Twisted (was Re: Need a mother?)
In-Reply-To: <20030318231652.GC13357@radii>
Message-ID: <4EECCA2D-5999-11D7-8651-000A95686CD8@redivi.com>

On Tuesday, Mar 18, 2003, at 18:16 America/New_York, Christopher 
Armstrong wrote:
> If you write the service such that it can use multiple processes
> (communicating via PB), then you can both take advantage of multi-CPU
> hosts as well as multiple distributed hosts. You would just run
> multiple nodes on one multi-CPU hosts, or one node per single-CPU
> host.

and once we get zeroconf into Twisted they can all find each other 
effortlessly on the LAN (and/or loopback).. how nice would that be :)

-bob




From johan.lubcke at appload.net  Tue Mar 18 05:58:53 2003
From: johan.lubcke at appload.net (Johan =?ISO-8859-1?Q?L=FCbcke?=)
Date: 18 Mar 2003 13:58:53 +0100
Subject: [Twisted-Python] HTTP client with authorization
Message-ID: <1047992333.10461.19.camel@johan.office.appload.net>

Hi

I've just started to use twisted for a small project to relay GSM SMS
messages to Zope, and for that I need to do HTTP requests with basic
authentication. Would this be something that would be interesting to
have in twisted.web.client?

I ended up with this:

import base64
import twisted.internet.reactor
import twisted.web.client
import urlparse

class AuthHTTPPageGetter(twisted.web.client.HTTPPageGetter):

    def connectionMade(self):
        self.sendCommand('GET', self.factory.url)
        self.sendHeader('Host', self.factory.host)
        self.sendHeader('User-Agent', self.factory.agent)

        if self.factory.http_user:
            cred = '%s:%s' % (self.factory.http_user,
                              self.factory.http_password)
            auth = "Basic " +
base64.encodestring(cred).replace('\012','')
            self.sendHeader('Authorization', auth)

        self.endHeaders()
        self.headers = {}


def _parse(url):
    parsed = urlparse.urlparse(url)
    path = urlparse.urlunparse(('','')+parsed[2:])
    host, port = parsed[1], 80
    if ':' in host:
        host, port = host.split(':')
        port = int(port)
    return host, port, path


def getPage(url, http_user=None, http_password=None):
    host, port, url = _parse(url)
    factory = twisted.web.client.HTTPClientFactory(host, url)
    factory.http_user = http_user
    factory.http_password = http_password
    factory.protocol = AuthHTTPPageGetter
    twisted.internet.reactor.connectTCP(host, port, factory)
    return factory.deferred


Thanks for a great framework! Comming from asyncore, twisted makes
things quite a lot easier...

  / Johan


-- 
Johan Lübcke, System Architect                         Appload Nordic AB          
Mobile: +46 730 632303                            http://www.appload.com
Office: +46 8 4420933                    mailto:johan.lubcke at appload.com

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20030318/5ddcdcb5/attachment.sig>

From faassen at vet.uu.nl  Tue Mar 18 11:51:06 2003
From: faassen at vet.uu.nl (Martijn Faassen)
Date: Tue, 18 Mar 2003 19:51:06 +0100
Subject: [Twisted-Python] Twisted talk at EuroPython 2003
Message-ID: <20030318185106.GC18469@vet.uu.nl>

Hi there,

I'm the track chair for the Python Frameworks track for EuroPython 2003,
to be held the end of june in Charleroi, Belgium.

http://www.europython.org

I was wondering if anyone was interested in giving a talk about Twisted
at the conference. You could give a 30 minute or 45 minute talk, but
there's also interest in a Twisted tutorial, which could be longer.

Please drop me a mail if you're interested.

Regards,

Martijn




From glyph at twistedmatrix.com  Tue Mar 18 23:02:46 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 19 Mar 2003 00:02:46 -0600
Subject: [Twisted-Python] odd problem with daemonization?
In-Reply-To: <3E77A6D6.1000409@cubik.org>
Message-ID: <68236FB5-59D0-11D7-BB45-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Tuesday, March 18, 2003, at 05:08 PM, Bruce Mitchener wrote:

> I've got a pretty simple server using a factory and some protocol 
> objects.  This code handles access to an extension module (the details 
> of which are probably not useful, but it is written in C++, wrapped 
> with SWIG) which implements the majority of our application logic.

Just a brief word of warning... while I've had a few good experiences 
integrating C/C++ code with Python, SWIG has uniformly been horrible.  
This particular issue is not with SWIG, but it may create interference 
later on.

> The C++ code tends to dump a ton of output to stdout, and when I 
> twistd like this:
>
>   twistd -f myveryown.tap
>
> and have a connected protocol instance, the log out put from the C++ 
> code end up getting written directly to the socket and sent to the 
> client.

The reason that you're having this problem is that on the C++ side of 
things, FD 0,1,2 are just normal FDs.  This is due to the fact that we 
trap the sys.stdout _object_ in python, but we don't keep the 
file-descriptors around.  The Transport of your Protocol is getting 
created after those FDs have been closed, and is therefore haplessly 
allocating the FD of stdout by chance.

I don't know how to create a file-descriptor in C which translates to 
function calls on a Python file-type object.  In fact, I don't even 
know if that's possible.  However, this is clearly incorrect behavior 
for cout<< and printf.  Can anyone with more experience in this area 
propose a solution?
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+eAgKvVGR4uSOE2wRAkREAJsG/w54utuFUiGoOF5sFTosC0mUyACfWmqk
t7YY/4sBaVjtoZQpoqo1YAA=
=ygqD
-----END PGP SIGNATURE-----




From jjn at kriln.com  Tue Mar 18 22:17:10 2003
From: jjn at kriln.com (Jeremy Noetzelman)
Date: Wed, 19 Mar 2003 05:17:10 +0000 (GMT)
Subject: [Twisted-Python] odd problem with daemonization?
In-Reply-To: <68236FB5-59D0-11D7-BB45-000393C9700E@twistedmatrix.com>
Message-ID: <20030319051617.M93757-100000@nosferatu.kriln.com>

On Wed, 19 Mar 2003, Glyph Lefkowitz wrote:

> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
> On Tuesday, March 18, 2003, at 05:08 PM, Bruce Mitchener wrote:
>
> > I've got a pretty simple server using a factory and some protocol
> > objects.  This code handles access to an extension module (the details
> > of which are probably not useful, but it is written in C++, wrapped
> > with SWIG) which implements the majority of our application logic.
>
> Just a brief word of warning... while I've had a few good experiences
> integrating C/C++ code with Python, SWIG has uniformly been horrible.
> This particular issue is not with SWIG, but it may create interference
> later on.

Can you elaborate please?  I've heard equally as many horror stories about
Boost.Python, for example, and am curious.






From exarkun at twistedmatrix.com  Wed Mar 19 10:23:54 2003
From: exarkun at twistedmatrix.com (Jp Calderone)
Date: Wed, 19 Mar 2003 12:23:54 -0500
Subject: [Twisted-Python] Lore bug
Message-ID: <20030319172354.GA5929@meson.dyndns.org>

  This isn't the bug I meant to report, but I found it in the process of
trying to make an example of that one.  So:

<html><body>
<pre class="python">
def foo():
    print 'bar'
foo()
</pre>
</body></html>

  Running lore on this file (using the PyCon template), raises this
exception:

Traceback (most recent call last):#######] (foo)                               
  File "/usr/local/bin/lore", line 30, in ?
    run()
  File "/home/exarkun/projects/python/Twisted/twisted/scripts/lore.py", line 87, in run
    w.generate()
  File "/home/exarkun/projects/python/Twisted/twisted/lore/process.py", line 60, in generate
    self.df(fullpath, linkrel)
  File "/home/exarkun/projects/python/Twisted/twisted/lore/default.py", line 41, in <lambda>
    d['baseurl'], templ)
  File "/home/exarkun/projects/python/Twisted/twisted/lore/tree.py", line 231, in doFile
    munge(doc, cn, linkrel, os.path.dirname(fn), fn, ext, url)
  File "/home/exarkun/projects/python/Twisted/twisted/lore/tree.py", line 201, in munge
    title = domhelpers.findNodesNamed(document, 'title')[0].childNodes
IndexError: list index out of range

  Jp

-- 
Where a calculator on the ENIAC is equipped with 18,000 vacuum tubes and
weighs 30 tons, computers in the future may have only 1,000 vacuum tubes and
weigh only 1.5 tons.    -- Popular Mechanics, March 1949
-- 
 up 16 days, 10:00, 7 users, load average: 0.01, 0.03, 0.00
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030319/d47d1c11/attachment.sig>

From jasper at peak.org  Wed Mar 19 17:03:32 2003
From: jasper at peak.org (Jasper Phillips)
Date: Wed, 19 Mar 2003 16:03:32 -0800 (PST)
Subject: [Twisted-Python] Problems with PB and Jelly...
Message-ID: <Pine.LNX.4.44.0303191537250.20559-100000@localhost.localdomain>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

I'm new to twisted, and attempting to use it for networkable gaming;
unfortunately I've run into some problems.

I have a Perspective <-> Referenceable server/client setup, and am trying to
pass objects between them.  Following the online docs I've set all the
relavent classes to inherit from pb.Copyable + pb.RemoteCopy, and passed them
all to pb.setUnjellyableForClass.

However, I still get "Module not allowed" exceptions raised in
twisted.spread.jelly.py line 523.  Looking more closely, I see that modules
are not allowed unless passed to SecurityOptions.allowModules(), which is
only called from SecurityOptions.allowInstancesOf(), which is not exposed
through pb...

In short I don't see how the example code on:
http://twistedmatrix.com/documents/howto/pb-copyable
could possibly work!  Is it indeed necessary to call allowInstancesOf()
directly?  Hopefully I am just missing something... :-)


I'm also unsure what to make of the last bullet under "Things To Watch Out
For" on the above webpage.  It seems unsure whether using __init__ to
initialize transferable objects is ok...  Must I truly go and hack all
my objects to not use __init__, and instead use setCopyableState()?

This, especially when combined with the need to inherit from pb.Copyable +
pb.RemoteCopy, seems onerous when compared to the minimal interface of
pickle.  I would like to be able to simple pass objects of arbitrary classes,
provided I've registered them as UnJellyable.  Hopefully I'm missing
something here as well!

Thanks in advance,
- -Jasper

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE+eQVb8EpjZ7/X9bIRAoGmAKDOp/mMXUV0wGG057+CK5Shf75k9ACgu9Cb
EuFB62b9vaObg3LZZlJ81jg=
=8Dte
-----END PGP SIGNATURE-----




From cce at clarkevans.com  Wed Mar 19 18:58:43 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu, 20 Mar 2003 01:58:43 +0000
Subject: [Twisted-Python] supporting start/stop/restart behavior
Message-ID: <20030320015843.GA29224@doublegemini.com>

First, before I get started, I'd like to say that I'm a new
fan of twistd, it is quite nice tool, and I think everyone
should use it.   However, that being said, what it misses,
IMHO, is a simple interface to stop and restart.  Also, it
lacks a nice way to be embedded within a python script 
so that the __main__ == __name__ hack runs the file properly.

Anyway, what I'd like... is to take my arbitrary "test.py" file,
let's say an application as simple as...

    from twisted.internet import app
    from twisted.web.server import Site
    from twisted.web.static import File
    
    application = app.Application('test')
    application.listenTCP(8080, Site(File('.')))

And add these three lines of code to make it runnable...

    if '__main__' == __name__:
        from twisted.scripts.twistd import runDirect
        runDirect(save=1)

In this way, the following commands 'just work':

    python test.py          # runs the app directly (no daemon)
    python test.py start    # runs the app as a deamon
    python test.py stop     # stops the app as a deamon
    python test.py restart  # restarts the app as a deamon

And, even twistd options can be included...

    python test.py --quiet start
    python test.py --quiet

What this involves is two things:

  1. Refactoring runApp to remove a hunk of code which 
     runs os.kill on a pid found in the given pidfile.
     This is moved to another function, killApp, which
     takes two arguments, config and signal.   From the
     runApp the code then calls killApp(config, signal=0)

  2. Adding a new function, runDirect which does
     several things:

     a.  takes 'start', 'stop', and 'restart' as the last
         argument on the command line, if none of these 
         are found, then the application is assumed to be
         run interactively (nodaemon); and

     b.  it adds --python <filename> where filename is the
         name of the current python file (argv[0]), further,
         it gives a direct option in the function arguments
         to not save the tap file (saving a tap file is
         not always useful, and as an argument it is hard
         to miss); and

     c.  if stop or restart are chosen, then this kills the
         current process using the given pidfile (which defaults
         to twistd.pid in the current directory) through
         killApp(signal=SIGTERM)

     d.  unless stop is chosen, the app is then started using
         the configuration options as parsed (and modified via
         the --python option)

     This function could be broken into the start/stop/restart
     behavior from the --python option; but I don't have this
     requirement and people in the IRC list didn't seem to think
     that either of these two functions are useful.

Anyway, I'm posting to this list beacuse I think the way in
which twistd is used isn't obvious... i.e. the primary way
you'd use it with a python source file is an option buried 
among many others. 

I raised this change on the IRC list, and the primary argument
against the above was that it is out-of-scope; in other words,
one could write a shell script to do the same.   I think this
is a bad argument beacuse _all_ of twistd could be done in 
a shell script.  For example, if you ask D. J. Bernstein, he'd
say that none of this deamon / logging behavior needs to be
in an application, and this is why he has his 'daemontools'.

So, the argument shouldn't be _can_ this be done externally, 
of course it can.  The question is does it make sence to 
standardize on particular ways of using twisted so that everyone
doesn't have their own approach, to logging, etc.  I feel that
this comes all the way down to Twisted having a simple way
to start/stop/restart a server without having to rely upon
external, non-Twisted scripts.  

At the very least, I'd like the killApp refactor to be
accepted, as I'd rather not have to duplicate killApp
code within a private/sandbox copy of runDirect.

Best,

Clark



From cce at clarkevans.com  Wed Mar 19 18:59:56 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu, 20 Mar 2003 01:59:56 +0000
Subject: [Twisted-Python] Re: supporting start/stop/restart behavior
In-Reply-To: <20030320015843.GA29224@doublegemini.com>
References: <20030320015843.GA29224@doublegemini.com>
Message-ID: <20030320015956.GB29224@doublegemini.com>

--- twistd.py.orig	Wed Mar 19 16:21:46 2003
+++ twistd.py	Wed Mar 19 20:19:15 2003
@@ -211,6 +211,31 @@
     import pdb
     pdb.set_trace()
 
+def killApp(config, signal = 0):
+    if os.path.exists(config['pidfile']):
+        try:
+            pid = int(open(config['pidfile']).read())
+        except ValueError:
+            sys.exit('Pidfile %s contains non numeric value' % config['pidfile'])
+
+        try:
+            os.kill(pid, signal)
+        except OSError, why:
+            if why[0] == errno.ESRCH:
+                # The pid doesnt exists.
+                if not config['quiet']:
+                    print 'Removing stale pidfile %s' % config['pidfile']
+                    os.remove(config['pidfile'])
+            else:
+                sys.exit('Can\'t check status of PID %s from pidfile %s: %s' % (pid, config['pidfile'], why[1]))
+        else:
+            if not(signal):
+                sys.exit("""\
+Another twistd server is running, PID %s\n
+This could either be a previously started instance of your application or a
+different application entirely. To start a new one, either run it in some other
+directory, or use my --pidfile and --logfile parameters to avoid clashes.
+""" %  pid)
 
 def runApp(config):
     global initRun
@@ -248,29 +273,7 @@
     # This will fix up accidental function definitions in evaluation spaces
     # and the like.
     initRun = 0
-    if os.path.exists(config['pidfile']):
-        try:
-            pid = int(open(config['pidfile']).read())
-        except ValueError:
-            sys.exit('Pidfile %s contains non numeric value' % config['pidfile'])
-
-        try:
-            os.kill(pid, 0)
-        except OSError, why:
-            if why[0] == errno.ESRCH:
-                # The pid doesnt exists.
-                if not config['quiet']:
-                    print 'Removing stale pidfile %s' % config['pidfile']
-                    os.remove(config['pidfile'])
-            else:
-                sys.exit('Can\'t check status of PID %s from pidfile %s: %s' % (pid, config['pidfile'], why[1]))
-        else:
-            sys.exit("""\
-Another twistd server is running, PID %s\n
-This could either be a previously started instance of your application or a
-different application entirely. To start a new one, either run it in some other
-directory, or use my --pidfile and --logfile parameters to avoid clashes.
-""" %  pid)
+    killApp(config)
 
     if config['logfile'] == '-':
         if not config['nodaemon']:
@@ -472,3 +475,66 @@
         os._exit(1)
 
     runApp(config)
+
+def runDirect(save=1):
+    """ run directly from python file
+
+        You can use this function to include start/stop/restart
+        functionality directly from your twisted application.
+        Following is example code, let us call it test.py,
+
+            if '__main__' == __name__:
+                # run this before twisted.internet.reactor is imported
+                from twisted.scripts.twistd import runDirect
+                runDirect(save=1)
+
+            from twisted.internet import app
+            from twisted.web.server import Site
+            from twisted.web.static import File
+            
+            application = app.Application('test')
+            application.listenTCP(8080, Site(File('.')))
+            
+
+        Given this code, the following will now work,
+           python test.py          # runs the app directly (no daemon)
+           python test.py start    # runs the app as a deamon
+           python test.py stop     # stops the app as a deamon
+           python test.py restart  # restarts the app as a deamon 
+       
+        Options can be included as well, for example, 
+           python test.py --quiet start    # deamon
+           python test.py --quiet          # no deamon
+    """
+    from sys import argv, exit
+    config = ServerOptions()
+    config.synopsis = "Usage: %s [options] start|stop|restart" % argv[0]
+    bStop = 0; bStart = 1; bDaemon = 0
+    cmd = argv[-1]
+    if cmd in ('start', 'stop', 'restart'):
+        argv.pop()
+        bDaemon = 1
+        if 'restart' == cmd:
+            bStop = 1
+        if 'stop' == cmd:
+            bStart = 0
+            bStop = 1
+    try:
+        config.parseOptions()
+    except usage.error, ue:
+        print config.opt_help()
+        exit(1)
+    if bStop:
+        from signal import SIGTERM
+        from os.path import exists
+        from time import sleep
+        killApp(config, SIGTERM)
+        nWait = 0  # processes do not die instantly
+        while exists(config['pidfile']) and nWait < 20:
+            sleep(.1)
+            nWait += 1
+    if bStart:
+        if not save:    config["no_save"] = 1
+        if not bDaemon: config['nodaemon'] = 1
+        config["python"] = argv[0]
+        runApp(config)



From sean at twistedmatrix.com  Wed Mar 19 20:01:58 2003
From: sean at twistedmatrix.com (Sean Riley)
Date: Wed, 19 Mar 2003 21:01:58 -0600
Subject: [Twisted-Python] Problems with PB and Jelly...
In-Reply-To: <Pine.LNX.4.44.0303191537250.20559-100000@localhost.localdomain>
Message-ID: <HOEEKPCOKELHCNIJNMAGCEEECKAA.sean@twistedmatrix.com>

The "Module not allowed" exception means that you need to call
setCopierForClass for the class. This maps a server-side class string to a
client side class so the Jelly knows what type of object to create on the
client.  For example:

pb.setCopierForClass('MyApp.game.server.door.Door', RemoteDoor)

This is usually done at the bottom of the file that the class client-side is
defined in.

As far the inheritance, you should only to inherit from RemoteCopy for
client side objects, not both pb.Copyable and pb.RemoteCopy...

The "setCopyableState" idiom for constructing remote classes may seem
onerous at first, but its use really is necessary. Distributed objects _are_
different from regular local objects and the requirements for managing them
are different too. One of the benefits of PB is its inherent security
model - it is far more secure and resistant to hackery than using Pickle.
Pickle's internal use of Python's eval function makes it very scary to
unserialized Pickled objects on a server...

-----Original Message-----
From: twisted-python-admin at twistedmatrix.com
[mailto:twisted-python-admin at twistedmatrix.com]On Behalf Of Jasper
Phillips
Sent: Wednesday, March 19, 2003 6:04 PM
To: twisted-python at twistedmatrix.com
Subject: [Twisted-Python] Problems with PB and Jelly...


-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

I'm new to twisted, and attempting to use it for networkable gaming;
unfortunately I've run into some problems.

I have a Perspective <-> Referenceable server/client setup, and am trying to
pass objects between them.  Following the online docs I've set all the
relavent classes to inherit from pb.Copyable + pb.RemoteCopy, and passed
them
all to pb.setUnjellyableForClass.

However, I still get "Module not allowed" exceptions raised in
twisted.spread.jelly.py line 523.  Looking more closely, I see that modules
are not allowed unless passed to SecurityOptions.allowModules(), which is
only called from SecurityOptions.allowInstancesOf(), which is not exposed
through pb...

In short I don't see how the example code on:
http://twistedmatrix.com/documents/howto/pb-copyable
could possibly work!  Is it indeed necessary to call allowInstancesOf()
directly?  Hopefully I am just missing something... :-)


I'm also unsure what to make of the last bullet under "Things To Watch Out
For" on the above webpage.  It seems unsure whether using __init__ to
initialize transferable objects is ok...  Must I truly go and hack all
my objects to not use __init__, and instead use setCopyableState()?

This, especially when combined with the need to inherit from pb.Copyable +
pb.RemoteCopy, seems onerous when compared to the minimal interface of
pickle.  I would like to be able to simple pass objects of arbitrary
classes,
provided I've registered them as UnJellyable.  Hopefully I'm missing
something here as well!

Thanks in advance,
- -Jasper

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE+eQVb8EpjZ7/X9bIRAoGmAKDOp/mMXUV0wGG057+CK5Shf75k9ACgu9Cb
EuFB62b9vaObg3LZZlJ81jg=
=8Dte
-----END PGP SIGNATURE-----


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From konrad at wam.umd.edu  Wed Mar 19 20:50:12 2003
From: konrad at wam.umd.edu (Konrad Rokicki)
Date: Wed, 19 Mar 2003 22:50:12 -0500 (EST)
Subject: [Twisted-Python] clients with parameters
Message-ID: <Pine.SOL.4.44.0303192220240.14540-100000@rac2.wam.umd.edu>

Hi, got a quick question.
With any client where the __init__() method takes some parameters,
(i.e. FTPClient, TOCClient, etc), how can I use the connectTCP/factory
mechanisms and also pass it the parameters from the main program?
I started with this:

if __name__ == "__main__":
    config = {} # configuration is loaded into this
    fact = AIMFactory(config['nick'], config['password'])
    reactor.connectTCP(config['server'], config['port'], fact)

class AIMFactory(protocol.ClientFactory):
    protocol = AIM
    def __init__(self, nick, password):
        self.nick = nick
        self.password = password
    # etc

class AIM(toc.TOCClient):
    def __init__(self):
	""" I don't have access to the factory here
            so I don't know these parameters...
        """
        toc.TOCClient.__init__(self, username, password)

This is probably all wrong, and I guess the factory isn't a good
place for those parameters to be. But I have a configuration file that I
read into a structure and I want to use those options.

I looked at the ClientCreator which kind of does what I need but I'd
still like to have the factory for other things like logging. Actually,
I dont think I'll ever create more than one instance of the client, so I
could just use that, but I'd like to know the "right" way of doing this.

Thanks,
Konrad Rokicki




From radix at twistedmatrix.com  Wed Mar 19 22:13:15 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Thu, 20 Mar 2003 00:13:15 -0500
Subject: [Twisted-Python] clients with parameters
In-Reply-To: <Pine.SOL.4.44.0303192220240.14540-100000@rac2.wam.umd.edu>
References: <Pine.SOL.4.44.0303192220240.14540-100000@rac2.wam.umd.edu>
Message-ID: <20030320051315.GF13357@radii>

On Wed, Mar 19, 2003 at 10:50:12PM -0500, Konrad Rokicki wrote:
> class AIMFactory(protocol.ClientFactory):
>     protocol = AIM
>     def __init__(self, nick, password):
>         self.nick = nick
>         self.password = password
>     # etc
> 
> class AIM(toc.TOCClient):
>     def __init__(self):
> 	""" I don't have access to the factory here
>             so I don't know these parameters...
>         """
>         toc.TOCClient.__init__(self, username, password)
> 

You need to override the buildProtocol method of your Factory; it must
create and return the Protocol instance. See
twisted.protocols.toc.TOCFactory, for example.


-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From glyph at twistedmatrix.com  Wed Mar 19 22:35:39 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 19 Mar 2003 23:35:39 -0600
Subject: [Twisted-Python] supporting start/stop/restart behavior
In-Reply-To: <20030320015843.GA29224@doublegemini.com>
Message-ID: <C8B9F9A2-5A95-11D7-A96E-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Wednesday, March 19, 2003, at 07:58 PM, Clark C. Evans wrote:

> ... what [Twisted] misses, IMHO, is a simple interface to stop and 
> restart.

You're right, but this is the wrong way to go about fixing it.

> Also, it lacks a nice way to be embedded within a python script so 
> that the __main__ == __name__ hack runs the file properly.

I disagree.  Despite the fact that I occasionally write quick scripts 
that work this way, it's for quick hacks only, and providing better 
support for it is a misleading band-aid on the deficiencies of 
multi-platform twistd functionality.

> And add these three lines of code to make it runnable...
>
>     if '__main__' == __name__:
>         from twisted.scripts.twistd import runDirect
>         runDirect(save=1)
>
> In this way, the following commands 'just work':
>
>     python test.py          # runs the app directly (no daemon)
>     python test.py start    # runs the app as a deamon
>     python test.py stop     # stops the app as a deamon
>     python test.py restart  # restarts the app as a deamon

... on UNIX.

But, what does "restart" mean if you're running on Jython?  On win32?  
What interaction does this imply with native OS services?

> And, even twistd options can be included...
>
>     python test.py --quiet start
>     python test.py --quiet

In that case, why not 'twistd -y test.py --quiet'?

>   1. Refactoring runApp to remove a hunk of code which
>      runs os.kill on a pid found in the given pidfile.
>      This is moved to another function, killApp, which
>      takes two arguments, config and signal.   From the
>      runApp the code then calls killApp(config, signal=0)

Currently, that code is there _only_ to determine, in a rather 
platform-specific way, whether the server should attempt to keep 
starting or not.  It's not a generalized stop-the-application.

>   2. Adding a new function, runDirect which does
>      several things:
>
>      b.  it adds --python <filename> where filename is the
>          name of the current python file (argv[0]), further,
>          it gives a direct option in the function arguments
>          to not save the tap file (saving a tap file is
>          not always useful, and as an argument it is hard
>          to miss); and

Saving a tap file is pretty much always useful.  It provides a common 
ground for introspection tools to look at what a server is doing.  I 
have gone over this in previous mails.

>      c.  if stop or restart are chosen, then this kills the
>          current process using the given pidfile (which defaults
>          to twistd.pid in the current directory) through
>          killApp(signal=SIGTERM)

Why put this into Twisted where we have to swaddle it in a layer of 
cross-platform compatibility rather than just letting the user use 
whatever tools are available on their system for interacting with 
Twisted?

>      This function could be broken into the start/stop/restart
>      behavior from the --python option; but I don't have this
>      requirement and people in the IRC list didn't seem to think
>      that either of these two functions are useful.
>
> Anyway, I'm posting to this list beacuse I think the way in
> which twistd is used isn't obvious... i.e. the primary way
> you'd use it with a python source file is an option buried
> among many others.

So you are trying to solve a documentation problem by adding 
functionality to a different place, necessitating more documentation? 
:-)

> I raised this change on the IRC list, and the primary argument
> against the above was that it is out-of-scope; in other words,
> one could write a shell script to do the same.   I think this
> is a bad argument beacuse _all_ of twistd could be done in
> a shell script.  For example, if you ask D. J. Bernstein, he'd
> say that none of this deamon / logging behavior needs to be
> in an application, and this is why he has his 'daemontools'.

D.J. Bernstein doesn't give a rip about portability outside of UNIX, so 
he makes the decision to write his framework for logging and 
daemonization in sh.  We write these frameworks in Python, but I agree 
with this point: none of this daemon/logging/startup/shutdown behavior 
needs to be in an application.

My view on functionality like this is that it is a platform-specific 
thing.  Even assuming that signals worked like you expect them to 
across all platforms that we are trying to support, there are other 
issues.  What about the cultural expectation of command lines?  On 
win32, the way Python programs are run isn't very natural.  On the 
command line, the location of the .exe is significant, there's no such 
thing as a shebang line, and users aren't accustomed to running 
interpreters on scripts.  They expect to have an icon to click on, 
usually a Service.  There are also differing cultural expectations of 
how you run stuff like this on MacOS.  Does the start/stop thing have a 
GUI?  A monitoring icon in the dock?

Now, we don't *currently* have functionality like that, but we hope to 
one day.  I am beginning to despair of ever actually achieving that 
goal, though, since nobody who understands it has time, and so many 
other programmers have habits that are opposed to this approach...

Supporting mechanisms in the framework that make configuration and 
introspection impossible without editing the start-up code for your 
particular application would make this eventual goal even more 
difficult than it already is.

Components written for twisted should be written in such a way that 
they can be loaded into existing applications without running a script. 
  The --python option to twistd is pushing about as far as we want to go 
in the direction of hard-coding custom functionality for a particular 
server process.

> So, the argument shouldn't be _can_ this be done externally,
> of course it can.  The question is does it make sence to
> standardize on particular ways of using twisted so that everyone
> doesn't have their own approach, to logging, etc.  I feel that
> this comes all the way down to Twisted having a simple way
> to start/stop/restart a server without having to rely upon
> external, non-Twisted scripts.

If you want to improve twistd, please feel free to suggest ways that 
stopping/restarting could be made easier or even more consistent across 
platforms.  For example, "killApp" might make sense if, on 
signals-challenged platforms, twistd automatically opened a 
localhost-only socket which allowed communication with the server.

> At the very least, I'd like the killApp refactor to be
> accepted, as I'd rather not have to duplicate killApp
> code within a private/sandbox copy of runDirect.

What functionality, exactly, is your platform's kill(1) missing that 
makes you want a Python version of it?
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+eVMwvVGR4uSOE2wRAopTAJ4+JQiM0WrJYIAH2qPMCbil4bE1+gCeMRaF
X5qxxeDWi10E8IeWcuBkQE4=
=L2sp
-----END PGP SIGNATURE-----




From cce at clarkevans.com  Thu Mar 20 00:18:32 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu, 20 Mar 2003 07:18:32 +0000
Subject: [Twisted-Python] supporting start/stop/restart behavior
In-Reply-To: <C8B9F9A2-5A95-11D7-A96E-000393C9700E@twistedmatrix.com>
References: <20030320015843.GA29224@doublegemini.com> <C8B9F9A2-5A95-11D7-A96E-000393C9700E@twistedmatrix.com>
Message-ID: <20030320071832.GA30645@doublegemini.com>

Glyph,

Thanks for responding, I know you're quite busy before PyCon.

On Wed, Mar 19, 2003 at 11:35:39PM -0600, Glyph Lefkowitz wrote:
| >... what [Twisted] misses, IMHO, is a simple interface to stop and 
| >restart.
| 
| You're right, but this is the wrong way to go about fixing it.

Ok. 

| >  1. Refactoring runApp to remove a hunk of code which
| >     runs os.kill on a pid found in the given pidfile.
| >     This is moved to another function, killApp, which
| >     takes two arguments, config and signal.   From the
| >     runApp the code then calls killApp(config, signal=0)
| 
| Currently, that code is there _only_ to determine, in a rather 
| platform-specific way, whether the server should attempt to keep 
| starting or not.  It's not a generalized stop-the-application.

If twistd adds (in a "rather platform-specific" way) support for 
stop and restart, then I'm sure platform-specific linkages can be
added later on; for example doing NT based service API calls
instead of fork / pidfiles / signals.

| >     c.  if stop or restart are chosen, then this kills the
| >         current process using the given pidfile (which defaults
| >         to twistd.pid in the current directory) through
| >         killApp(signal=SIGTERM)
| 
| Why put this into Twisted where we have to swaddle it in a layer of 
| cross-platform compatibility rather than just letting the user use 
| whatever tools are available on their system for interacting with 
| Twisted?

Why not?  With twistd, Twisted is taking on responsibility for
'starting' an application, shouldn't it finish the job with
stop and restart?

| So you are trying to solve a documentation problem by adding 
| functionality to a different place, necessitating more documentation? 

Got me.  ;)

| We write these frameworks in Python, but I agree with this point: 
| none of this daemon/logging/startup/shutdown behavior needs to 
| be in an application.

Cool.  Does it belong in a framework?   If not, where?

| My view on functionality like this is that it is a platform-specific 
| thing.  Even assuming that signals worked like you expect them to 
| across all platforms that we are trying to support, there are other 
| issues.  What about the cultural expectation of command lines?  On 
| win32, the way Python programs are run isn't very natural.  On the 
| command line, the location of the .exe is significant, there's no such 
| thing as a shebang line, and users aren't accustomed to running 
| interpreters on scripts.  They expect to have an icon to click on, 
| usually a Service.  There are also differing cultural expectations of 
| how you run stuff like this on MacOS.  Does the start/stop thing have a 
| GUI?  A monitoring icon in the dock?
| 
| Now, we don't *currently* have functionality like that, but we hope to 
| one day.  I am beginning to despair of ever actually achieving that 
| goal, though, since nobody who understands it has time, and so many 
| other programmers have habits that are opposed to this approach...

All of this is great.  But I've got many applications that I am
writing, and would like to write; and I'd like a nice way to 
start, stop, and restart my twisted daemons.  Currently, "twistd" 
seems to be the preferred command line approach.

| Supporting mechanisms in the framework that make configuration and 
| introspection impossible without editing the start-up code for your 
| particular application would make this eventual goal even more 
| difficult than it already is.
| 
| Components written for twisted should be written in such a way that 
| they can be loaded into existing applications without running a script. 

Uncle! Uncle!  Ok.  Ok.  '__main__' == __name__ is bad.

| If you want to improve twistd, please feel free to suggest ways that 
| stopping/restarting could be made easier or even more consistent across 
| platforms.  For example, "killApp" might make sense if, on 
| signals-challenged platforms, twistd automatically opened a 
| localhost-only socket which allowed communication with the server.

Ok.  Could we add to twistd 'start', 'stop' and 'restart' sub-commands,
with 'start' being the default.  For now, we implement stop with kill
signals.  When we get time we refactor the whole start/stop/restart code
so that it uses a 'Process' object that is platform specific.   The
process object has 'start', 'stop', and 'restart' methods, and it has
two or more implementations, including, but not limited to a
UnixProcess, which uses kill/signals/pidfile, and a NT Process, which
uses NT services, etc.

As for GUIs.  What would be useful is one more sub-command, 'query'.
Which returns a status of the given process, 'starting', 'stopping',
'running', 'restarting', 'stopped'.  With those in place, I'm sure
someone could write a nice cross-platform wxWindows viewer which calls
twistd to check the status of various processes, etc.  We'd probably
at that point also have to start thinking about registry entries,
i.e. configuration settings (Coca?).

Best,

Clark



From smurf at noris.de  Thu Mar 20 02:46:55 2003
From: smurf at noris.de (Matthias Urlichs)
Date: Thu, 20 Mar 2003 10:46:55 +0100
Subject: [Twisted-Python] more thoughts on resumable async data flows
References: <20030314065003.GA99373@doublegemini.com>
Message-ID: <pan.2003.03.20.09.46.53.743414@smurf.noris.de>

Hi,

On Fri, 14 Mar 2003 06:50:03 +0000, Clark C. Evans wrote:

> Anyway, it's in the sandbox if anyone wants to play...
> 
Looks nice. I'll probably use that (for processing a rather large
amount of database results).

> P.S.  Unfortunately, it looks like PauseFlow doesn't
> work in the context of a generator... pity.  Hopefully
> I'm doing something wrong.
> 
You can't leave a generator with an exception and expect it to be
resumable. (Where should it continue?? There's no mechanism to re-enter it
at any point other than a yield(), which is not what you want to do!)

The best idea would probably be to "yield PauseFlow", and to special-case
that in the flow engine. I don't know what your use case is, though; my
iterators either don't wait for something (they don't need this), or
they block on something (I park them in a different thread), or they
wait on a Deferred or whatever (they're not written as generators).

-- 
Matthias




From andrew-twisted at puzzling.org  Thu Mar 20 03:19:39 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu, 20 Mar 2003 21:19:39 +1100
Subject: [Twisted-Python] Lore bug
In-Reply-To: <20030319172354.GA5929@meson.dyndns.org>
References: <20030319172354.GA5929@meson.dyndns.org>
Message-ID: <20030320101939.GF3390@frobozz.local>

On Wed, Mar 19, 2003 at 12:23:54PM -0500, Jp Calderone wrote:
>   This isn't the bug I meant to report, but I found it in the process of
> trying to make an example of that one.  So:
> 
> <html><body>
> <pre class="python">
> def foo():
>     print 'bar'
> foo()
> </pre>
> </body></html>
> 
>   Running lore on this file (using the PyCon template), raises this
> exception:

[snip]

As discussed on IRC, this is actually a feature ;)

Using lint (lore -o lint) will warn that the document is malformed (in this
case, missing a title tag), so Lore makes no guarantee to be able to do
anything with it... I'm not interested in encouraging HTML-style "let's
parse any old crud that looks vaguely recognisable".

That said, giving a traceback is pretty rude.  I'll patch it to give a
friendly message suggesting you run lint to find out why Lore can't process
your document, and probably provide a --debug, in case people still want to
be able to see tracebacks (like me :).

-Andrew.




From tv at twistedmatrix.com  Thu Mar 20 00:03:07 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Thu, 20 Mar 2003 09:03:07 +0200
Subject: [Twisted-Python] odd problem with daemonization?
In-Reply-To: <68236FB5-59D0-11D7-BB45-000393C9700E@twistedmatrix.com>
References: <3E77A6D6.1000409@cubik.org> <68236FB5-59D0-11D7-BB45-000393C9700E@twistedmatrix.com>
Message-ID: <20030320070307.GA31415@lapdog>

On Wed, Mar 19, 2003 at 12:02:46AM -0600, Glyph Lefkowitz wrote:
> The reason that you're having this problem is that on the C++ side of 
> things, FD 0,1,2 are just normal FDs.  This is due to the fact that we 
> trap the sys.stdout _object_ in python, but we don't keep the 
> file-descriptors around.  The Transport of your Protocol is getting 
> created after those FDs have been closed, and is therefore haplessly 
> allocating the FD of stdout by chance.

	Give up hope of being able to process the data written to fd 1
	or 2 directly by the C part, and dup2 /dev/null to 0, 1 and 2?

-- 
:(){ :|:&};:



From cce at clarkevans.com  Thu Mar 20 10:25:27 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu, 20 Mar 2003 17:25:27 +0000
Subject: [Twisted-Python] more thoughts on resumable async data flows
In-Reply-To: <pan.2003.03.20.09.46.53.743414@smurf.noris.de>
References: <20030314065003.GA99373@doublegemini.com> <pan.2003.03.20.09.46.53.743414@smurf.noris.de>
Message-ID: <20030320172527.GC32852@doublegemini.com>

Matthias,

Since I wrote this, I've been informed of two relevant posts:
twistedmatrix.com/pipermail/twisted-python/2002-September/001685.html
twistedmatrix.com/pipermail/twisted-python/2003-February/002808.html.

Both of these are doing the same sort of thing, only that they
are using a 'pull' mechanism rather than a 'push' technique.  Anyway,
at first I was thinking that the 'pull' approach is better and that
the stuff I wrote may not be useful; but upon further rework, I 
now think that both approaches are somewhat complementary, and 
perhaps they could both be supported.

Also, the current version in the Sandbox has a few problems
as far as usage.  I'm not sure how to fix them, but another
refactor is needed.   Specifically, I'm using addFilter about
80% of the time and the mechansim needs to put addFlush in 
its public interface (I needed it about 3 times when I was
re-working some of my application code... )

Best,

Clark

On Thu, Mar 20, 2003 at 10:46:55AM +0100, Matthias Urlichs wrote:
| Hi,
| 
| On Fri, 14 Mar 2003 06:50:03 +0000, Clark C. Evans wrote:
| 
| > Anyway, it's in the sandbox if anyone wants to play...
| > 
| Looks nice. I'll probably use that (for processing a rather large
| amount of database results).
| 
| > P.S.  Unfortunately, it looks like PauseFlow doesn't
| > work in the context of a generator... pity.  Hopefully
| > I'm doing something wrong.
| > 
| You can't leave a generator with an exception and expect it to be
| resumable. (Where should it continue?? There's no mechanism to re-enter it
| at any point other than a yield(), which is not what you want to do!)
| 
| The best idea would probably be to "yield PauseFlow", and to special-case
| that in the flow engine. I don't know what your use case is, though; my
| iterators either don't wait for something (they don't need this), or
| they block on something (I park them in a different thread), or they
| wait on a Deferred or whatever (they're not written as generators).
| 
| -- 
| Matthias
| 
| 
| _______________________________________________
| Twisted-Python mailing list
| Twisted-Python at twistedmatrix.com
| http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From cce at clarkevans.com  Thu Mar 20 11:08:58 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu, 20 Mar 2003 18:08:58 +0000
Subject: [Twisted-Python] supporting start/stop/restart behavior
In-Reply-To: <20030320071832.GA30645@doublegemini.com>
References: <20030320015843.GA29224@doublegemini.com> <C8B9F9A2-5A95-11D7-A96E-000393C9700E@twistedmatrix.com> <20030320071832.GA30645@doublegemini.com>
Message-ID: <20030320180858.GA33168@doublegemini.com>

This patch adds 'stop', 'start', and 'restart' commands to twistd,
so that a simple program, say,

    from twisted.internet import app
    from twisted.web.server import Site
    from twisted.web.static import File

    application = app.Application('test')
    application.listenTCP(8080, Site(File('.')))

Can be 'started'   using:     twistd -y test.py
   and 'stopped'   using:     twistd -y test.py stop
   and 'restarted' using:     twistd -y test.py restart

This is a good way to start thinking cross-platform, as twistd
could be refactored later to, say on Win NT, use NT services
for the start/stop/restart behavior.   For now the current patch
just uses the current "PID" file approach.   Besides providing
a cross-platform iterface, it doesn't require that users new to 
unix learn "kill" or have to get involved with finding the right
pid file.  Lastly, it provides the necessary delay so that a
restart can happen using a single command.

Best,

Clark



--- twistd.py.orig	Wed Mar 19 16:21:46 2003
+++ twistd.py	Thu Mar 20 12:37:56 2003
@@ -43,7 +43,7 @@
 
 
 class ServerOptions(usage.Options):
-    synopsis = "Usage: twistd [options]"
+    synopsis = "Usage: twistd [options] [start|stop|restart]"
 
     optFlags = [['nodaemon','n',  "don't daemonize"],
                 ['savestats', None, "save the Stats object rather than the text output of the profiler."],
@@ -87,6 +87,13 @@
                    'This will only take effect if the application to be run has an application '
                    'name.']]
 
+    subCommands = [['start', None, usage.Options, 
+                    'starts the application requested (default)'],
+                   ['stop', None, usage.Options,
+                    'shuts the given application down if it is running'],
+                   ['restart',None, usage.Options,
+                    'restarts the application']] 
+
     def opt_plugin(self, pkgname):
         """read config.tac from a plugin package, as with -y
         """
@@ -211,6 +218,31 @@
     import pdb
     pdb.set_trace()
 
+def signalApp(config, signal = 0):
+    if os.path.exists(config['pidfile']):
+        try:
+            pid = int(open(config['pidfile']).read())
+        except ValueError:
+            sys.exit('Pidfile %s contains non numeric value' % config['pidfile'])
+
+        try:
+            os.kill(pid, signal)
+        except OSError, why:
+            if why[0] == errno.ESRCH:
+                # The pid doesnt exists.
+                if not config['quiet']:
+                    print 'Removing stale pidfile %s' % config['pidfile']
+                    os.remove(config['pidfile'])
+            else:
+                sys.exit('Can\'t check status of PID %s from pidfile %s: %s' % (pid, config['pidfile'], why[1]))
+        else:
+            if not(signal):
+                sys.exit("""\
+Another twistd server is running, PID %s\n
+This could either be a previously started instance of your application or a
+different application entirely. To start a new one, either run it in some other
+directory, or use my --pidfile and --logfile parameters to avoid clashes.
+""" %  pid)
 
 def runApp(config):
     global initRun
@@ -248,29 +280,7 @@
     # This will fix up accidental function definitions in evaluation spaces
     # and the like.
     initRun = 0
-    if os.path.exists(config['pidfile']):
-        try:
-            pid = int(open(config['pidfile']).read())
-        except ValueError:
-            sys.exit('Pidfile %s contains non numeric value' % config['pidfile'])
-
-        try:
-            os.kill(pid, 0)
-        except OSError, why:
-            if why[0] == errno.ESRCH:
-                # The pid doesnt exists.
-                if not config['quiet']:
-                    print 'Removing stale pidfile %s' % config['pidfile']
-                    os.remove(config['pidfile'])
-            else:
-                sys.exit('Can\'t check status of PID %s from pidfile %s: %s' % (pid, config['pidfile'], why[1]))
-        else:
-            sys.exit("""\
-Another twistd server is running, PID %s\n
-This could either be a previously started instance of your application or a
-different application entirely. To start a new one, either run it in some other
-directory, or use my --pidfile and --logfile parameters to avoid clashes.
-""" %  pid)
+    signalApp(config)
 
     if config['logfile'] == '-':
         if not config['nodaemon']:
@@ -457,6 +467,19 @@
             log.err("--report-profile specified but application has no name (--appname unspecified)")
     log.msg("Server Shut Down.")
 
+def stopApp(config):
+    from signal import SIGTERM
+    from os.path import exists
+    from time import sleep
+    signalApp(config, SIGTERM)
+    nWait = 0  # processes do not die instantly
+    while exists(config['pidfile']) and nWait < 20:
+        sleep(.1)
+        nWait += 1
+
+def restartApp(config):
+    stopApp(config)
+    runApp(config)
 
 def run():
     # make default be "--help"
@@ -471,4 +494,7 @@
         print "%s: %s" % (sys.argv[0], ue)
         os._exit(1)
 
+    cmd = getattr(config,'subCommand','start')
+    if 'stop'    == cmd: return stopApp(config)
+    if 'restart' == cmd: return restartApp(config)
     runApp(config)



From glyph at twistedmatrix.com  Thu Mar 20 14:52:52 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 20 Mar 2003 15:52:52 -0600
Subject: [Twisted-Python] odd problem with daemonization?
In-Reply-To: <20030320070307.GA31415@lapdog>
Message-ID: <4C9F359E-5B1E-11D7-BB9F-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Thursday, March 20, 2003, at 01:03 AM, Tommi Virtanen wrote:

> On Wed, Mar 19, 2003 at 12:02:46AM -0600, Glyph Lefkowitz wrote:
>> The reason that you're having this problem is that on the C++ side of
>> things, FD 0,1,2 are just normal FDs.
>
> 	Give up hope of being able to process the data written to fd 1
> 	or 2 directly by the C part, and dup2 /dev/null to 0, 1 and 2?

Hmm.  What about using pipes that are funneled to the logger for 1 and 
2, and just dup2'ing 0 to /dev/null?
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+ejg5vVGR4uSOE2wRAsU0AJ9/ajbl4Opm3fawaw3hpBY2zhztUACfSS4p
ZxhdWIQtJfjXehNB6i8f9ds=
=oYUh
-----END PGP SIGNATURE-----




From jasper at peak.org  Thu Mar 20 15:20:36 2003
From: jasper at peak.org (Jasper Phillips)
Date: Thu, 20 Mar 2003 14:20:36 -0800 (PST)
Subject: [Twisted-Python] Problems with PB and Jelly...
In-Reply-To: <HOEEKPCOKELHCNIJNMAGCEEECKAA.sean@twistedmatrix.com>
Message-ID: <Pine.LNX.4.44.0303201315350.18841-100000@localhost.localdomain>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Wed, 19 Mar 2003, Sean Riley wrote:

Thanks for your response!

> The "Module not allowed" exception means that you need to call
> setCopierForClass for the class. This maps a server-side class string to a
> client side class so the Jelly knows what type of object to create on the
> client.  For example:
> 
> pb.setCopierForClass('MyApp.game.server.door.Door', RemoteDoor)
> 
> This is usually done at the bottom of the file that the class client-side is
> defined in.

I thought this was what pb.SetUnjellableForClass() was for...  Inspecting
pb.py leads to flavors.py, where I see that setCopierForClass is actually a
reference to setUnjellyableForClass.  So I'm already doing this -- note that
I'm not getting class not allowed exceptions, but module not allowed.

Moreover following the logic through to it's culmination in
jelly.SecurityOptions.allowTypes(), I still can't see how this could affect
which modules are allowed.

It looks like I need to call jelly.globalSecurity.allowInstancesOf()
directly.  Probably in a similar manner to how jelly.SetUnjellyableForClass()
calls globalSecuirty.allowTypes().  Actually, this looks like a bug:
shouldn't SetUnjellyableForClass() call allowInstancesOf() rather than
allowTypes()?

> As far the inheritance, you should only to inherit from RemoteCopy for
> client side objects, not both pb.Copyable and pb.RemoteCopy...

The objects can go both ways, and so it is easiest to set them all to inherit
from both.  This is what's suggested by the documention, so i figured it
shouldn't hurt anything.

> The "setCopyableState" idiom for constructing remote classes may seem
> onerous at first, but its use really is necessary. Distributed objects _are_
> different from regular local objects and the requirements for managing them
> are different too. One of the benefits of PB is its inherent security
> model - it is far more secure and resistant to hackery than using Pickle.
> Pickle's internal use of Python's eval function makes it very scary to
> unserialized Pickled objects on a server...

I do like the security, and many aspects of the architecture are quite nice!

Looking more closely at jelly.py I see that I probably don't need to worry
about setCopyableState(), as it seems to do it's business without relying
upon __init__, and thus __init__ can still be used traditionally.

- -Jasper

> -----Original Message-----
> Sent: Wednesday, March 19, 2003 6:04 PM
> Subject: [Twisted-Python] Problems with PB and Jelly...
> 
> I'm new to twisted, and attempting to use it for networkable gaming;
> unfortunately I've run into some problems.
> 
> I have a Perspective <-> Referenceable server/client setup, and am trying to
> pass objects between them.  Following the online docs I've set all the
> relavent classes to inherit from pb.Copyable + pb.RemoteCopy, and passed
> them
> all to pb.setUnjellyableForClass.
> 
> However, I still get "Module not allowed" exceptions raised in
> twisted.spread.jelly.py line 523.  Looking more closely, I see that modules
> are not allowed unless passed to SecurityOptions.allowModules(), which is
> only called from SecurityOptions.allowInstancesOf(), which is not exposed
> through pb...
> 
> In short I don't see how the example code on:
> http://twistedmatrix.com/documents/howto/pb-copyable
> could possibly work!  Is it indeed necessary to call allowInstancesOf()
> directly?  Hopefully I am just missing something... :-)
> 
> 
> I'm also unsure what to make of the last bullet under "Things To Watch Out
> For" on the above webpage.  It seems unsure whether using __init__ to
> initialize transferable objects is ok...  Must I truly go and hack all
> my objects to not use __init__, and instead use setCopyableState()?
> 
> This, especially when combined with the need to inherit from pb.Copyable +
> pb.RemoteCopy, seems onerous when compared to the minimal interface of
> pickle.  I would like to be able to simple pass objects of arbitrary
> classes,
> provided I've registered them as UnJellyable.  Hopefully I'm missing
> something here as well!
> 
> Thanks in advance,
> - -Jasper
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE+ej658EpjZ7/X9bIRAn6SAKDQ3sl9QMcFYIU3OoOyh6Sh+AFqOACggT0m
PnpcFNBsxqhPk9ioke8picY=
=9G/G
-----END PGP SIGNATURE-----




From glyph at twistedmatrix.com  Thu Mar 20 15:08:32 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 20 Mar 2003 16:08:32 -0600
Subject: [Twisted-Python] supporting start/stop/restart behavior
In-Reply-To: <20030320180858.GA33168@doublegemini.com>
Message-ID: <7CCA809A-5B20-11D7-BB9F-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Thursday, March 20, 2003, at 12:08 PM, Clark C. Evans wrote:

> Can be 'started'   using:     twistd -y test.py
>    and 'stopped'   using:     twistd -y test.py stop
>    and 'restarted' using:     twistd -y test.py restart

I think I like this patch, because if I understand correctly, -y isn't 
a requirement :-).  This should work fine with 'twistd -f test.tap 
restart', correct?

There should probably be some more defined interactions with 
persistence.  But I like the direction.  Can some other 
twisted.internet wizard evaluate as well?
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+ejvjvVGR4uSOE2wRAtDeAKCUPwrCFcTka5IrjmB2VrNY5jXnCgCfSUuE
X8a9qoPkCOk7kZpb9+a/GNs=
=dMH0
-----END PGP SIGNATURE-----




From jasper at peak.org  Thu Mar 20 16:54:39 2003
From: jasper at peak.org (Jasper Phillips)
Date: Thu, 20 Mar 2003 15:54:39 -0800 (PST)
Subject: [Twisted-Python] Problems with PB and Jelly...
In-Reply-To: <Pine.LNX.4.44.0303201315350.18841-100000@localhost.localdomain>
Message-ID: <Pine.LNX.4.44.0303201542520.27156-100000@localhost.localdomain>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Thu, 20 Mar 2003, Jasper Phillips wrote:
> On Wed, 19 Mar 2003, Sean Riley wrote:
> 
> Thanks for your response!
> 
> > The "Module not allowed" exception means that you need to call
> > setCopierForClass for the class. This maps a server-side class string to a
> > client side class so the Jelly knows what type of object to create on the
> > client.  For example:
> >
> > pb.setCopierForClass('MyApp.game.server.door.Door', RemoteDoor)
> >
> > This is usually done at the bottom of the file that the class client-side is
> > defined in.
> 
> I thought this was what pb.SetUnjellableForClass() was for...  Inspecting
> pb.py leads to flavors.py, where I see that setCopierForClass is actually a
> reference to setUnjellyableForClass.  So I'm already doing this -- note that
> I'm not getting class not allowed exceptions, but module not allowed.
> 
> Moreover following the logic through to it's culmination in
> jelly.SecurityOptions.allowTypes(), I still can't see how this could affect
> which modules are allowed.
> 
> It looks like I need to call jelly.globalSecurity.allowInstancesOf()
> directly.  Probably in a similar manner to how jelly.SetUnjellyableForClass()
> calls globalSecuirty.allowTypes().  Actually, this looks like a bug:
> shouldn't SetUnjellyableForClass() call allowInstancesOf() rather than
> allowTypes()?

I see my error now!  I was missing a call to SetUnjellyableForClass() (I
should use SetUnjellyableForClassTree() ).

The "module not allowed" exception is misleading, and stems from what appears
to be an obsolete branch "else" branch of jelly._Unjellier.unjelly(), judging
by the fact that it uses the temp variable jelType for something different
than the "if" branch.

Sorry for all the fuss. :-(
- -Jasper

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE+elTK8EpjZ7/X9bIRAqcRAJ9M6OcyjpsqZ08axlXHErB9k/ZLzwCg/dTe
jLo18sFG5VDnw+YO5E16NxU=
=5xdl
-----END PGP SIGNATURE-----




From tv at twistedmatrix.com  Thu Mar 20 22:48:09 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Fri, 21 Mar 2003 07:48:09 +0200
Subject: [Twisted-Python] odd problem with daemonization?
In-Reply-To: <4C9F359E-5B1E-11D7-BB9F-000393C9700E@twistedmatrix.com>
References: <20030320070307.GA31415@lapdog> <4C9F359E-5B1E-11D7-BB9F-000393C9700E@twistedmatrix.com>
Message-ID: <20030321054809.GA28751@lapdog>

On Thu, Mar 20, 2003 at 03:52:52PM -0600, Glyph Lefkowitz wrote:
> >	Give up hope of being able to process the data written to fd 1
> >	or 2 directly by the C part, and dup2 /dev/null to 0, 1 and 2?
> 
> Hmm.  What about using pipes that are funneled to the logger for 1 and 
> 2, and just dup2'ing 0 to /dev/null?

	That would work. It does make the log weirdly out-of-sync as the
	pipe buffers, but otherwise it's ok.

-- 
:(){ :|:&};:



From cce at clarkevans.com  Fri Mar 21 14:01:17 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Fri, 21 Mar 2003 21:01:17 +0000
Subject: [Twisted-Python] supporting start/stop/restart behavior
In-Reply-To: <7CCA809A-5B20-11D7-BB9F-000393C9700E@twistedmatrix.com>
References: <20030320180858.GA33168@doublegemini.com> <7CCA809A-5B20-11D7-BB9F-000393C9700E@twistedmatrix.com>
Message-ID: <20030321210117.GA40172@doublegemini.com>

On Thu, Mar 20, 2003 at 04:08:32PM -0600, Glyph Lefkowitz wrote:
| On Thursday, March 20, 2003, at 12:08 PM, Clark C. Evans wrote:
| >Can be 'started'   using:     twistd -y test.py
| >   and 'stopped'   using:     twistd -y test.py stop
| >   and 'restarted' using:     twistd -y test.py restart
| 
| I think I like this patch, because if I understand correctly, -y isn't 
| a requirement :-).  This should work fine with 'twistd -f test.tap 
| restart', correct?

Correct.  It is 'othogonal' to the other functions of twistd.

| There should probably be some more defined interactions with 
| persistence.  But I like the direction.  Can some other 
| twisted.internet wizard evaluate as well?

Given that it sends the appropriate signal (shutdown), if
taps are used it should save/restore appropriately.

Clark



From dp at twistedmatrix.com  Fri Mar 21 13:58:51 2003
From: dp at twistedmatrix.com (Donovan Preston)
Date: Fri, 21 Mar 2003 12:58:51 -0800
Subject: [Twisted-Python] supporting start/stop/restart behavior
In-Reply-To: <20030321210117.GA40172@doublegemini.com>
Message-ID: <EB34FE68-5BDF-11D7-9BA4-000393B3EC2C@twistedmatrix.com>

On Friday, March 21, 2003, at 01:01 PM, Clark C. Evans wrote:
>
> Given that it sends the appropriate signal (shutdown), if
> taps are used it should save/restore appropriately.

One big question is what happens when you do a restart; does it stop 
the server and then start it with the original tap, or with the 
-shutdown.tap?

I vote for it restarting the -shutdown.tap, but there are plenty of 
reasons not to do this, too.

Donovan




From cce at clarkevans.com  Fri Mar 21 15:41:34 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Fri, 21 Mar 2003 22:41:34 +0000
Subject: [Twisted-Python] supporting start/stop/restart behavior
In-Reply-To: <EB34FE68-5BDF-11D7-9BA4-000393B3EC2C@twistedmatrix.com>
References: <20030321210117.GA40172@doublegemini.com> <EB34FE68-5BDF-11D7-9BA4-000393B3EC2C@twistedmatrix.com>
Message-ID: <20030321224134.GA40909@doublegemini.com>

On Fri, Mar 21, 2003 at 12:58:51PM -0800, Donovan Preston wrote:
| One big question is what happens when you do a restart; does it stop 
| the server and then start it with the original tap, or with the 
| -shutdown.tap?
| 
| I vote for it restarting the -shutdown.tap, but there are plenty of 
| reasons not to do this, too.

I don't have an opinion, other than pointing out that if 
--no_save is used, then there won't be a -shutdown.tap 
and therefore, this sort of feature would be disabled.   

Proposed implementation:

  Suppose that xxx.tap was the initial application file
  and that it was started with twistd -f xxx.tap; on 
  shutdown this would create a xxx-shutdown.tap

  Then, the 'restart' command would do the following:

    1) if a xxx-initial.tap file isn't there, it 
       should copy xxx.tap to xxx-initial.tap

    2) if a xxx-shutdown.tap file exists, it should
       copy xxx-shutdown.tap to xxx.tap

    3) it should then follow the same process
       as 'start'

On a related topic, I would very much like --python
to imply --no_save ; if someone wants to use taps then
they should write their app.py file to use app.save
functionality to make a .tap file.   It is those people
who arn't using '.tap' saved state files that, in most
cases, will be using the --python option.

Best,

Clark



From tonylim at htmlab.net  Fri Mar 21 22:14:41 2003
From: tonylim at htmlab.net (Anthony Lim)
Date: Sat, 22 Mar 2003 13:14:41 +0800
Subject: [Twisted-Python] game server
Message-ID: <000501c2f031$f1a71d40$5801000a@hermes>

Hi:

 

I am new to Twisted but after browsing the Twisted web site feels that
it may be what I need. I am developing a game server for online
multiplayer turn-based games like the one in http://games.yahoo.com
<http://games.yahoo.com/> . Does anyone have any experience in applying
Twisted in this area? Need all the advice I can get. 

 

I am looking at supporting 20K users with 10% online, and the
possibility of scaling up to 200,000 users or more. Can Twisted be used
for supporting these figures? Any benchmark I can refer to? 

 

Regards

Anthony Lim

 

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20030322/fdfa7f56/attachment.html>

From anthony.lim at converzal.com  Fri Mar 21 22:12:26 2003
From: anthony.lim at converzal.com (Anthony)
Date: Sat, 22 Mar 2003 13:12:26 +0800
Subject: [Twisted-Python] game server
Message-ID: <000001c2f031$a117f200$5801000a@hermes>

Hi:

 

I am new to Twisted but after browsing the Twisted web site feels that
it may be what I need. I am developing a game server for online
multiplayer turn-based games like the one in http://games.yahoo.com
<http://games.yahoo.com/> . Does anyone have any experience in applying
Twisted in this area? Need all the advice I can get. 

 

I am looking at supporting 20K users with 10% online, and the
possibility of scaling up to 200,000 users or more. Can Twisted be used
for supporting these figures? Any benchmark I can refer to? 

 

Regards

Anthony Lim

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20030322/fc76f0b6/attachment.html>

From s9900164 at sms.ed.ac.uk  Sat Mar 22 05:04:39 2003
From: s9900164 at sms.ed.ac.uk (Joe Halliwell)
Date: Sat, 22 Mar 2003 12:04:39 +0000
Subject: [Twisted-Python] game server
In-Reply-To: <000501c2f031$f1a71d40$5801000a@hermes>
References: <000501c2f031$f1a71d40$5801000a@hermes>
Message-ID: <200303221204.40392.s9900164@sms.ed.ac.uk>

Hi,

I've been sporadically developing some code for a tic-tac-toe client and 
server upon which I intended to base a tutorial. I've not got around to 
starting the document, but I'd be happy to make the code available to you 
and/or any other interested parties.

Thanks,
Joe

On Saturday 22 Mar 2003 5:14 am, Anthony Lim wrote:
> Hi:
>
>
>
> I am new to Twisted but after browsing the Twisted web site feels that
> it may be what I need. I am developing a game server for online
> multiplayer turn-based games like the one in http://games.yahoo.com
> <http://games.yahoo.com/> . Does anyone have any experience in applying
> Twisted in this area? Need all the advice I can get.
>
>
>
> I am looking at supporting 20K users with 10% online, and the
> possibility of scaling up to 200,000 users or more. Can Twisted be used
> for supporting these figures? Any benchmark I can refer to?
>
>
>
> Regards
>
> Anthony Lim




From missive at hotmail.com  Sat Mar 22 19:30:06 2003
From: missive at hotmail.com (Lee Harr)
Date: Sun, 23 Mar 2003 02:30:06 +0000
Subject: [Twisted-Python] Re: game server
Message-ID: <BAY2-F13d6QR7j1HaKt00076fe2@hotmail.com>

>I've been sporadically developing some code for a tic-tac-toe client and
>server


That's funny. I have one of those too...  :o)

http://www.nongnu.org/pygsear/

Look in the examples/twist_tac_toe/ directory in the distribution.






_________________________________________________________________
The new MSN 8: smart spam protection and 2 months FREE*  
http://join.msn.com/?page=features/junkmail




From s9900164 at sms.ed.ac.uk  Sat Mar 22 15:51:03 2003
From: s9900164 at sms.ed.ac.uk (Joe Halliwell)
Date: Sat, 22 Mar 2003 22:51:03 +0000
Subject: [Twisted-Python] game server
In-Reply-To: <200303221204.40392.s9900164@sms.ed.ac.uk>
References: <000501c2f031$f1a71d40$5801000a@hermes> <200303221204.40392.s9900164@sms.ed.ac.uk>
Message-ID: <200303222251.04324.s9900164@sms.ed.ac.uk>

Since a couple of people have expressed interest in my tutorial-to-be, and I 
have no time to work on it at present, I've posted what little there is on:

http://bigred.homelinux.org/~joe/tictactoe/

It's horrible hacky code and it doesn't seem to work with the latest (CVS) 
Twisted, but hopefully there'll be something there of use...

Cheers,
Joe

On Saturday 22 Mar 2003 12:04 pm, Joe Halliwell wrote:
> Hi,
>
> I've been sporadically developing some code for a tic-tac-toe client and
> server upon which I intended to base a tutorial. I've not got around to
> starting the document, but I'd be happy to make the code available to you
> and/or any other interested parties.
>
> Thanks,
> Joe
>
> On Saturday 22 Mar 2003 5:14 am, Anthony Lim wrote:
> > Hi:
> >
> >
> >
> > I am new to Twisted but after browsing the Twisted web site feels that
> > it may be what I need. I am developing a game server for online
> > multiplayer turn-based games like the one in http://games.yahoo.com
> > <http://games.yahoo.com/> . Does anyone have any experience in applying
> > Twisted in this area? Need all the advice I can get.
> >
> >
> >
> > I am looking at supporting 20K users with 10% online, and the
> > possibility of scaling up to 200,000 users or more. Can Twisted be used
> > for supporting these figures? Any benchmark I can refer to?
> >
> >
> >
> > Regards
> >
> > Anthony Lim
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From warner at lothar.com  Sun Mar 23 00:34:26 2003
From: warner at lothar.com (Brian Warner)
Date: Sat, 22 Mar 2003 23:34:26 -0800 (PST)
Subject: [Twisted-Python] Problems with PB and Jelly...
References: <Pine.LNX.4.44.0303191537250.20559-100000@localhost.localdomain>
Message-ID: <20030322.233426.61636994.warner@lothar.com>

> I have a Perspective <-> Referenceable server/client setup, and am trying to
> pass objects between them.  Following the online docs I've set all the
> relavent classes to inherit from pb.Copyable + pb.RemoteCopy, and passed them
> all to pb.setUnjellyableForClass.

I'll take responsibility for that one (I wrote those docs :). If the classes
behave the same way on both ends, then it can make sense to inherit from both
Copyable and RemoteCopy. If objects are supposed to behave differently
depending upon whether they are the "home" or the "away" form, then you'll
want two classes, where the "home" form is pb.Copyable and the receiving
"away" form is pb.RemoteCopy. Often this depends upon whether the object
really has a home: if it is just a container for some chunk of state, and
doesn't hold any references to other objects, then it doesn't really have a
home and you can use the dual-inheritance trick to cut down on some typing.
In particular classes which could be replaced by dictionaries without losing
any functionality fall into this category.

You still have to keep in mind that the setCopyableState method is the point
where you get to exercise security. The 'state' provided to this method comes
from malicious invaders intent upon compromising your application. Make sure
it can deal with whatever evil it is given.

> I'm also unsure what to make of the last bullet under "Things To Watch Out
> For" on the above webpage.  It seems unsure whether using __init__ to
> initialize transferable objects is ok...  Must I truly go and hack all
> my objects to not use __init__, and instead use setCopyableState()?

To be precise, the received objects are created with a hack that creates an
object of a dummy class, then transforms it into the correct class, then runs
setCopyableState to populate the attributes. By doing this, it avoids running
the new class' __init__ method altogether. When the object is created by you
(by using the class name as a callable), it will run __init__. When it is
created in response to a received serialized instance, it will not run
__init__ but will run setCopyableState instead. This lets you set up objects
differently in the two different situations.

> The "module not allowed" exception is misleading, and stems from what
> appears to be an obsolete branch "else" branch of
> jelly._Unjellier.unjelly(), judging by the fact that it uses the temp
> variable jelType for something different than the "if" branch.

I think you might be right. We have a review of PB scheduled for the PyCon
sprint next tuesday.. I've added that code to the list of stuff to be
examined. We'll try to clear out all the dead code on that day.

cheers,
 -Brian



From jasper at peak.org  Sun Mar 23 04:59:15 2003
From: jasper at peak.org (Jasper Phillips)
Date: Sun, 23 Mar 2003 03:59:15 -0800 (PST)
Subject: [Twisted-Python] Problems with PB and Jelly...
In-Reply-To: <20030322.233426.61636994.warner@lothar.com>
Message-ID: <Pine.LNX.4.44.0303230240270.31265-100000@localhost.localdomain>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Sat, 22 Mar 2003, Brian Warner wrote:

> > I have a Perspective <-> Referenceable server/client setup, and am trying
> > to pass objects between them.  Following the online docs I've set all the
> > relavent classes to inherit from pb.Copyable + pb.RemoteCopy, and passed
> > them all to pb.setUnjellyableForClass.
> 
> I'll take responsibility for that one (I wrote those docs :). If the classes
> behave the same way on both ends, then it can make sense to inherit from both
> Copyable and RemoteCopy. If objects are supposed to behave differently
> depending upon whether they are the "home" or the "away" form, then you'll
> want two classes, where the "home" form is pb.Copyable and the receiving
> "away" form is pb.RemoteCopy.

The way you wrote it in the docs made sense to me!  As my objects are treated
the same on either side, I chose to use multiple inheritence to avoid
tripling the number of classes I needed.

> Often this depends upon whether the object really has a home: if it is just
> a container for some chunk of state, and doesn't hold any references to
> other objects, then it doesn't really have a home and you can use the
> dual-inheritance trick to cut down on some typing.
[snip]

Hmmmm.  You're implying that the state can't hold references to other
objects?  That might explain an exception I'm getting, which I'll describe
below.  If this is true, is there some easy way around this, or do I need
a custom setCopyableState()?

> > I'm also unsure what to make of the last bullet under "Things To Watch Out
> > For" on the above webpage.  It seems unsure whether using __init__ to
> > initialize transferable objects is ok...  Must I truly go and hack all
> > my objects to not use __init__, and instead use setCopyableState()?
> 
> To be precise, the received objects are created with a hack that creates an
> object of a dummy class, then transforms it into the correct class, then runs
> setCopyableState to populate the attributes. By doing this, it avoids running
> the new class' __init__ method altogether. When the object is created by you
> (by using the class name as a callable), it will run __init__. When it is
> created in response to a received serialized instance, it will not run
> __init__ but will run setCopyableState instead. This lets you set up objects
> differently in the two different situations.

I've since gone and investigated more close what's going on.  I've used this
hack before, and it was exactly what I was hoping to see.

However, I'm sometimes getting an exception when the actual dictionary
copying is done, as something other than a dict is being copied into
__dict__.  At this point the "jelType" is "dereference"...

Suddenly, I wonder if this is because I'm using a circular reference?
I have a "map" which contains "cells", which contain "links" having
a reference to "map"...


Damn, it looks like this might be the cuplrit.  "reference" jelyTypes are
recursively descended into before they are stored, and if a dereference is
found before it's stored... some sort of _Dereference object is created?
An attempt is then made to copy this into __dict__, and boom.

I can think of two ways to avoid this problem: 2 passes, or creating
instances and storing a ref to them before recursing to determine their their
state.  Perhaps this _Dereference is intended to be replaced with a real
reference in some sort of 2nd pass?

I'll have to look into this more closely latter.  At first glance it appears
to be something best fixed in twisted itself rather than a local
setCopyableState()... at least to this twisted newbie. ;-)

> > The "module not allowed" exception is misleading, and stems from what
> > appears to be an obsolete branch "else" branch of
> > jelly._Unjellier.unjelly(), judging by the fact that it uses the temp
> > variable jelType for something different than the "if" branch.
> 
> I think you might be right. We have a review of PB scheduled for the PyCon
> sprint next tuesday.. I've added that code to the list of stuff to be
> examined. We'll try to clear out all the dead code on that day.

I've since looked at this code more closely as well.  The "else" branch in
question is most definitely _not_ dead code, but it is confusing.  ;-)

jelly._Unjellier.unjelly() is used in two manners, which you can see fairly
easily by printing out the local variable "jelType".  Sometimes this is a
"type" name that gets munged into a _unjelly_"type" method call (ie the final
"if" branch), and other times "jelType" is a class's local import name, which
is parsed into recursive unjelly commands (the "else" branch).

Then again, that's what I think is going on.  Hard to say, since I'm still
getting exceptions out of it I don't quite grasp. ;-(

- -Jasper

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE+faGY8EpjZ7/X9bIRAq3bAKDOyRV9oB98xDlTlUdx9rgEz1eItgCgx4Yu
7S3uLjnNpZ1JLDNEmMhWT9Y=
=+Ilk
-----END PGP SIGNATURE-----




From missive at hotmail.com  Sun Mar 23 07:19:37 2003
From: missive at hotmail.com (Lee Harr)
Date: Sun, 23 Mar 2003 14:19:37 +0000
Subject: [Twisted-Python] PATCH: doc/howto/conch_client.html
Message-ID: <BAY2-F203atao8KK8Zt00077972@hotmail.com>

Hi;

Found a typo in one of the examples...  Also, I am getting an odd
message from cvs at the end of the file... Not sure what to make
of that.


9:14 >cvs diff -u conch_client.html
Index: conch_client.html
===================================================================
RCS file: /cvs/Twisted/doc/howto/conch_client.html,v
retrieving revision 1.2
diff -u -r1.2 conch_client.html
--- conch_client.html   18 Mar 2003 05:11:45 -0000      1.2
+++ conch_client.html   23 Mar 2003 14:18:30 -0000
@@ -114,7 +114,7 @@
     name = 'session'

     def channelOpen(self, data):
-        d = self.conn.sendRequest(self, 'exec', commons.NS('cat'),
+        d = self.conn.sendRequest(self, 'exec', common.NS('cat'),
                                   wantReply = 1)
         d.addCallback(self._cbSendRequest)
         self.catData = ''
@@ -154,4 +154,4 @@
but we will still receive data through dataReceived().  The closed() method 
is called
when both sides of the connection are closed, and we use it to display the 
data we
received (which should be the same as the data we sent.)</p>
-</body></html>
\ No newline at end of file
+</body></html>






_________________________________________________________________
Tired of spam? Get advanced junk mail protection with MSN 8. 
http://join.msn.com/?page=features/junkmail




From smurf at noris.de  Sun Mar 23 13:04:31 2003
From: smurf at noris.de (Matthias Urlichs)
Date: Sun, 23 Mar 2003 21:04:31 +0100
Subject: [Twisted-Python] read timeouts ?
Message-ID: <200303232104.31413@smurf.noris.de>

Hi,

I have one rather large problem with using Twisted as a Web server (and in 
fact most other kinds of server), which is that there is no timeout.

Thus, stale connections keep piling up, and sooner or later the open file 
limit is reached.  :-(

Suggestions as to where to place some time-out code are appreciated; I'm 
not that well-read in the Twisted internals.

-- 
Matthias Urlichs    |    noris network AG    |    http://smurf.noris.de/
-- 
You can take all the impact that science considerations have on funding
decisions at NASA, put them in the navel of a flea, and have room left
over for a caraway seed and Tony Calio's heart.
                -- F. Allen




From twisted at itamarst.org  Sun Mar 23 13:33:21 2003
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 23 Mar 2003 15:33:21 -0500
Subject: [Twisted-Python] read timeouts ?
In-Reply-To: <200303232104.31413@smurf.noris.de>
References: <200303232104.31413@smurf.noris.de>
Message-ID: <20030323153321.5897c83a.twisted@itamarst.org>

On Sun, 23 Mar 2003 21:04:31 +0100
Matthias Urlichs <smurf at noris.de> wrote:

> I have one rather large problem with using Twisted as a Web server
> (and in fact most other kinds of server), which is that there is no
> timeout.
> 
> Thus, stale connections keep piling up, and sooner or later the open
> file limit is reached.  :-(

I am hoping to get this done at the sprint this week.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From warner at lothar.com  Sun Mar 23 14:17:13 2003
From: warner at lothar.com (Brian Warner)
Date: Sun, 23 Mar 2003 13:17:13 -0800 (PST)
Subject: [Twisted-Python] PATCH: doc/howto/conch_client.html
References: <BAY2-F203atao8KK8Zt00077972@hotmail.com>
Message-ID: <20030323.131713.126579701.warner@lothar.com>

"Lee Harr" <missive at hotmail.com> writes:
> 
> Found a typo in one of the examples...  Also, I am getting an odd
> message from cvs at the end of the file... Not sure what to make
> of that.

Applied.. thanks!

The CVS message is complaining about the fact that the original file ended
with the '>' at the end of '</html>'. 'diff' (as well as some editors) really
prefers files to be composed of complete lines, so it warns you when one of
the files being compared ends with a newline ('</html>\n') and the other
doesn't.

thanks,
 -Brian



From warner at lothar.com  Sun Mar 23 15:22:53 2003
From: warner at lothar.com (Brian Warner)
Date: Sun, 23 Mar 2003 14:22:53 -0800 (PST)
Subject: [Twisted-Python] Problems with PB and Jelly...
References: <Pine.LNX.4.44.0303230240270.31265-100000@localhost.localdomain>
Message-ID: <20030323.142253.52688406.warner@lothar.com>

> Hmmmm.  You're implying that the state can't hold references to other
> objects?  That might explain an exception I'm getting, which I'll describe
> below.  If this is true, is there some easy way around this, or do I need
> a custom setCopyableState()?

The state *can* hold references to other objects (as long as those objects
are themselves somehow transferrable, like pb.Copyable). I draw a distinction
between having or not having references to other objects because data that is
standalone makes more sense when transferred to other memory spaces.

Imagine your data structures make up a big directed graph. The edges are
references, each contained in one object and pointing at another. When you
copy one of the objects out to another memory space, you're plucking a node
out of the graph and putting it somewhere else. What happens to the edges?

It depends upon what flavor the referenced objects inherit from. If they are
pb.Referenceable, the edges turn into pb.RemoteReferences, and it's as if the
edge-arrows are stretched to run from the object's new location back to the
home memory space. If they are pb.Copyable, the reference is followed and the
target object copied just like the original object was. If they are neither,
you get an InsecureJelly exception. The idea is to prevent you from
accidentially copying out objects that you didn't intend to be shared.

So if the object points to a lot of other objects, those referents make up an
environment. If the environment doesn't come with the object, then that
object could be said to have a "home", and then it makes sense to talk about
the "home" version of an object versus a copy that lives somewhere "away"
from that home. If the object is mostly standalone, then it doesn't matter
where the object lives and the home/away distinction is moot.

> However, I'm sometimes getting an exception when the actual dictionary
> copying is done, as something other than a dict is being copied into
> __dict__.  At this point the "jelType" is "dereference"...

Which exception is being raised? If it's the InsecureJelly, then you're
referencing an object that doesn't inherit from one of the PB flavors. You
either need to remove that reference in your getStateToCopy() method (cut the
edge-arrow) or you need to make the referenced objects inherit from something
like pb.Copyable.

If it's something else, let us know (and provide a small test case??) so we can
fix it at the sprint.

> Damn, it looks like this might be the cuplrit.  "reference" jelyTypes are
> recursively descended into before they are stored, and if a dereference is
> found before it's stored... some sort of _Dereference object is created?
> An attempt is then made to copy this into __dict__, and boom.

Yes, the current Jelly code looks for objects that are referenced multiple
times in the same jellying call and marks them with "reference" tags. When
another reference to the same object is detected, it is jellied with a
"dereference" tag that points to the earlier "reference" marker. The "cook",
"prepare", and "preserve" methods are used to implement these multiple
phases. Circular or recursive references are handled because the reference
number is allocated when we start to jelly the object, even though the state
is not yet known.

This scheme will change on Tuesday. The "reference" tags will go away and be
replaced by an implicit marker that is notionally inserted every time we
start jellying a new mutable object. The "dereference" tags will then point
to these implicit markers. This should improve performance quite a bit, and
will pave the way to a combined jelly+banana extension module that should
give an enormous speedup (doing everything in C).

> I'll have to look into this more closely latter.  At first glance it appears
> to be something best fixed in twisted itself rather than a local
> setCopyableState()... at least to this twisted newbie. ;-)

Definitely. Twisted should "just handle" arbitrary reference graphs with no
problems right now.. the change planned for the PyCon sprint will make it
handle them faster and with less on-wire traffic than before.

> I've since looked at this code more closely as well.  The "else" branch in
> question is most definitely _not_ dead code, but it is confusing.  ;-)

I think _unjelly_instance might be dead code, because I don't see anywhere an
"instance" tag could be inserted into the stream. That might be compatibility
with an older version of the jelly side, though. Another item on the PB
sprint will be to implement proper version markers so this sort of thing can
be done properly next time.

cheers,
 -Brian



From mark at metaconcepts.com  Sun Mar 23 15:03:57 2003
From: mark at metaconcepts.com (Mark Brady)
Date: Sun, 23 Mar 2003 22:03:57 +0000
Subject: [Twisted-Python] Twisted https support?
Message-ID: <5.2.0.9.0.20030323220324.00a800b8@mail.metaconcepts.com>

Hello,
	I am new to twisted and having a problem getting https support working. I 
can get the twisted webserver up and running and everything including woven 
works fine however the https option for mktap web just displays the list of 
mktap web options as if I had just typed 'mktap web --help' when I actually 
typed 'mktap web --https=8081'. The port and logfile options work fine. I 
am using activestate python 2.2.2 with twisted 1.0.3 on windows 2000 sp3. I 
have a self signed server.pem in the directory (created using suns 
keytool). Am I using the https option incorrectly? Thank you for your help,

Regards,
Mark Brady. 




From bob at redivi.com  Sun Mar 23 22:22:50 2003
From: bob at redivi.com (Bob Ippolito)
Date: Mon, 24 Mar 2003 00:22:50 -0500
Subject: [Twisted-Python] PyRendezvous has been relicensed to LGPL(!)
Message-ID: <A84BC6E0-5DB8-11D7-835F-000A95686CD8@redivi.com>

I saw on freshmeat today that PyRendezvous (  
http://radio.weblogs.com/0105002/stories/2003/01/06/ 
multicastDnsServiceDiscoverForPython.html ) has been relicensed to  
LGPL, so maybe we don't have to write our own, at least not all of it.

-bob




From glyph at twistedmatrix.com  Mon Mar 24 04:40:53 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 24 Mar 2003 05:40:53 -0600
Subject: [Twisted-Python] PyRendezvous has been relicensed to LGPL(!)
In-Reply-To: <A84BC6E0-5DB8-11D7-835F-000A95686CD8@redivi.com>
Message-ID: <786E374F-5DED-11D7-914F-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Sunday, March 23, 2003, at 11:22 PM, Bob Ippolito wrote:

> I saw on freshmeat today that PyRendezvous (  
> http://radio.weblogs.com/0105002/stories/2003/01/06/ 
> multicastDnsServiceDiscoverForPython.html ) has been relicensed to  
> LGPL, so maybe we don't have to write our own, at least not all of it.

We do tend to NIH here, but there are usually good reasons.  Here are a  
few why rewriting would be a good idea in this case:

1. I can't accept GPL'd software into Twisted if the author isn't  
willing to contribute it.  Perhaps this means we need some kind of  
'contrib' section?

2. That particular project's implementation was completely terrible; I  
may be wrong about this, because I haven't evaluated it thoroughly, but  
it's pretty well tied to threading and blocking.

3. Twisted is going to need to rely on service discovery for a lot of  
stuff, eventually.  I _want_ a version of this rewritten from scratch  
with Twisted idioms in mind.  (I also wouldn't want something this  
potentially important to the core to be off in a seldom-maintained  
'contrib' module.)
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+fu7JvVGR4uSOE2wRAokIAKCipEcWJg0q4mODehtLapPUB64IHACeLWA3
zXGf/PEDx5j16B8gI7R0JHY=
=0Zay
-----END PGP SIGNATURE-----




From bob at redivi.com  Mon Mar 24 05:11:53 2003
From: bob at redivi.com (Bob Ippolito)
Date: Mon, 24 Mar 2003 07:11:53 -0500
Subject: [Twisted-Python] PyRendezvous has been relicensed to LGPL(!)
In-Reply-To: <786E374F-5DED-11D7-914F-000393C9700E@twistedmatrix.com>
Message-ID: <CD0BB084-5DF1-11D7-835F-000A95686CD8@redivi.com>

On Monday, Mar 24, 2003, at 06:40 America/New_York, Glyph Lefkowitz  
wrote:

> On Sunday, March 23, 2003, at 11:22 PM, Bob Ippolito wrote:
>
>> I saw on freshmeat today that PyRendezvous (  
>> http://radio.weblogs.com/0105002/stories/2003/01/06/ 
>> multicastDnsServiceDiscoverForPython.html ) has been relicensed to  
>> LGPL, so maybe we don't have to write our own, at least not all of >> it.
>
> We do tend to NIH here, but there are usually good reasons.  Here are  
> a few why rewriting would be a good idea in this case:
>
> 1. I can't accept GPL'd software into Twisted if the author isn't  
> willing to contribute it.  Perhaps this means we need some kind of  
> 'contrib' section?

That's entirely true.. a contrib section would probably be pretty  
interesting, I don't know how that would work or if it would ever  
really get used though.

> 2. That particular project's implementation was completely terrible; I  
> may be wrong about this, because I haven't evaluated it thoroughly,  
> but it's pretty well tied to threading and blocking.

At a cursory glance, that's what it looked like to me as well.. but  
then I looked a little closer and saw that most of this stuff could be  
hacked apart rather easily (i.e. deleting a bunch of code) and modified  
to fit the reactor pattern.

> 3. Twisted is going to need to rely on service discovery for a lot of  
> stuff, eventually.  I _want_ a version of this rewritten from scratch  
> with Twisted idioms in mind.  (I also wouldn't want something this  
> potentially important to the core to be off in a seldom-maintained  
> 'contrib' module.)

I agree, but if we can create a throwaway prototype of zeroconf service  
discovery by modifying this module then I think we'll be much better  
off for when we do develop our own.  It'll give us a clear picture of  
how NOT to do it in Twisted, what we can and can't do with it, and how  
best to make the API because we'll have surely used one that didn't  
quite make perfect sense in the Twisted world.

-bob




From glyph at twistedmatrix.com  Mon Mar 24 05:50:10 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 24 Mar 2003 06:50:10 -0600
Subject: [Twisted-Python] PyRendezvous has been relicensed to LGPL(!)
In-Reply-To: <CD0BB084-5DF1-11D7-835F-000A95686CD8@redivi.com>
Message-ID: <25AA9582-5DF7-11D7-914F-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Monday, March 24, 2003, at 06:11 AM, Bob Ippolito wrote:

> if we can create a throwaway prototype of zeroconf service discovery 
> by modifying this module then I think we'll be much better off for 
> when we do develop our own.  It'll give us a clear picture of how NOT 
> to do it in Twisted, what we can and can't do with it, and how best to 
> make the API because we'll have surely used one that didn't quite make 
> perfect sense in the Twisted world.

Oh, there's no doubt that having this around as example code would be 
wonderful!  Doing a rapid prototype to experiment would also be good, 
although I think it may end up being easier for someone like exarkun to 
put together a prototype using the existing DNS code we have in 
twisted.names rather than actually copying this project.

I don't know enough about either to be sure, though.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD4DBQE+fv8FvVGR4uSOE2wRAt5kAJj7nI4GBOWLfAtycALoCcLjMDbQAJ46J+Ns
Xw6jnvXZM/fSe2dvSDuQLQ==
=+zW3
-----END PGP SIGNATURE-----




From exarkun at intarweb.us  Mon Mar 24 10:26:15 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Mon, 24 Mar 2003 12:26:15 -0500
Subject: [Twisted-Python] PyCon Logistics
In-Reply-To: <200302120120.h1C1KCjL017055@ratthing-b246.strakt.com>
References: <20030211.191234.596544096.washort@twistedmatrix.com> <200302120120.h1C1KCjL017055@ratthing-b246.strakt.com>
Message-ID: <20030324172615.GA14310@meson.dyndns.org>

On Wed, Feb 12, 2003 at 02:20:12AM +0100, Laura Creighton wrote:
> Thank you very much for the hotel information.
> In return: sushi information!
> 
> http://www.sushitaro.com/
> 
> Sushi Taro
> 1503 17th St., NW (P St.)
> Washington (202) 462-8999
> 
> It has been 2 years, but that was the best last time I was in D.C.
> Near Metro.
> 

  Laura has asked me to negate this recommendation for her.  She visited it
again and it was awful.

  Visit it at your peril ;)

  Jp

-- 
http://catandgirl.com/view.cgi?44
-- 
 up 4 days, 13:59, 6 users, load average: 0.00, 0.00, 0.00



From jjn at kriln.com  Mon Mar 24 14:56:46 2003
From: jjn at kriln.com (Jeremy Noetzelman)
Date: Mon, 24 Mar 2003 21:56:46 +0000 (GMT)
Subject: [Twisted-Python] Twisted, Windows, and Py2Exe
Message-ID: <20030324215446.W10883-100000@nosferatu.kriln.com>

I'm trying to get a very simple application which uses Twisted to package
properly via distutils+py2exe.  It doesn't seem to work very well, and in
fact complains about not being able to find a bunch of things (at the
distutils point in the build process)

The resulting executable doesn't run.  And at this point, it's just a
simple loop which does reactor.iterate(), and that's the extent of the
Twisted code.  W/o any Twisted code, everything works great.

Has anyone used py2exe successfully with a twisted application?

J




From jasper at peak.org  Mon Mar 24 16:02:17 2003
From: jasper at peak.org (Jasper Phillips)
Date: Mon, 24 Mar 2003 15:02:17 -0800 (PST)
Subject: [Twisted-Python] Problems with PB and Jelly...
In-Reply-To: <20030323.142253.52688406.warner@lothar.com>
Message-ID: <Pine.LNX.4.44.0303241427460.7028-100000@localhost.localdomain>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Sun, 23 Mar 2003, Brian Warner wrote:

Thanks for the response!

[snip: pb.Copyable copies all references found]

> > However, I'm sometimes getting an exception when the actual dictionary
> > copying is done, as something other than a dict is being copied into
> > __dict__.  At this point the "jelType" is "dereference"...
 
[snip]
> If it's something else, let us know (and provide a small test case??) so we
> can fix it at the sprint.

Here's the relavent end of the error:
File "..\twisted\spread\flavors.py", line 386, in setCopyableState
  self.__dict__ = state
exceptions.TypeError: __dict__ must be set to a dictionary

I've included a test case at the end of the message.

> > Damn, it looks like this might be the cuplrit.  "reference" jelyTypes are
> > recursively descended into before they are stored, and if a dereference is
> > found before it's stored... some sort of _Dereference object is created?
> > An attempt is then made to copy this into __dict__, and boom.
> 
> Yes, the current Jelly code looks for objects that are referenced multiple
> times in the same jellying call and marks them with "reference" tags. When
> another reference to the same object is detected, it is jellied with a
> "dereference" tag that points to the earlier "reference" marker. The "cook",
> "prepare", and "preserve" methods are used to implement these multiple
> phases. Circular or recursive references are handled because the reference
> number is allocated when we start to jelly the object, even though the state
> is not yet known.

The number is allocated earlier on, but it isn't stored for use by
"derference" jelTypes until after recursion, as I will attempt to describe:

Here are the relavent parts of jelly._Unjellier.  Note that the reference is
stored after it's value is recursively computed -+
                                                 |
def _unjelly_reference(self, lst):               |
    refid = lst[0]                               |
    exp   = lst[1]                               |
    o     = self.unjelly(exp)           <--------+
    ref   = self.references.get(refid)  <--------+
    if (ref is None):
        self.references[refid] = o
    elif isinstance(ref, NotKnown):
        ref.resolveDependants(o)
        self.references[refid] = o
    else:
        assert 0, "Multiple references with same ID!"
    return o

This ends up causing the following method to return a _Dereference, rather
than a state dictionary that unjelly() would normally return.  This then
results in the error I list above.

def _unjelly_dereference(self, lst):
    refid = lst[0]
    print refid #!!! added
    x = self.references.get(refid)
    if x is not None:
        return x
    der = _Dereference(refid)
    self.references[refid] = der
    return der


> This scheme will change on Tuesday. The "reference" tags will go away and be
> replaced by an implicit marker that is notionally inserted every time we
> start jellying a new mutable object. The "dereference" tags will then point
> to these implicit markers. This should improve performance quite a bit, and
> will pave the way to a combined jelly+banana extension module that should
> give an enormous speedup (doing everything in C).

Sounds good!  No point in my suggesting a fix then. ;-)  Will a new version
of twisted be released along with these changes, or would I have to go
through CVS?

[snip]

Here are 3 files for reproducing the "Unjellying a Circular Reference Bug".
Just stick them all in the same place, and start the server then the
client.

- -Jasper


Listing for objectBug.py
=-=-=-=-=-=-=-=-=-=-=-=-
from twisted.spread import pb

class ClassA( pb.Copyable, pb.RemoteCopy ):
    def __init__( self ):
        self.ref = ClassB( self )

class ClassB( pb.Copyable, pb.RemoteCopy ):
    def __init__( self, ref ):
        self.ref = ref

import sys
pb.setCopierForClassTree( sys.modules[__name__], pb.Copyable )


Listing for serverBug.py
=-=-=-=-=-=-=-=-=-=-=-=-
#/usr/bin/env python
from twisted.internet import app
from twisted.spread   import pb
from twisted.cred     import authorizer
import clientBug, objectBug

class MyPer( pb.Perspective ):
    def attached( self, client, identity ):
        self.client = client
        return pb.Perspective.attached( self, client, identity )

    def perspective_receive( self, obj ):
        self.client.callRemote( "receive", obj )

class MyService( pb.Service ):
    perspectiveClass = MyPer

    def __init__( self, serviceParent, auth ):
        pb.Service.__init__( self, "MyService", serviceParent, auth )

def startServer():
    myApp = app.Application("pbServer")
    auth  = authorizer.DefaultAuthorizer( myApp )
    s     = MyService( myApp, auth )

    s.createPerspective( "player1" ).makeIdentity( "password1" )

    myApp.listenTCP( 9000, pb.BrokerFactory( pb.AuthRoot( auth )))
    myApp.run( save=0 )

if __name__ == '__main__':
    startServer()


Listing for clientBug.py
=-=-=-=-=-=-=-=-=-=-=-=-
#/usr/bin/env python
from twisted.internet import reactor
from twisted.spread   import pb
import objectBug

class MyClient( pb.Referenceable ):
    def connect( self, ipAddress, port, user, password ):
        defer = pb.connect( ipAddress, port, user, password,
                            "MyService", client=self, timeout=3 )
        defer.addCallback( self.connected )

    def connected( self, perspective ):
        perspective.callRemote( "receive", objectBug.ClassA() )

    def remote_receive( self, obj ):
        print "Object received back"

def startClient():
    client = MyClient()
    client.connect( "localhost", 9000, "player1", "password1" )
    reactor.run()

if __name__ == '__main__':
    startClient()

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE+f45+8EpjZ7/X9bIRAr0yAJ9P2dwozcY478sVL6GKemwYoHAZmwCfYbhT
ppjMznAw88wjXItJDczxTVU=
=LvPx
-----END PGP SIGNATURE-----




From screwtape at froup.com  Mon Mar 24 17:54:03 2003
From: screwtape at froup.com (screwtape at froup.com)
Date: Tue, 25 Mar 2003 11:54:03 +1100
Subject: [Twisted-Python] Twisted, Windows, and Py2Exe
In-Reply-To: <20030324215446.W10883-100000@nosferatu.kriln.com>
References: <20030324215446.W10883-100000@nosferatu.kriln.com>
Message-ID: <20030325005403.GA30760@ferd2.thristian.org>

On Mon, Mar 24, 2003 at 09:56:46PM +0000, Jeremy Noetzelman wrote:
> Has anyone used py2exe successfully with a twisted application?

Actually, I have, but I don't recall having to do any trickery to make
it run - once it compiled. it ran fine.

Now, using py2exe to build an Twisted-based NT service, that doesn't
work at all - at least, I couldn't get it to run. Such things tend to
end with a backtrace that looks like:

	File "twisted\internet\app.pyc", line 628, in run 
	File "twisted\internet\main.pyc", line 106, in run 
	File "twisted\internet\default.pyc", line 222, in run 
	File "twisted\internet\default.pyc", line 218, in startRunning 
	File "twisted\internet\default.pyc", line 204, in _handleSignals,  
		exceptions.ValueError, signal only works in main thread. 

..or at least, they did the last time I tried.

-- 
 ___________ ____________________________
| Screwtape | Reply-To: munged on Usenet |________ ______ ____ __ _  _   _
|
| | <-- You must be smarter than this stick to ride the Internet.
|



From david at rebirthing.co.nz  Tue Mar 25 06:41:07 2003
From: david at rebirthing.co.nz (David McNab)
Date: 26 Mar 2003 01:41:07 +1200
Subject: [Twisted-Python] wanting more example progs for servers
Message-ID: <1048599667.1622.7.camel@rebirth>

Hi,

I'm just getting acquainted with Twisted.

The examples provided are invaluable, at least the examples I can
presently understand.

But there's areas in Twisted that aren't covered by examples - eg
IRCChatter. My initial attempts to write a basic IRC server using this
protocol (based on simpleserver.py example) were unsuccessful.

If one is an independent developer, and can't afford to pay for
professional Twisted support, what's the best way to get across these
protocol classes?

Is it a matter of reading source code (in cases where the API docs are
incomplete)? Or asking for help on #twisted?

Are there any more example progs in addition to the ones which come with
the standard Twisted distribution?

What has proven to be the fastest way for people to come up to speed
with Twisted?

All help appreciated

Cheers
David





From cce at clarkevans.com  Tue Mar 25 13:57:33 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Tue, 25 Mar 2003 20:57:33 +0000
Subject: [Twisted-Python] ssl.py patch + example client /w server certificate verify
Message-ID: <20030325205733.GA53709@doublegemini.com>

Howdy.  Thanks to those who helped me get this bootstrapped, so that
others may find the task easier... here is an example of a client
which has its own certificate, and verifies a known client certificate.

        from twisted.internet import reactor, protocol
        from twisted.protocols import http
        from twisted.internet import ssl

        class Client(http.HTTPClient):
            def connectionMade(self):
                print 'Connected.'
                self.sendCommand('GET', "/")
                self.sendHeader('User-Agent', 'Twisted-Example')
                self.endHeaders()
                print 'Sent request.'
        
            def handleResponse(self, data):
                print 'Got response.'
                #print data
        
        
        def verifyCert(cert): 
            return ssl.dumpCertificate(cert) == file("server.crt").read()
        
        def fetchURL():
            print 'Connecting to.'
            context = ssl.DefaultOpenSSLContextFactory(
                          "client.key","client.crt",
                          verifyCallback = verifyCert)
            context.isClient = 1
            factory = protocol.ClientFactory()
            factory.protocol = Client
            reactor.connectSSL('localhost', 8443, factory, context)
        
        if __name__ == '__main__':
            reactor.callLater(5,reactor.stop)
            reactor.callLater(1,fetchURL)
            reactor.run()
        
Anyway, it's not the prettiest... in particular, why is there a 
separate class Default* ... could not this default behavior gone
into the shorter ssl.ContextFactory? 

And... here is the patch to ssl.py

--- ssl.py.orig	Tue Mar 25 13:44:40 2003
+++ ssl.py	Tue Mar 25 15:32:15 2003
@@ -36,7 +36,7 @@
 """
 
 # System imports
-from OpenSSL import SSL
+from OpenSSL import SSL, crypto
 import socket
 
 # sibling imports
@@ -55,20 +55,32 @@
         """Return a SSL.Context object. override in subclasses."""
         raise NotImplementedError
 
+def dumpCertificate(cert, filetype = crypto.FILETYPE_PEM ):
+    ''' a helper to dump an incoming cert as a PEM '''
+    return crypto.dump_certificate(filetype, cert)
 
 class DefaultOpenSSLContextFactory(ContextFactory):
 
     def __init__(self, privateKeyFileName, certificateFileName,
-                 sslmethod=SSL.SSLv23_METHOD):
-        self.privateKeyFileName = privateKeyFileName
+                 sslmethod=SSL.SSLv23_METHOD, verifyCallback = None):
+        self.verifyCallback      = (verifyCallback, )      
+        self.privateKeyFileName  = privateKeyFileName
         self.certificateFileName = certificateFileName
         self.sslmethod = sslmethod
         self.cacheContext()
 
+                        
+    def verifyCertificate(self, conn, cert, errno, depth, retcode):
+        cb = self.verifyCallback[0]
+        if cb: return cb(cert)
+        return 1
+
     def cacheContext(self):
         ctx = SSL.Context(self.sslmethod)
         ctx.use_certificate_file(self.certificateFileName)
         ctx.use_privatekey_file(self.privateKeyFileName)
+        if self.verifyCallback[0]:
+            ctx.set_verify(SSL.VERIFY_PEER, self.verifyCertificate) 
         self._context = ctx
 
     def __getstate__(self):





From tv at twistedmatrix.com  Tue Mar 25 09:58:00 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Tue, 25 Mar 2003 18:58:00 +0200
Subject: [Twisted-Python] PyRendezvous has been relicensed to LGPL(!)
In-Reply-To: <786E374F-5DED-11D7-914F-000393C9700E@twistedmatrix.com>
References: <A84BC6E0-5DB8-11D7-835F-000A95686CD8@redivi.com> <786E374F-5DED-11D7-914F-000393C9700E@twistedmatrix.com>
Message-ID: <20030325165800.GB26156@lapdog>

On Mon, Mar 24, 2003 at 05:40:53AM -0600, Glyph Lefkowitz wrote:
> >I saw on freshmeat today that PyRendezvous (  
> >http://radio.weblogs.com/0105002/stories/2003/01/06/ 
> >multicastDnsServiceDiscoverForPython.html ) has been relicensed to  
> >LGPL, so maybe we don't have to write our own, at least not all of it.
   ^^^^
[...]
> 1. I can't accept GPL'd software into Twisted if the author isn't  
                    ^^^
> willing to contribute it.  Perhaps this means we need some kind of  
> 'contrib' section?

	So, how's your dyslexia doing?

	(Yeah, I know you want copyright assignment. But I also feel
	that's evil. The non-good kind of evil.)

-- 
:(){ :|:&};:



From tv at twistedmatrix.com  Tue Mar 25 13:45:54 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Tue, 25 Mar 2003 22:45:54 +0200
Subject: [Twisted-Python] ANN: Eunuchs -- Missing manly parts of UNIX API for Python
Message-ID: <20030325204554.GA557@lapdog>

	At http://twistedmatrix.com/~tv/eunuchs/ and in Debian
	incoming.

$ dpkg -s python-eunuchs
Package: python-eunuchs
Status: install ok installed
Priority: optional
Section: devel
Installed-Size: 36
Maintainer: Tommi Virtanen <tv at debian.org>
Source: eunuchs
Version: 20030325.1
Depends: python, python-twisted, pwgen, python2.2-eunuchs
Description: Missing manly parts of UNIX API for Python
 Eunuchs is a library of Python extension that complement the standard
 libraries in parts where full support for the UNIX API (or the Linux
 API) is missing.
 .
 Most of the functions wrapped by Eunuchs are low-level, dirty, but
 absolutely necessary functions for real systems programming. The aim is
 to have the functions added to mainstream Python libraries.
 .
 Current list of functions included:
 .
 - fchdir(2)
 .
 - recvmsg(2) and sendmsg(2), including use of cmsg(3)
 .
 This is a dummy package that depends on the correct version of
 python-eunuchs for the default version of Python.


-- 
:(){ :|:&};:



From twisted at itamarst.org  Tue Mar 25 13:48:21 2003
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 25 Mar 2003 15:48:21 -0500
Subject: [Twisted-Python] Re: [Twisted-commits] work in progress
In-Reply-To: <E18xv15-0001JU-00@pyramid.twistedmatrix.com>
References: <E18xv15-0001JU-00@pyramid.twistedmatrix.com>
Message-ID: <20030325154821.418ba956.twisted@itamarst.org>

On Tue, 25 Mar 2003 14:27:27 -0600
warner CVS <warner at twistedmatrix.com> wrote:

> Modified files:
> Twisted/twisted/spread/newjelly.py None 1.1

Use a branch, maybe?

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From cce at clarkevans.com  Tue Mar 25 16:04:10 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Tue, 25 Mar 2003 23:04:10 +0000
Subject: [Twisted-Python] ssl.py patch + example client /w server certificate verify
In-Reply-To: <20030325205733.GA53709@doublegemini.com>
References: <20030325205733.GA53709@doublegemini.com>
Message-ID: <20030325230410.GA53961@doublegemini.com>

With some help from etrepum (Bob Ippolito), the example is smaller,
and it even includes using POST.   Thanks Bob.

    from twisted.internet import reactor, ssl
    from twisted.web import client
    import urllib
    
    HOST = 'localhost'; PORT = 8443
    serverCertificate = file("server.crt").read()
    
    def verifyCert(cert):
        return ssl.dumpCertificate(cert) == serverCertificate
    
    def getdata():
        postdata = urllib.urlencode({'some': 'argument', 'another': 'arg'})
        headers  = {"Content-type":"application/x-www-form-urlencoded"}
        context  = ssl.DefaultOpenSSLContextFactory(
                      "client.key","client.crt",
                      verifyCallback = verifyCert)
        factory = client.HTTPClientFactory(HOST, "/some/path", "POST",
                                    postdata,  headers )
        reactor.connectSSL(HOST, PORT, factory, context)
        return factory.deferred
    
    def result(data): print data
    
    if __name__ == '__main__':
        reactor.callLater(5, reactor.stop)
        deferred = getdata()
        deferred.addCallback(result)
        reactor.run()

Ooh, this still requires the following patch to twisted.internet.ssl

--- ssl.py.orig	Tue Mar 25 13:44:40 2003
+++ ssl.py	Tue Mar 25 15:32:15 2003
@@ -36,7 +36,7 @@
 """
 
 # System imports
-from OpenSSL import SSL
+from OpenSSL import SSL, crypto
 import socket
 
 # sibling imports
@@ -55,20 +55,32 @@
         """Return a SSL.Context object. override in subclasses."""
         raise NotImplementedError
 
+def dumpCertificate(cert, filetype = crypto.FILETYPE_PEM ):
+    ''' a helper to dump an incoming cert as a PEM '''
+    return crypto.dump_certificate(filetype, cert)
 
 class DefaultOpenSSLContextFactory(ContextFactory):
 
     def __init__(self, privateKeyFileName, certificateFileName,
-                 sslmethod=SSL.SSLv23_METHOD):
-        self.privateKeyFileName = privateKeyFileName
+                 sslmethod=SSL.SSLv23_METHOD, verifyCallback = None):
+        self.verifyCallback      = (verifyCallback, )      
+        self.privateKeyFileName  = privateKeyFileName
         self.certificateFileName = certificateFileName
         self.sslmethod = sslmethod
         self.cacheContext()
 
+                        
+    def verifyCertificate(self, conn, cert, errno, depth, retcode):
+        cb = self.verifyCallback[0]
+        if cb: return cb(cert)
+        return 1
+
     def cacheContext(self):
         ctx = SSL.Context(self.sslmethod)
         ctx.use_certificate_file(self.certificateFileName)
         ctx.use_privatekey_file(self.privateKeyFileName)
+        if self.verifyCallback[0]:
+            ctx.set_verify(SSL.VERIFY_PEER, self.verifyCertificate) 
         self._context = ctx
 
     def __getstate__(self):




From david at rebirthing.co.nz  Tue Mar 25 14:58:38 2003
From: david at rebirthing.co.nz (David McNab)
Date: 26 Mar 2003 09:58:38 +1200
Subject: [Twisted-Python] Question re twisted.protocols.irc.IRC
Message-ID: <1048629518.1269.3.camel@rebirth>

Hi,

Thx to exarkun who told me T need to implement methods irc_*, eg
irc_JOIN, irc_NICK etc.

Has anyone got any sample code for such methods, to the point of
implementing the basics of ircd, so that clients can register their
nicks, join channels, talk to other users etc?

Thx
David





From david at rebirthing.co.nz  Tue Mar 25 15:04:37 2003
From: david at rebirthing.co.nz (David McNab)
Date: 26 Mar 2003 10:04:37 +1200
Subject: [Twisted-Python] contribution - telnetd example
Message-ID: <1048629877.1269.7.camel@rebirth>

Hi,

Below is an example script that demonstrates usage of the telnet server.
Submitted for possible inclusion in doc/examples

Probably incorrect and ugly from a twisted veteran's perspective, but
it's better than nothing.

Cheers
David


-------------- next part --------------
A non-text attachment was scrubbed...
Name: mytelnetd.py
Type: text/x-python
Size: 1191 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030326/650f756d/attachment-0002.py>

From cce at clarkevans.com  Tue Mar 25 17:19:22 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Wed, 26 Mar 2003 00:19:22 +0000
Subject: [Twisted-Python] ssl.py/client.py patches to implement getSecurePage()
In-Reply-To: <20030325205733.GA53709@doublegemini.com>
References: <20030325205733.GA53709@doublegemini.com>
Message-ID: <20030326001922.GA54084@doublegemini.com>

Well, as per the last post, there seems to be a 'straight-forward'
version of twisted.web.client.getPage ; attached are two patches
which make code like below work.

    from twisted.internet import reactor, ssl
    from twisted.web import client
    import urllib
    
    def result(data): print data
    
    if __name__ == '__main__':
        reactor.callLater(5, reactor.stop)
        # a very simple example
        deferred = client.getSecurePage("https://localhost/some/path")
        deferred.addCallback(result)
        # a more complicated one
        postdata = urllib.urlencode({'some': 'argument', 'another': 'arg'})
        headers  = {"Content-type":"application/x-www-form-urlencoded"}
        deferred = client.getSecurePage("https://localhost:8443/some/path",
                       "POST", postdata, headers,
                       privateKeyFileName = "client.key",
                       certificateFileName = "client.crt",
                       serverCertificateFileName="server.crt")
        deferred.addCallback(result)
        reactor.run()

Best,

Clark
-------------- next part --------------
--- ssl.py.orig	Tue Mar 25 13:44:40 2003
+++ ssl.py	Tue Mar 25 15:32:15 2003
@@ -36,7 +36,7 @@
 """
 
 # System imports
-from OpenSSL import SSL
+from OpenSSL import SSL, crypto
 import socket
 
 # sibling imports
@@ -55,20 +55,32 @@
         """Return a SSL.Context object. override in subclasses."""
         raise NotImplementedError
 
+def dumpCertificate(cert, filetype = crypto.FILETYPE_PEM ):
+    ''' a helper to dump an incoming cert as a PEM '''
+    return crypto.dump_certificate(filetype, cert)
 
 class DefaultOpenSSLContextFactory(ContextFactory):
 
     def __init__(self, privateKeyFileName, certificateFileName,
-                 sslmethod=SSL.SSLv23_METHOD):
-        self.privateKeyFileName = privateKeyFileName
+                 sslmethod=SSL.SSLv23_METHOD, verifyCallback = None):
+        self.verifyCallback      = (verifyCallback, )      
+        self.privateKeyFileName  = privateKeyFileName
         self.certificateFileName = certificateFileName
         self.sslmethod = sslmethod
         self.cacheContext()
 
+                        
+    def verifyCertificate(self, conn, cert, errno, depth, retcode):
+        cb = self.verifyCallback[0]
+        if cb: return cb(cert)
+        return 1
+
     def cacheContext(self):
         ctx = SSL.Context(self.sslmethod)
         ctx.use_certificate_file(self.certificateFileName)
         ctx.use_privatekey_file(self.privateKeyFileName)
+        if self.verifyCallback[0]:
+            ctx.set_verify(SSL.VERIFY_PEER, self.verifyCertificate) 
         self._context = ctx
 
     def __getstate__(self):
-------------- next part --------------
--- client.py.orig	Tue Mar 25 18:10:28 2003
+++ client.py	Tue Mar 25 18:55:08 2003
@@ -63,7 +63,8 @@
         l = self.headers.get('location')
         if not l:
             self.handleStatusDefault()
-        host, port, url = _parse(l[0])
+        https, host, port, url = _parse(l[0])
+        assert not https, "https redirects not implemented yet"
         self.factory.host, self.factory.url = host, url
         reactor.connectTCP(host, port, self.factory)
         self.quietLoss = 1
@@ -105,7 +106,9 @@
 
     protocol = HTTPPageGetter
 
-    def __init__(self, host, url, method='GET', postdata=None, headers=None, agent="Twisted PageGetter"):
+    def __init__(self, host, url, method='GET', postdata=None, 
+                 headers=None, agent=None):
+        if agent is None: agent = "Twisted PageGetter"
         if headers is not None:
             self.headers = headers
         if postdata is not None:
@@ -141,8 +144,10 @@
     protocol = HTTPPageDownloader
     value = None
 
-    def __init__(self, host, url, fileName, method='GET', postdata=None, headers=None, agent="Twisted client"):
-        HTTPClientFactory.__init__(self, host, url, method=method, postdata=postdata, headers=headers, agent=agent)
+    def __init__(self, host, url, fileName, method='GET', postdata=None, 
+                 headers=None, agent = None):
+        HTTPClientFactory.__init__(self, host, url, method, 
+                                   postdata, headers, agent)
         self.fileName = fileName
         self.deferred = defer.Deferred()
         self.waiting = 1
@@ -166,26 +171,59 @@
 def _parse(url):
     parsed = urlparse.urlparse(url)
     url = urlparse.urlunparse(('','')+parsed[2:])
-    host, port = parsed[1], 80
+    host = parsed[1]
+    if 'https' == parsed[0]:
+        https, port = 1, 443
+    else:
+        https, port = 0, 80
     if ':' in host:
         host, port = host.split(':')
         port = int(port)
-    return host, port, url
+    return https, host, port, url
 
-def getPage(url, *args, **kwargs):
+def getPage(url, method='GET', postdata=None, headers=None, agent = None):
     '''download a web page
 
     Download a page. Return a deferred, which will
     callback with a page or errback with a description
     of the error.
     '''
-    host, port, url = _parse(url)
-    factory = HTTPClientFactory(host, url, *args, **kwargs)
+    https, host, port, path = _parse(url)
+    if https: return getSecurePage(url, method, postdata, headers, agent)
+    factory = HTTPClientFactory(host, path, method, postdata, headers, agent)
     reactor.connectTCP(host, port, factory)
     return factory.deferred
 
+try:
+    from twisted.internet import ssl
+    def getSecurePage(url, method='GET', postdata=None, headers=None, 
+                      agent = None,
+                      privateKeyFileName = None, certificateFileName = None,
+                      sslmethod=ssl.SSL.SSLv23_METHOD, verifyCallback = None, 
+                      serverCertificateFileName = None):
+        """ download a secure page """
+        https, host, port, path = _parse(url)
+        if serverCertificateFileName:
+            cert = file(serverCertificateFileName).read()
+            verifyCallback = lambda rhs: ssl.dumpCertificate(cert) == rhs
+        if verifyCallback or certificateFileName or privateKeyFileName:
+            context = ssl.DefaultOpenSSLContextFactory(
+                          privateKeyFileName, certificateFileName,
+                          sslmethod, verifyCallback)
+            context.isClient = 1
+        else:
+            context = ssl.ClientContextFactory()
+        factory = HTTPClientFactory(host, path, method, postdata, headers)
+        reactor.connectSSL(host, port, factory, context)
+        return factory.deferred
+except:
+    def getSecurePage(*args,**kwargs):
+        raise Exception("ssl not available")
+
 def downloadPage(url, file, *args, **kwargs):
-    host, port, url = _parse(url)
-    factory = HTTPDownloader(host, url, file, *args, **kwargs)
+    https, host, port, path = _parse(url)
+    assert not https, "https is not yet implemented here"
+    factory = HTTPDownloader(host, path, file, *args, **kwargs)
     reactor.connectTCP(host, port, factory)
     return factory.deferred
+

From cce at clarkevans.com  Tue Mar 25 17:33:14 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Wed, 26 Mar 2003 00:33:14 +0000
Subject: [Twisted-Python] PyCon Logistics
In-Reply-To: <20030324172615.GA14310@meson.dyndns.org>
References: <20030211.191234.596544096.washort@twistedmatrix.com> <200302120120.h1C1KCjL017055@ratthing-b246.strakt.com> <20030324172615.GA14310@meson.dyndns.org>
Message-ID: <20030326003314.GA54258@doublegemini.com>

On Mon, Mar 24, 2003 at 12:26:15PM -0500, Jp Calderone wrote:
| On Wed, Feb 12, 2003 at 02:20:12AM +0100, Laura Creighton wrote:
| > Sushi Taro
| > 1503 17th St., NW (P St.)
| > Washington (202) 462-8999
| 
| Laura has asked me to negate this recommendation for her.  She visited it
| again and it was awful.

As of last summer, this was a very good place to eat (albeit a 
bit on the pricy end of things).  I'm curious what she ordered...

Clark



From david at rebirthing.co.nz  Tue Mar 25 21:32:11 2003
From: david at rebirthing.co.nz (David McNab)
Date: 26 Mar 2003 16:32:11 +1200
Subject: [Twisted-Python] help! - listenTCP failing
Message-ID: <1048653131.1631.38.camel@rebirth>

Hi,

I'm building an app that will need the ability to start and stop
protocol servers dynamically.

As part of figuring this out, I've added an ApplicationService to the
app, and within ApplicationService.startService(), I'm calling
self.get_application.listenTCP(portnum, myprotocol).

This is having no visible effect, since the port is not getting opened.

I tried, within startService(), calling reactor.listenTCP() instead.
This starts up the protocol and opens the port just fine, but when I
later call app.unlistenTCP(port) to shut down the protocol, I get the
exception (see below).

What am I doing wrong?
What's the best and simplest way to dynamically start and stop server
protocols at runtime()?

Thanks in advance
David

Traceback (most recent call last):
  File "/usr/lib/python2.2/site-packages/twisted/internet/app.py", line
744, in run
    main.run(installSignalHandlers=installSignalHandlers)
  File "/usr/lib/python2.2/site-packages/twisted/internet/main.py", line
106, in run
    _getReactor().run()
  File "/usr/lib/python2.2/site-packages/twisted/internet/default.py",
line 113, in run
    self.mainLoop()
  File "/usr/lib/python2.2/site-packages/twisted/internet/default.py",
line 124, in mainLoop
    self.doIteration(t)
--- <exception caught here> ---
  File "/usr/lib/python2.2/site-packages/twisted/internet/default.py",
line 450, in doSelect
    why = getattr(selectable, method)()
  File "/usr/lib/python2.2/site-packages/twisted/internet/tcp.py", line
105, in doRead
    return self.protocol.dataReceived(data)
  File "/usr/lib/python2.2/site-packages/twisted/protocols/telnet.py",
line 314, in dataReceived
    why = self.processChunk(c)
  File "/usr/lib/python2.2/site-packages/twisted/protocols/telnet.py",
line 261, in processChunk
    self.processLine(buf)
  File "/usr/lib/python2.2/site-packages/twisted/protocols/telnet.py",
line 221, in processLine
    self.mode = getattr(self, "telnet_"+self.mode)(line)
  File "/usr/lib/python2.2/site-packages/twisted/protocols/telnet.py",
line 237, in telnet_Password
    if not self.checkUserAndPass(self.username, paswd):
  File "mytelnetd.py", line 34, in checkUserAndPass
    self.factory.appl.killTelnet()
  File "mytelnetd.py", line 61, in killTelnet
    self.unlistenTCP(2000)
  File "/usr/lib/python2.2/site-packages/twisted/internet/app.py", line
444, in unlistenTCP
    if self._listenerDict.has_key((port_, interface_)):
exceptions.UnboundLocalError: local variable 'port_' referenced before
assignment
 





From exarkun at intarweb.us  Wed Mar 26 18:34:43 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Wed, 26 Mar 2003 20:34:43 -0500
Subject: [Twisted-Python] Interface Inheritance (Ha ha METACLASS)
Message-ID: <20030327013443.GA22509@meson.dyndns.org>

    from twisted.python.components import Interface

    class InterfaceImplementor(type):
        def __new__(klass, name, bases, dict):
            realBases = []
            faceBases = []
            for b in bases:
                if isinstance(b, Interface):
                    faceBases.append(b)
                elif hasattr(b, '__implements__'):
                    faceBases.extend(b.__implements__)
                else:
                    realBases.append(b)
            dict['__implement__'] = tuple(faceBases)
            return type.__new__(klass, name, realBases, dict)


  Inspired by fzZzy ;)

  Jp

-- 
"There is no reason for any individual to have a computer in their
home."
                -- Ken Olson, President of DEC, World Future Society
                   Convention, 1977
-- 
 up 6 days, 21:59, 4 users, load average: 0.52, 0.41, 0.19
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030326/e600c1d8/attachment.sig>

From exarkun at intarweb.us  Wed Mar 26 18:54:48 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Wed, 26 Mar 2003 20:54:48 -0500
Subject: [Twisted-Python] help! - listenTCP failing
In-Reply-To: <1048653131.1631.38.camel@rebirth>
References: <1048653131.1631.38.camel@rebirth>
Message-ID: <20030327015448.GB22509@meson.dyndns.org>

On Wed, Mar 26, 2003 at 04:32:11PM +1200, David McNab wrote:
> Hi,
> 
> I'm building an app that will need the ability to start and stop
> protocol servers dynamically.
> 
> As part of figuring this out, I've added an ApplicationService to the
> app, and within ApplicationService.startService(), I'm calling
> self.get_application.listenTCP(portnum, myprotocol).
> 
> This is having no visible effect, since the port is not getting opened.
> 
> I tried, within startService(), calling reactor.listenTCP() instead.
> This starts up the protocol and opens the port just fine, but when I
> later call app.unlistenTCP(port) to shut down the protocol, I get the
> exception (see below).
> 
> What am I doing wrong?
> What's the best and simplest way to dynamically start and stop server
> protocols at runtime()?
> 

  It seems as though reactor.listenTCP() is never being invoked.  The
traceback you got below is a result of this.  I've fixed it in CVS so that
it raises twisted.internet.error.NotListeningError now, instead of a
confusing UnboundLocalError.

  Why reactor.listenTCP() isn't being invoked is unclear.  You might try
adding some debug prints to the critical portions of the code, or stepping
through it with pdb.

  If you are still stuck after some attempts, post a little code (keyword:
little) that demonstrates the problem, so a developer can easily duplicate
and then fix it.

  Jp

-- 
"There is no reason for any individual to have a computer in their
home."
                -- Ken Olson, President of DEC, World Future Society
                   Convention, 1977
-- 
 up 6 days, 21:59, 4 users, load average: 0.52, 0.41, 0.19



From dpjanes at sympatico.ca  Wed Mar 26 14:48:41 2003
From: dpjanes at sympatico.ca (David P. Janes)
Date: Wed, 26 Mar 2003 16:48:41 -0500
Subject: [Twisted-Python] Newbie question, using Twisted with cygwin
Message-ID: <009d01c2f3e1$77943cf0$c840e540@sympatico.ca>

So, I've installed Twisted using the Windows installer, using a plain
vanilla Python 2.2 installation. I'm in cygwin, so I set up appropriate
aliases:

alias mktap='python c:/python22/lib/site-packages/twisted/scripts/mktap.py'
alias twistd='python
c:/python22/lib/site-packages/twisted/scripts/twistd.py'

No errors occur during the installation.

I run "mktap", specifying a port and a log file, and I get a "web.tap" file.
Then I run
twistd -f web.tap

And I get .... nothing. No log file, no errors, no process running.

Very very strange...






From exarkun at intarweb.us  Wed Mar 26 20:45:55 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Wed, 26 Mar 2003 22:45:55 -0500
Subject: [Twisted-Python] Newbie question, using Twisted with cygwin
In-Reply-To: <009d01c2f3e1$77943cf0$c840e540@sympatico.ca>
References: <009d01c2f3e1$77943cf0$c840e540@sympatico.ca>
Message-ID: <20030327034555.GA22656@meson.dyndns.org>

On Wed, Mar 26, 2003 at 04:48:41PM -0500, David P. Janes wrote:
> So, I've installed Twisted using the Windows installer, using a plain
> vanilla Python 2.2 installation. I'm in cygwin, so I set up appropriate
> aliases:
> 
> alias mktap='python c:/python22/lib/site-packages/twisted/scripts/mktap.py'
> alias twistd='python
> c:/python22/lib/site-packages/twisted/scripts/twistd.py'
> 
> No errors occur during the installation.
> 
> I run "mktap", specifying a port and a log file, and I get a "web.tap" file.
> Then I run
> twistd -f web.tap
> 
> And I get .... nothing. No log file, no errors, no process running.
> 
> Very very strange...
> 

  Possibly very strange indeed... though allowances must be made when
running on emulation layers ;)

  You might want to try running twistd with a couple extra options,
--nodeamon and --spew.  The output will hopefully let you track down the
exact point of the problem, and give us a more informative report :)

  Jp

-- 
It is practically impossible to teach good programming style to
students that have had prior exposure to BASIC: as potential
programmers they are mentally mutilated beyond hope of
regeneration.        -- Dijkstra
-- 
 up 6 days, 23:59, 9 users, load average: 0.11, 0.04, 0.01
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030326/50f00954/attachment.sig>

From mario at ruggier.org  Fri Mar 28 08:00:46 2003
From: mario at ruggier.org (Mario Ruggier)
Date: Fri, 28 Mar 2003 16:00:46 +0100
Subject: [Twisted-Python] response with special characters, utf-8
Message-ID: <0E1F58F6-612E-11D7-9F25-000393756786@ruggier.org>

Hello,

the rpy below returns a string with special characters, which I
would like to be displayed by the web client. However the 3 non-ascii
characters below are displayed as garbage (even if differently), in two
browsers I have tried with (IE and Safari). What am I missing?

Thanks for any help,

	mario


##################################
### chars_test.rpy

from twisted.web import resource
from twisted.web.server import NOT_DONE_YET

def errBack(err, request):
     request.write('error: ' + str(err) )
     request.finish()

def returnString(result, request):
     request.setHeader = ('Content-Type', 'text/html; charset=utf-8')
     request.write(result)
     request.finish()

def responseString(request):
     return '''<html><title>characters test</title>
         </head>
         <body>
             3 sample èçé characters (e+grave, c+cedille, e+aigu)
         </body>
         </html>
         '''

class MyResource(resource.Resource):
     def render(self, request):
         from twisted.internet import threads
         d = threads.deferToThread(responseString,request)
         d.addCallback(returnString,request)
         d.addErrback(errBack, request)
         return NOT_DONE_YET

###

resource = MyResource()

###



From smurf at noris.de  Fri Mar 28 22:42:30 2003
From: smurf at noris.de (Matthias Urlichs)
Date: Sat, 29 Mar 2003 06:42:30 +0100
Subject: [Twisted-Python] response with special characters, utf-8
References: <0E1F58F6-612E-11D7-9F25-000393756786@ruggier.org>
Message-ID: <pan.2003.03.29.05.42.28.83604@smurf.noris.de>

Hi,

On Fri, 28 Mar 2003 15:00:46 +0000, Mario Ruggier wrote:

This

> request.setHeader = ('Content-Type', 'text/html; charset=utf-8')

seems to have a '=' sign in it which doesn't make ANY sense at all.

>              3 sample èçé characters (e+grave, c+cedille, e+aigu)

Note that your email was encoded as iso-8859-1.

-- 
Matthias




From mario at ruggier.org  Sat Mar 29 03:41:00 2003
From: mario at ruggier.org (Mario Ruggier)
Date: Sat, 29 Mar 2003 11:41:00 +0100
Subject: [Twisted-Python] response with special characters, utf-8
In-Reply-To: <pan.2003.03.29.05.42.28.83604@smurf.noris.de>
Message-ID: <EE78A0B2-61D2-11D7-BB27-000393756786@ruggier.org>

On samedi, mars 29, 2003, at 06:42 Europe/Amsterdam, Matthias Urlichs 
wrote:
>> request.setHeader = ('Content-Type', 'text/html; charset=utf-8')
>
> seems to have a '=' sign in it which doesn't make ANY sense at all.

Yeah, looks bizarre. But that's how they say it should be set:
http://www.w3.org/International/O-HTTP-charset

>>              3 sample èçé characters (e+grave, c+cedille, e+aigu)
>
> Note that your email was encoded as iso-8859-1.

Yes, what can I say -- that's mail...

If I try to manually tell python that a string is latin-1, and i want it
in utf-8, i get similar garbage results in the client browsers:

	return unicode('èçé','latin-1').encode('utf-8')

How can I verify that the web clients are indeed receiving utf-8?
It seems that they are, but something very strange is happening
here, on Mac OS Jaguar (note that I am running with
sys.setdefaultencoding('utf-8') in sitecustomize.py):

- in IE:mac 5.2, the character set chosen by default is indeed
UTF-8, but the 3 non-ascii characters are just not displayed,
and IE does not allow to dynamically change the automatically
selected character set

- in Safari (beta 6) the indicated character set is "default", whatever 
that is,
where the 3 chars are not displayed. iIf I change to utf-8 (he allows 
it),
the 3 chars are still not displayed, but if i choose the char set he 
calls
"Western (Mac OS Roman)" the 3 chars are displayed correctly.

Anyone can tell what's going on?
Also, can anyone tell me if the rpy below works correctly on some
python/twistedweb/client configuration ?

Thanks for any help,

	mario


##################################
## chars_test.rpy

from twisted.web import resource
from twisted.web.server import NOT_DONE_YET

def errBack(err, request):
     request.write('error: ' + str(err) )
     request.finish()

def returnString(result, request):
     request.setHeader = ('Content-Type', 'text/html; charset=utf-8')
     request.write(result)
     request.finish()

def responseString(request):
     return '''<html><title>characters test</title>
         <meta http-equiv="Content-Type" content="text/html; 
charset=utf-8">
         </head>
         <body>
             -a- 3 sample chars -b- èçé -c- &egrave;&ccedil;&eacute; -d-
         </body>
         </html>
         '''

class MyResource(resource.Resource):
     def render(self, request):
         from twisted.internet import threads
         d = threads.deferToThread(responseString,request)
         d.addCallback(returnString,request)
         d.addErrback(errBack, request)
         return NOT_DONE_YET

###

resource = MyResource()

###



From twisted at itamarst.org  Sun Mar 30 13:32:24 2003
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 30 Mar 2003 15:32:24 -0500
Subject: [Twisted-Python] response with special characters, utf-8
In-Reply-To: <pan.2003.03.29.05.42.28.83604@smurf.noris.de>
References: <0E1F58F6-612E-11D7-9F25-000393756786@ruggier.org>
	<pan.2003.03.29.05.42.28.83604@smurf.noris.de>
Message-ID: <20030330153224.30347970.twisted@itamarst.org>

On Sat, 29 Mar 2003 06:42:30 +0100
"Matthias Urlichs" <smurf at noris.de> wrote:

> > request.setHeader = ('Content-Type', 'text/html; charset=utf-8')
> 
> seems to have a '=' sign in it which doesn't make ANY sense at all.

Exactly! This should be: 

request.setHeader('Content-Type', 'text/html; charset=utf-8')

I assume.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From twisted at itamarst.org  Sun Mar 30 13:43:52 2003
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 30 Mar 2003 15:43:52 -0500
Subject: [Twisted-Python] help! - listenTCP failing
In-Reply-To: <1048653131.1631.38.camel@rebirth>
References: <1048653131.1631.38.camel@rebirth>
Message-ID: <20030330154352.2186a52c.twisted@itamarst.org>

On 26 Mar 2003 16:32:11 +1200
David McNab <david at rebirthing.co.nz> wrote:

> I'm building an app that will need the ability to start and stop
> protocol servers dynamically.
> 
> As part of figuring this out, I've added an ApplicationService to the
> app, and within ApplicationService.startService(), I'm calling
> self.get_application.listenTCP(portnum, myprotocol).

You probably want to do this on the reactor anyway, since these are not
"persistent" servers, as it were. That being said, this is a bug in
Twisted - I fixed it in CVS, hopefully.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From twisted at itamarst.org  Sun Mar 30 13:48:04 2003
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 30 Mar 2003 15:48:04 -0500
Subject: [Twisted-Python] Question re twisted.protocols.irc.IRC
In-Reply-To: <1048629518.1269.3.camel@rebirth>
References: <1048629518.1269.3.camel@rebirth>
Message-ID: <20030330154804.1b56827e.twisted@itamarst.org>

On 26 Mar 2003 09:58:38 +1200
David McNab <david at rebirthing.co.nz> wrote:

> Thx to exarkun who told me T need to implement methods irc_*, eg
> irc_JOIN, irc_NICK etc.
> 
> Has anyone got any sample code for such methods, to the point of
> implementing the basics of ircd, so that clients can register their
> nicks, join channels, talk to other users etc?

Look at the twisted.words package.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From mario at ruggier.org  Sun Mar 30 14:51:20 2003
From: mario at ruggier.org (Mario Ruggier)
Date: Sun, 30 Mar 2003 23:51:20 +0200
Subject: [Twisted-Python] response with special characters, utf-8
In-Reply-To: <20030330153224.30347970.twisted@itamarst.org>
Message-ID: <BE4671FA-62F9-11D7-BB27-000393756786@ruggier.org>

On dimanche, mars 30, 2003, at 22:32 Europe/Amsterdam, Itamar 
Shtull-Trauring wrote:
> On Sat, 29 Mar 2003 06:42:30 +0100
> "Matthias Urlichs" <smurf at noris.de> wrote:
>
>>> request.setHeader = ('Content-Type', 'text/html; charset=utf-8')
>>
>> seems to have a '=' sign in it which doesn't make ANY sense at all.
>
> Exactly! This should be:
>
> request.setHeader('Content-Type', 'text/html; charset=utf-8')
>

Ooops! Do not know how many times i;ve looked at that!
Thanks, both of you...

mario


> I assume.
>
> -- 
> Itamar Shtull-Trauring    http://itamarst.org/
> http://www.zoteca.com -- Python & Twisted consulting




From acapnotic at twistedmatrix.com  Sun Mar 30 17:04:51 2003
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 30 Mar 2003 16:04:51 -0800
Subject: [Twisted-Python] Newbie question, using Twisted with cygwin
In-Reply-To: <009d01c2f3e1$77943cf0$c840e540@sympatico.ca>
References: <009d01c2f3e1$77943cf0$c840e540@sympatico.ca>
Message-ID: <1049069089.16699.27.camel@troglodyte.funhouse>

On Wed, 2003-03-26 at 13:48, David P. Janes wrote:
> alias mktap='python c:/python22/lib/site-packages/twisted/scripts/mktap.py'
> alias twistd='python
> c:/python22/lib/site-packages/twisted/scripts/twistd.py'

This is wrong; you want to be running the scripts found in Twisted/bin,
not the modules in twisted.scripts.  I don't know where the windows
installer puts those.

-- 
The moon is waning crescent, 4.3% illuminated, 27.6 days old.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20030330/f597a36a/attachment.sig>

From twisted at itamarst.org  Sun Mar 30 17:23:30 2003
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 30 Mar 2003 19:23:30 -0500
Subject: [Twisted-Python] Newbie question, using Twisted with cygwin
In-Reply-To: <1049069089.16699.27.camel@troglodyte.funhouse>
References: <009d01c2f3e1$77943cf0$c840e540@sympatico.ca>
	<1049069089.16699.27.camel@troglodyte.funhouse>
Message-ID: <20030330192330.5770094c.twisted@itamarst.org>

On 30 Mar 2003 16:04:51 -0800
Kevin Turner <acapnotic at twistedmatrix.com> wrote:

> On Wed, 2003-03-26 at 13:48, David P. Janes wrote:
> > alias mktap='python
> > c:/python22/lib/site-packages/twisted/scripts/mktap.py' alias
> > twistd='python
> > c:/python22/lib/site-packages/twisted/scripts/twistd.py'
> 
> This is wrong; you want to be running the scripts found in
> Twisted/bin, not the modules in twisted.scripts.  I don't know where
> the windows installer puts those.

C:\Python22\scripts\twistd.py etc.


-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



