From dineshkapoor27 at gmail.com  Wed Mar  2 04:42:20 2011
From: dineshkapoor27 at gmail.com (Dinesh Kapoor)
Date: Wed, 2 Mar 2011 15:12:20 +0530
Subject: [Twisted-Python] Question regarding the working of twisted python
	with celery
Message-ID: <AANLkTi=g+q1_y6McTAaeSK10k=76RVbSdcU2o9nt7Tiw@mail.gmail.com>

Hi,

  I have run into a weird performance issue while working with twisted and
using celery to schedule tasks on it. Here is my setup:

1. Celery schedules a task which makes a TCP connection to a server running
FreeSwitch
2. Celery is running with concurrency = 2.
3. I have changed my code so that I call reactor.callfromthread for all
reactor based work.
4. A lot of times once I schedule the celery task, I get delays ranging from
3 - 30 seconds when I am running with Celery concurrency =2.
5. If I reduce the celery concurrency to 1, then everything works great!
6. Upon debugging it a little bit more, it seems that the selectReactor's
doSelect is where the code is getting stuck on the select().

I dont know how to get around the delay, and I dont know who is causing that
delay exactly. If there is more info that is needed then please let me know.
Everything works fine when the Celery worker process is 1, but delay starts
happening invariably when celery's worker processes >=2.

Any help would be great!

Regards,
Dinesh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110302/d9965671/attachment.htm 

From rlotun at gmail.com  Wed Mar  2 08:04:10 2011
From: rlotun at gmail.com (Reza Lotun)
Date: Wed, 2 Mar 2011 13:04:10 +0000
Subject: [Twisted-Python] Question regarding the working of twisted
 python with celery
In-Reply-To: <AANLkTi=g+q1_y6McTAaeSK10k=76RVbSdcU2o9nt7Tiw@mail.gmail.com>
References: <AANLkTi=g+q1_y6McTAaeSK10k=76RVbSdcU2o9nt7Tiw@mail.gmail.com>
Message-ID: <AANLkTi=KyOJ2BCxc6p8oF7dwifvyCYqs=Lta1K85bJCS@mail.gmail.com>

On Wed, Mar 2, 2011 at 9:42 AM, Dinesh Kapoor <dineshkapoor27 at gmail.com> wrote:
> 2. Celery is running with concurrency = 2.
> 3. I have changed my code so that I call reactor.callfromthread for all
> reactor based work.
> 4. A lot of times once I schedule the celery task, I get delays ranging from
> 3 - 30 seconds when I am running with Celery concurrency =2.
> 5. If I reduce the celery concurrency to 1, then everything works great!
> 6. Upon debugging it a little bit more, it seems that the selectReactor's
> doSelect is where the code is getting stuck on the select().

Celery makes synchronous blocking calls, and uses the multiprocessing
library. If I understand you correctly you are attempting to embed the
reactor in a celery worker process (your comment on callFromThread
seems to say this, at least). The problem is that with a concurrency
level of 2 the actual reactor could be running in another process.

Some things you can do:
- generate webhook tasks instead. Expose your twisted worker code via
and twisted.web interface - the celery tasks will simply POST to your
twisted.web endpoint and the actual worker code can be twistified.
- get celery worker code to make a TCP connection to your twisted
server. This is similar to the above idea, except HTTP isn't involved
and you have to come up with your own client-server protocol

Cheers,
Reza

-- 
Reza Lotun
mobile: +44 (0)7521 310 763
email:? rlotun at gmail.com
work:?? reza at tweetdeck.com
twitter: @rlotun


From exarkun at twistedmatrix.com  Wed Mar  2 08:34:35 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 02 Mar 2011 13:34:35 -0000
Subject: [Twisted-Python] Question regarding the working of twisted
	python	with celery
In-Reply-To: <AANLkTi=g+q1_y6McTAaeSK10k=76RVbSdcU2o9nt7Tiw@mail.gmail.com>
References: <AANLkTi=g+q1_y6McTAaeSK10k=76RVbSdcU2o9nt7Tiw@mail.gmail.com>
Message-ID: <20110302133435.2231.810980901.divmod.xquotient.101@localhost.localdomain>

On 09:42 am, dineshkapoor27 at gmail.com wrote:
>Hi,
>
>  I have run into a weird performance issue while working with twisted 
>and
>using celery to schedule tasks on it. Here is my setup:
>
>1. Celery schedules a task which makes a TCP connection to a server 
>running
>FreeSwitch
>2. Celery is running with concurrency = 2.
>3. I have changed my code so that I call reactor.callfromthread for all
>reactor based work.
>4. A lot of times once I schedule the celery task, I get delays ranging 
>from
>3 - 30 seconds when I am running with Celery concurrency =2.
>5. If I reduce the celery concurrency to 1, then everything works 
>great!
>6. Upon debugging it a little bit more, it seems that the 
>selectReactor's
>doSelect is where the code is getting stuck on the select().
>
>I dont know how to get around the delay, and I dont know who is causing 
>that
>delay exactly. If there is more info that is needed then please let me 
>know.
>Everything works fine when the Celery worker process is 1, but delay 
>starts
>happening invariably when celery's worker processes >=2.

I think Reza Lotun explained what's causing this problem.

If you haven't looked at it yet, you might want to see if Ampoule can 
help you out.

Jean-Paul


From exarkun at twistedmatrix.com  Wed Mar  2 23:28:36 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 03 Mar 2011 04:28:36 -0000
Subject: [Twisted-Python] PyCon 2011 Twisted Sprint
In-Reply-To: <20110208162454.1699.1277311042.divmod.xquotient.1389@localhost.localdomain>
References: <20110208162454.1699.1277311042.divmod.xquotient.1389@localhost.localdomain>
Message-ID: <20110303042836.2231.390810583.divmod.xquotient.119@localhost.localdomain>

On 8 Feb, 04:24 pm, exarkun at twistedmatrix.com wrote:
>Hello all,
>
>Once again, we will be sprinting at PyCon.  I've just added Twisted to
><http://us.pycon.org/2011/sprints/projects/>.  If you plan to attend
>(for any amount of time), please add your name to the attendees list.
>Also feel free to suggest additional sprint topics.  We won't really
>limit sprint topics to things planned in advance, but adding particular
>things to the list is a probably a good way to attract more sprinters
>and let people do any background research that might be necessary 
>before
>the sprint actually starts.

Just a reminder about this.  Please sign up if you plan to come!

Jean-Paul


From glyph at twistedmatrix.com  Wed Mar  2 23:45:59 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 2 Mar 2011 23:45:59 -0500
Subject: [Twisted-Python] PyCon 2011 Twisted Sprint
In-Reply-To: <20110303042836.2231.390810583.divmod.xquotient.119@localhost.localdomain>
References: <20110208162454.1699.1277311042.divmod.xquotient.1389@localhost.localdomain>
	<20110303042836.2231.390810583.divmod.xquotient.119@localhost.localdomain>
Message-ID: <6CA51688-7B5A-464A-AC62-1F673124385F@twistedmatrix.com>


On Mar 2, 2011, at 11:28 PM, exarkun at twistedmatrix.com wrote:

> On 8 Feb, 04:24 pm, exarkun at twistedmatrix.com wrote:
>> Hello all,
>> 
>> Once again, we will be sprinting at PyCon.  I've just added Twisted to
>> <http://us.pycon.org/2011/sprints/projects/>.  If you plan to attend
>> (for any amount of time), please add your name to the attendees list.
>> Also feel free to suggest additional sprint topics.  We won't really
>> limit sprint topics to things planned in advance, but adding particular
>> things to the list is a probably a good way to attract more sprinters
>> and let people do any background research that might be necessary 
>> before
>> the sprint actually starts.
> 
> Just a reminder about this.  Please sign up if you plan to come!

All levels of experience are welcome, so if you've never been to a sprint before, we'd love to see you.

Sign up as soon as you can though.  Sometimes space is allocated based on these lists.  I'm not sure how it's going to work this year, but it's best if we know approximately how many people will be there so we can be sure to get a big enough room for everyone.

-glyph



From tom at recursivedream.com  Thu Mar  3 00:21:16 2011
From: tom at recursivedream.com (Tom Davis)
Date: Thu, 3 Mar 2011 00:21:16 -0500
Subject: [Twisted-Python] PyCon 2011 Twisted Sprint
In-Reply-To: <6CA51688-7B5A-464A-AC62-1F673124385F@twistedmatrix.com>
References: <20110208162454.1699.1277311042.divmod.xquotient.1389@localhost.localdomain>
	<20110303042836.2231.390810583.divmod.xquotient.119@localhost.localdomain>
	<6CA51688-7B5A-464A-AC62-1F673124385F@twistedmatrix.com>
Message-ID: <AANLkTi=4oa73hfeqF64YHz4YK9gaadV-Z2McD8zZA9hh@mail.gmail.com>

On Wed, Mar 2, 2011 at 11:45 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

>
> On Mar 2, 2011, at 11:28 PM, exarkun at twistedmatrix.com wrote:
>
> > On 8 Feb, 04:24 pm, exarkun at twistedmatrix.com wrote:
> >> Hello all,
> >>
> >> Once again, we will be sprinting at PyCon.  I've just added Twisted to
> >> <http://us.pycon.org/2011/sprints/projects/>.  If you plan to attend
> >> (for any amount of time), please add your name to the attendees list.
> >> Also feel free to suggest additional sprint topics.  We won't really
> >> limit sprint topics to things planned in advance, but adding particular
> >> things to the list is a probably a good way to attract more sprinters
> >> and let people do any background research that might be necessary
> >> before
> >> the sprint actually starts.
> >
> > Just a reminder about this.  Please sign up if you plan to come!
>
> All levels of experience are welcome, so if you've never been to a sprint
> before, we'd love to see you.
>
> Sign up as soon as you can though.  Sometimes space is allocated based on
> these lists.  I'm not sure how it's going to work this year, but it's best
> if we know approximately how many people will be there so we can be sure to
> get a big enough room for everyone.
>

Finally signed up; last time the "You must login to edit" message was
hardcoded *and* there was no link to the edit page. That was a confusing
journey.


>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110303/de135da9/attachment.htm 

From glyph at twistedmatrix.com  Thu Mar  3 01:18:18 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 3 Mar 2011 01:18:18 -0500
Subject: [Twisted-Python] PyCon 2011 Twisted Sprint
In-Reply-To: <AANLkTi=4oa73hfeqF64YHz4YK9gaadV-Z2McD8zZA9hh@mail.gmail.com>
References: <20110208162454.1699.1277311042.divmod.xquotient.1389@localhost.localdomain>
	<20110303042836.2231.390810583.divmod.xquotient.119@localhost.localdomain>
	<6CA51688-7B5A-464A-AC62-1F673124385F@twistedmatrix.com>
	<AANLkTi=4oa73hfeqF64YHz4YK9gaadV-Z2McD8zZA9hh@mail.gmail.com>
Message-ID: <332BE6AC-4DA1-45FD-95FB-00B9C2013457@twistedmatrix.com>


On Mar 3, 2011, at 12:21 AM, Tom Davis wrote:

> On Wed, Mar 2, 2011 at 11:45 PM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
> On Mar 2, 2011, at 11:28 PM, exarkun at twistedmatrix.com wrote:
> 
> > On 8 Feb, 04:24 pm, exarkun at twistedmatrix.com wrote:
> >> Hello all,
> >>
> >> Once again, we will be sprinting at PyCon.  I've just added Twisted to
> >> <http://us.pycon.org/2011/sprints/projects/>.  If you plan to attend
> >> (for any amount of time), please add your name to the attendees list.
> >> Also feel free to suggest additional sprint topics.  We won't really
> >> limit sprint topics to things planned in advance, but adding particular
> >> things to the list is a probably a good way to attract more sprinters
> >> and let people do any background research that might be necessary
> >> before
> >> the sprint actually starts.
> >
> > Just a reminder about this.  Please sign up if you plan to come!
> 
> All levels of experience are welcome, so if you've never been to a sprint before, we'd love to see you.
> 
> Sign up as soon as you can though.  Sometimes space is allocated based on these lists.  I'm not sure how it's going to work this year, but it's best if we know approximately how many people will be there so we can be sure to get a big enough room for everyone.
> 
> Finally signed up; last time the "You must login to edit" message was hardcoded *and* there was no link to the edit page. That was a confusing journey.

Woah, awesome!  So you're going to be in Atlanta after all?  (Or am I mixing you up with someone else whose plans were uncertain?)

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110303/70beaccb/attachment.htm 

From fantix.king at gmail.com  Thu Mar  3 07:31:02 2011
From: fantix.king at gmail.com (Fantix King)
Date: Thu, 3 Mar 2011 20:31:02 +0800
Subject: [Twisted-Python] Asynchronous context in Twisted
Message-ID: <AANLkTikX_wkb5-jgmxQ7Y-3_ENurHS-COTOfBQN=vGX4@mail.gmail.com>

Hi,

I tried to make python.context work in asynchronous code between main loops.
Anyone has similar experience to share please?

Not sure if I am rebuilding a wheel :P

http://code.google.com/p/little-site/source/browse/littlesite/custom_reactor.py


BR,
Fantix.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110303/e535b544/attachment.htm 

From dineshkapoor27 at gmail.com  Thu Mar  3 07:42:57 2011
From: dineshkapoor27 at gmail.com (Dinesh Kapoor)
Date: Thu, 3 Mar 2011 18:12:57 +0530
Subject: [Twisted-Python] Question regarding the working of twisted
 python with celery
In-Reply-To: <20110302133435.2231.810980901.divmod.xquotient.101@localhost.localdomain>
References: <AANLkTi=g+q1_y6McTAaeSK10k=76RVbSdcU2o9nt7Tiw@mail.gmail.com>
	<20110302133435.2231.810980901.divmod.xquotient.101@localhost.localdomain>
Message-ID: <AANLkTi=gf=8+b+4M7xmgn-phewzHXe0+c5i2n6r5hvzX@mail.gmail.com>

Thanks Reza and Jean-Paul for your response. Actually, I tried investigating
a bit more that whether the reactor is in different process than the calling
celery task, and it doesn't seem to be the case. The workflow that I am
assuming is as follows:

1. Celery creates a worker process and assigns a task to it, which is our
Python code.
2. That python code is calling into the twisted library where the reactor
exists, so that reactor is in the same process as our python code.
3. Our code opens up a TCP socket to another process which is NOT related to
celery or twisted (it connects to freeswitch process).
4. When celery is run with concurrency of 2, then I tried printing out the
process ids of calling process in the reactor code, and I am getting 2
different pids, so I am assuming there are two seperate copies of reactor in
those separate tasks.
5. One thing that I have think that's happening is that the reactor gets
stuck at polling, and then once it times out, the data is written on the
socket. Is that possible? If yes, how can I get around it?
6. Jean-Paul, how does Ampoule compares to Twisted?

Thanks,
Dinesh




On Wed, Mar 2, 2011 at 7:04 PM, <exarkun at twistedmatrix.com> wrote:

> On 09:42 am, dineshkapoor27 at gmail.com wrote:
> >Hi,
> >
> >  I have run into a weird performance issue while working with twisted
> >and
> >using celery to schedule tasks on it. Here is my setup:
> >
> >1. Celery schedules a task which makes a TCP connection to a server
> >running
> >FreeSwitch
> >2. Celery is running with concurrency = 2.
> >3. I have changed my code so that I call reactor.callfromthread for all
> >reactor based work.
> >4. A lot of times once I schedule the celery task, I get delays ranging
> >from
> >3 - 30 seconds when I am running with Celery concurrency =2.
> >5. If I reduce the celery concurrency to 1, then everything works
> >great!
> >6. Upon debugging it a little bit more, it seems that the
> >selectReactor's
> >doSelect is where the code is getting stuck on the select().
> >
> >I dont know how to get around the delay, and I dont know who is causing
> >that
> >delay exactly. If there is more info that is needed then please let me
> >know.
> >Everything works fine when the Celery worker process is 1, but delay
> >starts
> >happening invariably when celery's worker processes >=2.
>
> I think Reza Lotun explained what's causing this problem.
>
> If you haven't looked at it yet, you might want to see if Ampoule can
> help you out.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110303/fafbccb5/attachment.htm 

From tom at recursivedream.com  Thu Mar  3 09:03:59 2011
From: tom at recursivedream.com (Tom Davis)
Date: Thu, 3 Mar 2011 09:03:59 -0500
Subject: [Twisted-Python] PyCon 2011 Twisted Sprint
In-Reply-To: <332BE6AC-4DA1-45FD-95FB-00B9C2013457@twistedmatrix.com>
References: <20110208162454.1699.1277311042.divmod.xquotient.1389@localhost.localdomain>
	<20110303042836.2231.390810583.divmod.xquotient.119@localhost.localdomain>
	<6CA51688-7B5A-464A-AC62-1F673124385F@twistedmatrix.com>
	<AANLkTi=4oa73hfeqF64YHz4YK9gaadV-Z2McD8zZA9hh@mail.gmail.com>
	<332BE6AC-4DA1-45FD-95FB-00B9C2013457@twistedmatrix.com>
Message-ID: <AANLkTi=QpPZC0gFYXaJA8DeSTds71hC73DUJwQfAfQC-@mail.gmail.com>

On Thu, Mar 3, 2011 at 1:18 AM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

>
> On Mar 3, 2011, at 12:21 AM, Tom Davis wrote:
>
> On Wed, Mar 2, 2011 at 11:45 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:
>
>>
>> On Mar 2, 2011, at 11:28 PM, exarkun at twistedmatrix.com wrote:
>>
>> > On 8 Feb, 04:24 pm, exarkun at twistedmatrix.com wrote:
>> >> Hello all,
>> >>
>> >> Once again, we will be sprinting at PyCon.  I've just added Twisted to
>> >> <http://us.pycon.org/2011/sprints/projects/>.  If you plan to attend
>> >> (for any amount of time), please add your name to the attendees list.
>> >> Also feel free to suggest additional sprint topics.  We won't really
>> >> limit sprint topics to things planned in advance, but adding particular
>> >> things to the list is a probably a good way to attract more sprinters
>> >> and let people do any background research that might be necessary
>> >> before
>> >> the sprint actually starts.
>> >
>> > Just a reminder about this.  Please sign up if you plan to come!
>>
>> All levels of experience are welcome, so if you've never been to a sprint
>> before, we'd love to see you.
>>
>> Sign up as soon as you can though.  Sometimes space is allocated based on
>> these lists.  I'm not sure how it's going to work this year, but it's best
>> if we know approximately how many people will be there so we can be sure to
>> get a big enough room for everyone.
>>
>
> Finally signed up; last time the "You must login to edit" message was
> hardcoded *and* there was no link to the edit page. That was a confusing
> journey.
>
>
> Woah, awesome!  So you're going to be in Atlanta after all?  (Or am I
> mixing you up with someone else whose plans were uncertain?)
>
>
That was me, I'm just bad with status updates. Really excited for my first
PyCon and some concentrated Twisted hacking!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110303/47ad6cd1/attachment-0001.htm 

From glyph at twistedmatrix.com  Thu Mar  3 14:39:37 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 3 Mar 2011 14:39:37 -0500
Subject: [Twisted-Python] Asynchronous context in Twisted
In-Reply-To: <AANLkTikX_wkb5-jgmxQ7Y-3_ENurHS-COTOfBQN=vGX4@mail.gmail.com>
References: <AANLkTikX_wkb5-jgmxQ7Y-3_ENurHS-COTOfBQN=vGX4@mail.gmail.com>
Message-ID: <A5F1F2F0-A639-4B3A-A1D1-899F872F06CD@twistedmatrix.com>

On Mar 3, 2011, at 7:31 AM, Fantix King wrote:

> Hi,
> 
> I tried to make python.context work in asynchronous code between main loops. Anyone has similar experience to share please?
> 
> Not sure if I am rebuilding a wheel :P
> 
> http://code.google.com/p/little-site/source/browse/littlesite/custom_reactor.py

This is something I've often thought about doing in Twisted itself, actually :).  But I wasn't sure that chaining context would actually do anything practically useful most of the time.  Have you found that it's actually useful?  Have you managed to leverage this to, for example, get more informative error messages out of Deferred failures?

Doing it as a subclass like this is not optimal, as it limits you to one reactor (and the Select reactor is not really the best one).  A wrapper would be slightly more tricky (you'd have to deal with the places that the reactor passes itself through to things like Process and Port, so you'd have to create wrappers for those as well) but much more general.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110303/c578cf0d/attachment.htm 

From andrew at bemusement.org  Thu Mar  3 16:36:37 2011
From: andrew at bemusement.org (Andrew Bennetts)
Date: Fri, 4 Mar 2011 08:36:37 +1100
Subject: [Twisted-Python] Question regarding the working of twisted
 python with celery
In-Reply-To: <AANLkTi=gf=8+b+4M7xmgn-phewzHXe0+c5i2n6r5hvzX@mail.gmail.com>
References: <AANLkTi=g+q1_y6McTAaeSK10k=76RVbSdcU2o9nt7Tiw@mail.gmail.com>
	<20110302133435.2231.810980901.divmod.xquotient.101@localhost.localdomain>
	<AANLkTi=gf=8+b+4M7xmgn-phewzHXe0+c5i2n6r5hvzX@mail.gmail.com>
Message-ID: <20110303213637.GX3670@aihal.home.puzzling.org>

Dinesh Kapoor wrote:
[...]
>    4. When celery is run with concurrency of 2, then I tried printing out the
>    process ids of calling process in the reactor code, and I am getting 2
>    different pids, so I am assuming there are two seperate copies of reactor
>    in those separate tasks.

This sounds like the problem: you have instantiated one reactor, and
Celery (probably via the multiprocessing module) has used fork(), which
shares the reactor's internal state with the forked copy, which is not
safe.  In particular I suspect the 'waker' pipe that the reactor uses to
be notified is being shared between both processes, leading to
notifications of callFromThread etc to be noticed by the wrong copy.

The solution is to avoid starting the reactor until after the separate
processes have started.  I don't know how easy that is to arrange with
Celery.

-Andrew.



From jasonjwwilliams at gmail.com  Thu Mar  3 23:00:59 2011
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Thu, 3 Mar 2011 21:00:59 -0700
Subject: [Twisted-Python] Agent and "Cannot assign requested address"
Message-ID: <AANLkTi=Z=u+H=q0vHG1853eTN0Q8XeVQerptGCMAMrmK@mail.gmail.com>

Hi All,

I've got a situation where I'm using t.w.c.Agent to make 100,000 POST
request against a server. Each time a new Agent instance is built and
the request is sent using it. After about 20,000 requests, I get this
error:

Failure: twisted.internet.error.ConnectError: An error occurred while
connecting: 99: Cannot assign requested address.

Would building the Agent once and reusing the same instance avoid
this? I assume I've run out of client ports.

-J


From itamar at itamarst.org  Fri Mar  4 08:29:31 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Fri, 04 Mar 2011 08:29:31 -0500
Subject: [Twisted-Python] Agent and "Cannot assign requested address"
In-Reply-To: <AANLkTi=Z=u+H=q0vHG1853eTN0Q8XeVQerptGCMAMrmK@mail.gmail.com>
References: <AANLkTi=Z=u+H=q0vHG1853eTN0Q8XeVQerptGCMAMrmK@mail.gmail.com>
Message-ID: <1299245371.1656.8.camel@blake>

On Thu, 2011-03-03 at 21:00 -0700, Jason J. W. Williams wrote:
> Hi All,
> 
> I've got a situation where I'm using t.w.c.Agent to make 100,000 POST
> request against a server. Each time a new Agent instance is built and
> the request is sent using it. After about 20,000 requests, I get this
> error:
> 
> Failure: twisted.internet.error.ConnectError: An error occurred while
> connecting: 99: Cannot assign requested address.
> 
> Would building the Agent once and reusing the same instance avoid
> this? I assume I've run out of client ports.

Yes... except it doesn't support persistent connections yet. Do you
actually need to run all 100,000 in parallel? If not, set a cap on how
many requests can run in parallel.



From exarkun at twistedmatrix.com  Fri Mar  4 08:33:11 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 04 Mar 2011 13:33:11 -0000
Subject: [Twisted-Python] Agent and "Cannot assign requested address"
In-Reply-To: <1299245371.1656.8.camel@blake>
References: <AANLkTi=Z=u+H=q0vHG1853eTN0Q8XeVQerptGCMAMrmK@mail.gmail.com>
	<1299245371.1656.8.camel@blake>
Message-ID: <20110304133311.2231.1403604990.divmod.xquotient.121@localhost.localdomain>

On 01:29 pm, itamar at itamarst.org wrote:
>On Thu, 2011-03-03 at 21:00 -0700, Jason J. W. Williams wrote:
>>Hi All,
>>
>>I've got a situation where I'm using t.w.c.Agent to make 100,000 POST
>>request against a server. Each time a new Agent instance is built and
>>the request is sent using it. After about 20,000 requests, I get this
>>error:
>>
>>Failure: twisted.internet.error.ConnectError: An error occurred while
>>connecting: 99: Cannot assign requested address.
>>
>>Would building the Agent once and reusing the same instance avoid
>>this? I assume I've run out of client ports.
>
>Yes... except it doesn't support persistent connections yet. Do you
>actually need to run all 100,000 in parallel? If not, set a cap on how
>many requests can run in parallel.

It's worse than just "in parallel".  After the connection closes, it 
moves to TIME_WAIT for two minutes.  These count towards the limit as 
well.

Jean-Paul


From itamar at itamarst.org  Fri Mar  4 08:52:16 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Fri, 04 Mar 2011 08:52:16 -0500
Subject: [Twisted-Python] ANN: Fusion v0.3,
	a C++ integration layer for Twisted
Message-ID: <1299246736.1656.13.camel@blake>

Fusion allows you to implement protocols for TCP and UDP in C++,
minimizing data copying and function call overhead. Most people should
just stick to Python, of course :) Note that I have no code that uses
this version of Fusion, and unit tests (while next on my very
theoretical todo list) do not yet exist, so use with caution -- I'd love
to hear success stories from anyone who is using it.

v0.3 fixes a memory leak, and also allows Fusion to build on modern
versions of Python and modern compilers. I built it with Python 2.6 and
boost::python v1.40, but it should work with other versions as well.

http://itamarst.org/software/fusion-0.3.0.tar.gz (homepage of sorts at
http://itamarst.org/software/).

-Itamar



From itamar at itamarst.org  Fri Mar  4 08:53:48 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Fri, 04 Mar 2011 08:53:48 -0500
Subject: [Twisted-Python] Agent and "Cannot assign requested address"
In-Reply-To: <20110304133311.2231.1403604990.divmod.xquotient.121@localhost.localdomain>
References: <AANLkTi=Z=u+H=q0vHG1853eTN0Q8XeVQerptGCMAMrmK@mail.gmail.com>
	<1299245371.1656.8.camel@blake>
	<20110304133311.2231.1403604990.divmod.xquotient.121@localhost.localdomain>
Message-ID: <1299246828.1656.15.camel@blake>

On Fri, 2011-03-04 at 13:33 +0000, exarkun at twistedmatrix.com wrote:

> It's worse than just "in parallel".  After the connection closes, it 
> moves to TIME_WAIT for two minutes.  These count towards the limit as 
> well.

Oh right:
http://twistedmatrix.com/trac/ticket/1288

You could probably set that yourself with a little hacking until that
ticket is fixed.



From jasonjwwilliams at gmail.com  Fri Mar  4 12:09:59 2011
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Fri, 4 Mar 2011 10:09:59 -0700
Subject: [Twisted-Python] Agent and "Cannot assign requested address"
In-Reply-To: <1299246828.1656.15.camel@blake>
References: <AANLkTi=Z=u+H=q0vHG1853eTN0Q8XeVQerptGCMAMrmK@mail.gmail.com>
	<1299245371.1656.8.camel@blake>
	<20110304133311.2231.1403604990.divmod.xquotient.121@localhost.localdomain>
	<1299246828.1656.15.camel@blake>
Message-ID: <05DD6421-1AB3-4B1B-8AF9-264C9CE35CF4@gmail.com>

Actually, I think the TIME_WAIT is the problem. It's what I see in netstat, and the Agent requests are fired sequentially via yield inside a for loop (inlineCallbacks). So they shouldn't be running in parallel. 

The use case here is loading a Riak server with keys to prepare for a test. There's not a real way to get around sending one POST per key. 

How would I set the timeout value in Twisted? Or do I have to modify the timeout/keepalive systemwide in /proc?

-J

Sent via iPhone

Is your e-mail Premiere?

On Mar 4, 2011, at 6:53, Itamar Turner-Trauring <itamar at itamarst.org> wrote:

> On Fri, 2011-03-04 at 13:33 +0000, exarkun at twistedmatrix.com wrote:
> 
>> It's worse than just "in parallel".  After the connection closes, it 
>> moves to TIME_WAIT for two minutes.  These count towards the limit as 
>> well.
> 
> Oh right:
> http://twistedmatrix.com/trac/ticket/1288
> 
> You could probably set that yourself with a little hacking until that
> ticket is fixed.
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From exarkun at twistedmatrix.com  Fri Mar  4 14:40:14 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 04 Mar 2011 19:40:14 -0000
Subject: [Twisted-Python] Agent and "Cannot assign requested address"
In-Reply-To: <05DD6421-1AB3-4B1B-8AF9-264C9CE35CF4@gmail.com>
References: <AANLkTi=Z=u+H=q0vHG1853eTN0Q8XeVQerptGCMAMrmK@mail.gmail.com>
	<1299245371.1656.8.camel@blake>
	<20110304133311.2231.1403604990.divmod.xquotient.121@localhost.localdomain>
	<1299246828.1656.15.camel@blake>
	<05DD6421-1AB3-4B1B-8AF9-264C9CE35CF4@gmail.com>
Message-ID: <20110304194014.2231.1452972868.divmod.xquotient.147@localhost.localdomain>

On 05:09 pm, jasonjwwilliams at gmail.com wrote:
>Actually, I think the TIME_WAIT is the problem. It's what I see in 
>netstat, and the Agent requests are fired sequentially via yield inside 
>a for loop (inlineCallbacks). So they shouldn't be running in parallel.
>
>The use case here is loading a Riak server with keys to prepare for a 
>test. There's not a real way to get around sending one POST per key.
>
>How would I set the timeout value in Twisted? Or do I have to modify 
>the timeout/keepalive systemwide in /proc?

As far as I know, there are only system-wide settings for this value on 
all the major platforms.

It seems like you'll be happiest using persistent connections, though, 
once Agent actually offers those.

Jean-Paul


From jasonjwwilliams at gmail.com  Fri Mar  4 15:20:14 2011
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Fri, 4 Mar 2011 13:20:14 -0700
Subject: [Twisted-Python] Agent and "Cannot assign requested address"
In-Reply-To: <20110304194014.2231.1452972868.divmod.xquotient.147@localhost.localdomain>
References: <AANLkTi=Z=u+H=q0vHG1853eTN0Q8XeVQerptGCMAMrmK@mail.gmail.com>
	<1299245371.1656.8.camel@blake>
	<20110304133311.2231.1403604990.divmod.xquotient.121@localhost.localdomain>
	<1299246828.1656.15.camel@blake>
	<05DD6421-1AB3-4B1B-8AF9-264C9CE35CF4@gmail.com>
	<20110304194014.2231.1452972868.divmod.xquotient.147@localhost.localdomain>
Message-ID: <AANLkTikhj2OX+B3n_1XLF82gxQjibV1VKMW1BW5nykt2@mail.gmail.com>

Yeah. Actually that's the reason I refactored txRiak to use Agent
instead of HTTPClient, so it could take advantage of pooling when that
comes down the pike for Agent (well that and HTTP 1.1 support).

I guess I'll just throttle down the load rate. Thank you for your help.

-J

On Fri, Mar 4, 2011 at 12:40 PM,  <exarkun at twistedmatrix.com> wrote:
> On 05:09 pm, jasonjwwilliams at gmail.com wrote:
>>Actually, I think the TIME_WAIT is the problem. It's what I see in
>>netstat, and the Agent requests are fired sequentially via yield inside
>>a for loop (inlineCallbacks). So they shouldn't be running in parallel.
>>
>>The use case here is loading a Riak server with keys to prepare for a
>>test. There's not a real way to get around sending one POST per key.
>>
>>How would I set the timeout value in Twisted? Or do I have to modify
>>the timeout/keepalive systemwide in /proc?
>
> As far as I know, there are only system-wide settings for this value on
> all the major platforms.
>
> It seems like you'll be happiest using persistent connections, though,
> once Agent actually offers those.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From jasonjwwilliams at gmail.com  Fri Mar  4 15:20:14 2011
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Fri, 4 Mar 2011 13:20:14 -0700
Subject: [Twisted-Python] Agent and "Cannot assign requested address"
In-Reply-To: <20110304194014.2231.1452972868.divmod.xquotient.147@localhost.localdomain>
References: <AANLkTi=Z=u+H=q0vHG1853eTN0Q8XeVQerptGCMAMrmK@mail.gmail.com>
	<1299245371.1656.8.camel@blake>
	<20110304133311.2231.1403604990.divmod.xquotient.121@localhost.localdomain>
	<1299246828.1656.15.camel@blake>
	<05DD6421-1AB3-4B1B-8AF9-264C9CE35CF4@gmail.com>
	<20110304194014.2231.1452972868.divmod.xquotient.147@localhost.localdomain>
Message-ID: <AANLkTikhj2OX+B3n_1XLF82gxQjibV1VKMW1BW5nykt2@mail.gmail.com>

Yeah. Actually that's the reason I refactored txRiak to use Agent
instead of HTTPClient, so it could take advantage of pooling when that
comes down the pike for Agent (well that and HTTP 1.1 support).

I guess I'll just throttle down the load rate. Thank you for your help.

-J

On Fri, Mar 4, 2011 at 12:40 PM,  <exarkun at twistedmatrix.com> wrote:
> On 05:09 pm, jasonjwwilliams at gmail.com wrote:
>>Actually, I think the TIME_WAIT is the problem. It's what I see in
>>netstat, and the Agent requests are fired sequentially via yield inside
>>a for loop (inlineCallbacks). So they shouldn't be running in parallel.
>>
>>The use case here is loading a Riak server with keys to prepare for a
>>test. There's not a real way to get around sending one POST per key.
>>
>>How would I set the timeout value in Twisted? Or do I have to modify
>>the timeout/keepalive systemwide in /proc?
>
> As far as I know, there are only system-wide settings for this value on
> all the major platforms.
>
> It seems like you'll be happiest using persistent connections, though,
> once Agent actually offers those.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From juanito1982 at gmail.com  Sat Mar  5 20:00:02 2011
From: juanito1982 at gmail.com (=?ISO-8859-1?Q?Juan_Antonio_Iba=F1ez_Santorum?=)
Date: Sun, 6 Mar 2011 02:00:02 +0100
Subject: [Twisted-Python] Debug logging
Message-ID: <AANLkTikitvNJEvEWpry_GUSFTQBLO8RyS5BcS_oQsjjn@mail.gmail.com>

Hello!

   I am running a smaill app using twistd. All works OK except I cannot get
debugging messages into the log. I think I may to set logging level but I
don't know if possible nor where it can be done. I am using the python
logging module. Any help wourd be appreciated.

Regards
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110306/dafe5c3e/attachment.htm 

From thomasdrake1 at gmail.com  Sat Mar  5 20:12:23 2011
From: thomasdrake1 at gmail.com (Thomas Drake)
Date: Sat, 5 Mar 2011 17:12:23 -0800
Subject: [Twisted-Python] Debug logging
In-Reply-To: <AANLkTikitvNJEvEWpry_GUSFTQBLO8RyS5BcS_oQsjjn@mail.gmail.com>
References: <AANLkTikitvNJEvEWpry_GUSFTQBLO8RyS5BcS_oQsjjn@mail.gmail.com>
Message-ID: <A5A6283C-37CC-45A4-99F2-178EBFB87F9E@gmail.com>

Why not try:

from twisted.python import log

log.err('an error happened')
log.msg('something nice happened')

If you're set on using the logging module, why not read this:

http://twistedmatrix.com/documents/current/core/howto/logging.html

Tad

On Mar 5, 2011, at 5:00 PM, Juan Antonio Iba?ez Santorum wrote:

> Hello!
> 
>    I am running a smaill app using twistd. All works OK except I cannot get debugging messages into the log. I think I may to set logging level but I don't know if possible nor where it can be done. I am using the python logging module. Any help wourd be appreciated.
> 
> Regards
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From exarkun at twistedmatrix.com  Sun Mar  6 00:05:25 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 06 Mar 2011 05:05:25 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1299387925.43.47790818@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110306/f089fad4/attachment.htm 

From exarkun at twistedmatrix.com  Sun Mar  6 00:51:35 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 06 Mar 2011 05:51:35 -0000
Subject: [Twisted-Python] Debug logging
In-Reply-To: <A5A6283C-37CC-45A4-99F2-178EBFB87F9E@gmail.com>
References: <AANLkTikitvNJEvEWpry_GUSFTQBLO8RyS5BcS_oQsjjn@mail.gmail.com>
	<A5A6283C-37CC-45A4-99F2-178EBFB87F9E@gmail.com>
Message-ID: <20110306055135.2231.1257257100.divmod.xquotient.179@localhost.localdomain>

On 01:12 am, thomasdrake1 at gmail.com wrote:
>Why not try:
>
>from twisted.python import log
>
>log.err('an error happened')

except you should really only pass Failures to log.err, or None if 
you're calling it in an `except` block.

Jean-Paul
>log.msg('something nice happened')
>
>If you're set on using the logging module, why not read this:
>
>http://twistedmatrix.com/documents/current/core/howto/logging.html
>
>Tad
>
>On Mar 5, 2011, at 5:00 PM, Juan Antonio Iba?ez Santorum wrote:
>>Hello!
>>
>>    I am running a smaill app using twistd. All works OK except I 
>>cannot get debugging messages into the log. I think I may to set 
>>logging level but I don't know if possible nor where it can be done. I 
>>am using the python logging module. Any help wourd be appreciated.
>>
>>Regards
>>_______________________________________________
>>Twisted-Python mailing list
>>Twisted-Python at twistedmatrix.com
>>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From abierbaum at gmail.com  Mon Mar  7 10:19:07 2011
From: abierbaum at gmail.com (Allen Bierbaum)
Date: Mon, 7 Mar 2011 09:19:07 -0600
Subject: [Twisted-Python] Authentication & Access Control system for web
	services
Message-ID: <AANLkTi=4QO8d6jSB8=Y3wuO_uW6LJWd45pQ2C-hdz+xS@mail.gmail.com>

I have a REST service I have implemented using twisted.web.  Based
upon a new requirement I need to put role-based access control
security on the service and am trying to find the most twisted way to
do it.

I would like to have:
- Username / password login that is checked against a backend database
- Roles and associated privileges associated with each user
- Administration interface to edit users, roles, and privileges
- "Simple" way to configure the access control requirements on the
services. (ex: which services need which roles)

Before I role my own code I wanted to check and see if there are any
addons for this or if anyone else had attacked this problem with
twisted and had some open source code I could look at.

I have found a couple of projects for WSGI that I may try to pull
ideas from, but I haven't yet found anything that uses the twisted
resource model.  (http://authkit.org/,
http://docs.repoze.org/who/2.0/)

Any pointers to twisted projects I could leverage?

-Allen


From jasonjwwilliams at gmail.com  Mon Mar  7 12:13:05 2011
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Mon, 7 Mar 2011 10:13:05 -0700
Subject: [Twisted-Python] Authentication & Access Control system for web
	services
In-Reply-To: <AANLkTi=4QO8d6jSB8=Y3wuO_uW6LJWd45pQ2C-hdz+xS@mail.gmail.com>
References: <AANLkTi=4QO8d6jSB8=Y3wuO_uW6LJWd45pQ2C-hdz+xS@mail.gmail.com>
Message-ID: <1016436B-1B11-4EDC-8BF6-55D8FDE9C461@gmail.com>

Hi Allen,

There's Twisted Cred you could build something on. I've also got a framework my company built internally on top of Twisted Web that I've been planning to open source once we make the unit tests more robust. Would be happy to share it with you. You decorate the render_ method with the permissions the caller must possess. 

-J

Sent via iPhone

Is your e-mail Premiere?

On Mar 7, 2011, at 8:19, Allen Bierbaum <abierbaum at gmail.com> wrote:

> I have a REST service I have implemented using twisted.web.  Based
> upon a new requirement I need to put role-based access control
> security on the service and am trying to find the most twisted way to
> do it.
> 
> I would like to have:
> - Username / password login that is checked against a backend database
> - Roles and associated privileges associated with each user
> - Administration interface to edit users, roles, and privileges
> - "Simple" way to configure the access control requirements on the
> services. (ex: which services need which roles)
> 
> Before I role my own code I wanted to check and see if there are any
> addons for this or if anyone else had attacked this problem with
> twisted and had some open source code I could look at.
> 
> I have found a couple of projects for WSGI that I may try to pull
> ideas from, but I haven't yet found anything that uses the twisted
> resource model.  (http://authkit.org/,
> http://docs.repoze.org/who/2.0/)
> 
> Any pointers to twisted projects I could leverage?
> 
> -Allen
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From abierbaum at gmail.com  Mon Mar  7 12:49:55 2011
From: abierbaum at gmail.com (Allen Bierbaum)
Date: Mon, 7 Mar 2011 11:49:55 -0600
Subject: [Twisted-Python] Authentication & Access Control system for web
	services
In-Reply-To: <1016436B-1B11-4EDC-8BF6-55D8FDE9C461@gmail.com>
References: <AANLkTi=4QO8d6jSB8=Y3wuO_uW6LJWd45pQ2C-hdz+xS@mail.gmail.com>
	<1016436B-1B11-4EDC-8BF6-55D8FDE9C461@gmail.com>
Message-ID: <AANLkTimSOqko1fZ99rO0rARNKw4pNCL2M6v=4QFm7z6U@mail.gmail.com>

I would be interested to see anything you have and are willing to share.

I don't want to role my own, but it looks like I am going to have to
and the more I can learn from what you have done, the better. :)

-Allen


On Mon, Mar 7, 2011 at 11:13 AM, Jason J. W. Williams
<jasonjwwilliams at gmail.com> wrote:
> Hi Allen,
>
> There's Twisted Cred you could build something on. I've also got a framework my company built internally on top of Twisted Web that I've been planning to open source once we make the unit tests more robust. Would be happy to share it with you. You decorate the render_ method with the permissions the caller must possess.
>
> -J
>
> Sent via iPhone
>
> Is your e-mail Premiere?
>
> On Mar 7, 2011, at 8:19, Allen Bierbaum <abierbaum at gmail.com> wrote:
>
>> I have a REST service I have implemented using twisted.web. ?Based
>> upon a new requirement I need to put role-based access control
>> security on the service and am trying to find the most twisted way to
>> do it.
>>
>> I would like to have:
>> - Username / password login that is checked against a backend database
>> - Roles and associated privileges associated with each user
>> - Administration interface to edit users, roles, and privileges
>> - "Simple" way to configure the access control requirements on the
>> services. (ex: which services need which roles)
>>
>> Before I role my own code I wanted to check and see if there are any
>> addons for this or if anyone else had attacked this problem with
>> twisted and had some open source code I could look at.
>>
>> I have found a couple of projects for WSGI that I may try to pull
>> ideas from, but I haven't yet found anything that uses the twisted
>> resource model. ?(http://authkit.org/,
>> http://docs.repoze.org/who/2.0/)
>>
>> Any pointers to twisted projects I could leverage?
>>
>> -Allen
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From facundobatista at gmail.com  Mon Mar  7 18:48:22 2011
From: facundobatista at gmail.com (Facundo Batista)
Date: Mon, 7 Mar 2011 20:48:22 -0300
Subject: [Twisted-Python] Failing tests in trunk
Message-ID: <AANLkTinZHZaq1hJW8YoHRFYm+c5Nwh62Bkv6nkDpExqt@mail.gmail.com>

I branched trunk from the LP repository. Running the tests all
together ("trial twisted"), consistently makes me fail the following
12:

twisted.conch.test.test_cftp.ListingTests.test_newFile
twisted.conch.test.test_cftp.ListingTests.test_newSingleDigitDayOfMonth
twisted.conch.test.test_cftp.ListingTests.test_oldFile
twisted.conch.test.test_cftp.ListingTests.test_oldSingleDigitDayOfMonth
twisted.mail.test.test_imap.NewFetchTestCase.testFetchAll
twisted.mail.test.test_imap.NewFetchTestCase.testFetchAllUID
twisted.mail.test.test_imap.NewFetchTestCase.testFetchFast
twisted.mail.test.test_imap.NewFetchTestCase.testFetchFastUID
twisted.mail.test.test_imap.NewFetchTestCase.testFetchFull
twisted.mail.test.test_imap.NewFetchTestCase.testFetchFullUID
twisted.mail.test.test_imap.NewFetchTestCase.testFetchInternalDate
twisted.mail.test.test_imap.NewFetchTestCase.testFetchInternalDateUID

However, if I run the tests doing "trial twisted.mail" or "trial
twisted.conch", they never fail.

I still didn't debug this, but I wanted to see if somebody experienced
something similar to this.

Regards,

-- 
.? ? Facundo

Blog: http://www.taniquetil.com.ar/plog/
PyAr: http://www.python.org/ar/


From exarkun at twistedmatrix.com  Mon Mar  7 19:34:28 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 08 Mar 2011 00:34:28 -0000
Subject: [Twisted-Python] Failing tests in trunk
In-Reply-To: <AANLkTinZHZaq1hJW8YoHRFYm+c5Nwh62Bkv6nkDpExqt@mail.gmail.com>
References: <AANLkTinZHZaq1hJW8YoHRFYm+c5Nwh62Bkv6nkDpExqt@mail.gmail.com>
Message-ID: <20110308003428.2231.215396262.divmod.xquotient.196@localhost.localdomain>

On 7 Mar, 11:48 pm, facundobatista at gmail.com wrote:
>I branched trunk from the LP repository. Running the tests all
>together ("trial twisted"), consistently makes me fail the following
>12:
>
>twisted.conch.test.test_cftp.ListingTests.test_newFile
>twisted.conch.test.test_cftp.ListingTests.test_newSingleDigitDayOfMonth
>twisted.conch.test.test_cftp.ListingTests.test_oldFile
>twisted.conch.test.test_cftp.ListingTests.test_oldSingleDigitDayOfMonth
>twisted.mail.test.test_imap.NewFetchTestCase.testFetchAll
>twisted.mail.test.test_imap.NewFetchTestCase.testFetchAllUID
>twisted.mail.test.test_imap.NewFetchTestCase.testFetchFast
>twisted.mail.test.test_imap.NewFetchTestCase.testFetchFastUID
>twisted.mail.test.test_imap.NewFetchTestCase.testFetchFull
>twisted.mail.test.test_imap.NewFetchTestCase.testFetchFullUID
>twisted.mail.test.test_imap.NewFetchTestCase.testFetchInternalDate
>twisted.mail.test.test_imap.NewFetchTestCase.testFetchInternalDateUID
>
>However, if I run the tests doing "trial twisted.mail" or "trial
>twisted.conch", they never fail.
>
>I still didn't debug this, but I wanted to see if somebody experienced
>something similar to this.

None of these are known failures:

    http://buildbot.twistedmatrix.com/boxes-supported

Just looking at the list of failing tests, I would make a small bet that 
the failures are caused by your locale setting somehow.

Jean-Paul


From jason.heeris at gmail.com  Tue Mar  8 03:38:02 2011
From: jason.heeris at gmail.com (Jason Heeris)
Date: Tue, 8 Mar 2011 16:38:02 +0800
Subject: [Twisted-Python] Slow data transfer with Twisted + socat + Windows
Message-ID: <AANLkTinobtkCT9uv4VVXHr0t4OQ5S-ph+Tx2Yn66T3bZ@mail.gmail.com>

I'm writing an application with Twisted/GTK to manage a serial device,
for use on both Windows and Linux. Unfortunately I can't use serial
comms directly under Windows[1], so my workaround is to launch
socat[2] in a subprocess to relay data between a local TCP port and
the serial port. The socat command I use is:

    socat TCP4-LISTEN:31415 /dev/com4,raw,echo=0,b57600

I can then send and receive data over localhost:31415 same as I would
for a serial port.

The trouble is, a transaction that takes a minute under Linux (using
*either* direct serial comms or the same socat subprocess approach)
now takes more than 50 times as long under Windows.

I've attached the script I'm using to test, mainly so it's clear what
I'm doing ? although it's useless unless you happen to have a serial
device using a protocol you can shoehorn into that script. I've also
attached the output where you can see the difference between different
reactors on different platforms. (In my app I use
reactor.spawnProcess(...), but I'm not doing that here.)

Basically, under Linux either approach takes 4 seconds; under Windows
the SelectReactor takes 30s, and the gtk2reactor takes 220s!

Profiling the "reactor.run()" call on the different platforms (both
for the select reactor) showed that (a) most time was spent in the
select.select call, and (b) the time spent in select was 8 times more
under Windows than Linux. I have no idea if this is useful information
or not.

I'm pretty sure it's not a socat-specific issue, because I get the
same problem if I use com2tcp[3]. It could be Cygwin related, but I
don't know how determine that for sure. Also, the fact that it runs
slower using the gtk2reactor (vs. selectreactor) suggests to me that
it could be my code, not theirs.

I found an old Cygwin thread[4] that claimed setting NODELAY on the
listening socket helped with a similar problem, but using

    > socat TCP4-LISTEN:31415,nodelay [etc]

...made no difference.

So I'm a bit stuck. Does anyone know how I can narrow it down further?
Has someone else noticed slow TCP behaviour under Windows? Or Cygwin
utilities? Have I made some glaringly obvious mistake in my script
there?

Any help appreciated. :)

Cheers,
Jason

[1] http://twistedmatrix.com/trac/ticket/4862
[2] http://www.dest-unreach.org/socat/
[3] http://com0com.sourceforge.net/
[4] http://www.mail-archive.com/cygwin at cygwin.com/msg66791.html
-------------- next part --------------
====
WINDOWS
====

>python socat_test.py
Using reactor: SelectReactor
Connection made!
Progress: 0.00
Progress: 0.10
Progress: 0.20
Progress: 0.30
Progress: 0.40
Progress: 0.50
Progress: 0.60
Progress: 0.70
Progress: 0.80
Progress: 0.90
Progress: 1.00
Time: 28.279000

>python socat_test.py
Using reactor: PortableGtkReactor
Connection made!
Progress: 0.00
Progress: 0.10
Progress: 0.20
Progress: 0.30
Progress: 0.40
Progress: 0.50
Progress: 0.60
Progress: 0.70
Progress: 0.80
Progress: 0.90
Progress: 1.00
Time: 222.143000

====
LINUX
====

$ python socat_test.py 
Using reactor: SelectReactor
Connection made!
Progress: 0.00
Progress: 0.10
Progress: 0.20
Progress: 0.30
Progress: 0.40
Progress: 0.50
Progress: 0.60
Progress: 0.70
Progress: 0.80
Progress: 0.90
Progress: 1.00
Time: 4.030676

$ python socat_test.py 
Using reactor: Gtk2Reactor
Connection made!
Progress: 0.00
Progress: 0.10
Progress: 0.20
Progress: 0.30
Progress: 0.40
Progress: 0.50
Progress: 0.60
Progress: 0.70
Progress: 0.80
Progress: 0.90
Progress: 1.00
Time: 4.032430
-------------- next part --------------
A non-text attachment was scrubbed...
Name: socat_test.py
Type: text/x-python
Size: 2642 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20110308/6162edde/attachment.py 

From facundobatista at gmail.com  Tue Mar  8 07:04:50 2011
From: facundobatista at gmail.com (Facundo Batista)
Date: Tue, 8 Mar 2011 09:04:50 -0300
Subject: [Twisted-Python] Failing tests in trunk
In-Reply-To: <20110308003428.2231.215396262.divmod.xquotient.196@localhost.localdomain>
References: <AANLkTinZHZaq1hJW8YoHRFYm+c5Nwh62Bkv6nkDpExqt@mail.gmail.com>
	<20110308003428.2231.215396262.divmod.xquotient.196@localhost.localdomain>
Message-ID: <AANLkTim_CtDL9qm1aq9i6yc_CGFjP62-RfKyHSgGR+HY@mail.gmail.com>

On Mon, Mar 7, 2011 at 9:34 PM,  <exarkun at twistedmatrix.com> wrote:

> None of these are known failures:
>
> ? ?http://buildbot.twistedmatrix.com/boxes-supported
>
> Just looking at the list of failing tests, I would make a small bet that
> the failures are caused by your locale setting somehow.

I thought of that, but why would the test pass when running alone?

I'll debug this.

-- 
.? ? Facundo

Blog: http://www.taniquetil.com.ar/plog/
PyAr: http://www.python.org/ar/


From jasonjwwilliams at gmail.com  Tue Mar  8 14:26:05 2011
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Tue, 8 Mar 2011 12:26:05 -0700
Subject: [Twisted-Python] Paisley 0.3 Released
Message-ID: <AANLkTi=GCG8SzjvE+rZQxZP3Q1MxhUw6z7AZ5dGDoaxW@mail.gmail.com>

Hello,

We wanted to let everyone know that we've released version 0.3 of
Paisley (the CouchDB client for Twisted Python). Among the new
features:

Enhancements

   * Added CouchDB authentication support (supply username and
password args when instantiating)
   * Re-factored underlying HTTP transport to use Twisted Web Agent
(will allow connection pooling in the future).
   * Re-factored code into formal Python package. API compatible with
old package layout.

Bug Fixes

   * Fixed attachment handling so it returns the attachment instead of
the owning document (dwb)

You can get it from Github or pypi:

* http://github.com/smcq/paisley

* http://pypi.python.org/pypi/paisley/0.3

Hopefully the new changes will be helpful to folks. Please let us know
if you have any questions.

-J


From michaelnt at gmail.com  Tue Mar  8 14:30:05 2011
From: michaelnt at gmail.com (Michael Thompson)
Date: Tue, 8 Mar 2011 19:30:05 +0000
Subject: [Twisted-Python] Failing tests in trunk
In-Reply-To: <AANLkTim_CtDL9qm1aq9i6yc_CGFjP62-RfKyHSgGR+HY@mail.gmail.com>
References: <AANLkTinZHZaq1hJW8YoHRFYm+c5Nwh62Bkv6nkDpExqt@mail.gmail.com>
	<20110308003428.2231.215396262.divmod.xquotient.196@localhost.localdomain>
	<AANLkTim_CtDL9qm1aq9i6yc_CGFjP62-RfKyHSgGR+HY@mail.gmail.com>
Message-ID: <AANLkTim8RnKa3+r3sHPkjmCpZGiJfx7JgE7S26KpDe-i@mail.gmail.com>

On 8 March 2011 12:04, Facundo Batista <facundobatista at gmail.com> wrote:
> On Mon, Mar 7, 2011 at 9:34 PM, ?<exarkun at twistedmatrix.com> wrote:
>
>> None of these are known failures:
>>
>> ? ?http://buildbot.twistedmatrix.com/boxes-supported
>>
>> Just looking at the list of failing tests, I would make a small bet that
>> the failures are caused by your locale setting somehow.
>
> I thought of that, but why would the test pass when running alone?

Sometimes a test can leave things running which causes later tests to
fail, trial tries to spot this but doesn't always succeed

You can try running the tests in a different order, there's a switch
to get trial to do that for you, and you can try to isolate which
earlier tests make the tests fail and then examine them.

Michael


From michaelnt at gmail.com  Tue Mar  8 14:49:16 2011
From: michaelnt at gmail.com (Michael Thompson)
Date: Tue, 8 Mar 2011 19:49:16 +0000
Subject: [Twisted-Python] Slow data transfer with Twisted + socat +
	Windows
In-Reply-To: <AANLkTinobtkCT9uv4VVXHr0t4OQ5S-ph+Tx2Yn66T3bZ@mail.gmail.com>
References: <AANLkTinobtkCT9uv4VVXHr0t4OQ5S-ph+Tx2Yn66T3bZ@mail.gmail.com>
Message-ID: <AANLkTi=ayQhhLOyP=PKh7Qpgb-v7sbXRSwzA_wxe7Pvy@mail.gmail.com>

On 8 March 2011 08:38, Jason Heeris <jason.heeris at gmail.com> wrote:
> I'm writing an application with Twisted/GTK to manage a serial device,
> for use on both Windows and Linux. Unfortunately I can't use serial
> comms directly under Windows[1], so my workaround is to launch
> socat[2] in a subprocess to relay data between a local TCP port and
> the serial port. The socat command I use is:
>
> ? ?socat TCP4-LISTEN:31415 /dev/com4,raw,echo=0,b57600
>
> I can then send and receive data over localhost:31415 same as I would
> for a serial port.
>
> The trouble is, a transaction that takes a minute under Linux (using
> *either* direct serial comms or the same socat subprocess approach)
> now takes more than 50 times as long under Windows.
>
> I've attached the script I'm using to test, mainly so it's clear what
> I'm doing ? although it's useless unless you happen to have a serial
> device using a protocol you can shoehorn into that script. I've also
> attached the output where you can see the difference between different
> reactors on different platforms. (In my app I use
> reactor.spawnProcess(...), but I'm not doing that here.)
>
> Basically, under Linux either approach takes 4 seconds; under Windows
> the SelectReactor takes 30s, and the gtk2reactor takes 220s!
>
> Profiling the "reactor.run()" call on the different platforms (both
> for the select reactor) showed that (a) most time was spent in the
> select.select call, and (b) the time spent in select was 8 times more
> under Windows than Linux. I have no idea if this is useful information
> or not.
>
> I'm pretty sure it's not a socat-specific issue, because I get the
> same problem if I use com2tcp[3]. It could be Cygwin related, but I
> don't know how determine that for sure. Also, the fact that it runs
> slower using the gtk2reactor (vs. selectreactor) suggests to me that
> it could be my code, not theirs.
>
> I found an old Cygwin thread[4] that claimed setting NODELAY on the
> listening socket helped with a similar problem, but using
>
> ? ?> socat TCP4-LISTEN:31415,nodelay [etc]
>
> ...made no difference.
>
> So I'm a bit stuck. Does anyone know how I can narrow it down further?
> Has someone else noticed slow TCP behaviour under Windows? Or Cygwin
> utilities? Have I made some glaringly obvious mistake in my script
> there?

Does you program just write via TCP to this serial device, it doesn't
do anything else that could block?

Have you tried running this under different reactors?

Running the windows program against the Linux socat device might help
to reduce the number of variables.

Michael


From jason.heeris at gmail.com  Tue Mar  8 20:47:32 2011
From: jason.heeris at gmail.com (Jason Heeris)
Date: Wed, 9 Mar 2011 09:47:32 +0800
Subject: [Twisted-Python] Slow data transfer with Twisted + socat +
	Windows
In-Reply-To: <AANLkTi=ayQhhLOyP=PKh7Qpgb-v7sbXRSwzA_wxe7Pvy@mail.gmail.com>
References: <AANLkTinobtkCT9uv4VVXHr0t4OQ5S-ph+Tx2Yn66T3bZ@mail.gmail.com>
	<AANLkTi=ayQhhLOyP=PKh7Qpgb-v7sbXRSwzA_wxe7Pvy@mail.gmail.com>
Message-ID: <AANLkTimBHJnVQfVhvFWQT6XB4MOTQW4YmABV5KoxJQLo@mail.gmail.com>

On 9 March 2011 03:49, Michael Thompson <michaelnt at gmail.com> wrote:
> Does you program just write via TCP to this serial device, it doesn't
> do anything else that could block?

Both the "bare bones" script and the real app writes and reads from
the device, so I wouldn't expect full speed communications. But I
can't see anything else in my script that might actually block.

> Have you tried running this under different reactors?

Yep ? no difference under Linux, but the GTK reactor is slower than
the select reactor under Windows (see original email for times).

> Running the windows program against the Linux socat device might help
> to reduce the number of variables.

Aha! Didn't think of that, but interesting results...

socat on Linux, socat_test.py on Windows VM:
  - select reactor: 4s
  - win32reactor: 4s
  - gtk reactor: 220s

socat on Windows VM, socat_test.py on Linux:
  - select reactor: 30s
  - gtk reactor: 30s

Interesting, but not exactly clarifying...

? Jason


From jasonjwwilliams at gmail.com  Wed Mar  9 00:58:01 2011
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Tue, 8 Mar 2011 22:58:01 -0700
Subject: [Twisted-Python] txRiakIdx: Twisted Riak library implementing
	transparent indexing
Message-ID: <AANLkTi=ek2Fe0oto9gdtwmw4w0-kUrbQx+o5jRTcN+6i@mail.gmail.com>

Hi Guys,

I've put together a library for my company's needs to implement
secondary indexes in Riak transparently. It's built on top of Ray
Cote's great txRIak library, and should drop in transparently anywhere
txRiak is used. We've open sourced it in case it's useful for anyone
else:

https://github.com/williamsjj/txriakidx

Comments/thoughts are greatly appreciated.

-J


From michaelnt at gmail.com  Wed Mar  9 02:02:58 2011
From: michaelnt at gmail.com (Michael Thompson)
Date: Wed, 9 Mar 2011 07:02:58 +0000
Subject: [Twisted-Python] Fwd: Slow data transfer with Twisted + socat +
	Windows
In-Reply-To: <AANLkTikdbsKHFOmxx_6KZS1O5Onh3aoyPPVsOc-p5c4x@mail.gmail.com>
References: <AANLkTinobtkCT9uv4VVXHr0t4OQ5S-ph+Tx2Yn66T3bZ@mail.gmail.com>
	<AANLkTi=ayQhhLOyP=PKh7Qpgb-v7sbXRSwzA_wxe7Pvy@mail.gmail.com>
	<AANLkTimBHJnVQfVhvFWQT6XB4MOTQW4YmABV5KoxJQLo@mail.gmail.com>
	<AANLkTikdbsKHFOmxx_6KZS1O5Onh3aoyPPVsOc-p5c4x@mail.gmail.com>
Message-ID: <AANLkTi=Z4SPc1a7zJ_YbEg+ze_bZ-c3nVufJSD0=gJHo@mail.gmail.com>

---------- Forwarded message ----------
From: Michael Thompson <michaelnt at gmail.com>
Date: 9 March 2011 07:02
Subject: Re: [Twisted-Python] Slow data transfer with Twisted + socat + Windows
To: Jason Heeris <jason.heeris at gmail.com>


On 9 March 2011 01:47, Jason Heeris <jason.heeris at gmail.com> wrote:
> On 9 March 2011 03:49, Michael Thompson <michaelnt at gmail.com> wrote:
>> Does you program just write via TCP to this serial device, it doesn't
>> do anything else that could block?
>
> Both the "bare bones" script and the real app writes and reads from
> the device, so I wouldn't expect full speed communications. But I
> can't see anything else in my script that might actually block.
>
>> Have you tried running this under different reactors?
>
> Yep ? no difference under Linux, but the GTK reactor is slower than
> the select reactor under Windows (see original email for times).
>
>> Running the windows program against the Linux socat device might help
>> to reduce the number of variables.
>
> Aha! Didn't think of that, but interesting results...
>
> socat on Linux, socat_test.py on Windows VM:
> ?- select reactor: 4s
> ?- win32reactor: 4s
> ?- gtk reactor: 220s
>
> socat on Windows VM, socat_test.py on Linux:
> ?- select reactor: 30s
> ?- gtk reactor: 30s
>
> Interesting, but not exactly clarifying...

And from your first email

socat on Windows, socat_test.py on Windows VM

select 30s
gtk reactor 220s

My read of these results is that socat on windows limits the
performance to 30s and in addition the gtkreactor on windows has
performance problems.

The gtkreactor on windows has a different implementation which seems
to be missing any way for the GTK loop to notify the reactor of IO.
You could try changing the timeout from 0.1 to something smaller, but
that will probably hammer the CPU when idle.

pyserial includes an example that makes a serial port accessible of
TCP you could see if that is any faster than socat.

Perhaps you can write a serial to TCP adaptor that encapsulates the
serial logic so reduce the IO between this application and the GTK app
to a message like start_sync, stop_sync.

Michael


From jason.heeris at gmail.com  Wed Mar  9 02:23:10 2011
From: jason.heeris at gmail.com (Jason Heeris)
Date: Wed, 9 Mar 2011 15:23:10 +0800
Subject: [Twisted-Python] Fwd: Slow data transfer with Twisted + socat +
	Windows
In-Reply-To: <AANLkTi=Z4SPc1a7zJ_YbEg+ze_bZ-c3nVufJSD0=gJHo@mail.gmail.com>
References: <AANLkTinobtkCT9uv4VVXHr0t4OQ5S-ph+Tx2Yn66T3bZ@mail.gmail.com>
	<AANLkTi=ayQhhLOyP=PKh7Qpgb-v7sbXRSwzA_wxe7Pvy@mail.gmail.com>
	<AANLkTimBHJnVQfVhvFWQT6XB4MOTQW4YmABV5KoxJQLo@mail.gmail.com>
	<AANLkTikdbsKHFOmxx_6KZS1O5Onh3aoyPPVsOc-p5c4x@mail.gmail.com>
	<AANLkTi=Z4SPc1a7zJ_YbEg+ze_bZ-c3nVufJSD0=gJHo@mail.gmail.com>
Message-ID: <AANLkTimZBDMZ--=rH4qCF4fwBwP8_vR4H6yW=KNcKEB1@mail.gmail.com>

On 9 March 2011 15:02, Michael Thompson <michaelnt at gmail.com> wrote:
> My read of these results is that socat on windows limits the
> performance to 30s and in addition the gtkreactor on windows has
> performance problems.

I'd say it's Cygwin, not socat, but yes.

> pyserial includes an example that makes a serial port accessible of
> TCP you could see if that is any faster than socat.

Okay, I tried that, and with the select reactor, it's great! 3s flat!

With the GTK reactor... still 220s. So, no luck.

> Perhaps you can write a serial to TCP adaptor that encapsulates the
> serial logic so reduce the IO between this application and the GTK app
> to a message like start_sync, stop_sync.

I've only shown the simplest possible protocol here - if I really did
encapsulate all the possible commands and interactions in a
synchronous subprocess, I'd basically be writing all the protocols
twice.

Besides, none of that will help if the GTK reactor can't communicate
with anything properly.

Cheers,
Jason


From jason.heeris at gmail.com  Wed Mar  9 03:06:11 2011
From: jason.heeris at gmail.com (Jason Heeris)
Date: Wed, 9 Mar 2011 16:06:11 +0800
Subject: [Twisted-Python] Fwd: Slow data transfer with Twisted + socat +
	Windows
In-Reply-To: <AANLkTimZBDMZ--=rH4qCF4fwBwP8_vR4H6yW=KNcKEB1@mail.gmail.com>
References: <AANLkTinobtkCT9uv4VVXHr0t4OQ5S-ph+Tx2Yn66T3bZ@mail.gmail.com>
	<AANLkTi=ayQhhLOyP=PKh7Qpgb-v7sbXRSwzA_wxe7Pvy@mail.gmail.com>
	<AANLkTimBHJnVQfVhvFWQT6XB4MOTQW4YmABV5KoxJQLo@mail.gmail.com>
	<AANLkTikdbsKHFOmxx_6KZS1O5Onh3aoyPPVsOc-p5c4x@mail.gmail.com>
	<AANLkTi=Z4SPc1a7zJ_YbEg+ze_bZ-c3nVufJSD0=gJHo@mail.gmail.com>
	<AANLkTimZBDMZ--=rH4qCF4fwBwP8_vR4H6yW=KNcKEB1@mail.gmail.com>
Message-ID: <AANLkTindWpp7o6b5v7m+CGHWttHEmN6fZWY8XhW+S0O6@mail.gmail.com>

On 9 March 2011 15:23, Jason Heeris <jason.heeris at gmail.com> wrote:
> Besides, none of that will help if the GTK reactor can't communicate
> with anything properly.

I adapted my original script to simply work with an echo server, and
there really does seem to be a problem with the GTK reactor, no matter
what the transport.

Is this worth filing a bug about (since I have a neat little demo
script to illustrate the problem), or is it just too vague?

- Jason


From itamar at itamarst.org  Wed Mar  9 08:11:44 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 09 Mar 2011 08:11:44 -0500
Subject: [Twisted-Python] Fwd: Slow data transfer with Twisted + socat +
 Windows
In-Reply-To: <AANLkTindWpp7o6b5v7m+CGHWttHEmN6fZWY8XhW+S0O6@mail.gmail.com>
References: <AANLkTinobtkCT9uv4VVXHr0t4OQ5S-ph+Tx2Yn66T3bZ@mail.gmail.com>
	<AANLkTi=ayQhhLOyP=PKh7Qpgb-v7sbXRSwzA_wxe7Pvy@mail.gmail.com>
	<AANLkTimBHJnVQfVhvFWQT6XB4MOTQW4YmABV5KoxJQLo@mail.gmail.com>
	<AANLkTikdbsKHFOmxx_6KZS1O5Onh3aoyPPVsOc-p5c4x@mail.gmail.com>
	<AANLkTi=Z4SPc1a7zJ_YbEg+ze_bZ-c3nVufJSD0=gJHo@mail.gmail.com>
	<AANLkTimZBDMZ--=rH4qCF4fwBwP8_vR4H6yW=KNcKEB1@mail.gmail.com>
	<AANLkTindWpp7o6b5v7m+CGHWttHEmN6fZWY8XhW+S0O6@mail.gmail.com>
Message-ID: <1299676304.1752.0.camel@blake>

On Wed, 2011-03-09 at 16:06 +0800, Jason Heeris wrote:

> Is this worth filing a bug about (since I have a neat little demo
> script to illustrate the problem), or is it just too vague?

It's worth filing a bug, yes.



From 4kir4.1i at gmail.com  Thu Mar 10 05:31:00 2011
From: 4kir4.1i at gmail.com (akira)
Date: Thu, 10 Mar 2011 13:31:00 +0300
Subject: [Twisted-Python] Agent and "Cannot assign requested address"
References: <AANLkTi=Z=u+H=q0vHG1853eTN0Q8XeVQerptGCMAMrmK@mail.gmail.com>
	<1299245371.1656.8.camel@blake>
	<20110304133311.2231.1403604990.divmod.xquotient.121@localhost.localdomain>
	<1299246828.1656.15.camel@blake>
	<05DD6421-1AB3-4B1B-8AF9-264C9CE35CF4@gmail.com>
Message-ID: <m3lj0nqnbv.fsf@tb10.ngrid.ru>

"Jason J. W. Williams" <jasonjwwilliams at gmail.com> writes:

> Actually, I think the TIME_WAIT is the problem. It's what I see in
> netstat, and the Agent requests are fired sequentially via yield
> inside a for loop (inlineCallbacks). So they shouldn't be running in
> parallel. 

`yield` returns before TIME_WAIT expires otherwise it would require ~1
minute per request.

>
> The use case here is loading a Riak server with keys to prepare for a
> test. There's not a real way to get around sending one POST per key.
>
> How would I set the timeout value in Twisted? Or do I have to modify
> the timeout/keepalive systemwide in /proc?

In addition to net.ipv4.tcp_fin_timeout you could increase the ephemeral
port range (net.ipv4.ip_local_port_range sysctl parameter).

Each connection can be identified using 4-tuple (server IP, server port,
client IP, client port) Everything except client port is fixed in your
case so there could be at most
~ net.ipv4.ip_local_port_range/net.ipv4.tcp_fin_timeout connections per
second (even less in practice due to other applications and other
settings taking preference such as fs.file-max). For example:

  net.ipv4.ip_local_port_range = 32768    61000
  net.ipv4.tcp_fin_timeout = 30

There could be ~900 connections per second that might be good enough.

Reusing a local port via SO_REUSEADDR or better yet reusing a tcp
connection via HTTP keep-alive aren't available with twisted as I
understand it.


--
akira



From andrew at bemusement.org  Thu Mar 10 06:43:47 2011
From: andrew at bemusement.org (Andrew Bennetts)
Date: Thu, 10 Mar 2011 22:43:47 +1100
Subject: [Twisted-Python] [Twisted-web] Question regarding callLater()
 and service creation
In-Reply-To: <8C8A186C-A56B-4354-BC73-C4B60020BB4C@zonarsystems.com>
References: <8C8A186C-A56B-4354-BC73-C4B60020BB4C@zonarsystems.com>
Message-ID: <20110310114347.GD3670@aihal.home.puzzling.org>

This thread belongs on the twisted-python@ list, rather than
twisted-web@, as it has nothing to do with twisted.web.

Eric Chamberlain wrote:
> I'm creating a service using Twisted.  It has nothing to do with
> networking (I know that Twisted is an event-driven networking
> engine... stay with me here :).  It's simply polling a database every
> 30 seconds.  I'm using callLater() once the work has been completed.
> My question is does the reactor spawn a new thread once the
> callLater() timeout has been reached?  If so, this would mean that the
> work being done may be effected by the GIL, correct?

Incorrect.  callLater spawns no threads.

There's nothing wrong or even particularly strange with using Twisted
for projects unrelated to networking.  An event loop with good
facilities for spawning and interacting with subprocesses and calling
functions at certain times has plenty of uses, even if you don't also
need the capacity to handle network IO.

That doesn't mean that Twisted is necessarily the best tool for your
task, but I wouldn't rule it out automatically either.

-Andrew.



From jrennie at gmail.com  Thu Mar 10 07:35:13 2011
From: jrennie at gmail.com (Jason Rennie)
Date: Thu, 10 Mar 2011 07:35:13 -0500
Subject: [Twisted-Python] [Twisted-web] Question regarding callLater()
 and service creation
In-Reply-To: <20110310114347.GD3670@aihal.home.puzzling.org>
References: <8C8A186C-A56B-4354-BC73-C4B60020BB4C@zonarsystems.com>
	<20110310114347.GD3670@aihal.home.puzzling.org>
Message-ID: <AANLkTinXUgZUObbkcfFoFJdvWQ8YeDj14Z_Bx8C-WSyj@mail.gmail.com>

On Thu, Mar 10, 2011 at 6:43 AM, Andrew Bennetts <andrew at bemusement.org>wrote:

> There's nothing wrong or even particularly strange with using Twisted
> for projects unrelated to networking.  An event loop with good
> facilities for spawning and interacting with subprocesses and calling
> functions at certain times has plenty of uses, even if you don't also
> need the capacity to handle network IO.
>

+1  Twisted is my preferred tool for managing subprocesses.  I've even found
it to be superior for the seemingly simple task of combining output from
multiple processes.

Jason
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110310/ff758a08/attachment.htm 

From glyph at twistedmatrix.com  Thu Mar 10 11:16:21 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 10 Mar 2011 11:16:21 -0500
Subject: [Twisted-Python] Agent and "Cannot assign requested address"
In-Reply-To: <m3lj0nqnbv.fsf@tb10.ngrid.ru>
References: <AANLkTi=Z=u+H=q0vHG1853eTN0Q8XeVQerptGCMAMrmK@mail.gmail.com>
	<1299245371.1656.8.camel@blake>
	<20110304133311.2231.1403604990.divmod.xquotient.121@localhost.localdomain>
	<1299246828.1656.15.camel@blake>
	<05DD6421-1AB3-4B1B-8AF9-264C9CE35CF4@gmail.com>
	<m3lj0nqnbv.fsf@tb10.ngrid.ru>
Message-ID: <2DD4DE0B-70CB-4DD9-9193-E06F1580E16E@twistedmatrix.com>

On Mar 10, 2011, at 5:31 AM, akira wrote:

> Reusing a local port via SO_REUSEADDR or better yet reusing a tcp
> connection via HTTP keep-alive aren't available with twisted as I
> understand it.

Reusing a local connection-oriented port with SO_REUSEADDR is potentially a bad idea; there's a reason that your TCP stack gives you this error.  That option is practically only for listening ports.

Keep-alive is a work in progress, previously mentioned in this thread: <http://twistedmatrix.com/trac/ticket/3420>.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110310/0b9d477a/attachment.htm 

From jasonjwwilliams at gmail.com  Thu Mar 10 13:04:48 2011
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Thu, 10 Mar 2011 11:04:48 -0700
Subject: [Twisted-Python] Agent and "Cannot assign requested address"
In-Reply-To: <m3lj0nqnbv.fsf@tb10.ngrid.ru>
References: <AANLkTi=Z=u+H=q0vHG1853eTN0Q8XeVQerptGCMAMrmK@mail.gmail.com>
	<1299245371.1656.8.camel@blake>
	<20110304133311.2231.1403604990.divmod.xquotient.121@localhost.localdomain>
	<1299246828.1656.15.camel@blake>
	<05DD6421-1AB3-4B1B-8AF9-264C9CE35CF4@gmail.com>
	<m3lj0nqnbv.fsf@tb10.ngrid.ru>
Message-ID: <AANLkTimsWx30xTxNJynNS-9SUaY2S-r9bWfqKBAVKyS=@mail.gmail.com>

I ended up getting around the problem by increasing my Riak cluster
size and putting a load balancer in front for the test.  But
connection pooling would be really helpful, both here and in the
CouchDB client. I've refactored both txRiak and Paisley in the past
couple of months to use Agent in the hopes ticket 3420 gets completed.
:)

-J

On Thu, Mar 10, 2011 at 3:31 AM, akira <4kir4.1i at gmail.com> wrote:
> "Jason J. W. Williams" <jasonjwwilliams at gmail.com> writes:
>
>> Actually, I think the TIME_WAIT is the problem. It's what I see in
>> netstat, and the Agent requests are fired sequentially via yield
>> inside a for loop (inlineCallbacks). So they shouldn't be running in
>> parallel.
>
> `yield` returns before TIME_WAIT expires otherwise it would require ~1
> minute per request.
>
>>
>> The use case here is loading a Riak server with keys to prepare for a
>> test. There's not a real way to get around sending one POST per key.
>>
>> How would I set the timeout value in Twisted? Or do I have to modify
>> the timeout/keepalive systemwide in /proc?
>
> In addition to net.ipv4.tcp_fin_timeout you could increase the ephemeral
> port range (net.ipv4.ip_local_port_range sysctl parameter).
>
> Each connection can be identified using 4-tuple (server IP, server port,
> client IP, client port) Everything except client port is fixed in your
> case so there could be at most
> ~ net.ipv4.ip_local_port_range/net.ipv4.tcp_fin_timeout connections per
> second (even less in practice due to other applications and other
> settings taking preference such as fs.file-max). For example:
>
> ?net.ipv4.ip_local_port_range = 32768 ? ?61000
> ?net.ipv4.tcp_fin_timeout = 30
>
> There could be ~900 connections per second that might be good enough.
>
> Reusing a local port via SO_REUSEADDR or better yet reusing a tcp
> connection via HTTP keep-alive aren't available with twisted as I
> understand it.
>
>
> --
> akira
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From facundobatista at gmail.com  Thu Mar 10 14:39:58 2011
From: facundobatista at gmail.com (Facundo Batista)
Date: Thu, 10 Mar 2011 14:39:58 -0500
Subject: [Twisted-Python] Failing tests in trunk
In-Reply-To: <AANLkTim_CtDL9qm1aq9i6yc_CGFjP62-RfKyHSgGR+HY@mail.gmail.com>
References: <AANLkTinZHZaq1hJW8YoHRFYm+c5Nwh62Bkv6nkDpExqt@mail.gmail.com>
	<20110308003428.2231.215396262.divmod.xquotient.196@localhost.localdomain>
	<AANLkTim_CtDL9qm1aq9i6yc_CGFjP62-RfKyHSgGR+HY@mail.gmail.com>
Message-ID: <AANLkTik4evU732Pe7_4PtsLTZjLpsNnp=1jo-deqMFAJ@mail.gmail.com>

On Tue, Mar 8, 2011 at 7:04 AM, Facundo Batista
<facundobatista at gmail.com> wrote:

>> None of these are known failures:
>>
>> ? ?http://buildbot.twistedmatrix.com/boxes-supported
>>
>> Just looking at the list of failing tests, I would make a small bet that
>> the failures are caused by your locale setting somehow.
>
> I thought of that, but why would the test pass when running alone?
>
> I'll debug this.

Ok, found it.

See one example of the test that failed,
twisted.mail.test.test_imap.NewFetchTestCase.testFetchInternalDate:

    twisted.trial.unittest.FailTest: not equal:
    a = {0: {'INTERNALDATE': '02-nov-2003 21:25:10 +0000'},
     1: {'INTERNALDATE': '29-dic-2013 11:31:52 -0500'},
     2: {'INTERNALDATE': '10-mar-1992 02:44:30 -0600'},
     3: {'INTERNALDATE': '11-ene-2000 14:40:24 -0800'}}
    b = {0: {'INTERNALDATE': '02-Nov-2003 21:25:10 +0000'},
     1: {'INTERNALDATE': '29-Dec-2013 11:31:52 -0500'},
     2: {'INTERNALDATE': '10-Mar-1992 02:44:30 -0600'},
     3: {'INTERNALDATE': '11-Jan-2000 14:40:24 -0800'}}

See the difference? "nov" instead of "Nov", etc. "dic" instead of
"Dec". Yes, in Spanish December is 'diciembre'.

So, funny 'locale' issue, confirmed by showing getlocale() in the
test... when running the whole suite, the locale is ('es_AR', 'UTF8'),
and when running twisted.mail the locale is (None, None).

Weird, specially taking into account that 'locale' is not used in the
whole twisted project.

But I tracked it down.

In twisted/manhole/ui/test/test_gtk2manhole.py, gtk is imported, and
that changes the locale [0].

So, how this can be fixed?

Is ok for the IMAP4Server to spew the message internal date according
to the locale in which it's being run? Or it should always format the
dates in an specific way, because some definition somewhere? (I don't
know much about IMAP)

If it's ok for the server to format the dates according to the locale,
I should make the test more robust. If not, the server should set the
locale to (None, None) for the date formatting, or just set it at
__init__ and leave it there, or use other formatting (not
time.strftime, I prefer this solution).

Ideas? Opinions?

Thanks!

(BTW, I'm already at PyCon :D )


[0] Which I easily tested in a clean Python interpreter:

    >>> import locale
    >>> locale.getlocale()
    (None, None)
    >>> import gtk
    >>> locale.getlocale()
    ('es_AR', 'UTF8')

-- 
.? ? Facundo

Blog: http://www.taniquetil.com.ar/plog/
PyAr: http://www.python.org/ar/


From abierbaum at gmail.com  Thu Mar 10 15:01:39 2011
From: abierbaum at gmail.com (Allen Bierbaum)
Date: Thu, 10 Mar 2011 14:01:39 -0600
Subject: [Twisted-Python] Authentication & Access Control system for web
	services
In-Reply-To: <AANLkTi=4QO8d6jSB8=Y3wuO_uW6LJWd45pQ2C-hdz+xS@mail.gmail.com>
References: <AANLkTi=4QO8d6jSB8=Y3wuO_uW6LJWd45pQ2C-hdz+xS@mail.gmail.com>
Message-ID: <AANLkTi=ezWDYUpbo33--q1r4+J9zBrV9zy-YeEODqCZ4@mail.gmail.com>

I have been looking into this further and decided on an API that works
as follows:

- Use HTTPS for all requests
- POST to /session to create a new session token
  - pass in username and password as parameters
  - returns token string to be used for all further communication
- All further requests must have the token string which is used to
lookup the user/session
  - on the server, the token will map to a user object to give me
information about their access rights, etc.

Now the question is how does this fit into twisted's view of the
world.  The twisted web in 60 seconds tutorials [1] seem focused on
using HTTP Auth for credential checking and a internal cookie
(TWISTED_SESSION) for session management.  Is there an easy way to
adapt these to my needs or do I need to roll my own code for this type
of twisted.web usage?

-Allen


[1] http://twistedmatrix.com/documents/current/web/howto/web-in-60/index.html

On Mon, Mar 7, 2011 at 9:19 AM, Allen Bierbaum <abierbaum at gmail.com> wrote:
> I have a REST service I have implemented using twisted.web. ?Based
> upon a new requirement I need to put role-based access control
> security on the service and am trying to find the most twisted way to
> do it.
>
> I would like to have:
> - Username / password login that is checked against a backend database
> - Roles and associated privileges associated with each user
> - Administration interface to edit users, roles, and privileges
> - "Simple" way to configure the access control requirements on the
> services. (ex: which services need which roles)
>
> Before I role my own code I wanted to check and see if there are any
> addons for this or if anyone else had attacked this problem with
> twisted and had some open source code I could look at.
>
> I have found a couple of projects for WSGI that I may try to pull
> ideas from, but I haven't yet found anything that uses the twisted
> resource model. ?(http://authkit.org/,
> http://docs.repoze.org/who/2.0/)
>
> Any pointers to twisted projects I could leverage?
>
> -Allen
>


From george at ringdevelopment.com  Thu Mar 10 16:16:47 2011
From: george at ringdevelopment.com (George Pauly)
Date: Thu, 10 Mar 2011 16:16:47 -0500
Subject: [Twisted-Python] Authentication & Access Control system for web
 services
In-Reply-To: <AANLkTi=ezWDYUpbo33--q1r4+J9zBrV9zy-YeEODqCZ4@mail.gmail.com>
References: <AANLkTi=4QO8d6jSB8=Y3wuO_uW6LJWd45pQ2C-hdz+xS@mail.gmail.com>
	<AANLkTi=ezWDYUpbo33--q1r4+J9zBrV9zy-YeEODqCZ4@mail.gmail.com>
Message-ID: <1299791807.13530.326.camel@localhost.localdomain>

Allen,

In my very limited experience with Twisted,

On Thu, 2011-03-10 at 14:01 -0600, Allen Bierbaum wrote:
> I have been looking into this further and decided on an API that works
> as follows:
> 
> - Use HTTPS for all requests
> - POST to /session to create a new session token
>   - pass in username and password as parameters
>   - returns token string to be used for all further communication

In the non-https case, roll a salt and other items (ip address, user
agent, etc) into a secondary session key on the server.

> - All further requests must have the token string which is used to
> lookup the user/session
>   - on the server, the token will map to a user object to give me
> information about their access rights, etc.
> 

that's all I've ever needed: use the session key (token) to access an
object array - the accessed object has all the twisty magic.

> Now the question is how does this fit into twisted's view of the
> world.  The twisted web in 60 seconds tutorials [1] seem focused on
> using HTTP Auth for credential checking and a internal cookie
> (TWISTED_SESSION) for session management.  Is there an easy way to
> adapt these to my needs or do I need to roll my own code for this type
> of twisted.web usage?

Now you've gone back to credentials - this is outside of my experience
with Twisted.  Sessions are simple enough with Python alone in a twisted
app.  I'll need to use credentials soon so I hope you get an answer. 

Anybody using OpenID or webID instead of login/password?  Could be
better...

> 
> -Allen
> 

George
-- 
George Pauly
Ring Development
www.ringdevelopment.com



From jasonjwwilliams at gmail.com  Thu Mar 10 17:45:00 2011
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Thu, 10 Mar 2011 15:45:00 -0700
Subject: [Twisted-Python] twisted.web.error.Error & BaseException.message
	deprecation
Message-ID: <AANLkTimSc+aHSZSMvmpqY6-3cC80g+FOG06TAfz3ENGz@mail.gmail.com>

Hi Guys,

Been seeing this error for a long time and finally getting off my bum
to see about fixing it:

twisted/web/error.py:53: DeprecationWarning: BaseException.message has
been deprecated as of Python 2.6

It looks like the issue is the "self.message = message" assignment in
__init__: https://gist.github.com/865097

Before I go about getting rid of the warning, does anyone have a
reason Error.message should stick around?

-J


From jasonjwwilliams at gmail.com  Thu Mar 10 17:47:21 2011
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Thu, 10 Mar 2011 15:47:21 -0700
Subject: [Twisted-Python] Authentication & Access Control system for web
	services
In-Reply-To: <1299791807.13530.326.camel@localhost.localdomain>
References: <AANLkTi=4QO8d6jSB8=Y3wuO_uW6LJWd45pQ2C-hdz+xS@mail.gmail.com>
	<AANLkTi=ezWDYUpbo33--q1r4+J9zBrV9zy-YeEODqCZ4@mail.gmail.com>
	<1299791807.13530.326.camel@localhost.localdomain>
Message-ID: <AANLkTimB+vPVQMjJMqwzKE0yBRFieTwC5KceWfP0L0LR@mail.gmail.com>

I believe this implements OAuth 2 for Twisted using Twisted Cred:

https://github.com/simplegeo/txoauth

-J

On Thu, Mar 10, 2011 at 2:16 PM, George Pauly
<george at ringdevelopment.com> wrote:
> Allen,
>
> In my very limited experience with Twisted,
>
> On Thu, 2011-03-10 at 14:01 -0600, Allen Bierbaum wrote:
>> I have been looking into this further and decided on an API that works
>> as follows:
>>
>> - Use HTTPS for all requests
>> - POST to /session to create a new session token
>> ? - pass in username and password as parameters
>> ? - returns token string to be used for all further communication
>
> In the non-https case, roll a salt and other items (ip address, user
> agent, etc) into a secondary session key on the server.
>
>> - All further requests must have the token string which is used to
>> lookup the user/session
>> ? - on the server, the token will map to a user object to give me
>> information about their access rights, etc.
>>
>
> that's all I've ever needed: use the session key (token) to access an
> object array - the accessed object has all the twisty magic.
>
>> Now the question is how does this fit into twisted's view of the
>> world. ?The twisted web in 60 seconds tutorials [1] seem focused on
>> using HTTP Auth for credential checking and a internal cookie
>> (TWISTED_SESSION) for session management. ?Is there an easy way to
>> adapt these to my needs or do I need to roll my own code for this type
>> of twisted.web usage?
>
> Now you've gone back to credentials - this is outside of my experience
> with Twisted. ?Sessions are simple enough with Python alone in a twisted
> app. ?I'll need to use credentials soon so I hope you get an answer.
>
> Anybody using OpenID or webID instead of login/password? ?Could be
> better...
>
>>
>> -Allen
>>
>
> George
> --
> George Pauly
> Ring Development
> www.ringdevelopment.com
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From charlessolar at gmail.com  Thu Mar 10 18:08:03 2011
From: charlessolar at gmail.com (Charles Solar)
Date: Thu, 10 Mar 2011 17:08:03 -0600
Subject: [Twisted-Python] Best strategies for pb Referenceables running long
	methods from callRemote
Message-ID: <AANLkTimaAPH-GYHz-ptpNQWFsj4oyh_N005HQ+RQq6hR@mail.gmail.com>

I am using PB to run remote methods in a testing system at my company.  The
code works very well but breaks down when I start running multiple tests at
once.  I have tracked this down to overflowing the thread pool on the remote
machines.  I am wondering if anyone might have better suggestions for
running long methods from a remote method.

I coded up a sample of what I am seeing here: http://pastebin.com/rBPp20Ms

Basically I have 1 server that calls remote_execute on many clients on a
remote server.  This remote_execute method starts a new method using
threads.deferToThread and returns the defer to make the server's callRemote
defer wait until the remote long method end.
What I do in those methods is run test code that waits, blocks, sleeps, and
all sorts of nasty things that make the thread take a while.  In the example
code I simply sleep for 20 seconds.

The problem I see with this code specifically is that I run out of threads
on the pool and even though I wanted all execute methods to run at the same
time, I see 10 run, then 10 more, then 10 more.. etc.  The testing depends
on all these methods being run at the same time as they run mechanisms that
depend on each other and need everyone running.  When I overflow the thread
pool some methods do not run until other methods stop, which makes the whole
test fail.

I am not holding the GIL or blocking the reactor, which was the first thing
I checked.

Setting reactor.suggestThreadPoolSize(50) does help, but I do not think its
the best solution, and does not work very well on our slow and older
machines.

Any feedback is appreciated
Charles
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110310/44e4a32d/attachment.htm 

From exarkun at twistedmatrix.com  Thu Mar 10 21:51:32 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 11 Mar 2011 02:51:32 -0000
Subject: [Twisted-Python] Failing tests in trunk
In-Reply-To: <AANLkTik4evU732Pe7_4PtsLTZjLpsNnp=1jo-deqMFAJ@mail.gmail.com>
References: <AANLkTinZHZaq1hJW8YoHRFYm+c5Nwh62Bkv6nkDpExqt@mail.gmail.com>
	<20110308003428.2231.215396262.divmod.xquotient.196@localhost.localdomain>
	<AANLkTim_CtDL9qm1aq9i6yc_CGFjP62-RfKyHSgGR+HY@mail.gmail.com>
	<AANLkTik4evU732Pe7_4PtsLTZjLpsNnp=1jo-deqMFAJ@mail.gmail.com>
Message-ID: <20110311025132.2231.410699552.divmod.xquotient.209@localhost.localdomain>

On 10 Mar, 07:39 pm, facundobatista at gmail.com wrote:
>On Tue, Mar 8, 2011 at 7:04 AM, Facundo Batista
><facundobatista at gmail.com> wrote:
>>>None of these are known failures:
>>>
>>>? ?http://buildbot.twistedmatrix.com/boxes-supported
>>>
>>>Just looking at the list of failing tests, I would make a small bet 
>>>that
>>>the failures are caused by your locale setting somehow.
>>
>>I thought of that, but why would the test pass when running alone?
>>
>>I'll debug this.
>
>Ok, found it.
>
>See one example of the test that failed,
>twisted.mail.test.test_imap.NewFetchTestCase.testFetchInternalDate:
>
>    twisted.trial.unittest.FailTest: not equal:
>    a = {0: {'INTERNALDATE': '02-nov-2003 21:25:10 +0000'},
>     1: {'INTERNALDATE': '29-dic-2013 11:31:52 -0500'},
>     2: {'INTERNALDATE': '10-mar-1992 02:44:30 -0600'},
>     3: {'INTERNALDATE': '11-ene-2000 14:40:24 -0800'}}
>    b = {0: {'INTERNALDATE': '02-Nov-2003 21:25:10 +0000'},
>     1: {'INTERNALDATE': '29-Dec-2013 11:31:52 -0500'},
>     2: {'INTERNALDATE': '10-Mar-1992 02:44:30 -0600'},
>     3: {'INTERNALDATE': '11-Jan-2000 14:40:24 -0800'}}
>
>See the difference? "nov" instead of "Nov", etc. "dic" instead of
>"Dec". Yes, in Spanish December is 'diciembre'.
>
>So, funny 'locale' issue, confirmed by showing getlocale() in the
>test... when running the whole suite, the locale is ('es_AR', 'UTF8'),
>and when running twisted.mail the locale is (None, None).
>
>Weird, specially taking into account that 'locale' is not used in the
>whole twisted project.
>
>But I tracked it down.
>
>In twisted/manhole/ui/test/test_gtk2manhole.py, gtk is imported, and
>that changes the locale [0].

Aha, nicely done.  I figured the locale change would be in Python 
somewhere, I didn't consider it might be hidden in Gtk.
>So, how this can be fixed?
>
>Is ok for the IMAP4Server to spew the message internal date according
>to the locale in which it's being run? Or it should always format the
>dates in an specific way, because some definition somewhere? (I don't
>know much about IMAP)

IMAP specifies the strings in the unit test.  So the implementation 
really needs to change to not depend on the locale.
>If it's ok for the server to format the dates according to the locale,
>I should make the test more robust. If not, the server should set the
>locale to (None, None) for the date formatting, or just set it at
>__init__ and leave it there, or use other formatting (not
>time.strftime, I prefer this solution).

I agree with your preference, switching away from time.strftime is 
probably the right thing to do.

Jean-Paul


From glyph at twistedmatrix.com  Fri Mar 11 00:12:59 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 11 Mar 2011 00:12:59 -0500
Subject: [Twisted-Python] twisted.web.error.Error &
	BaseException.message deprecation
In-Reply-To: <AANLkTimSc+aHSZSMvmpqY6-3cC80g+FOG06TAfz3ENGz@mail.gmail.com>
References: <AANLkTimSc+aHSZSMvmpqY6-3cC80g+FOG06TAfz3ENGz@mail.gmail.com>
Message-ID: <B96A7A46-6801-49F4-AB96-85D897019CBE@twistedmatrix.com>

On Mar 10, 2011, at 5:45 PM, Jason J. W. Williams wrote:

> Hi Guys,
> 
> Been seeing this error for a long time and finally getting off my bum
> to see about fixing it:
> 
> twisted/web/error.py:53: DeprecationWarning: BaseException.message has
> been deprecated as of Python 2.6
> 
> It looks like the issue is the "self.message = message" assignment in
> __init__: https://gist.github.com/865097
> 
> Before I go about getting rid of the warning, does anyone have a
> reason Error.message should stick around?

This is the attribute used (in some cases) to relay the protocol-level error message printed in the status line area of the HTTP response.  So yes, we need to keep it; it doesn't mean the same thing as Python's earlier 'message' attribute on Exception.  If we can simply squash the warning that would be best.




From jasonjwwilliams at gmail.com  Fri Mar 11 02:25:11 2011
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Fri, 11 Mar 2011 00:25:11 -0700
Subject: [Twisted-Python] twisted.web.error.Error &
	BaseException.message deprecation
In-Reply-To: <B96A7A46-6801-49F4-AB96-85D897019CBE@twistedmatrix.com>
References: <AANLkTimSc+aHSZSMvmpqY6-3cC80g+FOG06TAfz3ENGz@mail.gmail.com>
	<B96A7A46-6801-49F4-AB96-85D897019CBE@twistedmatrix.com>
Message-ID: <AANLkTimzr25PbcOjQju6nBvgHqxajN2w5ZT-HE4EXoND@mail.gmail.com>

Setting it as a class level attribute seems to suppress it:

>>> class TestError(Exception):
...     message = ""
...
...     def __init__(self, msg):
...        self.message = msg

Since it's a string and passed by value I think this would work. I'll
open up a ticket if one's not already.

-J


On Thu, Mar 10, 2011 at 10:12 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
> On Mar 10, 2011, at 5:45 PM, Jason J. W. Williams wrote:
>
>> Hi Guys,
>>
>> Been seeing this error for a long time and finally getting off my bum
>> to see about fixing it:
>>
>> twisted/web/error.py:53: DeprecationWarning: BaseException.message has
>> been deprecated as of Python 2.6
>>
>> It looks like the issue is the "self.message = message" assignment in
>> __init__: https://gist.github.com/865097
>>
>> Before I go about getting rid of the warning, does anyone have a
>> reason Error.message should stick around?
>
> This is the attribute used (in some cases) to relay the protocol-level error message printed in the status line area of the HTTP response. ?So yes, we need to keep it; it doesn't mean the same thing as Python's earlier 'message' attribute on Exception. ?If we can simply squash the warning that would be best.
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From glyph at twistedmatrix.com  Fri Mar 11 11:51:42 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 11 Mar 2011 11:51:42 -0500
Subject: [Twisted-Python] twisted.web.error.Error &
	BaseException.message deprecation
In-Reply-To: <AANLkTimzr25PbcOjQju6nBvgHqxajN2w5ZT-HE4EXoND@mail.gmail.com>
References: <AANLkTimSc+aHSZSMvmpqY6-3cC80g+FOG06TAfz3ENGz@mail.gmail.com>
	<B96A7A46-6801-49F4-AB96-85D897019CBE@twistedmatrix.com>
	<AANLkTimzr25PbcOjQju6nBvgHqxajN2w5ZT-HE4EXoND@mail.gmail.com>
Message-ID: <9F85B336-74C6-4EA9-B923-1B1FBB2D5AF9@twistedmatrix.com>

On Mar 11, 2011, at 2:25 AM, Jason J. W. Williams wrote:

> Setting it as a class level attribute seems to suppress it:
> 
>>>> class TestError(Exception):
> ...     message = ""
> ...
> ...     def __init__(self, msg):
> ...        self.message = msg
> 
> Since it's a string and passed by value I think this would work. I'll
> open up a ticket if one's not already.

Sounds good.  I can't find one, but there have been other tickets with a similar purpose ('message' attributes on other exceptions).

If you have time after fixing this issue, it would be nice if you could double-check that there aren't any more of these lurking around :).



From jasonjwwilliams at gmail.com  Fri Mar 11 12:52:05 2011
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Fri, 11 Mar 2011 10:52:05 -0700
Subject: [Twisted-Python] twisted.web.error.Error &
	BaseException.message deprecation
In-Reply-To: <9F85B336-74C6-4EA9-B923-1B1FBB2D5AF9@twistedmatrix.com>
References: <AANLkTimSc+aHSZSMvmpqY6-3cC80g+FOG06TAfz3ENGz@mail.gmail.com>
	<B96A7A46-6801-49F4-AB96-85D897019CBE@twistedmatrix.com>
	<AANLkTimzr25PbcOjQju6nBvgHqxajN2w5ZT-HE4EXoND@mail.gmail.com>
	<9F85B336-74C6-4EA9-B923-1B1FBB2D5AF9@twistedmatrix.com>
Message-ID: <0C9613DD-3D72-48E5-9B42-1E62FCBC9F3B@gmail.com>

Hi Glyph,

I re-opened 4456 and attached a patch. I think that's this issue. The only other one I found in the tickets was for Conch and that one was marked fixed. 

-J

Sent via iPhone

Is your e-mail Premiere?

On Mar 11, 2011, at 9:51, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> On Mar 11, 2011, at 2:25 AM, Jason J. W. Williams wrote:
> 
>> Setting it as a class level attribute seems to suppress it:
>> 
>>>>> class TestError(Exception):
>> ...     message = ""
>> ...
>> ...     def __init__(self, msg):
>> ...        self.message = msg
>> 
>> Since it's a string and passed by value I think this would work. I'll
>> open up a ticket if one's not already.
> 
> Sounds good.  I can't find one, but there have been other tickets with a similar purpose ('message' attributes on other exceptions).
> 
> If you have time after fixing this issue, it would be nice if you could double-check that there aren't any more of these lurking around :).
> 


From sicfslist at gmail.com  Fri Mar 11 14:15:47 2011
From: sicfslist at gmail.com (SIC FS LIST)
Date: Fri, 11 Mar 2011 13:15:47 -0600
Subject: [Twisted-Python] UDP Logging Server
Message-ID: <AANLkTikgHs7=bUJe3sLomsmsRTKDkFicF+c41hzjc8sQ@mail.gmail.com>

Hello,

I am trying to write a UDP based logging server.

Generically speaking it looks somewhat like syslog except I needed a bit
more flexibility that syslog can provide (or at least that I think it can
provide).

What I'm trying to accomplish is:
-- receive UDP packet
-- parse UDP packet
-- write output to a log file
-- have the log files rotated on a periodic basis

So far I have a "working" implementation ... but I'm noticing that if I do
the following:
-- log when a message is received
-- that for that message it "might" show up in the file a pretty lengthy
period of time later

The actual UDP protocol:

class VocsLogger(DatagramProtocol):
    def datagramReceived(self, data, (host, port)):
        _proc_msg(self.transport, data, (host,
port))._new_msg().addCallback(handler)

The _proc_msg class:

class _proc_msg:
    def __init__(self, sck, data, (host, port)):
        self._sck = sck
        self._data = data
        self._host = host
        self._port = port

    def _new_msg(self):
        d, _ = LogMsg().ParseSocketMsg(self._data)
        if d.type.upper() == DISKINFO[0]:
            DISKINFO[1].write(d.ToString() + "\n%s\n" % (LOG_DELIM))
        elif d.type.upper() == LOADAVG[0]:
            LOADAVG[1].write(d.ToString() + "\n%s\n" % (LOG_DELIM))
        elif d.type.upper() == MEMINFO[0]:
            MEMINFO[1].write(d.ToString() + "\n%s\n" % (LOG_DELIM))
        elif d.type.upper() == NETDEV[0]:
            NETDEV[1].write(d.ToString() + "\n%s\n" % (LOG_DELIM))
        elif d.type.upper() == PSAUX[0]:
            PSAUX[1].write(d.ToString() + "\n%s\n" % (LOG_DELIM))
        elif d.type.upper() == WHOINFO[0]:
            WHOINFO[1].write(d.ToString() + "\n%s\n" % (LOG_DELIM))
        else:
            DEFAULT[1].write(d.ToString() + "\n%s\n" % (LOG_DELIM))

And I have a log rotate service that looks like this:

class LogRotateService(TimerService):
    def __init__(self):
        TimerService.__init__(self, 60 * 5, LogRotate)

And then I'm using twistd to actually make it work:

LogRotate()
application = service.Application("vocs-logger")
rotateLogService = LogRotateService()
rotateLogService.setServiceParent(application)
loggerService = internet.UDPServer(int(config['port']), VocsLogger(),
interface=config['host'])
loggerService.setServiceParent(application)


I'm probably approaching this the wrong way and not sure if I sure really
worry about deferring the actual process of writing to the log file or if
there was a better way altogether.

Thanks for any guidance.

SDR
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110311/c8807889/attachment.htm 

From glyph at twistedmatrix.com  Fri Mar 11 16:28:19 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 11 Mar 2011 16:28:19 -0500
Subject: [Twisted-Python] twisted.web.error.Error &
	BaseException.message deprecation
In-Reply-To: <0C9613DD-3D72-48E5-9B42-1E62FCBC9F3B@gmail.com>
References: <AANLkTimSc+aHSZSMvmpqY6-3cC80g+FOG06TAfz3ENGz@mail.gmail.com>
	<B96A7A46-6801-49F4-AB96-85D897019CBE@twistedmatrix.com>
	<AANLkTimzr25PbcOjQju6nBvgHqxajN2w5ZT-HE4EXoND@mail.gmail.com>
	<9F85B336-74C6-4EA9-B923-1B1FBB2D5AF9@twistedmatrix.com>
	<0C9613DD-3D72-48E5-9B42-1E62FCBC9F3B@gmail.com>
Message-ID: <E05B940B-E3E3-4CCF-86BE-336026AD8D77@twistedmatrix.com>


On Mar 11, 2011, at 12:52 PM, Jason J. W. Williams wrote:

> Hi Glyph,
> 
> I re-opened 4456 and attached a patch. I think that's this issue. The only other one I found in the tickets was for Conch and that one was marked fixed. 

Thanks!  At the latest, this should get reviewed at the sprint.

-glyph

From jasonjwwilliams at gmail.com  Fri Mar 11 16:43:12 2011
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Fri, 11 Mar 2011 14:43:12 -0700
Subject: [Twisted-Python] twisted.web.error.Error &
	BaseException.message deprecation
In-Reply-To: <E05B940B-E3E3-4CCF-86BE-336026AD8D77@twistedmatrix.com>
References: <AANLkTimSc+aHSZSMvmpqY6-3cC80g+FOG06TAfz3ENGz@mail.gmail.com>
	<B96A7A46-6801-49F4-AB96-85D897019CBE@twistedmatrix.com>
	<AANLkTimzr25PbcOjQju6nBvgHqxajN2w5ZT-HE4EXoND@mail.gmail.com>
	<9F85B336-74C6-4EA9-B923-1B1FBB2D5AF9@twistedmatrix.com>
	<0C9613DD-3D72-48E5-9B42-1E62FCBC9F3B@gmail.com>
	<E05B940B-E3E3-4CCF-86BE-336026AD8D77@twistedmatrix.com>
Message-ID: <AANLkTikG3b1ibg4Lnu+_95AnPx-HFw56XFoFZJCvnGN=@mail.gmail.com>

Pleasure. :)

-J

On Fri, Mar 11, 2011 at 2:28 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
>
> On Mar 11, 2011, at 12:52 PM, Jason J. W. Williams wrote:
>
>> Hi Glyph,
>>
>> I re-opened 4456 and attached a patch. I think that's this issue. The only other one I found in the tickets was for Conch and that one was marked fixed.
>
> Thanks! ?At the latest, this should get reviewed at the sprint.
>
> -glyph


From screwtape at froup.com  Fri Mar 11 20:32:27 2011
From: screwtape at froup.com (Tim Allen)
Date: Sat, 12 Mar 2011 12:32:27 +1100
Subject: [Twisted-Python] UDP Logging Server
In-Reply-To: <AANLkTikgHs7=bUJe3sLomsmsRTKDkFicF+c41hzjc8sQ@mail.gmail.com>
References: <AANLkTikgHs7=bUJe3sLomsmsRTKDkFicF+c41hzjc8sQ@mail.gmail.com>
Message-ID: <20110312013227.GB31069@boombah.thristian.org>

On Fri, Mar 11, 2011 at 01:15:47PM -0600, SIC FS LIST wrote:
> So far I have a "working" implementation ... but I'm noticing that if I do
> the following:
> -- log when a message is received
> -- that for that message it "might" show up in the file a pretty lengthy
> period of time later

Assuming the objects stored in DISKINFO[1] etc. are file objects, you
seem to be writing to the files but never calling flush(). If you don't
call flush(), Python (well, the C standard library) won't send the data
on to the OS until its buffer is full, or the file handle is closed. If
you're not getting that many log lines, it can take a while for that to
happen.

Of course, if you flush after every disk read, your program will run
a bit more slowly and with more I/O... for an application where
reliability is more important than performance (like logging) that's
probably acceptable.

> The actual UDP protocol:
> 
> class VocsLogger(DatagramProtocol):
>     def datagramReceived(self, data, (host, port)):
>         _proc_msg(self.transport, data, (host,
> port))._new_msg().addCallback(handler)

_proc_msg doesn't seem to be complicated enough to need its own class,
why not just do what _proc_msg does in VocsLogger?

> The _proc_msg class:
> 
> class _proc_msg:
>     def __init__(self, sck, data, (host, port)):
>         self._sck = sck
>         self._data = data
>         self._host = host
>         self._port = port
> 
>     def _new_msg(self):
>         d, _ = LogMsg().ParseSocketMsg(self._data)
>         if d.type.upper() == DISKINFO[0]:
>             DISKINFO[1].write(d.ToString() + "\n%s\n" % (LOG_DELIM))
>         elif d.type.upper() == LOADAVG[0]:
>             LOADAVG[1].write(d.ToString() + "\n%s\n" % (LOG_DELIM))
>         elif d.type.upper() == MEMINFO[0]:
>             MEMINFO[1].write(d.ToString() + "\n%s\n" % (LOG_DELIM))
>         elif d.type.upper() == NETDEV[0]:
>             NETDEV[1].write(d.ToString() + "\n%s\n" % (LOG_DELIM))
>         elif d.type.upper() == PSAUX[0]:
>             PSAUX[1].write(d.ToString() + "\n%s\n" % (LOG_DELIM))
>         elif d.type.upper() == WHOINFO[0]:
>             WHOINFO[1].write(d.ToString() + "\n%s\n" % (LOG_DELIM))
>         else:
>             DEFAULT[1].write(d.ToString() + "\n%s\n" % (LOG_DELIM))

It depends on what DISKINFO[0] and DISKINFO[1] actually are, but
assuming they're a string and a file-handle, this code would look more
Pythonic as something like this:

LOGSINKS = {
	"DISKINFO": open("/var/log/diskinfo", "w"),
	"LOADAVG": open("/var/log/loadavg", "w"),
	"MEMINFO": open("/var/log/meminfo", "w"),
	"NETDEV": open("/var/log/netdev", "w"),
	"PSAUX": open("/var/log/psaux", "w"),
	"WHOINFO": open("/var/log/whoinfo", "w"),
	"DEFAULT": open("/var/log/default", "w"),
    }

def _new_msg(self, data):
    d, _ = LogMsg().ParseSocketMsg(data)
    type = d.type.upper()
    sink = LOGSINKS.get(type, LOGSINKS['DEFAULT'])
    sink.write("%s\n%s\n" % (d.ToString(), LOG_DELIM))

Hope that helps!


From facundobatista at gmail.com  Fri Mar 11 23:25:57 2011
From: facundobatista at gmail.com (Facundo Batista)
Date: Fri, 11 Mar 2011 23:25:57 -0500
Subject: [Twisted-Python] Failing tests in trunk
In-Reply-To: <20110311025132.2231.410699552.divmod.xquotient.209@localhost.localdomain>
References: <AANLkTinZHZaq1hJW8YoHRFYm+c5Nwh62Bkv6nkDpExqt@mail.gmail.com>
	<20110308003428.2231.215396262.divmod.xquotient.196@localhost.localdomain>
	<AANLkTim_CtDL9qm1aq9i6yc_CGFjP62-RfKyHSgGR+HY@mail.gmail.com>
	<AANLkTik4evU732Pe7_4PtsLTZjLpsNnp=1jo-deqMFAJ@mail.gmail.com>
	<20110311025132.2231.410699552.divmod.xquotient.209@localhost.localdomain>
Message-ID: <AANLkTinzN0Sxpq7kkWWE3iTENXkvLyVpSoDOp2kkx1n9@mail.gmail.com>

On Thu, Mar 10, 2011 at 9:51 PM,  <exarkun at twistedmatrix.com> wrote:

>> __init__ and leave it there, or use other formatting (not
>> time.strftime, I prefer this solution).
>
> I agree with your preference, switching away from time.strftime is probably
> the right thing to do.

Opened a ticket for this, patch attached:

    http://twistedmatrix.com/trac/ticket/4937

Regards,

-- 
.? ? Facundo

Blog: http://www.taniquetil.com.ar/plog/
PyAr: http://www.python.org/ar/


From ypercube at gmail.com  Sat Mar 12 07:33:45 2011
From: ypercube at gmail.com (Pandelis Theodosiou)
Date: Sat, 12 Mar 2011 14:33:45 +0200
Subject: [Twisted-Python] UDP Logging Server
In-Reply-To: <20110312013227.GB31069@boombah.thristian.org>
References: <AANLkTikgHs7=bUJe3sLomsmsRTKDkFicF+c41hzjc8sQ@mail.gmail.com>
	<20110312013227.GB31069@boombah.thristian.org>
Message-ID: <AANLkTikgzg71qWmUy46fU-FZQA87k1Uzr8T2NBx9VL7m@mail.gmail.com>

On Sat, Mar 12, 2011 at 3:32 AM, Tim Allen <screwtape at froup.com> wrote:

> On Fri, Mar 11, 2011 at 01:15:47PM -0600, SIC FS LIST wrote:
> > So far I have a "working" implementation ... but I'm noticing that if I
> do
> > the following:
> > -- log when a message is received
> > -- that for that message it "might" show up in the file a pretty lengthy
> > period of time later
>
> Assuming the objects stored in DISKINFO[1] etc. are file objects, you
> seem to be writing to the files but never calling flush(). If you don't
> call flush(), Python (well, the C standard library) won't send the data
> on to the OS until its buffer is full, or the file handle is closed. If
> you're not getting that many log lines, it can take a while for that to
> happen.
>
> Of course, if you flush after every disk read, your program will run
> a bit more slowly and with more I/O... for an application where
> reliability is more important than performance (like logging) that's
> probably acceptable.
>

You may also setup a timer that flushes files every, say, 5 minutes.

One other thing I've read in the Python.org site is that flush() is not 100%
sure to work immediately and should be used in combination with os.fsync().
Is there someone that can explain if that is correct?


>
> > The actual UDP protocol:
> >
> > class VocsLogger(DatagramProtocol):
> >     def datagramReceived(self, data, (host, port)):
> >         _proc_msg(self.transport, data, (host,
> > port))._new_msg().addCallback(handler)
>
> _proc_msg doesn't seem to be complicated enough to need its own class,
> why not just do what _proc_msg does in VocsLogger?
>
> > The _proc_msg class:
> >
> > class _proc_msg:
> >     def __init__(self, sck, data, (host, port)):
> >         self._sck = sck
> >         self._data = data
> >         self._host = host
> >         self._port = port
> >
> >     def _new_msg(self):
> >         d, _ = LogMsg().ParseSocketMsg(self._data)
> >         if d.type.upper() == DISKINFO[0]:
> >             DISKINFO[1].write(d.ToString() + "\n%s\n" % (LOG_DELIM))
> >         elif d.type.upper() == LOADAVG[0]:
> >             LOADAVG[1].write(d.ToString() + "\n%s\n" % (LOG_DELIM))
> >         elif d.type.upper() == MEMINFO[0]:
> >             MEMINFO[1].write(d.ToString() + "\n%s\n" % (LOG_DELIM))
> >         elif d.type.upper() == NETDEV[0]:
> >             NETDEV[1].write(d.ToString() + "\n%s\n" % (LOG_DELIM))
> >         elif d.type.upper() == PSAUX[0]:
> >             PSAUX[1].write(d.ToString() + "\n%s\n" % (LOG_DELIM))
> >         elif d.type.upper() == WHOINFO[0]:
> >             WHOINFO[1].write(d.ToString() + "\n%s\n" % (LOG_DELIM))
> >         else:
> >             DEFAULT[1].write(d.ToString() + "\n%s\n" % (LOG_DELIM))
>
> It depends on what DISKINFO[0] and DISKINFO[1] actually are, but
> assuming they're a string and a file-handle, this code would look more
> Pythonic as something like this:
>
> LOGSINKS = {
>        "DISKINFO": open("/var/log/diskinfo", "w"),
>        "LOADAVG": open("/var/log/loadavg", "w"),
>        "MEMINFO": open("/var/log/meminfo", "w"),
>        "NETDEV": open("/var/log/netdev", "w"),
>        "PSAUX": open("/var/log/psaux", "w"),
>        "WHOINFO": open("/var/log/whoinfo", "w"),
>        "DEFAULT": open("/var/log/default", "w"),
>    }
>
> def _new_msg(self, data):
>    d, _ = LogMsg().ParseSocketMsg(data)
>    type = d.type.upper()
>    sink = LOGSINKS.get(type, LOGSINKS['DEFAULT'])
>    sink.write("%s\n%s\n" % (d.ToString(), LOG_DELIM))
>
> Hope that helps!
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110312/a23fa892/attachment-0001.htm 

From sicfslist at gmail.com  Sat Mar 12 11:48:52 2011
From: sicfslist at gmail.com (SIC FS LIST)
Date: Sat, 12 Mar 2011 10:48:52 -0600
Subject: [Twisted-Python] UDP Logging Server
In-Reply-To: <AANLkTikgzg71qWmUy46fU-FZQA87k1Uzr8T2NBx9VL7m@mail.gmail.com>
References: <AANLkTikgHs7=bUJe3sLomsmsRTKDkFicF+c41hzjc8sQ@mail.gmail.com>
	<20110312013227.GB31069@boombah.thristian.org>
	<AANLkTikgzg71qWmUy46fU-FZQA87k1Uzr8T2NBx9VL7m@mail.gmail.com>
Message-ID: <AANLkTi=QG=HvZw_+6h1GbqExBC=9v0nVUzPaRQwMcHyz@mail.gmail.com>

Hello,

Thanks for the help.  Adding a timerservice that calls .flush() on the files
every minute (and before rotating the logs) seems to have helped.

Appreciate the quick response and feedback.

Thanks again!

SDR
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110312/9099f560/attachment.htm 

From sicfslist at gmail.com  Sat Mar 12 11:53:25 2011
From: sicfslist at gmail.com (SIC FS LIST)
Date: Sat, 12 Mar 2011 10:53:25 -0600
Subject: [Twisted-Python] UDP Logging Server
In-Reply-To: <20110312013227.GB31069@boombah.thristian.org>
References: <AANLkTikgHs7=bUJe3sLomsmsRTKDkFicF+c41hzjc8sQ@mail.gmail.com>
	<20110312013227.GB31069@boombah.thristian.org>
Message-ID: <AANLkTikJq1JMBX3WppfWGDn2kCFdd9DjeY_at0C=1375@mail.gmail.com>

Tim,

Just a quick note to answer your questions:

I have _proc_msg separated out as I'll be adding some additional
functionality on later (adding ACK messages for certain types of log
messages).  I do like the way you handled the _new_msg func.  I'll probably
do that instead ... but with a couple of if's the handle the cases where I
need to ack the message back.

The [1] index of the log types is the file that is opened by
open('/var/log/...etc...')

Thanks again for your help.

SDR
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110312/65525f13/attachment.htm 

From screwtape at froup.com  Sat Mar 12 20:15:37 2011
From: screwtape at froup.com (Tim Allen)
Date: Sun, 13 Mar 2011 12:15:37 +1100
Subject: [Twisted-Python] UDP Logging Server
In-Reply-To: <AANLkTikgzg71qWmUy46fU-FZQA87k1Uzr8T2NBx9VL7m@mail.gmail.com>
References: <AANLkTikgHs7=bUJe3sLomsmsRTKDkFicF+c41hzjc8sQ@mail.gmail.com>
	<20110312013227.GB31069@boombah.thristian.org>
	<AANLkTikgzg71qWmUy46fU-FZQA87k1Uzr8T2NBx9VL7m@mail.gmail.com>
Message-ID: <20110313011537.GC31069@boombah.thristian.org>

On Sat, Mar 12, 2011 at 02:33:45PM +0200, Pandelis Theodosiou wrote:
> On Sat, Mar 12, 2011 at 3:32 AM, Tim Allen <screwtape at froup.com> wrote:
> > Of course, if you flush after every disk read, your program will run
> > a bit more slowly and with more I/O... for an application where
> > reliability is more important than performance (like logging) that's
> > probably acceptable.
> 
> You may also setup a timer that flushes files every, say, 5 minutes.
> 
> One other thing I've read in the Python.org site is that flush() is not 100%
> sure to work immediately and should be used in combination with os.fsync().
> Is there someone that can explain if that is correct?

Depends what you mean by 'work'. The standard library (Python's or C's)
buffers reads and writes because calling into the kernel is expensive.
The kernel buffers reads and writes because disk I/O is even more
expensive. flush() tells the standard library "send buffered data to the
kernel right now" which means your data should survive if your process
crashes. fsync() tells the kernel "send buffered data to the disk right
now", which means your data should survive if the entire machine
crashes.

Whether you call nothing, just flush(), or both flush() and fsync()
depends on how your software balances performance versus reliability.


From exarkun at twistedmatrix.com  Sun Mar 13 00:05:21 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 13 Mar 2011 05:05:21 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1299992721.46.849807414@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110313/c9312a96/attachment.htm 

From ypercube at gmail.com  Sun Mar 13 06:37:10 2011
From: ypercube at gmail.com (Pandelis Theodosiou)
Date: Sun, 13 Mar 2011 12:37:10 +0200
Subject: [Twisted-Python] UDP Logging Server
In-Reply-To: <20110313011537.GC31069@boombah.thristian.org>
References: <AANLkTikgHs7=bUJe3sLomsmsRTKDkFicF+c41hzjc8sQ@mail.gmail.com>
	<20110312013227.GB31069@boombah.thristian.org>
	<AANLkTikgzg71qWmUy46fU-FZQA87k1Uzr8T2NBx9VL7m@mail.gmail.com>
	<20110313011537.GC31069@boombah.thristian.org>
Message-ID: <AANLkTikipLdPcW2=t=Q7BJ21eUAFe6rpBaQVgoTKZUPJ@mail.gmail.com>

On Sun, Mar 13, 2011 at 3:15 AM, Tim Allen <screwtape at froup.com> wrote:

> On Sat, Mar 12, 2011 at 02:33:45PM +0200, Pandelis Theodosiou wrote:
> > On Sat, Mar 12, 2011 at 3:32 AM, Tim Allen <screwtape at froup.com> wrote:
> > > Of course, if you flush after every disk read, your program will run
> > > a bit more slowly and with more I/O... for an application where
> > > reliability is more important than performance (like logging) that's
> > > probably acceptable.
> >
> > You may also setup a timer that flushes files every, say, 5 minutes.
> >
> > One other thing I've read in the Python.org site is that flush() is not
> 100%
> > sure to work immediately and should be used in combination with
> os.fsync().
> > Is there someone that can explain if that is correct?
>
> Depends what you mean by 'work'. The standard library (Python's or C's)
> buffers reads and writes because calling into the kernel is expensive.
> The kernel buffers reads and writes because disk I/O is even more
> expensive. flush() tells the standard library "send buffered data to the
> kernel right now" which means your data should survive if your process
> crashes. fsync() tells the kernel "send buffered data to the disk right
> now", which means your data should survive if the entire machine
> crashes.
>
> Whether you call nothing, just flush(), or both flush() and fsync()
> depends on how your software balances performance versus reliability.
>
>
>
thnx, very clear explanation.
<http://int.ask.com/web?siteid=10000861&webqsrc=999&l=dis&q=_______________________________________________>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110313/a3929aa6/attachment-0001.htm 

From fantix at exoweb.net  Tue Mar 15 02:54:10 2011
From: fantix at exoweb.net (Fantix King)
Date: Tue, 15 Mar 2011 14:54:10 +0800
Subject: [Twisted-Python] Asynchronous context in Twisted
In-Reply-To: <AANLkTikX_wkb5-jgmxQ7Y-3_ENurHS-COTOfBQN=vGX4@mail.gmail.com>
References: <AANLkTikX_wkb5-jgmxQ7Y-3_ENurHS-COTOfBQN=vGX4@mail.gmail.com>
Message-ID: <AANLkTika=xCxs1qmo2jZ2tFXSYJjUGtPqOpzacHcCE53@mail.gmail.com>

On Mar 3, 2011, at 2:39 PM, Glyph Lefkowitz wrote:
> On Mar 3, 2011, at 7:31 AM, Fantix King wrote:
>
> > Hi,
> >
> > I tried to make python.context work in asynchronous code between main
loops. Anyone has similar experience to share please?
> >
> > Not sure if I am rebuilding a wheel :P
> >
> >
http://code.google.com/p/little-site/source/browse/littlesite/custom_reactor.py
>
> This is something I've often thought about doing in Twisted itself,
actually :).  But I wasn't sure that chaining context would actually do
anything practically useful most of the time.  Have you found that it's
actually useful?  Have you managed to leverage this to, for example, get
more informative error messages out of Deferred failures?
>
> Doing it as a subclass like this is not optimal, as it limits you to one
reactor (and the Select reactor is not really the best one).  A wrapper
would be slightly more tricky (you'd have to deal with the places that the
reactor passes itself through to things like Process and Port, so you'd have
to create wrappers for those as well) but much more general.


Thanks for replying! :)

Yes! That's a wonderful idea to use this context for asynchronous traceback!
I made
some small changes to the code and wrote a patch for Twisted (as addReader
and
addWriter is quite different from one impl to another, I changed
SelectReactor only.
I haven't got a better idea for this, please advise), please see attachment.

With a simple example of raising exception in deferLater-ed function
(a-b-c-deferLater-d-e-f-g):

from twisted.internet import reactor
from twisted.internet.task import deferLater
reactor.usingAsyncTraceback = True

def g():
    raise Exception('Something happened inside.')

def f():
    return g()

def e():
    return f()

def d():
    return e()

def c():
    deferred = deferLater(reactor, 1, lambda: None)
    deferred.addCallback(lambda x: d())
    return deferred

def b():
    return c()

def a():
    return b()

if __name__ == '__main__':
    deferred = a()
    def errback(failure):
        failure.printTraceback()
    deferred.addErrback(errback)
    deferred.addBoth(lambda x: reactor.stop())
    reactor.run()


I could get this:


Traceback (most recent call last):
  File "test.py", line 31, in <module>
    deferred = a()
  File "test.py", line 28, in a
    return b()
  File "test.py", line 25, in b
    return c()
  File "test.py", line 20, in c
    deferred = deferLater(reactor, 1, lambda: None)
  File "/home/fantix/ac/twisted/internet/task.py", line 751, in deferLater
    delayedCall = clock.callLater(delay, d.callback, None)
  File "/home/fantix/ac/twisted/internet/base.py", line 701, in callLater
    _f, args, kw = self._chainContext(_f, args, kw)
*--- <asynchronous break point> ---*
  File "/home/fantix/ac/twisted/python/context.py", line 59, in
callWithContext
    return self.currentContext().callWithContext(ctx, func, *args, **kw)
  File "/home/fantix/ac/twisted/python/context.py", line 37, in
callWithContext
    return func(*args,**kw)
  File "/home/fantix/ac/twisted/internet/defer.py", line 361, in callback
    self._startRunCallbacks(result)
  File "/home/fantix/ac/twisted/internet/defer.py", line 455, in
_startRunCallbacks
    self._runCallbacks()
--- <exception caught here> ---
  File "/home/fantix/ac/twisted/internet/defer.py", line 542, in
_runCallbacks
    current.result = callback(current.result, *args, **kw)
  File "test.py", line 21, in <lambda>
    deferred.addCallback(lambda x: d())
  File "test.py", line 17, in d
    return e()
  File "test.py", line 14, in e
    return f()
  File "test.py", line 11, in f
    return g()
  File "test.py", line 8, in g
    raise Exception('Something happened inside.')


Additionally, in my scenario of a 5 years old asynchronous Twisted web
application, we
need the "request" object available throughout all code between asynchronous
network
accesses and database accesses because our global configuration system
needs the
request object. It would greatly reduce our manual work to pass through the
request
object here and there to have a context working in the asynchronous way.


BR,
Fantix.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110315/d3315923/attachment.htm 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: fantix_async_context.patch
Type: text/x-patch
Size: 6511 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20110315/d3315923/attachment.bin 

From waterbug at pangalactic.us  Tue Mar 15 10:25:02 2011
From: waterbug at pangalactic.us (Stephen Waterbury)
Date: Tue, 15 Mar 2011 10:25:02 -0400
Subject: [Twisted-Python] AMP cred stuff
Message-ID: <4D7F76BE.3010804@pangalactic.us>

Hey Glyph, Jp, and twisted sprinters,

Sorry I couldn't stay longer -- I stretched my "travel day"
as far as possible, but have to get back to my real job now
(on which I'm under the gun atm).  Hope I can sprint longer
next time -- I had a lot of fun, and the energy in the room
is amazing!

I'll attach the code to a bug tonight (I'll create one if there
isn't one).  I hope I can carve out time to add Kerberos (in
another issue, of course) soon -- selfishly, because I really
need it for my app at work.

Gotta get back to work now -- you guys all rock!

Cheers,
Steve



From facundobatista at gmail.com  Tue Mar 15 10:57:37 2011
From: facundobatista at gmail.com (Facundo Batista)
Date: Tue, 15 Mar 2011 10:57:37 -0400
Subject: [Twisted-Python] TestCase methods names
Message-ID: <AANLkTinmwLYVS6E68G9uh1APVe4dEP78TVwJ3KpfgtsE@mail.gmail.com>

Hello!

The TestCase class, historically, provided several ways to do the same
(I guess because we inherited the semantics from Java).

For example, to check equality, In Python2 we have:

 * assertEquals
 * assertEqual
 * failUnlessEqual

However, note that "assertEquals" was never documented (not in
Python's TestCase, neither in Trial's one).

In Python 3, the "There should be one-- and preferably only one
--obvious way to do it" rule was applied, and now the preferred way to
do that is:

  * assertEqual

Furthermore, assertEquals and failUnlessEqual are *deprecated* in Python 3:

>>> unittest.TestCase.assertEquals
<function deprecated_func at 0xb73795ec>
>>> unittest.TestCase.failUnlessEqual
<function deprecated_func at 0xb73795ec>

(I'm showing examples here using assertEqual, but the same happens for
all the functionalities there)

So, I propose to stick to the same method names than Python; this way
we'll be more consistent and easy to learn than keep providing all
variants.

In concrete, I say that we should:

- Deprecate those names that are deprecated in Python 3 (I mean, still
provide the functionality, but with a DeprecationWarning)

- Stop using them in internal code.

- Fix documentation to explain all this and show the chosen methods.

What do you think?

Regards,

-- 
.? ? Facundo

Blog: http://www.taniquetil.com.ar/plog/
PyAr: http://www.python.org/ar/


From exarkun at twistedmatrix.com  Tue Mar 15 11:49:23 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 15 Mar 2011 15:49:23 -0000
Subject: [Twisted-Python] AMP cred stuff
In-Reply-To: <4D7F76BE.3010804@pangalactic.us>
References: <4D7F76BE.3010804@pangalactic.us>
Message-ID: <20110315154923.2231.442194833.divmod.xquotient.212@localhost.localdomain>

On 02:25 pm, waterbug at pangalactic.us wrote:
>Hey Glyph, Jp, and twisted sprinters,
>
>Sorry I couldn't stay longer -- I stretched my "travel day"
>as far as possible, but have to get back to my real job now
>(on which I'm under the gun atm).  Hope I can sprint longer
>next time -- I had a lot of fun, and the energy in the room
>is amazing!
>
>I'll attach the code to a bug tonight (I'll create one if there
>isn't one).  I hope I can carve out time to add Kerberos (in
>another issue, of course) soon -- selfishly, because I really
>need it for my app at work.
>
>Gotta get back to work now -- you guys all rock!

Great having you at the sprint, Steve!  If only PyCon could be more than 
once a year. ;)

I'm really looking forward to having proper authentication for AMP in 
Twisted.  Thanks for working on it!

Jean-Paul


From brad.milne at devx.runthered.com  Tue Mar 15 21:55:20 2011
From: brad.milne at devx.runthered.com (Brad Milne)
Date: Wed, 16 Mar 2011 14:55:20 +1300
Subject: [Twisted-Python] LoopingCalls and unclean reactor
Message-ID: <AANLkTi=h8XMqMuY-oj1J+2BskXkWEUP1bQ5E6EWdwoP0@mail.gmail.com>

Hi

I have a series of MultiService objects, with child Services. Some of these
services are TCPServers, for example, and others are my own objects
(extending from Service).
In the instance that I have a Service which controls a LoopingCall, I am
getting intermittent 'unclean reactor' errors during tests. I feel I might
be missing some handling of deferreds, perhaps.
(using 8.2.0 - looking to migrate to 10.2.0 soon)

Here is an example of the approach being used:

class AdapterQueue(service.MultiService):
    def startService(self):
        service.Service.startService(self)
        self._looping_controller = LoopingCall(self._action)
        d = self._looping_controller.start(self.delay, False)
        d.addErrback(self._errorInScheduler)

    def stopService(self):
        service.Service.stopService(self)
        d = self._looping_controller.deferred
        self._looping_controller.stop()
        return d

And an example error (happens about 1/3 of the time):

DirtyReactorAggregateError: Reactor was unclean.
DelayedCalls: (set twisted.internet.base.DelayedCall.debug = True to debug)
<DelayedCall 30800112 [0.0189974308014s] called=0 cancelled=0
LoopingCall<0.033333333333333333>(AdapterQueue._action, *(), **{})()

traceback at creation:

  File "C:\Python26\lib\threading.py", line 497, in __bootstrap
    self.__bootstrap_inner()
      File "C:\Python26\lib\threading.py", line 525, in __bootstrap_inner
    self.run()
      File "C:\Python26\lib\threading.py", line 477, in run
    self.__target(*self.__args, **self.__kwargs)
      File "D:\dev\eggs\nose-0.11.3-py2.6.egg\nose\twistedtools.py", line
57, in <lambda>
    installSignalHandlers=False))
      File
"D:\dev\eggs\twisted-8.2.0-py2.6-win32.egg\twisted\internet\base.py", line
1128, in run
    self.mainLoop()
      File
"D:\dev\eggs\twisted-8.2.0-py2.6-win32.egg\twisted\internet\base.py", line
1137, in mainLoop
    self.runUntilCurrent()
      File
"D:\dev\eggs\twisted-8.2.0-py2.6-win32.egg\twisted\internet\base.py", line
757, in runUntilCurrent
    call.func(*call.args, **call.kw)
      File
"D:\dev\eggs\twisted-8.2.0-py2.6-win32.egg\twisted\internet\task.py", line
115, in __call__
    d.addCallback(cb)
      File
"D:\dev\eggs\twisted-8.2.0-py2.6-win32.egg\twisted\internet\defer.py", line
195, in addCallback
    callbackKeywords=kw)
      File
"D:\dev\eggs\twisted-8.2.0-py2.6-win32.egg\twisted\internet\defer.py", line
186, in addCallbacks
    self._runCallbacks()
      File
"D:\dev\eggs\twisted-8.2.0-py2.6-win32.egg\twisted\internet\defer.py", line
328, in _runCallbacks
    self.result = callback(self.result, *args, **kw)
      File
"D:\dev\eggs\twisted-8.2.0-py2.6-win32.egg\twisted\internet\task.py", line
103, in cb
    self._reschedule()
      File
"D:\dev\eggs\twisted-8.2.0-py2.6-win32.egg\twisted\internet\task.py", line
139, in _reschedule
    self.call = self.clock.callLater(nextTime - currentTime, self)
>


Many thanks
Brad
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110316/cb25cec1/attachment.htm 

From drew.smathers at gmail.com  Wed Mar 16 12:06:25 2011
From: drew.smathers at gmail.com (Drew Smathers)
Date: Wed, 16 Mar 2011 12:06:25 -0400
Subject: [Twisted-Python] LoopingCalls and unclean reactor
In-Reply-To: <AANLkTi=h8XMqMuY-oj1J+2BskXkWEUP1bQ5E6EWdwoP0@mail.gmail.com>
References: <AANLkTi=h8XMqMuY-oj1J+2BskXkWEUP1bQ5E6EWdwoP0@mail.gmail.com>
Message-ID: <AANLkTike52n5iWvad3Tod6G6pj=tjefO6+HEEhSZEnMp@mail.gmail.com>

On Tue, Mar 15, 2011 at 9:55 PM, Brad Milne
<brad.milne at devx.runthered.com> wrote:
> Hi
> I have a series of MultiService objects, with child Services. Some of these
> services are TCPServers, for example, and others are my own objects
> (extending from Service).
> In the instance that I have a Service which controls a LoopingCall, I am
> getting intermittent 'unclean reactor' errors during tests. I feel I might
> be missing some handling of deferreds, perhaps.
> (using 8.2.0 - looking to migrate to 10.2.0 soon)
> Here is an example of the approach being used:
> class?AdapterQueue(service.MultiService):
> ?? ?def startService(self):
> ?? ? ? ?service.Service.startService(self)
> ?? ? ? ?self._looping_controller = LoopingCall(self._action)
> ?? ? ? ?d = self._looping_controller.start(self.delay, False)
> ?? ? ? ?d.addErrback(self._errorInScheduler)
> ?? ?def stopService(self):
> ?? ? ? ?service.Service.stopService(self)
> ?? ? ? ?d = self._looping_controller.deferred
> ?? ? ? ?self._looping_controller.stop()
> ?? ? ? ?return d


I'm not sure if this is part of the issue or not, but it seems odd
that you may have accidentally inherited from MultiService instead of
Service.


> And an example error (happens about 1/3 of the time):
> DirtyReactorAggregateError: Reactor was unclean.
> DelayedCalls: (set twisted.internet.base.DelayedCall.debug = True to debug)
> <DelayedCall 30800112 [0.0189974308014s] called=0 cancelled=0
> LoopingCall<0.033333333333333333>(AdapterQueue._action, *(), **{})()
> traceback at creation:
> ??File "C:\Python26\lib\threading.py", line 497, in __bootstrap
> ?? ?self.__bootstrap_inner()
> ?? ? ?File "C:\Python26\lib\threading.py", line 525, in __bootstrap_inner
> ?? ?self.run()
> ?? ? ?File "C:\Python26\lib\threading.py", line 477, in run
> ?? ?self.__target(*self.__args, **self.__kwargs)
> ?? ? ?File "D:\dev\eggs\nose-0.11.3-py2.6.egg\nose\twistedtools.py", line
> 57, in <lambda>
> ?? ?installSignalHandlers=False))
> ?? ? ?File
> "D:\dev\eggs\twisted-8.2.0-py2.6-win32.egg\twisted\internet\base.py", line
> 1128, in run
> ?? ?self.mainLoop()
> ?? ? ?File
> "D:\dev\eggs\twisted-8.2.0-py2.6-win32.egg\twisted\internet\base.py", line
> 1137, in mainLoop
> ?? ?self.runUntilCurrent()
> ?? ? ?File
> "D:\dev\eggs\twisted-8.2.0-py2.6-win32.egg\twisted\internet\base.py", line
> 757, in runUntilCurrent
> ?? ?call.func(*call.args, **call.kw)
> ?? ? ?File
> "D:\dev\eggs\twisted-8.2.0-py2.6-win32.egg\twisted\internet\task.py", line
> 115, in __call__
> ?? ?d.addCallback(cb)
> ?? ? ?File
> "D:\dev\eggs\twisted-8.2.0-py2.6-win32.egg\twisted\internet\defer.py", line
> 195, in addCallback
> ?? ?callbackKeywords=kw)
> ?? ? ?File
> "D:\dev\eggs\twisted-8.2.0-py2.6-win32.egg\twisted\internet\defer.py", line
> 186, in addCallbacks
> ?? ?self._runCallbacks()
> ?? ? ?File
> "D:\dev\eggs\twisted-8.2.0-py2.6-win32.egg\twisted\internet\defer.py", line
> 328, in _runCallbacks
> ?? ?self.result = callback(self.result, *args, **kw)
> ?? ? ?File
> "D:\dev\eggs\twisted-8.2.0-py2.6-win32.egg\twisted\internet\task.py", line
> 103, in cb
> ?? ?self._reschedule()
> ?? ? ?File
> "D:\dev\eggs\twisted-8.2.0-py2.6-win32.egg\twisted\internet\task.py", line
> 139, in _reschedule
> ?? ?self.call = self.clock.callLater(nextTime - currentTime, self)
>>
>


Can you post code for the test?  This means generally (as you
suggested) that you haven't waited for all related deferreds to fire
before ending the test. Return the deferred returned by stopService(),
for example, and make final assertions in a callback; but I'm guessing
you already know this.


-Drew


From jeandaniel.browne at gmail.com  Wed Mar 16 15:55:19 2011
From: jeandaniel.browne at gmail.com (Jean-Daniel)
Date: Wed, 16 Mar 2011 20:55:19 +0100
Subject: [Twisted-Python] sample twistorm code?
Message-ID: <AANLkTikKvgh0cymBzkKdwSpVgdCt39jukV0dZtp7BUoW@mail.gmail.com>

Hello,

I writing a script parsing a large log file and shoveling it into Postgresql.

1. I would like to read some codes examples using the twisted + storm
integration, any idea of where to look?

Also. I was thinking about modeling a line of logs with a namedtuple,
because it is handy to create one without having to write a long and
dumb __init__ which take every constructor argument and one by one
assign them to the instance member of the same name.

2. Is the namedtuple compatible with storm objects? Namedtuple members
are properties and I am not sure it plays well with the storm
machinery.

Thank you for your help,

jdb


From brad.milne at devx.runthered.com  Wed Mar 16 17:13:17 2011
From: brad.milne at devx.runthered.com (Brad Milne)
Date: Thu, 17 Mar 2011 10:13:17 +1300
Subject: [Twisted-Python] LoopingCalls and unclean reactor
In-Reply-To: <AANLkTike52n5iWvad3Tod6G6pj=tjefO6+HEEhSZEnMp@mail.gmail.com>
References: <AANLkTi=h8XMqMuY-oj1J+2BskXkWEUP1bQ5E6EWdwoP0@mail.gmail.com>
	<AANLkTike52n5iWvad3Tod6G6pj=tjefO6+HEEhSZEnMp@mail.gmail.com>
Message-ID: <AANLkTikfO-nGsjWVp8PjxC86hOi+_7wxnR8MwCWQMG79@mail.gmail.com>

Thanks Drew

Yes, you spotted an error in my email, which is not replicated in my code.
ie My AdapterQueue in the code inherits from Service. It in turn is a
service of a parent which *is* a MultiService instance.

The tests are Integration tests, not unit tests, and as such run up an
instance of our entire messaging gateway. To date we have run it up once at
the start of the test run, run all test suites, then torn down (with unclean
reactor). The Integration tests have been notoriously brittle, so am hoping
that tearing down the gateway after *each* individual test will help with
that. To that end, I have refactored the code to better utilise services, so
that teardown (without just stopping the reactor) is possible.

So in the setUp() of each trial.unittest.TestCase, is a call to
test_utils.startGateway(). This returns the result of
gateway_svc.startService() (starts the parent MultiService of all child
services). Each of these setUp methods uses @inlineCallbacks and yields the
deferred returned from this top-level startService().
@inlineCallbacks
def setUp(self):
   yield test_utils.startGateway()
   {do other set up}

By the same token, the tearDown() in each test class calls
test_utils.tearDown(), which looks like:

class SomeTests(TestCase):
    def tearDown(self):
        self.extra_svc.stopService()
        test_utils.tearDown()

Haha! In writing this I've realised what I believe was the problem (and my
repeat testing just now has failed to show the intermittent failure). Each
test class's tearDown() was *not* *returning* the deferred returned from
stopService(). Changing the final line above seems to solve the issue:

return test_utils.tearDown()

Thanks for the sounding board, Drew.
Cheers
Brad



On 17 March 2011 05:06, Drew Smathers <drew.smathers at gmail.com> wrote:

> On Tue, Mar 15, 2011 at 9:55 PM, Brad Milne
> <brad.milne at devx.runthered.com> wrote:
> > Hi
> > I have a series of MultiService objects, with child Services. Some of
> these
> > services are TCPServers, for example, and others are my own objects
> > (extending from Service).
> > In the instance that I have a Service which controls a LoopingCall, I am
> > getting intermittent 'unclean reactor' errors during tests. I feel I
> might
> > be missing some handling of deferreds, perhaps.
> > (using 8.2.0 - looking to migrate to 10.2.0 soon)
> > Here is an example of the approach being used:
> > class AdapterQueue(service.MultiService):
> >     def startService(self):
> >         service.Service.startService(self)
> >         self._looping_controller = LoopingCall(self._action)
> >         d = self._looping_controller.start(self.delay, False)
> >         d.addErrback(self._errorInScheduler)
> >     def stopService(self):
> >         service.Service.stopService(self)
> >         d = self._looping_controller.deferred
> >         self._looping_controller.stop()
> >         return d
>
>
> I'm not sure if this is part of the issue or not, but it seems odd
> that you may have accidentally inherited from MultiService instead of
> Service.
>
>
> > And an example error (happens about 1/3 of the time):
> > DirtyReactorAggregateError: Reactor was unclean.
> > DelayedCalls: (set twisted.internet.base.DelayedCall.debug = True to
> debug)
> > <DelayedCall 30800112 [0.0189974308014s] called=0 cancelled=0
> > LoopingCall<0.033333333333333333>(AdapterQueue._action, *(), **{})()
> > traceback at creation:
> >   File "C:\Python26\lib\threading.py", line 497, in __bootstrap
> >     self.__bootstrap_inner()
> >       File "C:\Python26\lib\threading.py", line 525, in __bootstrap_inner
> >     self.run()
> >       File "C:\Python26\lib\threading.py", line 477, in run
> >     self.__target(*self.__args, **self.__kwargs)
> >       File "D:\dev\eggs\nose-0.11.3-py2.6.egg\nose\twistedtools.py", line
> > 57, in <lambda>
> >     installSignalHandlers=False))
> >       File
> > "D:\dev\eggs\twisted-8.2.0-py2.6-win32.egg\twisted\internet\base.py",
> line
> > 1128, in run
> >     self.mainLoop()
> >       File
> > "D:\dev\eggs\twisted-8.2.0-py2.6-win32.egg\twisted\internet\base.py",
> line
> > 1137, in mainLoop
> >     self.runUntilCurrent()
> >       File
> > "D:\dev\eggs\twisted-8.2.0-py2.6-win32.egg\twisted\internet\base.py",
> line
> > 757, in runUntilCurrent
> >     call.func(*call.args, **call.kw)
> >       File
> > "D:\dev\eggs\twisted-8.2.0-py2.6-win32.egg\twisted\internet\task.py",
> line
> > 115, in __call__
> >     d.addCallback(cb)
> >       File
> > "D:\dev\eggs\twisted-8.2.0-py2.6-win32.egg\twisted\internet\defer.py",
> line
> > 195, in addCallback
> >     callbackKeywords=kw)
> >       File
> > "D:\dev\eggs\twisted-8.2.0-py2.6-win32.egg\twisted\internet\defer.py",
> line
> > 186, in addCallbacks
> >     self._runCallbacks()
> >       File
> > "D:\dev\eggs\twisted-8.2.0-py2.6-win32.egg\twisted\internet\defer.py",
> line
> > 328, in _runCallbacks
> >     self.result = callback(self.result, *args, **kw)
> >       File
> > "D:\dev\eggs\twisted-8.2.0-py2.6-win32.egg\twisted\internet\task.py",
> line
> > 103, in cb
> >     self._reschedule()
> >       File
> > "D:\dev\eggs\twisted-8.2.0-py2.6-win32.egg\twisted\internet\task.py",
> line
> > 139, in _reschedule
> >     self.call = self.clock.callLater(nextTime - currentTime, self)
> >>
> >
>
>
> Can you post code for the test?  This means generally (as you
> suggested) that you haven't waited for all related deferreds to fire
> before ending the test. Return the deferred returned by stopService(),
> for example, and make final assertions in a callback; but I'm guessing
> you already know this.
>
>
> -Drew
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Brad Milne | Run The Red | *brad.milne at devx.runthered.com*
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110317/89f107e6/attachment.htm 

From jkakar at kakar.ca  Thu Mar 17 01:19:03 2011
From: jkakar at kakar.ca (Jamu Kakar)
Date: Thu, 17 Mar 2011 06:19:03 +0100
Subject: [Twisted-Python] TestCase methods names
In-Reply-To: <AANLkTinmwLYVS6E68G9uh1APVe4dEP78TVwJ3KpfgtsE@mail.gmail.com>
References: <AANLkTinmwLYVS6E68G9uh1APVe4dEP78TVwJ3KpfgtsE@mail.gmail.com>
Message-ID: <AANLkTimQ01VzotpjPou+2TfYWz2Yp5opb8ptMjcEcjkV@mail.gmail.com>

Hi Facundo,

On Tue, Mar 15, 2011 at 3:57 PM, Facundo Batista
<facundobatista at gmail.com> wrote:
> So, I propose to stick to the same method names than Python; this way
> we'll be more consistent and easy to learn than keep providing all
> variants.
>
> In concrete, I say that we should:
>
> - Deprecate those names that are deprecated in Python 3 (I mean, still
> provide the functionality, but with a DeprecationWarning)
>
> - Stop using them in internal code.
>
> - Fix documentation to explain all this and show the chosen methods.
>
> What do you think?

A note about assertEqual--at PyCon 2010 Michael Foord announced that
the order of arguments should be assertEqual(expected, actual).  It
would be good to start using that convention everywhere, in addition
to the changes you've recommended above.

Thanks,
J.


From jkakar at kakar.ca  Thu Mar 17 01:35:19 2011
From: jkakar at kakar.ca (Jamu Kakar)
Date: Thu, 17 Mar 2011 06:35:19 +0100
Subject: [Twisted-Python] sample twistorm code?
In-Reply-To: <AANLkTikKvgh0cymBzkKdwSpVgdCt39jukV0dZtp7BUoW@mail.gmail.com>
References: <AANLkTikKvgh0cymBzkKdwSpVgdCt39jukV0dZtp7BUoW@mail.gmail.com>
Message-ID: <AANLkTinBDxe+UTJ6YEkKE_rt-jdBUAq6Axax1s-prkGv@mail.gmail.com>

Hi Jean-Daniel,

In the future, please ask Storm-related questions on the Storm mailing
list [1] or in #storm on Freenode.

On Wed, Mar 16, 2011 at 8:55 PM, Jean-Daniel
<jeandaniel.browne at gmail.com> wrote:
> I writing a script parsing a large log file and shoveling it into Postgresql.

For what it's worth, using live objects for a large number of inserts
will be much slower than running INSERT statements directly.  Unless
the import code you're writing would be really complex with
hand-written statements, you'll probably want to avoid live objects.

> 1. I would like to read some codes examples using the twisted + storm
> integration, any idea of where to look?

The Twisted Storm code is not, as far as I know, regularly maintained.
That said, I think there are some people using it successfully.  The
generally recommended way to use Storm with Twisted is to run all
database logic in a thread with deferToThread.  You need to ensure
that Storm objects are not used outside the thread in which they were
retrieved.

I don't know of any examples.

> Also. I was thinking about modeling a line of logs with a namedtuple,
> because it is handy to create one without having to write a long and
> dumb __init__ which take every constructor argument and one by one
> assign them to the instance member of the same name.
>
> 2. Is the namedtuple compatible with storm objects? Namedtuple members
> are properties and I am not sure it plays well with the storm
> machinery.

namedtuple's aren't compatible with Storm.  Storm requires
database-backed properties to be defined on a class using Storm
properties.  Storm classes must also define a __storm_table__ class
attribute.

Thanks,
J.

[1] https://lists.canonical.com/mailman/listinfo/storm


From itamar at itamarst.org  Thu Mar 17 08:40:43 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Thu, 17 Mar 2011 08:40:43 -0400
Subject: [Twisted-Python] [Twisted-commits] r31216 - skip glib and gtk
 reactors in the new test
In-Reply-To: <20110317025544.1EA8C355E2@wolfwood.twistedmatrix.com>
References: <20110317025544.1EA8C355E2@wolfwood.twistedmatrix.com>
Message-ID: <1300365643.1709.2.camel@blake>

On Wed, 2011-03-16 at 20:55 -0600, pahan at wolfwood.twistedmatrix.com
wrote:

> +
> +        skippedReactors = ["Glib2Reactor", "Gtk2Reactor"]
> +        reactorClassName = reactor.__class__.__name__
> +        if reactorClassName in skippedReactors and platform.isWindows():
> +            raise SkipTest(
> +                "This test is broken on gtk/glib under Windows.")
> +

Shouldn't that be a todo, rather than a skip? Or maybe file a ticket.



From soid-exe at yandex.ru  Thu Mar 17 09:37:04 2011
From: soid-exe at yandex.ru (Temchenko Grigory)
Date: Thu, 17 Mar 2011 16:37:04 +0300
Subject: [Twisted-Python] Unicode exceptions
Message-ID: <126311300369025@web91.yandex.ru>

Hey there,

On my production server I have periodically happening unicode error but not on my desktop. It appears in logs:

2011-03-17 13:14:53+0000 [GameProtocol,941,95.78.43.17] <unicode instance at 0x9e304a0 with str error:
	 Traceback (most recent call last):
	  File "/usr/local/lib/python2.6/dist-packages/twisted/python/reflect.py", line 546, in _safeFormat
	    return formatter(o)
	UnicodeEncodeError: 'ascii' codec can't encode characters in position 21-26: ordinal not in range(128)
	>

It doesn't affect any logic in application but it's annoying in logs.

The server runs under Ubuntu 10.10 Server, Python 2.6.5, Twisted 10.2.0.
The desktop is Ubuntu 10.10 Desktop, Python 2.6.5, Twisted 10.2.0.

Locales are the same:
$ locale
LANG=en_US.UTF-8
LANGUAGE=en_US.UTF-8
LC_CTYPE="en_US.UTF-8"
LC_NUMERIC="en_US.UTF-8"
LC_TIME="en_US.UTF-8"
LC_COLLATE="en_US.UTF-8"
LC_MONETARY="en_US.UTF-8"
LC_MESSAGES="en_US.UTF-8"
LC_PAPER="en_US.UTF-8"
LC_NAME="en_US.UTF-8"
LC_ADDRESS="en_US.UTF-8"
LC_TELEPHONE="en_US.UTF-8"
LC_MEASUREMENT="en_US.UTF-8"
LC_IDENTIFICATION="en_US.UTF-8"
LC_ALL=en_US.UTF-8

What do I have to check to get it fixed?


From exarkun at twistedmatrix.com  Thu Mar 17 14:30:54 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 17 Mar 2011 18:30:54 -0000
Subject: [Twisted-Python] [Twisted-commits] r31216 - skip glib and
	gtk	reactors in the new test
In-Reply-To: <1300365643.1709.2.camel@blake>
References: <20110317025544.1EA8C355E2@wolfwood.twistedmatrix.com>
	<1300365643.1709.2.camel@blake>
Message-ID: <20110317183054.2231.198901766.divmod.xquotient.214@localhost.localdomain>

On 12:40 pm, itamar at itamarst.org wrote:
>On Wed, 2011-03-16 at 20:55 -0600, pahan at wolfwood.twistedmatrix.com
>wrote:
>>+
>>+        skippedReactors = ["Glib2Reactor", "Gtk2Reactor"]
>>+        reactorClassName = reactor.__class__.__name__
>>+        if reactorClassName in skippedReactors and 
>>platform.isWindows():
>>+            raise SkipTest(
>>+                "This test is broken on gtk/glib under Windows.")
>>+
>
>Shouldn't that be a todo, rather than a skip? Or maybe file a ticket.

A ticket would be nice, indeed.  We are collecting quite a nice set of 
gtk2-does-not-work-on-Windows issues in our test suite.

Jean-Paul


From glyph at twistedmatrix.com  Thu Mar 17 14:40:48 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 17 Mar 2011 14:40:48 -0400
Subject: [Twisted-Python] [Twisted-commits] r31216 - skip glib and gtk
	reactors in the new test
In-Reply-To: <20110317183054.2231.198901766.divmod.xquotient.214@localhost.localdomain>
References: <20110317025544.1EA8C355E2@wolfwood.twistedmatrix.com>
	<1300365643.1709.2.camel@blake>
	<20110317183054.2231.198901766.divmod.xquotient.214@localhost.localdomain>
Message-ID: <B73A3B2B-F307-4F68-8EA1-212BD325BB0F@twistedmatrix.com>


On Mar 17, 2011, at 2:30 PM, exarkun at twistedmatrix.com wrote:

> On 12:40 pm, itamar at itamarst.org wrote:
>> On Wed, 2011-03-16 at 20:55 -0600, pahan at wolfwood.twistedmatrix.com
>> wrote:
>>> +
>>> +        skippedReactors = ["Glib2Reactor", "Gtk2Reactor"]
>>> +        reactorClassName = reactor.__class__.__name__
>>> +        if reactorClassName in skippedReactors and 
>>> platform.isWindows():
>>> +            raise SkipTest(
>>> +                "This test is broken on gtk/glib under Windows.")
>>> +
>> 
>> Shouldn't that be a todo, rather than a skip? Or maybe file a ticket.
> 
> A ticket would be nice, indeed.  We are collecting quite a nice set of 
> gtk2-does-not-work-on-Windows issues in our test suite.

Ticket plus skip would be my preference.  The terminology of 'skip' vs. 'todo' is slightly misleading.  'skip' really means 'this is a test that I know fails, and I want to fix it later', so it doesn't bother to run it.  Whereas 'todo' means 'this is a test that sometimes fails and sometimes succeeds, I don't know what's going on with it, let's keep running it all the time to gather some data about how it fails differently over time'.

In this case, we basically know what the problem is, and running the test on the buildbot in a broken configuration is likely to cause more problems than it solves by a long shot.

Frankly, I am on the fence about the functionality of 'todo' being useful, ever.  Mostly it seems to just slow down test suites for no particular gain.



From michaelnt at gmail.com  Fri Mar 18 19:44:41 2011
From: michaelnt at gmail.com (Michael Thompson)
Date: Fri, 18 Mar 2011 23:44:41 +0000
Subject: [Twisted-Python] Benchmark of Python WSGI servers
Message-ID: <AANLkTimksYV8BYup6zn8xLbKkaTx0+aqc7m=oVYQ92vi@mail.gmail.com>


From glyph at twistedmatrix.com  Fri Mar 18 20:54:26 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 18 Mar 2011 20:54:26 -0400
Subject: [Twisted-Python] Benchmark of Python WSGI servers
In-Reply-To: <AANLkTimksYV8BYup6zn8xLbKkaTx0+aqc7m=oVYQ92vi@mail.gmail.com>
References: <AANLkTimksYV8BYup6zn8xLbKkaTx0+aqc7m=oVYQ92vi@mail.gmail.com>
Message-ID: <9A1FEA5C-609D-4071-B794-2666BF6E217E@twistedmatrix.com>

On Mar 18, 2011, at 7:44 PM, Michael Thompson wrote:

> From the guys who brought you async socket benchmark,
> http://nichol.as/asynchronous-servers-in-python, comes Python WSGI
> benchmark
> http://nichol.as/benchmark-of-python-web-servers.

Yep, I've seen that before.  It's one of the better benchmarks of its kind in the Python world, but unfortunately stops short of being good :).

The benchmark isn't really saying much that's interesting about WSGI servers anyway.  It mostly says "all of these servers are more than 20x faster than your WSGI app could ever possibly be, if it does anything interesting, so at most the server will account for 5% of your performance".  The logical conclusion: regardless of what server you're using, go optimize your app first.

While I'd love for Twisted to come out on top of that chart (it's always best to win at things, right?), such an improvement would be of little practical benefit to our users.  First because almost nobody has a WSGI app that is so trivial that it would be significantly helped by speeding up that part of the server, and also the fact that anyone with serious performance requirements in Twisted will be optimizing by calling Resource and Request APIs directly, asynchronously in the main loop (perhaps with multiple processes), not threading WSGI handlers for the critical fast path in their application.  Which, I hasten to remind you, is rarely all of your application.  A performance improvement to static.File, like making it truly non-blocking, would probably be a more significant benefit to most websites that want to be fast than making the thing that calls a WSGI function fast.

> Is twisted coming out of this so badly because they are using the
> default reactor, as opposed to epoll?

There isn't really enough analysis to determine why exactly Twisted fares poorly on this particular benchmark.

My pet theory is that it has something to do with transferring data from threads to the I/O loop via queue synchronization, and not being as smart as it could be about buffering, and that particular technique getting slammed really hard for very small request/response pairs.  I hypothesize that more buffering would occur with larger responses with more chunks, and that would bring Twisted's performance up to those of these other servers.

But it's hard to say, and, as I said above the benchmark isn't measuring anything too interesting, so it's hard to work up the motivation to find out.

> Perhaps the default reactor should be the best available rather than
> the lowest common denominator.

See <http://twistedmatrix.com/trac/ticket/2234>.  There should be a ticket for the broader goal too, and maybe it's already filed; I couldn't find it quickly.

From exarkun at twistedmatrix.com  Fri Mar 18 21:35:08 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 19 Mar 2011 01:35:08 -0000
Subject: [Twisted-Python] Benchmark of Python WSGI servers
In-Reply-To: <9A1FEA5C-609D-4071-B794-2666BF6E217E@twistedmatrix.com>
References: <AANLkTimksYV8BYup6zn8xLbKkaTx0+aqc7m=oVYQ92vi@mail.gmail.com>
	<9A1FEA5C-609D-4071-B794-2666BF6E217E@twistedmatrix.com>
Message-ID: <20110319013508.2231.1956753728.divmod.xquotient.261@localhost.localdomain>

On 12:54 am, glyph at twistedmatrix.com wrote:
>On Mar 18, 2011, at 7:44 PM, Michael Thompson wrote:
>> From the guys who brought you async socket benchmark,
>>http://nichol.as/asynchronous-servers-in-python, comes Python WSGI
>>benchmark
>>http://nichol.as/benchmark-of-python-web-servers.
>
>Yep, I've seen that before.  It's one of the better benchmarks of its 
>kind in the Python world, but unfortunately stops short of being good 
>:).
>
>The benchmark isn't really saying much that's interesting about WSGI 
>servers anyway.  It mostly says "all of these servers are more than 20x 
>faster than your WSGI app could ever possibly be, if it does anything 
>interesting, so at most the server will account for 5% of your 
>performance".  The logical conclusion: regardless of what server you're 
>using, go optimize your app first.
>
>While I'd love for Twisted to come out on top of that chart (it's 
>always best to win at things, right?), such an improvement would be of 
>little practical benefit to our users.  First because almost nobody has 
>a WSGI app that is so trivial that it would be significantly helped by 
>speeding up that part of the server, and also the fact that anyone with 
>serious performance requirements in Twisted will be optimizing by 
>calling Resource and Request APIs directly, asynchronously in the main 
>loop (perhaps with multiple processes), not threading WSGI handlers for 
>the critical fast path in their application.  Which, I hasten to remind 
>you, is rarely all of your application.  A performance improvement to 
>static.File, like making it truly non-blocking, would probably be a 
>more significant benefit to most websites that want to be fast than 
>making the thing that calls a WSGI function fast.
>>Is twisted coming out of this so badly because they are using the
>>default reactor, as opposed to epoll?
>
>There isn't really enough analysis to determine why exactly Twisted 
>fares poorly on this particular benchmark.
>
>My pet theory is that it has something to do with transferring data 
>from threads to the I/O loop via queue synchronization, and not being 
>as smart as it could be about buffering, and that particular technique 
>getting slammed really hard for very small request/response pairs.  I 
>hypothesize that more buffering would occur with larger responses with 
>more chunks, and that would bring Twisted's performance up to those of 
>these other servers.
>
>But it's hard to say, and, as I said above the benchmark isn't 
>measuring anything too interesting, so it's hard to work up the 
>motivation to find out.
>>Perhaps the default reactor should be the best available rather than
>>the lowest common denominator.
>
>See <http://twistedmatrix.com/trac/ticket/2234>.  There should be a 
>ticket for the broader goal too, and maybe it's already filed; I 
>couldn't find it quickly.

This all seems right on to me.  I just wanted to add that of the "top 
performers", there is some difference in what's being benchmarked.  Some 
of them use green threads instead of threads.  Some of them are 
multiprocess.  Compared to a thread-based WSGI container, these 
approaches have some performance benefits.  If someone wanted to make 
Twisted WSGI benchmark better, implementing one (or both) of these 
approaches would be one good way to go about it.

A multi-process WSGI container might actually be of practical use, since 
it may make more cores available to your server.  If an application is 
bottlenecked on CPU rather than some high-latency operation (as you can 
only process as many concurrent requests as you have threads in your 
threadpool), more cores can help.

Jean-Paul


From exarkun at twistedmatrix.com  Fri Mar 18 21:36:55 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 19 Mar 2011 01:36:55 -0000
Subject: [Twisted-Python] TestCase methods names
In-Reply-To: <AANLkTinmwLYVS6E68G9uh1APVe4dEP78TVwJ3KpfgtsE@mail.gmail.com>
References: <AANLkTinmwLYVS6E68G9uh1APVe4dEP78TVwJ3KpfgtsE@mail.gmail.com>
Message-ID: <20110319013655.2231.453825371.divmod.xquotient.262@localhost.localdomain>

On 15 Mar, 02:57 pm, facundobatista at gmail.com wrote:
>Hello!
>
>The TestCase class, historically, provided several ways to do the same
>(I guess because we inherited the semantics from Java).
>
>For example, to check equality, In Python2 we have:
>
>* assertEquals
>* assertEqual
>* failUnlessEqual
>
>However, note that "assertEquals" was never documented (not in
>Python's TestCase, neither in Trial's one).
>
>In Python 3, the "There should be one-- and preferably only one
>--obvious way to do it" rule was applied, and now the preferred way to
>do that is:
>
>  * assertEqual
>
>Furthermore, assertEquals and failUnlessEqual are *deprecated* in 
>Python 3:
>>>>unittest.TestCase.assertEquals
><function deprecated_func at 0xb73795ec>
>>>>unittest.TestCase.failUnlessEqual
><function deprecated_func at 0xb73795ec>
>
>(I'm showing examples here using assertEqual, but the same happens for
>all the functionalities there)
>
>So, I propose to stick to the same method names than Python; this way
>we'll be more consistent and easy to learn than keep providing all
>variants.
>
>In concrete, I say that we should:
>
>- Deprecate those names that are deprecated in Python 3 (I mean, still
>provide the functionality, but with a DeprecationWarning)
>
>- Stop using them in internal code.
>
>- Fix documentation to explain all this and show the chosen methods.
>
>What do you think?

+1 from me.

Jean-Paul


From exarkun at twistedmatrix.com  Fri Mar 18 21:40:38 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 19 Mar 2011 01:40:38 -0000
Subject: [Twisted-Python] Best strategies for pb Referenceables
	running	long methods from callRemote
In-Reply-To: <AANLkTimaAPH-GYHz-ptpNQWFsj4oyh_N005HQ+RQq6hR@mail.gmail.com>
References: <AANLkTimaAPH-GYHz-ptpNQWFsj4oyh_N005HQ+RQq6hR@mail.gmail.com>
Message-ID: <20110319014038.2231.1181588868.divmod.xquotient.269@localhost.localdomain>

On 10 Mar, 11:08 pm, charlessolar at gmail.com wrote:
>I am using PB to run remote methods in a testing system at my company. 
>The
>code works very well but breaks down when I start running multiple 
>tests at
>once.  I have tracked this down to overflowing the thread pool on the 
>remote
>machines.  I am wondering if anyone might have better suggestions for
>running long methods from a remote method.
>
>I coded up a sample of what I am seeing here: 
>http://pastebin.com/rBPp20Ms
>
>Basically I have 1 server that calls remote_execute on many clients on 
>a
>remote server.  This remote_execute method starts a new method using
>threads.deferToThread and returns the defer to make the server's 
>callRemote
>defer wait until the remote long method end.
>What I do in those methods is run test code that waits, blocks, sleeps, 
>and
>all sorts of nasty things that make the thread take a while.  In the 
>example
>code I simply sleep for 20 seconds.
>
>The problem I see with this code specifically is that I run out of 
>threads
>on the pool and even though I wanted all execute methods to run at the 
>same
>time, I see 10 run, then 10 more, then 10 more.. etc.  The testing 
>depends
>on all these methods being run at the same time as they run mechanisms 
>that
>depend on each other and need everyone running.  When I overflow the 
>thread
>pool some methods do not run until other methods stop, which makes the 
>whole
>test fail.

This is how the thread pool works.  It has a maximum size, which limits 
the number of threads it will create to process work given to it. 
Beyond that number of concurrent tasks, things will begin to get queued 
up and wait for a free thread to execute them.

Each task you give to the thread pool exclusively uses one of its 
threads for the entire duration of the task, regardless of what the task 
consists of.
>I am not holding the GIL or blocking the reactor, which was the first 
>thing
>I checked.
>
>Setting reactor.suggestThreadPoolSize(50) does help, but I do not think 
>its
>the best solution, and does not work very well on our slow and older
>machines.

Using more threads is the only solution to the problem of not using 
enough threads.  Alternatively, look for wards to process tasks without 
using threads.

Jean-Paul


From charlessolar at gmail.com  Fri Mar 18 22:06:11 2011
From: charlessolar at gmail.com (Charles Solar)
Date: Fri, 18 Mar 2011 21:06:11 -0500
Subject: [Twisted-Python] Best strategies for pb Referenceables running
 long methods from callRemote
In-Reply-To: <20110319014038.2231.1181588868.divmod.xquotient.269@localhost.localdomain>
References: <AANLkTimaAPH-GYHz-ptpNQWFsj4oyh_N005HQ+RQq6hR@mail.gmail.com>
	<20110319014038.2231.1181588868.divmod.xquotient.269@localhost.localdomain>
Message-ID: <AANLkTin41ByOBjfbZZysfWn9bUB5x914SO0FGDv=HkST@mail.gmail.com>

Thanks for the reply.  I am using twisted conch to connect to the remote
machines and start these tests, I am thinking that instead of using one
connection for all testing I will open a new connection (and thus a new
python) for each test.  Like I said increasing the thread pool size worked
well for fast machines but no so well on older ones.  I am hoping that this
behavior has more to do with the GIL and that 5 processes on a slow machine
will operate better than 5 python threads.
If not, then I will just have to write some sort of system to make sure I
dont open too many threads on certain remote machines.

Thanks again

On Fri, Mar 18, 2011 at 8:40 PM, <exarkun at twistedmatrix.com> wrote:

> On 10 Mar, 11:08 pm, charlessolar at gmail.com wrote:
> >I am using PB to run remote methods in a testing system at my company.
> >The
> >code works very well but breaks down when I start running multiple
> >tests at
> >once.  I have tracked this down to overflowing the thread pool on the
> >remote
> >machines.  I am wondering if anyone might have better suggestions for
> >running long methods from a remote method.
> >
> >I coded up a sample of what I am seeing here:
> >http://pastebin.com/rBPp20Ms
> >
> >Basically I have 1 server that calls remote_execute on many clients on
> >a
> >remote server.  This remote_execute method starts a new method using
> >threads.deferToThread and returns the defer to make the server's
> >callRemote
> >defer wait until the remote long method end.
> >What I do in those methods is run test code that waits, blocks, sleeps,
> >and
> >all sorts of nasty things that make the thread take a while.  In the
> >example
> >code I simply sleep for 20 seconds.
> >
> >The problem I see with this code specifically is that I run out of
> >threads
> >on the pool and even though I wanted all execute methods to run at the
> >same
> >time, I see 10 run, then 10 more, then 10 more.. etc.  The testing
> >depends
> >on all these methods being run at the same time as they run mechanisms
> >that
> >depend on each other and need everyone running.  When I overflow the
> >thread
> >pool some methods do not run until other methods stop, which makes the
> >whole
> >test fail.
>
> This is how the thread pool works.  It has a maximum size, which limits
> the number of threads it will create to process work given to it.
> Beyond that number of concurrent tasks, things will begin to get queued
> up and wait for a free thread to execute them.
>
> Each task you give to the thread pool exclusively uses one of its
> threads for the entire duration of the task, regardless of what the task
> consists of.
> >I am not holding the GIL or blocking the reactor, which was the first
> >thing
> >I checked.
> >
> >Setting reactor.suggestThreadPoolSize(50) does help, but I do not think
> >its
> >the best solution, and does not work very well on our slow and older
> >machines.
>
> Using more threads is the only solution to the problem of not using
> enough threads.  Alternatively, look for wards to process tasks without
> using threads.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110318/1518c09b/attachment.htm 

From gxti at partiallystapled.com  Fri Mar 18 23:08:56 2011
From: gxti at partiallystapled.com (Michael Tharp)
Date: Fri, 18 Mar 2011 23:08:56 -0400
Subject: [Twisted-Python] Windows build slaves
Message-ID: <4D841E48.9070504@partiallystapled.com>

Greetings,

I hear that Twisted needs some new/better/more reliable Windows build 
slaves. My employer has plenty of ESX capacity, and I know that a few 
other people are interested in helping out as well, so perhaps this a 
good time to clarify the requirements:

Which platforms: XP and 7? 32bit and 64bit? Any interest in the server 
editions?

Per-machine requirements: how much HDD and RAM? Any weird stuff like 
serial ports?

Connectivity: Is NAT OK, or are inbound connections required?

Do maintainers need access to the hypervisor, or is it adequate to have 
a watchdog to reboot crashed slaves?


Contingent on employer approval, I can donate 4 VMs (one of each flavor) 
with 2GiB of RAM and tens of GB storage each, including MSDN licenses. 
The limitations are that they would be on a NAT-only subnet with no 
possibility of inbound ports, and that there would be no hypervisor 
access. However, I can provide a watchdog to deal with crashed slaves 
and a VPN could be arranged if there's a public endpoint I can direct it 
to. I'm also "generally pretty accessible" although Glyph unsurprisingly 
indicates that people have failed to live up to that promise in the past 
:P   The offer is flexible, I'm just trying to start small to feel out 
the requirements.


--
Michael Tharp
rPath, Inc.


From glyph at twistedmatrix.com  Sat Mar 19 04:27:46 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 19 Mar 2011 04:27:46 -0400
Subject: [Twisted-Python] TestCase methods names
In-Reply-To: <20110319013655.2231.453825371.divmod.xquotient.262@localhost.localdomain>
References: <AANLkTinmwLYVS6E68G9uh1APVe4dEP78TVwJ3KpfgtsE@mail.gmail.com>
	<20110319013655.2231.453825371.divmod.xquotient.262@localhost.localdomain>
Message-ID: <B2D8F536-5B45-4D6D-A813-D61B48A869E9@twistedmatrix.com>


On Mar 18, 2011, at 9:36 PM, exarkun at twistedmatrix.com wrote:

>> In concrete, I say that we should:
>> 
>> - Deprecate those names that are deprecated in Python 3 (I mean, still
>> provide the functionality, but with a DeprecationWarning)
>> 
>> - Stop using them in internal code.
>> 
>> - Fix documentation to explain all this and show the chosen methods.
>> 
>> What do you think?
> 
> +1 from me.

Me too, except the order is wrong:

>> - Fix documentation...

>> - Stop using them...

>> - Deprecate those names...

In the past we've made an unfortunate habit of deprecating names and emitting tons of warnings without either explaining why they've been deprecated or removing our own usage.

Let's get those done first before we start inserting warnings.

Thanks! :)

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110319/99810c33/attachment.htm 

From glyph at twistedmatrix.com  Sat Mar 19 04:29:56 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 19 Mar 2011 04:29:56 -0400
Subject: [Twisted-Python] Benchmark of Python WSGI servers
In-Reply-To: <20110319013508.2231.1956753728.divmod.xquotient.261@localhost.localdomain>
References: <AANLkTimksYV8BYup6zn8xLbKkaTx0+aqc7m=oVYQ92vi@mail.gmail.com>
	<9A1FEA5C-609D-4071-B794-2666BF6E217E@twistedmatrix.com>
	<20110319013508.2231.1956753728.divmod.xquotient.261@localhost.localdomain>
Message-ID: <2B75A13A-60ED-4FD5-ADF0-1BC35CA3CCE8@twistedmatrix.com>

On Mar 18, 2011, at 9:35 PM, exarkun at twistedmatrix.com wrote:

> A multi-process WSGI container might actually be of practical use, since 
> it may make more cores available to your server.  If an application is 
> bottlenecked on CPU rather than some high-latency operation (as you can 
> only process as many concurrent requests as you have threads in your 
> threadpool), more cores can help.

+1.  This will actually speed up your application code, not just the server :).

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110319/e5fd59a6/attachment.htm 

From _ at lvh.cc  Sat Mar 19 08:00:48 2011
From: _ at lvh.cc (Laurens Van Houtven)
Date: Sat, 19 Mar 2011 13:00:48 +0100
Subject: [Twisted-Python] TestCase methods names
In-Reply-To: <20110319013655.2231.453825371.divmod.xquotient.262@localhost.localdomain>
References: <AANLkTinmwLYVS6E68G9uh1APVe4dEP78TVwJ3KpfgtsE@mail.gmail.com>
	<20110319013655.2231.453825371.divmod.xquotient.262@localhost.localdomain>
Message-ID: <AANLkTi=8Z8aGoO8EVKr=+b93VnDFV4D7LsrNa8EFgzDi@mail.gmail.com>

I'm with JP, but a reasonable warning should be important, yes.

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110319/c2f322e2/attachment.htm 

From michaelnt at gmail.com  Sat Mar 19 08:39:55 2011
From: michaelnt at gmail.com (Michael Thompson)
Date: Sat, 19 Mar 2011 12:39:55 +0000
Subject: [Twisted-Python] Benchmark of Python WSGI servers
In-Reply-To: <2B75A13A-60ED-4FD5-ADF0-1BC35CA3CCE8@twistedmatrix.com>
References: <AANLkTimksYV8BYup6zn8xLbKkaTx0+aqc7m=oVYQ92vi@mail.gmail.com>
	<9A1FEA5C-609D-4071-B794-2666BF6E217E@twistedmatrix.com>
	<20110319013508.2231.1956753728.divmod.xquotient.261@localhost.localdomain>
	<2B75A13A-60ED-4FD5-ADF0-1BC35CA3CCE8@twistedmatrix.com>
Message-ID: <AANLkTimY5Z76YkO8gV2MK70=esujcV5826=DwudPgtj+@mail.gmail.com>

On 19 March 2011 08:29, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> On Mar 18, 2011, at 9:35 PM, exarkun at twistedmatrix.com wrote:
>
> A multi-process WSGI container might actually be of practical use, since
> it may make more cores available to your server. ?If an application is
> bottlenecked on CPU rather than some high-latency operation (as you can
> only process as many concurrent requests as you have threads in your
> threadpool), more cores can help.
>
> +1. ?This will actually speed up your application code, not just the server
> :).

I agree that threads and processes is going to be the first step to
scaling but I don't think there's much advantage putting that in
twisted given that there are other solutions for this.

I was hoping that changing the reactor would give an easy way to make
Twisted look better, from a PR point of view. To check I ran a
benchmark on two EC2 m1.small machines using

httperf --timeout=5 --client=0/1 --server=ip-10-234-217-116
--port=8443 --uri=/ --rate=1000 --send-buffer=4096 --recv-buffer=16384
--num-conns=4000 --num-calls=10

gevent 1998 req/s.
select  734 req/s
poll      687 req/s
epoll    694 req/s

So looks like the reactor has nothing to do with it. Here some profile
results for the select reactor.

         2716620 function calls (2716586 primitive calls) in 21.634 CPU seconds

   Ordered by: internal time
   List reduced from 340 to 34 due to restriction <0.10000000000000001>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
       55    5.994    0.109    6.141    0.112 {select.select}
    22871    0.992    0.000    0.992    0.000 {built-in method acquire}
     5706    0.642    0.000    1.927    0.000 wsgi.py:168(__init__)
   165474    0.521    0.000    0.528    0.000 http.py:626(__setattr__)
     5706    0.394    0.000    1.778    0.000 http.py:922(write)
     5706    0.379    0.000    7.879    0.001 basic.py:543(dataReceived)
   142650    0.363    0.000    0.363    0.000 {method 'lower' of 'str' objects}
    34236    0.341    0.000    0.582    0.000
http_headers.py:13(_dashCapitalize)
    74178    0.324    0.000    0.712    0.000 http_headers.py:222(getRawHeaders)
    34236    0.319    0.000    0.954    0.000
http_headers.py:249(_canonicalNameCaps)
    22824    0.305    0.000    7.434    0.000 http.py:1537(lineReceived)
   133660    0.283    0.000    0.283    0.000 {method 'get' of 'dict' objects}
     5700    0.261    0.000    0.494    0.000 abstract.py:186(doWrite)
   108414    0.256    0.000    0.256    0.000 {method 'split' of 'str' objects}
     5706    0.252    0.000    0.739    0.000 wsgi.py:273(_sendResponseHeaders)
    11412    0.242    0.000    0.527    0.000 http.py:1589(headerReceived)
     5706    0.242    0.000    0.601    0.000 http.py:606(__init__)
    12043    0.242    0.000    9.162    0.001
selectreactor.py:144(_doReadOrWrite)
    39942    0.237    0.000    0.357    0.000 http_headers.py:186(setRawHeaders)
     5706    0.219    0.000    0.235    0.000 http.py:217(datetimeToString)
     5706    0.200    0.000    4.800    0.001 server.py:109(process)
    28530    0.197    0.000    0.307    0.000 http.py:1773(_escape)
     6301    0.196    0.000    0.240    0.000 base.py:688(callLater)
    12043    0.194    0.000    9.432    0.001 context.py:32(callWithContext)
   125616    0.194    0.000    0.194    0.000 {len}
     5706    0.193    0.000    0.526    0.000 http.py:1701(requestDone)
    91366    0.193    0.000    0.193    0.000 {isinstance}
    22824    0.173    0.000    0.204    0.000 base.py:97(reset)
    97006    0.169    0.000    0.169    0.000 {method 'replace' of
'str' objects}
    12043    0.169    0.000   10.085    0.001 log.py:71(callWithLogger)
    45648    0.168    0.000    1.207    0.000
http_headers.py:239(getAllRawHeaders)
    22856    0.148    0.000    0.148    0.000 {built-in method release}
5715/5712    0.147    0.000    0.308    0.000 defer.py:467(_runCallbacks)
    28530    0.144    0.000    0.418    0.000 http.py:856(getHeader)


From itamar at itamarst.org  Sat Mar 19 10:26:47 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Sat, 19 Mar 2011 10:26:47 -0400
Subject: [Twisted-Python] Benchmark of Python WSGI servers
In-Reply-To: <9A1FEA5C-609D-4071-B794-2666BF6E217E@twistedmatrix.com>
References: <AANLkTimksYV8BYup6zn8xLbKkaTx0+aqc7m=oVYQ92vi@mail.gmail.com>
	<9A1FEA5C-609D-4071-B794-2666BF6E217E@twistedmatrix.com>
Message-ID: <1300544807.1690.13.camel@blake>

On Fri, 2011-03-18 at 20:54 -0400, Glyph Lefkowitz wrote:

> My pet theory is that it has something to do with transferring data
> from threads to the I/O loop via queue synchronization, and not being
> as smart as it could be about buffering, and that particular technique
> getting slammed really hard for very small request/response pairs.  I
> hypothesize that more buffering would occur with larger responses with
> more chunks, and that would bring Twisted's performance up to those of
> these other servers.

Increasing the thread pool size to 50 gives a very nice speed  boost (as
high as 100% boost in reqs/sec.) I emailed the benchmark author asking
if he would rerun with epoll and higher thread pool size.



From exarkun at twistedmatrix.com  Sat Mar 19 11:42:03 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 19 Mar 2011 15:42:03 -0000
Subject: [Twisted-Python] Best strategies for pb Referenceables
	running	long methods from callRemote
In-Reply-To: <AANLkTin41ByOBjfbZZysfWn9bUB5x914SO0FGDv=HkST@mail.gmail.com>
References: <AANLkTimaAPH-GYHz-ptpNQWFsj4oyh_N005HQ+RQq6hR@mail.gmail.com>
	<20110319014038.2231.1181588868.divmod.xquotient.269@localhost.localdomain>
	<AANLkTin41ByOBjfbZZysfWn9bUB5x914SO0FGDv=HkST@mail.gmail.com>
Message-ID: <20110319154203.2231.178964871.divmod.xquotient.272@localhost.localdomain>

On 02:06 am, charlessolar at gmail.com wrote:
>Thanks for the reply.  I am using twisted conch to connect to the 
>remote
>machines and start these tests, I am thinking that instead of using one
>connection for all testing I will open a new connection (and thus a new
>python) for each test.

I'm not sure I follow.  In your earlier message you were talking about 
PB and deferToThread.  How does this fit with your Conch usage?  You're 
not using Conch in the function passed to deferToThread, are you?

Jean-Paul
>Like I said increasing the thread pool size worked
>well for fast machines but no so well on older ones.  I am hoping that 
>this
>behavior has more to do with the GIL and that 5 processes on a slow 
>machine
>will operate better than 5 python threads.
>If not, then I will just have to write some sort of system to make sure 
>I
>dont open too many threads on certain remote machines.
>
>Thanks again


From charlessolar at gmail.com  Sat Mar 19 14:48:37 2011
From: charlessolar at gmail.com (Charles Solar)
Date: Sat, 19 Mar 2011 13:48:37 -0500
Subject: [Twisted-Python] Best strategies for pb Referenceables running
 long methods from callRemote
In-Reply-To: <20110319154203.2231.178964871.divmod.xquotient.272@localhost.localdomain>
References: <AANLkTimaAPH-GYHz-ptpNQWFsj4oyh_N005HQ+RQq6hR@mail.gmail.com>
	<20110319014038.2231.1181588868.divmod.xquotient.269@localhost.localdomain>
	<AANLkTin41ByOBjfbZZysfWn9bUB5x914SO0FGDv=HkST@mail.gmail.com>
	<20110319154203.2231.178964871.divmod.xquotient.272@localhost.localdomain>
Message-ID: <AANLkTin-FSHTk26j7c-LTfPcU5_d6XhsJB81nNK2k7kY@mail.gmail.com>

Ah no, I use conch to connect to the remote machines.  My conch code starts
a remote python instance and runs some bootstrapping python code which
connects to the PB Root.  Once connected I send the test code to the remote
process and start testing with PB.  When the PB remote method
(remote_execute) is called from the users machine, that starts a new thread
with deferToThread to run the test code.  Since tests have multiple parts
that need to run simultaneously, some parts are delivered to the same
machine, causing one machine to have to execute 5 or more parts creating
many twisted threads.
The test code does its thing which stresses a network library.  It creates
servers and clients and makes sure everyone gets connected and gets all
messages involved with the test.  It waits for all these events to happen
simultaneously so the twisted threads can be alive for very long periods of
time, and the test depends on the fact that all such threads are running and
not waiting in the thread pool overflow queue.
I am planning on switching the multiple thread, one python design to
multiple python, one thread, which I hope will allow all elements of the
test to run simultaneously easier than just simply increasing the thread
pool size.

Charles

On Sat, Mar 19, 2011 at 10:42 AM, <exarkun at twistedmatrix.com> wrote:

> On 02:06 am, charlessolar at gmail.com wrote:
> >Thanks for the reply.  I am using twisted conch to connect to the
> >remote
> >machines and start these tests, I am thinking that instead of using one
> >connection for all testing I will open a new connection (and thus a new
> >python) for each test.
>
> I'm not sure I follow.  In your earlier message you were talking about
> PB and deferToThread.  How does this fit with your Conch usage?  You're
> not using Conch in the function passed to deferToThread, are you?
>
> Jean-Paul
> >Like I said increasing the thread pool size worked
> >well for fast machines but no so well on older ones.  I am hoping that
> >this
> >behavior has more to do with the GIL and that 5 processes on a slow
> >machine
> >will operate better than 5 python threads.
> >If not, then I will just have to write some sort of system to make sure
> >I
> >dont open too many threads on certain remote machines.
> >
> >Thanks again
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110319/818940d8/attachment.htm 

From exarkun at twistedmatrix.com  Sat Mar 19 16:29:41 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 19 Mar 2011 20:29:41 -0000
Subject: [Twisted-Python] Best strategies for pb Referenceables
	running	long methods from callRemote
In-Reply-To: <AANLkTin-FSHTk26j7c-LTfPcU5_d6XhsJB81nNK2k7kY@mail.gmail.com>
References: <AANLkTimaAPH-GYHz-ptpNQWFsj4oyh_N005HQ+RQq6hR@mail.gmail.com>
	<20110319014038.2231.1181588868.divmod.xquotient.269@localhost.localdomain>
	<AANLkTin41ByOBjfbZZysfWn9bUB5x914SO0FGDv=HkST@mail.gmail.com>
	<20110319154203.2231.178964871.divmod.xquotient.272@localhost.localdomain>
	<AANLkTin-FSHTk26j7c-LTfPcU5_d6XhsJB81nNK2k7kY@mail.gmail.com>
Message-ID: <20110319202941.2231.1173341416.divmod.xquotient.285@localhost.localdomain>

On 06:48 pm, charlessolar at gmail.com wrote:
>Ah no, I use conch to connect to the remote machines.  My conch code 
>starts
>a remote python instance and runs some bootstrapping python code which
>connects to the PB Root.  Once connected I send the test code to the 
>remote
>process and start testing with PB.  When the PB remote method
>(remote_execute) is called from the users machine, that starts a new 
>thread
>with deferToThread to run the test code.  Since tests have multiple 
>parts
>that need to run simultaneously, some parts are delivered to the same
>machine, causing one machine to have to execute 5 or more parts 
>creating
>many twisted threads.
>The test code does its thing which stresses a network library.  It 
>creates
>servers and clients and makes sure everyone gets connected and gets all
>messages involved with the test.  It waits for all these events to 
>happen
>simultaneously so the twisted threads can be alive for very long 
>periods of
>time, and the test depends on the fact that all such threads are 
>running and
>not waiting in the thread pool overflow queue.
>I am planning on switching the multiple thread, one python design to
>multiple python, one thread, which I hope will allow all elements of 
>the
>test to run simultaneously easier than just simply increasing the 
>thread
>pool size.

Does creating servers and clients involve running child processes?  If 
so, you should be able to use reactor.spawnProcess instead of 
deferToThread and a blocking child process API.

But if it involves running arbitrary blocking Python code, then I don't 
see how you can avoid threads.  Switching to processes may help or it 
may hurt - it depends on the details of your workload (sometimes Python 
threads scale much worse than linearly making them worse than having an 
equal number of separate processes, but sometimes they're fine making 
them cheaper than processes; it all depends on what your code does).

Jean-Paul


From glyph at twistedmatrix.com  Sat Mar 19 17:21:18 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 19 Mar 2011 17:21:18 -0400
Subject: [Twisted-Python] Benchmark of Python WSGI servers
In-Reply-To: <AANLkTimY5Z76YkO8gV2MK70=esujcV5826=DwudPgtj+@mail.gmail.com>
References: <AANLkTimksYV8BYup6zn8xLbKkaTx0+aqc7m=oVYQ92vi@mail.gmail.com>
	<9A1FEA5C-609D-4071-B794-2666BF6E217E@twistedmatrix.com>
	<20110319013508.2231.1956753728.divmod.xquotient.261@localhost.localdomain>
	<2B75A13A-60ED-4FD5-ADF0-1BC35CA3CCE8@twistedmatrix.com>
	<AANLkTimY5Z76YkO8gV2MK70=esujcV5826=DwudPgtj+@mail.gmail.com>
Message-ID: <1F2AE701-F431-4647-A15A-0299EF7D740E@twistedmatrix.com>

On Mar 19, 2011, at 8:39 AM, Michael Thompson wrote:

> I agree that threads and processes is going to be the first step to
> scaling but I don't think there's much advantage putting that in
> twisted given that there are other solutions for this.

Other solutions for what?  If Twisted is going to be a WSGI container, it should (eventually) be a multiprocess container, since that approach scales better to the number of CPUs.  Other options in the arena of single-machine load-balancing require lots of tedious setup and usually subtly affect the semantics of your application (you have to do work to make sure the application gets the correct idea of what URL it's being visited at and who the client is).

It would be even better if Twisted could automatically scale your WSGI application up to multiple hosts, even.  This is exactly the sort of thing that Twisted is good at.

> I was hoping that changing the reactor would give an easy way to make
> Twisted look better, from a PR point of view. To check I ran a
> benchmark on two EC2 m1.small machines using

Changing the reactor typically affects applications with a high degree of concurrency (more than 1000 concurrent connections) where the bottleneck is the multiplexing mechanism.  It can affect other things sometimes, but that's the usual problem it's meant to address.

The benchmark we're discussing is handling only a few requests at a time.  Itamar's approach to widening the threadpool is a better way to increase concurrency than changing the reactor, since the number of concurrent requests will be bottlenecked on the maximum number of threads anyway.

> So looks like the reactor has nothing to do with it. Here some profile results for the select reactor.

If you want to turn this profiling project into some optimizations, add a simple WSGI requests-per-second benchmark to a branch of <https://code.launchpad.net/~exarkun/+junk/twisted-benchmarks>, tell exarkun about it, and then submit a patch which makes that benchmark's number go up.

Thanks for following up on it!

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110319/d88a477c/attachment.htm 

From exarkun at twistedmatrix.com  Sun Mar 20 00:05:30 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 20 Mar 2011 04:05:30 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1300593930.13.1938807230@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110320/c68a4c5c/attachment-0001.htm 

From glyph at twistedmatrix.com  Sun Mar 20 01:09:30 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 20 Mar 2011 01:09:30 -0400
Subject: [Twisted-Python] Weekly Bug Summary
In-Reply-To: 1300593930.13.1938807230@twistedmatrix.com
References: 1300593930.13.1938807230@twistedmatrix.com
Message-ID: <84FEC6B2-1A32-499D-BC3A-88776CD7E809@twistedmatrix.com>

On Mar 20, 2011, at 12:05 AM, exarkun at twistedmatrix.com wrote:
> Total:                35         76       1271        -41
Wow.  This was an _impressive_ sprint.  Thanks to everyone who participated.



From jstpierre at mecheye.net  Mon Mar 21 21:30:54 2011
From: jstpierre at mecheye.net (Jasper St. Pierre)
Date: Mon, 21 Mar 2011 21:30:54 -0400
Subject: [Twisted-Python] Deferred documentation.
In-Reply-To: <AANLkTik0uA2NAvYjFpRqDk5XDNsgoj073nfmjF1tWHcP@mail.gmail.com>
References: <AANLkTik0uA2NAvYjFpRqDk5XDNsgoj073nfmjF1tWHcP@mail.gmail.com>
Message-ID: <AANLkTinemJ-Rdf1EC+0VDgxnvixpe5dvxCdGP5_kZA4m@mail.gmail.com>

On IRC, exarkun, glyph, spiv and idnar encouraged me to do a bit of
work on the Defer documentation. I kept get confused between the
things like returning a Deferred from a callback and chainDeferred,
which I found out wasn't that useful:

<idnar> I suppose it's useful for "forking" a deferred
<idnar> you have an "existing" deferred
<idnar> and you want a "new" deferred that starts with the value from
the end of the existing deferred's callback chain
<idnar> but you don't want the rest of the existing deferred's
callback chain to be affected by the new deferred's callback chain
<idnar> that's still not really a use case though, just a description
of the situation that must arise in the use case
<idnar> I guess I should search for actual uses of chainDeferred

Well, I was getting frustrated myself, and I suggested to fix the docs
once and for all. People pointed me to three documents, all of which
felt way too dense for me:

http://twistedmatrix.com/documents/current/core/howto/defer.html
http://twistedmatrix.com/documents/current/core/howto/gendefer.html
http://twistedmatrix.com/documents/current/core/howto/deferredindepth.html

Jessica also pointed me to http://twistedmatrix.com/trac/ticket/3943,
which admittedly I haven't read yet.

So, I started writing. I opened up a session of emacs, and produced two things:

http://magcius.mecheye.net/twisted/DeferHowTo-Rewrite.html
http://magcius.mecheye.net/twisted/DeferHowTo-Fixup.html

Sources:

http://magcius.mecheye.net/twisted/DeferHowTo-Rewrite.rst
http://magcius.mecheye.net/twisted/DeferHowTo-Fixup.lore

The former is a tutorial that I tried to make informal as possible,
and the latter is a fixup and rewrite of defer.xhtml stuff to make it
a bit less, uh, dense.

My eventual goal is to reduce the number of documentation about defer
down to a near-impossible two documents. I'm hoping to merge some of
the good stuff of the other thousands of documents.

Thoughts so far?


From werner at thieprojects.ch  Tue Mar 22 03:56:10 2011
From: werner at thieprojects.ch (Werner Thie)
Date: Tue, 22 Mar 2011 08:56:10 +0100
Subject: [Twisted-Python] Deferred documentation.
In-Reply-To: <AANLkTinemJ-Rdf1EC+0VDgxnvixpe5dvxCdGP5_kZA4m@mail.gmail.com>
References: <AANLkTik0uA2NAvYjFpRqDk5XDNsgoj073nfmjF1tWHcP@mail.gmail.com>
	<AANLkTinemJ-Rdf1EC+0VDgxnvixpe5dvxCdGP5_kZA4m@mail.gmail.com>
Message-ID: <4D88561A.40601@thieprojects.ch>

On 3/22/11 2:30 AM, Jasper St. Pierre wrote:
> On IRC, exarkun, glyph, spiv and idnar encouraged me to do a bit of
> work on the Defer documentation. I kept get confused between the
> things like returning a Deferred from a callback and chainDeferred,
> which I found out wasn't that useful:
>
> <idnar>  I suppose it's useful for "forking" a deferred
> <idnar>  you have an "existing" deferred
> <idnar>  and you want a "new" deferred that starts with the value from
> the end of the existing deferred's callback chain
> <idnar>  but you don't want the rest of the existing deferred's
> callback chain to be affected by the new deferred's callback chain
> <idnar>  that's still not really a use case though, just a description
> of the situation that must arise in the use case
> <idnar>  I guess I should search for actual uses of chainDeferred
>
> Well, I was getting frustrated myself, and I suggested to fix the docs
> once and for all. People pointed me to three documents, all of which
> felt way too dense for me:
>
> http://twistedmatrix.com/documents/current/core/howto/defer.html
> http://twistedmatrix.com/documents/current/core/howto/gendefer.html
> http://twistedmatrix.com/documents/current/core/howto/deferredindepth.html
>
> Jessica also pointed me to http://twistedmatrix.com/trac/ticket/3943,
> which admittedly I haven't read yet.
>
> So, I started writing. I opened up a session of emacs, and produced two things:
>
> http://magcius.mecheye.net/twisted/DeferHowTo-Rewrite.html
> http://magcius.mecheye.net/twisted/DeferHowTo-Fixup.html
>
> Sources:
>
> http://magcius.mecheye.net/twisted/DeferHowTo-Rewrite.rst
> http://magcius.mecheye.net/twisted/DeferHowTo-Fixup.lore
>
> The former is a tutorial that I tried to make informal as possible,
> and the latter is a fixup and rewrite of defer.xhtml stuff to make it
> a bit less, uh, dense.
>
> My eventual goal is to reduce the number of documentation about defer
> down to a near-impossible two documents. I'm hoping to merge some of
> the good stuff of the other thousands of documents.
>
> Thoughts so far?
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

Thank you for tackling the impossible.

I remember when reading the old docs the first time that one thing 
bothered me most and this was 'if I get a deferred back, then I'm kind 
of responsible for that beast' so what do I do with it besides adding 
call/errbacks'? I had a hard time and quite a few hours with the 
debugger to figure out the life cycle of a deferred. I also read 
gendefer.html over and over again while trying to figure out the 
relation of a deferred to the reactor, because somehow it must be that 
reactor.run() loop which in the end triggers either call- or errbacks.

This might be typical questions from someone who grew up without garbage 
collection. My problem is, that for coding in a confident way I have to 
have a grasp of the innards of the system.

Summed up
- How does the life cycle of a deferred look like?
- Who is responsible for a deferred?
- If deferreds are related to the reactor, then how are they related?

Reading your two docs answers those questions I had back then, 
definitely an improvement.

Minor glitches:

link to node.js is >> http://nodejs.org/

Thanks again, Werner



From jstpierre at mecheye.net  Tue Mar 22 07:58:50 2011
From: jstpierre at mecheye.net (Jasper St. Pierre)
Date: Tue, 22 Mar 2011 07:58:50 -0400
Subject: [Twisted-Python] Deferred documentation.
Message-ID: <AANLkTing9Fvw0roXC9v31cc_-kFFV0waBm36E=iJdE2a@mail.gmail.com>

(I screwed up my mailman preferences accidentally, so this is
formatted a bit haphazard from copy/paste)

> Thank you for tackling the impossible.

Thank you for the encouragement. I'm curious if you read both
documents, and if you had a preference toward one or the other. I
hopefully only want to have one "definitive deferred brief" in the
end, so a consensus on which road I should take would be would be
helpful:

* -Rewrite has a personal style: first-person perspective, relaxed
language, to-the-point-but-silly examples.

* -Fixup is a sort of gentler working of the current deferred doc that
tries to be a bit more gentle about what the user knows: I don't shove
the user full of an example involving some intricate intertwining of
Deferred.callback and reactor.callLater to introduce them to
callbacks, I instead opt to showcase the built-in HTTP client.

> I remember when reading the old docs the first time that one thing
> bothered me most and this was 'if I get a deferred back, then I'm kind
> of responsible for that beast' so what do I do with it besides adding
> call/errbacks'? I had a hard time and quite a few hours with the
> debugger to figure out the life cycle of a deferred. I also read
> gendefer.html over and over again while trying to figure out the
> relation of a deferred to the reactor, because somehow it must be that
> reactor.run() loop which in the end triggers either call- or errbacks.
>
> This might be typical questions from someone who grew up without garbage
> collection. My problem is, that for coding in a confident way I have to
> have a grasp of the innards of the system.
>
> Summed up
> - How does the life cycle of a deferred look like?
> - Who is responsible for a deferred?
> - If deferreds are related to the reactor, then how are they related?

An alternate goal of my efforts is to have a "rule list". Important
things about the guarantees Deferreds should be documented:

*If* you add more than one callback, *then* the return value of the
last callback will be used as the result for the next callback.
*If* you return a Deferred from a callback, *then* the callback chain
waits until the second Deferred is complete.

> Reading your two docs answers those questions I had back then,
> definitely an improvement.
>
> Minor glitches:
>
> link to node.js is >> http://nodejs.org/

I'm going to have to find new libraries anyway: gevent takes an
eventum-style approach that uses monkey-patches on urllib. I've seen
the callback approach before in a lot of other, different JavaScript
libs, hell, even the DOM-based addEventListener uses this a lot. I
just need to find a Python-based strawman to knock down.

> Thanks again, Werner

Thank you so much for the encouragement.


From itamar at itamarst.org  Tue Mar 22 08:28:27 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Tue, 22 Mar 2011 08:28:27 -0400
Subject: [Twisted-Python] Deferred documentation.
In-Reply-To: <AANLkTinemJ-Rdf1EC+0VDgxnvixpe5dvxCdGP5_kZA4m@mail.gmail.com>
References: <AANLkTik0uA2NAvYjFpRqDk5XDNsgoj073nfmjF1tWHcP@mail.gmail.com>
	<AANLkTinemJ-Rdf1EC+0VDgxnvixpe5dvxCdGP5_kZA4m@mail.gmail.com>
Message-ID: <1300796907.1680.9.camel@blake>

On Mon, 2011-03-21 at 21:30 -0400, Jasper St. Pierre wrote:

> The former is a tutorial that I tried to make informal as possible,
> and the latter is a fixup and rewrite of defer.xhtml stuff to make it
> a bit less, uh, dense.

I like the fixup, it's a good start, especially explaining the
motivation. We can probably drop the "generating deferreds" and
"deferreds in depth" howtos too by merging in any minor details they
mention that this doesn't. Some parts are still cumbersome, e.g.
"However, a Deferred is not a token that allows you to get a specific
result back. You can only get the result by adding callback. This is
because you can add..."




From danb.lists at googlemail.com  Tue Mar 22 13:48:29 2011
From: danb.lists at googlemail.com (Dan-Cristian Bogos)
Date: Tue, 22 Mar 2011 18:48:29 +0100
Subject: [Twisted-Python] AMP Client disconnecting from server on high
	memory usage
Message-ID: <AANLkTim3fiJyZ5PS4oe=sTfprt5qyV0kp_KG_rGFX0RF@mail.gmail.com>

Hey Guys,

Some issue I've met recently when experimenting with AMP.
Have created an AMP client connecting to a server and stay there
connected (using tap services).
The issues I am getting is that as soon as I load some more serious
data into twisted process (about 700MB on a virtual machine with 3GB
of ram available) the AMP Client does not longer stay connected to the
server. The data is loaded at startup using another service (loading
data by simulating it - adding random strings to some tuple).  I am
using twisted 10.2 out of pypi packages.
I should mention that with small amount of data in memory the
connection stays stable just fine. In logs there is nothing except
seeing the client connecting and disconnecting in the same second.

Any of you know any memory configuration somewhere in the code?

Thanks in advance for any kind of tip!

DanB


From jessica.mckellar at gmail.com  Tue Mar 22 20:17:25 2011
From: jessica.mckellar at gmail.com (Jessica McKellar)
Date: Tue, 22 Mar 2011 20:17:25 -0400
Subject: [Twisted-Python] Announcing Twisted 11.0.0pre1!
Message-ID: <AANLkTi=rXx+Q-ydzqfP4Fb07jod0GqnCVk0YyMftgZoM@mail.gmail.com>

Intrepid Twisted developers and users: from Cambridge, Massachusetts I
am pleased to announce the arrival of Twisted 11.0.0 pre-release 1.

Tarballs for the pre-release are available at:
?http://twistedmatrix.com/~jesstess/11.0.0pre1/

Highlights include:

?* a new templating system in Twisted Web, "twisted.web.template",
derived from Divmod Nevow.

?* improved behavior of subprocess spawning on FreeBSD.

?* an API for constructing endpoints from descriptive strings.

?* twisted.plugin no longer emits a confusing traceback when it can't
write a cache file.

For more information, see the NEWS file.

Download the tarballs and test away!

Thanks,
Jessica


From _ at lvh.cc  Tue Mar 22 20:24:01 2011
From: _ at lvh.cc (Laurens Van Houtven)
Date: Wed, 23 Mar 2011 01:24:01 +0100
Subject: [Twisted-Python] Announcing Twisted 11.0.0pre1!
In-Reply-To: <AANLkTi=rXx+Q-ydzqfP4Fb07jod0GqnCVk0YyMftgZoM@mail.gmail.com>
References: <AANLkTi=rXx+Q-ydzqfP4Fb07jod0GqnCVk0YyMftgZoM@mail.gmail.com>
Message-ID: <AANLkTimBOaj7g6xfvrCfd3jsbXi4LedShsgKiw7GLjLn@mail.gmail.com>

Free Belgian beer for all! (and Corenwyn for Allen)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110323/862b588f/attachment.htm 

From glyph at twistedmatrix.com  Tue Mar 22 20:53:25 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 22 Mar 2011 20:53:25 -0400
Subject: [Twisted-Python] Announcing Twisted 11.0.0pre1!
In-Reply-To: <AANLkTi=rXx+Q-ydzqfP4Fb07jod0GqnCVk0YyMftgZoM@mail.gmail.com>
References: <AANLkTi=rXx+Q-ydzqfP4Fb07jod0GqnCVk0YyMftgZoM@mail.gmail.com>
Message-ID: <177D4C20-7F64-4DA3-B78B-75D2B569A2A5@twistedmatrix.com>


On Mar 22, 2011, at 8:17 PM, Jessica McKellar wrote:

> Intrepid Twisted developers and users: from Cambridge, Massachusetts I
> am pleased to announce the arrival of Twisted 11.0.0 pre-release 1.

Hooray!

Thanks for volunteering to do the release, Jessica.  I was glad when Jonathan offered to do it again earlier in the month, but I'm even gladder to have new people get familiar with the release infrastructure.

> Tarballs for the pre-release are available at:
>  http://twistedmatrix.com/~jesstess/11.0.0pre1/
> 
> Highlights include:
> 
>  * a new templating system in Twisted Web, "twisted.web.template",
> derived from Divmod Nevow.
> 
>  * improved behavior of subprocess spawning on FreeBSD.
> 
>  * an API for constructing endpoints from descriptive strings.

Actually this feature was in 10.2; I think you meant that the "twistd mail" plugin now uses this functionality.

>  * twisted.plugin no longer emits a confusing traceback when it can't
> write a cache file.
> 
> For more information, see the NEWS file.
> 
> Download the tarballs and test away!


It Works For Me? :)

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110322/16ae1b05/attachment.htm 

From glyph at twistedmatrix.com  Tue Mar 22 20:58:07 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 22 Mar 2011 20:58:07 -0400
Subject: [Twisted-Python] Announcing Twisted 11.0.0pre1!
In-Reply-To: <177D4C20-7F64-4DA3-B78B-75D2B569A2A5@twistedmatrix.com>
References: <AANLkTi=rXx+Q-ydzqfP4Fb07jod0GqnCVk0YyMftgZoM@mail.gmail.com>
	<177D4C20-7F64-4DA3-B78B-75D2B569A2A5@twistedmatrix.com>
Message-ID: <99FAF5DA-6DB2-47C3-A4CC-88FF68A9B2A3@twistedmatrix.com>


On Mar 22, 2011, at 8:53 PM, Glyph Lefkowitz wrote:

>>  * an API for constructing endpoints from descriptive strings.
> 
> Actually this feature was in 10.2; I think you meant that the "twistd mail" plugin now uses this functionality.

(I should note that I actually reviewed a draft of this before it went out, but my eyes just slid over the mistake.  So the error is more mine than Jessica's!)

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110322/4f8bd7b0/attachment.htm 

From exarkun at twistedmatrix.com  Tue Mar 22 21:10:37 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 23 Mar 2011 01:10:37 -0000
Subject: [Twisted-Python] Announcing Twisted 11.0.0pre1!
In-Reply-To: <AANLkTi=rXx+Q-ydzqfP4Fb07jod0GqnCVk0YyMftgZoM@mail.gmail.com>
References: <AANLkTi=rXx+Q-ydzqfP4Fb07jod0GqnCVk0YyMftgZoM@mail.gmail.com>
Message-ID: <20110323011037.31712.1506936701.divmod.xquotient.0@localhost.localdomain>

On 12:17 am, jessica.mckellar at gmail.com wrote:
>Intrepid Twisted developers and users: from Cambridge, Massachusetts I
>am pleased to announce the arrival of Twisted 11.0.0 pre-release 1.
>
>Tarballs for the pre-release are available at:
>?http://twistedmatrix.com/~jesstess/11.0.0pre1/
>
>Highlights include:
>
>?* a new templating system in Twisted Web, "twisted.web.template",
>derived from Divmod Nevow.
>
>?* improved behavior of subprocess spawning on FreeBSD.
>
>?* an API for constructing endpoints from descriptive strings.
>
>?* twisted.plugin no longer emits a confusing traceback when it can't
>write a cache file.
>
>For more information, see the NEWS file.
>
>Download the tarballs and test away!

Hooray!  I just upgraded my mail server to this prerelease and sent this 
email using it. :)

Jean-Paul


From screwtape at froup.com  Tue Mar 22 21:40:09 2011
From: screwtape at froup.com (Tim Allen)
Date: Wed, 23 Mar 2011 12:40:09 +1100
Subject: [Twisted-Python] Announcing Twisted 11.0.0pre1!
In-Reply-To: <AANLkTi=rXx+Q-ydzqfP4Fb07jod0GqnCVk0YyMftgZoM@mail.gmail.com>
References: <AANLkTi=rXx+Q-ydzqfP4Fb07jod0GqnCVk0YyMftgZoM@mail.gmail.com>
Message-ID: <20110323014009.GE31069@boombah.thristian.org>

On Tue, Mar 22, 2011 at 08:17:25PM -0400, Jessica McKellar wrote:
> ?* a new templating system in Twisted Web, "twisted.web.template",
> derived from Divmod Nevow.

Oh boy! Are there pre-release API or other docs for this feature, or
will I have to download the tarball to read the code and/or wait for
11.0.0 to be released to find out about it?


From glyph at twistedmatrix.com  Tue Mar 22 21:46:47 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 22 Mar 2011 21:46:47 -0400
Subject: [Twisted-Python] Announcing Twisted 11.0.0pre1!
In-Reply-To: <20110323014009.GE31069@boombah.thristian.org>
References: <AANLkTi=rXx+Q-ydzqfP4Fb07jod0GqnCVk0YyMftgZoM@mail.gmail.com>
	<20110323014009.GE31069@boombah.thristian.org>
Message-ID: <72DEB3C2-E8F3-48D4-906D-0082396FDF31@twistedmatrix.com>


On Mar 22, 2011, at 9:40 PM, Tim Allen wrote:

> On Tue, Mar 22, 2011 at 08:17:25PM -0400, Jessica McKellar wrote:
>>  * a new templating system in Twisted Web, "twisted.web.template",
>> derived from Divmod Nevow.
> 
> Oh boy! Are there pre-release API or other docs for this feature, or
> will I have to download the tarball to read the code and/or wait for
> 11.0.0 to be released to find out about it?

Here's a link which will expire shortly:

<http://buildbot.twistedmatrix.com/builds/sphinx-html/280-15860/projects/web/howto/twisted-templates.html>.

Please enjoy it while it lasts.

-glyph



From glyph at twistedmatrix.com  Tue Mar 22 22:03:06 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 22 Mar 2011 22:03:06 -0400
Subject: [Twisted-Python] Deferred documentation.
In-Reply-To: <AANLkTinemJ-Rdf1EC+0VDgxnvixpe5dvxCdGP5_kZA4m@mail.gmail.com>
References: <AANLkTik0uA2NAvYjFpRqDk5XDNsgoj073nfmjF1tWHcP@mail.gmail.com>
	<AANLkTinemJ-Rdf1EC+0VDgxnvixpe5dvxCdGP5_kZA4m@mail.gmail.com>
Message-ID: <B68B4F4A-A8D5-4D23-87FC-9D0477A4BA65@twistedmatrix.com>

On Mar 21, 2011, at 9:30 PM, Jasper St. Pierre wrote:

> On IRC, exarkun, glyph, spiv and idnar encouraged me to do a bit of
> work on the Defer documentation.

Yay!  This documentation could definitely use some work.

> I kept get confused between the things like returning a Deferred from a callback and chainDeferred, which I found out wasn't that useful:

Yeah, chainDeferred is not a great method.  Now that Deferreds are non-recursive, I think it's purely worse than inserting an additional Deferred as a result from a callback.

> My eventual goal is to reduce the number of documentation about defer
> down to a near-impossible two documents. I'm hoping to merge some of
> the good stuff of the other thousands of documents.

That would be absolutely great.

> Thoughts so far?

While I applaud your intent, these drafts look quite rough.  The random interjections and asides in <http://magcius.mecheye.net/twisted/DeferHowTo-Fixup.html> seem distracting and confusing to me.  Trying to put myself in the mind of a newcomer, I find myself asking many questions which are irrelevant to what I'm trying to learn:

What's "async"?  Why is it hard?  (The original document mentions asynchronous stuff, but in the context of full english sentences.)
Where are we going shopping?  What does shopping have to do with this?
What's gevent?  Does this have something to do with Twisted?
What's node.js?  This looks like Javascript, what does it have to do with Twisted, which I thought was in Python?

(Now I've gotten distracted and I'm reading about gevent and node.js rather than making my Twisted application work and completing the Deferred tutorial.  Epic fail.  But, if I were to continue...)

What's "this pattern"?  Functions?  Don't lots of programs use functions?
How do they use it?  Why is it relevant?
Why is Twisted's right hand blue?  (Forget about being a beginner: I honestly don't even get this reference.  Googling seems to suggest it has something to do with symptoms of heart disease and doesn't seem funny or relevant at all.)
Why is the first explanation of what a Deferred is referred to as "technical mumbo-jumbo"? Is this really complicated?  If I am not super good at programming already, should I not be reading this?
What's an "operation"?  Does that mean 'function' or 'method' or some other special thing?  It says "most operations in Twisted return a Deferred"; but I've called lots of functions in Twisted which returned other objects before reading this tutorial, or returned None.  Were those actually Deferreds?
Why do I "not know where this Deferred has been"?  Do Deferreds get dirty or broken somehow when I add multiple callbacks?  Should I avoid that?

The Python examples in the current Deferred Reference are mostly runnable.  The ones that aren't, should be.  The documentation should stress that you can run these examples simply, and encourage the reader to download and experiment with them, and modify them to see what happens when they do things in a different order.

Instead, the "fixup" changes the first example to rely on a fake library, which will raise exceptions if I try to run it, but doesn't actually explain that 'magiclib' isn't real.  This isn't a huge problem in and of itself (it is trying to demonstrate the "wrong" way to do things, after all) but it sets up the expectation that the rest of the examples are fake, too, and I shouldn't bother to run them.

I think the original document has plenty of issues, but these changes look like they've been written for people who already mostly understand Deferreds, but are having trouble catching some of the nuances, and need humor to diffuse their frustration and more examples to illustrate different usage patterns, rather than a fundamentally clearer or better explanation than what was offered before.  That makes sense, since based on what you've said on #twisted, that's basically the position you find yourself in :).  This document is supposed to be a tutorial though, explaining how to use Deferreds to users who really have no idea what they are (despite its unfortunate name, "Deferred Reference" - that should probably be changed).

One thing I think is very good about this attempted rework, though, is the explanation of the motivation for having Deferreds at all, before explaining how they work.  In the current documentation, it's very unclear why we have such an object in the first place, or what the alternatives to it are.  However, the example presented makes it seem as though you really don't need Deferreds, because the only problem with the single-callback approach is handling errors.  Another major motivation is the ability to return a Deferred through a system with several layers, changing the return value at each layer by post-processing it a bit.  (One possible example: a REST API that wants to deal with objects, and goes via a translation of [bytes from HTTP]->[JSON dicts/lists from parsing those bytes]->[domain-specific objects by converting JSON objects according to the particular API's spec].)

However, I think the need would be better illustrated with examples that can actually be run than with fake examples where we assume that the user knows how something like gevent works.  (Also: gevent doesn't actually work this way, for fetching web pages at least, so your example is wrong.  See <http://www.gevent.org/intro.html#monkey-patching>.)

It's pretty easy to write a fake implementation of 'fetchWebPageAsync' which squirrels away the callback somewhere that the example can call it later, and explain that with some handwaving where we say "and pretend that was actually some networking code fetching it".  For that matter, the reactor is introduced too early in the existing docs; we should demonstrate calling the callback synchronously, and then only later introduce a callLater.

Anyway I hope this wall of text did not discourage you - I just think you need some clearer goals for improving specific aspects of the documentation, and you should write those down first before trying to actually address them with more docs.

Thanks for your time,

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110322/e67158fb/attachment-0001.htm 

From tom at recursivedream.com  Tue Mar 22 22:20:41 2011
From: tom at recursivedream.com (Tom Davis)
Date: Tue, 22 Mar 2011 22:20:41 -0400
Subject: [Twisted-Python] Announcing Twisted 11.0.0pre1!
In-Reply-To: <AANLkTi=rXx+Q-ydzqfP4Fb07jod0GqnCVk0YyMftgZoM@mail.gmail.com>
References: <AANLkTi=rXx+Q-ydzqfP4Fb07jod0GqnCVk0YyMftgZoM@mail.gmail.com>
Message-ID: <AANLkTi=uYDCyAR9T6LeG8_EFxdgnwjVCb5VAB0uD1fbW@mail.gmail.com>

On Tue, Mar 22, 2011 at 8:17 PM, Jessica McKellar <
jessica.mckellar at gmail.com> wrote:

> Intrepid Twisted developers and users: from Cambridge, Massachusetts I
> am pleased to announce the arrival of Twisted 11.0.0 pre-release 1.
>
> Tarballs for the pre-release are available at:
>  http://twistedmatrix.com/~jesstess/11.0.0pre1/
>
> Highlights include:
>
>  * a new templating system in Twisted Web, "twisted.web.template",
> derived from Divmod Nevow.
>
>  * improved behavior of subprocess spawning on FreeBSD.
>
>  * an API for constructing endpoints from descriptive strings.
>
>  * twisted.plugin no longer emits a confusing traceback when it can't
> write a cache file.
>
> For more information, see the NEWS file.
>
> Download the tarballs and test away!
>

Awesome! Thanks for doing the release, Jessica! :)


>
> Thanks,
> Jessica
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110322/104fc1be/attachment.htm 

From kevin.horn at gmail.com  Wed Mar 23 09:22:01 2011
From: kevin.horn at gmail.com (Kevin Horn)
Date: Wed, 23 Mar 2011 08:22:01 -0500
Subject: [Twisted-Python] Announcing Twisted 11.0.0pre1!
In-Reply-To: <AANLkTi=rXx+Q-ydzqfP4Fb07jod0GqnCVk0YyMftgZoM@mail.gmail.com>
References: <AANLkTi=rXx+Q-ydzqfP4Fb07jod0GqnCVk0YyMftgZoM@mail.gmail.com>
Message-ID: <AANLkTikgjUwE7Kz=7H91Am7VgXpoCXw-k0HgWz8teaUz@mail.gmail.com>

On Tue, Mar 22, 2011 at 7:17 PM, Jessica McKellar <
jessica.mckellar at gmail.com> wrote:

> Intrepid Twisted developers and users: from Cambridge, Massachusetts I
> am pleased to announce the arrival of Twisted 11.0.0 pre-release 1.
>
> Tarballs for the pre-release are available at:
>  http://twistedmatrix.com/~jesstess/11.0.0pre1/
>
> Highlights include:
>
>  * a new templating system in Twisted Web, "twisted.web.template",
> derived from Divmod Nevow.
>
>  * improved behavior of subprocess spawning on FreeBSD.
>
>  * an API for constructing endpoints from descriptive strings.
>
>  * twisted.plugin no longer emits a confusing traceback when it can't
> write a cache file.
>
> For more information, see the NEWS file.
>
> Download the tarballs and test away!
>
> Thanks,
> Jessica
>
>
Hooray!

Thanks for volunteering to be the release victim, er...manager!

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110323/1eed9828/attachment.htm 

From kevin.horn at gmail.com  Wed Mar 23 09:24:48 2011
From: kevin.horn at gmail.com (Kevin Horn)
Date: Wed, 23 Mar 2011 08:24:48 -0500
Subject: [Twisted-Python] Deferred documentation.
In-Reply-To: <B68B4F4A-A8D5-4D23-87FC-9D0477A4BA65@twistedmatrix.com>
References: <AANLkTik0uA2NAvYjFpRqDk5XDNsgoj073nfmjF1tWHcP@mail.gmail.com>
	<AANLkTinemJ-Rdf1EC+0VDgxnvixpe5dvxCdGP5_kZA4m@mail.gmail.com>
	<B68B4F4A-A8D5-4D23-87FC-9D0477A4BA65@twistedmatrix.com>
Message-ID: <AANLkTinoiSj=na+wSK=awhQ-fcCJ+RA66=_6BPXJxh_R@mail.gmail.com>

On Tue, Mar 22, 2011 at 9:03 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

>
>    - Why is Twisted's right hand blue?  (Forget about being a beginner: I
>    honestly don't even get this reference.  Googling seems to suggest it has
>    something to do with symptoms of heart disease and doesn't seem funny or
>    relevant at all.)
>
>
>
My guess is that it has to do with Twister, the classic board(?) game.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110323/0cf0a301/attachment.htm 

From albert.brandl at weiermayer.com  Wed Mar 23 09:41:32 2011
From: albert.brandl at weiermayer.com (Albert Brandl)
Date: Wed, 23 Mar 2011 14:41:32 +0100
Subject: [Twisted-Python] Deferred documentation.
In-Reply-To: <AANLkTinemJ-Rdf1EC+0VDgxnvixpe5dvxCdGP5_kZA4m@mail.gmail.com>
References: <AANLkTik0uA2NAvYjFpRqDk5XDNsgoj073nfmjF1tWHcP@mail.gmail.com>
	<AANLkTinemJ-Rdf1EC+0VDgxnvixpe5dvxCdGP5_kZA4m@mail.gmail.com>
Message-ID: <20110323134131.GA17456@weiermayer.com>

Hi!

On Mon, Mar 21, 2011 at 09:30:54PM -0400, Jasper St. Pierre wrote:
> http://magcius.mecheye.net/twisted/DeferHowTo-Rewrite.html
> http://magcius.mecheye.net/twisted/DeferHowTo-Fixup.html

This looks quite good. You might want to check if the code examples
actually work, though: The "hands-on training" example in the section
"Tasks of our own" redefines the `callback` function in line 12.

Best regards,

Albert
-- 
Albert Brandl
Weiermayer Solutions GmbH      | Abteistra?e 12, A-4813 Altm?nster
phone: +43 (0) 720 70 30 14    | fax: +43 (0) 7612 20 3 56
web: http://www.weiermayer.com


From _ at lvh.cc  Wed Mar 23 11:20:20 2011
From: _ at lvh.cc (Laurens Van Houtven)
Date: Wed, 23 Mar 2011 16:20:20 +0100
Subject: [Twisted-Python] Announcing Twisted 11.0.0pre1!
In-Reply-To: <AANLkTi=rXx+Q-ydzqfP4Fb07jod0GqnCVk0YyMftgZoM@mail.gmail.com>
References: <AANLkTi=rXx+Q-ydzqfP4Fb07jod0GqnCVk0YyMftgZoM@mail.gmail.com>
Message-ID: <AANLkTikK9igoZh=nZpk29jz6BSpyH_W44_T-GbyZVH1W@mail.gmail.com>

Now I am so glad I didn't rant about release management being a sucker's
game in my Pycon talk ;-)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110323/cca3ca5a/attachment.htm 

From glyph at twistedmatrix.com  Wed Mar 23 13:07:35 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 23 Mar 2011 13:07:35 -0400
Subject: [Twisted-Python] Deferred documentation.
In-Reply-To: <AANLkTinoiSj=na+wSK=awhQ-fcCJ+RA66=_6BPXJxh_R@mail.gmail.com>
References: <AANLkTik0uA2NAvYjFpRqDk5XDNsgoj073nfmjF1tWHcP@mail.gmail.com>
	<AANLkTinemJ-Rdf1EC+0VDgxnvixpe5dvxCdGP5_kZA4m@mail.gmail.com>
	<B68B4F4A-A8D5-4D23-87FC-9D0477A4BA65@twistedmatrix.com>
	<AANLkTinoiSj=na+wSK=awhQ-fcCJ+RA66=_6BPXJxh_R@mail.gmail.com>
Message-ID: <99C1E910-D590-41E3-972E-C48BF2B8B755@twistedmatrix.com>


On Mar 23, 2011, at 9:24 AM, Kevin Horn wrote:

> 
> 
> On Tue, Mar 22, 2011 at 9:03 PM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> Why is Twisted's right hand blue?  (Forget about being a beginner: I honestly don't even get this reference.  Googling seems to suggest it has something to do with symptoms of heart disease and doesn't seem funny or relevant at all.)
> 
> 
> My guess is that it has to do with Twister, the classic board(?) game.

Oh.  Even worse!  I don't want to get sued by Hasbro :).

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110323/2d2f50c0/attachment.htm 

From jstpierre at mecheye.net  Wed Mar 23 13:10:44 2011
From: jstpierre at mecheye.net (Jasper St. Pierre)
Date: Wed, 23 Mar 2011 13:10:44 -0400
Subject: [Twisted-Python] Deferred documentation.
In-Reply-To: <99C1E910-D590-41E3-972E-C48BF2B8B755@twistedmatrix.com>
References: <AANLkTik0uA2NAvYjFpRqDk5XDNsgoj073nfmjF1tWHcP@mail.gmail.com>
	<AANLkTinemJ-Rdf1EC+0VDgxnvixpe5dvxCdGP5_kZA4m@mail.gmail.com>
	<B68B4F4A-A8D5-4D23-87FC-9D0477A4BA65@twistedmatrix.com>
	<AANLkTinoiSj=na+wSK=awhQ-fcCJ+RA66=_6BPXJxh_R@mail.gmail.com>
	<99C1E910-D590-41E3-972E-C48BF2B8B755@twistedmatrix.com>
Message-ID: <AANLkTimQ0exUxWZO8PV01qXAiCtqr84A1uTbS9W01q4Q@mail.gmail.com>

What about Mattel?

http://itre.cis.upenn.edu/~myl/languagelog/archives/002892.html

On Wed, Mar 23, 2011 at 1:07 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
>
> On Mar 23, 2011, at 9:24 AM, Kevin Horn wrote:
>
>
> On Tue, Mar 22, 2011 at 9:03 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
> wrote:
>>
>> Why is Twisted's right hand blue? ?(Forget about being a beginner: I
>> honestly don't even get this reference. ?Googling seems to suggest it has
>> something to do with symptoms of heart disease and doesn't seem funny or
>> relevant at all.)
>
> My guess is that it has to do with Twister, the classic board(?) game.
>
> Oh. ?Even worse! ?I don't want to get sued by Hasbro :).
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


From glyph at twistedmatrix.com  Wed Mar 23 21:34:42 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 23 Mar 2011 21:34:42 -0400
Subject: [Twisted-Python] prerelease preview predocumentation
Message-ID: <C9AA782C-1AC0-423A-9146-278E914D53D5@twistedmatrix.com>

Dear Twistizens,

Unfortunately, the Sphinx documentation didn't quite officially make the cut for the 11.0 release.  Our release toolchain still needs updating, someone needs to review the rst sources, etc.  Until all that's done, all documentation changes will still need to be Lore patches.  Plus, I kinda hope that someone manages to get <http://tm.tl/2443> merged before we pull the trigger.

However, we've been generating Sphinx output for quite a while, and quite a lot of work has gone into its presentation.  It seems a pity to let that go to waste.  So, while our official documentation remains at <http://twistedmatrix.com/documents/current/> (and that is the URL that will be updated when the release goes out), I've decided to host some un-official documentation with all the snazzy styling that Kevin Horn prepared for us here, to go with the pre-release that Jessica McKellar just announced:

<http://twistedmatrix.com/~glyph/sphinx-preview-11.0pre1/>

I know that there's some extraneous spacing; that will be fixed after the ReST sources make it to trunk, unless someone feels like fixing it in <https://bitbucket.org/khorn/lore2sphinx>.  (Also, API documentation links for new features will be broken until the 11.0 API documentation is pushed to <http://twistedmatrix.com/documents/current/api/>.)

However, this documentation snapshot should be otherwise usable, and I'm contemplating linking to it from the front page.

Please be aware that this is not a stable URL, and any links to it will break after a while; I have no fixed schedule for taking it down, but it will definitely go away when the final documentation branch is merged.  Otherwise, though, read documentation to your hearts' content.

Share and Enjoy,

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110323/e7311cf7/attachment.htm 

From exarkun at twistedmatrix.com  Thu Mar 24 11:15:51 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 24 Mar 2011 15:15:51 -0000
Subject: [Twisted-Python] Windows build slaves
In-Reply-To: <4D841E48.9070504@partiallystapled.com>
References: <4D841E48.9070504@partiallystapled.com>
Message-ID: <20110324151551.1992.1826972938.divmod.xquotient.39@localhost.localdomain>

On 19 Mar, 03:08 am, gxti at partiallystapled.com wrote:
>Greetings,
>
>I hear that Twisted needs some new/better/more reliable Windows build
>slaves. My employer has plenty of ESX capacity, and I know that a few
>other people are interested in helping out as well, so perhaps this a
>good time to clarify the requirements:
>
>Which platforms: XP and 7? 32bit and 64bit? Any interest in the server
>editions?
>
>Per-machine requirements: how much HDD and RAM? Any weird stuff like
>serial ports?
>
>Connectivity: Is NAT OK, or are inbound connections required?
>
>Do maintainers need access to the hypervisor, or is it adequate to have
>a watchdog to reboot crashed slaves?
>
>Contingent on employer approval, I can donate 4 VMs (one of each 
>flavor)
>with 2GiB of RAM and tens of GB storage each, including MSDN licenses.
>The limitations are that they would be on a NAT-only subnet with no
>possibility of inbound ports, and that there would be no hypervisor
>access. However, I can provide a watchdog to deal with crashed slaves
>and a VPN could be arranged if there's a public endpoint I can direct 
>it
>to. I'm also "generally pretty accessible" although Glyph 
>unsurprisingly
>indicates that people have failed to live up to that promise in the 
>past
>:P   The offer is flexible, I'm just trying to start small to feel out
>the requirements.

Hello Michael and other prospective build slave operators :)

Twisted is ever in need of more slaves.  We can only support the 
platforms that we have slaves for, so that any developer can test their 
code on any of those platforms any time they need to.  So offers of new 
slaves are always appreciated. :)

Slave requirements are covered on 
http://twistedmatrix.com/trac/wiki/ContinuousIntegration and 
http://twistedmatrix.com/trac/wiki/ContinuousIntegration/TestSlaveConfiguration 
but I'll restate some of the important points here:

  * The slave host needs to be on all the time
  * It only needs to be able to make outgoing connections (so NAT is 
fine)
  * It doesn't need much storage, just enough for the base operating 
system
    plus a little for Twisted's dependencies and a check out of the 
Twisted
    source and some log files.
  * It doesn't need much RAM, just enough to be able to run Twisted's 
test
    suite - 768 MB is typically quite ample (I suspect it can be done 
with
    less if necessary)
  * Extra stuff like serial ports can be cool - Twisted is seriously 
lacking
    in proper test coverage for its serial port code at the moment. :)

Remote access to the machine for Twisted developers is preferred, but 
it's not strictly necessary.  If it isn't provided, it is sometimes 
necessary to have someone who does have access prod the slave in case it 
wedges (which doesn't happen very often, though more often on Windows 
than other platforms).  Other solutions to this, like the watchdog 
Michael mentioned, are also possible.

If you have some hardware (or spare ESX capacity, or even if you want to 
try to do something creative with Amazon EC2!) and this all sounds 
doable, please let us know!

Thanks Michael, and anyone else who can offer hosting for these slaves!

Jean-Paul


From exarkun at twistedmatrix.com  Thu Mar 24 11:16:37 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 24 Mar 2011 15:16:37 -0000
Subject: [Twisted-Python] AMP Client disconnecting from server on
	high	memory usage
In-Reply-To: <AANLkTim3fiJyZ5PS4oe=sTfprt5qyV0kp_KG_rGFX0RF@mail.gmail.com>
References: <AANLkTim3fiJyZ5PS4oe=sTfprt5qyV0kp_KG_rGFX0RF@mail.gmail.com>
Message-ID: <20110324151637.1992.1061386775.divmod.xquotient.41@localhost.localdomain>

On 22 Mar, 05:48 pm, danb.lists at googlemail.com wrote:
>Hey Guys,
>
>Some issue I've met recently when experimenting with AMP.
>Have created an AMP client connecting to a server and stay there
>connected (using tap services).
>The issues I am getting is that as soon as I load some more serious
>data into twisted process (about 700MB on a virtual machine with 3GB
>of ram available) the AMP Client does not longer stay connected to the
>server. The data is loaded at startup using another service (loading
>data by simulating it - adding random strings to some tuple).  I am
>using twisted 10.2 out of pypi packages.
>I should mention that with small amount of data in memory the
>connection stays stable just fine. In logs there is nothing except
>seeing the client connecting and disconnecting in the same second.
>
>Any of you know any memory configuration somewhere in the code?

There are some limits on the length of individual values you can send 
with AMP, but there shouldn't be any limits on how much memory your 
process can use overall.

Jean-Paul


From jstpierre at mecheye.net  Fri Mar 25 07:28:26 2011
From: jstpierre at mecheye.net (Jasper St. Pierre)
Date: Fri, 25 Mar 2011 07:28:26 -0400
Subject: [Twisted-Python] Deferred documentation.
In-Reply-To: <B68B4F4A-A8D5-4D23-87FC-9D0477A4BA65@twistedmatrix.com>
References: <AANLkTik0uA2NAvYjFpRqDk5XDNsgoj073nfmjF1tWHcP@mail.gmail.com>
	<AANLkTinemJ-Rdf1EC+0VDgxnvixpe5dvxCdGP5_kZA4m@mail.gmail.com>
	<B68B4F4A-A8D5-4D23-87FC-9D0477A4BA65@twistedmatrix.com>
Message-ID: <AANLkTikyzfT=tNZP5KpB30F-UxBA6A_bN3E4gPK1vHPp@mail.gmail.com>

Big wall of text incoming. If you're going to read any part of this
email, search for *IMPORTANT* and read that part.

Right now I'm stuck at creating a simple example for "deferred dependencies".

On Tue, Mar 22, 2011 at 10:03 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
> On Mar 21, 2011, at 9:30 PM, Jasper St. Pierre wrote:
>
>> On IRC, exarkun, glyph, spiv and idnar encouraged me to do a bit of
>> work on the Defer documentation.
>
> Yay! ?This documentation could definitely use some work.
>
>> I kept get confused between the?things like returning a Deferred from a
>> callback and chainDeferred,?which I found out wasn't that useful:
>
> Yeah, chainDeferred is not a great method. ?Now that Deferreds are
> non-recursive, I think it's purely worse than inserting an additional
> Deferred as a result from a callback.
>
> My eventual goal is to reduce the number of documentation about defer
> down to a near-impossible two documents. I'm hoping to merge some of
> the good stuff of the other thousands of documents.
>
> That would be absolutely great.
>
>> Thoughts so far?
>
> While I applaud your intent, these drafts look quite?rough. ?The random
> interjections and asides in
> <http://magcius.mecheye.net/twisted/DeferHowTo-Fixup.html> seem distracting
> and confusing to me. ?Trying to put myself in the mind of a newcomer, I find
> myself asking many questions which are irrelevant to what I'm trying to
> learn:
>
> What's "async"? ?Why is it hard? ?(The original document mentions
> asynchronous stuff, but in the context of full english sentences.)

Should I mention blocking with something like urllib, then showcase
another example library that uses regular callbacks?

> Where are we going shopping? ?What does shopping have to do with this?

Pop culture reference. Killed.

> What's gevent? ?Does this have something to do with Twisted?
> What's node.js? ?This looks like Javascript, what does it have to do with
> Twisted, which I thought was in Python?

Placeholders.

> (Now I've gotten distracted and I'm reading about gevent and node.js rather
> than making my Twisted application work and completing the Deferred
> tutorial. ?Epic fail. ?But, if I were to continue...)
>
> What's "this pattern"? ?Functions? ?Don't lots of programs use functions?

I guess this is a bit obvious when you have first-class-functions as a
language feature, but it's still a "pattern."

> How do they use it?  Why is it relevant?

I guess I'm stupid or slow, but it took a while for me to realize that
Deferreds were basically a standardized callback mechanism. It's not
really written anywhere on the tin: Deferred was to me a bit of an
unobvious name for what it does, and before recently I've always
associated it tightly to scheduling and the reactor.

> Why is Twisted's right hand blue? ?(Forget about being a beginner: I
> honestly don't even get this reference. ?Googling seems to suggest it has
> something to do with symptoms of heart disease and doesn't seem funny or
> relevant at all.)

Another pop culture reference. Baleeted.

> Why is the first explanation of what a Deferred is referred to as "technical
> mumbo-jumbo"? Is this really complicated? ?If I am not super good at
> programming already, should I not be reading this?

It was prefixed with "The abstract" before. I put it back to "The
abstract". To me, it seems like it's written in a way that makes sense
only if you understand what a Deferred is, but it was useful, so I
didn't rip it out. I see it as a paragraph that will make more sense
as you're reading the article, and once you go back and understand it,
there's that happy "snap" feeling as you get the concept.

> What's an "operation"? ?Does that mean 'function' or 'method' or some other
> special thing? ?It says "most operations in Twisted return a Deferred"; but
> I've called lots of functions in Twisted which returned other objects before
> reading this tutorial, or returned None. ?Were those actually Deferreds?

Yeah, I need to reword that. How about, "because Deferreds are a core
part of Twisted, a lot of functions return them"? No... that's not
good either.

> Why do I "not know where this Deferred has been"? ?Do Deferreds get dirty or
> broken somehow when I add multiple callbacks? ?Should I avoid that?

Again, I fail at humor. Removed.

> The Python examples in the current Deferred Reference are mostly runnable.
> ?The ones that aren't, should be. ?The documentation should stress that you
> can run these examples simply, and encourage the reader to download and
> experiment with them, and modify them to see what happens when they do
> things in a different order.
> Instead, the "fixup" changes the first example to rely on a fake library,
> which will raise exceptions if I try to run it, but doesn't actually explain
> that 'magiclib' isn't real. ?This isn't a huge problem in and of itself (it
> is trying to demonstrate the "wrong" way to do things, after all) but it
> sets up the expectation that the rest of the examples are fake, too, and I
> shouldn't bother to run them.

Right now, it's a placeholder for that magic library that I haven't found yet.

> I think the original document has plenty of issues, but these changes look
> like they've been written for people who already mostly understand
> Deferreds, but are having trouble catching some of the nuances, and need
> humor to diffuse their frustration and more examples to illustrate different
> usage patterns, rather than a fundamentally clearer or better explanation
> than what was offered before.

*IMPORTANT*

Are there specific changes you find that could make it harder to read
for newcomers?

The concept of Deferreds isn't hard at all, once you understand what
they are. The subtle nuances and bits of glue code that Twisted are
the things that can trip someone up, and what I'm still learning. A
small amount of very specific use cases for Deferreds happen in
real-world code and I'd like to show the support that Twisted has for
them built-in.

My goals for this document are:

  1) A list of guaranteed rules about Deferreds for reference at any time.
  2) An introduction to those rules in a format that doesn't require
knowledge of others.
  3) Showing techniques or tricks that you can play by "exploiting"
parts of those rules in the context of a contrived problem.
  4) Showing the built-in support for it.

This should help clear up my writing style a bit. I think in terms of
separating abstraction layers; I always try separate a fact or rule
from logic or a technique that can follow when you can exploit that
fact (feel free to ask the people about 'evolution' in
#python-offtopic). I also try to think of the code being very linear
when it evolves: a new rule is added, you have a problem, you can
exploit that rule with a specific technique, the technique is
standardized.

Example A:
  PROBLEM: You need to create a Deferred with a known result
  RULE: Callbacks will continue running after you've called "callback"
or "errback"
  TECHNIQUE: You can create a Deferred, call 'callback' on it and
return it, without any tricky business
  STANDARDIZED: twisted.internet.defer.success

Example B:
  PROBLEM: You need to get the results from multiple Deferreds without
blocking or too much linearity
  RULE: More than one Deferred can be created and 'run' at the same time
  TECHNIQUE: You can add a callback to a Deferred, take the result you
get and save it in a list or dictionary
  STANDARDIZED: DeferredList, gatherResults

The hardest part is creating simple, short, runnable code that
introduces: a problem that doesn't seem silly, a rule that guides
toward the solution, the technique that uses the rule to solve it. It
was much easier when I could contrive examples of a network-enabled
kitchen: recipes map pretty well to code, especially Twisted async:

  1) Melt butter in a saucepan. When the butter is finished melting,
put cocoa powder in.
  2) Meanwhile, beat egg whites and sugar, and cream of tartar.
  3) When both are done, put the chocolate mix in a Cuisinart, and
fold in the egg whites.

Here you have dependencies (butter needs to be melted before cocoa
powder), multi-tasking (you don't want to wait for the butter while
beating the eggs), and a way of knowing when things are done (so you
can fold them into the cuisinart).

( Also, this is a real recipe, ableit simplified and it makes really
easy, delicious chocolate mousse:
http://articles.latimes.com/2008/feb/13/food/la-fo-watch13recafeb13 )

> That makes sense, since based on what you've
> said on #twisted, that's basically the position you find yourself in :).
> ?This document is supposed to be a tutorial though, explaining how to use
> Deferreds to users who really have no idea what they are (despite its
> unfortunate name, "Deferred Reference" - that should probably be changed).
> One thing I think is very good about this attempted rework, though, is the
> explanation of the motivation for having Deferreds at all, before explaining
> how they work. ?In the current documentation, it's very unclear why we have
> such an object in the first place, or what the alternatives to it are.

Once I *knew* what a Deferred was, the other pieces started snapping into place.

> However, the example presented makes it seem as though you really don't
> need Deferreds, because the only problem with the single-callback approach
> is handling errors. Another major motivation is the ability to return a
> Deferred through a system with several layers, changing the return value at
> each layer by post-processing it a bit. ?(One possible example: a REST API
> that wants to deal with objects, and goes via a translation of [bytes from
> HTTP]->[JSON dicts/lists from parsing those bytes]->[domain-specific objects
> by converting JSON objects according to the particular API's spec].)

I never really thought about it before. I just realized right now,
writing this email, that things like DeferredList aren't cleanly
possible if the callback is tied to the request.

Additionally, is the showcase of this in the fixup with "Multiple
Callbacks" I did fine? The SQL to HTML example that was there before
seemed a bit contrived, and I wanted to showcase it in a runnable
snippet that required Twisted. We can't have them install a SQL
server, so I used xml.minidom instead of lxml, even though know it's
complete crap. When I'm done, I should replace the www.example.com
URLs with files hosted on the Twisted doc site. Is there a way to
point to generate a URL like that with Lore?

> However, I think the need would be better illustrated with examples that can
> actually be run than with fake examples where we assume that the user knows
> how something like gevent works. ?(Also: gevent doesn't actually work this
> way, for fetching web pages at least, so your example is wrong. ?See
> <http://www.gevent.org/intro.html#monkey-patching>.)

I've replaced them with "Library A" and "Library B" placeholders. :)

> It's pretty easy to write a fake implementation of 'fetchWebPageAsync' which
> squirrels away the callback somewhere that the example can call it later,
> and explain that with some handwaving where we say "and pretend that was
> actually some networking code fetching it". ?For that matter, the reactor is
> introduced too early in the existing docs; we should demonstrate calling the
> callback synchronously, and then only later introduce a callLater.

I ripped out all the reactor code in the starting sections of the
fixup on purpose, and showcased it with what I think is a clear
example. When introducing the techniques afterwards, I'm going to
gently ramp up the reactor code to be a bit more real-world.

> Anyway I hope this wall of text did not discourage you - I just think you
> need some clearer goals for improving specific aspects of the documentation,
> and you should write those down first?before trying to actually address them
> with more docs.

This email did exactly that. Thanks so much!

P.S. I still have a *lot* to learn. Some tutoring on the subtleties of
LoopingCall and coiterator/cooperator would be nice. I'm not going to
even bother to try to explain how inlineCallbacks works to my brain
right now. I've said enough erroneous fact in IRC. I'm going to need a
lot more help in the future.

> Thanks for your time,

I appreciate your time a lot more. You have things to do. I don't.

> -glyph
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From facundobatista at gmail.com  Fri Mar 25 18:26:32 2011
From: facundobatista at gmail.com (Facundo Batista)
Date: Fri, 25 Mar 2011 19:26:32 -0300
Subject: [Twisted-Python] Old-class-only support in manhole
Message-ID: <AANLkTin8Zt7St1r6BoX85EEreJi4kr3RSr=bHNFVUPy7@mail.gmail.com>

Hello!

Creating a test case for a change in twisted/manhole/explorer.py, I
found these lines in CRUFT_WatchyThingie.watchObject:

        if type(object) is not types.InstanceType:
            raise TypeError, "Sorry, can only place a watch on Instances."

Always talking in Python 2, if you pass an instance of an old style
class as the "object", it will be ok; but if you pass a new style
class, it will raise TypeError.

So, I wanted just to ask if this is on purpose, should I open a bug
about it, or what.

Thank you!

-- 
.? ? Facundo

Blog: http://www.taniquetil.com.ar/plog/
PyAr: http://www.python.org/ar/


From exarkun at twistedmatrix.com  Sat Mar 26 14:13:30 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 26 Mar 2011 18:13:30 -0000
Subject: [Twisted-Python] Old-class-only support in manhole
In-Reply-To: <AANLkTin8Zt7St1r6BoX85EEreJi4kr3RSr=bHNFVUPy7@mail.gmail.com>
References: <AANLkTin8Zt7St1r6BoX85EEreJi4kr3RSr=bHNFVUPy7@mail.gmail.com>
Message-ID: <20110326181330.1992.753841978.divmod.xquotient.50@localhost.localdomain>

On 25 Mar, 10:26 pm, facundobatista at gmail.com wrote:
>Hello!
>
>Creating a test case for a change in twisted/manhole/explorer.py, I
>found these lines in CRUFT_WatchyThingie.watchObject:
>
>        if type(object) is not types.InstanceType:
>            raise TypeError, "Sorry, can only place a watch on 
>Instances."
>
>Always talking in Python 2, if you pass an instance of an old style
>class as the "object", it will be ok; but if you pass a new style
>class, it will raise TypeError.
>
>So, I wanted just to ask if this is on purpose, should I open a bug
>about it, or what.

This is really old, untested code.  At the time it was written, there 
was no such thing as a new-style class.  No one bothered to update the 
code when new-style classes were introduced into the language.  And the 
last time I tried to actually use this functionality (at least two years 
ago), it didn't work anymore anyway (even for classic classes).

The idea here is cool, and I think it would be nice to support it, but 
this code is pretty gross and, as far as I know, broken.  I think we 
should think about getting rid of it.  If we go that route, then you 
should be able to ignore it for your Python 3 porting efforts.

Jean-Paul


From facundobatista at gmail.com  Sat Mar 26 14:47:41 2011
From: facundobatista at gmail.com (Facundo Batista)
Date: Sat, 26 Mar 2011 15:47:41 -0300
Subject: [Twisted-Python] Old-class-only support in manhole
In-Reply-To: <20110326181330.1992.753841978.divmod.xquotient.50@localhost.localdomain>
References: <AANLkTin8Zt7St1r6BoX85EEreJi4kr3RSr=bHNFVUPy7@mail.gmail.com>
	<20110326181330.1992.753841978.divmod.xquotient.50@localhost.localdomain>
Message-ID: <AANLkTimfn9AYygBDHjm7NK7+S8243ODj0nJCfZcQrFH-@mail.gmail.com>

On Sat, Mar 26, 2011 at 3:13 PM,  <exarkun at twistedmatrix.com> wrote:

> The idea here is cool, and I think it would be nice to support it, but
> this code is pretty gross and, as far as I know, broken. ?I think we
> should think about getting rid of it. ?If we go that route, then you
> should be able to ignore it for your Python 3 porting efforts.

However, I added a couple of tests for that code, just to test the
line I changed from 'new' to 'types' module (it was requested by the
reviewer in Trac).

-- 
.? ? Facundo

Blog: http://www.taniquetil.com.ar/plog/
PyAr: http://www.python.org/ar/


From exarkun at twistedmatrix.com  Sat Mar 26 15:39:35 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 26 Mar 2011 19:39:35 -0000
Subject: [Twisted-Python] TestCase methods names
In-Reply-To: <B2D8F536-5B45-4D6D-A813-D61B48A869E9@twistedmatrix.com>
References: <AANLkTinmwLYVS6E68G9uh1APVe4dEP78TVwJ3KpfgtsE@mail.gmail.com>
	<20110319013655.2231.453825371.divmod.xquotient.262@localhost.localdomain>
	<B2D8F536-5B45-4D6D-A813-D61B48A869E9@twistedmatrix.com>
Message-ID: <20110326193935.1992.1561837096.divmod.xquotient.52@localhost.localdomain>

On 19 Mar, 08:27 am, glyph at twistedmatrix.com wrote:
>
>On Mar 18, 2011, at 9:36 PM, exarkun at twistedmatrix.com wrote:
>>>In concrete, I say that we should:
>>>
>>>- Deprecate those names that are deprecated in Python 3 (I mean, 
>>>still
>>>provide the functionality, but with a DeprecationWarning)
>>>
>>>- Stop using them in internal code.
>>>
>>>- Fix documentation to explain all this and show the chosen methods.
>>>
>>>What do you think?
>>
>>+1 from me.
>
>Me too, except the order is wrong:

Alrighty.
>>>- Fix documentation...
>

#4989
>>>- Stop using them...
>

#4990
>>>- Deprecate those names...
>

#4991

Jean-Paul


From exarkun at twistedmatrix.com  Sun Mar 27 00:05:21 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 27 Mar 2011 04:05:21 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1301198721.87.696252286@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110327/f4547e5c/attachment.htm 

From glyph at twistedmatrix.com  Sun Mar 27 00:22:41 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 27 Mar 2011 00:22:41 -0400
Subject: [Twisted-Python] TestCase methods names
In-Reply-To: <20110326193935.1992.1561837096.divmod.xquotient.52@localhost.localdomain>
References: <AANLkTinmwLYVS6E68G9uh1APVe4dEP78TVwJ3KpfgtsE@mail.gmail.com>
	<20110319013655.2231.453825371.divmod.xquotient.262@localhost.localdomain>
	<B2D8F536-5B45-4D6D-A813-D61B48A869E9@twistedmatrix.com>
	<20110326193935.1992.1561837096.divmod.xquotient.52@localhost.localdomain>
Message-ID: <AANLkTi=+ixMDwt+d5Fj8AoVhZtKc5pW+AcRRvLHHmJ+A@mail.gmail.com>

Looks great.  Thanks for filing those!  (And even with those new tickets, -1
total open issues this week!  WTG!)

On Sat, Mar 26, 2011 at 3:39 PM, <exarkun at twistedmatrix.com> wrote:

> On 19 Mar, 08:27 am, glyph at twistedmatrix.com wrote:
> >
> >On Mar 18, 2011, at 9:36 PM, exarkun at twistedmatrix.com wrote:
> >>>In concrete, I say that we should:
> >>>
> >>>- Deprecate those names that are deprecated in Python 3 (I mean,
> >>>still
> >>>provide the functionality, but with a DeprecationWarning)
> >>>
> >>>- Stop using them in internal code.
> >>>
> >>>- Fix documentation to explain all this and show the chosen methods.
> >>>
> >>>What do you think?
> >>
> >>+1 from me.
> >
> >Me too, except the order is wrong:
>
> Alrighty.
> >>>- Fix documentation...
> >
>
> #4989
> >>>- Stop using them...
> >
>
> #4990
> >>>- Deprecate those names...
> >
>
> #4991
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110327/4d2baf54/attachment-0001.htm 

From glyph at twistedmatrix.com  Sun Mar 27 00:23:41 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 27 Mar 2011 00:23:41 -0400
Subject: [Twisted-Python] Old-class-only support in manhole
In-Reply-To: <AANLkTimfn9AYygBDHjm7NK7+S8243ODj0nJCfZcQrFH-@mail.gmail.com>
References: <AANLkTin8Zt7St1r6BoX85EEreJi4kr3RSr=bHNFVUPy7@mail.gmail.com>
	<20110326181330.1992.753841978.divmod.xquotient.50@localhost.localdomain>
	<AANLkTimfn9AYygBDHjm7NK7+S8243ODj0nJCfZcQrFH-@mail.gmail.com>
Message-ID: <AANLkTikFctb3-aPksQw2RJ1aaJS6xa2KTXW1Ue+Adq8k@mail.gmail.com>

On Sat, Mar 26, 2011 at 2:47 PM, Facundo Batista
<facundobatista at gmail.com>wrote:

> On Sat, Mar 26, 2011 at 3:13 PM,  <exarkun at twistedmatrix.com> wrote:
>
> > The idea here is cool, and I think it would be nice to support it, but
> > this code is pretty gross and, as far as I know, broken.  I think we
> > should think about getting rid of it.  If we go that route, then you
> > should be able to ignore it for your Python 3 porting efforts.
>
> However, I added a couple of tests for that code, just to test the
> line I changed from 'new' to 'types' module (it was requested by the
> reviewer in Trac).
>

It would definitely be nicer to make it work than to remove it.  You should
just feel free to consider the option of removing it if making it function
correctly is an unreasonable amount of work.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110327/48fb2032/attachment.htm 

From exarkun at twistedmatrix.com  Sun Mar 27 09:52:27 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 27 Mar 2011 13:52:27 -0000
Subject: [Twisted-Python] Old-class-only support in manhole
In-Reply-To: <AANLkTikFctb3-aPksQw2RJ1aaJS6xa2KTXW1Ue+Adq8k@mail.gmail.com>
References: <AANLkTin8Zt7St1r6BoX85EEreJi4kr3RSr=bHNFVUPy7@mail.gmail.com>
	<20110326181330.1992.753841978.divmod.xquotient.50@localhost.localdomain>
	<AANLkTimfn9AYygBDHjm7NK7+S8243ODj0nJCfZcQrFH-@mail.gmail.com>
	<AANLkTikFctb3-aPksQw2RJ1aaJS6xa2KTXW1Ue+Adq8k@mail.gmail.com>
Message-ID: <20110327135227.1992.1521143284.divmod.xquotient.60@localhost.localdomain>

On 04:23 am, glyph at twistedmatrix.com wrote:
>On Sat, Mar 26, 2011 at 2:47 PM, Facundo Batista
><facundobatista at gmail.com>wrote:
>>On Sat, Mar 26, 2011 at 3:13 PM,  <exarkun at twistedmatrix.com> wrote:
>>
>> > The idea here is cool, and I think it would be nice to support it, 
>>but
>> > this code is pretty gross and, as far as I know, broken.  I think we
>> > should think about getting rid of it.  If we go that route, then you
>> > should be able to ignore it for your Python 3 porting efforts.
>>
>>However, I added a couple of tests for that code, just to test the
>>line I changed from 'new' to 'types' module (it was requested by the
>>reviewer in Trac).
>
>It would definitely be nicer to make it work than to remove it.  You 
>should
>just feel free to consider the option of removing it if making it 
>function
>correctly is an unreasonable amount of work.

I don't know.  Skim 
http://twistedmatrix.com/trac/browser/trunk/twisted/manhole/explorer.py?rev=31448 
and see if you think it's actually fixable. :)

In any case, Facundo did write tests that cover the lines he needed to 
change for that ticket, and I applied his patch to trunk.  Still, as far 
as I know explorer doesn't actually work, and most of explorer.py is 
still untested.

Jean-Paul


From exarkun at twistedmatrix.com  Sun Mar 27 09:56:33 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 27 Mar 2011 13:56:33 -0000
Subject: [Twisted-Python] TestCase methods names
In-Reply-To: <AANLkTi=+ixMDwt+d5Fj8AoVhZtKc5pW+AcRRvLHHmJ+A@mail.gmail.com>
References: <AANLkTinmwLYVS6E68G9uh1APVe4dEP78TVwJ3KpfgtsE@mail.gmail.com>
	<20110319013655.2231.453825371.divmod.xquotient.262@localhost.localdomain>
	<B2D8F536-5B45-4D6D-A813-D61B48A869E9@twistedmatrix.com>
	<20110326193935.1992.1561837096.divmod.xquotient.52@localhost.localdomain>
	<AANLkTi=+ixMDwt+d5Fj8AoVhZtKc5pW+AcRRvLHHmJ+A@mail.gmail.com>
Message-ID: <20110327135633.1992.112579717.divmod.xquotient.62@localhost.localdomain>

On 04:22 am, glyph at twistedmatrix.com wrote:
>Looks great.  Thanks for filing those!  (And even with those new 
>tickets, -1
>total open issues this week!  WTG!)

At some point we'll run out of web2 tickets that we can close as wontfix 
(actually we may have already) and then we'll need to actually *fix* 
tickets to get the count down.

Everyone should try to fix one ticket this week so we continue the 
downward trend. :)

Jean-Paul


From glyph at twistedmatrix.com  Sun Mar 27 21:54:15 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 27 Mar 2011 21:54:15 -0400
Subject: [Twisted-Python] Deferred documentation.
In-Reply-To: <AANLkTikyzfT=tNZP5KpB30F-UxBA6A_bN3E4gPK1vHPp@mail.gmail.com>
References: <AANLkTik0uA2NAvYjFpRqDk5XDNsgoj073nfmjF1tWHcP@mail.gmail.com>
	<AANLkTinemJ-Rdf1EC+0VDgxnvixpe5dvxCdGP5_kZA4m@mail.gmail.com>
	<B68B4F4A-A8D5-4D23-87FC-9D0477A4BA65@twistedmatrix.com>
	<AANLkTikyzfT=tNZP5KpB30F-UxBA6A_bN3E4gPK1vHPp@mail.gmail.com>
Message-ID: <4C606D48-E571-46E9-B621-E9DE21E76210@twistedmatrix.com>


On Mar 25, 2011, at 7:28 AM, Jasper St. Pierre wrote:

> Big wall of text incoming. If you're going to read any part of this
> email, search for *IMPORTANT* and read that part.
> 
> Right now I'm stuck at creating a simple example for "deferred dependencies".
> 
> On Tue, Mar 22, 2011 at 10:03 PM, Glyph Lefkowitz
> <glyph at twistedmatrix.com> wrote:
>> On Mar 21, 2011, at 9:30 PM, Jasper St. Pierre wrote:
>> 
>>> On IRC, exarkun, glyph, spiv and idnar encouraged me to do a bit of
>>> work on the Defer documentation.
>> 
>> Yay!  This documentation could definitely use some work.
>> 
>>> I kept get confused between the things like returning a Deferred from a
>>> callback and chainDeferred, which I found out wasn't that useful:
>> 
>> Yeah, chainDeferred is not a great method.  Now that Deferreds are
>> non-recursive, I think it's purely worse than inserting an additional
>> Deferred as a result from a callback.
>> 
>> My eventual goal is to reduce the number of documentation about defer
>> down to a near-impossible two documents. I'm hoping to merge some of
>> the good stuff of the other thousands of documents.
>> 
>> That would be absolutely great.
>> 
>>> Thoughts so far?
>> 
>> While I applaud your intent, these drafts look quite rough.  The random
>> interjections and asides in
>> <http://magcius.mecheye.net/twisted/DeferHowTo-Fixup.html> seem distracting
>> and confusing to me.  Trying to put myself in the mind of a newcomer, I find
>> myself asking many questions which are irrelevant to what I'm trying to
>> learn:
>> 
>> What's "async"?  Why is it hard?  (The original document mentions
>> asynchronous stuff, but in the context of full english sentences.)
> 
> Should I mention blocking with something like urllib, then showcase
> another example library that uses regular callbacks?

That sounds like a good idea, actually.  Start by looking at it blocking, explain the problem with that; then demonstrate the one-callback-when-you're-done approach and explain some issues with that, and then move on to Deferreds.

>> Where are we going shopping?  What does shopping have to do with this?
> 
> Pop culture reference. Killed.

To be clear: I did get that reference, actually, and in another context it would be pretty funny :).  Just not in these docs that are supposed to be universally accessible.

>> What's gevent?  Does this have something to do with Twisted?
>> What's node.js?  This looks like Javascript, what does it have to do with
>> Twisted, which I thought was in Python?
> 
> Placeholders.

Placeholders for what, though?

>> (Now I've gotten distracted and I'm reading about gevent and node.js rather
>> than making my Twisted application work and completing the Deferred
>> tutorial.  Epic fail.  But, if I were to continue...)
>> 
>> What's "this pattern"?  Functions?  Don't lots of programs use functions?
> 
> I guess this is a bit obvious when you have first-class-functions as a
> language feature, but it's still a "pattern."

My point was that the antecedents get a little ambiguous by that point in the text.

>> How do they use it?  Why is it relevant?
> 
> I guess I'm stupid or slow, but it took a while for me to realize that
> Deferreds were basically a standardized callback mechanism. It's not
> really written anywhere on the tin: Deferred was to me a bit of an
> unobvious name for what it does, and before recently I've always
> associated it tightly to scheduling and the reactor.

No, this is a common problem.  I think it would be great to address the definition a bit more comprehensively.

>> Why is the first explanation of what a Deferred is referred to as "technical
>> mumbo-jumbo"? Is this really complicated?  If I am not super good at
>> programming already, should I not be reading this?
> 
> It was prefixed with "The abstract" before. I put it back to "The
> abstract". To me, it seems like it's written in a way that makes sense
> only if you understand what a Deferred is, but it was useful, so I
> didn't rip it out. I see it as a paragraph that will make more sense
> as you're reading the article, and once you go back and understand it,
> there's that happy "snap" feeling as you get the concept.

It does seem to be a bit disconnected from the flow of the regular text.  Perhaps it would be better if it were laid out as a paragraph, and then each sentence, or clause, were examined more closely, perhaps with an accompanying code snippet to clarify it.

>> What's an "operation"?  Does that mean 'function' or 'method' or some other
>> special thing?  It says "most operations in Twisted return a Deferred"; but
>> I've called lots of functions in Twisted which returned other objects before
>> reading this tutorial, or returned None.  Were those actually Deferreds?
> 
> Yeah, I need to reword that. How about, "because Deferreds are a core
> part of Twisted, a lot of functions return them"? No... that's not
> good either.

That's closer, but it should be something more specific than "a lot".
> 
>> Instead, the "fixup" changes the first example to rely on a fake library,
>> which will raise exceptions if I try to run it, but doesn't actually explain
>> that 'magiclib' isn't real.  This isn't a huge problem in and of itself (it
>> is trying to demonstrate the "wrong" way to do things, after all) but it
>> sets up the expectation that the rest of the examples are fake, too, and I
>> shouldn't bother to run them.
> 
> Right now, it's a placeholder for that magic library that I haven't found yet.

I can see why you might want to do that.  In the narrative flow between urllib and Deferreds, there is a missing step; you may need to fake that out.  I'm just saying that you should be very clear and say "this is a fake example, merely for the purpose of illustration".  I think that Tornado has some ugly callback-based stuff, but it would be better to leave this example fake than to try to teach users how to use that.

>> I think the original document has plenty of issues, but these changes look
>> like they've been written for people who already mostly understand
>> Deferreds, but are having trouble catching some of the nuances, and need
>> humor to diffuse their frustration and more examples to illustrate different
>> usage patterns, rather than a fundamentally clearer or better explanation
>> than what was offered before.
> 
> *IMPORTANT*
> 
> Are there specific changes you find that could make it harder to read
> for newcomers?

I thought my previous message was a list of those :-(

> The concept of Deferreds isn't hard at all, once you understand what
> they are. The subtle nuances and bits of glue code that Twisted are
> the things that can trip someone up, and what I'm still learning. A
> small amount of very specific use cases for Deferreds happen in
> real-world code and I'd like to show the support that Twisted has for
> them built-in.
> 
> My goals for this document are:
> 
>  1) A list of guaranteed rules about Deferreds for reference at any time.
>  2) An introduction to those rules in a format that doesn't require
> knowledge of others.
>  3) Showing techniques or tricks that you can play by "exploiting"
> parts of those rules in the context of a contrived problem.
>  4) Showing the built-in support for it.

My first goal for this document would be a clear, concise explanation of what a Deferred is and why you need it.

> This should help clear up my writing style a bit. I think in terms of
> separating abstraction layers; I always try separate a fact or rule
> from logic or a technique that can follow when you can exploit that
> fact (feel free to ask the people about 'evolution' in
> #python-offtopic). I also try to think of the code being very linear
> when it evolves: a new rule is added, you have a problem, you can
> exploit that rule with a specific technique, the technique is
> standardized.
> 
> Example A:
>  PROBLEM: You need to create a Deferred with a known result
>  RULE: Callbacks will continue running after you've called "callback"
> or "errback"
>  TECHNIQUE: You can create a Deferred, call 'callback' on it and
> return it, without any tricky business
>  STANDARDIZED: twisted.internet.defer.success
> 
> Example B:
>  PROBLEM: You need to get the results from multiple Deferreds without
> blocking or too much linearity
>  RULE: More than one Deferred can be created and 'run' at the same time
>  TECHNIQUE: You can add a callback to a Deferred, take the result you
> get and save it in a list or dictionary
>  STANDARDIZED: DeferredList, gatherResults

These seem more like recipes to me than introductory documentation.  Maybe they should be really close together, to try to drive the concept home, but it would be good to really get it clear in the reader's mind why they fundamentally need Deferreds, then to cover all the subtle different ways you might need them and how you could use them.

> The hardest part is creating simple, short, runnable code that
> introduces: a problem that doesn't seem silly, a rule that guides
> toward the solution, the technique that uses the rule to solve it. It
> was much easier when I could contrive examples of a network-enabled
> kitchen: recipes map pretty well to code, especially Twisted async:
> 
>  1) Melt butter in a saucepan. When the butter is finished melting,
> put cocoa powder in.
>  2) Meanwhile, beat egg whites and sugar, and cream of tartar.
>  3) When both are done, put the chocolate mix in a Cuisinart, and
> fold in the egg whites.
> 
> Here you have dependencies (butter needs to be melted before cocoa
> powder), multi-tasking (you don't want to wait for the butter while
> beating the eggs), and a way of knowing when things are done (so you
> can fold them into the cuisinart).
> 
> ( Also, this is a real recipe, ableit simplified and it makes really
> easy, delicious chocolate mousse:
> http://articles.latimes.com/2008/feb/13/food/la-fo-watch13recafeb13 )

This looks like a fantastic example.  It's comprehensible, concrete, not too long, and involves a strict metaphor for a real world situation, without mixing in any obscure technology.  I would be happy if the entire Deferred tutorial were to be structured around it.

You could also tweak it to introduce additional concepts.  For example, errbacks: "If the butter burns...".

>> That makes sense, since based on what you've
>> said on #twisted, that's basically the position you find yourself in :).
>>  This document is supposed to be a tutorial though, explaining how to use
>> Deferreds to users who really have no idea what they are (despite its
>> unfortunate name, "Deferred Reference" - that should probably be changed).
>> One thing I think is very good about this attempted rework, though, is the
>> explanation of the motivation for having Deferreds at all, before explaining
>> how they work.  In the current documentation, it's very unclear why we have
>> such an object in the first place, or what the alternatives to it are.
> 
> Once I *knew* what a Deferred was, the other pieces started snapping into place.

So it sounds like we're in agreement here: the existing document isn't clear enough about exactly what a Deferred is, it's described too formally and its uses aren't clear enough before we start diving into the technical specifics.  Any modification should strive to make it super clear what it is and why you use it.

>> However, the example presented makes it seem as though you really don't
>> need Deferreds, because the only problem with the single-callback approach
>> is handling errors. Another major motivation is the ability to return a
>> Deferred through a system with several layers, changing the return value at
>> each layer by post-processing it a bit.  (One possible example: a REST API
>> that wants to deal with objects, and goes via a translation of [bytes from
>> HTTP]->[JSON dicts/lists from parsing those bytes]->[domain-specific objects
>> by converting JSON objects according to the particular API's spec].)
> 
> I never really thought about it before. I just realized right now,
> writing this email, that things like DeferredList aren't cleanly
> possible if the callback is tied to the request.
> 
> Additionally, is the showcase of this in the fixup with "Multiple
> Callbacks" I did fine? The SQL to HTML example that was there before
> seemed a bit contrived, and I wanted to showcase it in a runnable
> snippet that required Twisted. We can't have them install a SQL
> server, so I used xml.minidom instead of lxml, even though know it's
> complete crap. When I'm done, I should replace the www.example.com
> URLs with files hosted on the Twisted doc site. Is there a way to
> point to generate a URL like that with Lore?

Use 'localhost' URLs and have the user run a 'twistd web' command line for their server; that should be simple enough :).

>> However, I think the need would be better illustrated with examples that can
>> actually be run than with fake examples where we assume that the user knows
>> how something like gevent works.  (Also: gevent doesn't actually work this
>> way, for fetching web pages at least, so your example is wrong.  See
>> <http://www.gevent.org/intro.html#monkey-patching>.)
> 
> I've replaced them with "Library A" and "Library B" placeholders. :)

I'm still not really sure you need to talk about other libraries at all, especially not this early in the document.

>> It's pretty easy to write a fake implementation of 'fetchWebPageAsync' which
>> squirrels away the callback somewhere that the example can call it later,
>> and explain that with some handwaving where we say "and pretend that was
>> actually some networking code fetching it".  For that matter, the reactor is
>> introduced too early in the existing docs; we should demonstrate calling the
>> callback synchronously, and then only later introduce a callLater.
> 
> I ripped out all the reactor code in the starting sections of the
> fixup on purpose, and showcased it with what I think is a clear
> example. When introducing the techniques afterwards, I'm going to
> gently ramp up the reactor code to be a bit more real-world.
> 
>> Anyway I hope this wall of text did not discourage you - I just think you
>> need some clearer goals for improving specific aspects of the documentation,
>> and you should write those down first before trying to actually address them
>> with more docs.
> 
> This email did exactly that. Thanks so much!
> 
> P.S. I still have a *lot* to learn. Some tutoring on the subtleties of
> LoopingCall and coiterator/cooperator would be nice. I'm not going to
> even bother to try to explain how inlineCallbacks works to my brain
> right now. I've said enough erroneous fact in IRC. I'm going to need a
> lot more help in the future.

Great.  I look forward to it :).

>> Thanks for your time,
> 
> I appreciate your time a lot more. You have things to do. I don't.

I am a pretty busy guy, but Twisted is open source and community driven: you've got just as many bugs to fix in it as I do ;-).

Please feel free to snip heavily in any replies; anywhere that you feel we've reached an agreement doesn't need more quoting.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110327/cd03bf3a/attachment-0001.htm 

From glyph at twistedmatrix.com  Sun Mar 27 21:57:28 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 27 Mar 2011 21:57:28 -0400
Subject: [Twisted-Python] prerelease preview predocumentation
In-Reply-To: <C9AA782C-1AC0-423A-9146-278E914D53D5@twistedmatrix.com>
References: <C9AA782C-1AC0-423A-9146-278E914D53D5@twistedmatrix.com>
Message-ID: <CED11EEE-3486-47FD-936C-DE453D26D1F9@twistedmatrix.com>


On Mar 23, 2011, at 9:34 PM, Glyph Lefkowitz wrote:

> <http://twistedmatrix.com/~glyph/sphinx-preview-11.0pre1/>

Anyone have comments about this?  With all the recent excitement about the docs, I thought there would be a much more active thread here!

Thoughts about whether we should link it from the front page?

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110327/7941baf6/attachment.htm 

From glyph at twistedmatrix.com  Sun Mar 27 22:03:59 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 27 Mar 2011 22:03:59 -0400
Subject: [Twisted-Python] Asynchronous context in Twisted
In-Reply-To: <AANLkTika=xCxs1qmo2jZ2tFXSYJjUGtPqOpzacHcCE53@mail.gmail.com>
References: <AANLkTikX_wkb5-jgmxQ7Y-3_ENurHS-COTOfBQN=vGX4@mail.gmail.com>
	<AANLkTika=xCxs1qmo2jZ2tFXSYJjUGtPqOpzacHcCE53@mail.gmail.com>
Message-ID: <2C9AB5BE-D156-4296-AD57-755CC43454CA@twistedmatrix.com>


On Mar 15, 2011, at 2:54 AM, Fantix King wrote:

> Thanks for replying! :)

No problem, I wish I had time for more replies, but my stack runneth over.

> --- <asynchronous break point> ---

This is completely awesome, and I have had this message sitting around waiting for me to appropriately consider it and reply.  Hopefully I'll have some time in the future though.  Can you perhaps file a ticket in the Twisted tracker for "asynchronous tracebacks that show me what has happened to a Deferred" or something like that?  I think that we've all been afraid that such a feature would have too high of a performance cost, but like the creation/invocation stacks that are used when Deferred debugging is on, we could at least make use of it in unit tests or in debug mode.

Thanks again for this awesome demonstration, and I'm sorry I haven't had more time to look at it.

> Additionally, in my scenario of a 5 years old asynchronous Twisted web application, we
> need the "request" object available throughout all code between asynchronous network
> accesses and database accesses because our global configuration system needs the
> request object. It would greatly reduce our manual work to pass through the request
> object here and there to have a context working in the asynchronous way.

Okay, _this_ sounds terrible to me.  Implicitly requiring an out-of-band parameter that is retrieved via some global variable is a maintenance nightmare.  This is one of the reasons I haven't written and published more about trying to do more with asynchronous context: I don't want idiomatic Twisted applications to become a big mess of spaghetti code which only works if your call stacks are all just so.

Availability of an implicit/shared context object was one of the things that made maintaining old Woven and Nevow code such a pain, and I consider its complete elimination in twisted.web.template a major step forward.  So let's not go down that road again :).

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110327/f29f5b61/attachment.htm 

From screwtape at froup.com  Sun Mar 27 22:09:50 2011
From: screwtape at froup.com (Tim Allen)
Date: Mon, 28 Mar 2011 13:09:50 +1100
Subject: [Twisted-Python] prerelease preview predocumentation
In-Reply-To: <CED11EEE-3486-47FD-936C-DE453D26D1F9@twistedmatrix.com>
References: <C9AA782C-1AC0-423A-9146-278E914D53D5@twistedmatrix.com>
	<CED11EEE-3486-47FD-936C-DE453D26D1F9@twistedmatrix.com>
Message-ID: <20110328020950.GE5510@boombah.thristian.org>

On Sun, Mar 27, 2011 at 09:57:28PM -0400, Glyph Lefkowitz wrote:
> On Mar 23, 2011, at 9:34 PM, Glyph Lefkowitz wrote:
> > <http://twistedmatrix.com/~glyph/sphinx-preview-11.0pre1/>
> 
> Anyone have comments about this?  With all the recent excitement about the docs, I thought there would be a much more active thread here!

I think it looks lovely - but then, even Kevin's first drafts looked
lovely, so I didn't think that was particularly comment worthy.

I hope to be able to help out with the markup and spacing nitpicking,
once whoever's responsbile says "Yes, this is good enough, it can be our
official doc system from now on."

I'm not sure if it's not finished yet, or I did something stupid, but
I tried to test out the search system by picking a word I figured would
be common in Twisted code ("addCallbacks"), and... got no hits. Even
"Twisted" gets no hits. At least, I assume that's what's going on;
there's no "No results found" message, but no results are displayed.

> Thoughts about whether we should link it from the front page?

I'm not sure if a "try our new documentation system" link should be on
the website's front page, but it's definitely the sort of thing you'd
put on a mailing-list, or blog-post, or Planet Python, or your
microblogging venue of choice. You know, just to get the message out
that the Twisted project cares about its documentation and Things are
Actually Being Done. :)


From glyph at twistedmatrix.com  Sun Mar 27 22:19:19 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 27 Mar 2011 22:19:19 -0400
Subject: [Twisted-Python] prerelease preview predocumentation
In-Reply-To: <20110328020950.GE5510@boombah.thristian.org>
References: <C9AA782C-1AC0-423A-9146-278E914D53D5@twistedmatrix.com>
	<CED11EEE-3486-47FD-936C-DE453D26D1F9@twistedmatrix.com>
	<20110328020950.GE5510@boombah.thristian.org>
Message-ID: <C7D5523D-3B22-41EC-BE59-A7C48264D362@twistedmatrix.com>

On Mar 27, 2011, at 10:09 PM, Tim Allen wrote:

> I'm not sure if it's not finished yet, or I did something stupid, but
> I tried to test out the search system by picking a word I figured would
> be common in Twisted code ("addCallbacks"), and... got no hits. Even
> "Twisted" gets no hits. At least, I assume that's what's going on;
> there's no "No results found" message, but no results are displayed.

Hrm, this does indeed seem to be broken, but I have no idea why.  And this is exactly the sort of thing I had hoped to spot before we decide to go completely live with it :).  I hope Kevin will chime in.

> it's definitely the sort of thing you'd
> put on a mailing-list, or blog-post, or Planet Python, or your
> microblogging venue of choice. You know, just to get the message out
> that the Twisted project cares about its documentation and Things are
> Actually Being Done. :)

OK, I tweeted the link :).

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110327/928a81a2/attachment.htm 

From mithrandi at mithrandi.net  Mon Mar 28 01:20:22 2011
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Mon, 28 Mar 2011 07:20:22 +0200
Subject: [Twisted-Python] prerelease preview predocumentation
In-Reply-To: <C7D5523D-3B22-41EC-BE59-A7C48264D362@twistedmatrix.com>
References: <C9AA782C-1AC0-423A-9146-278E914D53D5@twistedmatrix.com>
	<CED11EEE-3486-47FD-936C-DE453D26D1F9@twistedmatrix.com>
	<20110328020950.GE5510@boombah.thristian.org>
	<C7D5523D-3B22-41EC-BE59-A7C48264D362@twistedmatrix.com>
Message-ID: <AANLkTikLK1=Viesyyd4bhzAZBi16_XcLoowLKu9KpCTM@mail.gmail.com>

On Mon, Mar 28, 2011 at 4:19 AM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
> On Mar 27, 2011, at 10:09 PM, Tim Allen wrote:
>
> > I'm not sure if it's not finished yet, or I did something stupid, but
> > I tried to test out the search system by picking a word I figured would
> > be common in Twisted code ("addCallbacks"), and... got no hits. Even
> > "Twisted" gets no hits. At least, I assume that's what's going on;
> > there's no "No results found" message, but no results are displayed.
>
> Hrm, this does indeed seem to be broken, but I have no idea why. ?And this
> is exactly the sort of thing I had hoped to spot before we decide to go
> completely live with it :). ?I hope Kevin will chime in.

The proximate cause of the lack of search results is this error:

$.getQueryParameters is not a function
http://twistedmatrix.com/~glyph/sphinx-preview-11.0pre1/_static/doctools.js
Line 179

I think this has something to do with doctools.js making incorrect
assumptions about how jQuery is being loaded / configured, but I don't
know enough about jQuery to be sure.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar


From jstpierre at mecheye.net  Mon Mar 28 05:52:58 2011
From: jstpierre at mecheye.net (Jasper St. Pierre)
Date: Mon, 28 Mar 2011 05:52:58 -0400
Subject: [Twisted-Python] Deferred documentation.
In-Reply-To: <4C606D48-E571-46E9-B621-E9DE21E76210@twistedmatrix.com>
References: <AANLkTik0uA2NAvYjFpRqDk5XDNsgoj073nfmjF1tWHcP@mail.gmail.com>
	<AANLkTinemJ-Rdf1EC+0VDgxnvixpe5dvxCdGP5_kZA4m@mail.gmail.com>
	<B68B4F4A-A8D5-4D23-87FC-9D0477A4BA65@twistedmatrix.com>
	<AANLkTikyzfT=tNZP5KpB30F-UxBA6A_bN3E4gPK1vHPp@mail.gmail.com>
	<4C606D48-E571-46E9-B621-E9DE21E76210@twistedmatrix.com>
Message-ID: <BANLkTinf2CTo-xaowDeAh_9T79BG_dQzMA@mail.gmail.com>

OK, I'm already making a lot of these changes, I should have a new version
Up Soon (TM).

> Placeholders.
>
> Placeholders for what, though?
>

Placeholders for that magic lib, that I think I'm going to stop looking for
and say, "demonstration purposes only"

How do they use it?  Why is it relevant?

I guess I'm stupid or slow, but it took a while for me to realize that
Deferreds were basically a standardized callback mechanism. It's not
really written anywhere on the tin: Deferred was to me a bit of an
unobvious name for what it does, and before recently I've always
associated it tightly to scheduling and the reactor.

No, this is a common problem.  I think it would be great to address the
definition a bit more comprehensively.

Through example?

It does seem to be a bit disconnected from the flow of the regular text.
>  Perhaps it would be better if it were laid out as a paragraph, and then
> each sentence, or clause, were examined more closely, perhaps with an
> accompanying code snippet to clarify it.
>

As I said, I don't want to explain that snippet. I just want to put it
there, ignore it, and hopefully the user will understand more of it as the
tutorial goes on.

> Right now, it's a placeholder for that magic library that I haven't found
> yet.
>
> I can see why you might want to do that.  In the narrative flow between
> urllib and Deferreds, there is a missing step; you may need to fake that
> out.  I'm just saying that you should be very clear and say "this is a fake
> example, merely for the purpose of illustration".  I think that Tornado has
> some ugly callback-based stuff, but it would be better to leave this example
> fake than to try to teach users how to use that.
>

Will do.


> Are there specific changes you find that could make it harder to read
> for newcomers?
>
> I thought my previous message was a list of those :-(
>

Well, it was a draft, and I felt that most of my changes were already
improvements over what was there. I didn't expect it to be "harder to read
for newcomers".

> The concept of Deferreds isn't hard at all, once you understand what
> they are. The subtle nuances and bits of glue code that Twisted are
> the things that can trip someone up, and what I'm still learning. A
> small amount of very specific use cases for Deferreds happen in
> real-world code and I'd like to show the support that Twisted has for
> them built-in.
>
> My goals for this document are:
>
>  1) A list of guaranteed rules about Deferreds for reference at any time.
>  2) An introduction to those rules in a format that doesn't require
> knowledge of others.
>  3) Showing techniques or tricks that you can play by "exploiting"
> parts of those rules in the context of a contrived problem.
>  4) Showing the built-in support for it.
>
> My first goal for this document would be a clear, concise explanation of
> what a Deferred is and why you need it.
>

As I said, when you understand what a Deferred is, it's not hard. The hard
part is *how* to use it. The urllib, fake library, Deferred example is all I
really want to go over about what a deferred is, because it's not hard. I
want to: untie a lot of the code samples from the reactor, explain in terms
of the two other examples that it's fundamentally the same thing, then and
go on to the techniques like errbacks, chaining callbacks, and how
separating the callback from the request allows things like
DeferredList/gatherResults.

> This should help clear up my writing style a bit. I think in terms of
> separating abstraction layers; I always try separate a fact or rule
> from logic or a technique that can follow when you can exploit that
> fact (feel free to ask the people about 'evolution' in
> #python-offtopic). I also try to think of the code being very linear
> when it evolves: a new rule is added, you have a problem, you can
> exploit that rule with a specific technique, the technique is
> standardized.
>
> Example A:
>  PROBLEM: You need to create a Deferred with a known result
>  RULE: Callbacks will continue running after you've called "callback"
> or "errback"
>  TECHNIQUE: You can create a Deferred, call 'callback' on it and
> return it, without any tricky business
>  STANDARDIZED: twisted.internet.defer.success
>
> Example B:
>  PROBLEM: You need to get the results from multiple Deferreds without
> blocking or too much linearity
>  RULE: More than one Deferred can be created and 'run' at the same time
>  TECHNIQUE: You can add a callback to a Deferred, take the result you
> get and save it in a list or dictionary
>  STANDARDIZED: DeferredList, gatherResults
>
> These seem more like recipes to me than introductory documentation.  Maybe
> they should be really close together, to try to drive the concept home, but
> it would be good to really get it clear in the reader's mind why they *
> fundamentally* need Deferreds, then to cover all the subtle *different* ways
> you might need them and how you could use them.
>

But you don't *fundamenally* *need *Deferreds at all. The new document isn't
going to convince them that they're the right thing or wrong thing, just to
show how to get along in their new home in Deferred-ville, USA. For the
recipes, they're going to be reading real-world Twisted code, they better
know what these recipes do.

And if you can think of some subtly different ways to use them other than
the generic "something is happening in the future, I better be prepared for
it", I'll put it in the document and attempt to eat my hat.

> *snip*
>
> ( Also, this is a real recipe, ableit simplified and it makes really
> easy, delicious chocolate mousse:
> http://articles.latimes.com/2008/feb/13/food/la-fo-watch13recafeb13 )
>
>
> This looks like a fantastic example.  It's comprehensible, concrete, not
> too long, and involves a strict metaphor for a real world situation, without
> mixing in any obscure technology.  I would be happy if the entire Deferred
> tutorial were to be structured around it.
>

Except it really breaks that "runnable examples" thing. As I said before,
recipes are a very convenient match for asynchronous code, but it's not
realistic to try to map 1:1 to the other.


> You could also tweak it to introduce additional concepts.  For example,
> errbacks: "If the butter burns...".
>

If the butter burns.... what do I do? Turn off the heat, clean the pan, and
restart some more butter? What if I run out of butter? Do I need a
"goToStoreToFetchButter" function? Is that another tutorial I should write?

> Once I *knew* what a Deferred was, the other pieces started snapping into
> place.
>
> So it sounds like we're in agreement here: the existing document isn't
> clear enough about exactly what a Deferred is, it's described too formally
> and its uses aren't clear enough before we start diving into the technical
> specifics.  Any modification should strive to make it super clear what it is
> and why you use it.
>

When I started with Twisted, I used Deferreds because "everything else in
Twisted uses it". I didn't really *try* to understand it too much, either.
Most of the time I used Twisted, I tried to hack it all up with
inlineCallbacks and pretend it was urllib, and then complain in #twisted
with a code snippet when it wasn't working.

Use 'localhost' URLs and have the user run a 'twistd web' command line for
> their server; that should be simple enough :).
>

For static pages, is there anything fundamentally wrong with "
http://twistedmatrix.com/documents/11.1.0/static/pi.txt", if I can do it?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110328/07b2b17a/attachment-0001.htm 

From tom at recursivedream.com  Mon Mar 28 09:27:04 2011
From: tom at recursivedream.com (Tom Davis)
Date: Mon, 28 Mar 2011 09:27:04 -0400
Subject: [Twisted-Python] prerelease preview predocumentation
In-Reply-To: <CED11EEE-3486-47FD-936C-DE453D26D1F9@twistedmatrix.com>
References: <C9AA782C-1AC0-423A-9146-278E914D53D5@twistedmatrix.com>
	<CED11EEE-3486-47FD-936C-DE453D26D1F9@twistedmatrix.com>
Message-ID: <AANLkTimWxHEnG_VtRUu+CU4N-=MbaHo9v1SP180513=u@mail.gmail.com>

On Sun, Mar 27, 2011 at 9:57 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

>
> On Mar 23, 2011, at 9:34 PM, Glyph Lefkowitz wrote:
>
> <http://twistedmatrix.com/~glyph/sphinx-preview-11.0pre1/>
>
>
> Anyone have comments about this?  With all the recent excitement about the
> docs, I thought there would be a much more active thread here!
>
> Thoughts about whether we should link it from the front page?
>
>
I meant to get to this sooner, but my weekend was unexpectedly busy. The
docs look awesome! Aside from the common formatting error of mandatory space
after marked up text, I didn't run into anything really odd. One issue on
the index is that both "Twisted Conch" and "Twisted Core" have subsections
called "Twisted Documentation."

It's great to have everything indexed on one page with easy drill-down into
specific sections. It becomes really obvious where the hierarchy can be
optimized and how we can logically go about breaking up the various
sections.

In reply to your original post, I'm still planning to finish the trial
tutorial. I feel like an ass for not doing it this weekend, but I turned out
to be rather occupied. I'm going to make time for it early this week if it
kills me.

-glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110328/2770f977/attachment.htm 

From kevin.horn at gmail.com  Mon Mar 28 09:35:16 2011
From: kevin.horn at gmail.com (Kevin Horn)
Date: Mon, 28 Mar 2011 08:35:16 -0500
Subject: [Twisted-Python] prerelease preview predocumentation
In-Reply-To: <C7D5523D-3B22-41EC-BE59-A7C48264D362@twistedmatrix.com>
References: <C9AA782C-1AC0-423A-9146-278E914D53D5@twistedmatrix.com>
	<CED11EEE-3486-47FD-936C-DE453D26D1F9@twistedmatrix.com>
	<20110328020950.GE5510@boombah.thristian.org>
	<C7D5523D-3B22-41EC-BE59-A7C48264D362@twistedmatrix.com>
Message-ID: <AANLkTi=gOVS8PDvsH+SAL8d57oxP292FJJ+9fs0JJdZT@mail.gmail.com>

On Sun, Mar 27, 2011 at 9:19 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

> On Mar 27, 2011, at 10:09 PM, Tim Allen wrote:
>
> I'm not sure if it's not finished yet, or I did something stupid, but
> I tried to test out the search system by picking a word I figured would
> be common in Twisted code ("addCallbacks"), and... got no hits. Even
> "Twisted" gets no hits. At least, I assume that's what's going on;
> there's no "No results found" message, but no results are displayed.
>
>
> Hrm, this does indeed seem to be broken, but I have no idea why.  And this
> is exactly the sort of thing I had hoped to spot before we decide to go
> completely live with it :).  I hope Kevin will chime in.
>
>
I'm not sure what's up with that.  I had seen something similar before (like
a year ago), but thought it had been resolved with a bump in the Sphinx
version.  Or maybe it's a new problem completely...not sure.

I'll check into when I get a chance.  Probably won't be until at least
tomorrow though, or maybe Wednesday.  It's gonna be a busy week for me
(again...sigh) .

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110328/c8e6a26c/attachment.htm 

From radix at twistedmatrix.com  Mon Mar 28 10:33:11 2011
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 28 Mar 2011 09:33:11 -0500
Subject: [Twisted-Python] prerelease preview predocumentation
In-Reply-To: <CED11EEE-3486-47FD-936C-DE453D26D1F9@twistedmatrix.com>
References: <C9AA782C-1AC0-423A-9146-278E914D53D5@twistedmatrix.com>
	<CED11EEE-3486-47FD-936C-DE453D26D1F9@twistedmatrix.com>
Message-ID: <AANLkTi=F3ocwUx1WEeVs8dgf1j8VqENyvN5Ky08B-tuB@mail.gmail.com>

On Sun, Mar 27, 2011 at 8:57 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

>
> On Mar 23, 2011, at 9:34 PM, Glyph Lefkowitz wrote:
>
> <http://twistedmatrix.com/~glyph/sphinx-preview-11.0pre1/>
>
>
> Anyone have comments about this?  With all the recent excitement about the
> docs, I thought there would be a much more active thread here!
>
> Thoughts about whether we should link it from the front page?
>
>
The names of links are inconsistent in a confusing way. On the linked page,
under "Twisted Core Documentation", I see "Twisted Documentation",
"Upgrading", "Twisted code examples", etc. But when I click on "Twisted Core
Documentation", the filtered list includes the names "Developer guides",
"Upgrades between versions", and "Examples". Can these be reconciled?


-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110328/6e82e65a/attachment.htm 

From john at arbash-meinel.com  Mon Mar 28 10:44:34 2011
From: john at arbash-meinel.com (John Arbash Meinel)
Date: Mon, 28 Mar 2011 16:44:34 +0200
Subject: [Twisted-Python] Failure is O(state) vs Exception
Message-ID: <4D909ED2.1010300@arbash-meinel.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

I'm doing some performance testing of one of our Twisted applications.
And what I came across was a surprising amount of time being spent in
twisted.python.failure.Failure.__getstate__

We're doing a fair amount with exceptions. And under cProfile, I found this:

          29 0 0.4081 0.2940 twisted.python.failure:416(__getstate__)
      +34492 0 0.1141 0.0235 +twisted.python.reflect:557(safe_repr)

So under profiling, we spent 408ms in __getstate__. I then changed
Failure.cleanFailure to just 'return', and I saw a real-world
improvement of ~480ms down to about 240ms. I then restored cleanFailure,
but changed Failure.__init__ to always set 'tb=None' before it does
anything. And in that case the time went down to 180ms. (And when I dug
into it, 150ms of that is time spent waiting for an XMLRPC response.)

I'm wondering if there is a tasteful way to disable Traceback processing
in a production machine. I realize you never know when you are going to
need the state in order to figure out what went wrong. But it is costing
2-5x runtime speed. (The other answer is to write all of our code to
avoid Deferred.addErrback...)

In our case, there are many exceptions that are used as 'signaling'
rather than indicating a real failure. I suppose one option would be a
whitelist/blacklist that would indicate whether a given exception class
is worthy of a traceback. Thoughts?

John
=:->
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.10 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org/

iEYEARECAAYFAk2QntIACgkQJdeBCYSNAAPNPACeNtNUb1mifyTTSpAymcktWwQg
3UAAoLcbbADvaj2QYSxkgFnRdmmWjtPm
=SLqh
-----END PGP SIGNATURE-----


From radix at twistedmatrix.com  Mon Mar 28 11:02:15 2011
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 28 Mar 2011 10:02:15 -0500
Subject: [Twisted-Python] Failure is O(state) vs Exception
In-Reply-To: <4D909ED2.1010300@arbash-meinel.com>
References: <4D909ED2.1010300@arbash-meinel.com>
Message-ID: <AANLkTindhXEEwnLG-nO7dFCxd30hjqQ=iDEo_p2RT0Ks@mail.gmail.com>

On Mon, Mar 28, 2011 at 9:44 AM, John Arbash Meinel
<john at arbash-meinel.com>wrote:

> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
> I'm doing some performance testing of one of our Twisted applications.
> And what I came across was a surprising amount of time being spent in
> twisted.python.failure.Failure.__getstate__
>
> So under profiling, we spent 408ms in __getstate__. I then changed
> Failure.cleanFailure to just 'return', and I saw a real-world
> improvement of ~480ms down to about 240ms. I then restored cleanFailure,
> but changed Failure.__init__ to always set 'tb=None' before it does
> anything. And in that case the time went down to 180ms. (And when I dug
> into it, 150ms of that is time spent waiting for an XMLRPC response.)
>
>
Just for the record, changing cleanFailure to not do its operation is likely
to lead to big memory leaks. The second thing you did, setting self.tb to
None, makes more sense to speed things up.



> I'm wondering if there is a tasteful way to disable Traceback processing
> in a production machine. I realize you never know when you are going to
> need the state in order to figure out what went wrong. But it is costing
> 2-5x runtime speed. (The other answer is to write all of our code to
> avoid Deferred.addErrback...)
>


I hate to mention it (since it's unlikely I'd be able to work on it), but I
wonder how much a C extension would improve this without going the full step
of throwing out the debug data.

-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110328/73e41df0/attachment.htm 

From john at arbash-meinel.com  Mon Mar 28 11:11:40 2011
From: john at arbash-meinel.com (John Arbash Meinel)
Date: Mon, 28 Mar 2011 17:11:40 +0200
Subject: [Twisted-Python] Failure is O(state) vs Exception
In-Reply-To: <AANLkTindhXEEwnLG-nO7dFCxd30hjqQ=iDEo_p2RT0Ks@mail.gmail.com>
References: <4D909ED2.1010300@arbash-meinel.com>
	<AANLkTindhXEEwnLG-nO7dFCxd30hjqQ=iDEo_p2RT0Ks@mail.gmail.com>
Message-ID: <4D90A52C.6090401@arbash-meinel.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On 03/28/2011 05:02 PM, Christopher Armstrong wrote:
> On Mon, Mar 28, 2011 at 9:44 AM, John Arbash Meinel
> <john at arbash-meinel.com <mailto:john at arbash-meinel.com>> wrote:
> 
>     -----BEGIN PGP SIGNED MESSAGE-----
>     Hash: SHA1
> 
>     I'm doing some performance testing of one of our Twisted applications.
>     And what I came across was a surprising amount of time being spent in
>     twisted.python.failure.Failure.__getstate__
> 
>     So under profiling, we spent 408ms in __getstate__. I then changed
>     Failure.cleanFailure to just 'return', and I saw a real-world
>     improvement of ~480ms down to about 240ms. I then restored cleanFailure,
>     but changed Failure.__init__ to always set 'tb=None' before it does
>     anything. And in that case the time went down to 180ms. (And when I dug
>     into it, 150ms of that is time spent waiting for an XMLRPC response.)
> 
> 
> Just for the record, changing cleanFailure to not do its operation is
> likely to lead to big memory leaks. The second thing you did, setting
> self.tb to None, makes more sense to speed things up.
> 

Right. I agree that it is a better solution. I was wondering about
having a whitelist of Exception classes that aren't considered
interesting enough to keep a traceback.

>  
> 
>     I'm wondering if there is a tasteful way to disable Traceback processing
>     in a production machine. I realize you never know when you are going to
>     need the state in order to figure out what went wrong. But it is costing
>     2-5x runtime speed. (The other answer is to write all of our code to
>     avoid Deferred.addErrback...)
> 
> 
> 
> I hate to mention it (since it's unlikely I'd be able to work on it),
> but I wonder how much a C extension would improve this without going the
> full step of throwing out the debug data.

A large portion of the time spent is in "safe_repr", which presumably is
turning all 30k objects into 'str' representations. I would imagine that
a lot of this is redundant across state. Meaning that the objects up at
the top frame probably don't change very often.


I think part of the issue is that when you have an unhandled exception,
that's when you really want the traceback, but you only know that long
after the traceback is gone.

John
=:->
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.10 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org/

iEYEARECAAYFAk2QpSwACgkQJdeBCYSNAANHhwCgj3J5a6/FgV1n/O2Zwm8U9pm7
eTgAoKWemYqgHnvMwnCrQA+uFZK/+Zeo
=x5Xm
-----END PGP SIGNATURE-----


From george at ringdevelopment.com  Mon Mar 28 11:14:28 2011
From: george at ringdevelopment.com (George Pauly)
Date: Mon, 28 Mar 2011 11:14:28 -0400
Subject: [Twisted-Python] prerelease preview predocumentation
In-Reply-To: <AANLkTi=F3ocwUx1WEeVs8dgf1j8VqENyvN5Ky08B-tuB@mail.gmail.com>
References: <C9AA782C-1AC0-423A-9146-278E914D53D5@twistedmatrix.com>
	<CED11EEE-3486-47FD-936C-DE453D26D1F9@twistedmatrix.com>
	<AANLkTi=F3ocwUx1WEeVs8dgf1j8VqENyvN5Ky08B-tuB@mail.gmail.com>
Message-ID: <1301325268.9164.786.camel@localhost.localdomain>


On Sun, Mar 27, 2011 at 8:57 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
>         
>         On Mar 23, 2011, at 9:34 PM, Glyph Lefkowitz wrote:
>         
>         > <http://twistedmatrix.com/~glyph/sphinx-preview-11.0pre1/>
>         
>         
>         Anyone have comments about this?  With all the recent
>         excitement about the docs, I thought there would be a much
>         more active thread here!
>         

Looks great, the world needs this.


To make it even better:

Search caption ("Quick Search") should be "Search TwistedMatrix.com" or
"Search Twisted Documentation" or whatever the search space is/will be.


The different amounts of detail and subdivisions among TOC topics are a
little clumsy with the heirarchical UI.  For example, Twisted IM
Documentation seems to have an extra layer of indirection.  Would an
expando menu of some sort be possible?  It seems a little rough to go
through a series of menu pages.  


"This Page / Show Source" (on rhs menu) could be confusing in context
(it's not the Twisted source).  Is this for Sphinx debugging?   It
doesn't seem useful to someone seeking Twisted docs. 


Should Lore docs be removed from the menu? - this will be confusing.


"index" link goes to empty page



>         
>         Thoughts about whether we should link it from the front page?
>         
>         

Definitely link it.


hth,

George
-- 
George Pauly
Ring Development
www.ringdevelopment.com



From aljosa.mohorovic at gmail.com  Mon Mar 28 11:29:38 2011
From: aljosa.mohorovic at gmail.com (=?UTF-8?B?QWxqb8WhYSBNb2hvcm92acSH?=)
Date: Mon, 28 Mar 2011 17:29:38 +0200
Subject: [Twisted-Python] running several services from a single app
Message-ID: <AANLkTik0vHzVm+XLEuM=ueuNqBK4-0ZuMNN-nSuaXtmo@mail.gmail.com>

is it possible to run several services from a single app?
i currently have a few services/apps and would like to put them all
into a single app so i can use cx_freeze to create a single exe file
for windows to allow easy testing.

Aljosa

maybe something like this:
--------------------------------------------------------
factory1 = protocol.ServerFactory()
factory1.protocol = Protocol1
application1 = service.Application("Server1")
internet.TCPServer(8000, factory1).setServiceParent(application1)

factory2 = protocol.ServerFactory()
factory2.protocol = Protocol2
application2 = service.Application("Server2")
internet.TCPServer(9000, factory2).setServiceParent(application2)

reactor.listenTCP(8000, factory1)
reactor.listenTCP(9000, factory2)

reactor.run()
--------------------------------------------------------


From jstpierre at mecheye.net  Mon Mar 28 13:20:32 2011
From: jstpierre at mecheye.net (Jasper St. Pierre)
Date: Mon, 28 Mar 2011 13:20:32 -0400
Subject: [Twisted-Python] prerelease preview predocumentation
In-Reply-To: <AANLkTi=gOVS8PDvsH+SAL8d57oxP292FJJ+9fs0JJdZT@mail.gmail.com>
References: <C9AA782C-1AC0-423A-9146-278E914D53D5@twistedmatrix.com>
	<CED11EEE-3486-47FD-936C-DE453D26D1F9@twistedmatrix.com>
	<20110328020950.GE5510@boombah.thristian.org>
	<C7D5523D-3B22-41EC-BE59-A7C48264D362@twistedmatrix.com>
	<AANLkTi=gOVS8PDvsH+SAL8d57oxP292FJJ+9fs0JJdZT@mail.gmail.com>
Message-ID: <AANLkTim6w7oeap1OWZRke33u=he7RO-j134chjvM8hnW@mail.gmail.com>

Seems to be the Trac version of jQuery overwriting the one that docutils has
custom stuff in.

On Mon, Mar 28, 2011 at 9:35 AM, Kevin Horn <kevin.horn at gmail.com> wrote:

>
>
> On Sun, Mar 27, 2011 at 9:19 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:
>
>> On Mar 27, 2011, at 10:09 PM, Tim Allen wrote:
>>
>> I'm not sure if it's not finished yet, or I did something stupid, but
>> I tried to test out the search system by picking a word I figured would
>> be common in Twisted code ("addCallbacks"), and... got no hits. Even
>> "Twisted" gets no hits. At least, I assume that's what's going on;
>> there's no "No results found" message, but no results are displayed.
>>
>>
>> Hrm, this does indeed seem to be broken, but I have no idea why.  And this
>> is exactly the sort of thing I had hoped to spot before we decide to go
>> completely live with it :).  I hope Kevin will chime in.
>>
>>
> I'm not sure what's up with that.  I had seen something similar before
> (like a year ago), but thought it had been resolved with a bump in the
> Sphinx version.  Or maybe it's a new problem completely...not sure.
>
> I'll check into when I get a chance.  Probably won't be until at least
> tomorrow though, or maybe Wednesday.  It's gonna be a busy week for me
> (again...sigh) .
>
> Kevin Horn
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110328/0117d603/attachment.htm 

From dialtone at gmail.com  Mon Mar 28 13:42:48 2011
From: dialtone at gmail.com (Valentino Volonghi)
Date: Mon, 28 Mar 2011 10:42:48 -0700
Subject: [Twisted-Python] EuroPython Call for Presentations
Message-ID: <1459484E-B609-4813-A231-D333B23012FC@gmail.com>

Introduction
------------------------
We're looking for proposals on every aspects of Python: programming from novice to advanced levels, applications and frameworks, or how you have been involved in introducing Python into your organisation.

**First-time speakers are especially welcome**; EuroPython is a community conference and we are eager to hear about your experience. If you have friends or colleagues who have something valuable to contribute, twist their arms to tell us about it!

Please also forward this Call for Papers to anyone that you feel may be interested.

Important Deadlines
-------------------
 - April 6th, 2011: End of Call for Presentations.
 - April 11th, 2011: Start of community voting of talks.
 - April 17th, 2011: End of community voting of talks.
 - June 20th, 2011: EuroPython Conference Keynote Day.

The end of the Call for Presentations is approaching. There is now only a little more than 1 week left before we stop accepting new presentation proposals for EuroPython. Don't wait the last minute to formalize a proposal for a presentation!

Presenting at EuroPython
------------------------
We will accept a broad range of presentations, from reports on academic and commercial projects to tutorials and case studies. As long as the presentation is interesting and potentially useful to the Python community, it will be considered for inclusion in the programme.

Can you show the conference-goers something new and useful? Can you show attendees how to: use a module? Explore a Python language feature? Package an application? If so, consider submitting a talk.

Unfortunately, since EuroPython is a not-for-profit community conference, it is not possible to reward speakers (but what price on glory!). However, **speakers will benefit from a reduced conference fee**.

Talks and hands-on trainings
----------------------------
There are two different kind of presentations that you can give as a speaker at EuroPython:

 * **Regular talk**. These are standard "talk with slides", allocated in slots of 45, 60 or 90 minutes, depending on your preference and scheduling constraints. A Q&A session is held at the end of the talk.
 * **Hands-on training**. These are advanced training sessions for a smaller audience (10-20 people), to dive into the subject with all details. These sessions are 4-hours long, and audience will be strongly encouraged to bring a laptop to experiment. They should be prepared with less slides and more source code. If possible, trainers will also give a short "teaser talk" of 30 minutes the day before the training, to tease delegates into attending the training.

In the talk submission form, we assume that you intend to give a regular talk on the subject, but you will be asked if you are available for also doing a hands-on training on the very same subject.

Speakers that will give a hands-on training are rewarded with a **free entrance** to EuroPython to compensate for the longer preparation required, and might also be eligible for a speaking fee (which we cannot confirm at the moment).

Topics and goals
----------------
Specific topics for EuroPython presentations include, but are not limited to:

- Core Python
- Other implementations: Jython, IronPython, PyPy, and Stackless
- Python libraries and extensions
- Python 3.x migration
- Databases
- Documentation
- GUI Programming
- Game Programming
- Network Programming
- Open Source Python projects
- Packaging Issues
- Programming Tools
- Project Best Practices
- Embedding and Extending
- Science and Math
- Web-based Systems

Presentation goals usually are some of the following:

- Introduce audience to a new topic they are unaware of
- Introduce audience to new developments on a well-known topic
- Show audience real-world usage scenarios for a specific topic (case study)
- Dig into advanced and relatively-unknown details on a topic
- Compare different options in the market on a topic

Inappropriate language and imagery
----------------------------------

EuroPython strongly believes in building a truly diverse community, and fully supports the official Python diversity statement[1]. Given a trail of negative experiences at previous tech conferences, all partecipants will be asked to agree to a code of conduct[2] that explicitly bans verbal and physical harassment at the conference, including talks.

Speakers are thus required to avoid any kind of sexual, racist, or religious language or imagery in the talks, to avoid offending a diverse group that might be under-represented at the conference.

Consider that EuroPython is a conference with a audience from a broad geographical area which spans countries and regions with vastly different cultures. What might be considered a "funny, inoffensive joke" in a region might be really offensive (if not even unlawful) in another. If you want to add humour, references and images to your talk, avoid any choice that might be offensive of a group which is diverse from yours.

Italian Track
-------------
Italy is home to a vibrant Python community that gathers together each year at the local PyCon Italia event (up to 400 delegates!). To acknowledge this reality in EuroPython and to encourage Italian pythoneers who suffer from the language barrier, we will hold an additional Italian track at EuroPython, containg only talks delivered in Italian.

The talk submission form lets you choose the language you want to give the talk in.

If you speak Italian and want to submit a talk for this special track, please go ahead and submit the talk title and abstract directly in Italian. If instead you are available to give the talk twice during EuroPython, in both languages, please make two different submissions for the same talk: one in Italian, and one in English.


Community-based talk voting
---------------------------
This year, for the first time in EuroPython history, the talk voting process is fully public. Every partecipant gains the right to vote for talks submitted during the Call For Papers, as soon as they commit to their presence at the conference by buying a ticket. See all the details in the talk voting[3] page.

Contacts
--------
For any further question, feel free to contact the organizers at info at pycon.it. Thank you!


[1]: http://www.python.org/community/diversity/
[2]: http://ep2011.europython.eu/code-of-conduct
[3]: http://ep2011.europython.eu/talk-voting


-- 
Valentino Volonghi aka Dialtone
Now Running MacOSX 10.6
http://www.adroll.com/



From washort at twistedmatrix.com  Mon Mar 28 13:44:53 2011
From: washort at twistedmatrix.com (Allen Short)
Date: Mon, 28 Mar 2011 10:44:53 -0700
Subject: [Twisted-Python] running several services from a single app
In-Reply-To: <AANLkTik0vHzVm+XLEuM=ueuNqBK4-0ZuMNN-nSuaXtmo@mail.gmail.com>
References: <AANLkTik0vHzVm+XLEuM=ueuNqBK4-0ZuMNN-nSuaXtmo@mail.gmail.com>
Message-ID: <AANLkTikb7+2bC6FVDQ2TXvjmxrfa9_d-j8jQUY4ad5cv@mail.gmail.com>

On Mon, Mar 28, 2011 at 8:29 AM, Aljo?a Mohorovi? <
aljosa.mohorovic at gmail.com> wrote:

> is it possible to run several services from a single app?
> i currently have a few services/apps and would like to put them all
> into a single app so i can use cx_freeze to create a single exe file
> for windows to allow easy testing.
>
> Aljosa
>
> maybe something like this:
> --------------------------------------------------------
> factory1 = protocol.ServerFactory()
> factory1.protocol = Protocol1
> application1 = service.Application("Server1")
> internet.TCPServer(8000, factory1).setServiceParent(application1)
>
> factory2 = protocol.ServerFactory()
> factory2.protocol = Protocol2
> application2 = service.Application("Server2")
> internet.TCPServer(9000, factory2).setServiceParent(application2)
>
> reactor.listenTCP(8000, factory1)
> reactor.listenTCP(9000, factory2)
>
> reactor.run()



Get rid of 'application1' and 'application2' and just create a single one
named 'application' , delete the last three lines, and this code will work
just fine as a .tac file. You only need one call to 'Application' per
process, but you can have many services and many clients and servers in a
process.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110328/4b56e102/attachment.htm 

From michaelnt at gmail.com  Mon Mar 28 13:59:15 2011
From: michaelnt at gmail.com (Michael Thompson)
Date: Mon, 28 Mar 2011 18:59:15 +0100
Subject: [Twisted-Python] running several services from a single app
In-Reply-To: <AANLkTik0vHzVm+XLEuM=ueuNqBK4-0ZuMNN-nSuaXtmo@mail.gmail.com>
References: <AANLkTik0vHzVm+XLEuM=ueuNqBK4-0ZuMNN-nSuaXtmo@mail.gmail.com>
Message-ID: <AANLkTi=QQP1=VsvtB3vTM8wnd9S6c7omEEuW2rbUNCe3@mail.gmail.com>

On 28 March 2011 16:29, Aljo?a Mohorovi? <aljosa.mohorovic at gmail.com> wrote:
> is it possible to run several services from a single app?

yes see

http://twistedmatrix.com/documents/current/core/howto/application.html

and

http://twistedmatrix.com/documents/current/api/twisted.application.service.MultiService.html

Regards, Michael


From kevin.horn at gmail.com  Mon Mar 28 14:39:05 2011
From: kevin.horn at gmail.com (Kevin Horn)
Date: Mon, 28 Mar 2011 13:39:05 -0500
Subject: [Twisted-Python] prerelease preview predocumentation
In-Reply-To: <1301325268.9164.786.camel@localhost.localdomain>
References: <C9AA782C-1AC0-423A-9146-278E914D53D5@twistedmatrix.com>
	<CED11EEE-3486-47FD-936C-DE453D26D1F9@twistedmatrix.com>
	<AANLkTi=F3ocwUx1WEeVs8dgf1j8VqENyvN5Ky08B-tuB@mail.gmail.com>
	<1301325268.9164.786.camel@localhost.localdomain>
Message-ID: <AANLkTinREr0avM+2O2rMWtZH51aYvtY9a4X-dcD1TSAL@mail.gmail.com>

On Mon, Mar 28, 2011 at 10:14 AM, George Pauly
<george at ringdevelopment.com>wrote:

>
> On Sun, Mar 27, 2011 at 8:57 PM, Glyph Lefkowitz
> <glyph at twistedmatrix.com> wrote:
> >
> >         On Mar 23, 2011, at 9:34 PM, Glyph Lefkowitz wrote:
> >
> >         > <http://twistedmatrix.com/~glyph/sphinx-preview-11.0pre1/>
> >
> >
> >         Anyone have comments about this?  With all the recent
> >         excitement about the docs, I thought there would be a much
> >         more active thread here!
> >
>
> Looks great, the world needs this.
>
>
> To make it even better:
>
> Search caption ("Quick Search") should be "Search TwistedMatrix.com" or
> "Search Twisted Documentation" or whatever the search space is/will be.
>

Noted.  This is a good idea.


> The different amounts of detail and subdivisions among TOC topics are a
> little clumsy with the heirarchical UI.  For example, Twisted IM
> Documentation seems to have an extra layer of indirection.  Would an
> expando menu of some sort be possible?  It seems a little rough to go
> through a series of menu pages.
>

I'm not sure exactly what you mean here.  I agree that the naming of
documents is a bit confusing, and intend to address that following the
actual conversion.  This has to do with the fact that in some places Sphinx
is picking up the actual name of the document, and in other places it's
picking up the link text from what was previously an <a> tag in the Lore
sources.  Also some documents are just poorly named or have outdated names.
(e.g. Twisted IM rather than Twisted Words).

Can you clarify what you meant by "an extra layer of indirection?"

I think an "expando" menu is a bad idea, assuming I understand what you mean
here.  Or rather, I think that there are some structural issues which need
to be solved, and an "expando" menu wouldn't solve them.


> "This Page / Show Source" (on rhs menu) could be confusing in context
> (it's not the Twisted source).  Is this for Sphinx debugging?   It
> doesn't seem useful to someone seeking Twisted docs.
>

This is easily removed with a config setting in the Sphinx config file,
though I find it helpful when writing docs.  Most Sphinx sites seem to leave
it in, though if others find it confusing we can remove it.

Alternatively, perhaps we could just change the link text to clarify it a
bit. Something like "show Sphinx source?" "Show ReST source?"


> Should Lore docs be removed from the menu? - this will be confusing.
>

The Lore docs will disappear when the Lore docs (and Lore itself) are
removed from trunk.


> "index" link goes to empty page
>

The index is generated by default mostly from docstrings.  Twisted is not
currently using Sphinx's docstring utilities, as all of Twisted's docstrings
use epydoc markup, rather than Restructured Text.

There are several ways we can go with this, but I consider it low priority,
since the current docs have nothing like an index at present.


> >
> >         Thoughts about whether we should link it from the front page?
> >
> >
>
> Definitely link it.
>
>
> hth,
>
> George
> --
> George Pauly
> Ring Development
> www.ringdevelopment.com
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110328/ef0050f8/attachment-0001.htm 

From jstpierre at mecheye.net  Mon Mar 28 21:14:04 2011
From: jstpierre at mecheye.net (Jasper St. Pierre)
Date: Mon, 28 Mar 2011 21:14:04 -0400
Subject: [Twisted-Python] Deferred documentation.
In-Reply-To: <BANLkTinf2CTo-xaowDeAh_9T79BG_dQzMA@mail.gmail.com>
References: <AANLkTik0uA2NAvYjFpRqDk5XDNsgoj073nfmjF1tWHcP@mail.gmail.com>
	<AANLkTinemJ-Rdf1EC+0VDgxnvixpe5dvxCdGP5_kZA4m@mail.gmail.com>
	<B68B4F4A-A8D5-4D23-87FC-9D0477A4BA65@twistedmatrix.com>
	<AANLkTikyzfT=tNZP5KpB30F-UxBA6A_bN3E4gPK1vHPp@mail.gmail.com>
	<4C606D48-E571-46E9-B621-E9DE21E76210@twistedmatrix.com>
	<BANLkTinf2CTo-xaowDeAh_9T79BG_dQzMA@mail.gmail.com>
Message-ID: <BANLkTimHJNeyyREekMa2t_fKutpP0eOi5Q@mail.gmail.com>

I'm tired. Link dump:

http://magcius.mecheye.net/twisted/DeferHowTo-Fixup.html
http://magcius.mecheye.net/twisted/DeferHowTo-Fixup.lore

oldies are at

http://magcius.mecheye.net/twisted/DeferHowTo-Fixup-v1.html
http://magcius.mecheye.net/twisted/DeferHowTo-Fixup-v1.lore

comments, etc.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110328/a1f8943d/attachment.htm 

From jstpierre at mecheye.net  Mon Mar 28 21:17:28 2011
From: jstpierre at mecheye.net (Jasper St. Pierre)
Date: Mon, 28 Mar 2011 21:17:28 -0400
Subject: [Twisted-Python] Deferred documentation.
In-Reply-To: <BANLkTimHJNeyyREekMa2t_fKutpP0eOi5Q@mail.gmail.com>
References: <AANLkTik0uA2NAvYjFpRqDk5XDNsgoj073nfmjF1tWHcP@mail.gmail.com>
	<AANLkTinemJ-Rdf1EC+0VDgxnvixpe5dvxCdGP5_kZA4m@mail.gmail.com>
	<B68B4F4A-A8D5-4D23-87FC-9D0477A4BA65@twistedmatrix.com>
	<AANLkTikyzfT=tNZP5KpB30F-UxBA6A_bN3E4gPK1vHPp@mail.gmail.com>
	<4C606D48-E571-46E9-B621-E9DE21E76210@twistedmatrix.com>
	<BANLkTinf2CTo-xaowDeAh_9T79BG_dQzMA@mail.gmail.com>
	<BANLkTimHJNeyyREekMa2t_fKutpP0eOi5Q@mail.gmail.com>
Message-ID: <BANLkTim0Wei04zhYQU3B9sfuSiq5s07k6A@mail.gmail.com>

I'm really tired... the 'demo server' program is at

http://p.mecheye.net/deferred-server.py/0

I coded it up in like 10 minutes. Definition of quality right there, yo.

Hopefully no more noise tonight.

On Mon, Mar 28, 2011 at 9:14 PM, Jasper St. Pierre <jstpierre at mecheye.net>wrote:

> I'm tired. Link dump:
>
>
> http://magcius.mecheye.net/twisted/DeferHowTo-Fixup.html
> http://magcius.mecheye.net/twisted/DeferHowTo-Fixup.lore
>
> oldies are at
>
> http://magcius.mecheye.net/twisted/DeferHowTo-Fixup-v1.html
> http://magcius.mecheye.net/twisted/DeferHowTo-Fixup-v1.lore
>
> comments, etc.
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110328/d74c6d36/attachment.htm 

From albert.brandl at weiermayer.com  Tue Mar 29 03:10:21 2011
From: albert.brandl at weiermayer.com (Albert Brandl)
Date: Tue, 29 Mar 2011 09:10:21 +0200
Subject: [Twisted-Python] prerelease preview predocumentation
In-Reply-To: <AANLkTimWxHEnG_VtRUu+CU4N-=MbaHo9v1SP180513=u@mail.gmail.com>
References: <C9AA782C-1AC0-423A-9146-278E914D53D5@twistedmatrix.com>
	<CED11EEE-3486-47FD-936C-DE453D26D1F9@twistedmatrix.com>
	<AANLkTimWxHEnG_VtRUu+CU4N-=MbaHo9v1SP180513=u@mail.gmail.com>
Message-ID: <20110329071021.GA2194@weiermayer.com>

On Mon, Mar 28, 2011 at 09:27:04AM -0400, Tom Davis wrote:
> 
> It's great to have everything indexed on one page with easy drill-down 
> into specific sections. It becomes really obvious where the hierarchy 
> can be optimized and how we can logically go about breaking up the 
> various sections.

This is right. But I was confused by the fact that the first-level items 
in the list ("Twisted Conch Documentation", "Twisted Core Documentation", 
etc.) link to pages that _again_ present links to the second-level items.
Adding to my confusion was the fact that the links on the main page have
different names from the ones on the subpages.

Best regards,
-- 
Albert Brandl
Weiermayer Solutions GmbH      | Abteistra?e 12, A-4813 Altm?nster
phone: +43 (0) 720 70 30 14    | fax: +43 (0) 7612 20 3 56
web: http://www.weiermayer.com


From aljosa.mohorovic at gmail.com  Tue Mar 29 03:46:11 2011
From: aljosa.mohorovic at gmail.com (=?UTF-8?B?QWxqb8WhYSBNb2hvcm92acSH?=)
Date: Tue, 29 Mar 2011 09:46:11 +0200
Subject: [Twisted-Python] running several services from a single app
In-Reply-To: <AANLkTikb7+2bC6FVDQ2TXvjmxrfa9_d-j8jQUY4ad5cv@mail.gmail.com>
References: <AANLkTik0vHzVm+XLEuM=ueuNqBK4-0ZuMNN-nSuaXtmo@mail.gmail.com>
	<AANLkTikb7+2bC6FVDQ2TXvjmxrfa9_d-j8jQUY4ad5cv@mail.gmail.com>
Message-ID: <AANLkTi=_SPVDpJVx2rtx+9DmWiCTD69N4g_3_RP5OrMX@mail.gmail.com>

On Mon, Mar 28, 2011 at 7:44 PM, Allen Short <washort at twistedmatrix.com> wrote:
> Get rid of 'application1' and 'application2' and just create a single one
> named 'application' , delete the last three lines, and this code will work
> just fine as a .tac file. You only need one call to 'Application' per

is it possible to setup this without .tac file?
i don't know howto create an exe file using cx_freeze from .tac file.

is there a way to tell reactor to run application and services defined
so i can skip .tac file and just execute python file?
maybe something similar to this:
----------------------------------------
application = service.Application("Services")

factory1 = protocol.ServerFactory()
factory1.protocol = Protocol1
internet.TCPServer(8000, factory1).setServiceParent(application)

factory2 = protocol.ServerFactory()
factory2.protocol = Protocol2
internet.TCPServer(9000, factory2).setServiceParent(application)

# howto make reactor do something like this:
reactor.run(application)
----------------------------------------


From dev at vokoda.com  Tue Mar 29 08:56:26 2011
From: dev at vokoda.com (Peter Hogg)
Date: Tue, 29 Mar 2011 13:56:26 +0100
Subject: [Twisted-Python] Deferred documentation.
In-Reply-To: <BANLkTim0Wei04zhYQU3B9sfuSiq5s07k6A@mail.gmail.com>
References: <AANLkTik0uA2NAvYjFpRqDk5XDNsgoj073nfmjF1tWHcP@mail.gmail.com>	<AANLkTinemJ-Rdf1EC+0VDgxnvixpe5dvxCdGP5_kZA4m@mail.gmail.com>	<B68B4F4A-A8D5-4D23-87FC-9D0477A4BA65@twistedmatrix.com>	<AANLkTikyzfT=tNZP5KpB30F-UxBA6A_bN3E4gPK1vHPp@mail.gmail.com>	<4C606D48-E571-46E9-B621-E9DE21E76210@twistedmatrix.com>	<BANLkTinf2CTo-xaowDeAh_9T79BG_dQzMA@mail.gmail.com>	<BANLkTimHJNeyyREekMa2t_fKutpP0eOi5Q@mail.gmail.com>
	<BANLkTim0Wei04zhYQU3B9sfuSiq5s07k6A@mail.gmail.com>
Message-ID: <4D91D6FA.80509@vokoda.com>

I haven't been following the thread, but just wanted to mention 
something that caught me out when I was learning to use deferreds.

Both the old deferred documentation and your fix-up fail to mention 
addCallbacks() until near the end, when in practice I find 
addCallbacks() to be much more useful than addCallback(). The diagram 
near the top demonstrating the deferred process also implies the use of 
addCallbacks(), even though prior to this only addCallback() and 
addErrback() have been mentioned. This confused me into thinking a 
consecutive addCallback().addErrback() would register a callback and an 
errback at the same point in the processing chain.

Apart from this point I found the old documentation very clear. If you 
really want the idiots guide I think you need animated diagrams, or 
something, but I don't see that happening.

Rgds,
vokoda

Jasper St. Pierre wrote:
> Glyph Lefkowitz 


From jstpierre at mecheye.net  Tue Mar 29 09:24:27 2011
From: jstpierre at mecheye.net (Jasper St. Pierre)
Date: Tue, 29 Mar 2011 09:24:27 -0400
Subject: [Twisted-Python] Deferred documentation.
In-Reply-To: <4D91D6FA.80509@vokoda.com>
References: <AANLkTik0uA2NAvYjFpRqDk5XDNsgoj073nfmjF1tWHcP@mail.gmail.com>
	<AANLkTinemJ-Rdf1EC+0VDgxnvixpe5dvxCdGP5_kZA4m@mail.gmail.com>
	<B68B4F4A-A8D5-4D23-87FC-9D0477A4BA65@twistedmatrix.com>
	<AANLkTikyzfT=tNZP5KpB30F-UxBA6A_bN3E4gPK1vHPp@mail.gmail.com>
	<4C606D48-E571-46E9-B621-E9DE21E76210@twistedmatrix.com>
	<BANLkTinf2CTo-xaowDeAh_9T79BG_dQzMA@mail.gmail.com>
	<BANLkTimHJNeyyREekMa2t_fKutpP0eOi5Q@mail.gmail.com>
	<BANLkTim0Wei04zhYQU3B9sfuSiq5s07k6A@mail.gmail.com>
	<4D91D6FA.80509@vokoda.com>
Message-ID: <BANLkTimYXoKioCQbSCxk=8_z+He1_Uof8w@mail.gmail.com>

Good catch, I really should mention that...

On Tue, Mar 29, 2011 at 8:56 AM, Peter Hogg <dev at vokoda.com> wrote:

> I haven't been following the thread, but just wanted to mention
> something that caught me out when I was learning to use deferreds.
>
> Both the old deferred documentation and your fix-up fail to mention
> addCallbacks() until near the end, when in practice I find
> addCallbacks() to be much more useful than addCallback(). The diagram
> near the top demonstrating the deferred process also implies the use of
> addCallbacks(), even though prior to this only addCallback() and
> addErrback() have been mentioned. This confused me into thinking a
> consecutive addCallback().addErrback() would register a callback and an
> errback at the same point in the processing chain.
>
> Apart from this point I found the old documentation very clear. If you
> really want the idiots guide I think you need animated diagrams, or
> something, but I don't see that happening.
>
> Rgds,
> vokoda
>
> Jasper St. Pierre wrote:
> > Glyph Lefkowitz
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110329/418f387b/attachment.htm 

From radix at twistedmatrix.com  Tue Mar 29 11:08:14 2011
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 29 Mar 2011 10:08:14 -0500
Subject: [Twisted-Python] Deferred documentation.
In-Reply-To: <4D91D6FA.80509@vokoda.com>
References: <AANLkTik0uA2NAvYjFpRqDk5XDNsgoj073nfmjF1tWHcP@mail.gmail.com>
	<AANLkTinemJ-Rdf1EC+0VDgxnvixpe5dvxCdGP5_kZA4m@mail.gmail.com>
	<B68B4F4A-A8D5-4D23-87FC-9D0477A4BA65@twistedmatrix.com>
	<AANLkTikyzfT=tNZP5KpB30F-UxBA6A_bN3E4gPK1vHPp@mail.gmail.com>
	<4C606D48-E571-46E9-B621-E9DE21E76210@twistedmatrix.com>
	<BANLkTinf2CTo-xaowDeAh_9T79BG_dQzMA@mail.gmail.com>
	<BANLkTimHJNeyyREekMa2t_fKutpP0eOi5Q@mail.gmail.com>
	<BANLkTim0Wei04zhYQU3B9sfuSiq5s07k6A@mail.gmail.com>
	<4D91D6FA.80509@vokoda.com>
Message-ID: <AANLkTi=7Pb_h5qKbgdX3PPCx=bj0cbYZiu6Ntj4GD5yz@mail.gmail.com>

On Tue, Mar 29, 2011 at 7:56 AM, Peter Hogg <dev at vokoda.com> wrote:

> I haven't been following the thread, but just wanted to mention
> something that caught me out when I was learning to use deferreds.
>
> Both the old deferred documentation and your fix-up fail to mention
> addCallbacks() until near the end, when in practice I find
> addCallbacks() to be much more useful than addCallback(). The diagram
> near the top demonstrating the deferred process also implies the use of
> addCallbacks(), even though prior to this only addCallback() and
> addErrback() have been mentioned. This confused me into thinking a
> consecutive addCallback().addErrback() would register a callback and an
> errback at the same point in the processing chain.
>
>

I probably use addCallbacks once for every 30-100 addCallback or addErrback
calls I do (counted by lines of code, not times they're executed). But
that's just an off-the-cuff estimate.

-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110329/df9ec259/attachment.htm 

From kevin.horn at gmail.com  Tue Mar 29 11:22:08 2011
From: kevin.horn at gmail.com (Kevin Horn)
Date: Tue, 29 Mar 2011 10:22:08 -0500
Subject: [Twisted-Python] running several services from a single app
In-Reply-To: <AANLkTi=_SPVDpJVx2rtx+9DmWiCTD69N4g_3_RP5OrMX@mail.gmail.com>
References: <AANLkTik0vHzVm+XLEuM=ueuNqBK4-0ZuMNN-nSuaXtmo@mail.gmail.com>
	<AANLkTikb7+2bC6FVDQ2TXvjmxrfa9_d-j8jQUY4ad5cv@mail.gmail.com>
	<AANLkTi=_SPVDpJVx2rtx+9DmWiCTD69N4g_3_RP5OrMX@mail.gmail.com>
Message-ID: <AANLkTi=T+kbASO9Og6hgB7FXGg2TWOnQgFbAqAHW9fYv@mail.gmail.com>

On Tue, Mar 29, 2011 at 2:46 AM, Aljo?a Mohorovi? <
aljosa.mohorovic at gmail.com> wrote:

> On Mon, Mar 28, 2011 at 7:44 PM, Allen Short <washort at twistedmatrix.com>
> wrote:
> > Get rid of 'application1' and 'application2' and just create a single one
> > named 'application' , delete the last three lines, and this code will
> work
> > just fine as a .tac file. You only need one call to 'Application' per
>
> is it possible to setup this without .tac file?
> i don't know howto create an exe file using cx_freeze from .tac file.
>
> is there a way to tell reactor to run application and services defined
> so i can skip .tac file and just execute python file?
> maybe something similar to this:
> ----------------------------------------
> application = service.Application("Services")
>
> factory1 = protocol.ServerFactory()
> factory1.protocol = Protocol1
> internet.TCPServer(8000, factory1).setServiceParent(application)
>
> factory2 = protocol.ServerFactory()
> factory2.protocol = Protocol2
> internet.TCPServer(9000, factory2).setServiceParent(application)
>
> # howto make reactor do something like this:
> reactor.run(application)
> ----------------------------------------
>
>
Sadly it's undocumented, but you're probably looking for:
http://twistedmatrix.com/documents/current/api/twisted.application.app.html#startApplication

The only examples I can find of it's use are by people who want to start a
"tac" type application as a WinNT Service, but I think it would work for
your purposes as well.

Here's an example:
http://foobar.lu/wp/2007/06/27/runnning-a-twisted-application-as-windows-service/

You can see the application object is created as normal (though in the
example it happens in a different file and is imported), then
startApplication is called, then reactor.run().

Good Luck!

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110329/f9a774de/attachment-0001.htm 

From screwtape at froup.com  Tue Mar 29 18:56:51 2011
From: screwtape at froup.com (Tim Allen)
Date: Wed, 30 Mar 2011 09:56:51 +1100
Subject: [Twisted-Python] running several services from a single app
In-Reply-To: <AANLkTi=_SPVDpJVx2rtx+9DmWiCTD69N4g_3_RP5OrMX@mail.gmail.com>
References: <AANLkTik0vHzVm+XLEuM=ueuNqBK4-0ZuMNN-nSuaXtmo@mail.gmail.com>
	<AANLkTikb7+2bC6FVDQ2TXvjmxrfa9_d-j8jQUY4ad5cv@mail.gmail.com>
	<AANLkTi=_SPVDpJVx2rtx+9DmWiCTD69N4g_3_RP5OrMX@mail.gmail.com>
Message-ID: <20110329225651.GF5510@boombah.thristian.org>

On Tue, Mar 29, 2011 at 09:46:11AM +0200, Aljo?a Mohorovi? wrote:
> is there a way to tell reactor to run application and services defined
> so i can skip .tac file and just execute python file?
> maybe something similar to this:
> ----------------------------------------
> application = service.Application("Services")
> 
> factory1 = protocol.ServerFactory()
> factory1.protocol = Protocol1
> internet.TCPServer(8000, factory1).setServiceParent(application)
> 
> factory2 = protocol.ServerFactory()
> factory2.protocol = Protocol2
> internet.TCPServer(9000, factory2).setServiceParent(application)
> 
> # howto make reactor do something like this:
> reactor.run(application)
> ----------------------------------------

It's not clear from your message whether you're using
internet.TCPServer() in your actual production code, or if that's just
something you picked to make a simple example for the mailing-list.

If you really are using internet.TCPServer(), you can just skip the
Application object entirely, and call reactor.listenTCP() instead of
internet.TCPServer(), then reactor.run() at the bottom.

If you've written your own Server or Application subclass that you want
to run, Kevin Horn's answer is probably the one you want.

Tim.


From mithrandi at mithrandi.net  Wed Mar 30 03:55:19 2011
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Wed, 30 Mar 2011 09:55:19 +0200
Subject: [Twisted-Python] Deferred documentation.
In-Reply-To: <AANLkTi=7Pb_h5qKbgdX3PPCx=bj0cbYZiu6Ntj4GD5yz@mail.gmail.com>
References: <AANLkTik0uA2NAvYjFpRqDk5XDNsgoj073nfmjF1tWHcP@mail.gmail.com>
	<AANLkTinemJ-Rdf1EC+0VDgxnvixpe5dvxCdGP5_kZA4m@mail.gmail.com>
	<B68B4F4A-A8D5-4D23-87FC-9D0477A4BA65@twistedmatrix.com>
	<AANLkTikyzfT=tNZP5KpB30F-UxBA6A_bN3E4gPK1vHPp@mail.gmail.com>
	<4C606D48-E571-46E9-B621-E9DE21E76210@twistedmatrix.com>
	<BANLkTinf2CTo-xaowDeAh_9T79BG_dQzMA@mail.gmail.com>
	<BANLkTimHJNeyyREekMa2t_fKutpP0eOi5Q@mail.gmail.com>
	<BANLkTim0Wei04zhYQU3B9sfuSiq5s07k6A@mail.gmail.com>
	<4D91D6FA.80509@vokoda.com>
	<AANLkTi=7Pb_h5qKbgdX3PPCx=bj0cbYZiu6Ntj4GD5yz@mail.gmail.com>
Message-ID: <AANLkTiktUNuDN_gCeROfNr6eAG-q2FeEqJ_L19OnFO3_@mail.gmail.com>

On Tue, Mar 29, 2011 at 5:08 PM, Christopher Armstrong
<radix at twistedmatrix.com> wrote:
> I probably use addCallbacks once for every 30-100 addCallback or addErrback
> calls I do (counted by lines of code, not times they're executed). But
> that's just an off-the-cuff estimate.

For interest's sake, I just ran the numbers on my largest codebase (a
proprietary application, sorry); ratio of addCallbacks to (addCallback
+ addErrback) is around 0.05.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar


From andrew at bemusement.org  Wed Mar 30 04:39:50 2011
From: andrew at bemusement.org (Andrew Bennetts)
Date: Wed, 30 Mar 2011 19:39:50 +1100
Subject: [Twisted-Python] Failure is O(state) vs Exception
In-Reply-To: <4D90A52C.6090401@arbash-meinel.com>
References: <4D909ED2.1010300@arbash-meinel.com>
	<AANLkTindhXEEwnLG-nO7dFCxd30hjqQ=iDEo_p2RT0Ks@mail.gmail.com>
	<4D90A52C.6090401@arbash-meinel.com>
Message-ID: <20110330083950.GD2777@aihal.home.puzzling.org>

John Arbash Meinel wrote:
[?]
> > Just for the record, changing cleanFailure to not do its operation is
> > likely to lead to big memory leaks. The second thing you did, setting
> > self.tb to None, makes more sense to speed things up.
> 
> Right. I agree that it is a better solution. I was wondering about
> having a whitelist of Exception classes that aren't considered
> interesting enough to keep a traceback.

I've filed <http://twistedmatrix.com/trac/ticket/5011> about this issue,
and I have a patch that takes an alternative approach: don't capture
tracebacks when Deferred callbacks raise exceptions unless
defer.setDebugging(True) has been called.

Another possibility might be to stop Failure from capturing all the
frame details (i.e. the locals and globals) by default (or at least when
invoked by Deferred._runCallbacks), as that's probably the bulk of the
expense and would be very rarely used.

-Andrew.



From john at arbash-meinel.com  Wed Mar 30 04:50:40 2011
From: john at arbash-meinel.com (John Arbash Meinel)
Date: Wed, 30 Mar 2011 10:50:40 +0200
Subject: [Twisted-Python] Failure is O(state) vs Exception
In-Reply-To: <20110330083950.GD2777@aihal.home.puzzling.org>
References: <4D909ED2.1010300@arbash-meinel.com>	<AANLkTindhXEEwnLG-nO7dFCxd30hjqQ=iDEo_p2RT0Ks@mail.gmail.com>	<4D90A52C.6090401@arbash-meinel.com>
	<20110330083950.GD2777@aihal.home.puzzling.org>
Message-ID: <4D92EEE0.2050305@arbash-meinel.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On 03/30/2011 10:39 AM, Andrew Bennetts wrote:
> John Arbash Meinel wrote:
> [?]
>>> Just for the record, changing cleanFailure to not do its operation is
>>> likely to lead to big memory leaks. The second thing you did, setting
>>> self.tb to None, makes more sense to speed things up.
>>
>> Right. I agree that it is a better solution. I was wondering about
>> having a whitelist of Exception classes that aren't considered
>> interesting enough to keep a traceback.
> 
> I've filed <http://twistedmatrix.com/trac/ticket/5011> about this issue,
> and I have a patch that takes an alternative approach: don't capture
> tracebacks when Deferred callbacks raise exceptions unless
> defer.setDebugging(True) has been called.
> 
> Another possibility might be to stop Failure from capturing all the
> frame details (i.e. the locals and globals) by default (or at least when
> invoked by Deferred._runCallbacks), as that's probably the bulk of the
> expense and would be very rarely used.
> 
> -Andrew.

I think walking the frames and copying the dicts is also expensive. That
is what the bug you linked to me was about. (First, walking everything
and using __dict__.copy() was a bit expensive, and second that the
safe_repr() calls were turning 1GB strings into a new 1GB+ string.)

The one other step that I think we need, is that 'maybeDeferred' also
always traps into a Failure object, and we'd want that to check
Deferred.debug first.

I do wonder if Failure should just be checking Deferred.debug before
automatically including a traceback. I'm not really sure about logical
layering of twisted modules, though. Certainly 'twisted.python.failure'
seems a lower layer than 'twisted.internet.defer'.

John
=:->
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.10 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org/

iEYEARECAAYFAk2S7uAACgkQJdeBCYSNAAPS9ACfdGmt9td2jqOFDZYY6mJy/6DN
UiMAnRF0w9pID0WMP0MMGwh9LSQN9RqM
=g3j7
-----END PGP SIGNATURE-----


From andrew at bemusement.org  Wed Mar 30 05:14:11 2011
From: andrew at bemusement.org (Andrew Bennetts)
Date: Wed, 30 Mar 2011 20:14:11 +1100
Subject: [Twisted-Python] Failure is O(state) vs Exception
In-Reply-To: <4D92EEE0.2050305@arbash-meinel.com>
References: <4D909ED2.1010300@arbash-meinel.com>
	<AANLkTindhXEEwnLG-nO7dFCxd30hjqQ=iDEo_p2RT0Ks@mail.gmail.com>
	<4D90A52C.6090401@arbash-meinel.com>
	<20110330083950.GD2777@aihal.home.puzzling.org>
	<4D92EEE0.2050305@arbash-meinel.com>
Message-ID: <20110330091411.GE2777@aihal.home.puzzling.org>

John Arbash Meinel wrote:
[?]
> I think walking the frames and copying the dicts is also expensive. That
> is what the bug you linked to me was about. (First, walking everything
> and using __dict__.copy() was a bit expensive, and second that the
> safe_repr() calls were turning 1GB strings into a new 1GB+ string.)

Well, if we take my proposal to not (by default at least) capture the
frames in the first place this isn't an issue is it?  The only other
copy done in Failure is the copy of self.__dict__ in __getstate__, which
is just a shallow copy of one dict, so fairly cheap.

> The one other step that I think we need, is that 'maybeDeferred' also
> always traps into a Failure object, and we'd want that to check
> Deferred.debug first.

Good point!

> I do wonder if Failure should just be checking Deferred.debug before
> automatically including a traceback. I'm not really sure about logical
> layering of twisted modules, though. Certainly 'twisted.python.failure'
> seems a lower layer than 'twisted.internet.defer'.

Yes, checking Deferred.debug in twisted.python.failure would be bad
layering.  twisted.internet.defer only invokes Failure in a couple of
places, so it's not so onerous to make sure it invokes it to avoid
capturing tracebacks unless it means to.

That said, it might be a good idea to change Failure to *not* capture
tracebacks by default when invoked as Failure().  Perhaps add a
setDebugging toggle to twisted.python.failure too.  If an explicit
traceback is passed to the constructor it would still be captured, and
perhaps provide an alternative constructor for the current ?capture
everything? behaviour (perhaps via a new optional flag for __init__,
perhaps via a new name DetailedFailure(), perhaps via a classmethod
except failure is not a new-style class and can't be one without
changing to subclass Exception?) for the rare cases when people want
that.  It's a pity you can't just use Failure(*sys.exc_info()) because
the parameters are in the wrong order.

Certainly the current behaviour of doing a costly capturing of traceback
and frame contents seems like the wrong default, given how rarely I've
seen anyone use Failure.printDetailedTraceback.

-Andrew.



From radix at twistedmatrix.com  Wed Mar 30 11:09:06 2011
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 30 Mar 2011 10:09:06 -0500
Subject: [Twisted-Python] Deferred documentation.
In-Reply-To: <AANLkTiktUNuDN_gCeROfNr6eAG-q2FeEqJ_L19OnFO3_@mail.gmail.com>
References: <AANLkTik0uA2NAvYjFpRqDk5XDNsgoj073nfmjF1tWHcP@mail.gmail.com>
	<AANLkTinemJ-Rdf1EC+0VDgxnvixpe5dvxCdGP5_kZA4m@mail.gmail.com>
	<B68B4F4A-A8D5-4D23-87FC-9D0477A4BA65@twistedmatrix.com>
	<AANLkTikyzfT=tNZP5KpB30F-UxBA6A_bN3E4gPK1vHPp@mail.gmail.com>
	<4C606D48-E571-46E9-B621-E9DE21E76210@twistedmatrix.com>
	<BANLkTinf2CTo-xaowDeAh_9T79BG_dQzMA@mail.gmail.com>
	<BANLkTimHJNeyyREekMa2t_fKutpP0eOi5Q@mail.gmail.com>
	<BANLkTim0Wei04zhYQU3B9sfuSiq5s07k6A@mail.gmail.com>
	<4D91D6FA.80509@vokoda.com>
	<AANLkTi=7Pb_h5qKbgdX3PPCx=bj0cbYZiu6Ntj4GD5yz@mail.gmail.com>
	<AANLkTiktUNuDN_gCeROfNr6eAG-q2FeEqJ_L19OnFO3_@mail.gmail.com>
Message-ID: <AANLkTikQZ3bJJA9-CtH-8WqC-1JAjYbQtNHUcDEZS8hk@mail.gmail.com>

On Wed, Mar 30, 2011 at 2:55 AM, Tristan Seligmann
<mithrandi at mithrandi.net>wrote:

> On Tue, Mar 29, 2011 at 5:08 PM, Christopher Armstrong
> <radix at twistedmatrix.com> wrote:
> > I probably use addCallbacks once for every 30-100 addCallback or
> addErrback
> > calls I do (counted by lines of code, not times they're executed). But
> > that's just an off-the-cuff estimate.
>
> For interest's sake, I just ran the numbers on my largest codebase (a
> proprietary application, sorry); ratio of addCallbacks to (addCallback
> + addErrback) is around 0.05.
>

Funny, that's what I got on my proprietary application (0.0597) :-) It's a
heavily inlineCallbacks-based codebase, and I expect there would be a much
larger number of addCallback/addErrback calls if it weren't. Also, looking
at the actual uses of addCallbacks (15), they were all written by people
other than me (relative Twisted newbies) and I don't think I would have used
it where it's used now. This, I think, indicates that we *should* focus more
on addCallback and addErrback in the documentation, and stress that they are
almost always what you want to use instead of addCallbacks, but definitely
point out where addCallbacks is useful.

-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110330/3db49634/attachment.htm 

From jstpierre at mecheye.net  Wed Mar 30 11:50:53 2011
From: jstpierre at mecheye.net (Jasper St. Pierre)
Date: Wed, 30 Mar 2011 11:50:53 -0400
Subject: [Twisted-Python] Deferred documentation.
In-Reply-To: <AANLkTikQZ3bJJA9-CtH-8WqC-1JAjYbQtNHUcDEZS8hk@mail.gmail.com>
References: <AANLkTik0uA2NAvYjFpRqDk5XDNsgoj073nfmjF1tWHcP@mail.gmail.com>
	<AANLkTinemJ-Rdf1EC+0VDgxnvixpe5dvxCdGP5_kZA4m@mail.gmail.com>
	<B68B4F4A-A8D5-4D23-87FC-9D0477A4BA65@twistedmatrix.com>
	<AANLkTikyzfT=tNZP5KpB30F-UxBA6A_bN3E4gPK1vHPp@mail.gmail.com>
	<4C606D48-E571-46E9-B621-E9DE21E76210@twistedmatrix.com>
	<BANLkTinf2CTo-xaowDeAh_9T79BG_dQzMA@mail.gmail.com>
	<BANLkTimHJNeyyREekMa2t_fKutpP0eOi5Q@mail.gmail.com>
	<BANLkTim0Wei04zhYQU3B9sfuSiq5s07k6A@mail.gmail.com>
	<4D91D6FA.80509@vokoda.com>
	<AANLkTi=7Pb_h5qKbgdX3PPCx=bj0cbYZiu6Ntj4GD5yz@mail.gmail.com>
	<AANLkTiktUNuDN_gCeROfNr6eAG-q2FeEqJ_L19OnFO3_@mail.gmail.com>
	<AANLkTikQZ3bJJA9-CtH-8WqC-1JAjYbQtNHUcDEZS8hk@mail.gmail.com>
Message-ID: <BANLkTimygpgmxMC2_MRQLTt_2C6wdh7ytQ@mail.gmail.com>

The problem that I have is that errback flow is awkward... the main
difference is that addCallbacks will call the errback if its own callback
fails, right? I can only see that really being useful by accident.

On Wed, Mar 30, 2011 at 11:09 AM, Christopher Armstrong <
radix at twistedmatrix.com> wrote:

> On Wed, Mar 30, 2011 at 2:55 AM, Tristan Seligmann <
> mithrandi at mithrandi.net> wrote:
>
>> On Tue, Mar 29, 2011 at 5:08 PM, Christopher Armstrong
>> <radix at twistedmatrix.com> wrote:
>> > I probably once for every 30-'s 100 addCallback or addErrback
>> > calls I do (counted by lines of code, not times they're executed). But
>> > that's just an off-the-cuff estimate.
>>
>> For interest's sake, I just ran the numbers on my largest codebase (a
>> proprietary application, sorry); ratio of addCallbacks to (addCallback
>> + addErrback) is around 0.05.
>>
>
> Funny, that's what I got on my proprietary application (0.0597) :-) It's a
> heavily inlineCallbacks-based codebase, and I expect there would be a much
> larger number of addCallback/addErrback calls if it weren't. Also, looking
> at the actual uses of addCallbacks (15), they were all written by people
> other than me (relative Twisted newbies) and I don't think I would have used
> it where it's used now. This, I think, indicates that we *should* focus more
> on addCallback and addErrback in the documentation, and stress that they are
> almost always what you want to use instead of addCallbacks, but definitely
> point out where addCallbacks is useful.
>
> --
> Christopher Armstrong
> http://radix.twistedmatrix.com/
> http://planet-if.com/
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110330/3fd38248/attachment-0001.htm 

From jml at mumak.net  Wed Mar 30 11:55:50 2011
From: jml at mumak.net (Jonathan Lange)
Date: Wed, 30 Mar 2011 16:55:50 +0100
Subject: [Twisted-Python] Deferred documentation.
In-Reply-To: <BANLkTimygpgmxMC2_MRQLTt_2C6wdh7ytQ@mail.gmail.com>
References: <AANLkTik0uA2NAvYjFpRqDk5XDNsgoj073nfmjF1tWHcP@mail.gmail.com>
	<AANLkTinemJ-Rdf1EC+0VDgxnvixpe5dvxCdGP5_kZA4m@mail.gmail.com>
	<B68B4F4A-A8D5-4D23-87FC-9D0477A4BA65@twistedmatrix.com>
	<AANLkTikyzfT=tNZP5KpB30F-UxBA6A_bN3E4gPK1vHPp@mail.gmail.com>
	<4C606D48-E571-46E9-B621-E9DE21E76210@twistedmatrix.com>
	<BANLkTinf2CTo-xaowDeAh_9T79BG_dQzMA@mail.gmail.com>
	<BANLkTimHJNeyyREekMa2t_fKutpP0eOi5Q@mail.gmail.com>
	<BANLkTim0Wei04zhYQU3B9sfuSiq5s07k6A@mail.gmail.com>
	<4D91D6FA.80509@vokoda.com>
	<AANLkTi=7Pb_h5qKbgdX3PPCx=bj0cbYZiu6Ntj4GD5yz@mail.gmail.com>
	<AANLkTiktUNuDN_gCeROfNr6eAG-q2FeEqJ_L19OnFO3_@mail.gmail.com>
	<AANLkTikQZ3bJJA9-CtH-8WqC-1JAjYbQtNHUcDEZS8hk@mail.gmail.com>
	<BANLkTimygpgmxMC2_MRQLTt_2C6wdh7ytQ@mail.gmail.com>
Message-ID: <AANLkTimAyDLk+jcz5FQix=RTgEo_isbXnmA9L0N4MZkh@mail.gmail.com>

On Wed, Mar 30, 2011 at 4:50 PM, Jasper St. Pierre
<jstpierre at mecheye.net> wrote:
> The problem that I have is that errback flow is awkward... the main
> difference is that addCallbacks will call the errback if its own callback
> fails, right? I can only see that really being useful by accident.
>

Not really.

# 1. Handle error then do the action anyway.
deferred = order_food()
deferred.addErrback(handle_error)
deferred.addCallback(do_action)

# 2. Handle the error but do the action only if
# the error doesn't occur.
deferred = order_food()
deferred.addCallbacks(do_action, handle_error)

# 3. Handle the error for the entire operation.
deferred = order_food()
deferred.addCallback(do_action)
deferred.addErrback(handle_error)

# 4. Do something regardless of success or failure.
deferred = order_food()
deferred.addBoth(do_cleanup)


These are analogous to:

# 1. Handle error then do the action anyway.
try:
    value = order_food()
except:
    handle_error()
do_action(value)

# 2. Handle the error but do the action only if the error doesn't occur.
try:
    value = order_food()
except:
    handle_error()
else:
    do_action(value)

# 3. Handle the error for the entire operation.
try:
    value = order_food()
    do_action(value)
except:
    handle_error()

# 4. Do something regardless of success or failure.
try:
    value = order_food()
finally:
    do_cleanup()


From glyph at twistedmatrix.com  Wed Mar 30 13:20:04 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 30 Mar 2011 13:20:04 -0400
Subject: [Twisted-Python] Deferred documentation.
In-Reply-To: <AANLkTikQZ3bJJA9-CtH-8WqC-1JAjYbQtNHUcDEZS8hk@mail.gmail.com>
References: <AANLkTik0uA2NAvYjFpRqDk5XDNsgoj073nfmjF1tWHcP@mail.gmail.com>
	<AANLkTinemJ-Rdf1EC+0VDgxnvixpe5dvxCdGP5_kZA4m@mail.gmail.com>
	<B68B4F4A-A8D5-4D23-87FC-9D0477A4BA65@twistedmatrix.com>
	<AANLkTikyzfT=tNZP5KpB30F-UxBA6A_bN3E4gPK1vHPp@mail.gmail.com>
	<4C606D48-E571-46E9-B621-E9DE21E76210@twistedmatrix.com>
	<BANLkTinf2CTo-xaowDeAh_9T79BG_dQzMA@mail.gmail.com>
	<BANLkTimHJNeyyREekMa2t_fKutpP0eOi5Q@mail.gmail.com>
	<BANLkTim0Wei04zhYQU3B9sfuSiq5s07k6A@mail.gmail.com>
	<4D91D6FA.80509@vokoda.com>
	<AANLkTi=7Pb_h5qKbgdX3PPCx=bj0cbYZiu6Ntj4GD5yz@mail.gmail.com>
	<AANLkTiktUNuDN_gCeROfNr6eAG-q2FeEqJ_L19OnFO3_@mail.gmail.com>
	<AANLkTikQZ3bJJA9-CtH-8WqC-1JAjYbQtNHUcDEZS8hk@mail.gmail.com>
Message-ID: <D563E715-A111-4855-935D-BE46FF8C5787@twistedmatrix.com>

On Mar 30, 2011, at 11:09 AM, Christopher Armstrong wrote:

> Funny, that's what I got on my proprietary application (0.0597) :-) It's a heavily inlineCallbacks-based codebase, and I expect there would be a much larger number of addCallback/addErrback calls if it weren't. Also, looking at the actual uses of addCallbacks (15), they were all written by people other than me (relative Twisted newbies) and I don't think I would have used it where it's used now. This, I think, indicates that we *should* focus more on addCallback and addErrback in the documentation, and stress that they are almost always what you want to use instead of addCallbacks, but definitely point out where addCallbacks is useful.

addCallbacks() is used in places where you'd need a try/except/else in synchronous code; much less frequently than you'd need a try/except, but still enough that it's important.

However, in my experience, a novice's understanding of addCallbacks() is critically important to understanding other uses of Deferred as well; in particular, the "one chain of pairs of callback and errback" concept makes a lot of the behavior clear which might not otherwise be.  If you just vaguely know about chains of callbacks, you can easily get confused.

Some sample confusion that I believe I've heard over the years: thinking that addErrback only affects the previously-added callback, that there's only one errback for the whole chain but as many callbacks as you want, that the callback and errback chains are totally separate, and callbacks are run, then errbacks.

Granted, these types of confusion require more than simply glossing over addCallbacks(), but I do think that emphasizing the pairs-of-callbacks structure helps people get a full understanding of what's going on more quickly.  Of course, now that I've put this in a publicly-archived mailing list archive, a lack of understanding of addCallbacks won't be the problem any more.  People will be confused, search for some terms related to this confusion, and read only that one preceding paragraph of this message, and say to themselves "oh, that's how Deferred works", somehow holding all of those wrong ideas in their head at once, forever.  Hooray for the internet.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110330/26e91941/attachment.htm 

From glyph at twistedmatrix.com  Wed Mar 30 13:38:55 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 30 Mar 2011 13:38:55 -0400
Subject: [Twisted-Python] prerelease preview predocumentation
In-Reply-To: <20110329071021.GA2194@weiermayer.com>
References: <C9AA782C-1AC0-423A-9146-278E914D53D5@twistedmatrix.com>
	<CED11EEE-3486-47FD-936C-DE453D26D1F9@twistedmatrix.com>
	<AANLkTimWxHEnG_VtRUu+CU4N-=MbaHo9v1SP180513=u@mail.gmail.com>
	<20110329071021.GA2194@weiermayer.com>
Message-ID: <6F0A5D7B-3AA7-444E-8EBB-86305CF0E4DF@twistedmatrix.com>


On Mar 29, 2011, at 3:10 AM, Albert Brandl wrote:

> On Mon, Mar 28, 2011 at 09:27:04AM -0400, Tom Davis wrote:
>> 
>> It's great to have everything indexed on one page with easy drill-down 
>> into specific sections. It becomes really obvious where the hierarchy 
>> can be optimized and how we can logically go about breaking up the 
>> various sections.
> 
> This is right. But I was confused by the fact that the first-level items 
> in the list ("Twisted Conch Documentation", "Twisted Core Documentation", 
> etc.) link to pages that _again_ present links to the second-level items.
> Adding to my confusion was the fact that the links on the main page have
> different names from the ones on the subpages.

You're absolutely right.  The organization is a total mess.  But here's the surprise: the organization is not new :).  This is the exact same organization that the documentation has had for years.  The difference is that you can see it now, and notice that it's a problem, rather than just search for a document that you want, find that one document outside of the navigation structure, and ignore the rest of the docs (which is what most people do now).  I think that's a very good thing.

For example: both <http://twistedmatrix.com/documents/10.2.0/> and <http://twistedmatrix.com/~glyph/sphinx-preview-11.0pre1/> have a "conch" link.  And as you can see when you follow that link, <http://twistedmatrix.com/documents/10.2.0/conch/> looks a lot like  <http://twistedmatrix.com/~glyph/sphinx-preview-11.0pre1/projects/conch/index.html>.

This issue will be probably be fixed after the migration.  That is, I would certainly be happy if it were fixed before, or at any time really, but fixing it probably requires some tweaks to release infrastructure that would better be put off until we've deleted most of that part of the release infrastructure.  The important point is that it should stop the migration from happening, since the results are actually better now than they were, just more noticeable.

At any rate: thanks for the feedback, it's appreciated!

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110330/6ec77bbd/attachment.htm 

From kevin.horn at gmail.com  Wed Mar 30 14:09:55 2011
From: kevin.horn at gmail.com (Kevin Horn)
Date: Wed, 30 Mar 2011 13:09:55 -0500
Subject: [Twisted-Python] prerelease preview predocumentation
In-Reply-To: <6F0A5D7B-3AA7-444E-8EBB-86305CF0E4DF@twistedmatrix.com>
References: <C9AA782C-1AC0-423A-9146-278E914D53D5@twistedmatrix.com>
	<CED11EEE-3486-47FD-936C-DE453D26D1F9@twistedmatrix.com>
	<AANLkTimWxHEnG_VtRUu+CU4N-=MbaHo9v1SP180513=u@mail.gmail.com>
	<20110329071021.GA2194@weiermayer.com>
	<6F0A5D7B-3AA7-444E-8EBB-86305CF0E4DF@twistedmatrix.com>
Message-ID: <AANLkTinwLPCdZi0nhcEQ5WUWXA12yaR_8UfhHdrA-UMe@mail.gmail.com>

On Wed, Mar 30, 2011 at 12:38 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com>wrote:

>
> On Mar 29, 2011, at 3:10 AM, Albert Brandl wrote:
>
> On Mon, Mar 28, 2011 at 09:27:04AM -0400, Tom Davis wrote:
>
>
> It's great to have everything indexed on one page with easy drill-down
>
> into specific sections. It becomes really obvious where the hierarchy
>
> can be optimized and how we can logically go about breaking up the
>
> various sections.
>
>
> This is right. But I was confused by the fact that the first-level items
> in the list ("Twisted Conch Documentation", "Twisted Core Documentation",
> etc.) link to pages that _again_ present links to the second-level items.
> Adding to my confusion was the fact that the links on the main page have
> different names from the ones on the subpages.
>
>
> You're absolutely right.  The organization is a total mess.  But here's the
> surprise: the organization is not *new* :).  This is the exact same
> organization that the documentation has had for years.  The difference is
> that you can see it now, and notice that it's a problem, rather than just
> search for a document that you want, find that one document outside of the
> navigation structure, and ignore the rest of the docs (which is what most
> people do now).  I think that's a very good thing.
>
> For example: both <http://twistedmatrix.com/documents/10.2.0/> and <
> http://twistedmatrix.com/~glyph/sphinx-preview-11.0pre1/> have a "conch"
> link.  And as you can see when you follow that link, <
> http://twistedmatrix.com/documents/10.2.0/conch/> looks a lot like  <
> http://twistedmatrix.com/~glyph/sphinx-preview-11.0pre1/projects/conch/index.html
> >.
>
> This issue will be probably be fixed after the migration.  That is, I would
> certainly be happy if it were fixed before, or at any time really, but
> fixing it probably requires some tweaks to release infrastructure that would
> better be put off until we've deleted most of that part of the release
> infrastructure.  The important point is that it should *stop* the
> migration from happening, since the results are actually better now than
> they were, just more noticeable.
>
> At any rate: thanks for the feedback, it's appreciated!
>
> -glyph
>
>
Er, you mean it should _not_ stop the migration from happening?

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110330/46016539/attachment.htm 

From mithrandi at mithrandi.net  Wed Mar 30 14:51:13 2011
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Wed, 30 Mar 2011 20:51:13 +0200
Subject: [Twisted-Python] Deferred documentation.
In-Reply-To: <D563E715-A111-4855-935D-BE46FF8C5787@twistedmatrix.com>
References: <AANLkTik0uA2NAvYjFpRqDk5XDNsgoj073nfmjF1tWHcP@mail.gmail.com>
	<AANLkTinemJ-Rdf1EC+0VDgxnvixpe5dvxCdGP5_kZA4m@mail.gmail.com>
	<B68B4F4A-A8D5-4D23-87FC-9D0477A4BA65@twistedmatrix.com>
	<AANLkTikyzfT=tNZP5KpB30F-UxBA6A_bN3E4gPK1vHPp@mail.gmail.com>
	<4C606D48-E571-46E9-B621-E9DE21E76210@twistedmatrix.com>
	<BANLkTinf2CTo-xaowDeAh_9T79BG_dQzMA@mail.gmail.com>
	<BANLkTimHJNeyyREekMa2t_fKutpP0eOi5Q@mail.gmail.com>
	<BANLkTim0Wei04zhYQU3B9sfuSiq5s07k6A@mail.gmail.com>
	<4D91D6FA.80509@vokoda.com>
	<AANLkTi=7Pb_h5qKbgdX3PPCx=bj0cbYZiu6Ntj4GD5yz@mail.gmail.com>
	<AANLkTiktUNuDN_gCeROfNr6eAG-q2FeEqJ_L19OnFO3_@mail.gmail.com>
	<AANLkTikQZ3bJJA9-CtH-8WqC-1JAjYbQtNHUcDEZS8hk@mail.gmail.com>
	<D563E715-A111-4855-935D-BE46FF8C5787@twistedmatrix.com>
Message-ID: <AANLkTikAD03mhhFAijCGae+BFcL0ie=1=e4S5SmwncJ-@mail.gmail.com>

On Wed, Mar 30, 2011 at 7:20 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
> However, in my experience, a novice's understanding of addCallbacks() is
> critically important to understanding other uses of Deferred as well; in
> particular, the "one chain of pairs of callback and errback" concept makes a
> lot of the behavior clear which might not otherwise be. ?If you just vaguely
> know about chains of callbacks, you can easily get confused.

Anecdotally, I didn't understand Deferred callback chains at all
correctly until I discovered that addCallback and addErrback were
implemented in terms of addCallbacks, and how they were implemented.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar


From jessica.mckellar at gmail.com  Wed Mar 30 22:54:18 2011
From: jessica.mckellar at gmail.com (Jessica McKellar)
Date: Wed, 30 Mar 2011 22:54:18 -0400
Subject: [Twisted-Python] Announcing Twisted 11.0.0pre2!
Message-ID: <AANLkTindA0cs+paEeFt5UELpU5AFw7Ti7YMaWpBh7m5w@mail.gmail.com>

Having done the builds with two curious guinea pigs by my side, we are
triply pleased to announce the second 11.0.0 pre-release.

Tarballs for the second pre-release are available at:

<http://twistedmatrix.com/~jesstess/11.0.0pre2/>

The main differences between this release and the first pre-release
are changelog and setup.py tweaks.

Please test aggressively! Barring the discovery of regressions, we are
going to cut a final release *this weekend (April 2/3)*.

Many thanks to thijs and exarkun for feedback and improvements on the
first pre-release, and to glyph for overseeing the pre-release
process.

-Jessica


From glyph at twistedmatrix.com  Thu Mar 31 00:16:11 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 31 Mar 2011 00:16:11 -0400
Subject: [Twisted-Python] prerelease preview predocumentation
In-Reply-To: <AANLkTinwLPCdZi0nhcEQ5WUWXA12yaR_8UfhHdrA-UMe@mail.gmail.com>
References: <C9AA782C-1AC0-423A-9146-278E914D53D5@twistedmatrix.com>
	<CED11EEE-3486-47FD-936C-DE453D26D1F9@twistedmatrix.com>
	<AANLkTimWxHEnG_VtRUu+CU4N-=MbaHo9v1SP180513=u@mail.gmail.com>
	<20110329071021.GA2194@weiermayer.com>
	<6F0A5D7B-3AA7-444E-8EBB-86305CF0E4DF@twistedmatrix.com>
	<AANLkTinwLPCdZi0nhcEQ5WUWXA12yaR_8UfhHdrA-UMe@mail.gmail.com>
Message-ID: <BFFA02F5-FCE9-4A09-A039-EEC58D8632C3@twistedmatrix.com>


On Mar 30, 2011, at 2:09 PM, Kevin Horn wrote:

> Er, you mean it should _not_ stop the migration from happening?

Uh, yes, it should not stop the migration from happening.  Sorry for the mix-up.  Actually we are on track to have the final migration happen very soon, if someone goes through the release tool automation stuff to make it Sphinx-friendly.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110331/e517b04d/attachment-0001.htm 

From glyph at twistedmatrix.com  Thu Mar 31 00:17:56 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 31 Mar 2011 00:17:56 -0400
Subject: [Twisted-Python] Deferred documentation.
In-Reply-To: <AANLkTikAD03mhhFAijCGae+BFcL0ie=1=e4S5SmwncJ-@mail.gmail.com>
References: <AANLkTik0uA2NAvYjFpRqDk5XDNsgoj073nfmjF1tWHcP@mail.gmail.com>
	<AANLkTinemJ-Rdf1EC+0VDgxnvixpe5dvxCdGP5_kZA4m@mail.gmail.com>
	<B68B4F4A-A8D5-4D23-87FC-9D0477A4BA65@twistedmatrix.com>
	<AANLkTikyzfT=tNZP5KpB30F-UxBA6A_bN3E4gPK1vHPp@mail.gmail.com>
	<4C606D48-E571-46E9-B621-E9DE21E76210@twistedmatrix.com>
	<BANLkTinf2CTo-xaowDeAh_9T79BG_dQzMA@mail.gmail.com>
	<BANLkTimHJNeyyREekMa2t_fKutpP0eOi5Q@mail.gmail.com>
	<BANLkTim0Wei04zhYQU3B9sfuSiq5s07k6A@mail.gmail.com>
	<4D91D6FA.80509@vokoda.com>
	<AANLkTi=7Pb_h5qKbgdX3PPCx=bj0cbYZiu6Ntj4GD5yz@mail.gmail.com>
	<AANLkTiktUNuDN_gCeROfNr6eAG-q2FeEqJ_L19OnFO3_@mail.gmail.com>
	<AANLkTikQZ3bJJA9-CtH-8WqC-1JAjYbQtNHUcDEZS8hk@mail.gmail.com>
	<D563E715-A111-4855-935D-BE46FF8C5787@twistedmatrix.com>
	<AANLkTikAD03mhhFAijCGae+BFcL0ie=1=e4S5SmwncJ-@mail.gmail.com>
Message-ID: <577FF9DC-9168-43B4-937A-19BCE11F8660@twistedmatrix.com>


On Mar 30, 2011, at 2:51 PM, Tristan Seligmann wrote:

> On Wed, Mar 30, 2011 at 7:20 PM, Glyph Lefkowitz
> <glyph at twistedmatrix.com> wrote:
>> However, in my experience, a novice's understanding of addCallbacks() is
>> critically important to understanding other uses of Deferred as well; in
>> particular, the "one chain of pairs of callback and errback" concept makes a
>> lot of the behavior clear which might not otherwise be.  If you just vaguely
>> know about chains of callbacks, you can easily get confused.
> 
> Anecdotally, I didn't understand Deferred callback chains at all
> correctly until I discovered that addCallback and addErrback were
> implemented in terms of addCallbacks, and how they were implemented.

Great, so, my evidence-free claim and another your personal anecdotal experience agree; I believe this gives us what Science calls a "law", and thus the topic bears no further discussion :).

Seriously though, this is pretty much exactly what I meant.  You don't need to call addCallbacks a lot, but (A) sometimes you do and when you do need it it's important, and (B) it's important for people to understand early in the process even if they're not going to use it a lot.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110331/00e5f7af/attachment.htm 

From glyph at twistedmatrix.com  Thu Mar 31 00:23:43 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 31 Mar 2011 00:23:43 -0400
Subject: [Twisted-Python] Failure is O(state) vs Exception
In-Reply-To: <20110330091411.GE2777@aihal.home.puzzling.org>
References: <4D909ED2.1010300@arbash-meinel.com>
	<AANLkTindhXEEwnLG-nO7dFCxd30hjqQ=iDEo_p2RT0Ks@mail.gmail.com>
	<4D90A52C.6090401@arbash-meinel.com>
	<20110330083950.GD2777@aihal.home.puzzling.org>
	<4D92EEE0.2050305@arbash-meinel.com>
	<20110330091411.GE2777@aihal.home.puzzling.org>
Message-ID: <2F990B30-567E-458F-B592-66B92B024CAD@twistedmatrix.com>


On Mar 30, 2011, at 5:14 AM, Andrew Bennetts wrote:

> John Arbash Meinel wrote:
> [?]
>> I think walking the frames and copying the dicts is also expensive. That
>> is what the bug you linked to me was about. (First, walking everything
>> and using __dict__.copy() was a bit expensive, and second that the
>> safe_repr() calls were turning 1GB strings into a new 1GB+ string.)
> 
> Well, if we take my proposal to not (by default at least) capture the
> frames in the first place this isn't an issue is it?  The only other
> copy done in Failure is the copy of self.__dict__ in __getstate__, which
> is just a shallow copy of one dict, so fairly cheap.
> 
>> The one other step that I think we need, is that 'maybeDeferred' also
>> always traps into a Failure object, and we'd want that to check
>> Deferred.debug first.
> 
> Good point!
> 
>> I do wonder if Failure should just be checking Deferred.debug before
>> automatically including a traceback. I'm not really sure about logical
>> layering of twisted modules, though. Certainly 'twisted.python.failure'
>> seems a lower layer than 'twisted.internet.defer'.
> 
> Yes, checking Deferred.debug in twisted.python.failure would be bad
> layering.  twisted.internet.defer only invokes Failure in a couple of
> places, so it's not so onerous to make sure it invokes it to avoid
> capturing tracebacks unless it means to.
> 
> That said, it might be a good idea to change Failure to *not* capture
> tracebacks by default when invoked as Failure().  Perhaps add a
> setDebugging toggle to twisted.python.failure too.  If an explicit
> traceback is passed to the constructor it would still be captured, and
> perhaps provide an alternative constructor for the current ?capture
> everything? behaviour (perhaps via a new optional flag for __init__,
> perhaps via a new name DetailedFailure(), perhaps via a classmethod
> except failure is not a new-style class and can't be one without
> changing to subclass Exception?) for the rare cases when people want
> that.  It's a pity you can't just use Failure(*sys.exc_info()) because
> the parameters are in the wrong order.
> 
> Certainly the current behaviour of doing a costly capturing of traceback
> and frame contents seems like the wrong default, given how rarely I've
> seen anyone use Failure.printDetailedTraceback.

Agreed.  I've seen this behavior crop up shocking close to the top of profiles for Calendar Server as well, so I'm very glad to hear you've undertaken this work.  The current default is almost certainly wrong; the only code which has practically ever used it was the HTML traceback stuff, which most serious users disable for security reasons anyway.

Debugging is kind of a process-global thing, most of the time.  I think maybe we should have 'twisted.python.debug' which is the main thing that all these features use, and then a setDebugging for each system (Failure, Deferred, reactor; and ideally, eventually stuff like web, mail, conch too) to turn on these expensive-but-occasionally-worthwhile features.

But I'd be happy if this change did _nothing_ but make Failure simply default to not capturing globals and locals, and add a flag to explicitly request this behavior.  Like you say: the information is always captured but almost never used.

-glyph



From andrew at bemusement.org  Thu Mar 31 00:41:08 2011
From: andrew at bemusement.org (Andrew Bennetts)
Date: Thu, 31 Mar 2011 15:41:08 +1100
Subject: [Twisted-Python] Failure is O(state) vs Exception
In-Reply-To: <2F990B30-567E-458F-B592-66B92B024CAD@twistedmatrix.com>
References: <4D909ED2.1010300@arbash-meinel.com>
	<AANLkTindhXEEwnLG-nO7dFCxd30hjqQ=iDEo_p2RT0Ks@mail.gmail.com>
	<4D90A52C.6090401@arbash-meinel.com>
	<20110330083950.GD2777@aihal.home.puzzling.org>
	<4D92EEE0.2050305@arbash-meinel.com>
	<20110330091411.GE2777@aihal.home.puzzling.org>
	<2F990B30-567E-458F-B592-66B92B024CAD@twistedmatrix.com>
Message-ID: <20110331044108.GG2777@aihal.home.puzzling.org>

Glyph Lefkowitz wrote:
[?]
> Agreed.  I've seen this behavior crop up shocking close to the top of profiles
> for Calendar Server as well, so I'm very glad to hear you've undertaken this
> work.  The current default is almost certainly wrong; the only code which has
> practically ever used it was the HTML traceback stuff, which most serious
> users disable for security reasons anyway.

Good to know we're not the only ones :)

The fact that it speeds up 'trial twisted' by ~10-15% is a nice bonus too!

> Debugging is kind of a process-global thing, most of the time.  I think maybe
> we should have 'twisted.python.debug' which is the main thing that all these
> features use, and then a setDebugging for each system (Failure, Deferred,
> reactor; and ideally, eventually stuff like web, mail, conch too) to turn on
> these expensive-but-occasionally-worthwhile features.

A similar scheme has worked well for bzrlib.  +1

> But I'd be happy if this change did _nothing_ but make Failure simply default
> to not capturing globals and locals, and add a flag to explicitly request this
> behavior.  Like you say: the information is always captured but almost never
> used.

That's fine with me!  I'll update the patch to add captureVars=False to
Failure.__init__ instead of what it currently does, and happily leave defer.py
unmodified from trunk.

Thanks for the feedback,

-Andrew.



From aljosa.mohorovic at gmail.com  Thu Mar 31 04:15:33 2011
From: aljosa.mohorovic at gmail.com (=?UTF-8?B?QWxqb8WhYSBNb2hvcm92acSH?=)
Date: Thu, 31 Mar 2011 10:15:33 +0200
Subject: [Twisted-Python] running several services from a single app
In-Reply-To: <20110329225651.GF5510@boombah.thristian.org>
References: <AANLkTik0vHzVm+XLEuM=ueuNqBK4-0ZuMNN-nSuaXtmo@mail.gmail.com>
	<AANLkTikb7+2bC6FVDQ2TXvjmxrfa9_d-j8jQUY4ad5cv@mail.gmail.com>
	<AANLkTi=_SPVDpJVx2rtx+9DmWiCTD69N4g_3_RP5OrMX@mail.gmail.com>
	<20110329225651.GF5510@boombah.thristian.org>
Message-ID: <AANLkTimv+dsVZzK6zWomXjdN2=ixO=KsYf3LktOMhPPA@mail.gmail.com>

everything is working, thanks.

Aljosa


From aljosa.mohorovic at gmail.com  Thu Mar 31 04:45:49 2011
From: aljosa.mohorovic at gmail.com (=?UTF-8?B?QWxqb8WhYSBNb2hvcm92acSH?=)
Date: Thu, 31 Mar 2011 10:45:49 +0200
Subject: [Twisted-Python] running several services from a single app
In-Reply-To: <AANLkTimv+dsVZzK6zWomXjdN2=ixO=KsYf3LktOMhPPA@mail.gmail.com>
References: <AANLkTik0vHzVm+XLEuM=ueuNqBK4-0ZuMNN-nSuaXtmo@mail.gmail.com>
	<AANLkTikb7+2bC6FVDQ2TXvjmxrfa9_d-j8jQUY4ad5cv@mail.gmail.com>
	<AANLkTi=_SPVDpJVx2rtx+9DmWiCTD69N4g_3_RP5OrMX@mail.gmail.com>
	<20110329225651.GF5510@boombah.thristian.org>
	<AANLkTimv+dsVZzK6zWomXjdN2=ixO=KsYf3LktOMhPPA@mail.gmail.com>
Message-ID: <AANLkTikdmi-TiUs-Rc50Fb8D6KSQNRoZ7z_M+_zgyyT=@mail.gmail.com>

now i looking at adding an wsgi app to this setup.
i'm reading http://twistedmatrix.com/documents/current/web/howto/web-in-60/wsgi.html
but can't figure out howto get factory for wsgi if i have:

===
def application(environ, start_response):
    start_response('200 OK', [('Content-type', 'text/plain')])
    return ['Hello, world!']
resource = WSGIResource(reactor, reactor.getThreadPool(), application)
===

i'm looking for something like "reactor.listenTCP(10000,
wsgi_factory)" but don't know howto do it.
please point me to proper docs.
thanks

Aljosa


From jstpierre at mecheye.net  Thu Mar 31 06:59:06 2011
From: jstpierre at mecheye.net (Jasper St. Pierre)
Date: Thu, 31 Mar 2011 06:59:06 -0400
Subject: [Twisted-Python] running several services from a single app
In-Reply-To: <AANLkTikdmi-TiUs-Rc50Fb8D6KSQNRoZ7z_M+_zgyyT=@mail.gmail.com>
References: <AANLkTik0vHzVm+XLEuM=ueuNqBK4-0ZuMNN-nSuaXtmo@mail.gmail.com>
	<AANLkTikb7+2bC6FVDQ2TXvjmxrfa9_d-j8jQUY4ad5cv@mail.gmail.com>
	<AANLkTi=_SPVDpJVx2rtx+9DmWiCTD69N4g_3_RP5OrMX@mail.gmail.com>
	<20110329225651.GF5510@boombah.thristian.org>
	<AANLkTimv+dsVZzK6zWomXjdN2=ixO=KsYf3LktOMhPPA@mail.gmail.com>
	<AANLkTikdmi-TiUs-Rc50Fb8D6KSQNRoZ7z_M+_zgyyT=@mail.gmail.com>
Message-ID: <BANLkTikqP5ef7FDKUNMDA=yMbqPKdxMZWg@mail.gmail.com>

The factory for twisted.web.resource Resources is twisted.web.server.Site

On Thu, Mar 31, 2011 at 4:45 AM, Aljo?a Mohorovi? <
aljosa.mohorovic at gmail.com> wrote:

> now i looking at adding an wsgi app to this setup.
> i'm reading
> http://twistedmatrix.com/documents/current/web/howto/web-in-60/wsgi.html
> but can't figure out howto get factory for wsgi if i have:
>
> ===
> def application(environ, start_response):
>    start_response('200 OK', [('Content-type', 'text/plain')])
>    return ['Hello, world!']
> resource = WSGIResource(reactor, reactor.getThreadPool(), application)
> ===
>
> i'm looking for something like "reactor.listenTCP(10000,
> wsgi_factory)" but don't know howto do it.
> please point me to proper docs.
>

factory = Site(resource)
reactor.listenTCP(10000, factory)
reactor.run()

see here:
http://twistedmatrix.com/documents/current/web/howto/web-in-60/dynamic-content.html


> thanks
>
> Aljosa
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110331/00c56805/attachment.htm 

From dineshkapoor27 at gmail.com  Wed Mar  2 02:42:20 2011
From: dineshkapoor27 at gmail.com (Dinesh Kapoor)
Date: Wed, 2 Mar 2011 15:12:20 +0530
Subject: [Twisted-Python] Question regarding the working of twisted python
	with celery
Message-ID: <AANLkTi=g+q1_y6McTAaeSK10k=76RVbSdcU2o9nt7Tiw@mail.gmail.com>

Hi,

  I have run into a weird performance issue while working with twisted and
using celery to schedule tasks on it. Here is my setup:

1. Celery schedules a task which makes a TCP connection to a server running
FreeSwitch
2. Celery is running with concurrency = 2.
3. I have changed my code so that I call reactor.callfromthread for all
reactor based work.
4. A lot of times once I schedule the celery task, I get delays ranging from
3 - 30 seconds when I am running with Celery concurrency =2.
5. If I reduce the celery concurrency to 1, then everything works great!
6. Upon debugging it a little bit more, it seems that the selectReactor's
doSelect is where the code is getting stuck on the select().

I dont know how to get around the delay, and I dont know who is causing that
delay exactly. If there is more info that is needed then please let me know.
Everything works fine when the Celery worker process is 1, but delay starts
happening invariably when celery's worker processes >=2.

Any help would be great!

Regards,
Dinesh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110302/d9965671/attachment-0001.html>

From rlotun at gmail.com  Wed Mar  2 06:04:10 2011
From: rlotun at gmail.com (Reza Lotun)
Date: Wed, 2 Mar 2011 13:04:10 +0000
Subject: [Twisted-Python] Question regarding the working of twisted
 python with celery
In-Reply-To: <AANLkTi=g+q1_y6McTAaeSK10k=76RVbSdcU2o9nt7Tiw@mail.gmail.com>
References: <AANLkTi=g+q1_y6McTAaeSK10k=76RVbSdcU2o9nt7Tiw@mail.gmail.com>
Message-ID: <AANLkTi=KyOJ2BCxc6p8oF7dwifvyCYqs=Lta1K85bJCS@mail.gmail.com>

On Wed, Mar 2, 2011 at 9:42 AM, Dinesh Kapoor <dineshkapoor27 at gmail.com> wrote:
> 2. Celery is running with concurrency = 2.
> 3. I have changed my code so that I call reactor.callfromthread for all
> reactor based work.
> 4. A lot of times once I schedule the celery task, I get delays ranging from
> 3 - 30 seconds when I am running with Celery concurrency =2.
> 5. If I reduce the celery concurrency to 1, then everything works great!
> 6. Upon debugging it a little bit more, it seems that the selectReactor's
> doSelect is where the code is getting stuck on the select().

Celery makes synchronous blocking calls, and uses the multiprocessing
library. If I understand you correctly you are attempting to embed the
reactor in a celery worker process (your comment on callFromThread
seems to say this, at least). The problem is that with a concurrency
level of 2 the actual reactor could be running in another process.

Some things you can do:
- generate webhook tasks instead. Expose your twisted worker code via
and twisted.web interface - the celery tasks will simply POST to your
twisted.web endpoint and the actual worker code can be twistified.
- get celery worker code to make a TCP connection to your twisted
server. This is similar to the above idea, except HTTP isn't involved
and you have to come up with your own client-server protocol

Cheers,
Reza

-- 
Reza Lotun
mobile: +44 (0)7521 310 763
email:  rlotun at gmail.com
work:   reza at tweetdeck.com
twitter: @rlotun



From exarkun at twistedmatrix.com  Wed Mar  2 06:34:35 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 02 Mar 2011 13:34:35 -0000
Subject: [Twisted-Python] Question regarding the working of twisted
	python	with celery
In-Reply-To: <AANLkTi=g+q1_y6McTAaeSK10k=76RVbSdcU2o9nt7Tiw@mail.gmail.com>
References: <AANLkTi=g+q1_y6McTAaeSK10k=76RVbSdcU2o9nt7Tiw@mail.gmail.com>
Message-ID: <20110302133435.2231.810980901.divmod.xquotient.101@localhost.localdomain>

On 09:42 am, dineshkapoor27 at gmail.com wrote:
>Hi,
>
>  I have run into a weird performance issue while working with twisted 
>and
>using celery to schedule tasks on it. Here is my setup:
>
>1. Celery schedules a task which makes a TCP connection to a server 
>running
>FreeSwitch
>2. Celery is running with concurrency = 2.
>3. I have changed my code so that I call reactor.callfromthread for all
>reactor based work.
>4. A lot of times once I schedule the celery task, I get delays ranging 
>from
>3 - 30 seconds when I am running with Celery concurrency =2.
>5. If I reduce the celery concurrency to 1, then everything works 
>great!
>6. Upon debugging it a little bit more, it seems that the 
>selectReactor's
>doSelect is where the code is getting stuck on the select().
>
>I dont know how to get around the delay, and I dont know who is causing 
>that
>delay exactly. If there is more info that is needed then please let me 
>know.
>Everything works fine when the Celery worker process is 1, but delay 
>starts
>happening invariably when celery's worker processes >=2.

I think Reza Lotun explained what's causing this problem.

If you haven't looked at it yet, you might want to see if Ampoule can 
help you out.

Jean-Paul



From exarkun at twistedmatrix.com  Wed Mar  2 21:28:36 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 03 Mar 2011 04:28:36 -0000
Subject: [Twisted-Python] PyCon 2011 Twisted Sprint
In-Reply-To: <20110208162454.1699.1277311042.divmod.xquotient.1389@localhost.localdomain>
References: <20110208162454.1699.1277311042.divmod.xquotient.1389@localhost.localdomain>
Message-ID: <20110303042836.2231.390810583.divmod.xquotient.119@localhost.localdomain>

On 8 Feb, 04:24 pm, exarkun at twistedmatrix.com wrote:
>Hello all,
>
>Once again, we will be sprinting at PyCon.  I've just added Twisted to
><http://us.pycon.org/2011/sprints/projects/>.  If you plan to attend
>(for any amount of time), please add your name to the attendees list.
>Also feel free to suggest additional sprint topics.  We won't really
>limit sprint topics to things planned in advance, but adding particular
>things to the list is a probably a good way to attract more sprinters
>and let people do any background research that might be necessary 
>before
>the sprint actually starts.

Just a reminder about this.  Please sign up if you plan to come!

Jean-Paul



From glyph at twistedmatrix.com  Wed Mar  2 21:45:59 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 2 Mar 2011 23:45:59 -0500
Subject: [Twisted-Python] PyCon 2011 Twisted Sprint
In-Reply-To: <20110303042836.2231.390810583.divmod.xquotient.119@localhost.localdomain>
References: <20110208162454.1699.1277311042.divmod.xquotient.1389@localhost.localdomain>
	<20110303042836.2231.390810583.divmod.xquotient.119@localhost.localdomain>
Message-ID: <6CA51688-7B5A-464A-AC62-1F673124385F@twistedmatrix.com>


On Mar 2, 2011, at 11:28 PM, exarkun at twistedmatrix.com wrote:

> On 8 Feb, 04:24 pm, exarkun at twistedmatrix.com wrote:
>> Hello all,
>> 
>> Once again, we will be sprinting at PyCon.  I've just added Twisted to
>> <http://us.pycon.org/2011/sprints/projects/>.  If you plan to attend
>> (for any amount of time), please add your name to the attendees list.
>> Also feel free to suggest additional sprint topics.  We won't really
>> limit sprint topics to things planned in advance, but adding particular
>> things to the list is a probably a good way to attract more sprinters
>> and let people do any background research that might be necessary 
>> before
>> the sprint actually starts.
> 
> Just a reminder about this.  Please sign up if you plan to come!

All levels of experience are welcome, so if you've never been to a sprint before, we'd love to see you.

Sign up as soon as you can though.  Sometimes space is allocated based on these lists.  I'm not sure how it's going to work this year, but it's best if we know approximately how many people will be there so we can be sure to get a big enough room for everyone.

-glyph




From tom at recursivedream.com  Wed Mar  2 22:21:16 2011
From: tom at recursivedream.com (Tom Davis)
Date: Thu, 3 Mar 2011 00:21:16 -0500
Subject: [Twisted-Python] PyCon 2011 Twisted Sprint
In-Reply-To: <6CA51688-7B5A-464A-AC62-1F673124385F@twistedmatrix.com>
References: <20110208162454.1699.1277311042.divmod.xquotient.1389@localhost.localdomain>
	<20110303042836.2231.390810583.divmod.xquotient.119@localhost.localdomain>
	<6CA51688-7B5A-464A-AC62-1F673124385F@twistedmatrix.com>
Message-ID: <AANLkTi=4oa73hfeqF64YHz4YK9gaadV-Z2McD8zZA9hh@mail.gmail.com>

On Wed, Mar 2, 2011 at 11:45 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

>
> On Mar 2, 2011, at 11:28 PM, exarkun at twistedmatrix.com wrote:
>
> > On 8 Feb, 04:24 pm, exarkun at twistedmatrix.com wrote:
> >> Hello all,
> >>
> >> Once again, we will be sprinting at PyCon.  I've just added Twisted to
> >> <http://us.pycon.org/2011/sprints/projects/>.  If you plan to attend
> >> (for any amount of time), please add your name to the attendees list.
> >> Also feel free to suggest additional sprint topics.  We won't really
> >> limit sprint topics to things planned in advance, but adding particular
> >> things to the list is a probably a good way to attract more sprinters
> >> and let people do any background research that might be necessary
> >> before
> >> the sprint actually starts.
> >
> > Just a reminder about this.  Please sign up if you plan to come!
>
> All levels of experience are welcome, so if you've never been to a sprint
> before, we'd love to see you.
>
> Sign up as soon as you can though.  Sometimes space is allocated based on
> these lists.  I'm not sure how it's going to work this year, but it's best
> if we know approximately how many people will be there so we can be sure to
> get a big enough room for everyone.
>

Finally signed up; last time the "You must login to edit" message was
hardcoded *and* there was no link to the edit page. That was a confusing
journey.


>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110303/de135da9/attachment.html>

From glyph at twistedmatrix.com  Wed Mar  2 23:18:18 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 3 Mar 2011 01:18:18 -0500
Subject: [Twisted-Python] PyCon 2011 Twisted Sprint
In-Reply-To: <AANLkTi=4oa73hfeqF64YHz4YK9gaadV-Z2McD8zZA9hh@mail.gmail.com>
References: <20110208162454.1699.1277311042.divmod.xquotient.1389@localhost.localdomain>
	<20110303042836.2231.390810583.divmod.xquotient.119@localhost.localdomain>
	<6CA51688-7B5A-464A-AC62-1F673124385F@twistedmatrix.com>
	<AANLkTi=4oa73hfeqF64YHz4YK9gaadV-Z2McD8zZA9hh@mail.gmail.com>
Message-ID: <332BE6AC-4DA1-45FD-95FB-00B9C2013457@twistedmatrix.com>


On Mar 3, 2011, at 12:21 AM, Tom Davis wrote:

> On Wed, Mar 2, 2011 at 11:45 PM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
> On Mar 2, 2011, at 11:28 PM, exarkun at twistedmatrix.com wrote:
> 
> > On 8 Feb, 04:24 pm, exarkun at twistedmatrix.com wrote:
> >> Hello all,
> >>
> >> Once again, we will be sprinting at PyCon.  I've just added Twisted to
> >> <http://us.pycon.org/2011/sprints/projects/>.  If you plan to attend
> >> (for any amount of time), please add your name to the attendees list.
> >> Also feel free to suggest additional sprint topics.  We won't really
> >> limit sprint topics to things planned in advance, but adding particular
> >> things to the list is a probably a good way to attract more sprinters
> >> and let people do any background research that might be necessary
> >> before
> >> the sprint actually starts.
> >
> > Just a reminder about this.  Please sign up if you plan to come!
> 
> All levels of experience are welcome, so if you've never been to a sprint before, we'd love to see you.
> 
> Sign up as soon as you can though.  Sometimes space is allocated based on these lists.  I'm not sure how it's going to work this year, but it's best if we know approximately how many people will be there so we can be sure to get a big enough room for everyone.
> 
> Finally signed up; last time the "You must login to edit" message was hardcoded *and* there was no link to the edit page. That was a confusing journey.

Woah, awesome!  So you're going to be in Atlanta after all?  (Or am I mixing you up with someone else whose plans were uncertain?)

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110303/70beaccb/attachment.html>

From fantix.king at gmail.com  Thu Mar  3 05:31:02 2011
From: fantix.king at gmail.com (Fantix King)
Date: Thu, 3 Mar 2011 20:31:02 +0800
Subject: [Twisted-Python] Asynchronous context in Twisted
Message-ID: <AANLkTikX_wkb5-jgmxQ7Y-3_ENurHS-COTOfBQN=vGX4@mail.gmail.com>

Hi,

I tried to make python.context work in asynchronous code between main loops.
Anyone has similar experience to share please?

Not sure if I am rebuilding a wheel :P

http://code.google.com/p/little-site/source/browse/littlesite/custom_reactor.py


BR,
Fantix.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110303/e535b544/attachment.html>

From dineshkapoor27 at gmail.com  Thu Mar  3 05:42:57 2011
From: dineshkapoor27 at gmail.com (Dinesh Kapoor)
Date: Thu, 3 Mar 2011 18:12:57 +0530
Subject: [Twisted-Python] Question regarding the working of twisted
 python with celery
In-Reply-To: <20110302133435.2231.810980901.divmod.xquotient.101@localhost.localdomain>
References: <AANLkTi=g+q1_y6McTAaeSK10k=76RVbSdcU2o9nt7Tiw@mail.gmail.com>
	<20110302133435.2231.810980901.divmod.xquotient.101@localhost.localdomain>
Message-ID: <AANLkTi=gf=8+b+4M7xmgn-phewzHXe0+c5i2n6r5hvzX@mail.gmail.com>

Thanks Reza and Jean-Paul for your response. Actually, I tried investigating
a bit more that whether the reactor is in different process than the calling
celery task, and it doesn't seem to be the case. The workflow that I am
assuming is as follows:

1. Celery creates a worker process and assigns a task to it, which is our
Python code.
2. That python code is calling into the twisted library where the reactor
exists, so that reactor is in the same process as our python code.
3. Our code opens up a TCP socket to another process which is NOT related to
celery or twisted (it connects to freeswitch process).
4. When celery is run with concurrency of 2, then I tried printing out the
process ids of calling process in the reactor code, and I am getting 2
different pids, so I am assuming there are two seperate copies of reactor in
those separate tasks.
5. One thing that I have think that's happening is that the reactor gets
stuck at polling, and then once it times out, the data is written on the
socket. Is that possible? If yes, how can I get around it?
6. Jean-Paul, how does Ampoule compares to Twisted?

Thanks,
Dinesh




On Wed, Mar 2, 2011 at 7:04 PM, <exarkun at twistedmatrix.com> wrote:

> On 09:42 am, dineshkapoor27 at gmail.com wrote:
> >Hi,
> >
> >  I have run into a weird performance issue while working with twisted
> >and
> >using celery to schedule tasks on it. Here is my setup:
> >
> >1. Celery schedules a task which makes a TCP connection to a server
> >running
> >FreeSwitch
> >2. Celery is running with concurrency = 2.
> >3. I have changed my code so that I call reactor.callfromthread for all
> >reactor based work.
> >4. A lot of times once I schedule the celery task, I get delays ranging
> >from
> >3 - 30 seconds when I am running with Celery concurrency =2.
> >5. If I reduce the celery concurrency to 1, then everything works
> >great!
> >6. Upon debugging it a little bit more, it seems that the
> >selectReactor's
> >doSelect is where the code is getting stuck on the select().
> >
> >I dont know how to get around the delay, and I dont know who is causing
> >that
> >delay exactly. If there is more info that is needed then please let me
> >know.
> >Everything works fine when the Celery worker process is 1, but delay
> >starts
> >happening invariably when celery's worker processes >=2.
>
> I think Reza Lotun explained what's causing this problem.
>
> If you haven't looked at it yet, you might want to see if Ampoule can
> help you out.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110303/fafbccb5/attachment.html>

From tom at recursivedream.com  Thu Mar  3 07:03:59 2011
From: tom at recursivedream.com (Tom Davis)
Date: Thu, 3 Mar 2011 09:03:59 -0500
Subject: [Twisted-Python] PyCon 2011 Twisted Sprint
In-Reply-To: <332BE6AC-4DA1-45FD-95FB-00B9C2013457@twistedmatrix.com>
References: <20110208162454.1699.1277311042.divmod.xquotient.1389@localhost.localdomain>
	<20110303042836.2231.390810583.divmod.xquotient.119@localhost.localdomain>
	<6CA51688-7B5A-464A-AC62-1F673124385F@twistedmatrix.com>
	<AANLkTi=4oa73hfeqF64YHz4YK9gaadV-Z2McD8zZA9hh@mail.gmail.com>
	<332BE6AC-4DA1-45FD-95FB-00B9C2013457@twistedmatrix.com>
Message-ID: <AANLkTi=QpPZC0gFYXaJA8DeSTds71hC73DUJwQfAfQC-@mail.gmail.com>

On Thu, Mar 3, 2011 at 1:18 AM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

>
> On Mar 3, 2011, at 12:21 AM, Tom Davis wrote:
>
> On Wed, Mar 2, 2011 at 11:45 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:
>
>>
>> On Mar 2, 2011, at 11:28 PM, exarkun at twistedmatrix.com wrote:
>>
>> > On 8 Feb, 04:24 pm, exarkun at twistedmatrix.com wrote:
>> >> Hello all,
>> >>
>> >> Once again, we will be sprinting at PyCon.  I've just added Twisted to
>> >> <http://us.pycon.org/2011/sprints/projects/>.  If you plan to attend
>> >> (for any amount of time), please add your name to the attendees list.
>> >> Also feel free to suggest additional sprint topics.  We won't really
>> >> limit sprint topics to things planned in advance, but adding particular
>> >> things to the list is a probably a good way to attract more sprinters
>> >> and let people do any background research that might be necessary
>> >> before
>> >> the sprint actually starts.
>> >
>> > Just a reminder about this.  Please sign up if you plan to come!
>>
>> All levels of experience are welcome, so if you've never been to a sprint
>> before, we'd love to see you.
>>
>> Sign up as soon as you can though.  Sometimes space is allocated based on
>> these lists.  I'm not sure how it's going to work this year, but it's best
>> if we know approximately how many people will be there so we can be sure to
>> get a big enough room for everyone.
>>
>
> Finally signed up; last time the "You must login to edit" message was
> hardcoded *and* there was no link to the edit page. That was a confusing
> journey.
>
>
> Woah, awesome!  So you're going to be in Atlanta after all?  (Or am I
> mixing you up with someone else whose plans were uncertain?)
>
>
That was me, I'm just bad with status updates. Really excited for my first
PyCon and some concentrated Twisted hacking!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110303/47ad6cd1/attachment.html>

From glyph at twistedmatrix.com  Thu Mar  3 12:39:37 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 3 Mar 2011 14:39:37 -0500
Subject: [Twisted-Python] Asynchronous context in Twisted
In-Reply-To: <AANLkTikX_wkb5-jgmxQ7Y-3_ENurHS-COTOfBQN=vGX4@mail.gmail.com>
References: <AANLkTikX_wkb5-jgmxQ7Y-3_ENurHS-COTOfBQN=vGX4@mail.gmail.com>
Message-ID: <A5F1F2F0-A639-4B3A-A1D1-899F872F06CD@twistedmatrix.com>

On Mar 3, 2011, at 7:31 AM, Fantix King wrote:

> Hi,
> 
> I tried to make python.context work in asynchronous code between main loops. Anyone has similar experience to share please?
> 
> Not sure if I am rebuilding a wheel :P
> 
> http://code.google.com/p/little-site/source/browse/littlesite/custom_reactor.py

This is something I've often thought about doing in Twisted itself, actually :).  But I wasn't sure that chaining context would actually do anything practically useful most of the time.  Have you found that it's actually useful?  Have you managed to leverage this to, for example, get more informative error messages out of Deferred failures?

Doing it as a subclass like this is not optimal, as it limits you to one reactor (and the Select reactor is not really the best one).  A wrapper would be slightly more tricky (you'd have to deal with the places that the reactor passes itself through to things like Process and Port, so you'd have to create wrappers for those as well) but much more general.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110303/c578cf0d/attachment-0001.html>

From andrew at bemusement.org  Thu Mar  3 14:36:37 2011
From: andrew at bemusement.org (Andrew Bennetts)
Date: Fri, 4 Mar 2011 08:36:37 +1100
Subject: [Twisted-Python] Question regarding the working of twisted
 python with celery
In-Reply-To: <AANLkTi=gf=8+b+4M7xmgn-phewzHXe0+c5i2n6r5hvzX@mail.gmail.com>
References: <AANLkTi=g+q1_y6McTAaeSK10k=76RVbSdcU2o9nt7Tiw@mail.gmail.com>
	<20110302133435.2231.810980901.divmod.xquotient.101@localhost.localdomain>
	<AANLkTi=gf=8+b+4M7xmgn-phewzHXe0+c5i2n6r5hvzX@mail.gmail.com>
Message-ID: <20110303213637.GX3670@aihal.home.puzzling.org>

Dinesh Kapoor wrote:
[...]
>    4. When celery is run with concurrency of 2, then I tried printing out the
>    process ids of calling process in the reactor code, and I am getting 2
>    different pids, so I am assuming there are two seperate copies of reactor
>    in those separate tasks.

This sounds like the problem: you have instantiated one reactor, and
Celery (probably via the multiprocessing module) has used fork(), which
shares the reactor's internal state with the forked copy, which is not
safe.  In particular I suspect the 'waker' pipe that the reactor uses to
be notified is being shared between both processes, leading to
notifications of callFromThread etc to be noticed by the wrong copy.

The solution is to avoid starting the reactor until after the separate
processes have started.  I don't know how easy that is to arrange with
Celery.

-Andrew.




From jasonjwwilliams at gmail.com  Thu Mar  3 21:00:59 2011
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Thu, 3 Mar 2011 21:00:59 -0700
Subject: [Twisted-Python] Agent and "Cannot assign requested address"
Message-ID: <AANLkTi=Z=u+H=q0vHG1853eTN0Q8XeVQerptGCMAMrmK@mail.gmail.com>

Hi All,

I've got a situation where I'm using t.w.c.Agent to make 100,000 POST
request against a server. Each time a new Agent instance is built and
the request is sent using it. After about 20,000 requests, I get this
error:

Failure: twisted.internet.error.ConnectError: An error occurred while
connecting: 99: Cannot assign requested address.

Would building the Agent once and reusing the same instance avoid
this? I assume I've run out of client ports.

-J



From itamar at itamarst.org  Fri Mar  4 06:29:31 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Fri, 04 Mar 2011 08:29:31 -0500
Subject: [Twisted-Python] Agent and "Cannot assign requested address"
In-Reply-To: <AANLkTi=Z=u+H=q0vHG1853eTN0Q8XeVQerptGCMAMrmK@mail.gmail.com>
References: <AANLkTi=Z=u+H=q0vHG1853eTN0Q8XeVQerptGCMAMrmK@mail.gmail.com>
Message-ID: <1299245371.1656.8.camel@blake>

On Thu, 2011-03-03 at 21:00 -0700, Jason J. W. Williams wrote:
> Hi All,
> 
> I've got a situation where I'm using t.w.c.Agent to make 100,000 POST
> request against a server. Each time a new Agent instance is built and
> the request is sent using it. After about 20,000 requests, I get this
> error:
> 
> Failure: twisted.internet.error.ConnectError: An error occurred while
> connecting: 99: Cannot assign requested address.
> 
> Would building the Agent once and reusing the same instance avoid
> this? I assume I've run out of client ports.

Yes... except it doesn't support persistent connections yet. Do you
actually need to run all 100,000 in parallel? If not, set a cap on how
many requests can run in parallel.




From exarkun at twistedmatrix.com  Fri Mar  4 06:33:11 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 04 Mar 2011 13:33:11 -0000
Subject: [Twisted-Python] Agent and "Cannot assign requested address"
In-Reply-To: <1299245371.1656.8.camel@blake>
References: <AANLkTi=Z=u+H=q0vHG1853eTN0Q8XeVQerptGCMAMrmK@mail.gmail.com>
	<1299245371.1656.8.camel@blake>
Message-ID: <20110304133311.2231.1403604990.divmod.xquotient.121@localhost.localdomain>

On 01:29 pm, itamar at itamarst.org wrote:
>On Thu, 2011-03-03 at 21:00 -0700, Jason J. W. Williams wrote:
>>Hi All,
>>
>>I've got a situation where I'm using t.w.c.Agent to make 100,000 POST
>>request against a server. Each time a new Agent instance is built and
>>the request is sent using it. After about 20,000 requests, I get this
>>error:
>>
>>Failure: twisted.internet.error.ConnectError: An error occurred while
>>connecting: 99: Cannot assign requested address.
>>
>>Would building the Agent once and reusing the same instance avoid
>>this? I assume I've run out of client ports.
>
>Yes... except it doesn't support persistent connections yet. Do you
>actually need to run all 100,000 in parallel? If not, set a cap on how
>many requests can run in parallel.

It's worse than just "in parallel".  After the connection closes, it 
moves to TIME_WAIT for two minutes.  These count towards the limit as 
well.

Jean-Paul



From itamar at itamarst.org  Fri Mar  4 06:52:16 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Fri, 04 Mar 2011 08:52:16 -0500
Subject: [Twisted-Python] ANN: Fusion v0.3,
	a C++ integration layer for Twisted
Message-ID: <1299246736.1656.13.camel@blake>

Fusion allows you to implement protocols for TCP and UDP in C++,
minimizing data copying and function call overhead. Most people should
just stick to Python, of course :) Note that I have no code that uses
this version of Fusion, and unit tests (while next on my very
theoretical todo list) do not yet exist, so use with caution -- I'd love
to hear success stories from anyone who is using it.

v0.3 fixes a memory leak, and also allows Fusion to build on modern
versions of Python and modern compilers. I built it with Python 2.6 and
boost::python v1.40, but it should work with other versions as well.

http://itamarst.org/software/fusion-0.3.0.tar.gz (homepage of sorts at
http://itamarst.org/software/).

-Itamar




From itamar at itamarst.org  Fri Mar  4 06:53:48 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Fri, 04 Mar 2011 08:53:48 -0500
Subject: [Twisted-Python] Agent and "Cannot assign requested address"
In-Reply-To: <20110304133311.2231.1403604990.divmod.xquotient.121@localhost.localdomain>
References: <AANLkTi=Z=u+H=q0vHG1853eTN0Q8XeVQerptGCMAMrmK@mail.gmail.com>
	<1299245371.1656.8.camel@blake>
	<20110304133311.2231.1403604990.divmod.xquotient.121@localhost.localdomain>
Message-ID: <1299246828.1656.15.camel@blake>

On Fri, 2011-03-04 at 13:33 +0000, exarkun at twistedmatrix.com wrote:

> It's worse than just "in parallel".  After the connection closes, it 
> moves to TIME_WAIT for two minutes.  These count towards the limit as 
> well.

Oh right:
http://twistedmatrix.com/trac/ticket/1288

You could probably set that yourself with a little hacking until that
ticket is fixed.




From jasonjwwilliams at gmail.com  Fri Mar  4 10:09:59 2011
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Fri, 4 Mar 2011 10:09:59 -0700
Subject: [Twisted-Python] Agent and "Cannot assign requested address"
In-Reply-To: <1299246828.1656.15.camel@blake>
References: <AANLkTi=Z=u+H=q0vHG1853eTN0Q8XeVQerptGCMAMrmK@mail.gmail.com>
	<1299245371.1656.8.camel@blake>
	<20110304133311.2231.1403604990.divmod.xquotient.121@localhost.localdomain>
	<1299246828.1656.15.camel@blake>
Message-ID: <05DD6421-1AB3-4B1B-8AF9-264C9CE35CF4@gmail.com>

Actually, I think the TIME_WAIT is the problem. It's what I see in netstat, and the Agent requests are fired sequentially via yield inside a for loop (inlineCallbacks). So they shouldn't be running in parallel. 

The use case here is loading a Riak server with keys to prepare for a test. There's not a real way to get around sending one POST per key. 

How would I set the timeout value in Twisted? Or do I have to modify the timeout/keepalive systemwide in /proc?

-J

Sent via iPhone

Is your e-mail Premiere?

On Mar 4, 2011, at 6:53, Itamar Turner-Trauring <itamar at itamarst.org> wrote:

> On Fri, 2011-03-04 at 13:33 +0000, exarkun at twistedmatrix.com wrote:
> 
>> It's worse than just "in parallel".  After the connection closes, it 
>> moves to TIME_WAIT for two minutes.  These count towards the limit as 
>> well.
> 
> Oh right:
> http://twistedmatrix.com/trac/ticket/1288
> 
> You could probably set that yourself with a little hacking until that
> ticket is fixed.
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From exarkun at twistedmatrix.com  Fri Mar  4 12:40:14 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 04 Mar 2011 19:40:14 -0000
Subject: [Twisted-Python] Agent and "Cannot assign requested address"
In-Reply-To: <05DD6421-1AB3-4B1B-8AF9-264C9CE35CF4@gmail.com>
References: <AANLkTi=Z=u+H=q0vHG1853eTN0Q8XeVQerptGCMAMrmK@mail.gmail.com>
	<1299245371.1656.8.camel@blake>
	<20110304133311.2231.1403604990.divmod.xquotient.121@localhost.localdomain>
	<1299246828.1656.15.camel@blake>
	<05DD6421-1AB3-4B1B-8AF9-264C9CE35CF4@gmail.com>
Message-ID: <20110304194014.2231.1452972868.divmod.xquotient.147@localhost.localdomain>

On 05:09 pm, jasonjwwilliams at gmail.com wrote:
>Actually, I think the TIME_WAIT is the problem. It's what I see in 
>netstat, and the Agent requests are fired sequentially via yield inside 
>a for loop (inlineCallbacks). So they shouldn't be running in parallel.
>
>The use case here is loading a Riak server with keys to prepare for a 
>test. There's not a real way to get around sending one POST per key.
>
>How would I set the timeout value in Twisted? Or do I have to modify 
>the timeout/keepalive systemwide in /proc?

As far as I know, there are only system-wide settings for this value on 
all the major platforms.

It seems like you'll be happiest using persistent connections, though, 
once Agent actually offers those.

Jean-Paul



From jasonjwwilliams at gmail.com  Fri Mar  4 13:20:14 2011
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Fri, 4 Mar 2011 13:20:14 -0700
Subject: [Twisted-Python] Agent and "Cannot assign requested address"
In-Reply-To: <20110304194014.2231.1452972868.divmod.xquotient.147@localhost.localdomain>
References: <AANLkTi=Z=u+H=q0vHG1853eTN0Q8XeVQerptGCMAMrmK@mail.gmail.com>
	<1299245371.1656.8.camel@blake>
	<20110304133311.2231.1403604990.divmod.xquotient.121@localhost.localdomain>
	<1299246828.1656.15.camel@blake>
	<05DD6421-1AB3-4B1B-8AF9-264C9CE35CF4@gmail.com>
	<20110304194014.2231.1452972868.divmod.xquotient.147@localhost.localdomain>
Message-ID: <AANLkTikhj2OX+B3n_1XLF82gxQjibV1VKMW1BW5nykt2@mail.gmail.com>

Yeah. Actually that's the reason I refactored txRiak to use Agent
instead of HTTPClient, so it could take advantage of pooling when that
comes down the pike for Agent (well that and HTTP 1.1 support).

I guess I'll just throttle down the load rate. Thank you for your help.

-J

On Fri, Mar 4, 2011 at 12:40 PM,  <exarkun at twistedmatrix.com> wrote:
> On 05:09 pm, jasonjwwilliams at gmail.com wrote:
>>Actually, I think the TIME_WAIT is the problem. It's what I see in
>>netstat, and the Agent requests are fired sequentially via yield inside
>>a for loop (inlineCallbacks). So they shouldn't be running in parallel.
>>
>>The use case here is loading a Riak server with keys to prepare for a
>>test. There's not a real way to get around sending one POST per key.
>>
>>How would I set the timeout value in Twisted? Or do I have to modify
>>the timeout/keepalive systemwide in /proc?
>
> As far as I know, there are only system-wide settings for this value on
> all the major platforms.
>
> It seems like you'll be happiest using persistent connections, though,
> once Agent actually offers those.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From jasonjwwilliams at gmail.com  Fri Mar  4 13:20:14 2011
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Fri, 4 Mar 2011 13:20:14 -0700
Subject: [Twisted-Python] Agent and "Cannot assign requested address"
In-Reply-To: <20110304194014.2231.1452972868.divmod.xquotient.147@localhost.localdomain>
References: <AANLkTi=Z=u+H=q0vHG1853eTN0Q8XeVQerptGCMAMrmK@mail.gmail.com>
	<1299245371.1656.8.camel@blake>
	<20110304133311.2231.1403604990.divmod.xquotient.121@localhost.localdomain>
	<1299246828.1656.15.camel@blake>
	<05DD6421-1AB3-4B1B-8AF9-264C9CE35CF4@gmail.com>
	<20110304194014.2231.1452972868.divmod.xquotient.147@localhost.localdomain>
Message-ID: <AANLkTikhj2OX+B3n_1XLF82gxQjibV1VKMW1BW5nykt2@mail.gmail.com>

Yeah. Actually that's the reason I refactored txRiak to use Agent
instead of HTTPClient, so it could take advantage of pooling when that
comes down the pike for Agent (well that and HTTP 1.1 support).

I guess I'll just throttle down the load rate. Thank you for your help.

-J

On Fri, Mar 4, 2011 at 12:40 PM,  <exarkun at twistedmatrix.com> wrote:
> On 05:09 pm, jasonjwwilliams at gmail.com wrote:
>>Actually, I think the TIME_WAIT is the problem. It's what I see in
>>netstat, and the Agent requests are fired sequentially via yield inside
>>a for loop (inlineCallbacks). So they shouldn't be running in parallel.
>>
>>The use case here is loading a Riak server with keys to prepare for a
>>test. There's not a real way to get around sending one POST per key.
>>
>>How would I set the timeout value in Twisted? Or do I have to modify
>>the timeout/keepalive systemwide in /proc?
>
> As far as I know, there are only system-wide settings for this value on
> all the major platforms.
>
> It seems like you'll be happiest using persistent connections, though,
> once Agent actually offers those.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From juanito1982 at gmail.com  Sat Mar  5 18:00:02 2011
From: juanito1982 at gmail.com (=?ISO-8859-1?Q?Juan_Antonio_Iba=F1ez_Santorum?=)
Date: Sun, 6 Mar 2011 02:00:02 +0100
Subject: [Twisted-Python] Debug logging
Message-ID: <AANLkTikitvNJEvEWpry_GUSFTQBLO8RyS5BcS_oQsjjn@mail.gmail.com>

Hello!

   I am running a smaill app using twistd. All works OK except I cannot get
debugging messages into the log. I think I may to set logging level but I
don't know if possible nor where it can be done. I am using the python
logging module. Any help wourd be appreciated.

Regards
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110306/dafe5c3e/attachment-0001.html>

From thomasdrake1 at gmail.com  Sat Mar  5 18:12:23 2011
From: thomasdrake1 at gmail.com (Thomas Drake)
Date: Sat, 5 Mar 2011 17:12:23 -0800
Subject: [Twisted-Python] Debug logging
In-Reply-To: <AANLkTikitvNJEvEWpry_GUSFTQBLO8RyS5BcS_oQsjjn@mail.gmail.com>
References: <AANLkTikitvNJEvEWpry_GUSFTQBLO8RyS5BcS_oQsjjn@mail.gmail.com>
Message-ID: <A5A6283C-37CC-45A4-99F2-178EBFB87F9E@gmail.com>

Why not try:

from twisted.python import log

log.err('an error happened')
log.msg('something nice happened')

If you're set on using the logging module, why not read this:

http://twistedmatrix.com/documents/current/core/howto/logging.html

Tad

On Mar 5, 2011, at 5:00 PM, Juan Antonio Ibañez Santorum wrote:

> Hello!
> 
>    I am running a smaill app using twistd. All works OK except I cannot get debugging messages into the log. I think I may to set logging level but I don't know if possible nor where it can be done. I am using the python logging module. Any help wourd be appreciated.
> 
> Regards
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From exarkun at twistedmatrix.com  Sat Mar  5 22:05:25 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 06 Mar 2011 05:05:25 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1299387925.43.47790818@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110306/f089fad4/attachment.html>

From exarkun at twistedmatrix.com  Sat Mar  5 22:51:35 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 06 Mar 2011 05:51:35 -0000
Subject: [Twisted-Python] Debug logging
In-Reply-To: <A5A6283C-37CC-45A4-99F2-178EBFB87F9E@gmail.com>
References: <AANLkTikitvNJEvEWpry_GUSFTQBLO8RyS5BcS_oQsjjn@mail.gmail.com>
	<A5A6283C-37CC-45A4-99F2-178EBFB87F9E@gmail.com>
Message-ID: <20110306055135.2231.1257257100.divmod.xquotient.179@localhost.localdomain>

On 01:12 am, thomasdrake1 at gmail.com wrote:
>Why not try:
>
>from twisted.python import log
>
>log.err('an error happened')

except you should really only pass Failures to log.err, or None if 
you're calling it in an `except` block.

Jean-Paul
>log.msg('something nice happened')
>
>If you're set on using the logging module, why not read this:
>
>http://twistedmatrix.com/documents/current/core/howto/logging.html
>
>Tad
>
>On Mar 5, 2011, at 5:00 PM, Juan Antonio Iba�ez Santorum wrote:
>>Hello!
>>
>>    I am running a smaill app using twistd. All works OK except I 
>>cannot get debugging messages into the log. I think I may to set 
>>logging level but I don't know if possible nor where it can be done. I 
>>am using the python logging module. Any help wourd be appreciated.
>>
>>Regards
>>_______________________________________________
>>Twisted-Python mailing list
>>Twisted-Python at twistedmatrix.com
>>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From abierbaum at gmail.com  Mon Mar  7 08:19:07 2011
From: abierbaum at gmail.com (Allen Bierbaum)
Date: Mon, 7 Mar 2011 09:19:07 -0600
Subject: [Twisted-Python] Authentication & Access Control system for web
	services
Message-ID: <AANLkTi=4QO8d6jSB8=Y3wuO_uW6LJWd45pQ2C-hdz+xS@mail.gmail.com>

I have a REST service I have implemented using twisted.web.  Based
upon a new requirement I need to put role-based access control
security on the service and am trying to find the most twisted way to
do it.

I would like to have:
- Username / password login that is checked against a backend database
- Roles and associated privileges associated with each user
- Administration interface to edit users, roles, and privileges
- "Simple" way to configure the access control requirements on the
services. (ex: which services need which roles)

Before I role my own code I wanted to check and see if there are any
addons for this or if anyone else had attacked this problem with
twisted and had some open source code I could look at.

I have found a couple of projects for WSGI that I may try to pull
ideas from, but I haven't yet found anything that uses the twisted
resource model.  (http://authkit.org/,
http://docs.repoze.org/who/2.0/)

Any pointers to twisted projects I could leverage?

-Allen



From jasonjwwilliams at gmail.com  Mon Mar  7 10:13:05 2011
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Mon, 7 Mar 2011 10:13:05 -0700
Subject: [Twisted-Python] Authentication & Access Control system for web
	services
In-Reply-To: <AANLkTi=4QO8d6jSB8=Y3wuO_uW6LJWd45pQ2C-hdz+xS@mail.gmail.com>
References: <AANLkTi=4QO8d6jSB8=Y3wuO_uW6LJWd45pQ2C-hdz+xS@mail.gmail.com>
Message-ID: <1016436B-1B11-4EDC-8BF6-55D8FDE9C461@gmail.com>

Hi Allen,

There's Twisted Cred you could build something on. I've also got a framework my company built internally on top of Twisted Web that I've been planning to open source once we make the unit tests more robust. Would be happy to share it with you. You decorate the render_ method with the permissions the caller must possess. 

-J

Sent via iPhone

Is your e-mail Premiere?

On Mar 7, 2011, at 8:19, Allen Bierbaum <abierbaum at gmail.com> wrote:

> I have a REST service I have implemented using twisted.web.  Based
> upon a new requirement I need to put role-based access control
> security on the service and am trying to find the most twisted way to
> do it.
> 
> I would like to have:
> - Username / password login that is checked against a backend database
> - Roles and associated privileges associated with each user
> - Administration interface to edit users, roles, and privileges
> - "Simple" way to configure the access control requirements on the
> services. (ex: which services need which roles)
> 
> Before I role my own code I wanted to check and see if there are any
> addons for this or if anyone else had attacked this problem with
> twisted and had some open source code I could look at.
> 
> I have found a couple of projects for WSGI that I may try to pull
> ideas from, but I haven't yet found anything that uses the twisted
> resource model.  (http://authkit.org/,
> http://docs.repoze.org/who/2.0/)
> 
> Any pointers to twisted projects I could leverage?
> 
> -Allen
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From abierbaum at gmail.com  Mon Mar  7 10:49:55 2011
From: abierbaum at gmail.com (Allen Bierbaum)
Date: Mon, 7 Mar 2011 11:49:55 -0600
Subject: [Twisted-Python] Authentication & Access Control system for web
	services
In-Reply-To: <1016436B-1B11-4EDC-8BF6-55D8FDE9C461@gmail.com>
References: <AANLkTi=4QO8d6jSB8=Y3wuO_uW6LJWd45pQ2C-hdz+xS@mail.gmail.com>
	<1016436B-1B11-4EDC-8BF6-55D8FDE9C461@gmail.com>
Message-ID: <AANLkTimSOqko1fZ99rO0rARNKw4pNCL2M6v=4QFm7z6U@mail.gmail.com>

I would be interested to see anything you have and are willing to share.

I don't want to role my own, but it looks like I am going to have to
and the more I can learn from what you have done, the better. :)

-Allen


On Mon, Mar 7, 2011 at 11:13 AM, Jason J. W. Williams
<jasonjwwilliams at gmail.com> wrote:
> Hi Allen,
>
> There's Twisted Cred you could build something on. I've also got a framework my company built internally on top of Twisted Web that I've been planning to open source once we make the unit tests more robust. Would be happy to share it with you. You decorate the render_ method with the permissions the caller must possess.
>
> -J
>
> Sent via iPhone
>
> Is your e-mail Premiere?
>
> On Mar 7, 2011, at 8:19, Allen Bierbaum <abierbaum at gmail.com> wrote:
>
>> I have a REST service I have implemented using twisted.web.  Based
>> upon a new requirement I need to put role-based access control
>> security on the service and am trying to find the most twisted way to
>> do it.
>>
>> I would like to have:
>> - Username / password login that is checked against a backend database
>> - Roles and associated privileges associated with each user
>> - Administration interface to edit users, roles, and privileges
>> - "Simple" way to configure the access control requirements on the
>> services. (ex: which services need which roles)
>>
>> Before I role my own code I wanted to check and see if there are any
>> addons for this or if anyone else had attacked this problem with
>> twisted and had some open source code I could look at.
>>
>> I have found a couple of projects for WSGI that I may try to pull
>> ideas from, but I haven't yet found anything that uses the twisted
>> resource model.  (http://authkit.org/,
>> http://docs.repoze.org/who/2.0/)
>>
>> Any pointers to twisted projects I could leverage?
>>
>> -Allen
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From facundobatista at gmail.com  Mon Mar  7 16:48:22 2011
From: facundobatista at gmail.com (Facundo Batista)
Date: Mon, 7 Mar 2011 20:48:22 -0300
Subject: [Twisted-Python] Failing tests in trunk
Message-ID: <AANLkTinZHZaq1hJW8YoHRFYm+c5Nwh62Bkv6nkDpExqt@mail.gmail.com>

I branched trunk from the LP repository. Running the tests all
together ("trial twisted"), consistently makes me fail the following
12:

twisted.conch.test.test_cftp.ListingTests.test_newFile
twisted.conch.test.test_cftp.ListingTests.test_newSingleDigitDayOfMonth
twisted.conch.test.test_cftp.ListingTests.test_oldFile
twisted.conch.test.test_cftp.ListingTests.test_oldSingleDigitDayOfMonth
twisted.mail.test.test_imap.NewFetchTestCase.testFetchAll
twisted.mail.test.test_imap.NewFetchTestCase.testFetchAllUID
twisted.mail.test.test_imap.NewFetchTestCase.testFetchFast
twisted.mail.test.test_imap.NewFetchTestCase.testFetchFastUID
twisted.mail.test.test_imap.NewFetchTestCase.testFetchFull
twisted.mail.test.test_imap.NewFetchTestCase.testFetchFullUID
twisted.mail.test.test_imap.NewFetchTestCase.testFetchInternalDate
twisted.mail.test.test_imap.NewFetchTestCase.testFetchInternalDateUID

However, if I run the tests doing "trial twisted.mail" or "trial
twisted.conch", they never fail.

I still didn't debug this, but I wanted to see if somebody experienced
something similar to this.

Regards,

-- 
.    Facundo

Blog: http://www.taniquetil.com.ar/plog/
PyAr: http://www.python.org/ar/



From exarkun at twistedmatrix.com  Mon Mar  7 17:34:28 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 08 Mar 2011 00:34:28 -0000
Subject: [Twisted-Python] Failing tests in trunk
In-Reply-To: <AANLkTinZHZaq1hJW8YoHRFYm+c5Nwh62Bkv6nkDpExqt@mail.gmail.com>
References: <AANLkTinZHZaq1hJW8YoHRFYm+c5Nwh62Bkv6nkDpExqt@mail.gmail.com>
Message-ID: <20110308003428.2231.215396262.divmod.xquotient.196@localhost.localdomain>

On 7 Mar, 11:48 pm, facundobatista at gmail.com wrote:
>I branched trunk from the LP repository. Running the tests all
>together ("trial twisted"), consistently makes me fail the following
>12:
>
>twisted.conch.test.test_cftp.ListingTests.test_newFile
>twisted.conch.test.test_cftp.ListingTests.test_newSingleDigitDayOfMonth
>twisted.conch.test.test_cftp.ListingTests.test_oldFile
>twisted.conch.test.test_cftp.ListingTests.test_oldSingleDigitDayOfMonth
>twisted.mail.test.test_imap.NewFetchTestCase.testFetchAll
>twisted.mail.test.test_imap.NewFetchTestCase.testFetchAllUID
>twisted.mail.test.test_imap.NewFetchTestCase.testFetchFast
>twisted.mail.test.test_imap.NewFetchTestCase.testFetchFastUID
>twisted.mail.test.test_imap.NewFetchTestCase.testFetchFull
>twisted.mail.test.test_imap.NewFetchTestCase.testFetchFullUID
>twisted.mail.test.test_imap.NewFetchTestCase.testFetchInternalDate
>twisted.mail.test.test_imap.NewFetchTestCase.testFetchInternalDateUID
>
>However, if I run the tests doing "trial twisted.mail" or "trial
>twisted.conch", they never fail.
>
>I still didn't debug this, but I wanted to see if somebody experienced
>something similar to this.

None of these are known failures:

    http://buildbot.twistedmatrix.com/boxes-supported

Just looking at the list of failing tests, I would make a small bet that 
the failures are caused by your locale setting somehow.

Jean-Paul



From jason.heeris at gmail.com  Tue Mar  8 01:38:02 2011
From: jason.heeris at gmail.com (Jason Heeris)
Date: Tue, 8 Mar 2011 16:38:02 +0800
Subject: [Twisted-Python] Slow data transfer with Twisted + socat + Windows
Message-ID: <AANLkTinobtkCT9uv4VVXHr0t4OQ5S-ph+Tx2Yn66T3bZ@mail.gmail.com>

I'm writing an application with Twisted/GTK to manage a serial device,
for use on both Windows and Linux. Unfortunately I can't use serial
comms directly under Windows[1], so my workaround is to launch
socat[2] in a subprocess to relay data between a local TCP port and
the serial port. The socat command I use is:

    socat TCP4-LISTEN:31415 /dev/com4,raw,echo=0,b57600

I can then send and receive data over localhost:31415 same as I would
for a serial port.

The trouble is, a transaction that takes a minute under Linux (using
*either* direct serial comms or the same socat subprocess approach)
now takes more than 50 times as long under Windows.

I've attached the script I'm using to test, mainly so it's clear what
I'm doing — although it's useless unless you happen to have a serial
device using a protocol you can shoehorn into that script. I've also
attached the output where you can see the difference between different
reactors on different platforms. (In my app I use
reactor.spawnProcess(...), but I'm not doing that here.)

Basically, under Linux either approach takes 4 seconds; under Windows
the SelectReactor takes 30s, and the gtk2reactor takes 220s!

Profiling the "reactor.run()" call on the different platforms (both
for the select reactor) showed that (a) most time was spent in the
select.select call, and (b) the time spent in select was 8 times more
under Windows than Linux. I have no idea if this is useful information
or not.

I'm pretty sure it's not a socat-specific issue, because I get the
same problem if I use com2tcp[3]. It could be Cygwin related, but I
don't know how determine that for sure. Also, the fact that it runs
slower using the gtk2reactor (vs. selectreactor) suggests to me that
it could be my code, not theirs.

I found an old Cygwin thread[4] that claimed setting NODELAY on the
listening socket helped with a similar problem, but using

    > socat TCP4-LISTEN:31415,nodelay [etc]

...made no difference.

So I'm a bit stuck. Does anyone know how I can narrow it down further?
Has someone else noticed slow TCP behaviour under Windows? Or Cygwin
utilities? Have I made some glaringly obvious mistake in my script
there?

Any help appreciated. :)

Cheers,
Jason

[1] http://twistedmatrix.com/trac/ticket/4862
[2] http://www.dest-unreach.org/socat/
[3] http://com0com.sourceforge.net/
[4] http://www.mail-archive.com/cygwin at cygwin.com/msg66791.html
-------------- next part --------------
====
WINDOWS
====

>python socat_test.py
Using reactor: SelectReactor
Connection made!
Progress: 0.00
Progress: 0.10
Progress: 0.20
Progress: 0.30
Progress: 0.40
Progress: 0.50
Progress: 0.60
Progress: 0.70
Progress: 0.80
Progress: 0.90
Progress: 1.00
Time: 28.279000

>python socat_test.py
Using reactor: PortableGtkReactor
Connection made!
Progress: 0.00
Progress: 0.10
Progress: 0.20
Progress: 0.30
Progress: 0.40
Progress: 0.50
Progress: 0.60
Progress: 0.70
Progress: 0.80
Progress: 0.90
Progress: 1.00
Time: 222.143000

====
LINUX
====

$ python socat_test.py 
Using reactor: SelectReactor
Connection made!
Progress: 0.00
Progress: 0.10
Progress: 0.20
Progress: 0.30
Progress: 0.40
Progress: 0.50
Progress: 0.60
Progress: 0.70
Progress: 0.80
Progress: 0.90
Progress: 1.00
Time: 4.030676

$ python socat_test.py 
Using reactor: Gtk2Reactor
Connection made!
Progress: 0.00
Progress: 0.10
Progress: 0.20
Progress: 0.30
Progress: 0.40
Progress: 0.50
Progress: 0.60
Progress: 0.70
Progress: 0.80
Progress: 0.90
Progress: 1.00
Time: 4.032430

-------------- next part --------------
A non-text attachment was scrubbed...
Name: socat_test.py
Type: text/x-python
Size: 2643 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20110308/6162edde/attachment-0002.py>

From facundobatista at gmail.com  Tue Mar  8 05:04:50 2011
From: facundobatista at gmail.com (Facundo Batista)
Date: Tue, 8 Mar 2011 09:04:50 -0300
Subject: [Twisted-Python] Failing tests in trunk
In-Reply-To: <20110308003428.2231.215396262.divmod.xquotient.196@localhost.localdomain>
References: <AANLkTinZHZaq1hJW8YoHRFYm+c5Nwh62Bkv6nkDpExqt@mail.gmail.com>
	<20110308003428.2231.215396262.divmod.xquotient.196@localhost.localdomain>
Message-ID: <AANLkTim_CtDL9qm1aq9i6yc_CGFjP62-RfKyHSgGR+HY@mail.gmail.com>

On Mon, Mar 7, 2011 at 9:34 PM,  <exarkun at twistedmatrix.com> wrote:

> None of these are known failures:
>
>    http://buildbot.twistedmatrix.com/boxes-supported
>
> Just looking at the list of failing tests, I would make a small bet that
> the failures are caused by your locale setting somehow.

I thought of that, but why would the test pass when running alone?

I'll debug this.

-- 
.    Facundo

Blog: http://www.taniquetil.com.ar/plog/
PyAr: http://www.python.org/ar/



From jasonjwwilliams at gmail.com  Tue Mar  8 12:26:05 2011
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Tue, 8 Mar 2011 12:26:05 -0700
Subject: [Twisted-Python] Paisley 0.3 Released
Message-ID: <AANLkTi=GCG8SzjvE+rZQxZP3Q1MxhUw6z7AZ5dGDoaxW@mail.gmail.com>

Hello,

We wanted to let everyone know that we've released version 0.3 of
Paisley (the CouchDB client for Twisted Python). Among the new
features:

Enhancements

   * Added CouchDB authentication support (supply username and
password args when instantiating)
   * Re-factored underlying HTTP transport to use Twisted Web Agent
(will allow connection pooling in the future).
   * Re-factored code into formal Python package. API compatible with
old package layout.

Bug Fixes

   * Fixed attachment handling so it returns the attachment instead of
the owning document (dwb)

You can get it from Github or pypi:

* http://github.com/smcq/paisley

* http://pypi.python.org/pypi/paisley/0.3

Hopefully the new changes will be helpful to folks. Please let us know
if you have any questions.

-J



From michaelnt at gmail.com  Tue Mar  8 12:30:05 2011
From: michaelnt at gmail.com (Michael Thompson)
Date: Tue, 8 Mar 2011 19:30:05 +0000
Subject: [Twisted-Python] Failing tests in trunk
In-Reply-To: <AANLkTim_CtDL9qm1aq9i6yc_CGFjP62-RfKyHSgGR+HY@mail.gmail.com>
References: <AANLkTinZHZaq1hJW8YoHRFYm+c5Nwh62Bkv6nkDpExqt@mail.gmail.com>
	<20110308003428.2231.215396262.divmod.xquotient.196@localhost.localdomain>
	<AANLkTim_CtDL9qm1aq9i6yc_CGFjP62-RfKyHSgGR+HY@mail.gmail.com>
Message-ID: <AANLkTim8RnKa3+r3sHPkjmCpZGiJfx7JgE7S26KpDe-i@mail.gmail.com>

On 8 March 2011 12:04, Facundo Batista <facundobatista at gmail.com> wrote:
> On Mon, Mar 7, 2011 at 9:34 PM,  <exarkun at twistedmatrix.com> wrote:
>
>> None of these are known failures:
>>
>>    http://buildbot.twistedmatrix.com/boxes-supported
>>
>> Just looking at the list of failing tests, I would make a small bet that
>> the failures are caused by your locale setting somehow.
>
> I thought of that, but why would the test pass when running alone?

Sometimes a test can leave things running which causes later tests to
fail, trial tries to spot this but doesn't always succeed

You can try running the tests in a different order, there's a switch
to get trial to do that for you, and you can try to isolate which
earlier tests make the tests fail and then examine them.

Michael



From michaelnt at gmail.com  Tue Mar  8 12:49:16 2011
From: michaelnt at gmail.com (Michael Thompson)
Date: Tue, 8 Mar 2011 19:49:16 +0000
Subject: [Twisted-Python] Slow data transfer with Twisted + socat +
	Windows
In-Reply-To: <AANLkTinobtkCT9uv4VVXHr0t4OQ5S-ph+Tx2Yn66T3bZ@mail.gmail.com>
References: <AANLkTinobtkCT9uv4VVXHr0t4OQ5S-ph+Tx2Yn66T3bZ@mail.gmail.com>
Message-ID: <AANLkTi=ayQhhLOyP=PKh7Qpgb-v7sbXRSwzA_wxe7Pvy@mail.gmail.com>

On 8 March 2011 08:38, Jason Heeris <jason.heeris at gmail.com> wrote:
> I'm writing an application with Twisted/GTK to manage a serial device,
> for use on both Windows and Linux. Unfortunately I can't use serial
> comms directly under Windows[1], so my workaround is to launch
> socat[2] in a subprocess to relay data between a local TCP port and
> the serial port. The socat command I use is:
>
>    socat TCP4-LISTEN:31415 /dev/com4,raw,echo=0,b57600
>
> I can then send and receive data over localhost:31415 same as I would
> for a serial port.
>
> The trouble is, a transaction that takes a minute under Linux (using
> *either* direct serial comms or the same socat subprocess approach)
> now takes more than 50 times as long under Windows.
>
> I've attached the script I'm using to test, mainly so it's clear what
> I'm doing — although it's useless unless you happen to have a serial
> device using a protocol you can shoehorn into that script. I've also
> attached the output where you can see the difference between different
> reactors on different platforms. (In my app I use
> reactor.spawnProcess(...), but I'm not doing that here.)
>
> Basically, under Linux either approach takes 4 seconds; under Windows
> the SelectReactor takes 30s, and the gtk2reactor takes 220s!
>
> Profiling the "reactor.run()" call on the different platforms (both
> for the select reactor) showed that (a) most time was spent in the
> select.select call, and (b) the time spent in select was 8 times more
> under Windows than Linux. I have no idea if this is useful information
> or not.
>
> I'm pretty sure it's not a socat-specific issue, because I get the
> same problem if I use com2tcp[3]. It could be Cygwin related, but I
> don't know how determine that for sure. Also, the fact that it runs
> slower using the gtk2reactor (vs. selectreactor) suggests to me that
> it could be my code, not theirs.
>
> I found an old Cygwin thread[4] that claimed setting NODELAY on the
> listening socket helped with a similar problem, but using
>
>    > socat TCP4-LISTEN:31415,nodelay [etc]
>
> ...made no difference.
>
> So I'm a bit stuck. Does anyone know how I can narrow it down further?
> Has someone else noticed slow TCP behaviour under Windows? Or Cygwin
> utilities? Have I made some glaringly obvious mistake in my script
> there?

Does you program just write via TCP to this serial device, it doesn't
do anything else that could block?

Have you tried running this under different reactors?

Running the windows program against the Linux socat device might help
to reduce the number of variables.

Michael



From jason.heeris at gmail.com  Tue Mar  8 18:47:32 2011
From: jason.heeris at gmail.com (Jason Heeris)
Date: Wed, 9 Mar 2011 09:47:32 +0800
Subject: [Twisted-Python] Slow data transfer with Twisted + socat +
	Windows
In-Reply-To: <AANLkTi=ayQhhLOyP=PKh7Qpgb-v7sbXRSwzA_wxe7Pvy@mail.gmail.com>
References: <AANLkTinobtkCT9uv4VVXHr0t4OQ5S-ph+Tx2Yn66T3bZ@mail.gmail.com>
	<AANLkTi=ayQhhLOyP=PKh7Qpgb-v7sbXRSwzA_wxe7Pvy@mail.gmail.com>
Message-ID: <AANLkTimBHJnVQfVhvFWQT6XB4MOTQW4YmABV5KoxJQLo@mail.gmail.com>

On 9 March 2011 03:49, Michael Thompson <michaelnt at gmail.com> wrote:
> Does you program just write via TCP to this serial device, it doesn't
> do anything else that could block?

Both the "bare bones" script and the real app writes and reads from
the device, so I wouldn't expect full speed communications. But I
can't see anything else in my script that might actually block.

> Have you tried running this under different reactors?

Yep — no difference under Linux, but the GTK reactor is slower than
the select reactor under Windows (see original email for times).

> Running the windows program against the Linux socat device might help
> to reduce the number of variables.

Aha! Didn't think of that, but interesting results...

socat on Linux, socat_test.py on Windows VM:
  - select reactor: 4s
  - win32reactor: 4s
  - gtk reactor: 220s

socat on Windows VM, socat_test.py on Linux:
  - select reactor: 30s
  - gtk reactor: 30s

Interesting, but not exactly clarifying...

— Jason



From jasonjwwilliams at gmail.com  Tue Mar  8 22:58:01 2011
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Tue, 8 Mar 2011 22:58:01 -0700
Subject: [Twisted-Python] txRiakIdx: Twisted Riak library implementing
	transparent indexing
Message-ID: <AANLkTi=ek2Fe0oto9gdtwmw4w0-kUrbQx+o5jRTcN+6i@mail.gmail.com>

Hi Guys,

I've put together a library for my company's needs to implement
secondary indexes in Riak transparently. It's built on top of Ray
Cote's great txRIak library, and should drop in transparently anywhere
txRiak is used. We've open sourced it in case it's useful for anyone
else:

https://github.com/williamsjj/txriakidx

Comments/thoughts are greatly appreciated.

-J



From michaelnt at gmail.com  Wed Mar  9 00:02:58 2011
From: michaelnt at gmail.com (Michael Thompson)
Date: Wed, 9 Mar 2011 07:02:58 +0000
Subject: [Twisted-Python] Fwd: Slow data transfer with Twisted + socat +
	Windows
In-Reply-To: <AANLkTikdbsKHFOmxx_6KZS1O5Onh3aoyPPVsOc-p5c4x@mail.gmail.com>
References: <AANLkTinobtkCT9uv4VVXHr0t4OQ5S-ph+Tx2Yn66T3bZ@mail.gmail.com>
	<AANLkTi=ayQhhLOyP=PKh7Qpgb-v7sbXRSwzA_wxe7Pvy@mail.gmail.com>
	<AANLkTimBHJnVQfVhvFWQT6XB4MOTQW4YmABV5KoxJQLo@mail.gmail.com>
	<AANLkTikdbsKHFOmxx_6KZS1O5Onh3aoyPPVsOc-p5c4x@mail.gmail.com>
Message-ID: <AANLkTi=Z4SPc1a7zJ_YbEg+ze_bZ-c3nVufJSD0=gJHo@mail.gmail.com>

---------- Forwarded message ----------
From: Michael Thompson <michaelnt at gmail.com>
Date: 9 March 2011 07:02
Subject: Re: [Twisted-Python] Slow data transfer with Twisted + socat + Windows
To: Jason Heeris <jason.heeris at gmail.com>


On 9 March 2011 01:47, Jason Heeris <jason.heeris at gmail.com> wrote:
> On 9 March 2011 03:49, Michael Thompson <michaelnt at gmail.com> wrote:
>> Does you program just write via TCP to this serial device, it doesn't
>> do anything else that could block?
>
> Both the "bare bones" script and the real app writes and reads from
> the device, so I wouldn't expect full speed communications. But I
> can't see anything else in my script that might actually block.
>
>> Have you tried running this under different reactors?
>
> Yep — no difference under Linux, but the GTK reactor is slower than
> the select reactor under Windows (see original email for times).
>
>> Running the windows program against the Linux socat device might help
>> to reduce the number of variables.
>
> Aha! Didn't think of that, but interesting results...
>
> socat on Linux, socat_test.py on Windows VM:
>  - select reactor: 4s
>  - win32reactor: 4s
>  - gtk reactor: 220s
>
> socat on Windows VM, socat_test.py on Linux:
>  - select reactor: 30s
>  - gtk reactor: 30s
>
> Interesting, but not exactly clarifying...

And from your first email

socat on Windows, socat_test.py on Windows VM

select 30s
gtk reactor 220s

My read of these results is that socat on windows limits the
performance to 30s and in addition the gtkreactor on windows has
performance problems.

The gtkreactor on windows has a different implementation which seems
to be missing any way for the GTK loop to notify the reactor of IO.
You could try changing the timeout from 0.1 to something smaller, but
that will probably hammer the CPU when idle.

pyserial includes an example that makes a serial port accessible of
TCP you could see if that is any faster than socat.

Perhaps you can write a serial to TCP adaptor that encapsulates the
serial logic so reduce the IO between this application and the GTK app
to a message like start_sync, stop_sync.

Michael



From jason.heeris at gmail.com  Wed Mar  9 00:23:10 2011
From: jason.heeris at gmail.com (Jason Heeris)
Date: Wed, 9 Mar 2011 15:23:10 +0800
Subject: [Twisted-Python] Fwd: Slow data transfer with Twisted + socat +
	Windows
In-Reply-To: <AANLkTi=Z4SPc1a7zJ_YbEg+ze_bZ-c3nVufJSD0=gJHo@mail.gmail.com>
References: <AANLkTinobtkCT9uv4VVXHr0t4OQ5S-ph+Tx2Yn66T3bZ@mail.gmail.com>
	<AANLkTi=ayQhhLOyP=PKh7Qpgb-v7sbXRSwzA_wxe7Pvy@mail.gmail.com>
	<AANLkTimBHJnVQfVhvFWQT6XB4MOTQW4YmABV5KoxJQLo@mail.gmail.com>
	<AANLkTikdbsKHFOmxx_6KZS1O5Onh3aoyPPVsOc-p5c4x@mail.gmail.com>
	<AANLkTi=Z4SPc1a7zJ_YbEg+ze_bZ-c3nVufJSD0=gJHo@mail.gmail.com>
Message-ID: <AANLkTimZBDMZ--=rH4qCF4fwBwP8_vR4H6yW=KNcKEB1@mail.gmail.com>

On 9 March 2011 15:02, Michael Thompson <michaelnt at gmail.com> wrote:
> My read of these results is that socat on windows limits the
> performance to 30s and in addition the gtkreactor on windows has
> performance problems.

I'd say it's Cygwin, not socat, but yes.

> pyserial includes an example that makes a serial port accessible of
> TCP you could see if that is any faster than socat.

Okay, I tried that, and with the select reactor, it's great! 3s flat!

With the GTK reactor... still 220s. So, no luck.

> Perhaps you can write a serial to TCP adaptor that encapsulates the
> serial logic so reduce the IO between this application and the GTK app
> to a message like start_sync, stop_sync.

I've only shown the simplest possible protocol here - if I really did
encapsulate all the possible commands and interactions in a
synchronous subprocess, I'd basically be writing all the protocols
twice.

Besides, none of that will help if the GTK reactor can't communicate
with anything properly.

Cheers,
Jason



From jason.heeris at gmail.com  Wed Mar  9 01:06:11 2011
From: jason.heeris at gmail.com (Jason Heeris)
Date: Wed, 9 Mar 2011 16:06:11 +0800
Subject: [Twisted-Python] Fwd: Slow data transfer with Twisted + socat +
	Windows
In-Reply-To: <AANLkTimZBDMZ--=rH4qCF4fwBwP8_vR4H6yW=KNcKEB1@mail.gmail.com>
References: <AANLkTinobtkCT9uv4VVXHr0t4OQ5S-ph+Tx2Yn66T3bZ@mail.gmail.com>
	<AANLkTi=ayQhhLOyP=PKh7Qpgb-v7sbXRSwzA_wxe7Pvy@mail.gmail.com>
	<AANLkTimBHJnVQfVhvFWQT6XB4MOTQW4YmABV5KoxJQLo@mail.gmail.com>
	<AANLkTikdbsKHFOmxx_6KZS1O5Onh3aoyPPVsOc-p5c4x@mail.gmail.com>
	<AANLkTi=Z4SPc1a7zJ_YbEg+ze_bZ-c3nVufJSD0=gJHo@mail.gmail.com>
	<AANLkTimZBDMZ--=rH4qCF4fwBwP8_vR4H6yW=KNcKEB1@mail.gmail.com>
Message-ID: <AANLkTindWpp7o6b5v7m+CGHWttHEmN6fZWY8XhW+S0O6@mail.gmail.com>

On 9 March 2011 15:23, Jason Heeris <jason.heeris at gmail.com> wrote:
> Besides, none of that will help if the GTK reactor can't communicate
> with anything properly.

I adapted my original script to simply work with an echo server, and
there really does seem to be a problem with the GTK reactor, no matter
what the transport.

Is this worth filing a bug about (since I have a neat little demo
script to illustrate the problem), or is it just too vague?

- Jason



From itamar at itamarst.org  Wed Mar  9 06:11:44 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 09 Mar 2011 08:11:44 -0500
Subject: [Twisted-Python] Fwd: Slow data transfer with Twisted + socat +
 Windows
In-Reply-To: <AANLkTindWpp7o6b5v7m+CGHWttHEmN6fZWY8XhW+S0O6@mail.gmail.com>
References: <AANLkTinobtkCT9uv4VVXHr0t4OQ5S-ph+Tx2Yn66T3bZ@mail.gmail.com>
	<AANLkTi=ayQhhLOyP=PKh7Qpgb-v7sbXRSwzA_wxe7Pvy@mail.gmail.com>
	<AANLkTimBHJnVQfVhvFWQT6XB4MOTQW4YmABV5KoxJQLo@mail.gmail.com>
	<AANLkTikdbsKHFOmxx_6KZS1O5Onh3aoyPPVsOc-p5c4x@mail.gmail.com>
	<AANLkTi=Z4SPc1a7zJ_YbEg+ze_bZ-c3nVufJSD0=gJHo@mail.gmail.com>
	<AANLkTimZBDMZ--=rH4qCF4fwBwP8_vR4H6yW=KNcKEB1@mail.gmail.com>
	<AANLkTindWpp7o6b5v7m+CGHWttHEmN6fZWY8XhW+S0O6@mail.gmail.com>
Message-ID: <1299676304.1752.0.camel@blake>

On Wed, 2011-03-09 at 16:06 +0800, Jason Heeris wrote:

> Is this worth filing a bug about (since I have a neat little demo
> script to illustrate the problem), or is it just too vague?

It's worth filing a bug, yes.




From 4kir4.1i at gmail.com  Thu Mar 10 03:31:00 2011
From: 4kir4.1i at gmail.com (akira)
Date: Thu, 10 Mar 2011 13:31:00 +0300
Subject: [Twisted-Python] Agent and "Cannot assign requested address"
References: <AANLkTi=Z=u+H=q0vHG1853eTN0Q8XeVQerptGCMAMrmK@mail.gmail.com>
	<1299245371.1656.8.camel@blake>
	<20110304133311.2231.1403604990.divmod.xquotient.121@localhost.localdomain>
	<1299246828.1656.15.camel@blake>
	<05DD6421-1AB3-4B1B-8AF9-264C9CE35CF4@gmail.com>
Message-ID: <m3lj0nqnbv.fsf@tb10.ngrid.ru>

"Jason J. W. Williams" <jasonjwwilliams at gmail.com> writes:

> Actually, I think the TIME_WAIT is the problem. It's what I see in
> netstat, and the Agent requests are fired sequentially via yield
> inside a for loop (inlineCallbacks). So they shouldn't be running in
> parallel. 

`yield` returns before TIME_WAIT expires otherwise it would require ~1
minute per request.

>
> The use case here is loading a Riak server with keys to prepare for a
> test. There's not a real way to get around sending one POST per key.
>
> How would I set the timeout value in Twisted? Or do I have to modify
> the timeout/keepalive systemwide in /proc?

In addition to net.ipv4.tcp_fin_timeout you could increase the ephemeral
port range (net.ipv4.ip_local_port_range sysctl parameter).

Each connection can be identified using 4-tuple (server IP, server port,
client IP, client port) Everything except client port is fixed in your
case so there could be at most
~ net.ipv4.ip_local_port_range/net.ipv4.tcp_fin_timeout connections per
second (even less in practice due to other applications and other
settings taking preference such as fs.file-max). For example:

  net.ipv4.ip_local_port_range = 32768    61000
  net.ipv4.tcp_fin_timeout = 30

There could be ~900 connections per second that might be good enough.

Reusing a local port via SO_REUSEADDR or better yet reusing a tcp
connection via HTTP keep-alive aren't available with twisted as I
understand it.


--
akira




From andrew at bemusement.org  Thu Mar 10 04:43:47 2011
From: andrew at bemusement.org (Andrew Bennetts)
Date: Thu, 10 Mar 2011 22:43:47 +1100
Subject: [Twisted-Python] [Twisted-web] Question regarding callLater()
 and service creation
In-Reply-To: <8C8A186C-A56B-4354-BC73-C4B60020BB4C@zonarsystems.com>
References: <8C8A186C-A56B-4354-BC73-C4B60020BB4C@zonarsystems.com>
Message-ID: <20110310114347.GD3670@aihal.home.puzzling.org>

This thread belongs on the twisted-python@ list, rather than
twisted-web@, as it has nothing to do with twisted.web.

Eric Chamberlain wrote:
> I'm creating a service using Twisted.  It has nothing to do with
> networking (I know that Twisted is an event-driven networking
> engine... stay with me here :).  It's simply polling a database every
> 30 seconds.  I'm using callLater() once the work has been completed.
> My question is does the reactor spawn a new thread once the
> callLater() timeout has been reached?  If so, this would mean that the
> work being done may be effected by the GIL, correct?

Incorrect.  callLater spawns no threads.

There's nothing wrong or even particularly strange with using Twisted
for projects unrelated to networking.  An event loop with good
facilities for spawning and interacting with subprocesses and calling
functions at certain times has plenty of uses, even if you don't also
need the capacity to handle network IO.

That doesn't mean that Twisted is necessarily the best tool for your
task, but I wouldn't rule it out automatically either.

-Andrew.




From jrennie at gmail.com  Thu Mar 10 05:35:13 2011
From: jrennie at gmail.com (Jason Rennie)
Date: Thu, 10 Mar 2011 07:35:13 -0500
Subject: [Twisted-Python] [Twisted-web] Question regarding callLater()
 and service creation
In-Reply-To: <20110310114347.GD3670@aihal.home.puzzling.org>
References: <8C8A186C-A56B-4354-BC73-C4B60020BB4C@zonarsystems.com>
	<20110310114347.GD3670@aihal.home.puzzling.org>
Message-ID: <AANLkTinXUgZUObbkcfFoFJdvWQ8YeDj14Z_Bx8C-WSyj@mail.gmail.com>

On Thu, Mar 10, 2011 at 6:43 AM, Andrew Bennetts <andrew at bemusement.org>wrote:

> There's nothing wrong or even particularly strange with using Twisted
> for projects unrelated to networking.  An event loop with good
> facilities for spawning and interacting with subprocesses and calling
> functions at certain times has plenty of uses, even if you don't also
> need the capacity to handle network IO.
>

+1  Twisted is my preferred tool for managing subprocesses.  I've even found
it to be superior for the seemingly simple task of combining output from
multiple processes.

Jason
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110310/ff758a08/attachment-0001.html>

From glyph at twistedmatrix.com  Thu Mar 10 09:16:21 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 10 Mar 2011 11:16:21 -0500
Subject: [Twisted-Python] Agent and "Cannot assign requested address"
In-Reply-To: <m3lj0nqnbv.fsf@tb10.ngrid.ru>
References: <AANLkTi=Z=u+H=q0vHG1853eTN0Q8XeVQerptGCMAMrmK@mail.gmail.com>
	<1299245371.1656.8.camel@blake>
	<20110304133311.2231.1403604990.divmod.xquotient.121@localhost.localdomain>
	<1299246828.1656.15.camel@blake>
	<05DD6421-1AB3-4B1B-8AF9-264C9CE35CF4@gmail.com>
	<m3lj0nqnbv.fsf@tb10.ngrid.ru>
Message-ID: <2DD4DE0B-70CB-4DD9-9193-E06F1580E16E@twistedmatrix.com>

On Mar 10, 2011, at 5:31 AM, akira wrote:

> Reusing a local port via SO_REUSEADDR or better yet reusing a tcp
> connection via HTTP keep-alive aren't available with twisted as I
> understand it.

Reusing a local connection-oriented port with SO_REUSEADDR is potentially a bad idea; there's a reason that your TCP stack gives you this error.  That option is practically only for listening ports.

Keep-alive is a work in progress, previously mentioned in this thread: <http://twistedmatrix.com/trac/ticket/3420>.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110310/0b9d477a/attachment.html>

From jasonjwwilliams at gmail.com  Thu Mar 10 11:04:48 2011
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Thu, 10 Mar 2011 11:04:48 -0700
Subject: [Twisted-Python] Agent and "Cannot assign requested address"
In-Reply-To: <m3lj0nqnbv.fsf@tb10.ngrid.ru>
References: <AANLkTi=Z=u+H=q0vHG1853eTN0Q8XeVQerptGCMAMrmK@mail.gmail.com>
	<1299245371.1656.8.camel@blake>
	<20110304133311.2231.1403604990.divmod.xquotient.121@localhost.localdomain>
	<1299246828.1656.15.camel@blake>
	<05DD6421-1AB3-4B1B-8AF9-264C9CE35CF4@gmail.com>
	<m3lj0nqnbv.fsf@tb10.ngrid.ru>
Message-ID: <AANLkTimsWx30xTxNJynNS-9SUaY2S-r9bWfqKBAVKyS=@mail.gmail.com>

I ended up getting around the problem by increasing my Riak cluster
size and putting a load balancer in front for the test.  But
connection pooling would be really helpful, both here and in the
CouchDB client. I've refactored both txRiak and Paisley in the past
couple of months to use Agent in the hopes ticket 3420 gets completed.
:)

-J

On Thu, Mar 10, 2011 at 3:31 AM, akira <4kir4.1i at gmail.com> wrote:
> "Jason J. W. Williams" <jasonjwwilliams at gmail.com> writes:
>
>> Actually, I think the TIME_WAIT is the problem. It's what I see in
>> netstat, and the Agent requests are fired sequentially via yield
>> inside a for loop (inlineCallbacks). So they shouldn't be running in
>> parallel.
>
> `yield` returns before TIME_WAIT expires otherwise it would require ~1
> minute per request.
>
>>
>> The use case here is loading a Riak server with keys to prepare for a
>> test. There's not a real way to get around sending one POST per key.
>>
>> How would I set the timeout value in Twisted? Or do I have to modify
>> the timeout/keepalive systemwide in /proc?
>
> In addition to net.ipv4.tcp_fin_timeout you could increase the ephemeral
> port range (net.ipv4.ip_local_port_range sysctl parameter).
>
> Each connection can be identified using 4-tuple (server IP, server port,
> client IP, client port) Everything except client port is fixed in your
> case so there could be at most
> ~ net.ipv4.ip_local_port_range/net.ipv4.tcp_fin_timeout connections per
> second (even less in practice due to other applications and other
> settings taking preference such as fs.file-max). For example:
>
>  net.ipv4.ip_local_port_range = 32768    61000
>  net.ipv4.tcp_fin_timeout = 30
>
> There could be ~900 connections per second that might be good enough.
>
> Reusing a local port via SO_REUSEADDR or better yet reusing a tcp
> connection via HTTP keep-alive aren't available with twisted as I
> understand it.
>
>
> --
> akira
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From facundobatista at gmail.com  Thu Mar 10 12:39:58 2011
From: facundobatista at gmail.com (Facundo Batista)
Date: Thu, 10 Mar 2011 14:39:58 -0500
Subject: [Twisted-Python] Failing tests in trunk
In-Reply-To: <AANLkTim_CtDL9qm1aq9i6yc_CGFjP62-RfKyHSgGR+HY@mail.gmail.com>
References: <AANLkTinZHZaq1hJW8YoHRFYm+c5Nwh62Bkv6nkDpExqt@mail.gmail.com>
	<20110308003428.2231.215396262.divmod.xquotient.196@localhost.localdomain>
	<AANLkTim_CtDL9qm1aq9i6yc_CGFjP62-RfKyHSgGR+HY@mail.gmail.com>
Message-ID: <AANLkTik4evU732Pe7_4PtsLTZjLpsNnp=1jo-deqMFAJ@mail.gmail.com>

On Tue, Mar 8, 2011 at 7:04 AM, Facundo Batista
<facundobatista at gmail.com> wrote:

>> None of these are known failures:
>>
>>    http://buildbot.twistedmatrix.com/boxes-supported
>>
>> Just looking at the list of failing tests, I would make a small bet that
>> the failures are caused by your locale setting somehow.
>
> I thought of that, but why would the test pass when running alone?
>
> I'll debug this.

Ok, found it.

See one example of the test that failed,
twisted.mail.test.test_imap.NewFetchTestCase.testFetchInternalDate:

    twisted.trial.unittest.FailTest: not equal:
    a = {0: {'INTERNALDATE': '02-nov-2003 21:25:10 +0000'},
     1: {'INTERNALDATE': '29-dic-2013 11:31:52 -0500'},
     2: {'INTERNALDATE': '10-mar-1992 02:44:30 -0600'},
     3: {'INTERNALDATE': '11-ene-2000 14:40:24 -0800'}}
    b = {0: {'INTERNALDATE': '02-Nov-2003 21:25:10 +0000'},
     1: {'INTERNALDATE': '29-Dec-2013 11:31:52 -0500'},
     2: {'INTERNALDATE': '10-Mar-1992 02:44:30 -0600'},
     3: {'INTERNALDATE': '11-Jan-2000 14:40:24 -0800'}}

See the difference? "nov" instead of "Nov", etc. "dic" instead of
"Dec". Yes, in Spanish December is 'diciembre'.

So, funny 'locale' issue, confirmed by showing getlocale() in the
test... when running the whole suite, the locale is ('es_AR', 'UTF8'),
and when running twisted.mail the locale is (None, None).

Weird, specially taking into account that 'locale' is not used in the
whole twisted project.

But I tracked it down.

In twisted/manhole/ui/test/test_gtk2manhole.py, gtk is imported, and
that changes the locale [0].

So, how this can be fixed?

Is ok for the IMAP4Server to spew the message internal date according
to the locale in which it's being run? Or it should always format the
dates in an specific way, because some definition somewhere? (I don't
know much about IMAP)

If it's ok for the server to format the dates according to the locale,
I should make the test more robust. If not, the server should set the
locale to (None, None) for the date formatting, or just set it at
__init__ and leave it there, or use other formatting (not
time.strftime, I prefer this solution).

Ideas? Opinions?

Thanks!

(BTW, I'm already at PyCon :D )


[0] Which I easily tested in a clean Python interpreter:

    >>> import locale
    >>> locale.getlocale()
    (None, None)
    >>> import gtk
    >>> locale.getlocale()
    ('es_AR', 'UTF8')

-- 
.    Facundo

Blog: http://www.taniquetil.com.ar/plog/
PyAr: http://www.python.org/ar/



From abierbaum at gmail.com  Thu Mar 10 13:01:39 2011
From: abierbaum at gmail.com (Allen Bierbaum)
Date: Thu, 10 Mar 2011 14:01:39 -0600
Subject: [Twisted-Python] Authentication & Access Control system for web
	services
In-Reply-To: <AANLkTi=4QO8d6jSB8=Y3wuO_uW6LJWd45pQ2C-hdz+xS@mail.gmail.com>
References: <AANLkTi=4QO8d6jSB8=Y3wuO_uW6LJWd45pQ2C-hdz+xS@mail.gmail.com>
Message-ID: <AANLkTi=ezWDYUpbo33--q1r4+J9zBrV9zy-YeEODqCZ4@mail.gmail.com>

I have been looking into this further and decided on an API that works
as follows:

- Use HTTPS for all requests
- POST to /session to create a new session token
  - pass in username and password as parameters
  - returns token string to be used for all further communication
- All further requests must have the token string which is used to
lookup the user/session
  - on the server, the token will map to a user object to give me
information about their access rights, etc.

Now the question is how does this fit into twisted's view of the
world.  The twisted web in 60 seconds tutorials [1] seem focused on
using HTTP Auth for credential checking and a internal cookie
(TWISTED_SESSION) for session management.  Is there an easy way to
adapt these to my needs or do I need to roll my own code for this type
of twisted.web usage?

-Allen


[1] http://twistedmatrix.com/documents/current/web/howto/web-in-60/index.html

On Mon, Mar 7, 2011 at 9:19 AM, Allen Bierbaum <abierbaum at gmail.com> wrote:
> I have a REST service I have implemented using twisted.web.  Based
> upon a new requirement I need to put role-based access control
> security on the service and am trying to find the most twisted way to
> do it.
>
> I would like to have:
> - Username / password login that is checked against a backend database
> - Roles and associated privileges associated with each user
> - Administration interface to edit users, roles, and privileges
> - "Simple" way to configure the access control requirements on the
> services. (ex: which services need which roles)
>
> Before I role my own code I wanted to check and see if there are any
> addons for this or if anyone else had attacked this problem with
> twisted and had some open source code I could look at.
>
> I have found a couple of projects for WSGI that I may try to pull
> ideas from, but I haven't yet found anything that uses the twisted
> resource model.  (http://authkit.org/,
> http://docs.repoze.org/who/2.0/)
>
> Any pointers to twisted projects I could leverage?
>
> -Allen
>



From george at ringdevelopment.com  Thu Mar 10 14:16:47 2011
From: george at ringdevelopment.com (George Pauly)
Date: Thu, 10 Mar 2011 16:16:47 -0500
Subject: [Twisted-Python] Authentication & Access Control system for web
 services
In-Reply-To: <AANLkTi=ezWDYUpbo33--q1r4+J9zBrV9zy-YeEODqCZ4@mail.gmail.com>
References: <AANLkTi=4QO8d6jSB8=Y3wuO_uW6LJWd45pQ2C-hdz+xS@mail.gmail.com>
	<AANLkTi=ezWDYUpbo33--q1r4+J9zBrV9zy-YeEODqCZ4@mail.gmail.com>
Message-ID: <1299791807.13530.326.camel@localhost.localdomain>

Allen,

In my very limited experience with Twisted,

On Thu, 2011-03-10 at 14:01 -0600, Allen Bierbaum wrote:
> I have been looking into this further and decided on an API that works
> as follows:
> 
> - Use HTTPS for all requests
> - POST to /session to create a new session token
>   - pass in username and password as parameters
>   - returns token string to be used for all further communication

In the non-https case, roll a salt and other items (ip address, user
agent, etc) into a secondary session key on the server.

> - All further requests must have the token string which is used to
> lookup the user/session
>   - on the server, the token will map to a user object to give me
> information about their access rights, etc.
> 

that's all I've ever needed: use the session key (token) to access an
object array - the accessed object has all the twisty magic.

> Now the question is how does this fit into twisted's view of the
> world.  The twisted web in 60 seconds tutorials [1] seem focused on
> using HTTP Auth for credential checking and a internal cookie
> (TWISTED_SESSION) for session management.  Is there an easy way to
> adapt these to my needs or do I need to roll my own code for this type
> of twisted.web usage?

Now you've gone back to credentials - this is outside of my experience
with Twisted.  Sessions are simple enough with Python alone in a twisted
app.  I'll need to use credentials soon so I hope you get an answer. 

Anybody using OpenID or webID instead of login/password?  Could be
better...

> 
> -Allen
> 

George
-- 
George Pauly
Ring Development
www.ringdevelopment.com




From jasonjwwilliams at gmail.com  Thu Mar 10 15:45:00 2011
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Thu, 10 Mar 2011 15:45:00 -0700
Subject: [Twisted-Python] twisted.web.error.Error & BaseException.message
	deprecation
Message-ID: <AANLkTimSc+aHSZSMvmpqY6-3cC80g+FOG06TAfz3ENGz@mail.gmail.com>

Hi Guys,

Been seeing this error for a long time and finally getting off my bum
to see about fixing it:

twisted/web/error.py:53: DeprecationWarning: BaseException.message has
been deprecated as of Python 2.6

It looks like the issue is the "self.message = message" assignment in
__init__: https://gist.github.com/865097

Before I go about getting rid of the warning, does anyone have a
reason Error.message should stick around?

-J



From jasonjwwilliams at gmail.com  Thu Mar 10 15:47:21 2011
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Thu, 10 Mar 2011 15:47:21 -0700
Subject: [Twisted-Python] Authentication & Access Control system for web
	services
In-Reply-To: <1299791807.13530.326.camel@localhost.localdomain>
References: <AANLkTi=4QO8d6jSB8=Y3wuO_uW6LJWd45pQ2C-hdz+xS@mail.gmail.com>
	<AANLkTi=ezWDYUpbo33--q1r4+J9zBrV9zy-YeEODqCZ4@mail.gmail.com>
	<1299791807.13530.326.camel@localhost.localdomain>
Message-ID: <AANLkTimB+vPVQMjJMqwzKE0yBRFieTwC5KceWfP0L0LR@mail.gmail.com>

I believe this implements OAuth 2 for Twisted using Twisted Cred:

https://github.com/simplegeo/txoauth

-J

On Thu, Mar 10, 2011 at 2:16 PM, George Pauly
<george at ringdevelopment.com> wrote:
> Allen,
>
> In my very limited experience with Twisted,
>
> On Thu, 2011-03-10 at 14:01 -0600, Allen Bierbaum wrote:
>> I have been looking into this further and decided on an API that works
>> as follows:
>>
>> - Use HTTPS for all requests
>> - POST to /session to create a new session token
>>   - pass in username and password as parameters
>>   - returns token string to be used for all further communication
>
> In the non-https case, roll a salt and other items (ip address, user
> agent, etc) into a secondary session key on the server.
>
>> - All further requests must have the token string which is used to
>> lookup the user/session
>>   - on the server, the token will map to a user object to give me
>> information about their access rights, etc.
>>
>
> that's all I've ever needed: use the session key (token) to access an
> object array - the accessed object has all the twisty magic.
>
>> Now the question is how does this fit into twisted's view of the
>> world.  The twisted web in 60 seconds tutorials [1] seem focused on
>> using HTTP Auth for credential checking and a internal cookie
>> (TWISTED_SESSION) for session management.  Is there an easy way to
>> adapt these to my needs or do I need to roll my own code for this type
>> of twisted.web usage?
>
> Now you've gone back to credentials - this is outside of my experience
> with Twisted.  Sessions are simple enough with Python alone in a twisted
> app.  I'll need to use credentials soon so I hope you get an answer.
>
> Anybody using OpenID or webID instead of login/password?  Could be
> better...
>
>>
>> -Allen
>>
>
> George
> --
> George Pauly
> Ring Development
> www.ringdevelopment.com
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From charlessolar at gmail.com  Thu Mar 10 16:08:03 2011
From: charlessolar at gmail.com (Charles Solar)
Date: Thu, 10 Mar 2011 17:08:03 -0600
Subject: [Twisted-Python] Best strategies for pb Referenceables running long
	methods from callRemote
Message-ID: <AANLkTimaAPH-GYHz-ptpNQWFsj4oyh_N005HQ+RQq6hR@mail.gmail.com>

I am using PB to run remote methods in a testing system at my company.  The
code works very well but breaks down when I start running multiple tests at
once.  I have tracked this down to overflowing the thread pool on the remote
machines.  I am wondering if anyone might have better suggestions for
running long methods from a remote method.

I coded up a sample of what I am seeing here: http://pastebin.com/rBPp20Ms

Basically I have 1 server that calls remote_execute on many clients on a
remote server.  This remote_execute method starts a new method using
threads.deferToThread and returns the defer to make the server's callRemote
defer wait until the remote long method end.
What I do in those methods is run test code that waits, blocks, sleeps, and
all sorts of nasty things that make the thread take a while.  In the example
code I simply sleep for 20 seconds.

The problem I see with this code specifically is that I run out of threads
on the pool and even though I wanted all execute methods to run at the same
time, I see 10 run, then 10 more, then 10 more.. etc.  The testing depends
on all these methods being run at the same time as they run mechanisms that
depend on each other and need everyone running.  When I overflow the thread
pool some methods do not run until other methods stop, which makes the whole
test fail.

I am not holding the GIL or blocking the reactor, which was the first thing
I checked.

Setting reactor.suggestThreadPoolSize(50) does help, but I do not think its
the best solution, and does not work very well on our slow and older
machines.

Any feedback is appreciated
Charles
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110310/44e4a32d/attachment.html>

From exarkun at twistedmatrix.com  Thu Mar 10 19:51:32 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 11 Mar 2011 02:51:32 -0000
Subject: [Twisted-Python] Failing tests in trunk
In-Reply-To: <AANLkTik4evU732Pe7_4PtsLTZjLpsNnp=1jo-deqMFAJ@mail.gmail.com>
References: <AANLkTinZHZaq1hJW8YoHRFYm+c5Nwh62Bkv6nkDpExqt@mail.gmail.com>
	<20110308003428.2231.215396262.divmod.xquotient.196@localhost.localdomain>
	<AANLkTim_CtDL9qm1aq9i6yc_CGFjP62-RfKyHSgGR+HY@mail.gmail.com>
	<AANLkTik4evU732Pe7_4PtsLTZjLpsNnp=1jo-deqMFAJ@mail.gmail.com>
Message-ID: <20110311025132.2231.410699552.divmod.xquotient.209@localhost.localdomain>

On 10 Mar, 07:39 pm, facundobatista at gmail.com wrote:
>On Tue, Mar 8, 2011 at 7:04 AM, Facundo Batista
><facundobatista at gmail.com> wrote:
>>>None of these are known failures:
>>>
>>>� �http://buildbot.twistedmatrix.com/boxes-supported
>>>
>>>Just looking at the list of failing tests, I would make a small bet 
>>>that
>>>the failures are caused by your locale setting somehow.
>>
>>I thought of that, but why would the test pass when running alone?
>>
>>I'll debug this.
>
>Ok, found it.
>
>See one example of the test that failed,
>twisted.mail.test.test_imap.NewFetchTestCase.testFetchInternalDate:
>
>    twisted.trial.unittest.FailTest: not equal:
>    a = {0: {'INTERNALDATE': '02-nov-2003 21:25:10 +0000'},
>     1: {'INTERNALDATE': '29-dic-2013 11:31:52 -0500'},
>     2: {'INTERNALDATE': '10-mar-1992 02:44:30 -0600'},
>     3: {'INTERNALDATE': '11-ene-2000 14:40:24 -0800'}}
>    b = {0: {'INTERNALDATE': '02-Nov-2003 21:25:10 +0000'},
>     1: {'INTERNALDATE': '29-Dec-2013 11:31:52 -0500'},
>     2: {'INTERNALDATE': '10-Mar-1992 02:44:30 -0600'},
>     3: {'INTERNALDATE': '11-Jan-2000 14:40:24 -0800'}}
>
>See the difference? "nov" instead of "Nov", etc. "dic" instead of
>"Dec". Yes, in Spanish December is 'diciembre'.
>
>So, funny 'locale' issue, confirmed by showing getlocale() in the
>test... when running the whole suite, the locale is ('es_AR', 'UTF8'),
>and when running twisted.mail the locale is (None, None).
>
>Weird, specially taking into account that 'locale' is not used in the
>whole twisted project.
>
>But I tracked it down.
>
>In twisted/manhole/ui/test/test_gtk2manhole.py, gtk is imported, and
>that changes the locale [0].

Aha, nicely done.  I figured the locale change would be in Python 
somewhere, I didn't consider it might be hidden in Gtk.
>So, how this can be fixed?
>
>Is ok for the IMAP4Server to spew the message internal date according
>to the locale in which it's being run? Or it should always format the
>dates in an specific way, because some definition somewhere? (I don't
>know much about IMAP)

IMAP specifies the strings in the unit test.  So the implementation 
really needs to change to not depend on the locale.
>If it's ok for the server to format the dates according to the locale,
>I should make the test more robust. If not, the server should set the
>locale to (None, None) for the date formatting, or just set it at
>__init__ and leave it there, or use other formatting (not
>time.strftime, I prefer this solution).

I agree with your preference, switching away from time.strftime is 
probably the right thing to do.

Jean-Paul



From glyph at twistedmatrix.com  Thu Mar 10 22:12:59 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 11 Mar 2011 00:12:59 -0500
Subject: [Twisted-Python] twisted.web.error.Error &
	BaseException.message deprecation
In-Reply-To: <AANLkTimSc+aHSZSMvmpqY6-3cC80g+FOG06TAfz3ENGz@mail.gmail.com>
References: <AANLkTimSc+aHSZSMvmpqY6-3cC80g+FOG06TAfz3ENGz@mail.gmail.com>
Message-ID: <B96A7A46-6801-49F4-AB96-85D897019CBE@twistedmatrix.com>

On Mar 10, 2011, at 5:45 PM, Jason J. W. Williams wrote:

> Hi Guys,
> 
> Been seeing this error for a long time and finally getting off my bum
> to see about fixing it:
> 
> twisted/web/error.py:53: DeprecationWarning: BaseException.message has
> been deprecated as of Python 2.6
> 
> It looks like the issue is the "self.message = message" assignment in
> __init__: https://gist.github.com/865097
> 
> Before I go about getting rid of the warning, does anyone have a
> reason Error.message should stick around?

This is the attribute used (in some cases) to relay the protocol-level error message printed in the status line area of the HTTP response.  So yes, we need to keep it; it doesn't mean the same thing as Python's earlier 'message' attribute on Exception.  If we can simply squash the warning that would be best.





From jasonjwwilliams at gmail.com  Fri Mar 11 00:25:11 2011
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Fri, 11 Mar 2011 00:25:11 -0700
Subject: [Twisted-Python] twisted.web.error.Error &
	BaseException.message deprecation
In-Reply-To: <B96A7A46-6801-49F4-AB96-85D897019CBE@twistedmatrix.com>
References: <AANLkTimSc+aHSZSMvmpqY6-3cC80g+FOG06TAfz3ENGz@mail.gmail.com>
	<B96A7A46-6801-49F4-AB96-85D897019CBE@twistedmatrix.com>
Message-ID: <AANLkTimzr25PbcOjQju6nBvgHqxajN2w5ZT-HE4EXoND@mail.gmail.com>

Setting it as a class level attribute seems to suppress it:

>>> class TestError(Exception):
...     message = ""
...
...     def __init__(self, msg):
...        self.message = msg

Since it's a string and passed by value I think this would work. I'll
open up a ticket if one's not already.

-J


On Thu, Mar 10, 2011 at 10:12 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
> On Mar 10, 2011, at 5:45 PM, Jason J. W. Williams wrote:
>
>> Hi Guys,
>>
>> Been seeing this error for a long time and finally getting off my bum
>> to see about fixing it:
>>
>> twisted/web/error.py:53: DeprecationWarning: BaseException.message has
>> been deprecated as of Python 2.6
>>
>> It looks like the issue is the "self.message = message" assignment in
>> __init__: https://gist.github.com/865097
>>
>> Before I go about getting rid of the warning, does anyone have a
>> reason Error.message should stick around?
>
> This is the attribute used (in some cases) to relay the protocol-level error message printed in the status line area of the HTTP response.  So yes, we need to keep it; it doesn't mean the same thing as Python's earlier 'message' attribute on Exception.  If we can simply squash the warning that would be best.
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From glyph at twistedmatrix.com  Fri Mar 11 09:51:42 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 11 Mar 2011 11:51:42 -0500
Subject: [Twisted-Python] twisted.web.error.Error &
	BaseException.message deprecation
In-Reply-To: <AANLkTimzr25PbcOjQju6nBvgHqxajN2w5ZT-HE4EXoND@mail.gmail.com>
References: <AANLkTimSc+aHSZSMvmpqY6-3cC80g+FOG06TAfz3ENGz@mail.gmail.com>
	<B96A7A46-6801-49F4-AB96-85D897019CBE@twistedmatrix.com>
	<AANLkTimzr25PbcOjQju6nBvgHqxajN2w5ZT-HE4EXoND@mail.gmail.com>
Message-ID: <9F85B336-74C6-4EA9-B923-1B1FBB2D5AF9@twistedmatrix.com>

On Mar 11, 2011, at 2:25 AM, Jason J. W. Williams wrote:

> Setting it as a class level attribute seems to suppress it:
> 
>>>> class TestError(Exception):
> ...     message = ""
> ...
> ...     def __init__(self, msg):
> ...        self.message = msg
> 
> Since it's a string and passed by value I think this would work. I'll
> open up a ticket if one's not already.

Sounds good.  I can't find one, but there have been other tickets with a similar purpose ('message' attributes on other exceptions).

If you have time after fixing this issue, it would be nice if you could double-check that there aren't any more of these lurking around :).




From jasonjwwilliams at gmail.com  Fri Mar 11 10:52:05 2011
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Fri, 11 Mar 2011 10:52:05 -0700
Subject: [Twisted-Python] twisted.web.error.Error &
	BaseException.message deprecation
In-Reply-To: <9F85B336-74C6-4EA9-B923-1B1FBB2D5AF9@twistedmatrix.com>
References: <AANLkTimSc+aHSZSMvmpqY6-3cC80g+FOG06TAfz3ENGz@mail.gmail.com>
	<B96A7A46-6801-49F4-AB96-85D897019CBE@twistedmatrix.com>
	<AANLkTimzr25PbcOjQju6nBvgHqxajN2w5ZT-HE4EXoND@mail.gmail.com>
	<9F85B336-74C6-4EA9-B923-1B1FBB2D5AF9@twistedmatrix.com>
Message-ID: <0C9613DD-3D72-48E5-9B42-1E62FCBC9F3B@gmail.com>

Hi Glyph,

I re-opened 4456 and attached a patch. I think that's this issue. The only other one I found in the tickets was for Conch and that one was marked fixed. 

-J

Sent via iPhone

Is your e-mail Premiere?

On Mar 11, 2011, at 9:51, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> On Mar 11, 2011, at 2:25 AM, Jason J. W. Williams wrote:
> 
>> Setting it as a class level attribute seems to suppress it:
>> 
>>>>> class TestError(Exception):
>> ...     message = ""
>> ...
>> ...     def __init__(self, msg):
>> ...        self.message = msg
>> 
>> Since it's a string and passed by value I think this would work. I'll
>> open up a ticket if one's not already.
> 
> Sounds good.  I can't find one, but there have been other tickets with a similar purpose ('message' attributes on other exceptions).
> 
> If you have time after fixing this issue, it would be nice if you could double-check that there aren't any more of these lurking around :).
> 



From sicfslist at gmail.com  Fri Mar 11 12:15:47 2011
From: sicfslist at gmail.com (SIC FS LIST)
Date: Fri, 11 Mar 2011 13:15:47 -0600
Subject: [Twisted-Python] UDP Logging Server
Message-ID: <AANLkTikgHs7=bUJe3sLomsmsRTKDkFicF+c41hzjc8sQ@mail.gmail.com>

Hello,

I am trying to write a UDP based logging server.

Generically speaking it looks somewhat like syslog except I needed a bit
more flexibility that syslog can provide (or at least that I think it can
provide).

What I'm trying to accomplish is:
-- receive UDP packet
-- parse UDP packet
-- write output to a log file
-- have the log files rotated on a periodic basis

So far I have a "working" implementation ... but I'm noticing that if I do
the following:
-- log when a message is received
-- that for that message it "might" show up in the file a pretty lengthy
period of time later

The actual UDP protocol:

class VocsLogger(DatagramProtocol):
    def datagramReceived(self, data, (host, port)):
        _proc_msg(self.transport, data, (host,
port))._new_msg().addCallback(handler)

The _proc_msg class:

class _proc_msg:
    def __init__(self, sck, data, (host, port)):
        self._sck = sck
        self._data = data
        self._host = host
        self._port = port

    def _new_msg(self):
        d, _ = LogMsg().ParseSocketMsg(self._data)
        if d.type.upper() == DISKINFO[0]:
            DISKINFO[1].write(d.ToString() + "\n%s\n" % (LOG_DELIM))
        elif d.type.upper() == LOADAVG[0]:
            LOADAVG[1].write(d.ToString() + "\n%s\n" % (LOG_DELIM))
        elif d.type.upper() == MEMINFO[0]:
            MEMINFO[1].write(d.ToString() + "\n%s\n" % (LOG_DELIM))
        elif d.type.upper() == NETDEV[0]:
            NETDEV[1].write(d.ToString() + "\n%s\n" % (LOG_DELIM))
        elif d.type.upper() == PSAUX[0]:
            PSAUX[1].write(d.ToString() + "\n%s\n" % (LOG_DELIM))
        elif d.type.upper() == WHOINFO[0]:
            WHOINFO[1].write(d.ToString() + "\n%s\n" % (LOG_DELIM))
        else:
            DEFAULT[1].write(d.ToString() + "\n%s\n" % (LOG_DELIM))

And I have a log rotate service that looks like this:

class LogRotateService(TimerService):
    def __init__(self):
        TimerService.__init__(self, 60 * 5, LogRotate)

And then I'm using twistd to actually make it work:

LogRotate()
application = service.Application("vocs-logger")
rotateLogService = LogRotateService()
rotateLogService.setServiceParent(application)
loggerService = internet.UDPServer(int(config['port']), VocsLogger(),
interface=config['host'])
loggerService.setServiceParent(application)


I'm probably approaching this the wrong way and not sure if I sure really
worry about deferring the actual process of writing to the log file or if
there was a better way altogether.

Thanks for any guidance.

SDR
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110311/c8807889/attachment.html>

From glyph at twistedmatrix.com  Fri Mar 11 14:28:19 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 11 Mar 2011 16:28:19 -0500
Subject: [Twisted-Python] twisted.web.error.Error &
	BaseException.message deprecation
In-Reply-To: <0C9613DD-3D72-48E5-9B42-1E62FCBC9F3B@gmail.com>
References: <AANLkTimSc+aHSZSMvmpqY6-3cC80g+FOG06TAfz3ENGz@mail.gmail.com>
	<B96A7A46-6801-49F4-AB96-85D897019CBE@twistedmatrix.com>
	<AANLkTimzr25PbcOjQju6nBvgHqxajN2w5ZT-HE4EXoND@mail.gmail.com>
	<9F85B336-74C6-4EA9-B923-1B1FBB2D5AF9@twistedmatrix.com>
	<0C9613DD-3D72-48E5-9B42-1E62FCBC9F3B@gmail.com>
Message-ID: <E05B940B-E3E3-4CCF-86BE-336026AD8D77@twistedmatrix.com>


On Mar 11, 2011, at 12:52 PM, Jason J. W. Williams wrote:

> Hi Glyph,
> 
> I re-opened 4456 and attached a patch. I think that's this issue. The only other one I found in the tickets was for Conch and that one was marked fixed. 

Thanks!  At the latest, this should get reviewed at the sprint.

-glyph


From jasonjwwilliams at gmail.com  Fri Mar 11 14:43:12 2011
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Fri, 11 Mar 2011 14:43:12 -0700
Subject: [Twisted-Python] twisted.web.error.Error &
	BaseException.message deprecation
In-Reply-To: <E05B940B-E3E3-4CCF-86BE-336026AD8D77@twistedmatrix.com>
References: <AANLkTimSc+aHSZSMvmpqY6-3cC80g+FOG06TAfz3ENGz@mail.gmail.com>
	<B96A7A46-6801-49F4-AB96-85D897019CBE@twistedmatrix.com>
	<AANLkTimzr25PbcOjQju6nBvgHqxajN2w5ZT-HE4EXoND@mail.gmail.com>
	<9F85B336-74C6-4EA9-B923-1B1FBB2D5AF9@twistedmatrix.com>
	<0C9613DD-3D72-48E5-9B42-1E62FCBC9F3B@gmail.com>
	<E05B940B-E3E3-4CCF-86BE-336026AD8D77@twistedmatrix.com>
Message-ID: <AANLkTikG3b1ibg4Lnu+_95AnPx-HFw56XFoFZJCvnGN=@mail.gmail.com>

Pleasure. :)

-J

On Fri, Mar 11, 2011 at 2:28 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
>
> On Mar 11, 2011, at 12:52 PM, Jason J. W. Williams wrote:
>
>> Hi Glyph,
>>
>> I re-opened 4456 and attached a patch. I think that's this issue. The only other one I found in the tickets was for Conch and that one was marked fixed.
>
> Thanks!  At the latest, this should get reviewed at the sprint.
>
> -glyph



From screwtape at froup.com  Fri Mar 11 18:32:27 2011
From: screwtape at froup.com (Tim Allen)
Date: Sat, 12 Mar 2011 12:32:27 +1100
Subject: [Twisted-Python] UDP Logging Server
In-Reply-To: <AANLkTikgHs7=bUJe3sLomsmsRTKDkFicF+c41hzjc8sQ@mail.gmail.com>
References: <AANLkTikgHs7=bUJe3sLomsmsRTKDkFicF+c41hzjc8sQ@mail.gmail.com>
Message-ID: <20110312013227.GB31069@boombah.thristian.org>

On Fri, Mar 11, 2011 at 01:15:47PM -0600, SIC FS LIST wrote:
> So far I have a "working" implementation ... but I'm noticing that if I do
> the following:
> -- log when a message is received
> -- that for that message it "might" show up in the file a pretty lengthy
> period of time later

Assuming the objects stored in DISKINFO[1] etc. are file objects, you
seem to be writing to the files but never calling flush(). If you don't
call flush(), Python (well, the C standard library) won't send the data
on to the OS until its buffer is full, or the file handle is closed. If
you're not getting that many log lines, it can take a while for that to
happen.

Of course, if you flush after every disk read, your program will run
a bit more slowly and with more I/O... for an application where
reliability is more important than performance (like logging) that's
probably acceptable.

> The actual UDP protocol:
> 
> class VocsLogger(DatagramProtocol):
>     def datagramReceived(self, data, (host, port)):
>         _proc_msg(self.transport, data, (host,
> port))._new_msg().addCallback(handler)

_proc_msg doesn't seem to be complicated enough to need its own class,
why not just do what _proc_msg does in VocsLogger?

> The _proc_msg class:
> 
> class _proc_msg:
>     def __init__(self, sck, data, (host, port)):
>         self._sck = sck
>         self._data = data
>         self._host = host
>         self._port = port
> 
>     def _new_msg(self):
>         d, _ = LogMsg().ParseSocketMsg(self._data)
>         if d.type.upper() == DISKINFO[0]:
>             DISKINFO[1].write(d.ToString() + "\n%s\n" % (LOG_DELIM))
>         elif d.type.upper() == LOADAVG[0]:
>             LOADAVG[1].write(d.ToString() + "\n%s\n" % (LOG_DELIM))
>         elif d.type.upper() == MEMINFO[0]:
>             MEMINFO[1].write(d.ToString() + "\n%s\n" % (LOG_DELIM))
>         elif d.type.upper() == NETDEV[0]:
>             NETDEV[1].write(d.ToString() + "\n%s\n" % (LOG_DELIM))
>         elif d.type.upper() == PSAUX[0]:
>             PSAUX[1].write(d.ToString() + "\n%s\n" % (LOG_DELIM))
>         elif d.type.upper() == WHOINFO[0]:
>             WHOINFO[1].write(d.ToString() + "\n%s\n" % (LOG_DELIM))
>         else:
>             DEFAULT[1].write(d.ToString() + "\n%s\n" % (LOG_DELIM))

It depends on what DISKINFO[0] and DISKINFO[1] actually are, but
assuming they're a string and a file-handle, this code would look more
Pythonic as something like this:

LOGSINKS = {
	"DISKINFO": open("/var/log/diskinfo", "w"),
	"LOADAVG": open("/var/log/loadavg", "w"),
	"MEMINFO": open("/var/log/meminfo", "w"),
	"NETDEV": open("/var/log/netdev", "w"),
	"PSAUX": open("/var/log/psaux", "w"),
	"WHOINFO": open("/var/log/whoinfo", "w"),
	"DEFAULT": open("/var/log/default", "w"),
    }

def _new_msg(self, data):
    d, _ = LogMsg().ParseSocketMsg(data)
    type = d.type.upper()
    sink = LOGSINKS.get(type, LOGSINKS['DEFAULT'])
    sink.write("%s\n%s\n" % (d.ToString(), LOG_DELIM))

Hope that helps!



From facundobatista at gmail.com  Fri Mar 11 21:25:57 2011
From: facundobatista at gmail.com (Facundo Batista)
Date: Fri, 11 Mar 2011 23:25:57 -0500
Subject: [Twisted-Python] Failing tests in trunk
In-Reply-To: <20110311025132.2231.410699552.divmod.xquotient.209@localhost.localdomain>
References: <AANLkTinZHZaq1hJW8YoHRFYm+c5Nwh62Bkv6nkDpExqt@mail.gmail.com>
	<20110308003428.2231.215396262.divmod.xquotient.196@localhost.localdomain>
	<AANLkTim_CtDL9qm1aq9i6yc_CGFjP62-RfKyHSgGR+HY@mail.gmail.com>
	<AANLkTik4evU732Pe7_4PtsLTZjLpsNnp=1jo-deqMFAJ@mail.gmail.com>
	<20110311025132.2231.410699552.divmod.xquotient.209@localhost.localdomain>
Message-ID: <AANLkTinzN0Sxpq7kkWWE3iTENXkvLyVpSoDOp2kkx1n9@mail.gmail.com>

On Thu, Mar 10, 2011 at 9:51 PM,  <exarkun at twistedmatrix.com> wrote:

>> __init__ and leave it there, or use other formatting (not
>> time.strftime, I prefer this solution).
>
> I agree with your preference, switching away from time.strftime is probably
> the right thing to do.

Opened a ticket for this, patch attached:

    http://twistedmatrix.com/trac/ticket/4937

Regards,

-- 
.    Facundo

Blog: http://www.taniquetil.com.ar/plog/
PyAr: http://www.python.org/ar/



From ypercube at gmail.com  Sat Mar 12 05:33:45 2011
From: ypercube at gmail.com (Pandelis Theodosiou)
Date: Sat, 12 Mar 2011 14:33:45 +0200
Subject: [Twisted-Python] UDP Logging Server
In-Reply-To: <20110312013227.GB31069@boombah.thristian.org>
References: <AANLkTikgHs7=bUJe3sLomsmsRTKDkFicF+c41hzjc8sQ@mail.gmail.com>
	<20110312013227.GB31069@boombah.thristian.org>
Message-ID: <AANLkTikgzg71qWmUy46fU-FZQA87k1Uzr8T2NBx9VL7m@mail.gmail.com>

On Sat, Mar 12, 2011 at 3:32 AM, Tim Allen <screwtape at froup.com> wrote:

> On Fri, Mar 11, 2011 at 01:15:47PM -0600, SIC FS LIST wrote:
> > So far I have a "working" implementation ... but I'm noticing that if I
> do
> > the following:
> > -- log when a message is received
> > -- that for that message it "might" show up in the file a pretty lengthy
> > period of time later
>
> Assuming the objects stored in DISKINFO[1] etc. are file objects, you
> seem to be writing to the files but never calling flush(). If you don't
> call flush(), Python (well, the C standard library) won't send the data
> on to the OS until its buffer is full, or the file handle is closed. If
> you're not getting that many log lines, it can take a while for that to
> happen.
>
> Of course, if you flush after every disk read, your program will run
> a bit more slowly and with more I/O... for an application where
> reliability is more important than performance (like logging) that's
> probably acceptable.
>

You may also setup a timer that flushes files every, say, 5 minutes.

One other thing I've read in the Python.org site is that flush() is not 100%
sure to work immediately and should be used in combination with os.fsync().
Is there someone that can explain if that is correct?


>
> > The actual UDP protocol:
> >
> > class VocsLogger(DatagramProtocol):
> >     def datagramReceived(self, data, (host, port)):
> >         _proc_msg(self.transport, data, (host,
> > port))._new_msg().addCallback(handler)
>
> _proc_msg doesn't seem to be complicated enough to need its own class,
> why not just do what _proc_msg does in VocsLogger?
>
> > The _proc_msg class:
> >
> > class _proc_msg:
> >     def __init__(self, sck, data, (host, port)):
> >         self._sck = sck
> >         self._data = data
> >         self._host = host
> >         self._port = port
> >
> >     def _new_msg(self):
> >         d, _ = LogMsg().ParseSocketMsg(self._data)
> >         if d.type.upper() == DISKINFO[0]:
> >             DISKINFO[1].write(d.ToString() + "\n%s\n" % (LOG_DELIM))
> >         elif d.type.upper() == LOADAVG[0]:
> >             LOADAVG[1].write(d.ToString() + "\n%s\n" % (LOG_DELIM))
> >         elif d.type.upper() == MEMINFO[0]:
> >             MEMINFO[1].write(d.ToString() + "\n%s\n" % (LOG_DELIM))
> >         elif d.type.upper() == NETDEV[0]:
> >             NETDEV[1].write(d.ToString() + "\n%s\n" % (LOG_DELIM))
> >         elif d.type.upper() == PSAUX[0]:
> >             PSAUX[1].write(d.ToString() + "\n%s\n" % (LOG_DELIM))
> >         elif d.type.upper() == WHOINFO[0]:
> >             WHOINFO[1].write(d.ToString() + "\n%s\n" % (LOG_DELIM))
> >         else:
> >             DEFAULT[1].write(d.ToString() + "\n%s\n" % (LOG_DELIM))
>
> It depends on what DISKINFO[0] and DISKINFO[1] actually are, but
> assuming they're a string and a file-handle, this code would look more
> Pythonic as something like this:
>
> LOGSINKS = {
>        "DISKINFO": open("/var/log/diskinfo", "w"),
>        "LOADAVG": open("/var/log/loadavg", "w"),
>        "MEMINFO": open("/var/log/meminfo", "w"),
>        "NETDEV": open("/var/log/netdev", "w"),
>        "PSAUX": open("/var/log/psaux", "w"),
>        "WHOINFO": open("/var/log/whoinfo", "w"),
>        "DEFAULT": open("/var/log/default", "w"),
>    }
>
> def _new_msg(self, data):
>    d, _ = LogMsg().ParseSocketMsg(data)
>    type = d.type.upper()
>    sink = LOGSINKS.get(type, LOGSINKS['DEFAULT'])
>    sink.write("%s\n%s\n" % (d.ToString(), LOG_DELIM))
>
> Hope that helps!
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110312/a23fa892/attachment.html>

From sicfslist at gmail.com  Sat Mar 12 09:48:52 2011
From: sicfslist at gmail.com (SIC FS LIST)
Date: Sat, 12 Mar 2011 10:48:52 -0600
Subject: [Twisted-Python] UDP Logging Server
In-Reply-To: <AANLkTikgzg71qWmUy46fU-FZQA87k1Uzr8T2NBx9VL7m@mail.gmail.com>
References: <AANLkTikgHs7=bUJe3sLomsmsRTKDkFicF+c41hzjc8sQ@mail.gmail.com>
	<20110312013227.GB31069@boombah.thristian.org>
	<AANLkTikgzg71qWmUy46fU-FZQA87k1Uzr8T2NBx9VL7m@mail.gmail.com>
Message-ID: <AANLkTi=QG=HvZw_+6h1GbqExBC=9v0nVUzPaRQwMcHyz@mail.gmail.com>

Hello,

Thanks for the help.  Adding a timerservice that calls .flush() on the files
every minute (and before rotating the logs) seems to have helped.

Appreciate the quick response and feedback.

Thanks again!

SDR
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110312/9099f560/attachment-0001.html>

From sicfslist at gmail.com  Sat Mar 12 09:53:25 2011
From: sicfslist at gmail.com (SIC FS LIST)
Date: Sat, 12 Mar 2011 10:53:25 -0600
Subject: [Twisted-Python] UDP Logging Server
In-Reply-To: <20110312013227.GB31069@boombah.thristian.org>
References: <AANLkTikgHs7=bUJe3sLomsmsRTKDkFicF+c41hzjc8sQ@mail.gmail.com>
	<20110312013227.GB31069@boombah.thristian.org>
Message-ID: <AANLkTikJq1JMBX3WppfWGDn2kCFdd9DjeY_at0C=1375@mail.gmail.com>

Tim,

Just a quick note to answer your questions:

I have _proc_msg separated out as I'll be adding some additional
functionality on later (adding ACK messages for certain types of log
messages).  I do like the way you handled the _new_msg func.  I'll probably
do that instead ... but with a couple of if's the handle the cases where I
need to ack the message back.

The [1] index of the log types is the file that is opened by
open('/var/log/...etc...')

Thanks again for your help.

SDR
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110312/65525f13/attachment.html>

From screwtape at froup.com  Sat Mar 12 18:15:37 2011
From: screwtape at froup.com (Tim Allen)
Date: Sun, 13 Mar 2011 12:15:37 +1100
Subject: [Twisted-Python] UDP Logging Server
In-Reply-To: <AANLkTikgzg71qWmUy46fU-FZQA87k1Uzr8T2NBx9VL7m@mail.gmail.com>
References: <AANLkTikgHs7=bUJe3sLomsmsRTKDkFicF+c41hzjc8sQ@mail.gmail.com>
	<20110312013227.GB31069@boombah.thristian.org>
	<AANLkTikgzg71qWmUy46fU-FZQA87k1Uzr8T2NBx9VL7m@mail.gmail.com>
Message-ID: <20110313011537.GC31069@boombah.thristian.org>

On Sat, Mar 12, 2011 at 02:33:45PM +0200, Pandelis Theodosiou wrote:
> On Sat, Mar 12, 2011 at 3:32 AM, Tim Allen <screwtape at froup.com> wrote:
> > Of course, if you flush after every disk read, your program will run
> > a bit more slowly and with more I/O... for an application where
> > reliability is more important than performance (like logging) that's
> > probably acceptable.
> 
> You may also setup a timer that flushes files every, say, 5 minutes.
> 
> One other thing I've read in the Python.org site is that flush() is not 100%
> sure to work immediately and should be used in combination with os.fsync().
> Is there someone that can explain if that is correct?

Depends what you mean by 'work'. The standard library (Python's or C's)
buffers reads and writes because calling into the kernel is expensive.
The kernel buffers reads and writes because disk I/O is even more
expensive. flush() tells the standard library "send buffered data to the
kernel right now" which means your data should survive if your process
crashes. fsync() tells the kernel "send buffered data to the disk right
now", which means your data should survive if the entire machine
crashes.

Whether you call nothing, just flush(), or both flush() and fsync()
depends on how your software balances performance versus reliability.



From exarkun at twistedmatrix.com  Sat Mar 12 22:05:21 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 13 Mar 2011 05:05:21 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1299992721.46.849807414@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110313/c9312a96/attachment.html>

From ypercube at gmail.com  Sun Mar 13 04:37:10 2011
From: ypercube at gmail.com (Pandelis Theodosiou)
Date: Sun, 13 Mar 2011 12:37:10 +0200
Subject: [Twisted-Python] UDP Logging Server
In-Reply-To: <20110313011537.GC31069@boombah.thristian.org>
References: <AANLkTikgHs7=bUJe3sLomsmsRTKDkFicF+c41hzjc8sQ@mail.gmail.com>
	<20110312013227.GB31069@boombah.thristian.org>
	<AANLkTikgzg71qWmUy46fU-FZQA87k1Uzr8T2NBx9VL7m@mail.gmail.com>
	<20110313011537.GC31069@boombah.thristian.org>
Message-ID: <AANLkTikipLdPcW2=t=Q7BJ21eUAFe6rpBaQVgoTKZUPJ@mail.gmail.com>

On Sun, Mar 13, 2011 at 3:15 AM, Tim Allen <screwtape at froup.com> wrote:

> On Sat, Mar 12, 2011 at 02:33:45PM +0200, Pandelis Theodosiou wrote:
> > On Sat, Mar 12, 2011 at 3:32 AM, Tim Allen <screwtape at froup.com> wrote:
> > > Of course, if you flush after every disk read, your program will run
> > > a bit more slowly and with more I/O... for an application where
> > > reliability is more important than performance (like logging) that's
> > > probably acceptable.
> >
> > You may also setup a timer that flushes files every, say, 5 minutes.
> >
> > One other thing I've read in the Python.org site is that flush() is not
> 100%
> > sure to work immediately and should be used in combination with
> os.fsync().
> > Is there someone that can explain if that is correct?
>
> Depends what you mean by 'work'. The standard library (Python's or C's)
> buffers reads and writes because calling into the kernel is expensive.
> The kernel buffers reads and writes because disk I/O is even more
> expensive. flush() tells the standard library "send buffered data to the
> kernel right now" which means your data should survive if your process
> crashes. fsync() tells the kernel "send buffered data to the disk right
> now", which means your data should survive if the entire machine
> crashes.
>
> Whether you call nothing, just flush(), or both flush() and fsync()
> depends on how your software balances performance versus reliability.
>
>
>
thnx, very clear explanation.
<http://int.ask.com/web?siteid=10000861&webqsrc=999&l=dis&q=_______________________________________________>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110313/a3929aa6/attachment.html>

From fantix at exoweb.net  Tue Mar 15 00:54:10 2011
From: fantix at exoweb.net (Fantix King)
Date: Tue, 15 Mar 2011 14:54:10 +0800
Subject: [Twisted-Python] Asynchronous context in Twisted
In-Reply-To: <AANLkTikX_wkb5-jgmxQ7Y-3_ENurHS-COTOfBQN=vGX4@mail.gmail.com>
References: <AANLkTikX_wkb5-jgmxQ7Y-3_ENurHS-COTOfBQN=vGX4@mail.gmail.com>
Message-ID: <AANLkTika=xCxs1qmo2jZ2tFXSYJjUGtPqOpzacHcCE53@mail.gmail.com>

On Mar 3, 2011, at 2:39 PM, Glyph Lefkowitz wrote:
> On Mar 3, 2011, at 7:31 AM, Fantix King wrote:
>
> > Hi,
> >
> > I tried to make python.context work in asynchronous code between main
loops. Anyone has similar experience to share please?
> >
> > Not sure if I am rebuilding a wheel :P
> >
> >
http://code.google.com/p/little-site/source/browse/littlesite/custom_reactor.py
>
> This is something I've often thought about doing in Twisted itself,
actually :).  But I wasn't sure that chaining context would actually do
anything practically useful most of the time.  Have you found that it's
actually useful?  Have you managed to leverage this to, for example, get
more informative error messages out of Deferred failures?
>
> Doing it as a subclass like this is not optimal, as it limits you to one
reactor (and the Select reactor is not really the best one).  A wrapper
would be slightly more tricky (you'd have to deal with the places that the
reactor passes itself through to things like Process and Port, so you'd have
to create wrappers for those as well) but much more general.


Thanks for replying! :)

Yes! That's a wonderful idea to use this context for asynchronous traceback!
I made
some small changes to the code and wrote a patch for Twisted (as addReader
and
addWriter is quite different from one impl to another, I changed
SelectReactor only.
I haven't got a better idea for this, please advise), please see attachment.

With a simple example of raising exception in deferLater-ed function
(a-b-c-deferLater-d-e-f-g):

from twisted.internet import reactor
from twisted.internet.task import deferLater
reactor.usingAsyncTraceback = True

def g():
    raise Exception('Something happened inside.')

def f():
    return g()

def e():
    return f()

def d():
    return e()

def c():
    deferred = deferLater(reactor, 1, lambda: None)
    deferred.addCallback(lambda x: d())
    return deferred

def b():
    return c()

def a():
    return b()

if __name__ == '__main__':
    deferred = a()
    def errback(failure):
        failure.printTraceback()
    deferred.addErrback(errback)
    deferred.addBoth(lambda x: reactor.stop())
    reactor.run()


I could get this:


Traceback (most recent call last):
  File "test.py", line 31, in <module>
    deferred = a()
  File "test.py", line 28, in a
    return b()
  File "test.py", line 25, in b
    return c()
  File "test.py", line 20, in c
    deferred = deferLater(reactor, 1, lambda: None)
  File "/home/fantix/ac/twisted/internet/task.py", line 751, in deferLater
    delayedCall = clock.callLater(delay, d.callback, None)
  File "/home/fantix/ac/twisted/internet/base.py", line 701, in callLater
    _f, args, kw = self._chainContext(_f, args, kw)
*--- <asynchronous break point> ---*
  File "/home/fantix/ac/twisted/python/context.py", line 59, in
callWithContext
    return self.currentContext().callWithContext(ctx, func, *args, **kw)
  File "/home/fantix/ac/twisted/python/context.py", line 37, in
callWithContext
    return func(*args,**kw)
  File "/home/fantix/ac/twisted/internet/defer.py", line 361, in callback
    self._startRunCallbacks(result)
  File "/home/fantix/ac/twisted/internet/defer.py", line 455, in
_startRunCallbacks
    self._runCallbacks()
--- <exception caught here> ---
  File "/home/fantix/ac/twisted/internet/defer.py", line 542, in
_runCallbacks
    current.result = callback(current.result, *args, **kw)
  File "test.py", line 21, in <lambda>
    deferred.addCallback(lambda x: d())
  File "test.py", line 17, in d
    return e()
  File "test.py", line 14, in e
    return f()
  File "test.py", line 11, in f
    return g()
  File "test.py", line 8, in g
    raise Exception('Something happened inside.')


Additionally, in my scenario of a 5 years old asynchronous Twisted web
application, we
need the "request" object available throughout all code between asynchronous
network
accesses and database accesses because our global configuration system
needs the
request object. It would greatly reduce our manual work to pass through the
request
object here and there to have a context working in the asynchronous way.


BR,
Fantix.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110315/d3315923/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: fantix_async_context.patch
Type: text/x-patch
Size: 6512 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20110315/d3315923/attachment-0002.bin>

From waterbug at pangalactic.us  Tue Mar 15 08:25:02 2011
From: waterbug at pangalactic.us (Stephen Waterbury)
Date: Tue, 15 Mar 2011 10:25:02 -0400
Subject: [Twisted-Python] AMP cred stuff
Message-ID: <4D7F76BE.3010804@pangalactic.us>

Hey Glyph, Jp, and twisted sprinters,

Sorry I couldn't stay longer -- I stretched my "travel day"
as far as possible, but have to get back to my real job now
(on which I'm under the gun atm).  Hope I can sprint longer
next time -- I had a lot of fun, and the energy in the room
is amazing!

I'll attach the code to a bug tonight (I'll create one if there
isn't one).  I hope I can carve out time to add Kerberos (in
another issue, of course) soon -- selfishly, because I really
need it for my app at work.

Gotta get back to work now -- you guys all rock!

Cheers,
Steve




From facundobatista at gmail.com  Tue Mar 15 08:57:37 2011
From: facundobatista at gmail.com (Facundo Batista)
Date: Tue, 15 Mar 2011 10:57:37 -0400
Subject: [Twisted-Python] TestCase methods names
Message-ID: <AANLkTinmwLYVS6E68G9uh1APVe4dEP78TVwJ3KpfgtsE@mail.gmail.com>

Hello!

The TestCase class, historically, provided several ways to do the same
(I guess because we inherited the semantics from Java).

For example, to check equality, In Python2 we have:

 * assertEquals
 * assertEqual
 * failUnlessEqual

However, note that "assertEquals" was never documented (not in
Python's TestCase, neither in Trial's one).

In Python 3, the "There should be one-- and preferably only one
--obvious way to do it" rule was applied, and now the preferred way to
do that is:

  * assertEqual

Furthermore, assertEquals and failUnlessEqual are *deprecated* in Python 3:

>>> unittest.TestCase.assertEquals
<function deprecated_func at 0xb73795ec>
>>> unittest.TestCase.failUnlessEqual
<function deprecated_func at 0xb73795ec>

(I'm showing examples here using assertEqual, but the same happens for
all the functionalities there)

So, I propose to stick to the same method names than Python; this way
we'll be more consistent and easy to learn than keep providing all
variants.

In concrete, I say that we should:

- Deprecate those names that are deprecated in Python 3 (I mean, still
provide the functionality, but with a DeprecationWarning)

- Stop using them in internal code.

- Fix documentation to explain all this and show the chosen methods.

What do you think?

Regards,

-- 
.    Facundo

Blog: http://www.taniquetil.com.ar/plog/
PyAr: http://www.python.org/ar/



From exarkun at twistedmatrix.com  Tue Mar 15 09:49:23 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 15 Mar 2011 15:49:23 -0000
Subject: [Twisted-Python] AMP cred stuff
In-Reply-To: <4D7F76BE.3010804@pangalactic.us>
References: <4D7F76BE.3010804@pangalactic.us>
Message-ID: <20110315154923.2231.442194833.divmod.xquotient.212@localhost.localdomain>

On 02:25 pm, waterbug at pangalactic.us wrote:
>Hey Glyph, Jp, and twisted sprinters,
>
>Sorry I couldn't stay longer -- I stretched my "travel day"
>as far as possible, but have to get back to my real job now
>(on which I'm under the gun atm).  Hope I can sprint longer
>next time -- I had a lot of fun, and the energy in the room
>is amazing!
>
>I'll attach the code to a bug tonight (I'll create one if there
>isn't one).  I hope I can carve out time to add Kerberos (in
>another issue, of course) soon -- selfishly, because I really
>need it for my app at work.
>
>Gotta get back to work now -- you guys all rock!

Great having you at the sprint, Steve!  If only PyCon could be more than 
once a year. ;)

I'm really looking forward to having proper authentication for AMP in 
Twisted.  Thanks for working on it!

Jean-Paul



From brad.milne at devx.runthered.com  Tue Mar 15 19:55:20 2011
From: brad.milne at devx.runthered.com (Brad Milne)
Date: Wed, 16 Mar 2011 14:55:20 +1300
Subject: [Twisted-Python] LoopingCalls and unclean reactor
Message-ID: <AANLkTi=h8XMqMuY-oj1J+2BskXkWEUP1bQ5E6EWdwoP0@mail.gmail.com>

Hi

I have a series of MultiService objects, with child Services. Some of these
services are TCPServers, for example, and others are my own objects
(extending from Service).
In the instance that I have a Service which controls a LoopingCall, I am
getting intermittent 'unclean reactor' errors during tests. I feel I might
be missing some handling of deferreds, perhaps.
(using 8.2.0 - looking to migrate to 10.2.0 soon)

Here is an example of the approach being used:

class AdapterQueue(service.MultiService):
    def startService(self):
        service.Service.startService(self)
        self._looping_controller = LoopingCall(self._action)
        d = self._looping_controller.start(self.delay, False)
        d.addErrback(self._errorInScheduler)

    def stopService(self):
        service.Service.stopService(self)
        d = self._looping_controller.deferred
        self._looping_controller.stop()
        return d

And an example error (happens about 1/3 of the time):

DirtyReactorAggregateError: Reactor was unclean.
DelayedCalls: (set twisted.internet.base.DelayedCall.debug = True to debug)
<DelayedCall 30800112 [0.0189974308014s] called=0 cancelled=0
LoopingCall<0.033333333333333333>(AdapterQueue._action, *(), **{})()

traceback at creation:

  File "C:\Python26\lib\threading.py", line 497, in __bootstrap
    self.__bootstrap_inner()
      File "C:\Python26\lib\threading.py", line 525, in __bootstrap_inner
    self.run()
      File "C:\Python26\lib\threading.py", line 477, in run
    self.__target(*self.__args, **self.__kwargs)
      File "D:\dev\eggs\nose-0.11.3-py2.6.egg\nose\twistedtools.py", line
57, in <lambda>
    installSignalHandlers=False))
      File
"D:\dev\eggs\twisted-8.2.0-py2.6-win32.egg\twisted\internet\base.py", line
1128, in run
    self.mainLoop()
      File
"D:\dev\eggs\twisted-8.2.0-py2.6-win32.egg\twisted\internet\base.py", line
1137, in mainLoop
    self.runUntilCurrent()
      File
"D:\dev\eggs\twisted-8.2.0-py2.6-win32.egg\twisted\internet\base.py", line
757, in runUntilCurrent
    call.func(*call.args, **call.kw)
      File
"D:\dev\eggs\twisted-8.2.0-py2.6-win32.egg\twisted\internet\task.py", line
115, in __call__
    d.addCallback(cb)
      File
"D:\dev\eggs\twisted-8.2.0-py2.6-win32.egg\twisted\internet\defer.py", line
195, in addCallback
    callbackKeywords=kw)
      File
"D:\dev\eggs\twisted-8.2.0-py2.6-win32.egg\twisted\internet\defer.py", line
186, in addCallbacks
    self._runCallbacks()
      File
"D:\dev\eggs\twisted-8.2.0-py2.6-win32.egg\twisted\internet\defer.py", line
328, in _runCallbacks
    self.result = callback(self.result, *args, **kw)
      File
"D:\dev\eggs\twisted-8.2.0-py2.6-win32.egg\twisted\internet\task.py", line
103, in cb
    self._reschedule()
      File
"D:\dev\eggs\twisted-8.2.0-py2.6-win32.egg\twisted\internet\task.py", line
139, in _reschedule
    self.call = self.clock.callLater(nextTime - currentTime, self)
>


Many thanks
Brad
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110316/cb25cec1/attachment-0001.html>

From drew.smathers at gmail.com  Wed Mar 16 10:06:25 2011
From: drew.smathers at gmail.com (Drew Smathers)
Date: Wed, 16 Mar 2011 12:06:25 -0400
Subject: [Twisted-Python] LoopingCalls and unclean reactor
In-Reply-To: <AANLkTi=h8XMqMuY-oj1J+2BskXkWEUP1bQ5E6EWdwoP0@mail.gmail.com>
References: <AANLkTi=h8XMqMuY-oj1J+2BskXkWEUP1bQ5E6EWdwoP0@mail.gmail.com>
Message-ID: <AANLkTike52n5iWvad3Tod6G6pj=tjefO6+HEEhSZEnMp@mail.gmail.com>

On Tue, Mar 15, 2011 at 9:55 PM, Brad Milne
<brad.milne at devx.runthered.com> wrote:
> Hi
> I have a series of MultiService objects, with child Services. Some of these
> services are TCPServers, for example, and others are my own objects
> (extending from Service).
> In the instance that I have a Service which controls a LoopingCall, I am
> getting intermittent 'unclean reactor' errors during tests. I feel I might
> be missing some handling of deferreds, perhaps.
> (using 8.2.0 - looking to migrate to 10.2.0 soon)
> Here is an example of the approach being used:
> class AdapterQueue(service.MultiService):
>     def startService(self):
>         service.Service.startService(self)
>         self._looping_controller = LoopingCall(self._action)
>         d = self._looping_controller.start(self.delay, False)
>         d.addErrback(self._errorInScheduler)
>     def stopService(self):
>         service.Service.stopService(self)
>         d = self._looping_controller.deferred
>         self._looping_controller.stop()
>         return d


I'm not sure if this is part of the issue or not, but it seems odd
that you may have accidentally inherited from MultiService instead of
Service.


> And an example error (happens about 1/3 of the time):
> DirtyReactorAggregateError: Reactor was unclean.
> DelayedCalls: (set twisted.internet.base.DelayedCall.debug = True to debug)
> <DelayedCall 30800112 [0.0189974308014s] called=0 cancelled=0
> LoopingCall<0.033333333333333333>(AdapterQueue._action, *(), **{})()
> traceback at creation:
>   File "C:\Python26\lib\threading.py", line 497, in __bootstrap
>     self.__bootstrap_inner()
>       File "C:\Python26\lib\threading.py", line 525, in __bootstrap_inner
>     self.run()
>       File "C:\Python26\lib\threading.py", line 477, in run
>     self.__target(*self.__args, **self.__kwargs)
>       File "D:\dev\eggs\nose-0.11.3-py2.6.egg\nose\twistedtools.py", line
> 57, in <lambda>
>     installSignalHandlers=False))
>       File
> "D:\dev\eggs\twisted-8.2.0-py2.6-win32.egg\twisted\internet\base.py", line
> 1128, in run
>     self.mainLoop()
>       File
> "D:\dev\eggs\twisted-8.2.0-py2.6-win32.egg\twisted\internet\base.py", line
> 1137, in mainLoop
>     self.runUntilCurrent()
>       File
> "D:\dev\eggs\twisted-8.2.0-py2.6-win32.egg\twisted\internet\base.py", line
> 757, in runUntilCurrent
>     call.func(*call.args, **call.kw)
>       File
> "D:\dev\eggs\twisted-8.2.0-py2.6-win32.egg\twisted\internet\task.py", line
> 115, in __call__
>     d.addCallback(cb)
>       File
> "D:\dev\eggs\twisted-8.2.0-py2.6-win32.egg\twisted\internet\defer.py", line
> 195, in addCallback
>     callbackKeywords=kw)
>       File
> "D:\dev\eggs\twisted-8.2.0-py2.6-win32.egg\twisted\internet\defer.py", line
> 186, in addCallbacks
>     self._runCallbacks()
>       File
> "D:\dev\eggs\twisted-8.2.0-py2.6-win32.egg\twisted\internet\defer.py", line
> 328, in _runCallbacks
>     self.result = callback(self.result, *args, **kw)
>       File
> "D:\dev\eggs\twisted-8.2.0-py2.6-win32.egg\twisted\internet\task.py", line
> 103, in cb
>     self._reschedule()
>       File
> "D:\dev\eggs\twisted-8.2.0-py2.6-win32.egg\twisted\internet\task.py", line
> 139, in _reschedule
>     self.call = self.clock.callLater(nextTime - currentTime, self)
>>
>


Can you post code for the test?  This means generally (as you
suggested) that you haven't waited for all related deferreds to fire
before ending the test. Return the deferred returned by stopService(),
for example, and make final assertions in a callback; but I'm guessing
you already know this.


-Drew



From jeandaniel.browne at gmail.com  Wed Mar 16 13:55:19 2011
From: jeandaniel.browne at gmail.com (Jean-Daniel)
Date: Wed, 16 Mar 2011 20:55:19 +0100
Subject: [Twisted-Python] sample twistorm code?
Message-ID: <AANLkTikKvgh0cymBzkKdwSpVgdCt39jukV0dZtp7BUoW@mail.gmail.com>

Hello,

I writing a script parsing a large log file and shoveling it into Postgresql.

1. I would like to read some codes examples using the twisted + storm
integration, any idea of where to look?

Also. I was thinking about modeling a line of logs with a namedtuple,
because it is handy to create one without having to write a long and
dumb __init__ which take every constructor argument and one by one
assign them to the instance member of the same name.

2. Is the namedtuple compatible with storm objects? Namedtuple members
are properties and I am not sure it plays well with the storm
machinery.

Thank you for your help,

jdb



From brad.milne at devx.runthered.com  Wed Mar 16 15:13:17 2011
From: brad.milne at devx.runthered.com (Brad Milne)
Date: Thu, 17 Mar 2011 10:13:17 +1300
Subject: [Twisted-Python] LoopingCalls and unclean reactor
In-Reply-To: <AANLkTike52n5iWvad3Tod6G6pj=tjefO6+HEEhSZEnMp@mail.gmail.com>
References: <AANLkTi=h8XMqMuY-oj1J+2BskXkWEUP1bQ5E6EWdwoP0@mail.gmail.com>
	<AANLkTike52n5iWvad3Tod6G6pj=tjefO6+HEEhSZEnMp@mail.gmail.com>
Message-ID: <AANLkTikfO-nGsjWVp8PjxC86hOi+_7wxnR8MwCWQMG79@mail.gmail.com>

Thanks Drew

Yes, you spotted an error in my email, which is not replicated in my code.
ie My AdapterQueue in the code inherits from Service. It in turn is a
service of a parent which *is* a MultiService instance.

The tests are Integration tests, not unit tests, and as such run up an
instance of our entire messaging gateway. To date we have run it up once at
the start of the test run, run all test suites, then torn down (with unclean
reactor). The Integration tests have been notoriously brittle, so am hoping
that tearing down the gateway after *each* individual test will help with
that. To that end, I have refactored the code to better utilise services, so
that teardown (without just stopping the reactor) is possible.

So in the setUp() of each trial.unittest.TestCase, is a call to
test_utils.startGateway(). This returns the result of
gateway_svc.startService() (starts the parent MultiService of all child
services). Each of these setUp methods uses @inlineCallbacks and yields the
deferred returned from this top-level startService().
@inlineCallbacks
def setUp(self):
   yield test_utils.startGateway()
   {do other set up}

By the same token, the tearDown() in each test class calls
test_utils.tearDown(), which looks like:

class SomeTests(TestCase):
    def tearDown(self):
        self.extra_svc.stopService()
        test_utils.tearDown()

Haha! In writing this I've realised what I believe was the problem (and my
repeat testing just now has failed to show the intermittent failure). Each
test class's tearDown() was *not* *returning* the deferred returned from
stopService(). Changing the final line above seems to solve the issue:

return test_utils.tearDown()

Thanks for the sounding board, Drew.
Cheers
Brad



On 17 March 2011 05:06, Drew Smathers <drew.smathers at gmail.com> wrote:

> On Tue, Mar 15, 2011 at 9:55 PM, Brad Milne
> <brad.milne at devx.runthered.com> wrote:
> > Hi
> > I have a series of MultiService objects, with child Services. Some of
> these
> > services are TCPServers, for example, and others are my own objects
> > (extending from Service).
> > In the instance that I have a Service which controls a LoopingCall, I am
> > getting intermittent 'unclean reactor' errors during tests. I feel I
> might
> > be missing some handling of deferreds, perhaps.
> > (using 8.2.0 - looking to migrate to 10.2.0 soon)
> > Here is an example of the approach being used:
> > class AdapterQueue(service.MultiService):
> >     def startService(self):
> >         service.Service.startService(self)
> >         self._looping_controller = LoopingCall(self._action)
> >         d = self._looping_controller.start(self.delay, False)
> >         d.addErrback(self._errorInScheduler)
> >     def stopService(self):
> >         service.Service.stopService(self)
> >         d = self._looping_controller.deferred
> >         self._looping_controller.stop()
> >         return d
>
>
> I'm not sure if this is part of the issue or not, but it seems odd
> that you may have accidentally inherited from MultiService instead of
> Service.
>
>
> > And an example error (happens about 1/3 of the time):
> > DirtyReactorAggregateError: Reactor was unclean.
> > DelayedCalls: (set twisted.internet.base.DelayedCall.debug = True to
> debug)
> > <DelayedCall 30800112 [0.0189974308014s] called=0 cancelled=0
> > LoopingCall<0.033333333333333333>(AdapterQueue._action, *(), **{})()
> > traceback at creation:
> >   File "C:\Python26\lib\threading.py", line 497, in __bootstrap
> >     self.__bootstrap_inner()
> >       File "C:\Python26\lib\threading.py", line 525, in __bootstrap_inner
> >     self.run()
> >       File "C:\Python26\lib\threading.py", line 477, in run
> >     self.__target(*self.__args, **self.__kwargs)
> >       File "D:\dev\eggs\nose-0.11.3-py2.6.egg\nose\twistedtools.py", line
> > 57, in <lambda>
> >     installSignalHandlers=False))
> >       File
> > "D:\dev\eggs\twisted-8.2.0-py2.6-win32.egg\twisted\internet\base.py",
> line
> > 1128, in run
> >     self.mainLoop()
> >       File
> > "D:\dev\eggs\twisted-8.2.0-py2.6-win32.egg\twisted\internet\base.py",
> line
> > 1137, in mainLoop
> >     self.runUntilCurrent()
> >       File
> > "D:\dev\eggs\twisted-8.2.0-py2.6-win32.egg\twisted\internet\base.py",
> line
> > 757, in runUntilCurrent
> >     call.func(*call.args, **call.kw)
> >       File
> > "D:\dev\eggs\twisted-8.2.0-py2.6-win32.egg\twisted\internet\task.py",
> line
> > 115, in __call__
> >     d.addCallback(cb)
> >       File
> > "D:\dev\eggs\twisted-8.2.0-py2.6-win32.egg\twisted\internet\defer.py",
> line
> > 195, in addCallback
> >     callbackKeywords=kw)
> >       File
> > "D:\dev\eggs\twisted-8.2.0-py2.6-win32.egg\twisted\internet\defer.py",
> line
> > 186, in addCallbacks
> >     self._runCallbacks()
> >       File
> > "D:\dev\eggs\twisted-8.2.0-py2.6-win32.egg\twisted\internet\defer.py",
> line
> > 328, in _runCallbacks
> >     self.result = callback(self.result, *args, **kw)
> >       File
> > "D:\dev\eggs\twisted-8.2.0-py2.6-win32.egg\twisted\internet\task.py",
> line
> > 103, in cb
> >     self._reschedule()
> >       File
> > "D:\dev\eggs\twisted-8.2.0-py2.6-win32.egg\twisted\internet\task.py",
> line
> > 139, in _reschedule
> >     self.call = self.clock.callLater(nextTime - currentTime, self)
> >>
> >
>
>
> Can you post code for the test?  This means generally (as you
> suggested) that you haven't waited for all related deferreds to fire
> before ending the test. Return the deferred returned by stopService(),
> for example, and make final assertions in a callback; but I'm guessing
> you already know this.
>
>
> -Drew
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Brad Milne | Run The Red | *brad.milne at devx.runthered.com*
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110317/89f107e6/attachment.html>

From jkakar at kakar.ca  Wed Mar 16 23:19:03 2011
From: jkakar at kakar.ca (Jamu Kakar)
Date: Thu, 17 Mar 2011 06:19:03 +0100
Subject: [Twisted-Python] TestCase methods names
In-Reply-To: <AANLkTinmwLYVS6E68G9uh1APVe4dEP78TVwJ3KpfgtsE@mail.gmail.com>
References: <AANLkTinmwLYVS6E68G9uh1APVe4dEP78TVwJ3KpfgtsE@mail.gmail.com>
Message-ID: <AANLkTimQ01VzotpjPou+2TfYWz2Yp5opb8ptMjcEcjkV@mail.gmail.com>

Hi Facundo,

On Tue, Mar 15, 2011 at 3:57 PM, Facundo Batista
<facundobatista at gmail.com> wrote:
> So, I propose to stick to the same method names than Python; this way
> we'll be more consistent and easy to learn than keep providing all
> variants.
>
> In concrete, I say that we should:
>
> - Deprecate those names that are deprecated in Python 3 (I mean, still
> provide the functionality, but with a DeprecationWarning)
>
> - Stop using them in internal code.
>
> - Fix documentation to explain all this and show the chosen methods.
>
> What do you think?

A note about assertEqual--at PyCon 2010 Michael Foord announced that
the order of arguments should be assertEqual(expected, actual).  It
would be good to start using that convention everywhere, in addition
to the changes you've recommended above.

Thanks,
J.



From jkakar at kakar.ca  Wed Mar 16 23:35:19 2011
From: jkakar at kakar.ca (Jamu Kakar)
Date: Thu, 17 Mar 2011 06:35:19 +0100
Subject: [Twisted-Python] sample twistorm code?
In-Reply-To: <AANLkTikKvgh0cymBzkKdwSpVgdCt39jukV0dZtp7BUoW@mail.gmail.com>
References: <AANLkTikKvgh0cymBzkKdwSpVgdCt39jukV0dZtp7BUoW@mail.gmail.com>
Message-ID: <AANLkTinBDxe+UTJ6YEkKE_rt-jdBUAq6Axax1s-prkGv@mail.gmail.com>

Hi Jean-Daniel,

In the future, please ask Storm-related questions on the Storm mailing
list [1] or in #storm on Freenode.

On Wed, Mar 16, 2011 at 8:55 PM, Jean-Daniel
<jeandaniel.browne at gmail.com> wrote:
> I writing a script parsing a large log file and shoveling it into Postgresql.

For what it's worth, using live objects for a large number of inserts
will be much slower than running INSERT statements directly.  Unless
the import code you're writing would be really complex with
hand-written statements, you'll probably want to avoid live objects.

> 1. I would like to read some codes examples using the twisted + storm
> integration, any idea of where to look?

The Twisted Storm code is not, as far as I know, regularly maintained.
That said, I think there are some people using it successfully.  The
generally recommended way to use Storm with Twisted is to run all
database logic in a thread with deferToThread.  You need to ensure
that Storm objects are not used outside the thread in which they were
retrieved.

I don't know of any examples.

> Also. I was thinking about modeling a line of logs with a namedtuple,
> because it is handy to create one without having to write a long and
> dumb __init__ which take every constructor argument and one by one
> assign them to the instance member of the same name.
>
> 2. Is the namedtuple compatible with storm objects? Namedtuple members
> are properties and I am not sure it plays well with the storm
> machinery.

namedtuple's aren't compatible with Storm.  Storm requires
database-backed properties to be defined on a class using Storm
properties.  Storm classes must also define a __storm_table__ class
attribute.

Thanks,
J.

[1] https://lists.canonical.com/mailman/listinfo/storm



From itamar at itamarst.org  Thu Mar 17 06:40:43 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Thu, 17 Mar 2011 08:40:43 -0400
Subject: [Twisted-Python] [Twisted-commits] r31216 - skip glib and gtk
 reactors in the new test
In-Reply-To: <20110317025544.1EA8C355E2@wolfwood.twistedmatrix.com>
References: <20110317025544.1EA8C355E2@wolfwood.twistedmatrix.com>
Message-ID: <1300365643.1709.2.camel@blake>

On Wed, 2011-03-16 at 20:55 -0600, pahan at wolfwood.twistedmatrix.com
wrote:

> +
> +        skippedReactors = ["Glib2Reactor", "Gtk2Reactor"]
> +        reactorClassName = reactor.__class__.__name__
> +        if reactorClassName in skippedReactors and platform.isWindows():
> +            raise SkipTest(
> +                "This test is broken on gtk/glib under Windows.")
> +

Shouldn't that be a todo, rather than a skip? Or maybe file a ticket.




From soid-exe at yandex.ru  Thu Mar 17 07:37:04 2011
From: soid-exe at yandex.ru (Temchenko Grigory)
Date: Thu, 17 Mar 2011 16:37:04 +0300
Subject: [Twisted-Python] Unicode exceptions
Message-ID: <126311300369025@web91.yandex.ru>

Hey there,

On my production server I have periodically happening unicode error but not on my desktop. It appears in logs:

2011-03-17 13:14:53+0000 [GameProtocol,941,95.78.43.17] <unicode instance at 0x9e304a0 with str error:
	 Traceback (most recent call last):
	  File "/usr/local/lib/python2.6/dist-packages/twisted/python/reflect.py", line 546, in _safeFormat
	    return formatter(o)
	UnicodeEncodeError: 'ascii' codec can't encode characters in position 21-26: ordinal not in range(128)
	>

It doesn't affect any logic in application but it's annoying in logs.

The server runs under Ubuntu 10.10 Server, Python 2.6.5, Twisted 10.2.0.
The desktop is Ubuntu 10.10 Desktop, Python 2.6.5, Twisted 10.2.0.

Locales are the same:
$ locale
LANG=en_US.UTF-8
LANGUAGE=en_US.UTF-8
LC_CTYPE="en_US.UTF-8"
LC_NUMERIC="en_US.UTF-8"
LC_TIME="en_US.UTF-8"
LC_COLLATE="en_US.UTF-8"
LC_MONETARY="en_US.UTF-8"
LC_MESSAGES="en_US.UTF-8"
LC_PAPER="en_US.UTF-8"
LC_NAME="en_US.UTF-8"
LC_ADDRESS="en_US.UTF-8"
LC_TELEPHONE="en_US.UTF-8"
LC_MEASUREMENT="en_US.UTF-8"
LC_IDENTIFICATION="en_US.UTF-8"
LC_ALL=en_US.UTF-8

What do I have to check to get it fixed?



From exarkun at twistedmatrix.com  Thu Mar 17 12:30:54 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 17 Mar 2011 18:30:54 -0000
Subject: [Twisted-Python] [Twisted-commits] r31216 - skip glib and
	gtk	reactors in the new test
In-Reply-To: <1300365643.1709.2.camel@blake>
References: <20110317025544.1EA8C355E2@wolfwood.twistedmatrix.com>
	<1300365643.1709.2.camel@blake>
Message-ID: <20110317183054.2231.198901766.divmod.xquotient.214@localhost.localdomain>

On 12:40 pm, itamar at itamarst.org wrote:
>On Wed, 2011-03-16 at 20:55 -0600, pahan at wolfwood.twistedmatrix.com
>wrote:
>>+
>>+        skippedReactors = ["Glib2Reactor", "Gtk2Reactor"]
>>+        reactorClassName = reactor.__class__.__name__
>>+        if reactorClassName in skippedReactors and 
>>platform.isWindows():
>>+            raise SkipTest(
>>+                "This test is broken on gtk/glib under Windows.")
>>+
>
>Shouldn't that be a todo, rather than a skip? Or maybe file a ticket.

A ticket would be nice, indeed.  We are collecting quite a nice set of 
gtk2-does-not-work-on-Windows issues in our test suite.

Jean-Paul



From glyph at twistedmatrix.com  Thu Mar 17 12:40:48 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 17 Mar 2011 14:40:48 -0400
Subject: [Twisted-Python] [Twisted-commits] r31216 - skip glib and gtk
	reactors in the new test
In-Reply-To: <20110317183054.2231.198901766.divmod.xquotient.214@localhost.localdomain>
References: <20110317025544.1EA8C355E2@wolfwood.twistedmatrix.com>
	<1300365643.1709.2.camel@blake>
	<20110317183054.2231.198901766.divmod.xquotient.214@localhost.localdomain>
Message-ID: <B73A3B2B-F307-4F68-8EA1-212BD325BB0F@twistedmatrix.com>


On Mar 17, 2011, at 2:30 PM, exarkun at twistedmatrix.com wrote:

> On 12:40 pm, itamar at itamarst.org wrote:
>> On Wed, 2011-03-16 at 20:55 -0600, pahan at wolfwood.twistedmatrix.com
>> wrote:
>>> +
>>> +        skippedReactors = ["Glib2Reactor", "Gtk2Reactor"]
>>> +        reactorClassName = reactor.__class__.__name__
>>> +        if reactorClassName in skippedReactors and 
>>> platform.isWindows():
>>> +            raise SkipTest(
>>> +                "This test is broken on gtk/glib under Windows.")
>>> +
>> 
>> Shouldn't that be a todo, rather than a skip? Or maybe file a ticket.
> 
> A ticket would be nice, indeed.  We are collecting quite a nice set of 
> gtk2-does-not-work-on-Windows issues in our test suite.

Ticket plus skip would be my preference.  The terminology of 'skip' vs. 'todo' is slightly misleading.  'skip' really means 'this is a test that I know fails, and I want to fix it later', so it doesn't bother to run it.  Whereas 'todo' means 'this is a test that sometimes fails and sometimes succeeds, I don't know what's going on with it, let's keep running it all the time to gather some data about how it fails differently over time'.

In this case, we basically know what the problem is, and running the test on the buildbot in a broken configuration is likely to cause more problems than it solves by a long shot.

Frankly, I am on the fence about the functionality of 'todo' being useful, ever.  Mostly it seems to just slow down test suites for no particular gain.




From michaelnt at gmail.com  Fri Mar 18 17:44:41 2011
From: michaelnt at gmail.com (Michael Thompson)
Date: Fri, 18 Mar 2011 23:44:41 +0000
Subject: [Twisted-Python] Benchmark of Python WSGI servers
Message-ID: <AANLkTimksYV8BYup6zn8xLbKkaTx0+aqc7m=oVYQ92vi@mail.gmail.com>

>From the guys who brought you async socket benchmark,
http://nichol.as/asynchronous-servers-in-python, comes Python WSGI
benchmark
http://nichol.as/benchmark-of-python-web-servers.

Is twisted coming out of this so badly because they are using the
default reactor, as opposed to epoll?

Perhaps the default reactor should be the best available rather than
the lowest common denominator.

Michael



From glyph at twistedmatrix.com  Fri Mar 18 18:54:26 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 18 Mar 2011 20:54:26 -0400
Subject: [Twisted-Python] Benchmark of Python WSGI servers
In-Reply-To: <AANLkTimksYV8BYup6zn8xLbKkaTx0+aqc7m=oVYQ92vi@mail.gmail.com>
References: <AANLkTimksYV8BYup6zn8xLbKkaTx0+aqc7m=oVYQ92vi@mail.gmail.com>
Message-ID: <9A1FEA5C-609D-4071-B794-2666BF6E217E@twistedmatrix.com>

On Mar 18, 2011, at 7:44 PM, Michael Thompson wrote:

> From the guys who brought you async socket benchmark,
> http://nichol.as/asynchronous-servers-in-python, comes Python WSGI
> benchmark
> http://nichol.as/benchmark-of-python-web-servers.

Yep, I've seen that before.  It's one of the better benchmarks of its kind in the Python world, but unfortunately stops short of being good :).

The benchmark isn't really saying much that's interesting about WSGI servers anyway.  It mostly says "all of these servers are more than 20x faster than your WSGI app could ever possibly be, if it does anything interesting, so at most the server will account for 5% of your performance".  The logical conclusion: regardless of what server you're using, go optimize your app first.

While I'd love for Twisted to come out on top of that chart (it's always best to win at things, right?), such an improvement would be of little practical benefit to our users.  First because almost nobody has a WSGI app that is so trivial that it would be significantly helped by speeding up that part of the server, and also the fact that anyone with serious performance requirements in Twisted will be optimizing by calling Resource and Request APIs directly, asynchronously in the main loop (perhaps with multiple processes), not threading WSGI handlers for the critical fast path in their application.  Which, I hasten to remind you, is rarely all of your application.  A performance improvement to static.File, like making it truly non-blocking, would probably be a more significant benefit to most websites that want to be fast than making the thing that calls a WSGI function fast.

> Is twisted coming out of this so badly because they are using the
> default reactor, as opposed to epoll?

There isn't really enough analysis to determine why exactly Twisted fares poorly on this particular benchmark.

My pet theory is that it has something to do with transferring data from threads to the I/O loop via queue synchronization, and not being as smart as it could be about buffering, and that particular technique getting slammed really hard for very small request/response pairs.  I hypothesize that more buffering would occur with larger responses with more chunks, and that would bring Twisted's performance up to those of these other servers.

But it's hard to say, and, as I said above the benchmark isn't measuring anything too interesting, so it's hard to work up the motivation to find out.

> Perhaps the default reactor should be the best available rather than
> the lowest common denominator.

See <http://twistedmatrix.com/trac/ticket/2234>.  There should be a ticket for the broader goal too, and maybe it's already filed; I couldn't find it quickly.


From exarkun at twistedmatrix.com  Fri Mar 18 19:35:08 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 19 Mar 2011 01:35:08 -0000
Subject: [Twisted-Python] Benchmark of Python WSGI servers
In-Reply-To: <9A1FEA5C-609D-4071-B794-2666BF6E217E@twistedmatrix.com>
References: <AANLkTimksYV8BYup6zn8xLbKkaTx0+aqc7m=oVYQ92vi@mail.gmail.com>
	<9A1FEA5C-609D-4071-B794-2666BF6E217E@twistedmatrix.com>
Message-ID: <20110319013508.2231.1956753728.divmod.xquotient.261@localhost.localdomain>

On 12:54 am, glyph at twistedmatrix.com wrote:
>On Mar 18, 2011, at 7:44 PM, Michael Thompson wrote:
>> From the guys who brought you async socket benchmark,
>>http://nichol.as/asynchronous-servers-in-python, comes Python WSGI
>>benchmark
>>http://nichol.as/benchmark-of-python-web-servers.
>
>Yep, I've seen that before.  It's one of the better benchmarks of its 
>kind in the Python world, but unfortunately stops short of being good 
>:).
>
>The benchmark isn't really saying much that's interesting about WSGI 
>servers anyway.  It mostly says "all of these servers are more than 20x 
>faster than your WSGI app could ever possibly be, if it does anything 
>interesting, so at most the server will account for 5% of your 
>performance".  The logical conclusion: regardless of what server you're 
>using, go optimize your app first.
>
>While I'd love for Twisted to come out on top of that chart (it's 
>always best to win at things, right?), such an improvement would be of 
>little practical benefit to our users.  First because almost nobody has 
>a WSGI app that is so trivial that it would be significantly helped by 
>speeding up that part of the server, and also the fact that anyone with 
>serious performance requirements in Twisted will be optimizing by 
>calling Resource and Request APIs directly, asynchronously in the main 
>loop (perhaps with multiple processes), not threading WSGI handlers for 
>the critical fast path in their application.  Which, I hasten to remind 
>you, is rarely all of your application.  A performance improvement to 
>static.File, like making it truly non-blocking, would probably be a 
>more significant benefit to most websites that want to be fast than 
>making the thing that calls a WSGI function fast.
>>Is twisted coming out of this so badly because they are using the
>>default reactor, as opposed to epoll?
>
>There isn't really enough analysis to determine why exactly Twisted 
>fares poorly on this particular benchmark.
>
>My pet theory is that it has something to do with transferring data 
>from threads to the I/O loop via queue synchronization, and not being 
>as smart as it could be about buffering, and that particular technique 
>getting slammed really hard for very small request/response pairs.  I 
>hypothesize that more buffering would occur with larger responses with 
>more chunks, and that would bring Twisted's performance up to those of 
>these other servers.
>
>But it's hard to say, and, as I said above the benchmark isn't 
>measuring anything too interesting, so it's hard to work up the 
>motivation to find out.
>>Perhaps the default reactor should be the best available rather than
>>the lowest common denominator.
>
>See <http://twistedmatrix.com/trac/ticket/2234>.  There should be a 
>ticket for the broader goal too, and maybe it's already filed; I 
>couldn't find it quickly.

This all seems right on to me.  I just wanted to add that of the "top 
performers", there is some difference in what's being benchmarked.  Some 
of them use green threads instead of threads.  Some of them are 
multiprocess.  Compared to a thread-based WSGI container, these 
approaches have some performance benefits.  If someone wanted to make 
Twisted WSGI benchmark better, implementing one (or both) of these 
approaches would be one good way to go about it.

A multi-process WSGI container might actually be of practical use, since 
it may make more cores available to your server.  If an application is 
bottlenecked on CPU rather than some high-latency operation (as you can 
only process as many concurrent requests as you have threads in your 
threadpool), more cores can help.

Jean-Paul



From exarkun at twistedmatrix.com  Fri Mar 18 19:36:55 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 19 Mar 2011 01:36:55 -0000
Subject: [Twisted-Python] TestCase methods names
In-Reply-To: <AANLkTinmwLYVS6E68G9uh1APVe4dEP78TVwJ3KpfgtsE@mail.gmail.com>
References: <AANLkTinmwLYVS6E68G9uh1APVe4dEP78TVwJ3KpfgtsE@mail.gmail.com>
Message-ID: <20110319013655.2231.453825371.divmod.xquotient.262@localhost.localdomain>

On 15 Mar, 02:57 pm, facundobatista at gmail.com wrote:
>Hello!
>
>The TestCase class, historically, provided several ways to do the same
>(I guess because we inherited the semantics from Java).
>
>For example, to check equality, In Python2 we have:
>
>* assertEquals
>* assertEqual
>* failUnlessEqual
>
>However, note that "assertEquals" was never documented (not in
>Python's TestCase, neither in Trial's one).
>
>In Python 3, the "There should be one-- and preferably only one
>--obvious way to do it" rule was applied, and now the preferred way to
>do that is:
>
>  * assertEqual
>
>Furthermore, assertEquals and failUnlessEqual are *deprecated* in 
>Python 3:
>>>>unittest.TestCase.assertEquals
><function deprecated_func at 0xb73795ec>
>>>>unittest.TestCase.failUnlessEqual
><function deprecated_func at 0xb73795ec>
>
>(I'm showing examples here using assertEqual, but the same happens for
>all the functionalities there)
>
>So, I propose to stick to the same method names than Python; this way
>we'll be more consistent and easy to learn than keep providing all
>variants.
>
>In concrete, I say that we should:
>
>- Deprecate those names that are deprecated in Python 3 (I mean, still
>provide the functionality, but with a DeprecationWarning)
>
>- Stop using them in internal code.
>
>- Fix documentation to explain all this and show the chosen methods.
>
>What do you think?

+1 from me.

Jean-Paul



From exarkun at twistedmatrix.com  Fri Mar 18 19:40:38 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 19 Mar 2011 01:40:38 -0000
Subject: [Twisted-Python] Best strategies for pb Referenceables
	running	long methods from callRemote
In-Reply-To: <AANLkTimaAPH-GYHz-ptpNQWFsj4oyh_N005HQ+RQq6hR@mail.gmail.com>
References: <AANLkTimaAPH-GYHz-ptpNQWFsj4oyh_N005HQ+RQq6hR@mail.gmail.com>
Message-ID: <20110319014038.2231.1181588868.divmod.xquotient.269@localhost.localdomain>

On 10 Mar, 11:08 pm, charlessolar at gmail.com wrote:
>I am using PB to run remote methods in a testing system at my company. 
>The
>code works very well but breaks down when I start running multiple 
>tests at
>once.  I have tracked this down to overflowing the thread pool on the 
>remote
>machines.  I am wondering if anyone might have better suggestions for
>running long methods from a remote method.
>
>I coded up a sample of what I am seeing here: 
>http://pastebin.com/rBPp20Ms
>
>Basically I have 1 server that calls remote_execute on many clients on 
>a
>remote server.  This remote_execute method starts a new method using
>threads.deferToThread and returns the defer to make the server's 
>callRemote
>defer wait until the remote long method end.
>What I do in those methods is run test code that waits, blocks, sleeps, 
>and
>all sorts of nasty things that make the thread take a while.  In the 
>example
>code I simply sleep for 20 seconds.
>
>The problem I see with this code specifically is that I run out of 
>threads
>on the pool and even though I wanted all execute methods to run at the 
>same
>time, I see 10 run, then 10 more, then 10 more.. etc.  The testing 
>depends
>on all these methods being run at the same time as they run mechanisms 
>that
>depend on each other and need everyone running.  When I overflow the 
>thread
>pool some methods do not run until other methods stop, which makes the 
>whole
>test fail.

This is how the thread pool works.  It has a maximum size, which limits 
the number of threads it will create to process work given to it. 
Beyond that number of concurrent tasks, things will begin to get queued 
up and wait for a free thread to execute them.

Each task you give to the thread pool exclusively uses one of its 
threads for the entire duration of the task, regardless of what the task 
consists of.
>I am not holding the GIL or blocking the reactor, which was the first 
>thing
>I checked.
>
>Setting reactor.suggestThreadPoolSize(50) does help, but I do not think 
>its
>the best solution, and does not work very well on our slow and older
>machines.

Using more threads is the only solution to the problem of not using 
enough threads.  Alternatively, look for wards to process tasks without 
using threads.

Jean-Paul



From charlessolar at gmail.com  Fri Mar 18 20:06:11 2011
From: charlessolar at gmail.com (Charles Solar)
Date: Fri, 18 Mar 2011 21:06:11 -0500
Subject: [Twisted-Python] Best strategies for pb Referenceables running
 long methods from callRemote
In-Reply-To: <20110319014038.2231.1181588868.divmod.xquotient.269@localhost.localdomain>
References: <AANLkTimaAPH-GYHz-ptpNQWFsj4oyh_N005HQ+RQq6hR@mail.gmail.com>
	<20110319014038.2231.1181588868.divmod.xquotient.269@localhost.localdomain>
Message-ID: <AANLkTin41ByOBjfbZZysfWn9bUB5x914SO0FGDv=HkST@mail.gmail.com>

Thanks for the reply.  I am using twisted conch to connect to the remote
machines and start these tests, I am thinking that instead of using one
connection for all testing I will open a new connection (and thus a new
python) for each test.  Like I said increasing the thread pool size worked
well for fast machines but no so well on older ones.  I am hoping that this
behavior has more to do with the GIL and that 5 processes on a slow machine
will operate better than 5 python threads.
If not, then I will just have to write some sort of system to make sure I
dont open too many threads on certain remote machines.

Thanks again

On Fri, Mar 18, 2011 at 8:40 PM, <exarkun at twistedmatrix.com> wrote:

> On 10 Mar, 11:08 pm, charlessolar at gmail.com wrote:
> >I am using PB to run remote methods in a testing system at my company.
> >The
> >code works very well but breaks down when I start running multiple
> >tests at
> >once.  I have tracked this down to overflowing the thread pool on the
> >remote
> >machines.  I am wondering if anyone might have better suggestions for
> >running long methods from a remote method.
> >
> >I coded up a sample of what I am seeing here:
> >http://pastebin.com/rBPp20Ms
> >
> >Basically I have 1 server that calls remote_execute on many clients on
> >a
> >remote server.  This remote_execute method starts a new method using
> >threads.deferToThread and returns the defer to make the server's
> >callRemote
> >defer wait until the remote long method end.
> >What I do in those methods is run test code that waits, blocks, sleeps,
> >and
> >all sorts of nasty things that make the thread take a while.  In the
> >example
> >code I simply sleep for 20 seconds.
> >
> >The problem I see with this code specifically is that I run out of
> >threads
> >on the pool and even though I wanted all execute methods to run at the
> >same
> >time, I see 10 run, then 10 more, then 10 more.. etc.  The testing
> >depends
> >on all these methods being run at the same time as they run mechanisms
> >that
> >depend on each other and need everyone running.  When I overflow the
> >thread
> >pool some methods do not run until other methods stop, which makes the
> >whole
> >test fail.
>
> This is how the thread pool works.  It has a maximum size, which limits
> the number of threads it will create to process work given to it.
> Beyond that number of concurrent tasks, things will begin to get queued
> up and wait for a free thread to execute them.
>
> Each task you give to the thread pool exclusively uses one of its
> threads for the entire duration of the task, regardless of what the task
> consists of.
> >I am not holding the GIL or blocking the reactor, which was the first
> >thing
> >I checked.
> >
> >Setting reactor.suggestThreadPoolSize(50) does help, but I do not think
> >its
> >the best solution, and does not work very well on our slow and older
> >machines.
>
> Using more threads is the only solution to the problem of not using
> enough threads.  Alternatively, look for wards to process tasks without
> using threads.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110318/1518c09b/attachment.html>

From gxti at partiallystapled.com  Fri Mar 18 21:08:56 2011
From: gxti at partiallystapled.com (Michael Tharp)
Date: Fri, 18 Mar 2011 23:08:56 -0400
Subject: [Twisted-Python] Windows build slaves
Message-ID: <4D841E48.9070504@partiallystapled.com>

Greetings,

I hear that Twisted needs some new/better/more reliable Windows build 
slaves. My employer has plenty of ESX capacity, and I know that a few 
other people are interested in helping out as well, so perhaps this a 
good time to clarify the requirements:

Which platforms: XP and 7? 32bit and 64bit? Any interest in the server 
editions?

Per-machine requirements: how much HDD and RAM? Any weird stuff like 
serial ports?

Connectivity: Is NAT OK, or are inbound connections required?

Do maintainers need access to the hypervisor, or is it adequate to have 
a watchdog to reboot crashed slaves?


Contingent on employer approval, I can donate 4 VMs (one of each flavor) 
with 2GiB of RAM and tens of GB storage each, including MSDN licenses. 
The limitations are that they would be on a NAT-only subnet with no 
possibility of inbound ports, and that there would be no hypervisor 
access. However, I can provide a watchdog to deal with crashed slaves 
and a VPN could be arranged if there's a public endpoint I can direct it 
to. I'm also "generally pretty accessible" although Glyph unsurprisingly 
indicates that people have failed to live up to that promise in the past 
:P   The offer is flexible, I'm just trying to start small to feel out 
the requirements.


--
Michael Tharp
rPath, Inc.



From glyph at twistedmatrix.com  Sat Mar 19 02:27:46 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 19 Mar 2011 04:27:46 -0400
Subject: [Twisted-Python] TestCase methods names
In-Reply-To: <20110319013655.2231.453825371.divmod.xquotient.262@localhost.localdomain>
References: <AANLkTinmwLYVS6E68G9uh1APVe4dEP78TVwJ3KpfgtsE@mail.gmail.com>
	<20110319013655.2231.453825371.divmod.xquotient.262@localhost.localdomain>
Message-ID: <B2D8F536-5B45-4D6D-A813-D61B48A869E9@twistedmatrix.com>


On Mar 18, 2011, at 9:36 PM, exarkun at twistedmatrix.com wrote:

>> In concrete, I say that we should:
>> 
>> - Deprecate those names that are deprecated in Python 3 (I mean, still
>> provide the functionality, but with a DeprecationWarning)
>> 
>> - Stop using them in internal code.
>> 
>> - Fix documentation to explain all this and show the chosen methods.
>> 
>> What do you think?
> 
> +1 from me.

Me too, except the order is wrong:

>> - Fix documentation...

>> - Stop using them...

>> - Deprecate those names...

In the past we've made an unfortunate habit of deprecating names and emitting tons of warnings without either explaining why they've been deprecated or removing our own usage.

Let's get those done first before we start inserting warnings.

Thanks! :)

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110319/99810c33/attachment-0001.html>

From glyph at twistedmatrix.com  Sat Mar 19 02:29:56 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 19 Mar 2011 04:29:56 -0400
Subject: [Twisted-Python] Benchmark of Python WSGI servers
In-Reply-To: <20110319013508.2231.1956753728.divmod.xquotient.261@localhost.localdomain>
References: <AANLkTimksYV8BYup6zn8xLbKkaTx0+aqc7m=oVYQ92vi@mail.gmail.com>
	<9A1FEA5C-609D-4071-B794-2666BF6E217E@twistedmatrix.com>
	<20110319013508.2231.1956753728.divmod.xquotient.261@localhost.localdomain>
Message-ID: <2B75A13A-60ED-4FD5-ADF0-1BC35CA3CCE8@twistedmatrix.com>

On Mar 18, 2011, at 9:35 PM, exarkun at twistedmatrix.com wrote:

> A multi-process WSGI container might actually be of practical use, since 
> it may make more cores available to your server.  If an application is 
> bottlenecked on CPU rather than some high-latency operation (as you can 
> only process as many concurrent requests as you have threads in your 
> threadpool), more cores can help.

+1.  This will actually speed up your application code, not just the server :).

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110319/e5fd59a6/attachment.html>

From _ at lvh.cc  Sat Mar 19 06:00:48 2011
From: _ at lvh.cc (Laurens Van Houtven)
Date: Sat, 19 Mar 2011 13:00:48 +0100
Subject: [Twisted-Python] TestCase methods names
In-Reply-To: <20110319013655.2231.453825371.divmod.xquotient.262@localhost.localdomain>
References: <AANLkTinmwLYVS6E68G9uh1APVe4dEP78TVwJ3KpfgtsE@mail.gmail.com>
	<20110319013655.2231.453825371.divmod.xquotient.262@localhost.localdomain>
Message-ID: <AANLkTi=8Z8aGoO8EVKr=+b93VnDFV4D7LsrNa8EFgzDi@mail.gmail.com>

I'm with JP, but a reasonable warning should be important, yes.

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110319/c2f322e2/attachment.html>

From michaelnt at gmail.com  Sat Mar 19 06:39:55 2011
From: michaelnt at gmail.com (Michael Thompson)
Date: Sat, 19 Mar 2011 12:39:55 +0000
Subject: [Twisted-Python] Benchmark of Python WSGI servers
In-Reply-To: <2B75A13A-60ED-4FD5-ADF0-1BC35CA3CCE8@twistedmatrix.com>
References: <AANLkTimksYV8BYup6zn8xLbKkaTx0+aqc7m=oVYQ92vi@mail.gmail.com>
	<9A1FEA5C-609D-4071-B794-2666BF6E217E@twistedmatrix.com>
	<20110319013508.2231.1956753728.divmod.xquotient.261@localhost.localdomain>
	<2B75A13A-60ED-4FD5-ADF0-1BC35CA3CCE8@twistedmatrix.com>
Message-ID: <AANLkTimY5Z76YkO8gV2MK70=esujcV5826=DwudPgtj+@mail.gmail.com>

On 19 March 2011 08:29, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> On Mar 18, 2011, at 9:35 PM, exarkun at twistedmatrix.com wrote:
>
> A multi-process WSGI container might actually be of practical use, since
> it may make more cores available to your server.  If an application is
> bottlenecked on CPU rather than some high-latency operation (as you can
> only process as many concurrent requests as you have threads in your
> threadpool), more cores can help.
>
> +1.  This will actually speed up your application code, not just the server
> :).

I agree that threads and processes is going to be the first step to
scaling but I don't think there's much advantage putting that in
twisted given that there are other solutions for this.

I was hoping that changing the reactor would give an easy way to make
Twisted look better, from a PR point of view. To check I ran a
benchmark on two EC2 m1.small machines using

httperf --timeout=5 --client=0/1 --server=ip-10-234-217-116
--port=8443 --uri=/ --rate=1000 --send-buffer=4096 --recv-buffer=16384
--num-conns=4000 --num-calls=10

gevent 1998 req/s.
select  734 req/s
poll      687 req/s
epoll    694 req/s

So looks like the reactor has nothing to do with it. Here some profile
results for the select reactor.

         2716620 function calls (2716586 primitive calls) in 21.634 CPU seconds

   Ordered by: internal time
   List reduced from 340 to 34 due to restriction <0.10000000000000001>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
       55    5.994    0.109    6.141    0.112 {select.select}
    22871    0.992    0.000    0.992    0.000 {built-in method acquire}
     5706    0.642    0.000    1.927    0.000 wsgi.py:168(__init__)
   165474    0.521    0.000    0.528    0.000 http.py:626(__setattr__)
     5706    0.394    0.000    1.778    0.000 http.py:922(write)
     5706    0.379    0.000    7.879    0.001 basic.py:543(dataReceived)
   142650    0.363    0.000    0.363    0.000 {method 'lower' of 'str' objects}
    34236    0.341    0.000    0.582    0.000
http_headers.py:13(_dashCapitalize)
    74178    0.324    0.000    0.712    0.000 http_headers.py:222(getRawHeaders)
    34236    0.319    0.000    0.954    0.000
http_headers.py:249(_canonicalNameCaps)
    22824    0.305    0.000    7.434    0.000 http.py:1537(lineReceived)
   133660    0.283    0.000    0.283    0.000 {method 'get' of 'dict' objects}
     5700    0.261    0.000    0.494    0.000 abstract.py:186(doWrite)
   108414    0.256    0.000    0.256    0.000 {method 'split' of 'str' objects}
     5706    0.252    0.000    0.739    0.000 wsgi.py:273(_sendResponseHeaders)
    11412    0.242    0.000    0.527    0.000 http.py:1589(headerReceived)
     5706    0.242    0.000    0.601    0.000 http.py:606(__init__)
    12043    0.242    0.000    9.162    0.001
selectreactor.py:144(_doReadOrWrite)
    39942    0.237    0.000    0.357    0.000 http_headers.py:186(setRawHeaders)
     5706    0.219    0.000    0.235    0.000 http.py:217(datetimeToString)
     5706    0.200    0.000    4.800    0.001 server.py:109(process)
    28530    0.197    0.000    0.307    0.000 http.py:1773(_escape)
     6301    0.196    0.000    0.240    0.000 base.py:688(callLater)
    12043    0.194    0.000    9.432    0.001 context.py:32(callWithContext)
   125616    0.194    0.000    0.194    0.000 {len}
     5706    0.193    0.000    0.526    0.000 http.py:1701(requestDone)
    91366    0.193    0.000    0.193    0.000 {isinstance}
    22824    0.173    0.000    0.204    0.000 base.py:97(reset)
    97006    0.169    0.000    0.169    0.000 {method 'replace' of
'str' objects}
    12043    0.169    0.000   10.085    0.001 log.py:71(callWithLogger)
    45648    0.168    0.000    1.207    0.000
http_headers.py:239(getAllRawHeaders)
    22856    0.148    0.000    0.148    0.000 {built-in method release}
5715/5712    0.147    0.000    0.308    0.000 defer.py:467(_runCallbacks)
    28530    0.144    0.000    0.418    0.000 http.py:856(getHeader)



From itamar at itamarst.org  Sat Mar 19 08:26:47 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Sat, 19 Mar 2011 10:26:47 -0400
Subject: [Twisted-Python] Benchmark of Python WSGI servers
In-Reply-To: <9A1FEA5C-609D-4071-B794-2666BF6E217E@twistedmatrix.com>
References: <AANLkTimksYV8BYup6zn8xLbKkaTx0+aqc7m=oVYQ92vi@mail.gmail.com>
	<9A1FEA5C-609D-4071-B794-2666BF6E217E@twistedmatrix.com>
Message-ID: <1300544807.1690.13.camel@blake>

On Fri, 2011-03-18 at 20:54 -0400, Glyph Lefkowitz wrote:

> My pet theory is that it has something to do with transferring data
> from threads to the I/O loop via queue synchronization, and not being
> as smart as it could be about buffering, and that particular technique
> getting slammed really hard for very small request/response pairs.  I
> hypothesize that more buffering would occur with larger responses with
> more chunks, and that would bring Twisted's performance up to those of
> these other servers.

Increasing the thread pool size to 50 gives a very nice speed  boost (as
high as 100% boost in reqs/sec.) I emailed the benchmark author asking
if he would rerun with epoll and higher thread pool size.




From exarkun at twistedmatrix.com  Sat Mar 19 09:42:03 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 19 Mar 2011 15:42:03 -0000
Subject: [Twisted-Python] Best strategies for pb Referenceables
	running	long methods from callRemote
In-Reply-To: <AANLkTin41ByOBjfbZZysfWn9bUB5x914SO0FGDv=HkST@mail.gmail.com>
References: <AANLkTimaAPH-GYHz-ptpNQWFsj4oyh_N005HQ+RQq6hR@mail.gmail.com>
	<20110319014038.2231.1181588868.divmod.xquotient.269@localhost.localdomain>
	<AANLkTin41ByOBjfbZZysfWn9bUB5x914SO0FGDv=HkST@mail.gmail.com>
Message-ID: <20110319154203.2231.178964871.divmod.xquotient.272@localhost.localdomain>

On 02:06 am, charlessolar at gmail.com wrote:
>Thanks for the reply.  I am using twisted conch to connect to the 
>remote
>machines and start these tests, I am thinking that instead of using one
>connection for all testing I will open a new connection (and thus a new
>python) for each test.

I'm not sure I follow.  In your earlier message you were talking about 
PB and deferToThread.  How does this fit with your Conch usage?  You're 
not using Conch in the function passed to deferToThread, are you?

Jean-Paul
>Like I said increasing the thread pool size worked
>well for fast machines but no so well on older ones.  I am hoping that 
>this
>behavior has more to do with the GIL and that 5 processes on a slow 
>machine
>will operate better than 5 python threads.
>If not, then I will just have to write some sort of system to make sure 
>I
>dont open too many threads on certain remote machines.
>
>Thanks again



From charlessolar at gmail.com  Sat Mar 19 12:48:37 2011
From: charlessolar at gmail.com (Charles Solar)
Date: Sat, 19 Mar 2011 13:48:37 -0500
Subject: [Twisted-Python] Best strategies for pb Referenceables running
 long methods from callRemote
In-Reply-To: <20110319154203.2231.178964871.divmod.xquotient.272@localhost.localdomain>
References: <AANLkTimaAPH-GYHz-ptpNQWFsj4oyh_N005HQ+RQq6hR@mail.gmail.com>
	<20110319014038.2231.1181588868.divmod.xquotient.269@localhost.localdomain>
	<AANLkTin41ByOBjfbZZysfWn9bUB5x914SO0FGDv=HkST@mail.gmail.com>
	<20110319154203.2231.178964871.divmod.xquotient.272@localhost.localdomain>
Message-ID: <AANLkTin-FSHTk26j7c-LTfPcU5_d6XhsJB81nNK2k7kY@mail.gmail.com>

Ah no, I use conch to connect to the remote machines.  My conch code starts
a remote python instance and runs some bootstrapping python code which
connects to the PB Root.  Once connected I send the test code to the remote
process and start testing with PB.  When the PB remote method
(remote_execute) is called from the users machine, that starts a new thread
with deferToThread to run the test code.  Since tests have multiple parts
that need to run simultaneously, some parts are delivered to the same
machine, causing one machine to have to execute 5 or more parts creating
many twisted threads.
The test code does its thing which stresses a network library.  It creates
servers and clients and makes sure everyone gets connected and gets all
messages involved with the test.  It waits for all these events to happen
simultaneously so the twisted threads can be alive for very long periods of
time, and the test depends on the fact that all such threads are running and
not waiting in the thread pool overflow queue.
I am planning on switching the multiple thread, one python design to
multiple python, one thread, which I hope will allow all elements of the
test to run simultaneously easier than just simply increasing the thread
pool size.

Charles

On Sat, Mar 19, 2011 at 10:42 AM, <exarkun at twistedmatrix.com> wrote:

> On 02:06 am, charlessolar at gmail.com wrote:
> >Thanks for the reply.  I am using twisted conch to connect to the
> >remote
> >machines and start these tests, I am thinking that instead of using one
> >connection for all testing I will open a new connection (and thus a new
> >python) for each test.
>
> I'm not sure I follow.  In your earlier message you were talking about
> PB and deferToThread.  How does this fit with your Conch usage?  You're
> not using Conch in the function passed to deferToThread, are you?
>
> Jean-Paul
> >Like I said increasing the thread pool size worked
> >well for fast machines but no so well on older ones.  I am hoping that
> >this
> >behavior has more to do with the GIL and that 5 processes on a slow
> >machine
> >will operate better than 5 python threads.
> >If not, then I will just have to write some sort of system to make sure
> >I
> >dont open too many threads on certain remote machines.
> >
> >Thanks again
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110319/818940d8/attachment.html>

From exarkun at twistedmatrix.com  Sat Mar 19 14:29:41 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 19 Mar 2011 20:29:41 -0000
Subject: [Twisted-Python] Best strategies for pb Referenceables
	running	long methods from callRemote
In-Reply-To: <AANLkTin-FSHTk26j7c-LTfPcU5_d6XhsJB81nNK2k7kY@mail.gmail.com>
References: <AANLkTimaAPH-GYHz-ptpNQWFsj4oyh_N005HQ+RQq6hR@mail.gmail.com>
	<20110319014038.2231.1181588868.divmod.xquotient.269@localhost.localdomain>
	<AANLkTin41ByOBjfbZZysfWn9bUB5x914SO0FGDv=HkST@mail.gmail.com>
	<20110319154203.2231.178964871.divmod.xquotient.272@localhost.localdomain>
	<AANLkTin-FSHTk26j7c-LTfPcU5_d6XhsJB81nNK2k7kY@mail.gmail.com>
Message-ID: <20110319202941.2231.1173341416.divmod.xquotient.285@localhost.localdomain>

On 06:48 pm, charlessolar at gmail.com wrote:
>Ah no, I use conch to connect to the remote machines.  My conch code 
>starts
>a remote python instance and runs some bootstrapping python code which
>connects to the PB Root.  Once connected I send the test code to the 
>remote
>process and start testing with PB.  When the PB remote method
>(remote_execute) is called from the users machine, that starts a new 
>thread
>with deferToThread to run the test code.  Since tests have multiple 
>parts
>that need to run simultaneously, some parts are delivered to the same
>machine, causing one machine to have to execute 5 or more parts 
>creating
>many twisted threads.
>The test code does its thing which stresses a network library.  It 
>creates
>servers and clients and makes sure everyone gets connected and gets all
>messages involved with the test.  It waits for all these events to 
>happen
>simultaneously so the twisted threads can be alive for very long 
>periods of
>time, and the test depends on the fact that all such threads are 
>running and
>not waiting in the thread pool overflow queue.
>I am planning on switching the multiple thread, one python design to
>multiple python, one thread, which I hope will allow all elements of 
>the
>test to run simultaneously easier than just simply increasing the 
>thread
>pool size.

Does creating servers and clients involve running child processes?  If 
so, you should be able to use reactor.spawnProcess instead of 
deferToThread and a blocking child process API.

But if it involves running arbitrary blocking Python code, then I don't 
see how you can avoid threads.  Switching to processes may help or it 
may hurt - it depends on the details of your workload (sometimes Python 
threads scale much worse than linearly making them worse than having an 
equal number of separate processes, but sometimes they're fine making 
them cheaper than processes; it all depends on what your code does).

Jean-Paul



From glyph at twistedmatrix.com  Sat Mar 19 15:21:18 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 19 Mar 2011 17:21:18 -0400
Subject: [Twisted-Python] Benchmark of Python WSGI servers
In-Reply-To: <AANLkTimY5Z76YkO8gV2MK70=esujcV5826=DwudPgtj+@mail.gmail.com>
References: <AANLkTimksYV8BYup6zn8xLbKkaTx0+aqc7m=oVYQ92vi@mail.gmail.com>
	<9A1FEA5C-609D-4071-B794-2666BF6E217E@twistedmatrix.com>
	<20110319013508.2231.1956753728.divmod.xquotient.261@localhost.localdomain>
	<2B75A13A-60ED-4FD5-ADF0-1BC35CA3CCE8@twistedmatrix.com>
	<AANLkTimY5Z76YkO8gV2MK70=esujcV5826=DwudPgtj+@mail.gmail.com>
Message-ID: <1F2AE701-F431-4647-A15A-0299EF7D740E@twistedmatrix.com>

On Mar 19, 2011, at 8:39 AM, Michael Thompson wrote:

> I agree that threads and processes is going to be the first step to
> scaling but I don't think there's much advantage putting that in
> twisted given that there are other solutions for this.

Other solutions for what?  If Twisted is going to be a WSGI container, it should (eventually) be a multiprocess container, since that approach scales better to the number of CPUs.  Other options in the arena of single-machine load-balancing require lots of tedious setup and usually subtly affect the semantics of your application (you have to do work to make sure the application gets the correct idea of what URL it's being visited at and who the client is).

It would be even better if Twisted could automatically scale your WSGI application up to multiple hosts, even.  This is exactly the sort of thing that Twisted is good at.

> I was hoping that changing the reactor would give an easy way to make
> Twisted look better, from a PR point of view. To check I ran a
> benchmark on two EC2 m1.small machines using

Changing the reactor typically affects applications with a high degree of concurrency (more than 1000 concurrent connections) where the bottleneck is the multiplexing mechanism.  It can affect other things sometimes, but that's the usual problem it's meant to address.

The benchmark we're discussing is handling only a few requests at a time.  Itamar's approach to widening the threadpool is a better way to increase concurrency than changing the reactor, since the number of concurrent requests will be bottlenecked on the maximum number of threads anyway.

> So looks like the reactor has nothing to do with it. Here some profile results for the select reactor.

If you want to turn this profiling project into some optimizations, add a simple WSGI requests-per-second benchmark to a branch of <https://code.launchpad.net/~exarkun/+junk/twisted-benchmarks>, tell exarkun about it, and then submit a patch which makes that benchmark's number go up.

Thanks for following up on it!

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110319/d88a477c/attachment.html>

From exarkun at twistedmatrix.com  Sat Mar 19 22:05:30 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 20 Mar 2011 04:05:30 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1300593930.13.1938807230@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110320/c68a4c5c/attachment.html>

From glyph at twistedmatrix.com  Sat Mar 19 23:09:30 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 20 Mar 2011 01:09:30 -0400
Subject: [Twisted-Python] Weekly Bug Summary
In-Reply-To: 1300593930.13.1938807230@twistedmatrix.com
References: 1300593930.13.1938807230@twistedmatrix.com
Message-ID: <84FEC6B2-1A32-499D-BC3A-88776CD7E809@twistedmatrix.com>

On Mar 20, 2011, at 12:05 AM, exarkun at twistedmatrix.com wrote:
> Total:                35         76       1271        -41
Wow.  This was an _impressive_ sprint.  Thanks to everyone who participated.




From jstpierre at mecheye.net  Mon Mar 21 19:30:54 2011
From: jstpierre at mecheye.net (Jasper St. Pierre)
Date: Mon, 21 Mar 2011 21:30:54 -0400
Subject: [Twisted-Python] Deferred documentation.
In-Reply-To: <AANLkTik0uA2NAvYjFpRqDk5XDNsgoj073nfmjF1tWHcP@mail.gmail.com>
References: <AANLkTik0uA2NAvYjFpRqDk5XDNsgoj073nfmjF1tWHcP@mail.gmail.com>
Message-ID: <AANLkTinemJ-Rdf1EC+0VDgxnvixpe5dvxCdGP5_kZA4m@mail.gmail.com>

On IRC, exarkun, glyph, spiv and idnar encouraged me to do a bit of
work on the Defer documentation. I kept get confused between the
things like returning a Deferred from a callback and chainDeferred,
which I found out wasn't that useful:

<idnar> I suppose it's useful for "forking" a deferred
<idnar> you have an "existing" deferred
<idnar> and you want a "new" deferred that starts with the value from
the end of the existing deferred's callback chain
<idnar> but you don't want the rest of the existing deferred's
callback chain to be affected by the new deferred's callback chain
<idnar> that's still not really a use case though, just a description
of the situation that must arise in the use case
<idnar> I guess I should search for actual uses of chainDeferred

Well, I was getting frustrated myself, and I suggested to fix the docs
once and for all. People pointed me to three documents, all of which
felt way too dense for me:

http://twistedmatrix.com/documents/current/core/howto/defer.html
http://twistedmatrix.com/documents/current/core/howto/gendefer.html
http://twistedmatrix.com/documents/current/core/howto/deferredindepth.html

Jessica also pointed me to http://twistedmatrix.com/trac/ticket/3943,
which admittedly I haven't read yet.

So, I started writing. I opened up a session of emacs, and produced two things:

http://magcius.mecheye.net/twisted/DeferHowTo-Rewrite.html
http://magcius.mecheye.net/twisted/DeferHowTo-Fixup.html

Sources:

http://magcius.mecheye.net/twisted/DeferHowTo-Rewrite.rst
http://magcius.mecheye.net/twisted/DeferHowTo-Fixup.lore

The former is a tutorial that I tried to make informal as possible,
and the latter is a fixup and rewrite of defer.xhtml stuff to make it
a bit less, uh, dense.

My eventual goal is to reduce the number of documentation about defer
down to a near-impossible two documents. I'm hoping to merge some of
the good stuff of the other thousands of documents.

Thoughts so far?



From werner at thieprojects.ch  Tue Mar 22 01:56:10 2011
From: werner at thieprojects.ch (Werner Thie)
Date: Tue, 22 Mar 2011 08:56:10 +0100
Subject: [Twisted-Python] Deferred documentation.
In-Reply-To: <AANLkTinemJ-Rdf1EC+0VDgxnvixpe5dvxCdGP5_kZA4m@mail.gmail.com>
References: <AANLkTik0uA2NAvYjFpRqDk5XDNsgoj073nfmjF1tWHcP@mail.gmail.com>
	<AANLkTinemJ-Rdf1EC+0VDgxnvixpe5dvxCdGP5_kZA4m@mail.gmail.com>
Message-ID: <4D88561A.40601@thieprojects.ch>

On 3/22/11 2:30 AM, Jasper St. Pierre wrote:
> On IRC, exarkun, glyph, spiv and idnar encouraged me to do a bit of
> work on the Defer documentation. I kept get confused between the
> things like returning a Deferred from a callback and chainDeferred,
> which I found out wasn't that useful:
>
> <idnar>  I suppose it's useful for "forking" a deferred
> <idnar>  you have an "existing" deferred
> <idnar>  and you want a "new" deferred that starts with the value from
> the end of the existing deferred's callback chain
> <idnar>  but you don't want the rest of the existing deferred's
> callback chain to be affected by the new deferred's callback chain
> <idnar>  that's still not really a use case though, just a description
> of the situation that must arise in the use case
> <idnar>  I guess I should search for actual uses of chainDeferred
>
> Well, I was getting frustrated myself, and I suggested to fix the docs
> once and for all. People pointed me to three documents, all of which
> felt way too dense for me:
>
> http://twistedmatrix.com/documents/current/core/howto/defer.html
> http://twistedmatrix.com/documents/current/core/howto/gendefer.html
> http://twistedmatrix.com/documents/current/core/howto/deferredindepth.html
>
> Jessica also pointed me to http://twistedmatrix.com/trac/ticket/3943,
> which admittedly I haven't read yet.
>
> So, I started writing. I opened up a session of emacs, and produced two things:
>
> http://magcius.mecheye.net/twisted/DeferHowTo-Rewrite.html
> http://magcius.mecheye.net/twisted/DeferHowTo-Fixup.html
>
> Sources:
>
> http://magcius.mecheye.net/twisted/DeferHowTo-Rewrite.rst
> http://magcius.mecheye.net/twisted/DeferHowTo-Fixup.lore
>
> The former is a tutorial that I tried to make informal as possible,
> and the latter is a fixup and rewrite of defer.xhtml stuff to make it
> a bit less, uh, dense.
>
> My eventual goal is to reduce the number of documentation about defer
> down to a near-impossible two documents. I'm hoping to merge some of
> the good stuff of the other thousands of documents.
>
> Thoughts so far?
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

Thank you for tackling the impossible.

I remember when reading the old docs the first time that one thing 
bothered me most and this was 'if I get a deferred back, then I'm kind 
of responsible for that beast' so what do I do with it besides adding 
call/errbacks'? I had a hard time and quite a few hours with the 
debugger to figure out the life cycle of a deferred. I also read 
gendefer.html over and over again while trying to figure out the 
relation of a deferred to the reactor, because somehow it must be that 
reactor.run() loop which in the end triggers either call- or errbacks.

This might be typical questions from someone who grew up without garbage 
collection. My problem is, that for coding in a confident way I have to 
have a grasp of the innards of the system.

Summed up
- How does the life cycle of a deferred look like?
- Who is responsible for a deferred?
- If deferreds are related to the reactor, then how are they related?

Reading your two docs answers those questions I had back then, 
definitely an improvement.

Minor glitches:

link to node.js is >> http://nodejs.org/

Thanks again, Werner




From jstpierre at mecheye.net  Tue Mar 22 05:58:50 2011
From: jstpierre at mecheye.net (Jasper St. Pierre)
Date: Tue, 22 Mar 2011 07:58:50 -0400
Subject: [Twisted-Python] Deferred documentation.
Message-ID: <AANLkTing9Fvw0roXC9v31cc_-kFFV0waBm36E=iJdE2a@mail.gmail.com>

(I screwed up my mailman preferences accidentally, so this is
formatted a bit haphazard from copy/paste)

> Thank you for tackling the impossible.

Thank you for the encouragement. I'm curious if you read both
documents, and if you had a preference toward one or the other. I
hopefully only want to have one "definitive deferred brief" in the
end, so a consensus on which road I should take would be would be
helpful:

* -Rewrite has a personal style: first-person perspective, relaxed
language, to-the-point-but-silly examples.

* -Fixup is a sort of gentler working of the current deferred doc that
tries to be a bit more gentle about what the user knows: I don't shove
the user full of an example involving some intricate intertwining of
Deferred.callback and reactor.callLater to introduce them to
callbacks, I instead opt to showcase the built-in HTTP client.

> I remember when reading the old docs the first time that one thing
> bothered me most and this was 'if I get a deferred back, then I'm kind
> of responsible for that beast' so what do I do with it besides adding
> call/errbacks'? I had a hard time and quite a few hours with the
> debugger to figure out the life cycle of a deferred. I also read
> gendefer.html over and over again while trying to figure out the
> relation of a deferred to the reactor, because somehow it must be that
> reactor.run() loop which in the end triggers either call- or errbacks.
>
> This might be typical questions from someone who grew up without garbage
> collection. My problem is, that for coding in a confident way I have to
> have a grasp of the innards of the system.
>
> Summed up
> - How does the life cycle of a deferred look like?
> - Who is responsible for a deferred?
> - If deferreds are related to the reactor, then how are they related?

An alternate goal of my efforts is to have a "rule list". Important
things about the guarantees Deferreds should be documented:

*If* you add more than one callback, *then* the return value of the
last callback will be used as the result for the next callback.
*If* you return a Deferred from a callback, *then* the callback chain
waits until the second Deferred is complete.

> Reading your two docs answers those questions I had back then,
> definitely an improvement.
>
> Minor glitches:
>
> link to node.js is >> http://nodejs.org/

I'm going to have to find new libraries anyway: gevent takes an
eventum-style approach that uses monkey-patches on urllib. I've seen
the callback approach before in a lot of other, different JavaScript
libs, hell, even the DOM-based addEventListener uses this a lot. I
just need to find a Python-based strawman to knock down.

> Thanks again, Werner

Thank you so much for the encouragement.



From itamar at itamarst.org  Tue Mar 22 06:28:27 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Tue, 22 Mar 2011 08:28:27 -0400
Subject: [Twisted-Python] Deferred documentation.
In-Reply-To: <AANLkTinemJ-Rdf1EC+0VDgxnvixpe5dvxCdGP5_kZA4m@mail.gmail.com>
References: <AANLkTik0uA2NAvYjFpRqDk5XDNsgoj073nfmjF1tWHcP@mail.gmail.com>
	<AANLkTinemJ-Rdf1EC+0VDgxnvixpe5dvxCdGP5_kZA4m@mail.gmail.com>
Message-ID: <1300796907.1680.9.camel@blake>

On Mon, 2011-03-21 at 21:30 -0400, Jasper St. Pierre wrote:

> The former is a tutorial that I tried to make informal as possible,
> and the latter is a fixup and rewrite of defer.xhtml stuff to make it
> a bit less, uh, dense.

I like the fixup, it's a good start, especially explaining the
motivation. We can probably drop the "generating deferreds" and
"deferreds in depth" howtos too by merging in any minor details they
mention that this doesn't. Some parts are still cumbersome, e.g.
"However, a Deferred is not a token that allows you to get a specific
result back. You can only get the result by adding callback. This is
because you can add..."





From danb.lists at googlemail.com  Tue Mar 22 11:48:29 2011
From: danb.lists at googlemail.com (Dan-Cristian Bogos)
Date: Tue, 22 Mar 2011 18:48:29 +0100
Subject: [Twisted-Python] AMP Client disconnecting from server on high
	memory usage
Message-ID: <AANLkTim3fiJyZ5PS4oe=sTfprt5qyV0kp_KG_rGFX0RF@mail.gmail.com>

Hey Guys,

Some issue I've met recently when experimenting with AMP.
Have created an AMP client connecting to a server and stay there
connected (using tap services).
The issues I am getting is that as soon as I load some more serious
data into twisted process (about 700MB on a virtual machine with 3GB
of ram available) the AMP Client does not longer stay connected to the
server. The data is loaded at startup using another service (loading
data by simulating it - adding random strings to some tuple).  I am
using twisted 10.2 out of pypi packages.
I should mention that with small amount of data in memory the
connection stays stable just fine. In logs there is nothing except
seeing the client connecting and disconnecting in the same second.

Any of you know any memory configuration somewhere in the code?

Thanks in advance for any kind of tip!

DanB



From jessica.mckellar at gmail.com  Tue Mar 22 18:17:25 2011
From: jessica.mckellar at gmail.com (Jessica McKellar)
Date: Tue, 22 Mar 2011 20:17:25 -0400
Subject: [Twisted-Python] Announcing Twisted 11.0.0pre1!
Message-ID: <AANLkTi=rXx+Q-ydzqfP4Fb07jod0GqnCVk0YyMftgZoM@mail.gmail.com>

Intrepid Twisted developers and users: from Cambridge, Massachusetts I
am pleased to announce the arrival of Twisted 11.0.0 pre-release 1.

Tarballs for the pre-release are available at:
 http://twistedmatrix.com/~jesstess/11.0.0pre1/

Highlights include:

 * a new templating system in Twisted Web, "twisted.web.template",
derived from Divmod Nevow.

 * improved behavior of subprocess spawning on FreeBSD.

 * an API for constructing endpoints from descriptive strings.

 * twisted.plugin no longer emits a confusing traceback when it can't
write a cache file.

For more information, see the NEWS file.

Download the tarballs and test away!

Thanks,
Jessica



From _ at lvh.cc  Tue Mar 22 18:24:01 2011
From: _ at lvh.cc (Laurens Van Houtven)
Date: Wed, 23 Mar 2011 01:24:01 +0100
Subject: [Twisted-Python] Announcing Twisted 11.0.0pre1!
In-Reply-To: <AANLkTi=rXx+Q-ydzqfP4Fb07jod0GqnCVk0YyMftgZoM@mail.gmail.com>
References: <AANLkTi=rXx+Q-ydzqfP4Fb07jod0GqnCVk0YyMftgZoM@mail.gmail.com>
Message-ID: <AANLkTimBOaj7g6xfvrCfd3jsbXi4LedShsgKiw7GLjLn@mail.gmail.com>

Free Belgian beer for all! (and Corenwyn for Allen)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110323/862b588f/attachment.html>

From glyph at twistedmatrix.com  Tue Mar 22 18:53:25 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 22 Mar 2011 20:53:25 -0400
Subject: [Twisted-Python] Announcing Twisted 11.0.0pre1!
In-Reply-To: <AANLkTi=rXx+Q-ydzqfP4Fb07jod0GqnCVk0YyMftgZoM@mail.gmail.com>
References: <AANLkTi=rXx+Q-ydzqfP4Fb07jod0GqnCVk0YyMftgZoM@mail.gmail.com>
Message-ID: <177D4C20-7F64-4DA3-B78B-75D2B569A2A5@twistedmatrix.com>


On Mar 22, 2011, at 8:17 PM, Jessica McKellar wrote:

> Intrepid Twisted developers and users: from Cambridge, Massachusetts I
> am pleased to announce the arrival of Twisted 11.0.0 pre-release 1.

Hooray!

Thanks for volunteering to do the release, Jessica.  I was glad when Jonathan offered to do it again earlier in the month, but I'm even gladder to have new people get familiar with the release infrastructure.

> Tarballs for the pre-release are available at:
>  http://twistedmatrix.com/~jesstess/11.0.0pre1/
> 
> Highlights include:
> 
>  * a new templating system in Twisted Web, "twisted.web.template",
> derived from Divmod Nevow.
> 
>  * improved behavior of subprocess spawning on FreeBSD.
> 
>  * an API for constructing endpoints from descriptive strings.

Actually this feature was in 10.2; I think you meant that the "twistd mail" plugin now uses this functionality.

>  * twisted.plugin no longer emits a confusing traceback when it can't
> write a cache file.
> 
> For more information, see the NEWS file.
> 
> Download the tarballs and test away!


It Works For Me™ :)

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110322/16ae1b05/attachment.html>

From glyph at twistedmatrix.com  Tue Mar 22 18:58:07 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 22 Mar 2011 20:58:07 -0400
Subject: [Twisted-Python] Announcing Twisted 11.0.0pre1!
In-Reply-To: <177D4C20-7F64-4DA3-B78B-75D2B569A2A5@twistedmatrix.com>
References: <AANLkTi=rXx+Q-ydzqfP4Fb07jod0GqnCVk0YyMftgZoM@mail.gmail.com>
	<177D4C20-7F64-4DA3-B78B-75D2B569A2A5@twistedmatrix.com>
Message-ID: <99FAF5DA-6DB2-47C3-A4CC-88FF68A9B2A3@twistedmatrix.com>


On Mar 22, 2011, at 8:53 PM, Glyph Lefkowitz wrote:

>>  * an API for constructing endpoints from descriptive strings.
> 
> Actually this feature was in 10.2; I think you meant that the "twistd mail" plugin now uses this functionality.

(I should note that I actually reviewed a draft of this before it went out, but my eyes just slid over the mistake.  So the error is more mine than Jessica's!)

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110322/4f8bd7b0/attachment.html>

From exarkun at twistedmatrix.com  Tue Mar 22 19:10:37 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 23 Mar 2011 01:10:37 -0000
Subject: [Twisted-Python] Announcing Twisted 11.0.0pre1!
In-Reply-To: <AANLkTi=rXx+Q-ydzqfP4Fb07jod0GqnCVk0YyMftgZoM@mail.gmail.com>
References: <AANLkTi=rXx+Q-ydzqfP4Fb07jod0GqnCVk0YyMftgZoM@mail.gmail.com>
Message-ID: <20110323011037.31712.1506936701.divmod.xquotient.0@localhost.localdomain>

On 12:17 am, jessica.mckellar at gmail.com wrote:
>Intrepid Twisted developers and users: from Cambridge, Massachusetts I
>am pleased to announce the arrival of Twisted 11.0.0 pre-release 1.
>
>Tarballs for the pre-release are available at:
>�http://twistedmatrix.com/~jesstess/11.0.0pre1/
>
>Highlights include:
>
>�* a new templating system in Twisted Web, "twisted.web.template",
>derived from Divmod Nevow.
>
>�* improved behavior of subprocess spawning on FreeBSD.
>
>�* an API for constructing endpoints from descriptive strings.
>
>�* twisted.plugin no longer emits a confusing traceback when it can't
>write a cache file.
>
>For more information, see the NEWS file.
>
>Download the tarballs and test away!

Hooray!  I just upgraded my mail server to this prerelease and sent this 
email using it. :)

Jean-Paul



From screwtape at froup.com  Tue Mar 22 19:40:09 2011
From: screwtape at froup.com (Tim Allen)
Date: Wed, 23 Mar 2011 12:40:09 +1100
Subject: [Twisted-Python] Announcing Twisted 11.0.0pre1!
In-Reply-To: <AANLkTi=rXx+Q-ydzqfP4Fb07jod0GqnCVk0YyMftgZoM@mail.gmail.com>
References: <AANLkTi=rXx+Q-ydzqfP4Fb07jod0GqnCVk0YyMftgZoM@mail.gmail.com>
Message-ID: <20110323014009.GE31069@boombah.thristian.org>

On Tue, Mar 22, 2011 at 08:17:25PM -0400, Jessica McKellar wrote:
>  * a new templating system in Twisted Web, "twisted.web.template",
> derived from Divmod Nevow.

Oh boy! Are there pre-release API or other docs for this feature, or
will I have to download the tarball to read the code and/or wait for
11.0.0 to be released to find out about it?



From glyph at twistedmatrix.com  Tue Mar 22 19:46:47 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 22 Mar 2011 21:46:47 -0400
Subject: [Twisted-Python] Announcing Twisted 11.0.0pre1!
In-Reply-To: <20110323014009.GE31069@boombah.thristian.org>
References: <AANLkTi=rXx+Q-ydzqfP4Fb07jod0GqnCVk0YyMftgZoM@mail.gmail.com>
	<20110323014009.GE31069@boombah.thristian.org>
Message-ID: <72DEB3C2-E8F3-48D4-906D-0082396FDF31@twistedmatrix.com>


On Mar 22, 2011, at 9:40 PM, Tim Allen wrote:

> On Tue, Mar 22, 2011 at 08:17:25PM -0400, Jessica McKellar wrote:
>>  * a new templating system in Twisted Web, "twisted.web.template",
>> derived from Divmod Nevow.
> 
> Oh boy! Are there pre-release API or other docs for this feature, or
> will I have to download the tarball to read the code and/or wait for
> 11.0.0 to be released to find out about it?

Here's a link which will expire shortly:

<http://buildbot.twistedmatrix.com/builds/sphinx-html/280-15860/projects/web/howto/twisted-templates.html>.

Please enjoy it while it lasts.

-glyph




From glyph at twistedmatrix.com  Tue Mar 22 20:03:06 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 22 Mar 2011 22:03:06 -0400
Subject: [Twisted-Python] Deferred documentation.
In-Reply-To: <AANLkTinemJ-Rdf1EC+0VDgxnvixpe5dvxCdGP5_kZA4m@mail.gmail.com>
References: <AANLkTik0uA2NAvYjFpRqDk5XDNsgoj073nfmjF1tWHcP@mail.gmail.com>
	<AANLkTinemJ-Rdf1EC+0VDgxnvixpe5dvxCdGP5_kZA4m@mail.gmail.com>
Message-ID: <B68B4F4A-A8D5-4D23-87FC-9D0477A4BA65@twistedmatrix.com>

On Mar 21, 2011, at 9:30 PM, Jasper St. Pierre wrote:

> On IRC, exarkun, glyph, spiv and idnar encouraged me to do a bit of
> work on the Defer documentation.

Yay!  This documentation could definitely use some work.

> I kept get confused between the things like returning a Deferred from a callback and chainDeferred, which I found out wasn't that useful:

Yeah, chainDeferred is not a great method.  Now that Deferreds are non-recursive, I think it's purely worse than inserting an additional Deferred as a result from a callback.

> My eventual goal is to reduce the number of documentation about defer
> down to a near-impossible two documents. I'm hoping to merge some of
> the good stuff of the other thousands of documents.

That would be absolutely great.

> Thoughts so far?

While I applaud your intent, these drafts look quite rough.  The random interjections and asides in <http://magcius.mecheye.net/twisted/DeferHowTo-Fixup.html> seem distracting and confusing to me.  Trying to put myself in the mind of a newcomer, I find myself asking many questions which are irrelevant to what I'm trying to learn:

What's "async"?  Why is it hard?  (The original document mentions asynchronous stuff, but in the context of full english sentences.)
Where are we going shopping?  What does shopping have to do with this?
What's gevent?  Does this have something to do with Twisted?
What's node.js?  This looks like Javascript, what does it have to do with Twisted, which I thought was in Python?

(Now I've gotten distracted and I'm reading about gevent and node.js rather than making my Twisted application work and completing the Deferred tutorial.  Epic fail.  But, if I were to continue...)

What's "this pattern"?  Functions?  Don't lots of programs use functions?
How do they use it?  Why is it relevant?
Why is Twisted's right hand blue?  (Forget about being a beginner: I honestly don't even get this reference.  Googling seems to suggest it has something to do with symptoms of heart disease and doesn't seem funny or relevant at all.)
Why is the first explanation of what a Deferred is referred to as "technical mumbo-jumbo"? Is this really complicated?  If I am not super good at programming already, should I not be reading this?
What's an "operation"?  Does that mean 'function' or 'method' or some other special thing?  It says "most operations in Twisted return a Deferred"; but I've called lots of functions in Twisted which returned other objects before reading this tutorial, or returned None.  Were those actually Deferreds?
Why do I "not know where this Deferred has been"?  Do Deferreds get dirty or broken somehow when I add multiple callbacks?  Should I avoid that?

The Python examples in the current Deferred Reference are mostly runnable.  The ones that aren't, should be.  The documentation should stress that you can run these examples simply, and encourage the reader to download and experiment with them, and modify them to see what happens when they do things in a different order.

Instead, the "fixup" changes the first example to rely on a fake library, which will raise exceptions if I try to run it, but doesn't actually explain that 'magiclib' isn't real.  This isn't a huge problem in and of itself (it is trying to demonstrate the "wrong" way to do things, after all) but it sets up the expectation that the rest of the examples are fake, too, and I shouldn't bother to run them.

I think the original document has plenty of issues, but these changes look like they've been written for people who already mostly understand Deferreds, but are having trouble catching some of the nuances, and need humor to diffuse their frustration and more examples to illustrate different usage patterns, rather than a fundamentally clearer or better explanation than what was offered before.  That makes sense, since based on what you've said on #twisted, that's basically the position you find yourself in :).  This document is supposed to be a tutorial though, explaining how to use Deferreds to users who really have no idea what they are (despite its unfortunate name, "Deferred Reference" - that should probably be changed).

One thing I think is very good about this attempted rework, though, is the explanation of the motivation for having Deferreds at all, before explaining how they work.  In the current documentation, it's very unclear why we have such an object in the first place, or what the alternatives to it are.  However, the example presented makes it seem as though you really don't need Deferreds, because the only problem with the single-callback approach is handling errors.  Another major motivation is the ability to return a Deferred through a system with several layers, changing the return value at each layer by post-processing it a bit.  (One possible example: a REST API that wants to deal with objects, and goes via a translation of [bytes from HTTP]->[JSON dicts/lists from parsing those bytes]->[domain-specific objects by converting JSON objects according to the particular API's spec].)

However, I think the need would be better illustrated with examples that can actually be run than with fake examples where we assume that the user knows how something like gevent works.  (Also: gevent doesn't actually work this way, for fetching web pages at least, so your example is wrong.  See <http://www.gevent.org/intro.html#monkey-patching>.)

It's pretty easy to write a fake implementation of 'fetchWebPageAsync' which squirrels away the callback somewhere that the example can call it later, and explain that with some handwaving where we say "and pretend that was actually some networking code fetching it".  For that matter, the reactor is introduced too early in the existing docs; we should demonstrate calling the callback synchronously, and then only later introduce a callLater.

Anyway I hope this wall of text did not discourage you - I just think you need some clearer goals for improving specific aspects of the documentation, and you should write those down first before trying to actually address them with more docs.

Thanks for your time,

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110322/e67158fb/attachment.html>

From tom at recursivedream.com  Tue Mar 22 20:20:41 2011
From: tom at recursivedream.com (Tom Davis)
Date: Tue, 22 Mar 2011 22:20:41 -0400
Subject: [Twisted-Python] Announcing Twisted 11.0.0pre1!
In-Reply-To: <AANLkTi=rXx+Q-ydzqfP4Fb07jod0GqnCVk0YyMftgZoM@mail.gmail.com>
References: <AANLkTi=rXx+Q-ydzqfP4Fb07jod0GqnCVk0YyMftgZoM@mail.gmail.com>
Message-ID: <AANLkTi=uYDCyAR9T6LeG8_EFxdgnwjVCb5VAB0uD1fbW@mail.gmail.com>

On Tue, Mar 22, 2011 at 8:17 PM, Jessica McKellar <
jessica.mckellar at gmail.com> wrote:

> Intrepid Twisted developers and users: from Cambridge, Massachusetts I
> am pleased to announce the arrival of Twisted 11.0.0 pre-release 1.
>
> Tarballs for the pre-release are available at:
>  http://twistedmatrix.com/~jesstess/11.0.0pre1/
>
> Highlights include:
>
>  * a new templating system in Twisted Web, "twisted.web.template",
> derived from Divmod Nevow.
>
>  * improved behavior of subprocess spawning on FreeBSD.
>
>  * an API for constructing endpoints from descriptive strings.
>
>  * twisted.plugin no longer emits a confusing traceback when it can't
> write a cache file.
>
> For more information, see the NEWS file.
>
> Download the tarballs and test away!
>

Awesome! Thanks for doing the release, Jessica! :)


>
> Thanks,
> Jessica
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110322/104fc1be/attachment-0001.html>

From kevin.horn at gmail.com  Wed Mar 23 07:22:01 2011
From: kevin.horn at gmail.com (Kevin Horn)
Date: Wed, 23 Mar 2011 08:22:01 -0500
Subject: [Twisted-Python] Announcing Twisted 11.0.0pre1!
In-Reply-To: <AANLkTi=rXx+Q-ydzqfP4Fb07jod0GqnCVk0YyMftgZoM@mail.gmail.com>
References: <AANLkTi=rXx+Q-ydzqfP4Fb07jod0GqnCVk0YyMftgZoM@mail.gmail.com>
Message-ID: <AANLkTikgjUwE7Kz=7H91Am7VgXpoCXw-k0HgWz8teaUz@mail.gmail.com>

On Tue, Mar 22, 2011 at 7:17 PM, Jessica McKellar <
jessica.mckellar at gmail.com> wrote:

> Intrepid Twisted developers and users: from Cambridge, Massachusetts I
> am pleased to announce the arrival of Twisted 11.0.0 pre-release 1.
>
> Tarballs for the pre-release are available at:
>  http://twistedmatrix.com/~jesstess/11.0.0pre1/
>
> Highlights include:
>
>  * a new templating system in Twisted Web, "twisted.web.template",
> derived from Divmod Nevow.
>
>  * improved behavior of subprocess spawning on FreeBSD.
>
>  * an API for constructing endpoints from descriptive strings.
>
>  * twisted.plugin no longer emits a confusing traceback when it can't
> write a cache file.
>
> For more information, see the NEWS file.
>
> Download the tarballs and test away!
>
> Thanks,
> Jessica
>
>
Hooray!

Thanks for volunteering to be the release victim, er...manager!

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110323/1eed9828/attachment.html>

From kevin.horn at gmail.com  Wed Mar 23 07:24:48 2011
From: kevin.horn at gmail.com (Kevin Horn)
Date: Wed, 23 Mar 2011 08:24:48 -0500
Subject: [Twisted-Python] Deferred documentation.
In-Reply-To: <B68B4F4A-A8D5-4D23-87FC-9D0477A4BA65@twistedmatrix.com>
References: <AANLkTik0uA2NAvYjFpRqDk5XDNsgoj073nfmjF1tWHcP@mail.gmail.com>
	<AANLkTinemJ-Rdf1EC+0VDgxnvixpe5dvxCdGP5_kZA4m@mail.gmail.com>
	<B68B4F4A-A8D5-4D23-87FC-9D0477A4BA65@twistedmatrix.com>
Message-ID: <AANLkTinoiSj=na+wSK=awhQ-fcCJ+RA66=_6BPXJxh_R@mail.gmail.com>

On Tue, Mar 22, 2011 at 9:03 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

>
>    - Why is Twisted's right hand blue?  (Forget about being a beginner: I
>    honestly don't even get this reference.  Googling seems to suggest it has
>    something to do with symptoms of heart disease and doesn't seem funny or
>    relevant at all.)
>
>
>
My guess is that it has to do with Twister, the classic board(?) game.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110323/0cf0a301/attachment.html>

From albert.brandl at weiermayer.com  Wed Mar 23 07:41:32 2011
From: albert.brandl at weiermayer.com (Albert Brandl)
Date: Wed, 23 Mar 2011 14:41:32 +0100
Subject: [Twisted-Python] Deferred documentation.
In-Reply-To: <AANLkTinemJ-Rdf1EC+0VDgxnvixpe5dvxCdGP5_kZA4m@mail.gmail.com>
References: <AANLkTik0uA2NAvYjFpRqDk5XDNsgoj073nfmjF1tWHcP@mail.gmail.com>
	<AANLkTinemJ-Rdf1EC+0VDgxnvixpe5dvxCdGP5_kZA4m@mail.gmail.com>
Message-ID: <20110323134131.GA17456@weiermayer.com>

Hi!

On Mon, Mar 21, 2011 at 09:30:54PM -0400, Jasper St. Pierre wrote:
> http://magcius.mecheye.net/twisted/DeferHowTo-Rewrite.html
> http://magcius.mecheye.net/twisted/DeferHowTo-Fixup.html

This looks quite good. You might want to check if the code examples
actually work, though: The "hands-on training" example in the section
"Tasks of our own" redefines the `callback` function in line 12.

Best regards,

Albert
-- 
Albert Brandl
Weiermayer Solutions GmbH      | Abteistraße 12, A-4813 Altmünster
phone: +43 (0) 720 70 30 14    | fax: +43 (0) 7612 20 3 56
web: http://www.weiermayer.com



From _ at lvh.cc  Wed Mar 23 09:20:20 2011
From: _ at lvh.cc (Laurens Van Houtven)
Date: Wed, 23 Mar 2011 16:20:20 +0100
Subject: [Twisted-Python] Announcing Twisted 11.0.0pre1!
In-Reply-To: <AANLkTi=rXx+Q-ydzqfP4Fb07jod0GqnCVk0YyMftgZoM@mail.gmail.com>
References: <AANLkTi=rXx+Q-ydzqfP4Fb07jod0GqnCVk0YyMftgZoM@mail.gmail.com>
Message-ID: <AANLkTikK9igoZh=nZpk29jz6BSpyH_W44_T-GbyZVH1W@mail.gmail.com>

Now I am so glad I didn't rant about release management being a sucker's
game in my Pycon talk ;-)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110323/cca3ca5a/attachment.html>

From glyph at twistedmatrix.com  Wed Mar 23 11:07:35 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 23 Mar 2011 13:07:35 -0400
Subject: [Twisted-Python] Deferred documentation.
In-Reply-To: <AANLkTinoiSj=na+wSK=awhQ-fcCJ+RA66=_6BPXJxh_R@mail.gmail.com>
References: <AANLkTik0uA2NAvYjFpRqDk5XDNsgoj073nfmjF1tWHcP@mail.gmail.com>
	<AANLkTinemJ-Rdf1EC+0VDgxnvixpe5dvxCdGP5_kZA4m@mail.gmail.com>
	<B68B4F4A-A8D5-4D23-87FC-9D0477A4BA65@twistedmatrix.com>
	<AANLkTinoiSj=na+wSK=awhQ-fcCJ+RA66=_6BPXJxh_R@mail.gmail.com>
Message-ID: <99C1E910-D590-41E3-972E-C48BF2B8B755@twistedmatrix.com>


On Mar 23, 2011, at 9:24 AM, Kevin Horn wrote:

> 
> 
> On Tue, Mar 22, 2011 at 9:03 PM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> Why is Twisted's right hand blue?  (Forget about being a beginner: I honestly don't even get this reference.  Googling seems to suggest it has something to do with symptoms of heart disease and doesn't seem funny or relevant at all.)
> 
> 
> My guess is that it has to do with Twister, the classic board(?) game.

Oh.  Even worse!  I don't want to get sued by Hasbro :).

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110323/2d2f50c0/attachment-0001.html>

From jstpierre at mecheye.net  Wed Mar 23 11:10:44 2011
From: jstpierre at mecheye.net (Jasper St. Pierre)
Date: Wed, 23 Mar 2011 13:10:44 -0400
Subject: [Twisted-Python] Deferred documentation.
In-Reply-To: <99C1E910-D590-41E3-972E-C48BF2B8B755@twistedmatrix.com>
References: <AANLkTik0uA2NAvYjFpRqDk5XDNsgoj073nfmjF1tWHcP@mail.gmail.com>
	<AANLkTinemJ-Rdf1EC+0VDgxnvixpe5dvxCdGP5_kZA4m@mail.gmail.com>
	<B68B4F4A-A8D5-4D23-87FC-9D0477A4BA65@twistedmatrix.com>
	<AANLkTinoiSj=na+wSK=awhQ-fcCJ+RA66=_6BPXJxh_R@mail.gmail.com>
	<99C1E910-D590-41E3-972E-C48BF2B8B755@twistedmatrix.com>
Message-ID: <AANLkTimQ0exUxWZO8PV01qXAiCtqr84A1uTbS9W01q4Q@mail.gmail.com>

What about Mattel?

http://itre.cis.upenn.edu/~myl/languagelog/archives/002892.html

On Wed, Mar 23, 2011 at 1:07 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
>
> On Mar 23, 2011, at 9:24 AM, Kevin Horn wrote:
>
>
> On Tue, Mar 22, 2011 at 9:03 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
> wrote:
>>
>> Why is Twisted's right hand blue?  (Forget about being a beginner: I
>> honestly don't even get this reference.  Googling seems to suggest it has
>> something to do with symptoms of heart disease and doesn't seem funny or
>> relevant at all.)
>
> My guess is that it has to do with Twister, the classic board(?) game.
>
> Oh.  Even worse!  I don't want to get sued by Hasbro :).
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>



From glyph at twistedmatrix.com  Wed Mar 23 19:34:42 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 23 Mar 2011 21:34:42 -0400
Subject: [Twisted-Python] prerelease preview predocumentation
Message-ID: <C9AA782C-1AC0-423A-9146-278E914D53D5@twistedmatrix.com>

Dear Twistizens,

Unfortunately, the Sphinx documentation didn't quite officially make the cut for the 11.0 release.  Our release toolchain still needs updating, someone needs to review the rst sources, etc.  Until all that's done, all documentation changes will still need to be Lore patches.  Plus, I kinda hope that someone manages to get <http://tm.tl/2443> merged before we pull the trigger.

However, we've been generating Sphinx output for quite a while, and quite a lot of work has gone into its presentation.  It seems a pity to let that go to waste.  So, while our official documentation remains at <http://twistedmatrix.com/documents/current/> (and that is the URL that will be updated when the release goes out), I've decided to host some un-official documentation with all the snazzy styling that Kevin Horn prepared for us here, to go with the pre-release that Jessica McKellar just announced:

<http://twistedmatrix.com/~glyph/sphinx-preview-11.0pre1/>

I know that there's some extraneous spacing; that will be fixed after the ReST sources make it to trunk, unless someone feels like fixing it in <https://bitbucket.org/khorn/lore2sphinx>.  (Also, API documentation links for new features will be broken until the 11.0 API documentation is pushed to <http://twistedmatrix.com/documents/current/api/>.)

However, this documentation snapshot should be otherwise usable, and I'm contemplating linking to it from the front page.

Please be aware that this is not a stable URL, and any links to it will break after a while; I have no fixed schedule for taking it down, but it will definitely go away when the final documentation branch is merged.  Otherwise, though, read documentation to your hearts' content.

Share and Enjoy,

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110323/e7311cf7/attachment.html>

From exarkun at twistedmatrix.com  Thu Mar 24 09:15:51 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 24 Mar 2011 15:15:51 -0000
Subject: [Twisted-Python] Windows build slaves
In-Reply-To: <4D841E48.9070504@partiallystapled.com>
References: <4D841E48.9070504@partiallystapled.com>
Message-ID: <20110324151551.1992.1826972938.divmod.xquotient.39@localhost.localdomain>

On 19 Mar, 03:08 am, gxti at partiallystapled.com wrote:
>Greetings,
>
>I hear that Twisted needs some new/better/more reliable Windows build
>slaves. My employer has plenty of ESX capacity, and I know that a few
>other people are interested in helping out as well, so perhaps this a
>good time to clarify the requirements:
>
>Which platforms: XP and 7? 32bit and 64bit? Any interest in the server
>editions?
>
>Per-machine requirements: how much HDD and RAM? Any weird stuff like
>serial ports?
>
>Connectivity: Is NAT OK, or are inbound connections required?
>
>Do maintainers need access to the hypervisor, or is it adequate to have
>a watchdog to reboot crashed slaves?
>
>Contingent on employer approval, I can donate 4 VMs (one of each 
>flavor)
>with 2GiB of RAM and tens of GB storage each, including MSDN licenses.
>The limitations are that they would be on a NAT-only subnet with no
>possibility of inbound ports, and that there would be no hypervisor
>access. However, I can provide a watchdog to deal with crashed slaves
>and a VPN could be arranged if there's a public endpoint I can direct 
>it
>to. I'm also "generally pretty accessible" although Glyph 
>unsurprisingly
>indicates that people have failed to live up to that promise in the 
>past
>:P   The offer is flexible, I'm just trying to start small to feel out
>the requirements.

Hello Michael and other prospective build slave operators :)

Twisted is ever in need of more slaves.  We can only support the 
platforms that we have slaves for, so that any developer can test their 
code on any of those platforms any time they need to.  So offers of new 
slaves are always appreciated. :)

Slave requirements are covered on 
http://twistedmatrix.com/trac/wiki/ContinuousIntegration and 
http://twistedmatrix.com/trac/wiki/ContinuousIntegration/TestSlaveConfiguration 
but I'll restate some of the important points here:

  * The slave host needs to be on all the time
  * It only needs to be able to make outgoing connections (so NAT is 
fine)
  * It doesn't need much storage, just enough for the base operating 
system
    plus a little for Twisted's dependencies and a check out of the 
Twisted
    source and some log files.
  * It doesn't need much RAM, just enough to be able to run Twisted's 
test
    suite - 768 MB is typically quite ample (I suspect it can be done 
with
    less if necessary)
  * Extra stuff like serial ports can be cool - Twisted is seriously 
lacking
    in proper test coverage for its serial port code at the moment. :)

Remote access to the machine for Twisted developers is preferred, but 
it's not strictly necessary.  If it isn't provided, it is sometimes 
necessary to have someone who does have access prod the slave in case it 
wedges (which doesn't happen very often, though more often on Windows 
than other platforms).  Other solutions to this, like the watchdog 
Michael mentioned, are also possible.

If you have some hardware (or spare ESX capacity, or even if you want to 
try to do something creative with Amazon EC2!) and this all sounds 
doable, please let us know!

Thanks Michael, and anyone else who can offer hosting for these slaves!

Jean-Paul



From exarkun at twistedmatrix.com  Thu Mar 24 09:16:37 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 24 Mar 2011 15:16:37 -0000
Subject: [Twisted-Python] AMP Client disconnecting from server on
	high	memory usage
In-Reply-To: <AANLkTim3fiJyZ5PS4oe=sTfprt5qyV0kp_KG_rGFX0RF@mail.gmail.com>
References: <AANLkTim3fiJyZ5PS4oe=sTfprt5qyV0kp_KG_rGFX0RF@mail.gmail.com>
Message-ID: <20110324151637.1992.1061386775.divmod.xquotient.41@localhost.localdomain>

On 22 Mar, 05:48 pm, danb.lists at googlemail.com wrote:
>Hey Guys,
>
>Some issue I've met recently when experimenting with AMP.
>Have created an AMP client connecting to a server and stay there
>connected (using tap services).
>The issues I am getting is that as soon as I load some more serious
>data into twisted process (about 700MB on a virtual machine with 3GB
>of ram available) the AMP Client does not longer stay connected to the
>server. The data is loaded at startup using another service (loading
>data by simulating it - adding random strings to some tuple).  I am
>using twisted 10.2 out of pypi packages.
>I should mention that with small amount of data in memory the
>connection stays stable just fine. In logs there is nothing except
>seeing the client connecting and disconnecting in the same second.
>
>Any of you know any memory configuration somewhere in the code?

There are some limits on the length of individual values you can send 
with AMP, but there shouldn't be any limits on how much memory your 
process can use overall.

Jean-Paul



From jstpierre at mecheye.net  Fri Mar 25 05:28:26 2011
From: jstpierre at mecheye.net (Jasper St. Pierre)
Date: Fri, 25 Mar 2011 07:28:26 -0400
Subject: [Twisted-Python] Deferred documentation.
In-Reply-To: <B68B4F4A-A8D5-4D23-87FC-9D0477A4BA65@twistedmatrix.com>
References: <AANLkTik0uA2NAvYjFpRqDk5XDNsgoj073nfmjF1tWHcP@mail.gmail.com>
	<AANLkTinemJ-Rdf1EC+0VDgxnvixpe5dvxCdGP5_kZA4m@mail.gmail.com>
	<B68B4F4A-A8D5-4D23-87FC-9D0477A4BA65@twistedmatrix.com>
Message-ID: <AANLkTikyzfT=tNZP5KpB30F-UxBA6A_bN3E4gPK1vHPp@mail.gmail.com>

Big wall of text incoming. If you're going to read any part of this
email, search for *IMPORTANT* and read that part.

Right now I'm stuck at creating a simple example for "deferred dependencies".

On Tue, Mar 22, 2011 at 10:03 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
> On Mar 21, 2011, at 9:30 PM, Jasper St. Pierre wrote:
>
>> On IRC, exarkun, glyph, spiv and idnar encouraged me to do a bit of
>> work on the Defer documentation.
>
> Yay!  This documentation could definitely use some work.
>
>> I kept get confused between the things like returning a Deferred from a
>> callback and chainDeferred, which I found out wasn't that useful:
>
> Yeah, chainDeferred is not a great method.  Now that Deferreds are
> non-recursive, I think it's purely worse than inserting an additional
> Deferred as a result from a callback.
>
> My eventual goal is to reduce the number of documentation about defer
> down to a near-impossible two documents. I'm hoping to merge some of
> the good stuff of the other thousands of documents.
>
> That would be absolutely great.
>
>> Thoughts so far?
>
> While I applaud your intent, these drafts look quite rough.  The random
> interjections and asides in
> <http://magcius.mecheye.net/twisted/DeferHowTo-Fixup.html> seem distracting
> and confusing to me.  Trying to put myself in the mind of a newcomer, I find
> myself asking many questions which are irrelevant to what I'm trying to
> learn:
>
> What's "async"?  Why is it hard?  (The original document mentions
> asynchronous stuff, but in the context of full english sentences.)

Should I mention blocking with something like urllib, then showcase
another example library that uses regular callbacks?

> Where are we going shopping?  What does shopping have to do with this?

Pop culture reference. Killed.

> What's gevent?  Does this have something to do with Twisted?
> What's node.js?  This looks like Javascript, what does it have to do with
> Twisted, which I thought was in Python?

Placeholders.

> (Now I've gotten distracted and I'm reading about gevent and node.js rather
> than making my Twisted application work and completing the Deferred
> tutorial.  Epic fail.  But, if I were to continue...)
>
> What's "this pattern"?  Functions?  Don't lots of programs use functions?

I guess this is a bit obvious when you have first-class-functions as a
language feature, but it's still a "pattern."

> How do they use it?  Why is it relevant?

I guess I'm stupid or slow, but it took a while for me to realize that
Deferreds were basically a standardized callback mechanism. It's not
really written anywhere on the tin: Deferred was to me a bit of an
unobvious name for what it does, and before recently I've always
associated it tightly to scheduling and the reactor.

> Why is Twisted's right hand blue?  (Forget about being a beginner: I
> honestly don't even get this reference.  Googling seems to suggest it has
> something to do with symptoms of heart disease and doesn't seem funny or
> relevant at all.)

Another pop culture reference. Baleeted.

> Why is the first explanation of what a Deferred is referred to as "technical
> mumbo-jumbo"? Is this really complicated?  If I am not super good at
> programming already, should I not be reading this?

It was prefixed with "The abstract" before. I put it back to "The
abstract". To me, it seems like it's written in a way that makes sense
only if you understand what a Deferred is, but it was useful, so I
didn't rip it out. I see it as a paragraph that will make more sense
as you're reading the article, and once you go back and understand it,
there's that happy "snap" feeling as you get the concept.

> What's an "operation"?  Does that mean 'function' or 'method' or some other
> special thing?  It says "most operations in Twisted return a Deferred"; but
> I've called lots of functions in Twisted which returned other objects before
> reading this tutorial, or returned None.  Were those actually Deferreds?

Yeah, I need to reword that. How about, "because Deferreds are a core
part of Twisted, a lot of functions return them"? No... that's not
good either.

> Why do I "not know where this Deferred has been"?  Do Deferreds get dirty or
> broken somehow when I add multiple callbacks?  Should I avoid that?

Again, I fail at humor. Removed.

> The Python examples in the current Deferred Reference are mostly runnable.
>  The ones that aren't, should be.  The documentation should stress that you
> can run these examples simply, and encourage the reader to download and
> experiment with them, and modify them to see what happens when they do
> things in a different order.
> Instead, the "fixup" changes the first example to rely on a fake library,
> which will raise exceptions if I try to run it, but doesn't actually explain
> that 'magiclib' isn't real.  This isn't a huge problem in and of itself (it
> is trying to demonstrate the "wrong" way to do things, after all) but it
> sets up the expectation that the rest of the examples are fake, too, and I
> shouldn't bother to run them.

Right now, it's a placeholder for that magic library that I haven't found yet.

> I think the original document has plenty of issues, but these changes look
> like they've been written for people who already mostly understand
> Deferreds, but are having trouble catching some of the nuances, and need
> humor to diffuse their frustration and more examples to illustrate different
> usage patterns, rather than a fundamentally clearer or better explanation
> than what was offered before.

*IMPORTANT*

Are there specific changes you find that could make it harder to read
for newcomers?

The concept of Deferreds isn't hard at all, once you understand what
they are. The subtle nuances and bits of glue code that Twisted are
the things that can trip someone up, and what I'm still learning. A
small amount of very specific use cases for Deferreds happen in
real-world code and I'd like to show the support that Twisted has for
them built-in.

My goals for this document are:

  1) A list of guaranteed rules about Deferreds for reference at any time.
  2) An introduction to those rules in a format that doesn't require
knowledge of others.
  3) Showing techniques or tricks that you can play by "exploiting"
parts of those rules in the context of a contrived problem.
  4) Showing the built-in support for it.

This should help clear up my writing style a bit. I think in terms of
separating abstraction layers; I always try separate a fact or rule
from logic or a technique that can follow when you can exploit that
fact (feel free to ask the people about 'evolution' in
#python-offtopic). I also try to think of the code being very linear
when it evolves: a new rule is added, you have a problem, you can
exploit that rule with a specific technique, the technique is
standardized.

Example A:
  PROBLEM: You need to create a Deferred with a known result
  RULE: Callbacks will continue running after you've called "callback"
or "errback"
  TECHNIQUE: You can create a Deferred, call 'callback' on it and
return it, without any tricky business
  STANDARDIZED: twisted.internet.defer.success

Example B:
  PROBLEM: You need to get the results from multiple Deferreds without
blocking or too much linearity
  RULE: More than one Deferred can be created and 'run' at the same time
  TECHNIQUE: You can add a callback to a Deferred, take the result you
get and save it in a list or dictionary
  STANDARDIZED: DeferredList, gatherResults

The hardest part is creating simple, short, runnable code that
introduces: a problem that doesn't seem silly, a rule that guides
toward the solution, the technique that uses the rule to solve it. It
was much easier when I could contrive examples of a network-enabled
kitchen: recipes map pretty well to code, especially Twisted async:

  1) Melt butter in a saucepan. When the butter is finished melting,
put cocoa powder in.
  2) Meanwhile, beat egg whites and sugar, and cream of tartar.
  3) When both are done, put the chocolate mix in a Cuisinart, and
fold in the egg whites.

Here you have dependencies (butter needs to be melted before cocoa
powder), multi-tasking (you don't want to wait for the butter while
beating the eggs), and a way of knowing when things are done (so you
can fold them into the cuisinart).

( Also, this is a real recipe, ableit simplified and it makes really
easy, delicious chocolate mousse:
http://articles.latimes.com/2008/feb/13/food/la-fo-watch13recafeb13 )

> That makes sense, since based on what you've
> said on #twisted, that's basically the position you find yourself in :).
>  This document is supposed to be a tutorial though, explaining how to use
> Deferreds to users who really have no idea what they are (despite its
> unfortunate name, "Deferred Reference" - that should probably be changed).
> One thing I think is very good about this attempted rework, though, is the
> explanation of the motivation for having Deferreds at all, before explaining
> how they work.  In the current documentation, it's very unclear why we have
> such an object in the first place, or what the alternatives to it are.

Once I *knew* what a Deferred was, the other pieces started snapping into place.

> However, the example presented makes it seem as though you really don't
> need Deferreds, because the only problem with the single-callback approach
> is handling errors. Another major motivation is the ability to return a
> Deferred through a system with several layers, changing the return value at
> each layer by post-processing it a bit.  (One possible example: a REST API
> that wants to deal with objects, and goes via a translation of [bytes from
> HTTP]->[JSON dicts/lists from parsing those bytes]->[domain-specific objects
> by converting JSON objects according to the particular API's spec].)

I never really thought about it before. I just realized right now,
writing this email, that things like DeferredList aren't cleanly
possible if the callback is tied to the request.

Additionally, is the showcase of this in the fixup with "Multiple
Callbacks" I did fine? The SQL to HTML example that was there before
seemed a bit contrived, and I wanted to showcase it in a runnable
snippet that required Twisted. We can't have them install a SQL
server, so I used xml.minidom instead of lxml, even though know it's
complete crap. When I'm done, I should replace the www.example.com
URLs with files hosted on the Twisted doc site. Is there a way to
point to generate a URL like that with Lore?

> However, I think the need would be better illustrated with examples that can
> actually be run than with fake examples where we assume that the user knows
> how something like gevent works.  (Also: gevent doesn't actually work this
> way, for fetching web pages at least, so your example is wrong.  See
> <http://www.gevent.org/intro.html#monkey-patching>.)

I've replaced them with "Library A" and "Library B" placeholders. :)

> It's pretty easy to write a fake implementation of 'fetchWebPageAsync' which
> squirrels away the callback somewhere that the example can call it later,
> and explain that with some handwaving where we say "and pretend that was
> actually some networking code fetching it".  For that matter, the reactor is
> introduced too early in the existing docs; we should demonstrate calling the
> callback synchronously, and then only later introduce a callLater.

I ripped out all the reactor code in the starting sections of the
fixup on purpose, and showcased it with what I think is a clear
example. When introducing the techniques afterwards, I'm going to
gently ramp up the reactor code to be a bit more real-world.

> Anyway I hope this wall of text did not discourage you - I just think you
> need some clearer goals for improving specific aspects of the documentation,
> and you should write those down first before trying to actually address them
> with more docs.

This email did exactly that. Thanks so much!

P.S. I still have a *lot* to learn. Some tutoring on the subtleties of
LoopingCall and coiterator/cooperator would be nice. I'm not going to
even bother to try to explain how inlineCallbacks works to my brain
right now. I've said enough erroneous fact in IRC. I'm going to need a
lot more help in the future.

> Thanks for your time,

I appreciate your time a lot more. You have things to do. I don't.

> -glyph
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From facundobatista at gmail.com  Fri Mar 25 16:26:32 2011
From: facundobatista at gmail.com (Facundo Batista)
Date: Fri, 25 Mar 2011 19:26:32 -0300
Subject: [Twisted-Python] Old-class-only support in manhole
Message-ID: <AANLkTin8Zt7St1r6BoX85EEreJi4kr3RSr=bHNFVUPy7@mail.gmail.com>

Hello!

Creating a test case for a change in twisted/manhole/explorer.py, I
found these lines in CRUFT_WatchyThingie.watchObject:

        if type(object) is not types.InstanceType:
            raise TypeError, "Sorry, can only place a watch on Instances."

Always talking in Python 2, if you pass an instance of an old style
class as the "object", it will be ok; but if you pass a new style
class, it will raise TypeError.

So, I wanted just to ask if this is on purpose, should I open a bug
about it, or what.

Thank you!

-- 
.    Facundo

Blog: http://www.taniquetil.com.ar/plog/
PyAr: http://www.python.org/ar/



From exarkun at twistedmatrix.com  Sat Mar 26 12:13:30 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 26 Mar 2011 18:13:30 -0000
Subject: [Twisted-Python] Old-class-only support in manhole
In-Reply-To: <AANLkTin8Zt7St1r6BoX85EEreJi4kr3RSr=bHNFVUPy7@mail.gmail.com>
References: <AANLkTin8Zt7St1r6BoX85EEreJi4kr3RSr=bHNFVUPy7@mail.gmail.com>
Message-ID: <20110326181330.1992.753841978.divmod.xquotient.50@localhost.localdomain>

On 25 Mar, 10:26 pm, facundobatista at gmail.com wrote:
>Hello!
>
>Creating a test case for a change in twisted/manhole/explorer.py, I
>found these lines in CRUFT_WatchyThingie.watchObject:
>
>        if type(object) is not types.InstanceType:
>            raise TypeError, "Sorry, can only place a watch on 
>Instances."
>
>Always talking in Python 2, if you pass an instance of an old style
>class as the "object", it will be ok; but if you pass a new style
>class, it will raise TypeError.
>
>So, I wanted just to ask if this is on purpose, should I open a bug
>about it, or what.

This is really old, untested code.  At the time it was written, there 
was no such thing as a new-style class.  No one bothered to update the 
code when new-style classes were introduced into the language.  And the 
last time I tried to actually use this functionality (at least two years 
ago), it didn't work anymore anyway (even for classic classes).

The idea here is cool, and I think it would be nice to support it, but 
this code is pretty gross and, as far as I know, broken.  I think we 
should think about getting rid of it.  If we go that route, then you 
should be able to ignore it for your Python 3 porting efforts.

Jean-Paul



From facundobatista at gmail.com  Sat Mar 26 12:47:41 2011
From: facundobatista at gmail.com (Facundo Batista)
Date: Sat, 26 Mar 2011 15:47:41 -0300
Subject: [Twisted-Python] Old-class-only support in manhole
In-Reply-To: <20110326181330.1992.753841978.divmod.xquotient.50@localhost.localdomain>
References: <AANLkTin8Zt7St1r6BoX85EEreJi4kr3RSr=bHNFVUPy7@mail.gmail.com>
	<20110326181330.1992.753841978.divmod.xquotient.50@localhost.localdomain>
Message-ID: <AANLkTimfn9AYygBDHjm7NK7+S8243ODj0nJCfZcQrFH-@mail.gmail.com>

On Sat, Mar 26, 2011 at 3:13 PM,  <exarkun at twistedmatrix.com> wrote:

> The idea here is cool, and I think it would be nice to support it, but
> this code is pretty gross and, as far as I know, broken.  I think we
> should think about getting rid of it.  If we go that route, then you
> should be able to ignore it for your Python 3 porting efforts.

However, I added a couple of tests for that code, just to test the
line I changed from 'new' to 'types' module (it was requested by the
reviewer in Trac).

-- 
.    Facundo

Blog: http://www.taniquetil.com.ar/plog/
PyAr: http://www.python.org/ar/



From exarkun at twistedmatrix.com  Sat Mar 26 13:39:35 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 26 Mar 2011 19:39:35 -0000
Subject: [Twisted-Python] TestCase methods names
In-Reply-To: <B2D8F536-5B45-4D6D-A813-D61B48A869E9@twistedmatrix.com>
References: <AANLkTinmwLYVS6E68G9uh1APVe4dEP78TVwJ3KpfgtsE@mail.gmail.com>
	<20110319013655.2231.453825371.divmod.xquotient.262@localhost.localdomain>
	<B2D8F536-5B45-4D6D-A813-D61B48A869E9@twistedmatrix.com>
Message-ID: <20110326193935.1992.1561837096.divmod.xquotient.52@localhost.localdomain>

On 19 Mar, 08:27 am, glyph at twistedmatrix.com wrote:
>
>On Mar 18, 2011, at 9:36 PM, exarkun at twistedmatrix.com wrote:
>>>In concrete, I say that we should:
>>>
>>>- Deprecate those names that are deprecated in Python 3 (I mean, 
>>>still
>>>provide the functionality, but with a DeprecationWarning)
>>>
>>>- Stop using them in internal code.
>>>
>>>- Fix documentation to explain all this and show the chosen methods.
>>>
>>>What do you think?
>>
>>+1 from me.
>
>Me too, except the order is wrong:

Alrighty.
>>>- Fix documentation...
>

#4989
>>>- Stop using them...
>

#4990
>>>- Deprecate those names...
>

#4991

Jean-Paul



From exarkun at twistedmatrix.com  Sat Mar 26 22:05:21 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 27 Mar 2011 04:05:21 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1301198721.87.696252286@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110327/f4547e5c/attachment.html>

From glyph at twistedmatrix.com  Sat Mar 26 22:22:41 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 27 Mar 2011 00:22:41 -0400
Subject: [Twisted-Python] TestCase methods names
In-Reply-To: <20110326193935.1992.1561837096.divmod.xquotient.52@localhost.localdomain>
References: <AANLkTinmwLYVS6E68G9uh1APVe4dEP78TVwJ3KpfgtsE@mail.gmail.com>
	<20110319013655.2231.453825371.divmod.xquotient.262@localhost.localdomain>
	<B2D8F536-5B45-4D6D-A813-D61B48A869E9@twistedmatrix.com>
	<20110326193935.1992.1561837096.divmod.xquotient.52@localhost.localdomain>
Message-ID: <AANLkTi=+ixMDwt+d5Fj8AoVhZtKc5pW+AcRRvLHHmJ+A@mail.gmail.com>

Looks great.  Thanks for filing those!  (And even with those new tickets, -1
total open issues this week!  WTG!)

On Sat, Mar 26, 2011 at 3:39 PM, <exarkun at twistedmatrix.com> wrote:

> On 19 Mar, 08:27 am, glyph at twistedmatrix.com wrote:
> >
> >On Mar 18, 2011, at 9:36 PM, exarkun at twistedmatrix.com wrote:
> >>>In concrete, I say that we should:
> >>>
> >>>- Deprecate those names that are deprecated in Python 3 (I mean,
> >>>still
> >>>provide the functionality, but with a DeprecationWarning)
> >>>
> >>>- Stop using them in internal code.
> >>>
> >>>- Fix documentation to explain all this and show the chosen methods.
> >>>
> >>>What do you think?
> >>
> >>+1 from me.
> >
> >Me too, except the order is wrong:
>
> Alrighty.
> >>>- Fix documentation...
> >
>
> #4989
> >>>- Stop using them...
> >
>
> #4990
> >>>- Deprecate those names...
> >
>
> #4991
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110327/4d2baf54/attachment.html>

From glyph at twistedmatrix.com  Sat Mar 26 22:23:41 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 27 Mar 2011 00:23:41 -0400
Subject: [Twisted-Python] Old-class-only support in manhole
In-Reply-To: <AANLkTimfn9AYygBDHjm7NK7+S8243ODj0nJCfZcQrFH-@mail.gmail.com>
References: <AANLkTin8Zt7St1r6BoX85EEreJi4kr3RSr=bHNFVUPy7@mail.gmail.com>
	<20110326181330.1992.753841978.divmod.xquotient.50@localhost.localdomain>
	<AANLkTimfn9AYygBDHjm7NK7+S8243ODj0nJCfZcQrFH-@mail.gmail.com>
Message-ID: <AANLkTikFctb3-aPksQw2RJ1aaJS6xa2KTXW1Ue+Adq8k@mail.gmail.com>

On Sat, Mar 26, 2011 at 2:47 PM, Facundo Batista
<facundobatista at gmail.com>wrote:

> On Sat, Mar 26, 2011 at 3:13 PM,  <exarkun at twistedmatrix.com> wrote:
>
> > The idea here is cool, and I think it would be nice to support it, but
> > this code is pretty gross and, as far as I know, broken.  I think we
> > should think about getting rid of it.  If we go that route, then you
> > should be able to ignore it for your Python 3 porting efforts.
>
> However, I added a couple of tests for that code, just to test the
> line I changed from 'new' to 'types' module (it was requested by the
> reviewer in Trac).
>

It would definitely be nicer to make it work than to remove it.  You should
just feel free to consider the option of removing it if making it function
correctly is an unreasonable amount of work.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110327/48fb2032/attachment-0001.html>

From exarkun at twistedmatrix.com  Sun Mar 27 07:52:27 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 27 Mar 2011 13:52:27 -0000
Subject: [Twisted-Python] Old-class-only support in manhole
In-Reply-To: <AANLkTikFctb3-aPksQw2RJ1aaJS6xa2KTXW1Ue+Adq8k@mail.gmail.com>
References: <AANLkTin8Zt7St1r6BoX85EEreJi4kr3RSr=bHNFVUPy7@mail.gmail.com>
	<20110326181330.1992.753841978.divmod.xquotient.50@localhost.localdomain>
	<AANLkTimfn9AYygBDHjm7NK7+S8243ODj0nJCfZcQrFH-@mail.gmail.com>
	<AANLkTikFctb3-aPksQw2RJ1aaJS6xa2KTXW1Ue+Adq8k@mail.gmail.com>
Message-ID: <20110327135227.1992.1521143284.divmod.xquotient.60@localhost.localdomain>

On 04:23 am, glyph at twistedmatrix.com wrote:
>On Sat, Mar 26, 2011 at 2:47 PM, Facundo Batista
><facundobatista at gmail.com>wrote:
>>On Sat, Mar 26, 2011 at 3:13 PM,  <exarkun at twistedmatrix.com> wrote:
>>
>> > The idea here is cool, and I think it would be nice to support it, 
>>but
>> > this code is pretty gross and, as far as I know, broken.  I think we
>> > should think about getting rid of it.  If we go that route, then you
>> > should be able to ignore it for your Python 3 porting efforts.
>>
>>However, I added a couple of tests for that code, just to test the
>>line I changed from 'new' to 'types' module (it was requested by the
>>reviewer in Trac).
>
>It would definitely be nicer to make it work than to remove it.  You 
>should
>just feel free to consider the option of removing it if making it 
>function
>correctly is an unreasonable amount of work.

I don't know.  Skim 
http://twistedmatrix.com/trac/browser/trunk/twisted/manhole/explorer.py?rev=31448 
and see if you think it's actually fixable. :)

In any case, Facundo did write tests that cover the lines he needed to 
change for that ticket, and I applied his patch to trunk.  Still, as far 
as I know explorer doesn't actually work, and most of explorer.py is 
still untested.

Jean-Paul



From exarkun at twistedmatrix.com  Sun Mar 27 07:56:33 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 27 Mar 2011 13:56:33 -0000
Subject: [Twisted-Python] TestCase methods names
In-Reply-To: <AANLkTi=+ixMDwt+d5Fj8AoVhZtKc5pW+AcRRvLHHmJ+A@mail.gmail.com>
References: <AANLkTinmwLYVS6E68G9uh1APVe4dEP78TVwJ3KpfgtsE@mail.gmail.com>
	<20110319013655.2231.453825371.divmod.xquotient.262@localhost.localdomain>
	<B2D8F536-5B45-4D6D-A813-D61B48A869E9@twistedmatrix.com>
	<20110326193935.1992.1561837096.divmod.xquotient.52@localhost.localdomain>
	<AANLkTi=+ixMDwt+d5Fj8AoVhZtKc5pW+AcRRvLHHmJ+A@mail.gmail.com>
Message-ID: <20110327135633.1992.112579717.divmod.xquotient.62@localhost.localdomain>

On 04:22 am, glyph at twistedmatrix.com wrote:
>Looks great.  Thanks for filing those!  (And even with those new 
>tickets, -1
>total open issues this week!  WTG!)

At some point we'll run out of web2 tickets that we can close as wontfix 
(actually we may have already) and then we'll need to actually *fix* 
tickets to get the count down.

Everyone should try to fix one ticket this week so we continue the 
downward trend. :)

Jean-Paul



From glyph at twistedmatrix.com  Sun Mar 27 19:54:15 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 27 Mar 2011 21:54:15 -0400
Subject: [Twisted-Python] Deferred documentation.
In-Reply-To: <AANLkTikyzfT=tNZP5KpB30F-UxBA6A_bN3E4gPK1vHPp@mail.gmail.com>
References: <AANLkTik0uA2NAvYjFpRqDk5XDNsgoj073nfmjF1tWHcP@mail.gmail.com>
	<AANLkTinemJ-Rdf1EC+0VDgxnvixpe5dvxCdGP5_kZA4m@mail.gmail.com>
	<B68B4F4A-A8D5-4D23-87FC-9D0477A4BA65@twistedmatrix.com>
	<AANLkTikyzfT=tNZP5KpB30F-UxBA6A_bN3E4gPK1vHPp@mail.gmail.com>
Message-ID: <4C606D48-E571-46E9-B621-E9DE21E76210@twistedmatrix.com>


On Mar 25, 2011, at 7:28 AM, Jasper St. Pierre wrote:

> Big wall of text incoming. If you're going to read any part of this
> email, search for *IMPORTANT* and read that part.
> 
> Right now I'm stuck at creating a simple example for "deferred dependencies".
> 
> On Tue, Mar 22, 2011 at 10:03 PM, Glyph Lefkowitz
> <glyph at twistedmatrix.com> wrote:
>> On Mar 21, 2011, at 9:30 PM, Jasper St. Pierre wrote:
>> 
>>> On IRC, exarkun, glyph, spiv and idnar encouraged me to do a bit of
>>> work on the Defer documentation.
>> 
>> Yay!  This documentation could definitely use some work.
>> 
>>> I kept get confused between the things like returning a Deferred from a
>>> callback and chainDeferred, which I found out wasn't that useful:
>> 
>> Yeah, chainDeferred is not a great method.  Now that Deferreds are
>> non-recursive, I think it's purely worse than inserting an additional
>> Deferred as a result from a callback.
>> 
>> My eventual goal is to reduce the number of documentation about defer
>> down to a near-impossible two documents. I'm hoping to merge some of
>> the good stuff of the other thousands of documents.
>> 
>> That would be absolutely great.
>> 
>>> Thoughts so far?
>> 
>> While I applaud your intent, these drafts look quite rough.  The random
>> interjections and asides in
>> <http://magcius.mecheye.net/twisted/DeferHowTo-Fixup.html> seem distracting
>> and confusing to me.  Trying to put myself in the mind of a newcomer, I find
>> myself asking many questions which are irrelevant to what I'm trying to
>> learn:
>> 
>> What's "async"?  Why is it hard?  (The original document mentions
>> asynchronous stuff, but in the context of full english sentences.)
> 
> Should I mention blocking with something like urllib, then showcase
> another example library that uses regular callbacks?

That sounds like a good idea, actually.  Start by looking at it blocking, explain the problem with that; then demonstrate the one-callback-when-you're-done approach and explain some issues with that, and then move on to Deferreds.

>> Where are we going shopping?  What does shopping have to do with this?
> 
> Pop culture reference. Killed.

To be clear: I did get that reference, actually, and in another context it would be pretty funny :).  Just not in these docs that are supposed to be universally accessible.

>> What's gevent?  Does this have something to do with Twisted?
>> What's node.js?  This looks like Javascript, what does it have to do with
>> Twisted, which I thought was in Python?
> 
> Placeholders.

Placeholders for what, though?

>> (Now I've gotten distracted and I'm reading about gevent and node.js rather
>> than making my Twisted application work and completing the Deferred
>> tutorial.  Epic fail.  But, if I were to continue...)
>> 
>> What's "this pattern"?  Functions?  Don't lots of programs use functions?
> 
> I guess this is a bit obvious when you have first-class-functions as a
> language feature, but it's still a "pattern."

My point was that the antecedents get a little ambiguous by that point in the text.

>> How do they use it?  Why is it relevant?
> 
> I guess I'm stupid or slow, but it took a while for me to realize that
> Deferreds were basically a standardized callback mechanism. It's not
> really written anywhere on the tin: Deferred was to me a bit of an
> unobvious name for what it does, and before recently I've always
> associated it tightly to scheduling and the reactor.

No, this is a common problem.  I think it would be great to address the definition a bit more comprehensively.

>> Why is the first explanation of what a Deferred is referred to as "technical
>> mumbo-jumbo"? Is this really complicated?  If I am not super good at
>> programming already, should I not be reading this?
> 
> It was prefixed with "The abstract" before. I put it back to "The
> abstract". To me, it seems like it's written in a way that makes sense
> only if you understand what a Deferred is, but it was useful, so I
> didn't rip it out. I see it as a paragraph that will make more sense
> as you're reading the article, and once you go back and understand it,
> there's that happy "snap" feeling as you get the concept.

It does seem to be a bit disconnected from the flow of the regular text.  Perhaps it would be better if it were laid out as a paragraph, and then each sentence, or clause, were examined more closely, perhaps with an accompanying code snippet to clarify it.

>> What's an "operation"?  Does that mean 'function' or 'method' or some other
>> special thing?  It says "most operations in Twisted return a Deferred"; but
>> I've called lots of functions in Twisted which returned other objects before
>> reading this tutorial, or returned None.  Were those actually Deferreds?
> 
> Yeah, I need to reword that. How about, "because Deferreds are a core
> part of Twisted, a lot of functions return them"? No... that's not
> good either.

That's closer, but it should be something more specific than "a lot".
> 
>> Instead, the "fixup" changes the first example to rely on a fake library,
>> which will raise exceptions if I try to run it, but doesn't actually explain
>> that 'magiclib' isn't real.  This isn't a huge problem in and of itself (it
>> is trying to demonstrate the "wrong" way to do things, after all) but it
>> sets up the expectation that the rest of the examples are fake, too, and I
>> shouldn't bother to run them.
> 
> Right now, it's a placeholder for that magic library that I haven't found yet.

I can see why you might want to do that.  In the narrative flow between urllib and Deferreds, there is a missing step; you may need to fake that out.  I'm just saying that you should be very clear and say "this is a fake example, merely for the purpose of illustration".  I think that Tornado has some ugly callback-based stuff, but it would be better to leave this example fake than to try to teach users how to use that.

>> I think the original document has plenty of issues, but these changes look
>> like they've been written for people who already mostly understand
>> Deferreds, but are having trouble catching some of the nuances, and need
>> humor to diffuse their frustration and more examples to illustrate different
>> usage patterns, rather than a fundamentally clearer or better explanation
>> than what was offered before.
> 
> *IMPORTANT*
> 
> Are there specific changes you find that could make it harder to read
> for newcomers?

I thought my previous message was a list of those :-(

> The concept of Deferreds isn't hard at all, once you understand what
> they are. The subtle nuances and bits of glue code that Twisted are
> the things that can trip someone up, and what I'm still learning. A
> small amount of very specific use cases for Deferreds happen in
> real-world code and I'd like to show the support that Twisted has for
> them built-in.
> 
> My goals for this document are:
> 
>  1) A list of guaranteed rules about Deferreds for reference at any time.
>  2) An introduction to those rules in a format that doesn't require
> knowledge of others.
>  3) Showing techniques or tricks that you can play by "exploiting"
> parts of those rules in the context of a contrived problem.
>  4) Showing the built-in support for it.

My first goal for this document would be a clear, concise explanation of what a Deferred is and why you need it.

> This should help clear up my writing style a bit. I think in terms of
> separating abstraction layers; I always try separate a fact or rule
> from logic or a technique that can follow when you can exploit that
> fact (feel free to ask the people about 'evolution' in
> #python-offtopic). I also try to think of the code being very linear
> when it evolves: a new rule is added, you have a problem, you can
> exploit that rule with a specific technique, the technique is
> standardized.
> 
> Example A:
>  PROBLEM: You need to create a Deferred with a known result
>  RULE: Callbacks will continue running after you've called "callback"
> or "errback"
>  TECHNIQUE: You can create a Deferred, call 'callback' on it and
> return it, without any tricky business
>  STANDARDIZED: twisted.internet.defer.success
> 
> Example B:
>  PROBLEM: You need to get the results from multiple Deferreds without
> blocking or too much linearity
>  RULE: More than one Deferred can be created and 'run' at the same time
>  TECHNIQUE: You can add a callback to a Deferred, take the result you
> get and save it in a list or dictionary
>  STANDARDIZED: DeferredList, gatherResults

These seem more like recipes to me than introductory documentation.  Maybe they should be really close together, to try to drive the concept home, but it would be good to really get it clear in the reader's mind why they fundamentally need Deferreds, then to cover all the subtle different ways you might need them and how you could use them.

> The hardest part is creating simple, short, runnable code that
> introduces: a problem that doesn't seem silly, a rule that guides
> toward the solution, the technique that uses the rule to solve it. It
> was much easier when I could contrive examples of a network-enabled
> kitchen: recipes map pretty well to code, especially Twisted async:
> 
>  1) Melt butter in a saucepan. When the butter is finished melting,
> put cocoa powder in.
>  2) Meanwhile, beat egg whites and sugar, and cream of tartar.
>  3) When both are done, put the chocolate mix in a Cuisinart, and
> fold in the egg whites.
> 
> Here you have dependencies (butter needs to be melted before cocoa
> powder), multi-tasking (you don't want to wait for the butter while
> beating the eggs), and a way of knowing when things are done (so you
> can fold them into the cuisinart).
> 
> ( Also, this is a real recipe, ableit simplified and it makes really
> easy, delicious chocolate mousse:
> http://articles.latimes.com/2008/feb/13/food/la-fo-watch13recafeb13 )

This looks like a fantastic example.  It's comprehensible, concrete, not too long, and involves a strict metaphor for a real world situation, without mixing in any obscure technology.  I would be happy if the entire Deferred tutorial were to be structured around it.

You could also tweak it to introduce additional concepts.  For example, errbacks: "If the butter burns...".

>> That makes sense, since based on what you've
>> said on #twisted, that's basically the position you find yourself in :).
>>  This document is supposed to be a tutorial though, explaining how to use
>> Deferreds to users who really have no idea what they are (despite its
>> unfortunate name, "Deferred Reference" - that should probably be changed).
>> One thing I think is very good about this attempted rework, though, is the
>> explanation of the motivation for having Deferreds at all, before explaining
>> how they work.  In the current documentation, it's very unclear why we have
>> such an object in the first place, or what the alternatives to it are.
> 
> Once I *knew* what a Deferred was, the other pieces started snapping into place.

So it sounds like we're in agreement here: the existing document isn't clear enough about exactly what a Deferred is, it's described too formally and its uses aren't clear enough before we start diving into the technical specifics.  Any modification should strive to make it super clear what it is and why you use it.

>> However, the example presented makes it seem as though you really don't
>> need Deferreds, because the only problem with the single-callback approach
>> is handling errors. Another major motivation is the ability to return a
>> Deferred through a system with several layers, changing the return value at
>> each layer by post-processing it a bit.  (One possible example: a REST API
>> that wants to deal with objects, and goes via a translation of [bytes from
>> HTTP]->[JSON dicts/lists from parsing those bytes]->[domain-specific objects
>> by converting JSON objects according to the particular API's spec].)
> 
> I never really thought about it before. I just realized right now,
> writing this email, that things like DeferredList aren't cleanly
> possible if the callback is tied to the request.
> 
> Additionally, is the showcase of this in the fixup with "Multiple
> Callbacks" I did fine? The SQL to HTML example that was there before
> seemed a bit contrived, and I wanted to showcase it in a runnable
> snippet that required Twisted. We can't have them install a SQL
> server, so I used xml.minidom instead of lxml, even though know it's
> complete crap. When I'm done, I should replace the www.example.com
> URLs with files hosted on the Twisted doc site. Is there a way to
> point to generate a URL like that with Lore?

Use 'localhost' URLs and have the user run a 'twistd web' command line for their server; that should be simple enough :).

>> However, I think the need would be better illustrated with examples that can
>> actually be run than with fake examples where we assume that the user knows
>> how something like gevent works.  (Also: gevent doesn't actually work this
>> way, for fetching web pages at least, so your example is wrong.  See
>> <http://www.gevent.org/intro.html#monkey-patching>.)
> 
> I've replaced them with "Library A" and "Library B" placeholders. :)

I'm still not really sure you need to talk about other libraries at all, especially not this early in the document.

>> It's pretty easy to write a fake implementation of 'fetchWebPageAsync' which
>> squirrels away the callback somewhere that the example can call it later,
>> and explain that with some handwaving where we say "and pretend that was
>> actually some networking code fetching it".  For that matter, the reactor is
>> introduced too early in the existing docs; we should demonstrate calling the
>> callback synchronously, and then only later introduce a callLater.
> 
> I ripped out all the reactor code in the starting sections of the
> fixup on purpose, and showcased it with what I think is a clear
> example. When introducing the techniques afterwards, I'm going to
> gently ramp up the reactor code to be a bit more real-world.
> 
>> Anyway I hope this wall of text did not discourage you - I just think you
>> need some clearer goals for improving specific aspects of the documentation,
>> and you should write those down first before trying to actually address them
>> with more docs.
> 
> This email did exactly that. Thanks so much!
> 
> P.S. I still have a *lot* to learn. Some tutoring on the subtleties of
> LoopingCall and coiterator/cooperator would be nice. I'm not going to
> even bother to try to explain how inlineCallbacks works to my brain
> right now. I've said enough erroneous fact in IRC. I'm going to need a
> lot more help in the future.

Great.  I look forward to it :).

>> Thanks for your time,
> 
> I appreciate your time a lot more. You have things to do. I don't.

I am a pretty busy guy, but Twisted is open source and community driven: you've got just as many bugs to fix in it as I do ;-).

Please feel free to snip heavily in any replies; anywhere that you feel we've reached an agreement doesn't need more quoting.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110327/cd03bf3a/attachment.html>

From glyph at twistedmatrix.com  Sun Mar 27 19:57:28 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 27 Mar 2011 21:57:28 -0400
Subject: [Twisted-Python] prerelease preview predocumentation
In-Reply-To: <C9AA782C-1AC0-423A-9146-278E914D53D5@twistedmatrix.com>
References: <C9AA782C-1AC0-423A-9146-278E914D53D5@twistedmatrix.com>
Message-ID: <CED11EEE-3486-47FD-936C-DE453D26D1F9@twistedmatrix.com>


On Mar 23, 2011, at 9:34 PM, Glyph Lefkowitz wrote:

> <http://twistedmatrix.com/~glyph/sphinx-preview-11.0pre1/>

Anyone have comments about this?  With all the recent excitement about the docs, I thought there would be a much more active thread here!

Thoughts about whether we should link it from the front page?

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110327/7941baf6/attachment.html>

From glyph at twistedmatrix.com  Sun Mar 27 20:03:59 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 27 Mar 2011 22:03:59 -0400
Subject: [Twisted-Python] Asynchronous context in Twisted
In-Reply-To: <AANLkTika=xCxs1qmo2jZ2tFXSYJjUGtPqOpzacHcCE53@mail.gmail.com>
References: <AANLkTikX_wkb5-jgmxQ7Y-3_ENurHS-COTOfBQN=vGX4@mail.gmail.com>
	<AANLkTika=xCxs1qmo2jZ2tFXSYJjUGtPqOpzacHcCE53@mail.gmail.com>
Message-ID: <2C9AB5BE-D156-4296-AD57-755CC43454CA@twistedmatrix.com>


On Mar 15, 2011, at 2:54 AM, Fantix King wrote:

> Thanks for replying! :)

No problem, I wish I had time for more replies, but my stack runneth over.

> --- <asynchronous break point> ---

This is completely awesome, and I have had this message sitting around waiting for me to appropriately consider it and reply.  Hopefully I'll have some time in the future though.  Can you perhaps file a ticket in the Twisted tracker for "asynchronous tracebacks that show me what has happened to a Deferred" or something like that?  I think that we've all been afraid that such a feature would have too high of a performance cost, but like the creation/invocation stacks that are used when Deferred debugging is on, we could at least make use of it in unit tests or in debug mode.

Thanks again for this awesome demonstration, and I'm sorry I haven't had more time to look at it.

> Additionally, in my scenario of a 5 years old asynchronous Twisted web application, we
> need the "request" object available throughout all code between asynchronous network
> accesses and database accesses because our global configuration system needs the
> request object. It would greatly reduce our manual work to pass through the request
> object here and there to have a context working in the asynchronous way.

Okay, _this_ sounds terrible to me.  Implicitly requiring an out-of-band parameter that is retrieved via some global variable is a maintenance nightmare.  This is one of the reasons I haven't written and published more about trying to do more with asynchronous context: I don't want idiomatic Twisted applications to become a big mess of spaghetti code which only works if your call stacks are all just so.

Availability of an implicit/shared context object was one of the things that made maintaining old Woven and Nevow code such a pain, and I consider its complete elimination in twisted.web.template a major step forward.  So let's not go down that road again :).

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110327/f29f5b61/attachment.html>

From screwtape at froup.com  Sun Mar 27 20:09:50 2011
From: screwtape at froup.com (Tim Allen)
Date: Mon, 28 Mar 2011 13:09:50 +1100
Subject: [Twisted-Python] prerelease preview predocumentation
In-Reply-To: <CED11EEE-3486-47FD-936C-DE453D26D1F9@twistedmatrix.com>
References: <C9AA782C-1AC0-423A-9146-278E914D53D5@twistedmatrix.com>
	<CED11EEE-3486-47FD-936C-DE453D26D1F9@twistedmatrix.com>
Message-ID: <20110328020950.GE5510@boombah.thristian.org>

On Sun, Mar 27, 2011 at 09:57:28PM -0400, Glyph Lefkowitz wrote:
> On Mar 23, 2011, at 9:34 PM, Glyph Lefkowitz wrote:
> > <http://twistedmatrix.com/~glyph/sphinx-preview-11.0pre1/>
> 
> Anyone have comments about this?  With all the recent excitement about the docs, I thought there would be a much more active thread here!

I think it looks lovely - but then, even Kevin's first drafts looked
lovely, so I didn't think that was particularly comment worthy.

I hope to be able to help out with the markup and spacing nitpicking,
once whoever's responsbile says "Yes, this is good enough, it can be our
official doc system from now on."

I'm not sure if it's not finished yet, or I did something stupid, but
I tried to test out the search system by picking a word I figured would
be common in Twisted code ("addCallbacks"), and... got no hits. Even
"Twisted" gets no hits. At least, I assume that's what's going on;
there's no "No results found" message, but no results are displayed.

> Thoughts about whether we should link it from the front page?

I'm not sure if a "try our new documentation system" link should be on
the website's front page, but it's definitely the sort of thing you'd
put on a mailing-list, or blog-post, or Planet Python, or your
microblogging venue of choice. You know, just to get the message out
that the Twisted project cares about its documentation and Things are
Actually Being Done. :)



From glyph at twistedmatrix.com  Sun Mar 27 20:19:19 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 27 Mar 2011 22:19:19 -0400
Subject: [Twisted-Python] prerelease preview predocumentation
In-Reply-To: <20110328020950.GE5510@boombah.thristian.org>
References: <C9AA782C-1AC0-423A-9146-278E914D53D5@twistedmatrix.com>
	<CED11EEE-3486-47FD-936C-DE453D26D1F9@twistedmatrix.com>
	<20110328020950.GE5510@boombah.thristian.org>
Message-ID: <C7D5523D-3B22-41EC-BE59-A7C48264D362@twistedmatrix.com>

On Mar 27, 2011, at 10:09 PM, Tim Allen wrote:

> I'm not sure if it's not finished yet, or I did something stupid, but
> I tried to test out the search system by picking a word I figured would
> be common in Twisted code ("addCallbacks"), and... got no hits. Even
> "Twisted" gets no hits. At least, I assume that's what's going on;
> there's no "No results found" message, but no results are displayed.

Hrm, this does indeed seem to be broken, but I have no idea why.  And this is exactly the sort of thing I had hoped to spot before we decide to go completely live with it :).  I hope Kevin will chime in.

> it's definitely the sort of thing you'd
> put on a mailing-list, or blog-post, or Planet Python, or your
> microblogging venue of choice. You know, just to get the message out
> that the Twisted project cares about its documentation and Things are
> Actually Being Done. :)

OK, I tweeted the link :).

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110327/928a81a2/attachment.html>

From mithrandi at mithrandi.net  Sun Mar 27 23:20:22 2011
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Mon, 28 Mar 2011 07:20:22 +0200
Subject: [Twisted-Python] prerelease preview predocumentation
In-Reply-To: <C7D5523D-3B22-41EC-BE59-A7C48264D362@twistedmatrix.com>
References: <C9AA782C-1AC0-423A-9146-278E914D53D5@twistedmatrix.com>
	<CED11EEE-3486-47FD-936C-DE453D26D1F9@twistedmatrix.com>
	<20110328020950.GE5510@boombah.thristian.org>
	<C7D5523D-3B22-41EC-BE59-A7C48264D362@twistedmatrix.com>
Message-ID: <AANLkTikLK1=Viesyyd4bhzAZBi16_XcLoowLKu9KpCTM@mail.gmail.com>

On Mon, Mar 28, 2011 at 4:19 AM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
> On Mar 27, 2011, at 10:09 PM, Tim Allen wrote:
>
> > I'm not sure if it's not finished yet, or I did something stupid, but
> > I tried to test out the search system by picking a word I figured would
> > be common in Twisted code ("addCallbacks"), and... got no hits. Even
> > "Twisted" gets no hits. At least, I assume that's what's going on;
> > there's no "No results found" message, but no results are displayed.
>
> Hrm, this does indeed seem to be broken, but I have no idea why.  And this
> is exactly the sort of thing I had hoped to spot before we decide to go
> completely live with it :).  I hope Kevin will chime in.

The proximate cause of the lack of search results is this error:

$.getQueryParameters is not a function
http://twistedmatrix.com/~glyph/sphinx-preview-11.0pre1/_static/doctools.js
Line 179

I think this has something to do with doctools.js making incorrect
assumptions about how jQuery is being loaded / configured, but I don't
know enough about jQuery to be sure.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar



From jstpierre at mecheye.net  Mon Mar 28 03:52:58 2011
From: jstpierre at mecheye.net (Jasper St. Pierre)
Date: Mon, 28 Mar 2011 05:52:58 -0400
Subject: [Twisted-Python] Deferred documentation.
In-Reply-To: <4C606D48-E571-46E9-B621-E9DE21E76210@twistedmatrix.com>
References: <AANLkTik0uA2NAvYjFpRqDk5XDNsgoj073nfmjF1tWHcP@mail.gmail.com>
	<AANLkTinemJ-Rdf1EC+0VDgxnvixpe5dvxCdGP5_kZA4m@mail.gmail.com>
	<B68B4F4A-A8D5-4D23-87FC-9D0477A4BA65@twistedmatrix.com>
	<AANLkTikyzfT=tNZP5KpB30F-UxBA6A_bN3E4gPK1vHPp@mail.gmail.com>
	<4C606D48-E571-46E9-B621-E9DE21E76210@twistedmatrix.com>
Message-ID: <BANLkTinf2CTo-xaowDeAh_9T79BG_dQzMA@mail.gmail.com>

OK, I'm already making a lot of these changes, I should have a new version
Up Soon (TM).

> Placeholders.
>
> Placeholders for what, though?
>

Placeholders for that magic lib, that I think I'm going to stop looking for
and say, "demonstration purposes only"

How do they use it?  Why is it relevant?

I guess I'm stupid or slow, but it took a while for me to realize that
Deferreds were basically a standardized callback mechanism. It's not
really written anywhere on the tin: Deferred was to me a bit of an
unobvious name for what it does, and before recently I've always
associated it tightly to scheduling and the reactor.

No, this is a common problem.  I think it would be great to address the
definition a bit more comprehensively.

Through example?

It does seem to be a bit disconnected from the flow of the regular text.
>  Perhaps it would be better if it were laid out as a paragraph, and then
> each sentence, or clause, were examined more closely, perhaps with an
> accompanying code snippet to clarify it.
>

As I said, I don't want to explain that snippet. I just want to put it
there, ignore it, and hopefully the user will understand more of it as the
tutorial goes on.

> Right now, it's a placeholder for that magic library that I haven't found
> yet.
>
> I can see why you might want to do that.  In the narrative flow between
> urllib and Deferreds, there is a missing step; you may need to fake that
> out.  I'm just saying that you should be very clear and say "this is a fake
> example, merely for the purpose of illustration".  I think that Tornado has
> some ugly callback-based stuff, but it would be better to leave this example
> fake than to try to teach users how to use that.
>

Will do.


> Are there specific changes you find that could make it harder to read
> for newcomers?
>
> I thought my previous message was a list of those :-(
>

Well, it was a draft, and I felt that most of my changes were already
improvements over what was there. I didn't expect it to be "harder to read
for newcomers".

> The concept of Deferreds isn't hard at all, once you understand what
> they are. The subtle nuances and bits of glue code that Twisted are
> the things that can trip someone up, and what I'm still learning. A
> small amount of very specific use cases for Deferreds happen in
> real-world code and I'd like to show the support that Twisted has for
> them built-in.
>
> My goals for this document are:
>
>  1) A list of guaranteed rules about Deferreds for reference at any time.
>  2) An introduction to those rules in a format that doesn't require
> knowledge of others.
>  3) Showing techniques or tricks that you can play by "exploiting"
> parts of those rules in the context of a contrived problem.
>  4) Showing the built-in support for it.
>
> My first goal for this document would be a clear, concise explanation of
> what a Deferred is and why you need it.
>

As I said, when you understand what a Deferred is, it's not hard. The hard
part is *how* to use it. The urllib, fake library, Deferred example is all I
really want to go over about what a deferred is, because it's not hard. I
want to: untie a lot of the code samples from the reactor, explain in terms
of the two other examples that it's fundamentally the same thing, then and
go on to the techniques like errbacks, chaining callbacks, and how
separating the callback from the request allows things like
DeferredList/gatherResults.

> This should help clear up my writing style a bit. I think in terms of
> separating abstraction layers; I always try separate a fact or rule
> from logic or a technique that can follow when you can exploit that
> fact (feel free to ask the people about 'evolution' in
> #python-offtopic). I also try to think of the code being very linear
> when it evolves: a new rule is added, you have a problem, you can
> exploit that rule with a specific technique, the technique is
> standardized.
>
> Example A:
>  PROBLEM: You need to create a Deferred with a known result
>  RULE: Callbacks will continue running after you've called "callback"
> or "errback"
>  TECHNIQUE: You can create a Deferred, call 'callback' on it and
> return it, without any tricky business
>  STANDARDIZED: twisted.internet.defer.success
>
> Example B:
>  PROBLEM: You need to get the results from multiple Deferreds without
> blocking or too much linearity
>  RULE: More than one Deferred can be created and 'run' at the same time
>  TECHNIQUE: You can add a callback to a Deferred, take the result you
> get and save it in a list or dictionary
>  STANDARDIZED: DeferredList, gatherResults
>
> These seem more like recipes to me than introductory documentation.  Maybe
> they should be really close together, to try to drive the concept home, but
> it would be good to really get it clear in the reader's mind why they *
> fundamentally* need Deferreds, then to cover all the subtle *different* ways
> you might need them and how you could use them.
>

But you don't *fundamenally* *need *Deferreds at all. The new document isn't
going to convince them that they're the right thing or wrong thing, just to
show how to get along in their new home in Deferred-ville, USA. For the
recipes, they're going to be reading real-world Twisted code, they better
know what these recipes do.

And if you can think of some subtly different ways to use them other than
the generic "something is happening in the future, I better be prepared for
it", I'll put it in the document and attempt to eat my hat.

> *snip*
>
> ( Also, this is a real recipe, ableit simplified and it makes really
> easy, delicious chocolate mousse:
> http://articles.latimes.com/2008/feb/13/food/la-fo-watch13recafeb13 )
>
>
> This looks like a fantastic example.  It's comprehensible, concrete, not
> too long, and involves a strict metaphor for a real world situation, without
> mixing in any obscure technology.  I would be happy if the entire Deferred
> tutorial were to be structured around it.
>

Except it really breaks that "runnable examples" thing. As I said before,
recipes are a very convenient match for asynchronous code, but it's not
realistic to try to map 1:1 to the other.


> You could also tweak it to introduce additional concepts.  For example,
> errbacks: "If the butter burns...".
>

If the butter burns.... what do I do? Turn off the heat, clean the pan, and
restart some more butter? What if I run out of butter? Do I need a
"goToStoreToFetchButter" function? Is that another tutorial I should write?

> Once I *knew* what a Deferred was, the other pieces started snapping into
> place.
>
> So it sounds like we're in agreement here: the existing document isn't
> clear enough about exactly what a Deferred is, it's described too formally
> and its uses aren't clear enough before we start diving into the technical
> specifics.  Any modification should strive to make it super clear what it is
> and why you use it.
>

When I started with Twisted, I used Deferreds because "everything else in
Twisted uses it". I didn't really *try* to understand it too much, either.
Most of the time I used Twisted, I tried to hack it all up with
inlineCallbacks and pretend it was urllib, and then complain in #twisted
with a code snippet when it wasn't working.

Use 'localhost' URLs and have the user run a 'twistd web' command line for
> their server; that should be simple enough :).
>

For static pages, is there anything fundamentally wrong with "
http://twistedmatrix.com/documents/11.1.0/static/pi.txt", if I can do it?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110328/07b2b17a/attachment.html>

From tom at recursivedream.com  Mon Mar 28 07:27:04 2011
From: tom at recursivedream.com (Tom Davis)
Date: Mon, 28 Mar 2011 09:27:04 -0400
Subject: [Twisted-Python] prerelease preview predocumentation
In-Reply-To: <CED11EEE-3486-47FD-936C-DE453D26D1F9@twistedmatrix.com>
References: <C9AA782C-1AC0-423A-9146-278E914D53D5@twistedmatrix.com>
	<CED11EEE-3486-47FD-936C-DE453D26D1F9@twistedmatrix.com>
Message-ID: <AANLkTimWxHEnG_VtRUu+CU4N-=MbaHo9v1SP180513=u@mail.gmail.com>

On Sun, Mar 27, 2011 at 9:57 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

>
> On Mar 23, 2011, at 9:34 PM, Glyph Lefkowitz wrote:
>
> <http://twistedmatrix.com/~glyph/sphinx-preview-11.0pre1/>
>
>
> Anyone have comments about this?  With all the recent excitement about the
> docs, I thought there would be a much more active thread here!
>
> Thoughts about whether we should link it from the front page?
>
>
I meant to get to this sooner, but my weekend was unexpectedly busy. The
docs look awesome! Aside from the common formatting error of mandatory space
after marked up text, I didn't run into anything really odd. One issue on
the index is that both "Twisted Conch" and "Twisted Core" have subsections
called "Twisted Documentation."

It's great to have everything indexed on one page with easy drill-down into
specific sections. It becomes really obvious where the hierarchy can be
optimized and how we can logically go about breaking up the various
sections.

In reply to your original post, I'm still planning to finish the trial
tutorial. I feel like an ass for not doing it this weekend, but I turned out
to be rather occupied. I'm going to make time for it early this week if it
kills me.

-glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110328/2770f977/attachment.html>

From kevin.horn at gmail.com  Mon Mar 28 07:35:16 2011
From: kevin.horn at gmail.com (Kevin Horn)
Date: Mon, 28 Mar 2011 08:35:16 -0500
Subject: [Twisted-Python] prerelease preview predocumentation
In-Reply-To: <C7D5523D-3B22-41EC-BE59-A7C48264D362@twistedmatrix.com>
References: <C9AA782C-1AC0-423A-9146-278E914D53D5@twistedmatrix.com>
	<CED11EEE-3486-47FD-936C-DE453D26D1F9@twistedmatrix.com>
	<20110328020950.GE5510@boombah.thristian.org>
	<C7D5523D-3B22-41EC-BE59-A7C48264D362@twistedmatrix.com>
Message-ID: <AANLkTi=gOVS8PDvsH+SAL8d57oxP292FJJ+9fs0JJdZT@mail.gmail.com>

On Sun, Mar 27, 2011 at 9:19 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

> On Mar 27, 2011, at 10:09 PM, Tim Allen wrote:
>
> I'm not sure if it's not finished yet, or I did something stupid, but
> I tried to test out the search system by picking a word I figured would
> be common in Twisted code ("addCallbacks"), and... got no hits. Even
> "Twisted" gets no hits. At least, I assume that's what's going on;
> there's no "No results found" message, but no results are displayed.
>
>
> Hrm, this does indeed seem to be broken, but I have no idea why.  And this
> is exactly the sort of thing I had hoped to spot before we decide to go
> completely live with it :).  I hope Kevin will chime in.
>
>
I'm not sure what's up with that.  I had seen something similar before (like
a year ago), but thought it had been resolved with a bump in the Sphinx
version.  Or maybe it's a new problem completely...not sure.

I'll check into when I get a chance.  Probably won't be until at least
tomorrow though, or maybe Wednesday.  It's gonna be a busy week for me
(again...sigh) .

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110328/c8e6a26c/attachment.html>

From radix at twistedmatrix.com  Mon Mar 28 08:33:11 2011
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 28 Mar 2011 09:33:11 -0500
Subject: [Twisted-Python] prerelease preview predocumentation
In-Reply-To: <CED11EEE-3486-47FD-936C-DE453D26D1F9@twistedmatrix.com>
References: <C9AA782C-1AC0-423A-9146-278E914D53D5@twistedmatrix.com>
	<CED11EEE-3486-47FD-936C-DE453D26D1F9@twistedmatrix.com>
Message-ID: <AANLkTi=F3ocwUx1WEeVs8dgf1j8VqENyvN5Ky08B-tuB@mail.gmail.com>

On Sun, Mar 27, 2011 at 8:57 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

>
> On Mar 23, 2011, at 9:34 PM, Glyph Lefkowitz wrote:
>
> <http://twistedmatrix.com/~glyph/sphinx-preview-11.0pre1/>
>
>
> Anyone have comments about this?  With all the recent excitement about the
> docs, I thought there would be a much more active thread here!
>
> Thoughts about whether we should link it from the front page?
>
>
The names of links are inconsistent in a confusing way. On the linked page,
under "Twisted Core Documentation", I see "Twisted Documentation",
"Upgrading", "Twisted code examples", etc. But when I click on "Twisted Core
Documentation", the filtered list includes the names "Developer guides",
"Upgrades between versions", and "Examples". Can these be reconciled?


-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110328/6e82e65a/attachment.html>

From john at arbash-meinel.com  Mon Mar 28 08:44:34 2011
From: john at arbash-meinel.com (John Arbash Meinel)
Date: Mon, 28 Mar 2011 16:44:34 +0200
Subject: [Twisted-Python] Failure is O(state) vs Exception
Message-ID: <4D909ED2.1010300@arbash-meinel.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

I'm doing some performance testing of one of our Twisted applications.
And what I came across was a surprising amount of time being spent in
twisted.python.failure.Failure.__getstate__

We're doing a fair amount with exceptions. And under cProfile, I found this:

          29 0 0.4081 0.2940 twisted.python.failure:416(__getstate__)
      +34492 0 0.1141 0.0235 +twisted.python.reflect:557(safe_repr)

So under profiling, we spent 408ms in __getstate__. I then changed
Failure.cleanFailure to just 'return', and I saw a real-world
improvement of ~480ms down to about 240ms. I then restored cleanFailure,
but changed Failure.__init__ to always set 'tb=None' before it does
anything. And in that case the time went down to 180ms. (And when I dug
into it, 150ms of that is time spent waiting for an XMLRPC response.)

I'm wondering if there is a tasteful way to disable Traceback processing
in a production machine. I realize you never know when you are going to
need the state in order to figure out what went wrong. But it is costing
2-5x runtime speed. (The other answer is to write all of our code to
avoid Deferred.addErrback...)

In our case, there are many exceptions that are used as 'signaling'
rather than indicating a real failure. I suppose one option would be a
whitelist/blacklist that would indicate whether a given exception class
is worthy of a traceback. Thoughts?

John
=:->
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.10 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org/

iEYEARECAAYFAk2QntIACgkQJdeBCYSNAAPNPACeNtNUb1mifyTTSpAymcktWwQg
3UAAoLcbbADvaj2QYSxkgFnRdmmWjtPm
=SLqh
-----END PGP SIGNATURE-----



From radix at twistedmatrix.com  Mon Mar 28 09:02:15 2011
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 28 Mar 2011 10:02:15 -0500
Subject: [Twisted-Python] Failure is O(state) vs Exception
In-Reply-To: <4D909ED2.1010300@arbash-meinel.com>
References: <4D909ED2.1010300@arbash-meinel.com>
Message-ID: <AANLkTindhXEEwnLG-nO7dFCxd30hjqQ=iDEo_p2RT0Ks@mail.gmail.com>

On Mon, Mar 28, 2011 at 9:44 AM, John Arbash Meinel
<john at arbash-meinel.com>wrote:

> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
> I'm doing some performance testing of one of our Twisted applications.
> And what I came across was a surprising amount of time being spent in
> twisted.python.failure.Failure.__getstate__
>
> So under profiling, we spent 408ms in __getstate__. I then changed
> Failure.cleanFailure to just 'return', and I saw a real-world
> improvement of ~480ms down to about 240ms. I then restored cleanFailure,
> but changed Failure.__init__ to always set 'tb=None' before it does
> anything. And in that case the time went down to 180ms. (And when I dug
> into it, 150ms of that is time spent waiting for an XMLRPC response.)
>
>
Just for the record, changing cleanFailure to not do its operation is likely
to lead to big memory leaks. The second thing you did, setting self.tb to
None, makes more sense to speed things up.



> I'm wondering if there is a tasteful way to disable Traceback processing
> in a production machine. I realize you never know when you are going to
> need the state in order to figure out what went wrong. But it is costing
> 2-5x runtime speed. (The other answer is to write all of our code to
> avoid Deferred.addErrback...)
>


I hate to mention it (since it's unlikely I'd be able to work on it), but I
wonder how much a C extension would improve this without going the full step
of throwing out the debug data.

-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110328/73e41df0/attachment.html>

From john at arbash-meinel.com  Mon Mar 28 09:11:40 2011
From: john at arbash-meinel.com (John Arbash Meinel)
Date: Mon, 28 Mar 2011 17:11:40 +0200
Subject: [Twisted-Python] Failure is O(state) vs Exception
In-Reply-To: <AANLkTindhXEEwnLG-nO7dFCxd30hjqQ=iDEo_p2RT0Ks@mail.gmail.com>
References: <4D909ED2.1010300@arbash-meinel.com>
	<AANLkTindhXEEwnLG-nO7dFCxd30hjqQ=iDEo_p2RT0Ks@mail.gmail.com>
Message-ID: <4D90A52C.6090401@arbash-meinel.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On 03/28/2011 05:02 PM, Christopher Armstrong wrote:
> On Mon, Mar 28, 2011 at 9:44 AM, John Arbash Meinel
> <john at arbash-meinel.com <mailto:john at arbash-meinel.com>> wrote:
> 
>     -----BEGIN PGP SIGNED MESSAGE-----
>     Hash: SHA1
> 
>     I'm doing some performance testing of one of our Twisted applications.
>     And what I came across was a surprising amount of time being spent in
>     twisted.python.failure.Failure.__getstate__
> 
>     So under profiling, we spent 408ms in __getstate__. I then changed
>     Failure.cleanFailure to just 'return', and I saw a real-world
>     improvement of ~480ms down to about 240ms. I then restored cleanFailure,
>     but changed Failure.__init__ to always set 'tb=None' before it does
>     anything. And in that case the time went down to 180ms. (And when I dug
>     into it, 150ms of that is time spent waiting for an XMLRPC response.)
> 
> 
> Just for the record, changing cleanFailure to not do its operation is
> likely to lead to big memory leaks. The second thing you did, setting
> self.tb to None, makes more sense to speed things up.
> 

Right. I agree that it is a better solution. I was wondering about
having a whitelist of Exception classes that aren't considered
interesting enough to keep a traceback.

>  
> 
>     I'm wondering if there is a tasteful way to disable Traceback processing
>     in a production machine. I realize you never know when you are going to
>     need the state in order to figure out what went wrong. But it is costing
>     2-5x runtime speed. (The other answer is to write all of our code to
>     avoid Deferred.addErrback...)
> 
> 
> 
> I hate to mention it (since it's unlikely I'd be able to work on it),
> but I wonder how much a C extension would improve this without going the
> full step of throwing out the debug data.

A large portion of the time spent is in "safe_repr", which presumably is
turning all 30k objects into 'str' representations. I would imagine that
a lot of this is redundant across state. Meaning that the objects up at
the top frame probably don't change very often.


I think part of the issue is that when you have an unhandled exception,
that's when you really want the traceback, but you only know that long
after the traceback is gone.

John
=:->
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.10 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org/

iEYEARECAAYFAk2QpSwACgkQJdeBCYSNAANHhwCgj3J5a6/FgV1n/O2Zwm8U9pm7
eTgAoKWemYqgHnvMwnCrQA+uFZK/+Zeo
=x5Xm
-----END PGP SIGNATURE-----



From george at ringdevelopment.com  Mon Mar 28 09:14:28 2011
From: george at ringdevelopment.com (George Pauly)
Date: Mon, 28 Mar 2011 11:14:28 -0400
Subject: [Twisted-Python] prerelease preview predocumentation
In-Reply-To: <AANLkTi=F3ocwUx1WEeVs8dgf1j8VqENyvN5Ky08B-tuB@mail.gmail.com>
References: <C9AA782C-1AC0-423A-9146-278E914D53D5@twistedmatrix.com>
	<CED11EEE-3486-47FD-936C-DE453D26D1F9@twistedmatrix.com>
	<AANLkTi=F3ocwUx1WEeVs8dgf1j8VqENyvN5Ky08B-tuB@mail.gmail.com>
Message-ID: <1301325268.9164.786.camel@localhost.localdomain>


On Sun, Mar 27, 2011 at 8:57 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
>         
>         On Mar 23, 2011, at 9:34 PM, Glyph Lefkowitz wrote:
>         
>         > <http://twistedmatrix.com/~glyph/sphinx-preview-11.0pre1/>
>         
>         
>         Anyone have comments about this?  With all the recent
>         excitement about the docs, I thought there would be a much
>         more active thread here!
>         

Looks great, the world needs this.


To make it even better:

Search caption ("Quick Search") should be "Search TwistedMatrix.com" or
"Search Twisted Documentation" or whatever the search space is/will be.


The different amounts of detail and subdivisions among TOC topics are a
little clumsy with the heirarchical UI.  For example, Twisted IM
Documentation seems to have an extra layer of indirection.  Would an
expando menu of some sort be possible?  It seems a little rough to go
through a series of menu pages.  


"This Page / Show Source" (on rhs menu) could be confusing in context
(it's not the Twisted source).  Is this for Sphinx debugging?   It
doesn't seem useful to someone seeking Twisted docs. 


Should Lore docs be removed from the menu? - this will be confusing.


"index" link goes to empty page



>         
>         Thoughts about whether we should link it from the front page?
>         
>         

Definitely link it.


hth,

George
-- 
George Pauly
Ring Development
www.ringdevelopment.com




From aljosa.mohorovic at gmail.com  Mon Mar 28 09:29:38 2011
From: aljosa.mohorovic at gmail.com (=?UTF-8?B?QWxqb8WhYSBNb2hvcm92acSH?=)
Date: Mon, 28 Mar 2011 17:29:38 +0200
Subject: [Twisted-Python] running several services from a single app
Message-ID: <AANLkTik0vHzVm+XLEuM=ueuNqBK4-0ZuMNN-nSuaXtmo@mail.gmail.com>

is it possible to run several services from a single app?
i currently have a few services/apps and would like to put them all
into a single app so i can use cx_freeze to create a single exe file
for windows to allow easy testing.

Aljosa

maybe something like this:
--------------------------------------------------------
factory1 = protocol.ServerFactory()
factory1.protocol = Protocol1
application1 = service.Application("Server1")
internet.TCPServer(8000, factory1).setServiceParent(application1)

factory2 = protocol.ServerFactory()
factory2.protocol = Protocol2
application2 = service.Application("Server2")
internet.TCPServer(9000, factory2).setServiceParent(application2)

reactor.listenTCP(8000, factory1)
reactor.listenTCP(9000, factory2)

reactor.run()
--------------------------------------------------------



From jstpierre at mecheye.net  Mon Mar 28 11:20:32 2011
From: jstpierre at mecheye.net (Jasper St. Pierre)
Date: Mon, 28 Mar 2011 13:20:32 -0400
Subject: [Twisted-Python] prerelease preview predocumentation
In-Reply-To: <AANLkTi=gOVS8PDvsH+SAL8d57oxP292FJJ+9fs0JJdZT@mail.gmail.com>
References: <C9AA782C-1AC0-423A-9146-278E914D53D5@twistedmatrix.com>
	<CED11EEE-3486-47FD-936C-DE453D26D1F9@twistedmatrix.com>
	<20110328020950.GE5510@boombah.thristian.org>
	<C7D5523D-3B22-41EC-BE59-A7C48264D362@twistedmatrix.com>
	<AANLkTi=gOVS8PDvsH+SAL8d57oxP292FJJ+9fs0JJdZT@mail.gmail.com>
Message-ID: <AANLkTim6w7oeap1OWZRke33u=he7RO-j134chjvM8hnW@mail.gmail.com>

Seems to be the Trac version of jQuery overwriting the one that docutils has
custom stuff in.

On Mon, Mar 28, 2011 at 9:35 AM, Kevin Horn <kevin.horn at gmail.com> wrote:

>
>
> On Sun, Mar 27, 2011 at 9:19 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:
>
>> On Mar 27, 2011, at 10:09 PM, Tim Allen wrote:
>>
>> I'm not sure if it's not finished yet, or I did something stupid, but
>> I tried to test out the search system by picking a word I figured would
>> be common in Twisted code ("addCallbacks"), and... got no hits. Even
>> "Twisted" gets no hits. At least, I assume that's what's going on;
>> there's no "No results found" message, but no results are displayed.
>>
>>
>> Hrm, this does indeed seem to be broken, but I have no idea why.  And this
>> is exactly the sort of thing I had hoped to spot before we decide to go
>> completely live with it :).  I hope Kevin will chime in.
>>
>>
> I'm not sure what's up with that.  I had seen something similar before
> (like a year ago), but thought it had been resolved with a bump in the
> Sphinx version.  Or maybe it's a new problem completely...not sure.
>
> I'll check into when I get a chance.  Probably won't be until at least
> tomorrow though, or maybe Wednesday.  It's gonna be a busy week for me
> (again...sigh) .
>
> Kevin Horn
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110328/0117d603/attachment.html>

From dialtone at gmail.com  Mon Mar 28 11:42:48 2011
From: dialtone at gmail.com (Valentino Volonghi)
Date: Mon, 28 Mar 2011 10:42:48 -0700
Subject: [Twisted-Python] EuroPython Call for Presentations
Message-ID: <1459484E-B609-4813-A231-D333B23012FC@gmail.com>

Introduction
------------------------
We're looking for proposals on every aspects of Python: programming from novice to advanced levels, applications and frameworks, or how you have been involved in introducing Python into your organisation.

**First-time speakers are especially welcome**; EuroPython is a community conference and we are eager to hear about your experience. If you have friends or colleagues who have something valuable to contribute, twist their arms to tell us about it!

Please also forward this Call for Papers to anyone that you feel may be interested.

Important Deadlines
-------------------
 - April 6th, 2011: End of Call for Presentations.
 - April 11th, 2011: Start of community voting of talks.
 - April 17th, 2011: End of community voting of talks.
 - June 20th, 2011: EuroPython Conference Keynote Day.

The end of the Call for Presentations is approaching. There is now only a little more than 1 week left before we stop accepting new presentation proposals for EuroPython. Don't wait the last minute to formalize a proposal for a presentation!

Presenting at EuroPython
------------------------
We will accept a broad range of presentations, from reports on academic and commercial projects to tutorials and case studies. As long as the presentation is interesting and potentially useful to the Python community, it will be considered for inclusion in the programme.

Can you show the conference-goers something new and useful? Can you show attendees how to: use a module? Explore a Python language feature? Package an application? If so, consider submitting a talk.

Unfortunately, since EuroPython is a not-for-profit community conference, it is not possible to reward speakers (but what price on glory!). However, **speakers will benefit from a reduced conference fee**.

Talks and hands-on trainings
----------------------------
There are two different kind of presentations that you can give as a speaker at EuroPython:

 * **Regular talk**. These are standard "talk with slides", allocated in slots of 45, 60 or 90 minutes, depending on your preference and scheduling constraints. A Q&A session is held at the end of the talk.
 * **Hands-on training**. These are advanced training sessions for a smaller audience (10-20 people), to dive into the subject with all details. These sessions are 4-hours long, and audience will be strongly encouraged to bring a laptop to experiment. They should be prepared with less slides and more source code. If possible, trainers will also give a short "teaser talk" of 30 minutes the day before the training, to tease delegates into attending the training.

In the talk submission form, we assume that you intend to give a regular talk on the subject, but you will be asked if you are available for also doing a hands-on training on the very same subject.

Speakers that will give a hands-on training are rewarded with a **free entrance** to EuroPython to compensate for the longer preparation required, and might also be eligible for a speaking fee (which we cannot confirm at the moment).

Topics and goals
----------------
Specific topics for EuroPython presentations include, but are not limited to:

- Core Python
- Other implementations: Jython, IronPython, PyPy, and Stackless
- Python libraries and extensions
- Python 3.x migration
- Databases
- Documentation
- GUI Programming
- Game Programming
- Network Programming
- Open Source Python projects
- Packaging Issues
- Programming Tools
- Project Best Practices
- Embedding and Extending
- Science and Math
- Web-based Systems

Presentation goals usually are some of the following:

- Introduce audience to a new topic they are unaware of
- Introduce audience to new developments on a well-known topic
- Show audience real-world usage scenarios for a specific topic (case study)
- Dig into advanced and relatively-unknown details on a topic
- Compare different options in the market on a topic

Inappropriate language and imagery
----------------------------------

EuroPython strongly believes in building a truly diverse community, and fully supports the official Python diversity statement[1]. Given a trail of negative experiences at previous tech conferences, all partecipants will be asked to agree to a code of conduct[2] that explicitly bans verbal and physical harassment at the conference, including talks.

Speakers are thus required to avoid any kind of sexual, racist, or religious language or imagery in the talks, to avoid offending a diverse group that might be under-represented at the conference.

Consider that EuroPython is a conference with a audience from a broad geographical area which spans countries and regions with vastly different cultures. What might be considered a "funny, inoffensive joke" in a region might be really offensive (if not even unlawful) in another. If you want to add humour, references and images to your talk, avoid any choice that might be offensive of a group which is diverse from yours.

Italian Track
-------------
Italy is home to a vibrant Python community that gathers together each year at the local PyCon Italia event (up to 400 delegates!). To acknowledge this reality in EuroPython and to encourage Italian pythoneers who suffer from the language barrier, we will hold an additional Italian track at EuroPython, containg only talks delivered in Italian.

The talk submission form lets you choose the language you want to give the talk in.

If you speak Italian and want to submit a talk for this special track, please go ahead and submit the talk title and abstract directly in Italian. If instead you are available to give the talk twice during EuroPython, in both languages, please make two different submissions for the same talk: one in Italian, and one in English.


Community-based talk voting
---------------------------
This year, for the first time in EuroPython history, the talk voting process is fully public. Every partecipant gains the right to vote for talks submitted during the Call For Papers, as soon as they commit to their presence at the conference by buying a ticket. See all the details in the talk voting[3] page.

Contacts
--------
For any further question, feel free to contact the organizers at info at pycon.it. Thank you!


[1]: http://www.python.org/community/diversity/
[2]: http://ep2011.europython.eu/code-of-conduct
[3]: http://ep2011.europython.eu/talk-voting


-- 
Valentino Volonghi aka Dialtone
Now Running MacOSX 10.6
http://www.adroll.com/




From washort at twistedmatrix.com  Mon Mar 28 11:44:53 2011
From: washort at twistedmatrix.com (Allen Short)
Date: Mon, 28 Mar 2011 10:44:53 -0700
Subject: [Twisted-Python] running several services from a single app
In-Reply-To: <AANLkTik0vHzVm+XLEuM=ueuNqBK4-0ZuMNN-nSuaXtmo@mail.gmail.com>
References: <AANLkTik0vHzVm+XLEuM=ueuNqBK4-0ZuMNN-nSuaXtmo@mail.gmail.com>
Message-ID: <AANLkTikb7+2bC6FVDQ2TXvjmxrfa9_d-j8jQUY4ad5cv@mail.gmail.com>

On Mon, Mar 28, 2011 at 8:29 AM, Aljoša Mohorović <
aljosa.mohorovic at gmail.com> wrote:

> is it possible to run several services from a single app?
> i currently have a few services/apps and would like to put them all
> into a single app so i can use cx_freeze to create a single exe file
> for windows to allow easy testing.
>
> Aljosa
>
> maybe something like this:
> --------------------------------------------------------
> factory1 = protocol.ServerFactory()
> factory1.protocol = Protocol1
> application1 = service.Application("Server1")
> internet.TCPServer(8000, factory1).setServiceParent(application1)
>
> factory2 = protocol.ServerFactory()
> factory2.protocol = Protocol2
> application2 = service.Application("Server2")
> internet.TCPServer(9000, factory2).setServiceParent(application2)
>
> reactor.listenTCP(8000, factory1)
> reactor.listenTCP(9000, factory2)
>
> reactor.run()



Get rid of 'application1' and 'application2' and just create a single one
named 'application' , delete the last three lines, and this code will work
just fine as a .tac file. You only need one call to 'Application' per
process, but you can have many services and many clients and servers in a
process.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110328/4b56e102/attachment.html>

From michaelnt at gmail.com  Mon Mar 28 11:59:15 2011
From: michaelnt at gmail.com (Michael Thompson)
Date: Mon, 28 Mar 2011 18:59:15 +0100
Subject: [Twisted-Python] running several services from a single app
In-Reply-To: <AANLkTik0vHzVm+XLEuM=ueuNqBK4-0ZuMNN-nSuaXtmo@mail.gmail.com>
References: <AANLkTik0vHzVm+XLEuM=ueuNqBK4-0ZuMNN-nSuaXtmo@mail.gmail.com>
Message-ID: <AANLkTi=QQP1=VsvtB3vTM8wnd9S6c7omEEuW2rbUNCe3@mail.gmail.com>

On 28 March 2011 16:29, Aljoša Mohorović <aljosa.mohorovic at gmail.com> wrote:
> is it possible to run several services from a single app?

yes see

http://twistedmatrix.com/documents/current/core/howto/application.html

and

http://twistedmatrix.com/documents/current/api/twisted.application.service.MultiService.html

Regards, Michael



From kevin.horn at gmail.com  Mon Mar 28 12:39:05 2011
From: kevin.horn at gmail.com (Kevin Horn)
Date: Mon, 28 Mar 2011 13:39:05 -0500
Subject: [Twisted-Python] prerelease preview predocumentation
In-Reply-To: <1301325268.9164.786.camel@localhost.localdomain>
References: <C9AA782C-1AC0-423A-9146-278E914D53D5@twistedmatrix.com>
	<CED11EEE-3486-47FD-936C-DE453D26D1F9@twistedmatrix.com>
	<AANLkTi=F3ocwUx1WEeVs8dgf1j8VqENyvN5Ky08B-tuB@mail.gmail.com>
	<1301325268.9164.786.camel@localhost.localdomain>
Message-ID: <AANLkTinREr0avM+2O2rMWtZH51aYvtY9a4X-dcD1TSAL@mail.gmail.com>

On Mon, Mar 28, 2011 at 10:14 AM, George Pauly
<george at ringdevelopment.com>wrote:

>
> On Sun, Mar 27, 2011 at 8:57 PM, Glyph Lefkowitz
> <glyph at twistedmatrix.com> wrote:
> >
> >         On Mar 23, 2011, at 9:34 PM, Glyph Lefkowitz wrote:
> >
> >         > <http://twistedmatrix.com/~glyph/sphinx-preview-11.0pre1/>
> >
> >
> >         Anyone have comments about this?  With all the recent
> >         excitement about the docs, I thought there would be a much
> >         more active thread here!
> >
>
> Looks great, the world needs this.
>
>
> To make it even better:
>
> Search caption ("Quick Search") should be "Search TwistedMatrix.com" or
> "Search Twisted Documentation" or whatever the search space is/will be.
>

Noted.  This is a good idea.


> The different amounts of detail and subdivisions among TOC topics are a
> little clumsy with the heirarchical UI.  For example, Twisted IM
> Documentation seems to have an extra layer of indirection.  Would an
> expando menu of some sort be possible?  It seems a little rough to go
> through a series of menu pages.
>

I'm not sure exactly what you mean here.  I agree that the naming of
documents is a bit confusing, and intend to address that following the
actual conversion.  This has to do with the fact that in some places Sphinx
is picking up the actual name of the document, and in other places it's
picking up the link text from what was previously an <a> tag in the Lore
sources.  Also some documents are just poorly named or have outdated names.
(e.g. Twisted IM rather than Twisted Words).

Can you clarify what you meant by "an extra layer of indirection?"

I think an "expando" menu is a bad idea, assuming I understand what you mean
here.  Or rather, I think that there are some structural issues which need
to be solved, and an "expando" menu wouldn't solve them.


> "This Page / Show Source" (on rhs menu) could be confusing in context
> (it's not the Twisted source).  Is this for Sphinx debugging?   It
> doesn't seem useful to someone seeking Twisted docs.
>

This is easily removed with a config setting in the Sphinx config file,
though I find it helpful when writing docs.  Most Sphinx sites seem to leave
it in, though if others find it confusing we can remove it.

Alternatively, perhaps we could just change the link text to clarify it a
bit. Something like "show Sphinx source?" "Show ReST source?"


> Should Lore docs be removed from the menu? - this will be confusing.
>

The Lore docs will disappear when the Lore docs (and Lore itself) are
removed from trunk.


> "index" link goes to empty page
>

The index is generated by default mostly from docstrings.  Twisted is not
currently using Sphinx's docstring utilities, as all of Twisted's docstrings
use epydoc markup, rather than Restructured Text.

There are several ways we can go with this, but I consider it low priority,
since the current docs have nothing like an index at present.


> >
> >         Thoughts about whether we should link it from the front page?
> >
> >
>
> Definitely link it.
>
>
> hth,
>
> George
> --
> George Pauly
> Ring Development
> www.ringdevelopment.com
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110328/ef0050f8/attachment.html>

From jstpierre at mecheye.net  Mon Mar 28 19:14:04 2011
From: jstpierre at mecheye.net (Jasper St. Pierre)
Date: Mon, 28 Mar 2011 21:14:04 -0400
Subject: [Twisted-Python] Deferred documentation.
In-Reply-To: <BANLkTinf2CTo-xaowDeAh_9T79BG_dQzMA@mail.gmail.com>
References: <AANLkTik0uA2NAvYjFpRqDk5XDNsgoj073nfmjF1tWHcP@mail.gmail.com>
	<AANLkTinemJ-Rdf1EC+0VDgxnvixpe5dvxCdGP5_kZA4m@mail.gmail.com>
	<B68B4F4A-A8D5-4D23-87FC-9D0477A4BA65@twistedmatrix.com>
	<AANLkTikyzfT=tNZP5KpB30F-UxBA6A_bN3E4gPK1vHPp@mail.gmail.com>
	<4C606D48-E571-46E9-B621-E9DE21E76210@twistedmatrix.com>
	<BANLkTinf2CTo-xaowDeAh_9T79BG_dQzMA@mail.gmail.com>
Message-ID: <BANLkTimHJNeyyREekMa2t_fKutpP0eOi5Q@mail.gmail.com>

I'm tired. Link dump:

http://magcius.mecheye.net/twisted/DeferHowTo-Fixup.html
http://magcius.mecheye.net/twisted/DeferHowTo-Fixup.lore

oldies are at

http://magcius.mecheye.net/twisted/DeferHowTo-Fixup-v1.html
http://magcius.mecheye.net/twisted/DeferHowTo-Fixup-v1.lore

comments, etc.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110328/a1f8943d/attachment.html>

From jstpierre at mecheye.net  Mon Mar 28 19:17:28 2011
From: jstpierre at mecheye.net (Jasper St. Pierre)
Date: Mon, 28 Mar 2011 21:17:28 -0400
Subject: [Twisted-Python] Deferred documentation.
In-Reply-To: <BANLkTimHJNeyyREekMa2t_fKutpP0eOi5Q@mail.gmail.com>
References: <AANLkTik0uA2NAvYjFpRqDk5XDNsgoj073nfmjF1tWHcP@mail.gmail.com>
	<AANLkTinemJ-Rdf1EC+0VDgxnvixpe5dvxCdGP5_kZA4m@mail.gmail.com>
	<B68B4F4A-A8D5-4D23-87FC-9D0477A4BA65@twistedmatrix.com>
	<AANLkTikyzfT=tNZP5KpB30F-UxBA6A_bN3E4gPK1vHPp@mail.gmail.com>
	<4C606D48-E571-46E9-B621-E9DE21E76210@twistedmatrix.com>
	<BANLkTinf2CTo-xaowDeAh_9T79BG_dQzMA@mail.gmail.com>
	<BANLkTimHJNeyyREekMa2t_fKutpP0eOi5Q@mail.gmail.com>
Message-ID: <BANLkTim0Wei04zhYQU3B9sfuSiq5s07k6A@mail.gmail.com>

I'm really tired... the 'demo server' program is at

http://p.mecheye.net/deferred-server.py/0

I coded it up in like 10 minutes. Definition of quality right there, yo.

Hopefully no more noise tonight.

On Mon, Mar 28, 2011 at 9:14 PM, Jasper St. Pierre <jstpierre at mecheye.net>wrote:

> I'm tired. Link dump:
>
>
> http://magcius.mecheye.net/twisted/DeferHowTo-Fixup.html
> http://magcius.mecheye.net/twisted/DeferHowTo-Fixup.lore
>
> oldies are at
>
> http://magcius.mecheye.net/twisted/DeferHowTo-Fixup-v1.html
> http://magcius.mecheye.net/twisted/DeferHowTo-Fixup-v1.lore
>
> comments, etc.
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110328/d74c6d36/attachment.html>

From albert.brandl at weiermayer.com  Tue Mar 29 01:10:21 2011
From: albert.brandl at weiermayer.com (Albert Brandl)
Date: Tue, 29 Mar 2011 09:10:21 +0200
Subject: [Twisted-Python] prerelease preview predocumentation
In-Reply-To: <AANLkTimWxHEnG_VtRUu+CU4N-=MbaHo9v1SP180513=u@mail.gmail.com>
References: <C9AA782C-1AC0-423A-9146-278E914D53D5@twistedmatrix.com>
	<CED11EEE-3486-47FD-936C-DE453D26D1F9@twistedmatrix.com>
	<AANLkTimWxHEnG_VtRUu+CU4N-=MbaHo9v1SP180513=u@mail.gmail.com>
Message-ID: <20110329071021.GA2194@weiermayer.com>

On Mon, Mar 28, 2011 at 09:27:04AM -0400, Tom Davis wrote:
> 
> It's great to have everything indexed on one page with easy drill-down 
> into specific sections. It becomes really obvious where the hierarchy 
> can be optimized and how we can logically go about breaking up the 
> various sections.

This is right. But I was confused by the fact that the first-level items 
in the list ("Twisted Conch Documentation", "Twisted Core Documentation", 
etc.) link to pages that _again_ present links to the second-level items.
Adding to my confusion was the fact that the links on the main page have
different names from the ones on the subpages.

Best regards,
-- 
Albert Brandl
Weiermayer Solutions GmbH      | Abteistraße 12, A-4813 Altmünster
phone: +43 (0) 720 70 30 14    | fax: +43 (0) 7612 20 3 56
web: http://www.weiermayer.com



From aljosa.mohorovic at gmail.com  Tue Mar 29 01:46:11 2011
From: aljosa.mohorovic at gmail.com (=?UTF-8?B?QWxqb8WhYSBNb2hvcm92acSH?=)
Date: Tue, 29 Mar 2011 09:46:11 +0200
Subject: [Twisted-Python] running several services from a single app
In-Reply-To: <AANLkTikb7+2bC6FVDQ2TXvjmxrfa9_d-j8jQUY4ad5cv@mail.gmail.com>
References: <AANLkTik0vHzVm+XLEuM=ueuNqBK4-0ZuMNN-nSuaXtmo@mail.gmail.com>
	<AANLkTikb7+2bC6FVDQ2TXvjmxrfa9_d-j8jQUY4ad5cv@mail.gmail.com>
Message-ID: <AANLkTi=_SPVDpJVx2rtx+9DmWiCTD69N4g_3_RP5OrMX@mail.gmail.com>

On Mon, Mar 28, 2011 at 7:44 PM, Allen Short <washort at twistedmatrix.com> wrote:
> Get rid of 'application1' and 'application2' and just create a single one
> named 'application' , delete the last three lines, and this code will work
> just fine as a .tac file. You only need one call to 'Application' per

is it possible to setup this without .tac file?
i don't know howto create an exe file using cx_freeze from .tac file.

is there a way to tell reactor to run application and services defined
so i can skip .tac file and just execute python file?
maybe something similar to this:
----------------------------------------
application = service.Application("Services")

factory1 = protocol.ServerFactory()
factory1.protocol = Protocol1
internet.TCPServer(8000, factory1).setServiceParent(application)

factory2 = protocol.ServerFactory()
factory2.protocol = Protocol2
internet.TCPServer(9000, factory2).setServiceParent(application)

# howto make reactor do something like this:
reactor.run(application)
----------------------------------------



From dev at vokoda.com  Tue Mar 29 06:56:26 2011
From: dev at vokoda.com (Peter Hogg)
Date: Tue, 29 Mar 2011 13:56:26 +0100
Subject: [Twisted-Python] Deferred documentation.
In-Reply-To: <BANLkTim0Wei04zhYQU3B9sfuSiq5s07k6A@mail.gmail.com>
References: <AANLkTik0uA2NAvYjFpRqDk5XDNsgoj073nfmjF1tWHcP@mail.gmail.com>	<AANLkTinemJ-Rdf1EC+0VDgxnvixpe5dvxCdGP5_kZA4m@mail.gmail.com>	<B68B4F4A-A8D5-4D23-87FC-9D0477A4BA65@twistedmatrix.com>	<AANLkTikyzfT=tNZP5KpB30F-UxBA6A_bN3E4gPK1vHPp@mail.gmail.com>	<4C606D48-E571-46E9-B621-E9DE21E76210@twistedmatrix.com>	<BANLkTinf2CTo-xaowDeAh_9T79BG_dQzMA@mail.gmail.com>	<BANLkTimHJNeyyREekMa2t_fKutpP0eOi5Q@mail.gmail.com>
	<BANLkTim0Wei04zhYQU3B9sfuSiq5s07k6A@mail.gmail.com>
Message-ID: <4D91D6FA.80509@vokoda.com>

I haven't been following the thread, but just wanted to mention 
something that caught me out when I was learning to use deferreds.

Both the old deferred documentation and your fix-up fail to mention 
addCallbacks() until near the end, when in practice I find 
addCallbacks() to be much more useful than addCallback(). The diagram 
near the top demonstrating the deferred process also implies the use of 
addCallbacks(), even though prior to this only addCallback() and 
addErrback() have been mentioned. This confused me into thinking a 
consecutive addCallback().addErrback() would register a callback and an 
errback at the same point in the processing chain.

Apart from this point I found the old documentation very clear. If you 
really want the idiots guide I think you need animated diagrams, or 
something, but I don't see that happening.

Rgds,
vokoda

Jasper St. Pierre wrote:
> Glyph Lefkowitz 



From jstpierre at mecheye.net  Tue Mar 29 07:24:27 2011
From: jstpierre at mecheye.net (Jasper St. Pierre)
Date: Tue, 29 Mar 2011 09:24:27 -0400
Subject: [Twisted-Python] Deferred documentation.
In-Reply-To: <4D91D6FA.80509@vokoda.com>
References: <AANLkTik0uA2NAvYjFpRqDk5XDNsgoj073nfmjF1tWHcP@mail.gmail.com>
	<AANLkTinemJ-Rdf1EC+0VDgxnvixpe5dvxCdGP5_kZA4m@mail.gmail.com>
	<B68B4F4A-A8D5-4D23-87FC-9D0477A4BA65@twistedmatrix.com>
	<AANLkTikyzfT=tNZP5KpB30F-UxBA6A_bN3E4gPK1vHPp@mail.gmail.com>
	<4C606D48-E571-46E9-B621-E9DE21E76210@twistedmatrix.com>
	<BANLkTinf2CTo-xaowDeAh_9T79BG_dQzMA@mail.gmail.com>
	<BANLkTimHJNeyyREekMa2t_fKutpP0eOi5Q@mail.gmail.com>
	<BANLkTim0Wei04zhYQU3B9sfuSiq5s07k6A@mail.gmail.com>
	<4D91D6FA.80509@vokoda.com>
Message-ID: <BANLkTimYXoKioCQbSCxk=8_z+He1_Uof8w@mail.gmail.com>

Good catch, I really should mention that...

On Tue, Mar 29, 2011 at 8:56 AM, Peter Hogg <dev at vokoda.com> wrote:

> I haven't been following the thread, but just wanted to mention
> something that caught me out when I was learning to use deferreds.
>
> Both the old deferred documentation and your fix-up fail to mention
> addCallbacks() until near the end, when in practice I find
> addCallbacks() to be much more useful than addCallback(). The diagram
> near the top demonstrating the deferred process also implies the use of
> addCallbacks(), even though prior to this only addCallback() and
> addErrback() have been mentioned. This confused me into thinking a
> consecutive addCallback().addErrback() would register a callback and an
> errback at the same point in the processing chain.
>
> Apart from this point I found the old documentation very clear. If you
> really want the idiots guide I think you need animated diagrams, or
> something, but I don't see that happening.
>
> Rgds,
> vokoda
>
> Jasper St. Pierre wrote:
> > Glyph Lefkowitz
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110329/418f387b/attachment.html>

From radix at twistedmatrix.com  Tue Mar 29 09:08:14 2011
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 29 Mar 2011 10:08:14 -0500
Subject: [Twisted-Python] Deferred documentation.
In-Reply-To: <4D91D6FA.80509@vokoda.com>
References: <AANLkTik0uA2NAvYjFpRqDk5XDNsgoj073nfmjF1tWHcP@mail.gmail.com>
	<AANLkTinemJ-Rdf1EC+0VDgxnvixpe5dvxCdGP5_kZA4m@mail.gmail.com>
	<B68B4F4A-A8D5-4D23-87FC-9D0477A4BA65@twistedmatrix.com>
	<AANLkTikyzfT=tNZP5KpB30F-UxBA6A_bN3E4gPK1vHPp@mail.gmail.com>
	<4C606D48-E571-46E9-B621-E9DE21E76210@twistedmatrix.com>
	<BANLkTinf2CTo-xaowDeAh_9T79BG_dQzMA@mail.gmail.com>
	<BANLkTimHJNeyyREekMa2t_fKutpP0eOi5Q@mail.gmail.com>
	<BANLkTim0Wei04zhYQU3B9sfuSiq5s07k6A@mail.gmail.com>
	<4D91D6FA.80509@vokoda.com>
Message-ID: <AANLkTi=7Pb_h5qKbgdX3PPCx=bj0cbYZiu6Ntj4GD5yz@mail.gmail.com>

On Tue, Mar 29, 2011 at 7:56 AM, Peter Hogg <dev at vokoda.com> wrote:

> I haven't been following the thread, but just wanted to mention
> something that caught me out when I was learning to use deferreds.
>
> Both the old deferred documentation and your fix-up fail to mention
> addCallbacks() until near the end, when in practice I find
> addCallbacks() to be much more useful than addCallback(). The diagram
> near the top demonstrating the deferred process also implies the use of
> addCallbacks(), even though prior to this only addCallback() and
> addErrback() have been mentioned. This confused me into thinking a
> consecutive addCallback().addErrback() would register a callback and an
> errback at the same point in the processing chain.
>
>

I probably use addCallbacks once for every 30-100 addCallback or addErrback
calls I do (counted by lines of code, not times they're executed). But
that's just an off-the-cuff estimate.

-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110329/df9ec259/attachment.html>

From kevin.horn at gmail.com  Tue Mar 29 09:22:08 2011
From: kevin.horn at gmail.com (Kevin Horn)
Date: Tue, 29 Mar 2011 10:22:08 -0500
Subject: [Twisted-Python] running several services from a single app
In-Reply-To: <AANLkTi=_SPVDpJVx2rtx+9DmWiCTD69N4g_3_RP5OrMX@mail.gmail.com>
References: <AANLkTik0vHzVm+XLEuM=ueuNqBK4-0ZuMNN-nSuaXtmo@mail.gmail.com>
	<AANLkTikb7+2bC6FVDQ2TXvjmxrfa9_d-j8jQUY4ad5cv@mail.gmail.com>
	<AANLkTi=_SPVDpJVx2rtx+9DmWiCTD69N4g_3_RP5OrMX@mail.gmail.com>
Message-ID: <AANLkTi=T+kbASO9Og6hgB7FXGg2TWOnQgFbAqAHW9fYv@mail.gmail.com>

On Tue, Mar 29, 2011 at 2:46 AM, Aljoša Mohorović <
aljosa.mohorovic at gmail.com> wrote:

> On Mon, Mar 28, 2011 at 7:44 PM, Allen Short <washort at twistedmatrix.com>
> wrote:
> > Get rid of 'application1' and 'application2' and just create a single one
> > named 'application' , delete the last three lines, and this code will
> work
> > just fine as a .tac file. You only need one call to 'Application' per
>
> is it possible to setup this without .tac file?
> i don't know howto create an exe file using cx_freeze from .tac file.
>
> is there a way to tell reactor to run application and services defined
> so i can skip .tac file and just execute python file?
> maybe something similar to this:
> ----------------------------------------
> application = service.Application("Services")
>
> factory1 = protocol.ServerFactory()
> factory1.protocol = Protocol1
> internet.TCPServer(8000, factory1).setServiceParent(application)
>
> factory2 = protocol.ServerFactory()
> factory2.protocol = Protocol2
> internet.TCPServer(9000, factory2).setServiceParent(application)
>
> # howto make reactor do something like this:
> reactor.run(application)
> ----------------------------------------
>
>
Sadly it's undocumented, but you're probably looking for:
http://twistedmatrix.com/documents/current/api/twisted.application.app.html#startApplication

The only examples I can find of it's use are by people who want to start a
"tac" type application as a WinNT Service, but I think it would work for
your purposes as well.

Here's an example:
http://foobar.lu/wp/2007/06/27/runnning-a-twisted-application-as-windows-service/

You can see the application object is created as normal (though in the
example it happens in a different file and is imported), then
startApplication is called, then reactor.run().

Good Luck!

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110329/f9a774de/attachment.html>

From screwtape at froup.com  Tue Mar 29 16:56:51 2011
From: screwtape at froup.com (Tim Allen)
Date: Wed, 30 Mar 2011 09:56:51 +1100
Subject: [Twisted-Python] running several services from a single app
In-Reply-To: <AANLkTi=_SPVDpJVx2rtx+9DmWiCTD69N4g_3_RP5OrMX@mail.gmail.com>
References: <AANLkTik0vHzVm+XLEuM=ueuNqBK4-0ZuMNN-nSuaXtmo@mail.gmail.com>
	<AANLkTikb7+2bC6FVDQ2TXvjmxrfa9_d-j8jQUY4ad5cv@mail.gmail.com>
	<AANLkTi=_SPVDpJVx2rtx+9DmWiCTD69N4g_3_RP5OrMX@mail.gmail.com>
Message-ID: <20110329225651.GF5510@boombah.thristian.org>

On Tue, Mar 29, 2011 at 09:46:11AM +0200, Aljoša Mohorović wrote:
> is there a way to tell reactor to run application and services defined
> so i can skip .tac file and just execute python file?
> maybe something similar to this:
> ----------------------------------------
> application = service.Application("Services")
> 
> factory1 = protocol.ServerFactory()
> factory1.protocol = Protocol1
> internet.TCPServer(8000, factory1).setServiceParent(application)
> 
> factory2 = protocol.ServerFactory()
> factory2.protocol = Protocol2
> internet.TCPServer(9000, factory2).setServiceParent(application)
> 
> # howto make reactor do something like this:
> reactor.run(application)
> ----------------------------------------

It's not clear from your message whether you're using
internet.TCPServer() in your actual production code, or if that's just
something you picked to make a simple example for the mailing-list.

If you really are using internet.TCPServer(), you can just skip the
Application object entirely, and call reactor.listenTCP() instead of
internet.TCPServer(), then reactor.run() at the bottom.

If you've written your own Server or Application subclass that you want
to run, Kevin Horn's answer is probably the one you want.

Tim.



From mithrandi at mithrandi.net  Wed Mar 30 01:55:19 2011
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Wed, 30 Mar 2011 09:55:19 +0200
Subject: [Twisted-Python] Deferred documentation.
In-Reply-To: <AANLkTi=7Pb_h5qKbgdX3PPCx=bj0cbYZiu6Ntj4GD5yz@mail.gmail.com>
References: <AANLkTik0uA2NAvYjFpRqDk5XDNsgoj073nfmjF1tWHcP@mail.gmail.com>
	<AANLkTinemJ-Rdf1EC+0VDgxnvixpe5dvxCdGP5_kZA4m@mail.gmail.com>
	<B68B4F4A-A8D5-4D23-87FC-9D0477A4BA65@twistedmatrix.com>
	<AANLkTikyzfT=tNZP5KpB30F-UxBA6A_bN3E4gPK1vHPp@mail.gmail.com>
	<4C606D48-E571-46E9-B621-E9DE21E76210@twistedmatrix.com>
	<BANLkTinf2CTo-xaowDeAh_9T79BG_dQzMA@mail.gmail.com>
	<BANLkTimHJNeyyREekMa2t_fKutpP0eOi5Q@mail.gmail.com>
	<BANLkTim0Wei04zhYQU3B9sfuSiq5s07k6A@mail.gmail.com>
	<4D91D6FA.80509@vokoda.com>
	<AANLkTi=7Pb_h5qKbgdX3PPCx=bj0cbYZiu6Ntj4GD5yz@mail.gmail.com>
Message-ID: <AANLkTiktUNuDN_gCeROfNr6eAG-q2FeEqJ_L19OnFO3_@mail.gmail.com>

On Tue, Mar 29, 2011 at 5:08 PM, Christopher Armstrong
<radix at twistedmatrix.com> wrote:
> I probably use addCallbacks once for every 30-100 addCallback or addErrback
> calls I do (counted by lines of code, not times they're executed). But
> that's just an off-the-cuff estimate.

For interest's sake, I just ran the numbers on my largest codebase (a
proprietary application, sorry); ratio of addCallbacks to (addCallback
+ addErrback) is around 0.05.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar



From andrew at bemusement.org  Wed Mar 30 02:39:50 2011
From: andrew at bemusement.org (Andrew Bennetts)
Date: Wed, 30 Mar 2011 19:39:50 +1100
Subject: [Twisted-Python] Failure is O(state) vs Exception
In-Reply-To: <4D90A52C.6090401@arbash-meinel.com>
References: <4D909ED2.1010300@arbash-meinel.com>
	<AANLkTindhXEEwnLG-nO7dFCxd30hjqQ=iDEo_p2RT0Ks@mail.gmail.com>
	<4D90A52C.6090401@arbash-meinel.com>
Message-ID: <20110330083950.GD2777@aihal.home.puzzling.org>

John Arbash Meinel wrote:
[…]
> > Just for the record, changing cleanFailure to not do its operation is
> > likely to lead to big memory leaks. The second thing you did, setting
> > self.tb to None, makes more sense to speed things up.
> 
> Right. I agree that it is a better solution. I was wondering about
> having a whitelist of Exception classes that aren't considered
> interesting enough to keep a traceback.

I've filed <http://twistedmatrix.com/trac/ticket/5011> about this issue,
and I have a patch that takes an alternative approach: don't capture
tracebacks when Deferred callbacks raise exceptions unless
defer.setDebugging(True) has been called.

Another possibility might be to stop Failure from capturing all the
frame details (i.e. the locals and globals) by default (or at least when
invoked by Deferred._runCallbacks), as that's probably the bulk of the
expense and would be very rarely used.

-Andrew.




From john at arbash-meinel.com  Wed Mar 30 02:50:40 2011
From: john at arbash-meinel.com (John Arbash Meinel)
Date: Wed, 30 Mar 2011 10:50:40 +0200
Subject: [Twisted-Python] Failure is O(state) vs Exception
In-Reply-To: <20110330083950.GD2777@aihal.home.puzzling.org>
References: <4D909ED2.1010300@arbash-meinel.com>	<AANLkTindhXEEwnLG-nO7dFCxd30hjqQ=iDEo_p2RT0Ks@mail.gmail.com>	<4D90A52C.6090401@arbash-meinel.com>
	<20110330083950.GD2777@aihal.home.puzzling.org>
Message-ID: <4D92EEE0.2050305@arbash-meinel.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On 03/30/2011 10:39 AM, Andrew Bennetts wrote:
> John Arbash Meinel wrote:
> […]
>>> Just for the record, changing cleanFailure to not do its operation is
>>> likely to lead to big memory leaks. The second thing you did, setting
>>> self.tb to None, makes more sense to speed things up.
>>
>> Right. I agree that it is a better solution. I was wondering about
>> having a whitelist of Exception classes that aren't considered
>> interesting enough to keep a traceback.
> 
> I've filed <http://twistedmatrix.com/trac/ticket/5011> about this issue,
> and I have a patch that takes an alternative approach: don't capture
> tracebacks when Deferred callbacks raise exceptions unless
> defer.setDebugging(True) has been called.
> 
> Another possibility might be to stop Failure from capturing all the
> frame details (i.e. the locals and globals) by default (or at least when
> invoked by Deferred._runCallbacks), as that's probably the bulk of the
> expense and would be very rarely used.
> 
> -Andrew.

I think walking the frames and copying the dicts is also expensive. That
is what the bug you linked to me was about. (First, walking everything
and using __dict__.copy() was a bit expensive, and second that the
safe_repr() calls were turning 1GB strings into a new 1GB+ string.)

The one other step that I think we need, is that 'maybeDeferred' also
always traps into a Failure object, and we'd want that to check
Deferred.debug first.

I do wonder if Failure should just be checking Deferred.debug before
automatically including a traceback. I'm not really sure about logical
layering of twisted modules, though. Certainly 'twisted.python.failure'
seems a lower layer than 'twisted.internet.defer'.

John
=:->
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.10 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org/

iEYEARECAAYFAk2S7uAACgkQJdeBCYSNAAPS9ACfdGmt9td2jqOFDZYY6mJy/6DN
UiMAnRF0w9pID0WMP0MMGwh9LSQN9RqM
=g3j7
-----END PGP SIGNATURE-----



From andrew at bemusement.org  Wed Mar 30 03:14:11 2011
From: andrew at bemusement.org (Andrew Bennetts)
Date: Wed, 30 Mar 2011 20:14:11 +1100
Subject: [Twisted-Python] Failure is O(state) vs Exception
In-Reply-To: <4D92EEE0.2050305@arbash-meinel.com>
References: <4D909ED2.1010300@arbash-meinel.com>
	<AANLkTindhXEEwnLG-nO7dFCxd30hjqQ=iDEo_p2RT0Ks@mail.gmail.com>
	<4D90A52C.6090401@arbash-meinel.com>
	<20110330083950.GD2777@aihal.home.puzzling.org>
	<4D92EEE0.2050305@arbash-meinel.com>
Message-ID: <20110330091411.GE2777@aihal.home.puzzling.org>

John Arbash Meinel wrote:
[…]
> I think walking the frames and copying the dicts is also expensive. That
> is what the bug you linked to me was about. (First, walking everything
> and using __dict__.copy() was a bit expensive, and second that the
> safe_repr() calls were turning 1GB strings into a new 1GB+ string.)

Well, if we take my proposal to not (by default at least) capture the
frames in the first place this isn't an issue is it?  The only other
copy done in Failure is the copy of self.__dict__ in __getstate__, which
is just a shallow copy of one dict, so fairly cheap.

> The one other step that I think we need, is that 'maybeDeferred' also
> always traps into a Failure object, and we'd want that to check
> Deferred.debug first.

Good point!

> I do wonder if Failure should just be checking Deferred.debug before
> automatically including a traceback. I'm not really sure about logical
> layering of twisted modules, though. Certainly 'twisted.python.failure'
> seems a lower layer than 'twisted.internet.defer'.

Yes, checking Deferred.debug in twisted.python.failure would be bad
layering.  twisted.internet.defer only invokes Failure in a couple of
places, so it's not so onerous to make sure it invokes it to avoid
capturing tracebacks unless it means to.

That said, it might be a good idea to change Failure to *not* capture
tracebacks by default when invoked as Failure().  Perhaps add a
setDebugging toggle to twisted.python.failure too.  If an explicit
traceback is passed to the constructor it would still be captured, and
perhaps provide an alternative constructor for the current “capture
everything” behaviour (perhaps via a new optional flag for __init__,
perhaps via a new name DetailedFailure(), perhaps via a classmethod
except failure is not a new-style class and can't be one without
changing to subclass Exception…) for the rare cases when people want
that.  It's a pity you can't just use Failure(*sys.exc_info()) because
the parameters are in the wrong order.

Certainly the current behaviour of doing a costly capturing of traceback
and frame contents seems like the wrong default, given how rarely I've
seen anyone use Failure.printDetailedTraceback.

-Andrew.




From radix at twistedmatrix.com  Wed Mar 30 09:09:06 2011
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 30 Mar 2011 10:09:06 -0500
Subject: [Twisted-Python] Deferred documentation.
In-Reply-To: <AANLkTiktUNuDN_gCeROfNr6eAG-q2FeEqJ_L19OnFO3_@mail.gmail.com>
References: <AANLkTik0uA2NAvYjFpRqDk5XDNsgoj073nfmjF1tWHcP@mail.gmail.com>
	<AANLkTinemJ-Rdf1EC+0VDgxnvixpe5dvxCdGP5_kZA4m@mail.gmail.com>
	<B68B4F4A-A8D5-4D23-87FC-9D0477A4BA65@twistedmatrix.com>
	<AANLkTikyzfT=tNZP5KpB30F-UxBA6A_bN3E4gPK1vHPp@mail.gmail.com>
	<4C606D48-E571-46E9-B621-E9DE21E76210@twistedmatrix.com>
	<BANLkTinf2CTo-xaowDeAh_9T79BG_dQzMA@mail.gmail.com>
	<BANLkTimHJNeyyREekMa2t_fKutpP0eOi5Q@mail.gmail.com>
	<BANLkTim0Wei04zhYQU3B9sfuSiq5s07k6A@mail.gmail.com>
	<4D91D6FA.80509@vokoda.com>
	<AANLkTi=7Pb_h5qKbgdX3PPCx=bj0cbYZiu6Ntj4GD5yz@mail.gmail.com>
	<AANLkTiktUNuDN_gCeROfNr6eAG-q2FeEqJ_L19OnFO3_@mail.gmail.com>
Message-ID: <AANLkTikQZ3bJJA9-CtH-8WqC-1JAjYbQtNHUcDEZS8hk@mail.gmail.com>

On Wed, Mar 30, 2011 at 2:55 AM, Tristan Seligmann
<mithrandi at mithrandi.net>wrote:

> On Tue, Mar 29, 2011 at 5:08 PM, Christopher Armstrong
> <radix at twistedmatrix.com> wrote:
> > I probably use addCallbacks once for every 30-100 addCallback or
> addErrback
> > calls I do (counted by lines of code, not times they're executed). But
> > that's just an off-the-cuff estimate.
>
> For interest's sake, I just ran the numbers on my largest codebase (a
> proprietary application, sorry); ratio of addCallbacks to (addCallback
> + addErrback) is around 0.05.
>

Funny, that's what I got on my proprietary application (0.0597) :-) It's a
heavily inlineCallbacks-based codebase, and I expect there would be a much
larger number of addCallback/addErrback calls if it weren't. Also, looking
at the actual uses of addCallbacks (15), they were all written by people
other than me (relative Twisted newbies) and I don't think I would have used
it where it's used now. This, I think, indicates that we *should* focus more
on addCallback and addErrback in the documentation, and stress that they are
almost always what you want to use instead of addCallbacks, but definitely
point out where addCallbacks is useful.

-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110330/3db49634/attachment.html>

From jstpierre at mecheye.net  Wed Mar 30 09:50:53 2011
From: jstpierre at mecheye.net (Jasper St. Pierre)
Date: Wed, 30 Mar 2011 11:50:53 -0400
Subject: [Twisted-Python] Deferred documentation.
In-Reply-To: <AANLkTikQZ3bJJA9-CtH-8WqC-1JAjYbQtNHUcDEZS8hk@mail.gmail.com>
References: <AANLkTik0uA2NAvYjFpRqDk5XDNsgoj073nfmjF1tWHcP@mail.gmail.com>
	<AANLkTinemJ-Rdf1EC+0VDgxnvixpe5dvxCdGP5_kZA4m@mail.gmail.com>
	<B68B4F4A-A8D5-4D23-87FC-9D0477A4BA65@twistedmatrix.com>
	<AANLkTikyzfT=tNZP5KpB30F-UxBA6A_bN3E4gPK1vHPp@mail.gmail.com>
	<4C606D48-E571-46E9-B621-E9DE21E76210@twistedmatrix.com>
	<BANLkTinf2CTo-xaowDeAh_9T79BG_dQzMA@mail.gmail.com>
	<BANLkTimHJNeyyREekMa2t_fKutpP0eOi5Q@mail.gmail.com>
	<BANLkTim0Wei04zhYQU3B9sfuSiq5s07k6A@mail.gmail.com>
	<4D91D6FA.80509@vokoda.com>
	<AANLkTi=7Pb_h5qKbgdX3PPCx=bj0cbYZiu6Ntj4GD5yz@mail.gmail.com>
	<AANLkTiktUNuDN_gCeROfNr6eAG-q2FeEqJ_L19OnFO3_@mail.gmail.com>
	<AANLkTikQZ3bJJA9-CtH-8WqC-1JAjYbQtNHUcDEZS8hk@mail.gmail.com>
Message-ID: <BANLkTimygpgmxMC2_MRQLTt_2C6wdh7ytQ@mail.gmail.com>

The problem that I have is that errback flow is awkward... the main
difference is that addCallbacks will call the errback if its own callback
fails, right? I can only see that really being useful by accident.

On Wed, Mar 30, 2011 at 11:09 AM, Christopher Armstrong <
radix at twistedmatrix.com> wrote:

> On Wed, Mar 30, 2011 at 2:55 AM, Tristan Seligmann <
> mithrandi at mithrandi.net> wrote:
>
>> On Tue, Mar 29, 2011 at 5:08 PM, Christopher Armstrong
>> <radix at twistedmatrix.com> wrote:
>> > I probably once for every 30-'s 100 addCallback or addErrback
>> > calls I do (counted by lines of code, not times they're executed). But
>> > that's just an off-the-cuff estimate.
>>
>> For interest's sake, I just ran the numbers on my largest codebase (a
>> proprietary application, sorry); ratio of addCallbacks to (addCallback
>> + addErrback) is around 0.05.
>>
>
> Funny, that's what I got on my proprietary application (0.0597) :-) It's a
> heavily inlineCallbacks-based codebase, and I expect there would be a much
> larger number of addCallback/addErrback calls if it weren't. Also, looking
> at the actual uses of addCallbacks (15), they were all written by people
> other than me (relative Twisted newbies) and I don't think I would have used
> it where it's used now. This, I think, indicates that we *should* focus more
> on addCallback and addErrback in the documentation, and stress that they are
> almost always what you want to use instead of addCallbacks, but definitely
> point out where addCallbacks is useful.
>
> --
> Christopher Armstrong
> http://radix.twistedmatrix.com/
> http://planet-if.com/
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110330/3fd38248/attachment.html>

From jml at mumak.net  Wed Mar 30 09:55:50 2011
From: jml at mumak.net (Jonathan Lange)
Date: Wed, 30 Mar 2011 16:55:50 +0100
Subject: [Twisted-Python] Deferred documentation.
In-Reply-To: <BANLkTimygpgmxMC2_MRQLTt_2C6wdh7ytQ@mail.gmail.com>
References: <AANLkTik0uA2NAvYjFpRqDk5XDNsgoj073nfmjF1tWHcP@mail.gmail.com>
	<AANLkTinemJ-Rdf1EC+0VDgxnvixpe5dvxCdGP5_kZA4m@mail.gmail.com>
	<B68B4F4A-A8D5-4D23-87FC-9D0477A4BA65@twistedmatrix.com>
	<AANLkTikyzfT=tNZP5KpB30F-UxBA6A_bN3E4gPK1vHPp@mail.gmail.com>
	<4C606D48-E571-46E9-B621-E9DE21E76210@twistedmatrix.com>
	<BANLkTinf2CTo-xaowDeAh_9T79BG_dQzMA@mail.gmail.com>
	<BANLkTimHJNeyyREekMa2t_fKutpP0eOi5Q@mail.gmail.com>
	<BANLkTim0Wei04zhYQU3B9sfuSiq5s07k6A@mail.gmail.com>
	<4D91D6FA.80509@vokoda.com>
	<AANLkTi=7Pb_h5qKbgdX3PPCx=bj0cbYZiu6Ntj4GD5yz@mail.gmail.com>
	<AANLkTiktUNuDN_gCeROfNr6eAG-q2FeEqJ_L19OnFO3_@mail.gmail.com>
	<AANLkTikQZ3bJJA9-CtH-8WqC-1JAjYbQtNHUcDEZS8hk@mail.gmail.com>
	<BANLkTimygpgmxMC2_MRQLTt_2C6wdh7ytQ@mail.gmail.com>
Message-ID: <AANLkTimAyDLk+jcz5FQix=RTgEo_isbXnmA9L0N4MZkh@mail.gmail.com>

On Wed, Mar 30, 2011 at 4:50 PM, Jasper St. Pierre
<jstpierre at mecheye.net> wrote:
> The problem that I have is that errback flow is awkward... the main
> difference is that addCallbacks will call the errback if its own callback
> fails, right? I can only see that really being useful by accident.
>

Not really.

# 1. Handle error then do the action anyway.
deferred = order_food()
deferred.addErrback(handle_error)
deferred.addCallback(do_action)

# 2. Handle the error but do the action only if
# the error doesn't occur.
deferred = order_food()
deferred.addCallbacks(do_action, handle_error)

# 3. Handle the error for the entire operation.
deferred = order_food()
deferred.addCallback(do_action)
deferred.addErrback(handle_error)

# 4. Do something regardless of success or failure.
deferred = order_food()
deferred.addBoth(do_cleanup)


These are analogous to:

# 1. Handle error then do the action anyway.
try:
    value = order_food()
except:
    handle_error()
do_action(value)

# 2. Handle the error but do the action only if the error doesn't occur.
try:
    value = order_food()
except:
    handle_error()
else:
    do_action(value)

# 3. Handle the error for the entire operation.
try:
    value = order_food()
    do_action(value)
except:
    handle_error()

# 4. Do something regardless of success or failure.
try:
    value = order_food()
finally:
    do_cleanup()

>From <http://mumak.net/stuff/twisted-intro.html>.

jml

PS. Please don't top post to this list.



From glyph at twistedmatrix.com  Wed Mar 30 11:20:04 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 30 Mar 2011 13:20:04 -0400
Subject: [Twisted-Python] Deferred documentation.
In-Reply-To: <AANLkTikQZ3bJJA9-CtH-8WqC-1JAjYbQtNHUcDEZS8hk@mail.gmail.com>
References: <AANLkTik0uA2NAvYjFpRqDk5XDNsgoj073nfmjF1tWHcP@mail.gmail.com>
	<AANLkTinemJ-Rdf1EC+0VDgxnvixpe5dvxCdGP5_kZA4m@mail.gmail.com>
	<B68B4F4A-A8D5-4D23-87FC-9D0477A4BA65@twistedmatrix.com>
	<AANLkTikyzfT=tNZP5KpB30F-UxBA6A_bN3E4gPK1vHPp@mail.gmail.com>
	<4C606D48-E571-46E9-B621-E9DE21E76210@twistedmatrix.com>
	<BANLkTinf2CTo-xaowDeAh_9T79BG_dQzMA@mail.gmail.com>
	<BANLkTimHJNeyyREekMa2t_fKutpP0eOi5Q@mail.gmail.com>
	<BANLkTim0Wei04zhYQU3B9sfuSiq5s07k6A@mail.gmail.com>
	<4D91D6FA.80509@vokoda.com>
	<AANLkTi=7Pb_h5qKbgdX3PPCx=bj0cbYZiu6Ntj4GD5yz@mail.gmail.com>
	<AANLkTiktUNuDN_gCeROfNr6eAG-q2FeEqJ_L19OnFO3_@mail.gmail.com>
	<AANLkTikQZ3bJJA9-CtH-8WqC-1JAjYbQtNHUcDEZS8hk@mail.gmail.com>
Message-ID: <D563E715-A111-4855-935D-BE46FF8C5787@twistedmatrix.com>

On Mar 30, 2011, at 11:09 AM, Christopher Armstrong wrote:

> Funny, that's what I got on my proprietary application (0.0597) :-) It's a heavily inlineCallbacks-based codebase, and I expect there would be a much larger number of addCallback/addErrback calls if it weren't. Also, looking at the actual uses of addCallbacks (15), they were all written by people other than me (relative Twisted newbies) and I don't think I would have used it where it's used now. This, I think, indicates that we *should* focus more on addCallback and addErrback in the documentation, and stress that they are almost always what you want to use instead of addCallbacks, but definitely point out where addCallbacks is useful.

addCallbacks() is used in places where you'd need a try/except/else in synchronous code; much less frequently than you'd need a try/except, but still enough that it's important.

However, in my experience, a novice's understanding of addCallbacks() is critically important to understanding other uses of Deferred as well; in particular, the "one chain of pairs of callback and errback" concept makes a lot of the behavior clear which might not otherwise be.  If you just vaguely know about chains of callbacks, you can easily get confused.

Some sample confusion that I believe I've heard over the years: thinking that addErrback only affects the previously-added callback, that there's only one errback for the whole chain but as many callbacks as you want, that the callback and errback chains are totally separate, and callbacks are run, then errbacks.

Granted, these types of confusion require more than simply glossing over addCallbacks(), but I do think that emphasizing the pairs-of-callbacks structure helps people get a full understanding of what's going on more quickly.  Of course, now that I've put this in a publicly-archived mailing list archive, a lack of understanding of addCallbacks won't be the problem any more.  People will be confused, search for some terms related to this confusion, and read only that one preceding paragraph of this message, and say to themselves "oh, that's how Deferred works", somehow holding all of those wrong ideas in their head at once, forever.  Hooray for the internet.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110330/26e91941/attachment.html>

From glyph at twistedmatrix.com  Wed Mar 30 11:38:55 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 30 Mar 2011 13:38:55 -0400
Subject: [Twisted-Python] prerelease preview predocumentation
In-Reply-To: <20110329071021.GA2194@weiermayer.com>
References: <C9AA782C-1AC0-423A-9146-278E914D53D5@twistedmatrix.com>
	<CED11EEE-3486-47FD-936C-DE453D26D1F9@twistedmatrix.com>
	<AANLkTimWxHEnG_VtRUu+CU4N-=MbaHo9v1SP180513=u@mail.gmail.com>
	<20110329071021.GA2194@weiermayer.com>
Message-ID: <6F0A5D7B-3AA7-444E-8EBB-86305CF0E4DF@twistedmatrix.com>


On Mar 29, 2011, at 3:10 AM, Albert Brandl wrote:

> On Mon, Mar 28, 2011 at 09:27:04AM -0400, Tom Davis wrote:
>> 
>> It's great to have everything indexed on one page with easy drill-down 
>> into specific sections. It becomes really obvious where the hierarchy 
>> can be optimized and how we can logically go about breaking up the 
>> various sections.
> 
> This is right. But I was confused by the fact that the first-level items 
> in the list ("Twisted Conch Documentation", "Twisted Core Documentation", 
> etc.) link to pages that _again_ present links to the second-level items.
> Adding to my confusion was the fact that the links on the main page have
> different names from the ones on the subpages.

You're absolutely right.  The organization is a total mess.  But here's the surprise: the organization is not new :).  This is the exact same organization that the documentation has had for years.  The difference is that you can see it now, and notice that it's a problem, rather than just search for a document that you want, find that one document outside of the navigation structure, and ignore the rest of the docs (which is what most people do now).  I think that's a very good thing.

For example: both <http://twistedmatrix.com/documents/10.2.0/> and <http://twistedmatrix.com/~glyph/sphinx-preview-11.0pre1/> have a "conch" link.  And as you can see when you follow that link, <http://twistedmatrix.com/documents/10.2.0/conch/> looks a lot like  <http://twistedmatrix.com/~glyph/sphinx-preview-11.0pre1/projects/conch/index.html>.

This issue will be probably be fixed after the migration.  That is, I would certainly be happy if it were fixed before, or at any time really, but fixing it probably requires some tweaks to release infrastructure that would better be put off until we've deleted most of that part of the release infrastructure.  The important point is that it should stop the migration from happening, since the results are actually better now than they were, just more noticeable.

At any rate: thanks for the feedback, it's appreciated!

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110330/6ec77bbd/attachment.html>

From kevin.horn at gmail.com  Wed Mar 30 12:09:55 2011
From: kevin.horn at gmail.com (Kevin Horn)
Date: Wed, 30 Mar 2011 13:09:55 -0500
Subject: [Twisted-Python] prerelease preview predocumentation
In-Reply-To: <6F0A5D7B-3AA7-444E-8EBB-86305CF0E4DF@twistedmatrix.com>
References: <C9AA782C-1AC0-423A-9146-278E914D53D5@twistedmatrix.com>
	<CED11EEE-3486-47FD-936C-DE453D26D1F9@twistedmatrix.com>
	<AANLkTimWxHEnG_VtRUu+CU4N-=MbaHo9v1SP180513=u@mail.gmail.com>
	<20110329071021.GA2194@weiermayer.com>
	<6F0A5D7B-3AA7-444E-8EBB-86305CF0E4DF@twistedmatrix.com>
Message-ID: <AANLkTinwLPCdZi0nhcEQ5WUWXA12yaR_8UfhHdrA-UMe@mail.gmail.com>

On Wed, Mar 30, 2011 at 12:38 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com>wrote:

>
> On Mar 29, 2011, at 3:10 AM, Albert Brandl wrote:
>
> On Mon, Mar 28, 2011 at 09:27:04AM -0400, Tom Davis wrote:
>
>
> It's great to have everything indexed on one page with easy drill-down
>
> into specific sections. It becomes really obvious where the hierarchy
>
> can be optimized and how we can logically go about breaking up the
>
> various sections.
>
>
> This is right. But I was confused by the fact that the first-level items
> in the list ("Twisted Conch Documentation", "Twisted Core Documentation",
> etc.) link to pages that _again_ present links to the second-level items.
> Adding to my confusion was the fact that the links on the main page have
> different names from the ones on the subpages.
>
>
> You're absolutely right.  The organization is a total mess.  But here's the
> surprise: the organization is not *new* :).  This is the exact same
> organization that the documentation has had for years.  The difference is
> that you can see it now, and notice that it's a problem, rather than just
> search for a document that you want, find that one document outside of the
> navigation structure, and ignore the rest of the docs (which is what most
> people do now).  I think that's a very good thing.
>
> For example: both <http://twistedmatrix.com/documents/10.2.0/> and <
> http://twistedmatrix.com/~glyph/sphinx-preview-11.0pre1/> have a "conch"
> link.  And as you can see when you follow that link, <
> http://twistedmatrix.com/documents/10.2.0/conch/> looks a lot like  <
> http://twistedmatrix.com/~glyph/sphinx-preview-11.0pre1/projects/conch/index.html
> >.
>
> This issue will be probably be fixed after the migration.  That is, I would
> certainly be happy if it were fixed before, or at any time really, but
> fixing it probably requires some tweaks to release infrastructure that would
> better be put off until we've deleted most of that part of the release
> infrastructure.  The important point is that it should *stop* the
> migration from happening, since the results are actually better now than
> they were, just more noticeable.
>
> At any rate: thanks for the feedback, it's appreciated!
>
> -glyph
>
>
Er, you mean it should _not_ stop the migration from happening?

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110330/46016539/attachment.html>

From mithrandi at mithrandi.net  Wed Mar 30 12:51:13 2011
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Wed, 30 Mar 2011 20:51:13 +0200
Subject: [Twisted-Python] Deferred documentation.
In-Reply-To: <D563E715-A111-4855-935D-BE46FF8C5787@twistedmatrix.com>
References: <AANLkTik0uA2NAvYjFpRqDk5XDNsgoj073nfmjF1tWHcP@mail.gmail.com>
	<AANLkTinemJ-Rdf1EC+0VDgxnvixpe5dvxCdGP5_kZA4m@mail.gmail.com>
	<B68B4F4A-A8D5-4D23-87FC-9D0477A4BA65@twistedmatrix.com>
	<AANLkTikyzfT=tNZP5KpB30F-UxBA6A_bN3E4gPK1vHPp@mail.gmail.com>
	<4C606D48-E571-46E9-B621-E9DE21E76210@twistedmatrix.com>
	<BANLkTinf2CTo-xaowDeAh_9T79BG_dQzMA@mail.gmail.com>
	<BANLkTimHJNeyyREekMa2t_fKutpP0eOi5Q@mail.gmail.com>
	<BANLkTim0Wei04zhYQU3B9sfuSiq5s07k6A@mail.gmail.com>
	<4D91D6FA.80509@vokoda.com>
	<AANLkTi=7Pb_h5qKbgdX3PPCx=bj0cbYZiu6Ntj4GD5yz@mail.gmail.com>
	<AANLkTiktUNuDN_gCeROfNr6eAG-q2FeEqJ_L19OnFO3_@mail.gmail.com>
	<AANLkTikQZ3bJJA9-CtH-8WqC-1JAjYbQtNHUcDEZS8hk@mail.gmail.com>
	<D563E715-A111-4855-935D-BE46FF8C5787@twistedmatrix.com>
Message-ID: <AANLkTikAD03mhhFAijCGae+BFcL0ie=1=e4S5SmwncJ-@mail.gmail.com>

On Wed, Mar 30, 2011 at 7:20 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
> However, in my experience, a novice's understanding of addCallbacks() is
> critically important to understanding other uses of Deferred as well; in
> particular, the "one chain of pairs of callback and errback" concept makes a
> lot of the behavior clear which might not otherwise be.  If you just vaguely
> know about chains of callbacks, you can easily get confused.

Anecdotally, I didn't understand Deferred callback chains at all
correctly until I discovered that addCallback and addErrback were
implemented in terms of addCallbacks, and how they were implemented.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar



From jessica.mckellar at gmail.com  Wed Mar 30 20:54:18 2011
From: jessica.mckellar at gmail.com (Jessica McKellar)
Date: Wed, 30 Mar 2011 22:54:18 -0400
Subject: [Twisted-Python] Announcing Twisted 11.0.0pre2!
Message-ID: <AANLkTindA0cs+paEeFt5UELpU5AFw7Ti7YMaWpBh7m5w@mail.gmail.com>

Having done the builds with two curious guinea pigs by my side, we are
triply pleased to announce the second 11.0.0 pre-release.

Tarballs for the second pre-release are available at:

<http://twistedmatrix.com/~jesstess/11.0.0pre2/>

The main differences between this release and the first pre-release
are changelog and setup.py tweaks.

Please test aggressively! Barring the discovery of regressions, we are
going to cut a final release *this weekend (April 2/3)*.

Many thanks to thijs and exarkun for feedback and improvements on the
first pre-release, and to glyph for overseeing the pre-release
process.

-Jessica



From glyph at twistedmatrix.com  Wed Mar 30 22:16:11 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 31 Mar 2011 00:16:11 -0400
Subject: [Twisted-Python] prerelease preview predocumentation
In-Reply-To: <AANLkTinwLPCdZi0nhcEQ5WUWXA12yaR_8UfhHdrA-UMe@mail.gmail.com>
References: <C9AA782C-1AC0-423A-9146-278E914D53D5@twistedmatrix.com>
	<CED11EEE-3486-47FD-936C-DE453D26D1F9@twistedmatrix.com>
	<AANLkTimWxHEnG_VtRUu+CU4N-=MbaHo9v1SP180513=u@mail.gmail.com>
	<20110329071021.GA2194@weiermayer.com>
	<6F0A5D7B-3AA7-444E-8EBB-86305CF0E4DF@twistedmatrix.com>
	<AANLkTinwLPCdZi0nhcEQ5WUWXA12yaR_8UfhHdrA-UMe@mail.gmail.com>
Message-ID: <BFFA02F5-FCE9-4A09-A039-EEC58D8632C3@twistedmatrix.com>


On Mar 30, 2011, at 2:09 PM, Kevin Horn wrote:

> Er, you mean it should _not_ stop the migration from happening?

Uh, yes, it should not stop the migration from happening.  Sorry for the mix-up.  Actually we are on track to have the final migration happen very soon, if someone goes through the release tool automation stuff to make it Sphinx-friendly.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110331/e517b04d/attachment.html>

From glyph at twistedmatrix.com  Wed Mar 30 22:17:56 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 31 Mar 2011 00:17:56 -0400
Subject: [Twisted-Python] Deferred documentation.
In-Reply-To: <AANLkTikAD03mhhFAijCGae+BFcL0ie=1=e4S5SmwncJ-@mail.gmail.com>
References: <AANLkTik0uA2NAvYjFpRqDk5XDNsgoj073nfmjF1tWHcP@mail.gmail.com>
	<AANLkTinemJ-Rdf1EC+0VDgxnvixpe5dvxCdGP5_kZA4m@mail.gmail.com>
	<B68B4F4A-A8D5-4D23-87FC-9D0477A4BA65@twistedmatrix.com>
	<AANLkTikyzfT=tNZP5KpB30F-UxBA6A_bN3E4gPK1vHPp@mail.gmail.com>
	<4C606D48-E571-46E9-B621-E9DE21E76210@twistedmatrix.com>
	<BANLkTinf2CTo-xaowDeAh_9T79BG_dQzMA@mail.gmail.com>
	<BANLkTimHJNeyyREekMa2t_fKutpP0eOi5Q@mail.gmail.com>
	<BANLkTim0Wei04zhYQU3B9sfuSiq5s07k6A@mail.gmail.com>
	<4D91D6FA.80509@vokoda.com>
	<AANLkTi=7Pb_h5qKbgdX3PPCx=bj0cbYZiu6Ntj4GD5yz@mail.gmail.com>
	<AANLkTiktUNuDN_gCeROfNr6eAG-q2FeEqJ_L19OnFO3_@mail.gmail.com>
	<AANLkTikQZ3bJJA9-CtH-8WqC-1JAjYbQtNHUcDEZS8hk@mail.gmail.com>
	<D563E715-A111-4855-935D-BE46FF8C5787@twistedmatrix.com>
	<AANLkTikAD03mhhFAijCGae+BFcL0ie=1=e4S5SmwncJ-@mail.gmail.com>
Message-ID: <577FF9DC-9168-43B4-937A-19BCE11F8660@twistedmatrix.com>


On Mar 30, 2011, at 2:51 PM, Tristan Seligmann wrote:

> On Wed, Mar 30, 2011 at 7:20 PM, Glyph Lefkowitz
> <glyph at twistedmatrix.com> wrote:
>> However, in my experience, a novice's understanding of addCallbacks() is
>> critically important to understanding other uses of Deferred as well; in
>> particular, the "one chain of pairs of callback and errback" concept makes a
>> lot of the behavior clear which might not otherwise be.  If you just vaguely
>> know about chains of callbacks, you can easily get confused.
> 
> Anecdotally, I didn't understand Deferred callback chains at all
> correctly until I discovered that addCallback and addErrback were
> implemented in terms of addCallbacks, and how they were implemented.

Great, so, my evidence-free claim and another your personal anecdotal experience agree; I believe this gives us what Science calls a "law", and thus the topic bears no further discussion :).

Seriously though, this is pretty much exactly what I meant.  You don't need to call addCallbacks a lot, but (A) sometimes you do and when you do need it it's important, and (B) it's important for people to understand early in the process even if they're not going to use it a lot.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110331/00e5f7af/attachment-0001.html>

From glyph at twistedmatrix.com  Wed Mar 30 22:23:43 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 31 Mar 2011 00:23:43 -0400
Subject: [Twisted-Python] Failure is O(state) vs Exception
In-Reply-To: <20110330091411.GE2777@aihal.home.puzzling.org>
References: <4D909ED2.1010300@arbash-meinel.com>
	<AANLkTindhXEEwnLG-nO7dFCxd30hjqQ=iDEo_p2RT0Ks@mail.gmail.com>
	<4D90A52C.6090401@arbash-meinel.com>
	<20110330083950.GD2777@aihal.home.puzzling.org>
	<4D92EEE0.2050305@arbash-meinel.com>
	<20110330091411.GE2777@aihal.home.puzzling.org>
Message-ID: <2F990B30-567E-458F-B592-66B92B024CAD@twistedmatrix.com>


On Mar 30, 2011, at 5:14 AM, Andrew Bennetts wrote:

> John Arbash Meinel wrote:
> […]
>> I think walking the frames and copying the dicts is also expensive. That
>> is what the bug you linked to me was about. (First, walking everything
>> and using __dict__.copy() was a bit expensive, and second that the
>> safe_repr() calls were turning 1GB strings into a new 1GB+ string.)
> 
> Well, if we take my proposal to not (by default at least) capture the
> frames in the first place this isn't an issue is it?  The only other
> copy done in Failure is the copy of self.__dict__ in __getstate__, which
> is just a shallow copy of one dict, so fairly cheap.
> 
>> The one other step that I think we need, is that 'maybeDeferred' also
>> always traps into a Failure object, and we'd want that to check
>> Deferred.debug first.
> 
> Good point!
> 
>> I do wonder if Failure should just be checking Deferred.debug before
>> automatically including a traceback. I'm not really sure about logical
>> layering of twisted modules, though. Certainly 'twisted.python.failure'
>> seems a lower layer than 'twisted.internet.defer'.
> 
> Yes, checking Deferred.debug in twisted.python.failure would be bad
> layering.  twisted.internet.defer only invokes Failure in a couple of
> places, so it's not so onerous to make sure it invokes it to avoid
> capturing tracebacks unless it means to.
> 
> That said, it might be a good idea to change Failure to *not* capture
> tracebacks by default when invoked as Failure().  Perhaps add a
> setDebugging toggle to twisted.python.failure too.  If an explicit
> traceback is passed to the constructor it would still be captured, and
> perhaps provide an alternative constructor for the current “capture
> everything” behaviour (perhaps via a new optional flag for __init__,
> perhaps via a new name DetailedFailure(), perhaps via a classmethod
> except failure is not a new-style class and can't be one without
> changing to subclass Exception…) for the rare cases when people want
> that.  It's a pity you can't just use Failure(*sys.exc_info()) because
> the parameters are in the wrong order.
> 
> Certainly the current behaviour of doing a costly capturing of traceback
> and frame contents seems like the wrong default, given how rarely I've
> seen anyone use Failure.printDetailedTraceback.

Agreed.  I've seen this behavior crop up shocking close to the top of profiles for Calendar Server as well, so I'm very glad to hear you've undertaken this work.  The current default is almost certainly wrong; the only code which has practically ever used it was the HTML traceback stuff, which most serious users disable for security reasons anyway.

Debugging is kind of a process-global thing, most of the time.  I think maybe we should have 'twisted.python.debug' which is the main thing that all these features use, and then a setDebugging for each system (Failure, Deferred, reactor; and ideally, eventually stuff like web, mail, conch too) to turn on these expensive-but-occasionally-worthwhile features.

But I'd be happy if this change did _nothing_ but make Failure simply default to not capturing globals and locals, and add a flag to explicitly request this behavior.  Like you say: the information is always captured but almost never used.

-glyph




From andrew at bemusement.org  Wed Mar 30 22:41:08 2011
From: andrew at bemusement.org (Andrew Bennetts)
Date: Thu, 31 Mar 2011 15:41:08 +1100
Subject: [Twisted-Python] Failure is O(state) vs Exception
In-Reply-To: <2F990B30-567E-458F-B592-66B92B024CAD@twistedmatrix.com>
References: <4D909ED2.1010300@arbash-meinel.com>
	<AANLkTindhXEEwnLG-nO7dFCxd30hjqQ=iDEo_p2RT0Ks@mail.gmail.com>
	<4D90A52C.6090401@arbash-meinel.com>
	<20110330083950.GD2777@aihal.home.puzzling.org>
	<4D92EEE0.2050305@arbash-meinel.com>
	<20110330091411.GE2777@aihal.home.puzzling.org>
	<2F990B30-567E-458F-B592-66B92B024CAD@twistedmatrix.com>
Message-ID: <20110331044108.GG2777@aihal.home.puzzling.org>

Glyph Lefkowitz wrote:
[…]
> Agreed.  I've seen this behavior crop up shocking close to the top of profiles
> for Calendar Server as well, so I'm very glad to hear you've undertaken this
> work.  The current default is almost certainly wrong; the only code which has
> practically ever used it was the HTML traceback stuff, which most serious
> users disable for security reasons anyway.

Good to know we're not the only ones :)

The fact that it speeds up 'trial twisted' by ~10-15% is a nice bonus too!

> Debugging is kind of a process-global thing, most of the time.  I think maybe
> we should have 'twisted.python.debug' which is the main thing that all these
> features use, and then a setDebugging for each system (Failure, Deferred,
> reactor; and ideally, eventually stuff like web, mail, conch too) to turn on
> these expensive-but-occasionally-worthwhile features.

A similar scheme has worked well for bzrlib.  +1

> But I'd be happy if this change did _nothing_ but make Failure simply default
> to not capturing globals and locals, and add a flag to explicitly request this
> behavior.  Like you say: the information is always captured but almost never
> used.

That's fine with me!  I'll update the patch to add captureVars=False to
Failure.__init__ instead of what it currently does, and happily leave defer.py
unmodified from trunk.

Thanks for the feedback,

-Andrew.




From aljosa.mohorovic at gmail.com  Thu Mar 31 02:15:33 2011
From: aljosa.mohorovic at gmail.com (=?UTF-8?B?QWxqb8WhYSBNb2hvcm92acSH?=)
Date: Thu, 31 Mar 2011 10:15:33 +0200
Subject: [Twisted-Python] running several services from a single app
In-Reply-To: <20110329225651.GF5510@boombah.thristian.org>
References: <AANLkTik0vHzVm+XLEuM=ueuNqBK4-0ZuMNN-nSuaXtmo@mail.gmail.com>
	<AANLkTikb7+2bC6FVDQ2TXvjmxrfa9_d-j8jQUY4ad5cv@mail.gmail.com>
	<AANLkTi=_SPVDpJVx2rtx+9DmWiCTD69N4g_3_RP5OrMX@mail.gmail.com>
	<20110329225651.GF5510@boombah.thristian.org>
Message-ID: <AANLkTimv+dsVZzK6zWomXjdN2=ixO=KsYf3LktOMhPPA@mail.gmail.com>

everything is working, thanks.

Aljosa



From aljosa.mohorovic at gmail.com  Thu Mar 31 02:45:49 2011
From: aljosa.mohorovic at gmail.com (=?UTF-8?B?QWxqb8WhYSBNb2hvcm92acSH?=)
Date: Thu, 31 Mar 2011 10:45:49 +0200
Subject: [Twisted-Python] running several services from a single app
In-Reply-To: <AANLkTimv+dsVZzK6zWomXjdN2=ixO=KsYf3LktOMhPPA@mail.gmail.com>
References: <AANLkTik0vHzVm+XLEuM=ueuNqBK4-0ZuMNN-nSuaXtmo@mail.gmail.com>
	<AANLkTikb7+2bC6FVDQ2TXvjmxrfa9_d-j8jQUY4ad5cv@mail.gmail.com>
	<AANLkTi=_SPVDpJVx2rtx+9DmWiCTD69N4g_3_RP5OrMX@mail.gmail.com>
	<20110329225651.GF5510@boombah.thristian.org>
	<AANLkTimv+dsVZzK6zWomXjdN2=ixO=KsYf3LktOMhPPA@mail.gmail.com>
Message-ID: <AANLkTikdmi-TiUs-Rc50Fb8D6KSQNRoZ7z_M+_zgyyT=@mail.gmail.com>

now i looking at adding an wsgi app to this setup.
i'm reading http://twistedmatrix.com/documents/current/web/howto/web-in-60/wsgi.html
but can't figure out howto get factory for wsgi if i have:

===
def application(environ, start_response):
    start_response('200 OK', [('Content-type', 'text/plain')])
    return ['Hello, world!']
resource = WSGIResource(reactor, reactor.getThreadPool(), application)
===

i'm looking for something like "reactor.listenTCP(10000,
wsgi_factory)" but don't know howto do it.
please point me to proper docs.
thanks

Aljosa



From jstpierre at mecheye.net  Thu Mar 31 04:59:06 2011
From: jstpierre at mecheye.net (Jasper St. Pierre)
Date: Thu, 31 Mar 2011 06:59:06 -0400
Subject: [Twisted-Python] running several services from a single app
In-Reply-To: <AANLkTikdmi-TiUs-Rc50Fb8D6KSQNRoZ7z_M+_zgyyT=@mail.gmail.com>
References: <AANLkTik0vHzVm+XLEuM=ueuNqBK4-0ZuMNN-nSuaXtmo@mail.gmail.com>
	<AANLkTikb7+2bC6FVDQ2TXvjmxrfa9_d-j8jQUY4ad5cv@mail.gmail.com>
	<AANLkTi=_SPVDpJVx2rtx+9DmWiCTD69N4g_3_RP5OrMX@mail.gmail.com>
	<20110329225651.GF5510@boombah.thristian.org>
	<AANLkTimv+dsVZzK6zWomXjdN2=ixO=KsYf3LktOMhPPA@mail.gmail.com>
	<AANLkTikdmi-TiUs-Rc50Fb8D6KSQNRoZ7z_M+_zgyyT=@mail.gmail.com>
Message-ID: <BANLkTikqP5ef7FDKUNMDA=yMbqPKdxMZWg@mail.gmail.com>

The factory for twisted.web.resource Resources is twisted.web.server.Site

On Thu, Mar 31, 2011 at 4:45 AM, Aljoša Mohorović <
aljosa.mohorovic at gmail.com> wrote:

> now i looking at adding an wsgi app to this setup.
> i'm reading
> http://twistedmatrix.com/documents/current/web/howto/web-in-60/wsgi.html
> but can't figure out howto get factory for wsgi if i have:
>
> ===
> def application(environ, start_response):
>    start_response('200 OK', [('Content-type', 'text/plain')])
>    return ['Hello, world!']
> resource = WSGIResource(reactor, reactor.getThreadPool(), application)
> ===
>
> i'm looking for something like "reactor.listenTCP(10000,
> wsgi_factory)" but don't know howto do it.
> please point me to proper docs.
>

factory = Site(resource)
reactor.listenTCP(10000, factory)
reactor.run()

see here:
http://twistedmatrix.com/documents/current/web/howto/web-in-60/dynamic-content.html


> thanks
>
> Aljosa
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110331/00c56805/attachment.html>

