From exarkun at twistedmatrix.com  Sun May  2 00:05:20 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 02 May 2010 04:05:20 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1272773120.02.1547234397@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100502/694c116d/attachment.htm 

From jml at mumak.net  Mon May  3 08:18:42 2010
From: jml at mumak.net (Jonathan Lange)
Date: Mon, 3 May 2010 13:18:42 +0100
Subject: [Twisted-Python] Release again in June?
Message-ID: <l2pd06a5cd31005030518z572fac09rc1f1ec26b2aaac98@mail.gmail.com>

Hello everyone,

Some of you may recall that the last Twisted release, Twisted 10.0.0
took place in early March of this year. It was my intent then to
release 10.1.0 in early June, thus moving us toward a regular release
cycle.

I am still keen to do this.

Does anyone have any thoughts, objections or recommendations?

Thanks,
jml


From gabriel.rossetti at arimaz.com  Mon May  3 09:46:35 2010
From: gabriel.rossetti at arimaz.com (Gabriel Rossetti)
Date: Mon, 03 May 2010 15:46:35 +0200
Subject: [Twisted-Python] exception not being trapped with Failure.trap
Message-ID: <4BDED3BB.70908@arimaz.com>

Hello everyone,

I'm getting something strange:

f.trap(MyException) raises MyException and f.value == MyException 
evaluates to True as expected, so why isn't it being trapped?

Thanks, Gabriel




From gxti at partiallystapled.com  Mon May  3 09:59:45 2010
From: gxti at partiallystapled.com (Michael Tharp)
Date: Mon, 03 May 2010 09:59:45 -0400
Subject: [Twisted-Python] exception not being trapped with Failure.trap
In-Reply-To: <4BDED3BB.70908@arimaz.com>
References: <4BDED3BB.70908@arimaz.com>
Message-ID: <4BDED6D1.5010603@partiallystapled.com>

On 05/03/2010 09:46 AM, Gabriel Rossetti wrote:
> f.trap(MyException) raises MyException and f.value == MyException
> evaluates to True as expected, so why isn't it being trapped?

f.value should be an instance of MyException, not the class itself. 
Perhaps you are doing something like Failure(MyException) when you 
should be doing Failure(MyException()).

> Thanks, Gabriel

-- m. tharp


From gabriel.rossetti at arimaz.com  Mon May  3 11:37:29 2010
From: gabriel.rossetti at arimaz.com (Gabriel Rossetti)
Date: Mon, 03 May 2010 17:37:29 +0200
Subject: [Twisted-Python] exception not being trapped with Failure.trap
In-Reply-To: <4BDED6D1.5010603@partiallystapled.com>
References: <4BDED3BB.70908@arimaz.com> <4BDED6D1.5010603@partiallystapled.com>
Message-ID: <4BDEEDB9.70400@arimaz.com>

Michael Tharp wrote:
> On 05/03/2010 09:46 AM, Gabriel Rossetti wrote:
>> f.trap(MyException) raises MyException and f.value == MyException
>> evaluates to True as expected, so why isn't it being trapped?
>
> f.value should be an instance of MyException, not the class itself. 
> Perhaps you are doing something like Failure(MyException) when you 
> should be doing Failure(MyException()).
ah yes, silly me... thanks
>
>> Thanks, Gabriel
>
> -- m. tharp


From exarkun at twistedmatrix.com  Mon May  3 11:49:30 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 03 May 2010 15:49:30 -0000
Subject: [Twisted-Python] Release again in June?
In-Reply-To: <l2pd06a5cd31005030518z572fac09rc1f1ec26b2aaac98@mail.gmail.com>
References: <l2pd06a5cd31005030518z572fac09rc1f1ec26b2aaac98@mail.gmail.com>
Message-ID: <20100503154930.1627.1185606434.divmod.xquotient.3@localhost.localdomain>

On 12:18 pm, jml at mumak.net wrote:
>Hello everyone,
>
>Some of you may recall that the last Twisted release, Twisted 10.0.0
>took place in early March of this year. It was my intent then to
>release 10.1.0 in early June, thus moving us toward a regular release
>cycle.
>
>I am still keen to do this.
>
>Does anyone have any thoughts, objections or recommendations?

This sounds great.

Are there any tasks that need to be accomplished before we can do 
another release?

Jean-Paul


From jml at mumak.net  Mon May  3 12:25:25 2010
From: jml at mumak.net (Jonathan Lange)
Date: Mon, 3 May 2010 17:25:25 +0100
Subject: [Twisted-Python] Release again in June?
In-Reply-To: <20100503154930.1627.1185606434.divmod.xquotient.3@localhost.localdomain>
References: <l2pd06a5cd31005030518z572fac09rc1f1ec26b2aaac98@mail.gmail.com>
	<20100503154930.1627.1185606434.divmod.xquotient.3@localhost.localdomain>
Message-ID: <h2hd06a5cd31005030925z8b65f5c4pa5ff06da33908b6d@mail.gmail.com>

On Mon, May 3, 2010 at 4:49 PM,  <exarkun at twistedmatrix.com> wrote:
> On 12:18 pm, jml at mumak.net wrote:
>>Hello everyone,
>>
>>Some of you may recall that the last Twisted release, Twisted 10.0.0
>>took place in early March of this year. It was my intent then to
>>release 10.1.0 in early June, thus moving us toward a regular release
>>cycle.
>>
>>I am still keen to do this.
>>
>>Does anyone have any thoughts, objections or recommendations?
>
> This sounds great.
>
> Are there any tasks that need to be accomplished before we can do
> another release?
>

Working from http://twistedmatrix.com/trac/wiki/ReleaseProcess...

There are two regressions that must be fixed:
  * http://twistedmatrix.com/trac/ticket/3998 (Names module DNS
getHostByName error on certain sites)
  * http://twistedmatrix.com/trac/ticket/4345 (The sid of
ListenAuthenticator is not a unicode object.)

(see http://twistedmatrix.com/trac/query?status=new&status=assigned&status=reopened&type=regression&order=priority)

We need to make a decision about whether we'll issue a 10.0.1 to fix
these regressions.

There's a ticket that would be very nice to have for 10.1:
http://twistedmatrix.com/trac/ticket/4320 (Deferred cancellation
documentation)

The process for updating the website documentation is still poorly
understood, I think. The instructions on ReleaseProcess have gaps and
might also have bugs. Ideally, before the release we should make these
instructions clear and correct. Again, not necessary, since we did
muddle through the last time.

I guess for my own sanity, it would be nice to have as many
"regular-releases" tickets fixed as possible, see
http://twistedmatrix.com/trac/milestone/regular-releases. This isn't
necessary though.

I also feel I should say something about deprecated stuff. Not sure what though.

jml


From ddwiggins at advpubtech.com  Mon May  3 20:32:15 2010
From: ddwiggins at advpubtech.com (Don Dwiggins)
Date: Mon, 03 May 2010 17:32:15 -0700
Subject: [Twisted-Python] win32com client in a twisted thread
Message-ID: <hrnpug$4i2$1@dough.gmane.org>

I'm running a Windows service with Twisted (xmlrpc), and I've run into 
an odd case.

In a recently implemented method, I create a COM object with 
win32com.client.Dispatch (using a COM DLL that's part of the overall 
application) and make a couple of calls on it, getting a return value. 
This works well, except that the COM object calls a web service, which 
can take a few seconds, so I wanted to defer it.

When I isolate it into a function, and call that with deferToThread, the 
thread appears to die.  I tried putting the Dispatch call in the 
mainline, then passing it to the function -- this kills Python (not too 
surprising really).

I'm also using dbapi, so I tried it using runInteraction, with no better 
luck.

For what it's worth, here's the code:
>         command = Dispatch('APTAuthorize.clsAuthorizeBatch')
>         model = command.SetupFromConnParms(db['DSN'], db['UserName'], db['Password'])
>         # The returned value is a tuple: the model followed by the params
>         model = model[0]
>         model.PaymentAdjustment = "P"
>         model.BatchId = rsltDict['lPaymentBatchId']
>         model.ShowProgress = True
>         model.AuthorizationType = "CCD"
>         command.Execute(SecurityCode)

Putting logging statements in, I found that it died during the first 
call to "command".  (With no error message or other indication.)

Any thoughts or useful information appreciated,

-- 
Don Dwiggins
Advanced Publishing Technology



From itamar at itamarst.org  Mon May  3 20:54:34 2010
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Mon, 03 May 2010 20:54:34 -0400
Subject: [Twisted-Python] win32com client in a twisted thread
In-Reply-To: <hrnpug$4i2$1@dough.gmane.org>
References: <hrnpug$4i2$1@dough.gmane.org>
Message-ID: <1272934474.25839.5.camel@pintsize>

On Mon, 2010-05-03 at 17:32 -0700, Don Dwiggins wrote:
> I'm running a Windows service with Twisted (xmlrpc), and I've run into 
> an odd case.
> 
> In a recently implemented method, I create a COM object with 
> win32com.client.Dispatch (using a COM DLL that's part of the overall 
> application) and make a couple of calls on it, getting a return value. 
> This works well, except that the COM object calls a web service, which 
> can take a few seconds, so I wanted to defer it.
> 
> When I isolate it into a function, and call that with deferToThread, the 
> thread appears to die.  I tried putting the Dispatch call in the 
> mainline, then passing it to the function -- this kills Python (not too 
> surprising really).


As a test, you should try to make a minimal reproducing example without
Twisted (e.g. just launching a new thread instead of using thread pool).

My guess is that this is something to do with COM's threading rules
(they're complex, apparently - the Python Win32 book has an appendix
discussing the issues), or perhaps a bug in win32com. But that's just a
guess, thus the need for a minimal example.



From andrew at bemusement.org  Mon May  3 21:06:12 2010
From: andrew at bemusement.org (Andrew Bennetts)
Date: Tue, 4 May 2010 11:06:12 +1000
Subject: [Twisted-Python] win32com client in a twisted thread
In-Reply-To: <hrnpug$4i2$1@dough.gmane.org>
References: <hrnpug$4i2$1@dough.gmane.org>
Message-ID: <20100504010612.GA30559@steerpike.home.puzzling.org>

Don Dwiggins wrote:
> I'm running a Windows service with Twisted (xmlrpc), and I've run into 
> an odd case.
> 
> In a recently implemented method, I create a COM object with 
> win32com.client.Dispatch (using a COM DLL that's part of the overall 
> application) and make a couple of calls on it, getting a return value. 
> This works well, except that the COM object calls a web service, which 
> can take a few seconds, so I wanted to defer it.
> 
> When I isolate it into a function, and call that with deferToThread, the 
> thread appears to die.  I tried putting the Dispatch call in the 
> mainline, then passing it to the function -- this kills Python (not too 
> surprising really).

My memory of this stuff is *very* hazy, but IIRC, if you want to use
win32com stuff from a non-main thread you need to call
pythoncom.CoInitialize() in that thread.

-Andrew.



From moxie at thoughtcrime.org  Tue May  4 09:48:50 2010
From: moxie at thoughtcrime.org (Moxie Marlinspike)
Date: Tue, 04 May 2010 09:48:50 -0400
Subject: [Twisted-Python] Reactor Spinning?
Message-ID: <4BE025C2.5010205@thoughtcrime.org>


Hey Twisted folks,

I'm using the twisted.web framework for a high performance HTTP proxy
server that very closely resembles the HTTP proxy server example that
comes with the twisted package.

Under heavy load, I occasionally run into a problem where the reactor
appears to start spinning on an "empty" write.  An strace of the process
reveals these system calls:

epoll_wait(3, {{EPOLLOUT, {u32=81, u64=13194703840475086929}}}, 269, 8) = 1
write(81, "", 0)                        = 0
gettimeofday({1272980323, 567613}, NULL) = 0
gettimeofday({1272980323, 567696}, NULL) = 0
epoll_wait(3, {{EPOLLOUT, {u32=81, u64=13194703840475086929}}}, 269, 8) = 1
write(81, "", 0)                        = 0
gettimeofday({1272980323, 567988}, NULL) = 0
gettimeofday({1272980323, 568071}, NULL) = 0
epoll_wait(3, {{EPOLLOUT, {u32=81, u64=13194703840475086929}}}, 269, 7) = 1
write(81, "", 0)                        = 0
gettimeofday({1272980323, 568501}, NULL) = 0
gettimeofday({1272980323, 568613}, NULL) = 0
epoll_wait(3, {{EPOLLOUT, {u32=81, u64=13194703840475086929}}}, 269, 7) = 1
write(81, "", 0)                        = 0
gettimeofday({1272980323, 568978}, NULL) = 0
gettimeofday({1272980323, 569084}, NULL) = 0
epoll_wait(3, {{EPOLLOUT, {u32=81, u64=13194703840475086929}}}, 269, 6) = 1
write(81, "", 0)                        = 0

...it seems to be waiting for write availability on a FD, trying to
write an empty buffer, seeing that it wrote zero bytes, and so waiting
for availability again.

I've confirmed that when this occurs, whatever FD it is spinning on does
correspond with a network socket connected to the proxy.  I've seen this
with both Twisted 8.2 and 9.0 running on Linux using both the epoll and
select reactors.

If anyone has any thoughts about this problem or has seen it before, I'd
appreciate any insight that anyone might have.

Thanks,

- moxie

-- 
http://www.thoughtcrime.org


From wthie at thiengineering.ch  Tue May  4 15:06:06 2010
From: wthie at thiengineering.ch (Werner Thie)
Date: Tue, 04 May 2010 21:06:06 +0200
Subject: [Twisted-Python] Reactor Spinning?
In-Reply-To: <4BE025C2.5010205@thoughtcrime.org>
References: <4BE025C2.5010205@thoughtcrime.org>
Message-ID: <4BE0701E.50801@thiengineering.ch>

Does it spin forever or does it clear up after some time?

I have occasional 'hickups' with heavy loads with responses taking 
several ten seconds for no apparent reason, the server then working 
again like nothing happened.

Werner

Moxie Marlinspike wrote:
> Hey Twisted folks,
> 
> I'm using the twisted.web framework for a high performance HTTP proxy
> server that very closely resembles the HTTP proxy server example that
> comes with the twisted package.
> 
> Under heavy load, I occasionally run into a problem where the reactor
> appears to start spinning on an "empty" write.  An strace of the process
> reveals these system calls:
> 
> epoll_wait(3, {{EPOLLOUT, {u32=81, u64=13194703840475086929}}}, 269, 8) = 1
> write(81, "", 0)                        = 0
> gettimeofday({1272980323, 567613}, NULL) = 0
> gettimeofday({1272980323, 567696}, NULL) = 0
> epoll_wait(3, {{EPOLLOUT, {u32=81, u64=13194703840475086929}}}, 269, 8) = 1
> write(81, "", 0)                        = 0
> gettimeofday({1272980323, 567988}, NULL) = 0
> gettimeofday({1272980323, 568071}, NULL) = 0
> epoll_wait(3, {{EPOLLOUT, {u32=81, u64=13194703840475086929}}}, 269, 7) = 1
> write(81, "", 0)                        = 0
> gettimeofday({1272980323, 568501}, NULL) = 0
> gettimeofday({1272980323, 568613}, NULL) = 0
> epoll_wait(3, {{EPOLLOUT, {u32=81, u64=13194703840475086929}}}, 269, 7) = 1
> write(81, "", 0)                        = 0
> gettimeofday({1272980323, 568978}, NULL) = 0
> gettimeofday({1272980323, 569084}, NULL) = 0
> epoll_wait(3, {{EPOLLOUT, {u32=81, u64=13194703840475086929}}}, 269, 6) = 1
> write(81, "", 0)                        = 0
> 
> ...it seems to be waiting for write availability on a FD, trying to
> write an empty buffer, seeing that it wrote zero bytes, and so waiting
> for availability again.
> 
> I've confirmed that when this occurs, whatever FD it is spinning on does
> correspond with a network socket connected to the proxy.  I've seen this
> with both Twisted 8.2 and 9.0 running on Linux using both the epoll and
> select reactors.
> 
> If anyone has any thoughts about this problem or has seen it before, I'd
> appreciate any insight that anyone might have.
> 
> Thanks,
> 
> - moxie
> 



From moxie at thoughtcrime.org  Tue May  4 15:34:59 2010
From: moxie at thoughtcrime.org (Moxie Marlinspike)
Date: Tue, 04 May 2010 15:34:59 -0400
Subject: [Twisted-Python] Reactor Spinning?
In-Reply-To: <4BE0701E.50801@thiengineering.ch>
References: <4BE025C2.5010205@thoughtcrime.org>
	<4BE0701E.50801@thiengineering.ch>
Message-ID: <4BE076E3.2080703@thoughtcrime.org>


I've seen it clear up before, but it will normally spin for days.  This
state doesn't really impact performance at all (requests are still
snappy), but it is annoying how much CPU time it eats through before a
restart.

- moxie

-- 
http://www.thoughtcrime.org


Werner Thie wrote:
> Does it spin forever or does it clear up after some time?
> 
> I have occasional 'hickups' with heavy loads with responses taking 
> several ten seconds for no apparent reason, the server then working 
> again like nothing happened.
> 
> Werner
> 
> Moxie Marlinspike wrote:
>> Hey Twisted folks,
>>
>> I'm using the twisted.web framework for a high performance HTTP proxy
>> server that very closely resembles the HTTP proxy server example that
>> comes with the twisted package.
>>
>> Under heavy load, I occasionally run into a problem where the reactor
>> appears to start spinning on an "empty" write.  An strace of the process
>> reveals these system calls:
>>
>> epoll_wait(3, {{EPOLLOUT, {u32=81, u64=13194703840475086929}}}, 269, 8) = 1
>> write(81, "", 0)                        = 0
>> gettimeofday({1272980323, 567613}, NULL) = 0
>> gettimeofday({1272980323, 567696}, NULL) = 0
>> epoll_wait(3, {{EPOLLOUT, {u32=81, u64=13194703840475086929}}}, 269, 8) = 1
>> write(81, "", 0)                        = 0
>> gettimeofday({1272980323, 567988}, NULL) = 0
>> gettimeofday({1272980323, 568071}, NULL) = 0
>> epoll_wait(3, {{EPOLLOUT, {u32=81, u64=13194703840475086929}}}, 269, 7) = 1
>> write(81, "", 0)                        = 0
>> gettimeofday({1272980323, 568501}, NULL) = 0
>> gettimeofday({1272980323, 568613}, NULL) = 0
>> epoll_wait(3, {{EPOLLOUT, {u32=81, u64=13194703840475086929}}}, 269, 7) = 1
>> write(81, "", 0)                        = 0
>> gettimeofday({1272980323, 568978}, NULL) = 0
>> gettimeofday({1272980323, 569084}, NULL) = 0
>> epoll_wait(3, {{EPOLLOUT, {u32=81, u64=13194703840475086929}}}, 269, 6) = 1
>> write(81, "", 0)                        = 0
>>
>> ...it seems to be waiting for write availability on a FD, trying to
>> write an empty buffer, seeing that it wrote zero bytes, and so waiting
>> for availability again.
>>
>> I've confirmed that when this occurs, whatever FD it is spinning on does
>> correspond with a network socket connected to the proxy.  I've seen this
>> with both Twisted 8.2 and 9.0 running on Linux using both the epoll and
>> select reactors.
>>
>> If anyone has any thoughts about this problem or has seen it before, I'd
>> appreciate any insight that anyone might have.
>>
>> Thanks,
>>
>> - moxie
>>
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 


From itamar at itamarst.org  Tue May  4 16:30:17 2010
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Tue, 4 May 2010 16:30:17 -0400 (EDT)
Subject: [Twisted-Python] Reactor Spinning?
In-Reply-To: <4BE025C2.5010205@thoughtcrime.org>
References: <4BE025C2.5010205@thoughtcrime.org>
Message-ID: <46539.63.107.91.99.1273005017.squirrel@webmail.zoteca.com>

>
> Hey Twisted folks,
>
> I'm using the twisted.web framework for a high performance HTTP proxy
> server that very closely resembles the HTTP proxy server example that
> comes with the twisted package.
>
> Under heavy load, I occasionally run into a problem where the reactor
> appears to start spinning on an "empty" write.  An strace of the process
> reveals these system calls:

Can you produce a minimal reproducing example of a program that has this
issue? I can imagine a code bug where you're calling
transport.resumeProducing() or startWriting() sometime when you shouldn't,
except the empty write() does look wrong... a minimal code sample would
help.



From exarkun at twistedmatrix.com  Tue May  4 17:42:40 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 04 May 2010 21:42:40 -0000
Subject: [Twisted-Python] Reactor Spinning?
In-Reply-To: <4BE025C2.5010205@thoughtcrime.org>
References: <4BE025C2.5010205@thoughtcrime.org>
Message-ID: <20100504214240.1642.1501163969.divmod.xquotient.9@localhost.localdomain>

On 01:48 pm, moxie at thoughtcrime.org wrote:
>
>Hey Twisted folks,
>
>I'm using the twisted.web framework for a high performance HTTP proxy
>server that very closely resembles the HTTP proxy server example that
>comes with the twisted package.
>
>Under heavy load, I occasionally run into a problem where the reactor
>appears to start spinning on an "empty" write.  An strace of the 
>process
>reveals these system calls:
>
>epoll_wait(3, {{EPOLLOUT, {u32=81, u64=13194703840475086929}}}, 269, 8) 
>= 1
>write(81, "", 0)                        = 0

It might be interesting to learn what's in the reactor that's associated 
with this file descriptor and what the state of its send buffer is. 
Some strategically placed log messages might help with that, or a 
manhole in the process that you can connect to when you notice the 
problem has started in order to poke around.

Jean-Paul


From ddwiggins at advpubtech.com  Tue May  4 20:45:43 2010
From: ddwiggins at advpubtech.com (Don Dwiggins)
Date: Tue, 04 May 2010 17:45:43 -0700
Subject: [Twisted-Python] win32com client in a twisted thread
In-Reply-To: <20100504010612.GA30559@steerpike.home.puzzling.org>
References: <hrnpug$4i2$1@dough.gmane.org>
	<20100504010612.GA30559@steerpike.home.puzzling.org>
Message-ID: <hrqf3o$j66$1@dough.gmane.org>

Andrew, Itamar,  thanks.  I've taken the hint to CoInitialize the 
thread.  That gets me a bit further, but there's still some strange 
stuff going on.  I'm going to have to put this on the back burner for a 
while in favor of higher priority stuff.

-- 
Don Dwiggins
Advanced Publishing Technology



From petshmidt at googlemail.com  Wed May  5 07:45:06 2010
From: petshmidt at googlemail.com (Pet)
Date: Wed, 5 May 2010 13:45:06 +0200
Subject: [Twisted-Python] print unicode
Message-ID: <k2ib460e9631005050445s91e092c4i1d89b8636e38c1ba@mail.gmail.com>

Hello!

I'm using Twisted 10.0 and as usually sometime print debug infos with
myunicodestr.encode('UTF-8') which are saved to logfile, but since
using twisted 10 I'm getting

UnicodeEncodeError: 'ascii' codec can't encode characters...

type(myunicodestr) returns <type 'unicode'>


What is the problem here?

Thanks!


From maarten at treewalker.org  Wed May  5 08:05:24 2010
From: maarten at treewalker.org (Maarten ter Huurne)
Date: Wed, 5 May 2010 14:05:24 +0200
Subject: [Twisted-Python] print unicode
In-Reply-To: <k2ib460e9631005050445s91e092c4i1d89b8636e38c1ba@mail.gmail.com>
References: <k2ib460e9631005050445s91e092c4i1d89b8636e38c1ba@mail.gmail.com>
Message-ID: <201005051405.25083.maarten@treewalker.org>

On Wednesday 05 May 2010, Pet wrote:

> I'm using Twisted 10.0 and as usually sometime print debug infos with
> myunicodestr.encode('UTF-8') which are saved to logfile, but since
> using twisted 10 I'm getting
> 
> UnicodeEncodeError: 'ascii' codec can't encode characters...

UTF-8 uses the full 8 bits of a byte, while ASCII only uses 7, so writing 
Unicode encoded as UTF-8 to an ASCII stream is not valid.

I think recent Python versions are more strict about what is written to 
stdout/stderr than older versions, it might not be related to Twisted 
itself. You can specify a different encoding for stdin/out/err by setting 
the PYTHONIOENCODING environment variable.

Bye,
		Maarten


From petshmidt at googlemail.com  Wed May  5 08:31:31 2010
From: petshmidt at googlemail.com (Pet)
Date: Wed, 5 May 2010 14:31:31 +0200
Subject: [Twisted-Python] print unicode
In-Reply-To: <201005051405.25083.maarten@treewalker.org>
References: <k2ib460e9631005050445s91e092c4i1d89b8636e38c1ba@mail.gmail.com> 
	<201005051405.25083.maarten@treewalker.org>
Message-ID: <j2mb460e9631005050531s6ad6c0eave0623bf1d08fb5ef@mail.gmail.com>

On Wed, May 5, 2010 at 2:05 PM, Maarten ter Huurne
<maarten at treewalker.org> wrote:
> On Wednesday 05 May 2010, Pet wrote:
>
>> I'm using Twisted 10.0 and as usually sometime print debug infos with
>> myunicodestr.encode('UTF-8') which are saved to logfile, but since
>> using twisted 10 I'm getting
>>
>> UnicodeEncodeError: 'ascii' codec can't encode characters...
>
> UTF-8 uses the full 8 bits of a byte, while ASCII only uses 7, so writing
> Unicode encoded as UTF-8 to an ASCII stream is not valid.
>
> I think recent Python versions are more strict about what is written to
> stdout/stderr than older versions, it might not be related to Twisted
> itself. You can specify a different encoding for stdin/out/err by setting
> the PYTHONIOENCODING environment variable.

Hi Maarten!

Thanks for help!
Unfortunately, my Python installation is 2.5.2 and PYTHONIOENCODING is
introduced in 2.6

Pet
>
> Bye,
> ? ? ? ? ? ? ? ?Maarten
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From p.mayers at imperial.ac.uk  Wed May  5 08:47:38 2010
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 05 May 2010 13:47:38 +0100
Subject: [Twisted-Python] print unicode
In-Reply-To: <j2mb460e9631005050531s6ad6c0eave0623bf1d08fb5ef@mail.gmail.com>
References: <k2ib460e9631005050445s91e092c4i1d89b8636e38c1ba@mail.gmail.com>
	<201005051405.25083.maarten@treewalker.org>
	<j2mb460e9631005050531s6ad6c0eave0623bf1d08fb5ef@mail.gmail.com>
Message-ID: <4BE168EA.4040703@imperial.ac.uk>

On 05/05/10 13:31, Pet wrote:
> On Wed, May 5, 2010 at 2:05 PM, Maarten ter Huurne
> <maarten at treewalker.org>  wrote:
>> On Wednesday 05 May 2010, Pet wrote:
>>
>>> I'm using Twisted 10.0 and as usually sometime print debug infos with
>>> myunicodestr.encode('UTF-8') which are saved to logfile, but since
>>> using twisted 10 I'm getting
>>>
>>> UnicodeEncodeError: 'ascii' codec can't encode characters...
>>
>> UTF-8 uses the full 8 bits of a byte, while ASCII only uses 7, so writing
>> Unicode encoded as UTF-8 to an ASCII stream is not valid.
>>
>> I think recent Python versions are more strict about what is written to
>> stdout/stderr than older versions, it might not be related to Twisted
>> itself. You can specify a different encoding for stdin/out/err by setting
>> the PYTHONIOENCODING environment variable.
>
> Hi Maarten!
>
> Thanks for help!
> Unfortunately, my Python installation is 2.5.2 and PYTHONIOENCODING is
> introduced in 2.6

I think this is highly dependent on your OS environment. For example:

Python 2.4.3 (#1, Oct 23 2006, 14:19:47)
[GCC 4.1.1 20060525 (Red Hat 4.1.1-1)] o
Type "help", "copyright", "credits" or "
 >>> import sys
 >>> sys.getdefaultencoding()
'ascii'
 >>> print unichr(163)
?


[pjm3 at wildfire ~]$ echo $LANG
en_GB.UTF-8

...but:

LANG=C python
Python 2.4.3 (#1, Oct 23 2006, 14:19:47)
[GCC 4.1.1 20060525 (Red Hat 4.1.1-1)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
 >>> print unichr(163)
Traceback (most recent call last):
   File "<stdin>", line 1, in ?
UnicodeEncodeError: 'ascii' codec can't encode character u'\xa3' in 
position 0: ordinal not in range(128)

...i.e. here I can just print unicode characters, with nothing 
particularly special, provided my environment variables are set right.


From itamar at itamarst.org  Wed May  5 08:49:57 2010
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 05 May 2010 08:49:57 -0400
Subject: [Twisted-Python] print unicode
In-Reply-To: <k2ib460e9631005050445s91e092c4i1d89b8636e38c1ba@mail.gmail.com>
References: <k2ib460e9631005050445s91e092c4i1d89b8636e38c1ba@mail.gmail.com>
Message-ID: <1273063797.25839.10.camel@pintsize>

On Wed, 2010-05-05 at 13:45 +0200, Pet wrote:
> Hello!
> 
> I'm using Twisted 10.0 and as usually sometime print debug infos with
> myunicodestr.encode('UTF-8') which are saved to logfile, but since
> using twisted 10 I'm getting
> 
> UnicodeEncodeError: 'ascii' codec can't encode characters...
> 
> type(myunicodestr) returns <type 'unicode'>
> 
> 
> What is the problem here?

This works fine for me (Twisted trunk):

$ python2.5 -c "import sys; from twisted.python import log; \
log.startLogging(file('/tmp/log', 'w')); print \
u'\u1234'.encode('UTF-8')"
$ cat /tmp/log 
2010-05-05 08:48:40-0400 [-] Log opened.
2010-05-05 08:48:40-0400 [-] ?

Can you include a minimal reproducing example?



From dfarrell at mypublisher.com  Wed May  5 10:00:47 2010
From: dfarrell at mypublisher.com (Doug Farrell)
Date: Wed, 5 May 2010 10:00:47 -0400
Subject: [Twisted-Python] SQLAlchemy and Twisted
Message-ID: <318F79422ADC5041A93343721F84474D031FE1E4@exchange.mypublisher.local>

Hi all,

 

I've been doing some searching about how to get SQLAlchemy and Twisted
working together in a Twisted application. Though I've found a lot of
information, I haven't seen (or figured out) a good working solution or
definitive answer. The most promising one I've run across concerns
running the SQLAlchemy queries in a separate process (rather than a
separate thread) and communicating the queries between the Twisted
application in one process and the SQLAlchemy application in another.
Does anyone have any good pointers, suggestions, ideas, links to how I
might go about setting something like this up? Here's a couple questions
that come to mind:

 

1)      Would the SQLAlchemy process also be a Twisted application with
all the queries running as deferreds in the main thread, and blocking?

2)      How would the Twisted process communicate with the SQLAlchemy
process, using something like XMLRPC, calling methods to perform the
queries? Or would the XMLRPC methods convey something more generic like
SQL?

 

Thanks in advance for any help!

Doug

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100505/e6a5de36/attachment.htm 

From petshmidt at googlemail.com  Wed May  5 10:10:47 2010
From: petshmidt at googlemail.com (Pet)
Date: Wed, 5 May 2010 16:10:47 +0200
Subject: [Twisted-Python] print unicode
In-Reply-To: <4BE168EA.4040703@imperial.ac.uk>
References: <k2ib460e9631005050445s91e092c4i1d89b8636e38c1ba@mail.gmail.com> 
	<201005051405.25083.maarten@treewalker.org>
	<j2mb460e9631005050531s6ad6c0eave0623bf1d08fb5ef@mail.gmail.com>
	<4BE168EA.4040703@imperial.ac.uk>
Message-ID: <u2xb460e9631005050710ice4ae645y106dcff7025b0748@mail.gmail.com>

On Wed, May 5, 2010 at 2:47 PM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
> On 05/05/10 13:31, Pet wrote:
>> On Wed, May 5, 2010 at 2:05 PM, Maarten ter Huurne
>> <maarten at treewalker.org> ?wrote:
>>> On Wednesday 05 May 2010, Pet wrote:
>>>
>>>> I'm using Twisted 10.0 and as usually sometime print debug infos with
>>>> myunicodestr.encode('UTF-8') which are saved to logfile, but since
>>>> using twisted 10 I'm getting
>>>>
>>>> UnicodeEncodeError: 'ascii' codec can't encode characters...
>>>
>>> UTF-8 uses the full 8 bits of a byte, while ASCII only uses 7, so writing
>>> Unicode encoded as UTF-8 to an ASCII stream is not valid.
>>>
>>> I think recent Python versions are more strict about what is written to
>>> stdout/stderr than older versions, it might not be related to Twisted
>>> itself. You can specify a different encoding for stdin/out/err by setting
>>> the PYTHONIOENCODING environment variable.
>>
>> Hi Maarten!
>>
>> Thanks for help!
>> Unfortunately, my Python installation is 2.5.2 and PYTHONIOENCODING is
>> introduced in 2.6
>
> I think this is highly dependent on your OS environment. For example:
>
> Python 2.4.3 (#1, Oct 23 2006, 14:19:47)
> [GCC 4.1.1 20060525 (Red Hat 4.1.1-1)] o
> Type "help", "copyright", "credits" or "
> ?>>> import sys
> ?>>> sys.getdefaultencoding()
> 'ascii'
> ?>>> print unichr(163)
> ?

on python console it works for me, but not in application, if the
string to be printed is fetched from db which is utf-8

>
>
> [pjm3 at wildfire ~]$ echo $LANG
> en_GB.UTF-8
>
> ...but:
>
> LANG=C python
> Python 2.4.3 (#1, Oct 23 2006, 14:19:47)
> [GCC 4.1.1 20060525 (Red Hat 4.1.1-1)] on linux2
> Type "help", "copyright", "credits" or "license" for more information.
> ?>>> print unichr(163)
> Traceback (most recent call last):
> ? File "<stdin>", line 1, in ?
> UnicodeEncodeError: 'ascii' codec can't encode character u'\xa3' in
> position 0: ordinal not in range(128)
>
> ...i.e. here I can just print unicode characters, with nothing
> particularly special, provided my environment variables are set right.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From petshmidt at googlemail.com  Wed May  5 10:15:51 2010
From: petshmidt at googlemail.com (Pet)
Date: Wed, 5 May 2010 16:15:51 +0200
Subject: [Twisted-Python] print unicode
In-Reply-To: <1273063797.25839.10.camel@pintsize>
References: <k2ib460e9631005050445s91e092c4i1d89b8636e38c1ba@mail.gmail.com> 
	<1273063797.25839.10.camel@pintsize>
Message-ID: <q2yb460e9631005050715pa8b289e8p1dd91a61cc3e7818@mail.gmail.com>

On Wed, May 5, 2010 at 2:49 PM, Itamar Turner-Trauring
<itamar at itamarst.org> wrote:
> On Wed, 2010-05-05 at 13:45 +0200, Pet wrote:
>> Hello!
>>
>> I'm using Twisted 10.0 and as usually sometime print debug infos with
>> myunicodestr.encode('UTF-8') which are saved to logfile, but since
>> using twisted 10 I'm getting
>>
>> UnicodeEncodeError: 'ascii' codec can't encode characters...
>>
>> type(myunicodestr) returns <type 'unicode'>
>>
>>
>> What is the problem here?
>
> This works fine for me (Twisted trunk):
>
> $ python2.5 -c "import sys; from twisted.python import log; \
> log.startLogging(file('/tmp/log', 'w')); print \
> u'\u1234'.encode('UTF-8')"
> $ cat /tmp/log
> 2010-05-05 08:48:40-0400 [-] Log opened.
> 2010-05-05 08:48:40-0400 [-] ?
>
> Can you include a minimal reproducing example?

If I print as you do it works, but my string is fetched from database
and only then it fails

>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From moxie at thoughtcrime.org  Wed May  5 10:20:21 2010
From: moxie at thoughtcrime.org (Moxie Marlinspike)
Date: Wed, 05 May 2010 10:20:21 -0400
Subject: [Twisted-Python] Reactor Spinning?
In-Reply-To: <46539.63.107.91.99.1273005017.squirrel@webmail.zoteca.com>
References: <4BE025C2.5010205@thoughtcrime.org>
	<46539.63.107.91.99.1273005017.squirrel@webmail.zoteca.com>
Message-ID: <4BE17EA5.8000606@thoughtcrime.org>


Hey Itamar, the problem is that this only occurs under heavy load in a
production environment (of course!), so I don't really have any way of
testing a simplified version.

The code itself is fairly simple, however, and is almost identical to
the code that ships in twisted.web.proxy.

This is to say that I'm simply shuttling data between an HTTPClient
object and a Request object.  I never call transport.resumeProducing()
or startWriting() myself, and I only call transport.write() in exactly
one place (when sending POST data via HTTPClient).  The rest of the time
I'm writing to either the Request object (not its transport) when
communicating back to the clients, or availing myself of higher-level
methods like HTTPClient.sendHeader() when writing to the server side.

The code is available here:
http://www.googlesharing.net/server/googleshare-0.9.tar.gz

- moxie

-- 
http://www.thoughtcrime.org


Itamar Turner-Trauring wrote:

> Can you produce a minimal reproducing example of a program that has this
> issue? I can imagine a code bug where you're calling
> transport.resumeProducing() or startWriting() sometime when you shouldn't,
> except the empty write() does look wrong... a minimal code sample would
> help.


From moxie at thoughtcrime.org  Wed May  5 10:22:54 2010
From: moxie at thoughtcrime.org (Moxie Marlinspike)
Date: Wed, 05 May 2010 10:22:54 -0400
Subject: [Twisted-Python] Reactor Spinning?
In-Reply-To: <20100504214240.1642.1501163969.divmod.xquotient.9@localhost.localdomain>
References: <4BE025C2.5010205@thoughtcrime.org>
	<20100504214240.1642.1501163969.divmod.xquotient.9@localhost.localdomain>
Message-ID: <4BE17F3E.1060800@thoughtcrime.org>


I've confirmed that when spinning the FD corresponds with a client
connection.  What would you suggest logging that might provide some insight?

Given what I understand about manholes, the fact that this only occurs
in a production environment which must remain high performance means
that might not be an option for me.

- moxie

-- 
http://www.thoughtcrime.org


exarkun at twistedmatrix.com wrote:
> It might be interesting to learn what's in the reactor that's associated 
> with this file descriptor and what the state of its send buffer is. 
> Some strategically placed log messages might help with that, or a 
> manhole in the process that you can connect to when you notice the 
> problem has started in order to poke around.
> 
> Jean-Paul


From petshmidt at googlemail.com  Wed May  5 10:29:16 2010
From: petshmidt at googlemail.com (Pet)
Date: Wed, 5 May 2010 16:29:16 +0200
Subject: [Twisted-Python] print unicode
In-Reply-To: <q2yb460e9631005050715pa8b289e8p1dd91a61cc3e7818@mail.gmail.com>
References: <k2ib460e9631005050445s91e092c4i1d89b8636e38c1ba@mail.gmail.com> 
	<1273063797.25839.10.camel@pintsize>
	<q2yb460e9631005050715pa8b289e8p1dd91a61cc3e7818@mail.gmail.com>
Message-ID: <p2gb460e9631005050729g9dfb1838w5510369e80eeee43@mail.gmail.com>

On Wed, May 5, 2010 at 4:15 PM, Pet <petshmidt at googlemail.com> wrote:
> On Wed, May 5, 2010 at 2:49 PM, Itamar Turner-Trauring
> <itamar at itamarst.org> wrote:
>> On Wed, 2010-05-05 at 13:45 +0200, Pet wrote:
>>> Hello!
>>>
>>> I'm using Twisted 10.0 and as usually sometime print debug infos with
>>> myunicodestr.encode('UTF-8') which are saved to logfile, but since
>>> using twisted 10 I'm getting
>>>
>>> UnicodeEncodeError: 'ascii' codec can't encode characters...
>>>
>>> type(myunicodestr) returns <type 'unicode'>
>>>
>>>
>>> What is the problem here?
>>
>> This works fine for me (Twisted trunk):
>>
>> $ python2.5 -c "import sys; from twisted.python import log; \
>> log.startLogging(file('/tmp/log', 'w')); print \
>> u'\u1234'.encode('UTF-8')"
>> $ cat /tmp/log
>> 2010-05-05 08:48:40-0400 [-] Log opened.
>> 2010-05-05 08:48:40-0400 [-] ?
>>
>> Can you include a minimal reproducing example?
>
> If I print as you do it works, but my string is fetched from database
> and only then it fails

It's pretty weird. I've send  as parameter {'s': u'c\u0142a'} to
twisted xml-rpc server after it was restarted and it has printed
param['s'].encode('UTF-8') without errors. Immidiately after that I've
send the same request again and it failed to print it. I've restarted
the server again and at the first request it prints without errors,
all other requests raise exceptions. So it has nothing to do with
database.

>
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>


From itamar at itamarst.org  Wed May  5 10:33:53 2010
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 05 May 2010 10:33:53 -0400
Subject: [Twisted-Python] print unicode
In-Reply-To: <q2yb460e9631005050715pa8b289e8p1dd91a61cc3e7818@mail.gmail.com>
References: <k2ib460e9631005050445s91e092c4i1d89b8636e38c1ba@mail.gmail.com>
	<1273063797.25839.10.camel@pintsize>
	<q2yb460e9631005050715pa8b289e8p1dd91a61cc3e7818@mail.gmail.com>
Message-ID: <1273070033.25839.15.camel@pintsize>

On Wed, 2010-05-05 at 16:15 +0200, Pet wrote:

> If I print as you do it works, but my string is fetched from database
> and only then it fails

Strings coming out of the database are usually just strings. There's
nothing database (or Twisted) specific about them.



From petshmidt at googlemail.com  Wed May  5 10:47:16 2010
From: petshmidt at googlemail.com (Pet)
Date: Wed, 5 May 2010 16:47:16 +0200
Subject: [Twisted-Python] print unicode
In-Reply-To: <p2gb460e9631005050729g9dfb1838w5510369e80eeee43@mail.gmail.com>
References: <k2ib460e9631005050445s91e092c4i1d89b8636e38c1ba@mail.gmail.com> 
	<1273063797.25839.10.camel@pintsize>
	<q2yb460e9631005050715pa8b289e8p1dd91a61cc3e7818@mail.gmail.com>
	<p2gb460e9631005050729g9dfb1838w5510369e80eeee43@mail.gmail.com>
Message-ID: <t2qb460e9631005050747t5fe853c0v3b7b071f027dd43b@mail.gmail.com>

On Wed, May 5, 2010 at 4:29 PM, Pet <petshmidt at googlemail.com> wrote:
> On Wed, May 5, 2010 at 4:15 PM, Pet <petshmidt at googlemail.com> wrote:
>> On Wed, May 5, 2010 at 2:49 PM, Itamar Turner-Trauring
>> <itamar at itamarst.org> wrote:
>>> On Wed, 2010-05-05 at 13:45 +0200, Pet wrote:
>>>> Hello!
>>>>
>>>> I'm using Twisted 10.0 and as usually sometime print debug infos with
>>>> myunicodestr.encode('UTF-8') which are saved to logfile, but since
>>>> using twisted 10 I'm getting
>>>>
>>>> UnicodeEncodeError: 'ascii' codec can't encode characters...
>>>>
>>>> type(myunicodestr) returns <type 'unicode'>
>>>>
>>>>
>>>> What is the problem here?
>>>
>>> This works fine for me (Twisted trunk):
>>>
>>> $ python2.5 -c "import sys; from twisted.python import log; \
>>> log.startLogging(file('/tmp/log', 'w')); print \
>>> u'\u1234'.encode('UTF-8')"
>>> $ cat /tmp/log
>>> 2010-05-05 08:48:40-0400 [-] Log opened.
>>> 2010-05-05 08:48:40-0400 [-] ?
>>>
>>> Can you include a minimal reproducing example?
>>
>> If I print as you do it works, but my string is fetched from database
>> and only then it fails
>
> It's pretty weird. I've send ?as parameter {'s': u'c\u0142a'} to
> twisted xml-rpc server after it was restarted and it has printed
> param['s'].encode('UTF-8') without errors. Immidiately after that I've
> send the same request again and it failed to print it. I've restarted
> the server again and at the first request it prints without errors,
> all other requests raise exceptions. So it has nothing to do with
> database.


Now, I'm getting Exception with

          File "/usr/local/tw10/lib/python2.5/site-packages/Twisted-10.0.0-py2.5-linux-x86_64.egg/twisted/python/log.py",
line 555, in write
            d = (self.buf + data).split('\n')
        exceptions.UnicodeDecodeError: 'ascii' codec can't decode byte
0xc5 in position 4: ordinal not in range(128)




>
>>
>>>
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>
>


From p.mayers at imperial.ac.uk  Wed May  5 10:51:57 2010
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 05 May 2010 15:51:57 +0100
Subject: [Twisted-Python] Reactor Spinning?
In-Reply-To: <4BE17F3E.1060800@thoughtcrime.org>
References: <4BE025C2.5010205@thoughtcrime.org>	<20100504214240.1642.1501163969.divmod.xquotient.9@localhost.localdomain>
	<4BE17F3E.1060800@thoughtcrime.org>
Message-ID: <4BE1860D.5070602@imperial.ac.uk>

On 05/05/10 15:22, Moxie Marlinspike wrote:
>
> I've confirmed that when spinning the FD corresponds with a client
> connection.  What would you suggest logging that might provide some insight?
>
> Given what I understand about manholes, the fact that this only occurs
> in a production environment which must remain high performance means
> that might not be an option for me.

A manhole is really just a listening connection which spawns a python 
interpreter. It doesn't consume any CPU adding a manhole to a twisted 
server, and very little CPU accessing it (unless you do something *in* 
the manhole that consumes a lot of CPU)


From itamar at itamarst.org  Wed May  5 10:54:22 2010
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 05 May 2010 10:54:22 -0400
Subject: [Twisted-Python] print unicode
In-Reply-To: <t2qb460e9631005050747t5fe853c0v3b7b071f027dd43b@mail.gmail.com>
References: <k2ib460e9631005050445s91e092c4i1d89b8636e38c1ba@mail.gmail.com>
	<1273063797.25839.10.camel@pintsize>
	<q2yb460e9631005050715pa8b289e8p1dd91a61cc3e7818@mail.gmail.com>
	<p2gb460e9631005050729g9dfb1838w5510369e80eeee43@mail.gmail.com>
	<t2qb460e9631005050747t5fe853c0v3b7b071f027dd43b@mail.gmail.com>
Message-ID: <1273071262.25839.17.camel@pintsize>

On Wed, 2010-05-05 at 16:47 +0200, Pet wrote:
> Now, I'm getting Exception with
> 
>           File "/usr/local/tw10/lib/python2.5/site-packages/Twisted-10.0.0-py2.5-linux-x86_64.egg/twisted/python/log.py",
> line 555, in write
>             d = (self.buf + data).split('\n')
>         exceptions.UnicodeDecodeError: 'ascii' codec can't decode byte
> 0xc5 in position 4: ordinal not in range(128)

Are you logging/printing unencoded unicode strings (i.e. type(s) ==
unicode)? Twisted does not support that.



From petshmidt at googlemail.com  Wed May  5 11:06:57 2010
From: petshmidt at googlemail.com (Pet)
Date: Wed, 5 May 2010 17:06:57 +0200
Subject: [Twisted-Python] print unicode
In-Reply-To: <1273071262.25839.17.camel@pintsize>
References: <k2ib460e9631005050445s91e092c4i1d89b8636e38c1ba@mail.gmail.com> 
	<1273063797.25839.10.camel@pintsize>
	<q2yb460e9631005050715pa8b289e8p1dd91a61cc3e7818@mail.gmail.com>
	<p2gb460e9631005050729g9dfb1838w5510369e80eeee43@mail.gmail.com> 
	<t2qb460e9631005050747t5fe853c0v3b7b071f027dd43b@mail.gmail.com> 
	<1273071262.25839.17.camel@pintsize>
Message-ID: <r2jb460e9631005050806od40dcccfpfcc77cd8a45c7bcb@mail.gmail.com>

On Wed, May 5, 2010 at 4:54 PM, Itamar Turner-Trauring
<itamar at itamarst.org> wrote:
> On Wed, 2010-05-05 at 16:47 +0200, Pet wrote:
>> Now, I'm getting Exception with
>>
>> ? ? ? ? ? File "/usr/local/tw10/lib/python2.5/site-packages/Twisted-10.0.0-py2.5-linux-x86_64.egg/twisted/python/log.py",
>> line 555, in write
>> ? ? ? ? ? ? d = (self.buf + data).split('\n')
>> ? ? ? ? exceptions.UnicodeDecodeError: 'ascii' codec can't decode byte
>> 0xc5 in position 4: ordinal not in range(128)
>
> Are you logging/printing unencoded unicode strings (i.e. type(s) ==
> unicode)? Twisted does not support that.

No, this exception occurs if I do print myunicodestring.encode('UTF-8')
As I said before, it doesn't happen at first request after server restart.

>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From ddwiggins at advpubtech.com  Wed May  5 12:03:32 2010
From: ddwiggins at advpubtech.com (Don Dwiggins)
Date: Wed, 05 May 2010 09:03:32 -0700
Subject: [Twisted-Python] SQLAlchemy and Twisted
In-Reply-To: <318F79422ADC5041A93343721F84474D031FE1E4@exchange.mypublisher.local>
References: <318F79422ADC5041A93343721F84474D031FE1E4@exchange.mypublisher.local>
Message-ID: <hrs4sl$9kb$1@dough.gmane.org>

Doug Farrell wrote:
> I?ve been doing some searching about how to get SQLAlchemy and Twisted 
> working together in a Twisted application. Though I?ve found a lot of 
> information, I haven?t seen (or figured out) a good working solution or 
> definitive answer. The most promising one I?ve run across concerns 
> running the SQLAlchemy queries in a separate process (rather than a 
> separate thread) and communicating the queries between the Twisted 
> application in one process and the SQLAlchemy application in another. 
> Does anyone have any good pointers, suggestions, ideas, links to how I 
> might go about setting something like this up? 

The best advice I've gotten was from David Bolen; you can find an 
interchange between him and me on the SA list on October 22 and 23 of 
last year.  The upshot of it is, it shouldn't be a problem to use the 
SQL level if you're careful to keep the database accesses in a separate 
thread (and Bolen has done that); using the ORM level, however, can be 
problematic if you're tempted to access ORM objects in the main thread 
(since you're not directly in control of when database accesses occur).

> Here?s a couple questions that come to mind:
> 
> 1)      Would the SQLAlchemy process also be a Twisted application with 
> all the queries running as deferreds in the main thread, and blocking?

There might be value in reworking the SA concepts into a Twisted 
package, so that the asynchrony is "built in".  I haven't heard of any 
indications of that happening.

> 2)      How would the Twisted process communicate with the SQLAlchemy 
> process, using something like XMLRPC, calling methods to perform the 
> queries? Or would the XMLRPC methods convey something more generic like SQL?

Well, Bolen used a dedicated worker thread to do the SA operations (all 
SQL level), passing functions to it to be executed in that context.  He 
also used a single connection in the thread to do all DB operations.

-- 
Don Dwiggins
Advanced Publishing Technology



From chris at simplistix.co.uk  Wed May  5 12:07:05 2010
From: chris at simplistix.co.uk (Chris Withers)
Date: Wed, 05 May 2010 17:07:05 +0100
Subject: [Twisted-Python] SQLAlchemy and Twisted
In-Reply-To: <318F79422ADC5041A93343721F84474D031FE1E4@exchange.mypublisher.local>
References: <318F79422ADC5041A93343721F84474D031FE1E4@exchange.mypublisher.local>
Message-ID: <4BE197A9.4030505@simplistix.co.uk>

Doug Farrell wrote:
> 
> I?ve been doing some searching about how to get SQLAlchemy and Twisted 
> working together in a Twisted application. 

Short version: to be safe, anything that touches any SQLAlchemy-mapped 
object needs to be run in its own thread. Any query or access of an 
attribute of a mapped object may result in a blocking sql query. (aka: 
twisted doesn't play nice with orms)

> definitive answer. The most promising one I?ve run across concerns 
> running the SQLAlchemy queries in a separate process (rather than a 
> separate thread) and communicating the queries between the Twisted 
> application in one process and the SQLAlchemy application in another. 

That seems a little odd.
What would be the IPC?
How would the "sqlachemy application" be run?

> 1)      Would the SQLAlchemy process also be a Twisted application with 
> all the queries running as deferreds in the main thread, and blocking?

What do you men by "all the queries"?

> Thanks in advance for any help!

In my case, since most of the app I'm working on is "web requested" 
(either xmlrpc or http), I just agve up and used a good wsgi stack 
(repoze.bfg in my case) and munge other incoming requests into wsgi 
requests.

Twisted's wsgi server runs each request in its own thread, so be it.

cheers,

Chris



From itamar at itamarst.org  Wed May  5 13:01:13 2010
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 5 May 2010 13:01:13 -0400 (EDT)
Subject: [Twisted-Python] Reactor Spinning?
In-Reply-To: <4BE17F3E.1060800@thoughtcrime.org>
References: <4BE025C2.5010205@thoughtcrime.org>
	<20100504214240.1642.1501163969.divmod.xquotient.9@localhost.localdomain>
	<4BE17F3E.1060800@thoughtcrime.org>
Message-ID: <3973.63.107.91.99.1273078873.squirrel@webmail.zoteca.com>

>
> I've confirmed that when spinning the FD corresponds with a client
> connection.  What would you suggest logging that might provide some
> insight?

What is the transport's writeSomeData() method doing? Is it actually
trying to write an empty string? Transition from/to writeable state may
also be interesting, along with logging size of transport's buffer (so
logging in stopWriting/startWriting).



From chris at simplistix.co.uk  Thu May  6 06:08:02 2010
From: chris at simplistix.co.uk (Chris Withers)
Date: Thu, 06 May 2010 11:08:02 +0100
Subject: [Twisted-Python] How do I get xUnit output from trial for Hudson?
Message-ID: <4BE29502.4010609@simplistix.co.uk>

Hi All,

How can I get trial to emit output that makes Hudson happy?

cheers,

Chris



From chris at simplistix.co.uk  Thu May  6 06:30:25 2010
From: chris at simplistix.co.uk (Chris Withers)
Date: Thu, 06 May 2010 11:30:25 +0100
Subject: [Twisted-Python] How do I get xUnit output from trial for
	Hudson?
In-Reply-To: <4BE29502.4010609@simplistix.co.uk>
References: <4BE29502.4010609@simplistix.co.uk>
Message-ID: <4BE29A41.8010708@simplistix.co.uk>

Chris Withers wrote:
> How can I get trial to emit output that makes Hudson happy?

Er, shoot me, forgot I'd asked this before.

No-one written a junitxml reporter for trial?
Any guesses how hard that'd be?

cheers,

Chris



From alexandre at quessy.net  Thu May  6 09:25:32 2010
From: alexandre at quessy.net (Alexandre Quessy)
Date: Thu, 6 May 2010 09:25:32 -0400
Subject: [Twisted-Python] OSC protocol implementation
In-Reply-To: <1272336938.21360.3.camel@pintsize>
References: <4BD5AC2D.8060409@scherpenisse.net>
	<20100426155617.1984.402492984.divmod.xquotient.13@localhost.localdomain>
	<1272336938.21360.3.camel@pintsize>
Message-ID: <s2z72236ba91005060625of9d3e08y5d9002afa49d1020@mail.gmail.com>

Hello,

2010/4/26 Itamar Turner-Trauring <itamar at itamarst.org>:
> On Mon, 2010-04-26 at 15:56 +0000, exarkun at twistedmatrix.com wrote:
>
>> This is mainly a question of when someone finds it interesting enough to
>> review the code. ?Personally, while I remember commenting on that ticket
>> a couple months ago, I had to go re-read the wikipedia page to remember
>> what OSC is. ?Since this is a protocol I've never come across before and
>> which I can't think of any immediate applications that are relevant to
>> me, it's not likely I'll spontaneously go review the code. ?Perhaps
>> there is another developer who would be interested in this who will do
>> so. ?Posting on the list is a good way to try to get attention, as is
>> asking in the Freenode #twisted irc channel. ?If you can't find someone
>> who wants to review it just because they're interested, you might be
>> able to trade for a review of another ticket.
>
> As a worst case alternative if time becomes an issue, you can release
> this as a standalone project (many Twisted libraries have begun
> prefixing package names with tx, e.g. txAMPQ). It can always be merged
> later with Twisted if there's an interest (as long as the license
> doesn't conflict).
>

Yes, I guess we should use it a bit in productions so that we test it
thorougly. It won't be in the release in early June, so I guess we
should call it txosc for a few months before we submit it again to be
merged. The API might change while I use it in some projects.

Note that it is fully working right now, and we have completed the unit tests.

My only concern is this: if we make it a standalone project, I might
want to split it in three files, whereas it is in just one right now.
Maybe it's ok to create a subpackage in the in twisted.prototocols,
though, like the "gps" and "mice" subpackages.

Thanks,
Alex

>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Alexandre Quessy
http://alexandre.quessy.net/


From petshmidt at googlemail.com  Thu May  6 10:30:20 2010
From: petshmidt at googlemail.com (Pet)
Date: Thu, 6 May 2010 16:30:20 +0200
Subject: [Twisted-Python] multiline log entries
Message-ID: <q2yb460e9631005060730p6042d505g56db9d3685e076ba@mail.gmail.com>

Hello!

Is it possible to print multiline debug messages into log?

If print a query it looks like this


2010-05-06 10:10:07 [HTTPChannel,0,192.168.2.15]                     SELECT *
2010-05-06 10:10:07 [HTTPChannel,0,192.168.2.15]
FROM foo AS a
2010-05-06 10:10:07 [HTTPChannel,0,192.168.2.15]
JOIN bar AS b ON a.id = b.id
2010-05-06 10:10:07 [HTTPChannel,0,192.168.2.15]
WHERE a.id = 1
2010-05-06 10:10:07 [HTTPChannel,0,192.168.2.15]
ORDER BY id DESC
2010-05-06 10:10:07 [HTTPChannel,0,192.168.2.15]                     LIMIT 1;


it would be more practical to have only the query without timestamp on
other things

Thanks!


From exarkun at twistedmatrix.com  Thu May  6 10:37:50 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 06 May 2010 14:37:50 -0000
Subject: [Twisted-Python] multiline log entries
In-Reply-To: <q2yb460e9631005060730p6042d505g56db9d3685e076ba@mail.gmail.com>
References: <q2yb460e9631005060730p6042d505g56db9d3685e076ba@mail.gmail.com>
Message-ID: <20100506143750.1681.57250479.divmod.xquotient.4@localhost.localdomain>

On 02:30 pm, petshmidt at googlemail.com wrote:
>Hello!
>
>Is it possible to print multiline debug messages into log?
>
>If print a query it looks like this
>
>
>2010-05-06 10:10:07 [HTTPChannel,0,192.168.2.15] 
>SELECT *
>2010-05-06 10:10:07 [HTTPChannel,0,192.168.2.15]
>FROM foo AS a
>2010-05-06 10:10:07 [HTTPChannel,0,192.168.2.15]
>JOIN bar AS b ON a.id = b.id
>2010-05-06 10:10:07 [HTTPChannel,0,192.168.2.15]
>WHERE a.id = 1
>2010-05-06 10:10:07 [HTTPChannel,0,192.168.2.15]
>ORDER BY id DESC
>2010-05-06 10:10:07 [HTTPChannel,0,192.168.2.15] 
>LIMIT 1;
>
>
>it would be more practical to have only the query without timestamp on
>other things

Use log.msg, instead.  `print` integration is meant as a debugging aid, 
not a general logging facility.

  >>> from twisted.python.log import startLogging
  >>> from sys import stdout
  >>> startLogging(stdout)
  2010-05-06 10:36:41-0400 [-] Log opened.
  2010-05-06 10:36:41-0400 [-] <twisted.python.log.FileLogObserver 
instance at 0xb766424c>
  >>> from twisted.python.log import msg
  >>> print 'hello\nworld'
  2010-05-06 10:36:50-0400 [-] hello
  2010-05-06 10:36:50-0400 [-] world
  >>> msg('hello\nworld')
  2010-05-06 10:36:54-0400 [-] hello
          world
  >>>
Jean-Paul


From petshmidt at googlemail.com  Thu May  6 11:45:43 2010
From: petshmidt at googlemail.com (Pet)
Date: Thu, 6 May 2010 17:45:43 +0200
Subject: [Twisted-Python] multiline log entries
In-Reply-To: <20100506143750.1681.57250479.divmod.xquotient.4@localhost.localdomain>
References: <q2yb460e9631005060730p6042d505g56db9d3685e076ba@mail.gmail.com> 
	<20100506143750.1681.57250479.divmod.xquotient.4@localhost.localdomain>
Message-ID: <g2gb460e9631005060845sc797502csf4cb84190d643c01@mail.gmail.com>

On Thu, May 6, 2010 at 4:37 PM,  <exarkun at twistedmatrix.com> wrote:
> On 02:30 pm, petshmidt at googlemail.com wrote:
>>Hello!
>>
>>Is it possible to print multiline debug messages into log?
>>
>>If print a query it looks like this
>>
>>
>>2010-05-06 10:10:07 [HTTPChannel,0,192.168.2.15]
>>SELECT *
>>2010-05-06 10:10:07 [HTTPChannel,0,192.168.2.15]
>>FROM foo AS a
>>2010-05-06 10:10:07 [HTTPChannel,0,192.168.2.15]
>>JOIN bar AS b ON a.id = b.id
>>2010-05-06 10:10:07 [HTTPChannel,0,192.168.2.15]
>>WHERE a.id = 1
>>2010-05-06 10:10:07 [HTTPChannel,0,192.168.2.15]
>>ORDER BY id DESC
>>2010-05-06 10:10:07 [HTTPChannel,0,192.168.2.15]
>>LIMIT 1;
>>
>>
>>it would be more practical to have only the query without timestamp on
>>other things
>
> Use log.msg, instead. ?`print` integration is meant as a debugging aid,
> not a general logging facility.

Thanks! I've thought they're equivalent

>
> ?>>> from twisted.python.log import startLogging
> ?>>> from sys import stdout
> ?>>> startLogging(stdout)
> ?2010-05-06 10:36:41-0400 [-] Log opened.
> ?2010-05-06 10:36:41-0400 [-] <twisted.python.log.FileLogObserver
> instance at 0xb766424c>
> ?>>> from twisted.python.log import msg
> ?>>> print 'hello\nworld'
> ?2010-05-06 10:36:50-0400 [-] hello
> ?2010-05-06 10:36:50-0400 [-] world
> ?>>> msg('hello\nworld')
> ?2010-05-06 10:36:54-0400 [-] hello
> ? ? ? ? ?world
> ?>>>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From jml at mumak.net  Thu May  6 12:21:33 2010
From: jml at mumak.net (Jonathan Lange)
Date: Thu, 6 May 2010 17:21:33 +0100
Subject: [Twisted-Python] How do I get xUnit output from trial for
	Hudson?
In-Reply-To: <4BE29A41.8010708@simplistix.co.uk>
References: <4BE29502.4010609@simplistix.co.uk>
	<4BE29A41.8010708@simplistix.co.uk>
Message-ID: <z2ld06a5cd31005060921y81c8b787kd547ecc457d7e5fe@mail.gmail.com>

On Thu, May 6, 2010 at 11:30 AM, Chris Withers <chris at simplistix.co.uk> wrote:
> Chris Withers wrote:
>> How can I get trial to emit output that makes Hudson happy?
>
> Er, shoot me, forgot I'd asked this before.
>
> No-one written a junitxml reporter for trial?
> Any guesses how hard that'd be?
>

Not very.

"trial --reporter=subunit <foo> | subunit2junitxml" works well for me,
although I am running on an OS that supports pipes :)

jml


From chris at simplistix.co.uk  Thu May  6 14:04:44 2010
From: chris at simplistix.co.uk (Chris Withers)
Date: Thu, 06 May 2010 19:04:44 +0100
Subject: [Twisted-Python] How do I get xUnit output from trial
	for	Hudson?
In-Reply-To: <z2ld06a5cd31005060921y81c8b787kd547ecc457d7e5fe@mail.gmail.com>
References: <4BE29502.4010609@simplistix.co.uk>	<4BE29A41.8010708@simplistix.co.uk>
	<z2ld06a5cd31005060921y81c8b787kd547ecc457d7e5fe@mail.gmail.com>
Message-ID: <4BE304BC.30001@simplistix.co.uk>

Jonathan Lange wrote:
> Not very.
> 
> "trial --reporter=subunit <foo> | subunit2junitxml" works well for me,
> although I am running on an OS that supports pipes :)

...and on which subunit compiles ;-)

*cough*notwindows*cough

Chris

-- 
Simplistix - Content Management, Batch Processing & Python Consulting
             - http://www.simplistix.co.uk


From celord at gmail.com  Thu May  6 15:04:53 2010
From: celord at gmail.com (=?ISO-8859-1?B?Q+lzYXIgR2FyY+1h?=)
Date: Thu, 6 May 2010 13:04:53 -0600
Subject: [Twisted-Python] SQLAlchemy and Twisted
In-Reply-To: <4BE197A9.4030505@simplistix.co.uk>
References: <318F79422ADC5041A93343721F84474D031FE1E4@exchange.mypublisher.local>
	<4BE197A9.4030505@simplistix.co.uk>
Message-ID: <h2tb302bf881005061204v4db94f57mc74e372c0e795c86@mail.gmail.com>

Guys, now that I see this and the past conversations about SA and Twisted,
and now that I've read some more about the non-blocking concepts, I think
that I'am not doing things the best way

 I am doing this:

1. Twisted  IMAP4 Client to read my mails
2. Inside this client I import a module that contains some funtions that
parse the email via re
3. Also inside the client I import a module that makes a DB connection and
insert the data parsed from those emails, all this via SQL using mapped
tables.

I'm almost sure that I'm breacking the hole twisted concept doing this
thisway , do you guys have any advice for me

Thanks
2010/5/5 Chris Withers <chris at simplistix.co.uk>

> Doug Farrell wrote:
> >
> > I?ve been doing some searching about how to get SQLAlchemy and Twisted
> > working together in a Twisted application.
>
> Short version: to be safe, anything that touches any SQLAlchemy-mapped
> object needs to be run in its own thread. Any query or access of an
> attribute of a mapped object may result in a blocking sql query. (aka:
> twisted doesn't play nice with orms)
>
> > definitive answer. The most promising one I?ve run across concerns
> > running the SQLAlchemy queries in a separate process (rather than a
> > separate thread) and communicating the queries between the Twisted
> > application in one process and the SQLAlchemy application in another.
>
> That seems a little odd.
> What would be the IPC?
> How would the "sqlachemy application" be run?
>
> > 1)      Would the SQLAlchemy process also be a Twisted application with
> > all the queries running as deferreds in the main thread, and blocking?
>
> What do you men by "all the queries"?
>
> > Thanks in advance for any help!
>
> In my case, since most of the app I'm working on is "web requested"
> (either xmlrpc or http), I just agve up and used a good wsgi stack
> (repoze.bfg in my case) and munge other incoming requests into wsgi
> requests.
>
> Twisted's wsgi server runs each request in its own thread, so be it.
>
> cheers,
>
> Chris
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
http://celord.blogspot.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100506/be569267/attachment.htm 

From kevin.horn at gmail.com  Thu May  6 16:00:33 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Thu, 6 May 2010 15:00:33 -0500
Subject: [Twisted-Python] SQLAlchemy and Twisted
In-Reply-To: <h2tb302bf881005061204v4db94f57mc74e372c0e795c86@mail.gmail.com>
References: <318F79422ADC5041A93343721F84474D031FE1E4@exchange.mypublisher.local>
	<4BE197A9.4030505@simplistix.co.uk>
	<h2tb302bf881005061204v4db94f57mc74e372c0e795c86@mail.gmail.com>
Message-ID: <g2t562bcc11005061300v449e5727i8762ec3bd1852014@mail.gmail.com>

You might also check out sAsync: http://sasync.org/

This was a project apparently abandoned (?) by the original author, but it's
recently been picked up by someone else.

Kevin Horn

On Thu, May 6, 2010 at 2:04 PM, C?sar Garc?a <celord at gmail.com> wrote:

> Guys, now that I see this and the past conversations about SA and Twisted,
> and now that I've read some more about the non-blocking concepts, I think
> that I'am not doing things the best way
>
>  I am doing this:
>
> 1. Twisted  IMAP4 Client to read my mails
> 2. Inside this client I import a module that contains some funtions that
> parse the email via re
> 3. Also inside the client I import a module that makes a DB connection and
> insert the data parsed from those emails, all this via SQL using mapped
> tables.
>
> I'm almost sure that I'm breacking the hole twisted concept doing this
> thisway , do you guys have any advice for me
>
> Thanks
> 2010/5/5 Chris Withers <chris at simplistix.co.uk>
>
> Doug Farrell wrote:
>> >
>> > I?ve been doing some searching about how to get SQLAlchemy and Twisted
>> > working together in a Twisted application.
>>
>> Short version: to be safe, anything that touches any SQLAlchemy-mapped
>> object needs to be run in its own thread. Any query or access of an
>> attribute of a mapped object may result in a blocking sql query. (aka:
>> twisted doesn't play nice with orms)
>>
>> > definitive answer. The most promising one I?ve run across concerns
>> > running the SQLAlchemy queries in a separate process (rather than a
>> > separate thread) and communicating the queries between the Twisted
>> > application in one process and the SQLAlchemy application in another.
>>
>> That seems a little odd.
>> What would be the IPC?
>> How would the "sqlachemy application" be run?
>>
>> > 1)      Would the SQLAlchemy process also be a Twisted application with
>> > all the queries running as deferreds in the main thread, and blocking?
>>
>> What do you men by "all the queries"?
>>
>> > Thanks in advance for any help!
>>
>> In my case, since most of the app I'm working on is "web requested"
>> (either xmlrpc or http), I just agve up and used a good wsgi stack
>> (repoze.bfg in my case) and munge other incoming requests into wsgi
>> requests.
>>
>> Twisted's wsgi server runs each request in its own thread, so be it.
>>
>> cheers,
>>
>> Chris
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
>
>
> --
> http://celord.blogspot.com/
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100506/72e70bd5/attachment.htm 

From glyph at twistedmatrix.com  Fri May  7 04:12:01 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 7 May 2010 04:12:01 -0400
Subject: [Twisted-Python] Release again in June?
In-Reply-To: <h2hd06a5cd31005030925z8b65f5c4pa5ff06da33908b6d@mail.gmail.com>
References: <l2pd06a5cd31005030518z572fac09rc1f1ec26b2aaac98@mail.gmail.com>
	<20100503154930.1627.1185606434.divmod.xquotient.3@localhost.localdomain>
	<h2hd06a5cd31005030925z8b65f5c4pa5ff06da33908b6d@mail.gmail.com>
Message-ID: <4468F97D-5EBA-408E-A8DD-5D1589E59610@twistedmatrix.com>


On May 3, 2010, at 12:25 PM, Jonathan Lange wrote:

>>> I am still keen to do this.
>>> 
>>> Does anyone have any thoughts, objections or recommendations?
>> 
>> This sounds great.
> 

I also think this sounds great.

Thanks for stepping forward again, Jonathan.

I would like to volunteer to be assistant release manager for this release so that I can hopefully get out a 10.2 in a timely manner as well.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100507/2ba15992/attachment.htm 

From lvh at laurensvh.be  Fri May  7 04:22:46 2010
From: lvh at laurensvh.be (Laurens Van Houtven)
Date: Fri, 7 May 2010 10:22:46 +0200
Subject: [Twisted-Python] EuroPython 2k10: planned sprint days?
Message-ID: <i2hcedc0c091005070122h29214df4u86259f257f3ce4e4@mail.gmail.com>

Hey,



Can anyone tell me which sprint days (if any) Twisted is organizing
something on? If nothing is planned yet, does anyone have any preferences?


Thanks,
Laurens
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100507/a94a65e9/attachment.htm 

From skaarjj at gmail.com  Fri May  7 06:40:48 2010
From: skaarjj at gmail.com (Adrian Overbury)
Date: Fri, 7 May 2010 20:40:48 +1000
Subject: [Twisted-Python] IRCClient: Handle lines that are too long for the
	server
Message-ID: <q2ieb432f2b1005070340ub6d94f65u5cd58ca72403ebf7@mail.gmail.com>

So, there's a todo item in IRCClient, to handle lines that are longer
than the RFC maximum length (510 characters including the sender,
recipient and command, plus `\n` and `\r`).

I had thought to have a method sitting between the
IRCClient.sendLine() and the method which actually calls out to the
transport to put the data on the wire.  The default method would
simply pass the message through, sending it on to the server as is, to
be inevitably truncated at the other end.  The documentation could
contain examples of possible implementations, such as one which splits
the message up into multiple messages and sends them on, and one which
truncates the message.

For example, IRCClient could contain the method:

def longLineHandler(self, message):
   return message

This would necessitate adding a check to IRCClient to see what is
returned by longLineHandler().  I would suggest that it would accept a
single `str` or a list of `str`s as valid input, and anything else
will either make the sendLine() method do nothing and just silently
return, or will raise an exception.  If it returns silently, it would
allow the user-defined longLineHandler() to implement splitting a
message up into multiple messages by either returning a list of
`str`s, or by calling self.sendLine() themselves and then returning
None to have the original sendLine() return silently.

For example, if the user overrode longLineHandler() and made it split
the message into multiple messages, in peudocode it could go like this

call self.sendLine
   call self.longLineHandler with parameter 'message'
       is message longer than 510 characters?
           yes: split up command prefix and payload
                   use textwrap module to split payload into multiple
                     messages no longer than "510 - length of command
                     prefix"
                   prepend command prefix to each message and call
                     self.sendLine with each one
                   return None
           no: return message
   did self.longLineHandler return None?
           yes: return
   did self.longLineHandler return a list of `str`?
           yes: for each `str` in list: call self.reallySendLine or
            place on message queue
           no: call self.reallySendLine or place on message queue

The user might also want to have their longLineHandler raise an
exception if the line is too long, or they might want to have it make
the lines shorter than 510 characters total, or strip control codes if
they're too long to try and shorten it... there's a number of
different use cases for this, so I'm trying to build a framework for
it that's flexible enough to handle more or less anything.  I'd value
any comments anyone has on this.  I also have an enhancement ticket
open in the bug tracker, ticket #4416.

-- 

Adrian


From konrads.smelkovs at gmail.com  Fri May  7 06:53:30 2010
From: konrads.smelkovs at gmail.com (Konrads Smelkovs)
Date: Fri, 7 May 2010 13:53:30 +0300
Subject: [Twisted-Python] SQLAlchemy and Twisted
In-Reply-To: <g2t562bcc11005061300v449e5727i8762ec3bd1852014@mail.gmail.com>
References: <318F79422ADC5041A93343721F84474D031FE1E4@exchange.mypublisher.local>
	<4BE197A9.4030505@simplistix.co.uk>
	<h2tb302bf881005061204v4db94f57mc74e372c0e795c86@mail.gmail.com>
	<g2t562bcc11005061300v449e5727i8762ec3bd1852014@mail.gmail.com>
Message-ID: <p2kd79700b91005070353w7bae89edy9f3df7fa59807a9c@mail.gmail.com>

If you want an ORM in Twisted look for STORM twisted integration. Overall,
it works (I tried). Some quirks are there, e.g. without twisted you would do
something like resultset[10:20].sort(Sort.ASC) but with twsited you have to
do (assuming inlineCallbacks)

res= yield  resultset[10:20]
res = yield res.sort(Sort.ASC)

which ain't pretty but it sure beats using plain twisted.enterprise
--
Konrads Smelkovs
Applied IT sorcery.


On Thu, May 6, 2010 at 11:00 PM, Kevin Horn <kevin.horn at gmail.com> wrote:

> You might also check out sAsync: http://sasync.org/
>
> This was a project apparently abandoned (?) by the original author, but
> it's recently been picked up by someone else.
>
> Kevin Horn
>
>
> On Thu, May 6, 2010 at 2:04 PM, C?sar Garc?a <celord at gmail.com> wrote:
>
>> Guys, now that I see this and the past conversations about SA and Twisted,
>> and now that I've read some more about the non-blocking concepts, I think
>> that I'am not doing things the best way
>>
>>  I am doing this:
>>
>> 1. Twisted  IMAP4 Client to read my mails
>> 2. Inside this client I import a module that contains some funtions that
>> parse the email via re
>> 3. Also inside the client I import a module that makes a DB connection and
>> insert the data parsed from those emails, all this via SQL using mapped
>> tables.
>>
>> I'm almost sure that I'm breacking the hole twisted concept doing this
>> thisway , do you guys have any advice for me
>>
>> Thanks
>> 2010/5/5 Chris Withers <chris at simplistix.co.uk>
>>
>> Doug Farrell wrote:
>>> >
>>> > I?ve been doing some searching about how to get SQLAlchemy and Twisted
>>> > working together in a Twisted application.
>>>
>>> Short version: to be safe, anything that touches any SQLAlchemy-mapped
>>> object needs to be run in its own thread. Any query or access of an
>>> attribute of a mapped object may result in a blocking sql query. (aka:
>>> twisted doesn't play nice with orms)
>>>
>>> > definitive answer. The most promising one I?ve run across concerns
>>> > running the SQLAlchemy queries in a separate process (rather than a
>>> > separate thread) and communicating the queries between the Twisted
>>> > application in one process and the SQLAlchemy application in another.
>>>
>>> That seems a little odd.
>>> What would be the IPC?
>>> How would the "sqlachemy application" be run?
>>>
>>> > 1)      Would the SQLAlchemy process also be a Twisted application with
>>> > all the queries running as deferreds in the main thread, and blocking?
>>>
>>> What do you men by "all the queries"?
>>>
>>> > Thanks in advance for any help!
>>>
>>> In my case, since most of the app I'm working on is "web requested"
>>> (either xmlrpc or http), I just agve up and used a good wsgi stack
>>> (repoze.bfg in my case) and munge other incoming requests into wsgi
>>> requests.
>>>
>>> Twisted's wsgi server runs each request in its own thread, so be it.
>>>
>>> cheers,
>>>
>>> Chris
>>>
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>
>>
>>
>> --
>> http://celord.blogspot.com/
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100507/f7844883/attachment.htm 

From mithrandi at mithrandi.net  Fri May  7 09:34:29 2010
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Fri, 7 May 2010 15:34:29 +0200
Subject: [Twisted-Python] SQLAlchemy and Twisted
In-Reply-To: <p2kd79700b91005070353w7bae89edy9f3df7fa59807a9c@mail.gmail.com>
References: <318F79422ADC5041A93343721F84474D031FE1E4@exchange.mypublisher.local>
	<4BE197A9.4030505@simplistix.co.uk>
	<h2tb302bf881005061204v4db94f57mc74e372c0e795c86@mail.gmail.com>
	<g2t562bcc11005061300v449e5727i8762ec3bd1852014@mail.gmail.com>
	<p2kd79700b91005070353w7bae89edy9f3df7fa59807a9c@mail.gmail.com>
Message-ID: <g2tf5eea9171005070634sb594f2f0i8dcdfc114e3315b3@mail.gmail.com>

On Fri, May 7, 2010 at 12:53 PM, Konrads Smelkovs
<konrads.smelkovs at gmail.com> wrote:
> If you want an ORM in Twisted look for STORM twisted integration. Overall,
> it works (I tried). Some quirks are there, e.g. without twisted you would do
> something like resultset[10:20].sort(Sort.ASC) but with twsited you have to
> do (assuming inlineCallbacks)
>
> res= yield? resultset[10:20]
> res = yield res.sort(Sort.ASC)

If you wanted to, you could write this as:

(yield resultset[10:20]).sort(Sort.ASC)

assuming a new enough version of Python.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar


From drwxrwxr.x+twistedmail at gmail.com  Fri May  7 11:37:14 2010
From: drwxrwxr.x+twistedmail at gmail.com (Jaroslaw Fedewicz)
Date: Fri, 7 May 2010 18:37:14 +0300
Subject: [Twisted-Python] SQLAlchemy and Twisted
In-Reply-To: <g2tf5eea9171005070634sb594f2f0i8dcdfc114e3315b3@mail.gmail.com>
References: <318F79422ADC5041A93343721F84474D031FE1E4@exchange.mypublisher.local>
	<4BE197A9.4030505@simplistix.co.uk>
	<h2tb302bf881005061204v4db94f57mc74e372c0e795c86@mail.gmail.com>
	<g2t562bcc11005061300v449e5727i8762ec3bd1852014@mail.gmail.com>
	<p2kd79700b91005070353w7bae89edy9f3df7fa59807a9c@mail.gmail.com>
	<g2tf5eea9171005070634sb594f2f0i8dcdfc114e3315b3@mail.gmail.com>
Message-ID: <z2x75203ae91005070837ub5d1bab7l4e4f62cec2f5b9fd@mail.gmail.com>

> (yield resultset[10:20]).sort(Sort.ASC)
>
> assuming a new enough version of Python.

I wonder if it a good idea to subclass Deferred and define __call__()
for it, making it attach callbacks to itself.
Theoretically should work in earlier versions and make the syntax look
more transparent.


From exarkun at twistedmatrix.com  Fri May  7 14:35:58 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 07 May 2010 18:35:58 -0000
Subject: [Twisted-Python] SQLAlchemy and Twisted
In-Reply-To: <z2x75203ae91005070837ub5d1bab7l4e4f62cec2f5b9fd@mail.gmail.com>
References: <318F79422ADC5041A93343721F84474D031FE1E4@exchange.mypublisher.local>
	<4BE197A9.4030505@simplistix.co.uk>
	<h2tb302bf881005061204v4db94f57mc74e372c0e795c86@mail.gmail.com>
	<g2t562bcc11005061300v449e5727i8762ec3bd1852014@mail.gmail.com>
	<p2kd79700b91005070353w7bae89edy9f3df7fa59807a9c@mail.gmail.com>
	<g2tf5eea9171005070634sb594f2f0i8dcdfc114e3315b3@mail.gmail.com>
	<z2x75203ae91005070837ub5d1bab7l4e4f62cec2f5b9fd@mail.gmail.com>
Message-ID: <20100507183558.1660.207845263.divmod.xquotient.1@localhost.localdomain>

On 03:37 pm, drwxrwxr.x+twistedmail at gmail.com wrote:
>>(yield resultset[10:20]).sort(Sort.ASC)
>>
>>assuming a new enough version of Python.
>
>I wonder if it a good idea to subclass Deferred and define __call__()
>for it, making it attach callbacks to itself.
>Theoretically should work in earlier versions and make the syntax look
>more transparent.

Let me clear that up for you, then.

No, this is not a good idea. :)

Jean-Paul


From exarkun at twistedmatrix.com  Fri May  7 14:36:40 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 07 May 2010 18:36:40 -0000
Subject: [Twisted-Python] SQLAlchemy and Twisted
In-Reply-To: <g2tf5eea9171005070634sb594f2f0i8dcdfc114e3315b3@mail.gmail.com>
References: <318F79422ADC5041A93343721F84474D031FE1E4@exchange.mypublisher.local>
	<4BE197A9.4030505@simplistix.co.uk>
	<h2tb302bf881005061204v4db94f57mc74e372c0e795c86@mail.gmail.com>
	<g2t562bcc11005061300v449e5727i8762ec3bd1852014@mail.gmail.com>
	<p2kd79700b91005070353w7bae89edy9f3df7fa59807a9c@mail.gmail.com>
	<g2tf5eea9171005070634sb594f2f0i8dcdfc114e3315b3@mail.gmail.com>
Message-ID: <20100507183640.1660.858205957.divmod.xquotient.3@localhost.localdomain>

On 01:34 pm, mithrandi at mithrandi.net wrote:
>On Fri, May 7, 2010 at 12:53 PM, Konrads Smelkovs
><konrads.smelkovs at gmail.com> wrote:
>>If you want an ORM in Twisted look for STORM twisted integration. 
>>Overall,
>>it works (I tried). Some quirks are there, e.g. without twisted you 
>>would do
>>something like resultset[10:20].sort(Sort.ASC) but with twsited you 
>>have to
>>do (assuming inlineCallbacks)
>>
>>res= yield? resultset[10:20]
>>res = yield res.sort(Sort.ASC)
>
>If you wanted to, you could write this as:
>
>(yield resultset[10:20]).sort(Sort.ASC)
>
>assuming a new enough version of Python.

You left off one of the yields, though.

  res = yield (yield resultset[10:20]).sort(Sort.ASC)

Jean-Paul


From andrew at bemusement.org  Sat May  8 09:41:19 2010
From: andrew at bemusement.org (Andrew Bennetts)
Date: Sat, 8 May 2010 15:41:19 +0200
Subject: [Twisted-Python] How do I get xUnit output from trial for
 Hudson?
In-Reply-To: <4BE304BC.30001@simplistix.co.uk>
References: <4BE29502.4010609@simplistix.co.uk>
	<4BE29A41.8010708@simplistix.co.uk>
	<z2ld06a5cd31005060921y81c8b787kd547ecc457d7e5fe@mail.gmail.com>
	<4BE304BC.30001@simplistix.co.uk>
Message-ID: <20100508134119.GC27052@steerpike.home.puzzling.org>

Chris Withers wrote:
> Jonathan Lange wrote:
> > Not very.
> > 
> > "trial --reporter=subunit <foo> | subunit2junitxml" works well for me,
> > although I am running on an OS that supports pipes :)
> 
> ...and on which subunit compiles ;-)
> 
> *cough*notwindows*cough

Have you tried it?  AFAICS, subunit2junitxml only requires the pure
python parts of subunit (i.e. the subunit Python library, as opposed to
the subunit implementation for some other language).

(It does require <http://pypi.python.org/pypi/junitxml>, and I have no
idea what its requirements are, but I'd guess they're reasonable.)

-Andrew.



From exarkun at twistedmatrix.com  Sun May  9 00:05:25 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 09 May 2010 04:05:25 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1273377925.72.839215289@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100509/d2e80eca/attachment.htm 

From dgriff1 at gmail.com  Sun May  9 02:07:29 2010
From: dgriff1 at gmail.com (Daniel Griffin)
Date: Sun, 9 May 2010 01:07:29 -0500
Subject: [Twisted-Python] SQLAlchemy and Twisted
In-Reply-To: <20100507183558.1660.207845263.divmod.xquotient.1@localhost.localdomain>
References: <318F79422ADC5041A93343721F84474D031FE1E4@exchange.mypublisher.local>
	<4BE197A9.4030505@simplistix.co.uk>
	<h2tb302bf881005061204v4db94f57mc74e372c0e795c86@mail.gmail.com>
	<g2t562bcc11005061300v449e5727i8762ec3bd1852014@mail.gmail.com>
	<p2kd79700b91005070353w7bae89edy9f3df7fa59807a9c@mail.gmail.com>
	<g2tf5eea9171005070634sb594f2f0i8dcdfc114e3315b3@mail.gmail.com>
	<z2x75203ae91005070837ub5d1bab7l4e4f62cec2f5b9fd@mail.gmail.com>
	<20100507183558.1660.207845263.divmod.xquotient.1@localhost.localdomain>
Message-ID: <u2j3db160681005082307r80ad9dd3t4bad05f88e698e65@mail.gmail.com>

If you let SQLAlchemy block twisted would there be any impact besides
performance?

Dan

On Fri, May 7, 2010 at 1:35 PM, <exarkun at twistedmatrix.com> wrote:

> On 03:37 pm, drwxrwxr.x+twistedmail at gmail.com<drwxrwxr.x%2Btwistedmail at gmail.com>wrote:
> >>(yield resultset[10:20]).sort(Sort.ASC)
> >>
> >>assuming a new enough version of Python.
> >
> >I wonder if it a good idea to subclass Deferred and define __call__()
> >for it, making it attach callbacks to itself.
> >Theoretically should work in earlier versions and make the syntax look
> >more transparent.
>
> Let me clear that up for you, then.
>
> No, this is not a good idea. :)
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100509/2bd8e0f8/attachment.htm 

From p.mayers at imperial.ac.uk  Sun May  9 05:45:18 2010
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Sun, 09 May 2010 10:45:18 +0100
Subject: [Twisted-Python] SQLAlchemy and Twisted
In-Reply-To: <u2j3db160681005082307r80ad9dd3t4bad05f88e698e65@mail.gmail.com>
References: <318F79422ADC5041A93343721F84474D031FE1E4@exchange.mypublisher.local>	<4BE197A9.4030505@simplistix.co.uk>	<h2tb302bf881005061204v4db94f57mc74e372c0e795c86@mail.gmail.com>	<g2t562bcc11005061300v449e5727i8762ec3bd1852014@mail.gmail.com>	<p2kd79700b91005070353w7bae89edy9f3df7fa59807a9c@mail.gmail.com>	<g2tf5eea9171005070634sb594f2f0i8dcdfc114e3315b3@mail.gmail.com>	<z2x75203ae91005070837ub5d1bab7l4e4f62cec2f5b9fd@mail.gmail.com>	<20100507183558.1660.207845263.divmod.xquotient.1@localhost.localdomain>
	<u2j3db160681005082307r80ad9dd3t4bad05f88e698e65@mail.gmail.com>
Message-ID: <4BE6842E.1040000@imperial.ac.uk>

On 05/09/2010 07:07 AM, Daniel Griffin wrote:
> If you let SQLAlchemy block twisted would there be any impact besides
> performance?

Depends how long it blocks for, and what else your process is doing.

With the reactor blocked:

  * no socket reads or accepts can be done
  * no callLater or LoopingCall can be scheduled

...and so on.

If you've only got a small number of clients and no time-based 
scheduling and you're only blocking for a short time (tens or hundreds 
of milliseconds, say) it may be tolerable.

If the server has a lot of clients, or needs to accept new ones in a 
timely fashion, or has time-based work to do, and your blocking might go 
on for a while, it's probably not tolerable.

I'd avoid it personally (but then I'm utterly unconvinced by ORMs) and 
stick to using SA in a thread as your SQL query layer.


From p.mayers at imperial.ac.uk  Sun May  9 06:17:07 2010
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Sun, 09 May 2010 11:17:07 +0100
Subject: [Twisted-Python] [#24487862] Re:  SQLAlchemy and Twisted
In-Reply-To: <c721bd8be57b054fdfc4bd52c9233e9b@secure.mpcustomer.com>
References: <c721bd8be57b054fdfc4bd52c9233e9b@secure.mpcustomer.com>
Message-ID: <4BE68BA3.8040708@imperial.ac.uk>

Erm... Someone appears to have subscribed a ticketing system w/ 
autoresponer to the Twisted mailing list; any chance a list admin could 
unsubscribe it? The email below claimed a "From:" of the m/l but a 
"Reply-To:" of support at mpcustomer.com


On 05/09/2010 10:49 AM, twisted-python at twistedmatrix.com wrote:
> Hello,
>
> This is an automated response to inform you that your question has
been entered into our system, and will be reviewed shortly. Your ticket
has been submitted into the "General Support" department.
>
> We will respond to you as soon as possible. >
> ==============
> Please keep this information, and use it when refering to your ticket:
>
> Ticket subject: Re: [Twisted-Python] SQLAlchemy and Twisted
> Ticket number: 24487862
> Ticket link: https://secure.mpcustomer.com/ticket.php?ticket=24487862
> Ticket body: On 05/09/2010 07:07 AM, Daniel Griffin wrote:
>> If you let SQLAlchemy block twisted would there be any impact besides
>> performance?
>
> Depends how long it blocks for, and what else your process is doing.
>
> With the reactor blocked:
>
>    * no socket reads or accepts can be done
>    * no callLater or LoopingCall can be scheduled
>
> ...and so on.
>
> If you've only got a small number of clients and no time-based
> scheduling and you're only blocking for a short time (tens or hundreds
> of milliseconds, say) it may be tolerable.
>
> If the server has a lot of clients, or needs to accept new ones in a
> timely fashion, or has time-based work to do, and your blocking might go
> on for a while, it's probably not tolerable.
>
> I'd avoid it personally (but then I'm utterly unconvinced by ORMs) and
> stick to using SA in a thread as your SQL query layer.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> ==============
>
>
>



From exarkun at twistedmatrix.com  Sun May  9 09:56:56 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 09 May 2010 13:56:56 -0000
Subject: [Twisted-Python] [#24487862] Re:  SQLAlchemy and Twisted
In-Reply-To: <4BE68BA3.8040708@imperial.ac.uk>
References: <c721bd8be57b054fdfc4bd52c9233e9b@secure.mpcustomer.com>
	<4BE68BA3.8040708@imperial.ac.uk>
Message-ID: <20100509135656.1660.707000273.divmod.xquotient.38@localhost.localdomain>

On 10:17 am, p.mayers at imperial.ac.uk wrote:
>Erm... Someone appears to have subscribed a ticketing system w/
>autoresponer to the Twisted mailing list; any chance a list admin could
>unsubscribe it? The email below claimed a "From:" of the m/l but a
>"Reply-To:" of support at mpcustomer.com

Hopefully taken care of.

Jean-Paul


From jml at mumak.net  Sun May  9 10:45:49 2010
From: jml at mumak.net (Jonathan Lange)
Date: Sun, 9 May 2010 16:45:49 +0200
Subject: [Twisted-Python] Release again in June?
In-Reply-To: <4468F97D-5EBA-408E-A8DD-5D1589E59610@twistedmatrix.com>
References: <l2pd06a5cd31005030518z572fac09rc1f1ec26b2aaac98@mail.gmail.com>
	<20100503154930.1627.1185606434.divmod.xquotient.3@localhost.localdomain>
	<h2hd06a5cd31005030925z8b65f5c4pa5ff06da33908b6d@mail.gmail.com>
	<4468F97D-5EBA-408E-A8DD-5D1589E59610@twistedmatrix.com>
Message-ID: <AANLkTil0BUHzJmRM9u7u0wT0zkw45MY2KPbGuEMtVjMQ@mail.gmail.com>

On Fri, May 7, 2010 at 10:12 AM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
...
> I also think this sounds great.
> Thanks for stepping forward again, Jonathan.
> I would like to volunteer to be assistant release manager for this release
> so that I can hopefully get out a 10.2 in a timely manner as well.
>

Thanks Glyph!

In that case, I reckon things would work best if we schedule a couple
of blocks of time to do the release so that we can be on IRC at the
same time. Let's do that off-list.

jml


From newptcai at gmail.com  Sun May  9 11:24:00 2010
From: newptcai at gmail.com (Peter Cai)
Date: Sun, 9 May 2010 23:24:00 +0800
Subject: [Twisted-Python] Comparing "Stackless Python + Nonblocking
	Stackless Modules" with Twisted.
Message-ID: <o2ybefee6d81005090824l63d3f53fyc62a9d48f19093ac@mail.gmail.com>

Today, a guy gave me an URL
http://code.google.com/p/stacklessexamples/wiki/StacklessNonblockModules

It's a replacement of standard python socket module.?What make it
different is that this module only blocks a tasklet, not an entire
Python thread.

With this module and stackless python, theoretically, we can build a
high concurrency network application framework which has a programming
style close to traditional multi-thread module.

The guy who gave me that URL asked a question, "Which style is better?
The Twited's event-driven style or the imaginary one?"


What do you think about it?  Of course, twisted is an mature framework
we can trust, but doesn't the imaginary one also have pros?

--
look to the things around you,the immediate world around you, if you
are alive,it will mean something to you ??Paul Strand


From dgriff1 at gmail.com  Sun May  9 11:54:26 2010
From: dgriff1 at gmail.com (Daniel Griffin)
Date: Sun, 9 May 2010 10:54:26 -0500
Subject: [Twisted-Python] SQLAlchemy and Twisted
In-Reply-To: <4BE6842E.1040000@imperial.ac.uk>
References: <318F79422ADC5041A93343721F84474D031FE1E4@exchange.mypublisher.local>
	<4BE197A9.4030505@simplistix.co.uk>
	<h2tb302bf881005061204v4db94f57mc74e372c0e795c86@mail.gmail.com>
	<g2t562bcc11005061300v449e5727i8762ec3bd1852014@mail.gmail.com>
	<p2kd79700b91005070353w7bae89edy9f3df7fa59807a9c@mail.gmail.com>
	<g2tf5eea9171005070634sb594f2f0i8dcdfc114e3315b3@mail.gmail.com>
	<z2x75203ae91005070837ub5d1bab7l4e4f62cec2f5b9fd@mail.gmail.com>
	<20100507183558.1660.207845263.divmod.xquotient.1@localhost.localdomain>
	<u2j3db160681005082307r80ad9dd3t4bad05f88e698e65@mail.gmail.com>
	<4BE6842E.1040000@imperial.ac.uk>
Message-ID: <n2k3db160681005090854r36dbf4f8neb6fd44f8f184c69@mail.gmail.com>

That is kind of what I found. In my app I basically have the following
triggered using callLater:

do a select and create a new SSL connection  for each item returned
Wait for the response
Do between 2 and 4 inserts depending on results
Close the connection.

As measured in connections completed per seconds my results have been:

15/second with blocking twisted
7/second using deferred to thread
18/second using SQLalchemy in another process over PB.

I know these are anecdotal but they might help someone else.

The two problems with PB are that you quickly overrun the maximum amount of
FD's available for select reactors and you end up roughly doubling the
amount of DB querying you are doing.

I intend to try using something like ampoule(deferToProcess) but I think I
will have the same problems as with PB since it just uses TCP sockets
anyways.


Dan



On Sun, May 9, 2010 at 4:45 AM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:

> On 05/09/2010 07:07 AM, Daniel Griffin wrote:
> > If you let SQLAlchemy block twisted would there be any impact besides
> > performance?
>
> Depends how long it blocks for, and what else your process is doing.
>
> With the reactor blocked:
>
>  * no socket reads or accepts can be done
>  * no callLater or LoopingCall can be scheduled
>
> ...and so on.
>
> If you've only got a small number of clients and no time-based
> scheduling and you're only blocking for a short time (tens or hundreds
> of milliseconds, say) it may be tolerable.
>
> If the server has a lot of clients, or needs to accept new ones in a
> timely fashion, or has time-based work to do, and your blocking might go
> on for a while, it's probably not tolerable.
>
> I'd avoid it personally (but then I'm utterly unconvinced by ORMs) and
> stick to using SA in a thread as your SQL query layer.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100509/9c828ec3/attachment.htm 

From lasizoillo at gmail.com  Sun May  9 12:10:14 2010
From: lasizoillo at gmail.com (lasizoillo)
Date: Sun, 9 May 2010 18:10:14 +0200
Subject: [Twisted-Python] Comparing "Stackless Python + Nonblocking
	Stackless Modules" with Twisted.
In-Reply-To: <o2ybefee6d81005090824l63d3f53fyc62a9d48f19093ac@mail.gmail.com>
References: <o2ybefee6d81005090824l63d3f53fyc62a9d48f19093ac@mail.gmail.com>
Message-ID: <AANLkTimEZgnzuaKLneC-m-46FLy94-dgOUcJmaOJrJjy@mail.gmail.com>

2010/5/9 Peter Cai <newptcai at gmail.com>:
> Today, a guy gave me an URL
> http://code.google.com/p/stacklessexamples/wiki/StacklessNonblockModules
>
> It's a replacement of standard python socket module.?What make it
> different is that this module only blocks a tasklet, not an entire
> Python thread.
>

Gevents does monkey patching too and work with standard cpython.

> With this module and stackless python, theoretically, we can build a
> high concurrency network application framework which has a programming
> style close to traditional multi-thread module.
>

This works with pure-python approach, not with a database driver
written in C. If you monkey-patch python threads with your tasklets,
greenlets or anything else your are lost. Mix threaded model for
blocking things and tasklet/greenlet model for non-blocking thing are
not magic :-(

> The guy who gave me that URL asked a question, "Which style is better?
> The Twited's event-driven style or the imaginary one?"
>
>
> What do you think about it? ?Of course, twisted is an mature framework
> we can trust, but doesn't the imaginary one also have pros?
>

IMHO (all from here)

Twisted is coherent with itself. Monkey-patched solutions pretends be
coherent with threaded style, but something fails.

Twisted pros:
 * Is not based in a thread style. Forget wich is a non-reentrant lock
and a dead-lock.
 * If you use a twisted library you don't need think about blocking
issues. If you don't use a twisted library, defer to thread.
 * It's mature.

Monkey patched pros:
 * Convert a thread style application to async one don't need a full
rewrite. Maybe it's not easy, but need less LOCs.
 * If your libraries are prue-python you don't need think, only apply
a monkey-patch.
 * Sounds cool.

Excuse my poor english,

Javi


From konrads at smelkovs.com  Sun May  9 16:14:07 2010
From: konrads at smelkovs.com (Konrads Smelkovs)
Date: Sun, 9 May 2010 23:14:07 +0300
Subject: [Twisted-Python] SQLAlchemy and Twisted
In-Reply-To: <20100507183558.1660.207845263.divmod.xquotient.1@localhost.localdomain>
References: <318F79422ADC5041A93343721F84474D031FE1E4@exchange.mypublisher.local>
	<4BE197A9.4030505@simplistix.co.uk>
	<h2tb302bf881005061204v4db94f57mc74e372c0e795c86@mail.gmail.com>
	<g2t562bcc11005061300v449e5727i8762ec3bd1852014@mail.gmail.com>
	<p2kd79700b91005070353w7bae89edy9f3df7fa59807a9c@mail.gmail.com>
	<g2tf5eea9171005070634sb594f2f0i8dcdfc114e3315b3@mail.gmail.com>
	<z2x75203ae91005070837ub5d1bab7l4e4f62cec2f5b9fd@mail.gmail.com>
	<20100507183558.1660.207845263.divmod.xquotient.1@localhost.localdomain>
Message-ID: <AANLkTimtPrvJWUo8-xDPD5eKHaEt5T3MIoZUfalZh0oY@mail.gmail.com>

I think that nice syntax contributes towards adoption. Subclassing
deferred and adding a __get__ function that queues calls for future
Deferreds is at least worth a shot. Perhaps adding a safety net with
allowed function names would help. This list could be per "project" -
storm orm integration would have its StormDeferred and something else
- its own.

2010/5/7, exarkun at twistedmatrix.com <exarkun at twistedmatrix.com>:
> On 03:37 pm, drwxrwxr.x+twistedmail at gmail.com wrote:
>>>(yield resultset[10:20]).sort(Sort.ASC)
>>>
>>>assuming a new enough version of Python.
>>
>>I wonder if it a good idea to subclass Deferred and define __call__()
>>for it, making it attach callbacks to itself.
>>Theoretically should work in earlier versions and make the syntax look
>>more transparent.
>
> Let me clear that up for you, then.
>
> No, this is not a good idea. :)
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>

-- 
Nos?t?ts no manas mobil?s ier?ces

--
Konrads Smelkovs
Applied IT sorcery.


From konrads at smelkovs.com  Sun May  9 16:18:55 2010
From: konrads at smelkovs.com (Konrads Smelkovs)
Date: Sun, 9 May 2010 23:18:55 +0300
Subject: [Twisted-Python] win32com client in a twisted thread
In-Reply-To: <hrqf3o$j66$1@dough.gmane.org>
References: <hrnpug$4i2$1@dough.gmane.org>
	<20100504010612.GA30559@steerpike.home.puzzling.org>
	<hrqf3o$j66$1@dough.gmane.org>
Message-ID: <AANLkTimshLXqbqGkkmMau3aBFkHnaJ3b_8SOhvahRlpD@mail.gmail.com>

perhaps try to defer to a separate process?

2010/5/5, Don Dwiggins <ddwiggins at advpubtech.com>:
> Andrew, Itamar,  thanks.  I've taken the hint to CoInitialize the
> thread.  That gets me a bit further, but there's still some strange
> stuff going on.  I'm going to have to put this on the back burner for a
> while in favor of higher priority stuff.
>
> --
> Don Dwiggins
> Advanced Publishing Technology
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>

-- 
Nos?t?ts no manas mobil?s ier?ces

--
Konrads Smelkovs
Applied IT sorcery.


From glyph at twistedmatrix.com  Sun May  9 16:27:24 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 9 May 2010 16:27:24 -0400
Subject: [Twisted-Python] SQLAlchemy and Twisted
In-Reply-To: <AANLkTimtPrvJWUo8-xDPD5eKHaEt5T3MIoZUfalZh0oY@mail.gmail.com>
References: <318F79422ADC5041A93343721F84474D031FE1E4@exchange.mypublisher.local>
	<4BE197A9.4030505@simplistix.co.uk>
	<h2tb302bf881005061204v4db94f57mc74e372c0e795c86@mail.gmail.com>
	<g2t562bcc11005061300v449e5727i8762ec3bd1852014@mail.gmail.com>
	<p2kd79700b91005070353w7bae89edy9f3df7fa59807a9c@mail.gmail.com>
	<g2tf5eea9171005070634sb594f2f0i8dcdfc114e3315b3@mail.gmail.com>
	<z2x75203ae91005070837ub5d1bab7l4e4f62cec2f5b9fd@mail.gmail.com>
	<20100507183558.1660.207845263.divmod.xquotient.1@localhost.localdomain>
	<AANLkTimtPrvJWUo8-xDPD5eKHaEt5T3MIoZUfalZh0oY@mail.gmail.com>
Message-ID: <2B2E9F42-4A1C-4EF5-AD22-F365D237F65B@twistedmatrix.com>

On May 9, 2010, at 4:14 PM, Konrads Smelkovs wrote:

> I think that nice syntax contributes towards adoption.

Not as much as consistency and coherency.

> Subclassing deferred and adding a __get__ function that queues calls for future
> Deferreds is at least worth a shot.

Nope.

If you want to implement promise pipelining, Deferred is the wrong place to do it.  Maybe try something that wraps up a Deferred.

Composition > Inheritance.

> Perhaps adding a safety net with allowed function names would help.

Deferred already has way too many methods, so you wouldn't be able to pipeline a promise to anything with an 'addCallbacks' or 'addErrbacks'... or 'called' or 'timeoutCall' or 'debug' (etc).

It's important that these catch-all namespaces be clean, so that edge cases don't have extremely surprising behavior.

> This list could be per "project" -
> storm orm integration would have its StormDeferred and something else
> - its own.

I don't even know what this means, but it sounds bad.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100509/21e820bd/attachment.htm 

From glyph at twistedmatrix.com  Sun May  9 16:36:31 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 9 May 2010 16:36:31 -0400
Subject: [Twisted-Python] Comparing "Stackless Python + Nonblocking
	Stackless Modules" with Twisted.
In-Reply-To: <o2ybefee6d81005090824l63d3f53fyc62a9d48f19093ac@mail.gmail.com>
References: <o2ybefee6d81005090824l63d3f53fyc62a9d48f19093ac@mail.gmail.com>
Message-ID: <FE0F1450-A684-4986-B6DE-64DC2DABBDBC@twistedmatrix.com>


On May 9, 2010, at 11:24 AM, Peter Cai wrote:

> With this module and stackless python, theoretically, we can build a
> high concurrency network application framework which has a programming
> style close to traditional multi-thread module.
> 
> The guy who gave me that URL asked a question, "Which style is better?
> The Twited's event-driven style or the imaginary one?"

Just to be clear, Imaginary (<http://divmod.org/trac/wiki/DivmodImaginary>) uses Twisted, not Stackless.

> What do you think about it?  Of course, twisted is an mature framework
> we can trust, but doesn't the imaginary one also have pros?

If by "the imaginary one" you mean "the one implemented by stacklesssocket"... you can have both.  If you want stackless-style coroutines with the Twisted mainloop, you even have multiple options!  You can use either Corotwine (<https://launchpad.net/corotwine>) or Eventlet (<http://eventlet.net/>) with its Twisted hub, which should be the default (<http://eventlet.net/doc/hubs.html#eventlet.hubs.get_default_hub>).

In my opinion, Twisted's model is "better" in the sense that it is the superset of the two models: you can implement lightweight tasks on top of Twisted's networking core, but you can't implement Twisted on top of lightweight threads because of the implied potential reentrancy of every call.

happy microthreading,

-g

From andrewfr_ice at yahoo.com  Sun May  9 20:17:35 2010
From: andrewfr_ice at yahoo.com (Andrew Francis)
Date: Sun, 9 May 2010 17:17:35 -0700 (PDT)
Subject: [Twisted-Python] Comparing "Stackless Python + Nonblocking
	Stackless Modules" with Twisted.
In-Reply-To: <mailman.165834.1273418647.23374.twisted-python@twistedmatrix.com>
Message-ID: <626044.31792.qm@web111703.mail.gq1.yahoo.com>

Hi Peter:

Message: 7
Date: Sun, 9 May 2010 23:24:00 +0800
From: Peter Cai <newptcai at gmail.com>
Subject: [Twisted-Python] Comparing "Stackless Python + Nonblocking
    Stackless Modules" with Twisted.
To: Twisted general discussion <twisted-python at twistedmatrix.com>
Message-ID:
    <o2ybefee6d81005090824l63d3f53fyc62a9d48f19093ac at mail.gmail.com>
Content-Type: text/plain; charset=UTF-8

>Today, a guy gave me an URL
>http://code.google.com/p/stacklessexamples/wiki/StacklessNonblockModules

....

>With this module and stackless python, theoretically, we can build a
>high concurrency network application framework which has a programming
>style close to traditional multi-thread module.

Drop the theoretical part.

>The guy who gave me that URL asked a question, "Which style is better?
>The Twited's event-driven style or the imaginary one?" 

>What do you think about it?  Of course, twisted is an mature framework
>we can trust, but doesn't the imaginary one also have pros?


Well stackless python with an asynchronous networking package is not
an imaginary style. Lots of people are using this to great effect (i.e., EVE-Online)-  I'll argue the underlying design pattern is based on 
Doug Schmitt's  half-sync half-async" pattern. The idea of the 
stacklesssocket module is to act as a plug in replacement for the 
various networking packages one may use. Most of the time, things 
work. However I feel there are a few gotchas that one has to be aware
of.

Myself, I use Stackless with Twisted. Outside of a hiccup in the 
later versions (I think I need to set recursion depth for some weird
reason), I am happy. I like the one-stop big box shopping I get from 
using Twisted.

That said, I think for simple network interactions - that is programmes that interact with a single end-point, Twisted is perfectly fine. For that matter, even if one interacts with multiple end-points in parallel, Twisted is fine - use a deferredlist. Most programmes fall into this category. 

I think things get more complex when one is dealing with multiple end-points in sequence (now callbacks are chained) or one is using iterators (cooperators/coiterators now needed?). What light-weight threads do is make things synchronous and make the control flow obvious to the programmer (because one is relying on Python to provide the control flow).
For better or worse, I do stuff pertaining to process orchestration and it is just out there at times.

Cheers,
Andrew








      


From newptcai at gmail.com  Sun May  9 22:57:39 2010
From: newptcai at gmail.com (Peter Cai)
Date: Mon, 10 May 2010 10:57:39 +0800
Subject: [Twisted-Python] Comparing "Stackless Python + Nonblocking
	Stackless Modules" with Twisted.
In-Reply-To: <626044.31792.qm@web111703.mail.gq1.yahoo.com>
References: <mailman.165834.1273418647.23374.twisted-python@twistedmatrix.com>
	<626044.31792.qm@web111703.mail.gq1.yahoo.com>
Message-ID: <i2jbefee6d81005091957qd51f471alf3be6b51c12006b9@mail.gmail.com>

On Mon, May 10, 2010 at 8:17 AM, Andrew Francis <andrewfr_ice at yahoo.com> wrote:
> Hi Peter:

> I think things get more complex when one is dealing with multiple end-points in sequence (now callbacks are chained) or one is using iterators (cooperators/coiterators now needed?). What light-weight threads do is make things synchronous and make the control flow obvious to the programmer (because one is relying on Python to provide the control flow).

I have same feeling that when Twisted got quite complex when one has
to make sequential asynchronous calls because we can't see the flow
control because what to do next is decided in callbacks.

>
> Cheers,
> Andrew
>
>
>
>
>
>
>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
look to the things around you,the immediate world around you, if you
are alive,it will mean something to you ??Paul Strand


From general at vultaire.net  Sun May  9 23:16:55 2010
From: general at vultaire.net (Paul Goins)
Date: Mon, 10 May 2010 12:16:55 +0900
Subject: [Twisted-Python] inlineCallbacks vs explicit callbacks: performance
	concerns?
Message-ID: <4BE77AA7.7070508@vultaire.net>

Question: Is there a performance related reason why Twisted core does
not use inlineCallbacks?

-----

I'm trying to figure out how to reduce the CPU load of an app.  I've
already done a lot of profiling and have trimmed a lot of fat, but we're
still not getting as much throughput as we'd like.  We don't seem to
really be I/O bound in our application, but mostly CPU bound.

One thing we use a lot in our code is the inlineCallbacks decorator.
It's also used by txAMQP, at least in the 0.2 version we are currently
using.  However, I notice it doesn't seem to really be used anywhere in
the Twisted core code; I only see its definition and the defgen test
which uses it.

I'm curious of the reason why Twisted core does not use it.  Is it
performance related?  Compatibility with older Python versions?  Or
something else?

Thanks.

- Paul Goins

----

For those curious, here's what I'm currently facing:

If I count total "internal time" per module (NOT cumulative time), the
current hotspot is twisted.internet.defer with 27.88% of all CPU time.
The per-function breakdown is something like this:

======================= =====================
Line(Function)          Time (total time pct)
======================= =====================
314(_runCallbacks)      7.657
733(_inlineCallbacks)   6.246
833(unwindGenerator)    2.864
172(addCallbacks)       2.103
291(_startRunCallbacks) 1.940
206(addBoth)            1.369
766(gotResult)          1.165
233(callback)           1.014
======================= =====================

Twisted version: 8.2.0.  Profiler: cProfile.

I'm trying to find the best way of getting this down.  It seems like
reducing the raw number of callbacks is probably the best way if
possible.  However, unwindGenerator/_inlineCallbacks by itself takes
almost 10% of the time... hence the above question.


From glyph at twistedmatrix.com  Mon May 10 01:29:31 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 10 May 2010 01:29:31 -0400
Subject: [Twisted-Python] inlineCallbacks vs explicit callbacks:
	performance concerns?
In-Reply-To: <4BE77AA7.7070508@vultaire.net>
References: <4BE77AA7.7070508@vultaire.net>
Message-ID: <1AF0C5AF-4BFE-4A9E-8995-0E5E8E9266CF@twistedmatrix.com>

On May 9, 2010, at 11:16 PM, Paul Goins wrote:

> Question: Is there a performance related reason why Twisted core does not use inlineCallbacks?

Twisted itself (all parts of Twisted, not just Twisted core) does not use inlineCallbacks because it requires syntax only available Python 2.5, and Twisted still supports Python 2.4.

inlineCallbacks does have some overhead, but in the contexts where it's most helpful (sequential tasks where you want to have limited parallelism and lots of asynchronous things happening) that *should* be negligible compared to regular Deferreds.  The place it really starts to bite you is if you just make every method @inlineCallbacks; in that case, not only are you spending a lot of extra time in Deferred methods, you're probably sequentializing a lot of potentially concurrent I/O.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100510/a37f965c/attachment.htm 

From xtroce at gmail.com  Mon May 10 13:01:44 2010
From: xtroce at gmail.com (Xtroce)
Date: Mon, 10 May 2010 19:01:44 +0200
Subject: [Twisted-Python] deferreds and unpacking binary data
Message-ID: <AANLkTimgFiraSdCQd_FtNUKjmrbdOpZjJIjNMnfznUZG@mail.gmail.com>

Question: A Protocol should unpack some binary data. this is done in
seperate calls to struct.unpack . Inbetween i do some checks for
length, some strings returned are concatenated using join and logs are
written. This all happens in the factory of the Protocol. To keep the
code unblocking would it be wiser to spawn new Threads from the
Protocol around the whole function, like:
d = threads.deferToThread(self.factory.readPackage, data)
 because it all has to happen after one another anyway.
Or should i split it up in deferreds which if i get it correctly would
mean to create callback functions for each of the unpack()'s, join()'s
and str()'s
thanks


From glyph at twistedmatrix.com  Mon May 10 15:42:23 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 10 May 2010 15:42:23 -0400
Subject: [Twisted-Python] deferreds and unpacking binary data
In-Reply-To: <AANLkTimgFiraSdCQd_FtNUKjmrbdOpZjJIjNMnfznUZG@mail.gmail.com>
References: <AANLkTimgFiraSdCQd_FtNUKjmrbdOpZjJIjNMnfznUZG@mail.gmail.com>
Message-ID: <BEBCFA45-CAEE-4477-824A-431ABD79EF7E@twistedmatrix.com>


On May 10, 2010, at 1:01 PM, Xtroce wrote:

> Question: A Protocol should unpack some binary data. this is done in
> seperate calls to struct.unpack . Inbetween i do some checks for
> length, some strings returned are concatenated using join and logs are
> written. This all happens in the factory of the Protocol. To keep the
> code unblocking would it be wiser to spawn new Threads from the
> Protocol around the whole function, like:
> d = threads.deferToThread(self.factory.readPackage, data)
> because it all has to happen after one another anyway.
> Or should i split it up in deferreds which if i get it correctly would
> mean to create callback functions for each of the unpack()'s, join()'s
> and str()'s
> thanks

If the work is all synchronous (i.e. in-memory manipulations of data, no I/O) then just do it synchronously in the main thread.

If this blocks for a while and you want to parallelize it, it would be a good idea to split it into a separate process rather than doing any of the things you suggest.



From fenimore at gmail.com  Mon May 10 20:04:58 2010
From: fenimore at gmail.com (CARSON DEAN FENIMORE)
Date: Mon, 10 May 2010 18:04:58 -0600
Subject: [Twisted-Python] Sporadic GeneratorExit when using deferredGenerator
Message-ID: <AANLkTik-GDdiTNM1PrCTjCCsPan_42_F954shN2jUg51@mail.gmail.com>

I receive a GeneratorExit occasionally when using Twisted.  Has anyone
noticed this problem?  t I am on python 2.5 - as I understand it,
GeneratorExit derives from StandardError in 2.5, and BaseException in
2.6.  The real problem in my code appears to be that the reference to
my generator itself is being dropped, causing it to become
invalidated. Additionally, the errback/callback chain is not
propagating the error correctly.

Has anyone experienced similar problems?


From glyph at twistedmatrix.com  Mon May 10 20:35:26 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 10 May 2010 20:35:26 -0400
Subject: [Twisted-Python] Sporadic GeneratorExit when using
	deferredGenerator
In-Reply-To: <AANLkTik-GDdiTNM1PrCTjCCsPan_42_F954shN2jUg51@mail.gmail.com>
References: <AANLkTik-GDdiTNM1PrCTjCCsPan_42_F954shN2jUg51@mail.gmail.com>
Message-ID: <00A7A151-B04D-47B8-889C-A5076BBC2683@twistedmatrix.com>


On May 10, 2010, at 8:04 PM, CARSON DEAN FENIMORE wrote:

> I receive a GeneratorExit occasionally when using Twisted.  Has anyone
> noticed this problem?  t I am on python 2.5 - as I understand it,
> GeneratorExit derives from StandardError in 2.5, and BaseException in
> 2.6.  The real problem in my code appears to be that the reference to
> my generator itself is being dropped, causing it to become
> invalidated. Additionally, the errback/callback chain is not
> propagating the error correctly.
> 
> Has anyone experienced similar problems?

I don't know.  Do you have a traceback?  Where do you receive GeneratorExit?


From gabriel at cttc.upc.edu  Tue May 11 04:31:31 2010
From: gabriel at cttc.upc.edu (Gabriel =?ISO-8859-1?Q?Gonz=E1lez?=)
Date: Tue, 11 May 2010 10:31:31 +0200
Subject: [Twisted-Python] Detecting idle connection with
	perspective	broker
In-Reply-To: <u2wd79700b91004300423v8af1384u8e0a22d620919286@mail.gmail.com>
References: <1272622055.3109.41.camel@pcmlevi.cttc.org>
	<u2wd79700b91004300423v8af1384u8e0a22d620919286@mail.gmail.com>
Message-ID: <1273566691.15882.20.camel@pcmlevi.cttc.org>

Thanks! that works for me, now I set a Timeout in server and I can check
if client is connected every 10 seconds.
But now I have a last question about what's the better way to delete the
User(avatar) instance when the logout is done. In my logout method I
delete database entries about the disconnected user, but how can I do to
clean User(avatarID) instance and where I have to do that.

Thanks
Gabriel.



On Fri, 2010-04-30 at 14:23 +0300, Konrads Smelkovs wrote:
> A simple solution could be to implement a ping method with client and
> have server ping client once every N seconds. At the same time, fire a
> delayed call for N+5 seconds. if delayed call is executed first, drop
> connection.
> --
> Konrads Smelkovs
> Applied IT sorcery.
> 
> 
> 2010/4/30 Gabriel Gonz??lez <gabriel at cttc.upc.edu>
>         Hi there,
>         I wrote a small server application with PB but now I have some
>         problem
>         with client disconnection. When I have a idle connection, the
>         logout
>         method at server never is called (this method let me have a
>         list of
>         current logged users) and then client appears always connected
>         to
>         server.
>         
>         I can see the same issue with the chatserver example from
>         perspective
>         broker doc with detached method.
>         
>         class ChatRealm:
>             implements(portal.IRealm)
>             def requestAvatar(self, avatarID, mind, *interfaces):
>                 assert pb.IPerspective in interfaces
>                 avatar = User(avatarID)
>                 avatar.server = self.server
>                 avatar.attached(mind)
>                 return pb.IPerspective, avatar, lambda
>         a=avatar:a.detached(mind)
>         
>         How can I detect that idle connection clients to call detached
>         method?
>         
>         Thanks!
>         
>         
>         
>         
>         
>         
>         
>         
>         
>         
>         --
>         Aquest missatge ha estat analitzat per MailScanner
>         a la cerca de virus i d'altres continguts perillosos,
>         i es considera que est?? net.
>         
>         
>         
>         _______________________________________________
>         Twisted-Python mailing list
>         Twisted-Python at twistedmatrix.com
>         http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>         
> 
> 
> -- 
> Aquest missatge ha estat analitzat per MailScanner 
> a la cerca de virus i d'altres continguts perillosos, 
> i es considera que est?? net. 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-- 
Aquest missatge ha estat analitzat per MailScanner
a la cerca de virus i d'altres continguts perillosos,
i es considera que est? net.



From gabriele.lanaro at gmail.com  Tue May 11 06:20:27 2010
From: gabriele.lanaro at gmail.com (Gabriele Lanaro)
Date: Tue, 11 May 2010 12:20:27 +0200
Subject: [Twisted-Python] suggestion for a file transfer protocol
In-Reply-To: <AANLkTinkXxlbzFbTZUgPnn0Xnx99904i-M5Ai7Vqk_-2@mail.gmail.com>
References: <AANLkTinkXxlbzFbTZUgPnn0Xnx99904i-M5Ai7Vqk_-2@mail.gmail.com>
Message-ID: <AANLkTimDQJ21zmleuOzX-k6v2BE4MxN54GpozzGcvCb5@mail.gmail.com>

I'm trying to develop a simple application that let communicate two
computers in a LAN for transferring files. My idea is that:

using dbus/zeroconf each machine can see other's service and can connect
with it (I need something without authentication or so)

having a lan with 2 machines

A asks B if he can send a file

if B accepts, begin transferring
if B refuse, send an error back

It would be nice to transfer big files (not loaded all in memory) and the
ability to stop/resume the upload/download and the integrity check.

Is there a protocol that let me do this stuff or is better to implement a
protocol on my own? (I'd like that the system is flexible to further extend
for example, implement shared folders and so on)

In the latter case it's convenient to use one port or two ports like ftp
does?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100511/b6ca2983/attachment.htm 

From donal.mcmullan at gmail.com  Tue May 11 08:17:40 2010
From: donal.mcmullan at gmail.com (Donal McMullan)
Date: Wed, 12 May 2010 00:17:40 +1200
Subject: [Twisted-Python] listenTCP in a TAC
Message-ID: <AANLkTikajlVI59lBEO2S_XoIKWkG-IA-00_IqQoTHzqW@mail.gmail.com>

I've got a server application that listens on a port, and when clients
connect, spawns another TCP service on a random port that can live
from a few seconds, up to a day or two.

I had some problems getting this to work with
twisted.application.internet.TCPServer (my services wouldn't stop
listening when I'd finished with them) but it's working ok with plain
old reactor.listenTCP.

I don't really grok the TAC thing yet, or why there's a different
method for spawning servers within an Application. Is my listenTCP
approach bad practice for some reason that's not apparent to me?

Thanks!

Donal


From godson.g at gmail.com  Tue May 11 08:44:27 2010
From: godson.g at gmail.com (Godson Gera)
Date: Tue, 11 May 2010 18:14:27 +0530
Subject: [Twisted-Python] listenTCP in a TAC
In-Reply-To: <AANLkTikajlVI59lBEO2S_XoIKWkG-IA-00_IqQoTHzqW@mail.gmail.com>
References: <AANLkTikajlVI59lBEO2S_XoIKWkG-IA-00_IqQoTHzqW@mail.gmail.com>
Message-ID: <AANLkTilvjbHX5xeJC1KC1cFK2zdUSXBQWke0NTmkobpd@mail.gmail.com>

you can call 'disownServiceParent' when you don't want them to be in service
any more. That will cause it to stop listening.

http://twistedmatrix.com/documents/10.0.0/api/twisted.application.service.Service.html#disownServiceParent


On Tue, May 11, 2010 at 5:47 PM, Donal McMullan <donal.mcmullan at gmail.com>wrote:

> I've got a server application that listens on a port, and when clients
> connect, spawns another TCP service on a random port that can live
> from a few seconds, up to a day or two.
>
> I had some problems getting this to work with
> twisted.application.internet.TCPServer (my services wouldn't stop
> listening when I'd finished with them) but it's working ok with plain
> old reactor.listenTCP.
>
> I don't really grok the TAC thing yet, or why there's a different
> method for spawning servers within an Application. Is my listenTCP
> approach bad practice for some reason that's not apparent to me?
>
> Thanks!
>
> Donal
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Thanks & Regards,
Godson Gera
IVR India <http://godson.in>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100511/1a833b66/attachment.htm 

From exarkun at twistedmatrix.com  Mon May 10 18:59:35 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 10 May 2010 22:59:35 -0000
Subject: [Twisted-Python] Comparing "Stackless Python +
	Nonblocking	Stackless Modules" with Twisted.
In-Reply-To: <i2jbefee6d81005091957qd51f471alf3be6b51c12006b9@mail.gmail.com>
References: <mailman.165834.1273418647.23374.twisted-python@twistedmatrix.com>
	<626044.31792.qm@web111703.mail.gq1.yahoo.com>
	<i2jbefee6d81005091957qd51f471alf3be6b51c12006b9@mail.gmail.com>
Message-ID: <20100510225935.1843.356763267.divmod.xquotient.11@localhost.localdomain>

On 02:57 am, newptcai at gmail.com wrote:
>On Mon, May 10, 2010 at 8:17 AM, Andrew Francis 
><andrewfr_ice at yahoo.com> wrote:
>>Hi Peter:
>
>>I think things get more complex when one is dealing with multiple end- 
>>points in sequence (now callbacks are chained) or one is using 
>>iterators (cooperators/coiterators now needed?). What light-weight 
>>threads do is make things synchronous and make the control flow 
>>obvious to the programmer (because one is relying on Python to provide 
>>the control flow).
>
>I have same feeling that when Twisted got quite complex when one has
>to make sequential asynchronous calls because we can't see the flow
>control because what to do next is decided in callbacks.

If you find the simple building blocks for concurrency in Twisted to not 
allow you express solutions in a clear way, that may mean that you need 
some more expressive tools to use in solving your problems.  Perhaps you 
can construct these out of the building blocks Twisted provides. 
Equally worth considering is that there may be some more expressive 
tools in Twisted already.

For example, have you looked at the cooperator API (which Andrew was 
referring to)?

http://twistedmatrix.com/documents/current/api/twisted.internet.task.html#cooperate

Jean-Paul


From itamar at itamarst.org  Tue May 11 09:02:17 2010
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Tue, 11 May 2010 09:02:17 -0400
Subject: [Twisted-Python] listenTCP in a TAC
In-Reply-To: <AANLkTikajlVI59lBEO2S_XoIKWkG-IA-00_IqQoTHzqW@mail.gmail.com>
References: <AANLkTikajlVI59lBEO2S_XoIKWkG-IA-00_IqQoTHzqW@mail.gmail.com>
Message-ID: <1273582937.31649.850.camel@pintsize>

On Wed, 2010-05-12 at 00:17 +1200, Donal McMullan wrote:

> I don't really grok the TAC thing yet, or why there's a different
> method for spawning servers within an Application. Is my listenTCP
> approach bad practice for some reason that's not apparent to me?

Services are things that can be started and stopped, that's all.
Typically you'd write your own custom logic here, but Twisted also
provides wrappers around listenTCP and friends to make them look like
Services. You don't have to use them if you don't want to.



From donal.mcmullan at gmail.com  Tue May 11 09:11:24 2010
From: donal.mcmullan at gmail.com (Donal McMullan)
Date: Wed, 12 May 2010 01:11:24 +1200
Subject: [Twisted-Python] listenTCP in a TAC
In-Reply-To: <AANLkTilvjbHX5xeJC1KC1cFK2zdUSXBQWke0NTmkobpd@mail.gmail.com>
References: <AANLkTikajlVI59lBEO2S_XoIKWkG-IA-00_IqQoTHzqW@mail.gmail.com>
	<AANLkTilvjbHX5xeJC1KC1cFK2zdUSXBQWke0NTmkobpd@mail.gmail.com>
Message-ID: <AANLkTinqQbvmRyTM6ZfP63KmYCWoXUhb2bAdlUvmLjLf@mail.gmail.com>

Hi Godson - thanks for the reply... I had tried disowning the parent.
I was actually getting unexpected behaviour on setServiceParent, but
that's another story. I'll try again with TCPServer tomorrow, but for
now I'm just keen to know if there are any bad interactions between
Applications and listenTCP.

Thanks

D



On 12 May 2010 00:44, Godson Gera <godson.g at gmail.com> wrote:
> you can call 'disownServiceParent' when you don't want them to be in service
> any more. That will cause it to stop listening.
>
> http://twistedmatrix.com/documents/10.0.0/api/twisted.application.service.Service.html#disownServiceParent
>
>
> On Tue, May 11, 2010 at 5:47 PM, Donal McMullan <donal.mcmullan at gmail.com>
> wrote:
>>
>> I've got a server application that listens on a port, and when clients
>> connect, spawns another TCP service on a random port that can live
>> from a few seconds, up to a day or two.
>>
>> I had some problems getting this to work with
>> twisted.application.internet.TCPServer (my services wouldn't stop
>> listening when I'd finished with them) but it's working ok with plain
>> old reactor.listenTCP.
>>
>> I don't really grok the TAC thing yet, or why there's a different
>> method for spawning servers within an Application. Is my listenTCP
>> approach bad practice for some reason that's not apparent to me?
>>
>> Thanks!
>>
>> Donal
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> --
> Thanks & Regards,
> Godson Gera
> IVR India
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


From donal.mcmullan at gmail.com  Tue May 11 09:12:19 2010
From: donal.mcmullan at gmail.com (Donal McMullan)
Date: Wed, 12 May 2010 01:12:19 +1200
Subject: [Twisted-Python] listenTCP in a TAC
In-Reply-To: <1273582937.31649.850.camel@pintsize>
References: <AANLkTikajlVI59lBEO2S_XoIKWkG-IA-00_IqQoTHzqW@mail.gmail.com>
	<1273582937.31649.850.camel@pintsize>
Message-ID: <AANLkTikSgfMmSBgHW3BzT7d_paL7wf79cl8Qvx5Rva6q@mail.gmail.com>

On 12 May 2010 01:02, Itamar Turner-Trauring <itamar at itamarst.org> wrote:
> On Wed, 2010-05-12 at 00:17 +1200, Donal McMullan wrote:
>
>> I don't really grok the TAC thing yet, or why there's a different
>> method for spawning servers within an Application. Is my listenTCP
>> approach bad practice for some reason that's not apparent to me?
>
> Services are things that can be started and stopped, that's all.
> Typically you'd write your own custom logic here, but Twisted also
> provides wrappers around listenTCP and friends to make them look like
> Services. You don't have to use them if you don't want to.

Great - thanks Itamar!


From exarkun at twistedmatrix.com  Tue May 11 09:42:10 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 11 May 2010 13:42:10 -0000
Subject: [Twisted-Python] Detecting idle connection with perspective
	broker
In-Reply-To: <1273566691.15882.20.camel@pcmlevi.cttc.org>
References: <1272622055.3109.41.camel@pcmlevi.cttc.org>
	<u2wd79700b91004300423v8af1384u8e0a22d620919286@mail.gmail.com>
	<1273566691.15882.20.camel@pcmlevi.cttc.org>
Message-ID: <20100511134210.1854.1050470360.divmod.xquotient.3@localhost.localdomain>

On 08:31 am, gabriel at cttc.upc.edu wrote:
>Thanks! that works for me, now I set a Timeout in server and I can 
>check
>if client is connected every 10 seconds.
>But now I have a last question about what's the better way to delete 
>the
>User(avatar) instance when the logout is done. In my logout method I
>delete database entries about the disconnected user, but how can I do 
>to
>clean User(avatarID) instance and where I have to do that.

The object will be collected by Python automatically when there are no 
more references to it.

Jean-Paul


From dripton at ripton.net  Tue May 11 11:17:51 2010
From: dripton at ripton.net (David Ripton)
Date: Tue, 11 May 2010 08:17:51 -0700
Subject: [Twisted-Python] suggestion for a file transfer protocol
In-Reply-To: <AANLkTimDQJ21zmleuOzX-k6v2BE4MxN54GpozzGcvCb5@mail.gmail.com>
References: <AANLkTinkXxlbzFbTZUgPnn0Xnx99904i-M5Ai7Vqk_-2@mail.gmail.com>
	<AANLkTimDQJ21zmleuOzX-k6v2BE4MxN54GpozzGcvCb5@mail.gmail.com>
Message-ID: <20100511151750.GA2779@vidar.dreamhost.com>

On 2010.05.11 12:20:27 +0200, Gabriele Lanaro wrote:
> I'm trying to develop a simple application that let communicate two
> computers in a LAN for transferring files. My idea is that:
> 
> using dbus/zeroconf each machine can see other's service and can connect
> with it (I need something without authentication or so)

It's a good concept, as long as all machines are on the same subnet and
they all have a zeroconf client installed.

I've had very bad experience with the old version of dbus-python that
ships with RHEL 5.  It just doesn't work reliably.  But if you're on a
more modern distrobution with newer versions of everything, maybe it'll
all work great.

> having a lan with 2 machines
> 
> A asks B if he can send a file
> 
> if B accepts, begin transferring
> if B refuse, send an error back
> 
> It would be nice to transfer big files (not loaded all in memory) and the
> ability to stop/resume the upload/download and the integrity check.
> 
> Is there a protocol that let me do this stuff or is better to implement a
> protocol on my own? (I'd like that the system is flexible to further extend
> for example, implement shared folders and so on)

If a pre-built program like scp or rsync doesn't do exactly what you
want, and you want the ability to extend it later, then I think it's
reasonable to do your own protocol.

> In the latter case it's convenient to use one port or two ports like ftp
> does?

I prefer to only use one port if possible, because it's simpler.  And it
simplifies dealing with firewalls, if you ever have to do that.  As long
as you split large files into reasonably small chunks so the data
packets don't cause excessive latency for the control packets, it should
work fine.

-- 
David Ripton    dripton at ripton.net


From pm-twisted-python at anapol.cz  Tue May 11 15:54:38 2010
From: pm-twisted-python at anapol.cz (Petr Mifek)
Date: Tue, 11 May 2010 21:54:38 +0200
Subject: [Twisted-Python] txriak module released.
In-Reply-To: <1541138433.551272144614766.JavaMail.rgacote@Raymond-Cotes-MacBook-Pro.local>
References: <1541138433.551272144614766.JavaMail.rgacote@Raymond-Cotes-MacBook-Pro.local>
Message-ID: <4BE9B5FE.9020606@anapol.cz>

Hi Ray,

that is a great news! I'm already using it in a project. Did I miss a 
wiki/page for it or so far none exists? Considered putting the source up 
to http://github.com or similar site to allow for easy following the 
code, extending & fixing issues?

Cheers, Petr

Ray Cote wrote:
> Hello Twisted:
>
> An initial release of txriak has been posted to PyPI:
>   <http://pypi.python.org/pypi/txriak/0.1.1>
>
> txriak is a Twisted module for communicating with Basho Technology's Riak data store via the HTTP interface. 
> Written in Python, it requires Python 2.5 since it uses the yield version of deferreds.
> Initial release was written to match as closely as possible the 0.9 riak.py Python module released by Basho Technologies. 
>
> Hope others find this to be useful. 
> Look forward to comments and feedback. 
> --R
>
>
>   


From konrads at smelkovs.com  Tue May 11 16:40:53 2010
From: konrads at smelkovs.com (Konrads Smelkovs)
Date: Tue, 11 May 2010 23:40:53 +0300
Subject: [Twisted-Python] suggestion for a file transfer protocol
In-Reply-To: <AANLkTimDQJ21zmleuOzX-k6v2BE4MxN54GpozzGcvCb5@mail.gmail.com>
References: <AANLkTinkXxlbzFbTZUgPnn0Xnx99904i-M5Ai7Vqk_-2@mail.gmail.com>
	<AANLkTimDQJ21zmleuOzX-k6v2BE4MxN54GpozzGcvCb5@mail.gmail.com>
Message-ID: <AANLkTikPfCWWnU1MZK05Q2NeHMTuZa2Llu_KmJIBuESq@mail.gmail.com>

You can do with Pb and Consumer/Producer. Things that use low level
interfaces such as sendfile on linux will be more efficient and you
may want to consider setting up an http server and just handing out
links.

2010/5/11, Gabriele Lanaro <gabriele.lanaro at gmail.com>:
> I'm trying to develop a simple application that let communicate two
> computers in a LAN for transferring files. My idea is that:
>
> using dbus/zeroconf each machine can see other's service and can connect
> with it (I need something without authentication or so)
>
> having a lan with 2 machines
>
> A asks B if he can send a file
>
> if B accepts, begin transferring
> if B refuse, send an error back
>
> It would be nice to transfer big files (not loaded all in memory) and the
> ability to stop/resume the upload/download and the integrity check.
>
> Is there a protocol that let me do this stuff or is better to implement a
> protocol on my own? (I'd like that the system is flexible to further extend
> for example, implement shared folders and so on)
>
> In the latter case it's convenient to use one port or two ports like ftp
> does?
>

-- 
Nos?t?ts no manas mobil?s ier?ces

--
Konrads Smelkovs
Applied IT sorcery.


From rgacote at appropriatesolutions.com  Tue May 11 17:31:23 2010
From: rgacote at appropriatesolutions.com (Ray Cote)
Date: Tue, 11 May 2010 17:31:23 -0400 (EDT)
Subject: [Twisted-Python] txriak module released.
In-Reply-To: <4BE9B78A.9050408@anapol.cz>
Message-ID: <6550610.8731273614386192.JavaMail.rgacote@ip-210.Corp.AppropriateSolutions.com>

Hi Petr: 
Glad to hear you're finding the txriak module useful. 
Guess I need to make sure that all the listing pages are pointing to each other, and that they eventually point to the bitbucket sources. 

Look forward to hearing feedback. 
Thanks
--Ray

----- Original Message -----
From: "Petr Mifek" <Petr.Mifek at anapol.cz>
To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Cc: "Ray Cote" <rgacote at AppropriateSolutions.com>
Sent: Tuesday, May 11, 2010 4:01:14 PM GMT -05:00 US/Canada Eastern
Subject: Re: [Twisted-Python] txriak module released.

Ah, scratch that. Found the 0.2.1 update with bitbucket homepage set ;)

Petr Mifek wrote:
> Hi Ray,
>
> that is a great news! I'm already using it in a project. Did I miss a 
> wiki/page for it or so far none exists? Considered putting the source up 
> to http://github.com or similar site to allow for easy following the 
> code, extending & fixing issues?
>
> Cheers, Petr
>
> Ray Cote wrote:
>   
>> Hello Twisted:
>>
>> An initial release of txriak has been posted to PyPI:
>>   <http://pypi.python.org/pypi/txriak/0.1.1>
>>
>> txriak is a Twisted module for communicating with Basho Technology's Riak data store via the HTTP interface. 
>> Written in Python, it requires Python 2.5 since it uses the yield version of deferreds.
>> Initial release was written to match as closely as possible the 0.9 riak.py Python module released by Basho Technologies. 
>>
>> Hope others find this to be useful. 
>> Look forward to comments and feedback. 
>> --R
>>
>>
>>   
>>     
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>   

-- 
Ray Cote, President
Appropriate Solutions, Inc.
We Build Software
603.924.6079


From fenimore at gmail.com  Tue May 11 20:28:04 2010
From: fenimore at gmail.com (CARSON DEAN FENIMORE)
Date: Tue, 11 May 2010 18:28:04 -0600
Subject: [Twisted-Python] Sporadic GeneratorExit when using
	deferredGenerator
In-Reply-To: <00A7A151-B04D-47B8-889C-A5076BBC2683@twistedmatrix.com>
References: <AANLkTik-GDdiTNM1PrCTjCCsPan_42_F954shN2jUg51@mail.gmail.com>
	<00A7A151-B04D-47B8-889C-A5076BBC2683@twistedmatrix.com>
Message-ID: <AANLkTilVLMjROZb84HOjadZ-rdq6YwQ-u1hPeRfGUd4p@mail.gmail.com>

Just FYI: The problem appears to have gone away with some minor
changes.  We have twisted in use in a large application, which
consists of many threads.  These threads were invoking some
twisted-related methods; for example, calling addCallback on a
Deferred instance from one thread, while running a deferredGenerator
in twisted -- this, of course, is not thread safe!  Except for a
handful of such cases, we were using twisted correctly - adding
callbacks on the main thread solved the issue at hand.



On Mon, May 10, 2010 at 6:35 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
>
> On May 10, 2010, at 8:04 PM, CARSON DEAN FENIMORE wrote:
>
>> I receive a GeneratorExit occasionally when using Twisted. ?Has anyone
>> noticed this problem? ?t I am on python 2.5 - as I understand it,
>> GeneratorExit derives from StandardError in 2.5, and BaseException in
>> 2.6. ?The real problem in my code appears to be that the reference to
>> my generator itself is being dropped, causing it to become
>> invalidated. Additionally, the errback/callback chain is not
>> propagating the error correctly.
>>
>> Has anyone experienced similar problems?
>
> I don't know. ?Do you have a traceback? ?Where do you receive GeneratorExit?
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From glyph at twistedmatrix.com  Wed May 12 05:08:26 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 12 May 2010 05:08:26 -0400
Subject: [Twisted-Python] Sporadic GeneratorExit when using
	deferredGenerator
In-Reply-To: <AANLkTilVLMjROZb84HOjadZ-rdq6YwQ-u1hPeRfGUd4p@mail.gmail.com>
References: <AANLkTik-GDdiTNM1PrCTjCCsPan_42_F954shN2jUg51@mail.gmail.com>
	<00A7A151-B04D-47B8-889C-A5076BBC2683@twistedmatrix.com>
	<AANLkTilVLMjROZb84HOjadZ-rdq6YwQ-u1hPeRfGUd4p@mail.gmail.com>
Message-ID: <05569420-82AB-4832-A0AA-64016DEFB473@twistedmatrix.com>


On May 11, 2010, at 8:28 PM, CARSON DEAN FENIMORE wrote:

> Just FYI: The problem appears to have gone away with some minor
> changes.  We have twisted in use in a large application, which
> consists of many threads.  These threads were invoking some
> twisted-related methods; for example, calling addCallback on a
> Deferred instance from one thread, while running a deferredGenerator
> in twisted -- this, of course, is not thread safe!  Except for a
> handful of such cases, we were using twisted correctly - adding
> callbacks on the main thread solved the issue at hand.

Glad you solved your problem, and thanks for reporting your conclusions here so future readers don't have to wonder what the heck was going on! :)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100512/f3efbb27/attachment.htm 

From gabriel at cttc.upc.edu  Wed May 12 05:36:31 2010
From: gabriel at cttc.upc.edu (Gabriel =?ISO-8859-1?Q?Gonz=E1lez?=)
Date: Wed, 12 May 2010 11:36:31 +0200
Subject: [Twisted-Python] Detecting idle connection with
	perspective	broker
In-Reply-To: <20100511134210.1854.1050470360.divmod.xquotient.3@localhost.localdomain>
References: <1272622055.3109.41.camel@pcmlevi.cttc.org>
	<u2wd79700b91004300423v8af1384u8e0a22d620919286@mail.gmail.com>
	<1273566691.15882.20.camel@pcmlevi.cttc.org>
	<20100511134210.1854.1050470360.divmod.xquotient.3@localhost.localdomain>
Message-ID: <1273656991.10054.19.camel@pcmlevi.cttc.org>

Ok, and there's any method to know when this object will be collected or
if really don't have more references?. How can I know what users are
logged for PB to test if these objects have been deleted correctly? 

thanks,

Gabriel

On Tue, 2010-05-11 at 13:42 +0000, exarkun at twistedmatrix.com wrote:
> On 08:31 am, gabriel at cttc.upc.edu wrote:
> >Thanks! that works for me, now I set a Timeout in server and I can 
> >check
> >if client is connected every 10 seconds.
> >But now I have a last question about what's the better way to delete 
> >the
> >User(avatar) instance when the logout is done. In my logout method I
> >delete database entries about the disconnected user, but how can I do 
> >to
> >clean User(avatarID) instance and where I have to do that.
> 
> The object will be collected by Python automatically when there are no 
> more references to it.
> 
> Jean-Paul
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 


-- 
Aquest missatge ha estat analitzat per MailScanner
a la cerca de virus i d'altres continguts perillosos,
i es considera que est? net.



From gabriele.lanaro at gmail.com  Wed May 12 08:32:51 2010
From: gabriele.lanaro at gmail.com (Gabriele Lanaro)
Date: Wed, 12 May 2010 14:32:51 +0200
Subject: [Twisted-Python] suggestion for a file transfer protocol
In-Reply-To: <AANLkTikPfCWWnU1MZK05Q2NeHMTuZa2Llu_KmJIBuESq@mail.gmail.com>
References: <AANLkTinkXxlbzFbTZUgPnn0Xnx99904i-M5Ai7Vqk_-2@mail.gmail.com>
	<AANLkTimDQJ21zmleuOzX-k6v2BE4MxN54GpozzGcvCb5@mail.gmail.com>
	<AANLkTikPfCWWnU1MZK05Q2NeHMTuZa2Llu_KmJIBuESq@mail.gmail.com>
Message-ID: <AANLkTilTN67a9_fZKTywaeCLuUuL7FWpbaMMiHLGH86Y@mail.gmail.com>

Thank you very much for you help,  the twisted community is really helpful!

For now I'll use PB and ConsumerProducer and if it's not sufficient I'll
hack around the BitTorrent protocol (using the twisted implementation in the
BitTorrent client).

Thank you very much for the help!

- Gabriele

2010/5/11 Konrads Smelkovs <konrads at smelkovs.com>

> You can do with Pb and Consumer/Producer. Things that use low level
> interfaces such as sendfile on linux will be more efficient and you
> may want to consider setting up an http server and just handing out
> links.
>
> 2010/5/11, Gabriele Lanaro <gabriele.lanaro at gmail.com>:
> > I'm trying to develop a simple application that let communicate two
> > computers in a LAN for transferring files. My idea is that:
> >
> > using dbus/zeroconf each machine can see other's service and can connect
> > with it (I need something without authentication or so)
> >
> > having a lan with 2 machines
> >
> > A asks B if he can send a file
> >
> > if B accepts, begin transferring
> > if B refuse, send an error back
> >
> > It would be nice to transfer big files (not loaded all in memory) and the
> > ability to stop/resume the upload/download and the integrity check.
> >
> > Is there a protocol that let me do this stuff or is better to implement a
> > protocol on my own? (I'd like that the system is flexible to further
> extend
> > for example, implement shared folders and so on)
> >
> > In the latter case it's convenient to use one port or two ports like ftp
> > does?
> >
>
> --
> Nos?t?ts no manas mobil?s ier?ces
>
> --
> Konrads Smelkovs
> Applied IT sorcery.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100512/dc45aea4/attachment.htm 

From exarkun at twistedmatrix.com  Thu May 13 09:56:40 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 13 May 2010 13:56:40 -0000
Subject: [Twisted-Python] Detecting idle connection with perspective
	broker
In-Reply-To: <1273656991.10054.19.camel@pcmlevi.cttc.org>
References: <1272622055.3109.41.camel@pcmlevi.cttc.org>
	<u2wd79700b91004300423v8af1384u8e0a22d620919286@mail.gmail.com>
	<1273566691.15882.20.camel@pcmlevi.cttc.org>
	<20100511134210.1854.1050470360.divmod.xquotient.3@localhost.localdomain>
	<1273656991.10054.19.camel@pcmlevi.cttc.org>
Message-ID: <20100513135640.1694.1204282360.divmod.xquotient.6@localhost.localdomain>

On 12 May, 09:36 am, gabriel at cttc.upc.edu wrote:
>Ok, and there's any method to know when this object will be collected 
>or
>if really don't have more references?. How can I know what users are
>logged for PB to test if these objects have been deleted correctly?

The realm (which you supply) creates all the user objects.  So you're in 
complete control.  If you want your realm to track all the users it has 
created, it can.

Jean-Paul
>
>thanks,
>
>Gabriel
>
>On Tue, 2010-05-11 at 13:42 +0000, exarkun at twistedmatrix.com wrote:
>>On 08:31 am, gabriel at cttc.upc.edu wrote:
>> >Thanks! that works for me, now I set a Timeout in server and I can
>> >check
>> >if client is connected every 10 seconds.
>> >But now I have a last question about what's the better way to delete
>> >the
>> >User(avatar) instance when the logout is done. In my logout method I
>> >delete database entries about the disconnected user, but how can I do
>> >to
>> >clean User(avatarID) instance and where I have to do that.
>>
>>The object will be collected by Python automatically when there are no
>>more references to it.
>>
>>Jean-Paul
>>
>>_______________________________________________
>>Twisted-Python mailing list
>>Twisted-Python at twistedmatrix.com
>>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>--
>Aquest missatge ha estat analitzat per MailScanner
>a la cerca de virus i d'altres continguts perillosos,
>i es considera que est?FDet.


From gabriel at cttc.upc.edu  Fri May 14 04:42:47 2010
From: gabriel at cttc.upc.edu (Gabriel =?ISO-8859-1?Q?Gonz=E1lez?=)
Date: Fri, 14 May 2010 10:42:47 +0200
Subject: [Twisted-Python] Detecting idle connection with
	perspective	broker
In-Reply-To: <20100513135640.1694.1204282360.divmod.xquotient.6@localhost.localdomain>
References: <1272622055.3109.41.camel@pcmlevi.cttc.org>
	<u2wd79700b91004300423v8af1384u8e0a22d620919286@mail.gmail.com>
	<1273566691.15882.20.camel@pcmlevi.cttc.org>
	<20100511134210.1854.1050470360.divmod.xquotient.3@localhost.localdomain>
	<1273656991.10054.19.camel@pcmlevi.cttc.org>
	<20100513135640.1694.1204282360.divmod.xquotient.6@localhost.localdomain>
Message-ID: <1273826567.4898.10.camel@pcmlevi.cttc.org>

ok, thanks!

Gabriel.

On Thu, 2010-05-13 at 13:56 +0000, exarkun at twistedmatrix.com wrote:
> On 12 May, 09:36 am, gabriel at cttc.upc.edu wrote:
> >Ok, and there's any method to know when this object will be collected 
> >or
> >if really don't have more references?. How can I know what users are
> >logged for PB to test if these objects have been deleted correctly?
> 
> The realm (which you supply) creates all the user objects.  So you're in 
> complete control.  If you want your realm to track all the users it has 
> created, it can.
> 
> Jean-Paul
> >
> >thanks,
> >
> >Gabriel
> >
> >On Tue, 2010-05-11 at 13:42 +0000, exarkun at twistedmatrix.com wrote:
> >>On 08:31 am, gabriel at cttc.upc.edu wrote:
> >> >Thanks! that works for me, now I set a Timeout in server and I can
> >> >check
> >> >if client is connected every 10 seconds.
> >> >But now I have a last question about what's the better way to delete
> >> >the
> >> >User(avatar) instance when the logout is done. In my logout method I
> >> >delete database entries about the disconnected user, but how can I do
> >> >to
> >> >clean User(avatarID) instance and where I have to do that.
> >>
> >>The object will be collected by Python automatically when there are no
> >>more references to it.
> >>
> >>Jean-Paul
> >>
> >>_______________________________________________
> >>Twisted-Python mailing list
> >>Twisted-Python at twistedmatrix.com
> >>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
> >
> >--
> >Aquest missatge ha estat analitzat per MailScanner
> >a la cerca de virus i d'altres continguts perillosos,
> >i es considera que estFDet.
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-- 
Aquest missatge ha estat analitzat per MailScanner
a la cerca de virus i d'altres continguts perillosos,
i es considera que est? net.



From exarkun at twistedmatrix.com  Sun May 16 00:05:46 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 16 May 2010 04:05:46 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1273982746.94.148536951@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100516/64a0efe9/attachment.htm 

From foom at fuhm.net  Fri May 21 11:41:20 2010
From: foom at fuhm.net (James Y Knight)
Date: Fri, 21 May 2010 11:41:20 -0400
Subject: [Twisted-Python] Test, plz ignore
Message-ID: <32B8F60D-73CB-408F-A2DD-7ADFBE3B90AA@fuhm.net>

test mail.


From gabriele.lanaro at gmail.com  Sat May 22 14:35:16 2010
From: gabriele.lanaro at gmail.com (Gabriele Lanaro)
Date: Sat, 22 May 2010 20:35:16 +0200
Subject: [Twisted-Python] Sending large files over network with perspective
	broker
Message-ID: <AANLkTil5QrvNyr2t20UbOVWqr2UkgcfOD9jGZtDikkDj@mail.gmail.com>

I'm writing a gtk application that transfer files in LAN. The application
has a server and can spawn different clients (one for each file to send) .
The flow between client and server is something like that:

client asks pb.Root a FileSender ( that is conceptually a perspective).
The client receive the file sender.
The client declares the size and the basename of the file he is sending,
requiring authorization to send.
The server perform authorization and passes to the client a unique key to
start the file transfer.
The client performs the file transfer in "chunks". Each chunk is passed
throught a remote method, send_chunk.

The file transfer is done "recursively", each send_chunk deferred generates
a new deferred for the next chunk.

Some pseudocode to understand better my solution.

FileSender:
    remote_get_auth():
    remote_request_for_sending(filename, size): return secret
    remote send_chunk(secred, chunk_no, data): save the chunk somewhere

Client()
    proceed_sending():

          chunk_tot = CHUNK_TOT
          chunk_no = 0

          def send(_)
                if chunk_no == CHUNK_TOT: return
                else:
                     ... read data...
                    d = filesender.callRemote("send_chunk", secret,
chunk_no, data)
                    d.addCallback(send)

I've done in this way so a new chunk is sent only if the previous chunk was
sent.
The problem of this approach is that this blocks my GUI, I can't figure out
why because I'm just generating deffereds so it souldn't block.

I've seen the page about Consumer and Producer, however I can't figure out
how to integrate producer and consumers in a Perspective Broker based code.

Can someone help me?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100522/0650ce3c/attachment.htm 

From jasonjwwilliams at gmail.com  Sat May 22 15:23:54 2010
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Sat, 22 May 2010 13:23:54 -0600
Subject: [Twisted-Python] Sending large files over network with
	perspective broker
In-Reply-To: <AANLkTil5QrvNyr2t20UbOVWqr2UkgcfOD9jGZtDikkDj@mail.gmail.com>
References: <AANLkTil5QrvNyr2t20UbOVWqr2UkgcfOD9jGZtDikkDj@mail.gmail.com>
Message-ID: <AANLkTinzUEktla5K_JBfXAF3acBNZZxa1yT4E4BYXrVY@mail.gmail.com>

Does send_chuck or callRemote block?

-J

On Sat, May 22, 2010 at 12:35 PM, Gabriele Lanaro
<gabriele.lanaro at gmail.com> wrote:
> I'm writing a gtk application that transfer files in LAN. The application
> has a server and can spawn different clients (one for each file to send) .
> The flow between client and server is something like that:
>
> client asks pb.Root a FileSender ( that is conceptually a perspective).
> The client receive the file sender.
> The client declares the size and the basename of the file he is sending,
> requiring authorization to send.
> The server perform authorization and passes to the client a unique key to
> start the file transfer.
> The client performs the file transfer in "chunks". Each chunk is passed
> throught a remote method, send_chunk.
>
> The file transfer is done "recursively", each send_chunk deferred generates
> a new deferred for the next chunk.
>
> Some pseudocode to understand better my solution.
>
> FileSender:
> ??? remote_get_auth():
> ??? remote_request_for_sending(filename, size): return secret
> ??? remote send_chunk(secred, chunk_no, data): save the chunk somewhere
>
> Client()
> ??? proceed_sending():
>
> ????????? chunk_tot = CHUNK_TOT
> ????????? chunk_no = 0
>
> ????????? def send(_)
> ??????????????? if chunk_no == CHUNK_TOT: return
> ??????????????? else:
> ???????????????????? ... read data...
> ??????????????????? d = filesender.callRemote("send_chunk", secret,
> chunk_no, data)
> ??????????????????? d.addCallback(send)
>
> I've done in this way so a new chunk is sent only if the previous chunk was
> sent.
> The problem of this approach is that this blocks my GUI, I can't figure out
> why because I'm just generating deffereds so it souldn't block.
>
> I've seen the page about Consumer and Producer, however I can't figure out
> how to integrate producer and consumers in a Perspective Broker based code.
>
> Can someone help me?
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


From glyph at twistedmatrix.com  Sat May 22 20:26:33 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 22 May 2010 20:26:33 -0400
Subject: [Twisted-Python] major changes, release engineering,
	and learning cost
Message-ID: <FCCC3CD5-0A5D-48A0-B679-24D43968175F@twistedmatrix.com>

The nice thing about Twisted's compatibility policy is that developers, and even users, very rarely have problems when installing a new version of Twisted.  While this is a nice benefit, the current strategy of developing features in a compatible way does have a couple of costs, and I'd like to see if we can address them without giving up the benefit.  I have a suggestion for a process tweak which would hopefully mitigate some of the difficulties which arise due to the compatibility policy.

When we add a new feature that supersedes an older one, or fix a bug in Twisted that involves changing behavior, the developer fixing it has to come up with a new name.  If we have several behavior-changing bugfixes in the same subsystem, that means that developers using Twisted may have to learn about 3 different symbol names.  Since we tend to avoid just suffixing names with numbers (for good reason, I think), they won't have to learn Bicycle, Bicycle2, Bicycle3, they'll have to learn Bicycle, then Footcycle, and finally Velocipede, and somehow infer that Velocipede is the newest/best name that they should be using, by reading the (hopefully clear, concise) warnings that come out of their unit tests.

This came up again recently on a ticket about URLPath,  <http://twistedmatrix.com/trac/ticket/2625#comment:16>, where a contributor suggested that it would be better to make a whole new module because it's easier for external developers to learn about that then learn about an individual method change.  This of course raises the question: if we're going to have a whole new URL class, shouldn't it fix the (numerous) *other* bugs that we know about in URLPath?

Up until now the objection to doing things this way is that it results in gigantic branches which are intractable to review.  That's a good objection, but it leaves us with a false dichotomy; reliable software and painless upgrades with a random scattershot of new features that are hard to understand, or coherent iterations of technology which can't be effectively reviewed, and therefore can't be effectively quality controlled.

I propose that we get the best of both worlds by changing the way we do reviews slightly.  Right now every code review needs to be done on an entire feature going to trunk, and _all_ of the code going to trunk needs to be reviewed at once.  I suggest that instead, we create "integration branches" for sensible constellations of features, and have a two-stage review process.

For example, let's say I want to work on making URLPath good.  There are several tickets addressing it:

<http://twistedmatrix.com/trac/ticket/2093>
<http://twistedmatrix.com/trac/ticket/2094>
<http://twistedmatrix.com/trac/ticket/2625>

For the sake of argument, let's all pretend these are all deeply interrelated and involve changes to behavior of existing methods.  I think that is sort of true of most of these, but it would be far too verbose to talk about *how*, and get bogged down in that discussion.

First, I'd make an integration ticket, let's call it #ABCD, describing how these features are related and a brief outline of the new API I propose which resolves them.

Then I'd create an integration branch from trunk, for that ticket.  From the #ABCD branch, I'd create a branch for #2093, and put it up for review.  The reviewer would review #2093 as usual, citing any test coverage issues, documentation issues, etc.  After the usual review process, when I get an "OK to merge", I would merge #2093 *to the #ABCD branch*, not trunk.

I would repeat this process for #2094 and #2625, merging each to the #ABCD branch as they passed review.

Finally, I'd put #ABCD itself up for review.  At this point the process would differ a bit.  Reviewers would be able to assume, at this point, that the potentially large body of code in #ABCD had already been reviewed, that the test cases were good, the documentation was reasonably clear, and the logic made sense.  This final review would be a quick sanity check, to make sure the tests still pass and that there are no conflicts.

I would like to strongly emphasize that this point in the process would be an inappropriate time for reviewers to start arguing with each other over what is required for the branch to land, disputing the original specification, etc; this is just an opportunity to spot potential regressions before it lands.  Each ticket review for a component of the larger feature should be an opportunity to draw attention to the direction of the larger feature development and prompt discussion.  This *might* be an appropriate point to note that some other behavior-changing feature had been left out, though.

In the case that there *were* conflicts, this would be an opportunity to review the conflict resolution itself.

(We saw a nascent version of this approach on some stuff related to <http://twistedmatrix.com/trac/ticket/886> and it was hugely painful because nobody was really sure what the process was supposed to be.  So let's not do it like that again.)

So: thoughts?  Does this make sense as a policy change for facilitating the development of major new features or consolidating behavior-changing fixes into easier-to-understand units?



From db3l.net at gmail.com  Sat May 22 22:22:28 2010
From: db3l.net at gmail.com (David Bolen)
Date: Sat, 22 May 2010 22:22:28 -0400
Subject: [Twisted-Python] Sending large files over network with
	perspective broker
References: <AANLkTil5QrvNyr2t20UbOVWqr2UkgcfOD9jGZtDikkDj@mail.gmail.com>
Message-ID: <m2632fjr17.fsf@valheru.db3l.homeip.net>

Gabriele Lanaro <gabriele.lanaro at gmail.com> writes:

> The problem of this approach is that this blocks my GUI, I can't figure out
> why because I'm just generating deffereds so it souldn't block.

Just using deferreds won't help unless you still manage to return
control back up the chain to the main event loop.  I suspect something
must be blocking somewhere, though hard to say from the pseudo-code.
Most likely a few judiciously placed logging statements would let you
see where, or at least verify that you are not returning to the main
event loop during the transfer.

I will say that chunking up a large transfer through individual PB
requests adds a bit of overhead for a large stream, and unless you
implement some sort of windowing protocol, can hurt performance due to
the latency needed to wait for the ACK from the server for each chunk.

I had what appears to be a similar requirement in terms of
transmitting a large file (A/V files to be published) as part of an
overall PB session, and decided to separate it out to its own file
upload server component coordinated through the PB session.

http://twistedmatrix.com/pipermail/twisted-python/2007-July/015738.html
has some further details on what I ended up doing.  Perhaps an approach
along these lines would work for you as well.

-- David



From exarkun at twistedmatrix.com  Sun May 23 00:05:24 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 23 May 2010 04:05:24 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1274587524.91.358928552@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100523/73bd12c3/attachment-0001.htm 

From jvalenzuela1977 at gmail.com  Sun May 23 03:59:42 2010
From: jvalenzuela1977 at gmail.com (Jason Valenzuela)
Date: Sun, 23 May 2010 15:59:42 +0800
Subject: [Twisted-Python] PB referenceable and cacheable
In-Reply-To: <FCCC3CD5-0A5D-48A0-B679-24D43968175F@twistedmatrix.com>
References: <FCCC3CD5-0A5D-48A0-B679-24D43968175F@twistedmatrix.com>
Message-ID: <4BF8E06E.8010505@gmail.com>

In an effort to learn Twisted, I am working on a set of small client and 
server applications which utilize PB as IPC. The server hosts a group of 
simple parameters that clients may monitor or set. For a client to 
monitor a parameter's value, it seems that the server should create the 
parameter as a cacheable. To allow a client to modify the parameter, a 
referenceable looks like the right path. Of course, I would like to 
consume cake as well as posses it, wanting properties of both cacheable 
and referenceable. Looking at the source code, it doesn't look like 
subclassing from both pb.referenceable and pb.cacheable is a good idea 
as each has different ideas on how to get jellied. Currently, I'm 
thinking about just creating the parameter as a normal object that 
contains two PB objects: a referenceable and a cacheable. The former 
handles incoming requests to change the parameter's value, and the 
latter keeping clients updated with the current value. Is that a sane 
approach, or am I reinventing the wheel?


Thanks,
Jason Valenzuela



From gabriele.lanaro at gmail.com  Sun May 23 06:55:04 2010
From: gabriele.lanaro at gmail.com (Gabriele Lanaro)
Date: Sun, 23 May 2010 12:55:04 +0200
Subject: [Twisted-Python] Sending large files over network with
	perspective broker
In-Reply-To: <m2632fjr17.fsf@valheru.db3l.homeip.net>
References: <AANLkTil5QrvNyr2t20UbOVWqr2UkgcfOD9jGZtDikkDj@mail.gmail.com>
	<m2632fjr17.fsf@valheru.db3l.homeip.net>
Message-ID: <AANLkTinGjNcQyorbzo1r7bObO7Gmu9VpqKsSh-trov1Q@mail.gmail.com>

Thank you very much for your responses, the problem seems to appear when in
my tests I send the file "to myself", when I send files over the network,
the things goes well.  I suspect (it's just a suspect) that the code spawns
too much deferreds too much fast, causing the loop not to complete (or
something like that).

Anyway I think I'll follow your suggestion and I'll end splitting up the
upload service and the control/authorization one, since the code can grow up
too complex and performance is a requirement.

- Gabriele

2010/5/23 David Bolen <db3l.net at gmail.com>

> Gabriele Lanaro <gabriele.lanaro at gmail.com> writes:
>
> > The problem of this approach is that this blocks my GUI, I can't figure
> out
> > why because I'm just generating deffereds so it souldn't block.
>
> Just using deferreds won't help unless you still manage to return
> control back up the chain to the main event loop.  I suspect something
> must be blocking somewhere, though hard to say from the pseudo-code.
> Most likely a few judiciously placed logging statements would let you
> see where, or at least verify that you are not returning to the main
> event loop during the transfer.
>
> I will say that chunking up a large transfer through individual PB
> requests adds a bit of overhead for a large stream, and unless you
> implement some sort of windowing protocol, can hurt performance due to
> the latency needed to wait for the ACK from the server for each chunk.
>
> I had what appears to be a similar requirement in terms of
> transmitting a large file (A/V files to be published) as part of an
> overall PB session, and decided to separate it out to its own file
> upload server component coordinated through the PB session.
>
> http://twistedmatrix.com/pipermail/twisted-python/2007-July/015738.html
> has some further details on what I ended up doing.  Perhaps an approach
> along these lines would work for you as well.
>
> -- David
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100523/0b780667/attachment.htm 

From gabriele.lanaro at gmail.com  Sun May 23 08:08:54 2010
From: gabriele.lanaro at gmail.com (Gabriele Lanaro)
Date: Sun, 23 May 2010 14:08:54 +0200
Subject: [Twisted-Python] Sending large files over network with
	perspective broker
In-Reply-To: <AANLkTinGjNcQyorbzo1r7bObO7Gmu9VpqKsSh-trov1Q@mail.gmail.com>
References: <AANLkTil5QrvNyr2t20UbOVWqr2UkgcfOD9jGZtDikkDj@mail.gmail.com>
	<m2632fjr17.fsf@valheru.db3l.homeip.net>
	<AANLkTinGjNcQyorbzo1r7bObO7Gmu9VpqKsSh-trov1Q@mail.gmail.com>
Message-ID: <AANLkTimUckRnF7hvJT3z1k128oNcLxoyVeYMz56k6w71@mail.gmail.com>

After putting some strategical sleeps seems that the problem is that the
application is the server and the client at once, I think that this
generates a "loop" in the mainloop.

2010/5/23 Gabriele Lanaro <gabriele.lanaro at gmail.com>

> Thank you very much for your responses, the problem seems to appear when in
> my tests I send the file "to myself", when I send files over the network,
> the things goes well.  I suspect (it's just a suspect) that the code spawns
> too much deferreds too much fast, causing the loop not to complete (or
> something like that).
>
> Anyway I think I'll follow your suggestion and I'll end splitting up the
> upload service and the control/authorization one, since the code can grow up
> too complex and performance is a requirement.
>
> - Gabriele
>
> 2010/5/23 David Bolen <db3l.net at gmail.com>
>
> Gabriele Lanaro <gabriele.lanaro at gmail.com> writes:
>>
>> > The problem of this approach is that this blocks my GUI, I can't figure
>> out
>> > why because I'm just generating deffereds so it souldn't block.
>>
>> Just using deferreds won't help unless you still manage to return
>> control back up the chain to the main event loop.  I suspect something
>> must be blocking somewhere, though hard to say from the pseudo-code.
>> Most likely a few judiciously placed logging statements would let you
>> see where, or at least verify that you are not returning to the main
>> event loop during the transfer.
>>
>> I will say that chunking up a large transfer through individual PB
>> requests adds a bit of overhead for a large stream, and unless you
>> implement some sort of windowing protocol, can hurt performance due to
>> the latency needed to wait for the ACK from the server for each chunk.
>>
>> I had what appears to be a similar requirement in terms of
>> transmitting a large file (A/V files to be published) as part of an
>> overall PB session, and decided to separate it out to its own file
>> upload server component coordinated through the PB session.
>>
>> http://twistedmatrix.com/pipermail/twisted-python/2007-July/015738.html
>> has some further details on what I ended up doing.  Perhaps an approach
>> along these lines would work for you as well.
>>
>> -- David
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100523/116f3262/attachment.htm 

From gabriele.lanaro at gmail.com  Sun May 23 08:21:57 2010
From: gabriele.lanaro at gmail.com (Gabriele Lanaro)
Date: Sun, 23 May 2010 14:21:57 +0200
Subject: [Twisted-Python] Sending large files over network with
	perspective broker
In-Reply-To: <AANLkTimUckRnF7hvJT3z1k128oNcLxoyVeYMz56k6w71@mail.gmail.com>
References: <AANLkTil5QrvNyr2t20UbOVWqr2UkgcfOD9jGZtDikkDj@mail.gmail.com>
	<m2632fjr17.fsf@valheru.db3l.homeip.net>
	<AANLkTinGjNcQyorbzo1r7bObO7Gmu9VpqKsSh-trov1Q@mail.gmail.com>
	<AANLkTimUckRnF7hvJT3z1k128oNcLxoyVeYMz56k6w71@mail.gmail.com>
Message-ID: <AANLkTil_ie8STx5Itqq3dWNoCq4lHXnbwDyOLu1iBkft@mail.gmail.com>

Finally I managed to solve myself this obscure bug. I put the
reactor.iterate() call before spawning new callbacks, in this way I force
the mainloop to complete the cycle. The pseudocode would be modified in this
way:

Client()
    proceed_sending():

          chunk_tot = CHUNK_TOT
          chunk_no = 0

          def send(_)
                if chunk_no == CHUNK_TOT: return
                else:
                     ... read data...
                    reactor.iterate()
<---------------------------------------------------------- THIS LINE
                    d = filesender.callRemote("send_
chunk", secret, chunk_no, data)
                    d.addCallback(send)



2010/5/23 Gabriele Lanaro <gabriele.lanaro at gmail.com>

> After putting some strategical sleeps seems that the problem is that the
> application is the server and the client at once, I think that this
> generates a "loop" in the mainloop.
>
> 2010/5/23 Gabriele Lanaro <gabriele.lanaro at gmail.com>
>
> Thank you very much for your responses, the problem seems to appear when in
>> my tests I send the file "to myself", when I send files over the network,
>> the things goes well.  I suspect (it's just a suspect) that the code spawns
>> too much deferreds too much fast, causing the loop not to complete (or
>> something like that).
>>
>> Anyway I think I'll follow your suggestion and I'll end splitting up the
>> upload service and the control/authorization one, since the code can grow up
>> too complex and performance is a requirement.
>>
>> - Gabriele
>>
>> 2010/5/23 David Bolen <db3l.net at gmail.com>
>>
>> Gabriele Lanaro <gabriele.lanaro at gmail.com> writes:
>>>
>>> > The problem of this approach is that this blocks my GUI, I can't figure
>>> out
>>> > why because I'm just generating deffereds so it souldn't block.
>>>
>>> Just using deferreds won't help unless you still manage to return
>>> control back up the chain to the main event loop.  I suspect something
>>> must be blocking somewhere, though hard to say from the pseudo-code.
>>> Most likely a few judiciously placed logging statements would let you
>>> see where, or at least verify that you are not returning to the main
>>> event loop during the transfer.
>>>
>>> I will say that chunking up a large transfer through individual PB
>>> requests adds a bit of overhead for a large stream, and unless you
>>> implement some sort of windowing protocol, can hurt performance due to
>>> the latency needed to wait for the ACK from the server for each chunk.
>>>
>>> I had what appears to be a similar requirement in terms of
>>> transmitting a large file (A/V files to be published) as part of an
>>> overall PB session, and decided to separate it out to its own file
>>> upload server component coordinated through the PB session.
>>>
>>> http://twistedmatrix.com/pipermail/twisted-python/2007-July/015738.html
>>> has some further details on what I ended up doing.  Perhaps an approach
>>> along these lines would work for you as well.
>>>
>>> -- David
>>>
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100523/28d7220b/attachment.htm 

From moxie at thoughtcrime.org  Sun May 23 11:42:37 2010
From: moxie at thoughtcrime.org (Moxie Marlinspike)
Date: Sun, 23 May 2010 11:42:37 -0400
Subject: [Twisted-Python] Reactor Spinning?
In-Reply-To: <3973.63.107.91.99.1273078873.squirrel@webmail.zoteca.com>
References: <4BE025C2.5010205@thoughtcrime.org>	<20100504214240.1642.1501163969.divmod.xquotient.9@localhost.localdomain>	<4BE17F3E.1060800@thoughtcrime.org>
	<3973.63.107.91.99.1273078873.squirrel@webmail.zoteca.com>
Message-ID: <4BF94CED.6060406@thoughtcrime.org>


Hey everyone, I've still been trying to track down this spin bug.  What
I probably should have mentioned before is that these are SSL
connections.  Looking through the 10.0 release code, I found the
_sendCloseAlert method in tcp.py: http://pastebin.com/gZKxHtN5

I feel like this is almost certainly the culprit.  Most suspiciously,
there's an explicit empty write on pastebin-line 23:

os.write(self.socket.fileno(), '')

It looks to me like there's a code path where this write "succeeds," the
SSL socket reports that the connection is still not shut down, and then
the transport is resumed via startWriting and startReading.  I assume
that this then repeats for as long as that socket is up.
This directly corresponds with the system calls I'm seeing (poll, empty
write, poll, empty write...)

I still don't have an entirely comprehensive grasp of whats' going on
here, but while these efforts to "cleanly" shut down the SSL connection
by exchanging alerts are heroic, I feel like it's much more common (and
probably good enough) to just send an alert and immediately close the
underlying socket.

- moxie

-- 
http://www.thoughtcrime.org

On 05/05/2010 01:01 PM, Itamar Turner-Trauring wrote:
>>
>> I've confirmed that when spinning the FD corresponds with a client
>> connection.  What would you suggest logging that might provide some
>> insight?
> 
> What is the transport's writeSomeData() method doing? Is it actually
> trying to write an empty string? Transition from/to writeable state may
> also be interesting, along with logging size of transport's buffer (so
> logging in stopWriting/startWriting).
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 


From ploutosss at gmail.com  Sun May 23 11:54:52 2010
From: ploutosss at gmail.com (Viktor Klimov)
Date: Sun, 23 May 2010 19:54:52 +0400
Subject: [Twisted-Python] PB and unstable network
Message-ID: <AANLkTilMJwEDDbRzyeZdjIDZ6PGlj6x5FHq4c-QovDXY@mail.gmail.com>

I use PB in unstable network. The server remembers the last answer.
Client detection disconnected, connected again, makes entry into the
system and calls the function returns the last response
(get_last_response). The answer, it returns a deferred saved earlier.
If somewhere an error cycle repeats.

All of this works until the lost communication does not happen at a
time when Twisted sends data to a server. As the server in this
situation does not receive a first request, and when you call
get_last_response client receives the data that has already received.

How can I check if an error in the client arrived data to the server or not?


From exarkun at twistedmatrix.com  Sun May 23 12:30:44 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 23 May 2010 16:30:44 -0000
Subject: [Twisted-Python] Sending large files over network
	with	perspective broker
In-Reply-To: <AANLkTil_ie8STx5Itqq3dWNoCq4lHXnbwDyOLu1iBkft@mail.gmail.com>
References: <AANLkTil5QrvNyr2t20UbOVWqr2UkgcfOD9jGZtDikkDj@mail.gmail.com>
	<m2632fjr17.fsf@valheru.db3l.homeip.net>
	<AANLkTinGjNcQyorbzo1r7bObO7Gmu9VpqKsSh-trov1Q@mail.gmail.com>
	<AANLkTimUckRnF7hvJT3z1k128oNcLxoyVeYMz56k6w71@mail.gmail.com>
	<AANLkTil_ie8STx5Itqq3dWNoCq4lHXnbwDyOLu1iBkft@mail.gmail.com>
Message-ID: <20100523163044.1749.1340666766.divmod.xquotient.0@localhost.localdomain>

On 12:21 pm, gabriele.lanaro at gmail.com wrote:
>Finally I managed to solve myself this obscure bug. I put the
>reactor.iterate() call before spawning new callbacks, in this way I 
>force
>the mainloop to complete the cycle. The pseudocode would be modified in 
>this
>way:
>
>Client()
>    proceed_sending():
>
>          chunk_tot = CHUNK_TOT
>          chunk_no = 0
>
>          def send(_)
>                if chunk_no == CHUNK_TOT: return
>                else:
>                     ... read data...
>                    reactor.iterate()
><---------------------------------------------------------- THIS LINE
>                    d = filesender.callRemote("send_
>chunk", secret, chunk_no, data)
>                    d.addCallback(send)

Erm.  Sorry.  This isn't a solution to whatever problem you're having. 
It is entirely invalid to use reactor.iterate() in this way.

Jean-Paul


From gabriele.lanaro at gmail.com  Sun May 23 18:36:46 2010
From: gabriele.lanaro at gmail.com (Gabriele Lanaro)
Date: Mon, 24 May 2010 00:36:46 +0200
Subject: [Twisted-Python] Sending large files over network with
	perspective broker
In-Reply-To: <20100523163044.1749.1340666766.divmod.xquotient.0@localhost.localdomain>
References: <AANLkTil5QrvNyr2t20UbOVWqr2UkgcfOD9jGZtDikkDj@mail.gmail.com>
	<m2632fjr17.fsf@valheru.db3l.homeip.net>
	<AANLkTinGjNcQyorbzo1r7bObO7Gmu9VpqKsSh-trov1Q@mail.gmail.com>
	<AANLkTimUckRnF7hvJT3z1k128oNcLxoyVeYMz56k6w71@mail.gmail.com>
	<AANLkTil_ie8STx5Itqq3dWNoCq4lHXnbwDyOLu1iBkft@mail.gmail.com>
	<20100523163044.1749.1340666766.divmod.xquotient.0@localhost.localdomain>
Message-ID: <AANLkTikURkhafcdK0oKdsyeVoYn1lwp1u5MTAbwHFONi@mail.gmail.com>

In which sense it's invalid? I don't know how the gtk reactor works, I just
guessed that the event loop never reaches the gui events. My idea was to
force the processing of these events before spawning another deferred, it's
just a workaround, the real problem is  the fact that the server and the
client resides in  the same loop (for testing).

Which can be the reason of the mainloop "block"?

2010/5/23 <exarkun at twistedmatrix.com>

> On 12:21 pm, gabriele.lanaro at gmail.com wrote:
> >Finally I managed to solve myself this obscure bug. I put the
> >reactor.iterate() call before spawning new callbacks, in this way I
> >force
> >the mainloop to complete the cycle. The pseudocode would be modified in
> >this
> >way:
> >
> >Client()
> >    proceed_sending():
> >
> >          chunk_tot = CHUNK_TOT
> >          chunk_no = 0
> >
> >          def send(_)
> >                if chunk_no == CHUNK_TOT: return
> >                else:
> >                     ... read data...
> >                    reactor.iterate()
> ><---------------------------------------------------------- THIS LINE
> >                    d = filesender.callRemote("send_
> >chunk", secret, chunk_no, data)
> >                    d.addCallback(send)
>
> Erm.  Sorry.  This isn't a solution to whatever problem you're having.
> It is entirely invalid to use reactor.iterate() in this way.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100524/65d1bb03/attachment.htm 

From glyph at twistedmatrix.com  Sun May 23 21:16:34 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 23 May 2010 21:16:34 -0400
Subject: [Twisted-Python] Sending large files over network with
	perspective broker
In-Reply-To: <AANLkTikURkhafcdK0oKdsyeVoYn1lwp1u5MTAbwHFONi@mail.gmail.com>
References: <AANLkTil5QrvNyr2t20UbOVWqr2UkgcfOD9jGZtDikkDj@mail.gmail.com>
	<m2632fjr17.fsf@valheru.db3l.homeip.net>
	<AANLkTinGjNcQyorbzo1r7bObO7Gmu9VpqKsSh-trov1Q@mail.gmail.com>
	<AANLkTimUckRnF7hvJT3z1k128oNcLxoyVeYMz56k6w71@mail.gmail.com>
	<AANLkTil_ie8STx5Itqq3dWNoCq4lHXnbwDyOLu1iBkft@mail.gmail.com>
	<20100523163044.1749.1340666766.divmod.xquotient.0@localhost.localdomain>
	<AANLkTikURkhafcdK0oKdsyeVoYn1lwp1u5MTAbwHFONi@mail.gmail.com>
Message-ID: <788800C0-70A6-4866-A1A0-503250DD4F21@twistedmatrix.com>


On May 23, 2010, at 6:36 PM, Gabriele Lanaro wrote:

> In which sense it's invalid? I don't know how the gtk reactor works, I just guessed that the event loop never reaches the gui events. My idea was to force the processing of these events before spawning another deferred, it's just a workaround, the real problem is  the fact that the server and the client resides in  the same loop (for testing).

It's invalid to run reactor.iterate() inside the reactor mainloop.  You can't force event-processing order in Twisted; if you want an event to not get processed, you need to delay its event source from getting invoked (producer.pauseProducing(), transport.stopReading(), transport.stopWriting(), Deferred.pause() are all ways to do this).

It's invalid to use reactor.iterate() in this way because the reactor may invoke you reentrantly and there's no sane way to handle that.

For example, your code is running because select() said your file descriptor was ready for reading, which then invoked dataReceived, which then invoked your method with buffered data, which then called iterate(), which then called dataReceived, which then called your method with buffered data, which then called iterate(), which then ...
(and so on, forever, unless your application code conflicts with itself and running and starts blowing up and throwing incomprehensible tracebacks everywhere because of "impossible" recursion.

> Which can be the reason of the mainloop "block"?

Lots of reasons.  The example you gave wasn't syntactically valid Python, so it's hard to say.  Consider sending along an <http://sscce.org/> and maybe we can tell you more :).



From glyph at twistedmatrix.com  Sun May 23 21:19:32 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 23 May 2010 21:19:32 -0400
Subject: [Twisted-Python] PB and unstable network
In-Reply-To: <AANLkTilMJwEDDbRzyeZdjIDZ6PGlj6x5FHq4c-QovDXY@mail.gmail.com>
References: <AANLkTilMJwEDDbRzyeZdjIDZ6PGlj6x5FHq4c-QovDXY@mail.gmail.com>
Message-ID: <1D9536C6-75DE-4934-982B-3B0485D526F0@twistedmatrix.com>

On May 23, 2010, at 11:54 AM, Viktor Klimov wrote:

> I use PB in unstable network. The server remembers the last answer.
> Client detection disconnected, connected again, makes entry into the
> system and calls the function returns the last response
> (get_last_response). The answer, it returns a deferred saved earlier.
> If somewhere an error cycle repeats.
> 
> All of this works until the lost communication does not happen at a
> time when Twisted sends data to a server. As the server in this
> situation does not receive a first request, and when you call
> get_last_response client receives the data that has already received.
> 
> How can I check if an error in the client arrived data to the server or not?

Hi Viktor,

I try not to give people a hard time about bad English, but I am having a hard time reading your message.  There are a couple of different things I think you might mean and it would be confusing if I tried to explain them all.

Perhaps you could attach some Python code that explains exactly what you mean?



From exarkun at twistedmatrix.com  Sun May 23 22:35:32 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 24 May 2010 02:35:32 -0000
Subject: [Twisted-Python] major changes, release engineering,
	and learning cost
In-Reply-To: <FCCC3CD5-0A5D-48A0-B679-24D43968175F@twistedmatrix.com>
References: <FCCC3CD5-0A5D-48A0-B679-24D43968175F@twistedmatrix.com>
Message-ID: <20100524023532.1749.465645627.divmod.xquotient.37@localhost.localdomain>

On 23 May, 12:26 am, glyph at twistedmatrix.com wrote:
>The nice thing about Twisted's compatibility policy is that developers, 
>and even users, very rarely have problems when installing a new version 
>of Twisted.  While this is a nice benefit, the current strategy of 
>developing features in a compatible way does have a couple of costs, 
>and I'd like to see if we can address them without giving up the 
>benefit.  I have a suggestion for a process tweak which would hopefully 
>mitigate some of the difficulties which arise due to the compatibility 
>policy.
>
>When we add a new feature that supersedes an older one, or fix a bug in 
>Twisted that involves changing behavior, the developer fixing it has to 
>come up with a new name.  If we have several behavior-changing bugfixes 
>in the same subsystem, that means that developers using Twisted may 
>have to learn about 3 different symbol names.  Since we tend to avoid 
>just suffixing names with numbers (for good reason, I think), they 
>won't have to learn Bicycle, Bicycle2, Bicycle3, they'll have to learn 
>Bicycle, then Footcycle, and finally Velocipede, and somehow infer that 
>Velocipede is the newest/best name that they should be using, by 
>reading the (hopefully clear, concise) warnings that come out of their 
>unit tests.
>
>This came up again recently on a ticket about URLPath, 
><http://twistedmatrix.com/trac/ticket/2625#comment:16>, where a 
>contributor suggested that it would be better to make a whole new 
>module because it's easier for external developers to learn about that 
>then learn about an individual method change.  This of course raises 
>the question: if we're going to have a whole new URL class, shouldn't 
>it fix the (numerous) *other* bugs that we know about in URLPath?
>
>Up until now the objection to doing things this way is that it results 
>in gigantic branches which are intractable to review.  That's a good 
>objection, but it leaves us with a false dichotomy; reliable software 
>and painless upgrades with a random scattershot of new features that 
>are hard to understand, or coherent iterations of technology which 
>can't be effectively reviewed, and therefore can't be effectively 
>quality controlled.
>
>I propose that we get the best of both worlds by changing the way we do 
>reviews slightly.  Right now every code review needs to be done on an 
>entire feature going to trunk, and _all_ of the code going to trunk 
>needs to be reviewed at once.  I suggest that instead, we create 
>"integration branches" for sensible constellations of features, and 
>have a two-stage review process.
>
>For example, let's say I want to work on making URLPath good.  There 
>are several tickets addressing it:
>
><http://twistedmatrix.com/trac/ticket/2093>
><http://twistedmatrix.com/trac/ticket/2094>
><http://twistedmatrix.com/trac/ticket/2625>
>
>For the sake of argument, let's all pretend these are all deeply 
>interrelated and involve changes to behavior of existing methods.  I 
>think that is sort of true of most of these, but it would be far too 
>verbose to talk about *how*, and get bogged down in that discussion.
>
>First, I'd make an integration ticket, let's call it #ABCD, describing 
>how these features are related and a brief outline of the new API I 
>propose which resolves them.
>
>Then I'd create an integration branch from trunk, for that ticket. 
> From the #ABCD branch, I'd create a branch for #2093, and put it up for 
>review.  The reviewer would review #2093 as usual, citing any test 
>coverage issues, documentation issues, etc.  After the usual review 
>process, when I get an "OK to merge", I would merge #2093 *to the #ABCD 
>branch*, not trunk.
>
>I would repeat this process for #2094 and #2625, merging each to the 
>#ABCD branch as they passed review.
>
>Finally, I'd put #ABCD itself up for review.  At this point the process 
>would differ a bit.  Reviewers would be able to assume, at this point, 
>that the potentially large body of code in #ABCD had already been 
>reviewed, that the test cases were good, the documentation was 
>reasonably clear, and the logic made sense.  This final review would be 
>a quick sanity check, to make sure the tests still pass and that there 
>are no conflicts.
>
>I would like to strongly emphasize that this point in the process would 
>be an inappropriate time for reviewers to start arguing with each other 
>over what is required for the branch to land, disputing the original 
>specification, etc; this is just an opportunity to spot potential 
>regressions before it lands.  Each ticket review for a component of the 
>larger feature should be an opportunity to draw attention to the 
>direction of the larger feature development and prompt discussion. 
>This *might* be an appropriate point to note that some other behavior- 
>changing feature had been left out, though.
>
>In the case that there *were* conflicts, this would be an opportunity 
>to review the conflict resolution itself.
>
>(We saw a nascent version of this approach on some stuff related to 
><http://twistedmatrix.com/trac/ticket/886> and it was hugely painful 
>because nobody was really sure what the process was supposed to be.  So 
>let's not do it like that again.)
>
>So: thoughts?  Does this make sense as a policy change for facilitating 
>the development of major new features or consolidating behavior- 
>changing fixes into easier-to-understand units?

So, to summarize, we could stage our code using more than just two 
branches (trunk + feature branch) in order to make larger changes easier 
to understand for reviewers while still making each change to trunk a 
coherent unit.

This sounds fine to me.  We need to work out some details (like, for 
example, I'm not sure trying to do this using subversion is such a good 
idea, and we want the process to be documented somewhere so we don't 
have a repeat of #886), but I think we should try it and see what 
happens.

Of course, someone needs to work on something big before we'll have a 
chance to try it.  I'm not yet convinced that `URLPath` is a good case 
for this, though.  It's very little code, and a complete 
reimplementation (if even such a thing is needed) will likewise be very 
little code.  Also, I don't think a complete reimplementation is needed 
here.

Going back to the proposed workflow change, we should also be sure 
there's a clear condition under which the integration branch should be 
merged to trunk.  And ideally we should still try to keep the lifespan 
of these things as short as possible.

Jean-Paul


From gabriele.lanaro at gmail.com  Mon May 24 04:39:39 2010
From: gabriele.lanaro at gmail.com (Gabriele Lanaro)
Date: Mon, 24 May 2010 10:39:39 +0200
Subject: [Twisted-Python] Sending large files over network with
	perspective broker
In-Reply-To: <788800C0-70A6-4866-A1A0-503250DD4F21@twistedmatrix.com>
References: <AANLkTil5QrvNyr2t20UbOVWqr2UkgcfOD9jGZtDikkDj@mail.gmail.com>
	<m2632fjr17.fsf@valheru.db3l.homeip.net>
	<AANLkTinGjNcQyorbzo1r7bObO7Gmu9VpqKsSh-trov1Q@mail.gmail.com>
	<AANLkTimUckRnF7hvJT3z1k128oNcLxoyVeYMz56k6w71@mail.gmail.com>
	<AANLkTil_ie8STx5Itqq3dWNoCq4lHXnbwDyOLu1iBkft@mail.gmail.com>
	<20100523163044.1749.1340666766.divmod.xquotient.0@localhost.localdomain>
	<AANLkTikURkhafcdK0oKdsyeVoYn1lwp1u5MTAbwHFONi@mail.gmail.com>
	<788800C0-70A6-4866-A1A0-503250DD4F21@twistedmatrix.com>
Message-ID: <AANLkTinQVra0QFlyIX1Gz7oMYJxTCBkOcnBECqzqy81H@mail.gmail.com>

Thank you very much for your explanation! Now I've understood what's the
problem in iterate().

On these lines I've prepared a this little test case (in attach):

Test 1

$ python runner.py
click on the button
minimize/unminimize window to force a widget redraw, the window should be
blank.
you can click another time on the button, the event is catched but no
"button animation" is performed

Test2

$ python runner.py
open another console
$ python runner_other_process.py
click on the button of runner_other_process, this connects itself to the
server in the first process
each window should redraw correctly

2010/5/24 Glyph Lefkowitz <glyph at twistedmatrix.com>

>
> On May 23, 2010, at 6:36 PM, Gabriele Lanaro wrote:
>
> > In which sense it's invalid? I don't know how the gtk reactor works, I
> just guessed that the event loop never reaches the gui events. My idea was
> to force the processing of these events before spawning another deferred,
> it's just a workaround, the real problem is  the fact that the server and
> the client resides in  the same loop (for testing).
>
> It's invalid to run reactor.iterate() inside the reactor mainloop.  You
> can't force event-processing order in Twisted; if you want an event to not
> get processed, you need to delay its event source from getting invoked
> (producer.pauseProducing(), transport.stopReading(),
> transport.stopWriting(), Deferred.pause() are all ways to do this).
>
> It's invalid to use reactor.iterate() in this way because the reactor may
> invoke you reentrantly and there's no sane way to handle that.
>
> For example, your code is running because select() said your file
> descriptor was ready for reading, which then invoked dataReceived, which
> then invoked your method with buffered data, which then called iterate(),
> which then called dataReceived, which then called your method with buffered
> data, which then called iterate(), which then ...
> (and so on, forever, unless your application code conflicts with itself and
> running and starts blowing up and throwing incomprehensible tracebacks
> everywhere because of "impossible" recursion.
>
> > Which can be the reason of the mainloop "block"?
>
> Lots of reasons.  The example you gave wasn't syntactically valid Python,
> so it's hard to say.  Consider sending along an <http://sscce.org/> and
> maybe we can tell you more :).
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100524/3566b1ac/attachment-0001.htm 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: twistsample.tar.gz
Type: application/x-gzip
Size: 942 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20100524/3566b1ac/attachment-0001.bin 

From jml at mumak.net  Mon May 24 07:42:46 2010
From: jml at mumak.net (Jonathan Lange)
Date: Mon, 24 May 2010 12:42:46 +0100
Subject: [Twisted-Python] major changes, release engineering,
	and learning 	cost
In-Reply-To: <20100524023532.1749.465645627.divmod.xquotient.37@localhost.localdomain>
References: <FCCC3CD5-0A5D-48A0-B679-24D43968175F@twistedmatrix.com>
	<20100524023532.1749.465645627.divmod.xquotient.37@localhost.localdomain>
Message-ID: <AANLkTikZfKK_InzB3TTbXZnTZhvsa0CGnzgMa6-Q3R2z@mail.gmail.com>

On Mon, May 24, 2010 at 3:35 AM,  <exarkun at twistedmatrix.com> wrote:
...
>>So: thoughts? ?Does this make sense as a policy change for facilitating
>>the development of major new features or consolidating behavior-
>>changing fixes into easier-to-understand units?
>
> So, to summarize, we could stage our code using more than just two
> branches (trunk + feature branch) in order to make larger changes easier
> to understand for reviewers while still making each change to trunk a
> coherent unit.
>

FWIW, we've been doing this on Launchpad for some years and it works out well.

As a rule, we don't have the final "sanity check" review, since we
have robot minions that check for conflicts and that the tests pass.

> This sounds fine to me. ?We need to work out some details (like, for
> example, I'm not sure trying to do this using subversion is such a good
> idea, and we want the process to be documented somewhere so we don't
> have a repeat of #886), but I think we should try it and see what
> happens.
>

Using a DVCS would make it much easier. For example, Bazaar has
plugins like loom and pipeline that are designed to manage a stack of
changes.

Also, +1 on the documentation.

jml


From exarkun at twistedmatrix.com  Mon May 24 15:53:32 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 24 May 2010 19:53:32 -0000
Subject: [Twisted-Python] Reactor Spinning?
In-Reply-To: <4BF94CED.6060406@thoughtcrime.org>
References: <4BE025C2.5010205@thoughtcrime.org>
	<20100504214240.1642.1501163969.divmod.xquotient.9@localhost.localdomain>
	<4BE17F3E.1060800@thoughtcrime.org>
	<3973.63.107.91.99.1273078873.squirrel@webmail.zoteca.com>
	<4BF94CED.6060406@thoughtcrime.org>
Message-ID: <20100524195332.1902.1609577663.divmod.xquotient.4@localhost.localdomain>

On 23 May, 03:42 pm, moxie at thoughtcrime.org wrote:
>
>Hey everyone, I've still been trying to track down this spin bug.  What
>I probably should have mentioned before is that these are SSL
>connections.  Looking through the 10.0 release code, I found the
>_sendCloseAlert method in tcp.py: http://pastebin.com/gZKxHtN5
>
>I feel like this is almost certainly the culprit.  Most suspiciously,
>there's an explicit empty write on pastebin-line 23:
>
>os.write(self.socket.fileno(), '')
>
>It looks to me like there's a code path where this write "succeeds," 
>the
>SSL socket reports that the connection is still not shut down, and then
>the transport is resumed via startWriting and startReading.  I assume
>that this then repeats for as long as that socket is up.
>This directly corresponds with the system calls I'm seeing (poll, empty
>write, poll, empty write...)
>
>I still don't have an entirely comprehensive grasp of whats' going on
>here, but while these efforts to "cleanly" shut down the SSL connection
>by exchanging alerts are heroic, I feel like it's much more common (and
>probably good enough) to just send an alert and immediately close the
>underlying socket.

It'd be great if you could attach a minimal example which demonstrates 
this behavior to a ticket in the issue tracker (threads on the mailing 
list usually lead to ignored issues).

It's probably also worth reporting your version of OpenSSL and 
pyOpenSSL, since that might be related.  I've not seen this kind of 
behavior before, which may just mean I'm running an older version of 
OpenSSL than you.

Jean-Paul


From exarkun at twistedmatrix.com  Mon May 24 16:06:59 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 24 May 2010 20:06:59 -0000
Subject: [Twisted-Python] Sending large files over network
	with	perspective broker
In-Reply-To: <AANLkTinQVra0QFlyIX1Gz7oMYJxTCBkOcnBECqzqy81H@mail.gmail.com>
References: <AANLkTil5QrvNyr2t20UbOVWqr2UkgcfOD9jGZtDikkDj@mail.gmail.com>
	<m2632fjr17.fsf@valheru.db3l.homeip.net>
	<AANLkTinGjNcQyorbzo1r7bObO7Gmu9VpqKsSh-trov1Q@mail.gmail.com>
	<AANLkTimUckRnF7hvJT3z1k128oNcLxoyVeYMz56k6w71@mail.gmail.com>
	<AANLkTil_ie8STx5Itqq3dWNoCq4lHXnbwDyOLu1iBkft@mail.gmail.com>
	<20100523163044.1749.1340666766.divmod.xquotient.0@localhost.localdomain>
	<AANLkTikURkhafcdK0oKdsyeVoYn1lwp1u5MTAbwHFONi@mail.gmail.com>
	<788800C0-70A6-4866-A1A0-503250DD4F21@twistedmatrix.com>
	<AANLkTinQVra0QFlyIX1Gz7oMYJxTCBkOcnBECqzqy81H@mail.gmail.com>
Message-ID: <20100524200659.1902.414257654.divmod.xquotient.8@localhost.localdomain>

On 08:39 am, gabriele.lanaro at gmail.com wrote:
>Thank you very much for your explanation! Now I've understood what's 
>the
>problem in iterate().
>
>On these lines I've prepared a this little test case (in attach):
>
>Test 1
>
>$ python runner.py
>click on the button
>minimize/unminimize window to force a widget redraw, the window should 
>be
>blank.
>you can click another time on the button, the event is catched but no
>"button animation" is performed
>
>Test2
>
>$ python runner.py
>open another console
>$ python runner_other_process.py
>click on the button of runner_other_process, this connects itself to 
>the
>server in the first process
>each window should redraw correctly

This may demonstrate a bug in gtk2reactor.  It seems to be servicing 
network events to the exclusion of GUI events, which it isn't supposed 
to do.

I don't see any obvious reason for this.  Unfortunately glib2 (or 
pygtk2, perhaps) is ultimately in charge of the ordering/priority of 
these event handlers.  gtk2reactor is just a thin layer on top of the 
glib2-supplied I/O notification APIs.  But perhaps there's a way we 
could be invoking these APIs differently so that the GUI gets more of a 
chance to run.

Jean-Paul


From msoulier at digitaltorque.ca  Mon May 24 22:07:32 2010
From: msoulier at digitaltorque.ca (Michael P. Soulier)
Date: Mon, 24 May 2010 22:07:32 -0400
Subject: [Twisted-Python] turning off chunked transfer-encoding
Message-ID: <20100525020710.GA11803@digitaltorque.ca>

Hi,

I noticed that when using twisted.internet.http and returning a Content-type
of application/json, the server responds with chunked transfer encoding. 

I'm debugging a client problem and I'd like to turn chunked transfer encoding
off. Is this possible?

Thanks,
Mike
-- 
Michael P. Soulier <msoulier at digitaltorque.ca>
"Any intelligent fool can make things bigger and more complex... It takes a
touch of genius - and a lot of courage to move in the opposite direction."
--Albert Einstein
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 197 bytes
Desc: Digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20100524/9b303ac9/attachment.pgp 

From itamar at itamarst.org  Mon May 24 22:29:31 2010
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Tue, 25 May 2010 02:29:31 +0000
Subject: [Twisted-Python] turning off chunked transfer-encoding
In-Reply-To: <20100525020710.GA11803@digitaltorque.ca>
References: <20100525020710.GA11803@digitaltorque.ca>
Message-ID: <1274754571.31649.874.camel@pintsize>

On Mon, 2010-05-24 at 22:07 -0400, Michael P. Soulier wrote:
> Hi,
> 
> I noticed that when using twisted.internet.http and returning a Content-type
> of application/json, the server responds with chunked transfer encoding. 

Chunked encoding has nothing to do with the content type. It is used if
you do not set a content-length header.

So, figure out your response's length (in bytes), and set the
content-length header to that.



From ploutosss at gmail.com  Tue May 25 04:34:34 2010
From: ploutosss at gmail.com (Viktor Klimov)
Date: Tue, 25 May 2010 12:34:34 +0400
Subject: [Twisted-Python] PB and unstable network
In-Reply-To: <1D9536C6-75DE-4934-982B-3B0485D526F0@twistedmatrix.com>
References: <AANLkTilMJwEDDbRzyeZdjIDZ6PGlj6x5FHq4c-QovDXY@mail.gmail.com>
	<1D9536C6-75DE-4934-982B-3B0485D526F0@twistedmatrix.com>
Message-ID: <AANLkTikkt_ZBrYcXuU5nlH5WsP_CN-yZz9zFh4YYCOUX@mail.gmail.com>

Hi Glyph, sorry for my english.

My server.py save last answer(see User.perspectiveMessageReceived).

Client when an error occurs(in callRemote) schedule reconnect. After
reconnect client call remote method which return last answer.

It works if disconnect happened when server send data to
client(_server->client_). (try set MyServer.crash_server_to_client to
True)

But it doesn't work if disconnect happened when client send data to
server(_client->server_). Becouse server after reconnect send previous
data. It can fix if client be known when error occurs(server->client
or client->server). (see comment in Client.net_error).

PS for emulate error client->server set Client.crash_client_to_server
to True, don't forget set MyServer.crash_server_to_client to False)

On Mon, May 24, 2010 at 5:19 AM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
> On May 23, 2010, at 11:54 AM, Viktor Klimov wrote:
>
>> I use PB in unstable network. The server remembers the last answer.
>> Client detection disconnected, connected again, makes entry into the
>> system and calls the function returns the last response
>> (get_last_response). The answer, it returns a deferred saved earlier.
>> If somewhere an error cycle repeats.
>>
>> All of this works until the lost communication does not happen at a
>> time when Twisted sends data to a server. As the server in this
>> situation does not receive a first request, and when you call
>> get_last_response client receives the data that has already received.
>>
>> How can I check if an error in the client arrived data to the server or not?
>
> Hi Viktor,
>
> I try not to give people a hard time about bad English, but I am having a hard time reading your message. ?There are a couple of different things I think you might mean and it would be confusing if I tried to explain them all.
>
> Perhaps you could attach some Python code that explains exactly what you mean?
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: server.py
Type: application/octet-stream
Size: 1730 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20100525/78c1116e/attachment.obj 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: client.py
Type: application/octet-stream
Size: 3494 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20100525/78c1116e/attachment-0001.obj 

From msoulier at digitaltorque.ca  Tue May 25 07:08:12 2010
From: msoulier at digitaltorque.ca (Michael P. Soulier)
Date: Tue, 25 May 2010 07:08:12 -0400
Subject: [Twisted-Python] turning off chunked transfer-encoding
In-Reply-To: <1274754571.31649.874.camel@pintsize>
References: <20100525020710.GA11803@digitaltorque.ca>
	<1274754571.31649.874.camel@pintsize>
Message-ID: <20100525110810.GC22739@anton.digitaltorque.ca>

On 25/05/10 Itamar Turner-Trauring said:

> Chunked encoding has nothing to do with the content type. It is used if
> you do not set a content-length header.
> 
> So, figure out your response's length (in bytes), and set the
> content-length header to that.

I'll try that, thanks.

Mike
-- 
Michael P. Soulier <msoulier at digitaltorque.ca>
"Any intelligent fool can make things bigger and more complex... It takes a
touch of genius - and a lot of courage to move in the opposite direction."
--Albert Einstein
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 190 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20100525/10a1fb0f/attachment.pgp 

From jaroslaw.fedewicz at gmail.com  Tue May 25 10:41:13 2010
From: jaroslaw.fedewicz at gmail.com (Yaroslav Fedevych)
Date: Tue, 25 May 2010 17:41:13 +0300
Subject: [Twisted-Python] PB and unstable network
In-Reply-To: <AANLkTikkt_ZBrYcXuU5nlH5WsP_CN-yZz9zFh4YYCOUX@mail.gmail.com>
References: <AANLkTilMJwEDDbRzyeZdjIDZ6PGlj6x5FHq4c-QovDXY@mail.gmail.com>
	<1D9536C6-75DE-4934-982B-3B0485D526F0@twistedmatrix.com>
	<AANLkTikkt_ZBrYcXuU5nlH5WsP_CN-yZz9zFh4YYCOUX@mail.gmail.com>
Message-ID: <AANLkTim4Qngekk1D1WTNTi_XLVQPCb6CCs8WIf6BTzdO@mail.gmail.com>

In your case, I would suggest that the server sends some sort of ACK
after it has received the payload from client, and the client must
send the same kind of ACK in response. Only after that would the
server consider operation complete, otherwise it would either inform
the client that the previous operation was interrupted midway, or
discard the incomplete message completely, thus forcing client to
re-send it.

Sounds complicated, but I think that's the only reliable way to make
sure things don't get duplicated on either server or client.

On Tue, May 25, 2010 at 11:34 AM, Viktor Klimov <ploutosss at gmail.com> wrote:
> Hi Glyph, sorry for my english.
>
> My server.py save last answer(see User.perspectiveMessageReceived).
>
> Client when an error occurs(in callRemote) schedule reconnect. After
> reconnect client call remote method which return last answer.
>
> It works if disconnect happened when server send data to
> client(_server->client_). (try set MyServer.crash_server_to_client to
> True)
>
> But it doesn't work if disconnect happened when client send data to
> server(_client->server_). Becouse server after reconnect send previous
> data. It can fix if client be known when error occurs(server->client
> or client->server). (see comment in Client.net_error).
>
> PS for emulate error client->server set Client.crash_client_to_server
> to True, don't forget set MyServer.crash_server_to_client to False)
>
> On Mon, May 24, 2010 at 5:19 AM, Glyph Lefkowitz
> <glyph at twistedmatrix.com> wrote:
>> On May 23, 2010, at 11:54 AM, Viktor Klimov wrote:
>>
>>> I use PB in unstable network. The server remembers the last answer.
>>> Client detection disconnected, connected again, makes entry into the
>>> system and calls the function returns the last response
>>> (get_last_response). The answer, it returns a deferred saved earlier.
>>> If somewhere an error cycle repeats.
>>>
>>> All of this works until the lost communication does not happen at a
>>> time when Twisted sends data to a server. As the server in this
>>> situation does not receive a first request, and when you call
>>> get_last_response client receives the data that has already received.
>>>
>>> How can I check if an error in the client arrived data to the server or not?
>>
>> Hi Viktor,
>>
>> I try not to give people a hard time about bad English, but I am having a hard time reading your message. ?There are a couple of different things I think you might mean and it would be confusing if I tried to explain them all.
>>
>> Perhaps you could attach some Python code that explains exactly what you mean?
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


From jml at mumak.net  Wed May 26 04:19:20 2010
From: jml at mumak.net (Jonathan Lange)
Date: Wed, 26 May 2010 09:19:20 +0100
Subject: [Twisted-Python] Reminder: Twisted 10.1 scheduled for early June
Message-ID: <AANLkTikg-mJ7p865ALUL_-cTvEC8Spe57N5p7agczzcq@mail.gmail.com>

Hello all,

I and my lovely assistant Glyph intend to cut a release of Twisted
10.1 on the 5th and 6th of June. That's in eleven days.

If you would like to help us do that, please fix one of:
  http://twistedmatrix.com/trac/ticket/3998
  http://twistedmatrix.com/trac/ticket/4345
  http://twistedmatrix.com/trac/ticket/4320

Or review tickets: http://twistedmatrix.com/trac/report/15

Thanks,
jml


From glyph at twistedmatrix.com  Wed May 26 04:39:00 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 26 May 2010 04:39:00 -0400
Subject: [Twisted-Python] major changes, release engineering,
	and learning cost
In-Reply-To: <20100524023532.1749.465645627.divmod.xquotient.37@localhost.localdomain>
References: <FCCC3CD5-0A5D-48A0-B679-24D43968175F@twistedmatrix.com>
	<20100524023532.1749.465645627.divmod.xquotient.37@localhost.localdomain>
Message-ID: <B1DF3CDE-F46D-4A81-83A1-D6AA6378A9EF@twistedmatrix.com>


On May 23, 2010, at 10:35 PM, exarkun at twistedmatrix.com wrote:

> On 23 May, 12:26 am, glyph at twistedmatrix.com wrote:
>> So: thoughts?  Does this make sense as a policy change for facilitating 
>> the development of major new features or consolidating behavior- 
>> changing fixes into easier-to-understand units?
> 
> So, to summarize, we could stage our code using more than just two 
> branches (trunk + feature branch) in order to make larger changes easier 
> to understand for reviewers while still making each change to trunk a 
> coherent unit.

That's about the size of it.

> This sounds fine to me.  We need to work out some details (like, for 
> example, I'm not sure trying to do this using subversion is such a good 
> idea, and we want the process to be documented somewhere so we don't 
> have a repeat of #886), but I think we should try it and see what 
> happens.

Great.  I propose some core committers try it out however makes sense to them, on whatever the next obvious thing to try it on is.  Rather than try to document the whole process up front, please just spell out what you expect the reviewer to do on each ticket placed into review this way, and we'll document the process after we've nailed down something that works.

> Of course, someone needs to work on something big before we'll have a 
> chance to try it.  I'm not yet convinced that `URLPath` is a good case 
> for this, though.  It's very little code, and a complete 
> reimplementation (if even such a thing is needed) will likewise be very 
> little code.  Also, I don't think a complete reimplementation is needed 
> here.

Yeah, like I said: I just grabbed that example because it was handy, not because I thought it was particularly appropriate.  I don't even have anything in particular in mind.  I actually wanted to bring this up while we were *between* major things, so that we could avoid discussions of specific problems with a current branch or feature (once something's in the middle of being implemented it develops a life of its own, and this is often an emotional context in which to talk about process changes).

> Going back to the proposed workflow change, we should also be sure 
> there's a clear condition under which the integration branch should be 
> merged to trunk.  And ideally we should still try to keep the lifespan 
> of these things as short as possible.

My proposed criterion would be that the integration branch has an associated ticket, with links to a list of all other tickets expected to be a part of it.  When all tickets on that list are closed, it can be merged at any time.  This would, however, leave the door open for a reviewer to say "#XXXX is okay to merge, but based on my review really need to consider #YYYY before it can be merged to trunk, so please add that to the integration branch list".  Of course, in the interest of keeping these lifespans short, this suggestion should be used sparingly.  But it would be good for things like "update the documentation and examples" or "I noticed that the old system had feature X, we really need to keep parity with that before we deprecate it".

I still like the idea of a final sanity check, but based on jml's feedback about Launchpad perhaps it would be best if we kept that step optional.  Especially since I can't think of a clear set of guidelines for reviewers at that stage.  (I mean, they *should* check for all the same stuff one normally checks for; coverage, documentation, etc, but they *shouldn't* block the merge from going to trunk while they re-audit every changed line of code, as that defeats the purpose of having incremental reviews in the first place.)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100526/484d7da0/attachment.htm 

From glyph at twistedmatrix.com  Wed May 26 04:44:36 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 26 May 2010 04:44:36 -0400
Subject: [Twisted-Python] major changes, release engineering,
	and learning cost
In-Reply-To: <AANLkTikZfKK_InzB3TTbXZnTZhvsa0CGnzgMa6-Q3R2z@mail.gmail.com>
References: <FCCC3CD5-0A5D-48A0-B679-24D43968175F@twistedmatrix.com>
	<20100524023532.1749.465645627.divmod.xquotient.37@localhost.localdomain>
	<AANLkTikZfKK_InzB3TTbXZnTZhvsa0CGnzgMa6-Q3R2z@mail.gmail.com>
Message-ID: <8A688AD5-DF07-45CD-ABF6-49057C268800@twistedmatrix.com>


On May 24, 2010, at 7:42 AM, Jonathan Lange wrote:

> FWIW, we've been doing this on Launchpad for some years and it works out well.

Good to know.

> As a rule, we don't have the final "sanity check" review, since we
> have robot minions that check for conflicts and that the tests pass.

This is useful information.  Our buildbot isn't *quite* PQM, but then... there's a strong case to be made that Jean-Paul is himself a robot.

> Using a DVCS would make it much easier. For example, Bazaar has
> plugins like loom and pipeline that are designed to manage a stack of
> changes.

Looms still scare me a bit, but my intent was definitely that a DVCS (and yes, most likely specifically bzr) would be involved.  If you have any particular insight as to how one might go about doing that, it would be helpful.

For practical purposes, until the bzr-ness of the buildbots is more exposed, I was thinking that developers could work in bzr but push changes into svn branches for testing.  Does that sound workable?

> Also, +1 on the documentation.

I think we should continue this discussion after somebody has done at least one branch like this.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100526/659d0d73/attachment.htm 

From lvh at laurensvh.be  Wed May 26 05:41:17 2010
From: lvh at laurensvh.be (Laurens Van Houtven)
Date: Wed, 26 May 2010 11:41:17 +0200
Subject: [Twisted-Python] major changes, release engineering,
	and learning 	cost
In-Reply-To: <8A688AD5-DF07-45CD-ABF6-49057C268800@twistedmatrix.com>
References: <FCCC3CD5-0A5D-48A0-B679-24D43968175F@twistedmatrix.com>
	<20100524023532.1749.465645627.divmod.xquotient.37@localhost.localdomain>
	<AANLkTikZfKK_InzB3TTbXZnTZhvsa0CGnzgMa6-Q3R2z@mail.gmail.com>
	<8A688AD5-DF07-45CD-ABF6-49057C268800@twistedmatrix.com>
Message-ID: <AANLkTimlY2Gsvpsy13_zQUdMJcNDqdtEoDH4L9LzkX8v@mail.gmail.com>

I've said something in #twisted but I hadn't read this reply yet, so for
sake of saving this for posterity, I agree with jml here. I think we're
mostly being bitten because of a lack of software tools, in the form of svn
and trac. Disclaimer: I really dislike svn since I never figured out how
Combinator works. I really dislike trac.

So, for the rest of this e-mail, let's pretend we're implementing a big new
feature since that's the thing I tried to do to some extent.

Major stuff could be a blueprint on Launchpad. Blueprints match a branch for
the "big feature". So, we have the Twisted blueprint
quantum-transmogrification and a branch
lp:~lvh/twisted/quantum-transmogrification.


From konrads at smelkovs.com  Wed May 26 06:20:26 2010
From: konrads at smelkovs.com (Konrads Smelkovs)
Date: Wed, 26 May 2010 13:20:26 +0300
Subject: [Twisted-Python] major changes, release engineering,
	and learning 	cost
In-Reply-To: <FCCC3CD5-0A5D-48A0-B679-24D43968175F@twistedmatrix.com>
References: <FCCC3CD5-0A5D-48A0-B679-24D43968175F@twistedmatrix.com>
Message-ID: <AANLkTikDFPoQdxPRUI5drFlZF-TINicv5LqrLIxtnML4@mail.gmail.com>

It would already be a big step forward if the naming convention could
be addressed. Unfortunately the web vs. web2 thing really puts code
archeologists in a confusion if the incremental numbered module policy
is applied, because it appears that web2 > web but it is actually not.
code archeology could be less of an issue if some of the following
would be found good:
1) for existing developers, release notes would keep them up to date.
Also, perhaps a migration guide on how to move from old to new would
ensure people are using latest and greatest.
2) write a module guide for new developers, saying don't use X because
it is old. Use Y
3) once new module is there, raise decpreciation for old module. As
the old could be still valid, make a warning suppression mechanism.



2010/5/23, Glyph Lefkowitz <glyph at twistedmatrix.com>:
> The nice thing about Twisted's compatibility policy is that developers, and
> even users, very rarely have problems when installing a new version of
> Twisted.  While this is a nice benefit, the current strategy of developing
> features in a compatible way does have a couple of costs, and I'd like to
> see if we can address them without giving up the benefit.  I have a
> suggestion for a process tweak which would hopefully mitigate some of the
> difficulties which arise due to the compatibility policy.
>
> When we add a new feature that supersedes an older one, or fix a bug in
> Twisted that involves changing behavior, the developer fixing it has to come
> up with a new name.  If we have several behavior-changing bugfixes in the
> same subsystem, that means that developers using Twisted may have to learn
> about 3 different symbol names.  Since we tend to avoid just suffixing names
> with numbers (for good reason, I think), they won't have to learn Bicycle,
> Bicycle2, Bicycle3, they'll have to learn Bicycle, then Footcycle, and
> finally Velocipede, and somehow infer that Velocipede is the newest/best
> name that they should be using, by reading the (hopefully clear, concise)
> warnings that come out of their unit tests.
>
> This came up again recently on a ticket about URLPath,
> <http://twistedmatrix.com/trac/ticket/2625#comment:16>, where a contributor
> suggested that it would be better to make a whole new module because it's
> easier for external developers to learn about that then learn about an
> individual method change.  This of course raises the question: if we're
> going to have a whole new URL class, shouldn't it fix the (numerous) *other*
> bugs that we know about in URLPath?
>
> Up until now the objection to doing things this way is that it results in
> gigantic branches which are intractable to review.  That's a good objection,
> but it leaves us with a false dichotomy; reliable software and painless
> upgrades with a random scattershot of new features that are hard to
> understand, or coherent iterations of technology which can't be effectively
> reviewed, and therefore can't be effectively quality controlled.
>
> I propose that we get the best of both worlds by changing the way we do
> reviews slightly.  Right now every code review needs to be done on an entire
> feature going to trunk, and _all_ of the code going to trunk needs to be
> reviewed at once.  I suggest that instead, we create "integration branches"
> for sensible constellations of features, and have a two-stage review
> process.
>
> For example, let's say I want to work on making URLPath good.  There are
> several tickets addressing it:
>
> <http://twistedmatrix.com/trac/ticket/2093>
> <http://twistedmatrix.com/trac/ticket/2094>
> <http://twistedmatrix.com/trac/ticket/2625>
>
> For the sake of argument, let's all pretend these are all deeply
> interrelated and involve changes to behavior of existing methods.  I think
> that is sort of true of most of these, but it would be far too verbose to
> talk about *how*, and get bogged down in that discussion.
>
> First, I'd make an integration ticket, let's call it #ABCD, describing how
> these features are related and a brief outline of the new API I propose
> which resolves them.
>
> Then I'd create an integration branch from trunk, for that ticket.  From the
> #ABCD branch, I'd create a branch for #2093, and put it up for review.  The
> reviewer would review #2093 as usual, citing any test coverage issues,
> documentation issues, etc.  After the usual review process, when I get an
> "OK to merge", I would merge #2093 *to the #ABCD branch*, not trunk.
>
> I would repeat this process for #2094 and #2625, merging each to the #ABCD
> branch as they passed review.
>
> Finally, I'd put #ABCD itself up for review.  At this point the process
> would differ a bit.  Reviewers would be able to assume, at this point, that
> the potentially large body of code in #ABCD had already been reviewed, that
> the test cases were good, the documentation was reasonably clear, and the
> logic made sense.  This final review would be a quick sanity check, to make
> sure the tests still pass and that there are no conflicts.
>
> I would like to strongly emphasize that this point in the process would be
> an inappropriate time for reviewers to start arguing with each other over
> what is required for the branch to land, disputing the original
> specification, etc; this is just an opportunity to spot potential
> regressions before it lands.  Each ticket review for a component of the
> larger feature should be an opportunity to draw attention to the direction
> of the larger feature development and prompt discussion.  This *might* be an
> appropriate point to note that some other behavior-changing feature had been
> left out, though.
>
> In the case that there *were* conflicts, this would be an opportunity to
> review the conflict resolution itself.
>
> (We saw a nascent version of this approach on some stuff related to
> <http://twistedmatrix.com/trac/ticket/886> and it was hugely painful because
> nobody was really sure what the process was supposed to be.  So let's not do
> it like that again.)
>
> So: thoughts?  Does this make sense as a policy change for facilitating the
> development of major new features or consolidating behavior-changing fixes
> into easier-to-understand units?
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>

-- 
Nos?t?ts no manas mobil?s ier?ces

--
Konrads Smelkovs
Applied IT sorcery.


From exarkun at twistedmatrix.com  Wed May 26 09:53:41 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 26 May 2010 13:53:41 -0000
Subject: [Twisted-Python] major changes, release engineering,
	and learning cost
In-Reply-To: <8A688AD5-DF07-45CD-ABF6-49057C268800@twistedmatrix.com>
References: <FCCC3CD5-0A5D-48A0-B679-24D43968175F@twistedmatrix.com>
	<20100524023532.1749.465645627.divmod.xquotient.37@localhost.localdomain>
	<AANLkTikZfKK_InzB3TTbXZnTZhvsa0CGnzgMa6-Q3R2z@mail.gmail.com>
	<8A688AD5-DF07-45CD-ABF6-49057C268800@twistedmatrix.com>
Message-ID: <20100526135341.1974.17902893.divmod.xquotient.0@localhost.localdomain>

On 08:44 am, glyph at twistedmatrix.com wrote:
>
>On May 24, 2010, at 7:42 AM, Jonathan Lange wrote:
>>Also, +1 on the documentation.
>
>I think we should continue this discussion after somebody has done at 
>least one branch like this.

Well, we did #886, right?

Jean-Paul


From glyph at twistedmatrix.com  Thu May 27 01:01:36 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 27 May 2010 01:01:36 -0400
Subject: [Twisted-Python] major changes, release engineering,
	and learning cost
In-Reply-To: <20100526135341.1974.17902893.divmod.xquotient.0@localhost.localdomain>
References: <FCCC3CD5-0A5D-48A0-B679-24D43968175F@twistedmatrix.com>
	<20100524023532.1749.465645627.divmod.xquotient.37@localhost.localdomain>
	<AANLkTikZfKK_InzB3TTbXZnTZhvsa0CGnzgMa6-Q3R2z@mail.gmail.com>
	<8A688AD5-DF07-45CD-ABF6-49057C268800@twistedmatrix.com>
	<20100526135341.1974.17902893.divmod.xquotient.0@localhost.localdomain>
Message-ID: <C4B9DD8A-1CC6-4C3E-823B-EB6C11912469@twistedmatrix.com>

On May 26, 2010, at 9:53 AM, exarkun at twistedmatrix.com wrote:

> On 08:44 am, glyph at twistedmatrix.com wrote:
>> 
>> On May 24, 2010, at 7:42 AM, Jonathan Lange wrote:
>>> Also, +1 on the documentation.
>> 
>> I think we should continue this discussion after somebody has done at 
>> least one branch like this.
> 
> Well, we did #886, right?


I don't think that counts.  I meant that we've done at least one feature that *successfully* used a set of stacked branches.  (I hope "stacked" means what I think it means here, and not some other crazy bzr thing.)  #886 is more a description of the failure condition here than a success.

#886 had one half-hearted sub-ticket, #3811, which eventually got abandoned and had to wait until #886 was merged to trunk anyway.  And lots of other stuff that I wish had been added at the same time for a coherent unit of new functionality (like the high level API) was spun out into a separate ticket because it was too hard to review all at once.

The high-level ticket in this case is really sneakily hiding out here: <http://twistedmatrix.com/trac/wiki/TwistedWebClient>.  (A few things are still open there but I doubt that this is still a good candidate for development under the proposed style.)



From glyph at twistedmatrix.com  Thu May 27 01:02:51 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 27 May 2010 01:02:51 -0400
Subject: [Twisted-Python] major changes, release engineering,
	and learning cost
In-Reply-To: <AANLkTimlY2Gsvpsy13_zQUdMJcNDqdtEoDH4L9LzkX8v@mail.gmail.com>
References: <FCCC3CD5-0A5D-48A0-B679-24D43968175F@twistedmatrix.com>
	<20100524023532.1749.465645627.divmod.xquotient.37@localhost.localdomain>
	<AANLkTikZfKK_InzB3TTbXZnTZhvsa0CGnzgMa6-Q3R2z@mail.gmail.com>
	<8A688AD5-DF07-45CD-ABF6-49057C268800@twistedmatrix.com>
	<AANLkTimlY2Gsvpsy13_zQUdMJcNDqdtEoDH4L9LzkX8v@mail.gmail.com>
Message-ID: <7A3FDB76-0666-4827-B742-DEACDD9345EB@twistedmatrix.com>


On May 26, 2010, at 5:41 AM, Laurens Van Houtven wrote:

> Major stuff could be a blueprint on Launchpad. Blueprints match a branch for the "big feature". So, we have the Twisted blueprint quantum-transmogrification and a branch lp:~lvh/twisted/quantum-transmogrification.

So, while I can definitely sympathize with a certain animosity towards trac, and I can appreciate the goals and sensibilities of launchpad, I will probably flat-out veto any required / process-driven usage of Launchpad blueprints.  Bugs, features, enhancements, etc, are all units of work that need to be tracked, and it's better to have one kind of crummy interface for tracking _everything_ than three interfaces, even three good interfaces, for tracking little bits stuff in different ways according to arbitrary distinctions.  (As someone recently opined to me, Blueprints are a giant complicated interface for pasting the URL to a Google Wave into a text field.  We might as well skip the text field and just link straight to the conversation from a Trac ticket.)

> From that branch I create a bunch of branches of review units (if it turns out it's too big, I just branch again for a new review unit). So, I want to do something with entanglement: lp:~lvh/twisted/quantum-transmogrification-entanglement, and it's good, so someone reviews and sends it back.
> 
> lp's merge proposals let you do the code review in arbitrarily small chunks. So if the thing I do next is lp:~lvh/twisted/quantum-transmogrification-ftl-travel,

lp:~lvh... isn't a verb.  What do you do with that string? :)

> and it turns out FTL travel is really really hard so I need two smaller branches lp:~lvh/twisted/quantum-transmogrification-tunnels and lp:~lvh/twisted/quantum-transmogrification-ansible. Both are good, so they get put back into ~lvh/twisted/quantum-transmogrification-ftl-travel.
> 
> Each review would verify that all children (if any) have also been reviewed. So, the final review is pretty small, as suggested :-)


The review wouldn't verify that the parent had been reviewed, though.  If you started this process by writing a bunch of code in the q-t-f-t branch, *that* code would never have been reviewed; unless q-t-f-t needs to be reviewed in its entirety before landing on trunk.  Which is precisely what I'm trying to avoid.

> This does not limit a developer's freedom to branch at will, because code review is opt-in (merge proposal), not opt-out. If you don't do it, that code in that branch isn't covered by a previous review, and must be reviewed later.

This strikes me as placing a pretty nasty burden on the reviewer.  The reviewer has to figure out if there are any commits that went only to the integration branch, isolate them, review them, get that branch into an OK-it's-reviewed state, while meanwhile other developers might be committing stuff to that branch and changing its contents, both from regular working commits and from reviewed merges.  It sounds like a nightmare.  Maybe bzr makes it easier than it sounds, but it sounds bad enough that even a big improvement would still be pretty bad ;).

> How exactly code review coverage would work is somewhat of an open question and it's the obvious failure in this system. We use it in production and it turns out to not be a problem, because people always end up doing two things:

Who is "we"?  What is "production"?  Are you talking about Twisted or a hypothetical project which uses Twisted, or a fork of Twisted on Launchpad?  Is this a hypothetical project or a real proejct?  I am super confused.

> 1) always branch at least once from the first branch off trunk (so branch off lp:~lvh/twisted/quantum-transmogrification). Net result: lp:~lvh/twisted/quantum-transmogrification only introduces code in the form of merges.

That's pretty much what I'm proposing, except I don't actually care whether they're merges or patches or individual commits, as long as they've cycled through code-review properly.

> 2) always do code review on branches being merged into your first branch off trunk (so everything merged into lp:~lvh/twisted/quantum-transmogrification has to be reviewed already)

And this is what we already do.

> Note that our merges into trunk are automagic.

(Again, who is "we", and by what mechanism are they automated?  Are you proposing that we do this, or are you stating that some other people do?)

> If it's merged into a direct branch off of trunk and it satisfies some qualities (such as full test coverage :)), it gets put into trunk, and that gets pushed to production servers. No human interaction. Scary at first, but then you realize humans were already involved in the QC process extensively at every point -- doing it this way just makes them take testing more seriously :)

Human interaction of some kind should definitely be required for Twisted.  This is not just pushing some new widget to a web site; this is potentially pushing out new APIs that need to be documented and supported to a whole ton of developers.  The whole point of the process modification I've proposed is to make sure that features arrive in releases as coherent, comprehensible whole pieces, not to allow things we can automatically verify (like docstring and test coverage) to be deferred to later merges.  These properties of the code should still be verified on every merge to the integration branch; the interesting thing about the merge to trunk is the verification that the unit is a coherent whole (and in the case of a deprecation / replacement, that the replacement is a functionally adequate upgrade).

> I think a bug would be similar except the root would not be a blueprint but a bug.

So, I'm really confused as to what the purpose of this message was - are you just describing how a similar workflow might work if we used launchpad, advocating that we switch to launchpad in order to implement this, advocating that we use launchpad for big features but *not* for other stuff, or ... what?  If you're proposing a different functional modification to the existing process, can you do it without reference to tons of launchpad-specific terminology?

Sorry if this comes off as a little flamey; I really am just confused as to what the point was.

Thanks,

-glyph




From ploutosss at gmail.com  Thu May 27 05:45:17 2010
From: ploutosss at gmail.com (Viktor Klimov)
Date: Thu, 27 May 2010 13:45:17 +0400
Subject: [Twisted-Python] PB and unstable network
In-Reply-To: <AANLkTim4Qngekk1D1WTNTi_XLVQPCb6CCs8WIf6BTzdO@mail.gmail.com>
References: <AANLkTilMJwEDDbRzyeZdjIDZ6PGlj6x5FHq4c-QovDXY@mail.gmail.com>
	<1D9536C6-75DE-4934-982B-3B0485D526F0@twistedmatrix.com>
	<AANLkTikkt_ZBrYcXuU5nlH5WsP_CN-yZz9zFh4YYCOUX@mail.gmail.com>
	<AANLkTim4Qngekk1D1WTNTi_XLVQPCb6CCs8WIf6BTzdO@mail.gmail.com>
Message-ID: <AANLkTinGm_WlBSnT-FEbVXV3MpXk_T3d-NRUrzGvxN0i@mail.gmail.com>

You mean a packet message used in the TCP? Or offer to implement ACK to PB?

Maybe someone will point to the literature on network programming in
unstable networks?

On Tue, May 25, 2010 at 6:41 PM, Yaroslav Fedevych
<jaroslaw.fedewicz at gmail.com> wrote:
> In your case, I would suggest that the server sends some sort of ACK
> after it has received the payload from client, and the client must
> send the same kind of ACK in response. Only after that would the
> server consider operation complete, otherwise it would either inform
> the client that the previous operation was interrupted midway, or
> discard the incomplete message completely, thus forcing client to
> re-send it.
>
> Sounds complicated, but I think that's the only reliable way to make
> sure things don't get duplicated on either server or client.
>
> On Tue, May 25, 2010 at 11:34 AM, Viktor Klimov <ploutosss at gmail.com> wrote:
>> Hi Glyph, sorry for my english.
>>
>> My server.py save last answer(see User.perspectiveMessageReceived).
>>
>> Client when an error occurs(in callRemote) schedule reconnect. After
>> reconnect client call remote method which return last answer.
>>
>> It works if disconnect happened when server send data to
>> client(_server->client_). (try set MyServer.crash_server_to_client to
>> True)
>>
>> But it doesn't work if disconnect happened when client send data to
>> server(_client->server_). Becouse server after reconnect send previous
>> data. It can fix if client be known when error occurs(server->client
>> or client->server). (see comment in Client.net_error).
>>
>> PS for emulate error client->server set Client.crash_client_to_server
>> to True, don't forget set MyServer.crash_server_to_client to False)
>>
>> On Mon, May 24, 2010 at 5:19 AM, Glyph Lefkowitz
>> <glyph at twistedmatrix.com> wrote:
>>> On May 23, 2010, at 11:54 AM, Viktor Klimov wrote:
>>>
>>>> I use PB in unstable network. The server remembers the last answer.
>>>> Client detection disconnected, connected again, makes entry into the
>>>> system and calls the function returns the last response
>>>> (get_last_response). The answer, it returns a deferred saved earlier.
>>>> If somewhere an error cycle repeats.
>>>>
>>>> All of this works until the lost communication does not happen at a
>>>> time when Twisted sends data to a server. As the server in this
>>>> situation does not receive a first request, and when you call
>>>> get_last_response client receives the data that has already received.
>>>>
>>>> How can I check if an error in the client arrived data to the server or not?
>>>
>>> Hi Viktor,
>>>
>>> I try not to give people a hard time about bad English, but I am having a hard time reading your message. ?There are a couple of different things I think you might mean and it would be confusing if I tried to explain them all.
>>>
>>> Perhaps you could attach some Python code that explains exactly what you mean?
>>>
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From gabriel.rossetti at arimaz.com  Thu May 27 08:08:50 2010
From: gabriel.rossetti at arimaz.com (Gabriel Rossetti)
Date: Thu, 27 May 2010 14:08:50 +0200
Subject: [Twisted-Python] can the reactor be told to stop processing events
 and to just queue them?
Message-ID: <4BFE60D2.7030403@arimaz.com>

Hello everyone,

is there a way to tell the reactor to just queue the events and not to 
process them for a specific protocol? I have two protocols running on my 
reactor, one that monitors the network and one for a usb device, I'd 
like to pause the event processing for the network side when certain 
msgs arrive on the usb protocol and then unpause it later on. I know I 
can create a queue and add the network msgs and process them later but I 
find it redundant to do so when twisted already has an event queue.

Thank you,
Gabriel


From itamar at itamarst.org  Thu May 27 08:27:44 2010
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Thu, 27 May 2010 12:27:44 +0000
Subject: [Twisted-Python] can the reactor be told to stop processing
 events and to just queue them?
In-Reply-To: <4BFE60D2.7030403@arimaz.com>
References: <4BFE60D2.7030403@arimaz.com>
Message-ID: <1274963264.31649.964.camel@pintsize>

On Thu, 2010-05-27 at 14:08 +0200, Gabriel Rossetti wrote:
> is there a way to tell the reactor to just queue the events and not to 
> process them for a specific protocol?

No, Twisted doesn't have an event queue (but see below).

>  I have two protocols running on my 
> reactor, one that monitors the network and one for a usb device, I'd 
> like to pause the event processing for the network side when certain 
> msgs arrive on the usb protocol and then unpause it later on. I know I 
> can create a queue and add the network msgs and process them later but I 
> find it redundant to do so when twisted already has an event queue.

How about calling transport.pauseProducing() and then later
transport.resumeProducing() on the TCP connections?



From gabriel.rossetti at arimaz.com  Thu May 27 08:49:39 2010
From: gabriel.rossetti at arimaz.com (Gabriel Rossetti)
Date: Thu, 27 May 2010 14:49:39 +0200
Subject: [Twisted-Python] can the reactor be told to stop processing
 events and to just queue them?
In-Reply-To: <1274963264.31649.964.camel@pintsize>
References: <4BFE60D2.7030403@arimaz.com> <1274963264.31649.964.camel@pintsize>
Message-ID: <4BFE6A63.9040209@arimaz.com>



Itamar Turner-Trauring wrote:
> On Thu, 2010-05-27 at 14:08 +0200, Gabriel Rossetti wrote:
>   
>> is there a way to tell the reactor to just queue the events and not to 
>> process them for a specific protocol?
>>     
>
> No, Twisted doesn't have an event queue (but see below).
>
>   
ok
>>  I have two protocols running on my 
>> reactor, one that monitors the network and one for a usb device, I'd 
>> like to pause the event processing for the network side when certain 
>> msgs arrive on the usb protocol and then unpause it later on. I know I 
>> can create a queue and add the network msgs and process them later but I 
>> find it redundant to do so when twisted already has an event queue.
>>     
>
> How about calling transport.pauseProducing() and then later
> transport.resumeProducing() on the TCP connections?
>
>   
Ok, thanks, I'll try that.


From lvh at laurensvh.be  Thu May 27 16:27:13 2010
From: lvh at laurensvh.be (Laurens Van Houtven)
Date: Thu, 27 May 2010 22:27:13 +0200
Subject: [Twisted-Python] major changes, release engineering,
	and learning 	cost
In-Reply-To: <7A3FDB76-0666-4827-B742-DEACDD9345EB@twistedmatrix.com>
References: <FCCC3CD5-0A5D-48A0-B679-24D43968175F@twistedmatrix.com>
	<20100524023532.1749.465645627.divmod.xquotient.37@localhost.localdomain>
	<AANLkTikZfKK_InzB3TTbXZnTZhvsa0CGnzgMa6-Q3R2z@mail.gmail.com>
	<8A688AD5-DF07-45CD-ABF6-49057C268800@twistedmatrix.com>
	<AANLkTimlY2Gsvpsy13_zQUdMJcNDqdtEoDH4L9LzkX8v@mail.gmail.com>
	<7A3FDB76-0666-4827-B742-DEACDD9345EB@twistedmatrix.com>
Message-ID: <AANLkTinnNhEY8RZKL_UcV07AOqQDc7iN9aMWuhAfbnh7@mail.gmail.com>

For clarity: I think Launchpad replacing Trac is a good thing. I realize
that's a huge ordeal. However, I don't think the basic ideas are so
different that it'd be impossible. As discussed on IRC, the main
downside (aka why we can't do it right now) is lack of notifications, so
it's hard to integrate stuff like buildbot yet, but that's being worked
on.

The idea I'm proposing is probably doable without Launchpad, but it's
definitely much harder without bzr. Mixing bzr and svn, might work, but
the developers definitely need to be using bzr because branching really
can't be a pain for it to work.

I have diagrammed the quantum-transmogrifier example that I tried to
explain in the last email.

http://bit.ly/aA20Qs

On Thu, May 27, 2010 at 7:02 AM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
>
> On May 26, 2010, at 5:41 AM, Laurens Van Houtven wrote:
>
> So, while I can definitely sympathize with a certain animosity towards
> trac, and I can appreciate the goals and sensibilities of launchpad, I
> will probably flat-out veto any required / process-driven usage of
> Launchpad blueprints. Bugs, features, enhancements, etc, are all units
> of work that need to be tracked, and it's better to have one kind of
> crummy interface for tracking _everything_ than three interfaces, even
> three good interfaces, for tracking little bits stuff in different
> ways according to arbitrary distinctions. (As someone recently opined
> to me, Blueprints are a giant complicated interface for pasting the
> URL to a Google Wave into a text field. We might as well skip the text
> field and just link straight to the conversation from a Trac ticket.)

(was it dash? ;-))

I understand your point of view, but I don't think blueprints are that
bad. I'm not saying blueprints aren't fat pointers to URLs, but I just
don't think that would necessarily make them less useful. As far as
arbitrary distinctions go: I'd think new features are blueprints, and
bugs are bugs. It's not very arbitrary in my mind -- which is just a
different way of saying "I can't think of any grey areas". (Yes, this
means there are very few blueprints. I think that's a good thing :))

I think I understand the reasoning behind your opinion from a project
lead/release management/developer perspective: both bugs and blueprints
are jobs that still need to be done, similarly tracked for releases, and
they both take developer time to be resolved. I don't think this
reasoning is wrong.

For both users and developers, I think thinking of bugs and new features
as separate things makes sense. Furthermore, Launchpad has stuff like
milestones and targeted releases, so I don't think the
three-good-interfaces thing is really that prohibitive. Personally, I
don't feel that split is bad for developers either.

(FWIW: yes, I think Launchpad's Whiteboard feature needs extending and
it probably needs a comment system. And once you do that, you might
indeed wonder what the difference with bugs still is -- but I'm not
arguing Launchpad is perfect, I'm arguing it's better than Trac ;-))

Even if blueprints are non-negotiable, I think most of what I said could
just as well be applied to Launchpad bugs: you'd treat Launchpad bugs
like you treat Trac tickets now. Merge proposals and the reviews they
come with are properties of branches in Launchpad, and not of blueprints
or bugs (IIRC). So, feel free to scrap blueprints, it's not that big a
deal :)

> lp:~lvh... isn't a verb. What do you do with that string? :)

Sorry, bad emacs VC mode habit. I meant 'create a branch lp:~lvh/...'

> > and it turns out FTL travel is really really hard so I need two
> > smaller branches lp:~lvh/twisted/quantum-transmogrification-tunnels
> > and lp:~lvh/twisted/quantum-transmogrification-ansible. Both are
> > good, so they get put back into
> > ~lvh/twisted/quantum-transmogrification-ftl-travel.
> >
> > Each review would verify that all children (if any) have also been
> > reviewed. So, the final review is pretty small, as suggested :-)
>
> The review wouldn't verify that the parent had been reviewed, though.
> If you started this process by writing a bunch of code in the q-t-f-t
> branch, *that* code would never have been reviewed; unless q-t-f-t
> needs to be reviewed in its entirety before landing on trunk. Which is
> precisely what I'm trying to avoid.

Yeah, this is sort-of fixed in practice by my point (1) below, but
requires some conscious effort and discipline from the developer. An
alternative idea to just having merges of reviewed branches in q-t,
would be to have the review of q-t be "all of the commits that aren't
reviewed merges from other branches". That sounds really, really
annoying, so I'd rather do it the first way. Specifically, that means
"don't do that, branch early and often, merging is easy but branching
halfway is confusing".

>
> > This does not limit a developer's freedom to branch at will, because
> > code review is opt-in (merge proposal), not opt-out. If you don't do
> > it, that code in that branch isn't covered by a previous review, and
> > must be reviewed later.
>
> This strikes me as placing a pretty nasty burden on the reviewer. The
> reviewer has to figure out if there are any commits that went only to
> the integration branch, isolate them, review them, get that branch
> into an OK-it's-reviewed state, while meanwhile other developers might
> be committing stuff to that branch and changing its contents, both
> from regular working commits and from reviewed merges. It sounds like
> a nightmare. Maybe bzr makes it easier than it sounds, but it sounds
> bad enough that even a big improvement would still be pretty bad ;).

Again, I think point (1) addresses this: yes, but not if you promise to
make branches off your first branch off trunk (wording is a bit off, but
look at the diagram for clarification). That way they only have merges
from other branches, and those merges are reviewed.

As long as you don't do that, and keep your development out of review
branches, there is no problem. That sounds like a very big caveat, but
we have found it to work in practice. I'm not sure why, but one
explanation would be that people sometimes hugely underestimate how much
time something takes to develop, but guesstimates about the complexity
of a particular feature tend to be much more accurate. Even if that goes
awry, there is quite some leeway here: the complexity of a review branch
has to really completely get out of hand before it wouldn't be okay for
it to be one code review anymore -- up to the point that it probably
wouldn't pass review anymore under the old design.

An added bonus is that there is reduced incentive to keep piling on
features in a single review branch, because all of it has to be
reviewable in one go. I think this is a good idea, because it encourages
proper planning and up-front specs of which features you want to
implement. This effect might be stronger in a small, tight development
team such as in a small development house than with a distributed
development team like Twisted (screwing over your reviewer just means
he'll be less friendly to you next time you have to do reviews, and you
still have to work with these people later on), but I'm going to be
optimistic and pretend we're all nice people :-)

> > How exactly code review coverage would work is somewhat of an open
> > question and it's the obvious failure in this system. We use it in
> > production and it turns out to not be a problem, because people
> > always end up doing two things:
>
> Who is "we"? What is "production"? Are you talking about Twisted or a
> hypothetical project which uses Twisted, or a fork of Twisted on
> Launchpad? Is this a hypothetical project or a real proejct? I am
> super confused.

This is a real project that uses (amongst other things) Twisted.


> > 1) always branch at least once from the first branch off trunk (so
> > branch off lp:~lvh/twisted/quantum-transmogrification). Net result:
> > lp:~lvh/twisted/quantum-transmogrification only introduces code in
> > the form of merges.
>
> That's pretty much what I'm proposing, except I don't actually care
> whether they're merges or patches or individual commits, as long as
> they've cycled through code-review properly.

Right, but wouldn't it then be hard for reviewers to know what has been
reviewed and what hasn't?

>
> > 2) always do code review on branches being merged into your first
> > branch off trunk (so everything merged into
> > lp:~lvh/twisted/quantum-transmogrification has to be reviewed
> > already)
>
> And this is what we already do.

Huh? I thought it got reviewed when it was put up for review for
suggested merging into trunk. My suggestion is the same thing, except
s/trunk/q-t/. There's a second review when q-t itself gets merged into
trunk, but as long as those are all merges of reviewed branches, that
review is trivial. See diagram, points 16 and 17.

> > Note that our merges into trunk are automagic.
>
> (Again, who is "we", and by what mechanism are they automated? Are you
> proposing that we do this, or are you stating that some other people
> do?)

The aforementioned project using Twisted. I'd prefer not going into a
lot of detail, maybe we should forget about it for purposes of keeping
the discussing focused.

Perhaps what _can_ be taken home from this for purposes of the
discussion is that this way of organizing branches does actually work
for at least one development team somewhere. I'm not sure to what extent
this carries over to Twisted. All I know is that the distributedness of
Twisted development isn't much of a problem, since I had no issues and I
spent 99% working from home/university.

> > If it's merged into a direct branch off of trunk and it satisfies
> > some qualities (such as full test coverage :)), it gets put into
> > trunk, and that gets pushed to production servers. No human
> > interaction. Scary at first, but then you realize humans were
> > already involved in the QC process extensively at every point --
> > doing it this way just makes them take testing more seriously :)
>
> Human interaction of some kind should definitely be required for
> Twisted. This is not just pushing some new widget to a web site; this
> is potentially pushing out new APIs that need to be documented and
> supported to a whole ton of developers. The whole point of the process
> modification I've proposed is to make sure that features arrive in
> releases as coherent, comprehensible whole pieces, not to allow things
> we can automatically verify (like docstring and test coverage) to be
> deferred to later merges. These properties of the code should still be
> verified on every merge to the integration branch; the interesting
> thing about the merge to trunk is the verification that the unit is a
> coherent whole (and in the case of a deprecation / replacement, that
> the replacement is a functionally adequate upgrade).

Yeah, I can see that. My point is not so much an argument for
implementing automatic merging into trunk for Twisted, but mostly that
this method, when properly implemented, results in a very high
confidence level of the quality of your implementation branches, up to
the point where people have successfully automated it :)

As far as the coherent, comprehensible releases, that's one of the
reasons I like Launchpad's milestones, series, blueprints... You want to
do all of that and I think it's a great idea, and I think that they're
good tools for making all of the specifics of that intent (coherent,
comprehensible releases) more transparent to the outside world.


> Thanks,
>
> -glyph

Thanks,
Laurens


From glyph at twistedmatrix.com  Thu May 27 20:13:09 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 27 May 2010 20:13:09 -0400
Subject: [Twisted-Python] major changes, release engineering,
	and learning cost
In-Reply-To: <AANLkTinnNhEY8RZKL_UcV07AOqQDc7iN9aMWuhAfbnh7@mail.gmail.com>
References: <FCCC3CD5-0A5D-48A0-B679-24D43968175F@twistedmatrix.com>
	<20100524023532.1749.465645627.divmod.xquotient.37@localhost.localdomain>
	<AANLkTikZfKK_InzB3TTbXZnTZhvsa0CGnzgMa6-Q3R2z@mail.gmail.com>
	<8A688AD5-DF07-45CD-ABF6-49057C268800@twistedmatrix.com>
	<AANLkTimlY2Gsvpsy13_zQUdMJcNDqdtEoDH4L9LzkX8v@mail.gmail.com>
	<7A3FDB76-0666-4827-B742-DEACDD9345EB@twistedmatrix.com>
	<AANLkTinnNhEY8RZKL_UcV07AOqQDc7iN9aMWuhAfbnh7@mail.gmail.com>
Message-ID: <7BC3FF52-A3F3-4898-BE1A-34F06FAF5798@twistedmatrix.com>


On May 27, 2010, at 4:27 PM, Laurens Van Houtven wrote:

> I have diagrammed the quantum-transmogrifier example that I tried to
> explain in the last email.

OK.  With this diagram in mind, I can see that what you're proposing is nearly identical to what I've already proposed, except that you are being very vague as to the *requirements* on when and whether branches get merged.  I'm not concerned with the "level of confidence" that you describe (we already have that), but with a modification to the *requirement* that branches be fully reviewed before a merge to trunk, and that the reviewer can block that merge.

What I've suggested, simply put, is that we can have branches that land on trunk without being fully code-reviewed, *provided that each commit to that branch was itself code-reviewed*.  There are a few fiddly details beyond that, but we seem to be in agreement on that broad picture.

So, sorry for a terse response to a message that obviously took a long time to write, but I don't think this merits further discussion :).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100527/09135128/attachment.htm 

From lvh at laurensvh.be  Thu May 27 20:34:56 2010
From: lvh at laurensvh.be (Laurens Van Houtven)
Date: Fri, 28 May 2010 02:34:56 +0200
Subject: [Twisted-Python] major changes, release engineering,
	and learning 	cost
In-Reply-To: <7BC3FF52-A3F3-4898-BE1A-34F06FAF5798@twistedmatrix.com>
References: <FCCC3CD5-0A5D-48A0-B679-24D43968175F@twistedmatrix.com>
	<20100524023532.1749.465645627.divmod.xquotient.37@localhost.localdomain>
	<AANLkTikZfKK_InzB3TTbXZnTZhvsa0CGnzgMa6-Q3R2z@mail.gmail.com>
	<8A688AD5-DF07-45CD-ABF6-49057C268800@twistedmatrix.com>
	<AANLkTimlY2Gsvpsy13_zQUdMJcNDqdtEoDH4L9LzkX8v@mail.gmail.com>
	<7A3FDB76-0666-4827-B742-DEACDD9345EB@twistedmatrix.com>
	<AANLkTinnNhEY8RZKL_UcV07AOqQDc7iN9aMWuhAfbnh7@mail.gmail.com>
	<7BC3FF52-A3F3-4898-BE1A-34F06FAF5798@twistedmatrix.com>
Message-ID: <AANLkTik9tw_mPlVsAexUnIicL8TBeFJxTICna26dO3PL@mail.gmail.com>

When you say merge, do you mean into trunk, or also the submerges into
my own feature/review branch? The big problem I can think of is that
interfaces are something you should probably have a rough idea about
way before any code gets written, but under this system branches get
reviewed per feature set, so it takes a very long time before anyone
(at least the reviewer, in the worst case also the developer) gets a
half-decent view of how the entire thing is going to look when it's
finished.

I'm not saying interfaces should be set in stone, of course. I just
think you should have some basic design that people agree on before
you start writing tests, let alone implementation code. (I think this
is where blueprints fit in).

Laurens


From terry at jon.es  Thu May 27 20:56:14 2010
From: terry at jon.es (Terry Jones)
Date: Thu, 27 May 2010 20:56:14 -0400
Subject: [Twisted-Python] Looking for Twisted programmers at Fluidinfo
Message-ID: <19455.5294.305428.149059@jon.es>

Apologies for a job posting, but we're looking to hire Twisted people at
Fluidinfo (http://fluidinfo.com) . We wrote FluidDB using Twisted from top
to bottom.  We love Twisted. In fact, we closed a funding deal a week ago
and the company's first check is being written to the Twisted Software
Foundation.  We wrote and use txAMQP, txRDQ, Twisted interfaces to Avro,
Zookeeper, and Amazon S3 & EC2.  We give talks on Twisted (we have a couple
in the upcoming EuroPycon) and I am personally addicted to the myriad
slippery beauties of Twisted deferreds :-)

So there you go. Want to work (preferably!) in New York in a cool startup
with a team of hackers who love Twisted?  Of course you do! See
http://fluidinfo.com/jobs & google FluidDB or Fluidinfo for more.

[We now return you to regular programming.]

Terry


From donal.mcmullan at gmail.com  Thu May 27 21:06:44 2010
From: donal.mcmullan at gmail.com (Donal McMullan)
Date: Fri, 28 May 2010 13:06:44 +1200
Subject: [Twisted-Python] Looking for Twisted programmers at Fluidinfo
In-Reply-To: <19455.5294.305428.149059@jon.es>
References: <19455.5294.305428.149059@jon.es>
Message-ID: <AANLkTik5ZLFOuKuPJvXfL9Z4XJwBNfzRDdiE1DaA3fp-@mail.gmail.com>

Congratulations on the funding!

On 28 May 2010 12:56, Terry Jones <terry at jon.es> wrote:

> Apologies for a job posting, but we're looking to hire Twisted people at
> Fluidinfo (http://fluidinfo.com) . We wrote FluidDB using Twisted from top
> to bottom.  We love Twisted. In fact, we closed a funding deal a week ago
> and the company's first check is being written to the Twisted Software
> Foundation.  We wrote and use txAMQP, txRDQ, Twisted interfaces to Avro,
> Zookeeper, and Amazon S3 & EC2.  We give talks on Twisted (we have a couple
> in the upcoming EuroPycon) and I am personally addicted to the myriad
> slippery beauties of Twisted deferreds :-)
>
> So there you go. Want to work (preferably!) in New York in a cool startup
> with a team of hackers who love Twisted?  Of course you do! See
> http://fluidinfo.com/jobs & google FluidDB or Fluidinfo for more.
>
> [We now return you to regular programming.]
>
> Terry
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100528/f95f329e/attachment.htm 

From lvh at laurensvh.be  Fri May 28 03:53:34 2010
From: lvh at laurensvh.be (Laurens Van Houtven)
Date: Fri, 28 May 2010 09:53:34 +0200
Subject: [Twisted-Python] Looking for Twisted programmers at Fluidinfo
In-Reply-To: <AANLkTik5ZLFOuKuPJvXfL9Z4XJwBNfzRDdiE1DaA3fp-@mail.gmail.com>
References: <19455.5294.305428.149059@jon.es>
	<AANLkTik5ZLFOuKuPJvXfL9Z4XJwBNfzRDdiE1DaA3fp-@mail.gmail.com>
Message-ID: <AANLkTilo3dB0afaZYuhnXPOe2WIlGQD402Z7jFYXRx8d@mail.gmail.com>

Congratulations on the funding, have fun at the party. Wish I could be
there -- unfortunately I have to tell some professor about how algebra
works that day :-(


From gabriel.rossetti at arimaz.com  Fri May 28 10:40:56 2010
From: gabriel.rossetti at arimaz.com (Gabriel Rossetti)
Date: Fri, 28 May 2010 16:40:56 +0200
Subject: [Twisted-Python] can the reactor be told to stop processing
 events and to just queue them?
In-Reply-To: <4BFE6A63.9040209@arimaz.com>
References: <4BFE60D2.7030403@arimaz.com> <1274963264.31649.964.camel@pintsize>
	<4BFE6A63.9040209@arimaz.com>
Message-ID: <4BFFD5F8.9010407@arimaz.com>

Gabriel Rossetti wrote:
> Itamar Turner-Trauring wrote:
>   
>> On Thu, 2010-05-27 at 14:08 +0200, Gabriel Rossetti wrote:
>>   
>>     
>>> is there a way to tell the reactor to just queue the events and not to 
>>> process them for a specific protocol?
>>>     
>>>       
>> No, Twisted doesn't have an event queue (but see below).
>>
>>   
>>     
> ok
>   
>>>  I have two protocols running on my 
>>> reactor, one that monitors the network and one for a usb device, I'd 
>>> like to pause the event processing for the network side when certain 
>>> msgs arrive on the usb protocol and then unpause it later on. I know I 
>>> can create a queue and add the network msgs and process them later but I 
>>> find it redundant to do so when twisted already has an event queue.
>>>     
>>>       
>> How about calling transport.pauseProducing() and then later
>> transport.resumeProducing() on the TCP connections?
>>
>>   
>>     
> Ok, thanks, I'll try that.
>
>   
Just wanted to confirm that it works as you said, thank you.


From gabriel.rossetti at arimaz.com  Fri May 28 11:03:55 2010
From: gabriel.rossetti at arimaz.com (Gabriel Rossetti)
Date: Fri, 28 May 2010 17:03:55 +0200
Subject: [Twisted-Python] twisted + wx + pypubsub = progress bar update
	problem
Message-ID: <4BFFDB5B.8040304@arimaz.com>

Hello everyone,

I am using wx (wxreactor) and pypubsub with twisted and I'm having some 
issues. I have a loop that updates values and I'm trying to show the 
user the progress. The loop uses pypubsub to update the progress bar but 
even if I explicitly refrech the progress bar widget it doesn't do it 
until the loop exits. I tried calling ProcessPendingEvents() but it 
doesn't solve the problem. Does anyone have an idea on how to solve this?

Thank you,
Gabriel


From vitaly at synapticvision.com  Fri May 28 11:46:00 2010
From: vitaly at synapticvision.com (vitaly at synapticvision.com)
Date: Fri, 28 May 2010 11:46:00 -0400
Subject: [Twisted-Python] Shared resource manioulation example
Message-ID: <20100528114600.4827571jfgr8tf48@216.129.205.5>

Hi,

I'm looking for a Twisted based example how
it should be properly done update/delete of global dictionary's
SAME key:value pair from different functions all together.
Or by another words, two functions are trying to update the same  
key:value pair of the same dictionary at the same time, than how to do  
it properly with Twisted?

Thanks a lot.




From washort at twistedmatrix.com  Fri May 28 12:11:48 2010
From: washort at twistedmatrix.com (Allen Short)
Date: Fri, 28 May 2010 09:11:48 -0700
Subject: [Twisted-Python] Shared resource manioulation example
In-Reply-To: <20100528114600.4827571jfgr8tf48@216.129.205.5>
References: <20100528114600.4827571jfgr8tf48@216.129.205.5>
Message-ID: <AANLkTillEe7duR4EjBUxi6qCO8-NtHGbu4fbE9IRFhad@mail.gmail.com>

On Fri, May 28, 2010 at 8:46 AM,  <vitaly at synapticvision.com> wrote:
> I'm looking for a Twisted based example how
> it should be properly done update/delete of global dictionary's
> SAME key:value pair from different functions all together.
> Or by another words, two functions are trying to update the same
> key:value pair of the same dictionary at the same time, than how to do
> it properly with Twisted?

Twisted doesn't change anything about Python in this regard. One
update to the dictionary is going to happen before the other. If these
updates are being done from different threads, you need some kind of
synchronization to make them happen in the order you want.

However, if you aren't explicitly using threads in your code, remember
that Twisted doesn't run your code outside the main thread unless you
ask it to. So nothing happens at "the same time" -- one function runs,
then the other.

What problems are you running into?


From vitaly at synapticvision.com  Fri May 28 13:14:43 2010
From: vitaly at synapticvision.com (vitaly at synapticvision.com)
Date: Fri, 28 May 2010 13:14:43 -0400
Subject: [Twisted-Python] Shared resource manioulation example
In-Reply-To: <AANLkTillEe7duR4EjBUxi6qCO8-NtHGbu4fbE9IRFhad@mail.gmail.com>
References: <20100528114600.4827571jfgr8tf48@216.129.205.5>
	<AANLkTillEe7duR4EjBUxi6qCO8-NtHGbu4fbE9IRFhad@mail.gmail.com>
Message-ID: <20100528131443.25321imh24zqndhc@216.129.205.5>


Thank you for reply.

I'm calling each update/delete function as a separate Deferred, no  
explicit threads on those functions.

OK than, let's complicated it a bit with "dictionary of lists of  
dictionaries" instead of simple dictionary and let's put it all under  
reactor().

There are 2 incoming requests: one to "update aa1=aval100" and another  
to "delete 'a1'":
a={
   'a1':[{'aa1':'aval1'},{'bb1':'bval1'}],
   'a2':[{'aa2':'aval1'},{'bb2':'bval2'}]
}

So "delete 'a1'" will exec always only after "update aa1=aval100" is done?


Quoting "Allen Short" <washort at twistedmatrix.com>:

> On Fri, May 28, 2010 at 8:46 AM,  <vitaly at synapticvision.com> wrote:
>> I'm looking for a Twisted based example how
>> it should be properly done update/delete of global dictionary's
>> SAME key:value pair from different functions all together.
>> Or by another words, two functions are trying to update the same
>> key:value pair of the same dictionary at the same time, than how to do
>> it properly with Twisted?
>
> Twisted doesn't change anything about Python in this regard. One
> update to the dictionary is going to happen before the other. If these
> updates are being done from different threads, you need some kind of
> synchronization to make them happen in the order you want.
>
> However, if you aren't explicitly using threads in your code, remember
> that Twisted doesn't run your code outside the main thread unless you
> ask it to. So nothing happens at "the same time" -- one function runs,
> then the other.
>
> What problems are you running into?
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>




From JOHN at egh.com  Fri May 28 13:15:26 2010
From: JOHN at egh.com (John Santos)
Date: Fri, 28 May 2010 13:15:26 -0400
Subject: [Twisted-Python] Shared resource manioulation example
In-Reply-To: <20100528114600.4827571jfgr8tf48@216.129.205.5>
Message-ID: <1100528124424.50310N-100000@Ives.egh.com>

On Fri, 28 May 2010 vitaly at synapticvision.com wrote:

> Hi,
> 
> I'm looking for a Twisted based example how
> it should be properly done update/delete of global dictionary's
> SAME key:value pair from different functions all together.
> Or by another words, two functions are trying to update the same  
> key:value pair of the same dictionary at the same time, than how to do  
> it properly with Twisted?
> 
> Thanks a lot.
> 

Vitaly,

As a relative newbie to both Twisted and Python (I wish I had more time
to play with it, as there are lots of things I don't really understand
yet, but other work intervenes), I *think* the whole point of the
Twisted reactor is to serialize the callbacks.

So two functions *can't* be trying to update the same Python object
(dictionary or anything else, global or local) at the same time.
While one thread has control, it can do anything it wants to the
global dictionary, and no other function can see anything but the
final result.

So "just do it"!

This assumes you aren't using threads, which are *not* compatible
with Twisted anyway.

The only more complicated scenario I can see is if some desired
process uses the current value in a dictionary to initiate a
request to something else (for example, a TCP/IP messages to another
system) which returns its result in another callback which then stores
the result (or some value that depends on the result) in the same
dictionary element.  If two such sequences can overlap at the same
time, but using the initial value of dictionary element in the 2nd
sequence would produce an incorrect final result, but instead it
should be defered until the 1st sequence completes, then you would
need to use some sort of locking mechanism.

A very simple mechanism would be to add a boolean to each object
(i.e. each dictionary value.)  When the first callback executes, it
checks the boolean.  If set, it waits by calling reactor.callLater,
passing itself as the callback.  If the boolean is clear, it sets
it and initiates the processing.  When the final callback executes,
it sets the new value in the dictionary and clears the boolean.

More sophisticated mechanisms could use an exponential waiting
period for the reactor.callLater time; add a timeout (producing
an error if the whole process takes too long, perhaps saving the
initial value so the process could be rolled back if it fails);
replace the callLater's with a different deferal mechanism that
could be called immediately when the lock gets released; check
for deadlocks amoung multiple locks, etc.  There may very well
already exist a Twisted package for doing all this already (complete
with debugging hooks, statistics, etc.)  Someone with more Twisted
experience could probably point you right at it.  If no such
package exists, I think it would be a very nice thing to have.
If people wouldn't mind waiting for a very long (possibly infinite)
time for it, I could probably be coerced into taking a stab at
producing one.


-- 
John Santos
Evans Griffiths & Hart, Inc.
781-861-0670 ext 539



From vitaly at synapticvision.com  Fri May 28 14:34:39 2010
From: vitaly at synapticvision.com (vitaly at synapticvision.com)
Date: Fri, 28 May 2010 14:34:39 -0400
Subject: [Twisted-Python] Shared resource manioulation example
In-Reply-To: <1100528124424.50310N-100000@Ives.egh.com>
References: <1100528124424.50310N-100000@Ives.egh.com>
Message-ID: <20100528143439.903440cxu8o55qyo@216.129.205.5>

hi,

Callbacks serialization is clear to me.

I'll try to rephrase the question: two requests are incoming for reactor()
to handle. Each request has its own chain of callbacks.
At some point one of the requests need to update the same
global data structure, and another request need to delete from the same
global data structure.
So theoretically, correct me if I wrong, will be a data collision.
If it is, than how can I prevent it? Example please.

thank you.

Quoting "John Santos" <JOHN at egh.com>:

> On Fri, 28 May 2010 vitaly at synapticvision.com wrote:
>
>> Hi,
>>
>> I'm looking for a Twisted based example how
>> it should be properly done update/delete of global dictionary's
>> SAME key:value pair from different functions all together.
>> Or by another words, two functions are trying to update the same
>> key:value pair of the same dictionary at the same time, than how to do
>> it properly with Twisted?
>>
>> Thanks a lot.
>>
>
> Vitaly,
>
> As a relative newbie to both Twisted and Python (I wish I had more time
> to play with it, as there are lots of things I don't really understand
> yet, but other work intervenes), I *think* the whole point of the
> Twisted reactor is to serialize the callbacks.
>
> So two functions *can't* be trying to update the same Python object
> (dictionary or anything else, global or local) at the same time.
> While one thread has control, it can do anything it wants to the
> global dictionary, and no other function can see anything but the
> final result.
>
> So "just do it"!
>
> This assumes you aren't using threads, which are *not* compatible
> with Twisted anyway.
>
> The only more complicated scenario I can see is if some desired
> process uses the current value in a dictionary to initiate a
> request to something else (for example, a TCP/IP messages to another
> system) which returns its result in another callback which then stores
> the result (or some value that depends on the result) in the same
> dictionary element.  If two such sequences can overlap at the same
> time, but using the initial value of dictionary element in the 2nd
> sequence would produce an incorrect final result, but instead it
> should be defered until the 1st sequence completes, then you would
> need to use some sort of locking mechanism.
>
> A very simple mechanism would be to add a boolean to each object
> (i.e. each dictionary value.)  When the first callback executes, it
> checks the boolean.  If set, it waits by calling reactor.callLater,
> passing itself as the callback.  If the boolean is clear, it sets
> it and initiates the processing.  When the final callback executes,
> it sets the new value in the dictionary and clears the boolean.
>
> More sophisticated mechanisms could use an exponential waiting
> period for the reactor.callLater time; add a timeout (producing
> an error if the whole process takes too long, perhaps saving the
> initial value so the process could be rolled back if it fails);
> replace the callLater's with a different deferal mechanism that
> could be called immediately when the lock gets released; check
> for deadlocks amoung multiple locks, etc.  There may very well
> already exist a Twisted package for doing all this already (complete
> with debugging hooks, statistics, etc.)  Someone with more Twisted
> experience could probably point you right at it.  If no such
> package exists, I think it would be a very nice thing to have.
> If people wouldn't mind waiting for a very long (possibly infinite)
> time for it, I could probably be coerced into taking a stab at
> producing one.
>
>
> --
> John Santos
> Evans Griffiths & Hart, Inc.
> 781-861-0670 ext 539
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>




From nitro at dr-code.org  Fri May 28 14:44:34 2010
From: nitro at dr-code.org (Nitro)
Date: Fri, 28 May 2010 20:44:34 +0200
Subject: [Twisted-Python] Shared resource manioulation example
In-Reply-To: <20100528143439.903440cxu8o55qyo@216.129.205.5>
References: <1100528124424.50310N-100000@Ives.egh.com>
	<20100528143439.903440cxu8o55qyo@216.129.205.5>
Message-ID: <op.vdfickypz3pzfc@nitrogenycs3>

Am 28.05.2010, 20:34 Uhr, schrieb <vitaly at synapticvision.com>:

> hi,
>
> Callbacks serialization is clear to me.
>
> I'll try to rephrase the question: two requests are incoming for  
> reactor()
> to handle. Each request has its own chain of callbacks.
> At some point one of the requests need to update the same
> global data structure, and another request need to delete from the same
> global data structure.
> So theoretically, correct me if I wrong, will be a data collision.
> If it is, than how can I prevent it? Example please.

It will go like this:

reactor loop:

1) receive Event A
    - fire deferred callback
    - deferred callback does data[key] = value
2) receive Event B
     - fire deferred callback
     - del data[key]

So one event is processed after another. Determining if it's a data  
collision is up to you. E.g. you could use something like a revision  
number. Each time you change the dictionary, increase it by one. Then if  
you try to change the dictionary and the client gave a different revision  
id then the last one, you know there is a collision.
What you do sounds very much like database transactions. Those are not  
easy to do. One example is the ZODB which can do what you want. For  
example via BTrees. But I guess there are more lightweight systems which  
do what you want, too. It all depends where you want to go with your app.  
That's up to you though and not really a question in regards to twisted or  
networking.

-Matthias


From mgwilliams at gmail.com  Fri May 28 14:49:00 2010
From: mgwilliams at gmail.com (Matthew Williams)
Date: Fri, 28 May 2010 14:49:00 -0400
Subject: [Twisted-Python] Question
In-Reply-To: <20100528143439.903440cxu8o55qyo@216.129.205.5>
References: <1100528124424.50310N-100000@Ives.egh.com>
	<20100528143439.903440cxu8o55qyo@216.129.205.5>
Message-ID: <5CBFBB49-E90F-4FAE-8D9C-DF0C6B9BA655@gmail.com>

Is it acceptable to post job openings to this list?


From vitaly at synapticvision.com  Fri May 28 15:10:19 2010
From: vitaly at synapticvision.com (vitaly at synapticvision.com)
Date: Fri, 28 May 2010 15:10:19 -0400
Subject: [Twisted-Python] Shared resource manioulation example
In-Reply-To: <op.vdfickypz3pzfc@nitrogenycs3>
References: <1100528124424.50310N-100000@Ives.egh.com>
	<20100528143439.903440cxu8o55qyo@216.129.205.5>
	<op.vdfickypz3pzfc@nitrogenycs3>
Message-ID: <20100528151019.150894wcx4e6tvz0@216.129.205.5>


Of course its up to me to determine if it's a data collision or not,
but I was thinking may be Twisted can provide me with some already  
existing mechanism of its own. After all its already a pretty massive  
and complicated framework with tons of capabilities ...

But I'd like to get back to the point of the question: if at some  
point EventA callbacks and EventB callbacks need to work on the same  
global variable, than what would be a Twisted way (if exist) to  
prevent data collision ?

Thank you.

Quoting Nitro <nitro at dr-code.org>:

> Am 28.05.2010, 20:34 Uhr, schrieb <vitaly at synapticvision.com>:
>
>> hi,
>>
>> Callbacks serialization is clear to me.
>>
>> I'll try to rephrase the question: two requests are incoming for
>> reactor()
>> to handle. Each request has its own chain of callbacks.
>> At some point one of the requests need to update the same
>> global data structure, and another request need to delete from the same
>> global data structure.
>> So theoretically, correct me if I wrong, will be a data collision.
>> If it is, than how can I prevent it? Example please.
>
> It will go like this:
>
> reactor loop:
>
> 1) receive Event A
>     - fire deferred callback
>     - deferred callback does data[key] = value
> 2) receive Event B
>      - fire deferred callback
>      - del data[key]
>
> So one event is processed after another. Determining if it's a data
> collision is up to you. E.g. you could use something like a revision
> number. Each time you change the dictionary, increase it by one. Then if
> you try to change the dictionary and the client gave a different revision
> id then the last one, you know there is a collision.
> What you do sounds very much like database transactions. Those are not
> easy to do. One example is the ZODB which can do what you want. For
> example via BTrees. But I guess there are more lightweight systems which
> do what you want, too. It all depends where you want to go with your app.
> That's up to you though and not really a question in regards to twisted or
> networking.
>
> -Matthias
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>




From itamar at itamarst.org  Fri May 28 15:14:06 2010
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Fri, 28 May 2010 15:14:06 -0400 (EDT)
Subject: [Twisted-Python] Question
In-Reply-To: <5CBFBB49-E90F-4FAE-8D9C-DF0C6B9BA655@gmail.com>
References: <1100528124424.50310N-100000@Ives.egh.com>
	<20100528143439.903440cxu8o55qyo@216.129.205.5>
	<5CBFBB49-E90F-4FAE-8D9C-DF0C6B9BA655@gmail.com>
Message-ID: <11210.63.107.91.99.1275074046.squirrel@webmail.zoteca.com>

> Is it acceptable to post job openings to this list?

Yes, as long as they're Twisted-related.



From mgwilliams at gmail.com  Fri May 28 15:23:29 2010
From: mgwilliams at gmail.com (Matthew Williams)
Date: Fri, 28 May 2010 14:23:29 -0500
Subject: [Twisted-Python] Job Opening - Telecommute or Relocation Possible -
	New Jersey
In-Reply-To: <11210.63.107.91.99.1275074046.squirrel@webmail.zoteca.com>
References: <1100528124424.50310N-100000@Ives.egh.com>
	<20100528143439.903440cxu8o55qyo@216.129.205.5>
	<5CBFBB49-E90F-4FAE-8D9C-DF0C6B9BA655@gmail.com>
	<11210.63.107.91.99.1275074046.squirrel@webmail.zoteca.com>
Message-ID: <518E5A50-F2E8-4E7F-B885-2CAA217DAEF2@gmail.com>

TelTech Systems is hiring!

We are looking for candidates with a strong background in network  
programming using Twisted. Telecommunications experience (particularly  
VoIP) is also important. We use SER+SEMS for the most part.

Pluses include knowledge of PHP, JavaScript, JQuery, and other front- 
end technologies.

To learn more about our company and products, visit teltechcorp.com, trapcall.com 
, and spoofcard.com.

This is a full-time position, but contractors with the right skill set  
may be considered.

Please feel free to post to the list or reply to me personally with  
any questions.

Matthew Williams
TelTech Systems Inc.


From kra at monkey.org  Fri May 28 15:38:29 2010
From: kra at monkey.org (Karl Anderson)
Date: Fri, 28 May 2010 12:38:29 -0700
Subject: [Twisted-Python] Shared resource manioulation example
In-Reply-To: <20100528151019.150894wcx4e6tvz0@216.129.205.5>
References: <1100528124424.50310N-100000@Ives.egh.com>
	<20100528143439.903440cxu8o55qyo@216.129.205.5>
	<op.vdfickypz3pzfc@nitrogenycs3>
	<20100528151019.150894wcx4e6tvz0@216.129.205.5>
Message-ID: <AANLkTikTkWSP5wYm3aZogZNhC4f03O-wYOLcb9hdlR1w@mail.gmail.com>

On Fri, May 28, 2010 at 12:10 PM,  <vitaly at synapticvision.com> wrote:
>
> Of course its up to me to determine if it's a data collision or not,
> but I was thinking may be Twisted can provide me with some already
> existing mechanism of its own. After all its already a pretty massive
> and complicated framework with tons of capabilities ...
>
> But I'd like to get back to the point of the question: if at some
> point EventA callbacks and EventB callbacks need to work on the same
> global variable, than what would be a Twisted way (if exist) to
> prevent data collision ?

In the way that you have described it, that's a question for your
code.  In the general case, you don't know what order callbacks on two
chains will be called in.

The advantage of async is that you can use a standard Python type as a
mutex, and relinquish control if it's not ready.  Set a variable when
one chain is working, and if another chain encounters that, have it
try later by creating and retuning a new Deferred with its work on
that callback, or with reactor.callLater().


From exarkun at twistedmatrix.com  Sun May 30 00:05:39 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 30 May 2010 04:05:39 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1275192339.84.610249628@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100530/c9db9963/attachment.htm 

From glyph at twistedmatrix.com  Sun May 30 17:28:05 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 30 May 2010 17:28:05 -0400
Subject: [Twisted-Python] Reminder: Twisted 10.1 scheduled for early June
In-Reply-To: <AANLkTikg-mJ7p865ALUL_-cTvEC8Spe57N5p7agczzcq@mail.gmail.com>
References: <AANLkTikg-mJ7p865ALUL_-cTvEC8Spe57N5p7agczzcq@mail.gmail.com>
Message-ID: <F02D0944-623D-4FBE-878E-F427131EDC0A@twistedmatrix.com>

On May 26, 2010, at 4:19 AM, Jonathan Lange wrote:

> Hello all,
> 
> I and my lovely assistant Glyph intend to cut a release of Twisted
> 10.1 on the 5th and 6th of June. That's in eleven days.

Yes.

Please mark the date, everyone: your fate is sealed.  Only 5 days remain.

> If you would like to help us do that, please fix one of:

While everyone should be fixated on fixing tickets in Twisted as often as possible, all the time, I do want to clarify that these bugs might not be the release-blockers they appear to be...

> http://twistedmatrix.com/trac/ticket/3998

While this is a regression, it *was* present in 10.0 and therefore won't be a regression from 10.0->10.1.  I think we should fix it, but if necessary, we should do both a 10.0.1 and a 10.1.1 maintenance release to fix it.

> http://twistedmatrix.com/trac/ticket/4345

This is currently open to track the work of creating a 10.0.1 maintenance release: the bug is already fixed in trunk, which will become 10.1.  Are we planning to do 10.0.1 concurrently with 10.1?  I was assuming that would be done later; if it was concurrent with anything, I was assuming it would be concurrent with 10.1.1.

> http://twistedmatrix.com/trac/ticket/4320

While this is "just" a documentation ticket, I would actually prefer that anyone with free time turn their gaze here first.  Deferred cancellation is a big deal and needs to be documented properly.  I'm personally more likely to argue for delaying (albeit not blocking) the release for this than anything else.

> Or review tickets: http://twistedmatrix.com/trac/report/15


Yes, please.  I also plan to put <http://twistedmatrix.com/trac/ticket/1442> back into review either today or tomorrow, and I would very much appreciate a fearless reviewer to attack that once it's done.  The queue is starting to get pretty deep; and there are features which may be *already done*, even sexy new features like "HTML5" WebSocket protocol support, but won't get into Twisted 10.1 because they're stuck in the review queue.  Do you want that to be *your* fault?  Of course not!  So review some tickets this week!



From gabriele.lanaro at gmail.com  Mon May 31 05:01:07 2010
From: gabriele.lanaro at gmail.com (Gabriele Lanaro)
Date: Mon, 31 May 2010 11:01:07 +0200
Subject: [Twisted-Python] Sending large files over network with
	perspective broker
In-Reply-To: <20100524200659.1902.414257654.divmod.xquotient.8@localhost.localdomain>
References: <AANLkTil5QrvNyr2t20UbOVWqr2UkgcfOD9jGZtDikkDj@mail.gmail.com>
	<m2632fjr17.fsf@valheru.db3l.homeip.net>
	<AANLkTinGjNcQyorbzo1r7bObO7Gmu9VpqKsSh-trov1Q@mail.gmail.com>
	<AANLkTimUckRnF7hvJT3z1k128oNcLxoyVeYMz56k6w71@mail.gmail.com>
	<AANLkTil_ie8STx5Itqq3dWNoCq4lHXnbwDyOLu1iBkft@mail.gmail.com>
	<20100523163044.1749.1340666766.divmod.xquotient.0@localhost.localdomain>
	<AANLkTikURkhafcdK0oKdsyeVoYn1lwp1u5MTAbwHFONi@mail.gmail.com>
	<788800C0-70A6-4866-A1A0-503250DD4F21@twistedmatrix.com>
	<AANLkTinQVra0QFlyIX1Gz7oMYJxTCBkOcnBECqzqy81H@mail.gmail.com>
	<20100524200659.1902.414257654.divmod.xquotient.8@localhost.localdomain>
Message-ID: <AANLkTikP-XATIwemk4LfXnd5WEzlwgaT-5IA9RFNwcdg@mail.gmail.com>

I've this problem also with consumer/producer over a LineReceiver protocol,
should I submit a bug report?

2010/5/24 <exarkun at twistedmatrix.com>

> On 08:39 am, gabriele.lanaro at gmail.com wrote:
> >Thank you very much for your explanation! Now I've understood what's
> >the
> >problem in iterate().
> >
> >On these lines I've prepared a this little test case (in attach):
> >
> >Test 1
> >
> >$ python runner.py
> >click on the button
> >minimize/unminimize window to force a widget redraw, the window should
> >be
> >blank.
> >you can click another time on the button, the event is catched but no
> >"button animation" is performed
> >
> >Test2
> >
> >$ python runner.py
> >open another console
> >$ python runner_other_process.py
> >click on the button of runner_other_process, this connects itself to
> >the
> >server in the first process
> >each window should redraw correctly
>
> This may demonstrate a bug in gtk2reactor.  It seems to be servicing
> network events to the exclusion of GUI events, which it isn't supposed
> to do.
>
> I don't see any obvious reason for this.  Unfortunately glib2 (or
> pygtk2, perhaps) is ultimately in charge of the ordering/priority of
> these event handlers.  gtk2reactor is just a thin layer on top of the
> glib2-supplied I/O notification APIs.  But perhaps there's a way we
> could be invoking these APIs differently so that the GUI gets more of a
> chance to run.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100531/7c7c6c21/attachment.htm 

From exarkun at twistedmatrix.com  Mon May 31 09:20:34 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 31 May 2010 13:20:34 -0000
Subject: [Twisted-Python] Sending large files over network
	with	perspective broker
In-Reply-To: <AANLkTikP-XATIwemk4LfXnd5WEzlwgaT-5IA9RFNwcdg@mail.gmail.com>
References: <AANLkTil5QrvNyr2t20UbOVWqr2UkgcfOD9jGZtDikkDj@mail.gmail.com>
	<m2632fjr17.fsf@valheru.db3l.homeip.net>
	<AANLkTinGjNcQyorbzo1r7bObO7Gmu9VpqKsSh-trov1Q@mail.gmail.com>
	<AANLkTimUckRnF7hvJT3z1k128oNcLxoyVeYMz56k6w71@mail.gmail.com>
	<AANLkTil_ie8STx5Itqq3dWNoCq4lHXnbwDyOLu1iBkft@mail.gmail.com>
	<20100523163044.1749.1340666766.divmod.xquotient.0@localhost.localdomain>
	<AANLkTikURkhafcdK0oKdsyeVoYn1lwp1u5MTAbwHFONi@mail.gmail.com>
	<788800C0-70A6-4866-A1A0-503250DD4F21@twistedmatrix.com>
	<AANLkTinQVra0QFlyIX1Gz7oMYJxTCBkOcnBECqzqy81H@mail.gmail.com>
	<20100524200659.1902.414257654.divmod.xquotient.8@localhost.localdomain>
	<AANLkTikP-XATIwemk4LfXnd5WEzlwgaT-5IA9RFNwcdg@mail.gmail.com>
Message-ID: <20100531132034.1864.866270655.divmod.xquotient.8@localhost.localdomain>

On 09:01 am, gabriele.lanaro at gmail.com wrote:
>I've this problem also with consumer/producer over a LineReceiver 
>protocol,
>should I submit a bug report?

Please.

Jean-Paul


From jaroslaw.fedewicz at gmail.com  Mon May 31 09:48:46 2010
From: jaroslaw.fedewicz at gmail.com (=?utf-8?Q?Jaros=C5=82aw_Fedewicz?=)
Date: Mon, 31 May 2010 16:48:46 +0300
Subject: [Twisted-Python] PB and unstable network
In-Reply-To: <AANLkTinGm_WlBSnT-FEbVXV3MpXk_T3d-NRUrzGvxN0i@mail.gmail.com>
References: <AANLkTilMJwEDDbRzyeZdjIDZ6PGlj6x5FHq4c-QovDXY@mail.gmail.com>
	<1D9536C6-75DE-4934-982B-3B0485D526F0@twistedmatrix.com>
	<AANLkTikkt_ZBrYcXuU5nlH5WsP_CN-yZz9zFh4YYCOUX@mail.gmail.com>
	<AANLkTim4Qngekk1D1WTNTi_XLVQPCb6CCs8WIf6BTzdO@mail.gmail.com>
	<AANLkTinGm_WlBSnT-FEbVXV3MpXk_T3d-NRUrzGvxN0i@mail.gmail.com>
Message-ID: <73D51060-D957-48E6-ADBA-8BF20270A623@gmail.com>


On 27 ????. 2010, at 12:45, Viktor Klimov wrote:

> You mean a packet message used in the TCP? Or offer to implement ACK to PB?
> 

The latter one. An application-level ack. You only accept a transaction when you have ?acked? to your peer that you have the full data payload, and after it acks your ack so that you know your peer won't re-send the same thing over again.

Sounds complicated, but at least your peers can both be aware of each others' intentions.

> Maybe someone will point to the literature on network programming in
> unstable networks?

I don't see much difference between the two, except that on an unstable link, you keep trying harder.

From odie5533 at gmail.com  Mon May 31 23:38:39 2010
From: odie5533 at gmail.com (David Bern)
Date: Mon, 31 May 2010 22:38:39 -0500
Subject: [Twisted-Python] RDT/RTSP Library for Twisted
Message-ID: <AANLkTimXdxpkl5je2xDM6j0HxzArNjrF9STdbwkyeFWK@mail.gmail.com>

I wrote a set of Twisted libraries for RDT and RTSP streaming, along
with handlers for SDPP, ASMRP, and RMFF. I thought I'd announce it
here since they are most useful to other developers. I've released
them under the GNU GPL but I'd be willing to release them under a
different license if requested.

Link to blog post:
http://odie5533.com/twisted-python-rdt-rtsp-library-and-stream-downloader-346
Link to library:
http://odie5533.com/programs/RDT-RTSP/Twisted%20RDT-RTSP%20Library%202010-05-31.zip

-- 
David Bern
http://odie5533.com/


From exarkun at twistedmatrix.com  Sat May  1 22:05:20 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 02 May 2010 04:05:20 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1272773120.02.1547234397@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100502/694c116d/attachment-0001.html>

From jml at mumak.net  Mon May  3 06:18:42 2010
From: jml at mumak.net (Jonathan Lange)
Date: Mon, 3 May 2010 13:18:42 +0100
Subject: [Twisted-Python] Release again in June?
Message-ID: <l2pd06a5cd31005030518z572fac09rc1f1ec26b2aaac98@mail.gmail.com>

Hello everyone,

Some of you may recall that the last Twisted release, Twisted 10.0.0
took place in early March of this year. It was my intent then to
release 10.1.0 in early June, thus moving us toward a regular release
cycle.

I am still keen to do this.

Does anyone have any thoughts, objections or recommendations?

Thanks,
jml



From gabriel.rossetti at arimaz.com  Mon May  3 07:46:35 2010
From: gabriel.rossetti at arimaz.com (Gabriel Rossetti)
Date: Mon, 03 May 2010 15:46:35 +0200
Subject: [Twisted-Python] exception not being trapped with Failure.trap
Message-ID: <4BDED3BB.70908@arimaz.com>

Hello everyone,

I'm getting something strange:

f.trap(MyException) raises MyException and f.value == MyException 
evaluates to True as expected, so why isn't it being trapped?

Thanks, Gabriel





From gxti at partiallystapled.com  Mon May  3 07:59:45 2010
From: gxti at partiallystapled.com (Michael Tharp)
Date: Mon, 03 May 2010 09:59:45 -0400
Subject: [Twisted-Python] exception not being trapped with Failure.trap
In-Reply-To: <4BDED3BB.70908@arimaz.com>
References: <4BDED3BB.70908@arimaz.com>
Message-ID: <4BDED6D1.5010603@partiallystapled.com>

On 05/03/2010 09:46 AM, Gabriel Rossetti wrote:
> f.trap(MyException) raises MyException and f.value == MyException
> evaluates to True as expected, so why isn't it being trapped?

f.value should be an instance of MyException, not the class itself. 
Perhaps you are doing something like Failure(MyException) when you 
should be doing Failure(MyException()).

> Thanks, Gabriel

-- m. tharp



From gabriel.rossetti at arimaz.com  Mon May  3 09:37:29 2010
From: gabriel.rossetti at arimaz.com (Gabriel Rossetti)
Date: Mon, 03 May 2010 17:37:29 +0200
Subject: [Twisted-Python] exception not being trapped with Failure.trap
In-Reply-To: <4BDED6D1.5010603@partiallystapled.com>
References: <4BDED3BB.70908@arimaz.com> <4BDED6D1.5010603@partiallystapled.com>
Message-ID: <4BDEEDB9.70400@arimaz.com>

Michael Tharp wrote:
> On 05/03/2010 09:46 AM, Gabriel Rossetti wrote:
>> f.trap(MyException) raises MyException and f.value == MyException
>> evaluates to True as expected, so why isn't it being trapped?
>
> f.value should be an instance of MyException, not the class itself. 
> Perhaps you are doing something like Failure(MyException) when you 
> should be doing Failure(MyException()).
ah yes, silly me... thanks
>
>> Thanks, Gabriel
>
> -- m. tharp



From exarkun at twistedmatrix.com  Mon May  3 09:49:30 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 03 May 2010 15:49:30 -0000
Subject: [Twisted-Python] Release again in June?
In-Reply-To: <l2pd06a5cd31005030518z572fac09rc1f1ec26b2aaac98@mail.gmail.com>
References: <l2pd06a5cd31005030518z572fac09rc1f1ec26b2aaac98@mail.gmail.com>
Message-ID: <20100503154930.1627.1185606434.divmod.xquotient.3@localhost.localdomain>

On 12:18 pm, jml at mumak.net wrote:
>Hello everyone,
>
>Some of you may recall that the last Twisted release, Twisted 10.0.0
>took place in early March of this year. It was my intent then to
>release 10.1.0 in early June, thus moving us toward a regular release
>cycle.
>
>I am still keen to do this.
>
>Does anyone have any thoughts, objections or recommendations?

This sounds great.

Are there any tasks that need to be accomplished before we can do 
another release?

Jean-Paul



From jml at mumak.net  Mon May  3 10:25:25 2010
From: jml at mumak.net (Jonathan Lange)
Date: Mon, 3 May 2010 17:25:25 +0100
Subject: [Twisted-Python] Release again in June?
In-Reply-To: <20100503154930.1627.1185606434.divmod.xquotient.3@localhost.localdomain>
References: <l2pd06a5cd31005030518z572fac09rc1f1ec26b2aaac98@mail.gmail.com>
	<20100503154930.1627.1185606434.divmod.xquotient.3@localhost.localdomain>
Message-ID: <h2hd06a5cd31005030925z8b65f5c4pa5ff06da33908b6d@mail.gmail.com>

On Mon, May 3, 2010 at 4:49 PM,  <exarkun at twistedmatrix.com> wrote:
> On 12:18 pm, jml at mumak.net wrote:
>>Hello everyone,
>>
>>Some of you may recall that the last Twisted release, Twisted 10.0.0
>>took place in early March of this year. It was my intent then to
>>release 10.1.0 in early June, thus moving us toward a regular release
>>cycle.
>>
>>I am still keen to do this.
>>
>>Does anyone have any thoughts, objections or recommendations?
>
> This sounds great.
>
> Are there any tasks that need to be accomplished before we can do
> another release?
>

Working from http://twistedmatrix.com/trac/wiki/ReleaseProcess...

There are two regressions that must be fixed:
  * http://twistedmatrix.com/trac/ticket/3998 (Names module DNS
getHostByName error on certain sites)
  * http://twistedmatrix.com/trac/ticket/4345 (The sid of
ListenAuthenticator is not a unicode object.)

(see http://twistedmatrix.com/trac/query?status=new&status=assigned&status=reopened&type=regression&order=priority)

We need to make a decision about whether we'll issue a 10.0.1 to fix
these regressions.

There's a ticket that would be very nice to have for 10.1:
http://twistedmatrix.com/trac/ticket/4320 (Deferred cancellation
documentation)

The process for updating the website documentation is still poorly
understood, I think. The instructions on ReleaseProcess have gaps and
might also have bugs. Ideally, before the release we should make these
instructions clear and correct. Again, not necessary, since we did
muddle through the last time.

I guess for my own sanity, it would be nice to have as many
"regular-releases" tickets fixed as possible, see
http://twistedmatrix.com/trac/milestone/regular-releases. This isn't
necessary though.

I also feel I should say something about deprecated stuff. Not sure what though.

jml



From ddwiggins at advpubtech.com  Mon May  3 18:32:15 2010
From: ddwiggins at advpubtech.com (Don Dwiggins)
Date: Mon, 03 May 2010 17:32:15 -0700
Subject: [Twisted-Python] win32com client in a twisted thread
Message-ID: <hrnpug$4i2$1@dough.gmane.org>

I'm running a Windows service with Twisted (xmlrpc), and I've run into 
an odd case.

In a recently implemented method, I create a COM object with 
win32com.client.Dispatch (using a COM DLL that's part of the overall 
application) and make a couple of calls on it, getting a return value. 
This works well, except that the COM object calls a web service, which 
can take a few seconds, so I wanted to defer it.

When I isolate it into a function, and call that with deferToThread, the 
thread appears to die.  I tried putting the Dispatch call in the 
mainline, then passing it to the function -- this kills Python (not too 
surprising really).

I'm also using dbapi, so I tried it using runInteraction, with no better 
luck.

For what it's worth, here's the code:
>         command = Dispatch('APTAuthorize.clsAuthorizeBatch')
>         model = command.SetupFromConnParms(db['DSN'], db['UserName'], db['Password'])
>         # The returned value is a tuple: the model followed by the params
>         model = model[0]
>         model.PaymentAdjustment = "P"
>         model.BatchId = rsltDict['lPaymentBatchId']
>         model.ShowProgress = True
>         model.AuthorizationType = "CCD"
>         command.Execute(SecurityCode)

Putting logging statements in, I found that it died during the first 
call to "command".  (With no error message or other indication.)

Any thoughts or useful information appreciated,

-- 
Don Dwiggins
Advanced Publishing Technology




From itamar at itamarst.org  Mon May  3 18:54:34 2010
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Mon, 03 May 2010 20:54:34 -0400
Subject: [Twisted-Python] win32com client in a twisted thread
In-Reply-To: <hrnpug$4i2$1@dough.gmane.org>
References: <hrnpug$4i2$1@dough.gmane.org>
Message-ID: <1272934474.25839.5.camel@pintsize>

On Mon, 2010-05-03 at 17:32 -0700, Don Dwiggins wrote:
> I'm running a Windows service with Twisted (xmlrpc), and I've run into 
> an odd case.
> 
> In a recently implemented method, I create a COM object with 
> win32com.client.Dispatch (using a COM DLL that's part of the overall 
> application) and make a couple of calls on it, getting a return value. 
> This works well, except that the COM object calls a web service, which 
> can take a few seconds, so I wanted to defer it.
> 
> When I isolate it into a function, and call that with deferToThread, the 
> thread appears to die.  I tried putting the Dispatch call in the 
> mainline, then passing it to the function -- this kills Python (not too 
> surprising really).


As a test, you should try to make a minimal reproducing example without
Twisted (e.g. just launching a new thread instead of using thread pool).

My guess is that this is something to do with COM's threading rules
(they're complex, apparently - the Python Win32 book has an appendix
discussing the issues), or perhaps a bug in win32com. But that's just a
guess, thus the need for a minimal example.




From andrew at bemusement.org  Mon May  3 19:06:12 2010
From: andrew at bemusement.org (Andrew Bennetts)
Date: Tue, 4 May 2010 11:06:12 +1000
Subject: [Twisted-Python] win32com client in a twisted thread
In-Reply-To: <hrnpug$4i2$1@dough.gmane.org>
References: <hrnpug$4i2$1@dough.gmane.org>
Message-ID: <20100504010612.GA30559@steerpike.home.puzzling.org>

Don Dwiggins wrote:
> I'm running a Windows service with Twisted (xmlrpc), and I've run into 
> an odd case.
> 
> In a recently implemented method, I create a COM object with 
> win32com.client.Dispatch (using a COM DLL that's part of the overall 
> application) and make a couple of calls on it, getting a return value. 
> This works well, except that the COM object calls a web service, which 
> can take a few seconds, so I wanted to defer it.
> 
> When I isolate it into a function, and call that with deferToThread, the 
> thread appears to die.  I tried putting the Dispatch call in the 
> mainline, then passing it to the function -- this kills Python (not too 
> surprising really).

My memory of this stuff is *very* hazy, but IIRC, if you want to use
win32com stuff from a non-main thread you need to call
pythoncom.CoInitialize() in that thread.

-Andrew.




From moxie at thoughtcrime.org  Tue May  4 07:48:50 2010
From: moxie at thoughtcrime.org (Moxie Marlinspike)
Date: Tue, 04 May 2010 09:48:50 -0400
Subject: [Twisted-Python] Reactor Spinning?
Message-ID: <4BE025C2.5010205@thoughtcrime.org>


Hey Twisted folks,

I'm using the twisted.web framework for a high performance HTTP proxy
server that very closely resembles the HTTP proxy server example that
comes with the twisted package.

Under heavy load, I occasionally run into a problem where the reactor
appears to start spinning on an "empty" write.  An strace of the process
reveals these system calls:

epoll_wait(3, {{EPOLLOUT, {u32=81, u64=13194703840475086929}}}, 269, 8) = 1
write(81, "", 0)                        = 0
gettimeofday({1272980323, 567613}, NULL) = 0
gettimeofday({1272980323, 567696}, NULL) = 0
epoll_wait(3, {{EPOLLOUT, {u32=81, u64=13194703840475086929}}}, 269, 8) = 1
write(81, "", 0)                        = 0
gettimeofday({1272980323, 567988}, NULL) = 0
gettimeofday({1272980323, 568071}, NULL) = 0
epoll_wait(3, {{EPOLLOUT, {u32=81, u64=13194703840475086929}}}, 269, 7) = 1
write(81, "", 0)                        = 0
gettimeofday({1272980323, 568501}, NULL) = 0
gettimeofday({1272980323, 568613}, NULL) = 0
epoll_wait(3, {{EPOLLOUT, {u32=81, u64=13194703840475086929}}}, 269, 7) = 1
write(81, "", 0)                        = 0
gettimeofday({1272980323, 568978}, NULL) = 0
gettimeofday({1272980323, 569084}, NULL) = 0
epoll_wait(3, {{EPOLLOUT, {u32=81, u64=13194703840475086929}}}, 269, 6) = 1
write(81, "", 0)                        = 0

...it seems to be waiting for write availability on a FD, trying to
write an empty buffer, seeing that it wrote zero bytes, and so waiting
for availability again.

I've confirmed that when this occurs, whatever FD it is spinning on does
correspond with a network socket connected to the proxy.  I've seen this
with both Twisted 8.2 and 9.0 running on Linux using both the epoll and
select reactors.

If anyone has any thoughts about this problem or has seen it before, I'd
appreciate any insight that anyone might have.

Thanks,

- moxie

-- 
http://www.thoughtcrime.org



From wthie at thiengineering.ch  Tue May  4 13:06:06 2010
From: wthie at thiengineering.ch (Werner Thie)
Date: Tue, 04 May 2010 21:06:06 +0200
Subject: [Twisted-Python] Reactor Spinning?
In-Reply-To: <4BE025C2.5010205@thoughtcrime.org>
References: <4BE025C2.5010205@thoughtcrime.org>
Message-ID: <4BE0701E.50801@thiengineering.ch>

Does it spin forever or does it clear up after some time?

I have occasional 'hickups' with heavy loads with responses taking 
several ten seconds for no apparent reason, the server then working 
again like nothing happened.

Werner

Moxie Marlinspike wrote:
> Hey Twisted folks,
> 
> I'm using the twisted.web framework for a high performance HTTP proxy
> server that very closely resembles the HTTP proxy server example that
> comes with the twisted package.
> 
> Under heavy load, I occasionally run into a problem where the reactor
> appears to start spinning on an "empty" write.  An strace of the process
> reveals these system calls:
> 
> epoll_wait(3, {{EPOLLOUT, {u32=81, u64=13194703840475086929}}}, 269, 8) = 1
> write(81, "", 0)                        = 0
> gettimeofday({1272980323, 567613}, NULL) = 0
> gettimeofday({1272980323, 567696}, NULL) = 0
> epoll_wait(3, {{EPOLLOUT, {u32=81, u64=13194703840475086929}}}, 269, 8) = 1
> write(81, "", 0)                        = 0
> gettimeofday({1272980323, 567988}, NULL) = 0
> gettimeofday({1272980323, 568071}, NULL) = 0
> epoll_wait(3, {{EPOLLOUT, {u32=81, u64=13194703840475086929}}}, 269, 7) = 1
> write(81, "", 0)                        = 0
> gettimeofday({1272980323, 568501}, NULL) = 0
> gettimeofday({1272980323, 568613}, NULL) = 0
> epoll_wait(3, {{EPOLLOUT, {u32=81, u64=13194703840475086929}}}, 269, 7) = 1
> write(81, "", 0)                        = 0
> gettimeofday({1272980323, 568978}, NULL) = 0
> gettimeofday({1272980323, 569084}, NULL) = 0
> epoll_wait(3, {{EPOLLOUT, {u32=81, u64=13194703840475086929}}}, 269, 6) = 1
> write(81, "", 0)                        = 0
> 
> ...it seems to be waiting for write availability on a FD, trying to
> write an empty buffer, seeing that it wrote zero bytes, and so waiting
> for availability again.
> 
> I've confirmed that when this occurs, whatever FD it is spinning on does
> correspond with a network socket connected to the proxy.  I've seen this
> with both Twisted 8.2 and 9.0 running on Linux using both the epoll and
> select reactors.
> 
> If anyone has any thoughts about this problem or has seen it before, I'd
> appreciate any insight that anyone might have.
> 
> Thanks,
> 
> - moxie
> 




From moxie at thoughtcrime.org  Tue May  4 13:34:59 2010
From: moxie at thoughtcrime.org (Moxie Marlinspike)
Date: Tue, 04 May 2010 15:34:59 -0400
Subject: [Twisted-Python] Reactor Spinning?
In-Reply-To: <4BE0701E.50801@thiengineering.ch>
References: <4BE025C2.5010205@thoughtcrime.org>
	<4BE0701E.50801@thiengineering.ch>
Message-ID: <4BE076E3.2080703@thoughtcrime.org>


I've seen it clear up before, but it will normally spin for days.  This
state doesn't really impact performance at all (requests are still
snappy), but it is annoying how much CPU time it eats through before a
restart.

- moxie

-- 
http://www.thoughtcrime.org


Werner Thie wrote:
> Does it spin forever or does it clear up after some time?
> 
> I have occasional 'hickups' with heavy loads with responses taking 
> several ten seconds for no apparent reason, the server then working 
> again like nothing happened.
> 
> Werner
> 
> Moxie Marlinspike wrote:
>> Hey Twisted folks,
>>
>> I'm using the twisted.web framework for a high performance HTTP proxy
>> server that very closely resembles the HTTP proxy server example that
>> comes with the twisted package.
>>
>> Under heavy load, I occasionally run into a problem where the reactor
>> appears to start spinning on an "empty" write.  An strace of the process
>> reveals these system calls:
>>
>> epoll_wait(3, {{EPOLLOUT, {u32=81, u64=13194703840475086929}}}, 269, 8) = 1
>> write(81, "", 0)                        = 0
>> gettimeofday({1272980323, 567613}, NULL) = 0
>> gettimeofday({1272980323, 567696}, NULL) = 0
>> epoll_wait(3, {{EPOLLOUT, {u32=81, u64=13194703840475086929}}}, 269, 8) = 1
>> write(81, "", 0)                        = 0
>> gettimeofday({1272980323, 567988}, NULL) = 0
>> gettimeofday({1272980323, 568071}, NULL) = 0
>> epoll_wait(3, {{EPOLLOUT, {u32=81, u64=13194703840475086929}}}, 269, 7) = 1
>> write(81, "", 0)                        = 0
>> gettimeofday({1272980323, 568501}, NULL) = 0
>> gettimeofday({1272980323, 568613}, NULL) = 0
>> epoll_wait(3, {{EPOLLOUT, {u32=81, u64=13194703840475086929}}}, 269, 7) = 1
>> write(81, "", 0)                        = 0
>> gettimeofday({1272980323, 568978}, NULL) = 0
>> gettimeofday({1272980323, 569084}, NULL) = 0
>> epoll_wait(3, {{EPOLLOUT, {u32=81, u64=13194703840475086929}}}, 269, 6) = 1
>> write(81, "", 0)                        = 0
>>
>> ...it seems to be waiting for write availability on a FD, trying to
>> write an empty buffer, seeing that it wrote zero bytes, and so waiting
>> for availability again.
>>
>> I've confirmed that when this occurs, whatever FD it is spinning on does
>> correspond with a network socket connected to the proxy.  I've seen this
>> with both Twisted 8.2 and 9.0 running on Linux using both the epoll and
>> select reactors.
>>
>> If anyone has any thoughts about this problem or has seen it before, I'd
>> appreciate any insight that anyone might have.
>>
>> Thanks,
>>
>> - moxie
>>
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 



From itamar at itamarst.org  Tue May  4 14:30:17 2010
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Tue, 4 May 2010 16:30:17 -0400 (EDT)
Subject: [Twisted-Python] Reactor Spinning?
In-Reply-To: <4BE025C2.5010205@thoughtcrime.org>
References: <4BE025C2.5010205@thoughtcrime.org>
Message-ID: <46539.63.107.91.99.1273005017.squirrel@webmail.zoteca.com>

>
> Hey Twisted folks,
>
> I'm using the twisted.web framework for a high performance HTTP proxy
> server that very closely resembles the HTTP proxy server example that
> comes with the twisted package.
>
> Under heavy load, I occasionally run into a problem where the reactor
> appears to start spinning on an "empty" write.  An strace of the process
> reveals these system calls:

Can you produce a minimal reproducing example of a program that has this
issue? I can imagine a code bug where you're calling
transport.resumeProducing() or startWriting() sometime when you shouldn't,
except the empty write() does look wrong... a minimal code sample would
help.




From exarkun at twistedmatrix.com  Tue May  4 15:42:40 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 04 May 2010 21:42:40 -0000
Subject: [Twisted-Python] Reactor Spinning?
In-Reply-To: <4BE025C2.5010205@thoughtcrime.org>
References: <4BE025C2.5010205@thoughtcrime.org>
Message-ID: <20100504214240.1642.1501163969.divmod.xquotient.9@localhost.localdomain>

On 01:48 pm, moxie at thoughtcrime.org wrote:
>
>Hey Twisted folks,
>
>I'm using the twisted.web framework for a high performance HTTP proxy
>server that very closely resembles the HTTP proxy server example that
>comes with the twisted package.
>
>Under heavy load, I occasionally run into a problem where the reactor
>appears to start spinning on an "empty" write.  An strace of the 
>process
>reveals these system calls:
>
>epoll_wait(3, {{EPOLLOUT, {u32=81, u64=13194703840475086929}}}, 269, 8) 
>= 1
>write(81, "", 0)                        = 0

It might be interesting to learn what's in the reactor that's associated 
with this file descriptor and what the state of its send buffer is. 
Some strategically placed log messages might help with that, or a 
manhole in the process that you can connect to when you notice the 
problem has started in order to poke around.

Jean-Paul



From ddwiggins at advpubtech.com  Tue May  4 18:45:43 2010
From: ddwiggins at advpubtech.com (Don Dwiggins)
Date: Tue, 04 May 2010 17:45:43 -0700
Subject: [Twisted-Python] win32com client in a twisted thread
In-Reply-To: <20100504010612.GA30559@steerpike.home.puzzling.org>
References: <hrnpug$4i2$1@dough.gmane.org>
	<20100504010612.GA30559@steerpike.home.puzzling.org>
Message-ID: <hrqf3o$j66$1@dough.gmane.org>

Andrew, Itamar,  thanks.  I've taken the hint to CoInitialize the 
thread.  That gets me a bit further, but there's still some strange 
stuff going on.  I'm going to have to put this on the back burner for a 
while in favor of higher priority stuff.

-- 
Don Dwiggins
Advanced Publishing Technology




From petshmidt at googlemail.com  Wed May  5 05:45:06 2010
From: petshmidt at googlemail.com (Pet)
Date: Wed, 5 May 2010 13:45:06 +0200
Subject: [Twisted-Python] print unicode
Message-ID: <k2ib460e9631005050445s91e092c4i1d89b8636e38c1ba@mail.gmail.com>

Hello!

I'm using Twisted 10.0 and as usually sometime print debug infos with
myunicodestr.encode('UTF-8') which are saved to logfile, but since
using twisted 10 I'm getting

UnicodeEncodeError: 'ascii' codec can't encode characters...

type(myunicodestr) returns <type 'unicode'>


What is the problem here?

Thanks!



From maarten at treewalker.org  Wed May  5 06:05:24 2010
From: maarten at treewalker.org (Maarten ter Huurne)
Date: Wed, 5 May 2010 14:05:24 +0200
Subject: [Twisted-Python] print unicode
In-Reply-To: <k2ib460e9631005050445s91e092c4i1d89b8636e38c1ba@mail.gmail.com>
References: <k2ib460e9631005050445s91e092c4i1d89b8636e38c1ba@mail.gmail.com>
Message-ID: <201005051405.25083.maarten@treewalker.org>

On Wednesday 05 May 2010, Pet wrote:

> I'm using Twisted 10.0 and as usually sometime print debug infos with
> myunicodestr.encode('UTF-8') which are saved to logfile, but since
> using twisted 10 I'm getting
> 
> UnicodeEncodeError: 'ascii' codec can't encode characters...

UTF-8 uses the full 8 bits of a byte, while ASCII only uses 7, so writing 
Unicode encoded as UTF-8 to an ASCII stream is not valid.

I think recent Python versions are more strict about what is written to 
stdout/stderr than older versions, it might not be related to Twisted 
itself. You can specify a different encoding for stdin/out/err by setting 
the PYTHONIOENCODING environment variable.

Bye,
		Maarten



From petshmidt at googlemail.com  Wed May  5 06:31:31 2010
From: petshmidt at googlemail.com (Pet)
Date: Wed, 5 May 2010 14:31:31 +0200
Subject: [Twisted-Python] print unicode
In-Reply-To: <201005051405.25083.maarten@treewalker.org>
References: <k2ib460e9631005050445s91e092c4i1d89b8636e38c1ba@mail.gmail.com> 
	<201005051405.25083.maarten@treewalker.org>
Message-ID: <j2mb460e9631005050531s6ad6c0eave0623bf1d08fb5ef@mail.gmail.com>

On Wed, May 5, 2010 at 2:05 PM, Maarten ter Huurne
<maarten at treewalker.org> wrote:
> On Wednesday 05 May 2010, Pet wrote:
>
>> I'm using Twisted 10.0 and as usually sometime print debug infos with
>> myunicodestr.encode('UTF-8') which are saved to logfile, but since
>> using twisted 10 I'm getting
>>
>> UnicodeEncodeError: 'ascii' codec can't encode characters...
>
> UTF-8 uses the full 8 bits of a byte, while ASCII only uses 7, so writing
> Unicode encoded as UTF-8 to an ASCII stream is not valid.
>
> I think recent Python versions are more strict about what is written to
> stdout/stderr than older versions, it might not be related to Twisted
> itself. You can specify a different encoding for stdin/out/err by setting
> the PYTHONIOENCODING environment variable.

Hi Maarten!

Thanks for help!
Unfortunately, my Python installation is 2.5.2 and PYTHONIOENCODING is
introduced in 2.6

Pet
>
> Bye,
>                Maarten
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From p.mayers at imperial.ac.uk  Wed May  5 06:47:38 2010
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 05 May 2010 13:47:38 +0100
Subject: [Twisted-Python] print unicode
In-Reply-To: <j2mb460e9631005050531s6ad6c0eave0623bf1d08fb5ef@mail.gmail.com>
References: <k2ib460e9631005050445s91e092c4i1d89b8636e38c1ba@mail.gmail.com>
	<201005051405.25083.maarten@treewalker.org>
	<j2mb460e9631005050531s6ad6c0eave0623bf1d08fb5ef@mail.gmail.com>
Message-ID: <4BE168EA.4040703@imperial.ac.uk>

On 05/05/10 13:31, Pet wrote:
> On Wed, May 5, 2010 at 2:05 PM, Maarten ter Huurne
> <maarten at treewalker.org>  wrote:
>> On Wednesday 05 May 2010, Pet wrote:
>>
>>> I'm using Twisted 10.0 and as usually sometime print debug infos with
>>> myunicodestr.encode('UTF-8') which are saved to logfile, but since
>>> using twisted 10 I'm getting
>>>
>>> UnicodeEncodeError: 'ascii' codec can't encode characters...
>>
>> UTF-8 uses the full 8 bits of a byte, while ASCII only uses 7, so writing
>> Unicode encoded as UTF-8 to an ASCII stream is not valid.
>>
>> I think recent Python versions are more strict about what is written to
>> stdout/stderr than older versions, it might not be related to Twisted
>> itself. You can specify a different encoding for stdin/out/err by setting
>> the PYTHONIOENCODING environment variable.
>
> Hi Maarten!
>
> Thanks for help!
> Unfortunately, my Python installation is 2.5.2 and PYTHONIOENCODING is
> introduced in 2.6

I think this is highly dependent on your OS environment. For example:

Python 2.4.3 (#1, Oct 23 2006, 14:19:47)
[GCC 4.1.1 20060525 (Red Hat 4.1.1-1)] o
Type "help", "copyright", "credits" or "
 >>> import sys
 >>> sys.getdefaultencoding()
'ascii'
 >>> print unichr(163)
£


[pjm3 at wildfire ~]$ echo $LANG
en_GB.UTF-8

...but:

LANG=C python
Python 2.4.3 (#1, Oct 23 2006, 14:19:47)
[GCC 4.1.1 20060525 (Red Hat 4.1.1-1)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
 >>> print unichr(163)
Traceback (most recent call last):
   File "<stdin>", line 1, in ?
UnicodeEncodeError: 'ascii' codec can't encode character u'\xa3' in 
position 0: ordinal not in range(128)

...i.e. here I can just print unicode characters, with nothing 
particularly special, provided my environment variables are set right.



From itamar at itamarst.org  Wed May  5 06:49:57 2010
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 05 May 2010 08:49:57 -0400
Subject: [Twisted-Python] print unicode
In-Reply-To: <k2ib460e9631005050445s91e092c4i1d89b8636e38c1ba@mail.gmail.com>
References: <k2ib460e9631005050445s91e092c4i1d89b8636e38c1ba@mail.gmail.com>
Message-ID: <1273063797.25839.10.camel@pintsize>

On Wed, 2010-05-05 at 13:45 +0200, Pet wrote:
> Hello!
> 
> I'm using Twisted 10.0 and as usually sometime print debug infos with
> myunicodestr.encode('UTF-8') which are saved to logfile, but since
> using twisted 10 I'm getting
> 
> UnicodeEncodeError: 'ascii' codec can't encode characters...
> 
> type(myunicodestr) returns <type 'unicode'>
> 
> 
> What is the problem here?

This works fine for me (Twisted trunk):

$ python2.5 -c "import sys; from twisted.python import log; \
log.startLogging(file('/tmp/log', 'w')); print \
u'\u1234'.encode('UTF-8')"
$ cat /tmp/log 
2010-05-05 08:48:40-0400 [-] Log opened.
2010-05-05 08:48:40-0400 [-] ሴ

Can you include a minimal reproducing example?




From dfarrell at mypublisher.com  Wed May  5 08:00:47 2010
From: dfarrell at mypublisher.com (Doug Farrell)
Date: Wed, 5 May 2010 10:00:47 -0400
Subject: [Twisted-Python] SQLAlchemy and Twisted
Message-ID: <318F79422ADC5041A93343721F84474D031FE1E4@exchange.mypublisher.local>

Hi all,

 

I've been doing some searching about how to get SQLAlchemy and Twisted
working together in a Twisted application. Though I've found a lot of
information, I haven't seen (or figured out) a good working solution or
definitive answer. The most promising one I've run across concerns
running the SQLAlchemy queries in a separate process (rather than a
separate thread) and communicating the queries between the Twisted
application in one process and the SQLAlchemy application in another.
Does anyone have any good pointers, suggestions, ideas, links to how I
might go about setting something like this up? Here's a couple questions
that come to mind:

 

1)      Would the SQLAlchemy process also be a Twisted application with
all the queries running as deferreds in the main thread, and blocking?

2)      How would the Twisted process communicate with the SQLAlchemy
process, using something like XMLRPC, calling methods to perform the
queries? Or would the XMLRPC methods convey something more generic like
SQL?

 

Thanks in advance for any help!

Doug

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100505/e6a5de36/attachment.html>

From petshmidt at googlemail.com  Wed May  5 08:10:47 2010
From: petshmidt at googlemail.com (Pet)
Date: Wed, 5 May 2010 16:10:47 +0200
Subject: [Twisted-Python] print unicode
In-Reply-To: <4BE168EA.4040703@imperial.ac.uk>
References: <k2ib460e9631005050445s91e092c4i1d89b8636e38c1ba@mail.gmail.com> 
	<201005051405.25083.maarten@treewalker.org>
	<j2mb460e9631005050531s6ad6c0eave0623bf1d08fb5ef@mail.gmail.com>
	<4BE168EA.4040703@imperial.ac.uk>
Message-ID: <u2xb460e9631005050710ice4ae645y106dcff7025b0748@mail.gmail.com>

On Wed, May 5, 2010 at 2:47 PM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
> On 05/05/10 13:31, Pet wrote:
>> On Wed, May 5, 2010 at 2:05 PM, Maarten ter Huurne
>> <maarten at treewalker.org>  wrote:
>>> On Wednesday 05 May 2010, Pet wrote:
>>>
>>>> I'm using Twisted 10.0 and as usually sometime print debug infos with
>>>> myunicodestr.encode('UTF-8') which are saved to logfile, but since
>>>> using twisted 10 I'm getting
>>>>
>>>> UnicodeEncodeError: 'ascii' codec can't encode characters...
>>>
>>> UTF-8 uses the full 8 bits of a byte, while ASCII only uses 7, so writing
>>> Unicode encoded as UTF-8 to an ASCII stream is not valid.
>>>
>>> I think recent Python versions are more strict about what is written to
>>> stdout/stderr than older versions, it might not be related to Twisted
>>> itself. You can specify a different encoding for stdin/out/err by setting
>>> the PYTHONIOENCODING environment variable.
>>
>> Hi Maarten!
>>
>> Thanks for help!
>> Unfortunately, my Python installation is 2.5.2 and PYTHONIOENCODING is
>> introduced in 2.6
>
> I think this is highly dependent on your OS environment. For example:
>
> Python 2.4.3 (#1, Oct 23 2006, 14:19:47)
> [GCC 4.1.1 20060525 (Red Hat 4.1.1-1)] o
> Type "help", "copyright", "credits" or "
>  >>> import sys
>  >>> sys.getdefaultencoding()
> 'ascii'
>  >>> print unichr(163)
> £

on python console it works for me, but not in application, if the
string to be printed is fetched from db which is utf-8

>
>
> [pjm3 at wildfire ~]$ echo $LANG
> en_GB.UTF-8
>
> ...but:
>
> LANG=C python
> Python 2.4.3 (#1, Oct 23 2006, 14:19:47)
> [GCC 4.1.1 20060525 (Red Hat 4.1.1-1)] on linux2
> Type "help", "copyright", "credits" or "license" for more information.
>  >>> print unichr(163)
> Traceback (most recent call last):
>   File "<stdin>", line 1, in ?
> UnicodeEncodeError: 'ascii' codec can't encode character u'\xa3' in
> position 0: ordinal not in range(128)
>
> ...i.e. here I can just print unicode characters, with nothing
> particularly special, provided my environment variables are set right.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From petshmidt at googlemail.com  Wed May  5 08:15:51 2010
From: petshmidt at googlemail.com (Pet)
Date: Wed, 5 May 2010 16:15:51 +0200
Subject: [Twisted-Python] print unicode
In-Reply-To: <1273063797.25839.10.camel@pintsize>
References: <k2ib460e9631005050445s91e092c4i1d89b8636e38c1ba@mail.gmail.com> 
	<1273063797.25839.10.camel@pintsize>
Message-ID: <q2yb460e9631005050715pa8b289e8p1dd91a61cc3e7818@mail.gmail.com>

On Wed, May 5, 2010 at 2:49 PM, Itamar Turner-Trauring
<itamar at itamarst.org> wrote:
> On Wed, 2010-05-05 at 13:45 +0200, Pet wrote:
>> Hello!
>>
>> I'm using Twisted 10.0 and as usually sometime print debug infos with
>> myunicodestr.encode('UTF-8') which are saved to logfile, but since
>> using twisted 10 I'm getting
>>
>> UnicodeEncodeError: 'ascii' codec can't encode characters...
>>
>> type(myunicodestr) returns <type 'unicode'>
>>
>>
>> What is the problem here?
>
> This works fine for me (Twisted trunk):
>
> $ python2.5 -c "import sys; from twisted.python import log; \
> log.startLogging(file('/tmp/log', 'w')); print \
> u'\u1234'.encode('UTF-8')"
> $ cat /tmp/log
> 2010-05-05 08:48:40-0400 [-] Log opened.
> 2010-05-05 08:48:40-0400 [-] ሴ
>
> Can you include a minimal reproducing example?

If I print as you do it works, but my string is fetched from database
and only then it fails

>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From moxie at thoughtcrime.org  Wed May  5 08:20:21 2010
From: moxie at thoughtcrime.org (Moxie Marlinspike)
Date: Wed, 05 May 2010 10:20:21 -0400
Subject: [Twisted-Python] Reactor Spinning?
In-Reply-To: <46539.63.107.91.99.1273005017.squirrel@webmail.zoteca.com>
References: <4BE025C2.5010205@thoughtcrime.org>
	<46539.63.107.91.99.1273005017.squirrel@webmail.zoteca.com>
Message-ID: <4BE17EA5.8000606@thoughtcrime.org>


Hey Itamar, the problem is that this only occurs under heavy load in a
production environment (of course!), so I don't really have any way of
testing a simplified version.

The code itself is fairly simple, however, and is almost identical to
the code that ships in twisted.web.proxy.

This is to say that I'm simply shuttling data between an HTTPClient
object and a Request object.  I never call transport.resumeProducing()
or startWriting() myself, and I only call transport.write() in exactly
one place (when sending POST data via HTTPClient).  The rest of the time
I'm writing to either the Request object (not its transport) when
communicating back to the clients, or availing myself of higher-level
methods like HTTPClient.sendHeader() when writing to the server side.

The code is available here:
http://www.googlesharing.net/server/googleshare-0.9.tar.gz

- moxie

-- 
http://www.thoughtcrime.org


Itamar Turner-Trauring wrote:

> Can you produce a minimal reproducing example of a program that has this
> issue? I can imagine a code bug where you're calling
> transport.resumeProducing() or startWriting() sometime when you shouldn't,
> except the empty write() does look wrong... a minimal code sample would
> help.



From moxie at thoughtcrime.org  Wed May  5 08:22:54 2010
From: moxie at thoughtcrime.org (Moxie Marlinspike)
Date: Wed, 05 May 2010 10:22:54 -0400
Subject: [Twisted-Python] Reactor Spinning?
In-Reply-To: <20100504214240.1642.1501163969.divmod.xquotient.9@localhost.localdomain>
References: <4BE025C2.5010205@thoughtcrime.org>
	<20100504214240.1642.1501163969.divmod.xquotient.9@localhost.localdomain>
Message-ID: <4BE17F3E.1060800@thoughtcrime.org>


I've confirmed that when spinning the FD corresponds with a client
connection.  What would you suggest logging that might provide some insight?

Given what I understand about manholes, the fact that this only occurs
in a production environment which must remain high performance means
that might not be an option for me.

- moxie

-- 
http://www.thoughtcrime.org


exarkun at twistedmatrix.com wrote:
> It might be interesting to learn what's in the reactor that's associated 
> with this file descriptor and what the state of its send buffer is. 
> Some strategically placed log messages might help with that, or a 
> manhole in the process that you can connect to when you notice the 
> problem has started in order to poke around.
> 
> Jean-Paul



From petshmidt at googlemail.com  Wed May  5 08:29:16 2010
From: petshmidt at googlemail.com (Pet)
Date: Wed, 5 May 2010 16:29:16 +0200
Subject: [Twisted-Python] print unicode
In-Reply-To: <q2yb460e9631005050715pa8b289e8p1dd91a61cc3e7818@mail.gmail.com>
References: <k2ib460e9631005050445s91e092c4i1d89b8636e38c1ba@mail.gmail.com> 
	<1273063797.25839.10.camel@pintsize>
	<q2yb460e9631005050715pa8b289e8p1dd91a61cc3e7818@mail.gmail.com>
Message-ID: <p2gb460e9631005050729g9dfb1838w5510369e80eeee43@mail.gmail.com>

On Wed, May 5, 2010 at 4:15 PM, Pet <petshmidt at googlemail.com> wrote:
> On Wed, May 5, 2010 at 2:49 PM, Itamar Turner-Trauring
> <itamar at itamarst.org> wrote:
>> On Wed, 2010-05-05 at 13:45 +0200, Pet wrote:
>>> Hello!
>>>
>>> I'm using Twisted 10.0 and as usually sometime print debug infos with
>>> myunicodestr.encode('UTF-8') which are saved to logfile, but since
>>> using twisted 10 I'm getting
>>>
>>> UnicodeEncodeError: 'ascii' codec can't encode characters...
>>>
>>> type(myunicodestr) returns <type 'unicode'>
>>>
>>>
>>> What is the problem here?
>>
>> This works fine for me (Twisted trunk):
>>
>> $ python2.5 -c "import sys; from twisted.python import log; \
>> log.startLogging(file('/tmp/log', 'w')); print \
>> u'\u1234'.encode('UTF-8')"
>> $ cat /tmp/log
>> 2010-05-05 08:48:40-0400 [-] Log opened.
>> 2010-05-05 08:48:40-0400 [-] ሴ
>>
>> Can you include a minimal reproducing example?
>
> If I print as you do it works, but my string is fetched from database
> and only then it fails

It's pretty weird. I've send  as parameter {'s': u'c\u0142a'} to
twisted xml-rpc server after it was restarted and it has printed
param['s'].encode('UTF-8') without errors. Immidiately after that I've
send the same request again and it failed to print it. I've restarted
the server again and at the first request it prints without errors,
all other requests raise exceptions. So it has nothing to do with
database.

>
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>



From itamar at itamarst.org  Wed May  5 08:33:53 2010
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 05 May 2010 10:33:53 -0400
Subject: [Twisted-Python] print unicode
In-Reply-To: <q2yb460e9631005050715pa8b289e8p1dd91a61cc3e7818@mail.gmail.com>
References: <k2ib460e9631005050445s91e092c4i1d89b8636e38c1ba@mail.gmail.com>
	<1273063797.25839.10.camel@pintsize>
	<q2yb460e9631005050715pa8b289e8p1dd91a61cc3e7818@mail.gmail.com>
Message-ID: <1273070033.25839.15.camel@pintsize>

On Wed, 2010-05-05 at 16:15 +0200, Pet wrote:

> If I print as you do it works, but my string is fetched from database
> and only then it fails

Strings coming out of the database are usually just strings. There's
nothing database (or Twisted) specific about them.




From petshmidt at googlemail.com  Wed May  5 08:47:16 2010
From: petshmidt at googlemail.com (Pet)
Date: Wed, 5 May 2010 16:47:16 +0200
Subject: [Twisted-Python] print unicode
In-Reply-To: <p2gb460e9631005050729g9dfb1838w5510369e80eeee43@mail.gmail.com>
References: <k2ib460e9631005050445s91e092c4i1d89b8636e38c1ba@mail.gmail.com> 
	<1273063797.25839.10.camel@pintsize>
	<q2yb460e9631005050715pa8b289e8p1dd91a61cc3e7818@mail.gmail.com>
	<p2gb460e9631005050729g9dfb1838w5510369e80eeee43@mail.gmail.com>
Message-ID: <t2qb460e9631005050747t5fe853c0v3b7b071f027dd43b@mail.gmail.com>

On Wed, May 5, 2010 at 4:29 PM, Pet <petshmidt at googlemail.com> wrote:
> On Wed, May 5, 2010 at 4:15 PM, Pet <petshmidt at googlemail.com> wrote:
>> On Wed, May 5, 2010 at 2:49 PM, Itamar Turner-Trauring
>> <itamar at itamarst.org> wrote:
>>> On Wed, 2010-05-05 at 13:45 +0200, Pet wrote:
>>>> Hello!
>>>>
>>>> I'm using Twisted 10.0 and as usually sometime print debug infos with
>>>> myunicodestr.encode('UTF-8') which are saved to logfile, but since
>>>> using twisted 10 I'm getting
>>>>
>>>> UnicodeEncodeError: 'ascii' codec can't encode characters...
>>>>
>>>> type(myunicodestr) returns <type 'unicode'>
>>>>
>>>>
>>>> What is the problem here?
>>>
>>> This works fine for me (Twisted trunk):
>>>
>>> $ python2.5 -c "import sys; from twisted.python import log; \
>>> log.startLogging(file('/tmp/log', 'w')); print \
>>> u'\u1234'.encode('UTF-8')"
>>> $ cat /tmp/log
>>> 2010-05-05 08:48:40-0400 [-] Log opened.
>>> 2010-05-05 08:48:40-0400 [-] ሴ
>>>
>>> Can you include a minimal reproducing example?
>>
>> If I print as you do it works, but my string is fetched from database
>> and only then it fails
>
> It's pretty weird. I've send  as parameter {'s': u'c\u0142a'} to
> twisted xml-rpc server after it was restarted and it has printed
> param['s'].encode('UTF-8') without errors. Immidiately after that I've
> send the same request again and it failed to print it. I've restarted
> the server again and at the first request it prints without errors,
> all other requests raise exceptions. So it has nothing to do with
> database.


Now, I'm getting Exception with

          File "/usr/local/tw10/lib/python2.5/site-packages/Twisted-10.0.0-py2.5-linux-x86_64.egg/twisted/python/log.py",
line 555, in write
            d = (self.buf + data).split('\n')
        exceptions.UnicodeDecodeError: 'ascii' codec can't decode byte
0xc5 in position 4: ordinal not in range(128)




>
>>
>>>
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>
>



From p.mayers at imperial.ac.uk  Wed May  5 08:51:57 2010
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 05 May 2010 15:51:57 +0100
Subject: [Twisted-Python] Reactor Spinning?
In-Reply-To: <4BE17F3E.1060800@thoughtcrime.org>
References: <4BE025C2.5010205@thoughtcrime.org>	<20100504214240.1642.1501163969.divmod.xquotient.9@localhost.localdomain>
	<4BE17F3E.1060800@thoughtcrime.org>
Message-ID: <4BE1860D.5070602@imperial.ac.uk>

On 05/05/10 15:22, Moxie Marlinspike wrote:
>
> I've confirmed that when spinning the FD corresponds with a client
> connection.  What would you suggest logging that might provide some insight?
>
> Given what I understand about manholes, the fact that this only occurs
> in a production environment which must remain high performance means
> that might not be an option for me.

A manhole is really just a listening connection which spawns a python 
interpreter. It doesn't consume any CPU adding a manhole to a twisted 
server, and very little CPU accessing it (unless you do something *in* 
the manhole that consumes a lot of CPU)



From itamar at itamarst.org  Wed May  5 08:54:22 2010
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 05 May 2010 10:54:22 -0400
Subject: [Twisted-Python] print unicode
In-Reply-To: <t2qb460e9631005050747t5fe853c0v3b7b071f027dd43b@mail.gmail.com>
References: <k2ib460e9631005050445s91e092c4i1d89b8636e38c1ba@mail.gmail.com>
	<1273063797.25839.10.camel@pintsize>
	<q2yb460e9631005050715pa8b289e8p1dd91a61cc3e7818@mail.gmail.com>
	<p2gb460e9631005050729g9dfb1838w5510369e80eeee43@mail.gmail.com>
	<t2qb460e9631005050747t5fe853c0v3b7b071f027dd43b@mail.gmail.com>
Message-ID: <1273071262.25839.17.camel@pintsize>

On Wed, 2010-05-05 at 16:47 +0200, Pet wrote:
> Now, I'm getting Exception with
> 
>           File "/usr/local/tw10/lib/python2.5/site-packages/Twisted-10.0.0-py2.5-linux-x86_64.egg/twisted/python/log.py",
> line 555, in write
>             d = (self.buf + data).split('\n')
>         exceptions.UnicodeDecodeError: 'ascii' codec can't decode byte
> 0xc5 in position 4: ordinal not in range(128)

Are you logging/printing unencoded unicode strings (i.e. type(s) ==
unicode)? Twisted does not support that.




From petshmidt at googlemail.com  Wed May  5 09:06:57 2010
From: petshmidt at googlemail.com (Pet)
Date: Wed, 5 May 2010 17:06:57 +0200
Subject: [Twisted-Python] print unicode
In-Reply-To: <1273071262.25839.17.camel@pintsize>
References: <k2ib460e9631005050445s91e092c4i1d89b8636e38c1ba@mail.gmail.com> 
	<1273063797.25839.10.camel@pintsize>
	<q2yb460e9631005050715pa8b289e8p1dd91a61cc3e7818@mail.gmail.com>
	<p2gb460e9631005050729g9dfb1838w5510369e80eeee43@mail.gmail.com> 
	<t2qb460e9631005050747t5fe853c0v3b7b071f027dd43b@mail.gmail.com> 
	<1273071262.25839.17.camel@pintsize>
Message-ID: <r2jb460e9631005050806od40dcccfpfcc77cd8a45c7bcb@mail.gmail.com>

On Wed, May 5, 2010 at 4:54 PM, Itamar Turner-Trauring
<itamar at itamarst.org> wrote:
> On Wed, 2010-05-05 at 16:47 +0200, Pet wrote:
>> Now, I'm getting Exception with
>>
>>           File "/usr/local/tw10/lib/python2.5/site-packages/Twisted-10.0.0-py2.5-linux-x86_64.egg/twisted/python/log.py",
>> line 555, in write
>>             d = (self.buf + data).split('\n')
>>         exceptions.UnicodeDecodeError: 'ascii' codec can't decode byte
>> 0xc5 in position 4: ordinal not in range(128)
>
> Are you logging/printing unencoded unicode strings (i.e. type(s) ==
> unicode)? Twisted does not support that.

No, this exception occurs if I do print myunicodestring.encode('UTF-8')
As I said before, it doesn't happen at first request after server restart.

>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From ddwiggins at advpubtech.com  Wed May  5 10:03:32 2010
From: ddwiggins at advpubtech.com (Don Dwiggins)
Date: Wed, 05 May 2010 09:03:32 -0700
Subject: [Twisted-Python] SQLAlchemy and Twisted
In-Reply-To: <318F79422ADC5041A93343721F84474D031FE1E4@exchange.mypublisher.local>
References: <318F79422ADC5041A93343721F84474D031FE1E4@exchange.mypublisher.local>
Message-ID: <hrs4sl$9kb$1@dough.gmane.org>

Doug Farrell wrote:
> I’ve been doing some searching about how to get SQLAlchemy and Twisted 
> working together in a Twisted application. Though I’ve found a lot of 
> information, I haven’t seen (or figured out) a good working solution or 
> definitive answer. The most promising one I’ve run across concerns 
> running the SQLAlchemy queries in a separate process (rather than a 
> separate thread) and communicating the queries between the Twisted 
> application in one process and the SQLAlchemy application in another. 
> Does anyone have any good pointers, suggestions, ideas, links to how I 
> might go about setting something like this up? 

The best advice I've gotten was from David Bolen; you can find an 
interchange between him and me on the SA list on October 22 and 23 of 
last year.  The upshot of it is, it shouldn't be a problem to use the 
SQL level if you're careful to keep the database accesses in a separate 
thread (and Bolen has done that); using the ORM level, however, can be 
problematic if you're tempted to access ORM objects in the main thread 
(since you're not directly in control of when database accesses occur).

> Here’s a couple questions that come to mind:
> 
> 1)      Would the SQLAlchemy process also be a Twisted application with 
> all the queries running as deferreds in the main thread, and blocking?

There might be value in reworking the SA concepts into a Twisted 
package, so that the asynchrony is "built in".  I haven't heard of any 
indications of that happening.

> 2)      How would the Twisted process communicate with the SQLAlchemy 
> process, using something like XMLRPC, calling methods to perform the 
> queries? Or would the XMLRPC methods convey something more generic like SQL?

Well, Bolen used a dedicated worker thread to do the SA operations (all 
SQL level), passing functions to it to be executed in that context.  He 
also used a single connection in the thread to do all DB operations.

-- 
Don Dwiggins
Advanced Publishing Technology




From chris at simplistix.co.uk  Wed May  5 10:07:05 2010
From: chris at simplistix.co.uk (Chris Withers)
Date: Wed, 05 May 2010 17:07:05 +0100
Subject: [Twisted-Python] SQLAlchemy and Twisted
In-Reply-To: <318F79422ADC5041A93343721F84474D031FE1E4@exchange.mypublisher.local>
References: <318F79422ADC5041A93343721F84474D031FE1E4@exchange.mypublisher.local>
Message-ID: <4BE197A9.4030505@simplistix.co.uk>

Doug Farrell wrote:
> 
> I’ve been doing some searching about how to get SQLAlchemy and Twisted 
> working together in a Twisted application. 

Short version: to be safe, anything that touches any SQLAlchemy-mapped 
object needs to be run in its own thread. Any query or access of an 
attribute of a mapped object may result in a blocking sql query. (aka: 
twisted doesn't play nice with orms)

> definitive answer. The most promising one I’ve run across concerns 
> running the SQLAlchemy queries in a separate process (rather than a 
> separate thread) and communicating the queries between the Twisted 
> application in one process and the SQLAlchemy application in another. 

That seems a little odd.
What would be the IPC?
How would the "sqlachemy application" be run?

> 1)      Would the SQLAlchemy process also be a Twisted application with 
> all the queries running as deferreds in the main thread, and blocking?

What do you men by "all the queries"?

> Thanks in advance for any help!

In my case, since most of the app I'm working on is "web requested" 
(either xmlrpc or http), I just agve up and used a good wsgi stack 
(repoze.bfg in my case) and munge other incoming requests into wsgi 
requests.

Twisted's wsgi server runs each request in its own thread, so be it.

cheers,

Chris




From itamar at itamarst.org  Wed May  5 11:01:13 2010
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 5 May 2010 13:01:13 -0400 (EDT)
Subject: [Twisted-Python] Reactor Spinning?
In-Reply-To: <4BE17F3E.1060800@thoughtcrime.org>
References: <4BE025C2.5010205@thoughtcrime.org>
	<20100504214240.1642.1501163969.divmod.xquotient.9@localhost.localdomain>
	<4BE17F3E.1060800@thoughtcrime.org>
Message-ID: <3973.63.107.91.99.1273078873.squirrel@webmail.zoteca.com>

>
> I've confirmed that when spinning the FD corresponds with a client
> connection.  What would you suggest logging that might provide some
> insight?

What is the transport's writeSomeData() method doing? Is it actually
trying to write an empty string? Transition from/to writeable state may
also be interesting, along with logging size of transport's buffer (so
logging in stopWriting/startWriting).




From chris at simplistix.co.uk  Thu May  6 04:08:02 2010
From: chris at simplistix.co.uk (Chris Withers)
Date: Thu, 06 May 2010 11:08:02 +0100
Subject: [Twisted-Python] How do I get xUnit output from trial for Hudson?
Message-ID: <4BE29502.4010609@simplistix.co.uk>

Hi All,

How can I get trial to emit output that makes Hudson happy?

cheers,

Chris




From chris at simplistix.co.uk  Thu May  6 04:30:25 2010
From: chris at simplistix.co.uk (Chris Withers)
Date: Thu, 06 May 2010 11:30:25 +0100
Subject: [Twisted-Python] How do I get xUnit output from trial for
	Hudson?
In-Reply-To: <4BE29502.4010609@simplistix.co.uk>
References: <4BE29502.4010609@simplistix.co.uk>
Message-ID: <4BE29A41.8010708@simplistix.co.uk>

Chris Withers wrote:
> How can I get trial to emit output that makes Hudson happy?

Er, shoot me, forgot I'd asked this before.

No-one written a junitxml reporter for trial?
Any guesses how hard that'd be?

cheers,

Chris




From alexandre at quessy.net  Thu May  6 07:25:32 2010
From: alexandre at quessy.net (Alexandre Quessy)
Date: Thu, 6 May 2010 09:25:32 -0400
Subject: [Twisted-Python] OSC protocol implementation
In-Reply-To: <1272336938.21360.3.camel@pintsize>
References: <4BD5AC2D.8060409@scherpenisse.net>
	<20100426155617.1984.402492984.divmod.xquotient.13@localhost.localdomain>
	<1272336938.21360.3.camel@pintsize>
Message-ID: <s2z72236ba91005060625of9d3e08y5d9002afa49d1020@mail.gmail.com>

Hello,

2010/4/26 Itamar Turner-Trauring <itamar at itamarst.org>:
> On Mon, 2010-04-26 at 15:56 +0000, exarkun at twistedmatrix.com wrote:
>
>> This is mainly a question of when someone finds it interesting enough to
>> review the code.  Personally, while I remember commenting on that ticket
>> a couple months ago, I had to go re-read the wikipedia page to remember
>> what OSC is.  Since this is a protocol I've never come across before and
>> which I can't think of any immediate applications that are relevant to
>> me, it's not likely I'll spontaneously go review the code.  Perhaps
>> there is another developer who would be interested in this who will do
>> so.  Posting on the list is a good way to try to get attention, as is
>> asking in the Freenode #twisted irc channel.  If you can't find someone
>> who wants to review it just because they're interested, you might be
>> able to trade for a review of another ticket.
>
> As a worst case alternative if time becomes an issue, you can release
> this as a standalone project (many Twisted libraries have begun
> prefixing package names with tx, e.g. txAMPQ). It can always be merged
> later with Twisted if there's an interest (as long as the license
> doesn't conflict).
>

Yes, I guess we should use it a bit in productions so that we test it
thorougly. It won't be in the release in early June, so I guess we
should call it txosc for a few months before we submit it again to be
merged. The API might change while I use it in some projects.

Note that it is fully working right now, and we have completed the unit tests.

My only concern is this: if we make it a standalone project, I might
want to split it in three files, whereas it is in just one right now.
Maybe it's ok to create a subpackage in the in twisted.prototocols,
though, like the "gps" and "mice" subpackages.

Thanks,
Alex

>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Alexandre Quessy
http://alexandre.quessy.net/



From petshmidt at googlemail.com  Thu May  6 08:30:20 2010
From: petshmidt at googlemail.com (Pet)
Date: Thu, 6 May 2010 16:30:20 +0200
Subject: [Twisted-Python] multiline log entries
Message-ID: <q2yb460e9631005060730p6042d505g56db9d3685e076ba@mail.gmail.com>

Hello!

Is it possible to print multiline debug messages into log?

If print a query it looks like this


2010-05-06 10:10:07 [HTTPChannel,0,192.168.2.15]                     SELECT *
2010-05-06 10:10:07 [HTTPChannel,0,192.168.2.15]
FROM foo AS a
2010-05-06 10:10:07 [HTTPChannel,0,192.168.2.15]
JOIN bar AS b ON a.id = b.id
2010-05-06 10:10:07 [HTTPChannel,0,192.168.2.15]
WHERE a.id = 1
2010-05-06 10:10:07 [HTTPChannel,0,192.168.2.15]
ORDER BY id DESC
2010-05-06 10:10:07 [HTTPChannel,0,192.168.2.15]                     LIMIT 1;


it would be more practical to have only the query without timestamp on
other things

Thanks!



From exarkun at twistedmatrix.com  Thu May  6 08:37:50 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 06 May 2010 14:37:50 -0000
Subject: [Twisted-Python] multiline log entries
In-Reply-To: <q2yb460e9631005060730p6042d505g56db9d3685e076ba@mail.gmail.com>
References: <q2yb460e9631005060730p6042d505g56db9d3685e076ba@mail.gmail.com>
Message-ID: <20100506143750.1681.57250479.divmod.xquotient.4@localhost.localdomain>

On 02:30 pm, petshmidt at googlemail.com wrote:
>Hello!
>
>Is it possible to print multiline debug messages into log?
>
>If print a query it looks like this
>
>
>2010-05-06 10:10:07 [HTTPChannel,0,192.168.2.15] 
>SELECT *
>2010-05-06 10:10:07 [HTTPChannel,0,192.168.2.15]
>FROM foo AS a
>2010-05-06 10:10:07 [HTTPChannel,0,192.168.2.15]
>JOIN bar AS b ON a.id = b.id
>2010-05-06 10:10:07 [HTTPChannel,0,192.168.2.15]
>WHERE a.id = 1
>2010-05-06 10:10:07 [HTTPChannel,0,192.168.2.15]
>ORDER BY id DESC
>2010-05-06 10:10:07 [HTTPChannel,0,192.168.2.15] 
>LIMIT 1;
>
>
>it would be more practical to have only the query without timestamp on
>other things

Use log.msg, instead.  `print` integration is meant as a debugging aid, 
not a general logging facility.

  >>> from twisted.python.log import startLogging
  >>> from sys import stdout
  >>> startLogging(stdout)
  2010-05-06 10:36:41-0400 [-] Log opened.
  2010-05-06 10:36:41-0400 [-] <twisted.python.log.FileLogObserver 
instance at 0xb766424c>
  >>> from twisted.python.log import msg
  >>> print 'hello\nworld'
  2010-05-06 10:36:50-0400 [-] hello
  2010-05-06 10:36:50-0400 [-] world
  >>> msg('hello\nworld')
  2010-05-06 10:36:54-0400 [-] hello
          world
  >>>
Jean-Paul



From petshmidt at googlemail.com  Thu May  6 09:45:43 2010
From: petshmidt at googlemail.com (Pet)
Date: Thu, 6 May 2010 17:45:43 +0200
Subject: [Twisted-Python] multiline log entries
In-Reply-To: <20100506143750.1681.57250479.divmod.xquotient.4@localhost.localdomain>
References: <q2yb460e9631005060730p6042d505g56db9d3685e076ba@mail.gmail.com> 
	<20100506143750.1681.57250479.divmod.xquotient.4@localhost.localdomain>
Message-ID: <g2gb460e9631005060845sc797502csf4cb84190d643c01@mail.gmail.com>

On Thu, May 6, 2010 at 4:37 PM,  <exarkun at twistedmatrix.com> wrote:
> On 02:30 pm, petshmidt at googlemail.com wrote:
>>Hello!
>>
>>Is it possible to print multiline debug messages into log?
>>
>>If print a query it looks like this
>>
>>
>>2010-05-06 10:10:07 [HTTPChannel,0,192.168.2.15]
>>SELECT *
>>2010-05-06 10:10:07 [HTTPChannel,0,192.168.2.15]
>>FROM foo AS a
>>2010-05-06 10:10:07 [HTTPChannel,0,192.168.2.15]
>>JOIN bar AS b ON a.id = b.id
>>2010-05-06 10:10:07 [HTTPChannel,0,192.168.2.15]
>>WHERE a.id = 1
>>2010-05-06 10:10:07 [HTTPChannel,0,192.168.2.15]
>>ORDER BY id DESC
>>2010-05-06 10:10:07 [HTTPChannel,0,192.168.2.15]
>>LIMIT 1;
>>
>>
>>it would be more practical to have only the query without timestamp on
>>other things
>
> Use log.msg, instead.  `print` integration is meant as a debugging aid,
> not a general logging facility.

Thanks! I've thought they're equivalent

>
>  >>> from twisted.python.log import startLogging
>  >>> from sys import stdout
>  >>> startLogging(stdout)
>  2010-05-06 10:36:41-0400 [-] Log opened.
>  2010-05-06 10:36:41-0400 [-] <twisted.python.log.FileLogObserver
> instance at 0xb766424c>
>  >>> from twisted.python.log import msg
>  >>> print 'hello\nworld'
>  2010-05-06 10:36:50-0400 [-] hello
>  2010-05-06 10:36:50-0400 [-] world
>  >>> msg('hello\nworld')
>  2010-05-06 10:36:54-0400 [-] hello
>          world
>  >>>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From jml at mumak.net  Thu May  6 10:21:33 2010
From: jml at mumak.net (Jonathan Lange)
Date: Thu, 6 May 2010 17:21:33 +0100
Subject: [Twisted-Python] How do I get xUnit output from trial for
	Hudson?
In-Reply-To: <4BE29A41.8010708@simplistix.co.uk>
References: <4BE29502.4010609@simplistix.co.uk>
	<4BE29A41.8010708@simplistix.co.uk>
Message-ID: <z2ld06a5cd31005060921y81c8b787kd547ecc457d7e5fe@mail.gmail.com>

On Thu, May 6, 2010 at 11:30 AM, Chris Withers <chris at simplistix.co.uk> wrote:
> Chris Withers wrote:
>> How can I get trial to emit output that makes Hudson happy?
>
> Er, shoot me, forgot I'd asked this before.
>
> No-one written a junitxml reporter for trial?
> Any guesses how hard that'd be?
>

Not very.

"trial --reporter=subunit <foo> | subunit2junitxml" works well for me,
although I am running on an OS that supports pipes :)

jml



From chris at simplistix.co.uk  Thu May  6 12:04:44 2010
From: chris at simplistix.co.uk (Chris Withers)
Date: Thu, 06 May 2010 19:04:44 +0100
Subject: [Twisted-Python] How do I get xUnit output from trial
	for	Hudson?
In-Reply-To: <z2ld06a5cd31005060921y81c8b787kd547ecc457d7e5fe@mail.gmail.com>
References: <4BE29502.4010609@simplistix.co.uk>	<4BE29A41.8010708@simplistix.co.uk>
	<z2ld06a5cd31005060921y81c8b787kd547ecc457d7e5fe@mail.gmail.com>
Message-ID: <4BE304BC.30001@simplistix.co.uk>

Jonathan Lange wrote:
> Not very.
> 
> "trial --reporter=subunit <foo> | subunit2junitxml" works well for me,
> although I am running on an OS that supports pipes :)

...and on which subunit compiles ;-)

*cough*notwindows*cough

Chris

-- 
Simplistix - Content Management, Batch Processing & Python Consulting
             - http://www.simplistix.co.uk



From celord at gmail.com  Thu May  6 13:04:53 2010
From: celord at gmail.com (=?ISO-8859-1?B?Q+lzYXIgR2FyY+1h?=)
Date: Thu, 6 May 2010 13:04:53 -0600
Subject: [Twisted-Python] SQLAlchemy and Twisted
In-Reply-To: <4BE197A9.4030505@simplistix.co.uk>
References: <318F79422ADC5041A93343721F84474D031FE1E4@exchange.mypublisher.local>
	<4BE197A9.4030505@simplistix.co.uk>
Message-ID: <h2tb302bf881005061204v4db94f57mc74e372c0e795c86@mail.gmail.com>

Guys, now that I see this and the past conversations about SA and Twisted,
and now that I've read some more about the non-blocking concepts, I think
that I'am not doing things the best way

 I am doing this:

1. Twisted  IMAP4 Client to read my mails
2. Inside this client I import a module that contains some funtions that
parse the email via re
3. Also inside the client I import a module that makes a DB connection and
insert the data parsed from those emails, all this via SQL using mapped
tables.

I'm almost sure that I'm breacking the hole twisted concept doing this
thisway , do you guys have any advice for me

Thanks
2010/5/5 Chris Withers <chris at simplistix.co.uk>

> Doug Farrell wrote:
> >
> > I’ve been doing some searching about how to get SQLAlchemy and Twisted
> > working together in a Twisted application.
>
> Short version: to be safe, anything that touches any SQLAlchemy-mapped
> object needs to be run in its own thread. Any query or access of an
> attribute of a mapped object may result in a blocking sql query. (aka:
> twisted doesn't play nice with orms)
>
> > definitive answer. The most promising one I’ve run across concerns
> > running the SQLAlchemy queries in a separate process (rather than a
> > separate thread) and communicating the queries between the Twisted
> > application in one process and the SQLAlchemy application in another.
>
> That seems a little odd.
> What would be the IPC?
> How would the "sqlachemy application" be run?
>
> > 1)      Would the SQLAlchemy process also be a Twisted application with
> > all the queries running as deferreds in the main thread, and blocking?
>
> What do you men by "all the queries"?
>
> > Thanks in advance for any help!
>
> In my case, since most of the app I'm working on is "web requested"
> (either xmlrpc or http), I just agve up and used a good wsgi stack
> (repoze.bfg in my case) and munge other incoming requests into wsgi
> requests.
>
> Twisted's wsgi server runs each request in its own thread, so be it.
>
> cheers,
>
> Chris
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
http://celord.blogspot.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100506/be569267/attachment.html>

From kevin.horn at gmail.com  Thu May  6 14:00:33 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Thu, 6 May 2010 15:00:33 -0500
Subject: [Twisted-Python] SQLAlchemy and Twisted
In-Reply-To: <h2tb302bf881005061204v4db94f57mc74e372c0e795c86@mail.gmail.com>
References: <318F79422ADC5041A93343721F84474D031FE1E4@exchange.mypublisher.local>
	<4BE197A9.4030505@simplistix.co.uk>
	<h2tb302bf881005061204v4db94f57mc74e372c0e795c86@mail.gmail.com>
Message-ID: <g2t562bcc11005061300v449e5727i8762ec3bd1852014@mail.gmail.com>

You might also check out sAsync: http://sasync.org/

This was a project apparently abandoned (?) by the original author, but it's
recently been picked up by someone else.

Kevin Horn

On Thu, May 6, 2010 at 2:04 PM, César García <celord at gmail.com> wrote:

> Guys, now that I see this and the past conversations about SA and Twisted,
> and now that I've read some more about the non-blocking concepts, I think
> that I'am not doing things the best way
>
>  I am doing this:
>
> 1. Twisted  IMAP4 Client to read my mails
> 2. Inside this client I import a module that contains some funtions that
> parse the email via re
> 3. Also inside the client I import a module that makes a DB connection and
> insert the data parsed from those emails, all this via SQL using mapped
> tables.
>
> I'm almost sure that I'm breacking the hole twisted concept doing this
> thisway , do you guys have any advice for me
>
> Thanks
> 2010/5/5 Chris Withers <chris at simplistix.co.uk>
>
> Doug Farrell wrote:
>> >
>> > I’ve been doing some searching about how to get SQLAlchemy and Twisted
>> > working together in a Twisted application.
>>
>> Short version: to be safe, anything that touches any SQLAlchemy-mapped
>> object needs to be run in its own thread. Any query or access of an
>> attribute of a mapped object may result in a blocking sql query. (aka:
>> twisted doesn't play nice with orms)
>>
>> > definitive answer. The most promising one I’ve run across concerns
>> > running the SQLAlchemy queries in a separate process (rather than a
>> > separate thread) and communicating the queries between the Twisted
>> > application in one process and the SQLAlchemy application in another.
>>
>> That seems a little odd.
>> What would be the IPC?
>> How would the "sqlachemy application" be run?
>>
>> > 1)      Would the SQLAlchemy process also be a Twisted application with
>> > all the queries running as deferreds in the main thread, and blocking?
>>
>> What do you men by "all the queries"?
>>
>> > Thanks in advance for any help!
>>
>> In my case, since most of the app I'm working on is "web requested"
>> (either xmlrpc or http), I just agve up and used a good wsgi stack
>> (repoze.bfg in my case) and munge other incoming requests into wsgi
>> requests.
>>
>> Twisted's wsgi server runs each request in its own thread, so be it.
>>
>> cheers,
>>
>> Chris
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
>
>
> --
> http://celord.blogspot.com/
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100506/72e70bd5/attachment.html>

From glyph at twistedmatrix.com  Fri May  7 02:12:01 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 7 May 2010 04:12:01 -0400
Subject: [Twisted-Python] Release again in June?
In-Reply-To: <h2hd06a5cd31005030925z8b65f5c4pa5ff06da33908b6d@mail.gmail.com>
References: <l2pd06a5cd31005030518z572fac09rc1f1ec26b2aaac98@mail.gmail.com>
	<20100503154930.1627.1185606434.divmod.xquotient.3@localhost.localdomain>
	<h2hd06a5cd31005030925z8b65f5c4pa5ff06da33908b6d@mail.gmail.com>
Message-ID: <4468F97D-5EBA-408E-A8DD-5D1589E59610@twistedmatrix.com>


On May 3, 2010, at 12:25 PM, Jonathan Lange wrote:

>>> I am still keen to do this.
>>> 
>>> Does anyone have any thoughts, objections or recommendations?
>> 
>> This sounds great.
> 

I also think this sounds great.

Thanks for stepping forward again, Jonathan.

I would like to volunteer to be assistant release manager for this release so that I can hopefully get out a 10.2 in a timely manner as well.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100507/2ba15992/attachment.html>

From lvh at laurensvh.be  Fri May  7 02:22:46 2010
From: lvh at laurensvh.be (Laurens Van Houtven)
Date: Fri, 7 May 2010 10:22:46 +0200
Subject: [Twisted-Python] EuroPython 2k10: planned sprint days?
Message-ID: <i2hcedc0c091005070122h29214df4u86259f257f3ce4e4@mail.gmail.com>

Hey,



Can anyone tell me which sprint days (if any) Twisted is organizing
something on? If nothing is planned yet, does anyone have any preferences?


Thanks,
Laurens
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100507/a94a65e9/attachment.html>

From skaarjj at gmail.com  Fri May  7 04:40:48 2010
From: skaarjj at gmail.com (Adrian Overbury)
Date: Fri, 7 May 2010 20:40:48 +1000
Subject: [Twisted-Python] IRCClient: Handle lines that are too long for the
	server
Message-ID: <q2ieb432f2b1005070340ub6d94f65u5cd58ca72403ebf7@mail.gmail.com>

So, there's a todo item in IRCClient, to handle lines that are longer
than the RFC maximum length (510 characters including the sender,
recipient and command, plus `\n` and `\r`).

I had thought to have a method sitting between the
IRCClient.sendLine() and the method which actually calls out to the
transport to put the data on the wire.  The default method would
simply pass the message through, sending it on to the server as is, to
be inevitably truncated at the other end.  The documentation could
contain examples of possible implementations, such as one which splits
the message up into multiple messages and sends them on, and one which
truncates the message.

For example, IRCClient could contain the method:

def longLineHandler(self, message):
   return message

This would necessitate adding a check to IRCClient to see what is
returned by longLineHandler().  I would suggest that it would accept a
single `str` or a list of `str`s as valid input, and anything else
will either make the sendLine() method do nothing and just silently
return, or will raise an exception.  If it returns silently, it would
allow the user-defined longLineHandler() to implement splitting a
message up into multiple messages by either returning a list of
`str`s, or by calling self.sendLine() themselves and then returning
None to have the original sendLine() return silently.

For example, if the user overrode longLineHandler() and made it split
the message into multiple messages, in peudocode it could go like this

call self.sendLine
   call self.longLineHandler with parameter 'message'
       is message longer than 510 characters?
           yes: split up command prefix and payload
                   use textwrap module to split payload into multiple
                     messages no longer than "510 - length of command
                     prefix"
                   prepend command prefix to each message and call
                     self.sendLine with each one
                   return None
           no: return message
   did self.longLineHandler return None?
           yes: return
   did self.longLineHandler return a list of `str`?
           yes: for each `str` in list: call self.reallySendLine or
            place on message queue
           no: call self.reallySendLine or place on message queue

The user might also want to have their longLineHandler raise an
exception if the line is too long, or they might want to have it make
the lines shorter than 510 characters total, or strip control codes if
they're too long to try and shorten it... there's a number of
different use cases for this, so I'm trying to build a framework for
it that's flexible enough to handle more or less anything.  I'd value
any comments anyone has on this.  I also have an enhancement ticket
open in the bug tracker, ticket #4416.

-- 

Adrian



From konrads.smelkovs at gmail.com  Fri May  7 04:53:30 2010
From: konrads.smelkovs at gmail.com (Konrads Smelkovs)
Date: Fri, 7 May 2010 13:53:30 +0300
Subject: [Twisted-Python] SQLAlchemy and Twisted
In-Reply-To: <g2t562bcc11005061300v449e5727i8762ec3bd1852014@mail.gmail.com>
References: <318F79422ADC5041A93343721F84474D031FE1E4@exchange.mypublisher.local>
	<4BE197A9.4030505@simplistix.co.uk>
	<h2tb302bf881005061204v4db94f57mc74e372c0e795c86@mail.gmail.com>
	<g2t562bcc11005061300v449e5727i8762ec3bd1852014@mail.gmail.com>
Message-ID: <p2kd79700b91005070353w7bae89edy9f3df7fa59807a9c@mail.gmail.com>

If you want an ORM in Twisted look for STORM twisted integration. Overall,
it works (I tried). Some quirks are there, e.g. without twisted you would do
something like resultset[10:20].sort(Sort.ASC) but with twsited you have to
do (assuming inlineCallbacks)

res= yield  resultset[10:20]
res = yield res.sort(Sort.ASC)

which ain't pretty but it sure beats using plain twisted.enterprise
--
Konrads Smelkovs
Applied IT sorcery.


On Thu, May 6, 2010 at 11:00 PM, Kevin Horn <kevin.horn at gmail.com> wrote:

> You might also check out sAsync: http://sasync.org/
>
> This was a project apparently abandoned (?) by the original author, but
> it's recently been picked up by someone else.
>
> Kevin Horn
>
>
> On Thu, May 6, 2010 at 2:04 PM, César García <celord at gmail.com> wrote:
>
>> Guys, now that I see this and the past conversations about SA and Twisted,
>> and now that I've read some more about the non-blocking concepts, I think
>> that I'am not doing things the best way
>>
>>  I am doing this:
>>
>> 1. Twisted  IMAP4 Client to read my mails
>> 2. Inside this client I import a module that contains some funtions that
>> parse the email via re
>> 3. Also inside the client I import a module that makes a DB connection and
>> insert the data parsed from those emails, all this via SQL using mapped
>> tables.
>>
>> I'm almost sure that I'm breacking the hole twisted concept doing this
>> thisway , do you guys have any advice for me
>>
>> Thanks
>> 2010/5/5 Chris Withers <chris at simplistix.co.uk>
>>
>> Doug Farrell wrote:
>>> >
>>> > I’ve been doing some searching about how to get SQLAlchemy and Twisted
>>> > working together in a Twisted application.
>>>
>>> Short version: to be safe, anything that touches any SQLAlchemy-mapped
>>> object needs to be run in its own thread. Any query or access of an
>>> attribute of a mapped object may result in a blocking sql query. (aka:
>>> twisted doesn't play nice with orms)
>>>
>>> > definitive answer. The most promising one I’ve run across concerns
>>> > running the SQLAlchemy queries in a separate process (rather than a
>>> > separate thread) and communicating the queries between the Twisted
>>> > application in one process and the SQLAlchemy application in another.
>>>
>>> That seems a little odd.
>>> What would be the IPC?
>>> How would the "sqlachemy application" be run?
>>>
>>> > 1)      Would the SQLAlchemy process also be a Twisted application with
>>> > all the queries running as deferreds in the main thread, and blocking?
>>>
>>> What do you men by "all the queries"?
>>>
>>> > Thanks in advance for any help!
>>>
>>> In my case, since most of the app I'm working on is "web requested"
>>> (either xmlrpc or http), I just agve up and used a good wsgi stack
>>> (repoze.bfg in my case) and munge other incoming requests into wsgi
>>> requests.
>>>
>>> Twisted's wsgi server runs each request in its own thread, so be it.
>>>
>>> cheers,
>>>
>>> Chris
>>>
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>
>>
>>
>> --
>> http://celord.blogspot.com/
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100507/f7844883/attachment-0001.html>

From mithrandi at mithrandi.net  Fri May  7 07:34:29 2010
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Fri, 7 May 2010 15:34:29 +0200
Subject: [Twisted-Python] SQLAlchemy and Twisted
In-Reply-To: <p2kd79700b91005070353w7bae89edy9f3df7fa59807a9c@mail.gmail.com>
References: <318F79422ADC5041A93343721F84474D031FE1E4@exchange.mypublisher.local>
	<4BE197A9.4030505@simplistix.co.uk>
	<h2tb302bf881005061204v4db94f57mc74e372c0e795c86@mail.gmail.com>
	<g2t562bcc11005061300v449e5727i8762ec3bd1852014@mail.gmail.com>
	<p2kd79700b91005070353w7bae89edy9f3df7fa59807a9c@mail.gmail.com>
Message-ID: <g2tf5eea9171005070634sb594f2f0i8dcdfc114e3315b3@mail.gmail.com>

On Fri, May 7, 2010 at 12:53 PM, Konrads Smelkovs
<konrads.smelkovs at gmail.com> wrote:
> If you want an ORM in Twisted look for STORM twisted integration. Overall,
> it works (I tried). Some quirks are there, e.g. without twisted you would do
> something like resultset[10:20].sort(Sort.ASC) but with twsited you have to
> do (assuming inlineCallbacks)
>
> res= yield  resultset[10:20]
> res = yield res.sort(Sort.ASC)

If you wanted to, you could write this as:

(yield resultset[10:20]).sort(Sort.ASC)

assuming a new enough version of Python.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar



From drwxrwxr.x+twistedmail at gmail.com  Fri May  7 09:37:14 2010
From: drwxrwxr.x+twistedmail at gmail.com (Jaroslaw Fedewicz)
Date: Fri, 7 May 2010 18:37:14 +0300
Subject: [Twisted-Python] SQLAlchemy and Twisted
In-Reply-To: <g2tf5eea9171005070634sb594f2f0i8dcdfc114e3315b3@mail.gmail.com>
References: <318F79422ADC5041A93343721F84474D031FE1E4@exchange.mypublisher.local>
	<4BE197A9.4030505@simplistix.co.uk>
	<h2tb302bf881005061204v4db94f57mc74e372c0e795c86@mail.gmail.com>
	<g2t562bcc11005061300v449e5727i8762ec3bd1852014@mail.gmail.com>
	<p2kd79700b91005070353w7bae89edy9f3df7fa59807a9c@mail.gmail.com>
	<g2tf5eea9171005070634sb594f2f0i8dcdfc114e3315b3@mail.gmail.com>
Message-ID: <z2x75203ae91005070837ub5d1bab7l4e4f62cec2f5b9fd@mail.gmail.com>

> (yield resultset[10:20]).sort(Sort.ASC)
>
> assuming a new enough version of Python.

I wonder if it a good idea to subclass Deferred and define __call__()
for it, making it attach callbacks to itself.
Theoretically should work in earlier versions and make the syntax look
more transparent.



From exarkun at twistedmatrix.com  Fri May  7 12:35:58 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 07 May 2010 18:35:58 -0000
Subject: [Twisted-Python] SQLAlchemy and Twisted
In-Reply-To: <z2x75203ae91005070837ub5d1bab7l4e4f62cec2f5b9fd@mail.gmail.com>
References: <318F79422ADC5041A93343721F84474D031FE1E4@exchange.mypublisher.local>
	<4BE197A9.4030505@simplistix.co.uk>
	<h2tb302bf881005061204v4db94f57mc74e372c0e795c86@mail.gmail.com>
	<g2t562bcc11005061300v449e5727i8762ec3bd1852014@mail.gmail.com>
	<p2kd79700b91005070353w7bae89edy9f3df7fa59807a9c@mail.gmail.com>
	<g2tf5eea9171005070634sb594f2f0i8dcdfc114e3315b3@mail.gmail.com>
	<z2x75203ae91005070837ub5d1bab7l4e4f62cec2f5b9fd@mail.gmail.com>
Message-ID: <20100507183558.1660.207845263.divmod.xquotient.1@localhost.localdomain>

On 03:37 pm, drwxrwxr.x+twistedmail at gmail.com wrote:
>>(yield resultset[10:20]).sort(Sort.ASC)
>>
>>assuming a new enough version of Python.
>
>I wonder if it a good idea to subclass Deferred and define __call__()
>for it, making it attach callbacks to itself.
>Theoretically should work in earlier versions and make the syntax look
>more transparent.

Let me clear that up for you, then.

No, this is not a good idea. :)

Jean-Paul



From exarkun at twistedmatrix.com  Fri May  7 12:36:40 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 07 May 2010 18:36:40 -0000
Subject: [Twisted-Python] SQLAlchemy and Twisted
In-Reply-To: <g2tf5eea9171005070634sb594f2f0i8dcdfc114e3315b3@mail.gmail.com>
References: <318F79422ADC5041A93343721F84474D031FE1E4@exchange.mypublisher.local>
	<4BE197A9.4030505@simplistix.co.uk>
	<h2tb302bf881005061204v4db94f57mc74e372c0e795c86@mail.gmail.com>
	<g2t562bcc11005061300v449e5727i8762ec3bd1852014@mail.gmail.com>
	<p2kd79700b91005070353w7bae89edy9f3df7fa59807a9c@mail.gmail.com>
	<g2tf5eea9171005070634sb594f2f0i8dcdfc114e3315b3@mail.gmail.com>
Message-ID: <20100507183640.1660.858205957.divmod.xquotient.3@localhost.localdomain>

On 01:34 pm, mithrandi at mithrandi.net wrote:
>On Fri, May 7, 2010 at 12:53 PM, Konrads Smelkovs
><konrads.smelkovs at gmail.com> wrote:
>>If you want an ORM in Twisted look for STORM twisted integration. 
>>Overall,
>>it works (I tried). Some quirks are there, e.g. without twisted you 
>>would do
>>something like resultset[10:20].sort(Sort.ASC) but with twsited you 
>>have to
>>do (assuming inlineCallbacks)
>>
>>res= yield� resultset[10:20]
>>res = yield res.sort(Sort.ASC)
>
>If you wanted to, you could write this as:
>
>(yield resultset[10:20]).sort(Sort.ASC)
>
>assuming a new enough version of Python.

You left off one of the yields, though.

  res = yield (yield resultset[10:20]).sort(Sort.ASC)

Jean-Paul



From andrew at bemusement.org  Sat May  8 07:41:19 2010
From: andrew at bemusement.org (Andrew Bennetts)
Date: Sat, 8 May 2010 15:41:19 +0200
Subject: [Twisted-Python] How do I get xUnit output from trial for
 Hudson?
In-Reply-To: <4BE304BC.30001@simplistix.co.uk>
References: <4BE29502.4010609@simplistix.co.uk>
	<4BE29A41.8010708@simplistix.co.uk>
	<z2ld06a5cd31005060921y81c8b787kd547ecc457d7e5fe@mail.gmail.com>
	<4BE304BC.30001@simplistix.co.uk>
Message-ID: <20100508134119.GC27052@steerpike.home.puzzling.org>

Chris Withers wrote:
> Jonathan Lange wrote:
> > Not very.
> > 
> > "trial --reporter=subunit <foo> | subunit2junitxml" works well for me,
> > although I am running on an OS that supports pipes :)
> 
> ...and on which subunit compiles ;-)
> 
> *cough*notwindows*cough

Have you tried it?  AFAICS, subunit2junitxml only requires the pure
python parts of subunit (i.e. the subunit Python library, as opposed to
the subunit implementation for some other language).

(It does require <http://pypi.python.org/pypi/junitxml>, and I have no
idea what its requirements are, but I'd guess they're reasonable.)

-Andrew.




From exarkun at twistedmatrix.com  Sat May  8 22:05:25 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 09 May 2010 04:05:25 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1273377925.72.839215289@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100509/d2e80eca/attachment.html>

From dgriff1 at gmail.com  Sun May  9 00:07:29 2010
From: dgriff1 at gmail.com (Daniel Griffin)
Date: Sun, 9 May 2010 01:07:29 -0500
Subject: [Twisted-Python] SQLAlchemy and Twisted
In-Reply-To: <20100507183558.1660.207845263.divmod.xquotient.1@localhost.localdomain>
References: <318F79422ADC5041A93343721F84474D031FE1E4@exchange.mypublisher.local>
	<4BE197A9.4030505@simplistix.co.uk>
	<h2tb302bf881005061204v4db94f57mc74e372c0e795c86@mail.gmail.com>
	<g2t562bcc11005061300v449e5727i8762ec3bd1852014@mail.gmail.com>
	<p2kd79700b91005070353w7bae89edy9f3df7fa59807a9c@mail.gmail.com>
	<g2tf5eea9171005070634sb594f2f0i8dcdfc114e3315b3@mail.gmail.com>
	<z2x75203ae91005070837ub5d1bab7l4e4f62cec2f5b9fd@mail.gmail.com>
	<20100507183558.1660.207845263.divmod.xquotient.1@localhost.localdomain>
Message-ID: <u2j3db160681005082307r80ad9dd3t4bad05f88e698e65@mail.gmail.com>

If you let SQLAlchemy block twisted would there be any impact besides
performance?

Dan

On Fri, May 7, 2010 at 1:35 PM, <exarkun at twistedmatrix.com> wrote:

> On 03:37 pm, drwxrwxr.x+twistedmail at gmail.com<drwxrwxr.x%2Btwistedmail at gmail.com>wrote:
> >>(yield resultset[10:20]).sort(Sort.ASC)
> >>
> >>assuming a new enough version of Python.
> >
> >I wonder if it a good idea to subclass Deferred and define __call__()
> >for it, making it attach callbacks to itself.
> >Theoretically should work in earlier versions and make the syntax look
> >more transparent.
>
> Let me clear that up for you, then.
>
> No, this is not a good idea. :)
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100509/2bd8e0f8/attachment.html>

From p.mayers at imperial.ac.uk  Sun May  9 03:45:18 2010
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Sun, 09 May 2010 10:45:18 +0100
Subject: [Twisted-Python] SQLAlchemy and Twisted
In-Reply-To: <u2j3db160681005082307r80ad9dd3t4bad05f88e698e65@mail.gmail.com>
References: <318F79422ADC5041A93343721F84474D031FE1E4@exchange.mypublisher.local>	<4BE197A9.4030505@simplistix.co.uk>	<h2tb302bf881005061204v4db94f57mc74e372c0e795c86@mail.gmail.com>	<g2t562bcc11005061300v449e5727i8762ec3bd1852014@mail.gmail.com>	<p2kd79700b91005070353w7bae89edy9f3df7fa59807a9c@mail.gmail.com>	<g2tf5eea9171005070634sb594f2f0i8dcdfc114e3315b3@mail.gmail.com>	<z2x75203ae91005070837ub5d1bab7l4e4f62cec2f5b9fd@mail.gmail.com>	<20100507183558.1660.207845263.divmod.xquotient.1@localhost.localdomain>
	<u2j3db160681005082307r80ad9dd3t4bad05f88e698e65@mail.gmail.com>
Message-ID: <4BE6842E.1040000@imperial.ac.uk>

On 05/09/2010 07:07 AM, Daniel Griffin wrote:
> If you let SQLAlchemy block twisted would there be any impact besides
> performance?

Depends how long it blocks for, and what else your process is doing.

With the reactor blocked:

  * no socket reads or accepts can be done
  * no callLater or LoopingCall can be scheduled

...and so on.

If you've only got a small number of clients and no time-based 
scheduling and you're only blocking for a short time (tens or hundreds 
of milliseconds, say) it may be tolerable.

If the server has a lot of clients, or needs to accept new ones in a 
timely fashion, or has time-based work to do, and your blocking might go 
on for a while, it's probably not tolerable.

I'd avoid it personally (but then I'm utterly unconvinced by ORMs) and 
stick to using SA in a thread as your SQL query layer.



From p.mayers at imperial.ac.uk  Sun May  9 04:17:07 2010
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Sun, 09 May 2010 11:17:07 +0100
Subject: [Twisted-Python] [#24487862] Re:  SQLAlchemy and Twisted
In-Reply-To: <c721bd8be57b054fdfc4bd52c9233e9b@secure.mpcustomer.com>
References: <c721bd8be57b054fdfc4bd52c9233e9b@secure.mpcustomer.com>
Message-ID: <4BE68BA3.8040708@imperial.ac.uk>

Erm... Someone appears to have subscribed a ticketing system w/ 
autoresponer to the Twisted mailing list; any chance a list admin could 
unsubscribe it? The email below claimed a "From:" of the m/l but a 
"Reply-To:" of support at mpcustomer.com


On 05/09/2010 10:49 AM, twisted-python at twistedmatrix.com wrote:
> Hello,
>
> This is an automated response to inform you that your question has
been entered into our system, and will be reviewed shortly. Your ticket
has been submitted into the "General Support" department.
>
> We will respond to you as soon as possible. >
> ==============
> Please keep this information, and use it when refering to your ticket:
>
> Ticket subject: Re: [Twisted-Python] SQLAlchemy and Twisted
> Ticket number: 24487862
> Ticket link: https://secure.mpcustomer.com/ticket.php?ticket=24487862
> Ticket body: On 05/09/2010 07:07 AM, Daniel Griffin wrote:
>> If you let SQLAlchemy block twisted would there be any impact besides
>> performance?
>
> Depends how long it blocks for, and what else your process is doing.
>
> With the reactor blocked:
>
>    * no socket reads or accepts can be done
>    * no callLater or LoopingCall can be scheduled
>
> ...and so on.
>
> If you've only got a small number of clients and no time-based
> scheduling and you're only blocking for a short time (tens or hundreds
> of milliseconds, say) it may be tolerable.
>
> If the server has a lot of clients, or needs to accept new ones in a
> timely fashion, or has time-based work to do, and your blocking might go
> on for a while, it's probably not tolerable.
>
> I'd avoid it personally (but then I'm utterly unconvinced by ORMs) and
> stick to using SA in a thread as your SQL query layer.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> ==============
>
>
>




From exarkun at twistedmatrix.com  Sun May  9 07:56:56 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 09 May 2010 13:56:56 -0000
Subject: [Twisted-Python] [#24487862] Re:  SQLAlchemy and Twisted
In-Reply-To: <4BE68BA3.8040708@imperial.ac.uk>
References: <c721bd8be57b054fdfc4bd52c9233e9b@secure.mpcustomer.com>
	<4BE68BA3.8040708@imperial.ac.uk>
Message-ID: <20100509135656.1660.707000273.divmod.xquotient.38@localhost.localdomain>

On 10:17 am, p.mayers at imperial.ac.uk wrote:
>Erm... Someone appears to have subscribed a ticketing system w/
>autoresponer to the Twisted mailing list; any chance a list admin could
>unsubscribe it? The email below claimed a "From:" of the m/l but a
>"Reply-To:" of support at mpcustomer.com

Hopefully taken care of.

Jean-Paul



From jml at mumak.net  Sun May  9 08:45:49 2010
From: jml at mumak.net (Jonathan Lange)
Date: Sun, 9 May 2010 16:45:49 +0200
Subject: [Twisted-Python] Release again in June?
In-Reply-To: <4468F97D-5EBA-408E-A8DD-5D1589E59610@twistedmatrix.com>
References: <l2pd06a5cd31005030518z572fac09rc1f1ec26b2aaac98@mail.gmail.com>
	<20100503154930.1627.1185606434.divmod.xquotient.3@localhost.localdomain>
	<h2hd06a5cd31005030925z8b65f5c4pa5ff06da33908b6d@mail.gmail.com>
	<4468F97D-5EBA-408E-A8DD-5D1589E59610@twistedmatrix.com>
Message-ID: <AANLkTil0BUHzJmRM9u7u0wT0zkw45MY2KPbGuEMtVjMQ@mail.gmail.com>

On Fri, May 7, 2010 at 10:12 AM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
...
> I also think this sounds great.
> Thanks for stepping forward again, Jonathan.
> I would like to volunteer to be assistant release manager for this release
> so that I can hopefully get out a 10.2 in a timely manner as well.
>

Thanks Glyph!

In that case, I reckon things would work best if we schedule a couple
of blocks of time to do the release so that we can be on IRC at the
same time. Let's do that off-list.

jml



From newptcai at gmail.com  Sun May  9 09:24:00 2010
From: newptcai at gmail.com (Peter Cai)
Date: Sun, 9 May 2010 23:24:00 +0800
Subject: [Twisted-Python] Comparing "Stackless Python + Nonblocking
	Stackless Modules" with Twisted.
Message-ID: <o2ybefee6d81005090824l63d3f53fyc62a9d48f19093ac@mail.gmail.com>

Today, a guy gave me an URL
http://code.google.com/p/stacklessexamples/wiki/StacklessNonblockModules

It's a replacement of standard python socket module. What make it
different is that this module only blocks a tasklet, not an entire
Python thread.

With this module and stackless python, theoretically, we can build a
high concurrency network application framework which has a programming
style close to traditional multi-thread module.

The guy who gave me that URL asked a question, "Which style is better?
The Twited's event-driven style or the imaginary one?"


What do you think about it?  Of course, twisted is an mature framework
we can trust, but doesn't the imaginary one also have pros?

--
look to the things around you,the immediate world around you, if you
are alive,it will mean something to you ——Paul Strand



From dgriff1 at gmail.com  Sun May  9 09:54:26 2010
From: dgriff1 at gmail.com (Daniel Griffin)
Date: Sun, 9 May 2010 10:54:26 -0500
Subject: [Twisted-Python] SQLAlchemy and Twisted
In-Reply-To: <4BE6842E.1040000@imperial.ac.uk>
References: <318F79422ADC5041A93343721F84474D031FE1E4@exchange.mypublisher.local>
	<4BE197A9.4030505@simplistix.co.uk>
	<h2tb302bf881005061204v4db94f57mc74e372c0e795c86@mail.gmail.com>
	<g2t562bcc11005061300v449e5727i8762ec3bd1852014@mail.gmail.com>
	<p2kd79700b91005070353w7bae89edy9f3df7fa59807a9c@mail.gmail.com>
	<g2tf5eea9171005070634sb594f2f0i8dcdfc114e3315b3@mail.gmail.com>
	<z2x75203ae91005070837ub5d1bab7l4e4f62cec2f5b9fd@mail.gmail.com>
	<20100507183558.1660.207845263.divmod.xquotient.1@localhost.localdomain>
	<u2j3db160681005082307r80ad9dd3t4bad05f88e698e65@mail.gmail.com>
	<4BE6842E.1040000@imperial.ac.uk>
Message-ID: <n2k3db160681005090854r36dbf4f8neb6fd44f8f184c69@mail.gmail.com>

That is kind of what I found. In my app I basically have the following
triggered using callLater:

do a select and create a new SSL connection  for each item returned
Wait for the response
Do between 2 and 4 inserts depending on results
Close the connection.

As measured in connections completed per seconds my results have been:

15/second with blocking twisted
7/second using deferred to thread
18/second using SQLalchemy in another process over PB.

I know these are anecdotal but they might help someone else.

The two problems with PB are that you quickly overrun the maximum amount of
FD's available for select reactors and you end up roughly doubling the
amount of DB querying you are doing.

I intend to try using something like ampoule(deferToProcess) but I think I
will have the same problems as with PB since it just uses TCP sockets
anyways.


Dan



On Sun, May 9, 2010 at 4:45 AM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:

> On 05/09/2010 07:07 AM, Daniel Griffin wrote:
> > If you let SQLAlchemy block twisted would there be any impact besides
> > performance?
>
> Depends how long it blocks for, and what else your process is doing.
>
> With the reactor blocked:
>
>  * no socket reads or accepts can be done
>  * no callLater or LoopingCall can be scheduled
>
> ...and so on.
>
> If you've only got a small number of clients and no time-based
> scheduling and you're only blocking for a short time (tens or hundreds
> of milliseconds, say) it may be tolerable.
>
> If the server has a lot of clients, or needs to accept new ones in a
> timely fashion, or has time-based work to do, and your blocking might go
> on for a while, it's probably not tolerable.
>
> I'd avoid it personally (but then I'm utterly unconvinced by ORMs) and
> stick to using SA in a thread as your SQL query layer.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100509/9c828ec3/attachment-0001.html>

From lasizoillo at gmail.com  Sun May  9 10:10:14 2010
From: lasizoillo at gmail.com (lasizoillo)
Date: Sun, 9 May 2010 18:10:14 +0200
Subject: [Twisted-Python] Comparing "Stackless Python + Nonblocking
	Stackless Modules" with Twisted.
In-Reply-To: <o2ybefee6d81005090824l63d3f53fyc62a9d48f19093ac@mail.gmail.com>
References: <o2ybefee6d81005090824l63d3f53fyc62a9d48f19093ac@mail.gmail.com>
Message-ID: <AANLkTimEZgnzuaKLneC-m-46FLy94-dgOUcJmaOJrJjy@mail.gmail.com>

2010/5/9 Peter Cai <newptcai at gmail.com>:
> Today, a guy gave me an URL
> http://code.google.com/p/stacklessexamples/wiki/StacklessNonblockModules
>
> It's a replacement of standard python socket module. What make it
> different is that this module only blocks a tasklet, not an entire
> Python thread.
>

Gevents does monkey patching too and work with standard cpython.

> With this module and stackless python, theoretically, we can build a
> high concurrency network application framework which has a programming
> style close to traditional multi-thread module.
>

This works with pure-python approach, not with a database driver
written in C. If you monkey-patch python threads with your tasklets,
greenlets or anything else your are lost. Mix threaded model for
blocking things and tasklet/greenlet model for non-blocking thing are
not magic :-(

> The guy who gave me that URL asked a question, "Which style is better?
> The Twited's event-driven style or the imaginary one?"
>
>
> What do you think about it?  Of course, twisted is an mature framework
> we can trust, but doesn't the imaginary one also have pros?
>

IMHO (all from here)

Twisted is coherent with itself. Monkey-patched solutions pretends be
coherent with threaded style, but something fails.

Twisted pros:
 * Is not based in a thread style. Forget wich is a non-reentrant lock
and a dead-lock.
 * If you use a twisted library you don't need think about blocking
issues. If you don't use a twisted library, defer to thread.
 * It's mature.

Monkey patched pros:
 * Convert a thread style application to async one don't need a full
rewrite. Maybe it's not easy, but need less LOCs.
 * If your libraries are prue-python you don't need think, only apply
a monkey-patch.
 * Sounds cool.

Excuse my poor english,

Javi



From konrads at smelkovs.com  Sun May  9 14:14:07 2010
From: konrads at smelkovs.com (Konrads Smelkovs)
Date: Sun, 9 May 2010 23:14:07 +0300
Subject: [Twisted-Python] SQLAlchemy and Twisted
In-Reply-To: <20100507183558.1660.207845263.divmod.xquotient.1@localhost.localdomain>
References: <318F79422ADC5041A93343721F84474D031FE1E4@exchange.mypublisher.local>
	<4BE197A9.4030505@simplistix.co.uk>
	<h2tb302bf881005061204v4db94f57mc74e372c0e795c86@mail.gmail.com>
	<g2t562bcc11005061300v449e5727i8762ec3bd1852014@mail.gmail.com>
	<p2kd79700b91005070353w7bae89edy9f3df7fa59807a9c@mail.gmail.com>
	<g2tf5eea9171005070634sb594f2f0i8dcdfc114e3315b3@mail.gmail.com>
	<z2x75203ae91005070837ub5d1bab7l4e4f62cec2f5b9fd@mail.gmail.com>
	<20100507183558.1660.207845263.divmod.xquotient.1@localhost.localdomain>
Message-ID: <AANLkTimtPrvJWUo8-xDPD5eKHaEt5T3MIoZUfalZh0oY@mail.gmail.com>

I think that nice syntax contributes towards adoption. Subclassing
deferred and adding a __get__ function that queues calls for future
Deferreds is at least worth a shot. Perhaps adding a safety net with
allowed function names would help. This list could be per "project" -
storm orm integration would have its StormDeferred and something else
- its own.

2010/5/7, exarkun at twistedmatrix.com <exarkun at twistedmatrix.com>:
> On 03:37 pm, drwxrwxr.x+twistedmail at gmail.com wrote:
>>>(yield resultset[10:20]).sort(Sort.ASC)
>>>
>>>assuming a new enough version of Python.
>>
>>I wonder if it a good idea to subclass Deferred and define __call__()
>>for it, making it attach callbacks to itself.
>>Theoretically should work in earlier versions and make the syntax look
>>more transparent.
>
> Let me clear that up for you, then.
>
> No, this is not a good idea. :)
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>

-- 
Nosūtīts no manas mobilās ierīces

--
Konrads Smelkovs
Applied IT sorcery.



From konrads at smelkovs.com  Sun May  9 14:18:55 2010
From: konrads at smelkovs.com (Konrads Smelkovs)
Date: Sun, 9 May 2010 23:18:55 +0300
Subject: [Twisted-Python] win32com client in a twisted thread
In-Reply-To: <hrqf3o$j66$1@dough.gmane.org>
References: <hrnpug$4i2$1@dough.gmane.org>
	<20100504010612.GA30559@steerpike.home.puzzling.org>
	<hrqf3o$j66$1@dough.gmane.org>
Message-ID: <AANLkTimshLXqbqGkkmMau3aBFkHnaJ3b_8SOhvahRlpD@mail.gmail.com>

perhaps try to defer to a separate process?

2010/5/5, Don Dwiggins <ddwiggins at advpubtech.com>:
> Andrew, Itamar,  thanks.  I've taken the hint to CoInitialize the
> thread.  That gets me a bit further, but there's still some strange
> stuff going on.  I'm going to have to put this on the back burner for a
> while in favor of higher priority stuff.
>
> --
> Don Dwiggins
> Advanced Publishing Technology
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>

-- 
Nosūtīts no manas mobilās ierīces

--
Konrads Smelkovs
Applied IT sorcery.



From glyph at twistedmatrix.com  Sun May  9 14:27:24 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 9 May 2010 16:27:24 -0400
Subject: [Twisted-Python] SQLAlchemy and Twisted
In-Reply-To: <AANLkTimtPrvJWUo8-xDPD5eKHaEt5T3MIoZUfalZh0oY@mail.gmail.com>
References: <318F79422ADC5041A93343721F84474D031FE1E4@exchange.mypublisher.local>
	<4BE197A9.4030505@simplistix.co.uk>
	<h2tb302bf881005061204v4db94f57mc74e372c0e795c86@mail.gmail.com>
	<g2t562bcc11005061300v449e5727i8762ec3bd1852014@mail.gmail.com>
	<p2kd79700b91005070353w7bae89edy9f3df7fa59807a9c@mail.gmail.com>
	<g2tf5eea9171005070634sb594f2f0i8dcdfc114e3315b3@mail.gmail.com>
	<z2x75203ae91005070837ub5d1bab7l4e4f62cec2f5b9fd@mail.gmail.com>
	<20100507183558.1660.207845263.divmod.xquotient.1@localhost.localdomain>
	<AANLkTimtPrvJWUo8-xDPD5eKHaEt5T3MIoZUfalZh0oY@mail.gmail.com>
Message-ID: <2B2E9F42-4A1C-4EF5-AD22-F365D237F65B@twistedmatrix.com>

On May 9, 2010, at 4:14 PM, Konrads Smelkovs wrote:

> I think that nice syntax contributes towards adoption.

Not as much as consistency and coherency.

> Subclassing deferred and adding a __get__ function that queues calls for future
> Deferreds is at least worth a shot.

Nope.

If you want to implement promise pipelining, Deferred is the wrong place to do it.  Maybe try something that wraps up a Deferred.

Composition > Inheritance.

> Perhaps adding a safety net with allowed function names would help.

Deferred already has way too many methods, so you wouldn't be able to pipeline a promise to anything with an 'addCallbacks' or 'addErrbacks'... or 'called' or 'timeoutCall' or 'debug' (etc).

It's important that these catch-all namespaces be clean, so that edge cases don't have extremely surprising behavior.

> This list could be per "project" -
> storm orm integration would have its StormDeferred and something else
> - its own.

I don't even know what this means, but it sounds bad.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100509/21e820bd/attachment.html>

From glyph at twistedmatrix.com  Sun May  9 14:36:31 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 9 May 2010 16:36:31 -0400
Subject: [Twisted-Python] Comparing "Stackless Python + Nonblocking
	Stackless Modules" with Twisted.
In-Reply-To: <o2ybefee6d81005090824l63d3f53fyc62a9d48f19093ac@mail.gmail.com>
References: <o2ybefee6d81005090824l63d3f53fyc62a9d48f19093ac@mail.gmail.com>
Message-ID: <FE0F1450-A684-4986-B6DE-64DC2DABBDBC@twistedmatrix.com>


On May 9, 2010, at 11:24 AM, Peter Cai wrote:

> With this module and stackless python, theoretically, we can build a
> high concurrency network application framework which has a programming
> style close to traditional multi-thread module.
> 
> The guy who gave me that URL asked a question, "Which style is better?
> The Twited's event-driven style or the imaginary one?"

Just to be clear, Imaginary (<http://divmod.org/trac/wiki/DivmodImaginary>) uses Twisted, not Stackless.

> What do you think about it?  Of course, twisted is an mature framework
> we can trust, but doesn't the imaginary one also have pros?

If by "the imaginary one" you mean "the one implemented by stacklesssocket"... you can have both.  If you want stackless-style coroutines with the Twisted mainloop, you even have multiple options!  You can use either Corotwine (<https://launchpad.net/corotwine>) or Eventlet (<http://eventlet.net/>) with its Twisted hub, which should be the default (<http://eventlet.net/doc/hubs.html#eventlet.hubs.get_default_hub>).

In my opinion, Twisted's model is "better" in the sense that it is the superset of the two models: you can implement lightweight tasks on top of Twisted's networking core, but you can't implement Twisted on top of lightweight threads because of the implied potential reentrancy of every call.

happy microthreading,

-g


From andrewfr_ice at yahoo.com  Sun May  9 18:17:35 2010
From: andrewfr_ice at yahoo.com (Andrew Francis)
Date: Sun, 9 May 2010 17:17:35 -0700 (PDT)
Subject: [Twisted-Python] Comparing "Stackless Python + Nonblocking
	Stackless Modules" with Twisted.
In-Reply-To: <mailman.165834.1273418647.23374.twisted-python@twistedmatrix.com>
Message-ID: <626044.31792.qm@web111703.mail.gq1.yahoo.com>

Hi Peter:

Message: 7
Date: Sun, 9 May 2010 23:24:00 +0800
From: Peter Cai <newptcai at gmail.com>
Subject: [Twisted-Python] Comparing "Stackless Python + Nonblocking
    Stackless Modules" with Twisted.
To: Twisted general discussion <twisted-python at twistedmatrix.com>
Message-ID:
    <o2ybefee6d81005090824l63d3f53fyc62a9d48f19093ac at mail.gmail.com>
Content-Type: text/plain; charset=UTF-8

>Today, a guy gave me an URL
>http://code.google.com/p/stacklessexamples/wiki/StacklessNonblockModules

....

>With this module and stackless python, theoretically, we can build a
>high concurrency network application framework which has a programming
>style close to traditional multi-thread module.

Drop the theoretical part.

>The guy who gave me that URL asked a question, "Which style is better?
>The Twited's event-driven style or the imaginary one?" 

>What do you think about it?  Of course, twisted is an mature framework
>we can trust, but doesn't the imaginary one also have pros?


Well stackless python with an asynchronous networking package is not
an imaginary style. Lots of people are using this to great effect (i.e., EVE-Online)-  I'll argue the underlying design pattern is based on 
Doug Schmitt's  half-sync half-async" pattern. The idea of the 
stacklesssocket module is to act as a plug in replacement for the 
various networking packages one may use. Most of the time, things 
work. However I feel there are a few gotchas that one has to be aware
of.

Myself, I use Stackless with Twisted. Outside of a hiccup in the 
later versions (I think I need to set recursion depth for some weird
reason), I am happy. I like the one-stop big box shopping I get from 
using Twisted.

That said, I think for simple network interactions - that is programmes that interact with a single end-point, Twisted is perfectly fine. For that matter, even if one interacts with multiple end-points in parallel, Twisted is fine - use a deferredlist. Most programmes fall into this category. 

I think things get more complex when one is dealing with multiple end-points in sequence (now callbacks are chained) or one is using iterators (cooperators/coiterators now needed?). What light-weight threads do is make things synchronous and make the control flow obvious to the programmer (because one is relying on Python to provide the control flow).
For better or worse, I do stuff pertaining to process orchestration and it is just out there at times.

Cheers,
Andrew








      



From newptcai at gmail.com  Sun May  9 20:57:39 2010
From: newptcai at gmail.com (Peter Cai)
Date: Mon, 10 May 2010 10:57:39 +0800
Subject: [Twisted-Python] Comparing "Stackless Python + Nonblocking
	Stackless Modules" with Twisted.
In-Reply-To: <626044.31792.qm@web111703.mail.gq1.yahoo.com>
References: <mailman.165834.1273418647.23374.twisted-python@twistedmatrix.com>
	<626044.31792.qm@web111703.mail.gq1.yahoo.com>
Message-ID: <i2jbefee6d81005091957qd51f471alf3be6b51c12006b9@mail.gmail.com>

On Mon, May 10, 2010 at 8:17 AM, Andrew Francis <andrewfr_ice at yahoo.com> wrote:
> Hi Peter:

> I think things get more complex when one is dealing with multiple end-points in sequence (now callbacks are chained) or one is using iterators (cooperators/coiterators now needed?). What light-weight threads do is make things synchronous and make the control flow obvious to the programmer (because one is relying on Python to provide the control flow).

I have same feeling that when Twisted got quite complex when one has
to make sequential asynchronous calls because we can't see the flow
control because what to do next is decided in callbacks.

>
> Cheers,
> Andrew
>
>
>
>
>
>
>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
look to the things around you,the immediate world around you, if you
are alive,it will mean something to you ——Paul Strand



From general at vultaire.net  Sun May  9 21:16:55 2010
From: general at vultaire.net (Paul Goins)
Date: Mon, 10 May 2010 12:16:55 +0900
Subject: [Twisted-Python] inlineCallbacks vs explicit callbacks: performance
	concerns?
Message-ID: <4BE77AA7.7070508@vultaire.net>

Question: Is there a performance related reason why Twisted core does
not use inlineCallbacks?

-----

I'm trying to figure out how to reduce the CPU load of an app.  I've
already done a lot of profiling and have trimmed a lot of fat, but we're
still not getting as much throughput as we'd like.  We don't seem to
really be I/O bound in our application, but mostly CPU bound.

One thing we use a lot in our code is the inlineCallbacks decorator.
It's also used by txAMQP, at least in the 0.2 version we are currently
using.  However, I notice it doesn't seem to really be used anywhere in
the Twisted core code; I only see its definition and the defgen test
which uses it.

I'm curious of the reason why Twisted core does not use it.  Is it
performance related?  Compatibility with older Python versions?  Or
something else?

Thanks.

- Paul Goins

----

For those curious, here's what I'm currently facing:

If I count total "internal time" per module (NOT cumulative time), the
current hotspot is twisted.internet.defer with 27.88% of all CPU time.
The per-function breakdown is something like this:

======================= =====================
Line(Function)          Time (total time pct)
======================= =====================
314(_runCallbacks)      7.657
733(_inlineCallbacks)   6.246
833(unwindGenerator)    2.864
172(addCallbacks)       2.103
291(_startRunCallbacks) 1.940
206(addBoth)            1.369
766(gotResult)          1.165
233(callback)           1.014
======================= =====================

Twisted version: 8.2.0.  Profiler: cProfile.

I'm trying to find the best way of getting this down.  It seems like
reducing the raw number of callbacks is probably the best way if
possible.  However, unwindGenerator/_inlineCallbacks by itself takes
almost 10% of the time... hence the above question.



From glyph at twistedmatrix.com  Sun May  9 23:29:31 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 10 May 2010 01:29:31 -0400
Subject: [Twisted-Python] inlineCallbacks vs explicit callbacks:
	performance concerns?
In-Reply-To: <4BE77AA7.7070508@vultaire.net>
References: <4BE77AA7.7070508@vultaire.net>
Message-ID: <1AF0C5AF-4BFE-4A9E-8995-0E5E8E9266CF@twistedmatrix.com>

On May 9, 2010, at 11:16 PM, Paul Goins wrote:

> Question: Is there a performance related reason why Twisted core does not use inlineCallbacks?

Twisted itself (all parts of Twisted, not just Twisted core) does not use inlineCallbacks because it requires syntax only available Python 2.5, and Twisted still supports Python 2.4.

inlineCallbacks does have some overhead, but in the contexts where it's most helpful (sequential tasks where you want to have limited parallelism and lots of asynchronous things happening) that *should* be negligible compared to regular Deferreds.  The place it really starts to bite you is if you just make every method @inlineCallbacks; in that case, not only are you spending a lot of extra time in Deferred methods, you're probably sequentializing a lot of potentially concurrent I/O.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100510/a37f965c/attachment-0001.html>

From xtroce at gmail.com  Mon May 10 11:01:44 2010
From: xtroce at gmail.com (Xtroce)
Date: Mon, 10 May 2010 19:01:44 +0200
Subject: [Twisted-Python] deferreds and unpacking binary data
Message-ID: <AANLkTimgFiraSdCQd_FtNUKjmrbdOpZjJIjNMnfznUZG@mail.gmail.com>

Question: A Protocol should unpack some binary data. this is done in
seperate calls to struct.unpack . Inbetween i do some checks for
length, some strings returned are concatenated using join and logs are
written. This all happens in the factory of the Protocol. To keep the
code unblocking would it be wiser to spawn new Threads from the
Protocol around the whole function, like:
d = threads.deferToThread(self.factory.readPackage, data)
 because it all has to happen after one another anyway.
Or should i split it up in deferreds which if i get it correctly would
mean to create callback functions for each of the unpack()'s, join()'s
and str()'s
thanks



From glyph at twistedmatrix.com  Mon May 10 13:42:23 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 10 May 2010 15:42:23 -0400
Subject: [Twisted-Python] deferreds and unpacking binary data
In-Reply-To: <AANLkTimgFiraSdCQd_FtNUKjmrbdOpZjJIjNMnfznUZG@mail.gmail.com>
References: <AANLkTimgFiraSdCQd_FtNUKjmrbdOpZjJIjNMnfznUZG@mail.gmail.com>
Message-ID: <BEBCFA45-CAEE-4477-824A-431ABD79EF7E@twistedmatrix.com>


On May 10, 2010, at 1:01 PM, Xtroce wrote:

> Question: A Protocol should unpack some binary data. this is done in
> seperate calls to struct.unpack . Inbetween i do some checks for
> length, some strings returned are concatenated using join and logs are
> written. This all happens in the factory of the Protocol. To keep the
> code unblocking would it be wiser to spawn new Threads from the
> Protocol around the whole function, like:
> d = threads.deferToThread(self.factory.readPackage, data)
> because it all has to happen after one another anyway.
> Or should i split it up in deferreds which if i get it correctly would
> mean to create callback functions for each of the unpack()'s, join()'s
> and str()'s
> thanks

If the work is all synchronous (i.e. in-memory manipulations of data, no I/O) then just do it synchronously in the main thread.

If this blocks for a while and you want to parallelize it, it would be a good idea to split it into a separate process rather than doing any of the things you suggest.




From fenimore at gmail.com  Mon May 10 18:04:58 2010
From: fenimore at gmail.com (CARSON DEAN FENIMORE)
Date: Mon, 10 May 2010 18:04:58 -0600
Subject: [Twisted-Python] Sporadic GeneratorExit when using deferredGenerator
Message-ID: <AANLkTik-GDdiTNM1PrCTjCCsPan_42_F954shN2jUg51@mail.gmail.com>

I receive a GeneratorExit occasionally when using Twisted.  Has anyone
noticed this problem?  t I am on python 2.5 - as I understand it,
GeneratorExit derives from StandardError in 2.5, and BaseException in
2.6.  The real problem in my code appears to be that the reference to
my generator itself is being dropped, causing it to become
invalidated. Additionally, the errback/callback chain is not
propagating the error correctly.

Has anyone experienced similar problems?



From glyph at twistedmatrix.com  Mon May 10 18:35:26 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 10 May 2010 20:35:26 -0400
Subject: [Twisted-Python] Sporadic GeneratorExit when using
	deferredGenerator
In-Reply-To: <AANLkTik-GDdiTNM1PrCTjCCsPan_42_F954shN2jUg51@mail.gmail.com>
References: <AANLkTik-GDdiTNM1PrCTjCCsPan_42_F954shN2jUg51@mail.gmail.com>
Message-ID: <00A7A151-B04D-47B8-889C-A5076BBC2683@twistedmatrix.com>


On May 10, 2010, at 8:04 PM, CARSON DEAN FENIMORE wrote:

> I receive a GeneratorExit occasionally when using Twisted.  Has anyone
> noticed this problem?  t I am on python 2.5 - as I understand it,
> GeneratorExit derives from StandardError in 2.5, and BaseException in
> 2.6.  The real problem in my code appears to be that the reference to
> my generator itself is being dropped, causing it to become
> invalidated. Additionally, the errback/callback chain is not
> propagating the error correctly.
> 
> Has anyone experienced similar problems?

I don't know.  Do you have a traceback?  Where do you receive GeneratorExit?



From gabriel at cttc.upc.edu  Tue May 11 02:31:31 2010
From: gabriel at cttc.upc.edu (Gabriel =?ISO-8859-1?Q?Gonz=E1lez?=)
Date: Tue, 11 May 2010 10:31:31 +0200
Subject: [Twisted-Python] Detecting idle connection with
	perspective	broker
In-Reply-To: <u2wd79700b91004300423v8af1384u8e0a22d620919286@mail.gmail.com>
References: <1272622055.3109.41.camel@pcmlevi.cttc.org>
	<u2wd79700b91004300423v8af1384u8e0a22d620919286@mail.gmail.com>
Message-ID: <1273566691.15882.20.camel@pcmlevi.cttc.org>

Thanks! that works for me, now I set a Timeout in server and I can check
if client is connected every 10 seconds.
But now I have a last question about what's the better way to delete the
User(avatar) instance when the logout is done. In my logout method I
delete database entries about the disconnected user, but how can I do to
clean User(avatarID) instance and where I have to do that.

Thanks
Gabriel.



On Fri, 2010-04-30 at 14:23 +0300, Konrads Smelkovs wrote:
> A simple solution could be to implement a ping method with client and
> have server ping client once every N seconds. At the same time, fire a
> delayed call for N+5 seconds. if delayed call is executed first, drop
> connection.
> --
> Konrads Smelkovs
> Applied IT sorcery.
> 
> 
> 2010/4/30 Gabriel González <gabriel at cttc.upc.edu>
>         Hi there,
>         I wrote a small server application with PB but now I have some
>         problem
>         with client disconnection. When I have a idle connection, the
>         logout
>         method at server never is called (this method let me have a
>         list of
>         current logged users) and then client appears always connected
>         to
>         server.
>         
>         I can see the same issue with the chatserver example from
>         perspective
>         broker doc with detached method.
>         
>         class ChatRealm:
>             implements(portal.IRealm)
>             def requestAvatar(self, avatarID, mind, *interfaces):
>                 assert pb.IPerspective in interfaces
>                 avatar = User(avatarID)
>                 avatar.server = self.server
>                 avatar.attached(mind)
>                 return pb.IPerspective, avatar, lambda
>         a=avatar:a.detached(mind)
>         
>         How can I detect that idle connection clients to call detached
>         method?
>         
>         Thanks!
>         
>         
>         
>         
>         
>         
>         
>         
>         
>         
>         --
>         Aquest missatge ha estat analitzat per MailScanner
>         a la cerca de virus i d'altres continguts perillosos,
>         i es considera que està net.
>         
>         
>         
>         _______________________________________________
>         Twisted-Python mailing list
>         Twisted-Python at twistedmatrix.com
>         http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>         
> 
> 
> -- 
> Aquest missatge ha estat analitzat per MailScanner 
> a la cerca de virus i d'altres continguts perillosos, 
> i es considera que está net. 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-- 
Aquest missatge ha estat analitzat per MailScanner
a la cerca de virus i d'altres continguts perillosos,
i es considera que est� net.




From gabriele.lanaro at gmail.com  Tue May 11 04:20:27 2010
From: gabriele.lanaro at gmail.com (Gabriele Lanaro)
Date: Tue, 11 May 2010 12:20:27 +0200
Subject: [Twisted-Python] suggestion for a file transfer protocol
In-Reply-To: <AANLkTinkXxlbzFbTZUgPnn0Xnx99904i-M5Ai7Vqk_-2@mail.gmail.com>
References: <AANLkTinkXxlbzFbTZUgPnn0Xnx99904i-M5Ai7Vqk_-2@mail.gmail.com>
Message-ID: <AANLkTimDQJ21zmleuOzX-k6v2BE4MxN54GpozzGcvCb5@mail.gmail.com>

I'm trying to develop a simple application that let communicate two
computers in a LAN for transferring files. My idea is that:

using dbus/zeroconf each machine can see other's service and can connect
with it (I need something without authentication or so)

having a lan with 2 machines

A asks B if he can send a file

if B accepts, begin transferring
if B refuse, send an error back

It would be nice to transfer big files (not loaded all in memory) and the
ability to stop/resume the upload/download and the integrity check.

Is there a protocol that let me do this stuff or is better to implement a
protocol on my own? (I'd like that the system is flexible to further extend
for example, implement shared folders and so on)

In the latter case it's convenient to use one port or two ports like ftp
does?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100511/b6ca2983/attachment.html>

From donal.mcmullan at gmail.com  Tue May 11 06:17:40 2010
From: donal.mcmullan at gmail.com (Donal McMullan)
Date: Wed, 12 May 2010 00:17:40 +1200
Subject: [Twisted-Python] listenTCP in a TAC
Message-ID: <AANLkTikajlVI59lBEO2S_XoIKWkG-IA-00_IqQoTHzqW@mail.gmail.com>

I've got a server application that listens on a port, and when clients
connect, spawns another TCP service on a random port that can live
from a few seconds, up to a day or two.

I had some problems getting this to work with
twisted.application.internet.TCPServer (my services wouldn't stop
listening when I'd finished with them) but it's working ok with plain
old reactor.listenTCP.

I don't really grok the TAC thing yet, or why there's a different
method for spawning servers within an Application. Is my listenTCP
approach bad practice for some reason that's not apparent to me?

Thanks!

Donal



From godson.g at gmail.com  Tue May 11 06:44:27 2010
From: godson.g at gmail.com (Godson Gera)
Date: Tue, 11 May 2010 18:14:27 +0530
Subject: [Twisted-Python] listenTCP in a TAC
In-Reply-To: <AANLkTikajlVI59lBEO2S_XoIKWkG-IA-00_IqQoTHzqW@mail.gmail.com>
References: <AANLkTikajlVI59lBEO2S_XoIKWkG-IA-00_IqQoTHzqW@mail.gmail.com>
Message-ID: <AANLkTilvjbHX5xeJC1KC1cFK2zdUSXBQWke0NTmkobpd@mail.gmail.com>

you can call 'disownServiceParent' when you don't want them to be in service
any more. That will cause it to stop listening.

http://twistedmatrix.com/documents/10.0.0/api/twisted.application.service.Service.html#disownServiceParent


On Tue, May 11, 2010 at 5:47 PM, Donal McMullan <donal.mcmullan at gmail.com>wrote:

> I've got a server application that listens on a port, and when clients
> connect, spawns another TCP service on a random port that can live
> from a few seconds, up to a day or two.
>
> I had some problems getting this to work with
> twisted.application.internet.TCPServer (my services wouldn't stop
> listening when I'd finished with them) but it's working ok with plain
> old reactor.listenTCP.
>
> I don't really grok the TAC thing yet, or why there's a different
> method for spawning servers within an Application. Is my listenTCP
> approach bad practice for some reason that's not apparent to me?
>
> Thanks!
>
> Donal
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Thanks & Regards,
Godson Gera
IVR India <http://godson.in>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100511/1a833b66/attachment.html>

From exarkun at twistedmatrix.com  Mon May 10 16:59:35 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 10 May 2010 22:59:35 -0000
Subject: [Twisted-Python] Comparing "Stackless Python +
	Nonblocking	Stackless Modules" with Twisted.
In-Reply-To: <i2jbefee6d81005091957qd51f471alf3be6b51c12006b9@mail.gmail.com>
References: <mailman.165834.1273418647.23374.twisted-python@twistedmatrix.com>
	<626044.31792.qm@web111703.mail.gq1.yahoo.com>
	<i2jbefee6d81005091957qd51f471alf3be6b51c12006b9@mail.gmail.com>
Message-ID: <20100510225935.1843.356763267.divmod.xquotient.11@localhost.localdomain>

On 02:57 am, newptcai at gmail.com wrote:
>On Mon, May 10, 2010 at 8:17 AM, Andrew Francis 
><andrewfr_ice at yahoo.com> wrote:
>>Hi Peter:
>
>>I think things get more complex when one is dealing with multiple end- 
>>points in sequence (now callbacks are chained) or one is using 
>>iterators (cooperators/coiterators now needed?). What light-weight 
>>threads do is make things synchronous and make the control flow 
>>obvious to the programmer (because one is relying on Python to provide 
>>the control flow).
>
>I have same feeling that when Twisted got quite complex when one has
>to make sequential asynchronous calls because we can't see the flow
>control because what to do next is decided in callbacks.

If you find the simple building blocks for concurrency in Twisted to not 
allow you express solutions in a clear way, that may mean that you need 
some more expressive tools to use in solving your problems.  Perhaps you 
can construct these out of the building blocks Twisted provides. 
Equally worth considering is that there may be some more expressive 
tools in Twisted already.

For example, have you looked at the cooperator API (which Andrew was 
referring to)?

http://twistedmatrix.com/documents/current/api/twisted.internet.task.html#cooperate

Jean-Paul



From itamar at itamarst.org  Tue May 11 07:02:17 2010
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Tue, 11 May 2010 09:02:17 -0400
Subject: [Twisted-Python] listenTCP in a TAC
In-Reply-To: <AANLkTikajlVI59lBEO2S_XoIKWkG-IA-00_IqQoTHzqW@mail.gmail.com>
References: <AANLkTikajlVI59lBEO2S_XoIKWkG-IA-00_IqQoTHzqW@mail.gmail.com>
Message-ID: <1273582937.31649.850.camel@pintsize>

On Wed, 2010-05-12 at 00:17 +1200, Donal McMullan wrote:

> I don't really grok the TAC thing yet, or why there's a different
> method for spawning servers within an Application. Is my listenTCP
> approach bad practice for some reason that's not apparent to me?

Services are things that can be started and stopped, that's all.
Typically you'd write your own custom logic here, but Twisted also
provides wrappers around listenTCP and friends to make them look like
Services. You don't have to use them if you don't want to.




From donal.mcmullan at gmail.com  Tue May 11 07:11:24 2010
From: donal.mcmullan at gmail.com (Donal McMullan)
Date: Wed, 12 May 2010 01:11:24 +1200
Subject: [Twisted-Python] listenTCP in a TAC
In-Reply-To: <AANLkTilvjbHX5xeJC1KC1cFK2zdUSXBQWke0NTmkobpd@mail.gmail.com>
References: <AANLkTikajlVI59lBEO2S_XoIKWkG-IA-00_IqQoTHzqW@mail.gmail.com>
	<AANLkTilvjbHX5xeJC1KC1cFK2zdUSXBQWke0NTmkobpd@mail.gmail.com>
Message-ID: <AANLkTinqQbvmRyTM6ZfP63KmYCWoXUhb2bAdlUvmLjLf@mail.gmail.com>

Hi Godson - thanks for the reply... I had tried disowning the parent.
I was actually getting unexpected behaviour on setServiceParent, but
that's another story. I'll try again with TCPServer tomorrow, but for
now I'm just keen to know if there are any bad interactions between
Applications and listenTCP.

Thanks

D



On 12 May 2010 00:44, Godson Gera <godson.g at gmail.com> wrote:
> you can call 'disownServiceParent' when you don't want them to be in service
> any more. That will cause it to stop listening.
>
> http://twistedmatrix.com/documents/10.0.0/api/twisted.application.service.Service.html#disownServiceParent
>
>
> On Tue, May 11, 2010 at 5:47 PM, Donal McMullan <donal.mcmullan at gmail.com>
> wrote:
>>
>> I've got a server application that listens on a port, and when clients
>> connect, spawns another TCP service on a random port that can live
>> from a few seconds, up to a day or two.
>>
>> I had some problems getting this to work with
>> twisted.application.internet.TCPServer (my services wouldn't stop
>> listening when I'd finished with them) but it's working ok with plain
>> old reactor.listenTCP.
>>
>> I don't really grok the TAC thing yet, or why there's a different
>> method for spawning servers within an Application. Is my listenTCP
>> approach bad practice for some reason that's not apparent to me?
>>
>> Thanks!
>>
>> Donal
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> --
> Thanks & Regards,
> Godson Gera
> IVR India
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>



From donal.mcmullan at gmail.com  Tue May 11 07:12:19 2010
From: donal.mcmullan at gmail.com (Donal McMullan)
Date: Wed, 12 May 2010 01:12:19 +1200
Subject: [Twisted-Python] listenTCP in a TAC
In-Reply-To: <1273582937.31649.850.camel@pintsize>
References: <AANLkTikajlVI59lBEO2S_XoIKWkG-IA-00_IqQoTHzqW@mail.gmail.com>
	<1273582937.31649.850.camel@pintsize>
Message-ID: <AANLkTikSgfMmSBgHW3BzT7d_paL7wf79cl8Qvx5Rva6q@mail.gmail.com>

On 12 May 2010 01:02, Itamar Turner-Trauring <itamar at itamarst.org> wrote:
> On Wed, 2010-05-12 at 00:17 +1200, Donal McMullan wrote:
>
>> I don't really grok the TAC thing yet, or why there's a different
>> method for spawning servers within an Application. Is my listenTCP
>> approach bad practice for some reason that's not apparent to me?
>
> Services are things that can be started and stopped, that's all.
> Typically you'd write your own custom logic here, but Twisted also
> provides wrappers around listenTCP and friends to make them look like
> Services. You don't have to use them if you don't want to.

Great - thanks Itamar!



From exarkun at twistedmatrix.com  Tue May 11 07:42:10 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 11 May 2010 13:42:10 -0000
Subject: [Twisted-Python] Detecting idle connection with perspective
	broker
In-Reply-To: <1273566691.15882.20.camel@pcmlevi.cttc.org>
References: <1272622055.3109.41.camel@pcmlevi.cttc.org>
	<u2wd79700b91004300423v8af1384u8e0a22d620919286@mail.gmail.com>
	<1273566691.15882.20.camel@pcmlevi.cttc.org>
Message-ID: <20100511134210.1854.1050470360.divmod.xquotient.3@localhost.localdomain>

On 08:31 am, gabriel at cttc.upc.edu wrote:
>Thanks! that works for me, now I set a Timeout in server and I can 
>check
>if client is connected every 10 seconds.
>But now I have a last question about what's the better way to delete 
>the
>User(avatar) instance when the logout is done. In my logout method I
>delete database entries about the disconnected user, but how can I do 
>to
>clean User(avatarID) instance and where I have to do that.

The object will be collected by Python automatically when there are no 
more references to it.

Jean-Paul



From dripton at ripton.net  Tue May 11 09:17:51 2010
From: dripton at ripton.net (David Ripton)
Date: Tue, 11 May 2010 08:17:51 -0700
Subject: [Twisted-Python] suggestion for a file transfer protocol
In-Reply-To: <AANLkTimDQJ21zmleuOzX-k6v2BE4MxN54GpozzGcvCb5@mail.gmail.com>
References: <AANLkTinkXxlbzFbTZUgPnn0Xnx99904i-M5Ai7Vqk_-2@mail.gmail.com>
	<AANLkTimDQJ21zmleuOzX-k6v2BE4MxN54GpozzGcvCb5@mail.gmail.com>
Message-ID: <20100511151750.GA2779@vidar.dreamhost.com>

On 2010.05.11 12:20:27 +0200, Gabriele Lanaro wrote:
> I'm trying to develop a simple application that let communicate two
> computers in a LAN for transferring files. My idea is that:
> 
> using dbus/zeroconf each machine can see other's service and can connect
> with it (I need something without authentication or so)

It's a good concept, as long as all machines are on the same subnet and
they all have a zeroconf client installed.

I've had very bad experience with the old version of dbus-python that
ships with RHEL 5.  It just doesn't work reliably.  But if you're on a
more modern distrobution with newer versions of everything, maybe it'll
all work great.

> having a lan with 2 machines
> 
> A asks B if he can send a file
> 
> if B accepts, begin transferring
> if B refuse, send an error back
> 
> It would be nice to transfer big files (not loaded all in memory) and the
> ability to stop/resume the upload/download and the integrity check.
> 
> Is there a protocol that let me do this stuff or is better to implement a
> protocol on my own? (I'd like that the system is flexible to further extend
> for example, implement shared folders and so on)

If a pre-built program like scp or rsync doesn't do exactly what you
want, and you want the ability to extend it later, then I think it's
reasonable to do your own protocol.

> In the latter case it's convenient to use one port or two ports like ftp
> does?

I prefer to only use one port if possible, because it's simpler.  And it
simplifies dealing with firewalls, if you ever have to do that.  As long
as you split large files into reasonably small chunks so the data
packets don't cause excessive latency for the control packets, it should
work fine.

-- 
David Ripton    dripton at ripton.net



From pm-twisted-python at anapol.cz  Tue May 11 13:54:38 2010
From: pm-twisted-python at anapol.cz (Petr Mifek)
Date: Tue, 11 May 2010 21:54:38 +0200
Subject: [Twisted-Python] txriak module released.
In-Reply-To: <1541138433.551272144614766.JavaMail.rgacote@Raymond-Cotes-MacBook-Pro.local>
References: <1541138433.551272144614766.JavaMail.rgacote@Raymond-Cotes-MacBook-Pro.local>
Message-ID: <4BE9B5FE.9020606@anapol.cz>

Hi Ray,

that is a great news! I'm already using it in a project. Did I miss a 
wiki/page for it or so far none exists? Considered putting the source up 
to http://github.com or similar site to allow for easy following the 
code, extending & fixing issues?

Cheers, Petr

Ray Cote wrote:
> Hello Twisted:
>
> An initial release of txriak has been posted to PyPI:
>   <http://pypi.python.org/pypi/txriak/0.1.1>
>
> txriak is a Twisted module for communicating with Basho Technology's Riak data store via the HTTP interface. 
> Written in Python, it requires Python 2.5 since it uses the yield version of deferreds.
> Initial release was written to match as closely as possible the 0.9 riak.py Python module released by Basho Technologies. 
>
> Hope others find this to be useful. 
> Look forward to comments and feedback. 
> --R
>
>
>   



From konrads at smelkovs.com  Tue May 11 14:40:53 2010
From: konrads at smelkovs.com (Konrads Smelkovs)
Date: Tue, 11 May 2010 23:40:53 +0300
Subject: [Twisted-Python] suggestion for a file transfer protocol
In-Reply-To: <AANLkTimDQJ21zmleuOzX-k6v2BE4MxN54GpozzGcvCb5@mail.gmail.com>
References: <AANLkTinkXxlbzFbTZUgPnn0Xnx99904i-M5Ai7Vqk_-2@mail.gmail.com>
	<AANLkTimDQJ21zmleuOzX-k6v2BE4MxN54GpozzGcvCb5@mail.gmail.com>
Message-ID: <AANLkTikPfCWWnU1MZK05Q2NeHMTuZa2Llu_KmJIBuESq@mail.gmail.com>

You can do with Pb and Consumer/Producer. Things that use low level
interfaces such as sendfile on linux will be more efficient and you
may want to consider setting up an http server and just handing out
links.

2010/5/11, Gabriele Lanaro <gabriele.lanaro at gmail.com>:
> I'm trying to develop a simple application that let communicate two
> computers in a LAN for transferring files. My idea is that:
>
> using dbus/zeroconf each machine can see other's service and can connect
> with it (I need something without authentication or so)
>
> having a lan with 2 machines
>
> A asks B if he can send a file
>
> if B accepts, begin transferring
> if B refuse, send an error back
>
> It would be nice to transfer big files (not loaded all in memory) and the
> ability to stop/resume the upload/download and the integrity check.
>
> Is there a protocol that let me do this stuff or is better to implement a
> protocol on my own? (I'd like that the system is flexible to further extend
> for example, implement shared folders and so on)
>
> In the latter case it's convenient to use one port or two ports like ftp
> does?
>

-- 
Nosūtīts no manas mobilās ierīces

--
Konrads Smelkovs
Applied IT sorcery.



From rgacote at appropriatesolutions.com  Tue May 11 15:31:23 2010
From: rgacote at appropriatesolutions.com (Ray Cote)
Date: Tue, 11 May 2010 17:31:23 -0400 (EDT)
Subject: [Twisted-Python] txriak module released.
In-Reply-To: <4BE9B78A.9050408@anapol.cz>
Message-ID: <6550610.8731273614386192.JavaMail.rgacote@ip-210.Corp.AppropriateSolutions.com>

Hi Petr: 
Glad to hear you're finding the txriak module useful. 
Guess I need to make sure that all the listing pages are pointing to each other, and that they eventually point to the bitbucket sources. 

Look forward to hearing feedback. 
Thanks
--Ray

----- Original Message -----
From: "Petr Mifek" <Petr.Mifek at anapol.cz>
To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Cc: "Ray Cote" <rgacote at AppropriateSolutions.com>
Sent: Tuesday, May 11, 2010 4:01:14 PM GMT -05:00 US/Canada Eastern
Subject: Re: [Twisted-Python] txriak module released.

Ah, scratch that. Found the 0.2.1 update with bitbucket homepage set ;)

Petr Mifek wrote:
> Hi Ray,
>
> that is a great news! I'm already using it in a project. Did I miss a 
> wiki/page for it or so far none exists? Considered putting the source up 
> to http://github.com or similar site to allow for easy following the 
> code, extending & fixing issues?
>
> Cheers, Petr
>
> Ray Cote wrote:
>   
>> Hello Twisted:
>>
>> An initial release of txriak has been posted to PyPI:
>>   <http://pypi.python.org/pypi/txriak/0.1.1>
>>
>> txriak is a Twisted module for communicating with Basho Technology's Riak data store via the HTTP interface. 
>> Written in Python, it requires Python 2.5 since it uses the yield version of deferreds.
>> Initial release was written to match as closely as possible the 0.9 riak.py Python module released by Basho Technologies. 
>>
>> Hope others find this to be useful. 
>> Look forward to comments and feedback. 
>> --R
>>
>>
>>   
>>     
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>   

-- 
Ray Cote, President
Appropriate Solutions, Inc.
We Build Software
603.924.6079



From fenimore at gmail.com  Tue May 11 18:28:04 2010
From: fenimore at gmail.com (CARSON DEAN FENIMORE)
Date: Tue, 11 May 2010 18:28:04 -0600
Subject: [Twisted-Python] Sporadic GeneratorExit when using
	deferredGenerator
In-Reply-To: <00A7A151-B04D-47B8-889C-A5076BBC2683@twistedmatrix.com>
References: <AANLkTik-GDdiTNM1PrCTjCCsPan_42_F954shN2jUg51@mail.gmail.com>
	<00A7A151-B04D-47B8-889C-A5076BBC2683@twistedmatrix.com>
Message-ID: <AANLkTilVLMjROZb84HOjadZ-rdq6YwQ-u1hPeRfGUd4p@mail.gmail.com>

Just FYI: The problem appears to have gone away with some minor
changes.  We have twisted in use in a large application, which
consists of many threads.  These threads were invoking some
twisted-related methods; for example, calling addCallback on a
Deferred instance from one thread, while running a deferredGenerator
in twisted -- this, of course, is not thread safe!  Except for a
handful of such cases, we were using twisted correctly - adding
callbacks on the main thread solved the issue at hand.



On Mon, May 10, 2010 at 6:35 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
>
> On May 10, 2010, at 8:04 PM, CARSON DEAN FENIMORE wrote:
>
>> I receive a GeneratorExit occasionally when using Twisted.  Has anyone
>> noticed this problem?  t I am on python 2.5 - as I understand it,
>> GeneratorExit derives from StandardError in 2.5, and BaseException in
>> 2.6.  The real problem in my code appears to be that the reference to
>> my generator itself is being dropped, causing it to become
>> invalidated. Additionally, the errback/callback chain is not
>> propagating the error correctly.
>>
>> Has anyone experienced similar problems?
>
> I don't know.  Do you have a traceback?  Where do you receive GeneratorExit?
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From glyph at twistedmatrix.com  Wed May 12 03:08:26 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 12 May 2010 05:08:26 -0400
Subject: [Twisted-Python] Sporadic GeneratorExit when using
	deferredGenerator
In-Reply-To: <AANLkTilVLMjROZb84HOjadZ-rdq6YwQ-u1hPeRfGUd4p@mail.gmail.com>
References: <AANLkTik-GDdiTNM1PrCTjCCsPan_42_F954shN2jUg51@mail.gmail.com>
	<00A7A151-B04D-47B8-889C-A5076BBC2683@twistedmatrix.com>
	<AANLkTilVLMjROZb84HOjadZ-rdq6YwQ-u1hPeRfGUd4p@mail.gmail.com>
Message-ID: <05569420-82AB-4832-A0AA-64016DEFB473@twistedmatrix.com>


On May 11, 2010, at 8:28 PM, CARSON DEAN FENIMORE wrote:

> Just FYI: The problem appears to have gone away with some minor
> changes.  We have twisted in use in a large application, which
> consists of many threads.  These threads were invoking some
> twisted-related methods; for example, calling addCallback on a
> Deferred instance from one thread, while running a deferredGenerator
> in twisted -- this, of course, is not thread safe!  Except for a
> handful of such cases, we were using twisted correctly - adding
> callbacks on the main thread solved the issue at hand.

Glad you solved your problem, and thanks for reporting your conclusions here so future readers don't have to wonder what the heck was going on! :)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100512/f3efbb27/attachment-0001.html>

From gabriel at cttc.upc.edu  Wed May 12 03:36:31 2010
From: gabriel at cttc.upc.edu (Gabriel =?ISO-8859-1?Q?Gonz=E1lez?=)
Date: Wed, 12 May 2010 11:36:31 +0200
Subject: [Twisted-Python] Detecting idle connection with
	perspective	broker
In-Reply-To: <20100511134210.1854.1050470360.divmod.xquotient.3@localhost.localdomain>
References: <1272622055.3109.41.camel@pcmlevi.cttc.org>
	<u2wd79700b91004300423v8af1384u8e0a22d620919286@mail.gmail.com>
	<1273566691.15882.20.camel@pcmlevi.cttc.org>
	<20100511134210.1854.1050470360.divmod.xquotient.3@localhost.localdomain>
Message-ID: <1273656991.10054.19.camel@pcmlevi.cttc.org>

Ok, and there's any method to know when this object will be collected or
if really don't have more references?. How can I know what users are
logged for PB to test if these objects have been deleted correctly? 

thanks,

Gabriel

On Tue, 2010-05-11 at 13:42 +0000, exarkun at twistedmatrix.com wrote:
> On 08:31 am, gabriel at cttc.upc.edu wrote:
> >Thanks! that works for me, now I set a Timeout in server and I can 
> >check
> >if client is connected every 10 seconds.
> >But now I have a last question about what's the better way to delete 
> >the
> >User(avatar) instance when the logout is done. In my logout method I
> >delete database entries about the disconnected user, but how can I do 
> >to
> >clean User(avatarID) instance and where I have to do that.
> 
> The object will be collected by Python automatically when there are no 
> more references to it.
> 
> Jean-Paul
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 


-- 
Aquest missatge ha estat analitzat per MailScanner
a la cerca de virus i d'altres continguts perillosos,
i es considera que est� net.




From gabriele.lanaro at gmail.com  Wed May 12 06:32:51 2010
From: gabriele.lanaro at gmail.com (Gabriele Lanaro)
Date: Wed, 12 May 2010 14:32:51 +0200
Subject: [Twisted-Python] suggestion for a file transfer protocol
In-Reply-To: <AANLkTikPfCWWnU1MZK05Q2NeHMTuZa2Llu_KmJIBuESq@mail.gmail.com>
References: <AANLkTinkXxlbzFbTZUgPnn0Xnx99904i-M5Ai7Vqk_-2@mail.gmail.com>
	<AANLkTimDQJ21zmleuOzX-k6v2BE4MxN54GpozzGcvCb5@mail.gmail.com>
	<AANLkTikPfCWWnU1MZK05Q2NeHMTuZa2Llu_KmJIBuESq@mail.gmail.com>
Message-ID: <AANLkTilTN67a9_fZKTywaeCLuUuL7FWpbaMMiHLGH86Y@mail.gmail.com>

Thank you very much for you help,  the twisted community is really helpful!

For now I'll use PB and ConsumerProducer and if it's not sufficient I'll
hack around the BitTorrent protocol (using the twisted implementation in the
BitTorrent client).

Thank you very much for the help!

- Gabriele

2010/5/11 Konrads Smelkovs <konrads at smelkovs.com>

> You can do with Pb and Consumer/Producer. Things that use low level
> interfaces such as sendfile on linux will be more efficient and you
> may want to consider setting up an http server and just handing out
> links.
>
> 2010/5/11, Gabriele Lanaro <gabriele.lanaro at gmail.com>:
> > I'm trying to develop a simple application that let communicate two
> > computers in a LAN for transferring files. My idea is that:
> >
> > using dbus/zeroconf each machine can see other's service and can connect
> > with it (I need something without authentication or so)
> >
> > having a lan with 2 machines
> >
> > A asks B if he can send a file
> >
> > if B accepts, begin transferring
> > if B refuse, send an error back
> >
> > It would be nice to transfer big files (not loaded all in memory) and the
> > ability to stop/resume the upload/download and the integrity check.
> >
> > Is there a protocol that let me do this stuff or is better to implement a
> > protocol on my own? (I'd like that the system is flexible to further
> extend
> > for example, implement shared folders and so on)
> >
> > In the latter case it's convenient to use one port or two ports like ftp
> > does?
> >
>
> --
> Nosūtīts no manas mobilās ierīces
>
> --
> Konrads Smelkovs
> Applied IT sorcery.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100512/dc45aea4/attachment.html>

From exarkun at twistedmatrix.com  Thu May 13 07:56:40 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 13 May 2010 13:56:40 -0000
Subject: [Twisted-Python] Detecting idle connection with perspective
	broker
In-Reply-To: <1273656991.10054.19.camel@pcmlevi.cttc.org>
References: <1272622055.3109.41.camel@pcmlevi.cttc.org>
	<u2wd79700b91004300423v8af1384u8e0a22d620919286@mail.gmail.com>
	<1273566691.15882.20.camel@pcmlevi.cttc.org>
	<20100511134210.1854.1050470360.divmod.xquotient.3@localhost.localdomain>
	<1273656991.10054.19.camel@pcmlevi.cttc.org>
Message-ID: <20100513135640.1694.1204282360.divmod.xquotient.6@localhost.localdomain>

On 12 May, 09:36 am, gabriel at cttc.upc.edu wrote:
>Ok, and there's any method to know when this object will be collected 
>or
>if really don't have more references?. How can I know what users are
>logged for PB to test if these objects have been deleted correctly?

The realm (which you supply) creates all the user objects.  So you're in 
complete control.  If you want your realm to track all the users it has 
created, it can.

Jean-Paul
>
>thanks,
>
>Gabriel
>
>On Tue, 2010-05-11 at 13:42 +0000, exarkun at twistedmatrix.com wrote:
>>On 08:31 am, gabriel at cttc.upc.edu wrote:
>> >Thanks! that works for me, now I set a Timeout in server and I can
>> >check
>> >if client is connected every 10 seconds.
>> >But now I have a last question about what's the better way to delete
>> >the
>> >User(avatar) instance when the logout is done. In my logout method I
>> >delete database entries about the disconnected user, but how can I do
>> >to
>> >clean User(avatarID) instance and where I have to do that.
>>
>>The object will be collected by Python automatically when there are no
>>more references to it.
>>
>>Jean-Paul
>>
>>_______________________________________________
>>Twisted-Python mailing list
>>Twisted-Python at twistedmatrix.com
>>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>--
>Aquest missatge ha estat analitzat per MailScanner
>a la cerca de virus i d'altres continguts perillosos,
>i es considera que est�FDet.



From gabriel at cttc.upc.edu  Fri May 14 02:42:47 2010
From: gabriel at cttc.upc.edu (Gabriel =?ISO-8859-1?Q?Gonz=E1lez?=)
Date: Fri, 14 May 2010 10:42:47 +0200
Subject: [Twisted-Python] Detecting idle connection with
	perspective	broker
In-Reply-To: <20100513135640.1694.1204282360.divmod.xquotient.6@localhost.localdomain>
References: <1272622055.3109.41.camel@pcmlevi.cttc.org>
	<u2wd79700b91004300423v8af1384u8e0a22d620919286@mail.gmail.com>
	<1273566691.15882.20.camel@pcmlevi.cttc.org>
	<20100511134210.1854.1050470360.divmod.xquotient.3@localhost.localdomain>
	<1273656991.10054.19.camel@pcmlevi.cttc.org>
	<20100513135640.1694.1204282360.divmod.xquotient.6@localhost.localdomain>
Message-ID: <1273826567.4898.10.camel@pcmlevi.cttc.org>

ok, thanks!

Gabriel.

On Thu, 2010-05-13 at 13:56 +0000, exarkun at twistedmatrix.com wrote:
> On 12 May, 09:36 am, gabriel at cttc.upc.edu wrote:
> >Ok, and there's any method to know when this object will be collected 
> >or
> >if really don't have more references?. How can I know what users are
> >logged for PB to test if these objects have been deleted correctly?
> 
> The realm (which you supply) creates all the user objects.  So you're in 
> complete control.  If you want your realm to track all the users it has 
> created, it can.
> 
> Jean-Paul
> >
> >thanks,
> >
> >Gabriel
> >
> >On Tue, 2010-05-11 at 13:42 +0000, exarkun at twistedmatrix.com wrote:
> >>On 08:31 am, gabriel at cttc.upc.edu wrote:
> >> >Thanks! that works for me, now I set a Timeout in server and I can
> >> >check
> >> >if client is connected every 10 seconds.
> >> >But now I have a last question about what's the better way to delete
> >> >the
> >> >User(avatar) instance when the logout is done. In my logout method I
> >> >delete database entries about the disconnected user, but how can I do
> >> >to
> >> >clean User(avatarID) instance and where I have to do that.
> >>
> >>The object will be collected by Python automatically when there are no
> >>more references to it.
> >>
> >>Jean-Paul
> >>
> >>_______________________________________________
> >>Twisted-Python mailing list
> >>Twisted-Python at twistedmatrix.com
> >>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
> >
> >--
> >Aquest missatge ha estat analitzat per MailScanner
> >a la cerca de virus i d'altres continguts perillosos,
> >i es considera que estFDet.
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-- 
Aquest missatge ha estat analitzat per MailScanner
a la cerca de virus i d'altres continguts perillosos,
i es considera que est� net.




From exarkun at twistedmatrix.com  Sat May 15 22:05:46 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 16 May 2010 04:05:46 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1273982746.94.148536951@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100516/64a0efe9/attachment-0001.html>

From foom at fuhm.net  Fri May 21 09:41:20 2010
From: foom at fuhm.net (James Y Knight)
Date: Fri, 21 May 2010 11:41:20 -0400
Subject: [Twisted-Python] Test, plz ignore
Message-ID: <32B8F60D-73CB-408F-A2DD-7ADFBE3B90AA@fuhm.net>

test mail.



From gabriele.lanaro at gmail.com  Sat May 22 12:35:16 2010
From: gabriele.lanaro at gmail.com (Gabriele Lanaro)
Date: Sat, 22 May 2010 20:35:16 +0200
Subject: [Twisted-Python] Sending large files over network with perspective
	broker
Message-ID: <AANLkTil5QrvNyr2t20UbOVWqr2UkgcfOD9jGZtDikkDj@mail.gmail.com>

I'm writing a gtk application that transfer files in LAN. The application
has a server and can spawn different clients (one for each file to send) .
The flow between client and server is something like that:

client asks pb.Root a FileSender ( that is conceptually a perspective).
The client receive the file sender.
The client declares the size and the basename of the file he is sending,
requiring authorization to send.
The server perform authorization and passes to the client a unique key to
start the file transfer.
The client performs the file transfer in "chunks". Each chunk is passed
throught a remote method, send_chunk.

The file transfer is done "recursively", each send_chunk deferred generates
a new deferred for the next chunk.

Some pseudocode to understand better my solution.

FileSender:
    remote_get_auth():
    remote_request_for_sending(filename, size): return secret
    remote send_chunk(secred, chunk_no, data): save the chunk somewhere

Client()
    proceed_sending():

          chunk_tot = CHUNK_TOT
          chunk_no = 0

          def send(_)
                if chunk_no == CHUNK_TOT: return
                else:
                     ... read data...
                    d = filesender.callRemote("send_chunk", secret,
chunk_no, data)
                    d.addCallback(send)

I've done in this way so a new chunk is sent only if the previous chunk was
sent.
The problem of this approach is that this blocks my GUI, I can't figure out
why because I'm just generating deffereds so it souldn't block.

I've seen the page about Consumer and Producer, however I can't figure out
how to integrate producer and consumers in a Perspective Broker based code.

Can someone help me?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100522/0650ce3c/attachment.html>

From jasonjwwilliams at gmail.com  Sat May 22 13:23:54 2010
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Sat, 22 May 2010 13:23:54 -0600
Subject: [Twisted-Python] Sending large files over network with
	perspective broker
In-Reply-To: <AANLkTil5QrvNyr2t20UbOVWqr2UkgcfOD9jGZtDikkDj@mail.gmail.com>
References: <AANLkTil5QrvNyr2t20UbOVWqr2UkgcfOD9jGZtDikkDj@mail.gmail.com>
Message-ID: <AANLkTinzUEktla5K_JBfXAF3acBNZZxa1yT4E4BYXrVY@mail.gmail.com>

Does send_chuck or callRemote block?

-J

On Sat, May 22, 2010 at 12:35 PM, Gabriele Lanaro
<gabriele.lanaro at gmail.com> wrote:
> I'm writing a gtk application that transfer files in LAN. The application
> has a server and can spawn different clients (one for each file to send) .
> The flow between client and server is something like that:
>
> client asks pb.Root a FileSender ( that is conceptually a perspective).
> The client receive the file sender.
> The client declares the size and the basename of the file he is sending,
> requiring authorization to send.
> The server perform authorization and passes to the client a unique key to
> start the file transfer.
> The client performs the file transfer in "chunks". Each chunk is passed
> throught a remote method, send_chunk.
>
> The file transfer is done "recursively", each send_chunk deferred generates
> a new deferred for the next chunk.
>
> Some pseudocode to understand better my solution.
>
> FileSender:
>     remote_get_auth():
>     remote_request_for_sending(filename, size): return secret
>     remote send_chunk(secred, chunk_no, data): save the chunk somewhere
>
> Client()
>     proceed_sending():
>
>           chunk_tot = CHUNK_TOT
>           chunk_no = 0
>
>           def send(_)
>                 if chunk_no == CHUNK_TOT: return
>                 else:
>                      ... read data...
>                     d = filesender.callRemote("send_chunk", secret,
> chunk_no, data)
>                     d.addCallback(send)
>
> I've done in this way so a new chunk is sent only if the previous chunk was
> sent.
> The problem of this approach is that this blocks my GUI, I can't figure out
> why because I'm just generating deffereds so it souldn't block.
>
> I've seen the page about Consumer and Producer, however I can't figure out
> how to integrate producer and consumers in a Perspective Broker based code.
>
> Can someone help me?
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>



From glyph at twistedmatrix.com  Sat May 22 18:26:33 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 22 May 2010 20:26:33 -0400
Subject: [Twisted-Python] major changes, release engineering,
	and learning cost
Message-ID: <FCCC3CD5-0A5D-48A0-B679-24D43968175F@twistedmatrix.com>

The nice thing about Twisted's compatibility policy is that developers, and even users, very rarely have problems when installing a new version of Twisted.  While this is a nice benefit, the current strategy of developing features in a compatible way does have a couple of costs, and I'd like to see if we can address them without giving up the benefit.  I have a suggestion for a process tweak which would hopefully mitigate some of the difficulties which arise due to the compatibility policy.

When we add a new feature that supersedes an older one, or fix a bug in Twisted that involves changing behavior, the developer fixing it has to come up with a new name.  If we have several behavior-changing bugfixes in the same subsystem, that means that developers using Twisted may have to learn about 3 different symbol names.  Since we tend to avoid just suffixing names with numbers (for good reason, I think), they won't have to learn Bicycle, Bicycle2, Bicycle3, they'll have to learn Bicycle, then Footcycle, and finally Velocipede, and somehow infer that Velocipede is the newest/best name that they should be using, by reading the (hopefully clear, concise) warnings that come out of their unit tests.

This came up again recently on a ticket about URLPath,  <http://twistedmatrix.com/trac/ticket/2625#comment:16>, where a contributor suggested that it would be better to make a whole new module because it's easier for external developers to learn about that then learn about an individual method change.  This of course raises the question: if we're going to have a whole new URL class, shouldn't it fix the (numerous) *other* bugs that we know about in URLPath?

Up until now the objection to doing things this way is that it results in gigantic branches which are intractable to review.  That's a good objection, but it leaves us with a false dichotomy; reliable software and painless upgrades with a random scattershot of new features that are hard to understand, or coherent iterations of technology which can't be effectively reviewed, and therefore can't be effectively quality controlled.

I propose that we get the best of both worlds by changing the way we do reviews slightly.  Right now every code review needs to be done on an entire feature going to trunk, and _all_ of the code going to trunk needs to be reviewed at once.  I suggest that instead, we create "integration branches" for sensible constellations of features, and have a two-stage review process.

For example, let's say I want to work on making URLPath good.  There are several tickets addressing it:

<http://twistedmatrix.com/trac/ticket/2093>
<http://twistedmatrix.com/trac/ticket/2094>
<http://twistedmatrix.com/trac/ticket/2625>

For the sake of argument, let's all pretend these are all deeply interrelated and involve changes to behavior of existing methods.  I think that is sort of true of most of these, but it would be far too verbose to talk about *how*, and get bogged down in that discussion.

First, I'd make an integration ticket, let's call it #ABCD, describing how these features are related and a brief outline of the new API I propose which resolves them.

Then I'd create an integration branch from trunk, for that ticket.  From the #ABCD branch, I'd create a branch for #2093, and put it up for review.  The reviewer would review #2093 as usual, citing any test coverage issues, documentation issues, etc.  After the usual review process, when I get an "OK to merge", I would merge #2093 *to the #ABCD branch*, not trunk.

I would repeat this process for #2094 and #2625, merging each to the #ABCD branch as they passed review.

Finally, I'd put #ABCD itself up for review.  At this point the process would differ a bit.  Reviewers would be able to assume, at this point, that the potentially large body of code in #ABCD had already been reviewed, that the test cases were good, the documentation was reasonably clear, and the logic made sense.  This final review would be a quick sanity check, to make sure the tests still pass and that there are no conflicts.

I would like to strongly emphasize that this point in the process would be an inappropriate time for reviewers to start arguing with each other over what is required for the branch to land, disputing the original specification, etc; this is just an opportunity to spot potential regressions before it lands.  Each ticket review for a component of the larger feature should be an opportunity to draw attention to the direction of the larger feature development and prompt discussion.  This *might* be an appropriate point to note that some other behavior-changing feature had been left out, though.

In the case that there *were* conflicts, this would be an opportunity to review the conflict resolution itself.

(We saw a nascent version of this approach on some stuff related to <http://twistedmatrix.com/trac/ticket/886> and it was hugely painful because nobody was really sure what the process was supposed to be.  So let's not do it like that again.)

So: thoughts?  Does this make sense as a policy change for facilitating the development of major new features or consolidating behavior-changing fixes into easier-to-understand units?




From db3l.net at gmail.com  Sat May 22 20:22:28 2010
From: db3l.net at gmail.com (David Bolen)
Date: Sat, 22 May 2010 22:22:28 -0400
Subject: [Twisted-Python] Sending large files over network with
	perspective broker
References: <AANLkTil5QrvNyr2t20UbOVWqr2UkgcfOD9jGZtDikkDj@mail.gmail.com>
Message-ID: <m2632fjr17.fsf@valheru.db3l.homeip.net>

Gabriele Lanaro <gabriele.lanaro at gmail.com> writes:

> The problem of this approach is that this blocks my GUI, I can't figure out
> why because I'm just generating deffereds so it souldn't block.

Just using deferreds won't help unless you still manage to return
control back up the chain to the main event loop.  I suspect something
must be blocking somewhere, though hard to say from the pseudo-code.
Most likely a few judiciously placed logging statements would let you
see where, or at least verify that you are not returning to the main
event loop during the transfer.

I will say that chunking up a large transfer through individual PB
requests adds a bit of overhead for a large stream, and unless you
implement some sort of windowing protocol, can hurt performance due to
the latency needed to wait for the ACK from the server for each chunk.

I had what appears to be a similar requirement in terms of
transmitting a large file (A/V files to be published) as part of an
overall PB session, and decided to separate it out to its own file
upload server component coordinated through the PB session.

http://twistedmatrix.com/pipermail/twisted-python/2007-July/015738.html
has some further details on what I ended up doing.  Perhaps an approach
along these lines would work for you as well.

-- David




From exarkun at twistedmatrix.com  Sat May 22 22:05:24 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 23 May 2010 04:05:24 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1274587524.91.358928552@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100523/73bd12c3/attachment.html>

From jvalenzuela1977 at gmail.com  Sun May 23 01:59:42 2010
From: jvalenzuela1977 at gmail.com (Jason Valenzuela)
Date: Sun, 23 May 2010 15:59:42 +0800
Subject: [Twisted-Python] PB referenceable and cacheable
In-Reply-To: <FCCC3CD5-0A5D-48A0-B679-24D43968175F@twistedmatrix.com>
References: <FCCC3CD5-0A5D-48A0-B679-24D43968175F@twistedmatrix.com>
Message-ID: <4BF8E06E.8010505@gmail.com>

In an effort to learn Twisted, I am working on a set of small client and 
server applications which utilize PB as IPC. The server hosts a group of 
simple parameters that clients may monitor or set. For a client to 
monitor a parameter's value, it seems that the server should create the 
parameter as a cacheable. To allow a client to modify the parameter, a 
referenceable looks like the right path. Of course, I would like to 
consume cake as well as posses it, wanting properties of both cacheable 
and referenceable. Looking at the source code, it doesn't look like 
subclassing from both pb.referenceable and pb.cacheable is a good idea 
as each has different ideas on how to get jellied. Currently, I'm 
thinking about just creating the parameter as a normal object that 
contains two PB objects: a referenceable and a cacheable. The former 
handles incoming requests to change the parameter's value, and the 
latter keeping clients updated with the current value. Is that a sane 
approach, or am I reinventing the wheel?


Thanks,
Jason Valenzuela




From gabriele.lanaro at gmail.com  Sun May 23 04:55:04 2010
From: gabriele.lanaro at gmail.com (Gabriele Lanaro)
Date: Sun, 23 May 2010 12:55:04 +0200
Subject: [Twisted-Python] Sending large files over network with
	perspective broker
In-Reply-To: <m2632fjr17.fsf@valheru.db3l.homeip.net>
References: <AANLkTil5QrvNyr2t20UbOVWqr2UkgcfOD9jGZtDikkDj@mail.gmail.com>
	<m2632fjr17.fsf@valheru.db3l.homeip.net>
Message-ID: <AANLkTinGjNcQyorbzo1r7bObO7Gmu9VpqKsSh-trov1Q@mail.gmail.com>

Thank you very much for your responses, the problem seems to appear when in
my tests I send the file "to myself", when I send files over the network,
the things goes well.  I suspect (it's just a suspect) that the code spawns
too much deferreds too much fast, causing the loop not to complete (or
something like that).

Anyway I think I'll follow your suggestion and I'll end splitting up the
upload service and the control/authorization one, since the code can grow up
too complex and performance is a requirement.

- Gabriele

2010/5/23 David Bolen <db3l.net at gmail.com>

> Gabriele Lanaro <gabriele.lanaro at gmail.com> writes:
>
> > The problem of this approach is that this blocks my GUI, I can't figure
> out
> > why because I'm just generating deffereds so it souldn't block.
>
> Just using deferreds won't help unless you still manage to return
> control back up the chain to the main event loop.  I suspect something
> must be blocking somewhere, though hard to say from the pseudo-code.
> Most likely a few judiciously placed logging statements would let you
> see where, or at least verify that you are not returning to the main
> event loop during the transfer.
>
> I will say that chunking up a large transfer through individual PB
> requests adds a bit of overhead for a large stream, and unless you
> implement some sort of windowing protocol, can hurt performance due to
> the latency needed to wait for the ACK from the server for each chunk.
>
> I had what appears to be a similar requirement in terms of
> transmitting a large file (A/V files to be published) as part of an
> overall PB session, and decided to separate it out to its own file
> upload server component coordinated through the PB session.
>
> http://twistedmatrix.com/pipermail/twisted-python/2007-July/015738.html
> has some further details on what I ended up doing.  Perhaps an approach
> along these lines would work for you as well.
>
> -- David
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100523/0b780667/attachment.html>

From gabriele.lanaro at gmail.com  Sun May 23 06:08:54 2010
From: gabriele.lanaro at gmail.com (Gabriele Lanaro)
Date: Sun, 23 May 2010 14:08:54 +0200
Subject: [Twisted-Python] Sending large files over network with
	perspective broker
In-Reply-To: <AANLkTinGjNcQyorbzo1r7bObO7Gmu9VpqKsSh-trov1Q@mail.gmail.com>
References: <AANLkTil5QrvNyr2t20UbOVWqr2UkgcfOD9jGZtDikkDj@mail.gmail.com>
	<m2632fjr17.fsf@valheru.db3l.homeip.net>
	<AANLkTinGjNcQyorbzo1r7bObO7Gmu9VpqKsSh-trov1Q@mail.gmail.com>
Message-ID: <AANLkTimUckRnF7hvJT3z1k128oNcLxoyVeYMz56k6w71@mail.gmail.com>

After putting some strategical sleeps seems that the problem is that the
application is the server and the client at once, I think that this
generates a "loop" in the mainloop.

2010/5/23 Gabriele Lanaro <gabriele.lanaro at gmail.com>

> Thank you very much for your responses, the problem seems to appear when in
> my tests I send the file "to myself", when I send files over the network,
> the things goes well.  I suspect (it's just a suspect) that the code spawns
> too much deferreds too much fast, causing the loop not to complete (or
> something like that).
>
> Anyway I think I'll follow your suggestion and I'll end splitting up the
> upload service and the control/authorization one, since the code can grow up
> too complex and performance is a requirement.
>
> - Gabriele
>
> 2010/5/23 David Bolen <db3l.net at gmail.com>
>
> Gabriele Lanaro <gabriele.lanaro at gmail.com> writes:
>>
>> > The problem of this approach is that this blocks my GUI, I can't figure
>> out
>> > why because I'm just generating deffereds so it souldn't block.
>>
>> Just using deferreds won't help unless you still manage to return
>> control back up the chain to the main event loop.  I suspect something
>> must be blocking somewhere, though hard to say from the pseudo-code.
>> Most likely a few judiciously placed logging statements would let you
>> see where, or at least verify that you are not returning to the main
>> event loop during the transfer.
>>
>> I will say that chunking up a large transfer through individual PB
>> requests adds a bit of overhead for a large stream, and unless you
>> implement some sort of windowing protocol, can hurt performance due to
>> the latency needed to wait for the ACK from the server for each chunk.
>>
>> I had what appears to be a similar requirement in terms of
>> transmitting a large file (A/V files to be published) as part of an
>> overall PB session, and decided to separate it out to its own file
>> upload server component coordinated through the PB session.
>>
>> http://twistedmatrix.com/pipermail/twisted-python/2007-July/015738.html
>> has some further details on what I ended up doing.  Perhaps an approach
>> along these lines would work for you as well.
>>
>> -- David
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100523/116f3262/attachment.html>

From gabriele.lanaro at gmail.com  Sun May 23 06:21:57 2010
From: gabriele.lanaro at gmail.com (Gabriele Lanaro)
Date: Sun, 23 May 2010 14:21:57 +0200
Subject: [Twisted-Python] Sending large files over network with
	perspective broker
In-Reply-To: <AANLkTimUckRnF7hvJT3z1k128oNcLxoyVeYMz56k6w71@mail.gmail.com>
References: <AANLkTil5QrvNyr2t20UbOVWqr2UkgcfOD9jGZtDikkDj@mail.gmail.com>
	<m2632fjr17.fsf@valheru.db3l.homeip.net>
	<AANLkTinGjNcQyorbzo1r7bObO7Gmu9VpqKsSh-trov1Q@mail.gmail.com>
	<AANLkTimUckRnF7hvJT3z1k128oNcLxoyVeYMz56k6w71@mail.gmail.com>
Message-ID: <AANLkTil_ie8STx5Itqq3dWNoCq4lHXnbwDyOLu1iBkft@mail.gmail.com>

Finally I managed to solve myself this obscure bug. I put the
reactor.iterate() call before spawning new callbacks, in this way I force
the mainloop to complete the cycle. The pseudocode would be modified in this
way:

Client()
    proceed_sending():

          chunk_tot = CHUNK_TOT
          chunk_no = 0

          def send(_)
                if chunk_no == CHUNK_TOT: return
                else:
                     ... read data...
                    reactor.iterate()
<---------------------------------------------------------- THIS LINE
                    d = filesender.callRemote("send_
chunk", secret, chunk_no, data)
                    d.addCallback(send)



2010/5/23 Gabriele Lanaro <gabriele.lanaro at gmail.com>

> After putting some strategical sleeps seems that the problem is that the
> application is the server and the client at once, I think that this
> generates a "loop" in the mainloop.
>
> 2010/5/23 Gabriele Lanaro <gabriele.lanaro at gmail.com>
>
> Thank you very much for your responses, the problem seems to appear when in
>> my tests I send the file "to myself", when I send files over the network,
>> the things goes well.  I suspect (it's just a suspect) that the code spawns
>> too much deferreds too much fast, causing the loop not to complete (or
>> something like that).
>>
>> Anyway I think I'll follow your suggestion and I'll end splitting up the
>> upload service and the control/authorization one, since the code can grow up
>> too complex and performance is a requirement.
>>
>> - Gabriele
>>
>> 2010/5/23 David Bolen <db3l.net at gmail.com>
>>
>> Gabriele Lanaro <gabriele.lanaro at gmail.com> writes:
>>>
>>> > The problem of this approach is that this blocks my GUI, I can't figure
>>> out
>>> > why because I'm just generating deffereds so it souldn't block.
>>>
>>> Just using deferreds won't help unless you still manage to return
>>> control back up the chain to the main event loop.  I suspect something
>>> must be blocking somewhere, though hard to say from the pseudo-code.
>>> Most likely a few judiciously placed logging statements would let you
>>> see where, or at least verify that you are not returning to the main
>>> event loop during the transfer.
>>>
>>> I will say that chunking up a large transfer through individual PB
>>> requests adds a bit of overhead for a large stream, and unless you
>>> implement some sort of windowing protocol, can hurt performance due to
>>> the latency needed to wait for the ACK from the server for each chunk.
>>>
>>> I had what appears to be a similar requirement in terms of
>>> transmitting a large file (A/V files to be published) as part of an
>>> overall PB session, and decided to separate it out to its own file
>>> upload server component coordinated through the PB session.
>>>
>>> http://twistedmatrix.com/pipermail/twisted-python/2007-July/015738.html
>>> has some further details on what I ended up doing.  Perhaps an approach
>>> along these lines would work for you as well.
>>>
>>> -- David
>>>
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100523/28d7220b/attachment.html>

From moxie at thoughtcrime.org  Sun May 23 09:42:37 2010
From: moxie at thoughtcrime.org (Moxie Marlinspike)
Date: Sun, 23 May 2010 11:42:37 -0400
Subject: [Twisted-Python] Reactor Spinning?
In-Reply-To: <3973.63.107.91.99.1273078873.squirrel@webmail.zoteca.com>
References: <4BE025C2.5010205@thoughtcrime.org>	<20100504214240.1642.1501163969.divmod.xquotient.9@localhost.localdomain>	<4BE17F3E.1060800@thoughtcrime.org>
	<3973.63.107.91.99.1273078873.squirrel@webmail.zoteca.com>
Message-ID: <4BF94CED.6060406@thoughtcrime.org>


Hey everyone, I've still been trying to track down this spin bug.  What
I probably should have mentioned before is that these are SSL
connections.  Looking through the 10.0 release code, I found the
_sendCloseAlert method in tcp.py: http://pastebin.com/gZKxHtN5

I feel like this is almost certainly the culprit.  Most suspiciously,
there's an explicit empty write on pastebin-line 23:

os.write(self.socket.fileno(), '')

It looks to me like there's a code path where this write "succeeds," the
SSL socket reports that the connection is still not shut down, and then
the transport is resumed via startWriting and startReading.  I assume
that this then repeats for as long as that socket is up.
This directly corresponds with the system calls I'm seeing (poll, empty
write, poll, empty write...)

I still don't have an entirely comprehensive grasp of whats' going on
here, but while these efforts to "cleanly" shut down the SSL connection
by exchanging alerts are heroic, I feel like it's much more common (and
probably good enough) to just send an alert and immediately close the
underlying socket.

- moxie

-- 
http://www.thoughtcrime.org

On 05/05/2010 01:01 PM, Itamar Turner-Trauring wrote:
>>
>> I've confirmed that when spinning the FD corresponds with a client
>> connection.  What would you suggest logging that might provide some
>> insight?
> 
> What is the transport's writeSomeData() method doing? Is it actually
> trying to write an empty string? Transition from/to writeable state may
> also be interesting, along with logging size of transport's buffer (so
> logging in stopWriting/startWriting).
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 



From ploutosss at gmail.com  Sun May 23 09:54:52 2010
From: ploutosss at gmail.com (Viktor Klimov)
Date: Sun, 23 May 2010 19:54:52 +0400
Subject: [Twisted-Python] PB and unstable network
Message-ID: <AANLkTilMJwEDDbRzyeZdjIDZ6PGlj6x5FHq4c-QovDXY@mail.gmail.com>

I use PB in unstable network. The server remembers the last answer.
Client detection disconnected, connected again, makes entry into the
system and calls the function returns the last response
(get_last_response). The answer, it returns a deferred saved earlier.
If somewhere an error cycle repeats.

All of this works until the lost communication does not happen at a
time when Twisted sends data to a server. As the server in this
situation does not receive a first request, and when you call
get_last_response client receives the data that has already received.

How can I check if an error in the client arrived data to the server or not?



From exarkun at twistedmatrix.com  Sun May 23 10:30:44 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 23 May 2010 16:30:44 -0000
Subject: [Twisted-Python] Sending large files over network
	with	perspective broker
In-Reply-To: <AANLkTil_ie8STx5Itqq3dWNoCq4lHXnbwDyOLu1iBkft@mail.gmail.com>
References: <AANLkTil5QrvNyr2t20UbOVWqr2UkgcfOD9jGZtDikkDj@mail.gmail.com>
	<m2632fjr17.fsf@valheru.db3l.homeip.net>
	<AANLkTinGjNcQyorbzo1r7bObO7Gmu9VpqKsSh-trov1Q@mail.gmail.com>
	<AANLkTimUckRnF7hvJT3z1k128oNcLxoyVeYMz56k6w71@mail.gmail.com>
	<AANLkTil_ie8STx5Itqq3dWNoCq4lHXnbwDyOLu1iBkft@mail.gmail.com>
Message-ID: <20100523163044.1749.1340666766.divmod.xquotient.0@localhost.localdomain>

On 12:21 pm, gabriele.lanaro at gmail.com wrote:
>Finally I managed to solve myself this obscure bug. I put the
>reactor.iterate() call before spawning new callbacks, in this way I 
>force
>the mainloop to complete the cycle. The pseudocode would be modified in 
>this
>way:
>
>Client()
>    proceed_sending():
>
>          chunk_tot = CHUNK_TOT
>          chunk_no = 0
>
>          def send(_)
>                if chunk_no == CHUNK_TOT: return
>                else:
>                     ... read data...
>                    reactor.iterate()
><---------------------------------------------------------- THIS LINE
>                    d = filesender.callRemote("send_
>chunk", secret, chunk_no, data)
>                    d.addCallback(send)

Erm.  Sorry.  This isn't a solution to whatever problem you're having. 
It is entirely invalid to use reactor.iterate() in this way.

Jean-Paul



From gabriele.lanaro at gmail.com  Sun May 23 16:36:46 2010
From: gabriele.lanaro at gmail.com (Gabriele Lanaro)
Date: Mon, 24 May 2010 00:36:46 +0200
Subject: [Twisted-Python] Sending large files over network with
	perspective broker
In-Reply-To: <20100523163044.1749.1340666766.divmod.xquotient.0@localhost.localdomain>
References: <AANLkTil5QrvNyr2t20UbOVWqr2UkgcfOD9jGZtDikkDj@mail.gmail.com>
	<m2632fjr17.fsf@valheru.db3l.homeip.net>
	<AANLkTinGjNcQyorbzo1r7bObO7Gmu9VpqKsSh-trov1Q@mail.gmail.com>
	<AANLkTimUckRnF7hvJT3z1k128oNcLxoyVeYMz56k6w71@mail.gmail.com>
	<AANLkTil_ie8STx5Itqq3dWNoCq4lHXnbwDyOLu1iBkft@mail.gmail.com>
	<20100523163044.1749.1340666766.divmod.xquotient.0@localhost.localdomain>
Message-ID: <AANLkTikURkhafcdK0oKdsyeVoYn1lwp1u5MTAbwHFONi@mail.gmail.com>

In which sense it's invalid? I don't know how the gtk reactor works, I just
guessed that the event loop never reaches the gui events. My idea was to
force the processing of these events before spawning another deferred, it's
just a workaround, the real problem is  the fact that the server and the
client resides in  the same loop (for testing).

Which can be the reason of the mainloop "block"?

2010/5/23 <exarkun at twistedmatrix.com>

> On 12:21 pm, gabriele.lanaro at gmail.com wrote:
> >Finally I managed to solve myself this obscure bug. I put the
> >reactor.iterate() call before spawning new callbacks, in this way I
> >force
> >the mainloop to complete the cycle. The pseudocode would be modified in
> >this
> >way:
> >
> >Client()
> >    proceed_sending():
> >
> >          chunk_tot = CHUNK_TOT
> >          chunk_no = 0
> >
> >          def send(_)
> >                if chunk_no == CHUNK_TOT: return
> >                else:
> >                     ... read data...
> >                    reactor.iterate()
> ><---------------------------------------------------------- THIS LINE
> >                    d = filesender.callRemote("send_
> >chunk", secret, chunk_no, data)
> >                    d.addCallback(send)
>
> Erm.  Sorry.  This isn't a solution to whatever problem you're having.
> It is entirely invalid to use reactor.iterate() in this way.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100524/65d1bb03/attachment.html>

From glyph at twistedmatrix.com  Sun May 23 19:16:34 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 23 May 2010 21:16:34 -0400
Subject: [Twisted-Python] Sending large files over network with
	perspective broker
In-Reply-To: <AANLkTikURkhafcdK0oKdsyeVoYn1lwp1u5MTAbwHFONi@mail.gmail.com>
References: <AANLkTil5QrvNyr2t20UbOVWqr2UkgcfOD9jGZtDikkDj@mail.gmail.com>
	<m2632fjr17.fsf@valheru.db3l.homeip.net>
	<AANLkTinGjNcQyorbzo1r7bObO7Gmu9VpqKsSh-trov1Q@mail.gmail.com>
	<AANLkTimUckRnF7hvJT3z1k128oNcLxoyVeYMz56k6w71@mail.gmail.com>
	<AANLkTil_ie8STx5Itqq3dWNoCq4lHXnbwDyOLu1iBkft@mail.gmail.com>
	<20100523163044.1749.1340666766.divmod.xquotient.0@localhost.localdomain>
	<AANLkTikURkhafcdK0oKdsyeVoYn1lwp1u5MTAbwHFONi@mail.gmail.com>
Message-ID: <788800C0-70A6-4866-A1A0-503250DD4F21@twistedmatrix.com>


On May 23, 2010, at 6:36 PM, Gabriele Lanaro wrote:

> In which sense it's invalid? I don't know how the gtk reactor works, I just guessed that the event loop never reaches the gui events. My idea was to force the processing of these events before spawning another deferred, it's just a workaround, the real problem is  the fact that the server and the client resides in  the same loop (for testing).

It's invalid to run reactor.iterate() inside the reactor mainloop.  You can't force event-processing order in Twisted; if you want an event to not get processed, you need to delay its event source from getting invoked (producer.pauseProducing(), transport.stopReading(), transport.stopWriting(), Deferred.pause() are all ways to do this).

It's invalid to use reactor.iterate() in this way because the reactor may invoke you reentrantly and there's no sane way to handle that.

For example, your code is running because select() said your file descriptor was ready for reading, which then invoked dataReceived, which then invoked your method with buffered data, which then called iterate(), which then called dataReceived, which then called your method with buffered data, which then called iterate(), which then ...
(and so on, forever, unless your application code conflicts with itself and running and starts blowing up and throwing incomprehensible tracebacks everywhere because of "impossible" recursion.

> Which can be the reason of the mainloop "block"?

Lots of reasons.  The example you gave wasn't syntactically valid Python, so it's hard to say.  Consider sending along an <http://sscce.org/> and maybe we can tell you more :).




From glyph at twistedmatrix.com  Sun May 23 19:19:32 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 23 May 2010 21:19:32 -0400
Subject: [Twisted-Python] PB and unstable network
In-Reply-To: <AANLkTilMJwEDDbRzyeZdjIDZ6PGlj6x5FHq4c-QovDXY@mail.gmail.com>
References: <AANLkTilMJwEDDbRzyeZdjIDZ6PGlj6x5FHq4c-QovDXY@mail.gmail.com>
Message-ID: <1D9536C6-75DE-4934-982B-3B0485D526F0@twistedmatrix.com>

On May 23, 2010, at 11:54 AM, Viktor Klimov wrote:

> I use PB in unstable network. The server remembers the last answer.
> Client detection disconnected, connected again, makes entry into the
> system and calls the function returns the last response
> (get_last_response). The answer, it returns a deferred saved earlier.
> If somewhere an error cycle repeats.
> 
> All of this works until the lost communication does not happen at a
> time when Twisted sends data to a server. As the server in this
> situation does not receive a first request, and when you call
> get_last_response client receives the data that has already received.
> 
> How can I check if an error in the client arrived data to the server or not?

Hi Viktor,

I try not to give people a hard time about bad English, but I am having a hard time reading your message.  There are a couple of different things I think you might mean and it would be confusing if I tried to explain them all.

Perhaps you could attach some Python code that explains exactly what you mean?




From exarkun at twistedmatrix.com  Sun May 23 20:35:32 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 24 May 2010 02:35:32 -0000
Subject: [Twisted-Python] major changes, release engineering,
	and learning cost
In-Reply-To: <FCCC3CD5-0A5D-48A0-B679-24D43968175F@twistedmatrix.com>
References: <FCCC3CD5-0A5D-48A0-B679-24D43968175F@twistedmatrix.com>
Message-ID: <20100524023532.1749.465645627.divmod.xquotient.37@localhost.localdomain>

On 23 May, 12:26 am, glyph at twistedmatrix.com wrote:
>The nice thing about Twisted's compatibility policy is that developers, 
>and even users, very rarely have problems when installing a new version 
>of Twisted.  While this is a nice benefit, the current strategy of 
>developing features in a compatible way does have a couple of costs, 
>and I'd like to see if we can address them without giving up the 
>benefit.  I have a suggestion for a process tweak which would hopefully 
>mitigate some of the difficulties which arise due to the compatibility 
>policy.
>
>When we add a new feature that supersedes an older one, or fix a bug in 
>Twisted that involves changing behavior, the developer fixing it has to 
>come up with a new name.  If we have several behavior-changing bugfixes 
>in the same subsystem, that means that developers using Twisted may 
>have to learn about 3 different symbol names.  Since we tend to avoid 
>just suffixing names with numbers (for good reason, I think), they 
>won't have to learn Bicycle, Bicycle2, Bicycle3, they'll have to learn 
>Bicycle, then Footcycle, and finally Velocipede, and somehow infer that 
>Velocipede is the newest/best name that they should be using, by 
>reading the (hopefully clear, concise) warnings that come out of their 
>unit tests.
>
>This came up again recently on a ticket about URLPath, 
><http://twistedmatrix.com/trac/ticket/2625#comment:16>, where a 
>contributor suggested that it would be better to make a whole new 
>module because it's easier for external developers to learn about that 
>then learn about an individual method change.  This of course raises 
>the question: if we're going to have a whole new URL class, shouldn't 
>it fix the (numerous) *other* bugs that we know about in URLPath?
>
>Up until now the objection to doing things this way is that it results 
>in gigantic branches which are intractable to review.  That's a good 
>objection, but it leaves us with a false dichotomy; reliable software 
>and painless upgrades with a random scattershot of new features that 
>are hard to understand, or coherent iterations of technology which 
>can't be effectively reviewed, and therefore can't be effectively 
>quality controlled.
>
>I propose that we get the best of both worlds by changing the way we do 
>reviews slightly.  Right now every code review needs to be done on an 
>entire feature going to trunk, and _all_ of the code going to trunk 
>needs to be reviewed at once.  I suggest that instead, we create 
>"integration branches" for sensible constellations of features, and 
>have a two-stage review process.
>
>For example, let's say I want to work on making URLPath good.  There 
>are several tickets addressing it:
>
><http://twistedmatrix.com/trac/ticket/2093>
><http://twistedmatrix.com/trac/ticket/2094>
><http://twistedmatrix.com/trac/ticket/2625>
>
>For the sake of argument, let's all pretend these are all deeply 
>interrelated and involve changes to behavior of existing methods.  I 
>think that is sort of true of most of these, but it would be far too 
>verbose to talk about *how*, and get bogged down in that discussion.
>
>First, I'd make an integration ticket, let's call it #ABCD, describing 
>how these features are related and a brief outline of the new API I 
>propose which resolves them.
>
>Then I'd create an integration branch from trunk, for that ticket. 
> From the #ABCD branch, I'd create a branch for #2093, and put it up for 
>review.  The reviewer would review #2093 as usual, citing any test 
>coverage issues, documentation issues, etc.  After the usual review 
>process, when I get an "OK to merge", I would merge #2093 *to the #ABCD 
>branch*, not trunk.
>
>I would repeat this process for #2094 and #2625, merging each to the 
>#ABCD branch as they passed review.
>
>Finally, I'd put #ABCD itself up for review.  At this point the process 
>would differ a bit.  Reviewers would be able to assume, at this point, 
>that the potentially large body of code in #ABCD had already been 
>reviewed, that the test cases were good, the documentation was 
>reasonably clear, and the logic made sense.  This final review would be 
>a quick sanity check, to make sure the tests still pass and that there 
>are no conflicts.
>
>I would like to strongly emphasize that this point in the process would 
>be an inappropriate time for reviewers to start arguing with each other 
>over what is required for the branch to land, disputing the original 
>specification, etc; this is just an opportunity to spot potential 
>regressions before it lands.  Each ticket review for a component of the 
>larger feature should be an opportunity to draw attention to the 
>direction of the larger feature development and prompt discussion. 
>This *might* be an appropriate point to note that some other behavior- 
>changing feature had been left out, though.
>
>In the case that there *were* conflicts, this would be an opportunity 
>to review the conflict resolution itself.
>
>(We saw a nascent version of this approach on some stuff related to 
><http://twistedmatrix.com/trac/ticket/886> and it was hugely painful 
>because nobody was really sure what the process was supposed to be.  So 
>let's not do it like that again.)
>
>So: thoughts?  Does this make sense as a policy change for facilitating 
>the development of major new features or consolidating behavior- 
>changing fixes into easier-to-understand units?

So, to summarize, we could stage our code using more than just two 
branches (trunk + feature branch) in order to make larger changes easier 
to understand for reviewers while still making each change to trunk a 
coherent unit.

This sounds fine to me.  We need to work out some details (like, for 
example, I'm not sure trying to do this using subversion is such a good 
idea, and we want the process to be documented somewhere so we don't 
have a repeat of #886), but I think we should try it and see what 
happens.

Of course, someone needs to work on something big before we'll have a 
chance to try it.  I'm not yet convinced that `URLPath` is a good case 
for this, though.  It's very little code, and a complete 
reimplementation (if even such a thing is needed) will likewise be very 
little code.  Also, I don't think a complete reimplementation is needed 
here.

Going back to the proposed workflow change, we should also be sure 
there's a clear condition under which the integration branch should be 
merged to trunk.  And ideally we should still try to keep the lifespan 
of these things as short as possible.

Jean-Paul



From gabriele.lanaro at gmail.com  Mon May 24 02:39:39 2010
From: gabriele.lanaro at gmail.com (Gabriele Lanaro)
Date: Mon, 24 May 2010 10:39:39 +0200
Subject: [Twisted-Python] Sending large files over network with
	perspective broker
In-Reply-To: <788800C0-70A6-4866-A1A0-503250DD4F21@twistedmatrix.com>
References: <AANLkTil5QrvNyr2t20UbOVWqr2UkgcfOD9jGZtDikkDj@mail.gmail.com>
	<m2632fjr17.fsf@valheru.db3l.homeip.net>
	<AANLkTinGjNcQyorbzo1r7bObO7Gmu9VpqKsSh-trov1Q@mail.gmail.com>
	<AANLkTimUckRnF7hvJT3z1k128oNcLxoyVeYMz56k6w71@mail.gmail.com>
	<AANLkTil_ie8STx5Itqq3dWNoCq4lHXnbwDyOLu1iBkft@mail.gmail.com>
	<20100523163044.1749.1340666766.divmod.xquotient.0@localhost.localdomain>
	<AANLkTikURkhafcdK0oKdsyeVoYn1lwp1u5MTAbwHFONi@mail.gmail.com>
	<788800C0-70A6-4866-A1A0-503250DD4F21@twistedmatrix.com>
Message-ID: <AANLkTinQVra0QFlyIX1Gz7oMYJxTCBkOcnBECqzqy81H@mail.gmail.com>

Thank you very much for your explanation! Now I've understood what's the
problem in iterate().

On these lines I've prepared a this little test case (in attach):

Test 1

$ python runner.py
click on the button
minimize/unminimize window to force a widget redraw, the window should be
blank.
you can click another time on the button, the event is catched but no
"button animation" is performed

Test2

$ python runner.py
open another console
$ python runner_other_process.py
click on the button of runner_other_process, this connects itself to the
server in the first process
each window should redraw correctly

2010/5/24 Glyph Lefkowitz <glyph at twistedmatrix.com>

>
> On May 23, 2010, at 6:36 PM, Gabriele Lanaro wrote:
>
> > In which sense it's invalid? I don't know how the gtk reactor works, I
> just guessed that the event loop never reaches the gui events. My idea was
> to force the processing of these events before spawning another deferred,
> it's just a workaround, the real problem is  the fact that the server and
> the client resides in  the same loop (for testing).
>
> It's invalid to run reactor.iterate() inside the reactor mainloop.  You
> can't force event-processing order in Twisted; if you want an event to not
> get processed, you need to delay its event source from getting invoked
> (producer.pauseProducing(), transport.stopReading(),
> transport.stopWriting(), Deferred.pause() are all ways to do this).
>
> It's invalid to use reactor.iterate() in this way because the reactor may
> invoke you reentrantly and there's no sane way to handle that.
>
> For example, your code is running because select() said your file
> descriptor was ready for reading, which then invoked dataReceived, which
> then invoked your method with buffered data, which then called iterate(),
> which then called dataReceived, which then called your method with buffered
> data, which then called iterate(), which then ...
> (and so on, forever, unless your application code conflicts with itself and
> running and starts blowing up and throwing incomprehensible tracebacks
> everywhere because of "impossible" recursion.
>
> > Which can be the reason of the mainloop "block"?
>
> Lots of reasons.  The example you gave wasn't syntactically valid Python,
> so it's hard to say.  Consider sending along an <http://sscce.org/> and
> maybe we can tell you more :).
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100524/3566b1ac/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: twistsample.tar.gz
Type: application/x-gzip
Size: 942 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20100524/3566b1ac/attachment-0002.bin>

From jml at mumak.net  Mon May 24 05:42:46 2010
From: jml at mumak.net (Jonathan Lange)
Date: Mon, 24 May 2010 12:42:46 +0100
Subject: [Twisted-Python] major changes, release engineering,
	and learning 	cost
In-Reply-To: <20100524023532.1749.465645627.divmod.xquotient.37@localhost.localdomain>
References: <FCCC3CD5-0A5D-48A0-B679-24D43968175F@twistedmatrix.com>
	<20100524023532.1749.465645627.divmod.xquotient.37@localhost.localdomain>
Message-ID: <AANLkTikZfKK_InzB3TTbXZnTZhvsa0CGnzgMa6-Q3R2z@mail.gmail.com>

On Mon, May 24, 2010 at 3:35 AM,  <exarkun at twistedmatrix.com> wrote:
...
>>So: thoughts?  Does this make sense as a policy change for facilitating
>>the development of major new features or consolidating behavior-
>>changing fixes into easier-to-understand units?
>
> So, to summarize, we could stage our code using more than just two
> branches (trunk + feature branch) in order to make larger changes easier
> to understand for reviewers while still making each change to trunk a
> coherent unit.
>

FWIW, we've been doing this on Launchpad for some years and it works out well.

As a rule, we don't have the final "sanity check" review, since we
have robot minions that check for conflicts and that the tests pass.

> This sounds fine to me.  We need to work out some details (like, for
> example, I'm not sure trying to do this using subversion is such a good
> idea, and we want the process to be documented somewhere so we don't
> have a repeat of #886), but I think we should try it and see what
> happens.
>

Using a DVCS would make it much easier. For example, Bazaar has
plugins like loom and pipeline that are designed to manage a stack of
changes.

Also, +1 on the documentation.

jml



From exarkun at twistedmatrix.com  Mon May 24 13:53:32 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 24 May 2010 19:53:32 -0000
Subject: [Twisted-Python] Reactor Spinning?
In-Reply-To: <4BF94CED.6060406@thoughtcrime.org>
References: <4BE025C2.5010205@thoughtcrime.org>
	<20100504214240.1642.1501163969.divmod.xquotient.9@localhost.localdomain>
	<4BE17F3E.1060800@thoughtcrime.org>
	<3973.63.107.91.99.1273078873.squirrel@webmail.zoteca.com>
	<4BF94CED.6060406@thoughtcrime.org>
Message-ID: <20100524195332.1902.1609577663.divmod.xquotient.4@localhost.localdomain>

On 23 May, 03:42 pm, moxie at thoughtcrime.org wrote:
>
>Hey everyone, I've still been trying to track down this spin bug.  What
>I probably should have mentioned before is that these are SSL
>connections.  Looking through the 10.0 release code, I found the
>_sendCloseAlert method in tcp.py: http://pastebin.com/gZKxHtN5
>
>I feel like this is almost certainly the culprit.  Most suspiciously,
>there's an explicit empty write on pastebin-line 23:
>
>os.write(self.socket.fileno(), '')
>
>It looks to me like there's a code path where this write "succeeds," 
>the
>SSL socket reports that the connection is still not shut down, and then
>the transport is resumed via startWriting and startReading.  I assume
>that this then repeats for as long as that socket is up.
>This directly corresponds with the system calls I'm seeing (poll, empty
>write, poll, empty write...)
>
>I still don't have an entirely comprehensive grasp of whats' going on
>here, but while these efforts to "cleanly" shut down the SSL connection
>by exchanging alerts are heroic, I feel like it's much more common (and
>probably good enough) to just send an alert and immediately close the
>underlying socket.

It'd be great if you could attach a minimal example which demonstrates 
this behavior to a ticket in the issue tracker (threads on the mailing 
list usually lead to ignored issues).

It's probably also worth reporting your version of OpenSSL and 
pyOpenSSL, since that might be related.  I've not seen this kind of 
behavior before, which may just mean I'm running an older version of 
OpenSSL than you.

Jean-Paul



From exarkun at twistedmatrix.com  Mon May 24 14:06:59 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 24 May 2010 20:06:59 -0000
Subject: [Twisted-Python] Sending large files over network
	with	perspective broker
In-Reply-To: <AANLkTinQVra0QFlyIX1Gz7oMYJxTCBkOcnBECqzqy81H@mail.gmail.com>
References: <AANLkTil5QrvNyr2t20UbOVWqr2UkgcfOD9jGZtDikkDj@mail.gmail.com>
	<m2632fjr17.fsf@valheru.db3l.homeip.net>
	<AANLkTinGjNcQyorbzo1r7bObO7Gmu9VpqKsSh-trov1Q@mail.gmail.com>
	<AANLkTimUckRnF7hvJT3z1k128oNcLxoyVeYMz56k6w71@mail.gmail.com>
	<AANLkTil_ie8STx5Itqq3dWNoCq4lHXnbwDyOLu1iBkft@mail.gmail.com>
	<20100523163044.1749.1340666766.divmod.xquotient.0@localhost.localdomain>
	<AANLkTikURkhafcdK0oKdsyeVoYn1lwp1u5MTAbwHFONi@mail.gmail.com>
	<788800C0-70A6-4866-A1A0-503250DD4F21@twistedmatrix.com>
	<AANLkTinQVra0QFlyIX1Gz7oMYJxTCBkOcnBECqzqy81H@mail.gmail.com>
Message-ID: <20100524200659.1902.414257654.divmod.xquotient.8@localhost.localdomain>

On 08:39 am, gabriele.lanaro at gmail.com wrote:
>Thank you very much for your explanation! Now I've understood what's 
>the
>problem in iterate().
>
>On these lines I've prepared a this little test case (in attach):
>
>Test 1
>
>$ python runner.py
>click on the button
>minimize/unminimize window to force a widget redraw, the window should 
>be
>blank.
>you can click another time on the button, the event is catched but no
>"button animation" is performed
>
>Test2
>
>$ python runner.py
>open another console
>$ python runner_other_process.py
>click on the button of runner_other_process, this connects itself to 
>the
>server in the first process
>each window should redraw correctly

This may demonstrate a bug in gtk2reactor.  It seems to be servicing 
network events to the exclusion of GUI events, which it isn't supposed 
to do.

I don't see any obvious reason for this.  Unfortunately glib2 (or 
pygtk2, perhaps) is ultimately in charge of the ordering/priority of 
these event handlers.  gtk2reactor is just a thin layer on top of the 
glib2-supplied I/O notification APIs.  But perhaps there's a way we 
could be invoking these APIs differently so that the GUI gets more of a 
chance to run.

Jean-Paul



From msoulier at digitaltorque.ca  Mon May 24 20:07:32 2010
From: msoulier at digitaltorque.ca (Michael P. Soulier)
Date: Mon, 24 May 2010 22:07:32 -0400
Subject: [Twisted-Python] turning off chunked transfer-encoding
Message-ID: <20100525020710.GA11803@digitaltorque.ca>

Hi,

I noticed that when using twisted.internet.http and returning a Content-type
of application/json, the server responds with chunked transfer encoding. 

I'm debugging a client problem and I'd like to turn chunked transfer encoding
off. Is this possible?

Thanks,
Mike
-- 
Michael P. Soulier <msoulier at digitaltorque.ca>
"Any intelligent fool can make things bigger and more complex... It takes a
touch of genius - and a lot of courage to move in the opposite direction."
--Albert Einstein
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 197 bytes
Desc: Digital signature
URL: </pipermail/twisted-python/attachments/20100524/9b303ac9/attachment.sig>

From itamar at itamarst.org  Mon May 24 20:29:31 2010
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Tue, 25 May 2010 02:29:31 +0000
Subject: [Twisted-Python] turning off chunked transfer-encoding
In-Reply-To: <20100525020710.GA11803@digitaltorque.ca>
References: <20100525020710.GA11803@digitaltorque.ca>
Message-ID: <1274754571.31649.874.camel@pintsize>

On Mon, 2010-05-24 at 22:07 -0400, Michael P. Soulier wrote:
> Hi,
> 
> I noticed that when using twisted.internet.http and returning a Content-type
> of application/json, the server responds with chunked transfer encoding. 

Chunked encoding has nothing to do with the content type. It is used if
you do not set a content-length header.

So, figure out your response's length (in bytes), and set the
content-length header to that.




From ploutosss at gmail.com  Tue May 25 02:34:34 2010
From: ploutosss at gmail.com (Viktor Klimov)
Date: Tue, 25 May 2010 12:34:34 +0400
Subject: [Twisted-Python] PB and unstable network
In-Reply-To: <1D9536C6-75DE-4934-982B-3B0485D526F0@twistedmatrix.com>
References: <AANLkTilMJwEDDbRzyeZdjIDZ6PGlj6x5FHq4c-QovDXY@mail.gmail.com>
	<1D9536C6-75DE-4934-982B-3B0485D526F0@twistedmatrix.com>
Message-ID: <AANLkTikkt_ZBrYcXuU5nlH5WsP_CN-yZz9zFh4YYCOUX@mail.gmail.com>

Hi Glyph, sorry for my english.

My server.py save last answer(see User.perspectiveMessageReceived).

Client when an error occurs(in callRemote) schedule reconnect. After
reconnect client call remote method which return last answer.

It works if disconnect happened when server send data to
client(_server->client_). (try set MyServer.crash_server_to_client to
True)

But it doesn't work if disconnect happened when client send data to
server(_client->server_). Becouse server after reconnect send previous
data. It can fix if client be known when error occurs(server->client
or client->server). (see comment in Client.net_error).

PS for emulate error client->server set Client.crash_client_to_server
to True, don't forget set MyServer.crash_server_to_client to False)

On Mon, May 24, 2010 at 5:19 AM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
> On May 23, 2010, at 11:54 AM, Viktor Klimov wrote:
>
>> I use PB in unstable network. The server remembers the last answer.
>> Client detection disconnected, connected again, makes entry into the
>> system and calls the function returns the last response
>> (get_last_response). The answer, it returns a deferred saved earlier.
>> If somewhere an error cycle repeats.
>>
>> All of this works until the lost communication does not happen at a
>> time when Twisted sends data to a server. As the server in this
>> situation does not receive a first request, and when you call
>> get_last_response client receives the data that has already received.
>>
>> How can I check if an error in the client arrived data to the server or not?
>
> Hi Viktor,
>
> I try not to give people a hard time about bad English, but I am having a hard time reading your message.  There are a couple of different things I think you might mean and it would be confusing if I tried to explain them all.
>
> Perhaps you could attach some Python code that explains exactly what you mean?
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: server.py
Type: application/octet-stream
Size: 1731 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20100525/78c1116e/attachment-0004.obj>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: client.py
Type: application/octet-stream
Size: 3495 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20100525/78c1116e/attachment-0005.obj>

From msoulier at digitaltorque.ca  Tue May 25 05:08:12 2010
From: msoulier at digitaltorque.ca (Michael P. Soulier)
Date: Tue, 25 May 2010 07:08:12 -0400
Subject: [Twisted-Python] turning off chunked transfer-encoding
In-Reply-To: <1274754571.31649.874.camel@pintsize>
References: <20100525020710.GA11803@digitaltorque.ca>
	<1274754571.31649.874.camel@pintsize>
Message-ID: <20100525110810.GC22739@anton.digitaltorque.ca>

On 25/05/10 Itamar Turner-Trauring said:

> Chunked encoding has nothing to do with the content type. It is used if
> you do not set a content-length header.
> 
> So, figure out your response's length (in bytes), and set the
> content-length header to that.

I'll try that, thanks.

Mike
-- 
Michael P. Soulier <msoulier at digitaltorque.ca>
"Any intelligent fool can make things bigger and more complex... It takes a
touch of genius - and a lot of courage to move in the opposite direction."
--Albert Einstein
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 190 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20100525/10a1fb0f/attachment.sig>

From jaroslaw.fedewicz at gmail.com  Tue May 25 08:41:13 2010
From: jaroslaw.fedewicz at gmail.com (Yaroslav Fedevych)
Date: Tue, 25 May 2010 17:41:13 +0300
Subject: [Twisted-Python] PB and unstable network
In-Reply-To: <AANLkTikkt_ZBrYcXuU5nlH5WsP_CN-yZz9zFh4YYCOUX@mail.gmail.com>
References: <AANLkTilMJwEDDbRzyeZdjIDZ6PGlj6x5FHq4c-QovDXY@mail.gmail.com>
	<1D9536C6-75DE-4934-982B-3B0485D526F0@twistedmatrix.com>
	<AANLkTikkt_ZBrYcXuU5nlH5WsP_CN-yZz9zFh4YYCOUX@mail.gmail.com>
Message-ID: <AANLkTim4Qngekk1D1WTNTi_XLVQPCb6CCs8WIf6BTzdO@mail.gmail.com>

In your case, I would suggest that the server sends some sort of ACK
after it has received the payload from client, and the client must
send the same kind of ACK in response. Only after that would the
server consider operation complete, otherwise it would either inform
the client that the previous operation was interrupted midway, or
discard the incomplete message completely, thus forcing client to
re-send it.

Sounds complicated, but I think that's the only reliable way to make
sure things don't get duplicated on either server or client.

On Tue, May 25, 2010 at 11:34 AM, Viktor Klimov <ploutosss at gmail.com> wrote:
> Hi Glyph, sorry for my english.
>
> My server.py save last answer(see User.perspectiveMessageReceived).
>
> Client when an error occurs(in callRemote) schedule reconnect. After
> reconnect client call remote method which return last answer.
>
> It works if disconnect happened when server send data to
> client(_server->client_). (try set MyServer.crash_server_to_client to
> True)
>
> But it doesn't work if disconnect happened when client send data to
> server(_client->server_). Becouse server after reconnect send previous
> data. It can fix if client be known when error occurs(server->client
> or client->server). (see comment in Client.net_error).
>
> PS for emulate error client->server set Client.crash_client_to_server
> to True, don't forget set MyServer.crash_server_to_client to False)
>
> On Mon, May 24, 2010 at 5:19 AM, Glyph Lefkowitz
> <glyph at twistedmatrix.com> wrote:
>> On May 23, 2010, at 11:54 AM, Viktor Klimov wrote:
>>
>>> I use PB in unstable network. The server remembers the last answer.
>>> Client detection disconnected, connected again, makes entry into the
>>> system and calls the function returns the last response
>>> (get_last_response). The answer, it returns a deferred saved earlier.
>>> If somewhere an error cycle repeats.
>>>
>>> All of this works until the lost communication does not happen at a
>>> time when Twisted sends data to a server. As the server in this
>>> situation does not receive a first request, and when you call
>>> get_last_response client receives the data that has already received.
>>>
>>> How can I check if an error in the client arrived data to the server or not?
>>
>> Hi Viktor,
>>
>> I try not to give people a hard time about bad English, but I am having a hard time reading your message.  There are a couple of different things I think you might mean and it would be confusing if I tried to explain them all.
>>
>> Perhaps you could attach some Python code that explains exactly what you mean?
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>



From jml at mumak.net  Wed May 26 02:19:20 2010
From: jml at mumak.net (Jonathan Lange)
Date: Wed, 26 May 2010 09:19:20 +0100
Subject: [Twisted-Python] Reminder: Twisted 10.1 scheduled for early June
Message-ID: <AANLkTikg-mJ7p865ALUL_-cTvEC8Spe57N5p7agczzcq@mail.gmail.com>

Hello all,

I and my lovely assistant Glyph intend to cut a release of Twisted
10.1 on the 5th and 6th of June. That's in eleven days.

If you would like to help us do that, please fix one of:
  http://twistedmatrix.com/trac/ticket/3998
  http://twistedmatrix.com/trac/ticket/4345
  http://twistedmatrix.com/trac/ticket/4320

Or review tickets: http://twistedmatrix.com/trac/report/15

Thanks,
jml



From glyph at twistedmatrix.com  Wed May 26 02:39:00 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 26 May 2010 04:39:00 -0400
Subject: [Twisted-Python] major changes, release engineering,
	and learning cost
In-Reply-To: <20100524023532.1749.465645627.divmod.xquotient.37@localhost.localdomain>
References: <FCCC3CD5-0A5D-48A0-B679-24D43968175F@twistedmatrix.com>
	<20100524023532.1749.465645627.divmod.xquotient.37@localhost.localdomain>
Message-ID: <B1DF3CDE-F46D-4A81-83A1-D6AA6378A9EF@twistedmatrix.com>


On May 23, 2010, at 10:35 PM, exarkun at twistedmatrix.com wrote:

> On 23 May, 12:26 am, glyph at twistedmatrix.com wrote:
>> So: thoughts?  Does this make sense as a policy change for facilitating 
>> the development of major new features or consolidating behavior- 
>> changing fixes into easier-to-understand units?
> 
> So, to summarize, we could stage our code using more than just two 
> branches (trunk + feature branch) in order to make larger changes easier 
> to understand for reviewers while still making each change to trunk a 
> coherent unit.

That's about the size of it.

> This sounds fine to me.  We need to work out some details (like, for 
> example, I'm not sure trying to do this using subversion is such a good 
> idea, and we want the process to be documented somewhere so we don't 
> have a repeat of #886), but I think we should try it and see what 
> happens.

Great.  I propose some core committers try it out however makes sense to them, on whatever the next obvious thing to try it on is.  Rather than try to document the whole process up front, please just spell out what you expect the reviewer to do on each ticket placed into review this way, and we'll document the process after we've nailed down something that works.

> Of course, someone needs to work on something big before we'll have a 
> chance to try it.  I'm not yet convinced that `URLPath` is a good case 
> for this, though.  It's very little code, and a complete 
> reimplementation (if even such a thing is needed) will likewise be very 
> little code.  Also, I don't think a complete reimplementation is needed 
> here.

Yeah, like I said: I just grabbed that example because it was handy, not because I thought it was particularly appropriate.  I don't even have anything in particular in mind.  I actually wanted to bring this up while we were *between* major things, so that we could avoid discussions of specific problems with a current branch or feature (once something's in the middle of being implemented it develops a life of its own, and this is often an emotional context in which to talk about process changes).

> Going back to the proposed workflow change, we should also be sure 
> there's a clear condition under which the integration branch should be 
> merged to trunk.  And ideally we should still try to keep the lifespan 
> of these things as short as possible.

My proposed criterion would be that the integration branch has an associated ticket, with links to a list of all other tickets expected to be a part of it.  When all tickets on that list are closed, it can be merged at any time.  This would, however, leave the door open for a reviewer to say "#XXXX is okay to merge, but based on my review really need to consider #YYYY before it can be merged to trunk, so please add that to the integration branch list".  Of course, in the interest of keeping these lifespans short, this suggestion should be used sparingly.  But it would be good for things like "update the documentation and examples" or "I noticed that the old system had feature X, we really need to keep parity with that before we deprecate it".

I still like the idea of a final sanity check, but based on jml's feedback about Launchpad perhaps it would be best if we kept that step optional.  Especially since I can't think of a clear set of guidelines for reviewers at that stage.  (I mean, they *should* check for all the same stuff one normally checks for; coverage, documentation, etc, but they *shouldn't* block the merge from going to trunk while they re-audit every changed line of code, as that defeats the purpose of having incremental reviews in the first place.)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100526/484d7da0/attachment.html>

From glyph at twistedmatrix.com  Wed May 26 02:44:36 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 26 May 2010 04:44:36 -0400
Subject: [Twisted-Python] major changes, release engineering,
	and learning cost
In-Reply-To: <AANLkTikZfKK_InzB3TTbXZnTZhvsa0CGnzgMa6-Q3R2z@mail.gmail.com>
References: <FCCC3CD5-0A5D-48A0-B679-24D43968175F@twistedmatrix.com>
	<20100524023532.1749.465645627.divmod.xquotient.37@localhost.localdomain>
	<AANLkTikZfKK_InzB3TTbXZnTZhvsa0CGnzgMa6-Q3R2z@mail.gmail.com>
Message-ID: <8A688AD5-DF07-45CD-ABF6-49057C268800@twistedmatrix.com>


On May 24, 2010, at 7:42 AM, Jonathan Lange wrote:

> FWIW, we've been doing this on Launchpad for some years and it works out well.

Good to know.

> As a rule, we don't have the final "sanity check" review, since we
> have robot minions that check for conflicts and that the tests pass.

This is useful information.  Our buildbot isn't *quite* PQM, but then... there's a strong case to be made that Jean-Paul is himself a robot.

> Using a DVCS would make it much easier. For example, Bazaar has
> plugins like loom and pipeline that are designed to manage a stack of
> changes.

Looms still scare me a bit, but my intent was definitely that a DVCS (and yes, most likely specifically bzr) would be involved.  If you have any particular insight as to how one might go about doing that, it would be helpful.

For practical purposes, until the bzr-ness of the buildbots is more exposed, I was thinking that developers could work in bzr but push changes into svn branches for testing.  Does that sound workable?

> Also, +1 on the documentation.

I think we should continue this discussion after somebody has done at least one branch like this.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100526/659d0d73/attachment.html>

From lvh at laurensvh.be  Wed May 26 03:41:17 2010
From: lvh at laurensvh.be (Laurens Van Houtven)
Date: Wed, 26 May 2010 11:41:17 +0200
Subject: [Twisted-Python] major changes, release engineering,
	and learning 	cost
In-Reply-To: <8A688AD5-DF07-45CD-ABF6-49057C268800@twistedmatrix.com>
References: <FCCC3CD5-0A5D-48A0-B679-24D43968175F@twistedmatrix.com>
	<20100524023532.1749.465645627.divmod.xquotient.37@localhost.localdomain>
	<AANLkTikZfKK_InzB3TTbXZnTZhvsa0CGnzgMa6-Q3R2z@mail.gmail.com>
	<8A688AD5-DF07-45CD-ABF6-49057C268800@twistedmatrix.com>
Message-ID: <AANLkTimlY2Gsvpsy13_zQUdMJcNDqdtEoDH4L9LzkX8v@mail.gmail.com>

I've said something in #twisted but I hadn't read this reply yet, so for
sake of saving this for posterity, I agree with jml here. I think we're
mostly being bitten because of a lack of software tools, in the form of svn
and trac. Disclaimer: I really dislike svn since I never figured out how
Combinator works. I really dislike trac.

So, for the rest of this e-mail, let's pretend we're implementing a big new
feature since that's the thing I tried to do to some extent.

Major stuff could be a blueprint on Launchpad. Blueprints match a branch for
the "big feature". So, we have the Twisted blueprint
quantum-transmogrification and a branch
lp:~lvh/twisted/quantum-transmogrification.

>From that branch I create a bunch of branches of review units (if it turns
out it's too big, I just branch again for a new review unit). So, I want to
do something with entanglement:
lp:~lvh/twisted/quantum-transmogrification-entanglement, and it's good, so
someone reviews and sends it back.

lp's merge proposals let you do the code review in arbitrarily small chunks.
So if the thing I do next
is lp:~lvh/twisted/quantum-transmogrification-ftl-travel, and it turns out
FTL travel is really really hard so I need two smaller
branches lp:~lvh/twisted/quantum-transmogrification-tunnels
and lp:~lvh/twisted/quantum-transmogrification-ansible. Both are good, so
they get put back into ~lvh/twisted/quantum-transmogrification-ftl-travel.

Each review would verify that all children (if any) have also been
reviewed. So, the final review is pretty small, as suggested :-) This does
not limit a developer's freedom to branch at will, because code review is
opt-in (merge proposal), not opt-out. If you don't do it, that code in that
branch isn't covered by a previous review, and must be reviewed later.

How exactly code review coverage would work is somewhat of an open question
and it's the obvious failure in this system. We use it in production and it
turns out to not be a problem, because people always end up doing two
things:

1) always branch at least once from the first branch off trunk (so branch
off lp:~lvh/twisted/quantum-transmogrification). Net
result: lp:~lvh/twisted/quantum-transmogrification only introduces code in
the form of merges.
2) always do code review on branches being merged into your first branch off
trunk (so everything merged into lp:~lvh/twisted/quantum-transmogrification
has to be reviewed already)

Note that our merges into trunk are automagic. If it's merged into a direct
branch off of trunk and it satisfies some qualities (such as full test
coverage :)), it gets put into trunk, and that gets pushed to production
servers. No human interaction. Scary at first, but then you realize humans
were already involved in the QC process extensively at every point -- doing
it this way just makes them take testing more seriously :)

I think a bug would be similar except the root would not be a blueprint but
a bug.


Laurens
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100526/1badc042/attachment.html>

From konrads at smelkovs.com  Wed May 26 04:20:26 2010
From: konrads at smelkovs.com (Konrads Smelkovs)
Date: Wed, 26 May 2010 13:20:26 +0300
Subject: [Twisted-Python] major changes, release engineering,
	and learning 	cost
In-Reply-To: <FCCC3CD5-0A5D-48A0-B679-24D43968175F@twistedmatrix.com>
References: <FCCC3CD5-0A5D-48A0-B679-24D43968175F@twistedmatrix.com>
Message-ID: <AANLkTikDFPoQdxPRUI5drFlZF-TINicv5LqrLIxtnML4@mail.gmail.com>

It would already be a big step forward if the naming convention could
be addressed. Unfortunately the web vs. web2 thing really puts code
archeologists in a confusion if the incremental numbered module policy
is applied, because it appears that web2 > web but it is actually not.
code archeology could be less of an issue if some of the following
would be found good:
1) for existing developers, release notes would keep them up to date.
Also, perhaps a migration guide on how to move from old to new would
ensure people are using latest and greatest.
2) write a module guide for new developers, saying don't use X because
it is old. Use Y
3) once new module is there, raise decpreciation for old module. As
the old could be still valid, make a warning suppression mechanism.



2010/5/23, Glyph Lefkowitz <glyph at twistedmatrix.com>:
> The nice thing about Twisted's compatibility policy is that developers, and
> even users, very rarely have problems when installing a new version of
> Twisted.  While this is a nice benefit, the current strategy of developing
> features in a compatible way does have a couple of costs, and I'd like to
> see if we can address them without giving up the benefit.  I have a
> suggestion for a process tweak which would hopefully mitigate some of the
> difficulties which arise due to the compatibility policy.
>
> When we add a new feature that supersedes an older one, or fix a bug in
> Twisted that involves changing behavior, the developer fixing it has to come
> up with a new name.  If we have several behavior-changing bugfixes in the
> same subsystem, that means that developers using Twisted may have to learn
> about 3 different symbol names.  Since we tend to avoid just suffixing names
> with numbers (for good reason, I think), they won't have to learn Bicycle,
> Bicycle2, Bicycle3, they'll have to learn Bicycle, then Footcycle, and
> finally Velocipede, and somehow infer that Velocipede is the newest/best
> name that they should be using, by reading the (hopefully clear, concise)
> warnings that come out of their unit tests.
>
> This came up again recently on a ticket about URLPath,
> <http://twistedmatrix.com/trac/ticket/2625#comment:16>, where a contributor
> suggested that it would be better to make a whole new module because it's
> easier for external developers to learn about that then learn about an
> individual method change.  This of course raises the question: if we're
> going to have a whole new URL class, shouldn't it fix the (numerous) *other*
> bugs that we know about in URLPath?
>
> Up until now the objection to doing things this way is that it results in
> gigantic branches which are intractable to review.  That's a good objection,
> but it leaves us with a false dichotomy; reliable software and painless
> upgrades with a random scattershot of new features that are hard to
> understand, or coherent iterations of technology which can't be effectively
> reviewed, and therefore can't be effectively quality controlled.
>
> I propose that we get the best of both worlds by changing the way we do
> reviews slightly.  Right now every code review needs to be done on an entire
> feature going to trunk, and _all_ of the code going to trunk needs to be
> reviewed at once.  I suggest that instead, we create "integration branches"
> for sensible constellations of features, and have a two-stage review
> process.
>
> For example, let's say I want to work on making URLPath good.  There are
> several tickets addressing it:
>
> <http://twistedmatrix.com/trac/ticket/2093>
> <http://twistedmatrix.com/trac/ticket/2094>
> <http://twistedmatrix.com/trac/ticket/2625>
>
> For the sake of argument, let's all pretend these are all deeply
> interrelated and involve changes to behavior of existing methods.  I think
> that is sort of true of most of these, but it would be far too verbose to
> talk about *how*, and get bogged down in that discussion.
>
> First, I'd make an integration ticket, let's call it #ABCD, describing how
> these features are related and a brief outline of the new API I propose
> which resolves them.
>
> Then I'd create an integration branch from trunk, for that ticket.  From the
> #ABCD branch, I'd create a branch for #2093, and put it up for review.  The
> reviewer would review #2093 as usual, citing any test coverage issues,
> documentation issues, etc.  After the usual review process, when I get an
> "OK to merge", I would merge #2093 *to the #ABCD branch*, not trunk.
>
> I would repeat this process for #2094 and #2625, merging each to the #ABCD
> branch as they passed review.
>
> Finally, I'd put #ABCD itself up for review.  At this point the process
> would differ a bit.  Reviewers would be able to assume, at this point, that
> the potentially large body of code in #ABCD had already been reviewed, that
> the test cases were good, the documentation was reasonably clear, and the
> logic made sense.  This final review would be a quick sanity check, to make
> sure the tests still pass and that there are no conflicts.
>
> I would like to strongly emphasize that this point in the process would be
> an inappropriate time for reviewers to start arguing with each other over
> what is required for the branch to land, disputing the original
> specification, etc; this is just an opportunity to spot potential
> regressions before it lands.  Each ticket review for a component of the
> larger feature should be an opportunity to draw attention to the direction
> of the larger feature development and prompt discussion.  This *might* be an
> appropriate point to note that some other behavior-changing feature had been
> left out, though.
>
> In the case that there *were* conflicts, this would be an opportunity to
> review the conflict resolution itself.
>
> (We saw a nascent version of this approach on some stuff related to
> <http://twistedmatrix.com/trac/ticket/886> and it was hugely painful because
> nobody was really sure what the process was supposed to be.  So let's not do
> it like that again.)
>
> So: thoughts?  Does this make sense as a policy change for facilitating the
> development of major new features or consolidating behavior-changing fixes
> into easier-to-understand units?
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>

-- 
Nosūtīts no manas mobilās ierīces

--
Konrads Smelkovs
Applied IT sorcery.



From exarkun at twistedmatrix.com  Wed May 26 07:53:41 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 26 May 2010 13:53:41 -0000
Subject: [Twisted-Python] major changes, release engineering,
	and learning cost
In-Reply-To: <8A688AD5-DF07-45CD-ABF6-49057C268800@twistedmatrix.com>
References: <FCCC3CD5-0A5D-48A0-B679-24D43968175F@twistedmatrix.com>
	<20100524023532.1749.465645627.divmod.xquotient.37@localhost.localdomain>
	<AANLkTikZfKK_InzB3TTbXZnTZhvsa0CGnzgMa6-Q3R2z@mail.gmail.com>
	<8A688AD5-DF07-45CD-ABF6-49057C268800@twistedmatrix.com>
Message-ID: <20100526135341.1974.17902893.divmod.xquotient.0@localhost.localdomain>

On 08:44 am, glyph at twistedmatrix.com wrote:
>
>On May 24, 2010, at 7:42 AM, Jonathan Lange wrote:
>>Also, +1 on the documentation.
>
>I think we should continue this discussion after somebody has done at 
>least one branch like this.

Well, we did #886, right?

Jean-Paul



From glyph at twistedmatrix.com  Wed May 26 23:01:36 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 27 May 2010 01:01:36 -0400
Subject: [Twisted-Python] major changes, release engineering,
	and learning cost
In-Reply-To: <20100526135341.1974.17902893.divmod.xquotient.0@localhost.localdomain>
References: <FCCC3CD5-0A5D-48A0-B679-24D43968175F@twistedmatrix.com>
	<20100524023532.1749.465645627.divmod.xquotient.37@localhost.localdomain>
	<AANLkTikZfKK_InzB3TTbXZnTZhvsa0CGnzgMa6-Q3R2z@mail.gmail.com>
	<8A688AD5-DF07-45CD-ABF6-49057C268800@twistedmatrix.com>
	<20100526135341.1974.17902893.divmod.xquotient.0@localhost.localdomain>
Message-ID: <C4B9DD8A-1CC6-4C3E-823B-EB6C11912469@twistedmatrix.com>

On May 26, 2010, at 9:53 AM, exarkun at twistedmatrix.com wrote:

> On 08:44 am, glyph at twistedmatrix.com wrote:
>> 
>> On May 24, 2010, at 7:42 AM, Jonathan Lange wrote:
>>> Also, +1 on the documentation.
>> 
>> I think we should continue this discussion after somebody has done at 
>> least one branch like this.
> 
> Well, we did #886, right?


I don't think that counts.  I meant that we've done at least one feature that *successfully* used a set of stacked branches.  (I hope "stacked" means what I think it means here, and not some other crazy bzr thing.)  #886 is more a description of the failure condition here than a success.

#886 had one half-hearted sub-ticket, #3811, which eventually got abandoned and had to wait until #886 was merged to trunk anyway.  And lots of other stuff that I wish had been added at the same time for a coherent unit of new functionality (like the high level API) was spun out into a separate ticket because it was too hard to review all at once.

The high-level ticket in this case is really sneakily hiding out here: <http://twistedmatrix.com/trac/wiki/TwistedWebClient>.  (A few things are still open there but I doubt that this is still a good candidate for development under the proposed style.)




From glyph at twistedmatrix.com  Wed May 26 23:02:51 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 27 May 2010 01:02:51 -0400
Subject: [Twisted-Python] major changes, release engineering,
	and learning cost
In-Reply-To: <AANLkTimlY2Gsvpsy13_zQUdMJcNDqdtEoDH4L9LzkX8v@mail.gmail.com>
References: <FCCC3CD5-0A5D-48A0-B679-24D43968175F@twistedmatrix.com>
	<20100524023532.1749.465645627.divmod.xquotient.37@localhost.localdomain>
	<AANLkTikZfKK_InzB3TTbXZnTZhvsa0CGnzgMa6-Q3R2z@mail.gmail.com>
	<8A688AD5-DF07-45CD-ABF6-49057C268800@twistedmatrix.com>
	<AANLkTimlY2Gsvpsy13_zQUdMJcNDqdtEoDH4L9LzkX8v@mail.gmail.com>
Message-ID: <7A3FDB76-0666-4827-B742-DEACDD9345EB@twistedmatrix.com>


On May 26, 2010, at 5:41 AM, Laurens Van Houtven wrote:

> Major stuff could be a blueprint on Launchpad. Blueprints match a branch for the "big feature". So, we have the Twisted blueprint quantum-transmogrification and a branch lp:~lvh/twisted/quantum-transmogrification.

So, while I can definitely sympathize with a certain animosity towards trac, and I can appreciate the goals and sensibilities of launchpad, I will probably flat-out veto any required / process-driven usage of Launchpad blueprints.  Bugs, features, enhancements, etc, are all units of work that need to be tracked, and it's better to have one kind of crummy interface for tracking _everything_ than three interfaces, even three good interfaces, for tracking little bits stuff in different ways according to arbitrary distinctions.  (As someone recently opined to me, Blueprints are a giant complicated interface for pasting the URL to a Google Wave into a text field.  We might as well skip the text field and just link straight to the conversation from a Trac ticket.)

> From that branch I create a bunch of branches of review units (if it turns out it's too big, I just branch again for a new review unit). So, I want to do something with entanglement: lp:~lvh/twisted/quantum-transmogrification-entanglement, and it's good, so someone reviews and sends it back.
> 
> lp's merge proposals let you do the code review in arbitrarily small chunks. So if the thing I do next is lp:~lvh/twisted/quantum-transmogrification-ftl-travel,

lp:~lvh... isn't a verb.  What do you do with that string? :)

> and it turns out FTL travel is really really hard so I need two smaller branches lp:~lvh/twisted/quantum-transmogrification-tunnels and lp:~lvh/twisted/quantum-transmogrification-ansible. Both are good, so they get put back into ~lvh/twisted/quantum-transmogrification-ftl-travel.
> 
> Each review would verify that all children (if any) have also been reviewed. So, the final review is pretty small, as suggested :-)


The review wouldn't verify that the parent had been reviewed, though.  If you started this process by writing a bunch of code in the q-t-f-t branch, *that* code would never have been reviewed; unless q-t-f-t needs to be reviewed in its entirety before landing on trunk.  Which is precisely what I'm trying to avoid.

> This does not limit a developer's freedom to branch at will, because code review is opt-in (merge proposal), not opt-out. If you don't do it, that code in that branch isn't covered by a previous review, and must be reviewed later.

This strikes me as placing a pretty nasty burden on the reviewer.  The reviewer has to figure out if there are any commits that went only to the integration branch, isolate them, review them, get that branch into an OK-it's-reviewed state, while meanwhile other developers might be committing stuff to that branch and changing its contents, both from regular working commits and from reviewed merges.  It sounds like a nightmare.  Maybe bzr makes it easier than it sounds, but it sounds bad enough that even a big improvement would still be pretty bad ;).

> How exactly code review coverage would work is somewhat of an open question and it's the obvious failure in this system. We use it in production and it turns out to not be a problem, because people always end up doing two things:

Who is "we"?  What is "production"?  Are you talking about Twisted or a hypothetical project which uses Twisted, or a fork of Twisted on Launchpad?  Is this a hypothetical project or a real proejct?  I am super confused.

> 1) always branch at least once from the first branch off trunk (so branch off lp:~lvh/twisted/quantum-transmogrification). Net result: lp:~lvh/twisted/quantum-transmogrification only introduces code in the form of merges.

That's pretty much what I'm proposing, except I don't actually care whether they're merges or patches or individual commits, as long as they've cycled through code-review properly.

> 2) always do code review on branches being merged into your first branch off trunk (so everything merged into lp:~lvh/twisted/quantum-transmogrification has to be reviewed already)

And this is what we already do.

> Note that our merges into trunk are automagic.

(Again, who is "we", and by what mechanism are they automated?  Are you proposing that we do this, or are you stating that some other people do?)

> If it's merged into a direct branch off of trunk and it satisfies some qualities (such as full test coverage :)), it gets put into trunk, and that gets pushed to production servers. No human interaction. Scary at first, but then you realize humans were already involved in the QC process extensively at every point -- doing it this way just makes them take testing more seriously :)

Human interaction of some kind should definitely be required for Twisted.  This is not just pushing some new widget to a web site; this is potentially pushing out new APIs that need to be documented and supported to a whole ton of developers.  The whole point of the process modification I've proposed is to make sure that features arrive in releases as coherent, comprehensible whole pieces, not to allow things we can automatically verify (like docstring and test coverage) to be deferred to later merges.  These properties of the code should still be verified on every merge to the integration branch; the interesting thing about the merge to trunk is the verification that the unit is a coherent whole (and in the case of a deprecation / replacement, that the replacement is a functionally adequate upgrade).

> I think a bug would be similar except the root would not be a blueprint but a bug.

So, I'm really confused as to what the purpose of this message was - are you just describing how a similar workflow might work if we used launchpad, advocating that we switch to launchpad in order to implement this, advocating that we use launchpad for big features but *not* for other stuff, or ... what?  If you're proposing a different functional modification to the existing process, can you do it without reference to tons of launchpad-specific terminology?

Sorry if this comes off as a little flamey; I really am just confused as to what the point was.

Thanks,

-glyph





From ploutosss at gmail.com  Thu May 27 03:45:17 2010
From: ploutosss at gmail.com (Viktor Klimov)
Date: Thu, 27 May 2010 13:45:17 +0400
Subject: [Twisted-Python] PB and unstable network
In-Reply-To: <AANLkTim4Qngekk1D1WTNTi_XLVQPCb6CCs8WIf6BTzdO@mail.gmail.com>
References: <AANLkTilMJwEDDbRzyeZdjIDZ6PGlj6x5FHq4c-QovDXY@mail.gmail.com>
	<1D9536C6-75DE-4934-982B-3B0485D526F0@twistedmatrix.com>
	<AANLkTikkt_ZBrYcXuU5nlH5WsP_CN-yZz9zFh4YYCOUX@mail.gmail.com>
	<AANLkTim4Qngekk1D1WTNTi_XLVQPCb6CCs8WIf6BTzdO@mail.gmail.com>
Message-ID: <AANLkTinGm_WlBSnT-FEbVXV3MpXk_T3d-NRUrzGvxN0i@mail.gmail.com>

You mean a packet message used in the TCP? Or offer to implement ACK to PB?

Maybe someone will point to the literature on network programming in
unstable networks?

On Tue, May 25, 2010 at 6:41 PM, Yaroslav Fedevych
<jaroslaw.fedewicz at gmail.com> wrote:
> In your case, I would suggest that the server sends some sort of ACK
> after it has received the payload from client, and the client must
> send the same kind of ACK in response. Only after that would the
> server consider operation complete, otherwise it would either inform
> the client that the previous operation was interrupted midway, or
> discard the incomplete message completely, thus forcing client to
> re-send it.
>
> Sounds complicated, but I think that's the only reliable way to make
> sure things don't get duplicated on either server or client.
>
> On Tue, May 25, 2010 at 11:34 AM, Viktor Klimov <ploutosss at gmail.com> wrote:
>> Hi Glyph, sorry for my english.
>>
>> My server.py save last answer(see User.perspectiveMessageReceived).
>>
>> Client when an error occurs(in callRemote) schedule reconnect. After
>> reconnect client call remote method which return last answer.
>>
>> It works if disconnect happened when server send data to
>> client(_server->client_). (try set MyServer.crash_server_to_client to
>> True)
>>
>> But it doesn't work if disconnect happened when client send data to
>> server(_client->server_). Becouse server after reconnect send previous
>> data. It can fix if client be known when error occurs(server->client
>> or client->server). (see comment in Client.net_error).
>>
>> PS for emulate error client->server set Client.crash_client_to_server
>> to True, don't forget set MyServer.crash_server_to_client to False)
>>
>> On Mon, May 24, 2010 at 5:19 AM, Glyph Lefkowitz
>> <glyph at twistedmatrix.com> wrote:
>>> On May 23, 2010, at 11:54 AM, Viktor Klimov wrote:
>>>
>>>> I use PB in unstable network. The server remembers the last answer.
>>>> Client detection disconnected, connected again, makes entry into the
>>>> system and calls the function returns the last response
>>>> (get_last_response). The answer, it returns a deferred saved earlier.
>>>> If somewhere an error cycle repeats.
>>>>
>>>> All of this works until the lost communication does not happen at a
>>>> time when Twisted sends data to a server. As the server in this
>>>> situation does not receive a first request, and when you call
>>>> get_last_response client receives the data that has already received.
>>>>
>>>> How can I check if an error in the client arrived data to the server or not?
>>>
>>> Hi Viktor,
>>>
>>> I try not to give people a hard time about bad English, but I am having a hard time reading your message.  There are a couple of different things I think you might mean and it would be confusing if I tried to explain them all.
>>>
>>> Perhaps you could attach some Python code that explains exactly what you mean?
>>>
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From gabriel.rossetti at arimaz.com  Thu May 27 06:08:50 2010
From: gabriel.rossetti at arimaz.com (Gabriel Rossetti)
Date: Thu, 27 May 2010 14:08:50 +0200
Subject: [Twisted-Python] can the reactor be told to stop processing events
 and to just queue them?
Message-ID: <4BFE60D2.7030403@arimaz.com>

Hello everyone,

is there a way to tell the reactor to just queue the events and not to 
process them for a specific protocol? I have two protocols running on my 
reactor, one that monitors the network and one for a usb device, I'd 
like to pause the event processing for the network side when certain 
msgs arrive on the usb protocol and then unpause it later on. I know I 
can create a queue and add the network msgs and process them later but I 
find it redundant to do so when twisted already has an event queue.

Thank you,
Gabriel



From itamar at itamarst.org  Thu May 27 06:27:44 2010
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Thu, 27 May 2010 12:27:44 +0000
Subject: [Twisted-Python] can the reactor be told to stop processing
 events and to just queue them?
In-Reply-To: <4BFE60D2.7030403@arimaz.com>
References: <4BFE60D2.7030403@arimaz.com>
Message-ID: <1274963264.31649.964.camel@pintsize>

On Thu, 2010-05-27 at 14:08 +0200, Gabriel Rossetti wrote:
> is there a way to tell the reactor to just queue the events and not to 
> process them for a specific protocol?

No, Twisted doesn't have an event queue (but see below).

>  I have two protocols running on my 
> reactor, one that monitors the network and one for a usb device, I'd 
> like to pause the event processing for the network side when certain 
> msgs arrive on the usb protocol and then unpause it later on. I know I 
> can create a queue and add the network msgs and process them later but I 
> find it redundant to do so when twisted already has an event queue.

How about calling transport.pauseProducing() and then later
transport.resumeProducing() on the TCP connections?




From gabriel.rossetti at arimaz.com  Thu May 27 06:49:39 2010
From: gabriel.rossetti at arimaz.com (Gabriel Rossetti)
Date: Thu, 27 May 2010 14:49:39 +0200
Subject: [Twisted-Python] can the reactor be told to stop processing
 events and to just queue them?
In-Reply-To: <1274963264.31649.964.camel@pintsize>
References: <4BFE60D2.7030403@arimaz.com> <1274963264.31649.964.camel@pintsize>
Message-ID: <4BFE6A63.9040209@arimaz.com>



Itamar Turner-Trauring wrote:
> On Thu, 2010-05-27 at 14:08 +0200, Gabriel Rossetti wrote:
>   
>> is there a way to tell the reactor to just queue the events and not to 
>> process them for a specific protocol?
>>     
>
> No, Twisted doesn't have an event queue (but see below).
>
>   
ok
>>  I have two protocols running on my 
>> reactor, one that monitors the network and one for a usb device, I'd 
>> like to pause the event processing for the network side when certain 
>> msgs arrive on the usb protocol and then unpause it later on. I know I 
>> can create a queue and add the network msgs and process them later but I 
>> find it redundant to do so when twisted already has an event queue.
>>     
>
> How about calling transport.pauseProducing() and then later
> transport.resumeProducing() on the TCP connections?
>
>   
Ok, thanks, I'll try that.



From lvh at laurensvh.be  Thu May 27 14:27:13 2010
From: lvh at laurensvh.be (Laurens Van Houtven)
Date: Thu, 27 May 2010 22:27:13 +0200
Subject: [Twisted-Python] major changes, release engineering,
	and learning 	cost
In-Reply-To: <7A3FDB76-0666-4827-B742-DEACDD9345EB@twistedmatrix.com>
References: <FCCC3CD5-0A5D-48A0-B679-24D43968175F@twistedmatrix.com>
	<20100524023532.1749.465645627.divmod.xquotient.37@localhost.localdomain>
	<AANLkTikZfKK_InzB3TTbXZnTZhvsa0CGnzgMa6-Q3R2z@mail.gmail.com>
	<8A688AD5-DF07-45CD-ABF6-49057C268800@twistedmatrix.com>
	<AANLkTimlY2Gsvpsy13_zQUdMJcNDqdtEoDH4L9LzkX8v@mail.gmail.com>
	<7A3FDB76-0666-4827-B742-DEACDD9345EB@twistedmatrix.com>
Message-ID: <AANLkTinnNhEY8RZKL_UcV07AOqQDc7iN9aMWuhAfbnh7@mail.gmail.com>

For clarity: I think Launchpad replacing Trac is a good thing. I realize
that's a huge ordeal. However, I don't think the basic ideas are so
different that it'd be impossible. As discussed on IRC, the main
downside (aka why we can't do it right now) is lack of notifications, so
it's hard to integrate stuff like buildbot yet, but that's being worked
on.

The idea I'm proposing is probably doable without Launchpad, but it's
definitely much harder without bzr. Mixing bzr and svn, might work, but
the developers definitely need to be using bzr because branching really
can't be a pain for it to work.

I have diagrammed the quantum-transmogrifier example that I tried to
explain in the last email.

http://bit.ly/aA20Qs

On Thu, May 27, 2010 at 7:02 AM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
>
> On May 26, 2010, at 5:41 AM, Laurens Van Houtven wrote:
>
> So, while I can definitely sympathize with a certain animosity towards
> trac, and I can appreciate the goals and sensibilities of launchpad, I
> will probably flat-out veto any required / process-driven usage of
> Launchpad blueprints. Bugs, features, enhancements, etc, are all units
> of work that need to be tracked, and it's better to have one kind of
> crummy interface for tracking _everything_ than three interfaces, even
> three good interfaces, for tracking little bits stuff in different
> ways according to arbitrary distinctions. (As someone recently opined
> to me, Blueprints are a giant complicated interface for pasting the
> URL to a Google Wave into a text field. We might as well skip the text
> field and just link straight to the conversation from a Trac ticket.)

(was it dash? ;-))

I understand your point of view, but I don't think blueprints are that
bad. I'm not saying blueprints aren't fat pointers to URLs, but I just
don't think that would necessarily make them less useful. As far as
arbitrary distinctions go: I'd think new features are blueprints, and
bugs are bugs. It's not very arbitrary in my mind -- which is just a
different way of saying "I can't think of any grey areas". (Yes, this
means there are very few blueprints. I think that's a good thing :))

I think I understand the reasoning behind your opinion from a project
lead/release management/developer perspective: both bugs and blueprints
are jobs that still need to be done, similarly tracked for releases, and
they both take developer time to be resolved. I don't think this
reasoning is wrong.

For both users and developers, I think thinking of bugs and new features
as separate things makes sense. Furthermore, Launchpad has stuff like
milestones and targeted releases, so I don't think the
three-good-interfaces thing is really that prohibitive. Personally, I
don't feel that split is bad for developers either.

(FWIW: yes, I think Launchpad's Whiteboard feature needs extending and
it probably needs a comment system. And once you do that, you might
indeed wonder what the difference with bugs still is -- but I'm not
arguing Launchpad is perfect, I'm arguing it's better than Trac ;-))

Even if blueprints are non-negotiable, I think most of what I said could
just as well be applied to Launchpad bugs: you'd treat Launchpad bugs
like you treat Trac tickets now. Merge proposals and the reviews they
come with are properties of branches in Launchpad, and not of blueprints
or bugs (IIRC). So, feel free to scrap blueprints, it's not that big a
deal :)

> lp:~lvh... isn't a verb. What do you do with that string? :)

Sorry, bad emacs VC mode habit. I meant 'create a branch lp:~lvh/...'

> > and it turns out FTL travel is really really hard so I need two
> > smaller branches lp:~lvh/twisted/quantum-transmogrification-tunnels
> > and lp:~lvh/twisted/quantum-transmogrification-ansible. Both are
> > good, so they get put back into
> > ~lvh/twisted/quantum-transmogrification-ftl-travel.
> >
> > Each review would verify that all children (if any) have also been
> > reviewed. So, the final review is pretty small, as suggested :-)
>
> The review wouldn't verify that the parent had been reviewed, though.
> If you started this process by writing a bunch of code in the q-t-f-t
> branch, *that* code would never have been reviewed; unless q-t-f-t
> needs to be reviewed in its entirety before landing on trunk. Which is
> precisely what I'm trying to avoid.

Yeah, this is sort-of fixed in practice by my point (1) below, but
requires some conscious effort and discipline from the developer. An
alternative idea to just having merges of reviewed branches in q-t,
would be to have the review of q-t be "all of the commits that aren't
reviewed merges from other branches". That sounds really, really
annoying, so I'd rather do it the first way. Specifically, that means
"don't do that, branch early and often, merging is easy but branching
halfway is confusing".

>
> > This does not limit a developer's freedom to branch at will, because
> > code review is opt-in (merge proposal), not opt-out. If you don't do
> > it, that code in that branch isn't covered by a previous review, and
> > must be reviewed later.
>
> This strikes me as placing a pretty nasty burden on the reviewer. The
> reviewer has to figure out if there are any commits that went only to
> the integration branch, isolate them, review them, get that branch
> into an OK-it's-reviewed state, while meanwhile other developers might
> be committing stuff to that branch and changing its contents, both
> from regular working commits and from reviewed merges. It sounds like
> a nightmare. Maybe bzr makes it easier than it sounds, but it sounds
> bad enough that even a big improvement would still be pretty bad ;).

Again, I think point (1) addresses this: yes, but not if you promise to
make branches off your first branch off trunk (wording is a bit off, but
look at the diagram for clarification). That way they only have merges
from other branches, and those merges are reviewed.

As long as you don't do that, and keep your development out of review
branches, there is no problem. That sounds like a very big caveat, but
we have found it to work in practice. I'm not sure why, but one
explanation would be that people sometimes hugely underestimate how much
time something takes to develop, but guesstimates about the complexity
of a particular feature tend to be much more accurate. Even if that goes
awry, there is quite some leeway here: the complexity of a review branch
has to really completely get out of hand before it wouldn't be okay for
it to be one code review anymore -- up to the point that it probably
wouldn't pass review anymore under the old design.

An added bonus is that there is reduced incentive to keep piling on
features in a single review branch, because all of it has to be
reviewable in one go. I think this is a good idea, because it encourages
proper planning and up-front specs of which features you want to
implement. This effect might be stronger in a small, tight development
team such as in a small development house than with a distributed
development team like Twisted (screwing over your reviewer just means
he'll be less friendly to you next time you have to do reviews, and you
still have to work with these people later on), but I'm going to be
optimistic and pretend we're all nice people :-)

> > How exactly code review coverage would work is somewhat of an open
> > question and it's the obvious failure in this system. We use it in
> > production and it turns out to not be a problem, because people
> > always end up doing two things:
>
> Who is "we"? What is "production"? Are you talking about Twisted or a
> hypothetical project which uses Twisted, or a fork of Twisted on
> Launchpad? Is this a hypothetical project or a real proejct? I am
> super confused.

This is a real project that uses (amongst other things) Twisted.


> > 1) always branch at least once from the first branch off trunk (so
> > branch off lp:~lvh/twisted/quantum-transmogrification). Net result:
> > lp:~lvh/twisted/quantum-transmogrification only introduces code in
> > the form of merges.
>
> That's pretty much what I'm proposing, except I don't actually care
> whether they're merges or patches or individual commits, as long as
> they've cycled through code-review properly.

Right, but wouldn't it then be hard for reviewers to know what has been
reviewed and what hasn't?

>
> > 2) always do code review on branches being merged into your first
> > branch off trunk (so everything merged into
> > lp:~lvh/twisted/quantum-transmogrification has to be reviewed
> > already)
>
> And this is what we already do.

Huh? I thought it got reviewed when it was put up for review for
suggested merging into trunk. My suggestion is the same thing, except
s/trunk/q-t/. There's a second review when q-t itself gets merged into
trunk, but as long as those are all merges of reviewed branches, that
review is trivial. See diagram, points 16 and 17.

> > Note that our merges into trunk are automagic.
>
> (Again, who is "we", and by what mechanism are they automated? Are you
> proposing that we do this, or are you stating that some other people
> do?)

The aforementioned project using Twisted. I'd prefer not going into a
lot of detail, maybe we should forget about it for purposes of keeping
the discussing focused.

Perhaps what _can_ be taken home from this for purposes of the
discussion is that this way of organizing branches does actually work
for at least one development team somewhere. I'm not sure to what extent
this carries over to Twisted. All I know is that the distributedness of
Twisted development isn't much of a problem, since I had no issues and I
spent 99% working from home/university.

> > If it's merged into a direct branch off of trunk and it satisfies
> > some qualities (such as full test coverage :)), it gets put into
> > trunk, and that gets pushed to production servers. No human
> > interaction. Scary at first, but then you realize humans were
> > already involved in the QC process extensively at every point --
> > doing it this way just makes them take testing more seriously :)
>
> Human interaction of some kind should definitely be required for
> Twisted. This is not just pushing some new widget to a web site; this
> is potentially pushing out new APIs that need to be documented and
> supported to a whole ton of developers. The whole point of the process
> modification I've proposed is to make sure that features arrive in
> releases as coherent, comprehensible whole pieces, not to allow things
> we can automatically verify (like docstring and test coverage) to be
> deferred to later merges. These properties of the code should still be
> verified on every merge to the integration branch; the interesting
> thing about the merge to trunk is the verification that the unit is a
> coherent whole (and in the case of a deprecation / replacement, that
> the replacement is a functionally adequate upgrade).

Yeah, I can see that. My point is not so much an argument for
implementing automatic merging into trunk for Twisted, but mostly that
this method, when properly implemented, results in a very high
confidence level of the quality of your implementation branches, up to
the point where people have successfully automated it :)

As far as the coherent, comprehensible releases, that's one of the
reasons I like Launchpad's milestones, series, blueprints... You want to
do all of that and I think it's a great idea, and I think that they're
good tools for making all of the specifics of that intent (coherent,
comprehensible releases) more transparent to the outside world.


> Thanks,
>
> -glyph

Thanks,
Laurens



From glyph at twistedmatrix.com  Thu May 27 18:13:09 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 27 May 2010 20:13:09 -0400
Subject: [Twisted-Python] major changes, release engineering,
	and learning cost
In-Reply-To: <AANLkTinnNhEY8RZKL_UcV07AOqQDc7iN9aMWuhAfbnh7@mail.gmail.com>
References: <FCCC3CD5-0A5D-48A0-B679-24D43968175F@twistedmatrix.com>
	<20100524023532.1749.465645627.divmod.xquotient.37@localhost.localdomain>
	<AANLkTikZfKK_InzB3TTbXZnTZhvsa0CGnzgMa6-Q3R2z@mail.gmail.com>
	<8A688AD5-DF07-45CD-ABF6-49057C268800@twistedmatrix.com>
	<AANLkTimlY2Gsvpsy13_zQUdMJcNDqdtEoDH4L9LzkX8v@mail.gmail.com>
	<7A3FDB76-0666-4827-B742-DEACDD9345EB@twistedmatrix.com>
	<AANLkTinnNhEY8RZKL_UcV07AOqQDc7iN9aMWuhAfbnh7@mail.gmail.com>
Message-ID: <7BC3FF52-A3F3-4898-BE1A-34F06FAF5798@twistedmatrix.com>


On May 27, 2010, at 4:27 PM, Laurens Van Houtven wrote:

> I have diagrammed the quantum-transmogrifier example that I tried to
> explain in the last email.

OK.  With this diagram in mind, I can see that what you're proposing is nearly identical to what I've already proposed, except that you are being very vague as to the *requirements* on when and whether branches get merged.  I'm not concerned with the "level of confidence" that you describe (we already have that), but with a modification to the *requirement* that branches be fully reviewed before a merge to trunk, and that the reviewer can block that merge.

What I've suggested, simply put, is that we can have branches that land on trunk without being fully code-reviewed, *provided that each commit to that branch was itself code-reviewed*.  There are a few fiddly details beyond that, but we seem to be in agreement on that broad picture.

So, sorry for a terse response to a message that obviously took a long time to write, but I don't think this merits further discussion :).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100527/09135128/attachment.html>

From lvh at laurensvh.be  Thu May 27 18:34:56 2010
From: lvh at laurensvh.be (Laurens Van Houtven)
Date: Fri, 28 May 2010 02:34:56 +0200
Subject: [Twisted-Python] major changes, release engineering,
	and learning 	cost
In-Reply-To: <7BC3FF52-A3F3-4898-BE1A-34F06FAF5798@twistedmatrix.com>
References: <FCCC3CD5-0A5D-48A0-B679-24D43968175F@twistedmatrix.com>
	<20100524023532.1749.465645627.divmod.xquotient.37@localhost.localdomain>
	<AANLkTikZfKK_InzB3TTbXZnTZhvsa0CGnzgMa6-Q3R2z@mail.gmail.com>
	<8A688AD5-DF07-45CD-ABF6-49057C268800@twistedmatrix.com>
	<AANLkTimlY2Gsvpsy13_zQUdMJcNDqdtEoDH4L9LzkX8v@mail.gmail.com>
	<7A3FDB76-0666-4827-B742-DEACDD9345EB@twistedmatrix.com>
	<AANLkTinnNhEY8RZKL_UcV07AOqQDc7iN9aMWuhAfbnh7@mail.gmail.com>
	<7BC3FF52-A3F3-4898-BE1A-34F06FAF5798@twistedmatrix.com>
Message-ID: <AANLkTik9tw_mPlVsAexUnIicL8TBeFJxTICna26dO3PL@mail.gmail.com>

When you say merge, do you mean into trunk, or also the submerges into
my own feature/review branch? The big problem I can think of is that
interfaces are something you should probably have a rough idea about
way before any code gets written, but under this system branches get
reviewed per feature set, so it takes a very long time before anyone
(at least the reviewer, in the worst case also the developer) gets a
half-decent view of how the entire thing is going to look when it's
finished.

I'm not saying interfaces should be set in stone, of course. I just
think you should have some basic design that people agree on before
you start writing tests, let alone implementation code. (I think this
is where blueprints fit in).

Laurens



From terry at jon.es  Thu May 27 18:56:14 2010
From: terry at jon.es (Terry Jones)
Date: Thu, 27 May 2010 20:56:14 -0400
Subject: [Twisted-Python] Looking for Twisted programmers at Fluidinfo
Message-ID: <19455.5294.305428.149059@jon.es>

Apologies for a job posting, but we're looking to hire Twisted people at
Fluidinfo (http://fluidinfo.com) . We wrote FluidDB using Twisted from top
to bottom.  We love Twisted. In fact, we closed a funding deal a week ago
and the company's first check is being written to the Twisted Software
Foundation.  We wrote and use txAMQP, txRDQ, Twisted interfaces to Avro,
Zookeeper, and Amazon S3 & EC2.  We give talks on Twisted (we have a couple
in the upcoming EuroPycon) and I am personally addicted to the myriad
slippery beauties of Twisted deferreds :-)

So there you go. Want to work (preferably!) in New York in a cool startup
with a team of hackers who love Twisted?  Of course you do! See
http://fluidinfo.com/jobs & google FluidDB or Fluidinfo for more.

[We now return you to regular programming.]

Terry



From donal.mcmullan at gmail.com  Thu May 27 19:06:44 2010
From: donal.mcmullan at gmail.com (Donal McMullan)
Date: Fri, 28 May 2010 13:06:44 +1200
Subject: [Twisted-Python] Looking for Twisted programmers at Fluidinfo
In-Reply-To: <19455.5294.305428.149059@jon.es>
References: <19455.5294.305428.149059@jon.es>
Message-ID: <AANLkTik5ZLFOuKuPJvXfL9Z4XJwBNfzRDdiE1DaA3fp-@mail.gmail.com>

Congratulations on the funding!

On 28 May 2010 12:56, Terry Jones <terry at jon.es> wrote:

> Apologies for a job posting, but we're looking to hire Twisted people at
> Fluidinfo (http://fluidinfo.com) . We wrote FluidDB using Twisted from top
> to bottom.  We love Twisted. In fact, we closed a funding deal a week ago
> and the company's first check is being written to the Twisted Software
> Foundation.  We wrote and use txAMQP, txRDQ, Twisted interfaces to Avro,
> Zookeeper, and Amazon S3 & EC2.  We give talks on Twisted (we have a couple
> in the upcoming EuroPycon) and I am personally addicted to the myriad
> slippery beauties of Twisted deferreds :-)
>
> So there you go. Want to work (preferably!) in New York in a cool startup
> with a team of hackers who love Twisted?  Of course you do! See
> http://fluidinfo.com/jobs & google FluidDB or Fluidinfo for more.
>
> [We now return you to regular programming.]
>
> Terry
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100528/f95f329e/attachment.html>

From lvh at laurensvh.be  Fri May 28 01:53:34 2010
From: lvh at laurensvh.be (Laurens Van Houtven)
Date: Fri, 28 May 2010 09:53:34 +0200
Subject: [Twisted-Python] Looking for Twisted programmers at Fluidinfo
In-Reply-To: <AANLkTik5ZLFOuKuPJvXfL9Z4XJwBNfzRDdiE1DaA3fp-@mail.gmail.com>
References: <19455.5294.305428.149059@jon.es>
	<AANLkTik5ZLFOuKuPJvXfL9Z4XJwBNfzRDdiE1DaA3fp-@mail.gmail.com>
Message-ID: <AANLkTilo3dB0afaZYuhnXPOe2WIlGQD402Z7jFYXRx8d@mail.gmail.com>

Congratulations on the funding, have fun at the party. Wish I could be
there -- unfortunately I have to tell some professor about how algebra
works that day :-(



From gabriel.rossetti at arimaz.com  Fri May 28 08:40:56 2010
From: gabriel.rossetti at arimaz.com (Gabriel Rossetti)
Date: Fri, 28 May 2010 16:40:56 +0200
Subject: [Twisted-Python] can the reactor be told to stop processing
 events and to just queue them?
In-Reply-To: <4BFE6A63.9040209@arimaz.com>
References: <4BFE60D2.7030403@arimaz.com> <1274963264.31649.964.camel@pintsize>
	<4BFE6A63.9040209@arimaz.com>
Message-ID: <4BFFD5F8.9010407@arimaz.com>

Gabriel Rossetti wrote:
> Itamar Turner-Trauring wrote:
>   
>> On Thu, 2010-05-27 at 14:08 +0200, Gabriel Rossetti wrote:
>>   
>>     
>>> is there a way to tell the reactor to just queue the events and not to 
>>> process them for a specific protocol?
>>>     
>>>       
>> No, Twisted doesn't have an event queue (but see below).
>>
>>   
>>     
> ok
>   
>>>  I have two protocols running on my 
>>> reactor, one that monitors the network and one for a usb device, I'd 
>>> like to pause the event processing for the network side when certain 
>>> msgs arrive on the usb protocol and then unpause it later on. I know I 
>>> can create a queue and add the network msgs and process them later but I 
>>> find it redundant to do so when twisted already has an event queue.
>>>     
>>>       
>> How about calling transport.pauseProducing() and then later
>> transport.resumeProducing() on the TCP connections?
>>
>>   
>>     
> Ok, thanks, I'll try that.
>
>   
Just wanted to confirm that it works as you said, thank you.



From gabriel.rossetti at arimaz.com  Fri May 28 09:03:55 2010
From: gabriel.rossetti at arimaz.com (Gabriel Rossetti)
Date: Fri, 28 May 2010 17:03:55 +0200
Subject: [Twisted-Python] twisted + wx + pypubsub = progress bar update
	problem
Message-ID: <4BFFDB5B.8040304@arimaz.com>

Hello everyone,

I am using wx (wxreactor) and pypubsub with twisted and I'm having some 
issues. I have a loop that updates values and I'm trying to show the 
user the progress. The loop uses pypubsub to update the progress bar but 
even if I explicitly refrech the progress bar widget it doesn't do it 
until the loop exits. I tried calling ProcessPendingEvents() but it 
doesn't solve the problem. Does anyone have an idea on how to solve this?

Thank you,
Gabriel



From vitaly at synapticvision.com  Fri May 28 09:46:00 2010
From: vitaly at synapticvision.com (vitaly at synapticvision.com)
Date: Fri, 28 May 2010 11:46:00 -0400
Subject: [Twisted-Python] Shared resource manioulation example
Message-ID: <20100528114600.4827571jfgr8tf48@216.129.205.5>

Hi,

I'm looking for a Twisted based example how
it should be properly done update/delete of global dictionary's
SAME key:value pair from different functions all together.
Or by another words, two functions are trying to update the same  
key:value pair of the same dictionary at the same time, than how to do  
it properly with Twisted?

Thanks a lot.





From washort at twistedmatrix.com  Fri May 28 10:11:48 2010
From: washort at twistedmatrix.com (Allen Short)
Date: Fri, 28 May 2010 09:11:48 -0700
Subject: [Twisted-Python] Shared resource manioulation example
In-Reply-To: <20100528114600.4827571jfgr8tf48@216.129.205.5>
References: <20100528114600.4827571jfgr8tf48@216.129.205.5>
Message-ID: <AANLkTillEe7duR4EjBUxi6qCO8-NtHGbu4fbE9IRFhad@mail.gmail.com>

On Fri, May 28, 2010 at 8:46 AM,  <vitaly at synapticvision.com> wrote:
> I'm looking for a Twisted based example how
> it should be properly done update/delete of global dictionary's
> SAME key:value pair from different functions all together.
> Or by another words, two functions are trying to update the same
> key:value pair of the same dictionary at the same time, than how to do
> it properly with Twisted?

Twisted doesn't change anything about Python in this regard. One
update to the dictionary is going to happen before the other. If these
updates are being done from different threads, you need some kind of
synchronization to make them happen in the order you want.

However, if you aren't explicitly using threads in your code, remember
that Twisted doesn't run your code outside the main thread unless you
ask it to. So nothing happens at "the same time" -- one function runs,
then the other.

What problems are you running into?



From vitaly at synapticvision.com  Fri May 28 11:14:43 2010
From: vitaly at synapticvision.com (vitaly at synapticvision.com)
Date: Fri, 28 May 2010 13:14:43 -0400
Subject: [Twisted-Python] Shared resource manioulation example
In-Reply-To: <AANLkTillEe7duR4EjBUxi6qCO8-NtHGbu4fbE9IRFhad@mail.gmail.com>
References: <20100528114600.4827571jfgr8tf48@216.129.205.5>
	<AANLkTillEe7duR4EjBUxi6qCO8-NtHGbu4fbE9IRFhad@mail.gmail.com>
Message-ID: <20100528131443.25321imh24zqndhc@216.129.205.5>


Thank you for reply.

I'm calling each update/delete function as a separate Deferred, no  
explicit threads on those functions.

OK than, let's complicated it a bit with "dictionary of lists of  
dictionaries" instead of simple dictionary and let's put it all under  
reactor().

There are 2 incoming requests: one to "update aa1=aval100" and another  
to "delete 'a1'":
a={
   'a1':[{'aa1':'aval1'},{'bb1':'bval1'}],
   'a2':[{'aa2':'aval1'},{'bb2':'bval2'}]
}

So "delete 'a1'" will exec always only after "update aa1=aval100" is done?


Quoting "Allen Short" <washort at twistedmatrix.com>:

> On Fri, May 28, 2010 at 8:46 AM,  <vitaly at synapticvision.com> wrote:
>> I'm looking for a Twisted based example how
>> it should be properly done update/delete of global dictionary's
>> SAME key:value pair from different functions all together.
>> Or by another words, two functions are trying to update the same
>> key:value pair of the same dictionary at the same time, than how to do
>> it properly with Twisted?
>
> Twisted doesn't change anything about Python in this regard. One
> update to the dictionary is going to happen before the other. If these
> updates are being done from different threads, you need some kind of
> synchronization to make them happen in the order you want.
>
> However, if you aren't explicitly using threads in your code, remember
> that Twisted doesn't run your code outside the main thread unless you
> ask it to. So nothing happens at "the same time" -- one function runs,
> then the other.
>
> What problems are you running into?
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>





From JOHN at egh.com  Fri May 28 11:15:26 2010
From: JOHN at egh.com (John Santos)
Date: Fri, 28 May 2010 13:15:26 -0400
Subject: [Twisted-Python] Shared resource manioulation example
In-Reply-To: <20100528114600.4827571jfgr8tf48@216.129.205.5>
Message-ID: <1100528124424.50310N-100000@Ives.egh.com>

On Fri, 28 May 2010 vitaly at synapticvision.com wrote:

> Hi,
> 
> I'm looking for a Twisted based example how
> it should be properly done update/delete of global dictionary's
> SAME key:value pair from different functions all together.
> Or by another words, two functions are trying to update the same  
> key:value pair of the same dictionary at the same time, than how to do  
> it properly with Twisted?
> 
> Thanks a lot.
> 

Vitaly,

As a relative newbie to both Twisted and Python (I wish I had more time
to play with it, as there are lots of things I don't really understand
yet, but other work intervenes), I *think* the whole point of the
Twisted reactor is to serialize the callbacks.

So two functions *can't* be trying to update the same Python object
(dictionary or anything else, global or local) at the same time.
While one thread has control, it can do anything it wants to the
global dictionary, and no other function can see anything but the
final result.

So "just do it"!

This assumes you aren't using threads, which are *not* compatible
with Twisted anyway.

The only more complicated scenario I can see is if some desired
process uses the current value in a dictionary to initiate a
request to something else (for example, a TCP/IP messages to another
system) which returns its result in another callback which then stores
the result (or some value that depends on the result) in the same
dictionary element.  If two such sequences can overlap at the same
time, but using the initial value of dictionary element in the 2nd
sequence would produce an incorrect final result, but instead it
should be defered until the 1st sequence completes, then you would
need to use some sort of locking mechanism.

A very simple mechanism would be to add a boolean to each object
(i.e. each dictionary value.)  When the first callback executes, it
checks the boolean.  If set, it waits by calling reactor.callLater,
passing itself as the callback.  If the boolean is clear, it sets
it and initiates the processing.  When the final callback executes,
it sets the new value in the dictionary and clears the boolean.

More sophisticated mechanisms could use an exponential waiting
period for the reactor.callLater time; add a timeout (producing
an error if the whole process takes too long, perhaps saving the
initial value so the process could be rolled back if it fails);
replace the callLater's with a different deferal mechanism that
could be called immediately when the lock gets released; check
for deadlocks amoung multiple locks, etc.  There may very well
already exist a Twisted package for doing all this already (complete
with debugging hooks, statistics, etc.)  Someone with more Twisted
experience could probably point you right at it.  If no such
package exists, I think it would be a very nice thing to have.
If people wouldn't mind waiting for a very long (possibly infinite)
time for it, I could probably be coerced into taking a stab at
producing one.


-- 
John Santos
Evans Griffiths & Hart, Inc.
781-861-0670 ext 539




From vitaly at synapticvision.com  Fri May 28 12:34:39 2010
From: vitaly at synapticvision.com (vitaly at synapticvision.com)
Date: Fri, 28 May 2010 14:34:39 -0400
Subject: [Twisted-Python] Shared resource manioulation example
In-Reply-To: <1100528124424.50310N-100000@Ives.egh.com>
References: <1100528124424.50310N-100000@Ives.egh.com>
Message-ID: <20100528143439.903440cxu8o55qyo@216.129.205.5>

hi,

Callbacks serialization is clear to me.

I'll try to rephrase the question: two requests are incoming for reactor()
to handle. Each request has its own chain of callbacks.
At some point one of the requests need to update the same
global data structure, and another request need to delete from the same
global data structure.
So theoretically, correct me if I wrong, will be a data collision.
If it is, than how can I prevent it? Example please.

thank you.

Quoting "John Santos" <JOHN at egh.com>:

> On Fri, 28 May 2010 vitaly at synapticvision.com wrote:
>
>> Hi,
>>
>> I'm looking for a Twisted based example how
>> it should be properly done update/delete of global dictionary's
>> SAME key:value pair from different functions all together.
>> Or by another words, two functions are trying to update the same
>> key:value pair of the same dictionary at the same time, than how to do
>> it properly with Twisted?
>>
>> Thanks a lot.
>>
>
> Vitaly,
>
> As a relative newbie to both Twisted and Python (I wish I had more time
> to play with it, as there are lots of things I don't really understand
> yet, but other work intervenes), I *think* the whole point of the
> Twisted reactor is to serialize the callbacks.
>
> So two functions *can't* be trying to update the same Python object
> (dictionary or anything else, global or local) at the same time.
> While one thread has control, it can do anything it wants to the
> global dictionary, and no other function can see anything but the
> final result.
>
> So "just do it"!
>
> This assumes you aren't using threads, which are *not* compatible
> with Twisted anyway.
>
> The only more complicated scenario I can see is if some desired
> process uses the current value in a dictionary to initiate a
> request to something else (for example, a TCP/IP messages to another
> system) which returns its result in another callback which then stores
> the result (or some value that depends on the result) in the same
> dictionary element.  If two such sequences can overlap at the same
> time, but using the initial value of dictionary element in the 2nd
> sequence would produce an incorrect final result, but instead it
> should be defered until the 1st sequence completes, then you would
> need to use some sort of locking mechanism.
>
> A very simple mechanism would be to add a boolean to each object
> (i.e. each dictionary value.)  When the first callback executes, it
> checks the boolean.  If set, it waits by calling reactor.callLater,
> passing itself as the callback.  If the boolean is clear, it sets
> it and initiates the processing.  When the final callback executes,
> it sets the new value in the dictionary and clears the boolean.
>
> More sophisticated mechanisms could use an exponential waiting
> period for the reactor.callLater time; add a timeout (producing
> an error if the whole process takes too long, perhaps saving the
> initial value so the process could be rolled back if it fails);
> replace the callLater's with a different deferal mechanism that
> could be called immediately when the lock gets released; check
> for deadlocks amoung multiple locks, etc.  There may very well
> already exist a Twisted package for doing all this already (complete
> with debugging hooks, statistics, etc.)  Someone with more Twisted
> experience could probably point you right at it.  If no such
> package exists, I think it would be a very nice thing to have.
> If people wouldn't mind waiting for a very long (possibly infinite)
> time for it, I could probably be coerced into taking a stab at
> producing one.
>
>
> --
> John Santos
> Evans Griffiths & Hart, Inc.
> 781-861-0670 ext 539
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>





From nitro at dr-code.org  Fri May 28 12:44:34 2010
From: nitro at dr-code.org (Nitro)
Date: Fri, 28 May 2010 20:44:34 +0200
Subject: [Twisted-Python] Shared resource manioulation example
In-Reply-To: <20100528143439.903440cxu8o55qyo@216.129.205.5>
References: <1100528124424.50310N-100000@Ives.egh.com>
	<20100528143439.903440cxu8o55qyo@216.129.205.5>
Message-ID: <op.vdfickypz3pzfc@nitrogenycs3>

Am 28.05.2010, 20:34 Uhr, schrieb <vitaly at synapticvision.com>:

> hi,
>
> Callbacks serialization is clear to me.
>
> I'll try to rephrase the question: two requests are incoming for  
> reactor()
> to handle. Each request has its own chain of callbacks.
> At some point one of the requests need to update the same
> global data structure, and another request need to delete from the same
> global data structure.
> So theoretically, correct me if I wrong, will be a data collision.
> If it is, than how can I prevent it? Example please.

It will go like this:

reactor loop:

1) receive Event A
    - fire deferred callback
    - deferred callback does data[key] = value
2) receive Event B
     - fire deferred callback
     - del data[key]

So one event is processed after another. Determining if it's a data  
collision is up to you. E.g. you could use something like a revision  
number. Each time you change the dictionary, increase it by one. Then if  
you try to change the dictionary and the client gave a different revision  
id then the last one, you know there is a collision.
What you do sounds very much like database transactions. Those are not  
easy to do. One example is the ZODB which can do what you want. For  
example via BTrees. But I guess there are more lightweight systems which  
do what you want, too. It all depends where you want to go with your app.  
That's up to you though and not really a question in regards to twisted or  
networking.

-Matthias



From mgwilliams at gmail.com  Fri May 28 12:49:00 2010
From: mgwilliams at gmail.com (Matthew Williams)
Date: Fri, 28 May 2010 14:49:00 -0400
Subject: [Twisted-Python] Question
In-Reply-To: <20100528143439.903440cxu8o55qyo@216.129.205.5>
References: <1100528124424.50310N-100000@Ives.egh.com>
	<20100528143439.903440cxu8o55qyo@216.129.205.5>
Message-ID: <5CBFBB49-E90F-4FAE-8D9C-DF0C6B9BA655@gmail.com>

Is it acceptable to post job openings to this list?



From vitaly at synapticvision.com  Fri May 28 13:10:19 2010
From: vitaly at synapticvision.com (vitaly at synapticvision.com)
Date: Fri, 28 May 2010 15:10:19 -0400
Subject: [Twisted-Python] Shared resource manioulation example
In-Reply-To: <op.vdfickypz3pzfc@nitrogenycs3>
References: <1100528124424.50310N-100000@Ives.egh.com>
	<20100528143439.903440cxu8o55qyo@216.129.205.5>
	<op.vdfickypz3pzfc@nitrogenycs3>
Message-ID: <20100528151019.150894wcx4e6tvz0@216.129.205.5>


Of course its up to me to determine if it's a data collision or not,
but I was thinking may be Twisted can provide me with some already  
existing mechanism of its own. After all its already a pretty massive  
and complicated framework with tons of capabilities ...

But I'd like to get back to the point of the question: if at some  
point EventA callbacks and EventB callbacks need to work on the same  
global variable, than what would be a Twisted way (if exist) to  
prevent data collision ?

Thank you.

Quoting Nitro <nitro at dr-code.org>:

> Am 28.05.2010, 20:34 Uhr, schrieb <vitaly at synapticvision.com>:
>
>> hi,
>>
>> Callbacks serialization is clear to me.
>>
>> I'll try to rephrase the question: two requests are incoming for
>> reactor()
>> to handle. Each request has its own chain of callbacks.
>> At some point one of the requests need to update the same
>> global data structure, and another request need to delete from the same
>> global data structure.
>> So theoretically, correct me if I wrong, will be a data collision.
>> If it is, than how can I prevent it? Example please.
>
> It will go like this:
>
> reactor loop:
>
> 1) receive Event A
>     - fire deferred callback
>     - deferred callback does data[key] = value
> 2) receive Event B
>      - fire deferred callback
>      - del data[key]
>
> So one event is processed after another. Determining if it's a data
> collision is up to you. E.g. you could use something like a revision
> number. Each time you change the dictionary, increase it by one. Then if
> you try to change the dictionary and the client gave a different revision
> id then the last one, you know there is a collision.
> What you do sounds very much like database transactions. Those are not
> easy to do. One example is the ZODB which can do what you want. For
> example via BTrees. But I guess there are more lightweight systems which
> do what you want, too. It all depends where you want to go with your app.
> That's up to you though and not really a question in regards to twisted or
> networking.
>
> -Matthias
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>





From itamar at itamarst.org  Fri May 28 13:14:06 2010
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Fri, 28 May 2010 15:14:06 -0400 (EDT)
Subject: [Twisted-Python] Question
In-Reply-To: <5CBFBB49-E90F-4FAE-8D9C-DF0C6B9BA655@gmail.com>
References: <1100528124424.50310N-100000@Ives.egh.com>
	<20100528143439.903440cxu8o55qyo@216.129.205.5>
	<5CBFBB49-E90F-4FAE-8D9C-DF0C6B9BA655@gmail.com>
Message-ID: <11210.63.107.91.99.1275074046.squirrel@webmail.zoteca.com>

> Is it acceptable to post job openings to this list?

Yes, as long as they're Twisted-related.




From mgwilliams at gmail.com  Fri May 28 13:23:29 2010
From: mgwilliams at gmail.com (Matthew Williams)
Date: Fri, 28 May 2010 14:23:29 -0500
Subject: [Twisted-Python] Job Opening - Telecommute or Relocation Possible -
	New Jersey
In-Reply-To: <11210.63.107.91.99.1275074046.squirrel@webmail.zoteca.com>
References: <1100528124424.50310N-100000@Ives.egh.com>
	<20100528143439.903440cxu8o55qyo@216.129.205.5>
	<5CBFBB49-E90F-4FAE-8D9C-DF0C6B9BA655@gmail.com>
	<11210.63.107.91.99.1275074046.squirrel@webmail.zoteca.com>
Message-ID: <518E5A50-F2E8-4E7F-B885-2CAA217DAEF2@gmail.com>

TelTech Systems is hiring!

We are looking for candidates with a strong background in network  
programming using Twisted. Telecommunications experience (particularly  
VoIP) is also important. We use SER+SEMS for the most part.

Pluses include knowledge of PHP, JavaScript, JQuery, and other front- 
end technologies.

To learn more about our company and products, visit teltechcorp.com, trapcall.com 
, and spoofcard.com.

This is a full-time position, but contractors with the right skill set  
may be considered.

Please feel free to post to the list or reply to me personally with  
any questions.

Matthew Williams
TelTech Systems Inc.



From kra at monkey.org  Fri May 28 13:38:29 2010
From: kra at monkey.org (Karl Anderson)
Date: Fri, 28 May 2010 12:38:29 -0700
Subject: [Twisted-Python] Shared resource manioulation example
In-Reply-To: <20100528151019.150894wcx4e6tvz0@216.129.205.5>
References: <1100528124424.50310N-100000@Ives.egh.com>
	<20100528143439.903440cxu8o55qyo@216.129.205.5>
	<op.vdfickypz3pzfc@nitrogenycs3>
	<20100528151019.150894wcx4e6tvz0@216.129.205.5>
Message-ID: <AANLkTikTkWSP5wYm3aZogZNhC4f03O-wYOLcb9hdlR1w@mail.gmail.com>

On Fri, May 28, 2010 at 12:10 PM,  <vitaly at synapticvision.com> wrote:
>
> Of course its up to me to determine if it's a data collision or not,
> but I was thinking may be Twisted can provide me with some already
> existing mechanism of its own. After all its already a pretty massive
> and complicated framework with tons of capabilities ...
>
> But I'd like to get back to the point of the question: if at some
> point EventA callbacks and EventB callbacks need to work on the same
> global variable, than what would be a Twisted way (if exist) to
> prevent data collision ?

In the way that you have described it, that's a question for your
code.  In the general case, you don't know what order callbacks on two
chains will be called in.

The advantage of async is that you can use a standard Python type as a
mutex, and relinquish control if it's not ready.  Set a variable when
one chain is working, and if another chain encounters that, have it
try later by creating and retuning a new Deferred with its work on
that callback, or with reactor.callLater().



From exarkun at twistedmatrix.com  Sat May 29 22:05:39 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 30 May 2010 04:05:39 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1275192339.84.610249628@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100530/c9db9963/attachment-0001.html>

From glyph at twistedmatrix.com  Sun May 30 15:28:05 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 30 May 2010 17:28:05 -0400
Subject: [Twisted-Python] Reminder: Twisted 10.1 scheduled for early June
In-Reply-To: <AANLkTikg-mJ7p865ALUL_-cTvEC8Spe57N5p7agczzcq@mail.gmail.com>
References: <AANLkTikg-mJ7p865ALUL_-cTvEC8Spe57N5p7agczzcq@mail.gmail.com>
Message-ID: <F02D0944-623D-4FBE-878E-F427131EDC0A@twistedmatrix.com>

On May 26, 2010, at 4:19 AM, Jonathan Lange wrote:

> Hello all,
> 
> I and my lovely assistant Glyph intend to cut a release of Twisted
> 10.1 on the 5th and 6th of June. That's in eleven days.

Yes.

Please mark the date, everyone: your fate is sealed.  Only 5 days remain.

> If you would like to help us do that, please fix one of:

While everyone should be fixated on fixing tickets in Twisted as often as possible, all the time, I do want to clarify that these bugs might not be the release-blockers they appear to be...

> http://twistedmatrix.com/trac/ticket/3998

While this is a regression, it *was* present in 10.0 and therefore won't be a regression from 10.0->10.1.  I think we should fix it, but if necessary, we should do both a 10.0.1 and a 10.1.1 maintenance release to fix it.

> http://twistedmatrix.com/trac/ticket/4345

This is currently open to track the work of creating a 10.0.1 maintenance release: the bug is already fixed in trunk, which will become 10.1.  Are we planning to do 10.0.1 concurrently with 10.1?  I was assuming that would be done later; if it was concurrent with anything, I was assuming it would be concurrent with 10.1.1.

> http://twistedmatrix.com/trac/ticket/4320

While this is "just" a documentation ticket, I would actually prefer that anyone with free time turn their gaze here first.  Deferred cancellation is a big deal and needs to be documented properly.  I'm personally more likely to argue for delaying (albeit not blocking) the release for this than anything else.

> Or review tickets: http://twistedmatrix.com/trac/report/15


Yes, please.  I also plan to put <http://twistedmatrix.com/trac/ticket/1442> back into review either today or tomorrow, and I would very much appreciate a fearless reviewer to attack that once it's done.  The queue is starting to get pretty deep; and there are features which may be *already done*, even sexy new features like "HTML5" WebSocket protocol support, but won't get into Twisted 10.1 because they're stuck in the review queue.  Do you want that to be *your* fault?  Of course not!  So review some tickets this week!




From gabriele.lanaro at gmail.com  Mon May 31 03:01:07 2010
From: gabriele.lanaro at gmail.com (Gabriele Lanaro)
Date: Mon, 31 May 2010 11:01:07 +0200
Subject: [Twisted-Python] Sending large files over network with
	perspective broker
In-Reply-To: <20100524200659.1902.414257654.divmod.xquotient.8@localhost.localdomain>
References: <AANLkTil5QrvNyr2t20UbOVWqr2UkgcfOD9jGZtDikkDj@mail.gmail.com>
	<m2632fjr17.fsf@valheru.db3l.homeip.net>
	<AANLkTinGjNcQyorbzo1r7bObO7Gmu9VpqKsSh-trov1Q@mail.gmail.com>
	<AANLkTimUckRnF7hvJT3z1k128oNcLxoyVeYMz56k6w71@mail.gmail.com>
	<AANLkTil_ie8STx5Itqq3dWNoCq4lHXnbwDyOLu1iBkft@mail.gmail.com>
	<20100523163044.1749.1340666766.divmod.xquotient.0@localhost.localdomain>
	<AANLkTikURkhafcdK0oKdsyeVoYn1lwp1u5MTAbwHFONi@mail.gmail.com>
	<788800C0-70A6-4866-A1A0-503250DD4F21@twistedmatrix.com>
	<AANLkTinQVra0QFlyIX1Gz7oMYJxTCBkOcnBECqzqy81H@mail.gmail.com>
	<20100524200659.1902.414257654.divmod.xquotient.8@localhost.localdomain>
Message-ID: <AANLkTikP-XATIwemk4LfXnd5WEzlwgaT-5IA9RFNwcdg@mail.gmail.com>

I've this problem also with consumer/producer over a LineReceiver protocol,
should I submit a bug report?

2010/5/24 <exarkun at twistedmatrix.com>

> On 08:39 am, gabriele.lanaro at gmail.com wrote:
> >Thank you very much for your explanation! Now I've understood what's
> >the
> >problem in iterate().
> >
> >On these lines I've prepared a this little test case (in attach):
> >
> >Test 1
> >
> >$ python runner.py
> >click on the button
> >minimize/unminimize window to force a widget redraw, the window should
> >be
> >blank.
> >you can click another time on the button, the event is catched but no
> >"button animation" is performed
> >
> >Test2
> >
> >$ python runner.py
> >open another console
> >$ python runner_other_process.py
> >click on the button of runner_other_process, this connects itself to
> >the
> >server in the first process
> >each window should redraw correctly
>
> This may demonstrate a bug in gtk2reactor.  It seems to be servicing
> network events to the exclusion of GUI events, which it isn't supposed
> to do.
>
> I don't see any obvious reason for this.  Unfortunately glib2 (or
> pygtk2, perhaps) is ultimately in charge of the ordering/priority of
> these event handlers.  gtk2reactor is just a thin layer on top of the
> glib2-supplied I/O notification APIs.  But perhaps there's a way we
> could be invoking these APIs differently so that the GUI gets more of a
> chance to run.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100531/7c7c6c21/attachment-0001.html>

From exarkun at twistedmatrix.com  Mon May 31 07:20:34 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 31 May 2010 13:20:34 -0000
Subject: [Twisted-Python] Sending large files over network
	with	perspective broker
In-Reply-To: <AANLkTikP-XATIwemk4LfXnd5WEzlwgaT-5IA9RFNwcdg@mail.gmail.com>
References: <AANLkTil5QrvNyr2t20UbOVWqr2UkgcfOD9jGZtDikkDj@mail.gmail.com>
	<m2632fjr17.fsf@valheru.db3l.homeip.net>
	<AANLkTinGjNcQyorbzo1r7bObO7Gmu9VpqKsSh-trov1Q@mail.gmail.com>
	<AANLkTimUckRnF7hvJT3z1k128oNcLxoyVeYMz56k6w71@mail.gmail.com>
	<AANLkTil_ie8STx5Itqq3dWNoCq4lHXnbwDyOLu1iBkft@mail.gmail.com>
	<20100523163044.1749.1340666766.divmod.xquotient.0@localhost.localdomain>
	<AANLkTikURkhafcdK0oKdsyeVoYn1lwp1u5MTAbwHFONi@mail.gmail.com>
	<788800C0-70A6-4866-A1A0-503250DD4F21@twistedmatrix.com>
	<AANLkTinQVra0QFlyIX1Gz7oMYJxTCBkOcnBECqzqy81H@mail.gmail.com>
	<20100524200659.1902.414257654.divmod.xquotient.8@localhost.localdomain>
	<AANLkTikP-XATIwemk4LfXnd5WEzlwgaT-5IA9RFNwcdg@mail.gmail.com>
Message-ID: <20100531132034.1864.866270655.divmod.xquotient.8@localhost.localdomain>

On 09:01 am, gabriele.lanaro at gmail.com wrote:
>I've this problem also with consumer/producer over a LineReceiver 
>protocol,
>should I submit a bug report?

Please.

Jean-Paul



From jaroslaw.fedewicz at gmail.com  Mon May 31 07:48:46 2010
From: jaroslaw.fedewicz at gmail.com (=?utf-8?Q?Jaros=C5=82aw_Fedewicz?=)
Date: Mon, 31 May 2010 16:48:46 +0300
Subject: [Twisted-Python] PB and unstable network
In-Reply-To: <AANLkTinGm_WlBSnT-FEbVXV3MpXk_T3d-NRUrzGvxN0i@mail.gmail.com>
References: <AANLkTilMJwEDDbRzyeZdjIDZ6PGlj6x5FHq4c-QovDXY@mail.gmail.com>
	<1D9536C6-75DE-4934-982B-3B0485D526F0@twistedmatrix.com>
	<AANLkTikkt_ZBrYcXuU5nlH5WsP_CN-yZz9zFh4YYCOUX@mail.gmail.com>
	<AANLkTim4Qngekk1D1WTNTi_XLVQPCb6CCs8WIf6BTzdO@mail.gmail.com>
	<AANLkTinGm_WlBSnT-FEbVXV3MpXk_T3d-NRUrzGvxN0i@mail.gmail.com>
Message-ID: <73D51060-D957-48E6-ADBA-8BF20270A623@gmail.com>


On 27 трав. 2010, at 12:45, Viktor Klimov wrote:

> You mean a packet message used in the TCP? Or offer to implement ACK to PB?
> 

The latter one. An application-level ack. You only accept a transaction when you have „acked” to your peer that you have the full data payload, and after it acks your ack so that you know your peer won't re-send the same thing over again.

Sounds complicated, but at least your peers can both be aware of each others' intentions.

> Maybe someone will point to the literature on network programming in
> unstable networks?

I don't see much difference between the two, except that on an unstable link, you keep trying harder.


From odie5533 at gmail.com  Mon May 31 21:38:39 2010
From: odie5533 at gmail.com (David Bern)
Date: Mon, 31 May 2010 22:38:39 -0500
Subject: [Twisted-Python] RDT/RTSP Library for Twisted
Message-ID: <AANLkTimXdxpkl5je2xDM6j0HxzArNjrF9STdbwkyeFWK@mail.gmail.com>

I wrote a set of Twisted libraries for RDT and RTSP streaming, along
with handlers for SDPP, ASMRP, and RMFF. I thought I'd announce it
here since they are most useful to other developers. I've released
them under the GNU GPL but I'd be willing to release them under a
different license if requested.

Link to blog post:
http://odie5533.com/twisted-python-rdt-rtsp-library-and-stream-downloader-346
Link to library:
http://odie5533.com/programs/RDT-RTSP/Twisted%20RDT-RTSP%20Library%202010-05-31.zip

-- 
David Bern
http://odie5533.com/



