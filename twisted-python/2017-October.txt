From trac at twistedmatrix.com  Sun Oct  1 00:05:23 2017
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 01 Oct 2017 06:05:23 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1506837923.54.4860991002660514103@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171001/01ece5c9/attachment-0001.html>

From hawkowl at atleastfornow.net  Sun Oct  1 04:30:27 2017
From: hawkowl at atleastfornow.net (Amber Brown)
Date: Sun, 1 Oct 2017 21:30:27 +1100
Subject: [Twisted-Python] Migrating Trac Tickets to GitHub issues
In-Reply-To: <CAFycZ9fTdR=PkpbOMkVsqrAOYdL-=KWNFYBnYqtE1wzs=vAmVA@mail.gmail.com>
References: <CAFycZ9fTdR=PkpbOMkVsqrAOYdL-=KWNFYBnYqtE1wzs=vAmVA@mail.gmail.com>
Message-ID: <1CBE4C4E-A7F8-4282-A9F2-5B228E6A921C@atleastfornow.net>


> On 1 Oct 2017, at 8:15 am, Adi Roiban <adi at roiban.ro> wrote:
> 
> Hi,
> 
> I would like to re-start the conversation about migrating Trac tickets
> to GitHub issues.
> 
> My main reason for doing this is to make it easier for people to
> contribute to Twisted.
> 
> In CONTRIBUTING there is this info
> 
> `GitHub doesn't provide adequate tooling for its community.`
> 
> I don't know what is missing in GitHub and why overall Trac is better
> than GitHub issues.
> 
> I know that GitHub Issues is simple and you can't save reports.
> 
> What are problems are there with GitHub issues, which are blocking the
> migration?
> 
> Please send your thoughts.
> 
> Why you think that GitHub issues might be worst than Trac tickets :) ?

Currently, GitHub Issues don't allow for non-committers to make modifications to categories, milestones, edit the original ticket description, or close tickets. This kinda sucks, because it makes the pool of triagers smaller, and also makes most obvious review queue methods harder (adding a category).

I think Mark Williams or someone has hacked up a bot to sidestep this, but... again, contributor effort to get that past the line.

- Amber
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 488 bytes
Desc: Message signed with OpenPGP
URL: </pipermail/twisted-python/attachments/20171001/8bb0be23/attachment.sig>

From rodrigc at crodrigues.org  Sun Oct  1 10:31:07 2017
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Sun, 1 Oct 2017 09:31:07 -0700
Subject: [Twisted-Python] Migrating Trac Tickets to GitHub issues
In-Reply-To: <1CBE4C4E-A7F8-4282-A9F2-5B228E6A921C@atleastfornow.net>
References: <CAFycZ9fTdR=PkpbOMkVsqrAOYdL-=KWNFYBnYqtE1wzs=vAmVA@mail.gmail.com>
 <1CBE4C4E-A7F8-4282-A9F2-5B228E6A921C@atleastfornow.net>
Message-ID: <CAG=rPVcyjRKxDXboGidWhYVrEsc2vv4bgMDbQaxP5wqs-azwHg@mail.gmail.com>

On Sun, Oct 1, 2017 at 3:30 AM, Amber Brown <hawkowl at atleastfornow.net>
wrote:

>
>
> Currently, GitHub Issues don't allow for non-committers to make
> modifications to categories, milestones, edit the original ticket
> description, or close tickets. This kinda sucks, because it makes the pool
> of triagers smaller, and also makes most obvious review queue methods
> harder (adding a category).
>


Are there enough non-committers to Twisted who are actively doing this
right now, to make this
as big an issue as you are claiming?  My guess is no.
Other projects related to klein and treq are using GitHub to track issues
instead of Trac.
Do those projects have problem with non-committers triaging issues, despite
the inability to
create/modify categories/milestones, etc.?

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171001/b4080add/attachment.html>

From glyph at twistedmatrix.com  Sun Oct  1 12:27:25 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 1 Oct 2017 11:27:25 -0700
Subject: [Twisted-Python] Defining the review workflow on top of GitHub
	PR
In-Reply-To: <CAFycZ9fcEGiCDpnPW6kyZByxRp-_iBwvz=YczqeKYU0GX6TJvQ@mail.gmail.com>
References: <CAFycZ9fcEGiCDpnPW6kyZByxRp-_iBwvz=YczqeKYU0GX6TJvQ@mail.gmail.com>
Message-ID: <A5A654ED-4299-469B-9D8E-704D37312249@twistedmatrix.com>



> On Sep 30, 2017, at 3:14 PM, Adi Roiban <adi at roiban.ro> wrote:
> 
> I am restarting this discussion
> https://twistedmatrix.com/pipermail/twisted-python/2016-May/030333.html
> 
> I am starting a new thread since I want to keep the focus on the
> review process / workflow / markers, and not on the things required to
> accept a PR or do a review.

I'm a little confused.  What do you mean by "process / workflow / markers" if not "the things required to accept a PR or do a review"?

> ----------
> 
>> Proposing: Just open a pull request.  Any open pull request should be treated as part of the queue.
> 
> I don't like this. If you are not a comitter, you need to open a PR to
> trigger the tests.
> 
> So you want to first open a PR, then wait for tests to execute, then
> fix and only after that to request the review.
> 
> We can start with setting the title to have "[WIP]" marker, to let
> others know that this is not yet ready... but then when changes are
> required, the reviewer will have to set the WIP marker again.. and if
> the reviewer is not a team member, it will not have rights to edit the
> subject.
> 
> But I hope that we can have a bot which once a "please review" comment
> is left, it will set a label.

Mark Williams already started working on this: https://github.com/markrwilliams/txghbot

>> Accepting: A committer pushes the big green button;
> 
> +1 ... but maybe also leave a comment :)

We should have more verbiage around the comment stuff, including the "always say thank you twice" rule which I don't think is written down anywhere :-).

>> Reviewing: This is the potentially slightly odd part.  I believe a review that doesn't result in acceptance should close the PR.  We need to be careful to always include some text that explains that closing a PR does not mean that the change is rejected, just that the submitter must re-submit.  Initially this would just mean opening a new PR, but Mark Williams is working on a bot to re-open pull requests when a submitter posts a "please review" comment: https://github.com/markrwilliams/txghbot
> 
> Since we will have a bot for "please review", why not use the same bot
> to set a label on "please make changes" ?

Yep!

> I think that closing a PR should mean that the work on that branch is
> rejected :)

I still want to require people to open an issue first so we can separate closing PRs ("this patch is too bad to be accepted, please try again") from closing tickets or issues ("we do not want to do this work").

>> Responding: A submitter can open a new PR, or, once we start running txghbot, reopen their closed PR.
> 
> As commented above, I am +1 for leaving a "please review" comment and
> having a bot updating the labels.
> 
>> Viewing: https://github.com/twisted/twisted/pulls?utf8=âœ“&q=is%3Apr+is%3Aopen+-status%3Afailed
> 
> One we get the "please-review" and "changes-needed" labels it should
> be eaiser to view the queue.

I can update https://twisted.reviews/ <https://twisted.reviews/> (at some point) when to point at the appropriate link.  (You've all got it bookmarked, right?)

> -------
> 
> Whem multiple reviewers are required, you can use the dedicated GitHub
> Review message and approve it without hiting the merge button.
> 
> ---------
> 
> I have no idea how other projects are managing the review queue.

"Poorly" :-).

A failure mode of many open source projects is that they have terrible latency when responding to new contributors.

> Please send your feedback.
> 
> If we agree on a process based on managing the labes, I can work on
> implemeting the required logic with a bot and GitHub hooks.

Please do coordinate with Mark on this, if you weren't already ;-).

> --------
> 
> We can also start by using the WIP marker
> 
> * while preparing the PR
> * once changes are required and the author works on addressing the
> changes requsted on review
> 
> Any PR which is open and does not have the WIP marker means that is
> part of the queue.
> 
> ----------
> 
> 
> Thanks!
> 
> PS: I have checked pyca/crypography but I don't see any pattern there
> and a lot of PR are merged without any comment
> https://github.com/pyca/cryptography/pulls?q=is%3Apr+is%3Aclosed <https://github.com/pyca/cryptography/pulls?q=is:pr+is:closed>

Cryptography is kind of a weird project with a somewhat rarified contributor audience, I don't know if it makes sense to copy their process.

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171001/bfcf0bd9/attachment.html>

From glyph at twistedmatrix.com  Sun Oct  1 12:32:27 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 1 Oct 2017 11:32:27 -0700
Subject: [Twisted-Python] Migrating Trac Tickets to GitHub issues
In-Reply-To: <CAG=rPVcyjRKxDXboGidWhYVrEsc2vv4bgMDbQaxP5wqs-azwHg@mail.gmail.com>
References: <CAFycZ9fTdR=PkpbOMkVsqrAOYdL-=KWNFYBnYqtE1wzs=vAmVA@mail.gmail.com>
 <1CBE4C4E-A7F8-4282-A9F2-5B228E6A921C@atleastfornow.net>
 <CAG=rPVcyjRKxDXboGidWhYVrEsc2vv4bgMDbQaxP5wqs-azwHg@mail.gmail.com>
Message-ID: <25282B03-2C28-48AA-A8C5-B6DE67BF25D7@twistedmatrix.com>



> On Oct 1, 2017, at 9:31 AM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> 
> 
> On Sun, Oct 1, 2017 at 3:30 AM, Amber Brown <hawkowl at atleastfornow.net <mailto:hawkowl at atleastfornow.net>> wrote:
> 
> 
> Currently, GitHub Issues don't allow for non-committers to make modifications to categories, milestones, edit the original ticket description, or close tickets. This kinda sucks, because it makes the pool of triagers smaller, and also makes most obvious review queue methods harder (adding a category).
> 
> 
> Are there enough non-committers to Twisted who are actively doing this right now, to make this
> as big an issue as you are claiming?  My guess is no.

"Submit for review" is such an action, so, yes.

> Other projects related to klein and treq are using GitHub to track issues instead of Trac.
> Do those projects have problem with non-committers triaging issues, despite the inability to
> create/modify categories/milestones, etc.?

Yes.  It's a huge issue.  If I didn't have a regular task to manually comb those trackers I don't know if anything would get looked at; I have nothing to point others at other than "just randomly peruse the list of open issues".  Trac is hot garbage but I miss it every time I have to look at my not-quite-working ad-hoc query to figure out what the workflow state on everything there is.

That said: if we could get this ALL into github, then we could write ONE query that would be the full review queue for all Twisted org projects.  And that would be amazing, a huge upgrade from what we've got now.

Finishing txghbot is probably not a ton of work, but it's not zero either.

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171001/6cecaf0d/attachment.html>

From glyph at twistedmatrix.com  Sun Oct  1 12:33:03 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 1 Oct 2017 11:33:03 -0700
Subject: [Twisted-Python] Migrating Trac Tickets to GitHub issues
In-Reply-To: <CAG=rPVcU4HOsCTW+bGZopkCk644m=iXVPk2qhO6E3CLgz=CZEw@mail.gmail.com>
References: <CAFycZ9fTdR=PkpbOMkVsqrAOYdL-=KWNFYBnYqtE1wzs=vAmVA@mail.gmail.com>
 <CAG=rPVcU4HOsCTW+bGZopkCk644m=iXVPk2qhO6E3CLgz=CZEw@mail.gmail.com>
Message-ID: <74D95FD1-65C7-421F-B57C-58666BA34343@twistedmatrix.com>

> On Sep 30, 2017, at 5:30 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> I think migrating Twisted issues from Trac to GitHub is a good idea,
> and will make it easier for people to interact with the project.

To be clear, because I am grumpy about a lot of specifics with respect to GH issues: I agree with this and I hope it can happen.

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171001/2fe64cf7/attachment-0001.html>

From glyph at twistedmatrix.com  Sun Oct  1 12:42:39 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 1 Oct 2017 11:42:39 -0700
Subject: [Twisted-Python] Migrating Trac Tickets to GitHub issues
In-Reply-To: <CAFycZ9fTdR=PkpbOMkVsqrAOYdL-=KWNFYBnYqtE1wzs=vAmVA@mail.gmail.com>
References: <CAFycZ9fTdR=PkpbOMkVsqrAOYdL-=KWNFYBnYqtE1wzs=vAmVA@mail.gmail.com>
Message-ID: <FEA262B8-2B31-4830-A216-C6A780C1F77D@twistedmatrix.com>



> On Sep 30, 2017, at 2:15 PM, Adi Roiban <adi at roiban.ro> wrote:
> 
> Hi,
> 
> I would like to re-start the conversation about migrating Trac tickets
> to GitHub issues.
> 
> My main reason for doing this is to make it easier for people to
> contribute to Twisted.
> 
> In CONTRIBUTING there is this info
> 
> `GitHub doesn't provide adequate tooling for its community.`
> 
> I don't know what is missing in GitHub and why overall Trac is better
> than GitHub issues.

The major missing feature, as discussed in the PR thread, is the ability to record the separate workflow state of "needs review" / "needs feedback addressed" as distinct from "open" / "closed".  A bot that could do this would address more or less the entire issue.

> I know that GitHub Issues is simple and you can't save reports.
> 
> What are problems are there with GitHub issues, which are blocking the
> migration?

One issue which I haven't seen raised here is the need to maintain a redirection service, to ensure that the massive amount of information currently recorded in commit messages and emails linking to existing trac issues is not lost.

> Please send your thoughts.
> 
> Why you think that GitHub issues might be worst than Trac tickets :) ?
> 
> --------
> 
> Below are the things that I things we will lose when migrating to
> GitHub Issues and which will require extra work.
> 
> 1. We will no longer get the nice ticket reports.
> 
> I don't know how to get something like this just using GitHub... and I
> think that we will need a separate web page which uses GitHub API to
> create the reports.
> 
> 2. We might lose the owners / authors of some comments as there might
> not be a maping from Trac to GitHub. This might be mititage as we are
> already using GitHub for login.
> 
> 3. There is extra one-time work required to do the actual migration,
> and decide how to translate Trac ticket attributes to GitHub Issue
> attributes.
> 
> We might not get consensus on how to migrate the metadata and this can
> be a blocker.
> 
> 4. We will no longer get the weekly reports and need more work to
> reimplement them based on GitHub.
> 
> 5. Highscores will stop counting the contribution, and it needs more
> work to reimplement it on top of GitHub. I have hacked the highscores
> project and I can change it to work both historic Trac data and new
> GitHub data.
> 
> ----------------
> 
> Below are my arguments for migrating to GitHub issues:
> 
> 1. With Twisted tickets/PR only handled on GitHub you can have
> contributions which are done only by sending a PR, without creating an
> issue. You find a bug, you fix it and send a PR.
> You no longer need to go to Trac and create a ticket and then do all
> the cross-links copy and pasting.
> 
> 2. We no longer have the review history in Trac, and the review
> discussions are split between Trac and GitHub.
> 
> I think that in the future we will move more review discussions in GitHub.
> 
> Having all the discussion in a single place will make it easier to
> search for something.
> 
> You no longer need to search GitHub and Trac tickets.
> 
> 3. With tickets on GitHub we should simplify the infrastructure.
> I feel that lately there was not much time from current Twisted dev to
> take care of Twisted infra.
> From what I can see, the servers are just restarted on an issue, but
> there is no time to investigate what is wrong.
> 
> I think that Twisted dev should focus on Twisted code and not spend
> time with the ticketing infrastructure.

While, in general, I strongly agree with this, and I would personally very much like to operate less infrastructure, there is the fact that the twistedmatrix.com <http://twistedmatrix.com/> website has served as a very important dogfooding resource for us in the past.  We've found and fixed dozens of bugs in Twisted due to our constant, intense use of it.

That said, this is not really an argument against doing this.  Maybe if we didn't have to operate something as old and clunky as Trac we could invest our dogfooding effort in new, cool web toys where the effort was writing and debugging code using Twisted and not shell scripts to restart zombie processes.  I just think it's important to consider how the developer community can continue to use Twisted itself as part of this process.

> 4. With tickets in GitHub, we don't need extra tooling to close a
> ticket when a PR is merged.
> 
> 5. With tickets in GitHub I assume that a lot of contributors will
> only have to care about a single management tool: GitHub.
> 
> They will no longer have to learn about Trac, how Trac keywords work
> for a ticket and how a workflow is implemented in Trac for Twisted.
> From what I can see, we are not using the Trac workflows anyway, just
> a hack to implementing something like a workflow by manually setting
> various attributes of a ticket.
> 
> 
> Thanks,

Thanks for driving this effort forward!  I look forward to hearing Mark pipe up in this thread (hint, hint)...

> PS: For my private project  I am still using Trac for issues and
> GitHub for PR and manage the tools to keep them in sync.
> I am using the Trac ticket workflows with a dedicated state for a
> ticket when it needs a review or when a review was done and it needs
> changes.
> -- 
> Adi Roiban
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171001/ae0b31bd/attachment.html>

From rodrigc at crodrigues.org  Sun Oct  1 13:06:41 2017
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Sun, 1 Oct 2017 12:06:41 -0700
Subject: [Twisted-Python] Defining the review workflow on top of GitHub
	PR
In-Reply-To: <CAFycZ9fcEGiCDpnPW6kyZByxRp-_iBwvz=YczqeKYU0GX6TJvQ@mail.gmail.com>
References: <CAFycZ9fcEGiCDpnPW6kyZByxRp-_iBwvz=YczqeKYU0GX6TJvQ@mail.gmail.com>
Message-ID: <CAG=rPVeDebaSop1U2W2ffrXOfmej=FvodsAm53puY6EpZJ-Zbw@mail.gmail.com>

On Sat, Sep 30, 2017 at 3:14 PM, Adi Roiban <adi at roiban.ro> wrote:

>
>
> orking on a bot to re-open pull requests when a submitter posts a "please
> review" comment: https://github.com/markrwilliams/txghbot



Rather than write a bot specific to Twisted, why not just adapt the Twisted
project to use a bot written by another project?

For example, the Zulip project has written zulipbot:

https://github.com/zulip/zulipbot#zulipbot

Docs for it are here:

http://zulip.readthedocs.io/en/latest/zulipbot-usage.html

and a presentation for it was given here:

http://opensourcebridge.org/sessions/1992

A lot of the motivations for zulipbot are similar to what the Twisted
project is facing:
https://github.com/zulip/zulipbot/wiki/FAQ

such as giving non-committers the ability to add labels to issues or PR's.

zulipbot is actively used, and you can see it in action in their issues and
PR's:
https://github.com/zulip/zulip/issues?utf8=%E2%9C%93&q=is%3Aissue%20or%20is%3Apull

I've met some of the Zulip developers at Pybay.  They are really focused on
improving developer experience and
onboarding of new developers.  Rather than maintain our own bot, the
Twisted project would probably
get further along with zulipbot, and working with the zulip developers to
fill in any missing gaps on that bot.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171001/8132199f/attachment.html>

From glyph at twistedmatrix.com  Sun Oct  1 13:09:53 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 1 Oct 2017 12:09:53 -0700
Subject: [Twisted-Python] Defining the review workflow on top of
	GitHub	PR
In-Reply-To: <CAG=rPVeDebaSop1U2W2ffrXOfmej=FvodsAm53puY6EpZJ-Zbw@mail.gmail.com>
References: <CAFycZ9fcEGiCDpnPW6kyZByxRp-_iBwvz=YczqeKYU0GX6TJvQ@mail.gmail.com>
 <CAG=rPVeDebaSop1U2W2ffrXOfmej=FvodsAm53puY6EpZJ-Zbw@mail.gmail.com>
Message-ID: <DF65352E-4285-494E-8B37-24C16B1D8DB7@twistedmatrix.com>

> On Oct 1, 2017, at 12:06 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> Rather than write a bot specific to Twisted, why not just adapt the Twisted project to use a bot written by another project?

Personally I don't care either way :-).  I was just describing my understanding of the existing plan, not endorsing it.  Hopefully someone more directly involved will comment.

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171001/0c67d098/attachment-0001.html>

From adi at roiban.ro  Mon Oct  2 03:48:06 2017
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 2 Oct 2017 10:48:06 +0100
Subject: [Twisted-Python] Defining the review workflow on top of GitHub
	PR
In-Reply-To: <DF65352E-4285-494E-8B37-24C16B1D8DB7@twistedmatrix.com>
References: <CAFycZ9fcEGiCDpnPW6kyZByxRp-_iBwvz=YczqeKYU0GX6TJvQ@mail.gmail.com>
 <CAG=rPVeDebaSop1U2W2ffrXOfmej=FvodsAm53puY6EpZJ-Zbw@mail.gmail.com>
 <DF65352E-4285-494E-8B37-24C16B1D8DB7@twistedmatrix.com>
Message-ID: <CAFycZ9dip+bQwaR1O-rrfBQys1nH4Je5uSAF7a6a3+D_UnvQOQ@mail.gmail.com>

On 1 October 2017 at 20:09, Glyph <glyph at twistedmatrix.com> wrote:
> On Oct 1, 2017, at 12:06 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
>
>
> Rather than write a bot specific to Twisted, why not just adapt the Twisted
> project to use a bot written by another project?
>
>
> Personally I don't care either way :-).  I was just describing my
> understanding of the existing plan, not endorsing it.  Hopefully someone
> more directly involved will comment.

I expect that in order to make this happen, we will need a transition
period in which the current system should continue to work, that is
automatically set/remove "review" keyword to Trac.
In this way, the new way(tm) can be implemented in various ways (and
experiment with different ways) and nobody should complain as the old
system will just work.

For my project, I am using Klein as the hooks server, but it is based
on Trac XML-RPC, so I don't think it can be used for Twisted.

---------------

With that in mind, I think that txghbot or something based on
python/twisted is easier.
We would need to talk with Trac... maybe over PB

I remember there was a PB based channel for communicating with Trac
but I can't find where it is defined.
I see that kenan is using something [1] BOT_PORT = 15243, I can't find
where a service with that port is started.

Regards,
Adi

[1] https://github.com/twisted-infra/braid/blob/3dc2fea9a29c1b8361961d561fea1fc593c9bd8e/services/kenaan/config.py


From adi at roiban.ro  Mon Oct  2 05:20:57 2017
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 2 Oct 2017 12:20:57 +0100
Subject: [Twisted-Python] Required tests for a PR to be merged
Message-ID: <CAFycZ9cKbGZ3oYSy3mRGM35O0SuO1A-Kj1n2dE8R_qf_RbJ2mg@mail.gmail.com>

Hi,

1. Are Travis OSX builds functional yet? Can we switch to Travis for
OSX builder?

Over https://www.traviscistatus.com/ I see no backlog for macOS.

------------

2. Right now, when we receive a PR from a non-team member, I think
that the only way to trigger the required tests is to create a new
branch in twisted/twisted.

Then you can go to
https://buildbot.twistedmatrix.com/boxes-supported?branch=9176-inlinetracebacks-tardyp
and force the tests.

This looks complicated, so what I was doing, is create a new PR.

--------

Am I doing something wrong?
Is there a simple way?
Am I the only one who thinks this is not productive?

--------

What I am thinking is to have a single PR (the once created by the author).

Once a Twisted team member has reviewed/checked the PR, a message like
"Go, Buildbot, go!" can be left as a comment and the Buildbot GH hook
will trigger the stable tests for that branch.

In this way, buildbot runs are only triggered for external branches
after a core team member has checked the code and assure that no
malware is contained.

With GitHub we can do changs to any forked repos... so if small
changes are required, Twisted team members can push directly to the
external forks... not sure if this is a feature or a security bug :)

---------

What do you think?
Do you see any problem in this?
Will such a change make life easier for you?

I should be able to update the current GH Buildbot hook to handle the
proposed change.

-- 
Adi Roiban


From exarkun at twistedmatrix.com  Mon Oct  2 05:24:49 2017
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Mon, 2 Oct 2017 07:24:49 -0400
Subject: [Twisted-Python] Required tests for a PR to be merged
In-Reply-To: <CAFycZ9cKbGZ3oYSy3mRGM35O0SuO1A-Kj1n2dE8R_qf_RbJ2mg@mail.gmail.com>
References: <CAFycZ9cKbGZ3oYSy3mRGM35O0SuO1A-Kj1n2dE8R_qf_RbJ2mg@mail.gmail.com>
Message-ID: <CAEeXt4ObELsmLEX4pFGGGi2djY3U5V4TDNTmtBrafYXma0YcXQ@mail.gmail.com>

On Mon, Oct 2, 2017 at 7:20 AM, Adi Roiban <adi at roiban.ro> wrote:

> Hi,
>
> 1. Are Travis OSX builds functional yet? Can we switch to Travis for
> OSX builder?
>
> Over https://www.traviscistatus.com/ I see no backlog for macOS.
>
>
No backlog right now but what about most of the rest of the time?  Monday
at 7AM ET is probably about the least busy possible time for travis.


> ------------
>
> 2. Right now, when we receive a PR from a non-team member, I think
> that the only way to trigger the required tests is to create a new
> branch in twisted/twisted.
>
> Then you can go to
> https://buildbot.twistedmatrix.com/boxes-supported?branch=9176-
> inlinetracebacks-tardyp
> and force the tests.
>
> This looks complicated, so what I was doing, is create a new PR.
>
> --------
>
> Am I doing something wrong?
> Is there a simple way?
> Am I the only one who thinks this is not productive?
>

Use admin/pr_as_branch


>
> --------
>
> What I am thinking is to have a single PR (the once created by the author).
>
> Once a Twisted team member has reviewed/checked the PR, a message like
> "Go, Buildbot, go!" can be left as a comment and the Buildbot GH hook
> will trigger the stable tests for that branch.
>
> In this way, buildbot runs are only triggered for external branches
> after a core team member has checked the code and assure that no
> malware is contained.
>
> With GitHub we can do changs to any forked repos... so if small
> changes are required, Twisted team members can push directly to the
> external forks... not sure if this is a feature or a security bug :)
>
> ---------
>
> What do you think?
> Do you see any problem in this?
> Will such a change make life easier for you?
>

This doesn't seem inherently bad, though you probably need per
*revision* signoff,
not per branch signoff.


>
> I should be able to update the current GH Buildbot hook to handle the
> proposed change.
>
> --
> Adi Roiban
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171002/4e5a71b1/attachment.html>

From adi at roiban.ro  Mon Oct  2 05:35:56 2017
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 2 Oct 2017 12:35:56 +0100
Subject: [Twisted-Python] Required tests for a PR to be merged
In-Reply-To: <CAEeXt4ObELsmLEX4pFGGGi2djY3U5V4TDNTmtBrafYXma0YcXQ@mail.gmail.com>
References: <CAFycZ9cKbGZ3oYSy3mRGM35O0SuO1A-Kj1n2dE8R_qf_RbJ2mg@mail.gmail.com>
 <CAEeXt4ObELsmLEX4pFGGGi2djY3U5V4TDNTmtBrafYXma0YcXQ@mail.gmail.com>
Message-ID: <CAFycZ9dunczGCW=ZJZ-QKcjfvXX9vSvDLUJ4KCumid99vPjr+w@mail.gmail.com>

On 2 October 2017 at 12:24, Jean-Paul Calderone
<exarkun at twistedmatrix.com> wrote:
> On Mon, Oct 2, 2017 at 7:20 AM, Adi Roiban <adi at roiban.ro> wrote:

[snip]

>> Am I doing something wrong?
>> Is there a simple way?
>> Am I the only one who thinks this is not productive?
>
>
> Use admin/pr_as_branch

Will it trigger the Buidlbot stable builders?

>From what I can see in the code, it only creates the branch.

[snip]

>> What do you think?
>> Do you see any problem in this?
>> Will such a change make life easier for you?
>
>
> This doesn't seem inherently bad, though you probably need per revision
> signoff, not per branch signoff.
>

We can have something like: "Go, Buildbot, go for 1d32a23!" .

In the initial email I was thinking to use  "Go, Buildbot, go!" and to
trigger only the commit which was pushed before the comment.

So you need to let a comment each time you want to trigger the tests.
A comment will not automatically trigger any future commit.

But now that I am reviewing it, do we need to be that secure?

I was thinking to leverage the GitHub Contributor information and if
the author is a "Contributor" (a commit was previously accepted), it
is automatically trusted.

Thanks!
-- 
Adi Roiban


From mithrandi at mithrandi.net  Mon Oct  2 07:41:05 2017
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Mon, 02 Oct 2017 13:41:05 +0000
Subject: [Twisted-Python] Required tests for a PR to be merged
In-Reply-To: <CAFycZ9dunczGCW=ZJZ-QKcjfvXX9vSvDLUJ4KCumid99vPjr+w@mail.gmail.com>
References: <CAFycZ9cKbGZ3oYSy3mRGM35O0SuO1A-Kj1n2dE8R_qf_RbJ2mg@mail.gmail.com>
 <CAEeXt4ObELsmLEX4pFGGGi2djY3U5V4TDNTmtBrafYXma0YcXQ@mail.gmail.com>
 <CAFycZ9dunczGCW=ZJZ-QKcjfvXX9vSvDLUJ4KCumid99vPjr+w@mail.gmail.com>
Message-ID: <CAMcKhMTksmbkymyXSheKhUb5c7r_C3bUfZJTWacN80zkPkXKrw@mail.gmail.com>

On Mon, 2 Oct 2017 at 13:36 Adi Roiban <adi at roiban.ro> wrote:

> Will it trigger the Buidlbot stable builders?
>
> From what I can see in the code, it only creates the branch.
>

I believe buildbot will trigger a build on the branch being pushed, no need
for a separate PR. Then, because GitHub commit statuses are on the
_commit_, the PR should be green too if the build succeeds.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171002/63d336ba/attachment-0001.html>

From adi at roiban.ro  Mon Oct  2 08:29:11 2017
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 2 Oct 2017 15:29:11 +0100
Subject: [Twisted-Python] Required tests for a PR to be merged
In-Reply-To: <CAMcKhMTksmbkymyXSheKhUb5c7r_C3bUfZJTWacN80zkPkXKrw@mail.gmail.com>
References: <CAFycZ9cKbGZ3oYSy3mRGM35O0SuO1A-Kj1n2dE8R_qf_RbJ2mg@mail.gmail.com>
 <CAEeXt4ObELsmLEX4pFGGGi2djY3U5V4TDNTmtBrafYXma0YcXQ@mail.gmail.com>
 <CAFycZ9dunczGCW=ZJZ-QKcjfvXX9vSvDLUJ4KCumid99vPjr+w@mail.gmail.com>
 <CAMcKhMTksmbkymyXSheKhUb5c7r_C3bUfZJTWacN80zkPkXKrw@mail.gmail.com>
Message-ID: <CAFycZ9e_Bzoa2EjjTNHwd7W_O_G2st4SoBTFTYGUBNg7=vX4zw@mail.gmail.com>

On 2 October 2017 at 14:41, Tristan Seligmann <mithrandi at mithrandi.net> wrote:
> On Mon, 2 Oct 2017 at 13:36 Adi Roiban <adi at roiban.ro> wrote:
>>
>> Will it trigger the Buidlbot stable builders?
>>
>> From what I can see in the code, it only creates the branch.
>
>
> I believe buildbot will trigger a build on the branch being pushed, no need
> for a separate PR. Then, because GitHub commit statuses are on the _commit_,
> the PR should be green too if the build succeeds.

True. Thanks!

Found the code here
https://github.com/twisted-infra/braid/blob/master/services/buildbot/master/txbuildbot/web.py

-- 
Adi Roiban


From exarkun at twistedmatrix.com  Mon Oct  2 10:21:14 2017
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Mon, 2 Oct 2017 12:21:14 -0400
Subject: [Twisted-Python] Required tests for a PR to be merged
In-Reply-To: <CAFycZ9dunczGCW=ZJZ-QKcjfvXX9vSvDLUJ4KCumid99vPjr+w@mail.gmail.com>
References: <CAFycZ9cKbGZ3oYSy3mRGM35O0SuO1A-Kj1n2dE8R_qf_RbJ2mg@mail.gmail.com>
 <CAEeXt4ObELsmLEX4pFGGGi2djY3U5V4TDNTmtBrafYXma0YcXQ@mail.gmail.com>
 <CAFycZ9dunczGCW=ZJZ-QKcjfvXX9vSvDLUJ4KCumid99vPjr+w@mail.gmail.com>
Message-ID: <CAEeXt4MPPNxAvMZ4EDq6mQh4vPFipimkYsprOYG8gXOQ8AcBXg@mail.gmail.com>

On Mon, Oct 2, 2017 at 7:35 AM, Adi Roiban <adi at roiban.ro> wrote:

> On 2 October 2017 at 12:24, Jean-Paul Calderone
> <exarkun at twistedmatrix.com> wrote:
> > On Mon, Oct 2, 2017 at 7:20 AM, Adi Roiban <adi at roiban.ro> wrote:
>
> [snip]
>
> >> Am I doing something wrong?
> >> Is there a simple way?
> >> Am I the only one who thinks this is not productive?
> >
> >
> > Use admin/pr_as_branch
>
> Will it trigger the Buidlbot stable builders?
>
> From what I can see in the code, it only creates the branch.
>
>
If it doesn't, there's probably no reason it *couldn't* (apart from the
obvious labor requirements).  I did think it already did everything you
wanted which is why I suggested it but I think you're right that's it's not
quite complete.

[snip]
>
> >> What do you think?
> >> Do you see any problem in this?
> >> Will such a change make life easier for you?
> >
> >
> > This doesn't seem inherently bad, though you probably need per revision
> > signoff, not per branch signoff.
> >
>
> We can have something like: "Go, Buildbot, go for 1d32a23!" .
>
> In the initial email I was thinking to use  "Go, Buildbot, go!" and to
> trigger only the commit which was pushed before the comment.
>
> So you need to let a comment each time you want to trigger the tests.
> A comment will not automatically trigger any future commit.
>
>
That seems fine to me - I just wanted it to be clear that the comment only
triggers the current HEAD of the branch (there's still a potential problem
since you can't ever know what the HEAD will be when you actually post the
comment but perhaps it's safe to ignore this possible attack).



> But now that I am reviewing it, do we need to be that secure?
>
> I was thinking to leverage the GitHub Contributor information and if
> the author is a "Contributor" (a commit was previously accepted), it
> is automatically trusted.
>

Creating a way to delegate CI authority seems like a good idea, yes.
Perhaps the heuristic should not be exactly "one previously accepted
commit" but something along those lines seems sane.  You still probably
want a way to trigger a complete CI run for folks who haven't yet been
admitted into this set, though.

Jean-Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171002/8a10d585/attachment.html>

From glyph at twistedmatrix.com  Mon Oct  2 17:09:45 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 2 Oct 2017 16:09:45 -0700
Subject: [Twisted-Python] Defining the review workflow on top of
	GitHub	PR
In-Reply-To: <CAFycZ9dip+bQwaR1O-rrfBQys1nH4Je5uSAF7a6a3+D_UnvQOQ@mail.gmail.com>
References: <CAFycZ9fcEGiCDpnPW6kyZByxRp-_iBwvz=YczqeKYU0GX6TJvQ@mail.gmail.com>
 <CAG=rPVeDebaSop1U2W2ffrXOfmej=FvodsAm53puY6EpZJ-Zbw@mail.gmail.com>
 <DF65352E-4285-494E-8B37-24C16B1D8DB7@twistedmatrix.com>
 <CAFycZ9dip+bQwaR1O-rrfBQys1nH4Je5uSAF7a6a3+D_UnvQOQ@mail.gmail.com>
Message-ID: <76939857-1A87-4E88-91BE-26B0EB9B2A87@twistedmatrix.com>



> On Oct 2, 2017, at 2:48 AM, Adi Roiban <adi at roiban.ro> wrote:
> 
> On 1 October 2017 at 20:09, Glyph <glyph at twistedmatrix.com> wrote:
>> On Oct 1, 2017, at 12:06 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
>> 
>> 
>> Rather than write a bot specific to Twisted, why not just adapt the Twisted
>> project to use a bot written by another project?
>> 
>> 
>> Personally I don't care either way :-).  I was just describing my
>> understanding of the existing plan, not endorsing it.  Hopefully someone
>> more directly involved will comment.
> 
> I expect that in order to make this happen, we will need a transition
> period in which the current system should continue to work, that is
> automatically set/remove "review" keyword to Trac.
> In this way, the new way(tm) can be implemented in various ways (and
> experiment with different ways) and nobody should complain as the old
> system will just work.
> 
> For my project, I am using Klein as the hooks server, but it is based
> on Trac XML-RPC, so I don't think it can be used for Twisted.
> 
> ---------------
> 
> With that in mind, I think that txghbot or something based on
> python/twisted is easier.
> We would need to talk with Trac... maybe over PB
> 
> I remember there was a PB based channel for communicating with Trac
> but I can't find where it is defined.
> I see that kenan is using something [1] BOT_PORT = 15243, I can't find
> where a service with that port is started.

The PB interface is unmaintained and pretty much only still exists for IRC notifications (if I remember correctly); the process binding that port is Kenaan (the IRC bot).

https://trac-hacks.org/wiki/XmlRpcPlugin <https://trac-hacks.org/wiki/XmlRpcPlugin> is now a bit of a misnomer as it also supports JSON-RPC as well.  We should probably just check that the plugin is upgraded and use that.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171002/e4416b98/attachment.html>

From adi at roiban.ro  Fri Oct  6 04:22:31 2017
From: adi at roiban.ro (Adi Roiban)
Date: Fri, 6 Oct 2017 11:22:31 +0100
Subject: [Twisted-Python] Defining the review workflow on top of GitHub
	PR
In-Reply-To: <76939857-1A87-4E88-91BE-26B0EB9B2A87@twistedmatrix.com>
References: <CAFycZ9fcEGiCDpnPW6kyZByxRp-_iBwvz=YczqeKYU0GX6TJvQ@mail.gmail.com>
 <CAG=rPVeDebaSop1U2W2ffrXOfmej=FvodsAm53puY6EpZJ-Zbw@mail.gmail.com>
 <DF65352E-4285-494E-8B37-24C16B1D8DB7@twistedmatrix.com>
 <CAFycZ9dip+bQwaR1O-rrfBQys1nH4Je5uSAF7a6a3+D_UnvQOQ@mail.gmail.com>
 <76939857-1A87-4E88-91BE-26B0EB9B2A87@twistedmatrix.com>
Message-ID: <CAFycZ9dcaFzO_cW+8syY5WzDG1PJbbhZ-zAVNeWq32xuS3NniA@mail.gmail.com>

On 3 October 2017 at 00:09, Glyph <glyph at twistedmatrix.com> wrote:
>

[snip]

> I remember there was a PB based channel for communicating with Trac
> but I can't find where it is defined.
> I see that kenan is using something [1] BOT_PORT = 15243, I can't find
> where a service with that port is started.
>
>
> The PB interface is unmaintained and pretty much only still exists for IRC
> notifications (if I remember correctly); the process binding that port is
> Kenaan (the IRC bot).
>
> https://trac-hacks.org/wiki/XmlRpcPlugin is now a bit of a misnomer as it
> also supports JSON-RPC as well.  We should probably just check that the
> plugin is upgraded and use that.
>
> -glyph
>

Thanks for the info.
With XML/JSON RPC I should be able to get something.

--------

I have updated the github bot for my project to do GitHub label management.
I am using a slightly different Trac process than Twisted.

As a proof of concept, I can set the bot to be used for
twisted-infra/braid as for Braid we don't need to sync with Trac.

We can use it to get a hands-on experience on the label management
part, and once we agree on how it should behave,  I can look at
deploying a dedicated bot for Twisted and then update it to sync with
Trac.

What do you think?

PS: I am not deploying it into Twisted infra now as for me
twisted-infra/braid and vagrant vm is broken... working on fixing it
-- 
Adi Roiban


From trac at twistedmatrix.com  Sun Oct  8 00:05:31 2017
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 08 Oct 2017 06:05:31 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1507442731.2.627956111040873070@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171008/fb108c73/attachment.html>

From rodrigc at crodrigues.org  Tue Oct 10 13:17:12 2017
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Tue, 10 Oct 2017 12:17:12 -0700
Subject: [Twisted-Python] HTTPS reverse proxy using twistd, twist,
	or twisted.web?
Message-ID: <CAG=rPVdakEV=juu8XQRb2VnRgo5=H6-ucS=yWH9_hjtonNy7dg@mail.gmail.com>

Hi,

Can someone give me a short snippet for how to set
up a HTTPS reverse proxy using twistd, twist, or twisted.web ?

I'd like to add an example of this to the documentation examples,
since it is a pretty common thing to do these days.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171010/5fb5b592/attachment.html>

From exarkun at twistedmatrix.com  Tue Oct 10 13:20:46 2017
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Tue, 10 Oct 2017 15:20:46 -0400
Subject: [Twisted-Python] HTTPS reverse proxy using twistd, twist,
	or twisted.web?
In-Reply-To: <CAG=rPVdakEV=juu8XQRb2VnRgo5=H6-ucS=yWH9_hjtonNy7dg@mail.gmail.com>
References: <CAG=rPVdakEV=juu8XQRb2VnRgo5=H6-ucS=yWH9_hjtonNy7dg@mail.gmail.com>
Message-ID: <CAEeXt4OGFvF1pvamz2eTGes8PdSHU6=VRawbbbDX-4Am6=mOcA@mail.gmail.com>

On Tue, Oct 10, 2017 at 3:17 PM, Craig Rodrigues <rodrigc at crodrigues.org>
wrote:

> Hi,
>
> Can someone give me a short snippet for how to set
> up a HTTPS reverse proxy using twistd, twist, or twisted.web ?
>
>
This requires CONNECT support in the Twisted Web server.  Has anyone
implemented this yet?

Jean-Paul



> I'd like to add an example of this to the documentation examples,
> since it is a pretty common thing to do these days.
>
> --
> Craig
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171010/6bf9ff91/attachment.html>

From mrw at enotuniq.org  Tue Oct 10 14:00:38 2017
From: mrw at enotuniq.org (Mark Williams)
Date: Tue, 10 Oct 2017 13:00:38 -0700
Subject: [Twisted-Python] HTTPS reverse proxy using twistd, twist,
 or twisted.web?
In-Reply-To: <CAEeXt4OGFvF1pvamz2eTGes8PdSHU6=VRawbbbDX-4Am6=mOcA@mail.gmail.com>
References: <CAG=rPVdakEV=juu8XQRb2VnRgo5=H6-ucS=yWH9_hjtonNy7dg@mail.gmail.com>
 <CAEeXt4OGFvF1pvamz2eTGes8PdSHU6=VRawbbbDX-4Am6=mOcA@mail.gmail.com>
Message-ID: <1507665638.3866866.1134390352.0A22D63B@webmail.messagingengine.com>

On Tue, Oct 10, 2017, at 12:20 PM, Jean-Paul Calderone wrote:
> On Tue, Oct 10, 2017 at 3:17 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
>> Hi,
>> Can someone give me a short snippet for how to set
>> up a HTTPS reverse proxy using twistd, twist, or twisted.web ?
>> 
> 
> This requires CONNECT support in the Twisted Web server.Â  Has anyone implemented this yet?
> 
> Jean-Paul

We have to closeÂ http://twistedmatrix.com/trac/ticket/288Â before we can
implement CONNECT.  So no, no has implemented it yet :(

However, I think Craig meant a reverse proxy that terminates TLS. 
That's more common than forwarding TLS connections to backends.

Amber's written an HTTP proxy that terminates TLS, and even handles all
Let's Encrypt paper work:

https://github.com/hawkowl/rproxy

Even shorter: Â put this in "reverse.rpy":


from twisted.web import proxy
resource = proxy.ReverseProxyResource('localhost', 9999, '')


Then, run it like so:

twist web --port
ssl:port=4443:privateKey=/path/to/privateKey.key:/path/to/certKey=certificate.crt
--resource-script=reverse.rpy

Requests to port 4443 will terminate the TLS connection and be forwarded
to a web server running on localhost:9999.

This assumes you have a private key and certificate already.  If not,
it's easier to use rproxy.

--
Â  Mark Williams
Â  mrw at enotuniq.org


From rodrigc at crodrigues.org  Tue Oct 10 15:02:31 2017
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Tue, 10 Oct 2017 14:02:31 -0700
Subject: [Twisted-Python] HTTPS reverse proxy using twistd, twist,
	or twisted.web?
In-Reply-To: <CAEeXt4OGFvF1pvamz2eTGes8PdSHU6=VRawbbbDX-4Am6=mOcA@mail.gmail.com>
References: <CAG=rPVdakEV=juu8XQRb2VnRgo5=H6-ucS=yWH9_hjtonNy7dg@mail.gmail.com>
 <CAEeXt4OGFvF1pvamz2eTGes8PdSHU6=VRawbbbDX-4Am6=mOcA@mail.gmail.com>
Message-ID: <CAG=rPVfkxXNkAqghHPp0f71Pwb3Mk=WEri+meKBS11kjKBMeBg@mail.gmail.com>

On Tue, Oct 10, 2017 at 12:20 PM, Jean-Paul Calderone <
exarkun at twistedmatrix.com> wrote:

> On Tue, Oct 10, 2017 at 3:17 PM, Craig Rodrigues <rodrigc at crodrigues.org>
> wrote:
>
>> Hi,
>>
>> Can someone give me a short snippet for how to set
>> up a HTTPS reverse proxy using twistd, twist, or twisted.web ?
>>
>>
> This requires CONNECT support in the Twisted Web server.  Has anyone
> implemented this yet?
>
>
Was it added here?

https://github.com/twisted/twisted/commit/1f043a3a5eb4078b905674f20f7c16bd954f5045#diff-477bf6af9f412b5a20b42bdddca60a82R1150

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171010/d97bbca8/attachment.html>

From barry.scott at forcepoint.com  Fri Oct 13 06:29:17 2017
From: barry.scott at forcepoint.com (Barry Scott)
Date: Fri, 13 Oct 2017 13:29:17 +0100
Subject: [Twisted-Python] Clarification or pausing a consumer
Message-ID: <7964087.cE9iTWCf5K@barry-scott-desktop>

I have a app that needs to send data as an http response. But the data is 
produced slowly. More slowly then the time taken to transmit it.

The consumer keeps calling resumeProducing, but there is no data to send 
often.

What is the correct way to pause the consumer so that it does not keep
calling resumeProducing? unregisterProducer?

Then when the next block of data is available what is the correct way to
resume the consumer? registerProducer?

Related to that why does HTTPChannel.registerProducer convert a IPullProducer 
into a IPushProducer using _PullToPush?

Barry


From exarkun at twistedmatrix.com  Fri Oct 13 18:47:33 2017
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Fri, 13 Oct 2017 20:47:33 -0400
Subject: [Twisted-Python] Clarification or pausing a consumer
In-Reply-To: <7964087.cE9iTWCf5K@barry-scott-desktop>
References: <7964087.cE9iTWCf5K@barry-scott-desktop>
Message-ID: <CAEeXt4NR=8dFzn9zJfCwPUaak4qXqPT1VFuE3b3cQ9AigBQ+OQ@mail.gmail.com>

On Fri, Oct 13, 2017 at 8:29 AM, Barry Scott <barry.scott at forcepoint.com>
wrote:

> I have a app that needs to send data as an http response. But the data is
> produced slowly. More slowly then the time taken to transmit it.
>
> The consumer keeps calling resumeProducing, but there is no data to send
> often.
>

This sounds like a bug in the consumer.  There are two cases.

If the producer is "streaming" or "push" (two words, one meaning) then the
consumer should call resumeProducing once and let data come.  If it wants
to slow down the data, it can call pauseProducing.  There's nothing else it
should be doing.

If the producer is "not streaming" or "pull" (again, one meaning) then the
consumer should call resumeProducing and wait for a write call.  Then it
should call resumeProducing again (if it wants more data).  It should not
call resumeProducing again while waiting for a write call.


> What is the correct way to pause the consumer so that it does not keep
> calling resumeProducing? unregisterProducer?
>

Probably just fix the consumer implementation to not be broken.  Or switch
to tubes which has a simpler model and (in principle) fewer places to make
mistakes.


>
> Then when the next block of data is available what is the correct way to
> resume the consumer? registerProducer?
>
> Related to that why does HTTPChannel.registerProducer convert a
> IPullProducer
> into a IPushProducer using _PullToPush?
>

Probably as an attempt to simplify the implementation - to make it so the
consumer can pretend there's just one kind of producer instead of two
(which would be nice for everyone).

Jean-Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171013/fc367417/attachment.html>

From glyph at twistedmatrix.com  Sat Oct 14 00:44:12 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 13 Oct 2017 23:44:12 -0700
Subject: [Twisted-Python] Clarification or pausing a consumer
In-Reply-To: <CAEeXt4NR=8dFzn9zJfCwPUaak4qXqPT1VFuE3b3cQ9AigBQ+OQ@mail.gmail.com>
References: <7964087.cE9iTWCf5K@barry-scott-desktop>
 <CAEeXt4NR=8dFzn9zJfCwPUaak4qXqPT1VFuE3b3cQ9AigBQ+OQ@mail.gmail.com>
Message-ID: <3A039F2B-32D9-4740-B46C-986B457A9CD0@twistedmatrix.com>



> On Oct 13, 2017, at 5:47 PM, Jean-Paul Calderone <exarkun at twistedmatrix.com> wrote:
> 
> On Fri, Oct 13, 2017 at 8:29 AM, Barry Scott <barry.scott at forcepoint.com <mailto:barry.scott at forcepoint.com>> wrote:
> I have a app that needs to send data as an http response. But the data is
> produced slowly. More slowly then the time taken to transmit it.
> 
> The consumer keeps calling resumeProducing, but there is no data to send
> often.
> 
> This sounds like a bug in the consumer.  There are two cases.
> 
> If the producer is "streaming" or "push" (two words, one meaning) then the consumer should call resumeProducing once and let data come.  If it wants to slow down the data, it can call pauseProducing.  There's nothing else it should be doing.

This is the good kind of producer.

> If the producer is "not streaming" or "pull" (again, one meaning) then the consumer should call resumeProducing and wait for a write call.  Then it should call resumeProducing again (if it wants more data).  It should not call resumeProducing again while waiting for a write call.

This is the bad kind.  It is basically pointless.  It was a design error to include it and it should be removed from Twisted eventually.

> What is the correct way to pause the consumer so that it does not keep
> calling resumeProducing? unregisterProducer?
> 
> Probably just fix the consumer implementation to not be broken.  Or switch to tubes which has a simpler model and (in principle) fewer places to make mistakes.

My guess is not that the consumer is broken, but rather, you registered your producer as the bad kind of producer ("pull") and it's just doing as it was told, which is to keep calling resumeProducing over and over again every time it wants data.

Let us know how it works out!

>  
> Then when the next block of data is available what is the correct way to
> resume the consumer? registerProducer?
> 
> Related to that why does HTTPChannel.registerProducer convert a IPullProducer
> into a IPushProducer using _PullToPush?
> 
> Probably as an attempt to simplify the implementation - to make it so the consumer can pretend there's just one kind of producer instead of two (which would be nice for everyone).
> 
> Jean-Paul
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171013/8d3972c6/attachment.html>

From trac at twistedmatrix.com  Sun Oct 15 00:05:24 2017
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 15 Oct 2017 06:05:24 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1508047524.71.7976030196696965582@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171015/01318bad/attachment.html>

From rodrigc at crodrigues.org  Tue Oct 17 01:26:29 2017
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Tue, 17 Oct 2017 00:26:29 -0700
Subject: [Twisted-Python] Python.org moves to Buildbot 0.9,
	Twisted 17.9.0 and Python 3
Message-ID: <CAG=rPVdTaZxxhR2n+d7AbLFso971B+r3+rgXrit=TbsVX3JxZw@mail.gmail.com>

I worked with Zachary Ware, who maintains the buildbots for python.org.
Zachary upgraded python.org's  buildbot from 0.8 to 0.9:

https://www.python.org/dev/buildbot/

buildbot 0.9 is the first release of buildbot that
can run on Python 3.  The python.org buildbot master is running on Python
3.4:

http://buildbot.python.org/all/#/about

That master is connected to multiple workers/slaves, most of which are
0.8 running on Python 2:

http://buildbot.python.org/all/#/workers

This upgrade could not have been possible without the
porting of Twisted PB to Python 3.

This is a highly visible deployment of Twisted running Python 3,
and aligns with python.org's direction to move the world to Python 3. :)

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171017/7de676b3/attachment.html>

From Ohad.Shai at Cyberbit.com  Tue Oct 17 01:36:33 2017
From: Ohad.Shai at Cyberbit.com (Ohad Shai)
Date: Tue, 17 Oct 2017 07:36:33 +0000
Subject: [Twisted-Python] Twisted HTTPS Server-Client Communication problem
Message-ID: <VI1PR0701MB2446D6A0A38C81E1676344619A4C0@VI1PR0701MB2446.eurprd07.prod.outlook.com>

Hi,


I have an important question about twisted HTTPS client-server communication.


I ran an HTTPS server with my own certs and tried to communicate with a twisted HTTPS client with the specific cert.


I am getting an error that says: "Invalid DNS-ID".


all the error info with all my code is in here: https://gist.github.com/anonymous/e46d4d8dc1c102857497cde9e2fc4725#file-gistfile1-txt

Twisted-HTTPS-client-server<https://gist.github.com/anonymous/e46d4d8dc1c102857497cde9e2fc4725#file-gistfile1-txt>
gist.github.com
Twisted-HTTPS-client-server




I will be appreciate if someone has a clue how can I fix this error.


Thanks,



Ohad Shai
Software Engineer, EDR Linux
972-052-6887792
ohad.shai at cyberbit.com<mailto:daniel.doron at cyberbit.com>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171017/661a4000/attachment.html>

From danielmeirdoron at gmail.com  Tue Oct 17 03:12:58 2017
From: danielmeirdoron at gmail.com (Daniel Doron)
Date: Tue, 17 Oct 2017 12:12:58 +0300
Subject: [Twisted-Python] Twisted Application(Daemon) with multiple clients
Message-ID: <CAFwN=+yWpbqt8kanoYhP86AQgaJ9Z5i35AxsSQi4tx2OE9fZCA@mail.gmail.com>

Hi,

Sorry in advance for sending this to both Twisted mailing list. i was
not sure for which was it was most appropriate.

I have a design in which I would like to have a Twisted Application
which would periodically connect to a REST Server to pull
configuration information, i.e. as client and upon receiving that
information and processing would communicate spawn 1 or more clients
connecting to local process via Unix sockets to send them
configuration information.
I think I understand how the standard approach would be:
1. create a function that would be called with callLater/LoopingCall
2. in that function create my client, connect to the REST Server, get
info etc...

So:
1. Do you think my approach is correct? Essentially as explained I
need a service/daemon to periodically connect ot one server to pull
information and then connect to other local process to forward them
the relevant configuration.
2. How do I turn this into a twisted plugin? (daemon)


Thanks
-Daniel


From trac at twistedmatrix.com  Sun Oct 22 00:05:23 2017
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 22 Oct 2017 06:05:23 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1508652323.0.1184806626564379154@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171022/ce0cf71c/attachment.html>

From barry.scott at forcepoint.com  Mon Oct 23 06:10:22 2017
From: barry.scott at forcepoint.com (Barry Scott)
Date: Mon, 23 Oct 2017 13:10:22 +0100
Subject: [Twisted-Python] COMMERCIAL:Re: Clarification or pausing a
	consumer
In-Reply-To: <3A039F2B-32D9-4740-B46C-986B457A9CD0@twistedmatrix.com>
References: <7964087.cE9iTWCf5K@barry-scott-desktop>
 <CAEeXt4NR=8dFzn9zJfCwPUaak4qXqPT1VFuE3b3cQ9AigBQ+OQ@mail.gmail.com>
 <3A039F2B-32D9-4740-B46C-986B457A9CD0@twistedmatrix.com>
Message-ID: <38689100.yK7B7jh5g5@barry-scott-desktop>

On Saturday, 14 October 2017 07:44:12 BST Glyph wrote:
> > On Oct 13, 2017, at 5:47 PM, Jean-Paul Calderone
> > <exarkun at twistedmatrix.com> wrote:
> > 
> > On Fri, Oct 13, 2017 at 8:29 AM, Barry Scott <barry.scott at forcepoint.com
> > <mailto:barry.scott at forcepoint.com>> wrote: I have a app that needs to
> > send data as an http response. But the data is produced slowly. More
> > slowly then the time taken to transmit it.
> > 
> > The consumer keeps calling resumeProducing, but there is no data to send
> > often.
> > 
> > This sounds like a bug in the consumer.  There are two cases.
> > 
> > If the producer is "streaming" or "push" (two words, one meaning) then the
> > consumer should call resumeProducing once and let data come.  If it wants
> > to slow down the data, it can call pauseProducing.  There's nothing else
> > it should be doing.
> This is the good kind of producer.
> 
> > If the producer is "not streaming" or "pull" (again, one meaning) then the
> > consumer should call resumeProducing and wait for a write call.  Then it
> > should call resumeProducing again (if it wants more data).  It should not
> > call resumeProducing again while waiting for a write call.
> This is the bad kind.  It is basically pointless.  It was a design error to
> include it and it should be removed from Twisted eventually.

Oh. This is surprising to here what is the rational behind this "good" vs. 
"bad"?

My use case is that I'm a proxy and I can only produce what has been received 
from the other side.

A hard CPU loop calling resumeProducing is not appropiate for this use case.

I had to work around what looked like a bug that the streaming parameter is 
ignored and call unregisterProducer/registedProduced to get back usable 
behaviour.

Barry

> > What is the correct way to pause the consumer so that it does not keep
> > calling resumeProducing? unregisterProducer?
> > 
> > Probably just fix the consumer implementation to not be broken.  Or switch
> > to tubes which has a simpler model and (in principle) fewer places to
> > make mistakes.
> My guess is not that the consumer is broken, but rather, you registered your
> producer as the bad kind of producer ("pull") and it's just doing as it was
> told, which is to keep calling resumeProducing over and over again every
> time it wants data.
> 
> Let us know how it works out!
> 
> > Then when the next block of data is available what is the correct way to
> > resume the consumer? registerProducer?
> > 
> > Related to that why does HTTPChannel.registerProducer convert a
> > IPullProducer into a IPushProducer using _PullToPush?
> > 
> > Probably as an attempt to simplify the implementation - to make it so the
> > consumer can pretend there's just one kind of producer instead of two
> > (which would be nice for everyone).
> > 
> > Jean-Paul
> > 
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From exarkun at twistedmatrix.com  Mon Oct 23 10:31:19 2017
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Mon, 23 Oct 2017 12:31:19 -0400
Subject: [Twisted-Python] COMMERCIAL:Re: Clarification or pausing a
	consumer
In-Reply-To: <38689100.yK7B7jh5g5@barry-scott-desktop>
References: <7964087.cE9iTWCf5K@barry-scott-desktop>
 <CAEeXt4NR=8dFzn9zJfCwPUaak4qXqPT1VFuE3b3cQ9AigBQ+OQ@mail.gmail.com>
 <3A039F2B-32D9-4740-B46C-986B457A9CD0@twistedmatrix.com>
 <38689100.yK7B7jh5g5@barry-scott-desktop>
Message-ID: <CAEeXt4O=XPbXz6dWEZgajbdxxEnqw8Y_3JYPH8DMvqGb0fVoKw@mail.gmail.com>

On Mon, Oct 23, 2017 at 8:10 AM, Barry Scott <barry.scott at forcepoint.com>
wrote:

> On Saturday, 14 October 2017 07:44:12 BST Glyph wrote:
> > > On Oct 13, 2017, at 5:47 PM, Jean-Paul Calderone
> > > <exarkun at twistedmatrix.com> wrote:
> > >
> > > On Fri, Oct 13, 2017 at 8:29 AM, Barry Scott <
> barry.scott at forcepoint.com
> > > <mailto:barry.scott at forcepoint.com>> wrote: I have a app that needs to
> > > send data as an http response. But the data is produced slowly. More
> > > slowly then the time taken to transmit it.
> > >
> > > The consumer keeps calling resumeProducing, but there is no data to
> send
> > > often.
> > >
> > > This sounds like a bug in the consumer.  There are two cases.
> > >
> > > If the producer is "streaming" or "push" (two words, one meaning) then
> the
> > > consumer should call resumeProducing once and let data come.  If it
> wants
> > > to slow down the data, it can call pauseProducing.  There's nothing
> else
> > > it should be doing.
> > This is the good kind of producer.
> >
> > > If the producer is "not streaming" or "pull" (again, one meaning) then
> the
> > > consumer should call resumeProducing and wait for a write call.  Then
> it
> > > should call resumeProducing again (if it wants more data).  It should
> not
> > > call resumeProducing again while waiting for a write call.
> > This is the bad kind.  It is basically pointless.  It was a design error
> to
> > include it and it should be removed from Twisted eventually.
>
> Oh. This is surprising to here what is the rational behind this "good" vs.
> "bad"?
>

What makes it "bad" is that it creates extra work for every consumer
implementation.  The extra work is implementing largely the same thing
every time so it's also redundant work.  The logic for knowing when to call
resumeProducing again is always exactly the same regardless of the
consumer.  It doesn't belong inside every consumer.


>
> My use case is that I'm a proxy and I can only produce what has been
> received
> from the other side.
>
>
This sounds like it should be a push producer to me.


> A hard CPU loop calling resumeProducing is not appropiate for this use
> case.
>
>
This is appropriate behavior for neither kind of producer.  As I wrote in
my first reply, a consumer with a pull ("not streaming", "bad") producer
should call resumeProducing once and then wait until write is called on
it.  After write is called on it, it may call resumeProducing again if it
wants.

Jean-Paul


> I had to work around what looked like a bug that the streaming parameter is
> ignored and call unregisterProducer/registedProduced to get back usable
> behaviour.
>
> Barry
>
> > > What is the correct way to pause the consumer so that it does not keep
> > > calling resumeProducing? unregisterProducer?
> > >
> > > Probably just fix the consumer implementation to not be broken.  Or
> switch
> > > to tubes which has a simpler model and (in principle) fewer places to
> > > make mistakes.
> > My guess is not that the consumer is broken, but rather, you registered
> your
> > producer as the bad kind of producer ("pull") and it's just doing as it
> was
> > told, which is to keep calling resumeProducing over and over again every
> > time it wants data.
> >
> > Let us know how it works out!
> >
> > > Then when the next block of data is available what is the correct way
> to
> > > resume the consumer? registerProducer?
> > >
> > > Related to that why does HTTPChannel.registerProducer convert a
> > > IPullProducer into a IPushProducer using _PullToPush?
> > >
> > > Probably as an attempt to simplify the implementation - to make it so
> the
> > > consumer can pretend there's just one kind of producer instead of two
> > > (which would be nice for everyone).
> > >
> > > Jean-Paul
> > >
> > > _______________________________________________
> > > Twisted-Python mailing list
> > > Twisted-Python at twistedmatrix.com
> > > https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171023/5b31fecd/attachment.html>

From barry.scott at forcepoint.com  Tue Oct 24 04:10:30 2017
From: barry.scott at forcepoint.com (Barry Scott)
Date: Tue, 24 Oct 2017 11:10:30 +0100
Subject: [Twisted-Python] COMMERCIAL:Re: Clarification or pausing
	a	consumer
In-Reply-To: <CAEeXt4O=XPbXz6dWEZgajbdxxEnqw8Y_3JYPH8DMvqGb0fVoKw@mail.gmail.com>
References: <7964087.cE9iTWCf5K@barry-scott-desktop>
 <38689100.yK7B7jh5g5@barry-scott-desktop>
 <CAEeXt4O=XPbXz6dWEZgajbdxxEnqw8Y_3JYPH8DMvqGb0fVoKw@mail.gmail.com>
Message-ID: <2271863.luWoRcj9gG@barry-scott-desktop>

On Monday, 23 October 2017 17:31:19 BST Jean-Paul Calderone wrote:
> On Mon, Oct 23, 2017 at 8:10 AM, Barry Scott <barry.scott at forcepoint.com>
> 
> wrote:
> > On Saturday, 14 October 2017 07:44:12 BST Glyph wrote:
> > > > On Oct 13, 2017, at 5:47 PM, Jean-Paul Calderone
> > > > <exarkun at twistedmatrix.com> wrote:
> > > > 
> > > > On Fri, Oct 13, 2017 at 8:29 AM, Barry Scott <
> > 
> > barry.scott at forcepoint.com
> > 
> > > > <mailto:barry.scott at forcepoint.com>> wrote: I have a app that needs to
> > > > send data as an http response. But the data is produced slowly. More
> > > > slowly then the time taken to transmit it.
> > > > 
> > > > The consumer keeps calling resumeProducing, but there is no data to
> > 
> > send
> > 
> > > > often.
> > > > 
> > > > This sounds like a bug in the consumer.  There are two cases.
> > > > 
> > > > If the producer is "streaming" or "push" (two words, one meaning) then
> > 
> > the
> > 
> > > > consumer should call resumeProducing once and let data come.  If it
> > 
> > wants
> > 
> > > > to slow down the data, it can call pauseProducing.  There's nothing
> > 
> > else
> > 
> > > > it should be doing.
> > > 
> > > This is the good kind of producer.
> > > 
> > > > If the producer is "not streaming" or "pull" (again, one meaning) then
> > 
> > the
> > 
> > > > consumer should call resumeProducing and wait for a write call.  Then
> > 
> > it
> > 
> > > > should call resumeProducing again (if it wants more data).  It should
> > 
> > not
> > 
> > > > call resumeProducing again while waiting for a write call.
> > > 
> > > This is the bad kind.  It is basically pointless.  It was a design error
> > 
> > to
> > 
> > > include it and it should be removed from Twisted eventually.
> > 
> > Oh. This is surprising to here what is the rational behind this "good" vs.
> > "bad"?
> 
> What makes it "bad" is that it creates extra work for every consumer
> implementation.  The extra work is implementing largely the same thing
> every time so it's also redundant work.  The logic for knowing when to call
> resumeProducing again is always exactly the same regardless of the
> consumer.  It doesn't belong inside every consumer.

o.k. I see. So you want to have the consumer logic implemented once and
reused as needed?

> 
> > My use case is that I'm a proxy and I can only produce what has been
> > received
> > from the other side.
> 
> This sounds like it should be a push producer to me.

Yes it is.

> 
> > A hard CPU loop calling resumeProducing is not appropiate for this use
> > case.
> 
> This is appropriate behavior for neither kind of producer.  As I wrote in
> my first reply, a consumer with a pull ("not streaming", "bad") producer
> should call resumeProducing once and then wait until write is called on
> it.  After write is called on it, it may call resumeProducing again if it
> wants.

But that is what happens is you convert a push to a pull which is why I 
noticed this.

>> Related to that why does HTTPChannel.registerProducer convert
>> a IPullProducer into a IPushProducer using _PullToPush?

It sure looks like a bug to give me that API that is the shape to take push or 
pull but inside then force into pull.

Barry

> 
> Jean-Paul
> 
> > I had to work around what looked like a bug that the streaming parameter
> > is
> > ignored and call unregisterProducer/registedProduced to get back usable
> > behaviour.
> > 
> > Barry
> > 
> > > > What is the correct way to pause the consumer so that it does not keep
> > > > calling resumeProducing? unregisterProducer?
> > > > 
> > > > Probably just fix the consumer implementation to not be broken.  Or
> > 
> > switch
> > 
> > > > to tubes which has a simpler model and (in principle) fewer places to
> > > > make mistakes.
> > > 
> > > My guess is not that the consumer is broken, but rather, you registered
> > 
> > your
> > 
> > > producer as the bad kind of producer ("pull") and it's just doing as it
> > 
> > was
> > 
> > > told, which is to keep calling resumeProducing over and over again every
> > > time it wants data.
> > > 
> > > Let us know how it works out!
> > > 
> > > > Then when the next block of data is available what is the correct way
> > 
> > to
> > 
> > > > resume the consumer? registerProducer?
> > > > 
> > > > Related to that why does HTTPChannel.registerProducer convert a
> > > > IPullProducer into a IPushProducer using _PullToPush?
> > > > 
> > > > Probably as an attempt to simplify the implementation - to make it so
> > 
> > the
> > 
> > > > consumer can pretend there's just one kind of producer instead of two
> > > > (which would be nice for everyone).
> > > > 
> > > > Jean-Paul
> > > > 
> > > > _______________________________________________
> > > > Twisted-Python mailing list
> > > > Twisted-Python at twistedmatrix.com
> > > > https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> > 
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> Scanned by Forcepoint Email Security Gateway
> 
> To report this email as SPAM, please forward it to spam at forcepoint.com



From ixew at hotmail.com  Wed Oct 25 14:07:26 2017
From: ixew at hotmail.com (Enoch W.)
Date: Wed, 25 Oct 2017 20:07:26 +0000
Subject: [Twisted-Python] twisted.internet.ssl
Message-ID: <CO2PR01MB1976C7242B382393AA45F623CC440@CO2PR01MB1976.prod.exchangelabs.com>

Hi,

I am using a self-signed CA to issue server and client(s) certificates.

My server is using the standard Python ssl module.
One client, that is using twisted.internet.ssl, consistently fails to connect with:
On the Server:    [SSL: TLSV1_ALERT_UNKNOWN_CA] tlsv1 alert unknown ca (_ssl.c:661),
On the Client:    [WARNING] [('SSL routines', 'tls_process_server_certificate', 'certificate verify failed')]

This is my code:

path = getModule(__name__).filePath.sibling(u'data')

txt = path.child(u'ca.crt').getContent()
cacert = ssl.Certificate.loadPEM(txt)
root = ssl.trustRootFromCertificates([cacert])

txt = path.child(u'client.pem').getContent()
mycert = ssl.PrivateCertificate.loadPEM(txt)

ctx = ssl.optionsForClientTLS(hostName, trustRoot=root, clientCertificate=mycert)

reactor.connectSSL(hostName, portNumber, factory, ctx)


I am using the latest git trunk code.
With a regular ssl client I don't have an issue.

A known bug?

Thanks, Enoch.


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171025/72d2c32a/attachment.html>

From jlitzingerdev at gmail.com  Wed Oct 25 23:13:51 2017
From: jlitzingerdev at gmail.com (Jason Litzinger)
Date: Wed, 25 Oct 2017 23:13:51 -0600
Subject: [Twisted-Python] twisted.internet.ssl
In-Reply-To: <CO2PR01MB1976C7242B382393AA45F623CC440@CO2PR01MB1976.prod.exchangelabs.com>
References: <CO2PR01MB1976C7242B382393AA45F623CC440@CO2PR01MB1976.prod.exchangelabs.com>
Message-ID: <20171026051351.GA1686@arch-tinker.localdomain>

On Wed, Oct 25, 2017 at 08:07:26PM +0000, Enoch W. wrote:
> A known bug?
Hello Enoch,
A question, does the server have an intermediate cert that it is using?  
If so, then the problem might be that your trust root needs both the CA 
and intermediate.

I have some https test code I hacked together a while back (neither
reviewed nor heavily tested, but same general idea).
https://github.com/jlitzingerdev/twisted-benchmarks/blob/https-benchmark/web_https.py

If I omit the intermediate cert I get the same error.

Cheers,
-Jason


From ex.vitorino at gmail.com  Thu Oct 26 03:20:01 2017
From: ex.vitorino at gmail.com (ex vito)
Date: Thu, 26 Oct 2017 10:20:01 +0100
Subject: [Twisted-Python] twisted.internet.ssl
In-Reply-To: <CO2PR01MB1976C7242B382393AA45F623CC440@CO2PR01MB1976.prod.exchangelabs.com>
References: <CO2PR01MB1976C7242B382393AA45F623CC440@CO2PR01MB1976.prod.exchangelabs.com>
Message-ID: <4FAF7ED7-0C2B-4D11-B0D8-24B662270136@gmail.com>

On 2017-10-25, at 21:07, Enoch W. <ixew at hotmail.com> wrote:

> Hi,
> 
> I am using a self-signed CA to issue server and client(s) certificates. 
> 
> My server is using the standard Python ssl module. 
> One client, that is using twisted.internet.ssl, consistently fails to connect with: 
> On the Server:    [SSL: TLSV1_ALERT_UNKNOWN_CA] tlsv1 alert unknown ca (_ssl.c:661), 
> On the Client:    [WARNING] [('SSL routines', 'tls_process_server_certificate', 'certificate verify failed')]
> 
> This is my code:
> 
> path = getModule(__name__).filePath.sibling(u'data')
> 
> txt = path.child(u'ca.crt').getContent()
> cacert = ssl.Certificate.loadPEM(txt)
> root = ssl.trustRootFromCertificates([cacert])
> 
> txt = path.child(u'client.pem').getContent()
> mycert = ssl.PrivateCertificate.loadPEM(txt)
> 
> ctx = ssl.optionsForClientTLS(hostName, trustRoot=root, clientCertificate=mycert)
> 
> reactor.connectSSL(hostName, portNumber, factory, ctx)
> 
> 
> I am using the latest git trunk code.
> With a regular ssl client I don't have an issue.
> 
> A known bug?

I would review a few things before suspecting a bug.

Your code is using client side certificates (nice, not often seen) so both server and client need to validate each other's certificates on connection establishment. It seems they are both failing, but we're only looking at your client code though.

Here are a few ideas:

1. Double check your certificates: Issuers, Subjects, Dates, SANs, etc.

2. Check that the hostName in optionsForClientTLS matches the name in the server certificate.

3. Use the latest Twisted release instead of trunk, if possible.
   Do the same for pyOpenSSL and other dependencies.

4. On the client side try using SSL4ClientEndpoint instead of connectSSL.
   I'm almost sure they behave differently regarding validation (could not quickly find
   docs on that, though: I've had your problem before and I think I addressed it this way).

   Instead of reactor.connectSSL(...) go for something like:

   ep = endpoints.SSL4ClientEndpoint(
       reactor,
       host=hostName,
       port=portNumber,
       sslContextFactory=ctx,
   )
   client = yield ep.connect(factory)

   For completeness, even though my client skeleton is mostly your client code with
   this diff, a quick test shows that my client also establishes the TLS connection
   if I do the reverse: replace SSL4ClientEndpoint with connectSSL in my code.

   This may not be the culprit, but I would try and see if anything changes.

5. On the server side I have the following Twisted code skeleton:

   dhFile = filepath.FilePath(...)
   dhParams = ssl.DiffieHellmanParameters.fromFile(dhFile)
   caCert = ssl.Certificate.loadPEM(...)
   privateCert = ssl.PrivateCertificate.loadPEM(...)
   cf = ssl.CertificateOptions(
       privateKey=privateCert.privateKey.original,
       certificate=privateCert.original,
       trustRoot=caCert,
       dhParameters=dhParams,
   )
   ep = endpoints.SSL4ServerEndpoint(
       reactor,
       port=...,
       sslContextFactory=cf,
   )
   f = protocol.Factory.forProtocol(...)
   ep.listen(f)
   reactor.run()

   Your code is obviously different, if based on the standard library's ssl module.
   If 1 to 4 don't produce results, this is a good candidate for needing some work.
   Can you share a minimal version of that? I'll be glad to take it for a spin.

6. Double check your certificates, again. Triple-check them if managed manually.


For completeness and reference:
- See http://twistedmatrix.com/documents/current/core/howto/ssl.html as a starting point
  Twisted TLS, containing useful information and working examples.
- My working test environment runs Linux with OpenSSL 1.0.1t.


Cheers,
--
exvito


From ixew at hotmail.com  Thu Oct 26 07:35:00 2017
From: ixew at hotmail.com (Enoch W.)
Date: Thu, 26 Oct 2017 13:35:00 +0000
Subject: [Twisted-Python] twisted.internet.ssl
In-Reply-To: <20171026051351.GA1686@arch-tinker.localdomain>
References: <CO2PR01MB1976C7242B382393AA45F623CC440@CO2PR01MB1976.prod.exchangelabs.com>
 <20171026051351.GA1686@arch-tinker.localdomain>
Message-ID: <CO2PR01MB1976A13CC5DEFDB16C0C0AF2CC450@CO2PR01MB1976.prod.exchangelabs.com>

Thanks Jason,

With a more specific error message raised by github latest code [thanks!] the problem became clear.
I suggest to change the documentation of 'optionsForClientTLS' -

from:
ctx = ssl.optionsForClientTLS(hostName, trustRoot=root, clientCertificate=mycert)

to:
ctx = ssl.optionsForClientTLS(commonName, trustRoot=root, clientCertificate=mycert)

That is, what this ctx (the contextFactory) really expects is the server's certificate commonName which often is, but not in my case, the server's hostName.

Interestingly, Python's standard ssl package does not verify this field.

Regards, Enoch.


On 10/26/2017 01:13 AM, Jason Litzinger wrote:

On Wed, Oct 25, 2017 at 08:07:26PM +0000, Enoch W. wrote:


A known bug?


Hello Enoch,
A question, does the server have an intermediate cert that it is using?
If so, then the problem might be that your trust root needs both the CA
and intermediate.

I have some https test code I hacked together a while back (neither
reviewed nor heavily tested, but same general idea).
https://github.com/jlitzingerdev/twisted-benchmarks/blob/https-benchmark/web_https.py

If I omit the intermediate cert I get the same error.

Cheers,
-Jason

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com<mailto:Twisted-Python at twistedmatrix.com>
https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171026/0bd137c1/attachment-0001.html>

From ixew at hotmail.com  Thu Oct 26 07:59:34 2017
From: ixew at hotmail.com (Enoch W.)
Date: Thu, 26 Oct 2017 13:59:34 +0000
Subject: [Twisted-Python] twisted.internet.ssl
In-Reply-To: <4FAF7ED7-0C2B-4D11-B0D8-24B662270136@gmail.com>
References: <CO2PR01MB1976C7242B382393AA45F623CC440@CO2PR01MB1976.prod.exchangelabs.com>
 <4FAF7ED7-0C2B-4D11-B0D8-24B662270136@gmail.com>
Message-ID: <CO2PR01MB1976BE0D264BFD8A0822523ECC450@CO2PR01MB1976.prod.exchangelabs.com>

Thanks exvito for your detailed response.
Re 2 & 3: You're right on the nail :-)  See my previous email to Jason.
Re 4: I can't use the high level Transport mechanism as I am using Twisted (most of the time) through another library layer (pymodbus).
Re 5: My server is still using Python's bloated ThreadingTCPServer model.
Re 6: Right!

Bottom line, I suggested a change of argument name, from "ssl.optionsForClientTLS(hostName, ..." to "ssl.optionsForClientTLS(commonName, ..."

Regards, Enoch.

On 10/26/2017 05:20 AM, ex vito wrote:

On 2017-10-25, at 21:07, Enoch W. <ixew at hotmail.com><mailto:ixew at hotmail.com> wrote:



Hi,

I am using a self-signed CA to issue server and client(s) certificates.

My server is using the standard Python ssl module.
One client, that is using twisted.internet.ssl, consistently fails to connect with:
On the Server:    [SSL: TLSV1_ALERT_UNKNOWN_CA] tlsv1 alert unknown ca (_ssl.c:661),
On the Client:    [WARNING] [('SSL routines', 'tls_process_server_certificate', 'certificate verify failed')]

This is my code:

path = getModule(__name__).filePath.sibling(u'data')

txt = path.child(u'ca.crt').getContent()
cacert = ssl.Certificate.loadPEM(txt)
root = ssl.trustRootFromCertificates([cacert])

txt = path.child(u'client.pem').getContent()
mycert = ssl.PrivateCertificate.loadPEM(txt)

ctx = ssl.optionsForClientTLS(hostName, trustRoot=root, clientCertificate=mycert)

reactor.connectSSL(hostName, portNumber, factory, ctx)


I am using the latest git trunk code.
With a regular ssl client I don't have an issue.

A known bug?



I would review a few things before suspecting a bug.

Your code is using client side certificates (nice, not often seen) so both server and client need to validate each other's certificates on connection establishment. It seems they are both failing, but we're only looking at your client code though.

Here are a few ideas:

1. Double check your certificates: Issuers, Subjects, Dates, SANs, etc.

2. Check that the hostName in optionsForClientTLS matches the name in the server certificate.

3. Use the latest Twisted release instead of trunk, if possible.
   Do the same for pyOpenSSL and other dependencies.

4. On the client side try using SSL4ClientEndpoint instead of connectSSL.
   I'm almost sure they behave differently regarding validation (could not quickly find
   docs on that, though: I've had your problem before and I think I addressed it this way).

   Instead of reactor.connectSSL(...) go for something like:

   ep = endpoints.SSL4ClientEndpoint(
       reactor,
       host=hostName,
       port=portNumber,
       sslContextFactory=ctx,
   )
   client = yield ep.connect(factory)

   For completeness, even though my client skeleton is mostly your client code with
   this diff, a quick test shows that my client also establishes the TLS connection
   if I do the reverse: replace SSL4ClientEndpoint with connectSSL in my code.

   This may not be the culprit, but I would try and see if anything changes.

5. On the server side I have the following Twisted code skeleton:

   dhFile = filepath.FilePath(...)
   dhParams = ssl.DiffieHellmanParameters.fromFile(dhFile)
   caCert = ssl.Certificate.loadPEM(...)
   privateCert = ssl.PrivateCertificate.loadPEM(...)
   cf = ssl.CertificateOptions(
       privateKey=privateCert.privateKey.original,
       certificate=privateCert.original,
       trustRoot=caCert,
       dhParameters=dhParams,
   )
   ep = endpoints.SSL4ServerEndpoint(
       reactor,
       port=...,
       sslContextFactory=cf,
   )
   f = protocol.Factory.forProtocol(...)
   ep.listen(f)
   reactor.run()

   Your code is obviously different, if based on the standard library's ssl module.
   If 1 to 4 don't produce results, this is a good candidate for needing some work.
   Can you share a minimal version of that? I'll be glad to take it for a spin.

6. Double check your certificates, again. Triple-check them if managed manually.


For completeness and reference:
- See http://twistedmatrix.com/documents/current/core/howto/ssl.html as a starting point
  Twisted TLS, containing useful information and working examples.
- My working test environment runs Linux with OpenSSL 1.0.1t.


Cheers,
--
exvito

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com<mailto:Twisted-Python at twistedmatrix.com>
https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171026/5aaef296/attachment.html>

From ex.vitorino at gmail.com  Thu Oct 26 08:30:24 2017
From: ex.vitorino at gmail.com (ex vito)
Date: Thu, 26 Oct 2017 15:30:24 +0100
Subject: [Twisted-Python] twisted.internet.ssl
In-Reply-To: <CO2PR01MB1976BE0D264BFD8A0822523ECC450@CO2PR01MB1976.prod.exchangelabs.com>
References: <CO2PR01MB1976C7242B382393AA45F623CC440@CO2PR01MB1976.prod.exchangelabs.com>
 <4FAF7ED7-0C2B-4D11-B0D8-24B662270136@gmail.com>
 <CO2PR01MB1976BE0D264BFD8A0822523ECC450@CO2PR01MB1976.prod.exchangelabs.com>
Message-ID: <A596333F-9299-4910-944A-9B1031E2D601@gmail.com>

On 2017-10-26, at 14:59, Enoch W. <ixew at hotmail.com> wrote:

> Thanks exvito for your detailed response.
> Re 2 & 3: You're right on the nail :-)  See my previous email to Jason.
> Re 4: I can't use the high level Transport mechanism as I am using Twisted (most of the time) through another library layer (pymodbus).
> Re 5: My server is still using Python's bloated ThreadingTCPServer model. 
> Re 6: Right!

You are welcome.


> Bottom line, I suggested a change of argument name, from "ssl.optionsForClientTLS(hostName, ..." to "ssl.optionsForClientTLS(commonName, ..."

That would be misleading:

Keep in mind that the name validation will be performed against the server certificate's SANs (subject alternative name) entries, if they exist. More importantly, in the context of your suggestion: as far as I can tell, when SANs are present in the server certificate, not only will the name verification be performed against those, but the certificate's subject commonName will be ignored. IIRC, this is in line with an existing RFC recommendation (maybe 6125?).

Thus, hostName is a pretty good name and commonName wouldn't be as good. :)


Cheers,
--
exvito

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171026/5fe2b7db/attachment-0001.html>

From glyph at twistedmatrix.com  Thu Oct 26 11:37:41 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 26 Oct 2017 10:37:41 -0700
Subject: [Twisted-Python] twisted.internet.ssl
In-Reply-To: <CO2PR01MB1976A13CC5DEFDB16C0C0AF2CC450@CO2PR01MB1976.prod.exchangelabs.com>
References: <CO2PR01MB1976C7242B382393AA45F623CC440@CO2PR01MB1976.prod.exchangelabs.com>
 <20171026051351.GA1686@arch-tinker.localdomain>
 <CO2PR01MB1976A13CC5DEFDB16C0C0AF2CC450@CO2PR01MB1976.prod.exchangelabs.com>
Message-ID: <0C851BE6-F47E-4AA0-BE64-6B80E676D9D8@twistedmatrix.com>



> On Oct 26, 2017, at 6:35 AM, Enoch W. <ixew at hotmail.com> wrote:
> 
> Thanks Jason,
> 
> With a more specific error message raised by github latest code [thanks!] the problem became clear.
> I suggest to change the documentation of 'optionsForClientTLS' -
> 
> from:
> ctx = ssl.optionsForClientTLS(hostName, trustRoot=root, clientCertificate=mycert)
> 
> to:
> ctx = ssl.optionsForClientTLS(commonName, trustRoot=root, clientCertificate=mycert)
> 
> That is, what this ctx (the contextFactory) really expects is the server's certificate commonName which often is, but not in my case, the server's hostName.
> 
> Interestingly, Python's standard ssl package does not verify this field.

It sounds like you somehow installed Twisted without the "service_identity" module; it only verifies commonName if it has no other choice.

When you install Twisted, be sure to install the `tls` extra: pip install twisted[tls].

-glyph


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171026/3333c695/attachment.html>

From trac at twistedmatrix.com  Sun Oct 29 00:05:27 2017
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 29 Oct 2017 06:05:27 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1509257127.7.1065048839700733718@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171029/be3d8345/attachment.html>

From trac at twistedmatrix.com  Sun Oct  1 00:05:23 2017
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 01 Oct 2017 06:05:23 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1506837923.54.4860991002660514103@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171001/01ece5c9/attachment-0002.html>

From hawkowl at atleastfornow.net  Sun Oct  1 04:30:27 2017
From: hawkowl at atleastfornow.net (Amber Brown)
Date: Sun, 1 Oct 2017 21:30:27 +1100
Subject: [Twisted-Python] Migrating Trac Tickets to GitHub issues
In-Reply-To: <CAFycZ9fTdR=PkpbOMkVsqrAOYdL-=KWNFYBnYqtE1wzs=vAmVA@mail.gmail.com>
References: <CAFycZ9fTdR=PkpbOMkVsqrAOYdL-=KWNFYBnYqtE1wzs=vAmVA@mail.gmail.com>
Message-ID: <1CBE4C4E-A7F8-4282-A9F2-5B228E6A921C@atleastfornow.net>


> On 1 Oct 2017, at 8:15 am, Adi Roiban <adi at roiban.ro> wrote:
> 
> Hi,
> 
> I would like to re-start the conversation about migrating Trac tickets
> to GitHub issues.
> 
> My main reason for doing this is to make it easier for people to
> contribute to Twisted.
> 
> In CONTRIBUTING there is this info
> 
> `GitHub doesn't provide adequate tooling for its community.`
> 
> I don't know what is missing in GitHub and why overall Trac is better
> than GitHub issues.
> 
> I know that GitHub Issues is simple and you can't save reports.
> 
> What are problems are there with GitHub issues, which are blocking the
> migration?
> 
> Please send your thoughts.
> 
> Why you think that GitHub issues might be worst than Trac tickets :) ?

Currently, GitHub Issues don't allow for non-committers to make modifications to categories, milestones, edit the original ticket description, or close tickets. This kinda sucks, because it makes the pool of triagers smaller, and also makes most obvious review queue methods harder (adding a category).

I think Mark Williams or someone has hacked up a bot to sidestep this, but... again, contributor effort to get that past the line.

- Amber
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 488 bytes
Desc: Message signed with OpenPGP
URL: </pipermail/twisted-python/attachments/20171001/8bb0be23/attachment-0002.sig>

From rodrigc at crodrigues.org  Sun Oct  1 10:31:07 2017
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Sun, 1 Oct 2017 09:31:07 -0700
Subject: [Twisted-Python] Migrating Trac Tickets to GitHub issues
In-Reply-To: <1CBE4C4E-A7F8-4282-A9F2-5B228E6A921C@atleastfornow.net>
References: <CAFycZ9fTdR=PkpbOMkVsqrAOYdL-=KWNFYBnYqtE1wzs=vAmVA@mail.gmail.com>
 <1CBE4C4E-A7F8-4282-A9F2-5B228E6A921C@atleastfornow.net>
Message-ID: <CAG=rPVcyjRKxDXboGidWhYVrEsc2vv4bgMDbQaxP5wqs-azwHg@mail.gmail.com>

On Sun, Oct 1, 2017 at 3:30 AM, Amber Brown <hawkowl at atleastfornow.net>
wrote:

>
>
> Currently, GitHub Issues don't allow for non-committers to make
> modifications to categories, milestones, edit the original ticket
> description, or close tickets. This kinda sucks, because it makes the pool
> of triagers smaller, and also makes most obvious review queue methods
> harder (adding a category).
>


Are there enough non-committers to Twisted who are actively doing this
right now, to make this
as big an issue as you are claiming?  My guess is no.
Other projects related to klein and treq are using GitHub to track issues
instead of Trac.
Do those projects have problem with non-committers triaging issues, despite
the inability to
create/modify categories/milestones, etc.?

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171001/b4080add/attachment-0002.html>

From glyph at twistedmatrix.com  Sun Oct  1 12:27:25 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 1 Oct 2017 11:27:25 -0700
Subject: [Twisted-Python] Defining the review workflow on top of GitHub
	PR
In-Reply-To: <CAFycZ9fcEGiCDpnPW6kyZByxRp-_iBwvz=YczqeKYU0GX6TJvQ@mail.gmail.com>
References: <CAFycZ9fcEGiCDpnPW6kyZByxRp-_iBwvz=YczqeKYU0GX6TJvQ@mail.gmail.com>
Message-ID: <A5A654ED-4299-469B-9D8E-704D37312249@twistedmatrix.com>



> On Sep 30, 2017, at 3:14 PM, Adi Roiban <adi at roiban.ro> wrote:
> 
> I am restarting this discussion
> https://twistedmatrix.com/pipermail/twisted-python/2016-May/030333.html
> 
> I am starting a new thread since I want to keep the focus on the
> review process / workflow / markers, and not on the things required to
> accept a PR or do a review.

I'm a little confused.  What do you mean by "process / workflow / markers" if not "the things required to accept a PR or do a review"?

> ----------
> 
>> Proposing: Just open a pull request.  Any open pull request should be treated as part of the queue.
> 
> I don't like this. If you are not a comitter, you need to open a PR to
> trigger the tests.
> 
> So you want to first open a PR, then wait for tests to execute, then
> fix and only after that to request the review.
> 
> We can start with setting the title to have "[WIP]" marker, to let
> others know that this is not yet ready... but then when changes are
> required, the reviewer will have to set the WIP marker again.. and if
> the reviewer is not a team member, it will not have rights to edit the
> subject.
> 
> But I hope that we can have a bot which once a "please review" comment
> is left, it will set a label.

Mark Williams already started working on this: https://github.com/markrwilliams/txghbot

>> Accepting: A committer pushes the big green button;
> 
> +1 ... but maybe also leave a comment :)

We should have more verbiage around the comment stuff, including the "always say thank you twice" rule which I don't think is written down anywhere :-).

>> Reviewing: This is the potentially slightly odd part.  I believe a review that doesn't result in acceptance should close the PR.  We need to be careful to always include some text that explains that closing a PR does not mean that the change is rejected, just that the submitter must re-submit.  Initially this would just mean opening a new PR, but Mark Williams is working on a bot to re-open pull requests when a submitter posts a "please review" comment: https://github.com/markrwilliams/txghbot
> 
> Since we will have a bot for "please review", why not use the same bot
> to set a label on "please make changes" ?

Yep!

> I think that closing a PR should mean that the work on that branch is
> rejected :)

I still want to require people to open an issue first so we can separate closing PRs ("this patch is too bad to be accepted, please try again") from closing tickets or issues ("we do not want to do this work").

>> Responding: A submitter can open a new PR, or, once we start running txghbot, reopen their closed PR.
> 
> As commented above, I am +1 for leaving a "please review" comment and
> having a bot updating the labels.
> 
>> Viewing: https://github.com/twisted/twisted/pulls?utf8=âœ“&q=is%3Apr+is%3Aopen+-status%3Afailed
> 
> One we get the "please-review" and "changes-needed" labels it should
> be eaiser to view the queue.

I can update https://twisted.reviews/ <https://twisted.reviews/> (at some point) when to point at the appropriate link.  (You've all got it bookmarked, right?)

> -------
> 
> Whem multiple reviewers are required, you can use the dedicated GitHub
> Review message and approve it without hiting the merge button.
> 
> ---------
> 
> I have no idea how other projects are managing the review queue.

"Poorly" :-).

A failure mode of many open source projects is that they have terrible latency when responding to new contributors.

> Please send your feedback.
> 
> If we agree on a process based on managing the labes, I can work on
> implemeting the required logic with a bot and GitHub hooks.

Please do coordinate with Mark on this, if you weren't already ;-).

> --------
> 
> We can also start by using the WIP marker
> 
> * while preparing the PR
> * once changes are required and the author works on addressing the
> changes requsted on review
> 
> Any PR which is open and does not have the WIP marker means that is
> part of the queue.
> 
> ----------
> 
> 
> Thanks!
> 
> PS: I have checked pyca/crypography but I don't see any pattern there
> and a lot of PR are merged without any comment
> https://github.com/pyca/cryptography/pulls?q=is%3Apr+is%3Aclosed <https://github.com/pyca/cryptography/pulls?q=is:pr+is:closed>

Cryptography is kind of a weird project with a somewhat rarified contributor audience, I don't know if it makes sense to copy their process.

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171001/bfcf0bd9/attachment-0002.html>

From glyph at twistedmatrix.com  Sun Oct  1 12:32:27 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 1 Oct 2017 11:32:27 -0700
Subject: [Twisted-Python] Migrating Trac Tickets to GitHub issues
In-Reply-To: <CAG=rPVcyjRKxDXboGidWhYVrEsc2vv4bgMDbQaxP5wqs-azwHg@mail.gmail.com>
References: <CAFycZ9fTdR=PkpbOMkVsqrAOYdL-=KWNFYBnYqtE1wzs=vAmVA@mail.gmail.com>
 <1CBE4C4E-A7F8-4282-A9F2-5B228E6A921C@atleastfornow.net>
 <CAG=rPVcyjRKxDXboGidWhYVrEsc2vv4bgMDbQaxP5wqs-azwHg@mail.gmail.com>
Message-ID: <25282B03-2C28-48AA-A8C5-B6DE67BF25D7@twistedmatrix.com>



> On Oct 1, 2017, at 9:31 AM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> 
> 
> On Sun, Oct 1, 2017 at 3:30 AM, Amber Brown <hawkowl at atleastfornow.net <mailto:hawkowl at atleastfornow.net>> wrote:
> 
> 
> Currently, GitHub Issues don't allow for non-committers to make modifications to categories, milestones, edit the original ticket description, or close tickets. This kinda sucks, because it makes the pool of triagers smaller, and also makes most obvious review queue methods harder (adding a category).
> 
> 
> Are there enough non-committers to Twisted who are actively doing this right now, to make this
> as big an issue as you are claiming?  My guess is no.

"Submit for review" is such an action, so, yes.

> Other projects related to klein and treq are using GitHub to track issues instead of Trac.
> Do those projects have problem with non-committers triaging issues, despite the inability to
> create/modify categories/milestones, etc.?

Yes.  It's a huge issue.  If I didn't have a regular task to manually comb those trackers I don't know if anything would get looked at; I have nothing to point others at other than "just randomly peruse the list of open issues".  Trac is hot garbage but I miss it every time I have to look at my not-quite-working ad-hoc query to figure out what the workflow state on everything there is.

That said: if we could get this ALL into github, then we could write ONE query that would be the full review queue for all Twisted org projects.  And that would be amazing, a huge upgrade from what we've got now.

Finishing txghbot is probably not a ton of work, but it's not zero either.

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171001/6cecaf0d/attachment-0002.html>

From glyph at twistedmatrix.com  Sun Oct  1 12:33:03 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 1 Oct 2017 11:33:03 -0700
Subject: [Twisted-Python] Migrating Trac Tickets to GitHub issues
In-Reply-To: <CAG=rPVcU4HOsCTW+bGZopkCk644m=iXVPk2qhO6E3CLgz=CZEw@mail.gmail.com>
References: <CAFycZ9fTdR=PkpbOMkVsqrAOYdL-=KWNFYBnYqtE1wzs=vAmVA@mail.gmail.com>
 <CAG=rPVcU4HOsCTW+bGZopkCk644m=iXVPk2qhO6E3CLgz=CZEw@mail.gmail.com>
Message-ID: <74D95FD1-65C7-421F-B57C-58666BA34343@twistedmatrix.com>

> On Sep 30, 2017, at 5:30 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> I think migrating Twisted issues from Trac to GitHub is a good idea,
> and will make it easier for people to interact with the project.

To be clear, because I am grumpy about a lot of specifics with respect to GH issues: I agree with this and I hope it can happen.

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171001/2fe64cf7/attachment-0002.html>

From glyph at twistedmatrix.com  Sun Oct  1 12:42:39 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 1 Oct 2017 11:42:39 -0700
Subject: [Twisted-Python] Migrating Trac Tickets to GitHub issues
In-Reply-To: <CAFycZ9fTdR=PkpbOMkVsqrAOYdL-=KWNFYBnYqtE1wzs=vAmVA@mail.gmail.com>
References: <CAFycZ9fTdR=PkpbOMkVsqrAOYdL-=KWNFYBnYqtE1wzs=vAmVA@mail.gmail.com>
Message-ID: <FEA262B8-2B31-4830-A216-C6A780C1F77D@twistedmatrix.com>



> On Sep 30, 2017, at 2:15 PM, Adi Roiban <adi at roiban.ro> wrote:
> 
> Hi,
> 
> I would like to re-start the conversation about migrating Trac tickets
> to GitHub issues.
> 
> My main reason for doing this is to make it easier for people to
> contribute to Twisted.
> 
> In CONTRIBUTING there is this info
> 
> `GitHub doesn't provide adequate tooling for its community.`
> 
> I don't know what is missing in GitHub and why overall Trac is better
> than GitHub issues.

The major missing feature, as discussed in the PR thread, is the ability to record the separate workflow state of "needs review" / "needs feedback addressed" as distinct from "open" / "closed".  A bot that could do this would address more or less the entire issue.

> I know that GitHub Issues is simple and you can't save reports.
> 
> What are problems are there with GitHub issues, which are blocking the
> migration?

One issue which I haven't seen raised here is the need to maintain a redirection service, to ensure that the massive amount of information currently recorded in commit messages and emails linking to existing trac issues is not lost.

> Please send your thoughts.
> 
> Why you think that GitHub issues might be worst than Trac tickets :) ?
> 
> --------
> 
> Below are the things that I things we will lose when migrating to
> GitHub Issues and which will require extra work.
> 
> 1. We will no longer get the nice ticket reports.
> 
> I don't know how to get something like this just using GitHub... and I
> think that we will need a separate web page which uses GitHub API to
> create the reports.
> 
> 2. We might lose the owners / authors of some comments as there might
> not be a maping from Trac to GitHub. This might be mititage as we are
> already using GitHub for login.
> 
> 3. There is extra one-time work required to do the actual migration,
> and decide how to translate Trac ticket attributes to GitHub Issue
> attributes.
> 
> We might not get consensus on how to migrate the metadata and this can
> be a blocker.
> 
> 4. We will no longer get the weekly reports and need more work to
> reimplement them based on GitHub.
> 
> 5. Highscores will stop counting the contribution, and it needs more
> work to reimplement it on top of GitHub. I have hacked the highscores
> project and I can change it to work both historic Trac data and new
> GitHub data.
> 
> ----------------
> 
> Below are my arguments for migrating to GitHub issues:
> 
> 1. With Twisted tickets/PR only handled on GitHub you can have
> contributions which are done only by sending a PR, without creating an
> issue. You find a bug, you fix it and send a PR.
> You no longer need to go to Trac and create a ticket and then do all
> the cross-links copy and pasting.
> 
> 2. We no longer have the review history in Trac, and the review
> discussions are split between Trac and GitHub.
> 
> I think that in the future we will move more review discussions in GitHub.
> 
> Having all the discussion in a single place will make it easier to
> search for something.
> 
> You no longer need to search GitHub and Trac tickets.
> 
> 3. With tickets on GitHub we should simplify the infrastructure.
> I feel that lately there was not much time from current Twisted dev to
> take care of Twisted infra.
> From what I can see, the servers are just restarted on an issue, but
> there is no time to investigate what is wrong.
> 
> I think that Twisted dev should focus on Twisted code and not spend
> time with the ticketing infrastructure.

While, in general, I strongly agree with this, and I would personally very much like to operate less infrastructure, there is the fact that the twistedmatrix.com <http://twistedmatrix.com/> website has served as a very important dogfooding resource for us in the past.  We've found and fixed dozens of bugs in Twisted due to our constant, intense use of it.

That said, this is not really an argument against doing this.  Maybe if we didn't have to operate something as old and clunky as Trac we could invest our dogfooding effort in new, cool web toys where the effort was writing and debugging code using Twisted and not shell scripts to restart zombie processes.  I just think it's important to consider how the developer community can continue to use Twisted itself as part of this process.

> 4. With tickets in GitHub, we don't need extra tooling to close a
> ticket when a PR is merged.
> 
> 5. With tickets in GitHub I assume that a lot of contributors will
> only have to care about a single management tool: GitHub.
> 
> They will no longer have to learn about Trac, how Trac keywords work
> for a ticket and how a workflow is implemented in Trac for Twisted.
> From what I can see, we are not using the Trac workflows anyway, just
> a hack to implementing something like a workflow by manually setting
> various attributes of a ticket.
> 
> 
> Thanks,

Thanks for driving this effort forward!  I look forward to hearing Mark pipe up in this thread (hint, hint)...

> PS: For my private project  I am still using Trac for issues and
> GitHub for PR and manage the tools to keep them in sync.
> I am using the Trac ticket workflows with a dedicated state for a
> ticket when it needs a review or when a review was done and it needs
> changes.
> -- 
> Adi Roiban
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171001/ae0b31bd/attachment-0002.html>

From rodrigc at crodrigues.org  Sun Oct  1 13:06:41 2017
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Sun, 1 Oct 2017 12:06:41 -0700
Subject: [Twisted-Python] Defining the review workflow on top of GitHub
	PR
In-Reply-To: <CAFycZ9fcEGiCDpnPW6kyZByxRp-_iBwvz=YczqeKYU0GX6TJvQ@mail.gmail.com>
References: <CAFycZ9fcEGiCDpnPW6kyZByxRp-_iBwvz=YczqeKYU0GX6TJvQ@mail.gmail.com>
Message-ID: <CAG=rPVeDebaSop1U2W2ffrXOfmej=FvodsAm53puY6EpZJ-Zbw@mail.gmail.com>

On Sat, Sep 30, 2017 at 3:14 PM, Adi Roiban <adi at roiban.ro> wrote:

>
>
> orking on a bot to re-open pull requests when a submitter posts a "please
> review" comment: https://github.com/markrwilliams/txghbot



Rather than write a bot specific to Twisted, why not just adapt the Twisted
project to use a bot written by another project?

For example, the Zulip project has written zulipbot:

https://github.com/zulip/zulipbot#zulipbot

Docs for it are here:

http://zulip.readthedocs.io/en/latest/zulipbot-usage.html

and a presentation for it was given here:

http://opensourcebridge.org/sessions/1992

A lot of the motivations for zulipbot are similar to what the Twisted
project is facing:
https://github.com/zulip/zulipbot/wiki/FAQ

such as giving non-committers the ability to add labels to issues or PR's.

zulipbot is actively used, and you can see it in action in their issues and
PR's:
https://github.com/zulip/zulip/issues?utf8=%E2%9C%93&q=is%3Aissue%20or%20is%3Apull

I've met some of the Zulip developers at Pybay.  They are really focused on
improving developer experience and
onboarding of new developers.  Rather than maintain our own bot, the
Twisted project would probably
get further along with zulipbot, and working with the zulip developers to
fill in any missing gaps on that bot.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171001/8132199f/attachment-0002.html>

From glyph at twistedmatrix.com  Sun Oct  1 13:09:53 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 1 Oct 2017 12:09:53 -0700
Subject: [Twisted-Python] Defining the review workflow on top of
	GitHub	PR
In-Reply-To: <CAG=rPVeDebaSop1U2W2ffrXOfmej=FvodsAm53puY6EpZJ-Zbw@mail.gmail.com>
References: <CAFycZ9fcEGiCDpnPW6kyZByxRp-_iBwvz=YczqeKYU0GX6TJvQ@mail.gmail.com>
 <CAG=rPVeDebaSop1U2W2ffrXOfmej=FvodsAm53puY6EpZJ-Zbw@mail.gmail.com>
Message-ID: <DF65352E-4285-494E-8B37-24C16B1D8DB7@twistedmatrix.com>

> On Oct 1, 2017, at 12:06 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> Rather than write a bot specific to Twisted, why not just adapt the Twisted project to use a bot written by another project?

Personally I don't care either way :-).  I was just describing my understanding of the existing plan, not endorsing it.  Hopefully someone more directly involved will comment.

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171001/0c67d098/attachment-0002.html>

From adi at roiban.ro  Mon Oct  2 03:48:06 2017
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 2 Oct 2017 10:48:06 +0100
Subject: [Twisted-Python] Defining the review workflow on top of GitHub
	PR
In-Reply-To: <DF65352E-4285-494E-8B37-24C16B1D8DB7@twistedmatrix.com>
References: <CAFycZ9fcEGiCDpnPW6kyZByxRp-_iBwvz=YczqeKYU0GX6TJvQ@mail.gmail.com>
 <CAG=rPVeDebaSop1U2W2ffrXOfmej=FvodsAm53puY6EpZJ-Zbw@mail.gmail.com>
 <DF65352E-4285-494E-8B37-24C16B1D8DB7@twistedmatrix.com>
Message-ID: <CAFycZ9dip+bQwaR1O-rrfBQys1nH4Je5uSAF7a6a3+D_UnvQOQ@mail.gmail.com>

On 1 October 2017 at 20:09, Glyph <glyph at twistedmatrix.com> wrote:
> On Oct 1, 2017, at 12:06 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
>
>
> Rather than write a bot specific to Twisted, why not just adapt the Twisted
> project to use a bot written by another project?
>
>
> Personally I don't care either way :-).  I was just describing my
> understanding of the existing plan, not endorsing it.  Hopefully someone
> more directly involved will comment.

I expect that in order to make this happen, we will need a transition
period in which the current system should continue to work, that is
automatically set/remove "review" keyword to Trac.
In this way, the new way(tm) can be implemented in various ways (and
experiment with different ways) and nobody should complain as the old
system will just work.

For my project, I am using Klein as the hooks server, but it is based
on Trac XML-RPC, so I don't think it can be used for Twisted.

---------------

With that in mind, I think that txghbot or something based on
python/twisted is easier.
We would need to talk with Trac... maybe over PB

I remember there was a PB based channel for communicating with Trac
but I can't find where it is defined.
I see that kenan is using something [1] BOT_PORT = 15243, I can't find
where a service with that port is started.

Regards,
Adi

[1] https://github.com/twisted-infra/braid/blob/3dc2fea9a29c1b8361961d561fea1fc593c9bd8e/services/kenaan/config.py



From adi at roiban.ro  Mon Oct  2 05:20:57 2017
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 2 Oct 2017 12:20:57 +0100
Subject: [Twisted-Python] Required tests for a PR to be merged
Message-ID: <CAFycZ9cKbGZ3oYSy3mRGM35O0SuO1A-Kj1n2dE8R_qf_RbJ2mg@mail.gmail.com>

Hi,

1. Are Travis OSX builds functional yet? Can we switch to Travis for
OSX builder?

Over https://www.traviscistatus.com/ I see no backlog for macOS.

------------

2. Right now, when we receive a PR from a non-team member, I think
that the only way to trigger the required tests is to create a new
branch in twisted/twisted.

Then you can go to
https://buildbot.twistedmatrix.com/boxes-supported?branch=9176-inlinetracebacks-tardyp
and force the tests.

This looks complicated, so what I was doing, is create a new PR.

--------

Am I doing something wrong?
Is there a simple way?
Am I the only one who thinks this is not productive?

--------

What I am thinking is to have a single PR (the once created by the author).

Once a Twisted team member has reviewed/checked the PR, a message like
"Go, Buildbot, go!" can be left as a comment and the Buildbot GH hook
will trigger the stable tests for that branch.

In this way, buildbot runs are only triggered for external branches
after a core team member has checked the code and assure that no
malware is contained.

With GitHub we can do changs to any forked repos... so if small
changes are required, Twisted team members can push directly to the
external forks... not sure if this is a feature or a security bug :)

---------

What do you think?
Do you see any problem in this?
Will such a change make life easier for you?

I should be able to update the current GH Buildbot hook to handle the
proposed change.

-- 
Adi Roiban



From exarkun at twistedmatrix.com  Mon Oct  2 05:24:49 2017
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Mon, 2 Oct 2017 07:24:49 -0400
Subject: [Twisted-Python] Required tests for a PR to be merged
In-Reply-To: <CAFycZ9cKbGZ3oYSy3mRGM35O0SuO1A-Kj1n2dE8R_qf_RbJ2mg@mail.gmail.com>
References: <CAFycZ9cKbGZ3oYSy3mRGM35O0SuO1A-Kj1n2dE8R_qf_RbJ2mg@mail.gmail.com>
Message-ID: <CAEeXt4ObELsmLEX4pFGGGi2djY3U5V4TDNTmtBrafYXma0YcXQ@mail.gmail.com>

On Mon, Oct 2, 2017 at 7:20 AM, Adi Roiban <adi at roiban.ro> wrote:

> Hi,
>
> 1. Are Travis OSX builds functional yet? Can we switch to Travis for
> OSX builder?
>
> Over https://www.traviscistatus.com/ I see no backlog for macOS.
>
>
No backlog right now but what about most of the rest of the time?  Monday
at 7AM ET is probably about the least busy possible time for travis.


> ------------
>
> 2. Right now, when we receive a PR from a non-team member, I think
> that the only way to trigger the required tests is to create a new
> branch in twisted/twisted.
>
> Then you can go to
> https://buildbot.twistedmatrix.com/boxes-supported?branch=9176-
> inlinetracebacks-tardyp
> and force the tests.
>
> This looks complicated, so what I was doing, is create a new PR.
>
> --------
>
> Am I doing something wrong?
> Is there a simple way?
> Am I the only one who thinks this is not productive?
>

Use admin/pr_as_branch


>
> --------
>
> What I am thinking is to have a single PR (the once created by the author).
>
> Once a Twisted team member has reviewed/checked the PR, a message like
> "Go, Buildbot, go!" can be left as a comment and the Buildbot GH hook
> will trigger the stable tests for that branch.
>
> In this way, buildbot runs are only triggered for external branches
> after a core team member has checked the code and assure that no
> malware is contained.
>
> With GitHub we can do changs to any forked repos... so if small
> changes are required, Twisted team members can push directly to the
> external forks... not sure if this is a feature or a security bug :)
>
> ---------
>
> What do you think?
> Do you see any problem in this?
> Will such a change make life easier for you?
>

This doesn't seem inherently bad, though you probably need per
*revision* signoff,
not per branch signoff.


>
> I should be able to update the current GH Buildbot hook to handle the
> proposed change.
>
> --
> Adi Roiban
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171002/4e5a71b1/attachment-0002.html>

From adi at roiban.ro  Mon Oct  2 05:35:56 2017
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 2 Oct 2017 12:35:56 +0100
Subject: [Twisted-Python] Required tests for a PR to be merged
In-Reply-To: <CAEeXt4ObELsmLEX4pFGGGi2djY3U5V4TDNTmtBrafYXma0YcXQ@mail.gmail.com>
References: <CAFycZ9cKbGZ3oYSy3mRGM35O0SuO1A-Kj1n2dE8R_qf_RbJ2mg@mail.gmail.com>
 <CAEeXt4ObELsmLEX4pFGGGi2djY3U5V4TDNTmtBrafYXma0YcXQ@mail.gmail.com>
Message-ID: <CAFycZ9dunczGCW=ZJZ-QKcjfvXX9vSvDLUJ4KCumid99vPjr+w@mail.gmail.com>

On 2 October 2017 at 12:24, Jean-Paul Calderone
<exarkun at twistedmatrix.com> wrote:
> On Mon, Oct 2, 2017 at 7:20 AM, Adi Roiban <adi at roiban.ro> wrote:

[snip]

>> Am I doing something wrong?
>> Is there a simple way?
>> Am I the only one who thinks this is not productive?
>
>
> Use admin/pr_as_branch

Will it trigger the Buidlbot stable builders?

>From what I can see in the code, it only creates the branch.

[snip]

>> What do you think?
>> Do you see any problem in this?
>> Will such a change make life easier for you?
>
>
> This doesn't seem inherently bad, though you probably need per revision
> signoff, not per branch signoff.
>

We can have something like: "Go, Buildbot, go for 1d32a23!" .

In the initial email I was thinking to use  "Go, Buildbot, go!" and to
trigger only the commit which was pushed before the comment.

So you need to let a comment each time you want to trigger the tests.
A comment will not automatically trigger any future commit.

But now that I am reviewing it, do we need to be that secure?

I was thinking to leverage the GitHub Contributor information and if
the author is a "Contributor" (a commit was previously accepted), it
is automatically trusted.

Thanks!
-- 
Adi Roiban



From mithrandi at mithrandi.net  Mon Oct  2 07:41:05 2017
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Mon, 02 Oct 2017 13:41:05 +0000
Subject: [Twisted-Python] Required tests for a PR to be merged
In-Reply-To: <CAFycZ9dunczGCW=ZJZ-QKcjfvXX9vSvDLUJ4KCumid99vPjr+w@mail.gmail.com>
References: <CAFycZ9cKbGZ3oYSy3mRGM35O0SuO1A-Kj1n2dE8R_qf_RbJ2mg@mail.gmail.com>
 <CAEeXt4ObELsmLEX4pFGGGi2djY3U5V4TDNTmtBrafYXma0YcXQ@mail.gmail.com>
 <CAFycZ9dunczGCW=ZJZ-QKcjfvXX9vSvDLUJ4KCumid99vPjr+w@mail.gmail.com>
Message-ID: <CAMcKhMTksmbkymyXSheKhUb5c7r_C3bUfZJTWacN80zkPkXKrw@mail.gmail.com>

On Mon, 2 Oct 2017 at 13:36 Adi Roiban <adi at roiban.ro> wrote:

> Will it trigger the Buidlbot stable builders?
>
> From what I can see in the code, it only creates the branch.
>

I believe buildbot will trigger a build on the branch being pushed, no need
for a separate PR. Then, because GitHub commit statuses are on the
_commit_, the PR should be green too if the build succeeds.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171002/63d336ba/attachment-0002.html>

From adi at roiban.ro  Mon Oct  2 08:29:11 2017
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 2 Oct 2017 15:29:11 +0100
Subject: [Twisted-Python] Required tests for a PR to be merged
In-Reply-To: <CAMcKhMTksmbkymyXSheKhUb5c7r_C3bUfZJTWacN80zkPkXKrw@mail.gmail.com>
References: <CAFycZ9cKbGZ3oYSy3mRGM35O0SuO1A-Kj1n2dE8R_qf_RbJ2mg@mail.gmail.com>
 <CAEeXt4ObELsmLEX4pFGGGi2djY3U5V4TDNTmtBrafYXma0YcXQ@mail.gmail.com>
 <CAFycZ9dunczGCW=ZJZ-QKcjfvXX9vSvDLUJ4KCumid99vPjr+w@mail.gmail.com>
 <CAMcKhMTksmbkymyXSheKhUb5c7r_C3bUfZJTWacN80zkPkXKrw@mail.gmail.com>
Message-ID: <CAFycZ9e_Bzoa2EjjTNHwd7W_O_G2st4SoBTFTYGUBNg7=vX4zw@mail.gmail.com>

On 2 October 2017 at 14:41, Tristan Seligmann <mithrandi at mithrandi.net> wrote:
> On Mon, 2 Oct 2017 at 13:36 Adi Roiban <adi at roiban.ro> wrote:
>>
>> Will it trigger the Buidlbot stable builders?
>>
>> From what I can see in the code, it only creates the branch.
>
>
> I believe buildbot will trigger a build on the branch being pushed, no need
> for a separate PR. Then, because GitHub commit statuses are on the _commit_,
> the PR should be green too if the build succeeds.

True. Thanks!

Found the code here
https://github.com/twisted-infra/braid/blob/master/services/buildbot/master/txbuildbot/web.py

-- 
Adi Roiban



From exarkun at twistedmatrix.com  Mon Oct  2 10:21:14 2017
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Mon, 2 Oct 2017 12:21:14 -0400
Subject: [Twisted-Python] Required tests for a PR to be merged
In-Reply-To: <CAFycZ9dunczGCW=ZJZ-QKcjfvXX9vSvDLUJ4KCumid99vPjr+w@mail.gmail.com>
References: <CAFycZ9cKbGZ3oYSy3mRGM35O0SuO1A-Kj1n2dE8R_qf_RbJ2mg@mail.gmail.com>
 <CAEeXt4ObELsmLEX4pFGGGi2djY3U5V4TDNTmtBrafYXma0YcXQ@mail.gmail.com>
 <CAFycZ9dunczGCW=ZJZ-QKcjfvXX9vSvDLUJ4KCumid99vPjr+w@mail.gmail.com>
Message-ID: <CAEeXt4MPPNxAvMZ4EDq6mQh4vPFipimkYsprOYG8gXOQ8AcBXg@mail.gmail.com>

On Mon, Oct 2, 2017 at 7:35 AM, Adi Roiban <adi at roiban.ro> wrote:

> On 2 October 2017 at 12:24, Jean-Paul Calderone
> <exarkun at twistedmatrix.com> wrote:
> > On Mon, Oct 2, 2017 at 7:20 AM, Adi Roiban <adi at roiban.ro> wrote:
>
> [snip]
>
> >> Am I doing something wrong?
> >> Is there a simple way?
> >> Am I the only one who thinks this is not productive?
> >
> >
> > Use admin/pr_as_branch
>
> Will it trigger the Buidlbot stable builders?
>
> From what I can see in the code, it only creates the branch.
>
>
If it doesn't, there's probably no reason it *couldn't* (apart from the
obvious labor requirements).  I did think it already did everything you
wanted which is why I suggested it but I think you're right that's it's not
quite complete.

[snip]
>
> >> What do you think?
> >> Do you see any problem in this?
> >> Will such a change make life easier for you?
> >
> >
> > This doesn't seem inherently bad, though you probably need per revision
> > signoff, not per branch signoff.
> >
>
> We can have something like: "Go, Buildbot, go for 1d32a23!" .
>
> In the initial email I was thinking to use  "Go, Buildbot, go!" and to
> trigger only the commit which was pushed before the comment.
>
> So you need to let a comment each time you want to trigger the tests.
> A comment will not automatically trigger any future commit.
>
>
That seems fine to me - I just wanted it to be clear that the comment only
triggers the current HEAD of the branch (there's still a potential problem
since you can't ever know what the HEAD will be when you actually post the
comment but perhaps it's safe to ignore this possible attack).



> But now that I am reviewing it, do we need to be that secure?
>
> I was thinking to leverage the GitHub Contributor information and if
> the author is a "Contributor" (a commit was previously accepted), it
> is automatically trusted.
>

Creating a way to delegate CI authority seems like a good idea, yes.
Perhaps the heuristic should not be exactly "one previously accepted
commit" but something along those lines seems sane.  You still probably
want a way to trigger a complete CI run for folks who haven't yet been
admitted into this set, though.

Jean-Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171002/8a10d585/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Oct  2 17:09:45 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 2 Oct 2017 16:09:45 -0700
Subject: [Twisted-Python] Defining the review workflow on top of
	GitHub	PR
In-Reply-To: <CAFycZ9dip+bQwaR1O-rrfBQys1nH4Je5uSAF7a6a3+D_UnvQOQ@mail.gmail.com>
References: <CAFycZ9fcEGiCDpnPW6kyZByxRp-_iBwvz=YczqeKYU0GX6TJvQ@mail.gmail.com>
 <CAG=rPVeDebaSop1U2W2ffrXOfmej=FvodsAm53puY6EpZJ-Zbw@mail.gmail.com>
 <DF65352E-4285-494E-8B37-24C16B1D8DB7@twistedmatrix.com>
 <CAFycZ9dip+bQwaR1O-rrfBQys1nH4Je5uSAF7a6a3+D_UnvQOQ@mail.gmail.com>
Message-ID: <76939857-1A87-4E88-91BE-26B0EB9B2A87@twistedmatrix.com>



> On Oct 2, 2017, at 2:48 AM, Adi Roiban <adi at roiban.ro> wrote:
> 
> On 1 October 2017 at 20:09, Glyph <glyph at twistedmatrix.com> wrote:
>> On Oct 1, 2017, at 12:06 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
>> 
>> 
>> Rather than write a bot specific to Twisted, why not just adapt the Twisted
>> project to use a bot written by another project?
>> 
>> 
>> Personally I don't care either way :-).  I was just describing my
>> understanding of the existing plan, not endorsing it.  Hopefully someone
>> more directly involved will comment.
> 
> I expect that in order to make this happen, we will need a transition
> period in which the current system should continue to work, that is
> automatically set/remove "review" keyword to Trac.
> In this way, the new way(tm) can be implemented in various ways (and
> experiment with different ways) and nobody should complain as the old
> system will just work.
> 
> For my project, I am using Klein as the hooks server, but it is based
> on Trac XML-RPC, so I don't think it can be used for Twisted.
> 
> ---------------
> 
> With that in mind, I think that txghbot or something based on
> python/twisted is easier.
> We would need to talk with Trac... maybe over PB
> 
> I remember there was a PB based channel for communicating with Trac
> but I can't find where it is defined.
> I see that kenan is using something [1] BOT_PORT = 15243, I can't find
> where a service with that port is started.

The PB interface is unmaintained and pretty much only still exists for IRC notifications (if I remember correctly); the process binding that port is Kenaan (the IRC bot).

https://trac-hacks.org/wiki/XmlRpcPlugin <https://trac-hacks.org/wiki/XmlRpcPlugin> is now a bit of a misnomer as it also supports JSON-RPC as well.  We should probably just check that the plugin is upgraded and use that.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171002/e4416b98/attachment-0002.html>

From adi at roiban.ro  Fri Oct  6 04:22:31 2017
From: adi at roiban.ro (Adi Roiban)
Date: Fri, 6 Oct 2017 11:22:31 +0100
Subject: [Twisted-Python] Defining the review workflow on top of GitHub
	PR
In-Reply-To: <76939857-1A87-4E88-91BE-26B0EB9B2A87@twistedmatrix.com>
References: <CAFycZ9fcEGiCDpnPW6kyZByxRp-_iBwvz=YczqeKYU0GX6TJvQ@mail.gmail.com>
 <CAG=rPVeDebaSop1U2W2ffrXOfmej=FvodsAm53puY6EpZJ-Zbw@mail.gmail.com>
 <DF65352E-4285-494E-8B37-24C16B1D8DB7@twistedmatrix.com>
 <CAFycZ9dip+bQwaR1O-rrfBQys1nH4Je5uSAF7a6a3+D_UnvQOQ@mail.gmail.com>
 <76939857-1A87-4E88-91BE-26B0EB9B2A87@twistedmatrix.com>
Message-ID: <CAFycZ9dcaFzO_cW+8syY5WzDG1PJbbhZ-zAVNeWq32xuS3NniA@mail.gmail.com>

On 3 October 2017 at 00:09, Glyph <glyph at twistedmatrix.com> wrote:
>

[snip]

> I remember there was a PB based channel for communicating with Trac
> but I can't find where it is defined.
> I see that kenan is using something [1] BOT_PORT = 15243, I can't find
> where a service with that port is started.
>
>
> The PB interface is unmaintained and pretty much only still exists for IRC
> notifications (if I remember correctly); the process binding that port is
> Kenaan (the IRC bot).
>
> https://trac-hacks.org/wiki/XmlRpcPlugin is now a bit of a misnomer as it
> also supports JSON-RPC as well.  We should probably just check that the
> plugin is upgraded and use that.
>
> -glyph
>

Thanks for the info.
With XML/JSON RPC I should be able to get something.

--------

I have updated the github bot for my project to do GitHub label management.
I am using a slightly different Trac process than Twisted.

As a proof of concept, I can set the bot to be used for
twisted-infra/braid as for Braid we don't need to sync with Trac.

We can use it to get a hands-on experience on the label management
part, and once we agree on how it should behave,  I can look at
deploying a dedicated bot for Twisted and then update it to sync with
Trac.

What do you think?

PS: I am not deploying it into Twisted infra now as for me
twisted-infra/braid and vagrant vm is broken... working on fixing it
-- 
Adi Roiban



From trac at twistedmatrix.com  Sun Oct  8 00:05:31 2017
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 08 Oct 2017 06:05:31 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1507442731.2.627956111040873070@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171008/fb108c73/attachment-0002.html>

From rodrigc at crodrigues.org  Tue Oct 10 13:17:12 2017
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Tue, 10 Oct 2017 12:17:12 -0700
Subject: [Twisted-Python] HTTPS reverse proxy using twistd, twist,
	or twisted.web?
Message-ID: <CAG=rPVdakEV=juu8XQRb2VnRgo5=H6-ucS=yWH9_hjtonNy7dg@mail.gmail.com>

Hi,

Can someone give me a short snippet for how to set
up a HTTPS reverse proxy using twistd, twist, or twisted.web ?

I'd like to add an example of this to the documentation examples,
since it is a pretty common thing to do these days.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171010/5fb5b592/attachment-0002.html>

From exarkun at twistedmatrix.com  Tue Oct 10 13:20:46 2017
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Tue, 10 Oct 2017 15:20:46 -0400
Subject: [Twisted-Python] HTTPS reverse proxy using twistd, twist,
	or twisted.web?
In-Reply-To: <CAG=rPVdakEV=juu8XQRb2VnRgo5=H6-ucS=yWH9_hjtonNy7dg@mail.gmail.com>
References: <CAG=rPVdakEV=juu8XQRb2VnRgo5=H6-ucS=yWH9_hjtonNy7dg@mail.gmail.com>
Message-ID: <CAEeXt4OGFvF1pvamz2eTGes8PdSHU6=VRawbbbDX-4Am6=mOcA@mail.gmail.com>

On Tue, Oct 10, 2017 at 3:17 PM, Craig Rodrigues <rodrigc at crodrigues.org>
wrote:

> Hi,
>
> Can someone give me a short snippet for how to set
> up a HTTPS reverse proxy using twistd, twist, or twisted.web ?
>
>
This requires CONNECT support in the Twisted Web server.  Has anyone
implemented this yet?

Jean-Paul



> I'd like to add an example of this to the documentation examples,
> since it is a pretty common thing to do these days.
>
> --
> Craig
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171010/6bf9ff91/attachment-0002.html>

From mrw at enotuniq.org  Tue Oct 10 14:00:38 2017
From: mrw at enotuniq.org (Mark Williams)
Date: Tue, 10 Oct 2017 13:00:38 -0700
Subject: [Twisted-Python] HTTPS reverse proxy using twistd, twist,
 or twisted.web?
In-Reply-To: <CAEeXt4OGFvF1pvamz2eTGes8PdSHU6=VRawbbbDX-4Am6=mOcA@mail.gmail.com>
References: <CAG=rPVdakEV=juu8XQRb2VnRgo5=H6-ucS=yWH9_hjtonNy7dg@mail.gmail.com>
 <CAEeXt4OGFvF1pvamz2eTGes8PdSHU6=VRawbbbDX-4Am6=mOcA@mail.gmail.com>
Message-ID: <1507665638.3866866.1134390352.0A22D63B@webmail.messagingengine.com>

On Tue, Oct 10, 2017, at 12:20 PM, Jean-Paul Calderone wrote:
> On Tue, Oct 10, 2017 at 3:17 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
>> Hi,
>> Can someone give me a short snippet for how to set
>> up a HTTPS reverse proxy using twistd, twist, or twisted.web ?
>> 
> 
> This requires CONNECT support in the Twisted Web server.Â  Has anyone implemented this yet?
> 
> Jean-Paul

We have to closeÂ http://twistedmatrix.com/trac/ticket/288Â before we can
implement CONNECT.  So no, no has implemented it yet :(

However, I think Craig meant a reverse proxy that terminates TLS. 
That's more common than forwarding TLS connections to backends.

Amber's written an HTTP proxy that terminates TLS, and even handles all
Let's Encrypt paper work:

https://github.com/hawkowl/rproxy

Even shorter: Â put this in "reverse.rpy":


from twisted.web import proxy
resource = proxy.ReverseProxyResource('localhost', 9999, '')


Then, run it like so:

twist web --port
ssl:port=4443:privateKey=/path/to/privateKey.key:/path/to/certKey=certificate.crt
--resource-script=reverse.rpy

Requests to port 4443 will terminate the TLS connection and be forwarded
to a web server running on localhost:9999.

This assumes you have a private key and certificate already.  If not,
it's easier to use rproxy.

--
Â  Mark Williams
Â  mrw at enotuniq.org



From rodrigc at crodrigues.org  Tue Oct 10 15:02:31 2017
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Tue, 10 Oct 2017 14:02:31 -0700
Subject: [Twisted-Python] HTTPS reverse proxy using twistd, twist,
	or twisted.web?
In-Reply-To: <CAEeXt4OGFvF1pvamz2eTGes8PdSHU6=VRawbbbDX-4Am6=mOcA@mail.gmail.com>
References: <CAG=rPVdakEV=juu8XQRb2VnRgo5=H6-ucS=yWH9_hjtonNy7dg@mail.gmail.com>
 <CAEeXt4OGFvF1pvamz2eTGes8PdSHU6=VRawbbbDX-4Am6=mOcA@mail.gmail.com>
Message-ID: <CAG=rPVfkxXNkAqghHPp0f71Pwb3Mk=WEri+meKBS11kjKBMeBg@mail.gmail.com>

On Tue, Oct 10, 2017 at 12:20 PM, Jean-Paul Calderone <
exarkun at twistedmatrix.com> wrote:

> On Tue, Oct 10, 2017 at 3:17 PM, Craig Rodrigues <rodrigc at crodrigues.org>
> wrote:
>
>> Hi,
>>
>> Can someone give me a short snippet for how to set
>> up a HTTPS reverse proxy using twistd, twist, or twisted.web ?
>>
>>
> This requires CONNECT support in the Twisted Web server.  Has anyone
> implemented this yet?
>
>
Was it added here?

https://github.com/twisted/twisted/commit/1f043a3a5eb4078b905674f20f7c16bd954f5045#diff-477bf6af9f412b5a20b42bdddca60a82R1150

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171010/d97bbca8/attachment-0002.html>

From barry.scott at forcepoint.com  Fri Oct 13 06:29:17 2017
From: barry.scott at forcepoint.com (Barry Scott)
Date: Fri, 13 Oct 2017 13:29:17 +0100
Subject: [Twisted-Python] Clarification or pausing a consumer
Message-ID: <7964087.cE9iTWCf5K@barry-scott-desktop>

I have a app that needs to send data as an http response. But the data is 
produced slowly. More slowly then the time taken to transmit it.

The consumer keeps calling resumeProducing, but there is no data to send 
often.

What is the correct way to pause the consumer so that it does not keep
calling resumeProducing? unregisterProducer?

Then when the next block of data is available what is the correct way to
resume the consumer? registerProducer?

Related to that why does HTTPChannel.registerProducer convert a IPullProducer 
into a IPushProducer using _PullToPush?

Barry



From exarkun at twistedmatrix.com  Fri Oct 13 18:47:33 2017
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Fri, 13 Oct 2017 20:47:33 -0400
Subject: [Twisted-Python] Clarification or pausing a consumer
In-Reply-To: <7964087.cE9iTWCf5K@barry-scott-desktop>
References: <7964087.cE9iTWCf5K@barry-scott-desktop>
Message-ID: <CAEeXt4NR=8dFzn9zJfCwPUaak4qXqPT1VFuE3b3cQ9AigBQ+OQ@mail.gmail.com>

On Fri, Oct 13, 2017 at 8:29 AM, Barry Scott <barry.scott at forcepoint.com>
wrote:

> I have a app that needs to send data as an http response. But the data is
> produced slowly. More slowly then the time taken to transmit it.
>
> The consumer keeps calling resumeProducing, but there is no data to send
> often.
>

This sounds like a bug in the consumer.  There are two cases.

If the producer is "streaming" or "push" (two words, one meaning) then the
consumer should call resumeProducing once and let data come.  If it wants
to slow down the data, it can call pauseProducing.  There's nothing else it
should be doing.

If the producer is "not streaming" or "pull" (again, one meaning) then the
consumer should call resumeProducing and wait for a write call.  Then it
should call resumeProducing again (if it wants more data).  It should not
call resumeProducing again while waiting for a write call.


> What is the correct way to pause the consumer so that it does not keep
> calling resumeProducing? unregisterProducer?
>

Probably just fix the consumer implementation to not be broken.  Or switch
to tubes which has a simpler model and (in principle) fewer places to make
mistakes.


>
> Then when the next block of data is available what is the correct way to
> resume the consumer? registerProducer?
>
> Related to that why does HTTPChannel.registerProducer convert a
> IPullProducer
> into a IPushProducer using _PullToPush?
>

Probably as an attempt to simplify the implementation - to make it so the
consumer can pretend there's just one kind of producer instead of two
(which would be nice for everyone).

Jean-Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171013/fc367417/attachment-0002.html>

From glyph at twistedmatrix.com  Sat Oct 14 00:44:12 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 13 Oct 2017 23:44:12 -0700
Subject: [Twisted-Python] Clarification or pausing a consumer
In-Reply-To: <CAEeXt4NR=8dFzn9zJfCwPUaak4qXqPT1VFuE3b3cQ9AigBQ+OQ@mail.gmail.com>
References: <7964087.cE9iTWCf5K@barry-scott-desktop>
 <CAEeXt4NR=8dFzn9zJfCwPUaak4qXqPT1VFuE3b3cQ9AigBQ+OQ@mail.gmail.com>
Message-ID: <3A039F2B-32D9-4740-B46C-986B457A9CD0@twistedmatrix.com>



> On Oct 13, 2017, at 5:47 PM, Jean-Paul Calderone <exarkun at twistedmatrix.com> wrote:
> 
> On Fri, Oct 13, 2017 at 8:29 AM, Barry Scott <barry.scott at forcepoint.com <mailto:barry.scott at forcepoint.com>> wrote:
> I have a app that needs to send data as an http response. But the data is
> produced slowly. More slowly then the time taken to transmit it.
> 
> The consumer keeps calling resumeProducing, but there is no data to send
> often.
> 
> This sounds like a bug in the consumer.  There are two cases.
> 
> If the producer is "streaming" or "push" (two words, one meaning) then the consumer should call resumeProducing once and let data come.  If it wants to slow down the data, it can call pauseProducing.  There's nothing else it should be doing.

This is the good kind of producer.

> If the producer is "not streaming" or "pull" (again, one meaning) then the consumer should call resumeProducing and wait for a write call.  Then it should call resumeProducing again (if it wants more data).  It should not call resumeProducing again while waiting for a write call.

This is the bad kind.  It is basically pointless.  It was a design error to include it and it should be removed from Twisted eventually.

> What is the correct way to pause the consumer so that it does not keep
> calling resumeProducing? unregisterProducer?
> 
> Probably just fix the consumer implementation to not be broken.  Or switch to tubes which has a simpler model and (in principle) fewer places to make mistakes.

My guess is not that the consumer is broken, but rather, you registered your producer as the bad kind of producer ("pull") and it's just doing as it was told, which is to keep calling resumeProducing over and over again every time it wants data.

Let us know how it works out!

>  
> Then when the next block of data is available what is the correct way to
> resume the consumer? registerProducer?
> 
> Related to that why does HTTPChannel.registerProducer convert a IPullProducer
> into a IPushProducer using _PullToPush?
> 
> Probably as an attempt to simplify the implementation - to make it so the consumer can pretend there's just one kind of producer instead of two (which would be nice for everyone).
> 
> Jean-Paul
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171013/8d3972c6/attachment-0002.html>

From trac at twistedmatrix.com  Sun Oct 15 00:05:24 2017
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 15 Oct 2017 06:05:24 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1508047524.71.7976030196696965582@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171015/01318bad/attachment-0002.html>

From rodrigc at crodrigues.org  Tue Oct 17 01:26:29 2017
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Tue, 17 Oct 2017 00:26:29 -0700
Subject: [Twisted-Python] Python.org moves to Buildbot 0.9,
	Twisted 17.9.0 and Python 3
Message-ID: <CAG=rPVdTaZxxhR2n+d7AbLFso971B+r3+rgXrit=TbsVX3JxZw@mail.gmail.com>

I worked with Zachary Ware, who maintains the buildbots for python.org.
Zachary upgraded python.org's  buildbot from 0.8 to 0.9:

https://www.python.org/dev/buildbot/

buildbot 0.9 is the first release of buildbot that
can run on Python 3.  The python.org buildbot master is running on Python
3.4:

http://buildbot.python.org/all/#/about

That master is connected to multiple workers/slaves, most of which are
0.8 running on Python 2:

http://buildbot.python.org/all/#/workers

This upgrade could not have been possible without the
porting of Twisted PB to Python 3.

This is a highly visible deployment of Twisted running Python 3,
and aligns with python.org's direction to move the world to Python 3. :)

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171017/7de676b3/attachment-0002.html>

From Ohad.Shai at Cyberbit.com  Tue Oct 17 01:36:33 2017
From: Ohad.Shai at Cyberbit.com (Ohad Shai)
Date: Tue, 17 Oct 2017 07:36:33 +0000
Subject: [Twisted-Python] Twisted HTTPS Server-Client Communication problem
Message-ID: <VI1PR0701MB2446D6A0A38C81E1676344619A4C0@VI1PR0701MB2446.eurprd07.prod.outlook.com>

Hi,


I have an important question about twisted HTTPS client-server communication.


I ran an HTTPS server with my own certs and tried to communicate with a twisted HTTPS client with the specific cert.


I am getting an error that says: "Invalid DNS-ID".


all the error info with all my code is in here: https://gist.github.com/anonymous/e46d4d8dc1c102857497cde9e2fc4725#file-gistfile1-txt

Twisted-HTTPS-client-server<https://gist.github.com/anonymous/e46d4d8dc1c102857497cde9e2fc4725#file-gistfile1-txt>
gist.github.com
Twisted-HTTPS-client-server




I will be appreciate if someone has a clue how can I fix this error.


Thanks,



Ohad Shai
Software Engineer, EDR Linux
972-052-6887792
ohad.shai at cyberbit.com<mailto:daniel.doron at cyberbit.com>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171017/661a4000/attachment-0002.html>

From danielmeirdoron at gmail.com  Tue Oct 17 03:12:58 2017
From: danielmeirdoron at gmail.com (Daniel Doron)
Date: Tue, 17 Oct 2017 12:12:58 +0300
Subject: [Twisted-Python] Twisted Application(Daemon) with multiple clients
Message-ID: <CAFwN=+yWpbqt8kanoYhP86AQgaJ9Z5i35AxsSQi4tx2OE9fZCA@mail.gmail.com>

Hi,

Sorry in advance for sending this to both Twisted mailing list. i was
not sure for which was it was most appropriate.

I have a design in which I would like to have a Twisted Application
which would periodically connect to a REST Server to pull
configuration information, i.e. as client and upon receiving that
information and processing would communicate spawn 1 or more clients
connecting to local process via Unix sockets to send them
configuration information.
I think I understand how the standard approach would be:
1. create a function that would be called with callLater/LoopingCall
2. in that function create my client, connect to the REST Server, get
info etc...

So:
1. Do you think my approach is correct? Essentially as explained I
need a service/daemon to periodically connect ot one server to pull
information and then connect to other local process to forward them
the relevant configuration.
2. How do I turn this into a twisted plugin? (daemon)


Thanks
-Daniel



From trac at twistedmatrix.com  Sun Oct 22 00:05:23 2017
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 22 Oct 2017 06:05:23 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1508652323.0.1184806626564379154@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171022/ce0cf71c/attachment-0002.html>

From barry.scott at forcepoint.com  Mon Oct 23 06:10:22 2017
From: barry.scott at forcepoint.com (Barry Scott)
Date: Mon, 23 Oct 2017 13:10:22 +0100
Subject: [Twisted-Python] COMMERCIAL:Re: Clarification or pausing a
	consumer
In-Reply-To: <3A039F2B-32D9-4740-B46C-986B457A9CD0@twistedmatrix.com>
References: <7964087.cE9iTWCf5K@barry-scott-desktop>
 <CAEeXt4NR=8dFzn9zJfCwPUaak4qXqPT1VFuE3b3cQ9AigBQ+OQ@mail.gmail.com>
 <3A039F2B-32D9-4740-B46C-986B457A9CD0@twistedmatrix.com>
Message-ID: <38689100.yK7B7jh5g5@barry-scott-desktop>

On Saturday, 14 October 2017 07:44:12 BST Glyph wrote:
> > On Oct 13, 2017, at 5:47 PM, Jean-Paul Calderone
> > <exarkun at twistedmatrix.com> wrote:
> > 
> > On Fri, Oct 13, 2017 at 8:29 AM, Barry Scott <barry.scott at forcepoint.com
> > <mailto:barry.scott at forcepoint.com>> wrote: I have a app that needs to
> > send data as an http response. But the data is produced slowly. More
> > slowly then the time taken to transmit it.
> > 
> > The consumer keeps calling resumeProducing, but there is no data to send
> > often.
> > 
> > This sounds like a bug in the consumer.  There are two cases.
> > 
> > If the producer is "streaming" or "push" (two words, one meaning) then the
> > consumer should call resumeProducing once and let data come.  If it wants
> > to slow down the data, it can call pauseProducing.  There's nothing else
> > it should be doing.
> This is the good kind of producer.
> 
> > If the producer is "not streaming" or "pull" (again, one meaning) then the
> > consumer should call resumeProducing and wait for a write call.  Then it
> > should call resumeProducing again (if it wants more data).  It should not
> > call resumeProducing again while waiting for a write call.
> This is the bad kind.  It is basically pointless.  It was a design error to
> include it and it should be removed from Twisted eventually.

Oh. This is surprising to here what is the rational behind this "good" vs. 
"bad"?

My use case is that I'm a proxy and I can only produce what has been received 
from the other side.

A hard CPU loop calling resumeProducing is not appropiate for this use case.

I had to work around what looked like a bug that the streaming parameter is 
ignored and call unregisterProducer/registedProduced to get back usable 
behaviour.

Barry

> > What is the correct way to pause the consumer so that it does not keep
> > calling resumeProducing? unregisterProducer?
> > 
> > Probably just fix the consumer implementation to not be broken.  Or switch
> > to tubes which has a simpler model and (in principle) fewer places to
> > make mistakes.
> My guess is not that the consumer is broken, but rather, you registered your
> producer as the bad kind of producer ("pull") and it's just doing as it was
> told, which is to keep calling resumeProducing over and over again every
> time it wants data.
> 
> Let us know how it works out!
> 
> > Then when the next block of data is available what is the correct way to
> > resume the consumer? registerProducer?
> > 
> > Related to that why does HTTPChannel.registerProducer convert a
> > IPullProducer into a IPushProducer using _PullToPush?
> > 
> > Probably as an attempt to simplify the implementation - to make it so the
> > consumer can pretend there's just one kind of producer instead of two
> > (which would be nice for everyone).
> > 
> > Jean-Paul
> > 
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From exarkun at twistedmatrix.com  Mon Oct 23 10:31:19 2017
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Mon, 23 Oct 2017 12:31:19 -0400
Subject: [Twisted-Python] COMMERCIAL:Re: Clarification or pausing a
	consumer
In-Reply-To: <38689100.yK7B7jh5g5@barry-scott-desktop>
References: <7964087.cE9iTWCf5K@barry-scott-desktop>
 <CAEeXt4NR=8dFzn9zJfCwPUaak4qXqPT1VFuE3b3cQ9AigBQ+OQ@mail.gmail.com>
 <3A039F2B-32D9-4740-B46C-986B457A9CD0@twistedmatrix.com>
 <38689100.yK7B7jh5g5@barry-scott-desktop>
Message-ID: <CAEeXt4O=XPbXz6dWEZgajbdxxEnqw8Y_3JYPH8DMvqGb0fVoKw@mail.gmail.com>

On Mon, Oct 23, 2017 at 8:10 AM, Barry Scott <barry.scott at forcepoint.com>
wrote:

> On Saturday, 14 October 2017 07:44:12 BST Glyph wrote:
> > > On Oct 13, 2017, at 5:47 PM, Jean-Paul Calderone
> > > <exarkun at twistedmatrix.com> wrote:
> > >
> > > On Fri, Oct 13, 2017 at 8:29 AM, Barry Scott <
> barry.scott at forcepoint.com
> > > <mailto:barry.scott at forcepoint.com>> wrote: I have a app that needs to
> > > send data as an http response. But the data is produced slowly. More
> > > slowly then the time taken to transmit it.
> > >
> > > The consumer keeps calling resumeProducing, but there is no data to
> send
> > > often.
> > >
> > > This sounds like a bug in the consumer.  There are two cases.
> > >
> > > If the producer is "streaming" or "push" (two words, one meaning) then
> the
> > > consumer should call resumeProducing once and let data come.  If it
> wants
> > > to slow down the data, it can call pauseProducing.  There's nothing
> else
> > > it should be doing.
> > This is the good kind of producer.
> >
> > > If the producer is "not streaming" or "pull" (again, one meaning) then
> the
> > > consumer should call resumeProducing and wait for a write call.  Then
> it
> > > should call resumeProducing again (if it wants more data).  It should
> not
> > > call resumeProducing again while waiting for a write call.
> > This is the bad kind.  It is basically pointless.  It was a design error
> to
> > include it and it should be removed from Twisted eventually.
>
> Oh. This is surprising to here what is the rational behind this "good" vs.
> "bad"?
>

What makes it "bad" is that it creates extra work for every consumer
implementation.  The extra work is implementing largely the same thing
every time so it's also redundant work.  The logic for knowing when to call
resumeProducing again is always exactly the same regardless of the
consumer.  It doesn't belong inside every consumer.


>
> My use case is that I'm a proxy and I can only produce what has been
> received
> from the other side.
>
>
This sounds like it should be a push producer to me.


> A hard CPU loop calling resumeProducing is not appropiate for this use
> case.
>
>
This is appropriate behavior for neither kind of producer.  As I wrote in
my first reply, a consumer with a pull ("not streaming", "bad") producer
should call resumeProducing once and then wait until write is called on
it.  After write is called on it, it may call resumeProducing again if it
wants.

Jean-Paul


> I had to work around what looked like a bug that the streaming parameter is
> ignored and call unregisterProducer/registedProduced to get back usable
> behaviour.
>
> Barry
>
> > > What is the correct way to pause the consumer so that it does not keep
> > > calling resumeProducing? unregisterProducer?
> > >
> > > Probably just fix the consumer implementation to not be broken.  Or
> switch
> > > to tubes which has a simpler model and (in principle) fewer places to
> > > make mistakes.
> > My guess is not that the consumer is broken, but rather, you registered
> your
> > producer as the bad kind of producer ("pull") and it's just doing as it
> was
> > told, which is to keep calling resumeProducing over and over again every
> > time it wants data.
> >
> > Let us know how it works out!
> >
> > > Then when the next block of data is available what is the correct way
> to
> > > resume the consumer? registerProducer?
> > >
> > > Related to that why does HTTPChannel.registerProducer convert a
> > > IPullProducer into a IPushProducer using _PullToPush?
> > >
> > > Probably as an attempt to simplify the implementation - to make it so
> the
> > > consumer can pretend there's just one kind of producer instead of two
> > > (which would be nice for everyone).
> > >
> > > Jean-Paul
> > >
> > > _______________________________________________
> > > Twisted-Python mailing list
> > > Twisted-Python at twistedmatrix.com
> > > https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171023/5b31fecd/attachment-0002.html>

From barry.scott at forcepoint.com  Tue Oct 24 04:10:30 2017
From: barry.scott at forcepoint.com (Barry Scott)
Date: Tue, 24 Oct 2017 11:10:30 +0100
Subject: [Twisted-Python] COMMERCIAL:Re: Clarification or pausing
	a	consumer
In-Reply-To: <CAEeXt4O=XPbXz6dWEZgajbdxxEnqw8Y_3JYPH8DMvqGb0fVoKw@mail.gmail.com>
References: <7964087.cE9iTWCf5K@barry-scott-desktop>
 <38689100.yK7B7jh5g5@barry-scott-desktop>
 <CAEeXt4O=XPbXz6dWEZgajbdxxEnqw8Y_3JYPH8DMvqGb0fVoKw@mail.gmail.com>
Message-ID: <2271863.luWoRcj9gG@barry-scott-desktop>

On Monday, 23 October 2017 17:31:19 BST Jean-Paul Calderone wrote:
> On Mon, Oct 23, 2017 at 8:10 AM, Barry Scott <barry.scott at forcepoint.com>
> 
> wrote:
> > On Saturday, 14 October 2017 07:44:12 BST Glyph wrote:
> > > > On Oct 13, 2017, at 5:47 PM, Jean-Paul Calderone
> > > > <exarkun at twistedmatrix.com> wrote:
> > > > 
> > > > On Fri, Oct 13, 2017 at 8:29 AM, Barry Scott <
> > 
> > barry.scott at forcepoint.com
> > 
> > > > <mailto:barry.scott at forcepoint.com>> wrote: I have a app that needs to
> > > > send data as an http response. But the data is produced slowly. More
> > > > slowly then the time taken to transmit it.
> > > > 
> > > > The consumer keeps calling resumeProducing, but there is no data to
> > 
> > send
> > 
> > > > often.
> > > > 
> > > > This sounds like a bug in the consumer.  There are two cases.
> > > > 
> > > > If the producer is "streaming" or "push" (two words, one meaning) then
> > 
> > the
> > 
> > > > consumer should call resumeProducing once and let data come.  If it
> > 
> > wants
> > 
> > > > to slow down the data, it can call pauseProducing.  There's nothing
> > 
> > else
> > 
> > > > it should be doing.
> > > 
> > > This is the good kind of producer.
> > > 
> > > > If the producer is "not streaming" or "pull" (again, one meaning) then
> > 
> > the
> > 
> > > > consumer should call resumeProducing and wait for a write call.  Then
> > 
> > it
> > 
> > > > should call resumeProducing again (if it wants more data).  It should
> > 
> > not
> > 
> > > > call resumeProducing again while waiting for a write call.
> > > 
> > > This is the bad kind.  It is basically pointless.  It was a design error
> > 
> > to
> > 
> > > include it and it should be removed from Twisted eventually.
> > 
> > Oh. This is surprising to here what is the rational behind this "good" vs.
> > "bad"?
> 
> What makes it "bad" is that it creates extra work for every consumer
> implementation.  The extra work is implementing largely the same thing
> every time so it's also redundant work.  The logic for knowing when to call
> resumeProducing again is always exactly the same regardless of the
> consumer.  It doesn't belong inside every consumer.

o.k. I see. So you want to have the consumer logic implemented once and
reused as needed?

> 
> > My use case is that I'm a proxy and I can only produce what has been
> > received
> > from the other side.
> 
> This sounds like it should be a push producer to me.

Yes it is.

> 
> > A hard CPU loop calling resumeProducing is not appropiate for this use
> > case.
> 
> This is appropriate behavior for neither kind of producer.  As I wrote in
> my first reply, a consumer with a pull ("not streaming", "bad") producer
> should call resumeProducing once and then wait until write is called on
> it.  After write is called on it, it may call resumeProducing again if it
> wants.

But that is what happens is you convert a push to a pull which is why I 
noticed this.

>> Related to that why does HTTPChannel.registerProducer convert
>> a IPullProducer into a IPushProducer using _PullToPush?

It sure looks like a bug to give me that API that is the shape to take push or 
pull but inside then force into pull.

Barry

> 
> Jean-Paul
> 
> > I had to work around what looked like a bug that the streaming parameter
> > is
> > ignored and call unregisterProducer/registedProduced to get back usable
> > behaviour.
> > 
> > Barry
> > 
> > > > What is the correct way to pause the consumer so that it does not keep
> > > > calling resumeProducing? unregisterProducer?
> > > > 
> > > > Probably just fix the consumer implementation to not be broken.  Or
> > 
> > switch
> > 
> > > > to tubes which has a simpler model and (in principle) fewer places to
> > > > make mistakes.
> > > 
> > > My guess is not that the consumer is broken, but rather, you registered
> > 
> > your
> > 
> > > producer as the bad kind of producer ("pull") and it's just doing as it
> > 
> > was
> > 
> > > told, which is to keep calling resumeProducing over and over again every
> > > time it wants data.
> > > 
> > > Let us know how it works out!
> > > 
> > > > Then when the next block of data is available what is the correct way
> > 
> > to
> > 
> > > > resume the consumer? registerProducer?
> > > > 
> > > > Related to that why does HTTPChannel.registerProducer convert a
> > > > IPullProducer into a IPushProducer using _PullToPush?
> > > > 
> > > > Probably as an attempt to simplify the implementation - to make it so
> > 
> > the
> > 
> > > > consumer can pretend there's just one kind of producer instead of two
> > > > (which would be nice for everyone).
> > > > 
> > > > Jean-Paul
> > > > 
> > > > _______________________________________________
> > > > Twisted-Python mailing list
> > > > Twisted-Python at twistedmatrix.com
> > > > https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> > 
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> Scanned by Forcepoint Email Security Gateway
> 
> To report this email as SPAM, please forward it to spam at forcepoint.com




From ixew at hotmail.com  Wed Oct 25 14:07:26 2017
From: ixew at hotmail.com (Enoch W.)
Date: Wed, 25 Oct 2017 20:07:26 +0000
Subject: [Twisted-Python] twisted.internet.ssl
Message-ID: <CO2PR01MB1976C7242B382393AA45F623CC440@CO2PR01MB1976.prod.exchangelabs.com>

Hi,

I am using a self-signed CA to issue server and client(s) certificates.

My server is using the standard Python ssl module.
One client, that is using twisted.internet.ssl, consistently fails to connect with:
On the Server:    [SSL: TLSV1_ALERT_UNKNOWN_CA] tlsv1 alert unknown ca (_ssl.c:661),
On the Client:    [WARNING] [('SSL routines', 'tls_process_server_certificate', 'certificate verify failed')]

This is my code:

path = getModule(__name__).filePath.sibling(u'data')

txt = path.child(u'ca.crt').getContent()
cacert = ssl.Certificate.loadPEM(txt)
root = ssl.trustRootFromCertificates([cacert])

txt = path.child(u'client.pem').getContent()
mycert = ssl.PrivateCertificate.loadPEM(txt)

ctx = ssl.optionsForClientTLS(hostName, trustRoot=root, clientCertificate=mycert)

reactor.connectSSL(hostName, portNumber, factory, ctx)


I am using the latest git trunk code.
With a regular ssl client I don't have an issue.

A known bug?

Thanks, Enoch.


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171025/72d2c32a/attachment-0002.html>

From jlitzingerdev at gmail.com  Wed Oct 25 23:13:51 2017
From: jlitzingerdev at gmail.com (Jason Litzinger)
Date: Wed, 25 Oct 2017 23:13:51 -0600
Subject: [Twisted-Python] twisted.internet.ssl
In-Reply-To: <CO2PR01MB1976C7242B382393AA45F623CC440@CO2PR01MB1976.prod.exchangelabs.com>
References: <CO2PR01MB1976C7242B382393AA45F623CC440@CO2PR01MB1976.prod.exchangelabs.com>
Message-ID: <20171026051351.GA1686@arch-tinker.localdomain>

On Wed, Oct 25, 2017 at 08:07:26PM +0000, Enoch W. wrote:
> A known bug?
Hello Enoch,
A question, does the server have an intermediate cert that it is using?  
If so, then the problem might be that your trust root needs both the CA 
and intermediate.

I have some https test code I hacked together a while back (neither
reviewed nor heavily tested, but same general idea).
https://github.com/jlitzingerdev/twisted-benchmarks/blob/https-benchmark/web_https.py

If I omit the intermediate cert I get the same error.

Cheers,
-Jason



From ex.vitorino at gmail.com  Thu Oct 26 03:20:01 2017
From: ex.vitorino at gmail.com (ex vito)
Date: Thu, 26 Oct 2017 10:20:01 +0100
Subject: [Twisted-Python] twisted.internet.ssl
In-Reply-To: <CO2PR01MB1976C7242B382393AA45F623CC440@CO2PR01MB1976.prod.exchangelabs.com>
References: <CO2PR01MB1976C7242B382393AA45F623CC440@CO2PR01MB1976.prod.exchangelabs.com>
Message-ID: <4FAF7ED7-0C2B-4D11-B0D8-24B662270136@gmail.com>

On 2017-10-25, at 21:07, Enoch W. <ixew at hotmail.com> wrote:

> Hi,
> 
> I am using a self-signed CA to issue server and client(s) certificates. 
> 
> My server is using the standard Python ssl module. 
> One client, that is using twisted.internet.ssl, consistently fails to connect with: 
> On the Server:    [SSL: TLSV1_ALERT_UNKNOWN_CA] tlsv1 alert unknown ca (_ssl.c:661), 
> On the Client:    [WARNING] [('SSL routines', 'tls_process_server_certificate', 'certificate verify failed')]
> 
> This is my code:
> 
> path = getModule(__name__).filePath.sibling(u'data')
> 
> txt = path.child(u'ca.crt').getContent()
> cacert = ssl.Certificate.loadPEM(txt)
> root = ssl.trustRootFromCertificates([cacert])
> 
> txt = path.child(u'client.pem').getContent()
> mycert = ssl.PrivateCertificate.loadPEM(txt)
> 
> ctx = ssl.optionsForClientTLS(hostName, trustRoot=root, clientCertificate=mycert)
> 
> reactor.connectSSL(hostName, portNumber, factory, ctx)
> 
> 
> I am using the latest git trunk code.
> With a regular ssl client I don't have an issue.
> 
> A known bug?

I would review a few things before suspecting a bug.

Your code is using client side certificates (nice, not often seen) so both server and client need to validate each other's certificates on connection establishment. It seems they are both failing, but we're only looking at your client code though.

Here are a few ideas:

1. Double check your certificates: Issuers, Subjects, Dates, SANs, etc.

2. Check that the hostName in optionsForClientTLS matches the name in the server certificate.

3. Use the latest Twisted release instead of trunk, if possible.
   Do the same for pyOpenSSL and other dependencies.

4. On the client side try using SSL4ClientEndpoint instead of connectSSL.
   I'm almost sure they behave differently regarding validation (could not quickly find
   docs on that, though: I've had your problem before and I think I addressed it this way).

   Instead of reactor.connectSSL(...) go for something like:

   ep = endpoints.SSL4ClientEndpoint(
       reactor,
       host=hostName,
       port=portNumber,
       sslContextFactory=ctx,
   )
   client = yield ep.connect(factory)

   For completeness, even though my client skeleton is mostly your client code with
   this diff, a quick test shows that my client also establishes the TLS connection
   if I do the reverse: replace SSL4ClientEndpoint with connectSSL in my code.

   This may not be the culprit, but I would try and see if anything changes.

5. On the server side I have the following Twisted code skeleton:

   dhFile = filepath.FilePath(...)
   dhParams = ssl.DiffieHellmanParameters.fromFile(dhFile)
   caCert = ssl.Certificate.loadPEM(...)
   privateCert = ssl.PrivateCertificate.loadPEM(...)
   cf = ssl.CertificateOptions(
       privateKey=privateCert.privateKey.original,
       certificate=privateCert.original,
       trustRoot=caCert,
       dhParameters=dhParams,
   )
   ep = endpoints.SSL4ServerEndpoint(
       reactor,
       port=...,
       sslContextFactory=cf,
   )
   f = protocol.Factory.forProtocol(...)
   ep.listen(f)
   reactor.run()

   Your code is obviously different, if based on the standard library's ssl module.
   If 1 to 4 don't produce results, this is a good candidate for needing some work.
   Can you share a minimal version of that? I'll be glad to take it for a spin.

6. Double check your certificates, again. Triple-check them if managed manually.


For completeness and reference:
- See http://twistedmatrix.com/documents/current/core/howto/ssl.html as a starting point
  Twisted TLS, containing useful information and working examples.
- My working test environment runs Linux with OpenSSL 1.0.1t.


Cheers,
--
exvito



From ixew at hotmail.com  Thu Oct 26 07:35:00 2017
From: ixew at hotmail.com (Enoch W.)
Date: Thu, 26 Oct 2017 13:35:00 +0000
Subject: [Twisted-Python] twisted.internet.ssl
In-Reply-To: <20171026051351.GA1686@arch-tinker.localdomain>
References: <CO2PR01MB1976C7242B382393AA45F623CC440@CO2PR01MB1976.prod.exchangelabs.com>
 <20171026051351.GA1686@arch-tinker.localdomain>
Message-ID: <CO2PR01MB1976A13CC5DEFDB16C0C0AF2CC450@CO2PR01MB1976.prod.exchangelabs.com>

Thanks Jason,

With a more specific error message raised by github latest code [thanks!] the problem became clear.
I suggest to change the documentation of 'optionsForClientTLS' -

from:
ctx = ssl.optionsForClientTLS(hostName, trustRoot=root, clientCertificate=mycert)

to:
ctx = ssl.optionsForClientTLS(commonName, trustRoot=root, clientCertificate=mycert)

That is, what this ctx (the contextFactory) really expects is the server's certificate commonName which often is, but not in my case, the server's hostName.

Interestingly, Python's standard ssl package does not verify this field.

Regards, Enoch.


On 10/26/2017 01:13 AM, Jason Litzinger wrote:

On Wed, Oct 25, 2017 at 08:07:26PM +0000, Enoch W. wrote:


A known bug?


Hello Enoch,
A question, does the server have an intermediate cert that it is using?
If so, then the problem might be that your trust root needs both the CA
and intermediate.

I have some https test code I hacked together a while back (neither
reviewed nor heavily tested, but same general idea).
https://github.com/jlitzingerdev/twisted-benchmarks/blob/https-benchmark/web_https.py

If I omit the intermediate cert I get the same error.

Cheers,
-Jason

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com<mailto:Twisted-Python at twistedmatrix.com>
https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171026/0bd137c1/attachment-0002.html>

From ixew at hotmail.com  Thu Oct 26 07:59:34 2017
From: ixew at hotmail.com (Enoch W.)
Date: Thu, 26 Oct 2017 13:59:34 +0000
Subject: [Twisted-Python] twisted.internet.ssl
In-Reply-To: <4FAF7ED7-0C2B-4D11-B0D8-24B662270136@gmail.com>
References: <CO2PR01MB1976C7242B382393AA45F623CC440@CO2PR01MB1976.prod.exchangelabs.com>
 <4FAF7ED7-0C2B-4D11-B0D8-24B662270136@gmail.com>
Message-ID: <CO2PR01MB1976BE0D264BFD8A0822523ECC450@CO2PR01MB1976.prod.exchangelabs.com>

Thanks exvito for your detailed response.
Re 2 & 3: You're right on the nail :-)  See my previous email to Jason.
Re 4: I can't use the high level Transport mechanism as I am using Twisted (most of the time) through another library layer (pymodbus).
Re 5: My server is still using Python's bloated ThreadingTCPServer model.
Re 6: Right!

Bottom line, I suggested a change of argument name, from "ssl.optionsForClientTLS(hostName, ..." to "ssl.optionsForClientTLS(commonName, ..."

Regards, Enoch.

On 10/26/2017 05:20 AM, ex vito wrote:

On 2017-10-25, at 21:07, Enoch W. <ixew at hotmail.com><mailto:ixew at hotmail.com> wrote:



Hi,

I am using a self-signed CA to issue server and client(s) certificates.

My server is using the standard Python ssl module.
One client, that is using twisted.internet.ssl, consistently fails to connect with:
On the Server:    [SSL: TLSV1_ALERT_UNKNOWN_CA] tlsv1 alert unknown ca (_ssl.c:661),
On the Client:    [WARNING] [('SSL routines', 'tls_process_server_certificate', 'certificate verify failed')]

This is my code:

path = getModule(__name__).filePath.sibling(u'data')

txt = path.child(u'ca.crt').getContent()
cacert = ssl.Certificate.loadPEM(txt)
root = ssl.trustRootFromCertificates([cacert])

txt = path.child(u'client.pem').getContent()
mycert = ssl.PrivateCertificate.loadPEM(txt)

ctx = ssl.optionsForClientTLS(hostName, trustRoot=root, clientCertificate=mycert)

reactor.connectSSL(hostName, portNumber, factory, ctx)


I am using the latest git trunk code.
With a regular ssl client I don't have an issue.

A known bug?



I would review a few things before suspecting a bug.

Your code is using client side certificates (nice, not often seen) so both server and client need to validate each other's certificates on connection establishment. It seems they are both failing, but we're only looking at your client code though.

Here are a few ideas:

1. Double check your certificates: Issuers, Subjects, Dates, SANs, etc.

2. Check that the hostName in optionsForClientTLS matches the name in the server certificate.

3. Use the latest Twisted release instead of trunk, if possible.
   Do the same for pyOpenSSL and other dependencies.

4. On the client side try using SSL4ClientEndpoint instead of connectSSL.
   I'm almost sure they behave differently regarding validation (could not quickly find
   docs on that, though: I've had your problem before and I think I addressed it this way).

   Instead of reactor.connectSSL(...) go for something like:

   ep = endpoints.SSL4ClientEndpoint(
       reactor,
       host=hostName,
       port=portNumber,
       sslContextFactory=ctx,
   )
   client = yield ep.connect(factory)

   For completeness, even though my client skeleton is mostly your client code with
   this diff, a quick test shows that my client also establishes the TLS connection
   if I do the reverse: replace SSL4ClientEndpoint with connectSSL in my code.

   This may not be the culprit, but I would try and see if anything changes.

5. On the server side I have the following Twisted code skeleton:

   dhFile = filepath.FilePath(...)
   dhParams = ssl.DiffieHellmanParameters.fromFile(dhFile)
   caCert = ssl.Certificate.loadPEM(...)
   privateCert = ssl.PrivateCertificate.loadPEM(...)
   cf = ssl.CertificateOptions(
       privateKey=privateCert.privateKey.original,
       certificate=privateCert.original,
       trustRoot=caCert,
       dhParameters=dhParams,
   )
   ep = endpoints.SSL4ServerEndpoint(
       reactor,
       port=...,
       sslContextFactory=cf,
   )
   f = protocol.Factory.forProtocol(...)
   ep.listen(f)
   reactor.run()

   Your code is obviously different, if based on the standard library's ssl module.
   If 1 to 4 don't produce results, this is a good candidate for needing some work.
   Can you share a minimal version of that? I'll be glad to take it for a spin.

6. Double check your certificates, again. Triple-check them if managed manually.


For completeness and reference:
- See http://twistedmatrix.com/documents/current/core/howto/ssl.html as a starting point
  Twisted TLS, containing useful information and working examples.
- My working test environment runs Linux with OpenSSL 1.0.1t.


Cheers,
--
exvito

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com<mailto:Twisted-Python at twistedmatrix.com>
https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171026/5aaef296/attachment-0002.html>

From ex.vitorino at gmail.com  Thu Oct 26 08:30:24 2017
From: ex.vitorino at gmail.com (ex vito)
Date: Thu, 26 Oct 2017 15:30:24 +0100
Subject: [Twisted-Python] twisted.internet.ssl
In-Reply-To: <CO2PR01MB1976BE0D264BFD8A0822523ECC450@CO2PR01MB1976.prod.exchangelabs.com>
References: <CO2PR01MB1976C7242B382393AA45F623CC440@CO2PR01MB1976.prod.exchangelabs.com>
 <4FAF7ED7-0C2B-4D11-B0D8-24B662270136@gmail.com>
 <CO2PR01MB1976BE0D264BFD8A0822523ECC450@CO2PR01MB1976.prod.exchangelabs.com>
Message-ID: <A596333F-9299-4910-944A-9B1031E2D601@gmail.com>

On 2017-10-26, at 14:59, Enoch W. <ixew at hotmail.com> wrote:

> Thanks exvito for your detailed response.
> Re 2 & 3: You're right on the nail :-)  See my previous email to Jason.
> Re 4: I can't use the high level Transport mechanism as I am using Twisted (most of the time) through another library layer (pymodbus).
> Re 5: My server is still using Python's bloated ThreadingTCPServer model. 
> Re 6: Right!

You are welcome.


> Bottom line, I suggested a change of argument name, from "ssl.optionsForClientTLS(hostName, ..." to "ssl.optionsForClientTLS(commonName, ..."

That would be misleading:

Keep in mind that the name validation will be performed against the server certificate's SANs (subject alternative name) entries, if they exist. More importantly, in the context of your suggestion: as far as I can tell, when SANs are present in the server certificate, not only will the name verification be performed against those, but the certificate's subject commonName will be ignored. IIRC, this is in line with an existing RFC recommendation (maybe 6125?).

Thus, hostName is a pretty good name and commonName wouldn't be as good. :)


Cheers,
--
exvito

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171026/5fe2b7db/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Oct 26 11:37:41 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 26 Oct 2017 10:37:41 -0700
Subject: [Twisted-Python] twisted.internet.ssl
In-Reply-To: <CO2PR01MB1976A13CC5DEFDB16C0C0AF2CC450@CO2PR01MB1976.prod.exchangelabs.com>
References: <CO2PR01MB1976C7242B382393AA45F623CC440@CO2PR01MB1976.prod.exchangelabs.com>
 <20171026051351.GA1686@arch-tinker.localdomain>
 <CO2PR01MB1976A13CC5DEFDB16C0C0AF2CC450@CO2PR01MB1976.prod.exchangelabs.com>
Message-ID: <0C851BE6-F47E-4AA0-BE64-6B80E676D9D8@twistedmatrix.com>



> On Oct 26, 2017, at 6:35 AM, Enoch W. <ixew at hotmail.com> wrote:
> 
> Thanks Jason,
> 
> With a more specific error message raised by github latest code [thanks!] the problem became clear.
> I suggest to change the documentation of 'optionsForClientTLS' -
> 
> from:
> ctx = ssl.optionsForClientTLS(hostName, trustRoot=root, clientCertificate=mycert)
> 
> to:
> ctx = ssl.optionsForClientTLS(commonName, trustRoot=root, clientCertificate=mycert)
> 
> That is, what this ctx (the contextFactory) really expects is the server's certificate commonName which often is, but not in my case, the server's hostName.
> 
> Interestingly, Python's standard ssl package does not verify this field.

It sounds like you somehow installed Twisted without the "service_identity" module; it only verifies commonName if it has no other choice.

When you install Twisted, be sure to install the `tls` extra: pip install twisted[tls].

-glyph


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171026/3333c695/attachment-0002.html>

From trac at twistedmatrix.com  Sun Oct 29 00:05:27 2017
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 29 Oct 2017 06:05:27 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1509257127.7.1065048839700733718@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20171029/be3d8345/attachment-0002.html>

