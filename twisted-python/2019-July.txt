From jaroslaw.fedewicz at gmail.com  Mon Jul  1 17:48:07 2019
From: jaroslaw.fedewicz at gmail.com (=?UTF-8?Q?Jaros=C5=82aw_Fedewicz?=)
Date: Tue, 2 Jul 2019 01:48:07 +0200
Subject: [Twisted-Python] Need some enlightenment on using web client
 properly, or maybe nudge a bug to get fixed
Message-ID: <CA+HdgOXTOSxzFYEZ-5Ar07G_V+rveaPMBRuqW7u6txdkwqY8KQ@mail.gmail.com>

I have written a simple service which takes data from network, massages it
until it's useful enough, and sends the results out periodically via HTTP
to an API.

It all works for a while, then I get an error like this approximately 40
minutes into the service's uptime:

ResponseNeverReceived: [<twisted.python.failure.Failure
OpenSSL.SSL.ZeroReturnError: >]


Then a couple more like this:

ResponseNeverReceived: [<twisted.python.failure.Failure
twisted.internet.error.ConnectionLost: Connection to the other side was
lost in a non-clean fashion: Connection lost.>]


Then it ends with

TimeoutError: User timeout caused connection failure.


Then every request results in the same TimeoutError. I don't know if using
HTTPS important in this case.

Restarting the whole service, of course, makes the problem go for a while.
The other side is the Slack API, so I rather assume it's not very much to
blame, it can be demonstrated to work rather reliably, all its criticisms
notwithstanding.

I cannot yet tell if this bug is a function of uptime, or the number of
requests made.

I have tried to work around the problem by discarding the agent object, and
using an HTTPConnectionPool with persistent=False, but it didn't help at
all. I think it made the problem worse because the framework seems to refer
to some objects the Agent creates, and the process becomes a CPU hogs in a
couple hours (with the TimeoutErrors still happening all the time).

The closest I've got on the internets which describes a similar problem,
apart from people complaining on StackOverflow about precisely this to
happen when they are using Scrapy, is this blog post from almost a decade
ago:
http://www.chris-wong.net/twisted-web-framework-user-timeout-caused-connection-failure/
.

There could be a small chance I'm holding it wrong(tm), but maybe there
exists a ticket, just worded differently, which could help me get to the
bottom of it.

-- 
Yaroslav Fedevych
IT Philosopher
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190702/2ffe0fe0/attachment.html>

From thomas.westfeld at currenta.de  Thu Jul  4 07:39:50 2019
From: thomas.westfeld at currenta.de (Thomas Westfeld)
Date: Thu, 4 Jul 2019 13:39:50 +0000
Subject: [Twisted-Python] Getting nice logging outputs in py.test
Message-ID: <3ff1221068a843e2888caabbb10e31ec@BYEX35.de.bayer.cnb>

Dear all,

I am having an issue with logging of my Twisted application. I am using the new twisted.logger framework. The output produced by twist or twistd when runnning my plugin is nice.

However when running a test suite using py.test I only get this as an output to stdout:

{"log_io": "\"127.0.0.1\" - - [04/Jul/2019:13:12:04 +0000] \"GET /index HTTP/1.1\" 401 - \"-\" \"python-requests/2.22.0\"", "log_logger": {"unpersistable": true}, "log_level": {"name": "info", "__class_uuid__": "02e59486-f24d-46ad-8224-3acdf2a5732a"}, "log_namespace": "twisted.python.log", "log_source": null, "log_format": "{log_io}", "log_time": 1562245925.0769854, "log_flattened": {"log_io!s:": "\"127.0.0.1\" - - [04/Jul/2019:13:12:04 +0000] \"GET /index HTTP/1.1\" 401 - \"-\" \"python-requests/2.22.0\"", "log_io!:": "\"127.0.0.1\" - - [04/Jul/2019:13:12:04 +0000] \"GET /index HTTP/1.1\" 401 - \"-\" \"python-requests/2.22.0\""}}

I tried to initialize a log observer like this, to get it better formatted:

globalLogBeginner.beginLoggingTo([textFileLogObserver(sys.stdout)])

But it does not work. I did this in a conftest.py file, but it did not produce the desired input.

Any idea how I can produce a nice log output to stdout?

Thanks in advance,
Thomas

From chris at withers.org  Thu Jul  4 11:50:47 2019
From: chris at withers.org (Chris Withers)
Date: Thu, 4 Jul 2019 18:50:47 +0100
Subject: [Twisted-Python] Getting nice logging outputs in py.test
In-Reply-To: <3ff1221068a843e2888caabbb10e31ec@BYEX35.de.bayer.cnb>
References: <3ff1221068a843e2888caabbb10e31ec@BYEX35.de.bayer.cnb>
Message-ID: <5e4e19d4-33f6-d48f-3fe8-2853b7fddec0@withers.org>

On 04/07/2019 14:39, Thomas Westfeld wrote:
> Dear all,
> 
> I am having an issue with logging of my Twisted application. I am using the new twisted.logger framework. The output produced by twist or twistd when runnning my plugin is nice.
> 
> However when running a test suite using py.test I only get this as an output to stdout:

How are you running the reactor in your pytest suites? I've not found a 
sane way to do this and so would recommend sticking with trial, crufty 
and old though it feels...

cheers,

Chris


From exarkun at twistedmatrix.com  Thu Jul  4 14:43:02 2019
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Thu, 4 Jul 2019 16:43:02 -0400
Subject: [Twisted-Python] Getting nice logging outputs in py.test
In-Reply-To: <5e4e19d4-33f6-d48f-3fe8-2853b7fddec0@withers.org>
References: <3ff1221068a843e2888caabbb10e31ec@BYEX35.de.bayer.cnb>
 <5e4e19d4-33f6-d48f-3fe8-2853b7fddec0@withers.org>
Message-ID: <CAEeXt4O8Jy+4yrNgQTjwcOLfKVCWhasnvwVaqWv6ER27o72j0g@mail.gmail.com>

On Thu, Jul 4, 2019 at 1:50 PM Chris Withers <chris at withers.org> wrote:

> On 04/07/2019 14:39, Thomas Westfeld wrote:
> > Dear all,
> >
> > I am having an issue with logging of my Twisted application. I am using
> the new twisted.logger framework. The output produced by twist or twistd
> when runnning my plugin is nice.
> >
> > However when running a test suite using py.test I only get this as an
> output to stdout:
>

Are you letting pytest eat your stdout?  That's the default behavior, isn't
it?


>
> How are you running the reactor in your pytest suites? I've not found a
> sane way to do this and so would recommend sticking with trial, crufty
> and old though it feels...
>
>
What feels crufty and old about trial?  And why is "old" a negative?

Jean-Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190704/606c9ef2/attachment.html>

From chris at withers.org  Thu Jul  4 23:55:30 2019
From: chris at withers.org (Chris Withers)
Date: Fri, 5 Jul 2019 06:55:30 +0100
Subject: [Twisted-Python] Getting nice logging outputs in py.test
In-Reply-To: <CAEeXt4O8Jy+4yrNgQTjwcOLfKVCWhasnvwVaqWv6ER27o72j0g@mail.gmail.com>
References: <3ff1221068a843e2888caabbb10e31ec@BYEX35.de.bayer.cnb>
 <5e4e19d4-33f6-d48f-3fe8-2853b7fddec0@withers.org>
 <CAEeXt4O8Jy+4yrNgQTjwcOLfKVCWhasnvwVaqWv6ER27o72j0g@mail.gmail.com>
Message-ID: <90638d10-494f-aec0-3335-02aba606c78b@withers.org>

On 04/07/2019 21:43, Jean-Paul Calderone wrote:
>     How are you running the reactor in your pytest suites? I've not found a
>     sane way to do this and so would recommend sticking with trial, crufty
>     and old though it feels...
> 
> 
> What feels crufty and old about trial?  And why is "old" a negative?

"old" is negative here because things have moved on and trial hasn't.

pytest feels like it's become the python standard now, so there's that.
It's rich ecosystem of plugins is another one.
The reliance on subclassing TestCase is nother.
No fixtures.
Poor support in pycharm for trial versus first class support for pytest.

That's just off the top of my head, use pytest for a year or two and 
coming back to trial may well feel the same.

cheers,

Chris


From hawkowl at atleastfornow.net  Fri Jul  5 03:41:59 2019
From: hawkowl at atleastfornow.net (Amber Brown)
Date: Fri, 5 Jul 2019 19:41:59 +1000
Subject: [Twisted-Python] Getting nice logging outputs in py.test
In-Reply-To: <90638d10-494f-aec0-3335-02aba606c78b@withers.org>
References: <3ff1221068a843e2888caabbb10e31ec@BYEX35.de.bayer.cnb>
 <5e4e19d4-33f6-d48f-3fe8-2853b7fddec0@withers.org>
 <CAEeXt4O8Jy+4yrNgQTjwcOLfKVCWhasnvwVaqWv6ER27o72j0g@mail.gmail.com>
 <90638d10-494f-aec0-3335-02aba606c78b@withers.org>
Message-ID: <a1d0b60c-0c90-db45-28fe-84bfa1c6c04e@atleastfornow.net>

On 5/7/19 3:55 pm, Chris Withers wrote:
> On 04/07/2019 21:43, Jean-Paul Calderone wrote:
>>     How are you running the reactor in your pytest suites? I've not 
>> found a
>>     sane way to do this and so would recommend sticking with trial, 
>> crufty
>>     and old though it feels...
>>
>>
>> What feels crufty and old about trial?  And why is "old" a negative?
>
> "old" is negative here because things have moved on and trial hasn't.
>
> pytest feels like it's become the python standard now, so there's that.
> It's rich ecosystem of plugins is another one.
> The reliance on subclassing TestCase is nother.
> No fixtures.
> Poor support in pycharm for trial versus first class support for pytest.
>
> That's just off the top of my head, use pytest for a year or two and 
> coming back to trial may well feel the same.
>
> cheers,
>
> Chris

To note, Trial still is the only Python test runner which reliably finds 
all of Twisted's tests, though ;)

- Amber


From thomas.westfeld at currenta.de  Fri Jul  5 04:27:29 2019
From: thomas.westfeld at currenta.de (Thomas Westfeld)
Date: Fri, 5 Jul 2019 10:27:29 +0000
Subject: [Twisted-Python] Getting nice logging outputs in py.test
In-Reply-To: <5e4e19d4-33f6-d48f-3fe8-2853b7fddec0@withers.org>
References: <3ff1221068a843e2888caabbb10e31ec@BYEX35.de.bayer.cnb>
 <5e4e19d4-33f6-d48f-3fe8-2853b7fddec0@withers.org>
Message-ID: <7b0d006cbe2146918258b352ea780819@BYEX35.de.bayer.cnb>

>> Dear all,
>>
>> I am having an issue with logging of my Twisted application. I am using the new
>twisted.logger framework. The output produced by twist or twistd when runnning my
>plugin is nice.
>>
>> However when running a test suite using py.test I only get this as an output to
>stdout:
>
>How are you running the reactor in your pytest suites? I've not found a
>sane way to do this and so would recommend sticking with trial, crufty
>and old though it feels...

Well actually I do not. I use the subprocess module to start the server using twist and then use requests in the tests to test the HTML server and compare the results with the expected results.

And yes py.test eats stdout but it is great as I need a good looking html test report which can be also customized and py.test gives me just this.

Sounds like there is no easy way of configuring a nice stdout log...

From hawkowl at atleastfornow.net  Fri Jul  5 04:47:29 2019
From: hawkowl at atleastfornow.net (Amber Brown)
Date: Fri, 5 Jul 2019 20:47:29 +1000
Subject: [Twisted-Python] Getting nice logging outputs in py.test
In-Reply-To: <7b0d006cbe2146918258b352ea780819@BYEX35.de.bayer.cnb>
References: <3ff1221068a843e2888caabbb10e31ec@BYEX35.de.bayer.cnb>
 <5e4e19d4-33f6-d48f-3fe8-2853b7fddec0@withers.org>
 <7b0d006cbe2146918258b352ea780819@BYEX35.de.bayer.cnb>
Message-ID: <79a2f71a-9e38-4fe5-0f8a-96e5052d91ed@atleastfornow.net>

On 5/7/19 8:27 pm, Thomas Westfeld wrote:
>>> Dear all,
>>>
>>> I am having an issue with logging of my Twisted application. I am using the new
>> twisted.logger framework. The output produced by twist or twistd when runnning my
>> plugin is nice.
>>> However when running a test suite using py.test I only get this as an output to
>> stdout:
>>
>> How are you running the reactor in your pytest suites? I've not found a
>> sane way to do this and so would recommend sticking with trial, crufty
>> and old though it feels...
> Well actually I do not. I use the subprocess module to start the server using twist and then use requests in the tests to test the HTML server and compare the results with the expected results.
>
> And yes py.test eats stdout but it is great as I need a good looking html test report which can be also customized and py.test gives me just this.
>
> Sounds like there is no easy way of configuring a nice stdout log...

Oh, that's why.

If twist detects something that isn't a terminal, it outputs JSON 
because it's not a human looking at it, which is easier for logging 
systems to consume than straight text.

You can pass `--log-format=text` as a command line argument to twist to 
override this.

- Amber


From exarkun at twistedmatrix.com  Fri Jul  5 05:24:08 2019
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Fri, 5 Jul 2019 07:24:08 -0400
Subject: [Twisted-Python] Getting nice logging outputs in py.test
In-Reply-To: <90638d10-494f-aec0-3335-02aba606c78b@withers.org>
References: <3ff1221068a843e2888caabbb10e31ec@BYEX35.de.bayer.cnb>
 <5e4e19d4-33f6-d48f-3fe8-2853b7fddec0@withers.org>
 <CAEeXt4O8Jy+4yrNgQTjwcOLfKVCWhasnvwVaqWv6ER27o72j0g@mail.gmail.com>
 <90638d10-494f-aec0-3335-02aba606c78b@withers.org>
Message-ID: <CAEeXt4O_Wiu1X4XSmXn0CFogvG_B2SofjgiSGdJWVCtuR6R7Hg@mail.gmail.com>

On Fri, Jul 5, 2019 at 1:55 AM Chris Withers <chris at withers.org> wrote:

> On 04/07/2019 21:43, Jean-Paul Calderone wrote:
> >     How are you running the reactor in your pytest suites? I've not
> found a
> >     sane way to do this and so would recommend sticking with trial,
> crufty
> >     and old though it feels...
> >
> >
> > What feels crufty and old about trial?  And why is "old" a negative?
>
> "old" is negative here because things have moved on and trial hasn't.
>
> pytest feels like it's become the python standard now, so there's that.
> It's rich ecosystem of plugins is another one.
> The reliance on subclassing TestCase is nother.
> No fixtures.
>

Just for anyone who's interested, if you use testtools TestCase then you
get fixtures and a load of other nice features.  This is what I almost
always do for new test development now.  Interoperability between different
libraries is one of the few nice things that comes from xUnit so trial can
load and run these tests.

Poor support in pycharm for trial versus first class support for pytest.
>
> That's just off the top of my head, use pytest for a year or two and
> coming back to trial may well feel the same.
>

Don't assume I haven't used pytest just because I don't immediately and
unquestioningly express complete agreement with you. :)

Anyhow, I am less interested in trying to convince you you're wrong than I
am in learning from your experience - hence the request to expand on your
assessment.

Jean-Paul


>
> cheers,
>
> Chris
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190705/ef115793/attachment-0001.html>

From thomas.westfeld at currenta.de  Fri Jul  5 06:09:45 2019
From: thomas.westfeld at currenta.de (Thomas Westfeld)
Date: Fri, 5 Jul 2019 12:09:45 +0000
Subject: [Twisted-Python] Getting nice logging outputs in py.test
In-Reply-To: <79a2f71a-9e38-4fe5-0f8a-96e5052d91ed@atleastfornow.net>
References: <3ff1221068a843e2888caabbb10e31ec@BYEX35.de.bayer.cnb>
 <5e4e19d4-33f6-d48f-3fe8-2853b7fddec0@withers.org>
 <7b0d006cbe2146918258b352ea780819@BYEX35.de.bayer.cnb>
 <79a2f71a-9e38-4fe5-0f8a-96e5052d91ed@atleastfornow.net>
Message-ID: <2a7779cf5b724601985148c4e8423910@BYEX35.de.bayer.cnb>

>-----Original Message-----
>From: Twisted-Python [mailto:twisted-python-bounces at twistedmatrix.com] On
>Behalf Of Amber Brown
>Sent: Friday, July 05, 2019 12:47 PM
>To: twisted-python at twistedmatrix.com
>Subject: Re: [Twisted-Python] Getting nice logging outputs in py.test
>
>On 5/7/19 8:27 pm, Thomas Westfeld wrote:
>>>> Dear all,
>>>>
>>>> I am having an issue with logging of my Twisted application. I am using 
>>>> the new
>>> twisted.logger framework. The output produced by twist or twistd when 
>>> runnning
>my
>>> plugin is nice.
>>>> However when running a test suite using py.test I only get this as an 
>>>> output to
>>> stdout:
>>>
>>> How are you running the reactor in your pytest suites? I've not found a
>>> sane way to do this and so would recommend sticking with trial, crufty
>>> and old though it feels...
>> Well actually I do not. I use the subprocess module to start the server 
>> using twist
>and then use requests in the tests to test the HTML server and compare the 
>results
>with the expected results.
>>
>> And yes py.test eats stdout but it is great as I need a good looking html 
>> test
>report which can be also customized and py.test gives me just this.
>>
>> Sounds like there is no easy way of configuring a nice stdout log...
>
>Oh, that's why.
>
>If twist detects something that isn't a terminal, it outputs JSON
>because it's not a human looking at it, which is easier for logging
>systems to consume than straight text.
>
>You can pass `--log-format=text` as a command line argument to twist to
>override this.
>

This worked fine. Thanks alot!

>- Amber
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 6137 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20190705/022a0cf5/attachment.bin>

From twisted-ml at notafile.com  Fri Jul  5 10:00:31 2019
From: twisted-ml at notafile.com (notafile)
Date: Fri, 05 Jul 2019 18:00:31 +0200
Subject: [Twisted-Python] IDelayedCall.reset does not work with
 AsyncIOReactor
Message-ID: <de7c9737-c138-4a76-b134-74943caeadcf@www.fastmail.com>

Hello,

 I thought I'd follow the commenters recommendations and crosspost on the mailing list after all.

When switching to AsyncIOReactor a while back, we discovered that calling .reset() on a delayed call was just a noop when using that reactor. We've since worked around it, but it would be very neat to see this fixed in twisted directly. Exarkun on IRC mentioned that this was a very obvious mistake, but I'm personally not really familiar enough with twisted internals to write a patch for it.

The relevant ticket is https://twistedmatrix.com/trac/ticket/9611.

 - nota


From trac at twistedmatrix.com  Sun Jul  7 00:05:25 2019
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 07 Jul 2019 06:05:25 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1562479525.7.2790840159774009263@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190707/bf629edd/attachment.html>

From thomas.westfeld at currenta.de  Tue Jul  9 02:11:49 2019
From: thomas.westfeld at currenta.de (Thomas Westfeld)
Date: Tue, 9 Jul 2019 08:11:49 +0000
Subject: [Twisted-Python] New release of ldaptor
Message-ID: <ed592e1269b0444c8b63737c20c8d546@BYEX35.de.bayer.cnb>

Dear all,

I would love to see a new release of ldaptor, which incorporates the recent compatibility fixes with python 3.

Furthermore I have submitted a new pull request for ticket #9596 and revised my pull request about documentation fixes #9243.

Best regards,
Thomas

From twm at freecog.net  Tue Jul  9 15:04:11 2019
From: twm at freecog.net (Tom Most)
Date: Tue, 09 Jul 2019 14:04:11 -0700
Subject: [Twisted-Python] 
 =?utf-8?q?Twisted_tips_for_designing_highly_con?=
 =?utf-8?q?current_twisted_REST_API?=
In-Reply-To: <CAJuJkHN6ODsRZwBz4THpY23ZkcaMZ9hpnNCwDcQx4w94bHuOZA@mail.gmail.com>
References: <CAJuJkHMZPUu0gNi=XcFyUNpGLrsJPMifgb24_14i0e=caa1hnA@mail.gmail.com>
 <CAJuJkHN6ODsRZwBz4THpY23ZkcaMZ9hpnNCwDcQx4w94bHuOZA@mail.gmail.com>
Message-ID: <e4757021-5ad8-4b4a-9eb2-120fd3a5de2f@www.fastmail.com>

Hi,

There are likely a few things wrong here.

1. You are using requests.get() to make a HTTP request. This is blocking. You might consider using Twisted's Agent <https://twistedmatrix.com/documents/current/api/twisted.web.client.Agent.html> API instead (or treq <https://github.com/twisted/treq>, which puts a requests-like API atop Agent).

2. As you add load your long computations will be queued. deferToThread <https://twistedmatrix.com/documents/current/api/twisted.internet.threads.html#deferToThread> dispatches the long_computation to the reactor's default thread pool <https://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.IReactorThreads.html>. This poll has a maximum size and will queue work once it has spun up that many threads.

Rather than using deferToThread (which we should really deprecate as it doesn't accept a reactor parameter...) I'd recommend instantiating your own ThreadPool <https://twistedmatrix.com/documents/current/api/twisted.python.threadpool.ThreadPool.html> and using deferToThreadPool <https://twistedmatrix.com/documents/current/api/twisted.internet.threads.html#deferToThreadPool>. The reactor's own thread pool is really for DNS resolution. You risk deadlocks in a system that ThreadPoolThreadPoolThreadPool

3. The specifics of what long_computation are also important. If it doesn't release the GIL you won't get real parallelism (this is a Python thing, not a Twisted thing). See this recent thread on the topic <https://twistedmatrix.com/pipermail/twisted-python/2019-June/032371.html>.

Though the mechanisms differ athis thread on the topicny of the above would cause the response time to increase as you add load.

Good luck,
Tom

On Tue, Jun 25, 2019, at 11:51 PM, Waqar Khan wrote:
> 
> Sorry I had a typo in twisted program
> 
> *@defer.inlinecallbacks*
> *def **long_computation*(rec_type, data)*:
**     **# some long computation
**     *defer.returnValue(recs)**
> @defer.inlinecallbacks
> def fetch_data(user_id):
> r *= yield*json.*loads*(requests.*get*('url/to/fetch/%s'*%**user_id*).text)
>  defer.returnValue(r)
> 
> 
> @defer.inlinecallbacks
> def fetch_recs(user_id):
>  data = yield fetch_data(user_id)
>  recs = {}
>  for stype in similar_types:
> *d = defer.ToThread(long_computation, *(stype, data)) // typo was here*
>  rec = yield d
>  recs[stype] = rec
>  defer.returnValue(recs)
> 
> 
> On Tue, Jun 25, 2019 at 11:48 PM Waqar Khan <wk80333 at gmail.com> wrote:
>> Hello folks,
>>  I recently stumbled upon twisted and was wondering if it could suit my needs. On one hand, I want to use python but on another hand there are all these scalability concerns with this language so, I though I would pick the brains of the community. So.. a flask based app would look something like this.
>> 
>> similar_types *= *['foo', 'bar', 'baz']
>> 
>> 
>> *def **long_computation*(rec_type)*:
**     **# some long computation
**     **return *recs
>> 
>> *@app.route*('/fetch_similar_users/<user_id>'
>> *def **fetch_similar_users*(*user_id*)
>>         r *= *json.*loads*(requests.*get*('url/to/fetch/%s'*%**user_id*).text)
>>         recs *= *{}
>>         *for *stype *in *similar_types*:
**             *recs[stype] *= **long_computation*(rec_type)
>>        *return *recs
>> 
>> 
>> Now, I tried to "twistify" but it failed.
>> 
>> *@defer.inlinecallbacks*
>> *def **long_computation*(rec_type)*:
**     **# some long computation
**     *defer.returnValue(recs)**
>> @defer.inlinecallbacks
>> def fetch_data(user_id):
>> r *= yield*json.*loads*(requests.*get*('url/to/fetch/%s'*%**user_id*).text)
>>  defer.returnValue(r)
>> 
>> 
>> @defer.inlinecallbacks
>> def fetch_recs(user_id):
>>  data = yield fetch_data(user_id)
>>  recs = {}
>>  for stype in similar_types:
>>  d = defer.ToThread(fetch_data, *(stype))
>>  rec = yield d
>>  recs[stype] = rec
>>  defer.returnValue(recs)
>> 
>> 
>> 
>> I wrapped all the above in twisted render_Get method.. but then I did a load test with locust (https://docs.locust.io/en/latest/what-is-locust.html) framework.
>> It choked. As the time progressed, the response time increased.
>> I am guessing, things are still blocking. 
>> 
>> Can you please help me look into the right place. Why exactly am I seeing increase in response time as the time progresses. I am guessing things are still working in "blocking" fashion but i thought the above should run things in async.
>> Thanks
>> 
>> 
>> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190709/4bab79b0/attachment.html>

From glyph at twistedmatrix.com  Thu Jul 11 01:19:14 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 11 Jul 2019 00:19:14 -0700
Subject: [Twisted-Python] Need some enlightenment on using web client
 properly, or maybe nudge a bug to get fixed
In-Reply-To: <CA+HdgOXTOSxzFYEZ-5Ar07G_V+rveaPMBRuqW7u6txdkwqY8KQ@mail.gmail.com>
References: <CA+HdgOXTOSxzFYEZ-5Ar07G_V+rveaPMBRuqW7u6txdkwqY8KQ@mail.gmail.com>
Message-ID: <43260BF0-3DA9-4833-9015-78C27BB599CF@twistedmatrix.com>

Hi Jarosław!

> On Jul 1, 2019, at 4:48 PM, Jarosław Fedewicz <jaroslaw.fedewicz at gmail.com> wrote:
> 
> I have written a simple service which takes data from network, massages it until it's useful enough, and sends the results out periodically via HTTP to an API.

A reasonable start :-).

> It all works for a while, then I get an error like this approximately 40 minutes into the service's uptime:
> 
> ResponseNeverReceived: [<twisted.python.failure.Failure OpenSSL.SSL.ZeroReturnError: >]
> 
> Then a couple more like this:
> 
> ResponseNeverReceived: [<twisted.python.failure.Failure twisted.internet.error.ConnectionLost: Connection to the other side was lost in a non-clean fashion: Connection lost.>]
> 
> Then it ends with
> 
> TimeoutError: User timeout caused connection failure.
> 
> Then every request results in the same TimeoutError. I don't know if using HTTPS important in this case.

I'm pretty sure the presence of an OpenSSL.SSL error indeed means that HTTPS is important.

> Restarting the whole service, of course, makes the problem go for a while. The other side is the Slack API, so I rather assume it's not very much to blame, it can be demonstrated to work rather reliably, all its criticisms notwithstanding.

It does seem likely that the clustering of errors you're seeing are a local problem with Twisted.

> I cannot yet tell if this bug is a function of uptime, or the number of requests made.

My personal guess is that it has something to do with the number of the TCP connections; or, specifically, the number of pyOpenSSL 'Connection' objects.

> I have tried to work around the problem by discarding the agent object, and using an HTTPConnectionPool with persistent=False, but it didn't help at all. I think it made the problem worse because the framework seems to refer to some objects the Agent creates, and the process becomes a CPU hogs in a couple hours (with the TimeoutErrors still happening all the time).

I have a slight suspicion that the thing that is leaking between connections here is the pyOpenSSL "Context" object.  We recently implemented an optimization which shares the Context object among multiple Connection objects that reference the same host.  What version of Twisted area you using, and what version of OpenSSL, pyOpenSSL, and Cryptography?

I'm curious if you reverse that optimization, if it would make any different to your use-case.

> The closest I've got on the internets which describes a similar problem, apart from people complaining on StackOverflow about precisely this to happen when they are using Scrapy, is this blog post from almost a decade ago: http://www.chris-wong.net/twisted-web-framework-user-timeout-caused-connection-failure/ <http://www.chris-wong.net/twisted-web-framework-user-timeout-caused-connection-failure/>. 

This definitely seems like a bug, if it's occurring in multiple places.

> There could be a small chance I'm holding it wrong(tm), but maybe there exists a ticket, just worded differently, which could help me get to the bottom of it.

I don't think that any open tickets describe your precise issue.  So please do open one.  And if possible, can you minimize a proof of concept?  Some example code would go a long way to helping to isolate this.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190711/080ec3f1/attachment.html>

From barry.scott at forcepoint.com  Thu Jul 11 02:45:49 2019
From: barry.scott at forcepoint.com (Scott, Barry)
Date: Thu, 11 Jul 2019 08:45:49 +0000
Subject: [Twisted-Python] Twisted tips for designing highly concurrent
 twisted REST API
In-Reply-To: <e4757021-5ad8-4b4a-9eb2-120fd3a5de2f@www.fastmail.com>
References: <CAJuJkHMZPUu0gNi=XcFyUNpGLrsJPMifgb24_14i0e=caa1hnA@mail.gmail.com>
 <CAJuJkHN6ODsRZwBz4THpY23ZkcaMZ9hpnNCwDcQx4w94bHuOZA@mail.gmail.com>
 <e4757021-5ad8-4b4a-9eb2-120fd3a5de2f@www.fastmail.com>
Message-ID: <3489907.MZb2G9KHjS@barry-scott-desktop>

On Tuesday, 9 July 2019 22:04:11 BST Tom Most wrote:

...snip...

> The reactor's own thread pool is really for DNS
> resolution.

Is that still true in the default case? We are use the twisted code that talks 
to DNS servers as the threaded resolver adds too much latency.

> You risk deadlocks in a system that
> ThreadPoolThreadPoolThreadPool
> 
> 3. The specifics of what long_computation are also important. If it doesn't
> release the GIL you won't get real parallelism (this is a Python thing, not
> a Twisted thing). See this recent thread on the topic
> <https://twistedmatrix.com/pipermail/twisted-python/2019-June/032371.html>.

We pass out the computational work to other processes over unix-domain-sockets 
to avoid the GIL issues.

> 
> Though the mechanisms differ athis thread on the topicny of the above would
> cause the response time to increase as you add load.
> 
> Good luck,
> Tom

Barry




From contact at evilham.com  Thu Jul 11 03:33:49 2019
From: contact at evilham.com (Evilham)
Date: Thu, 11 Jul 2019 11:33:49 +0200
Subject: [Twisted-Python] New release of ldaptor
In-Reply-To: <ed592e1269b0444c8b63737c20c8d546@BYEX35.de.bayer.cnb>
References: <ed592e1269b0444c8b63737c20c8d546@BYEX35.de.bayer.cnb>
Message-ID: <925fb3b2-e406-47e3-a0d4-9e70f47b0be0@skuld.camilion.eu>

On dt., jul. 09 2019, Thomas Westfeld wrote:

> Dear all,
>
> I would love to see a new release of ldaptor, which incorporates 
> the recent compatibility fixes with python 3.
>
> Furthermore I have submitted a new pull request for ticket #9596 
> and revised my pull request about documentation fixes #9243.
>
> Best regards,
> Thomas

This would be awesome indeed.

I keep going even if maybe only tangentially related: I want to 
stop deploying my ugly hacks to klein :-D [1].
[1]: https://github.com/twisted/klein/issues/96

The reason why I raise that is because IIUC, ldaptor and klein 
have the same kind of relationship to the Twisted project?

Is there anything specific that can be done to help with the 
releases of these non-core but very related and useful components?
--
Evilham


From jaroslaw.fedewicz at gmail.com  Thu Jul 11 04:00:33 2019
From: jaroslaw.fedewicz at gmail.com (=?UTF-8?Q?Jaros=C5=82aw_Fedewicz?=)
Date: Thu, 11 Jul 2019 12:00:33 +0200
Subject: [Twisted-Python] Need some enlightenment on using web client
 properly, or maybe nudge a bug to get fixed
In-Reply-To: <43260BF0-3DA9-4833-9015-78C27BB599CF@twistedmatrix.com>
References: <CA+HdgOXTOSxzFYEZ-5Ar07G_V+rveaPMBRuqW7u6txdkwqY8KQ@mail.gmail.com>
 <43260BF0-3DA9-4833-9015-78C27BB599CF@twistedmatrix.com>
Message-ID: <CA+HdgOVtXxbyfR62Crj0YBCfvuy-NeV7v__UdUGxGzwpsT-=xg@mail.gmail.com>

So far, I tried to minimize a test case, but it seems like it's really
picky about what environment it's running in. One of those cases where "it
works on my machine", I suppose. The versions are as follows:

cryptography==2.7
pyOpenSSL==19.0.0
asn1crypto==0.24.0
pyasn1==0.4.5
pyasn1-modules==0.2.5
Twisted==19.2.1

The target machine is running Xenial, so openssl 1.0.0g.

My local machine runs Fedora 30, thus openssl 1.1.1c.

Is there a neat way to list all pyOpenSSL objects in a running Twisted
program? Or maybe TCPConnection objects, since those might hook to the
zope.interface machinery?

On Thu, Jul 11, 2019 at 9:20 AM Glyph <glyph at twistedmatrix.com> wrote:

> Hi Jarosław!
>
> On Jul 1, 2019, at 4:48 PM, Jarosław Fedewicz <jaroslaw.fedewicz at gmail.com>
> wrote:
>
> I have written a simple service which takes data from network, massages it
> until it's useful enough, and sends the results out periodically via HTTP
> to an API.
>
>
> A reasonable start :-).
>
> It all works for a while, then I get an error like this approximately 40
> minutes into the service's uptime:
>
> ResponseNeverReceived: [<twisted.python.failure.Failure
> OpenSSL.SSL.ZeroReturnError: >]
>
>
> Then a couple more like this:
>
> ResponseNeverReceived: [<twisted.python.failure.Failure
> twisted.internet.error.ConnectionLost: Connection to the other side was
> lost in a non-clean fashion: Connection lost.>]
>
>
> Then it ends with
>
> TimeoutError: User timeout caused connection failure.
>
>
> Then every request results in the same TimeoutError. I don't know if using
> HTTPS important in this case.
>
>
> I'm pretty sure the presence of an OpenSSL.SSL error indeed means that
> HTTPS is important.
>
> Restarting the whole service, of course, makes the problem go for a while.
> The other side is the Slack API, so I rather assume it's not very much to
> blame, it can be demonstrated to work rather reliably, all its criticisms
> notwithstanding.
>
>
> It does seem likely that the clustering of errors you're seeing are a
> local problem with Twisted.
>
> I cannot yet tell if this bug is a function of uptime, or the number of
> requests made.
>
>
> My personal guess is that it has something to do with the number of the
> TCP connections; or, specifically, the number of pyOpenSSL 'Connection'
> objects.
>
> I have tried to work around the problem by discarding the agent object,
> and using an HTTPConnectionPool with persistent=False, but it didn't help
> at all. I think it made the problem worse because the framework seems to
> refer to some objects the Agent creates, and the process becomes a CPU hogs
> in a couple hours (with the TimeoutErrors still happening all the time).
>
>
> I have a slight suspicion that the thing that is leaking between
> connections here is the pyOpenSSL "Context" object.  We recently
> implemented an optimization which shares the Context object among multiple
> Connection objects that reference the same host.  What version of Twisted
> area you using, and what version of OpenSSL, pyOpenSSL, and Cryptography?
>
> I'm curious if you reverse that optimization, if it would make any
> different to your use-case.
>
> The closest I've got on the internets which describes a similar problem,
> apart from people complaining on StackOverflow about precisely this to
> happen when they are using Scrapy, is this blog post from almost a decade
> ago:
> http://www.chris-wong.net/twisted-web-framework-user-timeout-caused-connection-failure/
> .
>
>
> This definitely seems like a bug, if it's occurring in multiple places.
>
> There could be a small chance I'm holding it wrong(tm), but maybe there
> exists a ticket, just worded differently, which could help me get to the
> bottom of it.
>
>
> I don't think that any open tickets describe your precise issue.  So
> please do open one.  And if possible, can you minimize a proof of concept?
> Some example code would go a long way to helping to isolate this.
>
> -glyph
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


-- 
Yaroslav Fedevych
IT Philosopher
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190711/6eb98237/attachment-0001.html>

From maarten at treewalker.org  Thu Jul 11 04:19:10 2019
From: maarten at treewalker.org (Maarten ter Huurne)
Date: Thu, 11 Jul 2019 12:19:10 +0200
Subject: [Twisted-Python] Need some enlightenment on using web client
 properly, or maybe nudge a bug to get fixed
In-Reply-To: <CA+HdgOVtXxbyfR62Crj0YBCfvuy-NeV7v__UdUGxGzwpsT-=xg@mail.gmail.com>
References: <CA+HdgOXTOSxzFYEZ-5Ar07G_V+rveaPMBRuqW7u6txdkwqY8KQ@mail.gmail.com>
 <43260BF0-3DA9-4833-9015-78C27BB599CF@twistedmatrix.com>
 <CA+HdgOVtXxbyfR62Crj0YBCfvuy-NeV7v__UdUGxGzwpsT-=xg@mail.gmail.com>
Message-ID: <12310093.hddBGRg2eU@hyperion>

On Thursday, 11 July 2019 12:00:33 CEST Jarosław Fedewicz wrote:

> Is there a neat way to list all pyOpenSSL objects in a running Twisted
> program? Or maybe TCPConnection objects, since those might hook to
> the zope.interface machinery?

Not specific to Twisted, but you can get a list of all objects tracked 
by the garbage collector using "gc.get_objects()" and then filter that 
by class.

Bye,
		Maarten




From barry.scott at forcepoint.com  Thu Jul 11 10:39:48 2019
From: barry.scott at forcepoint.com (Scott, Barry)
Date: Thu, 11 Jul 2019 16:39:48 +0000
Subject: [Twisted-Python] Need some enlightenment on using web client
 properly, or maybe nudge a bug to get fixed
In-Reply-To: <CA+HdgOVtXxbyfR62Crj0YBCfvuy-NeV7v__UdUGxGzwpsT-=xg@mail.gmail.com>
References: <CA+HdgOXTOSxzFYEZ-5Ar07G_V+rveaPMBRuqW7u6txdkwqY8KQ@mail.gmail.com>
 <43260BF0-3DA9-4833-9015-78C27BB599CF@twistedmatrix.com>
 <CA+HdgOVtXxbyfR62Crj0YBCfvuy-NeV7v__UdUGxGzwpsT-=xg@mail.gmail.com>
Message-ID: <1732319.jgNvhDyA7E@barry-scott-desktop>

On Thursday, 11 July 2019 11:00:33 BST Jarosław Fedewicz wrote:
> So far, I tried to minimize a test case, but it seems like it's really
> picky about what environment it's running in. One of those cases where "it
> works on my machine", I suppose. The versions are as follows:
> 
> cryptography==2.7
> pyOpenSSL==19.0.0
> asn1crypto==0.24.0
> pyasn1==0.4.5
> pyasn1-modules==0.2.5
> Twisted==19.2.1
> 
> The target machine is running Xenial, so openssl 1.0.0g.

That's old... Can you go to 1.0.2s?
I recall that pyOpenSSL may need newer openssl - might be wrong on this.

> My local machine runs Fedora 30, thus openssl 1.1.1c.
> 
> Is there a neat way to list all pyOpenSSL objects in a running Twisted
> program? Or maybe TCPConnection objects, since those might hook to the
> zope.interface machinery?

You can use the gc to help with this sort of debugging.

gc.collect()
for obj in gc.get_objects():
     do something interesting with obj

You could count the number of each type of obj and look for which ones 
increase over time.

Barry



> 
> On Thu, Jul 11, 2019 at 9:20 AM Glyph <glyph at twistedmatrix.com> wrote:
> > Hi Jarosław!
> > 
> > On Jul 1, 2019, at 4:48 PM, Jarosław Fedewicz
> > <jaroslaw.fedewicz at gmail.com>
> > wrote:
> > 
> > I have written a simple service which takes data from network, massages it
> > until it's useful enough, and sends the results out periodically via HTTP
> > to an API.
> > 
> > 
> > A reasonable start :-).
> > 
> > It all works for a while, then I get an error like this approximately 40
> > minutes into the service's uptime:
> > 
> > ResponseNeverReceived: [<twisted.python.failure.Failure
> > OpenSSL.SSL.ZeroReturnError: >]
> > 
> > 
> > Then a couple more like this:
> > 
> > ResponseNeverReceived: [<twisted.python.failure.Failure
> > twisted.internet.error.ConnectionLost: Connection to the other side was
> > lost in a non-clean fashion: Connection lost.>]
> > 
> > 
> > Then it ends with
> > 
> > TimeoutError: User timeout caused connection failure.
> > 
> > 
> > Then every request results in the same TimeoutError. I don't know if using
> > HTTPS important in this case.
> > 
> > 
> > I'm pretty sure the presence of an OpenSSL.SSL error indeed means that
> > HTTPS is important.
> > 
> > Restarting the whole service, of course, makes the problem go for a while.
> > The other side is the Slack API, so I rather assume it's not very much to
> > blame, it can be demonstrated to work rather reliably, all its criticisms
> > notwithstanding.
> > 
> > 
> > It does seem likely that the clustering of errors you're seeing are a
> > local problem with Twisted.
> > 
> > I cannot yet tell if this bug is a function of uptime, or the number of
> > requests made.
> > 
> > 
> > My personal guess is that it has something to do with the number of the
> > TCP connections; or, specifically, the number of pyOpenSSL 'Connection'
> > objects.
> > 
> > I have tried to work around the problem by discarding the agent object,
> > and using an HTTPConnectionPool with persistent=False, but it didn't help
> > at all. I think it made the problem worse because the framework seems to
> > refer to some objects the Agent creates, and the process becomes a CPU
> > hogs
> > in a couple hours (with the TimeoutErrors still happening all the time).
> > 
> > 
> > I have a slight suspicion that the thing that is leaking between
> > connections here is the pyOpenSSL "Context" object.  We recently
> > implemented an optimization which shares the Context object among multiple
> > Connection objects that reference the same host.  What version of Twisted
> > area you using, and what version of OpenSSL, pyOpenSSL, and Cryptography?
> > 
> > I'm curious if you reverse that optimization, if it would make any
> > different to your use-case.
> > 
> > The closest I've got on the internets which describes a similar problem,
> > apart from people complaining on StackOverflow about precisely this to
> > happen when they are using Scrapy, is this blog post from almost a decade
> > ago:
> > http://www.chris-wong.net/twisted-web-framework-user-timeout-caused-connec
> > tion-failure/ .
> > 
> > 
> > This definitely seems like a bug, if it's occurring in multiple places.
> > 
> > There could be a small chance I'm holding it wrong(tm), but maybe there
> > exists a ticket, just worded differently, which could help me get to the
> > bottom of it.
> > 
> > 
> > I don't think that any open tickets describe your precise issue.  So
> > please do open one.  And if possible, can you minimize a proof of concept?
> > Some example code would go a long way to helping to isolate this.
> > 
> > -glyph
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python





From sean.dizazzo at gmail.com  Thu Jul 11 15:34:40 2019
From: sean.dizazzo at gmail.com (Sean DiZazzo)
Date: Thu, 11 Jul 2019 14:34:40 -0700
Subject: [Twisted-Python] Twisted tips for designing highly concurrent
 twisted REST API
In-Reply-To: <3489907.MZb2G9KHjS@barry-scott-desktop>
References: <CAJuJkHMZPUu0gNi=XcFyUNpGLrsJPMifgb24_14i0e=caa1hnA@mail.gmail.com>
 <CAJuJkHN6ODsRZwBz4THpY23ZkcaMZ9hpnNCwDcQx4w94bHuOZA@mail.gmail.com>
 <e4757021-5ad8-4b4a-9eb2-120fd3a5de2f@www.fastmail.com>
 <3489907.MZb2G9KHjS@barry-scott-desktop>
Message-ID: <CANzH6es+PriPReJiVRqAo5U4BGdR+-mXhR4kPOUC3ARHkpvRrQ@mail.gmail.com>

Klein and Crossbar.io seem relevant as well

https://crossbario.com/blog/Going-Asynchronous-from-Flask-to-Twisted-Klein/

On Thu, Jul 11, 2019 at 1:46 AM Scott, Barry <barry.scott at forcepoint.com>
wrote:

> On Tuesday, 9 July 2019 22:04:11 BST Tom Most wrote:
>
> ...snip...
>
> > The reactor's own thread pool is really for DNS
> > resolution.
>
> Is that still true in the default case? We are use the twisted code that
> talks
> to DNS servers as the threaded resolver adds too much latency.
>
> > You risk deadlocks in a system that
> > ThreadPoolThreadPoolThreadPool
> >
> > 3. The specifics of what long_computation are also important. If it
> doesn't
> > release the GIL you won't get real parallelism (this is a Python thing,
> not
> > a Twisted thing). See this recent thread on the topic
> > <
> https://twistedmatrix.com/pipermail/twisted-python/2019-June/032371.html>.
>
> We pass out the computational work to other processes over
> unix-domain-sockets
> to avoid the GIL issues.
>
> >
> > Though the mechanisms differ athis thread on the topicny of the above
> would
> > cause the response time to increase as you add load.
> >
> > Good luck,
> > Tom
>
> Barry
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190711/984889cc/attachment.html>

From glyph at twistedmatrix.com  Thu Jul 11 23:25:53 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 11 Jul 2019 22:25:53 -0700
Subject: [Twisted-Python] some logging thoughts
Message-ID: <5784E0DE-AE71-43D0-9CE8-FCB7CBDCF3A8@twistedmatrix.com>

L. Daniel Burr and I got up to some interesting reflections on Twisted's logging system in this Ampoule PR: https://github.com/twisted/ampoule/pull/29/files/268e4dcd8072d37780fd7ff0d875e614aa7da040#r299336179 <https://github.com/twisted/ampoule/pull/29/files/268e4dcd8072d37780fd7ff0d875e614aa7da040#r299336179>

This discussion may be of some general interest to folks on this list.

(Also, this is a good opportunity to remind anybody who is looking for small ways to improve Twisted that porting things from twisted.python.log to twisted.logger is generaly a net win :))

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190711/d26dd70e/attachment.html>

From twm at freecog.net  Fri Jul 12 23:57:08 2019
From: twm at freecog.net (Tom Most)
Date: Fri, 12 Jul 2019 22:57:08 -0700
Subject: [Twisted-Python] 
 =?utf-8?q?Twisted_tips_for_designing_highly_con?=
 =?utf-8?q?current_twisted_REST_API?=
In-Reply-To: <3489907.MZb2G9KHjS@barry-scott-desktop>
References: <CAJuJkHMZPUu0gNi=XcFyUNpGLrsJPMifgb24_14i0e=caa1hnA@mail.gmail.com>
 <CAJuJkHN6ODsRZwBz4THpY23ZkcaMZ9hpnNCwDcQx4w94bHuOZA@mail.gmail.com>
 <e4757021-5ad8-4b4a-9eb2-120fd3a5de2f@www.fastmail.com>
 <3489907.MZb2G9KHjS@barry-scott-desktop>
Message-ID: <b4a3583a-7802-437e-9d0b-952bdb8a6893@www.fastmail.com>

On Thu, Jul 11, 2019, at 1:46 AM, Scott, Barry wrote:
> On Tuesday, 9 July 2019 22:04:11 BST Tom Most wrote:
> 
> ...snip...
> 
> > The reactor's own thread pool is really for DNS resolution.
> 
> Is that still true in the default case? We are use the twisted code that talks 
> to DNS servers as the threaded resolver adds too much latency.

As far as I know, yes. The higher-level APIs use getaddrinfo() at least.

https://twistedmatrix.com/documents/current/api/twisted.internet._resolver.GAIResolver.html
https://github.com/twisted/twisted/blob/c0776850e756adfcdc179a7fd9e4c8f5cbc4838d/src/twisted/internet/base.py#L1007

TCP6ClientEndpoint also invoke getaddrinfo() directly.

twisted.names is certainly more performance but it's missing some system integration features that make it unsuitable as a default:

* No support for the domain or search resolv.conf directives
* No NSS lookups (e.g., systemd integration)

This is all on Linux, YMMV on other platforms.

---Tom


From wk80333 at gmail.com  Sat Jul 13 01:24:36 2019
From: wk80333 at gmail.com (Waqar Khan)
Date: Sat, 13 Jul 2019 03:24:36 -0400
Subject: [Twisted-Python] Twisted tips for designing highly concurrent
 twisted REST API
In-Reply-To: <b4a3583a-7802-437e-9d0b-952bdb8a6893@www.fastmail.com>
References: <CAJuJkHMZPUu0gNi=XcFyUNpGLrsJPMifgb24_14i0e=caa1hnA@mail.gmail.com>
 <CAJuJkHN6ODsRZwBz4THpY23ZkcaMZ9hpnNCwDcQx4w94bHuOZA@mail.gmail.com>
 <e4757021-5ad8-4b4a-9eb2-120fd3a5de2f@www.fastmail.com>
 <3489907.MZb2G9KHjS@barry-scott-desktop>
 <b4a3583a-7802-437e-9d0b-952bdb8a6893@www.fastmail.com>
Message-ID: <CAJuJkHNW2+1ywcLTjd3E4yuDiCh0AXVRAPDPpEH1j1YPCVq7-w@mail.gmail.com>

Hi,
  Thank you all for your kind response.

So, I am trying to use treq library

import treq

@defer.inlinecallbacks

def long_computation(rec_type, data):
     # some long computation
     *defer.returnValue(recs)*

@defer.inlinecallbacks
def fetch_data(user_id):
        r = yield treq.get('url/to/fetch/%s'%user_id)
    text = yield r.text()
     defer.returnValue(text)


@defer.inlinecallbacks
def fetch_recs(user_id):
       data = yield fetch_data(user_id)
        recs = {}
       for stype in similar_types:
            *d = defer.ToThread(long_computation, *(stype, data)) // typo
was here*

Now, I do believe that the call is happening asyncronously. So.. yay..

But then, I feel like I have a misconception on how the yield works.
data = yield fetch_data(user_id)
I was hoping data here was actual data.. But it is a deferred.. Which makes
sense.
And then.. this deferred is being passed on instead of the actual data...

My couple of questions are:
1) What is the difference between data = yield fetch_data(user_id) and data
= fetch_data(user_id) (without yield). How does twisted handle these two ?
2) How do I actually send the data to long computation rather than a
deferred.

Appreciate all the help.
Thanks


On Sat, Jul 13, 2019 at 1:57 AM Tom Most <twm at freecog.net> wrote:

> On Thu, Jul 11, 2019, at 1:46 AM, Scott, Barry wrote:
> > On Tuesday, 9 July 2019 22:04:11 BST Tom Most wrote:
> >
> > ...snip...
> >
> > > The reactor's own thread pool is really for DNS resolution.
> >
> > Is that still true in the default case? We are use the twisted code that
> talks
> > to DNS servers as the threaded resolver adds too much latency.
>
> As far as I know, yes. The higher-level APIs use getaddrinfo() at least.
>
>
> https://twistedmatrix.com/documents/current/api/twisted.internet._resolver.GAIResolver.html
>
> https://github.com/twisted/twisted/blob/c0776850e756adfcdc179a7fd9e4c8f5cbc4838d/src/twisted/internet/base.py#L1007
>
> TCP6ClientEndpoint also invoke getaddrinfo() directly.
>
> twisted.names is certainly more performance but it's missing some system
> integration features that make it unsuitable as a default:
>
> * No support for the domain or search resolv.conf directives
> * No NSS lookups (e.g., systemd integration)
>
> This is all on Linux, YMMV on other platforms.
>
> ---Tom
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190713/7a922c7d/attachment.html>

From trac at twistedmatrix.com  Sun Jul 14 00:05:19 2019
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 14 Jul 2019 06:05:19 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1563084319.13.1540663787600050832@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190714/e375c9eb/attachment.html>

From glyph at twistedmatrix.com  Sun Jul 14 01:47:03 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 14 Jul 2019 00:47:03 -0700
Subject: [Twisted-Python] New release of ldaptor
In-Reply-To: <925fb3b2-e406-47e3-a0d4-9e70f47b0be0@skuld.camilion.eu>
References: <ed592e1269b0444c8b63737c20c8d546@BYEX35.de.bayer.cnb>
 <925fb3b2-e406-47e3-a0d4-9e70f47b0be0@skuld.camilion.eu>
Message-ID: <A9C9A6E4-9192-4FD1-B965-9F49BAAAAD59@twistedmatrix.com>



> On Jul 11, 2019, at 2:33 AM, Evilham <contact at evilham.com> wrote:
> 
> On dt., jul. 09 2019, Thomas Westfeld wrote:
> 
>> Dear all,
>> 
>> I would love to see a new release of ldaptor, which incorporates the recent compatibility fixes with python 3.
>> 
>> Furthermore I have submitted a new pull request for ticket #9596 and revised my pull request about documentation fixes #9243.
>> 
>> Best regards,
>> Thomas
> 
> This would be awesome indeed.
> 
> I keep going even if maybe only tangentially related: I want to stop deploying my ugly hacks to klein :-D [1].
> [1]: https://github.com/twisted/klein/issues/96 <https://github.com/twisted/klein/issues/96>

As you've seen, there's a new release now, so presumably you can just upgrade :).

> The reason why I raise that is because IIUC, ldaptor and klein have the same kind of relationship to the Twisted project?

Roughly, yes.  I think there's more maintainer overlap with Klein than with Ldaptor though, possibly just due to the broader applicability of "web".

> Is there anything specific that can be done to help with the releases of these non-core but very related and useful components?

In the short term - volunteer to be a release manager for one of these projects to try to coordinate a release :).

In the long term and more significantly, the thing would be to build a fully-automated release pipeline; make it possible for travis to push straight to PyPI on an appropriate tag, like what https://github.com/audreyr/cookiecutter-pypackage <https://github.com/audreyr/cookiecutter-pypackage> does.  This isn't as hard as it sounds, and that template has a good example you could work from.

-glyph


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190714/6a090d82/attachment.html>

From tobias.oberstein at crossbario.com  Sun Jul 14 03:39:29 2019
From: tobias.oberstein at crossbario.com (Tobias Oberstein)
Date: Sun, 14 Jul 2019 11:39:29 +0200
Subject: [Twisted-Python] Twisted tips for designing highly concurrent
 twisted REST API
In-Reply-To: <CANzH6es+PriPReJiVRqAo5U4BGdR+-mXhR4kPOUC3ARHkpvRrQ@mail.gmail.com>
References: <CAJuJkHMZPUu0gNi=XcFyUNpGLrsJPMifgb24_14i0e=caa1hnA@mail.gmail.com>
 <CAJuJkHN6ODsRZwBz4THpY23ZkcaMZ9hpnNCwDcQx4w94bHuOZA@mail.gmail.com>
 <e4757021-5ad8-4b4a-9eb2-120fd3a5de2f@www.fastmail.com>
 <3489907.MZb2G9KHjS@barry-scott-desktop>
 <CANzH6es+PriPReJiVRqAo5U4BGdR+-mXhR4kPOUC3ARHkpvRrQ@mail.gmail.com>
Message-ID: <65f1fb18-52b1-c239-e27f-a89bce6a31e4@crossbario.com>

Am 11.07.19 um 23:34 schrieb Sean DiZazzo:
> Klein and Crossbar.io seem relevant as well
> 
> https://crossbario.com/blog/Going-Asynchronous-from-Flask-to-Twisted-Klein/

yeah, klein is neat!

fwiw, this might also be of interest, as it allows to scale-up twisted 
web (and hence also klein) on multi-core (on linux)

https://github.com/crossbario/crossbar-examples/tree/master/benchmark/web

combining SO_REUSEPORT with Klein results in a concurrent, async 
(threadless) server parallelized via processes ..

> 
> On Thu, Jul 11, 2019 at 1:46 AM Scott, Barry <barry.scott at forcepoint.com 
> <mailto:barry.scott at forcepoint.com>> wrote:
> 
>     On Tuesday, 9 July 2019 22:04:11 BST Tom Most wrote:
> 
>     ...snip...
> 
>      > The reactor's own thread pool is really for DNS
>      > resolution.
> 
>     Is that still true in the default case? We are use the twisted code
>     that talks
>     to DNS servers as the threaded resolver adds too much latency.
> 
>      > You risk deadlocks in a system that
>      > ThreadPoolThreadPoolThreadPool
>      >
>      > 3. The specifics of what long_computation are also important. If
>     it doesn't
>      > release the GIL you won't get real parallelism (this is a Python
>     thing, not
>      > a Twisted thing). See this recent thread on the topic
>      >
>     <https://twistedmatrix.com/pipermail/twisted-python/2019-June/032371.html>.
> 
>     We pass out the computational work to other processes over
>     unix-domain-sockets
>     to avoid the GIL issues.
> 
>      >
>      > Though the mechanisms differ athis thread on the topicny of the
>     above would
>      > cause the response time to increase as you add load.
>      >
>      > Good luck,
>      > Tom
> 
>     Barry
> 
> 
> 
>     _______________________________________________
>     Twisted-Python mailing list
>     Twisted-Python at twistedmatrix.com
>     <mailto:Twisted-Python at twistedmatrix.com>
>     https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 


-- 

Tobias Oberstein - phone +49 176 2375 2055 - tobias.oberstein at crossbario.com
Crossbar.io GmbH - Waldstrasse 18 - 91054 Erlangen
HRB 15870 - Amtsgericht Fuerth - Geschäftsfuehrer/CEO - Tobias Oberstein

https://crossbar.io
https://crossbario.com


From trac at twistedmatrix.com  Sun Jul 21 00:05:18 2019
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 21 Jul 2019 06:05:18 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1563689118.51.6359903206287300005@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190721/10a4596f/attachment.html>

From hawkowl at atleastfornow.net  Sun Jul 21 10:24:35 2019
From: hawkowl at atleastfornow.net (Amber Brown)
Date: Mon, 22 Jul 2019 02:24:35 +1000
Subject: [Twisted-Python] Twisted 19.7.0rc1 Release Candidate Announcement
Message-ID: <86e292fc-b7c7-4040-5704-f634a27c1a06@atleastfornow.net>

Hello! It's time for another Twisted release!

This one is full o' stuff, including:

- The dropping of Python 3.4 support,
- A better PyPI page,
- twisted.internet.testing, a public-API version of twisted.test.proto_helpers,
- Support for hmac-sha2-512 as a server in Conch,
- Customisable certificate support for XMPP,
- Tightening up of bytes/unicode arguments in Agent and twisted.web in general,
- and a raft of removals of deprecated cruft.

You can get the tarball and the NEWS file at https://twistedmatrix.com/Releases/rc/19.7.0rc1/ , or you can try it out from PyPI:

      python -m pip install Twisted==19.7.0rc1

Please test it, and let me know how your applications fare, good or bad! If nothing comes up, 19.7 will release in a week.

Twisted regards,

Amber Brown (hawkowl)

PS: The full release will come with MacOS and Linux wheels for all supported Python versions, but may not come with Windows wheels.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190722/dcb905f9/attachment.html>

From hawkowl at atleastfornow.net  Sun Jul 21 10:30:16 2019
From: hawkowl at atleastfornow.net (Amber Brown)
Date: Mon, 22 Jul 2019 02:30:16 +1000
Subject: [Twisted-Python] Twisted 19.7.0rc1 Release Candidate
 Announcement
In-Reply-To: <86e292fc-b7c7-4040-5704-f634a27c1a06@atleastfornow.net>
References: <86e292fc-b7c7-4040-5704-f634a27c1a06@atleastfornow.net>
Message-ID: <c2391dd0-226c-4464-9276-9cad15edbf31@atleastfornow.net>


On 22/7/19 2:24 am, Amber Brown wrote:
> Hello! It's time for another Twisted release!
>
> This one is full o' stuff, including:
>
> - The dropping of Python 3.4 support,
> - A better PyPI page,
> - twisted.internet.testing, a public-API version of twisted.test.proto_helpers,
> - Support for hmac-sha2-512 as a server in Conch,
> - Customisable certificate support for XMPP,
> - Tightening up of bytes/unicode arguments in Agent and twisted.web in general,
> - and a raft of removals of deprecated cruft.
>
> You can get the tarball and the NEWS file athttps://twistedmatrix.com/Releases/rc/19.7.0rc1/  , or you can try it out from PyPI:
>
>       python -m pip install Twisted==19.7.0rc1
>
> Please test it, and let me know how your applications fare, good or bad! If nothing comes up, 19.7 will release in a week.
>
> Twisted regards,
>
> Amber Brown (hawkowl)
>
> PS: The full release will come with MacOS and Linux wheels for all supported Python versions, but may not come with Windows wheels.


Correction: We will have MacOS, Linux (32+64), and Windows (32+64) 
wheels for all supported Python versions.

(Also thanks to altendky who did all the work to make this possible!)


- Amber

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190722/ef9cc253/attachment.html>

From glyph at twistedmatrix.com  Sun Jul 21 18:14:31 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 21 Jul 2019 17:14:31 -0700
Subject: [Twisted-Python] Twisted 19.7.0rc1 Release Candidate
 Announcement
In-Reply-To: <c2391dd0-226c-4464-9276-9cad15edbf31@atleastfornow.net>
References: <86e292fc-b7c7-4040-5704-f634a27c1a06@atleastfornow.net>
 <c2391dd0-226c-4464-9276-9cad15edbf31@atleastfornow.net>
Message-ID: <cc2d72d2-4420-47da-9ddc-32481544cd89@www.fastmail.com>

On Sun, Jul 21, 2019, at 9:30 AM, Amber Brown wrote:
> 

> On 22/7/19 2:24 am, Amber Brown wrote:
>> Hello! It's time for another Twisted release!

This one is full o' stuff, including:

- The dropping of Python 3.4 support,
- A better PyPI page,
- twisted.internet.testing, a public-API version of twisted.test.proto_helpers,
- Support for hmac-sha2-512 as a server in Conch,
- Customisable certificate support for XMPP,
- Tightening up of bytes/unicode arguments in Agent and twisted.web in general,
- and a raft of removals of deprecated cruft.

You can get the tarball and the NEWS file at https://twistedmatrix.com/Releases/rc/19.7.0rc1/ , or you can try it out from PyPI:

     python -m pip install Twisted==19.7.0rc1

Please test it, and let me know how your applications fare, good or bad! If nothing comes up, 19.7 will release in a week.

Twisted regards,

Amber Brown (hawkowl)

PS: The full release will come with MacOS and Linux wheels for all supported Python versions, but may not come with Windows wheels.
>> 
> 

> Correction: We will have MacOS, Linux (32+64), and Windows (32+64) wheels for all supported Python versions.

> (Also thanks to altendky who did all the work to make this possible!)


Wow! Thanks so much for everyone who contributed to this amazing release. The PyPI, twisted.internet.testing, and wheels changes are all huge quality-of-life improvements for the project and I really appreciate all the effort everyone made to getting these to happen.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190721/8f150b2d/attachment.html>

From barry.scott at forcepoint.com  Thu Jul 25 03:30:48 2019
From: barry.scott at forcepoint.com (Scott, Barry)
Date: Thu, 25 Jul 2019 09:30:48 +0000
Subject: [Twisted-Python] Twisted 19.7.0rc1 Release Candidate
 Announcement
In-Reply-To: <86e292fc-b7c7-4040-5704-f634a27c1a06@atleastfornow.net>
References: <86e292fc-b7c7-4040-5704-f634a27c1a06@atleastfornow.net>
Message-ID: <1647410.6S6GMSpuXt@barry-scott-desktop>

On Sunday, 21 July 2019 17:24:35 BST Amber Brown wrote:
> Hello! It's time for another Twisted release!
> 
> This one is full o' stuff, including:
> 
> - The dropping of Python 3.4 support,

Does this still support python 2.7?

Barry




From hawkowl at atleastfornow.net  Fri Jul 26 04:00:43 2019
From: hawkowl at atleastfornow.net (Amber Brown)
Date: Fri, 26 Jul 2019 20:00:43 +1000
Subject: [Twisted-Python] Twisted 19.7.0rc1 Release Candidate
 Announcement
In-Reply-To: <1647410.6S6GMSpuXt@barry-scott-desktop>
References: <86e292fc-b7c7-4040-5704-f634a27c1a06@atleastfornow.net>
 <1647410.6S6GMSpuXt@barry-scott-desktop>
Message-ID: <4abe1dd5-6a8d-4f66-bb5e-7da529a29939@www.fastmail.com>



On Fri, 26 Jul 2019, at 19:38, Scott, Barry wrote:
> On Sunday, 21 July 2019 17:24:35 BST Amber Brown wrote:
> > Hello! It's time for another Twisted release!
> > 
> > This one is full o' stuff, including:
> > 
> > - The dropping of Python 3.4 support,
> 
> Does this still support python 2.7?
> 
> Barry
> 

It sure does :) My written plans for Python 2.7 deprecation have not been fully decided upon. 

- Amber


From trac at twistedmatrix.com  Sun Jul 28 00:05:18 2019
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 28 Jul 2019 06:05:18 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1564293918.64.367910677247989967@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190728/8cf58b99/attachment.html>

From jaroslaw.fedewicz at gmail.com  Mon Jul  1 17:48:07 2019
From: jaroslaw.fedewicz at gmail.com (=?UTF-8?Q?Jaros=C5=82aw_Fedewicz?=)
Date: Tue, 2 Jul 2019 01:48:07 +0200
Subject: [Twisted-Python] Need some enlightenment on using web client
 properly, or maybe nudge a bug to get fixed
Message-ID: <CA+HdgOXTOSxzFYEZ-5Ar07G_V+rveaPMBRuqW7u6txdkwqY8KQ@mail.gmail.com>

I have written a simple service which takes data from network, massages it
until it's useful enough, and sends the results out periodically via HTTP
to an API.

It all works for a while, then I get an error like this approximately 40
minutes into the service's uptime:

ResponseNeverReceived: [<twisted.python.failure.Failure
OpenSSL.SSL.ZeroReturnError: >]


Then a couple more like this:

ResponseNeverReceived: [<twisted.python.failure.Failure
twisted.internet.error.ConnectionLost: Connection to the other side was
lost in a non-clean fashion: Connection lost.>]


Then it ends with

TimeoutError: User timeout caused connection failure.


Then every request results in the same TimeoutError. I don't know if using
HTTPS important in this case.

Restarting the whole service, of course, makes the problem go for a while.
The other side is the Slack API, so I rather assume it's not very much to
blame, it can be demonstrated to work rather reliably, all its criticisms
notwithstanding.

I cannot yet tell if this bug is a function of uptime, or the number of
requests made.

I have tried to work around the problem by discarding the agent object, and
using an HTTPConnectionPool with persistent=False, but it didn't help at
all. I think it made the problem worse because the framework seems to refer
to some objects the Agent creates, and the process becomes a CPU hogs in a
couple hours (with the TimeoutErrors still happening all the time).

The closest I've got on the internets which describes a similar problem,
apart from people complaining on StackOverflow about precisely this to
happen when they are using Scrapy, is this blog post from almost a decade
ago:
http://www.chris-wong.net/twisted-web-framework-user-timeout-caused-connection-failure/
.

There could be a small chance I'm holding it wrong(tm), but maybe there
exists a ticket, just worded differently, which could help me get to the
bottom of it.

-- 
Yaroslav Fedevych
IT Philosopher
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190702/2ffe0fe0/attachment-0002.html>

From thomas.westfeld at currenta.de  Thu Jul  4 07:39:50 2019
From: thomas.westfeld at currenta.de (Thomas Westfeld)
Date: Thu, 4 Jul 2019 13:39:50 +0000
Subject: [Twisted-Python] Getting nice logging outputs in py.test
Message-ID: <3ff1221068a843e2888caabbb10e31ec@BYEX35.de.bayer.cnb>

Dear all,

I am having an issue with logging of my Twisted application. I am using the new twisted.logger framework. The output produced by twist or twistd when runnning my plugin is nice.

However when running a test suite using py.test I only get this as an output to stdout:

{"log_io": "\"127.0.0.1\" - - [04/Jul/2019:13:12:04 +0000] \"GET /index HTTP/1.1\" 401 - \"-\" \"python-requests/2.22.0\"", "log_logger": {"unpersistable": true}, "log_level": {"name": "info", "__class_uuid__": "02e59486-f24d-46ad-8224-3acdf2a5732a"}, "log_namespace": "twisted.python.log", "log_source": null, "log_format": "{log_io}", "log_time": 1562245925.0769854, "log_flattened": {"log_io!s:": "\"127.0.0.1\" - - [04/Jul/2019:13:12:04 +0000] \"GET /index HTTP/1.1\" 401 - \"-\" \"python-requests/2.22.0\"", "log_io!:": "\"127.0.0.1\" - - [04/Jul/2019:13:12:04 +0000] \"GET /index HTTP/1.1\" 401 - \"-\" \"python-requests/2.22.0\""}}

I tried to initialize a log observer like this, to get it better formatted:

globalLogBeginner.beginLoggingTo([textFileLogObserver(sys.stdout)])

But it does not work. I did this in a conftest.py file, but it did not produce the desired input.

Any idea how I can produce a nice log output to stdout?

Thanks in advance,
Thomas

From chris at withers.org  Thu Jul  4 11:50:47 2019
From: chris at withers.org (Chris Withers)
Date: Thu, 4 Jul 2019 18:50:47 +0100
Subject: [Twisted-Python] Getting nice logging outputs in py.test
In-Reply-To: <3ff1221068a843e2888caabbb10e31ec@BYEX35.de.bayer.cnb>
References: <3ff1221068a843e2888caabbb10e31ec@BYEX35.de.bayer.cnb>
Message-ID: <5e4e19d4-33f6-d48f-3fe8-2853b7fddec0@withers.org>

On 04/07/2019 14:39, Thomas Westfeld wrote:
> Dear all,
> 
> I am having an issue with logging of my Twisted application. I am using the new twisted.logger framework. The output produced by twist or twistd when runnning my plugin is nice.
> 
> However when running a test suite using py.test I only get this as an output to stdout:

How are you running the reactor in your pytest suites? I've not found a 
sane way to do this and so would recommend sticking with trial, crufty 
and old though it feels...

cheers,

Chris



From exarkun at twistedmatrix.com  Thu Jul  4 14:43:02 2019
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Thu, 4 Jul 2019 16:43:02 -0400
Subject: [Twisted-Python] Getting nice logging outputs in py.test
In-Reply-To: <5e4e19d4-33f6-d48f-3fe8-2853b7fddec0@withers.org>
References: <3ff1221068a843e2888caabbb10e31ec@BYEX35.de.bayer.cnb>
 <5e4e19d4-33f6-d48f-3fe8-2853b7fddec0@withers.org>
Message-ID: <CAEeXt4O8Jy+4yrNgQTjwcOLfKVCWhasnvwVaqWv6ER27o72j0g@mail.gmail.com>

On Thu, Jul 4, 2019 at 1:50 PM Chris Withers <chris at withers.org> wrote:

> On 04/07/2019 14:39, Thomas Westfeld wrote:
> > Dear all,
> >
> > I am having an issue with logging of my Twisted application. I am using
> the new twisted.logger framework. The output produced by twist or twistd
> when runnning my plugin is nice.
> >
> > However when running a test suite using py.test I only get this as an
> output to stdout:
>

Are you letting pytest eat your stdout?  That's the default behavior, isn't
it?


>
> How are you running the reactor in your pytest suites? I've not found a
> sane way to do this and so would recommend sticking with trial, crufty
> and old though it feels...
>
>
What feels crufty and old about trial?  And why is "old" a negative?

Jean-Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190704/606c9ef2/attachment-0002.html>

From chris at withers.org  Thu Jul  4 23:55:30 2019
From: chris at withers.org (Chris Withers)
Date: Fri, 5 Jul 2019 06:55:30 +0100
Subject: [Twisted-Python] Getting nice logging outputs in py.test
In-Reply-To: <CAEeXt4O8Jy+4yrNgQTjwcOLfKVCWhasnvwVaqWv6ER27o72j0g@mail.gmail.com>
References: <3ff1221068a843e2888caabbb10e31ec@BYEX35.de.bayer.cnb>
 <5e4e19d4-33f6-d48f-3fe8-2853b7fddec0@withers.org>
 <CAEeXt4O8Jy+4yrNgQTjwcOLfKVCWhasnvwVaqWv6ER27o72j0g@mail.gmail.com>
Message-ID: <90638d10-494f-aec0-3335-02aba606c78b@withers.org>

On 04/07/2019 21:43, Jean-Paul Calderone wrote:
>     How are you running the reactor in your pytest suites? I've not found a
>     sane way to do this and so would recommend sticking with trial, crufty
>     and old though it feels...
> 
> 
> What feels crufty and old about trial?  And why is "old" a negative?

"old" is negative here because things have moved on and trial hasn't.

pytest feels like it's become the python standard now, so there's that.
It's rich ecosystem of plugins is another one.
The reliance on subclassing TestCase is nother.
No fixtures.
Poor support in pycharm for trial versus first class support for pytest.

That's just off the top of my head, use pytest for a year or two and 
coming back to trial may well feel the same.

cheers,

Chris



From hawkowl at atleastfornow.net  Fri Jul  5 03:41:59 2019
From: hawkowl at atleastfornow.net (Amber Brown)
Date: Fri, 5 Jul 2019 19:41:59 +1000
Subject: [Twisted-Python] Getting nice logging outputs in py.test
In-Reply-To: <90638d10-494f-aec0-3335-02aba606c78b@withers.org>
References: <3ff1221068a843e2888caabbb10e31ec@BYEX35.de.bayer.cnb>
 <5e4e19d4-33f6-d48f-3fe8-2853b7fddec0@withers.org>
 <CAEeXt4O8Jy+4yrNgQTjwcOLfKVCWhasnvwVaqWv6ER27o72j0g@mail.gmail.com>
 <90638d10-494f-aec0-3335-02aba606c78b@withers.org>
Message-ID: <a1d0b60c-0c90-db45-28fe-84bfa1c6c04e@atleastfornow.net>

On 5/7/19 3:55 pm, Chris Withers wrote:
> On 04/07/2019 21:43, Jean-Paul Calderone wrote:
>>     How are you running the reactor in your pytest suites? I've not 
>> found a
>>     sane way to do this and so would recommend sticking with trial, 
>> crufty
>>     and old though it feels...
>>
>>
>> What feels crufty and old about trial?  And why is "old" a negative?
>
> "old" is negative here because things have moved on and trial hasn't.
>
> pytest feels like it's become the python standard now, so there's that.
> It's rich ecosystem of plugins is another one.
> The reliance on subclassing TestCase is nother.
> No fixtures.
> Poor support in pycharm for trial versus first class support for pytest.
>
> That's just off the top of my head, use pytest for a year or two and 
> coming back to trial may well feel the same.
>
> cheers,
>
> Chris

To note, Trial still is the only Python test runner which reliably finds 
all of Twisted's tests, though ;)

- Amber



From thomas.westfeld at currenta.de  Fri Jul  5 04:27:29 2019
From: thomas.westfeld at currenta.de (Thomas Westfeld)
Date: Fri, 5 Jul 2019 10:27:29 +0000
Subject: [Twisted-Python] Getting nice logging outputs in py.test
In-Reply-To: <5e4e19d4-33f6-d48f-3fe8-2853b7fddec0@withers.org>
References: <3ff1221068a843e2888caabbb10e31ec@BYEX35.de.bayer.cnb>
 <5e4e19d4-33f6-d48f-3fe8-2853b7fddec0@withers.org>
Message-ID: <7b0d006cbe2146918258b352ea780819@BYEX35.de.bayer.cnb>

>> Dear all,
>>
>> I am having an issue with logging of my Twisted application. I am using the new
>twisted.logger framework. The output produced by twist or twistd when runnning my
>plugin is nice.
>>
>> However when running a test suite using py.test I only get this as an output to
>stdout:
>
>How are you running the reactor in your pytest suites? I've not found a
>sane way to do this and so would recommend sticking with trial, crufty
>and old though it feels...

Well actually I do not. I use the subprocess module to start the server using twist and then use requests in the tests to test the HTML server and compare the results with the expected results.

And yes py.test eats stdout but it is great as I need a good looking html test report which can be also customized and py.test gives me just this.

Sounds like there is no easy way of configuring a nice stdout log...

From hawkowl at atleastfornow.net  Fri Jul  5 04:47:29 2019
From: hawkowl at atleastfornow.net (Amber Brown)
Date: Fri, 5 Jul 2019 20:47:29 +1000
Subject: [Twisted-Python] Getting nice logging outputs in py.test
In-Reply-To: <7b0d006cbe2146918258b352ea780819@BYEX35.de.bayer.cnb>
References: <3ff1221068a843e2888caabbb10e31ec@BYEX35.de.bayer.cnb>
 <5e4e19d4-33f6-d48f-3fe8-2853b7fddec0@withers.org>
 <7b0d006cbe2146918258b352ea780819@BYEX35.de.bayer.cnb>
Message-ID: <79a2f71a-9e38-4fe5-0f8a-96e5052d91ed@atleastfornow.net>

On 5/7/19 8:27 pm, Thomas Westfeld wrote:
>>> Dear all,
>>>
>>> I am having an issue with logging of my Twisted application. I am using the new
>> twisted.logger framework. The output produced by twist or twistd when runnning my
>> plugin is nice.
>>> However when running a test suite using py.test I only get this as an output to
>> stdout:
>>
>> How are you running the reactor in your pytest suites? I've not found a
>> sane way to do this and so would recommend sticking with trial, crufty
>> and old though it feels...
> Well actually I do not. I use the subprocess module to start the server using twist and then use requests in the tests to test the HTML server and compare the results with the expected results.
>
> And yes py.test eats stdout but it is great as I need a good looking html test report which can be also customized and py.test gives me just this.
>
> Sounds like there is no easy way of configuring a nice stdout log...

Oh, that's why.

If twist detects something that isn't a terminal, it outputs JSON 
because it's not a human looking at it, which is easier for logging 
systems to consume than straight text.

You can pass `--log-format=text` as a command line argument to twist to 
override this.

- Amber



From exarkun at twistedmatrix.com  Fri Jul  5 05:24:08 2019
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Fri, 5 Jul 2019 07:24:08 -0400
Subject: [Twisted-Python] Getting nice logging outputs in py.test
In-Reply-To: <90638d10-494f-aec0-3335-02aba606c78b@withers.org>
References: <3ff1221068a843e2888caabbb10e31ec@BYEX35.de.bayer.cnb>
 <5e4e19d4-33f6-d48f-3fe8-2853b7fddec0@withers.org>
 <CAEeXt4O8Jy+4yrNgQTjwcOLfKVCWhasnvwVaqWv6ER27o72j0g@mail.gmail.com>
 <90638d10-494f-aec0-3335-02aba606c78b@withers.org>
Message-ID: <CAEeXt4O_Wiu1X4XSmXn0CFogvG_B2SofjgiSGdJWVCtuR6R7Hg@mail.gmail.com>

On Fri, Jul 5, 2019 at 1:55 AM Chris Withers <chris at withers.org> wrote:

> On 04/07/2019 21:43, Jean-Paul Calderone wrote:
> >     How are you running the reactor in your pytest suites? I've not
> found a
> >     sane way to do this and so would recommend sticking with trial,
> crufty
> >     and old though it feels...
> >
> >
> > What feels crufty and old about trial?  And why is "old" a negative?
>
> "old" is negative here because things have moved on and trial hasn't.
>
> pytest feels like it's become the python standard now, so there's that.
> It's rich ecosystem of plugins is another one.
> The reliance on subclassing TestCase is nother.
> No fixtures.
>

Just for anyone who's interested, if you use testtools TestCase then you
get fixtures and a load of other nice features.  This is what I almost
always do for new test development now.  Interoperability between different
libraries is one of the few nice things that comes from xUnit so trial can
load and run these tests.

Poor support in pycharm for trial versus first class support for pytest.
>
> That's just off the top of my head, use pytest for a year or two and
> coming back to trial may well feel the same.
>

Don't assume I haven't used pytest just because I don't immediately and
unquestioningly express complete agreement with you. :)

Anyhow, I am less interested in trying to convince you you're wrong than I
am in learning from your experience - hence the request to expand on your
assessment.

Jean-Paul


>
> cheers,
>
> Chris
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190705/ef115793/attachment-0002.html>

From thomas.westfeld at currenta.de  Fri Jul  5 06:09:45 2019
From: thomas.westfeld at currenta.de (Thomas Westfeld)
Date: Fri, 5 Jul 2019 12:09:45 +0000
Subject: [Twisted-Python] Getting nice logging outputs in py.test
In-Reply-To: <79a2f71a-9e38-4fe5-0f8a-96e5052d91ed@atleastfornow.net>
References: <3ff1221068a843e2888caabbb10e31ec@BYEX35.de.bayer.cnb>
 <5e4e19d4-33f6-d48f-3fe8-2853b7fddec0@withers.org>
 <7b0d006cbe2146918258b352ea780819@BYEX35.de.bayer.cnb>
 <79a2f71a-9e38-4fe5-0f8a-96e5052d91ed@atleastfornow.net>
Message-ID: <2a7779cf5b724601985148c4e8423910@BYEX35.de.bayer.cnb>

>-----Original Message-----
>From: Twisted-Python [mailto:twisted-python-bounces at twistedmatrix.com] On
>Behalf Of Amber Brown
>Sent: Friday, July 05, 2019 12:47 PM
>To: twisted-python at twistedmatrix.com
>Subject: Re: [Twisted-Python] Getting nice logging outputs in py.test
>
>On 5/7/19 8:27 pm, Thomas Westfeld wrote:
>>>> Dear all,
>>>>
>>>> I am having an issue with logging of my Twisted application. I am using 
>>>> the new
>>> twisted.logger framework. The output produced by twist or twistd when 
>>> runnning
>my
>>> plugin is nice.
>>>> However when running a test suite using py.test I only get this as an 
>>>> output to
>>> stdout:
>>>
>>> How are you running the reactor in your pytest suites? I've not found a
>>> sane way to do this and so would recommend sticking with trial, crufty
>>> and old though it feels...
>> Well actually I do not. I use the subprocess module to start the server 
>> using twist
>and then use requests in the tests to test the HTML server and compare the 
>results
>with the expected results.
>>
>> And yes py.test eats stdout but it is great as I need a good looking html 
>> test
>report which can be also customized and py.test gives me just this.
>>
>> Sounds like there is no easy way of configuring a nice stdout log...
>
>Oh, that's why.
>
>If twist detects something that isn't a terminal, it outputs JSON
>because it's not a human looking at it, which is easier for logging
>systems to consume than straight text.
>
>You can pass `--log-format=text` as a command line argument to twist to
>override this.
>

This worked fine. Thanks alot!

>- Amber
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 6137 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20190705/022a0cf5/attachment-0002.bin>

From twisted-ml at notafile.com  Fri Jul  5 10:00:31 2019
From: twisted-ml at notafile.com (notafile)
Date: Fri, 05 Jul 2019 18:00:31 +0200
Subject: [Twisted-Python] IDelayedCall.reset does not work with
 AsyncIOReactor
Message-ID: <de7c9737-c138-4a76-b134-74943caeadcf@www.fastmail.com>

Hello,

 I thought I'd follow the commenters recommendations and crosspost on the mailing list after all.

When switching to AsyncIOReactor a while back, we discovered that calling .reset() on a delayed call was just a noop when using that reactor. We've since worked around it, but it would be very neat to see this fixed in twisted directly. Exarkun on IRC mentioned that this was a very obvious mistake, but I'm personally not really familiar enough with twisted internals to write a patch for it.

The relevant ticket is https://twistedmatrix.com/trac/ticket/9611.

 - nota



From trac at twistedmatrix.com  Sun Jul  7 00:05:25 2019
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 07 Jul 2019 06:05:25 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1562479525.7.2790840159774009263@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190707/bf629edd/attachment-0002.html>

From thomas.westfeld at currenta.de  Tue Jul  9 02:11:49 2019
From: thomas.westfeld at currenta.de (Thomas Westfeld)
Date: Tue, 9 Jul 2019 08:11:49 +0000
Subject: [Twisted-Python] New release of ldaptor
Message-ID: <ed592e1269b0444c8b63737c20c8d546@BYEX35.de.bayer.cnb>

Dear all,

I would love to see a new release of ldaptor, which incorporates the recent compatibility fixes with python 3.

Furthermore I have submitted a new pull request for ticket #9596 and revised my pull request about documentation fixes #9243.

Best regards,
Thomas

From twm at freecog.net  Tue Jul  9 15:04:11 2019
From: twm at freecog.net (Tom Most)
Date: Tue, 09 Jul 2019 14:04:11 -0700
Subject: [Twisted-Python] 
 =?utf-8?q?Twisted_tips_for_designing_highly_con?=
 =?utf-8?q?current_twisted_REST_API?=
In-Reply-To: <CAJuJkHN6ODsRZwBz4THpY23ZkcaMZ9hpnNCwDcQx4w94bHuOZA@mail.gmail.com>
References: <CAJuJkHMZPUu0gNi=XcFyUNpGLrsJPMifgb24_14i0e=caa1hnA@mail.gmail.com>
 <CAJuJkHN6ODsRZwBz4THpY23ZkcaMZ9hpnNCwDcQx4w94bHuOZA@mail.gmail.com>
Message-ID: <e4757021-5ad8-4b4a-9eb2-120fd3a5de2f@www.fastmail.com>

Hi,

There are likely a few things wrong here.

1. You are using requests.get() to make a HTTP request. This is blocking. You might consider using Twisted's Agent <https://twistedmatrix.com/documents/current/api/twisted.web.client.Agent.html> API instead (or treq <https://github.com/twisted/treq>, which puts a requests-like API atop Agent).

2. As you add load your long computations will be queued. deferToThread <https://twistedmatrix.com/documents/current/api/twisted.internet.threads.html#deferToThread> dispatches the long_computation to the reactor's default thread pool <https://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.IReactorThreads.html>. This poll has a maximum size and will queue work once it has spun up that many threads.

Rather than using deferToThread (which we should really deprecate as it doesn't accept a reactor parameter...) I'd recommend instantiating your own ThreadPool <https://twistedmatrix.com/documents/current/api/twisted.python.threadpool.ThreadPool.html> and using deferToThreadPool <https://twistedmatrix.com/documents/current/api/twisted.internet.threads.html#deferToThreadPool>. The reactor's own thread pool is really for DNS resolution. You risk deadlocks in a system that ThreadPoolThreadPoolThreadPool

3. The specifics of what long_computation are also important. If it doesn't release the GIL you won't get real parallelism (this is a Python thing, not a Twisted thing). See this recent thread on the topic <https://twistedmatrix.com/pipermail/twisted-python/2019-June/032371.html>.

Though the mechanisms differ athis thread on the topicny of the above would cause the response time to increase as you add load.

Good luck,
Tom

On Tue, Jun 25, 2019, at 11:51 PM, Waqar Khan wrote:
> 
> Sorry I had a typo in twisted program
> 
> *@defer.inlinecallbacks*
> *def **long_computation*(rec_type, data)*:
**     **# some long computation
**     *defer.returnValue(recs)**
> @defer.inlinecallbacks
> def fetch_data(user_id):
> r *= yield*json.*loads*(requests.*get*('url/to/fetch/%s'*%**user_id*).text)
>  defer.returnValue(r)
> 
> 
> @defer.inlinecallbacks
> def fetch_recs(user_id):
>  data = yield fetch_data(user_id)
>  recs = {}
>  for stype in similar_types:
> *d = defer.ToThread(long_computation, *(stype, data)) // typo was here*
>  rec = yield d
>  recs[stype] = rec
>  defer.returnValue(recs)
> 
> 
> On Tue, Jun 25, 2019 at 11:48 PM Waqar Khan <wk80333 at gmail.com> wrote:
>> Hello folks,
>>  I recently stumbled upon twisted and was wondering if it could suit my needs. On one hand, I want to use python but on another hand there are all these scalability concerns with this language so, I though I would pick the brains of the community. So.. a flask based app would look something like this.
>> 
>> similar_types *= *['foo', 'bar', 'baz']
>> 
>> 
>> *def **long_computation*(rec_type)*:
**     **# some long computation
**     **return *recs
>> 
>> *@app.route*('/fetch_similar_users/<user_id>'
>> *def **fetch_similar_users*(*user_id*)
>>         r *= *json.*loads*(requests.*get*('url/to/fetch/%s'*%**user_id*).text)
>>         recs *= *{}
>>         *for *stype *in *similar_types*:
**             *recs[stype] *= **long_computation*(rec_type)
>>        *return *recs
>> 
>> 
>> Now, I tried to "twistify" but it failed.
>> 
>> *@defer.inlinecallbacks*
>> *def **long_computation*(rec_type)*:
**     **# some long computation
**     *defer.returnValue(recs)**
>> @defer.inlinecallbacks
>> def fetch_data(user_id):
>> r *= yield*json.*loads*(requests.*get*('url/to/fetch/%s'*%**user_id*).text)
>>  defer.returnValue(r)
>> 
>> 
>> @defer.inlinecallbacks
>> def fetch_recs(user_id):
>>  data = yield fetch_data(user_id)
>>  recs = {}
>>  for stype in similar_types:
>>  d = defer.ToThread(fetch_data, *(stype))
>>  rec = yield d
>>  recs[stype] = rec
>>  defer.returnValue(recs)
>> 
>> 
>> 
>> I wrapped all the above in twisted render_Get method.. but then I did a load test with locust (https://docs.locust.io/en/latest/what-is-locust.html) framework.
>> It choked. As the time progressed, the response time increased.
>> I am guessing, things are still blocking. 
>> 
>> Can you please help me look into the right place. Why exactly am I seeing increase in response time as the time progresses. I am guessing things are still working in "blocking" fashion but i thought the above should run things in async.
>> Thanks
>> 
>> 
>> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190709/4bab79b0/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Jul 11 01:19:14 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 11 Jul 2019 00:19:14 -0700
Subject: [Twisted-Python] Need some enlightenment on using web client
 properly, or maybe nudge a bug to get fixed
In-Reply-To: <CA+HdgOXTOSxzFYEZ-5Ar07G_V+rveaPMBRuqW7u6txdkwqY8KQ@mail.gmail.com>
References: <CA+HdgOXTOSxzFYEZ-5Ar07G_V+rveaPMBRuqW7u6txdkwqY8KQ@mail.gmail.com>
Message-ID: <43260BF0-3DA9-4833-9015-78C27BB599CF@twistedmatrix.com>

Hi Jarosław!

> On Jul 1, 2019, at 4:48 PM, Jarosław Fedewicz <jaroslaw.fedewicz at gmail.com> wrote:
> 
> I have written a simple service which takes data from network, massages it until it's useful enough, and sends the results out periodically via HTTP to an API.

A reasonable start :-).

> It all works for a while, then I get an error like this approximately 40 minutes into the service's uptime:
> 
> ResponseNeverReceived: [<twisted.python.failure.Failure OpenSSL.SSL.ZeroReturnError: >]
> 
> Then a couple more like this:
> 
> ResponseNeverReceived: [<twisted.python.failure.Failure twisted.internet.error.ConnectionLost: Connection to the other side was lost in a non-clean fashion: Connection lost.>]
> 
> Then it ends with
> 
> TimeoutError: User timeout caused connection failure.
> 
> Then every request results in the same TimeoutError. I don't know if using HTTPS important in this case.

I'm pretty sure the presence of an OpenSSL.SSL error indeed means that HTTPS is important.

> Restarting the whole service, of course, makes the problem go for a while. The other side is the Slack API, so I rather assume it's not very much to blame, it can be demonstrated to work rather reliably, all its criticisms notwithstanding.

It does seem likely that the clustering of errors you're seeing are a local problem with Twisted.

> I cannot yet tell if this bug is a function of uptime, or the number of requests made.

My personal guess is that it has something to do with the number of the TCP connections; or, specifically, the number of pyOpenSSL 'Connection' objects.

> I have tried to work around the problem by discarding the agent object, and using an HTTPConnectionPool with persistent=False, but it didn't help at all. I think it made the problem worse because the framework seems to refer to some objects the Agent creates, and the process becomes a CPU hogs in a couple hours (with the TimeoutErrors still happening all the time).

I have a slight suspicion that the thing that is leaking between connections here is the pyOpenSSL "Context" object.  We recently implemented an optimization which shares the Context object among multiple Connection objects that reference the same host.  What version of Twisted area you using, and what version of OpenSSL, pyOpenSSL, and Cryptography?

I'm curious if you reverse that optimization, if it would make any different to your use-case.

> The closest I've got on the internets which describes a similar problem, apart from people complaining on StackOverflow about precisely this to happen when they are using Scrapy, is this blog post from almost a decade ago: http://www.chris-wong.net/twisted-web-framework-user-timeout-caused-connection-failure/ <http://www.chris-wong.net/twisted-web-framework-user-timeout-caused-connection-failure/>. 

This definitely seems like a bug, if it's occurring in multiple places.

> There could be a small chance I'm holding it wrong(tm), but maybe there exists a ticket, just worded differently, which could help me get to the bottom of it.

I don't think that any open tickets describe your precise issue.  So please do open one.  And if possible, can you minimize a proof of concept?  Some example code would go a long way to helping to isolate this.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190711/080ec3f1/attachment-0002.html>

From barry.scott at forcepoint.com  Thu Jul 11 02:45:49 2019
From: barry.scott at forcepoint.com (Scott, Barry)
Date: Thu, 11 Jul 2019 08:45:49 +0000
Subject: [Twisted-Python] Twisted tips for designing highly concurrent
 twisted REST API
In-Reply-To: <e4757021-5ad8-4b4a-9eb2-120fd3a5de2f@www.fastmail.com>
References: <CAJuJkHMZPUu0gNi=XcFyUNpGLrsJPMifgb24_14i0e=caa1hnA@mail.gmail.com>
 <CAJuJkHN6ODsRZwBz4THpY23ZkcaMZ9hpnNCwDcQx4w94bHuOZA@mail.gmail.com>
 <e4757021-5ad8-4b4a-9eb2-120fd3a5de2f@www.fastmail.com>
Message-ID: <3489907.MZb2G9KHjS@barry-scott-desktop>

On Tuesday, 9 July 2019 22:04:11 BST Tom Most wrote:

...snip...

> The reactor's own thread pool is really for DNS
> resolution.

Is that still true in the default case? We are use the twisted code that talks 
to DNS servers as the threaded resolver adds too much latency.

> You risk deadlocks in a system that
> ThreadPoolThreadPoolThreadPool
> 
> 3. The specifics of what long_computation are also important. If it doesn't
> release the GIL you won't get real parallelism (this is a Python thing, not
> a Twisted thing). See this recent thread on the topic
> <https://twistedmatrix.com/pipermail/twisted-python/2019-June/032371.html>.

We pass out the computational work to other processes over unix-domain-sockets 
to avoid the GIL issues.

> 
> Though the mechanisms differ athis thread on the topicny of the above would
> cause the response time to increase as you add load.
> 
> Good luck,
> Tom

Barry





From contact at evilham.com  Thu Jul 11 03:33:49 2019
From: contact at evilham.com (Evilham)
Date: Thu, 11 Jul 2019 11:33:49 +0200
Subject: [Twisted-Python] New release of ldaptor
In-Reply-To: <ed592e1269b0444c8b63737c20c8d546@BYEX35.de.bayer.cnb>
References: <ed592e1269b0444c8b63737c20c8d546@BYEX35.de.bayer.cnb>
Message-ID: <925fb3b2-e406-47e3-a0d4-9e70f47b0be0@skuld.camilion.eu>

On dt., jul. 09 2019, Thomas Westfeld wrote:

> Dear all,
>
> I would love to see a new release of ldaptor, which incorporates 
> the recent compatibility fixes with python 3.
>
> Furthermore I have submitted a new pull request for ticket #9596 
> and revised my pull request about documentation fixes #9243.
>
> Best regards,
> Thomas

This would be awesome indeed.

I keep going even if maybe only tangentially related: I want to 
stop deploying my ugly hacks to klein :-D [1].
[1]: https://github.com/twisted/klein/issues/96

The reason why I raise that is because IIUC, ldaptor and klein 
have the same kind of relationship to the Twisted project?

Is there anything specific that can be done to help with the 
releases of these non-core but very related and useful components?
--
Evilham



From jaroslaw.fedewicz at gmail.com  Thu Jul 11 04:00:33 2019
From: jaroslaw.fedewicz at gmail.com (=?UTF-8?Q?Jaros=C5=82aw_Fedewicz?=)
Date: Thu, 11 Jul 2019 12:00:33 +0200
Subject: [Twisted-Python] Need some enlightenment on using web client
 properly, or maybe nudge a bug to get fixed
In-Reply-To: <43260BF0-3DA9-4833-9015-78C27BB599CF@twistedmatrix.com>
References: <CA+HdgOXTOSxzFYEZ-5Ar07G_V+rveaPMBRuqW7u6txdkwqY8KQ@mail.gmail.com>
 <43260BF0-3DA9-4833-9015-78C27BB599CF@twistedmatrix.com>
Message-ID: <CA+HdgOVtXxbyfR62Crj0YBCfvuy-NeV7v__UdUGxGzwpsT-=xg@mail.gmail.com>

So far, I tried to minimize a test case, but it seems like it's really
picky about what environment it's running in. One of those cases where "it
works on my machine", I suppose. The versions are as follows:

cryptography==2.7
pyOpenSSL==19.0.0
asn1crypto==0.24.0
pyasn1==0.4.5
pyasn1-modules==0.2.5
Twisted==19.2.1

The target machine is running Xenial, so openssl 1.0.0g.

My local machine runs Fedora 30, thus openssl 1.1.1c.

Is there a neat way to list all pyOpenSSL objects in a running Twisted
program? Or maybe TCPConnection objects, since those might hook to the
zope.interface machinery?

On Thu, Jul 11, 2019 at 9:20 AM Glyph <glyph at twistedmatrix.com> wrote:

> Hi Jarosław!
>
> On Jul 1, 2019, at 4:48 PM, Jarosław Fedewicz <jaroslaw.fedewicz at gmail.com>
> wrote:
>
> I have written a simple service which takes data from network, massages it
> until it's useful enough, and sends the results out periodically via HTTP
> to an API.
>
>
> A reasonable start :-).
>
> It all works for a while, then I get an error like this approximately 40
> minutes into the service's uptime:
>
> ResponseNeverReceived: [<twisted.python.failure.Failure
> OpenSSL.SSL.ZeroReturnError: >]
>
>
> Then a couple more like this:
>
> ResponseNeverReceived: [<twisted.python.failure.Failure
> twisted.internet.error.ConnectionLost: Connection to the other side was
> lost in a non-clean fashion: Connection lost.>]
>
>
> Then it ends with
>
> TimeoutError: User timeout caused connection failure.
>
>
> Then every request results in the same TimeoutError. I don't know if using
> HTTPS important in this case.
>
>
> I'm pretty sure the presence of an OpenSSL.SSL error indeed means that
> HTTPS is important.
>
> Restarting the whole service, of course, makes the problem go for a while.
> The other side is the Slack API, so I rather assume it's not very much to
> blame, it can be demonstrated to work rather reliably, all its criticisms
> notwithstanding.
>
>
> It does seem likely that the clustering of errors you're seeing are a
> local problem with Twisted.
>
> I cannot yet tell if this bug is a function of uptime, or the number of
> requests made.
>
>
> My personal guess is that it has something to do with the number of the
> TCP connections; or, specifically, the number of pyOpenSSL 'Connection'
> objects.
>
> I have tried to work around the problem by discarding the agent object,
> and using an HTTPConnectionPool with persistent=False, but it didn't help
> at all. I think it made the problem worse because the framework seems to
> refer to some objects the Agent creates, and the process becomes a CPU hogs
> in a couple hours (with the TimeoutErrors still happening all the time).
>
>
> I have a slight suspicion that the thing that is leaking between
> connections here is the pyOpenSSL "Context" object.  We recently
> implemented an optimization which shares the Context object among multiple
> Connection objects that reference the same host.  What version of Twisted
> area you using, and what version of OpenSSL, pyOpenSSL, and Cryptography?
>
> I'm curious if you reverse that optimization, if it would make any
> different to your use-case.
>
> The closest I've got on the internets which describes a similar problem,
> apart from people complaining on StackOverflow about precisely this to
> happen when they are using Scrapy, is this blog post from almost a decade
> ago:
> http://www.chris-wong.net/twisted-web-framework-user-timeout-caused-connection-failure/
> .
>
>
> This definitely seems like a bug, if it's occurring in multiple places.
>
> There could be a small chance I'm holding it wrong(tm), but maybe there
> exists a ticket, just worded differently, which could help me get to the
> bottom of it.
>
>
> I don't think that any open tickets describe your precise issue.  So
> please do open one.  And if possible, can you minimize a proof of concept?
> Some example code would go a long way to helping to isolate this.
>
> -glyph
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


-- 
Yaroslav Fedevych
IT Philosopher
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190711/6eb98237/attachment-0002.html>

From maarten at treewalker.org  Thu Jul 11 04:19:10 2019
From: maarten at treewalker.org (Maarten ter Huurne)
Date: Thu, 11 Jul 2019 12:19:10 +0200
Subject: [Twisted-Python] Need some enlightenment on using web client
 properly, or maybe nudge a bug to get fixed
In-Reply-To: <CA+HdgOVtXxbyfR62Crj0YBCfvuy-NeV7v__UdUGxGzwpsT-=xg@mail.gmail.com>
References: <CA+HdgOXTOSxzFYEZ-5Ar07G_V+rveaPMBRuqW7u6txdkwqY8KQ@mail.gmail.com>
 <43260BF0-3DA9-4833-9015-78C27BB599CF@twistedmatrix.com>
 <CA+HdgOVtXxbyfR62Crj0YBCfvuy-NeV7v__UdUGxGzwpsT-=xg@mail.gmail.com>
Message-ID: <12310093.hddBGRg2eU@hyperion>

On Thursday, 11 July 2019 12:00:33 CEST Jarosław Fedewicz wrote:

> Is there a neat way to list all pyOpenSSL objects in a running Twisted
> program? Or maybe TCPConnection objects, since those might hook to
> the zope.interface machinery?

Not specific to Twisted, but you can get a list of all objects tracked 
by the garbage collector using "gc.get_objects()" and then filter that 
by class.

Bye,
		Maarten





From barry.scott at forcepoint.com  Thu Jul 11 10:39:48 2019
From: barry.scott at forcepoint.com (Scott, Barry)
Date: Thu, 11 Jul 2019 16:39:48 +0000
Subject: [Twisted-Python] Need some enlightenment on using web client
 properly, or maybe nudge a bug to get fixed
In-Reply-To: <CA+HdgOVtXxbyfR62Crj0YBCfvuy-NeV7v__UdUGxGzwpsT-=xg@mail.gmail.com>
References: <CA+HdgOXTOSxzFYEZ-5Ar07G_V+rveaPMBRuqW7u6txdkwqY8KQ@mail.gmail.com>
 <43260BF0-3DA9-4833-9015-78C27BB599CF@twistedmatrix.com>
 <CA+HdgOVtXxbyfR62Crj0YBCfvuy-NeV7v__UdUGxGzwpsT-=xg@mail.gmail.com>
Message-ID: <1732319.jgNvhDyA7E@barry-scott-desktop>

On Thursday, 11 July 2019 11:00:33 BST Jarosław Fedewicz wrote:
> So far, I tried to minimize a test case, but it seems like it's really
> picky about what environment it's running in. One of those cases where "it
> works on my machine", I suppose. The versions are as follows:
> 
> cryptography==2.7
> pyOpenSSL==19.0.0
> asn1crypto==0.24.0
> pyasn1==0.4.5
> pyasn1-modules==0.2.5
> Twisted==19.2.1
> 
> The target machine is running Xenial, so openssl 1.0.0g.

That's old... Can you go to 1.0.2s?
I recall that pyOpenSSL may need newer openssl - might be wrong on this.

> My local machine runs Fedora 30, thus openssl 1.1.1c.
> 
> Is there a neat way to list all pyOpenSSL objects in a running Twisted
> program? Or maybe TCPConnection objects, since those might hook to the
> zope.interface machinery?

You can use the gc to help with this sort of debugging.

gc.collect()
for obj in gc.get_objects():
     do something interesting with obj

You could count the number of each type of obj and look for which ones 
increase over time.

Barry



> 
> On Thu, Jul 11, 2019 at 9:20 AM Glyph <glyph at twistedmatrix.com> wrote:
> > Hi Jarosław!
> > 
> > On Jul 1, 2019, at 4:48 PM, Jarosław Fedewicz
> > <jaroslaw.fedewicz at gmail.com>
> > wrote:
> > 
> > I have written a simple service which takes data from network, massages it
> > until it's useful enough, and sends the results out periodically via HTTP
> > to an API.
> > 
> > 
> > A reasonable start :-).
> > 
> > It all works for a while, then I get an error like this approximately 40
> > minutes into the service's uptime:
> > 
> > ResponseNeverReceived: [<twisted.python.failure.Failure
> > OpenSSL.SSL.ZeroReturnError: >]
> > 
> > 
> > Then a couple more like this:
> > 
> > ResponseNeverReceived: [<twisted.python.failure.Failure
> > twisted.internet.error.ConnectionLost: Connection to the other side was
> > lost in a non-clean fashion: Connection lost.>]
> > 
> > 
> > Then it ends with
> > 
> > TimeoutError: User timeout caused connection failure.
> > 
> > 
> > Then every request results in the same TimeoutError. I don't know if using
> > HTTPS important in this case.
> > 
> > 
> > I'm pretty sure the presence of an OpenSSL.SSL error indeed means that
> > HTTPS is important.
> > 
> > Restarting the whole service, of course, makes the problem go for a while.
> > The other side is the Slack API, so I rather assume it's not very much to
> > blame, it can be demonstrated to work rather reliably, all its criticisms
> > notwithstanding.
> > 
> > 
> > It does seem likely that the clustering of errors you're seeing are a
> > local problem with Twisted.
> > 
> > I cannot yet tell if this bug is a function of uptime, or the number of
> > requests made.
> > 
> > 
> > My personal guess is that it has something to do with the number of the
> > TCP connections; or, specifically, the number of pyOpenSSL 'Connection'
> > objects.
> > 
> > I have tried to work around the problem by discarding the agent object,
> > and using an HTTPConnectionPool with persistent=False, but it didn't help
> > at all. I think it made the problem worse because the framework seems to
> > refer to some objects the Agent creates, and the process becomes a CPU
> > hogs
> > in a couple hours (with the TimeoutErrors still happening all the time).
> > 
> > 
> > I have a slight suspicion that the thing that is leaking between
> > connections here is the pyOpenSSL "Context" object.  We recently
> > implemented an optimization which shares the Context object among multiple
> > Connection objects that reference the same host.  What version of Twisted
> > area you using, and what version of OpenSSL, pyOpenSSL, and Cryptography?
> > 
> > I'm curious if you reverse that optimization, if it would make any
> > different to your use-case.
> > 
> > The closest I've got on the internets which describes a similar problem,
> > apart from people complaining on StackOverflow about precisely this to
> > happen when they are using Scrapy, is this blog post from almost a decade
> > ago:
> > http://www.chris-wong.net/twisted-web-framework-user-timeout-caused-connec
> > tion-failure/ .
> > 
> > 
> > This definitely seems like a bug, if it's occurring in multiple places.
> > 
> > There could be a small chance I'm holding it wrong(tm), but maybe there
> > exists a ticket, just worded differently, which could help me get to the
> > bottom of it.
> > 
> > 
> > I don't think that any open tickets describe your precise issue.  So
> > please do open one.  And if possible, can you minimize a proof of concept?
> > Some example code would go a long way to helping to isolate this.
> > 
> > -glyph
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python





From sean.dizazzo at gmail.com  Thu Jul 11 15:34:40 2019
From: sean.dizazzo at gmail.com (Sean DiZazzo)
Date: Thu, 11 Jul 2019 14:34:40 -0700
Subject: [Twisted-Python] Twisted tips for designing highly concurrent
 twisted REST API
In-Reply-To: <3489907.MZb2G9KHjS@barry-scott-desktop>
References: <CAJuJkHMZPUu0gNi=XcFyUNpGLrsJPMifgb24_14i0e=caa1hnA@mail.gmail.com>
 <CAJuJkHN6ODsRZwBz4THpY23ZkcaMZ9hpnNCwDcQx4w94bHuOZA@mail.gmail.com>
 <e4757021-5ad8-4b4a-9eb2-120fd3a5de2f@www.fastmail.com>
 <3489907.MZb2G9KHjS@barry-scott-desktop>
Message-ID: <CANzH6es+PriPReJiVRqAo5U4BGdR+-mXhR4kPOUC3ARHkpvRrQ@mail.gmail.com>

Klein and Crossbar.io seem relevant as well

https://crossbario.com/blog/Going-Asynchronous-from-Flask-to-Twisted-Klein/

On Thu, Jul 11, 2019 at 1:46 AM Scott, Barry <barry.scott at forcepoint.com>
wrote:

> On Tuesday, 9 July 2019 22:04:11 BST Tom Most wrote:
>
> ...snip...
>
> > The reactor's own thread pool is really for DNS
> > resolution.
>
> Is that still true in the default case? We are use the twisted code that
> talks
> to DNS servers as the threaded resolver adds too much latency.
>
> > You risk deadlocks in a system that
> > ThreadPoolThreadPoolThreadPool
> >
> > 3. The specifics of what long_computation are also important. If it
> doesn't
> > release the GIL you won't get real parallelism (this is a Python thing,
> not
> > a Twisted thing). See this recent thread on the topic
> > <
> https://twistedmatrix.com/pipermail/twisted-python/2019-June/032371.html>.
>
> We pass out the computational work to other processes over
> unix-domain-sockets
> to avoid the GIL issues.
>
> >
> > Though the mechanisms differ athis thread on the topicny of the above
> would
> > cause the response time to increase as you add load.
> >
> > Good luck,
> > Tom
>
> Barry
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190711/984889cc/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Jul 11 23:25:53 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 11 Jul 2019 22:25:53 -0700
Subject: [Twisted-Python] some logging thoughts
Message-ID: <5784E0DE-AE71-43D0-9CE8-FCB7CBDCF3A8@twistedmatrix.com>

L. Daniel Burr and I got up to some interesting reflections on Twisted's logging system in this Ampoule PR: https://github.com/twisted/ampoule/pull/29/files/268e4dcd8072d37780fd7ff0d875e614aa7da040#r299336179 <https://github.com/twisted/ampoule/pull/29/files/268e4dcd8072d37780fd7ff0d875e614aa7da040#r299336179>

This discussion may be of some general interest to folks on this list.

(Also, this is a good opportunity to remind anybody who is looking for small ways to improve Twisted that porting things from twisted.python.log to twisted.logger is generaly a net win :))

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190711/d26dd70e/attachment-0002.html>

From twm at freecog.net  Fri Jul 12 23:57:08 2019
From: twm at freecog.net (Tom Most)
Date: Fri, 12 Jul 2019 22:57:08 -0700
Subject: [Twisted-Python] 
 =?utf-8?q?Twisted_tips_for_designing_highly_con?=
 =?utf-8?q?current_twisted_REST_API?=
In-Reply-To: <3489907.MZb2G9KHjS@barry-scott-desktop>
References: <CAJuJkHMZPUu0gNi=XcFyUNpGLrsJPMifgb24_14i0e=caa1hnA@mail.gmail.com>
 <CAJuJkHN6ODsRZwBz4THpY23ZkcaMZ9hpnNCwDcQx4w94bHuOZA@mail.gmail.com>
 <e4757021-5ad8-4b4a-9eb2-120fd3a5de2f@www.fastmail.com>
 <3489907.MZb2G9KHjS@barry-scott-desktop>
Message-ID: <b4a3583a-7802-437e-9d0b-952bdb8a6893@www.fastmail.com>

On Thu, Jul 11, 2019, at 1:46 AM, Scott, Barry wrote:
> On Tuesday, 9 July 2019 22:04:11 BST Tom Most wrote:
> 
> ...snip...
> 
> > The reactor's own thread pool is really for DNS resolution.
> 
> Is that still true in the default case? We are use the twisted code that talks 
> to DNS servers as the threaded resolver adds too much latency.

As far as I know, yes. The higher-level APIs use getaddrinfo() at least.

https://twistedmatrix.com/documents/current/api/twisted.internet._resolver.GAIResolver.html
https://github.com/twisted/twisted/blob/c0776850e756adfcdc179a7fd9e4c8f5cbc4838d/src/twisted/internet/base.py#L1007

TCP6ClientEndpoint also invoke getaddrinfo() directly.

twisted.names is certainly more performance but it's missing some system integration features that make it unsuitable as a default:

* No support for the domain or search resolv.conf directives
* No NSS lookups (e.g., systemd integration)

This is all on Linux, YMMV on other platforms.

---Tom



From wk80333 at gmail.com  Sat Jul 13 01:24:36 2019
From: wk80333 at gmail.com (Waqar Khan)
Date: Sat, 13 Jul 2019 03:24:36 -0400
Subject: [Twisted-Python] Twisted tips for designing highly concurrent
 twisted REST API
In-Reply-To: <b4a3583a-7802-437e-9d0b-952bdb8a6893@www.fastmail.com>
References: <CAJuJkHMZPUu0gNi=XcFyUNpGLrsJPMifgb24_14i0e=caa1hnA@mail.gmail.com>
 <CAJuJkHN6ODsRZwBz4THpY23ZkcaMZ9hpnNCwDcQx4w94bHuOZA@mail.gmail.com>
 <e4757021-5ad8-4b4a-9eb2-120fd3a5de2f@www.fastmail.com>
 <3489907.MZb2G9KHjS@barry-scott-desktop>
 <b4a3583a-7802-437e-9d0b-952bdb8a6893@www.fastmail.com>
Message-ID: <CAJuJkHNW2+1ywcLTjd3E4yuDiCh0AXVRAPDPpEH1j1YPCVq7-w@mail.gmail.com>

Hi,
  Thank you all for your kind response.

So, I am trying to use treq library

import treq

@defer.inlinecallbacks

def long_computation(rec_type, data):
     # some long computation
     *defer.returnValue(recs)*

@defer.inlinecallbacks
def fetch_data(user_id):
        r = yield treq.get('url/to/fetch/%s'%user_id)
    text = yield r.text()
     defer.returnValue(text)


@defer.inlinecallbacks
def fetch_recs(user_id):
       data = yield fetch_data(user_id)
        recs = {}
       for stype in similar_types:
            *d = defer.ToThread(long_computation, *(stype, data)) // typo
was here*

Now, I do believe that the call is happening asyncronously. So.. yay..

But then, I feel like I have a misconception on how the yield works.
data = yield fetch_data(user_id)
I was hoping data here was actual data.. But it is a deferred.. Which makes
sense.
And then.. this deferred is being passed on instead of the actual data...

My couple of questions are:
1) What is the difference between data = yield fetch_data(user_id) and data
= fetch_data(user_id) (without yield). How does twisted handle these two ?
2) How do I actually send the data to long computation rather than a
deferred.

Appreciate all the help.
Thanks


On Sat, Jul 13, 2019 at 1:57 AM Tom Most <twm at freecog.net> wrote:

> On Thu, Jul 11, 2019, at 1:46 AM, Scott, Barry wrote:
> > On Tuesday, 9 July 2019 22:04:11 BST Tom Most wrote:
> >
> > ...snip...
> >
> > > The reactor's own thread pool is really for DNS resolution.
> >
> > Is that still true in the default case? We are use the twisted code that
> talks
> > to DNS servers as the threaded resolver adds too much latency.
>
> As far as I know, yes. The higher-level APIs use getaddrinfo() at least.
>
>
> https://twistedmatrix.com/documents/current/api/twisted.internet._resolver.GAIResolver.html
>
> https://github.com/twisted/twisted/blob/c0776850e756adfcdc179a7fd9e4c8f5cbc4838d/src/twisted/internet/base.py#L1007
>
> TCP6ClientEndpoint also invoke getaddrinfo() directly.
>
> twisted.names is certainly more performance but it's missing some system
> integration features that make it unsuitable as a default:
>
> * No support for the domain or search resolv.conf directives
> * No NSS lookups (e.g., systemd integration)
>
> This is all on Linux, YMMV on other platforms.
>
> ---Tom
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190713/7a922c7d/attachment-0002.html>

From trac at twistedmatrix.com  Sun Jul 14 00:05:19 2019
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 14 Jul 2019 06:05:19 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1563084319.13.1540663787600050832@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190714/e375c9eb/attachment-0002.html>

From glyph at twistedmatrix.com  Sun Jul 14 01:47:03 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 14 Jul 2019 00:47:03 -0700
Subject: [Twisted-Python] New release of ldaptor
In-Reply-To: <925fb3b2-e406-47e3-a0d4-9e70f47b0be0@skuld.camilion.eu>
References: <ed592e1269b0444c8b63737c20c8d546@BYEX35.de.bayer.cnb>
 <925fb3b2-e406-47e3-a0d4-9e70f47b0be0@skuld.camilion.eu>
Message-ID: <A9C9A6E4-9192-4FD1-B965-9F49BAAAAD59@twistedmatrix.com>



> On Jul 11, 2019, at 2:33 AM, Evilham <contact at evilham.com> wrote:
> 
> On dt., jul. 09 2019, Thomas Westfeld wrote:
> 
>> Dear all,
>> 
>> I would love to see a new release of ldaptor, which incorporates the recent compatibility fixes with python 3.
>> 
>> Furthermore I have submitted a new pull request for ticket #9596 and revised my pull request about documentation fixes #9243.
>> 
>> Best regards,
>> Thomas
> 
> This would be awesome indeed.
> 
> I keep going even if maybe only tangentially related: I want to stop deploying my ugly hacks to klein :-D [1].
> [1]: https://github.com/twisted/klein/issues/96 <https://github.com/twisted/klein/issues/96>

As you've seen, there's a new release now, so presumably you can just upgrade :).

> The reason why I raise that is because IIUC, ldaptor and klein have the same kind of relationship to the Twisted project?

Roughly, yes.  I think there's more maintainer overlap with Klein than with Ldaptor though, possibly just due to the broader applicability of "web".

> Is there anything specific that can be done to help with the releases of these non-core but very related and useful components?

In the short term - volunteer to be a release manager for one of these projects to try to coordinate a release :).

In the long term and more significantly, the thing would be to build a fully-automated release pipeline; make it possible for travis to push straight to PyPI on an appropriate tag, like what https://github.com/audreyr/cookiecutter-pypackage <https://github.com/audreyr/cookiecutter-pypackage> does.  This isn't as hard as it sounds, and that template has a good example you could work from.

-glyph


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190714/6a090d82/attachment-0002.html>

From tobias.oberstein at crossbario.com  Sun Jul 14 03:39:29 2019
From: tobias.oberstein at crossbario.com (Tobias Oberstein)
Date: Sun, 14 Jul 2019 11:39:29 +0200
Subject: [Twisted-Python] Twisted tips for designing highly concurrent
 twisted REST API
In-Reply-To: <CANzH6es+PriPReJiVRqAo5U4BGdR+-mXhR4kPOUC3ARHkpvRrQ@mail.gmail.com>
References: <CAJuJkHMZPUu0gNi=XcFyUNpGLrsJPMifgb24_14i0e=caa1hnA@mail.gmail.com>
 <CAJuJkHN6ODsRZwBz4THpY23ZkcaMZ9hpnNCwDcQx4w94bHuOZA@mail.gmail.com>
 <e4757021-5ad8-4b4a-9eb2-120fd3a5de2f@www.fastmail.com>
 <3489907.MZb2G9KHjS@barry-scott-desktop>
 <CANzH6es+PriPReJiVRqAo5U4BGdR+-mXhR4kPOUC3ARHkpvRrQ@mail.gmail.com>
Message-ID: <65f1fb18-52b1-c239-e27f-a89bce6a31e4@crossbario.com>

Am 11.07.19 um 23:34 schrieb Sean DiZazzo:
> Klein and Crossbar.io seem relevant as well
> 
> https://crossbario.com/blog/Going-Asynchronous-from-Flask-to-Twisted-Klein/

yeah, klein is neat!

fwiw, this might also be of interest, as it allows to scale-up twisted 
web (and hence also klein) on multi-core (on linux)

https://github.com/crossbario/crossbar-examples/tree/master/benchmark/web

combining SO_REUSEPORT with Klein results in a concurrent, async 
(threadless) server parallelized via processes ..

> 
> On Thu, Jul 11, 2019 at 1:46 AM Scott, Barry <barry.scott at forcepoint.com 
> <mailto:barry.scott at forcepoint.com>> wrote:
> 
>     On Tuesday, 9 July 2019 22:04:11 BST Tom Most wrote:
> 
>     ...snip...
> 
>      > The reactor's own thread pool is really for DNS
>      > resolution.
> 
>     Is that still true in the default case? We are use the twisted code
>     that talks
>     to DNS servers as the threaded resolver adds too much latency.
> 
>      > You risk deadlocks in a system that
>      > ThreadPoolThreadPoolThreadPool
>      >
>      > 3. The specifics of what long_computation are also important. If
>     it doesn't
>      > release the GIL you won't get real parallelism (this is a Python
>     thing, not
>      > a Twisted thing). See this recent thread on the topic
>      >
>     <https://twistedmatrix.com/pipermail/twisted-python/2019-June/032371.html>.
> 
>     We pass out the computational work to other processes over
>     unix-domain-sockets
>     to avoid the GIL issues.
> 
>      >
>      > Though the mechanisms differ athis thread on the topicny of the
>     above would
>      > cause the response time to increase as you add load.
>      >
>      > Good luck,
>      > Tom
> 
>     Barry
> 
> 
> 
>     _______________________________________________
>     Twisted-Python mailing list
>     Twisted-Python at twistedmatrix.com
>     <mailto:Twisted-Python at twistedmatrix.com>
>     https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 


-- 

Tobias Oberstein - phone +49 176 2375 2055 - tobias.oberstein at crossbario.com
Crossbar.io GmbH - Waldstrasse 18 - 91054 Erlangen
HRB 15870 - Amtsgericht Fuerth - Geschäftsfuehrer/CEO - Tobias Oberstein

https://crossbar.io
https://crossbario.com



From trac at twistedmatrix.com  Sun Jul 21 00:05:18 2019
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 21 Jul 2019 06:05:18 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1563689118.51.6359903206287300005@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190721/10a4596f/attachment-0002.html>

From hawkowl at atleastfornow.net  Sun Jul 21 10:24:35 2019
From: hawkowl at atleastfornow.net (Amber Brown)
Date: Mon, 22 Jul 2019 02:24:35 +1000
Subject: [Twisted-Python] Twisted 19.7.0rc1 Release Candidate Announcement
Message-ID: <86e292fc-b7c7-4040-5704-f634a27c1a06@atleastfornow.net>

Hello! It's time for another Twisted release!

This one is full o' stuff, including:

- The dropping of Python 3.4 support,
- A better PyPI page,
- twisted.internet.testing, a public-API version of twisted.test.proto_helpers,
- Support for hmac-sha2-512 as a server in Conch,
- Customisable certificate support for XMPP,
- Tightening up of bytes/unicode arguments in Agent and twisted.web in general,
- and a raft of removals of deprecated cruft.

You can get the tarball and the NEWS file at https://twistedmatrix.com/Releases/rc/19.7.0rc1/ , or you can try it out from PyPI:

      python -m pip install Twisted==19.7.0rc1

Please test it, and let me know how your applications fare, good or bad! If nothing comes up, 19.7 will release in a week.

Twisted regards,

Amber Brown (hawkowl)

PS: The full release will come with MacOS and Linux wheels for all supported Python versions, but may not come with Windows wheels.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190722/dcb905f9/attachment-0002.html>

From hawkowl at atleastfornow.net  Sun Jul 21 10:30:16 2019
From: hawkowl at atleastfornow.net (Amber Brown)
Date: Mon, 22 Jul 2019 02:30:16 +1000
Subject: [Twisted-Python] Twisted 19.7.0rc1 Release Candidate
 Announcement
In-Reply-To: <86e292fc-b7c7-4040-5704-f634a27c1a06@atleastfornow.net>
References: <86e292fc-b7c7-4040-5704-f634a27c1a06@atleastfornow.net>
Message-ID: <c2391dd0-226c-4464-9276-9cad15edbf31@atleastfornow.net>


On 22/7/19 2:24 am, Amber Brown wrote:
> Hello! It's time for another Twisted release!
>
> This one is full o' stuff, including:
>
> - The dropping of Python 3.4 support,
> - A better PyPI page,
> - twisted.internet.testing, a public-API version of twisted.test.proto_helpers,
> - Support for hmac-sha2-512 as a server in Conch,
> - Customisable certificate support for XMPP,
> - Tightening up of bytes/unicode arguments in Agent and twisted.web in general,
> - and a raft of removals of deprecated cruft.
>
> You can get the tarball and the NEWS file athttps://twistedmatrix.com/Releases/rc/19.7.0rc1/  , or you can try it out from PyPI:
>
>       python -m pip install Twisted==19.7.0rc1
>
> Please test it, and let me know how your applications fare, good or bad! If nothing comes up, 19.7 will release in a week.
>
> Twisted regards,
>
> Amber Brown (hawkowl)
>
> PS: The full release will come with MacOS and Linux wheels for all supported Python versions, but may not come with Windows wheels.


Correction: We will have MacOS, Linux (32+64), and Windows (32+64) 
wheels for all supported Python versions.

(Also thanks to altendky who did all the work to make this possible!)


- Amber

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190722/ef9cc253/attachment-0002.html>

From glyph at twistedmatrix.com  Sun Jul 21 18:14:31 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 21 Jul 2019 17:14:31 -0700
Subject: [Twisted-Python] Twisted 19.7.0rc1 Release Candidate
 Announcement
In-Reply-To: <c2391dd0-226c-4464-9276-9cad15edbf31@atleastfornow.net>
References: <86e292fc-b7c7-4040-5704-f634a27c1a06@atleastfornow.net>
 <c2391dd0-226c-4464-9276-9cad15edbf31@atleastfornow.net>
Message-ID: <cc2d72d2-4420-47da-9ddc-32481544cd89@www.fastmail.com>

On Sun, Jul 21, 2019, at 9:30 AM, Amber Brown wrote:
> 

> On 22/7/19 2:24 am, Amber Brown wrote:
>> Hello! It's time for another Twisted release!

This one is full o' stuff, including:

- The dropping of Python 3.4 support,
- A better PyPI page,
- twisted.internet.testing, a public-API version of twisted.test.proto_helpers,
- Support for hmac-sha2-512 as a server in Conch,
- Customisable certificate support for XMPP,
- Tightening up of bytes/unicode arguments in Agent and twisted.web in general,
- and a raft of removals of deprecated cruft.

You can get the tarball and the NEWS file at https://twistedmatrix.com/Releases/rc/19.7.0rc1/ , or you can try it out from PyPI:

     python -m pip install Twisted==19.7.0rc1

Please test it, and let me know how your applications fare, good or bad! If nothing comes up, 19.7 will release in a week.

Twisted regards,

Amber Brown (hawkowl)

PS: The full release will come with MacOS and Linux wheels for all supported Python versions, but may not come with Windows wheels.
>> 
> 

> Correction: We will have MacOS, Linux (32+64), and Windows (32+64) wheels for all supported Python versions.

> (Also thanks to altendky who did all the work to make this possible!)


Wow! Thanks so much for everyone who contributed to this amazing release. The PyPI, twisted.internet.testing, and wheels changes are all huge quality-of-life improvements for the project and I really appreciate all the effort everyone made to getting these to happen.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190721/8f150b2d/attachment-0002.html>

From barry.scott at forcepoint.com  Thu Jul 25 03:30:48 2019
From: barry.scott at forcepoint.com (Scott, Barry)
Date: Thu, 25 Jul 2019 09:30:48 +0000
Subject: [Twisted-Python] Twisted 19.7.0rc1 Release Candidate
 Announcement
In-Reply-To: <86e292fc-b7c7-4040-5704-f634a27c1a06@atleastfornow.net>
References: <86e292fc-b7c7-4040-5704-f634a27c1a06@atleastfornow.net>
Message-ID: <1647410.6S6GMSpuXt@barry-scott-desktop>

On Sunday, 21 July 2019 17:24:35 BST Amber Brown wrote:
> Hello! It's time for another Twisted release!
> 
> This one is full o' stuff, including:
> 
> - The dropping of Python 3.4 support,

Does this still support python 2.7?

Barry





From hawkowl at atleastfornow.net  Fri Jul 26 04:00:43 2019
From: hawkowl at atleastfornow.net (Amber Brown)
Date: Fri, 26 Jul 2019 20:00:43 +1000
Subject: [Twisted-Python] Twisted 19.7.0rc1 Release Candidate
 Announcement
In-Reply-To: <1647410.6S6GMSpuXt@barry-scott-desktop>
References: <86e292fc-b7c7-4040-5704-f634a27c1a06@atleastfornow.net>
 <1647410.6S6GMSpuXt@barry-scott-desktop>
Message-ID: <4abe1dd5-6a8d-4f66-bb5e-7da529a29939@www.fastmail.com>



On Fri, 26 Jul 2019, at 19:38, Scott, Barry wrote:
> On Sunday, 21 July 2019 17:24:35 BST Amber Brown wrote:
> > Hello! It's time for another Twisted release!
> > 
> > This one is full o' stuff, including:
> > 
> > - The dropping of Python 3.4 support,
> 
> Does this still support python 2.7?
> 
> Barry
> 

It sure does :) My written plans for Python 2.7 deprecation have not been fully decided upon. 

- Amber



From trac at twistedmatrix.com  Sun Jul 28 00:05:18 2019
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 28 Jul 2019 06:05:18 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1564293918.64.367910677247989967@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190728/8cf58b99/attachment-0002.html>

