From kevin.horn at gmail.com  Sun May  1 13:02:07 2016
From: kevin.horn at gmail.com (Kevin Horn)
Date: Sun, 1 May 2016 14:02:07 -0500
Subject: [Twisted-Python] Changes to Twisted's Trac (GitHub
	Authentication)
In-Reply-To: <9C021F7C-297A-4D8D-8C47-32B66DC57FC1@atleastfornow.net>
References: <9C021F7C-297A-4D8D-8C47-32B66DC57FC1@atleastfornow.net>
Message-ID: <CA+U=zK2qB=qV-VQibPRS=1siM14=0Oa4_OJYntCfhQBqgFESTg@mail.gmail.com>

On Wed, Apr 27, 2016 at 6:13 AM, Amber "Hawkie" Brown <
hawkowl at atleastfornow.net> wrote:

> Hi everyone,
>
> If you've ever had your password eaten by our Trac instance, had your
> comment rejected by spambayes, or seen the amount of effort it takes
> removing random nulls from our htpasswd files, rejoice! With
> https://github.com/twisted-infra/braid/pull/192 , we are moving our Trac
> instance to log in using GitHub OAuth. This should mean we solve the issue
> of keeping passwords (making you and us more secure), being able to turn
> off the spam filter (as we don't have anonymous ticket submittal, and
> github is better at catching spammers than we are), and hopefully cause
> less ongoing issues with passwords suddenly not working.
>
> What this means for you is that your username and password will no longer
> work for logging into our Trac, you will need to authorise your GitHub
> login to access it. This means that you may have another username, please
> contact me privately and I will see what I can do about migrating any
> ticket histories over, if you feel like it is needed.
>
> - Amber
>
>
Fantastic!

--
Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160501/f2567f0c/attachment.html>

From techtonik at gmail.com  Mon May  2 07:16:11 2016
From: techtonik at gmail.com (anatoly techtonik)
Date: Mon, 2 May 2016 16:16:11 +0300
Subject: [Twisted-Python] [MIGRATION COMPLETE] Changes to Twisted's Trac
 (GitHub Authentication)
In-Reply-To: <F5CE77AA-3475-47F2-BCD6-F6BA35314D0C@twistedmatrix.com>
References: <9C021F7C-297A-4D8D-8C47-32B66DC57FC1@atleastfornow.net>
 <4046BCB1-1EDA-44F7-A17B-7FEB0AB8BA33@atleastfornow.net>
 <F5CE77AA-3475-47F2-BCD6-F6BA35314D0C@twistedmatrix.com>
Message-ID: <CAPkN8xLd3gyh5L3Y-aENM=HKs=rs6UZ2a-gRT8Kdk2zg5vKrfg@mail.gmail.com>

On Wed, Apr 27, 2016 at 8:54 PM, Glyph <glyph at twistedmatrix.com> wrote:
>
> On Apr 27, 2016, at 4:45 AM, Amber Hawkie Brown <hawkowl at atleastfornow.net>
> wrote:
>
> I would like to note that this migration has now finished, and you can now
> log in via GitHub. Legacy logins have been disabled, and previous admin
> accounts (except for a current handful) have been revoked in the name of
> minimising our security surface; if you once had access to our Trac and
> would like to still use it, please let me know what your GitHub user account
> is, and I can set those permissions back up.
>
>
> Amazing! :-D.

+1

> I feel a disturbance in the force, as if a million spammers cried out, and
> were suddenly silenced :-).

More interesting is a disturbance caused by login fatigue relief for millions
of twisted users. =)


From dansut at gmail.com  Fri May  6 11:19:49 2016
From: dansut at gmail.com (Daniel Sutcliffe)
Date: Fri, 6 May 2016 13:19:49 -0400
Subject: [Twisted-Python] Looking for help dealing with ClientService
	reconnections
Message-ID: <CADzPF4vD4yf64OHtf=H62BZrez7jewo_XSMDhP3YuabUQOwmZg@mail.gmail.com>

Hello all, my first post here - only been using Twisted for about a
month and am also a relative newcomer to Python but have been coding
professionally for 20+ years. I was attracted to Twisted and Python
for a particular project purely because after research it seemed to be
the best tool for the job, and have actually been enjoying both Python
and Twisted much more than I ever thought I would.

The project I am coding towards is creating a sensor data collection
gateway. First iteration needs are simply pulling data from ModBus TCP
slave PLCs and writing it to a MySQL database, but goals beyond that
are making the source of the data and its destination(s) very
flexible(pluggable). Therefore I am trying to create a good clean
architecture from the outset so as I iterate forwards I don't finish
up having to take too many steps backwards before heading forwards.

I am using pymodbus to pull the data which works well for my devices,
has a twisted async API, and have created more than a few prototypes
that demonstrate all works as I expect. Where I am a bit stalled is
getting to grips with a good architecture that fulfills my needs - my
intention is that the application that meets my first goal will be a
twistd plugin.

The new ClientService class seems like it will fit my needs very
closely but I am struggling with how to handle the reconnections... I
have been using the whenConnected() method to grab the Protocol for
the initial connection and then use a method of this to poll the
connected slave. When the connection is lost I get an errback from
this method's deferred which I use as a signal to abandon the Protocol
and call whenConnected() again... at this point I have an issue though
as the returned deferred immediately gives me a callback with the same
Protocol which has just lost its connection, and thus loop...

Before I got on this mailing list I posted this Q to stackoverflow
with some example code:
    http://stackoverflow.com/q/37061807/3448214
but no solution or much attention there yet.

As I say there, I realize I have probably just made a bad pattern
choice for how to use this API, but I have not been able to work out a
better choice which seems clean and fits my needs/understanding well.
I have tried deriving my own Protocol/Factory and handling the polling
there but this seems to get really messy once I start to add code to
get the collected data to a destination at that level, involving
giving the Protocol too much knowledge of how the data is to be
handled.

Any advice, good patterns, or pointers to other projects which do
something similar is appreciated,
Cheers
/dan
-- 
Daniel Sutcliffe <dansut at gmail.com>


From kevinjacobconway at gmail.com  Sat May  7 13:19:46 2016
From: kevinjacobconway at gmail.com (Kevin Conway)
Date: Sat, 07 May 2016 19:19:46 +0000
Subject: [Twisted-Python] Looking for help dealing with ClientService
	reconnections
In-Reply-To: <CADzPF4vD4yf64OHtf=H62BZrez7jewo_XSMDhP3YuabUQOwmZg@mail.gmail.com>
References: <CADzPF4vD4yf64OHtf=H62BZrez7jewo_XSMDhP3YuabUQOwmZg@mail.gmail.com>
Message-ID: <CAKF=+diikQ3scC_naf+Zat3f+Wu48o7JtyqGr5O9iFjreG6Bjw@mail.gmail.com>

I'm still working through your code example and trying to get a better
grasp of what, exactly, you're trying to implement as far as client
behavior is concerned. In the meantime, it sounds, on the surface, like you
are trying to implement a form of the ReconnectingClientFactory:
http://twistedmatrix.com/documents/current/api/twisted.internet.protocol.ReconnectingClientFactory.html
.

Your client protocol must be factory aware and call the resetDelay method
on the factory when a connection is made, but the factory will handle
reconnecting and generating a new protocol instance. Is that similar to
what you are trying to accomplish? Maybe see also
http://twistedmatrix.com/documents/current/core/howto/clients.html#reconnection
for a quick example of using the reconnecting factory.
On Fri, May 6, 2016, 12:23 Daniel Sutcliffe <dansut at gmail.com> wrote:

> Hello all, my first post here - only been using Twisted for about a
> month and am also a relative newcomer to Python but have been coding
> professionally for 20+ years. I was attracted to Twisted and Python
> for a particular project purely because after research it seemed to be
> the best tool for the job, and have actually been enjoying both Python
> and Twisted much more than I ever thought I would.
>
> The project I am coding towards is creating a sensor data collection
> gateway. First iteration needs are simply pulling data from ModBus TCP
> slave PLCs and writing it to a MySQL database, but goals beyond that
> are making the source of the data and its destination(s) very
> flexible(pluggable). Therefore I am trying to create a good clean
> architecture from the outset so as I iterate forwards I don't finish
> up having to take too many steps backwards before heading forwards.
>
> I am using pymodbus to pull the data which works well for my devices,
> has a twisted async API, and have created more than a few prototypes
> that demonstrate all works as I expect. Where I am a bit stalled is
> getting to grips with a good architecture that fulfills my needs - my
> intention is that the application that meets my first goal will be a
> twistd plugin.
>
> The new ClientService class seems like it will fit my needs very
> closely but I am struggling with how to handle the reconnections... I
> have been using the whenConnected() method to grab the Protocol for
> the initial connection and then use a method of this to poll the
> connected slave. When the connection is lost I get an errback from
> this method's deferred which I use as a signal to abandon the Protocol
> and call whenConnected() again... at this point I have an issue though
> as the returned deferred immediately gives me a callback with the same
> Protocol which has just lost its connection, and thus loop...
>
> Before I got on this mailing list I posted this Q to stackoverflow
> with some example code:
>     http://stackoverflow.com/q/37061807/3448214
> but no solution or much attention there yet.
>
> As I say there, I realize I have probably just made a bad pattern
> choice for how to use this API, but I have not been able to work out a
> better choice which seems clean and fits my needs/understanding well.
> I have tried deriving my own Protocol/Factory and handling the polling
> there but this seems to get really messy once I start to add code to
> get the collected data to a destination at that level, involving
> giving the Protocol too much knowledge of how the data is to be
> handled.
>
> Any advice, good patterns, or pointers to other projects which do
> something similar is appreciated,
> Cheers
> /dan
> --
> Daniel Sutcliffe <dansut at gmail.com>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160507/b0b7a0a2/attachment.html>

From glyph at twistedmatrix.com  Sat May  7 16:30:55 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 7 May 2016 15:30:55 -0700
Subject: [Twisted-Python] Looking for help dealing with ClientService
	reconnections
In-Reply-To: <CAKF=+diikQ3scC_naf+Zat3f+Wu48o7JtyqGr5O9iFjreG6Bjw@mail.gmail.com>
References: <CADzPF4vD4yf64OHtf=H62BZrez7jewo_XSMDhP3YuabUQOwmZg@mail.gmail.com>
 <CAKF=+diikQ3scC_naf+Zat3f+Wu48o7JtyqGr5O9iFjreG6Bjw@mail.gmail.com>
Message-ID: <45C5F0C8-88C8-49B7-B487-302456B54556@twistedmatrix.com>


> On May 7, 2016, at 12:19 PM, Kevin Conway <kevinjacobconway at gmail.com> wrote:
> 
> I'm still working through your code example and trying to get a better grasp of what, exactly, you're trying to implement as far as client behavior is concerned. In the meantime, it sounds, on the surface, like you are trying to implement a form of the ReconnectingClientFactory: http://twistedmatrix.com/documents/current/api/twisted.internet.protocol.ReconnectingClientFactory.html <http://twistedmatrix.com/documents/current/api/twisted.internet.protocol.ReconnectingClientFactory.html>.
> 

Just to clear up this point: ReconnectingClientFactory is the old, bad way of doing things, that only works with connectTCP/connectSSL/connectUNIX et. al., and not with endpoints.  ClientService <https://twistedmatrix.com/documents/16.1.1/api/twisted.application.internet.ClientService.html> is the new, good way, only available since the latest release.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160507/bd78f16e/attachment.html>

From kevinjacobconway at gmail.com  Sat May  7 17:02:17 2016
From: kevinjacobconway at gmail.com (Kevin Conway)
Date: Sat, 07 May 2016 23:02:17 +0000
Subject: [Twisted-Python] Looking for help dealing with ClientService
	reconnections
In-Reply-To: <45C5F0C8-88C8-49B7-B487-302456B54556@twistedmatrix.com>
References: <CADzPF4vD4yf64OHtf=H62BZrez7jewo_XSMDhP3YuabUQOwmZg@mail.gmail.com>
 <CAKF=+diikQ3scC_naf+Zat3f+Wu48o7JtyqGr5O9iFjreG6Bjw@mail.gmail.com>
 <45C5F0C8-88C8-49B7-B487-302456B54556@twistedmatrix.com>
Message-ID: <CAKF=+diS1aLt37t7-6=EE+NLg8uANigyJzMHo3jB76DgTOoHAQ@mail.gmail.com>

Thanks, glyph, for the correction. Also, thanks for reminding me that I'm
still living in twisted's past...

On Sat, May 7, 2016, 17:33 Glyph <glyph at twistedmatrix.com> wrote:

>
> On May 7, 2016, at 12:19 PM, Kevin Conway <kevinjacobconway at gmail.com>
> wrote:
>
> I'm still working through your code example and trying to get a better
> grasp of what, exactly, you're trying to implement as far as client
> behavior is concerned. In the meantime, it sounds, on the surface, like you
> are trying to implement a form of the ReconnectingClientFactory:
> http://twistedmatrix.com/documents/current/api/twisted.internet.protocol.ReconnectingClientFactory.html
> .
>
>
> Just to clear up this point: ReconnectingClientFactory is the old, bad way
> of doing things, that only works with connectTCP/connectSSL/connectUNIX et.
> al., and not with endpoints.  ClientService <
> https://twistedmatrix.com/documents/16.1.1/api/twisted.application.internet.ClientService.html>
> is the new, good way, only available since the latest release.
>
> -glyph
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160507/7a25fd77/attachment.html>

From glyph at twistedmatrix.com  Sat May  7 19:58:46 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 7 May 2016 18:58:46 -0700
Subject: [Twisted-Python] Looking for help dealing with ClientService
	reconnections
In-Reply-To: <CAKF=+diS1aLt37t7-6=EE+NLg8uANigyJzMHo3jB76DgTOoHAQ@mail.gmail.com>
References: <CADzPF4vD4yf64OHtf=H62BZrez7jewo_XSMDhP3YuabUQOwmZg@mail.gmail.com>
 <CAKF=+diikQ3scC_naf+Zat3f+Wu48o7JtyqGr5O9iFjreG6Bjw@mail.gmail.com>
 <45C5F0C8-88C8-49B7-B487-302456B54556@twistedmatrix.com>
 <CAKF=+diS1aLt37t7-6=EE+NLg8uANigyJzMHo3jB76DgTOoHAQ@mail.gmail.com>
Message-ID: <5F4E39DE-CBE0-4894-ABE5-350946489A89@twistedmatrix.com>

> On May 7, 2016, at 4:02 PM, Kevin Conway <kevinjacobconway at gmail.com> wrote:
> 
> Thanks, glyph, for the correction. Also, thanks for reminding me that I'm still living in twisted's past...
> 
Just a reminder that there's always cool new stuff on the horizon :).

In addition to just working with endpoints, the interface to ClientService is also a bit more flexible and testable, since the retry policy is implemented by a completely separate object from the service itself.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160507/e6da3459/attachment-0001.html>

From hawkowl at atleastfornow.net  Mon May  9 08:25:14 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Mon, 9 May 2016 22:25:14 +0800
Subject: [Twisted-Python] Twisted 16.2.0pre1 Release Announcement
Message-ID: <C8564EFB-FC4D-40F0-8FE9-D27FB28EFF6A@atleastfornow.net>

Hi everyone! Time for another Twisted prerelease!

Our release cadence stays steady, and this prerelease should bring some new nice features! The highlights include:

- twisted.protocols.haproxy.proxyEndpoint, a wrapper endpoint that gives some extra information to the wrapped protocols passed by haproxy;
- Migration of twistd and other twisted.application.app users to the new logging system (twisted.logger);
- Porting of parts of Twisted Names' server to Python 3;
- The removal of the very old MSN client code and the deprecation of the unmaintained ICQ/OSCAR client code;
- More cleanups in Conch in preparation for a Python 3 port and cleanups in HTTP code in preparation for HTTP/2 support;
- Over thirty tickets overall closed since 16.1.

For more information, check the NEWS file (link provided below).

As usual, it's available for download -- go here (https://twistedmatrix.com/Releases/pre/16.2.0pre1/) to get the prerelease tarballs and the full NEWS file.

Please let me know if you have any issues, as well as if you don't! If everything works well, that's a good thing for me to know :)

Twisted Regards,
Amber Brown (HawkOwl)

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160509/9bac421f/attachment.pgp>

From dansut at gmail.com  Mon May  9 14:09:39 2016
From: dansut at gmail.com (Daniel Sutcliffe)
Date: Mon, 9 May 2016 16:09:39 -0400
Subject: [Twisted-Python] Looking for help dealing with ClientService
	reconnections
In-Reply-To: <CAKF=+diikQ3scC_naf+Zat3f+Wu48o7JtyqGr5O9iFjreG6Bjw@mail.gmail.com>
References: <CADzPF4vD4yf64OHtf=H62BZrez7jewo_XSMDhP3YuabUQOwmZg@mail.gmail.com>
 <CAKF=+diikQ3scC_naf+Zat3f+Wu48o7JtyqGr5O9iFjreG6Bjw@mail.gmail.com>
Message-ID: <CADzPF4t8ZDo7pX+zVFVHvw9o1qVQW3Vc+uRT=2yf-RJrQ745XQ@mail.gmail.com>

Thanks for the response Kevin, a few individual replies embedded below:

On Sat, May 7, 2016 at 3:19 PM, Kevin Conway <kevinjacobconway at gmail.com> wrote:
> I'm still working through your code example and trying to get a better grasp
> of what, exactly, you're trying to implement as far as client behavior is
> concerned. In the meantime, it sounds, on the surface, like you are trying
> to implement a form of the ReconnectingClientFactory:
> http://twistedmatrix.com/documents/current/api/twisted.internet.protocol.ReconnectingClientFactory.html.

pymodbus actually has a pymodbus.client.async.ModbusClientFactory
which is derived from
twisted.internet.protocol.ReconnectingClientFactory
  http://pymodbus.readthedocs.io/en/latest/library/async-client.html

> Your client protocol must be factory aware and call the resetDelay method on
> the factory when a connection is made, but the factory will handle
> reconnecting and generating a new protocol instance. Is that similar to what
> you are trying to accomplish? Maybe see also
> http://twistedmatrix.com/documents/current/core/howto/clients.html#reconnection
> for a quick example of using the reconnecting factory.

I had built working tests using the docs you link to and understand
the way it works, but when Twisted 16.1 came out I decided that as I
was writing fresh code I probably ought to use the suggested new API.
After reading up and checking the source for ClientService it seemed
just what I was after; offering the advantages that Glyph mentioned,
and simplifying the amount of code I had to write (and maintain),
especially as my intention was to use twistd and thus Services.

It was only when I started to implement this that I felt my
inexperience with Twisted's ways of doing things was holding me back
and couldn't see a clear direction of how to build my architecture
around it.

Initially I used my own Protocol class derived from
pymodbus.client.async.ModbusClientProtocol that handled the polling
internally with a Factory that was aware of this class based on
ClientFactory (not ReconnectingClientFactory) that stored the
persistent info (poll rate, etc). This worked well with ClientService
and reconnections happened as expected but once I started to try and
evolve my code to consolidate (from many ClientServices polling
various PLCs) and write out the data (to MySQL) the model felt like
the focus was in the wrong place and that maybe I should be focussing
more on making a derivation of the ClientService have more control of
the polling and just using the Protocol provided by pymodbus as-is.

After hitting the problem I described below, I decided it was time to
ask those with more Twisted experience what the most appropriate way
to approach this problem was. Am I better off going back to doing
polling in Protocol with a Factory that provides ways to pump the data
back upstream to where it needs to be consolidated, and not rolling my
own ClientService to control it? or do I just need a better way of
getting my ClientService to be aware of the latest connection? Maybe
there's a pathway in between, or even something I haven't yet thought
of?

If anyone does have the time and desire to help me with this but feels
they need more info from me or background then please just ask, and I
will provide and be most appreciative :)

Cheers
/dan

On Fri, May 6, 2016, 12:23 Daniel Sutcliffe <dansut at gmail.com> wrote:
>> Hello all, my first post here - only been using Twisted for about a
>> month and am also a relative newcomer to Python but have been coding
>> professionally for 20+ years. I was attracted to Twisted and Python
>> for a particular project purely because after research it seemed to be
>> the best tool for the job, and have actually been enjoying both Python
>> and Twisted much more than I ever thought I would.
>>
>> The project I am coding towards is creating a sensor data collection
>> gateway. First iteration needs are simply pulling data from ModBus TCP
>> slave PLCs and writing it to a MySQL database, but goals beyond that
>> are making the source of the data and its destination(s) very
>> flexible(pluggable). Therefore I am trying to create a good clean
>> architecture from the outset so as I iterate forwards I don't finish
>> up having to take too many steps backwards before heading forwards.
>>
>> I am using pymodbus to pull the data which works well for my devices,
>> has a twisted async API, and have created more than a few prototypes
>> that demonstrate all works as I expect. Where I am a bit stalled is
>> getting to grips with a good architecture that fulfills my needs - my
>> intention is that the application that meets my first goal will be a
>> twistd plugin.
>>
>> The new ClientService class seems like it will fit my needs very
>> closely but I am struggling with how to handle the reconnections... I
>> have been using the whenConnected() method to grab the Protocol for
>> the initial connection and then use a method of this to poll the
>> connected slave. When the connection is lost I get an errback from
>> this method's deferred which I use as a signal to abandon the Protocol
>> and call whenConnected() again... at this point I have an issue though
>> as the returned deferred immediately gives me a callback with the same
>> Protocol which has just lost its connection, and thus loop...
>>
>> Before I got on this mailing list I posted this Q to stackoverflow
>> with some example code:
>>     http://stackoverflow.com/q/37061807/3448214
>> but no solution or much attention there yet.
>>
>> As I say there, I realize I have probably just made a bad pattern
>> choice for how to use this API, but I have not been able to work out a
>> better choice which seems clean and fits my needs/understanding well.
>> I have tried deriving my own Protocol/Factory and handling the polling
>> there but this seems to get really messy once I start to add code to
>> get the collected data to a destination at that level, involving
>> giving the Protocol too much knowledge of how the data is to be
>> handled.
>>
>> Any advice, good patterns, or pointers to other projects which do
>> something similar is appreciated,
-- 
Daniel Sutcliffe <dansut at gmail.com>


From glyph at twistedmatrix.com  Mon May  9 14:31:26 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 9 May 2016 13:31:26 -0700
Subject: [Twisted-Python] Twisted 16.2.0pre1 Release Announcement
In-Reply-To: <C8564EFB-FC4D-40F0-8FE9-D27FB28EFF6A@atleastfornow.net>
References: <C8564EFB-FC4D-40F0-8FE9-D27FB28EFF6A@atleastfornow.net>
Message-ID: <FC120368-1387-412C-A39A-CAC966FECB2E@twistedmatrix.com>


> On May 9, 2016, at 7:25 AM, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
> 
> Hi everyone! Time for another Twisted prerelease!

Hooray!

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160509/0a8b66f6/attachment.html>

From dansut at gmail.com  Mon May  9 14:50:39 2016
From: dansut at gmail.com (Daniel Sutcliffe)
Date: Mon, 9 May 2016 16:50:39 -0400
Subject: [Twisted-Python] Persuading Python's Logging to use twisted.logger
Message-ID: <CADzPF4sMzLe4-HVpt=Dv3vv-BvzC9EKrBrHTZedLddwVoBb1Qg@mail.gmail.com>

The project I am working on uses pymodbus which I am sure shares a
fairly common attribute with many other modules of using Python's
standard Logging mechanism - a very reasonable choice even for a
module that supports Twisted, the library can also be used entirely
synchronously and thus would not want a required dependency of
Twisted.

It struck me that it would be great to be able to redirect the
standard logging library to use twisted.logger by some sort of 'Clever
Monkey Patching' and that this may be a relatively common
requirement... however after extensive searching, and asking on the
pymodbus list, I can't find any evidence that such a thing has ever
been attempted or discussed.

The reverse mechanism of sending twisted.logger's output to the
standard library is of course handled by the
twisted.logger.STDLibLogObserver (and similar in twisted legacy
logging) but the documentation for this even suggests why this is a
bad idea: 'Warning: specific logging configurations (example: network)
can lead to this observer blocking.' which seems to me why it would be
better to attempt this the other way around...

Am I crazy to even think this? is it just the rambling of
Python/Twisted newb? Or is there something I'm missing that would make
this impossible to do generically, and awkward to provide a vague
recipe of how to do?

I do appreciate that twisted.logger offers a more feature rich
(structured) API and the Logging API would only be able to provide
level and text but it would be better than loosing any possibly useful
log messages from used modules in my mind.

If anyone can enlighten me I would be most appreciative,
Cheers
/dan
-- 
Daniel Sutcliffe <dansut at gmail.com>


From jeff at ocjtech.us  Mon May  9 15:54:34 2016
From: jeff at ocjtech.us (Jeffrey Ollie)
Date: Mon, 9 May 2016 16:54:34 -0500
Subject: [Twisted-Python] Persuading Python's Logging to use
	twisted.logger
In-Reply-To: <CADzPF4sMzLe4-HVpt=Dv3vv-BvzC9EKrBrHTZedLddwVoBb1Qg@mail.gmail.com>
References: <CADzPF4sMzLe4-HVpt=Dv3vv-BvzC9EKrBrHTZedLddwVoBb1Qg@mail.gmail.com>
Message-ID: <CAD-DQxQjTqrGdKqOhHjKVUK2AYe=ROtpS-QqX==bTEJqXMe66g@mail.gmail.com>

Here's a snippet that shows how I've handled it.  This example uses the new
style of logging in Twisted but would work just as well in the old style.
I'm not sure if there's a label that you can supply to the logging.Handler
to handle all messages but that's probably just a matter of digging into
the source code.

import sys
import logging

from twisted.logger import Logger
from twisted.logger import globalLogBeginner
from twisted.logger import textFileLogObserver

class TxLogHandler(logging.Handler):
    log = Logger()

    def __init__(self, label):
        self.label = label
        logging.Handler.__init__(self)
        self.level = logging.DEBUG

    def flush(self):
        pass

    def emit(self, record):
        try:
            msg = self.format(record)
            self.log.debug('{msg:}', msg = '\n'.join(map(lambda line: '{}:
{}'.format(self.label, line), msg.split('\n'))))
        except:
            self.handleError(record)

tx = TxLogHandler('FastAGI')
logger = logging.getLogger('FastAGI')
logger.addHandler(tx)
logger.setLevel(logging.DEBUG)

tx = TxLogHandler('AMI')
logger = logging.getLogger('AMI')
logger.addHandler(tx)
logger.setLevel(logging.DEBUG)

output = textFileLogObserver(sys.stderr)
globalLogBeginner.beginLoggingTo([output])



On Mon, May 9, 2016 at 3:50 PM, Daniel Sutcliffe <dansut at gmail.com> wrote:

> The project I am working on uses pymodbus which I am sure shares a
> fairly common attribute with many other modules of using Python's
> standard Logging mechanism - a very reasonable choice even for a
> module that supports Twisted, the library can also be used entirely
> synchronously and thus would not want a required dependency of
> Twisted.
>
> It struck me that it would be great to be able to redirect the
> standard logging library to use twisted.logger by some sort of 'Clever
> Monkey Patching' and that this may be a relatively common
> requirement... however after extensive searching, and asking on the
> pymodbus list, I can't find any evidence that such a thing has ever
> been attempted or discussed.
>
> The reverse mechanism of sending twisted.logger's output to the
> standard library is of course handled by the
> twisted.logger.STDLibLogObserver (and similar in twisted legacy
> logging) but the documentation for this even suggests why this is a
> bad idea: 'Warning: specific logging configurations (example: network)
> can lead to this observer blocking.' which seems to me why it would be
> better to attempt this the other way around...
>
> Am I crazy to even think this? is it just the rambling of
> Python/Twisted newb? Or is there something I'm missing that would make
> this impossible to do generically, and awkward to provide a vague
> recipe of how to do?
>
> I do appreciate that twisted.logger offers a more feature rich
> (structured) API and the Logging API would only be able to provide
> level and text but it would be better than loosing any possibly useful
> log messages from used modules in my mind.
>
> If anyone can enlighten me I would be most appreciative,
> Cheers
> /dan
> --
> Daniel Sutcliffe <dansut at gmail.com>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Jeff Ollie
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160509/351b8b8a/attachment.html>

From glyph at twistedmatrix.com  Mon May  9 16:16:17 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 9 May 2016 15:16:17 -0700
Subject: [Twisted-Python] Persuading Python's Logging to use
	twisted.logger
In-Reply-To: <CADzPF4sMzLe4-HVpt=Dv3vv-BvzC9EKrBrHTZedLddwVoBb1Qg@mail.gmail.com>
References: <CADzPF4sMzLe4-HVpt=Dv3vv-BvzC9EKrBrHTZedLddwVoBb1Qg@mail.gmail.com>
Message-ID: <1EAFEEFD-A20D-45D7-8950-D34FBDADCA46@twistedmatrix.com>


> On May 9, 2016, at 1:50 PM, Daniel Sutcliffe <dansut at gmail.com> wrote:
> 
> The project I am working on uses pymodbus which I am sure shares a
> fairly common attribute with many other modules of using Python's
> standard Logging mechanism - a very reasonable choice even for a
> module that supports Twisted, the library can also be used entirely
> synchronously and thus would not want a required dependency of
> Twisted.

Sure, this makes sense.

> It struck me that it would be great to be able to redirect the
> standard logging library to use twisted.logger by some sort of 'Clever
> Monkey Patching' and that this may be a relatively common
> requirement... however after extensive searching, and asking on the
> pymodbus list, I can't find any evidence that such a thing has ever
> been attempted or discussed.

You shouldn't need monkey patching; the standard library logger does have facilities for setting up custom handlers.  We just need to make one.  Honestly it would be great if this were featured within Twisted itself; it would make a great contribution to twisted.logger proper.

> The reverse mechanism of sending twisted.logger's output to the
> standard library is of course handled by the
> twisted.logger.STDLibLogObserver (and similar in twisted legacy
> logging) but the documentation for this even suggests why this is a
> bad idea: 'Warning: specific logging configurations (example: network)
> can lead to this observer blocking.' which seems to me why it would be
> better to attempt this the other way around...

I would very much like to see this :).  The standard library logging mechanism is in common use, and until we can spin it out into a separate project, `twisted.logger? is unlikely to 

> Am I crazy to even think this? is it just the rambling of
> Python/Twisted newb? Or is there something I'm missing that would make
> this impossible to do generically, and awkward to provide a vague
> recipe of how to do?

No, there's nothing that would make it impossible.  If you want to contribute it.

> I do appreciate that twisted.logger offers a more feature rich
> (structured) API and the Logging API would only be able to provide
> level and text but it would be better than loosing any possibly useful
> log messages from used modules in my mind.

I think you might even be able to claw back some structured information out of the stdlib logging machinery?  LogRecord does have 'args' and 'msg', and we could convert that into a twisted.logger format string.  This would be more expensive than using twisted.logger directly of course, but it would still provide a lot more useful information.

> If anyone can enlighten me I would be most appreciative,

I think just try to write a Handler (<https://docs.python.org/2.7/library/logging.handlers.html#module-logging.handlers>) that converts LogRecord objects to event dictionaries, and then emit them to a <https://twistedmatrix.com/documents/16.1.1/api/twisted.logger.ILogObserver.html> and let us know if you hit any problems.

-glyph



From glyph at twistedmatrix.com  Mon May  9 16:19:57 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 9 May 2016 15:19:57 -0700
Subject: [Twisted-Python] Looking for help dealing with ClientService
	reconnections
In-Reply-To: <CADzPF4vD4yf64OHtf=H62BZrez7jewo_XSMDhP3YuabUQOwmZg@mail.gmail.com>
References: <CADzPF4vD4yf64OHtf=H62BZrez7jewo_XSMDhP3YuabUQOwmZg@mail.gmail.com>
Message-ID: <7A7DF935-F87C-4A60-84A7-69AF43894BC2@twistedmatrix.com>


> On May 6, 2016, at 10:19 AM, Daniel Sutcliffe <dansut at gmail.com> wrote:
> 
> Hello all, my first post here - only been using Twisted for about a
> month and am also a relative newcomer to Python but have been coding
> professionally for 20+ years. I was attracted to Twisted and Python
> for a particular project purely because after research it seemed to be
> the best tool for the job, and have actually been enjoying both Python
> and Twisted much more than I ever thought I would.
> 
> The project I am coding towards is creating a sensor data collection
> gateway. First iteration needs are simply pulling data from ModBus TCP
> slave PLCs and writing it to a MySQL database, but goals beyond that
> are making the source of the data and its destination(s) very
> flexible(pluggable). Therefore I am trying to create a good clean
> architecture from the outset so as I iterate forwards I don't finish
> up having to take too many steps backwards before heading forwards.
> 
> I am using pymodbus to pull the data which works well for my devices,
> has a twisted async API, and have created more than a few prototypes
> that demonstrate all works as I expect. Where I am a bit stalled is
> getting to grips with a good architecture that fulfills my needs - my
> intention is that the application that meets my first goal will be a
> twistd plugin.
> 
> The new ClientService class seems like it will fit my needs very
> closely but I am struggling with how to handle the reconnections... I
> have been using the whenConnected() method to grab the Protocol for
> the initial connection and then use a method of this to poll the
> connected slave. When the connection is lost I get an errback from
> this method's deferred which I use as a signal to abandon the Protocol
> and call whenConnected() again... at this point I have an issue though
> as the returned deferred immediately gives me a callback with the same
> Protocol which has just lost its connection, and thus loop...

If you want a hook each time a new protocol is created, you're probably better off writing a wrapper protocol factory, and passing that to your ClientService, then doing any set-up work you want to do in your buildProtocol implementation, which delegates to the real, pymodbus implementation.

> Before I got on this mailing list I posted this Q to stackoverflow
> with some example code:
>    http://stackoverflow.com/q/37061807/3448214
> but no solution or much attention there yet.
> 
> As I say there, I realize I have probably just made a bad pattern
> choice for how to use this API, but I have not been able to work out a
> better choice which seems clean and fits my needs/understanding well.
> I have tried deriving my own Protocol/Factory and handling the polling
> there but this seems to get really messy once I start to add code to
> get the collected data to a destination at that level, involving
> giving the Protocol too much knowledge of how the data is to be
> handled.

I am curious as to why you say that this is "messy".

> Any advice, good patterns, or pointers to other projects which do
> something similar is appreciated,

I spent a while thinking about your question, and I'm sorry that I can't give a more thorough answer, but I think you need to be a bit more specific about what it is you don't like about your potential solution.  It seems to me that having a delegating Factory, especially if all you need to do is set up some state on each Protocol that gets produced, should be sufficient...

-glyph

From kevinjacobconway at gmail.com  Mon May  9 19:16:35 2016
From: kevinjacobconway at gmail.com (Kevin Conway)
Date: Tue, 10 May 2016 01:16:35 +0000
Subject: [Twisted-Python] Persuading Python's Logging to use
	twisted.logger
In-Reply-To: <1EAFEEFD-A20D-45D7-8950-D34FBDADCA46@twistedmatrix.com>
References: <CADzPF4sMzLe4-HVpt=Dv3vv-BvzC9EKrBrHTZedLddwVoBb1Qg@mail.gmail.com>
 <1EAFEEFD-A20D-45D7-8950-D34FBDADCA46@twistedmatrix.com>
Message-ID: <CAKF=+dg++V8GsoP78zOmO10ycxePVZsS+ph_K+bG8kqnNrc1LA@mail.gmail.com>

> The reverse mechanism of sending twisted.logger's output to the
> standard library is of course handled by the
> twisted.logger.STDLibLogObserver (and similar in twisted legacy
> logging) but the documentation for this even suggests why this is a
> bad idea: 'Warning: specific logging configurations (example: network)
> can lead to this observer blocking.' which seems to me why it would be
> better to attempt this the other way around...

The warning in the documentation about the potential blocking behaviour of
the StdLibLogObserver is correct, but it does tip a little close to FUD. If
you are using the Syslog or File based log observers then there is no
change in "blocking" behaviour between Twisted and the standard lib. The
Syslog observer and the standard library syslog facility both use exactly
the same standard library syslog module which is known to block under
certain system configurations. The File observer in Twisted and the
standard library both use regular Python file objects that don't leverage
the reactor in any way. Likewise, logging to STDIN/STDERR in both logging
frameworks treats the streams like normal file objects which, when
subjected to back pressure, become a source of blocking time. The only
cases where Twisted and the standard lib differ would be network based
logging.

My recommendation is to use the STdLibLogObserver. This will allow you to
use the twisted.logger in your Twisted code, merge Twisted and non-Twisted
logs into a single stream regardless of their origin, and allow you to tap
into things like the standard lib RotatingFileHandler and file based
configuration system. Should you actually need to pipe logs over the
network it would not be overly difficult to implement a standard lib
logging transport that leverages the reactor when sending data.

On Mon, May 9, 2016 at 5:18 PM Glyph <glyph at twistedmatrix.com> wrote:

>
> > On May 9, 2016, at 1:50 PM, Daniel Sutcliffe <dansut at gmail.com> wrote:
> >
> > The project I am working on uses pymodbus which I am sure shares a
> > fairly common attribute with many other modules of using Python's
> > standard Logging mechanism - a very reasonable choice even for a
> > module that supports Twisted, the library can also be used entirely
> > synchronously and thus would not want a required dependency of
> > Twisted.
>
> Sure, this makes sense.
>
> > It struck me that it would be great to be able to redirect the
> > standard logging library to use twisted.logger by some sort of 'Clever
> > Monkey Patching' and that this may be a relatively common
> > requirement... however after extensive searching, and asking on the
> > pymodbus list, I can't find any evidence that such a thing has ever
> > been attempted or discussed.
>
> You shouldn't need monkey patching; the standard library logger does have
> facilities for setting up custom handlers.  We just need to make one.
> Honestly it would be great if this were featured within Twisted itself; it
> would make a great contribution to twisted.logger proper.
>
> > The reverse mechanism of sending twisted.logger's output to the
> > standard library is of course handled by the
> > twisted.logger.STDLibLogObserver (and similar in twisted legacy
> > logging) but the documentation for this even suggests why this is a
> > bad idea: 'Warning: specific logging configurations (example: network)
> > can lead to this observer blocking.' which seems to me why it would be
> > better to attempt this the other way around...
>
> I would very much like to see this :).  The standard library logging
> mechanism is in common use, and until we can spin it out into a separate
> project, `twisted.logger? is unlikely to
>
> > Am I crazy to even think this? is it just the rambling of
> > Python/Twisted newb? Or is there something I'm missing that would make
> > this impossible to do generically, and awkward to provide a vague
> > recipe of how to do?
>
> No, there's nothing that would make it impossible.  If you want to
> contribute it.
>
> > I do appreciate that twisted.logger offers a more feature rich
> > (structured) API and the Logging API would only be able to provide
> > level and text but it would be better than loosing any possibly useful
> > log messages from used modules in my mind.
>
> I think you might even be able to claw back some structured information
> out of the stdlib logging machinery?  LogRecord does have 'args' and 'msg',
> and we could convert that into a twisted.logger format string.  This would
> be more expensive than using twisted.logger directly of course, but it
> would still provide a lot more useful information.
>
> > If anyone can enlighten me I would be most appreciative,
>
> I think just try to write a Handler (<
> https://docs.python.org/2.7/library/logging.handlers.html#module-logging.handlers>)
> that converts LogRecord objects to event dictionaries, and then emit them
> to a <
> https://twistedmatrix.com/documents/16.1.1/api/twisted.logger.ILogObserver.html>
> and let us know if you hit any problems.
>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160510/41971901/attachment.html>

From burak.arslan at arskom.com.tr  Mon May  9 23:22:18 2016
From: burak.arslan at arskom.com.tr (Burak Arslan)
Date: Tue, 10 May 2016 08:22:18 +0300
Subject: [Twisted-Python] Persuading Python's Logging to use
 twisted.logger
In-Reply-To: <CADzPF4sMzLe4-HVpt=Dv3vv-BvzC9EKrBrHTZedLddwVoBb1Qg@mail.gmail.com>
References: <CADzPF4sMzLe4-HVpt=Dv3vv-BvzC9EKrBrHTZedLddwVoBb1Qg@mail.gmail.com>
Message-ID: <93ae72c6-c942-73c6-e119-2c92764c30b3@arskom.com.tr>

hello,

On 05/09/16 23:50, Daniel Sutcliffe wrote:
> The project I am working on uses pymodbus which I am sure shares a
> fairly common attribute with many other modules of using Python's
> standard Logging mechanism - a very reasonable choice even for a
> module that supports Twisted, the library can also be used entirely
> synchronously and thus would not want a required dependency of
> Twisted.
>
> It struck me that it would be great to be able to redirect the
> standard logging library to use twisted.logger

me too :)

> 'Warning: specific logging configurations (example: network)
> can lead to this observer blocking.' which seems to me why it would be
> better to attempt this the other way around...

as discussed, it's possible. you additionally need to make sure to clean
other handlers if you are integrating with third party libraries who may
be adding esoteric targets for log entries behind your back.

with that said, here's my take at it:

https://github.com/plq/neurons/blob/40dff6134330aeadbefd3973d5d40aa4bfac4b78/neurons/daemon/config.py#L673

best,
burak


From hawkowl at atleastfornow.net  Tue May 10 04:16:02 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Tue, 10 May 2016 18:16:02 +0800
Subject: [Twisted-Python] [INFRASTRUCTURE OUTAGE] Moving from SVN to Git
Message-ID: <F46EE585-5445-400C-AF97-873FF3BE18F5@atleastfornow.net>

Hi everyone!

It's finally time to pull the trigger on this.

Twisted's Trac may be down intermittently in the next few hours as I do the migration.

- Amber
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160510/f4544964/attachment.pgp>

From hawkowl at atleastfornow.net  Tue May 10 10:29:43 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Wed, 11 May 2016 00:29:43 +0800
Subject: [Twisted-Python] [ALL OK] [INFRASTRUCTURE OUTAGE] Moving from SVN
	to Git
In-Reply-To: <F46EE585-5445-400C-AF97-873FF3BE18F5@atleastfornow.net>
References: <F46EE585-5445-400C-AF97-873FF3BE18F5@atleastfornow.net>
Message-ID: <88621B3B-EDDC-4C7E-A98B-0572179616E8@atleastfornow.net>

Hi everyone!

Twisted infra is now back up and kicking, and we've moved to https://github.com/twisted/twisted as our "authoritative" mirror.

- Amber

> On 10 May 2016, at 18:16, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
> 
> Hi everyone!
> 
> It's finally time to pull the trigger on this.
> 
> Twisted's Trac may be down intermittently in the next few hours as I do the migration.
> 
> - Amber
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160511/c16e783b/attachment-0001.pgp>

From ldanielburr at me.com  Tue May 10 10:35:06 2016
From: ldanielburr at me.com (L. Daniel Burr)
Date: Tue, 10 May 2016 11:35:06 -0500
Subject: [Twisted-Python] [Twisted-web] Twisted 16.2.0pre1 Release
	Announcement
In-Reply-To: <C8564EFB-FC4D-40F0-8FE9-D27FB28EFF6A@atleastfornow.net>
References: <C8564EFB-FC4D-40F0-8FE9-D27FB28EFF6A@atleastfornow.net>
Message-ID: <etPan.57320dba.eabafbc.a6c0@dzur.corp.wargaming.local>

On May 9, 2016 at 9:26:31 AM, Amber Hawkie Brown (hawkowl at atleastfornow.net) wrote:
Hi everyone! Time for another Twisted prerelease!?

Our release cadence stays steady, and this prerelease should bring some new nice features! The highlights include:?

- twisted.protocols.haproxy.proxyEndpoint, a wrapper endpoint that gives some extra information to the wrapped protocols passed by haproxy;
Awesome.


- Migration of twistd and other twisted.application.app users to the new logging system (twisted.logger);?
More awesome.


- Porting of parts of Twisted Names' server to Python 3;?
- The removal of the very old MSN client code and the deprecation of the unmaintained ICQ/OSCAR client code;?
- More cleanups in Conch in preparation for a Python 3 port and cleanups in HTTP code in preparation for HTTP/2 support;?
Even more awesome.


- Over thirty tickets overall closed since 16.1.?


Awesomer still.

For more information, check the NEWS file (link provided below).?

As usual, it's available for download -- go here (https://twistedmatrix.com/Releases/pre/16.2.0pre1/) to get the prerelease tarballs and the full NEWS file.?

Please let me know if you have any issues, as well as if you don't! If everything works well, that's a good thing for me to know :)?

Twisted Regards,?
Amber Brown (HawkOwl)?
Seriously, the progress over the last year has been fantastic. ?As a long time Twisted user who takes far more than he gives, let me express my gratitude for all the great releases of the last 12 months.

Thanks,

L. Daniel Burr
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160510/95a3834f/attachment.html>

From dansut at gmail.com  Tue May 10 10:52:42 2016
From: dansut at gmail.com (Daniel Sutcliffe)
Date: Tue, 10 May 2016 12:52:42 -0400
Subject: [Twisted-Python] Looking for help dealing with ClientService
	reconnections
In-Reply-To: <7A7DF935-F87C-4A60-84A7-69AF43894BC2@twistedmatrix.com>
References: <CADzPF4vD4yf64OHtf=H62BZrez7jewo_XSMDhP3YuabUQOwmZg@mail.gmail.com>
 <7A7DF935-F87C-4A60-84A7-69AF43894BC2@twistedmatrix.com>
Message-ID: <CADzPF4u2jMxfoEn6oxhjLgoATZ=kacDuL4J2ji2-HYyH57bd_Q@mail.gmail.com>

Thanks Glyph, I think you have given me a push back in the 'right'
direction - more thoughts and commentary embedded below if you, or
anyone else, has the time.

On May 6, 2016, at 10:19 AM, Daniel Sutcliffe <dansut at gmail.com> wrote:
[...]
>> The new ClientService class seems like it will fit my needs very
>> closely but I am struggling with how to handle the reconnections... I
>> have been using the whenConnected() method to grab the Protocol for
>> the initial connection and then use a method of this to poll the
>> connected slave. When the connection is lost I get an errback from
>> this method's deferred which I use as a signal to abandon the Protocol
>> and call whenConnected() again... at this point I have an issue though
>> as the returned deferred immediately gives me a callback with the same
>> Protocol which has just lost its connection, and thus loop...

On Mon, May 9, 2016 at 6:19 PM, Glyph <glyph at twistedmatrix.com> wrote:
> If you want a hook each time a new protocol is created, you're probably
> better off writing a wrapper protocol factory, and passing that to your
> ClientService, then doing any set-up work you want to do in your
> buildProtocol implementation, which delegates to the real, pymodbus
> implementation.

Understood, if this is the way the framework is intended to be used I
realize doing anything else is going to be fighting against the flow.

However, just to probe the situation I found myself in further, for
the sake probing broken code to see how it might be fixed:

Given the ClientService.whenConnected() method is intended to provide
access to my connected Protocol through the deferred it returns, is it
not a little unfriendly that this Protocol may turn out to be
disconnected? OK occasionally due to timing but for this to be a
possible condition which can loop with the same disconnected Protocol
returned until the ClientService has its _currentConnection set to
None, suggests to me that I can't safely use my Protocol from
whenConnected() for much other than as a notification the first
connection has occurred... but how do I avoid this?

I have looked at the source and it seems to me the fact that the
connection has been lost should bubble up to the ClientService through
a t.a.i._DisconnectFactory and t.a.i._ReconnectingProtocolProxy once
my Protocol's connectionLost() is called. My issue seems to be that I
errback on a Protocol method's deferred returned to code at or above
the ClientService level which gives up on that Protocol and calls
whenConnected() to get the next one, only the Protocol's
connectionLost() has yet to be called and then doesn't have chance to
because my code is looping around calling whenConnected() and getting
the same Protocol back. I hope that makes sense :-/

My Q on this is if I should be internally calling my Protocol's
connectionLost() so it can bubble up to the ClientService before I
errback on the Protocol method - whose responsibility is it to call
this?

>> Before I got on this mailing list I posted this Q to stackoverflow
>> with some example code:
>>    http://stackoverflow.com/q/37061807/3448214
>> but no solution or much attention there yet.
>>
>> As I say there, I realize I have probably just made a bad pattern
>> choice for how to use this API, but I have not been able to work out a
>> better choice which seems clean and fits my needs/understanding well.
>> I have tried deriving my own Protocol/Factory and handling the polling
>> there but this seems to get really messy once I start to add code to
>> get the collected data to a destination at that level, involving
>> giving the Protocol too much knowledge of how the data is to be
>> handled.
>
> I am curious as to why you say that this is "messy".

Honestly, this was just a gut feeling at the time, probably more
sourced in my implementation from lack of experience in using Twisted;
after reading around the subject, looking at many more examples, and
your advice, I think I am convinced I need to back to looking at my
own Protocol derived from the pymodbus one with a Factory that
contains the persistent config and access to an interface to pump the
polled data upstream.

>> Any advice, good patterns, or pointers to other projects which do
>> something similar is appreciated,
>
> I spent a while thinking about your question, and I'm sorry that I can't give
> a more thorough answer, but I think you need to be a bit more specific
> about what it is you don't like about your potential solution.  It seems to me
> that having a delegating Factory, especially if all you need to do is set up
> some state on each Protocol that gets produced, should be sufficient...

Looking at the code again I think it just seemed to make sense to me
at the time to have something that is (or has) a ClientService be the
object I am calling a DataSource have more control over when it polls
that data and what it does with it - and not to have to make the
Protocol and its Factory aware of this at all. Does that make it any
clearer? I am happy to push ahead with building this into my
Factory/Protocol if that is more normal usage for Twisted as I am sure
there will be benefits of encapsulating it here beyond the other side
I was seeing during that moment of confusion.

Thanks for the advice, I think it was enough to nudge me in a
direction that will work better to get me going, and if with more
experience other usage makes more sense I can always refactor,
refactor, refactor :)
Cheers
/dan
-- 
Daniel Sutcliffe <dansut at gmail.com>


From pawelmhm at gmail.com  Tue May 10 12:37:57 2016
From: pawelmhm at gmail.com (=?UTF-8?B?UGF3ZcWCIE1pZWNo?=)
Date: Tue, 10 May 2016 20:37:57 +0200
Subject: [Twisted-Python] [ALL OK] [INFRASTRUCTURE OUTAGE] Moving from
 SVN to Git
In-Reply-To: <88621B3B-EDDC-4C7E-A98B-0572179616E8@atleastfornow.net>
References: <F46EE585-5445-400C-AF97-873FF3BE18F5@atleastfornow.net>
 <88621B3B-EDDC-4C7E-A98B-0572179616E8@atleastfornow.net>
Message-ID: <CAO38UCmiEp=Y+zGEKfPKk6kBnOBKJk=XP66KT0UbcgVYUgV96w@mail.gmail.com>

Hello Amber,

> we've moved to https://github.com/twisted/twisted as our "authoritative"
mirror.

are there any consequences of this for Twisted users and/or casual
contributors?  I used github source for a while not knowing it was not
"authortiative" mirror, it always seemed fresh and updated. I remember some
discussion on mailing list about moving issue tracking to github, is
today's migration part of this process? Are there plans to accept pull
requests on github?

Pawe? Miech

2016-05-10 18:29 GMT+02:00 Amber "Hawkie" Brown <hawkowl at atleastfornow.net>:

> Hi everyone!
>
> Twisted infra is now back up and kicking, and we've moved to
> https://github.com/twisted/twisted as our "authoritative" mirror.
>
> - Amber
>
> > On 10 May 2016, at 18:16, Amber Hawkie Brown <hawkowl at atleastfornow.net>
> wrote:
> >
> > Hi everyone!
> >
> > It's finally time to pull the trigger on this.
> >
> > Twisted's Trac may be down intermittently in the next few hours as I do
> the migration.
> >
> > - Amber
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160510/f5d3b318/attachment.html>

From glyph at twistedmatrix.com  Tue May 10 13:02:05 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 10 May 2016 12:02:05 -0700
Subject: [Twisted-Python] [Twisted-web] Twisted 16.2.0pre1 Release
	Announcement
In-Reply-To: <etPan.57320dba.eabafbc.a6c0@dzur.corp.wargaming.local>
References: <C8564EFB-FC4D-40F0-8FE9-D27FB28EFF6A@atleastfornow.net>
 <etPan.57320dba.eabafbc.a6c0@dzur.corp.wargaming.local>
Message-ID: <E70879DC-D0DB-4B83-90F2-819DB824548D@twistedmatrix.com>


> On May 10, 2016, at 9:35 AM, L. Daniel Burr <ldanielburr at me.com> wrote:
> Seriously, the progress over the last year has been fantastic.  As a long time Twisted user who takes far more than he gives, let me express my gratitude for all the great releases of the last 12 months.
> 

As you're expressing gratitude, I'd like to take the opportunity to remind everyone that gratitude sometimes takes the form of US dollars, which you can donate to the Twisted project on the front page of https://twistedmatrix.com/ :).  I periodically holler about fundraising, but as all this successful infrastructure work has been landing it would be a real shame if we had a big outage because we ran out of money to pay our current infrastructure provider.  (We are working on moving to donated hosting but, as always, system administration resources are the thing we have the least of.)

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160510/766e71c3/attachment.html>

From mithrandi at mithrandi.net  Tue May 10 13:21:02 2016
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Tue, 10 May 2016 19:21:02 +0000
Subject: [Twisted-Python] [ALL OK] [INFRASTRUCTURE OUTAGE] Moving from
 SVN to Git
In-Reply-To: <CAO38UCmiEp=Y+zGEKfPKk6kBnOBKJk=XP66KT0UbcgVYUgV96w@mail.gmail.com>
References: <F46EE585-5445-400C-AF97-873FF3BE18F5@atleastfornow.net>
 <88621B3B-EDDC-4C7E-A98B-0572179616E8@atleastfornow.net>
 <CAO38UCmiEp=Y+zGEKfPKk6kBnOBKJk=XP66KT0UbcgVYUgV96w@mail.gmail.com>
Message-ID: <CAMcKhMQJ4htSwLHhZQHmHj6XS8z9e0S4uHxOwzjyfR0+4U0JQQ@mail.gmail.com>

On Tue, 10 May 2016 at 20:38 Pawe? Miech <pawelmhm at gmail.com> wrote:

> Hello Amber,
>
> > we've moved to https://github.com/twisted/twisted as our
> "authoritative" mirror.
>
> are there any consequences of this for Twisted users and/or casual
> contributors?  I used github source for a while not knowing it was not
> "authortiative" mirror, it always seemed fresh and updated.
>

The git mirror has been updated from the Subversion repository on commit
for quite a while, so it was up to date, it just wasn't the correct place
for committers to push changes to; this is what has changed now.

I just got done editing a bunch of the wiki pages about the development
process, primarily https://twistedmatrix.com/trac/wiki/TwistedDevelopment ?
so hopefully it should be clearer how to proceed now.


> I remember some discussion on mailing list about moving issue tracking to
> github, is today's migration part of this process? Are there plans to
> accept pull requests on github?
>

The main remaining problem with pull requests is that a committer has to
push a branch to the main repository in order to run builds on the
buildbots; this is due to issues around executing arbitrary code on the
buildbots. Thus a PR-based workflow for non-committers currently doesn't
make much sense.

Issue tracking remains on Trac, at least for the forseeable future
(implementing our workflow with GitHub issues is quite challenging).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160510/6a03e554/attachment.html>

From dansut at gmail.com  Tue May 10 17:23:08 2016
From: dansut at gmail.com (Daniel Sutcliffe)
Date: Tue, 10 May 2016 19:23:08 -0400
Subject: [Twisted-Python] Persuading Python's Logging to use
	twisted.logger
In-Reply-To: <93ae72c6-c942-73c6-e119-2c92764c30b3@arskom.com.tr>
References: <CADzPF4sMzLe4-HVpt=Dv3vv-BvzC9EKrBrHTZedLddwVoBb1Qg@mail.gmail.com>
 <93ae72c6-c942-73c6-e119-2c92764c30b3@arskom.com.tr>
Message-ID: <CADzPF4uwgq1d=VC2tGB8oDR3xRQbGGWAqwNGHuVSK7nyRMjBMA@mail.gmail.com>

Thanks for all the hints and suggestions guys, this was far simpler
than I thought it would be and the results are exactly what I imagined
without too much effort.

Jeff: Have to admit I started with your code and had it working with
in my scenario in no time at all, this was a great bump start, but I
couldn't help tweaking...

Glyph: The code below is I'm sure far from perfect, and it doesn't
take your advice and convert the msg into a twisted format string, it
takes the simpler approach of letting the Logging record pre-format
using the getMessage() method. I'm sure there are loads of edge cases
it could cope with better with maybe it is a start of something that
could be included in Twisted.

Kevin: I appreciate your input and understand the need to always be
aware of what you are call/using may be blocking for various reasons -
I will eventually want to redirect to syslog so will need to deal with
this later. I still think it makes sense to have a relatively easy
option of redirecting STDLib logging from used modules to
twisted.logger available, as well as the opposite. When twistd is
handling most of logging setup it seems the simpler path to have
everything using twisted.logger.

Burak: Your code was especially helpful - it goes much further than I
even considered is useful so I just borrowed what I thought was
essential for the needs of this first pass. Will be glad to hear of
any cases you think will break this code to help make it even more
general.

So here's the code I dropped into a logfudger.py in my test dir. All
feedback encouraged as I really am just finding my way around Python,
and appreciate all critique of what I could do better:

from twisted.logger import Logger, LogLevel
import logging
LEVEL_SYS2TWISTED = {
    logging.DEBUG: LogLevel.debug,
    logging.INFO: LogLevel.info,
    logging.WARN: LogLevel.warn,
    logging.ERROR: LogLevel.error,
    logging.CRITICAL: LogLevel.critical,
}
class TwistedLoggerHandler(logging.Handler):
    def __init__(self):
        self._log = Logger()
        logging.Handler.__init__(self)
    def flush(self):
        pass
    def emit(self, record):
        try:
            self._log.namespace=record.name
            self._log.source=record.pathname
            self._log.emit(
                LEVEL_SYS2TWISTED[record.levelno],
                record.getMessage(),
                lineno=record.lineno, args=record.args)
        except:
            self.handleError(record)

When I use this with pymodbus I then just need to include this with my code:

import logging
from logfudger import TwistedLoggerHandler
sysliblog = logging.getLogger("pymodbus")
sysliblog.addHandler(TwistedLoggerHandler())
sysliblog.setLevel(logging.DEBUG)
from twisted.logger import Logger, globalLogBeginner, textFileLogObserver
import sys
globalLogBeginner.beginLoggingTo([textFileLogObserver(sys.stderr)])

Which gives me a stderr output like:

2016-05-10T18:48:52-0400 [pymodbus#info] Informational
2016-05-10T18:48:52-0400 [__main__.MBClientFactory#info] Starting
factory <__main__.MBClientFactory instance at 0x0000000001212ae0>
2016-05-10T18:48:52-0400 [__main__.MBClientProtocol#debug] Protocol
connectionMade
2016-05-10T18:48:52-0400 [pymodbus.client.async#debug] Client
connected to modbus server
2016-05-10T18:48:52-0400 [pymodbus.transaction#debug] adding transaction 1

I don't deal with exceptions logged through the STDLib logging at all,
and the log_namespace, log_source could probably be set in ways that
cover more use cases.
But hopefully this all makes sense and this can be a start of
something much more generically useful.

Cheers
/dan
-- 
Daniel Sutcliffe <dansut at gmail.com>


From hawkowl at atleastfornow.net  Wed May 11 02:28:28 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Wed, 11 May 2016 16:28:28 +0800
Subject: [Twisted-Python] [INFRASTRUCTURE OUTAGE] Migration of Buildbot to
	new hardware
Message-ID: <8DA10464-22CE-430B-A6A7-DD02019DBAD1@atleastfornow.net>

Hi everyone,

Keeping the infrastructure updates coming! I'm going to be moving the Buildbot to new hardware, so it may be down for today, plus however long DNS takes to propagate. This should only affect Twisted committers running tests on the builder infrastructure; Trac, docs, and everything else will remain online.

- Amber
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160511/696cac87/attachment-0001.pgp>

From hawkowl at atleastfornow.net  Sat May 14 05:56:41 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Sat, 14 May 2016 19:56:41 +0800
Subject: [Twisted-Python] [INCOMPATIBLE CHANGE] Removal of twisted.manhole
	and twisted.spread.ui
Message-ID: <CC3AE043-AE17-48AD-B8DE-53A2A5AF263F@atleastfornow.net>

As part of some spring cleaning, I'm removing two of the largest sections of unmaintained, undocumented, and mostly untested code in Twisted. These are twisted.manhole (not twisted.conch.manhole, which is over SSH/telnet; twisted.manhole is over PB) and twisted.spread.ui (a GTK interface + some other things that are similar in purpose, which also depends on twisted.manhole). They are both broken and not very useful in their current form; and any improvements would require an almost complete rewrite, meaning that there's little to no chance that they are worth keeping.

As per the compatibility policy, these two branches are available for you to test your applications with:

- https://twistedmatrix.com/trac/ticket/8329 -- removing twisted.spread.ui
- https://twistedmatrix.com/trac/ticket/8330 -- removing twisted.manhole

The git branches are available on the Trac links. They will be available for a week from now before the minimum merge time, as per the policy, for you to test your applications.

- Amber
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160514/c967f030/attachment.pgp>

From hawkowl at atleastfornow.net  Sat May 14 07:29:21 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Sat, 14 May 2016 21:29:21 +0800
Subject: [Twisted-Python] [ALL IS WELL] [INFRASTRUCTURE OUTAGE] Migration of
	Buildbot to new hardware
In-Reply-To: <8DA10464-22CE-430B-A6A7-DD02019DBAD1@atleastfornow.net>
References: <8DA10464-22CE-430B-A6A7-DD02019DBAD1@atleastfornow.net>
Message-ID: <12CB32AA-FFD9-41FC-BE02-0D5DD5EBA70C@atleastfornow.net>

Hi everyone,

The BuildBot migration is now complete.

- Amber

> On 11 May 2016, at 16:28, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
> 
> Hi everyone,
> 
> Keeping the infrastructure updates coming! I'm going to be moving the Buildbot to new hardware, so it may be down for today, plus however long DNS takes to propagate. This should only affect Twisted committers running tests on the builder infrastructure; Trac, docs, and everything else will remain online.
> 
> - Amber
> _______________________________________________
> Twisted-web mailing list
> Twisted-web at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160514/91abfc61/attachment.pgp>

From glyph at twistedmatrix.com  Sat May 14 14:56:23 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 14 May 2016 13:56:23 -0700
Subject: [Twisted-Python] [INCOMPATIBLE CHANGE] Removal of
	twisted.manhole and twisted.spread.ui
In-Reply-To: <CC3AE043-AE17-48AD-B8DE-53A2A5AF263F@atleastfornow.net>
References: <CC3AE043-AE17-48AD-B8DE-53A2A5AF263F@atleastfornow.net>
Message-ID: <5B68A24F-3059-40A3-8E0B-DAAD0B8ACE1D@twistedmatrix.com>


> On May 14, 2016, at 4:56 AM, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
> 
> As part of some spring cleaning, I'm removing two of the largest sections of unmaintained, undocumented, and mostly untested code in Twisted. These are twisted.manhole (not twisted.conch.manhole, which is over SSH/telnet; twisted.manhole is over PB) and twisted.spread.ui (a GTK interface + some other things that are similar in purpose, which also depends on twisted.manhole). They are both broken and not very useful in their current form; and any improvements would require an almost complete rewrite, meaning that there's little to no chance that they are worth keeping.
> 
> As per the compatibility policy, these two branches are available for you to test your applications with:
> 
> - https://twistedmatrix.com/trac/ticket/8329 -- removing twisted.spread.ui
> - https://twistedmatrix.com/trac/ticket/8330 -- removing twisted.manhole
> 
> The git branches are available on the Trac links. They will be available for a week from now before the minimum merge time, as per the policy, for you to test your applications.
> 
> - Amber

Thanks for doing the compatability notification, Amber.

While I'm always happy to see the process followed to ensure that we don't leave our users in the lurch, I suspect that it would have been very hard for anyone to actually make use of these with a modern Twisted.

For what it's worth, I'm quite sad to see them go; features like this made early versions of Twisted kind of special, in my opinion.  But they never really survived the transition to our "new" (i.e. "within the last decade") standards for quality and maintainability, so they've been slowly rotting.

I say this because I hope the acknowledgement that they're just broken and their removal will inspire folks to consider re-engineering some features like this, that provide enhanced visibility into the activity of the event loop and that provide native GUI tools for people to understand Twisted.  It would inspire me if I didn't have so much else already to do before PyCon ;-).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160514/7b28c449/attachment.html>

From glyph at twistedmatrix.com  Sat May 14 14:57:16 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 14 May 2016 13:57:16 -0700
Subject: [Twisted-Python] [ALL IS WELL] [INFRASTRUCTURE OUTAGE]
	Migration of Buildbot to new hardware
In-Reply-To: <12CB32AA-FFD9-41FC-BE02-0D5DD5EBA70C@atleastfornow.net>
References: <8DA10464-22CE-430B-A6A7-DD02019DBAD1@atleastfornow.net>
 <12CB32AA-FFD9-41FC-BE02-0D5DD5EBA70C@atleastfornow.net>
Message-ID: <9611B03A-763B-4FBB-B291-B0BEE7EAFB43@twistedmatrix.com>

Hooray!  I am already noticing faster response times from the web UI, both on buildbot and www.twistedmatrix.com :-).

-glyph

> On May 14, 2016, at 6:29 AM, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
> 
> Hi everyone,
> 
> The BuildBot migration is now complete.
> 
> - Amber
> 
>> On 11 May 2016, at 16:28, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
>> 
>> Hi everyone,
>> 
>> Keeping the infrastructure updates coming! I'm going to be moving the Buildbot to new hardware, so it may be down for today, plus however long DNS takes to propagate. This should only affect Twisted committers running tests on the builder infrastructure; Trac, docs, and everything else will remain online.
>> 
>> - Amber
>> _______________________________________________
>> Twisted-web mailing list
>> Twisted-web at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From hawkowl at atleastfornow.net  Wed May 18 11:07:04 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Thu, 19 May 2016 01:07:04 +0800
Subject: [Twisted-Python] Twisted 16.2 Release Announcement
Message-ID: <269D218D-946F-4C59-90E8-50165338D33D@atleastfornow.net>

On behalf of Twisted Matrix Laboratories, I am honoured to announce the release of Twisted 16.2!

Just in time for PyCon US, this release brings a few headlining features (like the haproxy endpoint) and the continuation of the modernisation of the codebase. More Python 3, less deprecated code, what's not to like?

- twisted.protocols.haproxy.proxyEndpoint, a wrapper endpoint that gives some extra information to the wrapped protocols passed by haproxy;
- Migration of twistd and other twisted.application.app users to the new logging system (twisted.logger);
- Porting of parts of Twisted Names' server to Python 3;
- The removal of the very old MSN client code and the deprecation of the unmaintained ICQ/OSCAR client code;
- More cleanups in Conch in preparation for a Python 3 port and cleanups in HTTP code in preparation for HTTP/2 support;
- Over thirty tickets overall closed since 16.1.

For more information, check the NEWS file (link provided below).

You can find the downloads at <https://pypi.python.org/pypi/Twisted> (or alternatively <http://twistedmatrix.com/trac/wiki/Downloads>). The NEWS file is also available at <https://github.com/twisted/twisted/blob/twisted-16.2.0/NEWS>.

Many thanks to everyone who had a part in this release - the supporters of the Twisted Software Foundation, the developers who contributed code as well as documentation, and all the people building great things with Twisted!

Twisted Regards,
Amber Brown (HawkOwl)
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160519/28f5b65b/attachment.pgp>

From hs at ox.cx  Fri May 20 01:53:13 2016
From: hs at ox.cx (Hynek Schlawack)
Date: Fri, 20 May 2016 09:53:13 +0200
Subject: [Twisted-Python] [ANN] prometheus_async: asyncio/Twisted-aware
	Python Prometheus instrumentation
Message-ID: <64C542E8-604C-4DB4-B828-EED93489736A@ox.cx>

Dear fellow friends of asynchronous software,

maybe some of you have already bumped into the Prometheus monitoring system <https://prometheus.io> and liked it like I do (in any case, I?d like to invite you to my PyCon US talk on that topic: <https://us.pycon.org/2016/schedule/presentation/1601/>!)

And while it?s great that Python is a first class citizen due to the official Python client library <https://github.com/prometheus/client_python>, asyncio and Twisted sadly aren?t!

That?s why I?ve just released prometheus_async: https://prometheus-async.readthedocs.io/

First and foremost it wraps the metrics from the official client (you don?t want *me* to do math!) and makes them work properly on coroutines and Deferreds (and makes them well-behaved decorators too but that?s a topic for another day?).

Additionally, it adds a few goodies:

- Metric-exposure via aiohttp that ist much more flexible than what comes with the stdlib-based official solution.
- ?that can also be started in a separate thread.  That means you can use them in regular, *synchronous* Python 3 applications as well (I instrument all my Pyramid apps like that).
- Integration with service discovery.  Listen on port 0 and leave registration to Consul Agent (integration is pluggable, just implement two methods)!

Sadly the goodies are asyncio-only so far.  Partly because the official client has some Twisted Web support merged but not released yet.  Contributions are very welcome!

Cheers,
Hynek

From adi at roiban.ro  Sat May 21 04:30:26 2016
From: adi at roiban.ro (Adi Roiban)
Date: Sat, 21 May 2016 11:30:26 +0100
Subject: [Twisted-Python] Twisted 16.2 Release Announcement
In-Reply-To: <269D218D-946F-4C59-90E8-50165338D33D@atleastfornow.net>
References: <269D218D-946F-4C59-90E8-50165338D33D@atleastfornow.net>
Message-ID: <CAFycZ9f948Y2Q3bqjG_H7D6ZXWw3U1+TuqCa6+Knb4=O-cyeTQ@mail.gmail.com>

On 18 May 2016 at 18:07, Amber "Hawkie" Brown <hawkowl at atleastfornow.net>
wrote:

> On behalf of Twisted Matrix Laboratories, I am honoured to announce the
> release of Twisted 16.2!
>
> Just in time for PyCon US, this release brings a few headlining features
> (like the haproxy endpoint) and the continuation of the modernisation of
> the codebase. More Python 3, less deprecated code, what's not to like?
>
> - twisted.protocols.haproxy.proxyEndpoint, a wrapper endpoint that gives
> some extra information to the wrapped protocols passed by haproxy;
> - Migration of twistd and other twisted.application.app users to the new
> logging system (twisted.logger);
> - Porting of parts of Twisted Names' server to Python 3;
> - The removal of the very old MSN client code and the deprecation of the
> unmaintained ICQ/OSCAR client code;
> - More cleanups in Conch in preparation for a Python 3 port and cleanups
> in HTTP code in preparation for HTTP/2 support;
> - Over thirty tickets overall closed since 16.1.
>
> For more information, check the NEWS file (link provided below).
>
> You can find the downloads at <https://pypi.python.org/pypi/Twisted> (or
> alternatively <http://twistedmatrix.com/trac/wiki/Downloads>). The NEWS
> file is also available at <
> https://github.com/twisted/twisted/blob/twisted-16.2.0/NEWS>.
>
> Many thanks to everyone who had a part in this release - the supporters of
> the Twisted Software Foundation, the developers who contributed code as
> well as documentation, and all the people building great things with
> Twisted!
>
> Twisted Regards,
> Amber Brown (HawkOwl)
>

This is also the release in which the code hosting was switched to
GitHub... so source links from documentation will now link to github.

Great work Amber! Thanks!

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160521/b71b6b88/attachment.html>

From glyph at twistedmatrix.com  Sat May 21 15:54:53 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 21 May 2016 14:54:53 -0700
Subject: [Twisted-Python] Looking for help dealing with ClientService
	reconnections
In-Reply-To: <CADzPF4u2jMxfoEn6oxhjLgoATZ=kacDuL4J2ji2-HYyH57bd_Q@mail.gmail.com>
References: <CADzPF4vD4yf64OHtf=H62BZrez7jewo_XSMDhP3YuabUQOwmZg@mail.gmail.com>
 <7A7DF935-F87C-4A60-84A7-69AF43894BC2@twistedmatrix.com>
 <CADzPF4u2jMxfoEn6oxhjLgoATZ=kacDuL4J2ji2-HYyH57bd_Q@mail.gmail.com>
Message-ID: <A88137BD-6D7C-4C39-B4CA-56832B4ECA1C@twistedmatrix.com>


> On May 10, 2016, at 9:52 AM, Daniel Sutcliffe <dansut at gmail.com> wrote:
> 
> Thanks Glyph, I think you have given me a push back in the 'right'
> direction - more thoughts and commentary embedded below if you, or
> anyone else, has the time.
> 
> On May 6, 2016, at 10:19 AM, Daniel Sutcliffe <dansut at gmail.com> wrote:
> [...]
>>> The new ClientService class seems like it will fit my needs very
>>> closely but I am struggling with how to handle the reconnections... I
>>> have been using the whenConnected() method to grab the Protocol for
>>> the initial connection and then use a method of this to poll the
>>> connected slave. When the connection is lost I get an errback from
>>> this method's deferred which I use as a signal to abandon the Protocol
>>> and call whenConnected() again... at this point I have an issue though
>>> as the returned deferred immediately gives me a callback with the same
>>> Protocol which has just lost its connection, and thus loop...
> 
> On Mon, May 9, 2016 at 6:19 PM, Glyph <glyph at twistedmatrix.com> wrote:
>> If you want a hook each time a new protocol is created, you're probably
>> better off writing a wrapper protocol factory, and passing that to your
>> ClientService, then doing any set-up work you want to do in your
>> buildProtocol implementation, which delegates to the real, pymodbus
>> implementation.
> 
> Understood, if this is the way the framework is intended to be used I
> realize doing anything else is going to be fighting against the flow.
> 
> However, just to probe the situation I found myself in further, for
> the sake probing broken code to see how it might be fixed:
> 
> Given the ClientService.whenConnected() method is intended to provide
> access to my connected Protocol through the deferred it returns, is it
> not a little unfriendly that this Protocol may turn out to be
> disconnected? OK occasionally due to timing but for this to be a
> possible condition which can loop with the same disconnected Protocol
> returned until the ClientService has its _currentConnection set to
> None, suggests to me that I can't safely use my Protocol from
> whenConnected() for much other than as a notification the first
> connection has occurred... but how do I avoid this?

whenConnected() is not intended to be used for "give me each Protocol as it is instantiated so that state can be set up", it is intended for API clients which want to send a message to the current connection to just retrieve the current connection so they can call a method on it.

I'm not sure what you mean by "turn out to be disconnected".  The physical reality of networking is that you might always encounter a transport which has been disconnected but which you haven't received notification of its disconnection yet.

> I have looked at the source and it seems to me the fact that the
> connection has been lost should bubble up to the ClientService through
> a t.a.i._DisconnectFactory and t.a.i._ReconnectingProtocolProxy once
> my Protocol's connectionLost() is called. My issue seems to be that I
> errback on a Protocol method's deferred returned to code at or above
> the ClientService level which gives up on that Protocol and calls
> whenConnected() to get the next one, only the Protocol's
> connectionLost() has yet to be called and then doesn't have chance to
> because my code is looping around calling whenConnected() and getting
> the same Protocol back. I hope that makes sense :-/

Let me try to rephrase: you call a protocol method which returns a Deferred; you add an errback to that Deferred which calls whenConnected() to re-try, but since the protocol hasn't disconnected yet, you get the same protocol instance back, which is useless to you.

> My Q on this is if I should be internally calling my Protocol's
> connectionLost() so it can bubble up to the ClientService before I
> errback on the Protocol method - whose responsibility is it to call
> this?

It's the framework's responsibility to call it.  You should not call it yourself.  Your Protocol's connectionLost isn't going to bubble up to ClientService anyway; you'd have to call your wrapper's connectionLost, which would confuse its internal state, since the framework would call it again right afterwards, and we definitely don't have test coverage for that, since the framework will normally only call it once.

The right way to handle this would be to introduce a delay between re-tries.  It's generally a good idea to have such a delay for lots of reasons; you don't want to overload your peer in the case of a transient failure.  As a bonus, the fact that you've gone back up to the reactor loop to wait a while means that the transport will be properly disconnected and whenConnected() will do what you want.

>>> Before I got on this mailing list I posted this Q to stackoverflow
>>> with some example code:
>>>   http://stackoverflow.com/q/37061807/3448214
>>> but no solution or much attention there yet.
>>> 
>>> As I say there, I realize I have probably just made a bad pattern
>>> choice for how to use this API, but I have not been able to work out a
>>> better choice which seems clean and fits my needs/understanding well.
>>> I have tried deriving my own Protocol/Factory and handling the polling
>>> there but this seems to get really messy once I start to add code to
>>> get the collected data to a destination at that level, involving
>>> giving the Protocol too much knowledge of how the data is to be
>>> handled.
>> 
>> I am curious as to why you say that this is "messy".
> 
> Honestly, this was just a gut feeling at the time, probably more
> sourced in my implementation from lack of experience in using Twisted;
> after reading around the subject, looking at many more examples, and
> your advice, I think I am convinced I need to back to looking at my
> own Protocol derived from the pymodbus one with a Factory that
> contains the persistent config and access to an interface to pump the
> polled data upstream.
> 
>>> Any advice, good patterns, or pointers to other projects which do
>>> something similar is appreciated,
>> 
>> I spent a while thinking about your question, and I'm sorry that I can't give
>> a more thorough answer, but I think you need to be a bit more specific
>> about what it is you don't like about your potential solution.  It seems to me
>> that having a delegating Factory, especially if all you need to do is set up
>> some state on each Protocol that gets produced, should be sufficient...
> 
> Looking at the code again I think it just seemed to make sense to me
> at the time to have something that is (or has) a ClientService be the
> object I am calling a DataSource have more control over when it polls
> that data and what it does with it - and not to have to make the
> Protocol and its Factory aware of this at all. Does that make it any
> clearer? I am happy to push ahead with building this into my
> Factory/Protocol if that is more normal usage for Twisted as I am sure
> there will be benefits of encapsulating it here beyond the other side
> I was seeing during that moment of confusion.
> 
> Thanks for the advice, I think it was enough to nudge me in a
> direction that will work better to get me going, and if with more
> experience other usage makes more sense I can always refactor,
> refactor, refactor :)

Yup!

Happy to help, sorry for the super long lag time on this reply, but my email queue has been pretty full lately :)

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160521/52b6366b/attachment.html>

From glyph at twistedmatrix.com  Sat May 21 16:12:16 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 21 May 2016 15:12:16 -0700
Subject: [Twisted-Python] overview: new review queue venue
Message-ID: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>

Hooray!  We're on github now.  Next: there's the question of how to deal with pull requests?

It occurs to me that what we really need from our code review system is mainly one thing: the review queue: a single place for reviewers to look to find things that need to be reviewed.  This is important because proposed changes need to be responded to in a timely manner, so that the code in them doesn't get stale, and so that contributors don't get frustrated.  We have limited resources for doing so, of course, so sometimes we fall short of this objective, but the point is we need to apply our limited resources to it.

The operations on the queue are:

Proposing a change should put it into the queue.
Accepting a change should remove it from the queue.
Reviewing a change should remove it from the queue.
Responding to review feedback should re-add it to the queue.
A reviewer should be able to examine just the things in the queue so they can quickly grab the next one, without seeing noise.

Our current workflow maps this into Trac via the following:

Proposing: add the "review" keyword.
Accepting: remove the "review" keyword, merge.
Reviewing: removing the "review" keyword, reassign
Responding: add the "review" keyword again
Viewing: https://twistedmatrix.com/trac/report/25

It is therefore tempting to map it into GitHub via labels and webhooks and bot workflows.  However, I think a better mapping would be this:

Proposing: Just open a pull request.  Any open pull request should be treated as part of the queue.
Accepting: A committer pushes the big green button; this 
Reviewing: This is the potentially slightly odd part.  I believe a review that doesn't result in acceptance should close the PR.  We need to be careful to always include some text that explains that closing a PR does not mean that the change is rejected, just that the submitter must re-submit.  Initially this would just mean opening a new PR, but Mark Williams is working on a bot to re-open pull requests when a submitter posts a "please review" comment: https://github.com/markrwilliams/txghbot
Responding: A submitter can open a new PR, or, once we start running txghbot, reopen their closed PR.
Viewing: https://github.com/twisted/twisted/pulls?utf8=?&q=is%3Apr+is%3Aopen+-status%3Afailed

The one thing that this workflow is missing from trac is a convenient way for committers, having eyeballed a patch for any obvious malware, to send it to the buildbots.

We could also potentially just replace our buildbot build farm with a combination of appveyor and travis-ci; this would remove FreeBSD from our list of supported platforms, as well as eliminating a diversity of kernel integrations.  However, for the stuff that doesn't work in containers (mostly inotify) we could run one builder on non-container-based infrastructure, and for everything else (integrating with different system toolchains) we can test using Docker: https://docs.travis-ci.com/user/docker/.  I am very much on the fence about this, since I don't want to move backwards in terms of our test coverage, but this would accelerate the contribution process so much that it's probably worth discussing.

10 years ago or so, we would routinely discover kernel bugs in our integration test harness and they would be different on different platforms.  But today's platform realities are considerably less harsh, since there are a lot more entities in the ecosystem that have taken responsibility for testing that layer of the stack; I couldn't find anything since 2008 or so where we really saw a difference between Fedora and Ubuntu at the kernel level, for example.

Thoughts?

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160521/3b678224/attachment-0001.html>

From terry at jon.es  Sat May 21 16:57:12 2016
From: terry at jon.es (Terry Jones)
Date: Sun, 22 May 2016 00:57:12 +0200
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
Message-ID: <CACqnu4U8XonGd1W0US8W3n=F_66er_y68fJ96OunqetvcJO8jg@mail.gmail.com>

Hi Glyph

On Sun, May 22, 2016 at 12:12 AM, Glyph <glyph at twistedmatrix.com> wrote:

> - Reviewing: This is the potentially slightly odd part.  I believe a
> review that doesn't result in acceptance should *close* the PR.


This feels wrong to me. I find github pull requests very useful, in ways
that it sounds like your suggestion would cut off - if I understand you
right. Do you mean that the one person who decides to do the formal review
would set themself as the "assignee" and, following their review, close the
ticket if the change isn't up to standard? And in the meantime others (who
are not the assignee) would be free to comment at will, with the pr staying
open? If so, that's good, but I still don't like to think that all
discussion around a pr then gets shut down on the say so of the single
reviewer. One thing that pull requests encourage is discussion - sometimes
it's a way to ask for input on how to proceed, sometimes it's just people
chipping in a little bit with a code optimization, sometimes people saying
"if you do this then this other thing will happen" etc. They help people
learn, to easily make small contributions (that can lead to larger ones),
to see what's going on, to judge the health of a project, etc. I like how
dynamic and lightweight that process can be in a Github pull request. It
feels to me that closing pull requests is a step in the other direction -
back towards something that feels more monolithic and more old fashioned.

As usual, I'm sure that there's absolutely nothing I can say on any tech
subject that you don't know already :-)  But those are my thoughts...

Terry
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160522/b3a09a49/attachment.html>

From werner at thieprojects.ch  Sat May 21 17:00:56 2016
From: werner at thieprojects.ch (Werner Thie)
Date: Sat, 21 May 2016 13:00:56 -1000
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
Message-ID: <8a7084d9-4ad1-5906-0081-ac1940f5bf60@thieprojects.ch>

Thank you all for that great and massive move!

Me running twisted almost exclusively on FreeBSD, what is the reason for

 > We could also potentially just replace our buildbot build farm with a
 > combination of appveyor and travis-ci; this would remove FreeBSD from
 > our list of supported platforms, ...

Thanks for enlightening me.

Werner


From glyph at twistedmatrix.com  Sat May 21 19:04:32 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 21 May 2016 18:04:32 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <8a7084d9-4ad1-5906-0081-ac1940f5bf60@thieprojects.ch>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <8a7084d9-4ad1-5906-0081-ac1940f5bf60@thieprojects.ch>
Message-ID: <B302B632-1207-4DEB-839A-8550278A00C1@twistedmatrix.com>


> On May 21, 2016, at 4:00 PM, Werner Thie <werner at thieprojects.ch> wrote:
> 
> Thank you all for that great and massive move!
> 
> Me running twisted almost exclusively on FreeBSD, what is the reason for
> 
> > We could also potentially just replace our buildbot build farm with a
> > combination of appveyor and travis-ci; this would remove FreeBSD from
> > our list of supported platforms, ...
> 
> Thanks for enlightening me.

While FreeBSD support is important, there are no CI-as-a-service platforms that support it, that I'm aware of.

Right now, we need to manually vet each change before sending it to buildbots, because they are shared mutable environments that we can't afford to have running untrusted code automatically.  If we could switch to Travis and Appveyor, then we could let them worry about malicious code, which would allow contributors to get instant feedback, rather than waiting for reviewers to manually run the builders.

Travis does support OS X, which means that some level of BSD coverage would still be maintained.  And of course if someone could find an equivalent service that supports FreeBSD we could add it to the list of pull request statuses :).

-glyph

From glyph at twistedmatrix.com  Sat May 21 19:29:01 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 21 May 2016 18:29:01 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <CACqnu4U8XonGd1W0US8W3n=F_66er_y68fJ96OunqetvcJO8jg@mail.gmail.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <CACqnu4U8XonGd1W0US8W3n=F_66er_y68fJ96OunqetvcJO8jg@mail.gmail.com>
Message-ID: <149A8FA9-2519-4D16-8C33-D4867B0AC0A7@twistedmatrix.com>


> On May 21, 2016, at 3:57 PM, Terry Jones <terry at jon.es> wrote:
> 
> Hi Glyph
> 
> On Sun, May 22, 2016 at 12:12 AM, Glyph <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> Reviewing: This is the potentially slightly odd part.  I believe a review that doesn't result in acceptance should close the PR.
> 
> This feels wrong to me. I find github pull requests very useful, in ways that it sounds like your suggestion would cut off - if I understand you right. Do you mean that the one person who decides to do the formal review would set themself as the "assignee" and, following their review, close the ticket if the change isn't up to standard?

The "assignee" field isn't all that useful; really, it should be set to the submitter, but github has weird rules about who can be assigned (last I checked, only contributors).

> And in the meantime others (who are not the assignee) would be free to comment at will, with the pr staying open?

Drive-by comments on a PR are sometimes helpful, but should be used sparingly.  Mostly, discussion should happen on issues, not PRs.  A PR is a suggested resolution to a problem, and we might reject one solution, but an issue should describe the problem itself.

> If so, that's good, but I still don't like to think that all discussion around a pr then gets shut down on the say so of the single reviewer.

The PR gets closed, not deleted.  People can still comment if they like.

> One thing that pull requests encourage is discussion - sometimes it's a way to ask for input on how to proceed, sometimes it's just people chipping in a little bit with a code optimization, sometimes people saying "if you do this then this other thing will happen" etc. They help people learn, to easily make small contributions (that can lead to larger ones), to see what's going on, to judge the health of a project, etc. I like how dynamic and lightweight that process can be in a Github pull request. It feels to me that closing pull requests is a step in the other direction - back towards something that feels more monolithic and more old fashioned.

You see "dynamic and lightweight", I see "unfocused and noisy" :).

One of the things I still don't like about github is the tendency for projects to build up huge piles of open PRs, which nobody wants to reject because they're maybe possibly useful, but they won't accept because they don't meet quality standards.  Contributors don't get clear feedback about whether they're expected to do more or whether the project will take it over, and people frequently get mad about their stuff not being merged.  I think by closing PRs that we aren't going to merge as-is we can send a much clearer signal about what the project is taking on versus what it expects external contributors to do more work on.

> As usual, I'm sure that there's absolutely nothing I can say on any tech subject that you don't know already :-)  But those are my thoughts...


While I disagree, I also think that this is a very common perception, and another one of the functions of the github bot could perform would be a form comment after the PR is closed, to always submit a form comment to explain what closing the PR means and how to reopen it.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160521/59159b41/attachment.html>

From glyph at twistedmatrix.com  Sat May 21 19:44:32 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 21 May 2016 18:44:32 -0700
Subject: [Twisted-Python] Persuading Python's Logging to use
	twisted.logger
In-Reply-To: <CADzPF4uwgq1d=VC2tGB8oDR3xRQbGGWAqwNGHuVSK7nyRMjBMA@mail.gmail.com>
References: <CADzPF4sMzLe4-HVpt=Dv3vv-BvzC9EKrBrHTZedLddwVoBb1Qg@mail.gmail.com>
 <93ae72c6-c942-73c6-e119-2c92764c30b3@arskom.com.tr>
 <CADzPF4uwgq1d=VC2tGB8oDR3xRQbGGWAqwNGHuVSK7nyRMjBMA@mail.gmail.com>
Message-ID: <8193AB32-9F5A-4AE5-A078-EB7F50939D1B@twistedmatrix.com>


> On May 10, 2016, at 4:23 PM, Daniel Sutcliffe <dansut at gmail.com> wrote:
> 
> Thanks for all the hints and suggestions guys, this was far simpler
> than I thought it would be and the results are exactly what I imagined
> without too much effort.

Fantastic!

> Jeff: Have to admit I started with your code and had it working with
> in my scenario in no time at all, this was a great bump start, but I
> couldn't help tweaking...
> 
> Glyph: The code below is I'm sure far from perfect, and it doesn't
> take your advice and convert the msg into a twisted format string, it
> takes the simpler approach of letting the Logging record pre-format
> using the getMessage() method. I'm sure there are loads of edge cases
> it could cope with better with maybe it is a start of something that
> could be included in Twisted.

The main reason I wanted to do the format-string translation is that it would allow the key/value pairs to be stored according to the same idiom that Twisted uses, and therefore be serialized to jsonFileLogObserver and consequently things like LogStash / ElasticSearch.

> Kevin: I appreciate your input and understand the need to always be
> aware of what you are call/using may be blocking for various reasons -
> I will eventually want to redirect to syslog so will need to deal with
> this later. I still think it makes sense to have a relatively easy
> option of redirecting STDLib logging from used modules to
> twisted.logger available, as well as the opposite. When twistd is
> handling most of logging setup it seems the simpler path to have
> everything using twisted.logger.
> 
> Burak: Your code was especially helpful - it goes much further than I
> even considered is useful so I just borrowed what I thought was
> essential for the needs of this first pass. Will be glad to hear of
> any cases you think will break this code to help make it even more
> general.
> 
> So here's the code I dropped into a logfudger.py in my test dir. All
> feedback encouraged as I really am just finding my way around Python,
> and appreciate all critique of what I could do better:
> 
> from twisted.logger import Logger, LogLevel
> import logging
> LEVEL_SYS2TWISTED = {
>    logging.DEBUG: LogLevel.debug,
>    logging.INFO: LogLevel.info,
>    logging.WARN: LogLevel.warn,
>    logging.ERROR: LogLevel.error,
>    logging.CRITICAL: LogLevel.critical,
> }
> class TwistedLoggerHandler(logging.Handler):
>    def __init__(self):
>        self._log = Logger()
>        logging.Handler.__init__(self)
>    def flush(self):
>        pass
>    def emit(self, record):
>        try:
>            self._log.namespace=record.name
>            self._log.source=record.pathname
>            self._log.emit(
>                LEVEL_SYS2TWISTED[record.levelno],
>                record.getMessage(),
>                lineno=record.lineno, args=record.args)
>        except:
>            self.handleError(record)
> 
> When I use this with pymodbus I then just need to include this with my code:
> 
> import logging
> from logfudger import TwistedLoggerHandler
> sysliblog = logging.getLogger("pymodbus")
> sysliblog.addHandler(TwistedLoggerHandler())
> sysliblog.setLevel(logging.DEBUG)
> from twisted.logger import Logger, globalLogBeginner, textFileLogObserver
> import sys
> globalLogBeginner.beginLoggingTo([textFileLogObserver(sys.stderr)])
> 
> Which gives me a stderr output like:
> 
> 2016-05-10T18:48:52-0400 [pymodbus#info] Informational
> 2016-05-10T18:48:52-0400 [__main__.MBClientFactory#info] Starting
> factory <__main__.MBClientFactory instance at 0x0000000001212ae0>
> 2016-05-10T18:48:52-0400 [__main__.MBClientProtocol#debug] Protocol
> connectionMade
> 2016-05-10T18:48:52-0400 [pymodbus.client.async#debug] Client
> connected to modbus server
> 2016-05-10T18:48:52-0400 [pymodbus.transaction#debug] adding transaction 1
> 
> I don't deal with exceptions logged through the STDLib logging at all,
> and the log_namespace, log_source could probably be set in ways that
> cover more use cases.
> But hopefully this all makes sense and this can be a start of
> something much more generically useful.

Yep!  This is definitely something handy.  Would you mind filing an issue for it?

-glyph



From clayton.daley at gmail.com  Sat May 21 20:25:38 2016
From: clayton.daley at gmail.com (Clayton Daley)
Date: Sat, 21 May 2016 21:25:38 -0500
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <149A8FA9-2519-4D16-8C33-D4867B0AC0A7@twistedmatrix.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <CACqnu4U8XonGd1W0US8W3n=F_66er_y68fJ96OunqetvcJO8jg@mail.gmail.com>
 <149A8FA9-2519-4D16-8C33-D4867B0AC0A7@twistedmatrix.com>
Message-ID: <CACKEAnXnrh696csCs5SCMSRkNyQxyKC4VWpnVoDwT+TEEa1dHQ@mail.gmail.com>

To qualify my comments, I've yet to contribute to Twisted because I don't
have a good enough grasp of its internals, but I have contributed to a
variety of Git-based OSS projects.  I definitely get uneasy with the
general idea that we're trying to "replicate workflow A from Trac in
tangentially related Git PR feature".

We're in Git. We're hoping to solicit PRs from Git users. Git users will be
used to the way PRs are used in other OSS Git projects. Glyph has some
valid criticisms of the situation in some projects, but it should still be
the starting point. For example, closing a PR strikes me as a bad idea --
for lack of a better word, it feels "hostile" to me and certainly
unwelcoming.

In several of the projects I've seen, Git tags fill these roles. Piwik has
a "needs review" tag -- the short list for reviewers. Looks like it's a
manual add, but maybe it could be automated. Once reviewed, Piwik has tags
like "Tests & QA". ZendFramework has a generic "awaiting author update".

To address Glyph's concerns about lingering PRs, perhaps the combination of:

   - A policy like "a reviewer must accept, close, or tag with one of the
   next step tags"
   - A short list of common next steps like "code quality", "needs tests",
   "second opinion", "not review ready"... plus a generic "other author action"
   - Auto-close tickets except those with "needs review" or "second
   opinion" (say) 30 days after the last action.

Drive-by comments on a PR are sometimes helpful, but should be used
> sparingly.  Mostly, discussion should happen on *issues*, not PRs.  A PR
> is a suggested resolution to a problem, and we might reject one solution,
> but an issue should describe the problem itself.


While an Issue is a good place for discussion about a problem, it lacks the
reference code often included in a PR.  You can't ask "how about this
approach" without showing the approach.  As an added bonus, most systems
run travis on PRs so you get a sense of "this approach is thorough" or
"this idea still breaks something".

Clayton Daley


On Sat, May 21, 2016 at 8:29 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On May 21, 2016, at 3:57 PM, Terry Jones <terry at jon.es> wrote:
>
> Hi Glyph
>
> On Sun, May 22, 2016 at 12:12 AM, Glyph <glyph at twistedmatrix.com> wrote:
>
>> - Reviewing: This is the potentially slightly odd part.  I believe a
>> review that doesn't result in acceptance should *close* the PR.
>
>
> This feels wrong to me. I find github pull requests very useful, in ways
> that it sounds like your suggestion would cut off - if I understand you
> right. Do you mean that the one person who decides to do the formal review
> would set themself as the "assignee" and, following their review, close the
> ticket if the change isn't up to standard?
>
>
> The "assignee" field isn't all that useful; really, it should be set to
> the submitter, but github has weird rules about who can be assigned (last I
> checked, only contributors).
>
> And in the meantime others (who are not the assignee) would be free to
> comment at will, with the pr staying open?
>
>
> Drive-by comments on a PR are sometimes helpful, but should be used
> sparingly.  Mostly, discussion should happen on *issues*, not PRs.  A PR
> is a suggested resolution to a problem, and we might reject one solution,
> but an issue should describe the problem itself.
>
> If so, that's good, but I still don't like to think that all discussion
> around a pr then gets shut down on the say so of the single reviewer.
>
>
> The PR gets closed, not deleted.  People can still comment if they like.
>
> One thing that pull requests encourage is discussion - sometimes it's a
> way to ask for input on how to proceed, sometimes it's just people chipping
> in a little bit with a code optimization, sometimes people saying "if you
> do this then this other thing will happen" etc. They help people learn, to
> easily make small contributions (that can lead to larger ones), to see
> what's going on, to judge the health of a project, etc. I like how dynamic
> and lightweight that process can be in a Github pull request. It feels to
> me that closing pull requests is a step in the other direction - back
> towards something that feels more monolithic and more old fashioned.
>
>
> You see "dynamic and lightweight", I see "unfocused and noisy" :).
>
> One of the things I still don't like about github is the tendency for
> projects to build up huge piles of open PRs, which nobody wants to reject
> because they're maybe possibly useful, but they won't accept because they
> don't meet quality standards.  Contributors don't get clear feedback about
> whether they're expected to do more or whether the project will take it
> over, and people frequently get mad about their stuff not being merged.  I
> think by closing PRs that we aren't going to merge as-is we can send a much
> clearer signal about what the project is taking on versus what it expects
> external contributors to do more work on.
>
> As usual, I'm sure that there's absolutely nothing I can say on any tech
> subject that you don't know already :-)  But those are my thoughts...
>
>
> While I disagree, I also think that this is a *very* common perception,
> and another one of the functions of the github bot could perform would be a
> form comment after the PR is closed, to always submit a form comment to
> explain what closing the PR means and how to reopen it.
>
> -glyph
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160521/d535889c/attachment.html>

From glyph at twistedmatrix.com  Sat May 21 23:12:36 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 21 May 2016 22:12:36 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <CACKEAnXnrh696csCs5SCMSRkNyQxyKC4VWpnVoDwT+TEEa1dHQ@mail.gmail.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <CACqnu4U8XonGd1W0US8W3n=F_66er_y68fJ96OunqetvcJO8jg@mail.gmail.com>
 <149A8FA9-2519-4D16-8C33-D4867B0AC0A7@twistedmatrix.com>
 <CACKEAnXnrh696csCs5SCMSRkNyQxyKC4VWpnVoDwT+TEEa1dHQ@mail.gmail.com>
Message-ID: <975701FF-3E24-4072-8795-642339FADE1B@twistedmatrix.com>


> On May 21, 2016, at 7:25 PM, Clayton Daley <clayton.daley at gmail.com> wrote:
> 
> To qualify my comments, I've yet to contribute to Twisted because I don't have a good enough grasp of its internals, but I have contributed to a variety of Git-based OSS projects.  I definitely get uneasy with the general idea that we're trying to "replicate workflow A from Trac in tangentially related Git PR feature".

The workflow is not "from Trac".  The instantiation in Trac is not optimal either, which is why I described the abstract desired workflow separately from our existing instantiation.

> We're in Git. We're hoping to solicit PRs from Git users. Git users will be used to the way PRs are used in other OSS Git projects.

I think you mean "GitHub".  Git PRs don't work at all like GitHub PRs. :).

> Glyph has some valid criticisms of the situation in some projects, but it should still be the starting point. For example, closing a PR strikes me as a bad idea -- for lack of a better word, it feels "hostile" to me and certainly unwelcoming.

The thing is, if you perceive it as "hostile" that a project closes a PR - i.e. "says that they're not going to do more work on it" - that is a cultural problem; it suggests a certain implicit level of passive aggression in opening a PR which I don't want to assume.  It's sort of like having a culture where you can just send anybody an email asking them to do whatever and it would be "hostile" for them to refuse.  In such a culture people don't say "yes", but they do start to ignore messages  Closing the PR is a more accurate reflection of reality - the project (twisted) is not going to do anything about the PR in its current state, so it shouldn't be left open.  It also clearly demarcates the completion of a review.

People feel very differently about workflow, of course, but I've definitely heard from other OSS maintainers that the average workflow of volunteer projects often devolves into a huge backlog of un-reviewed stuff, which obscures the new stuff, and if you want something to actually get reviewed and move along you need to know the maintainers of the project and ask them personally.

I'd much rather our new contributors get a little confused about the culturally unusual step of closing a PR than to have their work be accidentally but systematically discriminated against in favor of people who know how to bug the right people in IRC or email.

> In several of the projects I've seen, Git tags fill these roles. Piwik has a "needs review" tag -- the short list for reviewers. Looks like it's a manual add, but maybe it could be automated. Once reviewed, Piwik has tags like "Tests & QA". ZendFramework has a generic "awaiting author update".

This was my original idea. The problem with GitHub labels ("Git tags" are something completely different) is that they can't be applied by external contributors.  You need write access to the repository to be able to manipulate them.  It's very important to our workflow that external contributors be able to re-submit their PRs.  We could have a bot for that (again, this was the original plan).  But it seems like using the open / closed state to reflect the we will do some work on this / we won't do any more work on this is actually closer to the "native" state of github.

> To address Glyph's concerns about lingering PRs, perhaps the combination of:
> A policy like "a reviewer must accept, close, or tag with one of the next step tags"
This doesn't address the shortcomings of labels, to wit, external contributors need the ability to manipulate them somehow, and if a PR isn't "in review" by default, then they have to whisper some magic comment to make anyone take a look at it.  If we use open/closed, then the default action of "open a PR" will cause someone to look at it, even if our bot is nonexistent or temporarily offline.
> A short list of common next steps like "code quality", "needs tests", "second opinion", "not review ready"... plus a generic "other author action"
The next steps are always the same: "respond to the review".  The review may include any of these, any combination of these, or also possibly questions that the author must answer.  Formally separating these would be a weird tweak on our current workflow that I don't see helping.
> Auto-close tickets except those with "needs review" or "second opinion" (say) 30 days after the last action.
I think you mean "PRs", not "tickets"?  Issues (which are closer to trac "tickets") can remain open indefinitely.  I am not really in favor of any kind of auto-closing or expiration given that the project has wildly variable levels of resources depending on people's spare time; sometimes we have a whole bunch of reviewers active and can get to things within 24 hours, sometimes we're severely overtaxed and can't look at anything for 6 weeks.

> Drive-by comments on a PR are sometimes helpful, but should be used sparingly.  Mostly, discussion should happen on issues, not PRs.  A PR is a suggested resolution to a problem, and we might reject one solution, but an issue should describe the problem itself.
> 
> While an Issue is a good place for discussion about a problem, it lacks the reference code often included in a PR.  You can't ask "how about this approach" without showing the approach.  As an added bonus, most systems run travis on PRs so you get a sense of "this approach is thorough" or "this idea still breaks something".

This is exactly why issues and PRs should be separated.  If you only have one artifact - the PR - to represent both the issue and the potential solution, then you can't get rid of the potential solution (reject the PR) without also getting rid of the description of the problem.  Github already automatically shows anywhere that your PR or issue is mentioned, so all you need to do to say "how about this approach" is to put the words "fixes #NNN" in your PR description.  As a bonus, that will make it automatically close the issue when the PR is merged.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160521/bbecf259/attachment-0001.html>

From rodrigc at crodrigues.org  Sat May 21 23:52:45 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Sat, 21 May 2016 22:52:45 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
Message-ID: <CAG=rPVcT1cBmdB3OLN3U8E_khRMVAGotDccW0Ye7sz0ff6L3jQ@mail.gmail.com>

On Sat, May 21, 2016 at 3:12 PM, Glyph <glyph at twistedmatrix.com> wrote:

> Hooray!  We're on github now.  Next: there's the question of how to deal
> with pull requests?
>

A few people, including myself modified the text with Git instructions:
 https://twistedmatrix.com/trac/wiki/TwistedDevelopment#SubmittingaPatch

The basic idea is, "for now, if you submit a GitHub PR, you must file a
Trac ticket.  You must reference the PR in the Trac ticket,
and you must reference the Trac ticket in the PR".
If you want to change that workflow somehow, go ahead, but for starters
that should be good enough to get going.

These two pull requests followed that:

https://github.com/twisted/twisted/pull/62
https://github.com/twisted/twisted/pull/63



> Reviewing: This is the potentially slightly odd part.  I believe a review
> that doesn't result in acceptance should *close* the PR.  We need to be
> careful to always include some text that explains that closing a PR does
> not mean that the change is rejected, just that the submitter must
> re-submit.  Initially this would just mean opening a new PR, but Mark
> Williams is working on a bot to re-open pull requests when a submitter
> posts a "please review" comment: https://github.com/markrwilliams/txghbot
>

I don't agree with this.  If a PR is reviewed, and the result of the review
is "NO WAY", then I am OK with the PR being closed.
However, if a the result of the review is "needs more work before being
accepted", then
it should be possible for the submitter to add more commits to that PR,
and even "git rebase" and squash commits in that PR.

That's the process that I followed when I submitted
https://github.com/twisted/twisted/pull/62

By the way, PR 62 is the first pull request that has been successfully
submitted to Twisted, and incorporated into the code:

https://github.com/twisted/twisted/commit/95c49d74136eef420fabdeea85f650da2bc78b07

It is a rather trivial documentation fix, but I will still take credit as
the first Pull Request successful submitter! :)

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160521/3c170344/attachment.html>

From adi at roiban.ro  Sun May 22 00:04:41 2016
From: adi at roiban.ro (Adi Roiban)
Date: Sun, 22 May 2016 07:04:41 +0100
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <B302B632-1207-4DEB-839A-8550278A00C1@twistedmatrix.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <8a7084d9-4ad1-5906-0081-ac1940f5bf60@thieprojects.ch>
 <B302B632-1207-4DEB-839A-8550278A00C1@twistedmatrix.com>
Message-ID: <CAFycZ9e45jppC+ZLWjnrk8TySaRygVzhtbizx4YcD+As3RnDhQ@mail.gmail.com>

On 22 May 2016 at 02:04, Glyph <glyph at twistedmatrix.com> wrote:

>
> > On May 21, 2016, at 4:00 PM, Werner Thie <werner at thieprojects.ch> wrote:
> >
> > Thank you all for that great and massive move!
> >
> > Me running twisted almost exclusively on FreeBSD, what is the reason for
> >
> > > We could also potentially just replace our buildbot build farm with a
> > > combination of appveyor and travis-ci; this would remove FreeBSD from
> > > our list of supported platforms, ...
> >
> > Thanks for enlightening me.
>
> While FreeBSD support is important, there are no CI-as-a-service platforms
> that support it, that I'm aware of.
>
> Right now, we need to manually vet each change before sending it to
> buildbots, because they are shared mutable environments that we can't
> afford to have running untrusted code automatically.  If we could switch to
> Travis and Appveyor, then we could let them worry about malicious code,
> which would allow contributors to get instant feedback, rather than waiting
> for reviewers to manually run the builders.
>
> Travis does support OS X, which means that some level of BSD coverage
> would still be maintained.  And of course if someone could find an
> equivalent service that supports FreeBSD we could add it to the list of
> pull request statuses :).
>

I am not sure that Travis supports Python on OSX.... and it might take some
time until there is support for Python on Windows and I am not sure if
Travis-ci.org will support this free of charge.

I think that we can have both... and in the first instance automatically
trigger Travis-CI builds and manually trigger buildbot builds.

----------

GitLab is an option, as I think that they allow you to bring your own build
slaves.... but I think that the current buildbots are fine.

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160522/9c1d2705/attachment.html>

From hawkowl at atleastfornow.net  Sun May 22 00:08:03 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Sun, 22 May 2016 14:08:03 +0800
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
Message-ID: <8F94FC42-18C6-4D4E-BAD9-6D9C56E07F69@atleastfornow.net>


> On 22 May 2016, at 06:12, Glyph <glyph at twistedmatrix.com> wrote:
> 
> It is therefore tempting to map it into GitHub via labels and webhooks and bot workflows.  However, I think a better mapping would be this:
> 
> 	? Proposing: Just open a pull request.  Any open pull request should be treated as part of the queue.
> 	? Accepting: A committer pushes the big green button; this
> 	? Reviewing: This is the potentially slightly odd part.  I believe a review that doesn't result in acceptance should close the PR.  We need to be careful to always include some text that explains that closing a PR does not mean that the change is rejected, just that the submitter must re-submit.  Initially this would just mean opening a new PR, but Mark Williams is working on a bot to re-open pull requests when a submitter posts a "please review" comment: https://github.com/markrwilliams/txghbot
> 	? Responding: A submitter can open a new PR, or, once we start running txghbot, reopen their closed PR.
> 	? Viewing: https://github.com/twisted/twisted/pulls?utf8=?&q=is%3Apr+is%3Aopen+-status%3Afailed

I think this is reasonable. I believe txghbot is in a place where we can start using it for just that.

> The one thing that this workflow is missing from trac is a convenient way for committers, having eyeballed a patch for any obvious malware, to send it to the buildbots.
> 
> We could also potentially just replace our buildbot build farm with a combination of appveyor and travis-ci; this would remove FreeBSD from our list of supported platforms, as well as eliminating a diversity of kernel integrations.  However, for the stuff that doesn't work in containers (mostly inotify) we could run one builder on non-container-based infrastructure, and for everything else (integrating with different system toolchains) we can test using Docker: https://docs.travis-ci.com/user/docker/.  I am very much on the fence about this, since I don't want to move backwards in terms of our test coverage, but this would accelerate the contribution process so much that it's probably worth discussing.

I don't think that this will do us any good. Having travis/appveyor to be a first line of review (giving a quick "builds fail/builds probably pass) so that contributors get an immediate "does this have a chance of being merged" is a good thing; but there is certainly value in having the various different platforms. All we need is a bit more tooling around it (and I think txghbot is a good starting place for that).

We also need to look into some extra tooling around tox; mainly around the ratcheting quality checkers -- some form of fetching the latest build from buildbot and downloading it locally to compare, or something.

> 10 years ago or so, we would routinely discover kernel bugs in our integration test harness and they would be different on different platforms.  But today's platform realities are considerably less harsh, since there are a lot more entities in the ecosystem that have taken responsibility for testing that layer of the stack; I couldn't find anything since 2008 or so where we really saw a difference between Fedora and Ubuntu at the kernel level, for example.

The issue in 2016 is not actually the kernel; but OpenSSL and OpenSSH, among other system libraries. Every new version of Fedora has been red on the buildbots for this reason; OpenSSL changed, and we needed to fix our use of it. Worth also noting is that Travis is so horrendously behind in all things Python+Ubuntu (do they even have a current PyPy yet?) that we're not actually testing the platforms people are *using*, which is something I think is valuable that the current system gives us.

> 
> Thoughts?
> 
> -glyph

- Amber
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160522/8e1a21d7/attachment.pgp>

From sank.daniel at gmail.com  Sun May 22 00:10:36 2016
From: sank.daniel at gmail.com (Daniel Sank)
Date: Sat, 21 May 2016 23:10:36 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <CAG=rPVcT1cBmdB3OLN3U8E_khRMVAGotDccW0Ye7sz0ff6L3jQ@mail.gmail.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <CAG=rPVcT1cBmdB3OLN3U8E_khRMVAGotDccW0Ye7sz0ff6L3jQ@mail.gmail.com>
Message-ID: <CAKN9TDLYBQxz7b_H=drU=rxS=EweDmPGM6LJnbosK96imdVkuQ@mail.gmail.com>

Dear all,

While I'm just a lurker, having used Twisted and Github for some time in a
moderately sized team I would like to offer a couple comments:

> This is exactly why issues and PRs should be separated.  If you only have
one
> artifact - the PR - to represent both the issue and the potential
solution, then
> you can't get rid of the potential solution (reject the PR) without also
getting rid
> of the description of the problem.  Github already automatically shows
> anywhere that your PR or issue is mentioned, so all you need to do to say
"how
> about this approach" is to put the words "fixes #NNN" in your PR
description.
> As a bonus, that will make it automatically close the issue when the PR is
> merged.
?
I cannot agree with this enough.

> One of the things I still don't like about github is the tendency for
projects to build
> up huge piles of open PRs, which nobody wants to reject because they're
maybe
> possibly useful, but they won't accept because they don't meet quality
standards.

This is a real problem for my team, and I think it happens because we don't
respect the value of issues enough. We have two kinds of branches

1) Those which associate to a specific issue. If issue #123 is about fixing
the quizzwopper, you can make a branch called 123-fix-quizzwopper. This is
a Good Thing.

2) Those which associate to a person. We name these things like
u/danielsank/fix-quizzwopper. The point of that originally was to make
things more "lightweight" and "dynamic" by allowing folks to make a branch
and write some code asap. While this does often work, it also means that we
have a mountain of near unidentifiable branches with no obvious place to
look for that branch's motivation/history/status/whatever.

Type 1 branches have the extra advantage that they're more likely to
attract useful input from people at the right time, i.e. before the code is
written. It's very frustrating to have a PR representing many hours of
someone's work come in only to realize that you want to respond with "Oh
for the love of all that is good in this world please don't do that".
Discussion in an issue helps avoid that.

> Contributors don't get clear feedback about whether they're expected to
do more
> or whether the project will take it over, and people frequently get mad
about their
> stuff not being merged.  I think by closing PRs that we aren't going to
merge as-is
> we can send a much clearer signal about what the project is taking on
versus
> what it expects external contributors to do more work on.

Again, agreed.

> One thing that pull requests encourage is discussion

It's better for that to happen in issues. I have written code, submitted it
as a PR, realized (via feedback and otherwise) that the code is total crap,
deleted the branch and closed the PR, and then gone back to the issue to
re-evaluate my life choices. This is really useful.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160521/233bdc81/attachment-0001.html>

From glyph at twistedmatrix.com  Sun May 22 00:15:25 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 21 May 2016 23:15:25 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <CAG=rPVcT1cBmdB3OLN3U8E_khRMVAGotDccW0Ye7sz0ff6L3jQ@mail.gmail.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <CAG=rPVcT1cBmdB3OLN3U8E_khRMVAGotDccW0Ye7sz0ff6L3jQ@mail.gmail.com>
Message-ID: <5BF75CD5-4FC2-47F5-AF27-CCF027353BAC@twistedmatrix.com>


> On May 21, 2016, at 10:52 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> On Sat, May 21, 2016 at 3:12 PM, Glyph <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> Hooray!  We're on github now.  Next: there's the question of how to deal with pull requests?
> 
> A few people, including myself modified the text with Git instructions:
>  https://twistedmatrix.com/trac/wiki/TwistedDevelopment#SubmittingaPatch <https://twistedmatrix.com/trac/wiki/TwistedDevelopment#SubmittingaPatch>
> 
> The basic idea is, "for now, if you submit a GitHub PR, you must file a Trac ticket.  You must reference the PR in the Trac ticket,
> and you must reference the Trac ticket in the PR".
> If you want to change that workflow somehow, go ahead, but for starters that should be good enough to get going.
> 
> These two pull requests followed that:
> 
> https://github.com/twisted/twisted/pull/62 <https://github.com/twisted/twisted/pull/62>
> https://github.com/twisted/twisted/pull/63 <https://github.com/twisted/twisted/pull/63>

Sorry, I guess I wasn't clear.  I know that PRs are presently a potential alternative to a diff, and that we are still using Trac for ticketing.  I want to make it possible to avoid using Trac for ticketing; perhaps switching to github issues entirely.  Right now, PRs are still ignored; the thing reviewers are paying attention to is the review queue in Trac, and that is sub-optimal, since it requires new contributors to do something unfamiliar.

> Reviewing: This is the potentially slightly odd part.  I believe a review that doesn't result in acceptance should close the PR.  We need to be careful to always include some text that explains that closing a PR does not mean that the change is rejected, just that the submitter must re-submit.  Initially this would just mean opening a new PR, but Mark Williams is working on a bot to re-open pull requests when a submitter posts a "please review" comment: https://github.com/markrwilliams/txghbot <https://github.com/markrwilliams/txghbot>
> 
> I don't agree with this.  If a PR is reviewed, and the result of the review is "NO WAY", then I am OK with the PR being closed.

I understand that this is your feeling, but do you have any reasoning as to why you believe that this should be the case?  "I don't feel like it" isn't selling me.

> However, if a the result of the review is "needs more work before being accepted", then
> it should be possible for the submitter to add more commits to that PR,

Technically speaking, "PRs" are not things that you add commits to.  You add commits to branches, and the PR points to a branch.  Closing your PR will not - can not, if it's on your own fork - delete your branch.

> and even "git rebase" and squash commits in that PR.

Please do not use squash commits.  See http://mjg59.dreamwidth.org/42759.html.

> That's the process that I followed when I submitted https://github.com/twisted/twisted/pull/62 <https://github.com/twisted/twisted/pull/62>
> 
> By the way, PR 62 is the first pull request that has been successfully submitted to Twisted, and incorporated into the code:
> 
> https://github.com/twisted/twisted/commit/95c49d74136eef420fabdeea85f650da2bc78b07 <https://github.com/twisted/twisted/commit/95c49d74136eef420fabdeea85f650da2bc78b07>
> 
> It is a rather trivial documentation fix, but I will still take credit as the first Pull Request successful submitter! :)

First is first, trivial or not :-).

-glyph


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160521/9aad4d9b/attachment.html>

From hawkowl at atleastfornow.net  Sun May 22 00:21:24 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Sun, 22 May 2016 14:21:24 +0800
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <5BF75CD5-4FC2-47F5-AF27-CCF027353BAC@twistedmatrix.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <CAG=rPVcT1cBmdB3OLN3U8E_khRMVAGotDccW0Ye7sz0ff6L3jQ@mail.gmail.com>
 <5BF75CD5-4FC2-47F5-AF27-CCF027353BAC@twistedmatrix.com>
Message-ID: <29559719-0D07-4F84-8CA1-AB361F98FD38@atleastfornow.net>


> On 22 May 2016, at 14:15, Glyph <glyph at twistedmatrix.com> wrote:
> 
> Sorry, I guess I wasn't clear.  I know that PRs are presently a potential alternative to a diff, and that we are still using Trac for ticketing.  I want to make it possible to avoid using Trac for ticketing; perhaps switching to github issues entirely.

This is an optimistic idea but one that, unfortunately, won't happen yet ;)

The things GitHub Issues need to be competitive with Trac as it stands:

- Allowing triage by people without write.
- Useful search (GitHub search is kind of abysmal)
- Assigning to non-committers.

Without these things (and quite a few more), it's unlikely that GitHub Issues will be as useful to us.

- Amber
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160522/d2b5e715/attachment.pgp>

From glyph at twistedmatrix.com  Sun May 22 00:23:26 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 21 May 2016 23:23:26 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <CAFycZ9e45jppC+ZLWjnrk8TySaRygVzhtbizx4YcD+As3RnDhQ@mail.gmail.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <8a7084d9-4ad1-5906-0081-ac1940f5bf60@thieprojects.ch>
 <B302B632-1207-4DEB-839A-8550278A00C1@twistedmatrix.com>
 <CAFycZ9e45jppC+ZLWjnrk8TySaRygVzhtbizx4YcD+As3RnDhQ@mail.gmail.com>
Message-ID: <F9EAEC3A-9BC9-49FF-88F7-CDF100FE9C23@twistedmatrix.com>


> On May 21, 2016, at 11:04 PM, Adi Roiban <adi at roiban.ro> wrote:
> 
> I am not sure that Travis supports Python on OSX....

It does.  We test on OS X quite extensively on <https://github.com/rackerlabs/mimic>, including a py2app app bundle.

> and it might take some time until there is support for Python on Windows and I am not sure if Travis-ci.org <http://travis-ci.org/> will support this free of charge.

Travis-CI doesn't need to support it; you can use both Travis (for OS X / Linux) and Appveyor (for Windows) separately.  You can check it out here: http://www.appveyor.com

I know some projects are using this quite successfully.

> I think that we can have both... and in the first instance automatically trigger Travis-CI builds and manually trigger buildbot builds.

A lot of projects do follow this workflow, and maybe it will be fine for us.  The real question is; is FreeBSD support really worth it for the cost to contributors, since that's the only platform we currently support but can't test?

> GitLab is an option, as I think that they allow you to bring your own build slaves.... but I think that the current buildbots are fine.

I don't understand.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160521/02538672/attachment.html>

From glyph at twistedmatrix.com  Sun May 22 00:25:33 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 21 May 2016 23:25:33 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <8F94FC42-18C6-4D4E-BAD9-6D9C56E07F69@atleastfornow.net>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <8F94FC42-18C6-4D4E-BAD9-6D9C56E07F69@atleastfornow.net>
Message-ID: <A4BA57E0-5FCF-4529-83E9-E9285970B0D5@twistedmatrix.com>


> On May 21, 2016, at 11:08 PM, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
> 
> The issue in 2016 is not actually the kernel; but OpenSSL and OpenSSH, among other system libraries. Every new version of Fedora has been red on the buildbots for this reason; OpenSSL changed, and we needed to fix our use of it. Worth also noting is that Travis is so horrendously behind in all things Python+Ubuntu (do they even have a current PyPy yet?) that we're not actually testing the platforms people are *using*, which is something I think is valuable that the current system gives us.

The reason I specifically mention the kernel is that different userlands can be tested by using Docker in Travis: <https://docs.travis-ci.com/user/docker/>.  The travis official images are a little faster, because they cache more stuff, but we can build our own base images to try to offset that somewhat.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160521/617c1164/attachment-0001.html>

From sank.daniel at gmail.com  Sun May 22 00:24:56 2016
From: sank.daniel at gmail.com (Daniel Sank)
Date: Sat, 21 May 2016 23:24:56 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <5BF75CD5-4FC2-47F5-AF27-CCF027353BAC@twistedmatrix.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <CAG=rPVcT1cBmdB3OLN3U8E_khRMVAGotDccW0Ye7sz0ff6L3jQ@mail.gmail.com>
 <5BF75CD5-4FC2-47F5-AF27-CCF027353BAC@twistedmatrix.com>
Message-ID: <CAKN9TDKrDPqN_Cuo0G7pqCJpUce4c+9ma3o5Cw5OD+O9U=Z_DA@mail.gmail.com>

All,

> Please do not use squash commits.  See
http://mjg59.dreamwidth.org/42759.html.

Squashing commits is essential to making useful commit histories. Are you
just saying not to use Github's built-in feature which squashes everything
into a _single_ commit? If so, note that you can turn that GUI feature off
so nobody is tempted to use it. That does leave the question of whether you
want people to use merge commits or to rebase their branch on the latest
master before merging so that you always get a fast-forward.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160521/17f40ed3/attachment.html>

From hawkowl at atleastfornow.net  Sun May 22 00:27:58 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Sun, 22 May 2016 14:27:58 +0800
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <CAKN9TDKrDPqN_Cuo0G7pqCJpUce4c+9ma3o5Cw5OD+O9U=Z_DA@mail.gmail.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <CAG=rPVcT1cBmdB3OLN3U8E_khRMVAGotDccW0Ye7sz0ff6L3jQ@mail.gmail.com>
 <5BF75CD5-4FC2-47F5-AF27-CCF027353BAC@twistedmatrix.com>
 <CAKN9TDKrDPqN_Cuo0G7pqCJpUce4c+9ma3o5Cw5OD+O9U=Z_DA@mail.gmail.com>
Message-ID: <E4DA27C4-F8BB-4BAE-8224-54BEEB2B895B@atleastfornow.net>


> On 22 May 2016, at 14:24, Daniel Sank <sank.daniel at gmail.com> wrote:
> 
> All,
> 
> > Please do not use squash commits.  See http://mjg59.dreamwidth.org/42759.html.
> 
> Squashing commits is essential to making useful commit histories. Are you just saying not to use Github's built-in feature which squashes everything into a _single_ commit? If so, note that you can turn that GUI feature off so nobody is tempted to use it. That does leave the question of whether you want people to use merge commits or to rebase their branch on the latest master before merging so that you always get a fast-forward.
> 

The thing is that we don't want fast-forward; fast-forward merging creates awful commit histories with no regard to branches, especially for ones like Twisted where (near) every commit on trunk needs to be a deployable one, and where we may need to revert an entire branch.

- Amber
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160522/018d914d/attachment.pgp>

From hawkowl at atleastfornow.net  Sun May 22 00:30:48 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Sun, 22 May 2016 14:30:48 +0800
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <F9EAEC3A-9BC9-49FF-88F7-CDF100FE9C23@twistedmatrix.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <8a7084d9-4ad1-5906-0081-ac1940f5bf60@thieprojects.ch>
 <B302B632-1207-4DEB-839A-8550278A00C1@twistedmatrix.com>
 <CAFycZ9e45jppC+ZLWjnrk8TySaRygVzhtbizx4YcD+As3RnDhQ@mail.gmail.com>
 <F9EAEC3A-9BC9-49FF-88F7-CDF100FE9C23@twistedmatrix.com>
Message-ID: <5D1A9275-779C-41F3-A6FB-D1418033404F@atleastfornow.net>


> On 22 May 2016, at 14:23, Glyph <glyph at twistedmatrix.com> wrote:
> 
> A lot of projects do follow this workflow, and maybe it will be fine for us.  The real question is; is FreeBSD support really worth it for the cost to contributors, since that's the only platform we currently support but can't test?

I'm guessing that we have more FreeBSD users than Windows users ;)

- Amber
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160522/e03c39a3/attachment.pgp>

From glyph at twistedmatrix.com  Sun May 22 00:32:03 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 21 May 2016 23:32:03 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <29559719-0D07-4F84-8CA1-AB361F98FD38@atleastfornow.net>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <CAG=rPVcT1cBmdB3OLN3U8E_khRMVAGotDccW0Ye7sz0ff6L3jQ@mail.gmail.com>
 <5BF75CD5-4FC2-47F5-AF27-CCF027353BAC@twistedmatrix.com>
 <29559719-0D07-4F84-8CA1-AB361F98FD38@atleastfornow.net>
Message-ID: <C1A3CA84-8507-4749-8252-68CA7C6EEB72@twistedmatrix.com>


> On May 21, 2016, at 11:21 PM, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
> 
> 
>> On 22 May 2016, at 14:15, Glyph <glyph at twistedmatrix.com> wrote:
>> 
>> Sorry, I guess I wasn't clear.  I know that PRs are presently a potential alternative to a diff, and that we are still using Trac for ticketing.  I want to make it possible to avoid using Trac for ticketing; perhaps switching to github issues entirely.
> 
> This is an optimistic idea but one that, unfortunately, won't happen yet ;)
> 
> The things GitHub Issues need to be competitive with Trac as it stands:
> 
> - Allowing triage by people without write.

How are things currently "triaged"?  Do you mean "review"?  If so, I think it would be acceptable to come up with a magic comment for a non-commiter to use to signify that they've fully reviewed a PR.  As it stands, we need committers to "accept" a review by deciding to merge, the only difference here is that it would remain in the review queue until they did so, which I think is acceptable (since if the review isn't accepted, it should have remained in the queue anyway).  We could also have a bot address this edge-case somehow.

> - Useful search (GitHub search is kind of abysmal)

I don't see how Trac's is better.

> - Assigning to non-committers.

Honestly I'm not sure that the non-committer assignment part of the workflow is all that useful.  I know I hardly ever look at report 7, and I very much doubt any non-committer does :).  It's not like we're losing information, either; we still have a record of whose fork the PR points to.

> Without these things (and quite a few more), it's unlikely that GitHub Issues will be as useful to us.


I am curious about the "quite a few more".  There are things which we really need as a critical part of our workflow (primarily: the review queue) and then there are accidents of the way trac works.  Nothing is graven in stone here :).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160521/7dc65730/attachment.html>

From hawkowl at atleastfornow.net  Sun May 22 00:36:14 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Sun, 22 May 2016 14:36:14 +0800
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <C1A3CA84-8507-4749-8252-68CA7C6EEB72@twistedmatrix.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <CAG=rPVcT1cBmdB3OLN3U8E_khRMVAGotDccW0Ye7sz0ff6L3jQ@mail.gmail.com>
 <5BF75CD5-4FC2-47F5-AF27-CCF027353BAC@twistedmatrix.com>
 <29559719-0D07-4F84-8CA1-AB361F98FD38@atleastfornow.net>
 <C1A3CA84-8507-4749-8252-68CA7C6EEB72@twistedmatrix.com>
Message-ID: <E0D4942D-61F9-4372-9BB4-B316009A31BF@atleastfornow.net>


> On 22 May 2016, at 14:32, Glyph <glyph at twistedmatrix.com> wrote:
> 
> 
>> On May 21, 2016, at 11:21 PM, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
>> 
>> 
>>> On 22 May 2016, at 14:15, Glyph <glyph at twistedmatrix.com> wrote:
>>> 
>>> Sorry, I guess I wasn't clear.  I know that PRs are presently a potential alternative to a diff, and that we are still using Trac for ticketing.  I want to make it possible to avoid using Trac for ticketing; perhaps switching to github issues entirely.
>> 
>> This is an optimistic idea but one that, unfortunately, won't happen yet ;)
>> 
>> The things GitHub Issues need to be competitive with Trac as it stands:
>> 
>> - Allowing triage by people without write.
> 
> How are things currently "triaged"?  Do you mean "review"?  If so, I think it would be acceptable to come up with a magic comment for a non-commiter to use to signify that they've fully reviewed a PR.  As it stands, we need committers to "accept" a review by deciding to merge, the only difference here is that it would remain in the review queue until they did so, which I think is acceptable (since if the review isn't accepted, it should have remained in the queue anyway).  We could also have a bot address this edge-case somehow.

Creating a ticket, adding it to the relevant milestone (commit required on GitHub), setting the component (which would be a tag on github, requires commit)...

> 
>> - Useful search (GitHub search is kind of abysmal)
> 
> I don't see how Trac's is better.

It has a GUI rather than being stringly typed ;)

> 
>> - Assigning to non-committers.
> 
> Honestly I'm not sure that the non-committer assignment part of the workflow is all that useful.  I know I hardly ever look at report 7, and I very much doubt any non-committer does :).  It's not like we're losing information, either; we still have a record of whose fork the PR points to.

I look at report 7 :(

> 
>> Without these things (and quite a few more), it's unlikely that GitHub Issues will be as useful to us.
> 
> I am curious about the "quite a few more".  There are things which we really need as a critical part of our workflow (primarily: the review queue) and then there are accidents of the way trac works.  Nothing is graven in stone here :).
> 

I guess there's a lot of things that are an accident of trac, but the things above are useful.

> -glyph

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160522/bf813601/attachment.pgp>

From glyph at twistedmatrix.com  Sun May 22 00:37:00 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 21 May 2016 23:37:00 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <5D1A9275-779C-41F3-A6FB-D1418033404F@atleastfornow.net>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <8a7084d9-4ad1-5906-0081-ac1940f5bf60@thieprojects.ch>
 <B302B632-1207-4DEB-839A-8550278A00C1@twistedmatrix.com>
 <CAFycZ9e45jppC+ZLWjnrk8TySaRygVzhtbizx4YcD+As3RnDhQ@mail.gmail.com>
 <F9EAEC3A-9BC9-49FF-88F7-CDF100FE9C23@twistedmatrix.com>
 <5D1A9275-779C-41F3-A6FB-D1418033404F@atleastfornow.net>
Message-ID: <BD7229E1-0824-4B8E-A0CC-1356621EDA4A@twistedmatrix.com>


> On May 21, 2016, at 11:30 PM, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
> 
> 
>> On 22 May 2016, at 14:23, Glyph <glyph at twistedmatrix.com> wrote:
>> 
>> A lot of projects do follow this workflow, and maybe it will be fine for us.  The real question is; is FreeBSD support really worth it for the cost to contributors, since that's the only platform we currently support but can't test?
> 
> I'm guessing that we have more FreeBSD users than Windows users ;)


I realize it can feel like that sometimes, but Google Analytics suggests the large majority of our visitors (45%) are on Windows.  By contrast, 0.05% are on FreeBSD.  Granted, that's a very high percentage of FreeBSD clients for the Internet at large, but nevertheless, I think your perspective may be slightly statistically skewed.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160521/2984bf91/attachment-0001.html>

From glyph at twistedmatrix.com  Sun May 22 00:37:54 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 21 May 2016 23:37:54 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <BD7229E1-0824-4B8E-A0CC-1356621EDA4A@twistedmatrix.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <8a7084d9-4ad1-5906-0081-ac1940f5bf60@thieprojects.ch>
 <B302B632-1207-4DEB-839A-8550278A00C1@twistedmatrix.com>
 <CAFycZ9e45jppC+ZLWjnrk8TySaRygVzhtbizx4YcD+As3RnDhQ@mail.gmail.com>
 <F9EAEC3A-9BC9-49FF-88F7-CDF100FE9C23@twistedmatrix.com>
 <5D1A9275-779C-41F3-A6FB-D1418033404F@atleastfornow.net>
 <BD7229E1-0824-4B8E-A0CC-1356621EDA4A@twistedmatrix.com>
Message-ID: <A34E521B-F56B-4EE2-AC2C-47DDCE3264B0@twistedmatrix.com>


> On May 21, 2016, at 11:37 PM, Glyph <glyph at twistedmatrix.com> wrote:
> 
> the large majority of our visitors

Sorry.  "plurality" :).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160521/eae2e2e4/attachment.html>

From glyph at twistedmatrix.com  Sun May 22 00:41:54 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 21 May 2016 23:41:54 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <CAKN9TDKrDPqN_Cuo0G7pqCJpUce4c+9ma3o5Cw5OD+O9U=Z_DA@mail.gmail.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <CAG=rPVcT1cBmdB3OLN3U8E_khRMVAGotDccW0Ye7sz0ff6L3jQ@mail.gmail.com>
 <5BF75CD5-4FC2-47F5-AF27-CCF027353BAC@twistedmatrix.com>
 <CAKN9TDKrDPqN_Cuo0G7pqCJpUce4c+9ma3o5Cw5OD+O9U=Z_DA@mail.gmail.com>
Message-ID: <9EAAAB01-15F3-4A14-9F0E-4462B9DD4A7B@twistedmatrix.com>


> On May 21, 2016, at 11:24 PM, Daniel Sank <sank.daniel at gmail.com> wrote:
> 
> Squashing commits is essential to making useful commit histories.

Nope.  It's just a handy hack to work around the commonly-used, broken history viewers (like Github's own) that can't correctly present multi-parent commits.  If you use SourceTree or bzr qlog or anything that correctly collapses merges, you don't need squashes.

Furthermore, if you use squashes, you work around a temporary problem (crummy history viewers - which will probably eventually be fixed) by permanently destroying useful information (the sequence of changes which lead to a larger change).  Of course, I can't stop you from doing this in any meaningful sense, you can always delete commits and just create bigger diffs and I won't be able to tell, but I would prefer it if you don't use squash commits or any other kind of history rewriting on Twisted.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160521/35d60993/attachment.html>

From rodrigc at crodrigues.org  Sun May 22 00:42:50 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Sat, 21 May 2016 23:42:50 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <BD7229E1-0824-4B8E-A0CC-1356621EDA4A@twistedmatrix.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <8a7084d9-4ad1-5906-0081-ac1940f5bf60@thieprojects.ch>
 <B302B632-1207-4DEB-839A-8550278A00C1@twistedmatrix.com>
 <CAFycZ9e45jppC+ZLWjnrk8TySaRygVzhtbizx4YcD+As3RnDhQ@mail.gmail.com>
 <F9EAEC3A-9BC9-49FF-88F7-CDF100FE9C23@twistedmatrix.com>
 <5D1A9275-779C-41F3-A6FB-D1418033404F@atleastfornow.net>
 <BD7229E1-0824-4B8E-A0CC-1356621EDA4A@twistedmatrix.com>
Message-ID: <CAG=rPVc_ApgfqdGmcTzD4k4_ndSUfXD_nTtJcJYys=C0q4p3Fw@mail.gmail.com>

On Sat, May 21, 2016 at 11:37 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
> I realize it can feel like that sometimes, but Google Analytics suggests
> the large majority of our visitors (45%) are on Windows.  By contrast,
> 0.05% are on FreeBSD.  Granted, that's a *very *high percentage of
> FreeBSD clients for the Internet at large, but nevertheless, I think your
> perspective may be slightly statistically skewed.
>

Isn't Google Analytics just telling you what type of OS + web browser is
being used to access the twistedmatrix.com web site?
That isn't the same as telling you who actually uses Twisted in a project
or a piece of code.

Unfortunately, FreeBSD isn't well represented in the third party CI systems
out there such as Travis.
It would be nice if it was, but it isn't.  That's a judgment call that the
Twisted project needs to make whether
to support its own buildbots or not, in order to support configurations not
supported by third party CI systems.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160521/6e08e5c9/attachment.html>

From sank.daniel at gmail.com  Sun May 22 00:42:17 2016
From: sank.daniel at gmail.com (Daniel Sank)
Date: Sat, 21 May 2016 23:42:17 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <A34E521B-F56B-4EE2-AC2C-47DDCE3264B0@twistedmatrix.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <8a7084d9-4ad1-5906-0081-ac1940f5bf60@thieprojects.ch>
 <B302B632-1207-4DEB-839A-8550278A00C1@twistedmatrix.com>
 <CAFycZ9e45jppC+ZLWjnrk8TySaRygVzhtbizx4YcD+As3RnDhQ@mail.gmail.com>
 <F9EAEC3A-9BC9-49FF-88F7-CDF100FE9C23@twistedmatrix.com>
 <5D1A9275-779C-41F3-A6FB-D1418033404F@atleastfornow.net>
 <BD7229E1-0824-4B8E-A0CC-1356621EDA4A@twistedmatrix.com>
 <A34E521B-F56B-4EE2-AC2C-47DDCE3264B0@twistedmatrix.com>
Message-ID: <CAKN9TDLOhm=XOTqk14n5dUPTTHzsbo9v=jYTHPCvAAxjsnhyeg@mail.gmail.com>

I can speak for ~20 scientific research groups who use Twisted via LabRAD's
python API <https://github.com/labrad/pylabrad>. A lot of us use or deploy
to Windows at least some times. So that's around 200 people you've never
heard of who use Twisted on Windows :)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160521/c2458b0f/attachment.html>

From glyph at twistedmatrix.com  Sun May 22 00:45:10 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 21 May 2016 23:45:10 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <CAKN9TDKrDPqN_Cuo0G7pqCJpUce4c+9ma3o5Cw5OD+O9U=Z_DA@mail.gmail.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <CAG=rPVcT1cBmdB3OLN3U8E_khRMVAGotDccW0Ye7sz0ff6L3jQ@mail.gmail.com>
 <5BF75CD5-4FC2-47F5-AF27-CCF027353BAC@twistedmatrix.com>
 <CAKN9TDKrDPqN_Cuo0G7pqCJpUce4c+9ma3o5Cw5OD+O9U=Z_DA@mail.gmail.com>
Message-ID: <2C486713-0289-4B8A-BB96-1AF071C5BBB0@twistedmatrix.com>


> On May 21, 2016, at 11:24 PM, Daniel Sank <sank.daniel at gmail.com> wrote:
> 
> That does leave the question of whether you want people to use merge commits or to rebase their branch on the latest master before merging so that you always get a fast-forward.

Github will never fast-forward, and I never want to see anyone using a client manually push a fast-forward to master,  either.  Every left-parent commit should be something that was code reviewed.

If the changes on master are small, it's fine to just merge master into the branch.  But, in the case of larger changes and resurrecting stale, old PRs, rather than merge 1000s of commits off of master, I actually prefer creating a new branch from current master and merging the old branch into it.

Rebasing an entire branch on master creates new commits that were never tested by CI, and never present in anyone's working copy.  I strongly prefer to avoid this.  Rebase is great functionality, but IMHO there is only one correct way to use it: rebase --interactive, carefully vetting each commit to ensure it still says what you want it to.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160521/e8036826/attachment.html>

From glyph at twistedmatrix.com  Sun May 22 00:46:49 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 21 May 2016 23:46:49 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <CAKN9TDLOhm=XOTqk14n5dUPTTHzsbo9v=jYTHPCvAAxjsnhyeg@mail.gmail.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <8a7084d9-4ad1-5906-0081-ac1940f5bf60@thieprojects.ch>
 <B302B632-1207-4DEB-839A-8550278A00C1@twistedmatrix.com>
 <CAFycZ9e45jppC+ZLWjnrk8TySaRygVzhtbizx4YcD+As3RnDhQ@mail.gmail.com>
 <F9EAEC3A-9BC9-49FF-88F7-CDF100FE9C23@twistedmatrix.com>
 <5D1A9275-779C-41F3-A6FB-D1418033404F@atleastfornow.net>
 <BD7229E1-0824-4B8E-A0CC-1356621EDA4A@twistedmatrix.com>
 <A34E521B-F56B-4EE2-AC2C-47DDCE3264B0@twistedmatrix.com>
 <CAKN9TDLOhm=XOTqk14n5dUPTTHzsbo9v=jYTHPCvAAxjsnhyeg@mail.gmail.com>
Message-ID: <87556E97-55CD-4515-AE57-0C699466E4F2@twistedmatrix.com>


> On May 21, 2016, at 11:42 PM, Daniel Sank <sank.daniel at gmail.com> wrote:
> 
> I can speak for ~20 scientific research groups who use Twisted via LabRAD's python API <https://github.com/labrad/pylabrad>. A lot of us use or deploy to Windows at least some times. So that's around 200 people you've never heard of who use Twisted on Windows :)
> 

Wow, you are just knocking it out of the park with useful feedback in this thread :-).  Any chance I could cajole you into submitting a success story to success at twistedmatrix.com?

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160521/c63c05a3/attachment-0001.html>

From glyph at twistedmatrix.com  Sun May 22 00:55:24 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 21 May 2016 23:55:24 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <CAG=rPVc_ApgfqdGmcTzD4k4_ndSUfXD_nTtJcJYys=C0q4p3Fw@mail.gmail.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <8a7084d9-4ad1-5906-0081-ac1940f5bf60@thieprojects.ch>
 <B302B632-1207-4DEB-839A-8550278A00C1@twistedmatrix.com>
 <CAFycZ9e45jppC+ZLWjnrk8TySaRygVzhtbizx4YcD+As3RnDhQ@mail.gmail.com>
 <F9EAEC3A-9BC9-49FF-88F7-CDF100FE9C23@twistedmatrix.com>
 <5D1A9275-779C-41F3-A6FB-D1418033404F@atleastfornow.net>
 <BD7229E1-0824-4B8E-A0CC-1356621EDA4A@twistedmatrix.com>
 <CAG=rPVc_ApgfqdGmcTzD4k4_ndSUfXD_nTtJcJYys=C0q4p3Fw@mail.gmail.com>
Message-ID: <8BB365BD-3207-4949-8911-96F5713B5654@twistedmatrix.com>


> On May 21, 2016, at 11:42 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> On Sat, May 21, 2016 at 11:37 PM, Glyph <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> 
> I realize it can feel like that sometimes, but Google Analytics suggests the large majority of our visitors (45%) are on Windows.  By contrast, 0.05% are on FreeBSD.  Granted, that's a very high percentage of FreeBSD clients for the Internet at large, but nevertheless, I think your perspective may be slightly statistically skewed.
> 
> Isn't Google Analytics just telling you what type of OS + web browser is being used to access the twistedmatrix.com <http://twistedmatrix.com/> web site?
> That isn't the same as telling you who actually uses Twisted in a project or a piece of code.

Sure, it's not perfect.  But even assuming only 1% of Windows desktop users are actually running any of their Twisted code on Windows, and 100% of FreeBSD users are, that's still roughly 9x as many Windows users as FreeBSD.  I think that's probably a pretty conservative estimate.

> Unfortunately, FreeBSD isn't well represented in the third party CI systems out there such as Travis.
> It would be nice if it was, but it isn't.  That's a judgment call that the Twisted project needs to make whether
> to support its own buildbots or not, in order to support configurations not supported by third party CI systems.

One of the other interesting questions here, beyond "do we want to support it or not" (I think we do want to continue supporting it, in the sense that we want to fix bugs that affect it) is how often FreeBSD breaks; if 99.99% of the time, a change that works on Windows, OS X, and Linux works on FreeBSD, maybe we can still have some FreeBSD CI, but not make it a gating part of the review process.  We can run it periodically, before each release, and in the exceedingly unlikely case that FreeBSD broke, we can roll back the change after the fact.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160521/1a7c03c2/attachment.html>

From glyph at twistedmatrix.com  Sun May 22 01:07:22 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 22 May 2016 00:07:22 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <E0D4942D-61F9-4372-9BB4-B316009A31BF@atleastfornow.net>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <CAG=rPVcT1cBmdB3OLN3U8E_khRMVAGotDccW0Ye7sz0ff6L3jQ@mail.gmail.com>
 <5BF75CD5-4FC2-47F5-AF27-CCF027353BAC@twistedmatrix.com>
 <29559719-0D07-4F84-8CA1-AB361F98FD38@atleastfornow.net>
 <C1A3CA84-8507-4749-8252-68CA7C6EEB72@twistedmatrix.com>
 <E0D4942D-61F9-4372-9BB4-B316009A31BF@atleastfornow.net>
Message-ID: <502E0A94-97A4-438F-B08D-6546DC57AAAD@twistedmatrix.com>


> On May 21, 2016, at 11:36 PM, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
> 
> 
>> On 22 May 2016, at 14:32, Glyph <glyph at twistedmatrix.com> wrote:
>> 
>> 
>>> On May 21, 2016, at 11:21 PM, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
>>> 
>>> 
>>>> On 22 May 2016, at 14:15, Glyph <glyph at twistedmatrix.com> wrote:
>>>> 
>>>> Sorry, I guess I wasn't clear.  I know that PRs are presently a potential alternative to a diff, and that we are still using Trac for ticketing.  I want to make it possible to avoid using Trac for ticketing; perhaps switching to github issues entirely.
>>> 
>>> This is an optimistic idea but one that, unfortunately, won't happen yet ;)
>>> 
>>> The things GitHub Issues need to be competitive with Trac as it stands:
>>> 
>>> - Allowing triage by people without write.
>> 
>> How are things currently "triaged"?  Do you mean "review"?  If so, I think it would be acceptable to come up with a magic comment for a non-commiter to use to signify that they've fully reviewed a PR.  As it stands, we need committers to "accept" a review by deciding to merge, the only difference here is that it would remain in the review queue until they did so, which I think is acceptable (since if the review isn't accepted, it should have remained in the queue anyway).  We could also have a bot address this edge-case somehow.
> 
> Creating a ticket, adding it to the relevant milestone (commit required on GitHub), setting the component (which would be a tag on github, requires commit)...

I don't see us getting a lot of non-committer triage of this kind.  And I'm not sure that's really an important part of our workflow - do you really feel that it is?  Frankly when non-committers try to put their changes into a milestone or start adding custom keywords, it's almost always wrong.

We also don't use "component" for much.  If we just got rid of it, would any part of our process change?

>>> - Useful search (GitHub search is kind of abysmal)
>> 
>> I don't see how Trac's is better.
> 
> It has a GUI rather than being stringly typed ;)

Oh, you're talking about "query", i.e. https://twistedmatrix.com/trac/query, not "search", i.e. https://twistedmatrix.com/trac/search ?

GitHub's search is actually structured, not stringly typed; there's a bit of GUI here: https://github.com/search/advanced.  It does resolve down to a string query, but so does the trac "custom query" eventually (in that it goes into a URL you can copy and paste).

But, this is all sort of abstract: what kinds of queries would you do against our ticket database in Trac that are not possible in GitHub's query language?  Personally after some exploration of GitHub's query language I have found it's actually more expressive for what I want to do most of the time; particularly querying across projects which is obviously not possible with trac...

>>> - Assigning to non-committers.
>> 
>> Honestly I'm not sure that the non-committer assignment part of the workflow is all that useful.  I know I hardly ever look at report 7, and I very much doubt any non-committer does :).  It's not like we're losing information, either; we still have a record of whose fork the PR points to.
> 
> I look at report 7 :(

That's not a counterexample: you are a committer :-).

I do actually have a recurring personal to-do item to check report 7 nowadays, but almost all of my doing-stuff-on-the-tracker has to do with me getting emails about actionable state changes (somebody reviewed your change, you should merge it), rather than scanning that list.

>>> Without these things (and quite a few more), it's unlikely that GitHub Issues will be as useful to us.
>> 
>> I am curious about the "quite a few more".  There are things which we really need as a critical part of our workflow (primarily: the review queue) and then there are accidents of the way trac works.  Nothing is graven in stone here :).
> 
> I guess there's a lot of things that are an accident of trac, but the things above are useful.

I'm not disputing that, but I'm still a little confused about how exactly they're useful, rather than just different.  Can you give some examples of things you do regularly?

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160522/0a6dbf9b/attachment.html>

From hs at ox.cx  Sun May 22 01:09:26 2016
From: hs at ox.cx (Hynek Schlawack)
Date: Sun, 22 May 2016 09:09:26 +0200
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <BD7229E1-0824-4B8E-A0CC-1356621EDA4A@twistedmatrix.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <8a7084d9-4ad1-5906-0081-ac1940f5bf60@thieprojects.ch>
 <B302B632-1207-4DEB-839A-8550278A00C1@twistedmatrix.com>
 <CAFycZ9e45jppC+ZLWjnrk8TySaRygVzhtbizx4YcD+As3RnDhQ@mail.gmail.com>
 <F9EAEC3A-9BC9-49FF-88F7-CDF100FE9C23@twistedmatrix.com>
 <5D1A9275-779C-41F3-A6FB-D1418033404F@atleastfornow.net>
 <BD7229E1-0824-4B8E-A0CC-1356621EDA4A@twistedmatrix.com>
Message-ID: <34FE5B3F-9608-4D5C-B5B4-10E225B5613F@ox.cx>


>>> A lot of projects do follow this workflow, and maybe it will be fine for us.  The real question is; is FreeBSD support really worth it for the cost to contributors, since that's the only platform we currently support but can't test?
>> 
>> I'm guessing that we have more FreeBSD users than Windows users ;)
> 
> 
> I realize it can feel like that sometimes, but Google Analytics suggests the large majority of our visitors (45%) are on Windows.  By contrast, 0.05% are on FreeBSD.  Granted, that's a very high percentage of FreeBSD clients for the Internet at large, but nevertheless, I think your perspective may be slightly statistically skewed.

I don?t think there?s a meaningful correlation between what people use to browse docs vs. what people run Twisted on.

E.g. Netflix & WhatsApp run on FreeBSD; do you think their tech staff has FreeBSD on their desktops? :)

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160522/16006ab4/attachment.html>

From hs at ox.cx  Sun May 22 01:15:07 2016
From: hs at ox.cx (Hynek Schlawack)
Date: Sun, 22 May 2016 09:15:07 +0200
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <B302B632-1207-4DEB-839A-8550278A00C1@twistedmatrix.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <8a7084d9-4ad1-5906-0081-ac1940f5bf60@thieprojects.ch>
 <B302B632-1207-4DEB-839A-8550278A00C1@twistedmatrix.com>
Message-ID: <D84A34C0-D092-48EF-A0BD-8B134F8A0CDB@ox.cx>

Ah finally a fine bike shedding thread that gets everyone involved. ;)

> Right now, we need to manually vet each change before sending it to buildbots, because they are shared mutable environments that we can't afford to have running untrusted code automatically.  If we could switch to Travis and Appveyor, then we could let them worry about malicious code, which would allow contributors to get instant feedback, rather than waiting for reviewers to manually run the builders.

I have two points to add:

1. Appveyor is terribly slow and sometimes a bit flaky.  I use it for argon2_cffi?s wheels and it drives me bonkers.  It should never become an essential part of anything.  As a first line of defense it?s fine of course.
2. PyCA has a workflow for Jenkins & GitHub by telling a bot to vet changes.  You can see it here in action: https://github.com/pyca/cryptography/pull/2914#issuecomment-220592167 AFAIK that?s been mostly Paul?s work.  Aren?t you kind of his boss or something *hint hint*? ;)

From glyph at twistedmatrix.com  Sun May 22 01:20:48 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 22 May 2016 00:20:48 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <34FE5B3F-9608-4D5C-B5B4-10E225B5613F@ox.cx>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <8a7084d9-4ad1-5906-0081-ac1940f5bf60@thieprojects.ch>
 <B302B632-1207-4DEB-839A-8550278A00C1@twistedmatrix.com>
 <CAFycZ9e45jppC+ZLWjnrk8TySaRygVzhtbizx4YcD+As3RnDhQ@mail.gmail.com>
 <F9EAEC3A-9BC9-49FF-88F7-CDF100FE9C23@twistedmatrix.com>
 <5D1A9275-779C-41F3-A6FB-D1418033404F@atleastfornow.net>
 <BD7229E1-0824-4B8E-A0CC-1356621EDA4A@twistedmatrix.com>
 <34FE5B3F-9608-4D5C-B5B4-10E225B5613F@ox.cx>
Message-ID: <E691121B-E356-4B86-B5C7-7180462183CE@twistedmatrix.com>


> On May 22, 2016, at 12:09 AM, Hynek Schlawack <hs at ox.cx> wrote:
> 
> 
>>>> A lot of projects do follow this workflow, and maybe it will be fine for us.  The real question is; is FreeBSD support really worth it for the cost to contributors, since that's the only platform we currently support but can't test?
>>> 
>>> I'm guessing that we have more FreeBSD users than Windows users ;)
>> 
>> 
>> I realize it can feel like that sometimes, but Google Analytics suggests the large majority of our visitors (45%) are on Windows.  By contrast, 0.05% are on FreeBSD.  Granted, that's a very high percentage of FreeBSD clients for the Internet at large, but nevertheless, I think your perspective may be slightly statistically skewed.
> 
> I don?t think there?s a meaningful correlation between what people use to browse docs vs. what people run Twisted on.
> 
> E.g. Netflix & WhatsApp run on FreeBSD; do you think their tech staff has FreeBSD on their desktops? :)

The existence of Netflix & WhatsApp doesn't indicate no correlation, just not a perfect correlation :).  Although I suppose I'm being unfair there in that some of the Windows users represent actual FreeBSD users as well.

Nevertheless, I think Windows consumers are less frequently acculturated to speaking up in open-source land, so if anything we are underestimating their prevalence.

Unrelatedly, the existence of such high-profile FreeBSD users is encouraging :).  Perhaps this is more important to keep in the critical path than I was assuming.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160522/0ad20782/attachment.html>

From glyph at twistedmatrix.com  Sun May 22 01:22:21 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 22 May 2016 00:22:21 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <D84A34C0-D092-48EF-A0BD-8B134F8A0CDB@ox.cx>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <8a7084d9-4ad1-5906-0081-ac1940f5bf60@thieprojects.ch>
 <B302B632-1207-4DEB-839A-8550278A00C1@twistedmatrix.com>
 <D84A34C0-D092-48EF-A0BD-8B134F8A0CDB@ox.cx>
Message-ID: <F92AC05C-1B55-423E-8F45-5E7527EABD6C@twistedmatrix.com>


> On May 22, 2016, at 12:15 AM, Hynek Schlawack <hs at ox.cx> wrote:
> 
> Ah finally a fine bike shedding thread that gets everyone involved. ;)
> 
>> Right now, we need to manually vet each change before sending it to buildbots, because they are shared mutable environments that we can't afford to have running untrusted code automatically.  If we could switch to Travis and Appveyor, then we could let them worry about malicious code, which would allow contributors to get instant feedback, rather than waiting for reviewers to manually run the builders.
> 
> I have two points to add:
> 
> 1. Appveyor is terribly slow and sometimes a bit flaky.  I use it for argon2_cffi?s wheels and it drives me bonkers.  It should never become an essential part of anything.  As a first line of defense it?s fine of course.

This is a very useful data point.  I do not have any concrete experience with it and I was kind of wondering about this.

> 2. PyCA has a workflow for Jenkins & GitHub by telling a bot to vet changes.  You can see it here in action: https://github.com/pyca/cryptography/pull/2914#issuecomment-220592167 AFAIK that?s been mostly Paul?s work.  Aren?t you kind of his boss or something *hint hint*? ;)

Thanks for the promotion; I'll be sure to let him know on Monday.

However, it's because I know Paul and I know what a complete nightmare it is to set up and maintain infrastructure like that that I was hoping to cheat and get away with it.  But what I'm hearing from you in this thread is pretty compelling to me that we are going to need to follow a mostly Cryptography-like workflow after all, asking a bot to run some buildbots.

-glyph

From glyph at twistedmatrix.com  Sun May 22 01:23:36 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 22 May 2016 00:23:36 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <D84A34C0-D092-48EF-A0BD-8B134F8A0CDB@ox.cx>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <8a7084d9-4ad1-5906-0081-ac1940f5bf60@thieprojects.ch>
 <B302B632-1207-4DEB-839A-8550278A00C1@twistedmatrix.com>
 <D84A34C0-D092-48EF-A0BD-8B134F8A0CDB@ox.cx>
Message-ID: <B4FD7372-C18A-4BEC-B351-6799C8B44FC1@twistedmatrix.com>


> On May 22, 2016, at 12:15 AM, Hynek Schlawack <hs at ox.cx> wrote:
> 
> Ah finally a fine bike shedding thread that gets everyone involved. ;)

OKAY NOW THAT I'VE GOT YOU ALL HERE LET'S TALK ABOUT https://twistedmatrix.com/trac/ticket/288

*slams a metal grating shut over the only exit from the mailing list*

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160522/91ef4788/attachment.html>

From rodrigc at crodrigues.org  Sun May 22 01:24:18 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Sun, 22 May 2016 00:24:18 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <B302B632-1207-4DEB-839A-8550278A00C1@twistedmatrix.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <8a7084d9-4ad1-5906-0081-ac1940f5bf60@thieprojects.ch>
 <B302B632-1207-4DEB-839A-8550278A00C1@twistedmatrix.com>
Message-ID: <CAG=rPVcLNdzLqR4T6Gsax8Yr_j5xdacrO_m_mjg3DsSDu6VSrw@mail.gmail.com>

On Sat, May 21, 2016 at 6:04 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
> Right now, we need to manually vet each change before sending it to
> buildbots, because they are shared mutable environments that we can't
> afford to have running untrusted code automatically.
>

This is quite useful actually.  We would need a tool to do this.

For example, if I want to build this pr:
https://github.com/twisted/twisted/pull/63

Then the tool could poke the buildbots to do something like:

git clone https://github.com/twisted/twisted testspace
cd testspace
git fetch origin pull/62/head:pr/62
git checkout pr/62
[run the tests]

Are there enough scripts in the buildbot infrastructure which could be
extended to do this?

 --
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160522/5804ae0c/attachment.html>

From hawkowl at atleastfornow.net  Sun May 22 01:25:24 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Sun, 22 May 2016 15:25:24 +0800
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <B4FD7372-C18A-4BEC-B351-6799C8B44FC1@twistedmatrix.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <8a7084d9-4ad1-5906-0081-ac1940f5bf60@thieprojects.ch>
 <B302B632-1207-4DEB-839A-8550278A00C1@twistedmatrix.com>
 <D84A34C0-D092-48EF-A0BD-8B134F8A0CDB@ox.cx>
 <B4FD7372-C18A-4BEC-B351-6799C8B44FC1@twistedmatrix.com>
Message-ID: <F97071AE-960C-4803-9F10-6C1694F91D9C@atleastfornow.net>


> On 22 May 2016, at 15:23, Glyph <glyph at twistedmatrix.com> wrote:
> 
> 
>> On May 22, 2016, at 12:15 AM, Hynek Schlawack <hs at ox.cx> wrote:
>> 
>> Ah finally a fine bike shedding thread that gets everyone involved. ;)
> 
> OKAY NOW THAT I'VE GOT YOU ALL HERE LET'S TALK ABOUT https://twistedmatrix.com/trac/ticket/288
> 
> *slams a metal grating shut over the only exit from the mailing list*
> 
JEAN-CHA^W^W GLYPH YOU FOOL, YOU'VE LOCKED US ALL IN!

> -glyph
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160522/b20a4507/attachment.pgp>

From glyph at twistedmatrix.com  Sun May 22 01:36:28 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 22 May 2016 00:36:28 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <CAG=rPVcLNdzLqR4T6Gsax8Yr_j5xdacrO_m_mjg3DsSDu6VSrw@mail.gmail.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <8a7084d9-4ad1-5906-0081-ac1940f5bf60@thieprojects.ch>
 <B302B632-1207-4DEB-839A-8550278A00C1@twistedmatrix.com>
 <CAG=rPVcLNdzLqR4T6Gsax8Yr_j5xdacrO_m_mjg3DsSDu6VSrw@mail.gmail.com>
Message-ID: <43CBD316-83BE-466C-AC5D-CA382DD8FC9D@twistedmatrix.com>


> On May 22, 2016, at 12:24 AM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> On Sat, May 21, 2016 at 6:04 PM, Glyph <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> 
> Right now, we need to manually vet each change before sending it to buildbots, because they are shared mutable environments that we can't afford to have running untrusted code automatically.
> 
> This is quite useful actually.  We would need a tool to do this.
> 
> For example, if I want to build this pr:   https://github.com/twisted/twisted/pull/63 <https://github.com/twisted/twisted/pull/63>
> 
> Then the tool could poke the buildbots to do something like:
> 
> git clone https://github.com/twisted/twisted <https://github.com/twisted/twisted> testspace
> cd testspace
> git fetch origin pull/62/head:pr/62
> git checkout pr/62
> [run the tests]
> 
> Are there enough scripts in the buildbot infrastructure which could be extended to do this?

The only new line would be fetching the test ref.  Everything else on the buildbots basically works that way already, just checking out branches.

(Please nobody try to do the clever thing where you configure buildbot to automatically pull all PRs, that would effectively negate any security protections...)

I've been assuming that in the worst-case scenario, we'd do what Cryptography does and have a bot that polls for special comments and then triggers buildbot in exactly this way.  Perhaps I should have made that assumption explicit, I thought it was ticketed somewhere in Braid already.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160522/80a87bed/attachment-0001.html>

From ralphm at ik.nu  Sun May 22 02:12:12 2016
From: ralphm at ik.nu (Ralph Meijer)
Date: Sun, 22 May 2016 10:12:12 +0200
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <43CBD316-83BE-466C-AC5D-CA382DD8FC9D@twistedmatrix.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <8a7084d9-4ad1-5906-0081-ac1940f5bf60@thieprojects.ch>
 <B302B632-1207-4DEB-839A-8550278A00C1@twistedmatrix.com>
 <CAG=rPVcLNdzLqR4T6Gsax8Yr_j5xdacrO_m_mjg3DsSDu6VSrw@mail.gmail.com>
 <43CBD316-83BE-466C-AC5D-CA382DD8FC9D@twistedmatrix.com>
Message-ID: <85574479-93A8-4BB2-92EB-ACB969BB57D0@ik.nu>

On May 22, 2016 9:36:28 AM GMT+02:00, Glyph <glyph at twistedmatrix.com> wrote:
>[..]
>(Please nobody try to do the clever thing where you configure buildbot
>to automatically pull all PRs, that would effectively negate any
>security protections...)
>
>I've been assuming that in the worst-case scenario, we'd do what
>Cryptography does and have a bot that polls for special comments and
>then triggers buildbot in exactly this way.  Perhaps I should have made
>that assumption explicit, I thought it was ticketed somewhere in Braid
>already.

The Jenkins plugin for GitHub PR triggers has this feature, too. However, it also has a feature to whitelist users and GitHub teams so that PRs/commits can trigger automatically for them. Maybe that's a thing for us, too?


-- 
ralphm


From mithrandi at mithrandi.net  Sun May 22 04:18:37 2016
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Sun, 22 May 2016 10:18:37 +0000
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <85574479-93A8-4BB2-92EB-ACB969BB57D0@ik.nu>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <8a7084d9-4ad1-5906-0081-ac1940f5bf60@thieprojects.ch>
 <B302B632-1207-4DEB-839A-8550278A00C1@twistedmatrix.com>
 <CAG=rPVcLNdzLqR4T6Gsax8Yr_j5xdacrO_m_mjg3DsSDu6VSrw@mail.gmail.com>
 <43CBD316-83BE-466C-AC5D-CA382DD8FC9D@twistedmatrix.com>
 <85574479-93A8-4BB2-92EB-ACB969BB57D0@ik.nu>
Message-ID: <CAMcKhMRJ+9ZCVgKL-8551_bnde_3N1VB420H46ujBP=xtwC05Q@mail.gmail.com>

On Sun, 22 May 2016 at 10:12 Ralph Meijer <ralphm at ik.nu> wrote:

> On May 22, 2016 9:36:28 AM GMT+02:00, Glyph <glyph at twistedmatrix.com>
> wrote:
> >[..]
> >(Please nobody try to do the clever thing where you configure buildbot
> >to automatically pull all PRs, that would effectively negate any
> >security protections...)
> >
> >I've been assuming that in the worst-case scenario, we'd do what
> >Cryptography does and have a bot that polls for special comments and
> >then triggers buildbot in exactly this way.  Perhaps I should have made
> >that assumption explicit, I thought it was ticketed somewhere in Braid
> >already.
>
> The Jenkins plugin for GitHub PR triggers has this feature, too. However,
> it also has a feature to whitelist users and GitHub teams so that
> PRs/commits can trigger automatically for them. Maybe that's a thing for
> us, too?
>

I don't think we need a whitelist, we can just automatically build branches
that are pushed to the twisted/twisted repository. If you can push a branch
there, you can also push a change directly to trunk, so you can already
execute arbitrary code on the buildbots.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160522/52462577/attachment.html>

From clayton.daley at gmail.com  Sun May 22 07:18:21 2016
From: clayton.daley at gmail.com (Clayton Daley)
Date: Sun, 22 May 2016 08:18:21 -0500
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <975701FF-3E24-4072-8795-642339FADE1B@twistedmatrix.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <CACqnu4U8XonGd1W0US8W3n=F_66er_y68fJ96OunqetvcJO8jg@mail.gmail.com>
 <149A8FA9-2519-4D16-8C33-D4867B0AC0A7@twistedmatrix.com>
 <CACKEAnXnrh696csCs5SCMSRkNyQxyKC4VWpnVoDwT+TEEa1dHQ@mail.gmail.com>
 <975701FF-3E24-4072-8795-642339FADE1B@twistedmatrix.com>
Message-ID: <CACKEAnX_0uBe8z1WomDFK-ReiTqYLbQ95f-RmW625TN643Hfjw@mail.gmail.com>

>
> The thing is, if you perceive it as "hostile" that a project closes a PR -
> i.e. "says that they're not going to do more work on it" - that is a
> cultural problem; it suggests a certain implicit level of passive
> aggression in opening a PR which I don't want to assume.  It's sort of like
> having a culture where you can just send anybody an email asking them to do
> whatever and it would be "hostile" for them to refuse.  In such a culture
> people don't say "yes", but they do start to ignore messages  Closing the
> PR is a more accurate reflection of *reality* - the project (twisted) is
> not going to do anything about the PR in its current state, so it shouldn't
> be left open.  It also clearly demarcates the completion of a review.
>
...

I'd much rather our new contributors get a little confused about the
> culturally unusual step of closing a PR than to have their work be
> accidentally but systematically discriminated against in favor of people
> who know how to bug the right people in IRC or email.
>

It's your party, but I think this vastly undervalues first impressions in
OSS engagement.  From all the projects I've contributed to on Github -- yes
technically Github not Git though Bitbucket has equivalent features (and
unlimited private repos for free!) -- closing means "this is off the
table".  It's a nice clear signal that there's nothing the contributor can
do to fix it -- e.g. I had an LSP-valid change that passed all tests run
afoul of some obscure PHP method signature limitation when mixed with other
packages.

I'll wager only the active contributors will remember the proposed subtlety
a month from now.  As a big break from Github norms, It's going to hit
everyone else at the worst time... a first PR submission.  That's the
moment when a contributor is trying to get a sense of the culture of the
team that manages the project.  They're at their most vulnerable and
violating *their* norms significantly increases the odds that they'll leave
the fix in a private fork and disengage.

Twisted operates at a different level so this may not be a bad thing.  You
may benefit from actively discouraging dabblers -- especially given
resource constraints.  But there aren't going to be a lot of "first PR"
folks on this list to point out the effect of this break from norms.

Clayton Daley

On Sun, May 22, 2016 at 12:12 AM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On May 21, 2016, at 7:25 PM, Clayton Daley <clayton.daley at gmail.com>
> wrote:
>
> To qualify my comments, I've yet to contribute to Twisted because I don't
> have a good enough grasp of its internals, but I have contributed to a
> variety of Git-based OSS projects.  I definitely get uneasy with the
> general idea that we're trying to "replicate workflow A from Trac in
> tangentially related Git PR feature".
>
>
> The workflow is not "from Trac".  The instantiation in Trac is not optimal
> either, which is why I described the abstract desired workflow separately
> from our existing instantiation.
>
> We're in Git. We're hoping to solicit PRs from Git users. Git users will
> be used to the way PRs are used in other OSS Git projects.
>
>
> I think you mean "GitHub".  Git PRs don't work at *all* like GitHub PRs.
> :).
>
> Glyph has some valid criticisms of the situation in some projects, but it
> should still be the starting point. For example, closing a PR strikes me as
> a bad idea -- for lack of a better word, it feels "hostile" to me and
> certainly unwelcoming.
>
>
> The thing is, if you perceive it as "hostile" that a project closes a PR -
> i.e. "says that they're not going to do more work on it" - that is a
> cultural problem; it suggests a certain implicit level of passive
> aggression in opening a PR which I don't want to assume.  It's sort of like
> having a culture where you can just send anybody an email asking them to do
> whatever and it would be "hostile" for them to refuse.  In such a culture
> people don't say "yes", but they do start to ignore messages  Closing the
> PR is a more accurate reflection of *reality* - the project (twisted) is
> not going to do anything about the PR in its current state, so it shouldn't
> be left open.  It also clearly demarcates the completion of a review.
>
> People feel very differently about workflow, of course, but I've
> definitely heard from other OSS maintainers that the average workflow of
> volunteer projects often devolves into a huge backlog of un-reviewed stuff,
> which obscures the new stuff, and if you want something to actually get
> reviewed and move along you need to know the maintainers of the project and
> ask them personally.
>
> I'd much rather our new contributors get a little confused about the
> culturally unusual step of closing a PR than to have their work be
> accidentally but systematically discriminated against in favor of people
> who know how to bug the right people in IRC or email.
>
> In several of the projects I've seen, Git tags fill these roles. Piwik has
> a "needs review" tag -- the short list for reviewers. Looks like it's a
> manual add, but maybe it could be automated. Once reviewed, Piwik has tags
> like "Tests & QA". ZendFramework has a generic "awaiting author update".
>
>
> This was my original idea. The problem with GitHub labels ("Git tags" are
> something completely different) is that they can't be applied by external
> contributors.  You need write access to the repository to be able to
> manipulate them.  It's very important to our workflow that external
> contributors be able to re-submit their PRs.  We could have a bot for that
> (again, this was the original plan).  But it seems like using the open /
> closed state to reflect the we will do some work on this / we won't do any
> more work on this is actually closer to the "native" state of github.
>
> To address Glyph's concerns about lingering PRs, perhaps the combination
> of:
>
>    - A policy like "a reviewer must accept, close, or tag with one of the
>    next step tags"
>
> This doesn't address the shortcomings of labels, to wit, external
> contributors need the ability to manipulate them somehow, and if a PR isn't
> "in review" by default, then they have to whisper some magic comment to
> make anyone take a look at it.  If we use open/closed, then the default
> action of "open a PR" will cause someone to look at it, even if our bot is
> nonexistent or temporarily offline.
>
>
>    - A short list of common next steps like "code quality", "needs
>    tests", "second opinion", "not review ready"... plus a generic "other
>    author action"
>
> The next steps are always the same: "respond to the review".  The review
> may include any of these, any combination of these, or also possibly
> questions that the author must answer.  Formally separating these would be
> a weird tweak on our current workflow that I don't see helping.
>
>
>    - Auto-close tickets except those with "needs review" or "second
>    opinion" (say) 30 days after the last action.
>
> I think you mean "PRs", not "tickets"?  Issues (which are closer to trac
> "tickets") can remain open indefinitely.  I am not really in favor of any
> kind of auto-closing or expiration given that the project has wildly
> variable levels of resources depending on people's spare time; sometimes we
> have a whole bunch of reviewers active and can get to things within 24
> hours, sometimes we're severely overtaxed and can't look at anything for 6
> weeks.
>
> Drive-by comments on a PR are sometimes helpful, but should be used
>> sparingly.  Mostly, discussion should happen on *issues*, not PRs.  A PR
>> is a suggested resolution to a problem, and we might reject one solution,
>> but an issue should describe the problem itself.
>
>
> While an Issue is a good place for discussion about a problem, it lacks
> the reference code often included in a PR.  You can't ask "how about this
> approach" without showing the approach.  As an added bonus, most systems
> run travis on PRs so you get a sense of "this approach is thorough" or
> "this idea still breaks something".
>
>
> This is exactly why issues and PRs should be separated.  If you only have
> one artifact - the PR - to represent both the issue and the potential
> solution, then you can't get rid of the potential solution (reject the PR)
> without also getting rid of the description of the problem.  Github already
> automatically shows anywhere that your PR or issue is mentioned, so all you
> need to do to say "how about this approach" is to put the words "fixes
> #NNN" in your PR description.  As a bonus, that will make it automatically
> close the issue when the PR is merged.
>
> -glyph
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160522/500d4777/attachment-0001.html>

From glyph at twistedmatrix.com  Sun May 22 15:22:44 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 22 May 2016 14:22:44 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <CACKEAnX_0uBe8z1WomDFK-ReiTqYLbQ95f-RmW625TN643Hfjw@mail.gmail.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <CACqnu4U8XonGd1W0US8W3n=F_66er_y68fJ96OunqetvcJO8jg@mail.gmail.com>
 <149A8FA9-2519-4D16-8C33-D4867B0AC0A7@twistedmatrix.com>
 <CACKEAnXnrh696csCs5SCMSRkNyQxyKC4VWpnVoDwT+TEEa1dHQ@mail.gmail.com>
 <975701FF-3E24-4072-8795-642339FADE1B@twistedmatrix.com>
 <CACKEAnX_0uBe8z1WomDFK-ReiTqYLbQ95f-RmW625TN643Hfjw@mail.gmail.com>
Message-ID: <9532D337-A8BD-4CF5-81D4-003AE82FA2BA@twistedmatrix.com>


> On May 22, 2016, at 6:18 AM, Clayton Daley <clayton.daley at gmail.com> wrote:
> 
> The thing is, if you perceive it as "hostile" that a project closes a PR - i.e. "says that they're not going to do more work on it" - that is a cultural problem; it suggests a certain implicit level of passive aggression in opening a PR which I don't want to assume.  It's sort of like having a culture where you can just send anybody an email asking them to do whatever and it would be "hostile" for them to refuse.  In such a culture people don't say "yes", but they do start to ignore messages  Closing the PR is a more accurate reflection of reality - the project (twisted) is not going to do anything about the PR in its current state, so it shouldn't be left open.  It also clearly demarcates the completion of a review.
> ... 
> I'd much rather our new contributors get a little confused about the culturally unusual step of closing a PR than to have their work be accidentally but systematically discriminated against in favor of people who know how to bug the right people in IRC or email.
> 
> It's your party, but I think this vastly undervalues first impressions in OSS engagement.  From all the projects I've contributed to on Github -- yes technically Github not Git though Bitbucket has equivalent features (and unlimited private repos for free!) -- closing means "this is off the table".  It's a nice clear signal that there's nothing the contributor can do to fix it -- e.g. I had an LSP-valid change that passed all tests run afoul of some obscure PHP method signature limitation when mixed with other packages.
>  
> I'll wager only the active contributors will remember the proposed subtlety a month from now.  As a big break from Github norms, It's going to hit everyone else at the worst time... a first PR submission.  That's the moment when a contributor is trying to get a sense of the culture of the team that manages the project.  They're at their most vulnerable and violating *their* norms significantly increases the odds that they'll leave the fix in a private fork and disengage.
> 
> Twisted operates at a different level so this may not be a bad thing.  You may benefit from actively discouraging dabblers -- especially given resource constraints.  But there aren't going to be a lot of "first PR" folks on this list to point out the effect of this break from norms.

This is roughly the same story I've been getting for the last decade and a half:

"You can't:

require test coverage,
require documentation,
require coding standard compliance,
require people to file a ticket before sending a patch to the mailing list,

that's a terrible burden to put on new contributors!"

Somehow we've survived much longer than most projects, and while some would say "in spite of" these restrictions, I think it's "because of".  So, we are not trying to "discourage dabblers"; we would like new contributors who want to contribute only a little bit.  So while I don't want to throw up arbitrary barriers, if you aren't willing to invest the effort to even read a single comment on your PR explaining why it was closed and how to reopen it, I cannot imagine that chances are good that you'll read the rest of the comments explaining what changes need to be made and make them effectively.

Further, people who contribute trivial changes that can be immediately merged, like documentation typos, won't need to deal with this, because they won't see the intermediary "needs feedback" closed state; they'll just get their PRs accepted immediately.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160522/ffaf8b82/attachment.html>

From clayton.daley at gmail.com  Sun May 22 19:12:58 2016
From: clayton.daley at gmail.com (Clayton Daley)
Date: Sun, 22 May 2016 20:12:58 -0500
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <9532D337-A8BD-4CF5-81D4-003AE82FA2BA@twistedmatrix.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <CACqnu4U8XonGd1W0US8W3n=F_66er_y68fJ96OunqetvcJO8jg@mail.gmail.com>
 <149A8FA9-2519-4D16-8C33-D4867B0AC0A7@twistedmatrix.com>
 <CACKEAnXnrh696csCs5SCMSRkNyQxyKC4VWpnVoDwT+TEEa1dHQ@mail.gmail.com>
 <975701FF-3E24-4072-8795-642339FADE1B@twistedmatrix.com>
 <CACKEAnX_0uBe8z1WomDFK-ReiTqYLbQ95f-RmW625TN643Hfjw@mail.gmail.com>
 <9532D337-A8BD-4CF5-81D4-003AE82FA2BA@twistedmatrix.com>
Message-ID: <CACKEAnXMMYzwQoJ7s7Sx0+WEP94hboF5Ppuc-pUORdQPDkmDNw@mail.gmail.com>

>
> "You can't:
>
>    - require test coverage,
>    - require documentation,
>    - require coding standard compliance,
>    - require people to file a ticket before sending a patch to the
>    mailing list,
>
> The first three of these are *already* norms in all of the OSS projects of
this caliber and the 4th doesn't make sense in a Github/Bitbucket/Gitlab
world (and I fortunately avoided its predecessors).  In fact, I'd be a
little worried if the first there weren't required in a project.
ResourceSpace is the only one I can think of that doesn't require them and
I wouldn't touch it with a 10 foot pole if there were acceptable (free)
alternatives.  So I don't see the link between your success enforcing three
norms of good OSS projects and your desire to break a 4th.

===

The idea that PRs are a substantial burden has caused me pause.  Normally,
a PR is a chance to give back to a project rather than freeload.  In most
projects, new features are part of a virtuous cycle:  a new feature tends
to benefit a large fraction of the user base and expand the user base...
which draws more contributors.

Especially given the recent deprecations (old, unmaintained protocols), it
seems that Twisted doesn't work like this.  If another user adds another
protocol, it doesn't make the system better for most users.  In fact, it
makes sense that it actually increases the maintenance burden.

I tried to look for myself, but was reminded that I don't know the
internals well enough... are patches on non-central protocols a big part of
the backlog?  Or is the backlog mostly core features (like reactors or IO
infrastructure) that most projects depend upon?

Clayton Daley

On Sun, May 22, 2016 at 4:22 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On May 22, 2016, at 6:18 AM, Clayton Daley <clayton.daley at gmail.com>
> wrote:
>
> The thing is, if you perceive it as "hostile" that a project closes a PR -
>> i.e. "says that they're not going to do more work on it" - that is a
>> cultural problem; it suggests a certain implicit level of passive
>> aggression in opening a PR which I don't want to assume.  It's sort of like
>> having a culture where you can just send anybody an email asking them to do
>> whatever and it would be "hostile" for them to refuse.  In such a culture
>> people don't say "yes", but they do start to ignore messages  Closing the
>> PR is a more accurate reflection of *reality* - the project (twisted) is
>> not going to do anything about the PR in its current state, so it shouldn't
>> be left open.  It also clearly demarcates the completion of a review.
>>
> ...
>
> I'd much rather our new contributors get a little confused about the
>> culturally unusual step of closing a PR than to have their work be
>> accidentally but systematically discriminated against in favor of people
>> who know how to bug the right people in IRC or email.
>>
>
> It's your party, but I think this vastly undervalues first impressions in
> OSS engagement.  From all the projects I've contributed to on Github -- yes
> technically Github not Git though Bitbucket has equivalent features (and
> unlimited private repos for free!) -- closing means "this is off the
> table".  It's a nice clear signal that there's nothing the contributor can
> do to fix it -- e.g. I had an LSP-valid change that passed all tests run
> afoul of some obscure PHP method signature limitation when mixed with other
> packages.
>
> I'll wager only the active contributors will remember the proposed
> subtlety a month from now.  As a big break from Github norms, It's going to
> hit everyone else at the worst time... a first PR submission.  That's the
> moment when a contributor is trying to get a sense of the culture of the
> team that manages the project.  They're at their most vulnerable and
> violating *their* norms significantly increases the odds that they'll leave
> the fix in a private fork and disengage.
>
> Twisted operates at a different level so this may not be a bad thing.  You
> may benefit from actively discouraging dabblers -- especially given
> resource constraints.  But there aren't going to be a lot of "first PR"
> folks on this list to point out the effect of this break from norms.
>
>
> This is roughly the same story I've been getting for the last decade and a
> half:
>
> "You can't:
>
>
>    - require test coverage,
>    - require documentation,
>    - require coding standard compliance,
>    - require people to file a ticket before sending a patch to the
>    mailing list,
>
>
> that's a terrible burden to put on new contributors!"
>
> Somehow we've survived much longer than most projects, and while some
> would say "in spite of" these restrictions, I think it's "because of".  So,
> we are not trying to "discourage dabblers"; we would like new contributors
> who want to contribute only a little bit.  So while I don't want to throw
> up arbitrary barriers, if you aren't willing to invest the effort to even
> read a single comment on your PR explaining why it was closed and how to
> reopen it, I cannot imagine that chances are good that you'll read the rest
> of the comments explaining what changes need to be made and make them
> effectively.
>
> Further, people who contribute trivial changes that can be immediately
> merged, like documentation typos, won't need to deal with this, because
> they won't *see* the intermediary "needs feedback" closed state; they'll
> just get their PRs accepted immediately.
>
> -glyph
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160522/69291b0e/attachment.html>

From donald at stufft.io  Sun May 22 19:28:15 2016
From: donald at stufft.io (Donald Stufft)
Date: Sun, 22 May 2016 21:28:15 -0400
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <CACKEAnXMMYzwQoJ7s7Sx0+WEP94hboF5Ppuc-pUORdQPDkmDNw@mail.gmail.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <CACqnu4U8XonGd1W0US8W3n=F_66er_y68fJ96OunqetvcJO8jg@mail.gmail.com>
 <149A8FA9-2519-4D16-8C33-D4867B0AC0A7@twistedmatrix.com>
 <CACKEAnXnrh696csCs5SCMSRkNyQxyKC4VWpnVoDwT+TEEa1dHQ@mail.gmail.com>
 <975701FF-3E24-4072-8795-642339FADE1B@twistedmatrix.com>
 <CACKEAnX_0uBe8z1WomDFK-ReiTqYLbQ95f-RmW625TN643Hfjw@mail.gmail.com>
 <9532D337-A8BD-4CF5-81D4-003AE82FA2BA@twistedmatrix.com>
 <CACKEAnXMMYzwQoJ7s7Sx0+WEP94hboF5Ppuc-pUORdQPDkmDNw@mail.gmail.com>
Message-ID: <37808425-5A44-4EE2-A399-9DE68DBFDF92@stufft.io>

Twisted has been enforcing these rules since before they were considered part of the norm and I believe that Glyph was referencing is that back then people said that Twisted was going to fail or w/e because of requiring those things. 

Sent from my iPhone

> On May 22, 2016, at 9:12 PM, Clayton Daley <clayton.daley at gmail.com> wrote:
> 
> The first three of these are *already* norms in all of the OSS projects of this caliber



From meejah at meejah.ca  Sun May 22 21:19:45 2016
From: meejah at meejah.ca (meejah)
Date: Mon, 23 May 2016 07:19:45 +0400
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <F92AC05C-1B55-423E-8F45-5E7527EABD6C@twistedmatrix.com>
 (glyph@twistedmatrix.com's message of "Sun, 22 May 2016 00:22:21
 -0700")
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <8a7084d9-4ad1-5906-0081-ac1940f5bf60@thieprojects.ch>
 <B302B632-1207-4DEB-839A-8550278A00C1@twistedmatrix.com>
 <D84A34C0-D092-48EF-A0BD-8B134F8A0CDB@ox.cx>
 <F92AC05C-1B55-423E-8F45-5E7527EABD6C@twistedmatrix.com>
Message-ID: <867felwje6.fsf@atlantis.meejah.ca>

Glyph <glyph at twistedmatrix.com> writes:

> This is a very useful data point.  I do not have any concrete
> experience with it and I was kind of wondering about this.

FWIW, Tahoe-LAFS *just* started using AppVeyor too, and I also find it
horrifically slow. That said, the Tahoe tests run pretty slowly on a
VirtualBox windows VM as well, but not nearly as slowly as AppVeyor. Or,
at least that's my impression so far.

p.s. If anyone is interested in running a Windows buildbot slave for
Tahoe I'm very sure it would be appreciated -- please speak up on the
tahoe mailing list :) (my understanding of the setup is that the
buildbot slaves don't run random PR code, only post-merged-to-master
code).

-- 
meejah


From meejah at meejah.ca  Sun May 22 22:39:04 2016
From: meejah at meejah.ca (meejah)
Date: Mon, 23 May 2016 08:39:04 +0400
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <CACKEAnX_0uBe8z1WomDFK-ReiTqYLbQ95f-RmW625TN643Hfjw@mail.gmail.com>
 (Clayton Daley's message of "Sun, 22 May 2016 08:18:21 -0500")
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <CACqnu4U8XonGd1W0US8W3n=F_66er_y68fJ96OunqetvcJO8jg@mail.gmail.com>
 <149A8FA9-2519-4D16-8C33-D4867B0AC0A7@twistedmatrix.com>
 <CACKEAnXnrh696csCs5SCMSRkNyQxyKC4VWpnVoDwT+TEEa1dHQ@mail.gmail.com>
 <975701FF-3E24-4072-8795-642339FADE1B@twistedmatrix.com>
 <CACKEAnX_0uBe8z1WomDFK-ReiTqYLbQ95f-RmW625TN643Hfjw@mail.gmail.com>
Message-ID: <86oa7xv15j.fsf@atlantis.meejah.ca>


Personally, I find closing PRs that aren't going to be merged "soon"
mostly-beneficial. Even if it *might* be perceived as "hostile" by some
contributers, a simple explanation should suffice. (And, if simply
closing a PR with a nice note explaining, "please re-open when X is
fixed/changed" scares away a potential contributer I have my doubts as
to whether they would fix X if you *didn't* close it...)

There's nothing worse than trolling through open PRs only to find that
the last comment is "fix up X, Y, and Z and we'll merge" because then
you have to (re-)figure out if X, Y and Z have been done etc. On the
flip side, it's nice to know if your PR has problems or not.

The other plus of closing is that it's way more obvious when the PR is
once again considered ready for merging (even without 'completely baked'
workflows like Twisted's) and keeps the "open PRs" list (hopefully!)
shorter.

-- 
meejah


From rodrigc at crodrigues.org  Sun May 22 22:56:28 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Sun, 22 May 2016 21:56:28 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <86oa7xv15j.fsf@atlantis.meejah.ca>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <CACqnu4U8XonGd1W0US8W3n=F_66er_y68fJ96OunqetvcJO8jg@mail.gmail.com>
 <149A8FA9-2519-4D16-8C33-D4867B0AC0A7@twistedmatrix.com>
 <CACKEAnXnrh696csCs5SCMSRkNyQxyKC4VWpnVoDwT+TEEa1dHQ@mail.gmail.com>
 <975701FF-3E24-4072-8795-642339FADE1B@twistedmatrix.com>
 <CACKEAnX_0uBe8z1WomDFK-ReiTqYLbQ95f-RmW625TN643Hfjw@mail.gmail.com>
 <86oa7xv15j.fsf@atlantis.meejah.ca>
Message-ID: <CAG=rPVe8W+Pju7=sb4VBiN=y4EEoKMEWz6JKxrUeJVL8f0vhxg@mail.gmail.com>

I submitted this PR, which is now closed:
https://github.com/twisted/twisted/pull/62

I don't want to re-open that PR, but I am using that as an example
As an example, if I wanted to re-open that, how would I go about doing it?

I am not an administrator of the Twisted GitHub project, so on that web
link,
there is no option for me to re-open the PR.

Are you suggesting that I would need to
   -> create a new branch in my repo with new commits
   -> create a new pull request

?

--
Craig

On Sun, May 22, 2016 at 9:39 PM, meejah <meejah at meejah.ca> wrote:

>
> closing a PR with a nice note explaining, "please re-open when X is
> fixed/changed" scares away a potential contributer I have my doubts as
> to whether they would fix X if you *didn't* close it...)
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160522/5dbebb76/attachment.html>

From hawkowl at atleastfornow.net  Sun May 22 22:58:56 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Mon, 23 May 2016 12:58:56 +0800
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <CAG=rPVe8W+Pju7=sb4VBiN=y4EEoKMEWz6JKxrUeJVL8f0vhxg@mail.gmail.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <CACqnu4U8XonGd1W0US8W3n=F_66er_y68fJ96OunqetvcJO8jg@mail.gmail.com>
 <149A8FA9-2519-4D16-8C33-D4867B0AC0A7@twistedmatrix.com>
 <CACKEAnXnrh696csCs5SCMSRkNyQxyKC4VWpnVoDwT+TEEa1dHQ@mail.gmail.com>
 <975701FF-3E24-4072-8795-642339FADE1B@twistedmatrix.com>
 <CACKEAnX_0uBe8z1WomDFK-ReiTqYLbQ95f-RmW625TN643Hfjw@mail.gmail.com>
 <86oa7xv15j.fsf@atlantis.meejah.ca>
 <CAG=rPVe8W+Pju7=sb4VBiN=y4EEoKMEWz6JKxrUeJVL8f0vhxg@mail.gmail.com>
Message-ID: <583D0470-A5B3-426F-98D5-6ED6DEB461D3@atleastfornow.net>

Mark has been working on a bot which would reopen it with a comment: https://github.com/markrwilliams/txghbot

- Amber

> On 23 May 2016, at 12:56, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> I submitted this PR, which is now closed: https://github.com/twisted/twisted/pull/62
> 
> I don't want to re-open that PR, but I am using that as an example
> As an example, if I wanted to re-open that, how would I go about doing it?
> 
> I am not an administrator of the Twisted GitHub project, so on that web link,
> there is no option for me to re-open the PR.
> 
> Are you suggesting that I would need to
>    -> create a new branch in my repo with new commits
>    -> create a new pull request
> 
> ?
> 
> --
> Craig
> 
> On Sun, May 22, 2016 at 9:39 PM, meejah <meejah at meejah.ca> wrote:
> 
> closing a PR with a nice note explaining, "please re-open when X is
> fixed/changed" scares away a potential contributer I have my doubts as
> to whether they would fix X if you *didn't* close it...)
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160523/438b789a/attachment.pgp>

From mithrandi at mithrandi.net  Sun May 22 23:51:52 2016
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Mon, 23 May 2016 05:51:52 +0000
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <583D0470-A5B3-426F-98D5-6ED6DEB461D3@atleastfornow.net>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <CACqnu4U8XonGd1W0US8W3n=F_66er_y68fJ96OunqetvcJO8jg@mail.gmail.com>
 <149A8FA9-2519-4D16-8C33-D4867B0AC0A7@twistedmatrix.com>
 <CACKEAnXnrh696csCs5SCMSRkNyQxyKC4VWpnVoDwT+TEEa1dHQ@mail.gmail.com>
 <975701FF-3E24-4072-8795-642339FADE1B@twistedmatrix.com>
 <CACKEAnX_0uBe8z1WomDFK-ReiTqYLbQ95f-RmW625TN643Hfjw@mail.gmail.com>
 <86oa7xv15j.fsf@atlantis.meejah.ca>
 <CAG=rPVe8W+Pju7=sb4VBiN=y4EEoKMEWz6JKxrUeJVL8f0vhxg@mail.gmail.com>
 <583D0470-A5B3-426F-98D5-6ED6DEB461D3@atleastfornow.net>
Message-ID: <CAMcKhMQqNnbowaLd9dBnOeA2qS+v76ezUHEpAOj-FagMp2peSg@mail.gmail.com>

Note that even without the bot, I believe you can just create a new PR for
the same branch, so it's not *too* bad, but definitely a little clunky.

On Mon, 23 May 2016 at 06:59 Amber "Hawkie" Brown <hawkowl at atleastfornow.net>
wrote:

> Mark has been working on a bot which would reopen it with a comment:
> https://github.com/markrwilliams/txghbot
>
> - Amber
>
> > On 23 May 2016, at 12:56, Craig Rodrigues <rodrigc at crodrigues.org>
> wrote:
> >
> > I submitted this PR, which is now closed:
> https://github.com/twisted/twisted/pull/62
> >
> > I don't want to re-open that PR, but I am using that as an example
> > As an example, if I wanted to re-open that, how would I go about doing
> it?
> >
> > I am not an administrator of the Twisted GitHub project, so on that web
> link,
> > there is no option for me to re-open the PR.
> >
> > Are you suggesting that I would need to
> >    -> create a new branch in my repo with new commits
> >    -> create a new pull request
> >
> > ?
> >
> > --
> > Craig
> >
> > On Sun, May 22, 2016 at 9:39 PM, meejah <meejah at meejah.ca> wrote:
> >
> > closing a PR with a nice note explaining, "please re-open when X is
> > fixed/changed" scares away a potential contributer I have my doubts as
> > to whether they would fix X if you *didn't* close it...)
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160523/9f79eeff/attachment.html>

From glyph at twistedmatrix.com  Mon May 23 11:54:58 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 23 May 2016 10:54:58 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <CACKEAnXMMYzwQoJ7s7Sx0+WEP94hboF5Ppuc-pUORdQPDkmDNw@mail.gmail.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <CACqnu4U8XonGd1W0US8W3n=F_66er_y68fJ96OunqetvcJO8jg@mail.gmail.com>
 <149A8FA9-2519-4D16-8C33-D4867B0AC0A7@twistedmatrix.com>
 <CACKEAnXnrh696csCs5SCMSRkNyQxyKC4VWpnVoDwT+TEEa1dHQ@mail.gmail.com>
 <975701FF-3E24-4072-8795-642339FADE1B@twistedmatrix.com>
 <CACKEAnX_0uBe8z1WomDFK-ReiTqYLbQ95f-RmW625TN643Hfjw@mail.gmail.com>
 <9532D337-A8BD-4CF5-81D4-003AE82FA2BA@twistedmatrix.com>
 <CACKEAnXMMYzwQoJ7s7Sx0+WEP94hboF5Ppuc-pUORdQPDkmDNw@mail.gmail.com>
Message-ID: <A55EAA10-3E6E-4066-8ED8-5067D140AA74@twistedmatrix.com>


> On May 22, 2016, at 18:12, Clayton Daley <clayton.daley at gmail.com> wexternalote:
> 
> "You can't:
> require test coverage,
> require documentation,
> require coding standard compliance,
> require people to file a ticket before sending a patch to the mailing list,
> The first three of these are *already* norms in all of the OSS projects of this caliber and the 4th doesn't make sense in a Github/Bitbucket/Gitlab world (and I fortunately avoided its predecessors).  In fact, I'd be a little worried if the first there weren't required in a project.  ResourceSpace is the only one I can think of that doesn't require them and I wouldn't touch it with a 10 foot pole if there were acceptable (free) alternatives.  So I don't see the link between your success enforcing three norms of good OSS projects and your desire to break a 4th.

To make a long story short: we pretty much invented these norms, and were doing them a long time before other projects got on the bandwagon, over many, very loud objections.

That said, I don't want to overstate the case.  Test coverage was a huge deal.  Doc coverage was a huge deal.  This idea with PRs is a very small thing, maybe not the best idea, and not something we're unanimous about or dead set on.  But the "all your friends are jumping off a bridge" argument against doing it just isn't very compelling.

> The idea that PRs are a substantial burden has caused me pause.  Normally, a PR is a chance to give back to a project rather than freeload.  In most projects, new features are part of a virtuous cycle:  a new feature tends to benefit a large fraction of the user base and expand the user base... which draws more contributors.

The issue is not that PRs are, inherently, a "burden".  But, before I try to rephrase the issue with too many simultaneously open PRs, I should probably describe the tremendous asymmetry between core maintainers and external contributors.

This asymmetry is general to all open source projects, not particularly specific to Twisted at all.  If you listen to Nadia Eghbal's various comments about funding open source (motivated by <https://medium.com/@nayafia/how-i-stumbled-upon-the-internet-s-biggest-blind-spot-b9aa23618c58#.vy4hlzcr4>) you hear this complaint repeated by lots of project maintainers.

External contributors typically have an initial interest in landing one "contribution", which is something that benefits them (whether personally or their company) specifically, rather than something that benefits the community at large.  Transforming that initial interest into a long-term commitment to the project is very challenging for maintainers.

Even if an improvement is specific to the contributor who is making it, of course, there will be others like them who want similar improvements, so it's never a purely selfish or purely altruistic motivation for making the contribution; it's a mix.  And general benefits are good for the core maintainers, of course, since it makes their long-term maintenance job easier, and it does attract more people to the project.

But that benefit has to be balanced with a cost.  The cost is that it takes time and energy to code-review contributions.  This is the source of a lot of friction between core maintainers and external contributors: contributors feel that they are generously giving their time and energy to the project, and it's rude of the project to make them jump through any hoops to get it accepted, whether that's test coverage, documentation, pre-commit code review, coding standard compliance, or, in this case, learning a slightly weird workflow.

External contributors can affect this balance a lot, by making sure that their contributions are already as close as possible to acceptable.  But even if they do, the ratio of external contributors to core maintainers is almost always far greater than 1; the only way that external contributors can _really_ affect this balance is to become core maintainers :).

And this asymmetry brings us to why it's important to keep the 'Review Queue' short.  To rephrase what I said earlier in this thread, if there are so many open PRs that reviewers don't know which ones to look at first, then the sorting algorithm will be "whichever ones my friends want me to look at first", which means we need to maintain a clear division between things-we-are-looking-at and things-we-are-not-looking-at, to maximize the effectiveness of the limiting factor of code reviewer time for impact on the latency of time it takes to get feedback on a potential change.

Sorry that this is a bit long-winded but I really just object to the premise that the point is that I don't care about contributors. I care about contributors a great deal; this is why I want a carefully designed process that doesn't shut them out or waste their time.

> Especially given the recent deprecations (old, unmaintained protocols), it seems that Twisted doesn't work like this.  If another user adds another protocol, it doesn't make the system better for most users.  In fact, it makes sense that it actually increases the maintenance burden.

This is true of all features for all projects, though.  More code == more maintenance.

> I tried to look for myself, but was reminded that I don't know the internals well enough... are patches on non-central protocols a big part of the backlog?  Or is the backlog mostly core features (like reactors or IO infrastructure) that most projects depend upon?

I don't think we have any good metrics on the backlog, unfortunately.  But certainly most of the maintenance work has been maintenance, like porting existing code to python 3, improving test coverage, and implementing improvements to TLS.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160523/cbb71a50/attachment-0001.html>

From glyph at twistedmatrix.com  Mon May 23 11:55:43 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 23 May 2016 10:55:43 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <86oa7xv15j.fsf@atlantis.meejah.ca>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <CACqnu4U8XonGd1W0US8W3n=F_66er_y68fJ96OunqetvcJO8jg@mail.gmail.com>
 <149A8FA9-2519-4D16-8C33-D4867B0AC0A7@twistedmatrix.com>
 <CACKEAnXnrh696csCs5SCMSRkNyQxyKC4VWpnVoDwT+TEEa1dHQ@mail.gmail.com>
 <975701FF-3E24-4072-8795-642339FADE1B@twistedmatrix.com>
 <CACKEAnX_0uBe8z1WomDFK-ReiTqYLbQ95f-RmW625TN643Hfjw@mail.gmail.com>
 <86oa7xv15j.fsf@atlantis.meejah.ca>
Message-ID: <3C0BBD4D-F460-4507-BCD2-824549DBA029@twistedmatrix.com>


> On May 22, 2016, at 9:39 PM, meejah <meejah at meejah.ca> wrote:
> 
> 
> Personally, I find closing PRs that aren't going to be merged "soon"
> mostly-beneficial. Even if it *might* be perceived as "hostile" by some
> contributers, a simple explanation should suffice. (And, if simply
> closing a PR with a nice note explaining, "please re-open when X is
> fixed/changed" scares away a potential contributer I have my doubts as
> to whether they would fix X if you *didn't* close it...)
> 
> There's nothing worse than trolling through open PRs only to find that
> the last comment is "fix up X, Y, and Z and we'll merge" because then
> you have to (re-)figure out if X, Y and Z have been done etc. On the
> flip side, it's nice to know if your PR has problems or not.
> 
> The other plus of closing is that it's way more obvious when the PR is
> once again considered ready for merging (even without 'completely baked'
> workflows like Twisted's) and keeps the "open PRs" list (hopefully!)
> shorter.

Thanks for the feedback; this mirrors my reasoning pretty much exactly :).

-glyph



From glyph at twistedmatrix.com  Mon May 23 11:57:31 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 23 May 2016 10:57:31 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <CAMcKhMQqNnbowaLd9dBnOeA2qS+v76ezUHEpAOj-FagMp2peSg@mail.gmail.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <CACqnu4U8XonGd1W0US8W3n=F_66er_y68fJ96OunqetvcJO8jg@mail.gmail.com>
 <149A8FA9-2519-4D16-8C33-D4867B0AC0A7@twistedmatrix.com>
 <CACKEAnXnrh696csCs5SCMSRkNyQxyKC4VWpnVoDwT+TEEa1dHQ@mail.gmail.com>
 <975701FF-3E24-4072-8795-642339FADE1B@twistedmatrix.com>
 <CACKEAnX_0uBe8z1WomDFK-ReiTqYLbQ95f-RmW625TN643Hfjw@mail.gmail.com>
 <86oa7xv15j.fsf@atlantis.meejah.ca>
 <CAG=rPVe8W+Pju7=sb4VBiN=y4EEoKMEWz6JKxrUeJVL8f0vhxg@mail.gmail.com>
 <583D0470-A5B3-426F-98D5-6ED6DEB461D3@atleastfornow.net>
 <CAMcKhMQqNnbowaLd9dBnOeA2qS+v76ezUHEpAOj-FagMp2peSg@mail.gmail.com>
Message-ID: <FD92E7C4-6FD0-4702-B7EE-6975FA4290A1@twistedmatrix.com>


> On May 22, 2016, at 10:51 PM, Tristan Seligmann <mithrandi at mithrandi.net> wrote:
> 
> Note that even without the bot, I believe you can just create a new PR for the same branch, so it's not *too* bad, but definitely a little clunky.

Many of my comments have had to do why we want this kind of process generally, rather than why specifically closing PRs is the way I'd prefer to go; this is one benefit, which is that even if our bot infrastructure breaks down, there's a clear workaround available to contributors.  If resubmitting requires a label change on an existing *open* PR there's not really any way to do that if the bot is temporarily offline.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160523/cf4272df/attachment.html>

From sank.daniel at gmail.com  Mon May 23 12:08:25 2016
From: sank.daniel at gmail.com (Daniel Sank)
Date: Mon, 23 May 2016 11:08:25 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <A55EAA10-3E6E-4066-8ED8-5067D140AA74@twistedmatrix.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <CACqnu4U8XonGd1W0US8W3n=F_66er_y68fJ96OunqetvcJO8jg@mail.gmail.com>
 <149A8FA9-2519-4D16-8C33-D4867B0AC0A7@twistedmatrix.com>
 <CACKEAnXnrh696csCs5SCMSRkNyQxyKC4VWpnVoDwT+TEEa1dHQ@mail.gmail.com>
 <975701FF-3E24-4072-8795-642339FADE1B@twistedmatrix.com>
 <CACKEAnX_0uBe8z1WomDFK-ReiTqYLbQ95f-RmW625TN643Hfjw@mail.gmail.com>
 <9532D337-A8BD-4CF5-81D4-003AE82FA2BA@twistedmatrix.com>
 <CACKEAnXMMYzwQoJ7s7Sx0+WEP94hboF5Ppuc-pUORdQPDkmDNw@mail.gmail.com>
 <A55EAA10-3E6E-4066-8ED8-5067D140AA74@twistedmatrix.com>
Message-ID: <CAKN9TDKnxSgqt2ogyv4jnwRRSLw0TGf1Xq-AouSHpcVH+d6E5A@mail.gmail.com>

FWIW I thought of another "open source" community which uses a similar idea
to closing pull requests if they won't be accepted in their current form:
Stack Exchange.

I mostly frequent Physics Stack Exchange <http://physics.stackexchange.com/>.
At any time some number of the questions on the front page are either
"closed" or "on hold" for not living up to site standards in some way.
We've asked almost exactly the same question as is being asked in this
thread: does closing unfit questions discourage new users so much as to
outweigh the benefits to site quality? I won't pretend to have an
authoritative answer to this question, but I will mention the steps we've
taken to help make sure new users aren't put off.

1. We have a help center (like all other Stack Exchange sites) explaining
the rules and system. It's not great though, and its shortcomings show up
all the time as new users do get confused about the rules. I think if
anything this is just an indication that contributing guidelines need to be
really clear about what the various signals from the maintainers mean.

2. It's really helpful to leave a comment on unfit questions explaining
what the problem is and *how the poster can improve it*. Stack Exchange has
canned close reasons, but they're rarely sufficient in my opinion. I leave
comments like "Welcome to Physics Stack Exchange! I think there's an
interesting question here but we have some rules...Please see the [help
center](link)...". Starting the comment with something positive and
directing the user to official guidelines seems rather helpful, although I
can't provide metrics.

3. Our chat room is extremely easy to access and people there are friendly.
IRC is great but I just clicked around the Twisted website for a minute and
couldn't find any indication that the twisted IRC channel exists.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160523/91a51fc8/attachment.html>

From clayton.daley at gmail.com  Mon May 23 12:56:24 2016
From: clayton.daley at gmail.com (Clayton Daley)
Date: Mon, 23 May 2016 13:56:24 -0500
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <CAKN9TDKnxSgqt2ogyv4jnwRRSLw0TGf1Xq-AouSHpcVH+d6E5A@mail.gmail.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <CACqnu4U8XonGd1W0US8W3n=F_66er_y68fJ96OunqetvcJO8jg@mail.gmail.com>
 <149A8FA9-2519-4D16-8C33-D4867B0AC0A7@twistedmatrix.com>
 <CACKEAnXnrh696csCs5SCMSRkNyQxyKC4VWpnVoDwT+TEEa1dHQ@mail.gmail.com>
 <975701FF-3E24-4072-8795-642339FADE1B@twistedmatrix.com>
 <CACKEAnX_0uBe8z1WomDFK-ReiTqYLbQ95f-RmW625TN643Hfjw@mail.gmail.com>
 <9532D337-A8BD-4CF5-81D4-003AE82FA2BA@twistedmatrix.com>
 <CACKEAnXMMYzwQoJ7s7Sx0+WEP94hboF5Ppuc-pUORdQPDkmDNw@mail.gmail.com>
 <A55EAA10-3E6E-4066-8ED8-5067D140AA74@twistedmatrix.com>
 <CAKN9TDKnxSgqt2ogyv4jnwRRSLw0TGf1Xq-AouSHpcVH+d6E5A@mail.gmail.com>
Message-ID: <CACKEAnXVYKoownT=5JC_i5Hxtd-jc3u6O_BF5LhqqNU4en=DbA@mail.gmail.com>

>
> I mostly frequent Physics Stack Exchange
> <http://physics.stackexchange.com/>. At any time some number of the
> questions on the front page are either "closed" or "on hold" for not living
> up to site standards in some way. We've asked almost exactly the same
> question as is being asked in this thread: does closing unfit questions
> discourage new users so much as to outweigh the benefits to site quality? I
> won't pretend to have an authoritative answer to this question, but I will
> mention the steps we've taken to help make sure new users aren't put off.

...


+1 for some guidelines from a similar policy

Note that we're actually discussing one step more extreme.  Closing poor
questions is common across SE so the issue only affects new OPs. We're
talking about a break from community norms... more like Physics deciding to
close questions after the first answer is added.

We should also consider any unintended side-effects due to Github's default
searches behavior ("open"):

[image: Inline image 1]
Closing PRs will make them less likely to be found by searchers.  If every
PR has an issue (common for bug fixes, less common for new features), this
is less of a problem -- is this something the bot would need to verify/fix?

Clayton Daley

On Mon, May 23, 2016 at 1:08 PM, Daniel Sank <sank.daniel at gmail.com> wrote:

> FWIW I thought of another "open source" community which uses a similar
> idea to closing pull requests if they won't be accepted in their current
> form: Stack Exchange.
>
> I mostly frequent Physics Stack Exchange
> <http://physics.stackexchange.com/>. At any time some number of the
> questions on the front page are either "closed" or "on hold" for not living
> up to site standards in some way. We've asked almost exactly the same
> question as is being asked in this thread: does closing unfit questions
> discourage new users so much as to outweigh the benefits to site quality? I
> won't pretend to have an authoritative answer to this question, but I will
> mention the steps we've taken to help make sure new users aren't put off.
>
> 1. We have a help center (like all other Stack Exchange sites) explaining
> the rules and system. It's not great though, and its shortcomings show up
> all the time as new users do get confused about the rules. I think if
> anything this is just an indication that contributing guidelines need to be
> really clear about what the various signals from the maintainers mean.
>
> 2. It's really helpful to leave a comment on unfit questions explaining
> what the problem is and *how the poster can improve it*. Stack Exchange
> has canned close reasons, but they're rarely sufficient in my opinion. I
> leave comments like "Welcome to Physics Stack Exchange! I think there's an
> interesting question here but we have some rules...Please see the [help
> center](link)...". Starting the comment with something positive and
> directing the user to official guidelines seems rather helpful, although I
> can't provide metrics.
>
> 3. Our chat room is extremely easy to access and people there are
> friendly. IRC is great but I just clicked around the Twisted website for a
> minute and couldn't find any indication that the twisted IRC channel exists.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160523/d0502370/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: image.png
Type: image/png
Size: 8192 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160523/d0502370/attachment-0001.png>

From glyph at twistedmatrix.com  Mon May 23 13:04:06 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 23 May 2016 12:04:06 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <CACKEAnXVYKoownT=5JC_i5Hxtd-jc3u6O_BF5LhqqNU4en=DbA@mail.gmail.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <CACqnu4U8XonGd1W0US8W3n=F_66er_y68fJ96OunqetvcJO8jg@mail.gmail.com>
 <149A8FA9-2519-4D16-8C33-D4867B0AC0A7@twistedmatrix.com>
 <CACKEAnXnrh696csCs5SCMSRkNyQxyKC4VWpnVoDwT+TEEa1dHQ@mail.gmail.com>
 <975701FF-3E24-4072-8795-642339FADE1B@twistedmatrix.com>
 <CACKEAnX_0uBe8z1WomDFK-ReiTqYLbQ95f-RmW625TN643Hfjw@mail.gmail.com>
 <9532D337-A8BD-4CF5-81D4-003AE82FA2BA@twistedmatrix.com>
 <CACKEAnXMMYzwQoJ7s7Sx0+WEP94hboF5Ppuc-pUORdQPDkmDNw@mail.gmail.com>
 <A55EAA10-3E6E-4066-8ED8-5067D140AA74@twistedmatrix.com>
 <CAKN9TDKnxSgqt2ogyv4jnwRRSLw0TGf1Xq-AouSHpcVH+d6E5A@mail.gmail.com>
 <CACKEAnXVYKoownT=5JC_i5Hxtd-jc3u6O_BF5LhqqNU4en=DbA@mail.gmail.com>
Message-ID: <627ED670-A864-4A86-A649-956F7A1D9554@twistedmatrix.com>


> On May 23, 2016, at 11:56 AM, Clayton Daley <clayton.daley at gmail.com> wrote:
> 
> Closing PRs will make them less likely to be found by searchers.  If every PR has an issue (common for bug fixes, less common for new features), this is less of a problem -- is this something the bot would need to verify/fix?

The bot is just for the contributors to be able to re-open PRs to respond to review feedback.  When a PR is closed, the reviewers themselves will ask the authors to open an issue separately if that is appropriate.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160523/71cb41b4/attachment.html>

From twisted-python at 2xlp.com  Tue May 24 11:37:37 2016
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Tue, 24 May 2016 13:37:37 -0400
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
Message-ID: <6450B7DC-CC7C-46B6-AF41-1B81D727855C@2xlp.com>

FWIW, I just noticed that the CONTRIBUTING message wasn't showing up when trying to make a PR.

github is supposed to make a warning box that shows the contents of /CONTRIBUTING or /CONTRIBUTING.md when opening an issue or PR

From rodrigc at crodrigues.org  Tue May 24 12:53:53 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Tue, 24 May 2016 11:53:53 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <6450B7DC-CC7C-46B6-AF41-1B81D727855C@2xlp.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <6450B7DC-CC7C-46B6-AF41-1B81D727855C@2xlp.com>
Message-ID: <CAG=rPVfzV78-swzzA3JjKhCtOz_xivSx0h1He04KyhGab4TB1Q@mail.gmail.com>

Hi,

Thanks for bringing up these points.  See:
https://twistedmatrix.com/trac/ticket/8352

Feel free to add any thoughts you may have on how to improve this.
--
Craig


On Tue, May 24, 2016 at 10:37 AM, Jonathan Vanasco <twisted-python at 2xlp.com>
wrote:

> FWIW, I just noticed that the CONTRIBUTING message wasn't showing up when
> trying to make a PR.
>
> github is supposed to make a warning box that shows the contents of
> /CONTRIBUTING or /CONTRIBUTING.md when opening an issue or PR
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160524/e54fbf41/attachment.html>

From twisted-python at 2xlp.com  Tue May 24 15:49:37 2016
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Tue, 24 May 2016 17:49:37 -0400
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
Message-ID: <037555C9-26A4-4AB4-A9BF-FC12CCDA9A33@2xlp.com>

just a few thoughts:

The current system as-explained seems to use an "Issue" as a queue item that is either a "bug report" or a "notice of a pull request, which may also reference another bug report".  

that is weird.  IMHO, a quality contributor will never get turned off by handling the docs, tests, and other requirements - but may get confused/turned off by this.

anyways:

1. github's PRs are peculiar in that they're "branch to branch" and not "branch at commit to branch at commit".  If I were to submit a PR, I could still make changes on it between my submission and someone finally doing a merge.  Personally, I find this infuriating.  In any event, I suggest *requiring* something like the "git flow" model for submissions.  Outright rejecting anything that isn't in a dedicated fix/feature branch.  Everyone is currently doing the right thing, and there are contribution docs that suggest this ? I would just make it a stated policy to automatically reject any PRs from someone using "master/trunk". 

2. regarding Issues vs PRs and working between Trac and Github, I suggest you take the approach of "Trac Issue = Idea" and "Github PR = Implementation of Idea".  Under this concept, one or more PRs might be attempts to address a given Issue.  The core maintainers can address the highlevel concepts and requirements under Issue, while grounds for rejection / feedback on each PR are  listed there.  As a github/bitbucket submitter, it's really useful when someone looks at a diff and uses inline comments to note their rejection for a section.  This is how most people use Github.  (and it's incompatible with the current queue system, I KNOW).  

3. Initially I didn't like the idea of rejecting so fast, but after thinking it over, now I do.  In addition to boilerplate text about "please resubmit", I think it might be beneficial to standardize some labels for this though, as it helps future contributors who may want to address an issue.  If the "IDEA" is approved but the implementation is not, then noting "Resubmission Pending" suggests this is still active.  If the underlying IDEA or approach is rejected, then noting "Rejection Final" can suggest it's just not going to happen.

4.  I understand that "review" hold special significance within the twisted team's workflow, but outside of Twisted it is awkward to see something bounce in and out of "review".  At least on the github side, using some sort of label to state where in the process (ie, what type of review) something is under would help.


The caveat is that this breaks the current use of Issue as a "queue" item.  But Twisted is using "issues" less as an Issue and more as a queue item, while github "Issues" are less of a queue item and amore of an actual issue.  This is a bit confusing and different to how many people will use github.  

Just to illustrate what a typical github contributor flow might be:

	Scenario A-

		There is a trac Issue #1001 for "F is broken"
		bob generates github pr 11, and submits.  He comments in #1001
		ted generates github pr 12, and submits.  He creates a trac issue #1002.  When #1002 is first looked at, it is a dupe of 1001 and copied over.
		carol generates github pr 13 and submits.  she comments in #1003

		There are 3 PRs for a single Issue.  Feedback on the PRs occurs on Github.  Feedback on the Ideas and status of PRs is on trac.

	Scenario B-
		Bob notes that "X is broken"
		Bob generates github PR 11 and submits.  He goes to trac and creates issue #1002
		Bob's PR is rejected because the fundamental approach is not acceptable, however X is still broken.  PR11 is closed, #1002 is open.
		Ted generates pr 12 and submits.  he comments in #1002.  Ted is rejected but the approach is compatible.  it can be implemented with fixes.
		Carol forks Ted's approach , fixes it, and generates pr 13.  she comments in #1002 and it is accepted.

again, this breaks the current use of queues.  I'm not sure how to reconcile everything together, however I think you're going to find non-core maintainers naturally fall into the 2 scenarios above.

From glyph at twistedmatrix.com  Tue May 24 16:49:26 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 24 May 2016 15:49:26 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <037555C9-26A4-4AB4-A9BF-FC12CCDA9A33@2xlp.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <037555C9-26A4-4AB4-A9BF-FC12CCDA9A33@2xlp.com>
Message-ID: <1F1FBA2D-156F-4A55-BC48-31F43C99DE33@twistedmatrix.com>


> On May 24, 2016, at 2:49 PM, Jonathan Vanasco <twisted-python at 2xlp.com> wrote:
> 
> just a few thoughts:
> 
> The current system as-explained seems to use an "Issue" as a queue item that is either a "bug report" or a "notice of a pull request, which may also reference another bug report".

In the current system, we have "tickets" (in Trac) not "issues" (on Github).  And in that system, an issue is put into review when it has an attached branch or patch that needs to be considered for inclusion.

In the Github system.

> that is weird.

> IMHO, a quality contributor will never get turned off by handling the docs, tests, and other requirements - but may get confused/turned off by this.

Literally everyone's predictions about this have always been wrong, so I don't like speculating ;).  Especially classifying people as "quality contributors" or not.  I will sometimes say something like "if you don't do X, you probably won't do Y" but being a "quality contributor" is a complex, multi-dimensional, and situationally-dependent personality characteristic that I don't think we can predict.

> anyways:
> 
> 1. github's PRs are peculiar in that they're "branch to branch" and not "branch at commit to branch at commit".  If I were to submit a PR, I could still make changes on it between my submission and someone finally doing a merge.  Personally, I find this infuriating.

I KNOW, RIGHT!!!  However, protected statuses somewhat reduce the potential race-condition here.  And contributing to a couple dozen Github projects I have to say that practically this has never been an issue, even though I find it aesthetically appalling, design-wise.

> In any event, I suggest *requiring* something like the "git flow" model for submissions.  Outright rejecting anything that isn't in a dedicated fix/feature branch.  Everyone is currently doing the right thing, and there are contribution docs that suggest this ? I would just make it a stated policy to automatically reject any PRs from someone using "master/trunk".

Honestly I don't think this is worth the effort.  git-flow is, abstractly, a reasonably good idea (if people don't know what we're talking about, see <http://jeffkreeftmeijer.com/2010/why-arent-you-using-git-flow/>) since it encapsulates the precise semantics desired by certain commits.  But sometimes people make a fork and their fork branch just happens to be called 'patch-1', or 'master', but this doesn't really affect our workflow as long as they observe proper PR etiquette and don't push any unrelated revisions to that branch in the meanwhile.

> 2. regarding Issues vs PRs and working between Trac and Github, I suggest you take the approach of "Trac Issue = Idea" and "Github PR = Implementation of Idea".  Under this concept, one or more PRs might be attempts to address a given Issue.

That's ... exactly what I was trying to express.  (Except I was thinking we'd gradually move from Trac Tickets to Github Issues).

> The core maintainers can address the highlevel concepts and requirements under Issue, while grounds for rejection / feedback on each PR are  listed there.  As a github/bitbucket submitter, it's really useful when someone looks at a diff and uses inline comments to note their rejection for a section.  This is how most people use Github.  (and it's incompatible with the current queue system, I KNOW).

I don't see how it's incompatible.  It seems perfectly fine, as long as we shift from 'review queue == report 25' to 'review queue == open PRs with non-failing status'.

> 3. Initially I didn't like the idea of rejecting so fast, but after thinking it over, now I do.  In addition to boilerplate text about "please resubmit", I think it might be beneficial to standardize some labels for this though, as it helps future contributors who may want to address an issue.  If the "IDEA" is approved but the implementation is not, then noting "Resubmission Pending" suggests this is still active.  If the underlying IDEA or approach is rejected, then noting "Rejection Final" can suggest it's just not going to happen.

Yeah, adding some informative labels to the closed issues might be a good way of letting contributors know what is going on.  I just wanted to make sure that they are an optional part of the workflow which, if the automation around them breaks down in some way, we can still make progress, and we don't end up with inconsistent or lost information.

> 4.  I understand that "review" hold special significance within the twisted team's workflow, but outside of Twisted it is awkward to see something bounce in and out of "review".

I think this is because, generally speaking, most teams do a poor job structuring their communications about what state issues and pull requests are in :).

> At least on the github side, using some sort of label to state where in the process (ie, what type of review) something is under would help.

What do you mean it "would help"?  What problem would it solve?

> The caveat is that this breaks the current use of Issue as a "queue" item.  But Twisted is using "issues" less as an Issue and more as a queue item, while github "Issues" are less of a queue item and amore of an actual issue.  This is a bit confusing and different to how many people will use github.

I don't know where you're getting this from.  Only tickets in review are queue items.  I have no idea what "actual issue" means here.

> 
> Just to illustrate what a typical github contributor flow might be:
> 
> 	Scenario A-
> 
> 		There is a trac Issue #1001 for "F is broken"
> 		bob generates github pr 11, and submits.  He comments in #1001
> 		ted generates github pr 12, and submits.  He creates a trac issue #1002.  When #1002 is first looked at, it is a dupe of 1001 and copied over.
> 		carol generates github pr 13 and submits.  she comments in #1003
> 
> 		There are 3 PRs for a single Issue.  Feedback on the PRs occurs on Github.  Feedback on the Ideas and status of PRs is on trac.
> 
> 	Scenario B-
> 		Bob notes that "X is broken"
> 		Bob generates github PR 11 and submits.  He goes to trac and creates issue #1002
> 		Bob's PR is rejected because the fundamental approach is not acceptable, however X is still broken.  PR11 is closed, #1002 is open.
> 		Ted generates pr 12 and submits.  he comments in #1002.  Ted is rejected but the approach is compatible.  it can be implemented with fixes.
> 		Carol forks Ted's approach , fixes it, and generates pr 13.  she comments in #1002 and it is accepted.
> 
> again, this breaks the current use of queues.  I'm not sure how to reconcile everything together, however I think you're going to find non-core maintainers naturally fall into the 2 scenarios above.

What use?  What are you referring to with the plural "queues"?  There's only ever been a single queue, the review queue.  In both of your scenarios, the list of open PRs is the review queue, and in both of those scenarios, discussion of the abstract idea can happen on the tickets without treating them directly as queue items.

I appreciate you taking the time to think about our workflow and the review queue, but I would ask that you carefully consider what problem you're trying to address with your suggestions.

The practical issue I'm trying to address by switching to github PRs as opposed to trac tickets with the 'review' keyword is the speed and ease of submitting a change and getting CI feedback on that change, in addition to lowering training overhead since many people are familiar with github.  Faster feedback = happier contributors = more maintenance effort productively expended.  The issue I'm trying to address with the slightly odd close-a-PR-to-signify-finished-review workflow is to avoid the common problem of reviewers not knowing which things to review and therefore leaving certain contributions mouldering until their submitters lose interest.  Beyond that, I don't see that we have substantial workflow issues that need solving.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160524/187279ac/attachment-0001.html>

From dansut at gmail.com  Tue May 24 17:10:56 2016
From: dansut at gmail.com (Daniel Sutcliffe)
Date: Tue, 24 May 2016 19:10:56 -0400
Subject: [Twisted-Python] Persuading Python's Logging to use
	twisted.logger
In-Reply-To: <8193AB32-9F5A-4AE5-A078-EB7F50939D1B@twistedmatrix.com>
References: <CADzPF4sMzLe4-HVpt=Dv3vv-BvzC9EKrBrHTZedLddwVoBb1Qg@mail.gmail.com>
 <93ae72c6-c942-73c6-e119-2c92764c30b3@arskom.com.tr>
 <CADzPF4uwgq1d=VC2tGB8oDR3xRQbGGWAqwNGHuVSK7nyRMjBMA@mail.gmail.com>
 <8193AB32-9F5A-4AE5-A078-EB7F50939D1B@twistedmatrix.com>
Message-ID: <CADzPF4vyNg6M28cC1kWsNofRUJmJynC564_c+A3QUSA_LHNidA@mail.gmail.com>

On May 10, 2016, at 4:23 PM, Daniel Sutcliffe <dansut at gmail.com> wrote:
>> Thanks for all the hints and suggestions guys, this was far simpler
>> than I thought it would be and the results are exactly what I imagined
>> without too much effort.

On Sat, May 21, 2016 at 9:44 PM, Glyph <glyph at twistedmatrix.com> wrote:
> Fantastic!

[...]
>> Glyph: The code below is I'm sure far from perfect, and it doesn't
>> take your advice and convert the msg into a twisted format string, it
>> takes the simpler approach of letting the Logging record pre-format
>> using the getMessage() method. I'm sure there are loads of edge cases
>> it could cope with better with maybe it is a start of something that
>> could be included in Twisted.
>
> The main reason I wanted to do the format-string translation is that it would allow the key/value pairs to be stored according to the same idiom that Twisted uses, and therefore be serialized to jsonFileLogObserver and consequently things like LogStash / ElasticSearch.

I kept the format-string args within a dictionary under the args kwarg
to emit() for exactly the reasons you gave above but felt that
translating a %-encoded string into the new-style that twisted.logger
uses was likely to make the example much more complicated, and was
frankly beyond my limited needs. There's probably a simple way to do
this in Python that I am not aware of yet though...

[...]
>> But hopefully this all makes sense and this can be a start of
>> something much more generically useful.
>
> Yep!  This is definitely something handy.  Would you mind filing an issue for it?

I've created issue #8358 https://twistedmatrix.com/trac/ticket/8358
Which is hopefully what you were after - spent a bunch of time reading
your impressive process and standards docs so I'm already sure that
anything that finds itself in Twisted from this will probably be quite
significantly different to this initial suggestion but I don't mind a
bit of learning if someone is willing to give me a bit of mentoring me
to get this into shape so it can be done as a PR.

Cheers
/dan
-- 
Daniel Sutcliffe <dansut at gmail.com>


From twisted-python at 2xlp.com  Tue May 24 17:50:32 2016
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Tue, 24 May 2016 19:50:32 -0400
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <1F1FBA2D-156F-4A55-BC48-31F43C99DE33@twistedmatrix.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <037555C9-26A4-4AB4-A9BF-FC12CCDA9A33@2xlp.com>
 <1F1FBA2D-156F-4A55-BC48-31F43C99DE33@twistedmatrix.com>
Message-ID: <B125CA2C-F9CA-489F-82F1-AB06897D1125@2xlp.com>


On May 24, 2016, at 6:49 PM, Glyph wrote:

> I KNOW, RIGHT!!!  However, protected statuses somewhat reduce the potential race-condition here.  And contributing to a couple dozen Github projects I have to say that practically this has never been an issue, even though I find it aesthetically appalling, design-wise.

> But sometimes people make a fork and their fork branch just happens to be called 'patch-1', or 'master',  this doesn't really affect our workflow as long as they observe proper PR etiquette and don't push any unrelated revisions to that branch in the meanwhile.

In terms of "git flow" i didn't mean the exact names, just the concept that every fix has it's own dedicated branch. This is something that almost every github-experienced person does automatically (and all current twisted PRs do).  People with less experience on github itself (not a given package) will often just edit the "master" branch and submit.  then they'll forget they did that and edit something else... because of that github peculiarity, and that everything is acting "centralized" on github and not under a "decentralized" model where a particular commit was queued that ends up in the review.  those types of changes can also end up triggering CI tests, which complicates things further.

twisted contributors are likely a bit more experienced and it's a self-selecting pool... i've just seen an increasing number of projects require a dedicated branch and politely reject + ask for anything against 'master' to be resubmitted via a dedicated branch.

> I don't see how it's incompatible.  It seems perfectly fine, as long as we shift from 'review queue == report 25' to 'review queue == open PRs with non-failing status'.

ah, I did not know that was possible.  this ties into me not understanding the content of the queue being PR only (not "all tickets").

>> At least on the github side, using some sort of label to state where in the process (ie, what type of review) something is under would help.
> 
> What do you mean it "would help"?  What problem would it solve?

This would help non-maintainers understand what that actual progress was in that 5 stage review.

> 
>> The caveat is that this breaks the current use of Issue as a "queue" item.  But Twisted is using "issues" less as an Issue and more as a queue item, while github "Issues" are less of a queue item and amore of an actual issue.  This is a bit confusing and different to how many people will use github.
> 
> I don't know where you're getting this from.  Only tickets in review are queue items.  I have no idea what "actual issue" means here.

Ok. From here to the end I believe I understand my confusion.  The "queue" looked to me like it was "All Trac Tickets" not just "Certain types of Trac Tickets".   I was looking at a few reports and some raw views that showed track tickets that were both bug reports and attempts to fix a specific problem.  It looked like the normal use of github would have run antagonistic to your workflow , but his all seems fine now.

> The practical issue I'm trying to address by switching to github PRs as opposed to trac tickets with the 'review' keyword is the speed and ease of submitting a change and getting CI feedback on that change, in addition to lowering training overhead since many people are familiar with github.  Faster feedback = happier contributors = more maintenance effort productively expended.  The issue I'm trying to address with the slightly odd close-a-PR-to-signify-finished-review workflow is to avoid the common problem of reviewers not knowing which things to review and therefore leaving certain contributions mouldering until their submitters lose interest.  Beyond that, I don't see that we have substantial workflow issues that need solving.

I was mostly concerned with the proposed implementation creating workflow issues.




-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160524/d629c6f8/attachment.html>

From glyph at twistedmatrix.com  Tue May 24 18:05:41 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 24 May 2016 17:05:41 -0700
Subject: [Twisted-Python] Persuading Python's Logging to use
	twisted.logger
In-Reply-To: <CADzPF4vyNg6M28cC1kWsNofRUJmJynC564_c+A3QUSA_LHNidA@mail.gmail.com>
References: <CADzPF4sMzLe4-HVpt=Dv3vv-BvzC9EKrBrHTZedLddwVoBb1Qg@mail.gmail.com>
 <93ae72c6-c942-73c6-e119-2c92764c30b3@arskom.com.tr>
 <CADzPF4uwgq1d=VC2tGB8oDR3xRQbGGWAqwNGHuVSK7nyRMjBMA@mail.gmail.com>
 <8193AB32-9F5A-4AE5-A078-EB7F50939D1B@twistedmatrix.com>
 <CADzPF4vyNg6M28cC1kWsNofRUJmJynC564_c+A3QUSA_LHNidA@mail.gmail.com>
Message-ID: <78BBAF25-7E9E-4C5E-8629-D0F437BA140F@twistedmatrix.com>


> On May 24, 2016, at 4:10 PM, Daniel Sutcliffe <dansut at gmail.com> wrote:
> 
>> The main reason I wanted to do the format-string translation is that it would allow the key/value pairs to be stored according to the same idiom that Twisted uses, and therefore be serialized to jsonFileLogObserver and consequently things like LogStash / ElasticSearch.
> 
> I kept the format-string args within a dictionary under the args kwarg
> to emit() for exactly the reasons you gave above but felt that
> translating a %-encoded string into the new-style that twisted.logger
> uses was likely to make the example much more complicated, and was
> frankly beyond my limited needs. There's probably a simple way to do
> this in Python that I am not aware of yet though...

I wrote a function to do this some time ago, and I forget the exact derivation, but somehow it ended up here:

https://github.com/moreati/formatist

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160524/9d3a0cb2/attachment.html>

From rodrigc at crodrigues.org  Fri May 27 02:19:32 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Fri, 27 May 2016 01:19:32 -0700
Subject: [Twisted-Python] Need clarification on reviews for Python 3 fixes
	for Twisted
Message-ID: <CAG=rPVdkNbLiOSS3BNmx5FVbLus8JAcZkepCXMjhMmrXdvKt4A@mail.gmail.com>

Hi,

I have submitted some Python 3 patches for Twisted.

1.  PATCHES REVIEWED AND COMMITTED TO TRUNK
=============================================

Use new syntax for catching exceptions
https://twistedmatrix.com/trac/ticket/8344

Use new syntax for raising exceptions
https://twistedmatrix.com/trac/ticket/8345

Remove old syntax for octal literals
https://twistedmatrix.com/trac/ticket/8347

Fix parentheses in list comprehensions
https://twistedmatrix.com/trac/ticket/8351


2.  PATCHES WHICH STILL NEED TO BE REVIEWED, NOT YET COMMITTED TO TRUNK
=======================================================================

Change print to print()
http://twistedmatrix.com/trac/ticket/5812

Change foo.has_key(bar) to "bar in foo"
https://twistedmatrix.com/trac/ticket/8359
https://twistedmatrix.com/trac/ticket/8360
https://twistedmatrix.com/trac/ticket/8361
https://twistedmatrix.com/trac/ticket/8362
https://twistedmatrix.com/trac/ticket/8363
https://twistedmatrix.com/trac/ticket/8364
https://twistedmatrix.com/trac/ticket/8365

Eliminate the use of long literals
https://twistedmatrix.com/trac/ticket/8366

Remove use of tuple parameter packing
https://twistedmatrix.com/trac/ticket/8346


Adi has reviewed and committed the patches in 1.
However, Adi has mentioned that in this document:
http://twistedmatrix.com/trac/wiki/Plan/Python3,
the strategy of submitting incremental Python3 fixes is not mentioned.
Before doing any further reviews, Adi would like clarification that
these types of reviews/patches are OK for submission and review.

Are they OK?  Would it be possible extend the Plan/Python3 document to
accept incremental Python3 fixes
as long as:

 * adheres to Twisted coding standards
 * works on Python 2.7
 * passes existing tests
 * comes with new tests if functionality is changed that is not currently
being tested

My experience working with Python3 on other projects, is that incremental
fixes is easier to review and get working, rather than an all or nothing
approach.
Some Python3 porting such as bytes/string/unicode or Python C API changes
are very hard,
while print vs. print() are very easy.  Holding up the easy changes, until
every hard change
is also done is quite hard, and slows things down.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160527/c29fd2ec/attachment.html>

From itamar at itamarst.org  Fri May 27 06:13:10 2016
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Fri, 27 May 2016 08:13:10 -0400
Subject: [Twisted-Python] Need clarification on reviews for Python 3
 fixes for Twisted
In-Reply-To: <CAG=rPVdkNbLiOSS3BNmx5FVbLus8JAcZkepCXMjhMmrXdvKt4A@mail.gmail.com>
References: <CAG=rPVdkNbLiOSS3BNmx5FVbLus8JAcZkepCXMjhMmrXdvKt4A@mail.gmail.com>
Message-ID: <475c31e5-ae8c-e42b-f20f-467683e231c0@itamarst.org>

On 05/27/2016 04:19 AM, Craig Rodrigues wrote:
> However, Adi has mentioned that in this document: 
> http://twistedmatrix.com/trac/wiki/Plan/Python3,
> the strategy of submitting incremental Python3 fixes is not mentioned.
> Before doing any further reviews, Adi would like clarification that
> these types of reviews/patches are OK for submission and review.
>
> Are they OK?  Would it be possible extend the Plan/Python3 document to 
> accept incremental Python3 fixes
> as long as:
>
>  * adheres to Twisted coding standards
>  * works on Python 2.7
>  * passes existing tests
>  * comes with new tests if functionality is changed that is not 
> currently being tested
>
> My experience working with Python3 on other projects, is that incremental
> fixes is easier to review and get working, rather than an all or 
> nothing approach.
> Some Python3 porting such as bytes/string/unicode or Python C API 
> changes are very hard,
> while print vs. print() are very easy.  Holding up the easy changes, 
> until every hard change
> is also done is quite hard, and slows things down.

I think they're fine to accept insofar as:

1. There is strong ongoing momentum for the port now, so these changes 
makes porting module-by-module easier and won't just bitrot.
2. They're doing one particular incompatibility at a time, rather than 
"here's an assortment of random changes to a module that may or may not 
port that module fully, who knows."

I don't think they are sufficient to port a module (someone needs to 
read the code and think a bit, usually), but they will make it easier to 
do so, so they definitely are worth continuing.

-Itamar


From wolfgang.kde at rohdewald.de  Fri May 27 07:14:26 2016
From: wolfgang.kde at rohdewald.de (Wolfgang Rohdewald)
Date: Fri, 27 May 2016 15:14:26 +0200
Subject: [Twisted-Python] Need clarification on reviews for Python 3
	fixes for Twisted
In-Reply-To: <475c31e5-ae8c-e42b-f20f-467683e231c0@itamarst.org>
References: <CAG=rPVdkNbLiOSS3BNmx5FVbLus8JAcZkepCXMjhMmrXdvKt4A@mail.gmail.com>
 <475c31e5-ae8c-e42b-f20f-467683e231c0@itamarst.org>
Message-ID: <2474609.Rc1Be5hivi@i5>

Am Freitag, 27. Mai 2016, 08:13:10 schrieb Itamar Turner-Trauring:
> On 05/27/2016 04:19 AM, Craig Rodrigues wrote:
> > However, Adi has mentioned that in this document: 
> > http://twistedmatrix.com/trac/wiki/Plan/Python3,
> > the strategy of submitting incremental Python3 fixes is not mentioned.
> > Before doing any further reviews, Adi would like clarification that
> > these types of reviews/patches are OK for submission and review.
> >
> > Are they OK?  Would it be possible extend the Plan/Python3 document to 
> > accept incremental Python3 fixes
> > as long as:
> >
> >  * adheres to Twisted coding standards
> >  * works on Python 2.7
> >  * passes existing tests
> >  * comes with new tests if functionality is changed that is not 
> > currently being tested
> >
> > My experience working with Python3 on other projects, is that incremental
> > fixes is easier to review and get working, rather than an all or 
> > nothing approach.
> > Some Python3 porting such as bytes/string/unicode or Python C API 
> > changes are very hard,
> > while print vs. print() are very easy.  Holding up the easy changes, 
> > until every hard change
> > is also done is quite hard, and slows things down.
> 
> I think they're fine to accept insofar as:
> 
> 1. There is strong ongoing momentum for the port now, so these changes 
> makes porting module-by-module easier and won't just bitrot.
> 2. They're doing one particular incompatibility at a time, rather than 
> "here's an assortment of random changes to a module that may or may not 
> port that module fully, who knows."
> 
> I don't think they are sufficient to port a module (someone needs to 
> read the code and think a bit, usually), but they will make it easier to 
> do so, so they definitely are worth continuing.
> 
> -Itamar

This would have been helpful when I tried to port PB to python3. 
Instead, that port is now bitrotting. I did try hard to deliver
simple changes (like print()) before tackling harder problems
but not much of all that went into the source code. Interest in
PB does not seem very high.

Anyway there still is the public git fork (I did mention it here
at that time) - if anybody would like to integrate that. Not me -
for the foreseeable future.

-- 
Wolfgang


From adi at roiban.ro  Fri May 27 07:31:21 2016
From: adi at roiban.ro (Adi Roiban)
Date: Fri, 27 May 2016 14:31:21 +0100
Subject: [Twisted-Python] Need clarification on reviews for Python 3
 fixes for Twisted
In-Reply-To: <475c31e5-ae8c-e42b-f20f-467683e231c0@itamarst.org>
References: <CAG=rPVdkNbLiOSS3BNmx5FVbLus8JAcZkepCXMjhMmrXdvKt4A@mail.gmail.com>
 <475c31e5-ae8c-e42b-f20f-467683e231c0@itamarst.org>
Message-ID: <CAFycZ9edPSLatS4eFazxPK_TJPvY2nQMZ50bmJHDc1+dkksNAg@mail.gmail.com>

On 27 May 2016 at 13:13, Itamar Turner-Trauring <itamar at itamarst.org> wrote:

>
>>
[snip]

I think they're fine to accept insofar as:
>
> 1. There is strong ongoing momentum for the port now, so these changes
> makes porting module-by-module easier and won't just bitrot.
>

How do you define a "strong ongoing momentum" ?


> 2. They're doing one particular incompatibility at a time, rather than
> "here's an assortment of random changes to a module that may or may not
> port that module fully, who knows."
>
>
Some code parts don't have python 2.7 coverage .
Is is still acceptable to touch that code ? :)

Regards,
Adi
-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160527/34043c87/attachment.html>

From glyph at twistedmatrix.com  Fri May 27 14:46:34 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 27 May 2016 13:46:34 -0700
Subject: [Twisted-Python] Need clarification on reviews for Python 3
	fixes for Twisted
In-Reply-To: <CAFycZ9edPSLatS4eFazxPK_TJPvY2nQMZ50bmJHDc1+dkksNAg@mail.gmail.com>
References: <CAG=rPVdkNbLiOSS3BNmx5FVbLus8JAcZkepCXMjhMmrXdvKt4A@mail.gmail.com>
 <475c31e5-ae8c-e42b-f20f-467683e231c0@itamarst.org>
 <CAFycZ9edPSLatS4eFazxPK_TJPvY2nQMZ50bmJHDc1+dkksNAg@mail.gmail.com>
Message-ID: <AA34E42E-E68A-4029-B1CE-BFBDE40A0603@twistedmatrix.com>


> On May 27, 2016, at 06:31, Adi Roiban <adi at roiban.ro> wrote:
> 
> 
> 
> On 27 May 2016 at 13:13, Itamar Turner-Trauring <itamar at itamarst.org <mailto:itamar at itamarst.org>> wrote:
> 
> 
> [snip]
> 
> I think they're fine to accept insofar as:
> 
> 1. There is strong ongoing momentum for the port now, so these changes makes porting module-by-module easier and won't just bitrot.
> 
> How do you define a "strong ongoing momentum" ?

I don't think "momentum" is a real thing.  Investment in Twisted has historically followed an extreme boom/bust cycle, and we don't want to make any decisions assuming that work will be continuing at the current rate.

> 2. They're doing one particular incompatibility at a time, rather than "here's an assortment of random changes to a module that may or may not port that module fully, who knows."
> 
> 
> Some code parts don't have python 2.7 coverage . 
> Is is still acceptable to touch that code ? :)

No.  Test coverage is how we know that the behavior is the same on both versions of Python and we're not just hoping that it is.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160527/ad3c2048/attachment.html>

From glyph at twistedmatrix.com  Sat May 28 01:48:31 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 28 May 2016 00:48:31 -0700
Subject: [Twisted-Python] Need clarification on reviews for Python 3
	fixes for Twisted
In-Reply-To: <AA34E42E-E68A-4029-B1CE-BFBDE40A0603@twistedmatrix.com>
References: <CAG=rPVdkNbLiOSS3BNmx5FVbLus8JAcZkepCXMjhMmrXdvKt4A@mail.gmail.com>
 <475c31e5-ae8c-e42b-f20f-467683e231c0@itamarst.org>
 <CAFycZ9edPSLatS4eFazxPK_TJPvY2nQMZ50bmJHDc1+dkksNAg@mail.gmail.com>
 <AA34E42E-E68A-4029-B1CE-BFBDE40A0603@twistedmatrix.com>
Message-ID: <B5608293-AF76-4438-8E16-84C1979E5D69@twistedmatrix.com>


> On May 27, 2016, at 13:46, Glyph <glyph at twistedmatrix.com> wrote:
> 
>> On May 27, 2016, at 06:31, Adi Roiban <adi at roiban.ro <mailto:adi at roiban.ro>> wrote:
>> 
>> On 27 May 2016 at 13:13, Itamar Turner-Trauring <itamar at itamarst.org <mailto:itamar at itamarst.org>> wrote:
>> 2. They're doing one particular incompatibility at a time, rather than "here's an assortment of random changes to a module that may or may not port that module fully, who knows."
>> 
>> Some code parts don't have python 2.7 coverage . 
>> Is is still acceptable to touch that code ? :)
> 
> No.  Test coverage is how we know that the behavior is the same on both versions of Python and we're not just hoping that it is.

I was on a plane when I wrote this, and it may have been a bit overly terse.  Let me expand a little bit.

The lines of code in a diff must be covered.  However, if one is porting, let's say, a 2000-line module with no test coverage to be importable under python 3, and 8 lines of code in that module need to change, *only those 8 lines must be covered*.  Obviously, the tests should be as reasonable as possible and should not do anything too evil and gross to get those lines covered, but the author of the change hitting those lines is not responsible for a ground-up comprehensive test suite design for the entire module.  They just need to write the bare minimum test coverage to ensure their changes are covered at all.  If you're making syntax changes, you also don't need to worry about getting those tests to actually pass on python3; it would be great to make smaller, individual changes which do the syntax first, then later actually start adding tests to the py3 suite.

So please don't take this requirement for test coverage to mean that you have to embark on a major project to land these syntax fixes.  It would be great to have syntax fixes like this, and a bare minimum of very simple test coverage, just enough to exercise the lines in question, is perfectly adequate for such a small mechanical change.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160528/fab68390/attachment.html>

From adi at roiban.ro  Sat May 28 03:33:37 2016
From: adi at roiban.ro (Adi Roiban)
Date: Sat, 28 May 2016 10:33:37 +0100
Subject: [Twisted-Python] Need clarification on reviews for Python 3
 fixes for Twisted
In-Reply-To: <B5608293-AF76-4438-8E16-84C1979E5D69@twistedmatrix.com>
References: <CAG=rPVdkNbLiOSS3BNmx5FVbLus8JAcZkepCXMjhMmrXdvKt4A@mail.gmail.com>
 <475c31e5-ae8c-e42b-f20f-467683e231c0@itamarst.org>
 <CAFycZ9edPSLatS4eFazxPK_TJPvY2nQMZ50bmJHDc1+dkksNAg@mail.gmail.com>
 <AA34E42E-E68A-4029-B1CE-BFBDE40A0603@twistedmatrix.com>
 <B5608293-AF76-4438-8E16-84C1979E5D69@twistedmatrix.com>
Message-ID: <CAFycZ9e6HEeb7ipOwZzH7xTssC6sfX55FDVgGnyjpzEFbhZvaQ@mail.gmail.com>

On 28 May 2016 at 08:48, Glyph <glyph at twistedmatrix.com> wrote:

>
> On May 27, 2016, at 13:46, Glyph <glyph at twistedmatrix.com> wrote:
>
> On May 27, 2016, at 06:31, Adi Roiban <adi at roiban.ro> wrote:
>
> On 27 May 2016 at 13:13, Itamar Turner-Trauring <itamar at itamarst.org>
> wrote:
>
> 2. They're doing one particular incompatibility at a time, rather than
>> "here's an assortment of random changes to a module that may or may not
>> port that module fully, who knows."
>>
>
> Some code parts don't have python 2.7 coverage .
> Is is still acceptable to touch that code ? :)
>
>
> No.  Test coverage is how we *know* that the behavior is the same on both
> versions of Python and we're not just hoping that it is.
>
>
> I was on a plane when I wrote this, and it may have been a bit overly
> terse.  Let me expand a little bit.
>
> The lines of code in a diff must be covered.  However, if one is porting,
> let's say, a 2000-line module with no test coverage to be importable under
> python 3, and 8 lines of code in that module need to change, *only those 8
> lines must be covered*.  Obviously, the tests should be as reasonable as
> possible and should not do anything too evil and gross to get those lines
> covered, but the author of the change hitting those lines is *not* responsible
> for a ground-up comprehensive test suite design for the entire module.
> They just need to write the bare minimum test coverage to ensure their
> changes are covered at all.  If you're making syntax changes, you also
> don't need to worry about getting those tests to actually pass on python3;
> it would be great to make smaller, individual changes which do the syntax
> first, then later actually start adding tests to the py3 suite.
>
> So please don't take this requirement for test coverage to mean that you
> have to embark on a major project to land these syntax fixes.  It would be
> great to have syntax fixes like this, and a bare minimum of very simple
> test coverage, just enough to exercise the lines in question, is perfectly
> adequate for such a small mechanical change.
>
>
Thanks for the guidance.

I have updated the python 3 porting wiki page
https://twistedmatrix.com/trac/wiki/Plan/Python3#Mechanicalchanges

Here is the diff
https://twistedmatrix.com/trac/wiki/Plan/Python3?sfp_email=&sfph_mail=&action=diff&version=81&old_version=80&sfp_email=&sfph_mail=


Regards,
Adi


-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160528/63a010b7/attachment.html>

From keturn at keturn.net  Mon May 30 11:37:38 2016
From: keturn at keturn.net (Kevin Turner)
Date: Mon, 30 May 2016 10:37:38 -0700
Subject: [Twisted-Python] dinner with Twisted on Tuesday (in Portland for
	PyCon)
Message-ID: <1464629858.3768953.622825945.243043A2@webmail.messagingengine.com>

Hi all,

Are you in Portland, Oregon this week? Perhaps for PyCon? Want to have
dinner with other people who want to have dinner with people who know
about Twisted?

WHERE:
McMenamins Broadway  Pub
1504 N.E. Broadway
Portland, OR 97232

http://www.mcmenamins.com/573-mcmenamins-on-broadway-menus

WHEN:
7:00pm, Tuesday, May 31

There may be some people gathering at the convention venue shortly
beforehand to all migrate over in a gaggle, but it's not far.

Send me a note if you're planning on coming so I can get an idea of the
head count,
and watch this space for updates.

Cheers!


From dansut at gmail.com  Tue May 31 15:21:49 2016
From: dansut at gmail.com (Daniel Sutcliffe)
Date: Tue, 31 May 2016 17:21:49 -0400
Subject: [Twisted-Python] Looking for help dealing with ClientService
	reconnections
In-Reply-To: <A88137BD-6D7C-4C39-B4CA-56832B4ECA1C@twistedmatrix.com>
References: <CADzPF4vD4yf64OHtf=H62BZrez7jewo_XSMDhP3YuabUQOwmZg@mail.gmail.com>
 <7A7DF935-F87C-4A60-84A7-69AF43894BC2@twistedmatrix.com>
 <CADzPF4u2jMxfoEn6oxhjLgoATZ=kacDuL4J2ji2-HYyH57bd_Q@mail.gmail.com>
 <A88137BD-6D7C-4C39-B4CA-56832B4ECA1C@twistedmatrix.com>
Message-ID: <CADzPF4vVs28PdjNDoDrnux8HXKwfz2hAzvAeaK4hB4PbFur4tA@mail.gmail.com>

Delayed response here but hopefully it is still seen as worthwhile
discussion, sorry if it is seems to just be beating a dead horse ;)

On May 10, 2016, at 9:52 AM, Daniel Sutcliffe <dansut at gmail.com> wrote:
> > Given the ClientService.whenConnected() method is intended to provide
> > access to my connected Protocol through the deferred it returns, is it
> > not a little unfriendly that this Protocol may turn out to be
> > disconnected? OK occasionally due to timing but for this to be a
> > possible condition which can loop with the same disconnected Protocol
> > returned until the ClientService has its _currentConnection set to
> > None, suggests to me that I can't safely use my Protocol from
> > whenConnected() for much other than as a notification the first
> > connection has occurred... but how do I avoid this?

> whenConnected() is not intended to be used for "give me each Protocol as it
> is instantiated so that state can be set up", it is intended for API clients
> which want to send a message to the current connection to just retrieve the
> current connection so they can call a method on it.

I appreciate now this 'protocol/connection init' isn't what the
whenConnected() method was intended for, and it wasn't what I was
using it for when I came across my issue. However there seems to me to
be no documentary discouragement for using it this way... at least for
someone who is not as familiar with Twisted's common usage patterns

> I'm not sure what you mean by "turn out to be disconnected".  The physical
> reality of networking is that you might always encounter a transport which
> has been disconnected but which you haven't received notification of its
> disconnection yet.

The 'turns out to be disconnected' actually came from my acceptance
that network connections drop/fail and I have little control of how or
when this happens. Thus I may call a method on a Protocol at any time
only to find that it is not in a good state to handle my request.

My (misguided) goal was to call a method of the Protocol returned from
whenConnected() every so often to give it a task to do; my expectation
being that *when* the connection failed I would find out from the task
method's returned deferred and could then just fire off another
ClientService whenConnected() to get the next useful Protocol once it
is established, and then use this to continue giving the Protocol
tasks until it also ultimately fails...

> > I have looked at the source and it seems to me the fact that the
> > connection has been lost should bubble up to the ClientService through
> > a t.a.i._DisconnectFactory and t.a.i._ReconnectingProtocolProxy once
> > my Protocol's connectionLost() is called. My issue seems to be that I
> > errback on a Protocol method's deferred returned to code at or above
> > the ClientService level which gives up on that Protocol and calls
> > whenConnected() to get the next one, only the Protocol's
> > connectionLost() has yet to be called and then doesn't have chance to
> > because my code is looping around calling whenConnected() and getting
> > the same Protocol back. I hope that makes sense :-/
>
> Let me try to rephrase: you call a protocol method which returns a Deferred;
> you add an errback to that Deferred which calls whenConnected() to re-try,
> but since the protocol hasn't disconnected yet, you get the same protocol
> instance back, which is useless to you.

Thanks Glyph, that seems like exactly what I was trying to say.

> > My Q on this is if I should be internally calling my Protocol's
> > connectionLost() so it can bubble up to the ClientService before I
> > errback on the Protocol method - whose responsibility is it to call
> > this?
>
> It's the framework's responsibility to call it.  You should not call it
> yourself.  Your Protocol's connectionLost isn't going to bubble up to
> ClientService anyway; you'd have to call your wrapper's connectionLost,
> which would confuse its internal state, since the framework would call it
> again right afterwards, and we definitely don't have test coverage for that,
> since the framework will normally only call it once.

I'm glad that I got this mostly right in my head - it didn't feel
right for me to be calling this, or any similar method I could find.

> The right way to handle this would be to introduce a delay between re-tries.
> It's generally a good idea to have such a delay for lots of reasons; you
> don't want to overload your peer in the case of a transient failure.  As a
> bonus, the fact that you've gone back up to the reactor loop to wait a while
> means that the transport will be properly disconnected and whenConnected()
> will do what you want.

I didn't even consider this as my thinking was along the lines of the
ClientService having the ability to handle the connection re-tries and
delays to avoid any overloading of the service it wraps.

It would be nice if there was something I could do in my Protocol task
method such that it didn't fire the errback on its deferred until its
Factory (and ultimately its Service in this case) had been made aware
the connection had failed. Does this not have to be done elsewhere in
Twisted or other projects using Twisted, or is the common pattern just
to introduce a delay to avoid any possible race condition?

My current intention is to have the Protocol's Factory handle the
assigning of tasks to its Protocol which seems the 'more normal'
direction to take, so any discussions above are purely for my
education and intellectual curiosity - I'm glad of any and all
feedback.

Cheers
/dan
-- 
Daniel Sutcliffe <dansut at gmail.com>


From kevin.horn at gmail.com  Sun May  1 13:02:07 2016
From: kevin.horn at gmail.com (Kevin Horn)
Date: Sun, 1 May 2016 14:02:07 -0500
Subject: [Twisted-Python] Changes to Twisted's Trac (GitHub
	Authentication)
In-Reply-To: <9C021F7C-297A-4D8D-8C47-32B66DC57FC1@atleastfornow.net>
References: <9C021F7C-297A-4D8D-8C47-32B66DC57FC1@atleastfornow.net>
Message-ID: <CA+U=zK2qB=qV-VQibPRS=1siM14=0Oa4_OJYntCfhQBqgFESTg@mail.gmail.com>

On Wed, Apr 27, 2016 at 6:13 AM, Amber "Hawkie" Brown <
hawkowl at atleastfornow.net> wrote:

> Hi everyone,
>
> If you've ever had your password eaten by our Trac instance, had your
> comment rejected by spambayes, or seen the amount of effort it takes
> removing random nulls from our htpasswd files, rejoice! With
> https://github.com/twisted-infra/braid/pull/192 , we are moving our Trac
> instance to log in using GitHub OAuth. This should mean we solve the issue
> of keeping passwords (making you and us more secure), being able to turn
> off the spam filter (as we don't have anonymous ticket submittal, and
> github is better at catching spammers than we are), and hopefully cause
> less ongoing issues with passwords suddenly not working.
>
> What this means for you is that your username and password will no longer
> work for logging into our Trac, you will need to authorise your GitHub
> login to access it. This means that you may have another username, please
> contact me privately and I will see what I can do about migrating any
> ticket histories over, if you feel like it is needed.
>
> - Amber
>
>
Fantastic!

--
Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160501/f2567f0c/attachment-0002.html>

From techtonik at gmail.com  Mon May  2 07:16:11 2016
From: techtonik at gmail.com (anatoly techtonik)
Date: Mon, 2 May 2016 16:16:11 +0300
Subject: [Twisted-Python] [MIGRATION COMPLETE] Changes to Twisted's Trac
 (GitHub Authentication)
In-Reply-To: <F5CE77AA-3475-47F2-BCD6-F6BA35314D0C@twistedmatrix.com>
References: <9C021F7C-297A-4D8D-8C47-32B66DC57FC1@atleastfornow.net>
 <4046BCB1-1EDA-44F7-A17B-7FEB0AB8BA33@atleastfornow.net>
 <F5CE77AA-3475-47F2-BCD6-F6BA35314D0C@twistedmatrix.com>
Message-ID: <CAPkN8xLd3gyh5L3Y-aENM=HKs=rs6UZ2a-gRT8Kdk2zg5vKrfg@mail.gmail.com>

On Wed, Apr 27, 2016 at 8:54 PM, Glyph <glyph at twistedmatrix.com> wrote:
>
> On Apr 27, 2016, at 4:45 AM, Amber Hawkie Brown <hawkowl at atleastfornow.net>
> wrote:
>
> I would like to note that this migration has now finished, and you can now
> log in via GitHub. Legacy logins have been disabled, and previous admin
> accounts (except for a current handful) have been revoked in the name of
> minimising our security surface; if you once had access to our Trac and
> would like to still use it, please let me know what your GitHub user account
> is, and I can set those permissions back up.
>
>
> Amazing! :-D.

+1

> I feel a disturbance in the force, as if a million spammers cried out, and
> were suddenly silenced :-).

More interesting is a disturbance caused by login fatigue relief for millions
of twisted users. =)



From dansut at gmail.com  Fri May  6 11:19:49 2016
From: dansut at gmail.com (Daniel Sutcliffe)
Date: Fri, 6 May 2016 13:19:49 -0400
Subject: [Twisted-Python] Looking for help dealing with ClientService
	reconnections
Message-ID: <CADzPF4vD4yf64OHtf=H62BZrez7jewo_XSMDhP3YuabUQOwmZg@mail.gmail.com>

Hello all, my first post here - only been using Twisted for about a
month and am also a relative newcomer to Python but have been coding
professionally for 20+ years. I was attracted to Twisted and Python
for a particular project purely because after research it seemed to be
the best tool for the job, and have actually been enjoying both Python
and Twisted much more than I ever thought I would.

The project I am coding towards is creating a sensor data collection
gateway. First iteration needs are simply pulling data from ModBus TCP
slave PLCs and writing it to a MySQL database, but goals beyond that
are making the source of the data and its destination(s) very
flexible(pluggable). Therefore I am trying to create a good clean
architecture from the outset so as I iterate forwards I don't finish
up having to take too many steps backwards before heading forwards.

I am using pymodbus to pull the data which works well for my devices,
has a twisted async API, and have created more than a few prototypes
that demonstrate all works as I expect. Where I am a bit stalled is
getting to grips with a good architecture that fulfills my needs - my
intention is that the application that meets my first goal will be a
twistd plugin.

The new ClientService class seems like it will fit my needs very
closely but I am struggling with how to handle the reconnections... I
have been using the whenConnected() method to grab the Protocol for
the initial connection and then use a method of this to poll the
connected slave. When the connection is lost I get an errback from
this method's deferred which I use as a signal to abandon the Protocol
and call whenConnected() again... at this point I have an issue though
as the returned deferred immediately gives me a callback with the same
Protocol which has just lost its connection, and thus loop...

Before I got on this mailing list I posted this Q to stackoverflow
with some example code:
    http://stackoverflow.com/q/37061807/3448214
but no solution or much attention there yet.

As I say there, I realize I have probably just made a bad pattern
choice for how to use this API, but I have not been able to work out a
better choice which seems clean and fits my needs/understanding well.
I have tried deriving my own Protocol/Factory and handling the polling
there but this seems to get really messy once I start to add code to
get the collected data to a destination at that level, involving
giving the Protocol too much knowledge of how the data is to be
handled.

Any advice, good patterns, or pointers to other projects which do
something similar is appreciated,
Cheers
/dan
-- 
Daniel Sutcliffe <dansut at gmail.com>



From kevinjacobconway at gmail.com  Sat May  7 13:19:46 2016
From: kevinjacobconway at gmail.com (Kevin Conway)
Date: Sat, 07 May 2016 19:19:46 +0000
Subject: [Twisted-Python] Looking for help dealing with ClientService
	reconnections
In-Reply-To: <CADzPF4vD4yf64OHtf=H62BZrez7jewo_XSMDhP3YuabUQOwmZg@mail.gmail.com>
References: <CADzPF4vD4yf64OHtf=H62BZrez7jewo_XSMDhP3YuabUQOwmZg@mail.gmail.com>
Message-ID: <CAKF=+diikQ3scC_naf+Zat3f+Wu48o7JtyqGr5O9iFjreG6Bjw@mail.gmail.com>

I'm still working through your code example and trying to get a better
grasp of what, exactly, you're trying to implement as far as client
behavior is concerned. In the meantime, it sounds, on the surface, like you
are trying to implement a form of the ReconnectingClientFactory:
http://twistedmatrix.com/documents/current/api/twisted.internet.protocol.ReconnectingClientFactory.html
.

Your client protocol must be factory aware and call the resetDelay method
on the factory when a connection is made, but the factory will handle
reconnecting and generating a new protocol instance. Is that similar to
what you are trying to accomplish? Maybe see also
http://twistedmatrix.com/documents/current/core/howto/clients.html#reconnection
for a quick example of using the reconnecting factory.
On Fri, May 6, 2016, 12:23 Daniel Sutcliffe <dansut at gmail.com> wrote:

> Hello all, my first post here - only been using Twisted for about a
> month and am also a relative newcomer to Python but have been coding
> professionally for 20+ years. I was attracted to Twisted and Python
> for a particular project purely because after research it seemed to be
> the best tool for the job, and have actually been enjoying both Python
> and Twisted much more than I ever thought I would.
>
> The project I am coding towards is creating a sensor data collection
> gateway. First iteration needs are simply pulling data from ModBus TCP
> slave PLCs and writing it to a MySQL database, but goals beyond that
> are making the source of the data and its destination(s) very
> flexible(pluggable). Therefore I am trying to create a good clean
> architecture from the outset so as I iterate forwards I don't finish
> up having to take too many steps backwards before heading forwards.
>
> I am using pymodbus to pull the data which works well for my devices,
> has a twisted async API, and have created more than a few prototypes
> that demonstrate all works as I expect. Where I am a bit stalled is
> getting to grips with a good architecture that fulfills my needs - my
> intention is that the application that meets my first goal will be a
> twistd plugin.
>
> The new ClientService class seems like it will fit my needs very
> closely but I am struggling with how to handle the reconnections... I
> have been using the whenConnected() method to grab the Protocol for
> the initial connection and then use a method of this to poll the
> connected slave. When the connection is lost I get an errback from
> this method's deferred which I use as a signal to abandon the Protocol
> and call whenConnected() again... at this point I have an issue though
> as the returned deferred immediately gives me a callback with the same
> Protocol which has just lost its connection, and thus loop...
>
> Before I got on this mailing list I posted this Q to stackoverflow
> with some example code:
>     http://stackoverflow.com/q/37061807/3448214
> but no solution or much attention there yet.
>
> As I say there, I realize I have probably just made a bad pattern
> choice for how to use this API, but I have not been able to work out a
> better choice which seems clean and fits my needs/understanding well.
> I have tried deriving my own Protocol/Factory and handling the polling
> there but this seems to get really messy once I start to add code to
> get the collected data to a destination at that level, involving
> giving the Protocol too much knowledge of how the data is to be
> handled.
>
> Any advice, good patterns, or pointers to other projects which do
> something similar is appreciated,
> Cheers
> /dan
> --
> Daniel Sutcliffe <dansut at gmail.com>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160507/b0b7a0a2/attachment-0002.html>

From glyph at twistedmatrix.com  Sat May  7 16:30:55 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 7 May 2016 15:30:55 -0700
Subject: [Twisted-Python] Looking for help dealing with ClientService
	reconnections
In-Reply-To: <CAKF=+diikQ3scC_naf+Zat3f+Wu48o7JtyqGr5O9iFjreG6Bjw@mail.gmail.com>
References: <CADzPF4vD4yf64OHtf=H62BZrez7jewo_XSMDhP3YuabUQOwmZg@mail.gmail.com>
 <CAKF=+diikQ3scC_naf+Zat3f+Wu48o7JtyqGr5O9iFjreG6Bjw@mail.gmail.com>
Message-ID: <45C5F0C8-88C8-49B7-B487-302456B54556@twistedmatrix.com>


> On May 7, 2016, at 12:19 PM, Kevin Conway <kevinjacobconway at gmail.com> wrote:
> 
> I'm still working through your code example and trying to get a better grasp of what, exactly, you're trying to implement as far as client behavior is concerned. In the meantime, it sounds, on the surface, like you are trying to implement a form of the ReconnectingClientFactory: http://twistedmatrix.com/documents/current/api/twisted.internet.protocol.ReconnectingClientFactory.html <http://twistedmatrix.com/documents/current/api/twisted.internet.protocol.ReconnectingClientFactory.html>.
> 

Just to clear up this point: ReconnectingClientFactory is the old, bad way of doing things, that only works with connectTCP/connectSSL/connectUNIX et. al., and not with endpoints.  ClientService <https://twistedmatrix.com/documents/16.1.1/api/twisted.application.internet.ClientService.html> is the new, good way, only available since the latest release.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160507/bd78f16e/attachment-0002.html>

From kevinjacobconway at gmail.com  Sat May  7 17:02:17 2016
From: kevinjacobconway at gmail.com (Kevin Conway)
Date: Sat, 07 May 2016 23:02:17 +0000
Subject: [Twisted-Python] Looking for help dealing with ClientService
	reconnections
In-Reply-To: <45C5F0C8-88C8-49B7-B487-302456B54556@twistedmatrix.com>
References: <CADzPF4vD4yf64OHtf=H62BZrez7jewo_XSMDhP3YuabUQOwmZg@mail.gmail.com>
 <CAKF=+diikQ3scC_naf+Zat3f+Wu48o7JtyqGr5O9iFjreG6Bjw@mail.gmail.com>
 <45C5F0C8-88C8-49B7-B487-302456B54556@twistedmatrix.com>
Message-ID: <CAKF=+diS1aLt37t7-6=EE+NLg8uANigyJzMHo3jB76DgTOoHAQ@mail.gmail.com>

Thanks, glyph, for the correction. Also, thanks for reminding me that I'm
still living in twisted's past...

On Sat, May 7, 2016, 17:33 Glyph <glyph at twistedmatrix.com> wrote:

>
> On May 7, 2016, at 12:19 PM, Kevin Conway <kevinjacobconway at gmail.com>
> wrote:
>
> I'm still working through your code example and trying to get a better
> grasp of what, exactly, you're trying to implement as far as client
> behavior is concerned. In the meantime, it sounds, on the surface, like you
> are trying to implement a form of the ReconnectingClientFactory:
> http://twistedmatrix.com/documents/current/api/twisted.internet.protocol.ReconnectingClientFactory.html
> .
>
>
> Just to clear up this point: ReconnectingClientFactory is the old, bad way
> of doing things, that only works with connectTCP/connectSSL/connectUNIX et.
> al., and not with endpoints.  ClientService <
> https://twistedmatrix.com/documents/16.1.1/api/twisted.application.internet.ClientService.html>
> is the new, good way, only available since the latest release.
>
> -glyph
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160507/7a25fd77/attachment-0002.html>

From glyph at twistedmatrix.com  Sat May  7 19:58:46 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 7 May 2016 18:58:46 -0700
Subject: [Twisted-Python] Looking for help dealing with ClientService
	reconnections
In-Reply-To: <CAKF=+diS1aLt37t7-6=EE+NLg8uANigyJzMHo3jB76DgTOoHAQ@mail.gmail.com>
References: <CADzPF4vD4yf64OHtf=H62BZrez7jewo_XSMDhP3YuabUQOwmZg@mail.gmail.com>
 <CAKF=+diikQ3scC_naf+Zat3f+Wu48o7JtyqGr5O9iFjreG6Bjw@mail.gmail.com>
 <45C5F0C8-88C8-49B7-B487-302456B54556@twistedmatrix.com>
 <CAKF=+diS1aLt37t7-6=EE+NLg8uANigyJzMHo3jB76DgTOoHAQ@mail.gmail.com>
Message-ID: <5F4E39DE-CBE0-4894-ABE5-350946489A89@twistedmatrix.com>

> On May 7, 2016, at 4:02 PM, Kevin Conway <kevinjacobconway at gmail.com> wrote:
> 
> Thanks, glyph, for the correction. Also, thanks for reminding me that I'm still living in twisted's past...
> 
Just a reminder that there's always cool new stuff on the horizon :).

In addition to just working with endpoints, the interface to ClientService is also a bit more flexible and testable, since the retry policy is implemented by a completely separate object from the service itself.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160507/e6da3459/attachment-0002.html>

From hawkowl at atleastfornow.net  Mon May  9 08:25:14 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Mon, 9 May 2016 22:25:14 +0800
Subject: [Twisted-Python] Twisted 16.2.0pre1 Release Announcement
Message-ID: <C8564EFB-FC4D-40F0-8FE9-D27FB28EFF6A@atleastfornow.net>

Hi everyone! Time for another Twisted prerelease!

Our release cadence stays steady, and this prerelease should bring some new nice features! The highlights include:

- twisted.protocols.haproxy.proxyEndpoint, a wrapper endpoint that gives some extra information to the wrapped protocols passed by haproxy;
- Migration of twistd and other twisted.application.app users to the new logging system (twisted.logger);
- Porting of parts of Twisted Names' server to Python 3;
- The removal of the very old MSN client code and the deprecation of the unmaintained ICQ/OSCAR client code;
- More cleanups in Conch in preparation for a Python 3 port and cleanups in HTTP code in preparation for HTTP/2 support;
- Over thirty tickets overall closed since 16.1.

For more information, check the NEWS file (link provided below).

As usual, it's available for download -- go here (https://twistedmatrix.com/Releases/pre/16.2.0pre1/) to get the prerelease tarballs and the full NEWS file.

Please let me know if you have any issues, as well as if you don't! If everything works well, that's a good thing for me to know :)

Twisted Regards,
Amber Brown (HawkOwl)

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20160509/9bac421f/attachment.sig>

From dansut at gmail.com  Mon May  9 14:09:39 2016
From: dansut at gmail.com (Daniel Sutcliffe)
Date: Mon, 9 May 2016 16:09:39 -0400
Subject: [Twisted-Python] Looking for help dealing with ClientService
	reconnections
In-Reply-To: <CAKF=+diikQ3scC_naf+Zat3f+Wu48o7JtyqGr5O9iFjreG6Bjw@mail.gmail.com>
References: <CADzPF4vD4yf64OHtf=H62BZrez7jewo_XSMDhP3YuabUQOwmZg@mail.gmail.com>
 <CAKF=+diikQ3scC_naf+Zat3f+Wu48o7JtyqGr5O9iFjreG6Bjw@mail.gmail.com>
Message-ID: <CADzPF4t8ZDo7pX+zVFVHvw9o1qVQW3Vc+uRT=2yf-RJrQ745XQ@mail.gmail.com>

Thanks for the response Kevin, a few individual replies embedded below:

On Sat, May 7, 2016 at 3:19 PM, Kevin Conway <kevinjacobconway at gmail.com> wrote:
> I'm still working through your code example and trying to get a better grasp
> of what, exactly, you're trying to implement as far as client behavior is
> concerned. In the meantime, it sounds, on the surface, like you are trying
> to implement a form of the ReconnectingClientFactory:
> http://twistedmatrix.com/documents/current/api/twisted.internet.protocol.ReconnectingClientFactory.html.

pymodbus actually has a pymodbus.client.async.ModbusClientFactory
which is derived from
twisted.internet.protocol.ReconnectingClientFactory
  http://pymodbus.readthedocs.io/en/latest/library/async-client.html

> Your client protocol must be factory aware and call the resetDelay method on
> the factory when a connection is made, but the factory will handle
> reconnecting and generating a new protocol instance. Is that similar to what
> you are trying to accomplish? Maybe see also
> http://twistedmatrix.com/documents/current/core/howto/clients.html#reconnection
> for a quick example of using the reconnecting factory.

I had built working tests using the docs you link to and understand
the way it works, but when Twisted 16.1 came out I decided that as I
was writing fresh code I probably ought to use the suggested new API.
After reading up and checking the source for ClientService it seemed
just what I was after; offering the advantages that Glyph mentioned,
and simplifying the amount of code I had to write (and maintain),
especially as my intention was to use twistd and thus Services.

It was only when I started to implement this that I felt my
inexperience with Twisted's ways of doing things was holding me back
and couldn't see a clear direction of how to build my architecture
around it.

Initially I used my own Protocol class derived from
pymodbus.client.async.ModbusClientProtocol that handled the polling
internally with a Factory that was aware of this class based on
ClientFactory (not ReconnectingClientFactory) that stored the
persistent info (poll rate, etc). This worked well with ClientService
and reconnections happened as expected but once I started to try and
evolve my code to consolidate (from many ClientServices polling
various PLCs) and write out the data (to MySQL) the model felt like
the focus was in the wrong place and that maybe I should be focussing
more on making a derivation of the ClientService have more control of
the polling and just using the Protocol provided by pymodbus as-is.

After hitting the problem I described below, I decided it was time to
ask those with more Twisted experience what the most appropriate way
to approach this problem was. Am I better off going back to doing
polling in Protocol with a Factory that provides ways to pump the data
back upstream to where it needs to be consolidated, and not rolling my
own ClientService to control it? or do I just need a better way of
getting my ClientService to be aware of the latest connection? Maybe
there's a pathway in between, or even something I haven't yet thought
of?

If anyone does have the time and desire to help me with this but feels
they need more info from me or background then please just ask, and I
will provide and be most appreciative :)

Cheers
/dan

On Fri, May 6, 2016, 12:23 Daniel Sutcliffe <dansut at gmail.com> wrote:
>> Hello all, my first post here - only been using Twisted for about a
>> month and am also a relative newcomer to Python but have been coding
>> professionally for 20+ years. I was attracted to Twisted and Python
>> for a particular project purely because after research it seemed to be
>> the best tool for the job, and have actually been enjoying both Python
>> and Twisted much more than I ever thought I would.
>>
>> The project I am coding towards is creating a sensor data collection
>> gateway. First iteration needs are simply pulling data from ModBus TCP
>> slave PLCs and writing it to a MySQL database, but goals beyond that
>> are making the source of the data and its destination(s) very
>> flexible(pluggable). Therefore I am trying to create a good clean
>> architecture from the outset so as I iterate forwards I don't finish
>> up having to take too many steps backwards before heading forwards.
>>
>> I am using pymodbus to pull the data which works well for my devices,
>> has a twisted async API, and have created more than a few prototypes
>> that demonstrate all works as I expect. Where I am a bit stalled is
>> getting to grips with a good architecture that fulfills my needs - my
>> intention is that the application that meets my first goal will be a
>> twistd plugin.
>>
>> The new ClientService class seems like it will fit my needs very
>> closely but I am struggling with how to handle the reconnections... I
>> have been using the whenConnected() method to grab the Protocol for
>> the initial connection and then use a method of this to poll the
>> connected slave. When the connection is lost I get an errback from
>> this method's deferred which I use as a signal to abandon the Protocol
>> and call whenConnected() again... at this point I have an issue though
>> as the returned deferred immediately gives me a callback with the same
>> Protocol which has just lost its connection, and thus loop...
>>
>> Before I got on this mailing list I posted this Q to stackoverflow
>> with some example code:
>>     http://stackoverflow.com/q/37061807/3448214
>> but no solution or much attention there yet.
>>
>> As I say there, I realize I have probably just made a bad pattern
>> choice for how to use this API, but I have not been able to work out a
>> better choice which seems clean and fits my needs/understanding well.
>> I have tried deriving my own Protocol/Factory and handling the polling
>> there but this seems to get really messy once I start to add code to
>> get the collected data to a destination at that level, involving
>> giving the Protocol too much knowledge of how the data is to be
>> handled.
>>
>> Any advice, good patterns, or pointers to other projects which do
>> something similar is appreciated,
-- 
Daniel Sutcliffe <dansut at gmail.com>



From glyph at twistedmatrix.com  Mon May  9 14:31:26 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 9 May 2016 13:31:26 -0700
Subject: [Twisted-Python] Twisted 16.2.0pre1 Release Announcement
In-Reply-To: <C8564EFB-FC4D-40F0-8FE9-D27FB28EFF6A@atleastfornow.net>
References: <C8564EFB-FC4D-40F0-8FE9-D27FB28EFF6A@atleastfornow.net>
Message-ID: <FC120368-1387-412C-A39A-CAC966FECB2E@twistedmatrix.com>


> On May 9, 2016, at 7:25 AM, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
> 
> Hi everyone! Time for another Twisted prerelease!

Hooray!

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160509/0a8b66f6/attachment-0002.html>

From dansut at gmail.com  Mon May  9 14:50:39 2016
From: dansut at gmail.com (Daniel Sutcliffe)
Date: Mon, 9 May 2016 16:50:39 -0400
Subject: [Twisted-Python] Persuading Python's Logging to use twisted.logger
Message-ID: <CADzPF4sMzLe4-HVpt=Dv3vv-BvzC9EKrBrHTZedLddwVoBb1Qg@mail.gmail.com>

The project I am working on uses pymodbus which I am sure shares a
fairly common attribute with many other modules of using Python's
standard Logging mechanism - a very reasonable choice even for a
module that supports Twisted, the library can also be used entirely
synchronously and thus would not want a required dependency of
Twisted.

It struck me that it would be great to be able to redirect the
standard logging library to use twisted.logger by some sort of 'Clever
Monkey Patching' and that this may be a relatively common
requirement... however after extensive searching, and asking on the
pymodbus list, I can't find any evidence that such a thing has ever
been attempted or discussed.

The reverse mechanism of sending twisted.logger's output to the
standard library is of course handled by the
twisted.logger.STDLibLogObserver (and similar in twisted legacy
logging) but the documentation for this even suggests why this is a
bad idea: 'Warning: specific logging configurations (example: network)
can lead to this observer blocking.' which seems to me why it would be
better to attempt this the other way around...

Am I crazy to even think this? is it just the rambling of
Python/Twisted newb? Or is there something I'm missing that would make
this impossible to do generically, and awkward to provide a vague
recipe of how to do?

I do appreciate that twisted.logger offers a more feature rich
(structured) API and the Logging API would only be able to provide
level and text but it would be better than loosing any possibly useful
log messages from used modules in my mind.

If anyone can enlighten me I would be most appreciative,
Cheers
/dan
-- 
Daniel Sutcliffe <dansut at gmail.com>



From jeff at ocjtech.us  Mon May  9 15:54:34 2016
From: jeff at ocjtech.us (Jeffrey Ollie)
Date: Mon, 9 May 2016 16:54:34 -0500
Subject: [Twisted-Python] Persuading Python's Logging to use
	twisted.logger
In-Reply-To: <CADzPF4sMzLe4-HVpt=Dv3vv-BvzC9EKrBrHTZedLddwVoBb1Qg@mail.gmail.com>
References: <CADzPF4sMzLe4-HVpt=Dv3vv-BvzC9EKrBrHTZedLddwVoBb1Qg@mail.gmail.com>
Message-ID: <CAD-DQxQjTqrGdKqOhHjKVUK2AYe=ROtpS-QqX==bTEJqXMe66g@mail.gmail.com>

Here's a snippet that shows how I've handled it.  This example uses the new
style of logging in Twisted but would work just as well in the old style.
I'm not sure if there's a label that you can supply to the logging.Handler
to handle all messages but that's probably just a matter of digging into
the source code.

import sys
import logging

from twisted.logger import Logger
from twisted.logger import globalLogBeginner
from twisted.logger import textFileLogObserver

class TxLogHandler(logging.Handler):
    log = Logger()

    def __init__(self, label):
        self.label = label
        logging.Handler.__init__(self)
        self.level = logging.DEBUG

    def flush(self):
        pass

    def emit(self, record):
        try:
            msg = self.format(record)
            self.log.debug('{msg:}', msg = '\n'.join(map(lambda line: '{}:
{}'.format(self.label, line), msg.split('\n'))))
        except:
            self.handleError(record)

tx = TxLogHandler('FastAGI')
logger = logging.getLogger('FastAGI')
logger.addHandler(tx)
logger.setLevel(logging.DEBUG)

tx = TxLogHandler('AMI')
logger = logging.getLogger('AMI')
logger.addHandler(tx)
logger.setLevel(logging.DEBUG)

output = textFileLogObserver(sys.stderr)
globalLogBeginner.beginLoggingTo([output])



On Mon, May 9, 2016 at 3:50 PM, Daniel Sutcliffe <dansut at gmail.com> wrote:

> The project I am working on uses pymodbus which I am sure shares a
> fairly common attribute with many other modules of using Python's
> standard Logging mechanism - a very reasonable choice even for a
> module that supports Twisted, the library can also be used entirely
> synchronously and thus would not want a required dependency of
> Twisted.
>
> It struck me that it would be great to be able to redirect the
> standard logging library to use twisted.logger by some sort of 'Clever
> Monkey Patching' and that this may be a relatively common
> requirement... however after extensive searching, and asking on the
> pymodbus list, I can't find any evidence that such a thing has ever
> been attempted or discussed.
>
> The reverse mechanism of sending twisted.logger's output to the
> standard library is of course handled by the
> twisted.logger.STDLibLogObserver (and similar in twisted legacy
> logging) but the documentation for this even suggests why this is a
> bad idea: 'Warning: specific logging configurations (example: network)
> can lead to this observer blocking.' which seems to me why it would be
> better to attempt this the other way around...
>
> Am I crazy to even think this? is it just the rambling of
> Python/Twisted newb? Or is there something I'm missing that would make
> this impossible to do generically, and awkward to provide a vague
> recipe of how to do?
>
> I do appreciate that twisted.logger offers a more feature rich
> (structured) API and the Logging API would only be able to provide
> level and text but it would be better than loosing any possibly useful
> log messages from used modules in my mind.
>
> If anyone can enlighten me I would be most appreciative,
> Cheers
> /dan
> --
> Daniel Sutcliffe <dansut at gmail.com>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Jeff Ollie
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160509/351b8b8a/attachment-0002.html>

From glyph at twistedmatrix.com  Mon May  9 16:16:17 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 9 May 2016 15:16:17 -0700
Subject: [Twisted-Python] Persuading Python's Logging to use
	twisted.logger
In-Reply-To: <CADzPF4sMzLe4-HVpt=Dv3vv-BvzC9EKrBrHTZedLddwVoBb1Qg@mail.gmail.com>
References: <CADzPF4sMzLe4-HVpt=Dv3vv-BvzC9EKrBrHTZedLddwVoBb1Qg@mail.gmail.com>
Message-ID: <1EAFEEFD-A20D-45D7-8950-D34FBDADCA46@twistedmatrix.com>


> On May 9, 2016, at 1:50 PM, Daniel Sutcliffe <dansut at gmail.com> wrote:
> 
> The project I am working on uses pymodbus which I am sure shares a
> fairly common attribute with many other modules of using Python's
> standard Logging mechanism - a very reasonable choice even for a
> module that supports Twisted, the library can also be used entirely
> synchronously and thus would not want a required dependency of
> Twisted.

Sure, this makes sense.

> It struck me that it would be great to be able to redirect the
> standard logging library to use twisted.logger by some sort of 'Clever
> Monkey Patching' and that this may be a relatively common
> requirement... however after extensive searching, and asking on the
> pymodbus list, I can't find any evidence that such a thing has ever
> been attempted or discussed.

You shouldn't need monkey patching; the standard library logger does have facilities for setting up custom handlers.  We just need to make one.  Honestly it would be great if this were featured within Twisted itself; it would make a great contribution to twisted.logger proper.

> The reverse mechanism of sending twisted.logger's output to the
> standard library is of course handled by the
> twisted.logger.STDLibLogObserver (and similar in twisted legacy
> logging) but the documentation for this even suggests why this is a
> bad idea: 'Warning: specific logging configurations (example: network)
> can lead to this observer blocking.' which seems to me why it would be
> better to attempt this the other way around...

I would very much like to see this :).  The standard library logging mechanism is in common use, and until we can spin it out into a separate project, `twisted.logger´ is unlikely to 

> Am I crazy to even think this? is it just the rambling of
> Python/Twisted newb? Or is there something I'm missing that would make
> this impossible to do generically, and awkward to provide a vague
> recipe of how to do?

No, there's nothing that would make it impossible.  If you want to contribute it.

> I do appreciate that twisted.logger offers a more feature rich
> (structured) API and the Logging API would only be able to provide
> level and text but it would be better than loosing any possibly useful
> log messages from used modules in my mind.

I think you might even be able to claw back some structured information out of the stdlib logging machinery?  LogRecord does have 'args' and 'msg', and we could convert that into a twisted.logger format string.  This would be more expensive than using twisted.logger directly of course, but it would still provide a lot more useful information.

> If anyone can enlighten me I would be most appreciative,

I think just try to write a Handler (<https://docs.python.org/2.7/library/logging.handlers.html#module-logging.handlers>) that converts LogRecord objects to event dictionaries, and then emit them to a <https://twistedmatrix.com/documents/16.1.1/api/twisted.logger.ILogObserver.html> and let us know if you hit any problems.

-glyph




From glyph at twistedmatrix.com  Mon May  9 16:19:57 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 9 May 2016 15:19:57 -0700
Subject: [Twisted-Python] Looking for help dealing with ClientService
	reconnections
In-Reply-To: <CADzPF4vD4yf64OHtf=H62BZrez7jewo_XSMDhP3YuabUQOwmZg@mail.gmail.com>
References: <CADzPF4vD4yf64OHtf=H62BZrez7jewo_XSMDhP3YuabUQOwmZg@mail.gmail.com>
Message-ID: <7A7DF935-F87C-4A60-84A7-69AF43894BC2@twistedmatrix.com>


> On May 6, 2016, at 10:19 AM, Daniel Sutcliffe <dansut at gmail.com> wrote:
> 
> Hello all, my first post here - only been using Twisted for about a
> month and am also a relative newcomer to Python but have been coding
> professionally for 20+ years. I was attracted to Twisted and Python
> for a particular project purely because after research it seemed to be
> the best tool for the job, and have actually been enjoying both Python
> and Twisted much more than I ever thought I would.
> 
> The project I am coding towards is creating a sensor data collection
> gateway. First iteration needs are simply pulling data from ModBus TCP
> slave PLCs and writing it to a MySQL database, but goals beyond that
> are making the source of the data and its destination(s) very
> flexible(pluggable). Therefore I am trying to create a good clean
> architecture from the outset so as I iterate forwards I don't finish
> up having to take too many steps backwards before heading forwards.
> 
> I am using pymodbus to pull the data which works well for my devices,
> has a twisted async API, and have created more than a few prototypes
> that demonstrate all works as I expect. Where I am a bit stalled is
> getting to grips with a good architecture that fulfills my needs - my
> intention is that the application that meets my first goal will be a
> twistd plugin.
> 
> The new ClientService class seems like it will fit my needs very
> closely but I am struggling with how to handle the reconnections... I
> have been using the whenConnected() method to grab the Protocol for
> the initial connection and then use a method of this to poll the
> connected slave. When the connection is lost I get an errback from
> this method's deferred which I use as a signal to abandon the Protocol
> and call whenConnected() again... at this point I have an issue though
> as the returned deferred immediately gives me a callback with the same
> Protocol which has just lost its connection, and thus loop...

If you want a hook each time a new protocol is created, you're probably better off writing a wrapper protocol factory, and passing that to your ClientService, then doing any set-up work you want to do in your buildProtocol implementation, which delegates to the real, pymodbus implementation.

> Before I got on this mailing list I posted this Q to stackoverflow
> with some example code:
>    http://stackoverflow.com/q/37061807/3448214
> but no solution or much attention there yet.
> 
> As I say there, I realize I have probably just made a bad pattern
> choice for how to use this API, but I have not been able to work out a
> better choice which seems clean and fits my needs/understanding well.
> I have tried deriving my own Protocol/Factory and handling the polling
> there but this seems to get really messy once I start to add code to
> get the collected data to a destination at that level, involving
> giving the Protocol too much knowledge of how the data is to be
> handled.

I am curious as to why you say that this is "messy".

> Any advice, good patterns, or pointers to other projects which do
> something similar is appreciated,

I spent a while thinking about your question, and I'm sorry that I can't give a more thorough answer, but I think you need to be a bit more specific about what it is you don't like about your potential solution.  It seems to me that having a delegating Factory, especially if all you need to do is set up some state on each Protocol that gets produced, should be sufficient...

-glyph


From kevinjacobconway at gmail.com  Mon May  9 19:16:35 2016
From: kevinjacobconway at gmail.com (Kevin Conway)
Date: Tue, 10 May 2016 01:16:35 +0000
Subject: [Twisted-Python] Persuading Python's Logging to use
	twisted.logger
In-Reply-To: <1EAFEEFD-A20D-45D7-8950-D34FBDADCA46@twistedmatrix.com>
References: <CADzPF4sMzLe4-HVpt=Dv3vv-BvzC9EKrBrHTZedLddwVoBb1Qg@mail.gmail.com>
 <1EAFEEFD-A20D-45D7-8950-D34FBDADCA46@twistedmatrix.com>
Message-ID: <CAKF=+dg++V8GsoP78zOmO10ycxePVZsS+ph_K+bG8kqnNrc1LA@mail.gmail.com>

> The reverse mechanism of sending twisted.logger's output to the
> standard library is of course handled by the
> twisted.logger.STDLibLogObserver (and similar in twisted legacy
> logging) but the documentation for this even suggests why this is a
> bad idea: 'Warning: specific logging configurations (example: network)
> can lead to this observer blocking.' which seems to me why it would be
> better to attempt this the other way around...

The warning in the documentation about the potential blocking behaviour of
the StdLibLogObserver is correct, but it does tip a little close to FUD. If
you are using the Syslog or File based log observers then there is no
change in "blocking" behaviour between Twisted and the standard lib. The
Syslog observer and the standard library syslog facility both use exactly
the same standard library syslog module which is known to block under
certain system configurations. The File observer in Twisted and the
standard library both use regular Python file objects that don't leverage
the reactor in any way. Likewise, logging to STDIN/STDERR in both logging
frameworks treats the streams like normal file objects which, when
subjected to back pressure, become a source of blocking time. The only
cases where Twisted and the standard lib differ would be network based
logging.

My recommendation is to use the STdLibLogObserver. This will allow you to
use the twisted.logger in your Twisted code, merge Twisted and non-Twisted
logs into a single stream regardless of their origin, and allow you to tap
into things like the standard lib RotatingFileHandler and file based
configuration system. Should you actually need to pipe logs over the
network it would not be overly difficult to implement a standard lib
logging transport that leverages the reactor when sending data.

On Mon, May 9, 2016 at 5:18 PM Glyph <glyph at twistedmatrix.com> wrote:

>
> > On May 9, 2016, at 1:50 PM, Daniel Sutcliffe <dansut at gmail.com> wrote:
> >
> > The project I am working on uses pymodbus which I am sure shares a
> > fairly common attribute with many other modules of using Python's
> > standard Logging mechanism - a very reasonable choice even for a
> > module that supports Twisted, the library can also be used entirely
> > synchronously and thus would not want a required dependency of
> > Twisted.
>
> Sure, this makes sense.
>
> > It struck me that it would be great to be able to redirect the
> > standard logging library to use twisted.logger by some sort of 'Clever
> > Monkey Patching' and that this may be a relatively common
> > requirement... however after extensive searching, and asking on the
> > pymodbus list, I can't find any evidence that such a thing has ever
> > been attempted or discussed.
>
> You shouldn't need monkey patching; the standard library logger does have
> facilities for setting up custom handlers.  We just need to make one.
> Honestly it would be great if this were featured within Twisted itself; it
> would make a great contribution to twisted.logger proper.
>
> > The reverse mechanism of sending twisted.logger's output to the
> > standard library is of course handled by the
> > twisted.logger.STDLibLogObserver (and similar in twisted legacy
> > logging) but the documentation for this even suggests why this is a
> > bad idea: 'Warning: specific logging configurations (example: network)
> > can lead to this observer blocking.' which seems to me why it would be
> > better to attempt this the other way around...
>
> I would very much like to see this :).  The standard library logging
> mechanism is in common use, and until we can spin it out into a separate
> project, `twisted.logger´ is unlikely to
>
> > Am I crazy to even think this? is it just the rambling of
> > Python/Twisted newb? Or is there something I'm missing that would make
> > this impossible to do generically, and awkward to provide a vague
> > recipe of how to do?
>
> No, there's nothing that would make it impossible.  If you want to
> contribute it.
>
> > I do appreciate that twisted.logger offers a more feature rich
> > (structured) API and the Logging API would only be able to provide
> > level and text but it would be better than loosing any possibly useful
> > log messages from used modules in my mind.
>
> I think you might even be able to claw back some structured information
> out of the stdlib logging machinery?  LogRecord does have 'args' and 'msg',
> and we could convert that into a twisted.logger format string.  This would
> be more expensive than using twisted.logger directly of course, but it
> would still provide a lot more useful information.
>
> > If anyone can enlighten me I would be most appreciative,
>
> I think just try to write a Handler (<
> https://docs.python.org/2.7/library/logging.handlers.html#module-logging.handlers>)
> that converts LogRecord objects to event dictionaries, and then emit them
> to a <
> https://twistedmatrix.com/documents/16.1.1/api/twisted.logger.ILogObserver.html>
> and let us know if you hit any problems.
>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160510/41971901/attachment-0002.html>

From burak.arslan at arskom.com.tr  Mon May  9 23:22:18 2016
From: burak.arslan at arskom.com.tr (Burak Arslan)
Date: Tue, 10 May 2016 08:22:18 +0300
Subject: [Twisted-Python] Persuading Python's Logging to use
 twisted.logger
In-Reply-To: <CADzPF4sMzLe4-HVpt=Dv3vv-BvzC9EKrBrHTZedLddwVoBb1Qg@mail.gmail.com>
References: <CADzPF4sMzLe4-HVpt=Dv3vv-BvzC9EKrBrHTZedLddwVoBb1Qg@mail.gmail.com>
Message-ID: <93ae72c6-c942-73c6-e119-2c92764c30b3@arskom.com.tr>

hello,

On 05/09/16 23:50, Daniel Sutcliffe wrote:
> The project I am working on uses pymodbus which I am sure shares a
> fairly common attribute with many other modules of using Python's
> standard Logging mechanism - a very reasonable choice even for a
> module that supports Twisted, the library can also be used entirely
> synchronously and thus would not want a required dependency of
> Twisted.
>
> It struck me that it would be great to be able to redirect the
> standard logging library to use twisted.logger

me too :)

> 'Warning: specific logging configurations (example: network)
> can lead to this observer blocking.' which seems to me why it would be
> better to attempt this the other way around...

as discussed, it's possible. you additionally need to make sure to clean
other handlers if you are integrating with third party libraries who may
be adding esoteric targets for log entries behind your back.

with that said, here's my take at it:

https://github.com/plq/neurons/blob/40dff6134330aeadbefd3973d5d40aa4bfac4b78/neurons/daemon/config.py#L673

best,
burak



From hawkowl at atleastfornow.net  Tue May 10 04:16:02 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Tue, 10 May 2016 18:16:02 +0800
Subject: [Twisted-Python] [INFRASTRUCTURE OUTAGE] Moving from SVN to Git
Message-ID: <F46EE585-5445-400C-AF97-873FF3BE18F5@atleastfornow.net>

Hi everyone!

It's finally time to pull the trigger on this.

Twisted's Trac may be down intermittently in the next few hours as I do the migration.

- Amber
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20160510/f4544964/attachment.sig>

From hawkowl at atleastfornow.net  Tue May 10 10:29:43 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Wed, 11 May 2016 00:29:43 +0800
Subject: [Twisted-Python] [ALL OK] [INFRASTRUCTURE OUTAGE] Moving from SVN
	to Git
In-Reply-To: <F46EE585-5445-400C-AF97-873FF3BE18F5@atleastfornow.net>
References: <F46EE585-5445-400C-AF97-873FF3BE18F5@atleastfornow.net>
Message-ID: <88621B3B-EDDC-4C7E-A98B-0572179616E8@atleastfornow.net>

Hi everyone!

Twisted infra is now back up and kicking, and we've moved to https://github.com/twisted/twisted as our "authoritative" mirror.

- Amber

> On 10 May 2016, at 18:16, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
> 
> Hi everyone!
> 
> It's finally time to pull the trigger on this.
> 
> Twisted's Trac may be down intermittently in the next few hours as I do the migration.
> 
> - Amber
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20160511/c16e783b/attachment.sig>

From ldanielburr at me.com  Tue May 10 10:35:06 2016
From: ldanielburr at me.com (L. Daniel Burr)
Date: Tue, 10 May 2016 11:35:06 -0500
Subject: [Twisted-Python] [Twisted-web] Twisted 16.2.0pre1 Release
	Announcement
In-Reply-To: <C8564EFB-FC4D-40F0-8FE9-D27FB28EFF6A@atleastfornow.net>
References: <C8564EFB-FC4D-40F0-8FE9-D27FB28EFF6A@atleastfornow.net>
Message-ID: <etPan.57320dba.eabafbc.a6c0@dzur.corp.wargaming.local>

On May 9, 2016 at 9:26:31 AM, Amber Hawkie Brown (hawkowl at atleastfornow.net) wrote:
Hi everyone! Time for another Twisted prerelease! 

Our release cadence stays steady, and this prerelease should bring some new nice features! The highlights include: 

- twisted.protocols.haproxy.proxyEndpoint, a wrapper endpoint that gives some extra information to the wrapped protocols passed by haproxy;
Awesome.


- Migration of twistd and other twisted.application.app users to the new logging system (twisted.logger); 
More awesome.


- Porting of parts of Twisted Names' server to Python 3; 
- The removal of the very old MSN client code and the deprecation of the unmaintained ICQ/OSCAR client code; 
- More cleanups in Conch in preparation for a Python 3 port and cleanups in HTTP code in preparation for HTTP/2 support; 
Even more awesome.


- Over thirty tickets overall closed since 16.1. 


Awesomer still.

For more information, check the NEWS file (link provided below). 

As usual, it's available for download -- go here (https://twistedmatrix.com/Releases/pre/16.2.0pre1/) to get the prerelease tarballs and the full NEWS file. 

Please let me know if you have any issues, as well as if you don't! If everything works well, that's a good thing for me to know :) 

Twisted Regards, 
Amber Brown (HawkOwl) 
Seriously, the progress over the last year has been fantastic.  As a long time Twisted user who takes far more than he gives, let me express my gratitude for all the great releases of the last 12 months.

Thanks,

L. Daniel Burr
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160510/95a3834f/attachment-0002.html>

From dansut at gmail.com  Tue May 10 10:52:42 2016
From: dansut at gmail.com (Daniel Sutcliffe)
Date: Tue, 10 May 2016 12:52:42 -0400
Subject: [Twisted-Python] Looking for help dealing with ClientService
	reconnections
In-Reply-To: <7A7DF935-F87C-4A60-84A7-69AF43894BC2@twistedmatrix.com>
References: <CADzPF4vD4yf64OHtf=H62BZrez7jewo_XSMDhP3YuabUQOwmZg@mail.gmail.com>
 <7A7DF935-F87C-4A60-84A7-69AF43894BC2@twistedmatrix.com>
Message-ID: <CADzPF4u2jMxfoEn6oxhjLgoATZ=kacDuL4J2ji2-HYyH57bd_Q@mail.gmail.com>

Thanks Glyph, I think you have given me a push back in the 'right'
direction - more thoughts and commentary embedded below if you, or
anyone else, has the time.

On May 6, 2016, at 10:19 AM, Daniel Sutcliffe <dansut at gmail.com> wrote:
[...]
>> The new ClientService class seems like it will fit my needs very
>> closely but I am struggling with how to handle the reconnections... I
>> have been using the whenConnected() method to grab the Protocol for
>> the initial connection and then use a method of this to poll the
>> connected slave. When the connection is lost I get an errback from
>> this method's deferred which I use as a signal to abandon the Protocol
>> and call whenConnected() again... at this point I have an issue though
>> as the returned deferred immediately gives me a callback with the same
>> Protocol which has just lost its connection, and thus loop...

On Mon, May 9, 2016 at 6:19 PM, Glyph <glyph at twistedmatrix.com> wrote:
> If you want a hook each time a new protocol is created, you're probably
> better off writing a wrapper protocol factory, and passing that to your
> ClientService, then doing any set-up work you want to do in your
> buildProtocol implementation, which delegates to the real, pymodbus
> implementation.

Understood, if this is the way the framework is intended to be used I
realize doing anything else is going to be fighting against the flow.

However, just to probe the situation I found myself in further, for
the sake probing broken code to see how it might be fixed:

Given the ClientService.whenConnected() method is intended to provide
access to my connected Protocol through the deferred it returns, is it
not a little unfriendly that this Protocol may turn out to be
disconnected? OK occasionally due to timing but for this to be a
possible condition which can loop with the same disconnected Protocol
returned until the ClientService has its _currentConnection set to
None, suggests to me that I can't safely use my Protocol from
whenConnected() for much other than as a notification the first
connection has occurred... but how do I avoid this?

I have looked at the source and it seems to me the fact that the
connection has been lost should bubble up to the ClientService through
a t.a.i._DisconnectFactory and t.a.i._ReconnectingProtocolProxy once
my Protocol's connectionLost() is called. My issue seems to be that I
errback on a Protocol method's deferred returned to code at or above
the ClientService level which gives up on that Protocol and calls
whenConnected() to get the next one, only the Protocol's
connectionLost() has yet to be called and then doesn't have chance to
because my code is looping around calling whenConnected() and getting
the same Protocol back. I hope that makes sense :-/

My Q on this is if I should be internally calling my Protocol's
connectionLost() so it can bubble up to the ClientService before I
errback on the Protocol method - whose responsibility is it to call
this?

>> Before I got on this mailing list I posted this Q to stackoverflow
>> with some example code:
>>    http://stackoverflow.com/q/37061807/3448214
>> but no solution or much attention there yet.
>>
>> As I say there, I realize I have probably just made a bad pattern
>> choice for how to use this API, but I have not been able to work out a
>> better choice which seems clean and fits my needs/understanding well.
>> I have tried deriving my own Protocol/Factory and handling the polling
>> there but this seems to get really messy once I start to add code to
>> get the collected data to a destination at that level, involving
>> giving the Protocol too much knowledge of how the data is to be
>> handled.
>
> I am curious as to why you say that this is "messy".

Honestly, this was just a gut feeling at the time, probably more
sourced in my implementation from lack of experience in using Twisted;
after reading around the subject, looking at many more examples, and
your advice, I think I am convinced I need to back to looking at my
own Protocol derived from the pymodbus one with a Factory that
contains the persistent config and access to an interface to pump the
polled data upstream.

>> Any advice, good patterns, or pointers to other projects which do
>> something similar is appreciated,
>
> I spent a while thinking about your question, and I'm sorry that I can't give
> a more thorough answer, but I think you need to be a bit more specific
> about what it is you don't like about your potential solution.  It seems to me
> that having a delegating Factory, especially if all you need to do is set up
> some state on each Protocol that gets produced, should be sufficient...

Looking at the code again I think it just seemed to make sense to me
at the time to have something that is (or has) a ClientService be the
object I am calling a DataSource have more control over when it polls
that data and what it does with it - and not to have to make the
Protocol and its Factory aware of this at all. Does that make it any
clearer? I am happy to push ahead with building this into my
Factory/Protocol if that is more normal usage for Twisted as I am sure
there will be benefits of encapsulating it here beyond the other side
I was seeing during that moment of confusion.

Thanks for the advice, I think it was enough to nudge me in a
direction that will work better to get me going, and if with more
experience other usage makes more sense I can always refactor,
refactor, refactor :)
Cheers
/dan
-- 
Daniel Sutcliffe <dansut at gmail.com>



From pawelmhm at gmail.com  Tue May 10 12:37:57 2016
From: pawelmhm at gmail.com (=?UTF-8?B?UGF3ZcWCIE1pZWNo?=)
Date: Tue, 10 May 2016 20:37:57 +0200
Subject: [Twisted-Python] [ALL OK] [INFRASTRUCTURE OUTAGE] Moving from
 SVN to Git
In-Reply-To: <88621B3B-EDDC-4C7E-A98B-0572179616E8@atleastfornow.net>
References: <F46EE585-5445-400C-AF97-873FF3BE18F5@atleastfornow.net>
 <88621B3B-EDDC-4C7E-A98B-0572179616E8@atleastfornow.net>
Message-ID: <CAO38UCmiEp=Y+zGEKfPKk6kBnOBKJk=XP66KT0UbcgVYUgV96w@mail.gmail.com>

Hello Amber,

> we've moved to https://github.com/twisted/twisted as our "authoritative"
mirror.

are there any consequences of this for Twisted users and/or casual
contributors?  I used github source for a while not knowing it was not
"authortiative" mirror, it always seemed fresh and updated. I remember some
discussion on mailing list about moving issue tracking to github, is
today's migration part of this process? Are there plans to accept pull
requests on github?

Paweł Miech

2016-05-10 18:29 GMT+02:00 Amber "Hawkie" Brown <hawkowl at atleastfornow.net>:

> Hi everyone!
>
> Twisted infra is now back up and kicking, and we've moved to
> https://github.com/twisted/twisted as our "authoritative" mirror.
>
> - Amber
>
> > On 10 May 2016, at 18:16, Amber Hawkie Brown <hawkowl at atleastfornow.net>
> wrote:
> >
> > Hi everyone!
> >
> > It's finally time to pull the trigger on this.
> >
> > Twisted's Trac may be down intermittently in the next few hours as I do
> the migration.
> >
> > - Amber
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160510/f5d3b318/attachment-0002.html>

From glyph at twistedmatrix.com  Tue May 10 13:02:05 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 10 May 2016 12:02:05 -0700
Subject: [Twisted-Python] [Twisted-web] Twisted 16.2.0pre1 Release
	Announcement
In-Reply-To: <etPan.57320dba.eabafbc.a6c0@dzur.corp.wargaming.local>
References: <C8564EFB-FC4D-40F0-8FE9-D27FB28EFF6A@atleastfornow.net>
 <etPan.57320dba.eabafbc.a6c0@dzur.corp.wargaming.local>
Message-ID: <E70879DC-D0DB-4B83-90F2-819DB824548D@twistedmatrix.com>


> On May 10, 2016, at 9:35 AM, L. Daniel Burr <ldanielburr at me.com> wrote:
> Seriously, the progress over the last year has been fantastic.  As a long time Twisted user who takes far more than he gives, let me express my gratitude for all the great releases of the last 12 months.
> 

As you're expressing gratitude, I'd like to take the opportunity to remind everyone that gratitude sometimes takes the form of US dollars, which you can donate to the Twisted project on the front page of https://twistedmatrix.com/ :).  I periodically holler about fundraising, but as all this successful infrastructure work has been landing it would be a real shame if we had a big outage because we ran out of money to pay our current infrastructure provider.  (We are working on moving to donated hosting but, as always, system administration resources are the thing we have the least of.)

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160510/766e71c3/attachment-0002.html>

From mithrandi at mithrandi.net  Tue May 10 13:21:02 2016
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Tue, 10 May 2016 19:21:02 +0000
Subject: [Twisted-Python] [ALL OK] [INFRASTRUCTURE OUTAGE] Moving from
 SVN to Git
In-Reply-To: <CAO38UCmiEp=Y+zGEKfPKk6kBnOBKJk=XP66KT0UbcgVYUgV96w@mail.gmail.com>
References: <F46EE585-5445-400C-AF97-873FF3BE18F5@atleastfornow.net>
 <88621B3B-EDDC-4C7E-A98B-0572179616E8@atleastfornow.net>
 <CAO38UCmiEp=Y+zGEKfPKk6kBnOBKJk=XP66KT0UbcgVYUgV96w@mail.gmail.com>
Message-ID: <CAMcKhMQJ4htSwLHhZQHmHj6XS8z9e0S4uHxOwzjyfR0+4U0JQQ@mail.gmail.com>

On Tue, 10 May 2016 at 20:38 Paweł Miech <pawelmhm at gmail.com> wrote:

> Hello Amber,
>
> > we've moved to https://github.com/twisted/twisted as our
> "authoritative" mirror.
>
> are there any consequences of this for Twisted users and/or casual
> contributors?  I used github source for a while not knowing it was not
> "authortiative" mirror, it always seemed fresh and updated.
>

The git mirror has been updated from the Subversion repository on commit
for quite a while, so it was up to date, it just wasn't the correct place
for committers to push changes to; this is what has changed now.

I just got done editing a bunch of the wiki pages about the development
process, primarily https://twistedmatrix.com/trac/wiki/TwistedDevelopment —
so hopefully it should be clearer how to proceed now.


> I remember some discussion on mailing list about moving issue tracking to
> github, is today's migration part of this process? Are there plans to
> accept pull requests on github?
>

The main remaining problem with pull requests is that a committer has to
push a branch to the main repository in order to run builds on the
buildbots; this is due to issues around executing arbitrary code on the
buildbots. Thus a PR-based workflow for non-committers currently doesn't
make much sense.

Issue tracking remains on Trac, at least for the forseeable future
(implementing our workflow with GitHub issues is quite challenging).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160510/6a03e554/attachment-0002.html>

From dansut at gmail.com  Tue May 10 17:23:08 2016
From: dansut at gmail.com (Daniel Sutcliffe)
Date: Tue, 10 May 2016 19:23:08 -0400
Subject: [Twisted-Python] Persuading Python's Logging to use
	twisted.logger
In-Reply-To: <93ae72c6-c942-73c6-e119-2c92764c30b3@arskom.com.tr>
References: <CADzPF4sMzLe4-HVpt=Dv3vv-BvzC9EKrBrHTZedLddwVoBb1Qg@mail.gmail.com>
 <93ae72c6-c942-73c6-e119-2c92764c30b3@arskom.com.tr>
Message-ID: <CADzPF4uwgq1d=VC2tGB8oDR3xRQbGGWAqwNGHuVSK7nyRMjBMA@mail.gmail.com>

Thanks for all the hints and suggestions guys, this was far simpler
than I thought it would be and the results are exactly what I imagined
without too much effort.

Jeff: Have to admit I started with your code and had it working with
in my scenario in no time at all, this was a great bump start, but I
couldn't help tweaking...

Glyph: The code below is I'm sure far from perfect, and it doesn't
take your advice and convert the msg into a twisted format string, it
takes the simpler approach of letting the Logging record pre-format
using the getMessage() method. I'm sure there are loads of edge cases
it could cope with better with maybe it is a start of something that
could be included in Twisted.

Kevin: I appreciate your input and understand the need to always be
aware of what you are call/using may be blocking for various reasons -
I will eventually want to redirect to syslog so will need to deal with
this later. I still think it makes sense to have a relatively easy
option of redirecting STDLib logging from used modules to
twisted.logger available, as well as the opposite. When twistd is
handling most of logging setup it seems the simpler path to have
everything using twisted.logger.

Burak: Your code was especially helpful - it goes much further than I
even considered is useful so I just borrowed what I thought was
essential for the needs of this first pass. Will be glad to hear of
any cases you think will break this code to help make it even more
general.

So here's the code I dropped into a logfudger.py in my test dir. All
feedback encouraged as I really am just finding my way around Python,
and appreciate all critique of what I could do better:

from twisted.logger import Logger, LogLevel
import logging
LEVEL_SYS2TWISTED = {
    logging.DEBUG: LogLevel.debug,
    logging.INFO: LogLevel.info,
    logging.WARN: LogLevel.warn,
    logging.ERROR: LogLevel.error,
    logging.CRITICAL: LogLevel.critical,
}
class TwistedLoggerHandler(logging.Handler):
    def __init__(self):
        self._log = Logger()
        logging.Handler.__init__(self)
    def flush(self):
        pass
    def emit(self, record):
        try:
            self._log.namespace=record.name
            self._log.source=record.pathname
            self._log.emit(
                LEVEL_SYS2TWISTED[record.levelno],
                record.getMessage(),
                lineno=record.lineno, args=record.args)
        except:
            self.handleError(record)

When I use this with pymodbus I then just need to include this with my code:

import logging
from logfudger import TwistedLoggerHandler
sysliblog = logging.getLogger("pymodbus")
sysliblog.addHandler(TwistedLoggerHandler())
sysliblog.setLevel(logging.DEBUG)
from twisted.logger import Logger, globalLogBeginner, textFileLogObserver
import sys
globalLogBeginner.beginLoggingTo([textFileLogObserver(sys.stderr)])

Which gives me a stderr output like:

2016-05-10T18:48:52-0400 [pymodbus#info] Informational
2016-05-10T18:48:52-0400 [__main__.MBClientFactory#info] Starting
factory <__main__.MBClientFactory instance at 0x0000000001212ae0>
2016-05-10T18:48:52-0400 [__main__.MBClientProtocol#debug] Protocol
connectionMade
2016-05-10T18:48:52-0400 [pymodbus.client.async#debug] Client
connected to modbus server
2016-05-10T18:48:52-0400 [pymodbus.transaction#debug] adding transaction 1

I don't deal with exceptions logged through the STDLib logging at all,
and the log_namespace, log_source could probably be set in ways that
cover more use cases.
But hopefully this all makes sense and this can be a start of
something much more generically useful.

Cheers
/dan
-- 
Daniel Sutcliffe <dansut at gmail.com>



From hawkowl at atleastfornow.net  Wed May 11 02:28:28 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Wed, 11 May 2016 16:28:28 +0800
Subject: [Twisted-Python] [INFRASTRUCTURE OUTAGE] Migration of Buildbot to
	new hardware
Message-ID: <8DA10464-22CE-430B-A6A7-DD02019DBAD1@atleastfornow.net>

Hi everyone,

Keeping the infrastructure updates coming! I'm going to be moving the Buildbot to new hardware, so it may be down for today, plus however long DNS takes to propagate. This should only affect Twisted committers running tests on the builder infrastructure; Trac, docs, and everything else will remain online.

- Amber
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20160511/696cac87/attachment.sig>

From hawkowl at atleastfornow.net  Sat May 14 05:56:41 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Sat, 14 May 2016 19:56:41 +0800
Subject: [Twisted-Python] [INCOMPATIBLE CHANGE] Removal of twisted.manhole
	and twisted.spread.ui
Message-ID: <CC3AE043-AE17-48AD-B8DE-53A2A5AF263F@atleastfornow.net>

As part of some spring cleaning, I'm removing two of the largest sections of unmaintained, undocumented, and mostly untested code in Twisted. These are twisted.manhole (not twisted.conch.manhole, which is over SSH/telnet; twisted.manhole is over PB) and twisted.spread.ui (a GTK interface + some other things that are similar in purpose, which also depends on twisted.manhole). They are both broken and not very useful in their current form; and any improvements would require an almost complete rewrite, meaning that there's little to no chance that they are worth keeping.

As per the compatibility policy, these two branches are available for you to test your applications with:

- https://twistedmatrix.com/trac/ticket/8329 -- removing twisted.spread.ui
- https://twistedmatrix.com/trac/ticket/8330 -- removing twisted.manhole

The git branches are available on the Trac links. They will be available for a week from now before the minimum merge time, as per the policy, for you to test your applications.

- Amber
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20160514/c967f030/attachment.sig>

From hawkowl at atleastfornow.net  Sat May 14 07:29:21 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Sat, 14 May 2016 21:29:21 +0800
Subject: [Twisted-Python] [ALL IS WELL] [INFRASTRUCTURE OUTAGE] Migration of
	Buildbot to new hardware
In-Reply-To: <8DA10464-22CE-430B-A6A7-DD02019DBAD1@atleastfornow.net>
References: <8DA10464-22CE-430B-A6A7-DD02019DBAD1@atleastfornow.net>
Message-ID: <12CB32AA-FFD9-41FC-BE02-0D5DD5EBA70C@atleastfornow.net>

Hi everyone,

The BuildBot migration is now complete.

- Amber

> On 11 May 2016, at 16:28, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
> 
> Hi everyone,
> 
> Keeping the infrastructure updates coming! I'm going to be moving the Buildbot to new hardware, so it may be down for today, plus however long DNS takes to propagate. This should only affect Twisted committers running tests on the builder infrastructure; Trac, docs, and everything else will remain online.
> 
> - Amber
> _______________________________________________
> Twisted-web mailing list
> Twisted-web at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20160514/91abfc61/attachment.sig>

From glyph at twistedmatrix.com  Sat May 14 14:56:23 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 14 May 2016 13:56:23 -0700
Subject: [Twisted-Python] [INCOMPATIBLE CHANGE] Removal of
	twisted.manhole and twisted.spread.ui
In-Reply-To: <CC3AE043-AE17-48AD-B8DE-53A2A5AF263F@atleastfornow.net>
References: <CC3AE043-AE17-48AD-B8DE-53A2A5AF263F@atleastfornow.net>
Message-ID: <5B68A24F-3059-40A3-8E0B-DAAD0B8ACE1D@twistedmatrix.com>


> On May 14, 2016, at 4:56 AM, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
> 
> As part of some spring cleaning, I'm removing two of the largest sections of unmaintained, undocumented, and mostly untested code in Twisted. These are twisted.manhole (not twisted.conch.manhole, which is over SSH/telnet; twisted.manhole is over PB) and twisted.spread.ui (a GTK interface + some other things that are similar in purpose, which also depends on twisted.manhole). They are both broken and not very useful in their current form; and any improvements would require an almost complete rewrite, meaning that there's little to no chance that they are worth keeping.
> 
> As per the compatibility policy, these two branches are available for you to test your applications with:
> 
> - https://twistedmatrix.com/trac/ticket/8329 -- removing twisted.spread.ui
> - https://twistedmatrix.com/trac/ticket/8330 -- removing twisted.manhole
> 
> The git branches are available on the Trac links. They will be available for a week from now before the minimum merge time, as per the policy, for you to test your applications.
> 
> - Amber

Thanks for doing the compatability notification, Amber.

While I'm always happy to see the process followed to ensure that we don't leave our users in the lurch, I suspect that it would have been very hard for anyone to actually make use of these with a modern Twisted.

For what it's worth, I'm quite sad to see them go; features like this made early versions of Twisted kind of special, in my opinion.  But they never really survived the transition to our "new" (i.e. "within the last decade") standards for quality and maintainability, so they've been slowly rotting.

I say this because I hope the acknowledgement that they're just broken and their removal will inspire folks to consider re-engineering some features like this, that provide enhanced visibility into the activity of the event loop and that provide native GUI tools for people to understand Twisted.  It would inspire me if I didn't have so much else already to do before PyCon ;-).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160514/7b28c449/attachment-0002.html>

From glyph at twistedmatrix.com  Sat May 14 14:57:16 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 14 May 2016 13:57:16 -0700
Subject: [Twisted-Python] [ALL IS WELL] [INFRASTRUCTURE OUTAGE]
	Migration of Buildbot to new hardware
In-Reply-To: <12CB32AA-FFD9-41FC-BE02-0D5DD5EBA70C@atleastfornow.net>
References: <8DA10464-22CE-430B-A6A7-DD02019DBAD1@atleastfornow.net>
 <12CB32AA-FFD9-41FC-BE02-0D5DD5EBA70C@atleastfornow.net>
Message-ID: <9611B03A-763B-4FBB-B291-B0BEE7EAFB43@twistedmatrix.com>

Hooray!  I am already noticing faster response times from the web UI, both on buildbot and www.twistedmatrix.com :-).

-glyph

> On May 14, 2016, at 6:29 AM, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
> 
> Hi everyone,
> 
> The BuildBot migration is now complete.
> 
> - Amber
> 
>> On 11 May 2016, at 16:28, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
>> 
>> Hi everyone,
>> 
>> Keeping the infrastructure updates coming! I'm going to be moving the Buildbot to new hardware, so it may be down for today, plus however long DNS takes to propagate. This should only affect Twisted committers running tests on the builder infrastructure; Trac, docs, and everything else will remain online.
>> 
>> - Amber
>> _______________________________________________
>> Twisted-web mailing list
>> Twisted-web at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From hawkowl at atleastfornow.net  Wed May 18 11:07:04 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Thu, 19 May 2016 01:07:04 +0800
Subject: [Twisted-Python] Twisted 16.2 Release Announcement
Message-ID: <269D218D-946F-4C59-90E8-50165338D33D@atleastfornow.net>

On behalf of Twisted Matrix Laboratories, I am honoured to announce the release of Twisted 16.2!

Just in time for PyCon US, this release brings a few headlining features (like the haproxy endpoint) and the continuation of the modernisation of the codebase. More Python 3, less deprecated code, what's not to like?

- twisted.protocols.haproxy.proxyEndpoint, a wrapper endpoint that gives some extra information to the wrapped protocols passed by haproxy;
- Migration of twistd and other twisted.application.app users to the new logging system (twisted.logger);
- Porting of parts of Twisted Names' server to Python 3;
- The removal of the very old MSN client code and the deprecation of the unmaintained ICQ/OSCAR client code;
- More cleanups in Conch in preparation for a Python 3 port and cleanups in HTTP code in preparation for HTTP/2 support;
- Over thirty tickets overall closed since 16.1.

For more information, check the NEWS file (link provided below).

You can find the downloads at <https://pypi.python.org/pypi/Twisted> (or alternatively <http://twistedmatrix.com/trac/wiki/Downloads>). The NEWS file is also available at <https://github.com/twisted/twisted/blob/twisted-16.2.0/NEWS>.

Many thanks to everyone who had a part in this release - the supporters of the Twisted Software Foundation, the developers who contributed code as well as documentation, and all the people building great things with Twisted!

Twisted Regards,
Amber Brown (HawkOwl)
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20160519/28f5b65b/attachment.sig>

From hs at ox.cx  Fri May 20 01:53:13 2016
From: hs at ox.cx (Hynek Schlawack)
Date: Fri, 20 May 2016 09:53:13 +0200
Subject: [Twisted-Python] [ANN] prometheus_async: asyncio/Twisted-aware
	Python Prometheus instrumentation
Message-ID: <64C542E8-604C-4DB4-B828-EED93489736A@ox.cx>

Dear fellow friends of asynchronous software,

maybe some of you have already bumped into the Prometheus monitoring system <https://prometheus.io> and liked it like I do (in any case, I’d like to invite you to my PyCon US talk on that topic: <https://us.pycon.org/2016/schedule/presentation/1601/>!)

And while it’s great that Python is a first class citizen due to the official Python client library <https://github.com/prometheus/client_python>, asyncio and Twisted sadly aren’t!

That’s why I’ve just released prometheus_async: https://prometheus-async.readthedocs.io/

First and foremost it wraps the metrics from the official client (you don’t want *me* to do math!) and makes them work properly on coroutines and Deferreds (and makes them well-behaved decorators too but that’s a topic for another day…).

Additionally, it adds a few goodies:

- Metric-exposure via aiohttp that ist much more flexible than what comes with the stdlib-based official solution.
- …that can also be started in a separate thread.  That means you can use them in regular, *synchronous* Python 3 applications as well (I instrument all my Pyramid apps like that).
- Integration with service discovery.  Listen on port 0 and leave registration to Consul Agent (integration is pluggable, just implement two methods)!

Sadly the goodies are asyncio-only so far.  Partly because the official client has some Twisted Web support merged but not released yet.  Contributions are very welcome!

Cheers,
Hynek


From adi at roiban.ro  Sat May 21 04:30:26 2016
From: adi at roiban.ro (Adi Roiban)
Date: Sat, 21 May 2016 11:30:26 +0100
Subject: [Twisted-Python] Twisted 16.2 Release Announcement
In-Reply-To: <269D218D-946F-4C59-90E8-50165338D33D@atleastfornow.net>
References: <269D218D-946F-4C59-90E8-50165338D33D@atleastfornow.net>
Message-ID: <CAFycZ9f948Y2Q3bqjG_H7D6ZXWw3U1+TuqCa6+Knb4=O-cyeTQ@mail.gmail.com>

On 18 May 2016 at 18:07, Amber "Hawkie" Brown <hawkowl at atleastfornow.net>
wrote:

> On behalf of Twisted Matrix Laboratories, I am honoured to announce the
> release of Twisted 16.2!
>
> Just in time for PyCon US, this release brings a few headlining features
> (like the haproxy endpoint) and the continuation of the modernisation of
> the codebase. More Python 3, less deprecated code, what's not to like?
>
> - twisted.protocols.haproxy.proxyEndpoint, a wrapper endpoint that gives
> some extra information to the wrapped protocols passed by haproxy;
> - Migration of twistd and other twisted.application.app users to the new
> logging system (twisted.logger);
> - Porting of parts of Twisted Names' server to Python 3;
> - The removal of the very old MSN client code and the deprecation of the
> unmaintained ICQ/OSCAR client code;
> - More cleanups in Conch in preparation for a Python 3 port and cleanups
> in HTTP code in preparation for HTTP/2 support;
> - Over thirty tickets overall closed since 16.1.
>
> For more information, check the NEWS file (link provided below).
>
> You can find the downloads at <https://pypi.python.org/pypi/Twisted> (or
> alternatively <http://twistedmatrix.com/trac/wiki/Downloads>). The NEWS
> file is also available at <
> https://github.com/twisted/twisted/blob/twisted-16.2.0/NEWS>.
>
> Many thanks to everyone who had a part in this release - the supporters of
> the Twisted Software Foundation, the developers who contributed code as
> well as documentation, and all the people building great things with
> Twisted!
>
> Twisted Regards,
> Amber Brown (HawkOwl)
>

This is also the release in which the code hosting was switched to
GitHub... so source links from documentation will now link to github.

Great work Amber! Thanks!

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160521/b71b6b88/attachment-0002.html>

From glyph at twistedmatrix.com  Sat May 21 15:54:53 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 21 May 2016 14:54:53 -0700
Subject: [Twisted-Python] Looking for help dealing with ClientService
	reconnections
In-Reply-To: <CADzPF4u2jMxfoEn6oxhjLgoATZ=kacDuL4J2ji2-HYyH57bd_Q@mail.gmail.com>
References: <CADzPF4vD4yf64OHtf=H62BZrez7jewo_XSMDhP3YuabUQOwmZg@mail.gmail.com>
 <7A7DF935-F87C-4A60-84A7-69AF43894BC2@twistedmatrix.com>
 <CADzPF4u2jMxfoEn6oxhjLgoATZ=kacDuL4J2ji2-HYyH57bd_Q@mail.gmail.com>
Message-ID: <A88137BD-6D7C-4C39-B4CA-56832B4ECA1C@twistedmatrix.com>


> On May 10, 2016, at 9:52 AM, Daniel Sutcliffe <dansut at gmail.com> wrote:
> 
> Thanks Glyph, I think you have given me a push back in the 'right'
> direction - more thoughts and commentary embedded below if you, or
> anyone else, has the time.
> 
> On May 6, 2016, at 10:19 AM, Daniel Sutcliffe <dansut at gmail.com> wrote:
> [...]
>>> The new ClientService class seems like it will fit my needs very
>>> closely but I am struggling with how to handle the reconnections... I
>>> have been using the whenConnected() method to grab the Protocol for
>>> the initial connection and then use a method of this to poll the
>>> connected slave. When the connection is lost I get an errback from
>>> this method's deferred which I use as a signal to abandon the Protocol
>>> and call whenConnected() again... at this point I have an issue though
>>> as the returned deferred immediately gives me a callback with the same
>>> Protocol which has just lost its connection, and thus loop...
> 
> On Mon, May 9, 2016 at 6:19 PM, Glyph <glyph at twistedmatrix.com> wrote:
>> If you want a hook each time a new protocol is created, you're probably
>> better off writing a wrapper protocol factory, and passing that to your
>> ClientService, then doing any set-up work you want to do in your
>> buildProtocol implementation, which delegates to the real, pymodbus
>> implementation.
> 
> Understood, if this is the way the framework is intended to be used I
> realize doing anything else is going to be fighting against the flow.
> 
> However, just to probe the situation I found myself in further, for
> the sake probing broken code to see how it might be fixed:
> 
> Given the ClientService.whenConnected() method is intended to provide
> access to my connected Protocol through the deferred it returns, is it
> not a little unfriendly that this Protocol may turn out to be
> disconnected? OK occasionally due to timing but for this to be a
> possible condition which can loop with the same disconnected Protocol
> returned until the ClientService has its _currentConnection set to
> None, suggests to me that I can't safely use my Protocol from
> whenConnected() for much other than as a notification the first
> connection has occurred... but how do I avoid this?

whenConnected() is not intended to be used for "give me each Protocol as it is instantiated so that state can be set up", it is intended for API clients which want to send a message to the current connection to just retrieve the current connection so they can call a method on it.

I'm not sure what you mean by "turn out to be disconnected".  The physical reality of networking is that you might always encounter a transport which has been disconnected but which you haven't received notification of its disconnection yet.

> I have looked at the source and it seems to me the fact that the
> connection has been lost should bubble up to the ClientService through
> a t.a.i._DisconnectFactory and t.a.i._ReconnectingProtocolProxy once
> my Protocol's connectionLost() is called. My issue seems to be that I
> errback on a Protocol method's deferred returned to code at or above
> the ClientService level which gives up on that Protocol and calls
> whenConnected() to get the next one, only the Protocol's
> connectionLost() has yet to be called and then doesn't have chance to
> because my code is looping around calling whenConnected() and getting
> the same Protocol back. I hope that makes sense :-/

Let me try to rephrase: you call a protocol method which returns a Deferred; you add an errback to that Deferred which calls whenConnected() to re-try, but since the protocol hasn't disconnected yet, you get the same protocol instance back, which is useless to you.

> My Q on this is if I should be internally calling my Protocol's
> connectionLost() so it can bubble up to the ClientService before I
> errback on the Protocol method - whose responsibility is it to call
> this?

It's the framework's responsibility to call it.  You should not call it yourself.  Your Protocol's connectionLost isn't going to bubble up to ClientService anyway; you'd have to call your wrapper's connectionLost, which would confuse its internal state, since the framework would call it again right afterwards, and we definitely don't have test coverage for that, since the framework will normally only call it once.

The right way to handle this would be to introduce a delay between re-tries.  It's generally a good idea to have such a delay for lots of reasons; you don't want to overload your peer in the case of a transient failure.  As a bonus, the fact that you've gone back up to the reactor loop to wait a while means that the transport will be properly disconnected and whenConnected() will do what you want.

>>> Before I got on this mailing list I posted this Q to stackoverflow
>>> with some example code:
>>>   http://stackoverflow.com/q/37061807/3448214
>>> but no solution or much attention there yet.
>>> 
>>> As I say there, I realize I have probably just made a bad pattern
>>> choice for how to use this API, but I have not been able to work out a
>>> better choice which seems clean and fits my needs/understanding well.
>>> I have tried deriving my own Protocol/Factory and handling the polling
>>> there but this seems to get really messy once I start to add code to
>>> get the collected data to a destination at that level, involving
>>> giving the Protocol too much knowledge of how the data is to be
>>> handled.
>> 
>> I am curious as to why you say that this is "messy".
> 
> Honestly, this was just a gut feeling at the time, probably more
> sourced in my implementation from lack of experience in using Twisted;
> after reading around the subject, looking at many more examples, and
> your advice, I think I am convinced I need to back to looking at my
> own Protocol derived from the pymodbus one with a Factory that
> contains the persistent config and access to an interface to pump the
> polled data upstream.
> 
>>> Any advice, good patterns, or pointers to other projects which do
>>> something similar is appreciated,
>> 
>> I spent a while thinking about your question, and I'm sorry that I can't give
>> a more thorough answer, but I think you need to be a bit more specific
>> about what it is you don't like about your potential solution.  It seems to me
>> that having a delegating Factory, especially if all you need to do is set up
>> some state on each Protocol that gets produced, should be sufficient...
> 
> Looking at the code again I think it just seemed to make sense to me
> at the time to have something that is (or has) a ClientService be the
> object I am calling a DataSource have more control over when it polls
> that data and what it does with it - and not to have to make the
> Protocol and its Factory aware of this at all. Does that make it any
> clearer? I am happy to push ahead with building this into my
> Factory/Protocol if that is more normal usage for Twisted as I am sure
> there will be benefits of encapsulating it here beyond the other side
> I was seeing during that moment of confusion.
> 
> Thanks for the advice, I think it was enough to nudge me in a
> direction that will work better to get me going, and if with more
> experience other usage makes more sense I can always refactor,
> refactor, refactor :)

Yup!

Happy to help, sorry for the super long lag time on this reply, but my email queue has been pretty full lately :)

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160521/52b6366b/attachment-0002.html>

From glyph at twistedmatrix.com  Sat May 21 16:12:16 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 21 May 2016 15:12:16 -0700
Subject: [Twisted-Python] overview: new review queue venue
Message-ID: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>

Hooray!  We're on github now.  Next: there's the question of how to deal with pull requests?

It occurs to me that what we really need from our code review system is mainly one thing: the review queue: a single place for reviewers to look to find things that need to be reviewed.  This is important because proposed changes need to be responded to in a timely manner, so that the code in them doesn't get stale, and so that contributors don't get frustrated.  We have limited resources for doing so, of course, so sometimes we fall short of this objective, but the point is we need to apply our limited resources to it.

The operations on the queue are:

Proposing a change should put it into the queue.
Accepting a change should remove it from the queue.
Reviewing a change should remove it from the queue.
Responding to review feedback should re-add it to the queue.
A reviewer should be able to examine just the things in the queue so they can quickly grab the next one, without seeing noise.

Our current workflow maps this into Trac via the following:

Proposing: add the "review" keyword.
Accepting: remove the "review" keyword, merge.
Reviewing: removing the "review" keyword, reassign
Responding: add the "review" keyword again
Viewing: https://twistedmatrix.com/trac/report/25

It is therefore tempting to map it into GitHub via labels and webhooks and bot workflows.  However, I think a better mapping would be this:

Proposing: Just open a pull request.  Any open pull request should be treated as part of the queue.
Accepting: A committer pushes the big green button; this 
Reviewing: This is the potentially slightly odd part.  I believe a review that doesn't result in acceptance should close the PR.  We need to be careful to always include some text that explains that closing a PR does not mean that the change is rejected, just that the submitter must re-submit.  Initially this would just mean opening a new PR, but Mark Williams is working on a bot to re-open pull requests when a submitter posts a "please review" comment: https://github.com/markrwilliams/txghbot
Responding: A submitter can open a new PR, or, once we start running txghbot, reopen their closed PR.
Viewing: https://github.com/twisted/twisted/pulls?utf8=✓&q=is%3Apr+is%3Aopen+-status%3Afailed

The one thing that this workflow is missing from trac is a convenient way for committers, having eyeballed a patch for any obvious malware, to send it to the buildbots.

We could also potentially just replace our buildbot build farm with a combination of appveyor and travis-ci; this would remove FreeBSD from our list of supported platforms, as well as eliminating a diversity of kernel integrations.  However, for the stuff that doesn't work in containers (mostly inotify) we could run one builder on non-container-based infrastructure, and for everything else (integrating with different system toolchains) we can test using Docker: https://docs.travis-ci.com/user/docker/.  I am very much on the fence about this, since I don't want to move backwards in terms of our test coverage, but this would accelerate the contribution process so much that it's probably worth discussing.

10 years ago or so, we would routinely discover kernel bugs in our integration test harness and they would be different on different platforms.  But today's platform realities are considerably less harsh, since there are a lot more entities in the ecosystem that have taken responsibility for testing that layer of the stack; I couldn't find anything since 2008 or so where we really saw a difference between Fedora and Ubuntu at the kernel level, for example.

Thoughts?

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160521/3b678224/attachment-0002.html>

From terry at jon.es  Sat May 21 16:57:12 2016
From: terry at jon.es (Terry Jones)
Date: Sun, 22 May 2016 00:57:12 +0200
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
Message-ID: <CACqnu4U8XonGd1W0US8W3n=F_66er_y68fJ96OunqetvcJO8jg@mail.gmail.com>

Hi Glyph

On Sun, May 22, 2016 at 12:12 AM, Glyph <glyph at twistedmatrix.com> wrote:

> - Reviewing: This is the potentially slightly odd part.  I believe a
> review that doesn't result in acceptance should *close* the PR.


This feels wrong to me. I find github pull requests very useful, in ways
that it sounds like your suggestion would cut off - if I understand you
right. Do you mean that the one person who decides to do the formal review
would set themself as the "assignee" and, following their review, close the
ticket if the change isn't up to standard? And in the meantime others (who
are not the assignee) would be free to comment at will, with the pr staying
open? If so, that's good, but I still don't like to think that all
discussion around a pr then gets shut down on the say so of the single
reviewer. One thing that pull requests encourage is discussion - sometimes
it's a way to ask for input on how to proceed, sometimes it's just people
chipping in a little bit with a code optimization, sometimes people saying
"if you do this then this other thing will happen" etc. They help people
learn, to easily make small contributions (that can lead to larger ones),
to see what's going on, to judge the health of a project, etc. I like how
dynamic and lightweight that process can be in a Github pull request. It
feels to me that closing pull requests is a step in the other direction -
back towards something that feels more monolithic and more old fashioned.

As usual, I'm sure that there's absolutely nothing I can say on any tech
subject that you don't know already :-)  But those are my thoughts...

Terry
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160522/b3a09a49/attachment-0002.html>

From werner at thieprojects.ch  Sat May 21 17:00:56 2016
From: werner at thieprojects.ch (Werner Thie)
Date: Sat, 21 May 2016 13:00:56 -1000
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
Message-ID: <8a7084d9-4ad1-5906-0081-ac1940f5bf60@thieprojects.ch>

Thank you all for that great and massive move!

Me running twisted almost exclusively on FreeBSD, what is the reason for

 > We could also potentially just replace our buildbot build farm with a
 > combination of appveyor and travis-ci; this would remove FreeBSD from
 > our list of supported platforms, ...

Thanks for enlightening me.

Werner



From glyph at twistedmatrix.com  Sat May 21 19:04:32 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 21 May 2016 18:04:32 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <8a7084d9-4ad1-5906-0081-ac1940f5bf60@thieprojects.ch>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <8a7084d9-4ad1-5906-0081-ac1940f5bf60@thieprojects.ch>
Message-ID: <B302B632-1207-4DEB-839A-8550278A00C1@twistedmatrix.com>


> On May 21, 2016, at 4:00 PM, Werner Thie <werner at thieprojects.ch> wrote:
> 
> Thank you all for that great and massive move!
> 
> Me running twisted almost exclusively on FreeBSD, what is the reason for
> 
> > We could also potentially just replace our buildbot build farm with a
> > combination of appveyor and travis-ci; this would remove FreeBSD from
> > our list of supported platforms, ...
> 
> Thanks for enlightening me.

While FreeBSD support is important, there are no CI-as-a-service platforms that support it, that I'm aware of.

Right now, we need to manually vet each change before sending it to buildbots, because they are shared mutable environments that we can't afford to have running untrusted code automatically.  If we could switch to Travis and Appveyor, then we could let them worry about malicious code, which would allow contributors to get instant feedback, rather than waiting for reviewers to manually run the builders.

Travis does support OS X, which means that some level of BSD coverage would still be maintained.  And of course if someone could find an equivalent service that supports FreeBSD we could add it to the list of pull request statuses :).

-glyph


From glyph at twistedmatrix.com  Sat May 21 19:29:01 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 21 May 2016 18:29:01 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <CACqnu4U8XonGd1W0US8W3n=F_66er_y68fJ96OunqetvcJO8jg@mail.gmail.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <CACqnu4U8XonGd1W0US8W3n=F_66er_y68fJ96OunqetvcJO8jg@mail.gmail.com>
Message-ID: <149A8FA9-2519-4D16-8C33-D4867B0AC0A7@twistedmatrix.com>


> On May 21, 2016, at 3:57 PM, Terry Jones <terry at jon.es> wrote:
> 
> Hi Glyph
> 
> On Sun, May 22, 2016 at 12:12 AM, Glyph <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> Reviewing: This is the potentially slightly odd part.  I believe a review that doesn't result in acceptance should close the PR.
> 
> This feels wrong to me. I find github pull requests very useful, in ways that it sounds like your suggestion would cut off - if I understand you right. Do you mean that the one person who decides to do the formal review would set themself as the "assignee" and, following their review, close the ticket if the change isn't up to standard?

The "assignee" field isn't all that useful; really, it should be set to the submitter, but github has weird rules about who can be assigned (last I checked, only contributors).

> And in the meantime others (who are not the assignee) would be free to comment at will, with the pr staying open?

Drive-by comments on a PR are sometimes helpful, but should be used sparingly.  Mostly, discussion should happen on issues, not PRs.  A PR is a suggested resolution to a problem, and we might reject one solution, but an issue should describe the problem itself.

> If so, that's good, but I still don't like to think that all discussion around a pr then gets shut down on the say so of the single reviewer.

The PR gets closed, not deleted.  People can still comment if they like.

> One thing that pull requests encourage is discussion - sometimes it's a way to ask for input on how to proceed, sometimes it's just people chipping in a little bit with a code optimization, sometimes people saying "if you do this then this other thing will happen" etc. They help people learn, to easily make small contributions (that can lead to larger ones), to see what's going on, to judge the health of a project, etc. I like how dynamic and lightweight that process can be in a Github pull request. It feels to me that closing pull requests is a step in the other direction - back towards something that feels more monolithic and more old fashioned.

You see "dynamic and lightweight", I see "unfocused and noisy" :).

One of the things I still don't like about github is the tendency for projects to build up huge piles of open PRs, which nobody wants to reject because they're maybe possibly useful, but they won't accept because they don't meet quality standards.  Contributors don't get clear feedback about whether they're expected to do more or whether the project will take it over, and people frequently get mad about their stuff not being merged.  I think by closing PRs that we aren't going to merge as-is we can send a much clearer signal about what the project is taking on versus what it expects external contributors to do more work on.

> As usual, I'm sure that there's absolutely nothing I can say on any tech subject that you don't know already :-)  But those are my thoughts...


While I disagree, I also think that this is a very common perception, and another one of the functions of the github bot could perform would be a form comment after the PR is closed, to always submit a form comment to explain what closing the PR means and how to reopen it.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160521/59159b41/attachment-0002.html>

From glyph at twistedmatrix.com  Sat May 21 19:44:32 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 21 May 2016 18:44:32 -0700
Subject: [Twisted-Python] Persuading Python's Logging to use
	twisted.logger
In-Reply-To: <CADzPF4uwgq1d=VC2tGB8oDR3xRQbGGWAqwNGHuVSK7nyRMjBMA@mail.gmail.com>
References: <CADzPF4sMzLe4-HVpt=Dv3vv-BvzC9EKrBrHTZedLddwVoBb1Qg@mail.gmail.com>
 <93ae72c6-c942-73c6-e119-2c92764c30b3@arskom.com.tr>
 <CADzPF4uwgq1d=VC2tGB8oDR3xRQbGGWAqwNGHuVSK7nyRMjBMA@mail.gmail.com>
Message-ID: <8193AB32-9F5A-4AE5-A078-EB7F50939D1B@twistedmatrix.com>


> On May 10, 2016, at 4:23 PM, Daniel Sutcliffe <dansut at gmail.com> wrote:
> 
> Thanks for all the hints and suggestions guys, this was far simpler
> than I thought it would be and the results are exactly what I imagined
> without too much effort.

Fantastic!

> Jeff: Have to admit I started with your code and had it working with
> in my scenario in no time at all, this was a great bump start, but I
> couldn't help tweaking...
> 
> Glyph: The code below is I'm sure far from perfect, and it doesn't
> take your advice and convert the msg into a twisted format string, it
> takes the simpler approach of letting the Logging record pre-format
> using the getMessage() method. I'm sure there are loads of edge cases
> it could cope with better with maybe it is a start of something that
> could be included in Twisted.

The main reason I wanted to do the format-string translation is that it would allow the key/value pairs to be stored according to the same idiom that Twisted uses, and therefore be serialized to jsonFileLogObserver and consequently things like LogStash / ElasticSearch.

> Kevin: I appreciate your input and understand the need to always be
> aware of what you are call/using may be blocking for various reasons -
> I will eventually want to redirect to syslog so will need to deal with
> this later. I still think it makes sense to have a relatively easy
> option of redirecting STDLib logging from used modules to
> twisted.logger available, as well as the opposite. When twistd is
> handling most of logging setup it seems the simpler path to have
> everything using twisted.logger.
> 
> Burak: Your code was especially helpful - it goes much further than I
> even considered is useful so I just borrowed what I thought was
> essential for the needs of this first pass. Will be glad to hear of
> any cases you think will break this code to help make it even more
> general.
> 
> So here's the code I dropped into a logfudger.py in my test dir. All
> feedback encouraged as I really am just finding my way around Python,
> and appreciate all critique of what I could do better:
> 
> from twisted.logger import Logger, LogLevel
> import logging
> LEVEL_SYS2TWISTED = {
>    logging.DEBUG: LogLevel.debug,
>    logging.INFO: LogLevel.info,
>    logging.WARN: LogLevel.warn,
>    logging.ERROR: LogLevel.error,
>    logging.CRITICAL: LogLevel.critical,
> }
> class TwistedLoggerHandler(logging.Handler):
>    def __init__(self):
>        self._log = Logger()
>        logging.Handler.__init__(self)
>    def flush(self):
>        pass
>    def emit(self, record):
>        try:
>            self._log.namespace=record.name
>            self._log.source=record.pathname
>            self._log.emit(
>                LEVEL_SYS2TWISTED[record.levelno],
>                record.getMessage(),
>                lineno=record.lineno, args=record.args)
>        except:
>            self.handleError(record)
> 
> When I use this with pymodbus I then just need to include this with my code:
> 
> import logging
> from logfudger import TwistedLoggerHandler
> sysliblog = logging.getLogger("pymodbus")
> sysliblog.addHandler(TwistedLoggerHandler())
> sysliblog.setLevel(logging.DEBUG)
> from twisted.logger import Logger, globalLogBeginner, textFileLogObserver
> import sys
> globalLogBeginner.beginLoggingTo([textFileLogObserver(sys.stderr)])
> 
> Which gives me a stderr output like:
> 
> 2016-05-10T18:48:52-0400 [pymodbus#info] Informational
> 2016-05-10T18:48:52-0400 [__main__.MBClientFactory#info] Starting
> factory <__main__.MBClientFactory instance at 0x0000000001212ae0>
> 2016-05-10T18:48:52-0400 [__main__.MBClientProtocol#debug] Protocol
> connectionMade
> 2016-05-10T18:48:52-0400 [pymodbus.client.async#debug] Client
> connected to modbus server
> 2016-05-10T18:48:52-0400 [pymodbus.transaction#debug] adding transaction 1
> 
> I don't deal with exceptions logged through the STDLib logging at all,
> and the log_namespace, log_source could probably be set in ways that
> cover more use cases.
> But hopefully this all makes sense and this can be a start of
> something much more generically useful.

Yep!  This is definitely something handy.  Would you mind filing an issue for it?

-glyph




From clayton.daley at gmail.com  Sat May 21 20:25:38 2016
From: clayton.daley at gmail.com (Clayton Daley)
Date: Sat, 21 May 2016 21:25:38 -0500
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <149A8FA9-2519-4D16-8C33-D4867B0AC0A7@twistedmatrix.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <CACqnu4U8XonGd1W0US8W3n=F_66er_y68fJ96OunqetvcJO8jg@mail.gmail.com>
 <149A8FA9-2519-4D16-8C33-D4867B0AC0A7@twistedmatrix.com>
Message-ID: <CACKEAnXnrh696csCs5SCMSRkNyQxyKC4VWpnVoDwT+TEEa1dHQ@mail.gmail.com>

To qualify my comments, I've yet to contribute to Twisted because I don't
have a good enough grasp of its internals, but I have contributed to a
variety of Git-based OSS projects.  I definitely get uneasy with the
general idea that we're trying to "replicate workflow A from Trac in
tangentially related Git PR feature".

We're in Git. We're hoping to solicit PRs from Git users. Git users will be
used to the way PRs are used in other OSS Git projects. Glyph has some
valid criticisms of the situation in some projects, but it should still be
the starting point. For example, closing a PR strikes me as a bad idea --
for lack of a better word, it feels "hostile" to me and certainly
unwelcoming.

In several of the projects I've seen, Git tags fill these roles. Piwik has
a "needs review" tag -- the short list for reviewers. Looks like it's a
manual add, but maybe it could be automated. Once reviewed, Piwik has tags
like "Tests & QA". ZendFramework has a generic "awaiting author update".

To address Glyph's concerns about lingering PRs, perhaps the combination of:

   - A policy like "a reviewer must accept, close, or tag with one of the
   next step tags"
   - A short list of common next steps like "code quality", "needs tests",
   "second opinion", "not review ready"... plus a generic "other author action"
   - Auto-close tickets except those with "needs review" or "second
   opinion" (say) 30 days after the last action.

Drive-by comments on a PR are sometimes helpful, but should be used
> sparingly.  Mostly, discussion should happen on *issues*, not PRs.  A PR
> is a suggested resolution to a problem, and we might reject one solution,
> but an issue should describe the problem itself.


While an Issue is a good place for discussion about a problem, it lacks the
reference code often included in a PR.  You can't ask "how about this
approach" without showing the approach.  As an added bonus, most systems
run travis on PRs so you get a sense of "this approach is thorough" or
"this idea still breaks something".

Clayton Daley


On Sat, May 21, 2016 at 8:29 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On May 21, 2016, at 3:57 PM, Terry Jones <terry at jon.es> wrote:
>
> Hi Glyph
>
> On Sun, May 22, 2016 at 12:12 AM, Glyph <glyph at twistedmatrix.com> wrote:
>
>> - Reviewing: This is the potentially slightly odd part.  I believe a
>> review that doesn't result in acceptance should *close* the PR.
>
>
> This feels wrong to me. I find github pull requests very useful, in ways
> that it sounds like your suggestion would cut off - if I understand you
> right. Do you mean that the one person who decides to do the formal review
> would set themself as the "assignee" and, following their review, close the
> ticket if the change isn't up to standard?
>
>
> The "assignee" field isn't all that useful; really, it should be set to
> the submitter, but github has weird rules about who can be assigned (last I
> checked, only contributors).
>
> And in the meantime others (who are not the assignee) would be free to
> comment at will, with the pr staying open?
>
>
> Drive-by comments on a PR are sometimes helpful, but should be used
> sparingly.  Mostly, discussion should happen on *issues*, not PRs.  A PR
> is a suggested resolution to a problem, and we might reject one solution,
> but an issue should describe the problem itself.
>
> If so, that's good, but I still don't like to think that all discussion
> around a pr then gets shut down on the say so of the single reviewer.
>
>
> The PR gets closed, not deleted.  People can still comment if they like.
>
> One thing that pull requests encourage is discussion - sometimes it's a
> way to ask for input on how to proceed, sometimes it's just people chipping
> in a little bit with a code optimization, sometimes people saying "if you
> do this then this other thing will happen" etc. They help people learn, to
> easily make small contributions (that can lead to larger ones), to see
> what's going on, to judge the health of a project, etc. I like how dynamic
> and lightweight that process can be in a Github pull request. It feels to
> me that closing pull requests is a step in the other direction - back
> towards something that feels more monolithic and more old fashioned.
>
>
> You see "dynamic and lightweight", I see "unfocused and noisy" :).
>
> One of the things I still don't like about github is the tendency for
> projects to build up huge piles of open PRs, which nobody wants to reject
> because they're maybe possibly useful, but they won't accept because they
> don't meet quality standards.  Contributors don't get clear feedback about
> whether they're expected to do more or whether the project will take it
> over, and people frequently get mad about their stuff not being merged.  I
> think by closing PRs that we aren't going to merge as-is we can send a much
> clearer signal about what the project is taking on versus what it expects
> external contributors to do more work on.
>
> As usual, I'm sure that there's absolutely nothing I can say on any tech
> subject that you don't know already :-)  But those are my thoughts...
>
>
> While I disagree, I also think that this is a *very* common perception,
> and another one of the functions of the github bot could perform would be a
> form comment after the PR is closed, to always submit a form comment to
> explain what closing the PR means and how to reopen it.
>
> -glyph
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160521/d535889c/attachment-0002.html>

From glyph at twistedmatrix.com  Sat May 21 23:12:36 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 21 May 2016 22:12:36 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <CACKEAnXnrh696csCs5SCMSRkNyQxyKC4VWpnVoDwT+TEEa1dHQ@mail.gmail.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <CACqnu4U8XonGd1W0US8W3n=F_66er_y68fJ96OunqetvcJO8jg@mail.gmail.com>
 <149A8FA9-2519-4D16-8C33-D4867B0AC0A7@twistedmatrix.com>
 <CACKEAnXnrh696csCs5SCMSRkNyQxyKC4VWpnVoDwT+TEEa1dHQ@mail.gmail.com>
Message-ID: <975701FF-3E24-4072-8795-642339FADE1B@twistedmatrix.com>


> On May 21, 2016, at 7:25 PM, Clayton Daley <clayton.daley at gmail.com> wrote:
> 
> To qualify my comments, I've yet to contribute to Twisted because I don't have a good enough grasp of its internals, but I have contributed to a variety of Git-based OSS projects.  I definitely get uneasy with the general idea that we're trying to "replicate workflow A from Trac in tangentially related Git PR feature".

The workflow is not "from Trac".  The instantiation in Trac is not optimal either, which is why I described the abstract desired workflow separately from our existing instantiation.

> We're in Git. We're hoping to solicit PRs from Git users. Git users will be used to the way PRs are used in other OSS Git projects.

I think you mean "GitHub".  Git PRs don't work at all like GitHub PRs. :).

> Glyph has some valid criticisms of the situation in some projects, but it should still be the starting point. For example, closing a PR strikes me as a bad idea -- for lack of a better word, it feels "hostile" to me and certainly unwelcoming.

The thing is, if you perceive it as "hostile" that a project closes a PR - i.e. "says that they're not going to do more work on it" - that is a cultural problem; it suggests a certain implicit level of passive aggression in opening a PR which I don't want to assume.  It's sort of like having a culture where you can just send anybody an email asking them to do whatever and it would be "hostile" for them to refuse.  In such a culture people don't say "yes", but they do start to ignore messages  Closing the PR is a more accurate reflection of reality - the project (twisted) is not going to do anything about the PR in its current state, so it shouldn't be left open.  It also clearly demarcates the completion of a review.

People feel very differently about workflow, of course, but I've definitely heard from other OSS maintainers that the average workflow of volunteer projects often devolves into a huge backlog of un-reviewed stuff, which obscures the new stuff, and if you want something to actually get reviewed and move along you need to know the maintainers of the project and ask them personally.

I'd much rather our new contributors get a little confused about the culturally unusual step of closing a PR than to have their work be accidentally but systematically discriminated against in favor of people who know how to bug the right people in IRC or email.

> In several of the projects I've seen, Git tags fill these roles. Piwik has a "needs review" tag -- the short list for reviewers. Looks like it's a manual add, but maybe it could be automated. Once reviewed, Piwik has tags like "Tests & QA". ZendFramework has a generic "awaiting author update".

This was my original idea. The problem with GitHub labels ("Git tags" are something completely different) is that they can't be applied by external contributors.  You need write access to the repository to be able to manipulate them.  It's very important to our workflow that external contributors be able to re-submit their PRs.  We could have a bot for that (again, this was the original plan).  But it seems like using the open / closed state to reflect the we will do some work on this / we won't do any more work on this is actually closer to the "native" state of github.

> To address Glyph's concerns about lingering PRs, perhaps the combination of:
> A policy like "a reviewer must accept, close, or tag with one of the next step tags"
This doesn't address the shortcomings of labels, to wit, external contributors need the ability to manipulate them somehow, and if a PR isn't "in review" by default, then they have to whisper some magic comment to make anyone take a look at it.  If we use open/closed, then the default action of "open a PR" will cause someone to look at it, even if our bot is nonexistent or temporarily offline.
> A short list of common next steps like "code quality", "needs tests", "second opinion", "not review ready"... plus a generic "other author action"
The next steps are always the same: "respond to the review".  The review may include any of these, any combination of these, or also possibly questions that the author must answer.  Formally separating these would be a weird tweak on our current workflow that I don't see helping.
> Auto-close tickets except those with "needs review" or "second opinion" (say) 30 days after the last action.
I think you mean "PRs", not "tickets"?  Issues (which are closer to trac "tickets") can remain open indefinitely.  I am not really in favor of any kind of auto-closing or expiration given that the project has wildly variable levels of resources depending on people's spare time; sometimes we have a whole bunch of reviewers active and can get to things within 24 hours, sometimes we're severely overtaxed and can't look at anything for 6 weeks.

> Drive-by comments on a PR are sometimes helpful, but should be used sparingly.  Mostly, discussion should happen on issues, not PRs.  A PR is a suggested resolution to a problem, and we might reject one solution, but an issue should describe the problem itself.
> 
> While an Issue is a good place for discussion about a problem, it lacks the reference code often included in a PR.  You can't ask "how about this approach" without showing the approach.  As an added bonus, most systems run travis on PRs so you get a sense of "this approach is thorough" or "this idea still breaks something".

This is exactly why issues and PRs should be separated.  If you only have one artifact - the PR - to represent both the issue and the potential solution, then you can't get rid of the potential solution (reject the PR) without also getting rid of the description of the problem.  Github already automatically shows anywhere that your PR or issue is mentioned, so all you need to do to say "how about this approach" is to put the words "fixes #NNN" in your PR description.  As a bonus, that will make it automatically close the issue when the PR is merged.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160521/bbecf259/attachment-0002.html>

From rodrigc at crodrigues.org  Sat May 21 23:52:45 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Sat, 21 May 2016 22:52:45 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
Message-ID: <CAG=rPVcT1cBmdB3OLN3U8E_khRMVAGotDccW0Ye7sz0ff6L3jQ@mail.gmail.com>

On Sat, May 21, 2016 at 3:12 PM, Glyph <glyph at twistedmatrix.com> wrote:

> Hooray!  We're on github now.  Next: there's the question of how to deal
> with pull requests?
>

A few people, including myself modified the text with Git instructions:
 https://twistedmatrix.com/trac/wiki/TwistedDevelopment#SubmittingaPatch

The basic idea is, "for now, if you submit a GitHub PR, you must file a
Trac ticket.  You must reference the PR in the Trac ticket,
and you must reference the Trac ticket in the PR".
If you want to change that workflow somehow, go ahead, but for starters
that should be good enough to get going.

These two pull requests followed that:

https://github.com/twisted/twisted/pull/62
https://github.com/twisted/twisted/pull/63



> Reviewing: This is the potentially slightly odd part.  I believe a review
> that doesn't result in acceptance should *close* the PR.  We need to be
> careful to always include some text that explains that closing a PR does
> not mean that the change is rejected, just that the submitter must
> re-submit.  Initially this would just mean opening a new PR, but Mark
> Williams is working on a bot to re-open pull requests when a submitter
> posts a "please review" comment: https://github.com/markrwilliams/txghbot
>

I don't agree with this.  If a PR is reviewed, and the result of the review
is "NO WAY", then I am OK with the PR being closed.
However, if a the result of the review is "needs more work before being
accepted", then
it should be possible for the submitter to add more commits to that PR,
and even "git rebase" and squash commits in that PR.

That's the process that I followed when I submitted
https://github.com/twisted/twisted/pull/62

By the way, PR 62 is the first pull request that has been successfully
submitted to Twisted, and incorporated into the code:

https://github.com/twisted/twisted/commit/95c49d74136eef420fabdeea85f650da2bc78b07

It is a rather trivial documentation fix, but I will still take credit as
the first Pull Request successful submitter! :)

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160521/3c170344/attachment-0002.html>

From adi at roiban.ro  Sun May 22 00:04:41 2016
From: adi at roiban.ro (Adi Roiban)
Date: Sun, 22 May 2016 07:04:41 +0100
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <B302B632-1207-4DEB-839A-8550278A00C1@twistedmatrix.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <8a7084d9-4ad1-5906-0081-ac1940f5bf60@thieprojects.ch>
 <B302B632-1207-4DEB-839A-8550278A00C1@twistedmatrix.com>
Message-ID: <CAFycZ9e45jppC+ZLWjnrk8TySaRygVzhtbizx4YcD+As3RnDhQ@mail.gmail.com>

On 22 May 2016 at 02:04, Glyph <glyph at twistedmatrix.com> wrote:

>
> > On May 21, 2016, at 4:00 PM, Werner Thie <werner at thieprojects.ch> wrote:
> >
> > Thank you all for that great and massive move!
> >
> > Me running twisted almost exclusively on FreeBSD, what is the reason for
> >
> > > We could also potentially just replace our buildbot build farm with a
> > > combination of appveyor and travis-ci; this would remove FreeBSD from
> > > our list of supported platforms, ...
> >
> > Thanks for enlightening me.
>
> While FreeBSD support is important, there are no CI-as-a-service platforms
> that support it, that I'm aware of.
>
> Right now, we need to manually vet each change before sending it to
> buildbots, because they are shared mutable environments that we can't
> afford to have running untrusted code automatically.  If we could switch to
> Travis and Appveyor, then we could let them worry about malicious code,
> which would allow contributors to get instant feedback, rather than waiting
> for reviewers to manually run the builders.
>
> Travis does support OS X, which means that some level of BSD coverage
> would still be maintained.  And of course if someone could find an
> equivalent service that supports FreeBSD we could add it to the list of
> pull request statuses :).
>

I am not sure that Travis supports Python on OSX.... and it might take some
time until there is support for Python on Windows and I am not sure if
Travis-ci.org will support this free of charge.

I think that we can have both... and in the first instance automatically
trigger Travis-CI builds and manually trigger buildbot builds.

----------

GitLab is an option, as I think that they allow you to bring your own build
slaves.... but I think that the current buildbots are fine.

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160522/9c1d2705/attachment-0002.html>

From hawkowl at atleastfornow.net  Sun May 22 00:08:03 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Sun, 22 May 2016 14:08:03 +0800
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
Message-ID: <8F94FC42-18C6-4D4E-BAD9-6D9C56E07F69@atleastfornow.net>


> On 22 May 2016, at 06:12, Glyph <glyph at twistedmatrix.com> wrote:
> 
> It is therefore tempting to map it into GitHub via labels and webhooks and bot workflows.  However, I think a better mapping would be this:
> 
> 	• Proposing: Just open a pull request.  Any open pull request should be treated as part of the queue.
> 	• Accepting: A committer pushes the big green button; this
> 	• Reviewing: This is the potentially slightly odd part.  I believe a review that doesn't result in acceptance should close the PR.  We need to be careful to always include some text that explains that closing a PR does not mean that the change is rejected, just that the submitter must re-submit.  Initially this would just mean opening a new PR, but Mark Williams is working on a bot to re-open pull requests when a submitter posts a "please review" comment: https://github.com/markrwilliams/txghbot
> 	• Responding: A submitter can open a new PR, or, once we start running txghbot, reopen their closed PR.
> 	• Viewing: https://github.com/twisted/twisted/pulls?utf8=✓&q=is%3Apr+is%3Aopen+-status%3Afailed

I think this is reasonable. I believe txghbot is in a place where we can start using it for just that.

> The one thing that this workflow is missing from trac is a convenient way for committers, having eyeballed a patch for any obvious malware, to send it to the buildbots.
> 
> We could also potentially just replace our buildbot build farm with a combination of appveyor and travis-ci; this would remove FreeBSD from our list of supported platforms, as well as eliminating a diversity of kernel integrations.  However, for the stuff that doesn't work in containers (mostly inotify) we could run one builder on non-container-based infrastructure, and for everything else (integrating with different system toolchains) we can test using Docker: https://docs.travis-ci.com/user/docker/.  I am very much on the fence about this, since I don't want to move backwards in terms of our test coverage, but this would accelerate the contribution process so much that it's probably worth discussing.

I don't think that this will do us any good. Having travis/appveyor to be a first line of review (giving a quick "builds fail/builds probably pass) so that contributors get an immediate "does this have a chance of being merged" is a good thing; but there is certainly value in having the various different platforms. All we need is a bit more tooling around it (and I think txghbot is a good starting place for that).

We also need to look into some extra tooling around tox; mainly around the ratcheting quality checkers -- some form of fetching the latest build from buildbot and downloading it locally to compare, or something.

> 10 years ago or so, we would routinely discover kernel bugs in our integration test harness and they would be different on different platforms.  But today's platform realities are considerably less harsh, since there are a lot more entities in the ecosystem that have taken responsibility for testing that layer of the stack; I couldn't find anything since 2008 or so where we really saw a difference between Fedora and Ubuntu at the kernel level, for example.

The issue in 2016 is not actually the kernel; but OpenSSL and OpenSSH, among other system libraries. Every new version of Fedora has been red on the buildbots for this reason; OpenSSL changed, and we needed to fix our use of it. Worth also noting is that Travis is so horrendously behind in all things Python+Ubuntu (do they even have a current PyPy yet?) that we're not actually testing the platforms people are *using*, which is something I think is valuable that the current system gives us.

> 
> Thoughts?
> 
> -glyph

- Amber
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20160522/8e1a21d7/attachment.sig>

From sank.daniel at gmail.com  Sun May 22 00:10:36 2016
From: sank.daniel at gmail.com (Daniel Sank)
Date: Sat, 21 May 2016 23:10:36 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <CAG=rPVcT1cBmdB3OLN3U8E_khRMVAGotDccW0Ye7sz0ff6L3jQ@mail.gmail.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <CAG=rPVcT1cBmdB3OLN3U8E_khRMVAGotDccW0Ye7sz0ff6L3jQ@mail.gmail.com>
Message-ID: <CAKN9TDLYBQxz7b_H=drU=rxS=EweDmPGM6LJnbosK96imdVkuQ@mail.gmail.com>

Dear all,

While I'm just a lurker, having used Twisted and Github for some time in a
moderately sized team I would like to offer a couple comments:

> This is exactly why issues and PRs should be separated.  If you only have
one
> artifact - the PR - to represent both the issue and the potential
solution, then
> you can't get rid of the potential solution (reject the PR) without also
getting rid
> of the description of the problem.  Github already automatically shows
> anywhere that your PR or issue is mentioned, so all you need to do to say
"how
> about this approach" is to put the words "fixes #NNN" in your PR
description.
> As a bonus, that will make it automatically close the issue when the PR is
> merged.
​
I cannot agree with this enough.

> One of the things I still don't like about github is the tendency for
projects to build
> up huge piles of open PRs, which nobody wants to reject because they're
maybe
> possibly useful, but they won't accept because they don't meet quality
standards.

This is a real problem for my team, and I think it happens because we don't
respect the value of issues enough. We have two kinds of branches

1) Those which associate to a specific issue. If issue #123 is about fixing
the quizzwopper, you can make a branch called 123-fix-quizzwopper. This is
a Good Thing.

2) Those which associate to a person. We name these things like
u/danielsank/fix-quizzwopper. The point of that originally was to make
things more "lightweight" and "dynamic" by allowing folks to make a branch
and write some code asap. While this does often work, it also means that we
have a mountain of near unidentifiable branches with no obvious place to
look for that branch's motivation/history/status/whatever.

Type 1 branches have the extra advantage that they're more likely to
attract useful input from people at the right time, i.e. before the code is
written. It's very frustrating to have a PR representing many hours of
someone's work come in only to realize that you want to respond with "Oh
for the love of all that is good in this world please don't do that".
Discussion in an issue helps avoid that.

> Contributors don't get clear feedback about whether they're expected to
do more
> or whether the project will take it over, and people frequently get mad
about their
> stuff not being merged.  I think by closing PRs that we aren't going to
merge as-is
> we can send a much clearer signal about what the project is taking on
versus
> what it expects external contributors to do more work on.

Again, agreed.

> One thing that pull requests encourage is discussion

It's better for that to happen in issues. I have written code, submitted it
as a PR, realized (via feedback and otherwise) that the code is total crap,
deleted the branch and closed the PR, and then gone back to the issue to
re-evaluate my life choices. This is really useful.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160521/233bdc81/attachment-0002.html>

From glyph at twistedmatrix.com  Sun May 22 00:15:25 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 21 May 2016 23:15:25 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <CAG=rPVcT1cBmdB3OLN3U8E_khRMVAGotDccW0Ye7sz0ff6L3jQ@mail.gmail.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <CAG=rPVcT1cBmdB3OLN3U8E_khRMVAGotDccW0Ye7sz0ff6L3jQ@mail.gmail.com>
Message-ID: <5BF75CD5-4FC2-47F5-AF27-CCF027353BAC@twistedmatrix.com>


> On May 21, 2016, at 10:52 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> On Sat, May 21, 2016 at 3:12 PM, Glyph <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> Hooray!  We're on github now.  Next: there's the question of how to deal with pull requests?
> 
> A few people, including myself modified the text with Git instructions:
>  https://twistedmatrix.com/trac/wiki/TwistedDevelopment#SubmittingaPatch <https://twistedmatrix.com/trac/wiki/TwistedDevelopment#SubmittingaPatch>
> 
> The basic idea is, "for now, if you submit a GitHub PR, you must file a Trac ticket.  You must reference the PR in the Trac ticket,
> and you must reference the Trac ticket in the PR".
> If you want to change that workflow somehow, go ahead, but for starters that should be good enough to get going.
> 
> These two pull requests followed that:
> 
> https://github.com/twisted/twisted/pull/62 <https://github.com/twisted/twisted/pull/62>
> https://github.com/twisted/twisted/pull/63 <https://github.com/twisted/twisted/pull/63>

Sorry, I guess I wasn't clear.  I know that PRs are presently a potential alternative to a diff, and that we are still using Trac for ticketing.  I want to make it possible to avoid using Trac for ticketing; perhaps switching to github issues entirely.  Right now, PRs are still ignored; the thing reviewers are paying attention to is the review queue in Trac, and that is sub-optimal, since it requires new contributors to do something unfamiliar.

> Reviewing: This is the potentially slightly odd part.  I believe a review that doesn't result in acceptance should close the PR.  We need to be careful to always include some text that explains that closing a PR does not mean that the change is rejected, just that the submitter must re-submit.  Initially this would just mean opening a new PR, but Mark Williams is working on a bot to re-open pull requests when a submitter posts a "please review" comment: https://github.com/markrwilliams/txghbot <https://github.com/markrwilliams/txghbot>
> 
> I don't agree with this.  If a PR is reviewed, and the result of the review is "NO WAY", then I am OK with the PR being closed.

I understand that this is your feeling, but do you have any reasoning as to why you believe that this should be the case?  "I don't feel like it" isn't selling me.

> However, if a the result of the review is "needs more work before being accepted", then
> it should be possible for the submitter to add more commits to that PR,

Technically speaking, "PRs" are not things that you add commits to.  You add commits to branches, and the PR points to a branch.  Closing your PR will not - can not, if it's on your own fork - delete your branch.

> and even "git rebase" and squash commits in that PR.

Please do not use squash commits.  See http://mjg59.dreamwidth.org/42759.html.

> That's the process that I followed when I submitted https://github.com/twisted/twisted/pull/62 <https://github.com/twisted/twisted/pull/62>
> 
> By the way, PR 62 is the first pull request that has been successfully submitted to Twisted, and incorporated into the code:
> 
> https://github.com/twisted/twisted/commit/95c49d74136eef420fabdeea85f650da2bc78b07 <https://github.com/twisted/twisted/commit/95c49d74136eef420fabdeea85f650da2bc78b07>
> 
> It is a rather trivial documentation fix, but I will still take credit as the first Pull Request successful submitter! :)

First is first, trivial or not :-).

-glyph


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160521/9aad4d9b/attachment-0002.html>

From hawkowl at atleastfornow.net  Sun May 22 00:21:24 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Sun, 22 May 2016 14:21:24 +0800
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <5BF75CD5-4FC2-47F5-AF27-CCF027353BAC@twistedmatrix.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <CAG=rPVcT1cBmdB3OLN3U8E_khRMVAGotDccW0Ye7sz0ff6L3jQ@mail.gmail.com>
 <5BF75CD5-4FC2-47F5-AF27-CCF027353BAC@twistedmatrix.com>
Message-ID: <29559719-0D07-4F84-8CA1-AB361F98FD38@atleastfornow.net>


> On 22 May 2016, at 14:15, Glyph <glyph at twistedmatrix.com> wrote:
> 
> Sorry, I guess I wasn't clear.  I know that PRs are presently a potential alternative to a diff, and that we are still using Trac for ticketing.  I want to make it possible to avoid using Trac for ticketing; perhaps switching to github issues entirely.

This is an optimistic idea but one that, unfortunately, won't happen yet ;)

The things GitHub Issues need to be competitive with Trac as it stands:

- Allowing triage by people without write.
- Useful search (GitHub search is kind of abysmal)
- Assigning to non-committers.

Without these things (and quite a few more), it's unlikely that GitHub Issues will be as useful to us.

- Amber
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20160522/d2b5e715/attachment.sig>

From glyph at twistedmatrix.com  Sun May 22 00:23:26 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 21 May 2016 23:23:26 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <CAFycZ9e45jppC+ZLWjnrk8TySaRygVzhtbizx4YcD+As3RnDhQ@mail.gmail.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <8a7084d9-4ad1-5906-0081-ac1940f5bf60@thieprojects.ch>
 <B302B632-1207-4DEB-839A-8550278A00C1@twistedmatrix.com>
 <CAFycZ9e45jppC+ZLWjnrk8TySaRygVzhtbizx4YcD+As3RnDhQ@mail.gmail.com>
Message-ID: <F9EAEC3A-9BC9-49FF-88F7-CDF100FE9C23@twistedmatrix.com>


> On May 21, 2016, at 11:04 PM, Adi Roiban <adi at roiban.ro> wrote:
> 
> I am not sure that Travis supports Python on OSX....

It does.  We test on OS X quite extensively on <https://github.com/rackerlabs/mimic>, including a py2app app bundle.

> and it might take some time until there is support for Python on Windows and I am not sure if Travis-ci.org <http://travis-ci.org/> will support this free of charge.

Travis-CI doesn't need to support it; you can use both Travis (for OS X / Linux) and Appveyor (for Windows) separately.  You can check it out here: http://www.appveyor.com

I know some projects are using this quite successfully.

> I think that we can have both... and in the first instance automatically trigger Travis-CI builds and manually trigger buildbot builds.

A lot of projects do follow this workflow, and maybe it will be fine for us.  The real question is; is FreeBSD support really worth it for the cost to contributors, since that's the only platform we currently support but can't test?

> GitLab is an option, as I think that they allow you to bring your own build slaves.... but I think that the current buildbots are fine.

I don't understand.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160521/02538672/attachment-0002.html>

From glyph at twistedmatrix.com  Sun May 22 00:25:33 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 21 May 2016 23:25:33 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <8F94FC42-18C6-4D4E-BAD9-6D9C56E07F69@atleastfornow.net>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <8F94FC42-18C6-4D4E-BAD9-6D9C56E07F69@atleastfornow.net>
Message-ID: <A4BA57E0-5FCF-4529-83E9-E9285970B0D5@twistedmatrix.com>


> On May 21, 2016, at 11:08 PM, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
> 
> The issue in 2016 is not actually the kernel; but OpenSSL and OpenSSH, among other system libraries. Every new version of Fedora has been red on the buildbots for this reason; OpenSSL changed, and we needed to fix our use of it. Worth also noting is that Travis is so horrendously behind in all things Python+Ubuntu (do they even have a current PyPy yet?) that we're not actually testing the platforms people are *using*, which is something I think is valuable that the current system gives us.

The reason I specifically mention the kernel is that different userlands can be tested by using Docker in Travis: <https://docs.travis-ci.com/user/docker/>.  The travis official images are a little faster, because they cache more stuff, but we can build our own base images to try to offset that somewhat.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160521/617c1164/attachment-0002.html>

From sank.daniel at gmail.com  Sun May 22 00:24:56 2016
From: sank.daniel at gmail.com (Daniel Sank)
Date: Sat, 21 May 2016 23:24:56 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <5BF75CD5-4FC2-47F5-AF27-CCF027353BAC@twistedmatrix.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <CAG=rPVcT1cBmdB3OLN3U8E_khRMVAGotDccW0Ye7sz0ff6L3jQ@mail.gmail.com>
 <5BF75CD5-4FC2-47F5-AF27-CCF027353BAC@twistedmatrix.com>
Message-ID: <CAKN9TDKrDPqN_Cuo0G7pqCJpUce4c+9ma3o5Cw5OD+O9U=Z_DA@mail.gmail.com>

All,

> Please do not use squash commits.  See
http://mjg59.dreamwidth.org/42759.html.

Squashing commits is essential to making useful commit histories. Are you
just saying not to use Github's built-in feature which squashes everything
into a _single_ commit? If so, note that you can turn that GUI feature off
so nobody is tempted to use it. That does leave the question of whether you
want people to use merge commits or to rebase their branch on the latest
master before merging so that you always get a fast-forward.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160521/17f40ed3/attachment-0002.html>

From hawkowl at atleastfornow.net  Sun May 22 00:27:58 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Sun, 22 May 2016 14:27:58 +0800
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <CAKN9TDKrDPqN_Cuo0G7pqCJpUce4c+9ma3o5Cw5OD+O9U=Z_DA@mail.gmail.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <CAG=rPVcT1cBmdB3OLN3U8E_khRMVAGotDccW0Ye7sz0ff6L3jQ@mail.gmail.com>
 <5BF75CD5-4FC2-47F5-AF27-CCF027353BAC@twistedmatrix.com>
 <CAKN9TDKrDPqN_Cuo0G7pqCJpUce4c+9ma3o5Cw5OD+O9U=Z_DA@mail.gmail.com>
Message-ID: <E4DA27C4-F8BB-4BAE-8224-54BEEB2B895B@atleastfornow.net>


> On 22 May 2016, at 14:24, Daniel Sank <sank.daniel at gmail.com> wrote:
> 
> All,
> 
> > Please do not use squash commits.  See http://mjg59.dreamwidth.org/42759.html.
> 
> Squashing commits is essential to making useful commit histories. Are you just saying not to use Github's built-in feature which squashes everything into a _single_ commit? If so, note that you can turn that GUI feature off so nobody is tempted to use it. That does leave the question of whether you want people to use merge commits or to rebase their branch on the latest master before merging so that you always get a fast-forward.
> 

The thing is that we don't want fast-forward; fast-forward merging creates awful commit histories with no regard to branches, especially for ones like Twisted where (near) every commit on trunk needs to be a deployable one, and where we may need to revert an entire branch.

- Amber
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20160522/018d914d/attachment.sig>

From hawkowl at atleastfornow.net  Sun May 22 00:30:48 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Sun, 22 May 2016 14:30:48 +0800
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <F9EAEC3A-9BC9-49FF-88F7-CDF100FE9C23@twistedmatrix.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <8a7084d9-4ad1-5906-0081-ac1940f5bf60@thieprojects.ch>
 <B302B632-1207-4DEB-839A-8550278A00C1@twistedmatrix.com>
 <CAFycZ9e45jppC+ZLWjnrk8TySaRygVzhtbizx4YcD+As3RnDhQ@mail.gmail.com>
 <F9EAEC3A-9BC9-49FF-88F7-CDF100FE9C23@twistedmatrix.com>
Message-ID: <5D1A9275-779C-41F3-A6FB-D1418033404F@atleastfornow.net>


> On 22 May 2016, at 14:23, Glyph <glyph at twistedmatrix.com> wrote:
> 
> A lot of projects do follow this workflow, and maybe it will be fine for us.  The real question is; is FreeBSD support really worth it for the cost to contributors, since that's the only platform we currently support but can't test?

I'm guessing that we have more FreeBSD users than Windows users ;)

- Amber
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20160522/e03c39a3/attachment.sig>

From glyph at twistedmatrix.com  Sun May 22 00:32:03 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 21 May 2016 23:32:03 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <29559719-0D07-4F84-8CA1-AB361F98FD38@atleastfornow.net>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <CAG=rPVcT1cBmdB3OLN3U8E_khRMVAGotDccW0Ye7sz0ff6L3jQ@mail.gmail.com>
 <5BF75CD5-4FC2-47F5-AF27-CCF027353BAC@twistedmatrix.com>
 <29559719-0D07-4F84-8CA1-AB361F98FD38@atleastfornow.net>
Message-ID: <C1A3CA84-8507-4749-8252-68CA7C6EEB72@twistedmatrix.com>


> On May 21, 2016, at 11:21 PM, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
> 
> 
>> On 22 May 2016, at 14:15, Glyph <glyph at twistedmatrix.com> wrote:
>> 
>> Sorry, I guess I wasn't clear.  I know that PRs are presently a potential alternative to a diff, and that we are still using Trac for ticketing.  I want to make it possible to avoid using Trac for ticketing; perhaps switching to github issues entirely.
> 
> This is an optimistic idea but one that, unfortunately, won't happen yet ;)
> 
> The things GitHub Issues need to be competitive with Trac as it stands:
> 
> - Allowing triage by people without write.

How are things currently "triaged"?  Do you mean "review"?  If so, I think it would be acceptable to come up with a magic comment for a non-commiter to use to signify that they've fully reviewed a PR.  As it stands, we need committers to "accept" a review by deciding to merge, the only difference here is that it would remain in the review queue until they did so, which I think is acceptable (since if the review isn't accepted, it should have remained in the queue anyway).  We could also have a bot address this edge-case somehow.

> - Useful search (GitHub search is kind of abysmal)

I don't see how Trac's is better.

> - Assigning to non-committers.

Honestly I'm not sure that the non-committer assignment part of the workflow is all that useful.  I know I hardly ever look at report 7, and I very much doubt any non-committer does :).  It's not like we're losing information, either; we still have a record of whose fork the PR points to.

> Without these things (and quite a few more), it's unlikely that GitHub Issues will be as useful to us.


I am curious about the "quite a few more".  There are things which we really need as a critical part of our workflow (primarily: the review queue) and then there are accidents of the way trac works.  Nothing is graven in stone here :).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160521/7dc65730/attachment-0002.html>

From hawkowl at atleastfornow.net  Sun May 22 00:36:14 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Sun, 22 May 2016 14:36:14 +0800
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <C1A3CA84-8507-4749-8252-68CA7C6EEB72@twistedmatrix.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <CAG=rPVcT1cBmdB3OLN3U8E_khRMVAGotDccW0Ye7sz0ff6L3jQ@mail.gmail.com>
 <5BF75CD5-4FC2-47F5-AF27-CCF027353BAC@twistedmatrix.com>
 <29559719-0D07-4F84-8CA1-AB361F98FD38@atleastfornow.net>
 <C1A3CA84-8507-4749-8252-68CA7C6EEB72@twistedmatrix.com>
Message-ID: <E0D4942D-61F9-4372-9BB4-B316009A31BF@atleastfornow.net>


> On 22 May 2016, at 14:32, Glyph <glyph at twistedmatrix.com> wrote:
> 
> 
>> On May 21, 2016, at 11:21 PM, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
>> 
>> 
>>> On 22 May 2016, at 14:15, Glyph <glyph at twistedmatrix.com> wrote:
>>> 
>>> Sorry, I guess I wasn't clear.  I know that PRs are presently a potential alternative to a diff, and that we are still using Trac for ticketing.  I want to make it possible to avoid using Trac for ticketing; perhaps switching to github issues entirely.
>> 
>> This is an optimistic idea but one that, unfortunately, won't happen yet ;)
>> 
>> The things GitHub Issues need to be competitive with Trac as it stands:
>> 
>> - Allowing triage by people without write.
> 
> How are things currently "triaged"?  Do you mean "review"?  If so, I think it would be acceptable to come up with a magic comment for a non-commiter to use to signify that they've fully reviewed a PR.  As it stands, we need committers to "accept" a review by deciding to merge, the only difference here is that it would remain in the review queue until they did so, which I think is acceptable (since if the review isn't accepted, it should have remained in the queue anyway).  We could also have a bot address this edge-case somehow.

Creating a ticket, adding it to the relevant milestone (commit required on GitHub), setting the component (which would be a tag on github, requires commit)...

> 
>> - Useful search (GitHub search is kind of abysmal)
> 
> I don't see how Trac's is better.

It has a GUI rather than being stringly typed ;)

> 
>> - Assigning to non-committers.
> 
> Honestly I'm not sure that the non-committer assignment part of the workflow is all that useful.  I know I hardly ever look at report 7, and I very much doubt any non-committer does :).  It's not like we're losing information, either; we still have a record of whose fork the PR points to.

I look at report 7 :(

> 
>> Without these things (and quite a few more), it's unlikely that GitHub Issues will be as useful to us.
> 
> I am curious about the "quite a few more".  There are things which we really need as a critical part of our workflow (primarily: the review queue) and then there are accidents of the way trac works.  Nothing is graven in stone here :).
> 

I guess there's a lot of things that are an accident of trac, but the things above are useful.

> -glyph

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20160522/bf813601/attachment.sig>

From glyph at twistedmatrix.com  Sun May 22 00:37:00 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 21 May 2016 23:37:00 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <5D1A9275-779C-41F3-A6FB-D1418033404F@atleastfornow.net>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <8a7084d9-4ad1-5906-0081-ac1940f5bf60@thieprojects.ch>
 <B302B632-1207-4DEB-839A-8550278A00C1@twistedmatrix.com>
 <CAFycZ9e45jppC+ZLWjnrk8TySaRygVzhtbizx4YcD+As3RnDhQ@mail.gmail.com>
 <F9EAEC3A-9BC9-49FF-88F7-CDF100FE9C23@twistedmatrix.com>
 <5D1A9275-779C-41F3-A6FB-D1418033404F@atleastfornow.net>
Message-ID: <BD7229E1-0824-4B8E-A0CC-1356621EDA4A@twistedmatrix.com>


> On May 21, 2016, at 11:30 PM, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
> 
> 
>> On 22 May 2016, at 14:23, Glyph <glyph at twistedmatrix.com> wrote:
>> 
>> A lot of projects do follow this workflow, and maybe it will be fine for us.  The real question is; is FreeBSD support really worth it for the cost to contributors, since that's the only platform we currently support but can't test?
> 
> I'm guessing that we have more FreeBSD users than Windows users ;)


I realize it can feel like that sometimes, but Google Analytics suggests the large majority of our visitors (45%) are on Windows.  By contrast, 0.05% are on FreeBSD.  Granted, that's a very high percentage of FreeBSD clients for the Internet at large, but nevertheless, I think your perspective may be slightly statistically skewed.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160521/2984bf91/attachment-0002.html>

From glyph at twistedmatrix.com  Sun May 22 00:37:54 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 21 May 2016 23:37:54 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <BD7229E1-0824-4B8E-A0CC-1356621EDA4A@twistedmatrix.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <8a7084d9-4ad1-5906-0081-ac1940f5bf60@thieprojects.ch>
 <B302B632-1207-4DEB-839A-8550278A00C1@twistedmatrix.com>
 <CAFycZ9e45jppC+ZLWjnrk8TySaRygVzhtbizx4YcD+As3RnDhQ@mail.gmail.com>
 <F9EAEC3A-9BC9-49FF-88F7-CDF100FE9C23@twistedmatrix.com>
 <5D1A9275-779C-41F3-A6FB-D1418033404F@atleastfornow.net>
 <BD7229E1-0824-4B8E-A0CC-1356621EDA4A@twistedmatrix.com>
Message-ID: <A34E521B-F56B-4EE2-AC2C-47DDCE3264B0@twistedmatrix.com>


> On May 21, 2016, at 11:37 PM, Glyph <glyph at twistedmatrix.com> wrote:
> 
> the large majority of our visitors

Sorry.  "plurality" :).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160521/eae2e2e4/attachment-0002.html>

From glyph at twistedmatrix.com  Sun May 22 00:41:54 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 21 May 2016 23:41:54 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <CAKN9TDKrDPqN_Cuo0G7pqCJpUce4c+9ma3o5Cw5OD+O9U=Z_DA@mail.gmail.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <CAG=rPVcT1cBmdB3OLN3U8E_khRMVAGotDccW0Ye7sz0ff6L3jQ@mail.gmail.com>
 <5BF75CD5-4FC2-47F5-AF27-CCF027353BAC@twistedmatrix.com>
 <CAKN9TDKrDPqN_Cuo0G7pqCJpUce4c+9ma3o5Cw5OD+O9U=Z_DA@mail.gmail.com>
Message-ID: <9EAAAB01-15F3-4A14-9F0E-4462B9DD4A7B@twistedmatrix.com>


> On May 21, 2016, at 11:24 PM, Daniel Sank <sank.daniel at gmail.com> wrote:
> 
> Squashing commits is essential to making useful commit histories.

Nope.  It's just a handy hack to work around the commonly-used, broken history viewers (like Github's own) that can't correctly present multi-parent commits.  If you use SourceTree or bzr qlog or anything that correctly collapses merges, you don't need squashes.

Furthermore, if you use squashes, you work around a temporary problem (crummy history viewers - which will probably eventually be fixed) by permanently destroying useful information (the sequence of changes which lead to a larger change).  Of course, I can't stop you from doing this in any meaningful sense, you can always delete commits and just create bigger diffs and I won't be able to tell, but I would prefer it if you don't use squash commits or any other kind of history rewriting on Twisted.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160521/35d60993/attachment-0002.html>

From rodrigc at crodrigues.org  Sun May 22 00:42:50 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Sat, 21 May 2016 23:42:50 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <BD7229E1-0824-4B8E-A0CC-1356621EDA4A@twistedmatrix.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <8a7084d9-4ad1-5906-0081-ac1940f5bf60@thieprojects.ch>
 <B302B632-1207-4DEB-839A-8550278A00C1@twistedmatrix.com>
 <CAFycZ9e45jppC+ZLWjnrk8TySaRygVzhtbizx4YcD+As3RnDhQ@mail.gmail.com>
 <F9EAEC3A-9BC9-49FF-88F7-CDF100FE9C23@twistedmatrix.com>
 <5D1A9275-779C-41F3-A6FB-D1418033404F@atleastfornow.net>
 <BD7229E1-0824-4B8E-A0CC-1356621EDA4A@twistedmatrix.com>
Message-ID: <CAG=rPVc_ApgfqdGmcTzD4k4_ndSUfXD_nTtJcJYys=C0q4p3Fw@mail.gmail.com>

On Sat, May 21, 2016 at 11:37 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
> I realize it can feel like that sometimes, but Google Analytics suggests
> the large majority of our visitors (45%) are on Windows.  By contrast,
> 0.05% are on FreeBSD.  Granted, that's a *very *high percentage of
> FreeBSD clients for the Internet at large, but nevertheless, I think your
> perspective may be slightly statistically skewed.
>

Isn't Google Analytics just telling you what type of OS + web browser is
being used to access the twistedmatrix.com web site?
That isn't the same as telling you who actually uses Twisted in a project
or a piece of code.

Unfortunately, FreeBSD isn't well represented in the third party CI systems
out there such as Travis.
It would be nice if it was, but it isn't.  That's a judgment call that the
Twisted project needs to make whether
to support its own buildbots or not, in order to support configurations not
supported by third party CI systems.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160521/6e08e5c9/attachment-0002.html>

From sank.daniel at gmail.com  Sun May 22 00:42:17 2016
From: sank.daniel at gmail.com (Daniel Sank)
Date: Sat, 21 May 2016 23:42:17 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <A34E521B-F56B-4EE2-AC2C-47DDCE3264B0@twistedmatrix.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <8a7084d9-4ad1-5906-0081-ac1940f5bf60@thieprojects.ch>
 <B302B632-1207-4DEB-839A-8550278A00C1@twistedmatrix.com>
 <CAFycZ9e45jppC+ZLWjnrk8TySaRygVzhtbizx4YcD+As3RnDhQ@mail.gmail.com>
 <F9EAEC3A-9BC9-49FF-88F7-CDF100FE9C23@twistedmatrix.com>
 <5D1A9275-779C-41F3-A6FB-D1418033404F@atleastfornow.net>
 <BD7229E1-0824-4B8E-A0CC-1356621EDA4A@twistedmatrix.com>
 <A34E521B-F56B-4EE2-AC2C-47DDCE3264B0@twistedmatrix.com>
Message-ID: <CAKN9TDLOhm=XOTqk14n5dUPTTHzsbo9v=jYTHPCvAAxjsnhyeg@mail.gmail.com>

I can speak for ~20 scientific research groups who use Twisted via LabRAD's
python API <https://github.com/labrad/pylabrad>. A lot of us use or deploy
to Windows at least some times. So that's around 200 people you've never
heard of who use Twisted on Windows :)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160521/c2458b0f/attachment-0002.html>

From glyph at twistedmatrix.com  Sun May 22 00:45:10 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 21 May 2016 23:45:10 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <CAKN9TDKrDPqN_Cuo0G7pqCJpUce4c+9ma3o5Cw5OD+O9U=Z_DA@mail.gmail.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <CAG=rPVcT1cBmdB3OLN3U8E_khRMVAGotDccW0Ye7sz0ff6L3jQ@mail.gmail.com>
 <5BF75CD5-4FC2-47F5-AF27-CCF027353BAC@twistedmatrix.com>
 <CAKN9TDKrDPqN_Cuo0G7pqCJpUce4c+9ma3o5Cw5OD+O9U=Z_DA@mail.gmail.com>
Message-ID: <2C486713-0289-4B8A-BB96-1AF071C5BBB0@twistedmatrix.com>


> On May 21, 2016, at 11:24 PM, Daniel Sank <sank.daniel at gmail.com> wrote:
> 
> That does leave the question of whether you want people to use merge commits or to rebase their branch on the latest master before merging so that you always get a fast-forward.

Github will never fast-forward, and I never want to see anyone using a client manually push a fast-forward to master,  either.  Every left-parent commit should be something that was code reviewed.

If the changes on master are small, it's fine to just merge master into the branch.  But, in the case of larger changes and resurrecting stale, old PRs, rather than merge 1000s of commits off of master, I actually prefer creating a new branch from current master and merging the old branch into it.

Rebasing an entire branch on master creates new commits that were never tested by CI, and never present in anyone's working copy.  I strongly prefer to avoid this.  Rebase is great functionality, but IMHO there is only one correct way to use it: rebase --interactive, carefully vetting each commit to ensure it still says what you want it to.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160521/e8036826/attachment-0002.html>

From glyph at twistedmatrix.com  Sun May 22 00:46:49 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 21 May 2016 23:46:49 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <CAKN9TDLOhm=XOTqk14n5dUPTTHzsbo9v=jYTHPCvAAxjsnhyeg@mail.gmail.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <8a7084d9-4ad1-5906-0081-ac1940f5bf60@thieprojects.ch>
 <B302B632-1207-4DEB-839A-8550278A00C1@twistedmatrix.com>
 <CAFycZ9e45jppC+ZLWjnrk8TySaRygVzhtbizx4YcD+As3RnDhQ@mail.gmail.com>
 <F9EAEC3A-9BC9-49FF-88F7-CDF100FE9C23@twistedmatrix.com>
 <5D1A9275-779C-41F3-A6FB-D1418033404F@atleastfornow.net>
 <BD7229E1-0824-4B8E-A0CC-1356621EDA4A@twistedmatrix.com>
 <A34E521B-F56B-4EE2-AC2C-47DDCE3264B0@twistedmatrix.com>
 <CAKN9TDLOhm=XOTqk14n5dUPTTHzsbo9v=jYTHPCvAAxjsnhyeg@mail.gmail.com>
Message-ID: <87556E97-55CD-4515-AE57-0C699466E4F2@twistedmatrix.com>


> On May 21, 2016, at 11:42 PM, Daniel Sank <sank.daniel at gmail.com> wrote:
> 
> I can speak for ~20 scientific research groups who use Twisted via LabRAD's python API <https://github.com/labrad/pylabrad>. A lot of us use or deploy to Windows at least some times. So that's around 200 people you've never heard of who use Twisted on Windows :)
> 

Wow, you are just knocking it out of the park with useful feedback in this thread :-).  Any chance I could cajole you into submitting a success story to success at twistedmatrix.com?

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160521/c63c05a3/attachment-0002.html>

From glyph at twistedmatrix.com  Sun May 22 00:55:24 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 21 May 2016 23:55:24 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <CAG=rPVc_ApgfqdGmcTzD4k4_ndSUfXD_nTtJcJYys=C0q4p3Fw@mail.gmail.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <8a7084d9-4ad1-5906-0081-ac1940f5bf60@thieprojects.ch>
 <B302B632-1207-4DEB-839A-8550278A00C1@twistedmatrix.com>
 <CAFycZ9e45jppC+ZLWjnrk8TySaRygVzhtbizx4YcD+As3RnDhQ@mail.gmail.com>
 <F9EAEC3A-9BC9-49FF-88F7-CDF100FE9C23@twistedmatrix.com>
 <5D1A9275-779C-41F3-A6FB-D1418033404F@atleastfornow.net>
 <BD7229E1-0824-4B8E-A0CC-1356621EDA4A@twistedmatrix.com>
 <CAG=rPVc_ApgfqdGmcTzD4k4_ndSUfXD_nTtJcJYys=C0q4p3Fw@mail.gmail.com>
Message-ID: <8BB365BD-3207-4949-8911-96F5713B5654@twistedmatrix.com>


> On May 21, 2016, at 11:42 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> On Sat, May 21, 2016 at 11:37 PM, Glyph <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> 
> I realize it can feel like that sometimes, but Google Analytics suggests the large majority of our visitors (45%) are on Windows.  By contrast, 0.05% are on FreeBSD.  Granted, that's a very high percentage of FreeBSD clients for the Internet at large, but nevertheless, I think your perspective may be slightly statistically skewed.
> 
> Isn't Google Analytics just telling you what type of OS + web browser is being used to access the twistedmatrix.com <http://twistedmatrix.com/> web site?
> That isn't the same as telling you who actually uses Twisted in a project or a piece of code.

Sure, it's not perfect.  But even assuming only 1% of Windows desktop users are actually running any of their Twisted code on Windows, and 100% of FreeBSD users are, that's still roughly 9x as many Windows users as FreeBSD.  I think that's probably a pretty conservative estimate.

> Unfortunately, FreeBSD isn't well represented in the third party CI systems out there such as Travis.
> It would be nice if it was, but it isn't.  That's a judgment call that the Twisted project needs to make whether
> to support its own buildbots or not, in order to support configurations not supported by third party CI systems.

One of the other interesting questions here, beyond "do we want to support it or not" (I think we do want to continue supporting it, in the sense that we want to fix bugs that affect it) is how often FreeBSD breaks; if 99.99% of the time, a change that works on Windows, OS X, and Linux works on FreeBSD, maybe we can still have some FreeBSD CI, but not make it a gating part of the review process.  We can run it periodically, before each release, and in the exceedingly unlikely case that FreeBSD broke, we can roll back the change after the fact.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160521/1a7c03c2/attachment-0002.html>

From glyph at twistedmatrix.com  Sun May 22 01:07:22 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 22 May 2016 00:07:22 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <E0D4942D-61F9-4372-9BB4-B316009A31BF@atleastfornow.net>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <CAG=rPVcT1cBmdB3OLN3U8E_khRMVAGotDccW0Ye7sz0ff6L3jQ@mail.gmail.com>
 <5BF75CD5-4FC2-47F5-AF27-CCF027353BAC@twistedmatrix.com>
 <29559719-0D07-4F84-8CA1-AB361F98FD38@atleastfornow.net>
 <C1A3CA84-8507-4749-8252-68CA7C6EEB72@twistedmatrix.com>
 <E0D4942D-61F9-4372-9BB4-B316009A31BF@atleastfornow.net>
Message-ID: <502E0A94-97A4-438F-B08D-6546DC57AAAD@twistedmatrix.com>


> On May 21, 2016, at 11:36 PM, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
> 
> 
>> On 22 May 2016, at 14:32, Glyph <glyph at twistedmatrix.com> wrote:
>> 
>> 
>>> On May 21, 2016, at 11:21 PM, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
>>> 
>>> 
>>>> On 22 May 2016, at 14:15, Glyph <glyph at twistedmatrix.com> wrote:
>>>> 
>>>> Sorry, I guess I wasn't clear.  I know that PRs are presently a potential alternative to a diff, and that we are still using Trac for ticketing.  I want to make it possible to avoid using Trac for ticketing; perhaps switching to github issues entirely.
>>> 
>>> This is an optimistic idea but one that, unfortunately, won't happen yet ;)
>>> 
>>> The things GitHub Issues need to be competitive with Trac as it stands:
>>> 
>>> - Allowing triage by people without write.
>> 
>> How are things currently "triaged"?  Do you mean "review"?  If so, I think it would be acceptable to come up with a magic comment for a non-commiter to use to signify that they've fully reviewed a PR.  As it stands, we need committers to "accept" a review by deciding to merge, the only difference here is that it would remain in the review queue until they did so, which I think is acceptable (since if the review isn't accepted, it should have remained in the queue anyway).  We could also have a bot address this edge-case somehow.
> 
> Creating a ticket, adding it to the relevant milestone (commit required on GitHub), setting the component (which would be a tag on github, requires commit)...

I don't see us getting a lot of non-committer triage of this kind.  And I'm not sure that's really an important part of our workflow - do you really feel that it is?  Frankly when non-committers try to put their changes into a milestone or start adding custom keywords, it's almost always wrong.

We also don't use "component" for much.  If we just got rid of it, would any part of our process change?

>>> - Useful search (GitHub search is kind of abysmal)
>> 
>> I don't see how Trac's is better.
> 
> It has a GUI rather than being stringly typed ;)

Oh, you're talking about "query", i.e. https://twistedmatrix.com/trac/query, not "search", i.e. https://twistedmatrix.com/trac/search ?

GitHub's search is actually structured, not stringly typed; there's a bit of GUI here: https://github.com/search/advanced.  It does resolve down to a string query, but so does the trac "custom query" eventually (in that it goes into a URL you can copy and paste).

But, this is all sort of abstract: what kinds of queries would you do against our ticket database in Trac that are not possible in GitHub's query language?  Personally after some exploration of GitHub's query language I have found it's actually more expressive for what I want to do most of the time; particularly querying across projects which is obviously not possible with trac...

>>> - Assigning to non-committers.
>> 
>> Honestly I'm not sure that the non-committer assignment part of the workflow is all that useful.  I know I hardly ever look at report 7, and I very much doubt any non-committer does :).  It's not like we're losing information, either; we still have a record of whose fork the PR points to.
> 
> I look at report 7 :(

That's not a counterexample: you are a committer :-).

I do actually have a recurring personal to-do item to check report 7 nowadays, but almost all of my doing-stuff-on-the-tracker has to do with me getting emails about actionable state changes (somebody reviewed your change, you should merge it), rather than scanning that list.

>>> Without these things (and quite a few more), it's unlikely that GitHub Issues will be as useful to us.
>> 
>> I am curious about the "quite a few more".  There are things which we really need as a critical part of our workflow (primarily: the review queue) and then there are accidents of the way trac works.  Nothing is graven in stone here :).
> 
> I guess there's a lot of things that are an accident of trac, but the things above are useful.

I'm not disputing that, but I'm still a little confused about how exactly they're useful, rather than just different.  Can you give some examples of things you do regularly?

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160522/0a6dbf9b/attachment-0002.html>

From hs at ox.cx  Sun May 22 01:09:26 2016
From: hs at ox.cx (Hynek Schlawack)
Date: Sun, 22 May 2016 09:09:26 +0200
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <BD7229E1-0824-4B8E-A0CC-1356621EDA4A@twistedmatrix.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <8a7084d9-4ad1-5906-0081-ac1940f5bf60@thieprojects.ch>
 <B302B632-1207-4DEB-839A-8550278A00C1@twistedmatrix.com>
 <CAFycZ9e45jppC+ZLWjnrk8TySaRygVzhtbizx4YcD+As3RnDhQ@mail.gmail.com>
 <F9EAEC3A-9BC9-49FF-88F7-CDF100FE9C23@twistedmatrix.com>
 <5D1A9275-779C-41F3-A6FB-D1418033404F@atleastfornow.net>
 <BD7229E1-0824-4B8E-A0CC-1356621EDA4A@twistedmatrix.com>
Message-ID: <34FE5B3F-9608-4D5C-B5B4-10E225B5613F@ox.cx>


>>> A lot of projects do follow this workflow, and maybe it will be fine for us.  The real question is; is FreeBSD support really worth it for the cost to contributors, since that's the only platform we currently support but can't test?
>> 
>> I'm guessing that we have more FreeBSD users than Windows users ;)
> 
> 
> I realize it can feel like that sometimes, but Google Analytics suggests the large majority of our visitors (45%) are on Windows.  By contrast, 0.05% are on FreeBSD.  Granted, that's a very high percentage of FreeBSD clients for the Internet at large, but nevertheless, I think your perspective may be slightly statistically skewed.

I don’t think there’s a meaningful correlation between what people use to browse docs vs. what people run Twisted on.

E.g. Netflix & WhatsApp run on FreeBSD; do you think their tech staff has FreeBSD on their desktops? :)

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160522/16006ab4/attachment-0002.html>

From hs at ox.cx  Sun May 22 01:15:07 2016
From: hs at ox.cx (Hynek Schlawack)
Date: Sun, 22 May 2016 09:15:07 +0200
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <B302B632-1207-4DEB-839A-8550278A00C1@twistedmatrix.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <8a7084d9-4ad1-5906-0081-ac1940f5bf60@thieprojects.ch>
 <B302B632-1207-4DEB-839A-8550278A00C1@twistedmatrix.com>
Message-ID: <D84A34C0-D092-48EF-A0BD-8B134F8A0CDB@ox.cx>

Ah finally a fine bike shedding thread that gets everyone involved. ;)

> Right now, we need to manually vet each change before sending it to buildbots, because they are shared mutable environments that we can't afford to have running untrusted code automatically.  If we could switch to Travis and Appveyor, then we could let them worry about malicious code, which would allow contributors to get instant feedback, rather than waiting for reviewers to manually run the builders.

I have two points to add:

1. Appveyor is terribly slow and sometimes a bit flaky.  I use it for argon2_cffi’s wheels and it drives me bonkers.  It should never become an essential part of anything.  As a first line of defense it’s fine of course.
2. PyCA has a workflow for Jenkins & GitHub by telling a bot to vet changes.  You can see it here in action: https://github.com/pyca/cryptography/pull/2914#issuecomment-220592167 AFAIK that’s been mostly Paul’s work.  Aren’t you kind of his boss or something *hint hint*? ;)


From glyph at twistedmatrix.com  Sun May 22 01:20:48 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 22 May 2016 00:20:48 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <34FE5B3F-9608-4D5C-B5B4-10E225B5613F@ox.cx>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <8a7084d9-4ad1-5906-0081-ac1940f5bf60@thieprojects.ch>
 <B302B632-1207-4DEB-839A-8550278A00C1@twistedmatrix.com>
 <CAFycZ9e45jppC+ZLWjnrk8TySaRygVzhtbizx4YcD+As3RnDhQ@mail.gmail.com>
 <F9EAEC3A-9BC9-49FF-88F7-CDF100FE9C23@twistedmatrix.com>
 <5D1A9275-779C-41F3-A6FB-D1418033404F@atleastfornow.net>
 <BD7229E1-0824-4B8E-A0CC-1356621EDA4A@twistedmatrix.com>
 <34FE5B3F-9608-4D5C-B5B4-10E225B5613F@ox.cx>
Message-ID: <E691121B-E356-4B86-B5C7-7180462183CE@twistedmatrix.com>


> On May 22, 2016, at 12:09 AM, Hynek Schlawack <hs at ox.cx> wrote:
> 
> 
>>>> A lot of projects do follow this workflow, and maybe it will be fine for us.  The real question is; is FreeBSD support really worth it for the cost to contributors, since that's the only platform we currently support but can't test?
>>> 
>>> I'm guessing that we have more FreeBSD users than Windows users ;)
>> 
>> 
>> I realize it can feel like that sometimes, but Google Analytics suggests the large majority of our visitors (45%) are on Windows.  By contrast, 0.05% are on FreeBSD.  Granted, that's a very high percentage of FreeBSD clients for the Internet at large, but nevertheless, I think your perspective may be slightly statistically skewed.
> 
> I don’t think there’s a meaningful correlation between what people use to browse docs vs. what people run Twisted on.
> 
> E.g. Netflix & WhatsApp run on FreeBSD; do you think their tech staff has FreeBSD on their desktops? :)

The existence of Netflix & WhatsApp doesn't indicate no correlation, just not a perfect correlation :).  Although I suppose I'm being unfair there in that some of the Windows users represent actual FreeBSD users as well.

Nevertheless, I think Windows consumers are less frequently acculturated to speaking up in open-source land, so if anything we are underestimating their prevalence.

Unrelatedly, the existence of such high-profile FreeBSD users is encouraging :).  Perhaps this is more important to keep in the critical path than I was assuming.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160522/0ad20782/attachment-0002.html>

From glyph at twistedmatrix.com  Sun May 22 01:22:21 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 22 May 2016 00:22:21 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <D84A34C0-D092-48EF-A0BD-8B134F8A0CDB@ox.cx>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <8a7084d9-4ad1-5906-0081-ac1940f5bf60@thieprojects.ch>
 <B302B632-1207-4DEB-839A-8550278A00C1@twistedmatrix.com>
 <D84A34C0-D092-48EF-A0BD-8B134F8A0CDB@ox.cx>
Message-ID: <F92AC05C-1B55-423E-8F45-5E7527EABD6C@twistedmatrix.com>


> On May 22, 2016, at 12:15 AM, Hynek Schlawack <hs at ox.cx> wrote:
> 
> Ah finally a fine bike shedding thread that gets everyone involved. ;)
> 
>> Right now, we need to manually vet each change before sending it to buildbots, because they are shared mutable environments that we can't afford to have running untrusted code automatically.  If we could switch to Travis and Appveyor, then we could let them worry about malicious code, which would allow contributors to get instant feedback, rather than waiting for reviewers to manually run the builders.
> 
> I have two points to add:
> 
> 1. Appveyor is terribly slow and sometimes a bit flaky.  I use it for argon2_cffi’s wheels and it drives me bonkers.  It should never become an essential part of anything.  As a first line of defense it’s fine of course.

This is a very useful data point.  I do not have any concrete experience with it and I was kind of wondering about this.

> 2. PyCA has a workflow for Jenkins & GitHub by telling a bot to vet changes.  You can see it here in action: https://github.com/pyca/cryptography/pull/2914#issuecomment-220592167 AFAIK that’s been mostly Paul’s work.  Aren’t you kind of his boss or something *hint hint*? ;)

Thanks for the promotion; I'll be sure to let him know on Monday.

However, it's because I know Paul and I know what a complete nightmare it is to set up and maintain infrastructure like that that I was hoping to cheat and get away with it.  But what I'm hearing from you in this thread is pretty compelling to me that we are going to need to follow a mostly Cryptography-like workflow after all, asking a bot to run some buildbots.

-glyph


From glyph at twistedmatrix.com  Sun May 22 01:23:36 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 22 May 2016 00:23:36 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <D84A34C0-D092-48EF-A0BD-8B134F8A0CDB@ox.cx>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <8a7084d9-4ad1-5906-0081-ac1940f5bf60@thieprojects.ch>
 <B302B632-1207-4DEB-839A-8550278A00C1@twistedmatrix.com>
 <D84A34C0-D092-48EF-A0BD-8B134F8A0CDB@ox.cx>
Message-ID: <B4FD7372-C18A-4BEC-B351-6799C8B44FC1@twistedmatrix.com>


> On May 22, 2016, at 12:15 AM, Hynek Schlawack <hs at ox.cx> wrote:
> 
> Ah finally a fine bike shedding thread that gets everyone involved. ;)

OKAY NOW THAT I'VE GOT YOU ALL HERE LET'S TALK ABOUT https://twistedmatrix.com/trac/ticket/288

*slams a metal grating shut over the only exit from the mailing list*

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160522/91ef4788/attachment-0002.html>

From rodrigc at crodrigues.org  Sun May 22 01:24:18 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Sun, 22 May 2016 00:24:18 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <B302B632-1207-4DEB-839A-8550278A00C1@twistedmatrix.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <8a7084d9-4ad1-5906-0081-ac1940f5bf60@thieprojects.ch>
 <B302B632-1207-4DEB-839A-8550278A00C1@twistedmatrix.com>
Message-ID: <CAG=rPVcLNdzLqR4T6Gsax8Yr_j5xdacrO_m_mjg3DsSDu6VSrw@mail.gmail.com>

On Sat, May 21, 2016 at 6:04 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
> Right now, we need to manually vet each change before sending it to
> buildbots, because they are shared mutable environments that we can't
> afford to have running untrusted code automatically.
>

This is quite useful actually.  We would need a tool to do this.

For example, if I want to build this pr:
https://github.com/twisted/twisted/pull/63

Then the tool could poke the buildbots to do something like:

git clone https://github.com/twisted/twisted testspace
cd testspace
git fetch origin pull/62/head:pr/62
git checkout pr/62
[run the tests]

Are there enough scripts in the buildbot infrastructure which could be
extended to do this?

 --
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160522/5804ae0c/attachment-0002.html>

From hawkowl at atleastfornow.net  Sun May 22 01:25:24 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Sun, 22 May 2016 15:25:24 +0800
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <B4FD7372-C18A-4BEC-B351-6799C8B44FC1@twistedmatrix.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <8a7084d9-4ad1-5906-0081-ac1940f5bf60@thieprojects.ch>
 <B302B632-1207-4DEB-839A-8550278A00C1@twistedmatrix.com>
 <D84A34C0-D092-48EF-A0BD-8B134F8A0CDB@ox.cx>
 <B4FD7372-C18A-4BEC-B351-6799C8B44FC1@twistedmatrix.com>
Message-ID: <F97071AE-960C-4803-9F10-6C1694F91D9C@atleastfornow.net>


> On 22 May 2016, at 15:23, Glyph <glyph at twistedmatrix.com> wrote:
> 
> 
>> On May 22, 2016, at 12:15 AM, Hynek Schlawack <hs at ox.cx> wrote:
>> 
>> Ah finally a fine bike shedding thread that gets everyone involved. ;)
> 
> OKAY NOW THAT I'VE GOT YOU ALL HERE LET'S TALK ABOUT https://twistedmatrix.com/trac/ticket/288
> 
> *slams a metal grating shut over the only exit from the mailing list*
> 
JEAN-CHA^W^W GLYPH YOU FOOL, YOU'VE LOCKED US ALL IN!

> -glyph
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20160522/b20a4507/attachment.sig>

From glyph at twistedmatrix.com  Sun May 22 01:36:28 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 22 May 2016 00:36:28 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <CAG=rPVcLNdzLqR4T6Gsax8Yr_j5xdacrO_m_mjg3DsSDu6VSrw@mail.gmail.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <8a7084d9-4ad1-5906-0081-ac1940f5bf60@thieprojects.ch>
 <B302B632-1207-4DEB-839A-8550278A00C1@twistedmatrix.com>
 <CAG=rPVcLNdzLqR4T6Gsax8Yr_j5xdacrO_m_mjg3DsSDu6VSrw@mail.gmail.com>
Message-ID: <43CBD316-83BE-466C-AC5D-CA382DD8FC9D@twistedmatrix.com>


> On May 22, 2016, at 12:24 AM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> On Sat, May 21, 2016 at 6:04 PM, Glyph <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> 
> Right now, we need to manually vet each change before sending it to buildbots, because they are shared mutable environments that we can't afford to have running untrusted code automatically.
> 
> This is quite useful actually.  We would need a tool to do this.
> 
> For example, if I want to build this pr:   https://github.com/twisted/twisted/pull/63 <https://github.com/twisted/twisted/pull/63>
> 
> Then the tool could poke the buildbots to do something like:
> 
> git clone https://github.com/twisted/twisted <https://github.com/twisted/twisted> testspace
> cd testspace
> git fetch origin pull/62/head:pr/62
> git checkout pr/62
> [run the tests]
> 
> Are there enough scripts in the buildbot infrastructure which could be extended to do this?

The only new line would be fetching the test ref.  Everything else on the buildbots basically works that way already, just checking out branches.

(Please nobody try to do the clever thing where you configure buildbot to automatically pull all PRs, that would effectively negate any security protections...)

I've been assuming that in the worst-case scenario, we'd do what Cryptography does and have a bot that polls for special comments and then triggers buildbot in exactly this way.  Perhaps I should have made that assumption explicit, I thought it was ticketed somewhere in Braid already.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160522/80a87bed/attachment-0002.html>

From ralphm at ik.nu  Sun May 22 02:12:12 2016
From: ralphm at ik.nu (Ralph Meijer)
Date: Sun, 22 May 2016 10:12:12 +0200
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <43CBD316-83BE-466C-AC5D-CA382DD8FC9D@twistedmatrix.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <8a7084d9-4ad1-5906-0081-ac1940f5bf60@thieprojects.ch>
 <B302B632-1207-4DEB-839A-8550278A00C1@twistedmatrix.com>
 <CAG=rPVcLNdzLqR4T6Gsax8Yr_j5xdacrO_m_mjg3DsSDu6VSrw@mail.gmail.com>
 <43CBD316-83BE-466C-AC5D-CA382DD8FC9D@twistedmatrix.com>
Message-ID: <85574479-93A8-4BB2-92EB-ACB969BB57D0@ik.nu>

On May 22, 2016 9:36:28 AM GMT+02:00, Glyph <glyph at twistedmatrix.com> wrote:
>[..]
>(Please nobody try to do the clever thing where you configure buildbot
>to automatically pull all PRs, that would effectively negate any
>security protections...)
>
>I've been assuming that in the worst-case scenario, we'd do what
>Cryptography does and have a bot that polls for special comments and
>then triggers buildbot in exactly this way.  Perhaps I should have made
>that assumption explicit, I thought it was ticketed somewhere in Braid
>already.

The Jenkins plugin for GitHub PR triggers has this feature, too. However, it also has a feature to whitelist users and GitHub teams so that PRs/commits can trigger automatically for them. Maybe that's a thing for us, too?


-- 
ralphm



From mithrandi at mithrandi.net  Sun May 22 04:18:37 2016
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Sun, 22 May 2016 10:18:37 +0000
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <85574479-93A8-4BB2-92EB-ACB969BB57D0@ik.nu>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <8a7084d9-4ad1-5906-0081-ac1940f5bf60@thieprojects.ch>
 <B302B632-1207-4DEB-839A-8550278A00C1@twistedmatrix.com>
 <CAG=rPVcLNdzLqR4T6Gsax8Yr_j5xdacrO_m_mjg3DsSDu6VSrw@mail.gmail.com>
 <43CBD316-83BE-466C-AC5D-CA382DD8FC9D@twistedmatrix.com>
 <85574479-93A8-4BB2-92EB-ACB969BB57D0@ik.nu>
Message-ID: <CAMcKhMRJ+9ZCVgKL-8551_bnde_3N1VB420H46ujBP=xtwC05Q@mail.gmail.com>

On Sun, 22 May 2016 at 10:12 Ralph Meijer <ralphm at ik.nu> wrote:

> On May 22, 2016 9:36:28 AM GMT+02:00, Glyph <glyph at twistedmatrix.com>
> wrote:
> >[..]
> >(Please nobody try to do the clever thing where you configure buildbot
> >to automatically pull all PRs, that would effectively negate any
> >security protections...)
> >
> >I've been assuming that in the worst-case scenario, we'd do what
> >Cryptography does and have a bot that polls for special comments and
> >then triggers buildbot in exactly this way.  Perhaps I should have made
> >that assumption explicit, I thought it was ticketed somewhere in Braid
> >already.
>
> The Jenkins plugin for GitHub PR triggers has this feature, too. However,
> it also has a feature to whitelist users and GitHub teams so that
> PRs/commits can trigger automatically for them. Maybe that's a thing for
> us, too?
>

I don't think we need a whitelist, we can just automatically build branches
that are pushed to the twisted/twisted repository. If you can push a branch
there, you can also push a change directly to trunk, so you can already
execute arbitrary code on the buildbots.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160522/52462577/attachment-0002.html>

From clayton.daley at gmail.com  Sun May 22 07:18:21 2016
From: clayton.daley at gmail.com (Clayton Daley)
Date: Sun, 22 May 2016 08:18:21 -0500
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <975701FF-3E24-4072-8795-642339FADE1B@twistedmatrix.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <CACqnu4U8XonGd1W0US8W3n=F_66er_y68fJ96OunqetvcJO8jg@mail.gmail.com>
 <149A8FA9-2519-4D16-8C33-D4867B0AC0A7@twistedmatrix.com>
 <CACKEAnXnrh696csCs5SCMSRkNyQxyKC4VWpnVoDwT+TEEa1dHQ@mail.gmail.com>
 <975701FF-3E24-4072-8795-642339FADE1B@twistedmatrix.com>
Message-ID: <CACKEAnX_0uBe8z1WomDFK-ReiTqYLbQ95f-RmW625TN643Hfjw@mail.gmail.com>

>
> The thing is, if you perceive it as "hostile" that a project closes a PR -
> i.e. "says that they're not going to do more work on it" - that is a
> cultural problem; it suggests a certain implicit level of passive
> aggression in opening a PR which I don't want to assume.  It's sort of like
> having a culture where you can just send anybody an email asking them to do
> whatever and it would be "hostile" for them to refuse.  In such a culture
> people don't say "yes", but they do start to ignore messages  Closing the
> PR is a more accurate reflection of *reality* - the project (twisted) is
> not going to do anything about the PR in its current state, so it shouldn't
> be left open.  It also clearly demarcates the completion of a review.
>
...

I'd much rather our new contributors get a little confused about the
> culturally unusual step of closing a PR than to have their work be
> accidentally but systematically discriminated against in favor of people
> who know how to bug the right people in IRC or email.
>

It's your party, but I think this vastly undervalues first impressions in
OSS engagement.  From all the projects I've contributed to on Github -- yes
technically Github not Git though Bitbucket has equivalent features (and
unlimited private repos for free!) -- closing means "this is off the
table".  It's a nice clear signal that there's nothing the contributor can
do to fix it -- e.g. I had an LSP-valid change that passed all tests run
afoul of some obscure PHP method signature limitation when mixed with other
packages.

I'll wager only the active contributors will remember the proposed subtlety
a month from now.  As a big break from Github norms, It's going to hit
everyone else at the worst time... a first PR submission.  That's the
moment when a contributor is trying to get a sense of the culture of the
team that manages the project.  They're at their most vulnerable and
violating *their* norms significantly increases the odds that they'll leave
the fix in a private fork and disengage.

Twisted operates at a different level so this may not be a bad thing.  You
may benefit from actively discouraging dabblers -- especially given
resource constraints.  But there aren't going to be a lot of "first PR"
folks on this list to point out the effect of this break from norms.

Clayton Daley

On Sun, May 22, 2016 at 12:12 AM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On May 21, 2016, at 7:25 PM, Clayton Daley <clayton.daley at gmail.com>
> wrote:
>
> To qualify my comments, I've yet to contribute to Twisted because I don't
> have a good enough grasp of its internals, but I have contributed to a
> variety of Git-based OSS projects.  I definitely get uneasy with the
> general idea that we're trying to "replicate workflow A from Trac in
> tangentially related Git PR feature".
>
>
> The workflow is not "from Trac".  The instantiation in Trac is not optimal
> either, which is why I described the abstract desired workflow separately
> from our existing instantiation.
>
> We're in Git. We're hoping to solicit PRs from Git users. Git users will
> be used to the way PRs are used in other OSS Git projects.
>
>
> I think you mean "GitHub".  Git PRs don't work at *all* like GitHub PRs.
> :).
>
> Glyph has some valid criticisms of the situation in some projects, but it
> should still be the starting point. For example, closing a PR strikes me as
> a bad idea -- for lack of a better word, it feels "hostile" to me and
> certainly unwelcoming.
>
>
> The thing is, if you perceive it as "hostile" that a project closes a PR -
> i.e. "says that they're not going to do more work on it" - that is a
> cultural problem; it suggests a certain implicit level of passive
> aggression in opening a PR which I don't want to assume.  It's sort of like
> having a culture where you can just send anybody an email asking them to do
> whatever and it would be "hostile" for them to refuse.  In such a culture
> people don't say "yes", but they do start to ignore messages  Closing the
> PR is a more accurate reflection of *reality* - the project (twisted) is
> not going to do anything about the PR in its current state, so it shouldn't
> be left open.  It also clearly demarcates the completion of a review.
>
> People feel very differently about workflow, of course, but I've
> definitely heard from other OSS maintainers that the average workflow of
> volunteer projects often devolves into a huge backlog of un-reviewed stuff,
> which obscures the new stuff, and if you want something to actually get
> reviewed and move along you need to know the maintainers of the project and
> ask them personally.
>
> I'd much rather our new contributors get a little confused about the
> culturally unusual step of closing a PR than to have their work be
> accidentally but systematically discriminated against in favor of people
> who know how to bug the right people in IRC or email.
>
> In several of the projects I've seen, Git tags fill these roles. Piwik has
> a "needs review" tag -- the short list for reviewers. Looks like it's a
> manual add, but maybe it could be automated. Once reviewed, Piwik has tags
> like "Tests & QA". ZendFramework has a generic "awaiting author update".
>
>
> This was my original idea. The problem with GitHub labels ("Git tags" are
> something completely different) is that they can't be applied by external
> contributors.  You need write access to the repository to be able to
> manipulate them.  It's very important to our workflow that external
> contributors be able to re-submit their PRs.  We could have a bot for that
> (again, this was the original plan).  But it seems like using the open /
> closed state to reflect the we will do some work on this / we won't do any
> more work on this is actually closer to the "native" state of github.
>
> To address Glyph's concerns about lingering PRs, perhaps the combination
> of:
>
>    - A policy like "a reviewer must accept, close, or tag with one of the
>    next step tags"
>
> This doesn't address the shortcomings of labels, to wit, external
> contributors need the ability to manipulate them somehow, and if a PR isn't
> "in review" by default, then they have to whisper some magic comment to
> make anyone take a look at it.  If we use open/closed, then the default
> action of "open a PR" will cause someone to look at it, even if our bot is
> nonexistent or temporarily offline.
>
>
>    - A short list of common next steps like "code quality", "needs
>    tests", "second opinion", "not review ready"... plus a generic "other
>    author action"
>
> The next steps are always the same: "respond to the review".  The review
> may include any of these, any combination of these, or also possibly
> questions that the author must answer.  Formally separating these would be
> a weird tweak on our current workflow that I don't see helping.
>
>
>    - Auto-close tickets except those with "needs review" or "second
>    opinion" (say) 30 days after the last action.
>
> I think you mean "PRs", not "tickets"?  Issues (which are closer to trac
> "tickets") can remain open indefinitely.  I am not really in favor of any
> kind of auto-closing or expiration given that the project has wildly
> variable levels of resources depending on people's spare time; sometimes we
> have a whole bunch of reviewers active and can get to things within 24
> hours, sometimes we're severely overtaxed and can't look at anything for 6
> weeks.
>
> Drive-by comments on a PR are sometimes helpful, but should be used
>> sparingly.  Mostly, discussion should happen on *issues*, not PRs.  A PR
>> is a suggested resolution to a problem, and we might reject one solution,
>> but an issue should describe the problem itself.
>
>
> While an Issue is a good place for discussion about a problem, it lacks
> the reference code often included in a PR.  You can't ask "how about this
> approach" without showing the approach.  As an added bonus, most systems
> run travis on PRs so you get a sense of "this approach is thorough" or
> "this idea still breaks something".
>
>
> This is exactly why issues and PRs should be separated.  If you only have
> one artifact - the PR - to represent both the issue and the potential
> solution, then you can't get rid of the potential solution (reject the PR)
> without also getting rid of the description of the problem.  Github already
> automatically shows anywhere that your PR or issue is mentioned, so all you
> need to do to say "how about this approach" is to put the words "fixes
> #NNN" in your PR description.  As a bonus, that will make it automatically
> close the issue when the PR is merged.
>
> -glyph
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160522/500d4777/attachment-0002.html>

From glyph at twistedmatrix.com  Sun May 22 15:22:44 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 22 May 2016 14:22:44 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <CACKEAnX_0uBe8z1WomDFK-ReiTqYLbQ95f-RmW625TN643Hfjw@mail.gmail.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <CACqnu4U8XonGd1W0US8W3n=F_66er_y68fJ96OunqetvcJO8jg@mail.gmail.com>
 <149A8FA9-2519-4D16-8C33-D4867B0AC0A7@twistedmatrix.com>
 <CACKEAnXnrh696csCs5SCMSRkNyQxyKC4VWpnVoDwT+TEEa1dHQ@mail.gmail.com>
 <975701FF-3E24-4072-8795-642339FADE1B@twistedmatrix.com>
 <CACKEAnX_0uBe8z1WomDFK-ReiTqYLbQ95f-RmW625TN643Hfjw@mail.gmail.com>
Message-ID: <9532D337-A8BD-4CF5-81D4-003AE82FA2BA@twistedmatrix.com>


> On May 22, 2016, at 6:18 AM, Clayton Daley <clayton.daley at gmail.com> wrote:
> 
> The thing is, if you perceive it as "hostile" that a project closes a PR - i.e. "says that they're not going to do more work on it" - that is a cultural problem; it suggests a certain implicit level of passive aggression in opening a PR which I don't want to assume.  It's sort of like having a culture where you can just send anybody an email asking them to do whatever and it would be "hostile" for them to refuse.  In such a culture people don't say "yes", but they do start to ignore messages  Closing the PR is a more accurate reflection of reality - the project (twisted) is not going to do anything about the PR in its current state, so it shouldn't be left open.  It also clearly demarcates the completion of a review.
> ... 
> I'd much rather our new contributors get a little confused about the culturally unusual step of closing a PR than to have their work be accidentally but systematically discriminated against in favor of people who know how to bug the right people in IRC or email.
> 
> It's your party, but I think this vastly undervalues first impressions in OSS engagement.  From all the projects I've contributed to on Github -- yes technically Github not Git though Bitbucket has equivalent features (and unlimited private repos for free!) -- closing means "this is off the table".  It's a nice clear signal that there's nothing the contributor can do to fix it -- e.g. I had an LSP-valid change that passed all tests run afoul of some obscure PHP method signature limitation when mixed with other packages.
>  
> I'll wager only the active contributors will remember the proposed subtlety a month from now.  As a big break from Github norms, It's going to hit everyone else at the worst time... a first PR submission.  That's the moment when a contributor is trying to get a sense of the culture of the team that manages the project.  They're at their most vulnerable and violating *their* norms significantly increases the odds that they'll leave the fix in a private fork and disengage.
> 
> Twisted operates at a different level so this may not be a bad thing.  You may benefit from actively discouraging dabblers -- especially given resource constraints.  But there aren't going to be a lot of "first PR" folks on this list to point out the effect of this break from norms.

This is roughly the same story I've been getting for the last decade and a half:

"You can't:

require test coverage,
require documentation,
require coding standard compliance,
require people to file a ticket before sending a patch to the mailing list,

that's a terrible burden to put on new contributors!"

Somehow we've survived much longer than most projects, and while some would say "in spite of" these restrictions, I think it's "because of".  So, we are not trying to "discourage dabblers"; we would like new contributors who want to contribute only a little bit.  So while I don't want to throw up arbitrary barriers, if you aren't willing to invest the effort to even read a single comment on your PR explaining why it was closed and how to reopen it, I cannot imagine that chances are good that you'll read the rest of the comments explaining what changes need to be made and make them effectively.

Further, people who contribute trivial changes that can be immediately merged, like documentation typos, won't need to deal with this, because they won't see the intermediary "needs feedback" closed state; they'll just get their PRs accepted immediately.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160522/ffaf8b82/attachment-0002.html>

From clayton.daley at gmail.com  Sun May 22 19:12:58 2016
From: clayton.daley at gmail.com (Clayton Daley)
Date: Sun, 22 May 2016 20:12:58 -0500
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <9532D337-A8BD-4CF5-81D4-003AE82FA2BA@twistedmatrix.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <CACqnu4U8XonGd1W0US8W3n=F_66er_y68fJ96OunqetvcJO8jg@mail.gmail.com>
 <149A8FA9-2519-4D16-8C33-D4867B0AC0A7@twistedmatrix.com>
 <CACKEAnXnrh696csCs5SCMSRkNyQxyKC4VWpnVoDwT+TEEa1dHQ@mail.gmail.com>
 <975701FF-3E24-4072-8795-642339FADE1B@twistedmatrix.com>
 <CACKEAnX_0uBe8z1WomDFK-ReiTqYLbQ95f-RmW625TN643Hfjw@mail.gmail.com>
 <9532D337-A8BD-4CF5-81D4-003AE82FA2BA@twistedmatrix.com>
Message-ID: <CACKEAnXMMYzwQoJ7s7Sx0+WEP94hboF5Ppuc-pUORdQPDkmDNw@mail.gmail.com>

>
> "You can't:
>
>    - require test coverage,
>    - require documentation,
>    - require coding standard compliance,
>    - require people to file a ticket before sending a patch to the
>    mailing list,
>
> The first three of these are *already* norms in all of the OSS projects of
this caliber and the 4th doesn't make sense in a Github/Bitbucket/Gitlab
world (and I fortunately avoided its predecessors).  In fact, I'd be a
little worried if the first there weren't required in a project.
ResourceSpace is the only one I can think of that doesn't require them and
I wouldn't touch it with a 10 foot pole if there were acceptable (free)
alternatives.  So I don't see the link between your success enforcing three
norms of good OSS projects and your desire to break a 4th.

===

The idea that PRs are a substantial burden has caused me pause.  Normally,
a PR is a chance to give back to a project rather than freeload.  In most
projects, new features are part of a virtuous cycle:  a new feature tends
to benefit a large fraction of the user base and expand the user base...
which draws more contributors.

Especially given the recent deprecations (old, unmaintained protocols), it
seems that Twisted doesn't work like this.  If another user adds another
protocol, it doesn't make the system better for most users.  In fact, it
makes sense that it actually increases the maintenance burden.

I tried to look for myself, but was reminded that I don't know the
internals well enough... are patches on non-central protocols a big part of
the backlog?  Or is the backlog mostly core features (like reactors or IO
infrastructure) that most projects depend upon?

Clayton Daley

On Sun, May 22, 2016 at 4:22 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On May 22, 2016, at 6:18 AM, Clayton Daley <clayton.daley at gmail.com>
> wrote:
>
> The thing is, if you perceive it as "hostile" that a project closes a PR -
>> i.e. "says that they're not going to do more work on it" - that is a
>> cultural problem; it suggests a certain implicit level of passive
>> aggression in opening a PR which I don't want to assume.  It's sort of like
>> having a culture where you can just send anybody an email asking them to do
>> whatever and it would be "hostile" for them to refuse.  In such a culture
>> people don't say "yes", but they do start to ignore messages  Closing the
>> PR is a more accurate reflection of *reality* - the project (twisted) is
>> not going to do anything about the PR in its current state, so it shouldn't
>> be left open.  It also clearly demarcates the completion of a review.
>>
> ...
>
> I'd much rather our new contributors get a little confused about the
>> culturally unusual step of closing a PR than to have their work be
>> accidentally but systematically discriminated against in favor of people
>> who know how to bug the right people in IRC or email.
>>
>
> It's your party, but I think this vastly undervalues first impressions in
> OSS engagement.  From all the projects I've contributed to on Github -- yes
> technically Github not Git though Bitbucket has equivalent features (and
> unlimited private repos for free!) -- closing means "this is off the
> table".  It's a nice clear signal that there's nothing the contributor can
> do to fix it -- e.g. I had an LSP-valid change that passed all tests run
> afoul of some obscure PHP method signature limitation when mixed with other
> packages.
>
> I'll wager only the active contributors will remember the proposed
> subtlety a month from now.  As a big break from Github norms, It's going to
> hit everyone else at the worst time... a first PR submission.  That's the
> moment when a contributor is trying to get a sense of the culture of the
> team that manages the project.  They're at their most vulnerable and
> violating *their* norms significantly increases the odds that they'll leave
> the fix in a private fork and disengage.
>
> Twisted operates at a different level so this may not be a bad thing.  You
> may benefit from actively discouraging dabblers -- especially given
> resource constraints.  But there aren't going to be a lot of "first PR"
> folks on this list to point out the effect of this break from norms.
>
>
> This is roughly the same story I've been getting for the last decade and a
> half:
>
> "You can't:
>
>
>    - require test coverage,
>    - require documentation,
>    - require coding standard compliance,
>    - require people to file a ticket before sending a patch to the
>    mailing list,
>
>
> that's a terrible burden to put on new contributors!"
>
> Somehow we've survived much longer than most projects, and while some
> would say "in spite of" these restrictions, I think it's "because of".  So,
> we are not trying to "discourage dabblers"; we would like new contributors
> who want to contribute only a little bit.  So while I don't want to throw
> up arbitrary barriers, if you aren't willing to invest the effort to even
> read a single comment on your PR explaining why it was closed and how to
> reopen it, I cannot imagine that chances are good that you'll read the rest
> of the comments explaining what changes need to be made and make them
> effectively.
>
> Further, people who contribute trivial changes that can be immediately
> merged, like documentation typos, won't need to deal with this, because
> they won't *see* the intermediary "needs feedback" closed state; they'll
> just get their PRs accepted immediately.
>
> -glyph
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160522/69291b0e/attachment-0002.html>

From donald at stufft.io  Sun May 22 19:28:15 2016
From: donald at stufft.io (Donald Stufft)
Date: Sun, 22 May 2016 21:28:15 -0400
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <CACKEAnXMMYzwQoJ7s7Sx0+WEP94hboF5Ppuc-pUORdQPDkmDNw@mail.gmail.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <CACqnu4U8XonGd1W0US8W3n=F_66er_y68fJ96OunqetvcJO8jg@mail.gmail.com>
 <149A8FA9-2519-4D16-8C33-D4867B0AC0A7@twistedmatrix.com>
 <CACKEAnXnrh696csCs5SCMSRkNyQxyKC4VWpnVoDwT+TEEa1dHQ@mail.gmail.com>
 <975701FF-3E24-4072-8795-642339FADE1B@twistedmatrix.com>
 <CACKEAnX_0uBe8z1WomDFK-ReiTqYLbQ95f-RmW625TN643Hfjw@mail.gmail.com>
 <9532D337-A8BD-4CF5-81D4-003AE82FA2BA@twistedmatrix.com>
 <CACKEAnXMMYzwQoJ7s7Sx0+WEP94hboF5Ppuc-pUORdQPDkmDNw@mail.gmail.com>
Message-ID: <37808425-5A44-4EE2-A399-9DE68DBFDF92@stufft.io>

Twisted has been enforcing these rules since before they were considered part of the norm and I believe that Glyph was referencing is that back then people said that Twisted was going to fail or w/e because of requiring those things. 

Sent from my iPhone

> On May 22, 2016, at 9:12 PM, Clayton Daley <clayton.daley at gmail.com> wrote:
> 
> The first three of these are *already* norms in all of the OSS projects of this caliber




From meejah at meejah.ca  Sun May 22 21:19:45 2016
From: meejah at meejah.ca (meejah)
Date: Mon, 23 May 2016 07:19:45 +0400
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <F92AC05C-1B55-423E-8F45-5E7527EABD6C@twistedmatrix.com>
 (glyph@twistedmatrix.com's message of "Sun, 22 May 2016 00:22:21
 -0700")
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <8a7084d9-4ad1-5906-0081-ac1940f5bf60@thieprojects.ch>
 <B302B632-1207-4DEB-839A-8550278A00C1@twistedmatrix.com>
 <D84A34C0-D092-48EF-A0BD-8B134F8A0CDB@ox.cx>
 <F92AC05C-1B55-423E-8F45-5E7527EABD6C@twistedmatrix.com>
Message-ID: <867felwje6.fsf@atlantis.meejah.ca>

Glyph <glyph at twistedmatrix.com> writes:

> This is a very useful data point.  I do not have any concrete
> experience with it and I was kind of wondering about this.

FWIW, Tahoe-LAFS *just* started using AppVeyor too, and I also find it
horrifically slow. That said, the Tahoe tests run pretty slowly on a
VirtualBox windows VM as well, but not nearly as slowly as AppVeyor. Or,
at least that's my impression so far.

p.s. If anyone is interested in running a Windows buildbot slave for
Tahoe I'm very sure it would be appreciated -- please speak up on the
tahoe mailing list :) (my understanding of the setup is that the
buildbot slaves don't run random PR code, only post-merged-to-master
code).

-- 
meejah



From meejah at meejah.ca  Sun May 22 22:39:04 2016
From: meejah at meejah.ca (meejah)
Date: Mon, 23 May 2016 08:39:04 +0400
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <CACKEAnX_0uBe8z1WomDFK-ReiTqYLbQ95f-RmW625TN643Hfjw@mail.gmail.com>
 (Clayton Daley's message of "Sun, 22 May 2016 08:18:21 -0500")
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <CACqnu4U8XonGd1W0US8W3n=F_66er_y68fJ96OunqetvcJO8jg@mail.gmail.com>
 <149A8FA9-2519-4D16-8C33-D4867B0AC0A7@twistedmatrix.com>
 <CACKEAnXnrh696csCs5SCMSRkNyQxyKC4VWpnVoDwT+TEEa1dHQ@mail.gmail.com>
 <975701FF-3E24-4072-8795-642339FADE1B@twistedmatrix.com>
 <CACKEAnX_0uBe8z1WomDFK-ReiTqYLbQ95f-RmW625TN643Hfjw@mail.gmail.com>
Message-ID: <86oa7xv15j.fsf@atlantis.meejah.ca>


Personally, I find closing PRs that aren't going to be merged "soon"
mostly-beneficial. Even if it *might* be perceived as "hostile" by some
contributers, a simple explanation should suffice. (And, if simply
closing a PR with a nice note explaining, "please re-open when X is
fixed/changed" scares away a potential contributer I have my doubts as
to whether they would fix X if you *didn't* close it...)

There's nothing worse than trolling through open PRs only to find that
the last comment is "fix up X, Y, and Z and we'll merge" because then
you have to (re-)figure out if X, Y and Z have been done etc. On the
flip side, it's nice to know if your PR has problems or not.

The other plus of closing is that it's way more obvious when the PR is
once again considered ready for merging (even without 'completely baked'
workflows like Twisted's) and keeps the "open PRs" list (hopefully!)
shorter.

-- 
meejah



From rodrigc at crodrigues.org  Sun May 22 22:56:28 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Sun, 22 May 2016 21:56:28 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <86oa7xv15j.fsf@atlantis.meejah.ca>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <CACqnu4U8XonGd1W0US8W3n=F_66er_y68fJ96OunqetvcJO8jg@mail.gmail.com>
 <149A8FA9-2519-4D16-8C33-D4867B0AC0A7@twistedmatrix.com>
 <CACKEAnXnrh696csCs5SCMSRkNyQxyKC4VWpnVoDwT+TEEa1dHQ@mail.gmail.com>
 <975701FF-3E24-4072-8795-642339FADE1B@twistedmatrix.com>
 <CACKEAnX_0uBe8z1WomDFK-ReiTqYLbQ95f-RmW625TN643Hfjw@mail.gmail.com>
 <86oa7xv15j.fsf@atlantis.meejah.ca>
Message-ID: <CAG=rPVe8W+Pju7=sb4VBiN=y4EEoKMEWz6JKxrUeJVL8f0vhxg@mail.gmail.com>

I submitted this PR, which is now closed:
https://github.com/twisted/twisted/pull/62

I don't want to re-open that PR, but I am using that as an example
As an example, if I wanted to re-open that, how would I go about doing it?

I am not an administrator of the Twisted GitHub project, so on that web
link,
there is no option for me to re-open the PR.

Are you suggesting that I would need to
   -> create a new branch in my repo with new commits
   -> create a new pull request

?

--
Craig

On Sun, May 22, 2016 at 9:39 PM, meejah <meejah at meejah.ca> wrote:

>
> closing a PR with a nice note explaining, "please re-open when X is
> fixed/changed" scares away a potential contributer I have my doubts as
> to whether they would fix X if you *didn't* close it...)
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160522/5dbebb76/attachment-0002.html>

From hawkowl at atleastfornow.net  Sun May 22 22:58:56 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Mon, 23 May 2016 12:58:56 +0800
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <CAG=rPVe8W+Pju7=sb4VBiN=y4EEoKMEWz6JKxrUeJVL8f0vhxg@mail.gmail.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <CACqnu4U8XonGd1W0US8W3n=F_66er_y68fJ96OunqetvcJO8jg@mail.gmail.com>
 <149A8FA9-2519-4D16-8C33-D4867B0AC0A7@twistedmatrix.com>
 <CACKEAnXnrh696csCs5SCMSRkNyQxyKC4VWpnVoDwT+TEEa1dHQ@mail.gmail.com>
 <975701FF-3E24-4072-8795-642339FADE1B@twistedmatrix.com>
 <CACKEAnX_0uBe8z1WomDFK-ReiTqYLbQ95f-RmW625TN643Hfjw@mail.gmail.com>
 <86oa7xv15j.fsf@atlantis.meejah.ca>
 <CAG=rPVe8W+Pju7=sb4VBiN=y4EEoKMEWz6JKxrUeJVL8f0vhxg@mail.gmail.com>
Message-ID: <583D0470-A5B3-426F-98D5-6ED6DEB461D3@atleastfornow.net>

Mark has been working on a bot which would reopen it with a comment: https://github.com/markrwilliams/txghbot

- Amber

> On 23 May 2016, at 12:56, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> I submitted this PR, which is now closed: https://github.com/twisted/twisted/pull/62
> 
> I don't want to re-open that PR, but I am using that as an example
> As an example, if I wanted to re-open that, how would I go about doing it?
> 
> I am not an administrator of the Twisted GitHub project, so on that web link,
> there is no option for me to re-open the PR.
> 
> Are you suggesting that I would need to
>    -> create a new branch in my repo with new commits
>    -> create a new pull request
> 
> ?
> 
> --
> Craig
> 
> On Sun, May 22, 2016 at 9:39 PM, meejah <meejah at meejah.ca> wrote:
> 
> closing a PR with a nice note explaining, "please re-open when X is
> fixed/changed" scares away a potential contributer I have my doubts as
> to whether they would fix X if you *didn't* close it...)
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20160523/438b789a/attachment.sig>

From mithrandi at mithrandi.net  Sun May 22 23:51:52 2016
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Mon, 23 May 2016 05:51:52 +0000
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <583D0470-A5B3-426F-98D5-6ED6DEB461D3@atleastfornow.net>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <CACqnu4U8XonGd1W0US8W3n=F_66er_y68fJ96OunqetvcJO8jg@mail.gmail.com>
 <149A8FA9-2519-4D16-8C33-D4867B0AC0A7@twistedmatrix.com>
 <CACKEAnXnrh696csCs5SCMSRkNyQxyKC4VWpnVoDwT+TEEa1dHQ@mail.gmail.com>
 <975701FF-3E24-4072-8795-642339FADE1B@twistedmatrix.com>
 <CACKEAnX_0uBe8z1WomDFK-ReiTqYLbQ95f-RmW625TN643Hfjw@mail.gmail.com>
 <86oa7xv15j.fsf@atlantis.meejah.ca>
 <CAG=rPVe8W+Pju7=sb4VBiN=y4EEoKMEWz6JKxrUeJVL8f0vhxg@mail.gmail.com>
 <583D0470-A5B3-426F-98D5-6ED6DEB461D3@atleastfornow.net>
Message-ID: <CAMcKhMQqNnbowaLd9dBnOeA2qS+v76ezUHEpAOj-FagMp2peSg@mail.gmail.com>

Note that even without the bot, I believe you can just create a new PR for
the same branch, so it's not *too* bad, but definitely a little clunky.

On Mon, 23 May 2016 at 06:59 Amber "Hawkie" Brown <hawkowl at atleastfornow.net>
wrote:

> Mark has been working on a bot which would reopen it with a comment:
> https://github.com/markrwilliams/txghbot
>
> - Amber
>
> > On 23 May 2016, at 12:56, Craig Rodrigues <rodrigc at crodrigues.org>
> wrote:
> >
> > I submitted this PR, which is now closed:
> https://github.com/twisted/twisted/pull/62
> >
> > I don't want to re-open that PR, but I am using that as an example
> > As an example, if I wanted to re-open that, how would I go about doing
> it?
> >
> > I am not an administrator of the Twisted GitHub project, so on that web
> link,
> > there is no option for me to re-open the PR.
> >
> > Are you suggesting that I would need to
> >    -> create a new branch in my repo with new commits
> >    -> create a new pull request
> >
> > ?
> >
> > --
> > Craig
> >
> > On Sun, May 22, 2016 at 9:39 PM, meejah <meejah at meejah.ca> wrote:
> >
> > closing a PR with a nice note explaining, "please re-open when X is
> > fixed/changed" scares away a potential contributer I have my doubts as
> > to whether they would fix X if you *didn't* close it...)
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160523/9f79eeff/attachment-0002.html>

From glyph at twistedmatrix.com  Mon May 23 11:54:58 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 23 May 2016 10:54:58 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <CACKEAnXMMYzwQoJ7s7Sx0+WEP94hboF5Ppuc-pUORdQPDkmDNw@mail.gmail.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <CACqnu4U8XonGd1W0US8W3n=F_66er_y68fJ96OunqetvcJO8jg@mail.gmail.com>
 <149A8FA9-2519-4D16-8C33-D4867B0AC0A7@twistedmatrix.com>
 <CACKEAnXnrh696csCs5SCMSRkNyQxyKC4VWpnVoDwT+TEEa1dHQ@mail.gmail.com>
 <975701FF-3E24-4072-8795-642339FADE1B@twistedmatrix.com>
 <CACKEAnX_0uBe8z1WomDFK-ReiTqYLbQ95f-RmW625TN643Hfjw@mail.gmail.com>
 <9532D337-A8BD-4CF5-81D4-003AE82FA2BA@twistedmatrix.com>
 <CACKEAnXMMYzwQoJ7s7Sx0+WEP94hboF5Ppuc-pUORdQPDkmDNw@mail.gmail.com>
Message-ID: <A55EAA10-3E6E-4066-8ED8-5067D140AA74@twistedmatrix.com>


> On May 22, 2016, at 18:12, Clayton Daley <clayton.daley at gmail.com> wexternalote:
> 
> "You can't:
> require test coverage,
> require documentation,
> require coding standard compliance,
> require people to file a ticket before sending a patch to the mailing list,
> The first three of these are *already* norms in all of the OSS projects of this caliber and the 4th doesn't make sense in a Github/Bitbucket/Gitlab world (and I fortunately avoided its predecessors).  In fact, I'd be a little worried if the first there weren't required in a project.  ResourceSpace is the only one I can think of that doesn't require them and I wouldn't touch it with a 10 foot pole if there were acceptable (free) alternatives.  So I don't see the link between your success enforcing three norms of good OSS projects and your desire to break a 4th.

To make a long story short: we pretty much invented these norms, and were doing them a long time before other projects got on the bandwagon, over many, very loud objections.

That said, I don't want to overstate the case.  Test coverage was a huge deal.  Doc coverage was a huge deal.  This idea with PRs is a very small thing, maybe not the best idea, and not something we're unanimous about or dead set on.  But the "all your friends are jumping off a bridge" argument against doing it just isn't very compelling.

> The idea that PRs are a substantial burden has caused me pause.  Normally, a PR is a chance to give back to a project rather than freeload.  In most projects, new features are part of a virtuous cycle:  a new feature tends to benefit a large fraction of the user base and expand the user base... which draws more contributors.

The issue is not that PRs are, inherently, a "burden".  But, before I try to rephrase the issue with too many simultaneously open PRs, I should probably describe the tremendous asymmetry between core maintainers and external contributors.

This asymmetry is general to all open source projects, not particularly specific to Twisted at all.  If you listen to Nadia Eghbal's various comments about funding open source (motivated by <https://medium.com/@nayafia/how-i-stumbled-upon-the-internet-s-biggest-blind-spot-b9aa23618c58#.vy4hlzcr4>) you hear this complaint repeated by lots of project maintainers.

External contributors typically have an initial interest in landing one "contribution", which is something that benefits them (whether personally or their company) specifically, rather than something that benefits the community at large.  Transforming that initial interest into a long-term commitment to the project is very challenging for maintainers.

Even if an improvement is specific to the contributor who is making it, of course, there will be others like them who want similar improvements, so it's never a purely selfish or purely altruistic motivation for making the contribution; it's a mix.  And general benefits are good for the core maintainers, of course, since it makes their long-term maintenance job easier, and it does attract more people to the project.

But that benefit has to be balanced with a cost.  The cost is that it takes time and energy to code-review contributions.  This is the source of a lot of friction between core maintainers and external contributors: contributors feel that they are generously giving their time and energy to the project, and it's rude of the project to make them jump through any hoops to get it accepted, whether that's test coverage, documentation, pre-commit code review, coding standard compliance, or, in this case, learning a slightly weird workflow.

External contributors can affect this balance a lot, by making sure that their contributions are already as close as possible to acceptable.  But even if they do, the ratio of external contributors to core maintainers is almost always far greater than 1; the only way that external contributors can _really_ affect this balance is to become core maintainers :).

And this asymmetry brings us to why it's important to keep the 'Review Queue' short.  To rephrase what I said earlier in this thread, if there are so many open PRs that reviewers don't know which ones to look at first, then the sorting algorithm will be "whichever ones my friends want me to look at first", which means we need to maintain a clear division between things-we-are-looking-at and things-we-are-not-looking-at, to maximize the effectiveness of the limiting factor of code reviewer time for impact on the latency of time it takes to get feedback on a potential change.

Sorry that this is a bit long-winded but I really just object to the premise that the point is that I don't care about contributors. I care about contributors a great deal; this is why I want a carefully designed process that doesn't shut them out or waste their time.

> Especially given the recent deprecations (old, unmaintained protocols), it seems that Twisted doesn't work like this.  If another user adds another protocol, it doesn't make the system better for most users.  In fact, it makes sense that it actually increases the maintenance burden.

This is true of all features for all projects, though.  More code == more maintenance.

> I tried to look for myself, but was reminded that I don't know the internals well enough... are patches on non-central protocols a big part of the backlog?  Or is the backlog mostly core features (like reactors or IO infrastructure) that most projects depend upon?

I don't think we have any good metrics on the backlog, unfortunately.  But certainly most of the maintenance work has been maintenance, like porting existing code to python 3, improving test coverage, and implementing improvements to TLS.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160523/cbb71a50/attachment-0002.html>

From glyph at twistedmatrix.com  Mon May 23 11:55:43 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 23 May 2016 10:55:43 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <86oa7xv15j.fsf@atlantis.meejah.ca>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <CACqnu4U8XonGd1W0US8W3n=F_66er_y68fJ96OunqetvcJO8jg@mail.gmail.com>
 <149A8FA9-2519-4D16-8C33-D4867B0AC0A7@twistedmatrix.com>
 <CACKEAnXnrh696csCs5SCMSRkNyQxyKC4VWpnVoDwT+TEEa1dHQ@mail.gmail.com>
 <975701FF-3E24-4072-8795-642339FADE1B@twistedmatrix.com>
 <CACKEAnX_0uBe8z1WomDFK-ReiTqYLbQ95f-RmW625TN643Hfjw@mail.gmail.com>
 <86oa7xv15j.fsf@atlantis.meejah.ca>
Message-ID: <3C0BBD4D-F460-4507-BCD2-824549DBA029@twistedmatrix.com>


> On May 22, 2016, at 9:39 PM, meejah <meejah at meejah.ca> wrote:
> 
> 
> Personally, I find closing PRs that aren't going to be merged "soon"
> mostly-beneficial. Even if it *might* be perceived as "hostile" by some
> contributers, a simple explanation should suffice. (And, if simply
> closing a PR with a nice note explaining, "please re-open when X is
> fixed/changed" scares away a potential contributer I have my doubts as
> to whether they would fix X if you *didn't* close it...)
> 
> There's nothing worse than trolling through open PRs only to find that
> the last comment is "fix up X, Y, and Z and we'll merge" because then
> you have to (re-)figure out if X, Y and Z have been done etc. On the
> flip side, it's nice to know if your PR has problems or not.
> 
> The other plus of closing is that it's way more obvious when the PR is
> once again considered ready for merging (even without 'completely baked'
> workflows like Twisted's) and keeps the "open PRs" list (hopefully!)
> shorter.

Thanks for the feedback; this mirrors my reasoning pretty much exactly :).

-glyph




From glyph at twistedmatrix.com  Mon May 23 11:57:31 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 23 May 2016 10:57:31 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <CAMcKhMQqNnbowaLd9dBnOeA2qS+v76ezUHEpAOj-FagMp2peSg@mail.gmail.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <CACqnu4U8XonGd1W0US8W3n=F_66er_y68fJ96OunqetvcJO8jg@mail.gmail.com>
 <149A8FA9-2519-4D16-8C33-D4867B0AC0A7@twistedmatrix.com>
 <CACKEAnXnrh696csCs5SCMSRkNyQxyKC4VWpnVoDwT+TEEa1dHQ@mail.gmail.com>
 <975701FF-3E24-4072-8795-642339FADE1B@twistedmatrix.com>
 <CACKEAnX_0uBe8z1WomDFK-ReiTqYLbQ95f-RmW625TN643Hfjw@mail.gmail.com>
 <86oa7xv15j.fsf@atlantis.meejah.ca>
 <CAG=rPVe8W+Pju7=sb4VBiN=y4EEoKMEWz6JKxrUeJVL8f0vhxg@mail.gmail.com>
 <583D0470-A5B3-426F-98D5-6ED6DEB461D3@atleastfornow.net>
 <CAMcKhMQqNnbowaLd9dBnOeA2qS+v76ezUHEpAOj-FagMp2peSg@mail.gmail.com>
Message-ID: <FD92E7C4-6FD0-4702-B7EE-6975FA4290A1@twistedmatrix.com>


> On May 22, 2016, at 10:51 PM, Tristan Seligmann <mithrandi at mithrandi.net> wrote:
> 
> Note that even without the bot, I believe you can just create a new PR for the same branch, so it's not *too* bad, but definitely a little clunky.

Many of my comments have had to do why we want this kind of process generally, rather than why specifically closing PRs is the way I'd prefer to go; this is one benefit, which is that even if our bot infrastructure breaks down, there's a clear workaround available to contributors.  If resubmitting requires a label change on an existing *open* PR there's not really any way to do that if the bot is temporarily offline.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160523/cf4272df/attachment-0002.html>

From sank.daniel at gmail.com  Mon May 23 12:08:25 2016
From: sank.daniel at gmail.com (Daniel Sank)
Date: Mon, 23 May 2016 11:08:25 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <A55EAA10-3E6E-4066-8ED8-5067D140AA74@twistedmatrix.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <CACqnu4U8XonGd1W0US8W3n=F_66er_y68fJ96OunqetvcJO8jg@mail.gmail.com>
 <149A8FA9-2519-4D16-8C33-D4867B0AC0A7@twistedmatrix.com>
 <CACKEAnXnrh696csCs5SCMSRkNyQxyKC4VWpnVoDwT+TEEa1dHQ@mail.gmail.com>
 <975701FF-3E24-4072-8795-642339FADE1B@twistedmatrix.com>
 <CACKEAnX_0uBe8z1WomDFK-ReiTqYLbQ95f-RmW625TN643Hfjw@mail.gmail.com>
 <9532D337-A8BD-4CF5-81D4-003AE82FA2BA@twistedmatrix.com>
 <CACKEAnXMMYzwQoJ7s7Sx0+WEP94hboF5Ppuc-pUORdQPDkmDNw@mail.gmail.com>
 <A55EAA10-3E6E-4066-8ED8-5067D140AA74@twistedmatrix.com>
Message-ID: <CAKN9TDKnxSgqt2ogyv4jnwRRSLw0TGf1Xq-AouSHpcVH+d6E5A@mail.gmail.com>

FWIW I thought of another "open source" community which uses a similar idea
to closing pull requests if they won't be accepted in their current form:
Stack Exchange.

I mostly frequent Physics Stack Exchange <http://physics.stackexchange.com/>.
At any time some number of the questions on the front page are either
"closed" or "on hold" for not living up to site standards in some way.
We've asked almost exactly the same question as is being asked in this
thread: does closing unfit questions discourage new users so much as to
outweigh the benefits to site quality? I won't pretend to have an
authoritative answer to this question, but I will mention the steps we've
taken to help make sure new users aren't put off.

1. We have a help center (like all other Stack Exchange sites) explaining
the rules and system. It's not great though, and its shortcomings show up
all the time as new users do get confused about the rules. I think if
anything this is just an indication that contributing guidelines need to be
really clear about what the various signals from the maintainers mean.

2. It's really helpful to leave a comment on unfit questions explaining
what the problem is and *how the poster can improve it*. Stack Exchange has
canned close reasons, but they're rarely sufficient in my opinion. I leave
comments like "Welcome to Physics Stack Exchange! I think there's an
interesting question here but we have some rules...Please see the [help
center](link)...". Starting the comment with something positive and
directing the user to official guidelines seems rather helpful, although I
can't provide metrics.

3. Our chat room is extremely easy to access and people there are friendly.
IRC is great but I just clicked around the Twisted website for a minute and
couldn't find any indication that the twisted IRC channel exists.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160523/91a51fc8/attachment-0002.html>

From clayton.daley at gmail.com  Mon May 23 12:56:24 2016
From: clayton.daley at gmail.com (Clayton Daley)
Date: Mon, 23 May 2016 13:56:24 -0500
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <CAKN9TDKnxSgqt2ogyv4jnwRRSLw0TGf1Xq-AouSHpcVH+d6E5A@mail.gmail.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <CACqnu4U8XonGd1W0US8W3n=F_66er_y68fJ96OunqetvcJO8jg@mail.gmail.com>
 <149A8FA9-2519-4D16-8C33-D4867B0AC0A7@twistedmatrix.com>
 <CACKEAnXnrh696csCs5SCMSRkNyQxyKC4VWpnVoDwT+TEEa1dHQ@mail.gmail.com>
 <975701FF-3E24-4072-8795-642339FADE1B@twistedmatrix.com>
 <CACKEAnX_0uBe8z1WomDFK-ReiTqYLbQ95f-RmW625TN643Hfjw@mail.gmail.com>
 <9532D337-A8BD-4CF5-81D4-003AE82FA2BA@twistedmatrix.com>
 <CACKEAnXMMYzwQoJ7s7Sx0+WEP94hboF5Ppuc-pUORdQPDkmDNw@mail.gmail.com>
 <A55EAA10-3E6E-4066-8ED8-5067D140AA74@twistedmatrix.com>
 <CAKN9TDKnxSgqt2ogyv4jnwRRSLw0TGf1Xq-AouSHpcVH+d6E5A@mail.gmail.com>
Message-ID: <CACKEAnXVYKoownT=5JC_i5Hxtd-jc3u6O_BF5LhqqNU4en=DbA@mail.gmail.com>

>
> I mostly frequent Physics Stack Exchange
> <http://physics.stackexchange.com/>. At any time some number of the
> questions on the front page are either "closed" or "on hold" for not living
> up to site standards in some way. We've asked almost exactly the same
> question as is being asked in this thread: does closing unfit questions
> discourage new users so much as to outweigh the benefits to site quality? I
> won't pretend to have an authoritative answer to this question, but I will
> mention the steps we've taken to help make sure new users aren't put off.

...


+1 for some guidelines from a similar policy

Note that we're actually discussing one step more extreme.  Closing poor
questions is common across SE so the issue only affects new OPs. We're
talking about a break from community norms... more like Physics deciding to
close questions after the first answer is added.

We should also consider any unintended side-effects due to Github's default
searches behavior ("open"):

[image: Inline image 1]
Closing PRs will make them less likely to be found by searchers.  If every
PR has an issue (common for bug fixes, less common for new features), this
is less of a problem -- is this something the bot would need to verify/fix?

Clayton Daley

On Mon, May 23, 2016 at 1:08 PM, Daniel Sank <sank.daniel at gmail.com> wrote:

> FWIW I thought of another "open source" community which uses a similar
> idea to closing pull requests if they won't be accepted in their current
> form: Stack Exchange.
>
> I mostly frequent Physics Stack Exchange
> <http://physics.stackexchange.com/>. At any time some number of the
> questions on the front page are either "closed" or "on hold" for not living
> up to site standards in some way. We've asked almost exactly the same
> question as is being asked in this thread: does closing unfit questions
> discourage new users so much as to outweigh the benefits to site quality? I
> won't pretend to have an authoritative answer to this question, but I will
> mention the steps we've taken to help make sure new users aren't put off.
>
> 1. We have a help center (like all other Stack Exchange sites) explaining
> the rules and system. It's not great though, and its shortcomings show up
> all the time as new users do get confused about the rules. I think if
> anything this is just an indication that contributing guidelines need to be
> really clear about what the various signals from the maintainers mean.
>
> 2. It's really helpful to leave a comment on unfit questions explaining
> what the problem is and *how the poster can improve it*. Stack Exchange
> has canned close reasons, but they're rarely sufficient in my opinion. I
> leave comments like "Welcome to Physics Stack Exchange! I think there's an
> interesting question here but we have some rules...Please see the [help
> center](link)...". Starting the comment with something positive and
> directing the user to official guidelines seems rather helpful, although I
> can't provide metrics.
>
> 3. Our chat room is extremely easy to access and people there are
> friendly. IRC is great but I just clicked around the Twisted website for a
> minute and couldn't find any indication that the twisted IRC channel exists.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160523/d0502370/attachment-0002.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: image.png
Type: image/png
Size: 8192 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20160523/d0502370/attachment-0002.png>

From glyph at twistedmatrix.com  Mon May 23 13:04:06 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 23 May 2016 12:04:06 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <CACKEAnXVYKoownT=5JC_i5Hxtd-jc3u6O_BF5LhqqNU4en=DbA@mail.gmail.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <CACqnu4U8XonGd1W0US8W3n=F_66er_y68fJ96OunqetvcJO8jg@mail.gmail.com>
 <149A8FA9-2519-4D16-8C33-D4867B0AC0A7@twistedmatrix.com>
 <CACKEAnXnrh696csCs5SCMSRkNyQxyKC4VWpnVoDwT+TEEa1dHQ@mail.gmail.com>
 <975701FF-3E24-4072-8795-642339FADE1B@twistedmatrix.com>
 <CACKEAnX_0uBe8z1WomDFK-ReiTqYLbQ95f-RmW625TN643Hfjw@mail.gmail.com>
 <9532D337-A8BD-4CF5-81D4-003AE82FA2BA@twistedmatrix.com>
 <CACKEAnXMMYzwQoJ7s7Sx0+WEP94hboF5Ppuc-pUORdQPDkmDNw@mail.gmail.com>
 <A55EAA10-3E6E-4066-8ED8-5067D140AA74@twistedmatrix.com>
 <CAKN9TDKnxSgqt2ogyv4jnwRRSLw0TGf1Xq-AouSHpcVH+d6E5A@mail.gmail.com>
 <CACKEAnXVYKoownT=5JC_i5Hxtd-jc3u6O_BF5LhqqNU4en=DbA@mail.gmail.com>
Message-ID: <627ED670-A864-4A86-A649-956F7A1D9554@twistedmatrix.com>


> On May 23, 2016, at 11:56 AM, Clayton Daley <clayton.daley at gmail.com> wrote:
> 
> Closing PRs will make them less likely to be found by searchers.  If every PR has an issue (common for bug fixes, less common for new features), this is less of a problem -- is this something the bot would need to verify/fix?

The bot is just for the contributors to be able to re-open PRs to respond to review feedback.  When a PR is closed, the reviewers themselves will ask the authors to open an issue separately if that is appropriate.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160523/71cb41b4/attachment-0002.html>

From twisted-python at 2xlp.com  Tue May 24 11:37:37 2016
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Tue, 24 May 2016 13:37:37 -0400
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
Message-ID: <6450B7DC-CC7C-46B6-AF41-1B81D727855C@2xlp.com>

FWIW, I just noticed that the CONTRIBUTING message wasn't showing up when trying to make a PR.

github is supposed to make a warning box that shows the contents of /CONTRIBUTING or /CONTRIBUTING.md when opening an issue or PR


From rodrigc at crodrigues.org  Tue May 24 12:53:53 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Tue, 24 May 2016 11:53:53 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <6450B7DC-CC7C-46B6-AF41-1B81D727855C@2xlp.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <6450B7DC-CC7C-46B6-AF41-1B81D727855C@2xlp.com>
Message-ID: <CAG=rPVfzV78-swzzA3JjKhCtOz_xivSx0h1He04KyhGab4TB1Q@mail.gmail.com>

Hi,

Thanks for bringing up these points.  See:
https://twistedmatrix.com/trac/ticket/8352

Feel free to add any thoughts you may have on how to improve this.
--
Craig


On Tue, May 24, 2016 at 10:37 AM, Jonathan Vanasco <twisted-python at 2xlp.com>
wrote:

> FWIW, I just noticed that the CONTRIBUTING message wasn't showing up when
> trying to make a PR.
>
> github is supposed to make a warning box that shows the contents of
> /CONTRIBUTING or /CONTRIBUTING.md when opening an issue or PR
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160524/e54fbf41/attachment-0002.html>

From twisted-python at 2xlp.com  Tue May 24 15:49:37 2016
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Tue, 24 May 2016 17:49:37 -0400
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
Message-ID: <037555C9-26A4-4AB4-A9BF-FC12CCDA9A33@2xlp.com>

just a few thoughts:

The current system as-explained seems to use an "Issue" as a queue item that is either a "bug report" or a "notice of a pull request, which may also reference another bug report".  

that is weird.  IMHO, a quality contributor will never get turned off by handling the docs, tests, and other requirements - but may get confused/turned off by this.

anyways:

1. github's PRs are peculiar in that they're "branch to branch" and not "branch at commit to branch at commit".  If I were to submit a PR, I could still make changes on it between my submission and someone finally doing a merge.  Personally, I find this infuriating.  In any event, I suggest *requiring* something like the "git flow" model for submissions.  Outright rejecting anything that isn't in a dedicated fix/feature branch.  Everyone is currently doing the right thing, and there are contribution docs that suggest this – I would just make it a stated policy to automatically reject any PRs from someone using "master/trunk". 

2. regarding Issues vs PRs and working between Trac and Github, I suggest you take the approach of "Trac Issue = Idea" and "Github PR = Implementation of Idea".  Under this concept, one or more PRs might be attempts to address a given Issue.  The core maintainers can address the highlevel concepts and requirements under Issue, while grounds for rejection / feedback on each PR are  listed there.  As a github/bitbucket submitter, it's really useful when someone looks at a diff and uses inline comments to note their rejection for a section.  This is how most people use Github.  (and it's incompatible with the current queue system, I KNOW).  

3. Initially I didn't like the idea of rejecting so fast, but after thinking it over, now I do.  In addition to boilerplate text about "please resubmit", I think it might be beneficial to standardize some labels for this though, as it helps future contributors who may want to address an issue.  If the "IDEA" is approved but the implementation is not, then noting "Resubmission Pending" suggests this is still active.  If the underlying IDEA or approach is rejected, then noting "Rejection Final" can suggest it's just not going to happen.

4.  I understand that "review" hold special significance within the twisted team's workflow, but outside of Twisted it is awkward to see something bounce in and out of "review".  At least on the github side, using some sort of label to state where in the process (ie, what type of review) something is under would help.


The caveat is that this breaks the current use of Issue as a "queue" item.  But Twisted is using "issues" less as an Issue and more as a queue item, while github "Issues" are less of a queue item and amore of an actual issue.  This is a bit confusing and different to how many people will use github.  

Just to illustrate what a typical github contributor flow might be:

	Scenario A-

		There is a trac Issue #1001 for "F is broken"
		bob generates github pr 11, and submits.  He comments in #1001
		ted generates github pr 12, and submits.  He creates a trac issue #1002.  When #1002 is first looked at, it is a dupe of 1001 and copied over.
		carol generates github pr 13 and submits.  she comments in #1003

		There are 3 PRs for a single Issue.  Feedback on the PRs occurs on Github.  Feedback on the Ideas and status of PRs is on trac.

	Scenario B-
		Bob notes that "X is broken"
		Bob generates github PR 11 and submits.  He goes to trac and creates issue #1002
		Bob's PR is rejected because the fundamental approach is not acceptable, however X is still broken.  PR11 is closed, #1002 is open.
		Ted generates pr 12 and submits.  he comments in #1002.  Ted is rejected but the approach is compatible.  it can be implemented with fixes.
		Carol forks Ted's approach , fixes it, and generates pr 13.  she comments in #1002 and it is accepted.

again, this breaks the current use of queues.  I'm not sure how to reconcile everything together, however I think you're going to find non-core maintainers naturally fall into the 2 scenarios above.


From glyph at twistedmatrix.com  Tue May 24 16:49:26 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 24 May 2016 15:49:26 -0700
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <037555C9-26A4-4AB4-A9BF-FC12CCDA9A33@2xlp.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <037555C9-26A4-4AB4-A9BF-FC12CCDA9A33@2xlp.com>
Message-ID: <1F1FBA2D-156F-4A55-BC48-31F43C99DE33@twistedmatrix.com>


> On May 24, 2016, at 2:49 PM, Jonathan Vanasco <twisted-python at 2xlp.com> wrote:
> 
> just a few thoughts:
> 
> The current system as-explained seems to use an "Issue" as a queue item that is either a "bug report" or a "notice of a pull request, which may also reference another bug report".

In the current system, we have "tickets" (in Trac) not "issues" (on Github).  And in that system, an issue is put into review when it has an attached branch or patch that needs to be considered for inclusion.

In the Github system.

> that is weird.

> IMHO, a quality contributor will never get turned off by handling the docs, tests, and other requirements - but may get confused/turned off by this.

Literally everyone's predictions about this have always been wrong, so I don't like speculating ;).  Especially classifying people as "quality contributors" or not.  I will sometimes say something like "if you don't do X, you probably won't do Y" but being a "quality contributor" is a complex, multi-dimensional, and situationally-dependent personality characteristic that I don't think we can predict.

> anyways:
> 
> 1. github's PRs are peculiar in that they're "branch to branch" and not "branch at commit to branch at commit".  If I were to submit a PR, I could still make changes on it between my submission and someone finally doing a merge.  Personally, I find this infuriating.

I KNOW, RIGHT!!!  However, protected statuses somewhat reduce the potential race-condition here.  And contributing to a couple dozen Github projects I have to say that practically this has never been an issue, even though I find it aesthetically appalling, design-wise.

> In any event, I suggest *requiring* something like the "git flow" model for submissions.  Outright rejecting anything that isn't in a dedicated fix/feature branch.  Everyone is currently doing the right thing, and there are contribution docs that suggest this – I would just make it a stated policy to automatically reject any PRs from someone using "master/trunk".

Honestly I don't think this is worth the effort.  git-flow is, abstractly, a reasonably good idea (if people don't know what we're talking about, see <http://jeffkreeftmeijer.com/2010/why-arent-you-using-git-flow/>) since it encapsulates the precise semantics desired by certain commits.  But sometimes people make a fork and their fork branch just happens to be called 'patch-1', or 'master', but this doesn't really affect our workflow as long as they observe proper PR etiquette and don't push any unrelated revisions to that branch in the meanwhile.

> 2. regarding Issues vs PRs and working between Trac and Github, I suggest you take the approach of "Trac Issue = Idea" and "Github PR = Implementation of Idea".  Under this concept, one or more PRs might be attempts to address a given Issue.

That's ... exactly what I was trying to express.  (Except I was thinking we'd gradually move from Trac Tickets to Github Issues).

> The core maintainers can address the highlevel concepts and requirements under Issue, while grounds for rejection / feedback on each PR are  listed there.  As a github/bitbucket submitter, it's really useful when someone looks at a diff and uses inline comments to note their rejection for a section.  This is how most people use Github.  (and it's incompatible with the current queue system, I KNOW).

I don't see how it's incompatible.  It seems perfectly fine, as long as we shift from 'review queue == report 25' to 'review queue == open PRs with non-failing status'.

> 3. Initially I didn't like the idea of rejecting so fast, but after thinking it over, now I do.  In addition to boilerplate text about "please resubmit", I think it might be beneficial to standardize some labels for this though, as it helps future contributors who may want to address an issue.  If the "IDEA" is approved but the implementation is not, then noting "Resubmission Pending" suggests this is still active.  If the underlying IDEA or approach is rejected, then noting "Rejection Final" can suggest it's just not going to happen.

Yeah, adding some informative labels to the closed issues might be a good way of letting contributors know what is going on.  I just wanted to make sure that they are an optional part of the workflow which, if the automation around them breaks down in some way, we can still make progress, and we don't end up with inconsistent or lost information.

> 4.  I understand that "review" hold special significance within the twisted team's workflow, but outside of Twisted it is awkward to see something bounce in and out of "review".

I think this is because, generally speaking, most teams do a poor job structuring their communications about what state issues and pull requests are in :).

> At least on the github side, using some sort of label to state where in the process (ie, what type of review) something is under would help.

What do you mean it "would help"?  What problem would it solve?

> The caveat is that this breaks the current use of Issue as a "queue" item.  But Twisted is using "issues" less as an Issue and more as a queue item, while github "Issues" are less of a queue item and amore of an actual issue.  This is a bit confusing and different to how many people will use github.

I don't know where you're getting this from.  Only tickets in review are queue items.  I have no idea what "actual issue" means here.

> 
> Just to illustrate what a typical github contributor flow might be:
> 
> 	Scenario A-
> 
> 		There is a trac Issue #1001 for "F is broken"
> 		bob generates github pr 11, and submits.  He comments in #1001
> 		ted generates github pr 12, and submits.  He creates a trac issue #1002.  When #1002 is first looked at, it is a dupe of 1001 and copied over.
> 		carol generates github pr 13 and submits.  she comments in #1003
> 
> 		There are 3 PRs for a single Issue.  Feedback on the PRs occurs on Github.  Feedback on the Ideas and status of PRs is on trac.
> 
> 	Scenario B-
> 		Bob notes that "X is broken"
> 		Bob generates github PR 11 and submits.  He goes to trac and creates issue #1002
> 		Bob's PR is rejected because the fundamental approach is not acceptable, however X is still broken.  PR11 is closed, #1002 is open.
> 		Ted generates pr 12 and submits.  he comments in #1002.  Ted is rejected but the approach is compatible.  it can be implemented with fixes.
> 		Carol forks Ted's approach , fixes it, and generates pr 13.  she comments in #1002 and it is accepted.
> 
> again, this breaks the current use of queues.  I'm not sure how to reconcile everything together, however I think you're going to find non-core maintainers naturally fall into the 2 scenarios above.

What use?  What are you referring to with the plural "queues"?  There's only ever been a single queue, the review queue.  In both of your scenarios, the list of open PRs is the review queue, and in both of those scenarios, discussion of the abstract idea can happen on the tickets without treating them directly as queue items.

I appreciate you taking the time to think about our workflow and the review queue, but I would ask that you carefully consider what problem you're trying to address with your suggestions.

The practical issue I'm trying to address by switching to github PRs as opposed to trac tickets with the 'review' keyword is the speed and ease of submitting a change and getting CI feedback on that change, in addition to lowering training overhead since many people are familiar with github.  Faster feedback = happier contributors = more maintenance effort productively expended.  The issue I'm trying to address with the slightly odd close-a-PR-to-signify-finished-review workflow is to avoid the common problem of reviewers not knowing which things to review and therefore leaving certain contributions mouldering until their submitters lose interest.  Beyond that, I don't see that we have substantial workflow issues that need solving.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160524/187279ac/attachment-0002.html>

From dansut at gmail.com  Tue May 24 17:10:56 2016
From: dansut at gmail.com (Daniel Sutcliffe)
Date: Tue, 24 May 2016 19:10:56 -0400
Subject: [Twisted-Python] Persuading Python's Logging to use
	twisted.logger
In-Reply-To: <8193AB32-9F5A-4AE5-A078-EB7F50939D1B@twistedmatrix.com>
References: <CADzPF4sMzLe4-HVpt=Dv3vv-BvzC9EKrBrHTZedLddwVoBb1Qg@mail.gmail.com>
 <93ae72c6-c942-73c6-e119-2c92764c30b3@arskom.com.tr>
 <CADzPF4uwgq1d=VC2tGB8oDR3xRQbGGWAqwNGHuVSK7nyRMjBMA@mail.gmail.com>
 <8193AB32-9F5A-4AE5-A078-EB7F50939D1B@twistedmatrix.com>
Message-ID: <CADzPF4vyNg6M28cC1kWsNofRUJmJynC564_c+A3QUSA_LHNidA@mail.gmail.com>

On May 10, 2016, at 4:23 PM, Daniel Sutcliffe <dansut at gmail.com> wrote:
>> Thanks for all the hints and suggestions guys, this was far simpler
>> than I thought it would be and the results are exactly what I imagined
>> without too much effort.

On Sat, May 21, 2016 at 9:44 PM, Glyph <glyph at twistedmatrix.com> wrote:
> Fantastic!

[...]
>> Glyph: The code below is I'm sure far from perfect, and it doesn't
>> take your advice and convert the msg into a twisted format string, it
>> takes the simpler approach of letting the Logging record pre-format
>> using the getMessage() method. I'm sure there are loads of edge cases
>> it could cope with better with maybe it is a start of something that
>> could be included in Twisted.
>
> The main reason I wanted to do the format-string translation is that it would allow the key/value pairs to be stored according to the same idiom that Twisted uses, and therefore be serialized to jsonFileLogObserver and consequently things like LogStash / ElasticSearch.

I kept the format-string args within a dictionary under the args kwarg
to emit() for exactly the reasons you gave above but felt that
translating a %-encoded string into the new-style that twisted.logger
uses was likely to make the example much more complicated, and was
frankly beyond my limited needs. There's probably a simple way to do
this in Python that I am not aware of yet though...

[...]
>> But hopefully this all makes sense and this can be a start of
>> something much more generically useful.
>
> Yep!  This is definitely something handy.  Would you mind filing an issue for it?

I've created issue #8358 https://twistedmatrix.com/trac/ticket/8358
Which is hopefully what you were after - spent a bunch of time reading
your impressive process and standards docs so I'm already sure that
anything that finds itself in Twisted from this will probably be quite
significantly different to this initial suggestion but I don't mind a
bit of learning if someone is willing to give me a bit of mentoring me
to get this into shape so it can be done as a PR.

Cheers
/dan
-- 
Daniel Sutcliffe <dansut at gmail.com>



From twisted-python at 2xlp.com  Tue May 24 17:50:32 2016
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Tue, 24 May 2016 19:50:32 -0400
Subject: [Twisted-Python] overview: new review queue venue
In-Reply-To: <1F1FBA2D-156F-4A55-BC48-31F43C99DE33@twistedmatrix.com>
References: <66D6D223-B298-47BF-8BDF-DF1A5577604A@twistedmatrix.com>
 <037555C9-26A4-4AB4-A9BF-FC12CCDA9A33@2xlp.com>
 <1F1FBA2D-156F-4A55-BC48-31F43C99DE33@twistedmatrix.com>
Message-ID: <B125CA2C-F9CA-489F-82F1-AB06897D1125@2xlp.com>


On May 24, 2016, at 6:49 PM, Glyph wrote:

> I KNOW, RIGHT!!!  However, protected statuses somewhat reduce the potential race-condition here.  And contributing to a couple dozen Github projects I have to say that practically this has never been an issue, even though I find it aesthetically appalling, design-wise.

> But sometimes people make a fork and their fork branch just happens to be called 'patch-1', or 'master',  this doesn't really affect our workflow as long as they observe proper PR etiquette and don't push any unrelated revisions to that branch in the meanwhile.

In terms of "git flow" i didn't mean the exact names, just the concept that every fix has it's own dedicated branch. This is something that almost every github-experienced person does automatically (and all current twisted PRs do).  People with less experience on github itself (not a given package) will often just edit the "master" branch and submit.  then they'll forget they did that and edit something else... because of that github peculiarity, and that everything is acting "centralized" on github and not under a "decentralized" model where a particular commit was queued that ends up in the review.  those types of changes can also end up triggering CI tests, which complicates things further.

twisted contributors are likely a bit more experienced and it's a self-selecting pool... i've just seen an increasing number of projects require a dedicated branch and politely reject + ask for anything against 'master' to be resubmitted via a dedicated branch.

> I don't see how it's incompatible.  It seems perfectly fine, as long as we shift from 'review queue == report 25' to 'review queue == open PRs with non-failing status'.

ah, I did not know that was possible.  this ties into me not understanding the content of the queue being PR only (not "all tickets").

>> At least on the github side, using some sort of label to state where in the process (ie, what type of review) something is under would help.
> 
> What do you mean it "would help"?  What problem would it solve?

This would help non-maintainers understand what that actual progress was in that 5 stage review.

> 
>> The caveat is that this breaks the current use of Issue as a "queue" item.  But Twisted is using "issues" less as an Issue and more as a queue item, while github "Issues" are less of a queue item and amore of an actual issue.  This is a bit confusing and different to how many people will use github.
> 
> I don't know where you're getting this from.  Only tickets in review are queue items.  I have no idea what "actual issue" means here.

Ok. From here to the end I believe I understand my confusion.  The "queue" looked to me like it was "All Trac Tickets" not just "Certain types of Trac Tickets".   I was looking at a few reports and some raw views that showed track tickets that were both bug reports and attempts to fix a specific problem.  It looked like the normal use of github would have run antagonistic to your workflow , but his all seems fine now.

> The practical issue I'm trying to address by switching to github PRs as opposed to trac tickets with the 'review' keyword is the speed and ease of submitting a change and getting CI feedback on that change, in addition to lowering training overhead since many people are familiar with github.  Faster feedback = happier contributors = more maintenance effort productively expended.  The issue I'm trying to address with the slightly odd close-a-PR-to-signify-finished-review workflow is to avoid the common problem of reviewers not knowing which things to review and therefore leaving certain contributions mouldering until their submitters lose interest.  Beyond that, I don't see that we have substantial workflow issues that need solving.

I was mostly concerned with the proposed implementation creating workflow issues.




-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160524/d629c6f8/attachment-0002.html>

From glyph at twistedmatrix.com  Tue May 24 18:05:41 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 24 May 2016 17:05:41 -0700
Subject: [Twisted-Python] Persuading Python's Logging to use
	twisted.logger
In-Reply-To: <CADzPF4vyNg6M28cC1kWsNofRUJmJynC564_c+A3QUSA_LHNidA@mail.gmail.com>
References: <CADzPF4sMzLe4-HVpt=Dv3vv-BvzC9EKrBrHTZedLddwVoBb1Qg@mail.gmail.com>
 <93ae72c6-c942-73c6-e119-2c92764c30b3@arskom.com.tr>
 <CADzPF4uwgq1d=VC2tGB8oDR3xRQbGGWAqwNGHuVSK7nyRMjBMA@mail.gmail.com>
 <8193AB32-9F5A-4AE5-A078-EB7F50939D1B@twistedmatrix.com>
 <CADzPF4vyNg6M28cC1kWsNofRUJmJynC564_c+A3QUSA_LHNidA@mail.gmail.com>
Message-ID: <78BBAF25-7E9E-4C5E-8629-D0F437BA140F@twistedmatrix.com>


> On May 24, 2016, at 4:10 PM, Daniel Sutcliffe <dansut at gmail.com> wrote:
> 
>> The main reason I wanted to do the format-string translation is that it would allow the key/value pairs to be stored according to the same idiom that Twisted uses, and therefore be serialized to jsonFileLogObserver and consequently things like LogStash / ElasticSearch.
> 
> I kept the format-string args within a dictionary under the args kwarg
> to emit() for exactly the reasons you gave above but felt that
> translating a %-encoded string into the new-style that twisted.logger
> uses was likely to make the example much more complicated, and was
> frankly beyond my limited needs. There's probably a simple way to do
> this in Python that I am not aware of yet though...

I wrote a function to do this some time ago, and I forget the exact derivation, but somehow it ended up here:

https://github.com/moreati/formatist

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160524/9d3a0cb2/attachment-0002.html>

From rodrigc at crodrigues.org  Fri May 27 02:19:32 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Fri, 27 May 2016 01:19:32 -0700
Subject: [Twisted-Python] Need clarification on reviews for Python 3 fixes
	for Twisted
Message-ID: <CAG=rPVdkNbLiOSS3BNmx5FVbLus8JAcZkepCXMjhMmrXdvKt4A@mail.gmail.com>

Hi,

I have submitted some Python 3 patches for Twisted.

1.  PATCHES REVIEWED AND COMMITTED TO TRUNK
=============================================

Use new syntax for catching exceptions
https://twistedmatrix.com/trac/ticket/8344

Use new syntax for raising exceptions
https://twistedmatrix.com/trac/ticket/8345

Remove old syntax for octal literals
https://twistedmatrix.com/trac/ticket/8347

Fix parentheses in list comprehensions
https://twistedmatrix.com/trac/ticket/8351


2.  PATCHES WHICH STILL NEED TO BE REVIEWED, NOT YET COMMITTED TO TRUNK
=======================================================================

Change print to print()
http://twistedmatrix.com/trac/ticket/5812

Change foo.has_key(bar) to "bar in foo"
https://twistedmatrix.com/trac/ticket/8359
https://twistedmatrix.com/trac/ticket/8360
https://twistedmatrix.com/trac/ticket/8361
https://twistedmatrix.com/trac/ticket/8362
https://twistedmatrix.com/trac/ticket/8363
https://twistedmatrix.com/trac/ticket/8364
https://twistedmatrix.com/trac/ticket/8365

Eliminate the use of long literals
https://twistedmatrix.com/trac/ticket/8366

Remove use of tuple parameter packing
https://twistedmatrix.com/trac/ticket/8346


Adi has reviewed and committed the patches in 1.
However, Adi has mentioned that in this document:
http://twistedmatrix.com/trac/wiki/Plan/Python3,
the strategy of submitting incremental Python3 fixes is not mentioned.
Before doing any further reviews, Adi would like clarification that
these types of reviews/patches are OK for submission and review.

Are they OK?  Would it be possible extend the Plan/Python3 document to
accept incremental Python3 fixes
as long as:

 * adheres to Twisted coding standards
 * works on Python 2.7
 * passes existing tests
 * comes with new tests if functionality is changed that is not currently
being tested

My experience working with Python3 on other projects, is that incremental
fixes is easier to review and get working, rather than an all or nothing
approach.
Some Python3 porting such as bytes/string/unicode or Python C API changes
are very hard,
while print vs. print() are very easy.  Holding up the easy changes, until
every hard change
is also done is quite hard, and slows things down.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160527/c29fd2ec/attachment-0002.html>

From itamar at itamarst.org  Fri May 27 06:13:10 2016
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Fri, 27 May 2016 08:13:10 -0400
Subject: [Twisted-Python] Need clarification on reviews for Python 3
 fixes for Twisted
In-Reply-To: <CAG=rPVdkNbLiOSS3BNmx5FVbLus8JAcZkepCXMjhMmrXdvKt4A@mail.gmail.com>
References: <CAG=rPVdkNbLiOSS3BNmx5FVbLus8JAcZkepCXMjhMmrXdvKt4A@mail.gmail.com>
Message-ID: <475c31e5-ae8c-e42b-f20f-467683e231c0@itamarst.org>

On 05/27/2016 04:19 AM, Craig Rodrigues wrote:
> However, Adi has mentioned that in this document: 
> http://twistedmatrix.com/trac/wiki/Plan/Python3,
> the strategy of submitting incremental Python3 fixes is not mentioned.
> Before doing any further reviews, Adi would like clarification that
> these types of reviews/patches are OK for submission and review.
>
> Are they OK?  Would it be possible extend the Plan/Python3 document to 
> accept incremental Python3 fixes
> as long as:
>
>  * adheres to Twisted coding standards
>  * works on Python 2.7
>  * passes existing tests
>  * comes with new tests if functionality is changed that is not 
> currently being tested
>
> My experience working with Python3 on other projects, is that incremental
> fixes is easier to review and get working, rather than an all or 
> nothing approach.
> Some Python3 porting such as bytes/string/unicode or Python C API 
> changes are very hard,
> while print vs. print() are very easy.  Holding up the easy changes, 
> until every hard change
> is also done is quite hard, and slows things down.

I think they're fine to accept insofar as:

1. There is strong ongoing momentum for the port now, so these changes 
makes porting module-by-module easier and won't just bitrot.
2. They're doing one particular incompatibility at a time, rather than 
"here's an assortment of random changes to a module that may or may not 
port that module fully, who knows."

I don't think they are sufficient to port a module (someone needs to 
read the code and think a bit, usually), but they will make it easier to 
do so, so they definitely are worth continuing.

-Itamar



From wolfgang.kde at rohdewald.de  Fri May 27 07:14:26 2016
From: wolfgang.kde at rohdewald.de (Wolfgang Rohdewald)
Date: Fri, 27 May 2016 15:14:26 +0200
Subject: [Twisted-Python] Need clarification on reviews for Python 3
	fixes for Twisted
In-Reply-To: <475c31e5-ae8c-e42b-f20f-467683e231c0@itamarst.org>
References: <CAG=rPVdkNbLiOSS3BNmx5FVbLus8JAcZkepCXMjhMmrXdvKt4A@mail.gmail.com>
 <475c31e5-ae8c-e42b-f20f-467683e231c0@itamarst.org>
Message-ID: <2474609.Rc1Be5hivi@i5>

Am Freitag, 27. Mai 2016, 08:13:10 schrieb Itamar Turner-Trauring:
> On 05/27/2016 04:19 AM, Craig Rodrigues wrote:
> > However, Adi has mentioned that in this document: 
> > http://twistedmatrix.com/trac/wiki/Plan/Python3,
> > the strategy of submitting incremental Python3 fixes is not mentioned.
> > Before doing any further reviews, Adi would like clarification that
> > these types of reviews/patches are OK for submission and review.
> >
> > Are they OK?  Would it be possible extend the Plan/Python3 document to 
> > accept incremental Python3 fixes
> > as long as:
> >
> >  * adheres to Twisted coding standards
> >  * works on Python 2.7
> >  * passes existing tests
> >  * comes with new tests if functionality is changed that is not 
> > currently being tested
> >
> > My experience working with Python3 on other projects, is that incremental
> > fixes is easier to review and get working, rather than an all or 
> > nothing approach.
> > Some Python3 porting such as bytes/string/unicode or Python C API 
> > changes are very hard,
> > while print vs. print() are very easy.  Holding up the easy changes, 
> > until every hard change
> > is also done is quite hard, and slows things down.
> 
> I think they're fine to accept insofar as:
> 
> 1. There is strong ongoing momentum for the port now, so these changes 
> makes porting module-by-module easier and won't just bitrot.
> 2. They're doing one particular incompatibility at a time, rather than 
> "here's an assortment of random changes to a module that may or may not 
> port that module fully, who knows."
> 
> I don't think they are sufficient to port a module (someone needs to 
> read the code and think a bit, usually), but they will make it easier to 
> do so, so they definitely are worth continuing.
> 
> -Itamar

This would have been helpful when I tried to port PB to python3. 
Instead, that port is now bitrotting. I did try hard to deliver
simple changes (like print()) before tackling harder problems
but not much of all that went into the source code. Interest in
PB does not seem very high.

Anyway there still is the public git fork (I did mention it here
at that time) - if anybody would like to integrate that. Not me -
for the foreseeable future.

-- 
Wolfgang



From adi at roiban.ro  Fri May 27 07:31:21 2016
From: adi at roiban.ro (Adi Roiban)
Date: Fri, 27 May 2016 14:31:21 +0100
Subject: [Twisted-Python] Need clarification on reviews for Python 3
 fixes for Twisted
In-Reply-To: <475c31e5-ae8c-e42b-f20f-467683e231c0@itamarst.org>
References: <CAG=rPVdkNbLiOSS3BNmx5FVbLus8JAcZkepCXMjhMmrXdvKt4A@mail.gmail.com>
 <475c31e5-ae8c-e42b-f20f-467683e231c0@itamarst.org>
Message-ID: <CAFycZ9edPSLatS4eFazxPK_TJPvY2nQMZ50bmJHDc1+dkksNAg@mail.gmail.com>

On 27 May 2016 at 13:13, Itamar Turner-Trauring <itamar at itamarst.org> wrote:

>
>>
[snip]

I think they're fine to accept insofar as:
>
> 1. There is strong ongoing momentum for the port now, so these changes
> makes porting module-by-module easier and won't just bitrot.
>

How do you define a "strong ongoing momentum" ?


> 2. They're doing one particular incompatibility at a time, rather than
> "here's an assortment of random changes to a module that may or may not
> port that module fully, who knows."
>
>
Some code parts don't have python 2.7 coverage .
Is is still acceptable to touch that code ? :)

Regards,
Adi
-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160527/34043c87/attachment-0002.html>

From glyph at twistedmatrix.com  Fri May 27 14:46:34 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 27 May 2016 13:46:34 -0700
Subject: [Twisted-Python] Need clarification on reviews for Python 3
	fixes for Twisted
In-Reply-To: <CAFycZ9edPSLatS4eFazxPK_TJPvY2nQMZ50bmJHDc1+dkksNAg@mail.gmail.com>
References: <CAG=rPVdkNbLiOSS3BNmx5FVbLus8JAcZkepCXMjhMmrXdvKt4A@mail.gmail.com>
 <475c31e5-ae8c-e42b-f20f-467683e231c0@itamarst.org>
 <CAFycZ9edPSLatS4eFazxPK_TJPvY2nQMZ50bmJHDc1+dkksNAg@mail.gmail.com>
Message-ID: <AA34E42E-E68A-4029-B1CE-BFBDE40A0603@twistedmatrix.com>


> On May 27, 2016, at 06:31, Adi Roiban <adi at roiban.ro> wrote:
> 
> 
> 
> On 27 May 2016 at 13:13, Itamar Turner-Trauring <itamar at itamarst.org <mailto:itamar at itamarst.org>> wrote:
> 
> 
> [snip]
> 
> I think they're fine to accept insofar as:
> 
> 1. There is strong ongoing momentum for the port now, so these changes makes porting module-by-module easier and won't just bitrot.
> 
> How do you define a "strong ongoing momentum" ?

I don't think "momentum" is a real thing.  Investment in Twisted has historically followed an extreme boom/bust cycle, and we don't want to make any decisions assuming that work will be continuing at the current rate.

> 2. They're doing one particular incompatibility at a time, rather than "here's an assortment of random changes to a module that may or may not port that module fully, who knows."
> 
> 
> Some code parts don't have python 2.7 coverage . 
> Is is still acceptable to touch that code ? :)

No.  Test coverage is how we know that the behavior is the same on both versions of Python and we're not just hoping that it is.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160527/ad3c2048/attachment-0002.html>

From glyph at twistedmatrix.com  Sat May 28 01:48:31 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 28 May 2016 00:48:31 -0700
Subject: [Twisted-Python] Need clarification on reviews for Python 3
	fixes for Twisted
In-Reply-To: <AA34E42E-E68A-4029-B1CE-BFBDE40A0603@twistedmatrix.com>
References: <CAG=rPVdkNbLiOSS3BNmx5FVbLus8JAcZkepCXMjhMmrXdvKt4A@mail.gmail.com>
 <475c31e5-ae8c-e42b-f20f-467683e231c0@itamarst.org>
 <CAFycZ9edPSLatS4eFazxPK_TJPvY2nQMZ50bmJHDc1+dkksNAg@mail.gmail.com>
 <AA34E42E-E68A-4029-B1CE-BFBDE40A0603@twistedmatrix.com>
Message-ID: <B5608293-AF76-4438-8E16-84C1979E5D69@twistedmatrix.com>


> On May 27, 2016, at 13:46, Glyph <glyph at twistedmatrix.com> wrote:
> 
>> On May 27, 2016, at 06:31, Adi Roiban <adi at roiban.ro <mailto:adi at roiban.ro>> wrote:
>> 
>> On 27 May 2016 at 13:13, Itamar Turner-Trauring <itamar at itamarst.org <mailto:itamar at itamarst.org>> wrote:
>> 2. They're doing one particular incompatibility at a time, rather than "here's an assortment of random changes to a module that may or may not port that module fully, who knows."
>> 
>> Some code parts don't have python 2.7 coverage . 
>> Is is still acceptable to touch that code ? :)
> 
> No.  Test coverage is how we know that the behavior is the same on both versions of Python and we're not just hoping that it is.

I was on a plane when I wrote this, and it may have been a bit overly terse.  Let me expand a little bit.

The lines of code in a diff must be covered.  However, if one is porting, let's say, a 2000-line module with no test coverage to be importable under python 3, and 8 lines of code in that module need to change, *only those 8 lines must be covered*.  Obviously, the tests should be as reasonable as possible and should not do anything too evil and gross to get those lines covered, but the author of the change hitting those lines is not responsible for a ground-up comprehensive test suite design for the entire module.  They just need to write the bare minimum test coverage to ensure their changes are covered at all.  If you're making syntax changes, you also don't need to worry about getting those tests to actually pass on python3; it would be great to make smaller, individual changes which do the syntax first, then later actually start adding tests to the py3 suite.

So please don't take this requirement for test coverage to mean that you have to embark on a major project to land these syntax fixes.  It would be great to have syntax fixes like this, and a bare minimum of very simple test coverage, just enough to exercise the lines in question, is perfectly adequate for such a small mechanical change.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160528/fab68390/attachment-0002.html>

From adi at roiban.ro  Sat May 28 03:33:37 2016
From: adi at roiban.ro (Adi Roiban)
Date: Sat, 28 May 2016 10:33:37 +0100
Subject: [Twisted-Python] Need clarification on reviews for Python 3
 fixes for Twisted
In-Reply-To: <B5608293-AF76-4438-8E16-84C1979E5D69@twistedmatrix.com>
References: <CAG=rPVdkNbLiOSS3BNmx5FVbLus8JAcZkepCXMjhMmrXdvKt4A@mail.gmail.com>
 <475c31e5-ae8c-e42b-f20f-467683e231c0@itamarst.org>
 <CAFycZ9edPSLatS4eFazxPK_TJPvY2nQMZ50bmJHDc1+dkksNAg@mail.gmail.com>
 <AA34E42E-E68A-4029-B1CE-BFBDE40A0603@twistedmatrix.com>
 <B5608293-AF76-4438-8E16-84C1979E5D69@twistedmatrix.com>
Message-ID: <CAFycZ9e6HEeb7ipOwZzH7xTssC6sfX55FDVgGnyjpzEFbhZvaQ@mail.gmail.com>

On 28 May 2016 at 08:48, Glyph <glyph at twistedmatrix.com> wrote:

>
> On May 27, 2016, at 13:46, Glyph <glyph at twistedmatrix.com> wrote:
>
> On May 27, 2016, at 06:31, Adi Roiban <adi at roiban.ro> wrote:
>
> On 27 May 2016 at 13:13, Itamar Turner-Trauring <itamar at itamarst.org>
> wrote:
>
> 2. They're doing one particular incompatibility at a time, rather than
>> "here's an assortment of random changes to a module that may or may not
>> port that module fully, who knows."
>>
>
> Some code parts don't have python 2.7 coverage .
> Is is still acceptable to touch that code ? :)
>
>
> No.  Test coverage is how we *know* that the behavior is the same on both
> versions of Python and we're not just hoping that it is.
>
>
> I was on a plane when I wrote this, and it may have been a bit overly
> terse.  Let me expand a little bit.
>
> The lines of code in a diff must be covered.  However, if one is porting,
> let's say, a 2000-line module with no test coverage to be importable under
> python 3, and 8 lines of code in that module need to change, *only those 8
> lines must be covered*.  Obviously, the tests should be as reasonable as
> possible and should not do anything too evil and gross to get those lines
> covered, but the author of the change hitting those lines is *not* responsible
> for a ground-up comprehensive test suite design for the entire module.
> They just need to write the bare minimum test coverage to ensure their
> changes are covered at all.  If you're making syntax changes, you also
> don't need to worry about getting those tests to actually pass on python3;
> it would be great to make smaller, individual changes which do the syntax
> first, then later actually start adding tests to the py3 suite.
>
> So please don't take this requirement for test coverage to mean that you
> have to embark on a major project to land these syntax fixes.  It would be
> great to have syntax fixes like this, and a bare minimum of very simple
> test coverage, just enough to exercise the lines in question, is perfectly
> adequate for such a small mechanical change.
>
>
Thanks for the guidance.

I have updated the python 3 porting wiki page
https://twistedmatrix.com/trac/wiki/Plan/Python3#Mechanicalchanges

Here is the diff
https://twistedmatrix.com/trac/wiki/Plan/Python3?sfp_email=&sfph_mail=&action=diff&version=81&old_version=80&sfp_email=&sfph_mail=


Regards,
Adi


-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160528/63a010b7/attachment-0002.html>

From keturn at keturn.net  Mon May 30 11:37:38 2016
From: keturn at keturn.net (Kevin Turner)
Date: Mon, 30 May 2016 10:37:38 -0700
Subject: [Twisted-Python] dinner with Twisted on Tuesday (in Portland for
	PyCon)
Message-ID: <1464629858.3768953.622825945.243043A2@webmail.messagingengine.com>

Hi all,

Are you in Portland, Oregon this week? Perhaps for PyCon? Want to have
dinner with other people who want to have dinner with people who know
about Twisted?

WHERE:
McMenamins Broadway  Pub
1504 N.E. Broadway
Portland, OR 97232

http://www.mcmenamins.com/573-mcmenamins-on-broadway-menus

WHEN:
7:00pm, Tuesday, May 31

There may be some people gathering at the convention venue shortly
beforehand to all migrate over in a gaggle, but it's not far.

Send me a note if you're planning on coming so I can get an idea of the
head count,
and watch this space for updates.

Cheers!



From dansut at gmail.com  Tue May 31 15:21:49 2016
From: dansut at gmail.com (Daniel Sutcliffe)
Date: Tue, 31 May 2016 17:21:49 -0400
Subject: [Twisted-Python] Looking for help dealing with ClientService
	reconnections
In-Reply-To: <A88137BD-6D7C-4C39-B4CA-56832B4ECA1C@twistedmatrix.com>
References: <CADzPF4vD4yf64OHtf=H62BZrez7jewo_XSMDhP3YuabUQOwmZg@mail.gmail.com>
 <7A7DF935-F87C-4A60-84A7-69AF43894BC2@twistedmatrix.com>
 <CADzPF4u2jMxfoEn6oxhjLgoATZ=kacDuL4J2ji2-HYyH57bd_Q@mail.gmail.com>
 <A88137BD-6D7C-4C39-B4CA-56832B4ECA1C@twistedmatrix.com>
Message-ID: <CADzPF4vVs28PdjNDoDrnux8HXKwfz2hAzvAeaK4hB4PbFur4tA@mail.gmail.com>

Delayed response here but hopefully it is still seen as worthwhile
discussion, sorry if it is seems to just be beating a dead horse ;)

On May 10, 2016, at 9:52 AM, Daniel Sutcliffe <dansut at gmail.com> wrote:
> > Given the ClientService.whenConnected() method is intended to provide
> > access to my connected Protocol through the deferred it returns, is it
> > not a little unfriendly that this Protocol may turn out to be
> > disconnected? OK occasionally due to timing but for this to be a
> > possible condition which can loop with the same disconnected Protocol
> > returned until the ClientService has its _currentConnection set to
> > None, suggests to me that I can't safely use my Protocol from
> > whenConnected() for much other than as a notification the first
> > connection has occurred... but how do I avoid this?

> whenConnected() is not intended to be used for "give me each Protocol as it
> is instantiated so that state can be set up", it is intended for API clients
> which want to send a message to the current connection to just retrieve the
> current connection so they can call a method on it.

I appreciate now this 'protocol/connection init' isn't what the
whenConnected() method was intended for, and it wasn't what I was
using it for when I came across my issue. However there seems to me to
be no documentary discouragement for using it this way... at least for
someone who is not as familiar with Twisted's common usage patterns

> I'm not sure what you mean by "turn out to be disconnected".  The physical
> reality of networking is that you might always encounter a transport which
> has been disconnected but which you haven't received notification of its
> disconnection yet.

The 'turns out to be disconnected' actually came from my acceptance
that network connections drop/fail and I have little control of how or
when this happens. Thus I may call a method on a Protocol at any time
only to find that it is not in a good state to handle my request.

My (misguided) goal was to call a method of the Protocol returned from
whenConnected() every so often to give it a task to do; my expectation
being that *when* the connection failed I would find out from the task
method's returned deferred and could then just fire off another
ClientService whenConnected() to get the next useful Protocol once it
is established, and then use this to continue giving the Protocol
tasks until it also ultimately fails...

> > I have looked at the source and it seems to me the fact that the
> > connection has been lost should bubble up to the ClientService through
> > a t.a.i._DisconnectFactory and t.a.i._ReconnectingProtocolProxy once
> > my Protocol's connectionLost() is called. My issue seems to be that I
> > errback on a Protocol method's deferred returned to code at or above
> > the ClientService level which gives up on that Protocol and calls
> > whenConnected() to get the next one, only the Protocol's
> > connectionLost() has yet to be called and then doesn't have chance to
> > because my code is looping around calling whenConnected() and getting
> > the same Protocol back. I hope that makes sense :-/
>
> Let me try to rephrase: you call a protocol method which returns a Deferred;
> you add an errback to that Deferred which calls whenConnected() to re-try,
> but since the protocol hasn't disconnected yet, you get the same protocol
> instance back, which is useless to you.

Thanks Glyph, that seems like exactly what I was trying to say.

> > My Q on this is if I should be internally calling my Protocol's
> > connectionLost() so it can bubble up to the ClientService before I
> > errback on the Protocol method - whose responsibility is it to call
> > this?
>
> It's the framework's responsibility to call it.  You should not call it
> yourself.  Your Protocol's connectionLost isn't going to bubble up to
> ClientService anyway; you'd have to call your wrapper's connectionLost,
> which would confuse its internal state, since the framework would call it
> again right afterwards, and we definitely don't have test coverage for that,
> since the framework will normally only call it once.

I'm glad that I got this mostly right in my head - it didn't feel
right for me to be calling this, or any similar method I could find.

> The right way to handle this would be to introduce a delay between re-tries.
> It's generally a good idea to have such a delay for lots of reasons; you
> don't want to overload your peer in the case of a transient failure.  As a
> bonus, the fact that you've gone back up to the reactor loop to wait a while
> means that the transport will be properly disconnected and whenConnected()
> will do what you want.

I didn't even consider this as my thinking was along the lines of the
ClientService having the ability to handle the connection re-tries and
delays to avoid any overloading of the service it wraps.

It would be nice if there was something I could do in my Protocol task
method such that it didn't fire the errback on its deferred until its
Factory (and ultimately its Service in this case) had been made aware
the connection had failed. Does this not have to be done elsewhere in
Twisted or other projects using Twisted, or is the common pattern just
to introduce a delay to avoid any possible race condition?

My current intention is to have the Protocol's Factory handle the
assigning of tasks to its Protocol which seems the 'more normal'
direction to take, so any discussions above are purely for my
education and intellectual curiosity - I'm glad of any and all
feedback.

Cheers
/dan
-- 
Daniel Sutcliffe <dansut at gmail.com>



