From bboerner at rgmadvisors.com  Mon Oct  1 13:12:28 2007
From: bboerner at rgmadvisors.com (Brendan Boerner)
Date: Mon, 1 Oct 2007 12:12:28 -0500
Subject: [Twisted-Python] reactor.spawnProcess() - differences between
	Python & Bash deaths
Message-ID: <18034B5E-0331-4F58-9739-E2A6A45C9FF0@rgmadvisors.com>

Hi,

I'm seeing (or not seeing :-) ) behavior which I cannot explain.

Attached are two .py scripts and a bash script -

echo.bash - echo a message
echo.py - echo a message
py_spawn.py - launch either echo.bash or echo.py using
reactor.spawnProcess().

If I have py_spawn.py launch echo.bash and then kill the '/bin/bash
./echo.bash' process using a SIGTERM py_spawn reports:

error: errorMessage: A process has ended with a probable error  
condition: process ended by signal 15.
error: exitCode: None
error: signal: 15
error: status: 15
processEnded, status <twisted.python.failure.Failure <class  
'twisted.internet.error.ProcessTerminated'>>

Which is what I expect.

If instead I launch echo.py and then kill the
'/opt/local/bin/python2.5 ./echo.py -m message' process py_spawn
reports:

error: exitCode: 0
error: signal: None
error: status: 0
processEnded, status <twisted.python.failure.Failure <class  
'twisted.internet.error.ProcessDone'>>

which is not what I expect.  In particular I am 99% certain that this
is relatively recent behaviour which showed up only last week - prior
to that I was seeing that if I killed a spawned .py process that I'd
see that it was terminated with a signal 15 ala the bash case.

I've tested this on Mac and Debian boxes with identical results.

Any suggestions or insights are appreciated.

Regards,
Brendan

--- py_spawn.py ---
#! /opt/local/bin/python2.5

from twisted.internet import error, reactor, defer, protocol

import getopt
import pickle
import pprint
import subprocess
import signal
import sys

Dumper = pprint.pformat

class MyProcessProtocol(protocol.ProcessProtocol):

     def __init__(self):
         self.outdata = ""
         self.errdata = ""
         pass

     def connectionMade(self):
         print "connectionMade!"

     def outReceived(self, data):
         print "outReceived! with %d bytes!" % len(data)
         self.outdata = self.outdata + data

     def errReceived(self, data):
         print "errReceived! with %d bytes!" % len(data)
         self.errdata = self.errdata + data

     def inConnectionLost(self):
         print "inConnectionLost! stdin is closed! (we probably did it)"

     def outConnectionLost(self):
         print "outConnectionLost! The child closed their stdout!"
         print "I saw them write:\n", self.outdata

     def errConnectionLost(self):
         print "errConnectionLost! The child closed their stderr."
         print "I saw them write:\n", self.errdata

     def processEnded(self, status):
         print "debug: type(status): %s" % type(status.value)
         print "debug: isinstance(status.value, error.ProcessDone): % 
s" % \
             isinstance(status.value, error.ProcessDone)
         print "debug: isinstance(status.value,  
error.ProcessTerminated): %s" % \
             isinstance(status.value, error.ProcessTerminated)

         if isinstance(status.value, error.ProcessDone):
             print "error: exitCode: %s" % status.value.exitCode
             print "error: signal: %s" % status.value.signal
             print "error: status: %s" % status.value.status

         elif isinstance(status.value, error.ProcessTerminated):
             print "error: errorMessage: %s" % status.getErrorMessage()
             print "error: exitCode: %s" % status.value.exitCode
             print "error: signal: %s" % status.value.signal
             print "error: status: %s" % status.value.status

         print "processEnded, status %s" % repr(status)
         print "quitting"
         reactor.stop()

def usage():
     print "Usage: py_spawn.py"

def main():

     processProtocol = MyProcessProtocol()

     # killing the bash process using SIGTERM results in:
     # error: errorMessage: A process has ended with a probable error  
condition: process ended by signal 15.
     # error: exitCode: None
     # error: signal: 15
     # error: status: 15
     # processEnded, status <twisted.python.failure.Failure <class  
'twisted.internet.error.ProcessTerminated'>>

     reactor.spawnProcess(processProtocol, 'bash', ["bash", "-c",  
"echo.bash"], env=None)

     # killing the bash process using SIGTERM results in:
     # error: exitCode: 0
     # error: signal: None
     # error: status: 0
     # processEnded, status <twisted.python.failure.Failure <class  
'twisted.internet.error.ProcessDone'>>

     #reactor.spawnProcess(processProtocol, 'bash', ["bash", "-c", "./ 
echo.py -m message"], env=None)

     reactor.run()

if __name__ == "__main__":
     main()


--- echo.py ---
#!/opt/local/bin/python2.5


from optparse import OptionParser, OptParseError

from twisted.internet import reactor
from twisted.spread import pb
from zope.interface import implements

import pprint
import sys

Dumper = pprint.pformat

def run(duration, message):

     duration -= 1
     print "duration: %d, message: %s" % (duration, message)
     if duration != 0:
         reactor.callLater(1, run, duration, message)
     else:
         reactor.stop()

def main():
     print "debug: args: %s" % sys.argv[1:]
     try:
         duration = 0
         message = "No message"

         parser = OptionParser()
         parser.add_option("-d", "--duration=", dest="duration",
             metavar="INT",
             default=duration,
             help="How long to run, 0 will run forever [default: % 
default]")
         parser.add_option("-m", "--message=", dest="message",
             default=message,
             help="Message to display [default: %default]")

         (opts, args) = parser.parse_args()
         duration = int(opts.duration)
         message = opts.message

         print "debug: opts: %s, args: %s" % (opts, args)

     except OptParseError, e:
         # print help information and exit:
         print "exception: %s" % e
         sys.exit(2)

     reactor.callLater(0, run, duration, message)
     reactor.run()

if __name__ == "__main__":
     main()


--- echo.bash ---
#!/bin/bash

while true; do
     echo -n "This is a message ";
     date;
     sleep 1;
done




From Paul_S_Johnson at mnb.uscourts.gov  Mon Oct  1 17:36:38 2007
From: Paul_S_Johnson at mnb.uscourts.gov (Paul_S_Johnson at mnb.uscourts.gov)
Date: Mon, 1 Oct 2007 16:36:38 -0500
Subject: [Twisted-Python] Project design questions
Message-ID: <OF2BEB7F20.432F903F-ON86257367.0076A604-86257367.0076B60A@uscmail.uscourts.gov>

Here's a description of my general game plan and my questions are below:

THE MISSION
Create a GUI-based, dashboard-like application that monitors the overall 
health of our resources. It would be a tool that helps pinpoint trouble 
spots when performance is less than desirable. Ideally, we would get such 
a good handle on it that it would warn us of impending trouble before it 
causes a failure.

SAMPLE FUNCTIONS FOR THE APPLICATION 
Monitor web traffic by distilling down Apache logs
Monitor server hardware through built in firmware http interface
Monitor server health via command line commands:
        disk space
        processor load
        etc.
Monitor database health via command line commands
Monitor backup success through log output
Monitor misc. server messages
Monitor switch traffic
Monitor processes
...And more.

POSSIBLE CONSTRAINTS
Our main servers are on a WAN whose security is the job of the greater 
org.  We have access through SSL connections now, but we may not be able 
to get permissions to open any additional ports for our monitoring 
purposes.

THE QUESTIONS
Very basic question: am I better off leaving most of the heavy lifting (as 
in the programming logic) on the client side? This would mean more data 
would have to pass from server to client app (e.g. a whole web log or part 
thereof) which is the downside. The upside is that in a failure emergency 
situation if my server is still up enough to have a SSH connection my 
dashboard app may still be useful to me. Thoughts?

If we are not constrained to only get our info via SSH what's the best 
kind of connection to have? My thought is to use the Prospective Broker 
since that seems to be the most Pythonistic option. Is it possible to 
encrypt the PB server connection?

Are there any Twisted methods of tunneling through an existing SSH 
connection (just a wild thought)?

Thanks,

Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20071001/cd73c32f/attachment.htm 

From Paul_S_Johnson at mnb.uscourts.gov  Mon Oct  1 11:20:27 2007
From: Paul_S_Johnson at mnb.uscourts.gov (Paul_S_Johnson at mnb.uscourts.gov)
Date: Mon, 1 Oct 2007 10:20:27 -0500
Subject: [Twisted-Python] Project design questions
In-Reply-To: <37d49ed40709280813j3bb47ed7s22b974fc377c05a@mail.gmail.com>
Message-ID: <OF8A40551C.6E1DECD2-ON86257367.004E32E2-86257367.00544503@uscmail.uscourts.gov>

Here's a description of my general game plan and my questions are below:

THE MISSION
Create a GUI-based, dashboard-like application that monitors the overall 
health of our resources. It would be a tool that helps pinpoint trouble 
spots when performance is less than desirable. Ideally, we would get such 
a good handle on it that it would warn us of impending trouble before it 
causes a failure.

SAMPLE FUNCTIONS FOR THE APPLICATION 
Monitor web traffic by distilling down Apache logs
Monitor server hardware through built in firmware http interface
Monitor server health via command line commands:
        disk space
        processor load
        etc.
Monitor database health via command line commands
Monitor backup success through log output
Monitor misc. server messages
Monitor switch traffic
Monitor processes
...And more.

POSSIBLE CONSTRAINTS
Our main servers are on a WAN whose security is the job of the greater 
org.  We have access through SSL connections now, but we may not be able 
to get permissions to open any additional ports for our monitoring 
purposes.

THE QUESTIONS
Very basic question: am I better off leaving most of the heavy lifting (as 
in the programming logic) on the client side? This would mean more data 
would have to pass from server to client app (e.g. a whole web log or part 
thereof) which is the downside. The upside is that in a failure emergency 
situation if my server is still up enough to have a SSH connection my 
dashboard app may still be useful to me. Thoughts?

If we are not constrained to only get our info via SSH what's the best 
kind of connection to have? My thought is to use the Prospective Broker 
since that seems to be the most Pythonistic option. Is it possible to 
encrypt the PB server connection?

Are there any Twisted methods of tunneling through an existing SSH 
connection (just a wild thought)?

Thanks,

Paul

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20071001/32823dba/attachment.htm 

From daedalus at eigenmagic.com  Tue Oct  2 01:54:25 2007
From: daedalus at eigenmagic.com (Justin Warren)
Date: Tue, 02 Oct 2007 15:54:25 +1000
Subject: [Twisted-Python] Project design questions
In-Reply-To: <OF2BEB7F20.432F903F-ON86257367.0076A604-86257367.0076B60A@uscmail.uscourts.gov>
References: <OF2BEB7F20.432F903F-ON86257367.0076A604-86257367.0076B60A@uscmail.uscourts.gov>
Message-ID: <1191304465.6922.51.camel@localhost>

On Mon, 2007-10-01 at 16:36 -0500, Paul_S_Johnson at mnb.uscourts.gov
wrote:
> 
> Here's a description of my general game plan and my questions are
> below: 
> 
> THE MISSION 
> Create a GUI-based, dashboard-like application that monitors the
> overall health of our resources. It would be a tool that helps
> pinpoint trouble spots when performance is less than desirable.
> Ideally, we would get such a good handle on it that it would warn us
> of impending trouble before it causes a failure. 

Wow. This is indeed a mighty mission.

> SAMPLE FUNCTIONS FOR THE APPLICATION 
> Monitor web traffic by distilling down Apache logs 
> Monitor server hardware through built in firmware http interface 
> Monitor server health via command line commands: 
>         disk space 
>         processor load 
>         etc. 
> Monitor database health via command line commands 
> Monitor backup success through log output 
> Monitor misc. server messages 
> Monitor switch traffic 
> Monitor processes 
> ...And more. 

May I suggest that reviewing existing prior art might serve as a useful
place to begin in understanding ways in which this can be done? Examples
include, but are far from limited to:

- Concord eHealth
- BMC Patrol
- HP IT/O (or whatever it's called these days)
- IBM Tivoli
- EMC SMART
- Nagios
- Zenoss
- Hyperic
- seafelt (disclosure: I wrote large amounts of this one)
- cacti
- MRTG

> POSSIBLE CONSTRAINTS 
> Our main servers are on a WAN whose security is the job of the greater
> org.  We have access through SSL connections now, but we may not be
> able to get permissions to open any additional ports for our
> monitoring purposes. 
> 
> THE QUESTIONS 
> Very basic question: am I better off leaving most of the heavy lifting
> (as in the programming logic) on the client side? This would mean more
> data would have to pass from server to client app (e.g. a whole web
> log or part thereof) which is the downside. The upside is that in a
> failure emergency situation if my server is still up enough to have a
> SSH connection my dashboard app may still be useful to me. Thoughts? 

In a production environment, it is usual for people to get nervous about
how much of a system's resources will be consumed by the monitoring
software (usually called an agent). A webserver's primary function is to
serve web traffic, a database server to be a database, etc. so the usual
way is to make the client as lightweight as possible and have the heavy
lifting done on a dedicated monitoring server (or servers).

Then you need to consider if you will need to maintain historical data
in order to make decisions. You would need a certain amount of
historical data to decide if the rate of storage growth is abnormal, for
example.

You will also need to decide if you're doing polling based monitoring,
where the monitoring system asks clients at a regular interval for some
information, or event based monitoring where you simply respond to an
event occurring, or some hybrid of the two, where regular polling
identifies an event (eg: CPU load too high) which then triggers an event
(CPU load too high on client x). Having the client/agent do the polling
may be more appropriate in some circumstances, and in others having the
server do it might be best.

> If we are not constrained to only get our info via SSH what's the best
> kind of connection to have? My thought is to use the Prospective
> Broker since that seems to be the most Pythonistic option. Is it
> possible to encrypt the PB server connection? 

It sounds like you're talking about how to get from the GUI to a server,
rather than how to talk to a device to interrogate it for information,
so yes, Perspective Broker is probably a reasonable way to do that. You
won't be able to run Python on a Cisco switch, though, so have you
considered something like SNMP for statistics gathering for non-Python
devices?

What is your actual goal? Do you want to write your own systems
monitoring software, or do you want to monitor your kit? Writing this
sort of software can become quite a complex undertaking.

Have you considered adapting an existing implementation to your own
needs by writing the necessary plugin? To stand on the shoulders of
giants, as it were.

-- 
Justin Warren <daedalus at eigenmagic.com>



From timo.warns at googlemail.com  Tue Oct  2 11:32:10 2007
From: timo.warns at googlemail.com (Timo Warns)
Date: Tue, 2 Oct 2007 17:32:10 +0200
Subject: [Twisted-Python] Project design questions
In-Reply-To: <1191304465.6922.51.camel@localhost>
References: <OF2BEB7F20.432F903F-ON86257367.0076A604-86257367.0076B60A@uscmail.uscourts.gov>
	<1191304465.6922.51.camel@localhost>
Message-ID: <1e9f9aad0710020832l7c9c507ahaf334982d53028b6@mail.gmail.com>

The paper at http://www.cs.princeton.edu/nsg/papers/comon_osr_06/ could be
interesting as it
describes the architecture of the CoMon monitoring system for the PlanetLab
cluster.
In particular, it discusses some design decisions that address some of your
questions.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20071002/25fc5c80/attachment.htm 

From sguha at purdue.edu  Tue Oct  2 19:47:19 2007
From: sguha at purdue.edu (Saptarshi Guha)
Date: Tue, 2 Oct 2007 19:47:19 -0400
Subject: [Twisted-Python] LoopingCall vs internet.TimerService
Message-ID: <D901A37F-5ACD-48DA-B9F7-AEB39E66A26E@purdue.edu>

Hello,
Thanks for twisted - very useful. Now, my questions
I have written a server which accepts connections from clients, takes  
requests and adds them to a Queue (a python object of Queue.Queue).
Now i have two approaches

a) At startup, my server(a subclass of pb.Root)  runs a "dispatcher"  
function using task.LoopingCall(dispatcher).start(0.1)
b)Create a separate subclass of internet.TimerService whose function  
is dispatcher

[INFO: dispatcher has methods like obj.callRemote, addCallback and  
addErrback]

So which is better, neater, safer? loopingcall of timerservice? also  
is it safe to do the calls mentioned in INFO within dispatcher?

Thank you for your time and help.

Saptarshi Guha

Saptarshi Guha
sapsi at pobox.com



-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20071002/303453de/attachment.htm 

From sguha at purdue.edu  Tue Oct  2 20:05:43 2007
From: sguha at purdue.edu (Saptarshi Guha)
Date: Tue, 2 Oct 2007 20:05:43 -0400
Subject: [Twisted-Python] Re: LoopingCall vs internet.TimerService
In-Reply-To: <D901A37F-5ACD-48DA-B9F7-AEB39E66A26E@purdue.edu>
References: <D901A37F-5ACD-48DA-B9F7-AEB39E66A26E@purdue.edu>
Message-ID: <56C0EB8B-CF4B-4E70-8FE5-C58F8A9A3560@purdue.edu>

I did read the source that
a)LoopingCall is implemented via calllater's
b)internet.TimerService is a big wrapper around loopingcall

I've probably simplified it too much but what then is the difference?
thank you

Saptarshi Guha




On Oct 2, 2007, at 7:47 PM, Saptarshi Guha wrote:

> Hello,
> Thanks for twisted - very useful. Now, my questions
> I have written a server which accepts connections from clients,  
> takes requests and adds them to a Queue (a python object of  
> Queue.Queue).
> Now i have two approaches
>
> a) At startup, my server(a subclass of pb.Root)  runs a  
> "dispatcher" function using task.LoopingCall(dispatcher).start(0.1)
> b)Create a separate subclass of internet.TimerService whose  
> function is dispatcher
>
> [INFO: dispatcher has methods like obj.callRemote, addCallback and  
> addErrback]
>
> So which is better, neater, safer? loopingcall of timerservice?  
> also is it safe to do the calls mentioned in INFO within dispatcher?
>
> Thank you for your time and help.
>
> Saptarshi Guha
>
> Saptarshi Guha
> sapsi at pobox.com
>
>
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20071002/b128a427/attachment.htm 

From exarkun at divmod.com  Wed Oct  3 10:31:06 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 3 Oct 2007 10:31:06 -0400
Subject: [Twisted-Python] Re: LoopingCall vs internet.TimerService
In-Reply-To: <56C0EB8B-CF4B-4E70-8FE5-C58F8A9A3560@purdue.edu>
Message-ID: <20071003143106.8162.650730627.divmod.quotient.17467@ohm>

On Tue, 2 Oct 2007 20:05:43 -0400, Saptarshi Guha <sguha at purdue.edu> wrote:
>I did read the source that
>a)LoopingCall is implemented via calllater's
>b)internet.TimerService is a big wrapper around loopingcall
>
>I've probably simplified it too much but what then is the difference?
>thank you

You haven't really simplified too much.  They both provide the same
functionality.  LoopingCall provides it with one API, TimerService
provides it with a different API.  Of the two, LoopingCall is the
more commonly useful.

Jean-Paul



From paulswartz at gmail.com  Wed Oct  3 11:02:06 2007
From: paulswartz at gmail.com (Paul Swartz)
Date: Wed, 3 Oct 2007 11:02:06 -0400
Subject: [Twisted-Python] How to switch users in SSH session.
In-Reply-To: <20070928113422.8162.2102237877.divmod.quotient.15372@ohm>
References: <OF805FD359.073506AB-ON86257363.006CD902-86257363.006DDACA@uscmail.uscourts.gov>
	<20070928113422.8162.2102237877.divmod.quotient.15372@ohm>
Message-ID: <324cfb540710030802x6ef98e81yfd1ffb3d6ab8de1@mail.gmail.com>

On 9/28/07, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> On Thu, 27 Sep 2007 15:00:14 -0500, paul_s_johnson at mnb.uscourts.gov wrote:
> >Here's the line that instaniates my SSH object (also repeated at the end
> >of my code):
> >
> >myssh = SSH("my.host.com", "myusername", "mypasswd", ["id; su - root;
> >myrootpasswd; id", "pwd", "ls -l"])
>
> I suspect the list element which includes "su - root; myrootpasswd;"
> won't achieve the desired affect.  Even if su weren't careful to try
> to read from a pty, "myrootpasswd" won't be sent to its stdin, it'll
> be executed by the shell after "su - root" exits, which it probably
> won't since nothing is going to write a password to it.

What you'll do is on the channel object which runs these commands,
you'll use the .write() method to send the root password to su.

-p
-- 
Paul Swartz
paulswartz at gmail dot com
http://z3p.livejournal.com/
AIM: z3penguin



From eburus at gmail.com  Wed Oct  3 11:37:05 2007
From: eburus at gmail.com (Burus Gmail)
Date: Wed, 03 Oct 2007 19:37:05 +0400
Subject: [Twisted-Python] Re: LoopingCall vs internet.TimerService
In-Reply-To: <20071003143106.8162.650730627.divmod.quotient.17467@ohm>
References: <20071003143106.8162.650730627.divmod.quotient.17467@ohm>
Message-ID: <4703B721.3010309@gmail.com>

LoopingCall - periodically call a  function.
TimerService - wrapper for the twisted service with LoopingCall
functionality.

I use LoopingCall and write my own wrapper for the service,
but TimerService is really more universal for it.

More useful - create twisted Service and Plugins for your application,
use component architecture this interface adaptation.
In that variant you will construct TimerService from scratch =).


Jean-Paul Calderone wrote:
> On Tue, 2 Oct 2007 20:05:43 -0400, Saptarshi Guha <sguha at purdue.edu>
> wrote:
>> I did read the source that
>> a)LoopingCall is implemented via calllater's
>> b)internet.TimerService is a big wrapper around loopingcall
>>
>> I've probably simplified it too much but what then is the difference?
>> thank you
>
> You haven't really simplified too much.  They both provide the same
> functionality.  LoopingCall provides it with one API, TimerService
> provides it with a different API.  Of the two, LoopingCall is the
> more commonly useful.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>

-- 
+---------------------------------------+
|~-~-~-~-~~-~-~-~-~-~-~-~~-~-~-~-~-~-~-~|
|     SeNd CaKe IcE, hElLo MuMmY...     |
|_______________________________________|

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20071003/bddbc8a2/attachment.htm 

From stefan.arentz at gmail.com  Thu Oct  4 06:20:45 2007
From: stefan.arentz at gmail.com (Stefan Arentz)
Date: Thu, 4 Oct 2007 12:20:45 +0200
Subject: [Twisted-Python] Collecting all results from a DeferredList
Message-ID: <adf34c300710040320g41c238c2ma88e02ad2ea53bc2@mail.gmail.com>

I want to request many web pages through a DeferredList and then
combine the results in an array. I don't understand how to keep an
array as shared state between these requests and return it to the
original caller when the DeferredList has completed.

 S.



From stefan.arentz at gmail.com  Thu Oct  4 08:44:34 2007
From: stefan.arentz at gmail.com (Stefan Arentz)
Date: Thu, 4 Oct 2007 14:44:34 +0200
Subject: [Twisted-Python] Re: Collecting all results from a DeferredList
In-Reply-To: <adf34c300710040320g41c238c2ma88e02ad2ea53bc2@mail.gmail.com>
References: <adf34c300710040320g41c238c2ma88e02ad2ea53bc2@mail.gmail.com>
Message-ID: <adf34c300710040544w36df4a40s1eed343cd9e79a97@mail.gmail.com>

Hm. This was actually pretty easy :-)

 S.

On 10/4/07, Stefan Arentz <stefan.arentz at gmail.com> wrote:
> I want to request many web pages through a DeferredList and then
> combine the results in an array. I don't understand how to keep an
> array as shared state between these requests and return it to the
> original caller when the DeferredList has completed.



From iacovou at gmail.com  Fri Oct  5 14:45:13 2007
From: iacovou at gmail.com (kgi)
Date: Fri, 5 Oct 2007 21:45:13 +0300
Subject: [Twisted-Python] stdio.StandardIO, ServerProtocol and Services.
Message-ID: <491db6c90710051145p56f37195he89903503564df25@mail.gmail.com>

Hi all.

I'm trying to write a "terminal" component, wrapped in a
service.Service, to drop into an application framework so that I can
use it to build interactive command-line tools. I've almost, but not
quite, got it working.

I know about manhole, but I want to write a simple command-based
syntax, rather than exposing a python namespace and interpreter. I
could also just go with  a telnet or ssh interface, but that would
require an additional step (the actual telnet or ssh). There's also
stdiodemo.py, but that doesn't offer readline-like functionality,
which would be a Very Good Thing.

(Besides, I'm really curious as to why this approach is not working!)

The code below is a minimal stripped-down example of what I've got so
far through frantic grepping and glimpseing through the Twisted
codebase. (although there are some fragmentary holdovers from various
experiments; ignore these). At the moment, the command handler (the
lineReceived() method) just echoes the argument with some '+' signs
prepended.

The termios stuff comes from twisted/conch/stdio.py, via a mailing
list post saying something to the effect of, "this is the minimal
amount you have to do in order to hook up your terminal to your
process's stdio"; I don't have the ML link handy right now, sorry.

Note that whereas stdio.py passes a Protocol argument to
ServerProtocol, I've created an intermediate class, CLIServerProtocol,
which has a protocolFactory attribute. An examination of
twisted/conch/insults/insults.py shows that this should be equivalent.

For the curious bystanders, HistoricRecvLine is derived as follows:

  HistoricRecvLine -> RecvLine -> TerminalProtocol

... and TerminalProtocol implements things like connectionMade, etc.

Here's the behaviour I see:

With the code as is, I can type in lines and get a reply from
lineReceived. However, none of the cursor keys or other things for
which there is special code in twisted/conch/recvline.py work; I just
get control codes all over the terminal.

If I uncomment the "reactor.run()", however, the behaviour changes
completely, and becomes much closer to what I expect: keypresses like
Home, cursor keys, etc, are honoured, as well as the history. However,
Ctrl-C merely loses the connection, and the terminal hangs and I have
to kill the twistd process externally.

The fact that adding reactor.run() (which shouldn't be needed in a
Service, right?) implies to me that the reactor isn't starting up
properly without it, and I can't see why.

Any advice would be greatly appreciated.

Ricky

--

import os, tty, sys, termios

from twisted.application import service

from twisted.internet import reactor, stdio, protocol, defer
from twisted.python import failure, reflect, log
from twisted.protocols import basic
from twisted.application import internet

from twisted.conch.insults import insults
from twisted.conch.manhole import ColoredManhole
# from twisted.conch.stdio import ConsoleManhole

from twisted.application                import service
from twisted.conch import recvline


class CLIProtocol ( recvline.HistoricRecvLine ):

    service = None

    def connectionMade ( self ):
        recvline.HistoricRecvLine.connectionMade ( self )
        self.keyHandlers [ '\x01' ] = self.handle_HOME
        self.keyHandlers [ '\x03' ] = self.handle_QUIT
        self.keyHandlers [ '\x1a' ] = self.handle_QUIT


    def connectionLost ( self, reason ):
        log.msg ( "Connection Lost" )


    def handle_QUIT ( self ):
        self.terminal.loseConnection()

    def lineReceived ( self, line ):
        self.terminal.write ( '+++' + line )


class CLIServerProtocol ( insults.ServerProtocol ):
    protocolFactory = CLIProtocol


class CLIService ( service.Service ):

    def startService ( self ):
        fd = sys.__stdin__.fileno()
        oldSettings = termios.tcgetattr ( fd )
        tty.setraw ( fd )
        try:
            p = CLIServerProtocol()
            stdio.StandardIO ( p )
            # reactor.run()
        finally:
            termios.tcsetattr ( fd, termios.TCSANOW, oldSettings )
            os.write ( fd, "\r\x1bc\r" )

        return service.Service.startService ( self )

######################################################################
# Create the application service hierarchy.
######################################################################

application       = service.Application ( 'cliapp' )

cs = CLIService()
cs.setServiceParent ( application )



From rfugger at gmail.com  Fri Oct  5 17:41:28 2007
From: rfugger at gmail.com (Ryan Fugger)
Date: Fri, 5 Oct 2007 14:41:28 -0700
Subject: [Twisted-Python] Returning a Deferred as a result from another
	Deferred
Message-ID: <c423163f0710051441m449f3b08v9c1587848582ceb4@mail.gmail.com>

Returning a Deferred as a result from another Deferred seems to be
disallowed by an assertion at the start of the callback chain.  Why is
this?  Right now I have worked around this limitation by wrapping my
Deferred in a list and then unwrapping it in the callback.

Maybe someone can suggest a better approach.  My application takes a
command from one connection and defers processing to a worker thread
to permit potentially-blocking database access.  That worker thread
often will need to send data over another connection to fulfill the
command, and await a reply before the reply can be sent back over the
original command connection.  The worker thread sends data over the
second connection using callFromThread, and this send operation itself
returns a Deferred which fires when the reply is received.  It is this
Deferred that I want to return as a result from the original Deferred
created by deferring to the worker thread in the command handler, so I
can wait until the reply comes from the second connection, and then
reply on the original command connection.  Can someone suggest a
better approach?

Thanks.

Ryan



From jml at mumak.net  Fri Oct  5 21:41:22 2007
From: jml at mumak.net (Jonathan Lange)
Date: Sat, 6 Oct 2007 11:41:22 +1000
Subject: [Twisted-Python] Returning a Deferred as a result from another
	Deferred
In-Reply-To: <c423163f0710051441m449f3b08v9c1587848582ceb4@mail.gmail.com>
References: <c423163f0710051441m449f3b08v9c1587848582ceb4@mail.gmail.com>
Message-ID: <d06a5cd30710051841g2cf657f0tc17b06c4f2a2df49@mail.gmail.com>

On 10/6/07, Ryan Fugger <rfugger at gmail.com> wrote:
> Returning a Deferred as a result from another Deferred seems to be
> disallowed by an assertion at the start of the callback chain.  Why is
> this?  Right now I have worked around this limitation by wrapping my
> Deferred in a list and then unwrapping it in the callback.
>

No it's not. I can guarantee this.

What's the content of the AssertionError that you are getting?

jml



From rfugger at gmail.com  Fri Oct  5 22:00:51 2007
From: rfugger at gmail.com (Ryan Fugger)
Date: Fri, 5 Oct 2007 19:00:51 -0700
Subject: [Twisted-Python] Returning a Deferred as a result from another
	Deferred
In-Reply-To: <d06a5cd30710051841g2cf657f0tc17b06c4f2a2df49@mail.gmail.com>
References: <c423163f0710051441m449f3b08v9c1587848582ceb4@mail.gmail.com>
	<d06a5cd30710051841g2cf657f0tc17b06c4f2a2df49@mail.gmail.com>
Message-ID: <c423163f0710051900l55999208h592940e8ac991c33@mail.gmail.com>

On 10/5/07, Jonathan Lange <jml at mumak.net> wrote:
> On 10/6/07, Ryan Fugger <rfugger at gmail.com> wrote:
> > Returning a Deferred as a result from another Deferred seems to be
> > disallowed by an assertion at the start of the callback chain.  Why is
> > this?  Right now I have worked around this limitation by wrapping my
> > Deferred in a list and then unwrapping it in the callback.
> >
>
> No it's not. I can guarantee this.
>
> What's the content of the AssertionError that you are getting?

No content in the error.  Line 238 of twisted/internet/defer.py (first
line in Deferred.callback) is:

assert not isinstance(result, Deferred)

That's pretty explicit in disallowing Deferreds...  I'm working with
the version 2.5 release.

Ryan



From dreid at dreid.org  Fri Oct  5 22:05:34 2007
From: dreid at dreid.org (David Reid)
Date: Fri, 5 Oct 2007 19:05:34 -0700
Subject: [Twisted-Python] Returning a Deferred as a result from another
	Deferred
In-Reply-To: <c423163f0710051441m449f3b08v9c1587848582ceb4@mail.gmail.com>
References: <c423163f0710051441m449f3b08v9c1587848582ceb4@mail.gmail.com>
Message-ID: <FFF3DEBD-FCFE-437D-A11B-CF12B8F4B33F@dreid.org>

Hi Ryan,
On Oct 5, 2007, at 2:41 PM, Ryan Fugger wrote:

> Returning a Deferred as a result from another Deferred seems to be
> disallowed by an assertion at the start of the callback chain.  Why is
> this?  Right now I have worked around this limitation by wrapping my
> Deferred in a list and then unwrapping it in the callback.

The following will cause an AssertionError

d = Deferred()
d2 = Deferred()

d2.callback(d)

There isn't really a good reason to do this anyway.  Since there is  
likely no reason to not just return d with your callbacks attached.   
If you do need two deferreds here for some reason, you _can_ return a  
deferred from a callback.  In which case further callbacks will not  
be called until the second deferred has fired.

-David




From rfugger at gmail.com  Fri Oct  5 22:46:03 2007
From: rfugger at gmail.com (Ryan Fugger)
Date: Fri, 5 Oct 2007 19:46:03 -0700
Subject: [Twisted-Python] Returning a Deferred as a result from another
	Deferred
In-Reply-To: <FFF3DEBD-FCFE-437D-A11B-CF12B8F4B33F@dreid.org>
References: <c423163f0710051441m449f3b08v9c1587848582ceb4@mail.gmail.com>
	<FFF3DEBD-FCFE-437D-A11B-CF12B8F4B33F@dreid.org>
Message-ID: <c423163f0710051946n5a0f4036s6c6464fd844abf1@mail.gmail.com>

On 10/5/07, David Reid <dreid at dreid.org> wrote:
> Hi Ryan,
> On Oct 5, 2007, at 2:41 PM, Ryan Fugger wrote:
>
> > Returning a Deferred as a result from another Deferred seems to be
> > disallowed by an assertion at the start of the callback chain.  Why is
> > this?  Right now I have worked around this limitation by wrapping my
> > Deferred in a list and then unwrapping it in the callback.
>
> The following will cause an AssertionError
>
> d = Deferred()
> d2 = Deferred()
>
> d2.callback(d)
>
> There isn't really a good reason to do this anyway.  Since there is
> likely no reason to not just return d with your callbacks attached.
> If you do need two deferreds here for some reason, you _can_ return a
> deferred from a callback.  In which case further callbacks will not
> be called until the second deferred has fired.

What if I need to return a Deferred from a deferToThread?

Ryan



From dreid at dreid.org  Fri Oct  5 23:38:37 2007
From: dreid at dreid.org (David Reid)
Date: Fri, 5 Oct 2007 20:38:37 -0700
Subject: [Twisted-Python] Returning a Deferred as a result from another
	Deferred
In-Reply-To: <c423163f0710051946n5a0f4036s6c6464fd844abf1@mail.gmail.com>
References: <c423163f0710051441m449f3b08v9c1587848582ceb4@mail.gmail.com>
	<FFF3DEBD-FCFE-437D-A11B-CF12B8F4B33F@dreid.org>
	<c423163f0710051946n5a0f4036s6c6464fd844abf1@mail.gmail.com>
Message-ID: <A683B1AC-FCEE-44E6-BC92-184392361551@dreid.org>


On Oct 5, 2007, at 7:46 PM, Ryan Fugger wrote:
> What if I need to return a Deferred from a deferToThread?

That isn't really a "What if I" question, that's a "Why do you think  
you" question.

deferToThread is best used for taking uncontrollably blocking APIs  
(preferably C APIs that release GIL) and getting a Deferred back.  I  
personally can not think of a single reason why you would ever take a  
Deferred returning API and shuffle it off to a thread.

-David



From rfugger at gmail.com  Sat Oct  6 02:34:45 2007
From: rfugger at gmail.com (Ryan Fugger)
Date: Fri, 5 Oct 2007 23:34:45 -0700
Subject: [Twisted-Python] Returning a Deferred as a result from another
	Deferred
In-Reply-To: <A683B1AC-FCEE-44E6-BC92-184392361551@dreid.org>
References: <c423163f0710051441m449f3b08v9c1587848582ceb4@mail.gmail.com>
	<FFF3DEBD-FCFE-437D-A11B-CF12B8F4B33F@dreid.org>
	<c423163f0710051946n5a0f4036s6c6464fd844abf1@mail.gmail.com>
	<A683B1AC-FCEE-44E6-BC92-184392361551@dreid.org>
Message-ID: <c423163f0710052334v33a620aduad99b5220c7b423b@mail.gmail.com>

On 10/5/07, David Reid <dreid at dreid.org> wrote:
>
> On Oct 5, 2007, at 7:46 PM, Ryan Fugger wrote:
> > What if I need to return a Deferred from a deferToThread?
>
> That isn't really a "What if I" question, that's a "Why do you think
> you" question.
>
> deferToThread is best used for taking uncontrollably blocking APIs
> (preferably C APIs that release GIL) and getting a Deferred back.  I
> personally can not think of a single reason why you would ever take a
> Deferred returning API and shuffle it off to a thread.

See my original email for the specifics.  I receive a command on a
connection, deferToThread for handling, which involves database
access, and then callFromThread to send a message on another
connection, which returns a Deferred that fires when the reply is
received, triggering a reply to the command on the original
connection.

Ryan



From glyph at divmod.com  Sat Oct  6 07:38:09 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Sat, 06 Oct 2007 11:38:09 -0000
Subject: [Twisted-Python] Returning a Deferred as a result from another
	Deferred
In-Reply-To: <c423163f0710052334v33a620aduad99b5220c7b423b@mail.gmail.com>
References: <c423163f0710051441m449f3b08v9c1587848582ceb4@mail.gmail.com>
	<FFF3DEBD-FCFE-437D-A11B-CF12B8F4B33F@dreid.org>
	<c423163f0710051946n5a0f4036s6c6464fd844abf1@mail.gmail.com>
	<A683B1AC-FCEE-44E6-BC92-184392361551@dreid.org>
	<c423163f0710052334v33a620aduad99b5220c7b423b@mail.gmail.com>
Message-ID: <20071006113809.5579.124642818.divmod.xquotient.5198@joule.divmod.com>

On 06:34 am, rfugger at gmail.com wrote:
>On 10/5/07, David Reid <dreid at dreid.org> wrote:

>>deferToThread is best used for taking uncontrollably blocking APIs
>>(preferably C APIs that release GIL) and getting a Deferred back.  I
>>personally can not think of a single reason why you would ever take a
>>Deferred returning API and shuffle it off to a thread.

>See my original email for the specifics.  I receive a command on a
>connection, deferToThread for handling, which involves database
>access, and then callFromThread to send a message on another
>connection, which returns a Deferred that fires when the reply is
>received, triggering a reply to the command on the original
>connection.

I assume the briefest Python summary of your code looks like this:

def thingInThread():
    databaseResult = databaseWork()
    deferred = reactor.callFromThread(otherConnection.sendRequest,
                                      databaseResult)
    return deferred

def thingInReactor():
    return threads.deferToThread(thingInThread)

This isn't really idiomatic Twisted code, because while it is 
technically safe (thingInThread doesn't *do* anything with its Deferred) 
it is slightly misleading.  Deferreds are not thread safe, and there's 
nothing you *could* do with that Deferred in thingInThread; if you 
wanted to add a callback to it, for example, you can't.

What you actually want is something more like this:

def thingInReactor():
    deferred = threads.deferToThread(databaseWork)
    def tellOtherConnection(databaseResult):
        return otherConnection.sendRequest(databaseResult)
    deferred.addCallback(tellOtherConnection)
    return deferred

This deferred can safely have callbacks added to it and generally be 
treated normally, since it never sees a thread.  Also, now you don't 
have the problem where .callback() is being called with Deferred as an 
argument; instead, you are returning one Deferred to another, which 
results in the outer Deferred ("deferred") receiving the inner 
Deferred's result (whatever "otherConnection.sendRequest" would have 
fired with).



From p.mayers at imperial.ac.uk  Sat Oct  6 11:04:46 2007
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Sat, 06 Oct 2007 16:04:46 +0100
Subject: [Twisted-Python] stdio.StandardIO, ServerProtocol and Services.
In-Reply-To: <491db6c90710051145p56f37195he89903503564df25@mail.gmail.com>
References: <491db6c90710051145p56f37195he89903503564df25@mail.gmail.com>
Message-ID: <1191683086.4059.5.camel@localhost.localdomain>


> The fact that adding reactor.run() (which shouldn't be needed in a
> Service, right?) implies to me that the reactor isn't starting up
> properly without it, and I can't see why.

How are you starting this code? Are you just executing it? If so, don't
do that. Use:

twistd -noy thefile.py

The Twisted application/service code just creates the relevant objects;
the application object still needs to be run. "twistd" will do this for
you.






From jasper at peak.org  Sat Oct  6 17:45:42 2007
From: jasper at peak.org (Jasper)
Date: Sat, 06 Oct 2007 14:45:42 -0700
Subject: [Twisted-Python] Jellying Decimals?
In-Reply-To: <1191683086.4059.5.camel@localhost.localdomain>
References: <491db6c90710051145p56f37195he89903503564df25@mail.gmail.com>
	<1191683086.4059.5.camel@localhost.localdomain>
Message-ID: <47080206.3040304@peak.org>

I'm trying to Jelly decimal.Decimals, using Twisted 2.4.  I've tried a 
few approaches, such as deriving my own Decimal class from 
decimal.Decimal, pb.RemoteCopy, and pb.Copyable, but no luck.

Is there an easy way to do this, without patching twisted itself?  Worse 
case I could always fall back on passing strings across the wire I 
guess, but that's not very enticing. :-/

-Jasper



From exarkun at twistedmatrix.com  Sun Oct  7 00:05:03 2007
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 07 Oct 2007 04:05:03 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1191729903.82.700579272@twistedmatrix.com

Bug summary
______________________
Summary for 2007-09-30 through 2007-10-07
Bugs opened: 5    Bugs closed: 2  Total open bugs: 1038 (+3)

|== Type Changes   |== Priority Changes   |== Component Changes     
|Defect:  +3       |Highest:  -2          |Core:                +0  
                   |High:     +1          |Release Management:  +1  
                   |Normal:   +3          |Trial:               -1  
                   |Low:      +1          |Web:                 +2  
                                          |Web2:                +1  


New / Reopened Bugs
______________________
                    ===== High =====
[#2843] twisted.web2.log.FileAccessLoggingObserver should take a file like object instead of a logPath. (opened by dreid)
    defect          web2       http://twistedmatrix.com/trac/ticket/2843

                    ===== Normal =====
[#2841] [PATCH] Add a redirect limit to HTTPPageGetter in twisted/web/client.py (opened by alexis)
    defect          web        http://twistedmatrix.com/trac/ticket/2841

[#2842] [PATCH] Handle bad formatted headers in lineRecieved() in twisted/web/http.py (opened by alexis)
    defect          web        http://twistedmatrix.com/trac/ticket/2842

[#2844] Missing parens in multiexception (opened by fumanchu)
    defect          core       http://twistedmatrix.com/trac/ticket/2844

                    ===== Low =====
[#2840] fails to build on Mac OS X with QuickTime 6 headers (opened by zooko)
    defect          release management http://twistedmatrix.com/trac/ticket/2840



Closed Bugs
______________________
                    ===== Highest =====
[#2837] TreeReporter setup/teardown error handling broke (opened by pjd, closed by therve, fixed)
    defect          trial      http://twistedmatrix.com/trac/ticket/2837

[#1192] twisted.test.test_policies calls reactor.iterate() (opened by exarkun, closed by therve, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1192



Ticket Lifetime Stats
______________________
Oldest open ticket - [#38] Should be a way to create documentation aliases (since 2003-07-12 16:08:03).
Newest open ticket - [#2844] Missing parens in multiexception (since 2007-10-05 12:22:50).

Mean open ticket age: 535 days, 4:48:39.014318.
Median: 436 days, 3:18:46.639559.
Standard deviation: 403 days, 8:09:45.372209.
Interquartile range: 504 days, 4:36:19.

Mean time between ticket creation and ticket resolution: 121 days, 20:41:54.745053.
Median: 14 days, 13:40:23.
Standard deviation is 224 days, 23:12:37.447753.
The interquartile range is 128 days, 12:08:19.

Mean time spent in review: 66 days, 19:49:44.881401.
Median: 4 days, 9:08:37.
Standard deviation: 147 days, 6:13:52.498708.
Interquartile range: 29 days, 10:44:36.

Mean number of times a ticket is reviewed: 1.94431554524.
Median: 1
Standard deviation: 1.58638608769.
Interquartile range: 1.


Contributor Stats
______________________
In the last 4 weeks,
    12 unique ticket reporters
    7 unique ticket reviewers
    2 unique ticket resolvers
In the last 24 weeks,
    73 unique ticket reporters
    16 unique ticket reviewers
    14 unique ticket resolvers
In the last 48 weeks,
    155 unique ticket reporters
    18 unique ticket reviewers
    26 unique ticket resolvers




From nachogomez at gmail.com  Sun Oct  7 14:04:56 2007
From: nachogomez at gmail.com (=?UTF-8?Q?Ra=C3=BAl_G=C3=B3mez_C.?=)
Date: Sun, 7 Oct 2007 14:04:56 -0400
Subject: [Twisted-Python] Running commands (ssh) from a GUI client
Message-ID: <684b0a740710071104k54a47a79se4070a0f58334f8b@mail.gmail.com>

Hi list, this is my first post :p

I'm new to Twisted/Conch and I was wondering how can I modify the
sshsimpleclient.py in order to run several commands, on a user request mode,
without the need to authenticate just before every command, just like a
normal interactive ssh session. This is for a GUI front end I'm writing
(PythonCard) that will execute some benchmarks on a remote server.

Thanks in advance...

Raul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20071007/2b36c565/attachment.htm 

From paulswartz at gmail.com  Sun Oct  7 14:56:12 2007
From: paulswartz at gmail.com (Paul Swartz)
Date: Sun, 7 Oct 2007 14:56:12 -0400
Subject: [Twisted-Python] Running commands (ssh) from a GUI client
In-Reply-To: <684b0a740710071104k54a47a79se4070a0f58334f8b@mail.gmail.com>
References: <684b0a740710071104k54a47a79se4070a0f58334f8b@mail.gmail.com>
Message-ID: <324cfb540710071156n5d49c9e9i7b5b106e94fb9840@mail.gmail.com>

On 10/7/07, Ra?l G?mez C. <nachogomez at gmail.com> wrote:
> Hi list, this is my first post :p
>
> I'm new to Twisted/Conch and I was wondering how can I modify the
> sshsimpleclient.py in order to run several commands, on a user request mode,
> without the need to authenticate just before every command, just like a
> normal interactive ssh session. This is for a GUI front end I'm writing
> (PythonCard) that will execute some benchmarks on a remote server.

If you keep that SSHConnection object around, you can open new
SSHChannels to execute commands without reauthenticating.

-p
-- 
Paul Swartz
paulswartz at gmail dot com
http://z3p.livejournal.com/
AIM: z3penguin

From iacovou at gmail.com  Mon Oct  8 04:15:33 2007
From: iacovou at gmail.com (kgi)
Date: Mon, 8 Oct 2007 11:15:33 +0300
Subject: [Twisted-Python] stdio.StandardIO, ServerProtocol and Services.
In-Reply-To: <1191683086.4059.5.camel@localhost.localdomain>
References: <491db6c90710051145p56f37195he89903503564df25@mail.gmail.com>
	<1191683086.4059.5.camel@localhost.localdomain>
Message-ID: <200710081115.33891.iacovou@gmail.com>

On Saturday 06 October 2007 18:04:46 Phil Mayers wrote:
> > The fact that adding reactor.run() (which shouldn't be needed in a
> > Service, right?) implies to me that the reactor isn't starting up
> > properly without it, and I can't see why.
>
> How are you starting this code? Are you just executing it? If so, don't
> do that. Use:
>
> twistd -noy thefile.py
>
> The Twisted application/service code just creates the relevant objects;
> the application object still needs to be run. "twistd" will do this for
> you.

Hi Phil; thanks for your reply.

Sadly, I am already using twistd to start this code. Virtually all my Twisted 
code is service.Service-based, and I am accustomed to just boshing the 
various services into an application hierarchy and letting twistd Do The 
Right Thing, which is why I'm confused as to why this snippet seems not to 
work.

Or rather, let me rephrase that: I'm not surprised that my code *overall* 
doesn't work quite how I would like, because I simply don't understand the 
inner workings of insults.ServerProtocol and recvline.RecvLine well enough, 
and I'm probably just being bone-headed.

However, I *am* surprised that adding an "illegal" reactor.run() to a 
service's startService() method seems to "kick" the snippet into behaving 
differently.

Cheers,

Ricky



From exarkun at divmod.com  Mon Oct  8 22:02:27 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 8 Oct 2007 22:02:27 -0400
Subject: [Twisted-Python] stdio.StandardIO, ServerProtocol and Services.
In-Reply-To: <200710081115.33891.iacovou@gmail.com>
Message-ID: <20071009020227.8162.890306013.divmod.quotient.20321@ohm>

On Mon, 8 Oct 2007 11:15:33 +0300, kgi <iacovou at gmail.com> wrote:
>On Saturday 06 October 2007 18:04:46 Phil Mayers wrote:
>> > The fact that adding reactor.run() (which shouldn't be needed in a
>> > Service, right?) implies to me that the reactor isn't starting up
>> > properly without it, and I can't see why.
>>
>> How are you starting this code? Are you just executing it? If so, don't
>> do that. Use:
>>
>> twistd -noy thefile.py
>>
>> The Twisted application/service code just creates the relevant objects;
>> the application object still needs to be run. "twistd" will do this for
>> you.
>
>Hi Phil; thanks for your reply.
>
>Sadly, I am already using twistd to start this code. Virtually all my Twisted
>code is service.Service-based, and I am accustomed to just boshing the
>various services into an application hierarchy and letting twistd Do The
>Right Thing, which is why I'm confused as to why this snippet seems not to
>work.

You want to do things with the terminal.  twistd also wants to do things
with the terminal (particularly if you use -n).  These two things come
into conflict.  The added call to reactor.run() seems to "fix" the issue
because it prevents twistd from finishing the usual startup tasks, so
your code gets to run and has the terminal to itself.

It's probably not feasible at this point to provide a terminal interface
to an application run with twistd on the controlling pty for that
application.  This is a feature which would need to be added to twistd.

Jean-Paul



From exarkun at divmod.com  Mon Oct  8 22:04:07 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 8 Oct 2007 22:04:07 -0400
Subject: [Twisted-Python] Jellying Decimals?
In-Reply-To: <47080206.3040304@peak.org>
Message-ID: <20071009020407.8162.94334609.divmod.quotient.20322@ohm>

On Sat, 06 Oct 2007 14:45:42 -0700, Jasper <jasper at peak.org> wrote:
>I'm trying to Jelly decimal.Decimals, using Twisted 2.4.  I've tried a few 
>approaches, such as deriving my own Decimal class from decimal.Decimal, 
>pb.RemoteCopy, and pb.Copyable, but no luck.
>
>Is there an easy way to do this, without patching twisted itself?  Worse 
>case I could always fall back on passing strings across the wire I guess, 
>but that's not very enticing. :-/

Jelly isn't currently extensible in this way.  There isn't really any
good reason that it *shouldn't* be.  However, someone will need to do
the work.

Jean-Paul



From exarkun at divmod.com  Mon Oct  8 22:10:03 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 8 Oct 2007 22:10:03 -0400
Subject: [Twisted-Python] Returning a Deferred as a result from another
	Deferred
In-Reply-To: 0
Message-ID: <20071009021003.8162.1824593723.divmod.quotient.20327@ohm>

On Fri, 5 Oct 2007 19:00:51 -0700, Ryan Fugger <rfugger at gmail.com> wrote:
>On 10/5/07, Jonathan Lange <jml at mumak.net> wrote:
>> On 10/6/07, Ryan Fugger <rfugger at gmail.com> wrote:
>> > Returning a Deferred as a result from another Deferred seems to be
>> > disallowed by an assertion at the start of the callback chain.  Why is
>> > this?  Right now I have worked around this limitation by wrapping my
>> > Deferred in a list and then unwrapping it in the callback.
>> >
>>
>> No it's not. I can guarantee this.
>>
>> What's the content of the AssertionError that you are getting?
>
>No content in the error.  Line 238 of twisted/internet/defer.py (first
>line in Deferred.callback) is:
>
>assert not isinstance(result, Deferred)
>
>That's pretty explicit in disallowing Deferreds...  I'm working with
>the version 2.5 release.

You've misread the code.  Jonathan is correct.  The rest of this thread
seems to go off on some tangent about threads which may or may not be
relevant to whatever problem you're trying to solve.  What led you to
be reading this code in the first place?

Glyph did make a good point, though.  You shouldn't ever have a Deferred
in a thread other than the reactor thread.  You shouldn't make them, you
shouldn't add callbacks to them, you shouldn't call them back.  It might
be legitimate to get one from the reactor thread, hold it for a while,
then send it back to the reactor thread, but I can't think of a case
where this would really be very useful.

Jean-Paul

>
>Ryan
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From nachogomez at gmail.com  Mon Oct  8 23:21:49 2007
From: nachogomez at gmail.com (=?UTF-8?Q?Ra=C3=BAl_G=C3=B3mez_C.?=)
Date: Mon, 8 Oct 2007 23:21:49 -0400
Subject: [Twisted-Python] Running commands (ssh) from a GUI client
In-Reply-To: <324cfb540710071156n5d49c9e9i7b5b106e94fb9840@mail.gmail.com>
References: <684b0a740710071104k54a47a79se4070a0f58334f8b@mail.gmail.com>
	<324cfb540710071156n5d49c9e9i7b5b106e94fb9840@mail.gmail.com>
Message-ID: <684b0a740710082021n591862e9j6f5a5ee2dd0908c2@mail.gmail.com>

Thanks Paul,

Raul

On 10/7/07, Paul Swartz <paulswartz at gmail.com> wrote:
>
>
> If you keep that SSHConnection object around, you can open new
> SSHChannels to execute commands without reauthenticating.
>
> -p
> --
> Paul Swartz
> paulswartz at gmail dot com
> http://z3p.livejournal.com/
> AIM: z3penguin
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20071008/b7886c6e/attachment.htm 

From rfugger at gmail.com  Tue Oct  9 01:59:49 2007
From: rfugger at gmail.com (Ryan Fugger)
Date: Mon, 8 Oct 2007 22:59:49 -0700
Subject: [Twisted-Python] Returning a Deferred as a result from another
	Deferred
In-Reply-To: <20071009021003.8162.1824593723.divmod.quotient.20327@ohm>
References: <20071009021003.8162.1824593723.divmod.quotient.20327@ohm>
Message-ID: <c423163f0710082259u469233b6nc6edf02dee8fbc85@mail.gmail.com>

On 10/8/07, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> On Fri, 5 Oct 2007 19:00:51 -0700, Ryan Fugger <rfugger at gmail.com> wrote:
> >On 10/5/07, Jonathan Lange <jml at mumak.net> wrote:
> >> On 10/6/07, Ryan Fugger <rfugger at gmail.com> wrote:
> >> > Returning a Deferred as a result from another Deferred seems to be
> >> > disallowed by an assertion at the start of the callback chain.  Why is
> >> > this?  Right now I have worked around this limitation by wrapping my
> >> > Deferred in a list and then unwrapping it in the callback.
> >> >
> >>
> >> No it's not. I can guarantee this.
> >>
> >> What's the content of the AssertionError that you are getting?
> >
> >No content in the error.  Line 238 of twisted/internet/defer.py (first
> >line in Deferred.callback) is:
> >
> >assert not isinstance(result, Deferred)
> >
> >That's pretty explicit in disallowing Deferreds...  I'm working with
> >the version 2.5 release.
>
> You've misread the code.  Jonathan is correct.

What is that assertion guarding against then?  Seems to me like it is
explicitly preventing you from doing this:

d1 = Deferred()
d2 = Deferred()
d1.callback(d2)

In fact, that exact code raises the AssertionError in question.  If
the intention is to allow this, then the assertion needs to be
removed.

> The rest of this thread
> seems to go off on some tangent about threads which may or may not be
> relevant to whatever problem you're trying to solve.  What led you to
> be reading this code in the first place?
>
> Glyph did make a good point, though.  You shouldn't ever have a Deferred
> in a thread other than the reactor thread.  You shouldn't make them, you
> shouldn't add callbacks to them, you shouldn't call them back.  It might
> be legitimate to get one from the reactor thread, hold it for a while,
> then send it back to the reactor thread, but I can't think of a case
> where this would really be very useful.

Yes, and thanks for that.  I was creating a Deferred and adding a
callback in a thread, so in fixing that, the assertion above no longer
comes into play.

Ryan



From jml at mumak.net  Tue Oct  9 02:37:55 2007
From: jml at mumak.net (Jonathan Lange)
Date: Tue, 9 Oct 2007 19:37:55 +1300
Subject: [Twisted-Python] Marking as review
Message-ID: <d06a5cd30710082337w31dd2554hedf24922d032dc99@mail.gmail.com>

Hello guys,

Not a big deal, but is it still a good idea to mark tickets as
"HIGHEST" priority when we put them up for review? 'kenaan' seems to
be doing a good enough job of reminding people about review tickets as
is, and I could use the extra mouse-clicks (I'm saving!)

jml



From exarkun at divmod.com  Tue Oct  9 06:12:49 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 9 Oct 2007 06:12:49 -0400
Subject: [Twisted-Python] Returning a Deferred as a result from another
	Deferred
In-Reply-To: <c423163f0710082259u469233b6nc6edf02dee8fbc85@mail.gmail.com>
Message-ID: <20071009101249.8162.2056276005.divmod.quotient.20456@ohm>

On Mon, 8 Oct 2007 22:59:49 -0700, Ryan Fugger <rfugger at gmail.com> wrote:
>On 10/8/07, Jean-Paul Calderone <exarkun at divmod.com> wrote:
>> On Fri, 5 Oct 2007 19:00:51 -0700, Ryan Fugger <rfugger at gmail.com> wrote:
>> >On 10/5/07, Jonathan Lange <jml at mumak.net> wrote:
>> >> On 10/6/07, Ryan Fugger <rfugger at gmail.com> wrote:
>> >> > Returning a Deferred as a result from another Deferred seems to be
>> >> > disallowed by an assertion at the start of the callback chain.
>>
>> You've misread the code.  Jonathan is correct.
>
>What is that assertion guarding against then?  Seems to me like it is
>explicitly preventing you from doing this:
>
>d1 = Deferred()
>d2 = Deferred()
>d1.callback(d2)
>
>In fact, that exact code raises the AssertionError in question.  If
>the intention is to allow this, then the assertion needs to be
>removed.

Here's what it sounds like "returning a Deferred as a result from another
Deferred" describes:

    def f(result):
        return Deferred()

    d = Deferred()
    d.addCallback(f)
    d.callback(None)

This is a useful and very common thing to do.  I see this isn't what you
were attempting to describe now, though.

Jean-Paul



From nachogomez at gmail.com  Tue Oct  9 07:05:10 2007
From: nachogomez at gmail.com (=?UTF-8?Q?Ra=C3=BAl_G=C3=B3mez_C.?=)
Date: Tue, 9 Oct 2007 07:05:10 -0400
Subject: [Twisted-Python] Running commands (ssh) from a GUI client
In-Reply-To: <324cfb540710071156n5d49c9e9i7b5b106e94fb9840@mail.gmail.com>
References: <684b0a740710071104k54a47a79se4070a0f58334f8b@mail.gmail.com>
	<324cfb540710071156n5d49c9e9i7b5b106e94fb9840@mail.gmail.com>
Message-ID: <684b0a740710090405q2fe04c4cr26a0494e35b9d1a4@mail.gmail.com>

I'm really confused at this point,

Even if I keep the SSHConnection object, the commands aren't executed until
the last one is queued, I think this is happening because of the deferred,
but I'm not sure. So, how can I run these commands each one at a time
(synchronously)?

Maybe this sounds really trivial to some of you, but I'm stock!

Thanks!

Raul

On 10/7/07, Paul Swartz <paulswartz at gmail.com> wrote:
>
> On 10/7/07, Ra?l G?mez C. <nachogomez at gmail.com> wrote:
> > Hi list, this is my first post :p
> >
> > I'm new to Twisted/Conch and I was wondering how can I modify the
> > sshsimpleclient.py in order to run several commands, on a user request
> mode,
> > without the need to authenticate just before every command, just like a
> > normal interactive ssh session. This is for a GUI front end I'm writing
> > (PythonCard) that will execute some benchmarks on a remote server.
>
> If you keep that SSHConnection object around, you can open new
> SSHChannels to execute commands without reauthenticating.
>
> -p
> --
> Paul Swartz
> paulswartz at gmail dot com
> http://z3p.livejournal.com/
> AIM: z3penguin
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20071009/40152e3a/attachment.htm 

From iacovou at gmail.com  Tue Oct  9 07:36:28 2007
From: iacovou at gmail.com (kgi)
Date: Tue, 9 Oct 2007 14:36:28 +0300
Subject: [Twisted-Python] stdio.StandardIO, ServerProtocol and Services.
In-Reply-To: <20071009020227.8162.890306013.divmod.quotient.20321@ohm>
References: <20071009020227.8162.890306013.divmod.quotient.20321@ohm>
Message-ID: <200710091436.28753.iacovou@gmail.com>

On Tuesday 09 October 2007 05:02:27 Jean-Paul Calderone wrote:
> You want to do things with the terminal.  twistd also wants to do things
> with the terminal (particularly if you use -n).  These two things come
> into conflict.  The added call to reactor.run() seems to "fix" the issue
> because it prevents twistd from finishing the usual startup tasks, so
> your code gets to run and has the terminal to itself.
>
> It's probably not feasible at this point to provide a terminal interface
> to an application run with twistd on the controlling pty for that
> application.  This is a feature which would need to be added to twistd.

Hi Jean-Paul, thanks for your reply (in fact, you seem to have gone on 
a "reply to all unanswered questions" rampage!).

Thanks for clearing that up. It's good to know, even though it's not what I 
wanted to hear, because now I can stop bashing my head against that 
particular brick wall and take another approach.

Regards,

Ricky



From exarkun at divmod.com  Tue Oct  9 07:43:36 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 9 Oct 2007 07:43:36 -0400
Subject: [Twisted-Python] Running commands (ssh) from a GUI client
In-Reply-To: <684b0a740710090405q2fe04c4cr26a0494e35b9d1a4@mail.gmail.com>
Message-ID: <20071009114336.8162.1009988299.divmod.quotient.20475@ohm>

On Tue, 9 Oct 2007 07:05:10 -0400, "Ra?l G?mez C." <nachogomez at gmail.com> wrote:
>I'm really confused at this point,
>
>Even if I keep the SSHConnection object, the commands aren't executed until
>the last one is queued, I think this is happening because of the deferred,
>but I'm not sure. So, how can I run these commands each one at a time
>(synchronously)?
>
>Maybe this sounds really trivial to some of you, but I'm stock!

Perhaps you can share a minimal example which demonstrates the problem
you are having?  Remember, a minimal example can be run by itself but
only contains the code necessary to reproduce the behavior about which
you have a question.  It's easier to answer questions about such examples
since they show exactly what you're trying to do.

Jean-Paul



From Ross.McKerchar at sophos.com  Tue Oct  9 12:41:47 2007
From: Ross.McKerchar at sophos.com (Ross.McKerchar at sophos.com)
Date: Tue, 9 Oct 2007 17:41:47 +0100
Subject: [Twisted-Python] How to switch users in SSH session.
In-Reply-To: <OFD206E0F8.6BF050E8-ON8025736F.0053C00D-8025736F.0053C3E7@LocalDomain>
Message-ID: <OF91D11CD6.A3475C36-ON8025736F.00585BE8-8025736F.005BB93A@sophos.com>

Paul_S_Johnson at mnb.uscourts.gov Paul_S_Johnson at mnb.uscourts.gov 
Thu Sep 27 16:00:14 EDT 200:

> After much wrangling and a small miracle I have managed to write an 
object 
> that fetches the output of three commands in the order given through an 
> SSH connection. How come I cannot switch users? Some of the information 
I 
> need can only be fetched through a root account and security is such 
that 
> I cannot log in remotely from a root account but must switch once logged 

> in from an account with less than root privileges.

I've been trying something similar. As you've probably found out you cant 
just write in the password to su - you'll get an error "Standard in must 
be a tty". Basically I think su needs a shell to work.

Consequently, before sending your password, you'll need to request a 
shell. I would've been utterly clueless about this if it wasn't for the 
post @
http://twistedmatrix.com/pipermail/twisted-python/2007-July/015793.html, 
from which I managed to extract the crucial code:

term = 'ansi'
winsz = struct.pack('4H', 80, 100, 80, 100)
winSize = struct.unpack('4H', winsz)
ptyReqData = session.packRequest_pty_req(term, winSize, '')
self.conn.sendRequest(self, 'pty-req', ptyReqData)
self.conn.sendRequest(self, 'shell', '')

Sticking this in your SSHChannel.channelOpen method will allow you to get 
a shell. Unfortunately you then have to interact with the session in an 
expect-like manner which turns the whole procedure into one big easily 
broken hack. Basically I just write "su -" and wait for my method 
dataReceived to return "password:" at which point I write in the password.

Another point to mention is that the ssh session is still not root, the 
root functionality is being provided by the shell instance. Consequently 
any new channels opened up will not be root so you cant easily use this 
method to scp file's that are only readable for root. You can of course 
cat from the shell session but then you have issues with line wrapping and 
reliably figuring out when the file ends and your shell prompt begins.

I looked into trying to do some setreuid/setuid magic in the hope that I 
could issue a command from my root shell prompt that would elevate the 
whole ssh process to root allowing all my channels root priviliges. 
However I soon got well out of my depth and decided it wasn't possible, at 
least by me :)

So, as far as I can see, it's not possible, if your server doesn't allow 
root access to open up a channel that has root priviliges. The only way to 
do it is in the aformentioned messy way via a shell & su (which I gave up 
on when my regular expression took up two lines on my screen and still 
didn't reliable match half the shell prompts it needed to).

I would love somebody to prove me wrong and let me know of a nice way 
round this.

Of course - these problems are nothing to do with twisted and all to do 
with the way ssh works.

-ross

-- 
Ross McKerchar
Systems Analyst, Sophos

Tel: 01235 559933
Web: http://www.sophos.com
Sophos - security and control

Sophos Plc, The Pentagon, Abingdon Science Park, Abingdon,
OX14 3YP, United Kingdom.

Company Reg No 2096520. VAT Reg No GB 348 3873 20.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20071009/6d11204a/attachment.htm 

From Paul_S_Johnson at mnb.uscourts.gov  Tue Oct  9 13:39:38 2007
From: Paul_S_Johnson at mnb.uscourts.gov (Paul_S_Johnson at mnb.uscourts.gov)
Date: Tue, 9 Oct 2007 12:39:38 -0500
Subject: [Twisted-Python] Running commands (ssh) from a GUI client
In-Reply-To: <684b0a740710071104k54a47a79se4070a0f58334f8b@mail.gmail.com>
Message-ID: <OF0ED303F2.E7706FBC-ON8625736F.0060300F-8625736F.0061032D@uscmail.uscourts.gov>

Raul,

This is simply some work-in-progress code, but is basically what you are 
looking for even written for PythonCard. This takes a list of three 
commands and runs them in the order given using deferreds to wait for the 
previous to complete before executing the next.

This took me about forever to get it this far. If you make and significant 
improvements, please share.

One remaining mystery is how to switch users once logged in. For example, 
I need to run some things as root.

Paul

============================================
from twisted.conch import error
from twisted.conch.ssh import transport, connection, keys, userauth, 
channel, common
from twisted.internet import defer, protocol, reactor
import sys, getpass, os, string

from PythonCard import model, twistedModel


class ClientCommandTransport(transport.SSHClientTransport):
    def __init__(self, username, password, cmds, caller):
        self.username = username
        self.password = password
        self.cmds = cmds
        self.caller = caller
 
    def verifyHostKey(self, pubKey, fingerprint):
        # in a real app, you should verify that the fingerprint matches
        # the one you expected to get from this server
        return defer.succeed(True)

    def connectionSecure(self):
        self.requestService(PasswordAuth(self.username, self.password, 
ClientConnection(self.cmds, self.caller)))

class PasswordAuth(userauth.SSHUserAuthClient):
    def __init__(self, user, password, connection):
        userauth.SSHUserAuthClient.__init__(self, user, connection)
        self.password = password
 
    def getPassword(self, prompt=None):
        return defer.succeed(self.password)

class ClientConnection(connection.SSHConnection):
    def __init__(self, cmds, caller, *args, **kwargs):
        connection.SSHConnection.__init__(self)
        self.cmds = cmds
        self.caller = caller

    #======================
    def serviceStarted(self):
        self.d = defer.Deferred()
        self.d.addCallback(self._cbFirst)
        self.d.addErrback(self._ebFirst)
        self.openChannel(CommandChannel(self.cmds[0], lastcmd=0, 
conn=self))

    def _cbFirst(self, result):
        print 'CALLBACK Result 1:', result
        self.caller.responses.append(result.rstrip())
        self.d = defer.Deferred()
        self.d.addCallback(self._cbSecond)
        self.d.addErrback(self._ebSecond)
        self.openChannel(CommandChannel(self.cmds[1], lastcmd=0, 
conn=self))

    def _ebFirst(self, f):
        self.caller.responses.append(None)
        print "Error 1"
        self.d = defer.Deferred()
        self.d.addCallback(self._cbSecond)
        self.d.addErrback(self._ebSecond)
        self.openChannel(CommandChannel(self.cmds[1], lastcmd=0, 
conn=self))
        #log.err()

    def _cbSecond(self, result):
        print 'CALLBACK Result 2:', result
        self.caller.responses.append(result.rstrip())
        self.d = defer.Deferred()
        self.d.addCallback(self._cbThird)
        self.d.addErrback(self._ebThird)
        self.openChannel(CommandChannel(self.cmds[2], lastcmd=1, 
conn=self))

    def _ebSecond(self, f):
        self.caller.responses.append(None)
        self.d = defer.Deferred()
        self.d.addCallback(self._cbThird)
        self.d.addErrback(self._ebThird)
        self.openChannel(CommandChannel(self.cmds[2], lastcmd=1, 
conn=self))
        #log.err()

    def _cbThird(self, result):
        self.caller.responses.append(result.rstrip())
        print 'CALLBACK Result 3:', result
        #reactor.stop()

    def _ebThird(self, f):
        self.caller.responses.append(None)
        log.err()
        #reactor.stop()
    #======================

class CommandChannel(channel.SSHChannel):
    name = 'session'
 
    def __init__(self, command, lastcmd, *args, **kwargs):
        channel.SSHChannel.__init__(self, *args, **kwargs)
        self.command = command
        self.lastcmd = lastcmd
        self.data = ""

    def channelOpen(self, data):
        self.conn.sendRequest(self, 'exec', common.NS(self.command), 
wantReply=True).addCallback(self._gotResponse)

    def _gotResponse(self, _):
        #print "RESPONSE"
        self.conn.sendEOF(self)

    def dataReceived(self, data):
        #print "Data Received:", data
        self.data += data

    def closed(self):
        self.conn.d.callback(self.data)
        self.loseConnection()
        ##        if self.lastcmd:
        ##            print "closing reactor."
        ##            reactor.stop()

class ClientCommandFactory(protocol.ClientFactory):
    def __init__(self, username, password, cmds, caller):
        self.username = username
        self.password = password
        self.cmds = cmds
        self.caller = caller

    def buildProtocol(self, addr):
        protocol = ClientCommandTransport(self.username, self.password, 
self.cmds, self.caller)
        return protocol

 
class SSH():
    """ Contains a SSH connection, runs commands, and stores results. """
    def __init__(self, host, username, password, cmds):
        self.host = host
        self.username = username
        self.password = password
        self.cmds = cmds
        self.responses = []
        self.run_commands()

    def run_commands(self):
        factory = ClientCommandFactory(self.username, self.password, 
self.cmds, self)
        reactor.connectTCP(self.host, 22, factory)
        #reactor.registerWxApp(app)
        #reactor.run()



#from PythonCard import model

class Dashboard(model.Background):

    def on_initialize(self, event):
        self.responses = []
 
    def on_btSend_mouseClick(self, event):
        print "Hello World!"
        self.run_commands("myhost", "myusername", "mypassword", ["id", 
"pwd", "ls -l"])
        #for i, response in enumerate(self.ssh.responses):
        #    print i, response
        #    print "=" * 25

    def on_btCheck_mouseClick(self, event):
        """ Check it out! """
        for i, response in enumerate(self.responses):
            print i, response
            print "=" * 25
        print "Done."
 
    """ Contains a SSH connection, runs commands, and stores results. """
    #def __init__(self, host, username, password, cmds):

    def run_commands(self, host, username, password, cmds):
        self.host = host
        self.username = username
        self.password = password
        self.cmds = cmds
        self.responses = []
 

        self.factory = ClientCommandFactory(self.username, self.password, 
self.cmds, self)
        reactor.connectTCP(self.host, 22, self.factory)
        #reactor.run()
        for i, response in enumerate(self.responses):
            print i, response
            print "=" * 25

#print "\nDone."

if __name__ == '__main__':
    app = twistedModel.TwistedApplication(Dashboard)
    app.MainLoop()


Here's the PythonCard resource file:

{'application':{'type':'Application',
          'name':'Minimal',
    'backgrounds': [
    {'type':'Background',
          'name':'bgMin',
          'title':'Minimal PythonCard Application',
          'size':(382, 271),

        'menubar': {'type':'MenuBar',
         'menus': [
             {'type':'Menu',
             'name':'menuFile',
             'label':'&File',
             'items': [
                  {'type':'MenuItem',
                   'name':'menuFileExit',
                   'label':'E&xit\tAlt+X',
                   'command':'exit',
                  },
              ]
             },
         ]
     },
         'components': [

{'type':'Button', 
    'name':'btCheck', 
    'position':(210, 186), 
    'label':u'Check', 
    },

{'type':'Button', 
    'name':'btSend', 
    'position':(102, 185), 
    'label':u'Send', 
    },

{'type':'CodeEditor', 
    'name':'ceReponse', 
    'position':(6, 33), 
    'size':(360, 141), 
    'backgroundColor':(255, 255, 255, 255), 
    },

{'type':'TextField', 
    'name':'field1', 
    'position':(5, 5), 
    'size':(150, -1), 
    'text':u'Hello PythonCard', 
    },

] # end components
} # end background
] # end backgrounds
} }


twisted-python-bounces at twistedmatrix.com wrote on 10/07/2007 01:04:56 PM:

> Hi list, this is my first post :p
> 
> I'm new to Twisted/Conch and I was wondering how can I modify the 
> sshsimpleclient.py in order to run several commands, on a user 
> request mode, without the need to authenticate just before every 
> command, just like a normal interactive ssh session. This is for a 
> GUI front end I'm writing (PythonCard) that will execute some 
> benchmarks on a remote server. 
> 
> Thanks in advance...
> 
> Raul_______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20071009/8fea0ee3/attachment.htm 

From nachogomez at gmail.com  Tue Oct  9 15:21:54 2007
From: nachogomez at gmail.com (=?UTF-8?Q?Ra=C3=BAl_G=C3=B3mez_C.?=)
Date: Tue, 9 Oct 2007 15:21:54 -0400
Subject: [Twisted-Python] Running commands (ssh) from a GUI client
In-Reply-To: <OF0ED303F2.E7706FBC-ON8625736F.0060300F-8625736F.0061032D@uscmail.uscourts.gov>
References: <684b0a740710071104k54a47a79se4070a0f58334f8b@mail.gmail.com>
	<OF0ED303F2.E7706FBC-ON8625736F.0060300F-8625736F.0061032D@uscmail.uscourts.gov>
Message-ID: <684b0a740710091221v36e8a97fq54240c0118b99755@mail.gmail.com>

Thank you very much Paul, I'll give it a try and I'll post any change, I'm
really grateful... but giving it an overview, I think you are not executing
the commands the way I want, when you pass a list of commands on the
Dashboard (self.run_commands("myhost", "myusername", "mypassword", ["id",
"pwd", "ls -l"])) you are running it asynchronously (the way I'm getting it,
I mean, the three commands are passed to the CommandChannel class, and then
they gets run, and later they return it's data), I need to run commands from
the GUI, without previously knowing what commands will the user want to run
(the normal GUI interaction), and avoiding to all cost to authenticate for
each command (that's because some networks that my tool will connect takes
too long to authenticate ssh connections, but once they are authenticated,
they works just fine).

But thanks again Paul, if you want a suggestion on your code, I think (but
I'm not sure) you can get rid of a lot of code if you implement something
like I have (see below, in the answer to Jean-Paul), if you iterate on the
list of command, you can change the raw_input() with something like this:

for cmd in self.cmds:
    self.requestService(PasswordAuth(self.username, self.password,
ClientConnection(cmd)))

Just a suggestion, hope that helps...


On 10/9/07, Paul_S_Johnson at mnb.uscourts.gov <Paul_S_Johnson at mnb.uscourts.gov>
wrote:
>
>
> Raul,
>
> This is simply some work-in-progress code, but is basically what you are
> looking for even written for PythonCard. This takes a list of three commands
> and runs them in the order given using deferreds to wait for the previous to
> complete before executing the next.
>
> This took me about forever to get it this far. If you make and significant
> improvements, please share.
>
> One remaining mystery is how to switch users once logged in. For example,
> I need to run some things as root.
>
> Paul
>


Jean-Paul, is not easy to post only a small working (by itself) part of what
I'm trying to do, is the sshclient.py (example
10-4)<http://www.ora.de/catalog/twistedadn/chapter/ch10.pdf>of the
Twisted
Network Programming Essentials Book by Abe Fettig (based on the
sshsimpleclient.py by Paul Swartz), but modified in order ask for the
command when the ClientConnection class is called in the
ClientCommandTransport class, like this:


class ClientCommandTransport(transport.SSHClientTransport):

    def __init__(self, username, password):
        self.username = username
        self.password = password

    def verifyHostKey(self, pubKey, fingerprint):
        # in a real app, you should verify that the fingerprint matches
        # the one you expected to get from this server
        return defer.succeed(True)

    def connectionSecure(self):
        cmd= ''
        while True:
            cmd = raw_input('Command: ')
            if cmd != 'quit':
                self.requestService(PasswordAuth(self.username,
self.password, ClientConnection(cmd)))
            else:
                print '\nGood Bye!\n'
                break

Note: the Bold part is what I've added to the original code


PD: I think Paul is a popular name in this list :p
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20071009/b7ec8cce/attachment.htm 

From sipickles at hotmail.com  Tue Oct  9 16:21:44 2007
From: sipickles at hotmail.com (Simon Pickles)
Date: Tue, 09 Oct 2007 21:21:44 +0100
Subject: [Twisted-Python] UDP with multiple connections
Message-ID: <470BE2D8.6040601@hotmail.com>

Ok, UDP is new to me, so please be gentle....

I've got a server authentication app which needs to accept many client 
connections, but also dispatch messages to a master server. Am I best 
using unconnected UDP? do i then have to deal with each received 
datagram by checking which host is has come from and acting accordingly?

thanks

Simon



From jasper at peak.org  Tue Oct  9 18:18:26 2007
From: jasper at peak.org (Jasper)
Date: Tue, 09 Oct 2007 15:18:26 -0700
Subject: [Twisted-Python] Jellying Decimals?
In-Reply-To: <20071009020407.8162.94334609.divmod.quotient.20322@ohm>
References: <20071009020407.8162.94334609.divmod.quotient.20322@ohm>
Message-ID: <470BFE32.6060006@peak.org>

Jean-Paul Calderone wrote:
> On Sat, 06 Oct 2007 14:45:42 -0700, Jasper <jasper at peak.org> wrote:
>> I'm trying to Jelly decimal.Decimals, using Twisted 2.4.  I've tried 
>> a few approaches, such as deriving my own Decimal class from 
>> decimal.Decimal, pb.RemoteCopy, and pb.Copyable, but no luck.
>>
>> Is there an easy way to do this, without patching twisted itself?  
>> Worse case I could always fall back on passing strings across the 
>> wire I guess, but that's not very enticing. :-/
>
> Jelly isn't currently extensible in this way.  There isn't really any
> good reason that it *shouldn't* be.  However, someone will need to do
> the work.
>
> Jean-Paul
>

That was my impression from looking through the code as well; jelly 
requires old style python classes, and that's that.

I've hacked in a special case work around for Decimals, but it's just a 
hack and not really suitable for general inclusion.  I'm reluctant to 
put further work into it, as I recall that there is a new version PB in 
the works, which I suspect will completely redo how things are "jellied".

-Jasper



From exarkun at divmod.com  Tue Oct  9 19:23:15 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 9 Oct 2007 19:23:15 -0400
Subject: [Twisted-Python] Jellying Decimals?
In-Reply-To: <470BFE32.6060006@peak.org>
Message-ID: <20071009232315.8162.612549130.divmod.quotient.20717@ohm>

On Tue, 09 Oct 2007 15:18:26 -0700, Jasper <jasper at peak.org> wrote:
>Jean-Paul Calderone wrote:
>
>That was my impression from looking through the code as well; jelly requires 
>old style python classes, and that's that.
>
>I've hacked in a special case work around for Decimals, but it's just a hack 
>and not really suitable for general inclusion.  I'm reluctant to put further 
>work into it, as I recall that there is a new version PB in the works, which 
>I suspect will completely redo how things are "jellied".

Just to clarify, there isn't a new version of PB in the works.  There's
Foolscap, which was called "newpb" for a while, but is developed outside
of Twisted now.  There's also AMP, which doesn't really resemble PB at
all, but is developed as part of Twisted.  PB itself is still maintained.

Jean-Paul



From p.mayers at imperial.ac.uk  Tue Oct  9 19:37:02 2007
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 10 Oct 2007 00:37:02 +0100
Subject: [Twisted-Python] UDP with multiple connections
In-Reply-To: <470BE2D8.6040601@hotmail.com>
References: <470BE2D8.6040601@hotmail.com>
Message-ID: <1191973022.2554.18.camel@localhost.localdomain>

On Tue, 2007-10-09 at 21:21 +0100, Simon Pickles wrote:
> Ok, UDP is new to me, so please be gentle....
> 
> I've got a server authentication app which needs to accept many client 
> connections, but also dispatch messages to a master server. Am I best 
> using unconnected UDP? 

You are *best* using TCP. Very few applications are actually suited to
UDP. UDP:

 * has no connection state
 * has no flow control
 * is unfriendly to networks (really the same as the previous point)
 * has no keepalives
 * has problems with MTU and fragmentation for messages > ~1400 bytes
 * is subject to trivial spoofing
 * has no message sequencing
 * is hard to run crypto over (SSL over TCP == trivial)

...and so on.

> do i then have to deal with each received 
> datagram by checking which host is has come from and acting accordingly?

Twisted's UDP support is all "unconnected". All DatagramProtocol
instances get a call to:

 def datagramReceived(self, data, addr)

...where "addr=(ip,port)" for IPv4

Similarly, you would do:

  self.transport.write(bytes, addr)

So, unconnected UDP is your *only* option, because that's how Twisted
does it.

However, so-called "connected" UDP is really just a way of saving the
destination address on the socket. There's no *actual* connection
involved.

> 
> thanks
> 
> Simon
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From jasper at peak.org  Tue Oct  9 19:55:33 2007
From: jasper at peak.org (Jasper)
Date: Tue, 09 Oct 2007 16:55:33 -0700
Subject: [Twisted-Python] Jellying Decimals?
In-Reply-To: <20071009232315.8162.612549130.divmod.quotient.20717@ohm>
References: <20071009232315.8162.612549130.divmod.quotient.20717@ohm>
Message-ID: <470C14F5.4070100@peak.org>

Jean-Paul Calderone wrote:
> On Tue, 09 Oct 2007 15:18:26 -0700, Jasper <jasper at peak.org> wrote:
>> Jean-Paul Calderone wrote:
>>
>> That was my impression from looking through the code as well; jelly 
>> requires old style python classes, and that's that.
>>
>> I've hacked in a special case work around for Decimals, but it's just 
>> a hack and not really suitable for general inclusion.  I'm reluctant 
>> to put further work into it, as I recall that there is a new version 
>> PB in the works, which I suspect will completely redo how things are 
>> "jellied".
>
> Just to clarify, there isn't a new version of PB in the works.  There's
> Foolscap, which was called "newpb" for a while, but is developed outside
> of Twisted now.  There's also AMP, which doesn't really resemble PB at
> all, but is developed as part of Twisted.  PB itself is still maintained.
>
> Jean-Paul
I understand that PB is still maintained, but it's also a dead end 
without further development, and rather lacking in a few areas.  From 
the bits I've seen Foolscap looks like it'll be enough of an improvement 
that I'll happily switch when it's done.  I'd actually switch now, but I 
need something stable for the time being.

I hadn't been aware of AMP; after a quick look at the docs it seems a 
bit low level for my purposes though, as I need to do more than just 
send messages.

-Jasper



From exarkun at divmod.com  Tue Oct  9 20:00:43 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 9 Oct 2007 20:00:43 -0400
Subject: [Twisted-Python] UDP with multiple connections
In-Reply-To: <1191973022.2554.18.camel@localhost.localdomain>
Message-ID: <20071010000043.8162.376108862.divmod.quotient.20739@ohm>

On Wed, 10 Oct 2007 00:37:02 +0100, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
>On Tue, 2007-10-09 at 21:21 +0100, Simon Pickles wrote:
>> Ok, UDP is new to me, so please be gentle....
>>
>> I've got a server authentication app which needs to accept many client
>> connections, but also dispatch messages to a master server. Am I best
>> using unconnected UDP?
>
>You are *best* using TCP. Very few applications are actually suited to
>UDP. UDP:
>
> * has no connection state
> * has no flow control
> * is unfriendly to networks (really the same as the previous point)
> * has no keepalives
> * has problems with MTU and fragmentation for messages > ~1400 bytes
> * is subject to trivial spoofing
> * has no message sequencing
> * is hard to run crypto over (SSL over TCP == trivial)
>
>...and so on.
>
>> do i then have to deal with each received
>> datagram by checking which host is has come from and acting accordingly?
>
>Twisted's UDP support is all "unconnected". All DatagramProtocol
>instances get a call to:
>
> def datagramReceived(self, data, addr)
>
>...where "addr=(ip,port)" for IPv4
>
>Similarly, you would do:
>
>  self.transport.write(bytes, addr)
>
>So, unconnected UDP is your *only* option, because that's how Twisted
>does it.
>
>However, so-called "connected" UDP is really just a way of saving the
>destination address on the socket. There's no *actual* connection
>involved.
>

Everything else here is right, but one correction: Twisted does support
"connected" UDP, via IUDPTransport.connect().  This is indeed little more
than a convenience API, though.  You get to skip passing the address
argument to transport.write() if you use it, and you _may_ receive
connectionFailed notification (which, for example, tells you if you are
sending packets to a port where no application is listening for them),
if all the involved routers decide to cooperate (they frequently will not).

Jean-Paul



From glyph at divmod.com  Tue Oct  9 20:21:49 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Wed, 10 Oct 2007 00:21:49 -0000
Subject: [Twisted-Python] Jellying Decimals?
In-Reply-To: <470C14F5.4070100@peak.org>
References: <20071009232315.8162.612549130.divmod.quotient.20717@ohm>
	<470C14F5.4070100@peak.org>
Message-ID: <20071010002149.5579.1749384940.divmod.xquotient.5398@joule.divmod.com>

On 9 Oct, 11:55 pm, jasper at peak.org wrote:
>I understand that PB is still maintained, but it's also a dead end 
>without further development, and rather lacking in a few areas.  From 
>the bits I've seen Foolscap looks like it'll be enough of an 
>improvement that I'll happily switch when it's done.  I'd actually 
>switch now, but I need something stable for the time being.

There is nobody currently working on a major overhaul of PB, but that 
doesn't meant that further development is prohibited.  If you have 
specific features you would like added or bugs fixed in PB, you can feel 
free to contribute patches and we will integrate them (subject to the 
normal review process, of course).

That said, if Foolscap better suits your purposes, by all means use it!
>I hadn't been aware of AMP; after a quick look at the docs it seems a 
>bit low level for my purposes though, as I need to do more than just 
>send messages.

Since the FAQ of "isn't PB dead" has been raised yet again, I figure 
it's high time to give my own opinions of what's going on here.

AMP is intentionally low level.  AMP, PB, and Foolscap are, to me, at 
least, on a continuum where, on AMP's side, there is an extremely simple 
protocol implementing only the bare minimum required of an asynchronous 
messaging protocol.  On the other end, Foolscap is extremely complex but 
featureful.

This makes AMP ideal for applications where there is a narrow interface 
where two parties have to exchange a few simple and well-defined 
messages, with each party potentially being implemented many times by 
different languages and environments.  There are already ad-hoc AMP 
implementations in a half a dozen languages already (I myself have 
prototyped elisp and Java implementations) and they are so easy to do 
that I'm sure more are on the way.  You can do one yourself if you want.

PB falls somewhere in the middle; using PB involves understanding fewer 
concepts than using Foolscap (in particular, it has no concept of URLs 
or object-spaces like tubs) but provides commensurately fewer features. 
It has conveniences like deep object serialization.  It's well defined 
enough that you *can* write implementations for other languages if you 
really want to (there's one that mostly works for Java) but it's not the 
trivial affair that knocking off an AMP implementation is.  PB was 
originally designed to support shared simulation spaces (online games) 
where lots of clients talk to a server about a potentially complex graph 
of objects, and that's where it remains ideal.

Foolscap is geared towards very complex distributed applications where 
you need to serialize deep objects and coordinate arbitrary numbers of 
hosts which are connected in a mesh configuration.  There's only the one 
implementation, but if you have an application that is well-suited to 
foolscap, the application itself is probably hard enough to implement 
that you won't be worrying about integrating alternative implementations 
for quite a while.

Personally I've been more focused on AMP in the last year because I 
think there are currently a lot of applications in that first category 
which are currently being poorly served by bloated, complex, text-based 
protocols like XMLRPC, SOAP, and XMPP.  However, this mostly represents 
a shift in my personal area of interest, and is not a comment on the 
validity of either of the other two application domains.

That said, there may one day be some convergence or refactoring where a 
future version of PB becomes a layer on top of AMP, but given the 
obvious lack of any *application* drivers for such functionality, that 
seems like it will be very far off indeed.



From me at mocisoft.com  Wed Oct 10 02:11:06 2007
From: me at mocisoft.com (markus espenhain)
Date: Wed, 10 Oct 2007 08:11:06 +0200
Subject: [Twisted-Python] trouble with missing exceptions
Message-ID: <470C6CFA.5010108@mocisoft.com>

hi

i've written a tcp client - using a derived NetstringReceiver, a 
ReconnectingClientFactory and just reactor.connectTCP + reactor.run.

the problem is that after the connection is made - every exception that 
occurred seems to be lost and the execution at this point discontinues - 
also with a try/catch block around it

class MyProtocol(basic.NetstringReceiver):
	...
	def onData(self, data):
		print data
		try:
			print 'before' # printed
			raise Exception('err')
		except Exception, e:
			print e # nothing
		print 'after' # nothing

after print 'before' nothing more in onData happens - anyway the app 
runs and on new data the onData is entered again

i poke around 2h or so and i can't remember to had this problem before 
... so anybody can give me a hint or maybe something that i miss?

thanks
markus

using twisted 2.4.0



From paul at subsignal.org  Tue Oct  9 16:18:27 2007
From: paul at subsignal.org (paul)
Date: Tue, 09 Oct 2007 22:18:27 +0200
Subject: [Twisted-Python] Re: Running commands (ssh) from a GUI client
In-Reply-To: <OF0ED303F2.E7706FBC-ON8625736F.0060300F-8625736F.0061032D@uscmail.uscourts.gov>
References: <684b0a740710071104k54a47a79se4070a0f58334f8b@mail.gmail.com>
	<OF0ED303F2.E7706FBC-ON8625736F.0060300F-8625736F.0061032D@uscmail.uscourts.gov>
Message-ID: <fegnmb$t2f$1@sea.gmane.org>

Paul_S_Johnson at mnb.uscourts.gov schrieb:
> Raul,
> 
> This is simply some work-in-progress code, but is basically what you are 
> looking for even written for PythonCard. This takes a list of three 
> commands and runs them in the order given using deferreds to wait for the 
> previous to complete before executing the next.
> 
> This took me about forever to get it this far. If you make and significant 
> improvements, please share.
I'll take your word and add my 2 cents here:

Running commands is not a problem, the client example provided at 
twistedmatrix.com does just that. However, it always uses a new 
connection with all the associated overhead.
I've been told you need a Channel for each command but you can reuse the 
connection. To make this work you have to decouple the Channel from the 
connection setup:

class ClientConnection(connection.SSHConnection):

     def __init__(self):
         self.started = False
         self.runCalled = 0
         connection.SSHConnection.__init__(self)

     def serviceStarted(self):
         # just set a flag
         self.started = True
         log.msg('ssh connection started')

     def runCommand(self, d, command, *args):
         """
         the connection needs some time to get up, hence we use callLater
         so that the caller doesn't have to bother.
         FIXME: remove hardcoded delay, add backlog and break eventually
         if self.started never gets true for some reason...
         """
         if not self.started:
             reactor.callLater(1, self.runCommand, d, command, *args)
         else:
             self.openChannel(CommandChannel(d, self, command, *args))

the self.openChannel is moved out of serviceStarted() and we have an 
independent method runCommmand() we can call as often as we want as long 
as the connection is alive (I wonder if the self.started hack can be 
avoided...)

The CommandChannel fires(?) the passed in Deferred when the command has 
finished:

class CommandChannel(channel.SSHChannel):
     name = 'session'

    def __init__(self, d, connection, command, *args):
         self.command = command
         self.args = args
         self.d = d
         channel.SSHChannel.__init__(self, conn=connection)

     def channelOpen(self, data):
         args = list(self.args)
         args.insert(0, self.command)
         d = self.conn.sendRequest(self, 'exec', common.NS(" "
                                  .join(args)), wantReply = 1)
         d.addCallback(self._endCommand)
         self.catData = ''

     def _endCommand(self, ignored):
         self.conn.sendEOF(self)

     def eofReceived(self):
         self.d.callback((self.catData,))

     def dataReceived(self, data):
         #log.msg('DEBUG, dataReceived: %s' % data)
         self.catData += data

The last piece of the puzzle is the factory which holds the connection 
specific data and !! a reference to the connection object to call the 
runCommand method:

class CommandClientFactory(protocol.ClientFactory):

     def __init__(self, host, user, fingerprint, password=None,
                     ConnClass=ClientConnection,
                     AuthClass=ClientUserAuth,
                     TransportClass=ClientTransport):
         self.host = host
         self.user = user
         self.password = password
         self.fingerprint = fingerprint

         self.TransportClass = TransportClass
         self.connection = ConnClass() #<- we have the connection here
         self.auth_client = AuthClass(self, self.connection)

     def runCommand(self, deferred, cmd, *args):
         self.connection.runCommand(deferred, cmd, *args)

     def buildProtocol(self, addr):
         p = self.TransportClass()
         p.factory = self
         return p

     def clientConnectionFailed(self, connection, reason):
         print "connect to %s as %s failed, reason: %s" % (
             self.host, self.user, reason)

     def clientConnectionLost(self, connection, reason):
         print 'connection to "%s" as "%s" lost, reason: %s' % (
             self.host, self.user, reason)

Now you setup a CommandClientFactory, create a new Deferred, a callback 
function and put it all together:

def cmdCallback(result):
     print result
	
cf = CommandClientFactory(host, user, fingerprint, password=None)
reactor.connectTCP(host, self.port, cf)

d = defer.Deferred()
d.addCallback(cmdCallback)
cf.connection.runCommand(d, command, *args)

WRT the su - problem, I'll probably use sudo (to fetch the sudoers file ;))


hth
  Paul

BTW: This is not working code, it's just to show the basic schema...




From nachogomez at gmail.com  Wed Oct 10 12:02:11 2007
From: nachogomez at gmail.com (=?UTF-8?Q?Ra=C3=BAl_G=C3=B3mez_C.?=)
Date: Wed, 10 Oct 2007 12:02:11 -0400
Subject: [Twisted-Python] Re: Running commands (ssh) from a GUI client
In-Reply-To: <fegnmb$t2f$1@sea.gmane.org>
References: <684b0a740710071104k54a47a79se4070a0f58334f8b@mail.gmail.com>
	<OF0ED303F2.E7706FBC-ON8625736F.0060300F-8625736F.0061032D@uscmail.uscourts.gov>
	<fegnmb$t2f$1@sea.gmane.org>
Message-ID: <684b0a740710100902g578f3affu378f1aa16659cabe@mail.gmail.com>

Thank you very much Paul, I'll work on this and post any change, and if
someone in the list want, I'll post the final (working) code...

Thanks again...

Raul

On 10/9/07, paul <paul at subsignal.org> wrote:
>
>
> I'll take your word and add my 2 cents here:
>
> Running commands is not a problem, the client example provided at
> twistedmatrix.com does just that. However, it always uses a new
> connection with all the associated overhead.
> I've been told you need a Channel for each command but you can reuse the
> connection. To make this work you have to decouple the Channel from the
> connection setup:
>
>
> hth
>   Paul
>
> BTW: This is not working code, it's just to show the basic schema...
>

PS: Yep, there's a lot of Paul in this list! :p
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20071010/9acb992c/attachment.htm 

From andrew-twisted at puzzling.org  Wed Oct 10 19:37:36 2007
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu, 11 Oct 2007 09:37:36 +1000
Subject: [Twisted-Python] trouble with missing exceptions
In-Reply-To: <470C6CFA.5010108@mocisoft.com>
References: <470C6CFA.5010108@mocisoft.com>
Message-ID: <20071010233736.GA16455@steerpike.home.puzzling.org>

markus espenhain wrote:
> hi
> 
> i've written a tcp client - using a derived NetstringReceiver, a 
> ReconnectingClientFactory and just reactor.connectTCP + reactor.run.
> 
> the problem is that after the connection is made - every exception that 
> occurred seems to be lost and the execution at this point discontinues - 
> also with a try/catch block around it
> 
> class MyProtocol(basic.NetstringReceiver):
> 	...
> 	def onData(self, data):
> 		print data
> 		try:
> 			print 'before' # printed
> 			raise Exception('err')
> 		except Exception, e:
> 			print e # nothing
> 		print 'after' # nothing
> 
> after print 'before' nothing more in onData happens - anyway the app 
> runs and on new data the onData is entered again
> 
> i poke around 2h or so and i can't remember to had this problem before 
> ... so anybody can give me a hint or maybe something that i miss?

I'm guessing this isn't literally code you've tried to run, because that will
always print e and 'after'.  There's nothing in Twisted that changes the way
Python's exception handling works.

Taking a guess that by ?raise Exception('err')? you mean you call a function
that somehow raises an exception your ?except Exception:? block fails to catch,
perhaps try a bare ?except:?.  It might be a string exception.

Otherwise, I'd try making as minimal an example of the problem as you can that
can reproduce the problem, and if you're still stuck, posting that to this list
(or if it doesn't involve Twisted, comp.lang.python).  Or use ?import pdb;
pdb.set_trace()? to insert a breakpoint and step through the code in the
debugger.

-Andrew.




From Marcin.Kasperski at softax.com.pl  Thu Oct 11 09:30:53 2007
From: Marcin.Kasperski at softax.com.pl (Marcin Kasperski)
Date: Thu, 11 Oct 2007 15:30:53 +0200
Subject: [Twisted-Python] Re: Running commands (ssh) from a GUI client
References: <684b0a740710071104k54a47a79se4070a0f58334f8b@mail.gmail.com>
	<OF0ED303F2.E7706FBC-ON8625736F.0060300F-8625736F.0061032D@uscmail.uscourts.gov>
	<fegnmb$t2f$1@sea.gmane.org>
Message-ID: <87tzoxpylu.fsf@platon.mekk.waw.pl>


I will allow myself to add to the question:

Does there exist any example of SSH connection which instead of just
running a command, allows interaction with remote application (feeding
its stdin, reading its stdout)?

My personal use case is 'remote UCI engine' - application which logins
via ssh to remote machine, spawns fruit (or wine rybka.exe, or
whatever) there, and then forwards anything obtained on (local) stdin
to this app stdin and forwards anything obtained from remote app to
(local) stdout. Plus, in case of disconnect, relogin-s, restarts the
app and resends initialization commands.  Just a way to bind Fritz run
on laptop to the engine run on stronger server.

I even managed to write more-or-less working code, but it turned out
to be so horrible mess, that I gave up an idea of maintaining it in a
long term...




From sipickles at hotmail.com  Thu Oct 11 11:20:51 2007
From: sipickles at hotmail.com (Simon Pickles)
Date: Thu, 11 Oct 2007 16:20:51 +0100
Subject: [Twisted-Python] UDP with multiple connections
In-Reply-To: <1191973022.2554.18.camel@localhost.localdomain>
References: <470BE2D8.6040601@hotmail.com>
	<1191973022.2554.18.camel@localhost.localdomain>
Message-ID: <470E3F53.9050901@hotmail.com>

UDP is often used in online gaming, where other methods are employed to 
compensate for its weaknesses, in return for its speed.

 
Phil Mayers wrote:
> On Tue, 2007-10-09 at 21:21 +0100, Simon Pickles wrote:
>   
>> Ok, UDP is new to me, so please be gentle....
>>
>> I've got a server authentication app which needs to accept many client 
>> connections, but also dispatch messages to a master server. Am I best 
>> using unconnected UDP? 
>>     
>
> You are *best* using TCP. Very few applications are actually suited to
> UDP. UDP:
>
>  * has no connection state
>  * has no flow control
>  * is unfriendly to networks (really the same as the previous point)
>  * has no keepalives
>  * has problems with MTU and fragmentation for messages > ~1400 bytes
>  * is subject to trivial spoofing
>  * has no message sequencing
>  * is hard to run crypto over (SSL over TCP == trivial)
>
> ...and so on.
>
>   
>> do i then have to deal with each received 
>> datagram by checking which host is has come from and acting accordingly?
>>     
>
> Twisted's UDP support is all "unconnected". All DatagramProtocol
> instances get a call to:
>
>  def datagramReceived(self, data, addr)
>
> ...where "addr=(ip,port)" for IPv4
>
> Similarly, you would do:
>
>   self.transport.write(bytes, addr)
>
> So, unconnected UDP is your *only* option, because that's how Twisted
> does it.
>
> However, so-called "connected" UDP is really just a way of saving the
> destination address on the socket. There's no *actual* connection
> involved.
>
>   
>> thanks
>>
>> Simon
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>     
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>   



From p.mayers at imperial.ac.uk  Thu Oct 11 11:52:09 2007
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Thu, 11 Oct 2007 16:52:09 +0100
Subject: [Twisted-Python] UDP with multiple connections
In-Reply-To: <470E3F53.9050901@hotmail.com>
References: <470BE2D8.6040601@hotmail.com>
	<1191973022.2554.18.camel@localhost.localdomain>
	<470E3F53.9050901@hotmail.com>
Message-ID: <1192117929.13505.10.camel@doorstop.net.ic.ac.uk>

On Thu, 2007-10-11 at 16:20 +0100, Simon Pickles wrote:
> UDP is often used in online gaming, where other methods are employed to 
> compensate for its weaknesses, in return for its speed.

I am aware of this. What's your point?





From nachogomez at gmail.com  Thu Oct 11 11:53:54 2007
From: nachogomez at gmail.com (=?UTF-8?Q?Ra=C3=BAl_G=C3=B3mez_C.?=)
Date: Thu, 11 Oct 2007 11:53:54 -0400
Subject: [Twisted-Python] Re: Running commands (ssh) from a GUI client
In-Reply-To: <87tzoxpylu.fsf@platon.mekk.waw.pl>
References: <684b0a740710071104k54a47a79se4070a0f58334f8b@mail.gmail.com>
	<OF0ED303F2.E7706FBC-ON8625736F.0060300F-8625736F.0061032D@uscmail.uscourts.gov>
	<fegnmb$t2f$1@sea.gmane.org> <87tzoxpylu.fsf@platon.mekk.waw.pl>
Message-ID: <684b0a740710110853q3e90a87atf95d0f34ec383c16@mail.gmail.com>

Well Marcin, I think that looks pretty much close to what I want to achieve,
so I haven't found any working example of this (yet :s). Can you share your
code with us?

On 10/11/07, Marcin Kasperski <Marcin.Kasperski at softax.com.pl> wrote:
>
>
> I will allow myself to add to the question:
>
> Does there exist any example of SSH connection which instead of just
> running a command, allows interaction with remote application (feeding
> its stdin, reading its stdout)?
>
> My personal use case is 'remote UCI engine' - application which logins
> via ssh to remote machine, spawns fruit (or wine rybka.exe, or
> whatever) there, and then forwards anything obtained on (local) stdin
> to this app stdin and forwards anything obtained from remote app to
> (local) stdout. Plus, in case of disconnect, relogin-s, restarts the
> app and resends initialization commands.  Just a way to bind Fritz run
> on laptop to the engine run on stronger server.
>
> I even managed to write more-or-less working code, but it turned out
> to be so horrible mess, that I gave up an idea of maintaining it in a
> long term...
>


Paul, I'm working right now with the code you've send, and there is an error
that I can't understand, when the execution reach the line "
self.connection.runCommand(deferred, cmd, *args)" in the
CommandClientFactory class, it throws an error saying:

"TypeError: unbound method runCommand() must be called with ClientConnection
instance as first argument (got Deferred instance instead)"


...but the runCommand method definition of ClientConnection class is like
this: "def runCommand(self, d, command, *args):", so it looks OK to me (by
this I mean, that it looks like it want to receive a deferred instance at
first arg), any clue on this???
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20071011/75c10e59/attachment.htm 

From nachogomez at gmail.com  Thu Oct 11 12:20:20 2007
From: nachogomez at gmail.com (=?UTF-8?Q?Ra=C3=BAl_G=C3=B3mez_C.?=)
Date: Thu, 11 Oct 2007 12:20:20 -0400
Subject: [Twisted-Python] Re: Running commands (ssh) from a GUI client
In-Reply-To: <684b0a740710110853q3e90a87atf95d0f34ec383c16@mail.gmail.com>
References: <684b0a740710071104k54a47a79se4070a0f58334f8b@mail.gmail.com>
	<OF0ED303F2.E7706FBC-ON8625736F.0060300F-8625736F.0061032D@uscmail.uscourts.gov>
	<fegnmb$t2f$1@sea.gmane.org> <87tzoxpylu.fsf@platon.mekk.waw.pl>
	<684b0a740710110853q3e90a87atf95d0f34ec383c16@mail.gmail.com>
Message-ID: <684b0a740710110920y6502c3b0rc99d3e19cda1568d@mail.gmail.com>

BTW, the complete code can be downloaded at
http://alfa.facyt.uc.edu.ve/~gomezr/sshclient_v2.py
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20071011/ef94e06c/attachment.htm 

From glyph at divmod.com  Thu Oct 11 12:30:01 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 11 Oct 2007 16:30:01 -0000
Subject: [Twisted-Python] UDP with multiple connections
In-Reply-To: <470E3F53.9050901@hotmail.com>
References: <470BE2D8.6040601@hotmail.com>
	<1191973022.2554.18.camel@localhost.localdomain>
	<470E3F53.9050901@hotmail.com>
Message-ID: <20071011163001.5579.671880163.divmod.xquotient.5452@joule.divmod.com>

On 03:20 pm, sipickles at hotmail.com wrote:
>UDP is often used in online gaming, where other methods are employed to 
>compensate for its weaknesses, in return for its speed.

"Speed" is an oversimplified way of explaining this usage.

Some games use a TCP control channel for most logical messages and UDP 
for updates to a small set of values where only the _most current_ value 
ever matters.  This is most often the position, orientation, and 
velocity of an object in the game world.  This can improve the apparent 
performance of twitchy games over lossy links.

Some games, having heard secondhand about this previous strategy, use 
UDP for everything because their implementors mistakenly believe that 
it's faster than TCP.  Often, these games eventually switch to TCP later 
in the development cycle when networking bugs and profiling indicate 
that the features of TCP are actually required or the performance 
"gains" are actually losses.  For example, routers on the public 
internet can and often do cheat in a variety of ways to use the 
additional information that TCP provides to make it go faster.  UDP 
can't take advantage of that and its overall throughput is often slower 
(especially on congested networks).



From Marcin.Kasperski at softax.com.pl  Thu Oct 11 12:31:54 2007
From: Marcin.Kasperski at softax.com.pl (Marcin Kasperski)
Date: Thu, 11 Oct 2007 18:31:54 +0200
Subject: [Twisted-Python] Re: Running commands (ssh) from a GUI client
References: <684b0a740710071104k54a47a79se4070a0f58334f8b@mail.gmail.com>
	<OF0ED303F2.E7706FBC-ON8625736F.0060300F-8625736F.0061032D@uscmail.uscourts.gov>
	<fegnmb$t2f$1@sea.gmane.org> <87tzoxpylu.fsf@platon.mekk.waw.pl>
	<684b0a740710110853q3e90a87atf95d0f34ec383c16@mail.gmail.com>
Message-ID: <87ejg1pq85.fsf@platon.mekk.waw.pl>

"Ra?l G?mez C." <nachogomez at gmail.com> writes:

> Well Marcin, I think that looks pretty much close to what I want to
> achieve, so I haven't found any working example of this (yet
> :s). Can you share your code with us?

Well. You wanted it. 

a) This is messy.
b) I created it by randomly hacking here and there and I do not quite
   understand what is going on.
c) Error handling... Well. Is there any error handling?
d) It is to some degree polluted by the GUI window which I spawn to
   monitor what is going on.
e) It works (although reconnect is not handled). I tested it running
   client on windows and logging to remote linux, with ssh key
   login without password or passphrase (as Fritz seemed to expect
   .exe file, I used to run 'exemaker runme.py')

--------------------------------------------------
-- runme.py
--------------------------------------------------

#!/usr/bin/env python

import os, os.path, sys

RUN_DIR = os.path.dirname( os.path.abspath( sys.argv[0] ) )
LOG_DIR = os.path.join(RUN_DIR, 'log')
SSH_KEY = os.path.join(RUN_DIR, 'id_dsa')

if not os.path.exists(LOG_DIR):
    os.mkdir(LOG_DIR)

import sys
sys.path.append(RUN_DIR)

import RemoteEngine
RemoteEngine.RunRemoteEngine(
    ssh_key = SSH_KEY,
    remote_user = 'marcink',
    remote_host = 'myserver.home.local',
    remote_port = 22,
    remote_cmd = 'Szachy/Programy/Rybka/Rybka.sh',
    log_dir = LOG_DIR,
    show_output = False,
)

--------------------------------------------------
-- RemoteEngine.py
--------------------------------------------------

#!/usr/bin/env python
# -*- coding: utf8 -*-

# Pierwsze, bo przerabia reaktor
from LogWindow import LogBuffer, LogWindow

from twisted.internet import defer, protocol, reactor, stdio
from twisted.conch.ssh import transport, userauth, connection, common, keys, channel
from twisted.protocols import basic
import struct, sys, getpass, os, os.path, logging

logger = logging.getLogger('reng')

class CallbackHandler(logging.Handler):
    def __init__(self, callback):
        logging.Handler.__init__(self)
        self.callback = callback
    def emit(self, record):
        msg = self.format(record)
        self.callback(msg)

def setupLogging(log_dir, logbuf = None):
    import twisted.python, twisted.python.logfile, os, os.path, logging, logging.handlers
    if not os.path.exists(log_dir):
        os.mkdir(log_dir)
    root_logger = logging.getLogger()
    root_logger.setLevel(logging.DEBUG)
    debug_file = logging.handlers.RotatingFileHandler( os.path.join(log_dir, 'debug.log'), 'a', 4*1024*1024, 10)
    debug_file.setLevel(logging.DEBUG)
    debug_file.setFormatter( logging.Formatter('[%(asctime)s] [%(name)s/%(levelname)s] %(message)s') )
    root_logger.addHandler(debug_file)
    if logbuf:
        cbl = CallbackHandler( lambda txt: logbuf.on_debug_log(txt) )
        cbl.setLevel(logging.INFO)
        root_logger.addHandler( cbl )
    # I jeszcze logowanie twistdowe
    twistedLogFile = twisted.python.logfile.LogFile('twisted.log', log_dir, 16*1024*1024)
    twisted.python.log.startLogging(twistedLogFile)
    twisted.python.log.msg("Twisted log started")
    if logbuf:
        twisted.python.log.addObserver(logbuf.on_twisted_log)

class DataConsumer:
    """Klasa wykorzystywana do posredniczenia w transmisji danych, z obu stron
    polaczenia. Buforuje wszelkie dane otrzymane do czasu wywolania funkcji
    registerConsumer, potem przekazuje je juz bezposrednio"""
    def __init__(self, name):
        self.buffered = []
        self.name = name
        self.consumer = None
    def handleData(self, data):
        if self.consumer:
            logger.debug("[%s] write (%s)" % (self.name, data))
            self.consumer(data)
        else:
            logger.debug("[%s] buffering (%s)" % (self.name, data))
            self.buffered.append(data)
    def registerConsumer(self, consumer):
        "consumer to funkcja wo?ana dla wszelkich otrzymywanych danych"
        self.consumer = consumer
        if self.buffered:
            all = "".join(self.buffered)
            self.buffered = []
            logger.debug("[%s] write-buffer (%s)" % (self.name, all))
            consumer(all)

def restartRemoteConnection():
    raise "I do not know how to restart (yet)"

remoteConsumer = DataConsumer('remote')
localConsumer = DataConsumer('local')

class LocalProtocol(protocol.Protocol):
    #from os import linesep as delimiter
    delimiter = '\n'
    def connectionMade(self):
        logger.info("[LOCAL] ConnectionMade")
        localConsumer.registerConsumer(self.forwardData)
    def connectionLost(self, reason=protocol.connectionDone):
        logger.warn("[LOCAL] ConnectionLost")
        reactor.callLater(0, reactor.stop)
    def dataReceived(self, line):
        logger.info("[LOCAL] dataReceived(%s)" % line)
        line.replace(self.delimiter, '\n')
        remoteConsumer.handleData(line)
    def forwardData(self, data):
        data.replace('\n', self.delimiter)
        #logger.debug("[LOCAL] writing(%s)" % data)
        self.transport.write(data)

class RemoteProtocol(transport.SSHClientTransport):
    def __init__(self, ssh_key, remote_user, remote_cmd):
        #transport.SSHClientTransport.__init__(self)
        self.ssh_key = ssh_key
        self.remote_user = remote_user
        self.remote_cmd = remote_cmd
        self.connection = None
    def verifyHostKey(self, hostKey, fingerprint):
        logger.debug('[REMOTE] host key fingerprint: %s' % fingerprint)
        return defer.succeed(1) 
    def connectionSecure(self):
        logger.debug('[REMOTE] ssh connection established')
        self.connection = RemoteConnection(self.remote_cmd)
        self.connection.protocol = self
        self.requestService(
            RemoteUserAuth(self.ssh_key, self.remote_user, self.connection))

class RemoteUserAuth(userauth.SSHUserAuthClient):
    def __init__(self, ssh_key, user, connection):
        userauth.SSHUserAuthClient.__init__(self, user, connection)
        self.ssh_key = ssh_key
    def getPublicKey(self):
        path = os.path.expanduser(self.ssh_key) 
        if not os.path.exists(path) or self.lastPublicKey:
            return
        return keys.getPublicKeyString(path+'.pub')
    def getPrivateKey(self):
        path = os.path.expanduser(self.ssh_key)
        return defer.succeed(keys.getPrivateKeyObject(path))

class RemoteConnection(connection.SSHConnection):
    def __init__(self, remote_cmd):
        connection.SSHConnection.__init__(self)
        self.remote_cmd = remote_cmd
        self.engine = None
    def serviceStarted(self):
        self.engine = EngineChannel(self, self.remote_cmd)
        self.engine.connection = self
        self.openChannel(self.engine)
    def startupDataExchange(self):
        remoteConsumer.registerConsumer(self.writeDataToEngine)
    def writeDataToEngine(self, data):
        #logger.debug("[REMOTE] writing(%s)" % data)
        self.engine.write(data)

class EngineChannel(channel.SSHChannel):
    name = 'session'
    def __init__(self, connection, remote_cmd):
        channel.SSHChannel.__init__(self, 2**16, 2**15, connection)
        self.remote_cmd = remote_cmd
    def openFailed(self, reason):
        logger.warn("[REMOTE] failed (%s)" % reason)
        self.loseConnection()
    def channelOpen(self, ignoredData):
        #self.data = ''
        logger.info("[REMOTE] running (%s)" % self.remote_cmd)
        d = self.conn.sendRequest(self, 'exec', common.NS(self.remote_cmd), wantReply = 1)
        d.addCallback(self._cbRequest)
    def _cbRequest(self, ignored):
        logger.debug("[REMOTE] Remote cmd started")
        self.connection.startupDataExchange()
        #self.write('hello conch\n')
        #self.conn.sendEOF(self)
        #remote_connected.callback(self.writeDataToEngine)
        #remote_consumer = self.writeDataToEngine
    def dataReceived(self, data):
        logger.info('[REMOTE] dataReceived(%s)' % str(data))
        # Omijamy nieszczesne err:reg:SCSI_getprocentry SCSI type line scan count error
        if data.startswith('err:reg:'):
            return
        localConsumer.handleData(data)
    def closed(self):
        #print '[REMOTE] Closed. Accumulated data from engine: %s' % repr(self.data)
        logger.info('[REMOTE] Closed.')
        self.loseConnection()
        ##reactor.callLater(0, reactor.stop)
        reactor.callLater(0, restartRemoteConnection)

class RemoteFactory(protocol.ClientFactory):
    def __init__(self, ssh_key, remote_user, remote_cmd):
        self.ssh_key = ssh_key
        self.remote_user = remote_user
        self.remote_cmd = remote_cmd
        # failed on windows without this:
        self.protocol_instance = None
        self.buildProtocol(None)
    def buildProtocol(self, addr):
        if self.protocol_instance:
          return self.protocol_instance
        p = RemoteProtocol(self.ssh_key, self.remote_user, self.remote_cmd)
        p.factory = self
        self.protocol_instance = p
        return p
    def clientConnectionFailed(self, connector, reason):
        logger.warn('[REMOTE] connection failed:' + reason.getErrorMessage())
        reactor.callLater(0, reactor.stop)
    def clientConnectionLost(self, connector, reason):
        logger.warn('[REMOTE] connection lost:' + reason.getErrorMessage())
        reactor.callLater(0, reactor.stop)
  
def RunRemoteEngine(ssh_key, remote_user, remote_host, remote_port, remote_cmd, log_dir, show_output):
    logbuf = LogBuffer(show_output)
    logwin = LogWindow(logbuf, remote_host + ':' + remote_cmd)
    setupLogging(log_dir, logbuf)
    remote_factory = RemoteFactory(ssh_key, remote_user, remote_cmd)
    local = LocalProtocol()
    stdio.StandardIO(local)
    reactor.connectTCP(remote_host, remote_port, remote_factory)
    #logwin.show()
    reactor.run()

--------------------------------------------------
-- LogWindow.py
--------------------------------------------------

#!/usr/bin/env python
# -*- coding: utf8 -*-

from twisted.internet import gtk2reactor
gtk2reactor.install()

from twisted.internet import reactor
import pygtk, gtk
import re

re_received = re.compile(r'^\[(?P<dir>LOCAL|REMOTE)\]\s*dataReceived\((?P<data>.*)\)\s*$', re.DOTALL)

# Patrz /usr/share/doc/python-gtk2-tutorial/html/examples/testtext.py
class LogBuffer(gtk.TextBuffer):
    def __init__(self, show_output=True):
        gtk.TextBuffer.__init__(self)
        self.show_output = show_output
        self.input_tag = self.create_tag(editable = False, foreground = "darkgreen")
        self.output_tag = self.create_tag(editable= False, foreground = "brown")
        self.error_tag = self.create_tag(editable= False, foreground = "red")
        self.debug_tag = self.create_tag(editable = False, foreground = "black")
    def add_input(self, text):
        #self.insert(self.get_end_iter(), ">>> " + text + "\n")
        self.insert_with_tags(self.get_end_iter(), text, self.input_tag)
        self.place_cursor(self.get_end_iter())
    def add_output(self, text):
        if self.show_output:
            #self.insert(self.get_end_iter(), "<<< " + text + "\n")
            self.insert_with_tags(self.get_end_iter(), text, self.output_tag)
            self.place_cursor(self.get_end_iter())
    def add_error(self, text):
        self.insert_with_tags(self.get_end_iter(), "[ERR] " + text + "\n", self.error_tag)
        self.place_cursor(self.get_end_iter())
    def add_debug(self, text):
        self.insert_with_tags(self.get_end_iter(), "[DBG] " + text + "\n", self.debug_tag)        
        self.place_cursor(self.get_end_iter())
    def on_twisted_log(self, data):
        isError = data['isError']
        message = "\n".join(data['message'])
        if isError:
            self.add_error(text)
        else:
            self.add_debug("[TWISTED] " + text)
    def on_debug_log(self, text):
        m = re_received.match(text)
        if m:
            if m.group('dir') == "LOCAL":
                self.add_input(m.group('data'))
            else:
                self.add_output(m.group('data'))
        else:
            self.add_debug(text)            

class LogWindow(gtk.Window):
    def __init__(self, buffer, title):
        gtk.Window.__init__(self, gtk.WINDOW_TOPLEVEL)
        self.set_title(title)
        self.connect('destroy', self.close)
        #
        vbox = gtk.VBox(False, 0)
        self.add(vbox)
        #vbox.pack_start(self.item_factory.get_widget("<main>"), False, False, 0)        
        sw = gtk.ScrolledWindow()
        sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
        # Tekstowy panel
        self.textview = gtk.TextView(buffer)
        self.textview.set_editable(False)
        self.textview.set_wrap_mode(gtk.WRAP_NONE)
        self.textview.set_justification(gtk.JUSTIFY_LEFT)
        #self.textview.set_border_window_size(gtk.TEXT_WINDOW_TOP, 15)
        #self.textview.set_border_window_size(gtk.TEXT_WINDOW_BOTTOM, 15)
        #self.textview.set_border_window_size(gtk.TEXT_WINDOW_RIGHT, 30)
        #self.textview.set_border_window_size(gtk.TEXT_WINDOW_LEFT, 30)
        vbox.pack_start(sw, True, True, 0)
        sw.add(self.textview)
        self.set_default_size(500, 500)
        self.textview.grab_focus()        
        # Przycisk ko?cz?cy
        #stop_button = gtk.Button('Stop')
        #stop_button.connect('clicked', self.close)
        #vbox.add(stop_button)
        # G??wne okno
        self.show_all()
    def close(self, widget, data=None):
        reactor.stop()




From sipickles at hotmail.com  Thu Oct 11 14:24:02 2007
From: sipickles at hotmail.com (Simon Pickles)
Date: Thu, 11 Oct 2007 19:24:02 +0100
Subject: [Twisted-Python] UDP with multiple connections
In-Reply-To: <1192117929.13505.10.camel@doorstop.net.ic.ac.uk>
References: <470BE2D8.6040601@hotmail.com>	<1191973022.2554.18.camel@localhost.localdomain>	<470E3F53.9050901@hotmail.com>
	<1192117929.13505.10.camel@doorstop.net.ic.ac.uk>
Message-ID: <470E6A42.4000204@hotmail.com>

Thanks for the advice. My dilemma continues. In my game server, I 
firstly tried an approach like divmod suggests, using TCP for 'slow' 
operations like authentication, chat.

Then I tried to run a separate UDP thread doing 'fast' ops like position 
updates. However I stumbled when the reactor didn't like not being in 
the main thread (it was the second reactor in the app)

I've come to a new design now, where the server structure is split into:

auth, chat, generator, etc, plus a master 'conductor' - TCP using 
python+twisted
game zone servers - C++/UDP

Using UDP for the game server is strongly recommended by my industry 
contacts.

Phil Mayers wrote:
> On Thu, 2007-10-11 at 16:20 +0100, Simon Pickles wrote:
>   
>> UDP is often used in online gaming, where other methods are employed to 
>> compensate for its weaknesses, in return for its speed.
>>     
>
> I am aware of this. What's your point?
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> </
>
>   



From nachogomez at gmail.com  Thu Oct 11 14:54:52 2007
From: nachogomez at gmail.com (=?UTF-8?Q?Ra=C3=BAl_G=C3=B3mez_C.?=)
Date: Thu, 11 Oct 2007 14:54:52 -0400
Subject: [Twisted-Python] Re: Running commands (ssh) from a GUI client
In-Reply-To: <87ejg1pq85.fsf@platon.mekk.waw.pl>
References: <684b0a740710071104k54a47a79se4070a0f58334f8b@mail.gmail.com>
	<OF0ED303F2.E7706FBC-ON8625736F.0060300F-8625736F.0061032D@uscmail.uscourts.gov>
	<fegnmb$t2f$1@sea.gmane.org> <87tzoxpylu.fsf@platon.mekk.waw.pl>
	<684b0a740710110853q3e90a87atf95d0f34ec383c16@mail.gmail.com>
	<87ejg1pq85.fsf@platon.mekk.waw.pl>
Message-ID: <684b0a740710111154k36b49dc1u767d43195af690b9@mail.gmail.com>

Thanks Marcin, I'll checkit and post any comments!

On 10/11/07, Marcin Kasperski <Marcin.Kasperski at softax.com.pl> wrote:
>
> Well. You wanted it.
>
> a) This is messy.
> b) I created it by randomly hacking here and there and I do not quite
>    understand what is going on.
> c) Error handling... Well. Is there any error handling?
> d) It is to some degree polluted by the GUI window which I spawn to
>    monitor what is going on.
> e) It works (although reconnect is not handled). I tested it running
>    client on windows and logging to remote linux, with ssh key
>    login without password or passphrase (as Fritz seemed to expect
>    .exe file, I used to run 'exemaker runme.py')
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20071011/2b2fc332/attachment.htm 

From exarkun at divmod.com  Thu Oct 11 14:56:29 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 11 Oct 2007 14:56:29 -0400
Subject: [Twisted-Python] UDP with multiple connections
In-Reply-To: <470E6A42.4000204@hotmail.com>
Message-ID: <20071011185629.8162.969472966.divmod.quotient.21577@ohm>

On Thu, 11 Oct 2007 19:24:02 +0100, Simon Pickles <sipickles at hotmail.com> wrote:
> [snip]

Hi,

http://twistedmatrix.com/projects/core/documentation/howto/servers.html

Hope this helps,

Jean-Paul



From sipickles at hotmail.com  Thu Oct 11 15:32:46 2007
From: sipickles at hotmail.com (Simon Pickles)
Date: Thu, 11 Oct 2007 20:32:46 +0100
Subject: [Twisted-Python] UDP with multiple connections
In-Reply-To: <20071011185629.8162.969472966.divmod.quotient.21577@ohm>
References: <20071011185629.8162.969472966.divmod.quotient.21577@ohm>
Message-ID: <470E7A5E.5060500@hotmail.com>

My problem is my app needs to be a server to many clients (thru TCP - 
twisted.protocols.basic) but a client to a further server, to which it 
passes occasional information.

Is this possible through twisted, since I need two threads, one with the 
server reactor.run() and one with the client connection listenTCP()?

At present using UDP for the client connection, if I call reactor.run() 
after listenUDP(), I get:

Traceback (most recent call last):
  File "E:\Dev\Python\Lib\threading.py", line 460, in __bootstrap
    self.run()
  File "G:\_Dev\Gateway 20071011\gatewayClient.py", line 59, in run
    reactor.run()
  File "E:\Dev\Python\lib\site-packages\twisted\internet\posixbase.py", 
line 219, in run
    self.startRunning(installSignalHandlers=installSignalHandlers)
  File "E:\Dev\Python\lib\site-packages\twisted\internet\posixbase.py", 
line 215, in startRunning
    self._handleSignals()
  File "E:\Dev\Python\lib\site-packages\twisted\internet\posixbase.py", 
line 185, in _handleSignals
    signal.signal(signal.SIGTERM, self.sigTerm)
ValueError: signal only works in main thread

If I don't call reactor.run(), it works. I can still send and recieve. 
What then, is the role of the reactor? I thought it started the 
listening loop?

Thanks

Simon

Jean-Paul Calderone wrote:
> On Thu, 11 Oct 2007 19:24:02 +0100, Simon Pickles 
> <sipickles at hotmail.com> wrote:
>> [snip]
>
> Hi,
>
> http://twistedmatrix.com/projects/core/documentation/howto/servers.html
>
> Hope this helps,
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>



From radix at twistedmatrix.com  Thu Oct 11 16:04:48 2007
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Thu, 11 Oct 2007 16:04:48 -0400
Subject: [Twisted-Python] UDP with multiple connections
In-Reply-To: <470E7A5E.5060500@hotmail.com>
References: <20071011185629.8162.969472966.divmod.quotient.21577@ohm>
	<470E7A5E.5060500@hotmail.com>
Message-ID: <60ed19d40710111304v9443795gdde1e248592c1798@mail.gmail.com>

On 10/11/07, Simon Pickles <sipickles at hotmail.com> wrote:
> My problem is my app needs to be a server to many clients (thru TCP -
> twisted.protocols.basic) but a client to a further server, to which it
> passes occasional information.
>
> Is this possible through twisted, since I need two threads, one with the
> server reactor.run() and one with the client connection listenTCP()?

No you don't!

listenTCP does not block. You can have as many connections as you want
in a single reactor. Twisted is an *asynchronous* networking
framework. You don't need multiple threads for this use case.

-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From glyph at divmod.com  Thu Oct 11 16:27:49 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 11 Oct 2007 20:27:49 -0000
Subject: [Twisted-Python] UDP with multiple connections
In-Reply-To: <60ed19d40710111304v9443795gdde1e248592c1798@mail.gmail.com>
References: <20071011185629.8162.969472966.divmod.quotient.21577@ohm>
	<470E7A5E.5060500@hotmail.com>
	<60ed19d40710111304v9443795gdde1e248592c1798@mail.gmail.com>
Message-ID: <20071011202749.5579.863387732.divmod.xquotient.5483@joule.divmod.com>

On 08:04 pm, radix at twistedmatrix.com wrote:
>On 10/11/07, Simon Pickles <sipickles at hotmail.com> wrote:
>>My problem is my app needs to be a server to many clients (thru TCP -
>>twisted.protocols.basic) but a client to a further server, to which it
>>passes occasional information.
>>
>>Is this possible through twisted, since I need two threads, one with 
>>the
>>server reactor.run() and one with the client connection listenTCP()?
>
>No you don't!
>
>listenTCP does not block. You can have as many connections as you want
>in a single reactor. Twisted is an *asynchronous* networking
>framework. You don't need multiple threads for this use case.

Please allow me to emphasize.  This is an important point.

Call listenTCP.  Then, immediately call listenUDP.  Then you will have a 
TCP server and a UDP server.  When TCP connections arrive, they will be 
connected using buildProtocol on your factory.  When UDP packets arrive, 
they will be delivered to datagramReceived on your UDP protocol.  You 
can then deliver those packets to whatever code you need to, whether 
it's C++ or Python or whatever.  You do not need, and should not want, 
threads for multiple sources of I/O.  If you want to take advantage of 
multiple cores or something, you can always run your C++ code that 
responds to some events in a separate process (or thread, if you are so 
inclined).

I would, however, suggest that you implement _all_ your messages using 
TCP over a single connection at first.  Once you have really understood 
and internalized the event-driven nature of Twisted, and implemented all 
the code needed to respond to position updates and so on, you will be 
able to easily split out the code that receives and parses those updates 
into a separate UDP class.  This will force you to deal with the fact 
that there is no deep architectural difference between delivering some 
messages over TCP and others over UDP.  If you instead start off with a 
two-protocol design that you do not entirely understand, your game's 
network architecture will be the result of a series of 
misunderstandings, not a well-planned whole.

Using UDP for position updates is simply an optimization, and one that 
you can make fairly late in development.  All the code to process and 
respond to them *should* be unchanged, regardless of how they are 
delivered.  Testing on local networks and fast links should be 
unaffected at first: UDP's performance advantage only comes into play 
when packets are being dropped, so it's only going to affect your game 
over long-haul links or really slow local networks.



From zmola at acm.org  Thu Oct 11 22:42:22 2007
From: zmola at acm.org (Carl Zmola)
Date: Thu, 11 Oct 2007 22:42:22 -0400
Subject: [Twisted-Python] UDP with multiple connections
In-Reply-To: <20071011163001.5579.671880163.divmod.xquotient.5452@joule.divmod.com>
References: <470BE2D8.6040601@hotmail.com>	<1191973022.2554.18.camel@localhost.localdomain>	<470E3F53.9050901@hotmail.com>
	<20071011163001.5579.671880163.divmod.xquotient.5452@joule.divmod.com>
Message-ID: <470EDF0E.1060203@acm.org>


I would like to make a general comment about the use of UDP in 
applications.  There are some people on this list who can do some tricky 
things with UDP, but as a general rule, what should be recommended is 
"use TCP".  If you end up running into issues that TCP has problems 
with, there are other options, but you should have tried TCP first.  If 
you are asking advise on this forum on using UDP, the first reply should 
always be: "Why arn't you using TCP?", and the second reply should be 
"Have you actually tried TCP and seen problems with it?"

UDP is fun and if you know what you are doing, you can get some benefits 
out of it, but you have to put an awful lot of work into it and I have 
seen many cases where the promised benefits of using UDP are not seen.


Areas where UDP can give some benefits are:
  Overcoming latency due to a 3way handshake,
  reducing cost if you are charged by the byte (but this can be eaten up 
by development cost and retransmission),
  multicast (but you then need to have control over your network).

I have heard of at least one case where large UDP applications have been 
put in due to the perceived benefits, only to be replaced by a TCP 
application that actually works.

--
Carl
zmola at acm.org



From vovic at nfi.kiae.ru  Fri Oct 12 06:42:15 2007
From: vovic at nfi.kiae.ru (Voznesensky Vladimir)
Date: Fri, 12 Oct 2007 14:42:15 +0400
Subject: [Twisted-Python] Http PUT
Message-ID: <web-3351355@newmail.nfi.kiae.ru>

Dear Twisted authors,

I need to realise an HTTP server capable of serving PUT 
request.
There seems to be no standard twisted implementation for 
it.
Is it possible to realise and include it into the standard 
twisted contribution?
I have no solid idea were to start with it.

Thanks,
VV



From jarek.zgoda at sensisoft.com  Fri Oct 12 07:58:43 2007
From: jarek.zgoda at sensisoft.com (Jarek Zgoda)
Date: Fri, 12 Oct 2007 13:58:43 +0200
Subject: [Twisted-Python] Http PUT
In-Reply-To: <web-3351355@newmail.nfi.kiae.ru>
References: <web-3351355@newmail.nfi.kiae.ru>
Message-ID: <470F6173.5040406@sensisoft.com>

Voznesensky Vladimir napisa?(a):

> I need to realise an HTTP server capable of serving PUT request.
> There seems to be no standard twisted implementation for it.
> Is it possible to realise and include it into the standard twisted
> contribution?
> I have no solid idea were to start with it.

Start at twisted.web

Just write a resource class (subclass of twisted.web.resource.Resource)
that handles PUT requests by implementing render_PUT method.

-- 
Jarek Zgoda
Skype: jzgoda | GTalk: zgoda at jabber.aster.pl | voice: +48228430101

"We read Knuth so you don't have to." (Tim Peters)



From Andy at NewWorldElectric.com  Fri Oct 12 08:43:07 2007
From: Andy at NewWorldElectric.com (Andy Fundinger)
Date: Fri, 12 Oct 2007 08:43:07 -0400
Subject: [Twisted-Python] Http PUT
In-Reply-To: <470F6173.5040406@sensisoft.com>
References: <web-3351355@newmail.nfi.kiae.ru> <470F6173.5040406@sensisoft.com>
Message-ID: <37d49ed40710120543j7538da83p7fd96b6cf6a06557@mail.gmail.com>

Here's some sample code to get you started:

    def render_PUT(self,request):
        print "Got PUT"
        dataPage=request.content.getvalue()
        pageNumber=request.args.get("pagenumber",(0,))[0]
        (responseCode,message) = self._savePage(request.args["keynumber"][0],
self.userId,pageNumber,dataPage)
        request.setResponseCode(responseCode)
        return message

notice how you get at the PUT data via request.content.getvalue() I remember
needing a while to find that.  render_PUT can be added to
twisted.web.resource.Resource or a subclass as Jarek says.

-Andy Fundinger

On 10/12/07, Jarek Zgoda <jarek.zgoda at sensisoft.com> wrote:
>
> Voznesensky Vladimir napisa?(a):
>
> > I need to realise an HTTP server capable of serving PUT request.
> > There seems to be no standard twisted implementation for it.
> > Is it possible to realise and include it into the standard twisted
> > contribution?
> > I have no solid idea were to start with it.
>
> Start at twisted.web
>
> Just write a resource class (subclass of twisted.web.resource.Resource)
> that handles PUT requests by implementing render_PUT method.
>
> --
> Jarek Zgoda
> Skype: jzgoda | GTalk: zgoda at jabber.aster.pl | voice: +48228430101
>
> "We read Knuth so you don't have to." (Tim Peters)
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Blog:  http://channel3b.wordpress.com
Second Life Name:  Ciemaar Flintoff

I am a sig Virus. Please put me in your sig so that I can continue to
replicate.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20071012/16527386/attachment.htm 

From sipickles at hotmail.com  Fri Oct 12 14:14:15 2007
From: sipickles at hotmail.com (Simon Pickles)
Date: Fri, 12 Oct 2007 19:14:15 +0100
Subject: [Twisted-Python] UDP with multiple connections
In-Reply-To: <470EDF0E.1060203@acm.org>
References: <470BE2D8.6040601@hotmail.com>	<1191973022.2554.18.camel@localhost.localdomain>	<470E3F53.9050901@hotmail.com>	<20071011163001.5579.671880163.divmod.xquotient.5452@joule.divmod.com>
	<470EDF0E.1060203@acm.org>
Message-ID: <470FB977.1000207@hotmail.com>

I thiank you all for your tiem and patience. My understanding has 
developed somewhat :)

Carl Zmola wrote:
>
> I would like to make a general comment about the use of UDP in 
> applications.  There are some people on this list who can do some 
> tricky things with UDP, but as a general rule, what should be 
> recommended is "use TCP".  If you end up running into issues that TCP 
> has problems with, there are other options, but you should have tried 
> TCP first.  If you are asking advise on this forum on using UDP, the 
> first reply should always be: "Why arn't you using TCP?", and the 
> second reply should be "Have you actually tried TCP and seen problems 
> with it?"
>
> UDP is fun and if you know what you are doing, you can get some 
> benefits out of it, but you have to put an awful lot of work into it 
> and I have seen many cases where the promised benefits of using UDP 
> are not seen.
>
>
> Areas where UDP can give some benefits are:
>  Overcoming latency due to a 3way handshake,
>  reducing cost if you are charged by the byte (but this can be eaten 
> up by development cost and retransmission),
>  multicast (but you then need to have control over your network).
>
> I have heard of at least one case where large UDP applications have 
> been put in due to the perceived benefits, only to be replaced by a 
> TCP application that actually works.
>
> -- 
> Carl
> zmola at acm.org
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> </
>



From sipickles at hotmail.com  Fri Oct 12 15:16:18 2007
From: sipickles at hotmail.com (Simon Pickles)
Date: Fri, 12 Oct 2007 20:16:18 +0100
Subject: [Twisted-Python] Sending Data via a client
In-Reply-To: <470F6173.5040406@sensisoft.com>
References: <web-3351355@newmail.nfi.kiae.ru> <470F6173.5040406@sensisoft.com>
Message-ID: <470FC802.6000409@hotmail.com>

Twisted is event driven.

So how do I send Data through a client? All the example demonstrate is 
how to receive events.

I suppose what I am asking is how do I refer to a client protocol from 
another class?

My variable:

loop = = gatewayClient().start()

opens a reconnectingClientFactory, which opens a client protocol. How do 
i make that client protocol global enough to use from anywhere in my app?


The ironic thing is, its easy with sockets :)

Si




From sroberts at uniserve.com  Fri Oct 12 16:36:15 2007
From: sroberts at uniserve.com (Sam Roberts)
Date: Fri, 12 Oct 2007 13:36:15 -0700
Subject: [Twisted-Python] Sending Data via a client
In-Reply-To: <470FC802.6000409@hotmail.com>
References: <web-3351355@newmail.nfi.kiae.ru> <470F6173.5040406@sensisoft.com>
	<470FC802.6000409@hotmail.com>
Message-ID: <20071012203615.GA20214@sam-desktop>

On Fri, Oct 12, 2007 at 08:16:18PM +0100, Simon Pickles wrote:
> Twisted is event driven.
> 
> So how do I send Data through a client? All the example demonstrate is 
> how to receive events.
> 
> I suppose what I am asking is how do I refer to a client protocol from 
> another class?

There are a number of  tutorials on this in Twisted Network Programming
Esentials, by Abe Fettig.

Sam




From radix at twistedmatrix.com  Fri Oct 12 16:49:34 2007
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 12 Oct 2007 16:49:34 -0400
Subject: [Twisted-Python] Sending Data via a client
In-Reply-To: <470FC802.6000409@hotmail.com>
References: <web-3351355@newmail.nfi.kiae.ru> <470F6173.5040406@sensisoft.com>
	<470FC802.6000409@hotmail.com>
Message-ID: <60ed19d40710121349q46d2e8b2r2509f0744172ba3e@mail.gmail.com>

On 10/12/07, Simon Pickles <sipickles at hotmail.com> wrote:
> Twisted is event driven.
>
> So how do I send Data through a client? All the example demonstrate is
> how to receive events.

I don't know what you mean by "through", but whether you mean "to" or
"from" the answer is the same: transport.write. ('transport' will be
an attribute of your Protocol instances).


> I suppose what I am asking is how do I refer to a client protocol from
> another class?

This is really just a basic program structuring question, and not
really related to Twisted.

-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From johann.borck at densedata.com  Fri Oct 12 17:39:27 2007
From: johann.borck at densedata.com (Johann Borck)
Date: Fri, 12 Oct 2007 23:39:27 +0200
Subject: [Twisted-Python] Sending Data via a client
In-Reply-To: <470FC802.6000409@hotmail.com>
References: <web-3351355@newmail.nfi.kiae.ru> <470F6173.5040406@sensisoft.com>
	<470FC802.6000409@hotmail.com>
Message-ID: <470FE98F.4040908@densedata.com>

Simon Pickles wrote:
> Twisted is event driven.
>
> So how do I send Data through a client? All the example demonstrate is
> how to receive events.
>
Here is just one of the examples available, it's actually googles first
hit for "twisted client example":
http://twistedmatrix.com/projects/core/documentation/howto/tutorial/client.html

The function "finger" shows what is needed to start up a client.
> I suppose what I am asking is how do I refer to a client protocol from
> another class?
>
> My variable:
>
> loop = = gatewayClient().start()
>
> opens a reconnectingClientFactory, which opens a client protocol. How
> do i make that client protocol global enough to use from anywhere in
> my app?
you "import MyFactory from mymodule" and use it as shown in example. You
can do that anywhere in your app.
>
>
> The ironic thing is, its easy with sockets :)
I'd say the ironic thing is that sockets are so often used in a
different way, imposing lots of unnecessary problems (apart from the
fact that this is a rtfm question) :). What twisted gives you for free
is a rock-stable way to do all networking asynchronous, which is no
trivial task to achieve using sockets (i.e. writing a twisted equivalent
from scratch). When you get used to it, it won't be harder to do simple
things, and way easier to do complex things. It's certainly worth the
effort.

Johann






From exarkun at twistedmatrix.com  Sun Oct 14 00:05:04 2007
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 14 Oct 2007 04:05:04 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1192334704.16.376492094@twistedmatrix.com

Bug summary
______________________
Summary for 2007-10-07 through 2007-10-14
Bugs opened: 5    Bugs closed: 3  Total open bugs: 1040 (+2)

|== Type Changes   |== Priority Changes   |== Component Changes   
|Defect:       +0  |Highest:  +0          |Core:   +1             
|Enhancement:  +1  |High:     -1          |Trial:  +1             
|Task:         +1  |Normal:   +2                                  
                   |Low:      +1                                  


New / Reopened Bugs
______________________
                    ===== Highest =====
[#2849] A reentrant addCallbacks on a Deferred adds to mid-chain (opened by Peaker)
    defect          core       http://twistedmatrix.com/trac/ticket/2849

                    ===== Normal =====
[#2845] twisted.internet.thread._putResultInDeferred should be public (opened by therve)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2845

[#2847] Get rid of all "API Stability: unstable" markers (opened by radix)
    task            core       http://twistedmatrix.com/trac/ticket/2847

[#2848] typos in doc/core/man/tap2{deb,rpm}.1 (opened by exarkun) (CLOSED, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/2848

                    ===== Low =====
[#2846] trial coverage option should include tracing in threads (opened by therve)
    enhancement     trial      http://twistedmatrix.com/trac/ticket/2846



Closed Bugs
______________________
                    ===== Highest =====
[#2457] failed reactor selection is reported poorly by trial and twistd (opened by exarkun, closed by therve, fixed)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2457

                    ===== High =====
[#411 ] Deferreds are good at blowing the stack (opened by etrepum, closed by Peaker, invalid)
    defect          core       http://twistedmatrix.com/trac/ticket/411

                    ===== Normal =====
[#2848] typos in doc/core/man/tap2{deb,rpm}.1 (opened by exarkun, closed by exarkun, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/2848



Ticket Lifetime Stats
______________________
Oldest open ticket - [#38] Should be a way to create documentation aliases (since 2003-07-12 16:08:03).
Newest open ticket - [#2849] A reentrant addCallbacks on a Deferred adds to mid-chain (since 2007-10-10 11:25:51).

Mean open ticket age: 539 days, 13:55:11.952859.
Median: 440 days, 3:14:16.977859.
Standard deviation: 403 days, 6:49:39.251191.
Interquartile range: 504 days, 16:10:28.

Mean time between ticket creation and ticket resolution: 122 days, 14:09:56.608352.
Median: 14 days, 16:22:15.
Standard deviation is 226 days, 22:06:10.127155.
The interquartile range is 130 days, 2:23:34.

Mean time spent in review: 67 days, 20:17:30.264549.
Median: 4 days, 9:08:37.
Standard deviation: 149 days, 7:51:46.848091.
Interquartile range: 31 days, 6:31:05.

Mean number of times a ticket is reviewed: 1.95150115473.
Median: 1
Standard deviation: 1.58950187867.
Interquartile range: 1.


Contributor Stats
______________________
In the last 4 weeks,
    10 unique ticket reporters
    7 unique ticket reviewers
    2 unique ticket resolvers
In the last 24 weeks,
    70 unique ticket reporters
    16 unique ticket reviewers
    14 unique ticket resolvers
In the last 48 weeks,
    152 unique ticket reporters
    18 unique ticket reviewers
    26 unique ticket resolvers




From george at ringdevelopment.com  Sun Oct 14 15:53:03 2007
From: george at ringdevelopment.com (George Pauly)
Date: Sun, 14 Oct 2007 15:53:03 -0400
Subject: [Twisted-Python] UDP with multiple connections
In-Reply-To: <20071011163001.5579.671880163.divmod.xquotient.5452@joule.divmod.com>
References: <470BE2D8.6040601@hotmail.com>
	<1191973022.2554.18.camel@localhost.localdomain>
	<470E3F53.9050901@hotmail.com>
	<20071011163001.5579.671880163.divmod.xquotient.5452@joule.divmod.com>
Message-ID: <1192391584.2602.220.camel@localhost.localdomain>

On Thu, 2007-10-11 at 16:30 +0000, glyph at divmod.com wrote:
> On 03:20 pm, sipickles at hotmail.com wrote:
> >UDP is often used in online gaming, where other methods are employed to 
> >compensate for its weaknesses, in return for its speed.
> 
> "Speed" is an oversimplified way of explaining this usage.
> 
> Some games use a TCP control channel for most logical messages and UDP 
> for updates to a small set of values where only the _most current_ value 
> ever matters.  This is most often the position, orientation, and 
> velocity of an object in the game world.  This can improve the apparent 
> performance of twitchy games over lossy links.
> 
> Some games, having heard secondhand about this previous strategy, use 
> UDP for everything because their implementors mistakenly believe that 
> it's faster than TCP.  Often, these games eventually switch to TCP later 
> in the development cycle when networking bugs and profiling indicate 
> that the features of TCP are actually required or the performance 
> "gains" are actually losses.  For example, routers on the public 
> internet can and often do cheat in a variety of ways to use the 
> additional information that TCP provides to make it go faster.  UDP 
> can't take advantage of that and its overall throughput is often slower 
> (especially on congested networks).
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-- 
George Pauly
Ring Development
www.ringdevelopment.com




From k_r_a_j_kumar at yahoo.co.in  Mon Oct 15 00:10:35 2007
From: k_r_a_j_kumar at yahoo.co.in (Raj kumar)
Date: Mon, 15 Oct 2007 05:10:35 +0100 (BST)
Subject: [Twisted-Python] Regarding "add" method in microdom.lmx
In-Reply-To: <mailman.0.1192183798.10658.twisted-python@twistedmatrix.com>
Message-ID: <933519.65963.qm@web8707.mail.in.yahoo.com>

Hi every one,
This is raj.. I am new to twisted python.
I have created a xml and want to add some content to it but i am unable to edit the xml file..
I tried in this way.....
..............................................................
Method(self, X,Y,Z,xmlfile=None)
xmlfile = xmlfile or self.xmlfile
.
.
jump = microdom.lmx('jumping')
jump.add("jumpat", xjump=X, yjump=Y)
save_xml(jump.node,xmlfile)

then the xml file is showing 
<jumping>
</jumping>
but not the jumpat tag and content

...............................................................

if i try in this below manner
......................................
Method(self, X,Y,Z,xmlfile=None)
 xmlfile = xmlfile or self.xmlfile
 .
 .
 jump = microdom.lmx('jumping')
 jump.add("jumpat")
 save_xml(jump.node,xmlfile)
 
 then xml file is  showing
<jumping>
<jumpat>
</jumpat>
</jumping>
..................................

Can any one help me how to add those X,Y,Z values in that?
I wanted the out put to be stored as below
<jumping>
<jumpat x=value,y=value,z=value>
</jumpat>
<jumpat x=value,y=value,z=value>
 </jumpat>
 </jumping>

Thank you in advance.

       
---------------------------------
 Unlimited freedom, unlimited storage. Get it now
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20071015/0f279b6a/attachment.htm 

From kernellearn at gmail.com  Mon Oct 15 02:09:08 2007
From: kernellearn at gmail.com (wangmm)
Date: Mon, 15 Oct 2007 14:09:08 +0800
Subject: [Twisted-Python] twisted.names.client.getHostByName Error when DNS
	Server return Auth NS Server
Message-ID: <353309580710142309v404d8e0mb9ff3aeb5a2a516b@mail.gmail.com>

 There is a bug in the extractRecord function of common.py. And I open a
ticket in http://twistedmatrix.com/trac/ticket/2850
----------------------------------------------------------------------------------------------------

Python Version:2.5
Twisted Version:2.5
Names Version:0.4


 When we got a resolver and call getHostByname, perhaps DNS server can
return CNAME, Auth NS Server Name and Auth NS Server IP Address. So
extractRecord function will extract the Auth NS Server and send the DNS
request to the Auth NS Server. But there is a bug in the extractRecord
function.

Code:

 # No answers, but maybe there's a hint at who we should be asking about
this for r in answers:

 if r.type == dns.NS:

 from twisted.names import client r = client.Resolver(servers=[(str(
r.payload.name), dns.PORT)]) return r.lookupAddress(str(name)

 Generally, the Auth NS Server is the Domain name, and it's IP contained in
the addition fields. If we get the NS Server by r.payload.name, we will get
the DNS Server Domain, so the Domain as server will pass to
client.queryUDPas DNS Server Address.
UDP.write will complaint that warnings.warn("Please only pass IPs to
write(), not hostnames "+addr[0] <http://twistedmatrix.com/trac/changeset/0>,
DeprecationWarning? <http://twistedmatrix.com/trac/wiki/DeprecationWarning>,
stacklevel=2). In addition, self.socket.sendto(datagram, addr) will call
socket.gethostbyname(addr), but this call is block.

I think we should use the Auth NS Server IP to replace the Domain. The patch
code as fellow:

Any comment is welcome!

 # No answers, but maybe there's a hint at who we should be asking about
this for r in answers:

 if r.type == dns.NS:

 from twisted.names import client

server = str(r.payload.name)

    for s in answers:

 if s.type==dns.A and str(s.name)==server :

 server = socket.inet_ntop(socket.AF_INET, s.payload.address) break

    r = client.Resolver(servers=[(server, dns.PORT)])
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20071015/1e9e3ceb/attachment.htm 

From greveriego at citic.es  Mon Oct 15 07:27:16 2007
From: greveriego at citic.es (Gerardo)
Date: Mon, 15 Oct 2007 13:27:16 +0200
Subject: [Twisted-Python] returning strings with twisted.web.xmlrpc
Message-ID: <47134E94.2020500@citic.es>

How can I return NON-ASCII strings via xmlrpc( p.e. latin1)? Is it 
possible to read them using python's xmlrpclib? Thanks.



From p.mayers at imperial.ac.uk  Mon Oct 15 07:40:12 2007
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 15 Oct 2007 12:40:12 +0100
Subject: [Twisted-Python] Sending Data via a client
In-Reply-To: <470FC802.6000409@hotmail.com>
References: <web-3351355@newmail.nfi.kiae.ru>
	<470F6173.5040406@sensisoft.com>  <470FC802.6000409@hotmail.com>
Message-ID: <1192448412.1499.24.camel@doorstop.net.ic.ac.uk>

On Fri, 2007-10-12 at 20:16 +0100, Simon Pickles wrote:
> Twisted is event driven.
> 
> So how do I send Data through a client? All the example demonstrate is 
> how to receive events.
> 
> I suppose what I am asking is how do I refer to a client protocol from 
> another class?
> 
> My variable:
> 
> loop = = gatewayClient().start()
> 
> opens a reconnectingClientFactory, which opens a client protocol. How do 
> i make that client protocol global enough to use from anywhere in my app?

That's a python question. It's nothing to do with Twisted.






From yoann.aubineau at gmail.com  Mon Oct 15 08:06:17 2007
From: yoann.aubineau at gmail.com (Yoann Aubineau)
Date: Mon, 15 Oct 2007 14:06:17 +0200
Subject: [Twisted-Python] 2006, 'MySQL server has gone away'
In-Reply-To: <0E0A5677-408F-4A77-A257-C543FF70C6B0@bubblehouse.org>
References: <46F25C0E.90101@thiengineering.ch>
	<0E0A5677-408F-4A77-A257-C543FF70C6B0@bubblehouse.org>
Message-ID: <8b93c05a0710150506n241bf0edy8a37700e6bfd3e9a@mail.gmail.com>

2007/9/20, Phil Christensen <phil at bubblehouse.org>:
> On Sep 20, 2007, at 7:39 AM, Werner Thie wrote:
>
> > Hi all
> >
> > While using mySQL V 5.0.33 and MySQL-python-1.2.2 with twisted/
> > adbapi with the following connection params
> [snip snip snip]
> > I noticed (2006, 'MySQL server has gone away') errors, which seem
> > to be not recoverable from an adbapi standpoint.
> [snip snip snip]
> > Questions:
> > - are there any adverse effects in applying this patch and setting
> > reconnect: 1 in DB_ARGS?
> >
> > - is there a better, safer way to avoid this nasty error?
> >
> > Thxs, Werner
>
> I believe this is what the 'cp_reconnect' keyword argument to the
> ConnectionPool constructor does.

In case it helps:

The cp_reconnect keyword is mandatory but not sufficient for what I've
experienced. At least with MySQL server version 4.1.7, a disconnection
raises a generic OperationalError which one has to parse to know what
actually happened.

Hence the need to subclass ConnectionPool and surcharge
_runInteraction for adding the ability to retry on MySQL connection
lost. Or maybe is there a better way to do that?

---- CODE ----

import twisted.enterprise.adbapi
try:
    from MySQLdb import OperationalError
except ImportError:
    OperationalError = None

class EnhancedConnectionPool(adbapi.ConnectionPool):
    def _runInteraction(self, *args, **kwargs):
        try:
            d = abdapi.ConnectionPool._runInteraction(self, *args, **kwargs)
        except OperationalError, e:
            errormsg = str(e).lower()
            messages = (
                "lost connection to mysql server during query",
                "server has gone away"
            )
            for msg in messages:
                if msg in errormsg:
                    d = abdapi.ConnectionPool._runInteraction(self,
*args, **kwargs)
                    return d
            else:
                raise
        return d

---- / CODE ----



From me at mocisoft.com  Mon Oct 15 12:42:16 2007
From: me at mocisoft.com (markus espenhain)
Date: Mon, 15 Oct 2007 18:42:16 +0200
Subject: [Twisted-Python] trouble with missing exceptions
In-Reply-To: <20071010233736.GA16455@steerpike.home.puzzling.org>
References: <470C6CFA.5010108@mocisoft.com>
	<20071010233736.GA16455@steerpike.home.puzzling.org>
Message-ID: <47139868.4090408@mocisoft.com>

Andrew Bennetts schrieb:
> markus espenhain wrote:
>> hi
>>
>> i've written a tcp client - using a derived NetstringReceiver, a 
>> ReconnectingClientFactory and just reactor.connectTCP + reactor.run.
>>
>> the problem is that after the connection is made - every exception that 
>> occurred seems to be lost and the execution at this point discontinues - 
>> also with a try/catch block around it
>>
>> class MyProtocol(basic.NetstringReceiver):
>> 	...
>> 	def onData(self, data):
>> 		print data
>> 		try:
>> 			print 'before' # printed
>> 			raise Exception('err')
>> 		except Exception, e:
>> 			print e # nothing
>> 		print 'after' # nothing
>>
>> after print 'before' nothing more in onData happens - anyway the app 
>> runs and on new data the onData is entered again
>>
>> i poke around 2h or so and i can't remember to had this problem before 
>> ... so anybody can give me a hint or maybe something that i miss?
> 
> I'm guessing this isn't literally code you've tried to run, because that will
> always print e and 'after'.  There's nothing in Twisted that changes the way
> Python's exception handling works.
> 
> Taking a guess that by ?raise Exception('err')? you mean you call a function
> that somehow raises an exception your ?except Exception:? block fails to catch,
> perhaps try a bare ?except:?.  It might be a string exception.
> 
> Otherwise, I'd try making as minimal an example of the problem as you can that
> can reproduce the problem, and if you're still stuck, posting that to this list
> (or if it doesn't involve Twisted, comp.lang.python).  Or use ?import pdb;
> pdb.set_trace()? to insert a breakpoint and step through the code in the
> debugger.
> 
> -Andrew.
> 

hi

it was a syntax error between print 'before' and raise - a lot deeper in 
the code, which - for whatever reason - didn't pop up ... pdb helped - 
thanks

markus



From phil at bubblehouse.org  Mon Oct 15 10:46:38 2007
From: phil at bubblehouse.org (Phil Christensen)
Date: Mon, 15 Oct 2007 10:46:38 -0400
Subject: [Twisted-Python] 2006, 'MySQL server has gone away'
In-Reply-To: <8b93c05a0710150506n241bf0edy8a37700e6bfd3e9a@mail.gmail.com>
References: <46F25C0E.90101@thiengineering.ch>
	<0E0A5677-408F-4A77-A257-C543FF70C6B0@bubblehouse.org>
	<8b93c05a0710150506n241bf0edy8a37700e6bfd3e9a@mail.gmail.com>
Message-ID: <80124F0B-E5F2-4A8F-8F6F-803D4EF11B69@bubblehouse.org>


On Oct 15, 2007, at 8:06 AM, Yoann Aubineau wrote:

> 2007/9/20, Phil Christensen <phil at bubblehouse.org>:
>> On Sep 20, 2007, at 7:39 AM, Werner Thie wrote:
>>
>>> Hi all
>>>
>>> While using mySQL V 5.0.33 and MySQL-python-1.2.2 with twisted/
>>> adbapi with the following connection params
>> [snip snip snip]
>>> I noticed (2006, 'MySQL server has gone away') errors, which seem
>>> to be not recoverable from an adbapi standpoint.
>> [snip snip snip]
>>> Questions:
>>> - are there any adverse effects in applying this patch and setting
>>> reconnect: 1 in DB_ARGS?
>>>
>>> - is there a better, safer way to avoid this nasty error?
>>>
>>> Thxs, Werner
>>
>> I believe this is what the 'cp_reconnect' keyword argument to the
>> ConnectionPool constructor does.
>
> In case it helps:
>
> The cp_reconnect keyword is mandatory but not sufficient for what I've
> experienced. At least with MySQL server version 4.1.7, a disconnection
> raises a generic OperationalError which one has to parse to know what
> actually happened.
>
> Hence the need to subclass ConnectionPool and surcharge
> _runInteraction for adding the ability to retry on MySQL connection
> lost. Or maybe is there a better way to do that?

Are the lost connections you're experiencing due to server idle  
timeouts, or actual network issues? I believe Werner was referring to  
MySQL 5.0+ "security feature" that automatically closes idle  
connections after 8 hours. We discussed this a little further in this  
thread:

	http://twistedmatrix.com/pipermail/twisted-web/2007-October/003541.html

If it is an idle timeout you're running into, you might be able to  
turn it off. Apparently in older versions of MySQL it's possible to  
turn this feature off, although that depends on your take as to  
whether leaving a db connection open is a significant security risk  
or not.

> ---- CODE ----
>
> import twisted.enterprise.adbapi
> try:
>     from MySQLdb import OperationalError
> except ImportError:
>     OperationalError = None
>
> class EnhancedConnectionPool(adbapi.ConnectionPool):
>     def _runInteraction(self, *args, **kwargs):
>         try:
>             d = abdapi.ConnectionPool._runInteraction(self, *args,  
> **kwargs)
>         except OperationalError, e:
>             errormsg = str(e).lower()
>             messages = (
>                 "lost connection to mysql server during query",
>                 "server has gone away"
>             )
>             for msg in messages:
>                 if msg in errormsg:
>                     d = abdapi.ConnectionPool._runInteraction(self,
> *args, **kwargs)
>                     return d
>             else:
>                 raise
>         return d
>
> ---- / CODE ----

The only issue with this approach -- what happens if you've got more  
than one dead connection in the pool? You're still going to need code  
further up the call stack that can deal with the possibility of a  
failed query.

The other thing to consider is that the adbapi layer already detects  
broken connections in a database-agnostic fashion. If a query fails  
for any reason, a rollback occurs (if possible) and then a known good  
query ("SELECT 1") is attempted. If either of those steps fails,  
ConnectionLost is raised.

If this behavior is different for you, I'd be interested to know your  
MySQLdb version...I had some very strange issues with prior versions  
that were only fixed with 1.2.2.

Granted, your method is slightly more efficient at the expense of the  
MySQLdb dependency, but if you're going to need to detect the lost  
connections at the application level anyways, you might as well stick  
with the stock ConnectionPool.

-phil



From evert.rol at gmail.com  Mon Oct 15 15:39:26 2007
From: evert.rol at gmail.com (Evert Rol)
Date: Mon, 15 Oct 2007 20:39:26 +0100
Subject: [Twisted-Python] [newbie] server script with client functionality
Message-ID: <DFFCA097-ED53-4A29-B4D9-1FA01FAFBF9A@gmail.com>

   Hi all,

I'm trying to write a server script that can pass the received data  
on (acting as a client) to a next server.
Say, server A receives data from client B, and then acts as client A  
(while keeping in contact with client B) for server C.
I'm using it to pass data through an extra machine before reaching  
the actual machine, where the extra machine serves as a security  
measure (eg, if that gets hacked, that won't bring too may other  
things down).

I'm new to Twisted, so I'm not sure where to find information on  
this. I've been looking at creating a client at the moment that the  
server receives data (in the dataReceived() method), but then I get  
two factory.run() methods, and would also need to find a way to stop  
the client; that doesn't seem to be correct. Or perhaps using  
threads, but then I don't know how to pass the data from the server  
to client.
Best to me would to have both connections active, each on their own  
port, and when data is received, 'something' in the client part gets  
called that sends these data on.
Alternatively, I could simply call an external program with the data  
as arguments from the server script, but I'd like a all-in-one  
solution if possible. Or perhaps I'm looking at this the wrong way?  
(Although I'd prefer not to try and turn 'server C' into 'client C'.)

Any suggestions or pointers?

Thanks in advance,

   Evert




From johann.borck at densedata.com  Mon Oct 15 18:46:50 2007
From: johann.borck at densedata.com (Johann Borck)
Date: Tue, 16 Oct 2007 00:46:50 +0200
Subject: [Twisted-Python] [newbie] server script with client functionality
In-Reply-To: <DFFCA097-ED53-4A29-B4D9-1FA01FAFBF9A@gmail.com>
References: <DFFCA097-ED53-4A29-B4D9-1FA01FAFBF9A@gmail.com>
Message-ID: <4713EDDA.30600@densedata.com>

Evert Rol wrote:
>   Hi all,
>
> I'm trying to write a server script that can pass the received data on
> (acting as a client) to a next server.
> Say, server A receives data from client B, and then acts as client A
> (while keeping in contact with client B) for server C.
> I'm using it to pass data through an extra machine before reaching the
> actual machine, where the extra machine serves as a security measure
> (eg, if that gets hacked, that won't bring too may other things down).
>
> I'm new to Twisted, so I'm not sure where to find information on this. 
http://twistedmatrix.com/projects/core/documentation/howto/tutorial/client.html

> I've been looking at creating a client at the moment that the server
> receives data (in the dataReceived() method), but then I get two
> factory.run() methods
do you mean reactor.run()?  Factories usually just implement
buildProtocol, and can be used to keep references to protocols and other
stuff (see tutorial).
> , and would also need to find a way to stop the client; that doesn't
> seem to be correct. Or perhaps using threads, but then I don't know
> how to pass the data from the server to client.
you don't need threads.
> Best to me would to have both connections active, each on their own
> port, and when data is received, 'something' in the client part gets
> called that sends these data on.
> Alternatively, I could simply call an external program with the data
> as arguments from the server script, but I'd like a all-in-one
> solution if possible. Or perhaps I'm looking at this the wrong way?
> (Although I'd prefer not to try and turn 'server C' into 'client C'.)
what do you mean by  turning 'server C' into 'client C'?
>
> Any suggestions or pointers?
>
How many connections from A to C do you need? as many as for B to A?
Since you're in control of both servers it might make sense to keep some
connections open between A and C, and save some handshake-overhead.

The finger example comes close to what you need, you just have to make
serverprotocolA and clientprotocolA aware of each other.

Johann
> Thanks in advance,
>
>   Evert
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>




From dlamoris at ucla.edu  Mon Oct 15 23:40:43 2007
From: dlamoris at ucla.edu (Doris Lam)
Date: Mon, 15 Oct 2007 20:40:43 -0700
Subject: [Twisted-Python] using Twisted with postgresql
Message-ID: <471432BB.8090201@ucla.edu>

Hi,

I'm new to Twisted and is currently looking for a way to asynchronously 
do queries to a postgres database. From what I've seen it looks like 
there's a project called pgasync (http://jamwt.com/pgasync/) that does 
this, or I can use Twisted's adbapi and some other synchronous module. 
I'm wondering if anyone has used pgasync and how it compares to using 
adbapi and threads? From the pgasync site it seems the last update was 
in 2005, so I'm not sure if anyone's still maintaining it. If using 
adbapi's better, can I get some suggestions as to which postgres module 
I should use? So far I've seen pyPgSQL and psychopg that're both DB API 
2 compliant. Any help will be appreciated!

Thanks,
Doris



From screwtape at froup.com  Tue Oct 16 00:20:35 2007
From: screwtape at froup.com (Tim Allen)
Date: Tue, 16 Oct 2007 14:20:35 +1000
Subject: [Twisted-Python] using Twisted with postgresql
In-Reply-To: <471432BB.8090201@ucla.edu>
References: <471432BB.8090201@ucla.edu>
Message-ID: <2E0EB2DF-F7C1-4AFD-84E7-310941CA567D@froup.com>

On 16 Oct 2007, at 13:40, Doris Lam wrote:
> I'm new to Twisted and is currently looking for a way to  
> asynchronously do queries to a postgres database. From what I've  
> seen it looks like there's a project called pgasync (http:// 
> jamwt.com/pgasync/) that does this, or I can use Twisted's adbapi  
> and some other synchronous module. I'm wondering if anyone has used  
> pgasync and how it compares to using adbapi and threads? From the  
> pgasync site it seems the last update was in 2005, so I'm not sure  
> if anyone's still maintaining it. If using adbapi's better, can I  
> get some suggestions as to which postgres module I should use? So  
> far I've seen pyPgSQL and psychopg that're both DB API 2 compliant.  
> Any help will be appreciated!

I don't have any experience with PgAsync, but (while it's a very cool  
idea), I personally would prefer to use a database wrapper that wraps  
libpq - the standard, Postgres-supplied client library, shared with  
and debugged by nearly every other tool that talks to Postgres -  
rather than a wrapper that uses its own ground-up reimplementation.

I also don't have any experience with pyPgSQL, but I have used  
psycopg2 and been impressed with its features and performance.



From eburus at gmail.com  Tue Oct 16 02:45:09 2007
From: eburus at gmail.com (Burus Gmail)
Date: Tue, 16 Oct 2007 10:45:09 +0400
Subject: [Twisted-Python] using Twisted with postgresql
In-Reply-To: <2E0EB2DF-F7C1-4AFD-84E7-310941CA567D@froup.com>
References: <471432BB.8090201@ucla.edu>
	<2E0EB2DF-F7C1-4AFD-84E7-310941CA567D@froup.com>
Message-ID: <47145DF5.10402@gmail.com>

I'm using psycopg2 with dictionary cursor.

Create module twistedpg.py in the python path(in my variant it's
twisted's project directory)

from psycopg2 import *
from psycopg2 import _psycopg as _2psycopg
from psycopg2.extensions import connection as _2connection
from psycopg2.extras import DictCursor

del connect
def connect(*args, **kwargs):
    kwargs['connection_factory'] = connection
    return _2psycopg.connect(*args, **kwargs)

class connection(_2connection):
    def cursor(self):
    return _2connection.cursor(self, cursor_factory=DictCursor)

In a twisted's plugin i using standard ConnectionPool

master_db = ConnectionPool('twistedpg', user='pron',
                           password='xxx', host='127.0.0.1',
                           database='playboy', port=5436, cp_max=5,
                           cp_noisy=True, cp_reconnect=True)

Tim Allen wrote:
> On 16 Oct 2007, at 13:40, Doris Lam wrote:
>> I'm new to Twisted and is currently looking for a way to
>> asynchronously do queries to a postgres database. From what I've seen
>> it looks likes.here's a project called pgasync
>> (http://jamwt.com/pgasync/) that does this, or I can use Twisted's
>> adbapi and some other synchronous module. I'm wondering if anyone has
>> used pgasync and how it compares to using adbapi and threads? From
>> the pgasync site it seems the last update was in 2005, so I'm not
>> sure if anyone's still maintaining it. If using adbapi's better, can
>> I get some suggestions as to which postgres module I should use? So
>> far I've seen pyPgSQL and psychopg that're both DB API 2 compliant.
>> Any help will be appreciated!
>
> I don't have any experience with PgAsync, but (while it's a very cool
> idea), I personally would prefer to use a database wrapper that wraps
> libpq - the standard, Postgres-supplied client library, shared with
> and debugged by nearly every other tool that talks to Postgres -
> rather than a wrapper that uses its own ground-up reimplementation.
>
> I also don't have any experience with pyPgSQL, but I have used
> psycopg2 and been impressed with its features and performance.
-- 
http://fats.sourceforge.net
http://movinglights.org
http://burus.org




From manlio_perillo at libero.it  Tue Oct 16 06:07:07 2007
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Tue, 16 Oct 2007 12:07:07 +0200
Subject: [Twisted-Python] using Twisted with postgresql
In-Reply-To: <471432BB.8090201@ucla.edu>
References: <471432BB.8090201@ucla.edu>
Message-ID: <47148D4B.3050605@libero.it>

Doris Lam ha scritto:
> Hi,
> 
> I'm new to Twisted and is currently looking for a way to asynchronously 
> do queries to a postgres database. From what I've seen it looks like 
> there's a project called pgasync (http://jamwt.com/pgasync/) that does 
> this, or I can use Twisted's adbapi and some other synchronous module. 

Some time ago, I have refactored the pgasync implementation in pglib:
http://hg.mperillo.ath.cx/twisted/pglib/

It offers an API for almost all the functionality of the Posgres protocol.
The only thing missing is a connection pool manager, and support for 
prepared queries.

> I'm wondering if anyone has used pgasync and how it compares to using 
> adbapi and threads? From the pgasync site it seems the last update was 
> in 2005, so I'm not sure if anyone's still maintaining it. If using 
> adbapi's better, can I get some suggestions as to which postgres module 
> I should use? So far I've seen pyPgSQL and psychopg that're both DB API 
> 2 compliant. Any help will be appreciated!
> 

A pure asynchronous implementation has better performance, in theory, 
since you don't need to use thread locks.

Moreover, pglib can be very useful, as an example, if you want to 
"consume" each row at a time, or if you want to listen for database 
notifications.

However using libpq has many advantages.
You can also use the asynchronous interface that psycopg2 implements:
http://www.initd.org/svn/psycopg/psycopg2/trunk/doc/async.txt

However you *need* a good connection pool manager for asynchronous 
connections, and, as far as I know, no one has yet written such a thing.

I'm interested in this topic, since I'm writing a WSGI implementation 
for Nginx and it, like Twisted, is asynchronous (and *without* threads 
support):
http://hg.mperillo.ath.cx/nginx/mod_wsgi/



Regards  Manlio Perillo



From evert.rol at gmail.com  Tue Oct 16 11:43:39 2007
From: evert.rol at gmail.com (Evert Rol)
Date: Tue, 16 Oct 2007 16:43:39 +0100
Subject: [Twisted-Python] [newbie] server script with client functionality
In-Reply-To: <5201E5D8-423F-490D-B55A-D28BFABA016D@gmail.com>
References: <DFFCA097-ED53-4A29-B4D9-1FA01FAFBF9A@gmail.com>
	<4713EDDA.30600@densedata.com>
	<5201E5D8-423F-490D-B55A-D28BFABA016D@gmail.com>
Message-ID: <EE1BF4AE-D4B5-4666-8270-34D846033229@gmail.com>

   Hi Johann,

Thanks for your reply.

>> I'm new to Twisted, so I'm not sure where to find information on  
>> this.
> http://twistedmatrix.com/projects/core/documentation/howto/tutorial/ 
> client.html

I had looked at the tutorial, but admittedly not gone all the way, as  
it didn't seem to address my problem. But it looks like this part of  
the tutorial actually does.

Then again, by that time, I felt a bit daunted by the Twisted  
framework (Protocols, Services, Factories and what not, all hooked  
into each other). So I've switched back to the socket module. While  
less neat, it does have the additional advantage that when exporting  
my script to other people, I don't have to ask them to install  
Twisted as well.
But perhaps, in time, I will give Twisted another try. I'll certainly  
play with a few times more, to see if I can get the hang of it.

Anyway, thanks again,

   Evert

ps: ah yes, I did mean reactor.run(). I had already gotten somewhat  
confused with the terminology.


> Evert Rol wrote:
>>   Hi all,
>>
>> I'm trying to write a server script that can pass the received  
>> data on
>> (acting as a client) to a next server.
>> Say, server A receives data from client B, and then acts as client A
>> (while keeping in contact with client B) for server C.
>> I'm using it to pass data through an extra machine before reaching  
>> the
>> actual machine, where the extra machine serves as a security measure
>> (eg, if that gets hacked, that won't bring too may other things  
>> down).
>>
>>
>> I've been looking at creating a client at the moment that the server
>> receives data (in the dataReceived() method), but then I get two
>> factory.run() methods
> do you mean reactor.run()?  Factories usually just implement
> buildProtocol, and can be used to keep references to protocols and  
> other
> stuff (see tutorial).
>> , and would also need to find a way to stop the client; that doesn't
>> seem to be correct. Or perhaps using threads, but then I don't know
>> how to pass the data from the server to client.
> you don't need threads.
>> Best to me would to have both connections active, each on their own
>> port, and when data is received, 'something' in the client part gets
>> called that sends these data on.
>> Alternatively, I could simply call an external program with the data
>> as arguments from the server script, but I'd like a all-in-one
>> solution if possible. Or perhaps I'm looking at this the wrong way?
>> (Although I'd prefer not to try and turn 'server C' into 'client C'.)
> what do you mean by  turning 'server C' into 'client C'?
>>
>> Any suggestions or pointers?
>>
> How many connections from A to C do you need? as many as for B to A?
> Since you're in control of both servers it might make sense to keep  
> some
> connections open between A and C, and save some handshake-overhead.
>
> The finger example comes close to what you need, you just have to make
> serverprotocolA and clientprotocolA aware of each other.
>
> Johann
>> Thanks in advance,
>>
>>   Evert
>>




From anuraguniyal at yahoo.com  Thu Oct 18 08:17:13 2007
From: anuraguniyal at yahoo.com (anurag uniyal)
Date: Thu, 18 Oct 2007 05:17:13 -0700 (PDT)
Subject: [Twisted-Python] Content Encoding : gzip ?
Message-ID: <143220.20091.qm@web37314.mail.mud.yahoo.com>

Is it possible to send and recieve compressed content using twisted.web?

I have set Accept-encoding to gzip but it doesn't make any difference.
Will I have to cater for this myself?

rgds
Anurag

__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20071018/2d0e853b/attachment.htm 

From jrg718 at gmx.net  Thu Oct 18 08:41:38 2007
From: jrg718 at gmx.net (=?ISO-8859-15?Q?J=FCrgen_Strass?=)
Date: Thu, 18 Oct 2007 14:41:38 +0200
Subject: [Twisted-Python] Should I use asynchronous programming in my own
	modules?
Message-ID: <47175482.1090809@gmx.net>

Hello,

I'm rather new to twisted and asynchronous programming in general. 
Overall, I think I've understood the asynchronous programming model and 
its implications quite well. Nevertheless, there are some remaining 
questions.

To give some example, I'd like to develop my own simplified document 
format in XML and a corresponding parser. The output of the parser (a 
specialized document object model) will be traversed and translated into 
HTML afterwards. This module could be useful outside any twisted 
application, of course. Instead of generating HTML one could develop a 
generator that produces LaTeX, for example. But it could also be used to 
render HTML pages in a twisted web application. The question is this: 
since parsing and generating large documents could block the reactor in 
a twisted app, should I use any of twisted's asynchronous programming 
features in this module (for better integration with twisted) or should 
I rather develop it in a traditional way and run it in a thread?

The question came to my mind, because somewhere I read that long lasting 
operations in third party modules should be called in a thread. This is 
clear. I also read that if one has the opportunity to develop an 
application from scratch, one should rather go for using twisted's 
asynchronous programming features and divide long lasting operations 
into small chunks. In principal, this approach is clear to me, but does 
it also apply for modules which are entirely independent from twisted 
networking code? And if so, is there any way to decouple them from the 
twisted library for reuse in other applications?

The last question is what criteria I could use to divide long lasting 
operations into chunks. In almost all books about asynchronous 
programming I only read that if they're too big, they could block the 
event loop. Of course, but how big is too big? And what's the measure 
for it? Milliseconds, number of operations, number of code lines - or 
what? Doesn't it depend entirely on the application at hand and how 
reactive it has to be? Moreover, depending on the hardware used, on a 
Pentium II less chunks can be processed at the same time than on a 
Athlon 64, for example. And couldn't chunks also be too small, spending 
more time than necessary in putting them into the reactor's queue, then 
maybe sorting them and then calling them? In case the overhead involved 
in scheduling some chunk is bigger than the processing time of the chunk 
itself, the chunks are too small, aren't they?

Thanks in advance for any answers,
J?rgen




From itamar at itamarst.org  Thu Oct 18 09:09:39 2007
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 18 Oct 2007 09:09:39 -0400
Subject: [Twisted-Python] Should I use asynchronous programming in my
	own modules?
In-Reply-To: <47175482.1090809@gmx.net>
References: <47175482.1090809@gmx.net>
Message-ID: <1192712979.11206.59.camel@localhost.localdomain>

On Thu, 2007-10-18 at 14:41 +0200, J?rgen Strass wrote:

> I'm rather new to twisted and asynchronous programming in general. 
> Overall, I think I've understood the asynchronous programming model and 
> its implications quite well. Nevertheless, there are some remaining 
> questions.
> 
> To give some example, I'd like to develop my own simplified document 
> format in XML and a corresponding parser. The output of the parser (a 
> specialized document object model) will be traversed and translated into 
> HTML afterwards. This module could be useful outside any twisted 
> application, of course. Instead of generating HTML one could develop a 
> generator that produces LaTeX, for example. But it could also be used to 
> render HTML pages in a twisted web application. The question is this: 
> since parsing and generating large documents could block the reactor in 
> a twisted app, should I use any of twisted's asynchronous programming 
> features in this module (for better integration with twisted) or should 
> I rather develop it in a traditional way and run it in a thread?

What you mean by "traditional" is actually a pull parser. Parsing APIs
can be pull or push (i.e. asynchronous). Well-designed parsers are
always push, because push parsers can be trivially converted to blocking
pull parsers, but not vice-versa. Some examples of push/asynch parsers:
twisted's Protocol class, or the SAX API.

The key difference: a pull parser will *read* data from some data source
with a blocking API. A push parser gets the data *pushed* to it by the
user.

So: write a push parser. You won't need to use any Twisted facilities.
To make things a bit clearer - here's how you convert a push parser into
a pull parser:

def parse(f):
   parser = MyParser()
   for line in f:
      parser.push(line)
   return parser.result()

In Twisted, a push parser will often get data pushed to it from
Protocol.dataReceived.




From radix at twistedmatrix.com  Thu Oct 18 09:11:48 2007
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Thu, 18 Oct 2007 09:11:48 -0400
Subject: [Twisted-Python] Should I use asynchronous programming in my own
	modules?
In-Reply-To: <47175482.1090809@gmx.net>
References: <47175482.1090809@gmx.net>
Message-ID: <60ed19d40710180611t3416288dh65971bae4ac236da@mail.gmail.com>

On 10/18/07, J?rgen Strass <jrg718 at gmx.net> wrote:

> To give some example, I'd like to develop my own simplified document
> format in XML and a corresponding parser.
...
> This module could be useful outside any twisted
> application, of course.
...
> The question is this:
> since parsing and generating large documents could block the reactor in
> a twisted app, should I use any of twisted's asynchronous programming
> features in this module (for better integration with twisted) or should
> I rather develop it in a traditional way and run it in a thread?

You don't need to make the module depend on Twisted, but you also
don't need to force users to use a thread. Just make sure the library
knows how to parse and process incrementally; then your asynchronous
users can pass in chunks of data as they receive them and your other
users can pass in everything at once. Basically, it's a matter of
inverting your library's loop that would otherwise go "read; process;"
to "when process_more_data is called, process that data".


> The last question is what criteria I could use to divide long lasting
> operations into chunks. In almost all books about asynchronous
> programming I only read that if they're too big, they could block the
> event loop. Of course, but how big is too big? And what's the measure
> for it? Milliseconds, number of operations, number of code lines - or
> what? Doesn't it depend entirely on the application at hand and how
> reactive it has to be?

"Bigness" here refers to time spent. And yes, it depends on the application.


-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/

From exarkun at divmod.com  Thu Oct 18 09:31:51 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 18 Oct 2007 09:31:51 -0400
Subject: [Twisted-Python] Should I use asynchronous programming in my own
	modules?
In-Reply-To: <47175482.1090809@gmx.net>
Message-ID: <20071018133151.8162.1755919631.divmod.quotient.24657@ohm>

On Thu, 18 Oct 2007 14:41:38 +0200, J?rgen Strass <jrg718 at gmx.net> wrote:
>Hello,
>
>I'm rather new to twisted and asynchronous programming in general. Overall, 
>I think I've understood the asynchronous programming model and its 
>implications quite well. Nevertheless, there are some remaining questions.
>
>To give some example, I'd like to develop my own simplified document format 
>in XML and a corresponding parser. The output of the parser (a specialized 
>document object model) will be traversed and translated into HTML 
>afterwards. This module could be useful outside any twisted application, of 
>course. Instead of generating HTML one could develop a generator that 
>produces LaTeX, for example. But it could also be used to render HTML pages 
>in a twisted web application.

Have you seen Lore?

>The question is this: since parsing and 
>generating large documents could block the reactor in a twisted app, should 
>I use any of twisted's asynchronous programming features in this module (for 
>better integration with twisted) or should I rather develop it in a 
>traditional way and run it in a thread?

Incremental parsing is often useful and simpler than the alternative.  If
you are accepting a document over the network, why buffer it yourself and
then parse it when you could just be giving each piece directly to the
parser?  Done this way, it often is the case that even large documents can
be parsed without blocking for an unreasonable amount of time.

>
>The question came to my mind, because somewhere I read that long lasting 
>operations in third party modules should be called in a thread. This is 
>clear. I also read that if one has the opportunity to develop an application 
>from scratch, one should rather go for using twisted's asynchronous 
>programming features and divide long lasting operations into small chunks. 

The CPU differs from the network.  There are rarely points in a CPU-bound
task where suspending to work on something else would not be an arbitrary
decision.  When dealing with the network, these points are obvious and
not at all arbitrary.  So, when dealing with the network, it's almost
unarguable that you should use Twisted's APIs instead of using blocking
APIs.  However, Twisted doesn't provide any functionality specifically
for breaking up CPU-bound tasks, primarily because any such functionality
would be arbitrary.

>In principal, this approach is clear to me, but does it also apply for 
>modules which are entirely independent from twisted networking code? And if 
>so, is there any way to decouple them from the twisted library for reuse in 
>other applications?

It's typically trivial to drive code written to be used asynchronously in
a synchronous manner.  The opposite is rarely, if ever, true.  Consider a
parser API which consists of a "feed" method taking a string giving some
more bytes from the input document.  You can use this by passing in small
chunks repeatedly until the entire document has been passed in, or you can
pass in the entire document at once.  Now consider an API where the entire
document must be supplied at once: how do you use that without blocking?

>
>The last question is what criteria I could use to divide long lasting 
>operations into chunks. In almost all books about asynchronous programming I 
>only read that if they're too big, they could block the event loop. Of 
>course, but how big is too big? And what's the measure for it? Milliseconds, 
>number of operations, number of code lines - or what? Doesn't it depend 
>entirely on the application at hand and how reactive it has to be?

Yes.

>Moreover, 
>depending on the hardware used, on a Pentium II less chunks can be processed 
>at the same time than on a Athlon 64, for example.

True as well.  However, is your primary goal to provide ideal scheduling
behavior both on a CPU released this year and a CPU released ten years ago?

>And couldn't chunks also 
>be too small, spending more time than necessary in putting them into the 
>reactor's queue, then maybe sorting them and then calling them? In case the 
>overhead involved in scheduling some chunk is bigger than the processing 
>time of the chunk itself, the chunks are too small, aren't they?

Correct again.

These problems can all be mitigated, at least partially, by allowing the
application to decide how much work is done at once.  Parsing one byte from
an input document should take less time than parsing one megabyte.  Let the
application decide how much work is done at a time.  Size of input is only
one way in which this can be controlled.  You could support explicit tuning
of these parameters with a dedicated API, or you could support stepwise
processing and let the application explicitly step it as far as it wants to
at a time.  In this direction, there are some extremely primitive tools in
twisted.internet.task.  They will not solve the problem for you, but they
may give you some ideas or save you a bit of typing.

>
>Thanks in advance for any answers,
>J?rgen
>

Jean-Paul



From exarkun at divmod.com  Thu Oct 18 09:34:45 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 18 Oct 2007 09:34:45 -0400
Subject: [Twisted-Python] Content Encoding : gzip ?
In-Reply-To: <143220.20091.qm@web37314.mail.mud.yahoo.com>
Message-ID: <20071018133445.8162.1336923094.divmod.quotient.24660@ohm>

On Thu, 18 Oct 2007 05:17:13 -0700 (PDT), anurag uniyal <anuraguniyal at yahoo.com> wrote:
>Is it possible to send and recieve compressed content using twisted.web?

Not without writing some more code.  You might want to ask on the twisted-web
mailing list if anyone has written this already.

Jean-Paul



From jrg718 at gmx.net  Thu Oct 18 10:50:42 2007
From: jrg718 at gmx.net (=?ISO-8859-1?Q?J=FCrgen_Strass?=)
Date: Thu, 18 Oct 2007 16:50:42 +0200
Subject: [Twisted-Python] Should I use asynchronous programming in my
	own modules?
In-Reply-To: <1192712979.11206.59.camel@localhost.localdomain>
References: <47175482.1090809@gmx.net>
	<1192712979.11206.59.camel@localhost.localdomain>
Message-ID: <471772C2.1020107@gmx.net>

Itamar Shtull-Trauring wrote:
> [...]
> What you mean by "traditional" is actually a pull parser. Parsing APIs
> can be pull or push (i.e. asynchronous). Well-designed parsers are
> always push, because push parsers can be trivially converted to blocking
> pull parsers, but not vice-versa. Some examples of push/asynch parsers:
> twisted's Protocol class, or the SAX API.
Sorry, I think my example was somewhat misleading and it also becomes 
clear to me that I haven't used the word "asynchronous" correctly. I 
didn't consider that one can also register callbacks with a parser, for 
example, and call this type of programming asynchronous. (The principle 
"Don't call us, we call you" would apply here, too, of course.)

No, what I really meant by "traditional" was to write parsers and 
generators which traverse the document as a whole in one large step, 
without giving a chance to the twisted reactor to process any other 
events. Let's assume I got a dom tree from pythons XML parser. First, 
I'd traverse that tree and build up another tree consisting of element 
objects. Each element object is an instance of a class corresponding to 
a tag, for example for tag <chapter> I'd create a class "chapter". This 
is necessary because there's not always a one-to-one correspondence 
between tags and my document elements and to associate some additional 
attributes with such elements later, for example automatically generated 
chapter numbers. I'd then use the generator to traverse that element 
tree, calling "render_element" methods on my way. For element chapter 
with attribute title I'd call "render_chapter( node )", which then 
generates "<h1>chapter_title</h1>".

Let's assume I had some element with child elements. Without knowing 
about twisted at all, I'd have created a foreach loop to process each 
child like this:

foreach child_node in root_elem.children:
   if child_node.type = chapter:
      processChapter( child_node )

My idea now is that depending on the number of child elements, looping 
could take some time. So instead I'd use twisted's reactor, specifically 
its callLater method like this (it's only pseudo code!):

class Generator:

   def generate_html( self ):
      self.d = defer.Deferred()
      self.startProcessing()
      return self.d

   def startProcessing( self ):
      self.current_element = root_elem
      self.processNextElement()

   def processNextElement( self ):
      if more elements to process:
         if current_element.type = chapter
            reactor.callLater( 0, processChapter, current_element )
      .....
      else:
         d.callback( "finished" )

In this way any twisted user could get a Deferred from the generate_html 
method and get called when the Generator has generated all HTML. The 
problem with this is that I couldn't ever use such code without also 
installing twisted, of course.

It's more or less clear to me how to divide the traversal of such a dom 
tree into discrete steps, but it's not so clear how to call the 
processNextElement with reactor.callLater from the outside. Although, 
after I've read the other answers, it seems to me I'm not far from a 
solution. I think I could also create two classes: the Generator class, 
which would provide a processNextElement method and doesn't need to 
depend on the twisted framework, and a TwistedGenerator class, which 
would do exactly the same like the code above and repeatedly call 
processNextElement with reactor.callLater. But the internal housekeeping 
which element to process next could be more difficult than with the 
solution above, couldn't it? (Because instead of seperate methods like 
"processChapter", "processList", etc. I'd only have one method to call 
from outside, "processNextElement" (and something like 
"moreElementsToProcess"). The TwistedGenerator wrapper shouldn't know 
about the internal state of the Generator, I think.)

Many greetings,
J?rgen




From jrg718 at gmx.net  Thu Oct 18 11:05:31 2007
From: jrg718 at gmx.net (=?UTF-8?B?SsO8cmdlbiBTdHJhc3M=?=)
Date: Thu, 18 Oct 2007 17:05:31 +0200
Subject: [Twisted-Python] Should I use asynchronous programming in my
	own	modules?
In-Reply-To: <20071018133151.8162.1755919631.divmod.quotient.24657@ohm>
References: <20071018133151.8162.1755919631.divmod.quotient.24657@ohm>
Message-ID: <4717763B.70903@gmx.net>

Jean-Paul Calderone schrieb:
> On Thu, 18 Oct 2007 14:41:38 +0200, J?rgen Strass <jrg718 at gmx.net> wrote:
>>
>> To give some example, I'd like to develop my own simplified document 
>> format in XML and a corresponding parser. [...]
> Have you seen Lore?
>
Not yet. I'll have a look at it, though. I guess to some degree I'm 
reinventing the wheel, but I rather see this a an exercise.
>> The question is this: since parsing and generating large documents 
>> could block the reactor in a twisted app, should I use any of 
>> twisted's asynchronous programming features in this module (for 
>> better integration with twisted) or should I rather develop it in a 
>> traditional way and run it in a thread?
> Incremental parsing is often useful and simpler than the alternative.  If
> you are accepting a document over the network, why buffer it yourself and
> then parse it when you could just be giving each piece directly to the
> parser?  Done this way, it often is the case that even large documents 
> can
> be parsed without blocking for an unreasonable amount of time.
Okay, I agree. To get away somewhat from parsers, the question arises 
for other programming tasks as well, of course.

So I already asked myself how one would translate the example of a 
factorial function in twisted's core documentation to use the reactor's 
scheduling mechanism instead of running it in a thread. I think an 
example of how to divide it into chunks and how to use the reactor would 
be great.

What I tried at first was programming a simple counter this way. It 
would look much similar to the code I presented in reply to Itamar 
Shtull-Trauring's answer. What I'm not sure about is if this is the 
correct way to go for.

Many thanks for all the other points you've answered, it made a lot of 
things much clearer to me.

J?rgen




From tdickenson at geminidataloggers.com  Thu Oct 18 13:49:21 2007
From: tdickenson at geminidataloggers.com (Toby Dickenson)
Date: Thu, 18 Oct 2007 18:49:21 +0100
Subject: [Twisted-Python] Re: Should I use asynchronous programming in my
	own modules?
References: <47175482.1090809@gmx.net>
	<1192712979.11206.59.camel@localhost.localdomain>
	<471772C2.1020107@gmx.net>
Message-ID: <ff86b2$epg$1@ger.gmane.org>

J?rgen Strass wrote:

> My idea now is that depending on the number of child elements, looping
> could take some time. So instead I'd use twisted's reactor, specifically
> its callLater method like this (it's only pseudo code!):
> 
> class Generator:
> 
>    def generate_html( self ):
>       self.d = defer.Deferred()
>       self.startProcessing()
>       return self.d
> 
>    def startProcessing( self ):
>       self.current_element = root_elem
>       self.processNextElement()
> 
>    def processNextElement( self ):
>       if more elements to process:
>          if current_element.type = chapter
>             reactor.callLater( 0, processChapter, current_element )
>       .....
>       else:
>          d.callback( "finished" )

This is not so good. You have taken away your users option to control which
thread this processing is performed in, because it has to run in the
reactor's thread to avoid breaking Deferred's threading rules. Also your
users are not getting any benefit from the incremental nature of this code.
For example they cant get access to the first chunk of html until after
callback("finished"). At least, not without more complexity. They cant
decide to stop processing early because they were only interested in the
html <head>.

> It's more or less clear to me how to divide the traversal of such a dom
> tree into discrete steps

It seems like you are confusing this goal - the ability to perform work in
incremental steps - with the use of twisted's reactor to schedule those
steps.

Set twisted aside for a moment. I propose one good pythonic interface to
your html creation code may be a generate_html_iter() method, which returns
an iterator over the documents html fragments. You can implement this using
the processNextElement approach you suggested, although python generator
functions may be more convenient.


A thin wrapper around this iterator could use reactor.callLater to schedule
it, then fire a callback when complete. An equally thin wrapper could use
PostMessage to calculate the document in the background of a win32 gui. Or
it could feed a pull producer.  Alternatively it could be run in another
thread with deferToThread(lambda:''.join(g.generate_html_iter()))

I hope this helps,





From jrg718 at gmx.net  Thu Oct 18 14:04:13 2007
From: jrg718 at gmx.net (=?ISO-8859-15?Q?J=FCrgen_Strass?=)
Date: Thu, 18 Oct 2007 20:04:13 +0200
Subject: [Twisted-Python] Should I use asynchronous programming in my
	own	modules?
In-Reply-To: <60ed19d40710180611t3416288dh65971bae4ac236da@mail.gmail.com>
References: <47175482.1090809@gmx.net>
	<60ed19d40710180611t3416288dh65971bae4ac236da@mail.gmail.com>
Message-ID: <4717A01D.8040909@gmx.net>

Christopher Armstrong wrote:
> You don't need to make the module depend on Twisted, but you also
> don't need to force users to use a thread. Just make sure the library
> knows how to parse and process incrementally; then your asynchronous
> users can pass in chunks of data as they receive them and your other
> users can pass in everything at once. Basically, it's a matter of
> inverting your library's loop that would otherwise go "read; process;"
> to "when process_more_data is called, process that data".
>   
As I already explained in my replies to Jean-Paul Calderone and Itamar 
Shtull-Trauring, I'm not sure if I have fully understood how this works 
in particular. The example of a parser probably wasn't well chosen, 
because in all replies to my original posting people seem to assume that 
I need to do something in response to an external event (e.g. I/O 
events). Please, better think of a long running CPU bound algorithm 
perhaps. From twisted, I'd like to start that algorithm in the 
background and get notified when it has finished. It shouldn't ever 
block the application for too long. In other applications, I'd like to 
call the algorithm in a synchronous way.

It is most likely that my difficulty in understanding results from the 
fact that in such a case there is no external event that could trigger 
the processing of the individual steps the algorithm has. The best I've 
come up with so far uses a wrapper around a synchronous interface that 
provides methods for calling the next step of the algorithm and for 
testing if the algorithm has finished. What I'd like to know is if this 
solution basically is the style one has to use when writing algorithms 
divided into chunks and if the approach to integrate it into twisted is 
well chosen. Also, I don't fully understand the implications this 
programming style has on long running loops. I have the impression that 
I would need to divide loops into several methods: loopInit, 
loopCondition, loopNextStep and loopFinished. Is this correct?

Following is my code for a counter class which also uses the wrapper 
class I've described above. Using the wrapper class, it is possibly to 
run several counters concurrently. The Counter class is already 
decoupled from twisted. In case I want to use the synchronous version, 
I'd use Counter, in case I want to use the asynchronous version with 
deferreds, I'd use TwistedCounter.

----

from twisted.internet import reactor, defer

class Counter:
   def __init__( self, id, limit ):
      self.id = id
      self.limit = limit
      self.count = 0
   def limitNotReached( self ):
      return self.count < self.limit
   def increment( self ):
      if self.limitNotReached():
         print "Counter %d: %d" % ( self.id, self.count )
         self.count = self.count + 1
   def run( self ):
      while self.limitNotReached():
         self.increment()
        
class TwistedCounter:
   def __init__( self, counter ):
      self.counter = counter
   def run( self ):
      self.d = defer.Deferred()
      self.increment()
      return self.d
   def increment( self ):
      if self.counter.limitNotReached():
         self.counter.increment()
         reactor.callLater( 0, self.increment )
      else:
         self.d.callback( "finished" )
        
def counters_finished( result ):
   print "  traditional counters finished."
   reactor.stop()

print "-- Run traditional counter:\n"

traditional_c = Counter( 1, 130 )
traditional_c.run()

print "\n-- Run twisted counters concurrently:\n"

c1 = TwistedCounter( Counter( 2, 100 ) )
c2 = TwistedCounter( Counter( 3, 150 ) )
d1 = c1.run()
d2 = c2.run()
d = defer.DeferredList( [ d1, d2 ] )
d.addCallback( counters_finished )

reactor.run()

----

What I can't fully imagine is if I can use this technique in all 
possible cases. In case I need to nest calls or algorithms, I'll run 
into the problem of not being able to call any of the asynchronous 
wrappers from the synchronous parts of my library, because those 
wrappers return deferreds which are part of twisted. So I'd end up with 
two versions of my library again.

J?rgen





From jrg718 at gmx.net  Thu Oct 18 14:22:11 2007
From: jrg718 at gmx.net (=?UTF-8?B?SsO8cmdlbiBTdHJhc3M=?=)
Date: Thu, 18 Oct 2007 20:22:11 +0200
Subject: [Twisted-Python] Re: Should I use asynchronous programming in
	my	own modules?
In-Reply-To: <ff86b2$epg$1@ger.gmane.org>
References: <47175482.1090809@gmx.net>	<1192712979.11206.59.camel@localhost.localdomain>	<471772C2.1020107@gmx.net>
	<ff86b2$epg$1@ger.gmane.org>
Message-ID: <4717A453.6020605@gmx.net>

Toby Dickenson wrote:
> [...]
>   
> Set twisted aside for a moment. I propose one good pythonic interface to
> your html creation code may be a generate_html_iter() method, which returns
> an iterator over the documents html fragments. You can implement this using
> the processNextElement approach you suggested, although python generator
> functions may be more convenient.
>
> A thin wrapper around this iterator could use reactor.callLater to schedule
> it, then fire a callback when complete. An equally thin wrapper could use
> PostMessage to calculate the document in the background of a win32 gui. Or
> it could feed a pull producer.  Alternatively it could be run in another
> thread with deferToThread(lambda:''.join(g.generate_html_iter()))
>
> I hope this helps,
>
>   
Some seconds before I read your message I've posted my reply to 
Christopher Armstrong. This message contains some code of mine that 
already uses some sort of wrapper class. Though it doesn't use an 
iterator and maybe isn't as pythonic, it wraps a synchronous interface. 
Not sure if this is similar to the thin wrapper you had in mind?

Thank you very much,
J?rgen




From db3l.net at gmail.com  Thu Oct 18 15:32:21 2007
From: db3l.net at gmail.com (David Bolen)
Date: Thu, 18 Oct 2007 15:32:21 -0400
Subject: [Twisted-Python] Re: Content Encoding : gzip ?
References: <143220.20091.qm@web37314.mail.mud.yahoo.com>
Message-ID: <m2ejfsmd6i.fsf@valheru.db3l.homeip.net>

anurag uniyal <anuraguniyal at yahoo.com> writes:

> Is it possible to send and recieve compressed content using twisted.web?
>
> I have set Accept-encoding to gzip but it doesn't make any difference.
> Will I have to cater for this myself?

Yes, in twisted.web.  In twisted.web2, there's a filter that supports it.

Here's a small wrapper class I wrote recently that I've used to handle
this in twisted.web, with the goal of minimal changes to existing
resource code.  I use it by noticing, in the original request handler,
the ability to handle gzip encodings, and then wrap the original
request in this class (since there's no built-in filtering of the
output stream in twisted.web).

It's worked fine in my tests to date, and in limited production use,
but to be honest it hasn't seen large scale, long term use because my
original use case only yielded ~15% compression (multimedia files) and
using this negates the ability to know the full length in advance,
thus clients can't give projected download times.  (My files are large
enough that compressing twice is high overhead, and it wouldn't play
well with the wrapper approach anyway).

In any event, hopefully it'll be a useful starting point for you.

Here's the wrapper:

          - - - - - - - - - - - - - - - - - - - - - - - - -

import struct
import zlib

class GzipRequest(object):
    """Wrapper for a request that applies a gzip content encoding"""

    def __init__(self, request, compressLevel=6):
        self.request = request
        self.request.setHeader('Content-Encoding', 'gzip')
        # Borrowed from twisted.web2 gzip filter
        self.compress = zlib.compressobj(compressLevel, zlib.DEFLATED,
                                         -zlib.MAX_WBITS, zlib.DEF_MEM_LEVEL,0)

    def __getattr__(self, attr):
        if 'request' in self.__dict__:
            return getattr(self.request, attr)
        else:
            raise AttributeError, attr

    def __setattr__(self, attr, value):
        if 'request' in self.__dict__:
            return setattr(self.request, attr, value)
        else:
            self.__dict__[attr] = value

    def write(self, data):
        if not self.request.startedWriting:
            self.crc = zlib.crc32('')
            self.size = self.csize = 0
            # XXX: Zap any length for now since we don't know final size
            if 'content-length' in self.request.headers:
                del self.request.headers['content-length']
            # Borrow header information from twisted.web2 gzip filter
            self.request.write('\037\213\010\000' '\0\0\0\0' '\002\377')

        self.crc = zlib.crc32(data, self.crc)
        self.size += len(data)
        cdata = self.compress.compress(data)
        self.csize += len(cdata)
        if cdata:
            self.request.write(cdata)
        elif self.request.producer:
            # Simulate another pull even though it hasn't really made it
            # out to the consumer yet.
            self.request.producer.resumeProducing()

    def finish(self):
        remain = self.compress.flush()
        self.csize += len(remain)
        if remain:
            self.request.write(remain)
        self.request.write(struct.pack('<LL',
                                       self.crc & 0xFFFFFFFFL,
                                       self.size & 0xFFFFFFFFL))
        self.request.finish()

          - - - - - - - - - - - - - - - - - - - - - - - - -

and here's a sample of using it.  This code is from one of my Resource
objects - if I were to use it more generally in my site I'd extract that
into a mix-in class of some sort - currently there was only one specific
resource (the multimedia files) I wanted to support it for:

    def render_GET(self, request):

        # (... argument validation ...)
        
        accept_encoding = request.getHeader('accept-encoding')
        if accept_encoding:
            encodings = accept_encoding.split(',')
            for encoding in encodings:
                name = encoding.split(';')[0].strip()
                if name == 'gzip':
                    request = GzipRequest(request)
                    break

        # At this point, use 'request' as normal


-- David




From johann.borck at densedata.com  Thu Oct 18 18:29:57 2007
From: johann.borck at densedata.com (Johann Borck)
Date: Fri, 19 Oct 2007 00:29:57 +0200
Subject: [Twisted-Python] Should I use asynchronous programming in my
	own	modules?
In-Reply-To: <4717763B.70903@gmx.net>
References: <20071018133151.8162.1755919631.divmod.quotient.24657@ohm>
	<4717763B.70903@gmx.net>
Message-ID: <4717DE65.200@densedata.com>

J?rgen Strass wrote:
> [..]
>
> So I already asked myself how one would translate the example of a
> factorial function in twisted's core documentation to use the
> reactor's scheduling mechanism instead of running it in a thread. I
> think an example of how to divide it into chunks and how to use the
> reactor would be great.
>
Hi,
ok, as I understand you are *not* talking about "accepting documents
over the network" or similar, but rather about independent, long
running, CPU-bound tasks. While you could split them up into chunks
allowing the reactor to do it's work, there are a number of arguments
against doing so. If you don't need intermediate results, and don't
feed your engine incrementally with more data, the way to go is
neither 'chunking' nor using threads, but rather using
worker-processes, because pythons threads are only well-suited for
IO-bound stuff, that cannot be done asynchronously (e.g. if you have
to use some blocking db-interface because there's no alternative
asynchronous implementation) and function calls in python are
expensive. If you split up the work to do it in the reactor-thread,
and it requires heavy processing, there will be many unnecessary calls
switching between the reactor and your engine. If you instead have a
tight loop (or whatever) in a different process, those calls would be
saved, and on a multi-core or multi-processor system you could use its
additional processing power. So use IPC to communicate with worker(s),
and let them spit out the result as fast as possible, instead of
unnecessarily slowing down both your calculation and the networking
part without the option to parallelize processing.

The decisive aspect is interactivity - if you need it for your
processing 'chunking' it up is the way to go, if not, use another
process. If you don't really need to process events, but still want to
do some kind of streaming the decision is not that easy. If you need
parallel processing anyway you have no choice but to use some kind of
IPC. The safe bet is probably designing your code to be able to be
processed in chunks, and then to run it in a separate process.

I think the main misunderstanding is "[..]to use the reactor's
scheduling mechanism instead of running it in a thread."  Twisteds
reactor is not a superior multi-purpose scheduler (as JP mentioned),
but a domain-specific event handler for networking. While your
use-case might (that's my guess) profit from choosing 'chunking' over
pythons threading, it still wouldn't from choosing it over the
scheduling of your OS.

hm, did I get you right there?

Johann

> What I tried at first was programming a simple counter this way. It
> would look much similar to the code I presented in reply to Itamar
> Shtull-Trauring's answer. What I'm not sure about is if this is the
> correct way to go for.
>
> Many thanks for all the other points you've answered, it made a lot
> of things much clearer to me.
>
> J?rgen
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>





From bernat at luffy.cx  Fri Oct 19 01:14:55 2007
From: bernat at luffy.cx (Vincent Bernat)
Date: Fri, 19 Oct 2007 07:14:55 +0200
Subject: [Twisted-Python] Swapping a set of deferreds to diskOrganization:
	One Piece
Message-ID: <m3ejfr1y9c.fsf@neo.luffy.cx>

Hi !

I have  a function which returns a  deferred but will take  many time to
really  process an  item.  This  function  will be  feed with  a lot  of
items. For example,  the function could be called  1000 times per second
and will take  30 minutes to really process each  item. However, I don't
know the delay. The function could also process the items in real time.

When  the function  takes 30  minutes to  really process  the  item, the
reactor   will  keep   a  lot   of  deferreds   and  huge   portions  of
memory.  Therefore, I  would  like to  store  myself those  items (in  a
database for example)  and wait the function to be  ready to process all
the items (because the function knows when it will be ready).

I could store  the items directly in the database  and asks the function
an unique deferred  whose callback will be handled  when the function is
ready to process  my items. But since, the function  could be a function
that process  items in real  time (and more  faster than a  database), I
would like to use this "fallback" method only if the reactor has already
a  lot of deferred  for this  function. Ideally,  in this  case, current
deferred should be converted to database.

In short, I  would like to be able to  store/flush deferreds in database
when I have a  lot of them and keep them in memory if  I have only a few
of them.

For example,  a naive implementation  could be to implement  subclass of
Deferred and each Deferred instance can store itself to disk if a lot of
instances of  this subclass already exists.  This is not  exactly what I
want since I need a mechanism that will also flush all instances to disk
instead of  keeping them  in memory.  So an instance  should be  able to
replace a lot  of instances and recreate them  when the function becomes
ready.

Does such  a thing  already exists?  If it helps,  I can  guarantee that
function will process items in FIFO order.

Thanks.
-- 
I WILL NOT AIM FOR THE HEAD
I WILL NOT AIM FOR THE HEAD
I WILL NOT AIM FOR THE HEAD
-+- Bart Simpson on chalkboard in episode 8F13



From anuraguniyal at yahoo.com  Fri Oct 19 01:40:04 2007
From: anuraguniyal at yahoo.com (anurag uniyal)
Date: Thu, 18 Oct 2007 22:40:04 -0700 (PDT)
Subject: [Twisted-Python] Re: Content Encoding : gzip ?
Message-ID: <403326.95639.qm@web37314.mail.mud.yahoo.com>

Thanks.

So it seems I have to write my own code, there in nothing like I can set some flag.

So if that is the case shouldn't I just be gzipping and unzipping data write and read to request object.

rgds
anurag


----- Original Message ----
From: David Bolen <db3l.net at gmail.com>
To: twisted-python at twistedmatrix.com
Sent: Friday, October 19, 2007 1:02:21 AM
Subject: [Twisted-Python] Re: Content Encoding : gzip ?


anurag uniyal <anuraguniyal at yahoo.com> writes:

> Is it possible to send and recieve compressed content using twisted.web?
>
> I have set Accept-encoding to gzip but it doesn't make any difference.
> Will I have to cater for this myself?

Yes, in twisted.web.  In twisted.web2, there's a filter that supports it.

Here's a small wrapper class I wrote recently that I've used to handle
this in twisted.web, with the goal of minimal changes to existing
resource code.  I use it by noticing, in the original request handler,
the ability to handle gzip encodings, and then wrap the original
request in this class (since there's no built-in filtering of the
output stream in twisted.web).

It's worked fine in my tests to date, and in limited production use,
but to be honest it hasn't seen large scale, long term use because my
original use case only yielded ~15% compression (multimedia files) and
using this negates the ability to know the full length in advance,
thus clients can't give projected download times.  (My files are large
enough that compressing twice is high overhead, and it wouldn't play
well with the wrapper approach anyway).

In any event, hopefully it'll be a useful starting point for you.

Here's the wrapper:

          - - - - - - - - - - - - - - - - - - - - - - - - -

import struct
import zlib

class GzipRequest(object):
    """Wrapper for a request that applies a gzip content encoding"""

    def __init__(self, request, compressLevel=6):
        self.request = request
        self.request.setHeader('Content-Encoding', 'gzip')
        # Borrowed from twisted.web2 gzip filter
        self.compress = zlib.compressobj(compressLevel, zlib.DEFLATED,
                                         -zlib.MAX_WBITS, zlib.DEF_MEM_LEVEL,0)

    def __getattr__(self, attr):
        if 'request' in self.__dict__:
            return getattr(self.request, attr)
        else:
            raise AttributeError, attr

    def __setattr__(self, attr, value):
        if 'request' in self.__dict__:
            return setattr(self.request, attr, value)
        else:
            self.__dict__[attr] = value

    def write(self, data):
        if not self.request.startedWriting:
            self.crc = zlib.crc32('')
            self.size = self.csize = 0
            # XXX: Zap any length for now since we don't know final size
            if 'content-length' in self.request.headers:
                del self.request.headers['content-length']
            # Borrow header information from twisted.web2 gzip filter
            self.request.write('\037\213\010\000' '\0\0\0\0' '\002\377')

        self.crc = zlib.crc32(data, self.crc)
        self.size += len(data)
        cdata = self.compress.compress(data)
        self.csize += len(cdata)
        if cdata:
            self.request.write(cdata)
        elif self.request.producer:
            # Simulate another pull even though it hasn't really made it
            # out to the consumer yet.
            self.request.producer.resumeProducing()

    def finish(self):
        remain = self.compress.flush()
        self.csize += len(remain)
        if remain:
            self.request.write(remain)
        self.request.write(struct.pack('<LL',
                                       self.crc & 0xFFFFFFFFL,
                                       self.size & 0xFFFFFFFFL))
        self.request.finish()

          - - - - - - - - - - - - - - - - - - - - - - - - -

and here's a sample of using it.  This code is from one of my Resource
objects - if I were to use it more generally in my site I'd extract that
into a mix-in class of some sort - currently there was only one specific
resource (the multimedia files) I wanted to support it for:

    def render_GET(self, request):

        # (... argument validation ...)
        
        accept_encoding = request.getHeader('accept-encoding')
        if accept_encoding:
            encodings = accept_encoding.split(',')
            for encoding in encodings:
                name = encoding.split(';')[0].strip()
                if name == 'gzip':
                    request = GzipRequest(request)
                    break

        # At this point, use 'request' as normal


-- David


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20071018/0b7a197b/attachment.htm 

From jrg718 at gmx.net  Fri Oct 19 04:32:59 2007
From: jrg718 at gmx.net (=?UTF-8?B?SsO8cmdlbiBTdHJhc3M=?=)
Date: Fri, 19 Oct 2007 10:32:59 +0200
Subject: [Twisted-Python] Should I use asynchronous programming in my
	own modules?
In-Reply-To: <4717DE65.200@densedata.com>
References: <20071018133151.8162.1755919631.divmod.quotient.24657@ohm>	<4717763B.70903@gmx.net>
	<4717DE65.200@densedata.com>
Message-ID: <47186BBB.1080302@gmx.net>

Johann Borck schrieb:
> [...]
> I think the main misunderstanding is "[..]to use the reactor's
> scheduling mechanism instead of running it in a thread."  Twisteds
> reactor is not a superior multi-purpose scheduler (as JP mentioned),
> but a domain-specific event handler for networking. While your
> use-case might (that's my guess) profit from choosing 'chunking' over
> pythons threading, it still wouldn't from choosing it over the
> scheduling of your OS.
>
> hm, did I get you right there?
>
>   
Oh yes, you're right. The whole time I thought of the reactor as a 
multi-purpose scheduler and didn't get JP's answer right. The 
misunderstanding in part results from the core documentation. In chapter 
1.3, it is said: "This document will give you a high level overview of 
concurrent programming (interleaving several tasks) and of Twisted's 
concurrency model: non-blocking code or asynchronous code." Then, two 
examples follow: (1) CPU bound tasks and (2) tasks that wait for data. 
Because I thought the introduction applied to both type of examples, I 
also assumed that Twisted's concurrency model would apply for both types 
of tasks. Of course, I already wondered about not being able to find any 
examples for (1), while the whole rest of the docs deals with (2). ;-)

Moreover, I once read Douglas Schmidt's book "Pattern Oriented Software 
Architecture (2)", which describes several patterns - including the 
reactor pattern - for middleware-oriented applications. The book led to 
some confusion on mine about when to use which pattern and what 
concurrency mechanism would be best for a particular situation.

The - maybe wrong - conclusion I've drawn from that book is that context 
switching overhead (be it threads or processes) isn't only bad for I/O 
bound tasks, but also for most other concurrent tasks. As you said,  
function calls in python are expensive, nevertheless I thought they were 
less expensive than the overhead caused by context switching between 
threads and processes, at least on a single processor system. Or have I 
made a mistake here? Moreover, couldn't the creation of whole new 
processes be even more expensive? I mean, with "long" running algorithms 
I really meant tasks that could take some minutes. Processes would be 
very fine here. But what about - for example - CPU bound tasks that only 
take some hundred milliseconds, but nevertheless would block the 
reactor? Would you use processes in this case, too? Maybe prespawned 
processes? Or should I use rather threads in such a case?

Many thanks for your enlighting reply,
J?rgen




From db3l.net at gmail.com  Fri Oct 19 15:00:18 2007
From: db3l.net at gmail.com (David Bolen)
Date: Fri, 19 Oct 2007 15:00:18 -0400
Subject: [Twisted-Python] Re: Content Encoding : gzip ?
References: <403326.95639.qm@web37314.mail.mud.yahoo.com>
Message-ID: <m2abqflykd.fsf@valheru.db3l.homeip.net>

anurag uniyal <anuraguniyal at yahoo.com> writes:

> Thanks.
>
> So it seems I have to write my own code, there in nothing like I can set some flag.

Not in twisted.web, no.

> So if that is the case shouldn't I just be gzipping and unzipping data write and read to request object.

Right - after all, that's really all my wrapper does (for the
output/write case).  If your application structure lends itself to
processing the encoding more inline with your normal processing,
that's perfectly acceptable too.

You'll still end up having to implement two paths (one for gzip and
one for not) to support clients who don't accept the encoding, so
you'll still probably find it smarter to extract out the compression
for re-use.

In my case, I wanted to support naive, existing Resource
implementations, making the gzip encoding operation a separable
activity to the response data generation, so I went with the wrapper
approach.

-- David




From bmccann at andmore.com  Fri Oct 19 16:13:20 2007
From: bmccann at andmore.com (McCann, Brian)
Date: Fri, 19 Oct 2007 16:13:20 -0400
Subject: [Twisted-Python] Need some help with my first Twisted program
Message-ID: <A272EB3E7DECD641A6A8854D6137872501598599@diopside.andmore.com>

I'm looking for what is probably an simple solution I can't figure out
on my own.  I'm writing an SSH server based on the example on the web
(using conch).  I'm trying to figure out how to detect when the client
exists (for example, when I just close out PuTTY), but I can't get this
to work right.  Looking through the API docs I found "connectionLost()",
which I put in my protocol class (EchoProtocol in the example), but it's
never getting called.

Can someone please tell me what I'm doing wrong?

Thanks,
--Brian



From exarkun at divmod.com  Fri Oct 19 16:29:01 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 19 Oct 2007 16:29:01 -0400
Subject: [Twisted-Python] Need some help with my first Twisted program
In-Reply-To: <A272EB3E7DECD641A6A8854D6137872501598599@diopside.andmore.com>
Message-ID: <20071019202901.8162.884577123.divmod.quotient.25278@ohm>

On Fri, 19 Oct 2007 16:13:20 -0400, "McCann, Brian" <bmccann at andmore.com> wrote:
>I'm looking for what is probably an simple solution I can't figure out
>on my own.  I'm writing an SSH server based on the example on the web
>(using conch).  I'm trying to figure out how to detect when the client
>exists (for example, when I just close out PuTTY), but I can't get this
>to work right.  Looking through the API docs I found "connectionLost()",
>which I put in my protocol class (EchoProtocol in the example), but it's
>never getting called.
>
>Can someone please tell me what I'm doing wrong?

You seem to be on the right track.  However, you haven't supplied enough
details for anyone to be sure why it isn't behaving as you expect.  If you
can post a minimal example of a program which you think should be working
(ie, giving you connection lost notification) but isn't, then someone can
probably point you to a solution.

Jean-Paul



From bmccann at andmore.com  Fri Oct 19 16:53:00 2007
From: bmccann at andmore.com (McCann, Brian)
Date: Fri, 19 Oct 2007 16:53:00 -0400
Subject: [Twisted-Python] Need some help with my first Twisted program
Message-ID: <A272EB3E7DECD641A6A8854D613787250159859C@diopside.andmore.com>

 

> -----Original Message-----
> From: twisted-python-bounces at twistedmatrix.com 
> [mailto:twisted-python-bounces at twistedmatrix.com] On Behalf 
> Of Jean-Paul Calderone
> Sent: Friday, October 19, 2007 4:29 PM
> To: Twisted general discussion
> Subject: Re: [Twisted-Python] Need some help with my first 
> Twisted program
> 
> On Fri, 19 Oct 2007 16:13:20 -0400, "McCann, Brian" 
> <bmccann at andmore.com> wrote:
> >I'm looking for what is probably an simple solution I can't 
> figure out
> >on my own.  I'm writing an SSH server based on the example on the web
> >(using conch).  I'm trying to figure out how to detect when 
> the client
> >exists (for example, when I just close out PuTTY), but I 
> can't get this
> >to work right.  Looking through the API docs I found 
> "connectionLost()",
> >which I put in my protocol class (EchoProtocol in the 
> example), but it's
> >never getting called.
> >
> >Can someone please tell me what I'm doing wrong?
> 
> You seem to be on the right track.  However, you haven't 
> supplied enough
> details for anyone to be sure why it isn't behaving as you 
> expect.  If you
> can post a minimal example of a program which you think 
> should be working
> (ie, giving you connection lost notification) but isn't, then 
> someone can
> probably point you to a solution.
> 
> Jean-Paul
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 

Sorry about that.  Here is most of what is involved.  (Code below)  I
would think that when I close my PuTTY window, the connectionLost
function in the EchoProtocol would be called...but clearly I'm missing
some crucial step.

--Brian

from twisted.cred import portal, checkers
from twisted.conch import error, avatar
from twisted.conch.checkers import SSHPublicKeyDatabase
from twisted.conch.ssh import factory, userauth, connection, keys,
session
from twisted.internet import reactor, protocol, defer
from twisted.python import log
from zope.interface import implements
import sys
import socket
import threading

log.startLogging(sys.stderr)

"""Example of running another protocol over an SSH channel.
log in with username "user" and password "password".
"""
class defaultdict(dict):
    def __init__(self, default=None):
        dict.__init__(self)
        self.default = default
    def __getitem__(self, key):
        try:
            return dict.__getitem__(self, key)
        except KeyError:
            return self.default


class ExampleAvatar(avatar.ConchUser):

    def __init__(self, username):
        avatar.ConchUser.__init__(self)
        self.username = username
        self.channelLookup.update({'session':session.SSHSession})

class ExampleRealm:
    implements(portal.IRealm)

    def requestAvatar(self, avatarId, mind, *interfaces):
        return interfaces[0], ExampleAvatar(avatarId), lambda: None

class EchoProtocol(protocol.Protocol):
    """this is our example protocol that we will run over SSH
    """
    def connectionMade(self):
        self.transport.write("Connected!\r\n")
        self.commandBuffer = ""

    def connectionLost(self,reason):
        print "lost:%s" %reason
        self.serialServerSocket.close()
        self.alive = False
        self.serialSocketReadThread.join()
                
        
publicKey = 'ssh-rsa
AAAAB3NzaC1yc2EAAAABIwAAAGEArzJx8OYOnJmzf4tfBEvLi8DVPrJ3/c9k2I/Az64fxjHf
9imyRJbixtQhlH9lfNjUIx+4LmrJH5QNRsFporcHDKOTwTTYLh5KmRpslkYHRivcJSkbh/C+
BR3utDS555mV'

privateKey = """-----BEGIN RSA PRIVATE KEY-----
MIIByAIBAAJhAK8ycfDmDpyZs3+LXwRLy4vA1T6yd/3PZNiPwM+uH8Yx3/YpskSW
4sbUIZR/ZXzY1CMfuC5qyR+UDUbBaaK3Bwyjk8E02C4eSpkabJZGB0Yr3CUpG4fw
vgUd7rQ0ueeZlQIBIwJgbh+1VZfr7WftK5lu7MHtqE1S1vPWZQYE3+VUn8yJADyb
Z4fsZaCrzW9lkIqXkE3GIY+ojdhZhkO1gbG0118sIgphwSWKRxK0mvh6ERxKqIt1
xJEJO74EykXZV4oNJ8sjAjEA3J9r2ZghVhGN6V8DnQrTk24Td0E8hU8AcP0FVP+8
PQm/g/aXf2QQkQT+omdHVEJrAjEAy0pL0EBH6EVS98evDCBtQw22OZT52qXlAwZ2
gyTriKFVoqjeEjt3SZKKqXHSApP/AjBLpF99zcJJZRq2abgYlf9lv1chkrWqDHUu
DZttmYJeEfiFBBavVYIF1dOlZT0G8jMCMBc7sOSZodFnAiryP+Qg9otSBjJ3bQML
pSTqy7c3a2AScC/YyOwkDaICHnnD3XyjMwIxALRzl0tQEKMXs6hH8ToUdlLROCrP
EhQ0wahUTCk1gKA4uPD6TMTChavbh4K63OvbKg==
-----END RSA PRIVATE KEY-----"""


class InMemoryPublicKeyChecker(SSHPublicKeyDatabase):

    def checkKey(self, credentials):
        return credentials.username == 'user' and \
            keys.getPublicKeyString(data=publicKey) == credentials.blob

class ExampleSession:
    
    def __init__(self, avatar):
        """
        We don't use it, but the adapter is passed the avatar as its
first
        argument.
        """

    def getPty(self, term, windowSize, attrs):
        pass
    
    def execCommand(self, proto, cmd):
        raise Exception("no executing commands")

    def openShell(self, trans):
        ep = EchoProtocol()
        ep.makeConnection(trans)
        trans.makeConnection(session.wrapProtocol(ep))

    def eofReceived(self):
        pass

    def closed(self):
        pass

from twisted.python import components
components.registerAdapter(ExampleSession, ExampleAvatar,
session.ISession)

class ExampleFactory(factory.SSHFactory):
    publicKeys = {
        'ssh-rsa': keys.getPublicKeyString(data=publicKey)
    }
    privateKeys = {
        'ssh-rsa': keys.getPrivateKeyObject(data=privateKey)
    }
    services = {
        'ssh-userauth': userauth.SSHUserAuthServer,
        'ssh-connection': connection.SSHConnection
    }
    

portal = portal.Portal(ExampleRealm())
passwdDB = checkers.InMemoryUsernamePasswordDatabaseDontUse()
passwdDB.addUser('user', 'password')
portal.registerChecker(passwdDB)
portal.registerChecker(InMemoryPublicKeyChecker())
ExampleFactory.portal = portal


if __name__ == '__main__':
    reactor.listenTCP(5022, ExampleFactory())
    reactor.run()



From exarkun at divmod.com  Fri Oct 19 17:07:26 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 19 Oct 2007 17:07:26 -0400
Subject: [Twisted-Python] Need some help with my first Twisted program
In-Reply-To: <A272EB3E7DECD641A6A8854D613787250159859C@diopside.andmore.com>
Message-ID: <20071019210726.8162.695165362.divmod.quotient.25302@ohm>

On Fri, 19 Oct 2007 16:53:00 -0400, "McCann, Brian" <bmccann at andmore.com> wrote:
>
> [snip]
>
>    def openShell(self, trans):
>        ep = EchoProtocol()
>        ep.makeConnection(trans)
>        trans.makeConnection(session.wrapProtocol(ep))
>
>    def eofReceived(self):
>        pass
>
>    def closed(self):
>        pass
>

Here, you implemented connection set up, invoking makeConnection on
the protocol you instantiated.  However, you didn't do anything similar
for connectionLost.  You may want to keep a list of the protocol
instances openShell creates and give them disconnection notification
in closed (which is being called in this example).

Jean-Paul



From exarkun at twistedmatrix.com  Sun Oct 21 00:05:03 2007
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 21 Oct 2007 04:05:03 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1192939503.37.407067601@twistedmatrix.com

Bug summary
______________________
Summary for 2007-10-14 through 2007-10-21
Bugs opened: 4    Bugs closed: 1  Total open bugs: 1043 (+3)

|== Type Changes   |== Priority Changes   |== Component Changes   
|Defect:       +2  |Highest:  -1          |Core:   +3             
|Enhancement:  +1  |Normal:   +3          |Names:  +1             
                   |Lowest:   +1          |Web2:   -1             


New / Reopened Bugs
______________________
                    ===== Normal =====
[#2850] getHostByName Error when DNS Server return Name Server (opened by wangminghua)
    defect          names      http://twistedmatrix.com/trac/ticket/2850

[#2851] No hooks in NetstringReceiver to catch parse errors. (opened by jml)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2851

[#2853] findFailure result is used exclusively, ignoring new traceback (opened by Peaker)
    defect          core       http://twistedmatrix.com/trac/ticket/2853

                    ===== Lowest =====
[#2852] spawnProcess doc glitch (opened by alanfranzoni)
    defect          core       http://twistedmatrix.com/trac/ticket/2852



Closed Bugs
______________________
                    ===== Highest =====
[#2304] t.web2.client.http.HTTPClientChannelRequest.connectionLost does nothing (opened by ghazel, closed by therve, fixed)
    defect          web2       http://twistedmatrix.com/trac/ticket/2304



Ticket Lifetime Stats
______________________
Oldest open ticket - [#38] Should be a way to create documentation aliases (since 2003-07-12 16:08:03).
Newest open ticket - [#2853] findFailure result is used exclusively, ignoring new traceback (since 2007-10-17 22:04:16).

Mean open ticket age: 544 days, 17:31:29.430966.
Median: 446 days, 3:59:09.191273.
Standard deviation: 404 days, 0:42:51.794059.
Interquartile range: 505 days, 3:59:29.

Mean time between ticket creation and ticket resolution: 122 days, 16:37:43.001128.
Median: 14 days, 16:22:15.
Standard deviation is 226 days, 21:33:13.531588.
The interquartile range is 130 days, 2:23:34.

Mean time spent in review: 68 days, 20:15:20.554302.
Median: 4 days, 9:08:37.
Standard deviation: 151 days, 9:40:09.422509.
Interquartile range: 31 days, 18:40:54.

Mean number of times a ticket is reviewed: 1.96567505721.
Median: 1
Standard deviation: 1.61407221677.
Interquartile range: 1.


Contributor Stats
______________________
In the last 4 weeks,
    12 unique ticket reporters
    7 unique ticket reviewers
    2 unique ticket resolvers
In the last 24 weeks,
    69 unique ticket reporters
    16 unique ticket reviewers
    13 unique ticket resolvers
In the last 48 weeks,
    152 unique ticket reporters
    18 unique ticket reviewers
    25 unique ticket resolvers




From brown at esteem.com  Sun Oct 21 20:34:34 2007
From: brown at esteem.com (Tom Brown)
Date: Sun, 21 Oct 2007 17:34:34 -0700
Subject: [Twisted-Python] reading serial port asynchronously
Message-ID: <1193013275.28874.48.camel@brown.esteem.com>

Hi,

I have an application that reads characters off the serial port in a
thread. The problem is, the entire application will hang sometimes. I
believe it is a threading problem, but I can't pinpoint why the
application hangs. So, I'd like to get away from threads and thought
Twisted may help me.

I was told Twisted has the ability to interface with serial ports. I
don't know where to look for the information on how to do this. Any
ideas on where to start looking or pointers on how to accomplish this?

Thanks,
Tom




From exarkun at divmod.com  Sun Oct 21 20:42:32 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 21 Oct 2007 20:42:32 -0400
Subject: [Twisted-Python] reading serial port asynchronously
In-Reply-To: <1193013275.28874.48.camel@brown.esteem.com>
Message-ID: <20071022004232.8162.1420799979.divmod.quotient.26123@ohm>

On Sun, 21 Oct 2007 17:34:34 -0700, Tom Brown <brown at esteem.com> wrote:
>Hi,
>
>I have an application that reads characters off the serial port in a
>thread. The problem is, the entire application will hang sometimes. I
>believe it is a threading problem, but I can't pinpoint why the
>application hangs. So, I'd like to get away from threads and thought
>Twisted may help me.
>
>I was told Twisted has the ability to interface with serial ports. I
>don't know where to look for the information on how to do this. Any
>ideas on where to start looking or pointers on how to accomplish this?
>

Take a look at the mouseman example:

http://twistedmatrix.com/trac/browser/trunk/doc/core/examples/mouse.py

>Thanks,
>Tom
>
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From brown at esteem.com  Mon Oct 22 18:25:48 2007
From: brown at esteem.com (Tom Brown)
Date: Mon, 22 Oct 2007 15:25:48 -0700
Subject: [Twisted-Python] reading serial port asynchronously
In-Reply-To: <20071022004232.8162.1420799979.divmod.quotient.26123@ohm>
References: <20071022004232.8162.1420799979.divmod.quotient.26123@ohm>
Message-ID: <1193091948.28874.76.camel@brown.esteem.com>

On Sun, 2007-10-21 at 20:42 -0400, Jean-Paul Calderone wrote:
> Take a look at the mouseman example:
> 
> http://twistedmatrix.com/trac/browser/trunk/doc/core/examples/mouse.py

That got me off to the right start. Thank you!
Tom





From phil at bubblehouse.org  Mon Oct 22 23:42:42 2007
From: phil at bubblehouse.org (Phil Christensen)
Date: Mon, 22 Oct 2007 23:42:42 -0400
Subject: [Twisted-Python] CFReactor redux
Message-ID: <7CC82F01-AF6A-4A72-9716-AB3BB4F28A7A@bubblehouse.org>

It's been awhile since this was brought up on the mailing list, but  
I'd like to see if anyone has any real interest in using Twisted with  
Cocoa on Mac OS X.

It was suggested to me that one thing that was needed was a reactor  
based on ThreadedSelectReactor that would integrate with the Cocoa  
runtime. I've posted my results here:

	http://twistedmatrix.com/trac/ticket/1833

This class is extremely trivial, but it makes working with PyObjC/ 
Twisted apps a bit more straightforward.

However, there are significant issues with the entire TSR approach.  
The primary one is that it's impossible to do any Trial testing,  
because as far as I can tell, it is impossible to make the  
CFReactor's run() method return without terminating the entire process.

I have a couple questions for the group, namely:

1.) Does anyone with a better grasp of Cocoa/PyObjC development have  
any ideas on how a suitable reactor might be implemented?

2.) Is there any way to run the unit tests without restarting the  
reactor between each test? I'm sure this would cause many tests to  
fail, but at least we'd be able to see if there was any other major  
issues. I'm not suggesting any changes be made to trial. I'm just  
looking for any possible way to run the tests manually.

3.) Will anyone use this? I know the core devs are generally  
uninterested in supporting a Cocoa reactor, but I'm glad to maintain  
this if it would be used.

-phil



From roland.hedberg at adm.umu.se  Wed Oct 24 01:57:14 2007
From: roland.hedberg at adm.umu.se (Roland Hedberg)
Date: Wed, 24 Oct 2007 07:57:14 +0200
Subject: [Twisted-Python] Twistd problem with redirection
Message-ID: <471EDEBA.5020600@adm.umu.se>

Hi!

I've encountered a strange problem which I'd like to have some help with.

I'm building some software using Twisted and have encountered the
following problem.

I use twistd 2.5.0 and starts the server using:

twistd pyom --logfile=x.log ...

Now, the tap file that is run by twistd loads and initiates modules
dependent on the configuration. And these modules might load other modules.

So, what happens is that, depending (looks like it) on how complex the
setup is, the redirect of stdout output for print to the logfile is not
universally done.

Consistent but depending on the configuration, the output from print for
one of modules continues to go to stdout instead of to the logfile.

Anyone got a clue as to what is happening and what I can do about it ?

-- Roland




From yoann.aubineau at gmail.com  Wed Oct 24 04:49:27 2007
From: yoann.aubineau at gmail.com (Yoann Aubineau)
Date: Wed, 24 Oct 2007 10:49:27 +0200
Subject: [Twisted-Python] CFReactor redux
In-Reply-To: <7CC82F01-AF6A-4A72-9716-AB3BB4F28A7A@bubblehouse.org>
References: <7CC82F01-AF6A-4A72-9716-AB3BB4F28A7A@bubblehouse.org>
Message-ID: <8b93c05a0710240149k5a1ed459rd0718f49368eb51d@mail.gmail.com>

2007/10/23, Phil Christensen <phil at bubblehouse.org>:
> It's been awhile since this was brought up on the mailing list, but
> I'd like to see if anyone has any real interest in using Twisted with
> Cocoa on Mac OS X.

(snip)

> 3.) Will anyone use this? I know the core devs are generally
> uninterested in supporting a Cocoa reactor, but I'm glad to maintain
> this if it would be used.

+1
AFAIAC, I don't actually need a Cocoa reactor *right now*, but I know
for sure that if it exists I might use it in the next few months. And
it's probably true for a lot of other Twisted users : they won't
use/need a Cocoa reactor until it exists. You know, as often happens,
offer creates demand. So, if you're willing to maintain such a peace
of software, please do ! :)



From ben at artins.org  Wed Oct 24 05:26:16 2007
From: ben at artins.org (Ben Artin)
Date: Wed, 24 Oct 2007 05:26:16 -0400
Subject: [Twisted-Python] CFReactor redux
In-Reply-To: <7CC82F01-AF6A-4A72-9716-AB3BB4F28A7A@bubblehouse.org>
References: <7CC82F01-AF6A-4A72-9716-AB3BB4F28A7A@bubblehouse.org>
Message-ID: <03CB022E-6DEF-466F-85A0-F13949CA2F83@artins.org>

> It was suggested to me that one thing that was needed was a reactor  
> based on ThreadedSelectReactor that would integrate with the Cocoa  
> runtime.

Didn't Bob Ippolito already do this? <http://bob.pythonmac.org/ 
archives/2005/04/17/twisted-and-foreign-event-loops/>

--

<http://artins.org/ben>

"Clue meter is reading zero." -- Alice





From p.mayers at imperial.ac.uk  Wed Oct 24 05:43:44 2007
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 24 Oct 2007 10:43:44 +0100
Subject: [Twisted-Python] Twistd problem with redirection
In-Reply-To: <471EDEBA.5020600@adm.umu.se>
References: <471EDEBA.5020600@adm.umu.se>
Message-ID: <1193219024.4310.12.camel@localhost.localdomain>

On Wed, 2007-10-24 at 07:57 +0200, Roland Hedberg wrote:
> Hi!
> 
> I've encountered a strange problem which I'd like to have some help with.
> 
> I'm building some software using Twisted and have encountered the
> following problem.
> 
> I use twistd 2.5.0 and starts the server using:
> 
> twistd pyom --logfile=x.log ...
> 
> Now, the tap file that is run by twistd loads and initiates modules
> dependent on the configuration. And these modules might load other modules.
> 
> So, what happens is that, depending (looks like it) on how complex the
> setup is, the redirect of stdout output for print to the logfile is not
> universally done.

I've never seen that.

> 
> Consistent but depending on the configuration, the output from print for
> one of modules continues to go to stdout instead of to the logfile.

Can you produce a minimal example showing the effect?

> 
> Anyone got a clue as to what is happening and what I can do about it ?


sed -i -e 's/print \(.*\)/log.msg(\1)/g' *.py

i.e. don't use "print" for logging.

> 
> -- Roland
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From phil at bubblehouse.org  Wed Oct 24 08:03:54 2007
From: phil at bubblehouse.org (Phil Christensen)
Date: Wed, 24 Oct 2007 08:03:54 -0400
Subject: [Twisted-Python] CFReactor redux
In-Reply-To: <03CB022E-6DEF-466F-85A0-F13949CA2F83@artins.org>
References: <7CC82F01-AF6A-4A72-9716-AB3BB4F28A7A@bubblehouse.org>
	<03CB022E-6DEF-466F-85A0-F13949CA2F83@artins.org>
Message-ID: <4F26B93A-D326-4AE6-B818-A5AB7A3850B3@bubblehouse.org>

On Oct 24, 2007, at 5:26 AM, Ben Artin wrote:

>> It was suggested to me that one thing that was needed was a  
>> reactor based on ThreadedSelectReactor that would integrate with  
>> the Cocoa runtime.
>
> Didn't Bob Ippolito already do this? <http://bob.pythonmac.org/ 
> archives/2005/04/17/twisted-and-foreign-event-loops/>

Yeah, essentially, but it's complicated.

That post refers to TSR, which is almost, but not quite, a complete  
reactor. That's why it's been moved to _threadedselectreactor.py.

As I understand it, TSR is intended to be the foundation for any  
reactor that needs to integrate with a foreign event loop. The  
wxreactor is a TSR subclass that wraps up the wx-specific details  
into a convenience class.

cfreactor2 was meant to be like this, but it suffers from the same  
issue wxreactor does, in that the reactor cannot be stopped and  
restarted. Technically, reactors aren't supposed to support this, but  
Trial requires the functionality for testing.

-phil



From roland.hedberg at adm.umu.se  Wed Oct 24 09:26:17 2007
From: roland.hedberg at adm.umu.se (Roland Hedberg)
Date: Wed, 24 Oct 2007 15:26:17 +0200
Subject: [Twisted-Python] Twistd problem with redirection
In-Reply-To: <1193219024.4310.12.camel@localhost.localdomain>
References: <471EDEBA.5020600@adm.umu.se>
	<1193219024.4310.12.camel@localhost.localdomain>
Message-ID: <471F47F9.4050802@adm.umu.se>

Phil Mayers wrote:
> On Wed, 2007-10-24 at 07:57 +0200, Roland Hedberg wrote:
>> Consistent but depending on the configuration, the output from print for
>> one of modules continues to go to stdout instead of to the logfile.
> 
> Can you produce a minimal example showing the effect?

I can try, but ...

>> Anyone got a clue as to what is happening and what I can do about it ?
> 
> sed -i -e 's/print \(.*\)/log.msg(\1)/g' *.py
> 
> i.e. don't use "print" for logging.

Doing this modification the problem went away.

Thanks Phil!

-- Roland



From vijay.the.schemer at gmail.com  Fri Oct 26 04:44:55 2007
From: vijay.the.schemer at gmail.com (Vijay Mathew)
Date: Fri, 26 Oct 2007 14:14:55 +0530
Subject: [Twisted-Python] Using reactor to connect to multiple servers
Message-ID: <9c57dec20710260144h2ffe21c5i66137e9be534aacf@mail.gmail.com>

Hi all,

I am in the process of writing a http client using twisted.
I want it to connect to multiple http servers and download more than one
page asynchronously, without using threads.
How can I use the reactor object to connect to multiple servers and download
data like this?

thanks,

--Vijay
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20071026/66af6bc2/attachment.htm 

From andrew-twisted at puzzling.org  Fri Oct 26 05:06:23 2007
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 26 Oct 2007 19:06:23 +1000
Subject: [Twisted-Python] Using reactor to connect to multiple servers
In-Reply-To: <9c57dec20710260144h2ffe21c5i66137e9be534aacf@mail.gmail.com>
References: <9c57dec20710260144h2ffe21c5i66137e9be534aacf@mail.gmail.com>
Message-ID: <20071026090623.GA16260@steerpike.home.puzzling.org>

Vijay Mathew wrote:
> Hi all,
> 
> I am in the process of writing a http client using twisted.
> I want it to connect to multiple http servers and download more than one page
> asynchronously, without using threads.
> How can I use the reactor object to connect to multiple servers and download
> data like this?

Just call getPage (or reactor.connectTCP or whatever) multiple times, without
waiting for the first one to complete.

E.g. here's a toy example:

    from twisted.internet import reactor
    from twisted.web.client import getPage

    def gotPageCallback(page):
        print "got a page!"
    
    getPage('http://example.com/page1').addCallback(gotPageCallback)
    getPage('http://example.com/page2').addCallback(gotPageCallback)

    reactor.run()

The key thing to realise is that Twisted APIs like getPage are asynchronous:
they return immediately, before the operation they perform has completed (or
even begun, sometimes).  So doing things like calling getPage twice in a row
like that means you are getting two pages at the same time.

-Andrew.




From bmccann at andmore.com  Fri Oct 26 11:41:50 2007
From: bmccann at andmore.com (McCann, Brian)
Date: Fri, 26 Oct 2007 11:41:50 -0400
Subject: [Twisted-Python] Need some help with my first Twisted program
Message-ID: <A272EB3E7DECD641A6A8854D613787250159860E@diopside.andmore.com>

> -----Original Message-----
> From: twisted-python-bounces at twistedmatrix.com 
> [mailto:twisted-python-bounces at twistedmatrix.com] On Behalf 
> Of Jean-Paul Calderone
> Sent: Friday, October 19, 2007 5:07 PM
> To: Twisted general discussion
> Subject: RE: [Twisted-Python] Need some help with my first 
> Twisted program
> 
> On Fri, 19 Oct 2007 16:53:00 -0400, "McCann, Brian" 
> <bmccann at andmore.com> wrote:
> >
> > [snip]
> >
> >    def openShell(self, trans):
> >        ep = EchoProtocol()
> >        ep.makeConnection(trans)
> >        trans.makeConnection(session.wrapProtocol(ep))
> >
> >    def eofReceived(self):
> >        pass
> >
> >    def closed(self):
> >        pass
> >
> 
> Here, you implemented connection set up, invoking makeConnection on
> the protocol you instantiated.  However, you didn't do 
> anything similar
> for connectionLost.  You may want to keep a list of the protocol
> instances openShell creates and give them disconnection notification
> in closed (which is being called in this example).
> 
> Jean-Paul
> 

I'm trying various things to do what you suggest, but the Twisted API
docs are hard for me to follow sometimes.

I tried making "eofReceived" and "closed" just print a debug line (after
calling my "connectionLost function didn't appear to do anything), and
neither appeared to fire when I closed the ssh client.  I tried looking
up other examples I could possibly follow on the net, but came up only
with the same examples that are on the Twisted site.  I can't even
figure out where "trans" comes from or what it is :( .

Could you point me in the direction of a better example?  I assumed that
I could find what I needed if I dug hard enough in the API docs, but I
just kept reaching dead ends.

Thanks for all your help!
--Brian



From exarkun at divmod.com  Fri Oct 26 14:05:18 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 26 Oct 2007 14:05:18 -0400
Subject: [Twisted-Python] Need some help with my first Twisted program
In-Reply-To: <A272EB3E7DECD641A6A8854D613787250159860E@diopside.andmore.com>
Message-ID: <20071026180518.8162.1425354008.divmod.quotient.28033@ohm>

On Fri, 26 Oct 2007 11:41:50 -0400, "McCann, Brian" <bmccann at andmore.com> wrote:
>
> [snip]
>
>Could you point me in the direction of a better example?  I assumed that
>I could find what I needed if I dug hard enough in the API docs, but I
>just kept reaching dead ends.

The API docs are nice (in places), but nothing really beats diving into the
source itself.  There are some areas of Twisted which use obscure techniques
to achieve a goal, but for the most part the code isn't too hard to follow
(and this is improving all the time).  If I had the code in front of me again
I could probably tell you the particular path I traced up from your code into
conch to find a point where it was clear that the "closed" method is what you
want to override, but I don't at the moment - but that's all I did, looked at
the source, figured out what was called by what, step by step until I found
the feature you were interested in.  Now, I've used conch before, and maybe
even this feature of it, but I didn't consciously remember the answer until
I saw it in the code again this time.  Previous experience might have guided
me a bit in the right direction, but not much beyond that.

I might be able to provide some more specific guidance if you're still not
finding what you need, but probably not until sometime next week.

Jean-Paul



From bmccann at andmore.com  Fri Oct 26 17:34:17 2007
From: bmccann at andmore.com (McCann, Brian)
Date: Fri, 26 Oct 2007 17:34:17 -0400
Subject: [Twisted-Python] Need some help with my first Twisted program
Message-ID: <A272EB3E7DECD641A6A8854D613787250159861C@diopside.andmore.com>


> -----Original Message-----
> From: twisted-python-bounces at twistedmatrix.com 
> [mailto:twisted-python-bounces at twistedmatrix.com] On Behalf 
> Of Jean-Paul Calderone
> Sent: Friday, October 26, 2007 2:05 PM
> To: Twisted general discussion
> Subject: RE: [Twisted-Python] Need some help with my first 
> Twisted program
> 
> On Fri, 26 Oct 2007 11:41:50 -0400, "McCann, Brian" 
> <bmccann at andmore.com> wrote:
> >
> > [snip]
> >
> >Could you point me in the direction of a better example?  I 
> assumed that
> >I could find what I needed if I dug hard enough in the API 
> docs, but I
> >just kept reaching dead ends.
> 
> The API docs are nice (in places), but nothing really beats 
> diving into the
> source itself.  There are some areas of Twisted which use 
> obscure techniques
> to achieve a goal, but for the most part the code isn't too 
> hard to follow
> (and this is improving all the time).  If I had the code in 
> front of me again
> I could probably tell you the particular path I traced up 
> from your code into
> conch to find a point where it was clear that the "closed" 
> method is what you
> want to override, but I don't at the moment - but that's all 
> I did, looked at
> the source, figured out what was called by what, step by step 
> until I found
> the feature you were interested in.  Now, I've used conch 
> before, and maybe
> even this feature of it, but I didn't consciously remember 
> the answer until
> I saw it in the code again this time.  Previous experience 
> might have guided
> me a bit in the right direction, but not much beyond that.
> 
> I might be able to provide some more specific guidance if 
> you're still not
> finding what you need, but probably not until sometime next week.
> 
> Jean-Paul
> 

Thanks, I'll start cracking open the source and let you know how I make
out.

--Brian




From brown at esteem.com  Fri Oct 26 18:42:39 2007
From: brown at esteem.com (Tom Brown)
Date: Fri, 26 Oct 2007 15:42:39 -0700
Subject: [Twisted-Python] asyncronous access to serial ports under windows
Message-ID: <1193438559.28874.226.camel@brown.esteem.com>

Hi,

I've been able to create an application in Linux that reads/writes
multiple serial ports asyncronously. The setup code that does this looks
like this:

...
from twisted.internet.qtreactor import install
a = QApplication(argv)
install(a)
from twisted.internet import reactor
from twisted.internet.serialport import SerialPort
...
  ports, badPorts = getGoodPorts()
  if not ports:
    exit(1)
  data = ConfigData(join(sep, 'etc', 'qa.conf'))
  dbInfo = copy(data['qadata'])
  getLogin(dbInfo)
  w = MainWindow(data, dbInfo, ports)
  w.show()
  reactor.addSystemEventTrigger('after', 'shutdown', a.quit)
  a.connect(a, SIGNAL('lastWindowClosed()'), reactor.stop)
  for portObj in w.portObjs:
    SerialPort(portObj.scanner, portObj.port, reactor, baudrate=38400)
    portObj.sendLine()
  reactor.run()

Where the portObj.scanner is an instance of a descendent of Protocol.
Like I said, the above code works under Linux. Then I tried porting this
to Windows. The first problem I came across is that the qtreactor.py
would not work. I had to subclass QTReactor from Win32Reactor. It runs
without errors. However, I am not reading anything off of the serial
port. I can see the lights blink on the port when the portObj.sendLine()
is called, so I believe I am writing to it ok and data is coming back.
The data is just not read by the application. I think it must have
something to do with the SerialPort instance not getting an even that
data is ready. I suspect this is a Windows issue in that Windows is not
signaling an event when data is ready to read on the serial port.

Does anybody have any experience with this? Is there a work around? Am I
doing something wrong?

Thanks,
Tom




From Benjamin.Rutt at gs.com  Fri Oct 26 18:56:10 2007
From: Benjamin.Rutt at gs.com (Rutt, Benjamin)
Date: Fri, 26 Oct 2007 18:56:10 -0400
Subject: [Twisted-Python] IPushProducer - medium volume streaming
Message-ID: <C8853DE689283B47B5D348BC33E06193084229B5@gsmbnmp04es.firmwide.corp.gs.com>

I've got an IPushProducer written with these 3 methods and it works fine
- i.e. resumeProducing() is called, then eventually pauseProducing is
called() when the producer produces data too fast; when the client
disconnects early, the stopProducing method is called, etc..

  def pauseProducing(self):

  def resumeProducing(self):

  def stopProducing(self):

My problem is, the source of the data (a slow non-relational database)
that I send back to the client from within resumeProducing generates
data kind of slowly.  As in, it is quite rare that pauseProducing is
ever called in my tests.  I feel that the data source generates data too
slowly, and have figured out I will block the entire server during the
resumeProducing operation (for example, during the first call to
resumeProducing, I do not generate any data at all for the first 20
seconds during bootstrapping).

At this point, I am thinking about the following ideas of code changes
to prevent blockage of the server:

1) forking off a thread so that I will not block other clients from
talking to the server.  I will not have very many clients using this
producer, so this would not result in any large numbers of threads which
I know can be a problem.  I know how to spawn Python threads and use
socket APIs, but it is not clear to me how I would get at the socket
descriptor from within the twisted framework (I am using a LineReceiver
subclass, which in this case is spawning the IPushProducer).  Are there
any examples of spawning off a thread from a LineReceiver class and
communicating using blocking calls within said thread?

2) returning from resumeProducing after a few seconds of production,
even though I could produce more, so I do not block the server.  I have
tested this, it works, and does let other clients get in, but I still
feel it is suboptimal, since my data source is so slow, it still blocks
the server during each of those few second intervals.

Any recommendations here?  Thank you.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20071026/15c6fead/attachment.htm 

From radix at twistedmatrix.com  Fri Oct 26 19:19:02 2007
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 26 Oct 2007 19:19:02 -0400
Subject: [Twisted-Python] IPushProducer - medium volume streaming
In-Reply-To: <C8853DE689283B47B5D348BC33E06193084229B5@gsmbnmp04es.firmwide.corp.gs.com>
References: <C8853DE689283B47B5D348BC33E06193084229B5@gsmbnmp04es.firmwide.corp.gs.com>
Message-ID: <60ed19d40710261619s7314787ay9bbffc297535d047@mail.gmail.com>

On 10/26/07, Rutt, Benjamin <Benjamin.Rutt at gs.com> wrote:
> 1) forking off a thread so that I will not block other clients from talking
> to the server.

If this is a SQL database with which you're using a dbapi module, you
should probably be using twisted.enterprise.adbapi to make access to
that database asynchronous. Under the hood it's using threads to make
the interface asynchronous. Otherwise, if the only programmatic
interface this database of yours has is blocking, then you'll probably
need to use a thread yourself. See
twisted.internet.threads.deferToThread.

-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From brown at esteem.com  Fri Oct 26 23:10:53 2007
From: brown at esteem.com (Tom Brown)
Date: Fri, 26 Oct 2007 20:10:53 -0700
Subject: [Twisted-Python] asyncronous access to serial ports under windows
In-Reply-To: <1193438559.28874.226.camel@brown.esteem.com>
References: <1193438559.28874.226.camel@brown.esteem.com>
Message-ID: <1193454653.28874.234.camel@brown.esteem.com>

On Fri, 2007-10-26 at 15:42 -0700, Tom Brown wrote:
> Hi,
> 
> I've been able to create an application in Linux that reads/writes
> multiple serial ports asyncronously. The setup code that does this looks
> like this:
> 
> ...
> from twisted.internet.qtreactor import install
> a = QApplication(argv)
> install(a)
> from twisted.internet import reactor
> from twisted.internet.serialport import SerialPort
> ...
>   ports, badPorts = getGoodPorts()
>   if not ports:
>     exit(1)
>   data = ConfigData(join(sep, 'etc', 'qa.conf'))
>   dbInfo = copy(data['qadata'])
>   getLogin(dbInfo)
>   w = MainWindow(data, dbInfo, ports)
>   w.show()
>   reactor.addSystemEventTrigger('after', 'shutdown', a.quit)
>   a.connect(a, SIGNAL('lastWindowClosed()'), reactor.stop)
>   for portObj in w.portObjs:
>     SerialPort(portObj.scanner, portObj.port, reactor, baudrate=38400)
>     portObj.sendLine()
>   reactor.run()
> 
> Where the portObj.scanner is an instance of a descendent of Protocol.
> Like I said, the above code works under Linux. Then I tried porting this
> to Windows. The first problem I came across is that the qtreactor.py
> would not work. I had to subclass QTReactor from Win32Reactor. It runs
> without errors. However, I am not reading anything off of the serial
> port. I can see the lights blink on the port when the portObj.sendLine()
> is called, so I believe I am writing to it ok and data is coming back.
> The data is just not read by the application. I think it must have
> something to do with the SerialPort instance not getting an even that
> data is ready. I suspect this is a Windows issue in that Windows is not
> signaling an event when data is ready to read on the serial port.
> 
> Does anybody have any experience with this? Is there a work around? Am I
> doing something wrong?

Well, I found out that it has something to do with the qtreactor. If I
use just a Win32Reactor, it will read/write the serial port just fine. I
played around with writing to the serial port using
scanner.transport.write('\n') and found that
Win32Reactor.doWaitForMultipleEvents() is called when a Win32Reactor is
used. It is not called when a QTReactor(Win32Reactor) is used. The
question is why is this the case?

Thanks,
Tom




From exarkun at twistedmatrix.com  Sun Oct 28 00:05:03 2007
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 28 Oct 2007 04:05:03 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1193544303.58.1052669774@twistedmatrix.com

Bug summary
______________________
Summary for 2007-10-21 through 2007-10-28
Bugs opened: 4    Bugs closed: 10  Total open bugs: 1037 (-6)

|== Type Changes   |== Priority Changes   |== Component Changes   
|Defect:       -3  |Highest:  -2          |Core:   -5             
|Enhancement:  -2  |High:     +1          |Ftp:    +1             
                   |Normal:   -4          |Trial:  +0             
                                          |Web:    -1             


New / Reopened Bugs
______________________
                    ===== Highest =====
[#2855] Add tests for ftp.IFTPShell (opened by therve)
    enhancement     ftp        http://twistedmatrix.com/trac/ticket/2855

[#2856] trial verbose color reporter should colorize final "PASSED" and "FAILED" message (opened by exarkun) (CLOSED, fixed)
    enhancement     trial      http://twistedmatrix.com/trac/ticket/2856

[#2766] test_sslverify uses deprecated function log.flushErrors (opened by therve)
    defect          core       http://twistedmatrix.com/trac/ticket/2766

                    ===== High =====
[#2854] Reactor claims not be running although reactor.run() has been called (opened by htj)
    defect          core       http://twistedmatrix.com/trac/ticket/2854



Closed Bugs
______________________
                    ===== Highest =====
[#2767] test_ident uses deprecated function log.flushErrors (opened by therve, closed by therve, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/2767

[#2685] factor secure random implementation (opened by antoine, closed by therve, fixed)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2685

[#2766] test_sslverify uses deprecated function log.flushErrors (opened by therve, closed by therve, )
    defect          core       http://twistedmatrix.com/trac/ticket/2766

[#1220] Should the coding standard mention PEP8 (opened by hypatia, closed by therve, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1220

[#2856] trial verbose color reporter should colorize final "PASSED" and "FAILED" message (opened by exarkun, closed by therve, fixed)
    enhancement     trial      http://twistedmatrix.com/trac/ticket/2856

[#2643] twisted.python.modules does not account for memory/disk inconsistencies when scanning packages (opened by glyph, closed by therve, fixed)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2643

                    ===== Normal =====
[#1909] [PATCH] add content encoding support to xmlrpc (opened by pythonguy, closed by exarkun, invalid)
    enhancement     web        http://twistedmatrix.com/trac/ticket/1909

[#2642] Circular reference in tcp.BaseClient (opened by mircea, closed by therve, wontfix)
    defect          core       http://twistedmatrix.com/trac/ticket/2642

[#2727] plugin howto refers to "getPlugin" instead of "getPlugins" (opened by exarkun, closed by therve, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/2727

[#2692] before-shutdown triggers are fired multiple times (opened by yaubi, closed by therve, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/2692



Ticket Lifetime Stats
______________________
Oldest open ticket - [#38] Should be a way to create documentation aliases (since 2003-07-12 16:08:03).
Newest open ticket - [#2855] Add tests for ftp.IFTPShell (since 2007-10-23 05:25:55).

Mean open ticket age: 552 days, 22:31:27.885002.
Median: 453 days, 13:26:47.401878.
Standard deviation: 404 days, 14:59:20.224490.
Interquartile range: 504 days, 20:17:18.

Mean time between ticket creation and ticket resolution: 123 days, 5:12:33.030303.
Median: 15 days, 1:19:40.
Standard deviation is 226 days, 23:50:09.969125.
The interquartile range is 131 days, 17:01:58.

Mean time spent in review: 69 days, 7:13:09.122129.
Median: 4 days, 9:08:37.
Standard deviation: 153 days, 1:45:54.575417.
Interquartile range: 31 days, 18:48:10.

Mean number of times a ticket is reviewed: 1.98177676538.
Median: 1
Standard deviation: 1.63103040096.
Interquartile range: 1.


Contributor Stats
______________________
In the last 4 weeks,
    12 unique ticket reporters
    7 unique ticket reviewers
    2 unique ticket resolvers
In the last 24 weeks,
    67 unique ticket reporters
    16 unique ticket reviewers
    13 unique ticket resolvers
In the last 48 weeks,
    151 unique ticket reporters
    18 unique ticket reviewers
    25 unique ticket resolvers




From Benjamin.Rutt at gs.com  Sun Oct 28 09:42:00 2007
From: Benjamin.Rutt at gs.com (Rutt, Benjamin)
Date: Sun, 28 Oct 2007 09:42:00 -0400
Subject: [Twisted-Python] IPushProducer - medium volume streaming
In-Reply-To: <60ed19d40710261619s7314787ay9bbffc297535d047@mail.gmail.com>
References: <C8853DE689283B47B5D348BC33E06193084229B5@gsmbnmp04es.firmwide.corp.gs.com>
	<60ed19d40710261619s7314787ay9bbffc297535d047@mail.gmail.com>
Message-ID: <C8853DE689283B47B5D348BC33E06193084229B9@gsmbnmp04es.firmwide.corp.gs.com>

This isn't a SQL db so I can't use adbapi.

So using deferToThread, inside my thread, when I have a result to write
to the client, I call callFromThread to schedule a write in the reactor
loop.  My question is, how exactly do I use callFromThread to write to
the client from the thread (I use the LineReceiver class)?
(specifically, what context do I pass to the thread func, to pass into
callFromThread call, to make sure it writes back to the right client?)

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of
Christopher Armstrong
Sent: Friday, October 26, 2007 7:19 PM
To: Twisted general discussion
Subject: Re: [Twisted-Python] IPushProducer - medium volume streaming

On 10/26/07, Rutt, Benjamin <Benjamin.Rutt at gs.com> wrote:
> 1) forking off a thread so that I will not block other clients from
talking
> to the server.

If this is a SQL database with which you're using a dbapi module, you
should probably be using twisted.enterprise.adbapi to make access to
that database asynchronous. Under the hood it's using threads to make
the interface asynchronous. Otherwise, if the only programmatic
interface this database of yours has is blocking, then you'll probably
need to use a thread yourself. See
twisted.internet.threads.deferToThread.

-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From radix at twistedmatrix.com  Sun Oct 28 10:50:38 2007
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 28 Oct 2007 10:50:38 -0400
Subject: [Twisted-Python] IPushProducer - medium volume streaming
In-Reply-To: <C8853DE689283B47B5D348BC33E06193084229B9@gsmbnmp04es.firmwide.corp.gs.com>
References: <C8853DE689283B47B5D348BC33E06193084229B5@gsmbnmp04es.firmwide.corp.gs.com>
	<60ed19d40710261619s7314787ay9bbffc297535d047@mail.gmail.com>
	<C8853DE689283B47B5D348BC33E06193084229B9@gsmbnmp04es.firmwide.corp.gs.com>
Message-ID: <60ed19d40710280750q64ccab13uc5903591dd6f6d10@mail.gmail.com>

On 10/28/07, Rutt, Benjamin <Benjamin.Rutt at gs.com> wrote:
> So using deferToThread, inside my thread, when I have a result to write
> to the client, I call callFromThread to schedule a write in the reactor
> loop.

No, if you're using deferToThread, the way you give the result back to
the mainloop is by returning the value from the function. Then that
result gets fired on the Deferred that deferToThread created.



-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From Benjamin.Rutt at gs.com  Sun Oct 28 11:51:28 2007
From: Benjamin.Rutt at gs.com (Rutt, Benjamin)
Date: Sun, 28 Oct 2007 11:51:28 -0400
Subject: [Twisted-Python] IPushProducer - medium volume streaming
In-Reply-To: <60ed19d40710280750q64ccab13uc5903591dd6f6d10@mail.gmail.com>
References: <C8853DE689283B47B5D348BC33E06193084229B5@gsmbnmp04es.firmwide.corp.gs.com><60ed19d40710261619s7314787ay9bbffc297535d047@mail.gmail.com><C8853DE689283B47B5D348BC33E06193084229B9@gsmbnmp04es.firmwide.corp.gs.com>
	<60ed19d40710280750q64ccab13uc5903591dd6f6d10@mail.gmail.com>
Message-ID: <C8853DE689283B47B5D348BC33E06193084229BB@gsmbnmp04es.firmwide.corp.gs.com>

It's a long-running streaming flow so there will be millions of results
to send to the client.  You're saying I call deferToThread millions of
times?

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of
Christopher Armstrong
Sent: Sunday, October 28, 2007 10:51 AM
To: Twisted general discussion
Subject: Re: [Twisted-Python] IPushProducer - medium volume streaming

On 10/28/07, Rutt, Benjamin <Benjamin.Rutt at gs.com> wrote:
> So using deferToThread, inside my thread, when I have a result to
write
> to the client, I call callFromThread to schedule a write in the
reactor
> loop.

No, if you're using deferToThread, the way you give the result back to
the mainloop is by returning the value from the function. Then that
result gets fired on the Deferred that deferToThread created.



-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From radix at twistedmatrix.com  Sun Oct 28 12:11:20 2007
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 28 Oct 2007 12:11:20 -0400
Subject: [Twisted-Python] IPushProducer - medium volume streaming
In-Reply-To: <C8853DE689283B47B5D348BC33E06193084229BB@gsmbnmp04es.firmwide.corp.gs.com>
References: <C8853DE689283B47B5D348BC33E06193084229B5@gsmbnmp04es.firmwide.corp.gs.com>
	<60ed19d40710261619s7314787ay9bbffc297535d047@mail.gmail.com>
	<C8853DE689283B47B5D348BC33E06193084229B9@gsmbnmp04es.firmwide.corp.gs.com>
	<60ed19d40710280750q64ccab13uc5903591dd6f6d10@mail.gmail.com>
	<C8853DE689283B47B5D348BC33E06193084229BB@gsmbnmp04es.firmwide.corp.gs.com>
Message-ID: <60ed19d40710280911x63a58f31k287d504e5e3326f8@mail.gmail.com>

On 10/28/07, Rutt, Benjamin <Benjamin.Rutt at gs.com> wrote:
> It's a long-running streaming flow so there will be millions of results
> to send to the client.  You're saying I call deferToThread millions of
> times?

No, I was just correcting your description of the way that
deferToThread is used.

If you don't want to use deferToThread, then you should probably use a
combination of reactor.callInThread and reactor.callFromThread.

-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From rt at aspirinka.net  Sun Oct 28 16:35:35 2007
From: rt at aspirinka.net (Sergey Alembekov)
Date: Sun, 28 Oct 2007 23:35:35 +0300
Subject: [Twisted-Python] python2.5
Message-ID: <200710282335.35364.rt@aspirinka.net>

Hi,
Will twisted works with python2.5?

-- 
Regards, Sergey Alembekov
ALTLinux Team
xmpp: rt at jabber.ru



From radix at twistedmatrix.com  Sun Oct 28 16:54:51 2007
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 28 Oct 2007 16:54:51 -0400
Subject: [Twisted-Python] python2.5
In-Reply-To: <200710282335.35364.rt@aspirinka.net>
References: <200710282335.35364.rt@aspirinka.net>
Message-ID: <60ed19d40710281354g53d800b9w1cfb9d4d5143a65b@mail.gmail.com>

On 10/28/07, Sergey Alembekov <rt at aspirinka.net> wrote:
> Hi,
> Will twisted works with python2.5?

Twisted 2.5 works with Python 2.5 (the version number matching is just
a coincidence :-) The Python 2.5 release had some incompatibilities
that caused older versions of Twisted some trouble, but even those
should probably mostly work.

-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From nico at tekNico.net  Sun Oct 28 18:50:22 2007
From: nico at tekNico.net (Nicola Larosa)
Date: Sun, 28 Oct 2007 23:50:22 +0100
Subject: [Twisted-Python] Re: python2.5
In-Reply-To: <60ed19d40710281354g53d800b9w1cfb9d4d5143a65b@mail.gmail.com>
References: <200710282335.35364.rt@aspirinka.net>
	<60ed19d40710281354g53d800b9w1cfb9d4d5143a65b@mail.gmail.com>
Message-ID: <4725122E.8090902@tekNico.net>

> Sergey Alembekov wrote:
>> Will twisted works with python2.5?

Christopher Armstrong wrote:
> Twisted 2.5 works with Python 2.5 (the version number matching is just
> a coincidence :-)

Moreover, Twisted 2.5 *requires* Python 2.5 for inline callbacks, that are
often useful.


-- 
Nicola Larosa - http://www.tekNico.net/

The day Microsoft makes a product that doesn't suck
is the day they make a vacuum cleaner.
 -- Anonymous





From radix at twistedmatrix.com  Sun Oct 28 22:08:28 2007
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 28 Oct 2007 22:08:28 -0400
Subject: [Twisted-Python] Re: python2.5
In-Reply-To: <4725122E.8090902@tekNico.net>
References: <200710282335.35364.rt@aspirinka.net>
	<60ed19d40710281354g53d800b9w1cfb9d4d5143a65b@mail.gmail.com>
	<4725122E.8090902@tekNico.net>
Message-ID: <60ed19d40710281908n64177623o6298d776def2cfa3@mail.gmail.com>

On 10/28/07, Nicola Larosa <nico at teknico.net> wrote:
> > Sergey Alembekov wrote:
> >> Will twisted works with python2.5?
>
> Christopher Armstrong wrote:
> > Twisted 2.5 works with Python 2.5 (the version number matching is just
> > a coincidence :-)
>
> Moreover, Twisted 2.5 *requires* Python 2.5 for inline callbacks, that are
> often useful.

... but does not require it for anything else. We still fully support
Python 2.3, for the record.

-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From stefan.arentz at gmail.com  Mon Oct 29 06:12:01 2007
From: stefan.arentz at gmail.com (Stefan Arentz)
Date: Mon, 29 Oct 2007 11:12:01 +0100
Subject: [Twisted-Python] Proxy server in front of two web sites
Message-ID: <adf34c300710290312g4f78d70fo5d67ff72a9cacd5d@mail.gmail.com>

I'm looking at implementing a solution for the following problem: I
have a setup with two web servers. Each contains the same directory
structure but not the same files. Using a proxy server in front of
these two I would like to merge them into one. So the proxy would
first hit server A and if A returned a 404 then it would hit B.

Is this something that I should implement as a web server or as a
proxy server? Is there actually a difference?

 S.



From manlio_perillo at libero.it  Mon Oct 29 08:19:08 2007
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Mon, 29 Oct 2007 13:19:08 +0100
Subject: [Twisted-Python] Proxy server in front of two web sites
In-Reply-To: <adf34c300710290312g4f78d70fo5d67ff72a9cacd5d@mail.gmail.com>
References: <adf34c300710290312g4f78d70fo5d67ff72a9cacd5d@mail.gmail.com>
Message-ID: <4725CFBC.1080705@libero.it>

Stefan Arentz ha scritto:
> I'm looking at implementing a solution for the following problem: I
> have a setup with two web servers. Each contains the same directory
> structure but not the same files. Using a proxy server in front of
> these two I would like to merge them into one. So the proxy would
> first hit server A and if A returned a 404 then it would hit B.
> 
> Is this something that I should implement as a web server or as a
> proxy server? Is there actually a difference?
> 

You can use Nginx for this.
Sample configuration (not tested):

upstream  backend  {
     server   backend1.example.com       weight=1;
     server   backend2.example.com:8080  weight=0;
}

server {
     location / {
         proxy_next_upstream http_404;
         proxy_pass  http://backend;
     }
}



Regards  Manlio Perillo



From Benjamin.Rutt at gs.com  Mon Oct 29 09:21:37 2007
From: Benjamin.Rutt at gs.com (Rutt, Benjamin)
Date: Mon, 29 Oct 2007 09:21:37 -0400
Subject: [Twisted-Python] IPushProducer - medium volume streaming
In-Reply-To: <60ed19d40710280911x63a58f31k287d504e5e3326f8@mail.gmail.com>
References: <C8853DE689283B47B5D348BC33E06193084229B5@gsmbnmp04es.firmwide.corp.gs.com><60ed19d40710261619s7314787ay9bbffc297535d047@mail.gmail.com><C8853DE689283B47B5D348BC33E06193084229B9@gsmbnmp04es.firmwide.corp.gs.com><60ed19d40710280750q64ccab13uc5903591dd6f6d10@mail.gmail.com><C8853DE689283B47B5D348BC33E06193084229BB@gsmbnmp04es.firmwide.corp.gs.com>
	<60ed19d40710280911x63a58f31k287d504e5e3326f8@mail.gmail.com>
Message-ID: <C8853DE689283B47B5D348BC33E06193084229BD@gsmbnmp04es.firmwide.corp.gs.com>

Thanks.  Now using callInThread to launch a long-running function on the
server and callFromThread from said function to write results to the
client.

I'm still puzzled how exactly
'reactor.callFromThread(self.transport.writeSomeData(...))' gets routed
to the right client when called from my function.  How does twisted know
which client that message is going to?  After all, it calls it from the
main reactor loop.  i.e. what state does it use to get this right?

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of
Christopher Armstrong
Sent: Sunday, October 28, 2007 12:11 PM
To: Twisted general discussion
Subject: Re: [Twisted-Python] IPushProducer - medium volume streaming

On 10/28/07, Rutt, Benjamin <Benjamin.Rutt at gs.com> wrote:
> It's a long-running streaming flow so there will be millions of
results
> to send to the client.  You're saying I call deferToThread millions of
> times?

No, I was just correcting your description of the way that
deferToThread is used.

If you don't want to use deferToThread, then you should probably use a
combination of reactor.callInThread and reactor.callFromThread.

-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From Marcin.Kasperski at softax.com.pl  Mon Oct 29 09:37:05 2007
From: Marcin.Kasperski at softax.com.pl (Marcin Kasperski)
Date: Mon, 29 Oct 2007 14:37:05 +0100
Subject: [Twisted-Python] Re: Proxy server in front of two web sites
References: <adf34c300710290312g4f78d70fo5d67ff72a9cacd5d@mail.gmail.com>
Message-ID: <87bqaiavpa.fsf@cauchy.softax.local>

"Stefan Arentz" <stefan.arentz at gmail.com> writes:

> I'm looking at implementing a solution for the following problem: I
> have a setup with two web servers. Each contains the same directory
> structure but not the same files. Using a proxy server in front of
> these two I would like to merge them into one. So the proxy would
> first hit server A and if A returned a 404 then it would hit B.
>
> Is this something that I should implement as a web server or as a
> proxy server? Is there actually a difference?

Well, de facto it will (almost-*) always be a proxy, proxy is
something that forwards requests and responses. One thing to note is
that if you want backend servers to see the client IP, some extra
effort is needed (like mod_rpaf on backend and adding X-Forwarded-For
on proxy).

nginx suggestion is good one, although of course not the only
possible.  I believe almost every product suitable to work as
reverse-proxy should handle this use case.


*) There exists the solution which does not require a proxy (and is
reasonable if most of the requests go to the first server). Just
have clients accessing the first server but in error handler redirect
them to the second server whenever they face 404.  This way one item
less to manage. But such process will not be transparent for users,
they will see different URLs.




From p.mayers at imperial.ac.uk  Mon Oct 29 10:43:57 2007
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 29 Oct 2007 14:43:57 +0000
Subject: [Twisted-Python] IPushProducer - medium volume streaming
In-Reply-To: <C8853DE689283B47B5D348BC33E06193084229BD@gsmbnmp04es.firmwide.corp.gs.com>
References: <C8853DE689283B47B5D348BC33E06193084229B5@gsmbnmp04es.firmwide.corp.gs.com>
	<60ed19d40710261619s7314787ay9bbffc297535d047@mail.gmail.com>
	<C8853DE689283B47B5D348BC33E06193084229B9@gsmbnmp04es.firmwide.corp.gs.com>
	<60ed19d40710280750q64ccab13uc5903591dd6f6d10@mail.gmail.com>
	<C8853DE689283B47B5D348BC33E06193084229BB@gsmbnmp04es.firmwide.corp.gs.com>
	<60ed19d40710280911x63a58f31k287d504e5e3326f8@mail.gmail.com>
	<C8853DE689283B47B5D348BC33E06193084229BD@gsmbnmp04es.firmwide.corp.gs.com>
Message-ID: <1193669037.3139.118.camel@localhost.localdomain>

On Mon, 2007-10-29 at 09:21 -0400, Rutt, Benjamin wrote:
> Thanks.  Now using callInThread to launch a long-running function on the
> server and callFromThread from said function to write results to the
> client.
> 
> I'm still puzzled how exactly
> 'reactor.callFromThread(self.transport.writeSomeData(...))' gets routed

I presume you mean:

reactor.callFromThread(self.transport.writeSomeData, ...)

Note the subtle difference

> to the right client when called from my function.  How does twisted know

The "transport" object is a bound connection and contains the address of
the endpoint (if you're using TCP that is)

> which client that message is going to?  After all, it calls it from the
> main reactor loop.  i.e. what state does it use to get this right?
> 
> -----Original Message-----
> From: twisted-python-bounces at twistedmatrix.com
> [mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of
> Christopher Armstrong
> Sent: Sunday, October 28, 2007 12:11 PM
> To: Twisted general discussion
> Subject: Re: [Twisted-Python] IPushProducer - medium volume streaming
> 
> On 10/28/07, Rutt, Benjamin <Benjamin.Rutt at gs.com> wrote:
> > It's a long-running streaming flow so there will be millions of
> results
> > to send to the client.  You're saying I call deferToThread millions of
> > times?
> 
> No, I was just correcting your description of the way that
> deferToThread is used.
> 
> If you don't want to use deferToThread, then you should probably use a
> combination of reactor.callInThread and reactor.callFromThread.
> 




From radix at twistedmatrix.com  Mon Oct 29 10:57:09 2007
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 29 Oct 2007 10:57:09 -0400
Subject: [Twisted-Python] IPushProducer - medium volume streaming
In-Reply-To: <C8853DE689283B47B5D348BC33E06193084229BD@gsmbnmp04es.firmwide.corp.gs.com>
References: <C8853DE689283B47B5D348BC33E06193084229B5@gsmbnmp04es.firmwide.corp.gs.com>
	<60ed19d40710261619s7314787ay9bbffc297535d047@mail.gmail.com>
	<C8853DE689283B47B5D348BC33E06193084229B9@gsmbnmp04es.firmwide.corp.gs.com>
	<60ed19d40710280750q64ccab13uc5903591dd6f6d10@mail.gmail.com>
	<C8853DE689283B47B5D348BC33E06193084229BB@gsmbnmp04es.firmwide.corp.gs.com>
	<60ed19d40710280911x63a58f31k287d504e5e3326f8@mail.gmail.com>
	<C8853DE689283B47B5D348BC33E06193084229BD@gsmbnmp04es.firmwide.corp.gs.com>
Message-ID: <60ed19d40710290757g7f71e134j348d023367753760@mail.gmail.com>

On 10/29/07, Rutt, Benjamin <Benjamin.Rutt at gs.com> wrote:
> I'm still puzzled how exactly
> 'reactor.callFromThread(self.transport.writeSomeData(...))' gets routed
> to the right client when called from my function.  How does twisted know
> which client that message is going to?  After all, it calls it from the
> main reactor loop.  i.e. what state does it use to get this right?

"self.transport" is associated with the particular connection.

Also, there are a couple of other things wrong about your snippet:

1. use "write", not "writeSomeData". writeSomeData is an internal
implementation detail.

2. You're actually calling writeSomeData and passing the *result* of
that to callFromThread. That's wrong; you need to pass a callable and
its arguments to callFromThread. So instead of
reactor.callFromThread(foo(a, b)), you write
reactor.callFromThread(foo, a, b). That means you should ultimately be
using::

reactor.callFromThread(self.transport.write, data)

-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From phil at bubblehouse.org  Mon Oct 29 11:01:23 2007
From: phil at bubblehouse.org (Phil Christensen)
Date: Mon, 29 Oct 2007 11:01:23 -0400
Subject: [Twisted-Python] Re: [Twisted-web] installed twisted. twisted.web
	missing?
In-Reply-To: <F6DCAC09-509B-4627-AF4D-67EABD7D80FC@dreid.org>
References: <d7ac1a680710281814w2a696143of5db20609fb79c19@mail.gmail.com>
	<F6DCAC09-509B-4627-AF4D-67EABD7D80FC@dreid.org>
Message-ID: <99C09EEE-A4A0-4007-A5FE-A3B285AB00F8@bubblehouse.org>

I saw this pop up over on -web, but I'd like to ask about this...

On Oct 29, 2007, at 3:49 AM, David Reid wrote:
> On Oct 28, 2007, at 6:14 PM, aaron smith wrote:
>> quick newb question. I installed twisted from source on mac os x  
>> leopard. When I run:
>>
>> >>python
>> >>import twisted
>> >>from twisted.web import http
>>
>> I get an ImportError: ImportError: No module named web
>
> Unfortunately there is an incomplete distribution of twisted 2.4 in / 
> System/Library/Frameworks
>
> Your source install likely went into /Library/Python/2.5/site- 
> packages/ which is also unfortunately  after /System/Library/ 
> Frameworks in the PYTHONPATH.
>
> Put /Library/Python/2.5/site-packages/ at the front of your  
> PYTHONPATH.

This seems like a relatively large issue with respect to Twisted  
support on Mac OS X. Is it really going to be necessary to set an  
environment variable anywhere you want to use Twisted? I guess this  
would be an issue for any of the packages distributed in Extras, but  
this is the one I have the most opinions about ;-)...

Is there some other way to modify your path? I assume .pth files won't  
work for this, since they only append to the path.

-phil




From phil at bubblehouse.org  Mon Oct 29 11:24:41 2007
From: phil at bubblehouse.org (Phil Christensen)
Date: Mon, 29 Oct 2007 11:24:41 -0400
Subject: [Twisted-Python] Re: [Twisted-web] installed twisted. twisted.web
	missing?
In-Reply-To: <99C09EEE-A4A0-4007-A5FE-A3B285AB00F8@bubblehouse.org>
References: <d7ac1a680710281814w2a696143of5db20609fb79c19@mail.gmail.com>
	<F6DCAC09-509B-4627-AF4D-67EABD7D80FC@dreid.org>
	<99C09EEE-A4A0-4007-A5FE-A3B285AB00F8@bubblehouse.org>
Message-ID: <AE5D467F-9867-43CD-8DAD-D4744B2D709B@bubblehouse.org>


On Oct 29, 2007, at 11:01 AM, Phil Christensen wrote:

> I saw this pop up over on -web, but I'd like to ask about this...
>
> On Oct 29, 2007, at 3:49 AM, David Reid wrote:
>> On Oct 28, 2007, at 6:14 PM, aaron smith wrote:
>>> quick newb question. I installed twisted from source on mac os x  
>>> leopard. When I run:
>>>
>>> >>python
>>> >>import twisted
>>> >>from twisted.web import http
>>>
>>> I get an ImportError: ImportError: No module named web
>>
>> Unfortunately there is an incomplete distribution of twisted 2.4  
>> in /System/Library/Frameworks
>>
>> Your source install likely went into /Library/Python/2.5/site- 
>> packages/ which is also unfortunately  after /System/Library/ 
>> Frameworks in the PYTHONPATH.
>>
>> Put /Library/Python/2.5/site-packages/ at the front of your  
>> PYTHONPATH.
>
> This seems like a relatively large issue with respect to Twisted  
> support on Mac OS X. Is it really going to be necessary to set an  
> environment variable anywhere you want to use Twisted? I guess this  
> would be an issue for any of the packages distributed in Extras, but  
> this is the one I have the most opinions about ;-)...
>
> Is there some other way to modify your path? I assume .pth files  
> won't work for this, since they only append to the path.

I'm going to answer my own question on this. A nice way to fix this is  
to create a .pth file in /Library/Python/2.5/site-packages, with the  
following line:

	import sys; sys.path.insert(0, '/Library/Python/2.5/site-packages')

On my machine for some reason i see the site-packages directory in  
there twice (even before this .pth file was added), so there's a part  
of me that wants to go with:

	import sys; sys.path = [s for s in sys.path if s != '/Library/Python/ 
2.5/site-packages']; sys.path.insert(0, '/Library/Python/2.5/site- 
packages')

but that only seems to get rid of one of them. It doesn't seem to  
matter anyways, so I guess the first version is good enough.

-phil



From stefan.arentz at gmail.com  Mon Oct 29 12:45:59 2007
From: stefan.arentz at gmail.com (Stefan Arentz)
Date: Mon, 29 Oct 2007 17:45:59 +0100
Subject: [Twisted-Python] Re: Proxy server in front of two web sites
In-Reply-To: <87bqaiavpa.fsf@cauchy.softax.local>
References: <adf34c300710290312g4f78d70fo5d67ff72a9cacd5d@mail.gmail.com>
	<87bqaiavpa.fsf@cauchy.softax.local>
Message-ID: <adf34c300710290945h1490dcdcyc828f831a0f9d297@mail.gmail.com>

The problem is that I don't have control over these servers. Otherwise
I would have implemented the redirect.

I've done a quick hack where I have a Resource that deals with this
directory hierarchy and simply starts a client.getPage to retrieve the
page and does a redirect if it does not exist. It works fairly well,
initial tests with 'ab' gives really reasonable performance actually.
Without any optimization or caching :-)

 S.

On 10/29/07, Marcin Kasperski <Marcin.Kasperski at softax.com.pl> wrote:
> "Stefan Arentz" <stefan.arentz at gmail.com> writes:
>
> > I'm looking at implementing a solution for the following problem: I
> > have a setup with two web servers. Each contains the same directory
> > structure but not the same files. Using a proxy server in front of
> > these two I would like to merge them into one. So the proxy would
> > first hit server A and if A returned a 404 then it would hit B.
> >
> > Is this something that I should implement as a web server or as a
> > proxy server? Is there actually a difference?
>
> Well, de facto it will (almost-*) always be a proxy, proxy is
> something that forwards requests and responses. One thing to note is
> that if you want backend servers to see the client IP, some extra
> effort is needed (like mod_rpaf on backend and adding X-Forwarded-For
> on proxy).
>
> nginx suggestion is good one, although of course not the only
> possible.  I believe almost every product suitable to work as
> reverse-proxy should handle this use case.
>
>
> *) There exists the solution which does not require a proxy (and is
> reasonable if most of the requests go to the first server). Just
> have clients accessing the first server but in error handler redirect
> them to the second server whenever they face 404.  This way one item
> less to manage. But such process will not be transparent for users,
> they will see different URLs.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From Benjamin.Rutt at gs.com  Mon Oct 29 13:10:15 2007
From: Benjamin.Rutt at gs.com (Rutt, Benjamin)
Date: Mon, 29 Oct 2007 13:10:15 -0400
Subject: [Twisted-Python] IPushProducer - medium volume streaming
In-Reply-To: <60ed19d40710290757g7f71e134j348d023367753760@mail.gmail.com>
References: <C8853DE689283B47B5D348BC33E06193084229B5@gsmbnmp04es.firmwide.corp.gs.com><60ed19d40710261619s7314787ay9bbffc297535d047@mail.gmail.com><C8853DE689283B47B5D348BC33E06193084229B9@gsmbnmp04es.firmwide.corp.gs.com><60ed19d40710280750q64ccab13uc5903591dd6f6d10@mail.gmail.com><C8853DE689283B47B5D348BC33E06193084229BB@gsmbnmp04es.firmwide.corp.gs.com><60ed19d40710280911x63a58f31k287d504e5e3326f8@mail.gmail.com><C8853DE689283B47B5D348BC33E06193084229BD@gsmbnmp04es.firmwide.corp.gs.com>
	<60ed19d40710290757g7f71e134j348d023367753760@mail.gmail.com>
Message-ID: <C8853DE689283B47B5D348BC33E06193084229C0@gsmbnmp04es.firmwide.corp.gs.com>

Thanks Chris and Phil.  My mistake for writing

'reactor.callFromThread(self.transport.writeSomeData(...))'

not

'reactor.callFromThread(self.transport.writeSomeData, ...)' 

the latter which I'm actually using.

Also I fixed to use write() not writeSomeData(), thanks.

Regarding state, I take it each new client connection to my server
results in a new instance of my LineReceiver subclass.  So therefore the
self.transport object contains the TCP socket fd in there somewhere -
makes sense, thanks.

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of
Christopher Armstrong
Sent: Monday, October 29, 2007 10:57 AM
To: Twisted general discussion
Subject: Re: [Twisted-Python] IPushProducer - medium volume streaming

On 10/29/07, Rutt, Benjamin <Benjamin.Rutt at gs.com> wrote:
> I'm still puzzled how exactly
> 'reactor.callFromThread(self.transport.writeSomeData(...))' gets
routed
> to the right client when called from my function.  How does twisted
know
> which client that message is going to?  After all, it calls it from
the
> main reactor loop.  i.e. what state does it use to get this right?

"self.transport" is associated with the particular connection.

Also, there are a couple of other things wrong about your snippet:

1. use "write", not "writeSomeData". writeSomeData is an internal
implementation detail.

2. You're actually calling writeSomeData and passing the *result* of
that to callFromThread. That's wrong; you need to pass a callable and
its arguments to callFromThread. So instead of
reactor.callFromThread(foo(a, b)), you write
reactor.callFromThread(foo, a, b). That means you should ultimately be
using::

reactor.callFromThread(self.transport.write, data)

-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From brown at esteem.com  Mon Oct 29 13:19:26 2007
From: brown at esteem.com (Tom Brown)
Date: Mon, 29 Oct 2007 10:19:26 -0700
Subject: [Twisted-Python] asyncronous access to serial ports under windows
In-Reply-To: <1193454653.28874.234.camel@brown.esteem.com>
References: <1193438559.28874.226.camel@brown.esteem.com>
	<1193454653.28874.234.camel@brown.esteem.com>
Message-ID: <1193678366.28874.261.camel@brown.esteem.com>

On Fri, 2007-10-26 at 20:10 -0700, Tom Brown wrote:
> On Fri, 2007-10-26 at 15:42 -0700, Tom Brown wrote:
> > Hi,
> > 
> > I've been able to create an application in Linux that reads/writes
> > multiple serial ports asyncronously. The setup code that does this looks
> > like this:
> > 
> > ...
> > from twisted.internet.qtreactor import install
> > a = QApplication(argv)
> > install(a)
> > from twisted.internet import reactor
> > from twisted.internet.serialport import SerialPort
> > ...
> >   ports, badPorts = getGoodPorts()
> >   if not ports:
> >     exit(1)
> >   data = ConfigData(join(sep, 'etc', 'qa.conf'))
> >   dbInfo = copy(data['qadata'])
> >   getLogin(dbInfo)
> >   w = MainWindow(data, dbInfo, ports)
> >   w.show()
> >   reactor.addSystemEventTrigger('after', 'shutdown', a.quit)
> >   a.connect(a, SIGNAL('lastWindowClosed()'), reactor.stop)
> >   for portObj in w.portObjs:
> >     SerialPort(portObj.scanner, portObj.port, reactor, baudrate=38400)
> >     portObj.sendLine()
> >   reactor.run()
> > 
> > Where the portObj.scanner is an instance of a descendent of Protocol.
> > Like I said, the above code works under Linux. Then I tried porting this
> > to Windows. The first problem I came across is that the qtreactor.py
> > would not work. I had to subclass QTReactor from Win32Reactor. It runs
> > without errors. However, I am not reading anything off of the serial
> > port. I can see the lights blink on the port when the portObj.sendLine()
> > is called, so I believe I am writing to it ok and data is coming back.
> > The data is just not read by the application. I think it must have
> > something to do with the SerialPort instance not getting an even that
> > data is ready. I suspect this is a Windows issue in that Windows is not
> > signaling an event when data is ready to read on the serial port.
> > 
> > Does anybody have any experience with this? Is there a work around? Am I
> > doing something wrong?
> 
> Well, I found out that it has something to do with the qtreactor. If I
> use just a Win32Reactor, it will read/write the serial port just fine. I
> played around with writing to the serial port using
> scanner.transport.write('\n') and found that
> Win32Reactor.doWaitForMultipleEvents() is called when a Win32Reactor is
> used. It is not called when a QTReactor(Win32Reactor) is used. The
> question is why is this the case?

Ok, I was able to find a solution to my problem. I had to make some
changes to the original qt4reactor.py (which I renamed to qtreactor.py
and copied over the original twisted qtreactor.py). The changes I made
are:

1) Subclassed QTReactor from Win32Reactor.
2) Commented out the following methods so the base class methods are
used:
  addReader()
  addWriter()
  removeReader()
  removeWriter()
  removeAll()
3) Modified the QTReactor.simulate() method so it calls doIteration()
after calling runUntilCurrent().

I've tested this with two devices and it works great. After I test this
in a production environment with six devices, I can create a patch
against the original qt4reactor.py. I'd like to make this available to
others who might need it. Where is the best place to post the patch?
This mailing list?

Thanks,
Tom





From nitro at dr-code.org  Wed Oct 31 03:41:10 2007
From: nitro at dr-code.org (Nitro)
Date: Wed, 31 Oct 2007 08:41:10 +0100
Subject: [Twisted-Python] Perspective broker and pipes
Message-ID: <op.t01wywmez3pzfc@nitrogenycs2>

Hello,

I wrote a pb application which also uses udp sockets. It works nicely. Now
there's the situation where client and server are both located on the same
machine. This means I could just connect to localhost and everything
works. Unfortunately some firewalls warn about connections. I want to
avoid this.
So I thought about replacing the transports in pb with pipes instead of
sockets if the server and client are both on the same machine. I'd have to
do the same for my custom udp solution. Doing it for my custom udp code is
easy, but how do I do this with pb?
Do I just have to create some kind of reactor.createPipe() thing or is
there more to it?

Thanks for your help,
-Matthias



From exarkun at divmod.com  Wed Oct 31 07:59:32 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 31 Oct 2007 06:59:32 -0500
Subject: [Twisted-Python] Perspective broker and pipes
In-Reply-To: <op.t01wywmez3pzfc@nitrogenycs2>
Message-ID: <20071031115932.8162.253534422.divmod.quotient.30070@ohm>

On Wed, 31 Oct 2007 08:41:10 +0100, Nitro <nitro at dr-code.org> wrote:
>Hello,
>
>I wrote a pb application which also uses udp sockets. It works nicely. Now
>there's the situation where client and server are both located on the same
>machine. This means I could just connect to localhost and everything
>works. Unfortunately some firewalls warn about connections. I want to
>avoid this.
>So I thought about replacing the transports in pb with pipes instead of
>sockets if the server and client are both on the same machine. I'd have to
>do the same for my custom udp solution. Doing it for my custom udp code is
>easy, but how do I do this with pb?
>Do I just have to create some kind of reactor.createPipe() thing or is
>there more to it?

Since you're concerned about firewalls warning about connections, I'm
guessing you're thinking about Windows.  In that case, you can't use
IReactorUNIX and IReactorUNIXDatagram, which would perhaps meet your
use case (although for all I know, some firewall software warns about
UNIX connections).

There is no support for communicating over arbitrary pipes in Twisted.
There is incidental support for communicating with pipes connected to
another process created with reactor.spawnProcess, but the process API
is not the same as the IProtocol API.

In general, using pipes will lessen performance anyway.

Jean-Paul



From nitro at dr-code.org  Wed Oct 31 09:24:50 2007
From: nitro at dr-code.org (Nitro)
Date: Wed, 31 Oct 2007 14:24:50 +0100
Subject: [Twisted-Python] Perspective broker and pipes
In-Reply-To: <20071031115932.8162.253534422.divmod.quotient.30070@ohm>
References: <20071031115932.8162.253534422.divmod.quotient.30070@ohm>
Message-ID: <op.t02cvobaz3pzfc@nitrogenycs2>

Am 31.10.2007, 12:59 Uhr, schrieb Jean-Paul Calderone <exarkun at divmod.com>:

> On Wed, 31 Oct 2007 08:41:10 +0100, Nitro <nitro at dr-code.org> wrote:
>> Hello,
>>
>> I wrote a pb application which also uses udp sockets. It works nicely.  
>> Now
>> there's the situation where client and server are both located on the  
>> same
>> machine. This means I could just connect to localhost and everything
>> works. Unfortunately some firewalls warn about connections. I want to
>> avoid this.
>> So I thought about replacing the transports in pb with pipes instead of
>> sockets if the server and client are both on the same machine. I'd have  
>> to
>> do the same for my custom udp solution. Doing it for my custom udp code  
>> is
>> easy, but how do I do this with pb?
>> Do I just have to create some kind of reactor.createPipe() thing or is
>> there more to it?
>
> Since you're concerned about firewalls warning about connections, I'm
> guessing you're thinking about Windows.  In that case, you can't use
> IReactorUNIX and IReactorUNIXDatagram, which would perhaps meet your
> use case (although for all I know, some firewall software warns about
> UNIX connections).

Yes, I am mainly working on windows.

> There is no support for communicating over arbitrary pipes in Twisted.
> There is incidental support for communicating with pipes connected to
> another process created with reactor.spawnProcess, but the process API
> is not the same as the IProtocol API.
>
> In general, using pipes will lessen performance anyway.

How big is the actual performance impact? The throughput right now is  
~10-50 kbyte/s. Is there a better way than pipes? They were just the first  
thing that came to my mind.
If pipes are still ok for my situation, how would I continue? Implement  
some kind of PipeCommunication class which implements IProtocol? What's  
the next step then? How do I plug this into pb?

Thanks for your time.

-Matthias



From exarkun at divmod.com  Wed Oct 31 09:33:13 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 31 Oct 2007 08:33:13 -0500
Subject: [Twisted-Python] Perspective broker and pipes
In-Reply-To: <op.t02cvobaz3pzfc@nitrogenycs2>
Message-ID: <20071031133313.8162.1793855910.divmod.quotient.30097@ohm>

On Wed, 31 Oct 2007 14:24:50 +0100, Nitro <nitro at dr-code.org> wrote:
>
> [snip]
>
>How big is the actual performance impact? The throughput right now is  ~10- 
>50 kbyte/s. Is there a better way than pipes? They were just the first 
>thing that came to my mind.

TCP connections are the thing which is better. ;)  Now that I think of it,
though, I don't know anything about how pipes are implemented on Windows.

>If pipes are still ok for my situation, how would I continue? Implement 
>some kind of PipeCommunication class which implements IProtocol? What's  the 
>next step then? How do I plug this into pb?

You'll have to implement ITCPTransport based on a pipe.  You can probably
re-use some code in Twisted for this.  For example, FileDescriptor from
twisted.internet.abstract might provide part of the implementation for you.

You might want to look at a few other things in twisted.internet.interfaces,
too (eg, IReactorFDSet).

Jean-Paul



From general at eepatents.com  Wed Oct 31 09:55:18 2007
From: general at eepatents.com (Ed Suominen)
Date: Wed, 31 Oct 2007 06:55:18 -0700
Subject: [Twisted-Python] Perspective broker and pipes
In-Reply-To: <op.t01wywmez3pzfc@nitrogenycs2>
References: <op.t01wywmez3pzfc@nitrogenycs2>
Message-ID: <47288946.8010305@eepatents.com>

The processworker module of my AsynQueue package spawns a process and
makes a PB connection with it via stdin/stdout. Perhaps you could adapt
it for your purposes.

http://foss.eepatents.com/trac/AsynQueue/browser/projects/AsynQueue/trunk/asynqueue/processworker.py

Best regards, Ed

Nitro wrote:
> Hello,
> 
> I wrote a pb application which also uses udp sockets. It works nicely. Now
> there's the situation where client and server are both located on the same
> machine. This means I could just connect to localhost and everything
> works. Unfortunately some firewalls warn about connections. I want to
> avoid this.
> So I thought about replacing the transports in pb with pipes instead of
> sockets if the server and client are both on the same machine. I'd have to
> do the same for my custom udp solution. Doing it for my custom udp code is
> easy, but how do I do this with pb?
> Do I just have to create some kind of reactor.createPipe() thing or is
> there more to it?
> 
> Thanks for your help,
> -Matthias
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> 



From brendoncolby at gmail.com  Wed Oct 31 12:13:08 2007
From: brendoncolby at gmail.com (Brendon Colby)
Date: Wed, 31 Oct 2007 11:13:08 -0500
Subject: [Twisted-Python] Deferreds and Trial -- getting my timing right
Message-ID: <e64b001e0710310913h5ef6e9abl21f72340d803ea28@mail.gmail.com>

Greetings,

I've paused development to bring my unittests up to date, and have hit
another snag. I am under the impression that no real work should be done in
my factory's init, so I have a bunch of routines that load data from a DB in
startFactory() (they all return deferreds from adbapi). I'm not sure when
startFactory() runs, but I know it's definitely not running before my tests
fire. I'm curious: do I need to move my data loading back into init, save
the deferred and return that deferred from setUp to have all my pre-loading
complete before my tests run? When does startFactory() actually fire?

Thanks,

Brendon Colby
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20071031/a7219f61/attachment.htm 

From exarkun at divmod.com  Wed Oct 31 12:27:10 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 31 Oct 2007 11:27:10 -0500
Subject: [Twisted-Python] Deferreds and Trial -- getting my timing right
In-Reply-To: <e64b001e0710310913h5ef6e9abl21f72340d803ea28@mail.gmail.com>
Message-ID: <20071031162710.8162.357591065.divmod.quotient.30157@ohm>

On Wed, 31 Oct 2007 11:13:08 -0500, Brendon Colby <brendoncolby at gmail.com> wrote:
>Greetings,
>
>I've paused development to bring my unittests up to date, and have hit
>another snag. I am under the impression that no real work should be done in
>my factory's init, so I have a bunch of routines that load data from a DB in
>startFactory() (they all return deferreds from adbapi). I'm not sure when
>startFactory() runs, but I know it's definitely not running before my tests
>fire. I'm curious: do I need to move my data loading back into init, save
>the deferred and return that deferred from setUp to have all my pre-loading
>complete before my tests run? When does startFactory() actually fire?

When your factory begins listening on its first port.

  f = YourFactory()
  reactor.listenTCP(0, f) # <- here
  reactor.run()

Jean-Paul



From brendoncolby at gmail.com  Wed Oct 31 13:01:06 2007
From: brendoncolby at gmail.com (Brendon Colby)
Date: Wed, 31 Oct 2007 12:01:06 -0500
Subject: [Twisted-Python] Deferreds and Trial -- getting my timing right
In-Reply-To: <20071031162710.8162.357591065.divmod.quotient.30157@ohm>
References: <e64b001e0710310913h5ef6e9abl21f72340d803ea28@mail.gmail.com>
	<20071031162710.8162.357591065.divmod.quotient.30157@ohm>
Message-ID: <e64b001e0710311001s4ad86f06wa7bd54a28a6c4614@mail.gmail.com>

On 10/31/07, Jean-Paul Calderone <exarkun at divmod.com> wrote:
>
> When your factory begins listening on its first port.
>
>   f = YourFactory()
>   reactor.listenTCP(0, f) # <- here
>   reactor.run()
>
> Jean-Paul


So what do I need to do in my unittests to get this to work? I'm using a
FileWrapper now to mock this up, so I never run listenTCP() of course.

Brendon
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20071031/b557e182/attachment.htm 

From exarkun at divmod.com  Wed Oct 31 13:15:39 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 31 Oct 2007 12:15:39 -0500
Subject: [Twisted-Python] Deferreds and Trial -- getting my timing right
In-Reply-To: <e64b001e0710311001s4ad86f06wa7bd54a28a6c4614@mail.gmail.com>
Message-ID: <20071031171539.8162.1924538823.divmod.quotient.30171@ohm>

On Wed, 31 Oct 2007 12:01:06 -0500, Brendon Colby <brendoncolby at gmail.com> wrote:
>On 10/31/07, Jean-Paul Calderone <exarkun at divmod.com> wrote:
>>
>> When your factory begins listening on its first port.
>>
>>   f = YourFactory()
>>   reactor.listenTCP(0, f) # <- here
>>   reactor.run()
>>
>> Jean-Paul
>
>
>So what do I need to do in my unittests to get this to work? I'm using a
>FileWrapper now to mock this up, so I never run listenTCP() of course.

I dunno.  I can't remember the last time I put any code in a factory's
__init__ or its startFactory method.  Maybe you could call the startFactory
method in your test?

Jean-Paul



From bboerner at rgmadvisors.com  Mon Oct  1 11:12:28 2007
From: bboerner at rgmadvisors.com (Brendan Boerner)
Date: Mon, 1 Oct 2007 12:12:28 -0500
Subject: [Twisted-Python] reactor.spawnProcess() - differences between
	Python & Bash deaths
Message-ID: <18034B5E-0331-4F58-9739-E2A6A45C9FF0@rgmadvisors.com>

Hi,

I'm seeing (or not seeing :-) ) behavior which I cannot explain.

Attached are two .py scripts and a bash script -

echo.bash - echo a message
echo.py - echo a message
py_spawn.py - launch either echo.bash or echo.py using
reactor.spawnProcess().

If I have py_spawn.py launch echo.bash and then kill the '/bin/bash
./echo.bash' process using a SIGTERM py_spawn reports:

error: errorMessage: A process has ended with a probable error  
condition: process ended by signal 15.
error: exitCode: None
error: signal: 15
error: status: 15
processEnded, status <twisted.python.failure.Failure <class  
'twisted.internet.error.ProcessTerminated'>>

Which is what I expect.

If instead I launch echo.py and then kill the
'/opt/local/bin/python2.5 ./echo.py -m message' process py_spawn
reports:

error: exitCode: 0
error: signal: None
error: status: 0
processEnded, status <twisted.python.failure.Failure <class  
'twisted.internet.error.ProcessDone'>>

which is not what I expect.  In particular I am 99% certain that this
is relatively recent behaviour which showed up only last week - prior
to that I was seeing that if I killed a spawned .py process that I'd
see that it was terminated with a signal 15 ala the bash case.

I've tested this on Mac and Debian boxes with identical results.

Any suggestions or insights are appreciated.

Regards,
Brendan

--- py_spawn.py ---
#! /opt/local/bin/python2.5

from twisted.internet import error, reactor, defer, protocol

import getopt
import pickle
import pprint
import subprocess
import signal
import sys

Dumper = pprint.pformat

class MyProcessProtocol(protocol.ProcessProtocol):

     def __init__(self):
         self.outdata = ""
         self.errdata = ""
         pass

     def connectionMade(self):
         print "connectionMade!"

     def outReceived(self, data):
         print "outReceived! with %d bytes!" % len(data)
         self.outdata = self.outdata + data

     def errReceived(self, data):
         print "errReceived! with %d bytes!" % len(data)
         self.errdata = self.errdata + data

     def inConnectionLost(self):
         print "inConnectionLost! stdin is closed! (we probably did it)"

     def outConnectionLost(self):
         print "outConnectionLost! The child closed their stdout!"
         print "I saw them write:\n", self.outdata

     def errConnectionLost(self):
         print "errConnectionLost! The child closed their stderr."
         print "I saw them write:\n", self.errdata

     def processEnded(self, status):
         print "debug: type(status): %s" % type(status.value)
         print "debug: isinstance(status.value, error.ProcessDone): % 
s" % \
             isinstance(status.value, error.ProcessDone)
         print "debug: isinstance(status.value,  
error.ProcessTerminated): %s" % \
             isinstance(status.value, error.ProcessTerminated)

         if isinstance(status.value, error.ProcessDone):
             print "error: exitCode: %s" % status.value.exitCode
             print "error: signal: %s" % status.value.signal
             print "error: status: %s" % status.value.status

         elif isinstance(status.value, error.ProcessTerminated):
             print "error: errorMessage: %s" % status.getErrorMessage()
             print "error: exitCode: %s" % status.value.exitCode
             print "error: signal: %s" % status.value.signal
             print "error: status: %s" % status.value.status

         print "processEnded, status %s" % repr(status)
         print "quitting"
         reactor.stop()

def usage():
     print "Usage: py_spawn.py"

def main():

     processProtocol = MyProcessProtocol()

     # killing the bash process using SIGTERM results in:
     # error: errorMessage: A process has ended with a probable error  
condition: process ended by signal 15.
     # error: exitCode: None
     # error: signal: 15
     # error: status: 15
     # processEnded, status <twisted.python.failure.Failure <class  
'twisted.internet.error.ProcessTerminated'>>

     reactor.spawnProcess(processProtocol, 'bash', ["bash", "-c",  
"echo.bash"], env=None)

     # killing the bash process using SIGTERM results in:
     # error: exitCode: 0
     # error: signal: None
     # error: status: 0
     # processEnded, status <twisted.python.failure.Failure <class  
'twisted.internet.error.ProcessDone'>>

     #reactor.spawnProcess(processProtocol, 'bash', ["bash", "-c", "./ 
echo.py -m message"], env=None)

     reactor.run()

if __name__ == "__main__":
     main()


--- echo.py ---
#!/opt/local/bin/python2.5


from optparse import OptionParser, OptParseError

from twisted.internet import reactor
from twisted.spread import pb
from zope.interface import implements

import pprint
import sys

Dumper = pprint.pformat

def run(duration, message):

     duration -= 1
     print "duration: %d, message: %s" % (duration, message)
     if duration != 0:
         reactor.callLater(1, run, duration, message)
     else:
         reactor.stop()

def main():
     print "debug: args: %s" % sys.argv[1:]
     try:
         duration = 0
         message = "No message"

         parser = OptionParser()
         parser.add_option("-d", "--duration=", dest="duration",
             metavar="INT",
             default=duration,
             help="How long to run, 0 will run forever [default: % 
default]")
         parser.add_option("-m", "--message=", dest="message",
             default=message,
             help="Message to display [default: %default]")

         (opts, args) = parser.parse_args()
         duration = int(opts.duration)
         message = opts.message

         print "debug: opts: %s, args: %s" % (opts, args)

     except OptParseError, e:
         # print help information and exit:
         print "exception: %s" % e
         sys.exit(2)

     reactor.callLater(0, run, duration, message)
     reactor.run()

if __name__ == "__main__":
     main()


--- echo.bash ---
#!/bin/bash

while true; do
     echo -n "This is a message ";
     date;
     sleep 1;
done




From Paul_S_Johnson at mnb.uscourts.gov  Mon Oct  1 15:36:38 2007
From: Paul_S_Johnson at mnb.uscourts.gov (Paul_S_Johnson at mnb.uscourts.gov)
Date: Mon, 1 Oct 2007 16:36:38 -0500
Subject: [Twisted-Python] Project design questions
Message-ID: <OF2BEB7F20.432F903F-ON86257367.0076A604-86257367.0076B60A@uscmail.uscourts.gov>

Here's a description of my general game plan and my questions are below:

THE MISSION
Create a GUI-based, dashboard-like application that monitors the overall 
health of our resources. It would be a tool that helps pinpoint trouble 
spots when performance is less than desirable. Ideally, we would get such 
a good handle on it that it would warn us of impending trouble before it 
causes a failure.

SAMPLE FUNCTIONS FOR THE APPLICATION 
Monitor web traffic by distilling down Apache logs
Monitor server hardware through built in firmware http interface
Monitor server health via command line commands:
        disk space
        processor load
        etc.
Monitor database health via command line commands
Monitor backup success through log output
Monitor misc. server messages
Monitor switch traffic
Monitor processes
...And more.

POSSIBLE CONSTRAINTS
Our main servers are on a WAN whose security is the job of the greater 
org.  We have access through SSL connections now, but we may not be able 
to get permissions to open any additional ports for our monitoring 
purposes.

THE QUESTIONS
Very basic question: am I better off leaving most of the heavy lifting (as 
in the programming logic) on the client side? This would mean more data 
would have to pass from server to client app (e.g. a whole web log or part 
thereof) which is the downside. The upside is that in a failure emergency 
situation if my server is still up enough to have a SSH connection my 
dashboard app may still be useful to me. Thoughts?

If we are not constrained to only get our info via SSH what's the best 
kind of connection to have? My thought is to use the Prospective Broker 
since that seems to be the most Pythonistic option. Is it possible to 
encrypt the PB server connection?

Are there any Twisted methods of tunneling through an existing SSH 
connection (just a wild thought)?

Thanks,

Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20071001/cd73c32f/attachment.html>

From Paul_S_Johnson at mnb.uscourts.gov  Mon Oct  1 09:20:27 2007
From: Paul_S_Johnson at mnb.uscourts.gov (Paul_S_Johnson at mnb.uscourts.gov)
Date: Mon, 1 Oct 2007 10:20:27 -0500
Subject: [Twisted-Python] Project design questions
In-Reply-To: <37d49ed40709280813j3bb47ed7s22b974fc377c05a@mail.gmail.com>
Message-ID: <OF8A40551C.6E1DECD2-ON86257367.004E32E2-86257367.00544503@uscmail.uscourts.gov>

Here's a description of my general game plan and my questions are below:

THE MISSION
Create a GUI-based, dashboard-like application that monitors the overall 
health of our resources. It would be a tool that helps pinpoint trouble 
spots when performance is less than desirable. Ideally, we would get such 
a good handle on it that it would warn us of impending trouble before it 
causes a failure.

SAMPLE FUNCTIONS FOR THE APPLICATION 
Monitor web traffic by distilling down Apache logs
Monitor server hardware through built in firmware http interface
Monitor server health via command line commands:
        disk space
        processor load
        etc.
Monitor database health via command line commands
Monitor backup success through log output
Monitor misc. server messages
Monitor switch traffic
Monitor processes
...And more.

POSSIBLE CONSTRAINTS
Our main servers are on a WAN whose security is the job of the greater 
org.  We have access through SSL connections now, but we may not be able 
to get permissions to open any additional ports for our monitoring 
purposes.

THE QUESTIONS
Very basic question: am I better off leaving most of the heavy lifting (as 
in the programming logic) on the client side? This would mean more data 
would have to pass from server to client app (e.g. a whole web log or part 
thereof) which is the downside. The upside is that in a failure emergency 
situation if my server is still up enough to have a SSH connection my 
dashboard app may still be useful to me. Thoughts?

If we are not constrained to only get our info via SSH what's the best 
kind of connection to have? My thought is to use the Prospective Broker 
since that seems to be the most Pythonistic option. Is it possible to 
encrypt the PB server connection?

Are there any Twisted methods of tunneling through an existing SSH 
connection (just a wild thought)?

Thanks,

Paul

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20071001/32823dba/attachment.html>

From daedalus at eigenmagic.com  Mon Oct  1 23:54:25 2007
From: daedalus at eigenmagic.com (Justin Warren)
Date: Tue, 02 Oct 2007 15:54:25 +1000
Subject: [Twisted-Python] Project design questions
In-Reply-To: <OF2BEB7F20.432F903F-ON86257367.0076A604-86257367.0076B60A@uscmail.uscourts.gov>
References: <OF2BEB7F20.432F903F-ON86257367.0076A604-86257367.0076B60A@uscmail.uscourts.gov>
Message-ID: <1191304465.6922.51.camel@localhost>

On Mon, 2007-10-01 at 16:36 -0500, Paul_S_Johnson at mnb.uscourts.gov
wrote:
> 
> Here's a description of my general game plan and my questions are
> below: 
> 
> THE MISSION 
> Create a GUI-based, dashboard-like application that monitors the
> overall health of our resources. It would be a tool that helps
> pinpoint trouble spots when performance is less than desirable.
> Ideally, we would get such a good handle on it that it would warn us
> of impending trouble before it causes a failure. 

Wow. This is indeed a mighty mission.

> SAMPLE FUNCTIONS FOR THE APPLICATION 
> Monitor web traffic by distilling down Apache logs 
> Monitor server hardware through built in firmware http interface 
> Monitor server health via command line commands: 
>         disk space 
>         processor load 
>         etc. 
> Monitor database health via command line commands 
> Monitor backup success through log output 
> Monitor misc. server messages 
> Monitor switch traffic 
> Monitor processes 
> ...And more. 

May I suggest that reviewing existing prior art might serve as a useful
place to begin in understanding ways in which this can be done? Examples
include, but are far from limited to:

- Concord eHealth
- BMC Patrol
- HP IT/O (or whatever it's called these days)
- IBM Tivoli
- EMC SMART
- Nagios
- Zenoss
- Hyperic
- seafelt (disclosure: I wrote large amounts of this one)
- cacti
- MRTG

> POSSIBLE CONSTRAINTS 
> Our main servers are on a WAN whose security is the job of the greater
> org.  We have access through SSL connections now, but we may not be
> able to get permissions to open any additional ports for our
> monitoring purposes. 
> 
> THE QUESTIONS 
> Very basic question: am I better off leaving most of the heavy lifting
> (as in the programming logic) on the client side? This would mean more
> data would have to pass from server to client app (e.g. a whole web
> log or part thereof) which is the downside. The upside is that in a
> failure emergency situation if my server is still up enough to have a
> SSH connection my dashboard app may still be useful to me. Thoughts? 

In a production environment, it is usual for people to get nervous about
how much of a system's resources will be consumed by the monitoring
software (usually called an agent). A webserver's primary function is to
serve web traffic, a database server to be a database, etc. so the usual
way is to make the client as lightweight as possible and have the heavy
lifting done on a dedicated monitoring server (or servers).

Then you need to consider if you will need to maintain historical data
in order to make decisions. You would need a certain amount of
historical data to decide if the rate of storage growth is abnormal, for
example.

You will also need to decide if you're doing polling based monitoring,
where the monitoring system asks clients at a regular interval for some
information, or event based monitoring where you simply respond to an
event occurring, or some hybrid of the two, where regular polling
identifies an event (eg: CPU load too high) which then triggers an event
(CPU load too high on client x). Having the client/agent do the polling
may be more appropriate in some circumstances, and in others having the
server do it might be best.

> If we are not constrained to only get our info via SSH what's the best
> kind of connection to have? My thought is to use the Prospective
> Broker since that seems to be the most Pythonistic option. Is it
> possible to encrypt the PB server connection? 

It sounds like you're talking about how to get from the GUI to a server,
rather than how to talk to a device to interrogate it for information,
so yes, Perspective Broker is probably a reasonable way to do that. You
won't be able to run Python on a Cisco switch, though, so have you
considered something like SNMP for statistics gathering for non-Python
devices?

What is your actual goal? Do you want to write your own systems
monitoring software, or do you want to monitor your kit? Writing this
sort of software can become quite a complex undertaking.

Have you considered adapting an existing implementation to your own
needs by writing the necessary plugin? To stand on the shoulders of
giants, as it were.

-- 
Justin Warren <daedalus at eigenmagic.com>



From timo.warns at googlemail.com  Tue Oct  2 09:32:10 2007
From: timo.warns at googlemail.com (Timo Warns)
Date: Tue, 2 Oct 2007 17:32:10 +0200
Subject: [Twisted-Python] Project design questions
In-Reply-To: <1191304465.6922.51.camel@localhost>
References: <OF2BEB7F20.432F903F-ON86257367.0076A604-86257367.0076B60A@uscmail.uscourts.gov>
	<1191304465.6922.51.camel@localhost>
Message-ID: <1e9f9aad0710020832l7c9c507ahaf334982d53028b6@mail.gmail.com>

The paper at http://www.cs.princeton.edu/nsg/papers/comon_osr_06/ could be
interesting as it
describes the architecture of the CoMon monitoring system for the PlanetLab
cluster.
In particular, it discusses some design decisions that address some of your
questions.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20071002/25fc5c80/attachment.html>

From sguha at purdue.edu  Tue Oct  2 17:47:19 2007
From: sguha at purdue.edu (Saptarshi Guha)
Date: Tue, 2 Oct 2007 19:47:19 -0400
Subject: [Twisted-Python] LoopingCall vs internet.TimerService
Message-ID: <D901A37F-5ACD-48DA-B9F7-AEB39E66A26E@purdue.edu>

Hello,
Thanks for twisted - very useful. Now, my questions
I have written a server which accepts connections from clients, takes  
requests and adds them to a Queue (a python object of Queue.Queue).
Now i have two approaches

a) At startup, my server(a subclass of pb.Root)  runs a "dispatcher"  
function using task.LoopingCall(dispatcher).start(0.1)
b)Create a separate subclass of internet.TimerService whose function  
is dispatcher

[INFO: dispatcher has methods like obj.callRemote, addCallback and  
addErrback]

So which is better, neater, safer? loopingcall of timerservice? also  
is it safe to do the calls mentioned in INFO within dispatcher?

Thank you for your time and help.

Saptarshi Guha

Saptarshi Guha
sapsi at pobox.com



-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20071002/303453de/attachment.html>

From sguha at purdue.edu  Tue Oct  2 18:05:43 2007
From: sguha at purdue.edu (Saptarshi Guha)
Date: Tue, 2 Oct 2007 20:05:43 -0400
Subject: [Twisted-Python] Re: LoopingCall vs internet.TimerService
In-Reply-To: <D901A37F-5ACD-48DA-B9F7-AEB39E66A26E@purdue.edu>
References: <D901A37F-5ACD-48DA-B9F7-AEB39E66A26E@purdue.edu>
Message-ID: <56C0EB8B-CF4B-4E70-8FE5-C58F8A9A3560@purdue.edu>

I did read the source that
a)LoopingCall is implemented via calllater's
b)internet.TimerService is a big wrapper around loopingcall

I've probably simplified it too much but what then is the difference?
thank you

Saptarshi Guha




On Oct 2, 2007, at 7:47 PM, Saptarshi Guha wrote:

> Hello,
> Thanks for twisted - very useful. Now, my questions
> I have written a server which accepts connections from clients,  
> takes requests and adds them to a Queue (a python object of  
> Queue.Queue).
> Now i have two approaches
>
> a) At startup, my server(a subclass of pb.Root)  runs a  
> "dispatcher" function using task.LoopingCall(dispatcher).start(0.1)
> b)Create a separate subclass of internet.TimerService whose  
> function is dispatcher
>
> [INFO: dispatcher has methods like obj.callRemote, addCallback and  
> addErrback]
>
> So which is better, neater, safer? loopingcall of timerservice?  
> also is it safe to do the calls mentioned in INFO within dispatcher?
>
> Thank you for your time and help.
>
> Saptarshi Guha
>
> Saptarshi Guha
> sapsi at pobox.com
>
>
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20071002/b128a427/attachment.html>

From exarkun at divmod.com  Wed Oct  3 08:31:06 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 3 Oct 2007 10:31:06 -0400
Subject: [Twisted-Python] Re: LoopingCall vs internet.TimerService
In-Reply-To: <56C0EB8B-CF4B-4E70-8FE5-C58F8A9A3560@purdue.edu>
Message-ID: <20071003143106.8162.650730627.divmod.quotient.17467@ohm>

On Tue, 2 Oct 2007 20:05:43 -0400, Saptarshi Guha <sguha at purdue.edu> wrote:
>I did read the source that
>a)LoopingCall is implemented via calllater's
>b)internet.TimerService is a big wrapper around loopingcall
>
>I've probably simplified it too much but what then is the difference?
>thank you

You haven't really simplified too much.  They both provide the same
functionality.  LoopingCall provides it with one API, TimerService
provides it with a different API.  Of the two, LoopingCall is the
more commonly useful.

Jean-Paul



From paulswartz at gmail.com  Wed Oct  3 09:02:06 2007
From: paulswartz at gmail.com (Paul Swartz)
Date: Wed, 3 Oct 2007 11:02:06 -0400
Subject: [Twisted-Python] How to switch users in SSH session.
In-Reply-To: <20070928113422.8162.2102237877.divmod.quotient.15372@ohm>
References: <OF805FD359.073506AB-ON86257363.006CD902-86257363.006DDACA@uscmail.uscourts.gov>
	<20070928113422.8162.2102237877.divmod.quotient.15372@ohm>
Message-ID: <324cfb540710030802x6ef98e81yfd1ffb3d6ab8de1@mail.gmail.com>

On 9/28/07, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> On Thu, 27 Sep 2007 15:00:14 -0500, paul_s_johnson at mnb.uscourts.gov wrote:
> >Here's the line that instaniates my SSH object (also repeated at the end
> >of my code):
> >
> >myssh = SSH("my.host.com", "myusername", "mypasswd", ["id; su - root;
> >myrootpasswd; id", "pwd", "ls -l"])
>
> I suspect the list element which includes "su - root; myrootpasswd;"
> won't achieve the desired affect.  Even if su weren't careful to try
> to read from a pty, "myrootpasswd" won't be sent to its stdin, it'll
> be executed by the shell after "su - root" exits, which it probably
> won't since nothing is going to write a password to it.

What you'll do is on the channel object which runs these commands,
you'll use the .write() method to send the root password to su.

-p
-- 
Paul Swartz
paulswartz at gmail dot com
http://z3p.livejournal.com/
AIM: z3penguin



From eburus at gmail.com  Wed Oct  3 09:37:05 2007
From: eburus at gmail.com (Burus Gmail)
Date: Wed, 03 Oct 2007 19:37:05 +0400
Subject: [Twisted-Python] Re: LoopingCall vs internet.TimerService
In-Reply-To: <20071003143106.8162.650730627.divmod.quotient.17467@ohm>
References: <20071003143106.8162.650730627.divmod.quotient.17467@ohm>
Message-ID: <4703B721.3010309@gmail.com>

LoopingCall - periodically call a  function.
TimerService - wrapper for the twisted service with LoopingCall
functionality.

I use LoopingCall and write my own wrapper for the service,
but TimerService is really more universal for it.

More useful - create twisted Service and Plugins for your application,
use component architecture this interface adaptation.
In that variant you will construct TimerService from scratch =).


Jean-Paul Calderone wrote:
> On Tue, 2 Oct 2007 20:05:43 -0400, Saptarshi Guha <sguha at purdue.edu>
> wrote:
>> I did read the source that
>> a)LoopingCall is implemented via calllater's
>> b)internet.TimerService is a big wrapper around loopingcall
>>
>> I've probably simplified it too much but what then is the difference?
>> thank you
>
> You haven't really simplified too much.  They both provide the same
> functionality.  LoopingCall provides it with one API, TimerService
> provides it with a different API.  Of the two, LoopingCall is the
> more commonly useful.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>

-- 
+---------------------------------------+
|~-~-~-~-~~-~-~-~-~-~-~-~~-~-~-~-~-~-~-~|
|     SeNd CaKe IcE, hElLo MuMmY...     |
|_______________________________________|

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20071003/bddbc8a2/attachment.html>

From stefan.arentz at gmail.com  Thu Oct  4 04:20:45 2007
From: stefan.arentz at gmail.com (Stefan Arentz)
Date: Thu, 4 Oct 2007 12:20:45 +0200
Subject: [Twisted-Python] Collecting all results from a DeferredList
Message-ID: <adf34c300710040320g41c238c2ma88e02ad2ea53bc2@mail.gmail.com>

I want to request many web pages through a DeferredList and then
combine the results in an array. I don't understand how to keep an
array as shared state between these requests and return it to the
original caller when the DeferredList has completed.

 S.



From stefan.arentz at gmail.com  Thu Oct  4 06:44:34 2007
From: stefan.arentz at gmail.com (Stefan Arentz)
Date: Thu, 4 Oct 2007 14:44:34 +0200
Subject: [Twisted-Python] Re: Collecting all results from a DeferredList
In-Reply-To: <adf34c300710040320g41c238c2ma88e02ad2ea53bc2@mail.gmail.com>
References: <adf34c300710040320g41c238c2ma88e02ad2ea53bc2@mail.gmail.com>
Message-ID: <adf34c300710040544w36df4a40s1eed343cd9e79a97@mail.gmail.com>

Hm. This was actually pretty easy :-)

 S.

On 10/4/07, Stefan Arentz <stefan.arentz at gmail.com> wrote:
> I want to request many web pages through a DeferredList and then
> combine the results in an array. I don't understand how to keep an
> array as shared state between these requests and return it to the
> original caller when the DeferredList has completed.



From iacovou at gmail.com  Fri Oct  5 12:45:13 2007
From: iacovou at gmail.com (kgi)
Date: Fri, 5 Oct 2007 21:45:13 +0300
Subject: [Twisted-Python] stdio.StandardIO, ServerProtocol and Services.
Message-ID: <491db6c90710051145p56f37195he89903503564df25@mail.gmail.com>

Hi all.

I'm trying to write a "terminal" component, wrapped in a
service.Service, to drop into an application framework so that I can
use it to build interactive command-line tools. I've almost, but not
quite, got it working.

I know about manhole, but I want to write a simple command-based
syntax, rather than exposing a python namespace and interpreter. I
could also just go with  a telnet or ssh interface, but that would
require an additional step (the actual telnet or ssh). There's also
stdiodemo.py, but that doesn't offer readline-like functionality,
which would be a Very Good Thing.

(Besides, I'm really curious as to why this approach is not working!)

The code below is a minimal stripped-down example of what I've got so
far through frantic grepping and glimpseing through the Twisted
codebase. (although there are some fragmentary holdovers from various
experiments; ignore these). At the moment, the command handler (the
lineReceived() method) just echoes the argument with some '+' signs
prepended.

The termios stuff comes from twisted/conch/stdio.py, via a mailing
list post saying something to the effect of, "this is the minimal
amount you have to do in order to hook up your terminal to your
process's stdio"; I don't have the ML link handy right now, sorry.

Note that whereas stdio.py passes a Protocol argument to
ServerProtocol, I've created an intermediate class, CLIServerProtocol,
which has a protocolFactory attribute. An examination of
twisted/conch/insults/insults.py shows that this should be equivalent.

For the curious bystanders, HistoricRecvLine is derived as follows:

  HistoricRecvLine -> RecvLine -> TerminalProtocol

... and TerminalProtocol implements things like connectionMade, etc.

Here's the behaviour I see:

With the code as is, I can type in lines and get a reply from
lineReceived. However, none of the cursor keys or other things for
which there is special code in twisted/conch/recvline.py work; I just
get control codes all over the terminal.

If I uncomment the "reactor.run()", however, the behaviour changes
completely, and becomes much closer to what I expect: keypresses like
Home, cursor keys, etc, are honoured, as well as the history. However,
Ctrl-C merely loses the connection, and the terminal hangs and I have
to kill the twistd process externally.

The fact that adding reactor.run() (which shouldn't be needed in a
Service, right?) implies to me that the reactor isn't starting up
properly without it, and I can't see why.

Any advice would be greatly appreciated.

Ricky

--

import os, tty, sys, termios

from twisted.application import service

from twisted.internet import reactor, stdio, protocol, defer
from twisted.python import failure, reflect, log
from twisted.protocols import basic
from twisted.application import internet

from twisted.conch.insults import insults
from twisted.conch.manhole import ColoredManhole
# from twisted.conch.stdio import ConsoleManhole

from twisted.application                import service
from twisted.conch import recvline


class CLIProtocol ( recvline.HistoricRecvLine ):

    service = None

    def connectionMade ( self ):
        recvline.HistoricRecvLine.connectionMade ( self )
        self.keyHandlers [ '\x01' ] = self.handle_HOME
        self.keyHandlers [ '\x03' ] = self.handle_QUIT
        self.keyHandlers [ '\x1a' ] = self.handle_QUIT


    def connectionLost ( self, reason ):
        log.msg ( "Connection Lost" )


    def handle_QUIT ( self ):
        self.terminal.loseConnection()

    def lineReceived ( self, line ):
        self.terminal.write ( '+++' + line )


class CLIServerProtocol ( insults.ServerProtocol ):
    protocolFactory = CLIProtocol


class CLIService ( service.Service ):

    def startService ( self ):
        fd = sys.__stdin__.fileno()
        oldSettings = termios.tcgetattr ( fd )
        tty.setraw ( fd )
        try:
            p = CLIServerProtocol()
            stdio.StandardIO ( p )
            # reactor.run()
        finally:
            termios.tcsetattr ( fd, termios.TCSANOW, oldSettings )
            os.write ( fd, "\r\x1bc\r" )

        return service.Service.startService ( self )

######################################################################
# Create the application service hierarchy.
######################################################################

application       = service.Application ( 'cliapp' )

cs = CLIService()
cs.setServiceParent ( application )



From rfugger at gmail.com  Fri Oct  5 15:41:28 2007
From: rfugger at gmail.com (Ryan Fugger)
Date: Fri, 5 Oct 2007 14:41:28 -0700
Subject: [Twisted-Python] Returning a Deferred as a result from another
	Deferred
Message-ID: <c423163f0710051441m449f3b08v9c1587848582ceb4@mail.gmail.com>

Returning a Deferred as a result from another Deferred seems to be
disallowed by an assertion at the start of the callback chain.  Why is
this?  Right now I have worked around this limitation by wrapping my
Deferred in a list and then unwrapping it in the callback.

Maybe someone can suggest a better approach.  My application takes a
command from one connection and defers processing to a worker thread
to permit potentially-blocking database access.  That worker thread
often will need to send data over another connection to fulfill the
command, and await a reply before the reply can be sent back over the
original command connection.  The worker thread sends data over the
second connection using callFromThread, and this send operation itself
returns a Deferred which fires when the reply is received.  It is this
Deferred that I want to return as a result from the original Deferred
created by deferring to the worker thread in the command handler, so I
can wait until the reply comes from the second connection, and then
reply on the original command connection.  Can someone suggest a
better approach?

Thanks.

Ryan



From jml at mumak.net  Fri Oct  5 19:41:22 2007
From: jml at mumak.net (Jonathan Lange)
Date: Sat, 6 Oct 2007 11:41:22 +1000
Subject: [Twisted-Python] Returning a Deferred as a result from another
	Deferred
In-Reply-To: <c423163f0710051441m449f3b08v9c1587848582ceb4@mail.gmail.com>
References: <c423163f0710051441m449f3b08v9c1587848582ceb4@mail.gmail.com>
Message-ID: <d06a5cd30710051841g2cf657f0tc17b06c4f2a2df49@mail.gmail.com>

On 10/6/07, Ryan Fugger <rfugger at gmail.com> wrote:
> Returning a Deferred as a result from another Deferred seems to be
> disallowed by an assertion at the start of the callback chain.  Why is
> this?  Right now I have worked around this limitation by wrapping my
> Deferred in a list and then unwrapping it in the callback.
>

No it's not. I can guarantee this.

What's the content of the AssertionError that you are getting?

jml



From rfugger at gmail.com  Fri Oct  5 20:00:51 2007
From: rfugger at gmail.com (Ryan Fugger)
Date: Fri, 5 Oct 2007 19:00:51 -0700
Subject: [Twisted-Python] Returning a Deferred as a result from another
	Deferred
In-Reply-To: <d06a5cd30710051841g2cf657f0tc17b06c4f2a2df49@mail.gmail.com>
References: <c423163f0710051441m449f3b08v9c1587848582ceb4@mail.gmail.com>
	<d06a5cd30710051841g2cf657f0tc17b06c4f2a2df49@mail.gmail.com>
Message-ID: <c423163f0710051900l55999208h592940e8ac991c33@mail.gmail.com>

On 10/5/07, Jonathan Lange <jml at mumak.net> wrote:
> On 10/6/07, Ryan Fugger <rfugger at gmail.com> wrote:
> > Returning a Deferred as a result from another Deferred seems to be
> > disallowed by an assertion at the start of the callback chain.  Why is
> > this?  Right now I have worked around this limitation by wrapping my
> > Deferred in a list and then unwrapping it in the callback.
> >
>
> No it's not. I can guarantee this.
>
> What's the content of the AssertionError that you are getting?

No content in the error.  Line 238 of twisted/internet/defer.py (first
line in Deferred.callback) is:

assert not isinstance(result, Deferred)

That's pretty explicit in disallowing Deferreds...  I'm working with
the version 2.5 release.

Ryan



From dreid at dreid.org  Fri Oct  5 20:05:34 2007
From: dreid at dreid.org (David Reid)
Date: Fri, 5 Oct 2007 19:05:34 -0700
Subject: [Twisted-Python] Returning a Deferred as a result from another
	Deferred
In-Reply-To: <c423163f0710051441m449f3b08v9c1587848582ceb4@mail.gmail.com>
References: <c423163f0710051441m449f3b08v9c1587848582ceb4@mail.gmail.com>
Message-ID: <FFF3DEBD-FCFE-437D-A11B-CF12B8F4B33F@dreid.org>

Hi Ryan,
On Oct 5, 2007, at 2:41 PM, Ryan Fugger wrote:

> Returning a Deferred as a result from another Deferred seems to be
> disallowed by an assertion at the start of the callback chain.  Why is
> this?  Right now I have worked around this limitation by wrapping my
> Deferred in a list and then unwrapping it in the callback.

The following will cause an AssertionError

d = Deferred()
d2 = Deferred()

d2.callback(d)

There isn't really a good reason to do this anyway.  Since there is  
likely no reason to not just return d with your callbacks attached.   
If you do need two deferreds here for some reason, you _can_ return a  
deferred from a callback.  In which case further callbacks will not  
be called until the second deferred has fired.

-David




From rfugger at gmail.com  Fri Oct  5 20:46:03 2007
From: rfugger at gmail.com (Ryan Fugger)
Date: Fri, 5 Oct 2007 19:46:03 -0700
Subject: [Twisted-Python] Returning a Deferred as a result from another
	Deferred
In-Reply-To: <FFF3DEBD-FCFE-437D-A11B-CF12B8F4B33F@dreid.org>
References: <c423163f0710051441m449f3b08v9c1587848582ceb4@mail.gmail.com>
	<FFF3DEBD-FCFE-437D-A11B-CF12B8F4B33F@dreid.org>
Message-ID: <c423163f0710051946n5a0f4036s6c6464fd844abf1@mail.gmail.com>

On 10/5/07, David Reid <dreid at dreid.org> wrote:
> Hi Ryan,
> On Oct 5, 2007, at 2:41 PM, Ryan Fugger wrote:
>
> > Returning a Deferred as a result from another Deferred seems to be
> > disallowed by an assertion at the start of the callback chain.  Why is
> > this?  Right now I have worked around this limitation by wrapping my
> > Deferred in a list and then unwrapping it in the callback.
>
> The following will cause an AssertionError
>
> d = Deferred()
> d2 = Deferred()
>
> d2.callback(d)
>
> There isn't really a good reason to do this anyway.  Since there is
> likely no reason to not just return d with your callbacks attached.
> If you do need two deferreds here for some reason, you _can_ return a
> deferred from a callback.  In which case further callbacks will not
> be called until the second deferred has fired.

What if I need to return a Deferred from a deferToThread?

Ryan



From dreid at dreid.org  Fri Oct  5 21:38:37 2007
From: dreid at dreid.org (David Reid)
Date: Fri, 5 Oct 2007 20:38:37 -0700
Subject: [Twisted-Python] Returning a Deferred as a result from another
	Deferred
In-Reply-To: <c423163f0710051946n5a0f4036s6c6464fd844abf1@mail.gmail.com>
References: <c423163f0710051441m449f3b08v9c1587848582ceb4@mail.gmail.com>
	<FFF3DEBD-FCFE-437D-A11B-CF12B8F4B33F@dreid.org>
	<c423163f0710051946n5a0f4036s6c6464fd844abf1@mail.gmail.com>
Message-ID: <A683B1AC-FCEE-44E6-BC92-184392361551@dreid.org>


On Oct 5, 2007, at 7:46 PM, Ryan Fugger wrote:
> What if I need to return a Deferred from a deferToThread?

That isn't really a "What if I" question, that's a "Why do you think  
you" question.

deferToThread is best used for taking uncontrollably blocking APIs  
(preferably C APIs that release GIL) and getting a Deferred back.  I  
personally can not think of a single reason why you would ever take a  
Deferred returning API and shuffle it off to a thread.

-David



From rfugger at gmail.com  Sat Oct  6 00:34:45 2007
From: rfugger at gmail.com (Ryan Fugger)
Date: Fri, 5 Oct 2007 23:34:45 -0700
Subject: [Twisted-Python] Returning a Deferred as a result from another
	Deferred
In-Reply-To: <A683B1AC-FCEE-44E6-BC92-184392361551@dreid.org>
References: <c423163f0710051441m449f3b08v9c1587848582ceb4@mail.gmail.com>
	<FFF3DEBD-FCFE-437D-A11B-CF12B8F4B33F@dreid.org>
	<c423163f0710051946n5a0f4036s6c6464fd844abf1@mail.gmail.com>
	<A683B1AC-FCEE-44E6-BC92-184392361551@dreid.org>
Message-ID: <c423163f0710052334v33a620aduad99b5220c7b423b@mail.gmail.com>

On 10/5/07, David Reid <dreid at dreid.org> wrote:
>
> On Oct 5, 2007, at 7:46 PM, Ryan Fugger wrote:
> > What if I need to return a Deferred from a deferToThread?
>
> That isn't really a "What if I" question, that's a "Why do you think
> you" question.
>
> deferToThread is best used for taking uncontrollably blocking APIs
> (preferably C APIs that release GIL) and getting a Deferred back.  I
> personally can not think of a single reason why you would ever take a
> Deferred returning API and shuffle it off to a thread.

See my original email for the specifics.  I receive a command on a
connection, deferToThread for handling, which involves database
access, and then callFromThread to send a message on another
connection, which returns a Deferred that fires when the reply is
received, triggering a reply to the command on the original
connection.

Ryan



From glyph at divmod.com  Sat Oct  6 05:38:09 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Sat, 06 Oct 2007 11:38:09 -0000
Subject: [Twisted-Python] Returning a Deferred as a result from another
	Deferred
In-Reply-To: <c423163f0710052334v33a620aduad99b5220c7b423b@mail.gmail.com>
References: <c423163f0710051441m449f3b08v9c1587848582ceb4@mail.gmail.com>
	<FFF3DEBD-FCFE-437D-A11B-CF12B8F4B33F@dreid.org>
	<c423163f0710051946n5a0f4036s6c6464fd844abf1@mail.gmail.com>
	<A683B1AC-FCEE-44E6-BC92-184392361551@dreid.org>
	<c423163f0710052334v33a620aduad99b5220c7b423b@mail.gmail.com>
Message-ID: <20071006113809.5579.124642818.divmod.xquotient.5198@joule.divmod.com>

On 06:34 am, rfugger at gmail.com wrote:
>On 10/5/07, David Reid <dreid at dreid.org> wrote:

>>deferToThread is best used for taking uncontrollably blocking APIs
>>(preferably C APIs that release GIL) and getting a Deferred back.  I
>>personally can not think of a single reason why you would ever take a
>>Deferred returning API and shuffle it off to a thread.

>See my original email for the specifics.  I receive a command on a
>connection, deferToThread for handling, which involves database
>access, and then callFromThread to send a message on another
>connection, which returns a Deferred that fires when the reply is
>received, triggering a reply to the command on the original
>connection.

I assume the briefest Python summary of your code looks like this:

def thingInThread():
    databaseResult = databaseWork()
    deferred = reactor.callFromThread(otherConnection.sendRequest,
                                      databaseResult)
    return deferred

def thingInReactor():
    return threads.deferToThread(thingInThread)

This isn't really idiomatic Twisted code, because while it is 
technically safe (thingInThread doesn't *do* anything with its Deferred) 
it is slightly misleading.  Deferreds are not thread safe, and there's 
nothing you *could* do with that Deferred in thingInThread; if you 
wanted to add a callback to it, for example, you can't.

What you actually want is something more like this:

def thingInReactor():
    deferred = threads.deferToThread(databaseWork)
    def tellOtherConnection(databaseResult):
        return otherConnection.sendRequest(databaseResult)
    deferred.addCallback(tellOtherConnection)
    return deferred

This deferred can safely have callbacks added to it and generally be 
treated normally, since it never sees a thread.  Also, now you don't 
have the problem where .callback() is being called with Deferred as an 
argument; instead, you are returning one Deferred to another, which 
results in the outer Deferred ("deferred") receiving the inner 
Deferred's result (whatever "otherConnection.sendRequest" would have 
fired with).



From p.mayers at imperial.ac.uk  Sat Oct  6 09:04:46 2007
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Sat, 06 Oct 2007 16:04:46 +0100
Subject: [Twisted-Python] stdio.StandardIO, ServerProtocol and Services.
In-Reply-To: <491db6c90710051145p56f37195he89903503564df25@mail.gmail.com>
References: <491db6c90710051145p56f37195he89903503564df25@mail.gmail.com>
Message-ID: <1191683086.4059.5.camel@localhost.localdomain>


> The fact that adding reactor.run() (which shouldn't be needed in a
> Service, right?) implies to me that the reactor isn't starting up
> properly without it, and I can't see why.

How are you starting this code? Are you just executing it? If so, don't
do that. Use:

twistd -noy thefile.py

The Twisted application/service code just creates the relevant objects;
the application object still needs to be run. "twistd" will do this for
you.






From jasper at peak.org  Sat Oct  6 15:45:42 2007
From: jasper at peak.org (Jasper)
Date: Sat, 06 Oct 2007 14:45:42 -0700
Subject: [Twisted-Python] Jellying Decimals?
In-Reply-To: <1191683086.4059.5.camel@localhost.localdomain>
References: <491db6c90710051145p56f37195he89903503564df25@mail.gmail.com>
	<1191683086.4059.5.camel@localhost.localdomain>
Message-ID: <47080206.3040304@peak.org>

I'm trying to Jelly decimal.Decimals, using Twisted 2.4.  I've tried a 
few approaches, such as deriving my own Decimal class from 
decimal.Decimal, pb.RemoteCopy, and pb.Copyable, but no luck.

Is there an easy way to do this, without patching twisted itself?  Worse 
case I could always fall back on passing strings across the wire I 
guess, but that's not very enticing. :-/

-Jasper



From exarkun at twistedmatrix.com  Sat Oct  6 22:05:03 2007
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 07 Oct 2007 04:05:03 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1191729903.82.700579272@twistedmatrix.com

Bug summary
______________________
Summary for 2007-09-30 through 2007-10-07
Bugs opened: 5    Bugs closed: 2  Total open bugs: 1038 (+3)

|== Type Changes   |== Priority Changes   |== Component Changes     
|Defect:  +3       |Highest:  -2          |Core:                +0  
                   |High:     +1          |Release Management:  +1  
                   |Normal:   +3          |Trial:               -1  
                   |Low:      +1          |Web:                 +2  
                                          |Web2:                +1  


New / Reopened Bugs
______________________
                    ===== High =====
[#2843] twisted.web2.log.FileAccessLoggingObserver should take a file like object instead of a logPath. (opened by dreid)
    defect          web2       http://twistedmatrix.com/trac/ticket/2843

                    ===== Normal =====
[#2841] [PATCH] Add a redirect limit to HTTPPageGetter in twisted/web/client.py (opened by alexis)
    defect          web        http://twistedmatrix.com/trac/ticket/2841

[#2842] [PATCH] Handle bad formatted headers in lineRecieved() in twisted/web/http.py (opened by alexis)
    defect          web        http://twistedmatrix.com/trac/ticket/2842

[#2844] Missing parens in multiexception (opened by fumanchu)
    defect          core       http://twistedmatrix.com/trac/ticket/2844

                    ===== Low =====
[#2840] fails to build on Mac OS X with QuickTime 6 headers (opened by zooko)
    defect          release management http://twistedmatrix.com/trac/ticket/2840



Closed Bugs
______________________
                    ===== Highest =====
[#2837] TreeReporter setup/teardown error handling broke (opened by pjd, closed by therve, fixed)
    defect          trial      http://twistedmatrix.com/trac/ticket/2837

[#1192] twisted.test.test_policies calls reactor.iterate() (opened by exarkun, closed by therve, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1192



Ticket Lifetime Stats
______________________
Oldest open ticket - [#38] Should be a way to create documentation aliases (since 2003-07-12 16:08:03).
Newest open ticket - [#2844] Missing parens in multiexception (since 2007-10-05 12:22:50).

Mean open ticket age: 535 days, 4:48:39.014318.
Median: 436 days, 3:18:46.639559.
Standard deviation: 403 days, 8:09:45.372209.
Interquartile range: 504 days, 4:36:19.

Mean time between ticket creation and ticket resolution: 121 days, 20:41:54.745053.
Median: 14 days, 13:40:23.
Standard deviation is 224 days, 23:12:37.447753.
The interquartile range is 128 days, 12:08:19.

Mean time spent in review: 66 days, 19:49:44.881401.
Median: 4 days, 9:08:37.
Standard deviation: 147 days, 6:13:52.498708.
Interquartile range: 29 days, 10:44:36.

Mean number of times a ticket is reviewed: 1.94431554524.
Median: 1
Standard deviation: 1.58638608769.
Interquartile range: 1.


Contributor Stats
______________________
In the last 4 weeks,
    12 unique ticket reporters
    7 unique ticket reviewers
    2 unique ticket resolvers
In the last 24 weeks,
    73 unique ticket reporters
    16 unique ticket reviewers
    14 unique ticket resolvers
In the last 48 weeks,
    155 unique ticket reporters
    18 unique ticket reviewers
    26 unique ticket resolvers




From nachogomez at gmail.com  Sun Oct  7 12:04:56 2007
From: nachogomez at gmail.com (=?UTF-8?Q?Ra=C3=BAl_G=C3=B3mez_C.?=)
Date: Sun, 7 Oct 2007 14:04:56 -0400
Subject: [Twisted-Python] Running commands (ssh) from a GUI client
Message-ID: <684b0a740710071104k54a47a79se4070a0f58334f8b@mail.gmail.com>

Hi list, this is my first post :p

I'm new to Twisted/Conch and I was wondering how can I modify the
sshsimpleclient.py in order to run several commands, on a user request mode,
without the need to authenticate just before every command, just like a
normal interactive ssh session. This is for a GUI front end I'm writing
(PythonCard) that will execute some benchmarks on a remote server.

Thanks in advance...

Raul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20071007/2b36c565/attachment.html>

From paulswartz at gmail.com  Sun Oct  7 12:56:12 2007
From: paulswartz at gmail.com (Paul Swartz)
Date: Sun, 7 Oct 2007 14:56:12 -0400
Subject: [Twisted-Python] Running commands (ssh) from a GUI client
In-Reply-To: <684b0a740710071104k54a47a79se4070a0f58334f8b@mail.gmail.com>
References: <684b0a740710071104k54a47a79se4070a0f58334f8b@mail.gmail.com>
Message-ID: <324cfb540710071156n5d49c9e9i7b5b106e94fb9840@mail.gmail.com>

On 10/7/07, Raúl Gómez C. <nachogomez at gmail.com> wrote:
> Hi list, this is my first post :p
>
> I'm new to Twisted/Conch and I was wondering how can I modify the
> sshsimpleclient.py in order to run several commands, on a user request mode,
> without the need to authenticate just before every command, just like a
> normal interactive ssh session. This is for a GUI front end I'm writing
> (PythonCard) that will execute some benchmarks on a remote server.

If you keep that SSHConnection object around, you can open new
SSHChannels to execute commands without reauthenticating.

-p
-- 
Paul Swartz
paulswartz at gmail dot com
http://z3p.livejournal.com/
AIM: z3penguin

From iacovou at gmail.com  Mon Oct  8 02:15:33 2007
From: iacovou at gmail.com (kgi)
Date: Mon, 8 Oct 2007 11:15:33 +0300
Subject: [Twisted-Python] stdio.StandardIO, ServerProtocol and Services.
In-Reply-To: <1191683086.4059.5.camel@localhost.localdomain>
References: <491db6c90710051145p56f37195he89903503564df25@mail.gmail.com>
	<1191683086.4059.5.camel@localhost.localdomain>
Message-ID: <200710081115.33891.iacovou@gmail.com>

On Saturday 06 October 2007 18:04:46 Phil Mayers wrote:
> > The fact that adding reactor.run() (which shouldn't be needed in a
> > Service, right?) implies to me that the reactor isn't starting up
> > properly without it, and I can't see why.
>
> How are you starting this code? Are you just executing it? If so, don't
> do that. Use:
>
> twistd -noy thefile.py
>
> The Twisted application/service code just creates the relevant objects;
> the application object still needs to be run. "twistd" will do this for
> you.

Hi Phil; thanks for your reply.

Sadly, I am already using twistd to start this code. Virtually all my Twisted 
code is service.Service-based, and I am accustomed to just boshing the 
various services into an application hierarchy and letting twistd Do The 
Right Thing, which is why I'm confused as to why this snippet seems not to 
work.

Or rather, let me rephrase that: I'm not surprised that my code *overall* 
doesn't work quite how I would like, because I simply don't understand the 
inner workings of insults.ServerProtocol and recvline.RecvLine well enough, 
and I'm probably just being bone-headed.

However, I *am* surprised that adding an "illegal" reactor.run() to a 
service's startService() method seems to "kick" the snippet into behaving 
differently.

Cheers,

Ricky



From exarkun at divmod.com  Mon Oct  8 20:02:27 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 8 Oct 2007 22:02:27 -0400
Subject: [Twisted-Python] stdio.StandardIO, ServerProtocol and Services.
In-Reply-To: <200710081115.33891.iacovou@gmail.com>
Message-ID: <20071009020227.8162.890306013.divmod.quotient.20321@ohm>

On Mon, 8 Oct 2007 11:15:33 +0300, kgi <iacovou at gmail.com> wrote:
>On Saturday 06 October 2007 18:04:46 Phil Mayers wrote:
>> > The fact that adding reactor.run() (which shouldn't be needed in a
>> > Service, right?) implies to me that the reactor isn't starting up
>> > properly without it, and I can't see why.
>>
>> How are you starting this code? Are you just executing it? If so, don't
>> do that. Use:
>>
>> twistd -noy thefile.py
>>
>> The Twisted application/service code just creates the relevant objects;
>> the application object still needs to be run. "twistd" will do this for
>> you.
>
>Hi Phil; thanks for your reply.
>
>Sadly, I am already using twistd to start this code. Virtually all my Twisted
>code is service.Service-based, and I am accustomed to just boshing the
>various services into an application hierarchy and letting twistd Do The
>Right Thing, which is why I'm confused as to why this snippet seems not to
>work.

You want to do things with the terminal.  twistd also wants to do things
with the terminal (particularly if you use -n).  These two things come
into conflict.  The added call to reactor.run() seems to "fix" the issue
because it prevents twistd from finishing the usual startup tasks, so
your code gets to run and has the terminal to itself.

It's probably not feasible at this point to provide a terminal interface
to an application run with twistd on the controlling pty for that
application.  This is a feature which would need to be added to twistd.

Jean-Paul



From exarkun at divmod.com  Mon Oct  8 20:04:07 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 8 Oct 2007 22:04:07 -0400
Subject: [Twisted-Python] Jellying Decimals?
In-Reply-To: <47080206.3040304@peak.org>
Message-ID: <20071009020407.8162.94334609.divmod.quotient.20322@ohm>

On Sat, 06 Oct 2007 14:45:42 -0700, Jasper <jasper at peak.org> wrote:
>I'm trying to Jelly decimal.Decimals, using Twisted 2.4.  I've tried a few 
>approaches, such as deriving my own Decimal class from decimal.Decimal, 
>pb.RemoteCopy, and pb.Copyable, but no luck.
>
>Is there an easy way to do this, without patching twisted itself?  Worse 
>case I could always fall back on passing strings across the wire I guess, 
>but that's not very enticing. :-/

Jelly isn't currently extensible in this way.  There isn't really any
good reason that it *shouldn't* be.  However, someone will need to do
the work.

Jean-Paul



From exarkun at divmod.com  Mon Oct  8 20:10:03 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 8 Oct 2007 22:10:03 -0400
Subject: [Twisted-Python] Returning a Deferred as a result from another
	Deferred
In-Reply-To: 0
Message-ID: <20071009021003.8162.1824593723.divmod.quotient.20327@ohm>

On Fri, 5 Oct 2007 19:00:51 -0700, Ryan Fugger <rfugger at gmail.com> wrote:
>On 10/5/07, Jonathan Lange <jml at mumak.net> wrote:
>> On 10/6/07, Ryan Fugger <rfugger at gmail.com> wrote:
>> > Returning a Deferred as a result from another Deferred seems to be
>> > disallowed by an assertion at the start of the callback chain.  Why is
>> > this?  Right now I have worked around this limitation by wrapping my
>> > Deferred in a list and then unwrapping it in the callback.
>> >
>>
>> No it's not. I can guarantee this.
>>
>> What's the content of the AssertionError that you are getting?
>
>No content in the error.  Line 238 of twisted/internet/defer.py (first
>line in Deferred.callback) is:
>
>assert not isinstance(result, Deferred)
>
>That's pretty explicit in disallowing Deferreds...  I'm working with
>the version 2.5 release.

You've misread the code.  Jonathan is correct.  The rest of this thread
seems to go off on some tangent about threads which may or may not be
relevant to whatever problem you're trying to solve.  What led you to
be reading this code in the first place?

Glyph did make a good point, though.  You shouldn't ever have a Deferred
in a thread other than the reactor thread.  You shouldn't make them, you
shouldn't add callbacks to them, you shouldn't call them back.  It might
be legitimate to get one from the reactor thread, hold it for a while,
then send it back to the reactor thread, but I can't think of a case
where this would really be very useful.

Jean-Paul

>
>Ryan
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From nachogomez at gmail.com  Mon Oct  8 21:21:49 2007
From: nachogomez at gmail.com (=?UTF-8?Q?Ra=C3=BAl_G=C3=B3mez_C.?=)
Date: Mon, 8 Oct 2007 23:21:49 -0400
Subject: [Twisted-Python] Running commands (ssh) from a GUI client
In-Reply-To: <324cfb540710071156n5d49c9e9i7b5b106e94fb9840@mail.gmail.com>
References: <684b0a740710071104k54a47a79se4070a0f58334f8b@mail.gmail.com>
	<324cfb540710071156n5d49c9e9i7b5b106e94fb9840@mail.gmail.com>
Message-ID: <684b0a740710082021n591862e9j6f5a5ee2dd0908c2@mail.gmail.com>

Thanks Paul,

Raul

On 10/7/07, Paul Swartz <paulswartz at gmail.com> wrote:
>
>
> If you keep that SSHConnection object around, you can open new
> SSHChannels to execute commands without reauthenticating.
>
> -p
> --
> Paul Swartz
> paulswartz at gmail dot com
> http://z3p.livejournal.com/
> AIM: z3penguin
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20071008/b7886c6e/attachment.html>

From rfugger at gmail.com  Mon Oct  8 23:59:49 2007
From: rfugger at gmail.com (Ryan Fugger)
Date: Mon, 8 Oct 2007 22:59:49 -0700
Subject: [Twisted-Python] Returning a Deferred as a result from another
	Deferred
In-Reply-To: <20071009021003.8162.1824593723.divmod.quotient.20327@ohm>
References: <20071009021003.8162.1824593723.divmod.quotient.20327@ohm>
Message-ID: <c423163f0710082259u469233b6nc6edf02dee8fbc85@mail.gmail.com>

On 10/8/07, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> On Fri, 5 Oct 2007 19:00:51 -0700, Ryan Fugger <rfugger at gmail.com> wrote:
> >On 10/5/07, Jonathan Lange <jml at mumak.net> wrote:
> >> On 10/6/07, Ryan Fugger <rfugger at gmail.com> wrote:
> >> > Returning a Deferred as a result from another Deferred seems to be
> >> > disallowed by an assertion at the start of the callback chain.  Why is
> >> > this?  Right now I have worked around this limitation by wrapping my
> >> > Deferred in a list and then unwrapping it in the callback.
> >> >
> >>
> >> No it's not. I can guarantee this.
> >>
> >> What's the content of the AssertionError that you are getting?
> >
> >No content in the error.  Line 238 of twisted/internet/defer.py (first
> >line in Deferred.callback) is:
> >
> >assert not isinstance(result, Deferred)
> >
> >That's pretty explicit in disallowing Deferreds...  I'm working with
> >the version 2.5 release.
>
> You've misread the code.  Jonathan is correct.

What is that assertion guarding against then?  Seems to me like it is
explicitly preventing you from doing this:

d1 = Deferred()
d2 = Deferred()
d1.callback(d2)

In fact, that exact code raises the AssertionError in question.  If
the intention is to allow this, then the assertion needs to be
removed.

> The rest of this thread
> seems to go off on some tangent about threads which may or may not be
> relevant to whatever problem you're trying to solve.  What led you to
> be reading this code in the first place?
>
> Glyph did make a good point, though.  You shouldn't ever have a Deferred
> in a thread other than the reactor thread.  You shouldn't make them, you
> shouldn't add callbacks to them, you shouldn't call them back.  It might
> be legitimate to get one from the reactor thread, hold it for a while,
> then send it back to the reactor thread, but I can't think of a case
> where this would really be very useful.

Yes, and thanks for that.  I was creating a Deferred and adding a
callback in a thread, so in fixing that, the assertion above no longer
comes into play.

Ryan



From jml at mumak.net  Tue Oct  9 00:37:55 2007
From: jml at mumak.net (Jonathan Lange)
Date: Tue, 9 Oct 2007 19:37:55 +1300
Subject: [Twisted-Python] Marking as review
Message-ID: <d06a5cd30710082337w31dd2554hedf24922d032dc99@mail.gmail.com>

Hello guys,

Not a big deal, but is it still a good idea to mark tickets as
"HIGHEST" priority when we put them up for review? 'kenaan' seems to
be doing a good enough job of reminding people about review tickets as
is, and I could use the extra mouse-clicks (I'm saving!)

jml



From exarkun at divmod.com  Tue Oct  9 04:12:49 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 9 Oct 2007 06:12:49 -0400
Subject: [Twisted-Python] Returning a Deferred as a result from another
	Deferred
In-Reply-To: <c423163f0710082259u469233b6nc6edf02dee8fbc85@mail.gmail.com>
Message-ID: <20071009101249.8162.2056276005.divmod.quotient.20456@ohm>

On Mon, 8 Oct 2007 22:59:49 -0700, Ryan Fugger <rfugger at gmail.com> wrote:
>On 10/8/07, Jean-Paul Calderone <exarkun at divmod.com> wrote:
>> On Fri, 5 Oct 2007 19:00:51 -0700, Ryan Fugger <rfugger at gmail.com> wrote:
>> >On 10/5/07, Jonathan Lange <jml at mumak.net> wrote:
>> >> On 10/6/07, Ryan Fugger <rfugger at gmail.com> wrote:
>> >> > Returning a Deferred as a result from another Deferred seems to be
>> >> > disallowed by an assertion at the start of the callback chain.
>>
>> You've misread the code.  Jonathan is correct.
>
>What is that assertion guarding against then?  Seems to me like it is
>explicitly preventing you from doing this:
>
>d1 = Deferred()
>d2 = Deferred()
>d1.callback(d2)
>
>In fact, that exact code raises the AssertionError in question.  If
>the intention is to allow this, then the assertion needs to be
>removed.

Here's what it sounds like "returning a Deferred as a result from another
Deferred" describes:

    def f(result):
        return Deferred()

    d = Deferred()
    d.addCallback(f)
    d.callback(None)

This is a useful and very common thing to do.  I see this isn't what you
were attempting to describe now, though.

Jean-Paul



From nachogomez at gmail.com  Tue Oct  9 05:05:10 2007
From: nachogomez at gmail.com (=?UTF-8?Q?Ra=C3=BAl_G=C3=B3mez_C.?=)
Date: Tue, 9 Oct 2007 07:05:10 -0400
Subject: [Twisted-Python] Running commands (ssh) from a GUI client
In-Reply-To: <324cfb540710071156n5d49c9e9i7b5b106e94fb9840@mail.gmail.com>
References: <684b0a740710071104k54a47a79se4070a0f58334f8b@mail.gmail.com>
	<324cfb540710071156n5d49c9e9i7b5b106e94fb9840@mail.gmail.com>
Message-ID: <684b0a740710090405q2fe04c4cr26a0494e35b9d1a4@mail.gmail.com>

I'm really confused at this point,

Even if I keep the SSHConnection object, the commands aren't executed until
the last one is queued, I think this is happening because of the deferred,
but I'm not sure. So, how can I run these commands each one at a time
(synchronously)?

Maybe this sounds really trivial to some of you, but I'm stock!

Thanks!

Raul

On 10/7/07, Paul Swartz <paulswartz at gmail.com> wrote:
>
> On 10/7/07, Raúl Gómez C. <nachogomez at gmail.com> wrote:
> > Hi list, this is my first post :p
> >
> > I'm new to Twisted/Conch and I was wondering how can I modify the
> > sshsimpleclient.py in order to run several commands, on a user request
> mode,
> > without the need to authenticate just before every command, just like a
> > normal interactive ssh session. This is for a GUI front end I'm writing
> > (PythonCard) that will execute some benchmarks on a remote server.
>
> If you keep that SSHConnection object around, you can open new
> SSHChannels to execute commands without reauthenticating.
>
> -p
> --
> Paul Swartz
> paulswartz at gmail dot com
> http://z3p.livejournal.com/
> AIM: z3penguin
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20071009/40152e3a/attachment.html>

From iacovou at gmail.com  Tue Oct  9 05:36:28 2007
From: iacovou at gmail.com (kgi)
Date: Tue, 9 Oct 2007 14:36:28 +0300
Subject: [Twisted-Python] stdio.StandardIO, ServerProtocol and Services.
In-Reply-To: <20071009020227.8162.890306013.divmod.quotient.20321@ohm>
References: <20071009020227.8162.890306013.divmod.quotient.20321@ohm>
Message-ID: <200710091436.28753.iacovou@gmail.com>

On Tuesday 09 October 2007 05:02:27 Jean-Paul Calderone wrote:
> You want to do things with the terminal.  twistd also wants to do things
> with the terminal (particularly if you use -n).  These two things come
> into conflict.  The added call to reactor.run() seems to "fix" the issue
> because it prevents twistd from finishing the usual startup tasks, so
> your code gets to run and has the terminal to itself.
>
> It's probably not feasible at this point to provide a terminal interface
> to an application run with twistd on the controlling pty for that
> application.  This is a feature which would need to be added to twistd.

Hi Jean-Paul, thanks for your reply (in fact, you seem to have gone on 
a "reply to all unanswered questions" rampage!).

Thanks for clearing that up. It's good to know, even though it's not what I 
wanted to hear, because now I can stop bashing my head against that 
particular brick wall and take another approach.

Regards,

Ricky



From exarkun at divmod.com  Tue Oct  9 05:43:36 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 9 Oct 2007 07:43:36 -0400
Subject: [Twisted-Python] Running commands (ssh) from a GUI client
In-Reply-To: <684b0a740710090405q2fe04c4cr26a0494e35b9d1a4@mail.gmail.com>
Message-ID: <20071009114336.8162.1009988299.divmod.quotient.20475@ohm>

On Tue, 9 Oct 2007 07:05:10 -0400, "Raúl Gómez C." <nachogomez at gmail.com> wrote:
>I'm really confused at this point,
>
>Even if I keep the SSHConnection object, the commands aren't executed until
>the last one is queued, I think this is happening because of the deferred,
>but I'm not sure. So, how can I run these commands each one at a time
>(synchronously)?
>
>Maybe this sounds really trivial to some of you, but I'm stock!

Perhaps you can share a minimal example which demonstrates the problem
you are having?  Remember, a minimal example can be run by itself but
only contains the code necessary to reproduce the behavior about which
you have a question.  It's easier to answer questions about such examples
since they show exactly what you're trying to do.

Jean-Paul



From Ross.McKerchar at sophos.com  Tue Oct  9 10:41:47 2007
From: Ross.McKerchar at sophos.com (Ross.McKerchar at sophos.com)
Date: Tue, 9 Oct 2007 17:41:47 +0100
Subject: [Twisted-Python] How to switch users in SSH session.
In-Reply-To: <OFD206E0F8.6BF050E8-ON8025736F.0053C00D-8025736F.0053C3E7@LocalDomain>
Message-ID: <OF91D11CD6.A3475C36-ON8025736F.00585BE8-8025736F.005BB93A@sophos.com>

Paul_S_Johnson at mnb.uscourts.gov Paul_S_Johnson at mnb.uscourts.gov 
Thu Sep 27 16:00:14 EDT 200:

> After much wrangling and a small miracle I have managed to write an 
object 
> that fetches the output of three commands in the order given through an 
> SSH connection. How come I cannot switch users? Some of the information 
I 
> need can only be fetched through a root account and security is such 
that 
> I cannot log in remotely from a root account but must switch once logged 

> in from an account with less than root privileges.

I've been trying something similar. As you've probably found out you cant 
just write in the password to su - you'll get an error "Standard in must 
be a tty". Basically I think su needs a shell to work.

Consequently, before sending your password, you'll need to request a 
shell. I would've been utterly clueless about this if it wasn't for the 
post @
http://twistedmatrix.com/pipermail/twisted-python/2007-July/015793.html, 
from which I managed to extract the crucial code:

term = 'ansi'
winsz = struct.pack('4H', 80, 100, 80, 100)
winSize = struct.unpack('4H', winsz)
ptyReqData = session.packRequest_pty_req(term, winSize, '')
self.conn.sendRequest(self, 'pty-req', ptyReqData)
self.conn.sendRequest(self, 'shell', '')

Sticking this in your SSHChannel.channelOpen method will allow you to get 
a shell. Unfortunately you then have to interact with the session in an 
expect-like manner which turns the whole procedure into one big easily 
broken hack. Basically I just write "su -" and wait for my method 
dataReceived to return "password:" at which point I write in the password.

Another point to mention is that the ssh session is still not root, the 
root functionality is being provided by the shell instance. Consequently 
any new channels opened up will not be root so you cant easily use this 
method to scp file's that are only readable for root. You can of course 
cat from the shell session but then you have issues with line wrapping and 
reliably figuring out when the file ends and your shell prompt begins.

I looked into trying to do some setreuid/setuid magic in the hope that I 
could issue a command from my root shell prompt that would elevate the 
whole ssh process to root allowing all my channels root priviliges. 
However I soon got well out of my depth and decided it wasn't possible, at 
least by me :)

So, as far as I can see, it's not possible, if your server doesn't allow 
root access to open up a channel that has root priviliges. The only way to 
do it is in the aformentioned messy way via a shell & su (which I gave up 
on when my regular expression took up two lines on my screen and still 
didn't reliable match half the shell prompts it needed to).

I would love somebody to prove me wrong and let me know of a nice way 
round this.

Of course - these problems are nothing to do with twisted and all to do 
with the way ssh works.

-ross

-- 
Ross McKerchar
Systems Analyst, Sophos

Tel: 01235 559933
Web: http://www.sophos.com
Sophos - security and control

Sophos Plc, The Pentagon, Abingdon Science Park, Abingdon,
OX14 3YP, United Kingdom.

Company Reg No 2096520. VAT Reg No GB 348 3873 20.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20071009/6d11204a/attachment.html>

From Paul_S_Johnson at mnb.uscourts.gov  Tue Oct  9 11:39:38 2007
From: Paul_S_Johnson at mnb.uscourts.gov (Paul_S_Johnson at mnb.uscourts.gov)
Date: Tue, 9 Oct 2007 12:39:38 -0500
Subject: [Twisted-Python] Running commands (ssh) from a GUI client
In-Reply-To: <684b0a740710071104k54a47a79se4070a0f58334f8b@mail.gmail.com>
Message-ID: <OF0ED303F2.E7706FBC-ON8625736F.0060300F-8625736F.0061032D@uscmail.uscourts.gov>

Raul,

This is simply some work-in-progress code, but is basically what you are 
looking for even written for PythonCard. This takes a list of three 
commands and runs them in the order given using deferreds to wait for the 
previous to complete before executing the next.

This took me about forever to get it this far. If you make and significant 
improvements, please share.

One remaining mystery is how to switch users once logged in. For example, 
I need to run some things as root.

Paul

============================================
from twisted.conch import error
from twisted.conch.ssh import transport, connection, keys, userauth, 
channel, common
from twisted.internet import defer, protocol, reactor
import sys, getpass, os, string

from PythonCard import model, twistedModel


class ClientCommandTransport(transport.SSHClientTransport):
    def __init__(self, username, password, cmds, caller):
        self.username = username
        self.password = password
        self.cmds = cmds
        self.caller = caller
 
    def verifyHostKey(self, pubKey, fingerprint):
        # in a real app, you should verify that the fingerprint matches
        # the one you expected to get from this server
        return defer.succeed(True)

    def connectionSecure(self):
        self.requestService(PasswordAuth(self.username, self.password, 
ClientConnection(self.cmds, self.caller)))

class PasswordAuth(userauth.SSHUserAuthClient):
    def __init__(self, user, password, connection):
        userauth.SSHUserAuthClient.__init__(self, user, connection)
        self.password = password
 
    def getPassword(self, prompt=None):
        return defer.succeed(self.password)

class ClientConnection(connection.SSHConnection):
    def __init__(self, cmds, caller, *args, **kwargs):
        connection.SSHConnection.__init__(self)
        self.cmds = cmds
        self.caller = caller

    #======================
    def serviceStarted(self):
        self.d = defer.Deferred()
        self.d.addCallback(self._cbFirst)
        self.d.addErrback(self._ebFirst)
        self.openChannel(CommandChannel(self.cmds[0], lastcmd=0, 
conn=self))

    def _cbFirst(self, result):
        print 'CALLBACK Result 1:', result
        self.caller.responses.append(result.rstrip())
        self.d = defer.Deferred()
        self.d.addCallback(self._cbSecond)
        self.d.addErrback(self._ebSecond)
        self.openChannel(CommandChannel(self.cmds[1], lastcmd=0, 
conn=self))

    def _ebFirst(self, f):
        self.caller.responses.append(None)
        print "Error 1"
        self.d = defer.Deferred()
        self.d.addCallback(self._cbSecond)
        self.d.addErrback(self._ebSecond)
        self.openChannel(CommandChannel(self.cmds[1], lastcmd=0, 
conn=self))
        #log.err()

    def _cbSecond(self, result):
        print 'CALLBACK Result 2:', result
        self.caller.responses.append(result.rstrip())
        self.d = defer.Deferred()
        self.d.addCallback(self._cbThird)
        self.d.addErrback(self._ebThird)
        self.openChannel(CommandChannel(self.cmds[2], lastcmd=1, 
conn=self))

    def _ebSecond(self, f):
        self.caller.responses.append(None)
        self.d = defer.Deferred()
        self.d.addCallback(self._cbThird)
        self.d.addErrback(self._ebThird)
        self.openChannel(CommandChannel(self.cmds[2], lastcmd=1, 
conn=self))
        #log.err()

    def _cbThird(self, result):
        self.caller.responses.append(result.rstrip())
        print 'CALLBACK Result 3:', result
        #reactor.stop()

    def _ebThird(self, f):
        self.caller.responses.append(None)
        log.err()
        #reactor.stop()
    #======================

class CommandChannel(channel.SSHChannel):
    name = 'session'
 
    def __init__(self, command, lastcmd, *args, **kwargs):
        channel.SSHChannel.__init__(self, *args, **kwargs)
        self.command = command
        self.lastcmd = lastcmd
        self.data = ""

    def channelOpen(self, data):
        self.conn.sendRequest(self, 'exec', common.NS(self.command), 
wantReply=True).addCallback(self._gotResponse)

    def _gotResponse(self, _):
        #print "RESPONSE"
        self.conn.sendEOF(self)

    def dataReceived(self, data):
        #print "Data Received:", data
        self.data += data

    def closed(self):
        self.conn.d.callback(self.data)
        self.loseConnection()
        ##        if self.lastcmd:
        ##            print "closing reactor."
        ##            reactor.stop()

class ClientCommandFactory(protocol.ClientFactory):
    def __init__(self, username, password, cmds, caller):
        self.username = username
        self.password = password
        self.cmds = cmds
        self.caller = caller

    def buildProtocol(self, addr):
        protocol = ClientCommandTransport(self.username, self.password, 
self.cmds, self.caller)
        return protocol

 
class SSH():
    """ Contains a SSH connection, runs commands, and stores results. """
    def __init__(self, host, username, password, cmds):
        self.host = host
        self.username = username
        self.password = password
        self.cmds = cmds
        self.responses = []
        self.run_commands()

    def run_commands(self):
        factory = ClientCommandFactory(self.username, self.password, 
self.cmds, self)
        reactor.connectTCP(self.host, 22, factory)
        #reactor.registerWxApp(app)
        #reactor.run()



#from PythonCard import model

class Dashboard(model.Background):

    def on_initialize(self, event):
        self.responses = []
 
    def on_btSend_mouseClick(self, event):
        print "Hello World!"
        self.run_commands("myhost", "myusername", "mypassword", ["id", 
"pwd", "ls -l"])
        #for i, response in enumerate(self.ssh.responses):
        #    print i, response
        #    print "=" * 25

    def on_btCheck_mouseClick(self, event):
        """ Check it out! """
        for i, response in enumerate(self.responses):
            print i, response
            print "=" * 25
        print "Done."
 
    """ Contains a SSH connection, runs commands, and stores results. """
    #def __init__(self, host, username, password, cmds):

    def run_commands(self, host, username, password, cmds):
        self.host = host
        self.username = username
        self.password = password
        self.cmds = cmds
        self.responses = []
 

        self.factory = ClientCommandFactory(self.username, self.password, 
self.cmds, self)
        reactor.connectTCP(self.host, 22, self.factory)
        #reactor.run()
        for i, response in enumerate(self.responses):
            print i, response
            print "=" * 25

#print "\nDone."

if __name__ == '__main__':
    app = twistedModel.TwistedApplication(Dashboard)
    app.MainLoop()


Here's the PythonCard resource file:

{'application':{'type':'Application',
          'name':'Minimal',
    'backgrounds': [
    {'type':'Background',
          'name':'bgMin',
          'title':'Minimal PythonCard Application',
          'size':(382, 271),

        'menubar': {'type':'MenuBar',
         'menus': [
             {'type':'Menu',
             'name':'menuFile',
             'label':'&File',
             'items': [
                  {'type':'MenuItem',
                   'name':'menuFileExit',
                   'label':'E&xit\tAlt+X',
                   'command':'exit',
                  },
              ]
             },
         ]
     },
         'components': [

{'type':'Button', 
    'name':'btCheck', 
    'position':(210, 186), 
    'label':u'Check', 
    },

{'type':'Button', 
    'name':'btSend', 
    'position':(102, 185), 
    'label':u'Send', 
    },

{'type':'CodeEditor', 
    'name':'ceReponse', 
    'position':(6, 33), 
    'size':(360, 141), 
    'backgroundColor':(255, 255, 255, 255), 
    },

{'type':'TextField', 
    'name':'field1', 
    'position':(5, 5), 
    'size':(150, -1), 
    'text':u'Hello PythonCard', 
    },

] # end components
} # end background
] # end backgrounds
} }


twisted-python-bounces at twistedmatrix.com wrote on 10/07/2007 01:04:56 PM:

> Hi list, this is my first post :p
> 
> I'm new to Twisted/Conch and I was wondering how can I modify the 
> sshsimpleclient.py in order to run several commands, on a user 
> request mode, without the need to authenticate just before every 
> command, just like a normal interactive ssh session. This is for a 
> GUI front end I'm writing (PythonCard) that will execute some 
> benchmarks on a remote server. 
> 
> Thanks in advance...
> 
> Raul_______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20071009/8fea0ee3/attachment.html>

From nachogomez at gmail.com  Tue Oct  9 13:21:54 2007
From: nachogomez at gmail.com (=?UTF-8?Q?Ra=C3=BAl_G=C3=B3mez_C.?=)
Date: Tue, 9 Oct 2007 15:21:54 -0400
Subject: [Twisted-Python] Running commands (ssh) from a GUI client
In-Reply-To: <OF0ED303F2.E7706FBC-ON8625736F.0060300F-8625736F.0061032D@uscmail.uscourts.gov>
References: <684b0a740710071104k54a47a79se4070a0f58334f8b@mail.gmail.com>
	<OF0ED303F2.E7706FBC-ON8625736F.0060300F-8625736F.0061032D@uscmail.uscourts.gov>
Message-ID: <684b0a740710091221v36e8a97fq54240c0118b99755@mail.gmail.com>

Thank you very much Paul, I'll give it a try and I'll post any change, I'm
really grateful... but giving it an overview, I think you are not executing
the commands the way I want, when you pass a list of commands on the
Dashboard (self.run_commands("myhost", "myusername", "mypassword", ["id",
"pwd", "ls -l"])) you are running it asynchronously (the way I'm getting it,
I mean, the three commands are passed to the CommandChannel class, and then
they gets run, and later they return it's data), I need to run commands from
the GUI, without previously knowing what commands will the user want to run
(the normal GUI interaction), and avoiding to all cost to authenticate for
each command (that's because some networks that my tool will connect takes
too long to authenticate ssh connections, but once they are authenticated,
they works just fine).

But thanks again Paul, if you want a suggestion on your code, I think (but
I'm not sure) you can get rid of a lot of code if you implement something
like I have (see below, in the answer to Jean-Paul), if you iterate on the
list of command, you can change the raw_input() with something like this:

for cmd in self.cmds:
    self.requestService(PasswordAuth(self.username, self.password,
ClientConnection(cmd)))

Just a suggestion, hope that helps...


On 10/9/07, Paul_S_Johnson at mnb.uscourts.gov <Paul_S_Johnson at mnb.uscourts.gov>
wrote:
>
>
> Raul,
>
> This is simply some work-in-progress code, but is basically what you are
> looking for even written for PythonCard. This takes a list of three commands
> and runs them in the order given using deferreds to wait for the previous to
> complete before executing the next.
>
> This took me about forever to get it this far. If you make and significant
> improvements, please share.
>
> One remaining mystery is how to switch users once logged in. For example,
> I need to run some things as root.
>
> Paul
>


Jean-Paul, is not easy to post only a small working (by itself) part of what
I'm trying to do, is the sshclient.py (example
10-4)<http://www.ora.de/catalog/twistedadn/chapter/ch10.pdf>of the
Twisted
Network Programming Essentials Book by Abe Fettig (based on the
sshsimpleclient.py by Paul Swartz), but modified in order ask for the
command when the ClientConnection class is called in the
ClientCommandTransport class, like this:


class ClientCommandTransport(transport.SSHClientTransport):

    def __init__(self, username, password):
        self.username = username
        self.password = password

    def verifyHostKey(self, pubKey, fingerprint):
        # in a real app, you should verify that the fingerprint matches
        # the one you expected to get from this server
        return defer.succeed(True)

    def connectionSecure(self):
        cmd= ''
        while True:
            cmd = raw_input('Command: ')
            if cmd != 'quit':
                self.requestService(PasswordAuth(self.username,
self.password, ClientConnection(cmd)))
            else:
                print '\nGood Bye!\n'
                break

Note: the Bold part is what I've added to the original code


PD: I think Paul is a popular name in this list :p
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20071009/b7ec8cce/attachment.html>

From sipickles at hotmail.com  Tue Oct  9 14:21:44 2007
From: sipickles at hotmail.com (Simon Pickles)
Date: Tue, 09 Oct 2007 21:21:44 +0100
Subject: [Twisted-Python] UDP with multiple connections
Message-ID: <470BE2D8.6040601@hotmail.com>

Ok, UDP is new to me, so please be gentle....

I've got a server authentication app which needs to accept many client 
connections, but also dispatch messages to a master server. Am I best 
using unconnected UDP? do i then have to deal with each received 
datagram by checking which host is has come from and acting accordingly?

thanks

Simon



From jasper at peak.org  Tue Oct  9 16:18:26 2007
From: jasper at peak.org (Jasper)
Date: Tue, 09 Oct 2007 15:18:26 -0700
Subject: [Twisted-Python] Jellying Decimals?
In-Reply-To: <20071009020407.8162.94334609.divmod.quotient.20322@ohm>
References: <20071009020407.8162.94334609.divmod.quotient.20322@ohm>
Message-ID: <470BFE32.6060006@peak.org>

Jean-Paul Calderone wrote:
> On Sat, 06 Oct 2007 14:45:42 -0700, Jasper <jasper at peak.org> wrote:
>> I'm trying to Jelly decimal.Decimals, using Twisted 2.4.  I've tried 
>> a few approaches, such as deriving my own Decimal class from 
>> decimal.Decimal, pb.RemoteCopy, and pb.Copyable, but no luck.
>>
>> Is there an easy way to do this, without patching twisted itself?  
>> Worse case I could always fall back on passing strings across the 
>> wire I guess, but that's not very enticing. :-/
>
> Jelly isn't currently extensible in this way.  There isn't really any
> good reason that it *shouldn't* be.  However, someone will need to do
> the work.
>
> Jean-Paul
>

That was my impression from looking through the code as well; jelly 
requires old style python classes, and that's that.

I've hacked in a special case work around for Decimals, but it's just a 
hack and not really suitable for general inclusion.  I'm reluctant to 
put further work into it, as I recall that there is a new version PB in 
the works, which I suspect will completely redo how things are "jellied".

-Jasper



From exarkun at divmod.com  Tue Oct  9 17:23:15 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 9 Oct 2007 19:23:15 -0400
Subject: [Twisted-Python] Jellying Decimals?
In-Reply-To: <470BFE32.6060006@peak.org>
Message-ID: <20071009232315.8162.612549130.divmod.quotient.20717@ohm>

On Tue, 09 Oct 2007 15:18:26 -0700, Jasper <jasper at peak.org> wrote:
>Jean-Paul Calderone wrote:
>
>That was my impression from looking through the code as well; jelly requires 
>old style python classes, and that's that.
>
>I've hacked in a special case work around for Decimals, but it's just a hack 
>and not really suitable for general inclusion.  I'm reluctant to put further 
>work into it, as I recall that there is a new version PB in the works, which 
>I suspect will completely redo how things are "jellied".

Just to clarify, there isn't a new version of PB in the works.  There's
Foolscap, which was called "newpb" for a while, but is developed outside
of Twisted now.  There's also AMP, which doesn't really resemble PB at
all, but is developed as part of Twisted.  PB itself is still maintained.

Jean-Paul



From p.mayers at imperial.ac.uk  Tue Oct  9 17:37:02 2007
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 10 Oct 2007 00:37:02 +0100
Subject: [Twisted-Python] UDP with multiple connections
In-Reply-To: <470BE2D8.6040601@hotmail.com>
References: <470BE2D8.6040601@hotmail.com>
Message-ID: <1191973022.2554.18.camel@localhost.localdomain>

On Tue, 2007-10-09 at 21:21 +0100, Simon Pickles wrote:
> Ok, UDP is new to me, so please be gentle....
> 
> I've got a server authentication app which needs to accept many client 
> connections, but also dispatch messages to a master server. Am I best 
> using unconnected UDP? 

You are *best* using TCP. Very few applications are actually suited to
UDP. UDP:

 * has no connection state
 * has no flow control
 * is unfriendly to networks (really the same as the previous point)
 * has no keepalives
 * has problems with MTU and fragmentation for messages > ~1400 bytes
 * is subject to trivial spoofing
 * has no message sequencing
 * is hard to run crypto over (SSL over TCP == trivial)

...and so on.

> do i then have to deal with each received 
> datagram by checking which host is has come from and acting accordingly?

Twisted's UDP support is all "unconnected". All DatagramProtocol
instances get a call to:

 def datagramReceived(self, data, addr)

...where "addr=(ip,port)" for IPv4

Similarly, you would do:

  self.transport.write(bytes, addr)

So, unconnected UDP is your *only* option, because that's how Twisted
does it.

However, so-called "connected" UDP is really just a way of saving the
destination address on the socket. There's no *actual* connection
involved.

> 
> thanks
> 
> Simon
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From jasper at peak.org  Tue Oct  9 17:55:33 2007
From: jasper at peak.org (Jasper)
Date: Tue, 09 Oct 2007 16:55:33 -0700
Subject: [Twisted-Python] Jellying Decimals?
In-Reply-To: <20071009232315.8162.612549130.divmod.quotient.20717@ohm>
References: <20071009232315.8162.612549130.divmod.quotient.20717@ohm>
Message-ID: <470C14F5.4070100@peak.org>

Jean-Paul Calderone wrote:
> On Tue, 09 Oct 2007 15:18:26 -0700, Jasper <jasper at peak.org> wrote:
>> Jean-Paul Calderone wrote:
>>
>> That was my impression from looking through the code as well; jelly 
>> requires old style python classes, and that's that.
>>
>> I've hacked in a special case work around for Decimals, but it's just 
>> a hack and not really suitable for general inclusion.  I'm reluctant 
>> to put further work into it, as I recall that there is a new version 
>> PB in the works, which I suspect will completely redo how things are 
>> "jellied".
>
> Just to clarify, there isn't a new version of PB in the works.  There's
> Foolscap, which was called "newpb" for a while, but is developed outside
> of Twisted now.  There's also AMP, which doesn't really resemble PB at
> all, but is developed as part of Twisted.  PB itself is still maintained.
>
> Jean-Paul
I understand that PB is still maintained, but it's also a dead end 
without further development, and rather lacking in a few areas.  From 
the bits I've seen Foolscap looks like it'll be enough of an improvement 
that I'll happily switch when it's done.  I'd actually switch now, but I 
need something stable for the time being.

I hadn't been aware of AMP; after a quick look at the docs it seems a 
bit low level for my purposes though, as I need to do more than just 
send messages.

-Jasper



From exarkun at divmod.com  Tue Oct  9 18:00:43 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 9 Oct 2007 20:00:43 -0400
Subject: [Twisted-Python] UDP with multiple connections
In-Reply-To: <1191973022.2554.18.camel@localhost.localdomain>
Message-ID: <20071010000043.8162.376108862.divmod.quotient.20739@ohm>

On Wed, 10 Oct 2007 00:37:02 +0100, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
>On Tue, 2007-10-09 at 21:21 +0100, Simon Pickles wrote:
>> Ok, UDP is new to me, so please be gentle....
>>
>> I've got a server authentication app which needs to accept many client
>> connections, but also dispatch messages to a master server. Am I best
>> using unconnected UDP?
>
>You are *best* using TCP. Very few applications are actually suited to
>UDP. UDP:
>
> * has no connection state
> * has no flow control
> * is unfriendly to networks (really the same as the previous point)
> * has no keepalives
> * has problems with MTU and fragmentation for messages > ~1400 bytes
> * is subject to trivial spoofing
> * has no message sequencing
> * is hard to run crypto over (SSL over TCP == trivial)
>
>...and so on.
>
>> do i then have to deal with each received
>> datagram by checking which host is has come from and acting accordingly?
>
>Twisted's UDP support is all "unconnected". All DatagramProtocol
>instances get a call to:
>
> def datagramReceived(self, data, addr)
>
>...where "addr=(ip,port)" for IPv4
>
>Similarly, you would do:
>
>  self.transport.write(bytes, addr)
>
>So, unconnected UDP is your *only* option, because that's how Twisted
>does it.
>
>However, so-called "connected" UDP is really just a way of saving the
>destination address on the socket. There's no *actual* connection
>involved.
>

Everything else here is right, but one correction: Twisted does support
"connected" UDP, via IUDPTransport.connect().  This is indeed little more
than a convenience API, though.  You get to skip passing the address
argument to transport.write() if you use it, and you _may_ receive
connectionFailed notification (which, for example, tells you if you are
sending packets to a port where no application is listening for them),
if all the involved routers decide to cooperate (they frequently will not).

Jean-Paul



From glyph at divmod.com  Tue Oct  9 18:21:49 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Wed, 10 Oct 2007 00:21:49 -0000
Subject: [Twisted-Python] Jellying Decimals?
In-Reply-To: <470C14F5.4070100@peak.org>
References: <20071009232315.8162.612549130.divmod.quotient.20717@ohm>
	<470C14F5.4070100@peak.org>
Message-ID: <20071010002149.5579.1749384940.divmod.xquotient.5398@joule.divmod.com>

On 9 Oct, 11:55 pm, jasper at peak.org wrote:
>I understand that PB is still maintained, but it's also a dead end 
>without further development, and rather lacking in a few areas.  From 
>the bits I've seen Foolscap looks like it'll be enough of an 
>improvement that I'll happily switch when it's done.  I'd actually 
>switch now, but I need something stable for the time being.

There is nobody currently working on a major overhaul of PB, but that 
doesn't meant that further development is prohibited.  If you have 
specific features you would like added or bugs fixed in PB, you can feel 
free to contribute patches and we will integrate them (subject to the 
normal review process, of course).

That said, if Foolscap better suits your purposes, by all means use it!
>I hadn't been aware of AMP; after a quick look at the docs it seems a 
>bit low level for my purposes though, as I need to do more than just 
>send messages.

Since the FAQ of "isn't PB dead" has been raised yet again, I figure 
it's high time to give my own opinions of what's going on here.

AMP is intentionally low level.  AMP, PB, and Foolscap are, to me, at 
least, on a continuum where, on AMP's side, there is an extremely simple 
protocol implementing only the bare minimum required of an asynchronous 
messaging protocol.  On the other end, Foolscap is extremely complex but 
featureful.

This makes AMP ideal for applications where there is a narrow interface 
where two parties have to exchange a few simple and well-defined 
messages, with each party potentially being implemented many times by 
different languages and environments.  There are already ad-hoc AMP 
implementations in a half a dozen languages already (I myself have 
prototyped elisp and Java implementations) and they are so easy to do 
that I'm sure more are on the way.  You can do one yourself if you want.

PB falls somewhere in the middle; using PB involves understanding fewer 
concepts than using Foolscap (in particular, it has no concept of URLs 
or object-spaces like tubs) but provides commensurately fewer features. 
It has conveniences like deep object serialization.  It's well defined 
enough that you *can* write implementations for other languages if you 
really want to (there's one that mostly works for Java) but it's not the 
trivial affair that knocking off an AMP implementation is.  PB was 
originally designed to support shared simulation spaces (online games) 
where lots of clients talk to a server about a potentially complex graph 
of objects, and that's where it remains ideal.

Foolscap is geared towards very complex distributed applications where 
you need to serialize deep objects and coordinate arbitrary numbers of 
hosts which are connected in a mesh configuration.  There's only the one 
implementation, but if you have an application that is well-suited to 
foolscap, the application itself is probably hard enough to implement 
that you won't be worrying about integrating alternative implementations 
for quite a while.

Personally I've been more focused on AMP in the last year because I 
think there are currently a lot of applications in that first category 
which are currently being poorly served by bloated, complex, text-based 
protocols like XMLRPC, SOAP, and XMPP.  However, this mostly represents 
a shift in my personal area of interest, and is not a comment on the 
validity of either of the other two application domains.

That said, there may one day be some convergence or refactoring where a 
future version of PB becomes a layer on top of AMP, but given the 
obvious lack of any *application* drivers for such functionality, that 
seems like it will be very far off indeed.



From me at mocisoft.com  Wed Oct 10 00:11:06 2007
From: me at mocisoft.com (markus espenhain)
Date: Wed, 10 Oct 2007 08:11:06 +0200
Subject: [Twisted-Python] trouble with missing exceptions
Message-ID: <470C6CFA.5010108@mocisoft.com>

hi

i've written a tcp client - using a derived NetstringReceiver, a 
ReconnectingClientFactory and just reactor.connectTCP + reactor.run.

the problem is that after the connection is made - every exception that 
occurred seems to be lost and the execution at this point discontinues - 
also with a try/catch block around it

class MyProtocol(basic.NetstringReceiver):
	...
	def onData(self, data):
		print data
		try:
			print 'before' # printed
			raise Exception('err')
		except Exception, e:
			print e # nothing
		print 'after' # nothing

after print 'before' nothing more in onData happens - anyway the app 
runs and on new data the onData is entered again

i poke around 2h or so and i can't remember to had this problem before 
... so anybody can give me a hint or maybe something that i miss?

thanks
markus

using twisted 2.4.0



From paul at subsignal.org  Tue Oct  9 14:18:27 2007
From: paul at subsignal.org (paul)
Date: Tue, 09 Oct 2007 22:18:27 +0200
Subject: [Twisted-Python] Re: Running commands (ssh) from a GUI client
In-Reply-To: <OF0ED303F2.E7706FBC-ON8625736F.0060300F-8625736F.0061032D@uscmail.uscourts.gov>
References: <684b0a740710071104k54a47a79se4070a0f58334f8b@mail.gmail.com>
	<OF0ED303F2.E7706FBC-ON8625736F.0060300F-8625736F.0061032D@uscmail.uscourts.gov>
Message-ID: <fegnmb$t2f$1@sea.gmane.org>

Paul_S_Johnson at mnb.uscourts.gov schrieb:
> Raul,
> 
> This is simply some work-in-progress code, but is basically what you are 
> looking for even written for PythonCard. This takes a list of three 
> commands and runs them in the order given using deferreds to wait for the 
> previous to complete before executing the next.
> 
> This took me about forever to get it this far. If you make and significant 
> improvements, please share.
I'll take your word and add my 2 cents here:

Running commands is not a problem, the client example provided at 
twistedmatrix.com does just that. However, it always uses a new 
connection with all the associated overhead.
I've been told you need a Channel for each command but you can reuse the 
connection. To make this work you have to decouple the Channel from the 
connection setup:

class ClientConnection(connection.SSHConnection):

     def __init__(self):
         self.started = False
         self.runCalled = 0
         connection.SSHConnection.__init__(self)

     def serviceStarted(self):
         # just set a flag
         self.started = True
         log.msg('ssh connection started')

     def runCommand(self, d, command, *args):
         """
         the connection needs some time to get up, hence we use callLater
         so that the caller doesn't have to bother.
         FIXME: remove hardcoded delay, add backlog and break eventually
         if self.started never gets true for some reason...
         """
         if not self.started:
             reactor.callLater(1, self.runCommand, d, command, *args)
         else:
             self.openChannel(CommandChannel(d, self, command, *args))

the self.openChannel is moved out of serviceStarted() and we have an 
independent method runCommmand() we can call as often as we want as long 
as the connection is alive (I wonder if the self.started hack can be 
avoided...)

The CommandChannel fires(?) the passed in Deferred when the command has 
finished:

class CommandChannel(channel.SSHChannel):
     name = 'session'

    def __init__(self, d, connection, command, *args):
         self.command = command
         self.args = args
         self.d = d
         channel.SSHChannel.__init__(self, conn=connection)

     def channelOpen(self, data):
         args = list(self.args)
         args.insert(0, self.command)
         d = self.conn.sendRequest(self, 'exec', common.NS(" "
                                  .join(args)), wantReply = 1)
         d.addCallback(self._endCommand)
         self.catData = ''

     def _endCommand(self, ignored):
         self.conn.sendEOF(self)

     def eofReceived(self):
         self.d.callback((self.catData,))

     def dataReceived(self, data):
         #log.msg('DEBUG, dataReceived: %s' % data)
         self.catData += data

The last piece of the puzzle is the factory which holds the connection 
specific data and !! a reference to the connection object to call the 
runCommand method:

class CommandClientFactory(protocol.ClientFactory):

     def __init__(self, host, user, fingerprint, password=None,
                     ConnClass=ClientConnection,
                     AuthClass=ClientUserAuth,
                     TransportClass=ClientTransport):
         self.host = host
         self.user = user
         self.password = password
         self.fingerprint = fingerprint

         self.TransportClass = TransportClass
         self.connection = ConnClass() #<- we have the connection here
         self.auth_client = AuthClass(self, self.connection)

     def runCommand(self, deferred, cmd, *args):
         self.connection.runCommand(deferred, cmd, *args)

     def buildProtocol(self, addr):
         p = self.TransportClass()
         p.factory = self
         return p

     def clientConnectionFailed(self, connection, reason):
         print "connect to %s as %s failed, reason: %s" % (
             self.host, self.user, reason)

     def clientConnectionLost(self, connection, reason):
         print 'connection to "%s" as "%s" lost, reason: %s' % (
             self.host, self.user, reason)

Now you setup a CommandClientFactory, create a new Deferred, a callback 
function and put it all together:

def cmdCallback(result):
     print result
	
cf = CommandClientFactory(host, user, fingerprint, password=None)
reactor.connectTCP(host, self.port, cf)

d = defer.Deferred()
d.addCallback(cmdCallback)
cf.connection.runCommand(d, command, *args)

WRT the su - problem, I'll probably use sudo (to fetch the sudoers file ;))


hth
  Paul

BTW: This is not working code, it's just to show the basic schema...




From nachogomez at gmail.com  Wed Oct 10 10:02:11 2007
From: nachogomez at gmail.com (=?UTF-8?Q?Ra=C3=BAl_G=C3=B3mez_C.?=)
Date: Wed, 10 Oct 2007 12:02:11 -0400
Subject: [Twisted-Python] Re: Running commands (ssh) from a GUI client
In-Reply-To: <fegnmb$t2f$1@sea.gmane.org>
References: <684b0a740710071104k54a47a79se4070a0f58334f8b@mail.gmail.com>
	<OF0ED303F2.E7706FBC-ON8625736F.0060300F-8625736F.0061032D@uscmail.uscourts.gov>
	<fegnmb$t2f$1@sea.gmane.org>
Message-ID: <684b0a740710100902g578f3affu378f1aa16659cabe@mail.gmail.com>

Thank you very much Paul, I'll work on this and post any change, and if
someone in the list want, I'll post the final (working) code...

Thanks again...

Raul

On 10/9/07, paul <paul at subsignal.org> wrote:
>
>
> I'll take your word and add my 2 cents here:
>
> Running commands is not a problem, the client example provided at
> twistedmatrix.com does just that. However, it always uses a new
> connection with all the associated overhead.
> I've been told you need a Channel for each command but you can reuse the
> connection. To make this work you have to decouple the Channel from the
> connection setup:
>
>
> hth
>   Paul
>
> BTW: This is not working code, it's just to show the basic schema...
>

PS: Yep, there's a lot of Paul in this list! :p
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20071010/9acb992c/attachment.html>

From andrew-twisted at puzzling.org  Wed Oct 10 17:37:36 2007
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu, 11 Oct 2007 09:37:36 +1000
Subject: [Twisted-Python] trouble with missing exceptions
In-Reply-To: <470C6CFA.5010108@mocisoft.com>
References: <470C6CFA.5010108@mocisoft.com>
Message-ID: <20071010233736.GA16455@steerpike.home.puzzling.org>

markus espenhain wrote:
> hi
> 
> i've written a tcp client - using a derived NetstringReceiver, a 
> ReconnectingClientFactory and just reactor.connectTCP + reactor.run.
> 
> the problem is that after the connection is made - every exception that 
> occurred seems to be lost and the execution at this point discontinues - 
> also with a try/catch block around it
> 
> class MyProtocol(basic.NetstringReceiver):
> 	...
> 	def onData(self, data):
> 		print data
> 		try:
> 			print 'before' # printed
> 			raise Exception('err')
> 		except Exception, e:
> 			print e # nothing
> 		print 'after' # nothing
> 
> after print 'before' nothing more in onData happens - anyway the app 
> runs and on new data the onData is entered again
> 
> i poke around 2h or so and i can't remember to had this problem before 
> ... so anybody can give me a hint or maybe something that i miss?

I'm guessing this isn't literally code you've tried to run, because that will
always print e and 'after'.  There's nothing in Twisted that changes the way
Python's exception handling works.

Taking a guess that by “raise Exception('err')” you mean you call a function
that somehow raises an exception your “except Exception:” block fails to catch,
perhaps try a bare “except:”.  It might be a string exception.

Otherwise, I'd try making as minimal an example of the problem as you can that
can reproduce the problem, and if you're still stuck, posting that to this list
(or if it doesn't involve Twisted, comp.lang.python).  Or use “import pdb;
pdb.set_trace()” to insert a breakpoint and step through the code in the
debugger.

-Andrew.




From Marcin.Kasperski at softax.com.pl  Thu Oct 11 07:30:53 2007
From: Marcin.Kasperski at softax.com.pl (Marcin Kasperski)
Date: Thu, 11 Oct 2007 15:30:53 +0200
Subject: [Twisted-Python] Re: Running commands (ssh) from a GUI client
References: <684b0a740710071104k54a47a79se4070a0f58334f8b@mail.gmail.com>
	<OF0ED303F2.E7706FBC-ON8625736F.0060300F-8625736F.0061032D@uscmail.uscourts.gov>
	<fegnmb$t2f$1@sea.gmane.org>
Message-ID: <87tzoxpylu.fsf@platon.mekk.waw.pl>


I will allow myself to add to the question:

Does there exist any example of SSH connection which instead of just
running a command, allows interaction with remote application (feeding
its stdin, reading its stdout)?

My personal use case is 'remote UCI engine' - application which logins
via ssh to remote machine, spawns fruit (or wine rybka.exe, or
whatever) there, and then forwards anything obtained on (local) stdin
to this app stdin and forwards anything obtained from remote app to
(local) stdout. Plus, in case of disconnect, relogin-s, restarts the
app and resends initialization commands.  Just a way to bind Fritz run
on laptop to the engine run on stronger server.

I even managed to write more-or-less working code, but it turned out
to be so horrible mess, that I gave up an idea of maintaining it in a
long term...




From sipickles at hotmail.com  Thu Oct 11 09:20:51 2007
From: sipickles at hotmail.com (Simon Pickles)
Date: Thu, 11 Oct 2007 16:20:51 +0100
Subject: [Twisted-Python] UDP with multiple connections
In-Reply-To: <1191973022.2554.18.camel@localhost.localdomain>
References: <470BE2D8.6040601@hotmail.com>
	<1191973022.2554.18.camel@localhost.localdomain>
Message-ID: <470E3F53.9050901@hotmail.com>

UDP is often used in online gaming, where other methods are employed to 
compensate for its weaknesses, in return for its speed.

 
Phil Mayers wrote:
> On Tue, 2007-10-09 at 21:21 +0100, Simon Pickles wrote:
>   
>> Ok, UDP is new to me, so please be gentle....
>>
>> I've got a server authentication app which needs to accept many client 
>> connections, but also dispatch messages to a master server. Am I best 
>> using unconnected UDP? 
>>     
>
> You are *best* using TCP. Very few applications are actually suited to
> UDP. UDP:
>
>  * has no connection state
>  * has no flow control
>  * is unfriendly to networks (really the same as the previous point)
>  * has no keepalives
>  * has problems with MTU and fragmentation for messages > ~1400 bytes
>  * is subject to trivial spoofing
>  * has no message sequencing
>  * is hard to run crypto over (SSL over TCP == trivial)
>
> ...and so on.
>
>   
>> do i then have to deal with each received 
>> datagram by checking which host is has come from and acting accordingly?
>>     
>
> Twisted's UDP support is all "unconnected". All DatagramProtocol
> instances get a call to:
>
>  def datagramReceived(self, data, addr)
>
> ...where "addr=(ip,port)" for IPv4
>
> Similarly, you would do:
>
>   self.transport.write(bytes, addr)
>
> So, unconnected UDP is your *only* option, because that's how Twisted
> does it.
>
> However, so-called "connected" UDP is really just a way of saving the
> destination address on the socket. There's no *actual* connection
> involved.
>
>   
>> thanks
>>
>> Simon
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>     
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>   



From p.mayers at imperial.ac.uk  Thu Oct 11 09:52:09 2007
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Thu, 11 Oct 2007 16:52:09 +0100
Subject: [Twisted-Python] UDP with multiple connections
In-Reply-To: <470E3F53.9050901@hotmail.com>
References: <470BE2D8.6040601@hotmail.com>
	<1191973022.2554.18.camel@localhost.localdomain>
	<470E3F53.9050901@hotmail.com>
Message-ID: <1192117929.13505.10.camel@doorstop.net.ic.ac.uk>

On Thu, 2007-10-11 at 16:20 +0100, Simon Pickles wrote:
> UDP is often used in online gaming, where other methods are employed to 
> compensate for its weaknesses, in return for its speed.

I am aware of this. What's your point?





From nachogomez at gmail.com  Thu Oct 11 09:53:54 2007
From: nachogomez at gmail.com (=?UTF-8?Q?Ra=C3=BAl_G=C3=B3mez_C.?=)
Date: Thu, 11 Oct 2007 11:53:54 -0400
Subject: [Twisted-Python] Re: Running commands (ssh) from a GUI client
In-Reply-To: <87tzoxpylu.fsf@platon.mekk.waw.pl>
References: <684b0a740710071104k54a47a79se4070a0f58334f8b@mail.gmail.com>
	<OF0ED303F2.E7706FBC-ON8625736F.0060300F-8625736F.0061032D@uscmail.uscourts.gov>
	<fegnmb$t2f$1@sea.gmane.org> <87tzoxpylu.fsf@platon.mekk.waw.pl>
Message-ID: <684b0a740710110853q3e90a87atf95d0f34ec383c16@mail.gmail.com>

Well Marcin, I think that looks pretty much close to what I want to achieve,
so I haven't found any working example of this (yet :s). Can you share your
code with us?

On 10/11/07, Marcin Kasperski <Marcin.Kasperski at softax.com.pl> wrote:
>
>
> I will allow myself to add to the question:
>
> Does there exist any example of SSH connection which instead of just
> running a command, allows interaction with remote application (feeding
> its stdin, reading its stdout)?
>
> My personal use case is 'remote UCI engine' - application which logins
> via ssh to remote machine, spawns fruit (or wine rybka.exe, or
> whatever) there, and then forwards anything obtained on (local) stdin
> to this app stdin and forwards anything obtained from remote app to
> (local) stdout. Plus, in case of disconnect, relogin-s, restarts the
> app and resends initialization commands.  Just a way to bind Fritz run
> on laptop to the engine run on stronger server.
>
> I even managed to write more-or-less working code, but it turned out
> to be so horrible mess, that I gave up an idea of maintaining it in a
> long term...
>


Paul, I'm working right now with the code you've send, and there is an error
that I can't understand, when the execution reach the line "
self.connection.runCommand(deferred, cmd, *args)" in the
CommandClientFactory class, it throws an error saying:

"TypeError: unbound method runCommand() must be called with ClientConnection
instance as first argument (got Deferred instance instead)"


...but the runCommand method definition of ClientConnection class is like
this: "def runCommand(self, d, command, *args):", so it looks OK to me (by
this I mean, that it looks like it want to receive a deferred instance at
first arg), any clue on this???
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20071011/75c10e59/attachment.html>

From nachogomez at gmail.com  Thu Oct 11 10:20:20 2007
From: nachogomez at gmail.com (=?UTF-8?Q?Ra=C3=BAl_G=C3=B3mez_C.?=)
Date: Thu, 11 Oct 2007 12:20:20 -0400
Subject: [Twisted-Python] Re: Running commands (ssh) from a GUI client
In-Reply-To: <684b0a740710110853q3e90a87atf95d0f34ec383c16@mail.gmail.com>
References: <684b0a740710071104k54a47a79se4070a0f58334f8b@mail.gmail.com>
	<OF0ED303F2.E7706FBC-ON8625736F.0060300F-8625736F.0061032D@uscmail.uscourts.gov>
	<fegnmb$t2f$1@sea.gmane.org> <87tzoxpylu.fsf@platon.mekk.waw.pl>
	<684b0a740710110853q3e90a87atf95d0f34ec383c16@mail.gmail.com>
Message-ID: <684b0a740710110920y6502c3b0rc99d3e19cda1568d@mail.gmail.com>

BTW, the complete code can be downloaded at
http://alfa.facyt.uc.edu.ve/~gomezr/sshclient_v2.py
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20071011/ef94e06c/attachment.html>

From glyph at divmod.com  Thu Oct 11 10:30:01 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 11 Oct 2007 16:30:01 -0000
Subject: [Twisted-Python] UDP with multiple connections
In-Reply-To: <470E3F53.9050901@hotmail.com>
References: <470BE2D8.6040601@hotmail.com>
	<1191973022.2554.18.camel@localhost.localdomain>
	<470E3F53.9050901@hotmail.com>
Message-ID: <20071011163001.5579.671880163.divmod.xquotient.5452@joule.divmod.com>

On 03:20 pm, sipickles at hotmail.com wrote:
>UDP is often used in online gaming, where other methods are employed to 
>compensate for its weaknesses, in return for its speed.

"Speed" is an oversimplified way of explaining this usage.

Some games use a TCP control channel for most logical messages and UDP 
for updates to a small set of values where only the _most current_ value 
ever matters.  This is most often the position, orientation, and 
velocity of an object in the game world.  This can improve the apparent 
performance of twitchy games over lossy links.

Some games, having heard secondhand about this previous strategy, use 
UDP for everything because their implementors mistakenly believe that 
it's faster than TCP.  Often, these games eventually switch to TCP later 
in the development cycle when networking bugs and profiling indicate 
that the features of TCP are actually required or the performance 
"gains" are actually losses.  For example, routers on the public 
internet can and often do cheat in a variety of ways to use the 
additional information that TCP provides to make it go faster.  UDP 
can't take advantage of that and its overall throughput is often slower 
(especially on congested networks).



From Marcin.Kasperski at softax.com.pl  Thu Oct 11 10:31:54 2007
From: Marcin.Kasperski at softax.com.pl (Marcin Kasperski)
Date: Thu, 11 Oct 2007 18:31:54 +0200
Subject: [Twisted-Python] Re: Running commands (ssh) from a GUI client
References: <684b0a740710071104k54a47a79se4070a0f58334f8b@mail.gmail.com>
	<OF0ED303F2.E7706FBC-ON8625736F.0060300F-8625736F.0061032D@uscmail.uscourts.gov>
	<fegnmb$t2f$1@sea.gmane.org> <87tzoxpylu.fsf@platon.mekk.waw.pl>
	<684b0a740710110853q3e90a87atf95d0f34ec383c16@mail.gmail.com>
Message-ID: <87ejg1pq85.fsf@platon.mekk.waw.pl>

"Raúl Gómez C." <nachogomez at gmail.com> writes:

> Well Marcin, I think that looks pretty much close to what I want to
> achieve, so I haven't found any working example of this (yet
> :s). Can you share your code with us?

Well. You wanted it. 

a) This is messy.
b) I created it by randomly hacking here and there and I do not quite
   understand what is going on.
c) Error handling... Well. Is there any error handling?
d) It is to some degree polluted by the GUI window which I spawn to
   monitor what is going on.
e) It works (although reconnect is not handled). I tested it running
   client on windows and logging to remote linux, with ssh key
   login without password or passphrase (as Fritz seemed to expect
   .exe file, I used to run 'exemaker runme.py')

--------------------------------------------------
-- runme.py
--------------------------------------------------

#!/usr/bin/env python

import os, os.path, sys

RUN_DIR = os.path.dirname( os.path.abspath( sys.argv[0] ) )
LOG_DIR = os.path.join(RUN_DIR, 'log')
SSH_KEY = os.path.join(RUN_DIR, 'id_dsa')

if not os.path.exists(LOG_DIR):
    os.mkdir(LOG_DIR)

import sys
sys.path.append(RUN_DIR)

import RemoteEngine
RemoteEngine.RunRemoteEngine(
    ssh_key = SSH_KEY,
    remote_user = 'marcink',
    remote_host = 'myserver.home.local',
    remote_port = 22,
    remote_cmd = 'Szachy/Programy/Rybka/Rybka.sh',
    log_dir = LOG_DIR,
    show_output = False,
)

--------------------------------------------------
-- RemoteEngine.py
--------------------------------------------------

#!/usr/bin/env python
# -*- coding: utf8 -*-

# Pierwsze, bo przerabia reaktor
from LogWindow import LogBuffer, LogWindow

from twisted.internet import defer, protocol, reactor, stdio
from twisted.conch.ssh import transport, userauth, connection, common, keys, channel
from twisted.protocols import basic
import struct, sys, getpass, os, os.path, logging

logger = logging.getLogger('reng')

class CallbackHandler(logging.Handler):
    def __init__(self, callback):
        logging.Handler.__init__(self)
        self.callback = callback
    def emit(self, record):
        msg = self.format(record)
        self.callback(msg)

def setupLogging(log_dir, logbuf = None):
    import twisted.python, twisted.python.logfile, os, os.path, logging, logging.handlers
    if not os.path.exists(log_dir):
        os.mkdir(log_dir)
    root_logger = logging.getLogger()
    root_logger.setLevel(logging.DEBUG)
    debug_file = logging.handlers.RotatingFileHandler( os.path.join(log_dir, 'debug.log'), 'a', 4*1024*1024, 10)
    debug_file.setLevel(logging.DEBUG)
    debug_file.setFormatter( logging.Formatter('[%(asctime)s] [%(name)s/%(levelname)s] %(message)s') )
    root_logger.addHandler(debug_file)
    if logbuf:
        cbl = CallbackHandler( lambda txt: logbuf.on_debug_log(txt) )
        cbl.setLevel(logging.INFO)
        root_logger.addHandler( cbl )
    # I jeszcze logowanie twistdowe
    twistedLogFile = twisted.python.logfile.LogFile('twisted.log', log_dir, 16*1024*1024)
    twisted.python.log.startLogging(twistedLogFile)
    twisted.python.log.msg("Twisted log started")
    if logbuf:
        twisted.python.log.addObserver(logbuf.on_twisted_log)

class DataConsumer:
    """Klasa wykorzystywana do posredniczenia w transmisji danych, z obu stron
    polaczenia. Buforuje wszelkie dane otrzymane do czasu wywolania funkcji
    registerConsumer, potem przekazuje je juz bezposrednio"""
    def __init__(self, name):
        self.buffered = []
        self.name = name
        self.consumer = None
    def handleData(self, data):
        if self.consumer:
            logger.debug("[%s] write (%s)" % (self.name, data))
            self.consumer(data)
        else:
            logger.debug("[%s] buffering (%s)" % (self.name, data))
            self.buffered.append(data)
    def registerConsumer(self, consumer):
        "consumer to funkcja wołana dla wszelkich otrzymywanych danych"
        self.consumer = consumer
        if self.buffered:
            all = "".join(self.buffered)
            self.buffered = []
            logger.debug("[%s] write-buffer (%s)" % (self.name, all))
            consumer(all)

def restartRemoteConnection():
    raise "I do not know how to restart (yet)"

remoteConsumer = DataConsumer('remote')
localConsumer = DataConsumer('local')

class LocalProtocol(protocol.Protocol):
    #from os import linesep as delimiter
    delimiter = '\n'
    def connectionMade(self):
        logger.info("[LOCAL] ConnectionMade")
        localConsumer.registerConsumer(self.forwardData)
    def connectionLost(self, reason=protocol.connectionDone):
        logger.warn("[LOCAL] ConnectionLost")
        reactor.callLater(0, reactor.stop)
    def dataReceived(self, line):
        logger.info("[LOCAL] dataReceived(%s)" % line)
        line.replace(self.delimiter, '\n')
        remoteConsumer.handleData(line)
    def forwardData(self, data):
        data.replace('\n', self.delimiter)
        #logger.debug("[LOCAL] writing(%s)" % data)
        self.transport.write(data)

class RemoteProtocol(transport.SSHClientTransport):
    def __init__(self, ssh_key, remote_user, remote_cmd):
        #transport.SSHClientTransport.__init__(self)
        self.ssh_key = ssh_key
        self.remote_user = remote_user
        self.remote_cmd = remote_cmd
        self.connection = None
    def verifyHostKey(self, hostKey, fingerprint):
        logger.debug('[REMOTE] host key fingerprint: %s' % fingerprint)
        return defer.succeed(1) 
    def connectionSecure(self):
        logger.debug('[REMOTE] ssh connection established')
        self.connection = RemoteConnection(self.remote_cmd)
        self.connection.protocol = self
        self.requestService(
            RemoteUserAuth(self.ssh_key, self.remote_user, self.connection))

class RemoteUserAuth(userauth.SSHUserAuthClient):
    def __init__(self, ssh_key, user, connection):
        userauth.SSHUserAuthClient.__init__(self, user, connection)
        self.ssh_key = ssh_key
    def getPublicKey(self):
        path = os.path.expanduser(self.ssh_key) 
        if not os.path.exists(path) or self.lastPublicKey:
            return
        return keys.getPublicKeyString(path+'.pub')
    def getPrivateKey(self):
        path = os.path.expanduser(self.ssh_key)
        return defer.succeed(keys.getPrivateKeyObject(path))

class RemoteConnection(connection.SSHConnection):
    def __init__(self, remote_cmd):
        connection.SSHConnection.__init__(self)
        self.remote_cmd = remote_cmd
        self.engine = None
    def serviceStarted(self):
        self.engine = EngineChannel(self, self.remote_cmd)
        self.engine.connection = self
        self.openChannel(self.engine)
    def startupDataExchange(self):
        remoteConsumer.registerConsumer(self.writeDataToEngine)
    def writeDataToEngine(self, data):
        #logger.debug("[REMOTE] writing(%s)" % data)
        self.engine.write(data)

class EngineChannel(channel.SSHChannel):
    name = 'session'
    def __init__(self, connection, remote_cmd):
        channel.SSHChannel.__init__(self, 2**16, 2**15, connection)
        self.remote_cmd = remote_cmd
    def openFailed(self, reason):
        logger.warn("[REMOTE] failed (%s)" % reason)
        self.loseConnection()
    def channelOpen(self, ignoredData):
        #self.data = ''
        logger.info("[REMOTE] running (%s)" % self.remote_cmd)
        d = self.conn.sendRequest(self, 'exec', common.NS(self.remote_cmd), wantReply = 1)
        d.addCallback(self._cbRequest)
    def _cbRequest(self, ignored):
        logger.debug("[REMOTE] Remote cmd started")
        self.connection.startupDataExchange()
        #self.write('hello conch\n')
        #self.conn.sendEOF(self)
        #remote_connected.callback(self.writeDataToEngine)
        #remote_consumer = self.writeDataToEngine
    def dataReceived(self, data):
        logger.info('[REMOTE] dataReceived(%s)' % str(data))
        # Omijamy nieszczesne err:reg:SCSI_getprocentry SCSI type line scan count error
        if data.startswith('err:reg:'):
            return
        localConsumer.handleData(data)
    def closed(self):
        #print '[REMOTE] Closed. Accumulated data from engine: %s' % repr(self.data)
        logger.info('[REMOTE] Closed.')
        self.loseConnection()
        ##reactor.callLater(0, reactor.stop)
        reactor.callLater(0, restartRemoteConnection)

class RemoteFactory(protocol.ClientFactory):
    def __init__(self, ssh_key, remote_user, remote_cmd):
        self.ssh_key = ssh_key
        self.remote_user = remote_user
        self.remote_cmd = remote_cmd
        # failed on windows without this:
        self.protocol_instance = None
        self.buildProtocol(None)
    def buildProtocol(self, addr):
        if self.protocol_instance:
          return self.protocol_instance
        p = RemoteProtocol(self.ssh_key, self.remote_user, self.remote_cmd)
        p.factory = self
        self.protocol_instance = p
        return p
    def clientConnectionFailed(self, connector, reason):
        logger.warn('[REMOTE] connection failed:' + reason.getErrorMessage())
        reactor.callLater(0, reactor.stop)
    def clientConnectionLost(self, connector, reason):
        logger.warn('[REMOTE] connection lost:' + reason.getErrorMessage())
        reactor.callLater(0, reactor.stop)
  
def RunRemoteEngine(ssh_key, remote_user, remote_host, remote_port, remote_cmd, log_dir, show_output):
    logbuf = LogBuffer(show_output)
    logwin = LogWindow(logbuf, remote_host + ':' + remote_cmd)
    setupLogging(log_dir, logbuf)
    remote_factory = RemoteFactory(ssh_key, remote_user, remote_cmd)
    local = LocalProtocol()
    stdio.StandardIO(local)
    reactor.connectTCP(remote_host, remote_port, remote_factory)
    #logwin.show()
    reactor.run()

--------------------------------------------------
-- LogWindow.py
--------------------------------------------------

#!/usr/bin/env python
# -*- coding: utf8 -*-

from twisted.internet import gtk2reactor
gtk2reactor.install()

from twisted.internet import reactor
import pygtk, gtk
import re

re_received = re.compile(r'^\[(?P<dir>LOCAL|REMOTE)\]\s*dataReceived\((?P<data>.*)\)\s*$', re.DOTALL)

# Patrz /usr/share/doc/python-gtk2-tutorial/html/examples/testtext.py
class LogBuffer(gtk.TextBuffer):
    def __init__(self, show_output=True):
        gtk.TextBuffer.__init__(self)
        self.show_output = show_output
        self.input_tag = self.create_tag(editable = False, foreground = "darkgreen")
        self.output_tag = self.create_tag(editable= False, foreground = "brown")
        self.error_tag = self.create_tag(editable= False, foreground = "red")
        self.debug_tag = self.create_tag(editable = False, foreground = "black")
    def add_input(self, text):
        #self.insert(self.get_end_iter(), ">>> " + text + "\n")
        self.insert_with_tags(self.get_end_iter(), text, self.input_tag)
        self.place_cursor(self.get_end_iter())
    def add_output(self, text):
        if self.show_output:
            #self.insert(self.get_end_iter(), "<<< " + text + "\n")
            self.insert_with_tags(self.get_end_iter(), text, self.output_tag)
            self.place_cursor(self.get_end_iter())
    def add_error(self, text):
        self.insert_with_tags(self.get_end_iter(), "[ERR] " + text + "\n", self.error_tag)
        self.place_cursor(self.get_end_iter())
    def add_debug(self, text):
        self.insert_with_tags(self.get_end_iter(), "[DBG] " + text + "\n", self.debug_tag)        
        self.place_cursor(self.get_end_iter())
    def on_twisted_log(self, data):
        isError = data['isError']
        message = "\n".join(data['message'])
        if isError:
            self.add_error(text)
        else:
            self.add_debug("[TWISTED] " + text)
    def on_debug_log(self, text):
        m = re_received.match(text)
        if m:
            if m.group('dir') == "LOCAL":
                self.add_input(m.group('data'))
            else:
                self.add_output(m.group('data'))
        else:
            self.add_debug(text)            

class LogWindow(gtk.Window):
    def __init__(self, buffer, title):
        gtk.Window.__init__(self, gtk.WINDOW_TOPLEVEL)
        self.set_title(title)
        self.connect('destroy', self.close)
        #
        vbox = gtk.VBox(False, 0)
        self.add(vbox)
        #vbox.pack_start(self.item_factory.get_widget("<main>"), False, False, 0)        
        sw = gtk.ScrolledWindow()
        sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
        # Tekstowy panel
        self.textview = gtk.TextView(buffer)
        self.textview.set_editable(False)
        self.textview.set_wrap_mode(gtk.WRAP_NONE)
        self.textview.set_justification(gtk.JUSTIFY_LEFT)
        #self.textview.set_border_window_size(gtk.TEXT_WINDOW_TOP, 15)
        #self.textview.set_border_window_size(gtk.TEXT_WINDOW_BOTTOM, 15)
        #self.textview.set_border_window_size(gtk.TEXT_WINDOW_RIGHT, 30)
        #self.textview.set_border_window_size(gtk.TEXT_WINDOW_LEFT, 30)
        vbox.pack_start(sw, True, True, 0)
        sw.add(self.textview)
        self.set_default_size(500, 500)
        self.textview.grab_focus()        
        # Przycisk kończący
        #stop_button = gtk.Button('Stop')
        #stop_button.connect('clicked', self.close)
        #vbox.add(stop_button)
        # Główne okno
        self.show_all()
    def close(self, widget, data=None):
        reactor.stop()




From sipickles at hotmail.com  Thu Oct 11 12:24:02 2007
From: sipickles at hotmail.com (Simon Pickles)
Date: Thu, 11 Oct 2007 19:24:02 +0100
Subject: [Twisted-Python] UDP with multiple connections
In-Reply-To: <1192117929.13505.10.camel@doorstop.net.ic.ac.uk>
References: <470BE2D8.6040601@hotmail.com>	<1191973022.2554.18.camel@localhost.localdomain>	<470E3F53.9050901@hotmail.com>
	<1192117929.13505.10.camel@doorstop.net.ic.ac.uk>
Message-ID: <470E6A42.4000204@hotmail.com>

Thanks for the advice. My dilemma continues. In my game server, I 
firstly tried an approach like divmod suggests, using TCP for 'slow' 
operations like authentication, chat.

Then I tried to run a separate UDP thread doing 'fast' ops like position 
updates. However I stumbled when the reactor didn't like not being in 
the main thread (it was the second reactor in the app)

I've come to a new design now, where the server structure is split into:

auth, chat, generator, etc, plus a master 'conductor' - TCP using 
python+twisted
game zone servers - C++/UDP

Using UDP for the game server is strongly recommended by my industry 
contacts.

Phil Mayers wrote:
> On Thu, 2007-10-11 at 16:20 +0100, Simon Pickles wrote:
>   
>> UDP is often used in online gaming, where other methods are employed to 
>> compensate for its weaknesses, in return for its speed.
>>     
>
> I am aware of this. What's your point?
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> </
>
>   



From nachogomez at gmail.com  Thu Oct 11 12:54:52 2007
From: nachogomez at gmail.com (=?UTF-8?Q?Ra=C3=BAl_G=C3=B3mez_C.?=)
Date: Thu, 11 Oct 2007 14:54:52 -0400
Subject: [Twisted-Python] Re: Running commands (ssh) from a GUI client
In-Reply-To: <87ejg1pq85.fsf@platon.mekk.waw.pl>
References: <684b0a740710071104k54a47a79se4070a0f58334f8b@mail.gmail.com>
	<OF0ED303F2.E7706FBC-ON8625736F.0060300F-8625736F.0061032D@uscmail.uscourts.gov>
	<fegnmb$t2f$1@sea.gmane.org> <87tzoxpylu.fsf@platon.mekk.waw.pl>
	<684b0a740710110853q3e90a87atf95d0f34ec383c16@mail.gmail.com>
	<87ejg1pq85.fsf@platon.mekk.waw.pl>
Message-ID: <684b0a740710111154k36b49dc1u767d43195af690b9@mail.gmail.com>

Thanks Marcin, I'll checkit and post any comments!

On 10/11/07, Marcin Kasperski <Marcin.Kasperski at softax.com.pl> wrote:
>
> Well. You wanted it.
>
> a) This is messy.
> b) I created it by randomly hacking here and there and I do not quite
>    understand what is going on.
> c) Error handling... Well. Is there any error handling?
> d) It is to some degree polluted by the GUI window which I spawn to
>    monitor what is going on.
> e) It works (although reconnect is not handled). I tested it running
>    client on windows and logging to remote linux, with ssh key
>    login without password or passphrase (as Fritz seemed to expect
>    .exe file, I used to run 'exemaker runme.py')
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20071011/2b2fc332/attachment.html>

From exarkun at divmod.com  Thu Oct 11 12:56:29 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 11 Oct 2007 14:56:29 -0400
Subject: [Twisted-Python] UDP with multiple connections
In-Reply-To: <470E6A42.4000204@hotmail.com>
Message-ID: <20071011185629.8162.969472966.divmod.quotient.21577@ohm>

On Thu, 11 Oct 2007 19:24:02 +0100, Simon Pickles <sipickles at hotmail.com> wrote:
> [snip]

Hi,

http://twistedmatrix.com/projects/core/documentation/howto/servers.html

Hope this helps,

Jean-Paul



From sipickles at hotmail.com  Thu Oct 11 13:32:46 2007
From: sipickles at hotmail.com (Simon Pickles)
Date: Thu, 11 Oct 2007 20:32:46 +0100
Subject: [Twisted-Python] UDP with multiple connections
In-Reply-To: <20071011185629.8162.969472966.divmod.quotient.21577@ohm>
References: <20071011185629.8162.969472966.divmod.quotient.21577@ohm>
Message-ID: <470E7A5E.5060500@hotmail.com>

My problem is my app needs to be a server to many clients (thru TCP - 
twisted.protocols.basic) but a client to a further server, to which it 
passes occasional information.

Is this possible through twisted, since I need two threads, one with the 
server reactor.run() and one with the client connection listenTCP()?

At present using UDP for the client connection, if I call reactor.run() 
after listenUDP(), I get:

Traceback (most recent call last):
  File "E:\Dev\Python\Lib\threading.py", line 460, in __bootstrap
    self.run()
  File "G:\_Dev\Gateway 20071011\gatewayClient.py", line 59, in run
    reactor.run()
  File "E:\Dev\Python\lib\site-packages\twisted\internet\posixbase.py", 
line 219, in run
    self.startRunning(installSignalHandlers=installSignalHandlers)
  File "E:\Dev\Python\lib\site-packages\twisted\internet\posixbase.py", 
line 215, in startRunning
    self._handleSignals()
  File "E:\Dev\Python\lib\site-packages\twisted\internet\posixbase.py", 
line 185, in _handleSignals
    signal.signal(signal.SIGTERM, self.sigTerm)
ValueError: signal only works in main thread

If I don't call reactor.run(), it works. I can still send and recieve. 
What then, is the role of the reactor? I thought it started the 
listening loop?

Thanks

Simon

Jean-Paul Calderone wrote:
> On Thu, 11 Oct 2007 19:24:02 +0100, Simon Pickles 
> <sipickles at hotmail.com> wrote:
>> [snip]
>
> Hi,
>
> http://twistedmatrix.com/projects/core/documentation/howto/servers.html
>
> Hope this helps,
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>



From radix at twistedmatrix.com  Thu Oct 11 14:04:48 2007
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Thu, 11 Oct 2007 16:04:48 -0400
Subject: [Twisted-Python] UDP with multiple connections
In-Reply-To: <470E7A5E.5060500@hotmail.com>
References: <20071011185629.8162.969472966.divmod.quotient.21577@ohm>
	<470E7A5E.5060500@hotmail.com>
Message-ID: <60ed19d40710111304v9443795gdde1e248592c1798@mail.gmail.com>

On 10/11/07, Simon Pickles <sipickles at hotmail.com> wrote:
> My problem is my app needs to be a server to many clients (thru TCP -
> twisted.protocols.basic) but a client to a further server, to which it
> passes occasional information.
>
> Is this possible through twisted, since I need two threads, one with the
> server reactor.run() and one with the client connection listenTCP()?

No you don't!

listenTCP does not block. You can have as many connections as you want
in a single reactor. Twisted is an *asynchronous* networking
framework. You don't need multiple threads for this use case.

-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From glyph at divmod.com  Thu Oct 11 14:27:49 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 11 Oct 2007 20:27:49 -0000
Subject: [Twisted-Python] UDP with multiple connections
In-Reply-To: <60ed19d40710111304v9443795gdde1e248592c1798@mail.gmail.com>
References: <20071011185629.8162.969472966.divmod.quotient.21577@ohm>
	<470E7A5E.5060500@hotmail.com>
	<60ed19d40710111304v9443795gdde1e248592c1798@mail.gmail.com>
Message-ID: <20071011202749.5579.863387732.divmod.xquotient.5483@joule.divmod.com>

On 08:04 pm, radix at twistedmatrix.com wrote:
>On 10/11/07, Simon Pickles <sipickles at hotmail.com> wrote:
>>My problem is my app needs to be a server to many clients (thru TCP -
>>twisted.protocols.basic) but a client to a further server, to which it
>>passes occasional information.
>>
>>Is this possible through twisted, since I need two threads, one with 
>>the
>>server reactor.run() and one with the client connection listenTCP()?
>
>No you don't!
>
>listenTCP does not block. You can have as many connections as you want
>in a single reactor. Twisted is an *asynchronous* networking
>framework. You don't need multiple threads for this use case.

Please allow me to emphasize.  This is an important point.

Call listenTCP.  Then, immediately call listenUDP.  Then you will have a 
TCP server and a UDP server.  When TCP connections arrive, they will be 
connected using buildProtocol on your factory.  When UDP packets arrive, 
they will be delivered to datagramReceived on your UDP protocol.  You 
can then deliver those packets to whatever code you need to, whether 
it's C++ or Python or whatever.  You do not need, and should not want, 
threads for multiple sources of I/O.  If you want to take advantage of 
multiple cores or something, you can always run your C++ code that 
responds to some events in a separate process (or thread, if you are so 
inclined).

I would, however, suggest that you implement _all_ your messages using 
TCP over a single connection at first.  Once you have really understood 
and internalized the event-driven nature of Twisted, and implemented all 
the code needed to respond to position updates and so on, you will be 
able to easily split out the code that receives and parses those updates 
into a separate UDP class.  This will force you to deal with the fact 
that there is no deep architectural difference between delivering some 
messages over TCP and others over UDP.  If you instead start off with a 
two-protocol design that you do not entirely understand, your game's 
network architecture will be the result of a series of 
misunderstandings, not a well-planned whole.

Using UDP for position updates is simply an optimization, and one that 
you can make fairly late in development.  All the code to process and 
respond to them *should* be unchanged, regardless of how they are 
delivered.  Testing on local networks and fast links should be 
unaffected at first: UDP's performance advantage only comes into play 
when packets are being dropped, so it's only going to affect your game 
over long-haul links or really slow local networks.



From zmola at acm.org  Thu Oct 11 20:42:22 2007
From: zmola at acm.org (Carl Zmola)
Date: Thu, 11 Oct 2007 22:42:22 -0400
Subject: [Twisted-Python] UDP with multiple connections
In-Reply-To: <20071011163001.5579.671880163.divmod.xquotient.5452@joule.divmod.com>
References: <470BE2D8.6040601@hotmail.com>	<1191973022.2554.18.camel@localhost.localdomain>	<470E3F53.9050901@hotmail.com>
	<20071011163001.5579.671880163.divmod.xquotient.5452@joule.divmod.com>
Message-ID: <470EDF0E.1060203@acm.org>


I would like to make a general comment about the use of UDP in 
applications.  There are some people on this list who can do some tricky 
things with UDP, but as a general rule, what should be recommended is 
"use TCP".  If you end up running into issues that TCP has problems 
with, there are other options, but you should have tried TCP first.  If 
you are asking advise on this forum on using UDP, the first reply should 
always be: "Why arn't you using TCP?", and the second reply should be 
"Have you actually tried TCP and seen problems with it?"

UDP is fun and if you know what you are doing, you can get some benefits 
out of it, but you have to put an awful lot of work into it and I have 
seen many cases where the promised benefits of using UDP are not seen.


Areas where UDP can give some benefits are:
  Overcoming latency due to a 3way handshake,
  reducing cost if you are charged by the byte (but this can be eaten up 
by development cost and retransmission),
  multicast (but you then need to have control over your network).

I have heard of at least one case where large UDP applications have been 
put in due to the perceived benefits, only to be replaced by a TCP 
application that actually works.

--
Carl
zmola at acm.org



From vovic at nfi.kiae.ru  Fri Oct 12 04:42:15 2007
From: vovic at nfi.kiae.ru (Voznesensky Vladimir)
Date: Fri, 12 Oct 2007 14:42:15 +0400
Subject: [Twisted-Python] Http PUT
Message-ID: <web-3351355@newmail.nfi.kiae.ru>

Dear Twisted authors,

I need to realise an HTTP server capable of serving PUT 
request.
There seems to be no standard twisted implementation for 
it.
Is it possible to realise and include it into the standard 
twisted contribution?
I have no solid idea were to start with it.

Thanks,
VV



From jarek.zgoda at sensisoft.com  Fri Oct 12 05:58:43 2007
From: jarek.zgoda at sensisoft.com (Jarek Zgoda)
Date: Fri, 12 Oct 2007 13:58:43 +0200
Subject: [Twisted-Python] Http PUT
In-Reply-To: <web-3351355@newmail.nfi.kiae.ru>
References: <web-3351355@newmail.nfi.kiae.ru>
Message-ID: <470F6173.5040406@sensisoft.com>

Voznesensky Vladimir napisał(a):

> I need to realise an HTTP server capable of serving PUT request.
> There seems to be no standard twisted implementation for it.
> Is it possible to realise and include it into the standard twisted
> contribution?
> I have no solid idea were to start with it.

Start at twisted.web

Just write a resource class (subclass of twisted.web.resource.Resource)
that handles PUT requests by implementing render_PUT method.

-- 
Jarek Zgoda
Skype: jzgoda | GTalk: zgoda at jabber.aster.pl | voice: +48228430101

"We read Knuth so you don't have to." (Tim Peters)



From Andy at NewWorldElectric.com  Fri Oct 12 06:43:07 2007
From: Andy at NewWorldElectric.com (Andy Fundinger)
Date: Fri, 12 Oct 2007 08:43:07 -0400
Subject: [Twisted-Python] Http PUT
In-Reply-To: <470F6173.5040406@sensisoft.com>
References: <web-3351355@newmail.nfi.kiae.ru> <470F6173.5040406@sensisoft.com>
Message-ID: <37d49ed40710120543j7538da83p7fd96b6cf6a06557@mail.gmail.com>

Here's some sample code to get you started:

    def render_PUT(self,request):
        print "Got PUT"
        dataPage=request.content.getvalue()
        pageNumber=request.args.get("pagenumber",(0,))[0]
        (responseCode,message) = self._savePage(request.args["keynumber"][0],
self.userId,pageNumber,dataPage)
        request.setResponseCode(responseCode)
        return message

notice how you get at the PUT data via request.content.getvalue() I remember
needing a while to find that.  render_PUT can be added to
twisted.web.resource.Resource or a subclass as Jarek says.

-Andy Fundinger

On 10/12/07, Jarek Zgoda <jarek.zgoda at sensisoft.com> wrote:
>
> Voznesensky Vladimir napisał(a):
>
> > I need to realise an HTTP server capable of serving PUT request.
> > There seems to be no standard twisted implementation for it.
> > Is it possible to realise and include it into the standard twisted
> > contribution?
> > I have no solid idea were to start with it.
>
> Start at twisted.web
>
> Just write a resource class (subclass of twisted.web.resource.Resource)
> that handles PUT requests by implementing render_PUT method.
>
> --
> Jarek Zgoda
> Skype: jzgoda | GTalk: zgoda at jabber.aster.pl | voice: +48228430101
>
> "We read Knuth so you don't have to." (Tim Peters)
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Blog:  http://channel3b.wordpress.com
Second Life Name:  Ciemaar Flintoff

I am a sig Virus. Please put me in your sig so that I can continue to
replicate.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20071012/16527386/attachment.html>

From sipickles at hotmail.com  Fri Oct 12 12:14:15 2007
From: sipickles at hotmail.com (Simon Pickles)
Date: Fri, 12 Oct 2007 19:14:15 +0100
Subject: [Twisted-Python] UDP with multiple connections
In-Reply-To: <470EDF0E.1060203@acm.org>
References: <470BE2D8.6040601@hotmail.com>	<1191973022.2554.18.camel@localhost.localdomain>	<470E3F53.9050901@hotmail.com>	<20071011163001.5579.671880163.divmod.xquotient.5452@joule.divmod.com>
	<470EDF0E.1060203@acm.org>
Message-ID: <470FB977.1000207@hotmail.com>

I thiank you all for your tiem and patience. My understanding has 
developed somewhat :)

Carl Zmola wrote:
>
> I would like to make a general comment about the use of UDP in 
> applications.  There are some people on this list who can do some 
> tricky things with UDP, but as a general rule, what should be 
> recommended is "use TCP".  If you end up running into issues that TCP 
> has problems with, there are other options, but you should have tried 
> TCP first.  If you are asking advise on this forum on using UDP, the 
> first reply should always be: "Why arn't you using TCP?", and the 
> second reply should be "Have you actually tried TCP and seen problems 
> with it?"
>
> UDP is fun and if you know what you are doing, you can get some 
> benefits out of it, but you have to put an awful lot of work into it 
> and I have seen many cases where the promised benefits of using UDP 
> are not seen.
>
>
> Areas where UDP can give some benefits are:
>  Overcoming latency due to a 3way handshake,
>  reducing cost if you are charged by the byte (but this can be eaten 
> up by development cost and retransmission),
>  multicast (but you then need to have control over your network).
>
> I have heard of at least one case where large UDP applications have 
> been put in due to the perceived benefits, only to be replaced by a 
> TCP application that actually works.
>
> -- 
> Carl
> zmola at acm.org
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> </
>



From sipickles at hotmail.com  Fri Oct 12 13:16:18 2007
From: sipickles at hotmail.com (Simon Pickles)
Date: Fri, 12 Oct 2007 20:16:18 +0100
Subject: [Twisted-Python] Sending Data via a client
In-Reply-To: <470F6173.5040406@sensisoft.com>
References: <web-3351355@newmail.nfi.kiae.ru> <470F6173.5040406@sensisoft.com>
Message-ID: <470FC802.6000409@hotmail.com>

Twisted is event driven.

So how do I send Data through a client? All the example demonstrate is 
how to receive events.

I suppose what I am asking is how do I refer to a client protocol from 
another class?

My variable:

loop = = gatewayClient().start()

opens a reconnectingClientFactory, which opens a client protocol. How do 
i make that client protocol global enough to use from anywhere in my app?


The ironic thing is, its easy with sockets :)

Si




From sroberts at uniserve.com  Fri Oct 12 14:36:15 2007
From: sroberts at uniserve.com (Sam Roberts)
Date: Fri, 12 Oct 2007 13:36:15 -0700
Subject: [Twisted-Python] Sending Data via a client
In-Reply-To: <470FC802.6000409@hotmail.com>
References: <web-3351355@newmail.nfi.kiae.ru> <470F6173.5040406@sensisoft.com>
	<470FC802.6000409@hotmail.com>
Message-ID: <20071012203615.GA20214@sam-desktop>

On Fri, Oct 12, 2007 at 08:16:18PM +0100, Simon Pickles wrote:
> Twisted is event driven.
> 
> So how do I send Data through a client? All the example demonstrate is 
> how to receive events.
> 
> I suppose what I am asking is how do I refer to a client protocol from 
> another class?

There are a number of  tutorials on this in Twisted Network Programming
Esentials, by Abe Fettig.

Sam




From radix at twistedmatrix.com  Fri Oct 12 14:49:34 2007
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 12 Oct 2007 16:49:34 -0400
Subject: [Twisted-Python] Sending Data via a client
In-Reply-To: <470FC802.6000409@hotmail.com>
References: <web-3351355@newmail.nfi.kiae.ru> <470F6173.5040406@sensisoft.com>
	<470FC802.6000409@hotmail.com>
Message-ID: <60ed19d40710121349q46d2e8b2r2509f0744172ba3e@mail.gmail.com>

On 10/12/07, Simon Pickles <sipickles at hotmail.com> wrote:
> Twisted is event driven.
>
> So how do I send Data through a client? All the example demonstrate is
> how to receive events.

I don't know what you mean by "through", but whether you mean "to" or
"from" the answer is the same: transport.write. ('transport' will be
an attribute of your Protocol instances).


> I suppose what I am asking is how do I refer to a client protocol from
> another class?

This is really just a basic program structuring question, and not
really related to Twisted.

-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From johann.borck at densedata.com  Fri Oct 12 15:39:27 2007
From: johann.borck at densedata.com (Johann Borck)
Date: Fri, 12 Oct 2007 23:39:27 +0200
Subject: [Twisted-Python] Sending Data via a client
In-Reply-To: <470FC802.6000409@hotmail.com>
References: <web-3351355@newmail.nfi.kiae.ru> <470F6173.5040406@sensisoft.com>
	<470FC802.6000409@hotmail.com>
Message-ID: <470FE98F.4040908@densedata.com>

Simon Pickles wrote:
> Twisted is event driven.
>
> So how do I send Data through a client? All the example demonstrate is
> how to receive events.
>
Here is just one of the examples available, it's actually googles first
hit for "twisted client example":
http://twistedmatrix.com/projects/core/documentation/howto/tutorial/client.html

The function "finger" shows what is needed to start up a client.
> I suppose what I am asking is how do I refer to a client protocol from
> another class?
>
> My variable:
>
> loop = = gatewayClient().start()
>
> opens a reconnectingClientFactory, which opens a client protocol. How
> do i make that client protocol global enough to use from anywhere in
> my app?
you "import MyFactory from mymodule" and use it as shown in example. You
can do that anywhere in your app.
>
>
> The ironic thing is, its easy with sockets :)
I'd say the ironic thing is that sockets are so often used in a
different way, imposing lots of unnecessary problems (apart from the
fact that this is a rtfm question) :). What twisted gives you for free
is a rock-stable way to do all networking asynchronous, which is no
trivial task to achieve using sockets (i.e. writing a twisted equivalent
from scratch). When you get used to it, it won't be harder to do simple
things, and way easier to do complex things. It's certainly worth the
effort.

Johann






From exarkun at twistedmatrix.com  Sat Oct 13 22:05:04 2007
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 14 Oct 2007 04:05:04 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1192334704.16.376492094@twistedmatrix.com

Bug summary
______________________
Summary for 2007-10-07 through 2007-10-14
Bugs opened: 5    Bugs closed: 3  Total open bugs: 1040 (+2)

|== Type Changes   |== Priority Changes   |== Component Changes   
|Defect:       +0  |Highest:  +0          |Core:   +1             
|Enhancement:  +1  |High:     -1          |Trial:  +1             
|Task:         +1  |Normal:   +2                                  
                   |Low:      +1                                  


New / Reopened Bugs
______________________
                    ===== Highest =====
[#2849] A reentrant addCallbacks on a Deferred adds to mid-chain (opened by Peaker)
    defect          core       http://twistedmatrix.com/trac/ticket/2849

                    ===== Normal =====
[#2845] twisted.internet.thread._putResultInDeferred should be public (opened by therve)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2845

[#2847] Get rid of all "API Stability: unstable" markers (opened by radix)
    task            core       http://twistedmatrix.com/trac/ticket/2847

[#2848] typos in doc/core/man/tap2{deb,rpm}.1 (opened by exarkun) (CLOSED, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/2848

                    ===== Low =====
[#2846] trial coverage option should include tracing in threads (opened by therve)
    enhancement     trial      http://twistedmatrix.com/trac/ticket/2846



Closed Bugs
______________________
                    ===== Highest =====
[#2457] failed reactor selection is reported poorly by trial and twistd (opened by exarkun, closed by therve, fixed)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2457

                    ===== High =====
[#411 ] Deferreds are good at blowing the stack (opened by etrepum, closed by Peaker, invalid)
    defect          core       http://twistedmatrix.com/trac/ticket/411

                    ===== Normal =====
[#2848] typos in doc/core/man/tap2{deb,rpm}.1 (opened by exarkun, closed by exarkun, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/2848



Ticket Lifetime Stats
______________________
Oldest open ticket - [#38] Should be a way to create documentation aliases (since 2003-07-12 16:08:03).
Newest open ticket - [#2849] A reentrant addCallbacks on a Deferred adds to mid-chain (since 2007-10-10 11:25:51).

Mean open ticket age: 539 days, 13:55:11.952859.
Median: 440 days, 3:14:16.977859.
Standard deviation: 403 days, 6:49:39.251191.
Interquartile range: 504 days, 16:10:28.

Mean time between ticket creation and ticket resolution: 122 days, 14:09:56.608352.
Median: 14 days, 16:22:15.
Standard deviation is 226 days, 22:06:10.127155.
The interquartile range is 130 days, 2:23:34.

Mean time spent in review: 67 days, 20:17:30.264549.
Median: 4 days, 9:08:37.
Standard deviation: 149 days, 7:51:46.848091.
Interquartile range: 31 days, 6:31:05.

Mean number of times a ticket is reviewed: 1.95150115473.
Median: 1
Standard deviation: 1.58950187867.
Interquartile range: 1.


Contributor Stats
______________________
In the last 4 weeks,
    10 unique ticket reporters
    7 unique ticket reviewers
    2 unique ticket resolvers
In the last 24 weeks,
    70 unique ticket reporters
    16 unique ticket reviewers
    14 unique ticket resolvers
In the last 48 weeks,
    152 unique ticket reporters
    18 unique ticket reviewers
    26 unique ticket resolvers




From george at ringdevelopment.com  Sun Oct 14 13:53:03 2007
From: george at ringdevelopment.com (George Pauly)
Date: Sun, 14 Oct 2007 15:53:03 -0400
Subject: [Twisted-Python] UDP with multiple connections
In-Reply-To: <20071011163001.5579.671880163.divmod.xquotient.5452@joule.divmod.com>
References: <470BE2D8.6040601@hotmail.com>
	<1191973022.2554.18.camel@localhost.localdomain>
	<470E3F53.9050901@hotmail.com>
	<20071011163001.5579.671880163.divmod.xquotient.5452@joule.divmod.com>
Message-ID: <1192391584.2602.220.camel@localhost.localdomain>

On Thu, 2007-10-11 at 16:30 +0000, glyph at divmod.com wrote:
> On 03:20 pm, sipickles at hotmail.com wrote:
> >UDP is often used in online gaming, where other methods are employed to 
> >compensate for its weaknesses, in return for its speed.
> 
> "Speed" is an oversimplified way of explaining this usage.
> 
> Some games use a TCP control channel for most logical messages and UDP 
> for updates to a small set of values where only the _most current_ value 
> ever matters.  This is most often the position, orientation, and 
> velocity of an object in the game world.  This can improve the apparent 
> performance of twitchy games over lossy links.
> 
> Some games, having heard secondhand about this previous strategy, use 
> UDP for everything because their implementors mistakenly believe that 
> it's faster than TCP.  Often, these games eventually switch to TCP later 
> in the development cycle when networking bugs and profiling indicate 
> that the features of TCP are actually required or the performance 
> "gains" are actually losses.  For example, routers on the public 
> internet can and often do cheat in a variety of ways to use the 
> additional information that TCP provides to make it go faster.  UDP 
> can't take advantage of that and its overall throughput is often slower 
> (especially on congested networks).
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-- 
George Pauly
Ring Development
www.ringdevelopment.com




From k_r_a_j_kumar at yahoo.co.in  Sun Oct 14 22:10:35 2007
From: k_r_a_j_kumar at yahoo.co.in (Raj kumar)
Date: Mon, 15 Oct 2007 05:10:35 +0100 (BST)
Subject: [Twisted-Python] Regarding "add" method in microdom.lmx
In-Reply-To: <mailman.0.1192183798.10658.twisted-python@twistedmatrix.com>
Message-ID: <933519.65963.qm@web8707.mail.in.yahoo.com>

Hi every one,
This is raj.. I am new to twisted python.
I have created a xml and want to add some content to it but i am unable to edit the xml file..
I tried in this way.....
..............................................................
Method(self, X,Y,Z,xmlfile=None)
xmlfile = xmlfile or self.xmlfile
.
.
jump = microdom.lmx('jumping')
jump.add("jumpat", xjump=X, yjump=Y)
save_xml(jump.node,xmlfile)

then the xml file is showing 
<jumping>
</jumping>
but not the jumpat tag and content

...............................................................

if i try in this below manner
......................................
Method(self, X,Y,Z,xmlfile=None)
 xmlfile = xmlfile or self.xmlfile
 .
 .
 jump = microdom.lmx('jumping')
 jump.add("jumpat")
 save_xml(jump.node,xmlfile)
 
 then xml file is  showing
<jumping>
<jumpat>
</jumpat>
</jumping>
..................................

Can any one help me how to add those X,Y,Z values in that?
I wanted the out put to be stored as below
<jumping>
<jumpat x=value,y=value,z=value>
</jumpat>
<jumpat x=value,y=value,z=value>
 </jumpat>
 </jumping>

Thank you in advance.

       
---------------------------------
 Unlimited freedom, unlimited storage. Get it now
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20071015/0f279b6a/attachment.html>

From kernellearn at gmail.com  Mon Oct 15 00:09:08 2007
From: kernellearn at gmail.com (wangmm)
Date: Mon, 15 Oct 2007 14:09:08 +0800
Subject: [Twisted-Python] twisted.names.client.getHostByName Error when DNS
	Server return Auth NS Server
Message-ID: <353309580710142309v404d8e0mb9ff3aeb5a2a516b@mail.gmail.com>

 There is a bug in the extractRecord function of common.py. And I open a
ticket in http://twistedmatrix.com/trac/ticket/2850
----------------------------------------------------------------------------------------------------

Python Version:2.5
Twisted Version:2.5
Names Version:0.4


 When we got a resolver and call getHostByname, perhaps DNS server can
return CNAME, Auth NS Server Name and Auth NS Server IP Address. So
extractRecord function will extract the Auth NS Server and send the DNS
request to the Auth NS Server. But there is a bug in the extractRecord
function.

Code:

 # No answers, but maybe there's a hint at who we should be asking about
this for r in answers:

 if r.type == dns.NS:

 from twisted.names import client r = client.Resolver(servers=[(str(
r.payload.name), dns.PORT)]) return r.lookupAddress(str(name)

 Generally, the Auth NS Server is the Domain name, and it's IP contained in
the addition fields. If we get the NS Server by r.payload.name, we will get
the DNS Server Domain, so the Domain as server will pass to
client.queryUDPas DNS Server Address.
UDP.write will complaint that warnings.warn("Please only pass IPs to
write(), not hostnames "+addr[0] <http://twistedmatrix.com/trac/changeset/0>,
DeprecationWarning? <http://twistedmatrix.com/trac/wiki/DeprecationWarning>,
stacklevel=2). In addition, self.socket.sendto(datagram, addr) will call
socket.gethostbyname(addr), but this call is block.

I think we should use the Auth NS Server IP to replace the Domain. The patch
code as fellow:

Any comment is welcome!

 # No answers, but maybe there's a hint at who we should be asking about
this for r in answers:

 if r.type == dns.NS:

 from twisted.names import client

server = str(r.payload.name)

    for s in answers:

 if s.type==dns.A and str(s.name)==server :

 server = socket.inet_ntop(socket.AF_INET, s.payload.address) break

    r = client.Resolver(servers=[(server, dns.PORT)])
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20071015/1e9e3ceb/attachment.html>

From greveriego at citic.es  Mon Oct 15 05:27:16 2007
From: greveriego at citic.es (Gerardo)
Date: Mon, 15 Oct 2007 13:27:16 +0200
Subject: [Twisted-Python] returning strings with twisted.web.xmlrpc
Message-ID: <47134E94.2020500@citic.es>

How can I return NON-ASCII strings via xmlrpc( p.e. latin1)? Is it 
possible to read them using python's xmlrpclib? Thanks.



From p.mayers at imperial.ac.uk  Mon Oct 15 05:40:12 2007
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 15 Oct 2007 12:40:12 +0100
Subject: [Twisted-Python] Sending Data via a client
In-Reply-To: <470FC802.6000409@hotmail.com>
References: <web-3351355@newmail.nfi.kiae.ru>
	<470F6173.5040406@sensisoft.com>  <470FC802.6000409@hotmail.com>
Message-ID: <1192448412.1499.24.camel@doorstop.net.ic.ac.uk>

On Fri, 2007-10-12 at 20:16 +0100, Simon Pickles wrote:
> Twisted is event driven.
> 
> So how do I send Data through a client? All the example demonstrate is 
> how to receive events.
> 
> I suppose what I am asking is how do I refer to a client protocol from 
> another class?
> 
> My variable:
> 
> loop = = gatewayClient().start()
> 
> opens a reconnectingClientFactory, which opens a client protocol. How do 
> i make that client protocol global enough to use from anywhere in my app?

That's a python question. It's nothing to do with Twisted.






From yoann.aubineau at gmail.com  Mon Oct 15 06:06:17 2007
From: yoann.aubineau at gmail.com (Yoann Aubineau)
Date: Mon, 15 Oct 2007 14:06:17 +0200
Subject: [Twisted-Python] 2006, 'MySQL server has gone away'
In-Reply-To: <0E0A5677-408F-4A77-A257-C543FF70C6B0@bubblehouse.org>
References: <46F25C0E.90101@thiengineering.ch>
	<0E0A5677-408F-4A77-A257-C543FF70C6B0@bubblehouse.org>
Message-ID: <8b93c05a0710150506n241bf0edy8a37700e6bfd3e9a@mail.gmail.com>

2007/9/20, Phil Christensen <phil at bubblehouse.org>:
> On Sep 20, 2007, at 7:39 AM, Werner Thie wrote:
>
> > Hi all
> >
> > While using mySQL V 5.0.33 and MySQL-python-1.2.2 with twisted/
> > adbapi with the following connection params
> [snip snip snip]
> > I noticed (2006, 'MySQL server has gone away') errors, which seem
> > to be not recoverable from an adbapi standpoint.
> [snip snip snip]
> > Questions:
> > - are there any adverse effects in applying this patch and setting
> > reconnect: 1 in DB_ARGS?
> >
> > - is there a better, safer way to avoid this nasty error?
> >
> > Thxs, Werner
>
> I believe this is what the 'cp_reconnect' keyword argument to the
> ConnectionPool constructor does.

In case it helps:

The cp_reconnect keyword is mandatory but not sufficient for what I've
experienced. At least with MySQL server version 4.1.7, a disconnection
raises a generic OperationalError which one has to parse to know what
actually happened.

Hence the need to subclass ConnectionPool and surcharge
_runInteraction for adding the ability to retry on MySQL connection
lost. Or maybe is there a better way to do that?

---- CODE ----

import twisted.enterprise.adbapi
try:
    from MySQLdb import OperationalError
except ImportError:
    OperationalError = None

class EnhancedConnectionPool(adbapi.ConnectionPool):
    def _runInteraction(self, *args, **kwargs):
        try:
            d = abdapi.ConnectionPool._runInteraction(self, *args, **kwargs)
        except OperationalError, e:
            errormsg = str(e).lower()
            messages = (
                "lost connection to mysql server during query",
                "server has gone away"
            )
            for msg in messages:
                if msg in errormsg:
                    d = abdapi.ConnectionPool._runInteraction(self,
*args, **kwargs)
                    return d
            else:
                raise
        return d

---- / CODE ----



From me at mocisoft.com  Mon Oct 15 10:42:16 2007
From: me at mocisoft.com (markus espenhain)
Date: Mon, 15 Oct 2007 18:42:16 +0200
Subject: [Twisted-Python] trouble with missing exceptions
In-Reply-To: <20071010233736.GA16455@steerpike.home.puzzling.org>
References: <470C6CFA.5010108@mocisoft.com>
	<20071010233736.GA16455@steerpike.home.puzzling.org>
Message-ID: <47139868.4090408@mocisoft.com>

Andrew Bennetts schrieb:
> markus espenhain wrote:
>> hi
>>
>> i've written a tcp client - using a derived NetstringReceiver, a 
>> ReconnectingClientFactory and just reactor.connectTCP + reactor.run.
>>
>> the problem is that after the connection is made - every exception that 
>> occurred seems to be lost and the execution at this point discontinues - 
>> also with a try/catch block around it
>>
>> class MyProtocol(basic.NetstringReceiver):
>> 	...
>> 	def onData(self, data):
>> 		print data
>> 		try:
>> 			print 'before' # printed
>> 			raise Exception('err')
>> 		except Exception, e:
>> 			print e # nothing
>> 		print 'after' # nothing
>>
>> after print 'before' nothing more in onData happens - anyway the app 
>> runs and on new data the onData is entered again
>>
>> i poke around 2h or so and i can't remember to had this problem before 
>> ... so anybody can give me a hint or maybe something that i miss?
> 
> I'm guessing this isn't literally code you've tried to run, because that will
> always print e and 'after'.  There's nothing in Twisted that changes the way
> Python's exception handling works.
> 
> Taking a guess that by “raise Exception('err')” you mean you call a function
> that somehow raises an exception your “except Exception:” block fails to catch,
> perhaps try a bare “except:”.  It might be a string exception.
> 
> Otherwise, I'd try making as minimal an example of the problem as you can that
> can reproduce the problem, and if you're still stuck, posting that to this list
> (or if it doesn't involve Twisted, comp.lang.python).  Or use “import pdb;
> pdb.set_trace()” to insert a breakpoint and step through the code in the
> debugger.
> 
> -Andrew.
> 

hi

it was a syntax error between print 'before' and raise - a lot deeper in 
the code, which - for whatever reason - didn't pop up ... pdb helped - 
thanks

markus



From phil at bubblehouse.org  Mon Oct 15 08:46:38 2007
From: phil at bubblehouse.org (Phil Christensen)
Date: Mon, 15 Oct 2007 10:46:38 -0400
Subject: [Twisted-Python] 2006, 'MySQL server has gone away'
In-Reply-To: <8b93c05a0710150506n241bf0edy8a37700e6bfd3e9a@mail.gmail.com>
References: <46F25C0E.90101@thiengineering.ch>
	<0E0A5677-408F-4A77-A257-C543FF70C6B0@bubblehouse.org>
	<8b93c05a0710150506n241bf0edy8a37700e6bfd3e9a@mail.gmail.com>
Message-ID: <80124F0B-E5F2-4A8F-8F6F-803D4EF11B69@bubblehouse.org>


On Oct 15, 2007, at 8:06 AM, Yoann Aubineau wrote:

> 2007/9/20, Phil Christensen <phil at bubblehouse.org>:
>> On Sep 20, 2007, at 7:39 AM, Werner Thie wrote:
>>
>>> Hi all
>>>
>>> While using mySQL V 5.0.33 and MySQL-python-1.2.2 with twisted/
>>> adbapi with the following connection params
>> [snip snip snip]
>>> I noticed (2006, 'MySQL server has gone away') errors, which seem
>>> to be not recoverable from an adbapi standpoint.
>> [snip snip snip]
>>> Questions:
>>> - are there any adverse effects in applying this patch and setting
>>> reconnect: 1 in DB_ARGS?
>>>
>>> - is there a better, safer way to avoid this nasty error?
>>>
>>> Thxs, Werner
>>
>> I believe this is what the 'cp_reconnect' keyword argument to the
>> ConnectionPool constructor does.
>
> In case it helps:
>
> The cp_reconnect keyword is mandatory but not sufficient for what I've
> experienced. At least with MySQL server version 4.1.7, a disconnection
> raises a generic OperationalError which one has to parse to know what
> actually happened.
>
> Hence the need to subclass ConnectionPool and surcharge
> _runInteraction for adding the ability to retry on MySQL connection
> lost. Or maybe is there a better way to do that?

Are the lost connections you're experiencing due to server idle  
timeouts, or actual network issues? I believe Werner was referring to  
MySQL 5.0+ "security feature" that automatically closes idle  
connections after 8 hours. We discussed this a little further in this  
thread:

	http://twistedmatrix.com/pipermail/twisted-web/2007-October/003541.html

If it is an idle timeout you're running into, you might be able to  
turn it off. Apparently in older versions of MySQL it's possible to  
turn this feature off, although that depends on your take as to  
whether leaving a db connection open is a significant security risk  
or not.

> ---- CODE ----
>
> import twisted.enterprise.adbapi
> try:
>     from MySQLdb import OperationalError
> except ImportError:
>     OperationalError = None
>
> class EnhancedConnectionPool(adbapi.ConnectionPool):
>     def _runInteraction(self, *args, **kwargs):
>         try:
>             d = abdapi.ConnectionPool._runInteraction(self, *args,  
> **kwargs)
>         except OperationalError, e:
>             errormsg = str(e).lower()
>             messages = (
>                 "lost connection to mysql server during query",
>                 "server has gone away"
>             )
>             for msg in messages:
>                 if msg in errormsg:
>                     d = abdapi.ConnectionPool._runInteraction(self,
> *args, **kwargs)
>                     return d
>             else:
>                 raise
>         return d
>
> ---- / CODE ----

The only issue with this approach -- what happens if you've got more  
than one dead connection in the pool? You're still going to need code  
further up the call stack that can deal with the possibility of a  
failed query.

The other thing to consider is that the adbapi layer already detects  
broken connections in a database-agnostic fashion. If a query fails  
for any reason, a rollback occurs (if possible) and then a known good  
query ("SELECT 1") is attempted. If either of those steps fails,  
ConnectionLost is raised.

If this behavior is different for you, I'd be interested to know your  
MySQLdb version...I had some very strange issues with prior versions  
that were only fixed with 1.2.2.

Granted, your method is slightly more efficient at the expense of the  
MySQLdb dependency, but if you're going to need to detect the lost  
connections at the application level anyways, you might as well stick  
with the stock ConnectionPool.

-phil



From evert.rol at gmail.com  Mon Oct 15 13:39:26 2007
From: evert.rol at gmail.com (Evert Rol)
Date: Mon, 15 Oct 2007 20:39:26 +0100
Subject: [Twisted-Python] [newbie] server script with client functionality
Message-ID: <DFFCA097-ED53-4A29-B4D9-1FA01FAFBF9A@gmail.com>

   Hi all,

I'm trying to write a server script that can pass the received data  
on (acting as a client) to a next server.
Say, server A receives data from client B, and then acts as client A  
(while keeping in contact with client B) for server C.
I'm using it to pass data through an extra machine before reaching  
the actual machine, where the extra machine serves as a security  
measure (eg, if that gets hacked, that won't bring too may other  
things down).

I'm new to Twisted, so I'm not sure where to find information on  
this. I've been looking at creating a client at the moment that the  
server receives data (in the dataReceived() method), but then I get  
two factory.run() methods, and would also need to find a way to stop  
the client; that doesn't seem to be correct. Or perhaps using  
threads, but then I don't know how to pass the data from the server  
to client.
Best to me would to have both connections active, each on their own  
port, and when data is received, 'something' in the client part gets  
called that sends these data on.
Alternatively, I could simply call an external program with the data  
as arguments from the server script, but I'd like a all-in-one  
solution if possible. Or perhaps I'm looking at this the wrong way?  
(Although I'd prefer not to try and turn 'server C' into 'client C'.)

Any suggestions or pointers?

Thanks in advance,

   Evert




From johann.borck at densedata.com  Mon Oct 15 16:46:50 2007
From: johann.borck at densedata.com (Johann Borck)
Date: Tue, 16 Oct 2007 00:46:50 +0200
Subject: [Twisted-Python] [newbie] server script with client functionality
In-Reply-To: <DFFCA097-ED53-4A29-B4D9-1FA01FAFBF9A@gmail.com>
References: <DFFCA097-ED53-4A29-B4D9-1FA01FAFBF9A@gmail.com>
Message-ID: <4713EDDA.30600@densedata.com>

Evert Rol wrote:
>   Hi all,
>
> I'm trying to write a server script that can pass the received data on
> (acting as a client) to a next server.
> Say, server A receives data from client B, and then acts as client A
> (while keeping in contact with client B) for server C.
> I'm using it to pass data through an extra machine before reaching the
> actual machine, where the extra machine serves as a security measure
> (eg, if that gets hacked, that won't bring too may other things down).
>
> I'm new to Twisted, so I'm not sure where to find information on this. 
http://twistedmatrix.com/projects/core/documentation/howto/tutorial/client.html

> I've been looking at creating a client at the moment that the server
> receives data (in the dataReceived() method), but then I get two
> factory.run() methods
do you mean reactor.run()?  Factories usually just implement
buildProtocol, and can be used to keep references to protocols and other
stuff (see tutorial).
> , and would also need to find a way to stop the client; that doesn't
> seem to be correct. Or perhaps using threads, but then I don't know
> how to pass the data from the server to client.
you don't need threads.
> Best to me would to have both connections active, each on their own
> port, and when data is received, 'something' in the client part gets
> called that sends these data on.
> Alternatively, I could simply call an external program with the data
> as arguments from the server script, but I'd like a all-in-one
> solution if possible. Or perhaps I'm looking at this the wrong way?
> (Although I'd prefer not to try and turn 'server C' into 'client C'.)
what do you mean by  turning 'server C' into 'client C'?
>
> Any suggestions or pointers?
>
How many connections from A to C do you need? as many as for B to A?
Since you're in control of both servers it might make sense to keep some
connections open between A and C, and save some handshake-overhead.

The finger example comes close to what you need, you just have to make
serverprotocolA and clientprotocolA aware of each other.

Johann
> Thanks in advance,
>
>   Evert
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>




From dlamoris at ucla.edu  Mon Oct 15 21:40:43 2007
From: dlamoris at ucla.edu (Doris Lam)
Date: Mon, 15 Oct 2007 20:40:43 -0700
Subject: [Twisted-Python] using Twisted with postgresql
Message-ID: <471432BB.8090201@ucla.edu>

Hi,

I'm new to Twisted and is currently looking for a way to asynchronously 
do queries to a postgres database. From what I've seen it looks like 
there's a project called pgasync (http://jamwt.com/pgasync/) that does 
this, or I can use Twisted's adbapi and some other synchronous module. 
I'm wondering if anyone has used pgasync and how it compares to using 
adbapi and threads? From the pgasync site it seems the last update was 
in 2005, so I'm not sure if anyone's still maintaining it. If using 
adbapi's better, can I get some suggestions as to which postgres module 
I should use? So far I've seen pyPgSQL and psychopg that're both DB API 
2 compliant. Any help will be appreciated!

Thanks,
Doris



From screwtape at froup.com  Mon Oct 15 22:20:35 2007
From: screwtape at froup.com (Tim Allen)
Date: Tue, 16 Oct 2007 14:20:35 +1000
Subject: [Twisted-Python] using Twisted with postgresql
In-Reply-To: <471432BB.8090201@ucla.edu>
References: <471432BB.8090201@ucla.edu>
Message-ID: <2E0EB2DF-F7C1-4AFD-84E7-310941CA567D@froup.com>

On 16 Oct 2007, at 13:40, Doris Lam wrote:
> I'm new to Twisted and is currently looking for a way to  
> asynchronously do queries to a postgres database. From what I've  
> seen it looks like there's a project called pgasync (http:// 
> jamwt.com/pgasync/) that does this, or I can use Twisted's adbapi  
> and some other synchronous module. I'm wondering if anyone has used  
> pgasync and how it compares to using adbapi and threads? From the  
> pgasync site it seems the last update was in 2005, so I'm not sure  
> if anyone's still maintaining it. If using adbapi's better, can I  
> get some suggestions as to which postgres module I should use? So  
> far I've seen pyPgSQL and psychopg that're both DB API 2 compliant.  
> Any help will be appreciated!

I don't have any experience with PgAsync, but (while it's a very cool  
idea), I personally would prefer to use a database wrapper that wraps  
libpq - the standard, Postgres-supplied client library, shared with  
and debugged by nearly every other tool that talks to Postgres -  
rather than a wrapper that uses its own ground-up reimplementation.

I also don't have any experience with pyPgSQL, but I have used  
psycopg2 and been impressed with its features and performance.



From eburus at gmail.com  Tue Oct 16 00:45:09 2007
From: eburus at gmail.com (Burus Gmail)
Date: Tue, 16 Oct 2007 10:45:09 +0400
Subject: [Twisted-Python] using Twisted with postgresql
In-Reply-To: <2E0EB2DF-F7C1-4AFD-84E7-310941CA567D@froup.com>
References: <471432BB.8090201@ucla.edu>
	<2E0EB2DF-F7C1-4AFD-84E7-310941CA567D@froup.com>
Message-ID: <47145DF5.10402@gmail.com>

I'm using psycopg2 with dictionary cursor.

Create module twistedpg.py in the python path(in my variant it's
twisted's project directory)

from psycopg2 import *
from psycopg2 import _psycopg as _2psycopg
from psycopg2.extensions import connection as _2connection
from psycopg2.extras import DictCursor

del connect
def connect(*args, **kwargs):
    kwargs['connection_factory'] = connection
    return _2psycopg.connect(*args, **kwargs)

class connection(_2connection):
    def cursor(self):
    return _2connection.cursor(self, cursor_factory=DictCursor)

In a twisted's plugin i using standard ConnectionPool

master_db = ConnectionPool('twistedpg', user='pron',
                           password='xxx', host='127.0.0.1',
                           database='playboy', port=5436, cp_max=5,
                           cp_noisy=True, cp_reconnect=True)

Tim Allen wrote:
> On 16 Oct 2007, at 13:40, Doris Lam wrote:
>> I'm new to Twisted and is currently looking for a way to
>> asynchronously do queries to a postgres database. From what I've seen
>> it looks likes.here's a project called pgasync
>> (http://jamwt.com/pgasync/) that does this, or I can use Twisted's
>> adbapi and some other synchronous module. I'm wondering if anyone has
>> used pgasync and how it compares to using adbapi and threads? From
>> the pgasync site it seems the last update was in 2005, so I'm not
>> sure if anyone's still maintaining it. If using adbapi's better, can
>> I get some suggestions as to which postgres module I should use? So
>> far I've seen pyPgSQL and psychopg that're both DB API 2 compliant.
>> Any help will be appreciated!
>
> I don't have any experience with PgAsync, but (while it's a very cool
> idea), I personally would prefer to use a database wrapper that wraps
> libpq - the standard, Postgres-supplied client library, shared with
> and debugged by nearly every other tool that talks to Postgres -
> rather than a wrapper that uses its own ground-up reimplementation.
>
> I also don't have any experience with pyPgSQL, but I have used
> psycopg2 and been impressed with its features and performance.
-- 
http://fats.sourceforge.net
http://movinglights.org
http://burus.org




From manlio_perillo at libero.it  Tue Oct 16 04:07:07 2007
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Tue, 16 Oct 2007 12:07:07 +0200
Subject: [Twisted-Python] using Twisted with postgresql
In-Reply-To: <471432BB.8090201@ucla.edu>
References: <471432BB.8090201@ucla.edu>
Message-ID: <47148D4B.3050605@libero.it>

Doris Lam ha scritto:
> Hi,
> 
> I'm new to Twisted and is currently looking for a way to asynchronously 
> do queries to a postgres database. From what I've seen it looks like 
> there's a project called pgasync (http://jamwt.com/pgasync/) that does 
> this, or I can use Twisted's adbapi and some other synchronous module. 

Some time ago, I have refactored the pgasync implementation in pglib:
http://hg.mperillo.ath.cx/twisted/pglib/

It offers an API for almost all the functionality of the Posgres protocol.
The only thing missing is a connection pool manager, and support for 
prepared queries.

> I'm wondering if anyone has used pgasync and how it compares to using 
> adbapi and threads? From the pgasync site it seems the last update was 
> in 2005, so I'm not sure if anyone's still maintaining it. If using 
> adbapi's better, can I get some suggestions as to which postgres module 
> I should use? So far I've seen pyPgSQL and psychopg that're both DB API 
> 2 compliant. Any help will be appreciated!
> 

A pure asynchronous implementation has better performance, in theory, 
since you don't need to use thread locks.

Moreover, pglib can be very useful, as an example, if you want to 
"consume" each row at a time, or if you want to listen for database 
notifications.

However using libpq has many advantages.
You can also use the asynchronous interface that psycopg2 implements:
http://www.initd.org/svn/psycopg/psycopg2/trunk/doc/async.txt

However you *need* a good connection pool manager for asynchronous 
connections, and, as far as I know, no one has yet written such a thing.

I'm interested in this topic, since I'm writing a WSGI implementation 
for Nginx and it, like Twisted, is asynchronous (and *without* threads 
support):
http://hg.mperillo.ath.cx/nginx/mod_wsgi/



Regards  Manlio Perillo



From evert.rol at gmail.com  Tue Oct 16 09:43:39 2007
From: evert.rol at gmail.com (Evert Rol)
Date: Tue, 16 Oct 2007 16:43:39 +0100
Subject: [Twisted-Python] [newbie] server script with client functionality
In-Reply-To: <5201E5D8-423F-490D-B55A-D28BFABA016D@gmail.com>
References: <DFFCA097-ED53-4A29-B4D9-1FA01FAFBF9A@gmail.com>
	<4713EDDA.30600@densedata.com>
	<5201E5D8-423F-490D-B55A-D28BFABA016D@gmail.com>
Message-ID: <EE1BF4AE-D4B5-4666-8270-34D846033229@gmail.com>

   Hi Johann,

Thanks for your reply.

>> I'm new to Twisted, so I'm not sure where to find information on  
>> this.
> http://twistedmatrix.com/projects/core/documentation/howto/tutorial/ 
> client.html

I had looked at the tutorial, but admittedly not gone all the way, as  
it didn't seem to address my problem. But it looks like this part of  
the tutorial actually does.

Then again, by that time, I felt a bit daunted by the Twisted  
framework (Protocols, Services, Factories and what not, all hooked  
into each other). So I've switched back to the socket module. While  
less neat, it does have the additional advantage that when exporting  
my script to other people, I don't have to ask them to install  
Twisted as well.
But perhaps, in time, I will give Twisted another try. I'll certainly  
play with a few times more, to see if I can get the hang of it.

Anyway, thanks again,

   Evert

ps: ah yes, I did mean reactor.run(). I had already gotten somewhat  
confused with the terminology.


> Evert Rol wrote:
>>   Hi all,
>>
>> I'm trying to write a server script that can pass the received  
>> data on
>> (acting as a client) to a next server.
>> Say, server A receives data from client B, and then acts as client A
>> (while keeping in contact with client B) for server C.
>> I'm using it to pass data through an extra machine before reaching  
>> the
>> actual machine, where the extra machine serves as a security measure
>> (eg, if that gets hacked, that won't bring too may other things  
>> down).
>>
>>
>> I've been looking at creating a client at the moment that the server
>> receives data (in the dataReceived() method), but then I get two
>> factory.run() methods
> do you mean reactor.run()?  Factories usually just implement
> buildProtocol, and can be used to keep references to protocols and  
> other
> stuff (see tutorial).
>> , and would also need to find a way to stop the client; that doesn't
>> seem to be correct. Or perhaps using threads, but then I don't know
>> how to pass the data from the server to client.
> you don't need threads.
>> Best to me would to have both connections active, each on their own
>> port, and when data is received, 'something' in the client part gets
>> called that sends these data on.
>> Alternatively, I could simply call an external program with the data
>> as arguments from the server script, but I'd like a all-in-one
>> solution if possible. Or perhaps I'm looking at this the wrong way?
>> (Although I'd prefer not to try and turn 'server C' into 'client C'.)
> what do you mean by  turning 'server C' into 'client C'?
>>
>> Any suggestions or pointers?
>>
> How many connections from A to C do you need? as many as for B to A?
> Since you're in control of both servers it might make sense to keep  
> some
> connections open between A and C, and save some handshake-overhead.
>
> The finger example comes close to what you need, you just have to make
> serverprotocolA and clientprotocolA aware of each other.
>
> Johann
>> Thanks in advance,
>>
>>   Evert
>>




From anuraguniyal at yahoo.com  Thu Oct 18 06:17:13 2007
From: anuraguniyal at yahoo.com (anurag uniyal)
Date: Thu, 18 Oct 2007 05:17:13 -0700 (PDT)
Subject: [Twisted-Python] Content Encoding : gzip ?
Message-ID: <143220.20091.qm@web37314.mail.mud.yahoo.com>

Is it possible to send and recieve compressed content using twisted.web?

I have set Accept-encoding to gzip but it doesn't make any difference.
Will I have to cater for this myself?

rgds
Anurag

__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20071018/2d0e853b/attachment.html>

From jrg718 at gmx.net  Thu Oct 18 06:41:38 2007
From: jrg718 at gmx.net (=?ISO-8859-15?Q?J=FCrgen_Strass?=)
Date: Thu, 18 Oct 2007 14:41:38 +0200
Subject: [Twisted-Python] Should I use asynchronous programming in my own
	modules?
Message-ID: <47175482.1090809@gmx.net>

Hello,

I'm rather new to twisted and asynchronous programming in general. 
Overall, I think I've understood the asynchronous programming model and 
its implications quite well. Nevertheless, there are some remaining 
questions.

To give some example, I'd like to develop my own simplified document 
format in XML and a corresponding parser. The output of the parser (a 
specialized document object model) will be traversed and translated into 
HTML afterwards. This module could be useful outside any twisted 
application, of course. Instead of generating HTML one could develop a 
generator that produces LaTeX, for example. But it could also be used to 
render HTML pages in a twisted web application. The question is this: 
since parsing and generating large documents could block the reactor in 
a twisted app, should I use any of twisted's asynchronous programming 
features in this module (for better integration with twisted) or should 
I rather develop it in a traditional way and run it in a thread?

The question came to my mind, because somewhere I read that long lasting 
operations in third party modules should be called in a thread. This is 
clear. I also read that if one has the opportunity to develop an 
application from scratch, one should rather go for using twisted's 
asynchronous programming features and divide long lasting operations 
into small chunks. In principal, this approach is clear to me, but does 
it also apply for modules which are entirely independent from twisted 
networking code? And if so, is there any way to decouple them from the 
twisted library for reuse in other applications?

The last question is what criteria I could use to divide long lasting 
operations into chunks. In almost all books about asynchronous 
programming I only read that if they're too big, they could block the 
event loop. Of course, but how big is too big? And what's the measure 
for it? Milliseconds, number of operations, number of code lines - or 
what? Doesn't it depend entirely on the application at hand and how 
reactive it has to be? Moreover, depending on the hardware used, on a 
Pentium II less chunks can be processed at the same time than on a 
Athlon 64, for example. And couldn't chunks also be too small, spending 
more time than necessary in putting them into the reactor's queue, then 
maybe sorting them and then calling them? In case the overhead involved 
in scheduling some chunk is bigger than the processing time of the chunk 
itself, the chunks are too small, aren't they?

Thanks in advance for any answers,
Jürgen




From itamar at itamarst.org  Thu Oct 18 07:09:39 2007
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 18 Oct 2007 09:09:39 -0400
Subject: [Twisted-Python] Should I use asynchronous programming in my
	own modules?
In-Reply-To: <47175482.1090809@gmx.net>
References: <47175482.1090809@gmx.net>
Message-ID: <1192712979.11206.59.camel@localhost.localdomain>

On Thu, 2007-10-18 at 14:41 +0200, Jürgen Strass wrote:

> I'm rather new to twisted and asynchronous programming in general. 
> Overall, I think I've understood the asynchronous programming model and 
> its implications quite well. Nevertheless, there are some remaining 
> questions.
> 
> To give some example, I'd like to develop my own simplified document 
> format in XML and a corresponding parser. The output of the parser (a 
> specialized document object model) will be traversed and translated into 
> HTML afterwards. This module could be useful outside any twisted 
> application, of course. Instead of generating HTML one could develop a 
> generator that produces LaTeX, for example. But it could also be used to 
> render HTML pages in a twisted web application. The question is this: 
> since parsing and generating large documents could block the reactor in 
> a twisted app, should I use any of twisted's asynchronous programming 
> features in this module (for better integration with twisted) or should 
> I rather develop it in a traditional way and run it in a thread?

What you mean by "traditional" is actually a pull parser. Parsing APIs
can be pull or push (i.e. asynchronous). Well-designed parsers are
always push, because push parsers can be trivially converted to blocking
pull parsers, but not vice-versa. Some examples of push/asynch parsers:
twisted's Protocol class, or the SAX API.

The key difference: a pull parser will *read* data from some data source
with a blocking API. A push parser gets the data *pushed* to it by the
user.

So: write a push parser. You won't need to use any Twisted facilities.
To make things a bit clearer - here's how you convert a push parser into
a pull parser:

def parse(f):
   parser = MyParser()
   for line in f:
      parser.push(line)
   return parser.result()

In Twisted, a push parser will often get data pushed to it from
Protocol.dataReceived.




From radix at twistedmatrix.com  Thu Oct 18 07:11:48 2007
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Thu, 18 Oct 2007 09:11:48 -0400
Subject: [Twisted-Python] Should I use asynchronous programming in my own
	modules?
In-Reply-To: <47175482.1090809@gmx.net>
References: <47175482.1090809@gmx.net>
Message-ID: <60ed19d40710180611t3416288dh65971bae4ac236da@mail.gmail.com>

On 10/18/07, Jürgen Strass <jrg718 at gmx.net> wrote:

> To give some example, I'd like to develop my own simplified document
> format in XML and a corresponding parser.
...
> This module could be useful outside any twisted
> application, of course.
...
> The question is this:
> since parsing and generating large documents could block the reactor in
> a twisted app, should I use any of twisted's asynchronous programming
> features in this module (for better integration with twisted) or should
> I rather develop it in a traditional way and run it in a thread?

You don't need to make the module depend on Twisted, but you also
don't need to force users to use a thread. Just make sure the library
knows how to parse and process incrementally; then your asynchronous
users can pass in chunks of data as they receive them and your other
users can pass in everything at once. Basically, it's a matter of
inverting your library's loop that would otherwise go "read; process;"
to "when process_more_data is called, process that data".


> The last question is what criteria I could use to divide long lasting
> operations into chunks. In almost all books about asynchronous
> programming I only read that if they're too big, they could block the
> event loop. Of course, but how big is too big? And what's the measure
> for it? Milliseconds, number of operations, number of code lines - or
> what? Doesn't it depend entirely on the application at hand and how
> reactive it has to be?

"Bigness" here refers to time spent. And yes, it depends on the application.


-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/

From exarkun at divmod.com  Thu Oct 18 07:31:51 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 18 Oct 2007 09:31:51 -0400
Subject: [Twisted-Python] Should I use asynchronous programming in my own
	modules?
In-Reply-To: <47175482.1090809@gmx.net>
Message-ID: <20071018133151.8162.1755919631.divmod.quotient.24657@ohm>

On Thu, 18 Oct 2007 14:41:38 +0200, Jürgen Strass <jrg718 at gmx.net> wrote:
>Hello,
>
>I'm rather new to twisted and asynchronous programming in general. Overall, 
>I think I've understood the asynchronous programming model and its 
>implications quite well. Nevertheless, there are some remaining questions.
>
>To give some example, I'd like to develop my own simplified document format 
>in XML and a corresponding parser. The output of the parser (a specialized 
>document object model) will be traversed and translated into HTML 
>afterwards. This module could be useful outside any twisted application, of 
>course. Instead of generating HTML one could develop a generator that 
>produces LaTeX, for example. But it could also be used to render HTML pages 
>in a twisted web application.

Have you seen Lore?

>The question is this: since parsing and 
>generating large documents could block the reactor in a twisted app, should 
>I use any of twisted's asynchronous programming features in this module (for 
>better integration with twisted) or should I rather develop it in a 
>traditional way and run it in a thread?

Incremental parsing is often useful and simpler than the alternative.  If
you are accepting a document over the network, why buffer it yourself and
then parse it when you could just be giving each piece directly to the
parser?  Done this way, it often is the case that even large documents can
be parsed without blocking for an unreasonable amount of time.

>
>The question came to my mind, because somewhere I read that long lasting 
>operations in third party modules should be called in a thread. This is 
>clear. I also read that if one has the opportunity to develop an application 
>from scratch, one should rather go for using twisted's asynchronous 
>programming features and divide long lasting operations into small chunks. 

The CPU differs from the network.  There are rarely points in a CPU-bound
task where suspending to work on something else would not be an arbitrary
decision.  When dealing with the network, these points are obvious and
not at all arbitrary.  So, when dealing with the network, it's almost
unarguable that you should use Twisted's APIs instead of using blocking
APIs.  However, Twisted doesn't provide any functionality specifically
for breaking up CPU-bound tasks, primarily because any such functionality
would be arbitrary.

>In principal, this approach is clear to me, but does it also apply for 
>modules which are entirely independent from twisted networking code? And if 
>so, is there any way to decouple them from the twisted library for reuse in 
>other applications?

It's typically trivial to drive code written to be used asynchronously in
a synchronous manner.  The opposite is rarely, if ever, true.  Consider a
parser API which consists of a "feed" method taking a string giving some
more bytes from the input document.  You can use this by passing in small
chunks repeatedly until the entire document has been passed in, or you can
pass in the entire document at once.  Now consider an API where the entire
document must be supplied at once: how do you use that without blocking?

>
>The last question is what criteria I could use to divide long lasting 
>operations into chunks. In almost all books about asynchronous programming I 
>only read that if they're too big, they could block the event loop. Of 
>course, but how big is too big? And what's the measure for it? Milliseconds, 
>number of operations, number of code lines - or what? Doesn't it depend 
>entirely on the application at hand and how reactive it has to be?

Yes.

>Moreover, 
>depending on the hardware used, on a Pentium II less chunks can be processed 
>at the same time than on a Athlon 64, for example.

True as well.  However, is your primary goal to provide ideal scheduling
behavior both on a CPU released this year and a CPU released ten years ago?

>And couldn't chunks also 
>be too small, spending more time than necessary in putting them into the 
>reactor's queue, then maybe sorting them and then calling them? In case the 
>overhead involved in scheduling some chunk is bigger than the processing 
>time of the chunk itself, the chunks are too small, aren't they?

Correct again.

These problems can all be mitigated, at least partially, by allowing the
application to decide how much work is done at once.  Parsing one byte from
an input document should take less time than parsing one megabyte.  Let the
application decide how much work is done at a time.  Size of input is only
one way in which this can be controlled.  You could support explicit tuning
of these parameters with a dedicated API, or you could support stepwise
processing and let the application explicitly step it as far as it wants to
at a time.  In this direction, there are some extremely primitive tools in
twisted.internet.task.  They will not solve the problem for you, but they
may give you some ideas or save you a bit of typing.

>
>Thanks in advance for any answers,
>Jürgen
>

Jean-Paul



From exarkun at divmod.com  Thu Oct 18 07:34:45 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 18 Oct 2007 09:34:45 -0400
Subject: [Twisted-Python] Content Encoding : gzip ?
In-Reply-To: <143220.20091.qm@web37314.mail.mud.yahoo.com>
Message-ID: <20071018133445.8162.1336923094.divmod.quotient.24660@ohm>

On Thu, 18 Oct 2007 05:17:13 -0700 (PDT), anurag uniyal <anuraguniyal at yahoo.com> wrote:
>Is it possible to send and recieve compressed content using twisted.web?

Not without writing some more code.  You might want to ask on the twisted-web
mailing list if anyone has written this already.

Jean-Paul



From jrg718 at gmx.net  Thu Oct 18 08:50:42 2007
From: jrg718 at gmx.net (=?ISO-8859-1?Q?J=FCrgen_Strass?=)
Date: Thu, 18 Oct 2007 16:50:42 +0200
Subject: [Twisted-Python] Should I use asynchronous programming in my
	own modules?
In-Reply-To: <1192712979.11206.59.camel@localhost.localdomain>
References: <47175482.1090809@gmx.net>
	<1192712979.11206.59.camel@localhost.localdomain>
Message-ID: <471772C2.1020107@gmx.net>

Itamar Shtull-Trauring wrote:
> [...]
> What you mean by "traditional" is actually a pull parser. Parsing APIs
> can be pull or push (i.e. asynchronous). Well-designed parsers are
> always push, because push parsers can be trivially converted to blocking
> pull parsers, but not vice-versa. Some examples of push/asynch parsers:
> twisted's Protocol class, or the SAX API.
Sorry, I think my example was somewhat misleading and it also becomes 
clear to me that I haven't used the word "asynchronous" correctly. I 
didn't consider that one can also register callbacks with a parser, for 
example, and call this type of programming asynchronous. (The principle 
"Don't call us, we call you" would apply here, too, of course.)

No, what I really meant by "traditional" was to write parsers and 
generators which traverse the document as a whole in one large step, 
without giving a chance to the twisted reactor to process any other 
events. Let's assume I got a dom tree from pythons XML parser. First, 
I'd traverse that tree and build up another tree consisting of element 
objects. Each element object is an instance of a class corresponding to 
a tag, for example for tag <chapter> I'd create a class "chapter". This 
is necessary because there's not always a one-to-one correspondence 
between tags and my document elements and to associate some additional 
attributes with such elements later, for example automatically generated 
chapter numbers. I'd then use the generator to traverse that element 
tree, calling "render_element" methods on my way. For element chapter 
with attribute title I'd call "render_chapter( node )", which then 
generates "<h1>chapter_title</h1>".

Let's assume I had some element with child elements. Without knowing 
about twisted at all, I'd have created a foreach loop to process each 
child like this:

foreach child_node in root_elem.children:
   if child_node.type = chapter:
      processChapter( child_node )

My idea now is that depending on the number of child elements, looping 
could take some time. So instead I'd use twisted's reactor, specifically 
its callLater method like this (it's only pseudo code!):

class Generator:

   def generate_html( self ):
      self.d = defer.Deferred()
      self.startProcessing()
      return self.d

   def startProcessing( self ):
      self.current_element = root_elem
      self.processNextElement()

   def processNextElement( self ):
      if more elements to process:
         if current_element.type = chapter
            reactor.callLater( 0, processChapter, current_element )
      .....
      else:
         d.callback( "finished" )

In this way any twisted user could get a Deferred from the generate_html 
method and get called when the Generator has generated all HTML. The 
problem with this is that I couldn't ever use such code without also 
installing twisted, of course.

It's more or less clear to me how to divide the traversal of such a dom 
tree into discrete steps, but it's not so clear how to call the 
processNextElement with reactor.callLater from the outside. Although, 
after I've read the other answers, it seems to me I'm not far from a 
solution. I think I could also create two classes: the Generator class, 
which would provide a processNextElement method and doesn't need to 
depend on the twisted framework, and a TwistedGenerator class, which 
would do exactly the same like the code above and repeatedly call 
processNextElement with reactor.callLater. But the internal housekeeping 
which element to process next could be more difficult than with the 
solution above, couldn't it? (Because instead of seperate methods like 
"processChapter", "processList", etc. I'd only have one method to call 
from outside, "processNextElement" (and something like 
"moreElementsToProcess"). The TwistedGenerator wrapper shouldn't know 
about the internal state of the Generator, I think.)

Many greetings,
Jürgen




From jrg718 at gmx.net  Thu Oct 18 09:05:31 2007
From: jrg718 at gmx.net (=?UTF-8?B?SsO8cmdlbiBTdHJhc3M=?=)
Date: Thu, 18 Oct 2007 17:05:31 +0200
Subject: [Twisted-Python] Should I use asynchronous programming in my
	own	modules?
In-Reply-To: <20071018133151.8162.1755919631.divmod.quotient.24657@ohm>
References: <20071018133151.8162.1755919631.divmod.quotient.24657@ohm>
Message-ID: <4717763B.70903@gmx.net>

Jean-Paul Calderone schrieb:
> On Thu, 18 Oct 2007 14:41:38 +0200, Jürgen Strass <jrg718 at gmx.net> wrote:
>>
>> To give some example, I'd like to develop my own simplified document 
>> format in XML and a corresponding parser. [...]
> Have you seen Lore?
>
Not yet. I'll have a look at it, though. I guess to some degree I'm 
reinventing the wheel, but I rather see this a an exercise.
>> The question is this: since parsing and generating large documents 
>> could block the reactor in a twisted app, should I use any of 
>> twisted's asynchronous programming features in this module (for 
>> better integration with twisted) or should I rather develop it in a 
>> traditional way and run it in a thread?
> Incremental parsing is often useful and simpler than the alternative.  If
> you are accepting a document over the network, why buffer it yourself and
> then parse it when you could just be giving each piece directly to the
> parser?  Done this way, it often is the case that even large documents 
> can
> be parsed without blocking for an unreasonable amount of time.
Okay, I agree. To get away somewhat from parsers, the question arises 
for other programming tasks as well, of course.

So I already asked myself how one would translate the example of a 
factorial function in twisted's core documentation to use the reactor's 
scheduling mechanism instead of running it in a thread. I think an 
example of how to divide it into chunks and how to use the reactor would 
be great.

What I tried at first was programming a simple counter this way. It 
would look much similar to the code I presented in reply to Itamar 
Shtull-Trauring's answer. What I'm not sure about is if this is the 
correct way to go for.

Many thanks for all the other points you've answered, it made a lot of 
things much clearer to me.

Jürgen




From tdickenson at geminidataloggers.com  Thu Oct 18 11:49:21 2007
From: tdickenson at geminidataloggers.com (Toby Dickenson)
Date: Thu, 18 Oct 2007 18:49:21 +0100
Subject: [Twisted-Python] Re: Should I use asynchronous programming in my
	own modules?
References: <47175482.1090809@gmx.net>
	<1192712979.11206.59.camel@localhost.localdomain>
	<471772C2.1020107@gmx.net>
Message-ID: <ff86b2$epg$1@ger.gmane.org>

Jürgen Strass wrote:

> My idea now is that depending on the number of child elements, looping
> could take some time. So instead I'd use twisted's reactor, specifically
> its callLater method like this (it's only pseudo code!):
> 
> class Generator:
> 
>    def generate_html( self ):
>       self.d = defer.Deferred()
>       self.startProcessing()
>       return self.d
> 
>    def startProcessing( self ):
>       self.current_element = root_elem
>       self.processNextElement()
> 
>    def processNextElement( self ):
>       if more elements to process:
>          if current_element.type = chapter
>             reactor.callLater( 0, processChapter, current_element )
>       .....
>       else:
>          d.callback( "finished" )

This is not so good. You have taken away your users option to control which
thread this processing is performed in, because it has to run in the
reactor's thread to avoid breaking Deferred's threading rules. Also your
users are not getting any benefit from the incremental nature of this code.
For example they cant get access to the first chunk of html until after
callback("finished"). At least, not without more complexity. They cant
decide to stop processing early because they were only interested in the
html <head>.

> It's more or less clear to me how to divide the traversal of such a dom
> tree into discrete steps

It seems like you are confusing this goal - the ability to perform work in
incremental steps - with the use of twisted's reactor to schedule those
steps.

Set twisted aside for a moment. I propose one good pythonic interface to
your html creation code may be a generate_html_iter() method, which returns
an iterator over the documents html fragments. You can implement this using
the processNextElement approach you suggested, although python generator
functions may be more convenient.


A thin wrapper around this iterator could use reactor.callLater to schedule
it, then fire a callback when complete. An equally thin wrapper could use
PostMessage to calculate the document in the background of a win32 gui. Or
it could feed a pull producer.  Alternatively it could be run in another
thread with deferToThread(lambda:''.join(g.generate_html_iter()))

I hope this helps,





From jrg718 at gmx.net  Thu Oct 18 12:04:13 2007
From: jrg718 at gmx.net (=?ISO-8859-15?Q?J=FCrgen_Strass?=)
Date: Thu, 18 Oct 2007 20:04:13 +0200
Subject: [Twisted-Python] Should I use asynchronous programming in my
	own	modules?
In-Reply-To: <60ed19d40710180611t3416288dh65971bae4ac236da@mail.gmail.com>
References: <47175482.1090809@gmx.net>
	<60ed19d40710180611t3416288dh65971bae4ac236da@mail.gmail.com>
Message-ID: <4717A01D.8040909@gmx.net>

Christopher Armstrong wrote:
> You don't need to make the module depend on Twisted, but you also
> don't need to force users to use a thread. Just make sure the library
> knows how to parse and process incrementally; then your asynchronous
> users can pass in chunks of data as they receive them and your other
> users can pass in everything at once. Basically, it's a matter of
> inverting your library's loop that would otherwise go "read; process;"
> to "when process_more_data is called, process that data".
>   
As I already explained in my replies to Jean-Paul Calderone and Itamar 
Shtull-Trauring, I'm not sure if I have fully understood how this works 
in particular. The example of a parser probably wasn't well chosen, 
because in all replies to my original posting people seem to assume that 
I need to do something in response to an external event (e.g. I/O 
events). Please, better think of a long running CPU bound algorithm 
perhaps. From twisted, I'd like to start that algorithm in the 
background and get notified when it has finished. It shouldn't ever 
block the application for too long. In other applications, I'd like to 
call the algorithm in a synchronous way.

It is most likely that my difficulty in understanding results from the 
fact that in such a case there is no external event that could trigger 
the processing of the individual steps the algorithm has. The best I've 
come up with so far uses a wrapper around a synchronous interface that 
provides methods for calling the next step of the algorithm and for 
testing if the algorithm has finished. What I'd like to know is if this 
solution basically is the style one has to use when writing algorithms 
divided into chunks and if the approach to integrate it into twisted is 
well chosen. Also, I don't fully understand the implications this 
programming style has on long running loops. I have the impression that 
I would need to divide loops into several methods: loopInit, 
loopCondition, loopNextStep and loopFinished. Is this correct?

Following is my code for a counter class which also uses the wrapper 
class I've described above. Using the wrapper class, it is possibly to 
run several counters concurrently. The Counter class is already 
decoupled from twisted. In case I want to use the synchronous version, 
I'd use Counter, in case I want to use the asynchronous version with 
deferreds, I'd use TwistedCounter.

----

from twisted.internet import reactor, defer

class Counter:
   def __init__( self, id, limit ):
      self.id = id
      self.limit = limit
      self.count = 0
   def limitNotReached( self ):
      return self.count < self.limit
   def increment( self ):
      if self.limitNotReached():
         print "Counter %d: %d" % ( self.id, self.count )
         self.count = self.count + 1
   def run( self ):
      while self.limitNotReached():
         self.increment()
        
class TwistedCounter:
   def __init__( self, counter ):
      self.counter = counter
   def run( self ):
      self.d = defer.Deferred()
      self.increment()
      return self.d
   def increment( self ):
      if self.counter.limitNotReached():
         self.counter.increment()
         reactor.callLater( 0, self.increment )
      else:
         self.d.callback( "finished" )
        
def counters_finished( result ):
   print "  traditional counters finished."
   reactor.stop()

print "-- Run traditional counter:\n"

traditional_c = Counter( 1, 130 )
traditional_c.run()

print "\n-- Run twisted counters concurrently:\n"

c1 = TwistedCounter( Counter( 2, 100 ) )
c2 = TwistedCounter( Counter( 3, 150 ) )
d1 = c1.run()
d2 = c2.run()
d = defer.DeferredList( [ d1, d2 ] )
d.addCallback( counters_finished )

reactor.run()

----

What I can't fully imagine is if I can use this technique in all 
possible cases. In case I need to nest calls or algorithms, I'll run 
into the problem of not being able to call any of the asynchronous 
wrappers from the synchronous parts of my library, because those 
wrappers return deferreds which are part of twisted. So I'd end up with 
two versions of my library again.

Jürgen





From jrg718 at gmx.net  Thu Oct 18 12:22:11 2007
From: jrg718 at gmx.net (=?UTF-8?B?SsO8cmdlbiBTdHJhc3M=?=)
Date: Thu, 18 Oct 2007 20:22:11 +0200
Subject: [Twisted-Python] Re: Should I use asynchronous programming in
	my	own modules?
In-Reply-To: <ff86b2$epg$1@ger.gmane.org>
References: <47175482.1090809@gmx.net>	<1192712979.11206.59.camel@localhost.localdomain>	<471772C2.1020107@gmx.net>
	<ff86b2$epg$1@ger.gmane.org>
Message-ID: <4717A453.6020605@gmx.net>

Toby Dickenson wrote:
> [...]
>   
> Set twisted aside for a moment. I propose one good pythonic interface to
> your html creation code may be a generate_html_iter() method, which returns
> an iterator over the documents html fragments. You can implement this using
> the processNextElement approach you suggested, although python generator
> functions may be more convenient.
>
> A thin wrapper around this iterator could use reactor.callLater to schedule
> it, then fire a callback when complete. An equally thin wrapper could use
> PostMessage to calculate the document in the background of a win32 gui. Or
> it could feed a pull producer.  Alternatively it could be run in another
> thread with deferToThread(lambda:''.join(g.generate_html_iter()))
>
> I hope this helps,
>
>   
Some seconds before I read your message I've posted my reply to 
Christopher Armstrong. This message contains some code of mine that 
already uses some sort of wrapper class. Though it doesn't use an 
iterator and maybe isn't as pythonic, it wraps a synchronous interface. 
Not sure if this is similar to the thin wrapper you had in mind?

Thank you very much,
Jürgen




From db3l.net at gmail.com  Thu Oct 18 13:32:21 2007
From: db3l.net at gmail.com (David Bolen)
Date: Thu, 18 Oct 2007 15:32:21 -0400
Subject: [Twisted-Python] Re: Content Encoding : gzip ?
References: <143220.20091.qm@web37314.mail.mud.yahoo.com>
Message-ID: <m2ejfsmd6i.fsf@valheru.db3l.homeip.net>

anurag uniyal <anuraguniyal at yahoo.com> writes:

> Is it possible to send and recieve compressed content using twisted.web?
>
> I have set Accept-encoding to gzip but it doesn't make any difference.
> Will I have to cater for this myself?

Yes, in twisted.web.  In twisted.web2, there's a filter that supports it.

Here's a small wrapper class I wrote recently that I've used to handle
this in twisted.web, with the goal of minimal changes to existing
resource code.  I use it by noticing, in the original request handler,
the ability to handle gzip encodings, and then wrap the original
request in this class (since there's no built-in filtering of the
output stream in twisted.web).

It's worked fine in my tests to date, and in limited production use,
but to be honest it hasn't seen large scale, long term use because my
original use case only yielded ~15% compression (multimedia files) and
using this negates the ability to know the full length in advance,
thus clients can't give projected download times.  (My files are large
enough that compressing twice is high overhead, and it wouldn't play
well with the wrapper approach anyway).

In any event, hopefully it'll be a useful starting point for you.

Here's the wrapper:

          - - - - - - - - - - - - - - - - - - - - - - - - -

import struct
import zlib

class GzipRequest(object):
    """Wrapper for a request that applies a gzip content encoding"""

    def __init__(self, request, compressLevel=6):
        self.request = request
        self.request.setHeader('Content-Encoding', 'gzip')
        # Borrowed from twisted.web2 gzip filter
        self.compress = zlib.compressobj(compressLevel, zlib.DEFLATED,
                                         -zlib.MAX_WBITS, zlib.DEF_MEM_LEVEL,0)

    def __getattr__(self, attr):
        if 'request' in self.__dict__:
            return getattr(self.request, attr)
        else:
            raise AttributeError, attr

    def __setattr__(self, attr, value):
        if 'request' in self.__dict__:
            return setattr(self.request, attr, value)
        else:
            self.__dict__[attr] = value

    def write(self, data):
        if not self.request.startedWriting:
            self.crc = zlib.crc32('')
            self.size = self.csize = 0
            # XXX: Zap any length for now since we don't know final size
            if 'content-length' in self.request.headers:
                del self.request.headers['content-length']
            # Borrow header information from twisted.web2 gzip filter
            self.request.write('\037\213\010\000' '\0\0\0\0' '\002\377')

        self.crc = zlib.crc32(data, self.crc)
        self.size += len(data)
        cdata = self.compress.compress(data)
        self.csize += len(cdata)
        if cdata:
            self.request.write(cdata)
        elif self.request.producer:
            # Simulate another pull even though it hasn't really made it
            # out to the consumer yet.
            self.request.producer.resumeProducing()

    def finish(self):
        remain = self.compress.flush()
        self.csize += len(remain)
        if remain:
            self.request.write(remain)
        self.request.write(struct.pack('<LL',
                                       self.crc & 0xFFFFFFFFL,
                                       self.size & 0xFFFFFFFFL))
        self.request.finish()

          - - - - - - - - - - - - - - - - - - - - - - - - -

and here's a sample of using it.  This code is from one of my Resource
objects - if I were to use it more generally in my site I'd extract that
into a mix-in class of some sort - currently there was only one specific
resource (the multimedia files) I wanted to support it for:

    def render_GET(self, request):

        # (... argument validation ...)
        
        accept_encoding = request.getHeader('accept-encoding')
        if accept_encoding:
            encodings = accept_encoding.split(',')
            for encoding in encodings:
                name = encoding.split(';')[0].strip()
                if name == 'gzip':
                    request = GzipRequest(request)
                    break

        # At this point, use 'request' as normal


-- David




From johann.borck at densedata.com  Thu Oct 18 16:29:57 2007
From: johann.borck at densedata.com (Johann Borck)
Date: Fri, 19 Oct 2007 00:29:57 +0200
Subject: [Twisted-Python] Should I use asynchronous programming in my
	own	modules?
In-Reply-To: <4717763B.70903@gmx.net>
References: <20071018133151.8162.1755919631.divmod.quotient.24657@ohm>
	<4717763B.70903@gmx.net>
Message-ID: <4717DE65.200@densedata.com>

Jürgen Strass wrote:
> [..]
>
> So I already asked myself how one would translate the example of a
> factorial function in twisted's core documentation to use the
> reactor's scheduling mechanism instead of running it in a thread. I
> think an example of how to divide it into chunks and how to use the
> reactor would be great.
>
Hi,
ok, as I understand you are *not* talking about "accepting documents
over the network" or similar, but rather about independent, long
running, CPU-bound tasks. While you could split them up into chunks
allowing the reactor to do it's work, there are a number of arguments
against doing so. If you don't need intermediate results, and don't
feed your engine incrementally with more data, the way to go is
neither 'chunking' nor using threads, but rather using
worker-processes, because pythons threads are only well-suited for
IO-bound stuff, that cannot be done asynchronously (e.g. if you have
to use some blocking db-interface because there's no alternative
asynchronous implementation) and function calls in python are
expensive. If you split up the work to do it in the reactor-thread,
and it requires heavy processing, there will be many unnecessary calls
switching between the reactor and your engine. If you instead have a
tight loop (or whatever) in a different process, those calls would be
saved, and on a multi-core or multi-processor system you could use its
additional processing power. So use IPC to communicate with worker(s),
and let them spit out the result as fast as possible, instead of
unnecessarily slowing down both your calculation and the networking
part without the option to parallelize processing.

The decisive aspect is interactivity - if you need it for your
processing 'chunking' it up is the way to go, if not, use another
process. If you don't really need to process events, but still want to
do some kind of streaming the decision is not that easy. If you need
parallel processing anyway you have no choice but to use some kind of
IPC. The safe bet is probably designing your code to be able to be
processed in chunks, and then to run it in a separate process.

I think the main misunderstanding is "[..]to use the reactor's
scheduling mechanism instead of running it in a thread."  Twisteds
reactor is not a superior multi-purpose scheduler (as JP mentioned),
but a domain-specific event handler for networking. While your
use-case might (that's my guess) profit from choosing 'chunking' over
pythons threading, it still wouldn't from choosing it over the
scheduling of your OS.

hm, did I get you right there?

Johann

> What I tried at first was programming a simple counter this way. It
> would look much similar to the code I presented in reply to Itamar
> Shtull-Trauring's answer. What I'm not sure about is if this is the
> correct way to go for.
>
> Many thanks for all the other points you've answered, it made a lot
> of things much clearer to me.
>
> Jürgen
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>





From bernat at luffy.cx  Thu Oct 18 23:14:55 2007
From: bernat at luffy.cx (Vincent Bernat)
Date: Fri, 19 Oct 2007 07:14:55 +0200
Subject: [Twisted-Python] Swapping a set of deferreds to diskOrganization:
	One Piece
Message-ID: <m3ejfr1y9c.fsf@neo.luffy.cx>

Hi !

I have  a function which returns a  deferred but will take  many time to
really  process an  item.  This  function  will be  feed with  a lot  of
items. For example,  the function could be called  1000 times per second
and will take  30 minutes to really process each  item. However, I don't
know the delay. The function could also process the items in real time.

When  the function  takes 30  minutes to  really process  the  item, the
reactor   will  keep   a  lot   of  deferreds   and  huge   portions  of
memory.  Therefore, I  would  like to  store  myself those  items (in  a
database for example)  and wait the function to be  ready to process all
the items (because the function knows when it will be ready).

I could store  the items directly in the database  and asks the function
an unique deferred  whose callback will be handled  when the function is
ready to process  my items. But since, the function  could be a function
that process  items in real  time (and more  faster than a  database), I
would like to use this "fallback" method only if the reactor has already
a  lot of deferred  for this  function. Ideally,  in this  case, current
deferred should be converted to database.

In short, I  would like to be able to  store/flush deferreds in database
when I have a  lot of them and keep them in memory if  I have only a few
of them.

For example,  a naive implementation  could be to implement  subclass of
Deferred and each Deferred instance can store itself to disk if a lot of
instances of  this subclass already exists.  This is not  exactly what I
want since I need a mechanism that will also flush all instances to disk
instead of  keeping them  in memory.  So an instance  should be  able to
replace a lot  of instances and recreate them  when the function becomes
ready.

Does such  a thing  already exists?  If it helps,  I can  guarantee that
function will process items in FIFO order.

Thanks.
-- 
I WILL NOT AIM FOR THE HEAD
I WILL NOT AIM FOR THE HEAD
I WILL NOT AIM FOR THE HEAD
-+- Bart Simpson on chalkboard in episode 8F13



From anuraguniyal at yahoo.com  Thu Oct 18 23:40:04 2007
From: anuraguniyal at yahoo.com (anurag uniyal)
Date: Thu, 18 Oct 2007 22:40:04 -0700 (PDT)
Subject: [Twisted-Python] Re: Content Encoding : gzip ?
Message-ID: <403326.95639.qm@web37314.mail.mud.yahoo.com>

Thanks.

So it seems I have to write my own code, there in nothing like I can set some flag.

So if that is the case shouldn't I just be gzipping and unzipping data write and read to request object.

rgds
anurag


----- Original Message ----
From: David Bolen <db3l.net at gmail.com>
To: twisted-python at twistedmatrix.com
Sent: Friday, October 19, 2007 1:02:21 AM
Subject: [Twisted-Python] Re: Content Encoding : gzip ?


anurag uniyal <anuraguniyal at yahoo.com> writes:

> Is it possible to send and recieve compressed content using twisted.web?
>
> I have set Accept-encoding to gzip but it doesn't make any difference.
> Will I have to cater for this myself?

Yes, in twisted.web.  In twisted.web2, there's a filter that supports it.

Here's a small wrapper class I wrote recently that I've used to handle
this in twisted.web, with the goal of minimal changes to existing
resource code.  I use it by noticing, in the original request handler,
the ability to handle gzip encodings, and then wrap the original
request in this class (since there's no built-in filtering of the
output stream in twisted.web).

It's worked fine in my tests to date, and in limited production use,
but to be honest it hasn't seen large scale, long term use because my
original use case only yielded ~15% compression (multimedia files) and
using this negates the ability to know the full length in advance,
thus clients can't give projected download times.  (My files are large
enough that compressing twice is high overhead, and it wouldn't play
well with the wrapper approach anyway).

In any event, hopefully it'll be a useful starting point for you.

Here's the wrapper:

          - - - - - - - - - - - - - - - - - - - - - - - - -

import struct
import zlib

class GzipRequest(object):
    """Wrapper for a request that applies a gzip content encoding"""

    def __init__(self, request, compressLevel=6):
        self.request = request
        self.request.setHeader('Content-Encoding', 'gzip')
        # Borrowed from twisted.web2 gzip filter
        self.compress = zlib.compressobj(compressLevel, zlib.DEFLATED,
                                         -zlib.MAX_WBITS, zlib.DEF_MEM_LEVEL,0)

    def __getattr__(self, attr):
        if 'request' in self.__dict__:
            return getattr(self.request, attr)
        else:
            raise AttributeError, attr

    def __setattr__(self, attr, value):
        if 'request' in self.__dict__:
            return setattr(self.request, attr, value)
        else:
            self.__dict__[attr] = value

    def write(self, data):
        if not self.request.startedWriting:
            self.crc = zlib.crc32('')
            self.size = self.csize = 0
            # XXX: Zap any length for now since we don't know final size
            if 'content-length' in self.request.headers:
                del self.request.headers['content-length']
            # Borrow header information from twisted.web2 gzip filter
            self.request.write('\037\213\010\000' '\0\0\0\0' '\002\377')

        self.crc = zlib.crc32(data, self.crc)
        self.size += len(data)
        cdata = self.compress.compress(data)
        self.csize += len(cdata)
        if cdata:
            self.request.write(cdata)
        elif self.request.producer:
            # Simulate another pull even though it hasn't really made it
            # out to the consumer yet.
            self.request.producer.resumeProducing()

    def finish(self):
        remain = self.compress.flush()
        self.csize += len(remain)
        if remain:
            self.request.write(remain)
        self.request.write(struct.pack('<LL',
                                       self.crc & 0xFFFFFFFFL,
                                       self.size & 0xFFFFFFFFL))
        self.request.finish()

          - - - - - - - - - - - - - - - - - - - - - - - - -

and here's a sample of using it.  This code is from one of my Resource
objects - if I were to use it more generally in my site I'd extract that
into a mix-in class of some sort - currently there was only one specific
resource (the multimedia files) I wanted to support it for:

    def render_GET(self, request):

        # (... argument validation ...)
        
        accept_encoding = request.getHeader('accept-encoding')
        if accept_encoding:
            encodings = accept_encoding.split(',')
            for encoding in encodings:
                name = encoding.split(';')[0].strip()
                if name == 'gzip':
                    request = GzipRequest(request)
                    break

        # At this point, use 'request' as normal


-- David


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20071018/0b7a197b/attachment.html>

From jrg718 at gmx.net  Fri Oct 19 02:32:59 2007
From: jrg718 at gmx.net (=?UTF-8?B?SsO8cmdlbiBTdHJhc3M=?=)
Date: Fri, 19 Oct 2007 10:32:59 +0200
Subject: [Twisted-Python] Should I use asynchronous programming in my
	own modules?
In-Reply-To: <4717DE65.200@densedata.com>
References: <20071018133151.8162.1755919631.divmod.quotient.24657@ohm>	<4717763B.70903@gmx.net>
	<4717DE65.200@densedata.com>
Message-ID: <47186BBB.1080302@gmx.net>

Johann Borck schrieb:
> [...]
> I think the main misunderstanding is "[..]to use the reactor's
> scheduling mechanism instead of running it in a thread."  Twisteds
> reactor is not a superior multi-purpose scheduler (as JP mentioned),
> but a domain-specific event handler for networking. While your
> use-case might (that's my guess) profit from choosing 'chunking' over
> pythons threading, it still wouldn't from choosing it over the
> scheduling of your OS.
>
> hm, did I get you right there?
>
>   
Oh yes, you're right. The whole time I thought of the reactor as a 
multi-purpose scheduler and didn't get JP's answer right. The 
misunderstanding in part results from the core documentation. In chapter 
1.3, it is said: "This document will give you a high level overview of 
concurrent programming (interleaving several tasks) and of Twisted's 
concurrency model: non-blocking code or asynchronous code." Then, two 
examples follow: (1) CPU bound tasks and (2) tasks that wait for data. 
Because I thought the introduction applied to both type of examples, I 
also assumed that Twisted's concurrency model would apply for both types 
of tasks. Of course, I already wondered about not being able to find any 
examples for (1), while the whole rest of the docs deals with (2). ;-)

Moreover, I once read Douglas Schmidt's book "Pattern Oriented Software 
Architecture (2)", which describes several patterns - including the 
reactor pattern - for middleware-oriented applications. The book led to 
some confusion on mine about when to use which pattern and what 
concurrency mechanism would be best for a particular situation.

The - maybe wrong - conclusion I've drawn from that book is that context 
switching overhead (be it threads or processes) isn't only bad for I/O 
bound tasks, but also for most other concurrent tasks. As you said,  
function calls in python are expensive, nevertheless I thought they were 
less expensive than the overhead caused by context switching between 
threads and processes, at least on a single processor system. Or have I 
made a mistake here? Moreover, couldn't the creation of whole new 
processes be even more expensive? I mean, with "long" running algorithms 
I really meant tasks that could take some minutes. Processes would be 
very fine here. But what about - for example - CPU bound tasks that only 
take some hundred milliseconds, but nevertheless would block the 
reactor? Would you use processes in this case, too? Maybe prespawned 
processes? Or should I use rather threads in such a case?

Many thanks for your enlighting reply,
Jürgen




From db3l.net at gmail.com  Fri Oct 19 13:00:18 2007
From: db3l.net at gmail.com (David Bolen)
Date: Fri, 19 Oct 2007 15:00:18 -0400
Subject: [Twisted-Python] Re: Content Encoding : gzip ?
References: <403326.95639.qm@web37314.mail.mud.yahoo.com>
Message-ID: <m2abqflykd.fsf@valheru.db3l.homeip.net>

anurag uniyal <anuraguniyal at yahoo.com> writes:

> Thanks.
>
> So it seems I have to write my own code, there in nothing like I can set some flag.

Not in twisted.web, no.

> So if that is the case shouldn't I just be gzipping and unzipping data write and read to request object.

Right - after all, that's really all my wrapper does (for the
output/write case).  If your application structure lends itself to
processing the encoding more inline with your normal processing,
that's perfectly acceptable too.

You'll still end up having to implement two paths (one for gzip and
one for not) to support clients who don't accept the encoding, so
you'll still probably find it smarter to extract out the compression
for re-use.

In my case, I wanted to support naive, existing Resource
implementations, making the gzip encoding operation a separable
activity to the response data generation, so I went with the wrapper
approach.

-- David




From bmccann at andmore.com  Fri Oct 19 14:13:20 2007
From: bmccann at andmore.com (McCann, Brian)
Date: Fri, 19 Oct 2007 16:13:20 -0400
Subject: [Twisted-Python] Need some help with my first Twisted program
Message-ID: <A272EB3E7DECD641A6A8854D6137872501598599@diopside.andmore.com>

I'm looking for what is probably an simple solution I can't figure out
on my own.  I'm writing an SSH server based on the example on the web
(using conch).  I'm trying to figure out how to detect when the client
exists (for example, when I just close out PuTTY), but I can't get this
to work right.  Looking through the API docs I found "connectionLost()",
which I put in my protocol class (EchoProtocol in the example), but it's
never getting called.

Can someone please tell me what I'm doing wrong?

Thanks,
--Brian



From exarkun at divmod.com  Fri Oct 19 14:29:01 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 19 Oct 2007 16:29:01 -0400
Subject: [Twisted-Python] Need some help with my first Twisted program
In-Reply-To: <A272EB3E7DECD641A6A8854D6137872501598599@diopside.andmore.com>
Message-ID: <20071019202901.8162.884577123.divmod.quotient.25278@ohm>

On Fri, 19 Oct 2007 16:13:20 -0400, "McCann, Brian" <bmccann at andmore.com> wrote:
>I'm looking for what is probably an simple solution I can't figure out
>on my own.  I'm writing an SSH server based on the example on the web
>(using conch).  I'm trying to figure out how to detect when the client
>exists (for example, when I just close out PuTTY), but I can't get this
>to work right.  Looking through the API docs I found "connectionLost()",
>which I put in my protocol class (EchoProtocol in the example), but it's
>never getting called.
>
>Can someone please tell me what I'm doing wrong?

You seem to be on the right track.  However, you haven't supplied enough
details for anyone to be sure why it isn't behaving as you expect.  If you
can post a minimal example of a program which you think should be working
(ie, giving you connection lost notification) but isn't, then someone can
probably point you to a solution.

Jean-Paul



From bmccann at andmore.com  Fri Oct 19 14:53:00 2007
From: bmccann at andmore.com (McCann, Brian)
Date: Fri, 19 Oct 2007 16:53:00 -0400
Subject: [Twisted-Python] Need some help with my first Twisted program
Message-ID: <A272EB3E7DECD641A6A8854D613787250159859C@diopside.andmore.com>

 

> -----Original Message-----
> From: twisted-python-bounces at twistedmatrix.com 
> [mailto:twisted-python-bounces at twistedmatrix.com] On Behalf 
> Of Jean-Paul Calderone
> Sent: Friday, October 19, 2007 4:29 PM
> To: Twisted general discussion
> Subject: Re: [Twisted-Python] Need some help with my first 
> Twisted program
> 
> On Fri, 19 Oct 2007 16:13:20 -0400, "McCann, Brian" 
> <bmccann at andmore.com> wrote:
> >I'm looking for what is probably an simple solution I can't 
> figure out
> >on my own.  I'm writing an SSH server based on the example on the web
> >(using conch).  I'm trying to figure out how to detect when 
> the client
> >exists (for example, when I just close out PuTTY), but I 
> can't get this
> >to work right.  Looking through the API docs I found 
> "connectionLost()",
> >which I put in my protocol class (EchoProtocol in the 
> example), but it's
> >never getting called.
> >
> >Can someone please tell me what I'm doing wrong?
> 
> You seem to be on the right track.  However, you haven't 
> supplied enough
> details for anyone to be sure why it isn't behaving as you 
> expect.  If you
> can post a minimal example of a program which you think 
> should be working
> (ie, giving you connection lost notification) but isn't, then 
> someone can
> probably point you to a solution.
> 
> Jean-Paul
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 

Sorry about that.  Here is most of what is involved.  (Code below)  I
would think that when I close my PuTTY window, the connectionLost
function in the EchoProtocol would be called...but clearly I'm missing
some crucial step.

--Brian

from twisted.cred import portal, checkers
from twisted.conch import error, avatar
from twisted.conch.checkers import SSHPublicKeyDatabase
from twisted.conch.ssh import factory, userauth, connection, keys,
session
from twisted.internet import reactor, protocol, defer
from twisted.python import log
from zope.interface import implements
import sys
import socket
import threading

log.startLogging(sys.stderr)

"""Example of running another protocol over an SSH channel.
log in with username "user" and password "password".
"""
class defaultdict(dict):
    def __init__(self, default=None):
        dict.__init__(self)
        self.default = default
    def __getitem__(self, key):
        try:
            return dict.__getitem__(self, key)
        except KeyError:
            return self.default


class ExampleAvatar(avatar.ConchUser):

    def __init__(self, username):
        avatar.ConchUser.__init__(self)
        self.username = username
        self.channelLookup.update({'session':session.SSHSession})

class ExampleRealm:
    implements(portal.IRealm)

    def requestAvatar(self, avatarId, mind, *interfaces):
        return interfaces[0], ExampleAvatar(avatarId), lambda: None

class EchoProtocol(protocol.Protocol):
    """this is our example protocol that we will run over SSH
    """
    def connectionMade(self):
        self.transport.write("Connected!\r\n")
        self.commandBuffer = ""

    def connectionLost(self,reason):
        print "lost:%s" %reason
        self.serialServerSocket.close()
        self.alive = False
        self.serialSocketReadThread.join()
                
        
publicKey = 'ssh-rsa
AAAAB3NzaC1yc2EAAAABIwAAAGEArzJx8OYOnJmzf4tfBEvLi8DVPrJ3/c9k2I/Az64fxjHf
9imyRJbixtQhlH9lfNjUIx+4LmrJH5QNRsFporcHDKOTwTTYLh5KmRpslkYHRivcJSkbh/C+
BR3utDS555mV'

privateKey = """-----BEGIN RSA PRIVATE KEY-----
MIIByAIBAAJhAK8ycfDmDpyZs3+LXwRLy4vA1T6yd/3PZNiPwM+uH8Yx3/YpskSW
4sbUIZR/ZXzY1CMfuC5qyR+UDUbBaaK3Bwyjk8E02C4eSpkabJZGB0Yr3CUpG4fw
vgUd7rQ0ueeZlQIBIwJgbh+1VZfr7WftK5lu7MHtqE1S1vPWZQYE3+VUn8yJADyb
Z4fsZaCrzW9lkIqXkE3GIY+ojdhZhkO1gbG0118sIgphwSWKRxK0mvh6ERxKqIt1
xJEJO74EykXZV4oNJ8sjAjEA3J9r2ZghVhGN6V8DnQrTk24Td0E8hU8AcP0FVP+8
PQm/g/aXf2QQkQT+omdHVEJrAjEAy0pL0EBH6EVS98evDCBtQw22OZT52qXlAwZ2
gyTriKFVoqjeEjt3SZKKqXHSApP/AjBLpF99zcJJZRq2abgYlf9lv1chkrWqDHUu
DZttmYJeEfiFBBavVYIF1dOlZT0G8jMCMBc7sOSZodFnAiryP+Qg9otSBjJ3bQML
pSTqy7c3a2AScC/YyOwkDaICHnnD3XyjMwIxALRzl0tQEKMXs6hH8ToUdlLROCrP
EhQ0wahUTCk1gKA4uPD6TMTChavbh4K63OvbKg==
-----END RSA PRIVATE KEY-----"""


class InMemoryPublicKeyChecker(SSHPublicKeyDatabase):

    def checkKey(self, credentials):
        return credentials.username == 'user' and \
            keys.getPublicKeyString(data=publicKey) == credentials.blob

class ExampleSession:
    
    def __init__(self, avatar):
        """
        We don't use it, but the adapter is passed the avatar as its
first
        argument.
        """

    def getPty(self, term, windowSize, attrs):
        pass
    
    def execCommand(self, proto, cmd):
        raise Exception("no executing commands")

    def openShell(self, trans):
        ep = EchoProtocol()
        ep.makeConnection(trans)
        trans.makeConnection(session.wrapProtocol(ep))

    def eofReceived(self):
        pass

    def closed(self):
        pass

from twisted.python import components
components.registerAdapter(ExampleSession, ExampleAvatar,
session.ISession)

class ExampleFactory(factory.SSHFactory):
    publicKeys = {
        'ssh-rsa': keys.getPublicKeyString(data=publicKey)
    }
    privateKeys = {
        'ssh-rsa': keys.getPrivateKeyObject(data=privateKey)
    }
    services = {
        'ssh-userauth': userauth.SSHUserAuthServer,
        'ssh-connection': connection.SSHConnection
    }
    

portal = portal.Portal(ExampleRealm())
passwdDB = checkers.InMemoryUsernamePasswordDatabaseDontUse()
passwdDB.addUser('user', 'password')
portal.registerChecker(passwdDB)
portal.registerChecker(InMemoryPublicKeyChecker())
ExampleFactory.portal = portal


if __name__ == '__main__':
    reactor.listenTCP(5022, ExampleFactory())
    reactor.run()



From exarkun at divmod.com  Fri Oct 19 15:07:26 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 19 Oct 2007 17:07:26 -0400
Subject: [Twisted-Python] Need some help with my first Twisted program
In-Reply-To: <A272EB3E7DECD641A6A8854D613787250159859C@diopside.andmore.com>
Message-ID: <20071019210726.8162.695165362.divmod.quotient.25302@ohm>

On Fri, 19 Oct 2007 16:53:00 -0400, "McCann, Brian" <bmccann at andmore.com> wrote:
>
> [snip]
>
>    def openShell(self, trans):
>        ep = EchoProtocol()
>        ep.makeConnection(trans)
>        trans.makeConnection(session.wrapProtocol(ep))
>
>    def eofReceived(self):
>        pass
>
>    def closed(self):
>        pass
>

Here, you implemented connection set up, invoking makeConnection on
the protocol you instantiated.  However, you didn't do anything similar
for connectionLost.  You may want to keep a list of the protocol
instances openShell creates and give them disconnection notification
in closed (which is being called in this example).

Jean-Paul



From exarkun at twistedmatrix.com  Sat Oct 20 22:05:03 2007
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 21 Oct 2007 04:05:03 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1192939503.37.407067601@twistedmatrix.com

Bug summary
______________________
Summary for 2007-10-14 through 2007-10-21
Bugs opened: 4    Bugs closed: 1  Total open bugs: 1043 (+3)

|== Type Changes   |== Priority Changes   |== Component Changes   
|Defect:       +2  |Highest:  -1          |Core:   +3             
|Enhancement:  +1  |Normal:   +3          |Names:  +1             
                   |Lowest:   +1          |Web2:   -1             


New / Reopened Bugs
______________________
                    ===== Normal =====
[#2850] getHostByName Error when DNS Server return Name Server (opened by wangminghua)
    defect          names      http://twistedmatrix.com/trac/ticket/2850

[#2851] No hooks in NetstringReceiver to catch parse errors. (opened by jml)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2851

[#2853] findFailure result is used exclusively, ignoring new traceback (opened by Peaker)
    defect          core       http://twistedmatrix.com/trac/ticket/2853

                    ===== Lowest =====
[#2852] spawnProcess doc glitch (opened by alanfranzoni)
    defect          core       http://twistedmatrix.com/trac/ticket/2852



Closed Bugs
______________________
                    ===== Highest =====
[#2304] t.web2.client.http.HTTPClientChannelRequest.connectionLost does nothing (opened by ghazel, closed by therve, fixed)
    defect          web2       http://twistedmatrix.com/trac/ticket/2304



Ticket Lifetime Stats
______________________
Oldest open ticket - [#38] Should be a way to create documentation aliases (since 2003-07-12 16:08:03).
Newest open ticket - [#2853] findFailure result is used exclusively, ignoring new traceback (since 2007-10-17 22:04:16).

Mean open ticket age: 544 days, 17:31:29.430966.
Median: 446 days, 3:59:09.191273.
Standard deviation: 404 days, 0:42:51.794059.
Interquartile range: 505 days, 3:59:29.

Mean time between ticket creation and ticket resolution: 122 days, 16:37:43.001128.
Median: 14 days, 16:22:15.
Standard deviation is 226 days, 21:33:13.531588.
The interquartile range is 130 days, 2:23:34.

Mean time spent in review: 68 days, 20:15:20.554302.
Median: 4 days, 9:08:37.
Standard deviation: 151 days, 9:40:09.422509.
Interquartile range: 31 days, 18:40:54.

Mean number of times a ticket is reviewed: 1.96567505721.
Median: 1
Standard deviation: 1.61407221677.
Interquartile range: 1.


Contributor Stats
______________________
In the last 4 weeks,
    12 unique ticket reporters
    7 unique ticket reviewers
    2 unique ticket resolvers
In the last 24 weeks,
    69 unique ticket reporters
    16 unique ticket reviewers
    13 unique ticket resolvers
In the last 48 weeks,
    152 unique ticket reporters
    18 unique ticket reviewers
    25 unique ticket resolvers




From brown at esteem.com  Sun Oct 21 18:34:34 2007
From: brown at esteem.com (Tom Brown)
Date: Sun, 21 Oct 2007 17:34:34 -0700
Subject: [Twisted-Python] reading serial port asynchronously
Message-ID: <1193013275.28874.48.camel@brown.esteem.com>

Hi,

I have an application that reads characters off the serial port in a
thread. The problem is, the entire application will hang sometimes. I
believe it is a threading problem, but I can't pinpoint why the
application hangs. So, I'd like to get away from threads and thought
Twisted may help me.

I was told Twisted has the ability to interface with serial ports. I
don't know where to look for the information on how to do this. Any
ideas on where to start looking or pointers on how to accomplish this?

Thanks,
Tom




From exarkun at divmod.com  Sun Oct 21 18:42:32 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 21 Oct 2007 20:42:32 -0400
Subject: [Twisted-Python] reading serial port asynchronously
In-Reply-To: <1193013275.28874.48.camel@brown.esteem.com>
Message-ID: <20071022004232.8162.1420799979.divmod.quotient.26123@ohm>

On Sun, 21 Oct 2007 17:34:34 -0700, Tom Brown <brown at esteem.com> wrote:
>Hi,
>
>I have an application that reads characters off the serial port in a
>thread. The problem is, the entire application will hang sometimes. I
>believe it is a threading problem, but I can't pinpoint why the
>application hangs. So, I'd like to get away from threads and thought
>Twisted may help me.
>
>I was told Twisted has the ability to interface with serial ports. I
>don't know where to look for the information on how to do this. Any
>ideas on where to start looking or pointers on how to accomplish this?
>

Take a look at the mouseman example:

http://twistedmatrix.com/trac/browser/trunk/doc/core/examples/mouse.py

>Thanks,
>Tom
>
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From brown at esteem.com  Mon Oct 22 16:25:48 2007
From: brown at esteem.com (Tom Brown)
Date: Mon, 22 Oct 2007 15:25:48 -0700
Subject: [Twisted-Python] reading serial port asynchronously
In-Reply-To: <20071022004232.8162.1420799979.divmod.quotient.26123@ohm>
References: <20071022004232.8162.1420799979.divmod.quotient.26123@ohm>
Message-ID: <1193091948.28874.76.camel@brown.esteem.com>

On Sun, 2007-10-21 at 20:42 -0400, Jean-Paul Calderone wrote:
> Take a look at the mouseman example:
> 
> http://twistedmatrix.com/trac/browser/trunk/doc/core/examples/mouse.py

That got me off to the right start. Thank you!
Tom





From phil at bubblehouse.org  Mon Oct 22 21:42:42 2007
From: phil at bubblehouse.org (Phil Christensen)
Date: Mon, 22 Oct 2007 23:42:42 -0400
Subject: [Twisted-Python] CFReactor redux
Message-ID: <7CC82F01-AF6A-4A72-9716-AB3BB4F28A7A@bubblehouse.org>

It's been awhile since this was brought up on the mailing list, but  
I'd like to see if anyone has any real interest in using Twisted with  
Cocoa on Mac OS X.

It was suggested to me that one thing that was needed was a reactor  
based on ThreadedSelectReactor that would integrate with the Cocoa  
runtime. I've posted my results here:

	http://twistedmatrix.com/trac/ticket/1833

This class is extremely trivial, but it makes working with PyObjC/ 
Twisted apps a bit more straightforward.

However, there are significant issues with the entire TSR approach.  
The primary one is that it's impossible to do any Trial testing,  
because as far as I can tell, it is impossible to make the  
CFReactor's run() method return without terminating the entire process.

I have a couple questions for the group, namely:

1.) Does anyone with a better grasp of Cocoa/PyObjC development have  
any ideas on how a suitable reactor might be implemented?

2.) Is there any way to run the unit tests without restarting the  
reactor between each test? I'm sure this would cause many tests to  
fail, but at least we'd be able to see if there was any other major  
issues. I'm not suggesting any changes be made to trial. I'm just  
looking for any possible way to run the tests manually.

3.) Will anyone use this? I know the core devs are generally  
uninterested in supporting a Cocoa reactor, but I'm glad to maintain  
this if it would be used.

-phil



From roland.hedberg at adm.umu.se  Tue Oct 23 23:57:14 2007
From: roland.hedberg at adm.umu.se (Roland Hedberg)
Date: Wed, 24 Oct 2007 07:57:14 +0200
Subject: [Twisted-Python] Twistd problem with redirection
Message-ID: <471EDEBA.5020600@adm.umu.se>

Hi!

I've encountered a strange problem which I'd like to have some help with.

I'm building some software using Twisted and have encountered the
following problem.

I use twistd 2.5.0 and starts the server using:

twistd pyom --logfile=x.log ...

Now, the tap file that is run by twistd loads and initiates modules
dependent on the configuration. And these modules might load other modules.

So, what happens is that, depending (looks like it) on how complex the
setup is, the redirect of stdout output for print to the logfile is not
universally done.

Consistent but depending on the configuration, the output from print for
one of modules continues to go to stdout instead of to the logfile.

Anyone got a clue as to what is happening and what I can do about it ?

-- Roland




From yoann.aubineau at gmail.com  Wed Oct 24 02:49:27 2007
From: yoann.aubineau at gmail.com (Yoann Aubineau)
Date: Wed, 24 Oct 2007 10:49:27 +0200
Subject: [Twisted-Python] CFReactor redux
In-Reply-To: <7CC82F01-AF6A-4A72-9716-AB3BB4F28A7A@bubblehouse.org>
References: <7CC82F01-AF6A-4A72-9716-AB3BB4F28A7A@bubblehouse.org>
Message-ID: <8b93c05a0710240149k5a1ed459rd0718f49368eb51d@mail.gmail.com>

2007/10/23, Phil Christensen <phil at bubblehouse.org>:
> It's been awhile since this was brought up on the mailing list, but
> I'd like to see if anyone has any real interest in using Twisted with
> Cocoa on Mac OS X.

(snip)

> 3.) Will anyone use this? I know the core devs are generally
> uninterested in supporting a Cocoa reactor, but I'm glad to maintain
> this if it would be used.

+1
AFAIAC, I don't actually need a Cocoa reactor *right now*, but I know
for sure that if it exists I might use it in the next few months. And
it's probably true for a lot of other Twisted users : they won't
use/need a Cocoa reactor until it exists. You know, as often happens,
offer creates demand. So, if you're willing to maintain such a peace
of software, please do ! :)



From ben at artins.org  Wed Oct 24 03:26:16 2007
From: ben at artins.org (Ben Artin)
Date: Wed, 24 Oct 2007 05:26:16 -0400
Subject: [Twisted-Python] CFReactor redux
In-Reply-To: <7CC82F01-AF6A-4A72-9716-AB3BB4F28A7A@bubblehouse.org>
References: <7CC82F01-AF6A-4A72-9716-AB3BB4F28A7A@bubblehouse.org>
Message-ID: <03CB022E-6DEF-466F-85A0-F13949CA2F83@artins.org>

> It was suggested to me that one thing that was needed was a reactor  
> based on ThreadedSelectReactor that would integrate with the Cocoa  
> runtime.

Didn't Bob Ippolito already do this? <http://bob.pythonmac.org/ 
archives/2005/04/17/twisted-and-foreign-event-loops/>

--

<http://artins.org/ben>

"Clue meter is reading zero." -- Alice





From p.mayers at imperial.ac.uk  Wed Oct 24 03:43:44 2007
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 24 Oct 2007 10:43:44 +0100
Subject: [Twisted-Python] Twistd problem with redirection
In-Reply-To: <471EDEBA.5020600@adm.umu.se>
References: <471EDEBA.5020600@adm.umu.se>
Message-ID: <1193219024.4310.12.camel@localhost.localdomain>

On Wed, 2007-10-24 at 07:57 +0200, Roland Hedberg wrote:
> Hi!
> 
> I've encountered a strange problem which I'd like to have some help with.
> 
> I'm building some software using Twisted and have encountered the
> following problem.
> 
> I use twistd 2.5.0 and starts the server using:
> 
> twistd pyom --logfile=x.log ...
> 
> Now, the tap file that is run by twistd loads and initiates modules
> dependent on the configuration. And these modules might load other modules.
> 
> So, what happens is that, depending (looks like it) on how complex the
> setup is, the redirect of stdout output for print to the logfile is not
> universally done.

I've never seen that.

> 
> Consistent but depending on the configuration, the output from print for
> one of modules continues to go to stdout instead of to the logfile.

Can you produce a minimal example showing the effect?

> 
> Anyone got a clue as to what is happening and what I can do about it ?


sed -i -e 's/print \(.*\)/log.msg(\1)/g' *.py

i.e. don't use "print" for logging.

> 
> -- Roland
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From phil at bubblehouse.org  Wed Oct 24 06:03:54 2007
From: phil at bubblehouse.org (Phil Christensen)
Date: Wed, 24 Oct 2007 08:03:54 -0400
Subject: [Twisted-Python] CFReactor redux
In-Reply-To: <03CB022E-6DEF-466F-85A0-F13949CA2F83@artins.org>
References: <7CC82F01-AF6A-4A72-9716-AB3BB4F28A7A@bubblehouse.org>
	<03CB022E-6DEF-466F-85A0-F13949CA2F83@artins.org>
Message-ID: <4F26B93A-D326-4AE6-B818-A5AB7A3850B3@bubblehouse.org>

On Oct 24, 2007, at 5:26 AM, Ben Artin wrote:

>> It was suggested to me that one thing that was needed was a  
>> reactor based on ThreadedSelectReactor that would integrate with  
>> the Cocoa runtime.
>
> Didn't Bob Ippolito already do this? <http://bob.pythonmac.org/ 
> archives/2005/04/17/twisted-and-foreign-event-loops/>

Yeah, essentially, but it's complicated.

That post refers to TSR, which is almost, but not quite, a complete  
reactor. That's why it's been moved to _threadedselectreactor.py.

As I understand it, TSR is intended to be the foundation for any  
reactor that needs to integrate with a foreign event loop. The  
wxreactor is a TSR subclass that wraps up the wx-specific details  
into a convenience class.

cfreactor2 was meant to be like this, but it suffers from the same  
issue wxreactor does, in that the reactor cannot be stopped and  
restarted. Technically, reactors aren't supposed to support this, but  
Trial requires the functionality for testing.

-phil



From roland.hedberg at adm.umu.se  Wed Oct 24 07:26:17 2007
From: roland.hedberg at adm.umu.se (Roland Hedberg)
Date: Wed, 24 Oct 2007 15:26:17 +0200
Subject: [Twisted-Python] Twistd problem with redirection
In-Reply-To: <1193219024.4310.12.camel@localhost.localdomain>
References: <471EDEBA.5020600@adm.umu.se>
	<1193219024.4310.12.camel@localhost.localdomain>
Message-ID: <471F47F9.4050802@adm.umu.se>

Phil Mayers wrote:
> On Wed, 2007-10-24 at 07:57 +0200, Roland Hedberg wrote:
>> Consistent but depending on the configuration, the output from print for
>> one of modules continues to go to stdout instead of to the logfile.
> 
> Can you produce a minimal example showing the effect?

I can try, but ...

>> Anyone got a clue as to what is happening and what I can do about it ?
> 
> sed -i -e 's/print \(.*\)/log.msg(\1)/g' *.py
> 
> i.e. don't use "print" for logging.

Doing this modification the problem went away.

Thanks Phil!

-- Roland



From vijay.the.schemer at gmail.com  Fri Oct 26 02:44:55 2007
From: vijay.the.schemer at gmail.com (Vijay Mathew)
Date: Fri, 26 Oct 2007 14:14:55 +0530
Subject: [Twisted-Python] Using reactor to connect to multiple servers
Message-ID: <9c57dec20710260144h2ffe21c5i66137e9be534aacf@mail.gmail.com>

Hi all,

I am in the process of writing a http client using twisted.
I want it to connect to multiple http servers and download more than one
page asynchronously, without using threads.
How can I use the reactor object to connect to multiple servers and download
data like this?

thanks,

--Vijay
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20071026/66af6bc2/attachment.html>

From andrew-twisted at puzzling.org  Fri Oct 26 03:06:23 2007
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 26 Oct 2007 19:06:23 +1000
Subject: [Twisted-Python] Using reactor to connect to multiple servers
In-Reply-To: <9c57dec20710260144h2ffe21c5i66137e9be534aacf@mail.gmail.com>
References: <9c57dec20710260144h2ffe21c5i66137e9be534aacf@mail.gmail.com>
Message-ID: <20071026090623.GA16260@steerpike.home.puzzling.org>

Vijay Mathew wrote:
> Hi all,
> 
> I am in the process of writing a http client using twisted.
> I want it to connect to multiple http servers and download more than one page
> asynchronously, without using threads.
> How can I use the reactor object to connect to multiple servers and download
> data like this?

Just call getPage (or reactor.connectTCP or whatever) multiple times, without
waiting for the first one to complete.

E.g. here's a toy example:

    from twisted.internet import reactor
    from twisted.web.client import getPage

    def gotPageCallback(page):
        print "got a page!"
    
    getPage('http://example.com/page1').addCallback(gotPageCallback)
    getPage('http://example.com/page2').addCallback(gotPageCallback)

    reactor.run()

The key thing to realise is that Twisted APIs like getPage are asynchronous:
they return immediately, before the operation they perform has completed (or
even begun, sometimes).  So doing things like calling getPage twice in a row
like that means you are getting two pages at the same time.

-Andrew.




From bmccann at andmore.com  Fri Oct 26 09:41:50 2007
From: bmccann at andmore.com (McCann, Brian)
Date: Fri, 26 Oct 2007 11:41:50 -0400
Subject: [Twisted-Python] Need some help with my first Twisted program
Message-ID: <A272EB3E7DECD641A6A8854D613787250159860E@diopside.andmore.com>

> -----Original Message-----
> From: twisted-python-bounces at twistedmatrix.com 
> [mailto:twisted-python-bounces at twistedmatrix.com] On Behalf 
> Of Jean-Paul Calderone
> Sent: Friday, October 19, 2007 5:07 PM
> To: Twisted general discussion
> Subject: RE: [Twisted-Python] Need some help with my first 
> Twisted program
> 
> On Fri, 19 Oct 2007 16:53:00 -0400, "McCann, Brian" 
> <bmccann at andmore.com> wrote:
> >
> > [snip]
> >
> >    def openShell(self, trans):
> >        ep = EchoProtocol()
> >        ep.makeConnection(trans)
> >        trans.makeConnection(session.wrapProtocol(ep))
> >
> >    def eofReceived(self):
> >        pass
> >
> >    def closed(self):
> >        pass
> >
> 
> Here, you implemented connection set up, invoking makeConnection on
> the protocol you instantiated.  However, you didn't do 
> anything similar
> for connectionLost.  You may want to keep a list of the protocol
> instances openShell creates and give them disconnection notification
> in closed (which is being called in this example).
> 
> Jean-Paul
> 

I'm trying various things to do what you suggest, but the Twisted API
docs are hard for me to follow sometimes.

I tried making "eofReceived" and "closed" just print a debug line (after
calling my "connectionLost function didn't appear to do anything), and
neither appeared to fire when I closed the ssh client.  I tried looking
up other examples I could possibly follow on the net, but came up only
with the same examples that are on the Twisted site.  I can't even
figure out where "trans" comes from or what it is :( .

Could you point me in the direction of a better example?  I assumed that
I could find what I needed if I dug hard enough in the API docs, but I
just kept reaching dead ends.

Thanks for all your help!
--Brian



From exarkun at divmod.com  Fri Oct 26 12:05:18 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 26 Oct 2007 14:05:18 -0400
Subject: [Twisted-Python] Need some help with my first Twisted program
In-Reply-To: <A272EB3E7DECD641A6A8854D613787250159860E@diopside.andmore.com>
Message-ID: <20071026180518.8162.1425354008.divmod.quotient.28033@ohm>

On Fri, 26 Oct 2007 11:41:50 -0400, "McCann, Brian" <bmccann at andmore.com> wrote:
>
> [snip]
>
>Could you point me in the direction of a better example?  I assumed that
>I could find what I needed if I dug hard enough in the API docs, but I
>just kept reaching dead ends.

The API docs are nice (in places), but nothing really beats diving into the
source itself.  There are some areas of Twisted which use obscure techniques
to achieve a goal, but for the most part the code isn't too hard to follow
(and this is improving all the time).  If I had the code in front of me again
I could probably tell you the particular path I traced up from your code into
conch to find a point where it was clear that the "closed" method is what you
want to override, but I don't at the moment - but that's all I did, looked at
the source, figured out what was called by what, step by step until I found
the feature you were interested in.  Now, I've used conch before, and maybe
even this feature of it, but I didn't consciously remember the answer until
I saw it in the code again this time.  Previous experience might have guided
me a bit in the right direction, but not much beyond that.

I might be able to provide some more specific guidance if you're still not
finding what you need, but probably not until sometime next week.

Jean-Paul



From bmccann at andmore.com  Fri Oct 26 15:34:17 2007
From: bmccann at andmore.com (McCann, Brian)
Date: Fri, 26 Oct 2007 17:34:17 -0400
Subject: [Twisted-Python] Need some help with my first Twisted program
Message-ID: <A272EB3E7DECD641A6A8854D613787250159861C@diopside.andmore.com>


> -----Original Message-----
> From: twisted-python-bounces at twistedmatrix.com 
> [mailto:twisted-python-bounces at twistedmatrix.com] On Behalf 
> Of Jean-Paul Calderone
> Sent: Friday, October 26, 2007 2:05 PM
> To: Twisted general discussion
> Subject: RE: [Twisted-Python] Need some help with my first 
> Twisted program
> 
> On Fri, 26 Oct 2007 11:41:50 -0400, "McCann, Brian" 
> <bmccann at andmore.com> wrote:
> >
> > [snip]
> >
> >Could you point me in the direction of a better example?  I 
> assumed that
> >I could find what I needed if I dug hard enough in the API 
> docs, but I
> >just kept reaching dead ends.
> 
> The API docs are nice (in places), but nothing really beats 
> diving into the
> source itself.  There are some areas of Twisted which use 
> obscure techniques
> to achieve a goal, but for the most part the code isn't too 
> hard to follow
> (and this is improving all the time).  If I had the code in 
> front of me again
> I could probably tell you the particular path I traced up 
> from your code into
> conch to find a point where it was clear that the "closed" 
> method is what you
> want to override, but I don't at the moment - but that's all 
> I did, looked at
> the source, figured out what was called by what, step by step 
> until I found
> the feature you were interested in.  Now, I've used conch 
> before, and maybe
> even this feature of it, but I didn't consciously remember 
> the answer until
> I saw it in the code again this time.  Previous experience 
> might have guided
> me a bit in the right direction, but not much beyond that.
> 
> I might be able to provide some more specific guidance if 
> you're still not
> finding what you need, but probably not until sometime next week.
> 
> Jean-Paul
> 

Thanks, I'll start cracking open the source and let you know how I make
out.

--Brian




From brown at esteem.com  Fri Oct 26 16:42:39 2007
From: brown at esteem.com (Tom Brown)
Date: Fri, 26 Oct 2007 15:42:39 -0700
Subject: [Twisted-Python] asyncronous access to serial ports under windows
Message-ID: <1193438559.28874.226.camel@brown.esteem.com>

Hi,

I've been able to create an application in Linux that reads/writes
multiple serial ports asyncronously. The setup code that does this looks
like this:

...
from twisted.internet.qtreactor import install
a = QApplication(argv)
install(a)
from twisted.internet import reactor
from twisted.internet.serialport import SerialPort
...
  ports, badPorts = getGoodPorts()
  if not ports:
    exit(1)
  data = ConfigData(join(sep, 'etc', 'qa.conf'))
  dbInfo = copy(data['qadata'])
  getLogin(dbInfo)
  w = MainWindow(data, dbInfo, ports)
  w.show()
  reactor.addSystemEventTrigger('after', 'shutdown', a.quit)
  a.connect(a, SIGNAL('lastWindowClosed()'), reactor.stop)
  for portObj in w.portObjs:
    SerialPort(portObj.scanner, portObj.port, reactor, baudrate=38400)
    portObj.sendLine()
  reactor.run()

Where the portObj.scanner is an instance of a descendent of Protocol.
Like I said, the above code works under Linux. Then I tried porting this
to Windows. The first problem I came across is that the qtreactor.py
would not work. I had to subclass QTReactor from Win32Reactor. It runs
without errors. However, I am not reading anything off of the serial
port. I can see the lights blink on the port when the portObj.sendLine()
is called, so I believe I am writing to it ok and data is coming back.
The data is just not read by the application. I think it must have
something to do with the SerialPort instance not getting an even that
data is ready. I suspect this is a Windows issue in that Windows is not
signaling an event when data is ready to read on the serial port.

Does anybody have any experience with this? Is there a work around? Am I
doing something wrong?

Thanks,
Tom




From Benjamin.Rutt at gs.com  Fri Oct 26 16:56:10 2007
From: Benjamin.Rutt at gs.com (Rutt, Benjamin)
Date: Fri, 26 Oct 2007 18:56:10 -0400
Subject: [Twisted-Python] IPushProducer - medium volume streaming
Message-ID: <C8853DE689283B47B5D348BC33E06193084229B5@gsmbnmp04es.firmwide.corp.gs.com>

I've got an IPushProducer written with these 3 methods and it works fine
- i.e. resumeProducing() is called, then eventually pauseProducing is
called() when the producer produces data too fast; when the client
disconnects early, the stopProducing method is called, etc..

  def pauseProducing(self):

  def resumeProducing(self):

  def stopProducing(self):

My problem is, the source of the data (a slow non-relational database)
that I send back to the client from within resumeProducing generates
data kind of slowly.  As in, it is quite rare that pauseProducing is
ever called in my tests.  I feel that the data source generates data too
slowly, and have figured out I will block the entire server during the
resumeProducing operation (for example, during the first call to
resumeProducing, I do not generate any data at all for the first 20
seconds during bootstrapping).

At this point, I am thinking about the following ideas of code changes
to prevent blockage of the server:

1) forking off a thread so that I will not block other clients from
talking to the server.  I will not have very many clients using this
producer, so this would not result in any large numbers of threads which
I know can be a problem.  I know how to spawn Python threads and use
socket APIs, but it is not clear to me how I would get at the socket
descriptor from within the twisted framework (I am using a LineReceiver
subclass, which in this case is spawning the IPushProducer).  Are there
any examples of spawning off a thread from a LineReceiver class and
communicating using blocking calls within said thread?

2) returning from resumeProducing after a few seconds of production,
even though I could produce more, so I do not block the server.  I have
tested this, it works, and does let other clients get in, but I still
feel it is suboptimal, since my data source is so slow, it still blocks
the server during each of those few second intervals.

Any recommendations here?  Thank you.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20071026/15c6fead/attachment.html>

From radix at twistedmatrix.com  Fri Oct 26 17:19:02 2007
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 26 Oct 2007 19:19:02 -0400
Subject: [Twisted-Python] IPushProducer - medium volume streaming
In-Reply-To: <C8853DE689283B47B5D348BC33E06193084229B5@gsmbnmp04es.firmwide.corp.gs.com>
References: <C8853DE689283B47B5D348BC33E06193084229B5@gsmbnmp04es.firmwide.corp.gs.com>
Message-ID: <60ed19d40710261619s7314787ay9bbffc297535d047@mail.gmail.com>

On 10/26/07, Rutt, Benjamin <Benjamin.Rutt at gs.com> wrote:
> 1) forking off a thread so that I will not block other clients from talking
> to the server.

If this is a SQL database with which you're using a dbapi module, you
should probably be using twisted.enterprise.adbapi to make access to
that database asynchronous. Under the hood it's using threads to make
the interface asynchronous. Otherwise, if the only programmatic
interface this database of yours has is blocking, then you'll probably
need to use a thread yourself. See
twisted.internet.threads.deferToThread.

-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From brown at esteem.com  Fri Oct 26 21:10:53 2007
From: brown at esteem.com (Tom Brown)
Date: Fri, 26 Oct 2007 20:10:53 -0700
Subject: [Twisted-Python] asyncronous access to serial ports under windows
In-Reply-To: <1193438559.28874.226.camel@brown.esteem.com>
References: <1193438559.28874.226.camel@brown.esteem.com>
Message-ID: <1193454653.28874.234.camel@brown.esteem.com>

On Fri, 2007-10-26 at 15:42 -0700, Tom Brown wrote:
> Hi,
> 
> I've been able to create an application in Linux that reads/writes
> multiple serial ports asyncronously. The setup code that does this looks
> like this:
> 
> ...
> from twisted.internet.qtreactor import install
> a = QApplication(argv)
> install(a)
> from twisted.internet import reactor
> from twisted.internet.serialport import SerialPort
> ...
>   ports, badPorts = getGoodPorts()
>   if not ports:
>     exit(1)
>   data = ConfigData(join(sep, 'etc', 'qa.conf'))
>   dbInfo = copy(data['qadata'])
>   getLogin(dbInfo)
>   w = MainWindow(data, dbInfo, ports)
>   w.show()
>   reactor.addSystemEventTrigger('after', 'shutdown', a.quit)
>   a.connect(a, SIGNAL('lastWindowClosed()'), reactor.stop)
>   for portObj in w.portObjs:
>     SerialPort(portObj.scanner, portObj.port, reactor, baudrate=38400)
>     portObj.sendLine()
>   reactor.run()
> 
> Where the portObj.scanner is an instance of a descendent of Protocol.
> Like I said, the above code works under Linux. Then I tried porting this
> to Windows. The first problem I came across is that the qtreactor.py
> would not work. I had to subclass QTReactor from Win32Reactor. It runs
> without errors. However, I am not reading anything off of the serial
> port. I can see the lights blink on the port when the portObj.sendLine()
> is called, so I believe I am writing to it ok and data is coming back.
> The data is just not read by the application. I think it must have
> something to do with the SerialPort instance not getting an even that
> data is ready. I suspect this is a Windows issue in that Windows is not
> signaling an event when data is ready to read on the serial port.
> 
> Does anybody have any experience with this? Is there a work around? Am I
> doing something wrong?

Well, I found out that it has something to do with the qtreactor. If I
use just a Win32Reactor, it will read/write the serial port just fine. I
played around with writing to the serial port using
scanner.transport.write('\n') and found that
Win32Reactor.doWaitForMultipleEvents() is called when a Win32Reactor is
used. It is not called when a QTReactor(Win32Reactor) is used. The
question is why is this the case?

Thanks,
Tom




From exarkun at twistedmatrix.com  Sat Oct 27 22:05:03 2007
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 28 Oct 2007 04:05:03 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1193544303.58.1052669774@twistedmatrix.com

Bug summary
______________________
Summary for 2007-10-21 through 2007-10-28
Bugs opened: 4    Bugs closed: 10  Total open bugs: 1037 (-6)

|== Type Changes   |== Priority Changes   |== Component Changes   
|Defect:       -3  |Highest:  -2          |Core:   -5             
|Enhancement:  -2  |High:     +1          |Ftp:    +1             
                   |Normal:   -4          |Trial:  +0             
                                          |Web:    -1             


New / Reopened Bugs
______________________
                    ===== Highest =====
[#2855] Add tests for ftp.IFTPShell (opened by therve)
    enhancement     ftp        http://twistedmatrix.com/trac/ticket/2855

[#2856] trial verbose color reporter should colorize final "PASSED" and "FAILED" message (opened by exarkun) (CLOSED, fixed)
    enhancement     trial      http://twistedmatrix.com/trac/ticket/2856

[#2766] test_sslverify uses deprecated function log.flushErrors (opened by therve)
    defect          core       http://twistedmatrix.com/trac/ticket/2766

                    ===== High =====
[#2854] Reactor claims not be running although reactor.run() has been called (opened by htj)
    defect          core       http://twistedmatrix.com/trac/ticket/2854



Closed Bugs
______________________
                    ===== Highest =====
[#2767] test_ident uses deprecated function log.flushErrors (opened by therve, closed by therve, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/2767

[#2685] factor secure random implementation (opened by antoine, closed by therve, fixed)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2685

[#2766] test_sslverify uses deprecated function log.flushErrors (opened by therve, closed by therve, )
    defect          core       http://twistedmatrix.com/trac/ticket/2766

[#1220] Should the coding standard mention PEP8 (opened by hypatia, closed by therve, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1220

[#2856] trial verbose color reporter should colorize final "PASSED" and "FAILED" message (opened by exarkun, closed by therve, fixed)
    enhancement     trial      http://twistedmatrix.com/trac/ticket/2856

[#2643] twisted.python.modules does not account for memory/disk inconsistencies when scanning packages (opened by glyph, closed by therve, fixed)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2643

                    ===== Normal =====
[#1909] [PATCH] add content encoding support to xmlrpc (opened by pythonguy, closed by exarkun, invalid)
    enhancement     web        http://twistedmatrix.com/trac/ticket/1909

[#2642] Circular reference in tcp.BaseClient (opened by mircea, closed by therve, wontfix)
    defect          core       http://twistedmatrix.com/trac/ticket/2642

[#2727] plugin howto refers to "getPlugin" instead of "getPlugins" (opened by exarkun, closed by therve, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/2727

[#2692] before-shutdown triggers are fired multiple times (opened by yaubi, closed by therve, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/2692



Ticket Lifetime Stats
______________________
Oldest open ticket - [#38] Should be a way to create documentation aliases (since 2003-07-12 16:08:03).
Newest open ticket - [#2855] Add tests for ftp.IFTPShell (since 2007-10-23 05:25:55).

Mean open ticket age: 552 days, 22:31:27.885002.
Median: 453 days, 13:26:47.401878.
Standard deviation: 404 days, 14:59:20.224490.
Interquartile range: 504 days, 20:17:18.

Mean time between ticket creation and ticket resolution: 123 days, 5:12:33.030303.
Median: 15 days, 1:19:40.
Standard deviation is 226 days, 23:50:09.969125.
The interquartile range is 131 days, 17:01:58.

Mean time spent in review: 69 days, 7:13:09.122129.
Median: 4 days, 9:08:37.
Standard deviation: 153 days, 1:45:54.575417.
Interquartile range: 31 days, 18:48:10.

Mean number of times a ticket is reviewed: 1.98177676538.
Median: 1
Standard deviation: 1.63103040096.
Interquartile range: 1.


Contributor Stats
______________________
In the last 4 weeks,
    12 unique ticket reporters
    7 unique ticket reviewers
    2 unique ticket resolvers
In the last 24 weeks,
    67 unique ticket reporters
    16 unique ticket reviewers
    13 unique ticket resolvers
In the last 48 weeks,
    151 unique ticket reporters
    18 unique ticket reviewers
    25 unique ticket resolvers




From Benjamin.Rutt at gs.com  Sun Oct 28 07:42:00 2007
From: Benjamin.Rutt at gs.com (Rutt, Benjamin)
Date: Sun, 28 Oct 2007 09:42:00 -0400
Subject: [Twisted-Python] IPushProducer - medium volume streaming
In-Reply-To: <60ed19d40710261619s7314787ay9bbffc297535d047@mail.gmail.com>
References: <C8853DE689283B47B5D348BC33E06193084229B5@gsmbnmp04es.firmwide.corp.gs.com>
	<60ed19d40710261619s7314787ay9bbffc297535d047@mail.gmail.com>
Message-ID: <C8853DE689283B47B5D348BC33E06193084229B9@gsmbnmp04es.firmwide.corp.gs.com>

This isn't a SQL db so I can't use adbapi.

So using deferToThread, inside my thread, when I have a result to write
to the client, I call callFromThread to schedule a write in the reactor
loop.  My question is, how exactly do I use callFromThread to write to
the client from the thread (I use the LineReceiver class)?
(specifically, what context do I pass to the thread func, to pass into
callFromThread call, to make sure it writes back to the right client?)

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of
Christopher Armstrong
Sent: Friday, October 26, 2007 7:19 PM
To: Twisted general discussion
Subject: Re: [Twisted-Python] IPushProducer - medium volume streaming

On 10/26/07, Rutt, Benjamin <Benjamin.Rutt at gs.com> wrote:
> 1) forking off a thread so that I will not block other clients from
talking
> to the server.

If this is a SQL database with which you're using a dbapi module, you
should probably be using twisted.enterprise.adbapi to make access to
that database asynchronous. Under the hood it's using threads to make
the interface asynchronous. Otherwise, if the only programmatic
interface this database of yours has is blocking, then you'll probably
need to use a thread yourself. See
twisted.internet.threads.deferToThread.

-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From radix at twistedmatrix.com  Sun Oct 28 08:50:38 2007
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 28 Oct 2007 10:50:38 -0400
Subject: [Twisted-Python] IPushProducer - medium volume streaming
In-Reply-To: <C8853DE689283B47B5D348BC33E06193084229B9@gsmbnmp04es.firmwide.corp.gs.com>
References: <C8853DE689283B47B5D348BC33E06193084229B5@gsmbnmp04es.firmwide.corp.gs.com>
	<60ed19d40710261619s7314787ay9bbffc297535d047@mail.gmail.com>
	<C8853DE689283B47B5D348BC33E06193084229B9@gsmbnmp04es.firmwide.corp.gs.com>
Message-ID: <60ed19d40710280750q64ccab13uc5903591dd6f6d10@mail.gmail.com>

On 10/28/07, Rutt, Benjamin <Benjamin.Rutt at gs.com> wrote:
> So using deferToThread, inside my thread, when I have a result to write
> to the client, I call callFromThread to schedule a write in the reactor
> loop.

No, if you're using deferToThread, the way you give the result back to
the mainloop is by returning the value from the function. Then that
result gets fired on the Deferred that deferToThread created.



-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From Benjamin.Rutt at gs.com  Sun Oct 28 09:51:28 2007
From: Benjamin.Rutt at gs.com (Rutt, Benjamin)
Date: Sun, 28 Oct 2007 11:51:28 -0400
Subject: [Twisted-Python] IPushProducer - medium volume streaming
In-Reply-To: <60ed19d40710280750q64ccab13uc5903591dd6f6d10@mail.gmail.com>
References: <C8853DE689283B47B5D348BC33E06193084229B5@gsmbnmp04es.firmwide.corp.gs.com><60ed19d40710261619s7314787ay9bbffc297535d047@mail.gmail.com><C8853DE689283B47B5D348BC33E06193084229B9@gsmbnmp04es.firmwide.corp.gs.com>
	<60ed19d40710280750q64ccab13uc5903591dd6f6d10@mail.gmail.com>
Message-ID: <C8853DE689283B47B5D348BC33E06193084229BB@gsmbnmp04es.firmwide.corp.gs.com>

It's a long-running streaming flow so there will be millions of results
to send to the client.  You're saying I call deferToThread millions of
times?

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of
Christopher Armstrong
Sent: Sunday, October 28, 2007 10:51 AM
To: Twisted general discussion
Subject: Re: [Twisted-Python] IPushProducer - medium volume streaming

On 10/28/07, Rutt, Benjamin <Benjamin.Rutt at gs.com> wrote:
> So using deferToThread, inside my thread, when I have a result to
write
> to the client, I call callFromThread to schedule a write in the
reactor
> loop.

No, if you're using deferToThread, the way you give the result back to
the mainloop is by returning the value from the function. Then that
result gets fired on the Deferred that deferToThread created.



-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From radix at twistedmatrix.com  Sun Oct 28 10:11:20 2007
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 28 Oct 2007 12:11:20 -0400
Subject: [Twisted-Python] IPushProducer - medium volume streaming
In-Reply-To: <C8853DE689283B47B5D348BC33E06193084229BB@gsmbnmp04es.firmwide.corp.gs.com>
References: <C8853DE689283B47B5D348BC33E06193084229B5@gsmbnmp04es.firmwide.corp.gs.com>
	<60ed19d40710261619s7314787ay9bbffc297535d047@mail.gmail.com>
	<C8853DE689283B47B5D348BC33E06193084229B9@gsmbnmp04es.firmwide.corp.gs.com>
	<60ed19d40710280750q64ccab13uc5903591dd6f6d10@mail.gmail.com>
	<C8853DE689283B47B5D348BC33E06193084229BB@gsmbnmp04es.firmwide.corp.gs.com>
Message-ID: <60ed19d40710280911x63a58f31k287d504e5e3326f8@mail.gmail.com>

On 10/28/07, Rutt, Benjamin <Benjamin.Rutt at gs.com> wrote:
> It's a long-running streaming flow so there will be millions of results
> to send to the client.  You're saying I call deferToThread millions of
> times?

No, I was just correcting your description of the way that
deferToThread is used.

If you don't want to use deferToThread, then you should probably use a
combination of reactor.callInThread and reactor.callFromThread.

-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From rt at aspirinka.net  Sun Oct 28 14:35:35 2007
From: rt at aspirinka.net (Sergey Alembekov)
Date: Sun, 28 Oct 2007 23:35:35 +0300
Subject: [Twisted-Python] python2.5
Message-ID: <200710282335.35364.rt@aspirinka.net>

Hi,
Will twisted works with python2.5?

-- 
Regards, Sergey Alembekov
ALTLinux Team
xmpp: rt at jabber.ru



From radix at twistedmatrix.com  Sun Oct 28 14:54:51 2007
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 28 Oct 2007 16:54:51 -0400
Subject: [Twisted-Python] python2.5
In-Reply-To: <200710282335.35364.rt@aspirinka.net>
References: <200710282335.35364.rt@aspirinka.net>
Message-ID: <60ed19d40710281354g53d800b9w1cfb9d4d5143a65b@mail.gmail.com>

On 10/28/07, Sergey Alembekov <rt at aspirinka.net> wrote:
> Hi,
> Will twisted works with python2.5?

Twisted 2.5 works with Python 2.5 (the version number matching is just
a coincidence :-) The Python 2.5 release had some incompatibilities
that caused older versions of Twisted some trouble, but even those
should probably mostly work.

-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From nico at tekNico.net  Sun Oct 28 16:50:22 2007
From: nico at tekNico.net (Nicola Larosa)
Date: Sun, 28 Oct 2007 23:50:22 +0100
Subject: [Twisted-Python] Re: python2.5
In-Reply-To: <60ed19d40710281354g53d800b9w1cfb9d4d5143a65b@mail.gmail.com>
References: <200710282335.35364.rt@aspirinka.net>
	<60ed19d40710281354g53d800b9w1cfb9d4d5143a65b@mail.gmail.com>
Message-ID: <4725122E.8090902@tekNico.net>

> Sergey Alembekov wrote:
>> Will twisted works with python2.5?

Christopher Armstrong wrote:
> Twisted 2.5 works with Python 2.5 (the version number matching is just
> a coincidence :-)

Moreover, Twisted 2.5 *requires* Python 2.5 for inline callbacks, that are
often useful.


-- 
Nicola Larosa - http://www.tekNico.net/

The day Microsoft makes a product that doesn't suck
is the day they make a vacuum cleaner.
 -- Anonymous





From radix at twistedmatrix.com  Sun Oct 28 20:08:28 2007
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 28 Oct 2007 22:08:28 -0400
Subject: [Twisted-Python] Re: python2.5
In-Reply-To: <4725122E.8090902@tekNico.net>
References: <200710282335.35364.rt@aspirinka.net>
	<60ed19d40710281354g53d800b9w1cfb9d4d5143a65b@mail.gmail.com>
	<4725122E.8090902@tekNico.net>
Message-ID: <60ed19d40710281908n64177623o6298d776def2cfa3@mail.gmail.com>

On 10/28/07, Nicola Larosa <nico at teknico.net> wrote:
> > Sergey Alembekov wrote:
> >> Will twisted works with python2.5?
>
> Christopher Armstrong wrote:
> > Twisted 2.5 works with Python 2.5 (the version number matching is just
> > a coincidence :-)
>
> Moreover, Twisted 2.5 *requires* Python 2.5 for inline callbacks, that are
> often useful.

... but does not require it for anything else. We still fully support
Python 2.3, for the record.

-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From stefan.arentz at gmail.com  Mon Oct 29 04:12:01 2007
From: stefan.arentz at gmail.com (Stefan Arentz)
Date: Mon, 29 Oct 2007 11:12:01 +0100
Subject: [Twisted-Python] Proxy server in front of two web sites
Message-ID: <adf34c300710290312g4f78d70fo5d67ff72a9cacd5d@mail.gmail.com>

I'm looking at implementing a solution for the following problem: I
have a setup with two web servers. Each contains the same directory
structure but not the same files. Using a proxy server in front of
these two I would like to merge them into one. So the proxy would
first hit server A and if A returned a 404 then it would hit B.

Is this something that I should implement as a web server or as a
proxy server? Is there actually a difference?

 S.



From manlio_perillo at libero.it  Mon Oct 29 06:19:08 2007
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Mon, 29 Oct 2007 13:19:08 +0100
Subject: [Twisted-Python] Proxy server in front of two web sites
In-Reply-To: <adf34c300710290312g4f78d70fo5d67ff72a9cacd5d@mail.gmail.com>
References: <adf34c300710290312g4f78d70fo5d67ff72a9cacd5d@mail.gmail.com>
Message-ID: <4725CFBC.1080705@libero.it>

Stefan Arentz ha scritto:
> I'm looking at implementing a solution for the following problem: I
> have a setup with two web servers. Each contains the same directory
> structure but not the same files. Using a proxy server in front of
> these two I would like to merge them into one. So the proxy would
> first hit server A and if A returned a 404 then it would hit B.
> 
> Is this something that I should implement as a web server or as a
> proxy server? Is there actually a difference?
> 

You can use Nginx for this.
Sample configuration (not tested):

upstream  backend  {
     server   backend1.example.com       weight=1;
     server   backend2.example.com:8080  weight=0;
}

server {
     location / {
         proxy_next_upstream http_404;
         proxy_pass  http://backend;
     }
}



Regards  Manlio Perillo



From Benjamin.Rutt at gs.com  Mon Oct 29 07:21:37 2007
From: Benjamin.Rutt at gs.com (Rutt, Benjamin)
Date: Mon, 29 Oct 2007 09:21:37 -0400
Subject: [Twisted-Python] IPushProducer - medium volume streaming
In-Reply-To: <60ed19d40710280911x63a58f31k287d504e5e3326f8@mail.gmail.com>
References: <C8853DE689283B47B5D348BC33E06193084229B5@gsmbnmp04es.firmwide.corp.gs.com><60ed19d40710261619s7314787ay9bbffc297535d047@mail.gmail.com><C8853DE689283B47B5D348BC33E06193084229B9@gsmbnmp04es.firmwide.corp.gs.com><60ed19d40710280750q64ccab13uc5903591dd6f6d10@mail.gmail.com><C8853DE689283B47B5D348BC33E06193084229BB@gsmbnmp04es.firmwide.corp.gs.com>
	<60ed19d40710280911x63a58f31k287d504e5e3326f8@mail.gmail.com>
Message-ID: <C8853DE689283B47B5D348BC33E06193084229BD@gsmbnmp04es.firmwide.corp.gs.com>

Thanks.  Now using callInThread to launch a long-running function on the
server and callFromThread from said function to write results to the
client.

I'm still puzzled how exactly
'reactor.callFromThread(self.transport.writeSomeData(...))' gets routed
to the right client when called from my function.  How does twisted know
which client that message is going to?  After all, it calls it from the
main reactor loop.  i.e. what state does it use to get this right?

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of
Christopher Armstrong
Sent: Sunday, October 28, 2007 12:11 PM
To: Twisted general discussion
Subject: Re: [Twisted-Python] IPushProducer - medium volume streaming

On 10/28/07, Rutt, Benjamin <Benjamin.Rutt at gs.com> wrote:
> It's a long-running streaming flow so there will be millions of
results
> to send to the client.  You're saying I call deferToThread millions of
> times?

No, I was just correcting your description of the way that
deferToThread is used.

If you don't want to use deferToThread, then you should probably use a
combination of reactor.callInThread and reactor.callFromThread.

-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From Marcin.Kasperski at softax.com.pl  Mon Oct 29 07:37:05 2007
From: Marcin.Kasperski at softax.com.pl (Marcin Kasperski)
Date: Mon, 29 Oct 2007 14:37:05 +0100
Subject: [Twisted-Python] Re: Proxy server in front of two web sites
References: <adf34c300710290312g4f78d70fo5d67ff72a9cacd5d@mail.gmail.com>
Message-ID: <87bqaiavpa.fsf@cauchy.softax.local>

"Stefan Arentz" <stefan.arentz at gmail.com> writes:

> I'm looking at implementing a solution for the following problem: I
> have a setup with two web servers. Each contains the same directory
> structure but not the same files. Using a proxy server in front of
> these two I would like to merge them into one. So the proxy would
> first hit server A and if A returned a 404 then it would hit B.
>
> Is this something that I should implement as a web server or as a
> proxy server? Is there actually a difference?

Well, de facto it will (almost-*) always be a proxy, proxy is
something that forwards requests and responses. One thing to note is
that if you want backend servers to see the client IP, some extra
effort is needed (like mod_rpaf on backend and adding X-Forwarded-For
on proxy).

nginx suggestion is good one, although of course not the only
possible.  I believe almost every product suitable to work as
reverse-proxy should handle this use case.


*) There exists the solution which does not require a proxy (and is
reasonable if most of the requests go to the first server). Just
have clients accessing the first server but in error handler redirect
them to the second server whenever they face 404.  This way one item
less to manage. But such process will not be transparent for users,
they will see different URLs.




From p.mayers at imperial.ac.uk  Mon Oct 29 08:43:57 2007
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 29 Oct 2007 14:43:57 +0000
Subject: [Twisted-Python] IPushProducer - medium volume streaming
In-Reply-To: <C8853DE689283B47B5D348BC33E06193084229BD@gsmbnmp04es.firmwide.corp.gs.com>
References: <C8853DE689283B47B5D348BC33E06193084229B5@gsmbnmp04es.firmwide.corp.gs.com>
	<60ed19d40710261619s7314787ay9bbffc297535d047@mail.gmail.com>
	<C8853DE689283B47B5D348BC33E06193084229B9@gsmbnmp04es.firmwide.corp.gs.com>
	<60ed19d40710280750q64ccab13uc5903591dd6f6d10@mail.gmail.com>
	<C8853DE689283B47B5D348BC33E06193084229BB@gsmbnmp04es.firmwide.corp.gs.com>
	<60ed19d40710280911x63a58f31k287d504e5e3326f8@mail.gmail.com>
	<C8853DE689283B47B5D348BC33E06193084229BD@gsmbnmp04es.firmwide.corp.gs.com>
Message-ID: <1193669037.3139.118.camel@localhost.localdomain>

On Mon, 2007-10-29 at 09:21 -0400, Rutt, Benjamin wrote:
> Thanks.  Now using callInThread to launch a long-running function on the
> server and callFromThread from said function to write results to the
> client.
> 
> I'm still puzzled how exactly
> 'reactor.callFromThread(self.transport.writeSomeData(...))' gets routed

I presume you mean:

reactor.callFromThread(self.transport.writeSomeData, ...)

Note the subtle difference

> to the right client when called from my function.  How does twisted know

The "transport" object is a bound connection and contains the address of
the endpoint (if you're using TCP that is)

> which client that message is going to?  After all, it calls it from the
> main reactor loop.  i.e. what state does it use to get this right?
> 
> -----Original Message-----
> From: twisted-python-bounces at twistedmatrix.com
> [mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of
> Christopher Armstrong
> Sent: Sunday, October 28, 2007 12:11 PM
> To: Twisted general discussion
> Subject: Re: [Twisted-Python] IPushProducer - medium volume streaming
> 
> On 10/28/07, Rutt, Benjamin <Benjamin.Rutt at gs.com> wrote:
> > It's a long-running streaming flow so there will be millions of
> results
> > to send to the client.  You're saying I call deferToThread millions of
> > times?
> 
> No, I was just correcting your description of the way that
> deferToThread is used.
> 
> If you don't want to use deferToThread, then you should probably use a
> combination of reactor.callInThread and reactor.callFromThread.
> 




From radix at twistedmatrix.com  Mon Oct 29 08:57:09 2007
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 29 Oct 2007 10:57:09 -0400
Subject: [Twisted-Python] IPushProducer - medium volume streaming
In-Reply-To: <C8853DE689283B47B5D348BC33E06193084229BD@gsmbnmp04es.firmwide.corp.gs.com>
References: <C8853DE689283B47B5D348BC33E06193084229B5@gsmbnmp04es.firmwide.corp.gs.com>
	<60ed19d40710261619s7314787ay9bbffc297535d047@mail.gmail.com>
	<C8853DE689283B47B5D348BC33E06193084229B9@gsmbnmp04es.firmwide.corp.gs.com>
	<60ed19d40710280750q64ccab13uc5903591dd6f6d10@mail.gmail.com>
	<C8853DE689283B47B5D348BC33E06193084229BB@gsmbnmp04es.firmwide.corp.gs.com>
	<60ed19d40710280911x63a58f31k287d504e5e3326f8@mail.gmail.com>
	<C8853DE689283B47B5D348BC33E06193084229BD@gsmbnmp04es.firmwide.corp.gs.com>
Message-ID: <60ed19d40710290757g7f71e134j348d023367753760@mail.gmail.com>

On 10/29/07, Rutt, Benjamin <Benjamin.Rutt at gs.com> wrote:
> I'm still puzzled how exactly
> 'reactor.callFromThread(self.transport.writeSomeData(...))' gets routed
> to the right client when called from my function.  How does twisted know
> which client that message is going to?  After all, it calls it from the
> main reactor loop.  i.e. what state does it use to get this right?

"self.transport" is associated with the particular connection.

Also, there are a couple of other things wrong about your snippet:

1. use "write", not "writeSomeData". writeSomeData is an internal
implementation detail.

2. You're actually calling writeSomeData and passing the *result* of
that to callFromThread. That's wrong; you need to pass a callable and
its arguments to callFromThread. So instead of
reactor.callFromThread(foo(a, b)), you write
reactor.callFromThread(foo, a, b). That means you should ultimately be
using::

reactor.callFromThread(self.transport.write, data)

-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From phil at bubblehouse.org  Mon Oct 29 09:01:23 2007
From: phil at bubblehouse.org (Phil Christensen)
Date: Mon, 29 Oct 2007 11:01:23 -0400
Subject: [Twisted-Python] Re: [Twisted-web] installed twisted. twisted.web
	missing?
In-Reply-To: <F6DCAC09-509B-4627-AF4D-67EABD7D80FC@dreid.org>
References: <d7ac1a680710281814w2a696143of5db20609fb79c19@mail.gmail.com>
	<F6DCAC09-509B-4627-AF4D-67EABD7D80FC@dreid.org>
Message-ID: <99C09EEE-A4A0-4007-A5FE-A3B285AB00F8@bubblehouse.org>

I saw this pop up over on -web, but I'd like to ask about this...

On Oct 29, 2007, at 3:49 AM, David Reid wrote:
> On Oct 28, 2007, at 6:14 PM, aaron smith wrote:
>> quick newb question. I installed twisted from source on mac os x  
>> leopard. When I run:
>>
>> >>python
>> >>import twisted
>> >>from twisted.web import http
>>
>> I get an ImportError: ImportError: No module named web
>
> Unfortunately there is an incomplete distribution of twisted 2.4 in / 
> System/Library/Frameworks
>
> Your source install likely went into /Library/Python/2.5/site- 
> packages/ which is also unfortunately  after /System/Library/ 
> Frameworks in the PYTHONPATH.
>
> Put /Library/Python/2.5/site-packages/ at the front of your  
> PYTHONPATH.

This seems like a relatively large issue with respect to Twisted  
support on Mac OS X. Is it really going to be necessary to set an  
environment variable anywhere you want to use Twisted? I guess this  
would be an issue for any of the packages distributed in Extras, but  
this is the one I have the most opinions about ;-)...

Is there some other way to modify your path? I assume .pth files won't  
work for this, since they only append to the path.

-phil




From phil at bubblehouse.org  Mon Oct 29 09:24:41 2007
From: phil at bubblehouse.org (Phil Christensen)
Date: Mon, 29 Oct 2007 11:24:41 -0400
Subject: [Twisted-Python] Re: [Twisted-web] installed twisted. twisted.web
	missing?
In-Reply-To: <99C09EEE-A4A0-4007-A5FE-A3B285AB00F8@bubblehouse.org>
References: <d7ac1a680710281814w2a696143of5db20609fb79c19@mail.gmail.com>
	<F6DCAC09-509B-4627-AF4D-67EABD7D80FC@dreid.org>
	<99C09EEE-A4A0-4007-A5FE-A3B285AB00F8@bubblehouse.org>
Message-ID: <AE5D467F-9867-43CD-8DAD-D4744B2D709B@bubblehouse.org>


On Oct 29, 2007, at 11:01 AM, Phil Christensen wrote:

> I saw this pop up over on -web, but I'd like to ask about this...
>
> On Oct 29, 2007, at 3:49 AM, David Reid wrote:
>> On Oct 28, 2007, at 6:14 PM, aaron smith wrote:
>>> quick newb question. I installed twisted from source on mac os x  
>>> leopard. When I run:
>>>
>>> >>python
>>> >>import twisted
>>> >>from twisted.web import http
>>>
>>> I get an ImportError: ImportError: No module named web
>>
>> Unfortunately there is an incomplete distribution of twisted 2.4  
>> in /System/Library/Frameworks
>>
>> Your source install likely went into /Library/Python/2.5/site- 
>> packages/ which is also unfortunately  after /System/Library/ 
>> Frameworks in the PYTHONPATH.
>>
>> Put /Library/Python/2.5/site-packages/ at the front of your  
>> PYTHONPATH.
>
> This seems like a relatively large issue with respect to Twisted  
> support on Mac OS X. Is it really going to be necessary to set an  
> environment variable anywhere you want to use Twisted? I guess this  
> would be an issue for any of the packages distributed in Extras, but  
> this is the one I have the most opinions about ;-)...
>
> Is there some other way to modify your path? I assume .pth files  
> won't work for this, since they only append to the path.

I'm going to answer my own question on this. A nice way to fix this is  
to create a .pth file in /Library/Python/2.5/site-packages, with the  
following line:

	import sys; sys.path.insert(0, '/Library/Python/2.5/site-packages')

On my machine for some reason i see the site-packages directory in  
there twice (even before this .pth file was added), so there's a part  
of me that wants to go with:

	import sys; sys.path = [s for s in sys.path if s != '/Library/Python/ 
2.5/site-packages']; sys.path.insert(0, '/Library/Python/2.5/site- 
packages')

but that only seems to get rid of one of them. It doesn't seem to  
matter anyways, so I guess the first version is good enough.

-phil



From stefan.arentz at gmail.com  Mon Oct 29 10:45:59 2007
From: stefan.arentz at gmail.com (Stefan Arentz)
Date: Mon, 29 Oct 2007 17:45:59 +0100
Subject: [Twisted-Python] Re: Proxy server in front of two web sites
In-Reply-To: <87bqaiavpa.fsf@cauchy.softax.local>
References: <adf34c300710290312g4f78d70fo5d67ff72a9cacd5d@mail.gmail.com>
	<87bqaiavpa.fsf@cauchy.softax.local>
Message-ID: <adf34c300710290945h1490dcdcyc828f831a0f9d297@mail.gmail.com>

The problem is that I don't have control over these servers. Otherwise
I would have implemented the redirect.

I've done a quick hack where I have a Resource that deals with this
directory hierarchy and simply starts a client.getPage to retrieve the
page and does a redirect if it does not exist. It works fairly well,
initial tests with 'ab' gives really reasonable performance actually.
Without any optimization or caching :-)

 S.

On 10/29/07, Marcin Kasperski <Marcin.Kasperski at softax.com.pl> wrote:
> "Stefan Arentz" <stefan.arentz at gmail.com> writes:
>
> > I'm looking at implementing a solution for the following problem: I
> > have a setup with two web servers. Each contains the same directory
> > structure but not the same files. Using a proxy server in front of
> > these two I would like to merge them into one. So the proxy would
> > first hit server A and if A returned a 404 then it would hit B.
> >
> > Is this something that I should implement as a web server or as a
> > proxy server? Is there actually a difference?
>
> Well, de facto it will (almost-*) always be a proxy, proxy is
> something that forwards requests and responses. One thing to note is
> that if you want backend servers to see the client IP, some extra
> effort is needed (like mod_rpaf on backend and adding X-Forwarded-For
> on proxy).
>
> nginx suggestion is good one, although of course not the only
> possible.  I believe almost every product suitable to work as
> reverse-proxy should handle this use case.
>
>
> *) There exists the solution which does not require a proxy (and is
> reasonable if most of the requests go to the first server). Just
> have clients accessing the first server but in error handler redirect
> them to the second server whenever they face 404.  This way one item
> less to manage. But such process will not be transparent for users,
> they will see different URLs.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From Benjamin.Rutt at gs.com  Mon Oct 29 11:10:15 2007
From: Benjamin.Rutt at gs.com (Rutt, Benjamin)
Date: Mon, 29 Oct 2007 13:10:15 -0400
Subject: [Twisted-Python] IPushProducer - medium volume streaming
In-Reply-To: <60ed19d40710290757g7f71e134j348d023367753760@mail.gmail.com>
References: <C8853DE689283B47B5D348BC33E06193084229B5@gsmbnmp04es.firmwide.corp.gs.com><60ed19d40710261619s7314787ay9bbffc297535d047@mail.gmail.com><C8853DE689283B47B5D348BC33E06193084229B9@gsmbnmp04es.firmwide.corp.gs.com><60ed19d40710280750q64ccab13uc5903591dd6f6d10@mail.gmail.com><C8853DE689283B47B5D348BC33E06193084229BB@gsmbnmp04es.firmwide.corp.gs.com><60ed19d40710280911x63a58f31k287d504e5e3326f8@mail.gmail.com><C8853DE689283B47B5D348BC33E06193084229BD@gsmbnmp04es.firmwide.corp.gs.com>
	<60ed19d40710290757g7f71e134j348d023367753760@mail.gmail.com>
Message-ID: <C8853DE689283B47B5D348BC33E06193084229C0@gsmbnmp04es.firmwide.corp.gs.com>

Thanks Chris and Phil.  My mistake for writing

'reactor.callFromThread(self.transport.writeSomeData(...))'

not

'reactor.callFromThread(self.transport.writeSomeData, ...)' 

the latter which I'm actually using.

Also I fixed to use write() not writeSomeData(), thanks.

Regarding state, I take it each new client connection to my server
results in a new instance of my LineReceiver subclass.  So therefore the
self.transport object contains the TCP socket fd in there somewhere -
makes sense, thanks.

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of
Christopher Armstrong
Sent: Monday, October 29, 2007 10:57 AM
To: Twisted general discussion
Subject: Re: [Twisted-Python] IPushProducer - medium volume streaming

On 10/29/07, Rutt, Benjamin <Benjamin.Rutt at gs.com> wrote:
> I'm still puzzled how exactly
> 'reactor.callFromThread(self.transport.writeSomeData(...))' gets
routed
> to the right client when called from my function.  How does twisted
know
> which client that message is going to?  After all, it calls it from
the
> main reactor loop.  i.e. what state does it use to get this right?

"self.transport" is associated with the particular connection.

Also, there are a couple of other things wrong about your snippet:

1. use "write", not "writeSomeData". writeSomeData is an internal
implementation detail.

2. You're actually calling writeSomeData and passing the *result* of
that to callFromThread. That's wrong; you need to pass a callable and
its arguments to callFromThread. So instead of
reactor.callFromThread(foo(a, b)), you write
reactor.callFromThread(foo, a, b). That means you should ultimately be
using::

reactor.callFromThread(self.transport.write, data)

-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From brown at esteem.com  Mon Oct 29 11:19:26 2007
From: brown at esteem.com (Tom Brown)
Date: Mon, 29 Oct 2007 10:19:26 -0700
Subject: [Twisted-Python] asyncronous access to serial ports under windows
In-Reply-To: <1193454653.28874.234.camel@brown.esteem.com>
References: <1193438559.28874.226.camel@brown.esteem.com>
	<1193454653.28874.234.camel@brown.esteem.com>
Message-ID: <1193678366.28874.261.camel@brown.esteem.com>

On Fri, 2007-10-26 at 20:10 -0700, Tom Brown wrote:
> On Fri, 2007-10-26 at 15:42 -0700, Tom Brown wrote:
> > Hi,
> > 
> > I've been able to create an application in Linux that reads/writes
> > multiple serial ports asyncronously. The setup code that does this looks
> > like this:
> > 
> > ...
> > from twisted.internet.qtreactor import install
> > a = QApplication(argv)
> > install(a)
> > from twisted.internet import reactor
> > from twisted.internet.serialport import SerialPort
> > ...
> >   ports, badPorts = getGoodPorts()
> >   if not ports:
> >     exit(1)
> >   data = ConfigData(join(sep, 'etc', 'qa.conf'))
> >   dbInfo = copy(data['qadata'])
> >   getLogin(dbInfo)
> >   w = MainWindow(data, dbInfo, ports)
> >   w.show()
> >   reactor.addSystemEventTrigger('after', 'shutdown', a.quit)
> >   a.connect(a, SIGNAL('lastWindowClosed()'), reactor.stop)
> >   for portObj in w.portObjs:
> >     SerialPort(portObj.scanner, portObj.port, reactor, baudrate=38400)
> >     portObj.sendLine()
> >   reactor.run()
> > 
> > Where the portObj.scanner is an instance of a descendent of Protocol.
> > Like I said, the above code works under Linux. Then I tried porting this
> > to Windows. The first problem I came across is that the qtreactor.py
> > would not work. I had to subclass QTReactor from Win32Reactor. It runs
> > without errors. However, I am not reading anything off of the serial
> > port. I can see the lights blink on the port when the portObj.sendLine()
> > is called, so I believe I am writing to it ok and data is coming back.
> > The data is just not read by the application. I think it must have
> > something to do with the SerialPort instance not getting an even that
> > data is ready. I suspect this is a Windows issue in that Windows is not
> > signaling an event when data is ready to read on the serial port.
> > 
> > Does anybody have any experience with this? Is there a work around? Am I
> > doing something wrong?
> 
> Well, I found out that it has something to do with the qtreactor. If I
> use just a Win32Reactor, it will read/write the serial port just fine. I
> played around with writing to the serial port using
> scanner.transport.write('\n') and found that
> Win32Reactor.doWaitForMultipleEvents() is called when a Win32Reactor is
> used. It is not called when a QTReactor(Win32Reactor) is used. The
> question is why is this the case?

Ok, I was able to find a solution to my problem. I had to make some
changes to the original qt4reactor.py (which I renamed to qtreactor.py
and copied over the original twisted qtreactor.py). The changes I made
are:

1) Subclassed QTReactor from Win32Reactor.
2) Commented out the following methods so the base class methods are
used:
  addReader()
  addWriter()
  removeReader()
  removeWriter()
  removeAll()
3) Modified the QTReactor.simulate() method so it calls doIteration()
after calling runUntilCurrent().

I've tested this with two devices and it works great. After I test this
in a production environment with six devices, I can create a patch
against the original qt4reactor.py. I'd like to make this available to
others who might need it. Where is the best place to post the patch?
This mailing list?

Thanks,
Tom





From nitro at dr-code.org  Wed Oct 31 01:41:10 2007
From: nitro at dr-code.org (Nitro)
Date: Wed, 31 Oct 2007 08:41:10 +0100
Subject: [Twisted-Python] Perspective broker and pipes
Message-ID: <op.t01wywmez3pzfc@nitrogenycs2>

Hello,

I wrote a pb application which also uses udp sockets. It works nicely. Now
there's the situation where client and server are both located on the same
machine. This means I could just connect to localhost and everything
works. Unfortunately some firewalls warn about connections. I want to
avoid this.
So I thought about replacing the transports in pb with pipes instead of
sockets if the server and client are both on the same machine. I'd have to
do the same for my custom udp solution. Doing it for my custom udp code is
easy, but how do I do this with pb?
Do I just have to create some kind of reactor.createPipe() thing or is
there more to it?

Thanks for your help,
-Matthias



From exarkun at divmod.com  Wed Oct 31 05:59:32 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 31 Oct 2007 06:59:32 -0500
Subject: [Twisted-Python] Perspective broker and pipes
In-Reply-To: <op.t01wywmez3pzfc@nitrogenycs2>
Message-ID: <20071031115932.8162.253534422.divmod.quotient.30070@ohm>

On Wed, 31 Oct 2007 08:41:10 +0100, Nitro <nitro at dr-code.org> wrote:
>Hello,
>
>I wrote a pb application which also uses udp sockets. It works nicely. Now
>there's the situation where client and server are both located on the same
>machine. This means I could just connect to localhost and everything
>works. Unfortunately some firewalls warn about connections. I want to
>avoid this.
>So I thought about replacing the transports in pb with pipes instead of
>sockets if the server and client are both on the same machine. I'd have to
>do the same for my custom udp solution. Doing it for my custom udp code is
>easy, but how do I do this with pb?
>Do I just have to create some kind of reactor.createPipe() thing or is
>there more to it?

Since you're concerned about firewalls warning about connections, I'm
guessing you're thinking about Windows.  In that case, you can't use
IReactorUNIX and IReactorUNIXDatagram, which would perhaps meet your
use case (although for all I know, some firewall software warns about
UNIX connections).

There is no support for communicating over arbitrary pipes in Twisted.
There is incidental support for communicating with pipes connected to
another process created with reactor.spawnProcess, but the process API
is not the same as the IProtocol API.

In general, using pipes will lessen performance anyway.

Jean-Paul



From nitro at dr-code.org  Wed Oct 31 07:24:50 2007
From: nitro at dr-code.org (Nitro)
Date: Wed, 31 Oct 2007 14:24:50 +0100
Subject: [Twisted-Python] Perspective broker and pipes
In-Reply-To: <20071031115932.8162.253534422.divmod.quotient.30070@ohm>
References: <20071031115932.8162.253534422.divmod.quotient.30070@ohm>
Message-ID: <op.t02cvobaz3pzfc@nitrogenycs2>

Am 31.10.2007, 12:59 Uhr, schrieb Jean-Paul Calderone <exarkun at divmod.com>:

> On Wed, 31 Oct 2007 08:41:10 +0100, Nitro <nitro at dr-code.org> wrote:
>> Hello,
>>
>> I wrote a pb application which also uses udp sockets. It works nicely.  
>> Now
>> there's the situation where client and server are both located on the  
>> same
>> machine. This means I could just connect to localhost and everything
>> works. Unfortunately some firewalls warn about connections. I want to
>> avoid this.
>> So I thought about replacing the transports in pb with pipes instead of
>> sockets if the server and client are both on the same machine. I'd have  
>> to
>> do the same for my custom udp solution. Doing it for my custom udp code  
>> is
>> easy, but how do I do this with pb?
>> Do I just have to create some kind of reactor.createPipe() thing or is
>> there more to it?
>
> Since you're concerned about firewalls warning about connections, I'm
> guessing you're thinking about Windows.  In that case, you can't use
> IReactorUNIX and IReactorUNIXDatagram, which would perhaps meet your
> use case (although for all I know, some firewall software warns about
> UNIX connections).

Yes, I am mainly working on windows.

> There is no support for communicating over arbitrary pipes in Twisted.
> There is incidental support for communicating with pipes connected to
> another process created with reactor.spawnProcess, but the process API
> is not the same as the IProtocol API.
>
> In general, using pipes will lessen performance anyway.

How big is the actual performance impact? The throughput right now is  
~10-50 kbyte/s. Is there a better way than pipes? They were just the first  
thing that came to my mind.
If pipes are still ok for my situation, how would I continue? Implement  
some kind of PipeCommunication class which implements IProtocol? What's  
the next step then? How do I plug this into pb?

Thanks for your time.

-Matthias



From exarkun at divmod.com  Wed Oct 31 07:33:13 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 31 Oct 2007 08:33:13 -0500
Subject: [Twisted-Python] Perspective broker and pipes
In-Reply-To: <op.t02cvobaz3pzfc@nitrogenycs2>
Message-ID: <20071031133313.8162.1793855910.divmod.quotient.30097@ohm>

On Wed, 31 Oct 2007 14:24:50 +0100, Nitro <nitro at dr-code.org> wrote:
>
> [snip]
>
>How big is the actual performance impact? The throughput right now is  ~10- 
>50 kbyte/s. Is there a better way than pipes? They were just the first 
>thing that came to my mind.

TCP connections are the thing which is better. ;)  Now that I think of it,
though, I don't know anything about how pipes are implemented on Windows.

>If pipes are still ok for my situation, how would I continue? Implement 
>some kind of PipeCommunication class which implements IProtocol? What's  the 
>next step then? How do I plug this into pb?

You'll have to implement ITCPTransport based on a pipe.  You can probably
re-use some code in Twisted for this.  For example, FileDescriptor from
twisted.internet.abstract might provide part of the implementation for you.

You might want to look at a few other things in twisted.internet.interfaces,
too (eg, IReactorFDSet).

Jean-Paul



From general at eepatents.com  Wed Oct 31 07:55:18 2007
From: general at eepatents.com (Ed Suominen)
Date: Wed, 31 Oct 2007 06:55:18 -0700
Subject: [Twisted-Python] Perspective broker and pipes
In-Reply-To: <op.t01wywmez3pzfc@nitrogenycs2>
References: <op.t01wywmez3pzfc@nitrogenycs2>
Message-ID: <47288946.8010305@eepatents.com>

The processworker module of my AsynQueue package spawns a process and
makes a PB connection with it via stdin/stdout. Perhaps you could adapt
it for your purposes.

http://foss.eepatents.com/trac/AsynQueue/browser/projects/AsynQueue/trunk/asynqueue/processworker.py

Best regards, Ed

Nitro wrote:
> Hello,
> 
> I wrote a pb application which also uses udp sockets. It works nicely. Now
> there's the situation where client and server are both located on the same
> machine. This means I could just connect to localhost and everything
> works. Unfortunately some firewalls warn about connections. I want to
> avoid this.
> So I thought about replacing the transports in pb with pipes instead of
> sockets if the server and client are both on the same machine. I'd have to
> do the same for my custom udp solution. Doing it for my custom udp code is
> easy, but how do I do this with pb?
> Do I just have to create some kind of reactor.createPipe() thing or is
> there more to it?
> 
> Thanks for your help,
> -Matthias
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> 



From brendoncolby at gmail.com  Wed Oct 31 10:13:08 2007
From: brendoncolby at gmail.com (Brendon Colby)
Date: Wed, 31 Oct 2007 11:13:08 -0500
Subject: [Twisted-Python] Deferreds and Trial -- getting my timing right
Message-ID: <e64b001e0710310913h5ef6e9abl21f72340d803ea28@mail.gmail.com>

Greetings,

I've paused development to bring my unittests up to date, and have hit
another snag. I am under the impression that no real work should be done in
my factory's init, so I have a bunch of routines that load data from a DB in
startFactory() (they all return deferreds from adbapi). I'm not sure when
startFactory() runs, but I know it's definitely not running before my tests
fire. I'm curious: do I need to move my data loading back into init, save
the deferred and return that deferred from setUp to have all my pre-loading
complete before my tests run? When does startFactory() actually fire?

Thanks,

Brendon Colby
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20071031/a7219f61/attachment.html>

From exarkun at divmod.com  Wed Oct 31 10:27:10 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 31 Oct 2007 11:27:10 -0500
Subject: [Twisted-Python] Deferreds and Trial -- getting my timing right
In-Reply-To: <e64b001e0710310913h5ef6e9abl21f72340d803ea28@mail.gmail.com>
Message-ID: <20071031162710.8162.357591065.divmod.quotient.30157@ohm>

On Wed, 31 Oct 2007 11:13:08 -0500, Brendon Colby <brendoncolby at gmail.com> wrote:
>Greetings,
>
>I've paused development to bring my unittests up to date, and have hit
>another snag. I am under the impression that no real work should be done in
>my factory's init, so I have a bunch of routines that load data from a DB in
>startFactory() (they all return deferreds from adbapi). I'm not sure when
>startFactory() runs, but I know it's definitely not running before my tests
>fire. I'm curious: do I need to move my data loading back into init, save
>the deferred and return that deferred from setUp to have all my pre-loading
>complete before my tests run? When does startFactory() actually fire?

When your factory begins listening on its first port.

  f = YourFactory()
  reactor.listenTCP(0, f) # <- here
  reactor.run()

Jean-Paul



From brendoncolby at gmail.com  Wed Oct 31 11:01:06 2007
From: brendoncolby at gmail.com (Brendon Colby)
Date: Wed, 31 Oct 2007 12:01:06 -0500
Subject: [Twisted-Python] Deferreds and Trial -- getting my timing right
In-Reply-To: <20071031162710.8162.357591065.divmod.quotient.30157@ohm>
References: <e64b001e0710310913h5ef6e9abl21f72340d803ea28@mail.gmail.com>
	<20071031162710.8162.357591065.divmod.quotient.30157@ohm>
Message-ID: <e64b001e0710311001s4ad86f06wa7bd54a28a6c4614@mail.gmail.com>

On 10/31/07, Jean-Paul Calderone <exarkun at divmod.com> wrote:
>
> When your factory begins listening on its first port.
>
>   f = YourFactory()
>   reactor.listenTCP(0, f) # <- here
>   reactor.run()
>
> Jean-Paul


So what do I need to do in my unittests to get this to work? I'm using a
FileWrapper now to mock this up, so I never run listenTCP() of course.

Brendon
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20071031/b557e182/attachment.html>

From exarkun at divmod.com  Wed Oct 31 11:15:39 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 31 Oct 2007 12:15:39 -0500
Subject: [Twisted-Python] Deferreds and Trial -- getting my timing right
In-Reply-To: <e64b001e0710311001s4ad86f06wa7bd54a28a6c4614@mail.gmail.com>
Message-ID: <20071031171539.8162.1924538823.divmod.quotient.30171@ohm>

On Wed, 31 Oct 2007 12:01:06 -0500, Brendon Colby <brendoncolby at gmail.com> wrote:
>On 10/31/07, Jean-Paul Calderone <exarkun at divmod.com> wrote:
>>
>> When your factory begins listening on its first port.
>>
>>   f = YourFactory()
>>   reactor.listenTCP(0, f) # <- here
>>   reactor.run()
>>
>> Jean-Paul
>
>
>So what do I need to do in my unittests to get this to work? I'm using a
>FileWrapper now to mock this up, so I never run listenTCP() of course.

I dunno.  I can't remember the last time I put any code in a factory's
__init__ or its startFactory method.  Maybe you could call the startFactory
method in your test?

Jean-Paul



