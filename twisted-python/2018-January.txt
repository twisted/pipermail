From adi at roiban.ro  Wed Jan  3 04:29:55 2018
From: adi at roiban.ro (Adi Roiban)
Date: Wed, 3 Jan 2018 11:29:55 +0000
Subject: [Twisted-Python] failUnlessFailure vs assertFailure
Message-ID: <CAFycZ9cM8wm2gQ7Vn5EXmHS8rGMraGYZh=0WF1n2vSKrk3bM6w@mail.gmail.com>

Hi,

Do you know why we still have failUnlessFailure is an alias to
assertFailure? [1]

It looks like pydoctor does not include aliases as I don't see
failUnlessFailure in the HTML rendering
http://twistedmatrix.com/documents/current/api/twisted.trial.unittest.TestCase.html

Looking at the current code, I see that it is used only in a single
place in Twisted
https://github.com/twisted/twisted/search?utf8=%E2%9C%93&q=failUnlessFailure&type=

I see that in the past assertFailure was an alias for failUnlessFailure [2]

Is the plan to continue to have the alias? Maybe we can have a comment
before the alias.

Can we deprecate it?

Should pydoctor be updated to also show aliases of public methods?

Regards,

[1] https://github.com/twisted/twisted/blob/e38cc25a67747899c6984d6ebaa8d3d134799415/src/twisted/trial/_asynctest.py#L77

[2] https://github.com/twisted/twisted/commit/ce0b00de026a896b731d8794de2fd61b54a78a98
-- 
Adi Roiban


From rodrigc at crodrigues.org  Wed Jan  3 14:19:09 2018
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Wed, 3 Jan 2018 16:19:09 -0500
Subject: [Twisted-Python] failUnlessFailure vs assertFailure
In-Reply-To: <CAFycZ9cM8wm2gQ7Vn5EXmHS8rGMraGYZh=0WF1n2vSKrk3bM6w@mail.gmail.com>
References: <CAFycZ9cM8wm2gQ7Vn5EXmHS8rGMraGYZh=0WF1n2vSKrk3bM6w@mail.gmail.com>
Message-ID: <CAG=rPVcoa8PnTX+uh8LhxuRR=bMUc8aqx+c+aZxCUHstWdteRQ@mail.gmail.com>

Probably failUnlessFailure as an alias to assertFailure() was done to mimic
some of the deprecations that occurred
in the Python unittest module in Python 2.7:
https://docs.python.org/2/library/unittest.html#deprecated-aliases

It would probably be a good idea to change the usage of failUnlessFailure
in twisted to assertFailure,
and then deprecate failUnlessFailure.

--
Craig

On Wed, Jan 3, 2018 at 6:29 AM, Adi Roiban <adi at roiban.ro> wrote:

> Hi,
>
> Do you know why we still have failUnlessFailure is an alias to
> assertFailure? [1]
>
> It looks like pydoctor does not include aliases as I don't see
> failUnlessFailure in the HTML rendering
> http://twistedmatrix.com/documents/current/api/twisted.
> trial.unittest.TestCase.html
>
> Looking at the current code, I see that it is used only in a single
> place in Twisted
> https://github.com/twisted/twisted/search?utf8=%E2%9C%93&
> q=failUnlessFailure&type=
>
> I see that in the past assertFailure was an alias for failUnlessFailure [2]
>
> Is the plan to continue to have the alias? Maybe we can have a comment
> before the alias.
>
> Can we deprecate it?
>
> Should pydoctor be updated to also show aliases of public methods?
>
> Regards,
>
> [1] https://github.com/twisted/twisted/blob/e38cc25a67747899c6984d6ebaa8d3
> d134799415/src/twisted/trial/_asynctest.py#L77
>
> [2] https://github.com/twisted/twisted/commit/
> ce0b00de026a896b731d8794de2fd61b54a78a98
> --
> Adi Roiban
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180103/8071ed3e/attachment.html>

From rodrigc at crodrigues.org  Wed Jan  3 14:24:03 2018
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Wed, 3 Jan 2018 16:24:03 -0500
Subject: [Twisted-Python] Drop support for Python 3.3
In-Reply-To: <CAFycZ9fekC4VV-0OSab=n=ihgdqVkZCMAj-tz7u-CL0-tmQ3uw@mail.gmail.com>
References: <CAG=rPVc2eFB2PLrscNnbf0Mg=wOs=PooK5ouWWuJqiKi9Vf6FA@mail.gmail.com>
 <CAFycZ9fekC4VV-0OSab=n=ihgdqVkZCMAj-tz7u-CL0-tmQ3uw@mail.gmail.com>
Message-ID: <CAG=rPVdTZF8WoyXX8MdxBKdjpJ1LdsNFQr5hcDQy5_RPaMW1NQ@mail.gmail.com>

On Wed, Dec 27, 2017 at 1:02 PM, Adi Roiban <adi at roiban.ro> wrote:
>
> On 18 December 2017 at 01:18, Craig Rodrigues <rodrigc at crodrigues.org>
wrote:
> > I submitted this patch to drop support for Python 3.3:
> >
> > https://github.com/twisted/twisted/pull/943
> >
> >
> > 1.  Python 3.3 was declared EOL on Sep. 29, 2017
> > 2.  In terms of major Linux distributions, Python 3.4 came with Python
3.4
> > is in Debian 8, Ubuntu 14.04, Fedora 21
> >
> > So after this patch, Twisted would run on:
> >
> > Python 2.7 and Python 3.4+
>
> +1  for removing python 3.3
>
> But as commented in the PR, I would like to see this removed after the
> next release, so that we don't have to change the release notes for
> 17.9.0
> That is 18.X.X should be the last release to support 3.4



When Python 2.6 support was dropped, the NEWS.rst was modified after the
fact in this:

http://twistedmatrix.com/trac/ticket/8651

That's why I modified NEWS.rst in this commit as well.

Since dropping a Python version happens so infrequently, I thought this was
OK to modify NEWS.rst here, since it has been done before.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180103/346f98e7/attachment.html>

From rodrigc at crodrigues.org  Wed Jan  3 19:12:00 2018
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Wed, 3 Jan 2018 21:12:00 -0500
Subject: [Twisted-Python] buildbot.twistedmatrix.com is down?
Message-ID: <CAG=rPVdy-9BYmuRbCQ-c5vV4umKX14HvTEs32Nzq76g8uK-ZHA@mail.gmail.com>

Hi,

It looks like buildbot.twistedmatrix.com is down.
Does anyone know how to bring it back?

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180103/2407bb3d/attachment.html>

From glyph at twistedmatrix.com  Thu Jan  4 00:36:35 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 3 Jan 2018 23:36:35 -0800
Subject: [Twisted-Python] failUnlessFailure vs assertFailure
In-Reply-To: <CAG=rPVcoa8PnTX+uh8LhxuRR=bMUc8aqx+c+aZxCUHstWdteRQ@mail.gmail.com>
References: <CAFycZ9cM8wm2gQ7Vn5EXmHS8rGMraGYZh=0WF1n2vSKrk3bM6w@mail.gmail.com>
 <CAG=rPVcoa8PnTX+uh8LhxuRR=bMUc8aqx+c+aZxCUHstWdteRQ@mail.gmail.com>
Message-ID: <2D495469-58DD-4B0B-AA5E-00E0DE052C69@twistedmatrix.com>



> On Jan 3, 2018, at 1:19 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> Probably failUnlessFailure as an alias to assertFailure() was done to mimic some of the deprecations that occurred
> in the Python unittest module in Python 2.7: https://docs.python.org/2/library/unittest.html#deprecated-aliases <https://docs.python.org/2/library/unittest.html#deprecated-aliases>
> 
> It would probably be a good idea to change the usage of failUnlessFailure in twisted to assertFailure,
> and then deprecate failUnlessFailure.

This is a roughly accurate summary.

One minor quibble: it wasn't done to mimic "deprecations" - the failUnless aliases have been around since the very first release of PyUnit, and were in some circles considered the preferred form.  (In fact the first suggestion that one or the other should be deprecated, in 2008, is written by someone who was hoping to get rid of assert* and standardize on fail* :).)

But I agree, these aliases should be deprecated in Twisted as well.

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180103/38af7593/attachment.html>

From glyph at twistedmatrix.com  Thu Jan  4 00:58:12 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 3 Jan 2018 23:58:12 -0800
Subject: [Twisted-Python] buildbot.twistedmatrix.com is down?
In-Reply-To: <CAG=rPVdy-9BYmuRbCQ-c5vV4umKX14HvTEs32Nzq76g8uK-ZHA@mail.gmail.com>
References: <CAG=rPVdy-9BYmuRbCQ-c5vV4umKX14HvTEs32Nzq76g8uK-ZHA@mail.gmail.com>
Message-ID: <860A61CC-A50B-4D5B-B693-279CB33A80BF@twistedmatrix.com>



> On Jan 3, 2018, at 6:12 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> Hi,
> 
> It looks like buildbot.twistedmatrix.com <http://buildbot.twistedmatrix.com/> is down.
> Does anyone know how to bring it back?

I've rebooted it, applied security updates, rebooted, purged old kernels, rebooted again.  Should be running smoothly now, no idea what the issue was.

Anyone else with access to do this sort of thing should feel free, by the way, it was a bit of a fluke that I had a moment of free time to do so tonight :-).

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180103/a04d9c18/attachment-0001.html>

From sveinse at seldal.com  Thu Jan  4 12:07:35 2018
From: sveinse at seldal.com (Svein Seldal)
Date: Thu, 4 Jan 2018 20:07:35 +0100
Subject: [Twisted-Python] logObservers and syslog proposal
Message-ID: <43d17963-5fd8-16be-e76d-a84c35be9780@seldal.com>

Hi

I'm currently working on understanding the twister.logger scheme with 
the purpose of getting proper logging in my end-user application.

https://gist.github.com/sveinse/041c69b6bbdde83cf5b00fecae3dcd50

It took me a while to get my head around the difference in using
twisted.logger.globalLogBeginner.beginLoggingTo() vs using 
twisted.logger.globalLogPublisher.addObserver(). Neither of the methods 
behave precisely as I'd like them to. See 
https://gist.github.com/sveinse/041c69b6bbdde83cf5b00fecae3dcd50#file-log-py-L99

1)
What are the intended difference between these two ways of installing a 
logobserver?


2)
I'd like to contribute a SyslogObserver for the new twister.logger 
scheme. See the _syslog.py file in the gist. It has been ported from the 
old logging scheme. Would this be useful to Twisted?

I was uncertain what to do with log_failures in the observer. I see that 
dumping of log_failures has been removed from t.l.FileLogObserver(). 
What is the appropriate way to deal with log_failures?

In the proposal of SyslogObserver I addded a dumpTraceback option to the 
constructor to select if the tb should go to the syslog or not. (My 
application shall have tb to syslog.)



Best regards,
Svein


From glyph at twistedmatrix.com  Thu Jan  4 23:21:16 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 4 Jan 2018 22:21:16 -0800
Subject: [Twisted-Python] logObservers and syslog proposal
In-Reply-To: <43d17963-5fd8-16be-e76d-a84c35be9780@seldal.com>
References: <43d17963-5fd8-16be-e76d-a84c35be9780@seldal.com>
Message-ID: <F5DC9817-9154-43CA-9152-3E4CA4238FBD@twistedmatrix.com>



> On Jan 4, 2018, at 11:07 AM, Svein Seldal <sveinse at seldal.com> wrote:
> 
> Hi
> 
> I'm currently working on understanding the twister.logger scheme with the purpose of getting proper logging in my end-user application.
> 
> https://gist.github.com/sveinse/041c69b6bbdde83cf5b00fecae3dcd50
> 
> It took me a while to get my head around the difference in using
> twisted.logger.globalLogBeginner.beginLoggingTo() vs using twisted.logger.globalLogPublisher.addObserver(). Neither of the methods behave precisely as I'd like them to. See https://gist.github.com/sveinse/041c69b6bbdde83cf5b00fecae3dcd50#file-log-py-L99 <https://gist.github.com/sveinse/041c69b6bbdde83cf5b00fecae3dcd50#file-log-py-L99>

The comment here:

>> any errors in the observers will be silently ignored because the observers are no longer run through the LogPublisher()

is incorrect.  If you're seeing errors being ignored, it's a bug.  However, the specific claim that "the observers are no longer run through the LogPublisher" is definitely wrong.  See the implementation here: https://github.com/twisted/twisted/blob/8b5865cda742b7d727f97cdec4b9e83974d57c94/src/twisted/logger/_global.py#L142 <https://github.com/twisted/twisted/blob/8b5865cda742b7d727f97cdec4b9e83974d57c94/src/twisted/logger/_global.py#L142>

Note in that implementation that the `self._publisher` being replayed to is precisely the LogPublisher, with all the new observers added to it.  Errors should be handled as normal.

Perhaps this is not happening in the correct order with the LoggingFile replacements for stdin/stdout/stderr, and should be taking place later?

> 1)
> What are the intended difference between these two ways of installing a logobserver?

beginLoggingTo is meant to be the thing that you do at program start-up to take over from the boot-time buffering log observer.

addObserver is meant to be the thing that you do at any time during a program's run to add an observer for whatever other reason.

While the exact difference depends upon your application, in general, if you're setting up the "main" log observer for your process, you should probably be doing it with beginLoggingTo.

> 2)
> I'd like to contribute a SyslogObserver for the new twister.logger scheme. See the _syslog.py file in the gist. It has been ported from the old logging scheme. Would this be useful to Twisted?

Absolutely!

> I was uncertain what to do with log_failures in the observer. I see that dumping of log_failures has been removed from t.l.FileLogObserver(). What is the appropriate way to deal with log_failures?

Given that syslog is ultimately an unstructured / text-based format, you probably want to do something similar to what formatEventAsClassicLogText does here: https://github.com/twisted/twisted/blob/8b5865cda742b7d727f97cdec4b9e83974d57c94/src/twisted/logger/_format.py#L192-L198 <https://github.com/twisted/twisted/blob/8b5865cda742b7d727f97cdec4b9e83974d57c94/src/twisted/logger/_format.py#L192-L198>.

> In the proposal of SyslogObserver I addded a dumpTraceback option to the constructor to select if the tb should go to the syslog or not. (My application shall have tb to syslog.)

And, now that I look at your code, I can see that it's almost doing more or less exactly what I suggested with respect to log_failure, so, there you go, you're already doing it right :-).  I'd probably default dumpTraceback to true - you probably do want to see tracebacks, if they're happening, and syslog is your primary log observer.

Thanks for using Twisted and thanks even more for your interest in improving our log tooling!

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180104/523961fa/attachment.html>

From rodrigc at crodrigues.org  Fri Jan  5 11:04:35 2018
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Fri, 5 Jan 2018 13:04:35 -0500
Subject: [Twisted-Python] buildbot.twistedmatrix.com is down?
In-Reply-To: <860A61CC-A50B-4D5B-B693-279CB33A80BF@twistedmatrix.com>
References: <CAG=rPVdy-9BYmuRbCQ-c5vV4umKX14HvTEs32Nzq76g8uK-ZHA@mail.gmail.com>
 <860A61CC-A50B-4D5B-B693-279CB33A80BF@twistedmatrix.com>
Message-ID: <CAG=rPVcqs6m-7=knDJS9kyg3RZiD5uut4rkf8bo1r-i_zwi8bw@mail.gmail.com>

Thanks for rebooting it.

The egh-osx-1 node seems to be down though:

https://buildbot.twistedmatrix.com/builders/osx10.10-py2.7

and this node is a blocking requirement for merges to take place.

--
Craig


On Thu, Jan 4, 2018 at 2:58 AM, Glyph <glyph at twistedmatrix.com> wrote:

>
>
> On Jan 3, 2018, at 6:12 PM, Craig Rodrigues <rodrigc at crodrigues.org>
> wrote:
>
> Hi,
>
> It looks like buildbot.twistedmatrix.com is down.
> Does anyone know how to bring it back?
>
>
> I've rebooted it, applied security updates, rebooted, purged old kernels,
> rebooted again.  Should be running smoothly now, no idea what the issue was.
>
> Anyone else with access to do this sort of thing should feel free, by the
> way, it was a bit of a fluke that I had a moment of free time to do so
> tonight :-).
>
> -g
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180105/5a332f62/attachment.html>

From dau at riseup.net  Fri Jan  5 20:11:12 2018
From: dau at riseup.net (Felipe Dau)
Date: Sat, 6 Jan 2018 03:11:12 +0000
Subject: [Twisted-Python] stdlib logger, loggerFor and filtering events
Message-ID: <20180106031110.GA3369@host.localdomain>

As the logger has been brought up, I'd like to ask a couple things:

1) When I was working on adding logs to an application, I wanted it to
use both the `textFileLogObserver` and the `STDLibLogObserver`. As the
application could be used either with its CLI or GUI, it seemed
interesting to have both these loggers available. I was able to do
that but I wanted them to have the same format - specifically, I
wanted to use the file's format (which is awesome btw) - and had to
override some parts of the `STDLibLogObserver`. It would have made
things a lot simpler if that observer accepted a function to format
events like the `FileLogObserver`.

2) Why is `_loggerFor` "private/hidden"? That is a great factory which
imo should have more visibility - and also works great with attrs!:

     attr.ib(default=attr.Factory(_loggerFor, takes_self=True))

3) Is there a way to suppress logs from libs or any other code that
is not your own? In my case, I had to manually set which namespaces
I wanted to filter but, for example, when you subclass a third-party's
class which logs something, that will pass because now it belongs to
one of your namespaces. I know it sounds crazy but wanted to know what
other people think.

If any of these changes sound like they would be useful apart from the
specific requirements of that application, I could help implement
something based on what I wrote [0].

Thanks,
-Felipe

[0]: https://github.com/AnemoneLabs/unmessage/blob/develop/unmessage/log.py


From glyph at twistedmatrix.com  Fri Jan  5 21:35:05 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 5 Jan 2018 20:35:05 -0800
Subject: [Twisted-Python] buildbot.twistedmatrix.com is down?
In-Reply-To: <CAG=rPVcqs6m-7=knDJS9kyg3RZiD5uut4rkf8bo1r-i_zwi8bw@mail.gmail.com>
References: <CAG=rPVdy-9BYmuRbCQ-c5vV4umKX14HvTEs32Nzq76g8uK-ZHA@mail.gmail.com>
 <860A61CC-A50B-4D5B-B693-279CB33A80BF@twistedmatrix.com>
 <CAG=rPVcqs6m-7=knDJS9kyg3RZiD5uut4rkf8bo1r-i_zwi8bw@mail.gmail.com>
Message-ID: <673F0610-1175-4831-A00E-653C4A5513AC@twistedmatrix.com>



> On Jan 5, 2018, at 10:04 AM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> Thanks for rebooting it.
> 
> The egh-osx-1 node seems to be down though:
> 
> https://buildbot.twistedmatrix.com/builders/osx10.10-py2.7 <https://buildbot.twistedmatrix.com/builders/osx10.10-py2.7>
> 
> and this node is a blocking requirement for merges to take place.

Thanks for the report; rebooted and security updates applied; it appears to be processing the backlog just fine now.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180105/0ddb5ce1/attachment.html>

From glyph at twistedmatrix.com  Fri Jan  5 22:00:41 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 5 Jan 2018 21:00:41 -0800
Subject: [Twisted-Python] stdlib logger, loggerFor and filtering events
In-Reply-To: <20180106031110.GA3369@host.localdomain>
References: <20180106031110.GA3369@host.localdomain>
Message-ID: <3637E91C-9EDF-48B1-AA90-F8A21F71F084@twistedmatrix.com>



> On Jan 5, 2018, at 7:11 PM, Felipe Dau <dau at riseup.net> wrote:
> 
> As the logger has been brought up, I'd like to ask a couple things:


Just for the record, you don't need to wait for it to be brought up before asking other questions ;-).

> 1) When I was working on adding logs to an application, I wanted it to
> use both the `textFileLogObserver` and the `STDLibLogObserver`. As the
> application could be used either with its CLI or GUI, it seemed
> interesting to have both these loggers available. I was able to do
> that but I wanted them to have the same format - specifically, I
> wanted to use the file's format (which is awesome btw) - and had to
> override some parts of the `STDLibLogObserver`. It would have made
> things a lot simpler if that observer accepted a function to format
> events like the `FileLogObserver`.

It might be cool to add that, but, if you don't want the standard library's log format, why are you using the standard library log observer?  And wouldn't this be a job for a https://docs.python.org/3.6/library/logging.html#logging.Formatter <https://docs.python.org/3.6/library/logging.html#logging.Formatter> object in any case; what Twisted should be doing is sending the logs on in a more structured format that works with that?

> 2) Why is `_loggerFor` "private/hidden"? That is a great factory which
> imo should have more visibility - and also works great with attrs!:
> 
>     attr.ib(default=attr.Factory(_loggerFor, takes_self=True))

I'm honestly not sure why this exists at all.  It seems like a terrible mistake has happened here, since `_loggerFor` is actually exported in __all__, which should never ever happen.

From what I can tell, it should be removed, since rather than creating that fairly noisy attr.ib() definition, you could do this:

    _log = Logger()

which is a lot more succinct, and has exactly the same effect (do `self._log.info <http://log.info/>(...)`) and there you have it.

If you could explain why it's great, then maybe we could remove the underscore and add it to the docs.

> 3) Is there a way to suppress logs from libs or any other code that
> is not your own? In my case, I had to manually set which namespaces
> I wanted to filter but, for example, when you subclass a third-party's
> class which logs something, that will pass because now it belongs to
> one of your namespaces. I know it sounds crazy but wanted to know what
> other people think.

Absolutely!  Super glad you brought this up. This was a major part of the design of the new logging system, both to do this, and to also do as little work as possible with messages that were ultimately caught by such filters.

Here's a quick example program demonstrating the combination of https://twistedmatrix.com/documents/17.9.0/api/twisted.logger.LogLevelFilterPredicate.html <https://twistedmatrix.com/documents/17.9.0/api/twisted.logger.LogLevelFilterPredicate.html> and https://twistedmatrix.com/documents/17.9.0/api/twisted.logger.FilteringLogObserver.html <https://twistedmatrix.com/documents/17.9.0/api/twisted.logger.FilteringLogObserver.html>.

import sys
from twisted.logger import (Logger, FilteringLogObserver,
                            LogLevelFilterPredicate, globalLogBeginner,
                            LogLevel, textFileLogObserver)

alog = Logger(namespace="a")
blog = Logger(namespace="b")

predicate = LogLevelFilterPredicate()
predicate.setLogLevelForNamespace("a", LogLevel.debug)
predicate.setLogLevelForNamespace("b", LogLevel.warn)

globalLogBeginner.beginLoggingTo(
    [FilteringLogObserver(textFileLogObserver(sys.stdout), [predicate])]
)

alog.info("one")
blog.info("two")
alog.critical("three")
blog.critical("four")


> If any of these changes sound like they would be useful apart from the
> specific requirements of that application, I could help implement
> something based on what I wrote [0].

We'd certainly be interested in contributions to the logging subsystem!  But I'd probably want to hear a little more about how and why you thought these things were useful first.

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180105/edaab9dc/attachment.html>

From johnaherne at rocs.co.uk  Sat Jan  6 05:38:40 2018
From: johnaherne at rocs.co.uk (John Aherne)
Date: Sat, 6 Jan 2018 12:38:40 +0000
Subject: [Twisted-Python] Twisted.logger on windows max recursion depth
	exceeded
Message-ID: <CAKmUHjaq5jRMMQ2K256KKf6Qv4XfuTxpmmxkR3bhKHsjcYD5fQ@mail.gmail.com>

I've started to look at Python3 and klein

I am using python3.6.3 32bit and twisted 17.9.0 on windows10
klein is downloaded from pypi.

I got to the point of needing to do some logging and thought I now should
use the new logger system.

Below I have posted the python code I am using and the traceback for when
it crashes.

The last part is the log output for when the program works as expected.

*First Setup*

With the first setup all seems to work as expected. I can log to stdio and
to a FileLogObserver without error.

This works with or without the print statements enabled in the event
formatter (jahlog)

*Second Setup*

The second setup causes python to crash with the print statements enabled
in the event formatter.

With the for loop print enabled the system will crash.

With just printing the keys from the event dict it will produce the
recursion depth error but won't crash python.

If I comment out the print statements all seems to work correctly.

I assume I am doing something wrong or something I should not be trying to
do. But I can't work out what causes the 2 setups to behave so differently.

The traceback I have posted below shows the result when using the for loop
to print out the items in the event dict. As you can see there are a whole
lot of empty items it iterates over.

The last section below shows the log output when all is working as
expected. Here we see the expected result from iterating the event dict.
About 8 items to print.

The question is What am I doing wrong if at all. Or why is there such a
difference between the 2 setups.

Any pointers gratefully accepted.

import os
import sys
import traceback
from klein import Klein
from twisted.web import static
#from twisted.internet import reactor
from twisted.web.resource import NoResource
from twisted.internet.defer import succeed
#from twisted.python import log
from twisted.logger import Logger, formatEvent, formatTime
from twisted.logger import FileLogObserver, globalLogPublisher,
globalLogBeginner
from twisted.python.logfile import DailyLogFile
from pprint import pprint

def jahlog(event):
    #print('EVENT DIR', event.keys())
    for item in event:
        print('ITEM', event[item])

    my_tb = ''
    eventText = 'NONE'
    if 'log_failure' in event:
        print('TRACEBACVK22 failure', event['log_failure'])
        my_tb = event['log_failure']
        event['log_format'] = str(event['log_format'])
    eventText = formatEvent(event)
    time = formatTime(event["log_time"])
    my_space = event["log_namespace"]
    my_level = event["log_level"]
    my_logger = event["log_logger"] if 'log_logger' in event else 'JAHlog'
    system_log = event["log_system"] if 'log_system' in event else '-'
    eventString = "{[time]} {[namespace]} {[loglevel]} {[my_logger]}
{[system_log]}  {[text]}\r\n {[my_tb]}".format(dict(time=time),
                            dict(namespace=my_space),
                            dict(loglevel=my_level),
                            dict(my_logger=my_logger),
                            dict(system_log=system_log),
                            dict(text=eventText),
                            dict(my_tb=my_tb)
                            )

    return eventString

log = Logger(namespace="jah_test5")
globalLogPublisher.addObserver(FileLogObserver(DailyLogFile.fromFullPath('c:\\logs\\my_log9.log'),
jahlog))

#Replace the above 2 lines with the following 2 lines and all is well
#f = FileLogObserver(DailyLogFile.fromFullPath('c:\\logs\\my_log6.log'),
jahlog)
#log = Logger(observer=f, namespace="klein_test")


app = Klein()

@app.route('/')
def jah(request):
    logdata = 'some log data'

    print('DO JAH', logdata)
    log.debug('DO JAH LOGGGGG {data!r}\r\n', data=logdata)
    return b"GOT RESULT" #my_html

app.run('localhost', 9000)



Do run with following logger
log = Logger(namespace="jah_test5")
globalLogPublisher.addObserver(FileLogObserver(DailyLogFile.fromFullPath('c:\\logs\\my_log9.log'),
jahlog))

Total Inability To Support Usual Programming

PS C:\jahtest> ./klein_static_test5.py
2018-01-06 11:48:37+0000 [-] ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM
ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM
ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM
ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM
ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM
ITEM ITEM ITEM ITEM ITEM ITEM -
2018-01-06 11:48:37+0000 [-] Temporarily disabling observer
<twisted.logger._file.FileLogObserver object at 0x00000287D6E597B8> due to
exception: [Failure instance: Traceback: <class 'RecursionError'>: maximum
recursion depth exceeded
        C:\Program
Files\Python36\lib\site-packages\twisted\logger\_file.py:50:__call__
        C:\jahtest\klein_static_test5.py:18:jahlog
        C:\Program
Files\Python36\lib\site-packages\twisted\logger\_io.py:170:write
        C:\Program
Files\Python36\lib\site-packages\twisted\logger\_logger.py:135:emit
        --- <exception caught here> ---
        C:\Program
Files\Python36\lib\site-packages\twisted\logger\_observer.py:131:__call__
        C:\Program
Files\Python36\lib\site-packages\twisted\logger\_file.py:50:__call__
        C:\jahtest\klein_static_test5.py:18:jahlog
        C:\Program
Files\Python36\lib\site-packages\twisted\logger\_io.py:170:write
        C:\Program
Files\Python36\lib\site-packages\twisted\logger\_logger.py:117:emit
        C:\Program
Files\Python36\lib\site-packages\constantly\_constants.py:273:iterconstants
        ]
        Traceback (most recent call last):
          File "C:\Program
Files\Python36\lib\site-packages\twisted\logger\_file.py", line 50, in
__call__
            text = self.formatEvent(event)
          File "C:\jahtest\klein_static_test5.py", line 18, in jahlog
            print('ITEM', event[item])
          File "C:\Program
Files\Python36\lib\site-packages\twisted\logger\_io.py", line 170, in write
            self.log.emit(self.level, format=u"{log_io}", log_io=line)
          File "C:\Program
Files\Python36\lib\site-packages\twisted\logger\_logger.py", line 135, in
emit
            self.observer(event)
        --- <exception caught here> ---
          File "C:\Program
Files\Python36\lib\site-packages\twisted\logger\_observer.py", line 131, in
__call__
            observer(event)
          File "C:\Program
Files\Python36\lib\site-packages\twisted\logger\_file.py", line 50, in
__call__
            text = self.formatEvent(event)
          File "C:\jahtest\klein_static_test5.py", line 18, in jahlog
            print('ITEM', event[item])
          File "C:\Program
Files\Python36\lib\site-packages\twisted\logger\_io.py", line 170, in write
            self.log.emit(self.level, format=u"{log_io}", log_io=line)
          File "C:\Program
Files\Python36\lib\site-packages\twisted\logger\_logger.py", line 117, in
emit
            if level not in LogLevel.iterconstants():
          File "C:\Program
Files\Python36\lib\site-packages\constantly\_constants.py", line 273, in
iterconstants
            sorted(constants, key=lambda descriptor: descriptor._index))
        builtins.RecursionError: maximum recursion depth exceeded

Fatal Python error: Cannot recover from stack overflow.

Do run with following logger
f = FileLogObserver(DailyLogFile.fromFullPath('c:\\logs\\my_log6.log'),
jahlog)
log = Logger(observer=f, namespace="klein_test")

PS C:\jahtest> ^C
PS C:\jahtest> ^C
PS C:\jahtest> ./klein_static_test5.py
2018-01-06 11:54:29+0000 [-] Log opened.
2018-01-06 11:54:29+0000 [-] Site starting on 9000
2018-01-06 11:54:29+0000 [-] Starting factory <twisted.web.server.Site
object at 0x000001A886F11588>
2018-01-06 11:54:40+0000 [-] DO JAH some log data
2018-01-06 11:54:40+0000 [-] ITEM some log data
2018-01-06 11:54:40+0000 [-] ITEM <Logger 'klein_test'>
2018-01-06 11:54:40+0000 [-] ITEM <LogLevel=debug>
2018-01-06 11:54:40+0000 [-] ITEM klein_test
2018-01-06 11:54:40+0000 [-] ITEM None
2018-01-06 11:54:40+0000 [-] ITEM DO JAH LOGGGGG {data!r}
2018-01-06 11:54:40+0000 [-]
2018-01-06 11:54:40+0000 [-] ITEM 1515239680.6134038
2018-01-06 11:54:40+0000 [-] "127.0.0.1" - - [06/Jan/2018:11:54:40 +0000]
"GET / HTTP/1.1" 200 10 "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64)
AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.84 Safari/537.36"
2018-01-06 11:54:46+0000 [-] DO JAH some log data
2018-01-06 11:54:46+0000 [-] ITEM some log data
2018-01-06 11:54:46+0000 [-] ITEM <Logger 'klein_test'>
2018-01-06 11:54:46+0000 [-] ITEM <LogLevel=debug>
2018-01-06 11:54:46+0000 [-] ITEM klein_test
2018-01-06 11:54:46+0000 [-] ITEM None
2018-01-06 11:54:46+0000 [-] ITEM DO JAH LOGGGGG {data!r}
2018-01-06 11:54:46+0000 [-]
2018-01-06 11:54:46+0000 [-] ITEM 1515239686.295032
2018-01-06 11:54:46+0000 [-] "127.0.0.1" - - [06/Jan/2018:11:54:45 +0000]
"GET / HTTP/1.1" 200 10 "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64)
AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.84 Safari/537.36"



-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180106/7c03e034/attachment-0001.html>

From rodrigc at crodrigues.org  Sat Jan  6 14:40:49 2018
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Sat, 6 Jan 2018 16:40:49 -0500
Subject: [Twisted-Python] buildbot.twistedmatrix.com is down?
In-Reply-To: <673F0610-1175-4831-A00E-653C4A5513AC@twistedmatrix.com>
References: <CAG=rPVdy-9BYmuRbCQ-c5vV4umKX14HvTEs32Nzq76g8uK-ZHA@mail.gmail.com>
 <860A61CC-A50B-4D5B-B693-279CB33A80BF@twistedmatrix.com>
 <CAG=rPVcqs6m-7=knDJS9kyg3RZiD5uut4rkf8bo1r-i_zwi8bw@mail.gmail.com>
 <673F0610-1175-4831-A00E-653C4A5513AC@twistedmatrix.com>
Message-ID: <CAG=rPVeV5NoPSEENWhTeY4OX=kdKw+i+_xrcSbo0+VHLtOnANw@mail.gmail.com>

On Fri, Jan 5, 2018 at 11:35 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
>
> Thanks for the report; rebooted and security updates applied; it appears
> to be processing the backlog just fine now.
>
>
 Is http://buildbot.twistedmatrix.com/ down again?  I can't seem to access
it.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180106/00ebf270/attachment.html>

From glyph at twistedmatrix.com  Sat Jan  6 14:43:11 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 6 Jan 2018 13:43:11 -0800
Subject: [Twisted-Python] buildbot.twistedmatrix.com is down?
In-Reply-To: <CAG=rPVeV5NoPSEENWhTeY4OX=kdKw+i+_xrcSbo0+VHLtOnANw@mail.gmail.com>
References: <CAG=rPVdy-9BYmuRbCQ-c5vV4umKX14HvTEs32Nzq76g8uK-ZHA@mail.gmail.com>
 <860A61CC-A50B-4D5B-B693-279CB33A80BF@twistedmatrix.com>
 <CAG=rPVcqs6m-7=knDJS9kyg3RZiD5uut4rkf8bo1r-i_zwi8bw@mail.gmail.com>
 <673F0610-1175-4831-A00E-653C4A5513AC@twistedmatrix.com>
 <CAG=rPVeV5NoPSEENWhTeY4OX=kdKw+i+_xrcSbo0+VHLtOnANw@mail.gmail.com>
Message-ID: <AE54EA52-A324-4608-AFC2-8D37C2A84C6E@twistedmatrix.com>



> On Jan 6, 2018, at 1:40 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> On Fri, Jan 5, 2018 at 11:35 PM, Glyph <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> 
> 
> Thanks for the report; rebooted and security updates applied; it appears to be processing the backlog just fine now.
> 
> 
>  Is http://buildbot.twistedmatrix.com/ <http://buildbot.twistedmatrix.com/> down again?  I can't seem to access it.

Rebooted again, and it's back.  Do you want credentials for this machine?  ISTR you're the Buildbot expert, maybe you can figure out why it's flaky :).

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180106/e9644031/attachment.html>

From trac at twistedmatrix.com  Sun Jan  7 00:05:23 2018
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 07 Jan 2018 07:05:23 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1515308723.88.2003614905489079299@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180107/b8a3948c/attachment.html>

From glyph at twistedmatrix.com  Sun Jan  7 00:27:54 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 6 Jan 2018 23:27:54 -0800
Subject: [Twisted-Python] Twisted.logger on windows max recursion
	depth	exceeded
In-Reply-To: <CAKmUHjaq5jRMMQ2K256KKf6Qv4XfuTxpmmxkR3bhKHsjcYD5fQ@mail.gmail.com>
References: <CAKmUHjaq5jRMMQ2K256KKf6Qv4XfuTxpmmxkR3bhKHsjcYD5fQ@mail.gmail.com>
Message-ID: <015FB76D-E0F8-4752-8106-446F463BE580@twistedmatrix.com>

Hi John,

Lots of interest in logging this week for some reason :-).

> On Jan 6, 2018, at 4:38 AM, John Aherne <johnaherne at rocs.co.uk <mailto:johnaherne at rocs.co.uk>> wrote:
> 
> If I comment out the print statements all seems to work correctly.
> 
> I assume I am doing something wrong or something I should not be trying to do. But I can't work out what causes the 2 setups to behave so differently.

The issue here is that klein.run() is initializing the (old-style) logging system; that initialization, among other things, includes replacing sys.stdout and sys.stderr with files that will emit log messages rather than write directly.

`print` debugging of log observers is therefore always somewhat risky since many ways of initializing the logging system will do this.

Perhaps the logging system should be a bit more defensive about observers emitting messages; however, for the time being, if you want to do `print` debugging of a log observer, at the top of your file do something like

from sys import stderr as DEBUG

and then everywhere you have a call to the 'print' function, use the 'file' kwarg:

print('ITEM', event[item], file=DEBUG)

I hope this is helpful,

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180106/0ba90647/attachment-0001.html>

From johnaherne at rocs.co.uk  Sun Jan  7 02:42:52 2018
From: johnaherne at rocs.co.uk (John Aherne)
Date: Sun, 7 Jan 2018 09:42:52 +0000
Subject: [Twisted-Python] Twisted.logger on windows max recursion depth
	exceeded
In-Reply-To: <015FB76D-E0F8-4752-8106-446F463BE580@twistedmatrix.com>
References: <CAKmUHjaq5jRMMQ2K256KKf6Qv4XfuTxpmmxkR3bhKHsjcYD5fQ@mail.gmail.com>
 <015FB76D-E0F8-4752-8106-446F463BE580@twistedmatrix.com>
Message-ID: <CAKmUHjaHUy6j9MvJAC+QyFwnYTeh1VWdztZV5Sudi7RDyWokPA@mail.gmail.com>

Lots of interest in logging this week for some reason :-).

Yes. Must be the weather :-).

But very helpful from my point of view as I've just started to look at it.

Well I guessed that printing inside the observer was not a good idea.

But I could not see why this one showed the problem

log = Logger(namespace="jah_test5")
globalLogPublisher.addObserver(FileLogObserver(
DailyLogFile.fromFullPath('c:\\logs\\my_log9.log'), jahlog))

But this one did not

f = FileLogObserver(DailyLogFile.fromFullPath('c:\\logs\\my_log6.log'),
jahlog)
log = Logger(observer=f, namespace="klein_test")

I was assuming they would both add an observer to globalLogObserver at some
point.

And if klein was the culprit it would have the same problem with both.

Anyway I only needed the print statements while I checked out what was
turning up in the event.

Thanks.

John


On Sun, Jan 7, 2018 at 7:27 AM, Glyph <glyph at twistedmatrix.com> wrote:

> Hi John,
>
> Lots of interest in logging this week for some reason :-).
>
> On Jan 6, 2018, at 4:38 AM, John Aherne <johnaherne at rocs.co.uk> wrote:
>
> If I comment out the print statements all seems to work correctly.
>
> I assume I am doing something wrong or something I should not be trying to
> do. But I can't work out what causes the 2 setups to behave so differently.
>
>
> The issue here is that klein.run() is initializing the (old-style) logging
> system; that initialization, among other things, includes replacing
> sys.stdout and sys.stderr with files that will emit log messages rather
> than write directly.
>
> `print` debugging of log observers is therefore always somewhat risky
> since many ways of initializing the logging system will do this.
>
> Perhaps the logging system should be a bit more defensive about observers
> emitting messages; however, for the time being, if you want to do `print`
> debugging of a log observer, at the *top* of your file do something like
>
> from sys import stderr as DEBUG
>
>
> and then everywhere you have a call to the 'print' function, use the
> 'file' kwarg:
>
> print('ITEM', event[item], file=DEBUG)
>
>
> I hope this is helpful,
>
> -g
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180107/79ec3dad/attachment.html>

From rodrigc at crodrigues.org  Sun Jan  7 14:47:46 2018
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Sun, 7 Jan 2018 13:47:46 -0800
Subject: [Twisted-Python] Building Python3 wheels for Win32 and releasing to
	Pypi
Message-ID: <CAG=rPVdBfwznejTDjK8c+BnMSYX1BX3ifa2JEDmv9HM6+WKnww@mail.gmail.com>

At https://pypi.python.org/pypi/Twisted , there is only a Python 2.7 wheel
for Win32.

Since we don't push Python3 wheels to Pypi, people need to pick them up
from: https://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted
which is not ideal.

Since I ported the IOCP reactor to Win32 in 2016, it would be good
to update the Twisted release scripts to push Python3 wheels to Pypi.

Where are these scripts located?

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180107/0bbf7316/attachment.html>

From glyph at twistedmatrix.com  Sun Jan  7 16:44:25 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 7 Jan 2018 15:44:25 -0800
Subject: [Twisted-Python] Building Python3 wheels for Win32 and
 releasing to	Pypi
In-Reply-To: <CAG=rPVdBfwznejTDjK8c+BnMSYX1BX3ifa2JEDmv9HM6+WKnww@mail.gmail.com>
References: <CAG=rPVdBfwznejTDjK8c+BnMSYX1BX3ifa2JEDmv9HM6+WKnww@mail.gmail.com>
Message-ID: <CD276210-1EA3-4FBD-9B99-BF269B4B8C0E@twistedmatrix.com>



> On Jan 7, 2018, at 1:47 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> At https://pypi.python.org/pypi/Twisted <https://pypi.python.org/pypi/Twisted> , there is only a Python 2.7 wheel for Win32.
> 
> Since we don't push Python3 wheels to Pypi, people need to pick them up
> from: https://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted <https://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted>
> which is not ideal.
> 
> Since I ported the IOCP reactor to Win32 in 2016, it would be good
> to update the Twisted release scripts to push Python3 wheels to Pypi.

👍

> Where are these scripts located?

The release process is documented here:

https://twisted.readthedocs.io/en/latest/core/development/policy/release-process.html <https://twisted.readthedocs.io/en/latest/core/development/policy/release-process.html>

According to said documentation, it seems that the Windows wheels are all built on the Buildbot, which would put the script here: https://github.com/twisted-infra/braid/blob/4320f9461d376ba255158e841b308dd833376c36/services/buildbot/master/twisted_factories.py#L624-L664 <https://github.com/twisted-infra/braid/blob/4320f9461d376ba255158e841b308dd833376c36/services/buildbot/master/twisted_factories.py#L624-L664>

Personally I would really like to see a wheel matrix with win32/win64/macOS/manylinux1 on one side and py27 py34 py35 py36 on the other.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180107/d1dcb8b3/attachment.html>

From adi at roiban.ro  Sun Jan  7 23:14:33 2018
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 8 Jan 2018 06:14:33 +0000
Subject: [Twisted-Python] Building Python3 wheels for Win32 and
 releasing to Pypi
In-Reply-To: <CD276210-1EA3-4FBD-9B99-BF269B4B8C0E@twistedmatrix.com>
References: <CAG=rPVdBfwznejTDjK8c+BnMSYX1BX3ifa2JEDmv9HM6+WKnww@mail.gmail.com>
 <CD276210-1EA3-4FBD-9B99-BF269B4B8C0E@twistedmatrix.com>
Message-ID: <CAFycZ9dPn1RzTRr2XNGHU9KuVCeZz6mxcELRy5dzp6dH7sdU7g@mail.gmail.com>

On 7 January 2018 at 23:44, Glyph <glyph at twistedmatrix.com> wrote:

>
>
> On Jan 7, 2018, at 1:47 PM, Craig Rodrigues <rodrigc at crodrigues.org>
> wrote:
>
> At https://pypi.python.org/pypi/Twisted , there is only a Python 2.7
> wheel for Win32.
>
> Since we don't push Python3 wheels to Pypi, people need to pick them up
> from: https://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted
> which is not ideal.
>
> Since I ported the IOCP reactor to Win32 in 2016, it would be good
> to update the Twisted release scripts to push Python3 wheels to Pypi.
>
>
> 👍
>
> Where are these scripts located?
>
>
> The release process is documented here:
>
> https://twisted.readthedocs.io/en/latest/core/development/
> policy/release-process.html
>
> According to said documentation, it seems that the Windows wheels are all
> built on the Buildbot, which would put the script here:
> https://github.com/twisted-infra/braid/blob/4320f9461d376ba255158e841b308d
> d833376c36/services/buildbot/master/twisted_factories.py#L624-L664
>
> Personally I would *really* like to see a wheel matrix with
> win32/win64/macOS/manylinux1 on one side and py27 py34 py35 py36 on the
> other.
>
>
Maybe it helps,
There is some work for moving the Windows builds to appveyor

Ticket https://twistedmatrix.com/trac/ticket/8676

initial PR https://github.com/twisted/twisted/pull/413

I no longer have time to work on it, but I think that is possible to build
wheels for py2.7 and py3 on appveyor

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180108/cddb36ef/attachment.html>

From rodrigc at crodrigues.org  Mon Jan  8 13:56:34 2018
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Mon, 8 Jan 2018 12:56:34 -0800
Subject: [Twisted-Python] Building Python3 wheels for Win32 and
 releasing to Pypi
In-Reply-To: <CAFycZ9dPn1RzTRr2XNGHU9KuVCeZz6mxcELRy5dzp6dH7sdU7g@mail.gmail.com>
References: <CAG=rPVdBfwznejTDjK8c+BnMSYX1BX3ifa2JEDmv9HM6+WKnww@mail.gmail.com>
 <CD276210-1EA3-4FBD-9B99-BF269B4B8C0E@twistedmatrix.com>
 <CAFycZ9dPn1RzTRr2XNGHU9KuVCeZz6mxcELRy5dzp6dH7sdU7g@mail.gmail.com>
Message-ID: <CAG=rPVeBPxNE5nmtimFg7Dgc8YQaz+1yw1-zoyfK9Kww1MLnAQ@mail.gmail.com>

On Sun, Jan 7, 2018 at 10:14 PM, Adi Roiban <adi at roiban.ro> wrote:

>
> I no longer have time to work on it, but I think that is possible to build
> wheels for py2.7 and py3 on appveyor
>


If during the release process, appveyor could build the Windows wheels on
py2.7 and py3, and then upload
them to pypi, that would be ideal.

Didn't you implement something for one of the Twisted subprojects where if
a git tag was created and pushed to github, then it would build and upload
to pypi?
That would be the ideal thing to implement with appveyor for the main
Twisted project.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180108/99b78dec/attachment.html>

From oliverpalmer at opalmer.com  Mon Jan  8 15:53:46 2018
From: oliverpalmer at opalmer.com (Oliver Palmer)
Date: Mon, 8 Jan 2018 17:53:46 -0500
Subject: [Twisted-Python] Building Python3 wheels for Win32 and
 releasing to Pypi
In-Reply-To: <CAG=rPVeBPxNE5nmtimFg7Dgc8YQaz+1yw1-zoyfK9Kww1MLnAQ@mail.gmail.com>
References: <CAG=rPVdBfwznejTDjK8c+BnMSYX1BX3ifa2JEDmv9HM6+WKnww@mail.gmail.com>
 <CD276210-1EA3-4FBD-9B99-BF269B4B8C0E@twistedmatrix.com>
 <CAFycZ9dPn1RzTRr2XNGHU9KuVCeZz6mxcELRy5dzp6dH7sdU7g@mail.gmail.com>
 <CAG=rPVeBPxNE5nmtimFg7Dgc8YQaz+1yw1-zoyfK9Kww1MLnAQ@mail.gmail.com>
Message-ID: <CAEgpGv79W_CrZrgejRP+rbJWQQYsihc=A5PLAurUvv9T4WvWwA@mail.gmail.com>

> If during the release process, appveyor could build the Windows wheels on
py2.7 and py3, and then upload them to pypi, that would be ideal.

Last I checked AppyVeyor can't do this directly. I ended up writing a
command line tool to make releases for pywincffi which uses this class to
pull release artifacts from a build on AppVeyor:

https://github.com/opalmer/pywincffi/blob/master/pywincffi/dev/release.py#L392

The PR mentioned above appears to already push artifacts using sftp so if
you wanted to pull artifacts for a specific build you could use the above.
I don't know enough about Twisted's release process to know if the above
will be useful but if you need to access all artifacts for a branch of the
last passing build the above should do it.

As for building wheels for Windows on AppVeyor it might be worth looking at
the one I've come up with:

https://github.com/opalmer/pywincffi/blob/master/appveyor.yml

The most notable difference probably is that I'm creating an environment
variable called %WITH_COMPILER% which points at a script
<https://github.com/opalmer/pywincffi/blob/master/.ci/appveyor/run_with_compiler.cmd>
that
sets up additional environment variables prior to the install
<https://github.com/opalmer/pywincffi/blob/master/.ci/appveyor/install.cmd> or
other scripts running. I don't know enough about Twisted's build to know if
it's needed but without those environment variables I ended up having
problems getting builds through for Python 2/3 for both 32-bit and 64-bit
variants even when using setuptools. I don't know if the situation has
improved since but it might be worth looking at if Twisted's build on
appyveor runs into issues.

On Mon, Jan 8, 2018 at 3:56 PM, Craig Rodrigues <rodrigc at crodrigues.org>
wrote:

>
>
> On Sun, Jan 7, 2018 at 10:14 PM, Adi Roiban <adi at roiban.ro> wrote:
>
>>
>> I no longer have time to work on it, but I think that is possible to
>> build wheels for py2.7 and py3 on appveyor
>>
>
>
> If during the release process, appveyor could build the Windows wheels on
> py2.7 and py3, and then upload
> them to pypi, that would be ideal.
>
> Didn't you implement something for one of the Twisted subprojects where if
> a git tag was created and pushed to github, then it would build and upload
> to pypi?
> That would be the ideal thing to implement with appveyor for the main
> Twisted project.
>
> --
> Craig
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180108/4650dfc5/attachment.html>

From barry.scott at forcepoint.com  Tue Jan  9 04:49:27 2018
From: barry.scott at forcepoint.com (Barry Scott)
Date: Tue, 9 Jan 2018 11:49:27 +0000
Subject: [Twisted-Python] twistedmatrix.com is in trouble...
Message-ID: <15310396.AAOjnfZoH4@barry-scott-desktop>

In case you have no noticed yet.

*web.Server Traceback (most recent call last):* 
exceptions.IOError: [Errno 24] Too many open files: '/srv/t-web/config/vhosts/twistedmatrix.com/
documents.rpy' 
/srv/t-web/virtualenv/site-packages/twisted/web/server.py:185 in process 
184        try: 
185            resrc = self.site.getResourceFor(self) 
186            if resource._IEncodingResource.providedBy(resrc): 
/srv/t-web/virtualenv/site-packages/twisted/web/server.py:791 in getResourceFor 
790        request.sitepath = copy.copy(request.prepath) 
791        return resource.getChildForRequest(self.resource, request) 
792 
/srv/t-web/virtualenv/site-packages/twisted/web/resource.py:98 in getChildForRequest 
97        request.prepath.append(pathElement) 
98        resource = resource.getChildWithDefault(pathElement, request) 
99    return resource 
/srv/t-web/virtualenv/site-packages/twisted/web/resource.py:201 in getChildWithDefault 
200            return self.children[path] 
201        return self.getChild(path, request) 
202 
/srv/t-web/virtualenv/site-packages/twisted/web/rewrite.py:24 in getChild 
23 
24 
25 
/srv/t-web/virtualenv/site-packages/twisted/web/resource.py:201 in getChildWithDefault 
200            return self.children[path] 
201        return self.getChild(path, request) 
202 
/srv/t-web/virtualenv/site-packages/twisted/web/vhost.py:102 in getChild 
101 
102 
103 
/srv/t-web/virtualenv/site-packages/twisted/web/resource.py:201 in getChildWithDefault 
200            return self.children[path] 
201        return self.getChild(path, request) 
202 
/srv/t-web/virtualenv/site-packages/twisted/web/static.py:298 in getChild 
297        if processor: 
298            return resource.IResource(processor(fpath.path, self.registry)) 
299        return self.createSimilarFile(fpath.path) 
/srv/t-web/virtualenv/site-packages/twisted/web/script.py:64 in ResourceScript 
63    try: 
64        execfile(path, glob, glob) 
65    except AlreadyCached as ac: 
/srv/t-web/virtualenv/site-packages/twisted/python/compat.py:248 in execfile 
247        locals = globals 
248    with open(filename, "rb") as fin: 
249        source = fin.read() 
exceptions.IOError: [Errno 24] Too many open files: '/srv/t-web/config/vhosts/twistedmatrix.com/
documents.rpy' 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180109/f8f8240e/attachment-0001.html>

From exarkun at twistedmatrix.com  Tue Jan  9 05:23:08 2018
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Tue, 9 Jan 2018 07:23:08 -0500
Subject: [Twisted-Python] twistedmatrix.com is in trouble...
In-Reply-To: <15310396.AAOjnfZoH4@barry-scott-desktop>
References: <15310396.AAOjnfZoH4@barry-scott-desktop>
Message-ID: <CAEeXt4PK-fuW1PbFFx6_UvLnNKdZ87ritskMd3d5whWKTG_B1g@mail.gmail.com>

On Tue, Jan 9, 2018 at 6:49 AM, Barry Scott <barry.scott at forcepoint.com>
wrote:

> In case you have no noticed yet.
>

>
> web.Server Traceback (most recent call last):
>
> exceptions.IOError: [Errno 24] Too many open files:
> '/srv/t-web/config/vhosts/twistedmatrix.com/documents.rpy'
>

Thanks.  I saved the open files to ~root (in case someone wants to
investigate) and restarted the web server (bin/stop; bin/start).

Jean-Paul


> /srv/t-web/virtualenv/site-packages/twisted/web/server.py:185 in process
>
> 184        try:
>
> 185            resrc = self.site.getResourceFor(self)
>
> 186            if resource._IEncodingResource.providedBy(resrc):
>
> /srv/t-web/virtualenv/site-packages/twisted/web/server.py:791 in
> getResourceFor
>
> 790        request.sitepath = copy.copy(request.prepath)
>
> 791        return resource.getChildForRequest(self.resource, request)
>
> 792
>
> /srv/t-web/virtualenv/site-packages/twisted/web/resource.py:98 in
> getChildForRequest
>
> 97        request.prepath.append(pathElement)
>
> 98        resource = resource.getChildWithDefault(pathElement, request)
>
> 99    return resource
>
> /srv/t-web/virtualenv/site-packages/twisted/web/resource.py:201 in
> getChildWithDefault
>
> 200            return self.children[path]
>
> 201        return self.getChild(path, request)
>
> 202
>
> /srv/t-web/virtualenv/site-packages/twisted/web/rewrite.py:24 in getChild
>
> 23
>
> 24
>
> 25
>
> /srv/t-web/virtualenv/site-packages/twisted/web/resource.py:201 in
> getChildWithDefault
>
> 200            return self.children[path]
>
> 201        return self.getChild(path, request)
>
> 202
>
> /srv/t-web/virtualenv/site-packages/twisted/web/vhost.py:102 in getChild
>
> 101
>
> 102
>
> 103
>
> /srv/t-web/virtualenv/site-packages/twisted/web/resource.py:201 in
> getChildWithDefault
>
> 200            return self.children[path]
>
> 201        return self.getChild(path, request)
>
> 202
>
> /srv/t-web/virtualenv/site-packages/twisted/web/static.py:298 in getChild
>
> 297        if processor:
>
> 298            return resource.IResource(processor(fpath.path,
> self.registry))
>
> 299        return self.createSimilarFile(fpath.path)
>
> /srv/t-web/virtualenv/site-packages/twisted/web/script.py:64 in
> ResourceScript
>
> 63    try:
>
> 64        execfile(path, glob, glob)
>
> 65    except AlreadyCached as ac:
>
> /srv/t-web/virtualenv/site-packages/twisted/python/compat.py:248 in
> execfile
>
> 247        locals = globals
>
> 248    with open(filename, "rb") as fin:
>
> 249        source = fin.read()
>
> exceptions.IOError: [Errno 24] Too many open files:
> '/srv/t-web/config/vhosts/twistedmatrix.com/documents.rpy'
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180109/51c10e40/attachment.html>

From trac at twistedmatrix.com  Sun Jan 14 00:05:25 2018
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 14 Jan 2018 07:05:25 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1515913525.53.2054230896629860405@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180114/e7e89c22/attachment.html>

From dau at riseup.net  Sun Jan 14 17:34:23 2018
From: dau at riseup.net (Felipe Dau)
Date: Mon, 15 Jan 2018 00:34:23 +0000
Subject: [Twisted-Python] stdlib logger, loggerFor and filtering events
In-Reply-To: <3637E91C-9EDF-48B1-AA90-F8A21F71F084@twistedmatrix.com>
References: <20180106031110.GA3369@host.localdomain>
 <3637E91C-9EDF-48B1-AA90-F8A21F71F084@twistedmatrix.com>
Message-ID: <20180115003417.GA10333@host.localdomain>

On Fri, Jan 05, 2018 at 09:00:41PM -0800, Glyph wrote:
> Just for the record, you don't need to wait for it to be brought up before asking other questions ;-).

Thanks Glyph, I should have asked these a while ago.

> It might be cool to add that, but, if you don't want the standard library's log format, why are you using the standard library log observer?  And wouldn't this be a job for a https://docs.python.org/3.6/library/logging.html#logging.Formatter <https://docs.python.org/3.6/library/logging.html#logging.Formatter> object in any case; what Twisted should be doing is sending the logs on in a more structured format that works with that?

Honestly, I just wanted to display something to stdout (when using the
GUI) and using stdlib's looked like the right way to do that, but
using sys.stdout directly like in your example below would work as
well. And now that I am looking again at what I did, it is probably
the worst thing to do if you are trying to integrate something: set
the message text to the actual formatted text and set the format to
just '%(message)s'. Anything else that used stdlib's would only
contain the message, losing all the rest of the info.

Considering that I just really wanted to display the logs, is there
any advantage on using stdlib's? If so, I would then use the Formatter
as you pointed out, otherwise, I would just pass it to sys.stdout. In
both cases, there wouldn't be a need to pass an event formatter like I
wanted to. Thanks!

> I'm honestly not sure why this exists at all.  It seems like a terrible mistake has happened here, since `_loggerFor` is actually exported in __all__, which should never ever happen.
> 
> From what I can tell, it should be removed, since rather than creating that fairly noisy attr.ib() definition, you could do this:
> 
>     _log = Logger()
> 
> which is a lot more succinct, and has exactly the same effect (do `self._log.info <http://log.info/>(...)`) and there you have it.
> 
> If you could explain why it's great, then maybe we could remove the underscore and add it to the docs.

It is indeed a lot more succinct! The reason I used _loggerFor is that
it creates a logger for any instance it receives. That way, it can
set the namespace automatically when instantiated inside any method of
a class - the constructor, for example. I just do not remember why
creating a separate logger for each instance instead of sharing the
class'. Would there be a reason for that?

But I do think that if you would like to log something but not keep
the instance around, _loggerFor may be useful, as Logger would only
set the namespace based on the module when called from a method.

> Absolutely!  Super glad you brought this up. This was a major part of the design of the new logging system, both to do this, and to also do as little work as possible with messages that were ultimately caught by such filters.
> 
> Here's a quick example program demonstrating the combination of https://twistedmatrix.com/documents/17.9.0/api/twisted.logger.LogLevelFilterPredicate.html <https://twistedmatrix.com/documents/17.9.0/api/twisted.logger.LogLevelFilterPredicate.html> and https://twistedmatrix.com/documents/17.9.0/api/twisted.logger.FilteringLogObserver.html <https://twistedmatrix.com/documents/17.9.0/api/twisted.logger.FilteringLogObserver.html>.

Thanks for the example! Unfortunately I think that is different from
what I tried to describe. Here is an example:

    class ThirdPartyClass:
        a_log = Logger()

        def method_a(self):
            self.a_log.info('Log I want to supress')

            self.a_log.warn('Log I do not want to supress')

    class MyClass(ThirdPartyClass):
        b_log = Logger()

        def method_b(self):
            self.method_a()

            self.b_log.info('Log I do not want to supress')


    MyClass().method_b()

Considering that the class definitions would be in separate files,
they would still have the same namespaces. This would be a case where
the libraries you are using are a bit noisy and you would just want to
display warnings+.

I believe that as there is a reference to a_log, it would be possible
to change the namespace, but if the third party class used
_loggerFor().info() instead, then that would not be possible, right?

This actually happens with Factory.doStart() [0] once that is
subclassed, you cannot differ its  namespace from your class'.

These would be situations where very few people would come across or
maybe I still have to learn more about the logging system, but I
thought it would be worth to be discussed.

Thanks,
-Felipe

[0]: https://github.com/twisted/twisted/blob/trunk/src/twisted/internet/protocol.py#L75


From glyph at twistedmatrix.com  Sun Jan 14 23:07:46 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 14 Jan 2018 22:07:46 -0800
Subject: [Twisted-Python] stdlib logger, loggerFor and filtering events
In-Reply-To: <20180115003417.GA10333@host.localdomain>
References: <20180106031110.GA3369@host.localdomain>
 <3637E91C-9EDF-48B1-AA90-F8A21F71F084@twistedmatrix.com>
 <20180115003417.GA10333@host.localdomain>
Message-ID: <EB16F593-FC25-4F0A-8BB6-4374ABD0FB99@twistedmatrix.com>



> On Jan 14, 2018, at 4:34 PM, Felipe Dau <dau at riseup.net> wrote:
> 
> On Fri, Jan 05, 2018 at 09:00:41PM -0800, Glyph wrote:
>> Just for the record, you don't need to wait for it to be brought up before asking other questions ;-).
> 
> Thanks Glyph, I should have asked these a while ago.
> 
>> It might be cool to add that, but, if you don't want the standard library's log format, why are you using the standard library log observer?  And wouldn't this be a job for a https://docs.python.org/3.6/library/logging.html#logging.Formatter <https://docs.python.org/3.6/library/logging.html#logging.Formatter> object in any case; what Twisted should be doing is sending the logs on in a more structured format that works with that?
> 
> Honestly, I just wanted to display something to stdout (when using the
> GUI) and using stdlib's looked like the right way to do that, but
> using sys.stdout directly like in your example below would work as
> well. And now that I am looking again at what I did, it is probably
> the worst thing to do if you are trying to integrate something: set
> the message text to the actual formatted text and set the format to
> just '%(message)s'. Anything else that used stdlib's would only
> contain the message, losing all the rest of the info.

Yep.

> Considering that I just really wanted to display the logs, is there
> any advantage on using stdlib's? If so, I would then use the Formatter
> as you pointed out, otherwise, I would just pass it to sys.stdout. In
> both cases, there wouldn't be a need to pass an event formatter like I
> wanted to. Thanks!

I don't think so.  Twisted's will do this just fine (and in fact does it automatically if you're using `twist`, or the older `twistd`).

> 
>> I'm honestly not sure why this exists at all.  It seems like a terrible mistake has happened here, since `_loggerFor` is actually exported in __all__, which should never ever happen.
>> 
>> From what I can tell, it should be removed, since rather than creating that fairly noisy attr.ib() definition, you could do this:
>> 
>>    _log = Logger()
>> 
>> which is a lot more succinct, and has exactly the same effect (do `self._log.info <http://log.info/>(...)`) and there you have it.
>> 
>> If you could explain why it's great, then maybe we could remove the underscore and add it to the docs.
> 
> It is indeed a lot more succinct! The reason I used _loggerFor is that
> it creates a logger for any instance it receives. That way, it can
> set the namespace automatically when instantiated inside any method of
> a class - the constructor, for example. I just do not remember why
> creating a separate logger for each instance instead of sharing the
> class'. Would there be a reason for that?

None that I can think of.

> But I do think that if you would like to log something but not keep
> the instance around, _loggerFor may be useful, as Logger would only
> set the namespace based on the module when called from a method.
> 
>> Absolutely!  Super glad you brought this up. This was a major part of the design of the new logging system, both to do this, and to also do as little work as possible with messages that were ultimately caught by such filters.
>> 
>> Here's a quick example program demonstrating the combination of https://twistedmatrix.com/documents/17.9.0/api/twisted.logger.LogLevelFilterPredicate.html <https://twistedmatrix.com/documents/17.9.0/api/twisted.logger.LogLevelFilterPredicate.html> and https://twistedmatrix.com/documents/17.9.0/api/twisted.logger.FilteringLogObserver.html <https://twistedmatrix.com/documents/17.9.0/api/twisted.logger.FilteringLogObserver.html>.
> 
> Thanks for the example! Unfortunately I think that is different from
> what I tried to describe. Here is an example:
> 
>    class ThirdPartyClass:
>        a_log = Logger()
> 
>        def method_a(self):
>            self.a_log.info('Log I want to supress')
> 
>            self.a_log.warn('Log I do not want to supress')
> 
>    class MyClass(ThirdPartyClass):
>        b_log = Logger()
> 
>        def method_b(self):
>            self.method_a()
> 
>            self.b_log.info('Log I do not want to supress')
> 
> 
>    MyClass().method_b()
> 
> Considering that the class definitions would be in separate files,
> they would still have the same namespaces. This would be a case where
> the libraries you are using are a bit noisy and you would just want to
> display warnings+.

Oh, ugh. This is a bug that should be fixed.  a_log really ought to have its namespace set to ThirdPartyClass's namespace, not MyClass.

> I believe that as there is a reference to a_log, it would be possible
> to change the namespace, but if the third party class used
> _loggerFor().info() instead, then that would not be possible, right?

With the example here, it's at least possible to fix the bug, since the logger can identify where in the MRO it lives.  With _loggerFor, it would not be possible.

> This actually happens with Factory.doStart() [0] once that is
> subclassed, you cannot differ its  namespace from your class'.

Yeah, let's fix taht.

> These would be situations where very few people would come across or
> maybe I still have to learn more about the logging system, but I
> thought it would be worth to be discussed.

They absolutely should be discussed!  These types of issues are very important when doing log analysis, which is often a long time after the code is written to emit the messages.

> Thanks,
> -Felipe
> 
> [0]: https://github.com/twisted/twisted/blob/trunk/src/twisted/internet/protocol.py#L75
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From ilyaskriblovsky at gmail.com  Wed Jan 17 14:09:21 2018
From: ilyaskriblovsky at gmail.com (Ilya Skriblovsky)
Date: Wed, 17 Jan 2018 21:09:21 +0000
Subject: [Twisted-Python] Circular references in TLSMemoryBIOProtocol
Message-ID: <CAOG7vkw5GSRcz=SPQMoiF+sFy3e-WsW2f3n7nwH0mGMtgTzudA@mail.gmail.com>

Hello,

I have the Twisted app that serves tons of short-lived TLS connections
using TLSMemoryBIOFactory. I usually set loosened garbage collector
thresholds in production environment for the sake of performance. But I've
noticed that this app's RAM usage quickly grows up to unreasonable values.
Digging into the issue using pdb and objgraph showed that protocol
instances are still living long after they were closed.

I found two circular dependencies which are created for each TLS connection:
1. Between twisted.protocols.policies.ProtocolWrapper and its
self.wrappedProtocol
2. Between twisted.protocols.tls.TLSMemoryBIOProtocol and its
self._tlsConnection

Both of them cause protocol instance to not be deleted when the connection
is closed. So all OpenSSL-related objects and all business-related data
attached to that protocol instance are still living untill the next GC
collection. This affects both RAM usage and performance (due to much more
often GC collections)

I've tried to fix both circular dependencies:

replaced
https://github.com/twisted/twisted/blob/trunk/src/twisted/protocols/policies.py#L75
 by
self.wrappedProtocol.makeConnection(weakref.proxy(self))
and replaced
https://github.com/twisted/twisted/blob/trunk/src/twisted/protocols/tls.py#L199
 by:
self._tlsConnection = self.factory._createConnection(weakref.proxy(self))

Memory usage pattern changed drastically after this change.

I've created demo script that makes 10k TLS loopback connections with GC
disabled and measures the number of objects are still living after the work
is done and total resident RAM consumption:
https://gist.github.com/IlyaSkriblovsky/4dd3abfd5f67c64b13f1c673f56466f9

Output without the fix:
    N = 10000 , K = 100
    objects before 50136
    DummyServerProtocols still living 10000
    objects after 439919
    mem 778 mb

Output with the fix:
    N = 10000 , K = 100
    objects before 50133
    DummyServerProtocols still living 0
    objects after 159919
    mem 96 mb

So using weakrefs makes all protocol instances and instances of
TLSMemoryBIOProtocol to be deleted right after a connection is closed. Less
circular-dependent objects → less GC invocations → better performance. And
I see much nicer RAM usage pattern in my app.

Is it possible to fix circular deps in some more clean way? Can this be
solved at all while user's code is able to try to touch both sides of
circular dep after connection is closed? Please advice

Thanks for consideration

Best regards,
    Ilya
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180117/65d42580/attachment.html>

From ldanielburr at me.com  Wed Jan 17 14:30:09 2018
From: ldanielburr at me.com (L. Daniel Burr)
Date: Wed, 17 Jan 2018 15:30:09 -0600
Subject: [Twisted-Python] Circular references in TLSMemoryBIOProtocol
In-Reply-To: <CAOG7vkw5GSRcz=SPQMoiF+sFy3e-WsW2f3n7nwH0mGMtgTzudA@mail.gmail.com>
References: <CAOG7vkw5GSRcz=SPQMoiF+sFy3e-WsW2f3n7nwH0mGMtgTzudA@mail.gmail.com>
Message-ID: <etPan.5a5fc061.7b6a224a.73ae@me.com>

Hi Ilya,

On January 17, 2018 at 3:09:52 PM, Ilya Skriblovsky (ilyaskriblovsky at gmail.com) wrote:

[Trimmed for context]

So using weakrefs makes all protocol instances and instances of TLSMemoryBIOProtocol to be deleted right after a connection is closed. Less circular-dependent objects → less GC invocations → better performance. And I see much nicer RAM usage pattern in my app.

Is it possible to fix circular deps in some more clean way? Can this be solved at all while user's code is able to try to touch both sides of circular dep after connection is closed? Please advice


Personally, I don’t mind the weaker approach, but if you wanted to be completely explicit, I’d look at modifying the connectionLost method of both the protocol and the protocol wrapper to break circular references.

Thanks for consideration

Best regards,
    Ilya

Hope this helps,

Daniel
--
L. Daniel Burr
ldanielburr at me.com
(312) 656-8387


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180117/d4453f1e/attachment.html>

From glyph at twistedmatrix.com  Thu Jan 18 00:10:15 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 17 Jan 2018 23:10:15 -0800
Subject: [Twisted-Python] Circular references in TLSMemoryBIOProtocol
In-Reply-To: <CAOG7vkw5GSRcz=SPQMoiF+sFy3e-WsW2f3n7nwH0mGMtgTzudA@mail.gmail.com>
References: <CAOG7vkw5GSRcz=SPQMoiF+sFy3e-WsW2f3n7nwH0mGMtgTzudA@mail.gmail.com>
Message-ID: <2801916D-83AC-47FC-B5E4-ED4BC8CD0330@twistedmatrix.com>



> On Jan 17, 2018, at 1:09 PM, Ilya Skriblovsky <ilyaskriblovsky at gmail.com> wrote:
> 
> Hello,
> 
> I have the Twisted app that serves tons of short-lived TLS connections using TLSMemoryBIOFactory. I usually set loosened garbage collector thresholds in production environment for the sake of performance. But I've noticed that this app's RAM usage quickly grows up to unreasonable values. Digging into the issue using pdb and objgraph showed that protocol instances are still living long after they were closed.

This sounds like an issue that should be reported as a bug and fixed!

It would be great if you could come up with a performance regression test or benchmark which could validate that this doesn't regress, but, it's quite challenging to do this (especially for memory issues) so as long as it's adequately behaviorally tested I'm sure we could accept something.

> I found two circular dependencies which are created for each TLS connection:
> 1. Between twisted.protocols.policies.ProtocolWrapper and its self.wrappedProtocol
> 2. Between twisted.protocols.tls.TLSMemoryBIOProtocol and its self._tlsConnection
> 
> Both of them cause protocol instance to not be deleted when the connection is closed. So all OpenSSL-related objects and all business-related data attached to that protocol instance are still living untill the next GC collection. This affects both RAM usage and performance (due to much more often GC collections)
> 
> I've tried to fix both circular dependencies:
> 
> replaced https://github.com/twisted/twisted/blob/trunk/src/twisted/protocols/policies.py#L75 <https://github.com/twisted/twisted/blob/trunk/src/twisted/protocols/policies.py#L75> by
> self.wrappedProtocol.makeConnection(weakref.proxy(self))
> and replaced https://github.com/twisted/twisted/blob/trunk/src/twisted/protocols/tls.py#L199 <https://github.com/twisted/twisted/blob/trunk/src/twisted/protocols/tls.py#L199> by:
> self._tlsConnection = self.factory._createConnection(weakref.proxy(self))
> 
> Memory usage pattern changed drastically after this change.
> 
> I've created demo script that makes 10k TLS loopback connections with GC disabled and measures the number of objects are still living after the work is done and total resident RAM consumption:
> https://gist.github.com/IlyaSkriblovsky/4dd3abfd5f67c64b13f1c673f56466f9 <https://gist.github.com/IlyaSkriblovsky/4dd3abfd5f67c64b13f1c673f56466f9>
> 
> Output without the fix:
>     N = 10000 , K = 100
>     objects before 50136
>     DummyServerProtocols still living 10000
>     objects after 439919
>     mem 778 mb
> 
> Output with the fix:
>     N = 10000 , K = 100
>     objects before 50133
>     DummyServerProtocols still living 0
>     objects after 159919
>     mem 96 mb
> 
> So using weakrefs makes all protocol instances and instances of TLSMemoryBIOProtocol to be deleted right after a connection is closed. Less circular-dependent objects → less GC invocations → better performance. And I see much nicer RAM usage pattern in my app.

Hooray!

> Is it possible to fix circular deps in some more clean way? Can this be solved at all while user's code is able to try to touch both sides of circular dep after connection is closed? Please advice

Protocols and transports have a fairly defined lifecycle, and as L. Daniel Burr already pointed out, it would probably be appropriate to explicitly break these reference cycles in connectionLost.

-g

> 
> Thanks for consideration
> 
> Best regards,
>     Ilya
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180117/81738113/attachment-0001.html>

From ilyaskriblovsky at gmail.com  Fri Jan 19 12:52:36 2018
From: ilyaskriblovsky at gmail.com (Ilya Skriblovsky)
Date: Fri, 19 Jan 2018 19:52:36 +0000
Subject: [Twisted-Python] Circular references in TLSMemoryBIOProtocol
In-Reply-To: <CAOG7vkw5GSRcz=SPQMoiF+sFy3e-WsW2f3n7nwH0mGMtgTzudA@mail.gmail.com>
References: <CAOG7vkw5GSRcz=SPQMoiF+sFy3e-WsW2f3n7nwH0mGMtgTzudA@mail.gmail.com>
Message-ID: <CAOG7vkyoPvvppR-6MivPhD86vnW9QYsAshBw2G4-E38uN9eZWA@mail.gmail.com>

> Protocols and transports have a fairly defined lifecycle, and as L.
Daniel Burr already pointed out, it would probably be appropriate to
explicitly break these reference cycles in connectionLost.

Explicitly breaking cycle in ProtocolWrapper.connectionLost by any of:
• self.wrappedProtocol = None
• self.wrappedProtocol.transport = None
• self.wrappedProtocol = weakref.proxy(self.wrappedProtocol)
• self.wrappedProtocol.transport = weakref.proxy(self)

... breaks some existing tests :(

Seems like these tests do some post-run checks against protocol instances
and their transports. Not sure whether it is relevant to real-life usage.
Will investigate more...

- Ilya

чт, 18 янв. 2018 г. в 0:09, Ilya Skriblovsky <ilyaskriblovsky at gmail.com>:

> Hello,
>
> I have the Twisted app that serves tons of short-lived TLS connections
> using TLSMemoryBIOFactory. I usually set loosened garbage collector
> thresholds in production environment for the sake of performance. But I've
> noticed that this app's RAM usage quickly grows up to unreasonable values.
> Digging into the issue using pdb and objgraph showed that protocol
> instances are still living long after they were closed.
>
> I found two circular dependencies which are created for each TLS
> connection:
> 1. Between twisted.protocols.policies.ProtocolWrapper and its
> self.wrappedProtocol
> 2. Between twisted.protocols.tls.TLSMemoryBIOProtocol and its
> self._tlsConnection
>
> Both of them cause protocol instance to not be deleted when the connection
> is closed. So all OpenSSL-related objects and all business-related data
> attached to that protocol instance are still living untill the next GC
> collection. This affects both RAM usage and performance (due to much more
> often GC collections)
>
> I've tried to fix both circular dependencies:
>
> replaced
> https://github.com/twisted/twisted/blob/trunk/src/twisted/protocols/policies.py#L75
>  by
> self.wrappedProtocol.makeConnection(weakref.proxy(self))
> and replaced
> https://github.com/twisted/twisted/blob/trunk/src/twisted/protocols/tls.py#L199
>  by:
> self._tlsConnection = self.factory._createConnection(weakref.proxy(self))
>
> Memory usage pattern changed drastically after this change.
>
> I've created demo script that makes 10k TLS loopback connections with GC
> disabled and measures the number of objects are still living after the work
> is done and total resident RAM consumption:
> https://gist.github.com/IlyaSkriblovsky/4dd3abfd5f67c64b13f1c673f56466f9
>
> Output without the fix:
>     N = 10000 , K = 100
>     objects before 50136
>     DummyServerProtocols still living 10000
>     objects after 439919
>     mem 778 mb
>
> Output with the fix:
>     N = 10000 , K = 100
>     objects before 50133
>     DummyServerProtocols still living 0
>     objects after 159919
>     mem 96 mb
>
> So using weakrefs makes all protocol instances and instances of
> TLSMemoryBIOProtocol to be deleted right after a connection is closed. Less
> circular-dependent objects → less GC invocations → better performance. And
> I see much nicer RAM usage pattern in my app.
>
> Is it possible to fix circular deps in some more clean way? Can this be
> solved at all while user's code is able to try to touch both sides of
> circular dep after connection is closed? Please advice
>
> Thanks for consideration
>
> Best regards,
>     Ilya
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180119/6d121a49/attachment.html>

From glyph at twistedmatrix.com  Fri Jan 19 23:07:04 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 19 Jan 2018 22:07:04 -0800
Subject: [Twisted-Python] Circular references in TLSMemoryBIOProtocol
In-Reply-To: <CAOG7vkyoPvvppR-6MivPhD86vnW9QYsAshBw2G4-E38uN9eZWA@mail.gmail.com>
References: <CAOG7vkw5GSRcz=SPQMoiF+sFy3e-WsW2f3n7nwH0mGMtgTzudA@mail.gmail.com>
 <CAOG7vkyoPvvppR-6MivPhD86vnW9QYsAshBw2G4-E38uN9eZWA@mail.gmail.com>
Message-ID: <B6CD6518-1407-449E-B347-C0FF54E77381@twistedmatrix.com>



> On Jan 19, 2018, at 11:52 AM, Ilya Skriblovsky <ilyaskriblovsky at gmail.com> wrote:
> 
> > Protocols and transports have a fairly defined lifecycle, and as L. Daniel Burr already pointed out, it would probably be appropriate to explicitly break these reference cycles in connectionLost.
> 
> Explicitly breaking cycle in ProtocolWrapper.connectionLost by any of:
> • self.wrappedProtocol = None
> • self.wrappedProtocol.transport = None
> • self.wrappedProtocol = weakref.proxy(self.wrappedProtocol)
> • self.wrappedProtocol.transport = weakref.proxy(self)
> 
> ... breaks some existing tests :(
> 
> Seems like these tests do some post-run checks against protocol instances and their transports. Not sure whether it is relevant to real-life usage.
> Will investigate more...
> 
> - Ilya

Do these tests fail if you only do it in TLSMemoryBIOProtocol instead of WrapperProtocol?

If so, this may be worth a compatibility exception.

-g


From ilyaskriblovsky at gmail.com  Sat Jan 20 10:32:10 2018
From: ilyaskriblovsky at gmail.com (Ilya Skriblovsky)
Date: Sat, 20 Jan 2018 17:32:10 +0000
Subject: [Twisted-Python] Circular references in TLSMemoryBIOProtocol
In-Reply-To: <B6CD6518-1407-449E-B347-C0FF54E77381@twistedmatrix.com>
References: <CAOG7vkw5GSRcz=SPQMoiF+sFy3e-WsW2f3n7nwH0mGMtgTzudA@mail.gmail.com>
 <CAOG7vkyoPvvppR-6MivPhD86vnW9QYsAshBw2G4-E38uN9eZWA@mail.gmail.com>
 <B6CD6518-1407-449E-B347-C0FF54E77381@twistedmatrix.com>
Message-ID: <CAOG7vkx+mApGk0dsd1vn8SXGSDZrqaWtA=4kqih901-XZ2ru+g@mail.gmail.com>

Yes, doing it only for TLSMemoryBIOProtocol fails test too :(

SSL-related seem to be touching both ends of this reference cycle after
connectionLost:

1. twisted/test/test_sslverify.py:2102
self.assertEqual(sProto.wrappedProtocol.data, b'')
This one touches `wrappedProtocol`

2. twisted/test/proto_helpers.py:924 (waitUntilAllDisconnected, used by
twisted.web.test.test_webclient.WebClientSSLTests, for example)
if not True in [x.transport is not None and x.transport.connected for x in
protocols]:
and this one touches `transport` field

There are other examples as well.

Sure, these test failures can probably be fixed by changing tests
themselves, for example by making them to hold their own references to both
wrapping and wrapped protocols. But I'm not sure this wouldn't break any
user's code too... For my app it was easily fixed by breaking cycle in my
protocol's connectionLost. But I'm not experienced enough in Twisted
internals to be sure doing it inside TLSMemoryBIOProtocol wouldn't break
any real-world usage scenarios.

- Ilya

сб, 20 янв. 2018 г. в 9:10, Glyph <glyph at twistedmatrix.com>:

>
>
> > On Jan 19, 2018, at 11:52 AM, Ilya Skriblovsky <
> ilyaskriblovsky at gmail.com> wrote:
> >
> > > Protocols and transports have a fairly defined lifecycle, and as L.
> Daniel Burr already pointed out, it would probably be appropriate to
> explicitly break these reference cycles in connectionLost.
> >
> > Explicitly breaking cycle in ProtocolWrapper.connectionLost by any of:
> > • self.wrappedProtocol = None
> > • self.wrappedProtocol.transport = None
> > • self.wrappedProtocol = weakref.proxy(self.wrappedProtocol)
> > • self.wrappedProtocol.transport = weakref.proxy(self)
> >
> > ... breaks some existing tests :(
> >
> > Seems like these tests do some post-run checks against protocol
> instances and their transports. Not sure whether it is relevant to
> real-life usage.
> > Will investigate more...
> >
> > - Ilya
>
> Do these tests fail if you only do it in TLSMemoryBIOProtocol instead of
> WrapperProtocol?
>
> If so, this may be worth a compatibility exception.
>
> -g
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180120/c0bb261b/attachment.html>

From trac at twistedmatrix.com  Sun Jan 21 00:05:22 2018
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 21 Jan 2018 07:05:22 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1516518322.68.255998477225995115@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180121/df7a2d8d/attachment.html>

From glyph at twistedmatrix.com  Sun Jan 21 02:50:23 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 21 Jan 2018 01:50:23 -0800
Subject: [Twisted-Python] Circular references in TLSMemoryBIOProtocol
In-Reply-To: <CAOG7vkx+mApGk0dsd1vn8SXGSDZrqaWtA=4kqih901-XZ2ru+g@mail.gmail.com>
References: <CAOG7vkw5GSRcz=SPQMoiF+sFy3e-WsW2f3n7nwH0mGMtgTzudA@mail.gmail.com>
 <CAOG7vkyoPvvppR-6MivPhD86vnW9QYsAshBw2G4-E38uN9eZWA@mail.gmail.com>
 <B6CD6518-1407-449E-B347-C0FF54E77381@twistedmatrix.com>
 <CAOG7vkx+mApGk0dsd1vn8SXGSDZrqaWtA=4kqih901-XZ2ru+g@mail.gmail.com>
Message-ID: <5C0AD3B3-C328-4057-B268-B01A7D811784@twistedmatrix.com>

On Jan 20, 2018, at 9:32 AM, Ilya Skriblovsky <ilyaskriblovsky at gmail.com> wrote:
> 
> Yes, doing it only for TLSMemoryBIOProtocol fails test too :(
> 
> SSL-related seem to be touching both ends of this reference cycle after connectionLost:
> 
> 1. twisted/test/test_sslverify.py:2102
> self.assertEqual(sProto.wrappedProtocol.data, b'')
> This one touches `wrappedProtocol`
> 
> 2. twisted/test/proto_helpers.py:924 (waitUntilAllDisconnected, used by twisted.web.test.test_webclient.WebClientSSLTests, for example)
> if not True in [x.transport is not None and x.transport.connected for x in protocols]:
> and this one touches `transport` field
> 
> There are other examples as well.
> 
> Sure, these test failures can probably be fixed by changing tests themselves, for example by making them to hold their own references to both wrapping and wrapped protocols. But I'm not sure this wouldn't break any user's code too... For my app it was easily fixed by breaking cycle in my protocol's connectionLost. But I'm not experienced enough in Twisted internals to be sure doing it inside TLSMemoryBIOProtocol wouldn't break any real-world usage scenarios.

I think that this is worth trying, at least.  If you could write a PR that fixes the tests, you might want to try following the exception process documented in https://twistedmatrix.com/documents/current/core/development/policy/compatibility-policy.html#procedure-for-exceptions-to-this-policy <https://twistedmatrix.com/documents/current/core/development/policy/compatibility-policy.html#procedure-for-exceptions-to-this-policy> and see if anyone has any code that might break.

I'm pretty sure that the direction to break the cycle in is to break the reference to .wrappedProtocol, and not to mess with .wrappedProtocol.transport (which is not really something that should be touched from the outside of the wrapped protocol).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180121/56648f42/attachment.html>

From ilyaskriblovsky at gmail.com  Sat Jan 27 13:33:36 2018
From: ilyaskriblovsky at gmail.com (Ilya Skriblovsky)
Date: Sat, 27 Jan 2018 20:33:36 +0000
Subject: [Twisted-Python] Circular references in TLSMemoryBIOProtocol
In-Reply-To: <5C0AD3B3-C328-4057-B268-B01A7D811784@twistedmatrix.com>
References: <CAOG7vkw5GSRcz=SPQMoiF+sFy3e-WsW2f3n7nwH0mGMtgTzudA@mail.gmail.com>
 <CAOG7vkyoPvvppR-6MivPhD86vnW9QYsAshBw2G4-E38uN9eZWA@mail.gmail.com>
 <B6CD6518-1407-449E-B347-C0FF54E77381@twistedmatrix.com>
 <CAOG7vkx+mApGk0dsd1vn8SXGSDZrqaWtA=4kqih901-XZ2ru+g@mail.gmail.com>
 <5C0AD3B3-C328-4057-B268-B01A7D811784@twistedmatrix.com>
Message-ID: <CAOG7vkxSj++9WPM0Ukb-siM8ZaQPAEP0otpB0eFsNqK0HCXB=g@mail.gmail.com>

I've created the pull request with breaking cycles in connectionLost,
please consider: https://github.com/twisted/twisted/pull/955

This change seems to fit well to the reasoning of Compatibility Exception
process. Should I create new thread in the mailing list with "INCOMPATIBLE
CHANGE" in a subject?

вс, 21 янв. 2018 г. в 12:51, Glyph <glyph at twistedmatrix.com>:

> On Jan 20, 2018, at 9:32 AM, Ilya Skriblovsky <ilyaskriblovsky at gmail.com>
> wrote:
>
>
> Yes, doing it only for TLSMemoryBIOProtocol fails test too :(
>
> SSL-related seem to be touching both ends of this reference cycle after
> connectionLost:
>
> 1. twisted/test/test_sslverify.py:2102
> self.assertEqual(sProto.wrappedProtocol.data, b'')
> This one touches `wrappedProtocol`
>
> 2. twisted/test/proto_helpers.py:924 (waitUntilAllDisconnected, used by
> twisted.web.test.test_webclient.WebClientSSLTests, for example)
> if not True in [x.transport is not None and x.transport.connected for x in
> protocols]:
> and this one touches `transport` field
>
> There are other examples as well.
>
> Sure, these test failures can probably be fixed by changing tests
> themselves, for example by making them to hold their own references to both
> wrapping and wrapped protocols. But I'm not sure this wouldn't break any
> user's code too... For my app it was easily fixed by breaking cycle in my
> protocol's connectionLost. But I'm not experienced enough in Twisted
> internals to be sure doing it inside TLSMemoryBIOProtocol wouldn't break
> any real-world usage scenarios.
>
>
> I think that this is worth trying, at least.  If you could write a PR that
> fixes the tests, you might want to try following the exception process
> documented in
> https://twistedmatrix.com/documents/current/core/development/policy/compatibility-policy.html#procedure-for-exceptions-to-this-policy and
> see if anyone has any code that might break.
>
> I'm pretty sure that the direction to break the cycle in is to break the
> reference to .wrappedProtocol, and not to mess with
> .wrappedProtocol.transport (which is not really something that should be
> touched from the outside of the wrapped protocol).
>
> -glyph
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180127/d2e018d4/attachment.html>

From glyph at twistedmatrix.com  Sat Jan 27 23:34:19 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 27 Jan 2018 22:34:19 -0800
Subject: [Twisted-Python] Circular references in TLSMemoryBIOProtocol
In-Reply-To: <CAOG7vkxSj++9WPM0Ukb-siM8ZaQPAEP0otpB0eFsNqK0HCXB=g@mail.gmail.com>
References: <CAOG7vkw5GSRcz=SPQMoiF+sFy3e-WsW2f3n7nwH0mGMtgTzudA@mail.gmail.com>
 <CAOG7vkyoPvvppR-6MivPhD86vnW9QYsAshBw2G4-E38uN9eZWA@mail.gmail.com>
 <B6CD6518-1407-449E-B347-C0FF54E77381@twistedmatrix.com>
 <CAOG7vkx+mApGk0dsd1vn8SXGSDZrqaWtA=4kqih901-XZ2ru+g@mail.gmail.com>
 <5C0AD3B3-C328-4057-B268-B01A7D811784@twistedmatrix.com>
 <CAOG7vkxSj++9WPM0Ukb-siM8ZaQPAEP0otpB0eFsNqK0HCXB=g@mail.gmail.com>
Message-ID: <3F914B30-7F46-4753-9789-C32F19BF891D@twistedmatrix.com>



> On Jan 27, 2018, at 12:33 PM, Ilya Skriblovsky <ilyaskriblovsky at gmail.com> wrote:
> 
> I've created the pull request with breaking cycles in connectionLost, please consider: https://github.com/twisted/twisted/pull/955 <https://github.com/twisted/twisted/pull/955>
> 
> This change seems to fit well to the reasoning of Compatibility Exception process. Should I create new thread in the mailing list with "INCOMPATIBLE CHANGE" in a subject?

Right after putting the ticket into review, yes :-)

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180127/a2359c9b/attachment.html>

From trac at twistedmatrix.com  Sun Jan 28 00:05:23 2018
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 28 Jan 2018 07:05:23 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1517123123.8.7457015315535193758@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180128/c158ea34/attachment.html>

From ilyaskriblovsky at gmail.com  Mon Jan 29 06:52:02 2018
From: ilyaskriblovsky at gmail.com (Ilya Skriblovsky)
Date: Mon, 29 Jan 2018 13:52:02 +0000
Subject: [Twisted-Python] Circular references in TLSMemoryBIOProtocol
In-Reply-To: <3F914B30-7F46-4753-9789-C32F19BF891D@twistedmatrix.com>
References: <CAOG7vkw5GSRcz=SPQMoiF+sFy3e-WsW2f3n7nwH0mGMtgTzudA@mail.gmail.com>
 <CAOG7vkyoPvvppR-6MivPhD86vnW9QYsAshBw2G4-E38uN9eZWA@mail.gmail.com>
 <B6CD6518-1407-449E-B347-C0FF54E77381@twistedmatrix.com>
 <CAOG7vkx+mApGk0dsd1vn8SXGSDZrqaWtA=4kqih901-XZ2ru+g@mail.gmail.com>
 <5C0AD3B3-C328-4057-B268-B01A7D811784@twistedmatrix.com>
 <CAOG7vkxSj++9WPM0Ukb-siM8ZaQPAEP0otpB0eFsNqK0HCXB=g@mail.gmail.com>
 <3F914B30-7F46-4753-9789-C32F19BF891D@twistedmatrix.com>
Message-ID: <CAOG7vkyDLtjGJpm3UH3T2xxfwSFJepqByZ4+HSkbv9Ug4=vRDg@mail.gmail.com>

So, no action is required from me right now?
Sorry, that's a first time I'm trying to contribute to Twisted itself :)

вс, 28 янв. 2018 г. в 9:37, Glyph <glyph at twistedmatrix.com>:

>
>
> On Jan 27, 2018, at 12:33 PM, Ilya Skriblovsky <ilyaskriblovsky at gmail.com>
> wrote:
>
> I've created the pull request with breaking cycles in connectionLost,
> please consider: https://github.com/twisted/twisted/pull/955
>
> This change seems to fit well to the reasoning of Compatibility Exception
> process. Should I create new thread in the mailing list with "INCOMPATIBLE
> CHANGE" in a subject?
>
>
> Right after putting the ticket into review, yes :-)
>
> -g
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180129/8728f090/attachment.html>

From ilyaskriblovsky at gmail.com  Mon Jan 29 13:27:50 2018
From: ilyaskriblovsky at gmail.com (Ilya Skriblovsky)
Date: Mon, 29 Jan 2018 20:27:50 +0000
Subject: [Twisted-Python] Circular references in TLSMemoryBIOProtocol
In-Reply-To: <CAOG7vkyDLtjGJpm3UH3T2xxfwSFJepqByZ4+HSkbv9Ug4=vRDg@mail.gmail.com>
References: <CAOG7vkw5GSRcz=SPQMoiF+sFy3e-WsW2f3n7nwH0mGMtgTzudA@mail.gmail.com>
 <CAOG7vkyoPvvppR-6MivPhD86vnW9QYsAshBw2G4-E38uN9eZWA@mail.gmail.com>
 <B6CD6518-1407-449E-B347-C0FF54E77381@twistedmatrix.com>
 <CAOG7vkx+mApGk0dsd1vn8SXGSDZrqaWtA=4kqih901-XZ2ru+g@mail.gmail.com>
 <5C0AD3B3-C328-4057-B268-B01A7D811784@twistedmatrix.com>
 <CAOG7vkxSj++9WPM0Ukb-siM8ZaQPAEP0otpB0eFsNqK0HCXB=g@mail.gmail.com>
 <3F914B30-7F46-4753-9789-C32F19BF891D@twistedmatrix.com>
 <CAOG7vkyDLtjGJpm3UH3T2xxfwSFJepqByZ4+HSkbv9Ug4=vRDg@mail.gmail.com>
Message-ID: <CAOG7vky7Lh3VLqPM0fOKktU9ua3_Wukx7k-Og_URZEqodBKuUw@mail.gmail.com>

Never mind, I realized I didn't some steps 10+ from The Manual
http://twistedmatrix.com/trac/wiki/TwistedDevelopment#SubmittingaPatch
Will fix that

пн, 29 янв. 2018 г., 16:52 Ilya Skriblovsky <ilyaskriblovsky at gmail.com>:

> So, no action is required from me right now?
> Sorry, that's a first time I'm trying to contribute to Twisted itself :)
>
> вс, 28 янв. 2018 г. в 9:37, Glyph <glyph at twistedmatrix.com>:
>
>>
>>
>> On Jan 27, 2018, at 12:33 PM, Ilya Skriblovsky <ilyaskriblovsky at gmail.com>
>> wrote:
>>
>> I've created the pull request with breaking cycles in connectionLost,
>> please consider: https://github.com/twisted/twisted/pull/955
>>
>> This change seems to fit well to the reasoning of Compatibility Exception
>> process. Should I create new thread in the mailing list with "INCOMPATIBLE
>> CHANGE" in a subject?
>>
>>
>> Right after putting the ticket into review, yes :-)
>>
>> -g
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180129/4dfad8f7/attachment.html>

From glyph at twistedmatrix.com  Mon Jan 29 20:27:42 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 29 Jan 2018 19:27:42 -0800
Subject: [Twisted-Python] Circular references in TLSMemoryBIOProtocol
In-Reply-To: <CAOG7vky7Lh3VLqPM0fOKktU9ua3_Wukx7k-Og_URZEqodBKuUw@mail.gmail.com>
References: <CAOG7vkw5GSRcz=SPQMoiF+sFy3e-WsW2f3n7nwH0mGMtgTzudA@mail.gmail.com>
 <CAOG7vkyoPvvppR-6MivPhD86vnW9QYsAshBw2G4-E38uN9eZWA@mail.gmail.com>
 <B6CD6518-1407-449E-B347-C0FF54E77381@twistedmatrix.com>
 <CAOG7vkx+mApGk0dsd1vn8SXGSDZrqaWtA=4kqih901-XZ2ru+g@mail.gmail.com>
 <5C0AD3B3-C328-4057-B268-B01A7D811784@twistedmatrix.com>
 <CAOG7vkxSj++9WPM0Ukb-siM8ZaQPAEP0otpB0eFsNqK0HCXB=g@mail.gmail.com>
 <3F914B30-7F46-4753-9789-C32F19BF891D@twistedmatrix.com>
 <CAOG7vkyDLtjGJpm3UH3T2xxfwSFJepqByZ4+HSkbv9Ug4=vRDg@mail.gmail.com>
 <CAOG7vky7Lh3VLqPM0fOKktU9ua3_Wukx7k-Og_URZEqodBKuUw@mail.gmail.com>
Message-ID: <C3E8F5B0-BAD1-4077-B15B-A96D2C361AC1@twistedmatrix.com>



> On Jan 29, 2018, at 12:27 PM, Ilya Skriblovsky <ilyaskriblovsky at gmail.com> wrote:
> 
> Never mind, I realized I didn't some steps 10+ from The Manual http://twistedmatrix.com/trac/wiki/TwistedDevelopment#SubmittingaPatch <http://twistedmatrix.com/trac/wiki/TwistedDevelopment#SubmittingaPatch>
> Will fix that
> 

No worries, the process is always a little tricky the first time :-).

Thanks for contributing!

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180129/1743c8ef/attachment.html>

From adi at roiban.ro  Wed Jan  3 04:29:55 2018
From: adi at roiban.ro (Adi Roiban)
Date: Wed, 3 Jan 2018 11:29:55 +0000
Subject: [Twisted-Python] failUnlessFailure vs assertFailure
Message-ID: <CAFycZ9cM8wm2gQ7Vn5EXmHS8rGMraGYZh=0WF1n2vSKrk3bM6w@mail.gmail.com>

Hi,

Do you know why we still have failUnlessFailure is an alias to
assertFailure? [1]

It looks like pydoctor does not include aliases as I don't see
failUnlessFailure in the HTML rendering
http://twistedmatrix.com/documents/current/api/twisted.trial.unittest.TestCase.html

Looking at the current code, I see that it is used only in a single
place in Twisted
https://github.com/twisted/twisted/search?utf8=%E2%9C%93&q=failUnlessFailure&type=

I see that in the past assertFailure was an alias for failUnlessFailure [2]

Is the plan to continue to have the alias? Maybe we can have a comment
before the alias.

Can we deprecate it?

Should pydoctor be updated to also show aliases of public methods?

Regards,

[1] https://github.com/twisted/twisted/blob/e38cc25a67747899c6984d6ebaa8d3d134799415/src/twisted/trial/_asynctest.py#L77

[2] https://github.com/twisted/twisted/commit/ce0b00de026a896b731d8794de2fd61b54a78a98
-- 
Adi Roiban



From rodrigc at crodrigues.org  Wed Jan  3 14:19:09 2018
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Wed, 3 Jan 2018 16:19:09 -0500
Subject: [Twisted-Python] failUnlessFailure vs assertFailure
In-Reply-To: <CAFycZ9cM8wm2gQ7Vn5EXmHS8rGMraGYZh=0WF1n2vSKrk3bM6w@mail.gmail.com>
References: <CAFycZ9cM8wm2gQ7Vn5EXmHS8rGMraGYZh=0WF1n2vSKrk3bM6w@mail.gmail.com>
Message-ID: <CAG=rPVcoa8PnTX+uh8LhxuRR=bMUc8aqx+c+aZxCUHstWdteRQ@mail.gmail.com>

Probably failUnlessFailure as an alias to assertFailure() was done to mimic
some of the deprecations that occurred
in the Python unittest module in Python 2.7:
https://docs.python.org/2/library/unittest.html#deprecated-aliases

It would probably be a good idea to change the usage of failUnlessFailure
in twisted to assertFailure,
and then deprecate failUnlessFailure.

--
Craig

On Wed, Jan 3, 2018 at 6:29 AM, Adi Roiban <adi at roiban.ro> wrote:

> Hi,
>
> Do you know why we still have failUnlessFailure is an alias to
> assertFailure? [1]
>
> It looks like pydoctor does not include aliases as I don't see
> failUnlessFailure in the HTML rendering
> http://twistedmatrix.com/documents/current/api/twisted.
> trial.unittest.TestCase.html
>
> Looking at the current code, I see that it is used only in a single
> place in Twisted
> https://github.com/twisted/twisted/search?utf8=%E2%9C%93&
> q=failUnlessFailure&type=
>
> I see that in the past assertFailure was an alias for failUnlessFailure [2]
>
> Is the plan to continue to have the alias? Maybe we can have a comment
> before the alias.
>
> Can we deprecate it?
>
> Should pydoctor be updated to also show aliases of public methods?
>
> Regards,
>
> [1] https://github.com/twisted/twisted/blob/e38cc25a67747899c6984d6ebaa8d3
> d134799415/src/twisted/trial/_asynctest.py#L77
>
> [2] https://github.com/twisted/twisted/commit/
> ce0b00de026a896b731d8794de2fd61b54a78a98
> --
> Adi Roiban
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180103/8071ed3e/attachment-0002.html>

From rodrigc at crodrigues.org  Wed Jan  3 14:24:03 2018
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Wed, 3 Jan 2018 16:24:03 -0500
Subject: [Twisted-Python] Drop support for Python 3.3
In-Reply-To: <CAFycZ9fekC4VV-0OSab=n=ihgdqVkZCMAj-tz7u-CL0-tmQ3uw@mail.gmail.com>
References: <CAG=rPVc2eFB2PLrscNnbf0Mg=wOs=PooK5ouWWuJqiKi9Vf6FA@mail.gmail.com>
 <CAFycZ9fekC4VV-0OSab=n=ihgdqVkZCMAj-tz7u-CL0-tmQ3uw@mail.gmail.com>
Message-ID: <CAG=rPVdTZF8WoyXX8MdxBKdjpJ1LdsNFQr5hcDQy5_RPaMW1NQ@mail.gmail.com>

On Wed, Dec 27, 2017 at 1:02 PM, Adi Roiban <adi at roiban.ro> wrote:
>
> On 18 December 2017 at 01:18, Craig Rodrigues <rodrigc at crodrigues.org>
wrote:
> > I submitted this patch to drop support for Python 3.3:
> >
> > https://github.com/twisted/twisted/pull/943
> >
> >
> > 1.  Python 3.3 was declared EOL on Sep. 29, 2017
> > 2.  In terms of major Linux distributions, Python 3.4 came with Python
3.4
> > is in Debian 8, Ubuntu 14.04, Fedora 21
> >
> > So after this patch, Twisted would run on:
> >
> > Python 2.7 and Python 3.4+
>
> +1  for removing python 3.3
>
> But as commented in the PR, I would like to see this removed after the
> next release, so that we don't have to change the release notes for
> 17.9.0
> That is 18.X.X should be the last release to support 3.4



When Python 2.6 support was dropped, the NEWS.rst was modified after the
fact in this:

http://twistedmatrix.com/trac/ticket/8651

That's why I modified NEWS.rst in this commit as well.

Since dropping a Python version happens so infrequently, I thought this was
OK to modify NEWS.rst here, since it has been done before.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180103/346f98e7/attachment-0002.html>

From rodrigc at crodrigues.org  Wed Jan  3 19:12:00 2018
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Wed, 3 Jan 2018 21:12:00 -0500
Subject: [Twisted-Python] buildbot.twistedmatrix.com is down?
Message-ID: <CAG=rPVdy-9BYmuRbCQ-c5vV4umKX14HvTEs32Nzq76g8uK-ZHA@mail.gmail.com>

Hi,

It looks like buildbot.twistedmatrix.com is down.
Does anyone know how to bring it back?

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180103/2407bb3d/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Jan  4 00:36:35 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 3 Jan 2018 23:36:35 -0800
Subject: [Twisted-Python] failUnlessFailure vs assertFailure
In-Reply-To: <CAG=rPVcoa8PnTX+uh8LhxuRR=bMUc8aqx+c+aZxCUHstWdteRQ@mail.gmail.com>
References: <CAFycZ9cM8wm2gQ7Vn5EXmHS8rGMraGYZh=0WF1n2vSKrk3bM6w@mail.gmail.com>
 <CAG=rPVcoa8PnTX+uh8LhxuRR=bMUc8aqx+c+aZxCUHstWdteRQ@mail.gmail.com>
Message-ID: <2D495469-58DD-4B0B-AA5E-00E0DE052C69@twistedmatrix.com>



> On Jan 3, 2018, at 1:19 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> Probably failUnlessFailure as an alias to assertFailure() was done to mimic some of the deprecations that occurred
> in the Python unittest module in Python 2.7: https://docs.python.org/2/library/unittest.html#deprecated-aliases <https://docs.python.org/2/library/unittest.html#deprecated-aliases>
> 
> It would probably be a good idea to change the usage of failUnlessFailure in twisted to assertFailure,
> and then deprecate failUnlessFailure.

This is a roughly accurate summary.

One minor quibble: it wasn't done to mimic "deprecations" - the failUnless aliases have been around since the very first release of PyUnit, and were in some circles considered the preferred form.  (In fact the first suggestion that one or the other should be deprecated, in 2008, is written by someone who was hoping to get rid of assert* and standardize on fail* :).)

But I agree, these aliases should be deprecated in Twisted as well.

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180103/38af7593/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Jan  4 00:58:12 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 3 Jan 2018 23:58:12 -0800
Subject: [Twisted-Python] buildbot.twistedmatrix.com is down?
In-Reply-To: <CAG=rPVdy-9BYmuRbCQ-c5vV4umKX14HvTEs32Nzq76g8uK-ZHA@mail.gmail.com>
References: <CAG=rPVdy-9BYmuRbCQ-c5vV4umKX14HvTEs32Nzq76g8uK-ZHA@mail.gmail.com>
Message-ID: <860A61CC-A50B-4D5B-B693-279CB33A80BF@twistedmatrix.com>



> On Jan 3, 2018, at 6:12 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> Hi,
> 
> It looks like buildbot.twistedmatrix.com <http://buildbot.twistedmatrix.com/> is down.
> Does anyone know how to bring it back?

I've rebooted it, applied security updates, rebooted, purged old kernels, rebooted again.  Should be running smoothly now, no idea what the issue was.

Anyone else with access to do this sort of thing should feel free, by the way, it was a bit of a fluke that I had a moment of free time to do so tonight :-).

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180103/a04d9c18/attachment-0002.html>

From sveinse at seldal.com  Thu Jan  4 12:07:35 2018
From: sveinse at seldal.com (Svein Seldal)
Date: Thu, 4 Jan 2018 20:07:35 +0100
Subject: [Twisted-Python] logObservers and syslog proposal
Message-ID: <43d17963-5fd8-16be-e76d-a84c35be9780@seldal.com>

Hi

I'm currently working on understanding the twister.logger scheme with 
the purpose of getting proper logging in my end-user application.

https://gist.github.com/sveinse/041c69b6bbdde83cf5b00fecae3dcd50

It took me a while to get my head around the difference in using
twisted.logger.globalLogBeginner.beginLoggingTo() vs using 
twisted.logger.globalLogPublisher.addObserver(). Neither of the methods 
behave precisely as I'd like them to. See 
https://gist.github.com/sveinse/041c69b6bbdde83cf5b00fecae3dcd50#file-log-py-L99

1)
What are the intended difference between these two ways of installing a 
logobserver?


2)
I'd like to contribute a SyslogObserver for the new twister.logger 
scheme. See the _syslog.py file in the gist. It has been ported from the 
old logging scheme. Would this be useful to Twisted?

I was uncertain what to do with log_failures in the observer. I see that 
dumping of log_failures has been removed from t.l.FileLogObserver(). 
What is the appropriate way to deal with log_failures?

In the proposal of SyslogObserver I addded a dumpTraceback option to the 
constructor to select if the tb should go to the syslog or not. (My 
application shall have tb to syslog.)



Best regards,
Svein



From glyph at twistedmatrix.com  Thu Jan  4 23:21:16 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 4 Jan 2018 22:21:16 -0800
Subject: [Twisted-Python] logObservers and syslog proposal
In-Reply-To: <43d17963-5fd8-16be-e76d-a84c35be9780@seldal.com>
References: <43d17963-5fd8-16be-e76d-a84c35be9780@seldal.com>
Message-ID: <F5DC9817-9154-43CA-9152-3E4CA4238FBD@twistedmatrix.com>



> On Jan 4, 2018, at 11:07 AM, Svein Seldal <sveinse at seldal.com> wrote:
> 
> Hi
> 
> I'm currently working on understanding the twister.logger scheme with the purpose of getting proper logging in my end-user application.
> 
> https://gist.github.com/sveinse/041c69b6bbdde83cf5b00fecae3dcd50
> 
> It took me a while to get my head around the difference in using
> twisted.logger.globalLogBeginner.beginLoggingTo() vs using twisted.logger.globalLogPublisher.addObserver(). Neither of the methods behave precisely as I'd like them to. See https://gist.github.com/sveinse/041c69b6bbdde83cf5b00fecae3dcd50#file-log-py-L99 <https://gist.github.com/sveinse/041c69b6bbdde83cf5b00fecae3dcd50#file-log-py-L99>

The comment here:

>> any errors in the observers will be silently ignored because the observers are no longer run through the LogPublisher()

is incorrect.  If you're seeing errors being ignored, it's a bug.  However, the specific claim that "the observers are no longer run through the LogPublisher" is definitely wrong.  See the implementation here: https://github.com/twisted/twisted/blob/8b5865cda742b7d727f97cdec4b9e83974d57c94/src/twisted/logger/_global.py#L142 <https://github.com/twisted/twisted/blob/8b5865cda742b7d727f97cdec4b9e83974d57c94/src/twisted/logger/_global.py#L142>

Note in that implementation that the `self._publisher` being replayed to is precisely the LogPublisher, with all the new observers added to it.  Errors should be handled as normal.

Perhaps this is not happening in the correct order with the LoggingFile replacements for stdin/stdout/stderr, and should be taking place later?

> 1)
> What are the intended difference between these two ways of installing a logobserver?

beginLoggingTo is meant to be the thing that you do at program start-up to take over from the boot-time buffering log observer.

addObserver is meant to be the thing that you do at any time during a program's run to add an observer for whatever other reason.

While the exact difference depends upon your application, in general, if you're setting up the "main" log observer for your process, you should probably be doing it with beginLoggingTo.

> 2)
> I'd like to contribute a SyslogObserver for the new twister.logger scheme. See the _syslog.py file in the gist. It has been ported from the old logging scheme. Would this be useful to Twisted?

Absolutely!

> I was uncertain what to do with log_failures in the observer. I see that dumping of log_failures has been removed from t.l.FileLogObserver(). What is the appropriate way to deal with log_failures?

Given that syslog is ultimately an unstructured / text-based format, you probably want to do something similar to what formatEventAsClassicLogText does here: https://github.com/twisted/twisted/blob/8b5865cda742b7d727f97cdec4b9e83974d57c94/src/twisted/logger/_format.py#L192-L198 <https://github.com/twisted/twisted/blob/8b5865cda742b7d727f97cdec4b9e83974d57c94/src/twisted/logger/_format.py#L192-L198>.

> In the proposal of SyslogObserver I addded a dumpTraceback option to the constructor to select if the tb should go to the syslog or not. (My application shall have tb to syslog.)

And, now that I look at your code, I can see that it's almost doing more or less exactly what I suggested with respect to log_failure, so, there you go, you're already doing it right :-).  I'd probably default dumpTraceback to true - you probably do want to see tracebacks, if they're happening, and syslog is your primary log observer.

Thanks for using Twisted and thanks even more for your interest in improving our log tooling!

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180104/523961fa/attachment-0002.html>

From rodrigc at crodrigues.org  Fri Jan  5 11:04:35 2018
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Fri, 5 Jan 2018 13:04:35 -0500
Subject: [Twisted-Python] buildbot.twistedmatrix.com is down?
In-Reply-To: <860A61CC-A50B-4D5B-B693-279CB33A80BF@twistedmatrix.com>
References: <CAG=rPVdy-9BYmuRbCQ-c5vV4umKX14HvTEs32Nzq76g8uK-ZHA@mail.gmail.com>
 <860A61CC-A50B-4D5B-B693-279CB33A80BF@twistedmatrix.com>
Message-ID: <CAG=rPVcqs6m-7=knDJS9kyg3RZiD5uut4rkf8bo1r-i_zwi8bw@mail.gmail.com>

Thanks for rebooting it.

The egh-osx-1 node seems to be down though:

https://buildbot.twistedmatrix.com/builders/osx10.10-py2.7

and this node is a blocking requirement for merges to take place.

--
Craig


On Thu, Jan 4, 2018 at 2:58 AM, Glyph <glyph at twistedmatrix.com> wrote:

>
>
> On Jan 3, 2018, at 6:12 PM, Craig Rodrigues <rodrigc at crodrigues.org>
> wrote:
>
> Hi,
>
> It looks like buildbot.twistedmatrix.com is down.
> Does anyone know how to bring it back?
>
>
> I've rebooted it, applied security updates, rebooted, purged old kernels,
> rebooted again.  Should be running smoothly now, no idea what the issue was.
>
> Anyone else with access to do this sort of thing should feel free, by the
> way, it was a bit of a fluke that I had a moment of free time to do so
> tonight :-).
>
> -g
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180105/5a332f62/attachment-0002.html>

From dau at riseup.net  Fri Jan  5 20:11:12 2018
From: dau at riseup.net (Felipe Dau)
Date: Sat, 6 Jan 2018 03:11:12 +0000
Subject: [Twisted-Python] stdlib logger, loggerFor and filtering events
Message-ID: <20180106031110.GA3369@host.localdomain>

As the logger has been brought up, I'd like to ask a couple things:

1) When I was working on adding logs to an application, I wanted it to
use both the `textFileLogObserver` and the `STDLibLogObserver`. As the
application could be used either with its CLI or GUI, it seemed
interesting to have both these loggers available. I was able to do
that but I wanted them to have the same format - specifically, I
wanted to use the file's format (which is awesome btw) - and had to
override some parts of the `STDLibLogObserver`. It would have made
things a lot simpler if that observer accepted a function to format
events like the `FileLogObserver`.

2) Why is `_loggerFor` "private/hidden"? That is a great factory which
imo should have more visibility - and also works great with attrs!:

     attr.ib(default=attr.Factory(_loggerFor, takes_self=True))

3) Is there a way to suppress logs from libs or any other code that
is not your own? In my case, I had to manually set which namespaces
I wanted to filter but, for example, when you subclass a third-party's
class which logs something, that will pass because now it belongs to
one of your namespaces. I know it sounds crazy but wanted to know what
other people think.

If any of these changes sound like they would be useful apart from the
specific requirements of that application, I could help implement
something based on what I wrote [0].

Thanks,
-Felipe

[0]: https://github.com/AnemoneLabs/unmessage/blob/develop/unmessage/log.py



From glyph at twistedmatrix.com  Fri Jan  5 21:35:05 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 5 Jan 2018 20:35:05 -0800
Subject: [Twisted-Python] buildbot.twistedmatrix.com is down?
In-Reply-To: <CAG=rPVcqs6m-7=knDJS9kyg3RZiD5uut4rkf8bo1r-i_zwi8bw@mail.gmail.com>
References: <CAG=rPVdy-9BYmuRbCQ-c5vV4umKX14HvTEs32Nzq76g8uK-ZHA@mail.gmail.com>
 <860A61CC-A50B-4D5B-B693-279CB33A80BF@twistedmatrix.com>
 <CAG=rPVcqs6m-7=knDJS9kyg3RZiD5uut4rkf8bo1r-i_zwi8bw@mail.gmail.com>
Message-ID: <673F0610-1175-4831-A00E-653C4A5513AC@twistedmatrix.com>



> On Jan 5, 2018, at 10:04 AM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> Thanks for rebooting it.
> 
> The egh-osx-1 node seems to be down though:
> 
> https://buildbot.twistedmatrix.com/builders/osx10.10-py2.7 <https://buildbot.twistedmatrix.com/builders/osx10.10-py2.7>
> 
> and this node is a blocking requirement for merges to take place.

Thanks for the report; rebooted and security updates applied; it appears to be processing the backlog just fine now.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180105/0ddb5ce1/attachment-0002.html>

From glyph at twistedmatrix.com  Fri Jan  5 22:00:41 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 5 Jan 2018 21:00:41 -0800
Subject: [Twisted-Python] stdlib logger, loggerFor and filtering events
In-Reply-To: <20180106031110.GA3369@host.localdomain>
References: <20180106031110.GA3369@host.localdomain>
Message-ID: <3637E91C-9EDF-48B1-AA90-F8A21F71F084@twistedmatrix.com>



> On Jan 5, 2018, at 7:11 PM, Felipe Dau <dau at riseup.net> wrote:
> 
> As the logger has been brought up, I'd like to ask a couple things:


Just for the record, you don't need to wait for it to be brought up before asking other questions ;-).

> 1) When I was working on adding logs to an application, I wanted it to
> use both the `textFileLogObserver` and the `STDLibLogObserver`. As the
> application could be used either with its CLI or GUI, it seemed
> interesting to have both these loggers available. I was able to do
> that but I wanted them to have the same format - specifically, I
> wanted to use the file's format (which is awesome btw) - and had to
> override some parts of the `STDLibLogObserver`. It would have made
> things a lot simpler if that observer accepted a function to format
> events like the `FileLogObserver`.

It might be cool to add that, but, if you don't want the standard library's log format, why are you using the standard library log observer?  And wouldn't this be a job for a https://docs.python.org/3.6/library/logging.html#logging.Formatter <https://docs.python.org/3.6/library/logging.html#logging.Formatter> object in any case; what Twisted should be doing is sending the logs on in a more structured format that works with that?

> 2) Why is `_loggerFor` "private/hidden"? That is a great factory which
> imo should have more visibility - and also works great with attrs!:
> 
>     attr.ib(default=attr.Factory(_loggerFor, takes_self=True))

I'm honestly not sure why this exists at all.  It seems like a terrible mistake has happened here, since `_loggerFor` is actually exported in __all__, which should never ever happen.

From what I can tell, it should be removed, since rather than creating that fairly noisy attr.ib() definition, you could do this:

    _log = Logger()

which is a lot more succinct, and has exactly the same effect (do `self._log.info <http://log.info/>(...)`) and there you have it.

If you could explain why it's great, then maybe we could remove the underscore and add it to the docs.

> 3) Is there a way to suppress logs from libs or any other code that
> is not your own? In my case, I had to manually set which namespaces
> I wanted to filter but, for example, when you subclass a third-party's
> class which logs something, that will pass because now it belongs to
> one of your namespaces. I know it sounds crazy but wanted to know what
> other people think.

Absolutely!  Super glad you brought this up. This was a major part of the design of the new logging system, both to do this, and to also do as little work as possible with messages that were ultimately caught by such filters.

Here's a quick example program demonstrating the combination of https://twistedmatrix.com/documents/17.9.0/api/twisted.logger.LogLevelFilterPredicate.html <https://twistedmatrix.com/documents/17.9.0/api/twisted.logger.LogLevelFilterPredicate.html> and https://twistedmatrix.com/documents/17.9.0/api/twisted.logger.FilteringLogObserver.html <https://twistedmatrix.com/documents/17.9.0/api/twisted.logger.FilteringLogObserver.html>.

import sys
from twisted.logger import (Logger, FilteringLogObserver,
                            LogLevelFilterPredicate, globalLogBeginner,
                            LogLevel, textFileLogObserver)

alog = Logger(namespace="a")
blog = Logger(namespace="b")

predicate = LogLevelFilterPredicate()
predicate.setLogLevelForNamespace("a", LogLevel.debug)
predicate.setLogLevelForNamespace("b", LogLevel.warn)

globalLogBeginner.beginLoggingTo(
    [FilteringLogObserver(textFileLogObserver(sys.stdout), [predicate])]
)

alog.info("one")
blog.info("two")
alog.critical("three")
blog.critical("four")


> If any of these changes sound like they would be useful apart from the
> specific requirements of that application, I could help implement
> something based on what I wrote [0].

We'd certainly be interested in contributions to the logging subsystem!  But I'd probably want to hear a little more about how and why you thought these things were useful first.

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180105/edaab9dc/attachment-0002.html>

From johnaherne at rocs.co.uk  Sat Jan  6 05:38:40 2018
From: johnaherne at rocs.co.uk (John Aherne)
Date: Sat, 6 Jan 2018 12:38:40 +0000
Subject: [Twisted-Python] Twisted.logger on windows max recursion depth
	exceeded
Message-ID: <CAKmUHjaq5jRMMQ2K256KKf6Qv4XfuTxpmmxkR3bhKHsjcYD5fQ@mail.gmail.com>

I've started to look at Python3 and klein

I am using python3.6.3 32bit and twisted 17.9.0 on windows10
klein is downloaded from pypi.

I got to the point of needing to do some logging and thought I now should
use the new logger system.

Below I have posted the python code I am using and the traceback for when
it crashes.

The last part is the log output for when the program works as expected.

*First Setup*

With the first setup all seems to work as expected. I can log to stdio and
to a FileLogObserver without error.

This works with or without the print statements enabled in the event
formatter (jahlog)

*Second Setup*

The second setup causes python to crash with the print statements enabled
in the event formatter.

With the for loop print enabled the system will crash.

With just printing the keys from the event dict it will produce the
recursion depth error but won't crash python.

If I comment out the print statements all seems to work correctly.

I assume I am doing something wrong or something I should not be trying to
do. But I can't work out what causes the 2 setups to behave so differently.

The traceback I have posted below shows the result when using the for loop
to print out the items in the event dict. As you can see there are a whole
lot of empty items it iterates over.

The last section below shows the log output when all is working as
expected. Here we see the expected result from iterating the event dict.
About 8 items to print.

The question is What am I doing wrong if at all. Or why is there such a
difference between the 2 setups.

Any pointers gratefully accepted.

import os
import sys
import traceback
from klein import Klein
from twisted.web import static
#from twisted.internet import reactor
from twisted.web.resource import NoResource
from twisted.internet.defer import succeed
#from twisted.python import log
from twisted.logger import Logger, formatEvent, formatTime
from twisted.logger import FileLogObserver, globalLogPublisher,
globalLogBeginner
from twisted.python.logfile import DailyLogFile
from pprint import pprint

def jahlog(event):
    #print('EVENT DIR', event.keys())
    for item in event:
        print('ITEM', event[item])

    my_tb = ''
    eventText = 'NONE'
    if 'log_failure' in event:
        print('TRACEBACVK22 failure', event['log_failure'])
        my_tb = event['log_failure']
        event['log_format'] = str(event['log_format'])
    eventText = formatEvent(event)
    time = formatTime(event["log_time"])
    my_space = event["log_namespace"]
    my_level = event["log_level"]
    my_logger = event["log_logger"] if 'log_logger' in event else 'JAHlog'
    system_log = event["log_system"] if 'log_system' in event else '-'
    eventString = "{[time]} {[namespace]} {[loglevel]} {[my_logger]}
{[system_log]}  {[text]}\r\n {[my_tb]}".format(dict(time=time),
                            dict(namespace=my_space),
                            dict(loglevel=my_level),
                            dict(my_logger=my_logger),
                            dict(system_log=system_log),
                            dict(text=eventText),
                            dict(my_tb=my_tb)
                            )

    return eventString

log = Logger(namespace="jah_test5")
globalLogPublisher.addObserver(FileLogObserver(DailyLogFile.fromFullPath('c:\\logs\\my_log9.log'),
jahlog))

#Replace the above 2 lines with the following 2 lines and all is well
#f = FileLogObserver(DailyLogFile.fromFullPath('c:\\logs\\my_log6.log'),
jahlog)
#log = Logger(observer=f, namespace="klein_test")


app = Klein()

@app.route('/')
def jah(request):
    logdata = 'some log data'

    print('DO JAH', logdata)
    log.debug('DO JAH LOGGGGG {data!r}\r\n', data=logdata)
    return b"GOT RESULT" #my_html

app.run('localhost', 9000)



Do run with following logger
log = Logger(namespace="jah_test5")
globalLogPublisher.addObserver(FileLogObserver(DailyLogFile.fromFullPath('c:\\logs\\my_log9.log'),
jahlog))

Total Inability To Support Usual Programming

PS C:\jahtest> ./klein_static_test5.py
2018-01-06 11:48:37+0000 [-] ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM
ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM
ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM
ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM
ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM
ITEM ITEM ITEM ITEM ITEM ITEM -
2018-01-06 11:48:37+0000 [-] Temporarily disabling observer
<twisted.logger._file.FileLogObserver object at 0x00000287D6E597B8> due to
exception: [Failure instance: Traceback: <class 'RecursionError'>: maximum
recursion depth exceeded
        C:\Program
Files\Python36\lib\site-packages\twisted\logger\_file.py:50:__call__
        C:\jahtest\klein_static_test5.py:18:jahlog
        C:\Program
Files\Python36\lib\site-packages\twisted\logger\_io.py:170:write
        C:\Program
Files\Python36\lib\site-packages\twisted\logger\_logger.py:135:emit
        --- <exception caught here> ---
        C:\Program
Files\Python36\lib\site-packages\twisted\logger\_observer.py:131:__call__
        C:\Program
Files\Python36\lib\site-packages\twisted\logger\_file.py:50:__call__
        C:\jahtest\klein_static_test5.py:18:jahlog
        C:\Program
Files\Python36\lib\site-packages\twisted\logger\_io.py:170:write
        C:\Program
Files\Python36\lib\site-packages\twisted\logger\_logger.py:117:emit
        C:\Program
Files\Python36\lib\site-packages\constantly\_constants.py:273:iterconstants
        ]
        Traceback (most recent call last):
          File "C:\Program
Files\Python36\lib\site-packages\twisted\logger\_file.py", line 50, in
__call__
            text = self.formatEvent(event)
          File "C:\jahtest\klein_static_test5.py", line 18, in jahlog
            print('ITEM', event[item])
          File "C:\Program
Files\Python36\lib\site-packages\twisted\logger\_io.py", line 170, in write
            self.log.emit(self.level, format=u"{log_io}", log_io=line)
          File "C:\Program
Files\Python36\lib\site-packages\twisted\logger\_logger.py", line 135, in
emit
            self.observer(event)
        --- <exception caught here> ---
          File "C:\Program
Files\Python36\lib\site-packages\twisted\logger\_observer.py", line 131, in
__call__
            observer(event)
          File "C:\Program
Files\Python36\lib\site-packages\twisted\logger\_file.py", line 50, in
__call__
            text = self.formatEvent(event)
          File "C:\jahtest\klein_static_test5.py", line 18, in jahlog
            print('ITEM', event[item])
          File "C:\Program
Files\Python36\lib\site-packages\twisted\logger\_io.py", line 170, in write
            self.log.emit(self.level, format=u"{log_io}", log_io=line)
          File "C:\Program
Files\Python36\lib\site-packages\twisted\logger\_logger.py", line 117, in
emit
            if level not in LogLevel.iterconstants():
          File "C:\Program
Files\Python36\lib\site-packages\constantly\_constants.py", line 273, in
iterconstants
            sorted(constants, key=lambda descriptor: descriptor._index))
        builtins.RecursionError: maximum recursion depth exceeded

Fatal Python error: Cannot recover from stack overflow.

Do run with following logger
f = FileLogObserver(DailyLogFile.fromFullPath('c:\\logs\\my_log6.log'),
jahlog)
log = Logger(observer=f, namespace="klein_test")

PS C:\jahtest> ^C
PS C:\jahtest> ^C
PS C:\jahtest> ./klein_static_test5.py
2018-01-06 11:54:29+0000 [-] Log opened.
2018-01-06 11:54:29+0000 [-] Site starting on 9000
2018-01-06 11:54:29+0000 [-] Starting factory <twisted.web.server.Site
object at 0x000001A886F11588>
2018-01-06 11:54:40+0000 [-] DO JAH some log data
2018-01-06 11:54:40+0000 [-] ITEM some log data
2018-01-06 11:54:40+0000 [-] ITEM <Logger 'klein_test'>
2018-01-06 11:54:40+0000 [-] ITEM <LogLevel=debug>
2018-01-06 11:54:40+0000 [-] ITEM klein_test
2018-01-06 11:54:40+0000 [-] ITEM None
2018-01-06 11:54:40+0000 [-] ITEM DO JAH LOGGGGG {data!r}
2018-01-06 11:54:40+0000 [-]
2018-01-06 11:54:40+0000 [-] ITEM 1515239680.6134038
2018-01-06 11:54:40+0000 [-] "127.0.0.1" - - [06/Jan/2018:11:54:40 +0000]
"GET / HTTP/1.1" 200 10 "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64)
AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.84 Safari/537.36"
2018-01-06 11:54:46+0000 [-] DO JAH some log data
2018-01-06 11:54:46+0000 [-] ITEM some log data
2018-01-06 11:54:46+0000 [-] ITEM <Logger 'klein_test'>
2018-01-06 11:54:46+0000 [-] ITEM <LogLevel=debug>
2018-01-06 11:54:46+0000 [-] ITEM klein_test
2018-01-06 11:54:46+0000 [-] ITEM None
2018-01-06 11:54:46+0000 [-] ITEM DO JAH LOGGGGG {data!r}
2018-01-06 11:54:46+0000 [-]
2018-01-06 11:54:46+0000 [-] ITEM 1515239686.295032
2018-01-06 11:54:46+0000 [-] "127.0.0.1" - - [06/Jan/2018:11:54:45 +0000]
"GET / HTTP/1.1" 200 10 "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64)
AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.84 Safari/537.36"



-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180106/7c03e034/attachment-0002.html>

From rodrigc at crodrigues.org  Sat Jan  6 14:40:49 2018
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Sat, 6 Jan 2018 16:40:49 -0500
Subject: [Twisted-Python] buildbot.twistedmatrix.com is down?
In-Reply-To: <673F0610-1175-4831-A00E-653C4A5513AC@twistedmatrix.com>
References: <CAG=rPVdy-9BYmuRbCQ-c5vV4umKX14HvTEs32Nzq76g8uK-ZHA@mail.gmail.com>
 <860A61CC-A50B-4D5B-B693-279CB33A80BF@twistedmatrix.com>
 <CAG=rPVcqs6m-7=knDJS9kyg3RZiD5uut4rkf8bo1r-i_zwi8bw@mail.gmail.com>
 <673F0610-1175-4831-A00E-653C4A5513AC@twistedmatrix.com>
Message-ID: <CAG=rPVeV5NoPSEENWhTeY4OX=kdKw+i+_xrcSbo0+VHLtOnANw@mail.gmail.com>

On Fri, Jan 5, 2018 at 11:35 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
>
> Thanks for the report; rebooted and security updates applied; it appears
> to be processing the backlog just fine now.
>
>
 Is http://buildbot.twistedmatrix.com/ down again?  I can't seem to access
it.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180106/00ebf270/attachment-0002.html>

From glyph at twistedmatrix.com  Sat Jan  6 14:43:11 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 6 Jan 2018 13:43:11 -0800
Subject: [Twisted-Python] buildbot.twistedmatrix.com is down?
In-Reply-To: <CAG=rPVeV5NoPSEENWhTeY4OX=kdKw+i+_xrcSbo0+VHLtOnANw@mail.gmail.com>
References: <CAG=rPVdy-9BYmuRbCQ-c5vV4umKX14HvTEs32Nzq76g8uK-ZHA@mail.gmail.com>
 <860A61CC-A50B-4D5B-B693-279CB33A80BF@twistedmatrix.com>
 <CAG=rPVcqs6m-7=knDJS9kyg3RZiD5uut4rkf8bo1r-i_zwi8bw@mail.gmail.com>
 <673F0610-1175-4831-A00E-653C4A5513AC@twistedmatrix.com>
 <CAG=rPVeV5NoPSEENWhTeY4OX=kdKw+i+_xrcSbo0+VHLtOnANw@mail.gmail.com>
Message-ID: <AE54EA52-A324-4608-AFC2-8D37C2A84C6E@twistedmatrix.com>



> On Jan 6, 2018, at 1:40 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> On Fri, Jan 5, 2018 at 11:35 PM, Glyph <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> 
> 
> Thanks for the report; rebooted and security updates applied; it appears to be processing the backlog just fine now.
> 
> 
>  Is http://buildbot.twistedmatrix.com/ <http://buildbot.twistedmatrix.com/> down again?  I can't seem to access it.

Rebooted again, and it's back.  Do you want credentials for this machine?  ISTR you're the Buildbot expert, maybe you can figure out why it's flaky :).

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180106/e9644031/attachment-0002.html>

From trac at twistedmatrix.com  Sun Jan  7 00:05:23 2018
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 07 Jan 2018 07:05:23 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1515308723.88.2003614905489079299@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180107/b8a3948c/attachment-0002.html>

From glyph at twistedmatrix.com  Sun Jan  7 00:27:54 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 6 Jan 2018 23:27:54 -0800
Subject: [Twisted-Python] Twisted.logger on windows max recursion
	depth	exceeded
In-Reply-To: <CAKmUHjaq5jRMMQ2K256KKf6Qv4XfuTxpmmxkR3bhKHsjcYD5fQ@mail.gmail.com>
References: <CAKmUHjaq5jRMMQ2K256KKf6Qv4XfuTxpmmxkR3bhKHsjcYD5fQ@mail.gmail.com>
Message-ID: <015FB76D-E0F8-4752-8106-446F463BE580@twistedmatrix.com>

Hi John,

Lots of interest in logging this week for some reason :-).

> On Jan 6, 2018, at 4:38 AM, John Aherne <johnaherne at rocs.co.uk <mailto:johnaherne at rocs.co.uk>> wrote:
> 
> If I comment out the print statements all seems to work correctly.
> 
> I assume I am doing something wrong or something I should not be trying to do. But I can't work out what causes the 2 setups to behave so differently.

The issue here is that klein.run() is initializing the (old-style) logging system; that initialization, among other things, includes replacing sys.stdout and sys.stderr with files that will emit log messages rather than write directly.

`print` debugging of log observers is therefore always somewhat risky since many ways of initializing the logging system will do this.

Perhaps the logging system should be a bit more defensive about observers emitting messages; however, for the time being, if you want to do `print` debugging of a log observer, at the top of your file do something like

from sys import stderr as DEBUG

and then everywhere you have a call to the 'print' function, use the 'file' kwarg:

print('ITEM', event[item], file=DEBUG)

I hope this is helpful,

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180106/0ba90647/attachment-0002.html>

From johnaherne at rocs.co.uk  Sun Jan  7 02:42:52 2018
From: johnaherne at rocs.co.uk (John Aherne)
Date: Sun, 7 Jan 2018 09:42:52 +0000
Subject: [Twisted-Python] Twisted.logger on windows max recursion depth
	exceeded
In-Reply-To: <015FB76D-E0F8-4752-8106-446F463BE580@twistedmatrix.com>
References: <CAKmUHjaq5jRMMQ2K256KKf6Qv4XfuTxpmmxkR3bhKHsjcYD5fQ@mail.gmail.com>
 <015FB76D-E0F8-4752-8106-446F463BE580@twistedmatrix.com>
Message-ID: <CAKmUHjaHUy6j9MvJAC+QyFwnYTeh1VWdztZV5Sudi7RDyWokPA@mail.gmail.com>

Lots of interest in logging this week for some reason :-).

Yes. Must be the weather :-).

But very helpful from my point of view as I've just started to look at it.

Well I guessed that printing inside the observer was not a good idea.

But I could not see why this one showed the problem

log = Logger(namespace="jah_test5")
globalLogPublisher.addObserver(FileLogObserver(
DailyLogFile.fromFullPath('c:\\logs\\my_log9.log'), jahlog))

But this one did not

f = FileLogObserver(DailyLogFile.fromFullPath('c:\\logs\\my_log6.log'),
jahlog)
log = Logger(observer=f, namespace="klein_test")

I was assuming they would both add an observer to globalLogObserver at some
point.

And if klein was the culprit it would have the same problem with both.

Anyway I only needed the print statements while I checked out what was
turning up in the event.

Thanks.

John


On Sun, Jan 7, 2018 at 7:27 AM, Glyph <glyph at twistedmatrix.com> wrote:

> Hi John,
>
> Lots of interest in logging this week for some reason :-).
>
> On Jan 6, 2018, at 4:38 AM, John Aherne <johnaherne at rocs.co.uk> wrote:
>
> If I comment out the print statements all seems to work correctly.
>
> I assume I am doing something wrong or something I should not be trying to
> do. But I can't work out what causes the 2 setups to behave so differently.
>
>
> The issue here is that klein.run() is initializing the (old-style) logging
> system; that initialization, among other things, includes replacing
> sys.stdout and sys.stderr with files that will emit log messages rather
> than write directly.
>
> `print` debugging of log observers is therefore always somewhat risky
> since many ways of initializing the logging system will do this.
>
> Perhaps the logging system should be a bit more defensive about observers
> emitting messages; however, for the time being, if you want to do `print`
> debugging of a log observer, at the *top* of your file do something like
>
> from sys import stderr as DEBUG
>
>
> and then everywhere you have a call to the 'print' function, use the
> 'file' kwarg:
>
> print('ITEM', event[item], file=DEBUG)
>
>
> I hope this is helpful,
>
> -g
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180107/79ec3dad/attachment-0002.html>

From rodrigc at crodrigues.org  Sun Jan  7 14:47:46 2018
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Sun, 7 Jan 2018 13:47:46 -0800
Subject: [Twisted-Python] Building Python3 wheels for Win32 and releasing to
	Pypi
Message-ID: <CAG=rPVdBfwznejTDjK8c+BnMSYX1BX3ifa2JEDmv9HM6+WKnww@mail.gmail.com>

At https://pypi.python.org/pypi/Twisted , there is only a Python 2.7 wheel
for Win32.

Since we don't push Python3 wheels to Pypi, people need to pick them up
from: https://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted
which is not ideal.

Since I ported the IOCP reactor to Win32 in 2016, it would be good
to update the Twisted release scripts to push Python3 wheels to Pypi.

Where are these scripts located?

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180107/0bbf7316/attachment-0002.html>

From glyph at twistedmatrix.com  Sun Jan  7 16:44:25 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 7 Jan 2018 15:44:25 -0800
Subject: [Twisted-Python] Building Python3 wheels for Win32 and
 releasing to	Pypi
In-Reply-To: <CAG=rPVdBfwznejTDjK8c+BnMSYX1BX3ifa2JEDmv9HM6+WKnww@mail.gmail.com>
References: <CAG=rPVdBfwznejTDjK8c+BnMSYX1BX3ifa2JEDmv9HM6+WKnww@mail.gmail.com>
Message-ID: <CD276210-1EA3-4FBD-9B99-BF269B4B8C0E@twistedmatrix.com>



> On Jan 7, 2018, at 1:47 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> At https://pypi.python.org/pypi/Twisted <https://pypi.python.org/pypi/Twisted> , there is only a Python 2.7 wheel for Win32.
> 
> Since we don't push Python3 wheels to Pypi, people need to pick them up
> from: https://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted <https://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted>
> which is not ideal.
> 
> Since I ported the IOCP reactor to Win32 in 2016, it would be good
> to update the Twisted release scripts to push Python3 wheels to Pypi.

👍

> Where are these scripts located?

The release process is documented here:

https://twisted.readthedocs.io/en/latest/core/development/policy/release-process.html <https://twisted.readthedocs.io/en/latest/core/development/policy/release-process.html>

According to said documentation, it seems that the Windows wheels are all built on the Buildbot, which would put the script here: https://github.com/twisted-infra/braid/blob/4320f9461d376ba255158e841b308dd833376c36/services/buildbot/master/twisted_factories.py#L624-L664 <https://github.com/twisted-infra/braid/blob/4320f9461d376ba255158e841b308dd833376c36/services/buildbot/master/twisted_factories.py#L624-L664>

Personally I would really like to see a wheel matrix with win32/win64/macOS/manylinux1 on one side and py27 py34 py35 py36 on the other.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180107/d1dcb8b3/attachment-0002.html>

From adi at roiban.ro  Sun Jan  7 23:14:33 2018
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 8 Jan 2018 06:14:33 +0000
Subject: [Twisted-Python] Building Python3 wheels for Win32 and
 releasing to Pypi
In-Reply-To: <CD276210-1EA3-4FBD-9B99-BF269B4B8C0E@twistedmatrix.com>
References: <CAG=rPVdBfwznejTDjK8c+BnMSYX1BX3ifa2JEDmv9HM6+WKnww@mail.gmail.com>
 <CD276210-1EA3-4FBD-9B99-BF269B4B8C0E@twistedmatrix.com>
Message-ID: <CAFycZ9dPn1RzTRr2XNGHU9KuVCeZz6mxcELRy5dzp6dH7sdU7g@mail.gmail.com>

On 7 January 2018 at 23:44, Glyph <glyph at twistedmatrix.com> wrote:

>
>
> On Jan 7, 2018, at 1:47 PM, Craig Rodrigues <rodrigc at crodrigues.org>
> wrote:
>
> At https://pypi.python.org/pypi/Twisted , there is only a Python 2.7
> wheel for Win32.
>
> Since we don't push Python3 wheels to Pypi, people need to pick them up
> from: https://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted
> which is not ideal.
>
> Since I ported the IOCP reactor to Win32 in 2016, it would be good
> to update the Twisted release scripts to push Python3 wheels to Pypi.
>
>
> 👍
>
> Where are these scripts located?
>
>
> The release process is documented here:
>
> https://twisted.readthedocs.io/en/latest/core/development/
> policy/release-process.html
>
> According to said documentation, it seems that the Windows wheels are all
> built on the Buildbot, which would put the script here:
> https://github.com/twisted-infra/braid/blob/4320f9461d376ba255158e841b308d
> d833376c36/services/buildbot/master/twisted_factories.py#L624-L664
>
> Personally I would *really* like to see a wheel matrix with
> win32/win64/macOS/manylinux1 on one side and py27 py34 py35 py36 on the
> other.
>
>
Maybe it helps,
There is some work for moving the Windows builds to appveyor

Ticket https://twistedmatrix.com/trac/ticket/8676

initial PR https://github.com/twisted/twisted/pull/413

I no longer have time to work on it, but I think that is possible to build
wheels for py2.7 and py3 on appveyor

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180108/cddb36ef/attachment-0002.html>

From rodrigc at crodrigues.org  Mon Jan  8 13:56:34 2018
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Mon, 8 Jan 2018 12:56:34 -0800
Subject: [Twisted-Python] Building Python3 wheels for Win32 and
 releasing to Pypi
In-Reply-To: <CAFycZ9dPn1RzTRr2XNGHU9KuVCeZz6mxcELRy5dzp6dH7sdU7g@mail.gmail.com>
References: <CAG=rPVdBfwznejTDjK8c+BnMSYX1BX3ifa2JEDmv9HM6+WKnww@mail.gmail.com>
 <CD276210-1EA3-4FBD-9B99-BF269B4B8C0E@twistedmatrix.com>
 <CAFycZ9dPn1RzTRr2XNGHU9KuVCeZz6mxcELRy5dzp6dH7sdU7g@mail.gmail.com>
Message-ID: <CAG=rPVeBPxNE5nmtimFg7Dgc8YQaz+1yw1-zoyfK9Kww1MLnAQ@mail.gmail.com>

On Sun, Jan 7, 2018 at 10:14 PM, Adi Roiban <adi at roiban.ro> wrote:

>
> I no longer have time to work on it, but I think that is possible to build
> wheels for py2.7 and py3 on appveyor
>


If during the release process, appveyor could build the Windows wheels on
py2.7 and py3, and then upload
them to pypi, that would be ideal.

Didn't you implement something for one of the Twisted subprojects where if
a git tag was created and pushed to github, then it would build and upload
to pypi?
That would be the ideal thing to implement with appveyor for the main
Twisted project.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180108/99b78dec/attachment-0002.html>

From oliverpalmer at opalmer.com  Mon Jan  8 15:53:46 2018
From: oliverpalmer at opalmer.com (Oliver Palmer)
Date: Mon, 8 Jan 2018 17:53:46 -0500
Subject: [Twisted-Python] Building Python3 wheels for Win32 and
 releasing to Pypi
In-Reply-To: <CAG=rPVeBPxNE5nmtimFg7Dgc8YQaz+1yw1-zoyfK9Kww1MLnAQ@mail.gmail.com>
References: <CAG=rPVdBfwznejTDjK8c+BnMSYX1BX3ifa2JEDmv9HM6+WKnww@mail.gmail.com>
 <CD276210-1EA3-4FBD-9B99-BF269B4B8C0E@twistedmatrix.com>
 <CAFycZ9dPn1RzTRr2XNGHU9KuVCeZz6mxcELRy5dzp6dH7sdU7g@mail.gmail.com>
 <CAG=rPVeBPxNE5nmtimFg7Dgc8YQaz+1yw1-zoyfK9Kww1MLnAQ@mail.gmail.com>
Message-ID: <CAEgpGv79W_CrZrgejRP+rbJWQQYsihc=A5PLAurUvv9T4WvWwA@mail.gmail.com>

> If during the release process, appveyor could build the Windows wheels on
py2.7 and py3, and then upload them to pypi, that would be ideal.

Last I checked AppyVeyor can't do this directly. I ended up writing a
command line tool to make releases for pywincffi which uses this class to
pull release artifacts from a build on AppVeyor:

https://github.com/opalmer/pywincffi/blob/master/pywincffi/dev/release.py#L392

The PR mentioned above appears to already push artifacts using sftp so if
you wanted to pull artifacts for a specific build you could use the above.
I don't know enough about Twisted's release process to know if the above
will be useful but if you need to access all artifacts for a branch of the
last passing build the above should do it.

As for building wheels for Windows on AppVeyor it might be worth looking at
the one I've come up with:

https://github.com/opalmer/pywincffi/blob/master/appveyor.yml

The most notable difference probably is that I'm creating an environment
variable called %WITH_COMPILER% which points at a script
<https://github.com/opalmer/pywincffi/blob/master/.ci/appveyor/run_with_compiler.cmd>
that
sets up additional environment variables prior to the install
<https://github.com/opalmer/pywincffi/blob/master/.ci/appveyor/install.cmd> or
other scripts running. I don't know enough about Twisted's build to know if
it's needed but without those environment variables I ended up having
problems getting builds through for Python 2/3 for both 32-bit and 64-bit
variants even when using setuptools. I don't know if the situation has
improved since but it might be worth looking at if Twisted's build on
appyveor runs into issues.

On Mon, Jan 8, 2018 at 3:56 PM, Craig Rodrigues <rodrigc at crodrigues.org>
wrote:

>
>
> On Sun, Jan 7, 2018 at 10:14 PM, Adi Roiban <adi at roiban.ro> wrote:
>
>>
>> I no longer have time to work on it, but I think that is possible to
>> build wheels for py2.7 and py3 on appveyor
>>
>
>
> If during the release process, appveyor could build the Windows wheels on
> py2.7 and py3, and then upload
> them to pypi, that would be ideal.
>
> Didn't you implement something for one of the Twisted subprojects where if
> a git tag was created and pushed to github, then it would build and upload
> to pypi?
> That would be the ideal thing to implement with appveyor for the main
> Twisted project.
>
> --
> Craig
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180108/4650dfc5/attachment-0002.html>

From barry.scott at forcepoint.com  Tue Jan  9 04:49:27 2018
From: barry.scott at forcepoint.com (Barry Scott)
Date: Tue, 9 Jan 2018 11:49:27 +0000
Subject: [Twisted-Python] twistedmatrix.com is in trouble...
Message-ID: <15310396.AAOjnfZoH4@barry-scott-desktop>

In case you have no noticed yet.

*web.Server Traceback (most recent call last):* 
exceptions.IOError: [Errno 24] Too many open files: '/srv/t-web/config/vhosts/twistedmatrix.com/
documents.rpy' 
/srv/t-web/virtualenv/site-packages/twisted/web/server.py:185 in process 
184        try: 
185            resrc = self.site.getResourceFor(self) 
186            if resource._IEncodingResource.providedBy(resrc): 
/srv/t-web/virtualenv/site-packages/twisted/web/server.py:791 in getResourceFor 
790        request.sitepath = copy.copy(request.prepath) 
791        return resource.getChildForRequest(self.resource, request) 
792 
/srv/t-web/virtualenv/site-packages/twisted/web/resource.py:98 in getChildForRequest 
97        request.prepath.append(pathElement) 
98        resource = resource.getChildWithDefault(pathElement, request) 
99    return resource 
/srv/t-web/virtualenv/site-packages/twisted/web/resource.py:201 in getChildWithDefault 
200            return self.children[path] 
201        return self.getChild(path, request) 
202 
/srv/t-web/virtualenv/site-packages/twisted/web/rewrite.py:24 in getChild 
23 
24 
25 
/srv/t-web/virtualenv/site-packages/twisted/web/resource.py:201 in getChildWithDefault 
200            return self.children[path] 
201        return self.getChild(path, request) 
202 
/srv/t-web/virtualenv/site-packages/twisted/web/vhost.py:102 in getChild 
101 
102 
103 
/srv/t-web/virtualenv/site-packages/twisted/web/resource.py:201 in getChildWithDefault 
200            return self.children[path] 
201        return self.getChild(path, request) 
202 
/srv/t-web/virtualenv/site-packages/twisted/web/static.py:298 in getChild 
297        if processor: 
298            return resource.IResource(processor(fpath.path, self.registry)) 
299        return self.createSimilarFile(fpath.path) 
/srv/t-web/virtualenv/site-packages/twisted/web/script.py:64 in ResourceScript 
63    try: 
64        execfile(path, glob, glob) 
65    except AlreadyCached as ac: 
/srv/t-web/virtualenv/site-packages/twisted/python/compat.py:248 in execfile 
247        locals = globals 
248    with open(filename, "rb") as fin: 
249        source = fin.read() 
exceptions.IOError: [Errno 24] Too many open files: '/srv/t-web/config/vhosts/twistedmatrix.com/
documents.rpy' 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180109/f8f8240e/attachment-0002.html>

From exarkun at twistedmatrix.com  Tue Jan  9 05:23:08 2018
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Tue, 9 Jan 2018 07:23:08 -0500
Subject: [Twisted-Python] twistedmatrix.com is in trouble...
In-Reply-To: <15310396.AAOjnfZoH4@barry-scott-desktop>
References: <15310396.AAOjnfZoH4@barry-scott-desktop>
Message-ID: <CAEeXt4PK-fuW1PbFFx6_UvLnNKdZ87ritskMd3d5whWKTG_B1g@mail.gmail.com>

On Tue, Jan 9, 2018 at 6:49 AM, Barry Scott <barry.scott at forcepoint.com>
wrote:

> In case you have no noticed yet.
>

>
> web.Server Traceback (most recent call last):
>
> exceptions.IOError: [Errno 24] Too many open files:
> '/srv/t-web/config/vhosts/twistedmatrix.com/documents.rpy'
>

Thanks.  I saved the open files to ~root (in case someone wants to
investigate) and restarted the web server (bin/stop; bin/start).

Jean-Paul


> /srv/t-web/virtualenv/site-packages/twisted/web/server.py:185 in process
>
> 184        try:
>
> 185            resrc = self.site.getResourceFor(self)
>
> 186            if resource._IEncodingResource.providedBy(resrc):
>
> /srv/t-web/virtualenv/site-packages/twisted/web/server.py:791 in
> getResourceFor
>
> 790        request.sitepath = copy.copy(request.prepath)
>
> 791        return resource.getChildForRequest(self.resource, request)
>
> 792
>
> /srv/t-web/virtualenv/site-packages/twisted/web/resource.py:98 in
> getChildForRequest
>
> 97        request.prepath.append(pathElement)
>
> 98        resource = resource.getChildWithDefault(pathElement, request)
>
> 99    return resource
>
> /srv/t-web/virtualenv/site-packages/twisted/web/resource.py:201 in
> getChildWithDefault
>
> 200            return self.children[path]
>
> 201        return self.getChild(path, request)
>
> 202
>
> /srv/t-web/virtualenv/site-packages/twisted/web/rewrite.py:24 in getChild
>
> 23
>
> 24
>
> 25
>
> /srv/t-web/virtualenv/site-packages/twisted/web/resource.py:201 in
> getChildWithDefault
>
> 200            return self.children[path]
>
> 201        return self.getChild(path, request)
>
> 202
>
> /srv/t-web/virtualenv/site-packages/twisted/web/vhost.py:102 in getChild
>
> 101
>
> 102
>
> 103
>
> /srv/t-web/virtualenv/site-packages/twisted/web/resource.py:201 in
> getChildWithDefault
>
> 200            return self.children[path]
>
> 201        return self.getChild(path, request)
>
> 202
>
> /srv/t-web/virtualenv/site-packages/twisted/web/static.py:298 in getChild
>
> 297        if processor:
>
> 298            return resource.IResource(processor(fpath.path,
> self.registry))
>
> 299        return self.createSimilarFile(fpath.path)
>
> /srv/t-web/virtualenv/site-packages/twisted/web/script.py:64 in
> ResourceScript
>
> 63    try:
>
> 64        execfile(path, glob, glob)
>
> 65    except AlreadyCached as ac:
>
> /srv/t-web/virtualenv/site-packages/twisted/python/compat.py:248 in
> execfile
>
> 247        locals = globals
>
> 248    with open(filename, "rb") as fin:
>
> 249        source = fin.read()
>
> exceptions.IOError: [Errno 24] Too many open files:
> '/srv/t-web/config/vhosts/twistedmatrix.com/documents.rpy'
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180109/51c10e40/attachment-0002.html>

From trac at twistedmatrix.com  Sun Jan 14 00:05:25 2018
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 14 Jan 2018 07:05:25 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1515913525.53.2054230896629860405@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180114/e7e89c22/attachment-0002.html>

From dau at riseup.net  Sun Jan 14 17:34:23 2018
From: dau at riseup.net (Felipe Dau)
Date: Mon, 15 Jan 2018 00:34:23 +0000
Subject: [Twisted-Python] stdlib logger, loggerFor and filtering events
In-Reply-To: <3637E91C-9EDF-48B1-AA90-F8A21F71F084@twistedmatrix.com>
References: <20180106031110.GA3369@host.localdomain>
 <3637E91C-9EDF-48B1-AA90-F8A21F71F084@twistedmatrix.com>
Message-ID: <20180115003417.GA10333@host.localdomain>

On Fri, Jan 05, 2018 at 09:00:41PM -0800, Glyph wrote:
> Just for the record, you don't need to wait for it to be brought up before asking other questions ;-).

Thanks Glyph, I should have asked these a while ago.

> It might be cool to add that, but, if you don't want the standard library's log format, why are you using the standard library log observer?  And wouldn't this be a job for a https://docs.python.org/3.6/library/logging.html#logging.Formatter <https://docs.python.org/3.6/library/logging.html#logging.Formatter> object in any case; what Twisted should be doing is sending the logs on in a more structured format that works with that?

Honestly, I just wanted to display something to stdout (when using the
GUI) and using stdlib's looked like the right way to do that, but
using sys.stdout directly like in your example below would work as
well. And now that I am looking again at what I did, it is probably
the worst thing to do if you are trying to integrate something: set
the message text to the actual formatted text and set the format to
just '%(message)s'. Anything else that used stdlib's would only
contain the message, losing all the rest of the info.

Considering that I just really wanted to display the logs, is there
any advantage on using stdlib's? If so, I would then use the Formatter
as you pointed out, otherwise, I would just pass it to sys.stdout. In
both cases, there wouldn't be a need to pass an event formatter like I
wanted to. Thanks!

> I'm honestly not sure why this exists at all.  It seems like a terrible mistake has happened here, since `_loggerFor` is actually exported in __all__, which should never ever happen.
> 
> From what I can tell, it should be removed, since rather than creating that fairly noisy attr.ib() definition, you could do this:
> 
>     _log = Logger()
> 
> which is a lot more succinct, and has exactly the same effect (do `self._log.info <http://log.info/>(...)`) and there you have it.
> 
> If you could explain why it's great, then maybe we could remove the underscore and add it to the docs.

It is indeed a lot more succinct! The reason I used _loggerFor is that
it creates a logger for any instance it receives. That way, it can
set the namespace automatically when instantiated inside any method of
a class - the constructor, for example. I just do not remember why
creating a separate logger for each instance instead of sharing the
class'. Would there be a reason for that?

But I do think that if you would like to log something but not keep
the instance around, _loggerFor may be useful, as Logger would only
set the namespace based on the module when called from a method.

> Absolutely!  Super glad you brought this up. This was a major part of the design of the new logging system, both to do this, and to also do as little work as possible with messages that were ultimately caught by such filters.
> 
> Here's a quick example program demonstrating the combination of https://twistedmatrix.com/documents/17.9.0/api/twisted.logger.LogLevelFilterPredicate.html <https://twistedmatrix.com/documents/17.9.0/api/twisted.logger.LogLevelFilterPredicate.html> and https://twistedmatrix.com/documents/17.9.0/api/twisted.logger.FilteringLogObserver.html <https://twistedmatrix.com/documents/17.9.0/api/twisted.logger.FilteringLogObserver.html>.

Thanks for the example! Unfortunately I think that is different from
what I tried to describe. Here is an example:

    class ThirdPartyClass:
        a_log = Logger()

        def method_a(self):
            self.a_log.info('Log I want to supress')

            self.a_log.warn('Log I do not want to supress')

    class MyClass(ThirdPartyClass):
        b_log = Logger()

        def method_b(self):
            self.method_a()

            self.b_log.info('Log I do not want to supress')


    MyClass().method_b()

Considering that the class definitions would be in separate files,
they would still have the same namespaces. This would be a case where
the libraries you are using are a bit noisy and you would just want to
display warnings+.

I believe that as there is a reference to a_log, it would be possible
to change the namespace, but if the third party class used
_loggerFor().info() instead, then that would not be possible, right?

This actually happens with Factory.doStart() [0] once that is
subclassed, you cannot differ its  namespace from your class'.

These would be situations where very few people would come across or
maybe I still have to learn more about the logging system, but I
thought it would be worth to be discussed.

Thanks,
-Felipe

[0]: https://github.com/twisted/twisted/blob/trunk/src/twisted/internet/protocol.py#L75



From glyph at twistedmatrix.com  Sun Jan 14 23:07:46 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 14 Jan 2018 22:07:46 -0800
Subject: [Twisted-Python] stdlib logger, loggerFor and filtering events
In-Reply-To: <20180115003417.GA10333@host.localdomain>
References: <20180106031110.GA3369@host.localdomain>
 <3637E91C-9EDF-48B1-AA90-F8A21F71F084@twistedmatrix.com>
 <20180115003417.GA10333@host.localdomain>
Message-ID: <EB16F593-FC25-4F0A-8BB6-4374ABD0FB99@twistedmatrix.com>



> On Jan 14, 2018, at 4:34 PM, Felipe Dau <dau at riseup.net> wrote:
> 
> On Fri, Jan 05, 2018 at 09:00:41PM -0800, Glyph wrote:
>> Just for the record, you don't need to wait for it to be brought up before asking other questions ;-).
> 
> Thanks Glyph, I should have asked these a while ago.
> 
>> It might be cool to add that, but, if you don't want the standard library's log format, why are you using the standard library log observer?  And wouldn't this be a job for a https://docs.python.org/3.6/library/logging.html#logging.Formatter <https://docs.python.org/3.6/library/logging.html#logging.Formatter> object in any case; what Twisted should be doing is sending the logs on in a more structured format that works with that?
> 
> Honestly, I just wanted to display something to stdout (when using the
> GUI) and using stdlib's looked like the right way to do that, but
> using sys.stdout directly like in your example below would work as
> well. And now that I am looking again at what I did, it is probably
> the worst thing to do if you are trying to integrate something: set
> the message text to the actual formatted text and set the format to
> just '%(message)s'. Anything else that used stdlib's would only
> contain the message, losing all the rest of the info.

Yep.

> Considering that I just really wanted to display the logs, is there
> any advantage on using stdlib's? If so, I would then use the Formatter
> as you pointed out, otherwise, I would just pass it to sys.stdout. In
> both cases, there wouldn't be a need to pass an event formatter like I
> wanted to. Thanks!

I don't think so.  Twisted's will do this just fine (and in fact does it automatically if you're using `twist`, or the older `twistd`).

> 
>> I'm honestly not sure why this exists at all.  It seems like a terrible mistake has happened here, since `_loggerFor` is actually exported in __all__, which should never ever happen.
>> 
>> From what I can tell, it should be removed, since rather than creating that fairly noisy attr.ib() definition, you could do this:
>> 
>>    _log = Logger()
>> 
>> which is a lot more succinct, and has exactly the same effect (do `self._log.info <http://log.info/>(...)`) and there you have it.
>> 
>> If you could explain why it's great, then maybe we could remove the underscore and add it to the docs.
> 
> It is indeed a lot more succinct! The reason I used _loggerFor is that
> it creates a logger for any instance it receives. That way, it can
> set the namespace automatically when instantiated inside any method of
> a class - the constructor, for example. I just do not remember why
> creating a separate logger for each instance instead of sharing the
> class'. Would there be a reason for that?

None that I can think of.

> But I do think that if you would like to log something but not keep
> the instance around, _loggerFor may be useful, as Logger would only
> set the namespace based on the module when called from a method.
> 
>> Absolutely!  Super glad you brought this up. This was a major part of the design of the new logging system, both to do this, and to also do as little work as possible with messages that were ultimately caught by such filters.
>> 
>> Here's a quick example program demonstrating the combination of https://twistedmatrix.com/documents/17.9.0/api/twisted.logger.LogLevelFilterPredicate.html <https://twistedmatrix.com/documents/17.9.0/api/twisted.logger.LogLevelFilterPredicate.html> and https://twistedmatrix.com/documents/17.9.0/api/twisted.logger.FilteringLogObserver.html <https://twistedmatrix.com/documents/17.9.0/api/twisted.logger.FilteringLogObserver.html>.
> 
> Thanks for the example! Unfortunately I think that is different from
> what I tried to describe. Here is an example:
> 
>    class ThirdPartyClass:
>        a_log = Logger()
> 
>        def method_a(self):
>            self.a_log.info('Log I want to supress')
> 
>            self.a_log.warn('Log I do not want to supress')
> 
>    class MyClass(ThirdPartyClass):
>        b_log = Logger()
> 
>        def method_b(self):
>            self.method_a()
> 
>            self.b_log.info('Log I do not want to supress')
> 
> 
>    MyClass().method_b()
> 
> Considering that the class definitions would be in separate files,
> they would still have the same namespaces. This would be a case where
> the libraries you are using are a bit noisy and you would just want to
> display warnings+.

Oh, ugh. This is a bug that should be fixed.  a_log really ought to have its namespace set to ThirdPartyClass's namespace, not MyClass.

> I believe that as there is a reference to a_log, it would be possible
> to change the namespace, but if the third party class used
> _loggerFor().info() instead, then that would not be possible, right?

With the example here, it's at least possible to fix the bug, since the logger can identify where in the MRO it lives.  With _loggerFor, it would not be possible.

> This actually happens with Factory.doStart() [0] once that is
> subclassed, you cannot differ its  namespace from your class'.

Yeah, let's fix taht.

> These would be situations where very few people would come across or
> maybe I still have to learn more about the logging system, but I
> thought it would be worth to be discussed.

They absolutely should be discussed!  These types of issues are very important when doing log analysis, which is often a long time after the code is written to emit the messages.

> Thanks,
> -Felipe
> 
> [0]: https://github.com/twisted/twisted/blob/trunk/src/twisted/internet/protocol.py#L75
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From ilyaskriblovsky at gmail.com  Wed Jan 17 14:09:21 2018
From: ilyaskriblovsky at gmail.com (Ilya Skriblovsky)
Date: Wed, 17 Jan 2018 21:09:21 +0000
Subject: [Twisted-Python] Circular references in TLSMemoryBIOProtocol
Message-ID: <CAOG7vkw5GSRcz=SPQMoiF+sFy3e-WsW2f3n7nwH0mGMtgTzudA@mail.gmail.com>

Hello,

I have the Twisted app that serves tons of short-lived TLS connections
using TLSMemoryBIOFactory. I usually set loosened garbage collector
thresholds in production environment for the sake of performance. But I've
noticed that this app's RAM usage quickly grows up to unreasonable values.
Digging into the issue using pdb and objgraph showed that protocol
instances are still living long after they were closed.

I found two circular dependencies which are created for each TLS connection:
1. Between twisted.protocols.policies.ProtocolWrapper and its
self.wrappedProtocol
2. Between twisted.protocols.tls.TLSMemoryBIOProtocol and its
self._tlsConnection

Both of them cause protocol instance to not be deleted when the connection
is closed. So all OpenSSL-related objects and all business-related data
attached to that protocol instance are still living untill the next GC
collection. This affects both RAM usage and performance (due to much more
often GC collections)

I've tried to fix both circular dependencies:

replaced
https://github.com/twisted/twisted/blob/trunk/src/twisted/protocols/policies.py#L75
 by
self.wrappedProtocol.makeConnection(weakref.proxy(self))
and replaced
https://github.com/twisted/twisted/blob/trunk/src/twisted/protocols/tls.py#L199
 by:
self._tlsConnection = self.factory._createConnection(weakref.proxy(self))

Memory usage pattern changed drastically after this change.

I've created demo script that makes 10k TLS loopback connections with GC
disabled and measures the number of objects are still living after the work
is done and total resident RAM consumption:
https://gist.github.com/IlyaSkriblovsky/4dd3abfd5f67c64b13f1c673f56466f9

Output without the fix:
    N = 10000 , K = 100
    objects before 50136
    DummyServerProtocols still living 10000
    objects after 439919
    mem 778 mb

Output with the fix:
    N = 10000 , K = 100
    objects before 50133
    DummyServerProtocols still living 0
    objects after 159919
    mem 96 mb

So using weakrefs makes all protocol instances and instances of
TLSMemoryBIOProtocol to be deleted right after a connection is closed. Less
circular-dependent objects → less GC invocations → better performance. And
I see much nicer RAM usage pattern in my app.

Is it possible to fix circular deps in some more clean way? Can this be
solved at all while user's code is able to try to touch both sides of
circular dep after connection is closed? Please advice

Thanks for consideration

Best regards,
    Ilya
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180117/65d42580/attachment-0002.html>

From ldanielburr at me.com  Wed Jan 17 14:30:09 2018
From: ldanielburr at me.com (L. Daniel Burr)
Date: Wed, 17 Jan 2018 15:30:09 -0600
Subject: [Twisted-Python] Circular references in TLSMemoryBIOProtocol
In-Reply-To: <CAOG7vkw5GSRcz=SPQMoiF+sFy3e-WsW2f3n7nwH0mGMtgTzudA@mail.gmail.com>
References: <CAOG7vkw5GSRcz=SPQMoiF+sFy3e-WsW2f3n7nwH0mGMtgTzudA@mail.gmail.com>
Message-ID: <etPan.5a5fc061.7b6a224a.73ae@me.com>

Hi Ilya,

On January 17, 2018 at 3:09:52 PM, Ilya Skriblovsky (ilyaskriblovsky at gmail.com) wrote:

[Trimmed for context]

So using weakrefs makes all protocol instances and instances of TLSMemoryBIOProtocol to be deleted right after a connection is closed. Less circular-dependent objects → less GC invocations → better performance. And I see much nicer RAM usage pattern in my app.

Is it possible to fix circular deps in some more clean way? Can this be solved at all while user's code is able to try to touch both sides of circular dep after connection is closed? Please advice


Personally, I don’t mind the weaker approach, but if you wanted to be completely explicit, I’d look at modifying the connectionLost method of both the protocol and the protocol wrapper to break circular references.

Thanks for consideration

Best regards,
    Ilya

Hope this helps,

Daniel
--
L. Daniel Burr
ldanielburr at me.com
(312) 656-8387


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180117/d4453f1e/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Jan 18 00:10:15 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 17 Jan 2018 23:10:15 -0800
Subject: [Twisted-Python] Circular references in TLSMemoryBIOProtocol
In-Reply-To: <CAOG7vkw5GSRcz=SPQMoiF+sFy3e-WsW2f3n7nwH0mGMtgTzudA@mail.gmail.com>
References: <CAOG7vkw5GSRcz=SPQMoiF+sFy3e-WsW2f3n7nwH0mGMtgTzudA@mail.gmail.com>
Message-ID: <2801916D-83AC-47FC-B5E4-ED4BC8CD0330@twistedmatrix.com>



> On Jan 17, 2018, at 1:09 PM, Ilya Skriblovsky <ilyaskriblovsky at gmail.com> wrote:
> 
> Hello,
> 
> I have the Twisted app that serves tons of short-lived TLS connections using TLSMemoryBIOFactory. I usually set loosened garbage collector thresholds in production environment for the sake of performance. But I've noticed that this app's RAM usage quickly grows up to unreasonable values. Digging into the issue using pdb and objgraph showed that protocol instances are still living long after they were closed.

This sounds like an issue that should be reported as a bug and fixed!

It would be great if you could come up with a performance regression test or benchmark which could validate that this doesn't regress, but, it's quite challenging to do this (especially for memory issues) so as long as it's adequately behaviorally tested I'm sure we could accept something.

> I found two circular dependencies which are created for each TLS connection:
> 1. Between twisted.protocols.policies.ProtocolWrapper and its self.wrappedProtocol
> 2. Between twisted.protocols.tls.TLSMemoryBIOProtocol and its self._tlsConnection
> 
> Both of them cause protocol instance to not be deleted when the connection is closed. So all OpenSSL-related objects and all business-related data attached to that protocol instance are still living untill the next GC collection. This affects both RAM usage and performance (due to much more often GC collections)
> 
> I've tried to fix both circular dependencies:
> 
> replaced https://github.com/twisted/twisted/blob/trunk/src/twisted/protocols/policies.py#L75 <https://github.com/twisted/twisted/blob/trunk/src/twisted/protocols/policies.py#L75> by
> self.wrappedProtocol.makeConnection(weakref.proxy(self))
> and replaced https://github.com/twisted/twisted/blob/trunk/src/twisted/protocols/tls.py#L199 <https://github.com/twisted/twisted/blob/trunk/src/twisted/protocols/tls.py#L199> by:
> self._tlsConnection = self.factory._createConnection(weakref.proxy(self))
> 
> Memory usage pattern changed drastically after this change.
> 
> I've created demo script that makes 10k TLS loopback connections with GC disabled and measures the number of objects are still living after the work is done and total resident RAM consumption:
> https://gist.github.com/IlyaSkriblovsky/4dd3abfd5f67c64b13f1c673f56466f9 <https://gist.github.com/IlyaSkriblovsky/4dd3abfd5f67c64b13f1c673f56466f9>
> 
> Output without the fix:
>     N = 10000 , K = 100
>     objects before 50136
>     DummyServerProtocols still living 10000
>     objects after 439919
>     mem 778 mb
> 
> Output with the fix:
>     N = 10000 , K = 100
>     objects before 50133
>     DummyServerProtocols still living 0
>     objects after 159919
>     mem 96 mb
> 
> So using weakrefs makes all protocol instances and instances of TLSMemoryBIOProtocol to be deleted right after a connection is closed. Less circular-dependent objects → less GC invocations → better performance. And I see much nicer RAM usage pattern in my app.

Hooray!

> Is it possible to fix circular deps in some more clean way? Can this be solved at all while user's code is able to try to touch both sides of circular dep after connection is closed? Please advice

Protocols and transports have a fairly defined lifecycle, and as L. Daniel Burr already pointed out, it would probably be appropriate to explicitly break these reference cycles in connectionLost.

-g

> 
> Thanks for consideration
> 
> Best regards,
>     Ilya
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180117/81738113/attachment-0002.html>

From ilyaskriblovsky at gmail.com  Fri Jan 19 12:52:36 2018
From: ilyaskriblovsky at gmail.com (Ilya Skriblovsky)
Date: Fri, 19 Jan 2018 19:52:36 +0000
Subject: [Twisted-Python] Circular references in TLSMemoryBIOProtocol
In-Reply-To: <CAOG7vkw5GSRcz=SPQMoiF+sFy3e-WsW2f3n7nwH0mGMtgTzudA@mail.gmail.com>
References: <CAOG7vkw5GSRcz=SPQMoiF+sFy3e-WsW2f3n7nwH0mGMtgTzudA@mail.gmail.com>
Message-ID: <CAOG7vkyoPvvppR-6MivPhD86vnW9QYsAshBw2G4-E38uN9eZWA@mail.gmail.com>

> Protocols and transports have a fairly defined lifecycle, and as L.
Daniel Burr already pointed out, it would probably be appropriate to
explicitly break these reference cycles in connectionLost.

Explicitly breaking cycle in ProtocolWrapper.connectionLost by any of:
• self.wrappedProtocol = None
• self.wrappedProtocol.transport = None
• self.wrappedProtocol = weakref.proxy(self.wrappedProtocol)
• self.wrappedProtocol.transport = weakref.proxy(self)

... breaks some existing tests :(

Seems like these tests do some post-run checks against protocol instances
and their transports. Not sure whether it is relevant to real-life usage.
Will investigate more...

- Ilya

чт, 18 янв. 2018 г. в 0:09, Ilya Skriblovsky <ilyaskriblovsky at gmail.com>:

> Hello,
>
> I have the Twisted app that serves tons of short-lived TLS connections
> using TLSMemoryBIOFactory. I usually set loosened garbage collector
> thresholds in production environment for the sake of performance. But I've
> noticed that this app's RAM usage quickly grows up to unreasonable values.
> Digging into the issue using pdb and objgraph showed that protocol
> instances are still living long after they were closed.
>
> I found two circular dependencies which are created for each TLS
> connection:
> 1. Between twisted.protocols.policies.ProtocolWrapper and its
> self.wrappedProtocol
> 2. Between twisted.protocols.tls.TLSMemoryBIOProtocol and its
> self._tlsConnection
>
> Both of them cause protocol instance to not be deleted when the connection
> is closed. So all OpenSSL-related objects and all business-related data
> attached to that protocol instance are still living untill the next GC
> collection. This affects both RAM usage and performance (due to much more
> often GC collections)
>
> I've tried to fix both circular dependencies:
>
> replaced
> https://github.com/twisted/twisted/blob/trunk/src/twisted/protocols/policies.py#L75
>  by
> self.wrappedProtocol.makeConnection(weakref.proxy(self))
> and replaced
> https://github.com/twisted/twisted/blob/trunk/src/twisted/protocols/tls.py#L199
>  by:
> self._tlsConnection = self.factory._createConnection(weakref.proxy(self))
>
> Memory usage pattern changed drastically after this change.
>
> I've created demo script that makes 10k TLS loopback connections with GC
> disabled and measures the number of objects are still living after the work
> is done and total resident RAM consumption:
> https://gist.github.com/IlyaSkriblovsky/4dd3abfd5f67c64b13f1c673f56466f9
>
> Output without the fix:
>     N = 10000 , K = 100
>     objects before 50136
>     DummyServerProtocols still living 10000
>     objects after 439919
>     mem 778 mb
>
> Output with the fix:
>     N = 10000 , K = 100
>     objects before 50133
>     DummyServerProtocols still living 0
>     objects after 159919
>     mem 96 mb
>
> So using weakrefs makes all protocol instances and instances of
> TLSMemoryBIOProtocol to be deleted right after a connection is closed. Less
> circular-dependent objects → less GC invocations → better performance. And
> I see much nicer RAM usage pattern in my app.
>
> Is it possible to fix circular deps in some more clean way? Can this be
> solved at all while user's code is able to try to touch both sides of
> circular dep after connection is closed? Please advice
>
> Thanks for consideration
>
> Best regards,
>     Ilya
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180119/6d121a49/attachment-0002.html>

From glyph at twistedmatrix.com  Fri Jan 19 23:07:04 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 19 Jan 2018 22:07:04 -0800
Subject: [Twisted-Python] Circular references in TLSMemoryBIOProtocol
In-Reply-To: <CAOG7vkyoPvvppR-6MivPhD86vnW9QYsAshBw2G4-E38uN9eZWA@mail.gmail.com>
References: <CAOG7vkw5GSRcz=SPQMoiF+sFy3e-WsW2f3n7nwH0mGMtgTzudA@mail.gmail.com>
 <CAOG7vkyoPvvppR-6MivPhD86vnW9QYsAshBw2G4-E38uN9eZWA@mail.gmail.com>
Message-ID: <B6CD6518-1407-449E-B347-C0FF54E77381@twistedmatrix.com>



> On Jan 19, 2018, at 11:52 AM, Ilya Skriblovsky <ilyaskriblovsky at gmail.com> wrote:
> 
> > Protocols and transports have a fairly defined lifecycle, and as L. Daniel Burr already pointed out, it would probably be appropriate to explicitly break these reference cycles in connectionLost.
> 
> Explicitly breaking cycle in ProtocolWrapper.connectionLost by any of:
> • self.wrappedProtocol = None
> • self.wrappedProtocol.transport = None
> • self.wrappedProtocol = weakref.proxy(self.wrappedProtocol)
> • self.wrappedProtocol.transport = weakref.proxy(self)
> 
> ... breaks some existing tests :(
> 
> Seems like these tests do some post-run checks against protocol instances and their transports. Not sure whether it is relevant to real-life usage.
> Will investigate more...
> 
> - Ilya

Do these tests fail if you only do it in TLSMemoryBIOProtocol instead of WrapperProtocol?

If so, this may be worth a compatibility exception.

-g



From ilyaskriblovsky at gmail.com  Sat Jan 20 10:32:10 2018
From: ilyaskriblovsky at gmail.com (Ilya Skriblovsky)
Date: Sat, 20 Jan 2018 17:32:10 +0000
Subject: [Twisted-Python] Circular references in TLSMemoryBIOProtocol
In-Reply-To: <B6CD6518-1407-449E-B347-C0FF54E77381@twistedmatrix.com>
References: <CAOG7vkw5GSRcz=SPQMoiF+sFy3e-WsW2f3n7nwH0mGMtgTzudA@mail.gmail.com>
 <CAOG7vkyoPvvppR-6MivPhD86vnW9QYsAshBw2G4-E38uN9eZWA@mail.gmail.com>
 <B6CD6518-1407-449E-B347-C0FF54E77381@twistedmatrix.com>
Message-ID: <CAOG7vkx+mApGk0dsd1vn8SXGSDZrqaWtA=4kqih901-XZ2ru+g@mail.gmail.com>

Yes, doing it only for TLSMemoryBIOProtocol fails test too :(

SSL-related seem to be touching both ends of this reference cycle after
connectionLost:

1. twisted/test/test_sslverify.py:2102
self.assertEqual(sProto.wrappedProtocol.data, b'')
This one touches `wrappedProtocol`

2. twisted/test/proto_helpers.py:924 (waitUntilAllDisconnected, used by
twisted.web.test.test_webclient.WebClientSSLTests, for example)
if not True in [x.transport is not None and x.transport.connected for x in
protocols]:
and this one touches `transport` field

There are other examples as well.

Sure, these test failures can probably be fixed by changing tests
themselves, for example by making them to hold their own references to both
wrapping and wrapped protocols. But I'm not sure this wouldn't break any
user's code too... For my app it was easily fixed by breaking cycle in my
protocol's connectionLost. But I'm not experienced enough in Twisted
internals to be sure doing it inside TLSMemoryBIOProtocol wouldn't break
any real-world usage scenarios.

- Ilya

сб, 20 янв. 2018 г. в 9:10, Glyph <glyph at twistedmatrix.com>:

>
>
> > On Jan 19, 2018, at 11:52 AM, Ilya Skriblovsky <
> ilyaskriblovsky at gmail.com> wrote:
> >
> > > Protocols and transports have a fairly defined lifecycle, and as L.
> Daniel Burr already pointed out, it would probably be appropriate to
> explicitly break these reference cycles in connectionLost.
> >
> > Explicitly breaking cycle in ProtocolWrapper.connectionLost by any of:
> > • self.wrappedProtocol = None
> > • self.wrappedProtocol.transport = None
> > • self.wrappedProtocol = weakref.proxy(self.wrappedProtocol)
> > • self.wrappedProtocol.transport = weakref.proxy(self)
> >
> > ... breaks some existing tests :(
> >
> > Seems like these tests do some post-run checks against protocol
> instances and their transports. Not sure whether it is relevant to
> real-life usage.
> > Will investigate more...
> >
> > - Ilya
>
> Do these tests fail if you only do it in TLSMemoryBIOProtocol instead of
> WrapperProtocol?
>
> If so, this may be worth a compatibility exception.
>
> -g
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180120/c0bb261b/attachment-0002.html>

From trac at twistedmatrix.com  Sun Jan 21 00:05:22 2018
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 21 Jan 2018 07:05:22 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1516518322.68.255998477225995115@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180121/df7a2d8d/attachment-0002.html>

From glyph at twistedmatrix.com  Sun Jan 21 02:50:23 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 21 Jan 2018 01:50:23 -0800
Subject: [Twisted-Python] Circular references in TLSMemoryBIOProtocol
In-Reply-To: <CAOG7vkx+mApGk0dsd1vn8SXGSDZrqaWtA=4kqih901-XZ2ru+g@mail.gmail.com>
References: <CAOG7vkw5GSRcz=SPQMoiF+sFy3e-WsW2f3n7nwH0mGMtgTzudA@mail.gmail.com>
 <CAOG7vkyoPvvppR-6MivPhD86vnW9QYsAshBw2G4-E38uN9eZWA@mail.gmail.com>
 <B6CD6518-1407-449E-B347-C0FF54E77381@twistedmatrix.com>
 <CAOG7vkx+mApGk0dsd1vn8SXGSDZrqaWtA=4kqih901-XZ2ru+g@mail.gmail.com>
Message-ID: <5C0AD3B3-C328-4057-B268-B01A7D811784@twistedmatrix.com>

On Jan 20, 2018, at 9:32 AM, Ilya Skriblovsky <ilyaskriblovsky at gmail.com> wrote:
> 
> Yes, doing it only for TLSMemoryBIOProtocol fails test too :(
> 
> SSL-related seem to be touching both ends of this reference cycle after connectionLost:
> 
> 1. twisted/test/test_sslverify.py:2102
> self.assertEqual(sProto.wrappedProtocol.data, b'')
> This one touches `wrappedProtocol`
> 
> 2. twisted/test/proto_helpers.py:924 (waitUntilAllDisconnected, used by twisted.web.test.test_webclient.WebClientSSLTests, for example)
> if not True in [x.transport is not None and x.transport.connected for x in protocols]:
> and this one touches `transport` field
> 
> There are other examples as well.
> 
> Sure, these test failures can probably be fixed by changing tests themselves, for example by making them to hold their own references to both wrapping and wrapped protocols. But I'm not sure this wouldn't break any user's code too... For my app it was easily fixed by breaking cycle in my protocol's connectionLost. But I'm not experienced enough in Twisted internals to be sure doing it inside TLSMemoryBIOProtocol wouldn't break any real-world usage scenarios.

I think that this is worth trying, at least.  If you could write a PR that fixes the tests, you might want to try following the exception process documented in https://twistedmatrix.com/documents/current/core/development/policy/compatibility-policy.html#procedure-for-exceptions-to-this-policy <https://twistedmatrix.com/documents/current/core/development/policy/compatibility-policy.html#procedure-for-exceptions-to-this-policy> and see if anyone has any code that might break.

I'm pretty sure that the direction to break the cycle in is to break the reference to .wrappedProtocol, and not to mess with .wrappedProtocol.transport (which is not really something that should be touched from the outside of the wrapped protocol).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180121/56648f42/attachment-0002.html>

From ilyaskriblovsky at gmail.com  Sat Jan 27 13:33:36 2018
From: ilyaskriblovsky at gmail.com (Ilya Skriblovsky)
Date: Sat, 27 Jan 2018 20:33:36 +0000
Subject: [Twisted-Python] Circular references in TLSMemoryBIOProtocol
In-Reply-To: <5C0AD3B3-C328-4057-B268-B01A7D811784@twistedmatrix.com>
References: <CAOG7vkw5GSRcz=SPQMoiF+sFy3e-WsW2f3n7nwH0mGMtgTzudA@mail.gmail.com>
 <CAOG7vkyoPvvppR-6MivPhD86vnW9QYsAshBw2G4-E38uN9eZWA@mail.gmail.com>
 <B6CD6518-1407-449E-B347-C0FF54E77381@twistedmatrix.com>
 <CAOG7vkx+mApGk0dsd1vn8SXGSDZrqaWtA=4kqih901-XZ2ru+g@mail.gmail.com>
 <5C0AD3B3-C328-4057-B268-B01A7D811784@twistedmatrix.com>
Message-ID: <CAOG7vkxSj++9WPM0Ukb-siM8ZaQPAEP0otpB0eFsNqK0HCXB=g@mail.gmail.com>

I've created the pull request with breaking cycles in connectionLost,
please consider: https://github.com/twisted/twisted/pull/955

This change seems to fit well to the reasoning of Compatibility Exception
process. Should I create new thread in the mailing list with "INCOMPATIBLE
CHANGE" in a subject?

вс, 21 янв. 2018 г. в 12:51, Glyph <glyph at twistedmatrix.com>:

> On Jan 20, 2018, at 9:32 AM, Ilya Skriblovsky <ilyaskriblovsky at gmail.com>
> wrote:
>
>
> Yes, doing it only for TLSMemoryBIOProtocol fails test too :(
>
> SSL-related seem to be touching both ends of this reference cycle after
> connectionLost:
>
> 1. twisted/test/test_sslverify.py:2102
> self.assertEqual(sProto.wrappedProtocol.data, b'')
> This one touches `wrappedProtocol`
>
> 2. twisted/test/proto_helpers.py:924 (waitUntilAllDisconnected, used by
> twisted.web.test.test_webclient.WebClientSSLTests, for example)
> if not True in [x.transport is not None and x.transport.connected for x in
> protocols]:
> and this one touches `transport` field
>
> There are other examples as well.
>
> Sure, these test failures can probably be fixed by changing tests
> themselves, for example by making them to hold their own references to both
> wrapping and wrapped protocols. But I'm not sure this wouldn't break any
> user's code too... For my app it was easily fixed by breaking cycle in my
> protocol's connectionLost. But I'm not experienced enough in Twisted
> internals to be sure doing it inside TLSMemoryBIOProtocol wouldn't break
> any real-world usage scenarios.
>
>
> I think that this is worth trying, at least.  If you could write a PR that
> fixes the tests, you might want to try following the exception process
> documented in
> https://twistedmatrix.com/documents/current/core/development/policy/compatibility-policy.html#procedure-for-exceptions-to-this-policy and
> see if anyone has any code that might break.
>
> I'm pretty sure that the direction to break the cycle in is to break the
> reference to .wrappedProtocol, and not to mess with
> .wrappedProtocol.transport (which is not really something that should be
> touched from the outside of the wrapped protocol).
>
> -glyph
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180127/d2e018d4/attachment-0002.html>

From glyph at twistedmatrix.com  Sat Jan 27 23:34:19 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 27 Jan 2018 22:34:19 -0800
Subject: [Twisted-Python] Circular references in TLSMemoryBIOProtocol
In-Reply-To: <CAOG7vkxSj++9WPM0Ukb-siM8ZaQPAEP0otpB0eFsNqK0HCXB=g@mail.gmail.com>
References: <CAOG7vkw5GSRcz=SPQMoiF+sFy3e-WsW2f3n7nwH0mGMtgTzudA@mail.gmail.com>
 <CAOG7vkyoPvvppR-6MivPhD86vnW9QYsAshBw2G4-E38uN9eZWA@mail.gmail.com>
 <B6CD6518-1407-449E-B347-C0FF54E77381@twistedmatrix.com>
 <CAOG7vkx+mApGk0dsd1vn8SXGSDZrqaWtA=4kqih901-XZ2ru+g@mail.gmail.com>
 <5C0AD3B3-C328-4057-B268-B01A7D811784@twistedmatrix.com>
 <CAOG7vkxSj++9WPM0Ukb-siM8ZaQPAEP0otpB0eFsNqK0HCXB=g@mail.gmail.com>
Message-ID: <3F914B30-7F46-4753-9789-C32F19BF891D@twistedmatrix.com>



> On Jan 27, 2018, at 12:33 PM, Ilya Skriblovsky <ilyaskriblovsky at gmail.com> wrote:
> 
> I've created the pull request with breaking cycles in connectionLost, please consider: https://github.com/twisted/twisted/pull/955 <https://github.com/twisted/twisted/pull/955>
> 
> This change seems to fit well to the reasoning of Compatibility Exception process. Should I create new thread in the mailing list with "INCOMPATIBLE CHANGE" in a subject?

Right after putting the ticket into review, yes :-)

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180127/a2359c9b/attachment-0002.html>

From trac at twistedmatrix.com  Sun Jan 28 00:05:23 2018
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 28 Jan 2018 07:05:23 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1517123123.8.7457015315535193758@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180128/c158ea34/attachment-0002.html>

From ilyaskriblovsky at gmail.com  Mon Jan 29 06:52:02 2018
From: ilyaskriblovsky at gmail.com (Ilya Skriblovsky)
Date: Mon, 29 Jan 2018 13:52:02 +0000
Subject: [Twisted-Python] Circular references in TLSMemoryBIOProtocol
In-Reply-To: <3F914B30-7F46-4753-9789-C32F19BF891D@twistedmatrix.com>
References: <CAOG7vkw5GSRcz=SPQMoiF+sFy3e-WsW2f3n7nwH0mGMtgTzudA@mail.gmail.com>
 <CAOG7vkyoPvvppR-6MivPhD86vnW9QYsAshBw2G4-E38uN9eZWA@mail.gmail.com>
 <B6CD6518-1407-449E-B347-C0FF54E77381@twistedmatrix.com>
 <CAOG7vkx+mApGk0dsd1vn8SXGSDZrqaWtA=4kqih901-XZ2ru+g@mail.gmail.com>
 <5C0AD3B3-C328-4057-B268-B01A7D811784@twistedmatrix.com>
 <CAOG7vkxSj++9WPM0Ukb-siM8ZaQPAEP0otpB0eFsNqK0HCXB=g@mail.gmail.com>
 <3F914B30-7F46-4753-9789-C32F19BF891D@twistedmatrix.com>
Message-ID: <CAOG7vkyDLtjGJpm3UH3T2xxfwSFJepqByZ4+HSkbv9Ug4=vRDg@mail.gmail.com>

So, no action is required from me right now?
Sorry, that's a first time I'm trying to contribute to Twisted itself :)

вс, 28 янв. 2018 г. в 9:37, Glyph <glyph at twistedmatrix.com>:

>
>
> On Jan 27, 2018, at 12:33 PM, Ilya Skriblovsky <ilyaskriblovsky at gmail.com>
> wrote:
>
> I've created the pull request with breaking cycles in connectionLost,
> please consider: https://github.com/twisted/twisted/pull/955
>
> This change seems to fit well to the reasoning of Compatibility Exception
> process. Should I create new thread in the mailing list with "INCOMPATIBLE
> CHANGE" in a subject?
>
>
> Right after putting the ticket into review, yes :-)
>
> -g
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180129/8728f090/attachment-0002.html>

From ilyaskriblovsky at gmail.com  Mon Jan 29 13:27:50 2018
From: ilyaskriblovsky at gmail.com (Ilya Skriblovsky)
Date: Mon, 29 Jan 2018 20:27:50 +0000
Subject: [Twisted-Python] Circular references in TLSMemoryBIOProtocol
In-Reply-To: <CAOG7vkyDLtjGJpm3UH3T2xxfwSFJepqByZ4+HSkbv9Ug4=vRDg@mail.gmail.com>
References: <CAOG7vkw5GSRcz=SPQMoiF+sFy3e-WsW2f3n7nwH0mGMtgTzudA@mail.gmail.com>
 <CAOG7vkyoPvvppR-6MivPhD86vnW9QYsAshBw2G4-E38uN9eZWA@mail.gmail.com>
 <B6CD6518-1407-449E-B347-C0FF54E77381@twistedmatrix.com>
 <CAOG7vkx+mApGk0dsd1vn8SXGSDZrqaWtA=4kqih901-XZ2ru+g@mail.gmail.com>
 <5C0AD3B3-C328-4057-B268-B01A7D811784@twistedmatrix.com>
 <CAOG7vkxSj++9WPM0Ukb-siM8ZaQPAEP0otpB0eFsNqK0HCXB=g@mail.gmail.com>
 <3F914B30-7F46-4753-9789-C32F19BF891D@twistedmatrix.com>
 <CAOG7vkyDLtjGJpm3UH3T2xxfwSFJepqByZ4+HSkbv9Ug4=vRDg@mail.gmail.com>
Message-ID: <CAOG7vky7Lh3VLqPM0fOKktU9ua3_Wukx7k-Og_URZEqodBKuUw@mail.gmail.com>

Never mind, I realized I didn't some steps 10+ from The Manual
http://twistedmatrix.com/trac/wiki/TwistedDevelopment#SubmittingaPatch
Will fix that

пн, 29 янв. 2018 г., 16:52 Ilya Skriblovsky <ilyaskriblovsky at gmail.com>:

> So, no action is required from me right now?
> Sorry, that's a first time I'm trying to contribute to Twisted itself :)
>
> вс, 28 янв. 2018 г. в 9:37, Glyph <glyph at twistedmatrix.com>:
>
>>
>>
>> On Jan 27, 2018, at 12:33 PM, Ilya Skriblovsky <ilyaskriblovsky at gmail.com>
>> wrote:
>>
>> I've created the pull request with breaking cycles in connectionLost,
>> please consider: https://github.com/twisted/twisted/pull/955
>>
>> This change seems to fit well to the reasoning of Compatibility Exception
>> process. Should I create new thread in the mailing list with "INCOMPATIBLE
>> CHANGE" in a subject?
>>
>>
>> Right after putting the ticket into review, yes :-)
>>
>> -g
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180129/4dfad8f7/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Jan 29 20:27:42 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 29 Jan 2018 19:27:42 -0800
Subject: [Twisted-Python] Circular references in TLSMemoryBIOProtocol
In-Reply-To: <CAOG7vky7Lh3VLqPM0fOKktU9ua3_Wukx7k-Og_URZEqodBKuUw@mail.gmail.com>
References: <CAOG7vkw5GSRcz=SPQMoiF+sFy3e-WsW2f3n7nwH0mGMtgTzudA@mail.gmail.com>
 <CAOG7vkyoPvvppR-6MivPhD86vnW9QYsAshBw2G4-E38uN9eZWA@mail.gmail.com>
 <B6CD6518-1407-449E-B347-C0FF54E77381@twistedmatrix.com>
 <CAOG7vkx+mApGk0dsd1vn8SXGSDZrqaWtA=4kqih901-XZ2ru+g@mail.gmail.com>
 <5C0AD3B3-C328-4057-B268-B01A7D811784@twistedmatrix.com>
 <CAOG7vkxSj++9WPM0Ukb-siM8ZaQPAEP0otpB0eFsNqK0HCXB=g@mail.gmail.com>
 <3F914B30-7F46-4753-9789-C32F19BF891D@twistedmatrix.com>
 <CAOG7vkyDLtjGJpm3UH3T2xxfwSFJepqByZ4+HSkbv9Ug4=vRDg@mail.gmail.com>
 <CAOG7vky7Lh3VLqPM0fOKktU9ua3_Wukx7k-Og_URZEqodBKuUw@mail.gmail.com>
Message-ID: <C3E8F5B0-BAD1-4077-B15B-A96D2C361AC1@twistedmatrix.com>



> On Jan 29, 2018, at 12:27 PM, Ilya Skriblovsky <ilyaskriblovsky at gmail.com> wrote:
> 
> Never mind, I realized I didn't some steps 10+ from The Manual http://twistedmatrix.com/trac/wiki/TwistedDevelopment#SubmittingaPatch <http://twistedmatrix.com/trac/wiki/TwistedDevelopment#SubmittingaPatch>
> Will fix that
> 

No worries, the process is always a little tricky the first time :-).

Thanks for contributing!

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180129/1743c8ef/attachment-0002.html>

