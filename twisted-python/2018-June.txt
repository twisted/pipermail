From trac at twistedmatrix.com  Sun Jun  3 00:05:44 2018
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 03 Jun 2018 06:05:44 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1528005944.36.6772644004239393771@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180603/22793bb5/attachment.html>

From trac at twistedmatrix.com  Sun Jun 10 00:05:21 2018
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 10 Jun 2018 06:05:21 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1528610721.24.497839575172264120@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180610/f47a29fc/attachment.html>

From wiml at omnigroup.com  Mon Jun 11 17:23:42 2018
From: wiml at omnigroup.com (Wim Lewis)
Date: Mon, 11 Jun 2018 16:23:42 -0700
Subject: [Twisted-Python] Is someone available to review a few new RR types
 for t.n.dns?
Message-ID: <BDD83D62-057E-4582-BE6D-B38B79E3D490@omnigroup.com>

Last year I submitted a bug+PR for a few new RR types for which I needed support in Twisted. I got a lot of good review feedback from Adi Roiban, but he eventually decided that someone more familiar with twisted.names should review it, so the PR has just been sitting in github for the last couple months. Is there any such person who would be able to review it?

The PR is https://github.com/twisted/twisted/pull/954, for Trac ticket 9373. 



From mrvanes at gmail.com  Thu Jun 14 07:29:20 2018
From: mrvanes at gmail.com (Martin van Es)
Date: Thu, 14 Jun 2018 15:29:20 +0200
Subject: [Twisted-Python] How to use the TimeoutProtocol policy?
Message-ID: <CAFrnU35qGHwZjgmSHB2V+VR46Y6_E+uy5uq-nGN3=cZVRzd8xg@mail.gmail.com>

Hi,

I'm trying to timeout a really simple LineReceiver protocol.

It's function is to connect to a daemon, receive a line that's to be
displayed to an end-user upon which the user should undertake some
action. The action will trigger a second line (fail/success) at which
point the daemon will close the connection. If, however, the end-user
does not follow-up on the first challenge I want the script to timeout
with a failed result.

Now, I have the LineReceiver do exactly what I want, but I can't for
the life of me understand how I should "wrap" it in the TimoutProtocol
so that it disconnects after a couple of seconds?

This is my Factory:
class WebSSOFactory(ClientFactory):
 pamh = None
 client = None

 def __init__(self, pamh):
   self.pamh = pamh

 def clientConnectionLost(self, connector, reason):
   reactor.stop()

 def buildProtocol(self, addr):
   client = WebSSOClient()
   #client = TimeoutProtocol(self, WebSSOClient, 5)
   client.pamh = self.pamh
   self.client = client
   return client

And this is the protocol:
class WebSSOClient(LineReceiver):
 line = None
 pamh = None
 state = 'start'

 def __init__(self):
   print("__init__")
   self.setTimeout(5)

 def lineReceived(self, line):
   print("lineReceived")
   self.line = line
   if self.state == 'start':
     self.pamh.conversation(self.pamh.Message(self.pamh.PAM_PROMPT_ECHO_OFF,
"Visit http://***/login/%s to login\nand press <enter> to continue." %
line))
     self.state = None
   else:
     self.transport.loseConnection()

Before anyone starts to scream http (no s): This is all test/debug. I
want the timeout to work before I deploy to something more serious.

The client is loaded straightforward using a reactor.connectTCP() with
the instantiated factory object.

Best regards,
Martin
-- 
If 'but' was any useful, it would be a logic operator


From ldanielburr at me.com  Thu Jun 14 08:24:44 2018
From: ldanielburr at me.com (L. Daniel Burr)
Date: Thu, 14 Jun 2018 09:24:44 -0500
Subject: [Twisted-Python] How to use the TimeoutProtocol policy?
In-Reply-To: <CAFrnU35qGHwZjgmSHB2V+VR46Y6_E+uy5uq-nGN3=cZVRzd8xg@mail.gmail.com>
References: <CAFrnU35qGHwZjgmSHB2V+VR46Y6_E+uy5uq-nGN3=cZVRzd8xg@mail.gmail.com>
Message-ID: <etPan.5b227aac.8b9fbb2.1c76@me.com>

Hi Martin,

On June 14, 2018 at 8:29:45 AM, Martin van Es (mrvanes at gmail.com) wrote:

Hi,

I'm trying to timeout a really simple LineReceiver protocol.

It's function is to connect to a daemon, receive a line that's to be
displayed to an end-user upon which the user should undertake some
action. The action will trigger a second line (fail/success) at which
point the daemon will close the connection. If, however, the end-user
does not follow-up on the first challenge I want the script to timeout
with a failed result.

Now, I have the LineReceiver do exactly what I want, but I can't for
the life of me understand how I should "wrap" it in the TimoutProtocol
so that it disconnects after a couple of seconds?

This is my Factory:
class WebSSOFactory(ClientFactory):
pamh = None
client = None


I think one problem here is that your WebSSOFactory is not a TimeoutFactory (https://twistedmatrix.com/documents/current/api/twisted.protocols.policies.TimeoutFactory.html).

You have to pass a TimeoutFactory to the TimeoutProtocol in order for it to work with the LineReceiver you are wrapping, otherwise the timeout value will not be set; a regular Factoryâ€™s buildProtocol method would not know that it needs to pass the timeout to the TimeoutProtocol.

Hope this helps,

Daniel

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180614/d05320af/attachment.html>

From rodrigc at crodrigues.org  Thu Jun 14 12:21:50 2018
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Thu, 14 Jun 2018 11:21:50 -0700
Subject: [Twisted-Python] Fix link on trac for logging in
Message-ID: <CAG=rPVeDUMex7FD=kJTVc2x3fePPi2RzqT=YdhnhhS24Oai9gw@mail.gmail.com>

Hi,

If a user clicks on this link:
https://twistedmatrix.com/trac/newticket

They see this text:

You are currently not logged in. You may want to do so
<https://twistedmatrix.com/trac/login> now.

The link on "do so" is wrong.

*Can someone fix that link to point to the Github login link?*

Ideally, this link:
https://twistedmatrix.com/trac/login

should redirect to:
https://twistedmatrix.com/trac/github/login

Because there seem to be various paths that users are hitting the
first link and then getting confused when they can't log into Trac.
--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180614/2c45bf42/attachment.html>

From trac at twistedmatrix.com  Sun Jun 17 00:05:20 2018
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 17 Jun 2018 06:05:20 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1529215520.53.7823476751424465251@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180617/dc5aa82b/attachment.html>

From glyph at twistedmatrix.com  Mon Jun 18 01:38:27 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 18 Jun 2018 00:38:27 -0700
Subject: [Twisted-Python] Is someone available to review a few new RR
 types for t.n.dns?
In-Reply-To: <BDD83D62-057E-4582-BE6D-B38B79E3D490@omnigroup.com>
References: <BDD83D62-057E-4582-BE6D-B38B79E3D490@omnigroup.com>
Message-ID: <AB167D4D-22C8-4500-BBED-F177A638784C@twistedmatrix.com>



> On Jun 11, 2018, at 4:23 PM, Wim Lewis <wiml at omnigroup.com> wrote:
> 
> Last year I submitted a bug+PR for a few new RR types for which I needed support in Twisted. I got a lot of good review feedback from Adi Roiban, but he eventually decided that someone more familiar with twisted.names should review it, so the PR has just been sitting in github for the last couple months. Is there any such person who would be able to review it?
> 
> The PR is https://github.com/twisted/twisted/pull/954, for Trac ticket 9373. 

Hi Wim,

Thanks for your contribution.

As you can see on https://twisted.reviews <https://twisted.reviews/>, we're definitely a little backlogged on reviewer bandwidth :).  One way you might accelerate these reviews is by doing one for a different ticket, so that when someone has availability, fewer tickets are in the queue waiting for their attention.  Personally I can say that I'll have a look at this when my own availability permits (I'll try to get to it when I next do a review, but I'm not sure when that will be), and I will trust that your familiarity with DNS is sufficient if there are any concerns I have about the branch.

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180618/e674a40f/attachment.html>

From trac at twistedmatrix.com  Sun Jun 24 00:05:20 2018
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 24 Jun 2018 06:05:20 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1529820320.62.870016121930460375@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180624/31a42a61/attachment.html>

From meejah at meejah.ca  Mon Jun 25 21:41:50 2018
From: meejah at meejah.ca (meejah)
Date: Tue, 26 Jun 2018 07:41:50 +0400
Subject: [Twisted-Python] txtorcon 18.0.0
Message-ID: <86h8lqgqo1.fsf@atlantis.meejah.ca>


-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

I'm very pleased to announce txtorcon 18.0.0. This introduces a new
Onion services API (including v3 support) and a bunch of other changes
(including a new versioning scheme).

Starting now, versioning is more Twisted-like: the first number is the
year, the second is the "release in that year" and the minor number is
for bug-fixes. No backwards-incompatible changes will occur without
first being deprecated for at least one full release (this has been my
practice anyway, so using "SemVer" no longer made sense).

The documentation is updated with all the new Onion APIs, and a full
list of changes follows:

 * await_all_uploads= option when creating Onions
 * properly re-map progress percentages (including descriptor uploads)
 * properly wait for all event-listeners during startup
 * re-work how TorState.event_map works, hopefully reducing
   reproducible-builds issues
 * TorControlProtocol.add_event_listener and
   TorControlProtocol.remove_event_listener are now async methods
   returning Deferred -- they always should have been; new code can
   now be assured that the event-listener change is known to Tor by
   awaiting this Deferred.
 * TorControlProtocol.get_conf_single method added, which gets and returns
   (asynchronously) a single GETCONF key (instead of a dict)
 * also TorControlProtocol.get_info_single similar to above
 * if Tor disconnects while a command is in-progress or pending, the
   .errback() for the corresponding Deferred is now correctly fired
   (with a TorDisconnectError)
 * tired: get_global_tor() (now deprecated)
   wired: txtorcon.get_global_tor_instance

 * Adds a comprehensive set of Onion Services APIs (for all six
   variations). For non-authenticated services, instances of
   IOnionService represent services; for authenticated services,
   instances of IAuthenticatedOnionClients encapsulated named lists of
   clients (each client is an instance implementing IOnionService).
 * Version 3 ("Proposition 279") Onion service support (same APIs) as
   released in latest Tor
 * Four new methods to handle creating endpoints for Onion services
   (either ephemeral or not and authenticated or not):
   * Tor.create_authenticated_onion_endpoint
   * Tor.create_authenticated_filesystem_onion_endpoint
   * Tor.create_onion_endpoint
   * Tor.create_filesystem_onion_endpoint
 * see create_onion for information on how to choose an
   appropriate type of Onion Service.

 * Tor.create_onion_service to add a new ephemeral Onion service to
   Tor. This uses the ADD_ONION command under the hood and can be
   version 2 or version 3. Note that there is an endpoint-style API as
   well so you don't have to worry about mapping ports yourself (see
   below).
 * Tor.create_filesystem_onion_service to add a new Onion service to
   Tor with configuration (private keys) stored in a provided
   directory. These can be version 2 or version 3 services. Note that
   there is an endpoint-style API as well so you don't have to worry
   about mapping ports yourself (see below).

 * Additional APIs to make visiting authenticated Onion services as a
   client easier:

 * Tor.add_onion_authentication will add a client-side Onion service
   authentication token. If you add a token for a service which
   already has a token, it is an error if they don't match. This
   corresponds to HidServAuth lines in torrc.
 * Tor.remove_onion_authentication will remove a previously added
   client-side Onion service authentication token. Fires with True if
   such a token existed and was removed or False if no existing token
   was found.
 * Tor.onion_authentication (Python3 only) an async context-manager
   that adds and removes an Onion authentication token (i.e. adds in
   on __aenter__ and removes it on __aexit__). Allows code like:
 * onion services support listening on Unix paths.
 * make sure README renders on Warehouse/PyPI


You can download the release from PyPI or GitHub (or of course "pip
install txtorcon"):

   https://pypi.python.org/pypi/txtorcon/18.0.0
   https://github.com/meejah/txtorcon/releases/tag/v18.0.0

Releases are also available from the hidden service:

   http://timaq4ygg2iegci7.onion/txtorcon-18.0.0.tar.gz
   http://timaq4ygg2iegci7.onion/txtorcon-18.0.0.tar.gz.asc

...and now also available via a "version 3" service:

   http://fjblvrw2jrxnhtg67qpbzi45r7ofojaoo3orzykesly2j3c2m3htapid.onion/txtorcon-18.0.0.tar.gz
   http://fjblvrw2jrxnhtg67qpbzi45r7ofojaoo3orzykesly2j3c2m3htapid.onion/txtorcon-18.0.0.tar.gz.asc

You can verify the sha256sum of both by running the following 4 lines
in a shell wherever you have the files downloaded:

cat <<EOF | sha256sum --check
818f6ec96a9d60cb4cb47d98f2c843c7a83004c25be07daafeb9eb9aaed74f7c  dist/txtorcon-18.0.0.tar.gz
d2f91a3770d7fd8c46372e5573bb23ab65c1be33f12e9ff4ac4af24e6f5f6069  dist/txtorcon-18.0.0-py2.py3-none-any.whl
EOF

thanks,
meejah
-----BEGIN PGP SIGNATURE-----

iQFFBAEBCAAvFiEEnVor1WiOy4id680/wmAoAxKAaacFAlsogE4RHG1lZWphaEBt
ZWVqYWguY2EACgkQwmAoAxKAaadF6gf+OZ/SIZi9C2Ohce7R/ZVpw4F7qI/2ESds
T4TmAhjoc2CzGwSp+Zcxcs2RUw5Xt1lim9ckLSRBZL+agXmmarvzV6Uc3DFrL8rZ
6JUcjzd0WNYHzXXCIM11WG47/hIqRQ0gAYI9NnEF5ELJ/B03tDmXMT4KgMnnYJj2
lvewxN+2QvthCDme5lfNanDP16VGyRXKIxdKpulZfWBZ7vPe1xYgF3jpPXzkRxYu
/kKMi/BudgruiCBdYrAUa+tIqKq7H482rczszBVSvMDZuLlhPozixPEWY/rNTg4r
4d2dCz6HlQqaBkpAnB4P6udGlWfeRkRnWOO0bIPPv5FlCcmNLUKkTQ==
=jH7N
-----END PGP SIGNATURE-----


From meejah at meejah.ca  Fri Jun 29 23:11:07 2018
From: meejah at meejah.ca (meejah)
Date: Sat, 30 Jun 2018 09:11:07 +0400
Subject: [Twisted-Python] txtorcon 18.0.1
Message-ID: <86wougg8pg.fsf@atlantis.meejah.ca>


-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

Unfortunately there was a problem when parsing onion services on
Python2, which is fixed by txtorcon 18.0.1

You can download the release from PyPI or GitHub (or of
course "pip install txtorcon"):

   https://pypi.python.org/pypi/txtorcon/18.0.1
   https://github.com/meejah/txtorcon/releases/tag/v18.0.1

Releases are also available from the hidden service:

   http://timaq4ygg2iegci7.onion/txtorcon-18.0.1.tar.gz
   http://timaq4ygg2iegci7.onion/txtorcon-18.0.1.tar.gz.asc

Or via a "version 3" service:

   http://fjblvrw2jrxnhtg67qpbzi45r7ofojaoo3orzykesly2j3c2m3htapid.onion/txtorcon-18.0.1.tar.gz
   http://fjblvrw2jrxnhtg67qpbzi45r7ofojaoo3orzykesly2j3c2m3htapid.onion/txtorcon-18.0.1.tar.gz.asc

You can verify the sha256sum of both by running the following 4 lines
in a shell wherever you have the files downloaded:

cat <<EOF | sha256sum --check
4c158ee5cfc294a0e20c00dde2a146f04ebe6c6d1c3d7c164c0bd1c56e3d1bc6  dist/txtorcon-18.0.1.tar.gz
2c3f7c768bebf081d0742cdce023b4496bf3b44c423ed7f06bd8d6254e07273e  dist/txtorcon-18.0.1-py2.py3-none-any.whl
EOF

thanks,
meejah
-----BEGIN PGP SIGNATURE-----

iQFFBAEBCAAvFiEEnVor1WiOy4id680/wmAoAxKAaacFAls3D3ARHG1lZWphaEBt
ZWVqYWguY2EACgkQwmAoAxKAaadixQgA2rB6Hhx+0wDFxPDA+CubQon2wUxeszDv
Q7HGWwqrq/0HhtkaxPgxMxa3TBGumhIlAI1LMhUIGQEl4b4gEPPJddoF8FE7EJKM
yECemsJhPcznWEciK/uAIUNXYoT1Np5YwcaMgr8jhrBjYWU4054QJo1U9dtwJfwK
3XI7vItcqtE2x9itF5ggbzOE2tc5v2nh3yyk1DMwNl7+C+LhMBsz26Dqx1ODvl5y
e21eFc/2S0IU77S4qx/waSsjAJJBorJGI6HxYeQwLWF4nqE6pHIbePldqJyWAaJH
dI+akz5oyFR56/ddzikL1HY4L2xMqJ37c5ISEqzZSU5+3DT3wGTmow==
=mZu3
-----END PGP SIGNATURE-----


From wiml at omnigroup.com  Sat Jun 30 16:39:12 2018
From: wiml at omnigroup.com (Wim Lewis)
Date: Sat, 30 Jun 2018 15:39:12 -0700
Subject: [Twisted-Python] Is someone available to review a few new RR types
 for t.n.dns?
In-Reply-To: <AB167D4D-22C8-4500-BBED-F177A638784C@twistedmatrix.com>
Message-ID: <20180701004838.1.D060C1A59AD42B17@omnigroup.com>

On Mon, 18 Jun 2018 00:38:27 -0700, Glyph <glyph at twistedmatrix.com> wrote:
> someone has availability, fewer tickets are in the queue waiting for their
> attention.  Personally I can say that I'll have a look at this when my own
> availability permits (I'll try to get to it when I next do a review, but I'm not
> sure when that will be), and I will trust that your familiarity with DNS is
> sufficient if there are any concerns I have about the branch.

Thanks, Glyph, I appreciate it. I and another Twisted user have been
building things on top of these RR classes for a bit and it would
definitely be nice to have it upstreamed rather than having to
maintain our own private forks.

I took at stab at reviewing the one entry in the review queue I felt
competent to. :)


Wim.


From trac at twistedmatrix.com  Sun Jun  3 00:05:44 2018
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 03 Jun 2018 06:05:44 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1528005944.36.6772644004239393771@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180603/22793bb5/attachment-0002.html>

From trac at twistedmatrix.com  Sun Jun 10 00:05:21 2018
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 10 Jun 2018 06:05:21 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1528610721.24.497839575172264120@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180610/f47a29fc/attachment-0002.html>

From wiml at omnigroup.com  Mon Jun 11 17:23:42 2018
From: wiml at omnigroup.com (Wim Lewis)
Date: Mon, 11 Jun 2018 16:23:42 -0700
Subject: [Twisted-Python] Is someone available to review a few new RR types
 for t.n.dns?
Message-ID: <BDD83D62-057E-4582-BE6D-B38B79E3D490@omnigroup.com>

Last year I submitted a bug+PR for a few new RR types for which I needed support in Twisted. I got a lot of good review feedback from Adi Roiban, but he eventually decided that someone more familiar with twisted.names should review it, so the PR has just been sitting in github for the last couple months. Is there any such person who would be able to review it?

The PR is https://github.com/twisted/twisted/pull/954, for Trac ticket 9373. 




From mrvanes at gmail.com  Thu Jun 14 07:29:20 2018
From: mrvanes at gmail.com (Martin van Es)
Date: Thu, 14 Jun 2018 15:29:20 +0200
Subject: [Twisted-Python] How to use the TimeoutProtocol policy?
Message-ID: <CAFrnU35qGHwZjgmSHB2V+VR46Y6_E+uy5uq-nGN3=cZVRzd8xg@mail.gmail.com>

Hi,

I'm trying to timeout a really simple LineReceiver protocol.

It's function is to connect to a daemon, receive a line that's to be
displayed to an end-user upon which the user should undertake some
action. The action will trigger a second line (fail/success) at which
point the daemon will close the connection. If, however, the end-user
does not follow-up on the first challenge I want the script to timeout
with a failed result.

Now, I have the LineReceiver do exactly what I want, but I can't for
the life of me understand how I should "wrap" it in the TimoutProtocol
so that it disconnects after a couple of seconds?

This is my Factory:
class WebSSOFactory(ClientFactory):
 pamh = None
 client = None

 def __init__(self, pamh):
   self.pamh = pamh

 def clientConnectionLost(self, connector, reason):
   reactor.stop()

 def buildProtocol(self, addr):
   client = WebSSOClient()
   #client = TimeoutProtocol(self, WebSSOClient, 5)
   client.pamh = self.pamh
   self.client = client
   return client

And this is the protocol:
class WebSSOClient(LineReceiver):
 line = None
 pamh = None
 state = 'start'

 def __init__(self):
   print("__init__")
   self.setTimeout(5)

 def lineReceived(self, line):
   print("lineReceived")
   self.line = line
   if self.state == 'start':
     self.pamh.conversation(self.pamh.Message(self.pamh.PAM_PROMPT_ECHO_OFF,
"Visit http://***/login/%s to login\nand press <enter> to continue." %
line))
     self.state = None
   else:
     self.transport.loseConnection()

Before anyone starts to scream http (no s): This is all test/debug. I
want the timeout to work before I deploy to something more serious.

The client is loaded straightforward using a reactor.connectTCP() with
the instantiated factory object.

Best regards,
Martin
-- 
If 'but' was any useful, it would be a logic operator



From ldanielburr at me.com  Thu Jun 14 08:24:44 2018
From: ldanielburr at me.com (L. Daniel Burr)
Date: Thu, 14 Jun 2018 09:24:44 -0500
Subject: [Twisted-Python] How to use the TimeoutProtocol policy?
In-Reply-To: <CAFrnU35qGHwZjgmSHB2V+VR46Y6_E+uy5uq-nGN3=cZVRzd8xg@mail.gmail.com>
References: <CAFrnU35qGHwZjgmSHB2V+VR46Y6_E+uy5uq-nGN3=cZVRzd8xg@mail.gmail.com>
Message-ID: <etPan.5b227aac.8b9fbb2.1c76@me.com>

Hi Martin,

On June 14, 2018 at 8:29:45 AM, Martin van Es (mrvanes at gmail.com) wrote:

Hi,

I'm trying to timeout a really simple LineReceiver protocol.

It's function is to connect to a daemon, receive a line that's to be
displayed to an end-user upon which the user should undertake some
action. The action will trigger a second line (fail/success) at which
point the daemon will close the connection. If, however, the end-user
does not follow-up on the first challenge I want the script to timeout
with a failed result.

Now, I have the LineReceiver do exactly what I want, but I can't for
the life of me understand how I should "wrap" it in the TimoutProtocol
so that it disconnects after a couple of seconds?

This is my Factory:
class WebSSOFactory(ClientFactory):
pamh = None
client = None


I think one problem here is that your WebSSOFactory is not a TimeoutFactory (https://twistedmatrix.com/documents/current/api/twisted.protocols.policies.TimeoutFactory.html).

You have to pass a TimeoutFactory to the TimeoutProtocol in order for it to work with the LineReceiver you are wrapping, otherwise the timeout value will not be set; a regular Factoryâ€™s buildProtocol method would not know that it needs to pass the timeout to the TimeoutProtocol.

Hope this helps,

Daniel

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180614/d05320af/attachment-0002.html>

From rodrigc at crodrigues.org  Thu Jun 14 12:21:50 2018
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Thu, 14 Jun 2018 11:21:50 -0700
Subject: [Twisted-Python] Fix link on trac for logging in
Message-ID: <CAG=rPVeDUMex7FD=kJTVc2x3fePPi2RzqT=YdhnhhS24Oai9gw@mail.gmail.com>

Hi,

If a user clicks on this link:
https://twistedmatrix.com/trac/newticket

They see this text:

You are currently not logged in. You may want to do so
<https://twistedmatrix.com/trac/login> now.

The link on "do so" is wrong.

*Can someone fix that link to point to the Github login link?*

Ideally, this link:
https://twistedmatrix.com/trac/login

should redirect to:
https://twistedmatrix.com/trac/github/login

Because there seem to be various paths that users are hitting the
first link and then getting confused when they can't log into Trac.
--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180614/2c45bf42/attachment-0002.html>

From trac at twistedmatrix.com  Sun Jun 17 00:05:20 2018
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 17 Jun 2018 06:05:20 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1529215520.53.7823476751424465251@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180617/dc5aa82b/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Jun 18 01:38:27 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 18 Jun 2018 00:38:27 -0700
Subject: [Twisted-Python] Is someone available to review a few new RR
 types for t.n.dns?
In-Reply-To: <BDD83D62-057E-4582-BE6D-B38B79E3D490@omnigroup.com>
References: <BDD83D62-057E-4582-BE6D-B38B79E3D490@omnigroup.com>
Message-ID: <AB167D4D-22C8-4500-BBED-F177A638784C@twistedmatrix.com>



> On Jun 11, 2018, at 4:23 PM, Wim Lewis <wiml at omnigroup.com> wrote:
> 
> Last year I submitted a bug+PR for a few new RR types for which I needed support in Twisted. I got a lot of good review feedback from Adi Roiban, but he eventually decided that someone more familiar with twisted.names should review it, so the PR has just been sitting in github for the last couple months. Is there any such person who would be able to review it?
> 
> The PR is https://github.com/twisted/twisted/pull/954, for Trac ticket 9373. 

Hi Wim,

Thanks for your contribution.

As you can see on https://twisted.reviews <https://twisted.reviews/>, we're definitely a little backlogged on reviewer bandwidth :).  One way you might accelerate these reviews is by doing one for a different ticket, so that when someone has availability, fewer tickets are in the queue waiting for their attention.  Personally I can say that I'll have a look at this when my own availability permits (I'll try to get to it when I next do a review, but I'm not sure when that will be), and I will trust that your familiarity with DNS is sufficient if there are any concerns I have about the branch.

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180618/e674a40f/attachment-0002.html>

From trac at twistedmatrix.com  Sun Jun 24 00:05:20 2018
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 24 Jun 2018 06:05:20 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1529820320.62.870016121930460375@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180624/31a42a61/attachment-0002.html>

From meejah at meejah.ca  Mon Jun 25 21:41:50 2018
From: meejah at meejah.ca (meejah)
Date: Tue, 26 Jun 2018 07:41:50 +0400
Subject: [Twisted-Python] txtorcon 18.0.0
Message-ID: <86h8lqgqo1.fsf@atlantis.meejah.ca>


-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

I'm very pleased to announce txtorcon 18.0.0. This introduces a new
Onion services API (including v3 support) and a bunch of other changes
(including a new versioning scheme).

Starting now, versioning is more Twisted-like: the first number is the
year, the second is the "release in that year" and the minor number is
for bug-fixes. No backwards-incompatible changes will occur without
first being deprecated for at least one full release (this has been my
practice anyway, so using "SemVer" no longer made sense).

The documentation is updated with all the new Onion APIs, and a full
list of changes follows:

 * await_all_uploads= option when creating Onions
 * properly re-map progress percentages (including descriptor uploads)
 * properly wait for all event-listeners during startup
 * re-work how TorState.event_map works, hopefully reducing
   reproducible-builds issues
 * TorControlProtocol.add_event_listener and
   TorControlProtocol.remove_event_listener are now async methods
   returning Deferred -- they always should have been; new code can
   now be assured that the event-listener change is known to Tor by
   awaiting this Deferred.
 * TorControlProtocol.get_conf_single method added, which gets and returns
   (asynchronously) a single GETCONF key (instead of a dict)
 * also TorControlProtocol.get_info_single similar to above
 * if Tor disconnects while a command is in-progress or pending, the
   .errback() for the corresponding Deferred is now correctly fired
   (with a TorDisconnectError)
 * tired: get_global_tor() (now deprecated)
   wired: txtorcon.get_global_tor_instance

 * Adds a comprehensive set of Onion Services APIs (for all six
   variations). For non-authenticated services, instances of
   IOnionService represent services; for authenticated services,
   instances of IAuthenticatedOnionClients encapsulated named lists of
   clients (each client is an instance implementing IOnionService).
 * Version 3 ("Proposition 279") Onion service support (same APIs) as
   released in latest Tor
 * Four new methods to handle creating endpoints for Onion services
   (either ephemeral or not and authenticated or not):
   * Tor.create_authenticated_onion_endpoint
   * Tor.create_authenticated_filesystem_onion_endpoint
   * Tor.create_onion_endpoint
   * Tor.create_filesystem_onion_endpoint
 * see create_onion for information on how to choose an
   appropriate type of Onion Service.

 * Tor.create_onion_service to add a new ephemeral Onion service to
   Tor. This uses the ADD_ONION command under the hood and can be
   version 2 or version 3. Note that there is an endpoint-style API as
   well so you don't have to worry about mapping ports yourself (see
   below).
 * Tor.create_filesystem_onion_service to add a new Onion service to
   Tor with configuration (private keys) stored in a provided
   directory. These can be version 2 or version 3 services. Note that
   there is an endpoint-style API as well so you don't have to worry
   about mapping ports yourself (see below).

 * Additional APIs to make visiting authenticated Onion services as a
   client easier:

 * Tor.add_onion_authentication will add a client-side Onion service
   authentication token. If you add a token for a service which
   already has a token, it is an error if they don't match. This
   corresponds to HidServAuth lines in torrc.
 * Tor.remove_onion_authentication will remove a previously added
   client-side Onion service authentication token. Fires with True if
   such a token existed and was removed or False if no existing token
   was found.
 * Tor.onion_authentication (Python3 only) an async context-manager
   that adds and removes an Onion authentication token (i.e. adds in
   on __aenter__ and removes it on __aexit__). Allows code like:
 * onion services support listening on Unix paths.
 * make sure README renders on Warehouse/PyPI


You can download the release from PyPI or GitHub (or of course "pip
install txtorcon"):

   https://pypi.python.org/pypi/txtorcon/18.0.0
   https://github.com/meejah/txtorcon/releases/tag/v18.0.0

Releases are also available from the hidden service:

   http://timaq4ygg2iegci7.onion/txtorcon-18.0.0.tar.gz
   http://timaq4ygg2iegci7.onion/txtorcon-18.0.0.tar.gz.asc

...and now also available via a "version 3" service:

   http://fjblvrw2jrxnhtg67qpbzi45r7ofojaoo3orzykesly2j3c2m3htapid.onion/txtorcon-18.0.0.tar.gz
   http://fjblvrw2jrxnhtg67qpbzi45r7ofojaoo3orzykesly2j3c2m3htapid.onion/txtorcon-18.0.0.tar.gz.asc

You can verify the sha256sum of both by running the following 4 lines
in a shell wherever you have the files downloaded:

cat <<EOF | sha256sum --check
818f6ec96a9d60cb4cb47d98f2c843c7a83004c25be07daafeb9eb9aaed74f7c  dist/txtorcon-18.0.0.tar.gz
d2f91a3770d7fd8c46372e5573bb23ab65c1be33f12e9ff4ac4af24e6f5f6069  dist/txtorcon-18.0.0-py2.py3-none-any.whl
EOF

thanks,
meejah
-----BEGIN PGP SIGNATURE-----

iQFFBAEBCAAvFiEEnVor1WiOy4id680/wmAoAxKAaacFAlsogE4RHG1lZWphaEBt
ZWVqYWguY2EACgkQwmAoAxKAaadF6gf+OZ/SIZi9C2Ohce7R/ZVpw4F7qI/2ESds
T4TmAhjoc2CzGwSp+Zcxcs2RUw5Xt1lim9ckLSRBZL+agXmmarvzV6Uc3DFrL8rZ
6JUcjzd0WNYHzXXCIM11WG47/hIqRQ0gAYI9NnEF5ELJ/B03tDmXMT4KgMnnYJj2
lvewxN+2QvthCDme5lfNanDP16VGyRXKIxdKpulZfWBZ7vPe1xYgF3jpPXzkRxYu
/kKMi/BudgruiCBdYrAUa+tIqKq7H482rczszBVSvMDZuLlhPozixPEWY/rNTg4r
4d2dCz6HlQqaBkpAnB4P6udGlWfeRkRnWOO0bIPPv5FlCcmNLUKkTQ==
=jH7N
-----END PGP SIGNATURE-----



From meejah at meejah.ca  Fri Jun 29 23:11:07 2018
From: meejah at meejah.ca (meejah)
Date: Sat, 30 Jun 2018 09:11:07 +0400
Subject: [Twisted-Python] txtorcon 18.0.1
Message-ID: <86wougg8pg.fsf@atlantis.meejah.ca>


-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

Unfortunately there was a problem when parsing onion services on
Python2, which is fixed by txtorcon 18.0.1

You can download the release from PyPI or GitHub (or of
course "pip install txtorcon"):

   https://pypi.python.org/pypi/txtorcon/18.0.1
   https://github.com/meejah/txtorcon/releases/tag/v18.0.1

Releases are also available from the hidden service:

   http://timaq4ygg2iegci7.onion/txtorcon-18.0.1.tar.gz
   http://timaq4ygg2iegci7.onion/txtorcon-18.0.1.tar.gz.asc

Or via a "version 3" service:

   http://fjblvrw2jrxnhtg67qpbzi45r7ofojaoo3orzykesly2j3c2m3htapid.onion/txtorcon-18.0.1.tar.gz
   http://fjblvrw2jrxnhtg67qpbzi45r7ofojaoo3orzykesly2j3c2m3htapid.onion/txtorcon-18.0.1.tar.gz.asc

You can verify the sha256sum of both by running the following 4 lines
in a shell wherever you have the files downloaded:

cat <<EOF | sha256sum --check
4c158ee5cfc294a0e20c00dde2a146f04ebe6c6d1c3d7c164c0bd1c56e3d1bc6  dist/txtorcon-18.0.1.tar.gz
2c3f7c768bebf081d0742cdce023b4496bf3b44c423ed7f06bd8d6254e07273e  dist/txtorcon-18.0.1-py2.py3-none-any.whl
EOF

thanks,
meejah
-----BEGIN PGP SIGNATURE-----

iQFFBAEBCAAvFiEEnVor1WiOy4id680/wmAoAxKAaacFAls3D3ARHG1lZWphaEBt
ZWVqYWguY2EACgkQwmAoAxKAaadixQgA2rB6Hhx+0wDFxPDA+CubQon2wUxeszDv
Q7HGWwqrq/0HhtkaxPgxMxa3TBGumhIlAI1LMhUIGQEl4b4gEPPJddoF8FE7EJKM
yECemsJhPcznWEciK/uAIUNXYoT1Np5YwcaMgr8jhrBjYWU4054QJo1U9dtwJfwK
3XI7vItcqtE2x9itF5ggbzOE2tc5v2nh3yyk1DMwNl7+C+LhMBsz26Dqx1ODvl5y
e21eFc/2S0IU77S4qx/waSsjAJJBorJGI6HxYeQwLWF4nqE6pHIbePldqJyWAaJH
dI+akz5oyFR56/ddzikL1HY4L2xMqJ37c5ISEqzZSU5+3DT3wGTmow==
=mZu3
-----END PGP SIGNATURE-----



From wiml at omnigroup.com  Sat Jun 30 16:39:12 2018
From: wiml at omnigroup.com (Wim Lewis)
Date: Sat, 30 Jun 2018 15:39:12 -0700
Subject: [Twisted-Python] Is someone available to review a few new RR types
 for t.n.dns?
In-Reply-To: <AB167D4D-22C8-4500-BBED-F177A638784C@twistedmatrix.com>
Message-ID: <20180701004838.1.D060C1A59AD42B17@omnigroup.com>

On Mon, 18 Jun 2018 00:38:27 -0700, Glyph <glyph at twistedmatrix.com> wrote:
> someone has availability, fewer tickets are in the queue waiting for their
> attention.  Personally I can say that I'll have a look at this when my own
> availability permits (I'll try to get to it when I next do a review, but I'm not
> sure when that will be), and I will trust that your familiarity with DNS is
> sufficient if there are any concerns I have about the branch.

Thanks, Glyph, I appreciate it. I and another Twisted user have been
building things on top of these RR classes for a bit and it would
definitely be nice to have it upstreamed rather than having to
maintain our own private forks.

I took at stab at reviewing the one entry in the review queue I felt
competent to. :)


Wim.



