From exarkun at twistedmatrix.com  Sun Mar  1 00:05:11 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 01 Mar 2009 05:05:11 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1235883911.4.219651606@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090301/b00be57f/attachment.htm 

From itamar at itamarst.org  Mon Mar  2 09:08:00 2009
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 02 Mar 2009 09:08:00 -0500
Subject: [Twisted-Python] Twisted developers: please donate your time!
In-Reply-To: <aa0dfd860902240025h464a286ap7ddbbd92937d0381@mail.gmail.com>
References: <1235412728.2733.2.camel@pintsize>
	<aa0dfd860902240025h464a286ap7ddbbd92937d0381@mail.gmail.com>
Message-ID: <1236002880.30721.36.camel@pintsize>

On Tue, 2009-02-24 at 21:25 +1300, Michael Hudson wrote:
> 2009/2/24 Itamar Shtull-Trauring <itamar at itamarst.org>:
> > As part of the TSF's fundraising efforts, we are trying to get upfront
> > donations of time you will spend developing Twisted. It will then get
> > matched by a donor, if we are successful in getting this grant. So if
> > you're planning on working on Twisted anyway this year, your work will
> > count twice as much!
> >
> > So, if you're interested, please reply, saying something like "I will
> > spend two weeks working on Gopher support over the next year."
> 
> I don't entirely understand, but I will commit to spending the
> equivalent of two working weeks as a general review monkey over the
> next year.  Is that the sort of thing you wanted to hear?

Yes - thanks to you and all thee rest of the people who are
volunteering! Anyone else willing to step up?




From exarkun at divmod.com  Mon Mar  2 09:14:41 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 2 Mar 2009 09:14:41 -0500
Subject: [Twisted-Python] Twisted developers: please donate your time!
In-Reply-To: <1236002880.30721.36.camel@pintsize>
Message-ID: <20090302141441.12853.981611676.divmod.quotient.16481@henry.divmod.com>

On Mon, 02 Mar 2009 09:08:00 -0500, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
>On Tue, 2009-02-24 at 21:25 +1300, Michael Hudson wrote:
>> 2009/2/24 Itamar Shtull-Trauring <itamar at itamarst.org>:
>> > As part of the TSF's fundraising efforts, we are trying to get upfront
>> > donations of time you will spend developing Twisted. It will then get
>> > matched by a donor, if we are successful in getting this grant. So if
>> > you're planning on working on Twisted anyway this year, your work will
>> > count twice as much!
>> >
>> > So, if you're interested, please reply, saying something like "I will
>> > spend two weeks working on Gopher support over the next year."
>>
>> I don't entirely understand, but I will commit to spending the
>> equivalent of two working weeks as a general review monkey over the
>> next year.  Is that the sort of thing you wanted to hear?
>
>Yes - thanks to you and all thee rest of the people who are
>volunteering! Anyone else willing to step up?
>

I will spend the equivalent of four weeks over the next year working on
ticket triage, code reviews, Lore, and Web.

Jean-Paul



From dave at davebritton.com  Mon Mar  2 15:57:17 2009
From: dave at davebritton.com (Dave Britton)
Date: Mon, 2 Mar 2009 15:57:17 -0500
Subject: [Twisted-Python] newbie problem with SMTPClient
Message-ID: <044701c99b79$7b7086d0$0500a8c0@yoda>

I love the idea of twisted but I think I must have a twisted learning disability, as I have gotten nowhere in what ought to be a simple matter. 

I need to send out emails to small groups from my apache server running a python cgi using mod_python, but my hosting service doesn't have a MTA. Instead of learning how to install and configure exim I thought I would use twisted to make a simple mail client. I started with the tutorial example that appears at:

http://twistedmatrix.com/projects/mail/documentation/tutorial/smtpclient/smtpclient.html

(.... is indenting)
============ tutorial code ================
import StringIO
from twisted.application import service
application = service.Application("SMTP Client Tutorial")
from twisted.application import internet
from twisted.internet import protocol
from twisted.internet import defer
from twisted.mail import smtp, relaymanager
class SMTPTutorialClient(smtp.ESMTPClient):
....mailFrom = "tutorial_sender at example.com"
....mailTo = "tutorial_recipient at example.net"
....mailData = '''\
Date: Fri, 6 Feb 2004 10:14:39 -0800
From: Tutorial Guy <tutorial_sender at example.com>
To: Tutorial Gal <tutorial_recipient at example.net>
Subject: Tutorate!

Hello, how are you, goodbye.
'''
....def getMailFrom(self):
........result = self.mailFrom
........self.mailFrom = None
........return result
....def getMailTo(self):
........return [self.mailTo]
....def getMailData(self):
........return StringIO.StringIO(self.mailData)
....def sentMail(self, code, resp, numOk, addresses, log):
........print 'Sent', numOk, 'messages'
........from twisted.internet import reactor
........reactor.stop()
class SMTPClientFactory(protocol.ClientFactory):
....protocol = SMTPTutorialClient
....def buildProtocol(self, addr):
........return self.protocol(secret=None, identity='example.com')
def getMailExchange(host):
....def cbMX(mxRecord):
........return str(mxRecord.exchange)
....return relaymanager.MXCalculator().getMX(host).addCallback(cbMX)
def cbMailExchange(exchange):
....smtpClientFactory = SMTPClientFactory()
....smtpClientService = internet.TCPClient(exchange, 25, smtpClientFactory)
....smtpClientService.setServiceParent(application)
getMailExchange('example.net').addCallback(cbMailExchange)
============ end tutorial code ============

This nicely looks up the right MX record and sends out an email, just what I need. Now I want to expand it to allow me to give it a list of email addresses to send the message to (not just call this same routine multple times, which seems wasteful and slow and doesn't use twisted's power to process the multiple emails in multiple threads), but I'm having terrible trouble figuring out how to do that, which tells me I'm missing a paradigm somewhere, there's something I'm not getting.

Trouble 1 is figuring out the right way to pass additional parameters to callbacks. Is this right:

Dosomething(that-returns-a-deferred).addCallback(Then-do-the-next-thing, extra-parameter1, extraparameter2)

The function Then-do-the-next-thing() will receive the deferred returned results from Dosomething() as its first argument, and extra-parameter1 and extraparameter2 as the next two. That is as if calling:
Then-do-the-next-thing(Result-returned-by-Dosomething(),extra-parameter1, extraparameter2). Have I got this correct?

So, if this is right, then where do I want to put the additional argument that contains the next email address to send, if I iterate through the list and hand each one to the email sending process like this:

elist=['addr1 at domain.com','addr2 at nextdomain.com'...]
for e in elist:
.... e2={'mxhost':'','toaddr':e}
.... getMailExchange(e2).addCallback(cbMailExchange)

In the tutorial, getMailExchange() is passed just the domain of the addressee, and the sending out of the email happens when the callback returns the MX exchange. I changed that to split the email address, so now it returns both the full address and the mx:

def getMailExchange(addr):
.... host=addr.split('@')[1]
.... def cbMX(mxRecord):
.... .... return [addr,str(mxRecord.name)]
.... return relaymanager.MXCalculator().getMX(host).addCallback(cbMX)


At this point I can't figure out how to get the email address passed to wherever it needs to go. And I don't know really where it needs to go... yikes.

In the tutorial the actual email address is hard coded into the class SMTPTutorialClient(smtp.ESMTPClient) as a class attribute, mailTo. I need to change that to be variable.

How do I get this value (of mailTo) changed for each of the instances created by smtpClientFactory = SMTPClientFactory()? I think I must be confused about the roles of Factories and Protocols.

I can't seem to figure out a way that works to get the email address passed into the system as a variable. Rather than waste people's time by describing my various failures, I thought I'd just ask for suggestions about the right twisted way to do it. 

Thanks for any suggestions and directions!

-Dave

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090302/819d9d98/attachment.htm 

From exarkun at divmod.com  Mon Mar  2 16:22:28 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 2 Mar 2009 16:22:28 -0500
Subject: [Twisted-Python] newbie problem with SMTPClient
In-Reply-To: <044701c99b79$7b7086d0$0500a8c0@yoda>
Message-ID: <20090302212228.12853.348641046.divmod.quotient.16662@henry.divmod.com>

On Mon, 2 Mar 2009 15:57:17 -0500, Dave Britton <dave at davebritton.com> wrote:
>I love the idea of twisted but I think I must have a twisted learning disability, as I have gotten nowhere in what ought to be a simple matter.
>
>I need to send out emails to small groups from my apache server running a python cgi using mod_python, but my hosting service doesn't have a MTA. Instead of learning how to install and configure exim I thought I would use twisted to make a simple mail client. I started with the tutorial example that appears at:

It may be that installing exim is actually a better idea.  In order to get
reliable message deliver, you'll need to handle transient failures.  That
means persisting state over time (as long as several days) and performing
redelivery attempts.  However, if you don't mind losing outgoing messages
when there is a transient failure...

> [snip]
>
>This nicely looks up the right MX record and sends out an email, just what I need. Now I want to expand it to allow me to give it a list of email addresses to send the message to (not just call this same routine multple times, which seems wasteful and slow and doesn't use twisted's power to process the multiple emails in multiple threads), but I'm having terrible trouble figuring out how to do that, which tells me I'm missing a paradigm somewhere, there's something I'm not getting.

There is a reason that just calling the top-level function you've written
once for each email might be wasteful, but I don't think it's the reason
you're thinking.

If you just naively call getMailExchange(host).addCallback(cbMailExchange)
once for each email, then you will get parallel processing.  Almost as soon
as you call most Twisted APIs, they'll start an operation (to be precise,
many of them start it immediately - before they even return - and others
start it when you allow program execution flow to return to the reactor).
So if you call getMailExchange in a loop, each iteration of the loop will
start a new operation and they'll all run in parallel.  That seems like
just what you're after.

The reason this isn't the most efficient solution is that your list of
email addresses might contain two addresses which have the same mail
exchange host.  In this case, you could connect to that mail exchange
once and address your message to both addresses and then deliver the
message body to the mail exchange just once.  This is why getMailTo
returns a list.

So I think your other questions aren't directly relevant to this problem,
but I'll answer them anyway, since they're good questions.

>
>Trouble 1 is figuring out the right way to pass additional parameters to callbacks. Is this right:
>
>Dosomething(that-returns-a-deferred).addCallback(Then-do-the-next-thing, extra-parameter1, extraparameter2)
>
>The function Then-do-the-next-thing() will receive the deferred returned results from Dosomething() as its first argument, and extra-parameter1 and extraparameter2 as the next two. That is as if calling:
>Then-do-the-next-thing(Result-returned-by-Dosomething(),extra-parameter1, extraparameter2). Have I got this correct?

Yes, this is right.

>So, if this is right, then where do I want to put the additional argument that contains the next email address to send, if I iterate through the list and hand each one to the email sending process like this:
>
>elist=['addr1 at domain.com','addr2 at nextdomain.com'...]
>for e in elist:
>.... e2={'mxhost':'','toaddr':e}
>.... getMailExchange(e2).addCallback(cbMailExchange)
>

I'm not sure why you switched to a dictionary here.  Ignoring that, the
biggest potential problem with this code snippet is that it creates a
Deferred (the one returned by getMailExchange) and then drops it on the
floor (albeit after adding a callback).  You'll almost certainly want to
build up a list of Deferreds in cases like this, and then use something
like twisted.internet.defer.gatherResults to find out when they've all
fired.  Otherwise, you don't really know when your list of operations has
completed.

As to where to put extra arguments for tracking which email addresses to
send the message to next, I don't see why you'd want that in this case.
Your for loop iterates over all the addresses, so none of your callbacks
should need to know about any more addresses.  That is to say, by the end
of the for loop, there are no more addresses to which the message needs to
be sent - you've started sending to all of them already.

>In the tutorial, getMailExchange() is passed just the domain of the addressee, and the sending out of the email happens when the callback returns the MX exchange. I changed that to split the email address, so now it returns both the full address and the mx:
>
>def getMailExchange(addr):
>.... host=addr.split('@')[1]
>.... def cbMX(mxRecord):
>.... .... return [addr,str(mxRecord.name)]
>.... return relaymanager.MXCalculator().getMX(host).addCallback(cbMX)
>
>
>At this point I can't figure out how to get the email address passed to wherever it needs to go. And I don't know really where it needs to go... yikes.

Likely nothing in this code cares.  However, the address is going to be
passed to whatever callback is added to the Deferred this function
returns - because you've included it in the list returned by cbMX.

>
>In the tutorial the actual email address is hard coded into the class SMTPTutorialClient(smtp.ESMTPClient) as a class attribute, mailTo. I need to change that to be variable.
>
>How do I get this value (of mailTo) changed for each of the instances created by smtpClientFactory = SMTPClientFactory()? I think I must be confused about the roles of Factories and Protocols.

This is probably simpler than you expected - just override __init__ to
accept any extra data you need, and then save that data as an instance
attribute.

>I can't seem to figure out a way that works to get the email address passed into the system as a variable. Rather than waste people's time by describing my various failures, I thought I'd just ask for suggestions about the right twisted way to do it.

Another API you might want to look at is twisted.mail.smtp.sendmail.  It's
probably rather unfortunate that SMTP client tutorial doesn't cover that
function.

Hope this helps,

Jean-Paul



From ntoper at gmail.com  Mon Mar  2 16:55:26 2009
From: ntoper at gmail.com (Nicolas Toper)
Date: Mon, 2 Mar 2009 22:55:26 +0100
Subject: [Twisted-Python] Bug in twisted.names.client
Message-ID: <fcbb46050903021355n4237054bq2817754fc2435669@mail.gmail.com>

Hi,

It seems the resolv file in  twisted.names.client#maybeParseConfig is never
closed. This creates a     exceptions.IOError: [Errno 24] Too many open
files: '/etc/resolv.conf

(FYI  I am resolving a domain very often in my script).

Am I correct? Would you like me to submit a patch to correct this?

Best,
Nicolas
http://www.m--x--m.net
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090302/8c6e0201/attachment.htm 

From exarkun at divmod.com  Mon Mar  2 17:06:16 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 2 Mar 2009 17:06:16 -0500
Subject: [Twisted-Python] Bug in twisted.names.client
In-Reply-To: <fcbb46050903021355n4237054bq2817754fc2435669@mail.gmail.com>
Message-ID: <20090302220616.12853.1999848796.divmod.quotient.16679@henry.divmod.com>

On Mon, 2 Mar 2009 22:55:26 +0100, Nicolas Toper <ntoper at gmail.com> wrote:
>Hi,
>
>It seems the resolv file in  twisted.names.client#maybeParseConfig is never
>closed. This creates a     exceptions.IOError: [Errno 24] Too many open
>files: '/etc/resolv.conf
>
>(FYI  I am resolving a domain very often in my script).
>
>Am I correct? Would you like me to submit a patch to correct this?

It's true that it isn't explicitly closed and fixing this would be nice.
However, unless you're using Jython or PyPy I don't think this is the
cause of your IOError.  As soon as maybeParseConfig returns, CPython will
close the file, so it's not really a resource leak.

Jean-Paul



From ntoper at gmail.com  Mon Mar  2 17:33:57 2009
From: ntoper at gmail.com (Nicolas Toper)
Date: Mon, 2 Mar 2009 23:33:57 +0100
Subject: [Twisted-Python] Bug in twisted.names.client
In-Reply-To: <20090302220616.12853.1999848796.divmod.quotient.16679@henry.divmod.com>
References: <fcbb46050903021355n4237054bq2817754fc2435669@mail.gmail.com>
	<20090302220616.12853.1999848796.divmod.quotient.16679@henry.divmod.com>
Message-ID: <fcbb46050903021433t36946e56le84ac48eccfbb8c4@mail.gmail.com>

Good point, you are right. Thanks :)

 I can still commit a patch: really there just need a finally clause at the
end of maybeParseConfig to close the file AFAI

Best,
Nicolas

On Mon, Mar 2, 2009 at 11:06 PM, Jean-Paul Calderone <exarkun at divmod.com>wrote:

> On Mon, 2 Mar 2009 22:55:26 +0100, Nicolas Toper <ntoper at gmail.com> wrote:
>
>> Hi,
>>
>> It seems the resolv file in  twisted.names.client#maybeParseConfig is
>> never
>> closed. This creates a     exceptions.IOError: [Errno 24] Too many open
>> files: '/etc/resolv.conf
>>
>> (FYI  I am resolving a domain very often in my script).
>>
>> Am I correct? Would you like me to submit a patch to correct this?
>>
>
> It's true that it isn't explicitly closed and fixing this would be nice.
> However, unless you're using Jython or PyPy I don't think this is the
> cause of your IOError.  As soon as maybeParseConfig returns, CPython will
> close the file, so it's not really a resource leak.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090302/e8bb5353/attachment.htm 

From exarkun at divmod.com  Mon Mar  2 17:42:59 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 2 Mar 2009 17:42:59 -0500
Subject: [Twisted-Python] Bug in twisted.names.client
In-Reply-To: <fcbb46050903021433t36946e56le84ac48eccfbb8c4@mail.gmail.com>
Message-ID: <20090302224259.12853.1827211656.divmod.quotient.16696@henry.divmod.com>

On Mon, 2 Mar 2009 23:33:57 +0100, Nicolas Toper <ntoper at gmail.com> wrote:
>Good point, you are right. Thanks :)
>
> I can still commit a patch: really there just need a finally clause at the
>end of maybeParseConfig to close the file AFAI

A patch (with unit test :) would be quite welcome.  Please open a ticket
at http://twistedmatrix.com/trac/ (you'll need to register an account
first) and attach it there.

Jean-Paul



From glyph at divmod.com  Tue Mar  3 00:41:58 2009
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 03 Mar 2009 05:41:58 -0000
Subject: [Twisted-Python] Twisted developers: please donate your time!
In-Reply-To: <1236002880.30721.36.camel@pintsize>
References: <1235412728.2733.2.camel@pintsize>
	<aa0dfd860902240025h464a286ap7ddbbd92937d0381@mail.gmail.com>
	<1236002880.30721.36.camel@pintsize>
Message-ID: <20090303054158.12555.759735924.divmod.xquotient.5113@weber.divmod.com>


On 2 Mar, 02:08 pm, itamar at itamarst.org wrote:
>On Tue, 2009-02-24 at 21:25 +1300, Michael Hudson wrote:
>>2009/2/24 Itamar Shtull-Trauring <itamar at itamarst.org>:
>> > As part of the TSF's fundraising efforts, we are trying to get 
>>upfront
>> > donations of time you will spend developing Twisted. It will then 
>>get
>> > matched by a donor, if we are successful in getting this grant. So 
>>if
>> > you're planning on working on Twisted anyway this year, your work 
>>will
>> > count twice as much!
>> >
>> > So, if you're interested, please reply, saying something like "I 
>>will
>> > spend two weeks working on Gopher support over the next year."
>>
>>I don't entirely understand, but I will commit to spending the
>>equivalent of two working weeks as a general review monkey over the
>>next year.  Is that the sort of thing you wanted to hear?
>
>Yes - thanks to you and all thee rest of the people who are
>volunteering! Anyone else willing to step up?

Sorry for the delay - I started writing a program to calculate my 
minimum probable contribution over the next year, and got stuck on that 
:).

In addition to attending most of the sprints, which add up to roughly 
three weeks of work (including the PyCon sprint), I plan to spend at 
least the equivalent of one week on general reviews and one week on new 
development on the coming year.

So let's call that 5 weeks of work.



From petshmidt at googlemail.com  Tue Mar  3 07:17:48 2009
From: petshmidt at googlemail.com (Pet)
Date: Tue, 3 Mar 2009 13:17:48 +0100
Subject: [Twisted-Python] util.quote deprecated
In-Reply-To: <b460e9630903030414s208fc745odf54d8a3f611ab70@mail.gmail.com>
References: <b460e9630903030414s208fc745odf54d8a3f611ab70@mail.gmail.com>
Message-ID: <b460e9630903030417x23d50e2epe617faafcf41c339@mail.gmail.com>

Hi,

what is a proper way to escape user input in database query strings?
I've used quote from twisted.enterprise.util, but it is deprecated now.
Is there any other module for this purpose?

Thanks, Pet
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090303/db6a63ae/attachment.htm 

From amauryfa at gmail.com  Tue Mar  3 07:50:47 2009
From: amauryfa at gmail.com (Amaury Forgeot d'Arc)
Date: Tue, 3 Mar 2009 13:50:47 +0100
Subject: [Twisted-Python] util.quote deprecated
In-Reply-To: <b460e9630903030417x23d50e2epe617faafcf41c339@mail.gmail.com>
References: <b460e9630903030414s208fc745odf54d8a3f611ab70@mail.gmail.com>
	<b460e9630903030417x23d50e2epe617faafcf41c339@mail.gmail.com>
Message-ID: <e27efe130903030450x33a1bdi1fdec1d05229fed6@mail.gmail.com>

On Tue, Mar 3, 2009 at 13:17, Pet <petshmidt at googlemail.com> wrote:
> Hi,
>
> what is a proper way to escape user input in database query strings?
> I've used quote from twisted.enterprise.util, but it is deprecated now.
> Is there any other module for this purpose?

I can't do better than quote the sqlite documentation. I Hope this helps!
http://docs.python.org/library/sqlite3.html

"""
Usually your SQL operations will need to use values from Python
variables. You shouldn?t assemble your query using Python?s string
operations because doing so is insecure; it makes your program
vulnerable to an SQL injection attack.

Instead, use the DB-API?s parameter substitution. Put ? as a
placeholder wherever you want to use a value, and then provide a tuple
of values as the second argument to the cursor?s execute() method.
(Other database modules may use a different placeholder, such as %s or
:1.) For example:

# Never do this -- insecure!
symbol = 'IBM'
c.execute("... where symbol = '%s'" % symbol)

# Do this instead
t = (symbol,)
c.execute('select * from stocks where symbol=?', t)

# Larger example
for t in [('2006-03-28', 'BUY', 'IBM', 1000, 45.00),
          ('2006-04-05', 'BUY', 'MSOFT', 1000, 72.00),
          ('2006-04-06', 'SELL', 'IBM', 500, 53.00),
         ]:
    c.execute('insert into stocks values (?,?,?,?,?)', t)
"""

-- 
Amaury Forgeot d'Arc



From exarkun at divmod.com  Tue Mar  3 07:56:53 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 3 Mar 2009 07:56:53 -0500
Subject: [Twisted-Python] util.quote deprecated
In-Reply-To: <b460e9630903030417x23d50e2epe617faafcf41c339@mail.gmail.com>
Message-ID: <20090303125653.12853.1308016385.divmod.quotient.17032@henry.divmod.com>

On Tue, 3 Mar 2009 13:17:48 +0100, Pet <petshmidt at googlemail.com> wrote:
>Hi,
>
>what is a proper way to escape user input in database query strings?
>I've used quote from twisted.enterprise.util, but it is deprecated now.
>Is there any other module for this purpose?

The proper way is with "bind parameters".  This keeps SQL separate from
data and removes the entire category of bugs due to misquoting.  The way
to use bind parameters is to pass the SQL string as a separate argument
from the SQL data.  Using DB-API 2.0, this means something like:

    cursor.execute("SELECT foo FROM bar WHERE baz = ?", (3,))

Using ADBAPI, it means something very similar:

    connpool.runQuery("SELECT foo FROM bar WHERE baz = ?", (3,))

Different database adapters use different syntaxes for the "?" part.  The
`paramstyle? attribute of the DB-API 2.0 module tells you what syntax a
particular module uses.  See the DB-API 2.0 PEP
(< http://www.python.org/dev/peps/pep-0249/>) for details.

Jean-Paul



From screwtape at froup.com  Tue Mar  3 08:04:04 2009
From: screwtape at froup.com (Tim Allen)
Date: Wed, 4 Mar 2009 00:04:04 +1100
Subject: [Twisted-Python] util.quote deprecated
In-Reply-To: <b460e9630903030417x23d50e2epe617faafcf41c339@mail.gmail.com>
References: <b460e9630903030414s208fc745odf54d8a3f611ab70@mail.gmail.com>
	<b460e9630903030417x23d50e2epe617faafcf41c339@mail.gmail.com>
Message-ID: <20090303130404.GO3737@thristian.org>

On Tue, Mar 03, 2009 at 01:17:48PM +0100, Pet wrote:
> what is a proper way to escape user input in database query strings?
> I've used quote from twisted.enterprise.util, but it is deprecated now.
> Is there any other module for this purpose?

The correct way to escape user input is not to do it at all, but rather
to leave it up to the DB-API module you're using:

    from twisted.enterprise.adbapi import ConnectionPool

    pool = ConnectionPool("psycopg2")
    d = pool.runQuery("""
	SELECT *
	FROM students
	WHERE name = %s
	""", "Robert '); DROP TABLE students;--")

Note that although I've used "%s" in the query, this is not normal
Python string-formatting, the "%s" is just tells the DB-API module I'm
using (in this case, psycopg2 for PostgreSQL) to quote one of the extra
parameters and insert in that spot. Look up "paramstyle" in the DB-API
spec[1] and the documentation for the DB-API module you're using for
more details.

[1] http://www.python.org/dev/peps/pep-0249/



From petshmidt at googlemail.com  Tue Mar  3 08:49:37 2009
From: petshmidt at googlemail.com (Pet)
Date: Tue, 3 Mar 2009 14:49:37 +0100
Subject: [Twisted-Python] util.quote deprecated
In-Reply-To: <20090303130404.GO3737@thristian.org>
References: <b460e9630903030414s208fc745odf54d8a3f611ab70@mail.gmail.com>
	<b460e9630903030417x23d50e2epe617faafcf41c339@mail.gmail.com>
	<20090303130404.GO3737@thristian.org>
Message-ID: <b460e9630903030549g2b8b014enbe73d373684a6c0b@mail.gmail.com>

On Tue, Mar 3, 2009 at 2:04 PM, Tim Allen <screwtape at froup.com> wrote:

> On Tue, Mar 03, 2009 at 01:17:48PM +0100, Pet wrote:
> > what is a proper way to escape user input in database query strings?
> > I've used quote from twisted.enterprise.util, but it is deprecated now.
> > Is there any other module for this purpose?
>
> The correct way to escape user input is not to do it at all, but rather
> to leave it up to the DB-API module you're using:
>
>    from twisted.enterprise.adbapi import ConnectionPool
>
>    pool = ConnectionPool("psycopg2")
>    d = pool.runQuery("""
>        SELECT *
>        FROM students
>        WHERE name = %s
>        """, "Robert '); DROP TABLE students;--")
>
> Note that although I've used "%s" in the query, this is not normal
> Python string-formatting, the "%s" is just tells the DB-API module I'm
> using (in this case, psycopg2 for PostgreSQL) to quote one of the extra
> parameters and insert in that spot. Look up "paramstyle" in the DB-API
> spec[1] and the documentation for the DB-API module you're using for
> more details.
>
> [1] http://www.python.org/dev/peps/pep-0249/
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


Thanks for all your answers! It works fine in that way. But what, if I
compose my query? For example:

def getData(self, type=''):
    id = 1
    if type:
        str = " AND mytype = %s " % type
    str = ''
    query = "SELECT * FROM table WHERE id = %s %s " % (id,str)
    cur.execute(query)

I mean, str part is not always there and I need escape it only if type is
passed to function

Thanks, Pet
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090303/55f5b547/attachment.htm 

From johnaherne at rocs.co.uk  Tue Mar  3 11:39:46 2009
From: johnaherne at rocs.co.uk (John Aherne)
Date: Tue, 3 Mar 2009 16:39:46 +0000
Subject: [Twisted-Python] too many file descriptors in select
Message-ID: <faf2d7810903030839k2f869674n5746f53722373d6f@mail.gmail.com>

I have started to get this message coming up on a fairly regular basis now.

I have an application that is very simple and has run by and large without
problem for about 7 months. But over the pas 4 - 6 weeks has started to
produce this error 'too many file descriptors in select'. The application
basically falls over at this point, since it can't service any more
requests.

I am running on Windows XP sp2, python 2.4.4, twisted 2.5.

The application consists of about 150+ vehicles sending back gps tracks
every 20 seconds. We collect these, log them, store them in a database and
then update a current status. So nothing very elaborate.

I have been through the archives to search for some help and have found some
discussion of the problem going back to 2004, but nothing that looks like
something I could get a handle on to solving my problem. In fact most of the
information seems rather inconclusive especially with regard to Windows.

If there is a 'so-called solution' with an update or some sort of workround-
that would be great. Or is it a practical proposition to attempt to trap the
error myself and potentially restart the service or the whole application.
Or is there a different and better path to take.

Of course I am not sure how I would get in to pick up the exception and deal
with it. So if that is a starter I wouldn't object to some help on that.

Anyway thanks for any feedback.

John Aherne
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090303/fe5f68e1/attachment.htm 

From itamar at itamarst.org  Tue Mar  3 12:24:24 2009
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 03 Mar 2009 12:24:24 -0500
Subject: [Twisted-Python] too many file descriptors in select
In-Reply-To: <faf2d7810903030839k2f869674n5746f53722373d6f@mail.gmail.com>
References: <faf2d7810903030839k2f869674n5746f53722373d6f@mail.gmail.com>
Message-ID: <49AD67C8.9030007@itamarst.org>

John Aherne wrote:
> I have started to get this message coming up on a fairly regular basis 
> now.
>
> I have an application that is very simple and has run by and large 
> without problem for about 7 months. But over the pas 4 - 6 weeks has 
> started to produce this error 'too many file descriptors in select'. 
> The application basically falls over at this point, since it can't 
> service any more requests.
Assuming that you've made sure you aren't leaking any connections, you 
are still faced with the problem of that the select module on Windows is 
limited to 512 file descriptors. Your options:

1. Switch to Linux, where you can use other reactors with a much higher 
limit, e.g. epoll.
2. Use the IOCP reactor on Windows, which isn't as well tested and is 
missing some features, in particular SSL support.
3. Recompile the select module on Windows with a higher limit; basically 
it's some C constant you redefine, it's probably right at the top of the 
file. You just get the Python tarball, and rebuild the appropriate 
module (or everything and just extract the appropriate PYD).

-Itamar, still living the voice-recognition life




From paulswartz at gmail.com  Tue Mar  3 14:05:25 2009
From: paulswartz at gmail.com (Paul Swartz)
Date: Tue, 3 Mar 2009 14:05:25 -0500
Subject: [Twisted-Python] Twisted developers: please donate your time!
In-Reply-To: <20090303054158.12555.759735924.divmod.xquotient.5113@weber.divmod.com>
References: <1235412728.2733.2.camel@pintsize>
	<aa0dfd860902240025h464a286ap7ddbbd92937d0381@mail.gmail.com>
	<1236002880.30721.36.camel@pintsize>
	<20090303054158.12555.759735924.divmod.xquotient.5113@weber.divmod.com>
Message-ID: <324cfb540903031105l45b6a7daq30ebbb471e31ce88@mail.gmail.com>

On Tue, Mar 3, 2009 at 12:41 AM,  <glyph at divmod.com> wrote:
>
> On 2 Mar, 02:08 pm, itamar at itamarst.org wrote:
>>
>> On Tue, 2009-02-24 at 21:25 +1300, Michael Hudson wrote:
>>>
>>> 2009/2/24 Itamar Shtull-Trauring <itamar at itamarst.org>:
>>> > As part of the TSF's fundraising efforts, we are trying to get upfront
>>> > donations of time you will spend developing Twisted. It will then get
>>> > matched by a donor, if we are successful in getting this grant. So if
>>> > you're planning on working on Twisted anyway this year, your work will
>>> > count twice as much!
>>> >
>>> > So, if you're interested, please reply, saying something like "I will
>>> > spend two weeks working on Gopher support over the next year."
>>>
>>> I don't entirely understand, but I will commit to spending the
>>> equivalent of two working weeks as a general review monkey over the
>>> next year. ?Is that the sort of thing you wanted to hear?
>>
>> Yes - thanks to you and all thee rest of the people who are
>> volunteering! Anyone else willing to step up?

I will commit to spending 2 weeks on Conch in the coming year.

-p
-- 
Paul Swartz
paulswartz at gmail dot com
http://paulswartz.net/
AIM: z3penguin



From johnaherne at rocs.co.uk  Tue Mar  3 16:43:00 2009
From: johnaherne at rocs.co.uk (John Aherne)
Date: Tue, 3 Mar 2009 21:43:00 +0000
Subject: [Twisted-Python] too many file descriptors in select
In-Reply-To: <49AD67C8.9030007@itamarst.org>
References: <faf2d7810903030839k2f869674n5746f53722373d6f@mail.gmail.com>
	<49AD67C8.9030007@itamarst.org>
Message-ID: <faf2d7810903031343q6732015ew7cfca15bbbc5185b@mail.gmail.com>

Thanks for the information. Looks pretty conclusive.
Thinking about it, I reckon I must be leaking connections. So I'll go and
look.

Thanks again

John Aherne


On Tue, Mar 3, 2009 at 5:24 PM, Itamar Shtull-Trauring
<itamar at itamarst.org>wrote:

> John Aherne wrote:
>
>> I have started to get this message coming up on a fairly regular basis
>> now.
>>
>> I have an application that is very simple and has run by and large without
>> problem for about 7 months. But over the pas 4 - 6 weeks has started to
>> produce this error 'too many file descriptors in select'. The application
>> basically falls over at this point, since it can't service any more
>> requests.
>>
> Assuming that you've made sure you aren't leaking any connections, you are
> still faced with the problem of that the select module on Windows is limited
> to 512 file descriptors. Your options:
>
> 1. Switch to Linux, where you can use other reactors with a much higher
> limit, e.g. epoll.
> 2. Use the IOCP reactor on Windows, which isn't as well tested and is
> missing some features, in particular SSL support.
> 3. Recompile the select module on Windows with a higher limit; basically
> it's some C constant you redefine, it's probably right at the top of the
> file. You just get the Python tarball, and rebuild the appropriate module
> (or everything and just extract the appropriate PYD).
>
> -Itamar, still living the voice-recognition life
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090303/56d6f724/attachment.htm 

From eburus at gmail.com  Wed Mar  4 03:37:00 2009
From: eburus at gmail.com (Burus)
Date: Wed, 4 Mar 2009 11:37:00 +0300
Subject: [Twisted-Python] Twisted developers: please donate your time!
In-Reply-To: <324cfb540903031105l45b6a7daq30ebbb471e31ce88@mail.gmail.com>
References: <1235412728.2733.2.camel@pintsize>
	<aa0dfd860902240025h464a286ap7ddbbd92937d0381@mail.gmail.com>
	<1236002880.30721.36.camel@pintsize>
	<20090303054158.12555.759735924.divmod.xquotient.5113@weber.divmod.com>
	<324cfb540903031105l45b6a7daq30ebbb471e31ce88@mail.gmail.com>
Message-ID: <f564d0090903040037w290cbfb6q144c784b4b28bc33@mail.gmail.com>

I will spend about two weeks to update code and english docs for the
http://fats.burus.org projectand about 4 weeks to contribute abstract
database synchronizer engine (dbsync) based on the twisted for the
twisted-python community under the MIT license. I have negotiations with our
organization(government media company in the Russia) to make it possible.

On Tue, Mar 3, 2009 at 10:05 PM, Paul Swartz <paulswartz at gmail.com> wrote:

> On Tue, Mar 3, 2009 at 12:41 AM,  <glyph at divmod.com> wrote:
> >
> > On 2 Mar, 02:08 pm, itamar at itamarst.org wrote:
> >>
> >> On Tue, 2009-02-24 at 21:25 +1300, Michael Hudson wrote:
> >>>
> >>> 2009/2/24 Itamar Shtull-Trauring <itamar at itamarst.org>:
> >>> > As part of the TSF's fundraising efforts, we are trying to get
> upfront
> >>> > donations of time you will spend developing Twisted. It will then get
> >>> > matched by a donor, if we are successful in getting this grant. So if
> >>> > you're planning on working on Twisted anyway this year, your work
> will
> >>> > count twice as much!
> >>> >
> >>> > So, if you're interested, please reply, saying something like "I will
> >>> > spend two weeks working on Gopher support over the next year."
> >>>
> >>> I don't entirely understand, but I will commit to spending the
> >>> equivalent of two working weeks as a general review monkey over the
> >>> next year.  Is that the sort of thing you wanted to hear?
> >>
> >> Yes - thanks to you and all thee rest of the people who are
> >> volunteering! Anyone else willing to step up?
>
> I will commit to spending 2 weeks on Conch in the coming year.
>
> -p
> --
> Paul Swartz
> paulswartz at gmail dot com
> http://paulswartz.net/
> AIM: z3penguin
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090304/4a3eb95b/attachment.htm 

From newptcai at gmail.com  Wed Mar  4 06:28:24 2009
From: newptcai at gmail.com (Peter Cai)
Date: Wed, 4 Mar 2009 19:28:24 +0800
Subject: [Twisted-Python] Using sqlalchemy in twisted.
Message-ID: <befee6d80903040328y44051147ja2fc369423a98c84@mail.gmail.com>

Hi, all

I am using sqlalchemy in twisted in my project in the way below.
Defer any database operation so the twisted's main thread won't be
blocked.

And I use scoped_session, so that sessions won't have to be created
again and again.

======================================
class Database()
    def __init__(self, conn_str):
        self.conn_str = conn_str
        self.engine = create_engine(self.conn_str, echo=False)
        self.Session = scoped_session(sessionmaker(bind = self.engine,
             expire_on_commit=False))

    def getObjectById(self, klass, id):
        return threads.deferToThread(self._getObjectById, klass, id)

    def _getObjectById(self, klass, id):
        sess = self.Session()
        return sess.query(klass).get(id)
======================================

The code doesn't work.   When I limit the thread numbers to 1

    reactor.suggestThreadPoolSize(1)

Everything goes fine.  Other wise the server would be blocked and must
be killed by "kill 9 ...".

The result conflicts with my understanding of sqlalchemy.  Since I
don't share any object between threads, there should be no problem!

Ah....  It always have risk to use something you haven't tried
before ....
I think I have no choice but always set thread pool size to 1 ...

-- 
look to the things around you,the immediate world around you, if you are
alive,it will mean something to you ??Paul Strand
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090304/45c5639b/attachment.htm 

From rgacote at AppropriateSolutions.com  Wed Mar  4 08:32:26 2009
From: rgacote at AppropriateSolutions.com (Raymond Cote)
Date: Wed, 04 Mar 2009 08:32:26 -0500
Subject: [Twisted-Python] Twisted developers: please donate your time!
In-Reply-To: <1236002880.30721.36.camel@pintsize>
References: <1235412728.2733.2.camel@pintsize>	<aa0dfd860902240025h464a286ap7ddbbd92937d0381@mail.gmail.com>
	<1236002880.30721.36.camel@pintsize>
Message-ID: <49AE82EA.5000907@AppropriateSolutions.com>

Itamar Shtull-Trauring wrote:
> Yes - thanks to you and all thee rest of the people who are
> volunteering! Anyone else willing to step up?
>   
I'll commit to one week to create and document another example for the 
web site.




From hasham_james_007 at yahoo.com  Wed Mar  4 09:39:59 2009
From: hasham_james_007 at yahoo.com (khawar hasham)
Date: Wed, 4 Mar 2009 06:39:59 -0800 (PST)
Subject: [Twisted-Python] how to pass on the connection failed or connection
	lost error
Message-ID: <32319.96900.qm@web53508.mail.re2.yahoo.com>

Hi

let me first explain the application that I am developing. I have an application that will use the twisted part as a plugin. this twisted part will act as server and as client both. 
my application call the plugin method to send data to server module using connectTCP. now the problem is I can not pass on the connection failed exception to my calling application. 

To explain it further, here is the dummy code

class MyReactor(threading.Thread):

??????? def __init__(self):

????????????? threading.Thread.__init__(self)

????? ? def run(self):

????????????? reactor.run(installSignalHandlers=0)



class MyFactory(ClientFactory):

???????? def __init__(self):

????????????? self.msg = None



???????? def setMsg(self, msg):

?????????????? self.msg = msg



? ? ? ?? def connectionFailed(self, connector, reason):

? ? ? ? ? ? ? ?#here i need to send the exception back to the user? 


class Plugin:
???????? def __init__(self):
????????????? self.running = False

???????? def send(self, msg):
?????????????? reactor.callFromThread(self.clientsend, msg)
???????? def clientsend(self, msg):
?????????????? myfactory = MyFactory()
?????????????? myfactory.setMsg(msg)
?????????????? reactor.connectTCP ('localhost',9999)
?????????????? if( not self.running):
????????????????? mr = MyReactor()

? ? ?? ? ? ? ? ?? mr.start()
????????????????? self.running = True

???????? def startServer(self):
?????????????? reactor.listenTCP(9999,ServerFactory())
?????????????? if( not self.running):
? ?? ? ? ? ? ? ?? mr = MyReactor()
? ? ?? ? ? ? ? ?? mr.start()
? ? ? ? ? ? ? ? ? self.running = True 

class PluginTest:
??????? def __init__(self):
? ? ? ? ? ?? self.plugin = Plugin() 
??????? def start(self):
????????????? self.plugin.startServer()
??????? def send(self,msg):
????????????? try:
????????????????? self.plugin.send(msg)
????????????? except:
???????????????????? #I want to print send error here
???????????????????? # error could be connection fail

ptest = PluginTest()
#I m not starting the server so that I could get the connectionfail error
ptest.send('hi')

Can you suggest me any work around to get the exception in the PluginUser.send method



      
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090304/a60e93a2/attachment.htm 

From exarkun at divmod.com  Wed Mar  4 09:59:42 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 4 Mar 2009 09:59:42 -0500
Subject: [Twisted-Python] how to pass on the connection failed or
	connection lost error
In-Reply-To: <32319.96900.qm@web53508.mail.re2.yahoo.com>
Message-ID: <20090304145942.12853.42253504.divmod.quotient.17917@henry.divmod.com>

On Wed, 4 Mar 2009 06:39:59 -0800 (PST), khawar hasham <hasham_james_007 at yahoo.com> wrote:
>Hi
>
>let me first explain the application that I am developing. I have an application that will use the twisted part as a plugin. this twisted part will act as server and as client both.
>my application call the plugin method to send data to server module using connectTCP. now the problem is I can not pass on the connection failed exception to my calling application.

Since you're running the reactor in one thread and the rest of your
application in another thread, your question is basically one of message
passing.  You've already found reactor.callFromThread which is good; I
think you just want the slightly more featureful version, available in
twisted.internet.threads, blockingCallFromThread.  This is implemented
in terms of callFromThread, but additionally allows the caller to get
the result of the function being called - including waiting on a Deferred
if the function being called returns one.  If you switch to this, then
you only need to make Plugin.clientsend return a Deferred which eventually
fires with a result or a Failure.

Jean-Paul



From andrewfr_ice at yahoo.com  Wed Mar  4 12:34:54 2009
From: andrewfr_ice at yahoo.com (Andrew Francis)
Date: Wed, 4 Mar 2009 09:34:54 -0800 (PST)
Subject: [Twisted-Python] Re: Twisted developers: please donate your time!
Message-ID: <877624.83683.qm@web34201.mail.mud.yahoo.com>


Hi Itamar and Colleages:


>As part of the TSF's fundraising efforts, we are trying to get upfront
>donations of time you will spend developing Twisted. It will then get
>matched by a donor, if we are successful in getting this grant. So if
>you're planning on working on Twisted anyway this year, your work will
>count twice as much!

I would happy to donate some time to developing Twisted. However  since the only Twisted code I have really looked at is the reactor, I am not sure where I can contribute. Off-hand documentation is a safe bet. Perhaps you provide suggestions and I can figure out whether I can do it, when, and how much time I can devote?

Cheers,
Andrew




      



From exarkun at divmod.com  Wed Mar  4 13:04:21 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 4 Mar 2009 13:04:21 -0500
Subject: [Twisted-Python] Re: Twisted developers: please donate your time!
In-Reply-To: <877624.83683.qm@web34201.mail.mud.yahoo.com>
Message-ID: <20090304180421.12853.1593529253.divmod.quotient.18031@henry.divmod.com>

On Wed, 4 Mar 2009 09:34:54 -0800 (PST), Andrew Francis <andrewfr_ice at yahoo.com> wrote:
>
>Hi Itamar and Colleages:
>
>>As part of the TSF's fundraising efforts, we are trying to get upfront
>>donations of time you will spend developing Twisted. It will then get
>>matched by a donor, if we are successful in getting this grant. So if
>>you're planning on working on Twisted anyway this year, your work will
>>count twice as much!
>
>I would happy to donate some time to developing Twisted. However  since the only Twisted code I have really looked at is the reactor, I am not sure where I can contribute. Off-hand documentation is a safe bet. Perhaps you provide suggestions and I can figure out whether I can do it, when, and how much time I can devote?

http://twistedmatrix.com/trac/query?status=new&status=assigned&status=reopened&keywords=~documentation&order=priority shows all of the open tickets with the "documentation" keyword.  So there's a lot to choose from, many are about the reactor.  There's also one, #1009, about deferredGenerator/inlineCallbacks.  I think you're somewhat familiar with those?

It's also certainly the case that there are tickets open for reactor problems, so if you feel comfortable with that part of Twisted, there's plenty to contribute to.

Jean-Paul



From dialtone at gmail.com  Wed Mar  4 14:04:58 2009
From: dialtone at gmail.com (Valentino Volonghi)
Date: Wed, 4 Mar 2009 11:04:58 -0800
Subject: [Twisted-Python] Using sqlalchemy in twisted.
In-Reply-To: <befee6d80903040328y44051147ja2fc369423a98c84@mail.gmail.com>
References: <befee6d80903040328y44051147ja2fc369423a98c84@mail.gmail.com>
Message-ID: <F4366C21-62E0-479F-98DF-A13F77BFCF41@gmail.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Mar 4, 2009, at 3:28 AM, Peter Cai wrote:

> The code doesn't work.   When I limit the thread numbers to 1
>
>    reactor.suggestThreadPoolSize(1)
>
> Everything goes fine.  Other wise the server would be blocked and must
> be killed by "kill 9 ...".
>
> The result conflicts with my understanding of sqlalchemy.  Since I
> don't share any object between threads, there should be no problem!

I'm pretty sure you can't say this with full certainty and actually  
you are
just wrong based on the code you showed. deferToThread doesn't use
the same thread every time you call it, there's absolutely no guarantee
in that and sqlalchemy keeps state around in that thread related to that
object it returned. If you want to do any operations you need either to
detach the object from the session before returning it and do any  
modification
on the same object in another thread after reattaching it (pretty  
cumbersome).

Or write your own threadpool that gives names to threads so that you can
have a guarantee that you always call the same thread when working with
a bunch of objects.

Nonetheless though sqlalchemy is a huge project and I'm pretty sure it  
has
some deadlocks and race conditions around which means that even taking
care of these issues you'll have other problems when dealing with the  
orm.

If you want to use sqlalchemy don't use its orm but just the query  
builder,
it's the only sane way to integrate with twisted. Which anyway IMHO is  
the
best way to use it anyway because it uses a lot less memory since it  
doesn't
have to always cache objects because you control everything and can make
that call when you really need it.

> Ah....  It always have risk to use something you haven't tried
> before ....
> I think I have no choice but always set thread pool size to 1 ...


Not entirely true.

- --
Valentino Volonghi aka Dialtone
Now running MacOS X 10.5
Home Page: http://www.twisted.it
http://www.adroll.com

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.9 (Darwin)

iEYEARECAAYFAkmu0NoACgkQ9Llz28widGXBawCg32svBsLqsIRLzvzOThgR4sA0
5UkAoIgNfyUDPl9c0nwSud0sem3aKjz5
=2XIX
-----END PGP SIGNATURE-----



From cfoster at oda.state.or.us  Wed Mar  4 14:15:00 2009
From: cfoster at oda.state.or.us (Chris Foster)
Date: Wed, 4 Mar 2009 11:15:00 -0800
Subject: [Twisted-Python] Using sqlalchemy in twisted.
In-Reply-To: <F4366C21-62E0-479F-98DF-A13F77BFCF41@gmail.com>
References: <befee6d80903040328y44051147ja2fc369423a98c84@mail.gmail.com>
	<F4366C21-62E0-479F-98DF-A13F77BFCF41@gmail.com>
Message-ID: <1E93D9FE-316A-460B-8069-4865A53D52F8@oda.state.or.us>

I think SQLAlchemy's ORM might work fine with Twisted.  Check out http://foss.eepatents.com/sAsync/ 
  .  sAsync doesn't appear to be widely used, but I got the examples  
to run with some minor changes to the sqlite connection.  I'm hoping  
to try something useful in the next week or two.

On Mar 4, 2009, at 11:04 AM, Valentino Volonghi wrote:

> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
>
> On Mar 4, 2009, at 3:28 AM, Peter Cai wrote:
>
>> The code doesn't work.   When I limit the thread numbers to 1
>>
>>   reactor.suggestThreadPoolSize(1)
>>
>> Everything goes fine.  Other wise the server would be blocked and  
>> must
>> be killed by "kill 9 ...".
>>
>> The result conflicts with my understanding of sqlalchemy.  Since I
>> don't share any object between threads, there should be no problem!
>
> I'm pretty sure you can't say this with full certainty and actually  
> you are
> just wrong based on the code you showed. deferToThread doesn't use
> the same thread every time you call it, there's absolutely no  
> guarantee
> in that and sqlalchemy keeps state around in that thread related to  
> that
> object it returned. If you want to do any operations you need either  
> to
> detach the object from the session before returning it and do any  
> modification
> on the same object in another thread after reattaching it (pretty  
> cumbersome).
>
> Or write your own threadpool that gives names to threads so that you  
> can
> have a guarantee that you always call the same thread when working  
> with
> a bunch of objects.
>
> Nonetheless though sqlalchemy is a huge project and I'm pretty sure  
> it has
> some deadlocks and race conditions around which means that even taking
> care of these issues you'll have other problems when dealing with  
> the orm.
>
> If you want to use sqlalchemy don't use its orm but just the query  
> builder,
> it's the only sane way to integrate with twisted. Which anyway IMHO  
> is the
> best way to use it anyway because it uses a lot less memory since it  
> doesn't
> have to always cache objects because you control everything and can  
> make
> that call when you really need it.
>
>> Ah....  It always have risk to use something you haven't tried
>> before ....
>> I think I have no choice but always set thread pool size to 1 ...
>
>
> Not entirely true.
>
> - --
> Valentino Volonghi aka Dialtone
> Now running MacOS X 10.5
> Home Page: http://www.twisted.it
> http://www.adroll.com
>
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.4.9 (Darwin)
>
> iEYEARECAAYFAkmu0NoACgkQ9Llz28widGXBawCg32svBsLqsIRLzvzOThgR4sA0
> 5UkAoIgNfyUDPl9c0nwSud0sem3aKjz5
> =2XIX
> -----END PGP SIGNATURE-----
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From dialtone at gmail.com  Wed Mar  4 15:29:30 2009
From: dialtone at gmail.com (Valentino Volonghi)
Date: Wed, 4 Mar 2009 12:29:30 -0800
Subject: [Twisted-Python] Using sqlalchemy in twisted.
In-Reply-To: <1E93D9FE-316A-460B-8069-4865A53D52F8@oda.state.or.us>
References: <befee6d80903040328y44051147ja2fc369423a98c84@mail.gmail.com>
	<F4366C21-62E0-479F-98DF-A13F77BFCF41@gmail.com>
	<1E93D9FE-316A-460B-8069-4865A53D52F8@oda.state.or.us>
Message-ID: <E3E183CF-9B95-45ED-8699-7DA3870C3ED4@gmail.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Mar 4, 2009, at 11:15 AM, Chris Foster wrote:

> I think SQLAlchemy's ORM might work fine with Twisted.  Check out http://foss.eepatents.com/sAsync/ 
>  .  sAsync doesn't appear to be widely used, but I got the examples  
> to run with some minor changes to the sqlite connection.  I'm hoping  
> to try something useful in the next week or two.


sAsync repository hasn't changed since about 1 or 2 years ago. Now  
sqlalchemy 0.5
changed quite a bit of the internals and so on. Notice however that  
the tests for
sAsync use sqlite that is limited essentially to 1 connection, which  
goes back to
your original discontent.

I tried to integrate sqlalchemy ORM in the past and it never worked  
right because
the code in the objects didn't know that it was dealing with twisted  
and because
sqlalchemy is mainly used in a single thread, it's thread safe but  
that doesn't mean
that you can share objects between threads.

- --
Valentino Volonghi aka Dialtone
Now running MacOS X 10.5
Home Page: http://www.twisted.it
http://www.adroll.com

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.9 (Darwin)

iEYEARECAAYFAkmu5KoACgkQ9Llz28widGWBWwCglXIKPUFaGbk5tI9XmtrH8lH+
7woAnjrWWWEj2P78szZbNyLzSx0kgz4B
=9uZo
-----END PGP SIGNATURE-----



From florent.aide at gmail.com  Wed Mar  4 17:22:41 2009
From: florent.aide at gmail.com (Florent Aide)
Date: Wed, 4 Mar 2009 23:22:41 +0100
Subject: [Twisted-Python] Twisted developers: please donate your time!
In-Reply-To: <49AEFEB0.1090900@gmail.com>
References: <1235412728.2733.2.camel@pintsize> <49AEFEB0.1090900@gmail.com>
Message-ID: <628981a60903041422x49b6ecdbm4641172ae2079bb4@mail.gmail.com>

On Wed, Mar 4, 2009 at 11:20 PM, Florent Aide <florent.aide at gmail.com> wrote:
> Itamar Shtull-Trauring a ?crit?:
>
> So, if you're interested, please reply, saying something like "I will
> spend two weeks working on Gopher support over the next year."
>
>
> Hi all,
>
> I have worked in the last days on a demo application using twisted and
> evolved from the simple pop3 + smtp exemple found in the Twisted book to add
> a web interface (minimalistic but works) in nevow and SSL support + and
> SQLAlchemy based SQL backend for passwords.
>
> I think it would be nice to write some complete tutorial based on this
> example (and I'm ready to write it of course). But I'd like some
> minimalistic review from a twisted master so that I don't tell too much
> stupid things and don't spread bad practices.

Sorry the mail went out before I could finish it...

here is the URL of the project:
http://bitbucket.org/faide/guineapy/overview/

Regards,
Florent Aide.



From clemesha at gmail.com  Wed Mar  4 17:47:24 2009
From: clemesha at gmail.com (Alex Clemesha)
Date: Wed, 4 Mar 2009 14:47:24 -0800
Subject: [Twisted-Python] Twisted developers: please donate your time!
In-Reply-To: <628981a60903041422x49b6ecdbm4641172ae2079bb4@mail.gmail.com>
References: <1235412728.2733.2.camel@pintsize> <49AEFEB0.1090900@gmail.com>
	<628981a60903041422x49b6ecdbm4641172ae2079bb4@mail.gmail.com>
Message-ID: <d272f0690903041447u56f8743ega564e38647e8e530@mail.gmail.com>

On Wed, Mar 4, 2009 at 2:22 PM, Florent Aide <florent.aide at gmail.com> wrote:
> On Wed, Mar 4, 2009 at 11:20 PM, Florent Aide <florent.aide at gmail.com> wrote:
>> Itamar Shtull-Trauring a ?crit?:
>>
>> So, if you're interested, please reply, saying something like "I will
>> spend two weeks working on Gopher support over the next year."
>>
>>
>> Hi all,
>>
>> I have worked in the last days on a demo application using twisted and
>> evolved from the simple pop3 + smtp exemple found in the Twisted book to add
>> a web interface (minimalistic but works) in nevow and SSL support + and
>> SQLAlchemy based SQL backend for passwords.
>>
>> I think it would be nice to write some complete tutorial based on this
>> example (and I'm ready to write it of course). But I'd like some
>> minimalistic review from a twisted master so that I don't tell too much
>> stupid things and don't spread bad practices.
>
> Sorry the mail went out before I could finish it...
>
> here is the URL of the project:
> http://bitbucket.org/faide/guineapy/overview/
Very nice.  Overall I think that the structure of the project looks
good, especially the
clean usage of Twisted's Application functionality.

You mention "don't spread bad practices", and I think this brings up
an important
issue.  It would be nice to have some of the main Twisted devs put a
"best practices"
stamp of approval on the code, and after putting on that stamp,
clearly link to the code.
This is something that would be good for the Twisted community and
newcomers alike.


-Alex

>
> Regards,
> Florent Aide.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Alex Clemesha
clemesha.org



From newptcai at gmail.com  Thu Mar  5 00:17:45 2009
From: newptcai at gmail.com (Peter Cai)
Date: Thu, 5 Mar 2009 13:17:45 +0800
Subject: [Twisted-Python] Using sqlalchemy in twisted.
In-Reply-To: <F4366C21-62E0-479F-98DF-A13F77BFCF41@gmail.com>
References: <befee6d80903040328y44051147ja2fc369423a98c84@mail.gmail.com>
	<F4366C21-62E0-479F-98DF-A13F77BFCF41@gmail.com>
Message-ID: <befee6d80903042117w1776071eqf0b85cfdb1677abc@mail.gmail.com>

I'm not quite sure, but I think I'm pretty careful of sharing objects
between threads.
1st, I only cached as few as possible orm objects.  I tried to detach them,
but I found that if I detach them,  I can't access any of their fields any
more.

2nd, I create new orm objects based on client request, pass them to class
Database and then merge them to scoped sessions, change, commit and then
discard these objects.

3rd, I switch to sqlite frequently to check if there is any database
operation outside Database, because sqlite doesn't allow multi-thread
access.

Actually it seems to work until 2 or 3 days ago suddenly cases hang the
server.

Ah, as I've already written lots of code in ORM, I think maybe I should try
to change Database to use a dedicated thread to handle all database
operations.

That might be a bottle neck of my application, but I really can't give up
orm as these mapper classes are used everywhere in my application.

On Thu, Mar 5, 2009 at 3:04 AM, Valentino Volonghi <dialtone at gmail.com>wrote:

> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
>
> On Mar 4, 2009, at 3:28 AM, Peter Cai wrote:
>
>  The code doesn't work.   When I limit the thread numbers to 1
>>
>>   reactor.suggestThreadPoolSize(1)
>>
>> Everything goes fine.  Other wise the server would be blocked and must
>> be killed by "kill 9 ...".
>>
>> The result conflicts with my understanding of sqlalchemy.  Since I
>> don't share any object between threads, there should be no problem!
>>
>
> I'm pretty sure you can't say this with full certainty and actually you are
> just wrong based on the code you showed. deferToThread doesn't use
> the same thread every time you call it, there's absolutely no guarantee
> in that and sqlalchemy keeps state around in that thread related to that
> object it returned. If you want to do any operations you need either to
> detach the object from the session before returning it and do any
> modification
> on the same object in another thread after reattaching it (pretty
> cumbersome).
>
> Or write your own threadpool that gives names to threads so that you can
> have a guarantee that you always call the same thread when working with
> a bunch of objects.
>
> Nonetheless though sqlalchemy is a huge project and I'm pretty sure it has
> some deadlocks and race conditions around which means that even taking
> care of these issues you'll have other problems when dealing with the orm.
>
> If you want to use sqlalchemy don't use its orm but just the query builder,
> it's the only sane way to integrate with twisted. Which anyway IMHO is the
> best way to use it anyway because it uses a lot less memory since it
> doesn't
> have to always cache objects because you control everything and can make
> that call when you really need it.
>
>  Ah....  It always have risk to use something you haven't tried
>> before ....
>> I think I have no choice but always set thread pool size to 1 ...
>>
>
>
> Not entirely true.
>
> - --
> Valentino Volonghi aka Dialtone
> Now running MacOS X 10.5
> Home Page: http://www.twisted.it
> http://www.adroll.com
>
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.4.9 (Darwin)
>
> iEYEARECAAYFAkmu0NoACgkQ9Llz28widGXBawCg32svBsLqsIRLzvzOThgR4sA0
> 5UkAoIgNfyUDPl9c0nwSud0sem3aKjz5
> =2XIX
> -----END PGP SIGNATURE-----
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
look to the things around you,the immediate world around you, if you are
alive,it will mean something to you ??Paul Strand
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090305/9a952ddc/attachment.htm 

From newptcai at gmail.com  Thu Mar  5 02:38:43 2009
From: newptcai at gmail.com (Peter Cai)
Date: Thu, 5 Mar 2009 15:38:43 +0800
Subject: [Twisted-Python] Using sqlalchemy in twisted.
In-Reply-To: <E3E183CF-9B95-45ED-8699-7DA3870C3ED4@gmail.com>
References: <befee6d80903040328y44051147ja2fc369423a98c84@mail.gmail.com>
	<F4366C21-62E0-479F-98DF-A13F77BFCF41@gmail.com>
	<1E93D9FE-316A-460B-8069-4865A53D52F8@oda.state.or.us>
	<E3E183CF-9B95-45ED-8699-7DA3870C3ED4@gmail.com>
Message-ID: <befee6d80903042338v3d1dc22bna8230c8e7280d8e7@mail.gmail.com>

I changed my code to this style, it works again.

This code would create a new session on each request and close it
immediately.

Hope this trick could save me!

#=========================================

def require_session(f):
    '''create and close session for each synchronous method'''
    def wrapper(model, *args, **kw):
        sess = model.Session()
        try:
            return f(model, sess, *args, **kw)
        finally:
            sess.close()
    return wrapper

class Database()
    def __init__(self, conn_str):
        self.conn_str = conn_str
        self.engine = create_engine(self.conn_str, echo=False)
        self.Session = sessionmaker(bind =
self.engine,  expire_on_commit=False)

    def getObjectById(self, klass, id):
        return threads.deferToThread(self._getObjectById, klass, id)

    @require_session

    def _getObjectById(self, sess, klass, id):

        return sess.query(klass).get(id)
#=========================================

On Thu, Mar 5, 2009 at 4:29 AM, Valentino Volonghi <dialtone at gmail.com>wrote:

> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
>
> On Mar 4, 2009, at 11:15 AM, Chris Foster wrote:
>
>  I think SQLAlchemy's ORM might work fine with Twisted.  Check out
>> http://foss.eepatents.com/sAsync/ .  sAsync doesn't appear to be widely
>> used, but I got the examples to run with some minor changes to the sqlite
>> connection.  I'm hoping to try something useful in the next week or two.
>>
>
>
> sAsync repository hasn't changed since about 1 or 2 years ago. Now
> sqlalchemy 0.5
> changed quite a bit of the internals and so on. Notice however that the
> tests for
> sAsync use sqlite that is limited essentially to 1 connection, which goes
> back to
> your original discontent.
>
> I tried to integrate sqlalchemy ORM in the past and it never worked right
> because
> the code in the objects didn't know that it was dealing with twisted and
> because
> sqlalchemy is mainly used in a single thread, it's thread safe but that
> doesn't mean
> that you can share objects between threads.
>
> - --
> Valentino Volonghi aka Dialtone
> Now running MacOS X 10.5
> Home Page: http://www.twisted.it
> http://www.adroll.com
>
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.4.9 (Darwin)
>
> iEYEARECAAYFAkmu5KoACgkQ9Llz28widGWBWwCglXIKPUFaGbk5tI9XmtrH8lH+
> 7woAnjrWWWEj2P78szZbNyLzSx0kgz4B
> =9uZo
>
> -----END PGP SIGNATURE-----
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
look to the things around you,the immediate world around you, if you are
alive,it will mean something to you ??Paul Strand
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090305/c51d3772/attachment.htm 

From therve at free.fr  Thu Mar  5 05:35:14 2009
From: therve at free.fr (Thomas =?ISO-8859-1?Q?Herv=E9?=)
Date: Thu, 05 Mar 2009 11:35:14 +0100
Subject: [Twisted-Python] Twisted developers: please donate your time!
In-Reply-To: <1236002880.30721.36.camel@pintsize>
References: <1235412728.2733.2.camel@pintsize>
	<aa0dfd860902240025h464a286ap7ddbbd92937d0381@mail.gmail.com>
	<1236002880.30721.36.camel@pintsize>
Message-ID: <1236249314.6440.5.camel@minime>

Le lundi 02 mars 2009 ? 09:08 -0500, Itamar Shtull-Trauring a ?crit :

> Yes - thanks to you and all thee rest of the people who are
> volunteering! Anyone else willing to step up?

Sorry for being even more late. I won't spend as much time as I'd like,
but I think 2 weeks of reviews/small branches is a safe bet.

-- 
Thomas




From glyph at divmod.com  Thu Mar  5 06:38:51 2009
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 05 Mar 2009 11:38:51 -0000
Subject: [Twisted-Python] Twisted Sprint at PyCon
Message-ID: <20090305113851.12555.767126240.divmod.xquotient.5347@weber.divmod.com>


There will be an extended Twisted sprint at PyCon this year.

I hope that everyone on this list who is attending will be present :).

Technically I'm the sprint leader, but I would very much appreciate help 
from anyone else who is in an organizing mood.

Please sign up on the PyCon wiki here:

    http://us.pycon.org/2009/sprints/projects/twisted/



From markus at bluegap.ch  Thu Mar  5 10:20:27 2009
From: markus at bluegap.ch (Markus Wanner)
Date: Thu, 05 Mar 2009 16:20:27 +0100
Subject: [Twisted-Python] sending large files from web2 http server
Message-ID: <49AFEDBB.3090402@bluegap.ch>

Hi,

I'm trying to stream longish data via web2, but experience sudden stalls
in data transfer, followed by a connection abort after a certain
timeout. I can't completely reproduce the issue, yet, but figured that
the size of the blocks I'm returning via the stream's read method
affects the failure rate (an stream.IByteStream implementation).

I've tried with chunk sizes between 1 MiB down to 256 bytes. At that
rate, I suddenly get the following unhandled errors, which don't seem to
have to do much with my code.

2009/03/05 16:02 CET [-] Unhandled error in Deferred:
2009/03/05 16:02 CET [-] Traceback (most recent call last):
	  File "/usr/lib/python2.4/site-packages/twisted/internet/defer.py",
line 267, in unpause
	    self._runCallbacks()
	  File "/usr/lib/python2.4/site-packages/twisted/internet/defer.py",
line 307, in _runCallbacks
	    self.result = callback(self.result, *args, **kw)
	  File "/usr/lib/python2.4/site-packages/twisted/internet/defer.py",
line 271, in _continue
	    self.unpause()
	  File "/usr/lib/python2.4/site-packages/twisted/internet/defer.py",
line 267, in unpause
	    self._runCallbacks()
	--- <exception caught here> ---
	  File "/usr/lib/python2.4/site-packages/twisted/internet/defer.py",
line 307, in _runCallbacks
	    self.result = callback(self.result, *args, **kw)
	  File "/usr/lib/python2.4/site-packages/twisted/internet/defer.py",
line 271, in _continue
	    self.unpause()
	  File "/usr/lib/python2.4/site-packages/twisted/internet/defer.py",
line 267, in unpause
	    self._runCallbacks()
	  File "/usr/lib/python2.4/site-packages/twisted/internet/defer.py",
line 321, in _runCallbacks
	    self.result = failure.Failure()
	  File "/usr/lib/python2.4/site-packages/twisted/python/failure.py",
line 205, in __init__
	    parentCs = reflect.allYourBase(self.type)
	  File "/usr/lib/python2.4/site-packages/twisted/python/reflect.py",
line 480, in allYourBase
	    accumulateBases(classObj, l, baseClass)
	exceptions.RuntimeError: maximum recursion depth exceeded


Are there any known problems with web2 and large files (not that 64 MiB
is *that* large...). Any hint regarding the above error? Is the same to
be expected with a chunk size of 8 KiB and a file of 2 GiB size (as that
would result in the same amount of chunks)?

Any hints would be greatly appreciated.

Kind Regards

Markus Wanner



From exarkun at divmod.com  Thu Mar  5 10:45:49 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 5 Mar 2009 10:45:49 -0500
Subject: [Twisted-Python] sending large files from web2 http server
In-Reply-To: <49AFEDBB.3090402@bluegap.ch>
Message-ID: <20090305154549.12853.624525997.divmod.quotient.18633@henry.divmod.com>

On Thu, 05 Mar 2009 16:20:27 +0100, Markus Wanner <markus at bluegap.ch> wrote:
>Hi,
>
>I'm trying to stream longish data via web2, but experience sudden stalls
>in data transfer, followed by a connection abort after a certain
>timeout. I can't completely reproduce the issue, yet, but figured that
>the size of the blocks I'm returning via the stream's read method
>affects the failure rate (an stream.IByteStream implementation).
>
>I've tried with chunk sizes between 1 MiB down to 256 bytes. At that
>rate, I suddenly get the following unhandled errors, which don't seem to
>have to do much with my code.

I haven't looked at how web2 handles IByteStream providers, but my first
guess would be that this is an example of a somewhat common bug where
Deferreds are chained to an arbitrary length based on application data
and when there's too much application data, the chain gets too long (a
limit imposed by how much recursion is possible when unwinding the chain),
and you get this failure.

Alternatively, the bug I describe above might somehow have gotten into
your application code, rather than into Web2.  As you say, the stack
trace doesn't point to your code, but it doesn't point to Web2 code
either, and it's common in cases like this for the traceback to just
point at the implementation of Deferred, since that's where the bug
(or lack of feature, whatever) *really* is.

The main focus of web development in Twisted now is Twisted Web, not
Twisted Web2.  However, if you can supply a patch which fixes this
(along with unit tests, please :), then we'd be happy to apply it.

James Knight or David Reid might have a suggestion about where in the
code to start looking for the problem.

Jean-Paul



From aronbierbaum at gmail.com  Thu Mar  5 17:49:15 2009
From: aronbierbaum at gmail.com (Aron Bierbaum)
Date: Thu, 5 Mar 2009 16:49:15 -0600
Subject: [Twisted-Python] _Win32Waker
Message-ID: <34457a4c0903051449m7b4845e1yd402d7287773fd2e@mail.gmail.com>

I have been using a custom Qt4 reactor that derives from
PosixReactorBase. As a result it creates a _Win32Waker to allow
threads and signals to wake up the IO thread. It seems though that the
current implementation only works about half of the time. The other
half it exists with :

  File "...\Lib\python2.6\site-packages\twisted\internet\posixbase.py",
line 170, in __init__
    ReactorBase.__init__(self)
  File "...\Lib\python2.6\site-packages\twisted\internet\base.py",
line 424, in __init__
    self._initThreads()
  File "...\Lib\python2.6\site-packages\twisted\internet\base.py",
line 813, in _initThreads
    self.installWaker()
  File "...\Lib\python2.6\site-packages\twisted\internet\posixbase.py",
line 206, in installWaker
    self.waker = _Waker(self)
  File "...\Lib\python2.6\site-packages\twisted\internet\posixbase.py",
line 77, in __init__
    client.connect(server.getsockname())
  File "<string>", line 1, in connect
socket.error: [Errno 10049] The requested address is not valid in its context

I have attached a simple test that shows that the following code does
not always return "127.0.0.1", but sometimes returns "0.0.0.0" as the
IP address.

        # Following select_trigger (from asyncore)'s example;
        server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        client.setsockopt(socket.IPPROTO_TCP, 1, 1)
        server.bind(('127.0.0.1', 0))
        server.listen(1)
        client.connect(server.getsockname())

My current workaround just calls the following instead:

        client.connect(('127.0.0.1', server.getsockname()[1]))

Any ideas on what is really causing the error? If there is not a
better solution can this be added to trunk for future releases?

Thanks,
Aron
-------------- next part --------------
A non-text attachment was scrubbed...
Name: test.py
Type: application/octet-stream
Size: 187 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20090305/b5f626f4/attachment.obj 

From hasham_james_007 at yahoo.com  Thu Mar  5 18:49:31 2009
From: hasham_james_007 at yahoo.com (khawar hasham)
Date: Thu, 5 Mar 2009 15:49:31 -0800 (PST)
Subject: [Twisted-Python] Re:how to pass on the connection failed or
	connection lost error
Message-ID: <262572.93310.qm@web53509.mail.re2.yahoo.com>

Hi,

I tried to use this suggestion but I could not make it work.

here is the test I am using

in my application class
def callSend(self, msg):
????? plugin.send(msg)

Now in plugin class
def send(self, msg):
????? print 'before call'
????? threads.blockingCallFromThread(reactor, remotesend, msg)
????? print 'after call'

def handleError(self, error):
????? error.raiseException()

def remotesend(self, msg):
???? deferred = defer.Deferred()
???? reactor.connectTCP('localhost',9999,myfactory)
???? deffered.addErrback(self.handleError)
???? return deffered

now myfactory class .. clientConnectionFailed 
def clientConnectionFailed(self, connector, reason):
????? reason.raiseException()


now the problem is, code has become synchronous as code is waiting after threads.blockingCallFromThread, how to fire the defer returned from 'remotesend'. Do i need to fire it or twisted will take care of it.

I think I can't refer this deferred object since it is being passed to threads.blockingCallFromThread function on which I have no control.

any suggestions


--- On Wed, 3/4/09, twisted-python-request at twistedmatrix.com <twisted-python-request at twistedmatrix.com> wrote:
From: twisted-python-request at twistedmatrix.com <twisted-python-request at twistedmatrix.com>
Subject: Twisted-Python Digest, Vol 60, Issue 6
To: twisted-python at twistedmatrix.com
Date: Wednesday, March 4, 2009, 11:00 AM

Send Twisted-Python mailing list submissions to
	twisted-python at twistedmatrix.com

To subscribe or unsubscribe via the World Wide Web, visit
	http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
or, via email, send a message with subject or body 'help' to
	twisted-python-request at twistedmatrix.com

You can reach the person managing the list at
	twisted-python-owner at twistedmatrix.com

When replying, please edit your Subject line so it is more specific
than "Re: Contents of Twisted-Python digest..."


Today's Topics:

   1. Re: how to pass on the connection failed or	connection lost
      error (Jean-Paul Calderone)


----------------------------------------------------------------------

Message: 1
Date: Wed, 4 Mar 2009 09:59:42 -0500
From: Jean-Paul Calderone <exarkun at divmod.com>
Subject: Re: [Twisted-Python] how to pass on the connection failed or
	connection lost error
To: twisted-python at twistedmatrix.com
Message-ID:
	<20090304145942.12853.42253504.divmod.quotient.17917 at henry.divmod.com>
Content-Type: text/plain; format=flowed

On Wed, 4 Mar 2009 06:39:59 -0800 (PST), khawar hasham
<hasham_james_007 at yahoo.com> wrote:
>Hi
>
>let me first explain the application that I am developing. I have an
application that will use the twisted part as a plugin. this twisted part will
act as server and as client both.
>my application call the plugin method to send data to server module using
connectTCP. now the problem is I can not pass on the connection failed exception
to my calling application.

Since you're running the reactor in one thread and the rest of your
application in another thread, your question is basically one of message
passing.  You've already found reactor.callFromThread which is good; I
think you just want the slightly more featureful version, available in
twisted.internet.threads, blockingCallFromThread.  This is implemented
in terms of callFromThread, but additionally allows the caller to get
the result of the function being called - including waiting on a Deferred
if the function being called returns one.  If you switch to this, then
you only need to make Plugin.clientsend return a Deferred which eventually
fires with a result or a Failure.

Jean-Paul



------------------------------

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


End of Twisted-Python Digest, Vol 60, Issue 6
*********************************************



      
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090305/d03a3ea0/attachment.htm 

From cayson.z at gmail.com  Thu Mar  5 22:43:02 2009
From: cayson.z at gmail.com (Boern)
Date: Fri, 6 Mar 2009 11:43:02 +0800
Subject: [Twisted-Python] How to invoke the remote method based on twisted
	in django web app?
Message-ID: <be0f6540903051943y10241c1ej6380857e3f4152c9@mail.gmail.com>

hi,all:
I developed a web app in diango and a remote service in twisted, and I want
to invoke the twisted remote method in django web.example:
the remote service code :

class Echoer(pb.Root):
    def remote_echo(self, task):

        print 'echoing:', task

        return task

if __name__ == '__main__':
    reactor.listenTCP(8789, pb.PBServerFactory(Echoer()))
    reactor.run()

-------------------------------------------------------------------------------------------------------------
and the djiango views.py code :

       def register_task(requst):
"""register the task"""
        .................
factory = pb.PBClientFactory()
reactor.connectTCP("localhost", 8789, factory)
d = factory.getRootObject()
d.addCallback(lambda object: object.callRemote("echo", task))
d.addCallback(lambda echo: 'server echoed: '+echo[0]+str(echo[1]))
d.addErrback(lambda reason: 'error: '+str(reason.value))
d.addCallback(util.println)
d.addCallback(lambda _: reactor.stop())
reactor.run()
        ..........................
        return HttpResponseRedirect('/push_task/') # Redirect after POST

-------------------------------------------------------------------------------------------------------------

but when I post a request to django web app ,a exception display:
Traceback (most recent call last):
  File "C:\Python25\Lib\site-packages\twisted\internet\base.py", line 374,
in fi
reEvent
    DeferredList(beforeResults).addCallback(self._continueFiring)
  File "C:\Python25\Lib\site-packages\twisted\internet\defer.py", line 195,
in a
ddCallback
    callbackKeywords=kw)
  File "C:\Python25\Lib\site-packages\twisted\internet\defer.py", line 186,
in a
ddCallbacks
    self._runCallbacks()
  File "C:\Python25\Lib\site-packages\twisted\internet\defer.py", line 328,
in _
runCallbacks
    self.result = callback(self.result, *args, **kw)
--- <exception caught here> ---
  File "C:\Python25\Lib\site-packages\twisted\internet\base.py", line 387,
in _c
ontinueFiring
    callable(*args, **kwargs)
  File "C:\Python25\Lib\site-packages\twisted\internet\base.py", line 1123,
in _
reallyStartRunning
    self._handleSignals()
  File "C:\Python25\Lib\site-packages\twisted\internet\base.py", line 1068,
in _
handleSignals
    signal.signal(signal.SIGINT, self.sigInt)
exceptions.ValueError: signal only works in main thread
--------------------------------------------------------------------------------------------------------------

so ,How I correctly invoke the remote method?
-- 
Boern Parx
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090306/abdd620b/attachment.htm 

From terry at jon.es  Fri Mar  6 05:41:37 2009
From: terry at jon.es (Terry Jones)
Date: Fri, 6 Mar 2009 11:41:37 +0100
Subject: [Twisted-Python] Interview question on deferreds
Message-ID: <18864.64993.174022.736213@jon.es>

I'm going to post a few short comments on deferreds. As a fun standalone
warm-up exercise, here's an interview-style question for people who claim
to understand Twisted's deferreds.

What will the following code print, and why?


    from twisted.internet import defer

    def e_ok(x):
        print 'extra is ok:', x
        return x

    def e_nok(f):
        # Propagate the failure (by returning it).
        print 'extra failed'
        return f

    def raiser(_):
        raise Exception('oops')

    extra = defer.Deferred()
    extra.addCallbacks(e_ok, e_nok)
    extra.addCallback(raiser)
    extra.addCallbacks(e_ok, e_nok)

    def d_nothing(x):
        print 'Doing nothing with:', x
        return x

    def d_ok(x):
        print 'd is ok:', x

    def d_nok(f):
        # Absorb the failure (by implicitly returning None).
        print 'd failed'

    d = defer.Deferred()
    d.addCallback(d_nothing)
    d.chainDeferred(extra)
    d.addCallbacks(d_ok, d_nok)

    d.callback('xyz')


Don't read my next post if you prefer to figure this out yourself.

Terry



From terry at jon.es  Fri Mar  6 06:10:55 2009
From: terry at jon.es (Terry Jones)
Date: Fri, 6 Mar 2009 12:10:55 +0100
Subject: [Twisted-Python] A few comments on deferreds
Message-ID: <18865.1215.882543.689802@jon.es>

Here are a few comments on deferreds. I'll keep this short. These sort of
posts don't seem to generate much/any discussion (e.g., http://bit.ly/YkSD
which I thought was cool). I'm not sure why - I find deferreds infinitely
interesting, and don't understand why other people don't seem to share the
passion :-)

1. If you have a deferred d1, and you call d1.chainDeferred(d2) I think it
   makes sense for there to be a flag inside the deferred class that warns
   you if you later call d1.addCallbacks. That's because adding more
   functions to d1's callback/errback chain is probably not useful. (It
   might conceivably be useful, e.g., to let you know that d1 has been
   called). The result of d1 has been passed to d2, and because d2.callback
   and d2.errback don't return it (see point 2 below), it is not passed
   further down d1's chain. So it's most likely that someone adding a
   callback to d1 after calling d1.chainDeferred doesn't really know what
   they're doing.

2. Deferred.callback and Deferred.errback currently (implicitly) return
   None.  They could be changed to return their passed argument.  That
   would make a call to d1.chainDeferred act like a deferred fork - the
   result would go down d2's callback chain, but also continue down the
   callback/errback chain of d1.

3. There's also the possibility of adding a function to the Deferred class:

     def incorporateDeferred(self, d2):
         self.callbacks.extend(d2.callbacks)

   which might be what a naive reader might expect chainDeferred to do.
   This raises the question of what you might later do with d2 (probably
   nothing), but that's just like what happens with d1: if you call
   d1.chainDeferred you're probably not going to return d1 to anyone. All
   you can usefully do is fire it.

I'll stop for now. There's lots more that could be said, but lets see if
anyone's interested. I wish I were going to PyCon :-(

BTW, points 1 and 2 above are key to understanding what goes on in the
interview question code I recently posted (http://bit.ly/T3xKs).

Terry



From p.mayers at imperial.ac.uk  Fri Mar  6 06:33:51 2009
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 06 Mar 2009 11:33:51 +0000
Subject: [Twisted-Python] How to invoke the remote method based on twisted
	in django web app?
In-Reply-To: <be0f6540903051943y10241c1ej6380857e3f4152c9@mail.gmail.com>
References: <be0f6540903051943y10241c1ej6380857e3f4152c9@mail.gmail.com>
Message-ID: <49B10A1F.4090208@imperial.ac.uk>

Boern wrote:
> hi,all:
> I developed a web app in diango and a remote service in twisted, and I 
> want to invoke the twisted remote method in django web.
> example:
> 
> the remote service code :
> 
> class Echoer(pb.Root):
>     def remote_echo(self, task):
>       
>         print 'echoing:', task
>         
>         return task
> 
> if __name__ == '__main__':
>     reactor.listenTCP(8789, pb.PBServerFactory(Echoer()))
>     reactor.run()
> 
> -------------------------------------------------------------------------------------------------------------
> and the djiango views.py code :
> 
>        def register_task(requst):
> """register the task"""
>         .................
> factory = pb.PBClientFactory()
> reactor.connectTCP("localhost", 8789, factory)
> d = factory.getRootObject()
> d.addCallback(lambda object: object.callRemote("echo", task))
> d.addCallback(lambda echo: 'server echoed: '+echo[0]+str(echo[1]))
> d.addErrback(lambda reason: 'error: '+str(reason.value))
> d.addCallback(util.println)
> d.addCallback(lambda _: reactor.stop())
> reactor.run()

That won't work. The reactor cannot be started more than once. It needs 
to be long-lived.




From eburus at gmail.com  Fri Mar  6 06:44:15 2009
From: eburus at gmail.com (Burus)
Date: Fri, 6 Mar 2009 14:44:15 +0300
Subject: [Twisted-Python] How to invoke the remote method based on twisted
	in django web app?
In-Reply-To: <49B10A1F.4090208@imperial.ac.uk>
References: <be0f6540903051943y10241c1ej6380857e3f4152c9@mail.gmail.com>
	<49B10A1F.4090208@imperial.ac.uk>
Message-ID: <f564d0090903060344k65955c99n302cd510a4da6906@mail.gmail.com>

You can try starting reactor. in the settings.py file, and use twisted  pb
calls in the fjango views.

On Fri, Mar 6, 2009 at 2:33 PM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:

> Boern wrote:
>
>> hi,all:
>> I developed a web app in diango and a remote service in twisted, and I
>> want to invoke the twisted remote method in django web.
>> example:
>>
>> the remote service code :
>>
>> class Echoer(pb.Root):
>>    def remote_echo(self, task):
>>              print 'echoing:', task
>>                return task
>>
>> if __name__ == '__main__':
>>    reactor.listenTCP(8789, pb.PBServerFactory(Echoer()))
>>    reactor.run()
>>
>>
>> -------------------------------------------------------------------------------------------------------------
>> and the djiango views.py code :
>>
>>       def register_task(requst):
>> """register the task"""
>>        .................
>> factory = pb.PBClientFactory()
>> reactor.connectTCP("localhost", 8789, factory)
>> d = factory.getRootObject()
>> d.addCallback(lambda object: object.callRemote("echo", task))
>> d.addCallback(lambda echo: 'server echoed: '+echo[0]+str(echo[1]))
>> d.addErrback(lambda reason: 'error: '+str(reason.value))
>> d.addCallback(util.println)
>> d.addCallback(lambda _: reactor.stop())
>> reactor.run()
>>
>
> That won't work. The reactor cannot be started more than once. It needs to
> be long-lived.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090306/c1c47d9d/attachment.htm 

From exarkun at divmod.com  Fri Mar  6 07:49:10 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 6 Mar 2009 07:49:10 -0500
Subject: [Twisted-Python] A few comments on deferreds
In-Reply-To: <18865.1215.882543.689802@jon.es>
Message-ID: <20090306124910.12853.671662147.divmod.quotient.19156@henry.divmod.com>

On Fri, 6 Mar 2009 12:10:55 +0100, Terry Jones <terry at jon.es> wrote:
>Here are a few comments on deferreds. I'll keep this short. These sort of
>posts don't seem to generate much/any discussion (e.g., http://bit.ly/YkSD
>which I thought was cool). I'm not sure why - I find deferreds infinitely
>interesting, and don't understand why other people don't seem to share the
>passion :-)
>
>1. If you have a deferred d1, and you call d1.chainDeferred(d2) I think it
>   makes sense for there to be a flag inside the deferred class that warns
>   you if you later call d1.addCallbacks. That's because adding more
>   functions to d1's callback/errback chain is probably not useful. (It
>   might conceivably be useful, e.g., to let you know that d1 has been
>   called). The result of d1 has been passed to d2, and because d2.callback
>   and d2.errback don't return it (see point 2 below), it is not passed
>   further down d1's chain. So it's most likely that someone adding a
>   callback to d1 after calling d1.chainDeferred doesn't really know what
>   they're doing.

Indeed.  I can't think of any case where I've wanted to add more callbacks
to a Deferred after chaining it to (from?  with?) another Deferred.

>2. Deferred.callback and Deferred.errback currently (implicitly) return
>   None.  They could be changed to return their passed argument.  That
>   would make a call to d1.chainDeferred act like a deferred fork - the
>   result would go down d2's callback chain, but also continue down the
>   callback/errback chain of d1.

But it would be catastrophic for error handling.  Suddenly all of your
errors on d1 which are handled perfectly correctly with an errback on
d2 would become unhandled failures.

>3. There's also the possibility of adding a function to the Deferred class:
>
>     def incorporateDeferred(self, d2):
>         self.callbacks.extend(d2.callbacks)
>
>   which might be what a naive reader might expect chainDeferred to do.
>   This raises the question of what you might later do with d2 (probably
>   nothing), but that's just like what happens with d1: if you call
>   d1.chainDeferred you're probably not going to return d1 to anyone. All
>   you can usefully do is fire it.

If this accounted for future changes to d2, it would make more sense.  I
think the correct direction to go in is to prevent people from trying to
add more callbacks to d1.

>I'll stop for now. There's lots more that could be said, but lets see if
>anyone's interested. I wish I were going to PyCon :-(
>
>BTW, points 1 and 2 above are key to understanding what goes on in the
>interview question code I recently posted (http://bit.ly/T3xKs).
>

Jean-Paul



From exarkun at divmod.com  Fri Mar  6 07:51:53 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 6 Mar 2009 07:51:53 -0500
Subject: [Twisted-Python] _Win32Waker
In-Reply-To: <34457a4c0903051449m7b4845e1yd402d7287773fd2e@mail.gmail.com>
Message-ID: <20090306125153.12853.504773560.divmod.quotient.19159@henry.divmod.com>

On Thu, 5 Mar 2009 16:49:15 -0600, Aron Bierbaum <aronbierbaum at gmail.com> wrote:
>I have been using a custom Qt4 reactor that derives from
>PosixReactorBase. As a result it creates a _Win32Waker to allow
>threads and signals to wake up the IO thread. It seems though that the
>current implementation only works about half of the time. The other
>half it exists with :
>
>  File "...\Lib\python2.6\site-packages\twisted\internet\posixbase.py",
>line 170, in __init__
>    ReactorBase.__init__(self)
>  File "...\Lib\python2.6\site-packages\twisted\internet\base.py",
>line 424, in __init__
>    self._initThreads()
>  File "...\Lib\python2.6\site-packages\twisted\internet\base.py",
>line 813, in _initThreads
>    self.installWaker()
>  File "...\Lib\python2.6\site-packages\twisted\internet\posixbase.py",
>line 206, in installWaker
>    self.waker = _Waker(self)
>  File "...\Lib\python2.6\site-packages\twisted\internet\posixbase.py",
>line 77, in __init__
>    client.connect(server.getsockname())
>  File "<string>", line 1, in connect
>socket.error: [Errno 10049] The requested address is not valid in its context
>
>I have attached a simple test that shows that the following code does
>not always return "127.0.0.1", but sometimes returns "0.0.0.0" as the
>IP address.
>
>        # Following select_trigger (from asyncore)'s example;
>        server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
>        client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
>        client.setsockopt(socket.IPPROTO_TCP, 1, 1)
>        server.bind(('127.0.0.1', 0))
>        server.listen(1)
>        client.connect(server.getsockname())
>
>My current workaround just calls the following instead:
>
>        client.connect(('127.0.0.1', server.getsockname()[1]))
>
>Any ideas on what is really causing the error? If there is not a
>better solution can this be added to trunk for future releases?

It's definitely true that you can't connect to "0.0.0.0" on Windows, and
various parts of Twisted try to deal with this in some way already.  It
isn't clear to me why that getsockname() isn't returning "127.0.0.1" though.
I expect it's due to some configuration change or third-party networking
software on the Windows machine.  Do you think you can track that down?
That will make it much easier to think about the problem and the solution.

Jean-Paul



From exarkun at divmod.com  Fri Mar  6 07:56:04 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 6 Mar 2009 07:56:04 -0500
Subject: [Twisted-Python] Re:how to pass on the connection failed or
	connection lost error
In-Reply-To: <262572.93310.qm@web53509.mail.re2.yahoo.com>
Message-ID: <20090306125604.12853.67372802.divmod.quotient.19163@henry.divmod.com>

On Thu, 5 Mar 2009 15:49:31 -0800 (PST), khawar hasham <hasham_james_007 at yahoo.com> wrote:
>Hi,
>
>I tried to use this suggestion but I could not make it work.
>
>here is the test I am using
>
>in my application class
>def callSend(self, msg):
>????? plugin.send(msg)
>
>Now in plugin class
>def send(self, msg):
>????? print 'before call'
>????? threads.blockingCallFromThread(reactor, remotesend, msg)
>????? print 'after call'
>
>def handleError(self, error):
>????? error.raiseException()
>
>def remotesend(self, msg):
>???? deferred = defer.Deferred()
>???? reactor.connectTCP('localhost',9999,myfactory)
>???? deffered.addErrback(self.handleError)
>???? return deffered
>
>now myfactory class .. clientConnectionFailed
>def clientConnectionFailed(self, connector, reason):
>????? reason.raiseException()
>
>
>now the problem is, code has become synchronous as code is waiting after threads.blockingCallFromThread, how to fire the defer returned from 'remotesend'. Do i need to fire it or twisted will take care of it.

You probably need to fire it.  You created it, so it's your responsibility.
I don't know when you want it to fire, though.  What is it supposed to
represent?

>I think I can't refer this deferred object since it is being passed to threads.blockingCallFromThread function on which I have no control.

Not only that, but you can't do anything with it outside the reactor thread.

>
>any suggestions
>

What do you want to happen?

Jean-Paul



From terry at jon.es  Fri Mar  6 08:13:30 2009
From: terry at jon.es (Terry Jones)
Date: Fri, 6 Mar 2009 14:13:30 +0100
Subject: [Twisted-Python] A few comments on deferreds
In-Reply-To: Your message at 07:49:10 on Friday, 6 March 2009
References: <18865.1215.882543.689802@jon.es>
	<20090306124910.12853.671662147.divmod.quotient.19156@henry.divmod.com>
Message-ID: <18865.8570.558666.360596@jon.es>

Hi JP

>>>>> "JP" == Jean-Paul Calderone <exarkun at divmod.com> writes:
JP> On Fri, 6 Mar 2009 12:10:55 +0100, Terry Jones <terry at jon.es> wrote:

>> 1. If you have a deferred d1, and you call d1.chainDeferred(d2) I think
>> it makes sense for there to be a flag inside the deferred class that
>> warns you if you later call d1.addCallbacks. That's because adding more
>> functions to d1's callback/errback chain is probably not useful. (It
>> might conceivably be useful, e.g., to let you know that d1 has been
>> called). The result of d1 has been passed to d2, and because d2.callback
>> and d2.errback don't return it (see point 2 below), it is not passed
>> further down d1's chain. So it's most likely that someone adding a
>> callback to d1 after calling d1.chainDeferred doesn't really know what
>> they're doing.

JP> Indeed.  I can't think of any case where I've wanted to add more
JP> callbacks to a Deferred after chaining it to (from?  with?) another
JP> Deferred.

Right.

>> 2. Deferred.callback and Deferred.errback currently (implicitly) return
>> None.  They could be changed to return their passed argument.  That
>> would make a call to d1.chainDeferred act like a deferred fork - the
>> result would go down d2's callback chain, but also continue down the
>> callback/errback chain of d1.

JP> But it would be catastrophic for error handling.  Suddenly all of your
JP> errors on d1 which are handled perfectly correctly with an errback on
JP> d2 would become unhandled failures.

Ah yes :-)  Oops.

If you really wanted to do this, you could use another helper function
(e.g., Deferred.forkDeferred) which created and added a call/errback
functions to d1 that called d2 call/errback and then returned its arg). I
don't have a use case for that, so I'm not suggesting adding it to Twisted.
Anyone who wanted that kind of deferred forking functionality could write
it for themselves in a few lines.

>> 3. There's also the possibility of adding a function to the Deferred class:
>> 
>> def incorporateDeferred(self, d2):
>> self.callbacks.extend(d2.callbacks)
>> 
>> which might be what a naive reader might expect chainDeferred to do.
>> This raises the question of what you might later do with d2 (probably
>> nothing), but that's just like what happens with d1: if you call
>> d1.chainDeferred you're probably not going to return d1 to anyone. All
>> you can usefully do is fire it.

JP> If this accounted for future changes to d2, it would make more sense.

Yes. But as I mentioned, this mirrors the situation with d1.chainDeferred
in which future changes to d1 are also probably useless. It feels to me
like extending callbacks might be what people are expecting, as d1 then
remains useful.  (This leads to thoughts of a Deferred class that can't be
fired, just used to accumulate callbacks that are solely used to extend
other deferreds, but I guess deferreds are already abstract enough without
going there...)

JP> I think the correct direction to go in is to prevent people from trying
JP> to add more callbacks to d1.

Agreed. It's a simple change and it almost certainly flags a misunderstanding.
I can open an issue and submit a patch if you like.

Terry



From dreid at dreid.org  Fri Mar  6 13:25:53 2009
From: dreid at dreid.org (David Reid)
Date: Fri, 6 Mar 2009 10:25:53 -0800
Subject: [Twisted-Python] sending large files from web2 http server
In-Reply-To: <20090305154549.12853.624525997.divmod.quotient.18633@henry.divmod.com>
References: <49AFEDBB.3090402@bluegap.ch>
	<20090305154549.12853.624525997.divmod.quotient.18633@henry.divmod.com>
Message-ID: <f055221a0903061025h2c9ca26ftbadd18b566d47446@mail.gmail.com>

On Thu, Mar 5, 2009 at 7:45 AM, Jean-Paul Calderone <exarkun at divmod.com>wrote:

> On Thu, 05 Mar 2009 16:20:27 +0100, Markus Wanner <markus at bluegap.ch>
> wrote:
>
>> Hi,
>>
>> I'm trying to stream longish data via web2, but experience sudden stalls
>> in data transfer, followed by a connection abort after a certain
>> timeout. I can't completely reproduce the issue, yet, but figured that
>> the size of the blocks I'm returning via the stream's read method
>> affects the failure rate (an stream.IByteStream implementation).
>>
>> I've tried with chunk sizes between 1 MiB down to 256 bytes. At that
>> rate, I suddenly get the following unhandled errors, which don't seem to
>> have to do much with my code.
>>
>
> I haven't looked at how web2 handles IByteStream providers, but my first
> guess would be that this is an example of a somewhat common bug where
> Deferreds are chained to an arbitrary length based on application data
> and when there's too much application data, the chain gets too long (a
> limit imposed by how much recursion is possible when unwinding the chain),
> and you get this failure.


I think this probably has something to do with the fact the IByteStream.read
may optionally return a Deferred making it quite easy to write code that
accidentally chain Deferreds to infinity and beyond.  Such as if you're
calling IByteStream.read in the callback of another Deferred and returning
the result.  Sometimes the read method will return a Deferred, sometimes
it'll just return your data.  Without reading the implementation of the
provider you're using it's not easy to know which it'll do when.

While the specific bug you're encountering may or may not be in your
application code (I haven't read it, please post a minimal example if you
can) it illuminates a fundamental flaw of the twisted.web2.stream APIs.
(It's a flaw we understand, and there is a ticket I can't find right now
that documents how it should work there may even be a branch dialtone worked
on that could possibly fix it.)

If this email doesn't help you find your problem please do post a minimal
example and I promise I'll read it today.

-David
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090306/8663a686/attachment.htm 

From cayson.z at gmail.com  Fri Mar  6 23:45:03 2009
From: cayson.z at gmail.com (Boern)
Date: Sat, 7 Mar 2009 12:45:03 +0800
Subject: [Twisted-Python] How to invoke the remote method based on twisted
	in django web app?
In-Reply-To: <f564d0090903060344k65955c99n302cd510a4da6906@mail.gmail.com>
References: <be0f6540903051943y10241c1ej6380857e3f4152c9@mail.gmail.com>
	<49B10A1F.4090208@imperial.ac.uk>
	<f564d0090903060344k65955c99n302cd510a4da6906@mail.gmail.com>
Message-ID: <be0f6540903062045u5e5e7945p1c3cfa8cb5b86579@mail.gmail.com>

thanks,all. I have resolved it by twisted.web .xmprpc

On Fri, Mar 6, 2009 at 7:44 PM, Burus <eburus at gmail.com> wrote:

> You can try starting reactor. in the settings.py file, and use twisted  pb
> calls in the fjango views.
>
>
> On Fri, Mar 6, 2009 at 2:33 PM, Phil Mayers <p.mayers at imperial.ac.uk>wrote:
>
>> Boern wrote:
>>
>>> hi,all:
>>> I developed a web app in diango and a remote service in twisted, and I
>>> want to invoke the twisted remote method in django web.
>>> example:
>>>
>>> the remote service code :
>>>
>>> class Echoer(pb.Root):
>>>    def remote_echo(self, task):
>>>              print 'echoing:', task
>>>                return task
>>>
>>> if __name__ == '__main__':
>>>    reactor.listenTCP(8789, pb.PBServerFactory(Echoer()))
>>>    reactor.run()
>>>
>>>
>>> -------------------------------------------------------------------------------------------------------------
>>> and the djiango views.py code :
>>>
>>>       def register_task(requst):
>>> """register the task"""
>>>        .................
>>> factory = pb.PBClientFactory()
>>> reactor.connectTCP("localhost", 8789, factory)
>>> d = factory.getRootObject()
>>> d.addCallback(lambda object: object.callRemote("echo", task))
>>> d.addCallback(lambda echo: 'server echoed: '+echo[0]+str(echo[1]))
>>> d.addErrback(lambda reason: 'error: '+str(reason.value))
>>> d.addCallback(util.println)
>>> d.addCallback(lambda _: reactor.stop())
>>> reactor.run()
>>>
>>
>> That won't work. The reactor cannot be started more than once. It needs to
>> be long-lived.
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
Boern Parx
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090307/39516dd7/attachment.htm 

From dave at davebritton.com  Sat Mar  7 11:08:49 2009
From: dave at davebritton.com (Dave Britton)
Date: Sat, 7 Mar 2009 11:08:49 -0500
Subject: [Twisted-Python] newbie problem with SMTPClient
References: <20090302212228.12853.348641046.divmod.quotient.16662@henry.divmod.com>
Message-ID: <014901c99f3f$00deb080$0500a8c0@yoda>

Thanks! sendmail is just what I needed, and its source should help me figure
out the bigger picture.
-Dave
----- Original Message -----
From: "Jean-Paul Calderone" <exarkun at divmod.com>
To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Sent: Monday, March 02, 2009 4:22 PM
Subject: Re: [Twisted-Python] newbie problem with SMTPClient


> On Mon, 2 Mar 2009 15:57:17 -0500, Dave Britton <dave at davebritton.com>
wrote:
> >I love the idea of twisted but I think I must have a twisted learning
disability, as I have gotten nowhere in what ought to be a simple matter.
> >
> >I need to send out emails to small groups from my apache server running a
python cgi using mod_python, but my hosting service doesn't have a MTA.
Instead of learning how to install and configure exim I thought I would use
twisted to make a simple mail client. I started with the tutorial example
that appears at:
>
> It may be that installing exim is actually a better idea.  In order to get
> reliable message deliver, you'll need to handle transient failures.  That
> means persisting state over time (as long as several days) and performing
> redelivery attempts.  However, if you don't mind losing outgoing messages
> when there is a transient failure...
>
> > [snip]
> >
> >This nicely looks up the right MX record and sends out an email, just
what I need. Now I want to expand it to allow me to give it a list of email
addresses to send the message to (not just call this same routine multple
times, which seems wasteful and slow and doesn't use twisted's power to
process the multiple emails in multiple threads), but I'm having terrible
trouble figuring out how to do that, which tells me I'm missing a paradigm
somewhere, there's something I'm not getting.
>
> There is a reason that just calling the top-level function you've written
> once for each email might be wasteful, but I don't think it's the reason
> you're thinking.
>
> If you just naively call getMailExchange(host).addCallback(cbMailExchange)
> once for each email, then you will get parallel processing.  Almost as
soon
> as you call most Twisted APIs, they'll start an operation (to be precise,
> many of them start it immediately - before they even return - and others
> start it when you allow program execution flow to return to the reactor).
> So if you call getMailExchange in a loop, each iteration of the loop will
> start a new operation and they'll all run in parallel.  That seems like
> just what you're after.
>
> The reason this isn't the most efficient solution is that your list of
> email addresses might contain two addresses which have the same mail
> exchange host.  In this case, you could connect to that mail exchange
> once and address your message to both addresses and then deliver the
> message body to the mail exchange just once.  This is why getMailTo
> returns a list.
>
> So I think your other questions aren't directly relevant to this problem,
> but I'll answer them anyway, since they're good questions.
>
> >
> >Trouble 1 is figuring out the right way to pass additional parameters to
callbacks. Is this right:
> >
> >Dosomething(that-returns-a-deferred).addCallback(Then-do-the-next-thing,
extra-parameter1, extraparameter2)
> >
> >The function Then-do-the-next-thing() will receive the deferred returned
results from Dosomething() as its first argument, and extra-parameter1 and
extraparameter2 as the next two. That is as if calling:
> >Then-do-the-next-thing(Result-returned-by-Dosomething(),extra-parameter1,
extraparameter2). Have I got this correct?
>
> Yes, this is right.
>
> >So, if this is right, then where do I want to put the additional argument
that contains the next email address to send, if I iterate through the list
and hand each one to the email sending process like this:
> >
> >elist=['addr1 at domain.com','addr2 at nextdomain.com'...]
> >for e in elist:
> >.... e2={'mxhost':'','toaddr':e}
> >.... getMailExchange(e2).addCallback(cbMailExchange)
> >
>
> I'm not sure why you switched to a dictionary here.  Ignoring that, the
> biggest potential problem with this code snippet is that it creates a
> Deferred (the one returned by getMailExchange) and then drops it on the
> floor (albeit after adding a callback).  You'll almost certainly want to
> build up a list of Deferreds in cases like this, and then use something
> like twisted.internet.defer.gatherResults to find out when they've all
> fired.  Otherwise, you don't really know when your list of operations has
> completed.
>
> As to where to put extra arguments for tracking which email addresses to
> send the message to next, I don't see why you'd want that in this case.
> Your for loop iterates over all the addresses, so none of your callbacks
> should need to know about any more addresses.  That is to say, by the end
> of the for loop, there are no more addresses to which the message needs to
> be sent - you've started sending to all of them already.
>
> >In the tutorial, getMailExchange() is passed just the domain of the
addressee, and the sending out of the email happens when the callback
returns the MX exchange. I changed that to split the email address, so now
it returns both the full address and the mx:
> >
> >def getMailExchange(addr):
> >.... host=addr.split('@')[1]
> >.... def cbMX(mxRecord):
> >.... .... return [addr,str(mxRecord.name)]
> >.... return relaymanager.MXCalculator().getMX(host).addCallback(cbMX)
> >
> >
> >At this point I can't figure out how to get the email address passed to
wherever it needs to go. And I don't know really where it needs to go...
yikes.
>
> Likely nothing in this code cares.  However, the address is going to be
> passed to whatever callback is added to the Deferred this function
> returns - because you've included it in the list returned by cbMX.
>
> >
> >In the tutorial the actual email address is hard coded into the class
SMTPTutorialClient(smtp.ESMTPClient) as a class attribute, mailTo. I need to
change that to be variable.
> >
> >How do I get this value (of mailTo) changed for each of the instances
created by smtpClientFactory = SMTPClientFactory()? I think I must be
confused about the roles of Factories and Protocols.
>
> This is probably simpler than you expected - just override __init__ to
> accept any extra data you need, and then save that data as an instance
> attribute.
>
> >I can't seem to figure out a way that works to get the email address
passed into the system as a variable. Rather than waste people's time by
describing my various failures, I thought I'd just ask for suggestions about
the right twisted way to do it.
>
> Another API you might want to look at is twisted.mail.smtp.sendmail.  It's
> probably rather unfortunate that SMTP client tutorial doesn't cover that
> function.
>
> Hope this helps,
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From bhyde at pobox.com  Sat Mar  7 13:18:54 2009
From: bhyde at pobox.com (Ben Hyde)
Date: Sat, 7 Mar 2009 13:18:54 -0500
Subject: [Twisted-Python] StandardIO flush'n
Message-ID: <784929F0-1D6D-41DE-B83D-955C9594918B@pobox.com>

I'm new to this, but can somebody explain this behavior to me?  Thanks!

bash-3.2$ (echo a; echo b; sleep 1; echo c) | /tmp/bar.py
line: a
line: b
a
b
line: c
c
bash-3.2$ (echo a; echo b; echo c) | /tmp/bar.py
line: a
line: b
line: c
bash-3.2$ cat /tmp/bar.py
#!/usr/bin/env python
from twisted.internet import reactor
from twisted.protocols.basic import LineOnlyReceiver
from twisted.internet.stdio import StandardIO

class MyLineOnlyReceiver(LineOnlyReceiver):
     delimiter = '\n'
     def lineReceived(self, line):
         self.transport.write(line+self.delimiter)
         print "line:", line
     def connectionLost(self, why):
         LineOnlyReceiver.connectionLost(self, why)
         reactor.callWhenRunning(lambda:reactor.stop())

if __name__ == '__main__':
     StandardIO(MyLineOnlyReceiver())
     reactor.run()
bash-3.2$ port info 'py25-twisted'
py25-twisted @8.0.1 (python, devel, net)

Twisted is an event-driven networking framework written in Python.  
Twisted supports TCP,
UDP, SSL/TLS, multicast, Unix sockets, a large number of protocols  
(including HTTP, NNTP,
SSH, IRC, FTP, and others), and much more.
Homepage:    http://www.twistedmatrix.com/

Library Dependencies: python25, py25-zopeinterface
Maintainers:          stechert at macports.org akitada at macports.org
                       openmaintainer at macports.org
bash-3.2$ python -V
Python 2.5.4
bash-3.2$ uname -a
Darwin d72.cozy.org 9.6.0 Darwin Kernel Version 9.6.0: Mon Nov 24  
17:37:00 PST 2008; root:xnu-1228.9.59~1/RELEASE_I386 i386 i386
bash-3.2$



From mg at daimi.au.dk  Sat Mar  7 13:38:46 2009
From: mg at daimi.au.dk (Martin Geisler)
Date: Sat, 07 Mar 2009 19:38:46 +0100
Subject: [Twisted-Python] Re: Reentrant reactor iteration
In-Reply-To: <20090227162723.12853.1884927660.divmod.quotient.14670@henry.divmod.com>
	(Jean-Paul Calderone's message of "Fri, 27 Feb 2009 11:27:23 -0500")
References: <20090227162723.12853.1884927660.divmod.quotient.14670@henry.divmod.com>
Message-ID: <87d4ctqitl.fsf@hbox.dyndns.org>

Jean-Paul Calderone <exarkun at divmod.com> writes:

Hi,

Thanks for the answer. I'm also with the VIFF project and I would like
to explain a bit more about the background for the hack by Marcel.

> On Fri, 27 Feb 2009 15:26:43 +0100, Marcel Keller <mkeller at cs.au.dk> wrote:
>>Hi,
>>
>> I am working on the VIFF project (viff.dk) which uses Twisted. I
>> found out that our code is sometimes inefficient because we are
>> generating many deferreds (maybe about 10000) in a callback. While
>> doing that, no network communication is performed. Therefore, I
>> investigated the possibility of adding a function to the reactor
>> which is called every iteration and from which the iteration could
>> be called safely. Then, we could generate all deferreds in that
>> function and activate the reactor from to time. See the attached
>> patch for details.
>
> So you're doing a ton of work all at once now and you want to split up
> that ton of work into smaller pieces and do it a little at a time?

Sort of. We have overloaded the arithmetic operators in our library, so
people will expect to be able to write

  # xs and ys are big lists of our objects
  dot_product
  for (x, y) in zip(xs, ys):
    dot_product += x * y

Here the multiplications involves network traffic and return Deferreds.
We would like the network traffic for the first multiplication to begin
immediately, *before* the remaining multiplications are done.

Doing all the multiplications up front makes the code block the reactor
and uses an awful lot of RAM. If we let each multiplication trigger the
sending of its data immediately, and if we process incoming messages
along the way, memory can be reclaimed for the earlier multiplications
and the above calculation should run in constant memory.

Sending and processing data in a more even flow makes our benchmark
results better and more consistent from one run to the next.

> If that's the case, then you don't need to modify the reactor, you
> just need to split up the work your code is going. There are a lot of
> techniques for doing this. coiterate and inlineCallbacks are two
> solutions which are closest to "cookie cutter" (ie, you have the least
> flexibility in deciding how to use them).

Right -- we might be able to use these techniques. I haven't looked at
coiterate yet. With inlineCallbacks I guess the code would look
something like this:

  # xs and ys are big lists of our objects
  dot_product
  for (x, y) in zip(xs, ys):
    dot_product += (yield x * y)

which is not so bad, expect that it destroys the nice illusion that x
and y behave like normal integers even though the multiplication
involves network traffic.

> You have a very long, steep, uphill battle to convince me that adding
> support for re-entrant iteration is a good idea.

One problem I can think of is the memory usage associated with a very
deep recursion. Since there is no such thing as tail call optimization
in Python, each level in the recursion will hold onto any local
variables even though they might not be needed any more.

Are there other general problems with having a re-entrant reactor?

-- 
Martin Geisler

VIFF (Virtual Ideal Functionality Framework) brings easy and efficient
SMPC (Secure Multiparty Computation) to Python. See: http://viff.dk/.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 196 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20090307/b0f23125/attachment.pgp 

From exarkun at divmod.com  Sat Mar  7 15:04:15 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sat, 7 Mar 2009 15:04:15 -0500
Subject: [Twisted-Python] Re: Reentrant reactor iteration
In-Reply-To: <87d4ctqitl.fsf@hbox.dyndns.org>
Message-ID: <20090307200415.12853.1055105314.divmod.quotient.19796@henry.divmod.com>

On Sat, 07 Mar 2009 19:38:46 +0100, Martin Geisler <mg at daimi.au.dk> wrote:
>Jean-Paul Calderone <exarkun at divmod.com> writes:
>
>Hi,
>
>Thanks for the answer. I'm also with the VIFF project and I would like
>to explain a bit more about the background for the hack by Marcel.
>
>> [snip]
>>
>> So you're doing a ton of work all at once now and you want to split up
>> that ton of work into smaller pieces and do it a little at a time?
>
>Sort of. We have overloaded the arithmetic operators in our library, so
>people will expect to be able to write
>
>  # xs and ys are big lists of our objects
>  dot_product
>  for (x, y) in zip(xs, ys):
>    dot_product += x * y
>
>Here the multiplications involves network traffic and return Deferreds.
>We would like the network traffic for the first multiplication to begin
>immediately, *before* the remaining multiplications are done.
>
>Doing all the multiplications up front makes the code block the reactor
>and uses an awful lot of RAM. If we let each multiplication trigger the
>sending of its data immediately, and if we process incoming messages
>along the way, memory can be reclaimed for the earlier multiplications
>and the above calculation should run in constant memory.

Hm.  I would bet the constant would be pretty high, though.  Things will
only balance out once the network is keeping up with the local for loop.
Actually, I'm not sure why it would be constant at all.  Won't the local
for loop always run much faster than any network operations can happen?
In this case, memory usage will go towards K(local) * set size - K(remote)
* set size, or just O(set size); that is to say, linear.

>Sending and processing data in a more even flow makes our benchmark
>results better and more consistent from one run to the next.

It seems like what you'll really benefit from most is pipelining with a
maximum pipeline depth that's not too big (so as to conserve memory) but
not too small (so as to avoid wasting time on network round trip time).

>> If that's the case, then you don't need to modify the reactor, you
>> just need to split up the work your code is going. There are a lot of
>> techniques for doing this. coiterate and inlineCallbacks are two
>> solutions which are closest to "cookie cutter" (ie, you have the least
>> flexibility in deciding how to use them).
>
>Right -- we might be able to use these techniques. I haven't looked at
>coiterate yet. With inlineCallbacks I guess the code would look
>something like this:
>
>  # xs and ys are big lists of our objects
>  dot_product
>  for (x, y) in zip(xs, ys):
>    dot_product += (yield x * y)
>
>which is not so bad, expect that it destroys the nice illusion that x
>and y behave like normal integers even though the multiplication
>involves network traffic.

Perhaps with coiterate this might look something like...

    def op(xs, ys):
        dot_product = 0
        for (x, y) in zip(xs, ys):
            dot_product += x * y
            yield

        yield dot_product

    d = coiterate(op(xs, ys))

This is flawed, but maybe it can be fixed.  What's good about it is that
it doesn't try to drive the reactor re-entrantly. :)  It also avoids the
yield in the += and * operations, which somewhat preserves your illusion
of normalcy (I'm not saying I like that illusion, but I'll leave that aside
for now).

What's bad about it is that it still lets the local loop run arbitrarily
far ahead of the results from the network, giving you unbounded memory
usage.  To fix that, it should yield a Deferred every once in a while.
The reason I leave it flawed here is that it's a little tricky to figure
out which Deferred to yield.  What would be great would be to yield the
Deferred for an operation which preceeds the most recently executed
operation by some number of operations.  The number of operations by
which it preceeds the most recent will be your pipeline depth (roughly).
The effect this has on coiterate is to cause your local loop to cease to
execute until that Deferred has fired.  By making it a Deferred for an
operation some time /before/ the most recent operation, you keep the
network busy and avoid wasting time on round trip times.  Once the Deferred
fires, your loop gets run a few more times which has the effect of putting
more work into the pipeline - until you've got enough extra work to keep
things from stalling again, and then coiterate puts you to sleep for a
while again.

>> You have a very long, steep, uphill battle to convince me that adding
>> support for re-entrant iteration is a good idea.
>
>One problem I can think of is the memory usage associated with a very
>deep recursion. Since there is no such thing as tail call optimization
>in Python, each level in the recursion will hold onto any local
>variables even though they might not be needed any more.
>
>Are there other general problems with having a re-entrant reactor?

One general problem is simply that the reactor is not written with this
in mind.  So with the current implementation, even including the patch
Marcel contributed, it doesn't work, period.  When I say "doesn't work",
I mean that there are cases which will simply result in incorrect behavior,
though there may be other cases where everything does work out as you
expect.  Going along with this, it's quite a bit harder to test that
things work when re-entrancy is allowed or expected than if it isn't, so
even if all of the current reactor implementations were made re-entrant,
there would likely be a higher rate of defects related to this in the
future, simply because it's harder.

This isn't limited solely to the reactor, either.  A re-entrant reactor
almost certainly means that application code will be invoked re-entrantly.
This is actually the case already, unfortunately, and it is a bit of an
open question as to what should be done about it.  A very common bug I
find (and write! :() in Twisted applications is failure to handle various
forms of re-entrancy correctly.  This is an existing issue with Twisted,
not related to this proposed change, but making this change would only
make the problem worse and essentially destroy and hope for ever making it
better.

Actually, that general problem is so general that I can't really think of
any others to discuss, so I'll leave it at that for now. :)  If you want,
I can probably share some specific examples of how re-entrancy leads to
surprising bugs in unexpected places (probably from real programs, too :/).

Jean-Paul



From mg at daimi.au.dk  Sat Mar  7 16:58:01 2009
From: mg at daimi.au.dk (Martin Geisler)
Date: Sat, 07 Mar 2009 22:58:01 +0100
Subject: [Twisted-Python] Re: Reentrant reactor iteration
In-Reply-To: <20090307200415.12853.1055105314.divmod.quotient.19796@henry.divmod.com>
	(Jean-Paul Calderone's message of "Sat, 7 Mar 2009 15:04:15 -0500")
References: <20090307200415.12853.1055105314.divmod.quotient.19796@henry.divmod.com>
Message-ID: <87r619ov12.fsf@hbox.dyndns.org>

Jean-Paul Calderone <exarkun at divmod.com> writes:

> On Sat, 07 Mar 2009 19:38:46 +0100, Martin Geisler <mg at daimi.au.dk> wrote:
>
>> We have overloaded the arithmetic operators in our library, so people
>> will expect to be able to write
>>
>>  # xs and ys are big lists of our objects
>>  dot_product
>>  for (x, y) in zip(xs, ys):
>>    dot_product += x * y
>>
>> Here the multiplications involves network traffic and return
>> Deferreds. We would like the network traffic for the first
>> multiplication to begin immediately, *before* the remaining
>> multiplications are done.
>>
>> Doing all the multiplications up front makes the code block the
>> reactor and uses an awful lot of RAM. If we let each multiplication
>> trigger the sending of its data immediately, and if we process
>> incoming messages along the way, memory can be reclaimed for the
>> earlier multiplications and the above calculation should run in
>> constant memory.
>
> Hm.  I would bet the constant would be pretty high, though.  Things will
> only balance out once the network is keeping up with the local for loop.
> Actually, I'm not sure why it would be constant at all.  Won't the local
> for loop always run much faster than any network operations can happen?

Yeah, you're right. Our results are very biased by only testing on a
local area network so far...

Three parties execute the same code, and each multiplication is done
when we have heard from the two others. With a fast network we can move
data around as fast as we can do the local operations needed (some
additions and multiplications of numbers with 65 bits or more).

> In this case, memory usage will go towards K(local) * set size -
> K(remote) * set size, or just O(set size); that is to say, linear.

Right, and that hints that the real goal is to throttle the
multiplications (like you point out below).

>>Sending and processing data in a more even flow makes our benchmark
>>results better and more consistent from one run to the next.
>
> It seems like what you'll really benefit from most is pipelining with a
> maximum pipeline depth that's not too big (so as to conserve memory) but
> not too small (so as to avoid wasting time on network round trip time).

Yes, that is exactly what we want!

>>Right -- we might be able to use these techniques. I haven't looked at
>>coiterate yet. With inlineCallbacks I guess the code would look
>>something like this:
>>
>>  # xs and ys are big lists of our objects
>>  dot_product
>>  for (x, y) in zip(xs, ys):
>>    dot_product += (yield x * y)
>>
>>which is not so bad, expect that it destroys the nice illusion that x
>>and y behave like normal integers even though the multiplication
>>involves network traffic.
>
> Perhaps with coiterate this might look something like...
>
>    def op(xs, ys):
>        dot_product = 0
>        for (x, y) in zip(xs, ys):
>            dot_product += x * y
>            yield
>
>        yield dot_product
>
>    d = coiterate(op(xs, ys))

Cool, thanks for the example! That really helps in understanding the
alternatives...

> This is flawed, but maybe it can be fixed. What's good about it is
> that it doesn't try to drive the reactor re-entrantly. :) It also
> avoids the yield in the += and * operations, which somewhat preserves
> your illusion of normalcy (I'm not saying I like that illusion, but
> I'll leave that aside for now).

Hehe :-) I'm also not sure what to think of the illusion, but it just
came very naturally with Twisted and the Deferreds. On the other hand it
breaks down all the time since one still needs to directly add callbacks
to do certain things...

> What's bad about it is that it still lets the local loop run arbitrarily
> far ahead of the results from the network, giving you unbounded memory
> usage.  To fix that, it should yield a Deferred every once in a while.
> The reason I leave it flawed here is that it's a little tricky to figure
> out which Deferred to yield.  What would be great would be to yield the
> Deferred for an operation which preceeds the most recently executed
> operation by some number of operations.  The number of operations by
> which it preceeds the most recent will be your pipeline depth (roughly).
> The effect this has on coiterate is to cause your local loop to cease to
> execute until that Deferred has fired.  By making it a Deferred for an
> operation some time /before/ the most recent operation, you keep the
> network busy and avoid wasting time on round trip times.  Once the Deferred
> fires, your loop gets run a few more times which has the effect of putting
> more work into the pipeline - until you've got enough extra work to keep
> things from stalling again, and then coiterate puts you to sleep for a
> while again.

Thanks a lot for the info! I think I'll forward it to the VIFF mailing
list and discuss a bit further there.

>>Are there other general problems with having a re-entrant reactor?
>
> One general problem is simply that the reactor is not written with this
> in mind.  So with the current implementation, even including the patch
> Marcel contributed, it doesn't work, period.  [...]

Hmm, lots of good reasons... :-/ Marcel also mentioned that his hack
made some unit tests fail, but I don't know yet if that was Twisted or
VIFF tests. Not that it matters much -- this change should of course be
invisible to existing code.

-- 
Martin Geisler

VIFF (Virtual Ideal Functionality Framework) brings easy and efficient
SMPC (Secure Multiparty Computation) to Python. See: http://viff.dk/.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 196 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20090307/1f6459cf/attachment.pgp 

From andrewfr_ice at yahoo.com  Sat Mar  7 17:10:40 2009
From: andrewfr_ice at yahoo.com (Andrew Francis)
Date: Sat, 7 Mar 2009 14:10:40 -0800 (PST)
Subject: [Twisted-Python] URL not Found Re: Twisted developers: please
	donate your time!
Message-ID: <38640.89218.qm@web34205.mail.mud.yahoo.com>


Hi Jean-Paul:

I am not sure if I should take this off-line....

>http://twistedmatrix.com/trac/query?>status=new&status=assigned&status=reopened&keywords=~documentation&order=p>riority shows all of the open tickets with the "documentation" keyword.  >So there's a lot to choose from, many are about the reactor.  

Okay I am looking through the list.

For ticket 1138 (cool movie), when I access the URL:

http://twistedmatrix.com/projects/core/documentation/howto/tutorial/deferred_tutorial.html

I get, URL not found. Which deferred tutorial are you referring to? "Deferreds are Beautiful (A Tutorial) at :

http://twistedmatrix.com/projects/core/documentation/howto/deferredindepth.html. 

I see the reference to python.util there.

>There's also one, #1009, about deferredGenerator/inlineCallbacks.  I >think you're somewhat familiar with those?

I seldom use deferredGenerators/inlineCallbacks but I have followed the discussions. Let me review what has been said and I will summarize in a separate post to see if folks are cool with what I have said. 

>http://twistedmatrix.com/trac/ticket/1020

I see it is not high priority but I may be able to provide insights (more like steal from John Ousterhout :-)).

>It's also certainly the case that there are tickets open for reactor >problems, so if you feel comfortable with that part of Twisted, there's >plenty to contribute to.

Okay.

Cheers,
Andrew





      



From ian.fountain at gmail.com  Sat Mar  7 23:06:14 2009
From: ian.fountain at gmail.com (Ian Fountain)
Date: Sat, 7 Mar 2009 23:06:14 -0500
Subject: [Twisted-Python] Error when trying to import reactor
Message-ID: <22ccbfd0903072006jdd604a8n5fc4c9d1c519418f@mail.gmail.com>

I am new to all this so you will have to forgive me. I have a vista machine
with python 2.5 on it and I just installed twisted (py2.5), pyOpenSSL
(py2.5), and pycrypto (py2.5) but when I try to do the following:
"from twisted.internet import reactor" I get the following error:
"This application has failed to start because libeay32.dll was not found.
Re-installing the application may fix this problem."
I then found a copy of libeay32.dll and put it in my System32 folder and
then get the following error:
"The procedure entry point ERR_load_RAND_string could not be located in the
dynamic link library libeay32.dll."
I am currently out of ideas on what to do. Any help would be appreciated.
Thanks,
Ian
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090307/ea2318cd/attachment.htm 

From exarkun at twistedmatrix.com  Sun Mar  8 00:05:10 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 08 Mar 2009 05:05:10 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1236488710.93.343246503@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090308/587e397d/attachment.htm 

From florent.aide at gmail.com  Sun Mar  8 05:33:00 2009
From: florent.aide at gmail.com (Florent Aide)
Date: Sun, 8 Mar 2009 10:33:00 +0100
Subject: [Twisted-Python] Error when trying to import reactor
In-Reply-To: <22ccbfd0903072006jdd604a8n5fc4c9d1c519418f@mail.gmail.com>
References: <22ccbfd0903072006jdd604a8n5fc4c9d1c519418f@mail.gmail.com>
Message-ID: <628981a60903080133m6f40cc74oeca93d43a3ffbed6@mail.gmail.com>

On Sun, Mar 8, 2009 at 5:06 AM, Ian Fountain <ian.fountain at gmail.com> wrote:
> I am new to all this so you will have to forgive me. I have a vista machine
> with python 2.5 on it and I just installed twisted (py2.5), pyOpenSSL
> (py2.5), and pycrypto (py2.5) but when I try to do the following:
> "from twisted.internet import reactor" I get the following error:
> "This application has failed to start because libeay32.dll was not found.
> Re-installing the application may fix this problem."
> I then found a copy of libeay32.dll and put it in my System32 folder and
> then get the following error:
> "The procedure entry point ERR_load_RAND_string could not be located in the
> dynamic link library libeay32.dll."
> I am currently out of ideas on what to do. Any help would be appreciated.
> Thanks,

You need to have openssl install on your machine. Either download the
source and compile by yourself of use the binaries from there:

http://www.openssl.org/related/binaries.html

Florent.



From glyph at divmod.com  Sun Mar  8 08:17:22 2009
From: glyph at divmod.com (glyph at divmod.com)
Date: Sun, 08 Mar 2009 12:17:22 -0000
Subject: [Twisted-Python] Error when trying to import reactor
In-Reply-To: <628981a60903080133m6f40cc74oeca93d43a3ffbed6@mail.gmail.com>
References: <22ccbfd0903072006jdd604a8n5fc4c9d1c519418f@mail.gmail.com>
	<628981a60903080133m6f40cc74oeca93d43a3ffbed6@mail.gmail.com>
Message-ID: <20090308121722.12555.607067322.divmod.xquotient.5506@weber.divmod.com>


On 09:33 am, florent.aide at gmail.com wrote:
>On Sun, Mar 8, 2009 at 5:06 AM, Ian Fountain <ian.fountain at gmail.com> 
>wrote:
>>I am new to all this so you will have to forgive me. I have a vista 
>>machine
>>with python 2.5 on it and I just installed twisted (py2.5), pyOpenSSL
>>(py2.5), and pycrypto (py2.5) but when I try to do the following:
>>"from twisted.internet import reactor" I get the following error:
>>"This application has failed to start because libeay32.dll was not 
>>found.
>>Re-installing the application may fix this problem."
>>I then found a copy of libeay32.dll and put it in my System32 folder 
>>and
>>then get the following error:
>>"The procedure entry point ERR_load_RAND_string could not be located 
>>in the
>>dynamic link library libeay32.dll."
>>I am currently out of ideas on what to do. Any help would be 
>>appreciated.
>>Thanks,
>
>You need to have openssl install on your machine. Either download the
>source and compile by yourself of use the binaries from there:

More importantly you need to have a *matching* version of pyopenssl and 
openssl installed.

Please don't don't manually put libraries into your System32 folder; use 
packages, or put the dlls somewhere else where you are more likely to 
find them.  It can make problems like this very hard to diagnose, when 
later you come back and try to properly install openssl, but the version 
in your system32 directory is somehow getting picked up instead of the 
version that you just installed.

I wanted to refer you to some documentation from here, but the pyopenssl 
website is oddly silent on which version of OpenSSL to use on Windows. 
Would whoever built 
http://sourceforge.net/project/showfiles.php?group_id=31249&package_id=90289 
please state which version of win32 openssl it was built against?  I'm 
guessing 0.9.8j, but I'm not too confident in that guess...



From ian.fountain at gmail.com  Sun Mar  8 11:30:34 2009
From: ian.fountain at gmail.com (Ian Fountain)
Date: Sun, 8 Mar 2009 11:30:34 -0400
Subject: [Twisted-Python] Error when trying to import reactor
In-Reply-To: <20090308121722.12555.607067322.divmod.xquotient.5506@weber.divmod.com>
References: <22ccbfd0903072006jdd604a8n5fc4c9d1c519418f@mail.gmail.com>
	<628981a60903080133m6f40cc74oeca93d43a3ffbed6@mail.gmail.com>
	<20090308121722.12555.607067322.divmod.xquotient.5506@weber.divmod.com>
Message-ID: <22ccbfd0903080830o5bcc3af7h75f3f2b5554e9bc6@mail.gmail.com>

Thanks for the quick responses! I admit that putting the dlls directly into
the System32 folder was a rookie move, but I desperately wanted to get
twisted up and running :). So now I have a few more questions if you don't
mind answering them. Like I said before, I am a rookie so I am simply
following whatever it tells me to do in the O'Reilly Twisted Network
Programming Essentials book so I downloaded and installed the following:
pyOpenSSL-0.8.winxp32-py2.5.msi
pycrypto-2.0.1.win32-py2.5.exe
Twisted_NoDocs-8.2.0.win32-py2.5.exe
So do I still have to install openSSL on my machine even though I installed
all of those? Also do I have to use Python 2.5 if I want to use pycrypto and
pyOpenSSL? And finally I was looking around and I didn't see anything that
stated that Vista is even supported. Could that be another problem I might
run into. Thanks again for all the help.



On Sun, Mar 8, 2009 at 8:17 AM, <glyph at divmod.com> wrote:

>
> On 09:33 am, florent.aide at gmail.com wrote:
>
>> On Sun, Mar 8, 2009 at 5:06 AM, Ian Fountain <ian.fountain at gmail.com>
>> wrote:
>>
>>> I am new to all this so you will have to forgive me. I have a vista
>>> machine
>>> with python 2.5 on it and I just installed twisted (py2.5), pyOpenSSL
>>> (py2.5), and pycrypto (py2.5) but when I try to do the following:
>>> "from twisted.internet import reactor" I get the following error:
>>> "This application has failed to start because libeay32.dll was not found.
>>> Re-installing the application may fix this problem."
>>> I then found a copy of libeay32.dll and put it in my System32 folder and
>>> then get the following error:
>>> "The procedure entry point ERR_load_RAND_string could not be located in
>>> the
>>> dynamic link library libeay32.dll."
>>> I am currently out of ideas on what to do. Any help would be appreciated.
>>> Thanks,
>>>
>>
>> You need to have openssl install on your machine. Either download the
>> source and compile by yourself of use the binaries from there:
>>
>
> More importantly you need to have a *matching* version of pyopenssl and
> openssl installed.
>
> Please don't don't manually put libraries into your System32 folder; use
> packages, or put the dlls somewhere else where you are more likely to find
> them.  It can make problems like this very hard to diagnose, when later you
> come back and try to properly install openssl, but the version in your
> system32 directory is somehow getting picked up instead of the version that
> you just installed.
>
> I wanted to refer you to some documentation from here, but the pyopenssl
> website is oddly silent on which version of OpenSSL to use on Windows. Would
> whoever built
> http://sourceforge.net/project/showfiles.php?group_id=31249&package_id=90289please state which version of win32 openssl it was built against?  I'm
> guessing 0.9.8j, but I'm not too confident in that guess...
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090308/ac07d89a/attachment.htm 

From florent.aide at gmail.com  Sun Mar  8 12:05:00 2009
From: florent.aide at gmail.com (Florent Aide)
Date: Sun, 8 Mar 2009 17:05:00 +0100
Subject: [Twisted-Python] Error when trying to import reactor
In-Reply-To: <22ccbfd0903080830o5bcc3af7h75f3f2b5554e9bc6@mail.gmail.com>
References: <22ccbfd0903072006jdd604a8n5fc4c9d1c519418f@mail.gmail.com>
	<628981a60903080133m6f40cc74oeca93d43a3ffbed6@mail.gmail.com>
	<20090308121722.12555.607067322.divmod.xquotient.5506@weber.divmod.com>
	<22ccbfd0903080830o5bcc3af7h75f3f2b5554e9bc6@mail.gmail.com>
Message-ID: <628981a60903080905h72f22d85g3323b656ec31a2fd@mail.gmail.com>

On Sun, Mar 8, 2009 at 4:30 PM, Ian Fountain <ian.fountain at gmail.com> wrote:
> Thanks for the quick responses! I admit that putting the dlls directly into
> the System32 folder was a rookie move, but I desperately wanted to get

And I had not fully read your email because I did not see that you
manually copied the file to system32, hence my short answer.

> twisted up and running :). So now I have a few more questions if you don't
> mind answering them. Like I said before, I am a rookie so I am simply
> following whatever it tells me to do in the O'Reilly Twisted Network
> Programming Essentials book so I downloaded and installed the following:
> pyOpenSSL-0.8.winxp32-py2.5.msi
> pycrypto-2.0.1.win32-py2.5.exe
> Twisted_NoDocs-8.2.0.win32-py2.5.exe
> So do I still have to install openSSL on my machine even though I installed

Yes. And as Glyph suggested you should use the right version I am
using pyopenssl 0.8 (from sourceforge oct 2008) with OpenSSL 0.9.8i
(from the installer I pointed to)
If using the installer I pointed to earlier, make sure you answer
"copy to /bin" instead of copy to system32 (as Glyph stated above)

> all of those? Also do I have to use Python 2.5 if I want to use pycrypto and

Yep. You installed the libraries for python 2.5 only (see the names of
the files) so you should use python 2.5 if you want to be able to
import them.

> pyOpenSSL? And finally I was looking around and I didn't see anything that
> stated that Vista is even supported. Could that be another problem I might
> run into. Thanks again for all the help.

I am currently working on Vista without problem.

Florent.



From ian.fountain at gmail.com  Sun Mar  8 12:24:54 2009
From: ian.fountain at gmail.com (Ian Fountain)
Date: Sun, 8 Mar 2009 12:24:54 -0400
Subject: [Twisted-Python] Error when trying to import reactor
In-Reply-To: <628981a60903080905h72f22d85g3323b656ec31a2fd@mail.gmail.com>
References: <22ccbfd0903072006jdd604a8n5fc4c9d1c519418f@mail.gmail.com>
	<628981a60903080133m6f40cc74oeca93d43a3ffbed6@mail.gmail.com>
	<20090308121722.12555.607067322.divmod.xquotient.5506@weber.divmod.com>
	<22ccbfd0903080830o5bcc3af7h75f3f2b5554e9bc6@mail.gmail.com>
	<628981a60903080905h72f22d85g3323b656ec31a2fd@mail.gmail.com>
Message-ID: <22ccbfd0903080924q11e10c0eq684dba938dc94048@mail.gmail.com>

Well Florent and Glyph, you saved the day :). I downloaded and installed
OpenSSL now no errors. One last question... before installing OpenSSL it
recommended I get the Visual C++ 2008 Redistributables (which I did)... was
this necessary? Thanks again for all your help... I am sure I will be back
with more questions soon :).

On Sun, Mar 8, 2009 at 12:05 PM, Florent Aide <florent.aide at gmail.com>wrote:

> On Sun, Mar 8, 2009 at 4:30 PM, Ian Fountain <ian.fountain at gmail.com>
> wrote:
> > Thanks for the quick responses! I admit that putting the dlls directly
> into
> > the System32 folder was a rookie move, but I desperately wanted to get
>
> And I had not fully read your email because I did not see that you
> manually copied the file to system32, hence my short answer.
>
> > twisted up and running :). So now I have a few more questions if you
> don't
> > mind answering them. Like I said before, I am a rookie so I am simply
> > following whatever it tells me to do in the O'Reilly Twisted Network
> > Programming Essentials book so I downloaded and installed the following:
> > pyOpenSSL-0.8.winxp32-py2.5.msi
> > pycrypto-2.0.1.win32-py2.5.exe
> > Twisted_NoDocs-8.2.0.win32-py2.5.exe
> > So do I still have to install openSSL on my machine even though I
> installed
>
> Yes. And as Glyph suggested you should use the right version I am
> using pyopenssl 0.8 (from sourceforge oct 2008) with OpenSSL 0.9.8i
> (from the installer I pointed to)
> If using the installer I pointed to earlier, make sure you answer
> "copy to /bin" instead of copy to system32 (as Glyph stated above)
>
> > all of those? Also do I have to use Python 2.5 if I want to use pycrypto
> and
>
> Yep. You installed the libraries for python 2.5 only (see the names of
> the files) so you should use python 2.5 if you want to be able to
> import them.
>
> > pyOpenSSL? And finally I was looking around and I didn't see anything
> that
> > stated that Vista is even supported. Could that be another problem I
> might
> > run into. Thanks again for all the help.
>
> I am currently working on Vista without problem.
>
> Florent.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090308/ad5cb362/attachment.htm 

From markus at bluegap.ch  Mon Mar  9 05:17:20 2009
From: markus at bluegap.ch (Markus Wanner)
Date: Mon, 09 Mar 2009 10:17:20 +0100
Subject: [Twisted-Python] sending large files from web2 http server
In-Reply-To: <20090305154549.12853.624525997.divmod.quotient.18633@henry.divmod.com>
References: <20090305154549.12853.624525997.divmod.quotient.18633@henry.divmod.com>
Message-ID: <49B4DEA0.5050307@bluegap.ch>

Hi,

Jean-Paul Calderone wrote:
> I haven't looked at how web2 handles IByteStream providers, but my first
> guess would be that this is an example of a somewhat common bug where
> Deferreds are chained to an arbitrary length based on application data
> and when there's too much application data, the chain gets too long (a
> limit imposed by how much recursion is possible when unwinding the chain),
> and you get this failure.

Okay, thanks for this hint, I'll investigate.

> The main focus of web development in Twisted now is Twisted Web, not
> Twisted Web2.

That surprises me, but it's certainly good to know.

I've mostly used web2 so far, because I thought it was meant to replace
twisted.web some day. The read-me-first page of twisted web2 [1] still
makes it sound like twisted.web is to be obsoleted, soon.

Shall I port my applications to twisted.web to be more future-proof?

> However, if you can supply a patch which fixes this
> (along with unit tests, please :), then we'd be happy to apply it.

I'll try... but I rather suspect the bug to be in my own code. ;-)

Regards

Markus Wanner


[1]: the "read this page first" of web2:
http://twistedmatrix.com/trac/wiki/WebDevelopmentWithTwisted



From markus at bluegap.ch  Mon Mar  9 05:18:39 2009
From: markus at bluegap.ch (Markus Wanner)
Date: Mon, 09 Mar 2009 10:18:39 +0100
Subject: [Twisted-Python] sending large files from web2 http server
In-Reply-To: <f055221a0903061025h2c9ca26ftbadd18b566d47446@mail.gmail.com>
References: <49AFEDBB.3090402@bluegap.ch>	<20090305154549.12853.624525997.divmod.quotient.18633@henry.divmod.com>
	<f055221a0903061025h2c9ca26ftbadd18b566d47446@mail.gmail.com>
Message-ID: <49B4DEEF.2070403@bluegap.ch>

Hi,

David Reid wrote:
> I think this probably has something to do with the fact the IByteStream.read
> may optionally return a Deferred making it quite easy to write code that
> accidentally chain Deferreds to infinity and beyond.  Such as if you're
> calling IByteStream.read in the callback of another Deferred and returning
> the result.  Sometimes the read method will return a Deferred, sometimes
> it'll just return your data.  Without reading the implementation of the
> provider you're using it's not easy to know which it'll do when.

Thank you, too. I'll investigate and try to come up with a simple test
case, if possible and reasonable.

Regards

Markus Wanner




From petshmidt at googlemail.com  Mon Mar  9 08:02:01 2009
From: petshmidt at googlemail.com (Pet)
Date: Mon, 9 Mar 2009 13:02:01 +0100
Subject: [Twisted-Python] twistd tap file are not created
Message-ID: <b460e9630903090502h1b8af2e3p8730bae27bce4fcb@mail.gmail.com>

Hello,

I'm trying an example from twisted book and when I run this:
twistd -n reverse_app.py

application works, but no .tap file is created

Another question, how are twisted daemons actually stopped?

Pet

reverse_app.py
from twisted.application import service
import reverse

application = service.Application("Reverser")
reverserService = reverse.ReverserService()
reverserService.setServiceParent(application)



reverse.py:
from twisted.application import service, internet
from twisted.internet import protocol, reactor
from twisted.protocols import basic

def reverse(string):
    return string[::-1]

class ReverserProtocol(basic.LineReceiver):
    def lineReceived(self, line):
        if hasattr(self, 'handle_' + line):
            getattr(self, 'handle_' + line)()
        else:
            self.sendLine(reverse(line))

    def handle_quit(self):
        self.transport.loseConnection()

class ReverserFactory(protocol.ServerFactory):
    protocol = ReverserProtocol

class ReverserService(internet.TCPServer):
    def _  _init_  _(self):
        internet.TCPServer.__init__(self, 2323, ReverserFactory())



From aronbierbaum at gmail.com  Mon Mar  9 10:17:14 2009
From: aronbierbaum at gmail.com (Aron Bierbaum)
Date: Mon, 9 Mar 2009 09:17:14 -0500
Subject: [Twisted-Python] _Win32Waker
In-Reply-To: <20090306125153.12853.504773560.divmod.quotient.19159@henry.divmod.com>
References: <34457a4c0903051449m7b4845e1yd402d7287773fd2e@mail.gmail.com>
	<20090306125153.12853.504773560.divmod.quotient.19159@henry.divmod.com>
Message-ID: <34457a4c0903090717x92b0366x3a524e9577ba15b7@mail.gmail.com>

I have been unable to reproduce this problem on multiple machines that
I have tested on. Also I have tried changing various network settings
on my machine without any change. Do you have any ideas what I should
be looking for?

Thanks,
Aron

On Fri, Mar 6, 2009 at 7:51 AM, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> On Thu, 5 Mar 2009 16:49:15 -0600, Aron Bierbaum <aronbierbaum at gmail.com>
> wrote:
>>
>> I have been using a custom Qt4 reactor that derives from
>> PosixReactorBase. As a result it creates a _Win32Waker to allow
>> threads and signals to wake up the IO thread. It seems though that the
>> current implementation only works about half of the time. The other
>> half it exists with :
>>
>> ?File "...\Lib\python2.6\site-packages\twisted\internet\posixbase.py",
>> line 170, in __init__
>> ? ReactorBase.__init__(self)
>> ?File "...\Lib\python2.6\site-packages\twisted\internet\base.py",
>> line 424, in __init__
>> ? self._initThreads()
>> ?File "...\Lib\python2.6\site-packages\twisted\internet\base.py",
>> line 813, in _initThreads
>> ? self.installWaker()
>> ?File "...\Lib\python2.6\site-packages\twisted\internet\posixbase.py",
>> line 206, in installWaker
>> ? self.waker = _Waker(self)
>> ?File "...\Lib\python2.6\site-packages\twisted\internet\posixbase.py",
>> line 77, in __init__
>> ? client.connect(server.getsockname())
>> ?File "<string>", line 1, in connect
>> socket.error: [Errno 10049] The requested address is not valid in its
>> context
>>
>> I have attached a simple test that shows that the following code does
>> not always return "127.0.0.1", but sometimes returns "0.0.0.0" as the
>> IP address.
>>
>> ? ? ? # Following select_trigger (from asyncore)'s example;
>> ? ? ? server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
>> ? ? ? client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
>> ? ? ? client.setsockopt(socket.IPPROTO_TCP, 1, 1)
>> ? ? ? server.bind(('127.0.0.1', 0))
>> ? ? ? server.listen(1)
>> ? ? ? client.connect(server.getsockname())
>>
>> My current workaround just calls the following instead:
>>
>> ? ? ? client.connect(('127.0.0.1', server.getsockname()[1]))
>>
>> Any ideas on what is really causing the error? If there is not a
>> better solution can this be added to trunk for future releases?
>
> It's definitely true that you can't connect to "0.0.0.0" on Windows, and
> various parts of Twisted try to deal with this in some way already. ?It
> isn't clear to me why that getsockname() isn't returning "127.0.0.1" though.
> I expect it's due to some configuration change or third-party networking
> software on the Windows machine. ?Do you think you can track that down?
> That will make it much easier to think about the problem and the solution.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From exarkun at divmod.com  Mon Mar  9 10:36:11 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 9 Mar 2009 09:36:11 -0500
Subject: [Twisted-Python] _Win32Waker
In-Reply-To: <34457a4c0903090717x92b0366x3a524e9577ba15b7@mail.gmail.com>
Message-ID: <20090309143611.12853.873370890.divmod.quotient.20775@henry.divmod.com>

On Mon, 9 Mar 2009 09:17:14 -0500, Aron Bierbaum <aronbierbaum at gmail.com> wrote:
>I have been unable to reproduce this problem on multiple machines that
>I have tested on. Also I have tried changing various network settings
>on my machine without any change. Do you have any ideas what I should
>be looking for?

Not really, sorry.  I know that behavior often differs subtly or grossly
from Windows machine to Windows machine, but not why.

Jean-Paul



From drew.smathers at gmail.com  Mon Mar  9 16:02:10 2009
From: drew.smathers at gmail.com (Drew Smathers)
Date: Mon, 9 Mar 2009 16:02:10 -0400
Subject: [Twisted-Python] twistd tap file are not created
In-Reply-To: <b460e9630903090502h1b8af2e3p8730bae27bce4fcb@mail.gmail.com>
References: <b460e9630903090502h1b8af2e3p8730bae27bce4fcb@mail.gmail.com>
Message-ID: <368574aa0903091302j346fd465w3c6b329ced660924@mail.gmail.com>

On Mon, Mar 9, 2009 at 8:02 AM, Pet <petshmidt at googlemail.com> wrote:
> Hello,
>
> I'm trying an example from twisted book and when I run this:
> twistd -n reverse_app.py
>
> application works, but no .tap file is created
>

Are you sure the book states you can build tap files with twistd?
mktap is the program for that.  Nonetheless, .tap files are
deprecated:

http://twistedmatrix.com/projects/core/documentation/howto/tap.html#auto1

> Another question, how are twisted daemons actually stopped?
>

With the UNIX kill command ;)

$ kill `cat twisted.pid`

Until this (http://twistedmatrix.com/trac/ticket/823) is resolved.

-Drew



From petshmidt at googlemail.com  Mon Mar  9 16:56:40 2009
From: petshmidt at googlemail.com (Pet)
Date: Mon, 9 Mar 2009 21:56:40 +0100
Subject: [Twisted-Python] twistd tap file are not created
In-Reply-To: <368574aa0903091302j346fd465w3c6b329ced660924@mail.gmail.com>
References: <b460e9630903090502h1b8af2e3p8730bae27bce4fcb@mail.gmail.com>
	<368574aa0903091302j346fd465w3c6b329ced660924@mail.gmail.com>
Message-ID: <b460e9630903091356r78a5c75dm61437b39b4d97eb@mail.gmail.com>

On Mon, Mar 9, 2009 at 9:02 PM, Drew Smathers <drew.smathers at gmail.com> wrote:
> On Mon, Mar 9, 2009 at 8:02 AM, Pet <petshmidt at googlemail.com> wrote:
>> Hello,
>>
>> I'm trying an example from twisted book and when I run this:
>> twistd -n reverse_app.py
>>
>> application works, but no .tap file is created
>>
>
> Are you sure the book states you can build tap files with twistd?

Yes

> mktap is the program for that. ?Nonetheless, .tap files are
> deprecated:

I don't really need them, at least by now. I've just wanted be sure
everything works fine

>
> http://twistedmatrix.com/projects/core/documentation/howto/tap.html#auto1
>
>> Another question, how are twisted daemons actually stopped?
>>
>
> With the UNIX kill command ;)
>
> $ kill `cat twisted.pid`
>
> Until this (http://twistedmatrix.com/trac/ticket/823) is resolved.

I've wrote little shell script for that. But it doesn't check if
commands are successfully executed or if app already running (status).
Anyway it works for me in that simple way.


>
> -Drew
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From kashes911 at gmail.com  Tue Mar 10 10:04:51 2009
From: kashes911 at gmail.com (kartik rustagi)
Date: Tue, 10 Mar 2009 19:34:51 +0530
Subject: [Twisted-Python] Gsoc 2009
Message-ID: <86ae3510903100704u2958c754p6e2767a2f2c10d04@mail.gmail.com>

Hello everyone,

Is twisted applying as an organization in this year's Gsoc? I as a
student will be interested in working for it.

Regards
Kartik Rustagi



From jkv at unixcluster.dk  Tue Mar 10 10:16:03 2009
From: jkv at unixcluster.dk (jkv)
Date: Tue, 10 Mar 2009 15:16:03 +0100
Subject: [Twisted-Python] getting sshsimpleserver.py to work within a wrapper
Message-ID: <49B67623.10009@unixcluster.dk>

Hi,

I just recently got aware of twisted and im currently playing around 
with it.
Is there any way to make reactor.listen listen on stdio instead of a 
real network connection?

In  one of the examples (sshsimpleserver.py) reactor.listenTCP is used 
to listen on the network socket, as far as i can read from the twisted 
core documentation there are no builtin way to make reactor.listen* 
listen on stdin instead... Any hints?

Regards,
jkv



From bhyde at pobox.com  Tue Mar 10 10:39:10 2009
From: bhyde at pobox.com (Ben Hyde)
Date: Tue, 10 Mar 2009 10:39:10 -0400
Subject: [Twisted-Python] getting sshsimpleserver.py to work within a
	wrapper
In-Reply-To: <49B67623.10009@unixcluster.dk>
References: <49B67623.10009@unixcluster.dk>
Message-ID: <225FCFFC-9AF7-4F1D-950F-545E86763EB9@pobox.com>

On Mar 10, 2009, at 10:16 AM, jkv wrote:
> Hi,
>
> I just recently got aware of twisted and im currently playing around  
> with it.
> Is there any way to make reactor.listen listen on stdio instead of a  
> real network connection?
>
> In  one of the examples (sshsimpleserver.py) reactor.listenTCP is  
> used to listen on the network socket, as far as i can read from the  
> twisted core documentation there are no builtin way to make  
> reactor.listen* listen on stdin instead... Any hints?

Take look at twisted.internet.stdio.StandardIO.

I'm new to this twisted stuff, so no doubt I've gotten this a bit  
wrong... but:

But, the act of listening is primarily about waiting for a new  
connection etc.; since standard io is already connected it doesn't  
quite make sense to listen for it.

When a listener L awakens for a new connection it cobbles together the  
plumbing necessary to manage the connection.  That plumbing will  
invoke the methods of an object C responsible for handling the  
connection.  The listener L creates the object P, one for each  
connection, by via the factory object F it was given when L was  
created.  It is the responsibility of C to implement protocol  
appropriate to the connection.

What twisted.internet.stdio.StandardIO provides is a very simple  
protocol for standard IO.





From luper.rouch at gmail.com  Tue Mar 10 13:22:29 2009
From: luper.rouch at gmail.com (luper rouch)
Date: Tue, 10 Mar 2009 18:22:29 +0100
Subject: [Twisted-Python] Using sqlalchemy in twisted.
In-Reply-To: <befee6d80903042338v3d1dc22bna8230c8e7280d8e7@mail.gmail.com>
References: <befee6d80903040328y44051147ja2fc369423a98c84@mail.gmail.com>
	<F4366C21-62E0-479F-98DF-A13F77BFCF41@gmail.com>
	<1E93D9FE-316A-460B-8069-4865A53D52F8@oda.state.or.us>
	<E3E183CF-9B95-45ED-8699-7DA3870C3ED4@gmail.com>
	<befee6d80903042338v3d1dc22bna8230c8e7280d8e7@mail.gmail.com>
Message-ID: <4e0636f40903101022m560fe199ha889985d03825b07@mail.gmail.com>

I would recommend sandboxing Twisted code in another process when used
in conjunction with synchronous code (sqlalchemy, GUI, etc...). This
proved quite simple in my project, using the multiprocessing module
[1], and avoided me lots of headaches since.

This way I don't mix coding styles everywhere using deferToThread(),
nor do I care about threads safety madness.

Now I'm not sure if this could apply to your situation, but if like me
you're just routing the SA traffic through Twisted (just guessing as
you mentioned deferToThread()), have not so much interaction between
Twisted and the synchronous code part, it might be a better solution
than writing wrappers / limiting your usage of the synchronous code.

Luper

[1]http://code.google.com/p/python-multiprocessing/ (now part of python 2.6)



From jkv at unixcluster.dk  Tue Mar 10 17:45:03 2009
From: jkv at unixcluster.dk (jkv)
Date: Tue, 10 Mar 2009 22:45:03 +0100
Subject: [Twisted-Python] getting sshsimpleserver.py to work within a
	wrapper
In-Reply-To: <225FCFFC-9AF7-4F1D-950F-545E86763EB9@pobox.com>
References: <49B67623.10009@unixcluster.dk>
	<225FCFFC-9AF7-4F1D-950F-545E86763EB9@pobox.com>
Message-ID: <49B6DF5F.5040204@unixcluster.dk>

Ben Hyde wrote:
> In  one of the examples (sshsimpleserver.py) reactor.listenTCP is used 
> to listen on the network socket, as far as i can read from the twisted 
> core documentation there are no builtin way to make reactor.listen* 
> listen on stdin instead... Any hints?
>
> Take look at twisted.internet.stdio.StandardIO.
>
> I'm new to this twisted stuff, so no doubt I've gotten this a bit 
> wrong... but:
>
> But, the act of listening is primarily about waiting for a new 
> connection etc.; since standard io is already connected it doesn't 
> quite make sense to listen for it.
>
> When a listener L awakens for a new connection it cobbles together the 
> plumbing necessary to manage the connection.  That plumbing will 
> invoke the methods of an object C responsible for handling the 
> connection.  The listener L creates the object P, one for each 
> connection, by via the factory object F it was given when L was 
> created.  It is the responsibility of C to implement protocol 
> appropriate to the connection.
>
> What twisted.internet.stdio.StandardIO provides is a very simple 
> protocol for standard IO.
Hi Ben,

Thank for the information, i have been looking into 
twisted.internet.stdio.StandardIO, and it seems that what i want it 
possible with twisted.

Would anyone on this list be able to point me to some code examples 
where a twisted.protocol is connected to stdio instead of a network socket?

Regards,
jkv



From exarkun at divmod.com  Tue Mar 10 18:00:10 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 10 Mar 2009 17:00:10 -0500
Subject: [Twisted-Python] getting sshsimpleserver.py to work within a
	wrapper
In-Reply-To: <49B6DF5F.5040204@unixcluster.dk>
Message-ID: <20090310220010.12853.987726334.divmod.quotient.21289@henry.divmod.com>

On Tue, 10 Mar 2009 22:45:03 +0100, jkv <jkv at unixcluster.dk> wrote:
>Ben Hyde wrote:
>>In  one of the examples (sshsimpleserver.py) reactor.listenTCP is used to 
>>listen on the network socket, as far as i can read from the twisted core 
>>documentation there are no builtin way to make reactor.listen* listen on 
>>stdin instead... Any hints?
>>
>>Take look at twisted.internet.stdio.StandardIO.
>>
>>I'm new to this twisted stuff, so no doubt I've gotten this a bit wrong... 
>>but:
>>
>>But, the act of listening is primarily about waiting for a new connection 
>>etc.; since standard io is already connected it doesn't quite make sense to 
>>listen for it.
>>
>>When a listener L awakens for a new connection it cobbles together the 
>>plumbing necessary to manage the connection.  That plumbing will invoke the 
>>methods of an object C responsible for handling the connection.  The 
>>listener L creates the object P, one for each connection, by via the 
>>factory object F it was given when L was created.  It is the responsibility 
>>of C to implement protocol appropriate to the connection.
>>
>>What twisted.internet.stdio.StandardIO provides is a very simple protocol 
>>for standard IO.
>Hi Ben,
>
>Thank for the information, i have been looking into 
>twisted.internet.stdio.StandardIO, and it seems that what i want it possible 
>with twisted.
>
>Would anyone on this list be able to point me to some code examples where a 
>twisted.protocol is connected to stdio instead of a network socket?

http://twistedmatrix.com/projects/core/documentation/examples/ includes a
couple examples of using stdio, `stdiodemo.py? and `stdin.py?.

Jean-Paul



From exarkun at divmod.com  Wed Mar 11 16:58:39 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 11 Mar 2009 15:58:39 -0500
Subject: [Twisted-Python] Gsoc 2009
In-Reply-To: <86ae3510903100704u2958c754p6e2767a2f2c10d04@mail.gmail.com>
Message-ID: <20090311205839.12853.1653599990.divmod.quotient.21735@henry.divmod.com>

On Tue, 10 Mar 2009 19:34:51 +0530, kartik rustagi <kashes911 at gmail.com> wrote:
>Hello everyone,
>
>Is twisted applying as an organization in this year's Gsoc? I as a
>student will be interested in working for it.
>

Since the deadline for organization applications is tomorrow and as far as
I know, no one involved with Twisted has started working on that, it seems
likely that Twisted will not participate as an organization this year.  We
may get involved as part of the PSF organization's participation, which is
what we've done in years past.  If you're interested in participating as a
student on a Twisted project, let us know what project you have in mind so
we can make sure someone applies to be a mentor.

Jean-Paul



From newptcai at gmail.com  Thu Mar 12 00:05:29 2009
From: newptcai at gmail.com (Peter Cai)
Date: Thu, 12 Mar 2009 12:05:29 +0800
Subject: [Twisted-Python] Using sqlalchemy in twisted.
In-Reply-To: <4e0636f40903101022m560fe199ha889985d03825b07@mail.gmail.com>
References: <befee6d80903040328y44051147ja2fc369423a98c84@mail.gmail.com>
	<F4366C21-62E0-479F-98DF-A13F77BFCF41@gmail.com>
	<1E93D9FE-316A-460B-8069-4865A53D52F8@oda.state.or.us>
	<E3E183CF-9B95-45ED-8699-7DA3870C3ED4@gmail.com>
	<befee6d80903042338v3d1dc22bna8230c8e7280d8e7@mail.gmail.com>
	<4e0636f40903101022m560fe199ha889985d03825b07@mail.gmail.com>
Message-ID: <befee6d80903112105i1473efb0va7b5ad06bcf9cc33@mail.gmail.com>

Hi,
I've read some mails in this list that recommend use sqlalchemy in separate
processes.

But if u use multiprocessing which provides only synchronous API, doesn't
you have to use deferToThread also?

Another way would be using "twisted.internet.protocol.ProcessProtocol",
which use pipes.  But can we pass SA Objects through pipes?

If you can write a little code to describe how you use multiprocessing,  I
will be very thankful!

On Wed, Mar 11, 2009 at 1:22 AM, luper rouch <luper.rouch at gmail.com> wrote:

> I would recommend sandboxing Twisted code in another process when used
> in conjunction with synchronous code (sqlalchemy, GUI, etc...). This
> proved quite simple in my project, using the multiprocessing module
> [1], and avoided me lots of headaches since.
>
> This way I don't mix coding styles everywhere using deferToThread(),
> nor do I care about threads safety madness.
>
> Now I'm not sure if this could apply to your situation, but if like me
> you're just routing the SA traffic through Twisted (just guessing as
> you mentioned deferToThread()), have not so much interaction between
> Twisted and the synchronous code part, it might be a better solution
> than writing wrappers / limiting your usage of the synchronous code.
>
> Luper
>
> [1]http://code.google.com/p/python-multiprocessing/ (now part of python
> 2.6)
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
look to the things around you,the immediate world around you, if you are
alive,it will mean something to you ??Paul Strand
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090312/d3448a04/attachment.htm 

From khiraly123 at gmx.net  Thu Mar 12 08:23:50 2009
From: khiraly123 at gmx.net (Kalman KHIRALY)
Date: Thu, 12 Mar 2009 13:23:50 +0100
Subject: [Twisted-Python] Twisted.mail SMTP server question
Message-ID: <f88c2f150903120523v4df80bafv92847ef24cc1a8aa@mail.gmail.com>

Hi!

I would like to use twisted mail for the following purpose:
Redirect all incoming myname at mydomain.com mails to a specified gmail address:
myname at mydomain.com -> myname.mydomain at gmail.com

Is it possible to use Twisted.Mail for this? Any pointers would be
highly appreciated.
If not can somebody recommend me a nice python solution for this?

Best regards,
 Khiraly

ps: 4 year ago I did the above feature using postfix and mysql. It took me
more the 2 months to correctly set up all this stuff (and having an
administrator web page
where I could change, add, remove the email address, and wrote into
the mysql database)

Unfortunetly, I do not have anymore my work, the server crashed, etc.
And in my view,
it was horribly overcomplicated.

So Im looking a simple and elegant solution (so this rules
out qmail and postfix). It is like setting up apache with
ssl+virtualhost for a simple index.html file;)



From matt at madebykite.com  Thu Mar 12 08:36:29 2009
From: matt at madebykite.com (Matthew Glubb)
Date: Thu, 12 Mar 2009 12:36:29 +0000
Subject: [Twisted-Python] Twisted.mail SMTP server question
In-Reply-To: <f88c2f150903120523v4df80bafv92847ef24cc1a8aa@mail.gmail.com>
References: <f88c2f150903120523v4df80bafv92847ef24cc1a8aa@mail.gmail.com>
Message-ID: <0E76D663-91F8-4823-B59A-EE01AF1F872B@madebykite.com>

Khiraly,

I had great success setting up a server to host about 20 domains'  
emails by merging the following instructions:

All the instructions from here:
http://workaround.org/articles/ispmail-etch/

BUT the SQL schema detailed from here (as it works for postfixadmin)
http://codepoets.co.uk/postfixadmin-postgresql-courier-squirrelmail-debian-etch-howto-tutorial

Postfixadmin from here:
http://postfixadmin.sourceforge.net/

Web mail from here:
http://roundcube.net/

And web mail / postfixadmin integration from here:
http://nejc.skoberne.net/projects/rcpfa/

It probably took me about 12 hours in all. I'd bet my life you  
couldn't get all of that functionality out of Twisted's mail module in  
the same amount of time ;)

Matt
	

Matthew Glubb
Technical Partner

email: matthew.glubb at madebykite.com
phone: 44 (0) 7715 754017
skype: mglubb

Kite
http://madebykite.com

--
GPG: 96FF DE0E 0B7B 37F0 7F8D C54C E285 3D8F 5625 9244

On 12 Mar 2009, at 12:23, Kalman KHIRALY wrote:

> Hi!
>
> I would like to use twisted mail for the following purpose:
> Redirect all incoming myname at mydomain.com mails to a specified gmail  
> address:
> myname at mydomain.com -> myname.mydomain at gmail.com
>
> Is it possible to use Twisted.Mail for this? Any pointers would be
> highly appreciated.
> If not can somebody recommend me a nice python solution for this?
>
> Best regards,
> Khiraly
>
> ps: 4 year ago I did the above feature using postfix and mysql. It  
> took me
> more the 2 months to correctly set up all this stuff (and having an
> administrator web page
> where I could change, add, remove the email address, and wrote into
> the mysql database)
>
> Unfortunetly, I do not have anymore my work, the server crashed, etc.
> And in my view,
> it was horribly overcomplicated.
>
> So Im looking a simple and elegant solution (so this rules
> out qmail and postfix). It is like setting up apache with
> ssl+virtualhost for a simple index.html file;)
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From dripton at ripton.net  Thu Mar 12 10:32:45 2009
From: dripton at ripton.net (David Ripton)
Date: Thu, 12 Mar 2009 07:32:45 -0700
Subject: [Twisted-Python] Twisted.mail SMTP server question
In-Reply-To: <f88c2f150903120523v4df80bafv92847ef24cc1a8aa@mail.gmail.com>
References: <f88c2f150903120523v4df80bafv92847ef24cc1a8aa@mail.gmail.com>
Message-ID: <20090312143245.GA7580@vidar.dreamhost.com>

On 2009.03.12 13:23:50 +0100, Kalman KHIRALY wrote:
> I would like to use twisted mail for the following purpose:
> Redirect all incoming myname at mydomain.com mails to a specified gmail address:
> myname at mydomain.com -> myname.mydomain at gmail.com

Do you really want to write code for this?  That's a one-line .forward
file, or (if you want to be fancy) one line in a .procmailrc file.

-- 
David Ripton    dripton at ripton.net



From luper.rouch at gmail.com  Fri Mar 13 07:00:37 2009
From: luper.rouch at gmail.com (luper rouch)
Date: Fri, 13 Mar 2009 12:00:37 +0100
Subject: [Twisted-Python] Using sqlalchemy in twisted.
In-Reply-To: <befee6d80903112105i1473efb0va7b5ad06bcf9cc33@mail.gmail.com>
References: <befee6d80903040328y44051147ja2fc369423a98c84@mail.gmail.com>
	<F4366C21-62E0-479F-98DF-A13F77BFCF41@gmail.com>
	<1E93D9FE-316A-460B-8069-4865A53D52F8@oda.state.or.us>
	<E3E183CF-9B95-45ED-8699-7DA3870C3ED4@gmail.com>
	<befee6d80903042338v3d1dc22bna8230c8e7280d8e7@mail.gmail.com>
	<4e0636f40903101022m560fe199ha889985d03825b07@mail.gmail.com>
	<befee6d80903112105i1473efb0va7b5ad06bcf9cc33@mail.gmail.com>
Message-ID: <4e0636f40903130400u1c1b6975tae85d81ccedc2952@mail.gmail.com>

2009/3/12 Peter Cai <newptcai at gmail.com>:
> Hi,
> I've read some mails in this list that recommend use sqlalchemy in separate
> processes.
> But if u use multiprocessing which provides only synchronous API, doesn't
> you have to use deferToThread also?
> Another way would be using "twisted.internet.protocol.ProcessProtocol",
> which use pipes.  But can we pass SA Objects through pipes?
> If you can write a little code to describe how you use multiprocessing,  I
> will be very thankful!

multiprocessing [1] works like the threading module, except that it
runs callables in subprocesses instead of threads.

To pass python objects to your process you can use the primitives
offered by the modules (Queue, Pipe, Connection...). Here is a minimal
example using Queue :

Child process implementation (let's call it my_twisted_module.py):
--------------------------
from twisted.internet import reactor, task

dispatch_task = None
in_queue = None
out_queue = None

def recv():
    obj = in_queue.get_nowait()
    [do whatever you want with obj]

def send(obj):
    out_queue.put_nowait(obj)

def twisted_process(inq, outq):
    global dispatch_task, in_queue, out_queue
    in_queue = inq
    out_queue = outq
    dispatch_task = task.LoopingCall(recv)
    dispatch_task.start(0.1)
    reactor.run()
--------------------------

On the parent process side:
--------------------------
from my_twisted_module import twisted_process

[something similar to the child process implementation for communications]

# Note that out_queue in this side is passed as in_queue to the other
side and vice versa
in_queue = Queue()
out_queue = Queue()
p = multiprocessing.Process(target=twisted_process, args=(out_queue, in_queue))
p.start()
--------------------------

You can pass any python object through the queues as long as it is
picklabe. Passing SA objects is probably not a good idea though as
this whole mess is about isolating Twisted from SA :) In my project I
organized the communications with a dispatcher (louie [2]), and I pass
signals through the queues. This way I have a well defined protocol to
communicate with the sub process(es).

Although I did not do any timing I think the communications between
the processes must introduce some significant overhead, so it is
probably not a good idea to do this if you pass objects all the time.
In my case, the communications are limited to initialization calls,
status keeping, etc...

Luper

[1]http://docs.python.org/library/multiprocessing.html
[2]http://pylouie.org/



From sicfslist at gmail.com  Sat Mar 14 13:33:02 2009
From: sicfslist at gmail.com (Shelby Ramsey)
Date: Sat, 14 Mar 2009 12:33:02 -0500
Subject: [Twisted-Python] Noob Question
Message-ID: <35b355e90903141033s42e0016ah6c8069808e0fec5b@mail.gmail.com>

Hello:

I've been playing with twisted (to take advantage of deferreds) and trying
to accomplish this:
  -- log into a machine as a client
  -- send auth
  -- receive "events" from the machine

The events have a Content-Length: \d+ as the protocol for determining the
length of the message.  What I'm struggling with is how to parse that and
then receive just that length as an individual message ...

Thanks for any help that can be provided.

SDR
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090314/a6110312/attachment.htm 

From peter at sabaini.at  Sat Mar 14 14:37:15 2009
From: peter at sabaini.at (Peter Sabaini)
Date: Sat, 14 Mar 2009 19:37:15 +0100
Subject: [Twisted-Python] Noob Question
In-Reply-To: <35b355e90903141033s42e0016ah6c8069808e0fec5b@mail.gmail.com>
References: <35b355e90903141033s42e0016ah6c8069808e0fec5b@mail.gmail.com>
Message-ID: <200903141937.22341.peter@sabaini.at>

On Saturday 14 March 2009 18:33:02 Shelby Ramsey wrote:
> Hello:
>
> I've been playing with twisted (to take advantage of deferreds) and trying
> to accomplish this:
>   -- log into a machine as a client
>   -- send auth
>   -- receive "events" from the machine
>
> The events have a Content-Length: \d+ as the protocol for determining the
> length of the message.  What I'm struggling with is how to parse that and
> then receive just that length as an individual message ...

Not really sure if I interpret this correctly. Is your protocol text or 
binary? "Content-Length: \d+" seems to imply ASCII; if thats the case I guess 
you can just do something along the line of:

>>> import re
>>> p = re.compile(r'^Content-Length: (\d+)')
>>> m = p.search("Content-Length: 123")
>>> int(m.group(1))
123

No?

If its a binary protocol, look at the struct module and the functions pack() 
and unpack()

hth,
peter.



-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 197 bytes
Desc: This is a digitally signed message part.
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20090314/bbd475cd/attachment.pgp 

From sicfslist at gmail.com  Sat Mar 14 14:54:04 2009
From: sicfslist at gmail.com (Shelby Ramsey)
Date: Sat, 14 Mar 2009 13:54:04 -0500
Subject: [Twisted-Python] Noob Question
In-Reply-To: <200903141937.22341.peter@sabaini.at>
References: <35b355e90903141033s42e0016ah6c8069808e0fec5b@mail.gmail.com>
	<200903141937.22341.peter@sabaini.at>
Message-ID: <35b355e90903141154k2cfee57bk87245093fe356b93@mail.gmail.com>

Peter,

Thanks for the quick response.  The issue isn't grabbing the content length
... but rather grabbing the body ...

The protocol is TCP so the text (not binary) comes in streams ... so the
body is / might be broken into streams ... so I'm trying to figure out how
to "receive" the content length so I can get a complete body from different
streams.

Thanks again!

SDR
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090314/5b975913/attachment.htm 

From db3l.net at gmail.com  Sat Mar 14 15:36:56 2009
From: db3l.net at gmail.com (David Bolen)
Date: Sat, 14 Mar 2009 15:36:56 -0400
Subject: [Twisted-Python] Re: Noob Question
References: <35b355e90903141033s42e0016ah6c8069808e0fec5b@mail.gmail.com>
Message-ID: <m2iqmb6gmf.fsf@valheru.db3l.homeip.net>

Shelby Ramsey <sicfslist at gmail.com> writes:

> The events have a Content-Length: \d+ as the protocol for determining the
> length of the message.  What I'm struggling with is how to parse that and
> then receive just that length as an individual message ...

It would probably help to see the general framework of your server
class to be more specific, but in general, try implementing a
LineReceiver protocol that starts in line mode and then switches to
raw mode after receiving the event header, switching back after
receiving the appropriate amount of raw information.

You don't mention if the Content-Length header ends with a CRLF or
not, but if it doesn't and you have control of the protocol, I'd
suggest making it do so.  If you can't control that you'll have to do
your own protocol to identify when the header is actually done - using
LineReceiver as a model would probably be helpful.

Here's an old post of mine showing something an approach I use in one of
my applications that receives a binary file after a short header with some
identification and length information.

http://www.twistedmatrix.com/pipermail/twisted-python/2007-July/015738.html

You'll have some additional complexity in that you will have to manually
observe the transition between any final raw data from the last event and
the beginning of the next event.  But that's not too bad - just identify
when your remaining raw bytes hits zero, and anything else you have left
in that callback is for the subsequent event.

Luckily, Twisted's LineReceiver also anticipated this use case.  When
your raw data receiver switches back to line mode with setLineMode,
you can pass in the extra data, and it will automatically be reparsed,
calling lineReceived() if appropriate or else holding on for the rest
of the upcoming event header.

-- David




From peter at sabaini.at  Sat Mar 14 15:55:01 2009
From: peter at sabaini.at (Peter Sabaini)
Date: Sat, 14 Mar 2009 20:55:01 +0100
Subject: [Twisted-Python] Noob Question
In-Reply-To: <35b355e90903141154k2cfee57bk87245093fe356b93@mail.gmail.com>
References: <35b355e90903141033s42e0016ah6c8069808e0fec5b@mail.gmail.com>
	<200903141937.22341.peter@sabaini.at>
	<35b355e90903141154k2cfee57bk87245093fe356b93@mail.gmail.com>
Message-ID: <200903142055.07700.peter@sabaini.at>

On Saturday 14 March 2009 19:54:04 Shelby Ramsey wrote:
> Peter,
>
> Thanks for the quick response.  The issue isn't grabbing the content length
> ... but rather grabbing the body ...
>
> The protocol is TCP so the text (not binary) comes in streams ... so the
> body is / might be broken into streams ... so I'm trying to figure out how
> to "receive" the content length so I can get a complete body from different
> streams.

Still not sure if I understand -- with TCP, there is always just one stream, 
and so its just a matter of breaking up the stream into suitable chunks.  

And in your case, it seems you have something like HTTP, ie. some header lines 
including Content-Length: and then the body, is that correct?

If that is the case, the twisted.protocols.basic.LineReceiver class might be a 
good starting point. To use it, you make your Protocol handler a subclass of 
LineReceiver; the reactor then calls your protocol objects' lineReceived() 
method with new data as long as you stay in "line mode". Switch into "raw 
mode" to receive the body of the message. With HTTP for example, this would be 
after you receive an empty line. You do this by calling the setRawmode() 
method which is provided by LineReceiver. From that point on forward, the 
reactor will call the dataReceived() method to hand your protocol object new 
data. Presumably, you've already received a Content-Length header and stored 
that somewhere. Receive Content-Length bytes of data, and call setLineMode() 
to switch into line mode again. 

API docs are 
here:http://twistedmatrix.com/documents/current/api/twisted.protocols.basic.LineReceiver.html

Hm, that would maybe be a good topic for a tutorial.

hth,
peter.



> Thanks again!
>
> SDR

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 197 bytes
Desc: This is a digitally signed message part.
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20090314/09dc32f9/attachment.pgp 

From sicfslist at gmail.com  Sat Mar 14 16:00:14 2009
From: sicfslist at gmail.com (Shelby Ramsey)
Date: Sat, 14 Mar 2009 15:00:14 -0500
Subject: [Twisted-Python] Re: Noob Question
In-Reply-To: <m2iqmb6gmf.fsf@valheru.db3l.homeip.net>
References: <35b355e90903141033s42e0016ah6c8069808e0fec5b@mail.gmail.com>
	<m2iqmb6gmf.fsf@valheru.db3l.homeip.net>
Message-ID: <35b355e90903141300t5daa1927m845374cf0e6382e7@mail.gmail.com>

Thanks David!  That looks like the trick ... I'll give it a try.

SDR
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090314/0e47c23e/attachment.htm 

From sicfslist at gmail.com  Sat Mar 14 17:12:49 2009
From: sicfslist at gmail.com (Shelby Ramsey)
Date: Sat, 14 Mar 2009 16:12:49 -0500
Subject: [Twisted-Python] Noob Question
In-Reply-To: <200903142055.07700.peter@sabaini.at>
References: <35b355e90903141033s42e0016ah6c8069808e0fec5b@mail.gmail.com>
	<200903141937.22341.peter@sabaini.at>
	<35b355e90903141154k2cfee57bk87245093fe356b93@mail.gmail.com>
	<200903142055.07700.peter@sabaini.at>
Message-ID: <35b355e90903141412q22ac1d89me8201d58fb30a31e@mail.gmail.com>

Peter,

Thanks for the help.  Yes I get a header and then am looking to extract the
body.

So to make sure I understand:

p = compile('Content-Length:\s(\d+)')

class SomeClient(basic.LineReceiver):
    def connectionMade(self):
        self.transport.write('login: info\r\n\r\n') # log in ... then device
starts sending events

    def lineReceived(self, line):
        m = p.findall(line)
        if m:
            self.body_length = m[0]
            self.setRawMode()

     def rawDataReceived(self, data):
         self.get_rest -= len(data)
         set.lineMode()

Should something along those lines work?

David / Peter ... thanks again for the assistance!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090314/2b90fd9a/attachment.htm 

From peter at sabaini.at  Sat Mar 14 18:29:44 2009
From: peter at sabaini.at (Peter Sabaini)
Date: Sat, 14 Mar 2009 23:29:44 +0100
Subject: [Twisted-Python] Noob Question
In-Reply-To: <35b355e90903141412q22ac1d89me8201d58fb30a31e@mail.gmail.com>
References: <35b355e90903141033s42e0016ah6c8069808e0fec5b@mail.gmail.com>
	<200903142055.07700.peter@sabaini.at>
	<35b355e90903141412q22ac1d89me8201d58fb30a31e@mail.gmail.com>
Message-ID: <200903142329.51057.peter@sabaini.at>

On Saturday 14 March 2009 22:12:49 Shelby Ramsey wrote:
> Peter,
>
> Thanks for the help.  Yes I get a header and then am looking to extract the
> body.
>
> So to make sure I understand:
>
> p = compile('Content-Length:\s(\d+)')

Of course I dont know anything about your protocol, but anyways:

> class SomeClient(basic.LineReceiver):
>     def connectionMade(self):
>         self.transport.write('login: info\r\n\r\n') # log in ... then
> device starts sending events
>
>     def lineReceived(self, line):
>         m = p.findall(line)
>         if m:
>             self.body_length = m[0]
>             self.setRawMode()

If Content-Length is the last header

>      def rawDataReceived(self, data):
>          self.get_rest -= len(data)
>          set.lineMode()

Mhm rather something like, since you don't know the chunk size:

    def rawDataReceived(self, data):
    	datalen = len(data)
	if self.body_length > datalen:
	    self.body_length -= datalen
	    do_something_with(data)
	else:
	    part = data[:self.body_length]
	    extra = data[self.body_length:]
	    do_something_with(part)
	    self.setLineMode(extra=extra)


cheers,
peter.
    
> Should something along those lines work?
>
> David / Peter ... thanks again for the assistance!

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 197 bytes
Desc: This is a digitally signed message part.
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20090314/62f06ce4/attachment.pgp 

From exarkun at twistedmatrix.com  Sun Mar 15 00:05:10 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 15 Mar 2009 04:05:10 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1237089910.99.979514254@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090315/55cd4100/attachment.htm 

From stephen at thorne.id.au  Sun Mar 15 05:37:46 2009
From: stephen at thorne.id.au (Stephen Thorne)
Date: Sun, 15 Mar 2009 19:37:46 +1000
Subject: [Twisted-Python] Twisted.mail SMTP server question
In-Reply-To: <f88c2f150903120523v4df80bafv92847ef24cc1a8aa@mail.gmail.com>
References: <f88c2f150903120523v4df80bafv92847ef24cc1a8aa@mail.gmail.com>
Message-ID: <20090315093746.GA23225@thorne.id.au>

On 2009-03-12, Kalman KHIRALY wrote:
> Hi!
> 
> I would like to use twisted mail for the following purpose:
> Redirect all incoming myname at mydomain.com mails to a specified gmail address:
> myname at mydomain.com -> myname.mydomain at gmail.com

The easiest way to do this is with a postfix address resolution daemon.
You can just use postfix.PostfixTCPMapServer to do it.

It will be something along the lines of:

class AddressResolverFactory(protocol.ServerFactory):
    protocol = postfix.PostfixTCPMapServer

    def get(self, emailaddress):
        if doesnotmatchpattern(emailaddress):
            return None

        return transform(emailaddress)

reactor.listenTCP(12345, AddressResolverFactory())

Then you just throw all the email addresses at it from postfix like so:

virtual_alias_maps = tcp:127.0.0.1:12345
virtual_mailbox_maps = tcp:127.0.0.1:12345

-- 
Regards,
Stephen Thorne
Development Engineer
NetBox Blue - 1300 737 060

Find out why NetBox Blue's solutions are growing in popularity in 
today's economic environment: http://netboxblue.com/news/creditcrunch 


Scanned by the NetBox from NetBox Blue
(http://netboxblue.com/)




From sicfslist at gmail.com  Sun Mar 15 09:55:25 2009
From: sicfslist at gmail.com (Shelby Ramsey)
Date: Sun, 15 Mar 2009 08:55:25 -0500
Subject: [Twisted-Python] Noob Question
In-Reply-To: <200903142329.51057.peter@sabaini.at>
References: <35b355e90903141033s42e0016ah6c8069808e0fec5b@mail.gmail.com>
	<200903142055.07700.peter@sabaini.at>
	<35b355e90903141412q22ac1d89me8201d58fb30a31e@mail.gmail.com>
	<200903142329.51057.peter@sabaini.at>
Message-ID: <35b355e90903150655j2afe48d0l4cd5f166148c3c44@mail.gmail.com>

Peter,

Thanks for the assistance.  I think you and David have me on the right
path.  Just to clarify the protocol looks like this:

Content-Length: 984
Content-Type: text/event-xml

<event>
  <headers>
   $bunchofinfo ...
  </headers>
</event>

Where the body (and the content length) start and stop with the <event> ...
</event>.

Here is what I've done so far:

from twisted.internet import reactor, protocol
from twisted.protocols import basic
from re import compile, findall

bl_p = compile('Content-Length:\s(\d+)')

class My_Client(basic.LineReceiver):
    def __init__(self):
        self.body_length = None

    def connectionMade(self):
        self.transport.write("login \r\n\r\n")
        self.transport.write("sendevents\r\n\r\n")

    def lineReceived(self, line):
        print line
        bl_m = bl_p.findall(line)
        if bl_m:
            print 'Match:'
            self.body_length = int(bl_m[0]) - len(line) # this doesn't
really work because it doesn't factor in the len of the next line
            self.setRawMode()

    def rawDataReceived(self, data):
       datalen = len(data)
       if self.body_length > datalen:
           self.body_length -= datalen
           print data
       else:
           part = data[:self.body_length]
           extra = data[self.body_length:]
           print 'Left Over\n:'
           print extra
           self.setLineMode(extra=extra)

    def connectionLost(self, reason):
        print "%s" % (reason)

class My_Factory(protocol.ClientFactory):
    protocol = My_Client

    def clientConnectionFailed(self, connector, reason):
        print "Connection failed - goodbye!"
        reactor.stop()

    def clientConnectionLost(self, connector, reason):
        print "Connection lost - goodbye!"
        reactor.stop()

def main():
    f = FS_Factory()
    reactor.connectTCP("$IP", $PORT, f)
    reactor.run()

# this only runs if the module was *not* imported
if __name__ == '__main__':
    main()

To me ... this looks somewhat correct ... but it doesn't seem to actually
ever use the line received method (note the print statement ...).  For
instance upon logging in it should respond with a +OK Logged In ... but it
never prints that.

And then when it receives an "<event>..." it actually dies with this error:

[Failure instance: Traceback (failure with no frames): <class
'twisted.internet.error.ConnectionDone'>: Connection was closed cleanly.
]
Connection lost - goodbye!

So I'm a bit lost as to what the impact of adding the rawDataReceived method
has done.

Thanks!

SDR
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090315/3f86d08b/attachment.htm 

From exarkun at divmod.com  Sun Mar 15 10:20:50 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 15 Mar 2009 09:20:50 -0500
Subject: [Twisted-Python] Noob Question
In-Reply-To: <35b355e90903150655j2afe48d0l4cd5f166148c3c44@mail.gmail.com>
Message-ID: <20090315142050.12853.1613389994.divmod.quotient.23508@henry.divmod.com>

On Sun, 15 Mar 2009 08:55:25 -0500, Shelby Ramsey <sicfslist at gmail.com> wrote:
>Peter,
>
>Thanks for the assistance.  I think you and David have me on the right
>path.  Just to clarify the protocol looks like this:

Hi Shelby,

You may want to consider re-using an existing protocol rather than inventing
and implementing a new one.  Protocol design has many tricky corners, and
with the wide array of existing protocols from which to select, there's is
often no really good reason to develop a new one.

Consider HTTP, PB, AMP, or XMPP, all of which have general, re-usable
implementations in Twisted.

Jean-Paul



From sicfslist at gmail.com  Sun Mar 15 11:36:24 2009
From: sicfslist at gmail.com (Shelby Ramsey)
Date: Sun, 15 Mar 2009 10:36:24 -0500
Subject: [Twisted-Python] Noob Question
In-Reply-To: <20090315142050.12853.1613389994.divmod.quotient.23508@henry.divmod.com>
References: <35b355e90903150655j2afe48d0l4cd5f166148c3c44@mail.gmail.com>
	<20090315142050.12853.1613389994.divmod.quotient.23508@henry.divmod.com>
Message-ID: <35b355e90903150836w538ea0c7y9193a85509cfd752@mail.gmail.com>

Jean-Paul:

I wish I could ... I would certainly make this a little simpler.
Unfortunately it's not an option.  I don't have any control over the
protocol.

Thanks!

SDR
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090315/32f07e2a/attachment.htm 

From peter at sabaini.at  Sun Mar 15 13:27:19 2009
From: peter at sabaini.at (Peter Sabaini)
Date: Sun, 15 Mar 2009 18:27:19 +0100
Subject: [Twisted-Python] Noob Question
In-Reply-To: <35b355e90903150655j2afe48d0l4cd5f166148c3c44@mail.gmail.com>
References: <35b355e90903141033s42e0016ah6c8069808e0fec5b@mail.gmail.com>
	<200903142329.51057.peter@sabaini.at>
	<35b355e90903150655j2afe48d0l4cd5f166148c3c44@mail.gmail.com>
Message-ID: <200903151827.25932.peter@sabaini.at>

On Sunday 15 March 2009 14:55:25 Shelby Ramsey wrote:
> Peter,
>
> Thanks for the assistance.  I think you and David have me on the right
> path.  Just to clarify the protocol looks like this:
>
> Content-Length: 984
> Content-Type: text/event-xml
>
> <event>
>   <headers>
>    $bunchofinfo ...
>   </headers>
> </event>
>
> Where the body (and the content length) start and stop with the <event> ...
> </event>.
>
> Here is what I've done so far:
>
> from twisted.internet import reactor, protocol
> from twisted.protocols import basic
> from re import compile, findall
>
> bl_p = compile('Content-Length:\s(\d+)')
>
> class My_Client(basic.LineReceiver):
>     def __init__(self):
>         self.body_length = None
>
>     def connectionMade(self):
>         self.transport.write("login \r\n\r\n")
>         self.transport.write("sendevents\r\n\r\n")
>
>     def lineReceived(self, line):
>         print line
>         bl_m = bl_p.findall(line)
>         if bl_m:
>             print 'Match:'
>             self.body_length = int(bl_m[0]) - len(line) # this doesn't
> really work because it doesn't factor in the len of the next line

Hm, I thought you said the Content-Length was only the length of the body? Ie. 
without headers?

>             self.setRawMode()
>
>     def rawDataReceived(self, data):
>        datalen = len(data)
>        if self.body_length > datalen:
>            self.body_length -= datalen
>            print data
>        else:
>            part = data[:self.body_length]
>            extra = data[self.body_length:]
>            print 'Left Over\n:'
>            print extra
>            self.setLineMode(extra=extra)
>
>     def connectionLost(self, reason):
>         print "%s" % (reason)
>
> class My_Factory(protocol.ClientFactory):
>     protocol = My_Client
>
>     def clientConnectionFailed(self, connector, reason):
>         print "Connection failed - goodbye!"
>         reactor.stop()
>
>     def clientConnectionLost(self, connector, reason):
>         print "Connection lost - goodbye!"
>         reactor.stop()
>
> def main():
>     f = FS_Factory()

Should be My_Factory() above, right?

>     reactor.connectTCP("$IP", $PORT, f)

I assume $IP / $PORT get replaced with actual values?

>     reactor.run()
>
> # this only runs if the module was *not* imported
> if __name__ == '__main__':
>     main()
>
> To me ... this looks somewhat correct ... but it doesn't seem to actually
> ever use the line received method (note the print statement ...).  For
> instance upon logging in it should respond with a +OK Logged In ... but it
> never prints that.

One thing that might be an issue here is the line delimiter. Twisted by 
default has "\r\n" as a line delimiter, so if you fed it only "\n" newlines, 
basic.LineReceiver would never detect an end of line. 

The delimiter is an attribute of the class, ie. 

class My_Client(basic.LineReceiver):
    delimiter = '\n'

switches to newline-delim. lines.


Two tools I find indispensable for this kind of work:

* the Python debugger "pdb" which lets you browse around interactively at 
interesting points in the running code ; see eg. here for a short intro: 
http://www.ferg.org/papers/debugging_in_python.html

* some kind of packet sniffer, eg. tcpdump or wireshark so you can actually 
see whats going on at the wire.

bye,
peter.



> And then when it receives an "<event>..." it actually dies with this error:
>
> [Failure instance: Traceback (failure with no frames): <class
> 'twisted.internet.error.ConnectionDone'>: Connection was closed cleanly.
> ]
> Connection lost - goodbye!
>
> So I'm a bit lost as to what the impact of adding the rawDataReceived
> method has done.
>
> Thanks!
>
> SDR

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 197 bytes
Desc: This is a digitally signed message part.
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20090315/76c2d9be/attachment.pgp 

From sicfslist at gmail.com  Sun Mar 15 14:03:13 2009
From: sicfslist at gmail.com (Shelby Ramsey)
Date: Sun, 15 Mar 2009 13:03:13 -0500
Subject: [Twisted-Python] Noob Question
In-Reply-To: <200903151827.25932.peter@sabaini.at>
References: <35b355e90903141033s42e0016ah6c8069808e0fec5b@mail.gmail.com>
	<200903142329.51057.peter@sabaini.at>
	<35b355e90903150655j2afe48d0l4cd5f166148c3c44@mail.gmail.com>
	<200903151827.25932.peter@sabaini.at>
Message-ID: <35b355e90903151103g3543b505h13ea8ec1150bbcbc@mail.gmail.com>

Peter,

The content length is just the body ... and I've been looking for 2 hours on
how to change the delimiter.  That did the trick.  I think I'm on my way
now!

Thanks for heads up on pdb ... I've been writing stuff in Python for 3 years
... still learn something new daily.

SDR
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090315/7915db95/attachment.htm 

From ssoni at nextdigital.com  Tue Mar 17 00:18:31 2009
From: ssoni at nextdigital.com (Sury Soni)
Date: Tue, 17 Mar 2009 15:18:31 +1100
Subject: [Twisted-Python] Novice question on twisted framework
Message-ID: <1BE49492956ECA42BEB0D78F67665E1FA96DBE@exchange.wdg>

Hi,

 

I have an existing application, written using Ice Middleware
(www.zeroc.com)

 

This application is my source of infinite queue (server)

 

Following is my application (processing client to my infinite queue
server) idea to be implemented using Twisted Framework.

 

I can loop through my infinite queue and receive email data (Using
.next() kind of function)

 

Using this email data object, I need to trigger event to send email
using ESMTPSenderFactory and ESMTPSender. As, later I would be extending
ESMTP* classes to do my little funky stuff.

 

What is the best code design I can use to implement this stuff.

 

Following is basic algorithm kind of code I am doing right now, but I
feel I am missing something.

 

#================

#Code Begins Here: .tac file

#================

 

import StringIO

 

from twisted.application import service 

 

from twisted.application import internet

from twisted.internet import protocol, defer

from twisted.mail import smtp, relaymanager

from twisted.internet import reactor

 

Def process_queue:

    While True:

         Try:

                Data = my_queue.next()

 

                getMailExchange('localhost).addCallback(cbMailExchange,
data)         

       Except:

                Break

    Reactor.stop()

 

 

reactor.callLater(0, process_queue)

 

 

application = service.Application("SMTP Client Tutorial")

 

class SMTPTutorialClient(smtp.ESMTPClient):

    mailFrom = "test at test.com"

    mailTo = "receiver at test.com"

    mailData = '''\

Date: Fri, 6 Feb 2004 10:14:39 -0800

From: Test <test at test.com>

To: Receiver <receiver at test.com>

Subject: Test Mail!

 

Hello, how are you, goodbye.

 

'''

    

    def __init__(self, secret="", identity="", data = ""):

        smtp.ESMTPClient.__init__(self, secret=secret,
identity=identity)

        self.secret = secret

        self.identity = identity

        self.data = data

 

    def getMailFrom(self):

        result = self.mailFrom

        self.mailFrom = None

        return result

    

    def getMailTo(self):

        return [self.mailTo]

 

    def getMailData(self):

        return StringIO.StringIO(self.mailData+self.data)

 

    def sentMail(self, code, resp, numOk, addresses, log):

        print 'Sent', numOk, 'messages'

        #reactor.stop()

 

def getMailExchange(host):

    def cbMX(mxRecord):

        return str(mxRecord.name)

    return relaymanager.MXCalculator().getMX(host).addCallback(cbMX)

 

class SMTPClientFactory(protocol.ClientFactory):

    protocol = SMTPTutorialClient

    def __init__(self, data):

        self.data = data

        

    def buildProtocol(self, addr):

        return self.protocol(secret=None, identity='example.com',
data=self.data)

 

def cbMailExchange(exchange, data):

    smtpClientService = internet.TCPClient(exchange, 2500,
SMTPClientFactory(data))

    smtpClientService.setServiceParent(application)

    #reactor.run()

 

reactor.run()

 

#================

#Code Ends Here

#================

 

I have couple of #reactor.run() commented code, I feel like lost between
application and reactor based code.

 

My understanding is that function process_queue drives the control flow
of my application. Please correct me.

 

What is happening is, when my loop is finished in function
process_queue, then only actual events of SMTP factory and protocol
objects are created.

 

Therefore, I am not getting event driven code, which is the beauty of
Twisted Framework.

 

Please advice the best document to look and fix this code.

 

Thanks.

____________________________________
Sury Prakash Soni
Developer
____________________________________

Next Digital
Level 8, 15 William St, Melbourne 
VIC 3000 Australia
p +61 3 8612 6888
f  +61 3 8612 6899
m 0433 661 327
ssoni at nextdigital.com <mailto:ssoni at nextdigital.com> 
www.nextdigital.com <http://www.nextdigital.com/> 
____________________________________

This email and any attachments are intended only for the use of the
recipient and may be confidential and/or legally privileged. Next
Digital Group Pty Ltd ("Next Digital") disclaims liability for any
errors, omissions, viruses, loss and/or damage arising from using,
opening or transmitting this email. If you are not the intended
recipient you must not use, interfere with, disclose, copy or retain
this email and you should notify the sender immediately by return email
or by contacting Next Digital by telephone on +61 3 8612 6888.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090317/8882219e/attachment.htm 

From exarkun at divmod.com  Tue Mar 17 09:54:50 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 17 Mar 2009 08:54:50 -0500
Subject: [Twisted-Python] Novice question on twisted framework
In-Reply-To: <1BE49492956ECA42BEB0D78F67665E1FA96DBE@exchange.wdg>
Message-ID: <20090317135450.12853.959200493.divmod.quotient.24370@henry.divmod.com>

On Tue, 17 Mar 2009 15:18:31 +1100, Sury Soni <ssoni at nextdigital.com> wrote:
>Hi,
>
>I have an existing application, written using Ice Middleware
>(www.zeroc.com)
>
>This application is my source of infinite queue (server)
>
>Following is my application (processing client to my infinite queue
>server) idea to be implemented using Twisted Framework.
>
>I can loop through my infinite queue and receive email data (Using
>.next() kind of function)
>
>Using this email data object, I need to trigger event to send email
>using ESMTPSenderFactory and ESMTPSender. As, later I would be extending
>ESMTP* classes to do my little funky stuff.
>
>What is the best code design I can use to implement this stuff.

Your code looks close.  The biggest issue is the loop over the queue.
Instead, you need to handle items from the queue without blocking.

>
>Following is basic algorithm kind of code I am doing right now, but I
>feel I am missing something.
>
>#================
>
>#Code Begins Here: .tac file
>
>#================
>
>
>
>import StringIO
>
>
>
>from twisted.application import service
>
>
>
>from twisted.application import internet
>
>from twisted.internet import protocol, defer
>
>from twisted.mail import smtp, relaymanager
>
>from twisted.internet import reactor
>
>
>
>Def process_queue:
>

The following loop:

>    While True:
>
>         Try:
>
>                Data = my_queue.next()
>
>
>
>                getMailExchange('localhost).addCallback(cbMailExchange,
>data)
>
>       Except:
>
>                Break
>

Needs to be replaced.  I'm not sure what my_queue is, but you need to
replace it with something which will call your code when there is an
item to process.  Then you can get rid of the loop and define a callback
which looks up a mail exchange and sends a message to it.

You may also want to use twisted.mail.smtp.sendmail rather than the
factories.  It's a bit higher-level and simpler.

Jean-Paul



From ryeguy1 at gmail.com  Tue Mar 17 11:05:59 2009
From: ryeguy1 at gmail.com (Ryan Lepidi)
Date: Tue, 17 Mar 2009 11:05:59 -0400
Subject: [Twisted-Python] So how does everyone use an ORM in twisted?
Message-ID: <bb39cd350903170805p2fca87casbc3cd6c932bb9439@mail.gmail.com>

I have searched a bit, and it seems as though you can't use SQL Alchemy with
twisted due to SA being thread unsafe. The only solution I found was sAsync,
but this is old and unmaintained. What is everyone else doing for database
access for a multiuser server? Is everyone really using raw sql queries or
is there some easy solution that I'm missing?

I'm not even stuck on SQL Alchemy; if there is some other ORM that works in
this case, I'd be willing to learn it.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090317/78f77658/attachment.htm 

From exarkun at divmod.com  Tue Mar 17 11:17:38 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 17 Mar 2009 10:17:38 -0500
Subject: [Twisted-Python] So how does everyone use an ORM in twisted?
In-Reply-To: <bb39cd350903170805p2fca87casbc3cd6c932bb9439@mail.gmail.com>
Message-ID: <20090317151738.12853.1551779152.divmod.quotient.24391@henry.divmod.com>

On Tue, 17 Mar 2009 11:05:59 -0400, Ryan Lepidi <ryeguy1 at gmail.com> wrote:
>I have searched a bit, and it seems as though you can't use SQL Alchemy with
>twisted due to SA being thread unsafe. The only solution I found was sAsync,
>but this is old and unmaintained. What is everyone else doing for database
>access for a multiuser server? Is everyone really using raw sql queries or
>is there some easy solution that I'm missing?
>
>I'm not even stuck on SQL Alchemy; if there is some other ORM that works in
>this case, I'd be willing to learn it.
>

I use Axiom (for Mantissa, a somewhat general-purpose application server,
for Quotient, a mail server based on it, for Imaginary, a text adventure
server based on it, for Blendix, a person aggregator based on it, for
Merit, a test results database, etc) most of the time.  I know some other
people are using Storm.

Overall, I think that the way all existing ORMs work (including Axiom and
Storm) is hostile towards the typical Twisted program structure (or vice
versa, or both).  So it's tough.  The approach Axiom takes is to warn you
that any database operation you perform must complete quickly or your app
will suffer, and to restrict you to SQLite, so network issues can't hurt
you.

Jean-Paul



From mszumocki at contman.pl  Tue Mar 17 11:36:31 2009
From: mszumocki at contman.pl (Maciej Szumocki)
Date: Tue, 17 Mar 2009 16:36:31 +0100
Subject: [Twisted-Python] Re: So how does everyone use an ORM in twisted?
In-Reply-To: E1Ljb51-0003uP-0u@cube.twistedmatrix.com
Message-ID: <20090317153631.ea5d8d11@poczta.contman.pl>

> From: Ryan Lepidi <ryeguy1 at gmail.com>
> Subject: [Twisted-Python] So how does everyone use an ORM in twisted?
> To: twisted-python at twistedmatrix.com
> Message-ID:
> 	<bb39cd350903170805p2fca87casbc3cd6c932bb9439 at mail.gmail.com>
> Content-Type: text/plain; charset="iso-8859-1"
> 
> I have searched a bit, and it seems as though you can't use SQL Alchemy with
> twisted due to SA being thread unsafe. The only solution I found was sAsync,
> but this is old and unmaintained. What is everyone else doing for database
> access for a multiuser server? Is everyone really using raw sql queries or
> is there some easy solution that I'm missing?
> 
> I'm not even stuck on SQL Alchemy; if there is some other ORM that works in
> this case, I'd be willing to learn it.

I'm using SQLAlchemy with Twisted in a large project without problems. 
Why would you think you cannot?
You just need to run SA operations in non-reactor threads (i currently use my own
threadpool and deferToThread but it's only slightly modified standard twisted one),
and you need to make sure each connection/session is not used by more than thread
at a time, that's all.

Maciej Szumocki



From db3l.net at gmail.com  Tue Mar 17 12:06:27 2009
From: db3l.net at gmail.com (David Bolen)
Date: Tue, 17 Mar 2009 12:06:27 -0400
Subject: [Twisted-Python] Re: So how does everyone use an ORM in twisted?
References: <20090317153631.ea5d8d11@poczta.contman.pl>
Message-ID: <m2vdq83zi4.fsf@valheru.db3l.homeip.net>

"Maciej Szumocki" <mszumocki at contman.pl> writes:

> I'm using SQLAlchemy with Twisted in a large project without
> problems.  Why would you think you cannot?  You just need to run SA
> operations in non-reactor threads (i currently use my own threadpool
> and deferToThread but it's only slightly modified standard twisted
> one), and you need to make sure each connection/session is not used
> by more than thread at a time, that's all.

I manage the integration very similarly but I don't use any of the ORM
features of SQLAlchemy, so to the OP's question, yes, I prefer
straight SQL.

It's much trickier if you want to use the ORM, unless you are very
careful to fully eager load every thing in any possible database
operation if you have need of the information subsequently in your
twisted code.  Otherwise you may block unexpectedly simply when
accessing your objects, and end up with database operations from the
main twisted thread.

I've never quite managed to get onto the ORM bandwagon, except for
some of my simplest applications.  But that's why I like SQLAlchemy as
much as I do, because it provides a very nice SQL layer without
requiring that you use the ORM, and if you stick with SQL, it is in
fact fairly straight forward to offload its operations to a separate
thread without blocking Twisted.

-- David




From ddwiggins at advpubtech.com  Tue Mar 17 12:24:00 2009
From: ddwiggins at advpubtech.com (Don Dwiggins)
Date: Tue, 17 Mar 2009 09:24:00 -0700
Subject: [Twisted-Python] Re: So how does everyone use an ORM in twisted?
In-Reply-To: <m2vdq83zi4.fsf@valheru.db3l.homeip.net>
References: <20090317153631.ea5d8d11@poczta.contman.pl>
	<m2vdq83zi4.fsf@valheru.db3l.homeip.net>
Message-ID: <gpoir0$epu$1@ger.gmane.org>

David Bolen wrote:

> It's much trickier if you want to use the ORM, unless you are very
> careful to fully eager load every thing in any possible database
> operation if you have need of the information subsequently in your
> twisted code.  Otherwise you may block unexpectedly simply when
> accessing your objects, and end up with database operations from the
> main twisted thread.

So if someone wanted the use of the ORM, would you say that they should 
access the objects through deferreds, just as they would with SQL?  Or 
is it worse than that?

-- 
Don Dwiggins
Advanced Publishing Technology




From andrewfr_ice at yahoo.com  Tue Mar 17 13:26:01 2009
From: andrewfr_ice at yahoo.com (Andrew Francis)
Date: Tue, 17 Mar 2009 10:26:01 -0700 (PDT)
Subject: [Twisted-Python] Ticket 1138 Re: Twisted-Python Digest, Vol 60,
	Issue 12
In-Reply-To: <E1LgAHK-00025o-OQ@cube.twistedmatrix.com>
Message-ID: <986172.74292.qm@web34202.mail.mud.yahoo.com>

Hello Colleagues:

>For ticket 1138 (cool movie), when I access the URL:
>http://twistedmatrix.com/projects/core/documentation/howto/tutorial/deferred_tutorial.html
>I get, URL not found. Which deferred tutorial are you referring to? >"Deferreds are Beautiful (A Tutorial) at :
>http://twistedmatrix.com/projects/core/documentation/howto/deferredindepth.html.
>I see the reference to python.util there.


Looking at Ticket 1138. Again, I believe the ticket should be referring to the deferredindepth.html document "Deferreds are Beautiful."

To answer the question: no you do not need python.util.  I also put a minor correction in deferred_ex.py to get rid of the syntax warning in line 57.

Cheers,
Andrew





      
-------------- next part --------------
A non-text attachment was scrubbed...
Name: newdeferred_ex.py
Type: text/x-python
Size: 1364 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20090317/59145e05/attachment.py 

From andrewfr_ice at yahoo.com  Tue Mar 17 13:44:30 2009
From: andrewfr_ice at yahoo.com (Andrew Francis)
Date: Tue, 17 Mar 2009 10:44:30 -0700 (PDT)
Subject: [Twisted-Python] Ticket 1009
Message-ID: <857781.88407.qm@web34202.mail.mud.yahoo.com>


Hi Colleagues:

I guess I am making today "Look at Twisted Documentation Day." I am looking at ticket 1009.

For inline generator examples, here is the example I use in "Adventures in Stackless Python Twisted Integration." In turn, this example comes from the discussions in I believe January 2008 with JP Calerone.

I can modify the example (and perhaps add illustrations) to show situations where inline generators are handy.


"""
Example of using an inline generator to make a Twisted call from a
protocol handler
"""

class MyRequestHandler(http.Request):
    @defer.inlineCallbacks
    def process(self):
        try:
          result = \
          yield client.getPage("http://localhost")
        except Exception, err:
          log.err(err, "process getPagecall failed")
        else:
          self.setHeader('Content-Type', 'text/html')
          self.write(result)
          self.finish()

Cheers,
Andrew




      



From db3l.net at gmail.com  Tue Mar 17 14:58:15 2009
From: db3l.net at gmail.com (David Bolen)
Date: Tue, 17 Mar 2009 14:58:15 -0400
Subject: [Twisted-Python] Re: So how does everyone use an ORM in twisted?
References: <20090317153631.ea5d8d11@poczta.contman.pl>
	<m2vdq83zi4.fsf@valheru.db3l.homeip.net>
	<gpoir0$epu$1@ger.gmane.org>
Message-ID: <m2mybk3rjs.fsf@valheru.db3l.homeip.net>

Don Dwiggins <ddwiggins at advpubtech.com> writes:

> So if someone wanted the use of the ORM, would you say that they
> should access the objects through deferreds, just as they would with
> SQL?  Or is it worse than that?

If by deferreds you mean pushing the ORM operation (including all
possible ancillary object loading) into a separate thread via
deferToThread, yes, that's a possibility.  But that likely will only
work best if you can work with a structure where the results of
database operations can be encapsulated into a fairly simple
interface, and not as much if the mainline code wants access to the
entire object tree.  Otherwise, you end up doing a lot of work to
protect against the very features (especially lazy loading) that often
makes an ORM attractive to people in order to ensure that the object
tree is safe to use from within the non-ORM thread.

If, however, you mean some other use of deferreds, then no - I agree
with Jean-Paul's earlier comment that most ORMs are simply not
designed to play nicely with the non-blocking Twisted main loop.
Database operations typically trigger from simple attribute access, or
from within, say an iteration loop.  They then block, so unless they
happen to execute very quickly you're blocking the Twisted main loop.
And it's tough to insert a normal deferred callback into that
equation.

You can try to offload the underlying DB operation to a thread pool,
but then you start having to fight to explicitly control all DB
access, some of which can occur during a simple attribute reference -
at which point there's no reasonable way to use a Deferred to postpone
the attribute lookup.

It's been a while since I looked at it, so I'm not sure of its status,
but sAsync was actually a interesting effort to at least get as good a
wrapper as possible, but it doesn't preclude having to be cautious
about ensuring any objects returned from the wrapper have been fully
loaded, or that any interaction that might require going back to the
database only be through wrapped methods and not direct attribute
access.  This can turn out to be a bunch of extra work when you start
talking about walking lists of related (one to many) records,
traversing the links of foreign keys among records, etc.. much of
which is the attractive part of ORMs for those who like them.

I suppose it is only fair to also say that if you don't mind some
arbitrary delays in the mainline code, there's nothing stopping you
from just using an ORM like SQLAlchemy right inline and ignoring the
whole issue.  For smaller databases or ones whose server are on the
local host (or internal to the process like sqlite), it might not even
be a real problem.  It's certainly flawed structurally and likely
won't scale, but that doesn't mean it might not be suitable in certain
cases if you know the tradeoffs.

-- David




From waterbug at pangalactic.us  Tue Mar 17 15:54:55 2009
From: waterbug at pangalactic.us (Stephen Waterbury)
Date: Tue, 17 Mar 2009 15:54:55 -0400
Subject: [Twisted-Python] Re: So how does everyone use an ORM in twisted?
In-Reply-To: <m2mybk3rjs.fsf@valheru.db3l.homeip.net>
References: <20090317153631.ea5d8d11@poczta.contman.pl>	<m2vdq83zi4.fsf@valheru.db3l.homeip.net>	<gpoir0$epu$1@ger.gmane.org>
	<m2mybk3rjs.fsf@valheru.db3l.homeip.net>
Message-ID: <49C0000F.7090904@pangalactic.us>

David Bolen wrote:
> ... or that any interaction that might require going back to the
> database only be through wrapped methods and not direct attribute
> access.  This can turn out to be a bunch of extra work when you start
> talking about walking lists of related (one to many) records,
> traversing the links of foreign keys among records, etc.. much of
> which is the attractive part of ORMs for those who like them.

This is a good point -- although the attractive part of using an
ORM in the first place is somewhat OT here, the main attraction
for me is usually *DRY* rather than "automatic persistence", so for
my purposes such "magical" features as direct attribute access,
lazy loading, etc. can actually be undesirable, since they
can make application semantics tricky to implement in some cases.
(This is somewhat analogous to the original rationale for PB's
implementation of "translucently" distributed objects --
"transparently" [magically] distributed objects are not
always desirable, and the same goes for "transparently"
persistent objects.)

Steve



From db3l.net at gmail.com  Tue Mar 17 18:13:53 2009
From: db3l.net at gmail.com (David Bolen)
Date: Tue, 17 Mar 2009 18:13:53 -0400
Subject: [Twisted-Python] Re: So how does everyone use an ORM in twisted?
References: <20090317153631.ea5d8d11@poczta.contman.pl>
	<m2vdq83zi4.fsf@valheru.db3l.homeip.net>
	<gpoir0$epu$1@ger.gmane.org>
	<m2mybk3rjs.fsf@valheru.db3l.homeip.net>
	<49C0000F.7090904@pangalactic.us>
Message-ID: <m2bprz4x26.fsf@valheru.db3l.homeip.net>

Stephen Waterbury <waterbug at pangalactic.us> writes:

> This is a good point -- although the attractive part of using an
> ORM in the first place is somewhat OT here, the main attraction
> for me is usually *DRY* rather than "automatic persistence", so for
> my purposes such "magical" features as direct attribute access,
> lazy loading, etc. can actually be undesirable, since they
> can make application semantics tricky to implement in some cases.
> (This is somewhat analogous to the original rationale for PB's
> implementation of "translucently" distributed objects --
> "transparently" [magically] distributed objects are not
> always desirable, and the same goes for "transparently"
> persistent objects.)

It's a spectrum, but as you start to move further down the "explicit"
route at some point I tend to find it closing in on just executing the
SQL.  For example, if you bypass just iterating an attribute to find
matching foreign key records in favor of a more explicit approach such
as a separate method call, it becomes closer to just iterating over
the SQL to query such records.  And having a database layer with
explicit SQL for retrieval/update can implement DRY quite well.

Of course you can also be more explicit with SQLAlchemy by defining
the default loader to be eager, or using eagerload() directly, you
just might pay a penalty in overhead in some schemas.

I guess what I always run into with ORMs is that I'm rarely lucky
enough to have my Python module be the only user of the database, and
while SQLAlchemy plays nicer with other tools at the schema level than
many ORMs that want to completely manage their persistence tables, I've
just had better luck sticking with SQL against a traditional relational
schema than one trying to mimic object persistence.  But that's more
of a general ORM usage debate than a twisted-specific one.  What is
twisted-specific, is that the additional work to ensure ORM features
work without interfering with twisted does seem to make their benefit
harder to achieve within the twisted environment.

Since I don't think it's been mentioned yet, one other item worth
pointing out is that SQLAlchemy does provide quite a bit of
flexibility and control over the mapping process, so there's some
wiggle room between raw SQL and fully ORM driven eager loading.  You
can have custom mappers that work against generic selectables (even
the results of raw SQL) which can take some of the drudgery out of
processing database results into more easily manageable object
instances, while still being rather friendly to being offloaded to a
dedicated DB thread.

-- David




From general at eepatents.com  Tue Mar 17 20:06:58 2009
From: general at eepatents.com (Ed Suominen)
Date: Tue, 17 Mar 2009 17:06:58 -0700
Subject: [Twisted-Python] Re: So how does everyone use an ORM in twisted?
In-Reply-To: <m2mybk3rjs.fsf@valheru.db3l.homeip.net>
References: <20090317153631.ea5d8d11@poczta.contman.pl>	<m2vdq83zi4.fsf@valheru.db3l.homeip.net>	<gpoir0$epu$1@ger.gmane.org>
	<m2mybk3rjs.fsf@valheru.db3l.homeip.net>
Message-ID: <49C03B22.6020603@eepatents.com>

For what it's worth, I've never used SQLAlchemy's ORM capabilities and 
don't support it in sAsync. I agree that it really isn't compatible with 
the asynchronous nature of Twisted, and I don't see it as adding 
anything. To me, the power of SQLAlchemy is in the clean and convenient 
way it permits you to access the underlying relational database, and 
sAsync merely lets you do that access in an asynchronous manner, in a 
single thread or with multiple threads.

Best regards, Ed

David Bolen wrote:
> Don Dwiggins <ddwiggins at advpubtech.com> writes:
> 
>> So if someone wanted the use of the ORM, would you say that they
>> should access the objects through deferreds, just as they would with
>> SQL?  Or is it worse than that?
> 
> If by deferreds you mean pushing the ORM operation (including all
> possible ancillary object loading) into a separate thread via
> deferToThread, yes, that's a possibility.  But that likely will only
> work best if you can work with a structure where the results of
> database operations can be encapsulated into a fairly simple
> interface, and not as much if the mainline code wants access to the
> entire object tree.  Otherwise, you end up doing a lot of work to
> protect against the very features (especially lazy loading) that often
> makes an ORM attractive to people in order to ensure that the object
> tree is safe to use from within the non-ORM thread.
> 
> If, however, you mean some other use of deferreds, then no - I agree
> with Jean-Paul's earlier comment that most ORMs are simply not
> designed to play nicely with the non-blocking Twisted main loop.
> Database operations typically trigger from simple attribute access, or
> from within, say an iteration loop.  They then block, so unless they
> happen to execute very quickly you're blocking the Twisted main loop.
> And it's tough to insert a normal deferred callback into that
> equation.
> 
> You can try to offload the underlying DB operation to a thread pool,
> but then you start having to fight to explicitly control all DB
> access, some of which can occur during a simple attribute reference -
> at which point there's no reasonable way to use a Deferred to postpone
> the attribute lookup.
> 
> It's been a while since I looked at it, so I'm not sure of its status,
> but sAsync was actually a interesting effort to at least get as good a
> wrapper as possible, but it doesn't preclude having to be cautious
> about ensuring any objects returned from the wrapper have been fully
> loaded, or that any interaction that might require going back to the
> database only be through wrapped methods and not direct attribute
> access.  This can turn out to be a bunch of extra work when you start
> talking about walking lists of related (one to many) records,
> traversing the links of foreign keys among records, etc.. much of
> which is the attractive part of ORMs for those who like them.
> 
> I suppose it is only fair to also say that if you don't mind some
> arbitrary delays in the mainline code, there's nothing stopping you
> from just using an ORM like SQLAlchemy right inline and ignoring the
> whole issue.  For smaller databases or ones whose server are on the
> local host (or internal to the process like sqlite), it might not even
> be a real problem.  It's certainly flawed structurally and likely
> won't scale, but that doesn't mean it might not be suitable in certain
> cases if you know the tradeoffs.
> 
> -- David
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> 



From p.mayers at imperial.ac.uk  Wed Mar 18 07:43:06 2009
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 18 Mar 2009 11:43:06 +0000
Subject: [Twisted-Python] Re: So how does everyone use an ORM in twisted?
In-Reply-To: <m2bprz4x26.fsf@valheru.db3l.homeip.net>
References: <20090317153631.ea5d8d11@poczta.contman.pl>	<m2vdq83zi4.fsf@valheru.db3l.homeip.net>	<gpoir0$epu$1@ger.gmane.org>	<m2mybk3rjs.fsf@valheru.db3l.homeip.net>	<49C0000F.7090904@pangalactic.us>
	<m2bprz4x26.fsf@valheru.db3l.homeip.net>
Message-ID: <49C0DE4A.1040803@imperial.ac.uk>

> 
> I guess what I always run into with ORMs is that I'm rarely lucky
> enough to have my Python module be the only user of the database, and

Very strongly agreed.

One of the things I hate about most ORMs is their desire to define the 
SQL schema for you - they mostly do a half-assed job because the "model" 
seldom contains enough information to define an efficient schema.

SQLAlchemy is better than most in that regard, since you can reflect an 
existing schema, but frankly I just reflect into table objects and use 
the query builder - the only things the ORM adds are a false sense of 
security.

"Proper" object databases e.g. ZODB, Durus et. al. are a completely 
different matter, and often very nice (though still not very easy to 
integrate with Twisted). I imagine Axiom is closer to these than to SQL.



From petshmidt at googlemail.com  Wed Mar 18 08:10:12 2009
From: petshmidt at googlemail.com (Pet)
Date: Wed, 18 Mar 2009 13:10:12 +0100
Subject: [Twisted-Python] LineReceiver MAX_LENGTH limitation
Message-ID: <b460e9630903180510g1d9ac237ib43f2de795ff337c@mail.gmail.com>

Hi,

in LineReceiver there is MAX_LENGTH = 16384 limitation. Is it possible
to set it bigger at start of an application?

Regards, Pet



From exarkun at divmod.com  Wed Mar 18 08:19:10 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 18 Mar 2009 07:19:10 -0500
Subject: [Twisted-Python] LineReceiver MAX_LENGTH limitation
In-Reply-To: <b460e9630903180510g1d9ac237ib43f2de795ff337c@mail.gmail.com>
Message-ID: <20090318121910.12853.1326945437.divmod.quotient.24853@henry.divmod.com>

On Wed, 18 Mar 2009 13:10:12 +0100, Pet <petshmidt at googlemail.com> wrote:
>Hi,
>
>in LineReceiver there is MAX_LENGTH = 16384 limitation. Is it possible
>to set it bigger at start of an application?

It's an attribute.  Not only can you set it to a larger value at the start
of an application, but you can also set it at the middle or the end of an
application. ;)

Jean-Paul



From petshmidt at googlemail.com  Wed Mar 18 08:48:09 2009
From: petshmidt at googlemail.com (Pet)
Date: Wed, 18 Mar 2009 13:48:09 +0100
Subject: [Twisted-Python] LineReceiver MAX_LENGTH limitation
In-Reply-To: <20090318121910.12853.1326945437.divmod.quotient.24853@henry.divmod.com>
References: <b460e9630903180510g1d9ac237ib43f2de795ff337c@mail.gmail.com>
	<20090318121910.12853.1326945437.divmod.quotient.24853@henry.divmod.com>
Message-ID: <b460e9630903180548v5aa60268q30d325bf3c8e090a@mail.gmail.com>

On Wed, Mar 18, 2009 at 1:19 PM, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> On Wed, 18 Mar 2009 13:10:12 +0100, Pet <petshmidt at googlemail.com> wrote:
>>
>> Hi,
>>
>> in LineReceiver there is MAX_LENGTH = 16384 limitation. Is it possible
>> to set it bigger at start of an application?
>
> It's an attribute. ?Not only can you set it to a larger value at the start
> of an application, but you can also set it at the middle or the end of an
> application. ;)

Ups! I've tried and it didn't work for probably another reason.
Thanks, it works fine now. :)

Pet

>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From exarkun at twistedmatrix.com  Sun Mar 22 10:04:35 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 22 Mar 2009 14:04:35 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1237730675.96.1456295280@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090322/1213954a/attachment.htm 

From matusis at yahoo.com  Sat Mar 21 23:02:03 2009
From: matusis at yahoo.com (Alec Matusis)
Date: Sat, 21 Mar 2009 20:02:03 -0700
Subject: [Twisted-Python] strange server crash
Message-ID: <032a01c9aa9a$94b70e40$be252ac0$@com>

I have been operating a busy twisted TCP server for quite some time (1
year+).

Yesterday, it strangely crashed under peak load for that day (it has been
under more load in the past).  

 

# grep segfault /var/log/messages

Mar 20 19:12:15 serv2 kernel: [17687209.144548] twistd[10701]: segfault at 8
rip 41eccf rsp 7fff33675270 error 6

 

I cannot understand the reason of the crash, except that it?s some very rare
race condition.

While the code is quite cumbersome, here are some general details:

 

8 min before the crash, the server started giving repeated error on clients
disconnect, that I have never seen before in the last year.

 

It first produced this twice:

 

2009/03/20 19:04 -0700 [ClientProtocol,318930,70.132.227.150] Unhandled
Error

        Traceback (most recent call last):

          File
"/nail/encap/Twisted-2.5.0/lib/python2.4/site-packages/twisted/application/a
pp.py", line 113, in runReactorWithLogging

            reactor.run()

          File
"/nail/encap/Twisted-2.5.0/lib/python2.4/site-packages/twisted/internet/posi
xbase.py", line 220, in run

            self.mainLoop()

          File
"/nail/encap/Twisted-2.5.0/lib/python2.4/site-packages/twisted/internet/posi
xbase.py", line 231, in mainLoop

            self.doIteration(t)

          File
"/nail/encap/Twisted-2.5.0/lib/python2.4/site-packages/twisted/internet/epol
lreactor.py", line 181, in doPoll

            log.callWithLogger(selectable, _drdw, selectable, fd, event)

        --- <exception caught here> ---

          File
"/nail/encap/Twisted-2.5.0/lib/python2.4/site-packages/twisted/python/log.py
", line 48, in callWithLogger

            return callWithContext({"system": lp}, func, *args, **kw)

          File
"/nail/encap/Twisted-2.5.0/lib/python2.4/site-packages/twisted/python/log.py
", line 33, in callWithContext

            return context.call({ILogContext: newCtx}, func, *args, **kw)

          File
"/nail/encap/Twisted-2.5.0/lib/python2.4/site-packages/twisted/python/contex
t.py", line 59, in callWithContext

            return self.currentContext().callWithContext(ctx, func, *args,
**kw)

          File
"/nail/encap/Twisted-2.5.0/lib/python2.4/site-packages/twisted/python/contex
t.py", line 37, in callWithContext

            return func(*args,**kw)

          File
"/nail/encap/Twisted-2.5.0/lib/python2.4/site-packages/twisted/internet/epol
lreactor.py", line 212, in _doReadOrWrite

            self._disconnectSelectable(selectable, why, inRead)

          File
"/nail/encap/Twisted-2.5.0/lib/python2.4/site-packages/twisted/internet/posi
xbase.py", line 252, in _disconnectSelectable

            selectable.readConnectionLost(f)

          File
"/nail/encap/Twisted-2.5.0/lib/python2.4/site-packages/twisted/internet/tcp.
py", line 405, in readConnectionLost

            self.connectionLost(reason)

          File
"/nail/encap/Twisted-2.5.0/lib/python2.4/site-packages/twisted/internet/tcp.
py", line 416, in connectionLost

            protocol.connectionLost(reason)

          File "/nail/live/im/myserv/protocols.py", line 170, in
connectionLost

            self.session.logout()

          File "/nail/live/im/myserv/service.py", line 1199, in logout

            if self.nick in session.sellers:

        exceptions.AttributeError: Deferred instance has no attribute
'sellers'

 

and then a different error in the same line with the same call stack, that
was repeated about 1000 times for different logging out clients:

 

2009/03/20 19:04 -0700 [ClientProtocol,326158,99.245.246.187] Unhandled
Error

        Traceback (most recent call last):

          File
"/nail/encap/Twisted-2.5.0/lib/python2.4/site-packages/twisted/application/a
pp.py", line 113, in runReactorWithLogging

            reactor.run()

          File
"/nail/encap/Twisted-2.5.0/lib/python2.4/site-packages/twisted/internet/posi
xbase.py", line 220, in run

            self.mainLoop()

          File
"/nail/encap/Twisted-2.5.0/lib/python2.4/site-packages/twisted/internet/posi
xbase.py", line 231, in mainLoop

            self.doIteration(t)

          File
"/nail/encap/Twisted-2.5.0/lib/python2.4/site-packages/twisted/internet/epol
lreactor.py", line 181, in doPoll

            log.callWithLogger(selectable, _drdw, selectable, fd, event)

        --- <exception caught here> ---

          File
"/nail/encap/Twisted-2.5.0/lib/python2.4/site-packages/twisted/python/log.py
", line 48, in callWithLogger

            return callWithContext({"system": lp}, func, *args, **kw)

          File
"/nail/encap/Twisted-2.5.0/lib/python2.4/site-packages/twisted/python/log.py
", line 33, in callWithContext

            return context.call({ILogContext: newCtx}, func, *args, **kw)

          File
"/nail/encap/Twisted-2.5.0/lib/python2.4/site-packages/twisted/python/contex
t.py", line 59, in callWithContext

            return self.currentContext().callWithContext(ctx, func, *args,
**kw)

          File
"/nail/encap/Twisted-2.5.0/lib/python2.4/site-packages/twisted/python/contex
t.py", line 37, in callWithContext

            return func(*args,**kw)

          File
"/nail/encap/Twisted-2.5.0/lib/python2.4/site-packages/twisted/internet/epol
lreactor.py", line 212, in _doReadOrWrite

            self._disconnectSelectable(selectable, why, inRead)

          File
"/nail/encap/Twisted-2.5.0/lib/python2.4/site-packages/twisted/internet/posi
xbase.py", line 252, in _disconnectSelectable

            selectable.readConnectionLost(f)

          File
"/nail/encap/Twisted-2.5.0/lib/python2.4/site-packages/twisted/internet/tcp.
py", line 405, in readConnectionLost

            self.connectionLost(reason)

          File
"/nail/encap/Twisted-2.5.0/lib/python2.4/site-packages/twisted/internet/tcp.
py", line 416, in connectionLost

            protocol.connectionLost(reason)

          File "/nail/live/im/myserv/protocols.py", line 170, in
connectionLost

            self.session.logout()

          File "/nail/live/im/myserv/service.py", line 1199, in logout

            if self.nick in session.sellers:

        exceptions.AttributeError: WLResultSet instance has no attribute
'sellers'

 

This last error repeated about 1000 times for different clients, after which
the segfault occurred.

The problem is, that ?session? is an instance of a Session class that is
defined in the code, it is NEITHER a Deferred NOR an instance  of
WLResultSet class- these are completely different classes, and there?s no
possible way in the code for variable session to become an instance of
Deferred.

The code is approximately like this:

 

def logout(self):

self.on_logout(self.do_logout) 

for session in self.service.client_sessions: ? self.service.client_sessions
is a dictionary of custom Session class instances

if self.nick in session.sellers:  ? error here, it claims that session is a
Deferred or sometimes an instance of a completely unrelated class

                                                #Some statements 

 

The function self.on_logout sometimes (rarely) dispatches a deferred (it has
maybeDeferred in it), such that its argument self.on_logout is called when
that deferred returns (otherwise it?s called synchronously).

 

My question is, is it possible to muck up deferred in such a way, that after
dispatching a deferred chain inside  self.on_logout(self.do_logout) , the
remaining statements would be executed in some  unexpected local scope, such
that I would see these weird errors where my for loop iterator would
suddenly go over Deferred instances, instead of the dictionary of Session
instances that I define in the code ?? 

 

Also, why did these errors lead to segfault of the whole twisted process
after 8 minutes?

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090321/825facf2/attachment.htm 

From itamar at itamarst.org  Sun Mar 22 10:32:43 2009
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 22 Mar 2009 10:32:43 -0400
Subject: [Twisted-Python] strange server crash
In-Reply-To: <032a01c9aa9a$94b70e40$be252ac0$@com>
References: <032a01c9aa9a$94b70e40$be252ac0$@com>
Message-ID: <1237732363.5612.343.camel@pintsize>

On Sat, 2009-03-21 at 20:02 -0700, Alec Matusis wrote:

>           File "/nail/live/im/myserv/service.py", line 1199, in logout
> 
>             if self.nick in session.sellers:
> 
>         exceptions.AttributeError: WLResultSet instance has no
> attribute 'sellers'
> 
>  
> 
> This last error repeated about 1000 times for different clients, after
> which the segfault occurred.
> 
> The problem is, that ?session? is an instance of a Session class that
> is defined in the code, it is NEITHER a Deferred NOR an instance  of
> WLResultSet class- these are completely different classes, and there?s
> no possible way in the code for variable session to become an instance
> of Deferred.

I've seen this happen - once. My guess then was memory corruption of
some sort (somewhere in the C level). If you have any custom C
extensions you might want to try valgrind.




From radix at twistedmatrix.com  Sun Mar 22 11:10:13 2009
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 22 Mar 2009 11:10:13 -0400
Subject: [Twisted-Python] strange server crash
In-Reply-To: <1237732363.5612.343.camel@pintsize>
References: <032a01c9aa9a$94b70e40$be252ac0$@com>
	<1237732363.5612.343.camel@pintsize>
Message-ID: <60ed19d40903220810y3851bdc7p5f256728fec0e50a@mail.gmail.com>

On Sun, Mar 22, 2009 at 10:32 AM, Itamar Shtull-Trauring
<itamar at itamarst.org> wrote:
> On Sat, 2009-03-21 at 20:02 -0700, Alec Matusis wrote:
>
>> ? ? ? ? ? File "/nail/live/im/myserv/service.py", line 1199, in logout
>>
>> ? ? ? ? ? ? if self.nick in session.sellers:
>>
>> ? ? ? ? exceptions.AttributeError: WLResultSet instance has no
>> attribute 'sellers'
>>
>>
>>
>> This last error repeated about 1000 times for different clients, after
>> which the segfault occurred.
>>
>> The problem is, that ?session? is an instance of a Session class that
>> is defined in the code, it is NEITHER a Deferred NOR an instance ?of
>> WLResultSet class- these are completely different classes, and there?s
>> no possible way in the code for variable session to become an instance
>> of Deferred.
>
> I've seen this happen - once. My guess then was memory corruption of
> some sort (somewhere in the C level). If you have any custom C
> extensions you might want to try valgrind.

I'd like to offer a slightly stronger suggestion that this segfault is
not the fault of any pure Python code (such as Twisted), but rather
some C extension that you're using, or perhaps a bug in the Python
runtime itself. The weird attribute errors for the wrong classes are
probably caused by memory corruption leading up to the segfault.


-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
http://canonical.com/



From adelagon at gmail.com  Sun Mar 22 11:46:22 2009
From: adelagon at gmail.com (Alvin Delagon)
Date: Sun, 22 Mar 2009 23:46:22 +0800
Subject: [Twisted-Python] strange server crash
In-Reply-To: <60ed19d40903220810y3851bdc7p5f256728fec0e50a@mail.gmail.com>
References: <032a01c9aa9a$94b70e40$be252ac0$@com>
	<1237732363.5612.343.camel@pintsize>
	<60ed19d40903220810y3851bdc7p5f256728fec0e50a@mail.gmail.com>
Message-ID: <7a01f6c00903220846o364f2aabp9f86cdf0da4acbd6@mail.gmail.com>

We also had a similar problem like this on one of our long running servers
although I didn't find some time to archive the logs. I'm not sure if it's
related; but I can see clearly that you're using python2.4 and it has some
funky issues with its memory management (
http://evanjones.ca/python-memory-part2.html).

We don't experience it anymore ever since we upgraded to python2.5.

---
Alvin


On Sun, Mar 22, 2009 at 11:10 PM, Christopher Armstrong <
radix at twistedmatrix.com> wrote:

> On Sun, Mar 22, 2009 at 10:32 AM, Itamar Shtull-Trauring
> <itamar at itamarst.org> wrote:
> > On Sat, 2009-03-21 at 20:02 -0700, Alec Matusis wrote:
> >
> >>           File "/nail/live/im/myserv/service.py", line 1199, in logout
> >>
> >>             if self.nick in session.sellers:
> >>
> >>         exceptions.AttributeError: WLResultSet instance has no
> >> attribute 'sellers'
> >>
> >>
> >>
> >> This last error repeated about 1000 times for different clients, after
> >> which the segfault occurred.
> >>
> >> The problem is, that ?session? is an instance of a Session class that
> >> is defined in the code, it is NEITHER a Deferred NOR an instance  of
> >> WLResultSet class- these are completely different classes, and there?s
> >> no possible way in the code for variable session to become an instance
> >> of Deferred.
> >
> > I've seen this happen - once. My guess then was memory corruption of
> > some sort (somewhere in the C level). If you have any custom C
> > extensions you might want to try valgrind.
>
> I'd like to offer a slightly stronger suggestion that this segfault is
> not the fault of any pure Python code (such as Twisted), but rather
> some C extension that you're using, or perhaps a bug in the Python
> runtime itself. The weird attribute errors for the wrong classes are
> probably caused by memory corruption leading up to the segfault.
>
>
> --
> Christopher Armstrong
> http://radix.twistedmatrix.com/
> http://planet-if.com/
> http://canonical.com/
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
http://www.alvinatorsplayground.blogspot.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090322/a60c43cf/attachment.htm 

From andrewfr_ice at yahoo.com  Sat Mar 21 11:35:28 2009
From: andrewfr_ice at yahoo.com (Andrew Francis)
Date: Sat, 21 Mar 2009 08:35:28 -0700 (PDT)
Subject: [Twisted-Python] Re: [Stackless] Stackless Twisted shocking
Message-ID: <931410.36291.qm@web34203.mail.mud.yahoo.com>


Hi Simon:

--- On Sat, 3/21/09, stackless-request at stackless.com <stackless-request at stackless.com> wrote:


> As more updates are sent zone->hub, per second, the
> incoming client->hub->zone messages take SECONDS to get thru!
> This is with approx 50 messages per second between a single zone and the >hub.

> Is this the sort of performance I can expect?

I am not an expert in performance tuning... and I have to do some performance testing soon. That said, I have problems envisioning the architecture. Does a request cause a C++ client to be spawned? Are the C++ clients logging into the server independent of requests? There are so many things missing. However the first thing I would ask is what sort of performance can I reasonably expect? What does the workflow look like? Where are the delays? Also what does stuff like CPU, memory utilization, paging look like as you increase the load? Are messages queuing up somewhere?
 
> If so, what I my alternatives? I am considering ditching
> the twisted part and using stacklessSockets instead.

Simon, PB Twisted is much higher level than stacklessSockets.

Cheers,
Andrew



      



From sipickles at googlemail.com  Fri Mar 20 14:16:47 2009
From: sipickles at googlemail.com (Simon Pickles)
Date: Fri, 20 Mar 2009 18:16:47 +0000
Subject: [Twisted-Python] Stackless Twisted shocking performance
Message-ID: <49C3DD8F.4010301@googlemail.com>

Hi,

Now I am first to admit my problem lies within my app design somewhere, 
but I thought I'd raise it here for advice.

I have a server made from a central stackless python hub, with a boost 
python c++ interface, to which c++ clients connect.

This hub is 'surrounded' by stackless python zones which are passed work 
by the hub. The zones send the updates to the hub which passes them onto 
the clients.

The hub and zones communicate using twisted.perspectivebroker.

This all seemed to work well, until I began to load test. It quickly 
became clear the MAJOR bottleneck was the transmission of data between 
the hub and zone - the twisted bit.

As more updates are sent zone->hub, per second, the incoming 
client->hub->zone messages take SECONDS to get thru! This is with approx 
50 messages per second between a single zone and the hub.

Is this the sort of performance I can expect?

If so, what I my alternatives? I am considering ditching the twisted 
part and using stacklessSockets instead.

Thanks for any advice

Simon



From exarkun at divmod.com  Sun Mar 22 19:32:30 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 22 Mar 2009 18:32:30 -0500
Subject: [Twisted-Python] Stackless Twisted shocking performance
In-Reply-To: <49C3DD8F.4010301@googlemail.com>
Message-ID: <20090322233230.12853.1565862116.divmod.quotient.26653@henry.divmod.com>

On Fri, 20 Mar 2009 18:16:47 +0000, Simon Pickles <sipickles at googlemail.com> wrote:
> [snip]
>
>As more updates are sent zone->hub, per second, the incoming 
>client->hub->zone messages take SECONDS to get thru! This is with approx 50 
>messages per second between a single zone and the hub.

"message" is a very non-specific unit of message.  For example, I just
threw together a PB demo that does 1754 messages per second.  That's a
lot more than your 50/sec, but who knows why?  You'll need to narrow down
the bottleneck a bit more precisely before there's much chance of getting
rid of it.

Jean-Paul



From exarkun at divmod.com  Sun Mar 22 19:34:42 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 22 Mar 2009 18:34:42 -0500
Subject: [Twisted-Python] Stackless Twisted shocking performance
In-Reply-To: <20090322233230.12853.1565862116.divmod.quotient.26653@henry.divmod.com>
Message-ID: <20090322233442.12853.1702673038.divmod.quotient.26655@henry.divmod.com>

On Sun, 22 Mar 2009 18:32:30 -0500, Jean-Paul Calderone <exarkun at divmod.com> wrote:
>On Fri, 20 Mar 2009 18:16:47 +0000, Simon Pickles <sipickles at googlemail.com> 
>wrote:
>>[snip]
>>
>>As more updates are sent zone->hub, per second, the incoming 
>>client->hub->zone messages take SECONDS to get thru! This is with approx 50 
>>messages per second between a single zone and the hub.
>
>"message" is a very non-specific unit of message.  For example, I just

Ahem, excuse me.  Unit of *measure*. :)

>threw together a PB demo that does 1754 messages per second.  That's a
>lot more than your 50/sec, but who knows why?  You'll need to narrow down
>the bottleneck a bit more precisely before there's much chance of getting
>rid of it.
>
>Jean-Paul
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From matusis at yahoo.com  Mon Mar 23 03:25:45 2009
From: matusis at yahoo.com (Alec Matusis)
Date: Mon, 23 Mar 2009 00:25:45 -0700
Subject: [Twisted-Python] strange server crash
In-Reply-To: <60ed19d40903220810y3851bdc7p5f256728fec0e50a@mail.gmail.com>
References: <032a01c9aa9a$94b70e40$be252ac0$@com>	<1237732363.5612.343.camel@pintsize>
	<60ed19d40903220810y3851bdc7p5f256728fec0e50a@mail.gmail.com>
Message-ID: <068901c9ab88$950674a0$bf135de0$@com>

Very strange. I am not using any custom C extensions...
In the last two days, it has been under larger load, and it has not crashed.
I will update to Python 2.6 soon.

By the way, are there any gotchas in updating from Twisted-2.5 (custom patched for epoll bug)/Python 2.4 to Twisted 8.2/Python 2.6?
It's a production server, so sometimes testing under fake limited load does not reveal everything.

> -----Original Message-----
> From: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-
> bounces at twistedmatrix.com] On Behalf Of Christopher Armstrong
> Sent: Sunday, March 22, 2009 8:10 AM
> To: Twisted general discussion
> Subject: Re: [Twisted-Python] strange server crash
> 
> On Sun, Mar 22, 2009 at 10:32 AM, Itamar Shtull-Trauring
> <itamar at itamarst.org> wrote:
> > On Sat, 2009-03-21 at 20:02 -0700, Alec Matusis wrote:
> >
> >>           File "/nail/live/im/myserv/service.py", line 1199, in
> logout
> >>
> >>             if self.nick in session.sellers:
> >>
> >>         exceptions.AttributeError: WLResultSet instance has no
> >> attribute 'sellers'
> >>
> >>
> >>
> >> This last error repeated about 1000 times for different clients,
> after
> >> which the segfault occurred.
> >>
> >> The problem is, that ?session? is an instance of a Session class
> that
> >> is defined in the code, it is NEITHER a Deferred NOR an instance  of
> >> WLResultSet class- these are completely different classes, and
> there?s
> >> no possible way in the code for variable session to become an
> instance
> >> of Deferred.
> >
> > I've seen this happen - once. My guess then was memory corruption of
> > some sort (somewhere in the C level). If you have any custom C
> > extensions you might want to try valgrind.
> 
> I'd like to offer a slightly stronger suggestion that this segfault is
> not the fault of any pure Python code (such as Twisted), but rather
> some C extension that you're using, or perhaps a bug in the Python
> runtime itself. The weird attribute errors for the wrong classes are
> probably caused by memory corruption leading up to the segfault.
> 
> 
> --
> Christopher Armstrong
> http://radix.twistedmatrix.com/
> http://planet-if.com/
> http://canonical.com/
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python





From glyph at divmod.com  Mon Mar 23 04:36:39 2009
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 23 Mar 2009 08:36:39 -0000
Subject: [Twisted-Python] strange server crash
In-Reply-To: <068901c9ab88$950674a0$bf135de0$@com>
References: <032a01c9aa9a$94b70e40$be252ac0$@com>
	<1237732363.5612.343.camel@pintsize>
	<60ed19d40903220810y3851bdc7p5f256728fec0e50a@mail.gmail.com>
	<068901c9ab88$950674a0$bf135de0$@com>
Message-ID: <20090323083639.12555.1905784476.divmod.xquotient.6503@weber.divmod.com>


On 07:25 am, matusis at yahoo.com wrote:
>Very strange. I am not using any custom C extensions...
>In the last two days, it has been under larger load, and it has not 
>crashed.
>I will update to Python 2.6 soon.

Have you tested for bad RAM on that server?  The error mode is 
sufficiently weird and rare to make me suspect cosmic rays.



From travis at crystaltech.com  Mon Mar 23 12:45:48 2009
From: travis at crystaltech.com (Travis Kiel)
Date: Mon, 23 Mar 2009 11:45:48 -0500
Subject: [Twisted-Python] Stackless Twisted shocking performance
In-Reply-To: <20090322233442.12853.1702673038.divmod.quotient.26655@henry.divmod.com>
References: <20090322233230.12853.1565862116.divmod.quotient.26653@henry.divmod.com>
	<20090322233442.12853.1702673038.divmod.quotient.26655@henry.divmod.com>
Message-ID: <E083C354AEE0094BB00E091C7305C2AD05FE9227@NEWTEKEXCH02.newtekcapital.com>

Simon,

This is a shot in the dark, but have you tested the twisted performance with the nagle algorithm disabled?
?
Travis W Kiel

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Jean-Paul Calderone
Sent: Sunday, March 22, 2009 4:35 PM
To: Twisted general discussion; stackless at stackless.com
Subject: Re: [Twisted-Python] Stackless Twisted shocking performance

On Sun, 22 Mar 2009 18:32:30 -0500, Jean-Paul Calderone <exarkun at divmod.com> wrote:
>On Fri, 20 Mar 2009 18:16:47 +0000, Simon Pickles <sipickles at googlemail.com> 
>wrote:
>>[snip]
>>
>>As more updates are sent zone->hub, per second, the incoming 
>>client->hub->zone messages take SECONDS to get thru! This is with approx 50 
>>messages per second between a single zone and the hub.
>
>"message" is a very non-specific unit of message.  For example, I just

Ahem, excuse me.  Unit of *measure*. :)

>threw together a PB demo that does 1754 messages per second.  That's a
>lot more than your 50/sec, but who knows why?  You'll need to narrow down
>the bottleneck a bit more precisely before there's much chance of getting
>rid of it.
>
>Jean-Paul
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


Notice: This communication, including attachments, may contain information that is confidential. It constitutes non-public information intended to be conveyed only to the designated recipient(s). If the reader or recipient of this communication is not the intended recipient, an employee or agent of the intended recipient who is responsible for delivering it to the intended recipient, or if you believe that you have received this communication in error, please notify the sender immediately by return e-mail and promptly delete this e-mail, including attachments without reading or saving them in any manner. The unauthorized use, dissemination, distribution, or reproduction of this e-mail, including attachments, is prohibited and may be unlawful. If you have received this email in error, please notify us immediately by e-mail or telephone and delete the e-mail and the attachments (if any).



From matusis at yahoo.com  Mon Mar 23 14:19:33 2009
From: matusis at yahoo.com (Alec Matusis)
Date: Mon, 23 Mar 2009 11:19:33 -0700
Subject: [Twisted-Python] strange server crash
In-Reply-To: <20090323083639.12555.1905784476.divmod.xquotient.6503@weber.divmod.com>
References: <032a01c9aa9a$94b70e40$be252ac0$@com>	<1237732363.5612.343.camel@pintsize>	<60ed19d40903220810y3851bdc7p5f256728fec0e50a@mail.gmail.com>	<068901c9ab88$950674a0$bf135de0$@com>
	<20090323083639.12555.1905784476.divmod.xquotient.6503@weber.divmod.com>
Message-ID: <079d01c9abe3$eac53b50$c04fb1f0$@com>

I have tested for bad RAM when the server was installed 3 month ago, I did a memtest that run for a day.
This is an 8 core server, and I run one twistd process per core, and surprisingly, only one crashed out of 8. Would you think that the effect of bad RAM would be confined to just once server out of 8?

> -----Original Message-----
> From: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-
> bounces at twistedmatrix.com] On Behalf Of glyph at divmod.com
> Sent: Monday, March 23, 2009 1:37 AM
> To: 'Twisted general discussion'
> Subject: RE: [Twisted-Python] strange server crash
> 
> 
> On 07:25 am, matusis at yahoo.com wrote:
> >Very strange. I am not using any custom C extensions...
> >In the last two days, it has been under larger load, and it has not
> >crashed.
> >I will update to Python 2.6 soon.
> 
> Have you tested for bad RAM on that server?  The error mode is
> sufficiently weird and rare to make me suspect cosmic rays.
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From db3l.net at gmail.com  Mon Mar 23 15:23:32 2009
From: db3l.net at gmail.com (David Bolen)
Date: Mon, 23 Mar 2009 15:23:32 -0400
Subject: [Twisted-Python] Re: strange server crash
References: <032a01c9aa9a$94b70e40$be252ac0$@com>
	<1237732363.5612.343.camel@pintsize>
	<60ed19d40903220810y3851bdc7p5f256728fec0e50a@mail.gmail.com>
	<068901c9ab88$950674a0$bf135de0$@com>
	<20090323083639.12555.1905784476.divmod.xquotient.6503@weber.divmod.com>
	<079d01c9abe3$eac53b50$c04fb1f0$@com>
Message-ID: <m2fxh42gcr.fsf@valheru.db3l.homeip.net>

"Alec Matusis" <matusis at yahoo.com> writes:

> I have tested for bad RAM when the server was installed 3 month ago,
> I did a memtest that run for a day.  This is an 8 core server, and I
> run one twistd process per core, and surprisingly, only one crashed
> out of 8. Would you think that the effect of bad RAM would be
> confined to just once server out of 8?

Sure, since it totally depends on just what bit of memory was faulty.
Just about any behavior you can think of can happen.  It could be a
simple, quick SEGV in a single process, an inexplicable failure at
some point post-corruption if the corrupted memory wasn't in code, up
to a full kernel crash if it just happened to hit a key kernel
structure or code path.  And if the memory isn't a hard failure you
can then keep running until the system just happens to use it again.

Of course, that's not to say the problem has to be memory or hardware
related, but the more inexplicable the behavior and/or system state at
the point of crash, the more I'd be inclined to consider it.

I will also say, that for some reason, I've run into more memory chip
failures in systems in the past year or so than in at least the prior
5+ years, using consistent, name brand, sources for the chips.  Maybe
the increasing densities (as well as most non-server systems still
non-ECC) or heavier use systems may make of memory might be at fault,
but regardless I'm more likely nowadays to consider faulty memory and
run a scan than I would have been a few years ago.

-- David




From coder_gus at lavabit.com  Mon Mar 23 16:48:14 2009
From: coder_gus at lavabit.com (coder_gus)
Date: Mon, 23 Mar 2009 22:48:14 +0200
Subject: [Twisted-Python] So how does everyone use an ORM in twisted?
In-Reply-To: <20090317151738.12853.1551779152.divmod.quotient.24391@henry.divmod.com>
References: <20090317151738.12853.1551779152.divmod.quotient.24391@henry.divmod.com>
Message-ID: <49C7F58E.9060308@lavabit.com>

So, basically what you say is that if I do something like:

def dataReceived(self, data):
    reactor.callInThread(f, data)

and later you have:
def getData():
    data = orm_session.query(Object).filter(data).all()
    return data # eagerloaded, lazyloaded and put in any format you like

reactor.callFromThread(getData)

at the time of the query or when lazy-loading an attribute the reactor 
would block?

And if so, why is that? I do not know the internals of the reactor nor 
the ones of the ORM and I am interested why something like this won't work.

Thanks.

P.S: Sorry for the vaguely python pseudo-code, hope you got the idea.

Jean-Paul Calderone wrote:
> On Tue, 17 Mar 2009 11:05:59 -0400, Ryan Lepidi <ryeguy1 at gmail.com> 
> wrote:
>> I have searched a bit, and it seems as though you can't use SQL 
>> Alchemy with
>> twisted due to SA being thread unsafe. The only solution I found was 
>> sAsync,
>> but this is old and unmaintained. What is everyone else doing for 
>> database
>> access for a multiuser server? Is everyone really using raw sql 
>> queries or
>> is there some easy solution that I'm missing?
>>
>> I'm not even stuck on SQL Alchemy; if there is some other ORM that 
>> works in
>> this case, I'd be willing to learn it.
>>
>
> I use Axiom (for Mantissa, a somewhat general-purpose application server,
> for Quotient, a mail server based on it, for Imaginary, a text adventure
> server based on it, for Blendix, a person aggregator based on it, for
> Merit, a test results database, etc) most of the time.  I know some other
> people are using Storm.
>
> Overall, I think that the way all existing ORMs work (including Axiom and
> Storm) is hostile towards the typical Twisted program structure (or vice
> versa, or both).  So it's tough.  The approach Axiom takes is to warn you
> that any database operation you perform must complete quickly or your app
> will suffer, and to restrict you to SQLite, so network issues can't hurt
> you.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
> ____________________________________________________________________________________ 
>
> Be a professional.  Click here to earn a psychology degree.
> http://ads.lavabit.com/fc/BLSrjwr2XUejFQl52llZu1OHc75Kvdk24AO6XmzlqNlFiwPiYRenCdFpDfK/ 
>
> ____________________________________________________________________________________ 
>




From petshmidt at googlemail.com  Tue Mar 24 06:10:17 2009
From: petshmidt at googlemail.com (Pet)
Date: Tue, 24 Mar 2009 11:10:17 +0100
Subject: [Twisted-Python] db connections
Message-ID: <b460e9630903240310h5d0965e0j3425ba19456fdfe5@mail.gmail.com>

Hi,

I've wrote an daemon which does some queries to db and sends response
back to client. Do I need to make for every request from client (new
instance of  MyProtocol) a new connection to DB? Or can I somehow
prepare connection, so I could save some time? Maybe make connection
in Factory and pass it to Protocol? But what happens if too much
clients are connected to server? What is the way to control it?

Regards, Pet


class MyProtocol(basic.LineReceiver):

    def __init__(self):
        print "new connection"
        self.dbcon = adbapi.ConnectionPool("pyPgSQL.PgSQL",
database="data", user='pet', host='local', password='some')


class MyFactory(protocol.ServerFactory):
    protocol = MyProtocol

class MyService(internet.TCPServer):
    def __init__(self):
        internet.TCPServer.__init__(self,PORT,MyFactory())

def main():
    reactor.listenTCP(PORT, MyFactory())
    reactor.run()


if __name__ == '__main__':
    main()



From adelagon at gmail.com  Tue Mar 24 09:45:48 2009
From: adelagon at gmail.com (Alvin Delagon)
Date: Tue, 24 Mar 2009 21:45:48 +0800
Subject: [Twisted-Python] db connections
In-Reply-To: <b460e9630903240310h5d0965e0j3425ba19456fdfe5@mail.gmail.com>
References: <b460e9630903240310h5d0965e0j3425ba19456fdfe5@mail.gmail.com>
Message-ID: <7a01f6c00903240645i439a08fduc0ac7a8b2842edb0@mail.gmail.com>

Put self.dbcon in the MyFactory class. MyProtocol instances can access it
via self.factory.


On Tue, Mar 24, 2009 at 6:10 PM, Pet <petshmidt at googlemail.com> wrote:

> Hi,
>
> I've wrote an daemon which does some queries to db and sends response
> back to client. Do I need to make for every request from client (new
> instance of  MyProtocol) a new connection to DB? Or can I somehow
> prepare connection, so I could save some time? Maybe make connection
> in Factory and pass it to Protocol? But what happens if too much
> clients are connected to server? What is the way to control it?
>
> Regards, Pet
>
>
> class MyProtocol(basic.LineReceiver):
>
>    def __init__(self):
>        print "new connection"
>        self.dbcon = adbapi.ConnectionPool("pyPgSQL.PgSQL",
> database="data", user='pet', host='local', password='some')
>
>
> class MyFactory(protocol.ServerFactory):
>    protocol = MyProtocol
>
> class MyService(internet.TCPServer):
>    def __init__(self):
>        internet.TCPServer.__init__(self,PORT,MyFactory())
>
> def main():
>    reactor.listenTCP(PORT, MyFactory())
>    reactor.run()
>
>
> if __name__ == '__main__':
>    main()
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
http://www.alvinatorsplayground.blogspot.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090324/07ed2875/attachment.htm 

From hoadley at gmail.com  Tue Mar 24 12:04:16 2009
From: hoadley at gmail.com (Rob Hoadley)
Date: Tue, 24 Mar 2009 09:04:16 -0700
Subject: [Twisted-Python] db connections
In-Reply-To: <7a01f6c00903240645i439a08fduc0ac7a8b2842edb0@mail.gmail.com>
References: <b460e9630903240310h5d0965e0j3425ba19456fdfe5@mail.gmail.com>
	<7a01f6c00903240645i439a08fduc0ac7a8b2842edb0@mail.gmail.com>
Message-ID: <9bb390e70903240904k50bbe653j5c49bc0370f0d511@mail.gmail.com>

You'd want to use a connection pool to manage the db interaction.
Your server is pretty unusable after a db connection failure.  I've
used the connection pool before with a cp_min of 1 and a cp_max of 2.

http://twistedmatrix.com/documents/8.2.0/api/twisted.enterprise.adbapi.ConnectionPool.html


On Tue, Mar 24, 2009 at 6:45 AM, Alvin Delagon <adelagon at gmail.com> wrote:
> Put self.dbcon in the MyFactory class. MyProtocol instances can access it
> via self.factory.
>
>
> On Tue, Mar 24, 2009 at 6:10 PM, Pet <petshmidt at googlemail.com> wrote:
>>
>> Hi,
>>
>> I've wrote an daemon which does some queries to db and sends response
>> back to client. Do I need to make for every request from client (new
>> instance of ?MyProtocol) a new connection to DB? Or can I somehow
>> prepare connection, so I could save some time? Maybe make connection
>> in Factory and pass it to Protocol? But what happens if too much
>> clients are connected to server? What is the way to control it?
>>
>> Regards, Pet
>>
>>
>> class MyProtocol(basic.LineReceiver):
>>
>> ? ?def __init__(self):
>> ? ? ? ?print "new connection"
>> ? ? ? ?self.dbcon = adbapi.ConnectionPool("pyPgSQL.PgSQL",
>> database="data", user='pet', host='local', password='some')
>>
>>
>> class MyFactory(protocol.ServerFactory):
>> ? ?protocol = MyProtocol
>>
>> class MyService(internet.TCPServer):
>> ? ?def __init__(self):
>> ? ? ? ?internet.TCPServer.__init__(self,PORT,MyFactory())
>>
>> def main():
>> ? ?reactor.listenTCP(PORT, MyFactory())
>> ? ?reactor.run()
>>
>>
>> if __name__ == '__main__':
>> ? ?main()
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> --
> http://www.alvinatorsplayground.blogspot.com/
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>



From petshmidt at googlemail.com  Tue Mar 24 12:17:45 2009
From: petshmidt at googlemail.com (Pet)
Date: Tue, 24 Mar 2009 17:17:45 +0100
Subject: [Twisted-Python] db connections
In-Reply-To: <7a01f6c00903240645i439a08fduc0ac7a8b2842edb0@mail.gmail.com>
References: <b460e9630903240310h5d0965e0j3425ba19456fdfe5@mail.gmail.com> 
	<7a01f6c00903240645i439a08fduc0ac7a8b2842edb0@mail.gmail.com>
Message-ID: <b460e9630903240917g642656f2lfa7fe767cb9e6d0b@mail.gmail.com>

On Tue, Mar 24, 2009 at 2:45 PM, Alvin Delagon <adelagon at gmail.com> wrote:
> Put self.dbcon in the MyFactory class. MyProtocol instances can access it
> via self.factory.

Thanks for your help! Could you give me an example? I'm getting an error

MyProtocol instance has no attribute 'factory'

if I do as you suggested.



>
>
> On Tue, Mar 24, 2009 at 6:10 PM, Pet <petshmidt at googlemail.com> wrote:
>>
>> Hi,
>>
>> I've wrote an daemon which does some queries to db and sends response
>> back to client. Do I need to make for every request from client (new
>> instance of ?MyProtocol) a new connection to DB? Or can I somehow
>> prepare connection, so I could save some time? Maybe make connection
>> in Factory and pass it to Protocol? But what happens if too much
>> clients are connected to server? What is the way to control it?
>>
>> Regards, Pet
>>
>>
>> class MyProtocol(basic.LineReceiver):
>>
>> ? ?def __init__(self):
>> ? ? ? ?print "new connection"
>> ? ? ? ?self.dbcon = adbapi.ConnectionPool("pyPgSQL.PgSQL",
>> database="data", user='pet', host='local', password='some')
>>
>>
>> class MyFactory(protocol.ServerFactory):
>> ? ?protocol = MyProtocol
>>
>> class MyService(internet.TCPServer):
>> ? ?def __init__(self):
>> ? ? ? ?internet.TCPServer.__init__(self,PORT,MyFactory())
>>
>> def main():
>> ? ?reactor.listenTCP(PORT, MyFactory())
>> ? ?reactor.run()
>>
>>
>> if __name__ == '__main__':
>> ? ?main()
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> --
> http://www.alvinatorsplayground.blogspot.com/
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>



From petshmidt at googlemail.com  Tue Mar 24 12:22:02 2009
From: petshmidt at googlemail.com (Pet)
Date: Tue, 24 Mar 2009 17:22:02 +0100
Subject: [Twisted-Python] db connections
In-Reply-To: <9bb390e70903240904k50bbe653j5c49bc0370f0d511@mail.gmail.com>
References: <b460e9630903240310h5d0965e0j3425ba19456fdfe5@mail.gmail.com> 
	<7a01f6c00903240645i439a08fduc0ac7a8b2842edb0@mail.gmail.com> 
	<9bb390e70903240904k50bbe653j5c49bc0370f0d511@mail.gmail.com>
Message-ID: <b460e9630903240922q464491cbp96fd125054839b8@mail.gmail.com>

On Tue, Mar 24, 2009 at 5:04 PM, Rob Hoadley <hoadley at gmail.com> wrote:
> You'd want to use a connection pool to manage the db interaction.
> Your server is pretty unusable after a db connection failure. ?I've
> used the connection pool before with a cp_min of 1 and a cp_max of 2.

Honestly speaking, I don't understand, what does it mean.
I'm already using connection pool with default cp_min an max, don't I?
Could you explain me, as for a newbie, please

>
> http://twistedmatrix.com/documents/8.2.0/api/twisted.enterprise.adbapi.ConnectionPool.html
>
>
> On Tue, Mar 24, 2009 at 6:45 AM, Alvin Delagon <adelagon at gmail.com> wrote:
>> Put self.dbcon in the MyFactory class. MyProtocol instances can access it
>> via self.factory.
>>
>>
>> On Tue, Mar 24, 2009 at 6:10 PM, Pet <petshmidt at googlemail.com> wrote:
>>>
>>> Hi,
>>>
>>> I've wrote an daemon which does some queries to db and sends response
>>> back to client. Do I need to make for every request from client (new
>>> instance of ?MyProtocol) a new connection to DB? Or can I somehow
>>> prepare connection, so I could save some time? Maybe make connection
>>> in Factory and pass it to Protocol? But what happens if too much
>>> clients are connected to server? What is the way to control it?
>>>
>>> Regards, Pet
>>>
>>>
>>> class MyProtocol(basic.LineReceiver):
>>>
>>> ? ?def __init__(self):
>>> ? ? ? ?print "new connection"
>>> ? ? ? ?self.dbcon = adbapi.ConnectionPool("pyPgSQL.PgSQL",
>>> database="data", user='pet', host='local', password='some')
>>>
>>>
>>> class MyFactory(protocol.ServerFactory):
>>> ? ?protocol = MyProtocol
>>>
>>> class MyService(internet.TCPServer):
>>> ? ?def __init__(self):
>>> ? ? ? ?internet.TCPServer.__init__(self,PORT,MyFactory())
>>>
>>> def main():
>>> ? ?reactor.listenTCP(PORT, MyFactory())
>>> ? ?reactor.run()
>>>
>>>
>>> if __name__ == '__main__':
>>> ? ?main()
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>>
>> --
>> http://www.alvinatorsplayground.blogspot.com/
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From adelagon at gmail.com  Tue Mar 24 13:10:17 2009
From: adelagon at gmail.com (Alvin Delagon)
Date: Wed, 25 Mar 2009 01:10:17 +0800
Subject: [Twisted-Python] db connections
In-Reply-To: <b460e9630903240922q464491cbp96fd125054839b8@mail.gmail.com>
References: <b460e9630903240310h5d0965e0j3425ba19456fdfe5@mail.gmail.com>
	<7a01f6c00903240645i439a08fduc0ac7a8b2842edb0@mail.gmail.com>
	<9bb390e70903240904k50bbe653j5c49bc0370f0d511@mail.gmail.com>
	<b460e9630903240922q464491cbp96fd125054839b8@mail.gmail.com>
Message-ID: <7a01f6c00903241010o42eb9b56nf43163fbf3a421a4@mail.gmail.com>

Something like this:

from twisted.protocols import basic
from twisted.internet import protocol, reactor
from twisted.enterprise import adbapi

class MyProtocol(basic.LineReceiver):
    def __init__(self):
        pass

    def lineReceived(self, line):
        ### dbcon can be accessed via self.factory
        print dir(self.factory.dbcon)

class MyFactory(protocol.ServerFactory):
    protocol = MyProtocol
    def __init__(self):
        self.dbcon = adbapi.ConnectionPool("pyPgSQL.PgSQL", database="data",
user='pet', host='local', password='some')

if __name__ == "__main__":
    reactor.listenTCP(8080, MyFactory())
    reactor.run()

I usually put persistent data on the factory so that protocol instances can
access them such as {username:<protocol instance>} dictionary for chatroom
server.



On Wed, Mar 25, 2009 at 12:22 AM, Pet <petshmidt at googlemail.com> wrote:

> On Tue, Mar 24, 2009 at 5:04 PM, Rob Hoadley <hoadley at gmail.com> wrote:
> > You'd want to use a connection pool to manage the db interaction.
> > Your server is pretty unusable after a db connection failure.  I've
> > used the connection pool before with a cp_min of 1 and a cp_max of 2.
>
> Honestly speaking, I don't understand, what does it mean.
> I'm already using connection pool with default cp_min an max, don't I?
> Could you explain me, as for a newbie, please
>
> >
> >
> http://twistedmatrix.com/documents/8.2.0/api/twisted.enterprise.adbapi.ConnectionPool.html
> >
> >
> > On Tue, Mar 24, 2009 at 6:45 AM, Alvin Delagon <adelagon at gmail.com>
> wrote:
> >> Put self.dbcon in the MyFactory class. MyProtocol instances can access
> it
> >> via self.factory.
> >>
> >>
> >> On Tue, Mar 24, 2009 at 6:10 PM, Pet <petshmidt at googlemail.com> wrote:
> >>>
> >>> Hi,
> >>>
> >>> I've wrote an daemon which does some queries to db and sends response
> >>> back to client. Do I need to make for every request from client (new
> >>> instance of  MyProtocol) a new connection to DB? Or can I somehow
> >>> prepare connection, so I could save some time? Maybe make connection
> >>> in Factory and pass it to Protocol? But what happens if too much
> >>> clients are connected to server? What is the way to control it?
> >>>
> >>> Regards, Pet
> >>>
> >>>
> >>> class MyProtocol(basic.LineReceiver):
> >>>
> >>>    def __init__(self):
> >>>        print "new connection"
> >>>        self.dbcon = adbapi.ConnectionPool("pyPgSQL.PgSQL",
> >>> database="data", user='pet', host='local', password='some')
> >>>
> >>>
> >>> class MyFactory(protocol.ServerFactory):
> >>>    protocol = MyProtocol
> >>>
> >>> class MyService(internet.TCPServer):
> >>>    def __init__(self):
> >>>        internet.TCPServer.__init__(self,PORT,MyFactory())
> >>>
> >>> def main():
> >>>    reactor.listenTCP(PORT, MyFactory())
> >>>    reactor.run()
> >>>
> >>>
> >>> if __name__ == '__main__':
> >>>    main()
> >>>
> >>> _______________________________________________
> >>> Twisted-Python mailing list
> >>> Twisted-Python at twistedmatrix.com
> >>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >>
> >>
> >>
> >> --
> >> http://www.alvinatorsplayground.blogspot.com/
> >>
> >> _______________________________________________
> >> Twisted-Python mailing list
> >> Twisted-Python at twistedmatrix.com
> >> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >>
> >>
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
http://www.alvinatorsplayground.blogspot.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090325/cf283f05/attachment.htm 

From hoadley at gmail.com  Tue Mar 24 15:26:35 2009
From: hoadley at gmail.com (Rob Hoadley)
Date: Tue, 24 Mar 2009 12:26:35 -0700
Subject: [Twisted-Python] db connections
In-Reply-To: <7a01f6c00903241010o42eb9b56nf43163fbf3a421a4@mail.gmail.com>
References: <b460e9630903240310h5d0965e0j3425ba19456fdfe5@mail.gmail.com>
	<7a01f6c00903240645i439a08fduc0ac7a8b2842edb0@mail.gmail.com>
	<9bb390e70903240904k50bbe653j5c49bc0370f0d511@mail.gmail.com>
	<b460e9630903240922q464491cbp96fd125054839b8@mail.gmail.com>
	<7a01f6c00903241010o42eb9b56nf43163fbf3a421a4@mail.gmail.com>
Message-ID: <9bb390e70903241226t56219c8j398f3924f7bba557@mail.gmail.com>

Sorry I apologize... that email I wrote wasn't very clear.

I've done it in the factory like below.  Slightly different from
Alvin.   I've used the factory __init__ to pass on the logical_db
information... then I have a dbpool created later.  That way I can do
development and production based on ENV vars.  The db.return_kwargs
function just returns the appropriate environment args.  I was also
mentioning the reconnection functionality which by default is turned
off.    Just make sure you handle ConnectionLost exceptions.  Also in
the stopFactory I shutdown the dbpool by closing it.

You'll also notice the openFun... which i use to set the displayed
host name and app name.  But this is db vendor specific.

def __init__(self, baseDir, validDomains, logical_db, app_name ):
        ''' factory init '''
        self.baseDir = baseDir
        self.validDomains = validDomains
        self.logical_db = logical_db
        self.app_name = app_name

def startFactory(self):
    ''' In startFactory start up the dbpool '''

    self.db = db( self.logical_db, self.app_name )
    db_kwargs = self.db.return_kwargs()

    #set the delay_connect and
    #twisted cp_openfun callable
    db_kwargs['delay_connect'] = 1
    db_kwargs['cp_openfun']  = self.db._dbOptions
    db_kwargs['cp_min'] = 1  # one thread min
    db_kwargs['cp_max'] = 1  # one thread max  = only one db connection
    db_kwargs['cp_reconnect'] = 1  # reconnect if die
    db_kwargs['cp_noisy'] =  1

    #print out the db_kwargs
    print ",".join( ["%s=%s" % (k, v) for k, v in db_kwargs.items()] )

    self.dbpool =
adbapi.ConnectionPool(self.db.return_import_name(),**db_kwargs)

On Tue, Mar 24, 2009 at 10:10 AM, Alvin Delagon <adelagon at gmail.com> wrote:
> Something like this:
>
> from twisted.protocols import basic
> from twisted.internet import protocol, reactor
> from twisted.enterprise import adbapi
>
> class MyProtocol(basic.LineReceiver):
> ??? def __init__(self):
> ??????? pass
>
> ??? def lineReceived(self, line):
> ??????? ### dbcon can be accessed via self.factory
> ??????? print dir(self.factory.dbcon)
>
> class MyFactory(protocol.ServerFactory):
> ??? protocol = MyProtocol
> ??? def __init__(self):
> ??????? self.dbcon = adbapi.ConnectionPool("pyPgSQL.PgSQL", database="data",
> user='pet', host='local', password='some')
>
> if __name__ == "__main__":
> ??? reactor.listenTCP(8080, MyFactory())
> ??? reactor.run()
>
> I usually put persistent data on the factory so that protocol instances can
> access them such as {username:<protocol instance>} dictionary for chatroom
> server.
>
>
>
> On Wed, Mar 25, 2009 at 12:22 AM, Pet <petshmidt at googlemail.com> wrote:
>>
>> On Tue, Mar 24, 2009 at 5:04 PM, Rob Hoadley <hoadley at gmail.com> wrote:
>> > You'd want to use a connection pool to manage the db interaction.
>> > Your server is pretty unusable after a db connection failure. ?I've
>> > used the connection pool before with a cp_min of 1 and a cp_max of 2.
>>
>> Honestly speaking, I don't understand, what does it mean.
>> I'm already using connection pool with default cp_min an max, don't I?
>> Could you explain me, as for a newbie, please
>>
>> >
>> >
>> > http://twistedmatrix.com/documents/8.2.0/api/twisted.enterprise.adbapi.ConnectionPool.html
>> >
>> >
>> > On Tue, Mar 24, 2009 at 6:45 AM, Alvin Delagon <adelagon at gmail.com>
>> > wrote:
>> >> Put self.dbcon in the MyFactory class. MyProtocol instances can access
>> >> it
>> >> via self.factory.
>> >>
>> >>
>> >> On Tue, Mar 24, 2009 at 6:10 PM, Pet <petshmidt at googlemail.com> wrote:
>> >>>
>> >>> Hi,
>> >>>
>> >>> I've wrote an daemon which does some queries to db and sends response
>> >>> back to client. Do I need to make for every request from client (new
>> >>> instance of ?MyProtocol) a new connection to DB? Or can I somehow
>> >>> prepare connection, so I could save some time? Maybe make connection
>> >>> in Factory and pass it to Protocol? But what happens if too much
>> >>> clients are connected to server? What is the way to control it?
>> >>>
>> >>> Regards, Pet
>> >>>
>> >>>
>> >>> class MyProtocol(basic.LineReceiver):
>> >>>
>> >>> ? ?def __init__(self):
>> >>> ? ? ? ?print "new connection"
>> >>> ? ? ? ?self.dbcon = adbapi.ConnectionPool("pyPgSQL.PgSQL",
>> >>> database="data", user='pet', host='local', password='some')
>> >>>
>> >>>
>> >>> class MyFactory(protocol.ServerFactory):
>> >>> ? ?protocol = MyProtocol
>> >>>
>> >>> class MyService(internet.TCPServer):
>> >>> ? ?def __init__(self):
>> >>> ? ? ? ?internet.TCPServer.__init__(self,PORT,MyFactory())
>> >>>
>> >>> def main():
>> >>> ? ?reactor.listenTCP(PORT, MyFactory())
>> >>> ? ?reactor.run()
>> >>>
>> >>>
>> >>> if __name__ == '__main__':
>> >>> ? ?main()
>> >>>
>> >>> _______________________________________________
>> >>> Twisted-Python mailing list
>> >>> Twisted-Python at twistedmatrix.com
>> >>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>> >>
>> >>
>> >>
>> >> --
>> >> http://www.alvinatorsplayground.blogspot.com/
>> >>
>> >> _______________________________________________
>> >> Twisted-Python mailing list
>> >> Twisted-Python at twistedmatrix.com
>> >> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>> >>
>> >>
>> >
>> > _______________________________________________
>> > Twisted-Python mailing list
>> > Twisted-Python at twistedmatrix.com
>> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>> >
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> --
> http://www.alvinatorsplayground.blogspot.com/
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>



From matusis at yahoo.com  Tue Mar 24 21:25:48 2009
From: matusis at yahoo.com (Alec Matusis)
Date: Tue, 24 Mar 2009 18:25:48 -0700
Subject: [Twisted-Python] strange server crash
In-Reply-To: <20090323083639.12555.1905784476.divmod.xquotient.6503@weber.divmod.com>
References: <032a01c9aa9a$94b70e40$be252ac0$@com>	<1237732363.5612.343.camel@pintsize>	<60ed19d40903220810y3851bdc7p5f256728fec0e50a@mail.gmail.com>	<068901c9ab88$950674a0$bf135de0$@com>
	<20090323083639.12555.1905784476.divmod.xquotient.6503@weber.divmod.com>
Message-ID: <00b101c9ace8$a1b69f20$e523dd60$@com>

This server crashed again today, again during maximum load for the day.
This time, no errors in the twisted log, and not even a segfault message in /var/log/messages : the pid simply ceased to exist.
Once again, this machine runs 8 twisted servers, but this one is slightly different from the others, and the error happened after the code for this server has been slightly modified.
I do not think this is the bad RAM anymore, because there's one particular server that keeps crashing on this machine.

> -----Original Message-----
> From: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-
> bounces at twistedmatrix.com] On Behalf Of glyph at divmod.com
> Sent: Monday, March 23, 2009 1:37 AM
> To: 'Twisted general discussion'
> Subject: RE: [Twisted-Python] strange server crash
> 
> 
> On 07:25 am, matusis at yahoo.com wrote:
> >Very strange. I am not using any custom C extensions...
> >In the last two days, it has been under larger load, and it has not
> >crashed.
> >I will update to Python 2.6 soon.
> 
> Have you tested for bad RAM on that server?  The error mode is
> sufficiently weird and rare to make me suspect cosmic rays.
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From matusis at yahoo.com  Wed Mar 25 02:31:57 2009
From: matusis at yahoo.com (Alec Matusis)
Date: Tue, 24 Mar 2009 23:31:57 -0700
Subject: FW: [Twisted-Python] strange server crash
Message-ID: <012c01c9ad13$66061bb0$32125310$@com>

One more thing:
This server has ECC memory, and it also has a BMC controller that externally logs all hardware errors independently of the memory condition.
>From what I understand, ECC memory module has an extra memory chip for data hashes. When data is written into ECC memory, the hash is created and stored in the extra chip, and when it's retrieved, the hash is checked. When a mismatch occurs, even if kernel does not log such error, the BMC controller logs it as 
# ipmitool sel list
1c10 | 02/19/2009 | 16:29:39 | Memory #0x08 | Uncorrectable ECC |
..
I retrieved the system even log (SEL) list from the BMC controller, and  are no errors whatsoever.

This looks like a Python error or something very basic. It started happening after I slightly changed the code for this particular server.

-----Original Message-----
From: Alec Matusis [mailto:matusis at yahoo.com] 
Sent: Tuesday, March 24, 2009 6:26 PM
To: 'Twisted general discussion'
Subject: RE: [Twisted-Python] strange server crash

This server crashed again today, again during maximum load for the day.
This time, no errors in the twisted log, and not even a segfault message in /var/log/messages : the pid simply ceased to exist.
Once again, this machine runs 8 twisted servers, but this one is slightly different from the others, and the error happened after the code for this server has been slightly modified.
I do not think this is the bad RAM anymore, because there's one particular server that keeps crashing on this machine.

> -----Original Message-----
> From: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-
> bounces at twistedmatrix.com] On Behalf Of glyph at divmod.com
> Sent: Monday, March 23, 2009 1:37 AM
> To: 'Twisted general discussion'
> Subject: RE: [Twisted-Python] strange server crash
> 
> 
> On 07:25 am, matusis at yahoo.com wrote:
> >Very strange. I am not using any custom C extensions...
> >In the last two days, it has been under larger load, and it has not
> >crashed.
> >I will update to Python 2.6 soon.
> 
> Have you tested for bad RAM on that server?  The error mode is
> sufficiently weird and rare to make me suspect cosmic rays.
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python





From petshmidt at googlemail.com  Wed Mar 25 05:22:40 2009
From: petshmidt at googlemail.com (Pet)
Date: Wed, 25 Mar 2009 10:22:40 +0100
Subject: [Twisted-Python] db connections
In-Reply-To: <7a01f6c00903241010o42eb9b56nf43163fbf3a421a4@mail.gmail.com>
References: <b460e9630903240310h5d0965e0j3425ba19456fdfe5@mail.gmail.com> 
	<7a01f6c00903240645i439a08fduc0ac7a8b2842edb0@mail.gmail.com> 
	<9bb390e70903240904k50bbe653j5c49bc0370f0d511@mail.gmail.com> 
	<b460e9630903240922q464491cbp96fd125054839b8@mail.gmail.com> 
	<7a01f6c00903241010o42eb9b56nf43163fbf3a421a4@mail.gmail.com>
Message-ID: <b460e9630903250222h7a6048dfmf6c7123b9bd3f08b@mail.gmail.com>

On Tue, Mar 24, 2009 at 6:10 PM, Alvin Delagon <adelagon at gmail.com> wrote:
> Something like this:
>
> from twisted.protocols import basic
> from twisted.internet import protocol, reactor
> from twisted.enterprise import adbapi
>
> class MyProtocol(basic.LineReceiver):
> ??? def __init__(self):
> ??????? pass
>
> ??? def lineReceived(self, line):
> ??????? ### dbcon can be accessed via self.factory
> ??????? print dir(self.factory.dbcon)
>
> class MyFactory(protocol.ServerFactory):
> ??? protocol = MyProtocol
> ??? def __init__(self):
> ??????? self.dbcon = adbapi.ConnectionPool("pyPgSQL.PgSQL", database="data",
> user='pet', host='local', password='some')
>
> if __name__ == "__main__":
> ??? reactor.listenTCP(8080, MyFactory())
> ??? reactor.run()
>
> I usually put persistent data on the factory so that protocol instances can
> access them such as {username:<protocol instance>} dictionary for chatroom
> server.

Hi,

thanks for example!
In that way, I'm getting error:

exceptions.AttributeError: MyProtocol instance has no attribute 'factory'

How can MyProtocol access self.factory.dbcon?


Pet




>
>
>
> On Wed, Mar 25, 2009 at 12:22 AM, Pet <petshmidt at googlemail.com> wrote:
>>
>> On Tue, Mar 24, 2009 at 5:04 PM, Rob Hoadley <hoadley at gmail.com> wrote:
>> > You'd want to use a connection pool to manage the db interaction.
>> > Your server is pretty unusable after a db connection failure. ?I've
>> > used the connection pool before with a cp_min of 1 and a cp_max of 2.
>>
>> Honestly speaking, I don't understand, what does it mean.
>> I'm already using connection pool with default cp_min an max, don't I?
>> Could you explain me, as for a newbie, please
>>
>> >
>> >
>> > http://twistedmatrix.com/documents/8.2.0/api/twisted.enterprise.adbapi.ConnectionPool.html
>> >
>> >
>> > On Tue, Mar 24, 2009 at 6:45 AM, Alvin Delagon <adelagon at gmail.com>
>> > wrote:
>> >> Put self.dbcon in the MyFactory class. MyProtocol instances can access
>> >> it
>> >> via self.factory.
>> >>
>> >>
>> >> On Tue, Mar 24, 2009 at 6:10 PM, Pet <petshmidt at googlemail.com> wrote:
>> >>>
>> >>> Hi,
>> >>>
>> >>> I've wrote an daemon which does some queries to db and sends response
>> >>> back to client. Do I need to make for every request from client (new
>> >>> instance of ?MyProtocol) a new connection to DB? Or can I somehow
>> >>> prepare connection, so I could save some time? Maybe make connection
>> >>> in Factory and pass it to Protocol? But what happens if too much
>> >>> clients are connected to server? What is the way to control it?
>> >>>
>> >>> Regards, Pet
>> >>>
>> >>>
>> >>> class MyProtocol(basic.LineReceiver):
>> >>>
>> >>> ? ?def __init__(self):
>> >>> ? ? ? ?print "new connection"
>> >>> ? ? ? ?self.dbcon = adbapi.ConnectionPool("pyPgSQL.PgSQL",
>> >>> database="data", user='pet', host='local', password='some')
>> >>>
>> >>>
>> >>> class MyFactory(protocol.ServerFactory):
>> >>> ? ?protocol = MyProtocol
>> >>>
>> >>> class MyService(internet.TCPServer):
>> >>> ? ?def __init__(self):
>> >>> ? ? ? ?internet.TCPServer.__init__(self,PORT,MyFactory())
>> >>>
>> >>> def main():
>> >>> ? ?reactor.listenTCP(PORT, MyFactory())
>> >>> ? ?reactor.run()
>> >>>
>> >>>
>> >>> if __name__ == '__main__':
>> >>> ? ?main()
>> >>>
>> >>> _______________________________________________
>> >>> Twisted-Python mailing list
>> >>> Twisted-Python at twistedmatrix.com
>> >>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>> >>
>> >>
>> >>
>> >> --
>> >> http://www.alvinatorsplayground.blogspot.com/
>> >>
>> >> _______________________________________________
>> >> Twisted-Python mailing list
>> >> Twisted-Python at twistedmatrix.com
>> >> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>> >>
>> >>
>> >
>> > _______________________________________________
>> > Twisted-Python mailing list
>> > Twisted-Python at twistedmatrix.com
>> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>> >
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> --
> http://www.alvinatorsplayground.blogspot.com/
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>



From petshmidt at googlemail.com  Wed Mar 25 06:00:56 2009
From: petshmidt at googlemail.com (Pet)
Date: Wed, 25 Mar 2009 11:00:56 +0100
Subject: [Twisted-Python] db connections
In-Reply-To: <b460e9630903250222h7a6048dfmf6c7123b9bd3f08b@mail.gmail.com>
References: <b460e9630903240310h5d0965e0j3425ba19456fdfe5@mail.gmail.com> 
	<7a01f6c00903240645i439a08fduc0ac7a8b2842edb0@mail.gmail.com> 
	<9bb390e70903240904k50bbe653j5c49bc0370f0d511@mail.gmail.com> 
	<b460e9630903240922q464491cbp96fd125054839b8@mail.gmail.com> 
	<7a01f6c00903241010o42eb9b56nf43163fbf3a421a4@mail.gmail.com> 
	<b460e9630903250222h7a6048dfmf6c7123b9bd3f08b@mail.gmail.com>
Message-ID: <b460e9630903250300yd61e25aoc741a4b32c92353c@mail.gmail.com>

On Wed, Mar 25, 2009 at 10:22 AM, Pet <petshmidt at googlemail.com> wrote:
> On Tue, Mar 24, 2009 at 6:10 PM, Alvin Delagon <adelagon at gmail.com> wrote:
>> Something like this:
>>
>> from twisted.protocols import basic
>> from twisted.internet import protocol, reactor
>> from twisted.enterprise import adbapi
>>
>> class MyProtocol(basic.LineReceiver):
>> ??? def __init__(self):
>> ??????? pass
>>
>> ??? def lineReceived(self, line):
>> ??????? ### dbcon can be accessed via self.factory
>> ??????? print dir(self.factory.dbcon)
>>
>> class MyFactory(protocol.ServerFactory):
>> ??? protocol = MyProtocol
>> ??? def __init__(self):
>> ??????? self.dbcon = adbapi.ConnectionPool("pyPgSQL.PgSQL", database="data",
>> user='pet', host='local', password='some')
>>
>> if __name__ == "__main__":
>> ??? reactor.listenTCP(8080, MyFactory())
>> ??? reactor.run()
>>
>> I usually put persistent data on the factory so that protocol instances can
>> access them such as {username:<protocol instance>} dictionary for chatroom
>> server.
>
> Hi,
>
> thanks for example!
> In that way, I'm getting error:
>
> exceptions.AttributeError: MyProtocol instance has no attribute 'factory'
>
> How can MyProtocol access self.factory.dbcon?

Ups! I didn't followed exactly your example and tried to access
self.factory.dbcon in __init__ of MyProtocol, so I've got an error.
If I access self.factory.dbcon in lineReceived it seems to work. But I
don't really understand, why can I access factory in lineReceived and
not in __init__.

Pet

>
>
> Pet
>
>
>
>
>>
>>
>>
>> On Wed, Mar 25, 2009 at 12:22 AM, Pet <petshmidt at googlemail.com> wrote:
>>>
>>> On Tue, Mar 24, 2009 at 5:04 PM, Rob Hoadley <hoadley at gmail.com> wrote:
>>> > You'd want to use a connection pool to manage the db interaction.
>>> > Your server is pretty unusable after a db connection failure. ?I've
>>> > used the connection pool before with a cp_min of 1 and a cp_max of 2.
>>>
>>> Honestly speaking, I don't understand, what does it mean.
>>> I'm already using connection pool with default cp_min an max, don't I?
>>> Could you explain me, as for a newbie, please
>>>
>>> >
>>> >
>>> > http://twistedmatrix.com/documents/8.2.0/api/twisted.enterprise.adbapi.ConnectionPool.html
>>> >
>>> >
>>> > On Tue, Mar 24, 2009 at 6:45 AM, Alvin Delagon <adelagon at gmail.com>
>>> > wrote:
>>> >> Put self.dbcon in the MyFactory class. MyProtocol instances can access
>>> >> it
>>> >> via self.factory.
>>> >>
>>> >>
>>> >> On Tue, Mar 24, 2009 at 6:10 PM, Pet <petshmidt at googlemail.com> wrote:
>>> >>>
>>> >>> Hi,
>>> >>>
>>> >>> I've wrote an daemon which does some queries to db and sends response
>>> >>> back to client. Do I need to make for every request from client (new
>>> >>> instance of ?MyProtocol) a new connection to DB? Or can I somehow
>>> >>> prepare connection, so I could save some time? Maybe make connection
>>> >>> in Factory and pass it to Protocol? But what happens if too much
>>> >>> clients are connected to server? What is the way to control it?
>>> >>>
>>> >>> Regards, Pet
>>> >>>
>>> >>>
>>> >>> class MyProtocol(basic.LineReceiver):
>>> >>>
>>> >>> ? ?def __init__(self):
>>> >>> ? ? ? ?print "new connection"
>>> >>> ? ? ? ?self.dbcon = adbapi.ConnectionPool("pyPgSQL.PgSQL",
>>> >>> database="data", user='pet', host='local', password='some')
>>> >>>
>>> >>>
>>> >>> class MyFactory(protocol.ServerFactory):
>>> >>> ? ?protocol = MyProtocol
>>> >>>
>>> >>> class MyService(internet.TCPServer):
>>> >>> ? ?def __init__(self):
>>> >>> ? ? ? ?internet.TCPServer.__init__(self,PORT,MyFactory())
>>> >>>
>>> >>> def main():
>>> >>> ? ?reactor.listenTCP(PORT, MyFactory())
>>> >>> ? ?reactor.run()
>>> >>>
>>> >>>
>>> >>> if __name__ == '__main__':
>>> >>> ? ?main()
>>> >>>
>>> >>> _______________________________________________
>>> >>> Twisted-Python mailing list
>>> >>> Twisted-Python at twistedmatrix.com
>>> >>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>> >>
>>> >>
>>> >>
>>> >> --
>>> >> http://www.alvinatorsplayground.blogspot.com/
>>> >>
>>> >> _______________________________________________
>>> >> Twisted-Python mailing list
>>> >> Twisted-Python at twistedmatrix.com
>>> >> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>> >>
>>> >>
>>> >
>>> > _______________________________________________
>>> > Twisted-Python mailing list
>>> > Twisted-Python at twistedmatrix.com
>>> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>> >
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>>
>> --
>> http://www.alvinatorsplayground.blogspot.com/
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>



From newptcai at gmail.com  Wed Mar 25 21:51:15 2009
From: newptcai at gmail.com (Peter Cai)
Date: Thu, 26 Mar 2009 09:51:15 +0800
Subject: [Twisted-Python] How to split a huge 'service' class.
Message-ID: <befee6d80903251851m444126f5ofe70d90fe5d8a258@mail.gmail.com>

Hi all,

I am writing a network application based on twisted and following the
"finger service" tutorial in twisted document.
I wrote multiple protocols classes and a single service class.
This allows client to choose the most suitable protocol to access services.

My problem is : the service class now become really huge, about 3000
thousands line of code.

Then I moved these code that really do the job in service class to several
classes, and the service would call these methods of these classes to finish
calls from protocol classes.

But still, this would cause another problem : now the service classes seems
to be useless.  It contains lots small methods that almost do nothing.  That
has a bad smell for me.

So, if you are in my situation, what will you do?

-- 
look to the things around you,the immediate world around you, if you are
alive,it will mean something to you ??Paul Strand
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090326/c9236ff8/attachment.htm 

From dfarrell at mypublisher.com  Thu Mar 26 14:26:17 2009
From: dfarrell at mypublisher.com (Doug Farrell)
Date: Thu, 26 Mar 2009 14:26:17 -0400
Subject: [Twisted-Python] how to create state machines?
Message-ID: <318F79422ADC5041A93343721F84474D01A8BB43@exchange.mypublisher.local>

Hi all,

 

I'm still getting my 'sea legs' with Twisted, so this may be a novice
question, but I'm wondering what would be a good way to create a state
machine with Twisted? For instance I've written quite a bit of code in
different languages that creates co-operative, context switching schemes
using state machines. Here would be a primative example in psuedocode:

 

Switch(state):

                Case INIT:

                                Initialize()

                                state = CMD1

                Case CMD1:

                                CommandOne()

                                state = WAITCMD1

                Case WAITCMD1:

                                If CommandOneDone()

                                                state = DONE

                                Else

                                                state = WAITCMD1

                Case DONE:

                                state = EXIT

 

This state machine initializes a system, issues an asynchronous command
that takes time to complete (say a motor move command) and then waits
for that command to be done before exiting. In the context of a
framework that is calling this state machine, the WAITCMD1 is executed
repeatedly (polling) while the asynchronous command completes. A system
can be constructed with lots of little state machines like this and be
made to look like it is doing many things at once even though the
execution of the program is single threaded.

 

I understand (pretty much) the Twisted framework is like this and
implmenting event handlers like connectionMade(), etc., is a state
machine, but I'm wondering how to implement what I've outlined above in
one of Twisted's state event handlers, or inside something like
callLater(). For example, let's say I want to use Twisted to run a long
running daemon process that has an XMLRPC interface. That XMLRPC
interface is an interface to a state machine inside Twisted that allows
the caller to change state, or start new state machines, or get the
status of a running state machine. In that case I'm thinking I want a
state machine the runs continuously in the Twisted loop, structured like
the example above; co-operatively yielding back to Twisted, but running
non-stop. Something like callLater(1, stateMachine), but non-stop,
without even the 1 second call loop.

 

Is this something I can do with callLater()? Would using a deferred be a
better option? I see deferred's callBack() system as a connecting states
together, but I'm not sure how a WAITONCMD1 kind of thing would work,
where the deferred callBack(d, waitTillDone) would have to keep coming
back to itself till some condition is met?

 

Thanks in advance for your help,

Doug

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090326/ded4ec4d/attachment.htm 

From jcavner at edac.unm.edu  Thu Mar 26 15:51:16 2009
From: jcavner at edac.unm.edu (Jeff Cavner)
Date: Thu, 26 Mar 2009 12:51:16 -0700
Subject: [Twisted-Python] pb and deferToThread for geographic data services
	- Newbie woes
Message-ID: <004401c9ae4c$39eada90$b83f1881@edac.bldg16>

I am trying to use Twisted to provide a high volume (with lots of
simultaneous requests) set of services that process and deliver several
different types of geographic data.  I am brand new to Twisted.  But a user
would come into the system through a Turbogears controller, where I intend
to write a Twisted perspective broker client to a pb server.  The server
will have different functions that ideally would operate in an asynchronous
fashion.   That is, the client would make a request for some processing on
one portion of the problem, while returning control and then another remote
function would be called to work on another part of the problem.  My
thinking was that I would have to use pb with deferToThread.  But I am
having a hard time finding any good examples that use both pb and
deferToThread.  In other words for a simple pb example like the following I
am unsure of where to add the deferToThread bits.

 

from twisted.spread import pb
from twisted.internet import reactor
from twisted.python import util
 
factory = pb.PBClientFactory()
reactor.connectTCP("localhost", 8789, factory)
d = factory.getRootObject()
d.addCallback(lambda object: object.callRemote("echo", "hello network"))
d.addCallback(lambda echo: 'server echoed: '+echo)
d.addErrback(lambda reason: 'error: '+str(reason.value))
d.addCallback(util.println)
d.addCallback(lambda _: reactor.stop())
reactor.run()

 

 

My attempt to modify the code above to take advantage of two remote function
calls (one long, and one short) to emulate longer processing times by a
function that should run while control is returned and the another function
called is woefully synchronous.

 

Here is that code:

 

from twisted.spread import pb

from twisted.internet import reactor

from twisted.python import util

from twisted.internet import threads

 

 

def getWMS():

    d.addCallback(lambda object: object.callRemote("long", "hello long"))

    d.addCallback(lambda long: 'server echoed: '+long)

    d.addErrback(lambda reason: 'error: '+str(reason.value))

    

 

def gotWMS(someobject):

    

    d.addCallback(util.println)

 

    

 

def getShort():

   e.addCallback(lambda object: object.callRemote("short", "hello short"))

   e.addCallback(lambda echo: 'server echoed: '+echo)

   e.addErrback(lambda reason: 'error: '+str(reason.value))

 

def gotShort(someobject):

 

   e.addCallback(util.println)

 

  

factory = pb.PBClientFactory()

reactor.connectTCP("localhost", 8789, factory)   

   

d = factory.getRootObject()

mythread = threads.deferToThread(getWMS)

mythread.addCallback(gotWMS)

 

e = factory.getRootObject()

mythread2 = threads.deferToThread(getShort)

mythread2.addCallback(gotShort)

 

reactor.run()

 

The long call always returns first and therefore stalls the return from the
short function. I was hoping, expecting to get the short call response back
before the long.  I am sure I am not thinking about any of this correctly.
Any pointers?????  Additionally does one have to get the rootObject for each
function call as I have done here?

 

Jeff Cavner

jcavner at edac.unm.edu

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090326/2c2e846d/attachment.htm 

From andrewfr_ice at yahoo.com  Fri Mar 27 00:48:48 2009
From: andrewfr_ice at yahoo.com (Andrew Francis)
Date: Thu, 26 Mar 2009 21:48:48 -0700 (PDT)
Subject: [Twisted-Python] Re: Twisted-Python] how to create state machines?
Message-ID: <823535.95708.qm@web34206.mail.mud.yahoo.com>


Hi Doug:

>Message: 1
>Date: Thu, 26 Mar 2009 14:26:17 -0400
>From: "Doug Farrell" <dfarrell at mypublisher.com>
>Subject: [Twisted-Python] how to create state machines?
>To: <twisted-python at twistedmatrix.com>
>Message-ID:
    <318F79422ADC5041A93343721F84474D01A8BB43 at exchange.mypublisher.local>
>Content-Type: text/plain; charset="us-ascii"

>This state machine initializes a system, issues an asynchronous command
>that takes time to complete (say a motor move command) and then waits
>for that command to be done before exiting. In the context of a
>framework that is calling this state machine, the WAITCMD1 is executed
>repeatedly (polling) while the asynchronous command completes. A system
>can be constructed with lots of little state machines like this and be
>made to look like it is doing many things at once even though the
>execution of the program is single threaded.

>I understand (pretty much) the Twisted framework is like this and
>implmenting event handlers like connectionMade(), etc., is a state
>machine, but I'm wondering how to implement what I've outlined above in
>one of Twisted's state event handlers, or inside something like
>callLater(). For example, let's say I want to use Twisted to run a long
>running daemon process that has an XMLRPC interface. That XMLRPC
>interface is an interface to a state machine inside Twisted that allows
>the caller to change state, or start new state machines, or get the
>status of a running state machine. In that case I'm thinking I want a
>state machine the runs continuously in the Twisted loop, structured like
>the example above; co-operatively yielding back to Twisted, but running
>non-stop. Something like callLater(1, stateMachine), but non-stop,
>without even the 1 second call loop.

If I understand your correctly, I don't think you need to implement a state machine to simulate concurrency with Twisted - Twisted does a lot of that for you. You can think of a Twisted application as a state machine - the callback being the state and the completion of the operation and the calling of the callback is the transition. These callbacks at runtime act like a thread of execution. 

def Initialize(...):
    # do something
    deferred = someFunctionThatReturnsADeferred()
    deferred.addCallback(State2)

def State2(...):
    # do something
    deferred = someFunctionThatReturnsADeferred()
    deferred.addCallback(State3)

def State3(someData):
    # do something 
    if someData == 'State4':
       deferred = someFunctionThatReturnsADeferred()
       func = State4
    elif someData == 'State5':
       deferred = someOtherFunctionThatReturnsADeferred()
       func = State5
    ...
    deferred.addCallback(func)

if __name__ = "__main__":
   initialize()
   reactor.run()

As for the Twisted loop. Well, you don't really see the Twisted loop since that is hidden in the reactor. Also you should distinguish between writing a new protocol and using an existing one. 

In the case of XMLRPC, creating the server isn't the problem. 

http://twistedmatrix.com/projects/web/documentation/howto/xmlrpc.html

Once a XMLRPC server is created, Twisted will take responsibility for creating new instances (or threads if you want to see it that way). If you still need a state machine, then the only hiccup I can see is sharing  state machine (if you really need one) between XMLRPC method invocations.

Cheers,
Andrew









      



From exarkun at divmod.com  Fri Mar 27 12:14:07 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 27 Mar 2009 11:14:07 -0500
Subject: [Twisted-Python] how to create state machines?
In-Reply-To: <318F79422ADC5041A93343721F84474D01A8BB43@exchange.mypublisher.local>
Message-ID: <20090327161407.24697.513810723.divmod.quotient.465@henry.divmod.com>

On Thu, 26 Mar 2009 14:26:17 -0400, Doug Farrell <dfarrell at mypublisher.com> wrote:
>Hi all,
>
>I'm still getting my 'sea legs' with Twisted, so this may be a novice
>question, but I'm wondering what would be a good way to create a state
>machine with Twisted? For instance I've written quite a bit of code in
>different languages that creates co-operative, context switching schemes
>using state machines. Here would be a primative example in psuedocode:
>

Here are a couple examples which might inspire your imagination a a bit
more (hopefully with practical results :).  I won't elaborate on them
much now because I'm rockin' at PyCon, but in a couple weeks I might be
enticed to discuss them a bit more.

  http://divmod.org/trac/browser/trunk/Epsilon/epsilon/modal.py
  http://divmod.org/trac/browser/trunk/Vertex/vertex/tcpdfa.py

Jean-Paul



From enriquejr at gmail.com  Fri Mar 27 21:32:54 2009
From: enriquejr at gmail.com (Enrique Samson Jr.)
Date: Sat, 28 Mar 2009 09:32:54 +0800
Subject: [Twisted-Python] db connections
In-Reply-To: <b460e9630903250300yd61e25aoc741a4b32c92353c@mail.gmail.com>
References: <b460e9630903240310h5d0965e0j3425ba19456fdfe5@mail.gmail.com>
	<7a01f6c00903240645i439a08fduc0ac7a8b2842edb0@mail.gmail.com>
	<9bb390e70903240904k50bbe653j5c49bc0370f0d511@mail.gmail.com>
	<b460e9630903240922q464491cbp96fd125054839b8@mail.gmail.com>
	<7a01f6c00903241010o42eb9b56nf43163fbf3a421a4@mail.gmail.com>
	<b460e9630903250222h7a6048dfmf6c7123b9bd3f08b@mail.gmail.com>
	<b460e9630903250300yd61e25aoc741a4b32c92353c@mail.gmail.com>
Message-ID: <1238203974.7549.4.camel@fenix>

On Wed, 2009-03-25 at 11:00 +0100, Pet wrote:
> > Hi,
> >
> > thanks for example!
> > In that way, I'm getting error:
> >
> > exceptions.AttributeError: MyProtocol instance has no attribute 'factory'
> >
> > How can MyProtocol access self.factory.dbcon?
> 
> Ups! I didn't followed exactly your example and tried to access
> self.factory.dbcon in __init__ of MyProtocol, so I've got an error.
> If I access self.factory.dbcon in lineReceived it seems to work. But I
> don't really understand, why can I access factory in lineReceived and
> not in __init__.
> 
> Pet

Hi Pet, 

You can simply look into the buildProtocol code of Factory for an
explanation. This is the part where your protocol gets to be
instantiated.


HTH,

Enrique





From petshmidt at googlemail.com  Sat Mar 28 04:35:05 2009
From: petshmidt at googlemail.com (Pet)
Date: Sat, 28 Mar 2009 09:35:05 +0100
Subject: [Twisted-Python] db connections
In-Reply-To: <1238203974.7549.4.camel@fenix>
References: <b460e9630903240310h5d0965e0j3425ba19456fdfe5@mail.gmail.com> 
	<7a01f6c00903240645i439a08fduc0ac7a8b2842edb0@mail.gmail.com> 
	<9bb390e70903240904k50bbe653j5c49bc0370f0d511@mail.gmail.com> 
	<b460e9630903240922q464491cbp96fd125054839b8@mail.gmail.com> 
	<7a01f6c00903241010o42eb9b56nf43163fbf3a421a4@mail.gmail.com> 
	<b460e9630903250222h7a6048dfmf6c7123b9bd3f08b@mail.gmail.com> 
	<b460e9630903250300yd61e25aoc741a4b32c92353c@mail.gmail.com> 
	<1238203974.7549.4.camel@fenix>
Message-ID: <b460e9630903280135y731c1d9rc0d4f0c7edc048a7@mail.gmail.com>

On Sat, Mar 28, 2009 at 2:32 AM, Enrique Samson Jr. <enriquejr at gmail.com> wrote:
> On Wed, 2009-03-25 at 11:00 +0100, Pet wrote:
>> > Hi,
>> >
>> > thanks for example!
>> > In that way, I'm getting error:
>> >
>> > exceptions.AttributeError: MyProtocol instance has no attribute 'factory'
>> >
>> > How can MyProtocol access self.factory.dbcon?
>>
>> Ups! I didn't followed exactly your example and tried to access
>> self.factory.dbcon in __init__ of MyProtocol, so I've got an error.
>> If I access self.factory.dbcon in lineReceived it seems to work. But I
>> don't really understand, why can I access factory in lineReceived and
>> not in __init__.
>>
>> Pet
>
> Hi Pet,
>
> You can simply look into the buildProtocol code of Factory for an
> explanation. This is the part where your protocol gets to be
> instantiated.

thanks for a hint. I'll look into that closer. Twisted is like a black
box for me right now. However, I've managed to write a useful
Client-Server App :)

>
>
> HTH,
>
> Enrique
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From zmola at acm.org  Sat Mar 28 11:36:22 2009
From: zmola at acm.org (Carl Zmola)
Date: Sat, 28 Mar 2009 11:36:22 -0400
Subject: FW: [Twisted-Python] strange server crash
In-Reply-To: <012c01c9ad13$66061bb0$32125310$@com>
References: <012c01c9ad13$66061bb0$32125310$@com>
Message-ID: <49CE43F6.7070704@acm.org>

Alec,

I know this sounds silly, but you might just want to rollback your 
changes and start the modification from scratch.  I would definitely 
review each change in detail.

If you rollback until you upgrade to 2.6, that might keep you going for 
a bit.  I know it isn't a programming solution, but ya gotta do what you 
gotta do.  I hate bugs that only show up in a production system.

Carl

Alec Matusis wrote:
> This looks like a Python error or something very basic. It started happening after I slightly changed the code for this particular server.
>
>   



From exarkun at twistedmatrix.com  Sun Mar 29 00:05:11 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 29 Mar 2009 04:05:11 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1238299511.19.1446531709@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090329/e5315116/attachment.htm 

From darran at edmstudio.com  Sun Mar 29 09:41:54 2009
From: darran at edmstudio.com (Darran Edmundson)
Date: Mon, 30 Mar 2009 00:41:54 +1100
Subject: [Twisted-Python] Mac-owning Twisted programmer(s) wanted for
	interactive museum project
Message-ID: <49CF7AA2.4070306@edmstudio.com>


Hi All,

We are working on a large Australian museum project due to open in May 
and expecting more than 300,000 visitors per year.  We urgently need a 
few more highly-skilled python programmers to help get us across the 
finish line.  On the digital side, this 10,000 square foot "Museum of 
Democracy" features

    - an interactive timeline made from 14 52" touch screens.
    - a 270-degree cylindrical theatre of choreographed voxpops
    - touch interactives that solicit visitor opinions on museum content
    - RFID-enabled passes that, among other things, provide content for
      non-English speakers and accessibility to vision impaired visitors.
    - roughly 45 short films spread over 20 different viewing areas
    - on the technology side, we are using Twisted and CoreAnimation
      through the pyObjC bridge.

If this sounds interesting and you:

    - are a savvy python programmer with either extensive Twisted or
      pyObjC experience, or
    - are an ObjectiveC guru with CoreAnimation experience and
      proficient in python

    and

    - are experienced in object-oriented software development
    - can work remotely as part of our globally-distributed team
      (our team has members in Czech Republic, London, Guernsey,
      Australia)
    - have access to a Mac for local development
    - are committed to unit testing (we use trial and buildbot)
    - are available for full-time employment from now through the
      end of May (and perhaps longer).
    - are comfortable with SVN and Trac

then please contact me directly at darran at edmstudio.com.  As part of 
your response, please provide

    - a resume, preferably focused on python and/or osx development
    - a code sample demonstrating your Twisted, pyObjC or Objc prowess
    - example of a unit test you've written
    - your availability
    - your desired hourly rate

Note, we are after Twisted python and/or CoreAnimation gurus, not 
general python programmers with an interest in Mac.

Cheers,
Darran

P.S. Apologies if the above "job posting" isn't welcome on the list; I 
looked but couldn't find any restrictions in this regard.




From jan.bakuwel at omiha.com  Mon Mar 30 05:42:01 2009
From: jan.bakuwel at omiha.com (Jan Bakuwel)
Date: Mon, 30 Mar 2009 22:42:01 +1300
Subject: [Twisted-Python] How to use defer.fail better...
Message-ID: <49D093E9.3090405@omiha.com>

Hoi all,

I'm writing a twisted/python SMTP server that accepts emails from a MTA
using twisted. All works well, except that when I return a
defer.fail(None) from processEmail to messageHandler.eomReceived (see
below), twisted dumps the trace back of the last exception on stdout. Is
there a way to avoid this? I would like to handle the exception
gracefully (with an exception handler) and would not like to see any
trace back from it in my logs. I've read that using None as the
parameter to defer.fail does exactly that... what should I use instead?

The other thing I would like to do better is to have a way to return
smtp code 421 (service temporarily unavailable) rather than 550 (fatal)
in those cases where I would like to indicate a (temporary) failure to
receive the email. I've patched smtp.py (replace 550 -> 421) for this
but would gladly hear about a way to do this without patching a standard
component on my system.

thanks,
Jan



class messageHandler(object):
    implements(smtp.IMessage)
    
    def __init__(self, addressee):
        self.lines = []
        self.noisy = False
        self.emailMessage = None
        self.emailAddress = str(addressee)
    #__init__
    
    def lineReceived(self, line):
        self.lines.append(line)
    #lineReceived

    def eomReceived(self):
        # message is complete, store it
        self.lines.append('') # add a trailing newline
        messageData = '\n'.join(self.lines)
        emailMessage = message_from_string(messageData)
        return processEmail(self.emailAddress, emailMessage)
    #eomReceived

    def connectionLost(self):
        log(1, 'Connection lost unexpectedly!')
        # unexpected loss of connection; don't save
        del(self.lines)
        del(self.emailMessage)
    #connectionLost
    
#messageHandler


class localDelivery(object):
    implements(smtp.IMessageDelivery)
    
    def __init__(self):
        pass
    #end __init__
    
    def validateFrom(self, helo, originAddress):
        log (1, 'Incoming email from %s', str(originAddress))
        # accept mail from anywhere. To reject an address, raise
        # smtp.SMTPBadSender here.
        return originAddress
    #end validateFrom
    
    def receivedHeader(self, helo, origin, recipients):
        myHostname, clientIP = helo
        headerValue = "by %s from %s with ESMTP ; %s" % (myHostname,
clientIP, smtp.rfc822date())
        log(1, '...received: %s', headerValue)
        # email.Header.Header used for automatic wrapping of long lines
        return "Received: %s" % Header(headerValue)
    #end receivedHeader

    def validateTo(self, user):
        #if not user.dest.domain in valid_domains:
        #       print "Not accepting mail for %s" % user.dest
        #       raise smtp.SMTPBadRcpt(user)
        log(1, 'Accepting email for %s', user.dest)
        return lambda: messageHandler(user.dest)
    #end validateTo

#localDelivery


class SMTPFactory(protocol.ServerFactory):
    def __init__(self):
        pass
    #end __init__
    
    def buildProtocol(self, addr):
        delivery = localDelivery()
        smtpProtocol = smtp.SMTP(delivery)
        smtpProtocol.factory = self
        return smtpProtocol
    #buildProtocol
    
#SMTPFactory




From dfarrell at mypublisher.com  Mon Mar 30 11:10:48 2009
From: dfarrell at mypublisher.com (Doug Farrell)
Date: Mon, 30 Mar 2009 11:10:48 -0400
Subject: [Twisted-Python] RE: how to create state machines?
In-Reply-To: <E1LnETT-0002Ff-OU@cube.twistedmatrix.com>
References: <E1LnETT-0002Ff-OU@cube.twistedmatrix.com>
Message-ID: <318F79422ADC5041A93343721F84474D01A8BD68@exchange.mypublisher.local>

Hi Andrew,
> 
> Hi Doug:
> 
> >This state machine initializes a system, issues an asynchronous
> command
> >that takes time to complete (say a motor move command) and then waits
> >for that command to be done before exiting. In the context of a
> >framework that is calling this state machine, the WAITCMD1 is
executed
> >repeatedly (polling) while the asynchronous command completes. A
> system
> >can be constructed with lots of little state machines like this and
be
> >made to look like it is doing many things at once even though the
> >execution of the program is single threaded.
> 
> >I understand (pretty much) the Twisted framework is like this and
> >implmenting event handlers like connectionMade(), etc., is a state
> >machine, but I'm wondering how to implement what I've outlined above
> in
> >one of Twisted's state event handlers, or inside something like
> >callLater(). For example, let's say I want to use Twisted to run a
> long
> >running daemon process that has an XMLRPC interface. That XMLRPC
> >interface is an interface to a state machine inside Twisted that
> allows
> >the caller to change state, or start new state machines, or get the
> >status of a running state machine. In that case I'm thinking I want a
> >state machine the runs continuously in the Twisted loop, structured
> like
> >the example above; co-operatively yielding back to Twisted, but
> running
> >non-stop. Something like callLater(1, stateMachine), but non-stop,
> >without even the 1 second call loop.
> 
> If I understand your correctly, I don't think you need to implement a
> state machine to simulate concurrency with Twisted - Twisted does a
lot
> of that for you. You can think of a Twisted application as a state
> machine - the callback being the state and the completion of the
> operation and the calling of the callback is the transition. These
> callbacks at runtime act like a thread of execution.
> 
> def Initialize(...):
>     # do something
>     deferred = someFunctionThatReturnsADeferred()
>     deferred.addCallback(State2)
> 
> def State2(...):
>     # do something
>     deferred = someFunctionThatReturnsADeferred()
>     deferred.addCallback(State3)
> 
> def State3(someData):
>     # do something
>     if someData == 'State4':
>        deferred = someFunctionThatReturnsADeferred()
>        func = State4
>     elif someData == 'State5':
>        deferred = someOtherFunctionThatReturnsADeferred()
>        func = State5
>     ...
>     deferred.addCallback(func)
> 
> if __name__ = "__main__":
>    initialize()
>    reactor.run()
> 
> As for the Twisted loop. Well, you don't really see the Twisted loop
> since that is hidden in the reactor. Also you should distinguish
> between writing a new protocol and using an existing one.
> 
> In the case of XMLRPC, creating the server isn't the problem.
> 
> http://twistedmatrix.com/projects/web/documentation/howto/xmlrpc.html
> 
> Once a XMLRPC server is created, Twisted will take responsibility for
> creating new instances (or threads if you want to see it that way). If
> you still need a state machine, then the only hiccup I can see is
> sharing  state machine (if you really need one) between XMLRPC method
> invocations.
> 
> Cheers,
> Andrew
> 
[Doug Farrell] Thank you very much for your detailed response, I'm kinda
getting it and am going to try out a prototype to make sure I do. As you
mention, Twisted does take care of a lot of the issues dealing with
concurrency. Having written a few threaded applications, I didn't really
want to get into starting my state machine in a thread and then having
to deal with all the cross thread data safety issues.

One thing I'm still a little confused by in your reply is how you're
getting the deferred instance. Is there a particular reason your example
does this:

deferred = someOtherFunctionThatReturnsADeferred()

rather than this:

deferred = defer.deferred()

I just want to understand if there a reason the deferred is being
created in the other function.

Again, thanks for your help and response!
Doug



From andrewfr_ice at yahoo.com  Mon Mar 30 13:37:39 2009
From: andrewfr_ice at yahoo.com (Andrew Francis)
Date: Mon, 30 Mar 2009 10:37:39 -0700 (PDT)
Subject: [Twisted-Python] RE: how to create state machines?
Message-ID: <638852.12650.qm@web34204.mail.mud.yahoo.com>


Message: 2
Date: Mon, 30 Mar 2009 11:10:48 -0400
From: "Doug Farrell" <dfarrell at mypublisher.com>
Subject: [Twisted-Python] RE: how to create state machines?
To: <twisted-python at twistedmatrix.com>
Message-ID:
    <318F79422ADC5041A93343721F84474D01A8BD68 at exchange.mypublisher.local>
Content-Type: text/plain;    charset="us-ascii"

>[Doug Farrell] Thank you very much for your detailed response,

You are welcome Doug.

>One thing I'm still a little confused by in your reply is how you're
>getting the deferred instance. Is there a particular reason your example
>does this:

>deferred = someOtherFunctionThatReturnsADeferred()

Yes. There are Twisted methods that return a Deferred. For instance,  client.getPage() or in the case of a XMLRPC client, proxy.callRemote(). 

def processPage(data):
    # do stuff with the web page here

deferred = client.getPage("http://wwww.google.com")
deferred.addCallback(processPage)

>rather than this:
>deferred = defer.deferred()

Sometimes you want to create your own deferred and trigger it with a callback(). 
         
Cheers,
Andrew


      



From glyph at divmod.com  Mon Mar 30 15:02:32 2009
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 30 Mar 2009 19:02:32 -0000
Subject: [Twisted-Python] How to use defer.fail better...
In-Reply-To: <49D093E9.3090405@omiha.com>
References: <49D093E9.3090405@omiha.com>
Message-ID: <20090330190232.12555.1407611781.divmod.xquotient.6745@weber.divmod.com>

On 09:42 am, jan.bakuwel at omiha.com wrote:
>Hoi all,
>
>I'm writing a twisted/python SMTP server that accepts emails from a MTA
>using twisted. All works well, except that when I return a
>defer.fail(None) from processEmail to messageHandler.eomReceived (see
>below), twisted dumps the trace back of the last exception on stdout. 
>Is
>there a way to avoid this? I would like to handle the exception
>gracefully (with an exception handler) and would not like to see any
>trace back from it in my logs. I've read that using None as the
>parameter to defer.fail does exactly that... what should I use instead?

By the time you return, you need to have handled any exceptions.

If you want to separate exception handling into a separate function, use 
addErrback on the Deferred you have created.
>The other thing I would like to do better is to have a way to return
>smtp code 421 (service temporarily unavailable) rather than 550 (fatal)
>in those cases where I would like to indicate a (temporary) failure to
>receive the email. I've patched smtp.py (replace 550 -> 421) for this
>but would gladly hear about a way to do this without patching a 
>standard
>component on my system.

This is what twisted.python.failure.Failure.trap is for; you can catch 
specific exception types in your errbacks.

Please feel free to ask more specifically if this doesn't answer your 
question :).



From jan.bakuwel at omiha.com  Mon Mar 30 15:42:16 2009
From: jan.bakuwel at omiha.com (Jan Bakuwel)
Date: Tue, 31 Mar 2009 08:42:16 +1300
Subject: [Twisted-Python] How to use defer.fail better...
In-Reply-To: <20090330190232.12555.1407611781.divmod.xquotient.6745@weber.divmod.com>
References: <49D093E9.3090405@omiha.com>
	<20090330190232.12555.1407611781.divmod.xquotient.6745@weber.divmod.com>
Message-ID: <49D12098.9090907@omiha.com>

Hi Glyph,

>> I'm writing a twisted/python SMTP server that accepts emails from a MTA
>> using twisted. All works well, except that when I return a
>> defer.fail(None) from processEmail to messageHandler.eomReceived (see
>> below), twisted dumps the trace back of the last exception on stdout. Is
>> there a way to avoid this? I would like to handle the exception
>> gracefully (with an exception handler) and would not like to see any
>> trace back from it in my logs. I've read that using None as the
>> parameter to defer.fail does exactly that... what should I use instead?
>
> By the time you return, you need to have handled any exceptions.

I have...

My processEmail returns either defer.succeed(None) or return
defer.fail(None) based on some criteria. defer.succeed(None) translates
into telling the MTA that I've accepted the email (250);
defer.fail(None) translates into telling the MTA that I've not accepted
the email this time (421) but please try again later.

So... all is working as I would like it to work... except that twisted
dumps the exception trace back of the exception that occurred last on
stdout. There is no need for that... the exception has been handled already.

Can I make twisted not do that dump by passing another parameter
(instead of None) to defer.fail?

> If you want to separate exception handling into a separate function,
> use addErrback on the Deferred you have created.

I am not using call backs explicitly.... I am returning either
defer.succeed(None) or defer.fail(None) based on some criteria.

>> The other thing I would like to do better is to have a way to return
>> smtp code 421 (service temporarily unavailable) rather than 550 (fatal)
>> in those cases where I would like to indicate a (temporary) failure to
>> receive the email. I've patched smtp.py (replace 550 -> 421) for this
>> but would gladly hear about a way to do this without patching a standard
>> component on my system.
>
> This is what twisted.python.failure.Failure.trap is for; you can catch
> specific exception types in your errbacks.

Would you be able to give me an example how I can do this? I was
thinking about somehow (?) overriding _messageHandled? Is that not the
right way to go about it?

> Please feel free to ask more specifically if this doesn't answer your
> question :).

Thanks! Please see above :-)

Jan




From lists at webcrunchers.com  Mon Mar 30 18:07:08 2009
From: lists at webcrunchers.com (John Draper)
Date: Mon, 30 Mar 2009 15:07:08 -0700
Subject: [Twisted-Python] What kind of throughput can we expect to achieve
 when using DatagramProtocol (UDP)
Message-ID: <49D1428C.3050101@webcrunchers.com>

Hi,

We have an application we intend to release where we intend to have 
about a million applications sending UDP packets to a Twisted Python 
server which needs to process incoming data (Approx 128 bytes of text) 
per packet,   which a BACK end system is inserting this data into mySQL 
tables.

Has anyone done some serious "stress testing" of Twisted Python simple 
server code to see just how much data it can digest at a time.    Our 
server will no doubt be hosted on an OC3 - capable of 150 megabits of 
throughput with approx a 75 - 80% load.    We need to know how many 
servers we need to put into some kind of a load sharing cluster to be 
able to handle this very high data before it chokes.   

Right now,  in our proof of performance,  we are using UDP,  but 
planning to move to the more reliable TCPIP protocol when we get into 
production.

These data requests will come in fast and violent spurts of data.

John



From timwylie at hotmail.com  Mon Mar 30 18:27:36 2009
From: timwylie at hotmail.com (tim wylie)
Date: Mon, 30 Mar 2009 17:27:36 -0500
Subject: [Twisted-Python] New user - plugin question
Message-ID: <BAY112-W549DD83E0677DCFACA1096D18D0@phx.gbl>


Hello,
   I'm a long time linux/python user who's just now starting to use twisted.  I am looking for advice more than anything specific.  We're working on a small game/etc server that has several small games that can be played between users.  Maybe a card game, tic-tac-toe, etc.  There are a lot of different plugin subclasses to inherit from-how do you know which is best?  And with this kind of framework, is it better to have one interface class, say iGame, that all the games inherit from, or is it better to treat each game like a seperate plugin inheriting from different twisted plugin classes?

  There is a lot of good twisted documentation, but that is what also makes it difficult because each one does things differently depending on what they're implementing and it makes it difficult to decide which is the correct approach for what I want to do.  So, if there are any good documents related closer to what I'm doing I'd appreciate the heads up on that as well.  Well, thanks for your time.
Tim 

_________________________________________________________________
Windows Live? SkyDrive: Get 25 GB of free online storage.
http://windowslive.com/online/skydrive?ocid=TXT_TAGLM_WL_skydrive_032009
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090330/fbdb3de3/attachment.htm 

From matusis at yahoo.com  Mon Mar 30 18:39:27 2009
From: matusis at yahoo.com (Alec Matusis)
Date: Mon, 30 Mar 2009 15:39:27 -0700
Subject: [Twisted-Python] What kind of throughput can we expect to achieve
	when using DatagramProtocol (UDP)
In-Reply-To: <49D1428C.3050101@webcrunchers.com>
References: <49D1428C.3050101@webcrunchers.com>
Message-ID: <051501c9b188$6315ee20$2941ca60$@com>

One data point:
I have a server that processes about 20 UDP multicast packets per second.
This server does many other things, but the load from those 20 UDP pps is
negligible- it uses 0% CPU with just that (Xeon L5420)

> -----Original Message-----
> From: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-
> bounces at twistedmatrix.com] On Behalf Of John Draper
> Sent: Monday, March 30, 2009 3:07 PM
> To: Twisted general discussion
> Subject: [Twisted-Python] What kind of throughput can we expect to
> achieve when using DatagramProtocol (UDP)
> 
> Hi,
> 
> We have an application we intend to release where we intend to have
> about a million applications sending UDP packets to a Twisted Python
> server which needs to process incoming data (Approx 128 bytes of text)
> per packet,   which a BACK end system is inserting this data into mySQL
> tables.
> 
> Has anyone done some serious "stress testing" of Twisted Python simple
> server code to see just how much data it can digest at a time.    Our
> server will no doubt be hosted on an OC3 - capable of 150 megabits of
> throughput with approx a 75 - 80% load.    We need to know how many
> servers we need to put into some kind of a load sharing cluster to be
> able to handle this very high data before it chokes.
> 
> Right now,  in our proof of performance,  we are using UDP,  but
> planning to move to the more reliable TCPIP protocol when we get into
> production.
> 
> These data requests will come in fast and violent spurts of data.
> 
> John
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From itamar at itamarst.org  Mon Mar 30 18:57:55 2009
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 30 Mar 2009 18:57:55 -0400
Subject: [Twisted-Python] What kind of throughput can we expect to
	achieve when using DatagramProtocol (UDP)
In-Reply-To: <49D1428C.3050101@webcrunchers.com>
References: <49D1428C.3050101@webcrunchers.com>
Message-ID: <1238453875.16592.38.camel@pintsize>

On Mon, 2009-03-30 at 15:07 -0700, John Draper wrote:

> We have an application we intend to release where we intend to have 
> about a million applications sending UDP packets to a Twisted Python 
> server which needs to process incoming data (Approx 128 bytes of text) 
> per packet,   which a BACK end system is inserting this data into mySQL 
> tables.
>
> Right now,  in our proof of performance,  we are using UDP,  but 
> planning to move to the more reliable TCPIP protocol when we get into 
> production.
> 
> These data requests will come in fast and violent spurts of data.

In these sort of applications, batching helps a lot: less function
calls, less I/O overhead, etc.. So TCP should likely *speed* things up,
if messages come grouped in spurts. Benchmarks done with inserting one
MySQL row at a time will be far slower than batch inserts.




From lokare.ameya at gmail.com  Tue Mar 31 00:44:00 2009
From: lokare.ameya at gmail.com (Ameya Lokare)
Date: Mon, 30 Mar 2009 21:44:00 -0700
Subject: [Twisted-Python] Twisted conch - ssh question
Message-ID: <f13b37500903302144g58b0d240i6e6b97709a43fd41@mail.gmail.com>

Hello everyone,

I'm trying to get the sshsimpleserver.py and sshsimpleclient.py from the
examples <http://twistedmatrix.com/projects/conch/documentation/examples/>to
talk to each other. Both work fine with the standard linux ssh
client/server respectively, but I couldn't get them to communicate with each
other. All I want to do is simple data transfers to and fro, over the SSH
channel (no commands to be executed). I could get the session established,
but couldn't figure out how to do send data across from the client to the
server. I tried channel.write, but that didn't appear to work. Sorry if this
is too trivial a question, I'm a newbie to both Python and twisted. Any help
would be greatly appreciated!

-- 
Thanks & Regards,
Ameya
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090330/b056df96/attachment.htm 

From paulswartz at gmail.com  Tue Mar 31 11:39:42 2009
From: paulswartz at gmail.com (Paul Swartz)
Date: Tue, 31 Mar 2009 11:39:42 -0400
Subject: [Twisted-Python] Twisted conch - ssh question
In-Reply-To: <f13b37500903302144g58b0d240i6e6b97709a43fd41@mail.gmail.com>
References: <f13b37500903302144g58b0d240i6e6b97709a43fd41@mail.gmail.com>
Message-ID: <49D2393E.4080404@gmail.com>

On 03/31/2009 12:44 AM, Ameya Lokare wrote:
> Hello everyone,
>
> I'm trying to get the sshsimpleserver.py and sshsimpleclient.py from the
> examples
> <http://twistedmatrix.com/projects/conch/documentation/examples/> to
> talk to each other. Both work fine with the standard linux ssh
> client/server respectively, but I couldn't get them to communicate with
> each other. All I want to do is simple data transfers to and fro, over
> the SSH channel (no commands to be executed). I could get the session
> established, but couldn't figure out how to do send data across from the
> client to the server. I tried channel.write, but that didn't appear to
> work. Sorry if this is too trivial a question, I'm a newbie to both
> Python and twisted. Any help would be greatly appreciated!

The two examples aren't made to work with each other. 
sshsimpleclient.py executes 3 commands on the remote server: `true`, 
`false`, and `cat`.  sshsimpleserver.py doesn't accept commands: a shell 
opened up will server as a simple echo server.

-p
-- 
Paul Swartz
paulswartz at gmail dot com
http://paulswartz.net/
AIM: z3penguin




From lokare.ameya at gmail.com  Tue Mar 31 13:19:19 2009
From: lokare.ameya at gmail.com (Ameya Lokare)
Date: Tue, 31 Mar 2009 10:19:19 -0700
Subject: [Twisted-Python] Twisted conch - ssh question
In-Reply-To: <49D2393E.4080404@gmail.com>
References: <f13b37500903302144g58b0d240i6e6b97709a43fd41@mail.gmail.com>
	<49D2393E.4080404@gmail.com>
Message-ID: <f13b37500903311019h79306581m3d10dce5d938bad8@mail.gmail.com>

Thanks for the response, Paul. Sorry I wasn't clear before. I realize they
are not made to work with each other. What I intended to ask was, what
modifications are required to make them work with each other? Basically, I
want to write both the ssh client and server with conch, and have them
transfer some data to each other over the ssh channel. How can this be done?

On Tue, Mar 31, 2009 at 8:39 AM, Paul Swartz <paulswartz at gmail.com> wrote:

> On 03/31/2009 12:44 AM, Ameya Lokare wrote:
>
>> Hello everyone,
>>
>> I'm trying to get the sshsimpleserver.py and sshsimpleclient.py from the
>> examples
>> <http://twistedmatrix.com/projects/conch/documentation/examples/> to
>> talk to each other. Both work fine with the standard linux ssh
>> client/server respectively, but I couldn't get them to communicate with
>> each other. All I want to do is simple data transfers to and fro, over
>> the SSH channel (no commands to be executed). I could get the session
>> established, but couldn't figure out how to do send data across from the
>> client to the server. I tried channel.write, but that didn't appear to
>> work. Sorry if this is too trivial a question, I'm a newbie to both
>> Python and twisted. Any help would be greatly appreciated!
>>
>
> The two examples aren't made to work with each other. sshsimpleclient.py
> executes 3 commands on the remote server: `true`, `false`, and `cat`.
>  sshsimpleserver.py doesn't accept commands: a shell opened up will server
> as a simple echo server.
>
> -p
> --
> Paul Swartz
> paulswartz at gmail dot com
> http://paulswartz.net/
> AIM: z3penguin
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Thanks & Regards,
Ameya Lokare
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20090331/d484181d/attachment.htm 

From paulswartz at gmail.com  Tue Mar 31 14:22:47 2009
From: paulswartz at gmail.com (Paul Swartz)
Date: Tue, 31 Mar 2009 14:22:47 -0400
Subject: [Twisted-Python] Twisted conch - ssh question
In-Reply-To: <f13b37500903311019h79306581m3d10dce5d938bad8@mail.gmail.com>
References: <f13b37500903302144g58b0d240i6e6b97709a43fd41@mail.gmail.com>	<49D2393E.4080404@gmail.com>
	<f13b37500903311019h79306581m3d10dce5d938bad8@mail.gmail.com>
Message-ID: <49D25F77.8080406@gmail.com>

On 03/31/2009 01:19 PM, Ameya Lokare wrote:
> Thanks for the response, Paul. Sorry I wasn't clear before. I realize
> they are not made to work with each other. What I intended to ask was,
> what modifications are required to make them work with each other?
> Basically, I want to write both the ssh client and server with conch,
> and have them transfer some data to each other over the ssh channel. How
> can this be done?

You can either make the server accept commands (see the execCommand() 
method on session.SSHSession) or tell the client to request a shell:

self.conn.sendRequest(self, 'shell', '', wantReply=True)

HTH,
-p
-- 
Paul Swartz
paulswartz at gmail dot com
http://paulswartz.net/
AIM: z3penguin




From benjamin.r.welton at wmich.edu  Tue Mar 31 16:16:33 2009
From: benjamin.r.welton at wmich.edu (Benjamin Welton)
Date: Tue, 31 Mar 2009 16:16:33 -0400
Subject: [Twisted-Python] Authentication on NNTP in Twisted-News
Message-ID: <49D27A21.7060504@wmich.edu>

Hey Everyone,

    I am wondering if NNTP authentication was ever implemented into 
twisted-news? I ran across a mailing list discussion from about two 
years ago talking about implementing it in twisted but I haven't been 
able to find any info on if it was actually implemented.

Thanks,
Ben



From itamar at itamarst.org  Mon Mar  2 07:08:00 2009
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 02 Mar 2009 09:08:00 -0500
Subject: [Twisted-Python] Twisted developers: please donate your time!
In-Reply-To: <aa0dfd860902240025h464a286ap7ddbbd92937d0381@mail.gmail.com>
References: <1235412728.2733.2.camel@pintsize>
	<aa0dfd860902240025h464a286ap7ddbbd92937d0381@mail.gmail.com>
Message-ID: <1236002880.30721.36.camel@pintsize>

On Tue, 2009-02-24 at 21:25 +1300, Michael Hudson wrote:
> 2009/2/24 Itamar Shtull-Trauring <itamar at itamarst.org>:
> > As part of the TSF's fundraising efforts, we are trying to get upfront
> > donations of time you will spend developing Twisted. It will then get
> > matched by a donor, if we are successful in getting this grant. So if
> > you're planning on working on Twisted anyway this year, your work will
> > count twice as much!
> >
> > So, if you're interested, please reply, saying something like "I will
> > spend two weeks working on Gopher support over the next year."
> 
> I don't entirely understand, but I will commit to spending the
> equivalent of two working weeks as a general review monkey over the
> next year.  Is that the sort of thing you wanted to hear?

Yes - thanks to you and all thee rest of the people who are
volunteering! Anyone else willing to step up?




From exarkun at divmod.com  Mon Mar  2 07:14:41 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 2 Mar 2009 09:14:41 -0500
Subject: [Twisted-Python] Twisted developers: please donate your time!
In-Reply-To: <1236002880.30721.36.camel@pintsize>
Message-ID: <20090302141441.12853.981611676.divmod.quotient.16481@henry.divmod.com>

On Mon, 02 Mar 2009 09:08:00 -0500, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
>On Tue, 2009-02-24 at 21:25 +1300, Michael Hudson wrote:
>> 2009/2/24 Itamar Shtull-Trauring <itamar at itamarst.org>:
>> > As part of the TSF's fundraising efforts, we are trying to get upfront
>> > donations of time you will spend developing Twisted. It will then get
>> > matched by a donor, if we are successful in getting this grant. So if
>> > you're planning on working on Twisted anyway this year, your work will
>> > count twice as much!
>> >
>> > So, if you're interested, please reply, saying something like "I will
>> > spend two weeks working on Gopher support over the next year."
>>
>> I don't entirely understand, but I will commit to spending the
>> equivalent of two working weeks as a general review monkey over the
>> next year.  Is that the sort of thing you wanted to hear?
>
>Yes - thanks to you and all thee rest of the people who are
>volunteering! Anyone else willing to step up?
>

I will spend the equivalent of four weeks over the next year working on
ticket triage, code reviews, Lore, and Web.

Jean-Paul



From dave at davebritton.com  Mon Mar  2 13:57:17 2009
From: dave at davebritton.com (Dave Britton)
Date: Mon, 2 Mar 2009 15:57:17 -0500
Subject: [Twisted-Python] newbie problem with SMTPClient
Message-ID: <044701c99b79$7b7086d0$0500a8c0@yoda>

I love the idea of twisted but I think I must have a twisted learning disability, as I have gotten nowhere in what ought to be a simple matter. 

I need to send out emails to small groups from my apache server running a python cgi using mod_python, but my hosting service doesn't have a MTA. Instead of learning how to install and configure exim I thought I would use twisted to make a simple mail client. I started with the tutorial example that appears at:

http://twistedmatrix.com/projects/mail/documentation/tutorial/smtpclient/smtpclient.html

(.... is indenting)
============ tutorial code ================
import StringIO
from twisted.application import service
application = service.Application("SMTP Client Tutorial")
from twisted.application import internet
from twisted.internet import protocol
from twisted.internet import defer
from twisted.mail import smtp, relaymanager
class SMTPTutorialClient(smtp.ESMTPClient):
....mailFrom = "tutorial_sender at example.com"
....mailTo = "tutorial_recipient at example.net"
....mailData = '''\
Date: Fri, 6 Feb 2004 10:14:39 -0800
From: Tutorial Guy <tutorial_sender at example.com>
To: Tutorial Gal <tutorial_recipient at example.net>
Subject: Tutorate!

Hello, how are you, goodbye.
'''
....def getMailFrom(self):
........result = self.mailFrom
........self.mailFrom = None
........return result
....def getMailTo(self):
........return [self.mailTo]
....def getMailData(self):
........return StringIO.StringIO(self.mailData)
....def sentMail(self, code, resp, numOk, addresses, log):
........print 'Sent', numOk, 'messages'
........from twisted.internet import reactor
........reactor.stop()
class SMTPClientFactory(protocol.ClientFactory):
....protocol = SMTPTutorialClient
....def buildProtocol(self, addr):
........return self.protocol(secret=None, identity='example.com')
def getMailExchange(host):
....def cbMX(mxRecord):
........return str(mxRecord.exchange)
....return relaymanager.MXCalculator().getMX(host).addCallback(cbMX)
def cbMailExchange(exchange):
....smtpClientFactory = SMTPClientFactory()
....smtpClientService = internet.TCPClient(exchange, 25, smtpClientFactory)
....smtpClientService.setServiceParent(application)
getMailExchange('example.net').addCallback(cbMailExchange)
============ end tutorial code ============

This nicely looks up the right MX record and sends out an email, just what I need. Now I want to expand it to allow me to give it a list of email addresses to send the message to (not just call this same routine multple times, which seems wasteful and slow and doesn't use twisted's power to process the multiple emails in multiple threads), but I'm having terrible trouble figuring out how to do that, which tells me I'm missing a paradigm somewhere, there's something I'm not getting.

Trouble 1 is figuring out the right way to pass additional parameters to callbacks. Is this right:

Dosomething(that-returns-a-deferred).addCallback(Then-do-the-next-thing, extra-parameter1, extraparameter2)

The function Then-do-the-next-thing() will receive the deferred returned results from Dosomething() as its first argument, and extra-parameter1 and extraparameter2 as the next two. That is as if calling:
Then-do-the-next-thing(Result-returned-by-Dosomething(),extra-parameter1, extraparameter2). Have I got this correct?

So, if this is right, then where do I want to put the additional argument that contains the next email address to send, if I iterate through the list and hand each one to the email sending process like this:

elist=['addr1 at domain.com','addr2 at nextdomain.com'...]
for e in elist:
.... e2={'mxhost':'','toaddr':e}
.... getMailExchange(e2).addCallback(cbMailExchange)

In the tutorial, getMailExchange() is passed just the domain of the addressee, and the sending out of the email happens when the callback returns the MX exchange. I changed that to split the email address, so now it returns both the full address and the mx:

def getMailExchange(addr):
.... host=addr.split('@')[1]
.... def cbMX(mxRecord):
.... .... return [addr,str(mxRecord.name)]
.... return relaymanager.MXCalculator().getMX(host).addCallback(cbMX)


At this point I can't figure out how to get the email address passed to wherever it needs to go. And I don't know really where it needs to go... yikes.

In the tutorial the actual email address is hard coded into the class SMTPTutorialClient(smtp.ESMTPClient) as a class attribute, mailTo. I need to change that to be variable.

How do I get this value (of mailTo) changed for each of the instances created by smtpClientFactory = SMTPClientFactory()? I think I must be confused about the roles of Factories and Protocols.

I can't seem to figure out a way that works to get the email address passed into the system as a variable. Rather than waste people's time by describing my various failures, I thought I'd just ask for suggestions about the right twisted way to do it. 

Thanks for any suggestions and directions!

-Dave

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090302/819d9d98/attachment.html>

From exarkun at divmod.com  Mon Mar  2 14:22:28 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 2 Mar 2009 16:22:28 -0500
Subject: [Twisted-Python] newbie problem with SMTPClient
In-Reply-To: <044701c99b79$7b7086d0$0500a8c0@yoda>
Message-ID: <20090302212228.12853.348641046.divmod.quotient.16662@henry.divmod.com>

On Mon, 2 Mar 2009 15:57:17 -0500, Dave Britton <dave at davebritton.com> wrote:
>I love the idea of twisted but I think I must have a twisted learning disability, as I have gotten nowhere in what ought to be a simple matter.
>
>I need to send out emails to small groups from my apache server running a python cgi using mod_python, but my hosting service doesn't have a MTA. Instead of learning how to install and configure exim I thought I would use twisted to make a simple mail client. I started with the tutorial example that appears at:

It may be that installing exim is actually a better idea.  In order to get
reliable message deliver, you'll need to handle transient failures.  That
means persisting state over time (as long as several days) and performing
redelivery attempts.  However, if you don't mind losing outgoing messages
when there is a transient failure...

> [snip]
>
>This nicely looks up the right MX record and sends out an email, just what I need. Now I want to expand it to allow me to give it a list of email addresses to send the message to (not just call this same routine multple times, which seems wasteful and slow and doesn't use twisted's power to process the multiple emails in multiple threads), but I'm having terrible trouble figuring out how to do that, which tells me I'm missing a paradigm somewhere, there's something I'm not getting.

There is a reason that just calling the top-level function you've written
once for each email might be wasteful, but I don't think it's the reason
you're thinking.

If you just naively call getMailExchange(host).addCallback(cbMailExchange)
once for each email, then you will get parallel processing.  Almost as soon
as you call most Twisted APIs, they'll start an operation (to be precise,
many of them start it immediately - before they even return - and others
start it when you allow program execution flow to return to the reactor).
So if you call getMailExchange in a loop, each iteration of the loop will
start a new operation and they'll all run in parallel.  That seems like
just what you're after.

The reason this isn't the most efficient solution is that your list of
email addresses might contain two addresses which have the same mail
exchange host.  In this case, you could connect to that mail exchange
once and address your message to both addresses and then deliver the
message body to the mail exchange just once.  This is why getMailTo
returns a list.

So I think your other questions aren't directly relevant to this problem,
but I'll answer them anyway, since they're good questions.

>
>Trouble 1 is figuring out the right way to pass additional parameters to callbacks. Is this right:
>
>Dosomething(that-returns-a-deferred).addCallback(Then-do-the-next-thing, extra-parameter1, extraparameter2)
>
>The function Then-do-the-next-thing() will receive the deferred returned results from Dosomething() as its first argument, and extra-parameter1 and extraparameter2 as the next two. That is as if calling:
>Then-do-the-next-thing(Result-returned-by-Dosomething(),extra-parameter1, extraparameter2). Have I got this correct?

Yes, this is right.

>So, if this is right, then where do I want to put the additional argument that contains the next email address to send, if I iterate through the list and hand each one to the email sending process like this:
>
>elist=['addr1 at domain.com','addr2 at nextdomain.com'...]
>for e in elist:
>.... e2={'mxhost':'','toaddr':e}
>.... getMailExchange(e2).addCallback(cbMailExchange)
>

I'm not sure why you switched to a dictionary here.  Ignoring that, the
biggest potential problem with this code snippet is that it creates a
Deferred (the one returned by getMailExchange) and then drops it on the
floor (albeit after adding a callback).  You'll almost certainly want to
build up a list of Deferreds in cases like this, and then use something
like twisted.internet.defer.gatherResults to find out when they've all
fired.  Otherwise, you don't really know when your list of operations has
completed.

As to where to put extra arguments for tracking which email addresses to
send the message to next, I don't see why you'd want that in this case.
Your for loop iterates over all the addresses, so none of your callbacks
should need to know about any more addresses.  That is to say, by the end
of the for loop, there are no more addresses to which the message needs to
be sent - you've started sending to all of them already.

>In the tutorial, getMailExchange() is passed just the domain of the addressee, and the sending out of the email happens when the callback returns the MX exchange. I changed that to split the email address, so now it returns both the full address and the mx:
>
>def getMailExchange(addr):
>.... host=addr.split('@')[1]
>.... def cbMX(mxRecord):
>.... .... return [addr,str(mxRecord.name)]
>.... return relaymanager.MXCalculator().getMX(host).addCallback(cbMX)
>
>
>At this point I can't figure out how to get the email address passed to wherever it needs to go. And I don't know really where it needs to go... yikes.

Likely nothing in this code cares.  However, the address is going to be
passed to whatever callback is added to the Deferred this function
returns - because you've included it in the list returned by cbMX.

>
>In the tutorial the actual email address is hard coded into the class SMTPTutorialClient(smtp.ESMTPClient) as a class attribute, mailTo. I need to change that to be variable.
>
>How do I get this value (of mailTo) changed for each of the instances created by smtpClientFactory = SMTPClientFactory()? I think I must be confused about the roles of Factories and Protocols.

This is probably simpler than you expected - just override __init__ to
accept any extra data you need, and then save that data as an instance
attribute.

>I can't seem to figure out a way that works to get the email address passed into the system as a variable. Rather than waste people's time by describing my various failures, I thought I'd just ask for suggestions about the right twisted way to do it.

Another API you might want to look at is twisted.mail.smtp.sendmail.  It's
probably rather unfortunate that SMTP client tutorial doesn't cover that
function.

Hope this helps,

Jean-Paul



From ntoper at gmail.com  Mon Mar  2 14:55:26 2009
From: ntoper at gmail.com (Nicolas Toper)
Date: Mon, 2 Mar 2009 22:55:26 +0100
Subject: [Twisted-Python] Bug in twisted.names.client
Message-ID: <fcbb46050903021355n4237054bq2817754fc2435669@mail.gmail.com>

Hi,

It seems the resolv file in  twisted.names.client#maybeParseConfig is never
closed. This creates a     exceptions.IOError: [Errno 24] Too many open
files: '/etc/resolv.conf

(FYI  I am resolving a domain very often in my script).

Am I correct? Would you like me to submit a patch to correct this?

Best,
Nicolas
http://www.m--x--m.net
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090302/8c6e0201/attachment.html>

From exarkun at divmod.com  Mon Mar  2 15:06:16 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 2 Mar 2009 17:06:16 -0500
Subject: [Twisted-Python] Bug in twisted.names.client
In-Reply-To: <fcbb46050903021355n4237054bq2817754fc2435669@mail.gmail.com>
Message-ID: <20090302220616.12853.1999848796.divmod.quotient.16679@henry.divmod.com>

On Mon, 2 Mar 2009 22:55:26 +0100, Nicolas Toper <ntoper at gmail.com> wrote:
>Hi,
>
>It seems the resolv file in  twisted.names.client#maybeParseConfig is never
>closed. This creates a     exceptions.IOError: [Errno 24] Too many open
>files: '/etc/resolv.conf
>
>(FYI  I am resolving a domain very often in my script).
>
>Am I correct? Would you like me to submit a patch to correct this?

It's true that it isn't explicitly closed and fixing this would be nice.
However, unless you're using Jython or PyPy I don't think this is the
cause of your IOError.  As soon as maybeParseConfig returns, CPython will
close the file, so it's not really a resource leak.

Jean-Paul



From ntoper at gmail.com  Mon Mar  2 15:33:57 2009
From: ntoper at gmail.com (Nicolas Toper)
Date: Mon, 2 Mar 2009 23:33:57 +0100
Subject: [Twisted-Python] Bug in twisted.names.client
In-Reply-To: <20090302220616.12853.1999848796.divmod.quotient.16679@henry.divmod.com>
References: <fcbb46050903021355n4237054bq2817754fc2435669@mail.gmail.com>
	<20090302220616.12853.1999848796.divmod.quotient.16679@henry.divmod.com>
Message-ID: <fcbb46050903021433t36946e56le84ac48eccfbb8c4@mail.gmail.com>

Good point, you are right. Thanks :)

 I can still commit a patch: really there just need a finally clause at the
end of maybeParseConfig to close the file AFAI

Best,
Nicolas

On Mon, Mar 2, 2009 at 11:06 PM, Jean-Paul Calderone <exarkun at divmod.com>wrote:

> On Mon, 2 Mar 2009 22:55:26 +0100, Nicolas Toper <ntoper at gmail.com> wrote:
>
>> Hi,
>>
>> It seems the resolv file in  twisted.names.client#maybeParseConfig is
>> never
>> closed. This creates a     exceptions.IOError: [Errno 24] Too many open
>> files: '/etc/resolv.conf
>>
>> (FYI  I am resolving a domain very often in my script).
>>
>> Am I correct? Would you like me to submit a patch to correct this?
>>
>
> It's true that it isn't explicitly closed and fixing this would be nice.
> However, unless you're using Jython or PyPy I don't think this is the
> cause of your IOError.  As soon as maybeParseConfig returns, CPython will
> close the file, so it's not really a resource leak.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090302/e8bb5353/attachment.html>

From exarkun at divmod.com  Mon Mar  2 15:42:59 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 2 Mar 2009 17:42:59 -0500
Subject: [Twisted-Python] Bug in twisted.names.client
In-Reply-To: <fcbb46050903021433t36946e56le84ac48eccfbb8c4@mail.gmail.com>
Message-ID: <20090302224259.12853.1827211656.divmod.quotient.16696@henry.divmod.com>

On Mon, 2 Mar 2009 23:33:57 +0100, Nicolas Toper <ntoper at gmail.com> wrote:
>Good point, you are right. Thanks :)
>
> I can still commit a patch: really there just need a finally clause at the
>end of maybeParseConfig to close the file AFAI

A patch (with unit test :) would be quite welcome.  Please open a ticket
at http://twistedmatrix.com/trac/ (you'll need to register an account
first) and attach it there.

Jean-Paul



From glyph at divmod.com  Mon Mar  2 22:41:58 2009
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 03 Mar 2009 05:41:58 -0000
Subject: [Twisted-Python] Twisted developers: please donate your time!
In-Reply-To: <1236002880.30721.36.camel@pintsize>
References: <1235412728.2733.2.camel@pintsize>
	<aa0dfd860902240025h464a286ap7ddbbd92937d0381@mail.gmail.com>
	<1236002880.30721.36.camel@pintsize>
Message-ID: <20090303054158.12555.759735924.divmod.xquotient.5113@weber.divmod.com>


On 2 Mar, 02:08 pm, itamar at itamarst.org wrote:
>On Tue, 2009-02-24 at 21:25 +1300, Michael Hudson wrote:
>>2009/2/24 Itamar Shtull-Trauring <itamar at itamarst.org>:
>> > As part of the TSF's fundraising efforts, we are trying to get 
>>upfront
>> > donations of time you will spend developing Twisted. It will then 
>>get
>> > matched by a donor, if we are successful in getting this grant. So 
>>if
>> > you're planning on working on Twisted anyway this year, your work 
>>will
>> > count twice as much!
>> >
>> > So, if you're interested, please reply, saying something like "I 
>>will
>> > spend two weeks working on Gopher support over the next year."
>>
>>I don't entirely understand, but I will commit to spending the
>>equivalent of two working weeks as a general review monkey over the
>>next year.  Is that the sort of thing you wanted to hear?
>
>Yes - thanks to you and all thee rest of the people who are
>volunteering! Anyone else willing to step up?

Sorry for the delay - I started writing a program to calculate my 
minimum probable contribution over the next year, and got stuck on that 
:).

In addition to attending most of the sprints, which add up to roughly 
three weeks of work (including the PyCon sprint), I plan to spend at 
least the equivalent of one week on general reviews and one week on new 
development on the coming year.

So let's call that 5 weeks of work.



From petshmidt at googlemail.com  Tue Mar  3 05:17:48 2009
From: petshmidt at googlemail.com (Pet)
Date: Tue, 3 Mar 2009 13:17:48 +0100
Subject: [Twisted-Python] util.quote deprecated
In-Reply-To: <b460e9630903030414s208fc745odf54d8a3f611ab70@mail.gmail.com>
References: <b460e9630903030414s208fc745odf54d8a3f611ab70@mail.gmail.com>
Message-ID: <b460e9630903030417x23d50e2epe617faafcf41c339@mail.gmail.com>

Hi,

what is a proper way to escape user input in database query strings?
I've used quote from twisted.enterprise.util, but it is deprecated now.
Is there any other module for this purpose?

Thanks, Pet
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090303/db6a63ae/attachment.html>

From amauryfa at gmail.com  Tue Mar  3 05:50:47 2009
From: amauryfa at gmail.com (Amaury Forgeot d'Arc)
Date: Tue, 3 Mar 2009 13:50:47 +0100
Subject: [Twisted-Python] util.quote deprecated
In-Reply-To: <b460e9630903030417x23d50e2epe617faafcf41c339@mail.gmail.com>
References: <b460e9630903030414s208fc745odf54d8a3f611ab70@mail.gmail.com>
	<b460e9630903030417x23d50e2epe617faafcf41c339@mail.gmail.com>
Message-ID: <e27efe130903030450x33a1bdi1fdec1d05229fed6@mail.gmail.com>

On Tue, Mar 3, 2009 at 13:17, Pet <petshmidt at googlemail.com> wrote:
> Hi,
>
> what is a proper way to escape user input in database query strings?
> I've used quote from twisted.enterprise.util, but it is deprecated now.
> Is there any other module for this purpose?

I can't do better than quote the sqlite documentation. I Hope this helps!
http://docs.python.org/library/sqlite3.html

"""
Usually your SQL operations will need to use values from Python
variables. You shouldn’t assemble your query using Python’s string
operations because doing so is insecure; it makes your program
vulnerable to an SQL injection attack.

Instead, use the DB-API’s parameter substitution. Put ? as a
placeholder wherever you want to use a value, and then provide a tuple
of values as the second argument to the cursor’s execute() method.
(Other database modules may use a different placeholder, such as %s or
:1.) For example:

# Never do this -- insecure!
symbol = 'IBM'
c.execute("... where symbol = '%s'" % symbol)

# Do this instead
t = (symbol,)
c.execute('select * from stocks where symbol=?', t)

# Larger example
for t in [('2006-03-28', 'BUY', 'IBM', 1000, 45.00),
          ('2006-04-05', 'BUY', 'MSOFT', 1000, 72.00),
          ('2006-04-06', 'SELL', 'IBM', 500, 53.00),
         ]:
    c.execute('insert into stocks values (?,?,?,?,?)', t)
"""

-- 
Amaury Forgeot d'Arc



From exarkun at divmod.com  Tue Mar  3 05:56:53 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 3 Mar 2009 07:56:53 -0500
Subject: [Twisted-Python] util.quote deprecated
In-Reply-To: <b460e9630903030417x23d50e2epe617faafcf41c339@mail.gmail.com>
Message-ID: <20090303125653.12853.1308016385.divmod.quotient.17032@henry.divmod.com>

On Tue, 3 Mar 2009 13:17:48 +0100, Pet <petshmidt at googlemail.com> wrote:
>Hi,
>
>what is a proper way to escape user input in database query strings?
>I've used quote from twisted.enterprise.util, but it is deprecated now.
>Is there any other module for this purpose?

The proper way is with "bind parameters".  This keeps SQL separate from
data and removes the entire category of bugs due to misquoting.  The way
to use bind parameters is to pass the SQL string as a separate argument
from the SQL data.  Using DB-API 2.0, this means something like:

    cursor.execute("SELECT foo FROM bar WHERE baz = ?", (3,))

Using ADBAPI, it means something very similar:

    connpool.runQuery("SELECT foo FROM bar WHERE baz = ?", (3,))

Different database adapters use different syntaxes for the "?" part.  The
`paramstyle´ attribute of the DB-API 2.0 module tells you what syntax a
particular module uses.  See the DB-API 2.0 PEP
(< http://www.python.org/dev/peps/pep-0249/>) for details.

Jean-Paul



From screwtape at froup.com  Tue Mar  3 06:04:04 2009
From: screwtape at froup.com (Tim Allen)
Date: Wed, 4 Mar 2009 00:04:04 +1100
Subject: [Twisted-Python] util.quote deprecated
In-Reply-To: <b460e9630903030417x23d50e2epe617faafcf41c339@mail.gmail.com>
References: <b460e9630903030414s208fc745odf54d8a3f611ab70@mail.gmail.com>
	<b460e9630903030417x23d50e2epe617faafcf41c339@mail.gmail.com>
Message-ID: <20090303130404.GO3737@thristian.org>

On Tue, Mar 03, 2009 at 01:17:48PM +0100, Pet wrote:
> what is a proper way to escape user input in database query strings?
> I've used quote from twisted.enterprise.util, but it is deprecated now.
> Is there any other module for this purpose?

The correct way to escape user input is not to do it at all, but rather
to leave it up to the DB-API module you're using:

    from twisted.enterprise.adbapi import ConnectionPool

    pool = ConnectionPool("psycopg2")
    d = pool.runQuery("""
	SELECT *
	FROM students
	WHERE name = %s
	""", "Robert '); DROP TABLE students;--")

Note that although I've used "%s" in the query, this is not normal
Python string-formatting, the "%s" is just tells the DB-API module I'm
using (in this case, psycopg2 for PostgreSQL) to quote one of the extra
parameters and insert in that spot. Look up "paramstyle" in the DB-API
spec[1] and the documentation for the DB-API module you're using for
more details.

[1] http://www.python.org/dev/peps/pep-0249/



From petshmidt at googlemail.com  Tue Mar  3 06:49:37 2009
From: petshmidt at googlemail.com (Pet)
Date: Tue, 3 Mar 2009 14:49:37 +0100
Subject: [Twisted-Python] util.quote deprecated
In-Reply-To: <20090303130404.GO3737@thristian.org>
References: <b460e9630903030414s208fc745odf54d8a3f611ab70@mail.gmail.com>
	<b460e9630903030417x23d50e2epe617faafcf41c339@mail.gmail.com>
	<20090303130404.GO3737@thristian.org>
Message-ID: <b460e9630903030549g2b8b014enbe73d373684a6c0b@mail.gmail.com>

On Tue, Mar 3, 2009 at 2:04 PM, Tim Allen <screwtape at froup.com> wrote:

> On Tue, Mar 03, 2009 at 01:17:48PM +0100, Pet wrote:
> > what is a proper way to escape user input in database query strings?
> > I've used quote from twisted.enterprise.util, but it is deprecated now.
> > Is there any other module for this purpose?
>
> The correct way to escape user input is not to do it at all, but rather
> to leave it up to the DB-API module you're using:
>
>    from twisted.enterprise.adbapi import ConnectionPool
>
>    pool = ConnectionPool("psycopg2")
>    d = pool.runQuery("""
>        SELECT *
>        FROM students
>        WHERE name = %s
>        """, "Robert '); DROP TABLE students;--")
>
> Note that although I've used "%s" in the query, this is not normal
> Python string-formatting, the "%s" is just tells the DB-API module I'm
> using (in this case, psycopg2 for PostgreSQL) to quote one of the extra
> parameters and insert in that spot. Look up "paramstyle" in the DB-API
> spec[1] and the documentation for the DB-API module you're using for
> more details.
>
> [1] http://www.python.org/dev/peps/pep-0249/
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


Thanks for all your answers! It works fine in that way. But what, if I
compose my query? For example:

def getData(self, type=''):
    id = 1
    if type:
        str = " AND mytype = %s " % type
    str = ''
    query = "SELECT * FROM table WHERE id = %s %s " % (id,str)
    cur.execute(query)

I mean, str part is not always there and I need escape it only if type is
passed to function

Thanks, Pet
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090303/55f5b547/attachment.html>

From johnaherne at rocs.co.uk  Tue Mar  3 09:39:46 2009
From: johnaherne at rocs.co.uk (John Aherne)
Date: Tue, 3 Mar 2009 16:39:46 +0000
Subject: [Twisted-Python] too many file descriptors in select
Message-ID: <faf2d7810903030839k2f869674n5746f53722373d6f@mail.gmail.com>

I have started to get this message coming up on a fairly regular basis now.

I have an application that is very simple and has run by and large without
problem for about 7 months. But over the pas 4 - 6 weeks has started to
produce this error 'too many file descriptors in select'. The application
basically falls over at this point, since it can't service any more
requests.

I am running on Windows XP sp2, python 2.4.4, twisted 2.5.

The application consists of about 150+ vehicles sending back gps tracks
every 20 seconds. We collect these, log them, store them in a database and
then update a current status. So nothing very elaborate.

I have been through the archives to search for some help and have found some
discussion of the problem going back to 2004, but nothing that looks like
something I could get a handle on to solving my problem. In fact most of the
information seems rather inconclusive especially with regard to Windows.

If there is a 'so-called solution' with an update or some sort of workround-
that would be great. Or is it a practical proposition to attempt to trap the
error myself and potentially restart the service or the whole application.
Or is there a different and better path to take.

Of course I am not sure how I would get in to pick up the exception and deal
with it. So if that is a starter I wouldn't object to some help on that.

Anyway thanks for any feedback.

John Aherne
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090303/fe5f68e1/attachment.html>

From itamar at itamarst.org  Tue Mar  3 10:24:24 2009
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 03 Mar 2009 12:24:24 -0500
Subject: [Twisted-Python] too many file descriptors in select
In-Reply-To: <faf2d7810903030839k2f869674n5746f53722373d6f@mail.gmail.com>
References: <faf2d7810903030839k2f869674n5746f53722373d6f@mail.gmail.com>
Message-ID: <49AD67C8.9030007@itamarst.org>

John Aherne wrote:
> I have started to get this message coming up on a fairly regular basis 
> now.
>
> I have an application that is very simple and has run by and large 
> without problem for about 7 months. But over the pas 4 - 6 weeks has 
> started to produce this error 'too many file descriptors in select'. 
> The application basically falls over at this point, since it can't 
> service any more requests.
Assuming that you've made sure you aren't leaking any connections, you 
are still faced with the problem of that the select module on Windows is 
limited to 512 file descriptors. Your options:

1. Switch to Linux, where you can use other reactors with a much higher 
limit, e.g. epoll.
2. Use the IOCP reactor on Windows, which isn't as well tested and is 
missing some features, in particular SSL support.
3. Recompile the select module on Windows with a higher limit; basically 
it's some C constant you redefine, it's probably right at the top of the 
file. You just get the Python tarball, and rebuild the appropriate 
module (or everything and just extract the appropriate PYD).

-Itamar, still living the voice-recognition life




From paulswartz at gmail.com  Tue Mar  3 12:05:25 2009
From: paulswartz at gmail.com (Paul Swartz)
Date: Tue, 3 Mar 2009 14:05:25 -0500
Subject: [Twisted-Python] Twisted developers: please donate your time!
In-Reply-To: <20090303054158.12555.759735924.divmod.xquotient.5113@weber.divmod.com>
References: <1235412728.2733.2.camel@pintsize>
	<aa0dfd860902240025h464a286ap7ddbbd92937d0381@mail.gmail.com>
	<1236002880.30721.36.camel@pintsize>
	<20090303054158.12555.759735924.divmod.xquotient.5113@weber.divmod.com>
Message-ID: <324cfb540903031105l45b6a7daq30ebbb471e31ce88@mail.gmail.com>

On Tue, Mar 3, 2009 at 12:41 AM,  <glyph at divmod.com> wrote:
>
> On 2 Mar, 02:08 pm, itamar at itamarst.org wrote:
>>
>> On Tue, 2009-02-24 at 21:25 +1300, Michael Hudson wrote:
>>>
>>> 2009/2/24 Itamar Shtull-Trauring <itamar at itamarst.org>:
>>> > As part of the TSF's fundraising efforts, we are trying to get upfront
>>> > donations of time you will spend developing Twisted. It will then get
>>> > matched by a donor, if we are successful in getting this grant. So if
>>> > you're planning on working on Twisted anyway this year, your work will
>>> > count twice as much!
>>> >
>>> > So, if you're interested, please reply, saying something like "I will
>>> > spend two weeks working on Gopher support over the next year."
>>>
>>> I don't entirely understand, but I will commit to spending the
>>> equivalent of two working weeks as a general review monkey over the
>>> next year.  Is that the sort of thing you wanted to hear?
>>
>> Yes - thanks to you and all thee rest of the people who are
>> volunteering! Anyone else willing to step up?

I will commit to spending 2 weeks on Conch in the coming year.

-p
-- 
Paul Swartz
paulswartz at gmail dot com
http://paulswartz.net/
AIM: z3penguin



From johnaherne at rocs.co.uk  Tue Mar  3 14:43:00 2009
From: johnaherne at rocs.co.uk (John Aherne)
Date: Tue, 3 Mar 2009 21:43:00 +0000
Subject: [Twisted-Python] too many file descriptors in select
In-Reply-To: <49AD67C8.9030007@itamarst.org>
References: <faf2d7810903030839k2f869674n5746f53722373d6f@mail.gmail.com>
	<49AD67C8.9030007@itamarst.org>
Message-ID: <faf2d7810903031343q6732015ew7cfca15bbbc5185b@mail.gmail.com>

Thanks for the information. Looks pretty conclusive.
Thinking about it, I reckon I must be leaking connections. So I'll go and
look.

Thanks again

John Aherne


On Tue, Mar 3, 2009 at 5:24 PM, Itamar Shtull-Trauring
<itamar at itamarst.org>wrote:

> John Aherne wrote:
>
>> I have started to get this message coming up on a fairly regular basis
>> now.
>>
>> I have an application that is very simple and has run by and large without
>> problem for about 7 months. But over the pas 4 - 6 weeks has started to
>> produce this error 'too many file descriptors in select'. The application
>> basically falls over at this point, since it can't service any more
>> requests.
>>
> Assuming that you've made sure you aren't leaking any connections, you are
> still faced with the problem of that the select module on Windows is limited
> to 512 file descriptors. Your options:
>
> 1. Switch to Linux, where you can use other reactors with a much higher
> limit, e.g. epoll.
> 2. Use the IOCP reactor on Windows, which isn't as well tested and is
> missing some features, in particular SSL support.
> 3. Recompile the select module on Windows with a higher limit; basically
> it's some C constant you redefine, it's probably right at the top of the
> file. You just get the Python tarball, and rebuild the appropriate module
> (or everything and just extract the appropriate PYD).
>
> -Itamar, still living the voice-recognition life
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090303/56d6f724/attachment.html>

From eburus at gmail.com  Wed Mar  4 01:37:00 2009
From: eburus at gmail.com (Burus)
Date: Wed, 4 Mar 2009 11:37:00 +0300
Subject: [Twisted-Python] Twisted developers: please donate your time!
In-Reply-To: <324cfb540903031105l45b6a7daq30ebbb471e31ce88@mail.gmail.com>
References: <1235412728.2733.2.camel@pintsize>
	<aa0dfd860902240025h464a286ap7ddbbd92937d0381@mail.gmail.com>
	<1236002880.30721.36.camel@pintsize>
	<20090303054158.12555.759735924.divmod.xquotient.5113@weber.divmod.com>
	<324cfb540903031105l45b6a7daq30ebbb471e31ce88@mail.gmail.com>
Message-ID: <f564d0090903040037w290cbfb6q144c784b4b28bc33@mail.gmail.com>

I will spend about two weeks to update code and english docs for the
http://fats.burus.org projectand about 4 weeks to contribute abstract
database synchronizer engine (dbsync) based on the twisted for the
twisted-python community under the MIT license. I have negotiations with our
organization(government media company in the Russia) to make it possible.

On Tue, Mar 3, 2009 at 10:05 PM, Paul Swartz <paulswartz at gmail.com> wrote:

> On Tue, Mar 3, 2009 at 12:41 AM,  <glyph at divmod.com> wrote:
> >
> > On 2 Mar, 02:08 pm, itamar at itamarst.org wrote:
> >>
> >> On Tue, 2009-02-24 at 21:25 +1300, Michael Hudson wrote:
> >>>
> >>> 2009/2/24 Itamar Shtull-Trauring <itamar at itamarst.org>:
> >>> > As part of the TSF's fundraising efforts, we are trying to get
> upfront
> >>> > donations of time you will spend developing Twisted. It will then get
> >>> > matched by a donor, if we are successful in getting this grant. So if
> >>> > you're planning on working on Twisted anyway this year, your work
> will
> >>> > count twice as much!
> >>> >
> >>> > So, if you're interested, please reply, saying something like "I will
> >>> > spend two weeks working on Gopher support over the next year."
> >>>
> >>> I don't entirely understand, but I will commit to spending the
> >>> equivalent of two working weeks as a general review monkey over the
> >>> next year.  Is that the sort of thing you wanted to hear?
> >>
> >> Yes - thanks to you and all thee rest of the people who are
> >> volunteering! Anyone else willing to step up?
>
> I will commit to spending 2 weeks on Conch in the coming year.
>
> -p
> --
> Paul Swartz
> paulswartz at gmail dot com
> http://paulswartz.net/
> AIM: z3penguin
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090304/4a3eb95b/attachment.html>

From newptcai at gmail.com  Wed Mar  4 04:28:24 2009
From: newptcai at gmail.com (Peter Cai)
Date: Wed, 4 Mar 2009 19:28:24 +0800
Subject: [Twisted-Python] Using sqlalchemy in twisted.
Message-ID: <befee6d80903040328y44051147ja2fc369423a98c84@mail.gmail.com>

Hi, all

I am using sqlalchemy in twisted in my project in the way below.
Defer any database operation so the twisted's main thread won't be
blocked.

And I use scoped_session, so that sessions won't have to be created
again and again.

======================================
class Database()
    def __init__(self, conn_str):
        self.conn_str = conn_str
        self.engine = create_engine(self.conn_str, echo=False)
        self.Session = scoped_session(sessionmaker(bind = self.engine,
             expire_on_commit=False))

    def getObjectById(self, klass, id):
        return threads.deferToThread(self._getObjectById, klass, id)

    def _getObjectById(self, klass, id):
        sess = self.Session()
        return sess.query(klass).get(id)
======================================

The code doesn't work.   When I limit the thread numbers to 1

    reactor.suggestThreadPoolSize(1)

Everything goes fine.  Other wise the server would be blocked and must
be killed by "kill 9 ...".

The result conflicts with my understanding of sqlalchemy.  Since I
don't share any object between threads, there should be no problem!

Ah....  It always have risk to use something you haven't tried
before ....
I think I have no choice but always set thread pool size to 1 ...

-- 
look to the things around you,the immediate world around you, if you are
alive,it will mean something to you ——Paul Strand
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090304/45c5639b/attachment.html>

From rgacote at AppropriateSolutions.com  Wed Mar  4 06:32:26 2009
From: rgacote at AppropriateSolutions.com (Raymond Cote)
Date: Wed, 04 Mar 2009 08:32:26 -0500
Subject: [Twisted-Python] Twisted developers: please donate your time!
In-Reply-To: <1236002880.30721.36.camel@pintsize>
References: <1235412728.2733.2.camel@pintsize>	<aa0dfd860902240025h464a286ap7ddbbd92937d0381@mail.gmail.com>
	<1236002880.30721.36.camel@pintsize>
Message-ID: <49AE82EA.5000907@AppropriateSolutions.com>

Itamar Shtull-Trauring wrote:
> Yes - thanks to you and all thee rest of the people who are
> volunteering! Anyone else willing to step up?
>   
I'll commit to one week to create and document another example for the 
web site.




From hasham_james_007 at yahoo.com  Wed Mar  4 07:39:59 2009
From: hasham_james_007 at yahoo.com (khawar hasham)
Date: Wed, 4 Mar 2009 06:39:59 -0800 (PST)
Subject: [Twisted-Python] how to pass on the connection failed or connection
	lost error
Message-ID: <32319.96900.qm@web53508.mail.re2.yahoo.com>

Hi

let me first explain the application that I am developing. I have an application that will use the twisted part as a plugin. this twisted part will act as server and as client both. 
my application call the plugin method to send data to server module using connectTCP. now the problem is I can not pass on the connection failed exception to my calling application. 

To explain it further, here is the dummy code

class MyReactor(threading.Thread):

        def __init__(self):

              threading.Thread.__init__(self)

        def run(self):

              reactor.run(installSignalHandlers=0)



class MyFactory(ClientFactory):

         def __init__(self):

              self.msg = None



         def setMsg(self, msg):

               self.msg = msg



         def connectionFailed(self, connector, reason):

               #here i need to send the exception back to the user  


class Plugin:
         def __init__(self):
              self.running = False

         def send(self, msg):
               reactor.callFromThread(self.clientsend, msg)
         def clientsend(self, msg):
               myfactory = MyFactory()
               myfactory.setMsg(msg)
               reactor.connectTCP ('localhost',9999)
               if( not self.running):
                  mr = MyReactor()

                  mr.start()
                  self.running = True

         def startServer(self):
               reactor.listenTCP(9999,ServerFactory())
               if( not self.running):
                  mr = MyReactor()
                  mr.start()
                  self.running = True 

class PluginTest:
        def __init__(self):
             self.plugin = Plugin() 
        def start(self):
              self.plugin.startServer()
        def send(self,msg):
              try:
                  self.plugin.send(msg)
              except:
                     #I want to print send error here
                     # error could be connection fail

ptest = PluginTest()
#I m not starting the server so that I could get the connectionfail error
ptest.send('hi')

Can you suggest me any work around to get the exception in the PluginUser.send method



      
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090304/a60e93a2/attachment.html>

From exarkun at divmod.com  Wed Mar  4 07:59:42 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 4 Mar 2009 09:59:42 -0500
Subject: [Twisted-Python] how to pass on the connection failed or
	connection lost error
In-Reply-To: <32319.96900.qm@web53508.mail.re2.yahoo.com>
Message-ID: <20090304145942.12853.42253504.divmod.quotient.17917@henry.divmod.com>

On Wed, 4 Mar 2009 06:39:59 -0800 (PST), khawar hasham <hasham_james_007 at yahoo.com> wrote:
>Hi
>
>let me first explain the application that I am developing. I have an application that will use the twisted part as a plugin. this twisted part will act as server and as client both.
>my application call the plugin method to send data to server module using connectTCP. now the problem is I can not pass on the connection failed exception to my calling application.

Since you're running the reactor in one thread and the rest of your
application in another thread, your question is basically one of message
passing.  You've already found reactor.callFromThread which is good; I
think you just want the slightly more featureful version, available in
twisted.internet.threads, blockingCallFromThread.  This is implemented
in terms of callFromThread, but additionally allows the caller to get
the result of the function being called - including waiting on a Deferred
if the function being called returns one.  If you switch to this, then
you only need to make Plugin.clientsend return a Deferred which eventually
fires with a result or a Failure.

Jean-Paul



From andrewfr_ice at yahoo.com  Wed Mar  4 10:34:54 2009
From: andrewfr_ice at yahoo.com (Andrew Francis)
Date: Wed, 4 Mar 2009 09:34:54 -0800 (PST)
Subject: [Twisted-Python] Re: Twisted developers: please donate your time!
Message-ID: <877624.83683.qm@web34201.mail.mud.yahoo.com>


Hi Itamar and Colleages:


>As part of the TSF's fundraising efforts, we are trying to get upfront
>donations of time you will spend developing Twisted. It will then get
>matched by a donor, if we are successful in getting this grant. So if
>you're planning on working on Twisted anyway this year, your work will
>count twice as much!

I would happy to donate some time to developing Twisted. However  since the only Twisted code I have really looked at is the reactor, I am not sure where I can contribute. Off-hand documentation is a safe bet. Perhaps you provide suggestions and I can figure out whether I can do it, when, and how much time I can devote?

Cheers,
Andrew




      



From exarkun at divmod.com  Wed Mar  4 11:04:21 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 4 Mar 2009 13:04:21 -0500
Subject: [Twisted-Python] Re: Twisted developers: please donate your time!
In-Reply-To: <877624.83683.qm@web34201.mail.mud.yahoo.com>
Message-ID: <20090304180421.12853.1593529253.divmod.quotient.18031@henry.divmod.com>

On Wed, 4 Mar 2009 09:34:54 -0800 (PST), Andrew Francis <andrewfr_ice at yahoo.com> wrote:
>
>Hi Itamar and Colleages:
>
>>As part of the TSF's fundraising efforts, we are trying to get upfront
>>donations of time you will spend developing Twisted. It will then get
>>matched by a donor, if we are successful in getting this grant. So if
>>you're planning on working on Twisted anyway this year, your work will
>>count twice as much!
>
>I would happy to donate some time to developing Twisted. However  since the only Twisted code I have really looked at is the reactor, I am not sure where I can contribute. Off-hand documentation is a safe bet. Perhaps you provide suggestions and I can figure out whether I can do it, when, and how much time I can devote?

http://twistedmatrix.com/trac/query?status=new&status=assigned&status=reopened&keywords=~documentation&order=priority shows all of the open tickets with the "documentation" keyword.  So there's a lot to choose from, many are about the reactor.  There's also one, #1009, about deferredGenerator/inlineCallbacks.  I think you're somewhat familiar with those?

It's also certainly the case that there are tickets open for reactor problems, so if you feel comfortable with that part of Twisted, there's plenty to contribute to.

Jean-Paul



From dialtone at gmail.com  Wed Mar  4 12:04:58 2009
From: dialtone at gmail.com (Valentino Volonghi)
Date: Wed, 4 Mar 2009 11:04:58 -0800
Subject: [Twisted-Python] Using sqlalchemy in twisted.
In-Reply-To: <befee6d80903040328y44051147ja2fc369423a98c84@mail.gmail.com>
References: <befee6d80903040328y44051147ja2fc369423a98c84@mail.gmail.com>
Message-ID: <F4366C21-62E0-479F-98DF-A13F77BFCF41@gmail.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Mar 4, 2009, at 3:28 AM, Peter Cai wrote:

> The code doesn't work.   When I limit the thread numbers to 1
>
>    reactor.suggestThreadPoolSize(1)
>
> Everything goes fine.  Other wise the server would be blocked and must
> be killed by "kill 9 ...".
>
> The result conflicts with my understanding of sqlalchemy.  Since I
> don't share any object between threads, there should be no problem!

I'm pretty sure you can't say this with full certainty and actually  
you are
just wrong based on the code you showed. deferToThread doesn't use
the same thread every time you call it, there's absolutely no guarantee
in that and sqlalchemy keeps state around in that thread related to that
object it returned. If you want to do any operations you need either to
detach the object from the session before returning it and do any  
modification
on the same object in another thread after reattaching it (pretty  
cumbersome).

Or write your own threadpool that gives names to threads so that you can
have a guarantee that you always call the same thread when working with
a bunch of objects.

Nonetheless though sqlalchemy is a huge project and I'm pretty sure it  
has
some deadlocks and race conditions around which means that even taking
care of these issues you'll have other problems when dealing with the  
orm.

If you want to use sqlalchemy don't use its orm but just the query  
builder,
it's the only sane way to integrate with twisted. Which anyway IMHO is  
the
best way to use it anyway because it uses a lot less memory since it  
doesn't
have to always cache objects because you control everything and can make
that call when you really need it.

> Ah....  It always have risk to use something you haven't tried
> before ....
> I think I have no choice but always set thread pool size to 1 ...


Not entirely true.

- --
Valentino Volonghi aka Dialtone
Now running MacOS X 10.5
Home Page: http://www.twisted.it
http://www.adroll.com

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.9 (Darwin)

iEYEARECAAYFAkmu0NoACgkQ9Llz28widGXBawCg32svBsLqsIRLzvzOThgR4sA0
5UkAoIgNfyUDPl9c0nwSud0sem3aKjz5
=2XIX
-----END PGP SIGNATURE-----



From cfoster at oda.state.or.us  Wed Mar  4 12:15:00 2009
From: cfoster at oda.state.or.us (Chris Foster)
Date: Wed, 4 Mar 2009 11:15:00 -0800
Subject: [Twisted-Python] Using sqlalchemy in twisted.
In-Reply-To: <F4366C21-62E0-479F-98DF-A13F77BFCF41@gmail.com>
References: <befee6d80903040328y44051147ja2fc369423a98c84@mail.gmail.com>
	<F4366C21-62E0-479F-98DF-A13F77BFCF41@gmail.com>
Message-ID: <1E93D9FE-316A-460B-8069-4865A53D52F8@oda.state.or.us>

I think SQLAlchemy's ORM might work fine with Twisted.  Check out http://foss.eepatents.com/sAsync/ 
  .  sAsync doesn't appear to be widely used, but I got the examples  
to run with some minor changes to the sqlite connection.  I'm hoping  
to try something useful in the next week or two.

On Mar 4, 2009, at 11:04 AM, Valentino Volonghi wrote:

> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
>
> On Mar 4, 2009, at 3:28 AM, Peter Cai wrote:
>
>> The code doesn't work.   When I limit the thread numbers to 1
>>
>>   reactor.suggestThreadPoolSize(1)
>>
>> Everything goes fine.  Other wise the server would be blocked and  
>> must
>> be killed by "kill 9 ...".
>>
>> The result conflicts with my understanding of sqlalchemy.  Since I
>> don't share any object between threads, there should be no problem!
>
> I'm pretty sure you can't say this with full certainty and actually  
> you are
> just wrong based on the code you showed. deferToThread doesn't use
> the same thread every time you call it, there's absolutely no  
> guarantee
> in that and sqlalchemy keeps state around in that thread related to  
> that
> object it returned. If you want to do any operations you need either  
> to
> detach the object from the session before returning it and do any  
> modification
> on the same object in another thread after reattaching it (pretty  
> cumbersome).
>
> Or write your own threadpool that gives names to threads so that you  
> can
> have a guarantee that you always call the same thread when working  
> with
> a bunch of objects.
>
> Nonetheless though sqlalchemy is a huge project and I'm pretty sure  
> it has
> some deadlocks and race conditions around which means that even taking
> care of these issues you'll have other problems when dealing with  
> the orm.
>
> If you want to use sqlalchemy don't use its orm but just the query  
> builder,
> it's the only sane way to integrate with twisted. Which anyway IMHO  
> is the
> best way to use it anyway because it uses a lot less memory since it  
> doesn't
> have to always cache objects because you control everything and can  
> make
> that call when you really need it.
>
>> Ah....  It always have risk to use something you haven't tried
>> before ....
>> I think I have no choice but always set thread pool size to 1 ...
>
>
> Not entirely true.
>
> - --
> Valentino Volonghi aka Dialtone
> Now running MacOS X 10.5
> Home Page: http://www.twisted.it
> http://www.adroll.com
>
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.4.9 (Darwin)
>
> iEYEARECAAYFAkmu0NoACgkQ9Llz28widGXBawCg32svBsLqsIRLzvzOThgR4sA0
> 5UkAoIgNfyUDPl9c0nwSud0sem3aKjz5
> =2XIX
> -----END PGP SIGNATURE-----
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From dialtone at gmail.com  Wed Mar  4 13:29:30 2009
From: dialtone at gmail.com (Valentino Volonghi)
Date: Wed, 4 Mar 2009 12:29:30 -0800
Subject: [Twisted-Python] Using sqlalchemy in twisted.
In-Reply-To: <1E93D9FE-316A-460B-8069-4865A53D52F8@oda.state.or.us>
References: <befee6d80903040328y44051147ja2fc369423a98c84@mail.gmail.com>
	<F4366C21-62E0-479F-98DF-A13F77BFCF41@gmail.com>
	<1E93D9FE-316A-460B-8069-4865A53D52F8@oda.state.or.us>
Message-ID: <E3E183CF-9B95-45ED-8699-7DA3870C3ED4@gmail.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Mar 4, 2009, at 11:15 AM, Chris Foster wrote:

> I think SQLAlchemy's ORM might work fine with Twisted.  Check out http://foss.eepatents.com/sAsync/ 
>  .  sAsync doesn't appear to be widely used, but I got the examples  
> to run with some minor changes to the sqlite connection.  I'm hoping  
> to try something useful in the next week or two.


sAsync repository hasn't changed since about 1 or 2 years ago. Now  
sqlalchemy 0.5
changed quite a bit of the internals and so on. Notice however that  
the tests for
sAsync use sqlite that is limited essentially to 1 connection, which  
goes back to
your original discontent.

I tried to integrate sqlalchemy ORM in the past and it never worked  
right because
the code in the objects didn't know that it was dealing with twisted  
and because
sqlalchemy is mainly used in a single thread, it's thread safe but  
that doesn't mean
that you can share objects between threads.

- --
Valentino Volonghi aka Dialtone
Now running MacOS X 10.5
Home Page: http://www.twisted.it
http://www.adroll.com

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.9 (Darwin)

iEYEARECAAYFAkmu5KoACgkQ9Llz28widGWBWwCglXIKPUFaGbk5tI9XmtrH8lH+
7woAnjrWWWEj2P78szZbNyLzSx0kgz4B
=9uZo
-----END PGP SIGNATURE-----



From florent.aide at gmail.com  Wed Mar  4 15:22:41 2009
From: florent.aide at gmail.com (Florent Aide)
Date: Wed, 4 Mar 2009 23:22:41 +0100
Subject: [Twisted-Python] Twisted developers: please donate your time!
In-Reply-To: <49AEFEB0.1090900@gmail.com>
References: <1235412728.2733.2.camel@pintsize> <49AEFEB0.1090900@gmail.com>
Message-ID: <628981a60903041422x49b6ecdbm4641172ae2079bb4@mail.gmail.com>

On Wed, Mar 4, 2009 at 11:20 PM, Florent Aide <florent.aide at gmail.com> wrote:
> Itamar Shtull-Trauring a écrit :
>
> So, if you're interested, please reply, saying something like "I will
> spend two weeks working on Gopher support over the next year."
>
>
> Hi all,
>
> I have worked in the last days on a demo application using twisted and
> evolved from the simple pop3 + smtp exemple found in the Twisted book to add
> a web interface (minimalistic but works) in nevow and SSL support + and
> SQLAlchemy based SQL backend for passwords.
>
> I think it would be nice to write some complete tutorial based on this
> example (and I'm ready to write it of course). But I'd like some
> minimalistic review from a twisted master so that I don't tell too much
> stupid things and don't spread bad practices.

Sorry the mail went out before I could finish it...

here is the URL of the project:
http://bitbucket.org/faide/guineapy/overview/

Regards,
Florent Aide.



From clemesha at gmail.com  Wed Mar  4 15:47:24 2009
From: clemesha at gmail.com (Alex Clemesha)
Date: Wed, 4 Mar 2009 14:47:24 -0800
Subject: [Twisted-Python] Twisted developers: please donate your time!
In-Reply-To: <628981a60903041422x49b6ecdbm4641172ae2079bb4@mail.gmail.com>
References: <1235412728.2733.2.camel@pintsize> <49AEFEB0.1090900@gmail.com>
	<628981a60903041422x49b6ecdbm4641172ae2079bb4@mail.gmail.com>
Message-ID: <d272f0690903041447u56f8743ega564e38647e8e530@mail.gmail.com>

On Wed, Mar 4, 2009 at 2:22 PM, Florent Aide <florent.aide at gmail.com> wrote:
> On Wed, Mar 4, 2009 at 11:20 PM, Florent Aide <florent.aide at gmail.com> wrote:
>> Itamar Shtull-Trauring a écrit :
>>
>> So, if you're interested, please reply, saying something like "I will
>> spend two weeks working on Gopher support over the next year."
>>
>>
>> Hi all,
>>
>> I have worked in the last days on a demo application using twisted and
>> evolved from the simple pop3 + smtp exemple found in the Twisted book to add
>> a web interface (minimalistic but works) in nevow and SSL support + and
>> SQLAlchemy based SQL backend for passwords.
>>
>> I think it would be nice to write some complete tutorial based on this
>> example (and I'm ready to write it of course). But I'd like some
>> minimalistic review from a twisted master so that I don't tell too much
>> stupid things and don't spread bad practices.
>
> Sorry the mail went out before I could finish it...
>
> here is the URL of the project:
> http://bitbucket.org/faide/guineapy/overview/
Very nice.  Overall I think that the structure of the project looks
good, especially the
clean usage of Twisted's Application functionality.

You mention "don't spread bad practices", and I think this brings up
an important
issue.  It would be nice to have some of the main Twisted devs put a
"best practices"
stamp of approval on the code, and after putting on that stamp,
clearly link to the code.
This is something that would be good for the Twisted community and
newcomers alike.


-Alex

>
> Regards,
> Florent Aide.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Alex Clemesha
clemesha.org



From newptcai at gmail.com  Wed Mar  4 22:17:45 2009
From: newptcai at gmail.com (Peter Cai)
Date: Thu, 5 Mar 2009 13:17:45 +0800
Subject: [Twisted-Python] Using sqlalchemy in twisted.
In-Reply-To: <F4366C21-62E0-479F-98DF-A13F77BFCF41@gmail.com>
References: <befee6d80903040328y44051147ja2fc369423a98c84@mail.gmail.com>
	<F4366C21-62E0-479F-98DF-A13F77BFCF41@gmail.com>
Message-ID: <befee6d80903042117w1776071eqf0b85cfdb1677abc@mail.gmail.com>

I'm not quite sure, but I think I'm pretty careful of sharing objects
between threads.
1st, I only cached as few as possible orm objects.  I tried to detach them,
but I found that if I detach them,  I can't access any of their fields any
more.

2nd, I create new orm objects based on client request, pass them to class
Database and then merge them to scoped sessions, change, commit and then
discard these objects.

3rd, I switch to sqlite frequently to check if there is any database
operation outside Database, because sqlite doesn't allow multi-thread
access.

Actually it seems to work until 2 or 3 days ago suddenly cases hang the
server.

Ah, as I've already written lots of code in ORM, I think maybe I should try
to change Database to use a dedicated thread to handle all database
operations.

That might be a bottle neck of my application, but I really can't give up
orm as these mapper classes are used everywhere in my application.

On Thu, Mar 5, 2009 at 3:04 AM, Valentino Volonghi <dialtone at gmail.com>wrote:

> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
>
> On Mar 4, 2009, at 3:28 AM, Peter Cai wrote:
>
>  The code doesn't work.   When I limit the thread numbers to 1
>>
>>   reactor.suggestThreadPoolSize(1)
>>
>> Everything goes fine.  Other wise the server would be blocked and must
>> be killed by "kill 9 ...".
>>
>> The result conflicts with my understanding of sqlalchemy.  Since I
>> don't share any object between threads, there should be no problem!
>>
>
> I'm pretty sure you can't say this with full certainty and actually you are
> just wrong based on the code you showed. deferToThread doesn't use
> the same thread every time you call it, there's absolutely no guarantee
> in that and sqlalchemy keeps state around in that thread related to that
> object it returned. If you want to do any operations you need either to
> detach the object from the session before returning it and do any
> modification
> on the same object in another thread after reattaching it (pretty
> cumbersome).
>
> Or write your own threadpool that gives names to threads so that you can
> have a guarantee that you always call the same thread when working with
> a bunch of objects.
>
> Nonetheless though sqlalchemy is a huge project and I'm pretty sure it has
> some deadlocks and race conditions around which means that even taking
> care of these issues you'll have other problems when dealing with the orm.
>
> If you want to use sqlalchemy don't use its orm but just the query builder,
> it's the only sane way to integrate with twisted. Which anyway IMHO is the
> best way to use it anyway because it uses a lot less memory since it
> doesn't
> have to always cache objects because you control everything and can make
> that call when you really need it.
>
>  Ah....  It always have risk to use something you haven't tried
>> before ....
>> I think I have no choice but always set thread pool size to 1 ...
>>
>
>
> Not entirely true.
>
> - --
> Valentino Volonghi aka Dialtone
> Now running MacOS X 10.5
> Home Page: http://www.twisted.it
> http://www.adroll.com
>
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.4.9 (Darwin)
>
> iEYEARECAAYFAkmu0NoACgkQ9Llz28widGXBawCg32svBsLqsIRLzvzOThgR4sA0
> 5UkAoIgNfyUDPl9c0nwSud0sem3aKjz5
> =2XIX
> -----END PGP SIGNATURE-----
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
look to the things around you,the immediate world around you, if you are
alive,it will mean something to you ——Paul Strand
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090305/9a952ddc/attachment.html>

From newptcai at gmail.com  Thu Mar  5 00:38:43 2009
From: newptcai at gmail.com (Peter Cai)
Date: Thu, 5 Mar 2009 15:38:43 +0800
Subject: [Twisted-Python] Using sqlalchemy in twisted.
In-Reply-To: <E3E183CF-9B95-45ED-8699-7DA3870C3ED4@gmail.com>
References: <befee6d80903040328y44051147ja2fc369423a98c84@mail.gmail.com>
	<F4366C21-62E0-479F-98DF-A13F77BFCF41@gmail.com>
	<1E93D9FE-316A-460B-8069-4865A53D52F8@oda.state.or.us>
	<E3E183CF-9B95-45ED-8699-7DA3870C3ED4@gmail.com>
Message-ID: <befee6d80903042338v3d1dc22bna8230c8e7280d8e7@mail.gmail.com>

I changed my code to this style, it works again.

This code would create a new session on each request and close it
immediately.

Hope this trick could save me!

#=========================================

def require_session(f):
    '''create and close session for each synchronous method'''
    def wrapper(model, *args, **kw):
        sess = model.Session()
        try:
            return f(model, sess, *args, **kw)
        finally:
            sess.close()
    return wrapper

class Database()
    def __init__(self, conn_str):
        self.conn_str = conn_str
        self.engine = create_engine(self.conn_str, echo=False)
        self.Session = sessionmaker(bind =
self.engine,  expire_on_commit=False)

    def getObjectById(self, klass, id):
        return threads.deferToThread(self._getObjectById, klass, id)

    @require_session

    def _getObjectById(self, sess, klass, id):

        return sess.query(klass).get(id)
#=========================================

On Thu, Mar 5, 2009 at 4:29 AM, Valentino Volonghi <dialtone at gmail.com>wrote:

> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
>
> On Mar 4, 2009, at 11:15 AM, Chris Foster wrote:
>
>  I think SQLAlchemy's ORM might work fine with Twisted.  Check out
>> http://foss.eepatents.com/sAsync/ .  sAsync doesn't appear to be widely
>> used, but I got the examples to run with some minor changes to the sqlite
>> connection.  I'm hoping to try something useful in the next week or two.
>>
>
>
> sAsync repository hasn't changed since about 1 or 2 years ago. Now
> sqlalchemy 0.5
> changed quite a bit of the internals and so on. Notice however that the
> tests for
> sAsync use sqlite that is limited essentially to 1 connection, which goes
> back to
> your original discontent.
>
> I tried to integrate sqlalchemy ORM in the past and it never worked right
> because
> the code in the objects didn't know that it was dealing with twisted and
> because
> sqlalchemy is mainly used in a single thread, it's thread safe but that
> doesn't mean
> that you can share objects between threads.
>
> - --
> Valentino Volonghi aka Dialtone
> Now running MacOS X 10.5
> Home Page: http://www.twisted.it
> http://www.adroll.com
>
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.4.9 (Darwin)
>
> iEYEARECAAYFAkmu5KoACgkQ9Llz28widGWBWwCglXIKPUFaGbk5tI9XmtrH8lH+
> 7woAnjrWWWEj2P78szZbNyLzSx0kgz4B
> =9uZo
>
> -----END PGP SIGNATURE-----
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
look to the things around you,the immediate world around you, if you are
alive,it will mean something to you ——Paul Strand
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090305/c51d3772/attachment.html>

From therve at free.fr  Thu Mar  5 03:35:14 2009
From: therve at free.fr (Thomas =?ISO-8859-1?Q?Herv=E9?=)
Date: Thu, 05 Mar 2009 11:35:14 +0100
Subject: [Twisted-Python] Twisted developers: please donate your time!
In-Reply-To: <1236002880.30721.36.camel@pintsize>
References: <1235412728.2733.2.camel@pintsize>
	<aa0dfd860902240025h464a286ap7ddbbd92937d0381@mail.gmail.com>
	<1236002880.30721.36.camel@pintsize>
Message-ID: <1236249314.6440.5.camel@minime>

Le lundi 02 mars 2009 à 09:08 -0500, Itamar Shtull-Trauring a écrit :

> Yes - thanks to you and all thee rest of the people who are
> volunteering! Anyone else willing to step up?

Sorry for being even more late. I won't spend as much time as I'd like,
but I think 2 weeks of reviews/small branches is a safe bet.

-- 
Thomas




From glyph at divmod.com  Thu Mar  5 04:38:51 2009
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 05 Mar 2009 11:38:51 -0000
Subject: [Twisted-Python] Twisted Sprint at PyCon
Message-ID: <20090305113851.12555.767126240.divmod.xquotient.5347@weber.divmod.com>


There will be an extended Twisted sprint at PyCon this year.

I hope that everyone on this list who is attending will be present :).

Technically I'm the sprint leader, but I would very much appreciate help 
from anyone else who is in an organizing mood.

Please sign up on the PyCon wiki here:

    http://us.pycon.org/2009/sprints/projects/twisted/



From markus at bluegap.ch  Thu Mar  5 08:20:27 2009
From: markus at bluegap.ch (Markus Wanner)
Date: Thu, 05 Mar 2009 16:20:27 +0100
Subject: [Twisted-Python] sending large files from web2 http server
Message-ID: <49AFEDBB.3090402@bluegap.ch>

Hi,

I'm trying to stream longish data via web2, but experience sudden stalls
in data transfer, followed by a connection abort after a certain
timeout. I can't completely reproduce the issue, yet, but figured that
the size of the blocks I'm returning via the stream's read method
affects the failure rate (an stream.IByteStream implementation).

I've tried with chunk sizes between 1 MiB down to 256 bytes. At that
rate, I suddenly get the following unhandled errors, which don't seem to
have to do much with my code.

2009/03/05 16:02 CET [-] Unhandled error in Deferred:
2009/03/05 16:02 CET [-] Traceback (most recent call last):
	  File "/usr/lib/python2.4/site-packages/twisted/internet/defer.py",
line 267, in unpause
	    self._runCallbacks()
	  File "/usr/lib/python2.4/site-packages/twisted/internet/defer.py",
line 307, in _runCallbacks
	    self.result = callback(self.result, *args, **kw)
	  File "/usr/lib/python2.4/site-packages/twisted/internet/defer.py",
line 271, in _continue
	    self.unpause()
	  File "/usr/lib/python2.4/site-packages/twisted/internet/defer.py",
line 267, in unpause
	    self._runCallbacks()
	--- <exception caught here> ---
	  File "/usr/lib/python2.4/site-packages/twisted/internet/defer.py",
line 307, in _runCallbacks
	    self.result = callback(self.result, *args, **kw)
	  File "/usr/lib/python2.4/site-packages/twisted/internet/defer.py",
line 271, in _continue
	    self.unpause()
	  File "/usr/lib/python2.4/site-packages/twisted/internet/defer.py",
line 267, in unpause
	    self._runCallbacks()
	  File "/usr/lib/python2.4/site-packages/twisted/internet/defer.py",
line 321, in _runCallbacks
	    self.result = failure.Failure()
	  File "/usr/lib/python2.4/site-packages/twisted/python/failure.py",
line 205, in __init__
	    parentCs = reflect.allYourBase(self.type)
	  File "/usr/lib/python2.4/site-packages/twisted/python/reflect.py",
line 480, in allYourBase
	    accumulateBases(classObj, l, baseClass)
	exceptions.RuntimeError: maximum recursion depth exceeded


Are there any known problems with web2 and large files (not that 64 MiB
is *that* large...). Any hint regarding the above error? Is the same to
be expected with a chunk size of 8 KiB and a file of 2 GiB size (as that
would result in the same amount of chunks)?

Any hints would be greatly appreciated.

Kind Regards

Markus Wanner



From exarkun at divmod.com  Thu Mar  5 08:45:49 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 5 Mar 2009 10:45:49 -0500
Subject: [Twisted-Python] sending large files from web2 http server
In-Reply-To: <49AFEDBB.3090402@bluegap.ch>
Message-ID: <20090305154549.12853.624525997.divmod.quotient.18633@henry.divmod.com>

On Thu, 05 Mar 2009 16:20:27 +0100, Markus Wanner <markus at bluegap.ch> wrote:
>Hi,
>
>I'm trying to stream longish data via web2, but experience sudden stalls
>in data transfer, followed by a connection abort after a certain
>timeout. I can't completely reproduce the issue, yet, but figured that
>the size of the blocks I'm returning via the stream's read method
>affects the failure rate (an stream.IByteStream implementation).
>
>I've tried with chunk sizes between 1 MiB down to 256 bytes. At that
>rate, I suddenly get the following unhandled errors, which don't seem to
>have to do much with my code.

I haven't looked at how web2 handles IByteStream providers, but my first
guess would be that this is an example of a somewhat common bug where
Deferreds are chained to an arbitrary length based on application data
and when there's too much application data, the chain gets too long (a
limit imposed by how much recursion is possible when unwinding the chain),
and you get this failure.

Alternatively, the bug I describe above might somehow have gotten into
your application code, rather than into Web2.  As you say, the stack
trace doesn't point to your code, but it doesn't point to Web2 code
either, and it's common in cases like this for the traceback to just
point at the implementation of Deferred, since that's where the bug
(or lack of feature, whatever) *really* is.

The main focus of web development in Twisted now is Twisted Web, not
Twisted Web2.  However, if you can supply a patch which fixes this
(along with unit tests, please :), then we'd be happy to apply it.

James Knight or David Reid might have a suggestion about where in the
code to start looking for the problem.

Jean-Paul



From aronbierbaum at gmail.com  Thu Mar  5 15:49:15 2009
From: aronbierbaum at gmail.com (Aron Bierbaum)
Date: Thu, 5 Mar 2009 16:49:15 -0600
Subject: [Twisted-Python] _Win32Waker
Message-ID: <34457a4c0903051449m7b4845e1yd402d7287773fd2e@mail.gmail.com>

I have been using a custom Qt4 reactor that derives from
PosixReactorBase. As a result it creates a _Win32Waker to allow
threads and signals to wake up the IO thread. It seems though that the
current implementation only works about half of the time. The other
half it exists with :

  File "...\Lib\python2.6\site-packages\twisted\internet\posixbase.py",
line 170, in __init__
    ReactorBase.__init__(self)
  File "...\Lib\python2.6\site-packages\twisted\internet\base.py",
line 424, in __init__
    self._initThreads()
  File "...\Lib\python2.6\site-packages\twisted\internet\base.py",
line 813, in _initThreads
    self.installWaker()
  File "...\Lib\python2.6\site-packages\twisted\internet\posixbase.py",
line 206, in installWaker
    self.waker = _Waker(self)
  File "...\Lib\python2.6\site-packages\twisted\internet\posixbase.py",
line 77, in __init__
    client.connect(server.getsockname())
  File "<string>", line 1, in connect
socket.error: [Errno 10049] The requested address is not valid in its context

I have attached a simple test that shows that the following code does
not always return "127.0.0.1", but sometimes returns "0.0.0.0" as the
IP address.

        # Following select_trigger (from asyncore)'s example;
        server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        client.setsockopt(socket.IPPROTO_TCP, 1, 1)
        server.bind(('127.0.0.1', 0))
        server.listen(1)
        client.connect(server.getsockname())

My current workaround just calls the following instead:

        client.connect(('127.0.0.1', server.getsockname()[1]))

Any ideas on what is really causing the error? If there is not a
better solution can this be added to trunk for future releases?

Thanks,
Aron
-------------- next part --------------
A non-text attachment was scrubbed...
Name: test.py
Type: application/octet-stream
Size: 188 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20090305/b5f626f4/attachment-0002.obj>

From hasham_james_007 at yahoo.com  Thu Mar  5 16:49:31 2009
From: hasham_james_007 at yahoo.com (khawar hasham)
Date: Thu, 5 Mar 2009 15:49:31 -0800 (PST)
Subject: [Twisted-Python] Re:how to pass on the connection failed or
	connection lost error
Message-ID: <262572.93310.qm@web53509.mail.re2.yahoo.com>

Hi,

I tried to use this suggestion but I could not make it work.

here is the test I am using

in my application class
def callSend(self, msg):
      plugin.send(msg)

Now in plugin class
def send(self, msg):
      print 'before call'
      threads.blockingCallFromThread(reactor, remotesend, msg)
      print 'after call'

def handleError(self, error):
      error.raiseException()

def remotesend(self, msg):
     deferred = defer.Deferred()
     reactor.connectTCP('localhost',9999,myfactory)
     deffered.addErrback(self.handleError)
     return deffered

now myfactory class .. clientConnectionFailed 
def clientConnectionFailed(self, connector, reason):
      reason.raiseException()


now the problem is, code has become synchronous as code is waiting after threads.blockingCallFromThread, how to fire the defer returned from 'remotesend'. Do i need to fire it or twisted will take care of it.

I think I can't refer this deferred object since it is being passed to threads.blockingCallFromThread function on which I have no control.

any suggestions


--- On Wed, 3/4/09, twisted-python-request at twistedmatrix.com <twisted-python-request at twistedmatrix.com> wrote:
From: twisted-python-request at twistedmatrix.com <twisted-python-request at twistedmatrix.com>
Subject: Twisted-Python Digest, Vol 60, Issue 6
To: twisted-python at twistedmatrix.com
Date: Wednesday, March 4, 2009, 11:00 AM

Send Twisted-Python mailing list submissions to
	twisted-python at twistedmatrix.com

To subscribe or unsubscribe via the World Wide Web, visit
	http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
or, via email, send a message with subject or body 'help' to
	twisted-python-request at twistedmatrix.com

You can reach the person managing the list at
	twisted-python-owner at twistedmatrix.com

When replying, please edit your Subject line so it is more specific
than "Re: Contents of Twisted-Python digest..."


Today's Topics:

   1. Re: how to pass on the connection failed or	connection lost
      error (Jean-Paul Calderone)


----------------------------------------------------------------------

Message: 1
Date: Wed, 4 Mar 2009 09:59:42 -0500
From: Jean-Paul Calderone <exarkun at divmod.com>
Subject: Re: [Twisted-Python] how to pass on the connection failed or
	connection lost error
To: twisted-python at twistedmatrix.com
Message-ID:
	<20090304145942.12853.42253504.divmod.quotient.17917 at henry.divmod.com>
Content-Type: text/plain; format=flowed

On Wed, 4 Mar 2009 06:39:59 -0800 (PST), khawar hasham
<hasham_james_007 at yahoo.com> wrote:
>Hi
>
>let me first explain the application that I am developing. I have an
application that will use the twisted part as a plugin. this twisted part will
act as server and as client both.
>my application call the plugin method to send data to server module using
connectTCP. now the problem is I can not pass on the connection failed exception
to my calling application.

Since you're running the reactor in one thread and the rest of your
application in another thread, your question is basically one of message
passing.  You've already found reactor.callFromThread which is good; I
think you just want the slightly more featureful version, available in
twisted.internet.threads, blockingCallFromThread.  This is implemented
in terms of callFromThread, but additionally allows the caller to get
the result of the function being called - including waiting on a Deferred
if the function being called returns one.  If you switch to this, then
you only need to make Plugin.clientsend return a Deferred which eventually
fires with a result or a Failure.

Jean-Paul



------------------------------

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


End of Twisted-Python Digest, Vol 60, Issue 6
*********************************************



      
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090305/d03a3ea0/attachment.html>

From cayson.z at gmail.com  Thu Mar  5 20:43:02 2009
From: cayson.z at gmail.com (Boern)
Date: Fri, 6 Mar 2009 11:43:02 +0800
Subject: [Twisted-Python] How to invoke the remote method based on twisted
	in django web app?
Message-ID: <be0f6540903051943y10241c1ej6380857e3f4152c9@mail.gmail.com>

hi,all:
I developed a web app in diango and a remote service in twisted, and I want
to invoke the twisted remote method in django web.example:
the remote service code :

class Echoer(pb.Root):
    def remote_echo(self, task):

        print 'echoing:', task

        return task

if __name__ == '__main__':
    reactor.listenTCP(8789, pb.PBServerFactory(Echoer()))
    reactor.run()

-------------------------------------------------------------------------------------------------------------
and the djiango views.py code :

       def register_task(requst):
"""register the task"""
        .................
factory = pb.PBClientFactory()
reactor.connectTCP("localhost", 8789, factory)
d = factory.getRootObject()
d.addCallback(lambda object: object.callRemote("echo", task))
d.addCallback(lambda echo: 'server echoed: '+echo[0]+str(echo[1]))
d.addErrback(lambda reason: 'error: '+str(reason.value))
d.addCallback(util.println)
d.addCallback(lambda _: reactor.stop())
reactor.run()
        ..........................
        return HttpResponseRedirect('/push_task/') # Redirect after POST

-------------------------------------------------------------------------------------------------------------

but when I post a request to django web app ,a exception display:
Traceback (most recent call last):
  File "C:\Python25\Lib\site-packages\twisted\internet\base.py", line 374,
in fi
reEvent
    DeferredList(beforeResults).addCallback(self._continueFiring)
  File "C:\Python25\Lib\site-packages\twisted\internet\defer.py", line 195,
in a
ddCallback
    callbackKeywords=kw)
  File "C:\Python25\Lib\site-packages\twisted\internet\defer.py", line 186,
in a
ddCallbacks
    self._runCallbacks()
  File "C:\Python25\Lib\site-packages\twisted\internet\defer.py", line 328,
in _
runCallbacks
    self.result = callback(self.result, *args, **kw)
--- <exception caught here> ---
  File "C:\Python25\Lib\site-packages\twisted\internet\base.py", line 387,
in _c
ontinueFiring
    callable(*args, **kwargs)
  File "C:\Python25\Lib\site-packages\twisted\internet\base.py", line 1123,
in _
reallyStartRunning
    self._handleSignals()
  File "C:\Python25\Lib\site-packages\twisted\internet\base.py", line 1068,
in _
handleSignals
    signal.signal(signal.SIGINT, self.sigInt)
exceptions.ValueError: signal only works in main thread
--------------------------------------------------------------------------------------------------------------

so ,How I correctly invoke the remote method?
-- 
Boern Parx
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090306/abdd620b/attachment.html>

From terry at jon.es  Fri Mar  6 03:41:37 2009
From: terry at jon.es (Terry Jones)
Date: Fri, 6 Mar 2009 11:41:37 +0100
Subject: [Twisted-Python] Interview question on deferreds
Message-ID: <18864.64993.174022.736213@jon.es>

I'm going to post a few short comments on deferreds. As a fun standalone
warm-up exercise, here's an interview-style question for people who claim
to understand Twisted's deferreds.

What will the following code print, and why?


    from twisted.internet import defer

    def e_ok(x):
        print 'extra is ok:', x
        return x

    def e_nok(f):
        # Propagate the failure (by returning it).
        print 'extra failed'
        return f

    def raiser(_):
        raise Exception('oops')

    extra = defer.Deferred()
    extra.addCallbacks(e_ok, e_nok)
    extra.addCallback(raiser)
    extra.addCallbacks(e_ok, e_nok)

    def d_nothing(x):
        print 'Doing nothing with:', x
        return x

    def d_ok(x):
        print 'd is ok:', x

    def d_nok(f):
        # Absorb the failure (by implicitly returning None).
        print 'd failed'

    d = defer.Deferred()
    d.addCallback(d_nothing)
    d.chainDeferred(extra)
    d.addCallbacks(d_ok, d_nok)

    d.callback('xyz')


Don't read my next post if you prefer to figure this out yourself.

Terry



From terry at jon.es  Fri Mar  6 04:10:55 2009
From: terry at jon.es (Terry Jones)
Date: Fri, 6 Mar 2009 12:10:55 +0100
Subject: [Twisted-Python] A few comments on deferreds
Message-ID: <18865.1215.882543.689802@jon.es>

Here are a few comments on deferreds. I'll keep this short. These sort of
posts don't seem to generate much/any discussion (e.g., http://bit.ly/YkSD
which I thought was cool). I'm not sure why - I find deferreds infinitely
interesting, and don't understand why other people don't seem to share the
passion :-)

1. If you have a deferred d1, and you call d1.chainDeferred(d2) I think it
   makes sense for there to be a flag inside the deferred class that warns
   you if you later call d1.addCallbacks. That's because adding more
   functions to d1's callback/errback chain is probably not useful. (It
   might conceivably be useful, e.g., to let you know that d1 has been
   called). The result of d1 has been passed to d2, and because d2.callback
   and d2.errback don't return it (see point 2 below), it is not passed
   further down d1's chain. So it's most likely that someone adding a
   callback to d1 after calling d1.chainDeferred doesn't really know what
   they're doing.

2. Deferred.callback and Deferred.errback currently (implicitly) return
   None.  They could be changed to return their passed argument.  That
   would make a call to d1.chainDeferred act like a deferred fork - the
   result would go down d2's callback chain, but also continue down the
   callback/errback chain of d1.

3. There's also the possibility of adding a function to the Deferred class:

     def incorporateDeferred(self, d2):
         self.callbacks.extend(d2.callbacks)

   which might be what a naive reader might expect chainDeferred to do.
   This raises the question of what you might later do with d2 (probably
   nothing), but that's just like what happens with d1: if you call
   d1.chainDeferred you're probably not going to return d1 to anyone. All
   you can usefully do is fire it.

I'll stop for now. There's lots more that could be said, but lets see if
anyone's interested. I wish I were going to PyCon :-(

BTW, points 1 and 2 above are key to understanding what goes on in the
interview question code I recently posted (http://bit.ly/T3xKs).

Terry



From p.mayers at imperial.ac.uk  Fri Mar  6 04:33:51 2009
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 06 Mar 2009 11:33:51 +0000
Subject: [Twisted-Python] How to invoke the remote method based on twisted
	in django web app?
In-Reply-To: <be0f6540903051943y10241c1ej6380857e3f4152c9@mail.gmail.com>
References: <be0f6540903051943y10241c1ej6380857e3f4152c9@mail.gmail.com>
Message-ID: <49B10A1F.4090208@imperial.ac.uk>

Boern wrote:
> hi,all:
> I developed a web app in diango and a remote service in twisted, and I 
> want to invoke the twisted remote method in django web.
> example:
> 
> the remote service code :
> 
> class Echoer(pb.Root):
>     def remote_echo(self, task):
>       
>         print 'echoing:', task
>         
>         return task
> 
> if __name__ == '__main__':
>     reactor.listenTCP(8789, pb.PBServerFactory(Echoer()))
>     reactor.run()
> 
> -------------------------------------------------------------------------------------------------------------
> and the djiango views.py code :
> 
>        def register_task(requst):
> """register the task"""
>         .................
> factory = pb.PBClientFactory()
> reactor.connectTCP("localhost", 8789, factory)
> d = factory.getRootObject()
> d.addCallback(lambda object: object.callRemote("echo", task))
> d.addCallback(lambda echo: 'server echoed: '+echo[0]+str(echo[1]))
> d.addErrback(lambda reason: 'error: '+str(reason.value))
> d.addCallback(util.println)
> d.addCallback(lambda _: reactor.stop())
> reactor.run()

That won't work. The reactor cannot be started more than once. It needs 
to be long-lived.




From eburus at gmail.com  Fri Mar  6 04:44:15 2009
From: eburus at gmail.com (Burus)
Date: Fri, 6 Mar 2009 14:44:15 +0300
Subject: [Twisted-Python] How to invoke the remote method based on twisted
	in django web app?
In-Reply-To: <49B10A1F.4090208@imperial.ac.uk>
References: <be0f6540903051943y10241c1ej6380857e3f4152c9@mail.gmail.com>
	<49B10A1F.4090208@imperial.ac.uk>
Message-ID: <f564d0090903060344k65955c99n302cd510a4da6906@mail.gmail.com>

You can try starting reactor. in the settings.py file, and use twisted  pb
calls in the fjango views.

On Fri, Mar 6, 2009 at 2:33 PM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:

> Boern wrote:
>
>> hi,all:
>> I developed a web app in diango and a remote service in twisted, and I
>> want to invoke the twisted remote method in django web.
>> example:
>>
>> the remote service code :
>>
>> class Echoer(pb.Root):
>>    def remote_echo(self, task):
>>              print 'echoing:', task
>>                return task
>>
>> if __name__ == '__main__':
>>    reactor.listenTCP(8789, pb.PBServerFactory(Echoer()))
>>    reactor.run()
>>
>>
>> -------------------------------------------------------------------------------------------------------------
>> and the djiango views.py code :
>>
>>       def register_task(requst):
>> """register the task"""
>>        .................
>> factory = pb.PBClientFactory()
>> reactor.connectTCP("localhost", 8789, factory)
>> d = factory.getRootObject()
>> d.addCallback(lambda object: object.callRemote("echo", task))
>> d.addCallback(lambda echo: 'server echoed: '+echo[0]+str(echo[1]))
>> d.addErrback(lambda reason: 'error: '+str(reason.value))
>> d.addCallback(util.println)
>> d.addCallback(lambda _: reactor.stop())
>> reactor.run()
>>
>
> That won't work. The reactor cannot be started more than once. It needs to
> be long-lived.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090306/c1c47d9d/attachment.html>

From exarkun at divmod.com  Fri Mar  6 05:49:10 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 6 Mar 2009 07:49:10 -0500
Subject: [Twisted-Python] A few comments on deferreds
In-Reply-To: <18865.1215.882543.689802@jon.es>
Message-ID: <20090306124910.12853.671662147.divmod.quotient.19156@henry.divmod.com>

On Fri, 6 Mar 2009 12:10:55 +0100, Terry Jones <terry at jon.es> wrote:
>Here are a few comments on deferreds. I'll keep this short. These sort of
>posts don't seem to generate much/any discussion (e.g., http://bit.ly/YkSD
>which I thought was cool). I'm not sure why - I find deferreds infinitely
>interesting, and don't understand why other people don't seem to share the
>passion :-)
>
>1. If you have a deferred d1, and you call d1.chainDeferred(d2) I think it
>   makes sense for there to be a flag inside the deferred class that warns
>   you if you later call d1.addCallbacks. That's because adding more
>   functions to d1's callback/errback chain is probably not useful. (It
>   might conceivably be useful, e.g., to let you know that d1 has been
>   called). The result of d1 has been passed to d2, and because d2.callback
>   and d2.errback don't return it (see point 2 below), it is not passed
>   further down d1's chain. So it's most likely that someone adding a
>   callback to d1 after calling d1.chainDeferred doesn't really know what
>   they're doing.

Indeed.  I can't think of any case where I've wanted to add more callbacks
to a Deferred after chaining it to (from?  with?) another Deferred.

>2. Deferred.callback and Deferred.errback currently (implicitly) return
>   None.  They could be changed to return their passed argument.  That
>   would make a call to d1.chainDeferred act like a deferred fork - the
>   result would go down d2's callback chain, but also continue down the
>   callback/errback chain of d1.

But it would be catastrophic for error handling.  Suddenly all of your
errors on d1 which are handled perfectly correctly with an errback on
d2 would become unhandled failures.

>3. There's also the possibility of adding a function to the Deferred class:
>
>     def incorporateDeferred(self, d2):
>         self.callbacks.extend(d2.callbacks)
>
>   which might be what a naive reader might expect chainDeferred to do.
>   This raises the question of what you might later do with d2 (probably
>   nothing), but that's just like what happens with d1: if you call
>   d1.chainDeferred you're probably not going to return d1 to anyone. All
>   you can usefully do is fire it.

If this accounted for future changes to d2, it would make more sense.  I
think the correct direction to go in is to prevent people from trying to
add more callbacks to d1.

>I'll stop for now. There's lots more that could be said, but lets see if
>anyone's interested. I wish I were going to PyCon :-(
>
>BTW, points 1 and 2 above are key to understanding what goes on in the
>interview question code I recently posted (http://bit.ly/T3xKs).
>

Jean-Paul



From exarkun at divmod.com  Fri Mar  6 05:51:53 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 6 Mar 2009 07:51:53 -0500
Subject: [Twisted-Python] _Win32Waker
In-Reply-To: <34457a4c0903051449m7b4845e1yd402d7287773fd2e@mail.gmail.com>
Message-ID: <20090306125153.12853.504773560.divmod.quotient.19159@henry.divmod.com>

On Thu, 5 Mar 2009 16:49:15 -0600, Aron Bierbaum <aronbierbaum at gmail.com> wrote:
>I have been using a custom Qt4 reactor that derives from
>PosixReactorBase. As a result it creates a _Win32Waker to allow
>threads and signals to wake up the IO thread. It seems though that the
>current implementation only works about half of the time. The other
>half it exists with :
>
>  File "...\Lib\python2.6\site-packages\twisted\internet\posixbase.py",
>line 170, in __init__
>    ReactorBase.__init__(self)
>  File "...\Lib\python2.6\site-packages\twisted\internet\base.py",
>line 424, in __init__
>    self._initThreads()
>  File "...\Lib\python2.6\site-packages\twisted\internet\base.py",
>line 813, in _initThreads
>    self.installWaker()
>  File "...\Lib\python2.6\site-packages\twisted\internet\posixbase.py",
>line 206, in installWaker
>    self.waker = _Waker(self)
>  File "...\Lib\python2.6\site-packages\twisted\internet\posixbase.py",
>line 77, in __init__
>    client.connect(server.getsockname())
>  File "<string>", line 1, in connect
>socket.error: [Errno 10049] The requested address is not valid in its context
>
>I have attached a simple test that shows that the following code does
>not always return "127.0.0.1", but sometimes returns "0.0.0.0" as the
>IP address.
>
>        # Following select_trigger (from asyncore)'s example;
>        server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
>        client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
>        client.setsockopt(socket.IPPROTO_TCP, 1, 1)
>        server.bind(('127.0.0.1', 0))
>        server.listen(1)
>        client.connect(server.getsockname())
>
>My current workaround just calls the following instead:
>
>        client.connect(('127.0.0.1', server.getsockname()[1]))
>
>Any ideas on what is really causing the error? If there is not a
>better solution can this be added to trunk for future releases?

It's definitely true that you can't connect to "0.0.0.0" on Windows, and
various parts of Twisted try to deal with this in some way already.  It
isn't clear to me why that getsockname() isn't returning "127.0.0.1" though.
I expect it's due to some configuration change or third-party networking
software on the Windows machine.  Do you think you can track that down?
That will make it much easier to think about the problem and the solution.

Jean-Paul



From exarkun at divmod.com  Fri Mar  6 05:56:04 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 6 Mar 2009 07:56:04 -0500
Subject: [Twisted-Python] Re:how to pass on the connection failed or
	connection lost error
In-Reply-To: <262572.93310.qm@web53509.mail.re2.yahoo.com>
Message-ID: <20090306125604.12853.67372802.divmod.quotient.19163@henry.divmod.com>

On Thu, 5 Mar 2009 15:49:31 -0800 (PST), khawar hasham <hasham_james_007 at yahoo.com> wrote:
>Hi,
>
>I tried to use this suggestion but I could not make it work.
>
>here is the test I am using
>
>in my application class
>def callSend(self, msg):
>      plugin.send(msg)
>
>Now in plugin class
>def send(self, msg):
>      print 'before call'
>      threads.blockingCallFromThread(reactor, remotesend, msg)
>      print 'after call'
>
>def handleError(self, error):
>      error.raiseException()
>
>def remotesend(self, msg):
>     deferred = defer.Deferred()
>     reactor.connectTCP('localhost',9999,myfactory)
>     deffered.addErrback(self.handleError)
>     return deffered
>
>now myfactory class .. clientConnectionFailed
>def clientConnectionFailed(self, connector, reason):
>      reason.raiseException()
>
>
>now the problem is, code has become synchronous as code is waiting after threads.blockingCallFromThread, how to fire the defer returned from 'remotesend'. Do i need to fire it or twisted will take care of it.

You probably need to fire it.  You created it, so it's your responsibility.
I don't know when you want it to fire, though.  What is it supposed to
represent?

>I think I can't refer this deferred object since it is being passed to threads.blockingCallFromThread function on which I have no control.

Not only that, but you can't do anything with it outside the reactor thread.

>
>any suggestions
>

What do you want to happen?

Jean-Paul



From terry at jon.es  Fri Mar  6 06:13:30 2009
From: terry at jon.es (Terry Jones)
Date: Fri, 6 Mar 2009 14:13:30 +0100
Subject: [Twisted-Python] A few comments on deferreds
In-Reply-To: Your message at 07:49:10 on Friday, 6 March 2009
References: <18865.1215.882543.689802@jon.es>
	<20090306124910.12853.671662147.divmod.quotient.19156@henry.divmod.com>
Message-ID: <18865.8570.558666.360596@jon.es>

Hi JP

>>>>> "JP" == Jean-Paul Calderone <exarkun at divmod.com> writes:
JP> On Fri, 6 Mar 2009 12:10:55 +0100, Terry Jones <terry at jon.es> wrote:

>> 1. If you have a deferred d1, and you call d1.chainDeferred(d2) I think
>> it makes sense for there to be a flag inside the deferred class that
>> warns you if you later call d1.addCallbacks. That's because adding more
>> functions to d1's callback/errback chain is probably not useful. (It
>> might conceivably be useful, e.g., to let you know that d1 has been
>> called). The result of d1 has been passed to d2, and because d2.callback
>> and d2.errback don't return it (see point 2 below), it is not passed
>> further down d1's chain. So it's most likely that someone adding a
>> callback to d1 after calling d1.chainDeferred doesn't really know what
>> they're doing.

JP> Indeed.  I can't think of any case where I've wanted to add more
JP> callbacks to a Deferred after chaining it to (from?  with?) another
JP> Deferred.

Right.

>> 2. Deferred.callback and Deferred.errback currently (implicitly) return
>> None.  They could be changed to return their passed argument.  That
>> would make a call to d1.chainDeferred act like a deferred fork - the
>> result would go down d2's callback chain, but also continue down the
>> callback/errback chain of d1.

JP> But it would be catastrophic for error handling.  Suddenly all of your
JP> errors on d1 which are handled perfectly correctly with an errback on
JP> d2 would become unhandled failures.

Ah yes :-)  Oops.

If you really wanted to do this, you could use another helper function
(e.g., Deferred.forkDeferred) which created and added a call/errback
functions to d1 that called d2 call/errback and then returned its arg). I
don't have a use case for that, so I'm not suggesting adding it to Twisted.
Anyone who wanted that kind of deferred forking functionality could write
it for themselves in a few lines.

>> 3. There's also the possibility of adding a function to the Deferred class:
>> 
>> def incorporateDeferred(self, d2):
>> self.callbacks.extend(d2.callbacks)
>> 
>> which might be what a naive reader might expect chainDeferred to do.
>> This raises the question of what you might later do with d2 (probably
>> nothing), but that's just like what happens with d1: if you call
>> d1.chainDeferred you're probably not going to return d1 to anyone. All
>> you can usefully do is fire it.

JP> If this accounted for future changes to d2, it would make more sense.

Yes. But as I mentioned, this mirrors the situation with d1.chainDeferred
in which future changes to d1 are also probably useless. It feels to me
like extending callbacks might be what people are expecting, as d1 then
remains useful.  (This leads to thoughts of a Deferred class that can't be
fired, just used to accumulate callbacks that are solely used to extend
other deferreds, but I guess deferreds are already abstract enough without
going there...)

JP> I think the correct direction to go in is to prevent people from trying
JP> to add more callbacks to d1.

Agreed. It's a simple change and it almost certainly flags a misunderstanding.
I can open an issue and submit a patch if you like.

Terry



From dreid at dreid.org  Fri Mar  6 11:25:53 2009
From: dreid at dreid.org (David Reid)
Date: Fri, 6 Mar 2009 10:25:53 -0800
Subject: [Twisted-Python] sending large files from web2 http server
In-Reply-To: <20090305154549.12853.624525997.divmod.quotient.18633@henry.divmod.com>
References: <49AFEDBB.3090402@bluegap.ch>
	<20090305154549.12853.624525997.divmod.quotient.18633@henry.divmod.com>
Message-ID: <f055221a0903061025h2c9ca26ftbadd18b566d47446@mail.gmail.com>

On Thu, Mar 5, 2009 at 7:45 AM, Jean-Paul Calderone <exarkun at divmod.com>wrote:

> On Thu, 05 Mar 2009 16:20:27 +0100, Markus Wanner <markus at bluegap.ch>
> wrote:
>
>> Hi,
>>
>> I'm trying to stream longish data via web2, but experience sudden stalls
>> in data transfer, followed by a connection abort after a certain
>> timeout. I can't completely reproduce the issue, yet, but figured that
>> the size of the blocks I'm returning via the stream's read method
>> affects the failure rate (an stream.IByteStream implementation).
>>
>> I've tried with chunk sizes between 1 MiB down to 256 bytes. At that
>> rate, I suddenly get the following unhandled errors, which don't seem to
>> have to do much with my code.
>>
>
> I haven't looked at how web2 handles IByteStream providers, but my first
> guess would be that this is an example of a somewhat common bug where
> Deferreds are chained to an arbitrary length based on application data
> and when there's too much application data, the chain gets too long (a
> limit imposed by how much recursion is possible when unwinding the chain),
> and you get this failure.


I think this probably has something to do with the fact the IByteStream.read
may optionally return a Deferred making it quite easy to write code that
accidentally chain Deferreds to infinity and beyond.  Such as if you're
calling IByteStream.read in the callback of another Deferred and returning
the result.  Sometimes the read method will return a Deferred, sometimes
it'll just return your data.  Without reading the implementation of the
provider you're using it's not easy to know which it'll do when.

While the specific bug you're encountering may or may not be in your
application code (I haven't read it, please post a minimal example if you
can) it illuminates a fundamental flaw of the twisted.web2.stream APIs.
(It's a flaw we understand, and there is a ticket I can't find right now
that documents how it should work there may even be a branch dialtone worked
on that could possibly fix it.)

If this email doesn't help you find your problem please do post a minimal
example and I promise I'll read it today.

-David
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090306/8663a686/attachment.html>

From cayson.z at gmail.com  Fri Mar  6 21:45:03 2009
From: cayson.z at gmail.com (Boern)
Date: Sat, 7 Mar 2009 12:45:03 +0800
Subject: [Twisted-Python] How to invoke the remote method based on twisted
	in django web app?
In-Reply-To: <f564d0090903060344k65955c99n302cd510a4da6906@mail.gmail.com>
References: <be0f6540903051943y10241c1ej6380857e3f4152c9@mail.gmail.com>
	<49B10A1F.4090208@imperial.ac.uk>
	<f564d0090903060344k65955c99n302cd510a4da6906@mail.gmail.com>
Message-ID: <be0f6540903062045u5e5e7945p1c3cfa8cb5b86579@mail.gmail.com>

thanks,all. I have resolved it by twisted.web .xmprpc

On Fri, Mar 6, 2009 at 7:44 PM, Burus <eburus at gmail.com> wrote:

> You can try starting reactor. in the settings.py file, and use twisted  pb
> calls in the fjango views.
>
>
> On Fri, Mar 6, 2009 at 2:33 PM, Phil Mayers <p.mayers at imperial.ac.uk>wrote:
>
>> Boern wrote:
>>
>>> hi,all:
>>> I developed a web app in diango and a remote service in twisted, and I
>>> want to invoke the twisted remote method in django web.
>>> example:
>>>
>>> the remote service code :
>>>
>>> class Echoer(pb.Root):
>>>    def remote_echo(self, task):
>>>              print 'echoing:', task
>>>                return task
>>>
>>> if __name__ == '__main__':
>>>    reactor.listenTCP(8789, pb.PBServerFactory(Echoer()))
>>>    reactor.run()
>>>
>>>
>>> -------------------------------------------------------------------------------------------------------------
>>> and the djiango views.py code :
>>>
>>>       def register_task(requst):
>>> """register the task"""
>>>        .................
>>> factory = pb.PBClientFactory()
>>> reactor.connectTCP("localhost", 8789, factory)
>>> d = factory.getRootObject()
>>> d.addCallback(lambda object: object.callRemote("echo", task))
>>> d.addCallback(lambda echo: 'server echoed: '+echo[0]+str(echo[1]))
>>> d.addErrback(lambda reason: 'error: '+str(reason.value))
>>> d.addCallback(util.println)
>>> d.addCallback(lambda _: reactor.stop())
>>> reactor.run()
>>>
>>
>> That won't work. The reactor cannot be started more than once. It needs to
>> be long-lived.
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
Boern Parx
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090307/39516dd7/attachment.html>

From dave at davebritton.com  Sat Mar  7 09:08:49 2009
From: dave at davebritton.com (Dave Britton)
Date: Sat, 7 Mar 2009 11:08:49 -0500
Subject: [Twisted-Python] newbie problem with SMTPClient
References: <20090302212228.12853.348641046.divmod.quotient.16662@henry.divmod.com>
Message-ID: <014901c99f3f$00deb080$0500a8c0@yoda>

Thanks! sendmail is just what I needed, and its source should help me figure
out the bigger picture.
-Dave
----- Original Message -----
From: "Jean-Paul Calderone" <exarkun at divmod.com>
To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Sent: Monday, March 02, 2009 4:22 PM
Subject: Re: [Twisted-Python] newbie problem with SMTPClient


> On Mon, 2 Mar 2009 15:57:17 -0500, Dave Britton <dave at davebritton.com>
wrote:
> >I love the idea of twisted but I think I must have a twisted learning
disability, as I have gotten nowhere in what ought to be a simple matter.
> >
> >I need to send out emails to small groups from my apache server running a
python cgi using mod_python, but my hosting service doesn't have a MTA.
Instead of learning how to install and configure exim I thought I would use
twisted to make a simple mail client. I started with the tutorial example
that appears at:
>
> It may be that installing exim is actually a better idea.  In order to get
> reliable message deliver, you'll need to handle transient failures.  That
> means persisting state over time (as long as several days) and performing
> redelivery attempts.  However, if you don't mind losing outgoing messages
> when there is a transient failure...
>
> > [snip]
> >
> >This nicely looks up the right MX record and sends out an email, just
what I need. Now I want to expand it to allow me to give it a list of email
addresses to send the message to (not just call this same routine multple
times, which seems wasteful and slow and doesn't use twisted's power to
process the multiple emails in multiple threads), but I'm having terrible
trouble figuring out how to do that, which tells me I'm missing a paradigm
somewhere, there's something I'm not getting.
>
> There is a reason that just calling the top-level function you've written
> once for each email might be wasteful, but I don't think it's the reason
> you're thinking.
>
> If you just naively call getMailExchange(host).addCallback(cbMailExchange)
> once for each email, then you will get parallel processing.  Almost as
soon
> as you call most Twisted APIs, they'll start an operation (to be precise,
> many of them start it immediately - before they even return - and others
> start it when you allow program execution flow to return to the reactor).
> So if you call getMailExchange in a loop, each iteration of the loop will
> start a new operation and they'll all run in parallel.  That seems like
> just what you're after.
>
> The reason this isn't the most efficient solution is that your list of
> email addresses might contain two addresses which have the same mail
> exchange host.  In this case, you could connect to that mail exchange
> once and address your message to both addresses and then deliver the
> message body to the mail exchange just once.  This is why getMailTo
> returns a list.
>
> So I think your other questions aren't directly relevant to this problem,
> but I'll answer them anyway, since they're good questions.
>
> >
> >Trouble 1 is figuring out the right way to pass additional parameters to
callbacks. Is this right:
> >
> >Dosomething(that-returns-a-deferred).addCallback(Then-do-the-next-thing,
extra-parameter1, extraparameter2)
> >
> >The function Then-do-the-next-thing() will receive the deferred returned
results from Dosomething() as its first argument, and extra-parameter1 and
extraparameter2 as the next two. That is as if calling:
> >Then-do-the-next-thing(Result-returned-by-Dosomething(),extra-parameter1,
extraparameter2). Have I got this correct?
>
> Yes, this is right.
>
> >So, if this is right, then where do I want to put the additional argument
that contains the next email address to send, if I iterate through the list
and hand each one to the email sending process like this:
> >
> >elist=['addr1 at domain.com','addr2 at nextdomain.com'...]
> >for e in elist:
> >.... e2={'mxhost':'','toaddr':e}
> >.... getMailExchange(e2).addCallback(cbMailExchange)
> >
>
> I'm not sure why you switched to a dictionary here.  Ignoring that, the
> biggest potential problem with this code snippet is that it creates a
> Deferred (the one returned by getMailExchange) and then drops it on the
> floor (albeit after adding a callback).  You'll almost certainly want to
> build up a list of Deferreds in cases like this, and then use something
> like twisted.internet.defer.gatherResults to find out when they've all
> fired.  Otherwise, you don't really know when your list of operations has
> completed.
>
> As to where to put extra arguments for tracking which email addresses to
> send the message to next, I don't see why you'd want that in this case.
> Your for loop iterates over all the addresses, so none of your callbacks
> should need to know about any more addresses.  That is to say, by the end
> of the for loop, there are no more addresses to which the message needs to
> be sent - you've started sending to all of them already.
>
> >In the tutorial, getMailExchange() is passed just the domain of the
addressee, and the sending out of the email happens when the callback
returns the MX exchange. I changed that to split the email address, so now
it returns both the full address and the mx:
> >
> >def getMailExchange(addr):
> >.... host=addr.split('@')[1]
> >.... def cbMX(mxRecord):
> >.... .... return [addr,str(mxRecord.name)]
> >.... return relaymanager.MXCalculator().getMX(host).addCallback(cbMX)
> >
> >
> >At this point I can't figure out how to get the email address passed to
wherever it needs to go. And I don't know really where it needs to go...
yikes.
>
> Likely nothing in this code cares.  However, the address is going to be
> passed to whatever callback is added to the Deferred this function
> returns - because you've included it in the list returned by cbMX.
>
> >
> >In the tutorial the actual email address is hard coded into the class
SMTPTutorialClient(smtp.ESMTPClient) as a class attribute, mailTo. I need to
change that to be variable.
> >
> >How do I get this value (of mailTo) changed for each of the instances
created by smtpClientFactory = SMTPClientFactory()? I think I must be
confused about the roles of Factories and Protocols.
>
> This is probably simpler than you expected - just override __init__ to
> accept any extra data you need, and then save that data as an instance
> attribute.
>
> >I can't seem to figure out a way that works to get the email address
passed into the system as a variable. Rather than waste people's time by
describing my various failures, I thought I'd just ask for suggestions about
the right twisted way to do it.
>
> Another API you might want to look at is twisted.mail.smtp.sendmail.  It's
> probably rather unfortunate that SMTP client tutorial doesn't cover that
> function.
>
> Hope this helps,
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From bhyde at pobox.com  Sat Mar  7 11:18:54 2009
From: bhyde at pobox.com (Ben Hyde)
Date: Sat, 7 Mar 2009 13:18:54 -0500
Subject: [Twisted-Python] StandardIO flush'n
Message-ID: <784929F0-1D6D-41DE-B83D-955C9594918B@pobox.com>

I'm new to this, but can somebody explain this behavior to me?  Thanks!

bash-3.2$ (echo a; echo b; sleep 1; echo c) | /tmp/bar.py
line: a
line: b
a
b
line: c
c
bash-3.2$ (echo a; echo b; echo c) | /tmp/bar.py
line: a
line: b
line: c
bash-3.2$ cat /tmp/bar.py
#!/usr/bin/env python
from twisted.internet import reactor
from twisted.protocols.basic import LineOnlyReceiver
from twisted.internet.stdio import StandardIO

class MyLineOnlyReceiver(LineOnlyReceiver):
     delimiter = '\n'
     def lineReceived(self, line):
         self.transport.write(line+self.delimiter)
         print "line:", line
     def connectionLost(self, why):
         LineOnlyReceiver.connectionLost(self, why)
         reactor.callWhenRunning(lambda:reactor.stop())

if __name__ == '__main__':
     StandardIO(MyLineOnlyReceiver())
     reactor.run()
bash-3.2$ port info 'py25-twisted'
py25-twisted @8.0.1 (python, devel, net)

Twisted is an event-driven networking framework written in Python.  
Twisted supports TCP,
UDP, SSL/TLS, multicast, Unix sockets, a large number of protocols  
(including HTTP, NNTP,
SSH, IRC, FTP, and others), and much more.
Homepage:    http://www.twistedmatrix.com/

Library Dependencies: python25, py25-zopeinterface
Maintainers:          stechert at macports.org akitada at macports.org
                       openmaintainer at macports.org
bash-3.2$ python -V
Python 2.5.4
bash-3.2$ uname -a
Darwin d72.cozy.org 9.6.0 Darwin Kernel Version 9.6.0: Mon Nov 24  
17:37:00 PST 2008; root:xnu-1228.9.59~1/RELEASE_I386 i386 i386
bash-3.2$



From mg at daimi.au.dk  Sat Mar  7 11:38:46 2009
From: mg at daimi.au.dk (Martin Geisler)
Date: Sat, 07 Mar 2009 19:38:46 +0100
Subject: [Twisted-Python] Re: Reentrant reactor iteration
In-Reply-To: <20090227162723.12853.1884927660.divmod.quotient.14670@henry.divmod.com>
	(Jean-Paul Calderone's message of "Fri, 27 Feb 2009 11:27:23 -0500")
References: <20090227162723.12853.1884927660.divmod.quotient.14670@henry.divmod.com>
Message-ID: <87d4ctqitl.fsf@hbox.dyndns.org>

Jean-Paul Calderone <exarkun at divmod.com> writes:

Hi,

Thanks for the answer. I'm also with the VIFF project and I would like
to explain a bit more about the background for the hack by Marcel.

> On Fri, 27 Feb 2009 15:26:43 +0100, Marcel Keller <mkeller at cs.au.dk> wrote:
>>Hi,
>>
>> I am working on the VIFF project (viff.dk) which uses Twisted. I
>> found out that our code is sometimes inefficient because we are
>> generating many deferreds (maybe about 10000) in a callback. While
>> doing that, no network communication is performed. Therefore, I
>> investigated the possibility of adding a function to the reactor
>> which is called every iteration and from which the iteration could
>> be called safely. Then, we could generate all deferreds in that
>> function and activate the reactor from to time. See the attached
>> patch for details.
>
> So you're doing a ton of work all at once now and you want to split up
> that ton of work into smaller pieces and do it a little at a time?

Sort of. We have overloaded the arithmetic operators in our library, so
people will expect to be able to write

  # xs and ys are big lists of our objects
  dot_product
  for (x, y) in zip(xs, ys):
    dot_product += x * y

Here the multiplications involves network traffic and return Deferreds.
We would like the network traffic for the first multiplication to begin
immediately, *before* the remaining multiplications are done.

Doing all the multiplications up front makes the code block the reactor
and uses an awful lot of RAM. If we let each multiplication trigger the
sending of its data immediately, and if we process incoming messages
along the way, memory can be reclaimed for the earlier multiplications
and the above calculation should run in constant memory.

Sending and processing data in a more even flow makes our benchmark
results better and more consistent from one run to the next.

> If that's the case, then you don't need to modify the reactor, you
> just need to split up the work your code is going. There are a lot of
> techniques for doing this. coiterate and inlineCallbacks are two
> solutions which are closest to "cookie cutter" (ie, you have the least
> flexibility in deciding how to use them).

Right -- we might be able to use these techniques. I haven't looked at
coiterate yet. With inlineCallbacks I guess the code would look
something like this:

  # xs and ys are big lists of our objects
  dot_product
  for (x, y) in zip(xs, ys):
    dot_product += (yield x * y)

which is not so bad, expect that it destroys the nice illusion that x
and y behave like normal integers even though the multiplication
involves network traffic.

> You have a very long, steep, uphill battle to convince me that adding
> support for re-entrant iteration is a good idea.

One problem I can think of is the memory usage associated with a very
deep recursion. Since there is no such thing as tail call optimization
in Python, each level in the recursion will hold onto any local
variables even though they might not be needed any more.

Are there other general problems with having a re-entrant reactor?

-- 
Martin Geisler

VIFF (Virtual Ideal Functionality Framework) brings easy and efficient
SMPC (Secure Multiparty Computation) to Python. See: http://viff.dk/.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 196 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20090307/b0f23125/attachment.sig>

From exarkun at divmod.com  Sat Mar  7 13:04:15 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sat, 7 Mar 2009 15:04:15 -0500
Subject: [Twisted-Python] Re: Reentrant reactor iteration
In-Reply-To: <87d4ctqitl.fsf@hbox.dyndns.org>
Message-ID: <20090307200415.12853.1055105314.divmod.quotient.19796@henry.divmod.com>

On Sat, 07 Mar 2009 19:38:46 +0100, Martin Geisler <mg at daimi.au.dk> wrote:
>Jean-Paul Calderone <exarkun at divmod.com> writes:
>
>Hi,
>
>Thanks for the answer. I'm also with the VIFF project and I would like
>to explain a bit more about the background for the hack by Marcel.
>
>> [snip]
>>
>> So you're doing a ton of work all at once now and you want to split up
>> that ton of work into smaller pieces and do it a little at a time?
>
>Sort of. We have overloaded the arithmetic operators in our library, so
>people will expect to be able to write
>
>  # xs and ys are big lists of our objects
>  dot_product
>  for (x, y) in zip(xs, ys):
>    dot_product += x * y
>
>Here the multiplications involves network traffic and return Deferreds.
>We would like the network traffic for the first multiplication to begin
>immediately, *before* the remaining multiplications are done.
>
>Doing all the multiplications up front makes the code block the reactor
>and uses an awful lot of RAM. If we let each multiplication trigger the
>sending of its data immediately, and if we process incoming messages
>along the way, memory can be reclaimed for the earlier multiplications
>and the above calculation should run in constant memory.

Hm.  I would bet the constant would be pretty high, though.  Things will
only balance out once the network is keeping up with the local for loop.
Actually, I'm not sure why it would be constant at all.  Won't the local
for loop always run much faster than any network operations can happen?
In this case, memory usage will go towards K(local) * set size - K(remote)
* set size, or just O(set size); that is to say, linear.

>Sending and processing data in a more even flow makes our benchmark
>results better and more consistent from one run to the next.

It seems like what you'll really benefit from most is pipelining with a
maximum pipeline depth that's not too big (so as to conserve memory) but
not too small (so as to avoid wasting time on network round trip time).

>> If that's the case, then you don't need to modify the reactor, you
>> just need to split up the work your code is going. There are a lot of
>> techniques for doing this. coiterate and inlineCallbacks are two
>> solutions which are closest to "cookie cutter" (ie, you have the least
>> flexibility in deciding how to use them).
>
>Right -- we might be able to use these techniques. I haven't looked at
>coiterate yet. With inlineCallbacks I guess the code would look
>something like this:
>
>  # xs and ys are big lists of our objects
>  dot_product
>  for (x, y) in zip(xs, ys):
>    dot_product += (yield x * y)
>
>which is not so bad, expect that it destroys the nice illusion that x
>and y behave like normal integers even though the multiplication
>involves network traffic.

Perhaps with coiterate this might look something like...

    def op(xs, ys):
        dot_product = 0
        for (x, y) in zip(xs, ys):
            dot_product += x * y
            yield

        yield dot_product

    d = coiterate(op(xs, ys))

This is flawed, but maybe it can be fixed.  What's good about it is that
it doesn't try to drive the reactor re-entrantly. :)  It also avoids the
yield in the += and * operations, which somewhat preserves your illusion
of normalcy (I'm not saying I like that illusion, but I'll leave that aside
for now).

What's bad about it is that it still lets the local loop run arbitrarily
far ahead of the results from the network, giving you unbounded memory
usage.  To fix that, it should yield a Deferred every once in a while.
The reason I leave it flawed here is that it's a little tricky to figure
out which Deferred to yield.  What would be great would be to yield the
Deferred for an operation which preceeds the most recently executed
operation by some number of operations.  The number of operations by
which it preceeds the most recent will be your pipeline depth (roughly).
The effect this has on coiterate is to cause your local loop to cease to
execute until that Deferred has fired.  By making it a Deferred for an
operation some time /before/ the most recent operation, you keep the
network busy and avoid wasting time on round trip times.  Once the Deferred
fires, your loop gets run a few more times which has the effect of putting
more work into the pipeline - until you've got enough extra work to keep
things from stalling again, and then coiterate puts you to sleep for a
while again.

>> You have a very long, steep, uphill battle to convince me that adding
>> support for re-entrant iteration is a good idea.
>
>One problem I can think of is the memory usage associated with a very
>deep recursion. Since there is no such thing as tail call optimization
>in Python, each level in the recursion will hold onto any local
>variables even though they might not be needed any more.
>
>Are there other general problems with having a re-entrant reactor?

One general problem is simply that the reactor is not written with this
in mind.  So with the current implementation, even including the patch
Marcel contributed, it doesn't work, period.  When I say "doesn't work",
I mean that there are cases which will simply result in incorrect behavior,
though there may be other cases where everything does work out as you
expect.  Going along with this, it's quite a bit harder to test that
things work when re-entrancy is allowed or expected than if it isn't, so
even if all of the current reactor implementations were made re-entrant,
there would likely be a higher rate of defects related to this in the
future, simply because it's harder.

This isn't limited solely to the reactor, either.  A re-entrant reactor
almost certainly means that application code will be invoked re-entrantly.
This is actually the case already, unfortunately, and it is a bit of an
open question as to what should be done about it.  A very common bug I
find (and write! :() in Twisted applications is failure to handle various
forms of re-entrancy correctly.  This is an existing issue with Twisted,
not related to this proposed change, but making this change would only
make the problem worse and essentially destroy and hope for ever making it
better.

Actually, that general problem is so general that I can't really think of
any others to discuss, so I'll leave it at that for now. :)  If you want,
I can probably share some specific examples of how re-entrancy leads to
surprising bugs in unexpected places (probably from real programs, too :/).

Jean-Paul



From mg at daimi.au.dk  Sat Mar  7 14:58:01 2009
From: mg at daimi.au.dk (Martin Geisler)
Date: Sat, 07 Mar 2009 22:58:01 +0100
Subject: [Twisted-Python] Re: Reentrant reactor iteration
In-Reply-To: <20090307200415.12853.1055105314.divmod.quotient.19796@henry.divmod.com>
	(Jean-Paul Calderone's message of "Sat, 7 Mar 2009 15:04:15 -0500")
References: <20090307200415.12853.1055105314.divmod.quotient.19796@henry.divmod.com>
Message-ID: <87r619ov12.fsf@hbox.dyndns.org>

Jean-Paul Calderone <exarkun at divmod.com> writes:

> On Sat, 07 Mar 2009 19:38:46 +0100, Martin Geisler <mg at daimi.au.dk> wrote:
>
>> We have overloaded the arithmetic operators in our library, so people
>> will expect to be able to write
>>
>>  # xs and ys are big lists of our objects
>>  dot_product
>>  for (x, y) in zip(xs, ys):
>>    dot_product += x * y
>>
>> Here the multiplications involves network traffic and return
>> Deferreds. We would like the network traffic for the first
>> multiplication to begin immediately, *before* the remaining
>> multiplications are done.
>>
>> Doing all the multiplications up front makes the code block the
>> reactor and uses an awful lot of RAM. If we let each multiplication
>> trigger the sending of its data immediately, and if we process
>> incoming messages along the way, memory can be reclaimed for the
>> earlier multiplications and the above calculation should run in
>> constant memory.
>
> Hm.  I would bet the constant would be pretty high, though.  Things will
> only balance out once the network is keeping up with the local for loop.
> Actually, I'm not sure why it would be constant at all.  Won't the local
> for loop always run much faster than any network operations can happen?

Yeah, you're right. Our results are very biased by only testing on a
local area network so far...

Three parties execute the same code, and each multiplication is done
when we have heard from the two others. With a fast network we can move
data around as fast as we can do the local operations needed (some
additions and multiplications of numbers with 65 bits or more).

> In this case, memory usage will go towards K(local) * set size -
> K(remote) * set size, or just O(set size); that is to say, linear.

Right, and that hints that the real goal is to throttle the
multiplications (like you point out below).

>>Sending and processing data in a more even flow makes our benchmark
>>results better and more consistent from one run to the next.
>
> It seems like what you'll really benefit from most is pipelining with a
> maximum pipeline depth that's not too big (so as to conserve memory) but
> not too small (so as to avoid wasting time on network round trip time).

Yes, that is exactly what we want!

>>Right -- we might be able to use these techniques. I haven't looked at
>>coiterate yet. With inlineCallbacks I guess the code would look
>>something like this:
>>
>>  # xs and ys are big lists of our objects
>>  dot_product
>>  for (x, y) in zip(xs, ys):
>>    dot_product += (yield x * y)
>>
>>which is not so bad, expect that it destroys the nice illusion that x
>>and y behave like normal integers even though the multiplication
>>involves network traffic.
>
> Perhaps with coiterate this might look something like...
>
>    def op(xs, ys):
>        dot_product = 0
>        for (x, y) in zip(xs, ys):
>            dot_product += x * y
>            yield
>
>        yield dot_product
>
>    d = coiterate(op(xs, ys))

Cool, thanks for the example! That really helps in understanding the
alternatives...

> This is flawed, but maybe it can be fixed. What's good about it is
> that it doesn't try to drive the reactor re-entrantly. :) It also
> avoids the yield in the += and * operations, which somewhat preserves
> your illusion of normalcy (I'm not saying I like that illusion, but
> I'll leave that aside for now).

Hehe :-) I'm also not sure what to think of the illusion, but it just
came very naturally with Twisted and the Deferreds. On the other hand it
breaks down all the time since one still needs to directly add callbacks
to do certain things...

> What's bad about it is that it still lets the local loop run arbitrarily
> far ahead of the results from the network, giving you unbounded memory
> usage.  To fix that, it should yield a Deferred every once in a while.
> The reason I leave it flawed here is that it's a little tricky to figure
> out which Deferred to yield.  What would be great would be to yield the
> Deferred for an operation which preceeds the most recently executed
> operation by some number of operations.  The number of operations by
> which it preceeds the most recent will be your pipeline depth (roughly).
> The effect this has on coiterate is to cause your local loop to cease to
> execute until that Deferred has fired.  By making it a Deferred for an
> operation some time /before/ the most recent operation, you keep the
> network busy and avoid wasting time on round trip times.  Once the Deferred
> fires, your loop gets run a few more times which has the effect of putting
> more work into the pipeline - until you've got enough extra work to keep
> things from stalling again, and then coiterate puts you to sleep for a
> while again.

Thanks a lot for the info! I think I'll forward it to the VIFF mailing
list and discuss a bit further there.

>>Are there other general problems with having a re-entrant reactor?
>
> One general problem is simply that the reactor is not written with this
> in mind.  So with the current implementation, even including the patch
> Marcel contributed, it doesn't work, period.  [...]

Hmm, lots of good reasons... :-/ Marcel also mentioned that his hack
made some unit tests fail, but I don't know yet if that was Twisted or
VIFF tests. Not that it matters much -- this change should of course be
invisible to existing code.

-- 
Martin Geisler

VIFF (Virtual Ideal Functionality Framework) brings easy and efficient
SMPC (Secure Multiparty Computation) to Python. See: http://viff.dk/.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 196 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20090307/1f6459cf/attachment.sig>

From andrewfr_ice at yahoo.com  Sat Mar  7 15:10:40 2009
From: andrewfr_ice at yahoo.com (Andrew Francis)
Date: Sat, 7 Mar 2009 14:10:40 -0800 (PST)
Subject: [Twisted-Python] URL not Found Re: Twisted developers: please
	donate your time!
Message-ID: <38640.89218.qm@web34205.mail.mud.yahoo.com>


Hi Jean-Paul:

I am not sure if I should take this off-line....

>http://twistedmatrix.com/trac/query?>status=new&status=assigned&status=reopened&keywords=~documentation&order=p>riority shows all of the open tickets with the "documentation" keyword.  >So there's a lot to choose from, many are about the reactor.  

Okay I am looking through the list.

For ticket 1138 (cool movie), when I access the URL:

http://twistedmatrix.com/projects/core/documentation/howto/tutorial/deferred_tutorial.html

I get, URL not found. Which deferred tutorial are you referring to? "Deferreds are Beautiful (A Tutorial) at :

http://twistedmatrix.com/projects/core/documentation/howto/deferredindepth.html. 

I see the reference to python.util there.

>There's also one, #1009, about deferredGenerator/inlineCallbacks.  I >think you're somewhat familiar with those?

I seldom use deferredGenerators/inlineCallbacks but I have followed the discussions. Let me review what has been said and I will summarize in a separate post to see if folks are cool with what I have said. 

>http://twistedmatrix.com/trac/ticket/1020

I see it is not high priority but I may be able to provide insights (more like steal from John Ousterhout :-)).

>It's also certainly the case that there are tickets open for reactor >problems, so if you feel comfortable with that part of Twisted, there's >plenty to contribute to.

Okay.

Cheers,
Andrew





      



From ian.fountain at gmail.com  Sat Mar  7 21:06:14 2009
From: ian.fountain at gmail.com (Ian Fountain)
Date: Sat, 7 Mar 2009 23:06:14 -0500
Subject: [Twisted-Python] Error when trying to import reactor
Message-ID: <22ccbfd0903072006jdd604a8n5fc4c9d1c519418f@mail.gmail.com>

I am new to all this so you will have to forgive me. I have a vista machine
with python 2.5 on it and I just installed twisted (py2.5), pyOpenSSL
(py2.5), and pycrypto (py2.5) but when I try to do the following:
"from twisted.internet import reactor" I get the following error:
"This application has failed to start because libeay32.dll was not found.
Re-installing the application may fix this problem."
I then found a copy of libeay32.dll and put it in my System32 folder and
then get the following error:
"The procedure entry point ERR_load_RAND_string could not be located in the
dynamic link library libeay32.dll."
I am currently out of ideas on what to do. Any help would be appreciated.
Thanks,
Ian
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090307/ea2318cd/attachment.html>

From exarkun at twistedmatrix.com  Sat Mar  7 22:05:10 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 08 Mar 2009 05:05:10 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1236488710.93.343246503@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090308/587e397d/attachment.html>

From florent.aide at gmail.com  Sun Mar  8 03:33:00 2009
From: florent.aide at gmail.com (Florent Aide)
Date: Sun, 8 Mar 2009 10:33:00 +0100
Subject: [Twisted-Python] Error when trying to import reactor
In-Reply-To: <22ccbfd0903072006jdd604a8n5fc4c9d1c519418f@mail.gmail.com>
References: <22ccbfd0903072006jdd604a8n5fc4c9d1c519418f@mail.gmail.com>
Message-ID: <628981a60903080133m6f40cc74oeca93d43a3ffbed6@mail.gmail.com>

On Sun, Mar 8, 2009 at 5:06 AM, Ian Fountain <ian.fountain at gmail.com> wrote:
> I am new to all this so you will have to forgive me. I have a vista machine
> with python 2.5 on it and I just installed twisted (py2.5), pyOpenSSL
> (py2.5), and pycrypto (py2.5) but when I try to do the following:
> "from twisted.internet import reactor" I get the following error:
> "This application has failed to start because libeay32.dll was not found.
> Re-installing the application may fix this problem."
> I then found a copy of libeay32.dll and put it in my System32 folder and
> then get the following error:
> "The procedure entry point ERR_load_RAND_string could not be located in the
> dynamic link library libeay32.dll."
> I am currently out of ideas on what to do. Any help would be appreciated.
> Thanks,

You need to have openssl install on your machine. Either download the
source and compile by yourself of use the binaries from there:

http://www.openssl.org/related/binaries.html

Florent.



From glyph at divmod.com  Sun Mar  8 06:17:22 2009
From: glyph at divmod.com (glyph at divmod.com)
Date: Sun, 08 Mar 2009 12:17:22 -0000
Subject: [Twisted-Python] Error when trying to import reactor
In-Reply-To: <628981a60903080133m6f40cc74oeca93d43a3ffbed6@mail.gmail.com>
References: <22ccbfd0903072006jdd604a8n5fc4c9d1c519418f@mail.gmail.com>
	<628981a60903080133m6f40cc74oeca93d43a3ffbed6@mail.gmail.com>
Message-ID: <20090308121722.12555.607067322.divmod.xquotient.5506@weber.divmod.com>


On 09:33 am, florent.aide at gmail.com wrote:
>On Sun, Mar 8, 2009 at 5:06 AM, Ian Fountain <ian.fountain at gmail.com> 
>wrote:
>>I am new to all this so you will have to forgive me. I have a vista 
>>machine
>>with python 2.5 on it and I just installed twisted (py2.5), pyOpenSSL
>>(py2.5), and pycrypto (py2.5) but when I try to do the following:
>>"from twisted.internet import reactor" I get the following error:
>>"This application has failed to start because libeay32.dll was not 
>>found.
>>Re-installing the application may fix this problem."
>>I then found a copy of libeay32.dll and put it in my System32 folder 
>>and
>>then get the following error:
>>"The procedure entry point ERR_load_RAND_string could not be located 
>>in the
>>dynamic link library libeay32.dll."
>>I am currently out of ideas on what to do. Any help would be 
>>appreciated.
>>Thanks,
>
>You need to have openssl install on your machine. Either download the
>source and compile by yourself of use the binaries from there:

More importantly you need to have a *matching* version of pyopenssl and 
openssl installed.

Please don't don't manually put libraries into your System32 folder; use 
packages, or put the dlls somewhere else where you are more likely to 
find them.  It can make problems like this very hard to diagnose, when 
later you come back and try to properly install openssl, but the version 
in your system32 directory is somehow getting picked up instead of the 
version that you just installed.

I wanted to refer you to some documentation from here, but the pyopenssl 
website is oddly silent on which version of OpenSSL to use on Windows. 
Would whoever built 
http://sourceforge.net/project/showfiles.php?group_id=31249&package_id=90289 
please state which version of win32 openssl it was built against?  I'm 
guessing 0.9.8j, but I'm not too confident in that guess...



From ian.fountain at gmail.com  Sun Mar  8 09:30:34 2009
From: ian.fountain at gmail.com (Ian Fountain)
Date: Sun, 8 Mar 2009 11:30:34 -0400
Subject: [Twisted-Python] Error when trying to import reactor
In-Reply-To: <20090308121722.12555.607067322.divmod.xquotient.5506@weber.divmod.com>
References: <22ccbfd0903072006jdd604a8n5fc4c9d1c519418f@mail.gmail.com>
	<628981a60903080133m6f40cc74oeca93d43a3ffbed6@mail.gmail.com>
	<20090308121722.12555.607067322.divmod.xquotient.5506@weber.divmod.com>
Message-ID: <22ccbfd0903080830o5bcc3af7h75f3f2b5554e9bc6@mail.gmail.com>

Thanks for the quick responses! I admit that putting the dlls directly into
the System32 folder was a rookie move, but I desperately wanted to get
twisted up and running :). So now I have a few more questions if you don't
mind answering them. Like I said before, I am a rookie so I am simply
following whatever it tells me to do in the O'Reilly Twisted Network
Programming Essentials book so I downloaded and installed the following:
pyOpenSSL-0.8.winxp32-py2.5.msi
pycrypto-2.0.1.win32-py2.5.exe
Twisted_NoDocs-8.2.0.win32-py2.5.exe
So do I still have to install openSSL on my machine even though I installed
all of those? Also do I have to use Python 2.5 if I want to use pycrypto and
pyOpenSSL? And finally I was looking around and I didn't see anything that
stated that Vista is even supported. Could that be another problem I might
run into. Thanks again for all the help.



On Sun, Mar 8, 2009 at 8:17 AM, <glyph at divmod.com> wrote:

>
> On 09:33 am, florent.aide at gmail.com wrote:
>
>> On Sun, Mar 8, 2009 at 5:06 AM, Ian Fountain <ian.fountain at gmail.com>
>> wrote:
>>
>>> I am new to all this so you will have to forgive me. I have a vista
>>> machine
>>> with python 2.5 on it and I just installed twisted (py2.5), pyOpenSSL
>>> (py2.5), and pycrypto (py2.5) but when I try to do the following:
>>> "from twisted.internet import reactor" I get the following error:
>>> "This application has failed to start because libeay32.dll was not found.
>>> Re-installing the application may fix this problem."
>>> I then found a copy of libeay32.dll and put it in my System32 folder and
>>> then get the following error:
>>> "The procedure entry point ERR_load_RAND_string could not be located in
>>> the
>>> dynamic link library libeay32.dll."
>>> I am currently out of ideas on what to do. Any help would be appreciated.
>>> Thanks,
>>>
>>
>> You need to have openssl install on your machine. Either download the
>> source and compile by yourself of use the binaries from there:
>>
>
> More importantly you need to have a *matching* version of pyopenssl and
> openssl installed.
>
> Please don't don't manually put libraries into your System32 folder; use
> packages, or put the dlls somewhere else where you are more likely to find
> them.  It can make problems like this very hard to diagnose, when later you
> come back and try to properly install openssl, but the version in your
> system32 directory is somehow getting picked up instead of the version that
> you just installed.
>
> I wanted to refer you to some documentation from here, but the pyopenssl
> website is oddly silent on which version of OpenSSL to use on Windows. Would
> whoever built
> http://sourceforge.net/project/showfiles.php?group_id=31249&package_id=90289please state which version of win32 openssl it was built against?  I'm
> guessing 0.9.8j, but I'm not too confident in that guess...
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090308/ac07d89a/attachment.html>

From florent.aide at gmail.com  Sun Mar  8 10:05:00 2009
From: florent.aide at gmail.com (Florent Aide)
Date: Sun, 8 Mar 2009 17:05:00 +0100
Subject: [Twisted-Python] Error when trying to import reactor
In-Reply-To: <22ccbfd0903080830o5bcc3af7h75f3f2b5554e9bc6@mail.gmail.com>
References: <22ccbfd0903072006jdd604a8n5fc4c9d1c519418f@mail.gmail.com>
	<628981a60903080133m6f40cc74oeca93d43a3ffbed6@mail.gmail.com>
	<20090308121722.12555.607067322.divmod.xquotient.5506@weber.divmod.com>
	<22ccbfd0903080830o5bcc3af7h75f3f2b5554e9bc6@mail.gmail.com>
Message-ID: <628981a60903080905h72f22d85g3323b656ec31a2fd@mail.gmail.com>

On Sun, Mar 8, 2009 at 4:30 PM, Ian Fountain <ian.fountain at gmail.com> wrote:
> Thanks for the quick responses! I admit that putting the dlls directly into
> the System32 folder was a rookie move, but I desperately wanted to get

And I had not fully read your email because I did not see that you
manually copied the file to system32, hence my short answer.

> twisted up and running :). So now I have a few more questions if you don't
> mind answering them. Like I said before, I am a rookie so I am simply
> following whatever it tells me to do in the O'Reilly Twisted Network
> Programming Essentials book so I downloaded and installed the following:
> pyOpenSSL-0.8.winxp32-py2.5.msi
> pycrypto-2.0.1.win32-py2.5.exe
> Twisted_NoDocs-8.2.0.win32-py2.5.exe
> So do I still have to install openSSL on my machine even though I installed

Yes. And as Glyph suggested you should use the right version I am
using pyopenssl 0.8 (from sourceforge oct 2008) with OpenSSL 0.9.8i
(from the installer I pointed to)
If using the installer I pointed to earlier, make sure you answer
"copy to /bin" instead of copy to system32 (as Glyph stated above)

> all of those? Also do I have to use Python 2.5 if I want to use pycrypto and

Yep. You installed the libraries for python 2.5 only (see the names of
the files) so you should use python 2.5 if you want to be able to
import them.

> pyOpenSSL? And finally I was looking around and I didn't see anything that
> stated that Vista is even supported. Could that be another problem I might
> run into. Thanks again for all the help.

I am currently working on Vista without problem.

Florent.



From ian.fountain at gmail.com  Sun Mar  8 10:24:54 2009
From: ian.fountain at gmail.com (Ian Fountain)
Date: Sun, 8 Mar 2009 12:24:54 -0400
Subject: [Twisted-Python] Error when trying to import reactor
In-Reply-To: <628981a60903080905h72f22d85g3323b656ec31a2fd@mail.gmail.com>
References: <22ccbfd0903072006jdd604a8n5fc4c9d1c519418f@mail.gmail.com>
	<628981a60903080133m6f40cc74oeca93d43a3ffbed6@mail.gmail.com>
	<20090308121722.12555.607067322.divmod.xquotient.5506@weber.divmod.com>
	<22ccbfd0903080830o5bcc3af7h75f3f2b5554e9bc6@mail.gmail.com>
	<628981a60903080905h72f22d85g3323b656ec31a2fd@mail.gmail.com>
Message-ID: <22ccbfd0903080924q11e10c0eq684dba938dc94048@mail.gmail.com>

Well Florent and Glyph, you saved the day :). I downloaded and installed
OpenSSL now no errors. One last question... before installing OpenSSL it
recommended I get the Visual C++ 2008 Redistributables (which I did)... was
this necessary? Thanks again for all your help... I am sure I will be back
with more questions soon :).

On Sun, Mar 8, 2009 at 12:05 PM, Florent Aide <florent.aide at gmail.com>wrote:

> On Sun, Mar 8, 2009 at 4:30 PM, Ian Fountain <ian.fountain at gmail.com>
> wrote:
> > Thanks for the quick responses! I admit that putting the dlls directly
> into
> > the System32 folder was a rookie move, but I desperately wanted to get
>
> And I had not fully read your email because I did not see that you
> manually copied the file to system32, hence my short answer.
>
> > twisted up and running :). So now I have a few more questions if you
> don't
> > mind answering them. Like I said before, I am a rookie so I am simply
> > following whatever it tells me to do in the O'Reilly Twisted Network
> > Programming Essentials book so I downloaded and installed the following:
> > pyOpenSSL-0.8.winxp32-py2.5.msi
> > pycrypto-2.0.1.win32-py2.5.exe
> > Twisted_NoDocs-8.2.0.win32-py2.5.exe
> > So do I still have to install openSSL on my machine even though I
> installed
>
> Yes. And as Glyph suggested you should use the right version I am
> using pyopenssl 0.8 (from sourceforge oct 2008) with OpenSSL 0.9.8i
> (from the installer I pointed to)
> If using the installer I pointed to earlier, make sure you answer
> "copy to /bin" instead of copy to system32 (as Glyph stated above)
>
> > all of those? Also do I have to use Python 2.5 if I want to use pycrypto
> and
>
> Yep. You installed the libraries for python 2.5 only (see the names of
> the files) so you should use python 2.5 if you want to be able to
> import them.
>
> > pyOpenSSL? And finally I was looking around and I didn't see anything
> that
> > stated that Vista is even supported. Could that be another problem I
> might
> > run into. Thanks again for all the help.
>
> I am currently working on Vista without problem.
>
> Florent.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090308/ad5cb362/attachment.html>

From markus at bluegap.ch  Mon Mar  9 03:17:20 2009
From: markus at bluegap.ch (Markus Wanner)
Date: Mon, 09 Mar 2009 10:17:20 +0100
Subject: [Twisted-Python] sending large files from web2 http server
In-Reply-To: <20090305154549.12853.624525997.divmod.quotient.18633@henry.divmod.com>
References: <20090305154549.12853.624525997.divmod.quotient.18633@henry.divmod.com>
Message-ID: <49B4DEA0.5050307@bluegap.ch>

Hi,

Jean-Paul Calderone wrote:
> I haven't looked at how web2 handles IByteStream providers, but my first
> guess would be that this is an example of a somewhat common bug where
> Deferreds are chained to an arbitrary length based on application data
> and when there's too much application data, the chain gets too long (a
> limit imposed by how much recursion is possible when unwinding the chain),
> and you get this failure.

Okay, thanks for this hint, I'll investigate.

> The main focus of web development in Twisted now is Twisted Web, not
> Twisted Web2.

That surprises me, but it's certainly good to know.

I've mostly used web2 so far, because I thought it was meant to replace
twisted.web some day. The read-me-first page of twisted web2 [1] still
makes it sound like twisted.web is to be obsoleted, soon.

Shall I port my applications to twisted.web to be more future-proof?

> However, if you can supply a patch which fixes this
> (along with unit tests, please :), then we'd be happy to apply it.

I'll try... but I rather suspect the bug to be in my own code. ;-)

Regards

Markus Wanner


[1]: the "read this page first" of web2:
http://twistedmatrix.com/trac/wiki/WebDevelopmentWithTwisted



From markus at bluegap.ch  Mon Mar  9 03:18:39 2009
From: markus at bluegap.ch (Markus Wanner)
Date: Mon, 09 Mar 2009 10:18:39 +0100
Subject: [Twisted-Python] sending large files from web2 http server
In-Reply-To: <f055221a0903061025h2c9ca26ftbadd18b566d47446@mail.gmail.com>
References: <49AFEDBB.3090402@bluegap.ch>	<20090305154549.12853.624525997.divmod.quotient.18633@henry.divmod.com>
	<f055221a0903061025h2c9ca26ftbadd18b566d47446@mail.gmail.com>
Message-ID: <49B4DEEF.2070403@bluegap.ch>

Hi,

David Reid wrote:
> I think this probably has something to do with the fact the IByteStream.read
> may optionally return a Deferred making it quite easy to write code that
> accidentally chain Deferreds to infinity and beyond.  Such as if you're
> calling IByteStream.read in the callback of another Deferred and returning
> the result.  Sometimes the read method will return a Deferred, sometimes
> it'll just return your data.  Without reading the implementation of the
> provider you're using it's not easy to know which it'll do when.

Thank you, too. I'll investigate and try to come up with a simple test
case, if possible and reasonable.

Regards

Markus Wanner




From petshmidt at googlemail.com  Mon Mar  9 06:02:01 2009
From: petshmidt at googlemail.com (Pet)
Date: Mon, 9 Mar 2009 13:02:01 +0100
Subject: [Twisted-Python] twistd tap file are not created
Message-ID: <b460e9630903090502h1b8af2e3p8730bae27bce4fcb@mail.gmail.com>

Hello,

I'm trying an example from twisted book and when I run this:
twistd -n reverse_app.py

application works, but no .tap file is created

Another question, how are twisted daemons actually stopped?

Pet

reverse_app.py
from twisted.application import service
import reverse

application = service.Application("Reverser")
reverserService = reverse.ReverserService()
reverserService.setServiceParent(application)



reverse.py:
from twisted.application import service, internet
from twisted.internet import protocol, reactor
from twisted.protocols import basic

def reverse(string):
    return string[::-1]

class ReverserProtocol(basic.LineReceiver):
    def lineReceived(self, line):
        if hasattr(self, 'handle_' + line):
            getattr(self, 'handle_' + line)()
        else:
            self.sendLine(reverse(line))

    def handle_quit(self):
        self.transport.loseConnection()

class ReverserFactory(protocol.ServerFactory):
    protocol = ReverserProtocol

class ReverserService(internet.TCPServer):
    def _  _init_  _(self):
        internet.TCPServer.__init__(self, 2323, ReverserFactory())



From aronbierbaum at gmail.com  Mon Mar  9 08:17:14 2009
From: aronbierbaum at gmail.com (Aron Bierbaum)
Date: Mon, 9 Mar 2009 09:17:14 -0500
Subject: [Twisted-Python] _Win32Waker
In-Reply-To: <20090306125153.12853.504773560.divmod.quotient.19159@henry.divmod.com>
References: <34457a4c0903051449m7b4845e1yd402d7287773fd2e@mail.gmail.com>
	<20090306125153.12853.504773560.divmod.quotient.19159@henry.divmod.com>
Message-ID: <34457a4c0903090717x92b0366x3a524e9577ba15b7@mail.gmail.com>

I have been unable to reproduce this problem on multiple machines that
I have tested on. Also I have tried changing various network settings
on my machine without any change. Do you have any ideas what I should
be looking for?

Thanks,
Aron

On Fri, Mar 6, 2009 at 7:51 AM, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> On Thu, 5 Mar 2009 16:49:15 -0600, Aron Bierbaum <aronbierbaum at gmail.com>
> wrote:
>>
>> I have been using a custom Qt4 reactor that derives from
>> PosixReactorBase. As a result it creates a _Win32Waker to allow
>> threads and signals to wake up the IO thread. It seems though that the
>> current implementation only works about half of the time. The other
>> half it exists with :
>>
>>  File "...\Lib\python2.6\site-packages\twisted\internet\posixbase.py",
>> line 170, in __init__
>>   ReactorBase.__init__(self)
>>  File "...\Lib\python2.6\site-packages\twisted\internet\base.py",
>> line 424, in __init__
>>   self._initThreads()
>>  File "...\Lib\python2.6\site-packages\twisted\internet\base.py",
>> line 813, in _initThreads
>>   self.installWaker()
>>  File "...\Lib\python2.6\site-packages\twisted\internet\posixbase.py",
>> line 206, in installWaker
>>   self.waker = _Waker(self)
>>  File "...\Lib\python2.6\site-packages\twisted\internet\posixbase.py",
>> line 77, in __init__
>>   client.connect(server.getsockname())
>>  File "<string>", line 1, in connect
>> socket.error: [Errno 10049] The requested address is not valid in its
>> context
>>
>> I have attached a simple test that shows that the following code does
>> not always return "127.0.0.1", but sometimes returns "0.0.0.0" as the
>> IP address.
>>
>>       # Following select_trigger (from asyncore)'s example;
>>       server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
>>       client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
>>       client.setsockopt(socket.IPPROTO_TCP, 1, 1)
>>       server.bind(('127.0.0.1', 0))
>>       server.listen(1)
>>       client.connect(server.getsockname())
>>
>> My current workaround just calls the following instead:
>>
>>       client.connect(('127.0.0.1', server.getsockname()[1]))
>>
>> Any ideas on what is really causing the error? If there is not a
>> better solution can this be added to trunk for future releases?
>
> It's definitely true that you can't connect to "0.0.0.0" on Windows, and
> various parts of Twisted try to deal with this in some way already.  It
> isn't clear to me why that getsockname() isn't returning "127.0.0.1" though.
> I expect it's due to some configuration change or third-party networking
> software on the Windows machine.  Do you think you can track that down?
> That will make it much easier to think about the problem and the solution.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From exarkun at divmod.com  Mon Mar  9 08:36:11 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 9 Mar 2009 09:36:11 -0500
Subject: [Twisted-Python] _Win32Waker
In-Reply-To: <34457a4c0903090717x92b0366x3a524e9577ba15b7@mail.gmail.com>
Message-ID: <20090309143611.12853.873370890.divmod.quotient.20775@henry.divmod.com>

On Mon, 9 Mar 2009 09:17:14 -0500, Aron Bierbaum <aronbierbaum at gmail.com> wrote:
>I have been unable to reproduce this problem on multiple machines that
>I have tested on. Also I have tried changing various network settings
>on my machine without any change. Do you have any ideas what I should
>be looking for?

Not really, sorry.  I know that behavior often differs subtly or grossly
from Windows machine to Windows machine, but not why.

Jean-Paul



From drew.smathers at gmail.com  Mon Mar  9 14:02:10 2009
From: drew.smathers at gmail.com (Drew Smathers)
Date: Mon, 9 Mar 2009 16:02:10 -0400
Subject: [Twisted-Python] twistd tap file are not created
In-Reply-To: <b460e9630903090502h1b8af2e3p8730bae27bce4fcb@mail.gmail.com>
References: <b460e9630903090502h1b8af2e3p8730bae27bce4fcb@mail.gmail.com>
Message-ID: <368574aa0903091302j346fd465w3c6b329ced660924@mail.gmail.com>

On Mon, Mar 9, 2009 at 8:02 AM, Pet <petshmidt at googlemail.com> wrote:
> Hello,
>
> I'm trying an example from twisted book and when I run this:
> twistd -n reverse_app.py
>
> application works, but no .tap file is created
>

Are you sure the book states you can build tap files with twistd?
mktap is the program for that.  Nonetheless, .tap files are
deprecated:

http://twistedmatrix.com/projects/core/documentation/howto/tap.html#auto1

> Another question, how are twisted daemons actually stopped?
>

With the UNIX kill command ;)

$ kill `cat twisted.pid`

Until this (http://twistedmatrix.com/trac/ticket/823) is resolved.

-Drew



From petshmidt at googlemail.com  Mon Mar  9 14:56:40 2009
From: petshmidt at googlemail.com (Pet)
Date: Mon, 9 Mar 2009 21:56:40 +0100
Subject: [Twisted-Python] twistd tap file are not created
In-Reply-To: <368574aa0903091302j346fd465w3c6b329ced660924@mail.gmail.com>
References: <b460e9630903090502h1b8af2e3p8730bae27bce4fcb@mail.gmail.com>
	<368574aa0903091302j346fd465w3c6b329ced660924@mail.gmail.com>
Message-ID: <b460e9630903091356r78a5c75dm61437b39b4d97eb@mail.gmail.com>

On Mon, Mar 9, 2009 at 9:02 PM, Drew Smathers <drew.smathers at gmail.com> wrote:
> On Mon, Mar 9, 2009 at 8:02 AM, Pet <petshmidt at googlemail.com> wrote:
>> Hello,
>>
>> I'm trying an example from twisted book and when I run this:
>> twistd -n reverse_app.py
>>
>> application works, but no .tap file is created
>>
>
> Are you sure the book states you can build tap files with twistd?

Yes

> mktap is the program for that.  Nonetheless, .tap files are
> deprecated:

I don't really need them, at least by now. I've just wanted be sure
everything works fine

>
> http://twistedmatrix.com/projects/core/documentation/howto/tap.html#auto1
>
>> Another question, how are twisted daemons actually stopped?
>>
>
> With the UNIX kill command ;)
>
> $ kill `cat twisted.pid`
>
> Until this (http://twistedmatrix.com/trac/ticket/823) is resolved.

I've wrote little shell script for that. But it doesn't check if
commands are successfully executed or if app already running (status).
Anyway it works for me in that simple way.


>
> -Drew
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From kashes911 at gmail.com  Tue Mar 10 08:04:51 2009
From: kashes911 at gmail.com (kartik rustagi)
Date: Tue, 10 Mar 2009 19:34:51 +0530
Subject: [Twisted-Python] Gsoc 2009
Message-ID: <86ae3510903100704u2958c754p6e2767a2f2c10d04@mail.gmail.com>

Hello everyone,

Is twisted applying as an organization in this year's Gsoc? I as a
student will be interested in working for it.

Regards
Kartik Rustagi



From jkv at unixcluster.dk  Tue Mar 10 08:16:03 2009
From: jkv at unixcluster.dk (jkv)
Date: Tue, 10 Mar 2009 15:16:03 +0100
Subject: [Twisted-Python] getting sshsimpleserver.py to work within a wrapper
Message-ID: <49B67623.10009@unixcluster.dk>

Hi,

I just recently got aware of twisted and im currently playing around 
with it.
Is there any way to make reactor.listen listen on stdio instead of a 
real network connection?

In  one of the examples (sshsimpleserver.py) reactor.listenTCP is used 
to listen on the network socket, as far as i can read from the twisted 
core documentation there are no builtin way to make reactor.listen* 
listen on stdin instead... Any hints?

Regards,
jkv



From bhyde at pobox.com  Tue Mar 10 08:39:10 2009
From: bhyde at pobox.com (Ben Hyde)
Date: Tue, 10 Mar 2009 10:39:10 -0400
Subject: [Twisted-Python] getting sshsimpleserver.py to work within a
	wrapper
In-Reply-To: <49B67623.10009@unixcluster.dk>
References: <49B67623.10009@unixcluster.dk>
Message-ID: <225FCFFC-9AF7-4F1D-950F-545E86763EB9@pobox.com>

On Mar 10, 2009, at 10:16 AM, jkv wrote:
> Hi,
>
> I just recently got aware of twisted and im currently playing around  
> with it.
> Is there any way to make reactor.listen listen on stdio instead of a  
> real network connection?
>
> In  one of the examples (sshsimpleserver.py) reactor.listenTCP is  
> used to listen on the network socket, as far as i can read from the  
> twisted core documentation there are no builtin way to make  
> reactor.listen* listen on stdin instead... Any hints?

Take look at twisted.internet.stdio.StandardIO.

I'm new to this twisted stuff, so no doubt I've gotten this a bit  
wrong... but:

But, the act of listening is primarily about waiting for a new  
connection etc.; since standard io is already connected it doesn't  
quite make sense to listen for it.

When a listener L awakens for a new connection it cobbles together the  
plumbing necessary to manage the connection.  That plumbing will  
invoke the methods of an object C responsible for handling the  
connection.  The listener L creates the object P, one for each  
connection, by via the factory object F it was given when L was  
created.  It is the responsibility of C to implement protocol  
appropriate to the connection.

What twisted.internet.stdio.StandardIO provides is a very simple  
protocol for standard IO.





From luper.rouch at gmail.com  Tue Mar 10 11:22:29 2009
From: luper.rouch at gmail.com (luper rouch)
Date: Tue, 10 Mar 2009 18:22:29 +0100
Subject: [Twisted-Python] Using sqlalchemy in twisted.
In-Reply-To: <befee6d80903042338v3d1dc22bna8230c8e7280d8e7@mail.gmail.com>
References: <befee6d80903040328y44051147ja2fc369423a98c84@mail.gmail.com>
	<F4366C21-62E0-479F-98DF-A13F77BFCF41@gmail.com>
	<1E93D9FE-316A-460B-8069-4865A53D52F8@oda.state.or.us>
	<E3E183CF-9B95-45ED-8699-7DA3870C3ED4@gmail.com>
	<befee6d80903042338v3d1dc22bna8230c8e7280d8e7@mail.gmail.com>
Message-ID: <4e0636f40903101022m560fe199ha889985d03825b07@mail.gmail.com>

I would recommend sandboxing Twisted code in another process when used
in conjunction with synchronous code (sqlalchemy, GUI, etc...). This
proved quite simple in my project, using the multiprocessing module
[1], and avoided me lots of headaches since.

This way I don't mix coding styles everywhere using deferToThread(),
nor do I care about threads safety madness.

Now I'm not sure if this could apply to your situation, but if like me
you're just routing the SA traffic through Twisted (just guessing as
you mentioned deferToThread()), have not so much interaction between
Twisted and the synchronous code part, it might be a better solution
than writing wrappers / limiting your usage of the synchronous code.

Luper

[1]http://code.google.com/p/python-multiprocessing/ (now part of python 2.6)



From jkv at unixcluster.dk  Tue Mar 10 15:45:03 2009
From: jkv at unixcluster.dk (jkv)
Date: Tue, 10 Mar 2009 22:45:03 +0100
Subject: [Twisted-Python] getting sshsimpleserver.py to work within a
	wrapper
In-Reply-To: <225FCFFC-9AF7-4F1D-950F-545E86763EB9@pobox.com>
References: <49B67623.10009@unixcluster.dk>
	<225FCFFC-9AF7-4F1D-950F-545E86763EB9@pobox.com>
Message-ID: <49B6DF5F.5040204@unixcluster.dk>

Ben Hyde wrote:
> In  one of the examples (sshsimpleserver.py) reactor.listenTCP is used 
> to listen on the network socket, as far as i can read from the twisted 
> core documentation there are no builtin way to make reactor.listen* 
> listen on stdin instead... Any hints?
>
> Take look at twisted.internet.stdio.StandardIO.
>
> I'm new to this twisted stuff, so no doubt I've gotten this a bit 
> wrong... but:
>
> But, the act of listening is primarily about waiting for a new 
> connection etc.; since standard io is already connected it doesn't 
> quite make sense to listen for it.
>
> When a listener L awakens for a new connection it cobbles together the 
> plumbing necessary to manage the connection.  That plumbing will 
> invoke the methods of an object C responsible for handling the 
> connection.  The listener L creates the object P, one for each 
> connection, by via the factory object F it was given when L was 
> created.  It is the responsibility of C to implement protocol 
> appropriate to the connection.
>
> What twisted.internet.stdio.StandardIO provides is a very simple 
> protocol for standard IO.
Hi Ben,

Thank for the information, i have been looking into 
twisted.internet.stdio.StandardIO, and it seems that what i want it 
possible with twisted.

Would anyone on this list be able to point me to some code examples 
where a twisted.protocol is connected to stdio instead of a network socket?

Regards,
jkv



From exarkun at divmod.com  Tue Mar 10 16:00:10 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 10 Mar 2009 17:00:10 -0500
Subject: [Twisted-Python] getting sshsimpleserver.py to work within a
	wrapper
In-Reply-To: <49B6DF5F.5040204@unixcluster.dk>
Message-ID: <20090310220010.12853.987726334.divmod.quotient.21289@henry.divmod.com>

On Tue, 10 Mar 2009 22:45:03 +0100, jkv <jkv at unixcluster.dk> wrote:
>Ben Hyde wrote:
>>In  one of the examples (sshsimpleserver.py) reactor.listenTCP is used to 
>>listen on the network socket, as far as i can read from the twisted core 
>>documentation there are no builtin way to make reactor.listen* listen on 
>>stdin instead... Any hints?
>>
>>Take look at twisted.internet.stdio.StandardIO.
>>
>>I'm new to this twisted stuff, so no doubt I've gotten this a bit wrong... 
>>but:
>>
>>But, the act of listening is primarily about waiting for a new connection 
>>etc.; since standard io is already connected it doesn't quite make sense to 
>>listen for it.
>>
>>When a listener L awakens for a new connection it cobbles together the 
>>plumbing necessary to manage the connection.  That plumbing will invoke the 
>>methods of an object C responsible for handling the connection.  The 
>>listener L creates the object P, one for each connection, by via the 
>>factory object F it was given when L was created.  It is the responsibility 
>>of C to implement protocol appropriate to the connection.
>>
>>What twisted.internet.stdio.StandardIO provides is a very simple protocol 
>>for standard IO.
>Hi Ben,
>
>Thank for the information, i have been looking into 
>twisted.internet.stdio.StandardIO, and it seems that what i want it possible 
>with twisted.
>
>Would anyone on this list be able to point me to some code examples where a 
>twisted.protocol is connected to stdio instead of a network socket?

http://twistedmatrix.com/projects/core/documentation/examples/ includes a
couple examples of using stdio, `stdiodemo.py´ and `stdin.py´.

Jean-Paul



From exarkun at divmod.com  Wed Mar 11 14:58:39 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 11 Mar 2009 15:58:39 -0500
Subject: [Twisted-Python] Gsoc 2009
In-Reply-To: <86ae3510903100704u2958c754p6e2767a2f2c10d04@mail.gmail.com>
Message-ID: <20090311205839.12853.1653599990.divmod.quotient.21735@henry.divmod.com>

On Tue, 10 Mar 2009 19:34:51 +0530, kartik rustagi <kashes911 at gmail.com> wrote:
>Hello everyone,
>
>Is twisted applying as an organization in this year's Gsoc? I as a
>student will be interested in working for it.
>

Since the deadline for organization applications is tomorrow and as far as
I know, no one involved with Twisted has started working on that, it seems
likely that Twisted will not participate as an organization this year.  We
may get involved as part of the PSF organization's participation, which is
what we've done in years past.  If you're interested in participating as a
student on a Twisted project, let us know what project you have in mind so
we can make sure someone applies to be a mentor.

Jean-Paul



From newptcai at gmail.com  Wed Mar 11 22:05:29 2009
From: newptcai at gmail.com (Peter Cai)
Date: Thu, 12 Mar 2009 12:05:29 +0800
Subject: [Twisted-Python] Using sqlalchemy in twisted.
In-Reply-To: <4e0636f40903101022m560fe199ha889985d03825b07@mail.gmail.com>
References: <befee6d80903040328y44051147ja2fc369423a98c84@mail.gmail.com>
	<F4366C21-62E0-479F-98DF-A13F77BFCF41@gmail.com>
	<1E93D9FE-316A-460B-8069-4865A53D52F8@oda.state.or.us>
	<E3E183CF-9B95-45ED-8699-7DA3870C3ED4@gmail.com>
	<befee6d80903042338v3d1dc22bna8230c8e7280d8e7@mail.gmail.com>
	<4e0636f40903101022m560fe199ha889985d03825b07@mail.gmail.com>
Message-ID: <befee6d80903112105i1473efb0va7b5ad06bcf9cc33@mail.gmail.com>

Hi,
I've read some mails in this list that recommend use sqlalchemy in separate
processes.

But if u use multiprocessing which provides only synchronous API, doesn't
you have to use deferToThread also?

Another way would be using "twisted.internet.protocol.ProcessProtocol",
which use pipes.  But can we pass SA Objects through pipes?

If you can write a little code to describe how you use multiprocessing,  I
will be very thankful!

On Wed, Mar 11, 2009 at 1:22 AM, luper rouch <luper.rouch at gmail.com> wrote:

> I would recommend sandboxing Twisted code in another process when used
> in conjunction with synchronous code (sqlalchemy, GUI, etc...). This
> proved quite simple in my project, using the multiprocessing module
> [1], and avoided me lots of headaches since.
>
> This way I don't mix coding styles everywhere using deferToThread(),
> nor do I care about threads safety madness.
>
> Now I'm not sure if this could apply to your situation, but if like me
> you're just routing the SA traffic through Twisted (just guessing as
> you mentioned deferToThread()), have not so much interaction between
> Twisted and the synchronous code part, it might be a better solution
> than writing wrappers / limiting your usage of the synchronous code.
>
> Luper
>
> [1]http://code.google.com/p/python-multiprocessing/ (now part of python
> 2.6)
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
look to the things around you,the immediate world around you, if you are
alive,it will mean something to you ——Paul Strand
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090312/d3448a04/attachment.html>

From khiraly123 at gmx.net  Thu Mar 12 06:23:50 2009
From: khiraly123 at gmx.net (Kalman KHIRALY)
Date: Thu, 12 Mar 2009 13:23:50 +0100
Subject: [Twisted-Python] Twisted.mail SMTP server question
Message-ID: <f88c2f150903120523v4df80bafv92847ef24cc1a8aa@mail.gmail.com>

Hi!

I would like to use twisted mail for the following purpose:
Redirect all incoming myname at mydomain.com mails to a specified gmail address:
myname at mydomain.com -> myname.mydomain at gmail.com

Is it possible to use Twisted.Mail for this? Any pointers would be
highly appreciated.
If not can somebody recommend me a nice python solution for this?

Best regards,
 Khiraly

ps: 4 year ago I did the above feature using postfix and mysql. It took me
more the 2 months to correctly set up all this stuff (and having an
administrator web page
where I could change, add, remove the email address, and wrote into
the mysql database)

Unfortunetly, I do not have anymore my work, the server crashed, etc.
And in my view,
it was horribly overcomplicated.

So Im looking a simple and elegant solution (so this rules
out qmail and postfix). It is like setting up apache with
ssl+virtualhost for a simple index.html file;)



From matt at madebykite.com  Thu Mar 12 06:36:29 2009
From: matt at madebykite.com (Matthew Glubb)
Date: Thu, 12 Mar 2009 12:36:29 +0000
Subject: [Twisted-Python] Twisted.mail SMTP server question
In-Reply-To: <f88c2f150903120523v4df80bafv92847ef24cc1a8aa@mail.gmail.com>
References: <f88c2f150903120523v4df80bafv92847ef24cc1a8aa@mail.gmail.com>
Message-ID: <0E76D663-91F8-4823-B59A-EE01AF1F872B@madebykite.com>

Khiraly,

I had great success setting up a server to host about 20 domains'  
emails by merging the following instructions:

All the instructions from here:
http://workaround.org/articles/ispmail-etch/

BUT the SQL schema detailed from here (as it works for postfixadmin)
http://codepoets.co.uk/postfixadmin-postgresql-courier-squirrelmail-debian-etch-howto-tutorial

Postfixadmin from here:
http://postfixadmin.sourceforge.net/

Web mail from here:
http://roundcube.net/

And web mail / postfixadmin integration from here:
http://nejc.skoberne.net/projects/rcpfa/

It probably took me about 12 hours in all. I'd bet my life you  
couldn't get all of that functionality out of Twisted's mail module in  
the same amount of time ;)

Matt
	

Matthew Glubb
Technical Partner

email: matthew.glubb at madebykite.com
phone: 44 (0) 7715 754017
skype: mglubb

Kite
http://madebykite.com

--
GPG: 96FF DE0E 0B7B 37F0 7F8D C54C E285 3D8F 5625 9244

On 12 Mar 2009, at 12:23, Kalman KHIRALY wrote:

> Hi!
>
> I would like to use twisted mail for the following purpose:
> Redirect all incoming myname at mydomain.com mails to a specified gmail  
> address:
> myname at mydomain.com -> myname.mydomain at gmail.com
>
> Is it possible to use Twisted.Mail for this? Any pointers would be
> highly appreciated.
> If not can somebody recommend me a nice python solution for this?
>
> Best regards,
> Khiraly
>
> ps: 4 year ago I did the above feature using postfix and mysql. It  
> took me
> more the 2 months to correctly set up all this stuff (and having an
> administrator web page
> where I could change, add, remove the email address, and wrote into
> the mysql database)
>
> Unfortunetly, I do not have anymore my work, the server crashed, etc.
> And in my view,
> it was horribly overcomplicated.
>
> So Im looking a simple and elegant solution (so this rules
> out qmail and postfix). It is like setting up apache with
> ssl+virtualhost for a simple index.html file;)
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From dripton at ripton.net  Thu Mar 12 08:32:45 2009
From: dripton at ripton.net (David Ripton)
Date: Thu, 12 Mar 2009 07:32:45 -0700
Subject: [Twisted-Python] Twisted.mail SMTP server question
In-Reply-To: <f88c2f150903120523v4df80bafv92847ef24cc1a8aa@mail.gmail.com>
References: <f88c2f150903120523v4df80bafv92847ef24cc1a8aa@mail.gmail.com>
Message-ID: <20090312143245.GA7580@vidar.dreamhost.com>

On 2009.03.12 13:23:50 +0100, Kalman KHIRALY wrote:
> I would like to use twisted mail for the following purpose:
> Redirect all incoming myname at mydomain.com mails to a specified gmail address:
> myname at mydomain.com -> myname.mydomain at gmail.com

Do you really want to write code for this?  That's a one-line .forward
file, or (if you want to be fancy) one line in a .procmailrc file.

-- 
David Ripton    dripton at ripton.net



From luper.rouch at gmail.com  Fri Mar 13 05:00:37 2009
From: luper.rouch at gmail.com (luper rouch)
Date: Fri, 13 Mar 2009 12:00:37 +0100
Subject: [Twisted-Python] Using sqlalchemy in twisted.
In-Reply-To: <befee6d80903112105i1473efb0va7b5ad06bcf9cc33@mail.gmail.com>
References: <befee6d80903040328y44051147ja2fc369423a98c84@mail.gmail.com>
	<F4366C21-62E0-479F-98DF-A13F77BFCF41@gmail.com>
	<1E93D9FE-316A-460B-8069-4865A53D52F8@oda.state.or.us>
	<E3E183CF-9B95-45ED-8699-7DA3870C3ED4@gmail.com>
	<befee6d80903042338v3d1dc22bna8230c8e7280d8e7@mail.gmail.com>
	<4e0636f40903101022m560fe199ha889985d03825b07@mail.gmail.com>
	<befee6d80903112105i1473efb0va7b5ad06bcf9cc33@mail.gmail.com>
Message-ID: <4e0636f40903130400u1c1b6975tae85d81ccedc2952@mail.gmail.com>

2009/3/12 Peter Cai <newptcai at gmail.com>:
> Hi,
> I've read some mails in this list that recommend use sqlalchemy in separate
> processes.
> But if u use multiprocessing which provides only synchronous API, doesn't
> you have to use deferToThread also?
> Another way would be using "twisted.internet.protocol.ProcessProtocol",
> which use pipes.  But can we pass SA Objects through pipes?
> If you can write a little code to describe how you use multiprocessing,  I
> will be very thankful!

multiprocessing [1] works like the threading module, except that it
runs callables in subprocesses instead of threads.

To pass python objects to your process you can use the primitives
offered by the modules (Queue, Pipe, Connection...). Here is a minimal
example using Queue :

Child process implementation (let's call it my_twisted_module.py):
--------------------------
from twisted.internet import reactor, task

dispatch_task = None
in_queue = None
out_queue = None

def recv():
    obj = in_queue.get_nowait()
    [do whatever you want with obj]

def send(obj):
    out_queue.put_nowait(obj)

def twisted_process(inq, outq):
    global dispatch_task, in_queue, out_queue
    in_queue = inq
    out_queue = outq
    dispatch_task = task.LoopingCall(recv)
    dispatch_task.start(0.1)
    reactor.run()
--------------------------

On the parent process side:
--------------------------
from my_twisted_module import twisted_process

[something similar to the child process implementation for communications]

# Note that out_queue in this side is passed as in_queue to the other
side and vice versa
in_queue = Queue()
out_queue = Queue()
p = multiprocessing.Process(target=twisted_process, args=(out_queue, in_queue))
p.start()
--------------------------

You can pass any python object through the queues as long as it is
picklabe. Passing SA objects is probably not a good idea though as
this whole mess is about isolating Twisted from SA :) In my project I
organized the communications with a dispatcher (louie [2]), and I pass
signals through the queues. This way I have a well defined protocol to
communicate with the sub process(es).

Although I did not do any timing I think the communications between
the processes must introduce some significant overhead, so it is
probably not a good idea to do this if you pass objects all the time.
In my case, the communications are limited to initialization calls,
status keeping, etc...

Luper

[1]http://docs.python.org/library/multiprocessing.html
[2]http://pylouie.org/



From sicfslist at gmail.com  Sat Mar 14 11:33:02 2009
From: sicfslist at gmail.com (Shelby Ramsey)
Date: Sat, 14 Mar 2009 12:33:02 -0500
Subject: [Twisted-Python] Noob Question
Message-ID: <35b355e90903141033s42e0016ah6c8069808e0fec5b@mail.gmail.com>

Hello:

I've been playing with twisted (to take advantage of deferreds) and trying
to accomplish this:
  -- log into a machine as a client
  -- send auth
  -- receive "events" from the machine

The events have a Content-Length: \d+ as the protocol for determining the
length of the message.  What I'm struggling with is how to parse that and
then receive just that length as an individual message ...

Thanks for any help that can be provided.

SDR
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090314/a6110312/attachment.html>

From peter at sabaini.at  Sat Mar 14 12:37:15 2009
From: peter at sabaini.at (Peter Sabaini)
Date: Sat, 14 Mar 2009 19:37:15 +0100
Subject: [Twisted-Python] Noob Question
In-Reply-To: <35b355e90903141033s42e0016ah6c8069808e0fec5b@mail.gmail.com>
References: <35b355e90903141033s42e0016ah6c8069808e0fec5b@mail.gmail.com>
Message-ID: <200903141937.22341.peter@sabaini.at>

On Saturday 14 March 2009 18:33:02 Shelby Ramsey wrote:
> Hello:
>
> I've been playing with twisted (to take advantage of deferreds) and trying
> to accomplish this:
>   -- log into a machine as a client
>   -- send auth
>   -- receive "events" from the machine
>
> The events have a Content-Length: \d+ as the protocol for determining the
> length of the message.  What I'm struggling with is how to parse that and
> then receive just that length as an individual message ...

Not really sure if I interpret this correctly. Is your protocol text or 
binary? "Content-Length: \d+" seems to imply ASCII; if thats the case I guess 
you can just do something along the line of:

>>> import re
>>> p = re.compile(r'^Content-Length: (\d+)')
>>> m = p.search("Content-Length: 123")
>>> int(m.group(1))
123

No?

If its a binary protocol, look at the struct module and the functions pack() 
and unpack()

hth,
peter.



-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 197 bytes
Desc: This is a digitally signed message part.
URL: </pipermail/twisted-python/attachments/20090314/bbd475cd/attachment.sig>

From sicfslist at gmail.com  Sat Mar 14 12:54:04 2009
From: sicfslist at gmail.com (Shelby Ramsey)
Date: Sat, 14 Mar 2009 13:54:04 -0500
Subject: [Twisted-Python] Noob Question
In-Reply-To: <200903141937.22341.peter@sabaini.at>
References: <35b355e90903141033s42e0016ah6c8069808e0fec5b@mail.gmail.com>
	<200903141937.22341.peter@sabaini.at>
Message-ID: <35b355e90903141154k2cfee57bk87245093fe356b93@mail.gmail.com>

Peter,

Thanks for the quick response.  The issue isn't grabbing the content length
... but rather grabbing the body ...

The protocol is TCP so the text (not binary) comes in streams ... so the
body is / might be broken into streams ... so I'm trying to figure out how
to "receive" the content length so I can get a complete body from different
streams.

Thanks again!

SDR
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090314/5b975913/attachment.html>

From db3l.net at gmail.com  Sat Mar 14 13:36:56 2009
From: db3l.net at gmail.com (David Bolen)
Date: Sat, 14 Mar 2009 15:36:56 -0400
Subject: [Twisted-Python] Re: Noob Question
References: <35b355e90903141033s42e0016ah6c8069808e0fec5b@mail.gmail.com>
Message-ID: <m2iqmb6gmf.fsf@valheru.db3l.homeip.net>

Shelby Ramsey <sicfslist at gmail.com> writes:

> The events have a Content-Length: \d+ as the protocol for determining the
> length of the message.  What I'm struggling with is how to parse that and
> then receive just that length as an individual message ...

It would probably help to see the general framework of your server
class to be more specific, but in general, try implementing a
LineReceiver protocol that starts in line mode and then switches to
raw mode after receiving the event header, switching back after
receiving the appropriate amount of raw information.

You don't mention if the Content-Length header ends with a CRLF or
not, but if it doesn't and you have control of the protocol, I'd
suggest making it do so.  If you can't control that you'll have to do
your own protocol to identify when the header is actually done - using
LineReceiver as a model would probably be helpful.

Here's an old post of mine showing something an approach I use in one of
my applications that receives a binary file after a short header with some
identification and length information.

http://www.twistedmatrix.com/pipermail/twisted-python/2007-July/015738.html

You'll have some additional complexity in that you will have to manually
observe the transition between any final raw data from the last event and
the beginning of the next event.  But that's not too bad - just identify
when your remaining raw bytes hits zero, and anything else you have left
in that callback is for the subsequent event.

Luckily, Twisted's LineReceiver also anticipated this use case.  When
your raw data receiver switches back to line mode with setLineMode,
you can pass in the extra data, and it will automatically be reparsed,
calling lineReceived() if appropriate or else holding on for the rest
of the upcoming event header.

-- David




From peter at sabaini.at  Sat Mar 14 13:55:01 2009
From: peter at sabaini.at (Peter Sabaini)
Date: Sat, 14 Mar 2009 20:55:01 +0100
Subject: [Twisted-Python] Noob Question
In-Reply-To: <35b355e90903141154k2cfee57bk87245093fe356b93@mail.gmail.com>
References: <35b355e90903141033s42e0016ah6c8069808e0fec5b@mail.gmail.com>
	<200903141937.22341.peter@sabaini.at>
	<35b355e90903141154k2cfee57bk87245093fe356b93@mail.gmail.com>
Message-ID: <200903142055.07700.peter@sabaini.at>

On Saturday 14 March 2009 19:54:04 Shelby Ramsey wrote:
> Peter,
>
> Thanks for the quick response.  The issue isn't grabbing the content length
> ... but rather grabbing the body ...
>
> The protocol is TCP so the text (not binary) comes in streams ... so the
> body is / might be broken into streams ... so I'm trying to figure out how
> to "receive" the content length so I can get a complete body from different
> streams.

Still not sure if I understand -- with TCP, there is always just one stream, 
and so its just a matter of breaking up the stream into suitable chunks.  

And in your case, it seems you have something like HTTP, ie. some header lines 
including Content-Length: and then the body, is that correct?

If that is the case, the twisted.protocols.basic.LineReceiver class might be a 
good starting point. To use it, you make your Protocol handler a subclass of 
LineReceiver; the reactor then calls your protocol objects' lineReceived() 
method with new data as long as you stay in "line mode". Switch into "raw 
mode" to receive the body of the message. With HTTP for example, this would be 
after you receive an empty line. You do this by calling the setRawmode() 
method which is provided by LineReceiver. From that point on forward, the 
reactor will call the dataReceived() method to hand your protocol object new 
data. Presumably, you've already received a Content-Length header and stored 
that somewhere. Receive Content-Length bytes of data, and call setLineMode() 
to switch into line mode again. 

API docs are 
here:http://twistedmatrix.com/documents/current/api/twisted.protocols.basic.LineReceiver.html

Hm, that would maybe be a good topic for a tutorial.

hth,
peter.



> Thanks again!
>
> SDR

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 197 bytes
Desc: This is a digitally signed message part.
URL: </pipermail/twisted-python/attachments/20090314/09dc32f9/attachment.sig>

From sicfslist at gmail.com  Sat Mar 14 14:00:14 2009
From: sicfslist at gmail.com (Shelby Ramsey)
Date: Sat, 14 Mar 2009 15:00:14 -0500
Subject: [Twisted-Python] Re: Noob Question
In-Reply-To: <m2iqmb6gmf.fsf@valheru.db3l.homeip.net>
References: <35b355e90903141033s42e0016ah6c8069808e0fec5b@mail.gmail.com>
	<m2iqmb6gmf.fsf@valheru.db3l.homeip.net>
Message-ID: <35b355e90903141300t5daa1927m845374cf0e6382e7@mail.gmail.com>

Thanks David!  That looks like the trick ... I'll give it a try.

SDR
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090314/0e47c23e/attachment.html>

From sicfslist at gmail.com  Sat Mar 14 15:12:49 2009
From: sicfslist at gmail.com (Shelby Ramsey)
Date: Sat, 14 Mar 2009 16:12:49 -0500
Subject: [Twisted-Python] Noob Question
In-Reply-To: <200903142055.07700.peter@sabaini.at>
References: <35b355e90903141033s42e0016ah6c8069808e0fec5b@mail.gmail.com>
	<200903141937.22341.peter@sabaini.at>
	<35b355e90903141154k2cfee57bk87245093fe356b93@mail.gmail.com>
	<200903142055.07700.peter@sabaini.at>
Message-ID: <35b355e90903141412q22ac1d89me8201d58fb30a31e@mail.gmail.com>

Peter,

Thanks for the help.  Yes I get a header and then am looking to extract the
body.

So to make sure I understand:

p = compile('Content-Length:\s(\d+)')

class SomeClient(basic.LineReceiver):
    def connectionMade(self):
        self.transport.write('login: info\r\n\r\n') # log in ... then device
starts sending events

    def lineReceived(self, line):
        m = p.findall(line)
        if m:
            self.body_length = m[0]
            self.setRawMode()

     def rawDataReceived(self, data):
         self.get_rest -= len(data)
         set.lineMode()

Should something along those lines work?

David / Peter ... thanks again for the assistance!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090314/2b90fd9a/attachment.html>

From peter at sabaini.at  Sat Mar 14 16:29:44 2009
From: peter at sabaini.at (Peter Sabaini)
Date: Sat, 14 Mar 2009 23:29:44 +0100
Subject: [Twisted-Python] Noob Question
In-Reply-To: <35b355e90903141412q22ac1d89me8201d58fb30a31e@mail.gmail.com>
References: <35b355e90903141033s42e0016ah6c8069808e0fec5b@mail.gmail.com>
	<200903142055.07700.peter@sabaini.at>
	<35b355e90903141412q22ac1d89me8201d58fb30a31e@mail.gmail.com>
Message-ID: <200903142329.51057.peter@sabaini.at>

On Saturday 14 March 2009 22:12:49 Shelby Ramsey wrote:
> Peter,
>
> Thanks for the help.  Yes I get a header and then am looking to extract the
> body.
>
> So to make sure I understand:
>
> p = compile('Content-Length:\s(\d+)')

Of course I dont know anything about your protocol, but anyways:

> class SomeClient(basic.LineReceiver):
>     def connectionMade(self):
>         self.transport.write('login: info\r\n\r\n') # log in ... then
> device starts sending events
>
>     def lineReceived(self, line):
>         m = p.findall(line)
>         if m:
>             self.body_length = m[0]
>             self.setRawMode()

If Content-Length is the last header

>      def rawDataReceived(self, data):
>          self.get_rest -= len(data)
>          set.lineMode()

Mhm rather something like, since you don't know the chunk size:

    def rawDataReceived(self, data):
    	datalen = len(data)
	if self.body_length > datalen:
	    self.body_length -= datalen
	    do_something_with(data)
	else:
	    part = data[:self.body_length]
	    extra = data[self.body_length:]
	    do_something_with(part)
	    self.setLineMode(extra=extra)


cheers,
peter.
    
> Should something along those lines work?
>
> David / Peter ... thanks again for the assistance!

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 197 bytes
Desc: This is a digitally signed message part.
URL: </pipermail/twisted-python/attachments/20090314/62f06ce4/attachment.sig>

From exarkun at twistedmatrix.com  Sat Mar 14 22:05:10 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 15 Mar 2009 04:05:10 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1237089910.99.979514254@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090315/55cd4100/attachment.html>

From stephen at thorne.id.au  Sun Mar 15 03:37:46 2009
From: stephen at thorne.id.au (Stephen Thorne)
Date: Sun, 15 Mar 2009 19:37:46 +1000
Subject: [Twisted-Python] Twisted.mail SMTP server question
In-Reply-To: <f88c2f150903120523v4df80bafv92847ef24cc1a8aa@mail.gmail.com>
References: <f88c2f150903120523v4df80bafv92847ef24cc1a8aa@mail.gmail.com>
Message-ID: <20090315093746.GA23225@thorne.id.au>

On 2009-03-12, Kalman KHIRALY wrote:
> Hi!
> 
> I would like to use twisted mail for the following purpose:
> Redirect all incoming myname at mydomain.com mails to a specified gmail address:
> myname at mydomain.com -> myname.mydomain at gmail.com

The easiest way to do this is with a postfix address resolution daemon.
You can just use postfix.PostfixTCPMapServer to do it.

It will be something along the lines of:

class AddressResolverFactory(protocol.ServerFactory):
    protocol = postfix.PostfixTCPMapServer

    def get(self, emailaddress):
        if doesnotmatchpattern(emailaddress):
            return None

        return transform(emailaddress)

reactor.listenTCP(12345, AddressResolverFactory())

Then you just throw all the email addresses at it from postfix like so:

virtual_alias_maps = tcp:127.0.0.1:12345
virtual_mailbox_maps = tcp:127.0.0.1:12345

-- 
Regards,
Stephen Thorne
Development Engineer
NetBox Blue - 1300 737 060

Find out why NetBox Blue's solutions are growing in popularity in 
today's economic environment: http://netboxblue.com/news/creditcrunch 


Scanned by the NetBox from NetBox Blue
(http://netboxblue.com/)




From sicfslist at gmail.com  Sun Mar 15 07:55:25 2009
From: sicfslist at gmail.com (Shelby Ramsey)
Date: Sun, 15 Mar 2009 08:55:25 -0500
Subject: [Twisted-Python] Noob Question
In-Reply-To: <200903142329.51057.peter@sabaini.at>
References: <35b355e90903141033s42e0016ah6c8069808e0fec5b@mail.gmail.com>
	<200903142055.07700.peter@sabaini.at>
	<35b355e90903141412q22ac1d89me8201d58fb30a31e@mail.gmail.com>
	<200903142329.51057.peter@sabaini.at>
Message-ID: <35b355e90903150655j2afe48d0l4cd5f166148c3c44@mail.gmail.com>

Peter,

Thanks for the assistance.  I think you and David have me on the right
path.  Just to clarify the protocol looks like this:

Content-Length: 984
Content-Type: text/event-xml

<event>
  <headers>
   $bunchofinfo ...
  </headers>
</event>

Where the body (and the content length) start and stop with the <event> ...
</event>.

Here is what I've done so far:

from twisted.internet import reactor, protocol
from twisted.protocols import basic
from re import compile, findall

bl_p = compile('Content-Length:\s(\d+)')

class My_Client(basic.LineReceiver):
    def __init__(self):
        self.body_length = None

    def connectionMade(self):
        self.transport.write("login \r\n\r\n")
        self.transport.write("sendevents\r\n\r\n")

    def lineReceived(self, line):
        print line
        bl_m = bl_p.findall(line)
        if bl_m:
            print 'Match:'
            self.body_length = int(bl_m[0]) - len(line) # this doesn't
really work because it doesn't factor in the len of the next line
            self.setRawMode()

    def rawDataReceived(self, data):
       datalen = len(data)
       if self.body_length > datalen:
           self.body_length -= datalen
           print data
       else:
           part = data[:self.body_length]
           extra = data[self.body_length:]
           print 'Left Over\n:'
           print extra
           self.setLineMode(extra=extra)

    def connectionLost(self, reason):
        print "%s" % (reason)

class My_Factory(protocol.ClientFactory):
    protocol = My_Client

    def clientConnectionFailed(self, connector, reason):
        print "Connection failed - goodbye!"
        reactor.stop()

    def clientConnectionLost(self, connector, reason):
        print "Connection lost - goodbye!"
        reactor.stop()

def main():
    f = FS_Factory()
    reactor.connectTCP("$IP", $PORT, f)
    reactor.run()

# this only runs if the module was *not* imported
if __name__ == '__main__':
    main()

To me ... this looks somewhat correct ... but it doesn't seem to actually
ever use the line received method (note the print statement ...).  For
instance upon logging in it should respond with a +OK Logged In ... but it
never prints that.

And then when it receives an "<event>..." it actually dies with this error:

[Failure instance: Traceback (failure with no frames): <class
'twisted.internet.error.ConnectionDone'>: Connection was closed cleanly.
]
Connection lost - goodbye!

So I'm a bit lost as to what the impact of adding the rawDataReceived method
has done.

Thanks!

SDR
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090315/3f86d08b/attachment.html>

From exarkun at divmod.com  Sun Mar 15 08:20:50 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 15 Mar 2009 09:20:50 -0500
Subject: [Twisted-Python] Noob Question
In-Reply-To: <35b355e90903150655j2afe48d0l4cd5f166148c3c44@mail.gmail.com>
Message-ID: <20090315142050.12853.1613389994.divmod.quotient.23508@henry.divmod.com>

On Sun, 15 Mar 2009 08:55:25 -0500, Shelby Ramsey <sicfslist at gmail.com> wrote:
>Peter,
>
>Thanks for the assistance.  I think you and David have me on the right
>path.  Just to clarify the protocol looks like this:

Hi Shelby,

You may want to consider re-using an existing protocol rather than inventing
and implementing a new one.  Protocol design has many tricky corners, and
with the wide array of existing protocols from which to select, there's is
often no really good reason to develop a new one.

Consider HTTP, PB, AMP, or XMPP, all of which have general, re-usable
implementations in Twisted.

Jean-Paul



From sicfslist at gmail.com  Sun Mar 15 09:36:24 2009
From: sicfslist at gmail.com (Shelby Ramsey)
Date: Sun, 15 Mar 2009 10:36:24 -0500
Subject: [Twisted-Python] Noob Question
In-Reply-To: <20090315142050.12853.1613389994.divmod.quotient.23508@henry.divmod.com>
References: <35b355e90903150655j2afe48d0l4cd5f166148c3c44@mail.gmail.com>
	<20090315142050.12853.1613389994.divmod.quotient.23508@henry.divmod.com>
Message-ID: <35b355e90903150836w538ea0c7y9193a85509cfd752@mail.gmail.com>

Jean-Paul:

I wish I could ... I would certainly make this a little simpler.
Unfortunately it's not an option.  I don't have any control over the
protocol.

Thanks!

SDR
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090315/32f07e2a/attachment.html>

From peter at sabaini.at  Sun Mar 15 11:27:19 2009
From: peter at sabaini.at (Peter Sabaini)
Date: Sun, 15 Mar 2009 18:27:19 +0100
Subject: [Twisted-Python] Noob Question
In-Reply-To: <35b355e90903150655j2afe48d0l4cd5f166148c3c44@mail.gmail.com>
References: <35b355e90903141033s42e0016ah6c8069808e0fec5b@mail.gmail.com>
	<200903142329.51057.peter@sabaini.at>
	<35b355e90903150655j2afe48d0l4cd5f166148c3c44@mail.gmail.com>
Message-ID: <200903151827.25932.peter@sabaini.at>

On Sunday 15 March 2009 14:55:25 Shelby Ramsey wrote:
> Peter,
>
> Thanks for the assistance.  I think you and David have me on the right
> path.  Just to clarify the protocol looks like this:
>
> Content-Length: 984
> Content-Type: text/event-xml
>
> <event>
>   <headers>
>    $bunchofinfo ...
>   </headers>
> </event>
>
> Where the body (and the content length) start and stop with the <event> ...
> </event>.
>
> Here is what I've done so far:
>
> from twisted.internet import reactor, protocol
> from twisted.protocols import basic
> from re import compile, findall
>
> bl_p = compile('Content-Length:\s(\d+)')
>
> class My_Client(basic.LineReceiver):
>     def __init__(self):
>         self.body_length = None
>
>     def connectionMade(self):
>         self.transport.write("login \r\n\r\n")
>         self.transport.write("sendevents\r\n\r\n")
>
>     def lineReceived(self, line):
>         print line
>         bl_m = bl_p.findall(line)
>         if bl_m:
>             print 'Match:'
>             self.body_length = int(bl_m[0]) - len(line) # this doesn't
> really work because it doesn't factor in the len of the next line

Hm, I thought you said the Content-Length was only the length of the body? Ie. 
without headers?

>             self.setRawMode()
>
>     def rawDataReceived(self, data):
>        datalen = len(data)
>        if self.body_length > datalen:
>            self.body_length -= datalen
>            print data
>        else:
>            part = data[:self.body_length]
>            extra = data[self.body_length:]
>            print 'Left Over\n:'
>            print extra
>            self.setLineMode(extra=extra)
>
>     def connectionLost(self, reason):
>         print "%s" % (reason)
>
> class My_Factory(protocol.ClientFactory):
>     protocol = My_Client
>
>     def clientConnectionFailed(self, connector, reason):
>         print "Connection failed - goodbye!"
>         reactor.stop()
>
>     def clientConnectionLost(self, connector, reason):
>         print "Connection lost - goodbye!"
>         reactor.stop()
>
> def main():
>     f = FS_Factory()

Should be My_Factory() above, right?

>     reactor.connectTCP("$IP", $PORT, f)

I assume $IP / $PORT get replaced with actual values?

>     reactor.run()
>
> # this only runs if the module was *not* imported
> if __name__ == '__main__':
>     main()
>
> To me ... this looks somewhat correct ... but it doesn't seem to actually
> ever use the line received method (note the print statement ...).  For
> instance upon logging in it should respond with a +OK Logged In ... but it
> never prints that.

One thing that might be an issue here is the line delimiter. Twisted by 
default has "\r\n" as a line delimiter, so if you fed it only "\n" newlines, 
basic.LineReceiver would never detect an end of line. 

The delimiter is an attribute of the class, ie. 

class My_Client(basic.LineReceiver):
    delimiter = '\n'

switches to newline-delim. lines.


Two tools I find indispensable for this kind of work:

* the Python debugger "pdb" which lets you browse around interactively at 
interesting points in the running code ; see eg. here for a short intro: 
http://www.ferg.org/papers/debugging_in_python.html

* some kind of packet sniffer, eg. tcpdump or wireshark so you can actually 
see whats going on at the wire.

bye,
peter.



> And then when it receives an "<event>..." it actually dies with this error:
>
> [Failure instance: Traceback (failure with no frames): <class
> 'twisted.internet.error.ConnectionDone'>: Connection was closed cleanly.
> ]
> Connection lost - goodbye!
>
> So I'm a bit lost as to what the impact of adding the rawDataReceived
> method has done.
>
> Thanks!
>
> SDR

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 197 bytes
Desc: This is a digitally signed message part.
URL: </pipermail/twisted-python/attachments/20090315/76c2d9be/attachment.sig>

From sicfslist at gmail.com  Sun Mar 15 12:03:13 2009
From: sicfslist at gmail.com (Shelby Ramsey)
Date: Sun, 15 Mar 2009 13:03:13 -0500
Subject: [Twisted-Python] Noob Question
In-Reply-To: <200903151827.25932.peter@sabaini.at>
References: <35b355e90903141033s42e0016ah6c8069808e0fec5b@mail.gmail.com>
	<200903142329.51057.peter@sabaini.at>
	<35b355e90903150655j2afe48d0l4cd5f166148c3c44@mail.gmail.com>
	<200903151827.25932.peter@sabaini.at>
Message-ID: <35b355e90903151103g3543b505h13ea8ec1150bbcbc@mail.gmail.com>

Peter,

The content length is just the body ... and I've been looking for 2 hours on
how to change the delimiter.  That did the trick.  I think I'm on my way
now!

Thanks for heads up on pdb ... I've been writing stuff in Python for 3 years
... still learn something new daily.

SDR
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090315/7915db95/attachment.html>

From ssoni at nextdigital.com  Mon Mar 16 22:18:31 2009
From: ssoni at nextdigital.com (Sury Soni)
Date: Tue, 17 Mar 2009 15:18:31 +1100
Subject: [Twisted-Python] Novice question on twisted framework
Message-ID: <1BE49492956ECA42BEB0D78F67665E1FA96DBE@exchange.wdg>

Hi,

 

I have an existing application, written using Ice Middleware
(www.zeroc.com)

 

This application is my source of infinite queue (server)

 

Following is my application (processing client to my infinite queue
server) idea to be implemented using Twisted Framework.

 

I can loop through my infinite queue and receive email data (Using
.next() kind of function)

 

Using this email data object, I need to trigger event to send email
using ESMTPSenderFactory and ESMTPSender. As, later I would be extending
ESMTP* classes to do my little funky stuff.

 

What is the best code design I can use to implement this stuff.

 

Following is basic algorithm kind of code I am doing right now, but I
feel I am missing something.

 

#================

#Code Begins Here: .tac file

#================

 

import StringIO

 

from twisted.application import service 

 

from twisted.application import internet

from twisted.internet import protocol, defer

from twisted.mail import smtp, relaymanager

from twisted.internet import reactor

 

Def process_queue:

    While True:

         Try:

                Data = my_queue.next()

 

                getMailExchange('localhost).addCallback(cbMailExchange,
data)         

       Except:

                Break

    Reactor.stop()

 

 

reactor.callLater(0, process_queue)

 

 

application = service.Application("SMTP Client Tutorial")

 

class SMTPTutorialClient(smtp.ESMTPClient):

    mailFrom = "test at test.com"

    mailTo = "receiver at test.com"

    mailData = '''\

Date: Fri, 6 Feb 2004 10:14:39 -0800

From: Test <test at test.com>

To: Receiver <receiver at test.com>

Subject: Test Mail!

 

Hello, how are you, goodbye.

 

'''

    

    def __init__(self, secret="", identity="", data = ""):

        smtp.ESMTPClient.__init__(self, secret=secret,
identity=identity)

        self.secret = secret

        self.identity = identity

        self.data = data

 

    def getMailFrom(self):

        result = self.mailFrom

        self.mailFrom = None

        return result

    

    def getMailTo(self):

        return [self.mailTo]

 

    def getMailData(self):

        return StringIO.StringIO(self.mailData+self.data)

 

    def sentMail(self, code, resp, numOk, addresses, log):

        print 'Sent', numOk, 'messages'

        #reactor.stop()

 

def getMailExchange(host):

    def cbMX(mxRecord):

        return str(mxRecord.name)

    return relaymanager.MXCalculator().getMX(host).addCallback(cbMX)

 

class SMTPClientFactory(protocol.ClientFactory):

    protocol = SMTPTutorialClient

    def __init__(self, data):

        self.data = data

        

    def buildProtocol(self, addr):

        return self.protocol(secret=None, identity='example.com',
data=self.data)

 

def cbMailExchange(exchange, data):

    smtpClientService = internet.TCPClient(exchange, 2500,
SMTPClientFactory(data))

    smtpClientService.setServiceParent(application)

    #reactor.run()

 

reactor.run()

 

#================

#Code Ends Here

#================

 

I have couple of #reactor.run() commented code, I feel like lost between
application and reactor based code.

 

My understanding is that function process_queue drives the control flow
of my application. Please correct me.

 

What is happening is, when my loop is finished in function
process_queue, then only actual events of SMTP factory and protocol
objects are created.

 

Therefore, I am not getting event driven code, which is the beauty of
Twisted Framework.

 

Please advice the best document to look and fix this code.

 

Thanks.

____________________________________
Sury Prakash Soni
Developer
____________________________________

Next Digital
Level 8, 15 William St, Melbourne 
VIC 3000 Australia
p +61 3 8612 6888
f  +61 3 8612 6899
m 0433 661 327
ssoni at nextdigital.com <mailto:ssoni at nextdigital.com> 
www.nextdigital.com <http://www.nextdigital.com/> 
____________________________________

This email and any attachments are intended only for the use of the
recipient and may be confidential and/or legally privileged. Next
Digital Group Pty Ltd ("Next Digital") disclaims liability for any
errors, omissions, viruses, loss and/or damage arising from using,
opening or transmitting this email. If you are not the intended
recipient you must not use, interfere with, disclose, copy or retain
this email and you should notify the sender immediately by return email
or by contacting Next Digital by telephone on +61 3 8612 6888.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090317/8882219e/attachment.html>

From exarkun at divmod.com  Tue Mar 17 07:54:50 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 17 Mar 2009 08:54:50 -0500
Subject: [Twisted-Python] Novice question on twisted framework
In-Reply-To: <1BE49492956ECA42BEB0D78F67665E1FA96DBE@exchange.wdg>
Message-ID: <20090317135450.12853.959200493.divmod.quotient.24370@henry.divmod.com>

On Tue, 17 Mar 2009 15:18:31 +1100, Sury Soni <ssoni at nextdigital.com> wrote:
>Hi,
>
>I have an existing application, written using Ice Middleware
>(www.zeroc.com)
>
>This application is my source of infinite queue (server)
>
>Following is my application (processing client to my infinite queue
>server) idea to be implemented using Twisted Framework.
>
>I can loop through my infinite queue and receive email data (Using
>.next() kind of function)
>
>Using this email data object, I need to trigger event to send email
>using ESMTPSenderFactory and ESMTPSender. As, later I would be extending
>ESMTP* classes to do my little funky stuff.
>
>What is the best code design I can use to implement this stuff.

Your code looks close.  The biggest issue is the loop over the queue.
Instead, you need to handle items from the queue without blocking.

>
>Following is basic algorithm kind of code I am doing right now, but I
>feel I am missing something.
>
>#================
>
>#Code Begins Here: .tac file
>
>#================
>
>
>
>import StringIO
>
>
>
>from twisted.application import service
>
>
>
>from twisted.application import internet
>
>from twisted.internet import protocol, defer
>
>from twisted.mail import smtp, relaymanager
>
>from twisted.internet import reactor
>
>
>
>Def process_queue:
>

The following loop:

>    While True:
>
>         Try:
>
>                Data = my_queue.next()
>
>
>
>                getMailExchange('localhost).addCallback(cbMailExchange,
>data)
>
>       Except:
>
>                Break
>

Needs to be replaced.  I'm not sure what my_queue is, but you need to
replace it with something which will call your code when there is an
item to process.  Then you can get rid of the loop and define a callback
which looks up a mail exchange and sends a message to it.

You may also want to use twisted.mail.smtp.sendmail rather than the
factories.  It's a bit higher-level and simpler.

Jean-Paul



From ryeguy1 at gmail.com  Tue Mar 17 09:05:59 2009
From: ryeguy1 at gmail.com (Ryan Lepidi)
Date: Tue, 17 Mar 2009 11:05:59 -0400
Subject: [Twisted-Python] So how does everyone use an ORM in twisted?
Message-ID: <bb39cd350903170805p2fca87casbc3cd6c932bb9439@mail.gmail.com>

I have searched a bit, and it seems as though you can't use SQL Alchemy with
twisted due to SA being thread unsafe. The only solution I found was sAsync,
but this is old and unmaintained. What is everyone else doing for database
access for a multiuser server? Is everyone really using raw sql queries or
is there some easy solution that I'm missing?

I'm not even stuck on SQL Alchemy; if there is some other ORM that works in
this case, I'd be willing to learn it.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090317/78f77658/attachment.html>

From exarkun at divmod.com  Tue Mar 17 09:17:38 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 17 Mar 2009 10:17:38 -0500
Subject: [Twisted-Python] So how does everyone use an ORM in twisted?
In-Reply-To: <bb39cd350903170805p2fca87casbc3cd6c932bb9439@mail.gmail.com>
Message-ID: <20090317151738.12853.1551779152.divmod.quotient.24391@henry.divmod.com>

On Tue, 17 Mar 2009 11:05:59 -0400, Ryan Lepidi <ryeguy1 at gmail.com> wrote:
>I have searched a bit, and it seems as though you can't use SQL Alchemy with
>twisted due to SA being thread unsafe. The only solution I found was sAsync,
>but this is old and unmaintained. What is everyone else doing for database
>access for a multiuser server? Is everyone really using raw sql queries or
>is there some easy solution that I'm missing?
>
>I'm not even stuck on SQL Alchemy; if there is some other ORM that works in
>this case, I'd be willing to learn it.
>

I use Axiom (for Mantissa, a somewhat general-purpose application server,
for Quotient, a mail server based on it, for Imaginary, a text adventure
server based on it, for Blendix, a person aggregator based on it, for
Merit, a test results database, etc) most of the time.  I know some other
people are using Storm.

Overall, I think that the way all existing ORMs work (including Axiom and
Storm) is hostile towards the typical Twisted program structure (or vice
versa, or both).  So it's tough.  The approach Axiom takes is to warn you
that any database operation you perform must complete quickly or your app
will suffer, and to restrict you to SQLite, so network issues can't hurt
you.

Jean-Paul



From mszumocki at contman.pl  Tue Mar 17 09:36:31 2009
From: mszumocki at contman.pl (Maciej Szumocki)
Date: Tue, 17 Mar 2009 16:36:31 +0100
Subject: [Twisted-Python] Re: So how does everyone use an ORM in twisted?
In-Reply-To: E1Ljb51-0003uP-0u@cube.twistedmatrix.com
Message-ID: <20090317153631.ea5d8d11@poczta.contman.pl>

> From: Ryan Lepidi <ryeguy1 at gmail.com>
> Subject: [Twisted-Python] So how does everyone use an ORM in twisted?
> To: twisted-python at twistedmatrix.com
> Message-ID:
> 	<bb39cd350903170805p2fca87casbc3cd6c932bb9439 at mail.gmail.com>
> Content-Type: text/plain; charset="iso-8859-1"
> 
> I have searched a bit, and it seems as though you can't use SQL Alchemy with
> twisted due to SA being thread unsafe. The only solution I found was sAsync,
> but this is old and unmaintained. What is everyone else doing for database
> access for a multiuser server? Is everyone really using raw sql queries or
> is there some easy solution that I'm missing?
> 
> I'm not even stuck on SQL Alchemy; if there is some other ORM that works in
> this case, I'd be willing to learn it.

I'm using SQLAlchemy with Twisted in a large project without problems. 
Why would you think you cannot?
You just need to run SA operations in non-reactor threads (i currently use my own
threadpool and deferToThread but it's only slightly modified standard twisted one),
and you need to make sure each connection/session is not used by more than thread
at a time, that's all.

Maciej Szumocki



From db3l.net at gmail.com  Tue Mar 17 10:06:27 2009
From: db3l.net at gmail.com (David Bolen)
Date: Tue, 17 Mar 2009 12:06:27 -0400
Subject: [Twisted-Python] Re: So how does everyone use an ORM in twisted?
References: <20090317153631.ea5d8d11@poczta.contman.pl>
Message-ID: <m2vdq83zi4.fsf@valheru.db3l.homeip.net>

"Maciej Szumocki" <mszumocki at contman.pl> writes:

> I'm using SQLAlchemy with Twisted in a large project without
> problems.  Why would you think you cannot?  You just need to run SA
> operations in non-reactor threads (i currently use my own threadpool
> and deferToThread but it's only slightly modified standard twisted
> one), and you need to make sure each connection/session is not used
> by more than thread at a time, that's all.

I manage the integration very similarly but I don't use any of the ORM
features of SQLAlchemy, so to the OP's question, yes, I prefer
straight SQL.

It's much trickier if you want to use the ORM, unless you are very
careful to fully eager load every thing in any possible database
operation if you have need of the information subsequently in your
twisted code.  Otherwise you may block unexpectedly simply when
accessing your objects, and end up with database operations from the
main twisted thread.

I've never quite managed to get onto the ORM bandwagon, except for
some of my simplest applications.  But that's why I like SQLAlchemy as
much as I do, because it provides a very nice SQL layer without
requiring that you use the ORM, and if you stick with SQL, it is in
fact fairly straight forward to offload its operations to a separate
thread without blocking Twisted.

-- David




From ddwiggins at advpubtech.com  Tue Mar 17 10:24:00 2009
From: ddwiggins at advpubtech.com (Don Dwiggins)
Date: Tue, 17 Mar 2009 09:24:00 -0700
Subject: [Twisted-Python] Re: So how does everyone use an ORM in twisted?
In-Reply-To: <m2vdq83zi4.fsf@valheru.db3l.homeip.net>
References: <20090317153631.ea5d8d11@poczta.contman.pl>
	<m2vdq83zi4.fsf@valheru.db3l.homeip.net>
Message-ID: <gpoir0$epu$1@ger.gmane.org>

David Bolen wrote:

> It's much trickier if you want to use the ORM, unless you are very
> careful to fully eager load every thing in any possible database
> operation if you have need of the information subsequently in your
> twisted code.  Otherwise you may block unexpectedly simply when
> accessing your objects, and end up with database operations from the
> main twisted thread.

So if someone wanted the use of the ORM, would you say that they should 
access the objects through deferreds, just as they would with SQL?  Or 
is it worse than that?

-- 
Don Dwiggins
Advanced Publishing Technology




From andrewfr_ice at yahoo.com  Tue Mar 17 11:26:01 2009
From: andrewfr_ice at yahoo.com (Andrew Francis)
Date: Tue, 17 Mar 2009 10:26:01 -0700 (PDT)
Subject: [Twisted-Python] Ticket 1138 Re: Twisted-Python Digest, Vol 60,
	Issue 12
In-Reply-To: <E1LgAHK-00025o-OQ@cube.twistedmatrix.com>
Message-ID: <986172.74292.qm@web34202.mail.mud.yahoo.com>

Hello Colleagues:

>For ticket 1138 (cool movie), when I access the URL:
>http://twistedmatrix.com/projects/core/documentation/howto/tutorial/deferred_tutorial.html
>I get, URL not found. Which deferred tutorial are you referring to? >"Deferreds are Beautiful (A Tutorial) at :
>http://twistedmatrix.com/projects/core/documentation/howto/deferredindepth.html.
>I see the reference to python.util there.


Looking at Ticket 1138. Again, I believe the ticket should be referring to the deferredindepth.html document "Deferreds are Beautiful."

To answer the question: no you do not need python.util.  I also put a minor correction in deferred_ex.py to get rid of the syntax warning in line 57.

Cheers,
Andrew





      
-------------- next part --------------
A non-text attachment was scrubbed...
Name: newdeferred_ex.py
Type: text/x-python
Size: 1364 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20090317/59145e05/attachment-0002.py>

From andrewfr_ice at yahoo.com  Tue Mar 17 11:44:30 2009
From: andrewfr_ice at yahoo.com (Andrew Francis)
Date: Tue, 17 Mar 2009 10:44:30 -0700 (PDT)
Subject: [Twisted-Python] Ticket 1009
Message-ID: <857781.88407.qm@web34202.mail.mud.yahoo.com>


Hi Colleagues:

I guess I am making today "Look at Twisted Documentation Day." I am looking at ticket 1009.

For inline generator examples, here is the example I use in "Adventures in Stackless Python Twisted Integration." In turn, this example comes from the discussions in I believe January 2008 with JP Calerone.

I can modify the example (and perhaps add illustrations) to show situations where inline generators are handy.


"""
Example of using an inline generator to make a Twisted call from a
protocol handler
"""

class MyRequestHandler(http.Request):
    @defer.inlineCallbacks
    def process(self):
        try:
          result = \
          yield client.getPage("http://localhost")
        except Exception, err:
          log.err(err, "process getPagecall failed")
        else:
          self.setHeader('Content-Type', 'text/html')
          self.write(result)
          self.finish()

Cheers,
Andrew




      



From db3l.net at gmail.com  Tue Mar 17 12:58:15 2009
From: db3l.net at gmail.com (David Bolen)
Date: Tue, 17 Mar 2009 14:58:15 -0400
Subject: [Twisted-Python] Re: So how does everyone use an ORM in twisted?
References: <20090317153631.ea5d8d11@poczta.contman.pl>
	<m2vdq83zi4.fsf@valheru.db3l.homeip.net>
	<gpoir0$epu$1@ger.gmane.org>
Message-ID: <m2mybk3rjs.fsf@valheru.db3l.homeip.net>

Don Dwiggins <ddwiggins at advpubtech.com> writes:

> So if someone wanted the use of the ORM, would you say that they
> should access the objects through deferreds, just as they would with
> SQL?  Or is it worse than that?

If by deferreds you mean pushing the ORM operation (including all
possible ancillary object loading) into a separate thread via
deferToThread, yes, that's a possibility.  But that likely will only
work best if you can work with a structure where the results of
database operations can be encapsulated into a fairly simple
interface, and not as much if the mainline code wants access to the
entire object tree.  Otherwise, you end up doing a lot of work to
protect against the very features (especially lazy loading) that often
makes an ORM attractive to people in order to ensure that the object
tree is safe to use from within the non-ORM thread.

If, however, you mean some other use of deferreds, then no - I agree
with Jean-Paul's earlier comment that most ORMs are simply not
designed to play nicely with the non-blocking Twisted main loop.
Database operations typically trigger from simple attribute access, or
from within, say an iteration loop.  They then block, so unless they
happen to execute very quickly you're blocking the Twisted main loop.
And it's tough to insert a normal deferred callback into that
equation.

You can try to offload the underlying DB operation to a thread pool,
but then you start having to fight to explicitly control all DB
access, some of which can occur during a simple attribute reference -
at which point there's no reasonable way to use a Deferred to postpone
the attribute lookup.

It's been a while since I looked at it, so I'm not sure of its status,
but sAsync was actually a interesting effort to at least get as good a
wrapper as possible, but it doesn't preclude having to be cautious
about ensuring any objects returned from the wrapper have been fully
loaded, or that any interaction that might require going back to the
database only be through wrapped methods and not direct attribute
access.  This can turn out to be a bunch of extra work when you start
talking about walking lists of related (one to many) records,
traversing the links of foreign keys among records, etc.. much of
which is the attractive part of ORMs for those who like them.

I suppose it is only fair to also say that if you don't mind some
arbitrary delays in the mainline code, there's nothing stopping you
from just using an ORM like SQLAlchemy right inline and ignoring the
whole issue.  For smaller databases or ones whose server are on the
local host (or internal to the process like sqlite), it might not even
be a real problem.  It's certainly flawed structurally and likely
won't scale, but that doesn't mean it might not be suitable in certain
cases if you know the tradeoffs.

-- David




From waterbug at pangalactic.us  Tue Mar 17 13:54:55 2009
From: waterbug at pangalactic.us (Stephen Waterbury)
Date: Tue, 17 Mar 2009 15:54:55 -0400
Subject: [Twisted-Python] Re: So how does everyone use an ORM in twisted?
In-Reply-To: <m2mybk3rjs.fsf@valheru.db3l.homeip.net>
References: <20090317153631.ea5d8d11@poczta.contman.pl>	<m2vdq83zi4.fsf@valheru.db3l.homeip.net>	<gpoir0$epu$1@ger.gmane.org>
	<m2mybk3rjs.fsf@valheru.db3l.homeip.net>
Message-ID: <49C0000F.7090904@pangalactic.us>

David Bolen wrote:
> ... or that any interaction that might require going back to the
> database only be through wrapped methods and not direct attribute
> access.  This can turn out to be a bunch of extra work when you start
> talking about walking lists of related (one to many) records,
> traversing the links of foreign keys among records, etc.. much of
> which is the attractive part of ORMs for those who like them.

This is a good point -- although the attractive part of using an
ORM in the first place is somewhat OT here, the main attraction
for me is usually *DRY* rather than "automatic persistence", so for
my purposes such "magical" features as direct attribute access,
lazy loading, etc. can actually be undesirable, since they
can make application semantics tricky to implement in some cases.
(This is somewhat analogous to the original rationale for PB's
implementation of "translucently" distributed objects --
"transparently" [magically] distributed objects are not
always desirable, and the same goes for "transparently"
persistent objects.)

Steve



From db3l.net at gmail.com  Tue Mar 17 16:13:53 2009
From: db3l.net at gmail.com (David Bolen)
Date: Tue, 17 Mar 2009 18:13:53 -0400
Subject: [Twisted-Python] Re: So how does everyone use an ORM in twisted?
References: <20090317153631.ea5d8d11@poczta.contman.pl>
	<m2vdq83zi4.fsf@valheru.db3l.homeip.net>
	<gpoir0$epu$1@ger.gmane.org>
	<m2mybk3rjs.fsf@valheru.db3l.homeip.net>
	<49C0000F.7090904@pangalactic.us>
Message-ID: <m2bprz4x26.fsf@valheru.db3l.homeip.net>

Stephen Waterbury <waterbug at pangalactic.us> writes:

> This is a good point -- although the attractive part of using an
> ORM in the first place is somewhat OT here, the main attraction
> for me is usually *DRY* rather than "automatic persistence", so for
> my purposes such "magical" features as direct attribute access,
> lazy loading, etc. can actually be undesirable, since they
> can make application semantics tricky to implement in some cases.
> (This is somewhat analogous to the original rationale for PB's
> implementation of "translucently" distributed objects --
> "transparently" [magically] distributed objects are not
> always desirable, and the same goes for "transparently"
> persistent objects.)

It's a spectrum, but as you start to move further down the "explicit"
route at some point I tend to find it closing in on just executing the
SQL.  For example, if you bypass just iterating an attribute to find
matching foreign key records in favor of a more explicit approach such
as a separate method call, it becomes closer to just iterating over
the SQL to query such records.  And having a database layer with
explicit SQL for retrieval/update can implement DRY quite well.

Of course you can also be more explicit with SQLAlchemy by defining
the default loader to be eager, or using eagerload() directly, you
just might pay a penalty in overhead in some schemas.

I guess what I always run into with ORMs is that I'm rarely lucky
enough to have my Python module be the only user of the database, and
while SQLAlchemy plays nicer with other tools at the schema level than
many ORMs that want to completely manage their persistence tables, I've
just had better luck sticking with SQL against a traditional relational
schema than one trying to mimic object persistence.  But that's more
of a general ORM usage debate than a twisted-specific one.  What is
twisted-specific, is that the additional work to ensure ORM features
work without interfering with twisted does seem to make their benefit
harder to achieve within the twisted environment.

Since I don't think it's been mentioned yet, one other item worth
pointing out is that SQLAlchemy does provide quite a bit of
flexibility and control over the mapping process, so there's some
wiggle room between raw SQL and fully ORM driven eager loading.  You
can have custom mappers that work against generic selectables (even
the results of raw SQL) which can take some of the drudgery out of
processing database results into more easily manageable object
instances, while still being rather friendly to being offloaded to a
dedicated DB thread.

-- David




From general at eepatents.com  Tue Mar 17 18:06:58 2009
From: general at eepatents.com (Ed Suominen)
Date: Tue, 17 Mar 2009 17:06:58 -0700
Subject: [Twisted-Python] Re: So how does everyone use an ORM in twisted?
In-Reply-To: <m2mybk3rjs.fsf@valheru.db3l.homeip.net>
References: <20090317153631.ea5d8d11@poczta.contman.pl>	<m2vdq83zi4.fsf@valheru.db3l.homeip.net>	<gpoir0$epu$1@ger.gmane.org>
	<m2mybk3rjs.fsf@valheru.db3l.homeip.net>
Message-ID: <49C03B22.6020603@eepatents.com>

For what it's worth, I've never used SQLAlchemy's ORM capabilities and 
don't support it in sAsync. I agree that it really isn't compatible with 
the asynchronous nature of Twisted, and I don't see it as adding 
anything. To me, the power of SQLAlchemy is in the clean and convenient 
way it permits you to access the underlying relational database, and 
sAsync merely lets you do that access in an asynchronous manner, in a 
single thread or with multiple threads.

Best regards, Ed

David Bolen wrote:
> Don Dwiggins <ddwiggins at advpubtech.com> writes:
> 
>> So if someone wanted the use of the ORM, would you say that they
>> should access the objects through deferreds, just as they would with
>> SQL?  Or is it worse than that?
> 
> If by deferreds you mean pushing the ORM operation (including all
> possible ancillary object loading) into a separate thread via
> deferToThread, yes, that's a possibility.  But that likely will only
> work best if you can work with a structure where the results of
> database operations can be encapsulated into a fairly simple
> interface, and not as much if the mainline code wants access to the
> entire object tree.  Otherwise, you end up doing a lot of work to
> protect against the very features (especially lazy loading) that often
> makes an ORM attractive to people in order to ensure that the object
> tree is safe to use from within the non-ORM thread.
> 
> If, however, you mean some other use of deferreds, then no - I agree
> with Jean-Paul's earlier comment that most ORMs are simply not
> designed to play nicely with the non-blocking Twisted main loop.
> Database operations typically trigger from simple attribute access, or
> from within, say an iteration loop.  They then block, so unless they
> happen to execute very quickly you're blocking the Twisted main loop.
> And it's tough to insert a normal deferred callback into that
> equation.
> 
> You can try to offload the underlying DB operation to a thread pool,
> but then you start having to fight to explicitly control all DB
> access, some of which can occur during a simple attribute reference -
> at which point there's no reasonable way to use a Deferred to postpone
> the attribute lookup.
> 
> It's been a while since I looked at it, so I'm not sure of its status,
> but sAsync was actually a interesting effort to at least get as good a
> wrapper as possible, but it doesn't preclude having to be cautious
> about ensuring any objects returned from the wrapper have been fully
> loaded, or that any interaction that might require going back to the
> database only be through wrapped methods and not direct attribute
> access.  This can turn out to be a bunch of extra work when you start
> talking about walking lists of related (one to many) records,
> traversing the links of foreign keys among records, etc.. much of
> which is the attractive part of ORMs for those who like them.
> 
> I suppose it is only fair to also say that if you don't mind some
> arbitrary delays in the mainline code, there's nothing stopping you
> from just using an ORM like SQLAlchemy right inline and ignoring the
> whole issue.  For smaller databases or ones whose server are on the
> local host (or internal to the process like sqlite), it might not even
> be a real problem.  It's certainly flawed structurally and likely
> won't scale, but that doesn't mean it might not be suitable in certain
> cases if you know the tradeoffs.
> 
> -- David
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> 



From p.mayers at imperial.ac.uk  Wed Mar 18 05:43:06 2009
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 18 Mar 2009 11:43:06 +0000
Subject: [Twisted-Python] Re: So how does everyone use an ORM in twisted?
In-Reply-To: <m2bprz4x26.fsf@valheru.db3l.homeip.net>
References: <20090317153631.ea5d8d11@poczta.contman.pl>	<m2vdq83zi4.fsf@valheru.db3l.homeip.net>	<gpoir0$epu$1@ger.gmane.org>	<m2mybk3rjs.fsf@valheru.db3l.homeip.net>	<49C0000F.7090904@pangalactic.us>
	<m2bprz4x26.fsf@valheru.db3l.homeip.net>
Message-ID: <49C0DE4A.1040803@imperial.ac.uk>

> 
> I guess what I always run into with ORMs is that I'm rarely lucky
> enough to have my Python module be the only user of the database, and

Very strongly agreed.

One of the things I hate about most ORMs is their desire to define the 
SQL schema for you - they mostly do a half-assed job because the "model" 
seldom contains enough information to define an efficient schema.

SQLAlchemy is better than most in that regard, since you can reflect an 
existing schema, but frankly I just reflect into table objects and use 
the query builder - the only things the ORM adds are a false sense of 
security.

"Proper" object databases e.g. ZODB, Durus et. al. are a completely 
different matter, and often very nice (though still not very easy to 
integrate with Twisted). I imagine Axiom is closer to these than to SQL.



From petshmidt at googlemail.com  Wed Mar 18 06:10:12 2009
From: petshmidt at googlemail.com (Pet)
Date: Wed, 18 Mar 2009 13:10:12 +0100
Subject: [Twisted-Python] LineReceiver MAX_LENGTH limitation
Message-ID: <b460e9630903180510g1d9ac237ib43f2de795ff337c@mail.gmail.com>

Hi,

in LineReceiver there is MAX_LENGTH = 16384 limitation. Is it possible
to set it bigger at start of an application?

Regards, Pet



From exarkun at divmod.com  Wed Mar 18 06:19:10 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 18 Mar 2009 07:19:10 -0500
Subject: [Twisted-Python] LineReceiver MAX_LENGTH limitation
In-Reply-To: <b460e9630903180510g1d9ac237ib43f2de795ff337c@mail.gmail.com>
Message-ID: <20090318121910.12853.1326945437.divmod.quotient.24853@henry.divmod.com>

On Wed, 18 Mar 2009 13:10:12 +0100, Pet <petshmidt at googlemail.com> wrote:
>Hi,
>
>in LineReceiver there is MAX_LENGTH = 16384 limitation. Is it possible
>to set it bigger at start of an application?

It's an attribute.  Not only can you set it to a larger value at the start
of an application, but you can also set it at the middle or the end of an
application. ;)

Jean-Paul



From petshmidt at googlemail.com  Wed Mar 18 06:48:09 2009
From: petshmidt at googlemail.com (Pet)
Date: Wed, 18 Mar 2009 13:48:09 +0100
Subject: [Twisted-Python] LineReceiver MAX_LENGTH limitation
In-Reply-To: <20090318121910.12853.1326945437.divmod.quotient.24853@henry.divmod.com>
References: <b460e9630903180510g1d9ac237ib43f2de795ff337c@mail.gmail.com>
	<20090318121910.12853.1326945437.divmod.quotient.24853@henry.divmod.com>
Message-ID: <b460e9630903180548v5aa60268q30d325bf3c8e090a@mail.gmail.com>

On Wed, Mar 18, 2009 at 1:19 PM, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> On Wed, 18 Mar 2009 13:10:12 +0100, Pet <petshmidt at googlemail.com> wrote:
>>
>> Hi,
>>
>> in LineReceiver there is MAX_LENGTH = 16384 limitation. Is it possible
>> to set it bigger at start of an application?
>
> It's an attribute.  Not only can you set it to a larger value at the start
> of an application, but you can also set it at the middle or the end of an
> application. ;)

Ups! I've tried and it didn't work for probably another reason.
Thanks, it works fine now. :)

Pet

>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From exarkun at twistedmatrix.com  Sun Mar 22 08:04:35 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 22 Mar 2009 14:04:35 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1237730675.96.1456295280@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090322/1213954a/attachment.html>

From matusis at yahoo.com  Sat Mar 21 21:02:03 2009
From: matusis at yahoo.com (Alec Matusis)
Date: Sat, 21 Mar 2009 20:02:03 -0700
Subject: [Twisted-Python] strange server crash
Message-ID: <032a01c9aa9a$94b70e40$be252ac0$@com>

I have been operating a busy twisted TCP server for quite some time (1
year+).

Yesterday, it strangely crashed under peak load for that day (it has been
under more load in the past).  

 

# grep segfault /var/log/messages

Mar 20 19:12:15 serv2 kernel: [17687209.144548] twistd[10701]: segfault at 8
rip 41eccf rsp 7fff33675270 error 6

 

I cannot understand the reason of the crash, except that its some very rare
race condition.

While the code is quite cumbersome, here are some general details:

 

8 min before the crash, the server started giving repeated error on clients
disconnect, that I have never seen before in the last year.

 

It first produced this twice:

 

2009/03/20 19:04 -0700 [ClientProtocol,318930,70.132.227.150] Unhandled
Error

        Traceback (most recent call last):

          File
"/nail/encap/Twisted-2.5.0/lib/python2.4/site-packages/twisted/application/a
pp.py", line 113, in runReactorWithLogging

            reactor.run()

          File
"/nail/encap/Twisted-2.5.0/lib/python2.4/site-packages/twisted/internet/posi
xbase.py", line 220, in run

            self.mainLoop()

          File
"/nail/encap/Twisted-2.5.0/lib/python2.4/site-packages/twisted/internet/posi
xbase.py", line 231, in mainLoop

            self.doIteration(t)

          File
"/nail/encap/Twisted-2.5.0/lib/python2.4/site-packages/twisted/internet/epol
lreactor.py", line 181, in doPoll

            log.callWithLogger(selectable, _drdw, selectable, fd, event)

        --- <exception caught here> ---

          File
"/nail/encap/Twisted-2.5.0/lib/python2.4/site-packages/twisted/python/log.py
", line 48, in callWithLogger

            return callWithContext({"system": lp}, func, *args, **kw)

          File
"/nail/encap/Twisted-2.5.0/lib/python2.4/site-packages/twisted/python/log.py
", line 33, in callWithContext

            return context.call({ILogContext: newCtx}, func, *args, **kw)

          File
"/nail/encap/Twisted-2.5.0/lib/python2.4/site-packages/twisted/python/contex
t.py", line 59, in callWithContext

            return self.currentContext().callWithContext(ctx, func, *args,
**kw)

          File
"/nail/encap/Twisted-2.5.0/lib/python2.4/site-packages/twisted/python/contex
t.py", line 37, in callWithContext

            return func(*args,**kw)

          File
"/nail/encap/Twisted-2.5.0/lib/python2.4/site-packages/twisted/internet/epol
lreactor.py", line 212, in _doReadOrWrite

            self._disconnectSelectable(selectable, why, inRead)

          File
"/nail/encap/Twisted-2.5.0/lib/python2.4/site-packages/twisted/internet/posi
xbase.py", line 252, in _disconnectSelectable

            selectable.readConnectionLost(f)

          File
"/nail/encap/Twisted-2.5.0/lib/python2.4/site-packages/twisted/internet/tcp.
py", line 405, in readConnectionLost

            self.connectionLost(reason)

          File
"/nail/encap/Twisted-2.5.0/lib/python2.4/site-packages/twisted/internet/tcp.
py", line 416, in connectionLost

            protocol.connectionLost(reason)

          File "/nail/live/im/myserv/protocols.py", line 170, in
connectionLost

            self.session.logout()

          File "/nail/live/im/myserv/service.py", line 1199, in logout

            if self.nick in session.sellers:

        exceptions.AttributeError: Deferred instance has no attribute
'sellers'

 

and then a different error in the same line with the same call stack, that
was repeated about 1000 times for different logging out clients:

 

2009/03/20 19:04 -0700 [ClientProtocol,326158,99.245.246.187] Unhandled
Error

        Traceback (most recent call last):

          File
"/nail/encap/Twisted-2.5.0/lib/python2.4/site-packages/twisted/application/a
pp.py", line 113, in runReactorWithLogging

            reactor.run()

          File
"/nail/encap/Twisted-2.5.0/lib/python2.4/site-packages/twisted/internet/posi
xbase.py", line 220, in run

            self.mainLoop()

          File
"/nail/encap/Twisted-2.5.0/lib/python2.4/site-packages/twisted/internet/posi
xbase.py", line 231, in mainLoop

            self.doIteration(t)

          File
"/nail/encap/Twisted-2.5.0/lib/python2.4/site-packages/twisted/internet/epol
lreactor.py", line 181, in doPoll

            log.callWithLogger(selectable, _drdw, selectable, fd, event)

        --- <exception caught here> ---

          File
"/nail/encap/Twisted-2.5.0/lib/python2.4/site-packages/twisted/python/log.py
", line 48, in callWithLogger

            return callWithContext({"system": lp}, func, *args, **kw)

          File
"/nail/encap/Twisted-2.5.0/lib/python2.4/site-packages/twisted/python/log.py
", line 33, in callWithContext

            return context.call({ILogContext: newCtx}, func, *args, **kw)

          File
"/nail/encap/Twisted-2.5.0/lib/python2.4/site-packages/twisted/python/contex
t.py", line 59, in callWithContext

            return self.currentContext().callWithContext(ctx, func, *args,
**kw)

          File
"/nail/encap/Twisted-2.5.0/lib/python2.4/site-packages/twisted/python/contex
t.py", line 37, in callWithContext

            return func(*args,**kw)

          File
"/nail/encap/Twisted-2.5.0/lib/python2.4/site-packages/twisted/internet/epol
lreactor.py", line 212, in _doReadOrWrite

            self._disconnectSelectable(selectable, why, inRead)

          File
"/nail/encap/Twisted-2.5.0/lib/python2.4/site-packages/twisted/internet/posi
xbase.py", line 252, in _disconnectSelectable

            selectable.readConnectionLost(f)

          File
"/nail/encap/Twisted-2.5.0/lib/python2.4/site-packages/twisted/internet/tcp.
py", line 405, in readConnectionLost

            self.connectionLost(reason)

          File
"/nail/encap/Twisted-2.5.0/lib/python2.4/site-packages/twisted/internet/tcp.
py", line 416, in connectionLost

            protocol.connectionLost(reason)

          File "/nail/live/im/myserv/protocols.py", line 170, in
connectionLost

            self.session.logout()

          File "/nail/live/im/myserv/service.py", line 1199, in logout

            if self.nick in session.sellers:

        exceptions.AttributeError: WLResultSet instance has no attribute
'sellers'

 

This last error repeated about 1000 times for different clients, after which
the segfault occurred.

The problem is, that session is an instance of a Session class that is
defined in the code, it is NEITHER a Deferred NOR an instance  of
WLResultSet class- these are completely different classes, and theres no
possible way in the code for variable session to become an instance of
Deferred.

The code is approximately like this:

 

def logout(self):

self.on_logout(self.do_logout) 

for session in self.service.client_sessions: ß self.service.client_sessions
is a dictionary of custom Session class instances

if self.nick in session.sellers:  ß error here, it claims that session is a
Deferred or sometimes an instance of a completely unrelated class

                                                #Some statements 

 

The function self.on_logout sometimes (rarely) dispatches a deferred (it has
maybeDeferred in it), such that its argument self.on_logout is called when
that deferred returns (otherwise its called synchronously).

 

My question is, is it possible to muck up deferred in such a way, that after
dispatching a deferred chain inside  self.on_logout(self.do_logout) , the
remaining statements would be executed in some  unexpected local scope, such
that I would see these weird errors where my for loop iterator would
suddenly go over Deferred instances, instead of the dictionary of Session
instances that I define in the code ?? 

 

Also, why did these errors lead to segfault of the whole twisted process
after 8 minutes?

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090321/825facf2/attachment.html>

From itamar at itamarst.org  Sun Mar 22 08:32:43 2009
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 22 Mar 2009 10:32:43 -0400
Subject: [Twisted-Python] strange server crash
In-Reply-To: <032a01c9aa9a$94b70e40$be252ac0$@com>
References: <032a01c9aa9a$94b70e40$be252ac0$@com>
Message-ID: <1237732363.5612.343.camel@pintsize>

On Sat, 2009-03-21 at 20:02 -0700, Alec Matusis wrote:

>           File "/nail/live/im/myserv/service.py", line 1199, in logout
> 
>             if self.nick in session.sellers:
> 
>         exceptions.AttributeError: WLResultSet instance has no
> attribute 'sellers'
> 
>  
> 
> This last error repeated about 1000 times for different clients, after
> which the segfault occurred.
> 
> The problem is, that “session” is an instance of a Session class that
> is defined in the code, it is NEITHER a Deferred NOR an instance  of
> WLResultSet class- these are completely different classes, and there’s
> no possible way in the code for variable session to become an instance
> of Deferred.

I've seen this happen - once. My guess then was memory corruption of
some sort (somewhere in the C level). If you have any custom C
extensions you might want to try valgrind.




From radix at twistedmatrix.com  Sun Mar 22 09:10:13 2009
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 22 Mar 2009 11:10:13 -0400
Subject: [Twisted-Python] strange server crash
In-Reply-To: <1237732363.5612.343.camel@pintsize>
References: <032a01c9aa9a$94b70e40$be252ac0$@com>
	<1237732363.5612.343.camel@pintsize>
Message-ID: <60ed19d40903220810y3851bdc7p5f256728fec0e50a@mail.gmail.com>

On Sun, Mar 22, 2009 at 10:32 AM, Itamar Shtull-Trauring
<itamar at itamarst.org> wrote:
> On Sat, 2009-03-21 at 20:02 -0700, Alec Matusis wrote:
>
>>           File "/nail/live/im/myserv/service.py", line 1199, in logout
>>
>>             if self.nick in session.sellers:
>>
>>         exceptions.AttributeError: WLResultSet instance has no
>> attribute 'sellers'
>>
>>
>>
>> This last error repeated about 1000 times for different clients, after
>> which the segfault occurred.
>>
>> The problem is, that “session” is an instance of a Session class that
>> is defined in the code, it is NEITHER a Deferred NOR an instance  of
>> WLResultSet class- these are completely different classes, and there’s
>> no possible way in the code for variable session to become an instance
>> of Deferred.
>
> I've seen this happen - once. My guess then was memory corruption of
> some sort (somewhere in the C level). If you have any custom C
> extensions you might want to try valgrind.

I'd like to offer a slightly stronger suggestion that this segfault is
not the fault of any pure Python code (such as Twisted), but rather
some C extension that you're using, or perhaps a bug in the Python
runtime itself. The weird attribute errors for the wrong classes are
probably caused by memory corruption leading up to the segfault.


-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
http://canonical.com/



From adelagon at gmail.com  Sun Mar 22 09:46:22 2009
From: adelagon at gmail.com (Alvin Delagon)
Date: Sun, 22 Mar 2009 23:46:22 +0800
Subject: [Twisted-Python] strange server crash
In-Reply-To: <60ed19d40903220810y3851bdc7p5f256728fec0e50a@mail.gmail.com>
References: <032a01c9aa9a$94b70e40$be252ac0$@com>
	<1237732363.5612.343.camel@pintsize>
	<60ed19d40903220810y3851bdc7p5f256728fec0e50a@mail.gmail.com>
Message-ID: <7a01f6c00903220846o364f2aabp9f86cdf0da4acbd6@mail.gmail.com>

We also had a similar problem like this on one of our long running servers
although I didn't find some time to archive the logs. I'm not sure if it's
related; but I can see clearly that you're using python2.4 and it has some
funky issues with its memory management (
http://evanjones.ca/python-memory-part2.html).

We don't experience it anymore ever since we upgraded to python2.5.

---
Alvin


On Sun, Mar 22, 2009 at 11:10 PM, Christopher Armstrong <
radix at twistedmatrix.com> wrote:

> On Sun, Mar 22, 2009 at 10:32 AM, Itamar Shtull-Trauring
> <itamar at itamarst.org> wrote:
> > On Sat, 2009-03-21 at 20:02 -0700, Alec Matusis wrote:
> >
> >>           File "/nail/live/im/myserv/service.py", line 1199, in logout
> >>
> >>             if self.nick in session.sellers:
> >>
> >>         exceptions.AttributeError: WLResultSet instance has no
> >> attribute 'sellers'
> >>
> >>
> >>
> >> This last error repeated about 1000 times for different clients, after
> >> which the segfault occurred.
> >>
> >> The problem is, that “session” is an instance of a Session class that
> >> is defined in the code, it is NEITHER a Deferred NOR an instance  of
> >> WLResultSet class- these are completely different classes, and there’s
> >> no possible way in the code for variable session to become an instance
> >> of Deferred.
> >
> > I've seen this happen - once. My guess then was memory corruption of
> > some sort (somewhere in the C level). If you have any custom C
> > extensions you might want to try valgrind.
>
> I'd like to offer a slightly stronger suggestion that this segfault is
> not the fault of any pure Python code (such as Twisted), but rather
> some C extension that you're using, or perhaps a bug in the Python
> runtime itself. The weird attribute errors for the wrong classes are
> probably caused by memory corruption leading up to the segfault.
>
>
> --
> Christopher Armstrong
> http://radix.twistedmatrix.com/
> http://planet-if.com/
> http://canonical.com/
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
http://www.alvinatorsplayground.blogspot.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090322/a60c43cf/attachment.html>

From andrewfr_ice at yahoo.com  Sat Mar 21 09:35:28 2009
From: andrewfr_ice at yahoo.com (Andrew Francis)
Date: Sat, 21 Mar 2009 08:35:28 -0700 (PDT)
Subject: [Twisted-Python] Re: [Stackless] Stackless Twisted shocking
Message-ID: <931410.36291.qm@web34203.mail.mud.yahoo.com>


Hi Simon:

--- On Sat, 3/21/09, stackless-request at stackless.com <stackless-request at stackless.com> wrote:


> As more updates are sent zone->hub, per second, the
> incoming client->hub->zone messages take SECONDS to get thru!
> This is with approx 50 messages per second between a single zone and the >hub.

> Is this the sort of performance I can expect?

I am not an expert in performance tuning... and I have to do some performance testing soon. That said, I have problems envisioning the architecture. Does a request cause a C++ client to be spawned? Are the C++ clients logging into the server independent of requests? There are so many things missing. However the first thing I would ask is what sort of performance can I reasonably expect? What does the workflow look like? Where are the delays? Also what does stuff like CPU, memory utilization, paging look like as you increase the load? Are messages queuing up somewhere?
 
> If so, what I my alternatives? I am considering ditching
> the twisted part and using stacklessSockets instead.

Simon, PB Twisted is much higher level than stacklessSockets.

Cheers,
Andrew



      



From sipickles at googlemail.com  Fri Mar 20 12:16:47 2009
From: sipickles at googlemail.com (Simon Pickles)
Date: Fri, 20 Mar 2009 18:16:47 +0000
Subject: [Twisted-Python] Stackless Twisted shocking performance
Message-ID: <49C3DD8F.4010301@googlemail.com>

Hi,

Now I am first to admit my problem lies within my app design somewhere, 
but I thought I'd raise it here for advice.

I have a server made from a central stackless python hub, with a boost 
python c++ interface, to which c++ clients connect.

This hub is 'surrounded' by stackless python zones which are passed work 
by the hub. The zones send the updates to the hub which passes them onto 
the clients.

The hub and zones communicate using twisted.perspectivebroker.

This all seemed to work well, until I began to load test. It quickly 
became clear the MAJOR bottleneck was the transmission of data between 
the hub and zone - the twisted bit.

As more updates are sent zone->hub, per second, the incoming 
client->hub->zone messages take SECONDS to get thru! This is with approx 
50 messages per second between a single zone and the hub.

Is this the sort of performance I can expect?

If so, what I my alternatives? I am considering ditching the twisted 
part and using stacklessSockets instead.

Thanks for any advice

Simon



From exarkun at divmod.com  Sun Mar 22 17:32:30 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 22 Mar 2009 18:32:30 -0500
Subject: [Twisted-Python] Stackless Twisted shocking performance
In-Reply-To: <49C3DD8F.4010301@googlemail.com>
Message-ID: <20090322233230.12853.1565862116.divmod.quotient.26653@henry.divmod.com>

On Fri, 20 Mar 2009 18:16:47 +0000, Simon Pickles <sipickles at googlemail.com> wrote:
> [snip]
>
>As more updates are sent zone->hub, per second, the incoming 
>client->hub->zone messages take SECONDS to get thru! This is with approx 50 
>messages per second between a single zone and the hub.

"message" is a very non-specific unit of message.  For example, I just
threw together a PB demo that does 1754 messages per second.  That's a
lot more than your 50/sec, but who knows why?  You'll need to narrow down
the bottleneck a bit more precisely before there's much chance of getting
rid of it.

Jean-Paul



From exarkun at divmod.com  Sun Mar 22 17:34:42 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 22 Mar 2009 18:34:42 -0500
Subject: [Twisted-Python] Stackless Twisted shocking performance
In-Reply-To: <20090322233230.12853.1565862116.divmod.quotient.26653@henry.divmod.com>
Message-ID: <20090322233442.12853.1702673038.divmod.quotient.26655@henry.divmod.com>

On Sun, 22 Mar 2009 18:32:30 -0500, Jean-Paul Calderone <exarkun at divmod.com> wrote:
>On Fri, 20 Mar 2009 18:16:47 +0000, Simon Pickles <sipickles at googlemail.com> 
>wrote:
>>[snip]
>>
>>As more updates are sent zone->hub, per second, the incoming 
>>client->hub->zone messages take SECONDS to get thru! This is with approx 50 
>>messages per second between a single zone and the hub.
>
>"message" is a very non-specific unit of message.  For example, I just

Ahem, excuse me.  Unit of *measure*. :)

>threw together a PB demo that does 1754 messages per second.  That's a
>lot more than your 50/sec, but who knows why?  You'll need to narrow down
>the bottleneck a bit more precisely before there's much chance of getting
>rid of it.
>
>Jean-Paul
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From matusis at yahoo.com  Mon Mar 23 01:25:45 2009
From: matusis at yahoo.com (Alec Matusis)
Date: Mon, 23 Mar 2009 00:25:45 -0700
Subject: [Twisted-Python] strange server crash
In-Reply-To: <60ed19d40903220810y3851bdc7p5f256728fec0e50a@mail.gmail.com>
References: <032a01c9aa9a$94b70e40$be252ac0$@com>	<1237732363.5612.343.camel@pintsize>
	<60ed19d40903220810y3851bdc7p5f256728fec0e50a@mail.gmail.com>
Message-ID: <068901c9ab88$950674a0$bf135de0$@com>

Very strange. I am not using any custom C extensions...
In the last two days, it has been under larger load, and it has not crashed.
I will update to Python 2.6 soon.

By the way, are there any gotchas in updating from Twisted-2.5 (custom patched for epoll bug)/Python 2.4 to Twisted 8.2/Python 2.6?
It's a production server, so sometimes testing under fake limited load does not reveal everything.

> -----Original Message-----
> From: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-
> bounces at twistedmatrix.com] On Behalf Of Christopher Armstrong
> Sent: Sunday, March 22, 2009 8:10 AM
> To: Twisted general discussion
> Subject: Re: [Twisted-Python] strange server crash
> 
> On Sun, Mar 22, 2009 at 10:32 AM, Itamar Shtull-Trauring
> <itamar at itamarst.org> wrote:
> > On Sat, 2009-03-21 at 20:02 -0700, Alec Matusis wrote:
> >
> >>           File "/nail/live/im/myserv/service.py", line 1199, in
> logout
> >>
> >>             if self.nick in session.sellers:
> >>
> >>         exceptions.AttributeError: WLResultSet instance has no
> >> attribute 'sellers'
> >>
> >>
> >>
> >> This last error repeated about 1000 times for different clients,
> after
> >> which the segfault occurred.
> >>
> >> The problem is, that “session” is an instance of a Session class
> that
> >> is defined in the code, it is NEITHER a Deferred NOR an instance  of
> >> WLResultSet class- these are completely different classes, and
> there’s
> >> no possible way in the code for variable session to become an
> instance
> >> of Deferred.
> >
> > I've seen this happen - once. My guess then was memory corruption of
> > some sort (somewhere in the C level). If you have any custom C
> > extensions you might want to try valgrind.
> 
> I'd like to offer a slightly stronger suggestion that this segfault is
> not the fault of any pure Python code (such as Twisted), but rather
> some C extension that you're using, or perhaps a bug in the Python
> runtime itself. The weird attribute errors for the wrong classes are
> probably caused by memory corruption leading up to the segfault.
> 
> 
> --
> Christopher Armstrong
> http://radix.twistedmatrix.com/
> http://planet-if.com/
> http://canonical.com/
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python





From glyph at divmod.com  Mon Mar 23 02:36:39 2009
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 23 Mar 2009 08:36:39 -0000
Subject: [Twisted-Python] strange server crash
In-Reply-To: <068901c9ab88$950674a0$bf135de0$@com>
References: <032a01c9aa9a$94b70e40$be252ac0$@com>
	<1237732363.5612.343.camel@pintsize>
	<60ed19d40903220810y3851bdc7p5f256728fec0e50a@mail.gmail.com>
	<068901c9ab88$950674a0$bf135de0$@com>
Message-ID: <20090323083639.12555.1905784476.divmod.xquotient.6503@weber.divmod.com>


On 07:25 am, matusis at yahoo.com wrote:
>Very strange. I am not using any custom C extensions...
>In the last two days, it has been under larger load, and it has not 
>crashed.
>I will update to Python 2.6 soon.

Have you tested for bad RAM on that server?  The error mode is 
sufficiently weird and rare to make me suspect cosmic rays.



From travis at crystaltech.com  Mon Mar 23 10:45:48 2009
From: travis at crystaltech.com (Travis Kiel)
Date: Mon, 23 Mar 2009 11:45:48 -0500
Subject: [Twisted-Python] Stackless Twisted shocking performance
In-Reply-To: <20090322233442.12853.1702673038.divmod.quotient.26655@henry.divmod.com>
References: <20090322233230.12853.1565862116.divmod.quotient.26653@henry.divmod.com>
	<20090322233442.12853.1702673038.divmod.quotient.26655@henry.divmod.com>
Message-ID: <E083C354AEE0094BB00E091C7305C2AD05FE9227@NEWTEKEXCH02.newtekcapital.com>

Simon,

This is a shot in the dark, but have you tested the twisted performance with the nagle algorithm disabled?
 
Travis W Kiel

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Jean-Paul Calderone
Sent: Sunday, March 22, 2009 4:35 PM
To: Twisted general discussion; stackless at stackless.com
Subject: Re: [Twisted-Python] Stackless Twisted shocking performance

On Sun, 22 Mar 2009 18:32:30 -0500, Jean-Paul Calderone <exarkun at divmod.com> wrote:
>On Fri, 20 Mar 2009 18:16:47 +0000, Simon Pickles <sipickles at googlemail.com> 
>wrote:
>>[snip]
>>
>>As more updates are sent zone->hub, per second, the incoming 
>>client->hub->zone messages take SECONDS to get thru! This is with approx 50 
>>messages per second between a single zone and the hub.
>
>"message" is a very non-specific unit of message.  For example, I just

Ahem, excuse me.  Unit of *measure*. :)

>threw together a PB demo that does 1754 messages per second.  That's a
>lot more than your 50/sec, but who knows why?  You'll need to narrow down
>the bottleneck a bit more precisely before there's much chance of getting
>rid of it.
>
>Jean-Paul
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


Notice: This communication, including attachments, may contain information that is confidential. It constitutes non-public information intended to be conveyed only to the designated recipient(s). If the reader or recipient of this communication is not the intended recipient, an employee or agent of the intended recipient who is responsible for delivering it to the intended recipient, or if you believe that you have received this communication in error, please notify the sender immediately by return e-mail and promptly delete this e-mail, including attachments without reading or saving them in any manner. The unauthorized use, dissemination, distribution, or reproduction of this e-mail, including attachments, is prohibited and may be unlawful. If you have received this email in error, please notify us immediately by e-mail or telephone and delete the e-mail and the attachments (if any).



From matusis at yahoo.com  Mon Mar 23 12:19:33 2009
From: matusis at yahoo.com (Alec Matusis)
Date: Mon, 23 Mar 2009 11:19:33 -0700
Subject: [Twisted-Python] strange server crash
In-Reply-To: <20090323083639.12555.1905784476.divmod.xquotient.6503@weber.divmod.com>
References: <032a01c9aa9a$94b70e40$be252ac0$@com>	<1237732363.5612.343.camel@pintsize>	<60ed19d40903220810y3851bdc7p5f256728fec0e50a@mail.gmail.com>	<068901c9ab88$950674a0$bf135de0$@com>
	<20090323083639.12555.1905784476.divmod.xquotient.6503@weber.divmod.com>
Message-ID: <079d01c9abe3$eac53b50$c04fb1f0$@com>

I have tested for bad RAM when the server was installed 3 month ago, I did a memtest that run for a day.
This is an 8 core server, and I run one twistd process per core, and surprisingly, only one crashed out of 8. Would you think that the effect of bad RAM would be confined to just once server out of 8?

> -----Original Message-----
> From: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-
> bounces at twistedmatrix.com] On Behalf Of glyph at divmod.com
> Sent: Monday, March 23, 2009 1:37 AM
> To: 'Twisted general discussion'
> Subject: RE: [Twisted-Python] strange server crash
> 
> 
> On 07:25 am, matusis at yahoo.com wrote:
> >Very strange. I am not using any custom C extensions...
> >In the last two days, it has been under larger load, and it has not
> >crashed.
> >I will update to Python 2.6 soon.
> 
> Have you tested for bad RAM on that server?  The error mode is
> sufficiently weird and rare to make me suspect cosmic rays.
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From db3l.net at gmail.com  Mon Mar 23 13:23:32 2009
From: db3l.net at gmail.com (David Bolen)
Date: Mon, 23 Mar 2009 15:23:32 -0400
Subject: [Twisted-Python] Re: strange server crash
References: <032a01c9aa9a$94b70e40$be252ac0$@com>
	<1237732363.5612.343.camel@pintsize>
	<60ed19d40903220810y3851bdc7p5f256728fec0e50a@mail.gmail.com>
	<068901c9ab88$950674a0$bf135de0$@com>
	<20090323083639.12555.1905784476.divmod.xquotient.6503@weber.divmod.com>
	<079d01c9abe3$eac53b50$c04fb1f0$@com>
Message-ID: <m2fxh42gcr.fsf@valheru.db3l.homeip.net>

"Alec Matusis" <matusis at yahoo.com> writes:

> I have tested for bad RAM when the server was installed 3 month ago,
> I did a memtest that run for a day.  This is an 8 core server, and I
> run one twistd process per core, and surprisingly, only one crashed
> out of 8. Would you think that the effect of bad RAM would be
> confined to just once server out of 8?

Sure, since it totally depends on just what bit of memory was faulty.
Just about any behavior you can think of can happen.  It could be a
simple, quick SEGV in a single process, an inexplicable failure at
some point post-corruption if the corrupted memory wasn't in code, up
to a full kernel crash if it just happened to hit a key kernel
structure or code path.  And if the memory isn't a hard failure you
can then keep running until the system just happens to use it again.

Of course, that's not to say the problem has to be memory or hardware
related, but the more inexplicable the behavior and/or system state at
the point of crash, the more I'd be inclined to consider it.

I will also say, that for some reason, I've run into more memory chip
failures in systems in the past year or so than in at least the prior
5+ years, using consistent, name brand, sources for the chips.  Maybe
the increasing densities (as well as most non-server systems still
non-ECC) or heavier use systems may make of memory might be at fault,
but regardless I'm more likely nowadays to consider faulty memory and
run a scan than I would have been a few years ago.

-- David




From coder_gus at lavabit.com  Mon Mar 23 14:48:14 2009
From: coder_gus at lavabit.com (coder_gus)
Date: Mon, 23 Mar 2009 22:48:14 +0200
Subject: [Twisted-Python] So how does everyone use an ORM in twisted?
In-Reply-To: <20090317151738.12853.1551779152.divmod.quotient.24391@henry.divmod.com>
References: <20090317151738.12853.1551779152.divmod.quotient.24391@henry.divmod.com>
Message-ID: <49C7F58E.9060308@lavabit.com>

So, basically what you say is that if I do something like:

def dataReceived(self, data):
    reactor.callInThread(f, data)

and later you have:
def getData():
    data = orm_session.query(Object).filter(data).all()
    return data # eagerloaded, lazyloaded and put in any format you like

reactor.callFromThread(getData)

at the time of the query or when lazy-loading an attribute the reactor 
would block?

And if so, why is that? I do not know the internals of the reactor nor 
the ones of the ORM and I am interested why something like this won't work.

Thanks.

P.S: Sorry for the vaguely python pseudo-code, hope you got the idea.

Jean-Paul Calderone wrote:
> On Tue, 17 Mar 2009 11:05:59 -0400, Ryan Lepidi <ryeguy1 at gmail.com> 
> wrote:
>> I have searched a bit, and it seems as though you can't use SQL 
>> Alchemy with
>> twisted due to SA being thread unsafe. The only solution I found was 
>> sAsync,
>> but this is old and unmaintained. What is everyone else doing for 
>> database
>> access for a multiuser server? Is everyone really using raw sql 
>> queries or
>> is there some easy solution that I'm missing?
>>
>> I'm not even stuck on SQL Alchemy; if there is some other ORM that 
>> works in
>> this case, I'd be willing to learn it.
>>
>
> I use Axiom (for Mantissa, a somewhat general-purpose application server,
> for Quotient, a mail server based on it, for Imaginary, a text adventure
> server based on it, for Blendix, a person aggregator based on it, for
> Merit, a test results database, etc) most of the time.  I know some other
> people are using Storm.
>
> Overall, I think that the way all existing ORMs work (including Axiom and
> Storm) is hostile towards the typical Twisted program structure (or vice
> versa, or both).  So it's tough.  The approach Axiom takes is to warn you
> that any database operation you perform must complete quickly or your app
> will suffer, and to restrict you to SQLite, so network issues can't hurt
> you.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
> ____________________________________________________________________________________ 
>
> Be a professional.  Click here to earn a psychology degree.
> http://ads.lavabit.com/fc/BLSrjwr2XUejFQl52llZu1OHc75Kvdk24AO6XmzlqNlFiwPiYRenCdFpDfK/ 
>
> ____________________________________________________________________________________ 
>




From petshmidt at googlemail.com  Tue Mar 24 04:10:17 2009
From: petshmidt at googlemail.com (Pet)
Date: Tue, 24 Mar 2009 11:10:17 +0100
Subject: [Twisted-Python] db connections
Message-ID: <b460e9630903240310h5d0965e0j3425ba19456fdfe5@mail.gmail.com>

Hi,

I've wrote an daemon which does some queries to db and sends response
back to client. Do I need to make for every request from client (new
instance of  MyProtocol) a new connection to DB? Or can I somehow
prepare connection, so I could save some time? Maybe make connection
in Factory and pass it to Protocol? But what happens if too much
clients are connected to server? What is the way to control it?

Regards, Pet


class MyProtocol(basic.LineReceiver):

    def __init__(self):
        print "new connection"
        self.dbcon = adbapi.ConnectionPool("pyPgSQL.PgSQL",
database="data", user='pet', host='local', password='some')


class MyFactory(protocol.ServerFactory):
    protocol = MyProtocol

class MyService(internet.TCPServer):
    def __init__(self):
        internet.TCPServer.__init__(self,PORT,MyFactory())

def main():
    reactor.listenTCP(PORT, MyFactory())
    reactor.run()


if __name__ == '__main__':
    main()



From adelagon at gmail.com  Tue Mar 24 07:45:48 2009
From: adelagon at gmail.com (Alvin Delagon)
Date: Tue, 24 Mar 2009 21:45:48 +0800
Subject: [Twisted-Python] db connections
In-Reply-To: <b460e9630903240310h5d0965e0j3425ba19456fdfe5@mail.gmail.com>
References: <b460e9630903240310h5d0965e0j3425ba19456fdfe5@mail.gmail.com>
Message-ID: <7a01f6c00903240645i439a08fduc0ac7a8b2842edb0@mail.gmail.com>

Put self.dbcon in the MyFactory class. MyProtocol instances can access it
via self.factory.


On Tue, Mar 24, 2009 at 6:10 PM, Pet <petshmidt at googlemail.com> wrote:

> Hi,
>
> I've wrote an daemon which does some queries to db and sends response
> back to client. Do I need to make for every request from client (new
> instance of  MyProtocol) a new connection to DB? Or can I somehow
> prepare connection, so I could save some time? Maybe make connection
> in Factory and pass it to Protocol? But what happens if too much
> clients are connected to server? What is the way to control it?
>
> Regards, Pet
>
>
> class MyProtocol(basic.LineReceiver):
>
>    def __init__(self):
>        print "new connection"
>        self.dbcon = adbapi.ConnectionPool("pyPgSQL.PgSQL",
> database="data", user='pet', host='local', password='some')
>
>
> class MyFactory(protocol.ServerFactory):
>    protocol = MyProtocol
>
> class MyService(internet.TCPServer):
>    def __init__(self):
>        internet.TCPServer.__init__(self,PORT,MyFactory())
>
> def main():
>    reactor.listenTCP(PORT, MyFactory())
>    reactor.run()
>
>
> if __name__ == '__main__':
>    main()
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
http://www.alvinatorsplayground.blogspot.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090324/07ed2875/attachment.html>

From hoadley at gmail.com  Tue Mar 24 10:04:16 2009
From: hoadley at gmail.com (Rob Hoadley)
Date: Tue, 24 Mar 2009 09:04:16 -0700
Subject: [Twisted-Python] db connections
In-Reply-To: <7a01f6c00903240645i439a08fduc0ac7a8b2842edb0@mail.gmail.com>
References: <b460e9630903240310h5d0965e0j3425ba19456fdfe5@mail.gmail.com>
	<7a01f6c00903240645i439a08fduc0ac7a8b2842edb0@mail.gmail.com>
Message-ID: <9bb390e70903240904k50bbe653j5c49bc0370f0d511@mail.gmail.com>

You'd want to use a connection pool to manage the db interaction.
Your server is pretty unusable after a db connection failure.  I've
used the connection pool before with a cp_min of 1 and a cp_max of 2.

http://twistedmatrix.com/documents/8.2.0/api/twisted.enterprise.adbapi.ConnectionPool.html


On Tue, Mar 24, 2009 at 6:45 AM, Alvin Delagon <adelagon at gmail.com> wrote:
> Put self.dbcon in the MyFactory class. MyProtocol instances can access it
> via self.factory.
>
>
> On Tue, Mar 24, 2009 at 6:10 PM, Pet <petshmidt at googlemail.com> wrote:
>>
>> Hi,
>>
>> I've wrote an daemon which does some queries to db and sends response
>> back to client. Do I need to make for every request from client (new
>> instance of  MyProtocol) a new connection to DB? Or can I somehow
>> prepare connection, so I could save some time? Maybe make connection
>> in Factory and pass it to Protocol? But what happens if too much
>> clients are connected to server? What is the way to control it?
>>
>> Regards, Pet
>>
>>
>> class MyProtocol(basic.LineReceiver):
>>
>>    def __init__(self):
>>        print "new connection"
>>        self.dbcon = adbapi.ConnectionPool("pyPgSQL.PgSQL",
>> database="data", user='pet', host='local', password='some')
>>
>>
>> class MyFactory(protocol.ServerFactory):
>>    protocol = MyProtocol
>>
>> class MyService(internet.TCPServer):
>>    def __init__(self):
>>        internet.TCPServer.__init__(self,PORT,MyFactory())
>>
>> def main():
>>    reactor.listenTCP(PORT, MyFactory())
>>    reactor.run()
>>
>>
>> if __name__ == '__main__':
>>    main()
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> --
> http://www.alvinatorsplayground.blogspot.com/
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>



From petshmidt at googlemail.com  Tue Mar 24 10:17:45 2009
From: petshmidt at googlemail.com (Pet)
Date: Tue, 24 Mar 2009 17:17:45 +0100
Subject: [Twisted-Python] db connections
In-Reply-To: <7a01f6c00903240645i439a08fduc0ac7a8b2842edb0@mail.gmail.com>
References: <b460e9630903240310h5d0965e0j3425ba19456fdfe5@mail.gmail.com> 
	<7a01f6c00903240645i439a08fduc0ac7a8b2842edb0@mail.gmail.com>
Message-ID: <b460e9630903240917g642656f2lfa7fe767cb9e6d0b@mail.gmail.com>

On Tue, Mar 24, 2009 at 2:45 PM, Alvin Delagon <adelagon at gmail.com> wrote:
> Put self.dbcon in the MyFactory class. MyProtocol instances can access it
> via self.factory.

Thanks for your help! Could you give me an example? I'm getting an error

MyProtocol instance has no attribute 'factory'

if I do as you suggested.



>
>
> On Tue, Mar 24, 2009 at 6:10 PM, Pet <petshmidt at googlemail.com> wrote:
>>
>> Hi,
>>
>> I've wrote an daemon which does some queries to db and sends response
>> back to client. Do I need to make for every request from client (new
>> instance of  MyProtocol) a new connection to DB? Or can I somehow
>> prepare connection, so I could save some time? Maybe make connection
>> in Factory and pass it to Protocol? But what happens if too much
>> clients are connected to server? What is the way to control it?
>>
>> Regards, Pet
>>
>>
>> class MyProtocol(basic.LineReceiver):
>>
>>    def __init__(self):
>>        print "new connection"
>>        self.dbcon = adbapi.ConnectionPool("pyPgSQL.PgSQL",
>> database="data", user='pet', host='local', password='some')
>>
>>
>> class MyFactory(protocol.ServerFactory):
>>    protocol = MyProtocol
>>
>> class MyService(internet.TCPServer):
>>    def __init__(self):
>>        internet.TCPServer.__init__(self,PORT,MyFactory())
>>
>> def main():
>>    reactor.listenTCP(PORT, MyFactory())
>>    reactor.run()
>>
>>
>> if __name__ == '__main__':
>>    main()
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> --
> http://www.alvinatorsplayground.blogspot.com/
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>



From petshmidt at googlemail.com  Tue Mar 24 10:22:02 2009
From: petshmidt at googlemail.com (Pet)
Date: Tue, 24 Mar 2009 17:22:02 +0100
Subject: [Twisted-Python] db connections
In-Reply-To: <9bb390e70903240904k50bbe653j5c49bc0370f0d511@mail.gmail.com>
References: <b460e9630903240310h5d0965e0j3425ba19456fdfe5@mail.gmail.com> 
	<7a01f6c00903240645i439a08fduc0ac7a8b2842edb0@mail.gmail.com> 
	<9bb390e70903240904k50bbe653j5c49bc0370f0d511@mail.gmail.com>
Message-ID: <b460e9630903240922q464491cbp96fd125054839b8@mail.gmail.com>

On Tue, Mar 24, 2009 at 5:04 PM, Rob Hoadley <hoadley at gmail.com> wrote:
> You'd want to use a connection pool to manage the db interaction.
> Your server is pretty unusable after a db connection failure.  I've
> used the connection pool before with a cp_min of 1 and a cp_max of 2.

Honestly speaking, I don't understand, what does it mean.
I'm already using connection pool with default cp_min an max, don't I?
Could you explain me, as for a newbie, please

>
> http://twistedmatrix.com/documents/8.2.0/api/twisted.enterprise.adbapi.ConnectionPool.html
>
>
> On Tue, Mar 24, 2009 at 6:45 AM, Alvin Delagon <adelagon at gmail.com> wrote:
>> Put self.dbcon in the MyFactory class. MyProtocol instances can access it
>> via self.factory.
>>
>>
>> On Tue, Mar 24, 2009 at 6:10 PM, Pet <petshmidt at googlemail.com> wrote:
>>>
>>> Hi,
>>>
>>> I've wrote an daemon which does some queries to db and sends response
>>> back to client. Do I need to make for every request from client (new
>>> instance of  MyProtocol) a new connection to DB? Or can I somehow
>>> prepare connection, so I could save some time? Maybe make connection
>>> in Factory and pass it to Protocol? But what happens if too much
>>> clients are connected to server? What is the way to control it?
>>>
>>> Regards, Pet
>>>
>>>
>>> class MyProtocol(basic.LineReceiver):
>>>
>>>    def __init__(self):
>>>        print "new connection"
>>>        self.dbcon = adbapi.ConnectionPool("pyPgSQL.PgSQL",
>>> database="data", user='pet', host='local', password='some')
>>>
>>>
>>> class MyFactory(protocol.ServerFactory):
>>>    protocol = MyProtocol
>>>
>>> class MyService(internet.TCPServer):
>>>    def __init__(self):
>>>        internet.TCPServer.__init__(self,PORT,MyFactory())
>>>
>>> def main():
>>>    reactor.listenTCP(PORT, MyFactory())
>>>    reactor.run()
>>>
>>>
>>> if __name__ == '__main__':
>>>    main()
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>>
>> --
>> http://www.alvinatorsplayground.blogspot.com/
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From adelagon at gmail.com  Tue Mar 24 11:10:17 2009
From: adelagon at gmail.com (Alvin Delagon)
Date: Wed, 25 Mar 2009 01:10:17 +0800
Subject: [Twisted-Python] db connections
In-Reply-To: <b460e9630903240922q464491cbp96fd125054839b8@mail.gmail.com>
References: <b460e9630903240310h5d0965e0j3425ba19456fdfe5@mail.gmail.com>
	<7a01f6c00903240645i439a08fduc0ac7a8b2842edb0@mail.gmail.com>
	<9bb390e70903240904k50bbe653j5c49bc0370f0d511@mail.gmail.com>
	<b460e9630903240922q464491cbp96fd125054839b8@mail.gmail.com>
Message-ID: <7a01f6c00903241010o42eb9b56nf43163fbf3a421a4@mail.gmail.com>

Something like this:

from twisted.protocols import basic
from twisted.internet import protocol, reactor
from twisted.enterprise import adbapi

class MyProtocol(basic.LineReceiver):
    def __init__(self):
        pass

    def lineReceived(self, line):
        ### dbcon can be accessed via self.factory
        print dir(self.factory.dbcon)

class MyFactory(protocol.ServerFactory):
    protocol = MyProtocol
    def __init__(self):
        self.dbcon = adbapi.ConnectionPool("pyPgSQL.PgSQL", database="data",
user='pet', host='local', password='some')

if __name__ == "__main__":
    reactor.listenTCP(8080, MyFactory())
    reactor.run()

I usually put persistent data on the factory so that protocol instances can
access them such as {username:<protocol instance>} dictionary for chatroom
server.



On Wed, Mar 25, 2009 at 12:22 AM, Pet <petshmidt at googlemail.com> wrote:

> On Tue, Mar 24, 2009 at 5:04 PM, Rob Hoadley <hoadley at gmail.com> wrote:
> > You'd want to use a connection pool to manage the db interaction.
> > Your server is pretty unusable after a db connection failure.  I've
> > used the connection pool before with a cp_min of 1 and a cp_max of 2.
>
> Honestly speaking, I don't understand, what does it mean.
> I'm already using connection pool with default cp_min an max, don't I?
> Could you explain me, as for a newbie, please
>
> >
> >
> http://twistedmatrix.com/documents/8.2.0/api/twisted.enterprise.adbapi.ConnectionPool.html
> >
> >
> > On Tue, Mar 24, 2009 at 6:45 AM, Alvin Delagon <adelagon at gmail.com>
> wrote:
> >> Put self.dbcon in the MyFactory class. MyProtocol instances can access
> it
> >> via self.factory.
> >>
> >>
> >> On Tue, Mar 24, 2009 at 6:10 PM, Pet <petshmidt at googlemail.com> wrote:
> >>>
> >>> Hi,
> >>>
> >>> I've wrote an daemon which does some queries to db and sends response
> >>> back to client. Do I need to make for every request from client (new
> >>> instance of  MyProtocol) a new connection to DB? Or can I somehow
> >>> prepare connection, so I could save some time? Maybe make connection
> >>> in Factory and pass it to Protocol? But what happens if too much
> >>> clients are connected to server? What is the way to control it?
> >>>
> >>> Regards, Pet
> >>>
> >>>
> >>> class MyProtocol(basic.LineReceiver):
> >>>
> >>>    def __init__(self):
> >>>        print "new connection"
> >>>        self.dbcon = adbapi.ConnectionPool("pyPgSQL.PgSQL",
> >>> database="data", user='pet', host='local', password='some')
> >>>
> >>>
> >>> class MyFactory(protocol.ServerFactory):
> >>>    protocol = MyProtocol
> >>>
> >>> class MyService(internet.TCPServer):
> >>>    def __init__(self):
> >>>        internet.TCPServer.__init__(self,PORT,MyFactory())
> >>>
> >>> def main():
> >>>    reactor.listenTCP(PORT, MyFactory())
> >>>    reactor.run()
> >>>
> >>>
> >>> if __name__ == '__main__':
> >>>    main()
> >>>
> >>> _______________________________________________
> >>> Twisted-Python mailing list
> >>> Twisted-Python at twistedmatrix.com
> >>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >>
> >>
> >>
> >> --
> >> http://www.alvinatorsplayground.blogspot.com/
> >>
> >> _______________________________________________
> >> Twisted-Python mailing list
> >> Twisted-Python at twistedmatrix.com
> >> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >>
> >>
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
http://www.alvinatorsplayground.blogspot.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090325/cf283f05/attachment.html>

From hoadley at gmail.com  Tue Mar 24 13:26:35 2009
From: hoadley at gmail.com (Rob Hoadley)
Date: Tue, 24 Mar 2009 12:26:35 -0700
Subject: [Twisted-Python] db connections
In-Reply-To: <7a01f6c00903241010o42eb9b56nf43163fbf3a421a4@mail.gmail.com>
References: <b460e9630903240310h5d0965e0j3425ba19456fdfe5@mail.gmail.com>
	<7a01f6c00903240645i439a08fduc0ac7a8b2842edb0@mail.gmail.com>
	<9bb390e70903240904k50bbe653j5c49bc0370f0d511@mail.gmail.com>
	<b460e9630903240922q464491cbp96fd125054839b8@mail.gmail.com>
	<7a01f6c00903241010o42eb9b56nf43163fbf3a421a4@mail.gmail.com>
Message-ID: <9bb390e70903241226t56219c8j398f3924f7bba557@mail.gmail.com>

Sorry I apologize... that email I wrote wasn't very clear.

I've done it in the factory like below.  Slightly different from
Alvin.   I've used the factory __init__ to pass on the logical_db
information... then I have a dbpool created later.  That way I can do
development and production based on ENV vars.  The db.return_kwargs
function just returns the appropriate environment args.  I was also
mentioning the reconnection functionality which by default is turned
off.    Just make sure you handle ConnectionLost exceptions.  Also in
the stopFactory I shutdown the dbpool by closing it.

You'll also notice the openFun... which i use to set the displayed
host name and app name.  But this is db vendor specific.

def __init__(self, baseDir, validDomains, logical_db, app_name ):
        ''' factory init '''
        self.baseDir = baseDir
        self.validDomains = validDomains
        self.logical_db = logical_db
        self.app_name = app_name

def startFactory(self):
    ''' In startFactory start up the dbpool '''

    self.db = db( self.logical_db, self.app_name )
    db_kwargs = self.db.return_kwargs()

    #set the delay_connect and
    #twisted cp_openfun callable
    db_kwargs['delay_connect'] = 1
    db_kwargs['cp_openfun']  = self.db._dbOptions
    db_kwargs['cp_min'] = 1  # one thread min
    db_kwargs['cp_max'] = 1  # one thread max  = only one db connection
    db_kwargs['cp_reconnect'] = 1  # reconnect if die
    db_kwargs['cp_noisy'] =  1

    #print out the db_kwargs
    print ",".join( ["%s=%s" % (k, v) for k, v in db_kwargs.items()] )

    self.dbpool =
adbapi.ConnectionPool(self.db.return_import_name(),**db_kwargs)

On Tue, Mar 24, 2009 at 10:10 AM, Alvin Delagon <adelagon at gmail.com> wrote:
> Something like this:
>
> from twisted.protocols import basic
> from twisted.internet import protocol, reactor
> from twisted.enterprise import adbapi
>
> class MyProtocol(basic.LineReceiver):
>     def __init__(self):
>         pass
>
>     def lineReceived(self, line):
>         ### dbcon can be accessed via self.factory
>         print dir(self.factory.dbcon)
>
> class MyFactory(protocol.ServerFactory):
>     protocol = MyProtocol
>     def __init__(self):
>         self.dbcon = adbapi.ConnectionPool("pyPgSQL.PgSQL", database="data",
> user='pet', host='local', password='some')
>
> if __name__ == "__main__":
>     reactor.listenTCP(8080, MyFactory())
>     reactor.run()
>
> I usually put persistent data on the factory so that protocol instances can
> access them such as {username:<protocol instance>} dictionary for chatroom
> server.
>
>
>
> On Wed, Mar 25, 2009 at 12:22 AM, Pet <petshmidt at googlemail.com> wrote:
>>
>> On Tue, Mar 24, 2009 at 5:04 PM, Rob Hoadley <hoadley at gmail.com> wrote:
>> > You'd want to use a connection pool to manage the db interaction.
>> > Your server is pretty unusable after a db connection failure.  I've
>> > used the connection pool before with a cp_min of 1 and a cp_max of 2.
>>
>> Honestly speaking, I don't understand, what does it mean.
>> I'm already using connection pool with default cp_min an max, don't I?
>> Could you explain me, as for a newbie, please
>>
>> >
>> >
>> > http://twistedmatrix.com/documents/8.2.0/api/twisted.enterprise.adbapi.ConnectionPool.html
>> >
>> >
>> > On Tue, Mar 24, 2009 at 6:45 AM, Alvin Delagon <adelagon at gmail.com>
>> > wrote:
>> >> Put self.dbcon in the MyFactory class. MyProtocol instances can access
>> >> it
>> >> via self.factory.
>> >>
>> >>
>> >> On Tue, Mar 24, 2009 at 6:10 PM, Pet <petshmidt at googlemail.com> wrote:
>> >>>
>> >>> Hi,
>> >>>
>> >>> I've wrote an daemon which does some queries to db and sends response
>> >>> back to client. Do I need to make for every request from client (new
>> >>> instance of  MyProtocol) a new connection to DB? Or can I somehow
>> >>> prepare connection, so I could save some time? Maybe make connection
>> >>> in Factory and pass it to Protocol? But what happens if too much
>> >>> clients are connected to server? What is the way to control it?
>> >>>
>> >>> Regards, Pet
>> >>>
>> >>>
>> >>> class MyProtocol(basic.LineReceiver):
>> >>>
>> >>>    def __init__(self):
>> >>>        print "new connection"
>> >>>        self.dbcon = adbapi.ConnectionPool("pyPgSQL.PgSQL",
>> >>> database="data", user='pet', host='local', password='some')
>> >>>
>> >>>
>> >>> class MyFactory(protocol.ServerFactory):
>> >>>    protocol = MyProtocol
>> >>>
>> >>> class MyService(internet.TCPServer):
>> >>>    def __init__(self):
>> >>>        internet.TCPServer.__init__(self,PORT,MyFactory())
>> >>>
>> >>> def main():
>> >>>    reactor.listenTCP(PORT, MyFactory())
>> >>>    reactor.run()
>> >>>
>> >>>
>> >>> if __name__ == '__main__':
>> >>>    main()
>> >>>
>> >>> _______________________________________________
>> >>> Twisted-Python mailing list
>> >>> Twisted-Python at twistedmatrix.com
>> >>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>> >>
>> >>
>> >>
>> >> --
>> >> http://www.alvinatorsplayground.blogspot.com/
>> >>
>> >> _______________________________________________
>> >> Twisted-Python mailing list
>> >> Twisted-Python at twistedmatrix.com
>> >> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>> >>
>> >>
>> >
>> > _______________________________________________
>> > Twisted-Python mailing list
>> > Twisted-Python at twistedmatrix.com
>> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>> >
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> --
> http://www.alvinatorsplayground.blogspot.com/
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>



From matusis at yahoo.com  Tue Mar 24 19:25:48 2009
From: matusis at yahoo.com (Alec Matusis)
Date: Tue, 24 Mar 2009 18:25:48 -0700
Subject: [Twisted-Python] strange server crash
In-Reply-To: <20090323083639.12555.1905784476.divmod.xquotient.6503@weber.divmod.com>
References: <032a01c9aa9a$94b70e40$be252ac0$@com>	<1237732363.5612.343.camel@pintsize>	<60ed19d40903220810y3851bdc7p5f256728fec0e50a@mail.gmail.com>	<068901c9ab88$950674a0$bf135de0$@com>
	<20090323083639.12555.1905784476.divmod.xquotient.6503@weber.divmod.com>
Message-ID: <00b101c9ace8$a1b69f20$e523dd60$@com>

This server crashed again today, again during maximum load for the day.
This time, no errors in the twisted log, and not even a segfault message in /var/log/messages : the pid simply ceased to exist.
Once again, this machine runs 8 twisted servers, but this one is slightly different from the others, and the error happened after the code for this server has been slightly modified.
I do not think this is the bad RAM anymore, because there's one particular server that keeps crashing on this machine.

> -----Original Message-----
> From: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-
> bounces at twistedmatrix.com] On Behalf Of glyph at divmod.com
> Sent: Monday, March 23, 2009 1:37 AM
> To: 'Twisted general discussion'
> Subject: RE: [Twisted-Python] strange server crash
> 
> 
> On 07:25 am, matusis at yahoo.com wrote:
> >Very strange. I am not using any custom C extensions...
> >In the last two days, it has been under larger load, and it has not
> >crashed.
> >I will update to Python 2.6 soon.
> 
> Have you tested for bad RAM on that server?  The error mode is
> sufficiently weird and rare to make me suspect cosmic rays.
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From matusis at yahoo.com  Wed Mar 25 00:31:57 2009
From: matusis at yahoo.com (Alec Matusis)
Date: Tue, 24 Mar 2009 23:31:57 -0700
Subject: FW: [Twisted-Python] strange server crash
Message-ID: <012c01c9ad13$66061bb0$32125310$@com>

One more thing:
This server has ECC memory, and it also has a BMC controller that externally logs all hardware errors independently of the memory condition.
>From what I understand, ECC memory module has an extra memory chip for data hashes. When data is written into ECC memory, the hash is created and stored in the extra chip, and when it's retrieved, the hash is checked. When a mismatch occurs, even if kernel does not log such error, the BMC controller logs it as 
# ipmitool sel list
1c10 | 02/19/2009 | 16:29:39 | Memory #0x08 | Uncorrectable ECC |
..
I retrieved the system even log (SEL) list from the BMC controller, and  are no errors whatsoever.

This looks like a Python error or something very basic. It started happening after I slightly changed the code for this particular server.

-----Original Message-----
From: Alec Matusis [mailto:matusis at yahoo.com] 
Sent: Tuesday, March 24, 2009 6:26 PM
To: 'Twisted general discussion'
Subject: RE: [Twisted-Python] strange server crash

This server crashed again today, again during maximum load for the day.
This time, no errors in the twisted log, and not even a segfault message in /var/log/messages : the pid simply ceased to exist.
Once again, this machine runs 8 twisted servers, but this one is slightly different from the others, and the error happened after the code for this server has been slightly modified.
I do not think this is the bad RAM anymore, because there's one particular server that keeps crashing on this machine.

> -----Original Message-----
> From: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-
> bounces at twistedmatrix.com] On Behalf Of glyph at divmod.com
> Sent: Monday, March 23, 2009 1:37 AM
> To: 'Twisted general discussion'
> Subject: RE: [Twisted-Python] strange server crash
> 
> 
> On 07:25 am, matusis at yahoo.com wrote:
> >Very strange. I am not using any custom C extensions...
> >In the last two days, it has been under larger load, and it has not
> >crashed.
> >I will update to Python 2.6 soon.
> 
> Have you tested for bad RAM on that server?  The error mode is
> sufficiently weird and rare to make me suspect cosmic rays.
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python





From petshmidt at googlemail.com  Wed Mar 25 03:22:40 2009
From: petshmidt at googlemail.com (Pet)
Date: Wed, 25 Mar 2009 10:22:40 +0100
Subject: [Twisted-Python] db connections
In-Reply-To: <7a01f6c00903241010o42eb9b56nf43163fbf3a421a4@mail.gmail.com>
References: <b460e9630903240310h5d0965e0j3425ba19456fdfe5@mail.gmail.com> 
	<7a01f6c00903240645i439a08fduc0ac7a8b2842edb0@mail.gmail.com> 
	<9bb390e70903240904k50bbe653j5c49bc0370f0d511@mail.gmail.com> 
	<b460e9630903240922q464491cbp96fd125054839b8@mail.gmail.com> 
	<7a01f6c00903241010o42eb9b56nf43163fbf3a421a4@mail.gmail.com>
Message-ID: <b460e9630903250222h7a6048dfmf6c7123b9bd3f08b@mail.gmail.com>

On Tue, Mar 24, 2009 at 6:10 PM, Alvin Delagon <adelagon at gmail.com> wrote:
> Something like this:
>
> from twisted.protocols import basic
> from twisted.internet import protocol, reactor
> from twisted.enterprise import adbapi
>
> class MyProtocol(basic.LineReceiver):
>     def __init__(self):
>         pass
>
>     def lineReceived(self, line):
>         ### dbcon can be accessed via self.factory
>         print dir(self.factory.dbcon)
>
> class MyFactory(protocol.ServerFactory):
>     protocol = MyProtocol
>     def __init__(self):
>         self.dbcon = adbapi.ConnectionPool("pyPgSQL.PgSQL", database="data",
> user='pet', host='local', password='some')
>
> if __name__ == "__main__":
>     reactor.listenTCP(8080, MyFactory())
>     reactor.run()
>
> I usually put persistent data on the factory so that protocol instances can
> access them such as {username:<protocol instance>} dictionary for chatroom
> server.

Hi,

thanks for example!
In that way, I'm getting error:

exceptions.AttributeError: MyProtocol instance has no attribute 'factory'

How can MyProtocol access self.factory.dbcon?


Pet




>
>
>
> On Wed, Mar 25, 2009 at 12:22 AM, Pet <petshmidt at googlemail.com> wrote:
>>
>> On Tue, Mar 24, 2009 at 5:04 PM, Rob Hoadley <hoadley at gmail.com> wrote:
>> > You'd want to use a connection pool to manage the db interaction.
>> > Your server is pretty unusable after a db connection failure.  I've
>> > used the connection pool before with a cp_min of 1 and a cp_max of 2.
>>
>> Honestly speaking, I don't understand, what does it mean.
>> I'm already using connection pool with default cp_min an max, don't I?
>> Could you explain me, as for a newbie, please
>>
>> >
>> >
>> > http://twistedmatrix.com/documents/8.2.0/api/twisted.enterprise.adbapi.ConnectionPool.html
>> >
>> >
>> > On Tue, Mar 24, 2009 at 6:45 AM, Alvin Delagon <adelagon at gmail.com>
>> > wrote:
>> >> Put self.dbcon in the MyFactory class. MyProtocol instances can access
>> >> it
>> >> via self.factory.
>> >>
>> >>
>> >> On Tue, Mar 24, 2009 at 6:10 PM, Pet <petshmidt at googlemail.com> wrote:
>> >>>
>> >>> Hi,
>> >>>
>> >>> I've wrote an daemon which does some queries to db and sends response
>> >>> back to client. Do I need to make for every request from client (new
>> >>> instance of  MyProtocol) a new connection to DB? Or can I somehow
>> >>> prepare connection, so I could save some time? Maybe make connection
>> >>> in Factory and pass it to Protocol? But what happens if too much
>> >>> clients are connected to server? What is the way to control it?
>> >>>
>> >>> Regards, Pet
>> >>>
>> >>>
>> >>> class MyProtocol(basic.LineReceiver):
>> >>>
>> >>>    def __init__(self):
>> >>>        print "new connection"
>> >>>        self.dbcon = adbapi.ConnectionPool("pyPgSQL.PgSQL",
>> >>> database="data", user='pet', host='local', password='some')
>> >>>
>> >>>
>> >>> class MyFactory(protocol.ServerFactory):
>> >>>    protocol = MyProtocol
>> >>>
>> >>> class MyService(internet.TCPServer):
>> >>>    def __init__(self):
>> >>>        internet.TCPServer.__init__(self,PORT,MyFactory())
>> >>>
>> >>> def main():
>> >>>    reactor.listenTCP(PORT, MyFactory())
>> >>>    reactor.run()
>> >>>
>> >>>
>> >>> if __name__ == '__main__':
>> >>>    main()
>> >>>
>> >>> _______________________________________________
>> >>> Twisted-Python mailing list
>> >>> Twisted-Python at twistedmatrix.com
>> >>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>> >>
>> >>
>> >>
>> >> --
>> >> http://www.alvinatorsplayground.blogspot.com/
>> >>
>> >> _______________________________________________
>> >> Twisted-Python mailing list
>> >> Twisted-Python at twistedmatrix.com
>> >> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>> >>
>> >>
>> >
>> > _______________________________________________
>> > Twisted-Python mailing list
>> > Twisted-Python at twistedmatrix.com
>> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>> >
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> --
> http://www.alvinatorsplayground.blogspot.com/
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>



From petshmidt at googlemail.com  Wed Mar 25 04:00:56 2009
From: petshmidt at googlemail.com (Pet)
Date: Wed, 25 Mar 2009 11:00:56 +0100
Subject: [Twisted-Python] db connections
In-Reply-To: <b460e9630903250222h7a6048dfmf6c7123b9bd3f08b@mail.gmail.com>
References: <b460e9630903240310h5d0965e0j3425ba19456fdfe5@mail.gmail.com> 
	<7a01f6c00903240645i439a08fduc0ac7a8b2842edb0@mail.gmail.com> 
	<9bb390e70903240904k50bbe653j5c49bc0370f0d511@mail.gmail.com> 
	<b460e9630903240922q464491cbp96fd125054839b8@mail.gmail.com> 
	<7a01f6c00903241010o42eb9b56nf43163fbf3a421a4@mail.gmail.com> 
	<b460e9630903250222h7a6048dfmf6c7123b9bd3f08b@mail.gmail.com>
Message-ID: <b460e9630903250300yd61e25aoc741a4b32c92353c@mail.gmail.com>

On Wed, Mar 25, 2009 at 10:22 AM, Pet <petshmidt at googlemail.com> wrote:
> On Tue, Mar 24, 2009 at 6:10 PM, Alvin Delagon <adelagon at gmail.com> wrote:
>> Something like this:
>>
>> from twisted.protocols import basic
>> from twisted.internet import protocol, reactor
>> from twisted.enterprise import adbapi
>>
>> class MyProtocol(basic.LineReceiver):
>>     def __init__(self):
>>         pass
>>
>>     def lineReceived(self, line):
>>         ### dbcon can be accessed via self.factory
>>         print dir(self.factory.dbcon)
>>
>> class MyFactory(protocol.ServerFactory):
>>     protocol = MyProtocol
>>     def __init__(self):
>>         self.dbcon = adbapi.ConnectionPool("pyPgSQL.PgSQL", database="data",
>> user='pet', host='local', password='some')
>>
>> if __name__ == "__main__":
>>     reactor.listenTCP(8080, MyFactory())
>>     reactor.run()
>>
>> I usually put persistent data on the factory so that protocol instances can
>> access them such as {username:<protocol instance>} dictionary for chatroom
>> server.
>
> Hi,
>
> thanks for example!
> In that way, I'm getting error:
>
> exceptions.AttributeError: MyProtocol instance has no attribute 'factory'
>
> How can MyProtocol access self.factory.dbcon?

Ups! I didn't followed exactly your example and tried to access
self.factory.dbcon in __init__ of MyProtocol, so I've got an error.
If I access self.factory.dbcon in lineReceived it seems to work. But I
don't really understand, why can I access factory in lineReceived and
not in __init__.

Pet

>
>
> Pet
>
>
>
>
>>
>>
>>
>> On Wed, Mar 25, 2009 at 12:22 AM, Pet <petshmidt at googlemail.com> wrote:
>>>
>>> On Tue, Mar 24, 2009 at 5:04 PM, Rob Hoadley <hoadley at gmail.com> wrote:
>>> > You'd want to use a connection pool to manage the db interaction.
>>> > Your server is pretty unusable after a db connection failure.  I've
>>> > used the connection pool before with a cp_min of 1 and a cp_max of 2.
>>>
>>> Honestly speaking, I don't understand, what does it mean.
>>> I'm already using connection pool with default cp_min an max, don't I?
>>> Could you explain me, as for a newbie, please
>>>
>>> >
>>> >
>>> > http://twistedmatrix.com/documents/8.2.0/api/twisted.enterprise.adbapi.ConnectionPool.html
>>> >
>>> >
>>> > On Tue, Mar 24, 2009 at 6:45 AM, Alvin Delagon <adelagon at gmail.com>
>>> > wrote:
>>> >> Put self.dbcon in the MyFactory class. MyProtocol instances can access
>>> >> it
>>> >> via self.factory.
>>> >>
>>> >>
>>> >> On Tue, Mar 24, 2009 at 6:10 PM, Pet <petshmidt at googlemail.com> wrote:
>>> >>>
>>> >>> Hi,
>>> >>>
>>> >>> I've wrote an daemon which does some queries to db and sends response
>>> >>> back to client. Do I need to make for every request from client (new
>>> >>> instance of  MyProtocol) a new connection to DB? Or can I somehow
>>> >>> prepare connection, so I could save some time? Maybe make connection
>>> >>> in Factory and pass it to Protocol? But what happens if too much
>>> >>> clients are connected to server? What is the way to control it?
>>> >>>
>>> >>> Regards, Pet
>>> >>>
>>> >>>
>>> >>> class MyProtocol(basic.LineReceiver):
>>> >>>
>>> >>>    def __init__(self):
>>> >>>        print "new connection"
>>> >>>        self.dbcon = adbapi.ConnectionPool("pyPgSQL.PgSQL",
>>> >>> database="data", user='pet', host='local', password='some')
>>> >>>
>>> >>>
>>> >>> class MyFactory(protocol.ServerFactory):
>>> >>>    protocol = MyProtocol
>>> >>>
>>> >>> class MyService(internet.TCPServer):
>>> >>>    def __init__(self):
>>> >>>        internet.TCPServer.__init__(self,PORT,MyFactory())
>>> >>>
>>> >>> def main():
>>> >>>    reactor.listenTCP(PORT, MyFactory())
>>> >>>    reactor.run()
>>> >>>
>>> >>>
>>> >>> if __name__ == '__main__':
>>> >>>    main()
>>> >>>
>>> >>> _______________________________________________
>>> >>> Twisted-Python mailing list
>>> >>> Twisted-Python at twistedmatrix.com
>>> >>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>> >>
>>> >>
>>> >>
>>> >> --
>>> >> http://www.alvinatorsplayground.blogspot.com/
>>> >>
>>> >> _______________________________________________
>>> >> Twisted-Python mailing list
>>> >> Twisted-Python at twistedmatrix.com
>>> >> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>> >>
>>> >>
>>> >
>>> > _______________________________________________
>>> > Twisted-Python mailing list
>>> > Twisted-Python at twistedmatrix.com
>>> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>> >
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>>
>> --
>> http://www.alvinatorsplayground.blogspot.com/
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>



From newptcai at gmail.com  Wed Mar 25 19:51:15 2009
From: newptcai at gmail.com (Peter Cai)
Date: Thu, 26 Mar 2009 09:51:15 +0800
Subject: [Twisted-Python] How to split a huge 'service' class.
Message-ID: <befee6d80903251851m444126f5ofe70d90fe5d8a258@mail.gmail.com>

Hi all,

I am writing a network application based on twisted and following the
"finger service" tutorial in twisted document.
I wrote multiple protocols classes and a single service class.
This allows client to choose the most suitable protocol to access services.

My problem is : the service class now become really huge, about 3000
thousands line of code.

Then I moved these code that really do the job in service class to several
classes, and the service would call these methods of these classes to finish
calls from protocol classes.

But still, this would cause another problem : now the service classes seems
to be useless.  It contains lots small methods that almost do nothing.  That
has a bad smell for me.

So, if you are in my situation, what will you do？

-- 
look to the things around you,the immediate world around you, if you are
alive,it will mean something to you ——Paul Strand
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090326/c9236ff8/attachment.html>

From dfarrell at mypublisher.com  Thu Mar 26 12:26:17 2009
From: dfarrell at mypublisher.com (Doug Farrell)
Date: Thu, 26 Mar 2009 14:26:17 -0400
Subject: [Twisted-Python] how to create state machines?
Message-ID: <318F79422ADC5041A93343721F84474D01A8BB43@exchange.mypublisher.local>

Hi all,

 

I'm still getting my 'sea legs' with Twisted, so this may be a novice
question, but I'm wondering what would be a good way to create a state
machine with Twisted? For instance I've written quite a bit of code in
different languages that creates co-operative, context switching schemes
using state machines. Here would be a primative example in psuedocode:

 

Switch(state):

                Case INIT:

                                Initialize()

                                state = CMD1

                Case CMD1:

                                CommandOne()

                                state = WAITCMD1

                Case WAITCMD1:

                                If CommandOneDone()

                                                state = DONE

                                Else

                                                state = WAITCMD1

                Case DONE:

                                state = EXIT

 

This state machine initializes a system, issues an asynchronous command
that takes time to complete (say a motor move command) and then waits
for that command to be done before exiting. In the context of a
framework that is calling this state machine, the WAITCMD1 is executed
repeatedly (polling) while the asynchronous command completes. A system
can be constructed with lots of little state machines like this and be
made to look like it is doing many things at once even though the
execution of the program is single threaded.

 

I understand (pretty much) the Twisted framework is like this and
implmenting event handlers like connectionMade(), etc., is a state
machine, but I'm wondering how to implement what I've outlined above in
one of Twisted's state event handlers, or inside something like
callLater(). For example, let's say I want to use Twisted to run a long
running daemon process that has an XMLRPC interface. That XMLRPC
interface is an interface to a state machine inside Twisted that allows
the caller to change state, or start new state machines, or get the
status of a running state machine. In that case I'm thinking I want a
state machine the runs continuously in the Twisted loop, structured like
the example above; co-operatively yielding back to Twisted, but running
non-stop. Something like callLater(1, stateMachine), but non-stop,
without even the 1 second call loop.

 

Is this something I can do with callLater()? Would using a deferred be a
better option? I see deferred's callBack() system as a connecting states
together, but I'm not sure how a WAITONCMD1 kind of thing would work,
where the deferred callBack(d, waitTillDone) would have to keep coming
back to itself till some condition is met?

 

Thanks in advance for your help,

Doug

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090326/ded4ec4d/attachment.html>

From jcavner at edac.unm.edu  Thu Mar 26 13:51:16 2009
From: jcavner at edac.unm.edu (Jeff Cavner)
Date: Thu, 26 Mar 2009 12:51:16 -0700
Subject: [Twisted-Python] pb and deferToThread for geographic data services
	- Newbie woes
Message-ID: <004401c9ae4c$39eada90$b83f1881@edac.bldg16>

I am trying to use Twisted to provide a high volume (with lots of
simultaneous requests) set of services that process and deliver several
different types of geographic data.  I am brand new to Twisted.  But a user
would come into the system through a Turbogears controller, where I intend
to write a Twisted perspective broker client to a pb server.  The server
will have different functions that ideally would operate in an asynchronous
fashion.   That is, the client would make a request for some processing on
one portion of the problem, while returning control and then another remote
function would be called to work on another part of the problem.  My
thinking was that I would have to use pb with deferToThread.  But I am
having a hard time finding any good examples that use both pb and
deferToThread.  In other words for a simple pb example like the following I
am unsure of where to add the deferToThread bits.

 

from twisted.spread import pb
from twisted.internet import reactor
from twisted.python import util
 
factory = pb.PBClientFactory()
reactor.connectTCP("localhost", 8789, factory)
d = factory.getRootObject()
d.addCallback(lambda object: object.callRemote("echo", "hello network"))
d.addCallback(lambda echo: 'server echoed: '+echo)
d.addErrback(lambda reason: 'error: '+str(reason.value))
d.addCallback(util.println)
d.addCallback(lambda _: reactor.stop())
reactor.run()

 

 

My attempt to modify the code above to take advantage of two remote function
calls (one long, and one short) to emulate longer processing times by a
function that should run while control is returned and the another function
called is woefully synchronous.

 

Here is that code:

 

from twisted.spread import pb

from twisted.internet import reactor

from twisted.python import util

from twisted.internet import threads

 

 

def getWMS():

    d.addCallback(lambda object: object.callRemote("long", "hello long"))

    d.addCallback(lambda long: 'server echoed: '+long)

    d.addErrback(lambda reason: 'error: '+str(reason.value))

    

 

def gotWMS(someobject):

    

    d.addCallback(util.println)

 

    

 

def getShort():

   e.addCallback(lambda object: object.callRemote("short", "hello short"))

   e.addCallback(lambda echo: 'server echoed: '+echo)

   e.addErrback(lambda reason: 'error: '+str(reason.value))

 

def gotShort(someobject):

 

   e.addCallback(util.println)

 

  

factory = pb.PBClientFactory()

reactor.connectTCP("localhost", 8789, factory)   

   

d = factory.getRootObject()

mythread = threads.deferToThread(getWMS)

mythread.addCallback(gotWMS)

 

e = factory.getRootObject()

mythread2 = threads.deferToThread(getShort)

mythread2.addCallback(gotShort)

 

reactor.run()

 

The long call always returns first and therefore stalls the return from the
short function. I was hoping, expecting to get the short call response back
before the long.  I am sure I am not thinking about any of this correctly.
Any pointers?????  Additionally does one have to get the rootObject for each
function call as I have done here?

 

Jeff Cavner

jcavner at edac.unm.edu

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090326/2c2e846d/attachment.html>

From andrewfr_ice at yahoo.com  Thu Mar 26 22:48:48 2009
From: andrewfr_ice at yahoo.com (Andrew Francis)
Date: Thu, 26 Mar 2009 21:48:48 -0700 (PDT)
Subject: [Twisted-Python] Re: Twisted-Python] how to create state machines?
Message-ID: <823535.95708.qm@web34206.mail.mud.yahoo.com>


Hi Doug:

>Message: 1
>Date: Thu, 26 Mar 2009 14:26:17 -0400
>From: "Doug Farrell" <dfarrell at mypublisher.com>
>Subject: [Twisted-Python] how to create state machines?
>To: <twisted-python at twistedmatrix.com>
>Message-ID:
    <318F79422ADC5041A93343721F84474D01A8BB43 at exchange.mypublisher.local>
>Content-Type: text/plain; charset="us-ascii"

>This state machine initializes a system, issues an asynchronous command
>that takes time to complete (say a motor move command) and then waits
>for that command to be done before exiting. In the context of a
>framework that is calling this state machine, the WAITCMD1 is executed
>repeatedly (polling) while the asynchronous command completes. A system
>can be constructed with lots of little state machines like this and be
>made to look like it is doing many things at once even though the
>execution of the program is single threaded.

>I understand (pretty much) the Twisted framework is like this and
>implmenting event handlers like connectionMade(), etc., is a state
>machine, but I'm wondering how to implement what I've outlined above in
>one of Twisted's state event handlers, or inside something like
>callLater(). For example, let's say I want to use Twisted to run a long
>running daemon process that has an XMLRPC interface. That XMLRPC
>interface is an interface to a state machine inside Twisted that allows
>the caller to change state, or start new state machines, or get the
>status of a running state machine. In that case I'm thinking I want a
>state machine the runs continuously in the Twisted loop, structured like
>the example above; co-operatively yielding back to Twisted, but running
>non-stop. Something like callLater(1, stateMachine), but non-stop,
>without even the 1 second call loop.

If I understand your correctly, I don't think you need to implement a state machine to simulate concurrency with Twisted - Twisted does a lot of that for you. You can think of a Twisted application as a state machine - the callback being the state and the completion of the operation and the calling of the callback is the transition. These callbacks at runtime act like a thread of execution. 

def Initialize(...):
    # do something
    deferred = someFunctionThatReturnsADeferred()
    deferred.addCallback(State2)

def State2(...):
    # do something
    deferred = someFunctionThatReturnsADeferred()
    deferred.addCallback(State3)

def State3(someData):
    # do something 
    if someData == 'State4':
       deferred = someFunctionThatReturnsADeferred()
       func = State4
    elif someData == 'State5':
       deferred = someOtherFunctionThatReturnsADeferred()
       func = State5
    ...
    deferred.addCallback(func)

if __name__ = "__main__":
   initialize()
   reactor.run()

As for the Twisted loop. Well, you don't really see the Twisted loop since that is hidden in the reactor. Also you should distinguish between writing a new protocol and using an existing one. 

In the case of XMLRPC, creating the server isn't the problem. 

http://twistedmatrix.com/projects/web/documentation/howto/xmlrpc.html

Once a XMLRPC server is created, Twisted will take responsibility for creating new instances (or threads if you want to see it that way). If you still need a state machine, then the only hiccup I can see is sharing  state machine (if you really need one) between XMLRPC method invocations.

Cheers,
Andrew









      



From exarkun at divmod.com  Fri Mar 27 10:14:07 2009
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 27 Mar 2009 11:14:07 -0500
Subject: [Twisted-Python] how to create state machines?
In-Reply-To: <318F79422ADC5041A93343721F84474D01A8BB43@exchange.mypublisher.local>
Message-ID: <20090327161407.24697.513810723.divmod.quotient.465@henry.divmod.com>

On Thu, 26 Mar 2009 14:26:17 -0400, Doug Farrell <dfarrell at mypublisher.com> wrote:
>Hi all,
>
>I'm still getting my 'sea legs' with Twisted, so this may be a novice
>question, but I'm wondering what would be a good way to create a state
>machine with Twisted? For instance I've written quite a bit of code in
>different languages that creates co-operative, context switching schemes
>using state machines. Here would be a primative example in psuedocode:
>

Here are a couple examples which might inspire your imagination a a bit
more (hopefully with practical results :).  I won't elaborate on them
much now because I'm rockin' at PyCon, but in a couple weeks I might be
enticed to discuss them a bit more.

  http://divmod.org/trac/browser/trunk/Epsilon/epsilon/modal.py
  http://divmod.org/trac/browser/trunk/Vertex/vertex/tcpdfa.py

Jean-Paul



From enriquejr at gmail.com  Fri Mar 27 19:32:54 2009
From: enriquejr at gmail.com (Enrique Samson Jr.)
Date: Sat, 28 Mar 2009 09:32:54 +0800
Subject: [Twisted-Python] db connections
In-Reply-To: <b460e9630903250300yd61e25aoc741a4b32c92353c@mail.gmail.com>
References: <b460e9630903240310h5d0965e0j3425ba19456fdfe5@mail.gmail.com>
	<7a01f6c00903240645i439a08fduc0ac7a8b2842edb0@mail.gmail.com>
	<9bb390e70903240904k50bbe653j5c49bc0370f0d511@mail.gmail.com>
	<b460e9630903240922q464491cbp96fd125054839b8@mail.gmail.com>
	<7a01f6c00903241010o42eb9b56nf43163fbf3a421a4@mail.gmail.com>
	<b460e9630903250222h7a6048dfmf6c7123b9bd3f08b@mail.gmail.com>
	<b460e9630903250300yd61e25aoc741a4b32c92353c@mail.gmail.com>
Message-ID: <1238203974.7549.4.camel@fenix>

On Wed, 2009-03-25 at 11:00 +0100, Pet wrote:
> > Hi,
> >
> > thanks for example!
> > In that way, I'm getting error:
> >
> > exceptions.AttributeError: MyProtocol instance has no attribute 'factory'
> >
> > How can MyProtocol access self.factory.dbcon?
> 
> Ups! I didn't followed exactly your example and tried to access
> self.factory.dbcon in __init__ of MyProtocol, so I've got an error.
> If I access self.factory.dbcon in lineReceived it seems to work. But I
> don't really understand, why can I access factory in lineReceived and
> not in __init__.
> 
> Pet

Hi Pet, 

You can simply look into the buildProtocol code of Factory for an
explanation. This is the part where your protocol gets to be
instantiated.


HTH,

Enrique





From petshmidt at googlemail.com  Sat Mar 28 02:35:05 2009
From: petshmidt at googlemail.com (Pet)
Date: Sat, 28 Mar 2009 09:35:05 +0100
Subject: [Twisted-Python] db connections
In-Reply-To: <1238203974.7549.4.camel@fenix>
References: <b460e9630903240310h5d0965e0j3425ba19456fdfe5@mail.gmail.com> 
	<7a01f6c00903240645i439a08fduc0ac7a8b2842edb0@mail.gmail.com> 
	<9bb390e70903240904k50bbe653j5c49bc0370f0d511@mail.gmail.com> 
	<b460e9630903240922q464491cbp96fd125054839b8@mail.gmail.com> 
	<7a01f6c00903241010o42eb9b56nf43163fbf3a421a4@mail.gmail.com> 
	<b460e9630903250222h7a6048dfmf6c7123b9bd3f08b@mail.gmail.com> 
	<b460e9630903250300yd61e25aoc741a4b32c92353c@mail.gmail.com> 
	<1238203974.7549.4.camel@fenix>
Message-ID: <b460e9630903280135y731c1d9rc0d4f0c7edc048a7@mail.gmail.com>

On Sat, Mar 28, 2009 at 2:32 AM, Enrique Samson Jr. <enriquejr at gmail.com> wrote:
> On Wed, 2009-03-25 at 11:00 +0100, Pet wrote:
>> > Hi,
>> >
>> > thanks for example!
>> > In that way, I'm getting error:
>> >
>> > exceptions.AttributeError: MyProtocol instance has no attribute 'factory'
>> >
>> > How can MyProtocol access self.factory.dbcon?
>>
>> Ups! I didn't followed exactly your example and tried to access
>> self.factory.dbcon in __init__ of MyProtocol, so I've got an error.
>> If I access self.factory.dbcon in lineReceived it seems to work. But I
>> don't really understand, why can I access factory in lineReceived and
>> not in __init__.
>>
>> Pet
>
> Hi Pet,
>
> You can simply look into the buildProtocol code of Factory for an
> explanation. This is the part where your protocol gets to be
> instantiated.

thanks for a hint. I'll look into that closer. Twisted is like a black
box for me right now. However, I've managed to write a useful
Client-Server App :)

>
>
> HTH,
>
> Enrique
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From zmola at acm.org  Sat Mar 28 09:36:22 2009
From: zmola at acm.org (Carl Zmola)
Date: Sat, 28 Mar 2009 11:36:22 -0400
Subject: FW: [Twisted-Python] strange server crash
In-Reply-To: <012c01c9ad13$66061bb0$32125310$@com>
References: <012c01c9ad13$66061bb0$32125310$@com>
Message-ID: <49CE43F6.7070704@acm.org>

Alec,

I know this sounds silly, but you might just want to rollback your 
changes and start the modification from scratch.  I would definitely 
review each change in detail.

If you rollback until you upgrade to 2.6, that might keep you going for 
a bit.  I know it isn't a programming solution, but ya gotta do what you 
gotta do.  I hate bugs that only show up in a production system.

Carl

Alec Matusis wrote:
> This looks like a Python error or something very basic. It started happening after I slightly changed the code for this particular server.
>
>   



From exarkun at twistedmatrix.com  Sat Mar 28 22:05:11 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 29 Mar 2009 04:05:11 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1238299511.19.1446531709@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090329/e5315116/attachment.html>

From darran at edmstudio.com  Sun Mar 29 07:41:54 2009
From: darran at edmstudio.com (Darran Edmundson)
Date: Mon, 30 Mar 2009 00:41:54 +1100
Subject: [Twisted-Python] Mac-owning Twisted programmer(s) wanted for
	interactive museum project
Message-ID: <49CF7AA2.4070306@edmstudio.com>


Hi All,

We are working on a large Australian museum project due to open in May 
and expecting more than 300,000 visitors per year.  We urgently need a 
few more highly-skilled python programmers to help get us across the 
finish line.  On the digital side, this 10,000 square foot "Museum of 
Democracy" features

    - an interactive timeline made from 14 52" touch screens.
    - a 270-degree cylindrical theatre of choreographed voxpops
    - touch interactives that solicit visitor opinions on museum content
    - RFID-enabled passes that, among other things, provide content for
      non-English speakers and accessibility to vision impaired visitors.
    - roughly 45 short films spread over 20 different viewing areas
    - on the technology side, we are using Twisted and CoreAnimation
      through the pyObjC bridge.

If this sounds interesting and you:

    - are a savvy python programmer with either extensive Twisted or
      pyObjC experience, or
    - are an ObjectiveC guru with CoreAnimation experience and
      proficient in python

    and

    - are experienced in object-oriented software development
    - can work remotely as part of our globally-distributed team
      (our team has members in Czech Republic, London, Guernsey,
      Australia)
    - have access to a Mac for local development
    - are committed to unit testing (we use trial and buildbot)
    - are available for full-time employment from now through the
      end of May (and perhaps longer).
    - are comfortable with SVN and Trac

then please contact me directly at darran at edmstudio.com.  As part of 
your response, please provide

    - a resume, preferably focused on python and/or osx development
    - a code sample demonstrating your Twisted, pyObjC or Objc prowess
    - example of a unit test you've written
    - your availability
    - your desired hourly rate

Note, we are after Twisted python and/or CoreAnimation gurus, not 
general python programmers with an interest in Mac.

Cheers,
Darran

P.S. Apologies if the above "job posting" isn't welcome on the list; I 
looked but couldn't find any restrictions in this regard.




From jan.bakuwel at omiha.com  Mon Mar 30 03:42:01 2009
From: jan.bakuwel at omiha.com (Jan Bakuwel)
Date: Mon, 30 Mar 2009 22:42:01 +1300
Subject: [Twisted-Python] How to use defer.fail better...
Message-ID: <49D093E9.3090405@omiha.com>

Hoi all,

I'm writing a twisted/python SMTP server that accepts emails from a MTA
using twisted. All works well, except that when I return a
defer.fail(None) from processEmail to messageHandler.eomReceived (see
below), twisted dumps the trace back of the last exception on stdout. Is
there a way to avoid this? I would like to handle the exception
gracefully (with an exception handler) and would not like to see any
trace back from it in my logs. I've read that using None as the
parameter to defer.fail does exactly that... what should I use instead?

The other thing I would like to do better is to have a way to return
smtp code 421 (service temporarily unavailable) rather than 550 (fatal)
in those cases where I would like to indicate a (temporary) failure to
receive the email. I've patched smtp.py (replace 550 -> 421) for this
but would gladly hear about a way to do this without patching a standard
component on my system.

thanks,
Jan



class messageHandler(object):
    implements(smtp.IMessage)
    
    def __init__(self, addressee):
        self.lines = []
        self.noisy = False
        self.emailMessage = None
        self.emailAddress = str(addressee)
    #__init__
    
    def lineReceived(self, line):
        self.lines.append(line)
    #lineReceived

    def eomReceived(self):
        # message is complete, store it
        self.lines.append('') # add a trailing newline
        messageData = '\n'.join(self.lines)
        emailMessage = message_from_string(messageData)
        return processEmail(self.emailAddress, emailMessage)
    #eomReceived

    def connectionLost(self):
        log(1, 'Connection lost unexpectedly!')
        # unexpected loss of connection; don't save
        del(self.lines)
        del(self.emailMessage)
    #connectionLost
    
#messageHandler


class localDelivery(object):
    implements(smtp.IMessageDelivery)
    
    def __init__(self):
        pass
    #end __init__
    
    def validateFrom(self, helo, originAddress):
        log (1, 'Incoming email from %s', str(originAddress))
        # accept mail from anywhere. To reject an address, raise
        # smtp.SMTPBadSender here.
        return originAddress
    #end validateFrom
    
    def receivedHeader(self, helo, origin, recipients):
        myHostname, clientIP = helo
        headerValue = "by %s from %s with ESMTP ; %s" % (myHostname,
clientIP, smtp.rfc822date())
        log(1, '...received: %s', headerValue)
        # email.Header.Header used for automatic wrapping of long lines
        return "Received: %s" % Header(headerValue)
    #end receivedHeader

    def validateTo(self, user):
        #if not user.dest.domain in valid_domains:
        #       print "Not accepting mail for %s" % user.dest
        #       raise smtp.SMTPBadRcpt(user)
        log(1, 'Accepting email for %s', user.dest)
        return lambda: messageHandler(user.dest)
    #end validateTo

#localDelivery


class SMTPFactory(protocol.ServerFactory):
    def __init__(self):
        pass
    #end __init__
    
    def buildProtocol(self, addr):
        delivery = localDelivery()
        smtpProtocol = smtp.SMTP(delivery)
        smtpProtocol.factory = self
        return smtpProtocol
    #buildProtocol
    
#SMTPFactory




From dfarrell at mypublisher.com  Mon Mar 30 09:10:48 2009
From: dfarrell at mypublisher.com (Doug Farrell)
Date: Mon, 30 Mar 2009 11:10:48 -0400
Subject: [Twisted-Python] RE: how to create state machines?
In-Reply-To: <E1LnETT-0002Ff-OU@cube.twistedmatrix.com>
References: <E1LnETT-0002Ff-OU@cube.twistedmatrix.com>
Message-ID: <318F79422ADC5041A93343721F84474D01A8BD68@exchange.mypublisher.local>

Hi Andrew,
> 
> Hi Doug:
> 
> >This state machine initializes a system, issues an asynchronous
> command
> >that takes time to complete (say a motor move command) and then waits
> >for that command to be done before exiting. In the context of a
> >framework that is calling this state machine, the WAITCMD1 is
executed
> >repeatedly (polling) while the asynchronous command completes. A
> system
> >can be constructed with lots of little state machines like this and
be
> >made to look like it is doing many things at once even though the
> >execution of the program is single threaded.
> 
> >I understand (pretty much) the Twisted framework is like this and
> >implmenting event handlers like connectionMade(), etc., is a state
> >machine, but I'm wondering how to implement what I've outlined above
> in
> >one of Twisted's state event handlers, or inside something like
> >callLater(). For example, let's say I want to use Twisted to run a
> long
> >running daemon process that has an XMLRPC interface. That XMLRPC
> >interface is an interface to a state machine inside Twisted that
> allows
> >the caller to change state, or start new state machines, or get the
> >status of a running state machine. In that case I'm thinking I want a
> >state machine the runs continuously in the Twisted loop, structured
> like
> >the example above; co-operatively yielding back to Twisted, but
> running
> >non-stop. Something like callLater(1, stateMachine), but non-stop,
> >without even the 1 second call loop.
> 
> If I understand your correctly, I don't think you need to implement a
> state machine to simulate concurrency with Twisted - Twisted does a
lot
> of that for you. You can think of a Twisted application as a state
> machine - the callback being the state and the completion of the
> operation and the calling of the callback is the transition. These
> callbacks at runtime act like a thread of execution.
> 
> def Initialize(...):
>     # do something
>     deferred = someFunctionThatReturnsADeferred()
>     deferred.addCallback(State2)
> 
> def State2(...):
>     # do something
>     deferred = someFunctionThatReturnsADeferred()
>     deferred.addCallback(State3)
> 
> def State3(someData):
>     # do something
>     if someData == 'State4':
>        deferred = someFunctionThatReturnsADeferred()
>        func = State4
>     elif someData == 'State5':
>        deferred = someOtherFunctionThatReturnsADeferred()
>        func = State5
>     ...
>     deferred.addCallback(func)
> 
> if __name__ = "__main__":
>    initialize()
>    reactor.run()
> 
> As for the Twisted loop. Well, you don't really see the Twisted loop
> since that is hidden in the reactor. Also you should distinguish
> between writing a new protocol and using an existing one.
> 
> In the case of XMLRPC, creating the server isn't the problem.
> 
> http://twistedmatrix.com/projects/web/documentation/howto/xmlrpc.html
> 
> Once a XMLRPC server is created, Twisted will take responsibility for
> creating new instances (or threads if you want to see it that way). If
> you still need a state machine, then the only hiccup I can see is
> sharing  state machine (if you really need one) between XMLRPC method
> invocations.
> 
> Cheers,
> Andrew
> 
[Doug Farrell] Thank you very much for your detailed response, I'm kinda
getting it and am going to try out a prototype to make sure I do. As you
mention, Twisted does take care of a lot of the issues dealing with
concurrency. Having written a few threaded applications, I didn't really
want to get into starting my state machine in a thread and then having
to deal with all the cross thread data safety issues.

One thing I'm still a little confused by in your reply is how you're
getting the deferred instance. Is there a particular reason your example
does this:

deferred = someOtherFunctionThatReturnsADeferred()

rather than this:

deferred = defer.deferred()

I just want to understand if there a reason the deferred is being
created in the other function.

Again, thanks for your help and response!
Doug



From andrewfr_ice at yahoo.com  Mon Mar 30 11:37:39 2009
From: andrewfr_ice at yahoo.com (Andrew Francis)
Date: Mon, 30 Mar 2009 10:37:39 -0700 (PDT)
Subject: [Twisted-Python] RE: how to create state machines?
Message-ID: <638852.12650.qm@web34204.mail.mud.yahoo.com>


Message: 2
Date: Mon, 30 Mar 2009 11:10:48 -0400
From: "Doug Farrell" <dfarrell at mypublisher.com>
Subject: [Twisted-Python] RE: how to create state machines?
To: <twisted-python at twistedmatrix.com>
Message-ID:
    <318F79422ADC5041A93343721F84474D01A8BD68 at exchange.mypublisher.local>
Content-Type: text/plain;    charset="us-ascii"

>[Doug Farrell] Thank you very much for your detailed response,

You are welcome Doug.

>One thing I'm still a little confused by in your reply is how you're
>getting the deferred instance. Is there a particular reason your example
>does this:

>deferred = someOtherFunctionThatReturnsADeferred()

Yes. There are Twisted methods that return a Deferred. For instance,  client.getPage() or in the case of a XMLRPC client, proxy.callRemote(). 

def processPage(data):
    # do stuff with the web page here

deferred = client.getPage("http://wwww.google.com")
deferred.addCallback(processPage)

>rather than this:
>deferred = defer.deferred()

Sometimes you want to create your own deferred and trigger it with a callback(). 
         
Cheers,
Andrew


      



From glyph at divmod.com  Mon Mar 30 13:02:32 2009
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 30 Mar 2009 19:02:32 -0000
Subject: [Twisted-Python] How to use defer.fail better...
In-Reply-To: <49D093E9.3090405@omiha.com>
References: <49D093E9.3090405@omiha.com>
Message-ID: <20090330190232.12555.1407611781.divmod.xquotient.6745@weber.divmod.com>

On 09:42 am, jan.bakuwel at omiha.com wrote:
>Hoi all,
>
>I'm writing a twisted/python SMTP server that accepts emails from a MTA
>using twisted. All works well, except that when I return a
>defer.fail(None) from processEmail to messageHandler.eomReceived (see
>below), twisted dumps the trace back of the last exception on stdout. 
>Is
>there a way to avoid this? I would like to handle the exception
>gracefully (with an exception handler) and would not like to see any
>trace back from it in my logs. I've read that using None as the
>parameter to defer.fail does exactly that... what should I use instead?

By the time you return, you need to have handled any exceptions.

If you want to separate exception handling into a separate function, use 
addErrback on the Deferred you have created.
>The other thing I would like to do better is to have a way to return
>smtp code 421 (service temporarily unavailable) rather than 550 (fatal)
>in those cases where I would like to indicate a (temporary) failure to
>receive the email. I've patched smtp.py (replace 550 -> 421) for this
>but would gladly hear about a way to do this without patching a 
>standard
>component on my system.

This is what twisted.python.failure.Failure.trap is for; you can catch 
specific exception types in your errbacks.

Please feel free to ask more specifically if this doesn't answer your 
question :).



From jan.bakuwel at omiha.com  Mon Mar 30 13:42:16 2009
From: jan.bakuwel at omiha.com (Jan Bakuwel)
Date: Tue, 31 Mar 2009 08:42:16 +1300
Subject: [Twisted-Python] How to use defer.fail better...
In-Reply-To: <20090330190232.12555.1407611781.divmod.xquotient.6745@weber.divmod.com>
References: <49D093E9.3090405@omiha.com>
	<20090330190232.12555.1407611781.divmod.xquotient.6745@weber.divmod.com>
Message-ID: <49D12098.9090907@omiha.com>

Hi Glyph,

>> I'm writing a twisted/python SMTP server that accepts emails from a MTA
>> using twisted. All works well, except that when I return a
>> defer.fail(None) from processEmail to messageHandler.eomReceived (see
>> below), twisted dumps the trace back of the last exception on stdout. Is
>> there a way to avoid this? I would like to handle the exception
>> gracefully (with an exception handler) and would not like to see any
>> trace back from it in my logs. I've read that using None as the
>> parameter to defer.fail does exactly that... what should I use instead?
>
> By the time you return, you need to have handled any exceptions.

I have...

My processEmail returns either defer.succeed(None) or return
defer.fail(None) based on some criteria. defer.succeed(None) translates
into telling the MTA that I've accepted the email (250);
defer.fail(None) translates into telling the MTA that I've not accepted
the email this time (421) but please try again later.

So... all is working as I would like it to work... except that twisted
dumps the exception trace back of the exception that occurred last on
stdout. There is no need for that... the exception has been handled already.

Can I make twisted not do that dump by passing another parameter
(instead of None) to defer.fail?

> If you want to separate exception handling into a separate function,
> use addErrback on the Deferred you have created.

I am not using call backs explicitly.... I am returning either
defer.succeed(None) or defer.fail(None) based on some criteria.

>> The other thing I would like to do better is to have a way to return
>> smtp code 421 (service temporarily unavailable) rather than 550 (fatal)
>> in those cases where I would like to indicate a (temporary) failure to
>> receive the email. I've patched smtp.py (replace 550 -> 421) for this
>> but would gladly hear about a way to do this without patching a standard
>> component on my system.
>
> This is what twisted.python.failure.Failure.trap is for; you can catch
> specific exception types in your errbacks.

Would you be able to give me an example how I can do this? I was
thinking about somehow (?) overriding _messageHandled? Is that not the
right way to go about it?

> Please feel free to ask more specifically if this doesn't answer your
> question :).

Thanks! Please see above :-)

Jan




From lists at webcrunchers.com  Mon Mar 30 16:07:08 2009
From: lists at webcrunchers.com (John Draper)
Date: Mon, 30 Mar 2009 15:07:08 -0700
Subject: [Twisted-Python] What kind of throughput can we expect to achieve
 when using DatagramProtocol (UDP)
Message-ID: <49D1428C.3050101@webcrunchers.com>

Hi,

We have an application we intend to release where we intend to have 
about a million applications sending UDP packets to a Twisted Python 
server which needs to process incoming data (Approx 128 bytes of text) 
per packet,   which a BACK end system is inserting this data into mySQL 
tables.

Has anyone done some serious "stress testing" of Twisted Python simple 
server code to see just how much data it can digest at a time.    Our 
server will no doubt be hosted on an OC3 - capable of 150 megabits of 
throughput with approx a 75 - 80% load.    We need to know how many 
servers we need to put into some kind of a load sharing cluster to be 
able to handle this very high data before it chokes.   

Right now,  in our proof of performance,  we are using UDP,  but 
planning to move to the more reliable TCPIP protocol when we get into 
production.

These data requests will come in fast and violent spurts of data.

John



From timwylie at hotmail.com  Mon Mar 30 16:27:36 2009
From: timwylie at hotmail.com (tim wylie)
Date: Mon, 30 Mar 2009 17:27:36 -0500
Subject: [Twisted-Python] New user - plugin question
Message-ID: <BAY112-W549DD83E0677DCFACA1096D18D0@phx.gbl>


Hello,
   I'm a long time linux/python user who's just now starting to use twisted.  I am looking for advice more than anything specific.  We're working on a small game/etc server that has several small games that can be played between users.  Maybe a card game, tic-tac-toe, etc.  There are a lot of different plugin subclasses to inherit from-how do you know which is best?  And with this kind of framework, is it better to have one interface class, say iGame, that all the games inherit from, or is it better to treat each game like a seperate plugin inheriting from different twisted plugin classes?

  There is a lot of good twisted documentation, but that is what also makes it difficult because each one does things differently depending on what they're implementing and it makes it difficult to decide which is the correct approach for what I want to do.  So, if there are any good documents related closer to what I'm doing I'd appreciate the heads up on that as well.  Well, thanks for your time.
Tim 

_________________________________________________________________
Windows Live™ SkyDrive: Get 25 GB of free online storage.
http://windowslive.com/online/skydrive?ocid=TXT_TAGLM_WL_skydrive_032009
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090330/fbdb3de3/attachment.html>

From matusis at yahoo.com  Mon Mar 30 16:39:27 2009
From: matusis at yahoo.com (Alec Matusis)
Date: Mon, 30 Mar 2009 15:39:27 -0700
Subject: [Twisted-Python] What kind of throughput can we expect to achieve
	when using DatagramProtocol (UDP)
In-Reply-To: <49D1428C.3050101@webcrunchers.com>
References: <49D1428C.3050101@webcrunchers.com>
Message-ID: <051501c9b188$6315ee20$2941ca60$@com>

One data point:
I have a server that processes about 20 UDP multicast packets per second.
This server does many other things, but the load from those 20 UDP pps is
negligible- it uses 0% CPU with just that (Xeon L5420)

> -----Original Message-----
> From: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-
> bounces at twistedmatrix.com] On Behalf Of John Draper
> Sent: Monday, March 30, 2009 3:07 PM
> To: Twisted general discussion
> Subject: [Twisted-Python] What kind of throughput can we expect to
> achieve when using DatagramProtocol (UDP)
> 
> Hi,
> 
> We have an application we intend to release where we intend to have
> about a million applications sending UDP packets to a Twisted Python
> server which needs to process incoming data (Approx 128 bytes of text)
> per packet,   which a BACK end system is inserting this data into mySQL
> tables.
> 
> Has anyone done some serious "stress testing" of Twisted Python simple
> server code to see just how much data it can digest at a time.    Our
> server will no doubt be hosted on an OC3 - capable of 150 megabits of
> throughput with approx a 75 - 80% load.    We need to know how many
> servers we need to put into some kind of a load sharing cluster to be
> able to handle this very high data before it chokes.
> 
> Right now,  in our proof of performance,  we are using UDP,  but
> planning to move to the more reliable TCPIP protocol when we get into
> production.
> 
> These data requests will come in fast and violent spurts of data.
> 
> John
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From itamar at itamarst.org  Mon Mar 30 16:57:55 2009
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 30 Mar 2009 18:57:55 -0400
Subject: [Twisted-Python] What kind of throughput can we expect to
	achieve when using DatagramProtocol (UDP)
In-Reply-To: <49D1428C.3050101@webcrunchers.com>
References: <49D1428C.3050101@webcrunchers.com>
Message-ID: <1238453875.16592.38.camel@pintsize>

On Mon, 2009-03-30 at 15:07 -0700, John Draper wrote:

> We have an application we intend to release where we intend to have 
> about a million applications sending UDP packets to a Twisted Python 
> server which needs to process incoming data (Approx 128 bytes of text) 
> per packet,   which a BACK end system is inserting this data into mySQL 
> tables.
>
> Right now,  in our proof of performance,  we are using UDP,  but 
> planning to move to the more reliable TCPIP protocol when we get into 
> production.
> 
> These data requests will come in fast and violent spurts of data.

In these sort of applications, batching helps a lot: less function
calls, less I/O overhead, etc.. So TCP should likely *speed* things up,
if messages come grouped in spurts. Benchmarks done with inserting one
MySQL row at a time will be far slower than batch inserts.




From lokare.ameya at gmail.com  Mon Mar 30 22:44:00 2009
From: lokare.ameya at gmail.com (Ameya Lokare)
Date: Mon, 30 Mar 2009 21:44:00 -0700
Subject: [Twisted-Python] Twisted conch - ssh question
Message-ID: <f13b37500903302144g58b0d240i6e6b97709a43fd41@mail.gmail.com>

Hello everyone,

I'm trying to get the sshsimpleserver.py and sshsimpleclient.py from the
examples <http://twistedmatrix.com/projects/conch/documentation/examples/>to
talk to each other. Both work fine with the standard linux ssh
client/server respectively, but I couldn't get them to communicate with each
other. All I want to do is simple data transfers to and fro, over the SSH
channel (no commands to be executed). I could get the session established,
but couldn't figure out how to do send data across from the client to the
server. I tried channel.write, but that didn't appear to work. Sorry if this
is too trivial a question, I'm a newbie to both Python and twisted. Any help
would be greatly appreciated!

-- 
Thanks & Regards,
Ameya
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090330/b056df96/attachment.html>

From paulswartz at gmail.com  Tue Mar 31 09:39:42 2009
From: paulswartz at gmail.com (Paul Swartz)
Date: Tue, 31 Mar 2009 11:39:42 -0400
Subject: [Twisted-Python] Twisted conch - ssh question
In-Reply-To: <f13b37500903302144g58b0d240i6e6b97709a43fd41@mail.gmail.com>
References: <f13b37500903302144g58b0d240i6e6b97709a43fd41@mail.gmail.com>
Message-ID: <49D2393E.4080404@gmail.com>

On 03/31/2009 12:44 AM, Ameya Lokare wrote:
> Hello everyone,
>
> I'm trying to get the sshsimpleserver.py and sshsimpleclient.py from the
> examples
> <http://twistedmatrix.com/projects/conch/documentation/examples/> to
> talk to each other. Both work fine with the standard linux ssh
> client/server respectively, but I couldn't get them to communicate with
> each other. All I want to do is simple data transfers to and fro, over
> the SSH channel (no commands to be executed). I could get the session
> established, but couldn't figure out how to do send data across from the
> client to the server. I tried channel.write, but that didn't appear to
> work. Sorry if this is too trivial a question, I'm a newbie to both
> Python and twisted. Any help would be greatly appreciated!

The two examples aren't made to work with each other. 
sshsimpleclient.py executes 3 commands on the remote server: `true`, 
`false`, and `cat`.  sshsimpleserver.py doesn't accept commands: a shell 
opened up will server as a simple echo server.

-p
-- 
Paul Swartz
paulswartz at gmail dot com
http://paulswartz.net/
AIM: z3penguin




From lokare.ameya at gmail.com  Tue Mar 31 11:19:19 2009
From: lokare.ameya at gmail.com (Ameya Lokare)
Date: Tue, 31 Mar 2009 10:19:19 -0700
Subject: [Twisted-Python] Twisted conch - ssh question
In-Reply-To: <49D2393E.4080404@gmail.com>
References: <f13b37500903302144g58b0d240i6e6b97709a43fd41@mail.gmail.com>
	<49D2393E.4080404@gmail.com>
Message-ID: <f13b37500903311019h79306581m3d10dce5d938bad8@mail.gmail.com>

Thanks for the response, Paul. Sorry I wasn't clear before. I realize they
are not made to work with each other. What I intended to ask was, what
modifications are required to make them work with each other? Basically, I
want to write both the ssh client and server with conch, and have them
transfer some data to each other over the ssh channel. How can this be done?

On Tue, Mar 31, 2009 at 8:39 AM, Paul Swartz <paulswartz at gmail.com> wrote:

> On 03/31/2009 12:44 AM, Ameya Lokare wrote:
>
>> Hello everyone,
>>
>> I'm trying to get the sshsimpleserver.py and sshsimpleclient.py from the
>> examples
>> <http://twistedmatrix.com/projects/conch/documentation/examples/> to
>> talk to each other. Both work fine with the standard linux ssh
>> client/server respectively, but I couldn't get them to communicate with
>> each other. All I want to do is simple data transfers to and fro, over
>> the SSH channel (no commands to be executed). I could get the session
>> established, but couldn't figure out how to do send data across from the
>> client to the server. I tried channel.write, but that didn't appear to
>> work. Sorry if this is too trivial a question, I'm a newbie to both
>> Python and twisted. Any help would be greatly appreciated!
>>
>
> The two examples aren't made to work with each other. sshsimpleclient.py
> executes 3 commands on the remote server: `true`, `false`, and `cat`.
>  sshsimpleserver.py doesn't accept commands: a shell opened up will server
> as a simple echo server.
>
> -p
> --
> Paul Swartz
> paulswartz at gmail dot com
> http://paulswartz.net/
> AIM: z3penguin
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Thanks & Regards,
Ameya Lokare
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20090331/d484181d/attachment.html>

From paulswartz at gmail.com  Tue Mar 31 12:22:47 2009
From: paulswartz at gmail.com (Paul Swartz)
Date: Tue, 31 Mar 2009 14:22:47 -0400
Subject: [Twisted-Python] Twisted conch - ssh question
In-Reply-To: <f13b37500903311019h79306581m3d10dce5d938bad8@mail.gmail.com>
References: <f13b37500903302144g58b0d240i6e6b97709a43fd41@mail.gmail.com>	<49D2393E.4080404@gmail.com>
	<f13b37500903311019h79306581m3d10dce5d938bad8@mail.gmail.com>
Message-ID: <49D25F77.8080406@gmail.com>

On 03/31/2009 01:19 PM, Ameya Lokare wrote:
> Thanks for the response, Paul. Sorry I wasn't clear before. I realize
> they are not made to work with each other. What I intended to ask was,
> what modifications are required to make them work with each other?
> Basically, I want to write both the ssh client and server with conch,
> and have them transfer some data to each other over the ssh channel. How
> can this be done?

You can either make the server accept commands (see the execCommand() 
method on session.SSHSession) or tell the client to request a shell:

self.conn.sendRequest(self, 'shell', '', wantReply=True)

HTH,
-p
-- 
Paul Swartz
paulswartz at gmail dot com
http://paulswartz.net/
AIM: z3penguin




From benjamin.r.welton at wmich.edu  Tue Mar 31 14:16:33 2009
From: benjamin.r.welton at wmich.edu (Benjamin Welton)
Date: Tue, 31 Mar 2009 16:16:33 -0400
Subject: [Twisted-Python] Authentication on NNTP in Twisted-News
Message-ID: <49D27A21.7060504@wmich.edu>

Hey Everyone,

    I am wondering if NNTP authentication was ever implemented into 
twisted-news? I ran across a mailing list discussion from about two 
years ago talking about implementing it in twisted but I haven't been 
able to find any info on if it was actually implemented.

Thanks,
Ben



