From ml.flex at gmail.com  Sun Oct  2 09:45:20 2005
From: ml.flex at gmail.com (Micky Latowicki)
Date: Sun, 2 Oct 2005 16:45:20 +0300
Subject: [Twisted-Python] TCP KeepAlive
Message-ID: <d27002d90510020645k18f7cd4cw48248b0e54499866@mail.gmail.com>

Hi.

Got a couple of questions regarding TCP keep alive's and twisted:

1. When the TCP connection times-out, is pb.Copyable.stoppedObserving() called?

2. (this one isn't really twisted-specific, but if you know, it would
be great): has anyone ever broke any other applications on his/her
machine by changing the OS-wide TCP keepAlive interval? is there any
way to know whether changing the keepAlive timeout would break any
other application? Is there a standard way to document a program's
dependency on this parameter?

Thanks.

Micky



From andrea at cpushare.com  Sun Oct  2 11:25:05 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Sun, 2 Oct 2005 17:25:05 +0200
Subject: [Twisted-Python] passClient for
	ReverseProxyResource/VHostMonsterResource
Message-ID: <20051002152505.GC16345@opteron.random>

Hello,

I need a new (optional) feature in the
ReverseProxyResource/VHostMonsterResource protocol. It's optional
because I doubt the reverse proxy of other packages could support it
without upgrades. I only had to add "passClient = True" as parameter to
ReverseProxyResource and VHostMonsterResource to enable it (two liner
patch to my code).

In short this passes the client ip and port from the reverse proxy
server to the vmonster resource, this way the nevow server that receives
the proxy connection knows who has connected to the proxy and it can
react accordingly. This is needed to really allow putting more nevow
servers transparently behind the same port, one of my nevow apps really
needed to know the ip of the connecting client.

Cross posting to both lists because it has two different parts, the
first is the Nevow part and the second is the Twisted part.  This code
is online right now and no problems so far (if you see any problem let
me know ;).

Here the Nevow part:

Index: Nevow/nevow/vhost.py
===================================================================
--- Nevow/nevow/vhost.py	(revision 1788)
+++ Nevow/nevow/vhost.py	(working copy)
@@ -134,13 +134,15 @@
     *after* it returns the (resource,segments) tuple.
     """
     implements(inevow.IResource)
+
+    def __init__(self, vhost_segments):
+        self.prepath_segments = vhost_segments+1 # +1 is for /vhost
+
     def locateChild(self, ctx, segments):
         request = inevow.IRequest(ctx)
-        request.prepath = request.prepath[3:]
+        request.prepath = request.prepath[self.prepath_segments:]
         return request.site.resource, segments
 
-_prepathCleaner = _VHostMonsterResourcePrepathCleaner()
-
 class VHostMonsterResource:
     """VHostMonster resource that helps to deploy a Nevow site behind a proxy.
     
@@ -173,14 +175,27 @@
 
     This also means your private server should serve the real content at
     /foo/bar, and not at the root of the tree.
+
+    If passClient is set to True it expects the client to be passed by the
+    proxy (see ReverseProxyResource passClient parameter for details). When
+    passClient is True this page should not be reacheable directly from the
+    internet if logging the IP address and port securely is needed.
     """
     implements(inevow.IResource)
 
+    vhost_segments = 2
+
+    def __init__(self, passClient = False):
+        self.passClient = passClient
+        if passClient:
+            self.vhost_segments = 3
+        self._prepathCleaner = _VHostMonsterResourcePrepathCleaner(self.vhost_segments)
+
     def locateChild(self, ctx, segments):
 
         request = inevow.IRequest(ctx)
 
-        if len(segments) < 2:
+        if len(segments) < self.vhost_segments:
             return rend.NotFound
         else:
             if segments[0] == 'http':
@@ -193,13 +208,18 @@
                 port = int(port)
             else:
                 host, port = segments[1], 80
-           
             request.setHost(host, port)
 
-            prefixLen = len('/'+'/'.join(request.prepath)+'/'+'/'.join(segments[:2]))
-            request.path = '/'+'/'.join(segments[2:])
+            if self.passClient:
+                if ':' not in segments[2]:
+                    return rend.NotFound
+                host, port = segments[2].split(':')
+                request.setClient(host, port)
+
+            prefixLen = len('/'+'/'.join(request.prepath)+'/'+'/'.join(segments[:self.vhost_segments]))
+            request.path = '/'+'/'.join(segments[self.vhost_segments:])
             request.uri = request.uri[prefixLen:]
 
-            return _prepathCleaner, segments[2:]
+            return self._prepathCleaner, segments[self.vhost_segments:]
         
 compy.backwardsCompatImplements(VHostMonsterResource)



Here the twisted part:

Index: Twisted/twisted/web/http.py
===================================================================
--- Twisted/twisted/web/http.py	(revision 14534)
+++ Twisted/twisted/web/http.py	(working copy)
@@ -876,6 +876,10 @@
         self.received_headers["host"] = host
         self.host = address.IPv4Address("TCP", host, port)
 
+    def setClient(self, host, port):
+        """Same as setHost but for the client address"""
+        self.client = address.IPv4Address("TCP", host, port)
+
     def getClientIP(self):
         if isinstance(self.client, address.IPv4Address):
             return self.client.host
Index: Twisted/twisted/web/proxy.py
===================================================================
--- Twisted/twisted/web/proxy.py	(revision 14534)
+++ Twisted/twisted/web/proxy.py	(working copy)
@@ -160,23 +160,33 @@
     to a different server.
     """
 
-    def __init__(self, host, port, path):
+    def __init__(self, host, port, path, passClient = False):
         resource.Resource.__init__(self)
         self.host = host
         self.port = port
         self.path = path
+        self.passClient = passClient
 
+    def getPath(self, request):
+        path = self.path
+        if self.passClient:
+            path += '/%s:%d' % (request.client.host, request.client.port)
+        return path
+
     def getChild(self, path, request):
-        return ReverseProxyResource(self.host, self.port, self.path+'/'+path)
+        return ReverseProxyResource(self.host, self.port, self.getPath(request)+'/'+path, False)
 
     def render(self, request):
         request.received_headers['host'] = self.host
         request.content.seek(0, 0)
+
+        path = self.getPath(request)
+
         qs = urlparse.urlparse(request.uri)[4]
         if qs:
-            rest = self.path + '?' + qs
+            rest = path + '?' + qs
         else:
-            rest = self.path
+            rest = path
         clientFactory = ProxyClientFactory(request.method, rest, 
                                      request.clientproto, 
                                      request.getAllHeaders(),



From warner at lothar.com  Sun Oct  2 15:18:56 2005
From: warner at lothar.com (Brian Warner)
Date: Sun, 02 Oct 2005 12:18:56 -0700 (PDT)
Subject: [Twisted-Python] TCP KeepAlive
Message-ID: <20051002.121856.118960310.warner@lothar.com>

> 1. When the TCP connection times-out, is pb.Copyable.stoppedObserving()
> called?

I think you mean pb.Cacheable.stoppedObserving, right? pb.Copyable is
fire-and-forget.

I see a call to stoppedObserving() inside Broker.connectionLost, so I'd
hazard a guess and say yes, when the TCP connection is lost (which could be
due to timeout, or the other end closing the connection, or the near end
closing the connection), all the current Cacheables will have their
stoppedObserving methods invoked.

Remember, however, that TCP timeouts are somewhat tricky, and rather
"forgiving": they are intended to ignore "transient" network failures that
only last a few minutes (once upon a time, when the internet was a slower
place than it is now, and the phrase "five nines" referred to a dubious but
still lucky poker hand, connection losses of several minutes at a time were
no cause for alarm, and certainly not a reason to abandon your hard-won
RFC88 Remote Job Entry Protocol session).

The primary timer is a "short" exponential-backoff retransmission timer for
data that has been sent but not yet acknowledged. It depends upon the kernel,
but I tend to see this one give up on the connection after 5 to 15 minutes of
non-connectivity.

If you set the SO_KEEPALIVE option, a second timer is activated which
basically pings the remote host every once in a while (although it does this
within the context of the TCP session, so it will also detect a remote host
that has shut down your connection but for which the FIN somehow went
missing). This helps detect remote hosts that have powered off abruptly (so
they weren't able to kill off processes and thus send FIN packets to
terminate the TCP connections), and failures in intermediate routers (or,
more commonly, a NAT box which has forgotten about the connection because it
hasn't sent any traffic for 10 or 20 minutes). If the connection is busy,
that is if each end sends some data to the other every couple of minutes,
then the normal retransmission timer will catch connectivity losses after 5
to 15 minutes.

The default interval for the keepalive timer tends to be one the order of 2
hours, plus it tries several times if it can't get through, which adds
another 10 or 15 minutes. So even with SO_KEEPALIVE turned on, it may be
hours before an otherwise-idle connection is detected as being broken.

This drove me crazy on the buildbot, because many of the buildslaves are
behind NAT boxes with short (20 minute) connection timeouts, and because the
buildslaves can be idle for days at a time (waiting for someone to make an
SVN checkin). So I added some application-level keepalives. The actual scheme
I used is kind of weird, I'm not sure I would recommend it for new code, but
the basic idea was to simply add a 'def remote_doNothing(self): pass' method
to a pb.Referenceable at the far end, set up a timer to invoke
target.callRemote("doNothing") once every 10 minutes, and then let the TCP
retransmission timer take care of the rest. On top of that, you could reduce
the extra traffic by keeping track of your normal callRemote invocations and
setting an .activity flag, and then only send the remote_doNothing if there
hadn't been any normal activity in the last 10 minutes. You could also detect
connectivity losses faster by starting a shorter (perhaps 3 minute) timer
when you send the doNothing, and if it doesn't complete (i.e. its Deferred
doesn't fire) before that timer expires, abandon the connection with
target.broker.transport.loseConnection() . If you choose this short timeout,
remember that it could be triggered accidentally if you have a method which
pushes a large amount of data over a slow (dialup) connection: this bit us
several times when the buildslave was dumping _trial_temp/test.log up to the
master, because it filled the Broker's transmit buffer with data that took 5
to 10 minutes to send, and the app-level keepalive message got queued after
that, so the response couldn't possibly get back in time.


Anyways, probably a larger answer than you really wanted :). Hope you (or
someone else, some day) finds it useful.

cheers,
 -Brian



From ml.flex at gmail.com  Mon Oct  3 04:35:03 2005
From: ml.flex at gmail.com (Micky Latowicki)
Date: Mon, 3 Oct 2005 11:35:03 +0300
Subject: [Twisted-Python] TCP KeepAlive
In-Reply-To: <20051002.121856.118960310.warner@lothar.com>
References: <20051002.121856.118960310.warner@lothar.com>
Message-ID: <d27002d90510030135m507805fbm667edf25544397f3@mail.gmail.com>

Thanks Brian. That was very informative. It makes application-level
keepalive sound rather simple, so if we have any trouble with TCP, I
guess we'll do that.



From moof at metamoof.net  Mon Oct  3 06:36:30 2005
From: moof at metamoof.net (Moof)
Date: Mon, 03 Oct 2005 12:36:30 +0200
Subject: [Twisted-Python] threadedselctreactor and releases
Message-ID: <434109AE.2000500@metamoof.net>

Warning: mild rant venting frustration from a user, here. I'm not trying to
offend, but I may have failed in this respect. Forgive me if I've failed in
this aim.

I've seen it mentioned quite often on the IRC channel recently, and it's
starting to get a bit silly now, I'm talking, in this case, about people
saying "you want to use wx? use threadedselectreactor".

I'd like to remind people that threadedselectreactor isn't officially
released, and people who want to release software that depends *on* twisted
prefer to work with full twisted releases, things that non-expert users can
*download* without having to go through the rigmarole of installing
subversion, and, in the case of windows users, learn to use the command line
or some obscure right-click menu. Telling people "use svn HEAD" is, quite
often, an answer that is useless for them.

So, I have three suggestions to offer. I'm writing from the point of view of
a user who doesn't know twisted inside out but does depend on it, and has
never used wxpython:

1) Support the released versions. That's sort of the point of making a
release, no? Rather than tell people "use threadedselectreactor and break
any hope of a release policy you might have" try and work out how, in this
case, people can get wxreactor working properly. This is, I gather, a
herculean effort in most cases, so I understand people's reticence towards
this course of action.

2) Make a new release of twisted.core. I gather this is unlikely to happen
in the near future, especially given the amoutn of work happening in trial
at the moment, so probably not the world's best idea. Plus, I'll get radix
moaning at me for even suggesting it ;)

3) Given the amount of people who still seem to wish to use wx with twisted,
and the frequency this thing comes up on dicussions on IRC, it's probably
worth going for this one: Backport threadedselectreactor to twisted.core 2.0
(probably not too onerous) and either make a maintenance release of
twisted.core with it in, or offer it for download as a separate package on
the main twisted page.

4) Do nothing, and leave people like me quite frustrated.

In the middle two cases, threadedselectreactor will need documenting on the
twisted site. There's plenty of incidental documentation out there, it just
needs someone to gather it up and put it together in the howto directly.

This isn't just about threadedselectreactor, it just seems to be the most
obvious problem. I first came across the "use svn HEAD" answer when I came
across a bug that had been fixed in trial. It's great, it works lovely now,
but the software environment I'm now developing in is not going to be the
one my users would eventually be downloading form the twisted webpage.
Thankfully, my users live in a controlled corporate environment, and, more
to the point, won't be runnning the test suite, so I have the possibiliy of
testing out my software with twisted release before sending it out for
release, but I'd hate to have to release a wx-dependent piece of software
here, something that is looking increasingly likely in the next three months
or so.

Yes, I am aware that most of you are volunteers. It's a volunteer-run and
volunteer-supported project. You guys are doign great work developing the
project, and I'm not tryign to denigrate that effort, merely make you aware
of a particular frustration from the point of view of a user of your
fabulous product, and one which probably contributes to people's diffidence
towards taking the project up.

Anyway, thanks for letting me vent on that subject for a bit.

Moof
-- 
Giles Antonio Radford, alias Moof
"Too old to be a chicken and too young to be a dirty old man"
Serving up my ego over at <http://metamoof.net/>



From jml at mumak.net  Mon Oct  3 06:52:15 2005
From: jml at mumak.net (Jonathan Lange)
Date: Mon, 3 Oct 2005 21:52:15 +1100
Subject: [Twisted-Python] threadedselctreactor and releases
In-Reply-To: <434109AE.2000500@metamoof.net>
References: <434109AE.2000500@metamoof.net>
Message-ID: <d06a5cd30510030352bee377a@mail.gmail.com>

On 03/10/05, Moof <moof at metamoof.net> wrote:
> 2) Make a new release of twisted.core. I gather this is unlikely to happen
> in the near future, especially given the amoutn of work happening in trial
> at the moment, so probably not the world's best idea. Plus, I'll get radix
> moaning at me for even suggesting it ;)

As far as Trial's concerned, I'd be happy for a release of core --
particularly if I had (say) a week's notice to clean bugs, deprecate
some more stuff and test the snot out of everything.

jml



From glyph at divmod.com  Mon Oct  3 07:33:17 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 3 Oct 2005 07:33:17 -0400
Subject: [Twisted-Python] threadedselctreactor and releases
In-Reply-To: <434109AE.2000500@metamoof.net>
Message-ID: <20051003113317.3914.493535546.divmod.quotient.23580@ohm>

On Mon, 03 Oct 2005 12:36:30 +0200, Moof <moof at metamoof.net> wrote:
>Warning: mild rant venting frustration from a user, here. I'm not trying to
>offend, but I may have failed in this respect. Forgive me if I've failed in
>this aim.

I wasn't terribly offended, at least, so I guess you win.

>I've seen it mentioned quite often on the IRC channel recently, and it's
>starting to get a bit silly now, I'm talking, in this case, about people
>saying "you want to use wx? use threadedselectreactor".

In the next release, wxreactor should be totally abandoned (since it doesn't work) and the interface should be supported using wxreactor.  It's correct that people are saying this.

>I'd hate to have to release a wx-dependent piece of software (...)
>Yes, I am aware that most of you are volunteers. (...)
>You guys are doign great work (...)

Here is the problem in this particular case: A group of volunteers - most of whom don't care one whit about WX, and would, in fact, like to discourage its use (so long as its event loop remains the disaster which makes discussions like this necessary) are being charged (by you, and others) with making a release of the software they are developing easy to use with WX.

As you wrote without trying to offend, please don't take offense either, but this is the way I see things.

I don't care about wxwindows.  I don't like it, I don't ever intend to use it and I certainly don't need to dedicate my own *extremely* sparse time for working on Twisted to improving it somehow.  The release process is a disaster right now, which is unfortunate, but that is hardly at the top of my priority list either, since I don't mind deplying out of an SVN tag.

Frustrated users like yourself need to make a decision as to how to deal with that frustration.  Either find a Twisted developer to make your issues go away and pay them (paypal to glyph at twistedmatrix.com, please mention the bug number in http://twistedmatrix.com/bugs ), OR, better yet, find some time of your own to volunteer to fix the specific issues which are bothering you.  Rants like the one you wrote are helpful if the audience has plenty of time but not enough direction.

Frankly, I, and everyone else on this mailing list who has commit access to Twisted, has done *more* than enough for the F/OSS community already without seeing anywhere near adequate compensation.  We - employees of Divmod and Nunatak in particular - are tapped out for time, and I, at least, have *PLENTY* of direction, since I am now working on the following open source projects: Twisted, Nevow, Axiom, Vertex, Mantissa, Epsilon, Combinator, and ClickChronicle.

If nobody on the Twisted team is fixing your problem already, that is everyone who might be fixing it has things more important to them that they need to work on.  It is an extremely time-poor project with broken release infrastructure, so it should not be surprising that it doens't get released often.

It seems that the root cause of this conflict, since all open source projects are always strapped for time, is the unfortunate nature of the "split".  It a good idea: it was supposed to make releasing individual projects easier by reducing the amount of work required for each, but it seems that what happened was that the initial attempt failed (the one using zpkgtools) and the resulting second attempt was steamrolled out the door as fast as possible but left us with a massive amount of cleanup work that hasn't been done yet.  There are still lots of broken links on the website, and there is still no clear division of responsibility for maintainers to make, or even propose individual releases.

My specific suggestion to you would be to start contributing patches against the automated build/release scripts so that all a Twisted release manager has to do when the release is ready is "release-twisted --core 2.5.2 'This release fixes several issues in tsreactor spotted with the previous release'".  Once this is fixed then the procedural problems of doing a release should be quite a bit easier to deal with.  Speaking of which, I don't even think we *have* a release manager now, want to volunteer for that?

I suggest this rather than your other recommendations as to breaking out a separate tsreactor release because Twisted *SHOULD* be a working, self-contained whole.  Right now there are lots of holes and lots of bugs, but we shouldn't distribute separate "backports" of every fix and additional component because making a release is hard.  We should make making a release easier and just do that more often.




From radeex at gmail.com  Mon Oct  3 08:05:34 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Mon, 3 Oct 2005 23:05:34 +1100
Subject: [Twisted-Python] threadedselctreactor and releases
In-Reply-To: <20051003113317.3914.493535546.divmod.quotient.23580@ohm>
References: <434109AE.2000500@metamoof.net>
	<20051003113317.3914.493535546.divmod.quotient.23580@ohm>
Message-ID: <60ed19d40510030505y4236c97cuf0e6d819342166b6@mail.gmail.com>

On 10/3/05, glyph at divmod.com <glyph at divmod.com> wrote:
> My specific suggestion to you would be to start contributing patches against the automated build/release scripts so that all a Twisted release manager has to do when the release is ready is "release-twisted --core 2.5.2 'This release fixes several issues in tsreactor spotted with the previous release'".  Once this is fixed then the procedural problems of doing a release should be quite a bit easier to deal with.  Speaking of which, I don't even think we *have* a release manager now, want to volunteer for that?

http://twistedmatrix.com/bugs/issue1055


--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+



From solipsis at pitrou.net  Mon Oct  3 08:18:54 2005
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Mon, 03 Oct 2005 14:18:54 +0200
Subject: [Twisted-Python] threadedselctreactor and releases
In-Reply-To: <434109AE.2000500@metamoof.net>
References: <434109AE.2000500@metamoof.net>
Message-ID: <1128341934.6138.105.camel@fsol>


Hi Moof,

You may have missed the already numerous discussions on this list about
the subject "wx + Twisted".
If you don't want to use Twisted's threadedselectreactor, there is
another recipe which does work perfectly (but is a little less
transparent to the programmer) :
http://solipsis.netofpeers.net/wiki2/index.php/WxPython_And_Twisted_Example

(a better and simpler version of the proxy objects is here:
http://svn.berlios.de/viewcvs/solipsis/trunk/main/solipsis/util/uiproxy.py?view=markup
)

There is no agreement among people over which of both approaches is
better, so do your own testing yourself and choose whatever you like.

Regards

Antoine.





From radeex at gmail.com  Mon Oct  3 08:22:26 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Mon, 3 Oct 2005 23:22:26 +1100
Subject: [Twisted-Python] threadedselctreactor and releases
In-Reply-To: <434109AE.2000500@metamoof.net>
References: <434109AE.2000500@metamoof.net>
Message-ID: <60ed19d40510030522m5b39361cq9e9e5912c192624c@mail.gmail.com>

On 10/3/05, Moof <moof at metamoof.net> wrote:
> 2) Make a new release of twisted.core. I gather this is unlikely to happen
> in the near future, especially given the amoutn of work happening in trial
> at the moment, so probably not the world's best idea. Plus, I'll get radix
> moaning at me for even suggesting it ;)

I'm really sorry if I've ever given this impression, but I'm pretty
sure I don't regularly moan at people for suggesting releases. I do
admit the necessity of often needing a lot of moaning directed _at_
me, though. As I've posted elsewhere in this thread, a new release of
Twisted core is on its way, after not too many people having requested
it.

I'll refer to glyph's response to your post as basically representing
my opinions, except for the bits where he pretends I don't exist. ;)


--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+



From moof at metamoof.net  Mon Oct  3 08:45:45 2005
From: moof at metamoof.net (Moof)
Date: Mon, 03 Oct 2005 14:45:45 +0200
Subject: [Twisted-Python] threadedselctreactor and releases
In-Reply-To: <20051003113317.3914.493535546.divmod.quotient.23580@ohm>
References: <20051003113317.3914.493535546.divmod.quotient.23580@ohm>
Message-ID: <434127F9.9030900@metamoof.net>

glyph at divmod.com wrote:
> Frankly, I, and everyone else on this mailing list who has commit access
> to Twisted, has done *more* than enough for the F/OSS community already
> without seeing anywhere near adequate compensation.

This was the sentence I was hoping to avoid. It is a very common, and highly
merited complaint which I am very well aware of. I didn't want to appear
like just another whiny user who couldn't care less about the people behind
the project. I guess I did fail.

> My specific suggestion to you would be to start contributing patches
> against the automated build/release scripts so that all a Twisted
> release manager has to do when the release is ready is "release-twisted
> --core 2.5.2 'This release fixes several issues in tsreactor spotted
> with the previous release'". 

Right now I see five bugs tagged with "release management". I'll have a
proper look at them later and see what I can do. I suspect, though, that
much of it will require me to know the build system inside out. Is it
documented anywhre? Or who can I talk to about working out how it works and
what sort of times does he or she tend to be online?

> Once this is fixed then the procedural
> problems of doing a release should be quite a bit easier to deal with. 
> Speaking of which, I don't even think we *have* a release manager now,
> want to volunteer for that?

What's involved? Can someone with less-than-stellar knowledge of the
intricacies of twisted, and an unbelievebaly small understanding of C, do
the job?

> I suggest this rather than your other recommendations as to breaking out
> a separate tsreactor release because Twisted *SHOULD* be a working,
> self-contained whole.  Right now there are lots of holes and lots of
> bugs, but we shouldn't distribute separate "backports" of every fix and
> additional component because making a release is hard.  We should make
> making a release easier and just do that more often.

I agree, wholeheartedly.

Moof
-- 
Giles Antonio Radford, alias Moof
"Too old to be a chicken and too young to be a dirty old man"
Serving up my ego over at <http://metamoof.net/>



From glyph at divmod.com  Mon Oct  3 09:13:39 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 3 Oct 2005 09:13:39 -0400
Subject: [Twisted-Python] threadedselctreactor and releases
In-Reply-To: <434127F9.9030900@metamoof.net>
Message-ID: <20051003131339.3914.1727796828.divmod.quotient.23582@ohm>

On Mon, 03 Oct 2005 14:45:45 +0200, Moof <moof at metamoof.net> wrote:
>glyph at divmod.com wrote:
>> Frankly,

>This was the sentence I was hoping to avoid. It is a very common, and highly
>merited complaint which I am very well aware of. I didn't want to appear
>like just another whiny user who couldn't care less about the people behind
>the project. I guess I did fail.

Perhaps I was overly harsh then.  I realized that you understood the problem - I was framing it there for context, meaining to say that you could be a more direct participant in the solution, not that you were a jackass for even mentioning that there was a bug in Twisted that needed to be fixed :-).

>> My specific suggestion to you would be to start contributing patches
>> against the automated build/release scripts so that all a Twisted
>> release manager has to do when the release is ready is "release-twisted
>> --core 2.5.2 'This release fixes several issues in tsreactor spotted
>> with the previous release'".
>
>Right now I see five bugs tagged with "release management". I'll have a
>proper look at them later and see what I can do. I suspect, though, that
>much of it will require me to know the build system inside out. Is it
>documented anywhre? Or who can I talk to about working out how it works and
>what sort of times does he or she tend to be online?

radix, apparently, and .au times.  Last I heard out of him before this thread, he wasn't doing it any more, but I guess we've got him hooked at least through 2.1!  Perhaps I just need to agitate for a more rapid release; there's clearly lots of forward movement in core that needs to get out there.

>> Once this is fixed then the procedural
>> problems of doing a release should be quite a bit easier to deal with.
>> Speaking of which, I don't even think we *have* a release manager now,
>> want to volunteer for that?
>
>What's involved? Can someone with less-than-stellar knowledge of the
>intricacies of twisted, and an unbelievebaly small understanding of C, do
>the job?

That sounds about right.  None of the work of an RM is hard - you just have to basically pay attention to what's going on and coordinate, and do the tedious typing-into-fields on freshmeat and the website and whatever.  Whether he's still doing it or not, radix needs a break, so my suggestion stands :).

>> Twisted *SHOULD* be a working,
>> self-contained whole.

>I agree, wholeheartedly.

Awesome.



From glyph at divmod.com  Mon Oct  3 09:14:51 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 3 Oct 2005 09:14:51 -0400
Subject: [Twisted-Python] threadedselctreactor and releases
In-Reply-To: <60ed19d40510030505y4236c97cuf0e6d819342166b6@mail.gmail.com>
Message-ID: <20051003131523.3914.1852156681.divmod.quotient.23584@ohm>



On Mon, 3 Oct 2005 23:05:34 +1100, Christopher Armstrong <radeex at gmail.com> wrote:

>http://twistedmatrix.com/bugs/issue1055

Wow, uh, er, um.  Cool.

Why hasn't there been a major release for like 9 months, then? :)



From andrea at cpushare.com  Mon Oct  3 18:55:13 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Tue, 4 Oct 2005 00:55:13 +0200
Subject: [Twisted-Python] TCP KeepAlive
In-Reply-To: <20051002.121856.118960310.warner@lothar.com>
References: <20051002.121856.118960310.warner@lothar.com>
Message-ID: <20051003225513.GB5406@opteron.random>

On Sun, Oct 02, 2005 at 12:18:56PM -0700, Brian Warner wrote:
> more commonly, a NAT box which has forgotten about the connection because it
> hasn't sent any traffic for 10 or 20 minutes). If the connection is busy,

I had to deal with this problem too, but my solution has been to tweak
the tcp stack so it keeps the nat alive with these settings:

+++ /etc/sysctl.conf	2005-04-08 05:39:46.106935468 +0200
+net.ipv4.tcp_keepalive_time = 240

This way a keepalive packet is sent every 4 min.

This is way simpler and more efficient (lower internet overhead too!)
than doing it in userland.



From ken at kenkinder.com  Mon Oct  3 20:19:44 2005
From: ken at kenkinder.com (Ken Kinder)
Date: Mon, 03 Oct 2005 18:19:44 -0600
Subject: [Twisted-Python] Unicode
Message-ID: <4341CAA0.6000600@kenkinder.com>

Perhaps like many developers, I came across this surprising bit of code
inside a couple of Twisted's methods:

        if isinstance(data, unicode): # no, really, I mean it
            raise TypeError("Data must be not be unicode")

And of course, I simply removed those lines. But I'm sure if I submit
that patch, a discussion similar to this one would develop, because it's
unlikely that such code would have been accidentally included:

    http://twistedmatrix.com/pipermail/twisted-python/2005-April/010199.html

Python library will kindly cast unicode objects to strings when
necessary, as is mentioned in the above thread. It *would* be fair to
say that not implicitly deciding on an encoding type is "taking the high
road" if the behavior of encoding weren't so uniformly explicit and
consistent in Python and its standard library:

    http://www.python.org/peps/pep-0100.html
    http://docs.python.org/api/arg-parsing.html
    http://docs.python.org/api/stringObjects.html

(There are more...)

The purpose of Python's unicode type is transparent exchange of string
objects, whether those string objects are of type str or type unicode.
Pretending that isn't so and raising a TypeError is not helpful. I would
urge you to AT LEAST provide a detailed explanation in that error,
explaining the philosophical disagreement you have with Python's
unicode-string conversion behavior and have a flag you can set to
disable that check.




From solipsis at pitrou.net  Mon Oct  3 20:43:34 2005
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Tue, 04 Oct 2005 02:43:34 +0200
Subject: [Twisted-Python] Unicode
In-Reply-To: <4341CAA0.6000600@kenkinder.com>
References: <4341CAA0.6000600@kenkinder.com>
Message-ID: <1128386614.6138.349.camel@fsol>


Le lundi 03 octobre 2005 ? 18:19 -0600, Ken Kinder a ?crit :
> Perhaps like many developers, I came across this surprising bit of code
> inside a couple of Twisted's methods:
> 
>         if isinstance(data, unicode): # no, really, I mean it
>             raise TypeError("Data must be not be unicode")

This may seem surprising but it is logical.
If you design your network protocol properly, the design also includes
the details of how text is represented (including the encoding, how it
is specified, etc.).

So you can't ask Twisted to make a general decision for every network
protocol out there. Each protocol has its own view on the subject. It's
up to you to implement the design decision properly.

Regards

Antoine.





From grant at osafoundation.org  Mon Oct  3 21:01:15 2005
From: grant at osafoundation.org (Grant Baillie)
Date: Mon, 3 Oct 2005 18:01:15 -0700
Subject: [Twisted-Python] Unicode
In-Reply-To: <4341CAA0.6000600@kenkinder.com>
References: <4341CAA0.6000600@kenkinder.com>
Message-ID: <0E8FE793-5206-4A67-BF39-564051C5E65A@osafoundation.org>

Well, I agree the message could be more brutal :).

What's the developer use case for "transparent exchange" of unicode  
strings in a network framework? Every protocol and data format has  
some different (sometimes goofy, and sometimes nonexistent) scheme  
for encoding non-ASCII end-user strings. Since the internet only  
understands bytes, it's almost certainly programmer error (omitting  
to implement the protocol's encoding scheme) if you try to send a  
unicode over the wire.

I no more expect

self.transport.write(u"Shoot me with a \u2022")

to work than

self.transport.write(7)

inside my protocol code, for exactly the same reason in both cases.

--Grant

Grant Baillie
Open Source Applications Foundation
http://www.osafoundation.org

PS: As an aside, I actually believe a "default encoding" (site-wide  
or application-wide) scheme isn't so great either. It leads to  
developers making assumptions about the global setting, and those  
assumptions lead to different modules being incompatible.

On Oct 3, 2005, at 17:19, Ken Kinder wrote:

> Perhaps like many developers, I came across this surprising bit of  
> code
> inside a couple of Twisted's methods:
>
>         if isinstance(data, unicode): # no, really, I mean it
>             raise TypeError("Data must be not be unicode")
>
> And of course, I simply removed those lines. But I'm sure if I submit
> that patch, a discussion similar to this one would develop, because  
> it's
> unlikely that such code would have been accidentally included:
>
>     http://twistedmatrix.com/pipermail/twisted-python/2005-April/ 
> 010199.html
>
> Python library will kindly cast unicode objects to strings when
> necessary, as is mentioned in the above thread. It *would* be fair to
> say that not implicitly deciding on an encoding type is "taking the  
> high
> road" if the behavior of encoding weren't so uniformly explicit and
> consistent in Python and its standard library:
>
>     http://www.python.org/peps/pep-0100.html
>     http://docs.python.org/api/arg-parsing.html
>     http://docs.python.org/api/stringObjects.html
>
> (There are more...)
>
> The purpose of Python's unicode type is transparent exchange of string
> objects, whether those string objects are of type str or type unicode.
> Pretending that isn't so and raising a TypeError is not helpful. I  
> would
> urge you to AT LEAST provide a detailed explanation in that error,
> explaining the philosophical disagreement you have with Python's
> unicode-string conversion behavior and have a flag you can set to
> disable that check.






From exarkun at divmod.com  Mon Oct  3 21:08:05 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Mon, 3 Oct 2005 21:08:05 -0400
Subject: [Twisted-Python] Unicode
In-Reply-To: <4341CAA0.6000600@kenkinder.com>
Message-ID: <20051004010805.3914.1122264389.divmod.quotient.23691@ohm>

On Mon, 03 Oct 2005 18:19:44 -0600, Ken Kinder <ken at kenkinder.com> wrote:
>Perhaps like many developers, I came across this surprising bit of code
>inside a couple of Twisted's methods:
>
>        if isinstance(data, unicode): # no, really, I mean it
>            raise TypeError("Data must be not be unicode")
>
> [snip]
>
>The purpose of Python's unicode type is transparent exchange of string
>objects, whether those string objects are of type str or type unicode.
>Pretending that isn't so and raising a TypeError is not helpful. I would
>urge you to AT LEAST provide a detailed explanation in that error,
>explaining the philosophical disagreement you have with Python's
>unicode-string conversion behavior and have a flag you can set to
>disable that check.
>

An explanation is more likely to be provided if there is a ticket for such.  If it's important to you, <http://www.twistedmatrix.com/bugs/>.  Thanks :)

Jp



From mary-twisted at puzzling.org  Mon Oct  3 21:11:02 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Tue, 4 Oct 2005 11:11:02 +1000
Subject: [Twisted-Python] Unicode
In-Reply-To: <20051004010805.3914.1122264389.divmod.quotient.23691@ohm>
References: <4341CAA0.6000600@kenkinder.com>
	<20051004010805.3914.1122264389.divmod.quotient.23691@ohm>
Message-ID: <20051004011102.GO23529@home.puzzling.org>

On Mon, Oct 03, 2005, Jp Calderone wrote:
> On Mon, 03 Oct 2005 18:19:44 -0600, Ken Kinder <ken at kenkinder.com> wrote:
> >The purpose of Python's unicode type is transparent exchange of string
> >objects, whether those string objects are of type str or type unicode.
> >Pretending that isn't so and raising a TypeError is not helpful. I would
> >urge you to AT LEAST provide a detailed explanation in that error,
> >explaining the philosophical disagreement you have with Python's
> >unicode-string conversion behavior and have a flag you can set to
> >disable that check.
> >
> 
> An explanation is more likely to be provided if there is a ticket for such. 
> If it's important to you, <http://www.twistedmatrix.com/bugs/> .  Thanks :)

See also
http://twistedmatrix.com/projects/core/documentation/howto/faq.html#auto25
-- I guess this link could be provided with the exception, although I've
never seen exceptions come with URLs before. More likely it should go in
a comment where the exception is raised.

-Mary



From corydodt at twistedmatrix.com  Mon Oct  3 21:29:23 2005
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Mon, 03 Oct 2005 18:29:23 -0700
Subject: [Twisted-Python] Unicode
In-Reply-To: <20051004011102.GO23529@home.puzzling.org>
References: <4341CAA0.6000600@kenkinder.com>	<20051004010805.3914.1122264389.divmod.quotient.23691@ohm>
	<20051004011102.GO23529@home.puzzling.org>
Message-ID: <4341DAF3.4000609@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Mary Gardiner wrote:

> See also
> http://twistedmatrix.com/projects/core/documentation/howto/faq.html#auto25
> -- I guess this link could be provided with the exception, although I've
> never seen exceptions come with URLs before. More likely it should go in
> a comment where the exception is raised.
> 
> -Mary

URLs in Exceptions are all the rage these days, Mary.  Try running twistd
without installing zope.interface some time ;-)

C

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (MingW32)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFDQdrz3A5SrXAiHQcRApy5AJ9VytK9jnasBxu7MjNMF1twH2GRigCgmoyp
ZBVVB7ytxVLL7IGorPRjetA=
=oYaV
-----END PGP SIGNATURE-----



From mary-twisted at puzzling.org  Mon Oct  3 21:33:05 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Tue, 4 Oct 2005 11:33:05 +1000
Subject: [Twisted-Python] Unicode
In-Reply-To: <4341DAF3.4000609@twistedmatrix.com>
References: <4341CAA0.6000600@kenkinder.com>
	<20051004010805.3914.1122264389.divmod.quotient.23691@ohm>
	<20051004011102.GO23529@home.puzzling.org>
	<4341DAF3.4000609@twistedmatrix.com>
Message-ID: <20051004013305.GP23529@home.puzzling.org>

On Mon, Oct 03, 2005, Cory Dodt wrote:
> URLs in Exceptions are all the rage these days, Mary.  Try running twistd
> without installing zope.interface some time ;-)

Well then we're all set, except I don't think lore will generate
constant #auto* URLs.

-Mary

-- 
<\\mimic> graydon: it's when you start constructing conditional branches in sed that the men in white coats come for you
<graydon> mimic: been there, done that. wrote a qmail crypto extension in sed this summer :)



From andrew-twisted at puzzling.org  Mon Oct  3 22:43:51 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 4 Oct 2005 12:43:51 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] r14614 - Describe
	log.debug, and 'printed' and 'debug' log dict items.
In-Reply-To: <1128114620.7914.35.camel@localhost.localdomain>
References: <E1ELDGl-0004r7-00@wolfwood>
	<1128114620.7914.35.camel@localhost.localdomain>
Message-ID: <20051004024351.GA23017@trogdor.home.puzzling.org>

On Fri, Sep 30, 2005 at 05:10:20PM -0400, Itamar Shtull-Trauring wrote:
> On Thu, 2005-09-29 at 23:17 -0600, Andrew Bennetts wrote:
> > Author: spiv
> > Date: Thu Sep 29 23:17:15 2005
> > New Revision: 14614
> > 
> > Modified:
> >    trunk/doc/core/howto/logging.xhtml
> > Log:
> > Describe log.debug, and 'printed' and 'debug' log dict items.
> 
> log.debug should die, I think. So it probably shouldn't be documented :)

I was also told this by radix on IRC.

I see no deprecation warnings.  I documented it because I noticed a
colleague of mine independently found and used it, and I'd never heard of
it, so I corrected that, because it's clearly part of the public API at the
moment.  If someone who feels confident that they understand the intent of
twisted.python.log well enough wants to stick their neck out and deprecate
debug, please do.  I'm not that person.

I'm not inclined to remove reference to debug from logging.xhtml until it is
actually deprecated.

Corrections and reviews of the logging documentation are most welcome,
though!

-Andrew.




From andrew-twisted at puzzling.org  Mon Oct  3 22:58:28 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 4 Oct 2005 12:58:28 +1000
Subject: [Twisted-Python] Unicode
In-Reply-To: <4341CAA0.6000600@kenkinder.com>
References: <4341CAA0.6000600@kenkinder.com>
Message-ID: <20051004025828.GB23017@trogdor.home.puzzling.org>

On Mon, Oct 03, 2005 at 06:19:44PM -0600, Ken Kinder wrote:
[...]
> 
> The purpose of Python's unicode type is transparent exchange of string
> objects, whether those string objects are of type str or type unicode.
> Pretending that isn't so and raising a TypeError is not helpful. I would
> urge you to AT LEAST provide a detailed explanation in that error,
> explaining the philosophical disagreement you have with Python's
> unicode-string conversion behavior and have a flag you can set to
> disable that check.

The issue is that the python-global default implicit encoding of unicode to
str could be completely wrong for any given protocol and transport instance
(i.e. socket).  Protocol implementations should not be vulnerable to bugs
just because someone adds sys.setdefaultencoding('utf-16') to their
sitecustomize.py.

It's not hard at all to imagine a situation where two different sockets have
two completely different encodings -- e.g. HTTP servers can and should
choose charsets for responses based on what the client request asks for,
iirc.

This is formally addressed in the Twisted documentation -- as a FAQ -- here:

    http://twistedmatrix.com/projects/core/documentation/howto/faq.html#auto25

-Andrew.




From radeex at gmail.com  Tue Oct  4 03:03:32 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Tue, 4 Oct 2005 18:03:32 +1100
Subject: [Twisted-Python] Sprinty Releases
Message-ID: <60ed19d40510040003o2ae3ba6blb3b612dad88a4b73@mail.gmail.com>

On 10/3/05, Moof <moof at metamoof.net> wrote:
> Right now I see five bugs tagged with "release management". I'll have a
> proper look at them later and see what I can do. I suspect, though, that
> much of it will require me to know the build system inside out. Is it
> documented anywhre? Or who can I talk to about working out how it works and
> what sort of times does he or she tend to be online?

Hello, I am he-or-she. This weekend is the Virtual Twisted Sprint.

To All: Be there or be an Internetless shell of a human being!

I will be making a release of Twisted (2.1) and hopefully talking to
other people who are interested in fixing up some release and web-site
issues (perhaps we can even fix a few of them).

I will be online in AU-hours, which is GST+10, but I'll try to be flexible.

--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+



From nico at tekNico.net  Tue Oct  4 03:20:09 2005
From: nico at tekNico.net (Nicola Larosa)
Date: Tue, 04 Oct 2005 09:20:09 +0200
Subject: [Twisted-Python] 
 Re: [Twisted-commits] r14614 - Describe log.debug, and 'printed'
 and 'debug' log dict items.
In-Reply-To: <20051004024351.GA23017@trogdor.home.puzzling.org>
References: <E1ELDGl-0004r7-00@wolfwood>	<1128114620.7914.35.camel@localhost.localdomain>
	<20051004024351.GA23017@trogdor.home.puzzling.org>
Message-ID: <dhtafa$f7c$1@sea.gmane.org>

>> log.debug should die, I think. So it probably shouldn't be documented :)

> I was also told this by radix on IRC.
> 
> I see no deprecation warnings.  I documented it because I noticed a
> colleague of mine independently found and used it, and I'd never heard of
> it, so I corrected that, because it's clearly part of the public API at the
> moment.  If someone who feels confident that they understand the intent of
> twisted.python.log well enough wants to stick their neck out and deprecate
> debug, please do.  I'm not that person.

Also, a few words to the effect of *why* it should be deprecated would be
useful. We use it quite a lot, and I'd appreciate a few comments.

It wouldn't be a big problem should it go away, since we already
monkeypatch t.p.logging a lot, but it is still bewildering to see such
comments without any explanation.

-- 
Nicola Larosa - nico at tekNico.net

How much of what we are should we be proud of? When did we choose the
things that made us smart, knowledgeable, or successful? Should we be
proud? Should we feel superior? Maybe we should just be grateful.
 -- jgoldblog, May 2002




From glyph at divmod.com  Tue Oct  4 04:37:57 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 4 Oct 2005 04:37:57 -0400
Subject: [Twisted-Python] Unicode
In-Reply-To: <4341CAA0.6000600@kenkinder.com>
Message-ID: <20051004083757.3914.504871509.divmod.quotient.23801@ohm>

On Mon, 03 Oct 2005 18:19:44 -0600, Ken Kinder <ken at kenkinder.com> wrote:

>The purpose of Python's unicode type is transparent exchange of string
>objects, whether those string objects are of type str or type unicode.
>Pretending that isn't so and raising a TypeError is not helpful. I would
>urge you to AT LEAST provide a detailed explanation in that error,
>explaining the philosophical disagreement you have with Python's
>unicode-string conversion behavior and have a flag you can set to
>disable that check.

>From http://docs.python.org/api/stringObjects.html:

    "Only string objects are supported; no Unicode objects should be passed."

So there is a precedent for this in the very APIs you are citing :).

You seem to have misunderstood the intent of Python's unicode support.  Python allows byte strings to be treated in the same way as character strings in the areas where such a transposition is useful and semantically valid; in some cases it (uncharacteristically) guesses based on the default encoding.  I say "uncharacteristically" because Python refuses the temptation to guess when presented with, say, an array object containing bytes, integers, or a list of smaller strings.  Automatic conversion is not the norm in Python.

I see others have already relayed you to the FAQ.  Please read the articles attached to it.

As long as I'm writing a list post about this though, let me include another example which may explain why this is an absolutely horrible idea.  There are basically 2 modes that .write() could use to accept a unicode object; one where it would cause random exceptions at runtime based on input, or one where it would generate corrupt data on the network.

Let's say I've got a very simple protocol that writes 2 bytes indicating the length of a string, then a string, like so:

 def writeChunk(self, x):
  self.transport.write(struct.pack("!H", len(x)))
  self.transport.write(x)

If 'x' were a unicode object in this case, we could do one of 2 things:

 A - Write it to the transport as UTF-8/UTF-16 (an encoding that can accept any unicode data)
 B - Write it to the transport using ascii/charmap (the default encoding, or an encoding that will only produce single-byte characters.

Given option A, this code will appear to work until it is passed a unicode string with a code point > '\u00ff'.  At that point, the 'length' prefix will be incorrect; since len() works in terms of code points and not bytes, a phrase like u'Shoot me with a \u2022' will be truncated by the receiving end, possibly into a string which can't even be decoded:

>>> len(u'Shoot me with a \u2022')
17
>>> len(u'Shoot me with a \u2022'.encode('utf8'))
19
>>> len(u'Shoot me with a \u2022'.encode('utf16'))
36
>>> u'Shoot me with a \u2022'.encode('utf16')[:17].decode('utf16')
Traceback (most recent call last):
  File "<stdin>", line 1, in ?
  File "/usr/lib/python2.4/encodings/utf_16.py", line 16, in decode
    return codecs.utf_16_decode(input, errors, True)
UnicodeDecodeError: 'utf16' codec can't decode byte 0x65 in position 16: truncated data


Using option B, we won't produce any invalid data on the network, but we will have to raise exceptions when presented with any *actual* unicode data (as opposed to just ASCII stuck into a unicode-type object):

>>> u'Shoot me with a \u2022'.encode()
Traceback (most recent call last):
  File "<stdin>", line 1, in ?
UnicodeEncodeError: 'ascii' codec can't encode character u'\u2022' in position 16: ordinal not in range(128)

In either case, simple tests where your code is passed english ASCII "unicode" strings will pass, but any actual exercise of unicode for the purpose it was designed (i.e. creating a clear distinction between transport encoding and character set) will fail horribly and possibly inexplicably.

I hope that now you can see why "a flag you can set to disable that check" could not possibly help anyone, and the code will remain as it is.



From clive at darkarts.co.za  Tue Oct  4 09:48:42 2005
From: clive at darkarts.co.za (clive at darkarts.co.za)
Date: Tue, 4 Oct 2005 15:48:42 +0200 (SAST)
Subject: [Twisted-Python] [announce] tada-1.3.1 released
Message-ID: <.82.103.130.3.1128433722.squirrel@webmail.darkarts.co.za>

Description:
This python module is a wrapper module for any DBAPI 2 compatible database
module. It wraps all functions and methods of the origional module and
forces the return of deferreds instead. tada can therefore be considered
to be 'almost' DBAPI compatible as it inherits the compatiblity level of
the wrapped module, but returns twisted deferreds.

tadah - is an additional class: "Tada with Helpers". This class adds some
helper functionality to tada, but breaks strict DBAPI 2 spec.

tao - uses tada and tadah to create an object model for DB access. It is
loosly based on the SQLObject project's usage model, but asynchronous.

Changes:
mostly minor tweaks, and a couple of minor bug fixes. Also added a mini
demo application that uses the tao of tada with wxPython and
threadedselectreactor.

Clive




From dialtone at divmod.com  Tue Oct  4 09:56:07 2005
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Tue, 4 Oct 2005 15:56:07 +0200
Subject: [Twisted-Python] [announce] tada-1.3.1 released
In-Reply-To: <.82.103.130.3.1128433722.squirrel@webmail.darkarts.co.za>
References: <.82.103.130.3.1128433722.squirrel@webmail.darkarts.co.za>
Message-ID: <20051004135607.GK14358@divmod.com>

On Tue, Oct 04, 2005 at 03:48:42PM +0200, clive at darkarts.co.za wrote:

Wonderful!
But I wouldn't mind a link :)

-- 
Valentino Volonghi aka Dialtone
Now Running MacOSX 10.4
Blog: http://vvolonghi.blogspot.com
http://weever.berlios.de
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 186 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20051004/e93db338/attachment.pgp 

From clive at darkarts.co.za  Tue Oct  4 10:19:02 2005
From: clive at darkarts.co.za (clive at darkarts.co.za)
Date: Tue, 4 Oct 2005 16:19:02 +0200 (SAST)
Subject: [Twisted-Python] [announce] tada-1.3.1 released (with link)
In-Reply-To: <20051004135607.GK14358@divmod.com>
References: <.82.103.130.3.1128433722.squirrel@webmail.darkarts.co.za>
	<20051004135607.GK14358@divmod.com>
Message-ID: <.82.103.130.3.1128435542.squirrel@webmail.darkarts.co.za>

> Wonderful!
> But I wouldn't mind a link :)

hahah, wow that was silly !!
sorry !!

http://www.darkarts.co.za/projects/tada/

Clive




From y.glodt at sitasoftware.lu  Tue Oct  4 10:35:33 2005
From: y.glodt at sitasoftware.lu (Yves Glodt)
Date: Tue, 04 Oct 2005 16:35:33 +0200
Subject: [Twisted-Python] conch.forwarding tutorial
Message-ID: <43429335.8030600@sitasoftware.lu>

Hello,

can somebody point me at a conch.forwarding tutorial or code example?

I need to create an ssh tunnel on the fly from my daemon and pass a
database connection through that tunnel, is that possible at all?


best regards,
Yves





From bob at redivi.com  Tue Oct  4 10:40:29 2005
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 4 Oct 2005 07:40:29 -0700
Subject: [Twisted-Python] Unicode
In-Reply-To: <20051004083757.3914.504871509.divmod.quotient.23801@ohm>
References: <20051004083757.3914.504871509.divmod.quotient.23801@ohm>
Message-ID: <C2AC94DE-8E91-42CA-9FD9-68143694607A@redivi.com>


On Oct 4, 2005, at 1:37 AM, glyph at divmod.com wrote:

> On Mon, 03 Oct 2005 18:19:44 -0600, Ken Kinder <ken at kenkinder.com>  
> wrote:
>
>
>> The purpose of Python's unicode type is transparent exchange of  
>> string
>> objects, whether those string objects are of type str or type  
>> unicode.
>> Pretending that isn't so and raising a TypeError is not helpful. I  
>> would
>> urge you to AT LEAST provide a detailed explanation in that error,
>> explaining the philosophical disagreement you have with Python's
>> unicode-string conversion behavior and have a flag you can set to
>> disable that check.
>>
>
>
>> From http://docs.python.org/api/stringObjects.html:
>>
>
>    "Only string objects are supported; no Unicode objects should be  
> passed."
>
> So there is a precedent for this in the very APIs you are citing :).
>
> You seem to have misunderstood the intent of Python's unicode  
> support.  Python allows byte strings to be treated in the same way  
> as character strings in the areas where such a transposition is  
> useful and semantically valid; in some cases it  
> (uncharacteristically) guesses based on the default encoding.  I  
> say "uncharacteristically" because Python refuses the temptation to  
> guess when presented with, say, an array object containing bytes,  
> integers, or a list of smaller strings.  Automatic conversion is  
> not the norm in Python.
>
> I see others have already relayed you to the FAQ.  Please read the  
> articles attached to it.
>
> As long as I'm writing a list post about this though, let me  
> include another example which may explain why this is an absolutely  
> horrible idea.  There are basically 2 modes that .write() could use  
> to accept a unicode object; one where it would cause random  
> exceptions at runtime based on input, or one where it would  
> generate corrupt data on the network.
>
> Let's say I've got a very simple protocol that writes 2 bytes  
> indicating the length of a string, then a string, like so:
>
> def writeChunk(self, x):
>  self.transport.write(struct.pack("!H", len(x)))
>  self.transport.write(x)
>
> If 'x' were a unicode object in this case, we could do one of 2  
> things:
>
> A - Write it to the transport as UTF-8/UTF-16 (an encoding that can  
> accept any unicode data)
> B - Write it to the transport using ascii/charmap (the default  
> encoding, or an encoding that will only produce single-byte  
> characters.
>
> Given option A, this code will appear to work until it is passed a  
> unicode string with a code point > '\u00ff'.  At that point, the  
> 'length' prefix will be incorrect; since len() works in terms of  
> code points and not bytes, a phrase like u'Shoot me with a \u2022'  
> will be truncated by the receiving end, possibly into a string  
> which can't even be decoded:

What you mean is a code point > '\u007f', not '\u00ff'... but yeah, I  
agree with all this stuff.  Explicit is better than implicit, and str  
-> unicode implicit conversion is just wrong in almost all cases  
(except when it's knowable pure 7-bit ascii, like a constant or  
symbol in your code).

-bob




From glyph at divmod.com  Tue Oct  4 11:11:30 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 4 Oct 2005 11:11:30 -0400
Subject: [Twisted-Python] Unicode
In-Reply-To: <C2AC94DE-8E91-42CA-9FD9-68143694607A@redivi.com>
Message-ID: <20051004151130.3914.865042523.divmod.quotient.23885@ohm>



On Tue, 4 Oct 2005 07:40:29 -0700, Bob Ippolito <bob at redivi.com> wrote:

>What you mean is a code point > '\u007f', not '\u00ff'... but yeah, I  agree 
>with all this stuff.  Explicit is better than implicit, and str  -> unicode 
>implicit conversion is just wrong in almost all cases  (except when it's 
>knowable pure 7-bit ascii, like a constant or  symbol in your code).

I meant you couldn't do better than \u00ff, since I had previously mentioned the charmap codec:

>>> u'\u00ff'.encode('charmap')
'\xff'

but yes.  The main point is that implicit conversion cannot be made correct in any event.



From corydodt at twistedmatrix.com  Tue Oct  4 11:36:47 2005
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Tue, 04 Oct 2005 08:36:47 -0700
Subject: [Twisted-Python] Unicode
In-Reply-To: <20051004083757.3914.504871509.divmod.quotient.23801@ohm>
References: <20051004083757.3914.504871509.divmod.quotient.23801@ohm>
Message-ID: <4342A18F.70805@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

http://twistedmatrix.com/bugs/issue1245

glyph at divmod.com wrote:
> As long as I'm writing a list post about this though, let me include
> another example which may explain why this is an absolutely horrible
> idea.   ...
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (MingW32)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFDQqGP3A5SrXAiHQcRAsOlAJ4s4N7aA7lXPmvOWGskmxrrWaLZNgCgrR04
kIq0b69POLFxDKo8Xdi9+80=
=rPA6
-----END PGP SIGNATURE-----



From ken at kenkinder.com  Tue Oct  4 12:24:52 2005
From: ken at kenkinder.com (Ken Kinder)
Date: Tue, 04 Oct 2005 10:24:52 -0600
Subject: [Twisted-Python] Unicode
In-Reply-To: <20051004025828.GB23017@trogdor.home.puzzling.org>
References: <4341CAA0.6000600@kenkinder.com>
	<20051004025828.GB23017@trogdor.home.puzzling.org>
Message-ID: <4342ACD4.3030204@kenkinder.com>

Andrew Bennetts wrote:

>The issue is that the python-global default implicit encoding of unicode to
>str could be completely wrong for any given protocol and transport instance
>(i.e. socket).  Protocol implementations should not be vulnerable to bugs
>just because someone adds sys.setdefaultencoding('utf-16') to their
>sitecustomize.py.
>
>It's not hard at all to imagine a situation where two different sockets have
>two completely different encodings -- e.g. HTTP servers can and should
>choose charsets for responses based on what the client request asks for,
>iirc.
>
>This is formally addressed in the Twisted documentation -- as a FAQ -- here:
>
>    http://twistedmatrix.com/projects/core/documentation/howto/faq.html#auto25
>  
>
Fair enough, although perhaps that link should be part of the comment
that reads something to the effect of "no unicode, I mean it."




From slamb at slamb.org  Tue Oct  4 13:00:58 2005
From: slamb at slamb.org (Scott Lamb)
Date: Tue, 4 Oct 2005 10:00:58 -0700
Subject: [Twisted-Python] Re: [Twisted-commits] r14614 - Describe
	log.debug, and 'printed' and 'debug' log dict items.
In-Reply-To: <dhtafa$f7c$1@sea.gmane.org>
References: <E1ELDGl-0004r7-00@wolfwood>	<1128114620.7914.35.camel@localhost.localdomain>
	<20051004024351.GA23017@trogdor.home.puzzling.org>
	<dhtafa$f7c$1@sea.gmane.org>
Message-ID: <20EC6F51-A3D7-4C78-8DFC-2B8A5D21026D@slamb.org>

On Oct 4, 2005, at 12:20 AM, Nicola Larosa wrote:
> Also, a few words to the effect of *why* it should be deprecated  
> would be
> useful. We use it quite a lot, and I'd appreciate a few comments.

Me, too, me too.

In my day job, I develop a lot of Java code. We have the luxury of  
granular logging. I can switch, on a per-class basis, the output  
level to trace, debug, warn, error, or fatal. That's handy.

In Twisted, I see log.msg(), log.debug(), and log.err(). Why is one  
of these levels going away? Is it just not normal to use logging for  
debugging? What do you do instead?

-- 
Scott Lamb <http://www.slamb.org/>





From itamar at itamarst.org  Tue Oct  4 15:06:18 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 04 Oct 2005 15:06:18 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r14614 - Describe
	log.debug, and 'printed' and 'debug' log dict items.
In-Reply-To: <20EC6F51-A3D7-4C78-8DFC-2B8A5D21026D@slamb.org>
References: <E1ELDGl-0004r7-00@wolfwood>
	<1128114620.7914.35.camel@localhost.localdomain>
	<20051004024351.GA23017@trogdor.home.puzzling.org>
	<dhtafa$f7c$1@sea.gmane.org>
	<20EC6F51-A3D7-4C78-8DFC-2B8A5D21026D@slamb.org>
Message-ID: <1128452779.9061.34.camel@localhost.localdomain>

On Tue, 2005-10-04 at 10:00 -0700, Scott Lamb wrote:

> In my day job, I develop a lot of Java code. We have the luxury of  
> granular logging. I can switch, on a per-class basis, the output  
> level to trace, debug, warn, error, or fatal. That's handy.
> 
> In Twisted, I see log.msg(), log.debug(), and log.err(). Why is one  
> of these levels going away? Is it just not normal to use logging for  
> debugging? What do you do instead?

twisted.python.log needs to be rewritten to support more modular
logging; the new API would be "log.msg(something, interface=IFoo)" where
IFoo might be IMessage, or IHTTPRequest for the webserver log, etc.. We
don't have thay yet, unfortunately. log.debug() as it works now is just
broken, it doesn't add anything to log.msg() in a reasonable way.




From exarkun at divmod.com  Tue Oct  4 15:27:30 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Tue, 4 Oct 2005 15:27:30 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r14614 - Describe
	log.debug, and 'printed' and 'debug' log dict items.
In-Reply-To: <20EC6F51-A3D7-4C78-8DFC-2B8A5D21026D@slamb.org>
Message-ID: <20051004192730.3914.659798435.divmod.quotient.23986@ohm>

On Tue, 4 Oct 2005 10:00:58 -0700, Scott Lamb <slamb at slamb.org> wrote:
>On Oct 4, 2005, at 12:20 AM, Nicola Larosa wrote:
>>Also, a few words to the effect of *why* it should be deprecated  would be
>>useful. We use it quite a lot, and I'd appreciate a few comments.
>
>Me, too, me too.
>
>In my day job, I develop a lot of Java code. We have the luxury of  granular 
>logging. I can switch, on a per-class basis, the output  level to trace, 
>debug, warn, error, or fatal. That's handy.
>
>In Twisted, I see log.msg(), log.debug(), and log.err(). Why is one  of 
>these levels going away? Is it just not normal to use logging for 
>debugging? What do you do instead?

One of the functions is going away.  A level isn't going away, because twisted.python.log does not have the notion of "levels" present in other logging systems.

What you can log with twisted.python.log is an event.  A very common kind of event is a byte string - log.msg is often used to emit one of these, but it can emit any kind of event.  Another common event corresponds to an error and is represented by a twisted.python.failure.Failure instance - log.err is a convenience function to construct a Failure from the current Python exception state and emit it.  log.debug is this warty thing that emits a string but also attaches {"debug": 1} to it.  This is completely ignored by the log observer Twisted actually includes.

To emphasize that point, in the default configuration, log.msg() does exactly the same thing as log.debug().

So, it's pointless.  The functionality might be useful, although I've never found it such (print is pretty easy to use, and Python is too slow to leave in debug messages after debugging is finished).  As Itamar pointed out in his post, we have some ideas about providing a lot more structure for the event system, but we haven't gotten around to implementing it.  Once we do, there will be much richer facilities for this kind of behavior.

Jp



From foom at fuhm.net  Tue Oct  4 16:31:58 2005
From: foom at fuhm.net (James Y Knight)
Date: Tue, 4 Oct 2005 16:31:58 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r14614 - Describe
	log.debug, and 'printed' and 'debug' log dict items.
In-Reply-To: <20EC6F51-A3D7-4C78-8DFC-2B8A5D21026D@slamb.org>
References: <E1ELDGl-0004r7-00@wolfwood>	<1128114620.7914.35.camel@localhost.localdomain>
	<20051004024351.GA23017@trogdor.home.puzzling.org>
	<dhtafa$f7c$1@sea.gmane.org>
	<20EC6F51-A3D7-4C78-8DFC-2B8A5D21026D@slamb.org>
Message-ID: <1556117D-3C77-4411-9ADC-137CE5A402A0@fuhm.net>


On Oct 4, 2005, at 1:00 PM, Scott Lamb wrote:

> On Oct 4, 2005, at 12:20 AM, Nicola Larosa wrote:
>
>> Also, a few words to the effect of *why* it should be deprecated  
>> would be
>> useful. We use it quite a lot, and I'd appreciate a few comments.
>>
>
> Me, too, me too.
>
> In my day job, I develop a lot of Java code. We have the luxury of  
> granular logging. I can switch, on a per-class basis, the output  
> level to trace, debug, warn, error, or fatal. That's handy.
>
> In Twisted, I see log.msg(), log.debug(), and log.err(). Why is one  
> of these levels going away? Is it just not normal to use logging  
> for debugging? What do you do instead?

The "log levels", such as they are, are (and have been for ages)  
implemented as keyword args on msg:
log.msg("error message", isError=1)
log.msg("normal message")
log.msg("debug message", debug=1).

The log.debug function just added the debug=1 argument for you.
The log.err func is poorly named, because you might be tempted to use  
it to emit error-level info, when really it is for emitting Exception/ 
Failure objects.

All in all, the log level functionality in twisted.python.log is  
pretty silly, but substantially unchanged.

James



From glyph at divmod.com  Tue Oct  4 17:01:20 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 4 Oct 2005 17:01:20 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r14614 - Describe
	log.debug, and 'printed' and 'debug' log dict items.
In-Reply-To: <1556117D-3C77-4411-9ADC-137CE5A402A0@fuhm.net>
Message-ID: <20051004210120.3914.126245901.divmod.quotient.24025@ohm>



On Tue, 4 Oct 2005 16:31:58 -0400, James Y Knight <foom at fuhm.net> wrote:

>log.msg("error message", isError=1)

Please don't ever do this.  Log observers which check the isError flag expect a stricter interface; a Failure object, for one thing, like log.err puts there.

Really this should be using the interface keyword arg that itamar mentioned, set to something like log.IErrorReport.  To ensure portability when that does become the convention, use log.err.



From andrew-twisted at puzzling.org  Tue Oct  4 19:19:57 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 5 Oct 2005 09:19:57 +1000
Subject: [Twisted-Python] Unicode
In-Reply-To: <20051004013305.GP23529@home.puzzling.org>
References: <4341CAA0.6000600@kenkinder.com>
	<20051004010805.3914.1122264389.divmod.quotient.23691@ohm>
	<20051004011102.GO23529@home.puzzling.org>
	<4341DAF3.4000609@twistedmatrix.com>
	<20051004013305.GP23529@home.puzzling.org>
Message-ID: <20051004231957.GC23017@trogdor.home.puzzling.org>

On Tue, Oct 04, 2005 at 11:33:05AM +1000, Mary Gardiner wrote:
> On Mon, Oct 03, 2005, Cory Dodt wrote:
> > URLs in Exceptions are all the rage these days, Mary.  Try running twistd
> > without installing zope.interface some time ;-)
> 
> Well then we're all set, except I don't think lore will generate
> constant #auto* URLs.

The #auto* ones won't be constant, but if you set <a name="foo">, lore will
use that instead of auto-generating one.

-Andrew.




From tgreenwoodgeer at yahoo.com  Tue Oct  4 20:08:14 2005
From: tgreenwoodgeer at yahoo.com (Todd Greenwood)
Date: Tue, 04 Oct 2005 17:08:14 -0700
Subject: [Twisted-Python] flow example doesn't appear to be 'flowing'
Message-ID: <4343196E.6070503@yahoo.com>

First, thanks for creating this cool tool!

I tried the following example (http://twistedmatrix.com/projects/flow/documentation/howto/flow.html
) ...and what I saw doesn't match the documentation. The docs state that if you launch two browsers 
pointed at this url, that both pages will be built simultaneously, due to the flow/generator 
constructs. However, when I tried this, I saw the web pages being generated sequentially. The second 
page blocked until the first page finished. Is this simply my misunderstanding of the docs, or is 
this page outdated?

REPRO:
$ twistd --version
twistd (the Twisted daemon) 2.0.1
Copyright (c) 2001-2004 Twisted Matrix Laboratories.

$ python flow-demo.py
visit http://localhost:8081/ to view the example

#mozilla browser tab #1 => http://localhost:8081
  30 Random numbers:

    1. 46905
    2. 17955
    3. 62281
    4. 99248
    5. 73635

#mozilla browser tab #2 => http://localhost:8081
  blank until tab #1 has finished (has 30 random numbers)

DETAILS:
http://twistedmatrix.com/projects/flow/documentation/howto/flow.html

Flow Resources

By using flow.Deferred it is easy to make up a web resource which is both long running, but also can 
serve more than one customer at a time. Run the example below, and with two browsers, view the 
webpage. Notice that both web pages are being created at the same time.

from __future__ import generators
from twisted.internet import reactor
from twisted.web import server, resource
from twisted.flow import flow

def cooperative(count):
     """ simulate a cooperative resource, that not block """
     from random import random
     idx = 0
     while idx < count:
         val = random()
         yield flow.Cooperate(val)
         yield str(val)[-5:]
         idx += 1

def flowRender(req):
     count = int(req.args.get("count",["30"])[0])
     req.write("<html><body>")
     req.write(" %s Random numbers: <ol>\n" % count)
     source = flow.wrap(cooperative(count))
     yield source
     for itm in source:
         req.write("<li>%s</li>\n" % itm)
         yield source
     req.write("</ol></body></html>\n")

class FlowResource(resource.Resource):
     def __init__(self, gen):
         resource.Resource.__init__(self)
         self.gen = gen
     def isLeaf(self): return true
     def render(self, req):
         self.d = flow.Deferred(self.gen(req))
         self.d.addCallback(lambda _: req.finish())
         return server.NOT_DONE_YET

print "visit http://localhost:8081/ to view the example"
root = FlowResource(flowRender)
site = server.Site(root)
reactor.listenTCP(8081,site)
reactor.run()


-- 
Todd Greenwood-Geer
tgreenwoodgeer at yahoo.com
________________________________________________________________________________
BEAWorld 2005: coming to a city near you.  Everything you need for SOA and enterprise infrastructure success.

 
Register now at http://www.bea.com/4beaworld

 
London 11-12 Oct| Paris13-14 Oct| Prague18-19 Oct |Tokyo 25-26 Oct| Beijing 7-8 Dec



From foom at fuhm.net  Tue Oct  4 21:05:53 2005
From: foom at fuhm.net (James Y Knight)
Date: Tue, 4 Oct 2005 21:05:53 -0400
Subject: [Twisted-Python] flow example doesn't appear to be 'flowing'
In-Reply-To: <4343196E.6070503@yahoo.com>
References: <4343196E.6070503@yahoo.com>
Message-ID: <5F50A2EB-7C3B-4557-9682-CD0450379419@fuhm.net>


On Oct 4, 2005, at 8:08 PM, Todd Greenwood wrote:

> First, thanks for creating this cool tool!
>
> I tried the following example (http://twistedmatrix.com/projects/ 
> flow/documentation/howto/flow.html
> ) ...and what I saw doesn't match the documentation. The docs state  
> that if you launch two browsers pointed at this url, that both  
> pages will be built simultaneously, due to the flow/generator  
> constructs. However, when I tried this, I saw the web pages being  
> generated sequentially. The second page blocked until the first  
> page finished. Is this simply my misunderstanding of the docs, or  
> is this page outdated?

Try with two browsers, not two tabs in one browser. Due to the way  
the browser implements connection-caching and http keepalive,  
sometimes it will not send a second request to the server until the  
first one has completely downloaded.

James



From foom at fuhm.net  Tue Oct  4 23:18:40 2005
From: foom at fuhm.net (James Y Knight)
Date: Tue, 4 Oct 2005 23:18:40 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r14614 - Describe
	log.debug, and 'printed' and 'debug' log dict items.
In-Reply-To: <20051004210120.3914.126245901.divmod.quotient.24025@ohm>
References: <20051004210120.3914.126245901.divmod.quotient.24025@ohm>
Message-ID: <7120C253-E771-4A76-97BD-EC4801866482@fuhm.net>

On Oct 4, 2005, at 5:01 PM, glyph at divmod.com wrote:
> On Tue, 4 Oct 2005 16:31:58 -0400, James Y Knight <foom at fuhm.net>  
> wrote:
>> log.msg("error message", isError=1)
>
> Please don't ever do this.  Log observers which check the isError  
> flag expect a stricter interface; a Failure object, for one thing,  
> like log.err puts there.

Actually they don't. They expect that the failure keyword may or may  
not be present. The only use of "levels" we have (DefaultObserver  
only showing error messages) filters out any non-isError messages, so  
there are circumstances in which you want to make sure you're  
emitting an isError=1 message.

> Really this should be using the interface keyword arg that itamar  
> mentioned, set to something like log.IErrorReport.  To ensure  
> portability when that does become the convention, use log.err.

But sometimes you cannot use log.err because you want to emit an  
error-level _message_, rather than the repr of an object, an  
exception, or a failure.

Notice how log.err("Foo!") doesn't actually do what you might hope.  
Contrast with log.msg("Foo!", isError=1) which does.

James




From exarkun at divmod.com  Tue Oct  4 23:49:04 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Tue, 4 Oct 2005 23:49:04 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r14614 - Describe
	log.debug, and 'printed' and 'debug' log dict items.
In-Reply-To: <7120C253-E771-4A76-97BD-EC4801866482@fuhm.net>
Message-ID: <20051005034904.3914.363837818.divmod.quotient.24180@ohm>

On Tue, 4 Oct 2005 23:18:40 -0400, James Y Knight <foom at fuhm.net> wrote:
>On Oct 4, 2005, at 5:01 PM, glyph at divmod.com wrote:
>>On Tue, 4 Oct 2005 16:31:58 -0400, James Y Knight <foom at fuhm.net>  wrote:
>>>log.msg("error message", isError=1)
>>
>>Please don't ever do this.  Log observers which check the isError  flag 
>>expect a stricter interface; a Failure object, for one thing,  like log.err 
>>puts there.
>
>Actually they don't. They expect that the failure keyword may or may  not be 
>present. The only use of "levels" we have (DefaultObserver  only showing 
>error messages) filters out any non-isError messages, so  there are 
>circumstances in which you want to make sure you're  emitting an isError=1 
>message.
>>Really this should be using the interface keyword arg that itamar 
>>mentioned, set to something like log.IErrorReport.  To ensure  portability 
>>when that does become the convention, use log.err.
>
>But sometimes you cannot use log.err because you want to emit an  error- 
>level _message_, rather than the repr of an object, an  exception, or a 
>failure.
>
>Notice how log.err("Foo!") doesn't actually do what you might hope. 
>Contrast with log.msg("Foo!", isError=1) which does.

Neither of these is supported behavior.  They're implementation accidents and shouldn't be used.  It's understandable that this is surprising, since I doubt it's ever been written down anywhere.

Jp



From foom at fuhm.net  Wed Oct  5 02:01:28 2005
From: foom at fuhm.net (James Y Knight)
Date: Wed, 05 Oct 2005 00:01:28 -0600
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <E1EN2LI-0006di-00@pyramid.twistedmatrix.com>

Bug summary
______________________
Since 2005-09-28 06:00:02.620000:
 Bugs opened: 26   Bugs closed: 12   Total open bugs: 471 (+14)
  Urgent: 8 (+3)
  Bug: 224 (+12)
  Feature: 161 (-2)
  Wish: 78 (+1)

New / Reopened Bugs
______________________
                    ==== Urgent ====
[CORE] whenThreaded no longer exists in SVN  (yesterday)
       http://twistedmatrix.com/bugs/issue1242 opened by spiv

Change cfreactor to use threadedselectreactor  (yesterday)
CLOSED http://twistedmatrix.com/bugs/issue1241 opened by glyph

Change wxreactor to use threadedselectreactor  (3 days ago)
       http://twistedmatrix.com/bugs/issue1235 opened by exarkun

[CORE] Move Deferred cancellation code out of trunk  (3 days ago)
       http://twistedmatrix.com/bugs/issue1236 opened by exarkun

[WIN32] selectreactor throws exceptions under pressure on windows  (5 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1229 opened by ghazel

                    ==== Bug ====
[DOCUMENTATION] reactor.callWhenRunning is not in the Using Processes document  (yesterday)
       http://twistedmatrix.com/bugs/issue1246 opened by hagna

not writing or writing nothing from resumeProducing breaks production  (yesterday)
CLOSED http://twistedmatrix.com/bugs/issue1243 opened by ghazel

[CORE, WIN32] iocpreator can drop a listening socket by mistake  (yesterday)
       http://twistedmatrix.com/bugs/issue1244 opened by ghazel

[CORE, WIN32] iocpreactor (at least) breaks event concept, leads to crashes  (yesterday)
       http://twistedmatrix.com/bugs/issue1240 opened by ghazel

[DOCUMENTATION] Document branch development policy  (6 days ago)
       http://twistedmatrix.com/bugs/issue1222 opened by hypatia

[TRIAL] trial.test_tests sucks  (6 days ago)
       http://twistedmatrix.com/bugs/issue1221 opened by jml

[CORE, DOCUMENTATION, TRIAL] Failure relies on __str__ not being broken.  (2 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1238 opened by jml

[CORE, TRIAL] twisted.test.test_reflect.LookupsTestCaseII.testExceptionHandling assumes modules not imported  (yesterday)
       http://twistedmatrix.com/bugs/issue1239 opened by jml

[CORE, ENTERPRISE] test_adbapi fails with "relation `simple' already exists" sometimes  (3 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1237 opened by exarkun

[CORE, TRIAL] trial should not crash and burn on exceptions from user code  (3 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1234 opened by exarkun

[CORE] iocpreactor\abstract needs to import socket  (4 days ago)
       http://twistedmatrix.com/bugs/issue1233 opened by ghazel

[TRIAL] TASK: Write tests for module-level sorting in TestLoader  (4 days ago)
       http://twistedmatrix.com/bugs/issue1232 opened by jml

minor English error  (5 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1231 opened by nirs

threadedselectreactor fails to exit  (5 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1230 opened by clive

selectreactor throws exceptions under pressure on windows  (5 days ago)
       http://twistedmatrix.com/bugs/issue1228 opened by ghazel

[VFS] vfs methods should always return deferreds  (5 days ago)
       http://twistedmatrix.com/bugs/issue1223 opened by cablehead

[VFS] consistent rename operation for vfs  (5 days ago)
       http://twistedmatrix.com/bugs/issue1224 opened by cablehead

[VFS] vfs errors  (5 days ago)
       http://twistedmatrix.com/bugs/issue1225 opened by cablehead

[VFS] refactor vfs from using pathutils to twisted.python.filepath  (5 days ago)
       http://twistedmatrix.com/bugs/issue1226 opened by cablehead

[VFS] twisted.vfs - general cleanup  (5 days ago)
       http://twistedmatrix.com/bugs/issue1227 opened by cablehead

                    ==== Wish ====
Add glyph's implicit-encoding-is-bad example to FAQ  (yesterday)
       http://twistedmatrix.com/bugs/issue1245 opened by moonfallen

Bugs Closed
______________________
                    ==== Urgent ====
Change cfreactor to use threadedselectreactor  (yesterday)
       http://twistedmatrix.com/bugs/issue1241 opened by glyph, closed by etrepum

[CORE, TRIAL] BUG: Raising FailTest doesn't always fail a test  (6 months ago)
       http://twistedmatrix.com/bugs/issue955 opened by exarkun, closed by jml

[WIN32] selectreactor throws exceptions under pressure on windows  (5 days ago)
       http://twistedmatrix.com/bugs/issue1229 opened by ghazel, closed by itamarst

                    ==== Bug ====
not writing or writing nothing from resumeProducing breaks production  (yesterday)
       http://twistedmatrix.com/bugs/issue1243 opened by ghazel, closed by exarkun

[CORE, DOCUMENTATION, TRIAL] Failure relies on __str__ not being broken.  (2 days ago)
       http://twistedmatrix.com/bugs/issue1238 opened by jml, closed by jml

[TRIAL] unittest.wait() calls runUntilCurrent recursively  (11 months ago)
       http://twistedmatrix.com/bugs/issue781 opened by exarkun, closed by jml

[CORE, ENTERPRISE] test_adbapi fails with "relation `simple' already exists" sometimes  (3 days ago)
       http://twistedmatrix.com/bugs/issue1237 opened by exarkun, closed by davep

[CORE, TRIAL] trial should not crash and burn on exceptions from user code  (3 days ago)
       http://twistedmatrix.com/bugs/issue1234 opened by exarkun, closed by exarkun

minor English error  (5 days ago)
       http://twistedmatrix.com/bugs/issue1231 opened by nirs, closed by jml

threadedselectreactor fails to exit  (5 days ago)
       http://twistedmatrix.com/bugs/issue1230 opened by clive, closed by etrepum

[CORE, TRIAL] trial's spinWhile and spinUntil have ridiculously small timeouts  (1 week ago)
       http://twistedmatrix.com/bugs/issue1214 opened by exarkun, closed by jml

                    ==== Feature ====
[APPLICATION] pickling protocol in sob  (2 weeks ago)
       http://twistedmatrix.com/bugs/issue1173 opened by antony, closed by exarkun




From andrew-twisted at puzzling.org  Wed Oct  5 03:24:05 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 5 Oct 2005 17:24:05 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] r14614 - Describe
	log.debug, and 'printed' and 'debug' log dict items.
In-Reply-To: <20051005034904.3914.363837818.divmod.quotient.24180@ohm>
References: <7120C253-E771-4A76-97BD-EC4801866482@fuhm.net>
	<20051005034904.3914.363837818.divmod.quotient.24180@ohm>
Message-ID: <20051005072405.GB8424@trogdor.home.puzzling.org>

On Tue, Oct 04, 2005 at 11:49:04PM -0400, Jp Calderone wrote:
> On Tue, 4 Oct 2005 23:18:40 -0400, James Y Knight <foom at fuhm.net> wrote:
[...]
> >
> >Notice how log.err("Foo!") doesn't actually do what you might hope. 
> >Contrast with log.msg("Foo!", isError=1) which does.
> 
> Neither of these is supported behavior.  They're implementation accidents 
> and shouldn't be used.  It's understandable that this is surprising, since 
> I doubt it's ever been written down anywhere.

Would you mind reviewing logging.xhtml to make sure it's perfectly correct
about these matters, then?  I made the best educated guesses about the
intentions of the code that I could, but I might have made some mistakes.

-Andrew.




From mesozoic at polynode.com  Wed Oct  5 11:23:52 2005
From: mesozoic at polynode.com (Alex Levy)
Date: Wed, 05 Oct 2005 11:23:52 -0400
Subject: [Twisted-Python] When can I start using web2?
Message-ID: <4343F008.6070805@polynode.com>

In the VFS thread, Glyph wrote something very discussion-worthy here. I
want to point it out. In one act. No intermission. (Grab a snack.)

I run a website using Moshe's twisted-web, with code built on
twisted.web.woven, and I'm desperate to move. I'm rewriting all my site
code. But right now, web development with Twisted is stuck in limbo. I
don't want to go traipsing off with a Nevow application if there's no
migration path to web2. I don't want to start building with web2 if it's
not stable, or (worse) if it's simply not being developed because
everyone's attention is elsewhere. Where am I going with this? Read on.

glyph at divmod.com wrote:
> web2 should not be a trivial HTTP server with a small resource
> wrapper in it.  It should be a full-featured web server.  Web does
> not mean "http" - all web-related protocols, such as WebDAV, ftp,
> even SOAP or Gopher, should be part of the 'web server' product part
> of Twisted.
>
> Going forward, I will stipulate this requirement: each independent
> Twisted subpackage MUST be at least 2 things: a functioning
> infrastructure layer that can be used by 3rd party applications, and
> an application which can be used standalone or with application
> plugins.  In twisted.web's case this application is a "web server",
> which primarily does HTTP but can provide other request/response
> based protocols as well.  "application plugins" for the web server
> are things that respond to requests for particular URLs.

Glyph's first point is extremely valid: web2 needs to be a
fully-featured server. That means, in my mind, everything that
twisted.web does, then something more. It might be that web2 supports
all of that already, but if so, that support isn't documented very well,
and one very striking reality of today's world is that if your web
framework isn't well-documented, people won't have the patience for it.

A list of things I haven't seen out of web2 yet:

* Painless web server deployment.
Moshe's twisted-web package was a functional, useful package that
allowed sysadmins to set up servers that used twisted.web in a very easy
way. It had things like /etc/twisted-web/local.d, where you could throw
your own deployment scripts, which I've found very useful. It also made
it *dead simple* for someone with just basic knowledge to set up a
working server, even if just for serving static pages. I think that
having something like this included in twisted.web2 would be a great
place to start; wubwubwub is probably the best place to work from.

* File uploads.
This was a major sticking point with twisted.web. In fact, it was the
most commonly-repeated problem I heard, and a problem I know someone,
somewhere, has to have solved by now on their own. So how does this work
in twisted.web2? More importantly, how can it be added to a twisted.web
application that is being migrated? Can it be added piecemeal?
web2/fileupload.py is a bit intimidating; someone needs to lead us
straight to the hidden treasure.

* Clear migration path from an existing twisted.web application.
If I've written an application that has old-style resources, do I even
have an upgrade path? What about twisted.web.distrib? A lot of people
use this, especially with sockets; what's the web2 equivalent?

* Clear migration path from an existing Nevow application.
If I have a Nevow site, a set of resources, and an application that
revolves around them, and I want to start using web2, where do I start?

* Comparison of major design changes.
This ties in with the migration path from Nevow. What the heck does the
streams module do? What's different about the appserver, context,
requests, static files, or virtual hosts?

All of these are things that either do not exist, or do not have
adequate documentation. If twisted.web2 is indeed reliable enough for
people to start building things like WebDAV and Paste scripts on top of
it, then it needs to be cut-and-dry how to do all these things that
we've come to expect from Twisted's next web framework.

-- 
Alex Levy
WWW: http://mesozoic.geecs.org

"Never let your sense of morals prevent you from doing what is right."
 -- Salvor Hardin, Isaac Asimov's _Foundation_



From foom at fuhm.net  Wed Oct  5 12:48:52 2005
From: foom at fuhm.net (James Y Knight)
Date: Wed, 5 Oct 2005 12:48:52 -0400
Subject: [Twisted-Python] When can I start using web2?
In-Reply-To: <4343F008.6070805@polynode.com>
References: <4343F008.6070805@polynode.com>
Message-ID: <72070441-F307-49D0-9F62-7435EBCF8DF2@fuhm.net>


On Oct 5, 2005, at 11:23 AM, Alex Levy wrote:
> Glyph's first point is extremely valid: web2 needs to be a
> fully-featured server. That means, in my mind, everything that
> twisted.web does, then something more. It might be that web2 supports
> all of that already, but if so, that support isn't documented very  
> well

It has some documentation, but of course, it certainly needs more. It  
doesn't yet do everything that twisted.web does. One glaring omission  
is a HTTP client. Another is auth/cookies. I'm working on the first.

> A list of things I haven't seen out of web2 yet:
>
> * Painless web server deployment.

Not done. There is no ready-made server included.

> * File uploads.

Should work, needs documentationing. Summary: fileupload.py is the  
low level functionality that you usually don't need to call directly.  
server.parsePOSTData is the "normal" interface into this system,  
which is what resource.PostableResource calls when confronted with a  
POST. It does what you want most of the time: incrementally parsing  
the form fields into request.args and request.files, putting the  
files in temp files on disk, with some limits on the file size  
(customization of said limits should be pushed out to the toplevel  
functions but hasn't been). request.args is a dict of {fieldname:  
valuestring}, request.files is a dict of {fieldname: (filename,  
content-type, TemporaryFile-instance)}.

> More importantly, how can it be added to a twisted.web
> application that is being migrated? Can it be added piecemeal?

Not entirely sure what you mean, but, the new parsing code is invoked  
when you use a twisted.web resource in a twisted.web2 server.

> * Clear migration path from an existing twisted.web application.
> If I've written an application that has old-style resources, do I even
> have an upgrade path?

Yes, web2 supports old web1 resource hierarchies inside web2 resource  
hierarchies, run by a web2 server.

> What about twisted.web.distrib?

It ought to work with web2.

> A lot of people
> use this, especially with sockets; what's the web2 equivalent?

SCGI should work for that purpose. Eventually, any one of HTTP, SCGI,  
or FastCGI should work for that purpose, but as of yet there is no  
HTTP or FastCGI client implementation.

> * Clear migration path from an existing Nevow application.
> If I have a Nevow site, a set of resources, and an application that
> revolves around them, and I want to start using web2, where do I  
> start?

You don't, yet. While there is currently a working migration path to  
web2 from web1, the migration path from Nevow is so far nonexistent.  
There will have to be one. "Valentino Volonghi aka Dialtone" was  
working on something, but I have not really put any time into it.

> * Comparison of major design changes.
> What the heck does the streams module do?

It has a giant docstring at the top; was it unclear or did you miss it?

> What's different about the appserver, context,
> requests, static files, or virtual hosts?

The margins of my email-client are too small to answer. ;) Probably  
the most interesting difference from Nevow is the Resource/Request API.

James



From andrea at cpushare.com  Wed Oct  5 13:32:26 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Wed, 5 Oct 2005 19:32:26 +0200
Subject: [Twisted-Python] When can I start using web2?
In-Reply-To: <72070441-F307-49D0-9F62-7435EBCF8DF2@fuhm.net>
References: <4343F008.6070805@polynode.com>
	<72070441-F307-49D0-9F62-7435EBCF8DF2@fuhm.net>
Message-ID: <20051005173226.GH5406@opteron.random>

> >* Clear migration path from an existing Nevow application.
> >If I have a Nevow site, a set of resources, and an application that
> >revolves around them, and I want to start using web2, where do I  
> >start?
> 
> You don't, yet. While there is currently a working migration path to  
> web2 from web1, the migration path from Nevow is so far nonexistent.  
> There will have to be one. "Valentino Volonghi aka Dialtone" was  
> working on something, but I have not really put any time into it.

Nevow has its own API, why should it even care about the underlying
infrastructure, be it web or web2?

Just port nevow to web2, and then it should work, no? I don't like the
idea that the nevow API will have to change.

Or do you want to make the nevow API obsolete, and if so why and what
was the problem with it? There are existing apps so I think it'd be
quite important not to require changes to applications while moving from
web to web2. Best would be to have a switch in nevow, so the application
can decide if nevow should base itself on top of web or web2 at runtime.

Thanks.



From tgreenwoodgeer at yahoo.com  Wed Oct  5 14:32:55 2005
From: tgreenwoodgeer at yahoo.com (Todd Greenwood)
Date: Wed, 05 Oct 2005 11:32:55 -0700
Subject: [Twisted-Python] Re: flow example doesn't appear to be 'flowing'
	(James Y Knight)
Message-ID: <43441C57.7020907@yahoo.com>

 >> Try with two browsers, not two tabs in one browser. Due to the way
 >> the browser implements connection-caching and http keepalive,
 >> sometimes it will not send a second request to the server until the
 >> first one has completely downloaded.
 >>
 >> James

James - thanks! Apparently 'File > New Window' wasn't enough with firefox. I had to open a different 
browser (Konqueror) in order to see the expected multi-page rendering in action.

All is working as expected now.

REPRO:
- open http://localhost:8081/ in browser #1 (Firefox)
- open http://localhost:8081/ in browser #2 (Konqueror)
- >> Both pages render random numbers simultaneously, as expected.

-Todd
-- 
Todd Greenwood-Geer
tgreenwoodgeer at yahoo.com

________________________________________________________________________________
BEAWorld 2005: coming to a city near you.  Everything you need for SOA and enterprise infrastructure success.

 
Register now at http://www.bea.com/4beaworld

 
London 11-12 Oct| Paris13-14 Oct| Prague18-19 Oct |Tokyo 25-26 Oct| Beijing 7-8 Dec



From foom at fuhm.net  Wed Oct  5 15:08:37 2005
From: foom at fuhm.net (James Y Knight)
Date: Wed, 5 Oct 2005 15:08:37 -0400
Subject: [Twisted-Python] When can I start using web2?
In-Reply-To: <20051005173226.GH5406@opteron.random>
References: <4343F008.6070805@polynode.com>
	<72070441-F307-49D0-9F62-7435EBCF8DF2@fuhm.net>
	<20051005173226.GH5406@opteron.random>
Message-ID: <77C2B05C-8E6A-4A32-B6B4-509ED1C666FC@fuhm.net>

[Please move conversation to the twisted-web mailing list, where it  
should've been to begin with]

On Oct 5, 2005, at 1:32 PM, Andrea Arcangeli wrote:
> Nevow has its own API, why should it even care about the underlying
> infrastructure, be it web or web2?

Nevow replaces and modifies much of the t.web infrastructure. Thus  
some parts are heavily dependent upon t.web as it is now.

> Just port nevow to web2, and then it should work, no? I don't like the
> idea that the nevow API will have to change.
>
> Or do you want to make the nevow API obsolete, and if so why and what
> was the problem with it? There are existing apps so I think it'd be
> quite important not to require changes to applications while moving  
> from
> web to web2. Best would be to have a switch in nevow, so the  
> application
> can decide if nevow should base itself on top of web or web2 at  
> runtime.

The solution of course is still up in the air, but my view is that  
two things should happen:
1) There _must_ be compatibility with the nevow resource API, similar  
to the already existing compatibility with resources written for the  
web1 resource API.
2) Nevow should aim to divorce itself from the resource API, just  
concerning itself with the rendering process. This would entail  
creating a new class similar to rend.Page but without having its own  
locateChild/renderHTTP, that can then be added into the class for the  
resource model of your framework of choice. I'm not exactly sure how  
that would work, though.

James



From tgreenwoodgeer at yahoo.com  Wed Oct  5 16:47:21 2005
From: tgreenwoodgeer at yahoo.com (Todd Greenwood)
Date: Wed, 05 Oct 2005 13:47:21 -0700
Subject: [Twisted-Python] twisted.trial : running tests : example requested
Message-ID: <43443BD9.4070007@yahoo.com>

1. I saw an email thread that stated that the twisted.trial.doctest feature is going away, is this 
true? If not, could I get a simple example?

2. I am working thru the docs at: 
http://twistedmatrix.com/projects/core/documentation/howto/policy/test-standard.html and the section 
'Running the Tests' doesn't make sense to me:
"""
Running the Tests
How

$ Twisted/admin/runtests
"""
2.a I don't have either the Twisted directory or the Twisted/admin/runtests. Is this the current way 
to run tests?

2.b I have looked for the 'runtests' after installing via debian's apt-get (below) and building off 
the latest svn source:

$ svn info
Path: .
URL: svn://svn.twistedmatrix.com/svn/Twisted/trunk
Repository UUID: bbbe8e31-12d6-0310-92fd-ac37d47ddeeb


$ dpkg -l | grep wist | sed -e 's/-8.*$/-8/g' -e 's/ii//g'
   python-twisted                     1.3.0-8
   python-twisted-conch               1.3.0-8
   python2.2-twisted                  1.3.0-8
   python2.2-twisted-bin              1.3.0-8
   python2.2-twisted-conch            1.3.0-8
   python2.3-twisted                  1.3.0-8
   python2.3-twisted-bin              1.3.0-8
   python2.3-twisted-conch            1.3.0-8
   twisted-doc                        1.3.0-8
   twisted-doc-api                    1.3.0-8
   twisted-quotes                     1.3.0-8

-Todd
-- 
Todd Greenwood-Geer
tgreenwoodgeer at yahoo.com
________________________________________________________________________________
BEAWorld 2005: coming to a city near you.  Everything you need for SOA and enterprise infrastructure success.

 
Register now at http://www.bea.com/4beaworld

 
London 11-12 Oct| Paris13-14 Oct| Prague18-19 Oct |Tokyo 25-26 Oct| Beijing 7-8 Dec



From exarkun at divmod.com  Wed Oct  5 17:57:40 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Wed, 5 Oct 2005 17:57:40 -0400
Subject: [Twisted-Python] twisted.trial : running tests : example requested
In-Reply-To: <43443BD9.4070007@yahoo.com>
Message-ID: <20051005215740.3914.316935665.divmod.quotient.24512@ohm>

On Wed, 05 Oct 2005 13:47:21 -0700, Todd Greenwood <tgreenwoodgeer at yahoo.com> wrote:
>1. I saw an email thread that stated that the twisted.trial.doctest feature 
>is going away, is this true? If not, could I get a simple example?

Hopefully.  It's embarassing.

>
>2. I am working thru the docs at: 
>http://twistedmatrix.com/projects/core/documentation/howto/policy/test- 
>standard.html and the section 'Running the Tests' doesn't make sense to me:
>"""
>Running the Tests
>How
>
>$ Twisted/admin/runtests
>"""

This was true for older releases. Now it's "trial twisted".

Jp



From jml at mumak.net  Wed Oct  5 18:41:21 2005
From: jml at mumak.net (Jonathan Lange)
Date: Thu, 6 Oct 2005 09:41:21 +1100
Subject: [Twisted-Python] twisted.trial : running tests : example requested
In-Reply-To: <20051005215740.3914.316935665.divmod.quotient.24512@ohm>
References: <43443BD9.4070007@yahoo.com>
	<20051005215740.3914.316935665.divmod.quotient.24512@ohm>
Message-ID: <d06a5cd30510051541i3c9715c2h@mail.gmail.com>

On 06/10/05, Jp Calderone <exarkun at divmod.com> wrote:
> On Wed, 05 Oct 2005 13:47:21 -0700, Todd Greenwood <tgreenwoodgeer at yahoo.com> wrote:
> >1. I saw an email thread that stated that the twisted.trial.doctest feature
> >is going away, is this true? If not, could I get a simple example?
>
> Hopefully.  It's embarassing.
>

It's not going away (yet).  It will be in 2.1.
You can find an example of its use in twisted/web2/test/test_stream.py
(in svn).


> >2. I am working thru the docs at:
> >http://twistedmatrix.com/projects/core/documentation/howto/policy/test-
> >standard.html and the section 'Running the Tests' doesn't make sense to me:
> >"""
> >Running the Tests
> >How
> >
> >$ Twisted/admin/runtests
> >"""
>
> This was true for older releases. Now it's "trial twisted".
>

In svn, it's "trial twisted".
In the most recent release it is "trial -R twisted".

cheers,
jml



From andrew-twisted at puzzling.org  Thu Oct  6 02:24:23 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu, 6 Oct 2005 16:24:23 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] r14597 - try enabling
	SO_REUSEADDR on windows
In-Reply-To: <E1EKyIR-0004Vi-00@wolfwood>
References: <E1EKyIR-0004Vi-00@wolfwood>
Message-ID: <20051006062423.GA8155@trogdor.home.puzzling.org>

On Thu, Sep 29, 2005 at 07:17:59AM -0600, Itamar Shtull-Trauring wrote:
> Author: itamarst
> Date: Thu Sep 29 07:17:59 2005
> New Revision: 14597
> 
> Modified:
>    trunk/twisted/internet/tcp.py
> Log:
> try enabling SO_REUSEADDR on windows

This appears to have broken
twisted.test.test_tcp.CannotBindTestCase.testCannotBind on windows.  Excerpt
from <http://twistedmatrix.com/buildbot/win32/builds/719/default/2>:

===============================================================================
[FAIL]: twisted.test.test_tcp.CannotBindTestCase.testCannotBind

  File "c:\buildslave\w32\W32-full2.2\Twisted\twisted\internet\defer.py", line 109, in maybeDeferred
    result = f(*args, **kw)
  File "c:\buildslave\w32\W32-full2.2\Twisted\twisted\test\test_tcp.py", line 451, in testCannotBind
    reactor.listenTCP, n, f, interface='127.0.0.1')
  File "c:\buildslave\w32\W32-full2.2\Twisted\twisted\trial\unittest.py", line 115, in failUnlessRaises
    raise FailTest('%s not raised (%r returned)'
twisted.trial.unittest.FailTest: CannotListenError not raised (<<class 'twisted.internet.tcp.Port'> of twisted.test.test_tcp.MyServerFactory on 4967> returned)
===============================================================================

-Andrew.




From itamar at itamarst.org  Thu Oct  6 09:08:29 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 06 Oct 2005 09:08:29 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r14597 - try enabling
	SO_REUSEADDR on windows
In-Reply-To: <20051006062423.GA8155@trogdor.home.puzzling.org>
References: <E1EKyIR-0004Vi-00@wolfwood>
	<20051006062423.GA8155@trogdor.home.puzzling.org>
Message-ID: <1128604109.8775.20.camel@localhost.localdomain>

On Thu, 2005-10-06 at 16:24 +1000, Andrew Bennetts wrote:
> On Thu, Sep 29, 2005 at 07:17:59AM -0600, Itamar Shtull-Trauring wrote:
> > Author: itamarst
> > Date: Thu Sep 29 07:17:59 2005
> > New Revision: 14597
> > 
> > Modified:
> >    trunk/twisted/internet/tcp.py
> > Log:
> > try enabling SO_REUSEADDR on windows
> 
> This appears to have broken
> twisted.test.test_tcp.CannotBindTestCase.testCannotBind on windows.  Excerpt
> from <http://twistedmatrix.com/buildbot/win32/builds/719/default/2>: 

Yeah... I will note this in issue, with some suggestions, and hopefully
someone with Windows can deal with this on the weekend.




From itamar at itamarst.org  Thu Oct  6 09:18:11 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 06 Oct 2005 09:18:11 -0400
Subject: [Twisted-Python] twisted.trial : running tests : example requested
In-Reply-To: <d06a5cd30510051541i3c9715c2h@mail.gmail.com>
References: <43443BD9.4070007@yahoo.com>
	<20051005215740.3914.316935665.divmod.quotient.24512@ohm>
	<d06a5cd30510051541i3c9715c2h@mail.gmail.com>
Message-ID: <1128604692.8775.22.camel@localhost.localdomain>

On Thu, 2005-10-06 at 09:41 +1100, Jonathan Lange wrote:
> On 06/10/05, Jp Calderone <exarkun at divmod.com> wrote:
> > On Wed, 05 Oct 2005 13:47:21 -0700, Todd Greenwood <tgreenwoodgeer at yahoo.com> wrote:
> > >1. I saw an email thread that stated that the twisted.trial.doctest feature
> > >is going away, is this true? If not, could I get a simple example?
> >
> > Hopefully.  It's embarassing.
> >
> 
> It's not going away (yet).  It will be in 2.1.
> You can find an example of its use in twisted/web2/test/test_stream.py
> (in svn).

Running that gives me some passing tests, but also:
IMPORT ERROR:

Could not import twisted.web2.stream:
  File "/home/itamarst/devel/python/Twisted/twisted/trial/runner.py",
line 710, in loadDoctests
    return super(SafeTestLoader, self).loadDoctests(module)
  File "/home/itamarst/devel/python/Twisted/twisted/trial/runner.py",
line 672, in loadDoctests
    return DocTestSuite(module)
  File "/home/itamarst/devel/python/Twisted/twisted/trial/runner.py",
line 102, in __init__
    suite = doctest.DocTestSuite(testModule)
  File "/home/itamarst/devel/python/Twisted/twisted/trial/doctest.py",
line 2239, in DocTestSuite
    return self._dt_test.name
exceptions.AttributeError: 'module' object has no attribute 'TestSuite'





From tdickenson at devmail.geminidataloggers.co.uk  Thu Oct  6 09:50:28 2005
From: tdickenson at devmail.geminidataloggers.co.uk (Toby Dickenson)
Date: Thu, 6 Oct 2005 14:50:28 +0100
Subject: [Twisted-Python] threadedwin32eventreactor.py
Message-ID: <200510061450.28220.tdickenson@devmail.geminidataloggers.co.uk>

I am looking to combine the foreign event loop joy of threadedselectreactor, 
with the WaitForMultipleObject joy of win32eventreactor. 

Has anyone else looked at this combination?

-- 
Toby Dickenson



From itamar at itamarst.org  Thu Oct  6 10:01:27 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 06 Oct 2005 10:01:27 -0400
Subject: [Twisted-Python] threadedwin32eventreactor.py
In-Reply-To: <200510061450.28220.tdickenson@devmail.geminidataloggers.co.uk>
References: <200510061450.28220.tdickenson@devmail.geminidataloggers.co.uk>
Message-ID: <1128607287.8775.28.camel@localhost.localdomain>

On Thu, 2005-10-06 at 14:50 +0100, Toby Dickenson wrote:
> I am looking to combine the foreign event loop joy of threadedselectreactor, 
> with the WaitForMultipleObject joy of win32eventreactor. 
> 
> Has anyone else looked at this combination?

tsr as is needs to be completely refactored to support that, so in it's
current form tsr is probably not going to be a public API (wxPython will
be supported via a wxreactor that uses tsr internally).

So, if you want to work on this the best approach is to think about how
to refactor existing reactors so they can be hooked up in a tsr-like
fashion.




From bob at redivi.com  Thu Oct  6 14:32:12 2005
From: bob at redivi.com (Bob Ippolito)
Date: Thu, 6 Oct 2005 11:32:12 -0700
Subject: [Twisted-Python] threadedwin32eventreactor.py
In-Reply-To: <1128607287.8775.28.camel@localhost.localdomain>
References: <200510061450.28220.tdickenson@devmail.geminidataloggers.co.uk>
	<1128607287.8775.28.camel@localhost.localdomain>
Message-ID: <8D775D44-C8AA-4532-91E2-3C213CBEBB5B@redivi.com>


On Oct 6, 2005, at 7:01 AM, Itamar Shtull-Trauring wrote:

> On Thu, 2005-10-06 at 14:50 +0100, Toby Dickenson wrote:
>
>> I am looking to combine the foreign event loop joy of  
>> threadedselectreactor,
>> with the WaitForMultipleObject joy of win32eventreactor.
>>
>> Has anyone else looked at this combination?
>>
>
> tsr as is needs to be completely refactored to support that, so in  
> it's
> current form tsr is probably not going to be a public API (wxPython  
> will
> be supported via a wxreactor that uses tsr internally).
>
> So, if you want to work on this the best approach is to think about  
> how
> to refactor existing reactors so they can be hooked up in a tsr-like
> fashion.

The idea with tsr was to show how useful it would be to have an  
"interleave" API for reactors and to do all socket IO in a separate  
thread.  Ideally, all reactors would support this API and tsr would  
go away.  It should be pretty trivial to mostly cut and paste from  
tsr and win32eventreactor and end up with what you want.

-bob




From BRADLEY.S.GASPARD at saic.com  Fri Oct  7 12:09:30 2005
From: BRADLEY.S.GASPARD at saic.com (Gaspard, Bradley S)
Date: Fri, 7 Oct 2005 12:09:30 -0400 
Subject: [Twisted-Python] DHCP client implementation using twisted
Message-ID: <4797F6E414C24D4A96AAC14B320BCAD70FA4F0@0015-its-exmb02.us.saic.com>

Hello,

 

I've browsed the documentation and mailing list and did a Google search but
could find nothing useful. I'm wondering if anyone could point me to a DHCP
client implementation. In lieu of that, any thoughts on how difficult it
would be write a DHCP client for a Twisted newbie?

 

Any guidance would be appreciated.

 

Brad

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20051007/8d58a06d/attachment.htm 

From Henning.Ramm at mediapro-gmbh.de  Fri Oct  7 12:54:51 2005
From: Henning.Ramm at mediapro-gmbh.de (Henning.Ramm at mediapro-gmbh.de)
Date: Fri, 7 Oct 2005 18:54:51 +0200
Subject: [Twisted-Python] Conch SSH client howto
Message-ID: <F92274058556DE42B94B148EEFB91839021CB5A3@exchange-03.suedkurier.de>

Ahoi!

Is the conch ssh client howto example (see below) supposed to work?
http://twistedmatrix.com/projects/conch/documentation/howto/conch_client.html

I only changed the user, keys and server information and added some print statements.

If verifyHostKey fails, I get no error message (looks like it should raise a ConchError), the script only stays quiet.

If that works, connectionSecure is called once, then getPublicKey 7 times, after that nothing happens in eternity.
The pubKey seems to be ok, otherwise I got a BadKeyError.

Any hints?

Best regards,
Henning Hraban Ramm
S?dkurier Medienhaus / MediaPro
Support/Admin/Development Dept.



From steve at blighty.com  Fri Oct  7 12:52:23 2005
From: steve at blighty.com (Steve Atkins)
Date: Fri, 7 Oct 2005 09:52:23 -0700
Subject: [Twisted-Python] DHCP client implementation using twisted
In-Reply-To: <4797F6E414C24D4A96AAC14B320BCAD70FA4F0@0015-its-exmb02.us.saic.com>
References: <4797F6E414C24D4A96AAC14B320BCAD70FA4F0@0015-its-exmb02.us.saic.com>
Message-ID: <20051007165223.GA15307@gp.word-to-the-wise.com>

On Fri, Oct 07, 2005 at 12:09:30PM -0400, Gaspard, Bradley S wrote:

> I've browsed the documentation and mailing list and did a Google search but
> could find nothing useful. I'm wondering if anyone could point me to a DHCP
> client implementation. In lieu of that, any thoughts on how difficult it
> would be write a DHCP client for a Twisted newbie?
> 
>  
> 
> Any guidance would be appreciated.

I'm the opposite of a Twisted expert, but writing a DHCP client in any
language isn't trivial. DHCP ideally requires raw socket access and
has to work before the IP stack is fully up and running.

It's about the last application I'd consider using to learn a new
development platform. It's also something that, to me, doesn't sound
like a useful thing to have an async implementation of - if you're
reconfiguring your network interface, what else are you wanting to
use the network for at the same time?

"Anemon" is a python implementation of DHCP, IIRC.

Cheers,
  Steve



From tdickenson at devmail.geminidataloggers.co.uk  Fri Oct  7 12:58:26 2005
From: tdickenson at devmail.geminidataloggers.co.uk (Toby Dickenson)
Date: Fri, 7 Oct 2005 17:58:26 +0100
Subject: [Twisted-Python] threadedwin32eventreactor.py
In-Reply-To: <8D775D44-C8AA-4532-91E2-3C213CBEBB5B@redivi.com>
References: <200510061450.28220.tdickenson@devmail.geminidataloggers.co.uk>
	<1128607287.8775.28.camel@localhost.localdomain>
	<8D775D44-C8AA-4532-91E2-3C213CBEBB5B@redivi.com>
Message-ID: <200510071758.26568.tdickenson@devmail.geminidataloggers.co.uk>

On Thursday 06 October 2005 19:32, Bob Ippolito wrote:
>  It should be pretty trivial to mostly cut and paste from  
> tsr and win32eventreactor and end up with what you want.

Thanks for the prod. That approach *was* easier than I expected. I now have a 
threadedwin32eventreactor that seems to mostly work.

> On Oct 6, 2005, at 7:01 AM, Itamar Shtull-Trauring wrote:
> > So, if you want to work on this the best approach is to think about  
> > how to refactor existing reactors so they can be hooked up in a
> > tsr-like fashion.

That looks like it should be viable,

> > (wxPython will be supported via a wxreactor that uses tsr internally).

Thats interesting, because it gives a new dimension of reactor combinations.
{qtreactor,wxreactor,etc} layered on 
{threadedselectreactor,threadedwin32eventreactor,threadedpollreactor,etc}

The only heavy lifting performed by your new wxreactor relates to shutdown of 
the reactor/wx loop. Im finding the same thing when integrating with the pyqt 
loop.

Hmmmmmm.

-- 
Toby Dickenson



From itamar at itamarst.org  Fri Oct  7 13:03:40 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 07 Oct 2005 13:03:40 -0400
Subject: [Twisted-Python] threadedwin32eventreactor.py
In-Reply-To: <200510071758.26568.tdickenson@devmail.geminidataloggers.co.uk>
References: <200510061450.28220.tdickenson@devmail.geminidataloggers.co.uk>
	<1128607287.8775.28.camel@localhost.localdomain>
	<8D775D44-C8AA-4532-91E2-3C213CBEBB5B@redivi.com>
	<200510071758.26568.tdickenson@devmail.geminidataloggers.co.uk>
Message-ID: <1128704621.8827.8.camel@localhost.localdomain>

On Fri, 2005-10-07 at 17:58 +0100, Toby Dickenson wrote:

> Thats interesting, because it gives a new dimension of reactor combinations.
> {qtreactor,wxreactor,etc} layered on 
> {threadedselectreactor,threadedwin32eventreactor,threadedpollreactor,etc}
> 
> The only heavy lifting performed by your new wxreactor relates to shutdown of 
> the reactor/wx loop. Im finding the same thing when integrating with the pyqt 
> loop.

Twisted already has a good qt reactor, though I suppose you might
actually want win32eventreactor integration on Windows. Yay Windows. For
wxreactor the shutdown code is already done in a branch rewrite of
wxreactor (viewcvs at
http://svn.twistedmatrix.com/cvs/branches/itamar/issue-1235/) which
should be integrated this weekend I hope.




From Henning.Ramm at mediapro-gmbh.de  Fri Oct  7 13:21:15 2005
From: Henning.Ramm at mediapro-gmbh.de (Henning.Ramm at mediapro-gmbh.de)
Date: Fri, 7 Oct 2005 19:21:15 +0200
Subject: [Twisted-Python] Conch SSH client howto
Message-ID: <F92274058556DE42B94B148EEFB91839021CB5A4@exchange-03.suedkurier.de>

> connectionSecure is called once, then getPublicKey 7 times, after that nothing happens in eternity.
> The pubKey seems to be ok, otherwise I got a BadKeyError.

Sorry for bothering you - after I hooked up twisted logging, I know what's going on:

[INFO] Starting factory <twisted.internet.protocol.ClientFactory instance at 0x015587D8>
[INFO] Enabling Multithreading.
[INFO] starting waker
[INFO] kex alg, key alg: diffie-hellman-group-exchange-sha1 ssh-rsa
[INFO] client->server: aes256-ctr hmac-sha1 none
[INFO] server->client: aes256-ctr hmac-sha1 none
[INFO] Transport verifyHostKey: ac:ff:b7:bd:90:a4:98:f0:42:eb:07:16:c0:9a:6e:f8
[INFO] Transport connectionSecure
[INFO] starting service ssh-userauth
[INFO] can continue with: ['publickey', 'password', 'keyboard-interactive']
[INFO] trying to auth with publickey
[INFO] AuthClient getPublicKey
[INFO] using key of type ssh-rsa

(last 4 lines repeated 7 times)

[ERROR] Got remote error, code 2
reason: Too many authentication failures for ppi
[INFO] connection lost
[INFO] Stopping factory <twisted.internet.protocol.ClientFactory instance at 0x015587D8>

I still have no idea why key auth doesn't work and how to enable password auth, but I will find out.
(That would be easier if conch.ssh had proper API docs, though.)

Best regards,
Henning Hraban Ramm
S?dkurier Medienhaus / MediaPro
Support/Admin/Development Dept.



From foom at fuhm.net  Fri Oct  7 13:31:02 2005
From: foom at fuhm.net (James Y Knight)
Date: Fri, 7 Oct 2005 13:31:02 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r14683 - Make the
	toMainThread Queue unlimited in size, instead of max size 1. 
In-Reply-To: <E1ENtn5-00011b-00@wolfwood>
References: <E1ENtn5-00011b-00@wolfwood>
Message-ID: <ECE6DB94-7530-4B24-946B-CBCE17E22255@fuhm.net>


On Oct 7, 2005, at 11:05 AM, Stephen Thorne wrote:
> Make the toMainThread Queue unlimited in size, instead of max size 1.
> This can cause deadlocks.

Why does it cause deadlocks? That queue should be the only lock the  
tsr thread blocks upon, besides the GIL. Making the queue infinite  
means the tsr thread could sit there generating large amounts of  
events before the main thread gets around to reading any of them,  
getting in a state of continuous backlog and badness. From what I can  
see, the select thread *should* block until the main thread has read  
the data.

James




From stephen at thorne.id.au  Fri Oct  7 22:30:50 2005
From: stephen at thorne.id.au (Stephen Thorne)
Date: Sat, 8 Oct 2005 12:30:50 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] r14683 - Make
	thetoMainThread Queue unlimited in size, instead of max size 1. 
In-Reply-To: <ECE6DB94-7530-4B24-946B-CBCE17E22255@fuhm.net>
Message-ID: <20051008023050.3914.1977843664.divmod.quotient.25552@ohm>

On Fri, 7 Oct 2005 13:31:02 -0400, James Y Knight <foom at fuhm.net> wrote:
>
>On Oct 7, 2005, at 11:05 AM, Stephen Thorne wrote:
>>Make the toMainThread Queue unlimited in size, instead of max size 1.
>>This can cause deadlocks.
>
>Why does it cause deadlocks? That queue should be the only lock the  tsr 
>thread blocks upon, besides the GIL. Making the queue infinite  means the 
>tsr thread could sit there generating large amounts of  events before the 
>main thread gets around to reading any of them,  getting in a state of 
>continuous backlog and badness. From what I can  see, the select thread 
>*should* block until the main thread has read  the data.

I'm not exactly sure, but it was deterministic. test_internet.InterfaceTestCase.testWakeUp would cause the reactor to stop dead.

It seems there are significant memory consumption issues, i'm in the process of figuring out if putting a sane upper limit on the queue (suggestions have ranged from 100's to 100,000's) will stop my poor powermac from being brought to its knees by threadedselectreactor.

There are quite a few more failures in threadedselectreactor, I'm seeing non-deterministic behaviour, things like tcp.Client using reactor.callLater(0, self.failIfNotConnected, error) being a problem - because if the fork in the code is taken that goes to that state, self.socket doesn't get defined, and code can end up trying to write to that socket and getting an AttributeError......

Suffice it to say, I'm working on the issues here, and I want my buidslave all green and pretty, I'll see about getting this resolved before the end of the weekend.

Stephen.



From drakesmith at adelphia.net  Fri Oct  7 23:04:01 2005
From: drakesmith at adelphia.net (Drake Smith)
Date: Fri, 07 Oct 2005 23:04:01 -0400
Subject: [Twisted-Python] How to emulate Python's getoutput function
Message-ID: <5.1.0.14.0.20051007225227.02b3b670@mail.adelphia.net>

Is there a relatively simple way to emulate the following python function:
   commands.getoutput ('ifconfig eth0 | grep inet'))

I can get halfway there with:
   utils.getProcessOutput ('/sbin/ifconfig', ['eth0'])
but the trick to piping that output to another command such as grep is 
eluding me. Thank you.




From exarkun at divmod.com  Fri Oct  7 23:35:29 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Fri, 7 Oct 2005 23:35:29 -0400
Subject: [Twisted-Python] How to emulate Python's getoutput function
In-Reply-To: <5.1.0.14.0.20051007225227.02b3b670@mail.adelphia.net>
Message-ID: <20051008033529.3914.2127255509.divmod.quotient.25566@ohm>

On Fri, 07 Oct 2005 23:04:01 -0400, Drake Smith <drakesmith at adelphia.net> wrote:
>Is there a relatively simple way to emulate the following python function:
>   commands.getoutput ('ifconfig eth0 | grep inet'))

For the particular case of grep, this is pretty straightfoward:

    def gotOutput(output):
        lines = output.splitlines()
        for L in lines:
            if 'inet' in L:
                yield L
    utils.getProcessOutput(...).addCallback(gotOutput).addCallback(something)

For the general case of chaining processes, you need to get down to reactor.spawnProcess().  This API lets you specify which file descriptors are connected to what.  A pipe ends up being just that - use os.pipe() to create one, hand one end to the stdout of one process and the other end to the stdin of another, and now they're talking :)

Hope this helps,

Jp



From radeex at gmail.com  Fri Oct  7 23:40:03 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Sat, 8 Oct 2005 14:40:03 +1100
Subject: [Twisted-Python] How to emulate Python's getoutput function
In-Reply-To: <5.1.0.14.0.20051007225227.02b3b670@mail.adelphia.net>
References: <5.1.0.14.0.20051007225227.02b3b670@mail.adelphia.net>
Message-ID: <60ed19d40510072040x65b00cc3oe862cca72c9f8aab@mail.gmail.com>

On 10/8/05, Drake Smith <drakesmith at adelphia.net> wrote:
> Is there a relatively simple way to emulate the following python function:
>    commands.getoutput ('ifconfig eth0 | grep inet'))
>
> I can get halfway there with:
>    utils.getProcessOutput ('/sbin/ifconfig', ['eth0'])
> but the trick to piping that output to another command such as grep is
> eluding me. Thank you.

make the command "sh", and the arguments ['-c', 'shell string']. Of
course, this means you're opening yourself up to shell insertion
attacks if you put any user-input into that shell string.


--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+



From drakesmith at adelphia.net  Sat Oct  8 00:08:13 2005
From: drakesmith at adelphia.net (Drake Smith)
Date: Sat, 08 Oct 2005 00:08:13 -0400
Subject: [Twisted-Python] How to emulate Python's getoutput function
In-Reply-To: <60ed19d40510072040x65b00cc3oe862cca72c9f8aab@mail.gmail.co
 m>
References: <5.1.0.14.0.20051007225227.02b3b670@mail.adelphia.net>
	<5.1.0.14.0.20051007225227.02b3b670@mail.adelphia.net>
Message-ID: <5.1.0.14.0.20051007235753.02bd1d78@mail.adelphia.net>

At 02:40 PM 10/8/2005 +1100, you wrote:
>On 10/8/05, Drake Smith <drakesmith at adelphia.net> wrote:
> > Is there a relatively simple way to emulate the following python function:
> >    commands.getoutput ('ifconfig eth0 | grep inet'))
> >
> > I can get halfway there with:
> >    utils.getProcessOutput ('/sbin/ifconfig', ['eth0'])
> > but the trick to piping that output to another command such as grep is
> > eluding me. Thank you.
>
>make the command "sh", and the arguments ['-c', 'shell string']. Of
>course, this means you're opening yourself up to shell insertion
>attacks if you put any user-input into that shell string.
>
>
>--
>   Twisted   |  Christopher Armstrong: International Man of Twistery
>    Radix    |    -- http://radix.twistedmatrix.com
>             |  Release Manager, Twisted Project
>   \\\V///   |    -- http://twistedmatrix.com
>    |o O|    |
>w----v----w-+
>
>
>From: Jp Calderone <exarkun at divmod.com>
>
>For the particular case of grep, this is pretty straightfoward:
>   def gotOutput(output):
>      lines = output.splitlines()
>      for L in lines:
>      if 'inet' in L:
>         yield L
>   utils.getProcessOutput(...).addCallback(gotOutput).addCallback(something)
>
>For the general case of chaining processes, you need to get down to 
>reactor.spawnProcess(). This API lets you specify which file descriptors 
>are connected to what. A pipe ends up being just that - use os.pipe() to 
>create one, hand one end to the stdout of one process and the other end to 
>the stdin of another, and now they're talking :)
>
>Hope this helps,
>
>Jp

Thank you Christopher and JP for your answers. They both work like a charm 
and I can use both techniques in my current project.




From radeex at gmail.com  Sat Oct  8 02:17:16 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Sat, 8 Oct 2005 17:17:16 +1100
Subject: [Twisted-Python] The Twisted Sprint is On
Message-ID: <60ed19d40510072317o690db5d3v7ffac22a117ff62f@mail.gmail.com>

We're all in #twisted hacking away at Twisted to improve Trial, the
release, documentation, and so forth. We'll be going all weekend, so
please stop by #twisted on irc.freenode.net if you want to get
involved or just gape in horror at the chaotic development process.

The most popular times to be on will be Australian-EST prime time,
US-EST prime time, and especially the collissions between them.


--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+



From dreid at dreid.org  Sun Oct  9 16:14:39 2005
From: dreid at dreid.org (David Reid)
Date: Sun, 09 Oct 2005 13:14:39 -0700
Subject: [Twisted-Python] When can I start using web2?
In-Reply-To: <72070441-F307-49D0-9F62-7435EBCF8DF2@fuhm.net>
References: <4343F008.6070805@polynode.com>
	<72070441-F307-49D0-9F62-7435EBCF8DF2@fuhm.net>
Message-ID: <1128888879.27630.8.camel@audrey.local>

On Wed, 2005-10-05 at 12:48 -0400, James Y Knight wrote:

> > * File uploads.
> 
> Should work, needs documentationing. Summary: fileupload.py is the  
> low level functionality that you usually don't need to call directly.  
> server.parsePOSTData is the "normal" interface into this system,  
> which is what resource.PostableResource calls when confronted with a  
> POST. It does what you want most of the time: incrementally parsing  
> the form fields into request.args and request.files, putting the  
> files in temp files on disk, with some limits on the file size  
> (customization of said limits should be pushed out to the toplevel  
> functions but hasn't been). request.args is a dict of {fieldname:  
> valuestring}, request.files is a dict of {fieldname: (filename,  
> content-type, TemporaryFile-instance)}.
> 

Also twisted.web2.static.FileSaver started off as just an example of
handling file uploads and turned into an attempt at a drop in resource
for handling them.  I tried to write it around what I percieved to be a
common use case, which was:
 
 * type limiting
 * size limiting
 * forcing permissions
 * globally unique filenames (FileSaver.makeUniqueName is easily
overrideable if the md5 of filename + the md5 of the time string isn't
sufficient or is overkill for your needs)

I'm not sure if it actually succeeded as more than an example, I don't
know that anyone is actively using it, and I'm rather surprised that
James failed to mention it, perhaps he forgot about it himself.

-David




From stephen at thorne.id.au  Sun Oct  9 19:45:56 2005
From: stephen at thorne.id.au (Stephen Thorne)
Date: Mon, 10 Oct 2005 09:45:56 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] r14683 - Make
	thetoMainThread Queue unlimited in size, instead of max size 1. 
In-Reply-To: <20051008023050.3914.1977843664.divmod.quotient.25552@ohm>
Message-ID: <20051009234556.3914.326955336.divmod.quotient.26126@ohm>

On Sat, 8 Oct 2005 12:30:50 +1000, Stephen Thorne <stephen at thorne.id.au> wrote:
>It seems there are significant memory consumption issues, i'm in the process 
>of figuring out if putting a sane upper limit on the queue (suggestions have 
>ranged from 100's to 100,000's) will stop my poor powermac from being 
>brought to its knees by threadedselectreactor.
>
>There are quite a few more failures in threadedselectreactor, I'm seeing 
>non-deterministic behaviour, things like tcp.Client using 
>reactor.callLater(0, self.failIfNotConnected, error) being a problem - 
>because if the branch in the code is taken that goes to that state, 
>self.socket doesn't get defined, and code can end up trying to write to that 
>socket and getting an AttributeError......
>
>Suffice it to say, I'm working on the issues here, and I want my buidslave 
>all green and pretty, I'll see about getting this resolved before the end of 
>the weekend.

Okay, I didn't get that done. I haven't resolved the issue, as it stands threadedselectreactor will not pass the twisted test-suite.

Stephen.



From tdickenson at devmail.geminidataloggers.co.uk  Mon Oct 10 06:06:24 2005
From: tdickenson at devmail.geminidataloggers.co.uk (Toby Dickenson)
Date: Mon, 10 Oct 2005 11:06:24 +0100
Subject: [Twisted-Python] Re: [Twisted-commits] r14683 - Make the
	toMainThread Queue unlimited in size, instead of max size 1.
In-Reply-To: <ECE6DB94-7530-4B24-946B-CBCE17E22255@fuhm.net>
References: <E1ENtn5-00011b-00@wolfwood>
	<ECE6DB94-7530-4B24-946B-CBCE17E22255@fuhm.net>
Message-ID: <200510101106.24167.tdickenson@devmail.geminidataloggers.co.uk>

On Friday 07 October 2005 18:31, James Y Knight wrote:
> 
> On Oct 7, 2005, at 11:05 AM, Stephen Thorne wrote:
> > Make the toMainThread Queue unlimited in size, instead of max size 1.
> > This can cause deadlocks.
> 
> Why does it cause deadlocks? 

I see one possible deadlock, but Im suprised you dont see other different 
symptoms first:

In the blocking select thread:
1. _doSelectInThread calls _sendToMain, it calls mainWaker to wake up the 
foreign event loop, then returns

In the main thread
2. some application code (?) calls doIteration
3. doIteration calls _sendToThread(_doIterationInThread
4. doIteration calls toMainThread.get(), expecting to block until 'its' 
iteration is complete. However it immediately receives the message sent in 
step 1.
5. doIteration returns
6. The foreign event loop gets round to calling _interleave because of the 
request sent in step 1.
7. _interleave calls toMainThread.get_nowait. This raises a Queue.Empty 
exception, which escapes up to the foreign event loop integration code.

In the blocking select thread

8. _doSelectInThread is called because of the request in step 3.
9. _doSelectInThread calls sendToMain. This never gets removed from the Queue.

At this point:

* The reactor is stalled indefinitely because _interleave raised an exception 
before it called _sendToThread(_doIterationInThread.

* Any subsequent calls to doIteration will cause _doThreadIteration to 
deadlock in sendToMain.


I believe the right solution involves replacing get_nowait with a regular get 
in _interleave.

I guess it is not a problem that doIteration sometimes does not perform a 
whole iteration. There has never been a guarantee about how much work is done 
each iteration of the reactor loop, right?



-- 
Toby Dickenson



From dguaraglia at gmail.com  Mon Oct 10 08:48:54 2005
From: dguaraglia at gmail.com (David Guaraglia)
Date: Mon, 10 Oct 2005 09:48:54 -0300
Subject: [Twisted-Python] Update on cheese shop
Message-ID: <434A6336.4020005@gmail.com>

Hello!

Is anyone going to do an update on the cheese shop anytime soon? Trying 
to install Twisted 2.10, I ended up installing 1.30, as the installation 
download page listed in the Cheese Shop has just downloads of that version.

I saw Itamarst is the owner there.

David

PS: didn't try to sound harsh or hostile, but english is not such an 
expressive language and I'm not an expressive person.



From itamar at itamarst.org  Mon Oct 10 11:06:32 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 10 Oct 2005 11:06:32 -0400
Subject: [Twisted-Python] Status of wxPython support in Twisted 2.1: use
	wxreactor
Message-ID: <1128956792.9046.9.camel@localhost.localdomain>

wxreactor in Twisted 2.1 uses threadedselectreactor. This means that wx
apps ought to use wxreactor, not TSR directly; there are some issues
with vanilla TSR wx integration that are also present in wxreactor, but
will be fixed in future versions of wxreactor.

What's broken (there may be more):
1. reactor shutdown events aren't handled correctly (e.g. Deferred
returned from during-shutdown event).
2. Signal handling for e.g. Ctrl-C is caught by wx, not twisted.

In order to get these fixed I need your help. I have a version of
wxreactor that *probably* fixes these in Subversion trunk. You can try
it out by running doc/core/examples/wxdemo.py. Hitting Ctrl-C, choosing
Exit from the menu or closing the menu all should have the same effect -
the application logs "shutting down in 0.3 seconds...", "2", "1", "0"
then exits. In addition, "Hello world" should continue to be printed
while the dialog box is open or you are holding down a menu.

Please try this out, and report success or failure at
<http://twistedmatrix.com/bugs/issue1235>. I'm especially interested to
hear if it works on Windows or Mac OS X. Please include your OS and
version of wxPython/wxWidgets when submitting reports.





From michael.kerrin at openapp.biz  Mon Oct 10 13:23:37 2005
From: michael.kerrin at openapp.biz (Michael Kerrin)
Date: Mon, 10 Oct 2005 17:23:37 +0000
Subject: [Twisted-Python] twisted.web2 on Windows
Message-ID: <200510101723.37287.michael.kerrin@openapp.biz>

Hi All,

  I am wondering about the status of twisted.web2 and twisted in general on 
Windows. I personally don't have access to a Windows machine and hence am 
asking, but I have just received a report of Zope3 (which now uses Twisted 
has its server) failing tests because of a problem in the 
twisted.web2.channel.cgi module.

  So I am wondering is there any thing I should be aware off, or is this 
problem I am seeing just a once off, i.e. a bug in twisted.web2.channel.cgi 
to be specific.

  I have just filled a bug report at http://twistedmatrix.com/bugs/issue1270 
about my specific issue.

Thanks 

Michael



From itamar at itamarst.org  Mon Oct 10 13:05:23 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 10 Oct 2005 13:05:23 -0400
Subject: [Twisted-Python] twisted.web2 on Windows
In-Reply-To: <200510101723.37287.michael.kerrin@openapp.biz>
References: <200510101723.37287.michael.kerrin@openapp.biz>
Message-ID: <1128963923.9046.14.camel@localhost.localdomain>

On Mon, 2005-10-10 at 17:23 +0000, Michael Kerrin wrote:

>   So I am wondering is there any thing I should be aware off, or is this 
> problem I am seeing just a once off, i.e. a bug in twisted.web2.channel.cgi 
> to be specific.

It's an (import problem) issue with cgi code; it won't import on
Windows. The parts you care about in web2 should work just fine on
Windows once that is fixed and it can actually be imported :)




From michael.kerrin at openapp.biz  Mon Oct 10 14:25:54 2005
From: michael.kerrin at openapp.biz (Michael Kerrin)
Date: Mon, 10 Oct 2005 18:25:54 +0000
Subject: [Twisted-Python] twisted.web2 on Windows
In-Reply-To: <1128963923.9046.14.camel@localhost.localdomain>
References: <200510101723.37287.michael.kerrin@openapp.biz>
	<1128963923.9046.14.camel@localhost.localdomain>
Message-ID: <200510101825.55496.michael.kerrin@openapp.biz>

On Monday 10 October 2005 17:05, Itamar Shtull-Trauring wrote:
> On Mon, 2005-10-10 at 17:23 +0000, Michael Kerrin wrote:
> >   So I am wondering is there any thing I should be aware off, or is this
> > problem I am seeing just a once off, i.e. a bug in
> > twisted.web2.channel.cgi to be specific.
>
> It's an (import problem) issue with cgi code; it won't import on
> Windows. The parts you care about in web2 should work just fine on
> Windows once that is fixed and it can actually be imported :)

I thought that much, but it is good hearing it from you :-)

With no Windows machine at the moment to test it on I just got a bit scared 
there.

Thanks

Michael



From mary-twisted at puzzling.org  Mon Oct 10 20:43:05 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Tue, 11 Oct 2005 10:43:05 +1000
Subject: [Twisted-Python] Success of virtual sprint
Message-ID: <20051011004305.GJ21420@home.puzzling.org>

I'd like to thank everyone who sprinted or helped out sprinters on IRC
this weekend. 102 separate commits were made to Twisted SVN over the
weekend, much more than a typical weekend ;) Oh yeah, and there was a
lot of work on the 2.1 release of Twisted Core too...

When I first discussed the vsprint idea with Chris Armstrong at the
Sydney Sprint in August, our plan was to have vsprints on a weekend
every 3 or 4 months. Another possibility might be to have smaller
sprints on particular topics more often: I may try this out with a
documentation sprint in a few months, other people might like to try it
with other projects.

Thanks for playing,

Mary

-- 
<_joshua> perhaps we could have some sort of sacrificial goat technology where people decide collectively that someone absolutely must get laid
<tangra> for the good of the state
<tangra> kind of like the draft lottery



From radeex at gmail.com  Mon Oct 10 21:03:52 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Tue, 11 Oct 2005 12:03:52 +1100
Subject: [Twisted-Python] Re: [Twisted-web] Success of virtual sprint
In-Reply-To: <20051011004305.GJ21420@home.puzzling.org>
References: <20051011004305.GJ21420@home.puzzling.org>
Message-ID: <60ed19d40510101803s19510cd1k381099932c3accc6@mail.gmail.com>

On 10/11/05, Mary Gardiner <mary-twisted at puzzling.org> wrote:
> When I first discussed the vsprint idea with Chris Armstrong at the
> Sydney Sprint in August, our plan was to have vsprints on a weekend
> every 3 or 4 months. Another possibility might be to have smaller
> sprints on particular topics more often: I may try this out with a
> documentation sprint in a few months, other people might like to try it
> with other projects.

Also, it would be cool to have a release sprint every 2-3 months. The
topic would be "fix Urgent bugs" ;-)

> Thanks for playing,

Hooray Twisted!

--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+



From exarkun at divmod.com  Mon Oct 10 23:18:18 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Mon, 10 Oct 2005 23:18:18 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r14809 - Don't import fdesc
 until needed since it doesn't exist on Windows.
In-Reply-To: <E1EP7K1-0004eP-00@wolfwood>
Message-ID: <20051011031818.3914.2084506211.divmod.quotient.26607@ohm>

On Mon, 10 Oct 2005 17:44:45 -0600, James Knight <foom at wolfwood.twistedmatrix.com> wrote:
>Author: foom
>Date: Mon Oct 10 17:44:45 2005
>New Revision: 14809
>
>Modified:
>   trunk/twisted/web2/channel/cgi.py
>Log:
>Don't import fdesc until needed since it doesn't exist on Windows.
>
>
>Modified: trunk/twisted/web2/channel/cgi.py
>==============================================================================
>--- trunk/twisted/web2/channel/cgi.py	(original)
>+++ trunk/twisted/web2/channel/cgi.py	Mon Oct 10 17:44:45 2005
>@@ -6,7 +6,7 @@
> import urllib
>
> # Move this to twisted core soonish
>-from twisted.internet import process, error, interfaces, fdesc
>+from twisted.internet import process, error, interfaces
> from twisted.python import log, failure
> from zope.interface import implements
>
>@@ -17,6 +17,8 @@
>     disconnected = False
>
>     def __init__(self, proto, stdin=0, stdout=1):
>+        import fdesc
>+
>         self.protocol = proto
>
>         fdesc.setNonBlocking(stdin)

No relative imports, please.

>
>_______________________________________________
>Twisted-commits mailing list
>Twisted-commits at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-commits
>



From glyph at divmod.com  Mon Oct 10 23:50:45 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 10 Oct 2005 23:50:45 -0400
Subject: [Twisted-Python] Re: [Twisted-web] Success of virtual sprint
In-Reply-To: <20051011004305.GJ21420@home.puzzling.org>
Message-ID: <20051011035045.3914.1295235629.divmod.quotient.26615@ohm>



On Tue, 11 Oct 2005 10:43:05 +1000, Mary Gardiner <mary-twisted at puzzling.org> wrote:

>Thanks for playing,

Thanks for getting this together!  I didn't get to do any committing myself, but  the sprint was a good motivator to get involved in some serious discussions and generally get back up to speed on what's going on in Twisted in general.

Let's do more of these!



From jml at mumak.net  Tue Oct 11 00:31:30 2005
From: jml at mumak.net (Jonathan Lange)
Date: Tue, 11 Oct 2005 15:31:30 +1100
Subject: [Twisted-Python] Python 2.2 Support
Message-ID: <d06a5cd30510102131t58144c60g@mail.gmail.com>

Should we drop Python 2.2 support in Subversion head for Twisted 2.2?

- Debian stable now comes with Python 2.3
- Twisted 2.1 has been released with Python 2.2 support

Dropping Python 2.2 support has some good consequences:
- We get to delete code
- An entire class of bugs gets eliminated
- Disc space can be freed on the muon buildslave

Some bad consequences:
- People wanting to run Twisted 2.2 (or svn) on ancient versions of
Python won't be able to.


cheers,
jml



From mary-twisted at puzzling.org  Tue Oct 11 00:39:12 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Tue, 11 Oct 2005 14:39:12 +1000
Subject: [Twisted-Python] Python 2.2 Support
In-Reply-To: <d06a5cd30510102131t58144c60g@mail.gmail.com>
References: <d06a5cd30510102131t58144c60g@mail.gmail.com>
Message-ID: <20051011043912.GN21420@home.puzzling.org>

So, the previous version of this thread came up with:

On Tue, Oct 11, 2005, Jonathan Lange wrote:
> Should we drop Python 2.2 support in Subversion head for Twisted 2.2?
> 
> - Debian stable now comes with Python 2.3
> - Twisted 2.1 has been released with Python 2.2 support
  - the most commonly used version of Red Hat Enterprise still has
    Python 2.3

Therefore:

> Some bad consequences:
> - People wanting to run Twisted 2.2 (or svn) on ancient versions of
> Python won't be able to.
  - in particular, people wanting to run Twisted 2.2 on RHE will need
    to upgrade to the very latest, less widely used, version

-Mary

-- 
<radix> So, I guess the reason you chose ftp as a discovery protocol is
because it's a semi-ubiquitous anonymous protocol that allows people to
communicate?
<edsuom> No, because I was stupid



From jml at mumak.net  Tue Oct 11 00:43:06 2005
From: jml at mumak.net (Jonathan Lange)
Date: Tue, 11 Oct 2005 15:43:06 +1100
Subject: [Twisted-Python] Python 2.2 Support
In-Reply-To: <20051011043912.GN21420@home.puzzling.org>
References: <d06a5cd30510102131t58144c60g@mail.gmail.com>
	<20051011043912.GN21420@home.puzzling.org>
Message-ID: <d06a5cd30510102143g7f255240u@mail.gmail.com>

On 11/10/05, Mary Gardiner <mary-twisted at puzzling.org> wrote:
> So, the previous version of this thread came up with:
>
> On Tue, Oct 11, 2005, Jonathan Lange wrote:
> > Should we drop Python 2.2 support in Subversion head for Twisted 2.2?
> >
> > - Debian stable now comes with Python 2.3
> > - Twisted 2.1 has been released with Python 2.2 support
>   - the most commonly used version of Red Hat Enterprise still has
>     Python 2.3

You mean Python 2.2, right?



From radeex at gmail.com  Tue Oct 11 00:44:42 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Tue, 11 Oct 2005 15:44:42 +1100
Subject: [Twisted-Python] Python 2.2 Support
In-Reply-To: <d06a5cd30510102131t58144c60g@mail.gmail.com>
References: <d06a5cd30510102131t58144c60g@mail.gmail.com>
Message-ID: <60ed19d40510102144p493226f4v758ace3f0f31d82d@mail.gmail.com>

On 10/11/05, Jonathan Lange <jml at mumak.net> wrote:
> Should we drop Python 2.2 support in Subversion head for Twisted 2.2?

We should drop Python 2.2 support in Subversion head for Twisted 2.2.

--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+



From radeex at gmail.com  Tue Oct 11 00:46:44 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Tue, 11 Oct 2005 15:46:44 +1100
Subject: [Twisted-Python] Python 2.2 Support
In-Reply-To: <20051011043912.GN21420@home.puzzling.org>
References: <d06a5cd30510102131t58144c60g@mail.gmail.com>
	<20051011043912.GN21420@home.puzzling.org>
Message-ID: <60ed19d40510102146w387e2333xccc872611c58df08@mail.gmail.com>

On 10/11/05, Mary Gardiner <mary-twisted at puzzling.org> wrote:
> On Tue, Oct 11, 2005, Jonathan Lange wrote:
> > Should we drop Python 2.2 support in Subversion head for Twisted 2.2?
> >
> > - Debian stable now comes with Python 2.3
> > - Twisted 2.1 has been released with Python 2.2 support
>   - the most commonly used version of Red Hat Enterprise still has
>     Python 2.3
>
> Therefore:
>
> > Some bad consequences:
> > - People wanting to run Twisted 2.2 (or svn) on ancient versions of
> > Python won't be able to.
>   - in particular, people wanting to run Twisted 2.2 on RHE will need
>     to upgrade to the very latest, less widely used, version
>
> -Mary

Huh? If RHE has Python 2.3 (as you say above), then they should still
be able to run Twisted 2.2. We're talking about dropping Python 2.2
support, not Python 2.3.

--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+



From mary-twisted at puzzling.org  Tue Oct 11 00:48:25 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Tue, 11 Oct 2005 14:48:25 +1000
Subject: [Twisted-Python] Python 2.2 Support
In-Reply-To: <d06a5cd30510102143g7f255240u@mail.gmail.com>
References: <d06a5cd30510102131t58144c60g@mail.gmail.com>
	<20051011043912.GN21420@home.puzzling.org>
	<d06a5cd30510102143g7f255240u@mail.gmail.com>
Message-ID: <20051011044825.GO21420@home.puzzling.org>

On Tue, Oct 11, 2005, Jonathan Lange wrote:
> On 11/10/05, Mary Gardiner <mary-twisted at puzzling.org> wrote:
> > So, the previous version of this thread came up with:
> >
> > On Tue, Oct 11, 2005, Jonathan Lange wrote:
> > > Should we drop Python 2.2 support in Subversion head for Twisted 2.2?
> > >
> > > - Debian stable now comes with Python 2.3
> > > - Twisted 2.1 has been released with Python 2.2 support
> >   - the most commonly used version of Red Hat Enterprise still has
> >     Python 2.3
> 
> You mean Python 2.2, right?

Yes. In particular, I believe a *supported* version still has it.

-Mary

-- 
<dash> careful with that syntax, eugene



From jml at mumak.net  Tue Oct 11 01:00:27 2005
From: jml at mumak.net (Jonathan Lange)
Date: Tue, 11 Oct 2005 16:00:27 +1100
Subject: [Twisted-Python] Python 2.2 Support
In-Reply-To: <60ed19d40510102144p493226f4v758ace3f0f31d82d@mail.gmail.com>
References: <d06a5cd30510102131t58144c60g@mail.gmail.com>
	<60ed19d40510102144p493226f4v758ace3f0f31d82d@mail.gmail.com>
Message-ID: <d06a5cd30510102200x3e2f25e1x@mail.gmail.com>

On 11/10/05, Christopher Armstrong <radeex at gmail.com> wrote:
> On 10/11/05, Jonathan Lange <jml at mumak.net> wrote:
> > Should we drop Python 2.2 support in Subversion head for Twisted 2.2?
>
> We should drop Python 2.2 support in Subversion head for Twisted 2.2.
>

I guess this become official once the 2.2 buildbot disappears.



From mary-twisted at puzzling.org  Tue Oct 11 01:59:59 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Tue, 11 Oct 2005 15:59:59 +1000
Subject: [Twisted-Python] Python 2.2 Support
In-Reply-To: <60ed19d40510102146w387e2333xccc872611c58df08@mail.gmail.com>
References: <d06a5cd30510102131t58144c60g@mail.gmail.com>
	<20051011043912.GN21420@home.puzzling.org>
	<60ed19d40510102146w387e2333xccc872611c58df08@mail.gmail.com>
Message-ID: <20051011055959.GQ21420@home.puzzling.org>

On Tue, Oct 11, 2005, Christopher Armstrong wrote:
> Huh? If RHE has Python 2.3 (as you say above), then they should still
> be able to run Twisted 2.2. We're talking about dropping Python 2.2
> support, not Python 2.3.

That was a typo, I meant 2.2. What I intended to say was that the
previous "dropping 2.2 support" discussion revealed that RHE 3, which is
still supported, has Python *2.2*:

http://twistedmatrix.com/pipermail/twisted-python/2005-September/011383.html

Red Hat is not stopping full support of RHE 3 until April 30, 2006:
http://www.redhat.com/security/updates/errata/

I'm not saying this because I personally have any barrow to push re RHE
or Python 2.2 (I use latest Ubuntu) or even any personal opinion, just
to remind everyone of a potentially relevant point from a previous
thread on the same topic.

-Mary



From rik.wade at gmail.com  Tue Oct 11 05:21:37 2005
From: rik.wade at gmail.com (Rik Wade)
Date: Tue, 11 Oct 2005 22:21:37 +1300
Subject: [Twisted-Python] Update on cheese shop
In-Reply-To: <434A6336.4020005@gmail.com>
References: <434A6336.4020005@gmail.com>
Message-ID: <e29b91160510110221p3d144efcub2d74226682e7992@mail.gmail.com>

On 10/11/05, David Guaraglia <dguaraglia at gmail.com> wrote:
>
>
> Is anyone going to do an update on the cheese shop anytime soon? Trying
> to install Twisted 2.10, I ended up installing 1.30, as the installation
> download page listed in the Cheese Shop has just downloads of that
> version.
>
> I saw Itamarst is the owner there.


I mailed Itamarst a few days ago about the same topic. I would also like to
install the latest version using package management.

Secondly, I don't suppose anyone has an update on the status of the WebDAV
component for web2?

Many thanks
--
rik
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20051011/f1e04f10/attachment.htm 

From antonykummel at yahoo.com  Tue Oct 11 07:25:25 2005
From: antonykummel at yahoo.com (Antony Kummel)
Date: Tue, 11 Oct 2005 04:25:25 -0700 (PDT)
Subject: [Twisted-Python] Shutdown in Windows
Message-ID: <20051011112525.80370.qmail@web33904.mail.mud.yahoo.com>

Hi,

Does anyone know how to cleanly shut down a Twisted
application from the outside (i.e. from a different
process, via the OS) in Windows? So far, only
brute-force killing worked for me, which isn't
particularly clean.

Thanks,

Antony Kummel


	
		
__________________________________ 
Yahoo! Mail - PC Magazine Editors' Choice 2005 
http://mail.yahoo.com



From Henning.Ramm at mediapro-gmbh.de  Tue Oct 11 07:40:00 2005
From: Henning.Ramm at mediapro-gmbh.de (Henning.Ramm at mediapro-gmbh.de)
Date: Tue, 11 Oct 2005 13:40:00 +0200
Subject: [Twisted-Python] problem enhancing conch sample
Message-ID: <F92274058556DE42B94B148EEFB91839021CB5AD@exchange-03.suedkurier.de>

Hello again!

Last time I had the same problem with a telnet client; I dropped the code to start again with the conch ssh sample. I'm trying to find a way to execute more than one command, but I seem to mistunderstand something fundamental, at least the server closes the connection always after the first command.

This is my code, derived closely (and a bit simplified) from the example:

#!/usr/bin/env python
from twisted.conch.ssh import transport, userauth, connection, common, keys, channel
from twisted.internet import defer, protocol, reactor
from twisted.python import log
import struct, sys, getpass, os

USER = 'me'  # replace this with a valid username
PASS = 'mypass' # password
HOST = 'localhost' # and a valid host

class SimpleTransport(transport.SSHClientTransport):
    def verifyHostKey(self, hostKey, fingerprint):
        # print 'host key fingerprint: %s' % fingerprint
        return defer.succeed(1)

    def connectionSecure(self):
        self.requestService(
            SimpleUserAuth(USER,
                SimpleConnection()))

class SimpleUserAuth(userauth.SSHUserAuthClient):
    def getPassword(self):
        return defer.succeed(PASS)

    def getGenericAnswers(self, name, instruction, questions):
        print name
        print instruction
        answers = []
        for prompt, echo in questions:
            if echo:
                answer = raw_input(prompt)
            else:
                answer = getpass.getpass(prompt)
            answers.append(answer)
        return defer.succeed(answers)

    def getPublicKey(self):
	  return None

    def getPrivateKey(self):
	  return None

class SimpleConnection(connection.SSHConnection):
    def serviceStarted(self):
        self.openChannel(CatChannel(2**16, 2**15, self))

class CatChannel(channel.SSHChannel):
    name = 'session'
    cmd = 'pwd'
    commands = ['pwd','cd /','ls -al','exit']
    pointer = 0

    def openFailed(self, reason):
        print 'echo failed', reason

    def channelOpen(self, ignoredData):
        self.data = ''
        reactor.callLater(0, self.sendNextRequest)

    def sendNextRequest(self):
        cmd = self.commands[self.pointer]
        print cmd
        d = self.conn.sendRequest(self, 'exec', common.NS(cmd), wantReply = 1)
        d.addCallback(self._cbRequest)
        d.addErrback(log.msg)

    def _cbRequest(self, ignored):
        self.write('hello conch\n') # any sense?
        self.pointer += 1
        if self.commands[self.pointer] == 'exit':
            self.conn.sendEOF(self)
        else:
            reactor.callLater(0, self.sendNextRequest)

    def dataReceived(self, data):
        self.data += data

    def closed(self):
        print 'got data: %s' % repr(self.data)
        self.loseConnection()
        reactor.stop()

def twisted_logger(logdict):
    text = " ".join([str(m) for m in logdict["message"]])
    prompt = '.>'
    if logdict['isError'] or 'error' in text.lower():
        prompt = "!>"
    print prompt, text

log.addObserver(twisted_logger)
protocol.ClientCreator(reactor, SimpleTransport).connectTCP(HOST, 22)
reactor.run()



Sorry if you already tried to help me last time, seems like I didn't get it...

Best regards,
Henning Hraban Ramm
S?dkurier Medienhaus / MediaPro
Support/Admin/Development Dept.




From Henning.Ramm at mediapro-gmbh.de  Tue Oct 11 07:45:54 2005
From: Henning.Ramm at mediapro-gmbh.de (Henning.Ramm at mediapro-gmbh.de)
Date: Tue, 11 Oct 2005 13:45:54 +0200
Subject: [Twisted-Python] Shutdown in Windows
Message-ID: <F92274058556DE42B94B148EEFB91839021CB5AE@exchange-03.suedkurier.de>

>Does anyone know how to cleanly shut down a Twisted
>application from the outside (i.e. from a different
>process, via the OS) in Windows? So far, only
>brute-force killing worked for me, which isn't
>particularly clean.

Probably not really a help for you:
My apps use a 'appname.lock' file (no real lock, I'm on Windows, too, but only a "I'm running" sign containing their PID) and look for a 'appname.stop' file in the same dir, so my other apps can check the 'locks' if the PID is still running and can write a 'stop' file that causes the appropriate app to end itself. That is easy enough to work even with simple Batches...

Best regards,
Henning Hraban Ramm
S?dkurier Medienhaus / MediaPro
Support/Admin/Development Dept.



From antonykummel at yahoo.com  Tue Oct 11 07:56:55 2005
From: antonykummel at yahoo.com (Antony Kummel)
Date: Tue, 11 Oct 2005 04:56:55 -0700 (PDT)
Subject: [Twisted-Python] Shutdown in Windows
In-Reply-To: <F92274058556DE42B94B148EEFB91839021CB5AE@exchange-03.suedkurier.de>
Message-ID: <20051011115655.26261.qmail@web33911.mail.mud.yahoo.com>

Okay, but how about shutting down cleanly when the
computer is shut down?

--- Henning.Ramm at mediapro-gmbh.de wrote:

> >Does anyone know how to cleanly shut down a Twisted
> >application from the outside (i.e. from a different
> >process, via the OS) in Windows? So far, only
> >brute-force killing worked for me, which isn't
> >particularly clean.
> 
> Probably not really a help for you:
> My apps use a 'appname.lock' file (no real lock, I'm
> on Windows, too, but only a "I'm running" sign
> containing their PID) and look for a 'appname.stop'
> file in the same dir, so my other apps can check the
> 'locks' if the PID is still running and can write a
> 'stop' file that causes the appropriate app to end
> itself. That is easy enough to work even with simple
> Batches...
> 
> Best regards,
> Henning Hraban Ramm
> S?dkurier Medienhaus / MediaPro
> Support/Admin/Development Dept.
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
>
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 



	
		
__________________________________ 
Yahoo! Mail - PC Magazine Editors' Choice 2005 
http://mail.yahoo.com



From Henning.Ramm at mediapro-gmbh.de  Tue Oct 11 08:11:14 2005
From: Henning.Ramm at mediapro-gmbh.de (Henning.Ramm at mediapro-gmbh.de)
Date: Tue, 11 Oct 2005 14:11:14 +0200
Subject: [Twisted-Python] Shutdown in Windows
Message-ID: <F92274058556DE42B94B148EEFB91839021CB5B0@exchange-03.suedkurier.de>

>Okay, but how about shutting down cleanly when the
>computer is shut down?

Hm, my apps do that without me writing something special, I guess python cares for shutdown; I only hooked some cleanup stuff (e.g. reactor.stop) into my app class's __del__ method.
(I don't use twistd or any 'foreign' app class.)

Best regards,
Henning Hraban Ramm
S?dkurier Medienhaus / MediaPro
Support/Admin/Development Dept.



From itamar at itamarst.org  Tue Oct 11 11:41:45 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 11 Oct 2005 11:41:45 -0400
Subject: [Twisted-Python] Update on cheese shop
In-Reply-To: <e29b91160510110221p3d144efcub2d74226682e7992@mail.gmail.com>
References: <434A6336.4020005@gmail.com>
	<e29b91160510110221p3d144efcub2d74226682e7992@mail.gmail.com>
Message-ID: <1129045306.8844.8.camel@localhost.localdomain>

On Tue, 2005-10-11 at 22:21 +1300, Rik Wade wrote:

> I mailed Itamarst a few days ago about the same topic. I would also
> like to install the latest version using package management.

I uploaded it just now. Note though that we don't have packages in there
for all the Twisted subprojects (mail, web, etc..)





From z3p at twistedmatrix.com  Tue Oct 11 12:17:17 2005
From: z3p at twistedmatrix.com (Paul Swartz)
Date: Tue, 11 Oct 2005 12:17:17 -0400
Subject: [Twisted-Python] problem enhancing conch sample
In-Reply-To: <F92274058556DE42B94B148EEFB91839021CB5AD@exchange-03.suedkurier.de>
References: <F92274058556DE42B94B148EEFB91839021CB5AD@exchange-03.suedkurier.de>
Message-ID: <434BE58D.3040905@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Henning.Ramm at mediapro-gmbh.de wrote:
>         else:
>             reactor.callLater(0, self.sendNextRequest)

This is your problem.  Each channel can only be only command, executed
one time.  If you need to run a second command, you need to open a new
channel.

hth,
- -p
- --
       Paul Swartz
(o_    http://www.twistedmatrix.com/users/z3p.twistd/  _o)
//\    z3p at twistedmatrix.com                           /\\
V_/_   AIM: z3penguin                                 _\_V->
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.1 (GNU/Linux)

iD8DBQFDS+UCn20RAFzwsckRApXGAJ9/3QvTlGSqqcbwG4NgfG9xjAnTyQCffX0E
RLK3xOWeKd/LofIr1HWGT9c=
=uc5i
-----END PGP SIGNATURE-----



From foom at fuhm.net  Tue Oct 11 14:17:31 2005
From: foom at fuhm.net (James Y Knight)
Date: Tue, 11 Oct 2005 14:17:31 -0400
Subject: [Twisted-Python] Subproject releases
Message-ID: <446737B7-AA24-47AB-B64F-96C1D6D424B7@fuhm.net>

So, srichter has asked for a branch from which he can get a stable  
(bugfix only, no API changes) twisted and web2. It is not obvious how  
this would be done currently. We have, right now, a /branches/ 
releases/2.1.x branch, for stable releases of twisted core.

When I make a release of twisted.web2, I initially thought I'd give  
it a branch off of trunk as of now, say, branches/releases/ 
web2-0.2.x. However, that makes it difficult to externally track both  
the stable web2 release and the stable core release, as you need to  
grab parts of both that branch and the 2.1.x branch and mix them  
together.

This sort of points towards it being a nice idea if the repo was  
reorganized such that each project was in its own directory  
hierarchy, as then it would be much easier to mix-n-match different  
branches of different projects. But I'm not going to go there, again,  
right now. I still think it could be a good idea but it was discussed  
before and rejected. Instead, I want to suggest that subproject  
releases also be made off of the 2.1.x branch.

This has a few upsides: 1) easier for external parties to track, 2)  
easier for *us* to track, in our stable-branch buildbot master (BTW,  
warner, can we get one of those?).

The downsides that I can see: 1) before the first release of a  
subproject after a release of core, its part of that branch will be  
some random trunk version (however, it should at least be passing  
tests, so it's not *too* tragic) 2) when making an initial subproject  
release, you may need to apply a relatively large diff to the 2.1.x  
branch to sync it with trunk.

Please discuss. :) In the meantime, I'm going to be doing web2 off of  
2.1.x this way. If we ultimately decide that's a bad idea and to do  
it a different way I will happily change and revert the changes to  
the 2.1.x branch.

James




From itamar at itamarst.org  Tue Oct 11 14:22:58 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 11 Oct 2005 14:22:58 -0400
Subject: [Twisted-Python] Reminder: PyCon 2006 Call for Proposals
Message-ID: <1129054978.8844.15.camel@localhost.localdomain>

PyCon 2006 Call for Proposals
--------------------------------------------

Want to share your expertise? PyCon 2006 is looking for proposals to
fill the formal presentation tracks.  PyCon 2006 will be held
February 24-26 2006 in Addison, Texas (near Dallas).

Previous PyCons have had a broad range of presentations, from reports
on academic and commercial projects to tutorials and case studies, and
we hope to continue that tradition this year.  As long as the
presentation is interesting and potentially useful to the Python
community, it will be considered for inclusion in the program.

For 2006, we're especially interested in tutorial presentations
that will teach conference-goers something new and useful.  Can you
show attendees how to: use a module?  explore a Python language
feature?  package an application?  


Important Dates
======================

 * Submission deadline: October 31, 2005 
 * Acceptance deadline: November 15, 2005 
 * Electronic copy deadline: February 15, 2006


PyCon Topics
=======================

Suitable topics for PyCon presentations include, but are not limited
to:

 * Core Python
 * Other implementations: Jython, IronPython, PyPy, and Stackless
 * Python libraries and extensions
 * Databases
 * Documentation
 * GUI Programming
 * Game Programming
 * Network Programming
 * Open Source Python projects
 * Packaging Issues
 * Programming Tools
 * Project Best Practices
 * Embedding and Extending
 * Science and Math
 * Web-based Systems


Submission Format
================================

Proposals should be 250 to 1000 words long (i.e., one to four pages in
manuscript format), containing the following information:

 * Author name(s)
 * Contact Information
 * Requested timeslot (30 minutes, 45 minutes, or either)
 * Summary of proposed presentation
 * Presentation outline
 * Intended audience (non-programmers, beginning programmers, advanced users, 
   CPython developers, etc.)

ASCII format is preferred (plain or reST), with HTML as a secondary
alternative. If you have any queries about submission, or if you would
like to discuss the possibility of submitting in a different format or
style, please send mail to the conference organizers at
pycon at python.org.

Session lengths include time for audience questions.  You should
budget at least five minutes for questions; for example, a 30-minute
talk will be 25 minutes of presentation and 5 minutes of questions.  

The preferred length for talks is 30 minutes.  You can request a
45-minute slot, but proposals requiring 45 minutes will be reviewed
more stringently and tutorial talks will be preferred for these longer
slots.


Submission Mechanics
===============================

Use the PyCon Online Proposal Submission <http://submit.python.org> to
send us your proposals and ideas. If your proposal is accepted, you
have the option of including a companion paper along with your
presentation. The paper will get published on the PyCon web site.

Presentations and papers may be in text (plain or reST), HTML, or PDF;
HTML or text are preferred.

We suggest, but do not require, that authors place their papers under
a Creative Commons license. Please visit the CC 'Choose a License'
page to select a license that meets your requirements. 

A Wiki page has suggestions and advice for speakers:
http://wiki.python.org/moin/PyCon2006/SpeakerNotes


Other Presentations
===========================

If you don't want to make a formal presentation, you can still bring
your new project or idea to PyCon.

There will be several Lightning Talk sessions for talks no longer than
five minutes.

There will be a significant amount of Open Space for informal and
spur-of-the-moment presentations.  Open Space consists of
thirty-minute blocks that are allocated during PyCon. These blocks can
be used for presentations, round table discussions, hands-on
tutorials, or anything else. Typically, people propose ideas for the
sessions which are then voted on by attendees.




From gmcdonald at infocomp.com  Tue Oct 11 22:08:49 2005
From: gmcdonald at infocomp.com (Grant McDonald)
Date: Wed, 12 Oct 2005 12:08:49 +1000
Subject: [Twisted-Python] Twisted and SVN
Message-ID: <61DA7719C45FD31185280008C733EF6E04AC4FC3@XCHANGE>

Hi All,

I know this isn't really the forum for talking about subversion, but Twisted
as we all know is a rather large distributed development effort and it uses
SVN.  There is currently a debate going on in my company about the benefits
of subversion over cvs and if I may I'd like to tap your knowledge about the
pitfalls and benefit of subversion use (if any) that you've come across in
your usage of the product. Do you see it as a far better solution than CVS?
Has twisted always used SVN or was it once burdened with CVS? Thanks in
advance for your input.

Kind regards,

Grant M.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20051012/abc87bf7/attachment.htm 

From exarkun at divmod.com  Wed Oct 12 00:18:08 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Wed, 12 Oct 2005 00:18:08 -0400
Subject: [Twisted-Python] Update on cheese shop
In-Reply-To: <1129045306.8844.8.camel@localhost.localdomain>
Message-ID: <20051012041808.3914.252786349.divmod.quotient.27169@ohm>

On Tue, 11 Oct 2005 11:41:45 -0400, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
>On Tue, 2005-10-11 at 22:21 +1300, Rik Wade wrote:
>
>> I mailed Itamarst a few days ago about the same topic. I would also
>> like to install the latest version using package management.
>
>I uploaded it just now. Note though that we don't have packages in there
>for all the Twisted subprojects (mail, web, etc..)
>

I'll be doing words, mail, names, and probably conch releases next week.  I'll add cheese shop packages for those at that point.

Jp



From glyph at divmod.com  Wed Oct 12 01:49:38 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Wed, 12 Oct 2005 01:49:38 -0400
Subject: [Twisted-Python] Subproject releases
In-Reply-To: <446737B7-AA24-47AB-B64F-96C1D6D424B7@fuhm.net>
Message-ID: <20051012054938.3914.543518999.divmod.quotient.27213@ohm>



On Tue, 11 Oct 2005 14:17:31 -0400, James Y Knight <foom at fuhm.net> wrote:

>This sort of points towards it being a nice idea if the repo was 
>reorganized such that each project was in its own directory  hierarchy, as 
>then it would be much easier to mix-n-match different  branches of different 
>projects. But I'm not going to go there, again,  right now. I still think it 
>could be a good idea but it was discussed  before and rejected.

I remember participating in this initial discussion.

I remember taking some side in it, and arguing strongly for that side.

I'm not sure which one it was, so if I'm responsible for rejecting it I've changed my mind, but if I was arguing in favor of it I'm now even more vociferous :).

The Divmod repository is now organized this way, and we have a tool (Combinator) which keeps PYTHONPATH from exploding into a million pieces that kill you.  For an example of this repository structure see <http://divmod.org/trac/browser/trunk>.

I think that it would be a very good idea to re-organize the Twisted repository this way, especially given the path semantics of the new plugin mechanism.  It is difficult to sanely decide which project plugins for another project ought to be distributed with at this point, and as we move towards more usage of plugins rather than direct imports for integration, this problem is only going to get worse.

I would suggest trunk/TwistedWords trunk/TwistedCore trunk/TwistedNames (etc etc).  Cherry-picked branches would still be a little bit of work to construct, but a reasonable amount (and appropriate local checkout structure could probably also approximate them).

I realize that this has the potential to be a pretty disruptive change.  I'm open to suggestions on when would be a good time, and I have no plans to push hard to get this to happen any time soon.  I do think it would be a good idea eventually, though.



From foom at fuhm.net  Wed Oct 12 02:02:59 2005
From: foom at fuhm.net (James Y Knight)
Date: Wed, 12 Oct 2005 00:02:59 -0600
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <E1EPZhb-0003OW-00@pyramid.twistedmatrix.com>

Bug summary
______________________
Since 2005-10-05 06:00:02.400000:
 Bugs opened: 27   Bugs closed: 23   Total open bugs: 475 (+4)
  Urgent: 5 (-3)
  Bug: 229 (+5)
  Feature: 164 (+3)
  Wish: 77 (-1)

New / Reopened Bugs
______________________
                    ==== Urgent ====
[WEB, WIN32] twisted.web2 problems on Windows.  (yesterday)
CLOSED http://twistedmatrix.com/bugs/issue1270 opened by mkerrin

[BACKPORT, CORE, TRIAL] trial won't run nevow's unit tests  (yesterday)
CLOSED http://twistedmatrix.com/bugs/issue1271 opened by glyph

[TRIAL] trial tests don't work in an installed twisted core 2.1  (2 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1265 opened by marienz

[CORE, TRIAL] trial excludes explicitly specified test modules  (2 days ago)
       http://twistedmatrix.com/bugs/issue1266 opened by exarkun

[CORE, TRIAL] trial --until-failure is broken  (3 days ago)
       http://twistedmatrix.com/bugs/issue1263 opened by exarkun

[FTP] FTP log.err problem  (3 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1258 opened by mkerrin

[CORE] Include new zope.interface in sumo (so we get the gcc4 compilation fix)  (3 days ago)
       http://twistedmatrix.com/bugs/issue1259 opened by itamarst

lore index links are broken for nested guide directories (e.g. tutorial)  (3 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1257 opened by radix

                    ==== Bug ====
twisted/doc/web2/examples/demo.py is broken (simple fix)  (1 1/4 hours ago)
       http://twistedmatrix.com/bugs/issue1273 opened by tgreenwo

[CORE, TESTS] twisted.vfs.test.test_ftp is enough to drive a sane man mad  (2 days ago)
       http://twistedmatrix.com/bugs/issue1264 opened by exarkun

selectreactor's addReader unexpectedly assumes a logPrefix attr  (yesterday)
       http://twistedmatrix.com/bugs/issue1272 opened by marienz

[CORE, TRIAL] Intermittent test_output failure  (yesterday)
CLOSED http://twistedmatrix.com/bugs/issue1269 opened by exarkun

[DOCUMENTATION] Document Twisted copyright policy  (3 days ago)
       http://twistedmatrix.com/bugs/issue1262 opened by hypatia

[SECURITY] Threads improperly retain initial privileges  (4 days ago)
       http://twistedmatrix.com/bugs/issue1251 opened by exarkun

win32eventreactor goes crazy at 64 connections  (3 days ago)
       http://twistedmatrix.com/bugs/issue1260 opened by ghazel

[LORE] Lore does not support the troff Ic markup  (3 days ago)
       http://twistedmatrix.com/bugs/issue1256 opened by hypatia

[DOCUMENTATION] Update copyrights in the man pages  (4 days ago)
       http://twistedmatrix.com/bugs/issue1255 opened by hypatia

[DOCUMENTATION] Create index.xhtml files for non-core doc trees  (4 days ago)
       http://twistedmatrix.com/bugs/issue1253 opened by hypatia

xmlgettext must combine identical msgid's  (5 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1249 opened by Tv

win32serialport.py initialisation  (5 days ago)
       http://twistedmatrix.com/bugs/issue1248 opened by Toby Dickenson

kqreactor timeout error (traceback)  (6 days ago)
       http://twistedmatrix.com/bugs/issue1247 opened by ghazel

                    ==== Feature ====
trial shouldn't print PendingTimedCallsError when the test fails  (2 days ago)
       http://twistedmatrix.com/bugs/issue1268 opened by jknight

results of test runs of various mixed versions  (2 days ago)
       http://twistedmatrix.com/bugs/issue1267 opened by marienz

[LORE] Lore's bookify has minimal error handling  (4 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1254 opened by hypatia

Remove obselete branches from Twisted/branches  (4 days ago)
       http://twistedmatrix.com/bugs/issue1252 opened by hypatia

Replace icky socket loopback waker with event based waker  (4 days ago)
       http://twistedmatrix.com/bugs/issue1250 opened by Toby Dickenson

                    ==== Wish ====
[DEFERRED, DOCUMENTATION] Show that one can do other things after adding a callback  (3 days ago)
       http://twistedmatrix.com/bugs/issue1261 opened by hypatia

Bugs Closed
______________________
                    ==== Urgent ====
[WEB, WIN32] twisted.web2 problems on Windows.  (yesterday)
       http://twistedmatrix.com/bugs/issue1270 opened by mkerrin, closed by jknight

[BACKPORT, CORE, TRIAL] trial won't run nevow's unit tests  (yesterday)
       http://twistedmatrix.com/bugs/issue1271 opened by glyph, closed by jml

[TRIAL] trial tests don't work in an installed twisted core 2.1  (2 days ago)
       http://twistedmatrix.com/bugs/issue1265 opened by marienz, closed by marienz

[FTP] FTP log.err problem  (3 days ago)
       http://twistedmatrix.com/bugs/issue1258 opened by mkerrin, closed by mkerrin

[CORE] LineReceiver Producer/Consumer support is broken  (3 months ago)
       http://twistedmatrix.com/bugs/issue1087 opened by exarkun, closed by radix

[CORE] whenThreaded no longer exists in SVN  (7 days ago)
       http://twistedmatrix.com/bugs/issue1242 opened by spiv, closed by radix

[TRIAL] Specify trial reporters using --reporter parameter  (2 weeks ago)
       http://twistedmatrix.com/bugs/issue1210 opened by jml, closed by jml

lore index links are broken for nested guide directories (e.g. tutorial)  (3 days ago)
       http://twistedmatrix.com/bugs/issue1257 opened by radix, closed by radix

[CORE] Move Deferred cancellation code out of trunk  (1 week ago)
       http://twistedmatrix.com/bugs/issue1236 opened by exarkun, closed by radix

                    ==== Bug ====
[CORE, TRIAL] Intermittent test_output failure  (yesterday)
       http://twistedmatrix.com/bugs/issue1269 opened by exarkun, closed by exarkun

[CONCH, TRIAL] twisted.conch.test.test_mixin calls reactor.iterate()  (3 weeks ago)
       http://twistedmatrix.com/bugs/issue1184 opened by exarkun, closed by exarkun

[TRIAL, WEB] twisted.web.test.test_soap calls reactor.iterate()  (3 weeks ago)
       http://twistedmatrix.com/bugs/issue1190 opened by exarkun, closed by exarkun

[TRIAL, WEB] twisted.web.test.test_xmlrpc calls reactor.iterate()  (3 weeks ago)
       http://twistedmatrix.com/bugs/issue1191 opened by exarkun, closed by exarkun

[CORE, DOCUMENTATION] organized-finger.tac references non-existent ServerContextFactory  (4 months ago)
       http://twistedmatrix.com/bugs/issue1058 opened by exarkun, closed by hypatia

[WEBSITE] Link to API docs misleading  (4 months ago)
       http://twistedmatrix.com/bugs/issue1045 opened by osuchw, closed by hypatia

[CONCH, DOCUMENTATION] Missing man page for cftp  (6 months ago)
       http://twistedmatrix.com/bugs/issue939 opened by Tv, closed by hypatia

[DOCUMENTATION, LORE] Missing man page for bookify  (6 months ago)
       http://twistedmatrix.com/bugs/issue940 opened by Tv, closed by hypatia

[DOCUMENTATION] Rename "HOWTOs" to "Developer Guide"  (1 month ago)
       http://twistedmatrix.com/bugs/issue1155 opened by spiv, closed by hypatia

xmlgettext must combine identical msgid's  (5 days ago)
       http://twistedmatrix.com/bugs/issue1249 opened by Tv, closed by mg

                    ==== Feature ====
[WORDS, XISH] client XMPP authenticator  (4 months ago)
       http://twistedmatrix.com/bugs/issue1050 opened by tofu, closed by ralphm

[LORE] Lore's bookify has minimal error handling  (4 days ago)
       http://twistedmatrix.com/bugs/issue1254 opened by hypatia, closed by hypatia

                    ==== Wish ====
[DOCUMENTATION, WEBSITE] Improved twisted website content  (13 months ago)
       http://twistedmatrix.com/bugs/issue697 opened by hypatia, closed by hypatia

[DEFERRED, DOCUMENTATION] Refactor Deferred and Async HOWTOS  (20 months ago)
       http://twistedmatrix.com/bugs/issue504 opened by hypatia, closed by hypatia




From glyph at divmod.com  Wed Oct 12 02:05:18 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Wed, 12 Oct 2005 02:05:18 -0400
Subject: [Twisted-Python] Twisted and SVN
In-Reply-To: <61DA7719C45FD31185280008C733EF6E04AC4FC3@XCHANGE>
Message-ID: <20051012060518.3914.1915234814.divmod.quotient.27221@ohm>


On Wed, 12 Oct 2005 12:08:49 +1000, Grant McDonald <gmcdonald at infocomp.com> wrote:

>I know this isn't really the forum for talking about subversion, but Twisted
>as we all know is a rather large distributed development effort and it uses
>SVN.

It's totally off topic, but I'd be happy to grind an axe on behalf of the SVN developers here!

>There is currently a debate going on in my company about the benefits
>of subversion over cvs and if I may I'd like to tap your knowledge about the
>pitfalls and benefit of subversion use (if any) that you've come across in
>your usage of the product.

One pitfall - you probably want to use the new fsfs backend so you don't run into difficulties with bsddb.  Other than that, I haven't really seen any (except those you would have already seen 100x over with CVS)

>Do you see it as a far better solution than CVS?

YES.

Zooko summarizes it best at <http://zooko.com/revision_control_quick_ref.html>:

   "CVS: use Subversion instead."

There are other version control systems: p4, bk, darcs, bzr, hg, monotone, to name a few.  I personally am not a big fan of any right now (though bzr has quite a lot of promise), but it cannot be denied that there are valid reasons to use each of them depending on your preferred workflow.

CVS, however, is an evolutionary dead end.  The style of workflow it encourages is FAR better implemented in Subversion.  The tools around Subversion are better and better integrated.  Subversion actually has an API, not just some loose conventions and file formats.  The commit hooks are easier to write and more powerful.  There are many more choices for deployment and maintenance which allow you to integrate it into your particular setup.  It has a better security track record.

One fact is well documented by many projects: branching was IMPOSSIBLE with CVS.  Even given the relatively few times branching was attempted in Twisted, I can attest to this truth.  Other VCS users might say that branching's not "easy" with subversion, but it is FAR better than CVS.  Branches would not just be hard to make in CVS, if you were not careful with the way you used the tool, you could break them.

Speaking of breaking things, CVS has a nasty habit of corrupting binary files unless you are very, very careful with them.  SVN detects binary files far more reliably and generally won't corrupt them.  SVN has far better support for partially-disconnected development - diff and revert work while you're offline.

SVN has better GUI integration on Windows (TortoiseSVN).
SVN has better integration with SSH (svn+ssh URLs, not random environment variables which effect how paths are interpreted).
SVN has better integration with Emacs (psvn vs. pcvs)
SVN is faster.
SVN doesn't corrupt your files.
SVN doesn't produce inconsistent checkouts if you forget magic flags (cvs up -dP)

Conclusion: CVS is completely and utterly obsolete.  Don't use it unless you have a huge repository of code already in CVS and no time to migrate it.  There is literally, absolutely no reason I would consider using CVS for a new project, or even consider continuing with CVS for any project that I came into maintainership of.  It served the community well when it was in its prime, but the world has moved on.

>Has twisted always used SVN or was it once burdened with CVS? Thanks in
>advance for your input.

Twisted used CVS and migrated to SVN.  The ability to migrate to new version control systems was one of the original motivators for us to maintain our own development rather than use a site like Sourceforge, and I think it's paid off immensely.




From dreid at dreid.org  Wed Oct 12 02:30:29 2005
From: dreid at dreid.org (David Reid)
Date: Tue, 11 Oct 2005 23:30:29 -0700
Subject: [Twisted-Python] Subproject releases
In-Reply-To: <20051012054938.3914.543518999.divmod.quotient.27213@ohm>
References: <20051012054938.3914.543518999.divmod.quotient.27213@ohm>
Message-ID: <D1BED759-06D3-4FC0-BE20-D50F48D12F60@dreid.org>


On Oct 11, 2005, at 10:49 PM, glyph at divmod.com wrote:
> I remember participating in this initial discussion.
>
> I remember taking some side in it, and arguing strongly for that side.
>
> I'm not sure which one it was, so if I'm responsible for rejecting  
> it I've changed my mind, but if I was arguing in favor of it I'm  
> now even more vociferous :).

Just in the interest of clarity, I'm fairly certain you argued  
against this, because of the pain it would cause the developer  
involved in all aspects of Twisted as opposed to just one or two  
subprojects.  Then I wrote pthy, to try to make that kind of thing  
easier, no one used it, and now apparently you've written Combinator  
to do the same thing in a different and all together better way.  So  
I support this kind of change.

As to when it should take place it's probably a good idea to discuss  
it for at least one release to try and avoid releases getting even  
more bogged down.  I seem to recall one of the major reasons it took  
2.0 so long to get released was the logistics of making the initial  
split actually work.  On that note, I do seem to recall that you  
(glyph) suggested splitting the package distribution and doing the  
repository reorganization with a few releases in between.

-David
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20051011/96948689/attachment.htm 

From moof at metamoof.net  Wed Oct 12 05:03:00 2005
From: moof at metamoof.net (Moof)
Date: Wed, 12 Oct 2005 11:03:00 +0200
Subject: [Twisted-Python] Subproject releases
In-Reply-To: <D1BED759-06D3-4FC0-BE20-D50F48D12F60@dreid.org>
References: <20051012054938.3914.543518999.divmod.quotient.27213@ohm>
	<D1BED759-06D3-4FC0-BE20-D50F48D12F60@dreid.org>
Message-ID: <434CD144.8040308@metamoof.net>

David Reid wrote:
> 
> On Oct 11, 2005, at 10:49 PM, glyph at divmod.com <mailto:glyph at divmod.com>
> wrote:
> 
>> I remember participating in this initial discussion.
>>
>> I remember taking some side in it, and arguing strongly for that side.
>>
>> I'm not sure which one it was, so if I'm responsible for rejecting it
>> I've changed my mind, but if I was arguing in favor of it I'm now even
>> more vociferous :).
> 
> 
> Just in the interest of clarity, I'm fairly certain you argued against
> this, because of the pain it would cause the developer involved in all
> aspects of Twisted as opposed to just one or two subprojects.  Then I
> wrote pthy, to try to make that kind of thing easier, no one used it,
> and now apparently you've written Combinator to do the same thing in a
> different and all together better way.  So I support this kind of change.  

Out of interest, How do these solutions relate to all the fancy metapackage
stuff you can do with setuptools?

Much of the python world seems to be migrating towards setuptools as a way
to distribute their packages and cope with fun things like dependencies.
Certainly I'd hope that I could say "depends on twisted.core and
twisted.web" on future packages that I might be developing. It even has
so-called "Namespace package" support, which initially seems geared towards
Zope's package structure, but might well do for twisted, too. And if it's
not ok for twisted, then now is the right time to pipe up at the developers
(which seem to be lead by Phillip J Eby) and get some changes made, as it's
still in a robust alpha stage.

<http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages>

I think it'd be a huge shame for twisted not to release eggs in the future,
this stuff is not even beta, and it's already got wide acceptance and usage
out in the web framework world, amongst others. And now's the time to get it
right, at least as far as setuptools is concerned.

Moof
-- 
Giles Antonio Radford, alias Moof
"Too old to be a chicken and too young to be a dirty old man"
Serving up my ego over at <http://metamoof.net/>



From tdickenson at devmail.geminidataloggers.co.uk  Wed Oct 12 05:19:08 2005
From: tdickenson at devmail.geminidataloggers.co.uk (Toby Dickenson)
Date: Wed, 12 Oct 2005 10:19:08 +0100
Subject: [Twisted-Python] Re: [Twisted-commits] r14683 - Make the
	toMainThread Queue unlimited in size, instead of max size 1.
In-Reply-To: <200510101106.24167.tdickenson@devmail.geminidataloggers.co.uk>
References: <E1ENtn5-00011b-00@wolfwood>
	<ECE6DB94-7530-4B24-946B-CBCE17E22255@fuhm.net>
	<200510101106.24167.tdickenson@devmail.geminidataloggers.co.uk>
Message-ID: <200510121019.09021.tdickenson@devmail.geminidataloggers.co.uk>

On Monday 10 October 2005 11:06, Toby Dickenson wrote:
> On Friday 07 October 2005 18:31, James Y Knight wrote:
> > 
> > On Oct 7, 2005, at 11:05 AM, Stephen Thorne wrote:
> > > Make the toMainThread Queue unlimited in size, instead of max size 1.
> > > This can cause deadlocks.
> > 
> > Why does it cause deadlocks? 
> 
> I see one possible deadlock, but Im suprised you dont see other different 
> symptoms first:
> 
> In the blocking select thread:
> 1. _doSelectInThread calls _sendToMain, it calls mainWaker to wake up the 
> foreign event loop, then returns
> 
> In the main thread
> 2. some application code (?) calls doIteration
> 3. doIteration calls _sendToThread(_doIterationInThread
> 4. doIteration calls toMainThread.get(), expecting to block until 'its' 
> iteration is complete. However it immediately receives the message sent in 
> step 1.
> 5. doIteration returns
> 6. The foreign event loop gets round to calling _interleave because of the 
> request sent in step 1.

Hmmmm, no need for anything quite so elaborate above. get_nowait is documented 
to raise the Queue.Empty exception (which leads to deadlock in tsr) if the 
Queue is "Empty or Locked". 

http://www.python.org/doc/2.3.5/lib/module-Queue.html

Im sure that get_nowait needs to be replaced with a regular blocking get, as I 
described below.

> 7. _interleave calls toMainThread.get_nowait. This raises a Queue.Empty 
> exception, which escapes up to the foreign event loop integration code.
> 
> In the blocking select thread
> 
> 8. _doSelectInThread is called because of the request in step 3.
> 9. _doSelectInThread calls sendToMain. This never gets removed from the 
Queue.
> 
> At this point:
> 
> * The reactor is stalled indefinitely because _interleave raised an 
exception 
> before it called _sendToThread(_doIterationInThread.
> 
> * Any subsequent calls to doIteration will cause _doThreadIteration to 
> deadlock in sendToMain.
> 
> 
> I believe the right solution involves replacing get_nowait with a regular 
get 
> in _interleave.
> 
> I guess it is not a problem that doIteration sometimes does not perform a 
> whole iteration. There has never been a guarantee about how much work is 
done 
> each iteration of the reactor loop, right?
> 
> 
> 
> -- 
> Toby Dickenson
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 

-- 
Toby Dickenson



From p.mayers at imperial.ac.uk  Wed Oct 12 05:48:07 2005
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 12 Oct 2005 10:48:07 +0100
Subject: [Twisted-Python] Python 2.2 Support
In-Reply-To: <20051011043912.GN21420@home.puzzling.org>
References: <d06a5cd30510102131t58144c60g@mail.gmail.com>
	<20051011043912.GN21420@home.puzzling.org>
Message-ID: <434CDBD7.1060805@imperial.ac.uk>

Mary Gardiner wrote:
> So, the previous version of this thread came up with:
> 
> On Tue, Oct 11, 2005, Jonathan Lange wrote:
> 
>>Should we drop Python 2.2 support in Subversion head for Twisted 2.2?
>>
>>- Debian stable now comes with Python 2.3
>>- Twisted 2.1 has been released with Python 2.2 support
> 
>   - the most commonly used version of Red Hat Enterprise still has
>     Python 2.3
> 
> Therefore:
> 
> 
>>Some bad consequences:
>>- People wanting to run Twisted 2.2 (or svn) on ancient versions of
>>Python won't be able to.
> 
>   - in particular, people wanting to run Twisted 2.2 on RHE will need
>     to upgrade to the very latest, less widely used, version
> 

FWIW we use an enormous quantity of (Twisted- and not-)Python code here, 
of which I'm the prime maintainer. As a matter of course, I build a 
local copy of Python on RHEL3 boxes, because the extensive use of Python 
in Fedora/Redhat sysadmin tools makes me somewhat nervous about tooling 
around with the system copy.

What I'm saying is that it's not a huge barrier to entry needing to 
build Python2.3/4/5 from source (in fact the big pain is getting various 
extension modules, pyOpenSSL in particular - and an egg-ified Python and 
Twisted would help that immensely). Though having fast server machines 
makes it less painful (which is solveable using a /usr/local-ified RPM).

My suggestion would be to aim for the following - an egged Twisted, 
deprecate Python2.2, then a user installing Twisted has to do three things:

wget Python2.3.tgz; tar xzf Python2.3.tgz; cd Python2.3
./configure && make && make install

...then

wget easyinstall.tgz; tar xzf easyinstall.tgz; cd easyinstall
/usr/local/bin/python2.3 setup.py install

...then

easy_install Twisted

...which ideally would pull down all the various modules and associated 
crap required to actually include the batteries in Python ;o)



From gmcdonald at infocomp.com  Wed Oct 12 05:55:01 2005
From: gmcdonald at infocomp.com (Grant McDonald)
Date: Wed, 12 Oct 2005 19:55:01 +1000
Subject: [Twisted-Python] Twisted and SVN
Message-ID: <61DA7719C45FD31185280008C733EF6E04AC4FCB@XCHANGE>

Glyph,

Thanks for taking the time to provide such a detailed response. SVN always
looked better on paper but it is good to read the real world
experiences/opinions of a developer on a large project that is actually
using it! :)

Thanks again,

Grant M.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20051012/278cca81/attachment.htm 

From matt at pollenation.net  Wed Oct 12 07:42:39 2005
From: matt at pollenation.net (Matt Goodall)
Date: Wed, 12 Oct 2005 12:42:39 +0100
Subject: [Twisted-Python] Subproject releases
In-Reply-To: <434CD144.8040308@metamoof.net>
References: <20051012054938.3914.543518999.divmod.quotient.27213@ohm>	<D1BED759-06D3-4FC0-BE20-D50F48D12F60@dreid.org>
	<434CD144.8040308@metamoof.net>
Message-ID: <434CF6AF.9020901@pollenation.net>


Moof wrote:
> David Reid wrote:
> 
>>On Oct 11, 2005, at 10:49 PM, glyph at divmod.com <mailto:glyph at divmod.com>
>>wrote:
>>
>>
>>>I remember participating in this initial discussion.
>>>
>>>I remember taking some side in it, and arguing strongly for that side.
>>>
>>>I'm not sure which one it was, so if I'm responsible for rejecting it
>>>I've changed my mind, but if I was arguing in favor of it I'm now even
>>>more vociferous :).
>>
>>
>>Just in the interest of clarity, I'm fairly certain you argued against
>>this, because of the pain it would cause the developer involved in all
>>aspects of Twisted as opposed to just one or two subprojects.  Then I
>>wrote pthy, to try to make that kind of thing easier, no one used it,
>>and now apparently you've written Combinator to do the same thing in a
>>different and all together better way.  So I support this kind of change.  
> 
> 
> Out of interest, How do these solutions relate to all the fancy metapackage
> stuff you can do with setuptools?

If the projects are separate it would be much easier, although there are
other issues in the Twisted code that make zip safe eggs difficult right
now.

setuptools's namespace packages requires (AFAICT) the package components
to be in separate directories.

One thing to be wary of ... using setuptools namespace packages seems to
force you down the pkg_resources.require('xyz') route. That is good or
bad, depending on your viewpoint ;-).

Personally, I would like Twisted eggs and I would be happy to help out
with this. It *would* mean some changes to the Twisted code though -
some of it simple (killing __file__ references), some of it a bit more
tricky (plugin's dropin.cache).

Anyway, let's not let this descend into a setuptools vs <insert
favourite package manager> flame fest. Making eggs possible are just one
of many goals that may be helped by separating Twisted projects.

- Matt

> 
> Much of the python world seems to be migrating towards setuptools as a way
> to distribute their packages and cope with fun things like dependencies.
> Certainly I'd hope that I could say "depends on twisted.core and
> twisted.web" on future packages that I might be developing. It even has
> so-called "Namespace package" support, which initially seems geared towards
> Zope's package structure, but might well do for twisted, too. And if it's
> not ok for twisted, then now is the right time to pipe up at the developers
> (which seem to be lead by Phillip J Eby) and get some changes made, as it's
> still in a robust alpha stage.
> 
> <http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages>
> 
> I think it'd be a huge shame for twisted not to release eggs in the future,
> this stuff is not even beta, and it's already got wide acceptance and usage
> out in the web framework world, amongst others. And now's the time to get it
> right, at least as far as setuptools is concerned.
> 
> Moof

-- 
     __
    /  \__     Matt Goodall, Pollenation Internet Ltd
    \__/  \    w: http://www.pollenation.net
  __/  \__/    e: matt at pollenation.net
 /  \__/  \    t: +44 (0)113 2252500
 \__/  \__/
 /  \          Any views expressed are my own and do not necessarily
 \__/          reflect the views of my employer.



From Henning.Ramm at mediapro-gmbh.de  Wed Oct 12 08:11:48 2005
From: Henning.Ramm at mediapro-gmbh.de (Henning.Ramm at mediapro-gmbh.de)
Date: Wed, 12 Oct 2005 14:11:48 +0200
Subject: [Twisted-Python] problem enhancing conch sample
Message-ID: <F92274058556DE42B94B148EEFB91839021CB5B1@exchange-03.suedkurier.de>

>Each channel can only be only command, executed
>one time.  If you need to run a second command, you need to open a new
>channel.

That's what I needed to know. The tutorial doesn't explain this (or I didn't understand it).
Thank you!

Best regards,
Henning Hraban Ramm
S?dkurier Medienhaus / MediaPro
Support/Admin/Development Dept.



From glyph at divmod.com  Wed Oct 12 09:16:06 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Wed, 12 Oct 2005 09:16:06 -0400
Subject: [Twisted-Python] Subproject releases
In-Reply-To: <434CF6AF.9020901@pollenation.net>
References: <20051012054938.3914.543518999.divmod.quotient.27213@ohm>	<D1BED759-06D3-4FC0-BE20-D50F48D12F60@dreid.org>	<434CD144.8040308@metamoof.net>
	<434CF6AF.9020901@pollenation.net>
Message-ID: <434D0C96.6040707@divmod.com>

Matt Goodall wrote:

> Anyway, let's not let this descend into a setuptools vs <insert
> favourite package manager> flame fest. Making eggs possible are just one
> of many goals that may be helped by separating Twisted projects.

It would also probably simplify the existing setup.py installations, but
agreed: let's not conflate the two discussions.

However, as long as we're talking about it... mg: What you did for Nevow
would probably be a good idea; let's have a parallel setuptools_setup.py
for a while before switching over to it.

eggs are pretty awesome though, twisted.plugin should definitely have
some way of integrating with them.  As far as dropin.cache goes, I have
some weird ideas about a "path management object" that wrapped around
sys.path and did things like determine if zipimport was being used at
any point in any path, to give parallel directories to write cache data
to, etc.  __file__ references can be replaced by
get_resource_mumblemumble calls entirely, right?

FWIW: I do mostly remember arguing against this initially ;-), and I
think it was probably a good idea at the time.  The "topfiles" idea was
pretty ingenious to keep the whole repository working with the same
structure between 1.3 and 2.0.  I just think its' time has passed.

and David, I did read the code to Pthy before I wrote Combinator, so
that project did help :-)



From tjs at nunatak.com.au  Wed Oct 12 10:18:28 2005
From: tjs at nunatak.com.au (Timothy Stebbing)
Date: Thu, 13 Oct 2005 01:18:28 +1100
Subject: [Twisted-Python] ANN: Nufox 0.1.0
Message-ID: <434D1B34.4020300@nunatak.com.au>

Nufox is a remote-XUL server framework for building live, event-driven, 
through-the-web GUI applications without writing markup, just python. 
This is the initial release and represents several months work, much 
thanks to cablehead, radix, exarkun et al for their advice and 
contributions.

url: http://trac.nunatak.com.au/projects/nufox
download: http://trac.nunatak.com.au/trac/Nufox-0.1.0.tar.gz

Timothy <tjs> Stebbing




From matt at pollenation.net  Wed Oct 12 10:36:27 2005
From: matt at pollenation.net (Matt Goodall)
Date: Wed, 12 Oct 2005 15:36:27 +0100
Subject: twisted eggs (was Re: [Twisted-Python] Subproject releases)
In-Reply-To: <434D0C96.6040707@divmod.com>
References: <20051012054938.3914.543518999.divmod.quotient.27213@ohm>	<D1BED759-06D3-4FC0-BE20-D50F48D12F60@dreid.org>	<434CD144.8040308@metamoof.net>	<434CF6AF.9020901@pollenation.net>
	<434D0C96.6040707@divmod.com>
Message-ID: <434D1F6B.9000509@pollenation.net>

Glyph Lefkowitz wrote:
> Matt Goodall wrote:
> 
> 
>>Anyway, let's not let this descend into a setuptools vs <insert
>>favourite package manager> flame fest. Making eggs possible are just one
>>of many goals that may be helped by separating Twisted projects.
> 
> 
> It would also probably simplify the existing setup.py installations, but
> agreed: let's not conflate the two discussions.
> 
> However, as long as we're talking about it... mg: What you did for Nevow
> would probably be a good idea; let's have a parallel setuptools_setup.py
> for a while before switching over to it.

Heh, strictly speaking the original setup.py was reverted and my
setup.py was moved out of the way to setup_egg.py.

But yes, a parallel setuptools setup.py would be the correct answer for now.

I might start scanning through the Twisted code to see what would need
to change to allow eggs. The obvious one is __file__ references but to
use namespace packages we'd need to clear everything out of
twisted.__init__.

If I get a chance, I'll post my findings back here.

> 
> eggs are pretty awesome though, twisted.plugin should definitely have
> some way of integrating with them.  As far as dropin.cache goes, I have
> some weird ideas about a "path management object" that wrapped around
> sys.path and did things like determine if zipimport was being used at
> any point in any path, to give parallel directories to write cache data
> to, etc.  __file__ references can be replaced by
> get_resource_mumblemumble calls entirely, right?

pkg_resources has a couple of functions for locating a resource (file or
directory, i think) by name, from inside a package.

Obviously, you can't guarentee you can write to those resources though ;-)

- Matt

-- 
     __
    /  \__     Matt Goodall, Pollenation Internet Ltd
    \__/  \    w: http://www.pollenation.net
  __/  \__/    e: matt at pollenation.net
 /  \__/  \    t: +44 (0)113 2252500
 \__/  \__/
 /  \          Any views expressed are my own and do not necessarily
 \__/          reflect the views of my employer.



From foom at fuhm.net  Wed Oct 12 12:13:18 2005
From: foom at fuhm.net (James Y Knight)
Date: Wed, 12 Oct 2005 12:13:18 -0400
Subject: [Twisted-Python] Subproject releases
In-Reply-To: <20051012054938.3914.543518999.divmod.quotient.27213@ohm>
References: <20051012054938.3914.543518999.divmod.quotient.27213@ohm>
Message-ID: <984B75A9-F452-4473-9588-9424046368E8@fuhm.net>


On Oct 12, 2005, at 1:49 AM, glyph at divmod.com wrote:
> The Divmod repository is now organized this way, and we have a tool  
> (Combinator) which keeps PYTHONPATH from exploding into a million  
> pieces that kill you.  For an example of this repository structure  
> see <http://divmod.org/trac/browser/trunk>.

AFAIU, Combinator doesn't solve the problem of twisted.words,  
twisted.internet, and twisted.web being in separately distributed  
packages. Of course, that's "only" an issue while developing, because  
on install, you either use setuptools magic or else install  
everything into the same directory hierarchy.

As an experiment, I've tried rearranging my local hierarchy with  
separate dirs for each project, as follows:
core/admin/...
core/doc/...
core/twisted/{application,cred,internet,...}
web2/twisted/web2/
web2/doc/...

Then, created a wrapper to combine them:
twisted/__init__.py:
> import os.path
> __path__=["core/twisted", "web2/twisted"]
> __path__=[os.path.abspath(os.path.join(os.path.dirname(__file__),  
> "..", elt)) for elt in __path__]
> import copyright
> __version__ = copyright.version
> from twisted.python import compat
> del compat, os

With this setup, things seem to mostly work, besides twisted.plugin,  
which doesn't work because of plugins' insane magic. I suspect  
there's some way to make that work though. So, I think the  
rearrangement is probably doable without too much pain.

James



From dreid at dreid.org  Wed Oct 12 15:26:11 2005
From: dreid at dreid.org (David Reid)
Date: Wed, 12 Oct 2005 12:26:11 -0700
Subject: [Twisted-Python] Subproject releases
In-Reply-To: <984B75A9-F452-4473-9588-9424046368E8@fuhm.net>
References: <20051012054938.3914.543518999.divmod.quotient.27213@ohm>
	<984B75A9-F452-4473-9588-9424046368E8@fuhm.net>
Message-ID: <1129145171.3472.23.camel@audrey.local>

On Wed, 2005-10-12 at 12:13 -0400, James Y Knight wrote:

> AFAIU, Combinator doesn't solve the problem of twisted.words,  
> twisted.internet, and twisted.web being in separately distributed  
> packages. 

You're right, neither pthy nor combinator actually solves that problem
and there is no way to solve them with pth files because pth files
aren't looked for at the module import level.  Likewise, combinators use
of PYTHONPATH.  So there are two real problems here, how to make the
repository reorganization work for users, and how to make it work for
developers.  

- radix's fancy setup.py'ing, zpkgtools, pythonEggs are all potential
user solutions.

- Your smart twisted/__init__.py is a developer solution, but it doesn't
addressed (perhaps you just didn't want to mention it yet) what happens
when I want to use bracnhes/web2/foom/client2/ with it?  I suppose your
hierarchy is actually something like

twisted/core/twisted
twisted/web2/twisted
twisted/__init__.py

and core, web2, projname, etc would all be symlinks to various branches
of the various projects.  But that still seems to intrude on the
developer's habits.

I guess what I'm saying is, as far as user solutions go, we just need to
pick one (preferably one with versioning), it's the developer solution
that is going to make or break a reorganization, because it's hard
enough to develop twisted given all the personal and professional
distractions, but it shouldn't get harder by forcing developers to work
a certain way.

-David




From radeex at gmail.com  Wed Oct 12 05:21:43 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Wed, 12 Oct 2005 20:21:43 +1100
Subject: [Twisted-Python] Subproject releases
In-Reply-To: <434CD144.8040308@metamoof.net>
References: <20051012054938.3914.543518999.divmod.quotient.27213@ohm>
	<D1BED759-06D3-4FC0-BE20-D50F48D12F60@dreid.org>
	<434CD144.8040308@metamoof.net>
Message-ID: <60ed19d40510120221j51384910s5a4d0c1d76c257b9@mail.gmail.com>

On 10/12/05, Moof <moof at metamoof.net> wrote:
> Out of interest, How do these solutions relate to all the fancy metapackage
> stuff you can do with setuptools?

[a bunch of stuff about how cool setuptools is and the Python
community moving towards it]

To be frank, I am inclined to not touch another release-packaging
technology for at least a couple of months. I had a horrible
experience with zpkgtools before the 2.0 release, trying to fix it up
where it was insufficient for Twisted, just to eventually find out
that the benefit I was getting out of it could be duplicated with
about 30 lines of utility functions and without all of the massive
overengineering that seems so common in the Zope world (says the crazy
Twisted developer).

However, if someone really wants to take this end-to-end, I'm of
course not going to stand in his way. However, I would still encourage
not messing with the release stuff, apart from obvious cleanups and
conveniences, as it's now just settling down and becoming easy to do
releases with, and it's really turning out quite nice. Making the
release stuff support generation of eggs would be nice, but I'm not
keen on switching it over to the latest release management
super-package just yet.


--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+



From radeex at gmail.com  Wed Oct 12 05:02:02 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Wed, 12 Oct 2005 20:02:02 +1100
Subject: [Twisted-Python] Subproject releases
In-Reply-To: <20051012054938.3914.543518999.divmod.quotient.27213@ohm>
References: <446737B7-AA24-47AB-B64F-96C1D6D424B7@fuhm.net>
	<20051012054938.3914.543518999.divmod.quotient.27213@ohm>
Message-ID: <60ed19d40510120202m129fb1fci8aab71a9ecb1b28e@mail.gmail.com>

On 10/12/05, glyph at divmod.com <glyph at divmod.com> wrote:
> I'm not sure which one it was, so if I'm responsible for rejecting it I've changed my mind, but if I was arguing in favor of it I'm now even more vociferous :).

I'm pretty sure this is a change of mind, and one I'm quite happy to see. :-)

>
> The Divmod repository is now organized this way, and we have a tool (Combinator) which keeps PYTHONPATH from exploding into a million pieces that kill you.  For an example of this repository structure see <http://divmod.org/trac/browser/trunk>.
>
> I think that it would be a very good idea to re-organize the Twisted repository this way, especially given the path semantics of the new plugin mechanism.  It is difficult to sanely decide which project plugins for another project ought to be distributed with at this point, and as we move towards more usage of plugins rather than direct imports for integration, this problem is only going to get worse.
>
> I would suggest trunk/TwistedWords trunk/TwistedCore trunk/TwistedNames (etc etc).  Cherry-picked branches would still be a little bit of work to construct, but a reasonable amount (and appropriate local checkout structure could probably also approximate them).
>
> I realize that this has the potential to be a pretty disruptive change.  I'm open to suggestions on when would be a good time, and I have no plans to push hard to get this to happen any time soon.  I do think it would be a good idea eventually, though.

I am hella-+10-for-this, as it would make the release process much
much saner, but it's not going to be trivial. Has Divmod yet figured
out how to have multiple top-level "twisted" directories without
running a setup.py? Initially, I tried to hack something together that
munged twisted.__path__ (look that one up, if you don't know about it,
it's way wonky) to include all the subproject twisted directories, but
trial just totally hated that (I remember fighting with
modulename->filename conversion, or vice versa). I can't remember if
that was the only thing that held me back from that solution, but I'm
definitely willing to take another whack at it. Especially now that
trial is massively cleaned up and I live with its maintainer ;)

--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+



From peter.mayne at hp.com  Wed Oct 12 19:50:28 2005
From: peter.mayne at hp.com (Mayne, Peter)
Date: Thu, 13 Oct 2005 09:50:28 +1000
Subject: [Twisted-Python] FTP server with credentials
Message-ID: <5E5B32FADDBD6A4AB1033EFE451D58A90240F12C@snoexc04.asiapacific.cpqcorp.net>

I'm trying to write a simple FTP server that a client can connect and
authenticate to, then upload a file, which the server buffers in memory
and processes, and then returns a status result to the client depending
on the result of the processing. (Twisted 2.0.1, Python 2.4.1, Windws XP
SP2)

So far I've done this:

<code>
import sys
from twisted.cred import checkers, portal
from twisted.internet import reactor, protocol
from twisted.protocols import ftp
from twisted.python import components, log

class IProtocolUser(components.Interface):
    def getPrivileges(self):
        """Return a list of privileges this user has."""

    def logout(self):
        """Cleanup per-login resources allocated to this avatar"""

class RegularUser:
    __implements__ = (IProtocolUser,)

    def getPrivileges(self):
        return [1, 2, 3, 5, 6]

    def logout(self):
        print "Cleaning up regular user resources"

class Realm:
    __implements__ = portal.IRealm

    def requestAvatar(self, avatarId, mind, *interfaces):
        if ftp.IFTPShell in interfaces:
            av = RegularUser()
            return ftp.IFTPShell, av, av.logout
        else:
            raise NotImplementedError("Only IFTPShell interface is
supported by this realm")

class MyFtpServer(ftp.FTP):
    '''My custom FTP server.'''

    def __init__(self, *args, **kw):
        super(ftp.FTP, self).__init__(*args, **kw)
        self.blockingCommands.remove('PORT')
        print 'Removed PORT to allow non-PASV'

    def dataReceived(self, data):
        'As soon as any data is received, send it to stdout for
debugging.'
        sys.stdout.write('\n  **[%s]\n' % data)
        self.transport.write(data)

def main():
    r = Realm()
    p = portal.Portal(r)
    c = checkers.InMemoryUsernamePasswordDatabaseDontUse()
    c.addUser("u", "p")
    p.registerChecker(c)
    p.registerChecker(checkers.AllowAnonymousAccess())

    #log.startLogging(sys.stdout)

    factory = ftp.FTPFactory(MyFtpServer())
    factory.portal = p
    reactor.listenTCP(2121, factory)
    reactor.run()

if __name__ == '__main__':
    main()
</code>

I can connect and authenticate (using the Windows comman line FTP client
running on the same system), but when I "put myfile.txt" on the client,
the server produces the following:

<output>
C:\>mockftp.py
Removed PORT to allow non-PASV
C:\opt\Python24\lib\site-packages\twisted\protocols\ftp.py:625:
DeprecationWarni
ng: IPv4Address.__getitem__ is deprecated.  Use attributes instead.
  phost = self.transport.getPeer()[1]
Traceback (most recent call last):
Failure: exceptions.IndexError: tuple index out of range
Traceback (most recent call last):
  File
"C:\opt\Python24\lib\site-packages\twisted\internet\selectreactor.py",
li
ne 133, in doSelect
    _logrun(selectable, _drdw, selectable, method, dict)
  File "C:\opt\Python24\Lib\site-packages\twisted\python\log.py", line
56, in ca
llWithLogger
    return callWithContext({"system": lp}, func, *args, **kw)
  File "C:\opt\Python24\Lib\site-packages\twisted\python\log.py", line
41, in ca
llWithContext
    return context.call({ILogContext: newCtx}, func, *args, **kw)
  File "C:\opt\Python24\Lib\site-packages\twisted\python\context.py",
line 31, i
n callWithContext
    return func(*args,**kw)
--- <exception caught here> ---
  File
"C:\opt\Python24\lib\site-packages\twisted\internet\selectreactor.py",
li
ne 139, in _doReadOrWrite
    why = getattr(selectable, method)()
  File "C:\opt\Python24\Lib\site-packages\twisted\internet\tcp.py", line
351, in
 doRead
    return self.protocol.dataReceived(data)
  File "C:\opt\Python24\Lib\site-packages\twisted\protocols\basic.py",
line 221,
 in dataReceived
    why = self.lineReceived(line)
  File "C:\opt\Python24\lib\site-packages\twisted\protocols\ftp.py",
line 550, i
n lineReceived
    self.processCommand(*cmdAndArgs)
  File "C:\opt\Python24\lib\site-packages\twisted\protocols\ftp.py",
line 608, i
n processCommand
    return method(*args)
  File "C:\opt\Python24\lib\site-packages\twisted\protocols\ftp.py",
line 940, i
n ftp_PORT
    self._createDTP()
  File "C:\opt\Python24\lib\site-packages\twisted\protocols\ftp.py",
line 632, i
n _createDTP
    self.dtpPort = reactor.connectTCP(self.dtpHostPort[1],
self.dtpHostPort[2])
exceptions.IndexError: tuple index out of range
Cleaning up regular user resources
</output>

At this point I'm lost. What am I doing wrong?

Thanks.

PJDM
-- 
Peter Mayne
Technology Consultant
Hewlett-Packard Australia
7-11 Barry Drive, Turner, ACT, 2612



From itamar at itamarst.org  Wed Oct 12 20:01:09 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 12 Oct 2005 20:01:09 -0400
Subject: [Twisted-Python] FTP server with credentials
In-Reply-To: <5E5B32FADDBD6A4AB1033EFE451D58A90240F12C@snoexc04.asiapacific.cpqcorp.net>
References: <5E5B32FADDBD6A4AB1033EFE451D58A90240F12C@snoexc04.asiapacific.cpqcorp.net>
Message-ID: <1129161670.8725.4.camel@localhost.localdomain>

On Thu, 2005-10-13 at 09:50 +1000, Mayne, Peter wrote:
> I'm trying to write a simple FTP server that a client can connect and
> authenticate to, then upload a file, which the server buffers in memory
> and processes, and then returns a status result to the client depending
> on the result of the processing. (Twisted 2.0.1, Python 2.4.1, Windws XP
> SP2)

You'll want to look at Twisted 2.1, it has a much improved FTP server
backend (though the authentication part shouldn't be affected, IIRC).




From peter.mayne at hp.com  Wed Oct 12 20:34:31 2005
From: peter.mayne at hp.com (Mayne, Peter)
Date: Thu, 13 Oct 2005 10:34:31 +1000
Subject: [Twisted-Python] FTP server with credentials
Message-ID: <5E5B32FADDBD6A4AB1033EFE451D58A90240F17F@snoexc04.asiapacific.cpqcorp.net>

I'm doing that right now (although I went with 2.0.1 because of the
convenient Windows installer).

Does 2.1 make the FTP server any easier? :-)

PJDM
-- 
Peter Mayne
Technology Consultant
Hewlett-Packard Australia
7-11 Barry Drive, Turner, ACT, 2612
 

> -----Original Message-----
> From: twisted-python-bounces at twistedmatrix.com 
> [mailto:twisted-python-bounces at twistedmatrix.com] On Behalf 
> Of Itamar Shtull-Trauring
> Sent: Thursday, 13 October 2005 10:01 AM
> To: Twisted general discussion
> Subject: Re: [Twisted-Python] FTP server with credentials
> 

> You'll want to look at Twisted 2.1, it has a much improved FTP server
> backend (though the authentication part shouldn't be affected, IIRC).



From foom at fuhm.net  Wed Oct 12 21:31:47 2005
From: foom at fuhm.net (James Y Knight)
Date: Wed, 12 Oct 2005 21:31:47 -0400
Subject: [Twisted-Python] Subproject releases
In-Reply-To: <984B75A9-F452-4473-9588-9424046368E8@fuhm.net>
References: <20051012054938.3914.543518999.divmod.quotient.27213@ohm>
	<984B75A9-F452-4473-9588-9424046368E8@fuhm.net>
Message-ID: <8A85A757-AA98-4F35-9244-11BADFD7108B@fuhm.net>


On Oct 12, 2005, at 12:13 PM, James Y Knight wrote:
> With this setup, things seem to mostly work, besides  
> twisted.plugin, which doesn't work because of plugins' insane  
> magic. I suspect there's some way to make that work though. So, I  
> think the rearrangement is probably doable without too much pain.

Okay, I've gone and done it now...see svn://svn.twistedmatrix.com/svn/ 
Twisted/branches/foom/svn-reorg/

Trial is an issue, though...
1) Just weirdness...
This doesn't work:
   PYTHONPATH=Root core/bin/trial conch/twisted/conch/test/test_ssh.py
This does work:
   PYTHONPATH=Root core/bin/trial twisted.conch.test.test_ssh

2) Trial's recurse doesn't work,
This finds no tests to run:
   PYTHONPATH=Root core/bin/trial twisted

James



From peter.mayne at hp.com  Wed Oct 12 22:09:45 2005
From: peter.mayne at hp.com (Mayne, Peter)
Date: Thu, 13 Oct 2005 12:09:45 +1000
Subject: [Twisted-Python] Generating API documentation
Message-ID: <5E5B32FADDBD6A4AB1033EFE451D58A90240F2A9@snoexc04.asiapacific.cpqcorp.net>

I've downloaded and installed Twisted 2.1 on Windows XP.

I work off-line some of the time, so I'd like a local copy of the API
documentation, but I don't want to wget the website.

How do I generate the API documentation locally?

(Lore seemed to be a part of the 2.0.1 Windows install, but not the
2.1.0 bz2.)

Thanks.

PJDM
-- 
Peter Mayne
Technology Consultant
Hewlett-Packard Australia
7-11 Barry Drive, Turner, ACT, 2612



From glyph at divmod.com  Wed Oct 12 22:26:52 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Wed, 12 Oct 2005 22:26:52 -0400
Subject: [Twisted-Python] Subproject releases
In-Reply-To: <984B75A9-F452-4473-9588-9424046368E8@fuhm.net>
References: <20051012054938.3914.543518999.divmod.quotient.27213@ohm>
	<984B75A9-F452-4473-9588-9424046368E8@fuhm.net>
Message-ID: <434DC5EC.9060409@divmod.com>

James Y Knight wrote:

> On Oct 12, 2005, at 1:49 AM, glyph at divmod.com wrote:
>> The Divmod repository is now organized this way, and we have a tool 
>> (Combinator) which keeps PYTHONPATH from exploding into a million 
>> pieces that kill you.  For an example of this repository structure 
>> see <http://divmod.org/trac/browser/trunk>.

> AFAIU, Combinator doesn't solve the problem of twisted.words, 
> twisted.internet, and twisted.web being in separately distributed 
> packages. Of course, that's "only" an issue while developing, because 
> on install, you either use setuptools magic or else install  everything
> into the same directory hierarchy.

It doesn't directly, but the __init__.py hack that exists in
twisted.plugin already seems a little cleaner than the one you're using
there.  Using Combinator you have a Twisted.pth that sits at the top
level that says:

core
web2

(etc)

I can make another branch which re-organizes the repository using
Combinator; we could probably move Combinator into Twisted from the
Divmod repository, since it doesn't do too much and it doesn't rely on
any Divmod code (or Twisted, for that matter).

In spirit the organization you suggest is identical to mine, though, I
would just implement it a bit differently.

Chris makes an excellent point in an earlier post though.  Would this
reorganization have any detrimental effect upon the release process?



From glyph at divmod.com  Wed Oct 12 22:29:37 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Wed, 12 Oct 2005 22:29:37 -0400
Subject: [Twisted-Python] Subproject releases
In-Reply-To: <60ed19d40510120202m129fb1fci8aab71a9ecb1b28e@mail.gmail.com>
References: <446737B7-AA24-47AB-B64F-96C1D6D424B7@fuhm.net>	<20051012054938.3914.543518999.divmod.quotient.27213@ohm>
	<60ed19d40510120202m129fb1fci8aab71a9ecb1b28e@mail.gmail.com>
Message-ID: <434DC691.3060709@divmod.com>

Christopher Armstrong wrote:

> I am hella-+10-for-this,

Whoops!  Didn't read this before I wrote my last response :).

> as it would make the release process much
> much saner, but it's not going to be trivial. Has Divmod yet figured
> out how to have multiple top-level "twisted" directories without
> running a setup.py?

Basically yes, I think, but I will have to experiment to make sure my
*particular* __path__ hack works exactly as I expect it to.

> Initially, I tried to hack something together that
> munged twisted.__path__ (look that one up, if you don't know about it,
> it's way wonky) to include all the subproject twisted directories, but
> trial just totally hated that (I remember fighting with
> modulename->filename conversion, or vice versa). I can't remember if
> that was the only thing that held me back from that solution, but I'm
> definitely willing to take another whack at it. Especially now that
> trial is massively cleaned up and I live with its maintainer ;)

Hmm.  Trial interaction is something I haven't messed with yet; I
haven't put trial directory below a __path__ entry.

Arguably this is simply a bug in Trial that should be fixed, though.



From jml at mumak.net  Wed Oct 12 23:59:00 2005
From: jml at mumak.net (Jonathan Lange)
Date: Thu, 13 Oct 2005 14:59:00 +1100
Subject: [Twisted-Python] Subproject releases
In-Reply-To: <434DC691.3060709@divmod.com>
References: <446737B7-AA24-47AB-B64F-96C1D6D424B7@fuhm.net>
	<20051012054938.3914.543518999.divmod.quotient.27213@ohm>
	<60ed19d40510120202m129fb1fci8aab71a9ecb1b28e@mail.gmail.com>
	<434DC691.3060709@divmod.com>
Message-ID: <d06a5cd30510122059t4cc93f2aq@mail.gmail.com>

On 13/10/05, Glyph Lefkowitz <glyph at divmod.com> wrote:
> Christopher Armstrong wrote:
>
> > Initially, I tried to hack something together that
> > munged twisted.__path__ (look that one up, if you don't know about it,
> > it's way wonky) to include all the subproject twisted directories, but
> > trial just totally hated that (I remember fighting with
> > modulename->filename conversion, or vice versa). I can't remember if
> > that was the only thing that held me back from that solution, but I'm
> > definitely willing to take another whack at it. Especially now that
> > trial is massively cleaned up and I live with its maintainer ;)
>
> Hmm.  Trial interaction is something I haven't messed with yet; I
> haven't put trial directory below a __path__ entry.
>
> Arguably this is simply a bug in Trial that should be fixed, though.
>

Either way, it'll probably help to write a unit test that reproduces
the error :D

jml



From peter.mayne at hp.com  Thu Oct 13 02:01:48 2005
From: peter.mayne at hp.com (Mayne, Peter)
Date: Thu, 13 Oct 2005 16:01:48 +1000
Subject: [Twisted-Python] FTP server with credentials
Message-ID: <5E5B32FADDBD6A4AB1033EFE451D58A90240F47D@snoexc04.asiapacific.cpqcorp.net>

> [mailto:twisted-python-bounces at twistedmatrix.com] On Behalf 
> Of Itamar Shtull-Trauring
> 
> You'll want to look at Twisted 2.1, it has a much improved FTP server
> backend (though the authentication part shouldn't be affected, IIRC).

Using 2.1 definitely makes things easier, I'm nearly there. I just have
to figure out how to return different status values for a STOR.

One thing I've noticed is when I 'BYE' from the FTP client, I don't get
a '221' line from the Twisted FTP server. With the command line client
it doesn't matter, but I'm using Python's ftplib, and quit() throws an
EOFError because it didn't read the closing line.

Is the lack of a closing '221' a generic Twisted problem, or something
I've broken?

Thanks.

PJDM
-- 
Peter Mayne
Technology Consultant
Hewlett-Packard Australia
7-11 Barry Drive, Turner, ACT, 2612



From toby at permuted.net  Thu Oct 13 02:51:29 2005
From: toby at permuted.net (Tobias Sargeant)
Date: Thu, 13 Oct 2005 16:51:29 +1000
Subject: [Twisted-Python] correct way to disconnect a pb connection?
Message-ID: <e1e411d4150de0fabb6b448326652464@permuted.net>

Hi,

Is there a correct way to disconnect a pb client? all the examples seem
to call reacctor.stop() which is not what I want. Calling
broker.transport.loseConnection() seems clean on the client side, but
on the server side I see lots of these:

2005/10/13 16:47 EST [ControldServerConnection,0,192.168.34.218] 
connection lost <Q.controld.controld.ControldServerConnection instance 
at 0x102cd78> [Failure instance: Traceback (failure with no frames): 
twisted.internet.error.ConnectionLost: Connection to the other side was 
lost in a non-clean fashion.

I've hunted through the source, but thus far haven't even been able to
ascertain where the exception is originally being raised.

Cheers,
Toby.
-- 
Tobias Sargeant  key: D9E15866 fp: 
EDD8E1EC440AD2B689BFAFA4FBFC19B6D9E15866
ph: +61 3 9345 2627   fax: +61 3 9347 0852   email: sargeant at 
wehi.edu.au
Bioinformatics, The Walter and Eliza Hall Institute of Medical Research
1G Royal Parade, Parkville, Victoria 3050, Australia




From uwe at oss4u.com  Thu Oct 13 03:01:54 2005
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Thu, 13 Oct 2005 00:01:54 -0700
Subject: [Twisted-Python] correct way to disconnect a pb connection?
In-Reply-To: <e1e411d4150de0fabb6b448326652464@permuted.net>
References: <e1e411d4150de0fabb6b448326652464@permuted.net>
Message-ID: <200510130001.54309.uwe@oss4u.com>


Don't know if this is the way to go, but what I'm doing is to call a 
server-side "disconnect" method, which will do some cleanup and then call the 
transport.loseConnection() on the server.
The client has an error handler which will catch that "lost connection" error 
and terminate gracefully.

Maybe that helps

UC


On Wednesday 12 October 2005 23:51, Tobias Sargeant wrote:
> Hi,
>
> Is there a correct way to disconnect a pb client? all the examples seem
> to call reacctor.stop() which is not what I want. Calling
> broker.transport.loseConnection() seems clean on the client side, but
> on the server side I see lots of these:
>
> 2005/10/13 16:47 EST [ControldServerConnection,0,192.168.34.218]
> connection lost <Q.controld.controld.ControldServerConnection instance
> at 0x102cd78> [Failure instance: Traceback (failure with no frames):
> twisted.internet.error.ConnectionLost: Connection to the other side was
> lost in a non-clean fashion.
>
> I've hunted through the source, but thus far haven't even been able to
> ascertain where the exception is originally being raised.
>
> Cheers,
> Toby.

--
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417



From moof at metamoof.net  Thu Oct 13 06:07:37 2005
From: moof at metamoof.net (Moof)
Date: Thu, 13 Oct 2005 12:07:37 +0200
Subject: [Twisted-Python] Subproject releases
In-Reply-To: <1129145171.3472.23.camel@audrey.local>
References: <20051012054938.3914.543518999.divmod.quotient.27213@ohm>	<984B75A9-F452-4473-9588-9424046368E8@fuhm.net>
	<1129145171.3472.23.camel@audrey.local>
Message-ID: <434E31E9.2060700@metamoof.net>

David Reid wrote:

> I guess what I'm saying is, as far as user solutions go, we just need to
> pick one (preferably one with versioning), it's the developer solution
> that is going to make or break a reorganization, because it's hard
> enough to develop twisted given all the personal and professional
> distractions, but it shouldn't get harder by forcing developers to work
> a certain way.

I'm not goign to opine on possible repository layouts, as there are people
who knwo far better than me how that works. However, if you sort it out so
you can jsut run python with setuptools, you can keep the directory
structure however you like on disc, and then just type "./setup.py develop"
for each project you have checked out to do all the funky namespace and path
mangling that setuptools does, and work with your working copy. I suppose a
utility script that runs the equivalent for the various setup files in the
various subprojects would be useful if you always want to work with the
bleeding edge, but other than that, it's fairly easygoing.

Moof
-- 
Giles Antonio Radford, alias Moof
"Too old to be a chicken and too young to be a dirty old man"
Serving up my ego over at <http://metamoof.net/>



From michele.petrazzo at unipex.it  Thu Oct 13 07:01:57 2005
From: michele.petrazzo at unipex.it (Michele Petrazzo)
Date: Thu, 13 Oct 2005 13:01:57 +0200
Subject: [Twisted-Python] ANN: Nufox 0.1.0
In-Reply-To: <434D1B34.4020300@nunatak.com.au>
References: <434D1B34.4020300@nunatak.com.au>
Message-ID: <434E3EA5.40708@unipex.it>

Timothy Stebbing wrote:
> Nufox is a remote-XUL server framework for building live,
> event-driven, through-the-web GUI applications without writing
> markup, just python.

Wow!

> This is the initial release and represents several months work, much
>  thanks to cablehead, radix, exarkun et al for their advice and 
> contributions.
> 
> url: http://trac.nunatak.com.au/projects/nufox download:
> http://trac.nunatak.com.au/trac/Nufox-0.1.0.tar.gz
> 

I download it, but I have a problem with the example:

[michele at michele examples]$ twistd -f oneShotExample.tac

Failed to load application: could not find MARK

and it stop here.
How can execute that example?

> Timothy <tjs> Stebbing
> 

Thanks,
Michele



From jean-marc.pouchoulon at ac-montpellier.fr  Thu Oct 13 09:06:10 2005
From: jean-marc.pouchoulon at ac-montpellier.fr (jean-marc pouchoulon)
Date: Thu, 13 Oct 2005 15:06:10 +0200
Subject: [Twisted-Python] ANN: Nufox 0.1.0
In-Reply-To: <434E3EA5.40708@unipex.it>
References: <434D1B34.4020300@nunatak.com.au> <434E3EA5.40708@unipex.it>
Message-ID: <434E5BC2.5010702@ac-montpellier.fr>

Bonjour,

On windows I needed  to change all   __file__ by  util.__file__

I needed also to copy examples and doc dir from nufox to  
C:\Python24\Lib\site-packages\twisted\python .
After that twistd -noy  examples.tac works fine.

jmp.



Michele Petrazzo a ?crit :

> Timothy Stebbing wrote:
>
>> Nufox is a remote-XUL server framework for building live,
>> event-driven, through-the-web GUI applications without writing
>> markup, just python.
>
>
> Wow!
>
>> This is the initial release and represents several months work, much
>>  thanks to cablehead, radix, exarkun et al for their advice and 
>> contributions.
>>
>> url: http://trac.nunatak.com.au/projects/nufox download:
>> http://trac.nunatak.com.au/trac/Nufox-0.1.0.tar.gz
>>
>
> I download it, but I have a problem with the example:
>
> [michele at michele examples]$ twistd -f oneShotExample.tac
>
> Failed to load application: could not find MARK
>
> and it stop here.
> How can execute that example?
>
>> Timothy <tjs> Stebbing
>>
>
> Thanks,
> Michele
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python






From itamar at itamarst.org  Thu Oct 13 09:45:20 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 13 Oct 2005 09:45:20 -0400
Subject: [Twisted-Python] FTP server with credentials
In-Reply-To: <5E5B32FADDBD6A4AB1033EFE451D58A90240F47D@snoexc04.asiapacific.cpqcorp.net>
References: <5E5B32FADDBD6A4AB1033EFE451D58A90240F47D@snoexc04.asiapacific.cpqcorp.net>
Message-ID: <1129211120.8556.10.camel@localhost.localdomain>

On Thu, 2005-10-13 at 16:01 +1000, Mayne, Peter wrote:

> One thing I've noticed is when I 'BYE' from the FTP client, I don't get
> a '221' line from the Twisted FTP server. With the command line client
> it doesn't matter, but I'm using Python's ftplib, and quit() throws an
> EOFError because it didn't read the closing line.

Sounds like a bug; file it at http://twistedmatrix.com/bugs/, ideally
with a failing unit test.




From michele.petrazzo at unipex.it  Thu Oct 13 10:17:39 2005
From: michele.petrazzo at unipex.it (Michele Petrazzo)
Date: Thu, 13 Oct 2005 16:17:39 +0200
Subject: [Twisted-Python] ANN: Nufox 0.1.0
In-Reply-To: <434E5BC2.5010702@ac-montpellier.fr>
References: <434D1B34.4020300@nunatak.com.au> <434E3EA5.40708@unipex.it>
	<434E5BC2.5010702@ac-montpellier.fr>
Message-ID: <434E6C83.5000705@unipex.it>

jean-marc pouchoulon wrote:
> Bonjour,
> 
> On windows I needed  to change all   __file__ by  util.__file__
> 
> I needed also to copy examples and doc dir from nufox to 
> C:\Python24\Lib\site-packages\twisted\python . After that twistd -noy
> examples.tac works fine.
> 


Ok. On linux I copy the doc and examples dir to
site-package/twisted/python directory (I think that this is a very bad
hack... Why do it? ) And now I receive:

File "oneShotExample.tac", line 6, in ?
example = reflect.namedAny('%s.example' % os.environ['EXAMPLE'])
File "/usr/lib/python2.3/UserDict.py", line 19, in __getitem__
  def __getitem__(self, key): return self.data[key]
KeyError: 'EXAMPLE'
Failed to load application: 'EXAMPLE'

File "/usr/lib/python2.3/UserDict.py", line 19, in __getitem__
  def __getitem__(self, key): return self.data[key]
  exceptions.KeyError: 'EXAMPLE'

This is right because I don't have any EXAMPLE enviroment variable!

P.s. If I execute "twistd -f oneShotExample.tac" I receive the same error.

> jmp.
> 

Thanks a lot,
Michele



From jean-marc.pouchoulon at ac-montpellier.fr  Thu Oct 13 11:35:36 2005
From: jean-marc.pouchoulon at ac-montpellier.fr (jean-marc pouchoulon)
Date: Thu, 13 Oct 2005 17:35:36 +0200
Subject: [Twisted-Python] ANN: Nufox 0.1.0
In-Reply-To: <434E6C83.5000705@unipex.it>
References: <434D1B34.4020300@nunatak.com.au>
	<434E3EA5.40708@unipex.it>	<434E5BC2.5010702@ac-montpellier.fr>
	<434E6C83.5000705@unipex.it>
Message-ID: <434E7EC8.60100@ac-montpellier.fr>

oneShotExample.tac  seems to be outdated
(athena is now included in nufox not nevow )
Maybe post on nufox mailing list to have an answer.
Only example.tac works fine for me.

jean-marc

Michele Petrazzo a ?crit :

>
> Ok. On linux I copy the doc and examples dir to
> site-package/twisted/python directory (I think that this is a very bad
> hack... Why do it? ) And now I receive:
>
> File "oneShotExample.tac", line 6, in ?
> example = reflect.namedAny('%s.example' % os.environ['EXAMPLE'])
> File "/usr/lib/python2.3/UserDict.py", line 19, in __getitem__
>  def __getitem__(self, key): return self.data[key]
> KeyError: 'EXAMPLE'
> Failed to load application: 'EXAMPLE'
>
> File "/usr/lib/python2.3/UserDict.py", line 19, in __getitem__
>  def __getitem__(self, key): return self.data[key]
>  exceptions.KeyError: 'EXAMPLE'
>
> This is right because I don't have any EXAMPLE enviroment variable!
>
> P.s. If I execute "twistd -f oneShotExample.tac" I receive the same 
> error.
>
>> jmp.
>>
>
> Thanks a lot,
> Michele
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python






From tjs at nunatak.com.au  Thu Oct 13 20:06:46 2005
From: tjs at nunatak.com.au (Timothy Stebbing)
Date: Fri, 14 Oct 2005 11:06:46 +1100
Subject: [Twisted-Python] ANN: Nufox 0.1.0
In-Reply-To: <434E7EC8.60100@ac-montpellier.fr>
References: <434D1B34.4020300@nunatak.com.au>	<434E3EA5.40708@unipex.it>	<434E5BC2.5010702@ac-montpellier.fr>	<434E6C83.5000705@unipex.it>
	<434E7EC8.60100@ac-montpellier.fr>
Message-ID: <434EF696.4000900@nunatak.com.au>

jean-marc pouchoulon wrote:

> oneShotExample.tac  seems to be outdated
> (athena is now included in nufox not nevow )
> Maybe post on nufox mailing list to have an answer.
> Only example.tac works fine for me.
>
> jean-marc


oneShotExample.tac was a tac that cablehead wrote to do some testing pre 
0.1, the README
suggests using the examples.tac. It seems that I got some poor advice 
about absolute paths in
setup.py, the current setup.py is horrible, I'll be fixing it tonight 
and doing a 0.1.1 bugfix release,
for now perhaps just run it from where you unpack the tarball, relative 
paths work fine.

-tjs



From peter.mayne at hp.com  Thu Oct 13 22:33:46 2005
From: peter.mayne at hp.com (Mayne, Peter)
Date: Fri, 14 Oct 2005 12:33:46 +1000
Subject: [Twisted-Python] FTP server with credentials
Message-ID: <5E5B32FADDBD6A4AB1033EFE451D58A90240F7E0@snoexc04.asiapacific.cpqcorp.net>

> [mailto:twisted-python-bounces at twistedmatrix.com] On Behalf 
> Of Itamar Shtull-Trauring
> 
> Sounds like a bug; file it at http://twistedmatrix.com/bugs/, ideally
> with a failing unit test.

Done, issue 1275. (Curious; the message processor seems to remove spaces
from in front of digits.)

A (possibly final) question about my FTP server: I want to be able to
indicate to the client that a file upload failed. I can do this by
raising an exception from  unregisterProducer() in my FileConsumer
class, which causes the client to see "426 Transfer aborted." instead of
"226 Transfer Complete.", so the purpose is served. However, this seems
a bit too sledgehammer-like.

Is there a preferred way of passing a file transfer failure back to the
client? Overriding FTP.ftp_STOR() seems like a step in the right
direction, but the path between that and my own FileConsumer is not
entirely obvious to me. :-)

Thanks.

PJDM
-- 
Peter Mayne
Technology Consultant
Hewlett-Packard Australia
7-11 Barry Drive, Turner, ACT, 2612
 




From warner at lothar.com  Fri Oct 14 03:27:00 2005
From: warner at lothar.com (Brian Warner)
Date: Fri, 14 Oct 2005 00:27:00 -0700 (PDT)
Subject: [Twisted-Python] correct way to disconnect a pb connection?
Message-ID: <20051014.002700.55863921.warner@lothar.com>

FYI, in newpb, you obtain all RemoteReferences through a 'Tub' (actually the
class is PBService), and because the Tub is really a
twisted.application.service.MultiService, you can shut it down (and
disconnect any open connections) by just doing .stopService(). oldpb's
clientfactory and serverfactory are a thing of the past.

I got a huge connection-negotiation patch checked in a few days ago.. I think
I'll be able to merge my development branch (currently in
svn://svn.twistedmatrix.com/svn/Twisted/branches/warner/newpb) onto the trunk
in a week or so.

cheers,
 -Brian



From jml at mumak.net  Mon Oct 17 22:22:21 2005
From: jml at mumak.net (Jonathan Lange)
Date: Tue, 18 Oct 2005 13:22:21 +1100
Subject: [Twisted-Python] Re: [Twisted-commits] r14857 -
In-Reply-To: <E1ERTyI-0001mK-00@wolfwood>
References: <E1ERTyI-0001mK-00@wolfwood>
Message-ID: <d06a5cd30510171922se497f18y@mail.gmail.com>

On 17/10/05, Glyph Lefkowitz <glyph at wolfwood.twistedmatrix.com> wrote:
> Author: glyph
> Date: Mon Oct 17 06:20:04 2005
> New Revision: 14857
>
> Modified:
>    trunk/LICENSE
> Log:
>
> Update year to 2005; also remove kind of silly "exceptions" list, when we
> already have a big list of copyright holders.
>

Does this exclude individual files having copyright notices?



From mary-twisted at puzzling.org  Mon Oct 17 23:01:14 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Tue, 18 Oct 2005 13:01:14 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] r14857 -
In-Reply-To: <d06a5cd30510171922se497f18y@mail.gmail.com>
References: <E1ERTyI-0001mK-00@wolfwood>
	<d06a5cd30510171922se497f18y@mail.gmail.com>
Message-ID: <20051018030114.GA7635@home.puzzling.org>

On Tue, Oct 18, 2005, Jonathan Lange wrote:
> On 17/10/05, Glyph Lefkowitz <glyph at wolfwood.twistedmatrix.com> wrote:
> > Author: glyph
> > Date: Mon Oct 17 06:20:04 2005
> > New Revision: 14857
> >
> > Modified:
> >    trunk/LICENSE
> > Log:
> >
> > Update year to 2005; also remove kind of silly "exceptions" list, when we
> > already have a big list of copyright holders.
> >
> 
> Does this exclude individual files having copyright notices?

Seemingly not: http://twistedmatrix.com/bugs/issue1262

-Mary

-- 
<radix> bah screw it
* radix fakes it
<glyph> radix: hooray for faking



From foom at fuhm.net  Tue Oct 18 00:04:06 2005
From: foom at fuhm.net (James Y Knight)
Date: Tue, 18 Oct 2005 00:04:06 -0400
Subject: [Twisted-Python] Subproject releases
In-Reply-To: <434DC691.3060709@divmod.com>
References: <446737B7-AA24-47AB-B64F-96C1D6D424B7@fuhm.net>	<20051012054938.3914.543518999.divmod.quotient.27213@ohm>
	<60ed19d40510120202m129fb1fci8aab71a9ecb1b28e@mail.gmail.com>
	<434DC691.3060709@divmod.com>
Message-ID: <03D1CE2D-EF00-4A2D-891B-B045EF735319@fuhm.net>

On Oct 12, 2005, at 10:29 PM, Glyph Lefkowitz wrote:
> Hmm.  Trial interaction is something I haven't messed with yet; I
> haven't put trial directory below a __path__ entry.
>
> Arguably this is simply a bug in Trial that should be fixed, though.
>

The main problem here is that trial's "recursively find all test  
modules for me" mode is based upon a recursive walk of the filesystem  
below a certain path. Currently, "trial twisted" does the following:
1) import the module named ("twisted")
2) os.path.walk over all files under the directory of that module's  
__file__ ("twisted/")
3) filter out (a) any directory which doesn't contain an __init__.*,  
and (b) any files that don't match test_*.py.
4) backwards convert the path of the matched files to a module name  
with some poor heuristics (reflect.filenameToModuleName).
5) try to import said module.

This completely breaks down in the case where packages use __path__.  
The new hierarchy has the following:
Root/
Root/twisted/
Root/twisted/__init__.py (has __path__="core/twisted/","web2/twisted/")
core/
core/twisted/
core/twisted/__init__.py
core/twisted/test/
core/twisted/test/__init__.py
core/twisted/test/test_tcp.py
web2/
web2/twisted/
web2/twisted/web2/
web2/twisted/web2/__init__.py
web2/twisted/web2/test/
web2/twisted/web2/test/__init__.py
web2/twisted/web2/test/test_http.py

So, given that layout, currently, "trial twisted" would get  
twisted.__file__ == "Root/twisted/__init__.py", take the dirname,  
"Root/twisted/", and walk that hierarchy looking for tests (and there  
aren't any there. Oops). Okay, let's specify the directory explicitly  
-- I'll say "trial web2/twisted/web2/test/". Now, that doesn't work  
right either, because it's impossible to backwards convert an  
arbitrary filename to the python module name it's expecting to be  
imported under. filenameToModuleName in this case would return  
"web2.test.test_http", which is wrong.

So, my solution:
I changed the recursive process to actually import every package (not  
every module!), so it can use the package's __path__ attribute to  
find submodules. This works, mostly.

One issue is that it causes trial to emit an import error message  
from trying to import twisted.internet.iocpreactor and  
twisted.internet.serialport (because they aren't importable on my  
system). This is necessary -- trial does not know they don't have a  
__path__ attribute before importing them, so it has no way of telling  
that they don't have test modules hidden inside. It would similarly  
be a bad idea to simply ignore all import errors of packages, as then  
real errors may be silenced. This could be simply solvable via a  
special attribute like "no_tests_in_packages= ['iocpreactor',  
'serialport']" to twisted/internet/__init__ so trial knows not to  
bother trying to import those.

The other issue is that test files expecting to be imported as  
modules _still_ won't work if specified by filename. But, I think  
that's just a fact of life -- it is not possible in general to do the  
correct back conversion. AFAICT we will just have to accept this  
slight functionality loss and recommend that everybody specify module  
names rather than file names (at least for running twisted's tests --  
it's only broken when filenameToModuleName is wrong). Also, Trial  
*does* run the file specified even if it can't figure out how to  
import it, so if the test code doesn't actually depend on having its  
real module name (e.g. it doesn't use things like relative imports or  
__name__), it will also still work.

James



From sc at linux.it  Tue Oct 18 09:06:25 2005
From: sc at linux.it (Stefano Canepa)
Date: Tue, 18 Oct 2005 15:06:25 +0200
Subject: [Twisted-Python] exceptions.AttributeError: 'NoneType' object has
	no attribute 'write'
Message-ID: <1129640785.11441.31.camel@localhost.localdomain>

Hi all,
	I have this error running the simple module I wrote after the error.

$ ./TCAdrvC.py
sending to TCA: MSH|^~\&|XLIS|CLILAB|CLC^1|TCA|20010101080811||OML^O21|
200101010OBR|1|123456^XLIS||0001^Aliquot^XLIS||||||||DC1|||SER|3||
pippo:
MSH|^~\&|XLIS|CLILAB|CLC^1|TCA|20010101080811||OML^O21|20010101080811|
P|2.4|||NOBR|1|123456^XLIS||0001^Aliquot^XLIS||||||||DC1|||SER|3||
None
Peer will receive following PB traceback:
Traceback (most recent call last):
  File "/usr/lib/python2.3/site-packages/twisted/spread/banana.py", line
114, in gotItem
    self.callExpressionReceived(item)
  File "/usr/lib/python2.3/site-packages/twisted/spread/banana.py", line
81, in callExpressionReceived
    self.expressionReceived(obj)
  File "/usr/lib/python2.3/site-packages/twisted/spread/pb.py", line
561, in expressionReceived
    method(*sexp[1:])
  File "/usr/lib/python2.3/site-packages/twisted/spread/pb.py", line
872, in proto_message
    self._recvMessage(self.localObjectForID, requestID, objectID,
message, answerRequired, netArgs, netKw)
--- <exception caught here> ---
  File "/usr/lib/python2.3/site-packages/twisted/spread/pb.py", line
886, in _recvMessage
    netResult = object.remoteMessageReceived(self, message, netArgs,
netKw)
  File "/usr/lib/python2.3/site-packages/twisted/spread/flavors.py",
line 113, in remoteMessageReceived
    state = method(*args, **kw)
  File "./TCAdrvC.py", line 102, in remote_sendToTCA
    d.addCallback(self.sendMsg(msg,RETRIES))
  File "/home/sc/Sviluppo/CCIC/HL7/HL7LLPSpecialClient.py", line 122, in
sendMsg    self.sendLine(msgToSend)
  File "/usr/lib/python2.3/site-packages/twisted/protocols/basic.py",
line 269, in sendLine
    return self.transport.write(line + self.delimiter)
exceptions.AttributeError: 'NoneType' object has no attribute 'write'

class Receiver(pb.Root, HL7LLPClientProtocol):

    def __init__(self):
         HL7LLPClientProtocol.__init__(self)
        
    def remote_sendToTCA(self, msg):

        self.delimiter = "\x02"
        
        ## if DEBUG:
        print 'sending to TCA:', msg
        # Create creator and connect
        clientCreator = protocol.ClientCreator(reactor,  
                        HL7LLPClientProtocol)
        d = clientCreator.connectTCP(SERVER, PORT)
        d.addCallback(self.sendMsg(msg,RETRIES))
        return msg

def main():
    reactor.listenTCP(LISTENPORT, pb.PBServerFactory(Receiver()))
    reactor.run()

---------

the module HL7LLPClientProtocol is:

class HL7LLPClientProtocol(LineReceiver):
    delimiter = "\x02"

    def sendMsg(self, msg, numRetries=RETRIES):
        self.msg = msg
        msgToSend = "\x01"+msg +"\x0d"
        self.sendLine(msgToSend)
        return self.timeoutAndRetry(numRetries)
...

Which is my mistake?

Bye
Stefano

-- 
Stefano Canepa aka sc: sc at linux.it  http://www.stefanocanepa.it
Three great virtues of a programmer: laziness, impatience and hubris.
Le tre grandi virt? di un programmatore: pigrizia, impazienza e
arroganza. (Larry Wall)
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20051018/d561d1cc/attachment.pgp 

From Henning.Ramm at mediapro-gmbh.de  Tue Oct 18 09:25:33 2005
From: Henning.Ramm at mediapro-gmbh.de (Henning.Ramm at mediapro-gmbh.de)
Date: Tue, 18 Oct 2005 15:25:33 +0200
Subject: [Twisted-Python] Win32 installers of Twisted 2.1?
Message-ID: <F92274058556DE42B94B148EEFB91839021CB5BF@exchange-03.suedkurier.de>

Dear twisted wizards,

would it be possible to also release Win32 exe installers for Twisted 2.1?
I'd prefer to always use the same way of installing things, if possible.
But if you won't release any Windows binaries any more, please state that on the website.

Best regards,
Henning Hraban Ramm
S?dkurier Medienhaus / MediaPro
Support/Admin/Development Dept.



From digi at treepy.com  Tue Oct 18 09:31:01 2005
From: digi at treepy.com (Patrick Lauber)
Date: Tue, 18 Oct 2005 15:31:01 +0200
Subject: [Twisted-Python] Stability of the IOCP Reactor
In-Reply-To: <1129640785.11441.31.camel@localhost.localdomain>
References: <1129640785.11441.31.camel@localhost.localdomain>
Message-ID: <4354F915.9070403@treepy.com>

Hi,

I am running a server with the IOCP reactor because I need a lot of 
concurent connections. If i use the default reactor the program is 
running for weeks withouth any problems. When i switched to IOCP the 
program seams not to accept any new connections after some hours or a
day, the old seam to hold. I am not sure if the socket is closed or if 
the new connection don't spawn a new protocol instance anymore...

any idea of what this could be?

cheers

pat





From johann.borck at densedata.com  Tue Oct 18 11:42:43 2005
From: johann.borck at densedata.com (Johann Borck)
Date: Tue, 18 Oct 2005 17:42:43 +0200
Subject: [Twisted-Python] exceptions.AttributeError: 'NoneType' object
	has no attribute 'write'
In-Reply-To: <1129640785.11441.31.camel@localhost.localdomain>
References: <1129640785.11441.31.camel@localhost.localdomain>
Message-ID: <435517F3.3040402@densedata.com>

Stefano Canepa wrote:

>
>class Receiver(pb.Root, HL7LLPClientProtocol):
>
>  
>
first of all, i think your pb.Root shouldn't be your protocol, you get
this error because you assume that your Receiver instance is the
protocol. PB uses it's own protocol, there is no use in deriving your
Receiver from your protocol,  I even think it's not possible at all to
implement it that way, and even if it worked it'd be confusing

def __init__(self):
    HL7LLPClientProtocol.__init__(self)

btw: AttributeError: class HL7LLPClientProtocol has no attribute
'__init__'      is what i get, if i don't comment out the above line -
there is no __init__ in that class and in LineReceiver and it's bases
(at least not in my version of twisted, but if you don't get this error,
there must be one somewhere)

>        
>    def remote_sendToTCA(self, msg):
>
>        self.delimiter = "\x02"
>        
>        ## if DEBUG:
>        print 'sending to TCA:', msg
>        # Create creator and connect
>        clientCreator = protocol.ClientCreator(reactor,  
>                        HL7LLPClientProtocol)
>  
>
Here you give the HL7LLPClientProtocol to the client creator, NOT your
Receiver - so you can't call self.sendMsg on your Receiver-instance
(which is good)

>        d = clientCreator.connectTCP(SERVER, PORT)
>  
>
this deferred returns a _new_ instance of the HL7LLPClientProtocol
protocol-class, and _that_ instance has an initialized transport, not
your Receiver-instance, where you call self.sendMsg on.  Further you
don't use addCallback like you do it, you have to use it like:
addCallback(self.method, arg1, arg2, ... ), addCallback wants the
_method_ not it's result.   you have to write a method that gets the
instance of your Protocol from the deferred, and call sendMsg on that,
something like:

...

    clientCreator = protocol.ClientCreator(reactor, HL7LLPClientProtocol)
    d = clientCreator.connectTCP(SERVER, PORT)
    d.addCallback(self.getProto,msg,RETRIES)
    return msg

  def getProto(self,proto,msg,retries):
	proto.sendMsg(msg,retries)


moreover your Protocol should implement lineReceived - that is the next
error i got, running this. Maybe you read the twisted docs about
deferreds and PB.  :)

i hope this helps



From corydodt at twistedmatrix.com  Tue Oct 18 11:48:13 2005
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Tue, 18 Oct 2005 08:48:13 -0700
Subject: [Twisted-Python] Win32 installers of Twisted 2.1?
In-Reply-To: <F92274058556DE42B94B148EEFB91839021CB5BF@exchange-03.suedkurier.de>
References: <F92274058556DE42B94B148EEFB91839021CB5BF@exchange-03.suedkurier.de>
Message-ID: <4355193D.2050502@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Win32 requires a "sumo" package to be built.  Because I don't have the tools
to build one, I'm waiting for that to happen.  As soon as it does there will
be a win32 installer.

(This is how it usually goes.  Just be patient.  Thanks!)

There is no plan to change the policy of always having a windows installer.

C


Henning.Ramm at mediapro-gmbh.de wrote:
> Dear twisted wizards,
> 
> would it be possible to also release Win32 exe installers for Twisted 2.1?
> I'd prefer to always use the same way of installing things, if possible.
> But if you won't release any Windows binaries any more, please state that on the website.
> 
> Best regards,
> Henning Hraban Ramm
> S?dkurier Medienhaus / MediaPro
> Support/Admin/Development Dept.
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (MingW32)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFDVRk93A5SrXAiHQcRAv/5AJwP5Uis5DqhEBEXzvOUe0GNvUGGzQCdHnFp
QC0autsIA6qdB9Ev0FTN7+8=
=YDq8
-----END PGP SIGNATURE-----



From sc at linux.it  Tue Oct 18 12:12:46 2005
From: sc at linux.it (Stefano Canepa)
Date: Tue, 18 Oct 2005 18:12:46 +0200
Subject: [Twisted-Python] exceptions.AttributeError: 'NoneType' object
	has no attribute 'write'
In-Reply-To: <435517F3.3040402@densedata.com>
References: <1129640785.11441.31.camel@localhost.localdomain>
	<435517F3.3040402@densedata.com>
Message-ID: <1129651966.11441.38.camel@localhost.localdomain>

Il giorno mar, 18/10/2005 alle 17.42 +0200, Johann Borck ha scritto:
> Stefano Canepa wrote:
> 
> >
> >class Receiver(pb.Root, HL7LLPClientProtocol):
> >
> >  
> >
> first of all, i think your pb.Root shouldn't be your protocol, you get
> this error because you assume that your Receiver instance is the
> protocol. PB uses it's own protocol, there is no use in deriving your
> Receiver from your protocol,  I even think it's not possible at all to
> implement it that way, and even if it worked it'd be confusing
> 
> def __init__(self):
>     HL7LLPClientProtocol.__init__(self)
> 
> btw: AttributeError: class HL7LLPClientProtocol has no attribute
> '__init__'      is what i get, if i don't comment out the above line -
> there is no __init__ in that class and in LineReceiver and it's bases
> (at least not in my version of twisted, but if you don't get this error,
> there must be one somewhere)

Sorry, I did an error pasting

> >        
> >    def remote_sendToTCA(self, msg):
> >
> >        self.delimiter = "\x02"
> >        
> >        ## if DEBUG:
> >        print 'sending to TCA:', msg
> >        # Create creator and connect
> >        clientCreator = protocol.ClientCreator(reactor,  
> >                        HL7LLPClientProtocol)
> >  
> >
> Here you give the HL7LLPClientProtocol to the client creator, NOT your
> Receiver - so you can't call self.sendMsg on your Receiver-instance
> (which is good)
> 
> >        d = clientCreator.connectTCP(SERVER, PORT)
> >  
> >
> this deferred returns a _new_ instance of the HL7LLPClientProtocol
> protocol-class, and _that_ instance has an initialized transport, not
> your Receiver-instance, where you call self.sendMsg on.  Further you
> don't use addCallback like you do it, you have to use it like:
> addCallback(self.method, arg1, arg2, ... ), addCallback wants the
> _method_ not it's result.   you have to write a method that gets the
> instance of your Protocol from the deferred, and call sendMsg on that,
> something like:
> 
> ...
> 
>     clientCreator = protocol.ClientCreator(reactor, HL7LLPClientProtocol)
>     d = clientCreator.connectTCP(SERVER, PORT)
>     d.addCallback(self.getProto,msg,RETRIES)
>     return msg
> 
>   def getProto(self,proto,msg,retries):
> 	proto.sendMsg(msg,retries)
> 

Thanks I arrived a the point with the help of Jp on IRC and reading docs
once again.

> moreover your Protocol should implement lineReceived - that is the next
> error i got, running this. Maybe you read the twisted docs about
> deferreds and PB.  :)
> 
> i hope this helps

It helped.

Thanks
Stefano

-- 
Stefano Canepa aka sc: sc at linux.it  http://www.stefanocanepa.it
Three great virtues of a programmer: laziness, impatience and hubris.
Le tre grandi virt? di un programmatore: pigrizia, impazienza e
arroganza. (Larry Wall)
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20051018/3c830169/attachment.pgp 

From Henning.Ramm at mediapro-gmbh.de  Tue Oct 18 12:25:20 2005
From: Henning.Ramm at mediapro-gmbh.de (Henning.Ramm at mediapro-gmbh.de)
Date: Tue, 18 Oct 2005 18:25:20 +0200
Subject: [Twisted-Python] Win32 installers of Twisted 2.1?
Message-ID: <F92274058556DE42B94B148EEFB91839021CB5C2@exchange-03.suedkurier.de>

>Win32 requires a "sumo" package to be built.  Because I don't 
>have the tools
>to build one, I'm waiting for that to happen.  As soon as it 
>does there will
>be a win32 installer.
>
>(This is how it usually goes.  Just be patient.  Thanks!)
>
>There is no plan to change the policy of always having a 
>windows installer.

Ok, thanks for info.

Best regards,
Henning Hraban Ramm
S?dkurier Medienhaus / MediaPro
Support/Admin/Development Dept.



From glyph at divmod.com  Tue Oct 18 19:53:00 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Tue, 18 Oct 2005 19:53:00 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r14857 -
In-Reply-To: <d06a5cd30510171922se497f18y@mail.gmail.com>
References: <E1ERTyI-0001mK-00@wolfwood>
	<d06a5cd30510171922se497f18y@mail.gmail.com>
Message-ID: <1129679580.31353.0.camel@localhost.localdomain>

On Tue, 2005-10-18 at 13:22 +1100, Jonathan Lange wrote:

> Does this exclude individual files having copyright notices?

That change had nothing to do with individual files.

I suppose LICENSE should say something about exceptions in individual
files, since there are a few of those?





From glyph at divmod.com  Tue Oct 18 20:03:25 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Tue, 18 Oct 2005 20:03:25 -0400
Subject: [Twisted-Python] Subproject releases
In-Reply-To: <03D1CE2D-EF00-4A2D-891B-B045EF735319@fuhm.net>
References: <446737B7-AA24-47AB-B64F-96C1D6D424B7@fuhm.net>
	<20051012054938.3914.543518999.divmod.quotient.27213@ohm>
	<60ed19d40510120202m129fb1fci8aab71a9ecb1b28e@mail.gmail.com>
	<434DC691.3060709@divmod.com>
	<03D1CE2D-EF00-4A2D-891B-B045EF735319@fuhm.net>
Message-ID: <1129680205.31353.10.camel@localhost.localdomain>

On Tue, 2005-10-18 at 00:04 -0400, James Y Knight wrote:
> On Oct 12, 2005, at 10:29 PM, Glyph Lefkowitz wrote:
> > Hmm.  Trial interaction is something I haven't messed with yet; I
> > haven't put trial directory below a __path__ entry.
> >
> > Arguably this is simply a bug in Trial that should be fixed, though.

[snip explanation]

> So, my solution:
> I changed the recursive process to actually import every package (not  
> every module!), so it can use the package's __path__ attribute to  
> find submodules. This works, mostly.

Well, thanks for fixing that bug :).  Is there any issue for this
somewhere already, before I file one?

> One issue is that it causes trial to emit an import error message  
> from trying to import twisted.internet.iocpreactor and  
> twisted.internet.serialport (because they aren't importable on my  
> system). This is necessary -- trial does not know they don't have a  
> __path__ attribute before importing them, so it has no way of telling  
> that they don't have test modules hidden inside. It would similarly  
> be a bad idea to simply ignore all import errors of packages, as then  
> real errors may be silenced. This could be simply solvable via a  
> special attribute like "no_tests_in_packages= ['iocpreactor',  
> 'serialport']" to twisted/internet/__init__ so trial knows not to  
> bother trying to import those.

That sounds like a good solution to an unfortunate problem.  I notice
that the practice used in iocp and serialport is standardized in the
coding standard (and I probably put it there); is there *any* better way
to do module-level promotions?  Really the way things like that should
work should be a __getattr__ on the module or something, so that you
don't do unnecessary imports.

> The other issue is that test files expecting to be imported as  
> modules _still_ won't work if specified by filename. But, I think  
> that's just a fact of life -- it is not possible in general to do the  
> correct back conversion. AFAICT we will just have to accept this  
> slight functionality loss and recommend that everybody specify module  
> names rather than file names (at least for running twisted's tests --  
> it's only broken when filenameToModuleName is wrong). Also, Trial  
> *does* run the file specified even if it can't figure out how to  
> import it, so if the test code doesn't actually depend on having its  
> real module name (e.g. it doesn't use things like relative imports or  
> __name__), it will also still work.

While we're at this, should we also be talking about running unit tests
which are packaged within zipfiles?  It seems like some of the same
problems might be addressed, as long as we are suggesting that
specifying filenames for tests is not a good idea.

I'm more interested in testing the actual code packaged in zipfiles than
running the tests from there, but it seems like having the whole package
zipped up would be an interesting meta-test case.





From jml at mumak.net  Tue Oct 18 20:13:52 2005
From: jml at mumak.net (Jonathan Lange)
Date: Wed, 19 Oct 2005 11:13:52 +1100
Subject: [Twisted-Python] Subproject releases
In-Reply-To: <1129680205.31353.10.camel@localhost.localdomain>
References: <446737B7-AA24-47AB-B64F-96C1D6D424B7@fuhm.net>
	<20051012054938.3914.543518999.divmod.quotient.27213@ohm>
	<60ed19d40510120202m129fb1fci8aab71a9ecb1b28e@mail.gmail.com>
	<434DC691.3060709@divmod.com>
	<03D1CE2D-EF00-4A2D-891B-B045EF735319@fuhm.net>
	<1129680205.31353.10.camel@localhost.localdomain>
Message-ID: <d06a5cd30510181713j7a594790v@mail.gmail.com>

On 19/10/05, Glyph Lefkowitz <glyph at divmod.com> wrote:
> On Tue, 2005-10-18 at 00:04 -0400, James Y Knight wrote:
> > On Oct 12, 2005, at 10:29 PM, Glyph Lefkowitz wrote:
> > So, my solution:
> > I changed the recursive process to actually import every package (not
> > every module!), so it can use the package's __path__ attribute to
> > find submodules. This works, mostly.
>
> Well, thanks for fixing that bug :).  Is there any issue for this
> somewhere already, before I file one?
>

http://twistedmatrix.com/bugs/issue1276

As discussed on #twisted, this needs several more unit tests before it
goes into trunk.


> While we're at this, should we also be talking about running unit tests
> which are packaged within zipfiles?  It seems like some of the same
> problems might be addressed, as long as we are suggesting that
> specifying filenames for tests is not a good idea.
>

There isn't a bug for this.  If it's something you actually want done
then please file it and assign it to me.

cheers,
jml



From jml at mumak.net  Tue Oct 18 20:23:46 2005
From: jml at mumak.net (Jonathan Lange)
Date: Wed, 19 Oct 2005 11:23:46 +1100
Subject: [Twisted-Python] Subproject releases
In-Reply-To: <03D1CE2D-EF00-4A2D-891B-B045EF735319@fuhm.net>
References: <446737B7-AA24-47AB-B64F-96C1D6D424B7@fuhm.net>
	<20051012054938.3914.543518999.divmod.quotient.27213@ohm>
	<60ed19d40510120202m129fb1fci8aab71a9ecb1b28e@mail.gmail.com>
	<434DC691.3060709@divmod.com>
	<03D1CE2D-EF00-4A2D-891B-B045EF735319@fuhm.net>
Message-ID: <d06a5cd30510181723l16eb294fl@mail.gmail.com>

On 18/10/05, James Y Knight <foom at fuhm.net> wrote:
> On Oct 12, 2005, at 10:29 PM, Glyph Lefkowitz wrote:
> > Hmm.  Trial interaction is something I haven't messed with yet; I
> > haven't put trial directory below a __path__ entry.
> >
> > Arguably this is simply a bug in Trial that should be fixed, though.
> >
>
> The other issue is that test files expecting to be imported as
> modules _still_ won't work if specified by filename. But, I think
> that's just a fact of life -- it is not possible in general to do the
> correct back conversion. AFAICT we will just have to accept this
> slight functionality loss and recommend that everybody specify module
> names rather than file names (at least for running twisted's tests --
> it's only broken when filenameToModuleName is wrong). Also, Trial
> *does* run the file specified even if it can't figure out how to
> import it, so if the test code doesn't actually depend on having its
> real module name (e.g. it doesn't use things like relative imports or
> __name__), it will also still work.
>

Are you recommending that we remove filename support from the Trial
command line?  Or just that we leave the filename support in a
slightly-broken state, and spit out some warnings?

If we remove filename support entirely, then there are consequences
for the buildbot quick build: there will be no easy way to test
changed files.  Buildbot passes filenames of changed files to Trial
via the (poorly named) --testmodule option. Sometimes these files are
actual test modules, which need to be imported and ran.  If we remove
filename support, we break this buildbot feature.

This is a big chunk of feature.  I'm very keen to hear what other
people think about it.

cheers,
jml



From foom at fuhm.net  Wed Oct 19 02:00:14 2005
From: foom at fuhm.net (James Y Knight)
Date: Wed, 19 Oct 2005 00:00:14 -0600
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <E1ES6zm-000568-00@pyramid.twistedmatrix.com>

Bug summary
______________________
Since 2005-10-12 06:00:02.490000:
 Bugs opened: 6   Bugs closed: 3   Total open bugs: 478 (+3)
  Urgent: 3 (-2)
  Bug: 233 (+4)
  Feature: 164 (+0)
  Wish: 78 (+1)

New / Reopened Bugs
______________________
                    ==== Bug ====
[BACKPORT, CORE] [PATCH] FTP server does not send 221 message when closing  (5 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1275 opened by pjdm

iocpreactor calls makeConnection without connection  (4 days ago)
       http://twistedmatrix.com/bugs/issue1277 opened by ghazel

[TRIAL] loadPackage (recurse or otherwise) should respect __path__  (5 days ago)
       http://twistedmatrix.com/bugs/issue1276 opened by jml

win32reactor spawnProcess incorrectly escapes cmd line  (2 months ago)
       http://twistedmatrix.com/bugs/issue1123 opened by justinj

socket.error: (53, 'Software caused connection abort')  (6 days ago)
       http://twistedmatrix.com/bugs/issue1274 opened by ghazel

                    ==== Wish ====
utf-8 plus different charset encodings  (4 days ago)
       http://twistedmatrix.com/bugs/issue1278 opened by tofu

Bugs Closed
______________________
                    ==== Urgent ====
[CORE, TRIAL] trial excludes explicitly specified test modules  (1 week ago)
       http://twistedmatrix.com/bugs/issue1266 opened by exarkun, closed by jml

                    ==== Bug ====
[BACKPORT, CORE] [PATCH] FTP server does not send 221 message when closing  (5 days ago)
       http://twistedmatrix.com/bugs/issue1275 opened by pjdm, closed by exarkun

[XISH] twisted.xish.xmlstream parse error  (4 months ago)
       http://twistedmatrix.com/bugs/issue1078 opened by tofu, closed by ralphm




From gmcdonald at infocomp.com  Wed Oct 19 02:33:59 2005
From: gmcdonald at infocomp.com (Grant McDonald)
Date: Wed, 19 Oct 2005 16:33:59 +1000
Subject: [Twisted-Python] Win32 installers of Twisted 2.1?
Message-ID: <61DA7719C45FD31185280008C733EF6E04AC4FEA@XCHANGE>

> Win32 requires a "sumo" package to be built.

Can someone adequately explain what a sumo package is in relation to the
normal twisted package? I've seen them for download but never paired with an
explanation :)

Thanks,

Grant
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20051019/851297e3/attachment.htm 

From radeex at gmail.com  Wed Oct 19 03:52:59 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Wed, 19 Oct 2005 18:52:59 +1100
Subject: [Twisted-Python] Win32 installers of Twisted 2.1?
In-Reply-To: <61DA7719C45FD31185280008C733EF6E04AC4FEA@XCHANGE>
References: <61DA7719C45FD31185280008C733EF6E04AC4FEA@XCHANGE>
Message-ID: <60ed19d40510190052q4873f5fq50ed2ef3e200cb48@mail.gmail.com>

On 10/19/05, Grant McDonald <gmcdonald at infocomp.com> wrote:
>
>
> > Win32 requires a "sumo" package to be built.
>
> Can someone adequately explain what a sumo package is in relation to the
> normal twisted package? I've seen them for download but never paired with an
> explanation :)

It's a package containing Twisted and all subprojects. There is a good
explanation here:

http://twistedmatrix.com/projects/core/documentation/upgrades/2.0/split.html

--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+



From justinjohnson at gmail.com  Wed Oct 19 11:59:44 2005
From: justinjohnson at gmail.com (Justin Johnson)
Date: Wed, 19 Oct 2005 10:59:44 -0500
Subject: [Twisted-Python] Need reviewer for IOCP spawnProcess patch
Message-ID: <94a776e70510190859g261aaf09v4402e730f7d3f894@mail.gmail.com>

I have a patch adding spawnProcess to the IOCP reactor (
http://twistedmatrix.com/bugs/issue1008) applied to my own branch
(/branches/justinj). I need one of the core developers to review the patch
and make a note in the issue if you approve of the patch, or noting changes
you'd like to see.
 So far I have had a difficult time finding anyone to review the patch. Will
someone please volunteer who can look at it soon?
 Thanks,
Justin
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20051019/a769d899/attachment.htm 

From justinjohnson at gmail.com  Wed Oct 19 12:05:07 2005
From: justinjohnson at gmail.com (Justin Johnson)
Date: Wed, 19 Oct 2005 11:05:07 -0500
Subject: [Twisted-Python] Stability of the IOCP Reactor
In-Reply-To: <4354F915.9070403@treepy.com>
References: <1129640785.11441.31.camel@localhost.localdomain>
	<4354F915.9070403@treepy.com>
Message-ID: <94a776e70510190905v4eb8294ge6b5020ea5d5ffff@mail.gmail.com>

I won't be able to look at it for a while, but will you submit a bug
recording the details of this problem and assign it to me (justinj)?
 http://twistedmatrix.com/bugs

 On 10/18/05, Patrick Lauber <digi at treepy.com> wrote:
>
> Hi,
>
> I am running a server with the IOCP reactor because I need a lot of
> concurent connections. If i use the default reactor the program is
> running for weeks withouth any problems. When i switched to IOCP the
> program seams not to accept any new connections after some hours or a
> day, the old seam to hold. I am not sure if the socket is closed or if
> the new connection don't spawn a new protocol instance anymore...
>
> any idea of what this could be?
>
> cheers
>
> pat
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20051019/edf693f6/attachment.htm 

From foom at fuhm.net  Wed Oct 19 12:10:42 2005
From: foom at fuhm.net (James Y Knight)
Date: Wed, 19 Oct 2005 12:10:42 -0400
Subject: [Twisted-Python] Subproject releases
In-Reply-To: <d06a5cd30510181723l16eb294fl@mail.gmail.com>
References: <446737B7-AA24-47AB-B64F-96C1D6D424B7@fuhm.net>
	<20051012054938.3914.543518999.divmod.quotient.27213@ohm>
	<60ed19d40510120202m129fb1fci8aab71a9ecb1b28e@mail.gmail.com>
	<434DC691.3060709@divmod.com>
	<03D1CE2D-EF00-4A2D-891B-B045EF735319@fuhm.net>
	<d06a5cd30510181723l16eb294fl@mail.gmail.com>
Message-ID: <39A35A43-620A-427D-AEEE-A7A00026AA93@fuhm.net>


On Oct 18, 2005, at 8:23 PM, Jonathan Lange wrote:

> Are you recommending that we remove filename support from the Trial
> command line?  Or just that we leave the filename support in a
> slightly-broken state, and spit out some warnings?

I was recommending leaving it alone in slightly-broken state.

> If we remove filename support entirely, then there are consequences
> for the buildbot quick build: there will be no easy way to test
> changed files.  Buildbot passes filenames of changed files to Trial
> via the (poorly named) --testmodule option. Sometimes these files are
> actual test modules, which need to be imported and ran.  If we remove
> filename support, we break this buildbot feature.

This also still be broken even if we keep semi-broken filename  
support, unless we also ensure that all of twisted's tests can be run  
without being imported under their proper module name. Sigh.

A possibly better alternative is to write a bit of Twisted-specific  
code for the buildbot quickbuilder to do the backwards translation  
from filename->modulename. That is not very hard (delete "$project/"  
prefix, '.py' suffix, replace '/' with '.'), but it is twisted-repo- 
layout-specific, so it can't really be reasonably done in trial itself.

On Oct 18, 2005, at 8:03 PM, Glyph Lefkowitz wrote:
> While we're at this, should we also be talking about running unit  
> tests
> which are packaged within zipfiles?  It seems like some of the same
> problems might be addressed, as long as we are suggesting that
> specifying filenames for tests is not a good idea.
>
> I'm more interested in testing the actual code packaged in zipfiles  
> than
> running the tests from there, but it seems like having the whole  
> package
> zipped up would be an interesting meta-test case.

Yes, I was thinking about that as well, and it looks like we should  
be able to modify the new recursive code to work inside a zipfile  
(and other setuptools-compatible-loaders). It provides replacement  
listdir, isdir, and exists functions, which is all that this code needs.

James



From nico at tekNico.net  Thu Oct 20 03:55:44 2005
From: nico at tekNico.net (Nicola Larosa)
Date: Thu, 20 Oct 2005 09:55:44 +0200
Subject: [Twisted-Python] Freevo 2.0, Kamaelia, pyevent,
	Eventnet/LGT: what's going on?
Message-ID: <43574D80.40801@tekNico.net>

One year ago the Freevo project, for its 2.0 rewrite, dropped Twisted, and
then went and reimplemented something similar. Then there are Kamaelia,
pyevent, and EventNet inside LGT.

Why isn't Twisted seen, by these projects at least, as a viable tool? Is
the event-driven Python world undergoing the same fragmentation as the web
framework one?


"Freevo is an open-source home theatre PC platform based on Linux and a
number of open-source audio/video tools."

http://freevo.sourceforge.net/about.html

"CurrentStatus

For Freevo 2.0 we changed many parts of the code...

Changes

* Changed the main loop to use PyNotifier. No threads are allowed anymore
and every part must take care that the notifier loop is kept alive. Not all
parts respect that right now.

* Removed Twisted. It is a huge monster and hard to understand. For
inter-process communication a python implementation (PyMbus) of the Mbus
transport protocol is used. As a side effect, modules using twisted need to
be rewritten."

http://freevo.sourceforge.net/cgi-bin/freevo-2.0/CurrentStatus

The reasons for the switch are outlined in this mailing list thread:

switching to pynotifier and pymbus
http://sourceforge.net/mailarchive/forum.php?thread_id=5523105&forum_id=9200

Kamaelia
http://kamaelia.sourceforge.net/

pyevent
http://monkey.org/~dugsong/pyevent/

EventNet - LGT
http://lgt.berlios.de/#eventnet

-- 
Nicola Larosa - nico at tekNico.net

When people with lots of weapons and training in violence feel cornered,
it tends to not be a pretty picture. -- Kirby Urner, August 2005





From sc at linux.it  Thu Oct 20 07:16:20 2005
From: sc at linux.it (Stefano Canepa)
Date: Thu, 20 Oct 2005 13:16:20 +0200
Subject: [Twisted-Python] testing my application
Message-ID: <1129806980.15314.24.camel@localhost.localdomain>

Hi all,
	I am looking for a simple way to write test cases for my project. What
is the right way to be as standard as possible? I know the application
works becouse I developed a client and the server speaking the same
protocol and used lots of print to have output and a sniffer to see
network trafic but I understand this is not the right way.

I read unittest docs, I found twisted.trial and pocked around the test
cases of some twisted protocol, what I was unable to understand is how
to write my taste cases. Could somebody show me the way or point me to
some docs?

TIA
Stefano

-- 
Stefano Canepa aka sc: sc at linux.it  http://www.stefanocanepa.it
Three great virtues of a programmer: laziness, impatience and hubris.
Le tre grandi virt? di un programmatore: pigrizia, impazienza e
arroganza. (Larry Wall)
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20051020/92c5403a/attachment.pgp 

From behnel_ml at gkec.informatik.tu-darmstadt.de  Thu Oct 20 07:24:38 2005
From: behnel_ml at gkec.informatik.tu-darmstadt.de (Stefan Behnel)
Date: Thu, 20 Oct 2005 13:24:38 +0200
Subject: [Twisted-Python] Freevo 2.0, Kamaelia, pyevent,	Eventnet/LGT:
	what's going on?
In-Reply-To: <43574D80.40801@tekNico.net>
References: <43574D80.40801@tekNico.net>
Message-ID: <43577E76.80605@gkec.informatik.tu-darmstadt.de>

Nicola Larosa wrote:
> One year ago the Freevo project, for its 2.0 rewrite, dropped Twisted, and
> then went and reimplemented something similar. Then there are Kamaelia,
> pyevent, and EventNet inside LGT.
> 
> Why isn't Twisted seen, by these projects at least, as a viable tool? Is
> the event-driven Python world undergoing the same fragmentation as the web
> framework one?

I do see a couple of differences between the systems. Kamaelia, for example,
is newer and completely built on top of Python's generator feature (which in
Twisted is a niche implementation). It looks cleaner than Twisted but it is
not as 'feature-complete'. So it may get ugly once it implements more
features. That's a general problem, just compare Corba with Web-Services,
you'll see.

It's OpenSource, people start new projects for various reasons. Sometimes they
work out, sometimes they don't.

Stefan




From Marcin.Kasperski at softax.com.pl  Thu Oct 20 09:19:15 2005
From: Marcin.Kasperski at softax.com.pl (Marcin Kasperski)
Date: Thu, 20 Oct 2005 15:19:15 +0200
Subject: [Twisted-Python] testing my application
In-Reply-To: <1129806980.15314.24.camel@localhost.localdomain>
References: <1129806980.15314.24.camel@localhost.localdomain>
Message-ID: <200510201519.15491.Marcin.Kasperski@softax.com.pl>

Dnia czwartek, 20 pa?dziernika 2005 13:16, Stefano Canepa 
napisa?:
> Hi all,
> 	I am looking for a simple way to write test cases for my
> project. What is the right way to be as standard as possible?
> I know the application works becouse I developed a client and
> the server speaking the same protocol and used lots of print
> to have output and a sniffer to see network trafic but I
> understand this is not the right way.
>

Hmm, I have the similar problem. I have been using python 
unittest to test my application components but recently I 
started to write classess which return deferreds and I am not 
sure how to test them.

First I tried to use standard unittest and install callbacks 
which call self.fail or self.succeed - but it seems that the 
errors are just ignored.

Then I found on this list note about deferredResult and tried 
using it (keeping normal unittest) but seems the application 
just hangs here (for the simple reason I guess, no reactor is 
running)

Then I found about twisted.trial.unittest. But when I replaced 
import unittest with from twisted.trial import unittest, I found 
that there is no 'main' function in this module.

What should I do? Go back to normal unittest but start some 
reactor before unittest.main() ?

Does there anywhere exist any complete ***standalone*** test 
example (run for itself instead of being run within whole 
twisted test framework)?




From exarkun at divmod.com  Thu Oct 20 09:30:49 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Thu, 20 Oct 2005 09:30:49 -0400
Subject: [Twisted-Python] testing my application
In-Reply-To: <200510201519.15491.Marcin.Kasperski@softax.com.pl>
Message-ID: <20051020133049.27584.177844260.divmod.quotient.1700@ohm>

On Thu, 20 Oct 2005 15:19:15 +0200, Marcin Kasperski <marcin.kasperski at softax.com.pl> wrote:
>Dnia czwartek, 20 pa?dziernika 2005 13:16, Stefano Canepa
>napisa?:
>> Hi all,
>> 	I am looking for a simple way to write test cases for my
>> project. What is the right way to be as standard as possible?
>> I know the application works becouse I developed a client and
>> the server speaking the same protocol and used lots of print
>> to have output and a sniffer to see network trafic but I
>> understand this is not the right way.
>>
>
>Hmm, I have the similar problem. I have been using python
>unittest to test my application components but recently I
>started to write classess which return deferreds and I am not
>sure how to test them.
>
>First I tried to use standard unittest and install callbacks
>which call self.fail or self.succeed - but it seems that the
>errors are just ignored.
>
>Then I found on this list note about deferredResult and tried
>using it (keeping normal unittest) but seems the application
>just hangs here (for the simple reason I guess, no reactor is
>running)
>
>Then I found about twisted.trial.unittest. But when I replaced
>import unittest with from twisted.trial import unittest, I found
>that there is no 'main' function in this module.
>
>What should I do? Go back to normal unittest but start some
>reactor before unittest.main() ?
>
>Does there anywhere exist any complete ***standalone*** test
>example (run for itself instead of being run within whole
>twisted test framework)?
>

exarkun at boson:~$ cat > test_foo.py
from twisted.trial import unittest

from twisted.internet import defer

def myTestableFunction(x):
    return defer.succeed(x)

def myBrokenFunction(y):
    return defer.fail(ZeroDivisionError("Math is hard"))

def MyUnitTests(unittest.TestCase):
    def testTestable(self):
        return myTestableFunction(10).addCallback(self.assertEquals, 10)
    def testBroken(self):
        return self.assertFailure(myBrokenFunction("foo"), ZeroDivisionError)
exarkun at boson:~$ trial test_foo.py 
Running 2 tests.
  test_foo
    MyUnitTests
      testBroken ...                          [OK]
      testTestable ...                        [OK]

--------------------------------------------------
Ran 2 tests in 0.033s

PASSED (successes=2)
exarkun at boson:~$ 

Hope this helps,

Jp



From Marcin.Kasperski at softax.com.pl  Thu Oct 20 10:05:03 2005
From: Marcin.Kasperski at softax.com.pl (Marcin Kasperski)
Date: Thu, 20 Oct 2005 16:05:03 +0200
Subject: [Twisted-Python] testing my application
In-Reply-To: <20051020133049.27584.177844260.divmod.quotient.1700@ohm>
References: <20051020133049.27584.177844260.divmod.quotient.1700@ohm>
Message-ID: <200510201605.09012.Marcin.Kasperski@softax.com.pl>

Thanks for the info. Running tests vai 'trial test_x.foo' has unpleasant effect of not allowing debugging but simple trick works:
   if __name__ == "__main__":
      import twisted.scripts.trial
      import sys
      sys.argv = ['-m', 'my_test' ]
      twisted.scripts.trial.run()
(BTW, what about patching run so it could get parameters and fallback to argv only when they are not given?)

Currently I have the following problem: my test script hangs. 
Via simplification I got to the following text (requires some postgres database):

from twisted.trial import unittest
from twisted.trial.util import deferredResult
import psycopg
from twisted.enterprise import adbapi

DSN = "dbname=marcink port=5433 user=user password=pwd host=localhost"

class MyTestCase(unittest.TestCase):
    def setUp(self):
        self.dbpool = adbapi.ConnectionPool('psycopg', DSN)
        # (populating some test data)
        deferredResult( self.dbpool.runInteraction(self._insertTestData) )
    def tearDown(self):
        deferredResult( self.dbpool.runOperation("DROP TABLE mytable") );
    def _insertTestData(self, tx):
        tx.execute("CREATE TABLE mytable(id INTEGER)")
        tx.execute("INSERT INTO mytable(id) VALUES(1)")
    def testSomething(self):
        d = self.dbpool.runQuery("SELECT id FROM mytable")
        d.addCallback( lambda rows: self.assertEquals(len(rows), 1) )

When I run 
   trial -v my_test
I get
my_test
  MyTestCase
    testSomething ... 
(and the test hangs forever)



From itamar at itamarst.org  Thu Oct 20 10:13:29 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 20 Oct 2005 10:13:29 -0400
Subject: [Twisted-Python] Freevo 2.0, Kamaelia, pyevent, Eventnet/LGT:
	what's going on?
In-Reply-To: <43574D80.40801@tekNico.net>
References: <43574D80.40801@tekNico.net>
Message-ID: <1129817610.9136.7.camel@localhost.localdomain>

On Thu, 2005-10-20 at 09:55 +0200, Nicola Larosa wrote:
> One year ago the Freevo project, for its 2.0 rewrite, dropped Twisted, and
> then went and reimplemented something similar. Then there are Kamaelia,
> pyevent, and EventNet inside LGT.

There have always been people who don't want to use "large" frameworks
because they are "too big", which is to say involve having a few more MB
used on disk. This was part of the motivation for splitting up Twisted:
marketing.

pyevent: much lower level than Twisted, so requires a lot more work on
developer's part (Twisted also provides such a low level interface
though in additional to e.g. the nice high level TCP abstraction with
buffering and so on).
EventNet: requires Twisted apparently :)
kamaelia: an experimental platform for what I hear are some interesting
ideas we should look at; probably would be a good candidate for running
on top of Twisted since they seem to deal with higher levels of
abstraction mostly.

> Why isn't Twisted seen, by these projects at least, as a viable tool? Is
> the event-driven Python world undergoing the same fragmentation as the web
> framework one?

Not as far as I can tell. E.g. zope3, which had their own event loop,
just switched to Twisted
(http://mail.zope.org/pipermail/zope3-checkins/2005-October/026115.html).




From Marcin.Kasperski at softax.com.pl  Thu Oct 20 10:18:15 2005
From: Marcin.Kasperski at softax.com.pl (Marcin Kasperski)
Date: Thu, 20 Oct 2005 16:18:15 +0200
Subject: [Twisted-Python] testing my application
In-Reply-To: <200510201605.09012.Marcin.Kasperski@softax.com.pl>
References: <20051020133049.27584.177844260.divmod.quotient.1700@ohm>
	<200510201605.09012.Marcin.Kasperski@softax.com.pl>
Message-ID: <200510201618.18202.Marcin.Kasperski@softax.com.pl>

> Currently I have the following problem: my test script hangs.
> Via simplification I got to the following text (requires some
> postgres database):
>
>  def setUp(self):
>      self.dbpool = adbapi.ConnectionPool('psycopg', DSN)
>      # (populating some test data)
>      deferredResult( self.dbpool.runInteraction(self._insertTestData) ) 

Hmm, replying to myself, it seems that when I changed to 

   def setUp(self):
      self.dbpool = adbapi.ConnectionPool('psycopg', DSN)
      return self.dbpool.runInteraction(self._insertTestData)

my test seems to work. Could anyone confirm that setUp (and tearDown) are also allowed to return deferreds?

I have also another problem. In fact I need to run a few deferred-returning functions within setUp. How should I join them? I can create DeferredList but will it then be checked for failures?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20051020/960cebd4/attachment.htm 

From Marcin.Kasperski at softax.com.pl  Thu Oct 20 10:30:02 2005
From: Marcin.Kasperski at softax.com.pl (Marcin Kasperski)
Date: Thu, 20 Oct 2005 16:30:02 +0200
Subject: [Twisted-Python] testing my application
In-Reply-To: <200510201618.18202.Marcin.Kasperski@softax.com.pl>
References: <20051020133049.27584.177844260.divmod.quotient.1700@ohm>
	<200510201605.09012.Marcin.Kasperski@softax.com.pl>
	<200510201618.18202.Marcin.Kasperski@softax.com.pl>
Message-ID: <200510201630.02617.Marcin.Kasperski@softax.com.pl>

> Hmm, replying to myself, it seems that when I changed to
>
>    def setUp(self):
>       self.dbpool = adbapi.ConnectionPool('psycopg', DSN)
>       return self.dbpool.runInteraction(self._insertTestData)
>
> my test seems to work. 

Continuing replying to myself, the test seems  to work even too 
well. In fact it insist on succeeding. For instance when I 
changed sql command to some rubbish, the test still succeeds. 
For example this test is raported as succesfully executed

    def testSomething(self):
        d = self.dbpool.runQuery("RUBBISH SELECT BLAH BLAH")
        return d

I had to miss something. But ... what?



From Marcin.Kasperski at softax.com.pl  Thu Oct 20 11:22:23 2005
From: Marcin.Kasperski at softax.com.pl (Marcin Kasperski)
Date: Thu, 20 Oct 2005 17:22:23 +0200
Subject: [Twisted-Python] testing my application
In-Reply-To: <200510201630.02617.Marcin.Kasperski@softax.com.pl>
References: <20051020133049.27584.177844260.divmod.quotient.1700@ohm>
	<200510201618.18202.Marcin.Kasperski@softax.com.pl>
	<200510201630.02617.Marcin.Kasperski@softax.com.pl>
Message-ID: <200510201722.23668.Marcin.Kasperski@softax.com.pl>

> Continuing replying to myself, the test seems  to work even
> too well. In fact it insist on succeeding. For instance when I
> changed sql command to some rubbish, the test still succeeds.
> For example this test is raported as succesfully executed
>
>     def testSomething(self):
>         d = self.dbpool.runQuery("RUBBISH SELECT BLAH BLAH")
>         return d
>
> I had to miss something. But ... what?

As one more attempt I just ugraded from twisted 1.3 to twisted 
2.0 (= from twisted version present in Debian testing to twisted 
version present in Debian unstable). 

And now ........ the script which in 1.3 ignored errors but 
worked, *hangs(, in exactly the same way in which it used to 
hang when I used deferredResult.



From solipsis at pitrou.net  Thu Oct 20 11:51:20 2005
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Thu, 20 Oct 2005 17:51:20 +0200
Subject: [Twisted-Python] Freevo 2.0, Kamaelia, pyevent, Eventnet/LGT:
	what's going on?
In-Reply-To: <43574D80.40801@tekNico.net>
References: <43574D80.40801@tekNico.net>
Message-ID: <1129823481.11151.13.camel@fsol>

Le jeudi 20 octobre 2005 ? 09:55 +0200, Nicola Larosa a ?crit :
> One year ago the Freevo project, for its 2.0 rewrite, dropped Twisted, and
> then went and reimplemented something similar. Then there are Kamaelia,
> pyevent, and EventNet inside LGT.
> 
> Why isn't Twisted seen, by these projects at least, as a viable tool?

I don't know. FWIW, my current opinion about Twisted (may change without
warning ;-)) is that:
- all traditional network functions are quite clear, easy to use and
stable
- high-level features seem better avoided since documentation is often
very lacking and the API does not seem stable
- design choices are not documented at all (for example, why a custom
logging module instead of the Python-provided one?), so they often look
gratuitous
- the tendency to advocate proprietary protocols (like PB) without
warning the user should be mitigated
- the architecture is sometimes bizarre or badly described (the
credential stuff looks like Chinese to me); for example, why is there a
distinction between "*Protocol" and "*Factory" types?

I often recommend the use of Twisted for standard network functions. But
I stay away of the more sophisticated stuff (including twistd, PB,
Nevow, etc.). Grouping all this stuff together with the basic, trusted,
dependable network classes may yield a perception of twisted as
bloatware.


(OTOH, I very briefly looked at Kamaelia's introduction doc and I don't
find it attractive - this kind of dataflow-programming model looks quite
unflexible)

Regards

Antoine.





From Marcin.Kasperski at softax.com.pl  Thu Oct 20 12:07:19 2005
From: Marcin.Kasperski at softax.com.pl (Marcin Kasperski)
Date: Thu, 20 Oct 2005 18:07:19 +0200
Subject: [Twisted-Python] Solved? Or Not? testing my application
In-Reply-To: <200510201722.23668.Marcin.Kasperski@softax.com.pl>
References: <20051020133049.27584.177844260.divmod.quotient.1700@ohm>
	<200510201630.02617.Marcin.Kasperski@softax.com.pl>
	<200510201722.23668.Marcin.Kasperski@softax.com.pl>
Message-ID: <200510201807.20029.Marcin.Kasperski@softax.com.pl>

> As one more attempt I just ugraded from twisted 1.3 to twisted
> 2.0 (= from twisted version present in Debian testing to
> twisted version present in Debian unstable).
>
> And now ........ the script which in 1.3 ignored errors but
> worked, *hangs(, in exactly the same way in which it used to
> hang when I used deferredResult.

I found the solution. The following modification caused 
everything to work as expected

    def setUp(self):
        self.dbpool = adbapi.ConnectionPool('psycopg', DSN)
        self.dbpool.start()
        # ...

(I added self.dbpool.start())

Confusing part is that start method doc tells:

            If you are using the reactor normally, this function 
            does *not* need to be called.

So it seems trial is *not* using reactor 'normally' - whatever 
does it mean.



From maristaran at gmail.com  Thu Oct 20 12:49:29 2005
From: maristaran at gmail.com (=?ISO-8859-15?Q?Manuel_Aristar=E1n?=)
Date: Thu, 20 Oct 2005 13:49:29 -0300
Subject: [Twisted-Python] LDAP Checker
Message-ID: <869525070.20051020134929@gmail.com>

Hi everybody,

I'm learning Twisted, and already have a simple application
running.
I wante to experiment adding an LDAP checker to it. Is there any open
source implementation of such a thing? I'm aware of LDAPtor, but I'm
looking for some examples of integration with twisted.cred.

Thanks,

-- 
Manuel Aristar?n <maristaran at gmail.com>
Buenos Aires, Argentina




From dialtone at divmod.com  Thu Oct 20 14:09:43 2005
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Thu, 20 Oct 2005 20:09:43 +0200
Subject: [Twisted-Python] Freevo 2.0, Kamaelia, pyevent,
	Eventnet/LGT: what's going on?
In-Reply-To: <1129823481.11151.13.camel@fsol>
References: <43574D80.40801@tekNico.net> <1129823481.11151.13.camel@fsol>
Message-ID: <20051020180943.GF9373@divmod.com>

On Thu, Oct 20, 2005 at 05:51:20PM +0200, Antoine Pitrou wrote:
> - high-level features seem better avoided since documentation is often
> very lacking and the API does not seem stable

Well... I have applications running on twisted for over an year without any
breakage in API. And API compatibility is guaranteed between minor release,
and I'd say also major right now, since there is also a complete compatibility
layer for the old interfaces. Documentation is lacking sometimes, only for
jabber AFAIK. There are plenty of tests and examples. Also when you understand
twisted everything else comes just straight off.

> - design choices are not documented at all (for example, why a custom
> logging module instead of the Python-provided one?), so they often look
> gratuitous

The python standard one do not seem so nice. In fact there are a number of
projects to substitute it with something better. One is twisted.python.log
another is py.log and there are others out there. Another example?

> - the tendency to advocate proprietary protocols (like PB) without
> warning the user should be mitigated

PB is not proprietary... The protocol is documented (maybe it's the best
documented thing in twisted) and source code is available. Then why should you
warn somebody for using a very good thing?

> - the architecture is sometimes bizarre or badly described (the
> credential stuff looks like Chinese to me); for example, why is there a
> distinction between "*Protocol" and "*Factory" types?

You are being unfair here. I'm sorry to sound harsh but if you don't
understand something it doesn't mean that it's bizarre or hairy.

The Factory keeps state for many protocols since the protocol is created and
destroyed with the connection. Seems rather obvious for anybody having just
read the basic finger tutorial.

The credential stuff couldn't be easier than that.
It's pluggable, which means that it can be put in front of anything, but there
must be a way, for this anything, to retrieve credentials for the user that is
currently requiring the login, which means that it is made of a protocol side
and a twisted.cred side.

In the case of Nevow the protocol side is guard.py and then there is cred.
The aim of guard is to retrieve the arguments username and password from the
request and pass them to portal.login(). Portal login has a set of checkers
and a realm.

What happens is:
the portal calls requestAvatarId on the checker passing the credentials to it.
If the credentials are checked it will return an avatarId, otherwise it will
raise an UnauthorizedLogin exception.
after the portal as received the result of the requestAvatarId it then calls
requestAvatar on the realm passing the avatarId to it and the interface
associated with where the login request came from (web, pb, ftp, whatever)
[also supplied by guard].
then the result of requestAvatar is displayed to the user.

I wouldn't know how to do this in an easier and simpler way, yet maintaining
the same code reusability.

> I often recommend the use of Twisted for standard network functions. But
> I stay away of the more sophisticated stuff (including twistd, PB,
> Nevow, etc.). Grouping all this stuff together with the basic, trusted,
> dependable network classes may yield a perception of twisted as
> bloatware.

If you don't want to learn anything of course. If instead you go beyond the
surface and learn something for real then it may happen that you find it is
istead a great problem solver for a lot of problems.

-- 
Valentino Volonghi aka Dialtone
Now Running MacOSX 10.4
Blog: http://vvolonghi.blogspot.com
http://weever.berlios.de
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 186 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20051020/48191447/attachment.pgp 

From itamar at itamarst.org  Thu Oct 20 14:37:18 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 20 Oct 2005 14:37:18 -0400
Subject: [Twisted-Python] Freevo 2.0, Kamaelia, pyevent, Eventnet/LGT:
	what's going on?
In-Reply-To: <20051020180943.GF9373@divmod.com>
References: <43574D80.40801@tekNico.net> <1129823481.11151.13.camel@fsol>
	<20051020180943.GF9373@divmod.com>
Message-ID: <1129833438.9136.44.camel@localhost.localdomain>

On Thu, 2005-10-20 at 20:09 +0200, Valentino Volonghi aka Dialtone
wrote:

> > - design choices are not documented at all (for example, why a custom
> > logging module instead of the Python-provided one?), so they often look
> > gratuitous
> 
> The python standard one do not seem so nice. In fact there are a number of
> projects to substitute it with something better. One is twisted.python.log
> another is py.log and there are others out there. Another example?

We had a logging system *before* Python did, and for that matter we
still run on versions of Python that don't include it (2.2). You can use
Twisted with python's logging system if you want.





From firemoth at gmail.com  Thu Oct 20 18:10:05 2005
From: firemoth at gmail.com (Timothy Fitz)
Date: Thu, 20 Oct 2005 18:10:05 -0400
Subject: [Twisted-Python] Win32 installers of Twisted 2.1?
In-Reply-To: <F92274058556DE42B94B148EEFB91839021CB5BF@exchange-03.suedkurier.de>
References: <F92274058556DE42B94B148EEFB91839021CB5BF@exchange-03.suedkurier.de>
Message-ID: <972ec5bd0510201510r2b18f1e3v1a0eab6f86c19631@mail.gmail.com>

On 10/18/05, Henning.Ramm at mediapro-gmbh.de
<Henning.Ramm at mediapro-gmbh.de> wrote:
> Dear twisted wizards,
>
> would it be possible to also release Win32 exe installers for Twisted 2.1?
> I'd prefer to always use the same way of installing things, if possible.
> But if you won't release any Windows binaries any more, please state that on the website.
>

I'm working on making a win32 installer with all of the windows extras
(start menu links to documentation and the shell with proper
environment variables, etc), however in the meantime if anyone wants a
"just install the Twisted package" installer, feel free to e-mail me
off-list (with the version of python you would like it built for).



From gkwrcc at dri.edu  Thu Oct 20 18:33:07 2005
From: gkwrcc at dri.edu (Grant Kelly)
Date: Thu, 20 Oct 2005 15:33:07 -0700
Subject: [Twisted-Python] https xmlrpc through proxy 
Message-ID: <43581B23.1060201@dri.edu>

Hello,

I just signed up for this list because I am having no success connecting 
to an https xmlrpc server through a proxy/firewall. The proxy can do 
both http and https for the web just fine. I have also been able to 
connect to an xmlrpc server with just http through the proxy.  I am 
using the ProxiedXMLRPC class from this page: 
http://twistedmatrix.com/pipermail/twisted-python/2004-December/009258.html
The author notes it isn't tested with https.

In order to connect to the xmlrpc server, a certificate and key need to 
be specified. I don't know where to specify these files.

I don't even know if this is technically possible. I am hoping that it is.

Any suggestions will be appreciated.
Grant

PS:  I'm going to include the python traceback in case it provides any 
more information:

Traceback (most recent call last):
  File "/usr/local/lib/python2.4/site-packages/twisted/python/log.py", 
line 41, in callWithContext
    return context.call({ILogContext: newCtx}, func, *args, **kw)
  File 
"/usr/local/lib/python2.4/site-packages/twisted/python/context.py", line 
52, in callWithContext
    return self.currentContext().callWithContext(ctx, func, *args, **kw)
  File 
"/usr/local/lib/python2.4/site-packages/twisted/python/context.py", line 
31, in callWithContext
    return func(*args,**kw)
  File 
"/usr/local/lib/python2.4/site-packages/twisted/internet/selectreactor.py", 
line 139, in _doReadOrWrite
    why = getattr(selectable, method)()
--- <exception caught here> ---
  File "/usr/local/lib/python2.4/site-packages/twisted/internet/tcp.py", 
line 111, in doRead
    return Connection.doRead(self)
  File "/usr/local/lib/python2.4/site-packages/twisted/internet/tcp.py", 
line 343, in doRead
    data = self.socket.recv(self.bufferSize)
OpenSSL.SSL.Error: [('SSL routines', 'SSL3_READ_BYTES', 'ssl handshake 
failure')]
Traceback (most recent call last):
  File "testproxy.py", line 54, in ?
    reactor.run()
  File 
"/usr/local/lib/python2.4/site-packages/twisted/internet/posixbase.py", 
line 199, in run
    self.mainLoop()
  File 
"/usr/local/lib/python2.4/site-packages/twisted/internet/posixbase.py", 
line 210, in mainLoop
    self.doIteration(t)
  File 
"/usr/local/lib/python2.4/site-packages/twisted/internet/selectreactor.py", 
line 133, in doSelect
    _logrun(selectable, _drdw, selectable, method, dict)
--- <exception caught here> ---
  File "/usr/local/lib/python2.4/site-packages/twisted/python/log.py", 
line 56, in callWithLogger
    return callWithContext({"system": lp}, func, *args, **kw)
  File "/usr/local/lib/python2.4/site-packages/twisted/python/log.py", 
line 41, in callWithContext
    return context.call({ILogContext: newCtx}, func, *args, **kw)
  File 
"/usr/local/lib/python2.4/site-packages/twisted/python/context.py", line 
52, in callWithContext
    return self.currentContext().callWithContext(ctx, func, *args, **kw)
  File 
"/usr/local/lib/python2.4/site-packages/twisted/python/context.py", line 
31, in callWithContext
    return func(*args,**kw)
  File 
"/usr/local/lib/python2.4/site-packages/twisted/internet/selectreactor.py", 
line 149, in _doReadOrWrite
    self._disconnectSelectable(selectable, why, method=="doRead")
  File 
"/usr/local/lib/python2.4/site-packages/twisted/internet/posixbase.py", 
line 234, in _disconnectSelectable
    selectable.connectionLost(f)
  File "/usr/local/lib/python2.4/site-packages/twisted/internet/tcp.py", 
line 556, in connectionLost
    Connection.connectionLost(self, reason)
  File "/usr/local/lib/python2.4/site-packages/twisted/internet/tcp.py", 
line 402, in connectionLost
    protocol.connectionLost(reason)
  File "/usr/local/lib/python2.4/site-packages/twisted/web/http.py", 
line 351, in connectionLost
    self.handleResponseEnd()
  File "/usr/local/lib/python2.4/site-packages/twisted/web/http.py", 
line 357, in handleResponseEnd
    self.handleResponse(b)
  File "/usr/local/lib/python2.4/site-packages/twisted/web/xmlrpc.py", 
line 259, in handleResponse
    self.factory.parseResponse(contents)
  File "/usr/local/lib/python2.4/site-packages/twisted/web/xmlrpc.py", 
line 284, in parseResponse
    response = xmlrpclib.loads(contents)
  File "/usr/local/lib/python2.4/xmlrpclib.py", line 1080, in loads
    p.close()
  File "/usr/local/lib/python2.4/xmlrpclib.py", line 530, in close
    self._parser.Parse("", 1) # end of data
xml.parsers.expat.ExpatError: no element found: line 1, column 0




From solipsis at pitrou.net  Thu Oct 20 19:10:03 2005
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Fri, 21 Oct 2005 01:10:03 +0200
Subject: [Twisted-Python] Freevo 2.0, Kamaelia, pyevent, Eventnet/LGT:
	what's going on?
In-Reply-To: <20051020180943.GF9373@divmod.com>
References: <43574D80.40801@tekNico.net> <1129823481.11151.13.camel@fsol>
	<20051020180943.GF9373@divmod.com>
Message-ID: <1129849803.5945.39.camel@fsol>


Hi,

Thanks for the answers...

> > - high-level features seem better avoided since documentation is often
> > very lacking and the API does not seem stable
> 
> Well... I have applications running on twisted for over an year without any
> breakage in API.

Oh, I have too. But only using the basic networking stuff, because I'm
not confident enough to touch the high-level things.

Parts of the Twisted API are marked as "API unstable". I don't think I
dreamed it, since I've read it in the doc ;)
Also I've seen several times some answers on this very list which were
of the sort "actually this module is not maintained anymore" (or
"experimental").

> Documentation is lacking sometimes, only for
> jabber AFAIK.

There is a whole lot of methods which are not documented at all. Also,
there is usually no comprehensive documentation for a specific
functionality. Not to mention the annoying interface system which means
the documentation for e.g. twisted.internet.reactor.ListenTCP is
actually to be found elsewhere in the class hierarchy...

> > - design choices are not documented at all (for example, why a custom
> > logging module instead of the Python-provided one?), so they often look
> > gratuitous
> 
> The python standard one do not seem so nice. In fact there are a number of
> projects to substitute it with something better. One is twisted.python.log
> another is py.log and there are others out there. Another example?

As I said the problem is that it's not documented anywhere. That doesn't
mean there isn't any reason, just that a normal developer cannot guess
by himself. When I see a library with lots of design decisions for which
I can't find any rationale, I'm legitimately suspicious (it could just
be the NIH syndrome which we all know very well - since we have all one
day fallen for it ;-)).

> PB is not proprietary... The protocol is documented (maybe it's the best
> documented thing in twisted) and source code is available.

It is proprietary in the sense that it is, AFAIK, implemented only by
Twisted.
Contrast this with e.g. XMLRPC which has lots of implementations. XMLRPC
is quite mediocre, but at least I know that mostly everyone can find an
implementation for his/her favourite programming language.
I won't ever use PB for something for which I want others to be able to
write clients easily (without forcing them to use Twisted). It's a
simple matter of simplifying interoperability. For some people/projects
it matters very much, for others it doesn't matter at all.

> The Factory keeps state for many protocols since the protocol is created and
> destroyed with the connection. Seems rather obvious for anybody having just
> read the basic finger tutorial.

There is a terminology problem, since I don't understand why something
named "Protocol" should be destroyed at every connection. Or it should
be, quite logically, renamed "Connection". Also this doesn't appear in
the API docs (again).

For me, a "protocol" is something like HTTP or SMTP. It is "eternal",
I'm not expecting it to be created/destroyed at every connection (that
would be like calling an int a float, or whatever).

There is no documentation on the magic that really happens when
something is triggered (for example when a TCP session is established).
Which methods are called, which objects are created, in which order,
etc. Unexplained magic is annoying in software development.

> If you don't want to learn anything of course. If instead you go beyond the
> surface and learn something for real then it may happen that you find it is
> istead a great problem solver for a lot of problems.

It's not that I don't want to learn. It's that the more you use
framework-specific constructs, and the higher level those constructs
are, the more your software project is stuck with this framework and
difficult to reuse/adapt/port/interoperate with. Of course, some
projects (especially proprietary or internal ones) are less sensitive to
this than others.

Again, that does not change the fact that I'm quite happy with the parts
of Twisted I do use. The simple notion of a Deferred (with its two
callbacks) for example, is brilliant.

Regards

Antoine.





From solipsis at pitrou.net  Thu Oct 20 19:18:25 2005
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Fri, 21 Oct 2005 01:18:25 +0200
Subject: [Twisted-Python] https xmlrpc through proxy
In-Reply-To: <43581B23.1060201@dri.edu>
References: <43581B23.1060201@dri.edu>
Message-ID: <1129850305.5945.43.camel@fsol>


Le jeudi 20 octobre 2005 ? 15:33 -0700, Grant Kelly a ?crit :
> Hello,
> 
> I just signed up for this list because I am having no success connecting 
> to an https xmlrpc server through a proxy/firewall. The proxy can do 
> both http and https for the web just fine. I have also been able to 
> connect to an xmlrpc server with just http through the proxy.  I am 
> using the ProxiedXMLRPC class from this page: 
> http://twistedmatrix.com/pipermail/twisted-python/2004-December/009258.html
> The author notes it isn't tested with https.

Well, not only I haven't tested it with https, but since I don't
actually know how https works with a proxy (is the connection also
encrypted upto the proxy? etc.), chances are it's completely broken.

Sorry for that.

Regards,

Antoine.





From glyph at divmod.com  Thu Oct 20 19:45:38 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 20 Oct 2005 19:45:38 -0400
Subject: [Twisted-Python] Freevo 2.0, Kamaelia, pyevent,
	Eventnet/LGT: what's going on?
In-Reply-To: <43574D80.40801@tekNico.net>
Message-ID: <20051020234538.27584.81320924.divmod.quotient.1907@ohm>



On Thu, 20 Oct 2005 09:55:44 +0200, Nicola Larosa <nico at teknico.net> wrote:
>One year ago the Freevo project, for its 2.0 rewrite, dropped Twisted, and
>then went and reimplemented something similar.

Since the Freevo project didn't notify us when they started using Twisted, they didn't provide any criticism of it while they were using it, and they didn't tell us when they stopped, I'm certainly not planning to speculate as to their motives.

>Then there are Kamaelia,
>pyevent, and EventNet inside LGT.

http://lgt.berlios.de/: "EventNet requires the gherkin and Twisted packages."

Doesn't sound like they've stopped using Twisted to me.

>Why isn't Twisted seen, by these projects at least, as a viable tool? 

"Programming is hard", probably.  The only reason given by the Freevo project is that "It is a huge monster and hard to understand.".  They're focused on building a multimedia system, not networking, so it stands to reason that they wouldn't have a lot of the sort of people that would find Twisted easy to use hanging around.

Plus, most of what they need networking for as far (as I understand it) is downloading programming schedules over the web, and Twisted's web-downloader situation could be described as "unfortunate" at best.  They'd not only need to understand Twisted's core, but the internals of the web-downloading junk well enough to improve upon it.  It might have seemed easier to just rewrite.

Twisted is very much an unfinished project, and when people want to use the pieces that don't exist or aren't done yet, they get frustrated with it.  I would too.  It saddens me that they won't file bugs in the tracker and discuss their issues with the project with us rather than simply on their own mailing lists, but what can we do?

>Is the event-driven Python world undergoing the same fragmentation as the web
>framework one?

This would actually be a source of some relief for me.

Without any meaningful competition, Twisted has been operating in a vacuum.  I certainly plan to continue using Twisted myself, and for all of the Divmod projects (plug: <http://www.divmod.org>) but I don't think everyone in the world should necessarily use it.

However, every programmer *should* understand the basics of event-driven programming, and there should be libraries available which facilitate the creation of scalable systems which use event-driven protocol implementations.  Twisted got the ball rolling on this in Python, but if other viable projects with similar goals merge it could be the basis of some kind of standard API.  Perhaps one that someone *else* could maintain, that would eventually end up in the standard libarary, and that Twisted could plug into optionally.  I don't view that as a bad thing.  A "wsgi for events", if you will.

Also, it gives the Twisted team some potential competition to focus on.  Possibly a source of motivation, and besides, everybody loves a race :).

That said, I think that the fact that PyNotifier comes with zero unit tests ought to speak for itself.

Kamaelia seems more promising to me; I imagine that they might produce some serious competition eventually if that's what they aim to do.  However, they claim that only the "Axon" part of their project is stable, and that doesn't yet include anything that does select().

Conclusion: if you think that the web-based Python world is in some kind of crisis because there are a lot of frameworks (I don't), then I don't believe the event-driven networking side of things is headed for the same fate.  As Itamar noted, Zope3 is moving towards using Twisted for its event loop even as  Freevo moves away.  There is more than one project in the world that has 'import select' in it, but I find that hard to construe as a disaster.  None seem to be nearly as far-reaching or complete as Twisted is yet.



From glyph at divmod.com  Thu Oct 20 19:51:39 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 20 Oct 2005 19:51:39 -0400
Subject: [Twisted-Python] Freevo 2.0, Kamaelia, pyevent, Eventnet/LGT:
	what's going on?
In-Reply-To: <1129823481.11151.13.camel@fsol>
Message-ID: <20051020235139.27584.768918423.divmod.quotient.1910@ohm>



On Thu, 20 Oct 2005 17:51:20 +0200, Antoine Pitrou <solipsis at pitrou.net> wrote:
>I don't know. FWIW, my current opinion about Twisted (may change without
>warning ;-)) is that:

>- design choices are not documented at all (for example, why a custom
>logging module instead of the Python-provided one?), so they often look
>gratuitous

 - twisted.python.log is OLDER than the Python-provided one.  Ask instead, "why does Python use a custom logging module instead of the Twisted-provided one?"

 - as a matter of fact, this design choice *IS* documented, http://twistedmatrix.com/bugs/issue307

 - okay okay, you have a point, there should be documents put together somewhere, not just random things in the issue tracker :).  I thought it was amusing that you picked the _one_ design choice as an example of this that _does_ have copious documentation available somewhere public.

>- the tendency to advocate proprietary protocols (like PB) without
>warning the user should be mitigated

"custom", maybe.  "proprietary"?  no, not according to any definition of the word.  There is a Java implementation, at least half of an Emacs implementation.

PB2 is probably going to take a while to get implemented everywhere, but there is at least some effort towards making this protocol more widely available than just Python + Twisted.

>- the architecture is sometimes bizarre or badly described (the
>credential stuff looks like Chinese to me); for example, why is there a
>distinction between "*Protocol" and "*Factory" types?

I'm not sure I understand the question here.  Have you read the writing-servers and writing-clients documentation?

>I often recommend the use of Twisted for standard network functions. But
>I stay away of the more sophisticated stuff (including twistd, PB,
>Nevow, etc.). Grouping all this stuff together with the basic, trusted,
>dependable network classes may yield a perception of twisted as
>bloatware.

That's exactly why the project was split up.  Not only is Nevow not distributed with Twisted, we recently had a discussion on this very mailing list explaining why it is *NEVER* allowed to even *optionally* import Nevow from the Twisted codebase...



From andrew-twisted at puzzling.org  Thu Oct 20 19:54:17 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 21 Oct 2005 09:54:17 +1000
Subject: [Twisted-Python] Freevo 2.0, Kamaelia, pyevent,
	Eventnet/LGT: what's going on?
In-Reply-To: <1129849803.5945.39.camel@fsol>
References: <43574D80.40801@tekNico.net> <1129823481.11151.13.camel@fsol>
	<20051020180943.GF9373@divmod.com> <1129849803.5945.39.camel@fsol>
Message-ID: <20051020235417.GW19919@trogdor.home.puzzling.org>

On Fri, Oct 21, 2005 at 01:10:03AM +0200, Antoine Pitrou wrote:
[...]
> 
> There is a terminology problem, since I don't understand why something
> named "Protocol" should be destroyed at every connection. Or it should
> be, quite logically, renamed "Connection". Also this doesn't appear in
> the API docs (again).

I think high-level concepts like this are much better explained through
proper documents than docstrings (which is the source of our API docs).
Docstrings are generally like man pages; they give a basic reference for
something, if you're lucky an example even, but for anything more than that,
like understanding the design, you really want a more comprehensive and
coherent document than a collection of docstrings.  API docs are mainly
useful to people that already understand what's going on.

That's not to say our documentation in this area is perfect.  You're right
that the design of protocols and factories isn't really discussed
explicitly; either you find it by working through the tutorial, or perhaps
from
http://twistedmatrix.com/projects/core/documentation/howto/servers.html.
Improvements welcome! ;)

As to why it's "Protocol" rather than "Connection"... that would be
differently confusing :)

The "connection" to me sounds like what the transport already is -- the
thing responsible for taking bytes (or datagrams) from here and sending them
to there, and that you can disconnect, and so on.  In Twisted, the
"Protocol" is the thing responsible for interpreting events from the
underlying connection (and in most cases, doesn't care if the underlying
transport is TCP, SSL, UNIX domain sockets, or whatever -- how the bytes are
transported isn't its responsibility).

> For me, a "protocol" is something like HTTP or SMTP. It is "eternal",
> I'm not expecting it to be created/destroyed at every connection (that
> would be like calling an int a float, or whatever).

Well, the logic of how to interpret the byte stream into higher-level events
is "eternal": your Protocol *class* is that.  The actual interpretation
(e.g.  "ok, I've just seen '\n' so this is a lineReceived event... ok, I've
just seen a blank line and I was in the 'expecting HTTP headers' state so
now I'm in the 'expecting request body state', but this is a GET request so
there's no body, so this is a 'requestReceived' event") is almost always
stateful though, and state means objects, i.e. instances.  

So: you need an interpreter per connection (because interpreting a byte
stream is stateful), and interpreters ought to be able to work with any byte
stream, because most of the time there's no or little difference.  So the
interpreter and byte-stream have different objects: a Protocol and a
Transport.

> There is no documentation on the magic that really happens when
> something is triggered (for example when a TCP session is established).
> Which methods are called, which objects are created, in which order,
> etc. Unexplained magic is annoying in software development.

There's not much magic, but there's also not much documentation.  Of course,
the end result is of inadequate documentation isn't very distinguishable
from magic :(

Depending on what levels of abstraction you care about, see the interfaces
for IReactorTCP, IConnector, IProtocolFactory, IProtocol and ITransportTCP,
and Factory itself:
    http://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.html
    http://twistedmatrix.com/documents/current/api/twisted.internet.protocol.Factory.html

Or ask specific questions on this list!

I hope I've helped,

-Andrew.




From moe at divmod.com  Thu Oct 20 20:10:43 2005
From: moe at divmod.com (Moe Aboulkheir)
Date: Fri, 21 Oct 2005 02:10:43 +0200
Subject: [Twisted-Python] Freevo 2.0, Kamaelia, pyevent, Eventnet/LGT:
	what's going on?
In-Reply-To: <1129849803.5945.39.camel@fsol>
Message-ID: <20051021001043.27584.1610137773.divmod.quotient.1920@ohm>

On Fri, 21 Oct 2005 01:10:03 +0200, Antoine Pitrou <solipsis at pitrou.net> wrote:

>Not to mention the annoying interface system which means
>the documentation for e.g. twisted.internet.reactor.ListenTCP is
>actually to be found elsewhere in the class hierarchy...

i assure you that the interfaces exist for reasons other than making your life difficult

>[PB] is proprietary in the sense that it is, AFAIK, implemented only by
>Twisted.

here is a javascript implementation of PB: http://jspb.mozdev.org/.  and a java one: http://www.itamarst.org/software/twistedjava/.  there is also an objective caml port (cvs: cvs.twistedmatrix.com/cvs/TwistedOCaml).  probably more that i am not aware of.

<ramble>
as far as the topic of alternative python frameworks (dare i say the word) for event-based programming in general, i think it's an interesting time, with PEP 342 in the wings - a lot of you probably think it's a bad idea, but it has the capacity to remove the reliance on frameworks for accomplishing clean asychronous IO in python (see the miniscule scheduler examples both in the PEP and in recent python-dev posts).  when i say "framework" in this context, i mean libraries whose clients accrue a dependency on a non-standard reactor/event loop/runtime/whatever in order to operate.  kamaelia probably doesn't fit into this category, i wouldn't know.

so why bother with twisted?  twisted is the winner because of its ridiculously  numerous and thorough protocol implementations.  sure, the standard library has an imap implementation, but does it have an implementation of the MSN protocol?  there are non-twisted MSN python libraries, but they aren't going to expose the same basic interface abstractions as imaplib.  twisted also has OSCAR, jabber, SMTP, HTTP, and a bunch more, with clients AND servers for most of these, all using the same abstractions and entry points.  as far as most of these are are concerned, YAGNI, but if (when) you do, you code isn't going to change significantly.
</ramble>

--
Moe Aboulkheir



From dialtone at divmod.com  Thu Oct 20 20:19:21 2005
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Fri, 21 Oct 2005 02:19:21 +0200
Subject: [Twisted-Python] Freevo 2.0, Kamaelia, pyevent,
	Eventnet/LGT: what's going on?
In-Reply-To: <1129849803.5945.39.camel@fsol>
References: <43574D80.40801@tekNico.net> <1129823481.11151.13.camel@fsol>
	<20051020180943.GF9373@divmod.com> <1129849803.5945.39.camel@fsol>
Message-ID: <20051021001921.GH9373@divmod.com>

On Fri, Oct 21, 2005 at 01:10:03AM +0200, Antoine Pitrou wrote:
> 
> Hi,
> 
> Thanks for the answers...

Np :)

> Oh, I have too. But only using the basic networking stuff, because I'm
> not confident enough to touch the high-level things.

I had a bot using twisted.words, Nevow and other projects, that lived long and
prosper for well over an year. Now I changed it because I changed the logging
backend to another database.

> Parts of the Twisted API are marked as "API unstable". I don't think I
> dreamed it, since I've read it in the doc ;)

Sure, I think even the reactor was marked unstable since not so far ago.
Documentation might be not in sync. A problem indeed but still not enough to
drop something and start reimplementing it from scratch. The only way to have
a stable API is when something stops maintainance or completely dies.
Otherwise API changes always.

> Also I've seen several times some answers on this very list which were
> of the sort "actually this module is not maintained anymore" (or
> "experimental").

So? There are tons of experimental projects in python. If something is
experimental, anyway, it doesn't mean that everything in twisted is.
twisted.web is not experimental, twisted.names isn't as well. twisted.mail
too. twisted.spread and so on. those are all very far from being experimental.
And they are not even the only ones.
If something is not maintained anymore it means that the API won't change.
Aren't you happy? :). Anyway bugs can be fixed.

> There is a whole lot of methods which are not documented at all. Also,
> there is usually no comprehensive documentation for a specific
> functionality. Not to mention the annoying interface system which means
> the documentation for e.g. twisted.internet.reactor.ListenTCP is
> actually to be found elsewhere in the class hierarchy...

I can't see how looking inside twisted.internet.interfaces is so hard. Also
python is quite readable and twisted code is cleaner than the code of many
other projects. I've never found any problems with learning how something
works. And indeed I don't know how everything in twisted works. I often open
examples, then I open the source code and so on. We live in the open source
world. Use the Source Luke.

> As I said the problem is that it's not documented anywhere. That doesn't
> mean there isn't any reason, just that a normal developer cannot guess
> by himself. When I see a library with lots of design decisions for which
> I can't find any rationale, I'm legitimately suspicious (it could just
> be the NIH syndrome which we all know very well - since we have all one
> day fallen for it ;-)).

As Itamar said, twisted had logging long before python. Also design decisions
are easily understood by anybody that tried to do the same thing alone. Most
of the projects that deal with event loops are a simplified and poorer version
of twisted. Which means that in the end, if those projects are going to grow
in some way, it's very likely that they will use a similar approach. There is
no magic in Twisted, it's pure python that does what you tell it to, and very
well if I dare say.

> > PB is not proprietary... The protocol is documented (maybe it's the best
> > documented thing in twisted) and source code is available.
> 
> It is proprietary in the sense that it is, AFAIK, implemented only by
> Twisted.

There is a java implementation of pb in the cvs tree. And by this POV I could
say that also OpenDocument is proprietary because it is only implemented by
OpenOffice 2.0.

> Contrast this with e.g. XMLRPC which has lots of implementations. XMLRPC
> is quite mediocre, but at least I know that mostly everyone can find an
> implementation for his/her favourite programming language.

Nobody will tell you to use pb if you don't have the control on both sides of
the connection. NOBODY. What I've seen answered here many times is that you
should prefer pb, because it's better designed for python and for RMI, instead
of XML-RPC or SOAP. But that if you cannot choose what to use on the other
end, then you should stick to the other end choices, or implement pb in the
other language. newpb will make this a bit easier I guess.

> I won't ever use PB for something for which I want others to be able to
> write clients easily (without forcing them to use Twisted). It's a
> simple matter of simplifying interoperability. For some people/projects
> it matters very much, for others it doesn't matter at all.

And nobody has ever suggested to force twisted's pb upon umanity.

> There is a terminology problem, since I don't understand why something
> named "Protocol" should be destroyed at every connection. Or it should
> be, quite logically, renamed "Connection". Also this doesn't appear in
> the API docs (again).

What's the point in having a buildProtocol that re-creates a new protocol for
each connection then? How could the reactor know when to create new protocols
and when not? Why do you believe there is so much magic in twisted? A Protocol
is called like that because it implements a protocol. The fact that it lasts
as long as a connection (another object that already exists in twisted)
doesn't make it different than a protocol implementation.

> For me, a "protocol" is something like HTTP or SMTP. It is "eternal",
> I'm not expecting it to be created/destroyed at every connection (that
> would be like calling an int a float, or whatever).

It is eternal indeed. It's a class with some code in it. How much more
ethernal could you be? instances are created and destroyed for each
connection. Don't mix the things.

> There is no documentation on the magic that really happens when
> something is triggered (for example when a TCP session is established).
> Which methods are called, which objects are created, in which order,
> etc. Unexplained magic is annoying in software development.

In fact there is no magic, why should there be any documentation on something
that there isn't? A framework is cool because mostly you don't need to worry
about what happens below of the abstraction layer you are given.
Why do you think protocols have a connectionMade and a connectionLost method?
When are they called IYHO? Or lineReceived? Or dataReceived? Names are pretty
obvious, trying to put magic where it really isn't is what makes everything
harder. Like with deferreds. They are so simple, and require so little python
knowledge that they have been implemented in javascript too.

What's so hard in a list of functions that is called in a for loop once
their callback method is called?

When you start a TCP connection a socket is added to the reactor. That's all.
That socket has a related connection object that has a related protocol object
(the one you are supposed to write) and a related factory object (by default
unless you change it). data is read from the socket in chunks using the
FileDescriptor abstraction, then it is prepared for the handling of the
protocol that if needed will call the factory.

Pretty straight forward, and very likely what I would do If in the mood to
decide anything.

> It's not that I don't want to learn. It's that the more you use
> framework-specific constructs, and the higher level those constructs
> are, the more your software project is stuck with this framework and
> difficult to reuse/adapt/port/interoperate with. Of course, some
> projects (especially proprietary or internal ones) are less sensitive to
> this than others.

I can see no reason at all. Plenty of stuff in twisted is reusable from
somewhere else. But when coming to networking it just doesn't make any sense.
There is no better alternative, if any then I'm more than happy to look at it
and maybe start helping there instead of here. As all the frameworks when you
use it you are stuck with it. Even with libraries you are stuck with them.
Twisted changes something only because it is async, but that just have
nothing to do with the framework itself. Python sucks because it doesn't allow
async and sync programming style to be merged togheter, this would allow
higher reusability, with the risk of doing something without understanding it
at all. Like not understanding what happens between a:

page = client.getPage('url')

call and the subsequent:

parse(page)

What's the better? Explicit or implicit?

Do we want to talk about simplicity? Python subprocess module, compared to
twisted's reactor.spawnProcess simply sucks. Twisted allows you to open as
many FD's as you want to the child process. subprocess (just created for
python 2.4) only allows 3. I'm involved in a project that right now needs
signature verification and signature creation. We drive gnupg from python. The
twisted backend took less that 40 lines and 30 minutes, and it's perfectly
working.

My boss asked explicitly for a syncronous version of it. The only good
alternative (beyond writing it myself) is using subprocess. Now this took me
over 3 days (and I still need to pass one test) and more than 200 lines of
code. Deep magic and tricks (since I only have 3 FDs to the child process).

My boss has all the rights to ask for a sync version of course. But it's
just too much work, just to avoid using twisted for your very same reason.
Insted of speeding up the project it is just slowing it down.

If by being tied to twisted I gain 3 free payed days of work, then god bless
twisted and who cares if the project now depends on it. Don't you agree?

> Again, that does not change the fact that I'm quite happy with the parts
> of Twisted I do use. The simple notion of a Deferred (with its two
> callbacks) for example, is brilliant.

Most people find magic even in deferreds and start thinking of weird things
right there and stop using twisted only because of them. Just as you stop
using higher levels of twisted (which are the real jewels) only because you
fail to understand them and are not ready to take some time to read the
documentation (when there is) and the source code (which is there for a
reason otherwise twisted would just ship pyc or pyo and live prosper).

Also if you want documentation, start writing some and submit bugs of missing
documentation. We have very little time and most of the free time is already
busy fixing bugs in twisted (which, as all big projects, has bugs too). There
is a documentation team in twisted that was created with the only purpose of
fixing and completing documentation. During the last sprint work has been done
to make it even better. Just contribute, we do like your contributions to the
project and nobody will reject some more documentation. But just saying that
twisted is bad because it has few documentation and stop there, seems like
whining :).

Hope I've been not too harsh at as helpful and informative as possible.

-- 
Valentino Volonghi aka Dialtone
Now Running MacOSX 10.4
Blog: http://vvolonghi.blogspot.com
http://weever.berlios.de
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 186 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20051021/9a0ce03c/attachment.pgp 

From golux at comcast.net  Thu Oct 20 20:38:00 2005
From: golux at comcast.net (Stephen Waterbury)
Date: Thu, 20 Oct 2005 20:38:00 -0400
Subject: [Twisted-Python] Freevo 2.0, Kamaelia, pyevent, Eventnet/LGT:
	what's going on?
In-Reply-To: <20051021001043.27584.1610137773.divmod.quotient.1920@ohm>
References: <20051021001043.27584.1610137773.divmod.quotient.1920@ohm>
Message-ID: <43583868.1040002@comcast.net>

Moe Aboulkheir wrote:
> On Fri, 21 Oct 2005 01:10:03 +0200, Antoine Pitrou <solipsis at pitrou.net> 
> wrote:
>> [PB] is proprietary in the sense that it is, AFAIK, implemented only by
>> Twisted.
> 
> here is a javascript implementation of PB: http://jspb.mozdev.org/.  and 
> a java one: http://www.itamarst.org/software/twistedjava/.  there is 
> also an objective caml port (cvs: 
> cvs.twistedmatrix.com/cvs/TwistedOCaml).  probably more that i am not 
> aware of.

In fairness to Antoine, those PB implementations are all by the Twisted
community, so although I disagree with his definition of "proprietary",
those aren't really counterexamples.

However, to me it is silly to criticize PB for having been invented
by the Twisted community and only (so far) having been implemented
there.  (BTW, there would probably be a Lisp implementation done
under NASA sponsorship if NASA was naive enough to trust me with
any more money -- which they don't! [U.S. taxpayers, be grateful!] ;)

I suspect that all worthwhile protocols begin life within a small
community of developers before being made into IETF RFC's or ISO stds
or whatever ... PB still has a little more maturing to do, although
it appears to be nearly ready for release into the wild (some might
say it's already living there ... :) to have more implementations.

Steve



From phil at bubblehouse.org  Thu Oct 20 20:46:49 2005
From: phil at bubblehouse.org (ph!l chr!stensen)
Date: Thu, 20 Oct 2005 20:46:49 -0400
Subject: [Twisted-Python] Freevo 2.0, Kamaelia, pyevent,
	Eventnet/LGT: what's going on?
In-Reply-To: <1129849803.5945.39.camel@fsol>
References: <43574D80.40801@tekNico.net> <1129823481.11151.13.camel@fsol>
	<20051020180943.GF9373@divmod.com> <1129849803.5945.39.camel@fsol>
Message-ID: <9D8CF089-A53D-488C-BF3B-669D673188C3@bubblehouse.org>

well, for some reason I'd like to add my 2/100ths of a dollar to this  
discussion...

On Oct 20, 2005, at 7:10 PM, Antoine Pitrou wrote:
> Oh, I have too. But only using the basic networking stuff, because I'm
> not confident enough to touch the high-level things.
>
> Parts of the Twisted API are marked as "API unstable". I don't think I
> dreamed it, since I've read it in the doc ;)
> Also I've seen several times some answers on this very list which were
> of the sort "actually this module is not maintained anymore" (or
> "experimental").
>

i can't see this as anything but a good thing. open source software  
is as much of a learning opportunity as a way to get good software  
without paying for it. since twisted is under continuous development  
(and always will be, i hope), there's always going to be material  
like this as part of the codebase.

i'd much rather have one more option to consider when implementing a  
system, even if it's not stable. as far as getting information about  
deprecated features after-the-fact, that's one of the (comparatively)  
small costs of using otherwise very robust open source software.

> There is a whole lot of methods which are not documented at all. Also,
> there is usually no comprehensive documentation for a specific
> functionality. Not to mention the annoying interface system which  
> means
> the documentation for e.g. twisted.internet.reactor.ListenTCP is
> actually to be found elsewhere in the class hierarchy...

this is another cost of having an excellent platform freely available  
to you, developed by people in what is usually spare time. the battle  
of document vs. implement has been raging in every serious  
programmer's mind as long as the craft has been around, and it's not  
going to stop any time soon.

then again, let's think of how often the first response to a new  
language or platform is 'well, let me see some sample code.' there's  
a reason for this, and it's that no amount of documentation is going  
to give you the necessary grasp on a complex system.

obviously this is an area where twisted needs improvement, but it's  
not alone in the open source world in this respect.

> It is proprietary in the sense that it is, AFAIK, implemented only by
> Twisted.
> Contrast this with e.g. XMLRPC which has lots of implementations.  
> XMLRPC
> is quite mediocre, but at least I know that mostly everyone can  
> find an
> implementation for his/her favourite programming language.
> I won't ever use PB for something for which I want others to be  
> able to
> write clients easily (without forcing them to use Twisted). It's a
> simple matter of simplifying interoperability. For some people/ 
> projects
> it matters very much, for others it doesn't matter at all.

well, not to mince words, but PB isn't proprietary in any sense,  
simply by definition. as far as xml-rpc is concerned, if you find it  
an acceptable replacement for PB, you probably didn't need to use PB  
in the first place.

personally, PB has saved me countless hours of coding when  
implementing complex client/server apps which must maintain state  
while providing two-way communication for (in my case) extensible  
protocols. as to whether i'm concerned about 'forcing' someone to use  
twisted to write their own client, it goes without saying that  
there's a myriad of other examples where you're required to implement  
clients or other modules in a particular language. at least PB gives  
you 2 choices, with more to come.

> There is a terminology problem, since I don't understand why something
> named "Protocol" should be destroyed at every connection. Or it should
> be, quite logically, renamed "Connection". Also this doesn't appear in
> the API docs (again).
>
> For me, a "protocol" is something like HTTP or SMTP. It is "eternal",
> I'm not expecting it to be created/destroyed at every connection (that
> would be like calling an int a float, or whatever).
>
> There is no documentation on the magic that really happens when
> something is triggered (for example when a TCP session is  
> established).
> Which methods are called, which objects are created, in which order,
> etc. Unexplained magic is annoying in software development.

again we're getting into matters of personal taste. first of all,  
Protocol should *not* be named connection, because that's not what it  
is. protocols happen 'above' the connection, and there's a host of  
other functionality that needs to be encapsulated in a connection  
object that have nothing to do with the protocol.

furthermore, there's no scenario where you can logically think a  
Protocol object represents the actual protocol itself, since protocol  
is by definition an intangible thing. if i have an instance of a  
Protocol object, it's not much of a stretch to assume that is an  
implementation. furthermore, as implementations of protocols are wont  
to behave differently for different clients, creating a worker object  
for each one makes plenty of sense to me.

> It's not that I don't want to learn. It's that the more you use
> framework-specific constructs, and the higher level those constructs
> are, the more your software project is stuck with this framework and
> difficult to reuse/adapt/port/interoperate with. Of course, some
> projects (especially proprietary or internal ones) are less  
> sensitive to
> this than others.

this is hardly relevant. this is an absolute fact of life in the  
software development world, and is definitely just as common during  
development of proprietary software as well as public projects. in fact,
i'd say the biggest problem with modern development practices is that  
there is too much fear of change. sometimes you make a bad design,  
and sometimes you choose an inappropriate 3rd party library.

however, it is your responsibility as a developer to research a  
project enough to make an informed decision. the only concern you  
should have is whether the framework works, and has a big enough  
community to support you.

the strongest card in twisted's deck is the community that is growing  
around it. i have never found any member of the twisted team  
unwilling to help with a problem, and there's never been a revision  
or refactoring that cost me more than a day's work to make  
adjustments for.

i've just completed work on a custom application for one of my  
clients who insisted upon a number of completely unreasonable time  
constraints for the project. twisted allowed me to complete this work  
well within my schedule, and provided me with a variety of 'free'  
features that are simply not available in other frameworks. in  
addition, i was able to get one of my coworkers up and running and  
collaborating with me, **despite the fact he had never even written a  
complete application in python**.

in the final analysis, a project like twisted is going to have the  
strongest appeal to a certain kind of programmer. if your first  
priority is to get the job done without regards to modularity or  
possibility of future expansion, and you don't want to take time  
becoming familiar with the very powerful but very complex twisted  
framework, then you are right to choose other APIs.

if, however, you are looking to add a tool to your kit that will  
serve you well time and time again, becoming involved with the  
twisted community and the framework it supports will only pay off for  
you.

it's a fact of life, you don't get something for nothing.

-phil



From grant at osafoundation.org  Thu Oct 20 21:03:05 2005
From: grant at osafoundation.org (Grant Baillie)
Date: Thu, 20 Oct 2005 18:03:05 -0700
Subject: [Twisted-Python] Freevo 2.0, Kamaelia, pyevent,
	Eventnet/LGT: what's going on?
In-Reply-To: <20051020235417.GW19919@trogdor.home.puzzling.org>
References: <43574D80.40801@tekNico.net> <1129823481.11151.13.camel@fsol>
	<20051020180943.GF9373@divmod.com> <1129849803.5945.39.camel@fsol>
	<20051020235417.GW19919@trogdor.home.puzzling.org>
Message-ID: <4F948079-6A4D-4AC7-9FBB-3CF3DBF4483E@osafoundation.org>

On Oct 20, 2005, at 16:54, Andrew Bennetts wrote:

>>
>> There is a terminology problem, since I don't understand why  
>> something
>> named "Protocol" should be destroyed at every connection. Or it  
>> should
>> be, quite logically, renamed "Connection". Also this doesn't  
>> appear in
>> the API docs (again).
>>
>
> ...
>
> As to why it's "Protocol" rather than "Connection"... that would be
> differently confusing :)
>
> The "connection" to me sounds like what the transport already is --  
> the
> thing responsible for taking bytes (or datagrams) from here and  
> sending them
> to there, and that you can disconnect, and so on.  In Twisted, the
> "Protocol" is the thing responsible for interpreting events from the
> underlying connection (and in most cases, doesn't care if the  
> underlying
> transport is TCP, SSL, UNIX domain sockets, or whatever -- how the  
> bytes are
> transported isn't its responsibility).

Speaking as someone who's done a bunch of network programming in a  
different environment (OS/X + Cocoa), I'm gonna pipe up @ this point  
and say one of the things I really liked as a complete newbie to  
Twisted was the Factory/Protocol/Transport separation (including the  
names of the classes). Maybe that's because I started with the Finger  
examples, which made things pretty clear IMHO.

--Grant

Grant Baillie
Open Source Applications Foundation
http://www.osafoundation.org






From solipsis at pitrou.net  Thu Oct 20 21:05:16 2005
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Fri, 21 Oct 2005 03:05:16 +0200
Subject: [Twisted-Python] Freevo 2.0, Kamaelia, pyevent, Eventnet/LGT:
	what's going on?
In-Reply-To: <20051021001921.GH9373@divmod.com>
References: <43574D80.40801@tekNico.net> <1129823481.11151.13.camel@fsol>
	<20051020180943.GF9373@divmod.com> <1129849803.5945.39.camel@fsol>
	<20051021001921.GH9373@divmod.com>
Message-ID: <1129856717.5945.78.camel@fsol>


Hi,

> I can't see how looking inside twisted.internet.interfaces is so hard. Also
> python is quite readable and twisted code is cleaner than the code of many
> other projects. I've never found any problems with learning how something
> works. And indeed I don't know how everything in twisted works. I often open
> examples, then I open the source code and so on. We live in the open source
> world. Use the Source Luke.

Understanding Python code is not very hard. But it merely tells me how
the thing works /now/. It doesn't tell me how it's supposed to work in
former/future versions, i.e. it doesn't give me a spec to program
against. I don't know which behaviour is an implementation detail and
which behaviour is part of the spec.

> Also design decisions
> are easily understood by anybody that tried to do the same thing alone. Most
> of the projects that deal with event loops are a simplified and poorer version
> of twisted.

Ok, but Twisted is much much more than a simple event loop.

> There is a java implementation of pb in the cvs tree. And by this POV I could
> say that also OpenDocument is proprietary because it is only implemented by
> OpenOffice 2.0.

Well, that is quite my opinion on OpenDocument right now. It is a
standard de jure, but de facto it is not interoperable at all (much less
than RTF or SXW). Of course we can be sure this will change for
OpenDocument, while this is less sure for PB (not the same
mindshare...).

> It is eternal indeed. It's a class with some code in it. How much more
> ethernal could you be? instances are created and destroyed for each
> connection.

When I write "class Protocol", it seems obvious that each instance would
be "a Protocol". The same way that if I write "class Truck", each
instance will be "a Truck". Not "a fragment of existence of a Truck
between two engine starts determined by an external Factory which is
semantically the real Truck".

Or, at least, it is the traditional "mind mapping" of object-oriented
models.

I'm not saying this is a blocking problem, just that in the absence of
any clarification it is very misleading.

> In fact there is no magic, why should there be any documentation on something
> that there isn't? A framework is cool because mostly you don't need to worry
> about what happens below of the abstraction layer you are given.

I don't agree. Using a framework without trying to understand (even
roughly) what happens underneath is very dangerous. For example using
Twisted without knowing (even roughly) how an event loop works in
practice would not be a good idea.

> Why do you think protocols have a connectionMade and a connectionLost method?
> When are they called IYHO?

That doesn't tell me a separate Protocol instance is created for each
connection. 
Having to rely on such "hints" is like playing Russian roulette.

Of course I took the simpler route of not caring /at all/ about it and
instead implementing all state and connection bookkeeping in my own
classes. Which means my Protocol/Factory classes are essentially empty.

> When you start a TCP connection a socket is added to the reactor. That's all.

That I understand perfectly :)

> But when coming to networking it just doesn't make any sense.
> There is no better alternative, if any then I'm more than happy to look at it
> and maybe start helping there instead of here. As all the frameworks when you
> use it you are stuck with it.

But at very different levels depending on your usage...
If I just use Twisted as a basis for having callbacks applied when an
UDP datagram is received, and handle all the rest by myself, it will not
be too difficult to change to another framework (assuming it allows
asynchronous-style programming of course ;)).
If on another hand I use the "full Monty" (twistd, PB, etc.), my app
will be very closely wired around Twisted and it will be very tedious to
rearrange it around another framework.

> Python sucks because it doesn't allow
> async and sync programming style to be merged togheter,

How do you want to merge them together ?
There has been various discussion on the Python-dev list and the general
sentiment has been "explicit is better than implicit". In other words,
don't make async tasks look like they are synchronous. I rather agree
with this. Too much magic often backfires brutally.

> Python subprocess module, compared to
> twisted's reactor.spawnProcess simply sucks. [...]
> My boss asked explicitly for a syncronous version of it.

Without knowing the precise problem to be solved, I'd say: launch the
Twisted event loop in a separate thread, and use threading.Condition to
signal the main thread. Or a subtle variation of it ;)

> But just saying that
> twisted is bad because it has few documentation and stop there, seems like
> whining :).

I've been using Twisted for one year and am generally satisfied with the
parts of it I've chosen to use. I was answering to the question of "what
people may find annoying in Twisted".

My advice is that you shouldn't take every criticism as just a proof of
laziness on the part of the critic. Even very terse critics like
"Twisted is a huge monster" can be valuable for you to guess what kind
of perception Twisted enjoys.

> Hope I've been not too harsh at as helpful and informative as possible.

That's fine.

Regards

Antoine.





From dialtone at divmod.com  Thu Oct 20 21:34:15 2005
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Fri, 21 Oct 2005 03:34:15 +0200
Subject: [Twisted-Python] Freevo 2.0, Kamaelia, pyevent,
	Eventnet/LGT: what's going on?
In-Reply-To: <1129856717.5945.78.camel@fsol>
References: <43574D80.40801@tekNico.net> <1129823481.11151.13.camel@fsol>
	<20051020180943.GF9373@divmod.com> <1129849803.5945.39.camel@fsol>
	<20051021001921.GH9373@divmod.com> <1129856717.5945.78.camel@fsol>
Message-ID: <20051021013415.GI9373@divmod.com>

On Fri, Oct 21, 2005 at 03:05:16AM +0200, Antoine Pitrou wrote:

> Understanding Python code is not very hard. But it merely tells me how
> the thing works /now/. It doesn't tell me how it's supposed to work in
> former/future versions, i.e. it doesn't give me a spec to program
> against. I don't know which behaviour is an implementation detail and
> which behaviour is part of the spec.

Point taken. But still this doesn't explain why few people submit bugs for
documentation and help in fixing them.

> Ok, but Twisted is much much more than a simple event loop.

Only because it has a lot of protocols already implemented, which you don't
use and hence make twisted a simple event loop from your perspective.

> Well, that is quite my opinion on OpenDocument right now. It is a
> standard de jure, but de facto it is not interoperable at all (much less
> than RTF or SXW). Of course we can be sure this will change for
> OpenDocument, while this is less sure for PB (not the same
> mindshare...).

Still it is Open and not proprietary.

> When I write "class Protocol", it seems obvious that each instance would
> be "a Protocol". The same way that if I write "class Truck", each
> instance will be "a Truck". Not "a fragment of existence of a Truck
> between two engine starts determined by an external Factory which is
> semantically the real Truck".

What does: 'a fragment of existence of a Truck' mean? Is lifetime specified in
the name? Do we need to change the name of a class depending on how long it
instances live?

Not at all.

A class is the type of something. Explains the behaviour and initial state of
a something, frozen in time. The fact that one particular instance (or even
all of them) survive only one connection has no reflection on the object
itself.

Also because protocol lifetime is also completely in your hands. By default it
only lasts one connection, you may keep it live for the whole application
life and even reuse it from the factory for later connections.

The protocol instance is created in the Factory. Twisted gives you the chance
to make decisions in that precise moment.

> I don't agree. Using a framework without trying to understand (even
> roughly) what happens underneath is very dangerous. For example using
> Twisted without knowing (even roughly) how an event loop works in
> practice would not be a good idea.

Understanding an event loop and how it is exposed to the user is part of the
abstraction level. You don't need to know that twisted buffers communication
or that it accepts 50 connections at a time. Except when you are really
dealing with that stuff. In which case this should be documented and maybe it
isn't as much. Yet for most cases you don't need to know those details.

> That doesn't tell me a separate Protocol instance is created for each
> connection. 
> Having to rely on such "hints" is like playing Russian roulette.

The fact that the factory is the thing that creates the protocol, and thus has
the main word on how long it will survive and how it will be used, should just
be a big alarm on that.

> Of course I took the simpler route of not caring /at all/ about it and
> instead implementing all state and connection bookkeeping in my own
> classes. Which means my Protocol/Factory classes are essentially empty.

This is indeed sad.

> If on another hand I use the "full Monty" (twistd, PB, etc.), my app
> will be very closely wired around Twisted and it will be very tedious to
> rearrange it around another framework.

Why? Things are never reusable in such an easy way.

> How do you want to merge them together ?
> There has been various discussion on the Python-dev list and the general
> sentiment has been "explicit is better than implicit". In other words,
> don't make async tasks look like they are synchronous. I rather agree
> with this. Too much magic often backfires brutally.

This is the future. Now it's different. And the future includes the ternary
operator (sigh).

> Without knowing the precise problem to be solved, I'd say: launch the
> Twisted event loop in a separate thread, and use threading.Condition to
> signal the main thread. Or a subtle variation of it ;)

Maybe. Still makes me sad though (more complexity instead of more simplicity,
as the boss hints for a reason to not use twisted, as you are hinting too).

> My advice is that you shouldn't take every criticism as just a proof of
> laziness on the part of the critic. Even very terse critics like
> "Twisted is a huge monster" can be valuable for you to guess what kind
> of perception Twisted enjoys.

There are criticisms and criticisms. Yours is very well accepted and will be
considered if it will end up in a bug submission or some help in fixing the
bugs you see in documentation. Just saying: 'there is few' doesn't help much,
maybe we already know that not everything is perfectly documented. Taking a
bit of your time to write a small summary of where the documentation is
lacking and a small comment on how to fix that instead will be answered and
fixed most probably.

HTH

-- 
Valentino Volonghi aka Dialtone
Now Running MacOSX 10.4
Blog: http://vvolonghi.blogspot.com
http://weever.berlios.de
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 186 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20051021/bb5cbcb5/attachment.pgp 

From johann.borck at densedata.com  Thu Oct 20 23:33:48 2005
From: johann.borck at densedata.com (Johann Borck)
Date: Fri, 21 Oct 2005 05:33:48 +0200
Subject: was: Re: [Twisted-Python] Freevo 2.0, Kamaelia, pyevent, Eventnet/LGT:
	what's going on?
In-Reply-To: <43574D80.40801@tekNico.net>
References: <43574D80.40801@tekNico.net>
Message-ID: <4358619C.10307@densedata.com>

I feel like i have to make a statement ...
i've started to use twisted looking for alternatives to zope, and what i
found was the most exciting piece of art in source i ever had the honour
to be able to read. i don't know if i missed something, but to me there
seems to be nothing comparable. it's not the very easiest to understand
and get into, but i'm more than just glad that in almost any cases the
hard work has been done already when i decide to implement something
network-related, and am able to focus on what i want to do, not on how
and if it might be done.  since the existence of PB the question how to
get things working together over some distance, to me, is just answered 
- nothing is as straight and direct to the point, it's even hard for me
to think of something better, it's sad not to be a native speaker, i'd
like to find words matching it's elegance. and there's one more thing
about twisted, that's invaluable, the learning experience. if someone is
interested in network-programming, she can use C or Java or whatever,
and there's always the choice between high abstraction and low-level,
the choice between take what this or that can do for you, and do it
yourself from scratch. twisted gives the learner insight about the
low-level stuff while providing layers of abstraction up to the point,
where the only thing left to do is implementing the specific application
logic. just by reading twisted one can learn so much about
network-programming, from raw sockets over these incredible amounts of
protocols up to, name it, it get's absolutely countless taking divmod's
stuff into account. it's perfectly readable compared to anything i know,
even with some significant lack of documentation. to me it's a
revolution, the most ambitious, thoughtful, invaluable, let me say
beautiful project and way to get this world connected. twisted is
serious fun.
i always feel if only some more people knew about it (documentation),
people who decide about what framework to use for their large project,
twisted had to take off, python had to take its deserved place and so
on. twisted today is an import from future, if reason gets it's way..

regards and many thanks, Johann


Nicola Larosa wrote:

>One year ago the Freevo project, for its 2.0 rewrite, dropped Twisted, and
>then went and reimplemented something similar. Then there are Kamaelia,
>pyevent, and EventNet inside LGT.
>
>Why isn't Twisted seen, by these projects at least, as a viable tool? Is
>the event-driven Python world undergoing the same fragmentation as the web
>framework one?
>
>
>"Freevo is an open-source home theatre PC platform based on Linux and a
>number of open-source audio/video tools."
>
>http://freevo.sourceforge.net/about.html
>
>"CurrentStatus
>
>For Freevo 2.0 we changed many parts of the code...
>
>Changes
>
>* Changed the main loop to use PyNotifier. No threads are allowed anymore
>and every part must take care that the notifier loop is kept alive. Not all
>parts respect that right now.
>
>* Removed Twisted. It is a huge monster and hard to understand. For
>inter-process communication a python implementation (PyMbus) of the Mbus
>transport protocol is used. As a side effect, modules using twisted need to
>be rewritten."
>
>http://freevo.sourceforge.net/cgi-bin/freevo-2.0/CurrentStatus
>
>The reasons for the switch are outlined in this mailing list thread:
>
>switching to pynotifier and pymbus
>http://sourceforge.net/mailarchive/forum.php?thread_id=5523105&forum_id=9200
>
>Kamaelia
>http://kamaelia.sourceforge.net/
>
>pyevent
>http://monkey.org/~dugsong/pyevent/
>
>EventNet - LGT
>http://lgt.berlios.de/#eventnet
>
>  
>




From lycka at carmensystems.com  Fri Oct 21 08:12:09 2005
From: lycka at carmensystems.com (Magnus Lycka)
Date: Fri, 21 Oct 2005 14:12:09 +0200
Subject: [Twisted-Python] Win32 installers of Twisted 2.1?
In-Reply-To: <60ed19d40510190052q4873f5fq50ed2ef3e200cb48@mail.gmail.com>
References: <61DA7719C45FD31185280008C733EF6E04AC4FEA@XCHANGE>
	<60ed19d40510190052q4873f5fq50ed2ef3e200cb48@mail.gmail.com>
Message-ID: <4358DB19.4010901@carmensystems.com>

Christopher Armstrong wrote:

>
>It's a package containing Twisted and all subprojects.
>
...and Zope-Interface. At least the 2.0 sumo had that bundled.






From exarkun at divmod.com  Fri Oct 21 23:43:58 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Fri, 21 Oct 2005 23:43:58 -0400
Subject: [Twisted-Python] Solved? Or Not? testing my application
In-Reply-To: <200510201807.20029.Marcin.Kasperski@softax.com.pl>
Message-ID: <20051022034358.27584.870982174.divmod.quotient.2573@ohm>

On Thu, 20 Oct 2005 18:07:19 +0200, Marcin Kasperski <marcin.kasperski at softax.com.pl> wrote:
>> As one more attempt I just ugraded from twisted 1.3 to twisted
>> 2.0 (= from twisted version present in Debian testing to
>> twisted version present in Debian unstable).
>>
>> And now ........ the script which in 1.3 ignored errors but
>> worked, *hangs(, in exactly the same way in which it used to
>> hang when I used deferredResult.
>
>I found the solution. The following modification caused
>everything to work as expected
>
>    def setUp(self):
>        self.dbpool = adbapi.ConnectionPool('psycopg', DSN)
>        self.dbpool.start()
>        # ...
>
>(I added self.dbpool.start())
>
>Confusing part is that start method doc tells:
>
>            If you are using the reactor normally, this function
>            does *not* need to be called.
>
>So it seems trial is *not* using reactor 'normally' - whatever
>does it mean.

Indeed.  Hopefully this will be rectified at some future point, but it is difficult to fix for now, due to the way the vast majority of existing tests
are written, along with the desire to retain backwards compatibility.

Jp



From exarkun at divmod.com  Fri Oct 21 23:45:38 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Fri, 21 Oct 2005 23:45:38 -0400
Subject: [Twisted-Python] testing my application
In-Reply-To: <200510201605.09012.Marcin.Kasperski@softax.com.pl>
Message-ID: <20051022034538.27584.1730092673.divmod.quotient.2575@ohm>

On Thu, 20 Oct 2005 16:05:03 +0200, Marcin Kasperski <marcin.kasperski at softax.com.pl> wrote:
>Thanks for the info. Running tests vai 'trial test_x.foo' has unpleasant effect of not allowing debugging but simple trick works:
>   if __name__ == "__main__":
>      import twisted.scripts.trial
>      import sys
>      sys.argv = ['-m', 'my_test' ]
>      twisted.scripts.trial.run()
>(BTW, what about patching run so it could get parameters and fallback to argv only when they are not given?)

Just so you know, and in case anyone reading isn't familiar with it, trial has a debug mode.  If you pass the -b flag, it will automatically set up pdb, plus a couple other Twisted-specific features that come in fairly handy.  twistd also supports this, letting you break into pdb at any point while the app is running, and also stopping for unhandled errors.

Jp



From tv at twistedmatrix.com  Sat Oct 22 03:07:53 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Sat, 22 Oct 2005 10:07:53 +0300
Subject: [Twisted-Python] LDAP Checker
In-Reply-To: <869525070.20051020134929@gmail.com>
References: <869525070.20051020134929@gmail.com>
Message-ID: <4359E549.4070706@twistedmatrix.com>

Manuel Aristar?n wrote:
> I'm learning Twisted, and already have a simple application
> running.
> I wante to experiment adding an LDAP checker to it. Is there any open
> source implementation of such a thing? I'm aware of LDAPtor, but I'm
> looking for some examples of integration with twisted.cred.

So you are _not_ aware of ldaptor.

ldaptor.checkers.LDAPBindingChecker is a Checker as used by
twisted.cred.



From Marcin.Kasperski at softax.com.pl  Sat Oct 22 17:20:59 2005
From: Marcin.Kasperski at softax.com.pl (Marcin Kasperski)
Date: Sat, 22 Oct 2005 23:20:59 +0200
Subject: [Twisted-Python] testing my application
In-Reply-To: <20051022034538.27584.1730092673.divmod.quotient.2575@ohm>
References: <20051022034538.27584.1730092673.divmod.quotient.2575@ohm>
Message-ID: <435AAD3B.1050600@softax.com.pl>


>
> Just so you know, and in case anyone reading isn't familiar with it, 
> trial has a debug mode.  If you pass the -b flag, it will 
> automatically set up pdb, plus a couple other Twisted-specific 
> features that come in fairly handy.  twistd also supports this, 
> letting you break into pdb at any point while the app is running, and 
> also stopping for unhandled errors.


I found it, but for not-so-hardcore python programmer, pdb is not the 
tool of the dreams. GUI Debugger (for instance one included in WingIDE 
or in Komodo or in Eric or ... is far more useful ....). And to use one 
it is necessary to start script within the debugger control, not to 
start debugger from trial.

And, as I started to talk about GUIs, it would be also nice to run 
unittests under GUI control (I love eric3-unittest - using it even when 
I am not using eric environment itself).



From Marcin.Kasperski at softax.com.pl  Sat Oct 22 17:24:44 2005
From: Marcin.Kasperski at softax.com.pl (Marcin Kasperski)
Date: Sat, 22 Oct 2005 23:24:44 +0200
Subject: [Twisted-Python] Solved? Or Not? testing my application
In-Reply-To: <20051022034358.27584.870982174.divmod.quotient.2573@ohm>
References: <20051022034358.27584.870982174.divmod.quotient.2573@ohm>
Message-ID: <435AAE1C.10002@softax.com.pl>


>> Confusing part is that start method doc tells:
>>
>>            If you are using the reactor normally, this function
>>            does *not* need to be called.
>>
>> So it seems trial is *not* using reactor 'normally' - whatever
>> does it mean.
>
>
> Indeed.  Hopefully this will be rectified at some future point, but it 
> is difficult to fix for now, due to the way the vast majority of 
> existing tests
> are written, along with the desire to retain backwards compatibility.

Maybe documentation could be slightly patched instead? Some sentence 
suggesting that one should call 'start' method if the application seem 
to hang could be added to the adbapi description... I must say (and you 
can see on this list ;-)) that for novice twisted programmer like me the 
whole thing was very confusing.



From jml at mumak.net  Sat Oct 22 17:59:30 2005
From: jml at mumak.net (Jonathan Lange)
Date: Sun, 23 Oct 2005 08:59:30 +1100
Subject: [Twisted-Python] testing my application
In-Reply-To: <435AAD3B.1050600@softax.com.pl>
References: <20051022034538.27584.1730092673.divmod.quotient.2575@ohm>
	<435AAD3B.1050600@softax.com.pl>
Message-ID: <d06a5cd30510221459k23a1a070w@mail.gmail.com>

On 23/10/05, Marcin Kasperski <Marcin.Kasperski at softax.com.pl> wrote:
> And, as I started to talk about GUIs, it would be also nice to run
> unittests under GUI control (I love eric3-unittest - using it even when
> I am not using eric environment itself).
>

Patience :)



From antonykummel at yahoo.com  Sun Oct 23 07:15:22 2005
From: antonykummel at yahoo.com (Antony Kummel)
Date: Sun, 23 Oct 2005 04:15:22 -0700 (PDT)
Subject: [Twisted-Python] twisted.python.log vs. standard logging module
Message-ID: <20051023111522.81923.qmail@web33904.mail.mud.yahoo.com>

Hi,

I'm looking for a discussion on this subject I once
saw where glyph lengthly elaborated on this matter.
I'm just trying to find some useful idioms for logging
my application, and I wonder why twisted doesn't have
logging levels etc. I remember that discussion made
some interesting phylosophical points, so if anyone
knows where it is...

Thanks,

Antony Kummel


		
__________________________________ 
Yahoo! FareChase: Search multiple travel sites in one click.
http://farechase.yahoo.com



From twisted at ralphm.ik.nu  Sun Oct 23 07:26:05 2005
From: twisted at ralphm.ik.nu (Ralph Meijer)
Date: Sun, 23 Oct 2005 13:26:05 +0200
Subject: [Twisted-Python] Twisted Jabber mailinglist
Message-ID: <20051023112605.GA3471@ik.nu>

Hi all,

Recently I set up a mailinglist [1,2] for Jabber development using Twisted. I
invited the developers from projects like pyMSNt, pyAIMt, pyICQt, PunJab
and Twibber and the list now has 15 members. I invite everyone who is
interested in Jabber development using Twisted to join.

Also, Jp released Twisted Words 0.3 that saw a restucturing of the
Jabber bits. The Twisted Xish project, that was changed in the same
restructuring, has been folded in Words now. Xish should be usuable for
non-Jabber XML streaming as well. I made a few comments and notes [3] on the
release and changes this on the new list.

[1] mailto:twisted-jabber at ik.nu
[2] https://mailman.ik.nu/mailman/listinfo/twisted-jabber
[3] https://mailman.ik.nu/pipermail/twisted-jabber/2005-October/000019.html

-- 
Groetjes,

ralphm



From nico at tekNico.net  Sun Oct 23 09:02:46 2005
From: nico at tekNico.net (Nicola Larosa)
Date: Sun, 23 Oct 2005 15:02:46 +0200
Subject: [Twisted-Python] Re: twisted.python.log vs. standard logging module
In-Reply-To: <20051023111522.81923.qmail@web33904.mail.mud.yahoo.com>
References: <20051023111522.81923.qmail@web33904.mail.mud.yahoo.com>
Message-ID: <djg1lm$edc$1@sea.gmane.org>

> I'm looking for a discussion on this subject I once
> saw where glyph lengthly elaborated on this matter.
> I'm just trying to find some useful idioms for logging
> my application, and I wonder why twisted doesn't have
> logging levels etc. I remember that discussion made
> some interesting phylosophical points, so if anyone
> knows where it is...

You're lucky, Glyph posted the link the other day:

http://twistedmatrix.com/bugs/issue307

-- 
Nicola Larosa - nico at tekNico.net

I've looked at life from both sides now
>From win and lose, and still somehow
It's life's illusions I recall
I really don't know life at all
 -- Joni Mitchell, Both sides now, Clouds, 1969




From glyph at divmod.com  Sun Oct 23 16:19:13 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Sun, 23 Oct 2005 16:19:13 -0400
Subject: [Twisted-Python] Twisted Jabber mailinglist
In-Reply-To: <20051023112605.GA3471@ik.nu>
Message-ID: <20051023201913.27584.1025925482.divmod.quotient.3107@ohm>



On Sun, 23 Oct 2005 13:26:05 +0200, Ralph Meijer <twisted at ralphm.ik.nu> wrote:
>Hi all,

>Recently I set up a mailinglist for Jabber development using Twisted.

Thanks for setting this up, Ralph.

>Also, Jp released Twisted Words 0.3 that saw a restucturing of the
>Jabber bits. The Twisted Xish project, that was changed in the same
>restructuring, has been folded in Words now. Xish should be usuable for
>non-Jabber XML streaming as well. I made a few comments and notes on the
>release and changes this on the new list.

I will subscribe soon, but I'm going to reply to the message that you linked to here, because it impacts other projects.

>Of course I hope that Xish is useful for non-Jabber use, too. If this
>happens, we might spin out Xish again. For now it doesn't really matter
>where it is, I guess.

Xish's utility is not at issue.  I think it's great that it's useful for non-jabber uses.  Guido's opinion [1] notwithstanding, Python is a framework [2] and so should each Twisted subprojects be.  I mentioned this in an earlier post [3] but as long as I'm talking I might as well explain a bit further.

There are a plethora of buggy, one-off libraries in the Python world that are not supported or tested because they don't have any user-facing tools which can be tested.  They're easy to write, and easy to release, but libraries should always be written in support of applications, not simply in the hopes they will be useful.  As Rails has famously declared, good frameworks are "extracted".

As an example of this, Twisted Matrix Labs' experience with distributing libraries has been, to put it politely, poor.  Aside from .xish, whose function was mainly to complicate t.words releases and installations, our other two libraries are .pair and .flow, both of which are pretty much useless to everyone but their respective authors and currently unmaintained.

Users of xish can easily install twisted.words, then import only xish.  Keep your import dependencies as clean as possible so that if they do this and then use a tool like freeze or py2exe, they won't suck in all of twisted.words by accident.  The rest of Twisted has been historically careful about this, because while I have encountered several situations where deployment footprint was a concern, I have yet to meet a developer whose hard drive was so full that they couldn't spare an additional 100k on their disk for a full subproject during installation.

The main message here is that each Twisted subproject should be a coherent whole that performs an actual function.  If .xish grew a tool for monitoring or transforming XML streams that would actually be useful to a reasonable-sized audience (i.e. not just for the author of the tool to test the library and not just so it can be split out ^_^), then it might be a good candidate for being split out into its own project again.

[1]: http://mail.python.org/pipermail/python-dev/2005-October/057486.html
[2]: http://www.twistedmatrix.com/users/glyph/rant/extendit.html
[3]: http://archives.free.net.ph/message/20050929.162612.040ae285.en.html



From mary-twisted at puzzling.org  Sun Oct 23 17:44:41 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Mon, 24 Oct 2005 07:44:41 +1000
Subject: [Twisted-Python] Twisted Jabber mailinglist
In-Reply-To: <20051023201913.27584.1025925482.divmod.quotient.3107@ohm>
References: <20051023112605.GA3471@ik.nu>
	<20051023201913.27584.1025925482.divmod.quotient.3107@ohm>
Message-ID: <20051023214441.GD25533@sourdust.home.puzzling.org>

On Sun, Oct 23, 2005, glyph at divmod.com wrote:
> Users of xish can easily install twisted.words, then import only xish.  

It would be useful to people who might want to do this though to
thoroughly advertise the existence of whatever incredibly useful
libraries you've developed as part of a subproject. At the moment
http://twistedmatrix.com/projects/words/ doesn't seem to be extolling
the virtues of xish: perhaps it should be?

At some point in the distant past (about a year ago actually, when I was
in Boston, so not that distant) there was talk of some kind of big
matrix, along the lines of "you want to do XML/SMTP/DNS... then look at
blah." Given the subproject philosophy Glyph outlined in the parent mail
this makes more sense, so I will probably branch something and bug
people to contribute descriptions of all their hidden little gems to it.

-Mary



From ms at cerenity.org  Sun Oct 23 23:22:16 2005
From: ms at cerenity.org (Michael)
Date: Mon, 24 Oct 2005 04:22:16 +0100
Subject: [Twisted-Python] Re: Freevo 2.0, Kamaelia, pyevent,
	Eventnet/LGT: what's going on?
Message-ID: <200510240422.16289.ms@cerenity.org>

Hi,


I've just come across this thread (unsubbed from the twisted list during 
EuroOSCON, just resubbed after a) getting back b) fixing my machine from a 
reiser corruption...).

Much as Johann Borck in the thread said "I feel like i have to make a 
statement ...", I feel it's probably worth putting in a tuppence worth on the 
Kamaelia comments in the thread. (If only to try and avoid negative 
misunderstandings. I suck though when I try to avoid misunderstandings 
though, so here's fingers crossed I don't cause any here ... )

Also, sorry for the length of this if it's too long. I could reply to the
comments in thread, but that might just cause a thread explosion. If this
is off topic, just delete. Next paragraph probably is probably a sufficient
summary :-)

Some clarification. First of all, I don't see Kamaelia as in competition with 
Twisted. Indeed, Kamaelia should be guttable (people are welcome to
do so), and we'd rather collaborate rather than compete. (I've never
understood the desire to compete in some open source projects, except
on a "for fun"/variety basis)

At all talks longer than my ill-advised lightning talk at Europython 2004 I've 
made it patently clear that I think that Twisted is best of breed in python 
for what it does. And not only that, damn fine at it as well.

The architecture in Kamaelia is however borne from a) working with
architectures similar to, but not quite identical to twisted and wondering
if b) *maybe* there's a better way. I'm not saying Kamaelia *is* that better
way (I'm too close to it), just an alternate approach. That said, if you're
trying an alternate approach, starting from scratch is one way of doing
so, and that's the simple reason we're not using Twisted :-)

After my talk at Europython 2004 I realised to my dismay that some people
mistook my viewpoint of *maybe* there being a better way (badly expressed
then as well :-( ) as being "Twisted sucks/is bad", which is far from the
truth.

Taking some specific points from the thread, which refer to the various 
projects:

Nicola Larosa nico at tekNico.net wrote:
> Why isn't Twisted seen, by these projects at least, as a viable tool? Is
> the event-driven Python world undergoing the same fragmentation as the web
> framework one?

1: Don't ask on the twisted list, ask the people who are running those
    projects :-) (I only discovered the thread because I was resubbing and
    wondered if I'd missed something)
2: We do view twisted as a viable tool. We're just trying something different.
    The "R" part of BBC R&D suggests that trying something different might
    occasionally be a good idea :-) (Then again it might not, experience is
    something you get after you needed it (maybe:) )
3: Kamaelia is much more dataflow driven between active objects rather than
    viewing the system as event driven. Sure, data delivery/receipt are
    clearly events, but that's used for optimisation rather than the core
    idea. (It's also based on recognising that some ways of viewing network
    systems look very similar to asynchronous hardware design)

Maybe they're just different mappings on the same problem space. If so, then 
maybe the different mapping might be a useful different way of looking at the 
problem. **Maybe**.

It's an interesting comment from Freevo's changelog:
   "It is a huge monster and hard to understand"

I think there's an element of truth in that to //any// sufficiently useful 
framework or library. It'd be nice if elements of Kamaelia were able to be 
gutted into twisted, *IF* they'd help with avoiding the above problem. (*IF*)
(A core aim in Kamaelia is to allow novices to get up to learn the core 
quickly)

Stefan Behnel wrote:
> Kamaelia ... is not as 'feature-complete'. So it may get ugly once it
> implements more features. That's a general problem

Indeed, this is possible. However, one interesting thing has shown up
recently - we appear to be converging towards something similar to
deferred generators. Specific example - ask the scheduler to run a
different generator in the place of the current generator, and return
control when done:
    yield WaitComplete(
          self.requestDisplay(DISPLAYREQUEST=True,
                              callback = (self,"control"),
                            size = (width, height),
                            position = self.position
                            )
    )

self.requestDisplay returns a generator, WaitComplete creates an
Axon.Ipc.WaitComplete message, which is passed to the scheduler which
runs it instead of the main component. This then isn't really a huge step to
deferreds/defgens. (If I understand those right) I'm not totally happy with 
the syntax above, and it's likely to change, but it's an initial step.

Itamar Shtull-Trauring itamar at itamarst.org 
> kamaelia: an experimental platform for what I hear are some interesting
> ideas we should look at; 

Please do. Tell us what sucks, take the good stuff. We'll then try and make 
the sucky stuff not suck and then take that :-)

Itamar Shtull-Trauring itamar at itamarst.org 
> probably would be a good candidate for running 
> on top of Twisted since they seem to deal with higher levels of
> abstraction mostly.

Agreed. Not immediately though, we're aiming for around 9-12 months from
now. We should either be running on top of twisted at that point, or side
by side with, or the other way round, or Kamaelia subsumed by something
else.

Antoine Pitrou solipsis at pitrou.net 
> (OTOH, I very briefly looked at Kamaelia's introduction doc and I don't
> find it attractive - this kind of dataflow-programming model looks quite
> unflexible)

I don't suppose you could follow up on that on the Kamaelia list could you?

Moe Aboulkheir moe at divmod.com 
>[ on PEP 342 potentially removing the reliance on frameworks for
>  accomplishing clean asychronous IO - libraries whose clients accrue
>  a dependency on a non-standard reactor/event loop/runtime/whatever
>  in order to operate. kamaelia probably doesn't fit into this category, i
>  wouldn't know. ] 

I think PEP 342 has the potential to simplify everyone's systems. At one point
Kamaelia components could just be run like any other generator. Since then
the dependency on the scheduler has grown somewhat. Prior to seeing this
post I'd already decided that we needed to regrow the earlier simplicity to
allow easier cherry picking by other projects.

Also, personally I'd hope that *if* a similar transform happening in Twisted,
PEP342 may result in is a WSGI for events type situation. That would probably
result in most networked apps being powered by Twisted on some level,
maybe composed in a Kamaelia style way, maybe not. (I've noted the
twisted community have a knack for taking an idea, turning it on it's
head and doing something cool with it :-) )

glyph at divmod.com glyph at divmod.com:

> Also, it gives the Twisted team some potential competition to focus on. 
> Possibly a source of motivation, and besides, everybody loves a race :). 

As long as it's a "Wacky Races" style of competition, I'm happy with Kamaelia
being competition. (Seriously though, Kamaelia is from a "what if", and 
hopefully scavengeable - either now or in future)

> Kamaelia seems more promising to me; I imagine that they might produce some
> serious competition eventually if that's what they aim to do.  

Only in terms of approach. Any sufficiently useful open source project is
easily consumable by another. (Being served up for dinner and eaten is
the ultimate success IMO) I do aim it to be a useful alternative way of 
thinking about problems similar to those that twisted thinks about.

I saw your post here http://www.livejournal.com/users/glyf/41709.html , and
it struck me as interesting. Essentially part of the comments appear to reuse
of generators, which strikes a chord (largely because that's how hardware
would have to work, and Kamaelia's core is based on asynchronous hardware
design[*] ). Again, if we do head down that route (depends on resources, etc),
then I'd hope people feel happy to rip out code where needed.

   [*] Whilst Kamaelia has no chance at present of compiling to silicon,
         things like MyHDL give me hope that it could be possible someday,
         and in that scenario, you need a system similar to the one you
         described.

> However, they claim that only the "Axon" part of their project is stable,
> and that doesn't yet include anything that does select().   

We consider Axon to be API stable (ie stuff that's there is not likely to be 
removed). Axon is designed to be a small framework for handling concurrency, 
communications and composition between (mainly) generators, and threads
have recently been introduced as well. By itself, Axon is intended to be
very, very boring. The instant it's not being boring (such as doing a
select, or poll, or ...) it's doing too much :-)

As a result Axon's version number reflects what we think about it's stability.
The reason for the jump from 1.0.X to 1.1.X was due to threaded components.
(These were added earlier than expected due to a need for threaded
components on Nokia mobiles, and have a suboptimal implementation and
API right now.)

The bulk of Kamaelia however is a collection of components, which is growing
and we can do a large variety of Stuff.

However, we still think (despite having used Kamaelia now for some time), that 
the collection of components we have at present is incomplete (around 30% of 
what would be needed generally speaking), and that the API for the components 
(specifically which inboxes/outboxes they have, names of components, file 
hierarchy etc), is still in flux.  

This collection of Stuff is being driven by application spikes, in application 
areas which are off the beaten track from the project's main goal (to round 
out the system), as well as in the main project goal area. So far this is 
proving to be an interesting approach.

As a result we do have things like TCP server/client components, a selector 
component (which advertises itself as a service internally) which manages a 
select subsystem (which we're thinking of farming off into a thread to allow 
the entire system to sleep waiting for it), pygame Stuff, Tk Stuff, and so 
on. The latest application spike was a simple paint program for example, 
which was useful for testing a variety of subsystems. Similarly for the 
presentation tool spike.

However, the low version number (currently) 0.3.0 is really to act as a 
warning "we still expect quite a lot to change before we hit 1.0.0". I could 
wax lyrical on that, but will only do so if people are interested :) However 
the reason it's 0.3.0, is because at minimum:
   * We want to have sensible integration with twisted (ie Kamaelia usable in
      twisted or vice versa) when we hit 1.0.0
   * There's a whole bunch of core ideas we want to extend before then,
      including the graphical editting toolset.
   * We know we're just skimming the surface of possible components and
      systems (despite the amount of stuff we /can/ do). The component set
      needs to be fleshed out more before we know if the approach has
      worth. (It feels like it to me at present, but then I'm biassed)

That said, generally, things are more stable than unstable, though currently I 
prefer to play up the instability to allow more freedom to experiment with 
APIs and ideas in the short/medium term.

Anyway, I hope that this mail assures everyone on the twisted list (who was 
worried - struck me as a minority) that we're not really in /competition/,
but more looking at providing /options/ for everyone, including Twisted :-)

So far we're finding our approach useful and fun, which at the end of the
day is all that matters. (For work the former is important, if it was just my
personal time, then it could be either :-)

Best Regards,


Michael.
--
Michael.Sparks at rd.bbc.co.uk, http://kamaelia.sourceforge.net/ 
British Broadcasting Corporation, Research and Development 
Kingswood Warren, Surrey KT20 6NP 
 
This message (and any attachments) may contain personal views 
which are not the views of the BBC unless specifically stated.



From jml at mumak.net  Mon Oct 24 03:25:37 2005
From: jml at mumak.net (Jonathan Lange)
Date: Mon, 24 Oct 2005 18:25:37 +1100
Subject: [Twisted-Python] Twisted Jabber mailinglist
In-Reply-To: <20051023201913.27584.1025925482.divmod.quotient.3107@ohm>
References: <20051023112605.GA3471@ik.nu>
	<20051023201913.27584.1025925482.divmod.quotient.3107@ohm>
Message-ID: <d06a5cd30510240025x4c33256m@mail.gmail.com>

On 24/10/05, glyph at divmod.com <glyph at divmod.com> wrote:
> The main message here is that each Twisted subproject should be a coherent whole that performs an actual function.  If .xish grew a tool for monitoring or transforming XML streams that would actually be useful to a reasonable-sized audience (i.e. not just for the author of the tool to test the library and not just so it can be split out ^_^), then it might be a good candidate for being split out into its own project again.
>

You know, by these standards, Trial is a good candidate for being
split out into its own project.

Now, sceptics might say, "ahh, but does not core depend on Trial?". 
To which I would say, "No it doesn't".

cheers,
jml



From tv at twistedmatrix.com  Mon Oct 24 07:46:01 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Mon, 24 Oct 2005 14:46:01 +0300
Subject: [Twisted-Python] Twisted Jabber mailinglist
In-Reply-To: <20051023201913.27584.1025925482.divmod.quotient.3107@ohm>
References: <20051023201913.27584.1025925482.divmod.quotient.3107@ohm>
Message-ID: <435CC979.1080809@twistedmatrix.com>

glyph at divmod.com wrote:
> As an example of this, Twisted Matrix Labs' experience with distributing
> libraries has been, to put it politely, poor.  Aside from .xish, whose
> function was mainly to complicate t.words releases and installations,
> our other two libraries are .pair and .flow, both of which are pretty
> much useless to everyone but their respective authors and currently
> unmaintained.

I fully expect twisted.pair to not release again without major changes.
I feel the biggest reason it needed to be split from twisted.core was to
give it a way to die.

I will pick up twisted.pair (whether with that name or something else,
whether as part of twisted or not) only when I get back to writing some
DHCP code. Which is not likely to happen soon. Anyone suffering too
badly from ISC, feel free to sponsor the work.



From jml at mumak.net  Mon Oct 24 23:19:40 2005
From: jml at mumak.net (Jonathan Lange)
Date: Tue, 25 Oct 2005 14:19:40 +1100
Subject: [Twisted-Python] Twisted Jabber mailinglist
In-Reply-To: <d06a5cd30510240025x4c33256m@mail.gmail.com>
References: <20051023112605.GA3471@ik.nu>
	<20051023201913.27584.1025925482.divmod.quotient.3107@ohm>
	<d06a5cd30510240025x4c33256m@mail.gmail.com>
Message-ID: <d06a5cd30510242019o2e6d8318r@mail.gmail.com>

On 24/10/05, Jonathan Lange <jml at mumak.net> wrote:
> On 24/10/05, glyph at divmod.com <glyph at divmod.com> wrote:
> > The main message here is that each Twisted subproject should be a coherent whole that performs an actual function.  If .xish grew a tool for monitoring or transforming XML streams that would actually be useful to a reasonable-sized audience (i.e. not just for the author of the tool to test the library and not just so it can be split out ^_^), then it might be a good candidate for being split out into its own project again.
> >
>
> You know, by these standards, Trial is a good candidate for being
> split out into its own project.
>
> Now, sceptics might say, "ahh, but does not core depend on Trial?".
> To which I would say, "No it doesn't".
>

Seriously, why don't we release Trial as a separate project?



From exarkun at divmod.com  Tue Oct 25 00:03:30 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 25 Oct 2005 00:03:30 -0400
Subject: separate trial release (was Re: [Twisted-Python] Twisted Jabber
	mailinglist)
In-Reply-To: <d06a5cd30510242019o2e6d8318r@mail.gmail.com>
Message-ID: <20051025040330.27584.415177063.divmod.quotient.3603@ohm>

On Tue, 25 Oct 2005 14:19:40 +1100, Jonathan Lange <jml at mumak.net> wrote:
>On 24/10/05, Jonathan Lange <jml at mumak.net> wrote:
>> On 24/10/05, glyph at divmod.com <glyph at divmod.com> wrote:
>> > The main message here is that each Twisted subproject should be a coherent whole that performs an actual function.  If .xish grew a tool for monitoring or transforming XML streams that would actually be useful to a reasonable-sized audience (i.e. not just for the author of the tool to test the library and not just so it can be split out ^_^), then it might be a good candidate for being split out into its own project again.
>> >
>>
>> You know, by these standards, Trial is a good candidate for being
>> split out into its own project.
>>
>> Now, sceptics might say, "ahh, but does not core depend on Trial?".
>> To which I would say, "No it doesn't".
>>
>
>Seriously, why don't we release Trial as a separate project?

Passing unit tests would be a good start towards that ;)

Seriously: leaving twisted.protocols.loopback aside, I still think Core depends on Trial because Trial is how you can *tell* if Core is working: you run its tests.

So Core depends on Trial, and Trial depends on core.  If you must have both installed for either to work, is there really a benefit to packaging them separately?  If you can suggest some other way to demonstrate that a Core install works, maybe you can convince me releasing trial separately has a purpose.

Jp



From andrew-twisted at puzzling.org  Tue Oct 25 00:42:24 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 25 Oct 2005 14:42:24 +1000
Subject: separate trial release (was Re: [Twisted-Python] Twisted Jabber
	mailinglist)
In-Reply-To: <20051025040330.27584.415177063.divmod.quotient.3603@ohm>
References: <d06a5cd30510242019o2e6d8318r@mail.gmail.com>
	<20051025040330.27584.415177063.divmod.quotient.3603@ohm>
Message-ID: <20051025044224.GA9109@trogdor.home.puzzling.org>

On Tue, Oct 25, 2005 at 12:03:30AM -0400, Jean-Paul Calderone wrote:
[...]
> >Seriously, why don't we release Trial as a separate project?
> 
> Passing unit tests would be a good start towards that ;)
> 
> Seriously: leaving twisted.protocols.loopback aside, I still think Core 
> depends on Trial because Trial is how you can *tell* if Core is working: 
> you run its tests.

I disagree.  If someone wrote some sort of really shiny debugger that worked
really nicely with Twisted, and so was very helpful as a development tool
for hacking on Twisted, I don't think it would qualify as a dependency of
core.  Much the same way that emacs/vim, epydoc, manhole, and who knows what
else aren't dependencies.

Trial is a valuable tool that all developers almost certainly should have
installed.  That doesn't mean it's a dependency in any useful technical
sense: I can happily delete twisted/trial and still have all my
twisted-using applications I've written or downloaded still work.

The fact that Trial is so clearly of use to other projects in exactly the
same way that it's of use to core is another reason to have it seperate.

Trial and the rest of core are clearly developing at different rates, so
there's possibly even some benefit from decoupling their releases.

So I think if Jonathan wants to release it seperately, I'm happy to let him.

-Andrew.




From glyph at divmod.com  Tue Oct 25 03:04:01 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 25 Oct 2005 03:04:01 -0400
Subject: separate trial release (was Re: [Twisted-Python] Twisted Jabber
In-Reply-To: <20051025044224.GA9109@trogdor.home.puzzling.org>
Message-ID: <20051025070401.27584.41267374.divmod.quotient.3645@ohm>



On Tue, 25 Oct 2005 14:42:24 +1000, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:

>The fact that Trial is so clearly of use to other projects in exactly the
>same way that it's of use to core is another reason to have it seperate.
>
>Trial and the rest of core are clearly developing at different rates, so
>there's possibly even some benefit from decoupling their releases.
>
>So I think if Jonathan wants to release it seperately, I'm happy to let him.

Overall I'm a bit reluctant to spin out more new projects right now, but this actually sounds like a pretty compelling case to me.

However, a point in JP's favor: there are source files distributed with core (twisted/test/*) that *import* code from Trial.  Test cases seem to be, in every sense, a bit of a gnarly special case.

Is there anything other than test cases where you think imports are *not* counted as a dependency?



From Marcin.Kasperski at softax.com.pl  Tue Oct 25 03:45:41 2005
From: Marcin.Kasperski at softax.com.pl (Marcin Kasperski)
Date: Tue, 25 Oct 2005 09:45:41 +0200
Subject: separate trial release (was Re: [Twisted-Python] Twisted Jabber
In-Reply-To: <20051025070401.27584.41267374.divmod.quotient.3645@ohm>
References: <20051025070401.27584.41267374.divmod.quotient.3645@ohm>
Message-ID: <435DE2A5.3010603@softax.com.pl>

> However, a point in JP's favor: there are source files distributed 
> with core (twisted/test/*) that *import* code from Trial.  Test cases 
> seem to be, in every sense, a bit of a gnarly special case.
>
testcases are not necessary for production installation, just as 
technical docs are. In fact testcases, trial, docs etc are 
developer-environment tools, not production-environment tools.

Maybe it could make sense to distribute:
- twisted-core - bunch of libraries performing the twisted job
- twisted-dev - trial, testcases, docs etc




From tv at twistedmatrix.com  Tue Oct 25 06:41:40 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Tue, 25 Oct 2005 13:41:40 +0300
Subject: separate trial release (was Re: [Twisted-Python] Twisted Jabber
In-Reply-To: <435DE2A5.3010603@softax.com.pl>
References: <20051025070401.27584.41267374.divmod.quotient.3645@ohm>
	<435DE2A5.3010603@softax.com.pl>
Message-ID: <435E0BE4.2020807@twistedmatrix.com>

Marcin Kasperski wrote:
>> However, a point in JP's favor: there are source files distributed
>> with core (twisted/test/*) that *import* code from Trial.  Test cases
>> seem to be, in every sense, a bit of a gnarly special case.
> testcases are not necessary for production installation, just as
> technical docs are. In fact testcases, trial, docs etc are
> developer-environment tools, not production-environment tools.

I consider running unit tests an essential part of the build process.
Thus, in my eyes twisted-core has a build-time dependency on trial, even
if it doesn't have a runtime dependency.



From antonykummel at yahoo.com  Tue Oct 25 08:19:43 2005
From: antonykummel at yahoo.com (Antony Kummel)
Date: Tue, 25 Oct 2005 05:19:43 -0700 (PDT)
Subject: [Twisted-Python] Thoughts about testing
Message-ID: <20051025121943.431.qmail@web33909.mail.mud.yahoo.com>

Hi all,

I just want to share some ideas that I have had.

>From my experience, testing with Trial is too hard. My
problems can be divided into three categories: 1.
obscure error reporting, 2. unclean reactor 3. whoop
whoop whoop. 

I am also pretty sure that I'm doing things that Trial
does not want me to do, such as actually opening
sockets and communication over the network. I'm saying
this because it does not seem to happen in the Twisted
test-suite. But I don't think there is a good reason
for this limitation.

Actually, in sum, I think there are too many
limitations on writing tests with Trial, and they all
boil down to the unclean reactor problem (or at least
most of them). I want to suggest an alternative
approach.

How about not requiring the reactor to be clean at the
end of a test? If anyone wants to make sure that
anything they do leaves the reactor in a clean state,
they can test for it themselves. This seems to me more
like a constraint imposed by the implementation of
Trial rather than a useful feature. Also, parts of
Twisted itself are practically unusable inside a test
because they leave the reactor dirty (such as threaded
address resolution). An alternative feature could be
enabling the user to specify that a certain delayed
call or thread is allowed to remain after the test,
and then Trial won't complain. The only question
remaining is how to do it. Simple: use a different
process. Run the tests in a different process, and
create a new one each time the reactor is dirtied.
py.execnet is a nice example of this concept.

The second thought is this: there seem to be popping
up different testing toolkits each with their own very
nice extensions and features
(http://testoob.sourceforge.net/,
http://codespeak.net/py/current/doc/test.html). Trial
cannot benefit from this, having branched away at the
pyUnit level. I think Trial's special features can be
relatively easily formulated as plugins to a
plugin-oriented testing framework (especially if the
clean reactor requirement is relieved), and so can the
other testing packages. What this means, is that the
best thing anyone who wants the world of unit testing
to develop, and to benefit from it, is to push for a
plugin-oriented pyUnit, and for an implementation of
Trial (and the other tools) as a plugin for that
framework. I think.

Any comments?

Antony Kummel


		
__________________________________ 
Yahoo! FareChase: Search multiple travel sites in one click.
http://farechase.yahoo.com



From eric.basley at dexia-securities.fr  Tue Oct 25 09:03:31 2005
From: eric.basley at dexia-securities.fr (Eric Basley)
Date: Tue, 25 Oct 2005 15:03:31 +0200
Subject: [Twisted-Python] Life cycle of ApplicationServices
Message-ID: <435E2D23.50903@dexia-securities.fr>

I'm writting a FIX (Financial Information Exchange) application with 
Twisted with the target to compete with quickfix. I'm very close,  
everything is perfect except the way to control life cycle of services.
Let's take an example :
The FIX main application is an engine able to manage many FIX sessions 
and is controled by web services. A session may act as a TCP server or 
client. Sessions have starting time and stopping time. For a client 
session I'm using a protocol.ReconnectingClientFactory. With 
Twisted-2.0.1 there is no way to stop properly a service and there  is 
no way to destroy  (factory, protocol, connector, ...) associated to the 
service.
Does someone have solutions about clean life cycle management ?
regards.
eric basley



From y.glodt at sitasoftware.lu  Tue Oct 25 09:05:17 2005
From: y.glodt at sitasoftware.lu (Yves Glodt)
Date: Tue, 25 Oct 2005 15:05:17 +0200
Subject: [Twisted-Python] ssh tunnel
Message-ID: <435E2D8D.4090800@sitasoftware.lu>

Hi,

I'm new to conch and I wonder if somebody could point me to an example 
of how to create an ssh tunnel with conch to forward a connection (e.g. 
database or vnc) through that tunnel (if that's possible at all...)


Thanks in advance and best regards,
Yves




From phil at bubblehouse.org  Tue Oct 25 11:05:21 2005
From: phil at bubblehouse.org (Phil Christensen)
Date: Tue, 25 Oct 2005 11:05:21 -0400
Subject: [Twisted-Python] question about threading
Message-ID: <ED54CBDE-54CF-43A9-82AF-1B157A1F17FE@bubblehouse.org>

hey folks,

i've got a quick question for anyone that can help me out. i'm also  
in the process of looking this up in the twisted docs/code, but this  
is some last minute coding for a big demo tomorrow, so i'm hedging my  
bets by posting here.

i've got a relatively simple async twisted server that has a custom  
protocol. most everything the server needs to do on a receipt of a  
message is short running, but i have one task that isn't.

i need to spawn a thread that executes a couple of binaries (html2ps  
and ps2pdf) which are generally long-running. after executing those  
binaries, i need to send a message back to the client that sent the  
original command to generate the pdf. i tried just creating a basic  
thread that holds onto a reference to the client object, but it  
doesn't seem to send the command back to the client until i send  
another message to the server (any kind of message).

i know there's a bunch of reactor methods that deal with threads, but  
i've never used them before, and i'm not sure which one will fix this  
issue.

here's my thread subclass:

class PDFGenerator(threading.Thread):
     def __init__(self, client):
         threading.Thread.__init__(self)
         self.client = client

     def run(self):
         pres = event.getActivePresentation()
         t = datetime.datetime.now()
         base_name = 'sample-file-name'
         out_html = file('/tmp/' + base_name + '.html', 'w')
         # [snip snip snip]
         # write some html to the file
         out_html.close()
         os.system('html2ps /tmp/' + base_name + '.html > /tmp/' +  
base_name + '.ps')  # > /tmp/' + base_name + '_ps.log')
         os.system('mkdir data/transcripts/' + str(pres.id))
         os.system('ps2pdf /tmp/' + base_name + '.ps data/ 
transcripts/' + str(pres.id) + '/' + base_name + '.pdf > /tmp/' +  
base_name + '_pdf.log')
         lock = threading.Lock()
         lock.acquire()
         self.client.sendCommand('presentTranscript', ['/ 
transcripts/' + str(pres.id) + '/' + base_name + '.pdf'])
         lock.release()


the client object holds a reference to the protocol object, and  
sendCommand basically just executes:

         print "Sending " + message + " to " + str(self.protocol.source)
         self.protocol.transport.write(message + "\0")


i made sure to set the lock, but i think the problem is in how i'm  
using threads. the clue i'm seeing is that in the log, i see the  
following:

2005/10/25 10:40 EDT [SSProtocol,25,127.0.0.1] Got generateTranscript 
('') from IPv4Address(TCP, '127.0.0.1', 49179)
2005/10/25 10:40 EDT [-] Sending presentTranscript,/transcripts/ 
phil_bubblehouse.org_2005-10-25-10-40-13.pdf to IPv4Address(TCP,  
'127.0.0.1', 49179)

you can see that the second log entry doesn't print the protocol  
object that's generating the message.

i know there's something simple i'm not doing; any help would be  
appreciated.

-phil




From phil at bubblehouse.org  Tue Oct 25 11:20:46 2005
From: phil at bubblehouse.org (Phil Christensen)
Date: Tue, 25 Oct 2005 11:20:46 -0400
Subject: [Twisted-Python] question about threading
In-Reply-To: <ED54CBDE-54CF-43A9-82AF-1B157A1F17FE@bubblehouse.org>
References: <ED54CBDE-54CF-43A9-82AF-1B157A1F17FE@bubblehouse.org>
Message-ID: <DA62EF80-24DE-4D65-856A-CE69D3540EE0@bubblehouse.org>

well, as it turns out, the documentation helped me out on that one.  
thanks anyways, though...

-phil

On Oct 25, 2005, at 11:05 AM, Phil Christensen wrote:

> hey folks,
>
> i've got a quick question for anyone that can help me out. i'm also  
> in the process of looking this up in the twisted docs/code, but  
> this is some last minute coding for a big demo tomorrow, so i'm  
> hedging my bets by posting here.




From itamar at itamarst.org  Tue Oct 25 11:27:30 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 25 Oct 2005 11:27:30 -0400
Subject: [Twisted-Python] Life cycle of ApplicationServices
In-Reply-To: <435E2D23.50903@dexia-securities.fr>
References: <435E2D23.50903@dexia-securities.fr>
Message-ID: <1130254051.9200.5.camel@localhost.localdomain>

On Tue, 2005-10-25 at 15:03 +0200, Eric Basley wrote:

> The FIX main application is an engine able to manage many FIX sessions 
> and is controled by web services. A session may act as a TCP server or 
> client. Sessions have starting time and stopping time. For a client 
> session I'm using a protocol.ReconnectingClientFactory. With 
> Twisted-2.0.1 there is no way to stop properly a service and there  is 
> no way to destroy  (factory, protocol, connector, ...) associated to the 
> service.

Services (I assume you're using twisted.application.service here) are
meant typically for "persistent" objects, encapsulating a specific
system's business logic. In some cases this might be a thin wrapper
around factory, but if you are opening many short-lived connections you
probably don't want to encapsulate as a service. For example, a Web
crawler might be a service - you can start and stop it, configure where
it goes; the specific HTTP connections it manages shouldn't be services.





From glyph at divmod.com  Tue Oct 25 11:27:51 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 25 Oct 2005 11:27:51 -0400
Subject: [Twisted-Python] question about threading
In-Reply-To: <ED54CBDE-54CF-43A9-82AF-1B157A1F17FE@bubblehouse.org>
Message-ID: <20051025152751.10365.1329181428.divmod.quotient.6@ohm>



On Tue, 25 Oct 2005 11:05:21 -0400, Phil Christensen <phil at bubblehouse.org> wrote:
>hey folks,

Let me start from the other end of your message:

>the client object holds a reference to the protocol object, and  sendCommand 
>basically just executes:
>
>         print "Sending " + message + " to " + str(self.protocol.source)
>         self.protocol.transport.write(message + "\0")
          ^
The reactor is not thread safe, and thus this call to 'write' has undefined (and bad) behavior.  You _MUST_ use the reactor thread APIs; they're not optional conveniences, they're the only way you can use threads with Twisted :)

>i need to spawn a thread 

danger, danger will robinson.  Here is where your trouble started :).  Actually you *don't* need to spawn a thread, you need to spawn a process - twisted supports processes - and I can't guarantee that os.system will work properly from within a Twisted application.  Handling of SIGCHILD has proven to be a sticky wicket in the past.

>i know there's a bunch of reactor methods that deal with threads, but  i've 
>never used them before, and i'm not sure which one will fix this  issue."

There are really only 2: callInThread and callFromThread.  There is a convenience API, twisted.internet.threads.deferToThread, which might be what you wanted, if what you wanted was in fact a thread.  However, you want spawnProcess in any event.  As I said, os.system may not work at _all_ from within Twisted, depending on your operating system.

>here's my thread subclass:

Don't subclass thread.  Twisted implements its own threadpool; use callInThread with what used to be your 'run' function.

>     def run(self):
>         pres = event.getActivePresentation()
>         t = datetime.datetime.now()
>         base_name = 'sample-file-name'
>         out_html = file('/tmp/' + base_name + '.html', 'w')
>         # [snip snip snip]
>         # write some html to the file
>         out_html.close()
          ^

          This bit could actually be threaded, if it's slow and blocking.  My suggestion: If it's for a demo, just block.

>         os.system('html2ps /tmp/' + base_name + '.html > /tmp/' +  base_name 
>+ '.ps')  # > /tmp/' + base_name + '_ps.log')

Since reactor.spawnProcess might be a bit tedious for simply running this here, try this:

          twisted.internet.utils.getProcessOutput('/usr/bin/html2ps', ['html2ps', ...).addCallback(keepGoing)

>         os.system('mkdir data/transcripts/' + str(pres.id))
          ^ UGH!  Why are you spawning another process here??  os.mkdir, please.
          
>         os.system('ps2pdf /tmp/' + base_name + '.ps data/ transcripts/' + 
>str(pres.id) + '/' + base_name + '.pdf > /tmp/' +  base_name + '_pdf.log')
          ^ Another getProcessOutput here.  Return the resultant Deferred from within your keepGoing callback...

>         lock = threading.Lock()
>         lock.acquire()
          ^ Hooray, now you can forget about this garbage

>         self.client.sendCommand('presentTranscript', ['/ transcripts/' + 
>str(pres.id) + '/' + base_name + '.pdf'])
>         lock.release()
          ^ Do this in the final callback of the Deferred that you've just created.

I hope this helped.



From itamar at itamarst.org  Tue Oct 25 11:32:16 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 25 Oct 2005 11:32:16 -0400
Subject: [Twisted-Python] question about threading
In-Reply-To: <ED54CBDE-54CF-43A9-82AF-1B157A1F17FE@bubblehouse.org>
References: <ED54CBDE-54CF-43A9-82AF-1B157A1F17FE@bubblehouse.org>
Message-ID: <1130254336.9200.11.camel@localhost.localdomain>

On Tue, 2005-10-25 at 11:05 -0400, Phil Christensen wrote:

>          lock = threading.Lock()
>          lock.acquire()
>          self.client.sendCommand('presentTranscript', ['/ 
> transcripts/' + str(pres.id) + '/' + base_name + '.pdf'])
>          lock.release()

> the client object holds a reference to the protocol object, and  
> sendCommand basically just executes:
> 
>          print "Sending " + message + " to " + str(self.protocol.source)
>          self.protocol.transport.write(message + "\0")

Twisted is *not* thread-safe. You can't call its methods from another
thread like that.

Also, os.system() will probably not work on Unix in Twisted; instead,
you can use Twisted's non-blocking process support to run commands
(reactor.spawnProcess, or in your case
twisted.internet.utils.getProcessOutput()). Then you won't need to use
threads at all.

There is a way of doing what you want with threads (see
http://twistedmatrix.com/projects/core/documentation/howto/threading.html) but you should not be using threads in this case as you don't need to and it's just a source of bugs if you're not careful.





From nico at tekNico.net  Tue Oct 25 11:22:40 2005
From: nico at tekNico.net (Nicola Larosa)
Date: Tue, 25 Oct 2005 17:22:40 +0200
Subject: [Twisted-Python] Re: question about threading
In-Reply-To: <ED54CBDE-54CF-43A9-82AF-1B157A1F17FE@bubblehouse.org>
References: <ED54CBDE-54CF-43A9-82AF-1B157A1F17FE@bubblehouse.org>
Message-ID: <djlik0$hn7$1@sea.gmane.org>

> i need to spawn a thread that executes a couple of binaries (html2ps 
> and ps2pdf) which are generally long-running. after executing those 
> binaries, i need to send a message back to the client that sent the 
> original command to generate the pdf.

You probably don't need threads at all. Look at the "Using processes" HOWTO.

-- 
Nicola Larosa - nico at tekNico.net

I've looked at life from both sides now
>From win and lose, and still somehow
It's life's illusions I recall
I really don't know life at all
 -- Joni Mitchell, Both sides now, Clouds, 1969




From michaelschneider at fuse.net  Tue Oct 25 12:27:18 2005
From: michaelschneider at fuse.net (Michael Schneider)
Date: Tue, 25 Oct 2005 12:27:18 -0400
Subject: [Twisted-Python] Twisted - SQLite and SQLObject
In-Reply-To: <E1EUQMx-0003gk-01@pyramid.twistedmatrix.com>
References: <E1EUQMx-0003gk-01@pyramid.twistedmatrix.com>
Message-ID: <435E5CE6.8020203@fuse.net>

Can I used twisted with embedded databases such as SQLite?

I would like to use SQLObject and SQLite in my twisted application.

Thanks
Mike



From jritter at bektel.com  Tue Oct 25 12:41:50 2005
From: jritter at bektel.com (Josh Ritter)
Date: Tue, 25 Oct 2005 11:41:50 -0500
Subject: [Twisted-Python] Twisted - SQLite and SQLObject
References: <E1EUQMx-0003gk-01@pyramid.twistedmatrix.com>
	<435E5CE6.8020203@fuse.net>
Message-ID: <001801c5d982$ffe63520$0400000a@spooge>

Minions of Mirth, our game, makes extensive use of SQLObject, SQLite, and 
Twisted:

http://www.prairiegames.com/games.html

-Josh Ritter
Prairie Games


----- Original Message ----- 
From: "Michael Schneider" <michaelschneider at fuse.net>
To: <twisted-python at twistedmatrix.com>
Sent: Tuesday, October 25, 2005 11:27 AM
Subject: [Twisted-Python] Twisted - SQLite and SQLObject


> Can I used twisted with embedded databases such as SQLite?
>
> I would like to use SQLObject and SQLite in my twisted application.
>
> Thanks
> Mike
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python 




From kkinder at gmail.com  Tue Oct 25 12:42:47 2005
From: kkinder at gmail.com (Ken Kinder)
Date: Tue, 25 Oct 2005 10:42:47 -0600
Subject: [Twisted-Python] Twisted - SQLite and SQLObject
In-Reply-To: <435E5CE6.8020203@fuse.net>
References: <E1EUQMx-0003gk-01@pyramid.twistedmatrix.com>
	<435E5CE6.8020203@fuse.net>
Message-ID: <2295ce5d0510250942v58765670vda1a50ecce49d6df@mail.gmail.com>

You can't use SQLObject because it's synchronous. (I love sqlobject too,
it's rough). You can use adbapi with sqlite's adapter:

http://twistedmatrix.com/projects/core/documentation/howto/enterprise.html

There's also a "row" object that does some basic abstraction, but it's
nothing like sqlobject.

On 10/25/05, Michael Schneider <michaelschneider at fuse.net> wrote:
>
> Can I used twisted with embedded databases such as SQLite?
>
> I would like to use SQLObject and SQLite in my twisted application.
>
> Thanks
> Mike
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20051025/a173f20c/attachment.htm 

From exarkun at divmod.com  Tue Oct 25 12:59:24 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 25 Oct 2005 12:59:24 -0400
Subject: [Twisted-Python] Thoughts about testing
In-Reply-To: <20051025121943.431.qmail@web33909.mail.mud.yahoo.com>
Message-ID: <20051025165924.10365.1320557480.divmod.quotient.34@ohm>

On Tue, 25 Oct 2005 05:19:43 -0700 (PDT), Antony Kummel <antonykummel at yahoo.com> wrote:
>Hi all,
>
>I just want to share some ideas that I have had.
>
>>From my experience, testing with Trial is too hard. My
>problems can be divided into three categories: 1.
>obscure error reporting, 2. unclean reactor 3. whoop
>whoop whoop.
>
>I am also pretty sure that I'm doing things that Trial
>does not want me to do, such as actually opening
>sockets and communication over the network. I'm saying
>this because it does not seem to happen in the Twisted
>test-suite. But I don't think there is a good reason
>for this limitation.

The network is a source of unpredictability.  Unit tests 
that rely on it fail intermittently, mysteriously, and 
with no clear course of action for reproducing the failure, 
making debugging the problem extremely difficult, and reduces 
the overall utility of the test suite by introduces failures 
that aren't really failures, but which nevertheless must be 
investigated to determine whether they represent a real problem.

So, there's a pretty good reason, I think.  However, trial 
doesn't prevent you from doing this, so I'm not sure what 
the objection is.

>
>Actually, in sum, I think there are too many
>limitations on writing tests with Trial, and they all
>boil down to the unclean reactor problem (or at least
>most of them). I want to suggest an alternative
>approach.

If tests are allowed to leave things like connections and timers 
(in general, event sources) lying around, subsequent tests can 
fail through no fault of their own when one of these event sources 
misbehaves.  If, for example, one causes an exception to be logged, 
trial will notice this and attribute it to some other hapless test, 
causing it to fail.  These problems are even more difficult to
track down than the ones I mentioned above, since it is not even 
clear in these cases _which_ test is /really/ failing.

>
>How about not requiring the reactor to be clean at the
>end of a test? If anyone wants to make sure that
>anything they do leaves the reactor in a clean state,
>they can test for it themselves. This seems to me more
>like a constraint imposed by the implementation of
>Trial rather than a useful feature.

I think it's a good idea.  I don't know that, in its current form, 
it is complete.  There are probably some improvements that could 
be made to ease the process of tracking down the sources of 
various problems it reports.  I don't think that means the entire 
feature should be scrapped.

>Also, parts of
>Twisted itself are practically unusable inside a test
>because they leave the reactor dirty (such as threaded
>address resolution).

This should be addressed, certainly.  However, I don't often 
find myself resolving names using the system resolver in unit 
tests.  What if the system resolver is buggy?  What if the 
system is misconfigured?  What if there is a transient DNS 
failure?  What if the DNS server for the host you are interested 
in is temporarily offline?  These are not conditions I am happy 
to allow to cause my unit tests to fail.

>An alternative feature could be
>enabling the user to specify that a certain delayed
>call or thread is allowed to remain after the test,
>and then Trial won't complain. The only question
>remaining is how to do it. Simple: use a different
>process. Run the tests in a different process, and
>create a new one each time the reactor is dirtied.
>py.execnet is a nice example of this concept.

Running tests in a child process is an interesting idea.  It 
provides a much greater degree of isolation between tests than 
essentially any other approach, which is great.  Isolation is 
great for unit tests.  Unfortunately, it comes with a lot of 
overhead.  While there are techniques for optimizing the 
implementation of such a feature, running each test method in a
different process would probably add at least 4 minutes to 
Twisted's test suite.  This is basically unacceptable (Twisted's 
suite takes way too long to run already).

Beyond performance problems, there's also the issue of debugging.
As in, how do you?  I'm aware of remote debuggers for Python, but
they're all third-party.  This is not necessarily a killer
drawback, but it is definitely a downside.

>The second thought is this: there seem to be popping
>up different testing toolkits each with their own very
>nice extensions and features
>(http://testoob.sourceforge.net/,
>http://codespeak.net/py/current/doc/test.html). Trial
>cannot benefit from this, having branched away at the
>pyUnit level. I think Trial's special features can be
>relatively easily formulated as plugins to a
>plugin-oriented testing framework (especially if the
>clean reactor requirement is relieved), and so can the
>other testing packages. What this means, is that the
>best thing anyone who wants the world of unit testing
>to develop, and to benefit from it, is to push for a
>plugin-oriented pyUnit, and for an implementation of
>Trial (and the other tools) as a plugin for that
>framework. I think.

Rather than hearing about the plethora of new testing libraries 
appearing, I'd like to hear about features they provide that are
valuable for writing tests.  I would certainly like to borrow 
py.test's magical assert.  What other features are test authors 
finding useful in some of these projects?

Jp



From exarkun at divmod.com  Tue Oct 25 13:01:17 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 25 Oct 2005 13:01:17 -0400
Subject: [Twisted-Python] Twisted - SQLite and SQLObject
In-Reply-To: <435E5CE6.8020203@fuse.net>
Message-ID: <20051025170117.10365.1142108736.divmod.quotient.36@ohm>

On Tue, 25 Oct 2005 12:27:18 -0400, Michael Schneider <michaelschneider at fuse.net> wrote:
>Can I used twisted with embedded databases such as SQLite?
>
>I would like to use SQLObject and SQLite in my twisted application.

Divmod has had much success with SQLite in Twisted applications.  In particular, see http://divmod.org/projects/axiom

>
>Thanks
>Mike
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From jim.mccoy at gmail.com  Tue Oct 25 13:29:49 2005
From: jim.mccoy at gmail.com (Jim McCoy)
Date: Tue, 25 Oct 2005 10:29:49 -0700
Subject: [Twisted-Python] Twisted - SQLite and SQLObject
In-Reply-To: <20051025170117.10365.1142108736.divmod.quotient.36@ohm>
References: <435E5CE6.8020203@fuse.net>
	<20051025170117.10365.1142108736.divmod.quotient.36@ohm>
Message-ID: <f01e36880510251029i1dfa60aax877cc36d0cf26277@mail.gmail.com>

If you are going to use sqlite/sqlobject as an embedded db (as the
original poster suggested) then you are probably better off just
writing your own deferred wrapper for your sql ops.  Treat your db
access (at least your select/set/update ops on your SQLObject schema
classes) as you would any other blocking operation; if your db is not
huge you can probably be more productive by applying twisted to other
parts of your application.

Since you are using sqlite as an embedded db you are not going to get
any benefit from the connection marshalling and threading that seems
to be t.enterprise.adbapi's raison d'etre.  Rather than digging into
the adbapi docs or looking at axiom you would probably be better
served by just building a wrapper around your db that returns
deferred's for the various db CRUD operations.

Jim



From kkinder at gmail.com  Tue Oct 25 13:47:26 2005
From: kkinder at gmail.com (Ken Kinder)
Date: Tue, 25 Oct 2005 11:47:26 -0600
Subject: [Twisted-Python] Twisted - SQLite and SQLObject
In-Reply-To: <f01e36880510251029i1dfa60aax877cc36d0cf26277@mail.gmail.com>
References: <435E5CE6.8020203@fuse.net>
	<20051025170117.10365.1142108736.divmod.quotient.36@ohm>
	<f01e36880510251029i1dfa60aax877cc36d0cf26277@mail.gmail.com>
Message-ID: <2295ce5d0510251047v9a4aab6p71644e985bd41554@mail.gmail.com>

On 10/25/05, Jim McCoy <jim.mccoy at gmail.com> wrote:
>
> If you are going to use sqlite/sqlobject as an embedded db (as the
> original poster suggested) then you are probably better off just
> writing your own deferred wrapper for your sql ops. Treat your db
> access (at least your select/set/update ops on your SQLObject schema
> classes) as you would any other blocking operation; if your db is not
> huge you can probably be more productive by applying twisted to other
> parts of your application.
>
> Since you are using sqlite as an embedded db you are not going to get
> any benefit from the connection marshalling and threading that seems
> to be t.enterprise.adbapi's raison d'etre. Rather than digging into
> the adbapi docs or looking at axiom you would probably be better
> served by just building a wrapper around your db that returns
> deferred's for the various db CRUD operations.
>
> Jim


I've been using an in-memory sqlite database with trivial amounts of data
and actually have been treating it as non-blocking. You wouldn't defer
moving around python data structures, and in my experience, for a small
in-memory sqlite database, you get better performance using it synchronously
inline.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20051025/ab92e8c6/attachment.htm 

From antonykummel at yahoo.com  Tue Oct 25 16:09:31 2005
From: antonykummel at yahoo.com (Antony Kummel)
Date: Tue, 25 Oct 2005 13:09:31 -0700 (PDT)
Subject: [Twisted-Python] Thoughts about testing
In-Reply-To: <20051025165924.10365.1320557480.divmod.quotient.34@ohm>
Message-ID: <20051025200931.56727.qmail@web33902.mail.mud.yahoo.com>

Hi Jp,

--- Jean-Paul Calderone <exarkun at divmod.com> wrote:

> >An alternative feature could be
> >enabling the user to specify that a certain delayed
> >call or thread is allowed to remain after the test,
> >and then Trial won't complain. The only question
> >remaining is how to do it. Simple: use a different
> >process. Run the tests in a different process, and
> >create a new one each time the reactor is dirtied.
> >py.execnet is a nice example of this concept.
> 
> Running tests in a child process is an interesting
> idea.  It 
> provides a much greater degree of isolation between
> tests than 
> essentially any other approach, which is great. 
> Isolation is 
> great for unit tests.  Unfortunately, it comes with
> a lot of 
> overhead.  While there are techniques for optimizing
> the 
> implementation of such a feature, running each test
> method in a
> different process would probably add at least 4
> minutes to 
> Twisted's test suite.  This is basically
> unacceptable (Twisted's 
> suite takes way too long to run already).

Well, it will certainly be non-optimal, but let me add
some more points in its favour:
1. It may still be faster than debugging unit tests
that fail because of a dirty reactor or other problems
that it resolves.
2. You don't have to run each test method in a
different process, only the ones who leave the
environment dirty. Of course people are likely to be
lazy if they get the chance, but it makes more sense
to leave it up to them. And of course it could be
optimized (is a pool of process what you had in mind?)
3. This feature brings us very close to completely
distributed unit testing. This will make it possible
to easily run tests simultaneously on different
computers which would actually make it faster than the
current method with very little effort (given enough
computers).
4. A mechanism allowing for running unit tests at
random locations (processes or machines) will probably
be good for making the tests themselves span more than
one computer. Despite your justified objections I
think this could be quite a powerful tool.
5. The same mechanism can be useful for another
problem I often run into: dirtying of the interactive
prompt environment. When using a relatively rich tool
such as PyCrust, for example, I have to close it and
start it again every time I make a grave enough
mistake (for example when I need to reload nested
modules). If the code I write at the prompt was to run
in a different process, I could simply click a button
to restart that process without it having an annoying
impact.

> >The second thought is this: there seem to be
> popping
> >up different testing toolkits each with their own
> very
> >nice extensions and features
> >(http://testoob.sourceforge.net/,
> >http://codespeak.net/py/current/doc/test.html).
> Trial
> >cannot benefit from this, having branched away at
> the
> >pyUnit level. I think Trial's special features can
> be
> >relatively easily formulated as plugins to a
> >plugin-oriented testing framework (especially if
> the
> >clean reactor requirement is relieved), and so can
> the
> >other testing packages. What this means, is that
> the
> >best thing anyone who wants the world of unit
> testing
> >to develop, and to benefit from it, is to push for
> a
> >plugin-oriented pyUnit, and for an implementation
> of
> >Trial (and the other tools) as a plugin for that
> >framework. I think.
> 
> Rather than hearing about the plethora of new
> testing libraries 
> appearing, I'd like to hear about features they
> provide that are
> valuable for writing tests.  I would certainly like
> to borrow 
> py.test's magical assert.  What other features are
> test authors 
> finding useful in some of these projects?

First of all, TestOOB already allows you to run test
in a different process (although I didn't go down to
the details -- this may be a little different than
what I talked about). If the plugin-oriented framework
I proposed existed, the feature we discussed above
would have already been available to us.

Secondly, it is not hard to think about ways to make
unit testing easier. Take a graphical UI for example.
In the current situation, any such improvement will be
useful for only a small group of users, and that group
is likely to grow ever smaller with the emergeance of
new frameworks. And when doing unit tests, we all
desparately want the same thing -- to make it easier.
With a common base, properly designed, we can all
benefit from everyone else's efforts, and I think this
is good enough a reason.

I join you in wanting to hear what test authors are
finding useful in these projects.

Antony Kummel



		
__________________________________ 
Start your day with Yahoo! - Make it your home page! 
http://www.yahoo.com/r/hs



From radeex at gmail.com  Tue Oct 25 17:00:00 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Wed, 26 Oct 2005 08:00:00 +1100
Subject: [Twisted-Python] Thoughts about testing
In-Reply-To: <20051025121943.431.qmail@web33909.mail.mud.yahoo.com>
References: <20051025121943.431.qmail@web33909.mail.mud.yahoo.com>
Message-ID: <60ed19d40510251400s3db36896wc5c42d6c196b7cd0@mail.gmail.com>

On 10/25/05, Antony Kummel <antonykummel at yahoo.com> wrote:
> Hi all,
>
> I just want to share some ideas that I have had.
>
> >From my experience, testing with Trial is too hard. My
> problems can be divided into three categories: 1.
> obscure error reporting, 2. unclean reactor 3. whoop
> whoop whoop.

For #1 and #3, it sounds like you're using trial from Twisted 1.3 (or
perhaps even 2.0). I implore you to get 2.1.0, which has been
massively improved in these areas (I'm pretty sure "whoop whoop"
doesn't exist at all any more).

As for #2, I'll let Jp and the others handle that.

--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+



From jml at mumak.net  Tue Oct 25 17:26:54 2005
From: jml at mumak.net (Jonathan Lange)
Date: Wed, 26 Oct 2005 08:26:54 +1100
Subject: [Twisted-Python] Thoughts about testing
In-Reply-To: <20051025121943.431.qmail@web33909.mail.mud.yahoo.com>
References: <20051025121943.431.qmail@web33909.mail.mud.yahoo.com>
Message-ID: <d06a5cd30510251426i114bc156s@mail.gmail.com>

On 25/10/05, Antony Kummel <antonykummel at yahoo.com> wrote:
> The second thought is this: there seem to be popping
> up different testing toolkits each with their own very
> nice extensions and features
> (http://testoob.sourceforge.net/,
> http://codespeak.net/py/current/doc/test.html). Trial
> cannot benefit from this, having branched away at the
> pyUnit level. I think Trial's special features can be
> relatively easily formulated as plugins to a
> plugin-oriented testing framework (especially if the
> clean reactor requirement is relieved), and so can the
> other testing packages. What this means, is that the
> best thing anyone who wants the world of unit testing
> to develop, and to benefit from it, is to push for a
> plugin-oriented pyUnit, and for an implementation of
> Trial (and the other tools) as a plugin for that
> framework. I think.
>

Thanks for your feedback Antony.

As Chris pointed out, Trial has greatly improved between 2.0 and 2.1. 
Trial 2.1 has half the number of lines of code as Trial 2.0, for
example. The "whoop whoop" error *is* gone, as is the class that
contained it.

But one of the biggest changes is that Trial is now (almost) entirely
built as an extension to unittest. This is the way things should be. 
unittest is a great framework with a great design [1], and doesn't (I
think) need to be pushed towards any large scale plugin changes.

I'm definitely keen to think and discuss more about how Trial behaves
wrt the reactor. And I will leap *like a ninja* upon any reproducible
bugs you can file [2] with respect to obscure error reporting.

cheers,
jml -- trial maintainer

[1] http://dirtsimple.org/2005/08/ruby-gems-python-eggs-and-beauty-of.html
[2] http://www.twistedmatrix.com/bugs/  -- assign to 'jml' with topic 'trial'



From jml at mumak.net  Tue Oct 25 19:44:14 2005
From: jml at mumak.net (Jonathan Lange)
Date: Wed, 26 Oct 2005 10:44:14 +1100
Subject: separate trial release (was Re: [Twisted-Python] Twisted Jabber
In-Reply-To: <435E0BE4.2020807@twistedmatrix.com>
References: <20051025070401.27584.41267374.divmod.quotient.3645@ohm>
	<435DE2A5.3010603@softax.com.pl> <435E0BE4.2020807@twistedmatrix.com>
Message-ID: <d06a5cd30510251644g6fff01e3h@mail.gmail.com>

On 25/10/05, Tommi Virtanen <tv at twistedmatrix.com> wrote:
> Marcin Kasperski wrote:
> >> However, a point in JP's favor: there are source files distributed
> >> with core (twisted/test/*) that *import* code from Trial.  Test cases
> >> seem to be, in every sense, a bit of a gnarly special case.
> > testcases are not necessary for production installation, just as
> > technical docs are. In fact testcases, trial, docs etc are
> > developer-environment tools, not production-environment tools.
>
> I consider running unit tests an essential part of the build process.
> Thus, in my eyes twisted-core has a build-time dependency on trial, even
> if it doesn't have a runtime dependency.
>

Do you think a build-time dependency is enough to keep Trial within core?

jml



From radeex at gmail.com  Tue Oct 25 21:01:53 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Wed, 26 Oct 2005 12:01:53 +1100
Subject: [Twisted-Python] svn-reorg blocking
Message-ID: <60ed19d40510251801y4df68478la7e8f48082efede1@mail.gmail.com>

I really want to get svn-reorg finished up, because lots of people
really want me to release Twisted sumo, and releasing sumo without
svn-reorg is going to be very scary. Unfortunately, there's something
blocking svn-reorg's merge: We haven't figured out a way to get the
test suite to actually run with it.

Trial, in trunk, looks for packages by traversing the filesystem. This
doesn't work with packages made up of __path__s, which is how
svn-reorg works. svn-reorg includes some changes to trial that
replaces filesystem traversal with package importing, and special
support for __path__. However, this doesn't work when a package is
unimportable.

Twisted has (at least) two packages which for various reasons are
unimportable depending on your environment:
twisted.internet.iocpreactor and twisted.internet.serialport. Both of
them are unimportable because their __init__.py files have code in
them, which is against the coding standard. I think glyph mentioned
elsewhere in this thread that the coding standard allows it for
current public interfaces, but it actually only allows it for the
purposes of backwards compatibility while refactoring a module into a
package.

for iocpreactor, this is easy enough to fix: all it does in
__init__.py is "from proactor import install", which is easily
replaced with

def install(*a, **kw):
    from proactor import install
    return install(*a, **kw)

However, serialport is much more devious: 'from serialport import *'.
This then causes an error on any system that doesn't have the
third-party "serial" module installed (which is imported by
serialport.py). The best suggestion I've heard for fixing this one is
to make serialport a single module (again) that defines all the
classes conditionally, but I do think that at least as far as code
organisation is concerned, the current way the files are laid out is
nice.

Can we try to come to a conclusion about this stuff soon?


--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+



From glyph at divmod.com  Tue Oct 25 21:23:53 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 25 Oct 2005 21:23:53 -0400
Subject: separate trial release (was Re: [Twisted-Python] Twisted Jabber
In-Reply-To: <d06a5cd30510251644g6fff01e3h@mail.gmail.com>
Message-ID: <20051026012353.10365.1697176747.divmod.quotient.166@ohm>

On Wed, 26 Oct 2005 10:44:14 +1100, Jonathan Lange <jml at mumak.net> wrote:

>Do you think a build-time dependency is enough to keep Trial within core?

It's not just build-time.

Once you've installed Twisted in a particular environment, trial helps you determine if it's *installed* properly.  If chunks have fallen off of your tarball at some point, trial will alert you to this by failing a bunch of tests.  It's that dependency which keeps me leaning towards "yes".

That said, I'm still undecided - trial is definitely making a lot of progress lately and the rationale of the split was to keep projects like this unconstrained by core's need for stability.



From glyph at divmod.com  Tue Oct 25 21:29:57 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 25 Oct 2005 21:29:57 -0400
Subject: [Twisted-Python] svn-reorg blocking
In-Reply-To: <60ed19d40510251801y4df68478la7e8f48082efede1@mail.gmail.com>
Message-ID: <20051026012957.10365.613098804.divmod.quotient.168@ohm>



On Wed, 26 Oct 2005 12:01:53 +1100, Christopher Armstrong <radeex at gmail.com> wrote:

>However, serialport is much more devious: 'from serialport import *'.
>This then causes an error on any system that doesn't have the
>third-party "serial" module installed (which is imported by
>serialport.py). The best suggestion I've heard for fixing this one is
>to make serialport a single module (again) that defines all the
>classes conditionally, but I do think that at least as far as code
>organisation is concerned, the current way the files are laid out is
>nice.

Here's a suggestion.

Move all files in serialport/ up one level.  Put _'s in front of all the 'implementation' module names.  Replace the 'serialport' package with the existing 'serialport' module, which has pretty much *exactly* the same code in it; the external interface and import names don't change, and the only negative impact is 5 more files in internet/ (considering the size of directories in, say, Apache or Linux, I don't think that this is anything to cry over).

>Can we try to come to a conclusion about this stuff soon?

Shall I make the previous suggestion a "conclusion"? ;-)



From andrew-twisted at puzzling.org  Tue Oct 25 22:10:53 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 26 Oct 2005 12:10:53 +1000
Subject: [Twisted-Python] Thoughts about testing
In-Reply-To: <20051025165924.10365.1320557480.divmod.quotient.34@ohm>
References: <20051025121943.431.qmail@web33909.mail.mud.yahoo.com>
	<20051025165924.10365.1320557480.divmod.quotient.34@ohm>
Message-ID: <20051026021053.GE4773@trogdor.home.puzzling.org>

On Tue, Oct 25, 2005 at 12:59:24PM -0400, Jean-Paul Calderone wrote:
> On Tue, 25 Oct 2005 05:19:43 -0700 (PDT), Antony Kummel 
[...]
> 
> Running tests in a child process is an interesting idea.  It 
> provides a much greater degree of isolation between tests than 
> essentially any other approach, which is great.  Isolation is 
> great for unit tests.  Unfortunately, it comes with a lot of 
> overhead.  While there are techniques for optimizing the 
> implementation of such a feature, running each test method in a
> different process would probably add at least 4 minutes to 
> Twisted's test suite.  This is basically unacceptable (Twisted's 
> suite takes way too long to run already).

Robert Collins' subunit and testresources libraries for pyunit go a long way
to solving this, I believe: http://www.robertcollins.net/unittest/

> >The second thought is this: there seem to be popping
> >up different testing toolkits each with their own very
> >nice extensions and features
> >(http://testoob.sourceforge.net/,
> >http://codespeak.net/py/current/doc/test.html). Trial
> >cannot benefit from this, having branched away at the
> >pyUnit level. I think Trial's special features can be
> >relatively easily formulated as plugins to a
> >plugin-oriented testing framework (especially if the
> >clean reactor requirement is relieved), and so can the
> >other testing packages. What this means, is that the
> >best thing anyone who wants the world of unit testing
> >to develop, and to benefit from it, is to push for a
> >plugin-oriented pyUnit, and for an implementation of
> >Trial (and the other tools) as a plugin for that
> >framework. I think.

Trial is moving very rapidly towards pyunit compatibility once again, thanks
to Jonathan Lange's efforts.  It should be possible to run trial test suites
from an ordinary unittest.py runner in the near future, if it's not already
possible with SVN Trial.  I'm not sure what you mean by "push for a
plugin-oriented pyUnit" -- it already is extensible.

I was under the impression that py.test wasn't at all pyunit compatible,
though?  The docs I've seen tell me that they explicitly aren't interested
in being able to interoperate with unittest or unittest extensions.

> Rather than hearing about the plethora of new testing libraries 
> appearing, I'd like to hear about features they provide that are
> valuable for writing tests.  I would certainly like to borrow 
> py.test's magical assert.  What other features are test authors 
> finding useful in some of these projects?

FWIW, I don't like py.test's magical assert ;)

-Andrew.




From foom at fuhm.net  Tue Oct 25 22:25:08 2005
From: foom at fuhm.net (James Y Knight)
Date: Tue, 25 Oct 2005 22:25:08 -0400
Subject: [Twisted-Python] svn-reorg blocking
In-Reply-To: <60ed19d40510251801y4df68478la7e8f48082efede1@mail.gmail.com>
References: <60ed19d40510251801y4df68478la7e8f48082efede1@mail.gmail.com>
Message-ID: <87FEE636-AEEA-4ABC-8CE6-0FF68308839A@fuhm.net>

On Oct 25, 2005, at 9:01 PM, Christopher Armstrong wrote:
> I really want to get svn-reorg finished up, because lots of people
> really want me to release Twisted sumo, and releasing sumo without
> svn-reorg is going to be very scary. Unfortunately, there's something
> blocking svn-reorg's merge: We haven't figured out a way to get the
> test suite to actually run with it.
>

I did, and even implemented it. IMO it's the only sensible thing that  
can be done for this situation. I speak, of course, of using an  
attribute on the package to let trial know which subpackages do not  
contain any tests. It is simple, it works. What more do you want?  
Even if we do some horrible hack to serialport/iocpreactor such that  
that such an attribute is not required for twisted, it'll likely be  
required for someone else's code.

Things that aren't better ways:
- moving around serialport code for the benefit of trial and to the  
detriment of itself.
- making the serialport module be not a module and instead be some  
lazy import thingamajig.

I do not see that having a package that cannot be imported is in any  
way worse than having a module which cannot be imported, except for  
this issue with trial. Thus, a way to specifically tell trial not to  
care is really all that's necessary. I urge you to not block the svn- 
reorg on finding a mystical better way. Instead, block upon having  
test cases for the trial changes that I have already made.

James



From radeex at gmail.com  Tue Oct 25 22:36:35 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Wed, 26 Oct 2005 13:36:35 +1100
Subject: [Twisted-Python] svn-reorg blocking
In-Reply-To: <20051026012957.10365.613098804.divmod.quotient.168@ohm>
References: <60ed19d40510251801y4df68478la7e8f48082efede1@mail.gmail.com>
	<20051026012957.10365.613098804.divmod.quotient.168@ohm>
Message-ID: <60ed19d40510251936o11eb088bo90098fcdad1c8d64@mail.gmail.com>

On 10/26/05, glyph at divmod.com <glyph at divmod.com> wrote:
> On Wed, 26 Oct 2005 12:01:53 +1100, Christopher Armstrong <radeex at gmail.com> wrote:
> >Can we try to come to a conclusion about this stuff soon?
>
> Shall I make the previous suggestion a "conclusion"? ;-)

I refer you to James' post. I'm fairly happy with your solution
(although I still think that structurally it is less pleasant that
having the implementation modules be in a package), but I'll let you
and James debate it.

On 10/26/05, James Y Knight wrote <foom at fuhm.net> wrote:
> I did, and even implemented it. IMO it's the only sensible thing that
> can be done for this situation. I speak, of course, of using an
> attribute on the package to let trial know which subpackages do not
> contain any tests. It is simple, it works. What more do you want?
> Even if we do some horrible hack to serialport/iocpreactor such that
> that such an attribute is not required for twisted, it'll likely be
> required for someone else's code.

The way I see it is that you put a horrible hack in trial to work
around a problem that wouldn't happen if the code actually followed
Twisted's coding convention.

--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+



From glyph at divmod.com  Tue Oct 25 23:10:15 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 25 Oct 2005 23:10:15 -0400
Subject: [Twisted-Python] svn-reorg blocking
In-Reply-To: <60ed19d40510251936o11eb088bo90098fcdad1c8d64@mail.gmail.com>
Message-ID: <20051026031015.10365.1602465155.divmod.quotient.204@ohm>

On Wed, 26 Oct 2005 13:36:35 +1100, Christopher Armstrong <radeex at gmail.com> wrote:

>I refer you to James' post. I'm fairly happy with your solution
>(although I still think that structurally it is less pleasant that
>having the implementation modules be in a package), but I'll let you
>and James debate it.

I don't like 'serialport' being a package, but that is a totally separate issue.  If James' changes actually fix the problem, let's just go with that and be done with it; if we make serialport not be a package later, then the need for the extra attribute will go away.

>On 10/26/05, James Y Knight wrote <foom at fuhm.net> wrote:

>The way I see it is that you put a horrible hack in trial to work
>around a problem that wouldn't happen if the code actually followed
>Twisted's coding convention.

In James' defense, Twisted's coding standard actually says what serialport is doing is OK.  The portion of the standard that says this is my work, and I think the coding standard should be changed, because this is an awful hack, but one thing that can't be said about it is that it isn't officially endorsed :).

I tend to agree with your general sentiment but I don't think that this issue is important enough to hold up the re-org.  James has implemented a solution.  Let's just use it.



From jml at mumak.net  Wed Oct 26 00:10:04 2005
From: jml at mumak.net (Jonathan Lange)
Date: Wed, 26 Oct 2005 15:10:04 +1100
Subject: [Twisted-Python] svn-reorg blocking
In-Reply-To: <20051026031015.10365.1602465155.divmod.quotient.204@ohm>
References: <60ed19d40510251936o11eb088bo90098fcdad1c8d64@mail.gmail.com>
	<20051026031015.10365.1602465155.divmod.quotient.204@ohm>
Message-ID: <d06a5cd30510252110m55b8b964h@mail.gmail.com>

On 26/10/05, glyph at divmod.com <glyph at divmod.com> wrote:
> >On 10/26/05, James Y Knight wrote <foom at fuhm.net> wrote:
>
> >The way I see it is that you put a horrible hack in trial to work
> >around a problem that wouldn't happen if the code actually followed
> >Twisted's coding convention.
>
> In James' defense, Twisted's coding standard actually says what serialport is doing is OK.  The portion of the standard that says this is my work, and I think the coding standard should be changed, because this is an awful hack, but one thing that can't be said about it is that it isn't officially endorsed :).
>
> I tend to agree with your general sentiment but I don't think that this issue is important enough to hold up the re-org.  James has implemented a solution.  Let's just use it.

I strongly and vigorously oppose merging this branch until there are
unit tests for James' modifications to Trial.  Instead I recommend
moving serialport up a level (as you suggested earlier).  That appears
to be the simplest thing that could possibly work.

cheers,
jml



From glyph at divmod.com  Wed Oct 26 01:03:40 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Wed, 26 Oct 2005 01:03:40 -0400
Subject: [Twisted-Python] svn-reorg blocking
In-Reply-To: <d06a5cd30510252110m55b8b964h@mail.gmail.com>
Message-ID: <20051026050340.10365.1722990414.divmod.quotient.261@ohm>



On Wed, 26 Oct 2005 15:10:04 +1100, Jonathan Lange <jml at mumak.net> wrote:
>I strongly and vigorously oppose merging this branch until there are
>unit tests for James' modifications to Trial.  Instead I recommend
>moving serialport up a level (as you suggested earlier).  That appears
>to be the simplest thing that could possibly work.

Far be it for me to argue with the Maintainer Of The Tests.

It's official, fiat - I just moved serialport up a level in trunk, I will move it in whatever other branches are required.

Any other blocking issues?



From radeex at gmail.com  Wed Oct 26 01:32:19 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Wed, 26 Oct 2005 16:32:19 +1100
Subject: [Twisted-Python] svn-reorg blocking
In-Reply-To: <20051026050340.10365.1722990414.divmod.quotient.261@ohm>
References: <d06a5cd30510252110m55b8b964h@mail.gmail.com>
	<20051026050340.10365.1722990414.divmod.quotient.261@ohm>
Message-ID: <60ed19d40510252232v74c96911k4becb952e1053e51@mail.gmail.com>

On 10/26/05, glyph at divmod.com <glyph at divmod.com> wrote:
>
>
> On Wed, 26 Oct 2005 15:10:04 +1100, Jonathan Lange <jml at mumak.net> wrote:
> >I strongly and vigorously oppose merging this branch until there are
> >unit tests for James' modifications to Trial.  Instead I recommend
> >moving serialport up a level (as you suggested earlier).  That appears
> >to be the simplest thing that could possibly work.
>
> Far be it for me to argue with the Maintainer Of The Tests.
>
> It's official, fiat - I just moved serialport up a level in trunk, I will move it in whatever other branches are required.
>
> Any other blocking issues?

Nope -- I'll try to get some tests into svn-reorg soon for trial's
__path__ support, then we can figure out how the hell we're going to
merge that beast.

--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+



From foom at fuhm.net  Wed Oct 26 02:00:15 2005
From: foom at fuhm.net (James Y Knight)
Date: Wed, 26 Oct 2005 00:00:15 -0600
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <E1EUeKd-0005Ef-00@pyramid.twistedmatrix.com>

Bug summary
______________________
Since 2005-10-19 06:00:02.200000:
 Bugs opened: 7   Bugs closed: 3   Total open bugs: 482 (+4)
  Urgent: 3 (+0)
  Bug: 235 (+2)
  Feature: 166 (+2)
  Wish: 78 (+0)

New / Reopened Bugs
______________________
                    ==== Urgent ====
[DOCUMENTATION, TRIAL] Trial documentation (testing.xhtml) is wildly inaccurate  (2 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1281 opened by jml

                    ==== Bug ====
[BACKPORT, WORDS] UnboundLocalError in twisted.words.tap  (yesterday)
       http://twistedmatrix.com/bugs/issue1283 opened by mike

[TRIAL] twisted.trial.test.test_util.TestFindObject.test_importModule fails intermittently  (yesterday)
       http://twistedmatrix.com/bugs/issue1285 opened by jml

[BACKPORT, CONCH, DOCUMENTATION] conch examples index is all messed up  (yesterday)
CLOSED http://twistedmatrix.com/bugs/issue1284 opened by exarkun

iocpreactor/udp.py disconnects udp sockets on writeErr  (6 days ago)
       http://twistedmatrix.com/bugs/issue1279 opened by ghazel

                    ==== Feature ====
[DOCUMENTATION] Draft "deeper concepts" document for interfaces  (2 days ago)
       http://twistedmatrix.com/bugs/issue1282 opened by jml

Win32Gtk2Reactor  (2 days ago)
       http://twistedmatrix.com/bugs/issue1280 opened by dialtone

Bugs Closed
______________________
                    ==== Urgent ====
[DOCUMENTATION, TRIAL] Trial documentation (testing.xhtml) is wildly inaccurate  (2 days ago)
       http://twistedmatrix.com/bugs/issue1281 opened by jml, closed by jml

                    ==== Bug ====
[BACKPORT, CONCH, DOCUMENTATION] conch examples index is all messed up  (yesterday)
       http://twistedmatrix.com/bugs/issue1284 opened by exarkun, closed by exarkun

win32eventreactor goes crazy at 64 connections  (2 weeks ago)
       http://twistedmatrix.com/bugs/issue1260 opened by ghazel, closed by justinj




From johannes.beigel at brainbot.com  Wed Oct 26 04:27:51 2005
From: johannes.beigel at brainbot.com (Johannes Beigel)
Date: Wed, 26 Oct 2005 10:27:51 +0200
Subject: [Twisted-Python] IMAP4Client closes connection cleanly during
	search()
Message-ID: <435F3E07.3030705@brainbot.com>

Hello.

I'm using twisted.mail.imap4.IMAP4Client and sometimes the connection 
gets closed cleanly "in the middle" of a command. This occurs (in a 
reproducible way) when I do imapClient.search(imap4.Query(all=True)) on 
a really big mailbox folder. The big problem is: Neither callback nor 
errback added to the Deferred from search() is called!

I override factory.connectionLost() to get notified about the connection 
loss, but I'm not really sure what to do when I lose the connection 
(would be a lot of code to get to the same state the IMAP client has 
been in, when some command fails). If the errback connected to search() 
would be called the handling would be much easier, although I think this 
would just result in a new connection loss when trying again.

Any ideas about what happens? e-mail clients like Thunderbird have to 
problems listing the contents of this folder.

It's an courier-imap server, plain (non-TLS) connection.

Any help appreciated!

TIA
-jojo




From johannes.beigel at brainbot.com  Wed Oct 26 05:06:07 2005
From: johannes.beigel at brainbot.com (Johannes Beigel)
Date: Wed, 26 Oct 2005 11:06:07 +0200
Subject: [Twisted-Python] IMAP4Client closes connection cleanly during
	search()
In-Reply-To: <435F3E07.3030705@brainbot.com>
References: <435F3E07.3030705@brainbot.com>
Message-ID: <435F46FF.7030907@brainbot.com>

In reply to myself I want to mention some oddity I just figured out 
during debugging: The _lastCmd attribute of the IMAP4Client instance 
always contains the CAPABILITY command (I print it after every issued 
and completed IMAP command). This happens even if I run the test with a 
smaller mailbox folder, where everything works.

-jojo




From dripton at ripton.net  Wed Oct 26 07:56:49 2005
From: dripton at ripton.net (David Ripton)
Date: Wed, 26 Oct 2005 04:56:49 -0700
Subject: [Twisted-Python] Thoughts about testing
In-Reply-To: <20051025165924.10365.1320557480.divmod.quotient.34@ohm>
References: <20051025121943.431.qmail@web33909.mail.mud.yahoo.com>
	<20051025165924.10365.1320557480.divmod.quotient.34@ohm>
Message-ID: <20051026115649.GA24342@vidar.dreamhost.com>

On 2005.10.25 12:59:24 -0400, Jean-Paul Calderone wrote:
> Rather than hearing about the plethora of new testing libraries 
> appearing, I'd like to hear about features they provide that are
> valuable for writing tests.  I would certainly like to borrow 
> py.test's magical assert.  What other features are test authors 
> finding useful in some of these projects?

Things I particularly like about py.test, vs. unittest:

1. assert, not self.failUnlessAllThisUglyCamelCaseActuallyKillsMe()
2. You can use module-level test functions.  No need to make a test
class unless it's actually helpful.  (Yay Java.)
3. Tests execute in predictable order.
4. setup_module / setup_class / setup_method.  Handy for reusing
database connections.
5. A separate test runner binary, so you don't need __main__ boilerplate
in every test module, and you can put tests in the same module as a 
script (if you don't care about them being found automatically).
6. You can fill your tests with print statements, and only see their
output if the test fails (or you pass the -s option).

-- 
David Ripton    dripton at ripton.net



From foom at fuhm.net  Wed Oct 26 10:04:44 2005
From: foom at fuhm.net (James Y Knight)
Date: Wed, 26 Oct 2005 10:04:44 -0400
Subject: [Twisted-Python] svn-reorg blocking
In-Reply-To: <d06a5cd30510252110m55b8b964h@mail.gmail.com>
References: <60ed19d40510251936o11eb088bo90098fcdad1c8d64@mail.gmail.com>
	<20051026031015.10365.1602465155.divmod.quotient.204@ohm>
	<d06a5cd30510252110m55b8b964h@mail.gmail.com>
Message-ID: <90C9697E-5B99-4C8F-8098-4A8C292BCA93@fuhm.net>

On Oct 26, 2005, at 12:10 AM, Jonathan Lange wrote:
> I strongly and vigorously oppose merging this branch until there are
> unit tests for James' modifications to Trial.

Nobody has suggested that such a thing should be done; there is no  
need for strong and vigorous opposition to a position nobody has  
advocated.

> Instead I recommend
> moving serialport up a level (as you suggested earlier).  That appears
> to be the simplest thing that could possibly work.

This statement makes no sense in this context. Fiddling with  
serialport does not remove the need to make changes to trial that  
require new unit tests. As I said before, I don't even think it  
removes the need for the attribute to mark ignorable subpackages  
either, but, I'm not going to argue that point further.

James




From tv at twistedmatrix.com  Wed Oct 26 11:58:09 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Wed, 26 Oct 2005 18:58:09 +0300
Subject: separate trial release (was Re: [Twisted-Python] Twisted Jabber
In-Reply-To: <d06a5cd30510251644g6fff01e3h@mail.gmail.com>
References: <20051025070401.27584.41267374.divmod.quotient.3645@ohm>	<435DE2A5.3010603@softax.com.pl>
	<435E0BE4.2020807@twistedmatrix.com>
	<d06a5cd30510251644g6fff01e3h@mail.gmail.com>
Message-ID: <435FA791.3060908@twistedmatrix.com>

Jonathan Lange wrote:
> Do you think a build-time dependency is enough to keep Trial within core?

I think build-time dependencies that do not form a strict DAG to be a
pain in ones anatomy. If trial is separated from core, the only
reasonable path forward is not running core unit tests during build.

Alternatively, wouldn't it be great if stdlib unittest, py.test and
trial could _all_ run twisted core unit tests properly?-)



From glyph at divmod.com  Wed Oct 26 13:05:33 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Wed, 26 Oct 2005 13:05:33 -0400
Subject: separate trial release (was Re: [Twisted-Python] Twisted Jabber
In-Reply-To: <435FA791.3060908@twistedmatrix.com>
References: <20051025070401.27584.41267374.divmod.quotient.3645@ohm>
	<435DE2A5.3010603@softax.com.pl> <435E0BE4.2020807@twistedmatrix.com>
	<d06a5cd30510251644g6fff01e3h@mail.gmail.com>
	<435FA791.3060908@twistedmatrix.com>
Message-ID: <1130346333.31676.16.camel@localhost.localdomain>

On Wed, 2005-10-26 at 18:58 +0300, Tommi Virtanen wrote:

> Alternatively, wouldn't it be great if stdlib unittest, py.test and
> trial could _all_ run twisted core unit tests properly?-)

If py.test and stdlib unittest could run the tests without Trial
*present*, that would mean we'd have to have a core API for running the
reactor yourself in a test and shutting it down, so _NO_, that would not
be great.

This seems to a persistent meme though.  I don't understand why you'd
want to run the Twisted unittests with a non-Trial runner even *with*
Trial installed, especially with Trial getting better all the time.

One interpretation of this statement I could make that would in fact be
great is that stdlib unittest and py.test could add support for
returning Deferreds, but that would make them both alternative
implementations of Trial, not of unittest (which is so vanishingly
unlikely I can't imagine that's actually what you meant).

Based on jml and spiv's earlier mails I presume that some effort is
being put towards this.  Insofar as this removes duplicate code from
trial and uses the standard unittest implementations of things that
unittest has an implementation of, great, but is there any more to it
than that?




From glyph at divmod.com  Wed Oct 26 13:14:56 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Wed, 26 Oct 2005 13:14:56 -0400
Subject: [Twisted-Python] Thoughts about testing
In-Reply-To: <20051026115649.GA24342@vidar.dreamhost.com>
References: <20051025121943.431.qmail@web33909.mail.mud.yahoo.com>
	<20051025165924.10365.1320557480.divmod.quotient.34@ohm>
	<20051026115649.GA24342@vidar.dreamhost.com>
Message-ID: <1130346896.31676.25.camel@localhost.localdomain>

On Wed, 2005-10-26 at 04:56 -0700, David Ripton wrote:

> Things I particularly like about py.test, vs. unittest:

Can we compare to trial as it stands please?  I don't think anyone is
seriously suggesting stdlib unittest for Twisted, and I am pretty sure
trial has already subsumed every interesting feature from unittest
itself :)

> 1. assert, not self.failUnlessAllThisUglyCamelCaseActuallyKillsMe()

This is cute - more in the way it deals with printing appropriate
context than the fact that you actually use 'assert' - but it's a shame
that they resorted to a language hack rather than a simple function like
'test()' or something.  Using 'assert' makes it impossible to test with
-O or -OO.  I personally don't use those options, but some people do,
and they should be testable.

> 2. You can use module-level test functions.  No need to make a test
> class unless it's actually helpful.  (Yay Java.)

Handy in some cases, but from what I've seen in my brief survey of
py.test-based tests the only thing this does is make it more of a
convention to smear unit test state across a bunch of shared globals ...

> 3. Tests execute in predictable order.

... and then since there is now global state smeared across your whole
module, the tests have to run in an exact order because each one sets up
things for the next, rather than proper setUp/tearDown encapsulation.

> 4. setup_module / setup_class / setup_method.  Handy for reusing
> database connections.

Technically trial has similar features, but they were broken so horribly
for so long that it became the common wisdom not to use them.  I have to
assume this has recently changed?

> 5. A separate test runner binary, so you don't need __main__ boilerplate
> in every test module, and you can put tests in the same module as a 
> script (if you don't care about them being found automatically).

Trial has this already too.

> 6. You can fill your tests with print statements, and only see their
> output if the test fails (or you pass the -s option).

This is like a replication of trial's AND unittest's worst feature - the
fact that tracebacks are deferred until execution is finished, so tests
which hang intermittently are un-debuggable.  I believe it is only for
the buildbot that -e is not the default.  Speaking of which, let me go
update TwistedEmacs...





From moof at metamoof.net  Wed Oct 26 13:48:32 2005
From: moof at metamoof.net (Moof)
Date: Wed, 26 Oct 2005 19:48:32 +0200
Subject: [Twisted-Python] Thoughts about testing
In-Reply-To: <1130346896.31676.25.camel@localhost.localdomain>
References: <20051025121943.431.qmail@web33909.mail.mud.yahoo.com>	<20051025165924.10365.1320557480.divmod.quotient.34@ohm>	<20051026115649.GA24342@vidar.dreamhost.com>
	<1130346896.31676.25.camel@localhost.localdomain>
Message-ID: <435FC170.8080802@metamoof.net>

Glyph Lefkowitz wrote:

>>1. assert, not self.failUnlessAllThisUglyCamelCaseActuallyKillsMe()
> 
> 
> This is cute - more in the way it deals with printing appropriate
> context than the fact that you actually use 'assert' - but it's a shame
> that they resorted to a language hack rather than a simple function like
> 'test()' or something.  Using 'assert' makes it impossible to test with
> -O or -OO.  I personally don't use those options, but some people do,
> and they should be testable.

I do despise the unittest (and hence trial) camelcaseness. I don't know
enough low level python to be able to answer whether a test() function would
have the same drawback as assert, if -O testing is really an issue.

>>3. Tests execute in predictable order.
> 
> 
> ... and then since there is now global state smeared across your whole
> module, the tests have to run in an exact order because each one sets up
> things for the next, rather than proper setUp/tearDown encapsulation.

There is a use case for this, though. py.test has a -x option that will stop
executing after one test returns an error. This is very much a time saver
when you're running a bunch of lengthy tests on a function where one initial
test failing may inevitably mean that a bunch of more sophisticated tests
involving the same item will fail. If I can predictably say that test_x will
always run before test_advanced_x, then I can try to fix the simple version
before doing a lengthy test on the advanced version.

One thing that I did like out of py.test was the ability to name a test or
test object that you wanted to run and it would do magic pattern matching on
the test's __name__ based on what you typed in. It still printed out
non-matching tests as skipped, but it only ran what you wanted. It allows
you to, again, focus on small functionality within a larger test file.

>>4. setup_module / setup_class / setup_method.  Handy for reusing
>>database connections.
> 
> 
> Technically trial has similar features, but they were broken so horribly
> for so long that it became the common wisdom not to use them.  I have to
> assume this has recently changed?

trial.unittest.setUp was changed to work after 2.0 was released on windows,
as I needed to upgrade to twisted svn to get it working.

Moof
-- 
Giles Antonio Radford, alias Moof
"Too old to be a chicken and too young to be a dirty old man"
Serving up my ego over at <http://metamoof.net/>



From glyph at divmod.com  Wed Oct 26 17:59:59 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Wed, 26 Oct 2005 17:59:59 -0400
Subject: [Twisted-Python] Thoughts about testing
In-Reply-To: <435FC170.8080802@metamoof.net>
Message-ID: <20051026215959.10365.2143431248.divmod.quotient.694@ohm>



On Wed, 26 Oct 2005 19:48:32 +0200, Moof <moof at metamoof.net> wrote:
>Glyph Lefkowitz wrote:

>I do despise the unittest (and hence trial) camelcaseness. I don't know
>enough low level python to be able to answer whether a test() function would
>have the same drawback as assert, if -O testing is really an issue.

Nope.  A test() function could do all the same stack introspection and everything as assert, but would not create problems with -O.  So it's a stealable idea.

>>>3. Tests execute in predictable order.

>There is a use case for this, though. py.test has a -x option that will stop
>executing after one test returns an error. This is very much a time saver
>when you're running a bunch of lengthy tests on a function where one initial
>test failing may inevitably mean that a bunch of more sophisticated tests
>involving the same item will fail.

The correct way to deal with this is to print errors immediately when they happen, like trial -e, or to run just the test that you want, like twisted-dev.el does.  If your unit test spits out the error right away, you can fix it while the rest of the tests are running, then kill and restart them immediately, for maximum user/computer parallelism.

>One thing that I did like out of py.test was the ability to name a test or
>test object that you wanted to run and it would do magic pattern matching on
>the test's __name__ based on what you typed in. It still printed out
>non-matching tests as skipped, but it only ran what you wanted. It allows
>you to, again, focus on small functionality within a larger test file.

Hmm, wildcards might be handy, but in practice I've never wanted more than trial's hierarchical naming.  One thing I wish trial had was a reporter mode that looked like 'make' output, eg:

% trial --gcc -e foo
trial --gcc -e foo.test
trial --gcc -e foo.test.test_whatever
trial --gcc -e foo.test.test_whatever.TestWhatever.test1
    OK
trial --gcc -e foo.test.test_whatever.TestWhatever.test2
    OK
trial --gcc -e foo.test.test_whatever.TestWhatever.test3
    FAILED: FooError
foo/bar.py:1: ...

so I could easily jump to a failed test, then copy the exact trial line needed to run it, so that I could paste that into my buffer's test line, or run trial manually on the command line to 'zoom in' to the test or suite I want.

I bet mumak has cleaned up the reporter API so this is now sane to do, I should have a look.

>Serving up my ego over at <http://metamoof.net/>

BTW, this site seems to be down.



From corydodt at twistedmatrix.com  Wed Oct 26 18:27:57 2005
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Wed, 26 Oct 2005 15:27:57 -0700
Subject: [Twisted-Python] Thoughts about testing
In-Reply-To: <20051026215959.10365.2143431248.divmod.quotient.694@ohm>
References: <20051026215959.10365.2143431248.divmod.quotient.694@ohm>
Message-ID: <436002ED.5090601@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

glyph at divmod.com wrote:
> 
> 
> Hmm, wildcards might be handy, but in practice I've never wanted more
> than trial's hierarchical naming.  One thing I wish trial had was a
> reporter mode that looked like 'make' output, eg:
> 
> % trial --gcc -e foo
> trial --gcc -e foo.test
> trial --gcc -e foo.test.test_whatever
> trial --gcc -e foo.test.test_whatever.TestWhatever.test1
>    OK
> trial --gcc -e foo.test.test_whatever.TestWhatever.test2
>    OK
> trial --gcc -e foo.test.test_whatever.TestWhatever.test3
>    FAILED: FooError
> foo/bar.py:1: ...
> 
> so I could easily jump to a failed test, then copy the exact trial line
> needed to run it, so that I could paste that into my buffer's test line,
> or run trial manually on the command line to 'zoom in' to the test or
> suite I want.

+1 Vorpal, Bugslaying


-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (MingW32)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFDYALs3A5SrXAiHQcRAo4LAKCgUtvHUgYc9J1bMxc90jBGPHveDgCfXdWv
T22mtWl6P7j7ijI0oSfYOE4=
=c4nd
-----END PGP SIGNATURE-----



From jml at mumak.net  Wed Oct 26 20:38:01 2005
From: jml at mumak.net (Jonathan Lange)
Date: Thu, 27 Oct 2005 11:38:01 +1100
Subject: [Twisted-Python] Thoughts about testing
In-Reply-To: <20051026115649.GA24342@vidar.dreamhost.com>
References: <20051025121943.431.qmail@web33909.mail.mud.yahoo.com>
	<20051025165924.10365.1320557480.divmod.quotient.34@ohm>
	<20051026115649.GA24342@vidar.dreamhost.com>
Message-ID: <d06a5cd30510261738h6f8c7f0ex@mail.gmail.com>

On 26/10/05, David Ripton <dripton at ripton.net> wrote:
> On 2005.10.25 12:59:24 -0400, Jean-Paul Calderone wrote:
> > Rather than hearing about the plethora of new testing libraries
> > appearing, I'd like to hear about features they provide that are
> > valuable for writing tests.  I would certainly like to borrow
> > py.test's magical assert.  What other features are test authors
> > finding useful in some of these projects?
>
> Things I particularly like about py.test, vs. unittest:
>
> 1. assert, not self.failUnlessAllThisUglyCamelCaseActuallyKillsMe()

class FooTest(unittest.TestCase):
    failureException = AssertionError

    def test_foo(self):
        assert False  #yay fails


> 2. You can use module-level test functions.  No need to make a test
> class unless it's actually helpful.  (Yay Java.)

This feature is present in unittest, and presumably works for free in
Trial.  Don't know about cmd line support.

> 3. Tests execute in predictable order.

Trial *ought* to execute tests in a predictable order.  If it doesn't,
please file a bug on http://www.twistedmatrix.com/bugs/, assign it to
'jml' with topic 'trial'.  (Also, please include repro)

> 4. setup_module / setup_class / setup_method.  Handy for reusing
> database connections.

We are working on something better than that.

> 5. A separate test runner binary, so you don't need __main__ boilerplate
> in every test module, and you can put tests in the same module as a
> script (if you don't care about them being found automatically).

*blink*

Thanks for the feedback!
jml



From foom at fuhm.net  Wed Oct 26 21:11:06 2005
From: foom at fuhm.net (James Y Knight)
Date: Wed, 26 Oct 2005 21:11:06 -0400
Subject: [Twisted-Python] Thoughts about testing
In-Reply-To: <d06a5cd30510261738h6f8c7f0ex@mail.gmail.com>
References: <20051025121943.431.qmail@web33909.mail.mud.yahoo.com>
	<20051025165924.10365.1320557480.divmod.quotient.34@ohm>
	<20051026115649.GA24342@vidar.dreamhost.com>
	<d06a5cd30510261738h6f8c7f0ex@mail.gmail.com>
Message-ID: <89DAFD1D-A886-49AE-9778-955E71FCF2FF@fuhm.net>

On Oct 26, 2005, at 8:38 PM, Jonathan Lange wrote:

>> 3. Tests execute in predictable order.
>>
>
> Trial *ought* to execute tests in a predictable order.  If it doesn't,
> please file a bug on http://www.twistedmatrix.com/bugs/, assign it to
> 'jml' with topic 'trial'.  (Also, please include repro)
>

It does, it just doesn't execute them in *source* order, which is  
sometimes annoying. I've groused about this before...I generally  
write tests in order from simple->complex as well, and python happily  
throws that order out before trial even gets a chance to see it.

Easily fixable by giving your test cases a numeric prefix.

Possibly "fixable" in trial with a horrible hack of looking up source  
line numbers of classes/methods and sorting according to that, but  
that seems rather...horrible.

James



From jml at mumak.net  Wed Oct 26 21:52:37 2005
From: jml at mumak.net (Jonathan Lange)
Date: Thu, 27 Oct 2005 12:52:37 +1100
Subject: separate trial release (was Re: [Twisted-Python] Twisted Jabber
In-Reply-To: <1130346333.31676.16.camel@localhost.localdomain>
References: <20051025070401.27584.41267374.divmod.quotient.3645@ohm>
	<435DE2A5.3010603@softax.com.pl> <435E0BE4.2020807@twistedmatrix.com>
	<d06a5cd30510251644g6fff01e3h@mail.gmail.com>
	<435FA791.3060908@twistedmatrix.com>
	<1130346333.31676.16.camel@localhost.localdomain>
Message-ID: <d06a5cd30510261852g2dba0b9ew@mail.gmail.com>

On 27/10/05, Glyph Lefkowitz <glyph at divmod.com> wrote:
> On Wed, 2005-10-26 at 18:58 +0300, Tommi Virtanen wrote:
>
> > Alternatively, wouldn't it be great if stdlib unittest, py.test and
> > trial could _all_ run twisted core unit tests properly?-)
>
> If py.test and stdlib unittest could run the tests without Trial
> *present*, that would mean we'd have to have a core API for running the
> reactor yourself in a test and shutting it down, so _NO_, that would not
> be great.
>
> This seems to a persistent meme though.  I don't understand why you'd
> want to run the Twisted unittests with a non-Trial runner even *with*
> Trial installed, especially with Trial getting better all the time.
>
> Based on jml and spiv's earlier mails I presume that some effort is
> being put towards this.  Insofar as this removes duplicate code from
> trial and uses the standard unittest implementations of things that
> unittest has an implementation of, great, but is there any more to it
> than that?

In particular, everything needed to actually run a test is (on its way
to being) moved into the TestCase class.  Already, many of our tests
can be run by unittest (unittestgui even works) -- because the reactor
stuff is going in TestCase.

The advantages definitely include reduced duplication and less code to
maintain.  But another big advantage is that (when we're ready) Trial
can use third-party extensions of unittest straight out of the box.

cheers,
jml



From jml at mumak.net  Wed Oct 26 22:07:34 2005
From: jml at mumak.net (Jonathan Lange)
Date: Thu, 27 Oct 2005 13:07:34 +1100
Subject: [Twisted-Python] svn-reorg blocking
In-Reply-To: <90C9697E-5B99-4C8F-8098-4A8C292BCA93@fuhm.net>
References: <60ed19d40510251936o11eb088bo90098fcdad1c8d64@mail.gmail.com>
	<20051026031015.10365.1602465155.divmod.quotient.204@ohm>
	<d06a5cd30510252110m55b8b964h@mail.gmail.com>
	<90C9697E-5B99-4C8F-8098-4A8C292BCA93@fuhm.net>
Message-ID: <d06a5cd30510261907x84aedacu@mail.gmail.com>

On 27/10/05, James Y Knight <foom at fuhm.net> wrote:
> On Oct 26, 2005, at 12:10 AM, Jonathan Lange wrote:
> > I strongly and vigorously oppose merging this branch until there are
> > unit tests for James' modifications to Trial.
>
> Nobody has suggested that such a thing should be done; there is no
> need for strong and vigorous opposition to a position nobody has
> advocated.
>
> > Instead I recommend
> > moving serialport up a level (as you suggested earlier).  That appears
> > to be the simplest thing that could possibly work.
>
> This statement makes no sense in this context. Fiddling with
> serialport does not remove the need to make changes to trial that
> require new unit tests. As I said before, I don't even think it
> removes the need for the attribute to mark ignorable subpackages
> either, but, I'm not going to argue that point further.
>

My mistake. I remembered that there weren't tests for __path__ support
in the middle of the email -- and by then I had already used the word
"vigorously", which I've been aching to use in a sentence for some
time.

However, I still hold that the attribute to mark ignorable subpackages
is currently unnecessary.  If it turns out that the attribute *is*
necessary, I'm more than happy to see it added.

Still, delight in vocabulary and strong disagreement aren't excuses
for sloppy logic and a disregard for the facts -- so I apologise.  If
it helps, I'll own that my paranoia springs from my experiences
maintaining Trial in 2002-2003, when all people added "useful"
features with little consideration (leading to bloat, leading to The
Rewrite).

While the circumstances have changed (not least because your code is
considered), I'm still going to hang on to that paranoia, if only to
slow things down.

cheers,
jml



From jml at mumak.net  Wed Oct 26 22:10:31 2005
From: jml at mumak.net (Jonathan Lange)
Date: Thu, 27 Oct 2005 13:10:31 +1100
Subject: [Twisted-Python] Thoughts about testing
In-Reply-To: <89DAFD1D-A886-49AE-9778-955E71FCF2FF@fuhm.net>
References: <20051025121943.431.qmail@web33909.mail.mud.yahoo.com>
	<20051025165924.10365.1320557480.divmod.quotient.34@ohm>
	<20051026115649.GA24342@vidar.dreamhost.com>
	<d06a5cd30510261738h6f8c7f0ex@mail.gmail.com>
	<89DAFD1D-A886-49AE-9778-955E71FCF2FF@fuhm.net>
Message-ID: <d06a5cd30510261910r4308fab9w@mail.gmail.com>

On 27/10/05, James Y Knight <foom at fuhm.net> wrote:
> On Oct 26, 2005, at 8:38 PM, Jonathan Lange wrote:
>
> >> 3. Tests execute in predictable order.
> >>
> >
> > Trial *ought* to execute tests in a predictable order.  If it doesn't,
> > please file a bug on http://www.twistedmatrix.com/bugs/, assign it to
> > 'jml' with topic 'trial'.  (Also, please include repro)
> >
>
> It does, it just doesn't execute them in *source* order, which is
> sometimes annoying. I've groused about this before...I generally
> write tests in order from simple->complex as well, and python happily
> throws that order out before trial even gets a chance to see it.
>

Is this annoying only because it's more pleasing to see the tests run
in written order, or for some other reason?

jml



From dripton at ripton.net  Wed Oct 26 23:35:27 2005
From: dripton at ripton.net (David Ripton)
Date: Wed, 26 Oct 2005 20:35:27 -0700
Subject: [Twisted-Python] Thoughts about testing
In-Reply-To: <1130346896.31676.25.camel@localhost.localdomain>
References: <20051025121943.431.qmail@web33909.mail.mud.yahoo.com>
	<20051025165924.10365.1320557480.divmod.quotient.34@ohm>
	<20051026115649.GA24342@vidar.dreamhost.com>
	<1130346896.31676.25.camel@localhost.localdomain>
Message-ID: <20051027033526.GA28791@vidar.dreamhost.com>

On 2005.10.26 13:14:56 -0400, Glyph Lefkowitz wrote:
> On Wed, 2005-10-26 at 04:56 -0700, David Ripton wrote:
> 
> > Things I particularly like about py.test, vs. unittest:
> 
> Can we compare to trial as it stands please?  I don't think anyone is

Sorry.  Haven't used trial lately, and didn't want to make outdated
comparisons.  unittest is the lingua franca; if I accidentally say
something useful, the trial guys can surely translate.

> > 1. assert, not self.failUnlessAllThisUglyCamelCaseActuallyKillsMe()
> 
> This is cute - more in the way it deals with printing appropriate
> context than the fact that you actually use 'assert' - but it's a shame
> that they resorted to a language hack rather than a simple function like
> 'test()' or something.  Using 'assert' makes it impossible to test with
> -O or -OO.  I personally don't use those options, but some people do,
> and they should be testable.

$ python -O `which py.test` test_assert.py
inserting into sys.path: /home/dripton/py-dist
/home/dripton/py-dist/py/test/cmdline.py:30: UserWarning: Assertions are
turned off! (are you using python -O?)
  py.std.warnings.warn("Assertions are turned off!"
...

So I think this is a purely theoretical problem.  I can respect
disliking the magic assert on general principles, though, even though
it's very handy.  (Kinda like the print statement.)

> > 2. You can use module-level test functions.  No need to make a test
> > class unless it's actually helpful.  (Yay Java.)
> 
> Handy in some cases, but from what I've seen in my brief survey of
> py.test-based tests the only thing this does is make it more of a
> convention to smear unit test state across a bunch of shared globals ...

Well, you can abuse globals to carry state across test methods in
unittest and trial as well.  (Init them at the module level rather than
in setUp.)

> > 3. Tests execute in predictable order.
> 
> ... and then since there is now global state smeared across your whole
> module, the tests have to run in an exact order because each one sets up
> things for the next, rather than proper setUp/tearDown encapsulation.

If someone insists on writing bad tests, I don't think there's much a
Python framework is going to do to stop them.  It's just not a very
authoritarian language.  "Stop, or I'll say 'stop' again!"  But I think
most slackers tend to skip writing bad tests and go straight to writing
no tests.

I admit to reusing expensive-to-create objects across multiple test
functions/methods for performance, but I have been conditioned by years
of xUnit to treat such objects as immutable.  (Okay, in the case of
database connections, I put a rollback call in the teardown, which is
not quite the same thing.)

There are other uses for predictable order, even if the tests are fully
independent.  Like running the test you're currently trying to fix
first, or moving the slowest ones to the end.  Knowing what your program
is going to do is sometimes handy.  (unittest is random enough that one
of my co-workers insisted it must be multi-threaded.)

> > 6. You can fill your tests with print statements, and only see their
> > output if the test fails (or you pass the -s option).
> 
> This is like a replication of trial's AND unittest's worst feature - the
> fact that tracebacks are deferred until execution is finished, so tests
> which hang intermittently are un-debuggable.  I believe it is only for
> the buildbot that -e is not the default.  Speaking of which, let me go
> update TwistedEmacs...

Yeah, that makes sense.  But *if* you're going to have deferred
tracebacks, then having print statements silenced when the test passes
can be nice, so that you can lie in wait for intermittent bugs without
generating too much noise.

-- 
David Ripton    dripton at ripton.net



From glyph at divmod.com  Thu Oct 27 02:08:34 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 27 Oct 2005 02:08:34 -0400
Subject: separate trial release (was Re: [Twisted-Python] Twisted Jabber
In-Reply-To: <d06a5cd30510261852g2dba0b9ew@mail.gmail.com>
Message-ID: <20051027060834.10365.1290699047.divmod.quotient.869@ohm>



On Thu, 27 Oct 2005 12:52:37 +1100, Jonathan Lange <jml at mumak.net> wrote:
>On 27/10/05, Glyph Lefkowitz <glyph at divmod.com> wrote:

> (...) the reactor stuff is going in TestCase.

I believe I've lodged a disagreement with you before about this.  If you really think it's best I'll trust your judgement more than mine, since you're certainly doing a bang-up job getting trial into useful shape, but I'll still try to convince you :).

The reactor should be started by the command-line tool and stopped after all tests are done.  Several reasons why:

 - Tests should be runnable by "live" processes.  *twisted* context should need to be around, not unittest context, for the tests to run properly.  This would help a lot in situations where something seems to work for the test framework but doesn't on a live server.

 - We try, but some event loops really *can't* be stopped and restarted safely or reliably multiple times within the same process.  Previous discussions on this list I believe called out cfreactor as an example.  I believe there are others.

 - Normal execution of Twisted programs has the Reactor start up once, lots of stuff run in it, and then it shuts down.  I don't mind exercising the edge cases, but this _only_ excercises the edge cases; the reactor starts up and shuts down every time something new happens.

>The advantages definitely include reduced duplication and less code to
>maintain.  But another big advantage is that (when we're ready) Trial
>can use third-party extensions of unittest straight out of the box.

Are there any such third-party extensions which have value?



From glyph at divmod.com  Thu Oct 27 02:10:02 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 27 Oct 2005 02:10:02 -0400
Subject: [Twisted-Python] Thoughts about testing
In-Reply-To: <89DAFD1D-A886-49AE-9778-955E71FCF2FF@fuhm.net>
Message-ID: <20051027061002.10365.1034698280.divmod.quotient.870@ohm>



On Wed, 26 Oct 2005 21:11:06 -0400, James Y Knight <foom at fuhm.net> wrote:
>On Oct 26, 2005, at 8:38 PM, Jonathan Lange wrote:

>Possibly "fixable" in trial with a horrible hack of looking up source  line 
>numbers of classes/methods and sorting according to that, but  that seems 
>rather...horrible.

Why?  It's just one attribute - no magical side effects or anything.  It's documented, and this only affects sort order.  Seems like a pretty reasonable change to me.



From glyph at divmod.com  Thu Oct 27 02:12:40 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 27 Oct 2005 02:12:40 -0400
Subject: [Twisted-Python] Thoughts about testing
In-Reply-To: <d06a5cd30510261738h6f8c7f0ex@mail.gmail.com>
Message-ID: <20051027061240.10365.1339561015.divmod.quotient.872@ohm>



On Thu, 27 Oct 2005 11:38:01 +1100, Jonathan Lange <jml at mumak.net> wrote:
>On 26/10/05, David Ripton <dripton at ripton.net> wrote:

>> 1. assert, not self.failUnlessAllThisUglyCamelCaseActuallyKillsMe()

>class FooTest(unittest.TestCase):
>    failureException = AssertionError
>
>    def test_foo(self):
>        assert False  #yay fails

My understanding is that if you do

    t = True
    nil = False
    assert t == nil

in py.test, the error reporting will show you "t != nil (True != False)" or somesuch, along with a bunch of other useful diagnostic information.

My proposal was to steal this by doing 'self.failUnless(t == nil)' and stealing as much of their stack introspection junk (available as a hacked version of AssertionError) as we can.



From jml at mumak.net  Thu Oct 27 02:15:57 2005
From: jml at mumak.net (Jonathan Lange)
Date: Thu, 27 Oct 2005 17:15:57 +1100
Subject: [Twisted-Python] Thoughts about testing
In-Reply-To: <20051027061240.10365.1339561015.divmod.quotient.872@ohm>
References: <d06a5cd30510261738h6f8c7f0ex@mail.gmail.com>
	<20051027061240.10365.1339561015.divmod.quotient.872@ohm>
Message-ID: <d06a5cd30510262315i4c50dd4ex@mail.gmail.com>

On 27/10/05, glyph at divmod.com <glyph at divmod.com> wrote:
>
>
> On Thu, 27 Oct 2005 11:38:01 +1100, Jonathan Lange <jml at mumak.net> wrote:
> >On 26/10/05, David Ripton <dripton at ripton.net> wrote:
>
> >> 1. assert, not self.failUnlessAllThisUglyCamelCaseActuallyKillsMe()
>
> >class FooTest(unittest.TestCase):
> >    failureException = AssertionError
> >
> >    def test_foo(self):
> >        assert False  #yay fails
>
> My understanding is that if you do
>
>     t = True
>     nil = False
>     assert t == nil
>
> in py.test, the error reporting will show you "t != nil (True != False)" or somesuch, along with a bunch of other useful diagnostic information.
>
> My proposal was to steal this by doing 'self.failUnless(t == nil)' and stealing as much of their stack introspection junk (available as a hacked version of AssertionError) as we can.

Wicked.  Please file a feature bug against me, topic 'trial'.

cheers,
jml



From jml at mumak.net  Thu Oct 27 02:25:07 2005
From: jml at mumak.net (Jonathan Lange)
Date: Thu, 27 Oct 2005 17:25:07 +1100
Subject: separate trial release (was Re: [Twisted-Python] Twisted Jabber
In-Reply-To: <20051027060834.10365.1290699047.divmod.quotient.869@ohm>
References: <d06a5cd30510261852g2dba0b9ew@mail.gmail.com>
	<20051027060834.10365.1290699047.divmod.quotient.869@ohm>
Message-ID: <d06a5cd30510262325g35311a75m@mail.gmail.com>

On 27/10/05, glyph at divmod.com <glyph at divmod.com> wrote:
>
>
> On Thu, 27 Oct 2005 12:52:37 +1100, Jonathan Lange <jml at mumak.net> wrote:
> >On 27/10/05, Glyph Lefkowitz <glyph at divmod.com> wrote:
>
> > (...) the reactor stuff is going in TestCase.
>
> I believe I've lodged a disagreement with you before about this.  If you really think it's best I'll trust your judgement more than mine, since you're certainly doing a bang-up job getting trial into useful shape, but I'll still try to convince you :).
>
> The reactor should be started by the command-line tool and stopped after all tests are done.

My judgement is suspended for the moment.  My own opinion is that we
should bang Trial into a unittest shape first (because that is the
closest non-Cthulhain shape to what is currently there).

Only once that's done do I want to start thinking about how best to
re-gut Trial so that it treats the reactor with the decorum it
deserves.  In the interim, unittest compatibility is simply a cool
feature.

> Are there any such third-party extensions which have value?
>

subunit and testresource are two.  I'm told datatest (see
http://twistedmatrix.com/bugs/issue529, link at bottom 404s) is
another.

cheers,
jml



From foom at fuhm.net  Thu Oct 27 04:02:02 2005
From: foom at fuhm.net (James Y Knight)
Date: Thu, 27 Oct 2005 04:02:02 -0400
Subject: [Twisted-Python] Thoughts about testing
In-Reply-To: <20051027061002.10365.1034698280.divmod.quotient.870@ohm>
References: <20051027061002.10365.1034698280.divmod.quotient.870@ohm>
Message-ID: <42DA3FBB-4B22-4E0B-B9CE-8BEE1073B0EC@fuhm.net>


On Oct 27, 2005, at 2:10 AM, glyph at divmod.com wrote:

>
>
> On Wed, 26 Oct 2005 21:11:06 -0400, James Y Knight <foom at fuhm.net>  
> wrote:
>
>> On Oct 26, 2005, at 8:38 PM, Jonathan Lange wrote:
>>
>
>
>> Possibly "fixable" in trial with a horrible hack of looking up  
>> source  line numbers of classes/methods and sorting according to  
>> that, but  that seems rather...horrible.
>>
>
> Why?  It's just one attribute - no magical side effects or  
> anything.  It's documented, and this only affects sort order.   
> Seems like a pretty reasonable change to me.

Well, here's the 5 minute solution. It works...no points for style  
though.

James

Index: runner.py
===================================================================
--- runner.py   (revision 14859)
+++ runner.py   (working copy)
@@ -296,6 +296,34 @@
          return thing.__name__
      return thing.id()
+def sourceOrder(thing):
+    if isinstance(thing, pyunit.TestCase):
+        # ?!?!
+        thing = thing._parents[0]
+    if hasattr(thing, 'im_func'):
+        thing = thing.im_func
+    if hasattr(thing, 'func_code'):
+        thing = thing.func_code
+    if hasattr(thing, 'co_firstlineno'):
+        return thing.co_firstlineno
+
+    if isinstance(thing, (types.ClassType, type)):
+        so = None
+        for x in vars(thing).itervalues():
+            try:
+                newso = sourceOrder(x)
+            except TypeError:
+                # Not a sourceorderable
+                pass
+            else:
+                if so is not None:
+                    so = min(so, newso)
+                else:
+                    so = newso
+        if so is None:
+            return 0
+        return so
+    raise TypeError("Unknown test object type: %s %s %s" % (thing,  
type(thing), vars(thing)))
def isTestCase(obj):
      try:
@@ -316,6 +344,7 @@
          self.suiteFactory = TestSuite
          self.classSuiteFactory = ClassSuite
          self.sorter = name
+        self.testSorter = sourceOrder
          self._importErrors = []
      def _findTestClasses(self, module):
@@ -324,7 +353,7 @@
          for name, val in inspect.getmembers(module):
              if isTestCase(val):
                  classes.append(val)
-        return dsu(classes, self.sorter)
+        return dsu(classes, self.testSorter)
      def _findTestModules(self, package):
          modGlob = os.path.join(os.path.dirname(package.__file__),  
self.moduleGlob)
@@ -371,7 +400,7 @@
          factory = self.classSuiteFactory
          names = reflect.prefixedMethodNames(klass, self.methodPrefix)
          tests = dsu([ klass(self.methodPrefix+name) for name in  
names ],
-                    self.sorter)
+                    self.testSorter)
          suite = factory(klass)
          suite.addTests(tests)
          return NamedSuite(klass.__name__, suite)




From johannes.beigel at brainbot.com  Thu Oct 27 04:40:59 2005
From: johannes.beigel at brainbot.com (Johannes Beigel)
Date: Thu, 27 Oct 2005 10:40:59 +0200
Subject: [Twisted-Python] IMAP4Client closes connection cleanly during
	search()
In-Reply-To: <435F3E07.3030705@brainbot.com>
References: <435F3E07.3030705@brainbot.com>
Message-ID: <4360929B.9020903@brainbot.com>

Hello.

Yesterday I was a little short on time, so please excuse the lateness of 
this post containing the obligatory minimal example that reproduces the 
described bevhavior. Everything works just fine with small mailboxes for 
me. But using a big mailbox (approx. 5000 mails in it) results in 
"search failed" not printed and quit() being never called.

Ciao
-jojo

-------------- next part --------------
A non-text attachment was scrubbed...
Name: minimal.py
Type: text/x-python
Size: 1294 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20051027/6ebc5a82/attachment.py 

From ralf at brainbot.com  Thu Oct 27 05:10:50 2005
From: ralf at brainbot.com (Ralf Schmitt)
Date: Thu, 27 Oct 2005 11:10:50 +0200
Subject: [Twisted-Python] Thoughts about testing
In-Reply-To: <20051027061002.10365.1034698280.divmod.quotient.870@ohm>
References: <20051027061002.10365.1034698280.divmod.quotient.870@ohm>
Message-ID: <4360999A.4010201@brainbot.com>

glyph at divmod.com wrote:
> 
> 
> On Wed, 26 Oct 2005 21:11:06 -0400, James Y Knight <foom at fuhm.net> wrote:
> 
>> On Oct 26, 2005, at 8:38 PM, Jonathan Lange wrote:
> 
> 
>> Possibly "fixable" in trial with a horrible hack of looking up source  
>> line numbers of classes/methods and sorting according to that, but  
>> that seems rather...horrible.
> 
> 
> Why?  It's just one attribute - no magical side effects or anything.  
> It's documented, and this only affects sort order.  Seems like a pretty 
> reasonable change to me.
> 

The magical side effects happen if you choose to use decorators on the 
test functions. Suddenly the test functions 'use' the decorator's source 
line numbers.

- Ralf






From exarkun at divmod.com  Thu Oct 27 09:45:15 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 27 Oct 2005 09:45:15 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r14922 - Fix to replace a
 lambda with something that's safe in the scope when it's
In-Reply-To: <E1EV4Kd-00008z-00@wolfwood>
Message-ID: <20051027134515.10365.1701079740.divmod.quotient.982@ohm>

On Thu, 27 Oct 2005 03:45:59 -0600, Matt Goodall <mg at wolfwood.twistedmatrix.com> wrote:
>Author: mg
>Date: Thu Oct 27 03:45:58 2005
>New Revision: 14922
>
>Modified:
>   sandbox/mg/laxdb.py
>Log:
>Fix to replace a lambda with something that's safe in the scope when it's
>actually executed .... just in case anyone else is actually using this thing.
>

Note that this changes the behavior from constructing Failure instances in the reactor thread to creating them in a worker thread.

Jp



From itamar at itamarst.org  Thu Oct 27 10:09:51 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 27 Oct 2005 10:09:51 -0400
Subject: [Twisted-Python] IMAP4Client closes connection cleanly during
	search()
In-Reply-To: <4360929B.9020903@brainbot.com>
References: <435F3E07.3030705@brainbot.com>  <4360929B.9020903@brainbot.com>
Message-ID: <1130422191.8857.0.camel@localhost.localdomain>

Could you please add the bug to http://twistedmatrix.com/bugs/ so we
don't lose track of it? Thanks.




From matt at pollenation.net  Thu Oct 27 10:17:30 2005
From: matt at pollenation.net (Matt Goodall)
Date: Thu, 27 Oct 2005 15:17:30 +0100
Subject: [Twisted-Python] Re: [Twisted-commits] r14922 - Fix to replace
	a lambda with something that's safe in the scope when it's
In-Reply-To: <20051027134515.10365.1701079740.divmod.quotient.982@ohm>
References: <20051027134515.10365.1701079740.divmod.quotient.982@ohm>
Message-ID: <4360E17A.1000702@pollenation.net>

Jean-Paul Calderone wrote:
> On Thu, 27 Oct 2005 03:45:59 -0600, Matt Goodall
> <mg at wolfwood.twistedmatrix.com> wrote:
> 
>> Author: mg
>> Date: Thu Oct 27 03:45:58 2005
>> New Revision: 14922
>>
>> Modified:
>>   sandbox/mg/laxdb.py
>> Log:
>> Fix to replace a lambda with something that's safe in the scope when it's
>> actually executed .... just in case anyone else is actually using this
>> thing.
>>
> 
> Note that this changes the behavior from constructing Failure instances
> in the reactor thread to creating them in a worker thread.

Yes, very true. Thanks for raising it. Does it matter in this case?

All the the args passed to Failure are worked out in the thread and I
think that means Failure's __init__ does basically nothing. Did I miss
something?

Thanks, Matt

-- 
     __
    /  \__     Matt Goodall, Pollenation Internet Ltd
    \__/  \    w: http://www.pollenation.net
  __/  \__/    e: matt at pollenation.net
 /  \__/  \    t: +44 (0)113 2252500
 \__/  \__/
 /  \          Any views expressed are my own and do not necessarily
 \__/          reflect the views of my employer.



From matt at pollenation.net  Thu Oct 27 10:27:36 2005
From: matt at pollenation.net (Matt Goodall)
Date: Thu, 27 Oct 2005 15:27:36 +0100
Subject: [Twisted-Python] Re: [Twisted-commits] r14922 - Fix to replace
	a lambda with something that's safe in the scope when it's
In-Reply-To: <4360E17A.1000702@pollenation.net>
References: <20051027134515.10365.1701079740.divmod.quotient.982@ohm>
	<4360E17A.1000702@pollenation.net>
Message-ID: <4360E3D8.4040501@pollenation.net>

Matt Goodall wrote:
> Jean-Paul Calderone wrote:
> 
>>On Thu, 27 Oct 2005 03:45:59 -0600, Matt Goodall
>><mg at wolfwood.twistedmatrix.com> wrote:
>>
>>
>>>Author: mg
>>>Date: Thu Oct 27 03:45:58 2005
>>>New Revision: 14922
>>>
>>>Modified:
>>>  sandbox/mg/laxdb.py
>>>Log:
>>>Fix to replace a lambda with something that's safe in the scope when it's
>>>actually executed .... just in case anyone else is actually using this
>>>thing.
>>>
>>
>>Note that this changes the behavior from constructing Failure instances
>>in the reactor thread to creating them in a worker thread.
> 
> 
> Yes, very true. Thanks for raising it. Does it matter in this case?
> 
> All the the args passed to Failure are worked out in the thread and I
> think that means Failure's __init__ does basically nothing. Did I miss
> something?

Also, I think it's now pointless digging the exception information out
of Python to pass to the Failure.__init__. That's what Failure will
*now* do on its own when passed nothing.

- Matt

-- 
     __
    /  \__     Matt Goodall, Pollenation Internet Ltd
    \__/  \    w: http://www.pollenation.net
  __/  \__/    e: matt at pollenation.net
 /  \__/  \    t: +44 (0)113 2252500
 \__/  \__/
 /  \          Any views expressed are my own and do not necessarily
 \__/          reflect the views of my employer.



From exarkun at divmod.com  Thu Oct 27 10:46:08 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 27 Oct 2005 10:46:08 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r14922 - Fix to replace
	a lambda with something that's safe in the scope when it's
In-Reply-To: <4360E3D8.4040501@pollenation.net>
Message-ID: <20051027144608.10365.1863415127.divmod.quotient.999@ohm>

On Thu, 27 Oct 2005 15:27:36 +0100, Matt Goodall <matt at pollenation.net> wrote:
>Matt Goodall wrote:
>> Jean-Paul Calderone wrote:
>>
>>>On Thu, 27 Oct 2005 03:45:59 -0600, Matt Goodall
>>><mg at wolfwood.twistedmatrix.com> wrote:
>>>
>>>
>>>>Author: mg
>>>>Date: Thu Oct 27 03:45:58 2005
>>>>New Revision: 14922
>>>>
>>>>Modified:
>>>>  sandbox/mg/laxdb.py
>>>>Log:
>>>>Fix to replace a lambda with something that's safe in the scope when it's
>>>>actually executed .... just in case anyone else is actually using this
>>>>thing.
>>>>
>>>
>>>Note that this changes the behavior from constructing Failure instances
>>>in the reactor thread to creating them in a worker thread.
>>
>>
>> Yes, very true. Thanks for raising it. Does it matter in this case?
>>
>> All the the args passed to Failure are worked out in the thread and I
>> think that means Failure's __init__ does basically nothing. Did I miss
>> something?

It may work fine now.  The API isn't guaranteed to be threadsafe, though.

>
>Also, I think it's now pointless digging the exception information out
>of Python to pass to the Failure.__init__. That's what Failure will
>*now* do on its own when passed nothing.

As it stands in SVN now, I agree.  The Failure was constructed that way before since it was being instantiated in a different thread than the one in which the exception occurred.

Jp



From johannes.beigel at brainbot.com  Thu Oct 27 10:57:17 2005
From: johannes.beigel at brainbot.com (Johannes Beigel)
Date: Thu, 27 Oct 2005 16:57:17 +0200
Subject: [Twisted-Python] IMAP4Client closes connection cleanly during
	search()
In-Reply-To: <1130422191.8857.0.camel@localhost.localdomain>
References: <435F3E07.3030705@brainbot.com> <4360929B.9020903@brainbot.com>
	<1130422191.8857.0.camel@localhost.localdomain>
Message-ID: <4360EACD.4070705@brainbot.com>

Itamar Shtull-Trauring schrieb:

>Could you please add the bug to http://twistedmatrix.com/bugs/ so we
>don't lose track of it? Thanks.
>  
>

OK, I just did it. It's Issue 1290.

-jojo




From radeex at gmail.com  Fri Oct 28 07:14:25 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Fri, 28 Oct 2005 22:14:25 +1100
Subject: [Twisted-Python] svn-reorg blocking
In-Reply-To: <20051026050340.10365.1722990414.divmod.quotient.261@ohm>
References: <d06a5cd30510252110m55b8b964h@mail.gmail.com>
	<20051026050340.10365.1722990414.divmod.quotient.261@ohm>
Message-ID: <60ed19d40510280414x455f4017waf959141b316c531@mail.gmail.com>

On 10/26/05, glyph at divmod.com <glyph at divmod.com> wrote:
> Any other blocking issues?

Well, not only does the new __path__ stuff not have tests (which I had
just sat down to remedy), but it's also apparently breaking existing
trial tests (clearly seen with "trial twisted.trial" in svn-reorg
branch). Not only is it breaking them, it's doing it in a way that one
failing test is causing others to fail - I assume because of the
state-changing nature of the __path__ support change - that of
importing the packages instead of doing stuff by filesystem.

This __path__ thing continues to annoy me for various reasons, and I'm
having second thoughts about how possible it is. Can other people
please get on IRC this weekend and bash heads about it with me? Maybe
we can find an alternative solution that isn't so magical and
unsupported by, well, everything. Or we can just figure out how to get
the __path__ stuff working for reals.

--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+



From radeex at gmail.com  Fri Oct 28 07:21:25 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Fri, 28 Oct 2005 22:21:25 +1100
Subject: [Twisted-Python] pyramid -> Ubuntu
Message-ID: <60ed19d40510280421j12c986c0na28858f357de8d@mail.gmail.com>

Wouldn't it be awesome if Pyramid ran on Ubuntu instead of a
not-even-latest release of Debian?

I've heard rumors it should be as simple as s/woody/breezy/ and a
dist-upgrade. We could do that and have jafo standing by in case the
machine becomes unbootable after the kernel upgrade.

This thought came to me after I was considering and loathing the
prospect of upgrading our roundup instance on such an ancient
platform.

Thoughts?

--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+



From mary-twisted at puzzling.org  Fri Oct 28 08:43:36 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Fri, 28 Oct 2005 22:43:36 +1000
Subject: [Twisted-Python] pyramid -> Ubuntu
In-Reply-To: <60ed19d40510280421j12c986c0na28858f357de8d@mail.gmail.com>
References: <60ed19d40510280421j12c986c0na28858f357de8d@mail.gmail.com>
Message-ID: <20051028124336.GC12326@sourdust.home.puzzling.org>

On Fri, Oct 28, 2005, Christopher Armstrong wrote:
> I've heard rumors it should be as simple as s/woody/breezy/ and a
> dist-upgrade. We could do that and have jafo standing by in case the
> machine becomes unbootable after the kernel upgrade.

Not quite: make sure you install ubuntu-minimal and probably ubuntu-base
to make sure that you have a decent base system. I did manage to do
early sarge -> warty and later sarge -> hoary relatively easily, but
the mere fact of it being a remote upgrade may bring down a curse on
your head...

-Mary

-- 
<radix> /msg exarkun [lilo] HI ALL GIMME MONEYS AND LOOK AT MY WEBBARSITE



From psanchez at nortel.com  Fri Oct 28 10:35:08 2005
From: psanchez at nortel.com (Pedro Sanchez)
Date: Fri, 28 Oct 2005 10:35:08 -0400
Subject: [Twisted-Python] Handling errors when using deferToThread
Message-ID: <1130510108.1711.125.camel@pcard0ze.ca.nortel.com>

Hello,

In the twisted documentation there is this example:


from twisted.internet import threads
def doLongCalculation():
    # .... do long calculation here ...
    return 3

def printResult(x):
    print x

# run method in thread and get result as defer.Deferred
d = threads.deferToThread(doLongCalculation)
d.addCallback(printResult)


This works well as long as doLongCalculation() doesn't fail for
any reason. But if it does, how can it trigger an errBack?
I want to do something like this:

from twisted.internet import threads
def doLongCalculation():
    try:
       # .... do long calculation here ...
    except:
       < what can I return here to tell that
         the calculation failed? >
    return 3

def printResult(x):
    print x

def badResult(failure):
    print "Calculation failed!"

# run method in thread and get result as defer.Deferred
d = threads.deferToThread(doLongCalculation)
d.addCallbacks(printResult, badResult)


Thanks in advance for your help,

-- 
Pedro






From cwmoad at gmail.com  Fri Oct 28 10:49:01 2005
From: cwmoad at gmail.com (Charlie Moad)
Date: Fri, 28 Oct 2005 09:49:01 -0500
Subject: [Twisted-Python] Handling errors when using deferToThread
In-Reply-To: <1130510108.1711.125.camel@pcard0ze.ca.nortel.com>
References: <1130510108.1711.125.camel@pcard0ze.ca.nortel.com>
Message-ID: <6382066a0510280749r27c22fe2i6605b17e1e1d7d8a@mail.gmail.com>

The deferred object from the deferToThread call is the same as any
other deferred.  Your example should work.  I have working code with
addCallback/addErrback.

On 10/28/05, Pedro Sanchez <psanchez at nortel.com> wrote:
> Hello,
>
> In the twisted documentation there is this example:
>
>
> from twisted.internet import threads
> def doLongCalculation():
>     # .... do long calculation here ...
>     return 3
>
> def printResult(x):
>     print x
>
> # run method in thread and get result as defer.Deferred
> d = threads.deferToThread(doLongCalculation)
> d.addCallback(printResult)
>
>
> This works well as long as doLongCalculation() doesn't fail for
> any reason. But if it does, how can it trigger an errBack?
> I want to do something like this:
>
> from twisted.internet import threads
> def doLongCalculation():
>     try:
>        # .... do long calculation here ...
>     except:
>        < what can I return here to tell that
>          the calculation failed? >
>     return 3
>
> def printResult(x):
>     print x
>
> def badResult(failure):
>     print "Calculation failed!"
>
> # run method in thread and get result as defer.Deferred
> d = threads.deferToThread(doLongCalculation)
> d.addCallbacks(printResult, badResult)
>
>
> Thanks in advance for your help,
>
> --
> Pedro
>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From andrew-twisted at puzzling.org  Fri Oct 28 10:56:22 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sat, 29 Oct 2005 00:56:22 +1000
Subject: [Twisted-Python] Handling errors when using deferToThread
In-Reply-To: <1130510108.1711.125.camel@pcard0ze.ca.nortel.com>
References: <1130510108.1711.125.camel@pcard0ze.ca.nortel.com>
Message-ID: <20051028145622.GB23016@trogdor.home.puzzling.org>

On Fri, Oct 28, 2005 at 10:35:08AM -0400, Pedro Sanchez wrote:
[...]
> This works well as long as doLongCalculation() doesn't fail for
> any reason. But if it does, how can it trigger an errBack?

Just raise an exception.

> I want to do something like this:
> 
> from twisted.internet import threads
> def doLongCalculation():
>     try:
>        # .... do long calculation here ...
>     except:
>        < what can I return here to tell that
>          the calculation failed? >
>     return 3

The literal answer here is a bare raise statement.  But better would be to
not use the try-except at all.

Try inserting something like "1/0" into doLongCalculation and see what
happens.

-Andrew.




From psanchez at nortel.com  Fri Oct 28 11:25:32 2005
From: psanchez at nortel.com (Pedro Sanchez)
Date: Fri, 28 Oct 2005 11:25:32 -0400
Subject: [Twisted-Python] Handling errors when using deferToThread
In-Reply-To: <20051028145622.GB23016@trogdor.home.puzzling.org>
References: <1130510108.1711.125.camel@pcard0ze.ca.nortel.com>
	<20051028145622.GB23016@trogdor.home.puzzling.org>
Message-ID: <1130513132.1711.129.camel@pcard0ze.ca.nortel.com>

On Sat, 2005-29-10 at 00:56 +1000, Andrew Bennetts wrote:
> On Fri, Oct 28, 2005 at 10:35:08AM -0400, Pedro Sanchez wrote:
> [...]
> > This works well as long as doLongCalculation() doesn't fail for
> > any reason. But if it does, how can it trigger an errBack?
> 
> Just raise an exception.
> 
> > I want to do something like this:
> > 
> > from twisted.internet import threads
> > def doLongCalculation():
> >     try:
> >        # .... do long calculation here ...
> >     except:
> >        < what can I return here to tell that
> >          the calculation failed? >
> >     return 3
> 
> The literal answer here is a bare raise statement.  But better would be to
> not use the try-except at all.
> 
Why? What's the alternative?

> Try inserting something like "1/0" into doLongCalculation and see what
> happens.
> 
I don't understand your "1/0" suggestion. Can you elaborate a bit?

Thanks.

-- 
Pedro

> -Andrew.
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 




From itamar at itamarst.org  Fri Oct 28 11:31:01 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 28 Oct 2005 11:31:01 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r14926 - Branch to obsolete
	setUpClass and tearDownClass
In-Reply-To: <E1EVJsK-0000Uz-00@wolfwood>
References: <E1EVJsK-0000Uz-00@wolfwood>
Message-ID: <1130513462.8901.9.camel@localhost.localdomain>

On Thu, 2005-10-27 at 20:21 -0600, Jonathan Lange wrote:
> Author: jml
> Date: Thu Oct 27 20:21:48 2005
> New Revision: 14926
> 
> Added:
>    branches/jml/trial-setupclass-death/
>       - copied from r14925, trunk/
> Log:
> Branch to obsolete setUpClass and tearDownClass

Why?




From cwmoad at gmail.com  Fri Oct 28 11:39:30 2005
From: cwmoad at gmail.com (Charlie Moad)
Date: Fri, 28 Oct 2005 10:39:30 -0500
Subject: [Twisted-Python] Handling errors when using deferToThread
In-Reply-To: <1130513132.1711.129.camel@pcard0ze.ca.nortel.com>
References: <1130510108.1711.125.camel@pcard0ze.ca.nortel.com>
	<20051028145622.GB23016@trogdor.home.puzzling.org>
	<1130513132.1711.129.camel@pcard0ze.ca.nortel.com>
Message-ID: <6382066a0510280839j5dab1c04j7664e5e4d4fcb76e@mail.gmail.com>

def doLongCalculation():
   return 1/0

This will raise a dividebyzero error.  In which case your errback will
be called.  You don't need the try/except block because when an
exception is raised your errback will be called instead of the
callback.

On 10/28/05, Pedro Sanchez <psanchez at nortel.com> wrote:
> On Sat, 2005-29-10 at 00:56 +1000, Andrew Bennetts wrote:
> > On Fri, Oct 28, 2005 at 10:35:08AM -0400, Pedro Sanchez wrote:
> > [...]
> > > This works well as long as doLongCalculation() doesn't fail for
> > > any reason. But if it does, how can it trigger an errBack?
> >
> > Just raise an exception.
> >
> > > I want to do something like this:
> > >
> > > from twisted.internet import threads
> > > def doLongCalculation():
> > >     try:
> > >        # .... do long calculation here ...
> > >     except:
> > >        < what can I return here to tell that
> > >          the calculation failed? >
> > >     return 3
> >
> > The literal answer here is a bare raise statement.  But better would be to
> > not use the try-except at all.
> >
> Why? What's the alternative?
>
> > Try inserting something like "1/0" into doLongCalculation and see what
> > happens.
> >
> I don't understand your "1/0" suggestion. Can you elaborate a bit?
>
> Thanks.
>
> --
> Pedro
>
> > -Andrew.
> >
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From psanchez at nortel.com  Fri Oct 28 17:40:21 2005
From: psanchez at nortel.com (Pedro Sanchez)
Date: Fri, 28 Oct 2005 17:40:21 -0400
Subject: [Twisted-Python] How to force synchronous behavior
Message-ID: <1130535622.1711.158.camel@pcard0ze.ca.nortel.com>

Hello,

I want to encapsulate deferreds into a function that looks like
synchronous when invoked. Something like this:


def mySyncFunc()
   x = 0
   def done(data):
      global x
      x = data

   d = someCalculation()
   d.addCallback(done)
   <something here to hold until "done" is really done>
   return x

print mySyncFunc()


someCalculation() returns a deferred (for instance to accesses a DB).
So, how can I write mySyncFunc() so that at the end I print the result
of someCalculation() and not just 0? 

Thanks,

-- 
Pedro







From glyph at divmod.com  Fri Oct 28 22:38:54 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Fri, 28 Oct 2005 22:38:54 -0400
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <1130535622.1711.158.camel@pcard0ze.ca.nortel.com>
Message-ID: <20051029023854.10365.1134850715.divmod.quotient.1508@ohm>



On Fri, 28 Oct 2005 17:40:21 -0400, Pedro Sanchez <psanchez at nortel.com> wrote:

>I want to encapsulate deferreds into a function that looks like
>synchronous when invoked.

This is a bad idea.  Don't do it.  If you do somehow manage it, the results will be incredibly buggy and almost no-one will care to help you fix it, because people who know Twisted well don't do things this way.

For more information, read this: http://www.livejournal.com/users/glyf/40037.html



From exarkun at divmod.com  Fri Oct 28 23:26:22 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 28 Oct 2005 23:26:22 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r14952 - Impelement
 spawnProcess for IOCP reactor. Resolves issue1008.
In-Reply-To: <E1EVXEv-00015O-00@wolfwood>
Message-ID: <20051029032622.10365.771357096.divmod.quotient.1520@ohm>

On Fri, 28 Oct 2005 10:38:02 -0600, Justin Johnson <justinj at wolfwood.twistedmatrix.com> wrote:
>Author: justinj
>Date: Fri Oct 28 10:38:01 2005
>New Revision: 14952
>
>Added:
>   trunk/twisted/internet/iocpreactor/process.py
>      - copied unchanged from r14928, branches/win32-process/twisted/internet/iocpreactor/process.py
>   trunk/twisted/internet/iocpreactor/process_waiter.py
>      - copied unchanged from r14928, branches/win32-process/twisted/internet/iocpreactor/process_waiter.py
>Modified:
>   trunk/twisted/internet/iocpreactor/ops.py
>   trunk/twisted/internet/iocpreactor/proactor.py
>   trunk/twisted/test/process_tester.py
>   trunk/twisted/test/test_process.py
>   trunk/twisted/topfiles/INSTALL
>Log:
>Impelement spawnProcess for IOCP reactor.  Resolves issue1008.
>

While I am excited this feature is so close, it seems like it isn't quite there yet.  Buildbot is now reporting only 442 tests run by the IOCP builder on Win32, and a really nasty looking traceback afterwards.

Could we revert this merge?

Jean-Paul



From andrew-twisted at puzzling.org  Sat Oct 29 09:06:47 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sat, 29 Oct 2005 23:06:47 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] r14952 - Impelement
	spawnProcess for IOCP reactor. Resolves issue1008.
In-Reply-To: <20051029032622.10365.771357096.divmod.quotient.1520@ohm>
References: <E1EVXEv-00015O-00@wolfwood>
	<20051029032622.10365.771357096.divmod.quotient.1520@ohm>
Message-ID: <20051029130646.GA4823@trogdor.home.puzzling.org>

On Fri, Oct 28, 2005 at 11:26:22PM -0400, Jean-Paul Calderone wrote:
> On Fri, 28 Oct 2005 10:38:02 -0600, Justin Johnson 
> <justinj at wolfwood.twistedmatrix.com> wrote:
[...]
> >Log:
> >Impelement spawnProcess for IOCP reactor.  Resolves issue1008.
> >
> 
> While I am excited this feature is so close, it seems like it isn't quite 
> there yet.  Buildbot is now reporting only 442 tests run by the IOCP 
> builder on Win32, and a really nasty looking traceback afterwards.
> 
> Could we revert this merge?

The bug you notice existed before that merge too.  Jonathan helped me
diagnose it: see http://twistedmatrix.com/bugs/issue1294.  It appears trial
is calling reactor.iterate(0) during cleanup, and not expecting that it
could raise an exception.  Making iocp's doIteration swallow and log that
error, like the other reactors do, will probably fix this.  Making trial
deal with that error better (as apparently is not too hard to do with one of
the trial branches) would also fix it.

-Andrew.




From Marcin.Kasperski at softax.com.pl  Sat Oct 29 12:02:25 2005
From: Marcin.Kasperski at softax.com.pl (Marcin Kasperski)
Date: Sat, 29 Oct 2005 18:02:25 +0200
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <20051029023854.10365.1134850715.divmod.quotient.1508@ohm>
References: <20051029023854.10365.1134850715.divmod.quotient.1508@ohm>
Message-ID: <43639D11.1020905@softax.com.pl>


>> I want to encapsulate deferreds into a function that looks like
>> synchronous when invoked.
>
>
> This is a bad idea.  Don't do it.

Depends on the purpose...

There is deferredResult function somewhere in trial (twisted testing) 
package,  deferredResult(somedeferred)  just waits  for this deferred -  
yielding control to the reactor  repeatably. This is probably what 
original poster looks for.




From itamar at itamarst.org  Sat Oct 29 12:18:17 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sat, 29 Oct 2005 12:18:17 -0400
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <43639D11.1020905@softax.com.pl>
References: <20051029023854.10365.1134850715.divmod.quotient.1508@ohm>
	<43639D11.1020905@softax.com.pl>
Message-ID: <1130602697.8634.1.camel@localhost.localdomain>

On Sat, 2005-10-29 at 18:02 +0200, Marcin Kasperski wrote:

> There is deferredResult function somewhere in trial (twisted testing) 
> package,  deferredResult(somedeferred)  just waits  for this deferred -  
> yielding control to the reactor  repeatably. This is probably what 
> original poster looks for.

Do not use this function. If you do, we will just point and laugh when
your code breaks :)

However, deferredGenerator in twisted.internet.defer lets you write code
that *looks* synchronous.




From exarkun at divmod.com  Sat Oct 29 12:50:07 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sat, 29 Oct 2005 12:50:07 -0400
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <43639D11.1020905@softax.com.pl>
Message-ID: <20051029165007.10365.493202614.divmod.quotient.1687@ohm>

On Sat, 29 Oct 2005 18:02:25 +0200, Marcin Kasperski <marcin.kasperski at softax.com.pl> wrote:
>
>>>I want to encapsulate deferreds into a function that looks like
>>>synchronous when invoked.
>>
>>
>>This is a bad idea.  Don't do it.
>
>Depends on the purpose...
>
>There is deferredResult function somewhere in trial (twisted testing) 
>package,  deferredResult(somedeferred)  just waits  for this deferred - 
>yielding control to the reactor  repeatably. This is probably what original 
>poster looks for.
>

Because there seems to be so much confusion on this point,
let me re-iterate Itamar's response:

deferredResult is *broken*.  It does not work now.  It never
worked in the past.  If you use it, your program will suck and
die and you will be sad and the only advise you will get
to fix it will be to stop using deferredResult, which will
probably mean rewriting a significant portion of your program,
since you cannot write asynchronous programs synchronously and
expect them to work.

This is not a conditional point.  It does not depend on
anything.  It is a simple, unavoidable fact.  Disregard it at
your own certain peril.

Jean-Paul



From slamb at slamb.org  Sat Oct 29 13:41:45 2005
From: slamb at slamb.org (Scott Lamb)
Date: Sat, 29 Oct 2005 10:41:45 -0700
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <20051029165007.10365.493202614.divmod.quotient.1687@ohm>
References: <20051029165007.10365.493202614.divmod.quotient.1687@ohm>
Message-ID: <19AEC798-AF27-479F-8D10-F2037A73D347@slamb.org>


On 29 Oct 2005, at 09:50, Jean-Paul Calderone wrote:
>> There is deferredResult function somewhere in trial (twisted  
>> testing) package,  deferredResult(somedeferred)  just waits  for  
>> this deferred - yielding control to the reactor  repeatably. This  
>> is probably what original poster looks for.
>
> Because there seems to be so much confusion on this point,
> let me re-iterate Itamar's response:
>
> deferredResult is *broken*.  It does not work now.  It never
> worked in the past.  If you use it, your program will suck and
> die and you will be sad and the only advise you will get
> to fix it will be to stop using deferredResult, which will
> probably mean rewriting a significant portion of your program,
> since you cannot write asynchronous programs synchronously and
> expect them to work.
>
> This is not a conditional point.  It does not depend on
> anything.  It is a simple, unavoidable fact.  Disregard it at
> your own certain peril.

Why does twisted contain functions which are never to be used? If it  
can't be fixed, why not remove it?

-- 
Scott Lamb <http://www.slamb.org/>




From exarkun at divmod.com  Sat Oct 29 14:58:13 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sat, 29 Oct 2005 14:58:13 -0400
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <19AEC798-AF27-479F-8D10-F2037A73D347@slamb.org>
Message-ID: <20051029185813.10365.1846994552.divmod.quotient.1717@ohm>

On Sat, 29 Oct 2005 10:41:45 -0700, Scott Lamb <slamb at slamb.org> wrote:
>
>On 29 Oct 2005, at 09:50, Jean-Paul Calderone wrote:
>>>There is deferredResult function somewhere in trial (twisted  testing) 
>>>package,  deferredResult(somedeferred)  just waits  for  this deferred - 
>>>yielding control to the reactor  repeatably. This  is probably what 
>>>original poster looks for.
>>
>>Because there seems to be so much confusion on this point,
>>let me re-iterate Itamar's response:
>>
>>deferredResult is *broken*.  It does not work now.  It never
>>worked in the past.  If you use it, your program will suck and
>>die and you will be sad and the only advise you will get
>>to fix it will be to stop using deferredResult, which will
>>probably mean rewriting a significant portion of your program,
>>since you cannot write asynchronous programs synchronously and
>>expect them to work.
>>
>>This is not a conditional point.  It does not depend on
>>anything.  It is a simple, unavoidable fact.  Disregard it at
>>your own certain peril.
>
>Why does twisted contain functions which are never to be used? If it  can't 
>be fixed, why not remove it?

It will be removed shortly.  deferredResult and deferredError have been deprecated since r14685 (Gee, I wish I knew what release that corresponded to - if I were to guess, I'd say 2.1), and will probably be removed in one of the next two releases.  A similarly broken function, wait(), will be deprecated in the next release and removed sometime after that.

Why were they added in the first place?  It was mistakenly thought that they might be able to work.

Jp



From glyph at divmod.com  Sat Oct 29 15:59:26 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Sat, 29 Oct 2005 15:59:26 -0400
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <43639D11.1020905@softax.com.pl>
Message-ID: <20051029195926.10365.2129384939.divmod.quotient.1730@ohm>



On Sat, 29 Oct 2005 18:02:25 +0200, Marcin Kasperski <marcin.kasperski at softax.com.pl> wrote:

>>>I want to encapsulate deferreds into a function that looks like
>>>synchronous when invoked.

>>This is a bad idea.  Don't do it.

>Depends on the purpose...

Nope.  Unequivocally, a bad idea.  The function you mentioned (whose name I will not repeat, even to quote) is SEVERELY deprecated.  Don't use it.

The poster sounds new to Twisted, which means that they have at least 2 years worth of regular asynchronous programming ahead of them before they can make effective and judicious use of shortcuts like deferredGenerator.



From glyph at divmod.com  Sat Oct 29 16:01:51 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Sat, 29 Oct 2005 16:01:51 -0400
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <20051029185813.10365.1846994552.divmod.quotient.1717@ohm>
Message-ID: <20051029200151.10365.622105616.divmod.quotient.1732@ohm>



On Sat, 29 Oct 2005 14:58:13 -0400, Jean-Paul Calderone <exarkun at divmod.com> wrote:
>On Sat, 29 Oct 2005 10:41:45 -0700, Scott Lamb <slamb at slamb.org> wrote:

>>Why does twisted contain functions which are never to be used? If it  can't 
>>be fixed, why not remove it?

>Why were they added in the first place?  It was mistakenly thought that they 
>might be able to work.

And why not remove it?  The test cases still depend on this functionality (and are fragile and break non-deterministically in part because of it) and it is a significant effort to fix them all.  This effort is underway.




From clive at darkarts.co.za  Sat Oct 29 16:12:26 2005
From: clive at darkarts.co.za (Clive Crous)
Date: Sat, 29 Oct 2005 22:12:26 +0200 (SAST)
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <43639D11.1020905@softax.com.pl>
References: <20051029023854.10365.1134850715.divmod.quotient.1508@ohm>
	<43639D11.1020905@softax.com.pl>
Message-ID: <.82.103.130.3.1130616746.squirrel@webmail.darkarts.co.za>


#
#>> I want to encapsulate deferreds into a function that looks like
#>> synchronous when invoked.
#>
#>


I use a similar mechanism in my database wrapper module.

here is an example of it in use:
http://www.darkarts.co.za/repository/tada/doc/examples/taoBasicUsage.py
(online syntax highlighted version of the same:
http://www.rafb.net/paste/results/TmpcYr74.html)

The code is part of my tada project at :
http://www.darkarts.co.za/projects/tada/

I agree, callbacks are ugly, python 2.5 will be great :D


-- 
Clive Crous
http://www.darkarts.co.za/





From slamb at slamb.org  Sat Oct 29 17:25:38 2005
From: slamb at slamb.org (Scott Lamb)
Date: Sat, 29 Oct 2005 14:25:38 -0700
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <.82.103.130.3.1130616746.squirrel@webmail.darkarts.co.za>
References: <20051029023854.10365.1134850715.divmod.quotient.1508@ohm>	<43639D11.1020905@softax.com.pl>
	<.82.103.130.3.1130616746.squirrel@webmail.darkarts.co.za>
Message-ID: <4363E8D2.8050304@slamb.org>

Clive Crous wrote:
> I agree, callbacks are ugly, python 2.5 will be great :D
>   
What will make Python 2.5 better? I'm looking over PEPs now. PEP 342 
looks amazing. I don't see a "Python-Version: 2.5" there, though. Is it 
expected to make it into 2.5? When might it actually get used in 
Twisted, given its policy of supporting old Python version? (I saw the 
recent debate on dropping Python 2.2 support.)




From jml at mumak.net  Sat Oct 29 17:29:22 2005
From: jml at mumak.net (Jonathan Lange)
Date: Sun, 30 Oct 2005 08:29:22 +1100
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <4363E8D2.8050304@slamb.org>
References: <20051029023854.10365.1134850715.divmod.quotient.1508@ohm>
	<43639D11.1020905@softax.com.pl>
	<.82.103.130.3.1130616746.squirrel@webmail.darkarts.co.za>
	<4363E8D2.8050304@slamb.org>
Message-ID: <d06a5cd30510291429i10347fa5h@mail.gmail.com>

On 30/10/05, Scott Lamb <slamb at slamb.org> wrote:
> Clive Crous wrote:
> > I agree, callbacks are ugly, python 2.5 will be great :D
> >
> What will make Python 2.5 better? I'm looking over PEPs now. PEP 342
> looks amazing. I don't see a "Python-Version: 2.5" there, though. Is it
> expected to make it into 2.5? When might it actually get used in
> Twisted, given its policy of supporting old Python version? (I saw the
> recent debate on dropping Python 2.2 support.)
>

*mutters something about not seeing the conclusion of said debate*



From ms at cerenity.org  Sat Oct 29 17:33:30 2005
From: ms at cerenity.org (Michael)
Date: Sat, 29 Oct 2005 22:33:30 +0100
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <20051029195926.10365.2129384939.divmod.quotient.1730@ohm>
References: <20051029195926.10365.2129384939.divmod.quotient.1730@ohm>
Message-ID: <200510292233.30703.ms@cerenity.org>

On Saturday 29 October 2005 20:59, glyph at divmod.com wrote:
> On Sat, 29 Oct 2005 18:02:25 +0200, Marcin Kasperski wrote: 
> >>>I want to encapsulate deferreds into a function that looks like
> >>>synchronous when invoked.
> >>
> >>This is a bad idea.  Don't do it.
> >
> >Depends on the purpose...
>
> Nope.  Unequivocally, a bad idea.  The function you mentioned (whose name I
> will not repeat, even to quote) is SEVERELY deprecated.  Don't use it.
>
> The poster sounds new to Twisted, which means that they have at least 2
> years worth of regular asynchronous programming ahead of them before they
> can make effective and judicious use of shortcuts like deferredGenerator.

Out of interest, what's your opinion on what we're doing with communicating
generators in the project beginning with a "K" (*) ? As far as I'm concerned
we're pretty much doing the same sorts of things as twisted, just written
very differently. However, there are similarities in the way we write things
to some of the ideas raised in this thread, and if you think we're doing
something dumb (as opposed to ideas that could be ripped out at somepoint
*IF* they prove useful), I'd be interested to hear (one of these days I'll 
learn to speak English properly as well).

   (*) Some people think "K" is competition, rather than trying out an
       alternate approach so I'll not mention it by the full name - a misspelt
       shrubbery if the allusion doesn't make sense. :)

I suppose one risk point of our approach is that by trying to make it easier
to work with we risk people thinking concurrency is naturally is easy (which
is potentially quite a dangerous meme, since software concurrency isn't
naturally easy). BTW, FWIW, I read the blog post you pointed at earlier in
the thread and agree with it).

I'll say one thing though, hopefully the original poster realises how much 
they have to do to make their code safe when they're faking synchronous 
behaviour and faking a single process look. If they don't then as everyone 
has said, they're setting themselves up for a world of pain.

Best Regards,


Michael.



From clive at darkarts.co.za  Sat Oct 29 17:40:47 2005
From: clive at darkarts.co.za (Clive Crous)
Date: Sat, 29 Oct 2005 23:40:47 +0200 (SAST)
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <4363E8D2.8050304@slamb.org>
References: <20051029023854.10365.1134850715.divmod.quotient.1508@ohm>	<43639D11.1020905@softax.com.pl>
	<.82.103.130.3.1130616746.squirrel@webmail.darkarts.co.za>
	<4363E8D2.8050304@slamb.org>
Message-ID: <.82.103.130.3.1130622047.squirrel@webmail.darkarts.co.za>


# Clive Crous wrote:
#> I agree, callbacks are ugly, python 2.5 will be great :D
#>
# What will make Python 2.5 better? I'm looking over PEPs now. PEP 342
# looks amazing. I don't see a "Python-Version: 2.5" there, though. Is it
# expected to make it into 2.5? When might it actually get used in
# Twisted, given its policy of supporting old Python version? (I saw the
# recent debate on dropping Python 2.2 support.)

My appologies, i did in fact mean pep342, it somehow got into my head as
'2.5 fact'. Whether it makes it into twisted or not is irrelivant, i will
use it nonetheless ;)

-- 
Clive Crous
http://www.darkarts.co.za/





From moe at divmod.com  Sat Oct 29 17:47:02 2005
From: moe at divmod.com (Moe Aboulkheir)
Date: Sat, 29 Oct 2005 23:47:02 +0200
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <.82.103.130.3.1130616746.squirrel@webmail.darkarts.co.za>
Message-ID: <20051029214702.10365.193620676.divmod.quotient.1754@ohm>

On Sat, 29 Oct 2005 22:12:26 +0200 (SAST), Clive Crous <clive at darkarts.co.za> wrote:
>
>#
>#>> I want to encapsulate deferreds into a function that looks like
>#>> synchronous when invoked.
>#>
>#>
>
>
>I use a similar mechanism in my database wrapper module.
>
>here is an example of it in use:
>http://www.darkarts.co.za/repository/tada/doc/examples/taoBasicUsage.py

the OP wanted a function that looks synchronous when *invoked* - the example you gave doesn't look synchronous to the caller at all - the functions decorated with "genAside" return deferreds.  it's easy to pretend that they don't, if you decorate all of your functions similarly, but at some point some plain, upstream  function is going to have to deal directly with a deferred (this is not the case with the example because it is a script, and nothing actually depends on the result of doit()).  also, if any operation inside the doit() function raises an exception, the reactor will not stop.  something like this would probably be better:

doit().addErrback(log.err).addCallback(lambda ignore: reactor.stop())

i'd like to reiterate glyph's advice that suggesting generator based short-cuts to twisted beginners is not a good idea.  it's *very* easy to use these things without understanding what is actually going on under the hood, and massive confusion frequently arises as soon as something crops up that doesn't fit into that programming style. 

--
Moe Aboulkheir



From clive at darkarts.co.za  Sat Oct 29 18:11:07 2005
From: clive at darkarts.co.za (Clive Crous)
Date: Sun, 30 Oct 2005 00:11:07 +0200 (SAST)
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <20051029214702.10365.193620676.divmod.quotient.1754@ohm>
References: <.82.103.130.3.1130616746.squirrel@webmail.darkarts.co.za>
	<20051029214702.10365.193620676.divmod.quotient.1754@ohm>
Message-ID: <.82.103.130.3.1130623867.squirrel@webmail.darkarts.co.za>


# On Sat, 29 Oct 2005 22:12:26 +0200 (SAST), Clive Crous
# <clive at darkarts.co.za> wrote:
#>
#>#
#>#>> I want to encapsulate deferreds into a function that looks like
#>#>> synchronous when invoked.
#>#>
#>#>
#>
#>
#>I use a similar mechanism in my database wrapper module.
#>
#>here is an example of it in use:
#>http://www.darkarts.co.za/repository/tada/doc/examples/taoBasicUsage.py
#
# the OP wanted a function that looks synchronous when *invoked* - the
# example you gave doesn't look synchronous to the caller at all - the

The origional question was:
""" So, how can I write mySyncFunc() so that at the end I print the result
of someCalculation() and not just 0? """

My example and proposed solution does that. And as such is usable by him.

# functions decorated with "genAside" return deferreds.  it's easy to
# pretend that they don't, if you decorate all of your functions similarly,
# but at some point some plain, upstream  function is going to have to deal
# directly with a deferred (this is not the case with the example because it
# is a script, and nothing actually depends on the result of doit()).  also,
# if any operation inside the doit() function raises an exception, the
# reactor will not stop.  something like this would probably be better:
#
# doit().addErrback(log.err).addCallback(lambda ignore: reactor.stop())
#

it is an example usage, not a real world implementation, of course if
something fails it will die.

# i'd like to reiterate glyph's advice that suggesting generator based
# short-cuts to twisted beginners is not a good idea.  it's *very* easy to
# use these things without understanding what is actually going on under the
# hood, and massive confusion frequently arises as soon as something crops
# up that doesn't fit into that programming style.
#

Why do i hit this wall constantly when discussing twisted usage with
twisted users or developers mostly on freenode's #twisted admitedly:
Telling someone NOT to do something is not answering a question it is
avoiding it.

I pasted the url for the full source so that he could "look under the
hood" if he feels uncomfortable with it's mechanism he needent use it.  By
your reasoning surely he should go through the entire twisted codebase
aswell and know exactly what a deffered is doing "under the hood" and how
twisted does it's asyncronousity before using it ?

-- 
Clive Crous
http://www.darkarts.co.za/





From moe at divmod.com  Sat Oct 29 19:33:16 2005
From: moe at divmod.com (Moe Aboulkheir)
Date: Sun, 30 Oct 2005 01:33:16 +0200
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <.82.103.130.3.1130623867.squirrel@webmail.darkarts.co.za>
Message-ID: <20051029233316.10365.77217872.divmod.quotient.1778@ohm>



On Sun, 30 Oct 2005 00:11:07 +0200 (SAST), Clive Crous <clive at darkarts.co.za> wrote:

>The origional question was:
>""" So, how can I write mySyncFunc() so that at the end I print the result
>of someCalculation() and not just 0? """
>
>My example and proposed solution does that. And as such is usable by him.

no, it really doesn't.  here is the code snippet given by the original poster:

def mySyncFunc()
   x = 0
   def done(data):
      global x
      x = data

   d = someCalculation()
   d.addCallback(done)
   <something here to hold until "done" is really done>
   return x

the desired functionality is "at the end i print the result of someCalculation() and not just 0".  this could obviously be done by changing the first line of done() to "print data".  but the "return x" betrays the intention that the function would ideally return the value of "x" (returning the _value_ of "x" is worlds away from returning a deferred that fires with the value of "x").  no defgen type solution is going to make this possible

>Why do i hit this wall constantly when discussing twisted usage with
>twisted users or developers mostly on freenode's #twisted admitedly:
>Telling someone NOT to do something is not answering a question it is
>avoiding it.

the point here is that this particular question does not have a satisfying answer.  it has been beaten to death recently that you cannot magically expose a synchronous interface to asynchronous code.  so, in summary, the question was answered, by several people in this thread, and the answer is "you cannot do that and expect your code to work reliably".  is that not a valid answer?

>I pasted the url for the full source so that he could "look under the
>hood" if he feels uncomfortable with it's mechanism he needent use it.  By
>your reasoning surely he should go through the entire twisted codebase
>aswell and know exactly what a deffered is doing "under the hood" and how
>twisted does it's asyncronousity before using it ?

ideally yes.  somebody unfamiliar with deferreds is going to be in no position to determine whether or not they are comfortable with a generator based mechanism for handling them.  people already associate unfair amounts of magic with twisted, and i dont think suggesting such abstract interfaces to beginners is an effective way to mitigate this.

--
Moe Aboulkheir



From radeex at gmail.com  Sat Oct 29 22:10:19 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Sun, 30 Oct 2005 13:10:19 +1100
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <.82.103.130.3.1130622047.squirrel@webmail.darkarts.co.za>
References: <20051029023854.10365.1134850715.divmod.quotient.1508@ohm>
	<43639D11.1020905@softax.com.pl>
	<.82.103.130.3.1130616746.squirrel@webmail.darkarts.co.za>
	<4363E8D2.8050304@slamb.org>
	<.82.103.130.3.1130622047.squirrel@webmail.darkarts.co.za>
Message-ID: <60ed19d40510291910x1991db78y2ab4d58f9a5594e7@mail.gmail.com>

On 10/30/05, Clive Crous <clive at darkarts.co.za> wrote:
>
> # Clive Crous wrote:
> #> I agree, callbacks are ugly, python 2.5 will be great :D
> #>
> # What will make Python 2.5 better? I'm looking over PEPs now. PEP 342
> # looks amazing. I don't see a "Python-Version: 2.5" there, though. Is it
> # expected to make it into 2.5? When might it actually get used in
> # Twisted, given its policy of supporting old Python version? (I saw the
> # recent debate on dropping Python 2.2 support.)
>
> My appologies, i did in fact mean pep342, it somehow got into my head as
> '2.5 fact'. Whether it makes it into twisted or not is irrelivant, i will
> use it nonetheless ;)

Well, it _is_ currently in Python's trunk, so unless it's reverted
before 2.5 is released, it'll probably be in 2.5.

--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+



From grimmtooth at gmail.com  Sun Oct 30 00:19:48 2005
From: grimmtooth at gmail.com (Jeff Grimmett)
Date: Sun, 30 Oct 2005 00:19:48 -0400
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <20051029195926.10365.2129384939.divmod.quotient.1730@ohm>
References: <43639D11.1020905@softax.com.pl>
	<20051029195926.10365.2129384939.divmod.quotient.1730@ohm>
Message-ID: <8f4623fb0510292119nfd4cf2cs336f7003271856ff@mail.gmail.com>

On 10/29/05, glyph at divmod.com <glyph at divmod.com> wrote:

> The poster sounds new to Twisted, which means that they have at least 2
> years worth of regular asynchronous programming ahead of them before they
> can make effective and judicious use of shortcuts like deferredGenerator.


Oh, cool - three more months and I gain enlightment! I can't wait! ;-)

--
"Things fall apart. The Center cannot hold."
- Life as a QA geek, in a nutshell.

Best,

Jeff
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20051030/e8ce467a/attachment.htm 

From glyph at divmod.com  Sun Oct 30 01:31:42 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Sun, 30 Oct 2005 01:31:42 -0500
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <200510292233.30703.ms@cerenity.org>
Message-ID: <20051030063142.10365.1949282381.divmod.quotient.1870@ohm>



On Sat, 29 Oct 2005 22:33:30 +0100, Michael <ms at cerenity.org> wrote:

>Out of interest, what's your opinion on what we're doing with communicating
>generators in the project beginning with a "K" (*) ? As far as I'm concerned
>we're pretty much doing the same sorts of things as twisted, just written
>very differently. However, there are similarities in the way we write things
>to some of the ideas raised in this thread, and if you think we're doing
>something dumb (as opposed to ideas that could be ripped out at somepoint
>*IF* they prove useful), I'd be interested to hear (one of these days I'll
>learn to speak English properly as well).

It's not so much that "K" is doing something dumb (for reference: we are not talking about the successor to J, which is itself a successor to APL).  With a project like "K", there would be as much focus on explaining correct usage of generators as there is in Twisted focusing on correct usage of Deferreds.  It would be hard to write a program using "K" and not understand the ramifications of what you're doing.

>I suppose one risk point of our approach is that by trying to make it easier
>to work with we risk people thinking concurrency is naturally is easy (which
>is potentially quite a dangerous meme, since software concurrency isn't
>naturally easy). BTW, FWIW, I read the blog post you pointed at earlier in
>the thread and agree with it).

I looked at "K".  Reading code in it was powerfully weird - and this is coming from the author of Twisted ;-). It was enough like Erlang that it would only make things easy for experts, so I don't think that it would lead to this problem - on the other hand, I haven't seen how large communities react to it.

>I'll say one thing though, hopefully the original poster realises how much
>they have to do to make their code safe when they're faking synchronous
>behaviour and faking a single process look. If they don't then as everyone
>has said, they're setting themselves up for a world of pain.

I have a lot of experience dealing with people that ask questions in the form that the poster did.  As a rule they don't have any idea how hard solving concurrency problems is, and have been lead to believe (by Java or whatever) that concurrency is easy, just a matter of running 2 or more "simple" synchronous (-looking) programs at a time.  While I don't know the OP personally, I am willing to risk their taking offense, so that I can continue to drive home the point to hordes of fledgeling developers out there that seem to desperately want to believe that massively concurrent programming is easy.



From glyph at divmod.com  Sun Oct 30 02:19:31 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Sun, 30 Oct 2005 02:19:31 -0500
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <.82.103.130.3.1130623867.squirrel@webmail.darkarts.co.za>
Message-ID: <20051030071931.10365.13030611.divmod.quotient.1881@ohm>

On Sun, 30 Oct 2005 00:11:07 +0200 (SAST), Clive Crous <clive at darkarts.co.za> wrote:

>Why do i hit this wall constantly when discussing twisted usage with
>twisted users or developers mostly on freenode's #twisted admitedly:
>Telling someone NOT to do something is not answering a question it is
>avoiding it.

You are correct.  I do not disagree with this fact, and it does not change my opinion of the behavior involved.  Here is the ugly truth of the non-answers to such questions:

I do not care about most of the posters to this list.  I am happy that they use Twisted, and even more happy if they are pleased by it, but ultimately I am really just trying to improve the world I live in, and that means the average quality of available Python code.  That means I am only going to answer questions which I believe will contribute positively to the state of affairs as it regards code quality in general, and Python code quality specifically.

These people who people whose questions are answered (or not answered) on this list or on IRC will go and write applications or libraries based on the answers they receive.  I may be stuck maintaining or using that code at some point.

Now, maybe if I know, but don't tell them how to do some ridiculous thing they're trying to do, they'll miss their deadline at work or they won't turn on their homework assignment on time and I could have prevented that.  They will be unhappy.  Making them happy isn't my purpose here, so I don't care.  Maybe they'll abandon their Python project and do it in Ruby instead because the Python community is so hostile.

Many people think that this loss of contributing labor is a great tragedy for an open-source community, but IMHO it is really the best possible consequence.  All the people who don't understand programming will end up in the more-polite Rails or PHP or Django or TurboGears communities and generate huge piles of code that don't work.  Then all the guys who know what they're doing will stick around here and work on Twisted stuff.  In the sense that we compete with those projects, this is great!  It's like sabotage-by-proxy.  When those projects are a smouldering ruin of inconsistent style and half-baked, buggy, insecure code, people who want a functional product will come ask those of us with Twisted expertise.

A more realistic consequence, however, is that programmers new to Twisted will adopt a more consistent style, and avoid fighting the framework, and concentrate on solving their actual problems.  Some will still go away, yes, but generally there is some reason they came to Twisted in the first place and it remains valid even if we won't make it easy to do things we collectively regard as bad practice.

I have adopted this stance not merely because I am abraisive asshole, but based on long experience with IRC and with teaching programmers how to use things.  There are several projects that were developed early on with Twisted that were utter disasters because I politely and pateiently answered all the authors' questions about how to make Deferreds appear to block, how to call reactor functions from threads, and how to invoke Twisted from C code, rather than stopping and saying "hey, what are you *really* trying to do?".  (No, I will not name these projects.  I do have *some* manners.)

I can only assume that the other Twisted devs you've had problems with have gotten this habit from similar experiences, but they may have their own reasons.

>I pasted the url for the full source so that he could "look under the
>hood" if he feels uncomfortable with it's mechanism he needent use it.  By
>your reasoning surely he should go through the entire twisted codebase
>aswell and know exactly what a deffered is doing "under the hood" and how
>twisted does it's asyncronousity before using it ?

It's not so much whether the OP is comfortable with your explanation or not.  If I were confident that all programmers would go and investigate the solution first, I would not care to make a post such as this.  It's whether, upon not understanding, the OP will encourage others to program using bad style with a tool that he is comfortable with but but does not *understand*.  It is quite possible that the OP understands your solution perfectly well, in which case this conversation is useless to him and he can ignore it, but still socially useful in that it will appear in google searches when other, less experienced programmers have the bright idea that they can make Deferreds magically go away somehow.

(Apologies to the OP: I really have no idea about you at all.  I am really speaking of a hypothetical average programmer.)



From frank at chagford.com  Sun Oct 30 02:50:31 2005
From: frank at chagford.com (Frank Millman)
Date: Sun, 30 Oct 2005 09:50:31 +0200
Subject: [Twisted-Python] Newbie question - simpleclient.py crashes
Message-ID: <VPOP32.2.0a.20051030095112.625.e.1.a40c1f81@chagford.com>

Hi all,

I have just started looking at Twisted. I thought I would start by working
my way through the examples. The first one I tried crashed on me! I can
patch it to get it to work, but I would rather learn the exact reason for
the crash, and the correct way to fix it.

I am trying to run simpleserver.py and simpleclient.py, using RH9, Python
2.4.1, and Twisted 2.1.0. I start simpleserver from tty1, and then from tty2
I run simpleclient. This is the result (shortened) -

Server said: hello, world!
connection lost
Connection lost - goodbye!
Traceback:
  [...]
  File '.../twisted/internet/base.py', line 398, in _continueSystemEvent
    for callList in sysEvtTriggers[1], sysEvtTriggers[2]:
  exceptions.TypeError: unsubscriptable object

AFAICT, this is what is happening.

simpleclient calls reactor.stop() from a number of places, but for this
exercise it calls it twice - once from EchoClient.connectionLost(), once
from EchoFactory.clientConnectionLost(). The first time,
base._continueSystemEvent() is called with eventType "shutdown". It handles
the event, then deletes "shutdown" from self._eventTriggers. When it is
called the second time, also with eventType "shutdown", it cannot find the
event type as it has been deleted, so it crashes with the above traceback.

I changed simpleclient.EchoClient.connectionLost() so that it does not call
reactor.stop(), and the program runs without errors. Is this the correct
solution? Why do the Protocol and the Factory both have a connectionLost
method? Which one should call reactor.stop()?

Thanks.

Frank Millman




From glyph at divmod.com  Sun Oct 30 03:21:34 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Sun, 30 Oct 2005 03:21:34 -0500
Subject: [Twisted-Python] Newbie question - simpleclient.py crashes
In-Reply-To: <VPOP32.2.0a.20051030095112.625.e.1.a40c1f81@chagford.com>
Message-ID: <20051030082134.10365.504973795.divmod.quotient.1894@ohm>



On Sun, 30 Oct 2005 09:50:31 +0200, Frank Millman <frank at chagford.com> wrote:
>Hi all,

Hi Frank!

>I have just started looking at Twisted. I thought I would start by working
>my way through the examples. The first one I tried crashed on me! I can
>patch it to get it to work, but I would rather learn the exact reason for
>the crash, and the correct way to fix it.

I believe you have spotted a rather serious bug.  Can you add this to the tracker <http://www.twistedmatrix.com/bugs> for further discussion and fixing?

Thanks!



From lists-twistedmatrix at silverwraith.com  Sun Oct 30 03:55:08 2005
From: lists-twistedmatrix at silverwraith.com (Avleen Vig)
Date: Sun, 30 Oct 2005 01:55:08 -0700
Subject: [Twisted-Python] twisted words irc patch for usernames
Message-ID: <20051030085508.GF55915@silverwraith.com>

Currently when twisted connects to an irc server, the username on the
USER connect line, is assumed to be the same as the nickname.

Below is a patch that lets the username be set manually the same way as
'password' is defined. If a username isn't specified, it defaults to
assuming self.username = nickname

I found this useful to connect to a server which required a specific
username as part of its authentication but I didn't want to / need to
run ident. I couldn't think of a good reason for not being able to set
the username if we can already set everything else :-)


Index: Twisted/twisted/words/protocols/irc.py
===================================================================
--- Twisted/twisted/words/protocols/irc.py      (revision 14959)
+++ Twisted/twisted/words/protocols/irc.py      (working copy)
@@ -535,6 +535,7 @@
     nickname = 'irc'
     password = None
     realname = None
+    username = None
     ### Responses to various CTCP queries.
 
     userinfo = None
@@ -895,7 +896,9 @@
         if self.password is not None:
             self.sendLine("PASS %s" % self.password)
         self.setNick(nickname)
-        self.sendLine("USER %s foo bar :%s" % (nickname, self.realname))
+        if self.username is None:
+            self.username = nickname
+        self.sendLine("USER %s foo bar :%s" % (self.username, self.realname))
 
     def setNick(self, nickname):
         self.nickname = nickname


-- 
Avleen Vig
Systems Administrator
Personal: www.silverwraith.com

"Wickedness is a myth invented by good people to account for the curious
 attractiveness of others."  - Oscar Wilde



From jml at mumak.net  Sun Oct 30 05:50:35 2005
From: jml at mumak.net (Jonathan Lange)
Date: Sun, 30 Oct 2005 21:50:35 +1100
Subject: [Twisted-Python] Trial and KeyboardInterrupt
Message-ID: <d06a5cd30510300250s2557a408w@mail.gmail.com>

Trial and KeyboardInterrupt have had a long and chequered history (see
http://twistedmatrix.com/bugs/issue628).  I'd like to try to solve the
problem once, and to never have it crop up again.

To try to do this, I need effective unit tests for KeyboardInterrupt. 
However, I've got no idea on how to do this.  Raising
KeyboardInterrupt isn't enough.

Please, someone, write (or tell me how to write) unit tests for
Control-C interrupting the Trial process.

Thanks,
jml



From ms at cerenity.org  Sun Oct 30 06:48:05 2005
From: ms at cerenity.org (Michael)
Date: Sun, 30 Oct 2005 11:48:05 +0000
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <20051030063142.10365.1949282381.divmod.quotient.1870@ohm>
References: <20051030063142.10365.1949282381.divmod.quotient.1870@ohm>
Message-ID: <200510301148.05405.ms@cerenity.org>

On Sunday 30 October 2005 06:31, glyph at divmod.com wrote:
> It's not so much that "K" is doing something dumb (for reference: we are
> not talking about the successor to J, which is itself a successor to APL).
> ?With a project like "K", there would be as much focus on explaining
> correct usage of generators as there is in Twisted focusing on correct
> usage of Deferreds. ?It would be hard to write a program using "K" and not
> understand the ramifications of what you're doing.

It does seem to be the case, yes. 

> I looked at "K". ?Reading code in it was powerfully weird - and this is
> coming from the author of Twisted ;-).

Great :-) Can I quote you on that? :-D

Seriously though, I did kinda expect that. I suspect the two different ways
of writing code will be easier to different sorts of people. Personally I find
the approach natural and normal. You can take any implication you like
from that ;-)

> It was enough like Erlang that it would only make things easy for experts, 
> so I don't think that it would lead to this problem - on the other hand, I
> haven't seen how large communities react to it.

Interesting viewpoint. KInda at odds with what we've seen so far, but then we 
haven't had a large community react to it yet, there's also the caveat above 
of it might be a mindset thing rather than skill level this, and mainly at 
the moment I don't think it's ready for a large community yet* - if one's 
appropriate (We're still in the process of finding the best way of writing 
systems using it).
   * We're not in a rush

FWIW, it's more inspired by things which /aren't/ Erlang. I've not written 
anything in Erlang :)

If it turns out though that you're right - only makes things easy for
experts - then the project's failed (which won't be a problem, that's
the point of research to try things and see what works/doesn't, just
means I have to try again). As a result I hope you're wrong (for
once :).

Thanks for the feedback!

Best Regards,


Michael.



From clive at darkarts.co.za  Sun Oct 30 17:02:47 2005
From: clive at darkarts.co.za (Clive Crous)
Date: Mon, 31 Oct 2005 00:02:47 +0200 (SAST)
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <20051030071931.10365.13030611.divmod.quotient.1881@ohm>
References: <.82.103.130.3.1130623867.squirrel@webmail.darkarts.co.za>
	<20051030071931.10365.13030611.divmod.quotient.1881@ohm>
Message-ID: <.82.103.130.3.1130709767.squirrel@webmail.darkarts.co.za>

#>Why do i hit this wall constantly when discussing twisted usage with
#>twisted users or developers mostly on freenode's #twisted admitedly:
#>Telling someone NOT to do something is not answering a question it is
#>avoiding it.
#
# You are correct.  I do not disagree with this fact, and it does not change
# my opinion of the behavior involved.  Here is the ugly truth of the
# non-answers to such questions:
#
# I do not care about most of the posters to this list.  I am happy that
# they use Twisted, and even more happy if they are pleased by it, but
# ultimately I am really just trying to improve the world I live in, and
# that means the average quality of available Python code.  That means I am
# only going to answer questions which I believe will contribute positively
# to the state of affairs as it regards code quality in general, and Python
# code quality specifically.
#
# These people who people whose questions are answered (or not answered) on
# this list or on IRC will go and write applications or libraries based on
# the answers they receive.  I may be stuck maintaining or using that code
# at some point.
#
# Now, maybe if I know, but don't tell them how to do some ridiculous thing
# they're trying to do, they'll miss their deadline at work or they won't
# turn on their homework assignment on time and I could have prevented that.
#  They will be unhappy.  Making them happy isn't my purpose here, so I
# don't care.  Maybe they'll abandon their Python project and do it in Ruby
# instead because the Python community is so hostile.
#
# Many people think that this loss of contributing labor is a great tragedy
# for an open-source community, but IMHO it is really the best possible
# consequence.  All the people who don't understand programming will end up
# in the more-polite Rails or PHP or Django or TurboGears communities and
# generate huge piles of code that don't work.  Then all the guys who know
# what they're doing will stick around here and work on Twisted stuff.  In
# the sense that we compete with those projects, this is great!  It's like
# sabotage-by-proxy.  When those projects are a smouldering ruin of
# inconsistent style and half-baked, buggy, insecure code, people who want a
# functional product will come ask those of us with Twisted expertise.
#
# A more realistic consequence, however, is that programmers new to Twisted
# will adopt a more consistent style, and avoid fighting the framework, and
# concentrate on solving their actual problems.  Some will still go away,
# yes, but generally there is some reason they came to Twisted in the first
# place and it remains valid even if we won't make it easy to do things we
# collectively regard as bad practice.
#
# I have adopted this stance not merely because I am abraisive asshole, but
# based on long experience with IRC and with teaching programmers how to use
# things.  There are several projects that were developed early on with
# Twisted that were utter disasters because I politely and pateiently
# answered all the authors' questions about how to make Deferreds appear to
# block, how to call reactor functions from threads, and how to invoke
# Twisted from C code, rather than stopping and saying "hey, what are you
# *really* trying to do?".  (No, I will not name these projects.  I do have
# *some* manners.)
#
# I can only assume that the other Twisted devs you've had problems with
# have gotten this habit from similar experiences, but they may have their
# own reasons.
#

I find it quite amusing, yet somewhat disturbing how you justify this
behaviour to yourselves.  I have worked on many projects in my life and
each of them was unique in it's specific requirements.  Let me give you
two of my current projects as brief examples:

The first, is for a client who would like a downloadable executable
available on his website.  The primary need, beside the obvious need
that it in fact work, is that the executable be as tiny as possible to
encourage potential clients in turn to download and use it.

The second project is a set of modules for internal use by the company
I now work for.  The primary focus, again besides the obvious need for
it to be functional, is that it be highly maintainable and easily
modified by the senior most programmer or the newest, week-old junior
developer.  Anybody must be able to look at the code, understand it
quickly and easily, and be able to modify parts as required.

If I employed the same style of programming in both of these projects I
would be a fool.  Some of the styles implemented to make a small
executable in any other circumstance would be considered incredibly bad
practice, yet there it is, working perfectly and being incredibly small
while doing so.  Meanwhile some of the code within the second example is
incredibly verbose and a seasoned coder would look at it and say "Why
for the love of python are you doing this the long way round?" ... once
again, it fulfills it's specification perfectly while doing it's job to
the satisfaction of all concerned.

When it comes to implementations of twisted, one must take into
account the context in which the program is being developed and the
specific use cases it requires.  No two implementations will ever be
the same, and no two implementations should ever use twisted in exactly
the same way.  To expect identical or even similar usage of a module in
every single instance is poor practice in itself.

If I come online, and ask: "How do i use A with B" and the response is
"Dont!", as in this thread, it shows a high level of arrogance, extreme
presumption and an incredible 'naivety to programming' by the person
giving that "answer".

There always will be people who have different needs to you.
Enforcement of usage policy on users is the realm of restrictive
corporate use policy and software distribution licensing as one expects
from Microsoft et al.

I have worked with programmers who hold the same mind-set as is being
shown here.
Some of the "programmers" with whom I have worked in the past, were insistent
that things should be done in a particularly restrictive, stylized manner and
that no-other-way-is-the-right-way.

There is *NO* absolute "right way" when it comes to coding.  There are
good ways
and bad ways however all are dependent on the context of the project at hand
and it's particular specifications.

The most common result of such narrow-minded
programming mind-sets is the inability to complete the task at hand.
Programs will be written, rewritten, re-factored, tossed out and
restarted.  This cycle will never end as long as this zenith of coding
"nirvana" remains the goal.  The tragic result of this is that
projects repeatedly fail to reach a usable state, to the detriment of
all.

I hope twisted development does not go down this path and shows
some maturity and the ability to sustain it's own usage.  I really
do love the twisted framework and would hate to see it dragged into a
quagmire of self-indulgent disarray to the despair of a dedicated and
loving user base (whom you freely admit not to care about at all).

--
Clive Crous
http://www.darkarts.co.za/






From glyph at divmod.com  Sun Oct 30 18:20:12 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Sun, 30 Oct 2005 18:20:12 -0500
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <.82.103.130.3.1130709767.squirrel@webmail.darkarts.co.za>
Message-ID: <20051030232012.10365.1563919067.divmod.quotient.2093@ohm>

On Mon, 31 Oct 2005 00:02:47 +0200 (SAST), Clive Crous <clive at darkarts.co.za> wrote:

>If I come online, and ask: "How do i use A with B" and the response is
>"Dont!", as in this thread, it shows a high level of arrogance, extreme
>presumption and an incredible 'naivety to programming' by the person
>giving that "answer".
>
>There always will be people who have different needs to you.
>Enforcement of usage policy on users is the realm of restrictive
>corporate use policy and software distribution licensing as one expects
>from Microsoft et al.

You're calling me arrogant and naive, and a fascist champion of policy enforcement: yet you have the gall to tell me what *I* must do with *my* freely donated time.  I didn't say "only stupid people do this" when you answered the question, or delete your message from the archives, I merely offered my opinion that it is a bad thing to do.  You are replying to my explanation of why we say things like that, not why *you* must never do so.

However, now that we're name-calling, let me suggest instead that *you* are arrogant to presume that you know more about the questions people ask about Twisted than I do (how long do you think I've been answering these, anyway?), and that you are incredibly naive about education in general.  When you have seen the same question asked a thousand times, you learn to see the question behind the question.  You understand the unseen consequences of answering it straightforwardly.  What can be a perfectly legitimate question from an intermediate or expert programmer is simply a set-up for disaster from a novice.

For example, if a 12-year-old girl asks you "can I get pregnant from sex if I only do it once", this is most likely not idle curiosity speaking.  You should not answer as accurately as possible, with equivocations about the probability.  You say "YES, YOU ABSOLUTELY WILL, WHERE IS YOUR MOTHER".  If a married couple in a fertility clinic asks you a similar question, about how difficult it is on average to conceive, it would be a good idea to just answer.

The context of this mailing list is less obvious than either of those, but I have found over time that if the poster really knows what they're doing, they will respond to my refusal with an explanation and I can offer more detail at that point - quite often they are asking a very different question than "how can I make this look synchronous", it is something like "I need to integrate with a proprietary library that will call my code synchronously and I have no access to its source code" or "I would like to use a Twisted protocol implementation from within an existing Zope2 site".

Neither of those questions are properly answered by "use deferredResult" or "use defgen".  It's complicated.

>The most common result of such narrow-minded
>programming mind-sets is the inability to complete the task at hand.
>Programs will be written, rewritten, re-factored, tossed out and
>restarted.  This cycle will never end as long as this zenith of coding
>"nirvana" remains the goal.  The tragic result of this is that
>projects repeatedly fail to reach a usable state, to the detriment of
>all.

This is exactly what happens with Twisted - you got everything right except the result, which is that *code quality goes up over time*.  It is this dedication to quality that makes the project fun and interesting to use.  Granted, breaking backwards compatibility is never fun, but we try hard to minimize the impact of that.

For a project which has a strict deadline and budgetary constraints, this is obviously a terrible tragedy.  I have seen it, I have even caused it (who hasn't?), and it's ugly.  However, this is exactly what makes open source so much fun; you don't have to get it right the first time, you don't have to get it right in 6 months, you can just keep trying and trying and trying.  Eventually you get it right and everyone thinks it's awesome.  I am sure that no current users remember the massive upheaval and 1 1/2 years it took to get the transport/protocol split properly implemented.  If we had not "rewritten, re-factored, tossed out and restarted" that code, Twisted would be nothing but a much set of libraries for Medusa today.

>I hope twisted development does not go down this path and shows
>some maturity and the ability to sustain it's own usage.  I really
>do love the twisted framework and would hate to see it dragged into a
>quagmire of self-indulgent disarray to the despair of a dedicated and
>loving user base (whom you freely admit not to care about at all).

Luckily I am also a user and my career, my reputation and my income all depend quite explicitly upon its success.  Many Twisted developers are in the same position now, so selfish motivations are more than adequate.

Seriously though, my point about not caring about the community was slightly tongue-in-cheek.  The point there is that I am not here to do your homework assignment, I am not here to do your job for you.  If you think that's what I *am* here for, then no, I don't care about you.

I am here to help you learn to use Twisted and learn to use it correctly.  If you don't like my advice, the code is all free, there are other people to answer your questions, and there is quite a bit of freely-available documentation (and even a book from O'Reilly now!).



From exarkun at divmod.com  Sun Oct 30 18:26:18 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 30 Oct 2005 18:26:18 -0500
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <.82.103.130.3.1130709767.squirrel@webmail.darkarts.co.za>
Message-ID: <20051030232618.10365.1279041009.divmod.quotient.2095@ohm>

On Mon, 31 Oct 2005 00:02:47 +0200 (SAST), Clive Crous <clive at darkarts.co.za> wrote:
>#>Why do i hit this wall constantly when discussing twisted usage with
>#>twisted users or developers mostly on freenode's #twisted admitedly:
>#>Telling someone NOT to do something is not answering a question it is
>#>avoiding it.
>#
> [snip]
>#
># I have adopted this stance not merely because I am abraisive asshole, but
># based on long experience with IRC and with teaching programmers how to use
># things.  There are several projects that were developed early on with
># Twisted that were utter disasters because I politely and pateiently
># answered all the authors' questions about how to make Deferreds appear to
># block, how to call reactor functions from threads, and how to invoke
># Twisted from C code, rather than stopping and saying "hey, what are you
># *really* trying to do?".  (No, I will not name these projects.  I do have
># *some* manners.)
>#
># I can only assume that the other Twisted devs you've had problems with
># have gotten this habit from similar experiences, but they may have their
># own reasons.
>#
>
> [snip]
>
>If I come online, and ask: "How do i use A with B" and the response is
>"Dont!", as in this thread, it shows a high level of arrogance, extreme
>presumption and an incredible 'naivety to programming' by the person
>giving that "answer".

I find it equally arrogant to expect the community to behave in the way you would prefer.  What is owed to you that justifies this, exactly?

>There always will be people who have different needs to you.
>Enforcement of usage policy on users is the realm of restrictive
>corporate use policy and software distribution licensing as one expects
>from Microsoft et al.

First of all, no one is forcing anything on you.  You're not locked in.  Don't use Twisted if you don't want to.  Don't use Twisted in the manner we are explaining is correct if you don't want to.  Fork Twisted and take development in a better direction.  Rip parts of Twisted out and drop them into your own project to use how you please.  Spit on our works.  Curse our names and our progeny to the seventh generation, if that's your thing.  Who's going to stop you?  Not me, and not anybody else on this list.

I recognize that you probably don't want to do any of these things.  You want to keep using Twisted, and you want the Twisted team to do things your way.  I have this same expectation of other projects.  Let's face it: it's an unreasonable expectation. 

Twisted is developed for you by a team of uncompensated developers working in their spare time.  Likewise, support is being offered for free.  It should not be too surprising that it is also being offered *conditionally*.  A lot of us are happy to help with problems that don't directly benefit us, but a lot of us are not happy to help with solutions that we think are just as problematic as that which they are intended to resolve.  Are you going to fault us for limiting the extent of our unpaid donations (frequently to commercial development)?  Please.

Furthermore, a perfectly legitimate response to "Don't!" is "But I have constraints X, Y, and Z."  You may feel it is unreasonable to explain your situation, but that's pretty much too bad for you.  If you want to be able to dictate people's behavior to this extent, negotiate a contract with them.  Now, we may not be convinced by constraints X, Y, and Z, but in most cases where they are rational and correct (ie, not "I have to use threads because Cthulhu will rise and consume the world if I do not" - although if you are working on the project to prevent this, and are using Twisted, awesome!  Can we put you on the successes page?), we will be.  It is the refusal to explain them at all that is most annoying, and most likely to result in no assistance being rendered.

I don't think this attitude is unique to the Twisted community.  I don't even think it is unique to open source communities.  Nor do I think it is a negative attitude.  I think it is more open minded and generally productive than just presenting the precise answer to each exact question posed.  In many cases, I have concrete evidence that not answering a direct question with a superficially correct response has helped the questioner measurable, and I've been thanked for this approach repeatedly.

>I have worked with programmers who hold the same mind-set as is being
>shown here.
>Some of the "programmers" with whom I have worked in the past, were insistent
>that things should be done in a particularly restrictive, stylized manner and
>that no-other-way-is-the-right-way.

This is a mischaracterization of the attitude I use when trying to help people, and from what I've witnessed of the interactions of other members of the Twisted community, I think it is not representitive of their behavior either.

The interaction that gives rise to this impression, in my experience, most typically involves much more adament insistence and inflexibility on the part of the person seeking help than on the part of the person from which help is sought: the questioner *knows* they are already on the right track, and if this jerk he is talking to would just stop asking questions and answer them for a change, the problem would immediately be solved.

>There is *NO* absolute "right way" when it comes to coding.  There are
>good ways
>and bad ways however all are dependent on the context of the project at hand
>and it's particular specifications.

Which is why I stress the importance of discussing the context of a problem before trying to resolve it.

>The most common result of such narrow-minded
>programming mind-sets is the inability to complete the task at hand.
>Programs will be written, rewritten, re-factored, tossed out and
>restarted.  This cycle will never end as long as this zenith of coding
>"nirvana" remains the goal.  The tragic result of this is that
>projects repeatedly fail to reach a usable state, to the detriment of
>all.

Twisted comes with a news server, a mail server, a chat server, a chat client, a remote REPL with multiple front ends, a plugin system, numerous persistence systems, a documentation framework with multiple input and output formats, an "Application" abstraction, an SSH client, an SSH server, an authentication and authorization system, a mature TCP, UDP, and SSL client and server API with numerous implementations for numerous platforms, an asynchronous DB-API 2.0 wrapper, an inetd-alike, a high-level remote method and object protocol, a unit test framework and rich command line tool for interacting with test suites, a web server, a web client, a DNS server, a DNS client, and FTP server, an FTP client, implementations of the echo, discard, chargen, ident, finger, QOTD, who, daytime, time, telnet, sip, toc, and oscar protocols, a filesystem path abstraction, a threadpool implementation, a much higher-quality module reloading system than the builtin reload(), a logging system, and quite a few other mature, stable features.

Arguing that the Twisted team cannot complete tasks is ridiculous.

>I hope twisted development does not go down this path and shows
>some maturity and the ability to sustain it's own usage.  I really
>do love the twisted framework and would hate to see it dragged into a
>quagmire of self-indulgent disarray to the despair of a dedicated and
>loving user base (whom you freely admit not to care about at all).

Twisted has been driven by hate for a long time.  Hate and shared goal of the team to destroy the sun.  There's no change in direction going on, at least with regard to the fundamental drive directing Twisted's development.

Jean-Paul



From foom at fuhm.net  Sun Oct 30 21:58:51 2005
From: foom at fuhm.net (James Y Knight)
Date: Sun, 30 Oct 2005 21:58:51 -0500
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <1130535622.1711.158.camel@pcard0ze.ca.nortel.com>
References: <1130535622.1711.158.camel@pcard0ze.ca.nortel.com>
Message-ID: <CF4FC6E5-F45A-4BD3-92EE-260D6EBFDFA7@fuhm.net>

Given that there has already been a long thread about how one should  
not do this, which I completely agree with, I'll not repeat it. Note  
that I do not recommend this solution to the OP, but rather post this  
just to appease to the people complaining about how the only answer  
given is "don't do that". "Don't do that" is the correct answer given  
the information so far available, but, here's a different non-answer,  
with code.

On Oct 28, 2005, at 5:40 PM, Pedro Sanchez wrote:
> def mySyncFunc()
>    x = 0
>    def done(data):
>       global x
>       x = data
>
>    d = someCalculation()
>    d.addCallback(done)
>    <something here to hold until "done" is really done>
>    return x
>
> print mySyncFunc()
>

The above code cannot work because for "done" to become done, the  
twisted event loop must get a chance to run. For the event loop to  
get a chance to run, you must return from that function. Basically,  
how can you "block" waiting for an async event, while letting the  
twisted event loop continue running? There is an answer: run your  
code in a separate thread. However, that doesn't work either, because  
the OP wants to use twisted APIs like ADBAPI or networking in  
someCalculation. So there really is no way to do literally what's  
asked in a working way. But, you can get something "like" the above  
by splitting your code into synch-like-code to be run in a separate  
thread, and async-twisted-using-code to be run in the twisted reactor  
thread.

Here's a little example. Please note, again, that I do not recommend  
doing this except in circumstances where you absolutely must.

import Queue
from twisted.internet import reactor, defer
from twisted.python import failure

def callInReactor(__f, *__a, **__kw):
     # Called in other thread
     queue = Queue.Queue()
     reactor.callFromThread(_calledFromThread, queue, __f, __a, __kw)
     result = queue.get()
     if isinstance(result, failure.Failure):
         result.raiseException()
     return result

def _calledFromThread(queue, f, a, kw):
     # Called in reactor thread
     result = defer.maybeDeferred(f, *a, **kw)
     result.addBoth(queue.put)

def someCalculation():
   # A demo "calculation"
   d = defer.Deferred()
   reactor.callLater(4, d.callback, 'hi')
   return d

x = 0
def myAsyncFunctionInTwistedThread():
   def done(data):
     global x
     x = data
   d = someCalculation()
   d.addCallback(done)
   return d

def mySyncFuncInAnotherThread():
   # NOTE: in this other thread you cannot call any twisted APIs  
besides reactor.callFromThread
   # and a very few select others.
   callInReactor(myAsyncFunctionInTwistedThread)
   # callInReactor blocks until the deferred returned by  
myAsyncFunctionInTwistedThread fires
   print x

# Start up a thread to call your blocking function in
reactor.callInThread(mySyncFuncInAnotherThread)

# Run the reactor
reactor.run()




James



From psanchez at nortel.com  Mon Oct 31 08:28:39 2005
From: psanchez at nortel.com (Pedro Sanchez)
Date: Mon, 31 Oct 2005 08:28:39 -0500
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <20051029214702.10365.193620676.divmod.quotient.1754@ohm>
References: <20051029214702.10365.193620676.divmod.quotient.1754@ohm>
Message-ID: <43661C07.1070906@nortel.com>

I am the original poster of this thread. First of all, thank you for the 
different responses. However I still don't have a clear answer (other 
than what I'm thinking of doing is wrong, which is OK, it can be fixed).

I'm working on a Twisted/Nevow application, and yes, I'm new to both and 
I can tell that if learning Twisted has a step curve, doing it in 
conjuction with Nevow is really almost vertical. But, nevertheless, my 
application is working well these days.

The motivation for my question is the following: I added the 
guard/credentials stuff to my application. The issue is that in order to 
accept a login my application requires several things to happen before 
access can be granted. I therefore implemented my own AuthChecker() 
which fires several deferreds to acomplish its task. This is working 
well, including the use of deferToThread() in several places.

But, the behavior of the authentication wrapper is synchronous. That is, 
access to the system cannot be granted until all deferred operations 
have happended. In this wrapper I have something like:

     def requestAvatar(self, avatarId, mind, *interfaces):
         for iface in interfaces:
             if iface is inevow.IResource:
                 if avatarId is checkers.ANONYMOUS:
                     resc = login.LoginPage()
                     resc.realm = self
                     return (inevow.IResource, resc, noLogout)
                 else:
                     resc = home.RootPage()
                     resc.realm = self
                     return (inevow.IResource, resc,
                             self.createLogout(avatarId, mind))
             else:
                 raise NotImplementedError("Not supported.")

So let me rephrase my original question. Given that the real user 
authentication is happening in my AuthChecker() implemented somewhere 
else, with deferreds and what not, how can I force this requestAvatar() 
thing to wait until the whole login process has finished? My idea was to 
force a synchronous behavior on AuthChecker() forcing this way the login 
process to wait for it to finish.

While writting this I realize that I may be missunderstanding how the 
credentials stuff works ... who knows.

Any suggestions are appreciated,

Thank you,

-- 
Pedro





From exarkun at divmod.com  Mon Oct 31 08:48:14 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 31 Oct 2005 08:48:14 -0500
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <43661C07.1070906@nortel.com>
Message-ID: <20051031134814.10365.325034977.divmod.quotient.2278@ohm>

On Mon, 31 Oct 2005 08:28:39 -0500, Pedro Sanchez <psanchez at nortel.com> wrote:
>I am the original poster of this thread. First of all, thank you for the 
>different responses. However I still don't have a clear answer (other than 
>what I'm thinking of doing is wrong, which is OK, it can be fixed).
>
>I'm working on a Twisted/Nevow application, and yes, I'm new to both and I 
>can tell that if learning Twisted has a step curve, doing it in conjuction 
>with Nevow is really almost vertical. But, nevertheless, my application is 
>working well these days.
>
>The motivation for my question is the following: I added the 
>guard/credentials stuff to my application. The issue is that in order to 
>accept a login my application requires several things to happen before 
>access can be granted. I therefore implemented my own AuthChecker() which 
>fires several deferreds to acomplish its task. This is working well, 
>including the use of deferToThread() in several places.
>
>But, the behavior of the authentication wrapper is synchronous. That is, 
>access to the system cannot be granted until all deferred operations have 
>happended. In this wrapper I have something like:
>
>     def requestAvatar(self, avatarId, mind, *interfaces):
>         for iface in interfaces:
>             if iface is inevow.IResource:
>                 if avatarId is checkers.ANONYMOUS:
>                     resc = login.LoginPage()
>                     resc.realm = self
>                     return (inevow.IResource, resc, noLogout)
>                 else:
>                     resc = home.RootPage()
>                     resc.realm = self
>                     return (inevow.IResource, resc,
>                             self.createLogout(avatarId, mind))
>             else:
>                 raise NotImplementedError("Not supported.")
>
>So let me rephrase my original question. Given that the real user 
>authentication is happening in my AuthChecker() implemented somewhere else, 
>with deferreds and what not, how can I force this requestAvatar() thing to 
>wait until the whole login process has finished? My idea was to force a 
>synchronous behavior on AuthChecker() forcing this way the login process to 
>wait for it to finish.
>
>While writting this I realize that I may be missunderstanding how the 
>credentials stuff works ... who knows.
>
>Any suggestions are appreciated,

Cred supports Deferreds, so there's no need to make your requestAvatar or requestAvatarId methods synchronous.  They can simply return Deferreds.  If you have several Deferreds going in requestAvatarId, you may want to use a DeferredList, which behaves very similarly to a Deferred, but takes several other Deferreds as input and only fires when all those Deferreds have fired.

requestAvatar won't be called until the Deferred you return from requestAvatarId fires.

Jean-Paul



From behnel_ml at gkec.informatik.tu-darmstadt.de  Mon Oct 31 08:56:20 2005
From: behnel_ml at gkec.informatik.tu-darmstadt.de (Stefan Behnel)
Date: Mon, 31 Oct 2005 14:56:20 +0100
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <43661C07.1070906@nortel.com>
References: <20051029214702.10365.193620676.divmod.quotient.1754@ohm>
	<43661C07.1070906@nortel.com>
Message-ID: <43662284.8090804@gkec.informatik.tu-darmstadt.de>


Pedro Sanchez wrote:
> But, the behavior of the authentication wrapper is synchronous. That is,
> access to the system cannot be granted until all deferred operations
> have happended.

Maybe I'm underestimating your problem, but that sounds to me like Deferred
chaining is all you need. Merge the pending Deferreds into a DeferredList and
then append your login procedure to that.

Stefan




From psanchez at nortel.com  Mon Oct 31 09:56:03 2005
From: psanchez at nortel.com (Pedro Sanchez)
Date: Mon, 31 Oct 2005 09:56:03 -0500
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <43662284.8090804@gkec.informatik.tu-darmstadt.de>
References: <20051029214702.10365.193620676.divmod.quotient.1754@ohm>	<43661C07.1070906@nortel.com>
	<43662284.8090804@gkec.informatik.tu-darmstadt.de>
Message-ID: <43663083.1080803@nortel.com>

Stefan Behnel wrote:
> Pedro Sanchez wrote:
> 
>>But, the behavior of the authentication wrapper is synchronous. That is,
>>access to the system cannot be granted until all deferred operations
>>have happended.
> 
> 
> Maybe I'm underestimating your problem, but that sounds to me like Deferred
> chaining is all you need. Merge the pending Deferreds into a DeferredList and
> then append your login procedure to that.
> 
> Stefan
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
I tried this already and couldn't make it work. In one of the functions 
called during the validation process I have this

     def registerSession(self, session):
         def _customerInit(self, customer):
            ...
            session.customerInit = True

         # initialize customer data
         d = defer.Deferred()
         d1 = defer.maybeDeferred(customerInit, session)
         d1.addCallback(_customerInit)
         d1.addErrback(errhandler, session)
         d.chainDeferred(d1)
         return d

customerInit() fires several deferreds which I collect with a 
deferredList already. This works well. My goal therefore is to force 
"registerSession()" to behave synchronously[1] so that whoever is 
invoking it will block. I thought that by defining my own deferred d, 
and that by chaining it to d1 I would achive this. But I don't, the 
caller still doesn't block and goes along thinking that 
registerSsession() is done. I guess I don't understand how to use the 
chainDeferred() call. Hints are welcome; regardeless of what I end up 
doing, I'd like to understand who deferred chaining works.

In a previous answer from Jean-Paul Calderone, he mentions that the 
requestAvatar and requestAvatarId methods don't have to be synchronous 
(thanks Jean-Paul!). This is no evident from the documentation, in fact, 
I dare to say that in all examples I've seen so far these calls are 
always synchronous, therefore my wrong assumption that they had to be.
This is likely the right way to go to modify my program. I'll look into it.

Thanks again!

-- 
Pedro



[1] Boy, I say this with hesitation after the long thread I spawned with 
my post, and after reading repeately that I shouldn't even attempt to do 
it. Which is fine, I take it, thanks for the imput. But I'm just trying 
to figure out the best way around it for my application.





From behnel_ml at gkec.informatik.tu-darmstadt.de  Mon Oct 31 10:25:13 2005
From: behnel_ml at gkec.informatik.tu-darmstadt.de (Stefan Behnel)
Date: Mon, 31 Oct 2005 16:25:13 +0100
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <43663083.1080803@nortel.com>
References: <20051029214702.10365.193620676.divmod.quotient.1754@ohm>	<43661C07.1070906@nortel.com>	<43662284.8090804@gkec.informatik.tu-darmstadt.de>
	<43663083.1080803@nortel.com>
Message-ID: <43663759.9040800@gkec.informatik.tu-darmstadt.de>


Pedro Sanchez schrieb:
> I tried this already and couldn't make it work. In one of the functions
> called during the validation process I have this
> 
>     def registerSession(self, session):
>         def _customerInit(self, customer):
>            ...
>            session.customerInit = True
>
>         # initialize customer data
>         d = defer.Deferred()
>         d1 = defer.maybeDeferred(customerInit, session)
>         d1.addCallback(_customerInit)
>         d1.addErrback(errhandler, session)
>         d.chainDeferred(d1)
>         return d

Ah, there we go. This simplifies to

     def registerSession(self, session):
         def _customerInit(self, customer):
            ...
            session.customerInit = True

         # initialize customer data
         d1 = defer.maybeDeferred(customerInit, session)
         d1.addCallback(_customerInit)
         d1.addErrback(errhandler, session)
         return d1

And then everyone who calls registerSession() receives a Deferred and can add
callbacks for whatever else needs to be done after the session is successfully
registered and _customerInit has been run. You get the difference? The
registration is not done when registerSession /returns/, but when the Deferred
that it returns /fires/. So keep adding callbacks to that Deferred instead of
expecting things to have terminated. Twisted will then take care of running
everything in a chain.

Stefan



From psanchez at nortel.com  Mon Oct 31 10:51:16 2005
From: psanchez at nortel.com (Pedro Sanchez)
Date: Mon, 31 Oct 2005 10:51:16 -0500
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <43663759.9040800@gkec.informatik.tu-darmstadt.de>
References: <20051029214702.10365.193620676.divmod.quotient.1754@ohm>	<43661C07.1070906@nortel.com>	<43662284.8090804@gkec.informatik.tu-darmstadt.de>	<43663083.1080803@nortel.com>
	<43663759.9040800@gkec.informatik.tu-darmstadt.de>
Message-ID: <43663D74.9010101@nortel.com>

Stefan Behnel wrote:
  > Ah, there we go. This simplifies to
> 
>      def registerSession(self, session):
>          def _customerInit(self, customer):
>             ...
>             session.customerInit = True
> 
>          # initialize customer data
>          d1 = defer.maybeDeferred(customerInit, session)
>          d1.addCallback(_customerInit)
>          d1.addErrback(errhandler, session)
>          return d1
> 
> And then everyone who calls registerSession() receives a Deferred and can add
> callbacks for whatever else needs to be done after the session is successfully
> registered and _customerInit has been run. You get the difference? The
> registration is not done when registerSession /returns/, but when the Deferred
> that it returns /fires/. So keep adding callbacks to that Deferred instead of
> expecting things to have terminated. Twisted will then take care of running
> everything in a chain.
> 
> Stefan
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
Yes, I understand that very well. The problem is (was, I guess) my wrong 
assumption that the requestAvatar function (which at the end is the 
"caller" of registerSession() in my actual code) was supposed to be 
synchronous and not to deal with deferreds at all.

Thanks,

-- 
Pedro




From itamar at itamarst.org  Mon Oct 31 12:11:57 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 31 Oct 2005 12:11:57 -0500
Subject: [Twisted-Python] twisted words irc patch for usernames
In-Reply-To: <20051030085508.GF55915@silverwraith.com>
References: <20051030085508.GF55915@silverwraith.com>
Message-ID: <1130778717.8943.15.camel@localhost.localdomain>

On Sun, 2005-10-30 at 01:55 -0700, Avleen Vig wrote:
> Currently when twisted connects to an irc server, the username on the
> USER connect line, is assumed to be the same as the nickname.

Hi,

Could you add this to http://twistedmatrix.com/bugs/? Thanks!




From lists-twistedmatrix at silverwraith.com  Mon Oct 31 19:41:58 2005
From: lists-twistedmatrix at silverwraith.com (Avleen Vig)
Date: Mon, 31 Oct 2005 16:41:58 -0800
Subject: [Twisted-Python] twisted words irc patch for usernames
In-Reply-To: <1130778717.8943.15.camel@localhost.localdomain>
References: <20051030085508.GF55915@silverwraith.com>
	<1130778717.8943.15.camel@localhost.localdomain>
Message-ID: <20051101004158.GP43209@silverwraith.com>

On Mon, Oct 31, 2005 at 12:11:57PM -0500, Itamar Shtull-Trauring wrote:
> > Currently when twisted connects to an irc server, the username on the
> > USER connect line, is assumed to be the same as the nickname.
> 
> Could you add this to http://twistedmatrix.com/bugs/? Thanks!

Done! As bug 1302 :-)



From ml.flex at gmail.com  Sun Oct  2 07:45:20 2005
From: ml.flex at gmail.com (Micky Latowicki)
Date: Sun, 2 Oct 2005 16:45:20 +0300
Subject: [Twisted-Python] TCP KeepAlive
Message-ID: <d27002d90510020645k18f7cd4cw48248b0e54499866@mail.gmail.com>

Hi.

Got a couple of questions regarding TCP keep alive's and twisted:

1. When the TCP connection times-out, is pb.Copyable.stoppedObserving() called?

2. (this one isn't really twisted-specific, but if you know, it would
be great): has anyone ever broke any other applications on his/her
machine by changing the OS-wide TCP keepAlive interval? is there any
way to know whether changing the keepAlive timeout would break any
other application? Is there a standard way to document a program's
dependency on this parameter?

Thanks.

Micky



From andrea at cpushare.com  Sun Oct  2 09:25:05 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Sun, 2 Oct 2005 17:25:05 +0200
Subject: [Twisted-Python] passClient for
	ReverseProxyResource/VHostMonsterResource
Message-ID: <20051002152505.GC16345@opteron.random>

Hello,

I need a new (optional) feature in the
ReverseProxyResource/VHostMonsterResource protocol. It's optional
because I doubt the reverse proxy of other packages could support it
without upgrades. I only had to add "passClient = True" as parameter to
ReverseProxyResource and VHostMonsterResource to enable it (two liner
patch to my code).

In short this passes the client ip and port from the reverse proxy
server to the vmonster resource, this way the nevow server that receives
the proxy connection knows who has connected to the proxy and it can
react accordingly. This is needed to really allow putting more nevow
servers transparently behind the same port, one of my nevow apps really
needed to know the ip of the connecting client.

Cross posting to both lists because it has two different parts, the
first is the Nevow part and the second is the Twisted part.  This code
is online right now and no problems so far (if you see any problem let
me know ;).

Here the Nevow part:

Index: Nevow/nevow/vhost.py
===================================================================
--- Nevow/nevow/vhost.py	(revision 1788)
+++ Nevow/nevow/vhost.py	(working copy)
@@ -134,13 +134,15 @@
     *after* it returns the (resource,segments) tuple.
     """
     implements(inevow.IResource)
+
+    def __init__(self, vhost_segments):
+        self.prepath_segments = vhost_segments+1 # +1 is for /vhost
+
     def locateChild(self, ctx, segments):
         request = inevow.IRequest(ctx)
-        request.prepath = request.prepath[3:]
+        request.prepath = request.prepath[self.prepath_segments:]
         return request.site.resource, segments
 
-_prepathCleaner = _VHostMonsterResourcePrepathCleaner()
-
 class VHostMonsterResource:
     """VHostMonster resource that helps to deploy a Nevow site behind a proxy.
     
@@ -173,14 +175,27 @@
 
     This also means your private server should serve the real content at
     /foo/bar, and not at the root of the tree.
+
+    If passClient is set to True it expects the client to be passed by the
+    proxy (see ReverseProxyResource passClient parameter for details). When
+    passClient is True this page should not be reacheable directly from the
+    internet if logging the IP address and port securely is needed.
     """
     implements(inevow.IResource)
 
+    vhost_segments = 2
+
+    def __init__(self, passClient = False):
+        self.passClient = passClient
+        if passClient:
+            self.vhost_segments = 3
+        self._prepathCleaner = _VHostMonsterResourcePrepathCleaner(self.vhost_segments)
+
     def locateChild(self, ctx, segments):
 
         request = inevow.IRequest(ctx)
 
-        if len(segments) < 2:
+        if len(segments) < self.vhost_segments:
             return rend.NotFound
         else:
             if segments[0] == 'http':
@@ -193,13 +208,18 @@
                 port = int(port)
             else:
                 host, port = segments[1], 80
-           
             request.setHost(host, port)
 
-            prefixLen = len('/'+'/'.join(request.prepath)+'/'+'/'.join(segments[:2]))
-            request.path = '/'+'/'.join(segments[2:])
+            if self.passClient:
+                if ':' not in segments[2]:
+                    return rend.NotFound
+                host, port = segments[2].split(':')
+                request.setClient(host, port)
+
+            prefixLen = len('/'+'/'.join(request.prepath)+'/'+'/'.join(segments[:self.vhost_segments]))
+            request.path = '/'+'/'.join(segments[self.vhost_segments:])
             request.uri = request.uri[prefixLen:]
 
-            return _prepathCleaner, segments[2:]
+            return self._prepathCleaner, segments[self.vhost_segments:]
         
 compy.backwardsCompatImplements(VHostMonsterResource)



Here the twisted part:

Index: Twisted/twisted/web/http.py
===================================================================
--- Twisted/twisted/web/http.py	(revision 14534)
+++ Twisted/twisted/web/http.py	(working copy)
@@ -876,6 +876,10 @@
         self.received_headers["host"] = host
         self.host = address.IPv4Address("TCP", host, port)
 
+    def setClient(self, host, port):
+        """Same as setHost but for the client address"""
+        self.client = address.IPv4Address("TCP", host, port)
+
     def getClientIP(self):
         if isinstance(self.client, address.IPv4Address):
             return self.client.host
Index: Twisted/twisted/web/proxy.py
===================================================================
--- Twisted/twisted/web/proxy.py	(revision 14534)
+++ Twisted/twisted/web/proxy.py	(working copy)
@@ -160,23 +160,33 @@
     to a different server.
     """
 
-    def __init__(self, host, port, path):
+    def __init__(self, host, port, path, passClient = False):
         resource.Resource.__init__(self)
         self.host = host
         self.port = port
         self.path = path
+        self.passClient = passClient
 
+    def getPath(self, request):
+        path = self.path
+        if self.passClient:
+            path += '/%s:%d' % (request.client.host, request.client.port)
+        return path
+
     def getChild(self, path, request):
-        return ReverseProxyResource(self.host, self.port, self.path+'/'+path)
+        return ReverseProxyResource(self.host, self.port, self.getPath(request)+'/'+path, False)
 
     def render(self, request):
         request.received_headers['host'] = self.host
         request.content.seek(0, 0)
+
+        path = self.getPath(request)
+
         qs = urlparse.urlparse(request.uri)[4]
         if qs:
-            rest = self.path + '?' + qs
+            rest = path + '?' + qs
         else:
-            rest = self.path
+            rest = path
         clientFactory = ProxyClientFactory(request.method, rest, 
                                      request.clientproto, 
                                      request.getAllHeaders(),



From warner at lothar.com  Sun Oct  2 13:18:56 2005
From: warner at lothar.com (Brian Warner)
Date: Sun, 02 Oct 2005 12:18:56 -0700 (PDT)
Subject: [Twisted-Python] TCP KeepAlive
Message-ID: <20051002.121856.118960310.warner@lothar.com>

> 1. When the TCP connection times-out, is pb.Copyable.stoppedObserving()
> called?

I think you mean pb.Cacheable.stoppedObserving, right? pb.Copyable is
fire-and-forget.

I see a call to stoppedObserving() inside Broker.connectionLost, so I'd
hazard a guess and say yes, when the TCP connection is lost (which could be
due to timeout, or the other end closing the connection, or the near end
closing the connection), all the current Cacheables will have their
stoppedObserving methods invoked.

Remember, however, that TCP timeouts are somewhat tricky, and rather
"forgiving": they are intended to ignore "transient" network failures that
only last a few minutes (once upon a time, when the internet was a slower
place than it is now, and the phrase "five nines" referred to a dubious but
still lucky poker hand, connection losses of several minutes at a time were
no cause for alarm, and certainly not a reason to abandon your hard-won
RFC88 Remote Job Entry Protocol session).

The primary timer is a "short" exponential-backoff retransmission timer for
data that has been sent but not yet acknowledged. It depends upon the kernel,
but I tend to see this one give up on the connection after 5 to 15 minutes of
non-connectivity.

If you set the SO_KEEPALIVE option, a second timer is activated which
basically pings the remote host every once in a while (although it does this
within the context of the TCP session, so it will also detect a remote host
that has shut down your connection but for which the FIN somehow went
missing). This helps detect remote hosts that have powered off abruptly (so
they weren't able to kill off processes and thus send FIN packets to
terminate the TCP connections), and failures in intermediate routers (or,
more commonly, a NAT box which has forgotten about the connection because it
hasn't sent any traffic for 10 or 20 minutes). If the connection is busy,
that is if each end sends some data to the other every couple of minutes,
then the normal retransmission timer will catch connectivity losses after 5
to 15 minutes.

The default interval for the keepalive timer tends to be one the order of 2
hours, plus it tries several times if it can't get through, which adds
another 10 or 15 minutes. So even with SO_KEEPALIVE turned on, it may be
hours before an otherwise-idle connection is detected as being broken.

This drove me crazy on the buildbot, because many of the buildslaves are
behind NAT boxes with short (20 minute) connection timeouts, and because the
buildslaves can be idle for days at a time (waiting for someone to make an
SVN checkin). So I added some application-level keepalives. The actual scheme
I used is kind of weird, I'm not sure I would recommend it for new code, but
the basic idea was to simply add a 'def remote_doNothing(self): pass' method
to a pb.Referenceable at the far end, set up a timer to invoke
target.callRemote("doNothing") once every 10 minutes, and then let the TCP
retransmission timer take care of the rest. On top of that, you could reduce
the extra traffic by keeping track of your normal callRemote invocations and
setting an .activity flag, and then only send the remote_doNothing if there
hadn't been any normal activity in the last 10 minutes. You could also detect
connectivity losses faster by starting a shorter (perhaps 3 minute) timer
when you send the doNothing, and if it doesn't complete (i.e. its Deferred
doesn't fire) before that timer expires, abandon the connection with
target.broker.transport.loseConnection() . If you choose this short timeout,
remember that it could be triggered accidentally if you have a method which
pushes a large amount of data over a slow (dialup) connection: this bit us
several times when the buildslave was dumping _trial_temp/test.log up to the
master, because it filled the Broker's transmit buffer with data that took 5
to 10 minutes to send, and the app-level keepalive message got queued after
that, so the response couldn't possibly get back in time.


Anyways, probably a larger answer than you really wanted :). Hope you (or
someone else, some day) finds it useful.

cheers,
 -Brian



From ml.flex at gmail.com  Mon Oct  3 02:35:03 2005
From: ml.flex at gmail.com (Micky Latowicki)
Date: Mon, 3 Oct 2005 11:35:03 +0300
Subject: [Twisted-Python] TCP KeepAlive
In-Reply-To: <20051002.121856.118960310.warner@lothar.com>
References: <20051002.121856.118960310.warner@lothar.com>
Message-ID: <d27002d90510030135m507805fbm667edf25544397f3@mail.gmail.com>

Thanks Brian. That was very informative. It makes application-level
keepalive sound rather simple, so if we have any trouble with TCP, I
guess we'll do that.



From moof at metamoof.net  Mon Oct  3 04:36:30 2005
From: moof at metamoof.net (Moof)
Date: Mon, 03 Oct 2005 12:36:30 +0200
Subject: [Twisted-Python] threadedselctreactor and releases
Message-ID: <434109AE.2000500@metamoof.net>

Warning: mild rant venting frustration from a user, here. I'm not trying to
offend, but I may have failed in this respect. Forgive me if I've failed in
this aim.

I've seen it mentioned quite often on the IRC channel recently, and it's
starting to get a bit silly now, I'm talking, in this case, about people
saying "you want to use wx? use threadedselectreactor".

I'd like to remind people that threadedselectreactor isn't officially
released, and people who want to release software that depends *on* twisted
prefer to work with full twisted releases, things that non-expert users can
*download* without having to go through the rigmarole of installing
subversion, and, in the case of windows users, learn to use the command line
or some obscure right-click menu. Telling people "use svn HEAD" is, quite
often, an answer that is useless for them.

So, I have three suggestions to offer. I'm writing from the point of view of
a user who doesn't know twisted inside out but does depend on it, and has
never used wxpython:

1) Support the released versions. That's sort of the point of making a
release, no? Rather than tell people "use threadedselectreactor and break
any hope of a release policy you might have" try and work out how, in this
case, people can get wxreactor working properly. This is, I gather, a
herculean effort in most cases, so I understand people's reticence towards
this course of action.

2) Make a new release of twisted.core. I gather this is unlikely to happen
in the near future, especially given the amoutn of work happening in trial
at the moment, so probably not the world's best idea. Plus, I'll get radix
moaning at me for even suggesting it ;)

3) Given the amount of people who still seem to wish to use wx with twisted,
and the frequency this thing comes up on dicussions on IRC, it's probably
worth going for this one: Backport threadedselectreactor to twisted.core 2.0
(probably not too onerous) and either make a maintenance release of
twisted.core with it in, or offer it for download as a separate package on
the main twisted page.

4) Do nothing, and leave people like me quite frustrated.

In the middle two cases, threadedselectreactor will need documenting on the
twisted site. There's plenty of incidental documentation out there, it just
needs someone to gather it up and put it together in the howto directly.

This isn't just about threadedselectreactor, it just seems to be the most
obvious problem. I first came across the "use svn HEAD" answer when I came
across a bug that had been fixed in trial. It's great, it works lovely now,
but the software environment I'm now developing in is not going to be the
one my users would eventually be downloading form the twisted webpage.
Thankfully, my users live in a controlled corporate environment, and, more
to the point, won't be runnning the test suite, so I have the possibiliy of
testing out my software with twisted release before sending it out for
release, but I'd hate to have to release a wx-dependent piece of software
here, something that is looking increasingly likely in the next three months
or so.

Yes, I am aware that most of you are volunteers. It's a volunteer-run and
volunteer-supported project. You guys are doign great work developing the
project, and I'm not tryign to denigrate that effort, merely make you aware
of a particular frustration from the point of view of a user of your
fabulous product, and one which probably contributes to people's diffidence
towards taking the project up.

Anyway, thanks for letting me vent on that subject for a bit.

Moof
-- 
Giles Antonio Radford, alias Moof
"Too old to be a chicken and too young to be a dirty old man"
Serving up my ego over at <http://metamoof.net/>



From jml at mumak.net  Mon Oct  3 04:52:15 2005
From: jml at mumak.net (Jonathan Lange)
Date: Mon, 3 Oct 2005 21:52:15 +1100
Subject: [Twisted-Python] threadedselctreactor and releases
In-Reply-To: <434109AE.2000500@metamoof.net>
References: <434109AE.2000500@metamoof.net>
Message-ID: <d06a5cd30510030352bee377a@mail.gmail.com>

On 03/10/05, Moof <moof at metamoof.net> wrote:
> 2) Make a new release of twisted.core. I gather this is unlikely to happen
> in the near future, especially given the amoutn of work happening in trial
> at the moment, so probably not the world's best idea. Plus, I'll get radix
> moaning at me for even suggesting it ;)

As far as Trial's concerned, I'd be happy for a release of core --
particularly if I had (say) a week's notice to clean bugs, deprecate
some more stuff and test the snot out of everything.

jml



From glyph at divmod.com  Mon Oct  3 05:33:17 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 3 Oct 2005 07:33:17 -0400
Subject: [Twisted-Python] threadedselctreactor and releases
In-Reply-To: <434109AE.2000500@metamoof.net>
Message-ID: <20051003113317.3914.493535546.divmod.quotient.23580@ohm>

On Mon, 03 Oct 2005 12:36:30 +0200, Moof <moof at metamoof.net> wrote:
>Warning: mild rant venting frustration from a user, here. I'm not trying to
>offend, but I may have failed in this respect. Forgive me if I've failed in
>this aim.

I wasn't terribly offended, at least, so I guess you win.

>I've seen it mentioned quite often on the IRC channel recently, and it's
>starting to get a bit silly now, I'm talking, in this case, about people
>saying "you want to use wx? use threadedselectreactor".

In the next release, wxreactor should be totally abandoned (since it doesn't work) and the interface should be supported using wxreactor.  It's correct that people are saying this.

>I'd hate to have to release a wx-dependent piece of software (...)
>Yes, I am aware that most of you are volunteers. (...)
>You guys are doign great work (...)

Here is the problem in this particular case: A group of volunteers - most of whom don't care one whit about WX, and would, in fact, like to discourage its use (so long as its event loop remains the disaster which makes discussions like this necessary) are being charged (by you, and others) with making a release of the software they are developing easy to use with WX.

As you wrote without trying to offend, please don't take offense either, but this is the way I see things.

I don't care about wxwindows.  I don't like it, I don't ever intend to use it and I certainly don't need to dedicate my own *extremely* sparse time for working on Twisted to improving it somehow.  The release process is a disaster right now, which is unfortunate, but that is hardly at the top of my priority list either, since I don't mind deplying out of an SVN tag.

Frustrated users like yourself need to make a decision as to how to deal with that frustration.  Either find a Twisted developer to make your issues go away and pay them (paypal to glyph at twistedmatrix.com, please mention the bug number in http://twistedmatrix.com/bugs ), OR, better yet, find some time of your own to volunteer to fix the specific issues which are bothering you.  Rants like the one you wrote are helpful if the audience has plenty of time but not enough direction.

Frankly, I, and everyone else on this mailing list who has commit access to Twisted, has done *more* than enough for the F/OSS community already without seeing anywhere near adequate compensation.  We - employees of Divmod and Nunatak in particular - are tapped out for time, and I, at least, have *PLENTY* of direction, since I am now working on the following open source projects: Twisted, Nevow, Axiom, Vertex, Mantissa, Epsilon, Combinator, and ClickChronicle.

If nobody on the Twisted team is fixing your problem already, that is everyone who might be fixing it has things more important to them that they need to work on.  It is an extremely time-poor project with broken release infrastructure, so it should not be surprising that it doens't get released often.

It seems that the root cause of this conflict, since all open source projects are always strapped for time, is the unfortunate nature of the "split".  It a good idea: it was supposed to make releasing individual projects easier by reducing the amount of work required for each, but it seems that what happened was that the initial attempt failed (the one using zpkgtools) and the resulting second attempt was steamrolled out the door as fast as possible but left us with a massive amount of cleanup work that hasn't been done yet.  There are still lots of broken links on the website, and there is still no clear division of responsibility for maintainers to make, or even propose individual releases.

My specific suggestion to you would be to start contributing patches against the automated build/release scripts so that all a Twisted release manager has to do when the release is ready is "release-twisted --core 2.5.2 'This release fixes several issues in tsreactor spotted with the previous release'".  Once this is fixed then the procedural problems of doing a release should be quite a bit easier to deal with.  Speaking of which, I don't even think we *have* a release manager now, want to volunteer for that?

I suggest this rather than your other recommendations as to breaking out a separate tsreactor release because Twisted *SHOULD* be a working, self-contained whole.  Right now there are lots of holes and lots of bugs, but we shouldn't distribute separate "backports" of every fix and additional component because making a release is hard.  We should make making a release easier and just do that more often.




From radeex at gmail.com  Mon Oct  3 06:05:34 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Mon, 3 Oct 2005 23:05:34 +1100
Subject: [Twisted-Python] threadedselctreactor and releases
In-Reply-To: <20051003113317.3914.493535546.divmod.quotient.23580@ohm>
References: <434109AE.2000500@metamoof.net>
	<20051003113317.3914.493535546.divmod.quotient.23580@ohm>
Message-ID: <60ed19d40510030505y4236c97cuf0e6d819342166b6@mail.gmail.com>

On 10/3/05, glyph at divmod.com <glyph at divmod.com> wrote:
> My specific suggestion to you would be to start contributing patches against the automated build/release scripts so that all a Twisted release manager has to do when the release is ready is "release-twisted --core 2.5.2 'This release fixes several issues in tsreactor spotted with the previous release'".  Once this is fixed then the procedural problems of doing a release should be quite a bit easier to deal with.  Speaking of which, I don't even think we *have* a release manager now, want to volunteer for that?

http://twistedmatrix.com/bugs/issue1055


--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+



From solipsis at pitrou.net  Mon Oct  3 06:18:54 2005
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Mon, 03 Oct 2005 14:18:54 +0200
Subject: [Twisted-Python] threadedselctreactor and releases
In-Reply-To: <434109AE.2000500@metamoof.net>
References: <434109AE.2000500@metamoof.net>
Message-ID: <1128341934.6138.105.camel@fsol>


Hi Moof,

You may have missed the already numerous discussions on this list about
the subject "wx + Twisted".
If you don't want to use Twisted's threadedselectreactor, there is
another recipe which does work perfectly (but is a little less
transparent to the programmer) :
http://solipsis.netofpeers.net/wiki2/index.php/WxPython_And_Twisted_Example

(a better and simpler version of the proxy objects is here:
http://svn.berlios.de/viewcvs/solipsis/trunk/main/solipsis/util/uiproxy.py?view=markup
)

There is no agreement among people over which of both approaches is
better, so do your own testing yourself and choose whatever you like.

Regards

Antoine.





From radeex at gmail.com  Mon Oct  3 06:22:26 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Mon, 3 Oct 2005 23:22:26 +1100
Subject: [Twisted-Python] threadedselctreactor and releases
In-Reply-To: <434109AE.2000500@metamoof.net>
References: <434109AE.2000500@metamoof.net>
Message-ID: <60ed19d40510030522m5b39361cq9e9e5912c192624c@mail.gmail.com>

On 10/3/05, Moof <moof at metamoof.net> wrote:
> 2) Make a new release of twisted.core. I gather this is unlikely to happen
> in the near future, especially given the amoutn of work happening in trial
> at the moment, so probably not the world's best idea. Plus, I'll get radix
> moaning at me for even suggesting it ;)

I'm really sorry if I've ever given this impression, but I'm pretty
sure I don't regularly moan at people for suggesting releases. I do
admit the necessity of often needing a lot of moaning directed _at_
me, though. As I've posted elsewhere in this thread, a new release of
Twisted core is on its way, after not too many people having requested
it.

I'll refer to glyph's response to your post as basically representing
my opinions, except for the bits where he pretends I don't exist. ;)


--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+



From moof at metamoof.net  Mon Oct  3 06:45:45 2005
From: moof at metamoof.net (Moof)
Date: Mon, 03 Oct 2005 14:45:45 +0200
Subject: [Twisted-Python] threadedselctreactor and releases
In-Reply-To: <20051003113317.3914.493535546.divmod.quotient.23580@ohm>
References: <20051003113317.3914.493535546.divmod.quotient.23580@ohm>
Message-ID: <434127F9.9030900@metamoof.net>

glyph at divmod.com wrote:
> Frankly, I, and everyone else on this mailing list who has commit access
> to Twisted, has done *more* than enough for the F/OSS community already
> without seeing anywhere near adequate compensation.

This was the sentence I was hoping to avoid. It is a very common, and highly
merited complaint which I am very well aware of. I didn't want to appear
like just another whiny user who couldn't care less about the people behind
the project. I guess I did fail.

> My specific suggestion to you would be to start contributing patches
> against the automated build/release scripts so that all a Twisted
> release manager has to do when the release is ready is "release-twisted
> --core 2.5.2 'This release fixes several issues in tsreactor spotted
> with the previous release'". 

Right now I see five bugs tagged with "release management". I'll have a
proper look at them later and see what I can do. I suspect, though, that
much of it will require me to know the build system inside out. Is it
documented anywhre? Or who can I talk to about working out how it works and
what sort of times does he or she tend to be online?

> Once this is fixed then the procedural
> problems of doing a release should be quite a bit easier to deal with. 
> Speaking of which, I don't even think we *have* a release manager now,
> want to volunteer for that?

What's involved? Can someone with less-than-stellar knowledge of the
intricacies of twisted, and an unbelievebaly small understanding of C, do
the job?

> I suggest this rather than your other recommendations as to breaking out
> a separate tsreactor release because Twisted *SHOULD* be a working,
> self-contained whole.  Right now there are lots of holes and lots of
> bugs, but we shouldn't distribute separate "backports" of every fix and
> additional component because making a release is hard.  We should make
> making a release easier and just do that more often.

I agree, wholeheartedly.

Moof
-- 
Giles Antonio Radford, alias Moof
"Too old to be a chicken and too young to be a dirty old man"
Serving up my ego over at <http://metamoof.net/>



From glyph at divmod.com  Mon Oct  3 07:13:39 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 3 Oct 2005 09:13:39 -0400
Subject: [Twisted-Python] threadedselctreactor and releases
In-Reply-To: <434127F9.9030900@metamoof.net>
Message-ID: <20051003131339.3914.1727796828.divmod.quotient.23582@ohm>

On Mon, 03 Oct 2005 14:45:45 +0200, Moof <moof at metamoof.net> wrote:
>glyph at divmod.com wrote:
>> Frankly,

>This was the sentence I was hoping to avoid. It is a very common, and highly
>merited complaint which I am very well aware of. I didn't want to appear
>like just another whiny user who couldn't care less about the people behind
>the project. I guess I did fail.

Perhaps I was overly harsh then.  I realized that you understood the problem - I was framing it there for context, meaining to say that you could be a more direct participant in the solution, not that you were a jackass for even mentioning that there was a bug in Twisted that needed to be fixed :-).

>> My specific suggestion to you would be to start contributing patches
>> against the automated build/release scripts so that all a Twisted
>> release manager has to do when the release is ready is "release-twisted
>> --core 2.5.2 'This release fixes several issues in tsreactor spotted
>> with the previous release'".
>
>Right now I see five bugs tagged with "release management". I'll have a
>proper look at them later and see what I can do. I suspect, though, that
>much of it will require me to know the build system inside out. Is it
>documented anywhre? Or who can I talk to about working out how it works and
>what sort of times does he or she tend to be online?

radix, apparently, and .au times.  Last I heard out of him before this thread, he wasn't doing it any more, but I guess we've got him hooked at least through 2.1!  Perhaps I just need to agitate for a more rapid release; there's clearly lots of forward movement in core that needs to get out there.

>> Once this is fixed then the procedural
>> problems of doing a release should be quite a bit easier to deal with.
>> Speaking of which, I don't even think we *have* a release manager now,
>> want to volunteer for that?
>
>What's involved? Can someone with less-than-stellar knowledge of the
>intricacies of twisted, and an unbelievebaly small understanding of C, do
>the job?

That sounds about right.  None of the work of an RM is hard - you just have to basically pay attention to what's going on and coordinate, and do the tedious typing-into-fields on freshmeat and the website and whatever.  Whether he's still doing it or not, radix needs a break, so my suggestion stands :).

>> Twisted *SHOULD* be a working,
>> self-contained whole.

>I agree, wholeheartedly.

Awesome.



From glyph at divmod.com  Mon Oct  3 07:14:51 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 3 Oct 2005 09:14:51 -0400
Subject: [Twisted-Python] threadedselctreactor and releases
In-Reply-To: <60ed19d40510030505y4236c97cuf0e6d819342166b6@mail.gmail.com>
Message-ID: <20051003131523.3914.1852156681.divmod.quotient.23584@ohm>



On Mon, 3 Oct 2005 23:05:34 +1100, Christopher Armstrong <radeex at gmail.com> wrote:

>http://twistedmatrix.com/bugs/issue1055

Wow, uh, er, um.  Cool.

Why hasn't there been a major release for like 9 months, then? :)



From andrea at cpushare.com  Mon Oct  3 16:55:13 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Tue, 4 Oct 2005 00:55:13 +0200
Subject: [Twisted-Python] TCP KeepAlive
In-Reply-To: <20051002.121856.118960310.warner@lothar.com>
References: <20051002.121856.118960310.warner@lothar.com>
Message-ID: <20051003225513.GB5406@opteron.random>

On Sun, Oct 02, 2005 at 12:18:56PM -0700, Brian Warner wrote:
> more commonly, a NAT box which has forgotten about the connection because it
> hasn't sent any traffic for 10 or 20 minutes). If the connection is busy,

I had to deal with this problem too, but my solution has been to tweak
the tcp stack so it keeps the nat alive with these settings:

+++ /etc/sysctl.conf	2005-04-08 05:39:46.106935468 +0200
+net.ipv4.tcp_keepalive_time = 240

This way a keepalive packet is sent every 4 min.

This is way simpler and more efficient (lower internet overhead too!)
than doing it in userland.



From ken at kenkinder.com  Mon Oct  3 18:19:44 2005
From: ken at kenkinder.com (Ken Kinder)
Date: Mon, 03 Oct 2005 18:19:44 -0600
Subject: [Twisted-Python] Unicode
Message-ID: <4341CAA0.6000600@kenkinder.com>

Perhaps like many developers, I came across this surprising bit of code
inside a couple of Twisted's methods:

        if isinstance(data, unicode): # no, really, I mean it
            raise TypeError("Data must be not be unicode")

And of course, I simply removed those lines. But I'm sure if I submit
that patch, a discussion similar to this one would develop, because it's
unlikely that such code would have been accidentally included:

    http://twistedmatrix.com/pipermail/twisted-python/2005-April/010199.html

Python library will kindly cast unicode objects to strings when
necessary, as is mentioned in the above thread. It *would* be fair to
say that not implicitly deciding on an encoding type is "taking the high
road" if the behavior of encoding weren't so uniformly explicit and
consistent in Python and its standard library:

    http://www.python.org/peps/pep-0100.html
    http://docs.python.org/api/arg-parsing.html
    http://docs.python.org/api/stringObjects.html

(There are more...)

The purpose of Python's unicode type is transparent exchange of string
objects, whether those string objects are of type str or type unicode.
Pretending that isn't so and raising a TypeError is not helpful. I would
urge you to AT LEAST provide a detailed explanation in that error,
explaining the philosophical disagreement you have with Python's
unicode-string conversion behavior and have a flag you can set to
disable that check.




From solipsis at pitrou.net  Mon Oct  3 18:43:34 2005
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Tue, 04 Oct 2005 02:43:34 +0200
Subject: [Twisted-Python] Unicode
In-Reply-To: <4341CAA0.6000600@kenkinder.com>
References: <4341CAA0.6000600@kenkinder.com>
Message-ID: <1128386614.6138.349.camel@fsol>


Le lundi 03 octobre 2005 à 18:19 -0600, Ken Kinder a écrit :
> Perhaps like many developers, I came across this surprising bit of code
> inside a couple of Twisted's methods:
> 
>         if isinstance(data, unicode): # no, really, I mean it
>             raise TypeError("Data must be not be unicode")

This may seem surprising but it is logical.
If you design your network protocol properly, the design also includes
the details of how text is represented (including the encoding, how it
is specified, etc.).

So you can't ask Twisted to make a general decision for every network
protocol out there. Each protocol has its own view on the subject. It's
up to you to implement the design decision properly.

Regards

Antoine.





From grant at osafoundation.org  Mon Oct  3 19:01:15 2005
From: grant at osafoundation.org (Grant Baillie)
Date: Mon, 3 Oct 2005 18:01:15 -0700
Subject: [Twisted-Python] Unicode
In-Reply-To: <4341CAA0.6000600@kenkinder.com>
References: <4341CAA0.6000600@kenkinder.com>
Message-ID: <0E8FE793-5206-4A67-BF39-564051C5E65A@osafoundation.org>

Well, I agree the message could be more brutal :).

What's the developer use case for "transparent exchange" of unicode  
strings in a network framework? Every protocol and data format has  
some different (sometimes goofy, and sometimes nonexistent) scheme  
for encoding non-ASCII end-user strings. Since the internet only  
understands bytes, it's almost certainly programmer error (omitting  
to implement the protocol's encoding scheme) if you try to send a  
unicode over the wire.

I no more expect

self.transport.write(u"Shoot me with a \u2022")

to work than

self.transport.write(7)

inside my protocol code, for exactly the same reason in both cases.

--Grant

Grant Baillie
Open Source Applications Foundation
http://www.osafoundation.org

PS: As an aside, I actually believe a "default encoding" (site-wide  
or application-wide) scheme isn't so great either. It leads to  
developers making assumptions about the global setting, and those  
assumptions lead to different modules being incompatible.

On Oct 3, 2005, at 17:19, Ken Kinder wrote:

> Perhaps like many developers, I came across this surprising bit of  
> code
> inside a couple of Twisted's methods:
>
>         if isinstance(data, unicode): # no, really, I mean it
>             raise TypeError("Data must be not be unicode")
>
> And of course, I simply removed those lines. But I'm sure if I submit
> that patch, a discussion similar to this one would develop, because  
> it's
> unlikely that such code would have been accidentally included:
>
>     http://twistedmatrix.com/pipermail/twisted-python/2005-April/ 
> 010199.html
>
> Python library will kindly cast unicode objects to strings when
> necessary, as is mentioned in the above thread. It *would* be fair to
> say that not implicitly deciding on an encoding type is "taking the  
> high
> road" if the behavior of encoding weren't so uniformly explicit and
> consistent in Python and its standard library:
>
>     http://www.python.org/peps/pep-0100.html
>     http://docs.python.org/api/arg-parsing.html
>     http://docs.python.org/api/stringObjects.html
>
> (There are more...)
>
> The purpose of Python's unicode type is transparent exchange of string
> objects, whether those string objects are of type str or type unicode.
> Pretending that isn't so and raising a TypeError is not helpful. I  
> would
> urge you to AT LEAST provide a detailed explanation in that error,
> explaining the philosophical disagreement you have with Python's
> unicode-string conversion behavior and have a flag you can set to
> disable that check.






From exarkun at divmod.com  Mon Oct  3 19:08:05 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Mon, 3 Oct 2005 21:08:05 -0400
Subject: [Twisted-Python] Unicode
In-Reply-To: <4341CAA0.6000600@kenkinder.com>
Message-ID: <20051004010805.3914.1122264389.divmod.quotient.23691@ohm>

On Mon, 03 Oct 2005 18:19:44 -0600, Ken Kinder <ken at kenkinder.com> wrote:
>Perhaps like many developers, I came across this surprising bit of code
>inside a couple of Twisted's methods:
>
>        if isinstance(data, unicode): # no, really, I mean it
>            raise TypeError("Data must be not be unicode")
>
> [snip]
>
>The purpose of Python's unicode type is transparent exchange of string
>objects, whether those string objects are of type str or type unicode.
>Pretending that isn't so and raising a TypeError is not helpful. I would
>urge you to AT LEAST provide a detailed explanation in that error,
>explaining the philosophical disagreement you have with Python's
>unicode-string conversion behavior and have a flag you can set to
>disable that check.
>

An explanation is more likely to be provided if there is a ticket for such.  If it's important to you, <http://www.twistedmatrix.com/bugs/>.  Thanks :)

Jp



From mary-twisted at puzzling.org  Mon Oct  3 19:11:02 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Tue, 4 Oct 2005 11:11:02 +1000
Subject: [Twisted-Python] Unicode
In-Reply-To: <20051004010805.3914.1122264389.divmod.quotient.23691@ohm>
References: <4341CAA0.6000600@kenkinder.com>
	<20051004010805.3914.1122264389.divmod.quotient.23691@ohm>
Message-ID: <20051004011102.GO23529@home.puzzling.org>

On Mon, Oct 03, 2005, Jp Calderone wrote:
> On Mon, 03 Oct 2005 18:19:44 -0600, Ken Kinder <ken at kenkinder.com> wrote:
> >The purpose of Python's unicode type is transparent exchange of string
> >objects, whether those string objects are of type str or type unicode.
> >Pretending that isn't so and raising a TypeError is not helpful. I would
> >urge you to AT LEAST provide a detailed explanation in that error,
> >explaining the philosophical disagreement you have with Python's
> >unicode-string conversion behavior and have a flag you can set to
> >disable that check.
> >
> 
> An explanation is more likely to be provided if there is a ticket for such. 
> If it's important to you, <http://www.twistedmatrix.com/bugs/> .  Thanks :)

See also
http://twistedmatrix.com/projects/core/documentation/howto/faq.html#auto25
-- I guess this link could be provided with the exception, although I've
never seen exceptions come with URLs before. More likely it should go in
a comment where the exception is raised.

-Mary



From corydodt at twistedmatrix.com  Mon Oct  3 19:29:23 2005
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Mon, 03 Oct 2005 18:29:23 -0700
Subject: [Twisted-Python] Unicode
In-Reply-To: <20051004011102.GO23529@home.puzzling.org>
References: <4341CAA0.6000600@kenkinder.com>	<20051004010805.3914.1122264389.divmod.quotient.23691@ohm>
	<20051004011102.GO23529@home.puzzling.org>
Message-ID: <4341DAF3.4000609@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Mary Gardiner wrote:

> See also
> http://twistedmatrix.com/projects/core/documentation/howto/faq.html#auto25
> -- I guess this link could be provided with the exception, although I've
> never seen exceptions come with URLs before. More likely it should go in
> a comment where the exception is raised.
> 
> -Mary

URLs in Exceptions are all the rage these days, Mary.  Try running twistd
without installing zope.interface some time ;-)

C

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (MingW32)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFDQdrz3A5SrXAiHQcRApy5AJ9VytK9jnasBxu7MjNMF1twH2GRigCgmoyp
ZBVVB7ytxVLL7IGorPRjetA=
=oYaV
-----END PGP SIGNATURE-----



From mary-twisted at puzzling.org  Mon Oct  3 19:33:05 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Tue, 4 Oct 2005 11:33:05 +1000
Subject: [Twisted-Python] Unicode
In-Reply-To: <4341DAF3.4000609@twistedmatrix.com>
References: <4341CAA0.6000600@kenkinder.com>
	<20051004010805.3914.1122264389.divmod.quotient.23691@ohm>
	<20051004011102.GO23529@home.puzzling.org>
	<4341DAF3.4000609@twistedmatrix.com>
Message-ID: <20051004013305.GP23529@home.puzzling.org>

On Mon, Oct 03, 2005, Cory Dodt wrote:
> URLs in Exceptions are all the rage these days, Mary.  Try running twistd
> without installing zope.interface some time ;-)

Well then we're all set, except I don't think lore will generate
constant #auto* URLs.

-Mary

-- 
<\\mimic> graydon: it's when you start constructing conditional branches in sed that the men in white coats come for you
<graydon> mimic: been there, done that. wrote a qmail crypto extension in sed this summer :)



From andrew-twisted at puzzling.org  Mon Oct  3 20:43:51 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 4 Oct 2005 12:43:51 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] r14614 - Describe
	log.debug, and 'printed' and 'debug' log dict items.
In-Reply-To: <1128114620.7914.35.camel@localhost.localdomain>
References: <E1ELDGl-0004r7-00@wolfwood>
	<1128114620.7914.35.camel@localhost.localdomain>
Message-ID: <20051004024351.GA23017@trogdor.home.puzzling.org>

On Fri, Sep 30, 2005 at 05:10:20PM -0400, Itamar Shtull-Trauring wrote:
> On Thu, 2005-09-29 at 23:17 -0600, Andrew Bennetts wrote:
> > Author: spiv
> > Date: Thu Sep 29 23:17:15 2005
> > New Revision: 14614
> > 
> > Modified:
> >    trunk/doc/core/howto/logging.xhtml
> > Log:
> > Describe log.debug, and 'printed' and 'debug' log dict items.
> 
> log.debug should die, I think. So it probably shouldn't be documented :)

I was also told this by radix on IRC.

I see no deprecation warnings.  I documented it because I noticed a
colleague of mine independently found and used it, and I'd never heard of
it, so I corrected that, because it's clearly part of the public API at the
moment.  If someone who feels confident that they understand the intent of
twisted.python.log well enough wants to stick their neck out and deprecate
debug, please do.  I'm not that person.

I'm not inclined to remove reference to debug from logging.xhtml until it is
actually deprecated.

Corrections and reviews of the logging documentation are most welcome,
though!

-Andrew.




From andrew-twisted at puzzling.org  Mon Oct  3 20:58:28 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 4 Oct 2005 12:58:28 +1000
Subject: [Twisted-Python] Unicode
In-Reply-To: <4341CAA0.6000600@kenkinder.com>
References: <4341CAA0.6000600@kenkinder.com>
Message-ID: <20051004025828.GB23017@trogdor.home.puzzling.org>

On Mon, Oct 03, 2005 at 06:19:44PM -0600, Ken Kinder wrote:
[...]
> 
> The purpose of Python's unicode type is transparent exchange of string
> objects, whether those string objects are of type str or type unicode.
> Pretending that isn't so and raising a TypeError is not helpful. I would
> urge you to AT LEAST provide a detailed explanation in that error,
> explaining the philosophical disagreement you have with Python's
> unicode-string conversion behavior and have a flag you can set to
> disable that check.

The issue is that the python-global default implicit encoding of unicode to
str could be completely wrong for any given protocol and transport instance
(i.e. socket).  Protocol implementations should not be vulnerable to bugs
just because someone adds sys.setdefaultencoding('utf-16') to their
sitecustomize.py.

It's not hard at all to imagine a situation where two different sockets have
two completely different encodings -- e.g. HTTP servers can and should
choose charsets for responses based on what the client request asks for,
iirc.

This is formally addressed in the Twisted documentation -- as a FAQ -- here:

    http://twistedmatrix.com/projects/core/documentation/howto/faq.html#auto25

-Andrew.




From radeex at gmail.com  Tue Oct  4 01:03:32 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Tue, 4 Oct 2005 18:03:32 +1100
Subject: [Twisted-Python] Sprinty Releases
Message-ID: <60ed19d40510040003o2ae3ba6blb3b612dad88a4b73@mail.gmail.com>

On 10/3/05, Moof <moof at metamoof.net> wrote:
> Right now I see five bugs tagged with "release management". I'll have a
> proper look at them later and see what I can do. I suspect, though, that
> much of it will require me to know the build system inside out. Is it
> documented anywhre? Or who can I talk to about working out how it works and
> what sort of times does he or she tend to be online?

Hello, I am he-or-she. This weekend is the Virtual Twisted Sprint.

To All: Be there or be an Internetless shell of a human being!

I will be making a release of Twisted (2.1) and hopefully talking to
other people who are interested in fixing up some release and web-site
issues (perhaps we can even fix a few of them).

I will be online in AU-hours, which is GST+10, but I'll try to be flexible.

--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+



From nico at tekNico.net  Tue Oct  4 01:20:09 2005
From: nico at tekNico.net (Nicola Larosa)
Date: Tue, 04 Oct 2005 09:20:09 +0200
Subject: [Twisted-Python] 
 Re: [Twisted-commits] r14614 - Describe log.debug, and 'printed'
 and 'debug' log dict items.
In-Reply-To: <20051004024351.GA23017@trogdor.home.puzzling.org>
References: <E1ELDGl-0004r7-00@wolfwood>	<1128114620.7914.35.camel@localhost.localdomain>
	<20051004024351.GA23017@trogdor.home.puzzling.org>
Message-ID: <dhtafa$f7c$1@sea.gmane.org>

>> log.debug should die, I think. So it probably shouldn't be documented :)

> I was also told this by radix on IRC.
> 
> I see no deprecation warnings.  I documented it because I noticed a
> colleague of mine independently found and used it, and I'd never heard of
> it, so I corrected that, because it's clearly part of the public API at the
> moment.  If someone who feels confident that they understand the intent of
> twisted.python.log well enough wants to stick their neck out and deprecate
> debug, please do.  I'm not that person.

Also, a few words to the effect of *why* it should be deprecated would be
useful. We use it quite a lot, and I'd appreciate a few comments.

It wouldn't be a big problem should it go away, since we already
monkeypatch t.p.logging a lot, but it is still bewildering to see such
comments without any explanation.

-- 
Nicola Larosa - nico at tekNico.net

How much of what we are should we be proud of? When did we choose the
things that made us smart, knowledgeable, or successful? Should we be
proud? Should we feel superior? Maybe we should just be grateful.
 -- jgoldblog, May 2002




From glyph at divmod.com  Tue Oct  4 02:37:57 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 4 Oct 2005 04:37:57 -0400
Subject: [Twisted-Python] Unicode
In-Reply-To: <4341CAA0.6000600@kenkinder.com>
Message-ID: <20051004083757.3914.504871509.divmod.quotient.23801@ohm>

On Mon, 03 Oct 2005 18:19:44 -0600, Ken Kinder <ken at kenkinder.com> wrote:

>The purpose of Python's unicode type is transparent exchange of string
>objects, whether those string objects are of type str or type unicode.
>Pretending that isn't so and raising a TypeError is not helpful. I would
>urge you to AT LEAST provide a detailed explanation in that error,
>explaining the philosophical disagreement you have with Python's
>unicode-string conversion behavior and have a flag you can set to
>disable that check.

>From http://docs.python.org/api/stringObjects.html:

    "Only string objects are supported; no Unicode objects should be passed."

So there is a precedent for this in the very APIs you are citing :).

You seem to have misunderstood the intent of Python's unicode support.  Python allows byte strings to be treated in the same way as character strings in the areas where such a transposition is useful and semantically valid; in some cases it (uncharacteristically) guesses based on the default encoding.  I say "uncharacteristically" because Python refuses the temptation to guess when presented with, say, an array object containing bytes, integers, or a list of smaller strings.  Automatic conversion is not the norm in Python.

I see others have already relayed you to the FAQ.  Please read the articles attached to it.

As long as I'm writing a list post about this though, let me include another example which may explain why this is an absolutely horrible idea.  There are basically 2 modes that .write() could use to accept a unicode object; one where it would cause random exceptions at runtime based on input, or one where it would generate corrupt data on the network.

Let's say I've got a very simple protocol that writes 2 bytes indicating the length of a string, then a string, like so:

 def writeChunk(self, x):
  self.transport.write(struct.pack("!H", len(x)))
  self.transport.write(x)

If 'x' were a unicode object in this case, we could do one of 2 things:

 A - Write it to the transport as UTF-8/UTF-16 (an encoding that can accept any unicode data)
 B - Write it to the transport using ascii/charmap (the default encoding, or an encoding that will only produce single-byte characters.

Given option A, this code will appear to work until it is passed a unicode string with a code point > '\u00ff'.  At that point, the 'length' prefix will be incorrect; since len() works in terms of code points and not bytes, a phrase like u'Shoot me with a \u2022' will be truncated by the receiving end, possibly into a string which can't even be decoded:

>>> len(u'Shoot me with a \u2022')
17
>>> len(u'Shoot me with a \u2022'.encode('utf8'))
19
>>> len(u'Shoot me with a \u2022'.encode('utf16'))
36
>>> u'Shoot me with a \u2022'.encode('utf16')[:17].decode('utf16')
Traceback (most recent call last):
  File "<stdin>", line 1, in ?
  File "/usr/lib/python2.4/encodings/utf_16.py", line 16, in decode
    return codecs.utf_16_decode(input, errors, True)
UnicodeDecodeError: 'utf16' codec can't decode byte 0x65 in position 16: truncated data


Using option B, we won't produce any invalid data on the network, but we will have to raise exceptions when presented with any *actual* unicode data (as opposed to just ASCII stuck into a unicode-type object):

>>> u'Shoot me with a \u2022'.encode()
Traceback (most recent call last):
  File "<stdin>", line 1, in ?
UnicodeEncodeError: 'ascii' codec can't encode character u'\u2022' in position 16: ordinal not in range(128)

In either case, simple tests where your code is passed english ASCII "unicode" strings will pass, but any actual exercise of unicode for the purpose it was designed (i.e. creating a clear distinction between transport encoding and character set) will fail horribly and possibly inexplicably.

I hope that now you can see why "a flag you can set to disable that check" could not possibly help anyone, and the code will remain as it is.



From clive at darkarts.co.za  Tue Oct  4 07:48:42 2005
From: clive at darkarts.co.za (clive at darkarts.co.za)
Date: Tue, 4 Oct 2005 15:48:42 +0200 (SAST)
Subject: [Twisted-Python] [announce] tada-1.3.1 released
Message-ID: <.82.103.130.3.1128433722.squirrel@webmail.darkarts.co.za>

Description:
This python module is a wrapper module for any DBAPI 2 compatible database
module. It wraps all functions and methods of the origional module and
forces the return of deferreds instead. tada can therefore be considered
to be 'almost' DBAPI compatible as it inherits the compatiblity level of
the wrapped module, but returns twisted deferreds.

tadah - is an additional class: "Tada with Helpers". This class adds some
helper functionality to tada, but breaks strict DBAPI 2 spec.

tao - uses tada and tadah to create an object model for DB access. It is
loosly based on the SQLObject project's usage model, but asynchronous.

Changes:
mostly minor tweaks, and a couple of minor bug fixes. Also added a mini
demo application that uses the tao of tada with wxPython and
threadedselectreactor.

Clive




From dialtone at divmod.com  Tue Oct  4 07:56:07 2005
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Tue, 4 Oct 2005 15:56:07 +0200
Subject: [Twisted-Python] [announce] tada-1.3.1 released
In-Reply-To: <.82.103.130.3.1128433722.squirrel@webmail.darkarts.co.za>
References: <.82.103.130.3.1128433722.squirrel@webmail.darkarts.co.za>
Message-ID: <20051004135607.GK14358@divmod.com>

On Tue, Oct 04, 2005 at 03:48:42PM +0200, clive at darkarts.co.za wrote:

Wonderful!
But I wouldn't mind a link :)

-- 
Valentino Volonghi aka Dialtone
Now Running MacOSX 10.4
Blog: http://vvolonghi.blogspot.com
http://weever.berlios.de
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 186 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20051004/e93db338/attachment.sig>

From clive at darkarts.co.za  Tue Oct  4 08:19:02 2005
From: clive at darkarts.co.za (clive at darkarts.co.za)
Date: Tue, 4 Oct 2005 16:19:02 +0200 (SAST)
Subject: [Twisted-Python] [announce] tada-1.3.1 released (with link)
In-Reply-To: <20051004135607.GK14358@divmod.com>
References: <.82.103.130.3.1128433722.squirrel@webmail.darkarts.co.za>
	<20051004135607.GK14358@divmod.com>
Message-ID: <.82.103.130.3.1128435542.squirrel@webmail.darkarts.co.za>

> Wonderful!
> But I wouldn't mind a link :)

hahah, wow that was silly !!
sorry !!

http://www.darkarts.co.za/projects/tada/

Clive




From y.glodt at sitasoftware.lu  Tue Oct  4 08:35:33 2005
From: y.glodt at sitasoftware.lu (Yves Glodt)
Date: Tue, 04 Oct 2005 16:35:33 +0200
Subject: [Twisted-Python] conch.forwarding tutorial
Message-ID: <43429335.8030600@sitasoftware.lu>

Hello,

can somebody point me at a conch.forwarding tutorial or code example?

I need to create an ssh tunnel on the fly from my daemon and pass a
database connection through that tunnel, is that possible at all?


best regards,
Yves





From bob at redivi.com  Tue Oct  4 08:40:29 2005
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 4 Oct 2005 07:40:29 -0700
Subject: [Twisted-Python] Unicode
In-Reply-To: <20051004083757.3914.504871509.divmod.quotient.23801@ohm>
References: <20051004083757.3914.504871509.divmod.quotient.23801@ohm>
Message-ID: <C2AC94DE-8E91-42CA-9FD9-68143694607A@redivi.com>


On Oct 4, 2005, at 1:37 AM, glyph at divmod.com wrote:

> On Mon, 03 Oct 2005 18:19:44 -0600, Ken Kinder <ken at kenkinder.com>  
> wrote:
>
>
>> The purpose of Python's unicode type is transparent exchange of  
>> string
>> objects, whether those string objects are of type str or type  
>> unicode.
>> Pretending that isn't so and raising a TypeError is not helpful. I  
>> would
>> urge you to AT LEAST provide a detailed explanation in that error,
>> explaining the philosophical disagreement you have with Python's
>> unicode-string conversion behavior and have a flag you can set to
>> disable that check.
>>
>
>
>> From http://docs.python.org/api/stringObjects.html:
>>
>
>    "Only string objects are supported; no Unicode objects should be  
> passed."
>
> So there is a precedent for this in the very APIs you are citing :).
>
> You seem to have misunderstood the intent of Python's unicode  
> support.  Python allows byte strings to be treated in the same way  
> as character strings in the areas where such a transposition is  
> useful and semantically valid; in some cases it  
> (uncharacteristically) guesses based on the default encoding.  I  
> say "uncharacteristically" because Python refuses the temptation to  
> guess when presented with, say, an array object containing bytes,  
> integers, or a list of smaller strings.  Automatic conversion is  
> not the norm in Python.
>
> I see others have already relayed you to the FAQ.  Please read the  
> articles attached to it.
>
> As long as I'm writing a list post about this though, let me  
> include another example which may explain why this is an absolutely  
> horrible idea.  There are basically 2 modes that .write() could use  
> to accept a unicode object; one where it would cause random  
> exceptions at runtime based on input, or one where it would  
> generate corrupt data on the network.
>
> Let's say I've got a very simple protocol that writes 2 bytes  
> indicating the length of a string, then a string, like so:
>
> def writeChunk(self, x):
>  self.transport.write(struct.pack("!H", len(x)))
>  self.transport.write(x)
>
> If 'x' were a unicode object in this case, we could do one of 2  
> things:
>
> A - Write it to the transport as UTF-8/UTF-16 (an encoding that can  
> accept any unicode data)
> B - Write it to the transport using ascii/charmap (the default  
> encoding, or an encoding that will only produce single-byte  
> characters.
>
> Given option A, this code will appear to work until it is passed a  
> unicode string with a code point > '\u00ff'.  At that point, the  
> 'length' prefix will be incorrect; since len() works in terms of  
> code points and not bytes, a phrase like u'Shoot me with a \u2022'  
> will be truncated by the receiving end, possibly into a string  
> which can't even be decoded:

What you mean is a code point > '\u007f', not '\u00ff'... but yeah, I  
agree with all this stuff.  Explicit is better than implicit, and str  
-> unicode implicit conversion is just wrong in almost all cases  
(except when it's knowable pure 7-bit ascii, like a constant or  
symbol in your code).

-bob




From glyph at divmod.com  Tue Oct  4 09:11:30 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 4 Oct 2005 11:11:30 -0400
Subject: [Twisted-Python] Unicode
In-Reply-To: <C2AC94DE-8E91-42CA-9FD9-68143694607A@redivi.com>
Message-ID: <20051004151130.3914.865042523.divmod.quotient.23885@ohm>



On Tue, 4 Oct 2005 07:40:29 -0700, Bob Ippolito <bob at redivi.com> wrote:

>What you mean is a code point > '\u007f', not '\u00ff'... but yeah, I  agree 
>with all this stuff.  Explicit is better than implicit, and str  -> unicode 
>implicit conversion is just wrong in almost all cases  (except when it's 
>knowable pure 7-bit ascii, like a constant or  symbol in your code).

I meant you couldn't do better than \u00ff, since I had previously mentioned the charmap codec:

>>> u'\u00ff'.encode('charmap')
'\xff'

but yes.  The main point is that implicit conversion cannot be made correct in any event.



From corydodt at twistedmatrix.com  Tue Oct  4 09:36:47 2005
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Tue, 04 Oct 2005 08:36:47 -0700
Subject: [Twisted-Python] Unicode
In-Reply-To: <20051004083757.3914.504871509.divmod.quotient.23801@ohm>
References: <20051004083757.3914.504871509.divmod.quotient.23801@ohm>
Message-ID: <4342A18F.70805@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

http://twistedmatrix.com/bugs/issue1245

glyph at divmod.com wrote:
> As long as I'm writing a list post about this though, let me include
> another example which may explain why this is an absolutely horrible
> idea.   ...
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (MingW32)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFDQqGP3A5SrXAiHQcRAsOlAJ4s4N7aA7lXPmvOWGskmxrrWaLZNgCgrR04
kIq0b69POLFxDKo8Xdi9+80=
=rPA6
-----END PGP SIGNATURE-----



From ken at kenkinder.com  Tue Oct  4 10:24:52 2005
From: ken at kenkinder.com (Ken Kinder)
Date: Tue, 04 Oct 2005 10:24:52 -0600
Subject: [Twisted-Python] Unicode
In-Reply-To: <20051004025828.GB23017@trogdor.home.puzzling.org>
References: <4341CAA0.6000600@kenkinder.com>
	<20051004025828.GB23017@trogdor.home.puzzling.org>
Message-ID: <4342ACD4.3030204@kenkinder.com>

Andrew Bennetts wrote:

>The issue is that the python-global default implicit encoding of unicode to
>str could be completely wrong for any given protocol and transport instance
>(i.e. socket).  Protocol implementations should not be vulnerable to bugs
>just because someone adds sys.setdefaultencoding('utf-16') to their
>sitecustomize.py.
>
>It's not hard at all to imagine a situation where two different sockets have
>two completely different encodings -- e.g. HTTP servers can and should
>choose charsets for responses based on what the client request asks for,
>iirc.
>
>This is formally addressed in the Twisted documentation -- as a FAQ -- here:
>
>    http://twistedmatrix.com/projects/core/documentation/howto/faq.html#auto25
>  
>
Fair enough, although perhaps that link should be part of the comment
that reads something to the effect of "no unicode, I mean it."




From slamb at slamb.org  Tue Oct  4 11:00:58 2005
From: slamb at slamb.org (Scott Lamb)
Date: Tue, 4 Oct 2005 10:00:58 -0700
Subject: [Twisted-Python] Re: [Twisted-commits] r14614 - Describe
	log.debug, and 'printed' and 'debug' log dict items.
In-Reply-To: <dhtafa$f7c$1@sea.gmane.org>
References: <E1ELDGl-0004r7-00@wolfwood>	<1128114620.7914.35.camel@localhost.localdomain>
	<20051004024351.GA23017@trogdor.home.puzzling.org>
	<dhtafa$f7c$1@sea.gmane.org>
Message-ID: <20EC6F51-A3D7-4C78-8DFC-2B8A5D21026D@slamb.org>

On Oct 4, 2005, at 12:20 AM, Nicola Larosa wrote:
> Also, a few words to the effect of *why* it should be deprecated  
> would be
> useful. We use it quite a lot, and I'd appreciate a few comments.

Me, too, me too.

In my day job, I develop a lot of Java code. We have the luxury of  
granular logging. I can switch, on a per-class basis, the output  
level to trace, debug, warn, error, or fatal. That's handy.

In Twisted, I see log.msg(), log.debug(), and log.err(). Why is one  
of these levels going away? Is it just not normal to use logging for  
debugging? What do you do instead?

-- 
Scott Lamb <http://www.slamb.org/>





From itamar at itamarst.org  Tue Oct  4 13:06:18 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 04 Oct 2005 15:06:18 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r14614 - Describe
	log.debug, and 'printed' and 'debug' log dict items.
In-Reply-To: <20EC6F51-A3D7-4C78-8DFC-2B8A5D21026D@slamb.org>
References: <E1ELDGl-0004r7-00@wolfwood>
	<1128114620.7914.35.camel@localhost.localdomain>
	<20051004024351.GA23017@trogdor.home.puzzling.org>
	<dhtafa$f7c$1@sea.gmane.org>
	<20EC6F51-A3D7-4C78-8DFC-2B8A5D21026D@slamb.org>
Message-ID: <1128452779.9061.34.camel@localhost.localdomain>

On Tue, 2005-10-04 at 10:00 -0700, Scott Lamb wrote:

> In my day job, I develop a lot of Java code. We have the luxury of  
> granular logging. I can switch, on a per-class basis, the output  
> level to trace, debug, warn, error, or fatal. That's handy.
> 
> In Twisted, I see log.msg(), log.debug(), and log.err(). Why is one  
> of these levels going away? Is it just not normal to use logging for  
> debugging? What do you do instead?

twisted.python.log needs to be rewritten to support more modular
logging; the new API would be "log.msg(something, interface=IFoo)" where
IFoo might be IMessage, or IHTTPRequest for the webserver log, etc.. We
don't have thay yet, unfortunately. log.debug() as it works now is just
broken, it doesn't add anything to log.msg() in a reasonable way.




From exarkun at divmod.com  Tue Oct  4 13:27:30 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Tue, 4 Oct 2005 15:27:30 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r14614 - Describe
	log.debug, and 'printed' and 'debug' log dict items.
In-Reply-To: <20EC6F51-A3D7-4C78-8DFC-2B8A5D21026D@slamb.org>
Message-ID: <20051004192730.3914.659798435.divmod.quotient.23986@ohm>

On Tue, 4 Oct 2005 10:00:58 -0700, Scott Lamb <slamb at slamb.org> wrote:
>On Oct 4, 2005, at 12:20 AM, Nicola Larosa wrote:
>>Also, a few words to the effect of *why* it should be deprecated  would be
>>useful. We use it quite a lot, and I'd appreciate a few comments.
>
>Me, too, me too.
>
>In my day job, I develop a lot of Java code. We have the luxury of  granular 
>logging. I can switch, on a per-class basis, the output  level to trace, 
>debug, warn, error, or fatal. That's handy.
>
>In Twisted, I see log.msg(), log.debug(), and log.err(). Why is one  of 
>these levels going away? Is it just not normal to use logging for 
>debugging? What do you do instead?

One of the functions is going away.  A level isn't going away, because twisted.python.log does not have the notion of "levels" present in other logging systems.

What you can log with twisted.python.log is an event.  A very common kind of event is a byte string - log.msg is often used to emit one of these, but it can emit any kind of event.  Another common event corresponds to an error and is represented by a twisted.python.failure.Failure instance - log.err is a convenience function to construct a Failure from the current Python exception state and emit it.  log.debug is this warty thing that emits a string but also attaches {"debug": 1} to it.  This is completely ignored by the log observer Twisted actually includes.

To emphasize that point, in the default configuration, log.msg() does exactly the same thing as log.debug().

So, it's pointless.  The functionality might be useful, although I've never found it such (print is pretty easy to use, and Python is too slow to leave in debug messages after debugging is finished).  As Itamar pointed out in his post, we have some ideas about providing a lot more structure for the event system, but we haven't gotten around to implementing it.  Once we do, there will be much richer facilities for this kind of behavior.

Jp



From foom at fuhm.net  Tue Oct  4 14:31:58 2005
From: foom at fuhm.net (James Y Knight)
Date: Tue, 4 Oct 2005 16:31:58 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r14614 - Describe
	log.debug, and 'printed' and 'debug' log dict items.
In-Reply-To: <20EC6F51-A3D7-4C78-8DFC-2B8A5D21026D@slamb.org>
References: <E1ELDGl-0004r7-00@wolfwood>	<1128114620.7914.35.camel@localhost.localdomain>
	<20051004024351.GA23017@trogdor.home.puzzling.org>
	<dhtafa$f7c$1@sea.gmane.org>
	<20EC6F51-A3D7-4C78-8DFC-2B8A5D21026D@slamb.org>
Message-ID: <1556117D-3C77-4411-9ADC-137CE5A402A0@fuhm.net>


On Oct 4, 2005, at 1:00 PM, Scott Lamb wrote:

> On Oct 4, 2005, at 12:20 AM, Nicola Larosa wrote:
>
>> Also, a few words to the effect of *why* it should be deprecated  
>> would be
>> useful. We use it quite a lot, and I'd appreciate a few comments.
>>
>
> Me, too, me too.
>
> In my day job, I develop a lot of Java code. We have the luxury of  
> granular logging. I can switch, on a per-class basis, the output  
> level to trace, debug, warn, error, or fatal. That's handy.
>
> In Twisted, I see log.msg(), log.debug(), and log.err(). Why is one  
> of these levels going away? Is it just not normal to use logging  
> for debugging? What do you do instead?

The "log levels", such as they are, are (and have been for ages)  
implemented as keyword args on msg:
log.msg("error message", isError=1)
log.msg("normal message")
log.msg("debug message", debug=1).

The log.debug function just added the debug=1 argument for you.
The log.err func is poorly named, because you might be tempted to use  
it to emit error-level info, when really it is for emitting Exception/ 
Failure objects.

All in all, the log level functionality in twisted.python.log is  
pretty silly, but substantially unchanged.

James



From glyph at divmod.com  Tue Oct  4 15:01:20 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 4 Oct 2005 17:01:20 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r14614 - Describe
	log.debug, and 'printed' and 'debug' log dict items.
In-Reply-To: <1556117D-3C77-4411-9ADC-137CE5A402A0@fuhm.net>
Message-ID: <20051004210120.3914.126245901.divmod.quotient.24025@ohm>



On Tue, 4 Oct 2005 16:31:58 -0400, James Y Knight <foom at fuhm.net> wrote:

>log.msg("error message", isError=1)

Please don't ever do this.  Log observers which check the isError flag expect a stricter interface; a Failure object, for one thing, like log.err puts there.

Really this should be using the interface keyword arg that itamar mentioned, set to something like log.IErrorReport.  To ensure portability when that does become the convention, use log.err.



From andrew-twisted at puzzling.org  Tue Oct  4 17:19:57 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 5 Oct 2005 09:19:57 +1000
Subject: [Twisted-Python] Unicode
In-Reply-To: <20051004013305.GP23529@home.puzzling.org>
References: <4341CAA0.6000600@kenkinder.com>
	<20051004010805.3914.1122264389.divmod.quotient.23691@ohm>
	<20051004011102.GO23529@home.puzzling.org>
	<4341DAF3.4000609@twistedmatrix.com>
	<20051004013305.GP23529@home.puzzling.org>
Message-ID: <20051004231957.GC23017@trogdor.home.puzzling.org>

On Tue, Oct 04, 2005 at 11:33:05AM +1000, Mary Gardiner wrote:
> On Mon, Oct 03, 2005, Cory Dodt wrote:
> > URLs in Exceptions are all the rage these days, Mary.  Try running twistd
> > without installing zope.interface some time ;-)
> 
> Well then we're all set, except I don't think lore will generate
> constant #auto* URLs.

The #auto* ones won't be constant, but if you set <a name="foo">, lore will
use that instead of auto-generating one.

-Andrew.




From tgreenwoodgeer at yahoo.com  Tue Oct  4 18:08:14 2005
From: tgreenwoodgeer at yahoo.com (Todd Greenwood)
Date: Tue, 04 Oct 2005 17:08:14 -0700
Subject: [Twisted-Python] flow example doesn't appear to be 'flowing'
Message-ID: <4343196E.6070503@yahoo.com>

First, thanks for creating this cool tool!

I tried the following example (http://twistedmatrix.com/projects/flow/documentation/howto/flow.html
) ...and what I saw doesn't match the documentation. The docs state that if you launch two browsers 
pointed at this url, that both pages will be built simultaneously, due to the flow/generator 
constructs. However, when I tried this, I saw the web pages being generated sequentially. The second 
page blocked until the first page finished. Is this simply my misunderstanding of the docs, or is 
this page outdated?

REPRO:
$ twistd --version
twistd (the Twisted daemon) 2.0.1
Copyright (c) 2001-2004 Twisted Matrix Laboratories.

$ python flow-demo.py
visit http://localhost:8081/ to view the example

#mozilla browser tab #1 => http://localhost:8081
  30 Random numbers:

    1. 46905
    2. 17955
    3. 62281
    4. 99248
    5. 73635

#mozilla browser tab #2 => http://localhost:8081
  blank until tab #1 has finished (has 30 random numbers)

DETAILS:
http://twistedmatrix.com/projects/flow/documentation/howto/flow.html

Flow Resources

By using flow.Deferred it is easy to make up a web resource which is both long running, but also can 
serve more than one customer at a time. Run the example below, and with two browsers, view the 
webpage. Notice that both web pages are being created at the same time.

from __future__ import generators
from twisted.internet import reactor
from twisted.web import server, resource
from twisted.flow import flow

def cooperative(count):
     """ simulate a cooperative resource, that not block """
     from random import random
     idx = 0
     while idx < count:
         val = random()
         yield flow.Cooperate(val)
         yield str(val)[-5:]
         idx += 1

def flowRender(req):
     count = int(req.args.get("count",["30"])[0])
     req.write("<html><body>")
     req.write(" %s Random numbers: <ol>\n" % count)
     source = flow.wrap(cooperative(count))
     yield source
     for itm in source:
         req.write("<li>%s</li>\n" % itm)
         yield source
     req.write("</ol></body></html>\n")

class FlowResource(resource.Resource):
     def __init__(self, gen):
         resource.Resource.__init__(self)
         self.gen = gen
     def isLeaf(self): return true
     def render(self, req):
         self.d = flow.Deferred(self.gen(req))
         self.d.addCallback(lambda _: req.finish())
         return server.NOT_DONE_YET

print "visit http://localhost:8081/ to view the example"
root = FlowResource(flowRender)
site = server.Site(root)
reactor.listenTCP(8081,site)
reactor.run()


-- 
Todd Greenwood-Geer
tgreenwoodgeer at yahoo.com
________________________________________________________________________________
BEAWorld 2005: coming to a city near you.  Everything you need for SOA and enterprise infrastructure success.

 
Register now at http://www.bea.com/4beaworld

 
London 11-12 Oct| Paris13-14 Oct| Prague18-19 Oct |Tokyo 25-26 Oct| Beijing 7-8 Dec



From foom at fuhm.net  Tue Oct  4 19:05:53 2005
From: foom at fuhm.net (James Y Knight)
Date: Tue, 4 Oct 2005 21:05:53 -0400
Subject: [Twisted-Python] flow example doesn't appear to be 'flowing'
In-Reply-To: <4343196E.6070503@yahoo.com>
References: <4343196E.6070503@yahoo.com>
Message-ID: <5F50A2EB-7C3B-4557-9682-CD0450379419@fuhm.net>


On Oct 4, 2005, at 8:08 PM, Todd Greenwood wrote:

> First, thanks for creating this cool tool!
>
> I tried the following example (http://twistedmatrix.com/projects/ 
> flow/documentation/howto/flow.html
> ) ...and what I saw doesn't match the documentation. The docs state  
> that if you launch two browsers pointed at this url, that both  
> pages will be built simultaneously, due to the flow/generator  
> constructs. However, when I tried this, I saw the web pages being  
> generated sequentially. The second page blocked until the first  
> page finished. Is this simply my misunderstanding of the docs, or  
> is this page outdated?

Try with two browsers, not two tabs in one browser. Due to the way  
the browser implements connection-caching and http keepalive,  
sometimes it will not send a second request to the server until the  
first one has completely downloaded.

James



From foom at fuhm.net  Tue Oct  4 21:18:40 2005
From: foom at fuhm.net (James Y Knight)
Date: Tue, 4 Oct 2005 23:18:40 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r14614 - Describe
	log.debug, and 'printed' and 'debug' log dict items.
In-Reply-To: <20051004210120.3914.126245901.divmod.quotient.24025@ohm>
References: <20051004210120.3914.126245901.divmod.quotient.24025@ohm>
Message-ID: <7120C253-E771-4A76-97BD-EC4801866482@fuhm.net>

On Oct 4, 2005, at 5:01 PM, glyph at divmod.com wrote:
> On Tue, 4 Oct 2005 16:31:58 -0400, James Y Knight <foom at fuhm.net>  
> wrote:
>> log.msg("error message", isError=1)
>
> Please don't ever do this.  Log observers which check the isError  
> flag expect a stricter interface; a Failure object, for one thing,  
> like log.err puts there.

Actually they don't. They expect that the failure keyword may or may  
not be present. The only use of "levels" we have (DefaultObserver  
only showing error messages) filters out any non-isError messages, so  
there are circumstances in which you want to make sure you're  
emitting an isError=1 message.

> Really this should be using the interface keyword arg that itamar  
> mentioned, set to something like log.IErrorReport.  To ensure  
> portability when that does become the convention, use log.err.

But sometimes you cannot use log.err because you want to emit an  
error-level _message_, rather than the repr of an object, an  
exception, or a failure.

Notice how log.err("Foo!") doesn't actually do what you might hope.  
Contrast with log.msg("Foo!", isError=1) which does.

James




From exarkun at divmod.com  Tue Oct  4 21:49:04 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Tue, 4 Oct 2005 23:49:04 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r14614 - Describe
	log.debug, and 'printed' and 'debug' log dict items.
In-Reply-To: <7120C253-E771-4A76-97BD-EC4801866482@fuhm.net>
Message-ID: <20051005034904.3914.363837818.divmod.quotient.24180@ohm>

On Tue, 4 Oct 2005 23:18:40 -0400, James Y Knight <foom at fuhm.net> wrote:
>On Oct 4, 2005, at 5:01 PM, glyph at divmod.com wrote:
>>On Tue, 4 Oct 2005 16:31:58 -0400, James Y Knight <foom at fuhm.net>  wrote:
>>>log.msg("error message", isError=1)
>>
>>Please don't ever do this.  Log observers which check the isError  flag 
>>expect a stricter interface; a Failure object, for one thing,  like log.err 
>>puts there.
>
>Actually they don't. They expect that the failure keyword may or may  not be 
>present. The only use of "levels" we have (DefaultObserver  only showing 
>error messages) filters out any non-isError messages, so  there are 
>circumstances in which you want to make sure you're  emitting an isError=1 
>message.
>>Really this should be using the interface keyword arg that itamar 
>>mentioned, set to something like log.IErrorReport.  To ensure  portability 
>>when that does become the convention, use log.err.
>
>But sometimes you cannot use log.err because you want to emit an  error- 
>level _message_, rather than the repr of an object, an  exception, or a 
>failure.
>
>Notice how log.err("Foo!") doesn't actually do what you might hope. 
>Contrast with log.msg("Foo!", isError=1) which does.

Neither of these is supported behavior.  They're implementation accidents and shouldn't be used.  It's understandable that this is surprising, since I doubt it's ever been written down anywhere.

Jp



From foom at fuhm.net  Wed Oct  5 00:01:28 2005
From: foom at fuhm.net (James Y Knight)
Date: Wed, 05 Oct 2005 00:01:28 -0600
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <E1EN2LI-0006di-00@pyramid.twistedmatrix.com>

Bug summary
______________________
Since 2005-09-28 06:00:02.620000:
 Bugs opened: 26   Bugs closed: 12   Total open bugs: 471 (+14)
  Urgent: 8 (+3)
  Bug: 224 (+12)
  Feature: 161 (-2)
  Wish: 78 (+1)

New / Reopened Bugs
______________________
                    ==== Urgent ====
[CORE] whenThreaded no longer exists in SVN  (yesterday)
       http://twistedmatrix.com/bugs/issue1242 opened by spiv

Change cfreactor to use threadedselectreactor  (yesterday)
CLOSED http://twistedmatrix.com/bugs/issue1241 opened by glyph

Change wxreactor to use threadedselectreactor  (3 days ago)
       http://twistedmatrix.com/bugs/issue1235 opened by exarkun

[CORE] Move Deferred cancellation code out of trunk  (3 days ago)
       http://twistedmatrix.com/bugs/issue1236 opened by exarkun

[WIN32] selectreactor throws exceptions under pressure on windows  (5 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1229 opened by ghazel

                    ==== Bug ====
[DOCUMENTATION] reactor.callWhenRunning is not in the Using Processes document  (yesterday)
       http://twistedmatrix.com/bugs/issue1246 opened by hagna

not writing or writing nothing from resumeProducing breaks production  (yesterday)
CLOSED http://twistedmatrix.com/bugs/issue1243 opened by ghazel

[CORE, WIN32] iocpreator can drop a listening socket by mistake  (yesterday)
       http://twistedmatrix.com/bugs/issue1244 opened by ghazel

[CORE, WIN32] iocpreactor (at least) breaks event concept, leads to crashes  (yesterday)
       http://twistedmatrix.com/bugs/issue1240 opened by ghazel

[DOCUMENTATION] Document branch development policy  (6 days ago)
       http://twistedmatrix.com/bugs/issue1222 opened by hypatia

[TRIAL] trial.test_tests sucks  (6 days ago)
       http://twistedmatrix.com/bugs/issue1221 opened by jml

[CORE, DOCUMENTATION, TRIAL] Failure relies on __str__ not being broken.  (2 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1238 opened by jml

[CORE, TRIAL] twisted.test.test_reflect.LookupsTestCaseII.testExceptionHandling assumes modules not imported  (yesterday)
       http://twistedmatrix.com/bugs/issue1239 opened by jml

[CORE, ENTERPRISE] test_adbapi fails with "relation `simple' already exists" sometimes  (3 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1237 opened by exarkun

[CORE, TRIAL] trial should not crash and burn on exceptions from user code  (3 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1234 opened by exarkun

[CORE] iocpreactor\abstract needs to import socket  (4 days ago)
       http://twistedmatrix.com/bugs/issue1233 opened by ghazel

[TRIAL] TASK: Write tests for module-level sorting in TestLoader  (4 days ago)
       http://twistedmatrix.com/bugs/issue1232 opened by jml

minor English error  (5 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1231 opened by nirs

threadedselectreactor fails to exit  (5 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1230 opened by clive

selectreactor throws exceptions under pressure on windows  (5 days ago)
       http://twistedmatrix.com/bugs/issue1228 opened by ghazel

[VFS] vfs methods should always return deferreds  (5 days ago)
       http://twistedmatrix.com/bugs/issue1223 opened by cablehead

[VFS] consistent rename operation for vfs  (5 days ago)
       http://twistedmatrix.com/bugs/issue1224 opened by cablehead

[VFS] vfs errors  (5 days ago)
       http://twistedmatrix.com/bugs/issue1225 opened by cablehead

[VFS] refactor vfs from using pathutils to twisted.python.filepath  (5 days ago)
       http://twistedmatrix.com/bugs/issue1226 opened by cablehead

[VFS] twisted.vfs - general cleanup  (5 days ago)
       http://twistedmatrix.com/bugs/issue1227 opened by cablehead

                    ==== Wish ====
Add glyph's implicit-encoding-is-bad example to FAQ  (yesterday)
       http://twistedmatrix.com/bugs/issue1245 opened by moonfallen

Bugs Closed
______________________
                    ==== Urgent ====
Change cfreactor to use threadedselectreactor  (yesterday)
       http://twistedmatrix.com/bugs/issue1241 opened by glyph, closed by etrepum

[CORE, TRIAL] BUG: Raising FailTest doesn't always fail a test  (6 months ago)
       http://twistedmatrix.com/bugs/issue955 opened by exarkun, closed by jml

[WIN32] selectreactor throws exceptions under pressure on windows  (5 days ago)
       http://twistedmatrix.com/bugs/issue1229 opened by ghazel, closed by itamarst

                    ==== Bug ====
not writing or writing nothing from resumeProducing breaks production  (yesterday)
       http://twistedmatrix.com/bugs/issue1243 opened by ghazel, closed by exarkun

[CORE, DOCUMENTATION, TRIAL] Failure relies on __str__ not being broken.  (2 days ago)
       http://twistedmatrix.com/bugs/issue1238 opened by jml, closed by jml

[TRIAL] unittest.wait() calls runUntilCurrent recursively  (11 months ago)
       http://twistedmatrix.com/bugs/issue781 opened by exarkun, closed by jml

[CORE, ENTERPRISE] test_adbapi fails with "relation `simple' already exists" sometimes  (3 days ago)
       http://twistedmatrix.com/bugs/issue1237 opened by exarkun, closed by davep

[CORE, TRIAL] trial should not crash and burn on exceptions from user code  (3 days ago)
       http://twistedmatrix.com/bugs/issue1234 opened by exarkun, closed by exarkun

minor English error  (5 days ago)
       http://twistedmatrix.com/bugs/issue1231 opened by nirs, closed by jml

threadedselectreactor fails to exit  (5 days ago)
       http://twistedmatrix.com/bugs/issue1230 opened by clive, closed by etrepum

[CORE, TRIAL] trial's spinWhile and spinUntil have ridiculously small timeouts  (1 week ago)
       http://twistedmatrix.com/bugs/issue1214 opened by exarkun, closed by jml

                    ==== Feature ====
[APPLICATION] pickling protocol in sob  (2 weeks ago)
       http://twistedmatrix.com/bugs/issue1173 opened by antony, closed by exarkun




From andrew-twisted at puzzling.org  Wed Oct  5 01:24:05 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 5 Oct 2005 17:24:05 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] r14614 - Describe
	log.debug, and 'printed' and 'debug' log dict items.
In-Reply-To: <20051005034904.3914.363837818.divmod.quotient.24180@ohm>
References: <7120C253-E771-4A76-97BD-EC4801866482@fuhm.net>
	<20051005034904.3914.363837818.divmod.quotient.24180@ohm>
Message-ID: <20051005072405.GB8424@trogdor.home.puzzling.org>

On Tue, Oct 04, 2005 at 11:49:04PM -0400, Jp Calderone wrote:
> On Tue, 4 Oct 2005 23:18:40 -0400, James Y Knight <foom at fuhm.net> wrote:
[...]
> >
> >Notice how log.err("Foo!") doesn't actually do what you might hope. 
> >Contrast with log.msg("Foo!", isError=1) which does.
> 
> Neither of these is supported behavior.  They're implementation accidents 
> and shouldn't be used.  It's understandable that this is surprising, since 
> I doubt it's ever been written down anywhere.

Would you mind reviewing logging.xhtml to make sure it's perfectly correct
about these matters, then?  I made the best educated guesses about the
intentions of the code that I could, but I might have made some mistakes.

-Andrew.




From mesozoic at polynode.com  Wed Oct  5 09:23:52 2005
From: mesozoic at polynode.com (Alex Levy)
Date: Wed, 05 Oct 2005 11:23:52 -0400
Subject: [Twisted-Python] When can I start using web2?
Message-ID: <4343F008.6070805@polynode.com>

In the VFS thread, Glyph wrote something very discussion-worthy here. I
want to point it out. In one act. No intermission. (Grab a snack.)

I run a website using Moshe's twisted-web, with code built on
twisted.web.woven, and I'm desperate to move. I'm rewriting all my site
code. But right now, web development with Twisted is stuck in limbo. I
don't want to go traipsing off with a Nevow application if there's no
migration path to web2. I don't want to start building with web2 if it's
not stable, or (worse) if it's simply not being developed because
everyone's attention is elsewhere. Where am I going with this? Read on.

glyph at divmod.com wrote:
> web2 should not be a trivial HTTP server with a small resource
> wrapper in it.  It should be a full-featured web server.  Web does
> not mean "http" - all web-related protocols, such as WebDAV, ftp,
> even SOAP or Gopher, should be part of the 'web server' product part
> of Twisted.
>
> Going forward, I will stipulate this requirement: each independent
> Twisted subpackage MUST be at least 2 things: a functioning
> infrastructure layer that can be used by 3rd party applications, and
> an application which can be used standalone or with application
> plugins.  In twisted.web's case this application is a "web server",
> which primarily does HTTP but can provide other request/response
> based protocols as well.  "application plugins" for the web server
> are things that respond to requests for particular URLs.

Glyph's first point is extremely valid: web2 needs to be a
fully-featured server. That means, in my mind, everything that
twisted.web does, then something more. It might be that web2 supports
all of that already, but if so, that support isn't documented very well,
and one very striking reality of today's world is that if your web
framework isn't well-documented, people won't have the patience for it.

A list of things I haven't seen out of web2 yet:

* Painless web server deployment.
Moshe's twisted-web package was a functional, useful package that
allowed sysadmins to set up servers that used twisted.web in a very easy
way. It had things like /etc/twisted-web/local.d, where you could throw
your own deployment scripts, which I've found very useful. It also made
it *dead simple* for someone with just basic knowledge to set up a
working server, even if just for serving static pages. I think that
having something like this included in twisted.web2 would be a great
place to start; wubwubwub is probably the best place to work from.

* File uploads.
This was a major sticking point with twisted.web. In fact, it was the
most commonly-repeated problem I heard, and a problem I know someone,
somewhere, has to have solved by now on their own. So how does this work
in twisted.web2? More importantly, how can it be added to a twisted.web
application that is being migrated? Can it be added piecemeal?
web2/fileupload.py is a bit intimidating; someone needs to lead us
straight to the hidden treasure.

* Clear migration path from an existing twisted.web application.
If I've written an application that has old-style resources, do I even
have an upgrade path? What about twisted.web.distrib? A lot of people
use this, especially with sockets; what's the web2 equivalent?

* Clear migration path from an existing Nevow application.
If I have a Nevow site, a set of resources, and an application that
revolves around them, and I want to start using web2, where do I start?

* Comparison of major design changes.
This ties in with the migration path from Nevow. What the heck does the
streams module do? What's different about the appserver, context,
requests, static files, or virtual hosts?

All of these are things that either do not exist, or do not have
adequate documentation. If twisted.web2 is indeed reliable enough for
people to start building things like WebDAV and Paste scripts on top of
it, then it needs to be cut-and-dry how to do all these things that
we've come to expect from Twisted's next web framework.

-- 
Alex Levy
WWW: http://mesozoic.geecs.org

"Never let your sense of morals prevent you from doing what is right."
 -- Salvor Hardin, Isaac Asimov's _Foundation_



From foom at fuhm.net  Wed Oct  5 10:48:52 2005
From: foom at fuhm.net (James Y Knight)
Date: Wed, 5 Oct 2005 12:48:52 -0400
Subject: [Twisted-Python] When can I start using web2?
In-Reply-To: <4343F008.6070805@polynode.com>
References: <4343F008.6070805@polynode.com>
Message-ID: <72070441-F307-49D0-9F62-7435EBCF8DF2@fuhm.net>


On Oct 5, 2005, at 11:23 AM, Alex Levy wrote:
> Glyph's first point is extremely valid: web2 needs to be a
> fully-featured server. That means, in my mind, everything that
> twisted.web does, then something more. It might be that web2 supports
> all of that already, but if so, that support isn't documented very  
> well

It has some documentation, but of course, it certainly needs more. It  
doesn't yet do everything that twisted.web does. One glaring omission  
is a HTTP client. Another is auth/cookies. I'm working on the first.

> A list of things I haven't seen out of web2 yet:
>
> * Painless web server deployment.

Not done. There is no ready-made server included.

> * File uploads.

Should work, needs documentationing. Summary: fileupload.py is the  
low level functionality that you usually don't need to call directly.  
server.parsePOSTData is the "normal" interface into this system,  
which is what resource.PostableResource calls when confronted with a  
POST. It does what you want most of the time: incrementally parsing  
the form fields into request.args and request.files, putting the  
files in temp files on disk, with some limits on the file size  
(customization of said limits should be pushed out to the toplevel  
functions but hasn't been). request.args is a dict of {fieldname:  
valuestring}, request.files is a dict of {fieldname: (filename,  
content-type, TemporaryFile-instance)}.

> More importantly, how can it be added to a twisted.web
> application that is being migrated? Can it be added piecemeal?

Not entirely sure what you mean, but, the new parsing code is invoked  
when you use a twisted.web resource in a twisted.web2 server.

> * Clear migration path from an existing twisted.web application.
> If I've written an application that has old-style resources, do I even
> have an upgrade path?

Yes, web2 supports old web1 resource hierarchies inside web2 resource  
hierarchies, run by a web2 server.

> What about twisted.web.distrib?

It ought to work with web2.

> A lot of people
> use this, especially with sockets; what's the web2 equivalent?

SCGI should work for that purpose. Eventually, any one of HTTP, SCGI,  
or FastCGI should work for that purpose, but as of yet there is no  
HTTP or FastCGI client implementation.

> * Clear migration path from an existing Nevow application.
> If I have a Nevow site, a set of resources, and an application that
> revolves around them, and I want to start using web2, where do I  
> start?

You don't, yet. While there is currently a working migration path to  
web2 from web1, the migration path from Nevow is so far nonexistent.  
There will have to be one. "Valentino Volonghi aka Dialtone" was  
working on something, but I have not really put any time into it.

> * Comparison of major design changes.
> What the heck does the streams module do?

It has a giant docstring at the top; was it unclear or did you miss it?

> What's different about the appserver, context,
> requests, static files, or virtual hosts?

The margins of my email-client are too small to answer. ;) Probably  
the most interesting difference from Nevow is the Resource/Request API.

James



From andrea at cpushare.com  Wed Oct  5 11:32:26 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Wed, 5 Oct 2005 19:32:26 +0200
Subject: [Twisted-Python] When can I start using web2?
In-Reply-To: <72070441-F307-49D0-9F62-7435EBCF8DF2@fuhm.net>
References: <4343F008.6070805@polynode.com>
	<72070441-F307-49D0-9F62-7435EBCF8DF2@fuhm.net>
Message-ID: <20051005173226.GH5406@opteron.random>

> >* Clear migration path from an existing Nevow application.
> >If I have a Nevow site, a set of resources, and an application that
> >revolves around them, and I want to start using web2, where do I  
> >start?
> 
> You don't, yet. While there is currently a working migration path to  
> web2 from web1, the migration path from Nevow is so far nonexistent.  
> There will have to be one. "Valentino Volonghi aka Dialtone" was  
> working on something, but I have not really put any time into it.

Nevow has its own API, why should it even care about the underlying
infrastructure, be it web or web2?

Just port nevow to web2, and then it should work, no? I don't like the
idea that the nevow API will have to change.

Or do you want to make the nevow API obsolete, and if so why and what
was the problem with it? There are existing apps so I think it'd be
quite important not to require changes to applications while moving from
web to web2. Best would be to have a switch in nevow, so the application
can decide if nevow should base itself on top of web or web2 at runtime.

Thanks.



From tgreenwoodgeer at yahoo.com  Wed Oct  5 12:32:55 2005
From: tgreenwoodgeer at yahoo.com (Todd Greenwood)
Date: Wed, 05 Oct 2005 11:32:55 -0700
Subject: [Twisted-Python] Re: flow example doesn't appear to be 'flowing'
	(James Y Knight)
Message-ID: <43441C57.7020907@yahoo.com>

 >> Try with two browsers, not two tabs in one browser. Due to the way
 >> the browser implements connection-caching and http keepalive,
 >> sometimes it will not send a second request to the server until the
 >> first one has completely downloaded.
 >>
 >> James

James - thanks! Apparently 'File > New Window' wasn't enough with firefox. I had to open a different 
browser (Konqueror) in order to see the expected multi-page rendering in action.

All is working as expected now.

REPRO:
- open http://localhost:8081/ in browser #1 (Firefox)
- open http://localhost:8081/ in browser #2 (Konqueror)
- >> Both pages render random numbers simultaneously, as expected.

-Todd
-- 
Todd Greenwood-Geer
tgreenwoodgeer at yahoo.com

________________________________________________________________________________
BEAWorld 2005: coming to a city near you.  Everything you need for SOA and enterprise infrastructure success.

 
Register now at http://www.bea.com/4beaworld

 
London 11-12 Oct| Paris13-14 Oct| Prague18-19 Oct |Tokyo 25-26 Oct| Beijing 7-8 Dec



From foom at fuhm.net  Wed Oct  5 13:08:37 2005
From: foom at fuhm.net (James Y Knight)
Date: Wed, 5 Oct 2005 15:08:37 -0400
Subject: [Twisted-Python] When can I start using web2?
In-Reply-To: <20051005173226.GH5406@opteron.random>
References: <4343F008.6070805@polynode.com>
	<72070441-F307-49D0-9F62-7435EBCF8DF2@fuhm.net>
	<20051005173226.GH5406@opteron.random>
Message-ID: <77C2B05C-8E6A-4A32-B6B4-509ED1C666FC@fuhm.net>

[Please move conversation to the twisted-web mailing list, where it  
should've been to begin with]

On Oct 5, 2005, at 1:32 PM, Andrea Arcangeli wrote:
> Nevow has its own API, why should it even care about the underlying
> infrastructure, be it web or web2?

Nevow replaces and modifies much of the t.web infrastructure. Thus  
some parts are heavily dependent upon t.web as it is now.

> Just port nevow to web2, and then it should work, no? I don't like the
> idea that the nevow API will have to change.
>
> Or do you want to make the nevow API obsolete, and if so why and what
> was the problem with it? There are existing apps so I think it'd be
> quite important not to require changes to applications while moving  
> from
> web to web2. Best would be to have a switch in nevow, so the  
> application
> can decide if nevow should base itself on top of web or web2 at  
> runtime.

The solution of course is still up in the air, but my view is that  
two things should happen:
1) There _must_ be compatibility with the nevow resource API, similar  
to the already existing compatibility with resources written for the  
web1 resource API.
2) Nevow should aim to divorce itself from the resource API, just  
concerning itself with the rendering process. This would entail  
creating a new class similar to rend.Page but without having its own  
locateChild/renderHTTP, that can then be added into the class for the  
resource model of your framework of choice. I'm not exactly sure how  
that would work, though.

James



From tgreenwoodgeer at yahoo.com  Wed Oct  5 14:47:21 2005
From: tgreenwoodgeer at yahoo.com (Todd Greenwood)
Date: Wed, 05 Oct 2005 13:47:21 -0700
Subject: [Twisted-Python] twisted.trial : running tests : example requested
Message-ID: <43443BD9.4070007@yahoo.com>

1. I saw an email thread that stated that the twisted.trial.doctest feature is going away, is this 
true? If not, could I get a simple example?

2. I am working thru the docs at: 
http://twistedmatrix.com/projects/core/documentation/howto/policy/test-standard.html and the section 
'Running the Tests' doesn't make sense to me:
"""
Running the Tests
How

$ Twisted/admin/runtests
"""
2.a I don't have either the Twisted directory or the Twisted/admin/runtests. Is this the current way 
to run tests?

2.b I have looked for the 'runtests' after installing via debian's apt-get (below) and building off 
the latest svn source:

$ svn info
Path: .
URL: svn://svn.twistedmatrix.com/svn/Twisted/trunk
Repository UUID: bbbe8e31-12d6-0310-92fd-ac37d47ddeeb


$ dpkg -l | grep wist | sed -e 's/-8.*$/-8/g' -e 's/ii//g'
   python-twisted                     1.3.0-8
   python-twisted-conch               1.3.0-8
   python2.2-twisted                  1.3.0-8
   python2.2-twisted-bin              1.3.0-8
   python2.2-twisted-conch            1.3.0-8
   python2.3-twisted                  1.3.0-8
   python2.3-twisted-bin              1.3.0-8
   python2.3-twisted-conch            1.3.0-8
   twisted-doc                        1.3.0-8
   twisted-doc-api                    1.3.0-8
   twisted-quotes                     1.3.0-8

-Todd
-- 
Todd Greenwood-Geer
tgreenwoodgeer at yahoo.com
________________________________________________________________________________
BEAWorld 2005: coming to a city near you.  Everything you need for SOA and enterprise infrastructure success.

 
Register now at http://www.bea.com/4beaworld

 
London 11-12 Oct| Paris13-14 Oct| Prague18-19 Oct |Tokyo 25-26 Oct| Beijing 7-8 Dec



From exarkun at divmod.com  Wed Oct  5 15:57:40 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Wed, 5 Oct 2005 17:57:40 -0400
Subject: [Twisted-Python] twisted.trial : running tests : example requested
In-Reply-To: <43443BD9.4070007@yahoo.com>
Message-ID: <20051005215740.3914.316935665.divmod.quotient.24512@ohm>

On Wed, 05 Oct 2005 13:47:21 -0700, Todd Greenwood <tgreenwoodgeer at yahoo.com> wrote:
>1. I saw an email thread that stated that the twisted.trial.doctest feature 
>is going away, is this true? If not, could I get a simple example?

Hopefully.  It's embarassing.

>
>2. I am working thru the docs at: 
>http://twistedmatrix.com/projects/core/documentation/howto/policy/test- 
>standard.html and the section 'Running the Tests' doesn't make sense to me:
>"""
>Running the Tests
>How
>
>$ Twisted/admin/runtests
>"""

This was true for older releases. Now it's "trial twisted".

Jp



From jml at mumak.net  Wed Oct  5 16:41:21 2005
From: jml at mumak.net (Jonathan Lange)
Date: Thu, 6 Oct 2005 09:41:21 +1100
Subject: [Twisted-Python] twisted.trial : running tests : example requested
In-Reply-To: <20051005215740.3914.316935665.divmod.quotient.24512@ohm>
References: <43443BD9.4070007@yahoo.com>
	<20051005215740.3914.316935665.divmod.quotient.24512@ohm>
Message-ID: <d06a5cd30510051541i3c9715c2h@mail.gmail.com>

On 06/10/05, Jp Calderone <exarkun at divmod.com> wrote:
> On Wed, 05 Oct 2005 13:47:21 -0700, Todd Greenwood <tgreenwoodgeer at yahoo.com> wrote:
> >1. I saw an email thread that stated that the twisted.trial.doctest feature
> >is going away, is this true? If not, could I get a simple example?
>
> Hopefully.  It's embarassing.
>

It's not going away (yet).  It will be in 2.1.
You can find an example of its use in twisted/web2/test/test_stream.py
(in svn).


> >2. I am working thru the docs at:
> >http://twistedmatrix.com/projects/core/documentation/howto/policy/test-
> >standard.html and the section 'Running the Tests' doesn't make sense to me:
> >"""
> >Running the Tests
> >How
> >
> >$ Twisted/admin/runtests
> >"""
>
> This was true for older releases. Now it's "trial twisted".
>

In svn, it's "trial twisted".
In the most recent release it is "trial -R twisted".

cheers,
jml



From andrew-twisted at puzzling.org  Thu Oct  6 00:24:23 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu, 6 Oct 2005 16:24:23 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] r14597 - try enabling
	SO_REUSEADDR on windows
In-Reply-To: <E1EKyIR-0004Vi-00@wolfwood>
References: <E1EKyIR-0004Vi-00@wolfwood>
Message-ID: <20051006062423.GA8155@trogdor.home.puzzling.org>

On Thu, Sep 29, 2005 at 07:17:59AM -0600, Itamar Shtull-Trauring wrote:
> Author: itamarst
> Date: Thu Sep 29 07:17:59 2005
> New Revision: 14597
> 
> Modified:
>    trunk/twisted/internet/tcp.py
> Log:
> try enabling SO_REUSEADDR on windows

This appears to have broken
twisted.test.test_tcp.CannotBindTestCase.testCannotBind on windows.  Excerpt
from <http://twistedmatrix.com/buildbot/win32/builds/719/default/2>:

===============================================================================
[FAIL]: twisted.test.test_tcp.CannotBindTestCase.testCannotBind

  File "c:\buildslave\w32\W32-full2.2\Twisted\twisted\internet\defer.py", line 109, in maybeDeferred
    result = f(*args, **kw)
  File "c:\buildslave\w32\W32-full2.2\Twisted\twisted\test\test_tcp.py", line 451, in testCannotBind
    reactor.listenTCP, n, f, interface='127.0.0.1')
  File "c:\buildslave\w32\W32-full2.2\Twisted\twisted\trial\unittest.py", line 115, in failUnlessRaises
    raise FailTest('%s not raised (%r returned)'
twisted.trial.unittest.FailTest: CannotListenError not raised (<<class 'twisted.internet.tcp.Port'> of twisted.test.test_tcp.MyServerFactory on 4967> returned)
===============================================================================

-Andrew.




From itamar at itamarst.org  Thu Oct  6 07:08:29 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 06 Oct 2005 09:08:29 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r14597 - try enabling
	SO_REUSEADDR on windows
In-Reply-To: <20051006062423.GA8155@trogdor.home.puzzling.org>
References: <E1EKyIR-0004Vi-00@wolfwood>
	<20051006062423.GA8155@trogdor.home.puzzling.org>
Message-ID: <1128604109.8775.20.camel@localhost.localdomain>

On Thu, 2005-10-06 at 16:24 +1000, Andrew Bennetts wrote:
> On Thu, Sep 29, 2005 at 07:17:59AM -0600, Itamar Shtull-Trauring wrote:
> > Author: itamarst
> > Date: Thu Sep 29 07:17:59 2005
> > New Revision: 14597
> > 
> > Modified:
> >    trunk/twisted/internet/tcp.py
> > Log:
> > try enabling SO_REUSEADDR on windows
> 
> This appears to have broken
> twisted.test.test_tcp.CannotBindTestCase.testCannotBind on windows.  Excerpt
> from <http://twistedmatrix.com/buildbot/win32/builds/719/default/2>: 

Yeah... I will note this in issue, with some suggestions, and hopefully
someone with Windows can deal with this on the weekend.




From itamar at itamarst.org  Thu Oct  6 07:18:11 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 06 Oct 2005 09:18:11 -0400
Subject: [Twisted-Python] twisted.trial : running tests : example requested
In-Reply-To: <d06a5cd30510051541i3c9715c2h@mail.gmail.com>
References: <43443BD9.4070007@yahoo.com>
	<20051005215740.3914.316935665.divmod.quotient.24512@ohm>
	<d06a5cd30510051541i3c9715c2h@mail.gmail.com>
Message-ID: <1128604692.8775.22.camel@localhost.localdomain>

On Thu, 2005-10-06 at 09:41 +1100, Jonathan Lange wrote:
> On 06/10/05, Jp Calderone <exarkun at divmod.com> wrote:
> > On Wed, 05 Oct 2005 13:47:21 -0700, Todd Greenwood <tgreenwoodgeer at yahoo.com> wrote:
> > >1. I saw an email thread that stated that the twisted.trial.doctest feature
> > >is going away, is this true? If not, could I get a simple example?
> >
> > Hopefully.  It's embarassing.
> >
> 
> It's not going away (yet).  It will be in 2.1.
> You can find an example of its use in twisted/web2/test/test_stream.py
> (in svn).

Running that gives me some passing tests, but also:
IMPORT ERROR:

Could not import twisted.web2.stream:
  File "/home/itamarst/devel/python/Twisted/twisted/trial/runner.py",
line 710, in loadDoctests
    return super(SafeTestLoader, self).loadDoctests(module)
  File "/home/itamarst/devel/python/Twisted/twisted/trial/runner.py",
line 672, in loadDoctests
    return DocTestSuite(module)
  File "/home/itamarst/devel/python/Twisted/twisted/trial/runner.py",
line 102, in __init__
    suite = doctest.DocTestSuite(testModule)
  File "/home/itamarst/devel/python/Twisted/twisted/trial/doctest.py",
line 2239, in DocTestSuite
    return self._dt_test.name
exceptions.AttributeError: 'module' object has no attribute 'TestSuite'





From tdickenson at devmail.geminidataloggers.co.uk  Thu Oct  6 07:50:28 2005
From: tdickenson at devmail.geminidataloggers.co.uk (Toby Dickenson)
Date: Thu, 6 Oct 2005 14:50:28 +0100
Subject: [Twisted-Python] threadedwin32eventreactor.py
Message-ID: <200510061450.28220.tdickenson@devmail.geminidataloggers.co.uk>

I am looking to combine the foreign event loop joy of threadedselectreactor, 
with the WaitForMultipleObject joy of win32eventreactor. 

Has anyone else looked at this combination?

-- 
Toby Dickenson



From itamar at itamarst.org  Thu Oct  6 08:01:27 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 06 Oct 2005 10:01:27 -0400
Subject: [Twisted-Python] threadedwin32eventreactor.py
In-Reply-To: <200510061450.28220.tdickenson@devmail.geminidataloggers.co.uk>
References: <200510061450.28220.tdickenson@devmail.geminidataloggers.co.uk>
Message-ID: <1128607287.8775.28.camel@localhost.localdomain>

On Thu, 2005-10-06 at 14:50 +0100, Toby Dickenson wrote:
> I am looking to combine the foreign event loop joy of threadedselectreactor, 
> with the WaitForMultipleObject joy of win32eventreactor. 
> 
> Has anyone else looked at this combination?

tsr as is needs to be completely refactored to support that, so in it's
current form tsr is probably not going to be a public API (wxPython will
be supported via a wxreactor that uses tsr internally).

So, if you want to work on this the best approach is to think about how
to refactor existing reactors so they can be hooked up in a tsr-like
fashion.




From bob at redivi.com  Thu Oct  6 12:32:12 2005
From: bob at redivi.com (Bob Ippolito)
Date: Thu, 6 Oct 2005 11:32:12 -0700
Subject: [Twisted-Python] threadedwin32eventreactor.py
In-Reply-To: <1128607287.8775.28.camel@localhost.localdomain>
References: <200510061450.28220.tdickenson@devmail.geminidataloggers.co.uk>
	<1128607287.8775.28.camel@localhost.localdomain>
Message-ID: <8D775D44-C8AA-4532-91E2-3C213CBEBB5B@redivi.com>


On Oct 6, 2005, at 7:01 AM, Itamar Shtull-Trauring wrote:

> On Thu, 2005-10-06 at 14:50 +0100, Toby Dickenson wrote:
>
>> I am looking to combine the foreign event loop joy of  
>> threadedselectreactor,
>> with the WaitForMultipleObject joy of win32eventreactor.
>>
>> Has anyone else looked at this combination?
>>
>
> tsr as is needs to be completely refactored to support that, so in  
> it's
> current form tsr is probably not going to be a public API (wxPython  
> will
> be supported via a wxreactor that uses tsr internally).
>
> So, if you want to work on this the best approach is to think about  
> how
> to refactor existing reactors so they can be hooked up in a tsr-like
> fashion.

The idea with tsr was to show how useful it would be to have an  
"interleave" API for reactors and to do all socket IO in a separate  
thread.  Ideally, all reactors would support this API and tsr would  
go away.  It should be pretty trivial to mostly cut and paste from  
tsr and win32eventreactor and end up with what you want.

-bob




From BRADLEY.S.GASPARD at saic.com  Fri Oct  7 10:09:30 2005
From: BRADLEY.S.GASPARD at saic.com (Gaspard, Bradley S)
Date: Fri, 7 Oct 2005 12:09:30 -0400 
Subject: [Twisted-Python] DHCP client implementation using twisted
Message-ID: <4797F6E414C24D4A96AAC14B320BCAD70FA4F0@0015-its-exmb02.us.saic.com>

Hello,

 

I've browsed the documentation and mailing list and did a Google search but
could find nothing useful. I'm wondering if anyone could point me to a DHCP
client implementation. In lieu of that, any thoughts on how difficult it
would be write a DHCP client for a Twisted newbie?

 

Any guidance would be appreciated.

 

Brad

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20051007/8d58a06d/attachment.html>

From Henning.Ramm at mediapro-gmbh.de  Fri Oct  7 10:54:51 2005
From: Henning.Ramm at mediapro-gmbh.de (Henning.Ramm at mediapro-gmbh.de)
Date: Fri, 7 Oct 2005 18:54:51 +0200
Subject: [Twisted-Python] Conch SSH client howto
Message-ID: <F92274058556DE42B94B148EEFB91839021CB5A3@exchange-03.suedkurier.de>

Ahoi!

Is the conch ssh client howto example (see below) supposed to work?
http://twistedmatrix.com/projects/conch/documentation/howto/conch_client.html

I only changed the user, keys and server information and added some print statements.

If verifyHostKey fails, I get no error message (looks like it should raise a ConchError), the script only stays quiet.

If that works, connectionSecure is called once, then getPublicKey 7 times, after that nothing happens in eternity.
The pubKey seems to be ok, otherwise I got a BadKeyError.

Any hints?

Best regards,
Henning Hraban Ramm
Südkurier Medienhaus / MediaPro
Support/Admin/Development Dept.



From steve at blighty.com  Fri Oct  7 10:52:23 2005
From: steve at blighty.com (Steve Atkins)
Date: Fri, 7 Oct 2005 09:52:23 -0700
Subject: [Twisted-Python] DHCP client implementation using twisted
In-Reply-To: <4797F6E414C24D4A96AAC14B320BCAD70FA4F0@0015-its-exmb02.us.saic.com>
References: <4797F6E414C24D4A96AAC14B320BCAD70FA4F0@0015-its-exmb02.us.saic.com>
Message-ID: <20051007165223.GA15307@gp.word-to-the-wise.com>

On Fri, Oct 07, 2005 at 12:09:30PM -0400, Gaspard, Bradley S wrote:

> I've browsed the documentation and mailing list and did a Google search but
> could find nothing useful. I'm wondering if anyone could point me to a DHCP
> client implementation. In lieu of that, any thoughts on how difficult it
> would be write a DHCP client for a Twisted newbie?
> 
>  
> 
> Any guidance would be appreciated.

I'm the opposite of a Twisted expert, but writing a DHCP client in any
language isn't trivial. DHCP ideally requires raw socket access and
has to work before the IP stack is fully up and running.

It's about the last application I'd consider using to learn a new
development platform. It's also something that, to me, doesn't sound
like a useful thing to have an async implementation of - if you're
reconfiguring your network interface, what else are you wanting to
use the network for at the same time?

"Anemon" is a python implementation of DHCP, IIRC.

Cheers,
  Steve



From tdickenson at devmail.geminidataloggers.co.uk  Fri Oct  7 10:58:26 2005
From: tdickenson at devmail.geminidataloggers.co.uk (Toby Dickenson)
Date: Fri, 7 Oct 2005 17:58:26 +0100
Subject: [Twisted-Python] threadedwin32eventreactor.py
In-Reply-To: <8D775D44-C8AA-4532-91E2-3C213CBEBB5B@redivi.com>
References: <200510061450.28220.tdickenson@devmail.geminidataloggers.co.uk>
	<1128607287.8775.28.camel@localhost.localdomain>
	<8D775D44-C8AA-4532-91E2-3C213CBEBB5B@redivi.com>
Message-ID: <200510071758.26568.tdickenson@devmail.geminidataloggers.co.uk>

On Thursday 06 October 2005 19:32, Bob Ippolito wrote:
>  It should be pretty trivial to mostly cut and paste from  
> tsr and win32eventreactor and end up with what you want.

Thanks for the prod. That approach *was* easier than I expected. I now have a 
threadedwin32eventreactor that seems to mostly work.

> On Oct 6, 2005, at 7:01 AM, Itamar Shtull-Trauring wrote:
> > So, if you want to work on this the best approach is to think about  
> > how to refactor existing reactors so they can be hooked up in a
> > tsr-like fashion.

That looks like it should be viable,

> > (wxPython will be supported via a wxreactor that uses tsr internally).

Thats interesting, because it gives a new dimension of reactor combinations.
{qtreactor,wxreactor,etc} layered on 
{threadedselectreactor,threadedwin32eventreactor,threadedpollreactor,etc}

The only heavy lifting performed by your new wxreactor relates to shutdown of 
the reactor/wx loop. Im finding the same thing when integrating with the pyqt 
loop.

Hmmmmmm.

-- 
Toby Dickenson



From itamar at itamarst.org  Fri Oct  7 11:03:40 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 07 Oct 2005 13:03:40 -0400
Subject: [Twisted-Python] threadedwin32eventreactor.py
In-Reply-To: <200510071758.26568.tdickenson@devmail.geminidataloggers.co.uk>
References: <200510061450.28220.tdickenson@devmail.geminidataloggers.co.uk>
	<1128607287.8775.28.camel@localhost.localdomain>
	<8D775D44-C8AA-4532-91E2-3C213CBEBB5B@redivi.com>
	<200510071758.26568.tdickenson@devmail.geminidataloggers.co.uk>
Message-ID: <1128704621.8827.8.camel@localhost.localdomain>

On Fri, 2005-10-07 at 17:58 +0100, Toby Dickenson wrote:

> Thats interesting, because it gives a new dimension of reactor combinations.
> {qtreactor,wxreactor,etc} layered on 
> {threadedselectreactor,threadedwin32eventreactor,threadedpollreactor,etc}
> 
> The only heavy lifting performed by your new wxreactor relates to shutdown of 
> the reactor/wx loop. Im finding the same thing when integrating with the pyqt 
> loop.

Twisted already has a good qt reactor, though I suppose you might
actually want win32eventreactor integration on Windows. Yay Windows. For
wxreactor the shutdown code is already done in a branch rewrite of
wxreactor (viewcvs at
http://svn.twistedmatrix.com/cvs/branches/itamar/issue-1235/) which
should be integrated this weekend I hope.




From Henning.Ramm at mediapro-gmbh.de  Fri Oct  7 11:21:15 2005
From: Henning.Ramm at mediapro-gmbh.de (Henning.Ramm at mediapro-gmbh.de)
Date: Fri, 7 Oct 2005 19:21:15 +0200
Subject: [Twisted-Python] Conch SSH client howto
Message-ID: <F92274058556DE42B94B148EEFB91839021CB5A4@exchange-03.suedkurier.de>

> connectionSecure is called once, then getPublicKey 7 times, after that nothing happens in eternity.
> The pubKey seems to be ok, otherwise I got a BadKeyError.

Sorry for bothering you - after I hooked up twisted logging, I know what's going on:

[INFO] Starting factory <twisted.internet.protocol.ClientFactory instance at 0x015587D8>
[INFO] Enabling Multithreading.
[INFO] starting waker
[INFO] kex alg, key alg: diffie-hellman-group-exchange-sha1 ssh-rsa
[INFO] client->server: aes256-ctr hmac-sha1 none
[INFO] server->client: aes256-ctr hmac-sha1 none
[INFO] Transport verifyHostKey: ac:ff:b7:bd:90:a4:98:f0:42:eb:07:16:c0:9a:6e:f8
[INFO] Transport connectionSecure
[INFO] starting service ssh-userauth
[INFO] can continue with: ['publickey', 'password', 'keyboard-interactive']
[INFO] trying to auth with publickey
[INFO] AuthClient getPublicKey
[INFO] using key of type ssh-rsa

(last 4 lines repeated 7 times)

[ERROR] Got remote error, code 2
reason: Too many authentication failures for ppi
[INFO] connection lost
[INFO] Stopping factory <twisted.internet.protocol.ClientFactory instance at 0x015587D8>

I still have no idea why key auth doesn't work and how to enable password auth, but I will find out.
(That would be easier if conch.ssh had proper API docs, though.)

Best regards,
Henning Hraban Ramm
Südkurier Medienhaus / MediaPro
Support/Admin/Development Dept.



From foom at fuhm.net  Fri Oct  7 11:31:02 2005
From: foom at fuhm.net (James Y Knight)
Date: Fri, 7 Oct 2005 13:31:02 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r14683 - Make the
	toMainThread Queue unlimited in size, instead of max size 1. 
In-Reply-To: <E1ENtn5-00011b-00@wolfwood>
References: <E1ENtn5-00011b-00@wolfwood>
Message-ID: <ECE6DB94-7530-4B24-946B-CBCE17E22255@fuhm.net>


On Oct 7, 2005, at 11:05 AM, Stephen Thorne wrote:
> Make the toMainThread Queue unlimited in size, instead of max size 1.
> This can cause deadlocks.

Why does it cause deadlocks? That queue should be the only lock the  
tsr thread blocks upon, besides the GIL. Making the queue infinite  
means the tsr thread could sit there generating large amounts of  
events before the main thread gets around to reading any of them,  
getting in a state of continuous backlog and badness. From what I can  
see, the select thread *should* block until the main thread has read  
the data.

James




From stephen at thorne.id.au  Fri Oct  7 20:30:50 2005
From: stephen at thorne.id.au (Stephen Thorne)
Date: Sat, 8 Oct 2005 12:30:50 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] r14683 - Make
	thetoMainThread Queue unlimited in size, instead of max size 1. 
In-Reply-To: <ECE6DB94-7530-4B24-946B-CBCE17E22255@fuhm.net>
Message-ID: <20051008023050.3914.1977843664.divmod.quotient.25552@ohm>

On Fri, 7 Oct 2005 13:31:02 -0400, James Y Knight <foom at fuhm.net> wrote:
>
>On Oct 7, 2005, at 11:05 AM, Stephen Thorne wrote:
>>Make the toMainThread Queue unlimited in size, instead of max size 1.
>>This can cause deadlocks.
>
>Why does it cause deadlocks? That queue should be the only lock the  tsr 
>thread blocks upon, besides the GIL. Making the queue infinite  means the 
>tsr thread could sit there generating large amounts of  events before the 
>main thread gets around to reading any of them,  getting in a state of 
>continuous backlog and badness. From what I can  see, the select thread 
>*should* block until the main thread has read  the data.

I'm not exactly sure, but it was deterministic. test_internet.InterfaceTestCase.testWakeUp would cause the reactor to stop dead.

It seems there are significant memory consumption issues, i'm in the process of figuring out if putting a sane upper limit on the queue (suggestions have ranged from 100's to 100,000's) will stop my poor powermac from being brought to its knees by threadedselectreactor.

There are quite a few more failures in threadedselectreactor, I'm seeing non-deterministic behaviour, things like tcp.Client using reactor.callLater(0, self.failIfNotConnected, error) being a problem - because if the fork in the code is taken that goes to that state, self.socket doesn't get defined, and code can end up trying to write to that socket and getting an AttributeError......

Suffice it to say, I'm working on the issues here, and I want my buidslave all green and pretty, I'll see about getting this resolved before the end of the weekend.

Stephen.



From drakesmith at adelphia.net  Fri Oct  7 21:04:01 2005
From: drakesmith at adelphia.net (Drake Smith)
Date: Fri, 07 Oct 2005 23:04:01 -0400
Subject: [Twisted-Python] How to emulate Python's getoutput function
Message-ID: <5.1.0.14.0.20051007225227.02b3b670@mail.adelphia.net>

Is there a relatively simple way to emulate the following python function:
   commands.getoutput ('ifconfig eth0 | grep inet'))

I can get halfway there with:
   utils.getProcessOutput ('/sbin/ifconfig', ['eth0'])
but the trick to piping that output to another command such as grep is 
eluding me. Thank you.




From exarkun at divmod.com  Fri Oct  7 21:35:29 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Fri, 7 Oct 2005 23:35:29 -0400
Subject: [Twisted-Python] How to emulate Python's getoutput function
In-Reply-To: <5.1.0.14.0.20051007225227.02b3b670@mail.adelphia.net>
Message-ID: <20051008033529.3914.2127255509.divmod.quotient.25566@ohm>

On Fri, 07 Oct 2005 23:04:01 -0400, Drake Smith <drakesmith at adelphia.net> wrote:
>Is there a relatively simple way to emulate the following python function:
>   commands.getoutput ('ifconfig eth0 | grep inet'))

For the particular case of grep, this is pretty straightfoward:

    def gotOutput(output):
        lines = output.splitlines()
        for L in lines:
            if 'inet' in L:
                yield L
    utils.getProcessOutput(...).addCallback(gotOutput).addCallback(something)

For the general case of chaining processes, you need to get down to reactor.spawnProcess().  This API lets you specify which file descriptors are connected to what.  A pipe ends up being just that - use os.pipe() to create one, hand one end to the stdout of one process and the other end to the stdin of another, and now they're talking :)

Hope this helps,

Jp



From radeex at gmail.com  Fri Oct  7 21:40:03 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Sat, 8 Oct 2005 14:40:03 +1100
Subject: [Twisted-Python] How to emulate Python's getoutput function
In-Reply-To: <5.1.0.14.0.20051007225227.02b3b670@mail.adelphia.net>
References: <5.1.0.14.0.20051007225227.02b3b670@mail.adelphia.net>
Message-ID: <60ed19d40510072040x65b00cc3oe862cca72c9f8aab@mail.gmail.com>

On 10/8/05, Drake Smith <drakesmith at adelphia.net> wrote:
> Is there a relatively simple way to emulate the following python function:
>    commands.getoutput ('ifconfig eth0 | grep inet'))
>
> I can get halfway there with:
>    utils.getProcessOutput ('/sbin/ifconfig', ['eth0'])
> but the trick to piping that output to another command such as grep is
> eluding me. Thank you.

make the command "sh", and the arguments ['-c', 'shell string']. Of
course, this means you're opening yourself up to shell insertion
attacks if you put any user-input into that shell string.


--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+



From drakesmith at adelphia.net  Fri Oct  7 22:08:13 2005
From: drakesmith at adelphia.net (Drake Smith)
Date: Sat, 08 Oct 2005 00:08:13 -0400
Subject: [Twisted-Python] How to emulate Python's getoutput function
In-Reply-To: <60ed19d40510072040x65b00cc3oe862cca72c9f8aab@mail.gmail.co
 m>
References: <5.1.0.14.0.20051007225227.02b3b670@mail.adelphia.net>
	<5.1.0.14.0.20051007225227.02b3b670@mail.adelphia.net>
Message-ID: <5.1.0.14.0.20051007235753.02bd1d78@mail.adelphia.net>

At 02:40 PM 10/8/2005 +1100, you wrote:
>On 10/8/05, Drake Smith <drakesmith at adelphia.net> wrote:
> > Is there a relatively simple way to emulate the following python function:
> >    commands.getoutput ('ifconfig eth0 | grep inet'))
> >
> > I can get halfway there with:
> >    utils.getProcessOutput ('/sbin/ifconfig', ['eth0'])
> > but the trick to piping that output to another command such as grep is
> > eluding me. Thank you.
>
>make the command "sh", and the arguments ['-c', 'shell string']. Of
>course, this means you're opening yourself up to shell insertion
>attacks if you put any user-input into that shell string.
>
>
>--
>   Twisted   |  Christopher Armstrong: International Man of Twistery
>    Radix    |    -- http://radix.twistedmatrix.com
>             |  Release Manager, Twisted Project
>   \\\V///   |    -- http://twistedmatrix.com
>    |o O|    |
>w----v----w-+
>
>
>From: Jp Calderone <exarkun at divmod.com>
>
>For the particular case of grep, this is pretty straightfoward:
>   def gotOutput(output):
>      lines = output.splitlines()
>      for L in lines:
>      if 'inet' in L:
>         yield L
>   utils.getProcessOutput(...).addCallback(gotOutput).addCallback(something)
>
>For the general case of chaining processes, you need to get down to 
>reactor.spawnProcess(). This API lets you specify which file descriptors 
>are connected to what. A pipe ends up being just that - use os.pipe() to 
>create one, hand one end to the stdout of one process and the other end to 
>the stdin of another, and now they're talking :)
>
>Hope this helps,
>
>Jp

Thank you Christopher and JP for your answers. They both work like a charm 
and I can use both techniques in my current project.




From radeex at gmail.com  Sat Oct  8 00:17:16 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Sat, 8 Oct 2005 17:17:16 +1100
Subject: [Twisted-Python] The Twisted Sprint is On
Message-ID: <60ed19d40510072317o690db5d3v7ffac22a117ff62f@mail.gmail.com>

We're all in #twisted hacking away at Twisted to improve Trial, the
release, documentation, and so forth. We'll be going all weekend, so
please stop by #twisted on irc.freenode.net if you want to get
involved or just gape in horror at the chaotic development process.

The most popular times to be on will be Australian-EST prime time,
US-EST prime time, and especially the collissions between them.


--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+



From dreid at dreid.org  Sun Oct  9 14:14:39 2005
From: dreid at dreid.org (David Reid)
Date: Sun, 09 Oct 2005 13:14:39 -0700
Subject: [Twisted-Python] When can I start using web2?
In-Reply-To: <72070441-F307-49D0-9F62-7435EBCF8DF2@fuhm.net>
References: <4343F008.6070805@polynode.com>
	<72070441-F307-49D0-9F62-7435EBCF8DF2@fuhm.net>
Message-ID: <1128888879.27630.8.camel@audrey.local>

On Wed, 2005-10-05 at 12:48 -0400, James Y Knight wrote:

> > * File uploads.
> 
> Should work, needs documentationing. Summary: fileupload.py is the  
> low level functionality that you usually don't need to call directly.  
> server.parsePOSTData is the "normal" interface into this system,  
> which is what resource.PostableResource calls when confronted with a  
> POST. It does what you want most of the time: incrementally parsing  
> the form fields into request.args and request.files, putting the  
> files in temp files on disk, with some limits on the file size  
> (customization of said limits should be pushed out to the toplevel  
> functions but hasn't been). request.args is a dict of {fieldname:  
> valuestring}, request.files is a dict of {fieldname: (filename,  
> content-type, TemporaryFile-instance)}.
> 

Also twisted.web2.static.FileSaver started off as just an example of
handling file uploads and turned into an attempt at a drop in resource
for handling them.  I tried to write it around what I percieved to be a
common use case, which was:
 
 * type limiting
 * size limiting
 * forcing permissions
 * globally unique filenames (FileSaver.makeUniqueName is easily
overrideable if the md5 of filename + the md5 of the time string isn't
sufficient or is overkill for your needs)

I'm not sure if it actually succeeded as more than an example, I don't
know that anyone is actively using it, and I'm rather surprised that
James failed to mention it, perhaps he forgot about it himself.

-David




From stephen at thorne.id.au  Sun Oct  9 17:45:56 2005
From: stephen at thorne.id.au (Stephen Thorne)
Date: Mon, 10 Oct 2005 09:45:56 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] r14683 - Make
	thetoMainThread Queue unlimited in size, instead of max size 1. 
In-Reply-To: <20051008023050.3914.1977843664.divmod.quotient.25552@ohm>
Message-ID: <20051009234556.3914.326955336.divmod.quotient.26126@ohm>

On Sat, 8 Oct 2005 12:30:50 +1000, Stephen Thorne <stephen at thorne.id.au> wrote:
>It seems there are significant memory consumption issues, i'm in the process 
>of figuring out if putting a sane upper limit on the queue (suggestions have 
>ranged from 100's to 100,000's) will stop my poor powermac from being 
>brought to its knees by threadedselectreactor.
>
>There are quite a few more failures in threadedselectreactor, I'm seeing 
>non-deterministic behaviour, things like tcp.Client using 
>reactor.callLater(0, self.failIfNotConnected, error) being a problem - 
>because if the branch in the code is taken that goes to that state, 
>self.socket doesn't get defined, and code can end up trying to write to that 
>socket and getting an AttributeError......
>
>Suffice it to say, I'm working on the issues here, and I want my buidslave 
>all green and pretty, I'll see about getting this resolved before the end of 
>the weekend.

Okay, I didn't get that done. I haven't resolved the issue, as it stands threadedselectreactor will not pass the twisted test-suite.

Stephen.



From tdickenson at devmail.geminidataloggers.co.uk  Mon Oct 10 04:06:24 2005
From: tdickenson at devmail.geminidataloggers.co.uk (Toby Dickenson)
Date: Mon, 10 Oct 2005 11:06:24 +0100
Subject: [Twisted-Python] Re: [Twisted-commits] r14683 - Make the
	toMainThread Queue unlimited in size, instead of max size 1.
In-Reply-To: <ECE6DB94-7530-4B24-946B-CBCE17E22255@fuhm.net>
References: <E1ENtn5-00011b-00@wolfwood>
	<ECE6DB94-7530-4B24-946B-CBCE17E22255@fuhm.net>
Message-ID: <200510101106.24167.tdickenson@devmail.geminidataloggers.co.uk>

On Friday 07 October 2005 18:31, James Y Knight wrote:
> 
> On Oct 7, 2005, at 11:05 AM, Stephen Thorne wrote:
> > Make the toMainThread Queue unlimited in size, instead of max size 1.
> > This can cause deadlocks.
> 
> Why does it cause deadlocks? 

I see one possible deadlock, but Im suprised you dont see other different 
symptoms first:

In the blocking select thread:
1. _doSelectInThread calls _sendToMain, it calls mainWaker to wake up the 
foreign event loop, then returns

In the main thread
2. some application code (?) calls doIteration
3. doIteration calls _sendToThread(_doIterationInThread
4. doIteration calls toMainThread.get(), expecting to block until 'its' 
iteration is complete. However it immediately receives the message sent in 
step 1.
5. doIteration returns
6. The foreign event loop gets round to calling _interleave because of the 
request sent in step 1.
7. _interleave calls toMainThread.get_nowait. This raises a Queue.Empty 
exception, which escapes up to the foreign event loop integration code.

In the blocking select thread

8. _doSelectInThread is called because of the request in step 3.
9. _doSelectInThread calls sendToMain. This never gets removed from the Queue.

At this point:

* The reactor is stalled indefinitely because _interleave raised an exception 
before it called _sendToThread(_doIterationInThread.

* Any subsequent calls to doIteration will cause _doThreadIteration to 
deadlock in sendToMain.


I believe the right solution involves replacing get_nowait with a regular get 
in _interleave.

I guess it is not a problem that doIteration sometimes does not perform a 
whole iteration. There has never been a guarantee about how much work is done 
each iteration of the reactor loop, right?



-- 
Toby Dickenson



From dguaraglia at gmail.com  Mon Oct 10 06:48:54 2005
From: dguaraglia at gmail.com (David Guaraglia)
Date: Mon, 10 Oct 2005 09:48:54 -0300
Subject: [Twisted-Python] Update on cheese shop
Message-ID: <434A6336.4020005@gmail.com>

Hello!

Is anyone going to do an update on the cheese shop anytime soon? Trying 
to install Twisted 2.10, I ended up installing 1.30, as the installation 
download page listed in the Cheese Shop has just downloads of that version.

I saw Itamarst is the owner there.

David

PS: didn't try to sound harsh or hostile, but english is not such an 
expressive language and I'm not an expressive person.



From itamar at itamarst.org  Mon Oct 10 09:06:32 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 10 Oct 2005 11:06:32 -0400
Subject: [Twisted-Python] Status of wxPython support in Twisted 2.1: use
	wxreactor
Message-ID: <1128956792.9046.9.camel@localhost.localdomain>

wxreactor in Twisted 2.1 uses threadedselectreactor. This means that wx
apps ought to use wxreactor, not TSR directly; there are some issues
with vanilla TSR wx integration that are also present in wxreactor, but
will be fixed in future versions of wxreactor.

What's broken (there may be more):
1. reactor shutdown events aren't handled correctly (e.g. Deferred
returned from during-shutdown event).
2. Signal handling for e.g. Ctrl-C is caught by wx, not twisted.

In order to get these fixed I need your help. I have a version of
wxreactor that *probably* fixes these in Subversion trunk. You can try
it out by running doc/core/examples/wxdemo.py. Hitting Ctrl-C, choosing
Exit from the menu or closing the menu all should have the same effect -
the application logs "shutting down in 0.3 seconds...", "2", "1", "0"
then exits. In addition, "Hello world" should continue to be printed
while the dialog box is open or you are holding down a menu.

Please try this out, and report success or failure at
<http://twistedmatrix.com/bugs/issue1235>. I'm especially interested to
hear if it works on Windows or Mac OS X. Please include your OS and
version of wxPython/wxWidgets when submitting reports.





From michael.kerrin at openapp.biz  Mon Oct 10 11:23:37 2005
From: michael.kerrin at openapp.biz (Michael Kerrin)
Date: Mon, 10 Oct 2005 17:23:37 +0000
Subject: [Twisted-Python] twisted.web2 on Windows
Message-ID: <200510101723.37287.michael.kerrin@openapp.biz>

Hi All,

  I am wondering about the status of twisted.web2 and twisted in general on 
Windows. I personally don't have access to a Windows machine and hence am 
asking, but I have just received a report of Zope3 (which now uses Twisted 
has its server) failing tests because of a problem in the 
twisted.web2.channel.cgi module.

  So I am wondering is there any thing I should be aware off, or is this 
problem I am seeing just a once off, i.e. a bug in twisted.web2.channel.cgi 
to be specific.

  I have just filled a bug report at http://twistedmatrix.com/bugs/issue1270 
about my specific issue.

Thanks 

Michael



From itamar at itamarst.org  Mon Oct 10 11:05:23 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 10 Oct 2005 13:05:23 -0400
Subject: [Twisted-Python] twisted.web2 on Windows
In-Reply-To: <200510101723.37287.michael.kerrin@openapp.biz>
References: <200510101723.37287.michael.kerrin@openapp.biz>
Message-ID: <1128963923.9046.14.camel@localhost.localdomain>

On Mon, 2005-10-10 at 17:23 +0000, Michael Kerrin wrote:

>   So I am wondering is there any thing I should be aware off, or is this 
> problem I am seeing just a once off, i.e. a bug in twisted.web2.channel.cgi 
> to be specific.

It's an (import problem) issue with cgi code; it won't import on
Windows. The parts you care about in web2 should work just fine on
Windows once that is fixed and it can actually be imported :)




From michael.kerrin at openapp.biz  Mon Oct 10 12:25:54 2005
From: michael.kerrin at openapp.biz (Michael Kerrin)
Date: Mon, 10 Oct 2005 18:25:54 +0000
Subject: [Twisted-Python] twisted.web2 on Windows
In-Reply-To: <1128963923.9046.14.camel@localhost.localdomain>
References: <200510101723.37287.michael.kerrin@openapp.biz>
	<1128963923.9046.14.camel@localhost.localdomain>
Message-ID: <200510101825.55496.michael.kerrin@openapp.biz>

On Monday 10 October 2005 17:05, Itamar Shtull-Trauring wrote:
> On Mon, 2005-10-10 at 17:23 +0000, Michael Kerrin wrote:
> >   So I am wondering is there any thing I should be aware off, or is this
> > problem I am seeing just a once off, i.e. a bug in
> > twisted.web2.channel.cgi to be specific.
>
> It's an (import problem) issue with cgi code; it won't import on
> Windows. The parts you care about in web2 should work just fine on
> Windows once that is fixed and it can actually be imported :)

I thought that much, but it is good hearing it from you :-)

With no Windows machine at the moment to test it on I just got a bit scared 
there.

Thanks

Michael



From mary-twisted at puzzling.org  Mon Oct 10 18:43:05 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Tue, 11 Oct 2005 10:43:05 +1000
Subject: [Twisted-Python] Success of virtual sprint
Message-ID: <20051011004305.GJ21420@home.puzzling.org>

I'd like to thank everyone who sprinted or helped out sprinters on IRC
this weekend. 102 separate commits were made to Twisted SVN over the
weekend, much more than a typical weekend ;) Oh yeah, and there was a
lot of work on the 2.1 release of Twisted Core too...

When I first discussed the vsprint idea with Chris Armstrong at the
Sydney Sprint in August, our plan was to have vsprints on a weekend
every 3 or 4 months. Another possibility might be to have smaller
sprints on particular topics more often: I may try this out with a
documentation sprint in a few months, other people might like to try it
with other projects.

Thanks for playing,

Mary

-- 
<_joshua> perhaps we could have some sort of sacrificial goat technology where people decide collectively that someone absolutely must get laid
<tangra> for the good of the state
<tangra> kind of like the draft lottery



From radeex at gmail.com  Mon Oct 10 19:03:52 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Tue, 11 Oct 2005 12:03:52 +1100
Subject: [Twisted-Python] Re: [Twisted-web] Success of virtual sprint
In-Reply-To: <20051011004305.GJ21420@home.puzzling.org>
References: <20051011004305.GJ21420@home.puzzling.org>
Message-ID: <60ed19d40510101803s19510cd1k381099932c3accc6@mail.gmail.com>

On 10/11/05, Mary Gardiner <mary-twisted at puzzling.org> wrote:
> When I first discussed the vsprint idea with Chris Armstrong at the
> Sydney Sprint in August, our plan was to have vsprints on a weekend
> every 3 or 4 months. Another possibility might be to have smaller
> sprints on particular topics more often: I may try this out with a
> documentation sprint in a few months, other people might like to try it
> with other projects.

Also, it would be cool to have a release sprint every 2-3 months. The
topic would be "fix Urgent bugs" ;-)

> Thanks for playing,

Hooray Twisted!

--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+



From exarkun at divmod.com  Mon Oct 10 21:18:18 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Mon, 10 Oct 2005 23:18:18 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r14809 - Don't import fdesc
 until needed since it doesn't exist on Windows.
In-Reply-To: <E1EP7K1-0004eP-00@wolfwood>
Message-ID: <20051011031818.3914.2084506211.divmod.quotient.26607@ohm>

On Mon, 10 Oct 2005 17:44:45 -0600, James Knight <foom at wolfwood.twistedmatrix.com> wrote:
>Author: foom
>Date: Mon Oct 10 17:44:45 2005
>New Revision: 14809
>
>Modified:
>   trunk/twisted/web2/channel/cgi.py
>Log:
>Don't import fdesc until needed since it doesn't exist on Windows.
>
>
>Modified: trunk/twisted/web2/channel/cgi.py
>==============================================================================
>--- trunk/twisted/web2/channel/cgi.py	(original)
>+++ trunk/twisted/web2/channel/cgi.py	Mon Oct 10 17:44:45 2005
>@@ -6,7 +6,7 @@
> import urllib
>
> # Move this to twisted core soonish
>-from twisted.internet import process, error, interfaces, fdesc
>+from twisted.internet import process, error, interfaces
> from twisted.python import log, failure
> from zope.interface import implements
>
>@@ -17,6 +17,8 @@
>     disconnected = False
>
>     def __init__(self, proto, stdin=0, stdout=1):
>+        import fdesc
>+
>         self.protocol = proto
>
>         fdesc.setNonBlocking(stdin)

No relative imports, please.

>
>_______________________________________________
>Twisted-commits mailing list
>Twisted-commits at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-commits
>



From glyph at divmod.com  Mon Oct 10 21:50:45 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 10 Oct 2005 23:50:45 -0400
Subject: [Twisted-Python] Re: [Twisted-web] Success of virtual sprint
In-Reply-To: <20051011004305.GJ21420@home.puzzling.org>
Message-ID: <20051011035045.3914.1295235629.divmod.quotient.26615@ohm>



On Tue, 11 Oct 2005 10:43:05 +1000, Mary Gardiner <mary-twisted at puzzling.org> wrote:

>Thanks for playing,

Thanks for getting this together!  I didn't get to do any committing myself, but  the sprint was a good motivator to get involved in some serious discussions and generally get back up to speed on what's going on in Twisted in general.

Let's do more of these!



From jml at mumak.net  Mon Oct 10 22:31:30 2005
From: jml at mumak.net (Jonathan Lange)
Date: Tue, 11 Oct 2005 15:31:30 +1100
Subject: [Twisted-Python] Python 2.2 Support
Message-ID: <d06a5cd30510102131t58144c60g@mail.gmail.com>

Should we drop Python 2.2 support in Subversion head for Twisted 2.2?

- Debian stable now comes with Python 2.3
- Twisted 2.1 has been released with Python 2.2 support

Dropping Python 2.2 support has some good consequences:
- We get to delete code
- An entire class of bugs gets eliminated
- Disc space can be freed on the muon buildslave

Some bad consequences:
- People wanting to run Twisted 2.2 (or svn) on ancient versions of
Python won't be able to.


cheers,
jml



From mary-twisted at puzzling.org  Mon Oct 10 22:39:12 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Tue, 11 Oct 2005 14:39:12 +1000
Subject: [Twisted-Python] Python 2.2 Support
In-Reply-To: <d06a5cd30510102131t58144c60g@mail.gmail.com>
References: <d06a5cd30510102131t58144c60g@mail.gmail.com>
Message-ID: <20051011043912.GN21420@home.puzzling.org>

So, the previous version of this thread came up with:

On Tue, Oct 11, 2005, Jonathan Lange wrote:
> Should we drop Python 2.2 support in Subversion head for Twisted 2.2?
> 
> - Debian stable now comes with Python 2.3
> - Twisted 2.1 has been released with Python 2.2 support
  - the most commonly used version of Red Hat Enterprise still has
    Python 2.3

Therefore:

> Some bad consequences:
> - People wanting to run Twisted 2.2 (or svn) on ancient versions of
> Python won't be able to.
  - in particular, people wanting to run Twisted 2.2 on RHE will need
    to upgrade to the very latest, less widely used, version

-Mary

-- 
<radix> So, I guess the reason you chose ftp as a discovery protocol is
because it's a semi-ubiquitous anonymous protocol that allows people to
communicate?
<edsuom> No, because I was stupid



From jml at mumak.net  Mon Oct 10 22:43:06 2005
From: jml at mumak.net (Jonathan Lange)
Date: Tue, 11 Oct 2005 15:43:06 +1100
Subject: [Twisted-Python] Python 2.2 Support
In-Reply-To: <20051011043912.GN21420@home.puzzling.org>
References: <d06a5cd30510102131t58144c60g@mail.gmail.com>
	<20051011043912.GN21420@home.puzzling.org>
Message-ID: <d06a5cd30510102143g7f255240u@mail.gmail.com>

On 11/10/05, Mary Gardiner <mary-twisted at puzzling.org> wrote:
> So, the previous version of this thread came up with:
>
> On Tue, Oct 11, 2005, Jonathan Lange wrote:
> > Should we drop Python 2.2 support in Subversion head for Twisted 2.2?
> >
> > - Debian stable now comes with Python 2.3
> > - Twisted 2.1 has been released with Python 2.2 support
>   - the most commonly used version of Red Hat Enterprise still has
>     Python 2.3

You mean Python 2.2, right?



From radeex at gmail.com  Mon Oct 10 22:44:42 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Tue, 11 Oct 2005 15:44:42 +1100
Subject: [Twisted-Python] Python 2.2 Support
In-Reply-To: <d06a5cd30510102131t58144c60g@mail.gmail.com>
References: <d06a5cd30510102131t58144c60g@mail.gmail.com>
Message-ID: <60ed19d40510102144p493226f4v758ace3f0f31d82d@mail.gmail.com>

On 10/11/05, Jonathan Lange <jml at mumak.net> wrote:
> Should we drop Python 2.2 support in Subversion head for Twisted 2.2?

We should drop Python 2.2 support in Subversion head for Twisted 2.2.

--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+



From radeex at gmail.com  Mon Oct 10 22:46:44 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Tue, 11 Oct 2005 15:46:44 +1100
Subject: [Twisted-Python] Python 2.2 Support
In-Reply-To: <20051011043912.GN21420@home.puzzling.org>
References: <d06a5cd30510102131t58144c60g@mail.gmail.com>
	<20051011043912.GN21420@home.puzzling.org>
Message-ID: <60ed19d40510102146w387e2333xccc872611c58df08@mail.gmail.com>

On 10/11/05, Mary Gardiner <mary-twisted at puzzling.org> wrote:
> On Tue, Oct 11, 2005, Jonathan Lange wrote:
> > Should we drop Python 2.2 support in Subversion head for Twisted 2.2?
> >
> > - Debian stable now comes with Python 2.3
> > - Twisted 2.1 has been released with Python 2.2 support
>   - the most commonly used version of Red Hat Enterprise still has
>     Python 2.3
>
> Therefore:
>
> > Some bad consequences:
> > - People wanting to run Twisted 2.2 (or svn) on ancient versions of
> > Python won't be able to.
>   - in particular, people wanting to run Twisted 2.2 on RHE will need
>     to upgrade to the very latest, less widely used, version
>
> -Mary

Huh? If RHE has Python 2.3 (as you say above), then they should still
be able to run Twisted 2.2. We're talking about dropping Python 2.2
support, not Python 2.3.

--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+



From mary-twisted at puzzling.org  Mon Oct 10 22:48:25 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Tue, 11 Oct 2005 14:48:25 +1000
Subject: [Twisted-Python] Python 2.2 Support
In-Reply-To: <d06a5cd30510102143g7f255240u@mail.gmail.com>
References: <d06a5cd30510102131t58144c60g@mail.gmail.com>
	<20051011043912.GN21420@home.puzzling.org>
	<d06a5cd30510102143g7f255240u@mail.gmail.com>
Message-ID: <20051011044825.GO21420@home.puzzling.org>

On Tue, Oct 11, 2005, Jonathan Lange wrote:
> On 11/10/05, Mary Gardiner <mary-twisted at puzzling.org> wrote:
> > So, the previous version of this thread came up with:
> >
> > On Tue, Oct 11, 2005, Jonathan Lange wrote:
> > > Should we drop Python 2.2 support in Subversion head for Twisted 2.2?
> > >
> > > - Debian stable now comes with Python 2.3
> > > - Twisted 2.1 has been released with Python 2.2 support
> >   - the most commonly used version of Red Hat Enterprise still has
> >     Python 2.3
> 
> You mean Python 2.2, right?

Yes. In particular, I believe a *supported* version still has it.

-Mary

-- 
<dash> careful with that syntax, eugene



From jml at mumak.net  Mon Oct 10 23:00:27 2005
From: jml at mumak.net (Jonathan Lange)
Date: Tue, 11 Oct 2005 16:00:27 +1100
Subject: [Twisted-Python] Python 2.2 Support
In-Reply-To: <60ed19d40510102144p493226f4v758ace3f0f31d82d@mail.gmail.com>
References: <d06a5cd30510102131t58144c60g@mail.gmail.com>
	<60ed19d40510102144p493226f4v758ace3f0f31d82d@mail.gmail.com>
Message-ID: <d06a5cd30510102200x3e2f25e1x@mail.gmail.com>

On 11/10/05, Christopher Armstrong <radeex at gmail.com> wrote:
> On 10/11/05, Jonathan Lange <jml at mumak.net> wrote:
> > Should we drop Python 2.2 support in Subversion head for Twisted 2.2?
>
> We should drop Python 2.2 support in Subversion head for Twisted 2.2.
>

I guess this become official once the 2.2 buildbot disappears.



From mary-twisted at puzzling.org  Mon Oct 10 23:59:59 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Tue, 11 Oct 2005 15:59:59 +1000
Subject: [Twisted-Python] Python 2.2 Support
In-Reply-To: <60ed19d40510102146w387e2333xccc872611c58df08@mail.gmail.com>
References: <d06a5cd30510102131t58144c60g@mail.gmail.com>
	<20051011043912.GN21420@home.puzzling.org>
	<60ed19d40510102146w387e2333xccc872611c58df08@mail.gmail.com>
Message-ID: <20051011055959.GQ21420@home.puzzling.org>

On Tue, Oct 11, 2005, Christopher Armstrong wrote:
> Huh? If RHE has Python 2.3 (as you say above), then they should still
> be able to run Twisted 2.2. We're talking about dropping Python 2.2
> support, not Python 2.3.

That was a typo, I meant 2.2. What I intended to say was that the
previous "dropping 2.2 support" discussion revealed that RHE 3, which is
still supported, has Python *2.2*:

http://twistedmatrix.com/pipermail/twisted-python/2005-September/011383.html

Red Hat is not stopping full support of RHE 3 until April 30, 2006:
http://www.redhat.com/security/updates/errata/

I'm not saying this because I personally have any barrow to push re RHE
or Python 2.2 (I use latest Ubuntu) or even any personal opinion, just
to remind everyone of a potentially relevant point from a previous
thread on the same topic.

-Mary



From rik.wade at gmail.com  Tue Oct 11 03:21:37 2005
From: rik.wade at gmail.com (Rik Wade)
Date: Tue, 11 Oct 2005 22:21:37 +1300
Subject: [Twisted-Python] Update on cheese shop
In-Reply-To: <434A6336.4020005@gmail.com>
References: <434A6336.4020005@gmail.com>
Message-ID: <e29b91160510110221p3d144efcub2d74226682e7992@mail.gmail.com>

On 10/11/05, David Guaraglia <dguaraglia at gmail.com> wrote:
>
>
> Is anyone going to do an update on the cheese shop anytime soon? Trying
> to install Twisted 2.10, I ended up installing 1.30, as the installation
> download page listed in the Cheese Shop has just downloads of that
> version.
>
> I saw Itamarst is the owner there.


I mailed Itamarst a few days ago about the same topic. I would also like to
install the latest version using package management.

Secondly, I don't suppose anyone has an update on the status of the WebDAV
component for web2?

Many thanks
--
rik
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20051011/f1e04f10/attachment.html>

From antonykummel at yahoo.com  Tue Oct 11 05:25:25 2005
From: antonykummel at yahoo.com (Antony Kummel)
Date: Tue, 11 Oct 2005 04:25:25 -0700 (PDT)
Subject: [Twisted-Python] Shutdown in Windows
Message-ID: <20051011112525.80370.qmail@web33904.mail.mud.yahoo.com>

Hi,

Does anyone know how to cleanly shut down a Twisted
application from the outside (i.e. from a different
process, via the OS) in Windows? So far, only
brute-force killing worked for me, which isn't
particularly clean.

Thanks,

Antony Kummel


	
		
__________________________________ 
Yahoo! Mail - PC Magazine Editors' Choice 2005 
http://mail.yahoo.com



From Henning.Ramm at mediapro-gmbh.de  Tue Oct 11 05:40:00 2005
From: Henning.Ramm at mediapro-gmbh.de (Henning.Ramm at mediapro-gmbh.de)
Date: Tue, 11 Oct 2005 13:40:00 +0200
Subject: [Twisted-Python] problem enhancing conch sample
Message-ID: <F92274058556DE42B94B148EEFB91839021CB5AD@exchange-03.suedkurier.de>

Hello again!

Last time I had the same problem with a telnet client; I dropped the code to start again with the conch ssh sample. I'm trying to find a way to execute more than one command, but I seem to mistunderstand something fundamental, at least the server closes the connection always after the first command.

This is my code, derived closely (and a bit simplified) from the example:

#!/usr/bin/env python
from twisted.conch.ssh import transport, userauth, connection, common, keys, channel
from twisted.internet import defer, protocol, reactor
from twisted.python import log
import struct, sys, getpass, os

USER = 'me'  # replace this with a valid username
PASS = 'mypass' # password
HOST = 'localhost' # and a valid host

class SimpleTransport(transport.SSHClientTransport):
    def verifyHostKey(self, hostKey, fingerprint):
        # print 'host key fingerprint: %s' % fingerprint
        return defer.succeed(1)

    def connectionSecure(self):
        self.requestService(
            SimpleUserAuth(USER,
                SimpleConnection()))

class SimpleUserAuth(userauth.SSHUserAuthClient):
    def getPassword(self):
        return defer.succeed(PASS)

    def getGenericAnswers(self, name, instruction, questions):
        print name
        print instruction
        answers = []
        for prompt, echo in questions:
            if echo:
                answer = raw_input(prompt)
            else:
                answer = getpass.getpass(prompt)
            answers.append(answer)
        return defer.succeed(answers)

    def getPublicKey(self):
	  return None

    def getPrivateKey(self):
	  return None

class SimpleConnection(connection.SSHConnection):
    def serviceStarted(self):
        self.openChannel(CatChannel(2**16, 2**15, self))

class CatChannel(channel.SSHChannel):
    name = 'session'
    cmd = 'pwd'
    commands = ['pwd','cd /','ls -al','exit']
    pointer = 0

    def openFailed(self, reason):
        print 'echo failed', reason

    def channelOpen(self, ignoredData):
        self.data = ''
        reactor.callLater(0, self.sendNextRequest)

    def sendNextRequest(self):
        cmd = self.commands[self.pointer]
        print cmd
        d = self.conn.sendRequest(self, 'exec', common.NS(cmd), wantReply = 1)
        d.addCallback(self._cbRequest)
        d.addErrback(log.msg)

    def _cbRequest(self, ignored):
        self.write('hello conch\n') # any sense?
        self.pointer += 1
        if self.commands[self.pointer] == 'exit':
            self.conn.sendEOF(self)
        else:
            reactor.callLater(0, self.sendNextRequest)

    def dataReceived(self, data):
        self.data += data

    def closed(self):
        print 'got data: %s' % repr(self.data)
        self.loseConnection()
        reactor.stop()

def twisted_logger(logdict):
    text = " ".join([str(m) for m in logdict["message"]])
    prompt = '.>'
    if logdict['isError'] or 'error' in text.lower():
        prompt = "!>"
    print prompt, text

log.addObserver(twisted_logger)
protocol.ClientCreator(reactor, SimpleTransport).connectTCP(HOST, 22)
reactor.run()



Sorry if you already tried to help me last time, seems like I didn't get it...

Best regards,
Henning Hraban Ramm
Südkurier Medienhaus / MediaPro
Support/Admin/Development Dept.




From Henning.Ramm at mediapro-gmbh.de  Tue Oct 11 05:45:54 2005
From: Henning.Ramm at mediapro-gmbh.de (Henning.Ramm at mediapro-gmbh.de)
Date: Tue, 11 Oct 2005 13:45:54 +0200
Subject: [Twisted-Python] Shutdown in Windows
Message-ID: <F92274058556DE42B94B148EEFB91839021CB5AE@exchange-03.suedkurier.de>

>Does anyone know how to cleanly shut down a Twisted
>application from the outside (i.e. from a different
>process, via the OS) in Windows? So far, only
>brute-force killing worked for me, which isn't
>particularly clean.

Probably not really a help for you:
My apps use a 'appname.lock' file (no real lock, I'm on Windows, too, but only a "I'm running" sign containing their PID) and look for a 'appname.stop' file in the same dir, so my other apps can check the 'locks' if the PID is still running and can write a 'stop' file that causes the appropriate app to end itself. That is easy enough to work even with simple Batches...

Best regards,
Henning Hraban Ramm
Südkurier Medienhaus / MediaPro
Support/Admin/Development Dept.



From antonykummel at yahoo.com  Tue Oct 11 05:56:55 2005
From: antonykummel at yahoo.com (Antony Kummel)
Date: Tue, 11 Oct 2005 04:56:55 -0700 (PDT)
Subject: [Twisted-Python] Shutdown in Windows
In-Reply-To: <F92274058556DE42B94B148EEFB91839021CB5AE@exchange-03.suedkurier.de>
Message-ID: <20051011115655.26261.qmail@web33911.mail.mud.yahoo.com>

Okay, but how about shutting down cleanly when the
computer is shut down?

--- Henning.Ramm at mediapro-gmbh.de wrote:

> >Does anyone know how to cleanly shut down a Twisted
> >application from the outside (i.e. from a different
> >process, via the OS) in Windows? So far, only
> >brute-force killing worked for me, which isn't
> >particularly clean.
> 
> Probably not really a help for you:
> My apps use a 'appname.lock' file (no real lock, I'm
> on Windows, too, but only a "I'm running" sign
> containing their PID) and look for a 'appname.stop'
> file in the same dir, so my other apps can check the
> 'locks' if the PID is still running and can write a
> 'stop' file that causes the appropriate app to end
> itself. That is easy enough to work even with simple
> Batches...
> 
> Best regards,
> Henning Hraban Ramm
> Südkurier Medienhaus / MediaPro
> Support/Admin/Development Dept.
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
>
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 



	
		
__________________________________ 
Yahoo! Mail - PC Magazine Editors' Choice 2005 
http://mail.yahoo.com



From Henning.Ramm at mediapro-gmbh.de  Tue Oct 11 06:11:14 2005
From: Henning.Ramm at mediapro-gmbh.de (Henning.Ramm at mediapro-gmbh.de)
Date: Tue, 11 Oct 2005 14:11:14 +0200
Subject: [Twisted-Python] Shutdown in Windows
Message-ID: <F92274058556DE42B94B148EEFB91839021CB5B0@exchange-03.suedkurier.de>

>Okay, but how about shutting down cleanly when the
>computer is shut down?

Hm, my apps do that without me writing something special, I guess python cares for shutdown; I only hooked some cleanup stuff (e.g. reactor.stop) into my app class's __del__ method.
(I don't use twistd or any 'foreign' app class.)

Best regards,
Henning Hraban Ramm
Südkurier Medienhaus / MediaPro
Support/Admin/Development Dept.



From itamar at itamarst.org  Tue Oct 11 09:41:45 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 11 Oct 2005 11:41:45 -0400
Subject: [Twisted-Python] Update on cheese shop
In-Reply-To: <e29b91160510110221p3d144efcub2d74226682e7992@mail.gmail.com>
References: <434A6336.4020005@gmail.com>
	<e29b91160510110221p3d144efcub2d74226682e7992@mail.gmail.com>
Message-ID: <1129045306.8844.8.camel@localhost.localdomain>

On Tue, 2005-10-11 at 22:21 +1300, Rik Wade wrote:

> I mailed Itamarst a few days ago about the same topic. I would also
> like to install the latest version using package management.

I uploaded it just now. Note though that we don't have packages in there
for all the Twisted subprojects (mail, web, etc..)





From z3p at twistedmatrix.com  Tue Oct 11 10:17:17 2005
From: z3p at twistedmatrix.com (Paul Swartz)
Date: Tue, 11 Oct 2005 12:17:17 -0400
Subject: [Twisted-Python] problem enhancing conch sample
In-Reply-To: <F92274058556DE42B94B148EEFB91839021CB5AD@exchange-03.suedkurier.de>
References: <F92274058556DE42B94B148EEFB91839021CB5AD@exchange-03.suedkurier.de>
Message-ID: <434BE58D.3040905@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Henning.Ramm at mediapro-gmbh.de wrote:
>         else:
>             reactor.callLater(0, self.sendNextRequest)

This is your problem.  Each channel can only be only command, executed
one time.  If you need to run a second command, you need to open a new
channel.

hth,
- -p
- --
       Paul Swartz
(o_    http://www.twistedmatrix.com/users/z3p.twistd/  _o)
//\    z3p at twistedmatrix.com                           /\\
V_/_   AIM: z3penguin                                 _\_V->
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.1 (GNU/Linux)

iD8DBQFDS+UCn20RAFzwsckRApXGAJ9/3QvTlGSqqcbwG4NgfG9xjAnTyQCffX0E
RLK3xOWeKd/LofIr1HWGT9c=
=uc5i
-----END PGP SIGNATURE-----



From foom at fuhm.net  Tue Oct 11 12:17:31 2005
From: foom at fuhm.net (James Y Knight)
Date: Tue, 11 Oct 2005 14:17:31 -0400
Subject: [Twisted-Python] Subproject releases
Message-ID: <446737B7-AA24-47AB-B64F-96C1D6D424B7@fuhm.net>

So, srichter has asked for a branch from which he can get a stable  
(bugfix only, no API changes) twisted and web2. It is not obvious how  
this would be done currently. We have, right now, a /branches/ 
releases/2.1.x branch, for stable releases of twisted core.

When I make a release of twisted.web2, I initially thought I'd give  
it a branch off of trunk as of now, say, branches/releases/ 
web2-0.2.x. However, that makes it difficult to externally track both  
the stable web2 release and the stable core release, as you need to  
grab parts of both that branch and the 2.1.x branch and mix them  
together.

This sort of points towards it being a nice idea if the repo was  
reorganized such that each project was in its own directory  
hierarchy, as then it would be much easier to mix-n-match different  
branches of different projects. But I'm not going to go there, again,  
right now. I still think it could be a good idea but it was discussed  
before and rejected. Instead, I want to suggest that subproject  
releases also be made off of the 2.1.x branch.

This has a few upsides: 1) easier for external parties to track, 2)  
easier for *us* to track, in our stable-branch buildbot master (BTW,  
warner, can we get one of those?).

The downsides that I can see: 1) before the first release of a  
subproject after a release of core, its part of that branch will be  
some random trunk version (however, it should at least be passing  
tests, so it's not *too* tragic) 2) when making an initial subproject  
release, you may need to apply a relatively large diff to the 2.1.x  
branch to sync it with trunk.

Please discuss. :) In the meantime, I'm going to be doing web2 off of  
2.1.x this way. If we ultimately decide that's a bad idea and to do  
it a different way I will happily change and revert the changes to  
the 2.1.x branch.

James




From itamar at itamarst.org  Tue Oct 11 12:22:58 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 11 Oct 2005 14:22:58 -0400
Subject: [Twisted-Python] Reminder: PyCon 2006 Call for Proposals
Message-ID: <1129054978.8844.15.camel@localhost.localdomain>

PyCon 2006 Call for Proposals
--------------------------------------------

Want to share your expertise? PyCon 2006 is looking for proposals to
fill the formal presentation tracks.  PyCon 2006 will be held
February 24-26 2006 in Addison, Texas (near Dallas).

Previous PyCons have had a broad range of presentations, from reports
on academic and commercial projects to tutorials and case studies, and
we hope to continue that tradition this year.  As long as the
presentation is interesting and potentially useful to the Python
community, it will be considered for inclusion in the program.

For 2006, we're especially interested in tutorial presentations
that will teach conference-goers something new and useful.  Can you
show attendees how to: use a module?  explore a Python language
feature?  package an application?  


Important Dates
======================

 * Submission deadline: October 31, 2005 
 * Acceptance deadline: November 15, 2005 
 * Electronic copy deadline: February 15, 2006


PyCon Topics
=======================

Suitable topics for PyCon presentations include, but are not limited
to:

 * Core Python
 * Other implementations: Jython, IronPython, PyPy, and Stackless
 * Python libraries and extensions
 * Databases
 * Documentation
 * GUI Programming
 * Game Programming
 * Network Programming
 * Open Source Python projects
 * Packaging Issues
 * Programming Tools
 * Project Best Practices
 * Embedding and Extending
 * Science and Math
 * Web-based Systems


Submission Format
================================

Proposals should be 250 to 1000 words long (i.e., one to four pages in
manuscript format), containing the following information:

 * Author name(s)
 * Contact Information
 * Requested timeslot (30 minutes, 45 minutes, or either)
 * Summary of proposed presentation
 * Presentation outline
 * Intended audience (non-programmers, beginning programmers, advanced users, 
   CPython developers, etc.)

ASCII format is preferred (plain or reST), with HTML as a secondary
alternative. If you have any queries about submission, or if you would
like to discuss the possibility of submitting in a different format or
style, please send mail to the conference organizers at
pycon at python.org.

Session lengths include time for audience questions.  You should
budget at least five minutes for questions; for example, a 30-minute
talk will be 25 minutes of presentation and 5 minutes of questions.  

The preferred length for talks is 30 minutes.  You can request a
45-minute slot, but proposals requiring 45 minutes will be reviewed
more stringently and tutorial talks will be preferred for these longer
slots.


Submission Mechanics
===============================

Use the PyCon Online Proposal Submission <http://submit.python.org> to
send us your proposals and ideas. If your proposal is accepted, you
have the option of including a companion paper along with your
presentation. The paper will get published on the PyCon web site.

Presentations and papers may be in text (plain or reST), HTML, or PDF;
HTML or text are preferred.

We suggest, but do not require, that authors place their papers under
a Creative Commons license. Please visit the CC 'Choose a License'
page to select a license that meets your requirements. 

A Wiki page has suggestions and advice for speakers:
http://wiki.python.org/moin/PyCon2006/SpeakerNotes


Other Presentations
===========================

If you don't want to make a formal presentation, you can still bring
your new project or idea to PyCon.

There will be several Lightning Talk sessions for talks no longer than
five minutes.

There will be a significant amount of Open Space for informal and
spur-of-the-moment presentations.  Open Space consists of
thirty-minute blocks that are allocated during PyCon. These blocks can
be used for presentations, round table discussions, hands-on
tutorials, or anything else. Typically, people propose ideas for the
sessions which are then voted on by attendees.




From gmcdonald at infocomp.com  Tue Oct 11 20:08:49 2005
From: gmcdonald at infocomp.com (Grant McDonald)
Date: Wed, 12 Oct 2005 12:08:49 +1000
Subject: [Twisted-Python] Twisted and SVN
Message-ID: <61DA7719C45FD31185280008C733EF6E04AC4FC3@XCHANGE>

Hi All,

I know this isn't really the forum for talking about subversion, but Twisted
as we all know is a rather large distributed development effort and it uses
SVN.  There is currently a debate going on in my company about the benefits
of subversion over cvs and if I may I'd like to tap your knowledge about the
pitfalls and benefit of subversion use (if any) that you've come across in
your usage of the product. Do you see it as a far better solution than CVS?
Has twisted always used SVN or was it once burdened with CVS? Thanks in
advance for your input.

Kind regards,

Grant M.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20051012/abc87bf7/attachment.html>

From exarkun at divmod.com  Tue Oct 11 22:18:08 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Wed, 12 Oct 2005 00:18:08 -0400
Subject: [Twisted-Python] Update on cheese shop
In-Reply-To: <1129045306.8844.8.camel@localhost.localdomain>
Message-ID: <20051012041808.3914.252786349.divmod.quotient.27169@ohm>

On Tue, 11 Oct 2005 11:41:45 -0400, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
>On Tue, 2005-10-11 at 22:21 +1300, Rik Wade wrote:
>
>> I mailed Itamarst a few days ago about the same topic. I would also
>> like to install the latest version using package management.
>
>I uploaded it just now. Note though that we don't have packages in there
>for all the Twisted subprojects (mail, web, etc..)
>

I'll be doing words, mail, names, and probably conch releases next week.  I'll add cheese shop packages for those at that point.

Jp



From glyph at divmod.com  Tue Oct 11 23:49:38 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Wed, 12 Oct 2005 01:49:38 -0400
Subject: [Twisted-Python] Subproject releases
In-Reply-To: <446737B7-AA24-47AB-B64F-96C1D6D424B7@fuhm.net>
Message-ID: <20051012054938.3914.543518999.divmod.quotient.27213@ohm>



On Tue, 11 Oct 2005 14:17:31 -0400, James Y Knight <foom at fuhm.net> wrote:

>This sort of points towards it being a nice idea if the repo was 
>reorganized such that each project was in its own directory  hierarchy, as 
>then it would be much easier to mix-n-match different  branches of different 
>projects. But I'm not going to go there, again,  right now. I still think it 
>could be a good idea but it was discussed  before and rejected.

I remember participating in this initial discussion.

I remember taking some side in it, and arguing strongly for that side.

I'm not sure which one it was, so if I'm responsible for rejecting it I've changed my mind, but if I was arguing in favor of it I'm now even more vociferous :).

The Divmod repository is now organized this way, and we have a tool (Combinator) which keeps PYTHONPATH from exploding into a million pieces that kill you.  For an example of this repository structure see <http://divmod.org/trac/browser/trunk>.

I think that it would be a very good idea to re-organize the Twisted repository this way, especially given the path semantics of the new plugin mechanism.  It is difficult to sanely decide which project plugins for another project ought to be distributed with at this point, and as we move towards more usage of plugins rather than direct imports for integration, this problem is only going to get worse.

I would suggest trunk/TwistedWords trunk/TwistedCore trunk/TwistedNames (etc etc).  Cherry-picked branches would still be a little bit of work to construct, but a reasonable amount (and appropriate local checkout structure could probably also approximate them).

I realize that this has the potential to be a pretty disruptive change.  I'm open to suggestions on when would be a good time, and I have no plans to push hard to get this to happen any time soon.  I do think it would be a good idea eventually, though.



From foom at fuhm.net  Wed Oct 12 00:02:59 2005
From: foom at fuhm.net (James Y Knight)
Date: Wed, 12 Oct 2005 00:02:59 -0600
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <E1EPZhb-0003OW-00@pyramid.twistedmatrix.com>

Bug summary
______________________
Since 2005-10-05 06:00:02.400000:
 Bugs opened: 27   Bugs closed: 23   Total open bugs: 475 (+4)
  Urgent: 5 (-3)
  Bug: 229 (+5)
  Feature: 164 (+3)
  Wish: 77 (-1)

New / Reopened Bugs
______________________
                    ==== Urgent ====
[WEB, WIN32] twisted.web2 problems on Windows.  (yesterday)
CLOSED http://twistedmatrix.com/bugs/issue1270 opened by mkerrin

[BACKPORT, CORE, TRIAL] trial won't run nevow's unit tests  (yesterday)
CLOSED http://twistedmatrix.com/bugs/issue1271 opened by glyph

[TRIAL] trial tests don't work in an installed twisted core 2.1  (2 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1265 opened by marienz

[CORE, TRIAL] trial excludes explicitly specified test modules  (2 days ago)
       http://twistedmatrix.com/bugs/issue1266 opened by exarkun

[CORE, TRIAL] trial --until-failure is broken  (3 days ago)
       http://twistedmatrix.com/bugs/issue1263 opened by exarkun

[FTP] FTP log.err problem  (3 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1258 opened by mkerrin

[CORE] Include new zope.interface in sumo (so we get the gcc4 compilation fix)  (3 days ago)
       http://twistedmatrix.com/bugs/issue1259 opened by itamarst

lore index links are broken for nested guide directories (e.g. tutorial)  (3 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1257 opened by radix

                    ==== Bug ====
twisted/doc/web2/examples/demo.py is broken (simple fix)  (1 1/4 hours ago)
       http://twistedmatrix.com/bugs/issue1273 opened by tgreenwo

[CORE, TESTS] twisted.vfs.test.test_ftp is enough to drive a sane man mad  (2 days ago)
       http://twistedmatrix.com/bugs/issue1264 opened by exarkun

selectreactor's addReader unexpectedly assumes a logPrefix attr  (yesterday)
       http://twistedmatrix.com/bugs/issue1272 opened by marienz

[CORE, TRIAL] Intermittent test_output failure  (yesterday)
CLOSED http://twistedmatrix.com/bugs/issue1269 opened by exarkun

[DOCUMENTATION] Document Twisted copyright policy  (3 days ago)
       http://twistedmatrix.com/bugs/issue1262 opened by hypatia

[SECURITY] Threads improperly retain initial privileges  (4 days ago)
       http://twistedmatrix.com/bugs/issue1251 opened by exarkun

win32eventreactor goes crazy at 64 connections  (3 days ago)
       http://twistedmatrix.com/bugs/issue1260 opened by ghazel

[LORE] Lore does not support the troff Ic markup  (3 days ago)
       http://twistedmatrix.com/bugs/issue1256 opened by hypatia

[DOCUMENTATION] Update copyrights in the man pages  (4 days ago)
       http://twistedmatrix.com/bugs/issue1255 opened by hypatia

[DOCUMENTATION] Create index.xhtml files for non-core doc trees  (4 days ago)
       http://twistedmatrix.com/bugs/issue1253 opened by hypatia

xmlgettext must combine identical msgid's  (5 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1249 opened by Tv

win32serialport.py initialisation  (5 days ago)
       http://twistedmatrix.com/bugs/issue1248 opened by Toby Dickenson

kqreactor timeout error (traceback)  (6 days ago)
       http://twistedmatrix.com/bugs/issue1247 opened by ghazel

                    ==== Feature ====
trial shouldn't print PendingTimedCallsError when the test fails  (2 days ago)
       http://twistedmatrix.com/bugs/issue1268 opened by jknight

results of test runs of various mixed versions  (2 days ago)
       http://twistedmatrix.com/bugs/issue1267 opened by marienz

[LORE] Lore's bookify has minimal error handling  (4 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1254 opened by hypatia

Remove obselete branches from Twisted/branches  (4 days ago)
       http://twistedmatrix.com/bugs/issue1252 opened by hypatia

Replace icky socket loopback waker with event based waker  (4 days ago)
       http://twistedmatrix.com/bugs/issue1250 opened by Toby Dickenson

                    ==== Wish ====
[DEFERRED, DOCUMENTATION] Show that one can do other things after adding a callback  (3 days ago)
       http://twistedmatrix.com/bugs/issue1261 opened by hypatia

Bugs Closed
______________________
                    ==== Urgent ====
[WEB, WIN32] twisted.web2 problems on Windows.  (yesterday)
       http://twistedmatrix.com/bugs/issue1270 opened by mkerrin, closed by jknight

[BACKPORT, CORE, TRIAL] trial won't run nevow's unit tests  (yesterday)
       http://twistedmatrix.com/bugs/issue1271 opened by glyph, closed by jml

[TRIAL] trial tests don't work in an installed twisted core 2.1  (2 days ago)
       http://twistedmatrix.com/bugs/issue1265 opened by marienz, closed by marienz

[FTP] FTP log.err problem  (3 days ago)
       http://twistedmatrix.com/bugs/issue1258 opened by mkerrin, closed by mkerrin

[CORE] LineReceiver Producer/Consumer support is broken  (3 months ago)
       http://twistedmatrix.com/bugs/issue1087 opened by exarkun, closed by radix

[CORE] whenThreaded no longer exists in SVN  (7 days ago)
       http://twistedmatrix.com/bugs/issue1242 opened by spiv, closed by radix

[TRIAL] Specify trial reporters using --reporter parameter  (2 weeks ago)
       http://twistedmatrix.com/bugs/issue1210 opened by jml, closed by jml

lore index links are broken for nested guide directories (e.g. tutorial)  (3 days ago)
       http://twistedmatrix.com/bugs/issue1257 opened by radix, closed by radix

[CORE] Move Deferred cancellation code out of trunk  (1 week ago)
       http://twistedmatrix.com/bugs/issue1236 opened by exarkun, closed by radix

                    ==== Bug ====
[CORE, TRIAL] Intermittent test_output failure  (yesterday)
       http://twistedmatrix.com/bugs/issue1269 opened by exarkun, closed by exarkun

[CONCH, TRIAL] twisted.conch.test.test_mixin calls reactor.iterate()  (3 weeks ago)
       http://twistedmatrix.com/bugs/issue1184 opened by exarkun, closed by exarkun

[TRIAL, WEB] twisted.web.test.test_soap calls reactor.iterate()  (3 weeks ago)
       http://twistedmatrix.com/bugs/issue1190 opened by exarkun, closed by exarkun

[TRIAL, WEB] twisted.web.test.test_xmlrpc calls reactor.iterate()  (3 weeks ago)
       http://twistedmatrix.com/bugs/issue1191 opened by exarkun, closed by exarkun

[CORE, DOCUMENTATION] organized-finger.tac references non-existent ServerContextFactory  (4 months ago)
       http://twistedmatrix.com/bugs/issue1058 opened by exarkun, closed by hypatia

[WEBSITE] Link to API docs misleading  (4 months ago)
       http://twistedmatrix.com/bugs/issue1045 opened by osuchw, closed by hypatia

[CONCH, DOCUMENTATION] Missing man page for cftp  (6 months ago)
       http://twistedmatrix.com/bugs/issue939 opened by Tv, closed by hypatia

[DOCUMENTATION, LORE] Missing man page for bookify  (6 months ago)
       http://twistedmatrix.com/bugs/issue940 opened by Tv, closed by hypatia

[DOCUMENTATION] Rename "HOWTOs" to "Developer Guide"  (1 month ago)
       http://twistedmatrix.com/bugs/issue1155 opened by spiv, closed by hypatia

xmlgettext must combine identical msgid's  (5 days ago)
       http://twistedmatrix.com/bugs/issue1249 opened by Tv, closed by mg

                    ==== Feature ====
[WORDS, XISH] client XMPP authenticator  (4 months ago)
       http://twistedmatrix.com/bugs/issue1050 opened by tofu, closed by ralphm

[LORE] Lore's bookify has minimal error handling  (4 days ago)
       http://twistedmatrix.com/bugs/issue1254 opened by hypatia, closed by hypatia

                    ==== Wish ====
[DOCUMENTATION, WEBSITE] Improved twisted website content  (13 months ago)
       http://twistedmatrix.com/bugs/issue697 opened by hypatia, closed by hypatia

[DEFERRED, DOCUMENTATION] Refactor Deferred and Async HOWTOS  (20 months ago)
       http://twistedmatrix.com/bugs/issue504 opened by hypatia, closed by hypatia




From glyph at divmod.com  Wed Oct 12 00:05:18 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Wed, 12 Oct 2005 02:05:18 -0400
Subject: [Twisted-Python] Twisted and SVN
In-Reply-To: <61DA7719C45FD31185280008C733EF6E04AC4FC3@XCHANGE>
Message-ID: <20051012060518.3914.1915234814.divmod.quotient.27221@ohm>


On Wed, 12 Oct 2005 12:08:49 +1000, Grant McDonald <gmcdonald at infocomp.com> wrote:

>I know this isn't really the forum for talking about subversion, but Twisted
>as we all know is a rather large distributed development effort and it uses
>SVN.

It's totally off topic, but I'd be happy to grind an axe on behalf of the SVN developers here!

>There is currently a debate going on in my company about the benefits
>of subversion over cvs and if I may I'd like to tap your knowledge about the
>pitfalls and benefit of subversion use (if any) that you've come across in
>your usage of the product.

One pitfall - you probably want to use the new fsfs backend so you don't run into difficulties with bsddb.  Other than that, I haven't really seen any (except those you would have already seen 100x over with CVS)

>Do you see it as a far better solution than CVS?

YES.

Zooko summarizes it best at <http://zooko.com/revision_control_quick_ref.html>:

   "CVS: use Subversion instead."

There are other version control systems: p4, bk, darcs, bzr, hg, monotone, to name a few.  I personally am not a big fan of any right now (though bzr has quite a lot of promise), but it cannot be denied that there are valid reasons to use each of them depending on your preferred workflow.

CVS, however, is an evolutionary dead end.  The style of workflow it encourages is FAR better implemented in Subversion.  The tools around Subversion are better and better integrated.  Subversion actually has an API, not just some loose conventions and file formats.  The commit hooks are easier to write and more powerful.  There are many more choices for deployment and maintenance which allow you to integrate it into your particular setup.  It has a better security track record.

One fact is well documented by many projects: branching was IMPOSSIBLE with CVS.  Even given the relatively few times branching was attempted in Twisted, I can attest to this truth.  Other VCS users might say that branching's not "easy" with subversion, but it is FAR better than CVS.  Branches would not just be hard to make in CVS, if you were not careful with the way you used the tool, you could break them.

Speaking of breaking things, CVS has a nasty habit of corrupting binary files unless you are very, very careful with them.  SVN detects binary files far more reliably and generally won't corrupt them.  SVN has far better support for partially-disconnected development - diff and revert work while you're offline.

SVN has better GUI integration on Windows (TortoiseSVN).
SVN has better integration with SSH (svn+ssh URLs, not random environment variables which effect how paths are interpreted).
SVN has better integration with Emacs (psvn vs. pcvs)
SVN is faster.
SVN doesn't corrupt your files.
SVN doesn't produce inconsistent checkouts if you forget magic flags (cvs up -dP)

Conclusion: CVS is completely and utterly obsolete.  Don't use it unless you have a huge repository of code already in CVS and no time to migrate it.  There is literally, absolutely no reason I would consider using CVS for a new project, or even consider continuing with CVS for any project that I came into maintainership of.  It served the community well when it was in its prime, but the world has moved on.

>Has twisted always used SVN or was it once burdened with CVS? Thanks in
>advance for your input.

Twisted used CVS and migrated to SVN.  The ability to migrate to new version control systems was one of the original motivators for us to maintain our own development rather than use a site like Sourceforge, and I think it's paid off immensely.




From dreid at dreid.org  Wed Oct 12 00:30:29 2005
From: dreid at dreid.org (David Reid)
Date: Tue, 11 Oct 2005 23:30:29 -0700
Subject: [Twisted-Python] Subproject releases
In-Reply-To: <20051012054938.3914.543518999.divmod.quotient.27213@ohm>
References: <20051012054938.3914.543518999.divmod.quotient.27213@ohm>
Message-ID: <D1BED759-06D3-4FC0-BE20-D50F48D12F60@dreid.org>


On Oct 11, 2005, at 10:49 PM, glyph at divmod.com wrote:
> I remember participating in this initial discussion.
>
> I remember taking some side in it, and arguing strongly for that side.
>
> I'm not sure which one it was, so if I'm responsible for rejecting  
> it I've changed my mind, but if I was arguing in favor of it I'm  
> now even more vociferous :).

Just in the interest of clarity, I'm fairly certain you argued  
against this, because of the pain it would cause the developer  
involved in all aspects of Twisted as opposed to just one or two  
subprojects.  Then I wrote pthy, to try to make that kind of thing  
easier, no one used it, and now apparently you've written Combinator  
to do the same thing in a different and all together better way.  So  
I support this kind of change.

As to when it should take place it's probably a good idea to discuss  
it for at least one release to try and avoid releases getting even  
more bogged down.  I seem to recall one of the major reasons it took  
2.0 so long to get released was the logistics of making the initial  
split actually work.  On that note, I do seem to recall that you  
(glyph) suggested splitting the package distribution and doing the  
repository reorganization with a few releases in between.

-David
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20051011/96948689/attachment.html>

From moof at metamoof.net  Wed Oct 12 03:03:00 2005
From: moof at metamoof.net (Moof)
Date: Wed, 12 Oct 2005 11:03:00 +0200
Subject: [Twisted-Python] Subproject releases
In-Reply-To: <D1BED759-06D3-4FC0-BE20-D50F48D12F60@dreid.org>
References: <20051012054938.3914.543518999.divmod.quotient.27213@ohm>
	<D1BED759-06D3-4FC0-BE20-D50F48D12F60@dreid.org>
Message-ID: <434CD144.8040308@metamoof.net>

David Reid wrote:
> 
> On Oct 11, 2005, at 10:49 PM, glyph at divmod.com <mailto:glyph at divmod.com>
> wrote:
> 
>> I remember participating in this initial discussion.
>>
>> I remember taking some side in it, and arguing strongly for that side.
>>
>> I'm not sure which one it was, so if I'm responsible for rejecting it
>> I've changed my mind, but if I was arguing in favor of it I'm now even
>> more vociferous :).
> 
> 
> Just in the interest of clarity, I'm fairly certain you argued against
> this, because of the pain it would cause the developer involved in all
> aspects of Twisted as opposed to just one or two subprojects.  Then I
> wrote pthy, to try to make that kind of thing easier, no one used it,
> and now apparently you've written Combinator to do the same thing in a
> different and all together better way.  So I support this kind of change.  

Out of interest, How do these solutions relate to all the fancy metapackage
stuff you can do with setuptools?

Much of the python world seems to be migrating towards setuptools as a way
to distribute their packages and cope with fun things like dependencies.
Certainly I'd hope that I could say "depends on twisted.core and
twisted.web" on future packages that I might be developing. It even has
so-called "Namespace package" support, which initially seems geared towards
Zope's package structure, but might well do for twisted, too. And if it's
not ok for twisted, then now is the right time to pipe up at the developers
(which seem to be lead by Phillip J Eby) and get some changes made, as it's
still in a robust alpha stage.

<http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages>

I think it'd be a huge shame for twisted not to release eggs in the future,
this stuff is not even beta, and it's already got wide acceptance and usage
out in the web framework world, amongst others. And now's the time to get it
right, at least as far as setuptools is concerned.

Moof
-- 
Giles Antonio Radford, alias Moof
"Too old to be a chicken and too young to be a dirty old man"
Serving up my ego over at <http://metamoof.net/>



From tdickenson at devmail.geminidataloggers.co.uk  Wed Oct 12 03:19:08 2005
From: tdickenson at devmail.geminidataloggers.co.uk (Toby Dickenson)
Date: Wed, 12 Oct 2005 10:19:08 +0100
Subject: [Twisted-Python] Re: [Twisted-commits] r14683 - Make the
	toMainThread Queue unlimited in size, instead of max size 1.
In-Reply-To: <200510101106.24167.tdickenson@devmail.geminidataloggers.co.uk>
References: <E1ENtn5-00011b-00@wolfwood>
	<ECE6DB94-7530-4B24-946B-CBCE17E22255@fuhm.net>
	<200510101106.24167.tdickenson@devmail.geminidataloggers.co.uk>
Message-ID: <200510121019.09021.tdickenson@devmail.geminidataloggers.co.uk>

On Monday 10 October 2005 11:06, Toby Dickenson wrote:
> On Friday 07 October 2005 18:31, James Y Knight wrote:
> > 
> > On Oct 7, 2005, at 11:05 AM, Stephen Thorne wrote:
> > > Make the toMainThread Queue unlimited in size, instead of max size 1.
> > > This can cause deadlocks.
> > 
> > Why does it cause deadlocks? 
> 
> I see one possible deadlock, but Im suprised you dont see other different 
> symptoms first:
> 
> In the blocking select thread:
> 1. _doSelectInThread calls _sendToMain, it calls mainWaker to wake up the 
> foreign event loop, then returns
> 
> In the main thread
> 2. some application code (?) calls doIteration
> 3. doIteration calls _sendToThread(_doIterationInThread
> 4. doIteration calls toMainThread.get(), expecting to block until 'its' 
> iteration is complete. However it immediately receives the message sent in 
> step 1.
> 5. doIteration returns
> 6. The foreign event loop gets round to calling _interleave because of the 
> request sent in step 1.

Hmmmm, no need for anything quite so elaborate above. get_nowait is documented 
to raise the Queue.Empty exception (which leads to deadlock in tsr) if the 
Queue is "Empty or Locked". 

http://www.python.org/doc/2.3.5/lib/module-Queue.html

Im sure that get_nowait needs to be replaced with a regular blocking get, as I 
described below.

> 7. _interleave calls toMainThread.get_nowait. This raises a Queue.Empty 
> exception, which escapes up to the foreign event loop integration code.
> 
> In the blocking select thread
> 
> 8. _doSelectInThread is called because of the request in step 3.
> 9. _doSelectInThread calls sendToMain. This never gets removed from the 
Queue.
> 
> At this point:
> 
> * The reactor is stalled indefinitely because _interleave raised an 
exception 
> before it called _sendToThread(_doIterationInThread.
> 
> * Any subsequent calls to doIteration will cause _doThreadIteration to 
> deadlock in sendToMain.
> 
> 
> I believe the right solution involves replacing get_nowait with a regular 
get 
> in _interleave.
> 
> I guess it is not a problem that doIteration sometimes does not perform a 
> whole iteration. There has never been a guarantee about how much work is 
done 
> each iteration of the reactor loop, right?
> 
> 
> 
> -- 
> Toby Dickenson
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 

-- 
Toby Dickenson



From p.mayers at imperial.ac.uk  Wed Oct 12 03:48:07 2005
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 12 Oct 2005 10:48:07 +0100
Subject: [Twisted-Python] Python 2.2 Support
In-Reply-To: <20051011043912.GN21420@home.puzzling.org>
References: <d06a5cd30510102131t58144c60g@mail.gmail.com>
	<20051011043912.GN21420@home.puzzling.org>
Message-ID: <434CDBD7.1060805@imperial.ac.uk>

Mary Gardiner wrote:
> So, the previous version of this thread came up with:
> 
> On Tue, Oct 11, 2005, Jonathan Lange wrote:
> 
>>Should we drop Python 2.2 support in Subversion head for Twisted 2.2?
>>
>>- Debian stable now comes with Python 2.3
>>- Twisted 2.1 has been released with Python 2.2 support
> 
>   - the most commonly used version of Red Hat Enterprise still has
>     Python 2.3
> 
> Therefore:
> 
> 
>>Some bad consequences:
>>- People wanting to run Twisted 2.2 (or svn) on ancient versions of
>>Python won't be able to.
> 
>   - in particular, people wanting to run Twisted 2.2 on RHE will need
>     to upgrade to the very latest, less widely used, version
> 

FWIW we use an enormous quantity of (Twisted- and not-)Python code here, 
of which I'm the prime maintainer. As a matter of course, I build a 
local copy of Python on RHEL3 boxes, because the extensive use of Python 
in Fedora/Redhat sysadmin tools makes me somewhat nervous about tooling 
around with the system copy.

What I'm saying is that it's not a huge barrier to entry needing to 
build Python2.3/4/5 from source (in fact the big pain is getting various 
extension modules, pyOpenSSL in particular - and an egg-ified Python and 
Twisted would help that immensely). Though having fast server machines 
makes it less painful (which is solveable using a /usr/local-ified RPM).

My suggestion would be to aim for the following - an egged Twisted, 
deprecate Python2.2, then a user installing Twisted has to do three things:

wget Python2.3.tgz; tar xzf Python2.3.tgz; cd Python2.3
./configure && make && make install

...then

wget easyinstall.tgz; tar xzf easyinstall.tgz; cd easyinstall
/usr/local/bin/python2.3 setup.py install

...then

easy_install Twisted

...which ideally would pull down all the various modules and associated 
crap required to actually include the batteries in Python ;o)



From gmcdonald at infocomp.com  Wed Oct 12 03:55:01 2005
From: gmcdonald at infocomp.com (Grant McDonald)
Date: Wed, 12 Oct 2005 19:55:01 +1000
Subject: [Twisted-Python] Twisted and SVN
Message-ID: <61DA7719C45FD31185280008C733EF6E04AC4FCB@XCHANGE>

Glyph,

Thanks for taking the time to provide such a detailed response. SVN always
looked better on paper but it is good to read the real world
experiences/opinions of a developer on a large project that is actually
using it! :)

Thanks again,

Grant M.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20051012/278cca81/attachment.html>

From matt at pollenation.net  Wed Oct 12 05:42:39 2005
From: matt at pollenation.net (Matt Goodall)
Date: Wed, 12 Oct 2005 12:42:39 +0100
Subject: [Twisted-Python] Subproject releases
In-Reply-To: <434CD144.8040308@metamoof.net>
References: <20051012054938.3914.543518999.divmod.quotient.27213@ohm>	<D1BED759-06D3-4FC0-BE20-D50F48D12F60@dreid.org>
	<434CD144.8040308@metamoof.net>
Message-ID: <434CF6AF.9020901@pollenation.net>


Moof wrote:
> David Reid wrote:
> 
>>On Oct 11, 2005, at 10:49 PM, glyph at divmod.com <mailto:glyph at divmod.com>
>>wrote:
>>
>>
>>>I remember participating in this initial discussion.
>>>
>>>I remember taking some side in it, and arguing strongly for that side.
>>>
>>>I'm not sure which one it was, so if I'm responsible for rejecting it
>>>I've changed my mind, but if I was arguing in favor of it I'm now even
>>>more vociferous :).
>>
>>
>>Just in the interest of clarity, I'm fairly certain you argued against
>>this, because of the pain it would cause the developer involved in all
>>aspects of Twisted as opposed to just one or two subprojects.  Then I
>>wrote pthy, to try to make that kind of thing easier, no one used it,
>>and now apparently you've written Combinator to do the same thing in a
>>different and all together better way.  So I support this kind of change.  
> 
> 
> Out of interest, How do these solutions relate to all the fancy metapackage
> stuff you can do with setuptools?

If the projects are separate it would be much easier, although there are
other issues in the Twisted code that make zip safe eggs difficult right
now.

setuptools's namespace packages requires (AFAICT) the package components
to be in separate directories.

One thing to be wary of ... using setuptools namespace packages seems to
force you down the pkg_resources.require('xyz') route. That is good or
bad, depending on your viewpoint ;-).

Personally, I would like Twisted eggs and I would be happy to help out
with this. It *would* mean some changes to the Twisted code though -
some of it simple (killing __file__ references), some of it a bit more
tricky (plugin's dropin.cache).

Anyway, let's not let this descend into a setuptools vs <insert
favourite package manager> flame fest. Making eggs possible are just one
of many goals that may be helped by separating Twisted projects.

- Matt

> 
> Much of the python world seems to be migrating towards setuptools as a way
> to distribute their packages and cope with fun things like dependencies.
> Certainly I'd hope that I could say "depends on twisted.core and
> twisted.web" on future packages that I might be developing. It even has
> so-called "Namespace package" support, which initially seems geared towards
> Zope's package structure, but might well do for twisted, too. And if it's
> not ok for twisted, then now is the right time to pipe up at the developers
> (which seem to be lead by Phillip J Eby) and get some changes made, as it's
> still in a robust alpha stage.
> 
> <http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages>
> 
> I think it'd be a huge shame for twisted not to release eggs in the future,
> this stuff is not even beta, and it's already got wide acceptance and usage
> out in the web framework world, amongst others. And now's the time to get it
> right, at least as far as setuptools is concerned.
> 
> Moof

-- 
     __
    /  \__     Matt Goodall, Pollenation Internet Ltd
    \__/  \    w: http://www.pollenation.net
  __/  \__/    e: matt at pollenation.net
 /  \__/  \    t: +44 (0)113 2252500
 \__/  \__/
 /  \          Any views expressed are my own and do not necessarily
 \__/          reflect the views of my employer.



From Henning.Ramm at mediapro-gmbh.de  Wed Oct 12 06:11:48 2005
From: Henning.Ramm at mediapro-gmbh.de (Henning.Ramm at mediapro-gmbh.de)
Date: Wed, 12 Oct 2005 14:11:48 +0200
Subject: [Twisted-Python] problem enhancing conch sample
Message-ID: <F92274058556DE42B94B148EEFB91839021CB5B1@exchange-03.suedkurier.de>

>Each channel can only be only command, executed
>one time.  If you need to run a second command, you need to open a new
>channel.

That's what I needed to know. The tutorial doesn't explain this (or I didn't understand it).
Thank you!

Best regards,
Henning Hraban Ramm
Südkurier Medienhaus / MediaPro
Support/Admin/Development Dept.



From glyph at divmod.com  Wed Oct 12 07:16:06 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Wed, 12 Oct 2005 09:16:06 -0400
Subject: [Twisted-Python] Subproject releases
In-Reply-To: <434CF6AF.9020901@pollenation.net>
References: <20051012054938.3914.543518999.divmod.quotient.27213@ohm>	<D1BED759-06D3-4FC0-BE20-D50F48D12F60@dreid.org>	<434CD144.8040308@metamoof.net>
	<434CF6AF.9020901@pollenation.net>
Message-ID: <434D0C96.6040707@divmod.com>

Matt Goodall wrote:

> Anyway, let's not let this descend into a setuptools vs <insert
> favourite package manager> flame fest. Making eggs possible are just one
> of many goals that may be helped by separating Twisted projects.

It would also probably simplify the existing setup.py installations, but
agreed: let's not conflate the two discussions.

However, as long as we're talking about it... mg: What you did for Nevow
would probably be a good idea; let's have a parallel setuptools_setup.py
for a while before switching over to it.

eggs are pretty awesome though, twisted.plugin should definitely have
some way of integrating with them.  As far as dropin.cache goes, I have
some weird ideas about a "path management object" that wrapped around
sys.path and did things like determine if zipimport was being used at
any point in any path, to give parallel directories to write cache data
to, etc.  __file__ references can be replaced by
get_resource_mumblemumble calls entirely, right?

FWIW: I do mostly remember arguing against this initially ;-), and I
think it was probably a good idea at the time.  The "topfiles" idea was
pretty ingenious to keep the whole repository working with the same
structure between 1.3 and 2.0.  I just think its' time has passed.

and David, I did read the code to Pthy before I wrote Combinator, so
that project did help :-)



From tjs at nunatak.com.au  Wed Oct 12 08:18:28 2005
From: tjs at nunatak.com.au (Timothy Stebbing)
Date: Thu, 13 Oct 2005 01:18:28 +1100
Subject: [Twisted-Python] ANN: Nufox 0.1.0
Message-ID: <434D1B34.4020300@nunatak.com.au>

Nufox is a remote-XUL server framework for building live, event-driven, 
through-the-web GUI applications without writing markup, just python. 
This is the initial release and represents several months work, much 
thanks to cablehead, radix, exarkun et al for their advice and 
contributions.

url: http://trac.nunatak.com.au/projects/nufox
download: http://trac.nunatak.com.au/trac/Nufox-0.1.0.tar.gz

Timothy <tjs> Stebbing




From matt at pollenation.net  Wed Oct 12 08:36:27 2005
From: matt at pollenation.net (Matt Goodall)
Date: Wed, 12 Oct 2005 15:36:27 +0100
Subject: twisted eggs (was Re: [Twisted-Python] Subproject releases)
In-Reply-To: <434D0C96.6040707@divmod.com>
References: <20051012054938.3914.543518999.divmod.quotient.27213@ohm>	<D1BED759-06D3-4FC0-BE20-D50F48D12F60@dreid.org>	<434CD144.8040308@metamoof.net>	<434CF6AF.9020901@pollenation.net>
	<434D0C96.6040707@divmod.com>
Message-ID: <434D1F6B.9000509@pollenation.net>

Glyph Lefkowitz wrote:
> Matt Goodall wrote:
> 
> 
>>Anyway, let's not let this descend into a setuptools vs <insert
>>favourite package manager> flame fest. Making eggs possible are just one
>>of many goals that may be helped by separating Twisted projects.
> 
> 
> It would also probably simplify the existing setup.py installations, but
> agreed: let's not conflate the two discussions.
> 
> However, as long as we're talking about it... mg: What you did for Nevow
> would probably be a good idea; let's have a parallel setuptools_setup.py
> for a while before switching over to it.

Heh, strictly speaking the original setup.py was reverted and my
setup.py was moved out of the way to setup_egg.py.

But yes, a parallel setuptools setup.py would be the correct answer for now.

I might start scanning through the Twisted code to see what would need
to change to allow eggs. The obvious one is __file__ references but to
use namespace packages we'd need to clear everything out of
twisted.__init__.

If I get a chance, I'll post my findings back here.

> 
> eggs are pretty awesome though, twisted.plugin should definitely have
> some way of integrating with them.  As far as dropin.cache goes, I have
> some weird ideas about a "path management object" that wrapped around
> sys.path and did things like determine if zipimport was being used at
> any point in any path, to give parallel directories to write cache data
> to, etc.  __file__ references can be replaced by
> get_resource_mumblemumble calls entirely, right?

pkg_resources has a couple of functions for locating a resource (file or
directory, i think) by name, from inside a package.

Obviously, you can't guarentee you can write to those resources though ;-)

- Matt

-- 
     __
    /  \__     Matt Goodall, Pollenation Internet Ltd
    \__/  \    w: http://www.pollenation.net
  __/  \__/    e: matt at pollenation.net
 /  \__/  \    t: +44 (0)113 2252500
 \__/  \__/
 /  \          Any views expressed are my own and do not necessarily
 \__/          reflect the views of my employer.



From foom at fuhm.net  Wed Oct 12 10:13:18 2005
From: foom at fuhm.net (James Y Knight)
Date: Wed, 12 Oct 2005 12:13:18 -0400
Subject: [Twisted-Python] Subproject releases
In-Reply-To: <20051012054938.3914.543518999.divmod.quotient.27213@ohm>
References: <20051012054938.3914.543518999.divmod.quotient.27213@ohm>
Message-ID: <984B75A9-F452-4473-9588-9424046368E8@fuhm.net>


On Oct 12, 2005, at 1:49 AM, glyph at divmod.com wrote:
> The Divmod repository is now organized this way, and we have a tool  
> (Combinator) which keeps PYTHONPATH from exploding into a million  
> pieces that kill you.  For an example of this repository structure  
> see <http://divmod.org/trac/browser/trunk>.

AFAIU, Combinator doesn't solve the problem of twisted.words,  
twisted.internet, and twisted.web being in separately distributed  
packages. Of course, that's "only" an issue while developing, because  
on install, you either use setuptools magic or else install  
everything into the same directory hierarchy.

As an experiment, I've tried rearranging my local hierarchy with  
separate dirs for each project, as follows:
core/admin/...
core/doc/...
core/twisted/{application,cred,internet,...}
web2/twisted/web2/
web2/doc/...

Then, created a wrapper to combine them:
twisted/__init__.py:
> import os.path
> __path__=["core/twisted", "web2/twisted"]
> __path__=[os.path.abspath(os.path.join(os.path.dirname(__file__),  
> "..", elt)) for elt in __path__]
> import copyright
> __version__ = copyright.version
> from twisted.python import compat
> del compat, os

With this setup, things seem to mostly work, besides twisted.plugin,  
which doesn't work because of plugins' insane magic. I suspect  
there's some way to make that work though. So, I think the  
rearrangement is probably doable without too much pain.

James



From dreid at dreid.org  Wed Oct 12 13:26:11 2005
From: dreid at dreid.org (David Reid)
Date: Wed, 12 Oct 2005 12:26:11 -0700
Subject: [Twisted-Python] Subproject releases
In-Reply-To: <984B75A9-F452-4473-9588-9424046368E8@fuhm.net>
References: <20051012054938.3914.543518999.divmod.quotient.27213@ohm>
	<984B75A9-F452-4473-9588-9424046368E8@fuhm.net>
Message-ID: <1129145171.3472.23.camel@audrey.local>

On Wed, 2005-10-12 at 12:13 -0400, James Y Knight wrote:

> AFAIU, Combinator doesn't solve the problem of twisted.words,  
> twisted.internet, and twisted.web being in separately distributed  
> packages. 

You're right, neither pthy nor combinator actually solves that problem
and there is no way to solve them with pth files because pth files
aren't looked for at the module import level.  Likewise, combinators use
of PYTHONPATH.  So there are two real problems here, how to make the
repository reorganization work for users, and how to make it work for
developers.  

- radix's fancy setup.py'ing, zpkgtools, pythonEggs are all potential
user solutions.

- Your smart twisted/__init__.py is a developer solution, but it doesn't
addressed (perhaps you just didn't want to mention it yet) what happens
when I want to use bracnhes/web2/foom/client2/ with it?  I suppose your
hierarchy is actually something like

twisted/core/twisted
twisted/web2/twisted
twisted/__init__.py

and core, web2, projname, etc would all be symlinks to various branches
of the various projects.  But that still seems to intrude on the
developer's habits.

I guess what I'm saying is, as far as user solutions go, we just need to
pick one (preferably one with versioning), it's the developer solution
that is going to make or break a reorganization, because it's hard
enough to develop twisted given all the personal and professional
distractions, but it shouldn't get harder by forcing developers to work
a certain way.

-David




From radeex at gmail.com  Wed Oct 12 03:21:43 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Wed, 12 Oct 2005 20:21:43 +1100
Subject: [Twisted-Python] Subproject releases
In-Reply-To: <434CD144.8040308@metamoof.net>
References: <20051012054938.3914.543518999.divmod.quotient.27213@ohm>
	<D1BED759-06D3-4FC0-BE20-D50F48D12F60@dreid.org>
	<434CD144.8040308@metamoof.net>
Message-ID: <60ed19d40510120221j51384910s5a4d0c1d76c257b9@mail.gmail.com>

On 10/12/05, Moof <moof at metamoof.net> wrote:
> Out of interest, How do these solutions relate to all the fancy metapackage
> stuff you can do with setuptools?

[a bunch of stuff about how cool setuptools is and the Python
community moving towards it]

To be frank, I am inclined to not touch another release-packaging
technology for at least a couple of months. I had a horrible
experience with zpkgtools before the 2.0 release, trying to fix it up
where it was insufficient for Twisted, just to eventually find out
that the benefit I was getting out of it could be duplicated with
about 30 lines of utility functions and without all of the massive
overengineering that seems so common in the Zope world (says the crazy
Twisted developer).

However, if someone really wants to take this end-to-end, I'm of
course not going to stand in his way. However, I would still encourage
not messing with the release stuff, apart from obvious cleanups and
conveniences, as it's now just settling down and becoming easy to do
releases with, and it's really turning out quite nice. Making the
release stuff support generation of eggs would be nice, but I'm not
keen on switching it over to the latest release management
super-package just yet.


--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+



From radeex at gmail.com  Wed Oct 12 03:02:02 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Wed, 12 Oct 2005 20:02:02 +1100
Subject: [Twisted-Python] Subproject releases
In-Reply-To: <20051012054938.3914.543518999.divmod.quotient.27213@ohm>
References: <446737B7-AA24-47AB-B64F-96C1D6D424B7@fuhm.net>
	<20051012054938.3914.543518999.divmod.quotient.27213@ohm>
Message-ID: <60ed19d40510120202m129fb1fci8aab71a9ecb1b28e@mail.gmail.com>

On 10/12/05, glyph at divmod.com <glyph at divmod.com> wrote:
> I'm not sure which one it was, so if I'm responsible for rejecting it I've changed my mind, but if I was arguing in favor of it I'm now even more vociferous :).

I'm pretty sure this is a change of mind, and one I'm quite happy to see. :-)

>
> The Divmod repository is now organized this way, and we have a tool (Combinator) which keeps PYTHONPATH from exploding into a million pieces that kill you.  For an example of this repository structure see <http://divmod.org/trac/browser/trunk>.
>
> I think that it would be a very good idea to re-organize the Twisted repository this way, especially given the path semantics of the new plugin mechanism.  It is difficult to sanely decide which project plugins for another project ought to be distributed with at this point, and as we move towards more usage of plugins rather than direct imports for integration, this problem is only going to get worse.
>
> I would suggest trunk/TwistedWords trunk/TwistedCore trunk/TwistedNames (etc etc).  Cherry-picked branches would still be a little bit of work to construct, but a reasonable amount (and appropriate local checkout structure could probably also approximate them).
>
> I realize that this has the potential to be a pretty disruptive change.  I'm open to suggestions on when would be a good time, and I have no plans to push hard to get this to happen any time soon.  I do think it would be a good idea eventually, though.

I am hella-+10-for-this, as it would make the release process much
much saner, but it's not going to be trivial. Has Divmod yet figured
out how to have multiple top-level "twisted" directories without
running a setup.py? Initially, I tried to hack something together that
munged twisted.__path__ (look that one up, if you don't know about it,
it's way wonky) to include all the subproject twisted directories, but
trial just totally hated that (I remember fighting with
modulename->filename conversion, or vice versa). I can't remember if
that was the only thing that held me back from that solution, but I'm
definitely willing to take another whack at it. Especially now that
trial is massively cleaned up and I live with its maintainer ;)

--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+



From peter.mayne at hp.com  Wed Oct 12 17:50:28 2005
From: peter.mayne at hp.com (Mayne, Peter)
Date: Thu, 13 Oct 2005 09:50:28 +1000
Subject: [Twisted-Python] FTP server with credentials
Message-ID: <5E5B32FADDBD6A4AB1033EFE451D58A90240F12C@snoexc04.asiapacific.cpqcorp.net>

I'm trying to write a simple FTP server that a client can connect and
authenticate to, then upload a file, which the server buffers in memory
and processes, and then returns a status result to the client depending
on the result of the processing. (Twisted 2.0.1, Python 2.4.1, Windws XP
SP2)

So far I've done this:

<code>
import sys
from twisted.cred import checkers, portal
from twisted.internet import reactor, protocol
from twisted.protocols import ftp
from twisted.python import components, log

class IProtocolUser(components.Interface):
    def getPrivileges(self):
        """Return a list of privileges this user has."""

    def logout(self):
        """Cleanup per-login resources allocated to this avatar"""

class RegularUser:
    __implements__ = (IProtocolUser,)

    def getPrivileges(self):
        return [1, 2, 3, 5, 6]

    def logout(self):
        print "Cleaning up regular user resources"

class Realm:
    __implements__ = portal.IRealm

    def requestAvatar(self, avatarId, mind, *interfaces):
        if ftp.IFTPShell in interfaces:
            av = RegularUser()
            return ftp.IFTPShell, av, av.logout
        else:
            raise NotImplementedError("Only IFTPShell interface is
supported by this realm")

class MyFtpServer(ftp.FTP):
    '''My custom FTP server.'''

    def __init__(self, *args, **kw):
        super(ftp.FTP, self).__init__(*args, **kw)
        self.blockingCommands.remove('PORT')
        print 'Removed PORT to allow non-PASV'

    def dataReceived(self, data):
        'As soon as any data is received, send it to stdout for
debugging.'
        sys.stdout.write('\n  **[%s]\n' % data)
        self.transport.write(data)

def main():
    r = Realm()
    p = portal.Portal(r)
    c = checkers.InMemoryUsernamePasswordDatabaseDontUse()
    c.addUser("u", "p")
    p.registerChecker(c)
    p.registerChecker(checkers.AllowAnonymousAccess())

    #log.startLogging(sys.stdout)

    factory = ftp.FTPFactory(MyFtpServer())
    factory.portal = p
    reactor.listenTCP(2121, factory)
    reactor.run()

if __name__ == '__main__':
    main()
</code>

I can connect and authenticate (using the Windows comman line FTP client
running on the same system), but when I "put myfile.txt" on the client,
the server produces the following:

<output>
C:\>mockftp.py
Removed PORT to allow non-PASV
C:\opt\Python24\lib\site-packages\twisted\protocols\ftp.py:625:
DeprecationWarni
ng: IPv4Address.__getitem__ is deprecated.  Use attributes instead.
  phost = self.transport.getPeer()[1]
Traceback (most recent call last):
Failure: exceptions.IndexError: tuple index out of range
Traceback (most recent call last):
  File
"C:\opt\Python24\lib\site-packages\twisted\internet\selectreactor.py",
li
ne 133, in doSelect
    _logrun(selectable, _drdw, selectable, method, dict)
  File "C:\opt\Python24\Lib\site-packages\twisted\python\log.py", line
56, in ca
llWithLogger
    return callWithContext({"system": lp}, func, *args, **kw)
  File "C:\opt\Python24\Lib\site-packages\twisted\python\log.py", line
41, in ca
llWithContext
    return context.call({ILogContext: newCtx}, func, *args, **kw)
  File "C:\opt\Python24\Lib\site-packages\twisted\python\context.py",
line 31, i
n callWithContext
    return func(*args,**kw)
--- <exception caught here> ---
  File
"C:\opt\Python24\lib\site-packages\twisted\internet\selectreactor.py",
li
ne 139, in _doReadOrWrite
    why = getattr(selectable, method)()
  File "C:\opt\Python24\Lib\site-packages\twisted\internet\tcp.py", line
351, in
 doRead
    return self.protocol.dataReceived(data)
  File "C:\opt\Python24\Lib\site-packages\twisted\protocols\basic.py",
line 221,
 in dataReceived
    why = self.lineReceived(line)
  File "C:\opt\Python24\lib\site-packages\twisted\protocols\ftp.py",
line 550, i
n lineReceived
    self.processCommand(*cmdAndArgs)
  File "C:\opt\Python24\lib\site-packages\twisted\protocols\ftp.py",
line 608, i
n processCommand
    return method(*args)
  File "C:\opt\Python24\lib\site-packages\twisted\protocols\ftp.py",
line 940, i
n ftp_PORT
    self._createDTP()
  File "C:\opt\Python24\lib\site-packages\twisted\protocols\ftp.py",
line 632, i
n _createDTP
    self.dtpPort = reactor.connectTCP(self.dtpHostPort[1],
self.dtpHostPort[2])
exceptions.IndexError: tuple index out of range
Cleaning up regular user resources
</output>

At this point I'm lost. What am I doing wrong?

Thanks.

PJDM
-- 
Peter Mayne
Technology Consultant
Hewlett-Packard Australia
7-11 Barry Drive, Turner, ACT, 2612



From itamar at itamarst.org  Wed Oct 12 18:01:09 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 12 Oct 2005 20:01:09 -0400
Subject: [Twisted-Python] FTP server with credentials
In-Reply-To: <5E5B32FADDBD6A4AB1033EFE451D58A90240F12C@snoexc04.asiapacific.cpqcorp.net>
References: <5E5B32FADDBD6A4AB1033EFE451D58A90240F12C@snoexc04.asiapacific.cpqcorp.net>
Message-ID: <1129161670.8725.4.camel@localhost.localdomain>

On Thu, 2005-10-13 at 09:50 +1000, Mayne, Peter wrote:
> I'm trying to write a simple FTP server that a client can connect and
> authenticate to, then upload a file, which the server buffers in memory
> and processes, and then returns a status result to the client depending
> on the result of the processing. (Twisted 2.0.1, Python 2.4.1, Windws XP
> SP2)

You'll want to look at Twisted 2.1, it has a much improved FTP server
backend (though the authentication part shouldn't be affected, IIRC).




From peter.mayne at hp.com  Wed Oct 12 18:34:31 2005
From: peter.mayne at hp.com (Mayne, Peter)
Date: Thu, 13 Oct 2005 10:34:31 +1000
Subject: [Twisted-Python] FTP server with credentials
Message-ID: <5E5B32FADDBD6A4AB1033EFE451D58A90240F17F@snoexc04.asiapacific.cpqcorp.net>

I'm doing that right now (although I went with 2.0.1 because of the
convenient Windows installer).

Does 2.1 make the FTP server any easier? :-)

PJDM
-- 
Peter Mayne
Technology Consultant
Hewlett-Packard Australia
7-11 Barry Drive, Turner, ACT, 2612
 

> -----Original Message-----
> From: twisted-python-bounces at twistedmatrix.com 
> [mailto:twisted-python-bounces at twistedmatrix.com] On Behalf 
> Of Itamar Shtull-Trauring
> Sent: Thursday, 13 October 2005 10:01 AM
> To: Twisted general discussion
> Subject: Re: [Twisted-Python] FTP server with credentials
> 

> You'll want to look at Twisted 2.1, it has a much improved FTP server
> backend (though the authentication part shouldn't be affected, IIRC).



From foom at fuhm.net  Wed Oct 12 19:31:47 2005
From: foom at fuhm.net (James Y Knight)
Date: Wed, 12 Oct 2005 21:31:47 -0400
Subject: [Twisted-Python] Subproject releases
In-Reply-To: <984B75A9-F452-4473-9588-9424046368E8@fuhm.net>
References: <20051012054938.3914.543518999.divmod.quotient.27213@ohm>
	<984B75A9-F452-4473-9588-9424046368E8@fuhm.net>
Message-ID: <8A85A757-AA98-4F35-9244-11BADFD7108B@fuhm.net>


On Oct 12, 2005, at 12:13 PM, James Y Knight wrote:
> With this setup, things seem to mostly work, besides  
> twisted.plugin, which doesn't work because of plugins' insane  
> magic. I suspect there's some way to make that work though. So, I  
> think the rearrangement is probably doable without too much pain.

Okay, I've gone and done it now...see svn://svn.twistedmatrix.com/svn/ 
Twisted/branches/foom/svn-reorg/

Trial is an issue, though...
1) Just weirdness...
This doesn't work:
   PYTHONPATH=Root core/bin/trial conch/twisted/conch/test/test_ssh.py
This does work:
   PYTHONPATH=Root core/bin/trial twisted.conch.test.test_ssh

2) Trial's recurse doesn't work,
This finds no tests to run:
   PYTHONPATH=Root core/bin/trial twisted

James



From peter.mayne at hp.com  Wed Oct 12 20:09:45 2005
From: peter.mayne at hp.com (Mayne, Peter)
Date: Thu, 13 Oct 2005 12:09:45 +1000
Subject: [Twisted-Python] Generating API documentation
Message-ID: <5E5B32FADDBD6A4AB1033EFE451D58A90240F2A9@snoexc04.asiapacific.cpqcorp.net>

I've downloaded and installed Twisted 2.1 on Windows XP.

I work off-line some of the time, so I'd like a local copy of the API
documentation, but I don't want to wget the website.

How do I generate the API documentation locally?

(Lore seemed to be a part of the 2.0.1 Windows install, but not the
2.1.0 bz2.)

Thanks.

PJDM
-- 
Peter Mayne
Technology Consultant
Hewlett-Packard Australia
7-11 Barry Drive, Turner, ACT, 2612



From glyph at divmod.com  Wed Oct 12 20:26:52 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Wed, 12 Oct 2005 22:26:52 -0400
Subject: [Twisted-Python] Subproject releases
In-Reply-To: <984B75A9-F452-4473-9588-9424046368E8@fuhm.net>
References: <20051012054938.3914.543518999.divmod.quotient.27213@ohm>
	<984B75A9-F452-4473-9588-9424046368E8@fuhm.net>
Message-ID: <434DC5EC.9060409@divmod.com>

James Y Knight wrote:

> On Oct 12, 2005, at 1:49 AM, glyph at divmod.com wrote:
>> The Divmod repository is now organized this way, and we have a tool 
>> (Combinator) which keeps PYTHONPATH from exploding into a million 
>> pieces that kill you.  For an example of this repository structure 
>> see <http://divmod.org/trac/browser/trunk>.

> AFAIU, Combinator doesn't solve the problem of twisted.words, 
> twisted.internet, and twisted.web being in separately distributed 
> packages. Of course, that's "only" an issue while developing, because 
> on install, you either use setuptools magic or else install  everything
> into the same directory hierarchy.

It doesn't directly, but the __init__.py hack that exists in
twisted.plugin already seems a little cleaner than the one you're using
there.  Using Combinator you have a Twisted.pth that sits at the top
level that says:

core
web2

(etc)

I can make another branch which re-organizes the repository using
Combinator; we could probably move Combinator into Twisted from the
Divmod repository, since it doesn't do too much and it doesn't rely on
any Divmod code (or Twisted, for that matter).

In spirit the organization you suggest is identical to mine, though, I
would just implement it a bit differently.

Chris makes an excellent point in an earlier post though.  Would this
reorganization have any detrimental effect upon the release process?



From glyph at divmod.com  Wed Oct 12 20:29:37 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Wed, 12 Oct 2005 22:29:37 -0400
Subject: [Twisted-Python] Subproject releases
In-Reply-To: <60ed19d40510120202m129fb1fci8aab71a9ecb1b28e@mail.gmail.com>
References: <446737B7-AA24-47AB-B64F-96C1D6D424B7@fuhm.net>	<20051012054938.3914.543518999.divmod.quotient.27213@ohm>
	<60ed19d40510120202m129fb1fci8aab71a9ecb1b28e@mail.gmail.com>
Message-ID: <434DC691.3060709@divmod.com>

Christopher Armstrong wrote:

> I am hella-+10-for-this,

Whoops!  Didn't read this before I wrote my last response :).

> as it would make the release process much
> much saner, but it's not going to be trivial. Has Divmod yet figured
> out how to have multiple top-level "twisted" directories without
> running a setup.py?

Basically yes, I think, but I will have to experiment to make sure my
*particular* __path__ hack works exactly as I expect it to.

> Initially, I tried to hack something together that
> munged twisted.__path__ (look that one up, if you don't know about it,
> it's way wonky) to include all the subproject twisted directories, but
> trial just totally hated that (I remember fighting with
> modulename->filename conversion, or vice versa). I can't remember if
> that was the only thing that held me back from that solution, but I'm
> definitely willing to take another whack at it. Especially now that
> trial is massively cleaned up and I live with its maintainer ;)

Hmm.  Trial interaction is something I haven't messed with yet; I
haven't put trial directory below a __path__ entry.

Arguably this is simply a bug in Trial that should be fixed, though.



From jml at mumak.net  Wed Oct 12 21:59:00 2005
From: jml at mumak.net (Jonathan Lange)
Date: Thu, 13 Oct 2005 14:59:00 +1100
Subject: [Twisted-Python] Subproject releases
In-Reply-To: <434DC691.3060709@divmod.com>
References: <446737B7-AA24-47AB-B64F-96C1D6D424B7@fuhm.net>
	<20051012054938.3914.543518999.divmod.quotient.27213@ohm>
	<60ed19d40510120202m129fb1fci8aab71a9ecb1b28e@mail.gmail.com>
	<434DC691.3060709@divmod.com>
Message-ID: <d06a5cd30510122059t4cc93f2aq@mail.gmail.com>

On 13/10/05, Glyph Lefkowitz <glyph at divmod.com> wrote:
> Christopher Armstrong wrote:
>
> > Initially, I tried to hack something together that
> > munged twisted.__path__ (look that one up, if you don't know about it,
> > it's way wonky) to include all the subproject twisted directories, but
> > trial just totally hated that (I remember fighting with
> > modulename->filename conversion, or vice versa). I can't remember if
> > that was the only thing that held me back from that solution, but I'm
> > definitely willing to take another whack at it. Especially now that
> > trial is massively cleaned up and I live with its maintainer ;)
>
> Hmm.  Trial interaction is something I haven't messed with yet; I
> haven't put trial directory below a __path__ entry.
>
> Arguably this is simply a bug in Trial that should be fixed, though.
>

Either way, it'll probably help to write a unit test that reproduces
the error :D

jml



From peter.mayne at hp.com  Thu Oct 13 00:01:48 2005
From: peter.mayne at hp.com (Mayne, Peter)
Date: Thu, 13 Oct 2005 16:01:48 +1000
Subject: [Twisted-Python] FTP server with credentials
Message-ID: <5E5B32FADDBD6A4AB1033EFE451D58A90240F47D@snoexc04.asiapacific.cpqcorp.net>

> [mailto:twisted-python-bounces at twistedmatrix.com] On Behalf 
> Of Itamar Shtull-Trauring
> 
> You'll want to look at Twisted 2.1, it has a much improved FTP server
> backend (though the authentication part shouldn't be affected, IIRC).

Using 2.1 definitely makes things easier, I'm nearly there. I just have
to figure out how to return different status values for a STOR.

One thing I've noticed is when I 'BYE' from the FTP client, I don't get
a '221' line from the Twisted FTP server. With the command line client
it doesn't matter, but I'm using Python's ftplib, and quit() throws an
EOFError because it didn't read the closing line.

Is the lack of a closing '221' a generic Twisted problem, or something
I've broken?

Thanks.

PJDM
-- 
Peter Mayne
Technology Consultant
Hewlett-Packard Australia
7-11 Barry Drive, Turner, ACT, 2612



From toby at permuted.net  Thu Oct 13 00:51:29 2005
From: toby at permuted.net (Tobias Sargeant)
Date: Thu, 13 Oct 2005 16:51:29 +1000
Subject: [Twisted-Python] correct way to disconnect a pb connection?
Message-ID: <e1e411d4150de0fabb6b448326652464@permuted.net>

Hi,

Is there a correct way to disconnect a pb client? all the examples seem
to call reacctor.stop() which is not what I want. Calling
broker.transport.loseConnection() seems clean on the client side, but
on the server side I see lots of these:

2005/10/13 16:47 EST [ControldServerConnection,0,192.168.34.218] 
connection lost <Q.controld.controld.ControldServerConnection instance 
at 0x102cd78> [Failure instance: Traceback (failure with no frames): 
twisted.internet.error.ConnectionLost: Connection to the other side was 
lost in a non-clean fashion.

I've hunted through the source, but thus far haven't even been able to
ascertain where the exception is originally being raised.

Cheers,
Toby.
-- 
Tobias Sargeant  key: D9E15866 fp: 
EDD8E1EC440AD2B689BFAFA4FBFC19B6D9E15866
ph: +61 3 9345 2627   fax: +61 3 9347 0852   email: sargeant at 
wehi.edu.au
Bioinformatics, The Walter and Eliza Hall Institute of Medical Research
1G Royal Parade, Parkville, Victoria 3050, Australia




From uwe at oss4u.com  Thu Oct 13 01:01:54 2005
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Thu, 13 Oct 2005 00:01:54 -0700
Subject: [Twisted-Python] correct way to disconnect a pb connection?
In-Reply-To: <e1e411d4150de0fabb6b448326652464@permuted.net>
References: <e1e411d4150de0fabb6b448326652464@permuted.net>
Message-ID: <200510130001.54309.uwe@oss4u.com>


Don't know if this is the way to go, but what I'm doing is to call a 
server-side "disconnect" method, which will do some cleanup and then call the 
transport.loseConnection() on the server.
The client has an error handler which will catch that "lost connection" error 
and terminate gracefully.

Maybe that helps

UC


On Wednesday 12 October 2005 23:51, Tobias Sargeant wrote:
> Hi,
>
> Is there a correct way to disconnect a pb client? all the examples seem
> to call reacctor.stop() which is not what I want. Calling
> broker.transport.loseConnection() seems clean on the client side, but
> on the server side I see lots of these:
>
> 2005/10/13 16:47 EST [ControldServerConnection,0,192.168.34.218]
> connection lost <Q.controld.controld.ControldServerConnection instance
> at 0x102cd78> [Failure instance: Traceback (failure with no frames):
> twisted.internet.error.ConnectionLost: Connection to the other side was
> lost in a non-clean fashion.
>
> I've hunted through the source, but thus far haven't even been able to
> ascertain where the exception is originally being raised.
>
> Cheers,
> Toby.

--
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417



From moof at metamoof.net  Thu Oct 13 04:07:37 2005
From: moof at metamoof.net (Moof)
Date: Thu, 13 Oct 2005 12:07:37 +0200
Subject: [Twisted-Python] Subproject releases
In-Reply-To: <1129145171.3472.23.camel@audrey.local>
References: <20051012054938.3914.543518999.divmod.quotient.27213@ohm>	<984B75A9-F452-4473-9588-9424046368E8@fuhm.net>
	<1129145171.3472.23.camel@audrey.local>
Message-ID: <434E31E9.2060700@metamoof.net>

David Reid wrote:

> I guess what I'm saying is, as far as user solutions go, we just need to
> pick one (preferably one with versioning), it's the developer solution
> that is going to make or break a reorganization, because it's hard
> enough to develop twisted given all the personal and professional
> distractions, but it shouldn't get harder by forcing developers to work
> a certain way.

I'm not goign to opine on possible repository layouts, as there are people
who knwo far better than me how that works. However, if you sort it out so
you can jsut run python with setuptools, you can keep the directory
structure however you like on disc, and then just type "./setup.py develop"
for each project you have checked out to do all the funky namespace and path
mangling that setuptools does, and work with your working copy. I suppose a
utility script that runs the equivalent for the various setup files in the
various subprojects would be useful if you always want to work with the
bleeding edge, but other than that, it's fairly easygoing.

Moof
-- 
Giles Antonio Radford, alias Moof
"Too old to be a chicken and too young to be a dirty old man"
Serving up my ego over at <http://metamoof.net/>



From michele.petrazzo at unipex.it  Thu Oct 13 05:01:57 2005
From: michele.petrazzo at unipex.it (Michele Petrazzo)
Date: Thu, 13 Oct 2005 13:01:57 +0200
Subject: [Twisted-Python] ANN: Nufox 0.1.0
In-Reply-To: <434D1B34.4020300@nunatak.com.au>
References: <434D1B34.4020300@nunatak.com.au>
Message-ID: <434E3EA5.40708@unipex.it>

Timothy Stebbing wrote:
> Nufox is a remote-XUL server framework for building live,
> event-driven, through-the-web GUI applications without writing
> markup, just python.

Wow!

> This is the initial release and represents several months work, much
>  thanks to cablehead, radix, exarkun et al for their advice and 
> contributions.
> 
> url: http://trac.nunatak.com.au/projects/nufox download:
> http://trac.nunatak.com.au/trac/Nufox-0.1.0.tar.gz
> 

I download it, but I have a problem with the example:

[michele at michele examples]$ twistd -f oneShotExample.tac

Failed to load application: could not find MARK

and it stop here.
How can execute that example?

> Timothy <tjs> Stebbing
> 

Thanks,
Michele



From jean-marc.pouchoulon at ac-montpellier.fr  Thu Oct 13 07:06:10 2005
From: jean-marc.pouchoulon at ac-montpellier.fr (jean-marc pouchoulon)
Date: Thu, 13 Oct 2005 15:06:10 +0200
Subject: [Twisted-Python] ANN: Nufox 0.1.0
In-Reply-To: <434E3EA5.40708@unipex.it>
References: <434D1B34.4020300@nunatak.com.au> <434E3EA5.40708@unipex.it>
Message-ID: <434E5BC2.5010702@ac-montpellier.fr>

Bonjour,

On windows I needed  to change all   __file__ by  util.__file__

I needed also to copy examples and doc dir from nufox to  
C:\Python24\Lib\site-packages\twisted\python .
After that twistd -noy  examples.tac works fine.

jmp.



Michele Petrazzo a écrit :

> Timothy Stebbing wrote:
>
>> Nufox is a remote-XUL server framework for building live,
>> event-driven, through-the-web GUI applications without writing
>> markup, just python.
>
>
> Wow!
>
>> This is the initial release and represents several months work, much
>>  thanks to cablehead, radix, exarkun et al for their advice and 
>> contributions.
>>
>> url: http://trac.nunatak.com.au/projects/nufox download:
>> http://trac.nunatak.com.au/trac/Nufox-0.1.0.tar.gz
>>
>
> I download it, but I have a problem with the example:
>
> [michele at michele examples]$ twistd -f oneShotExample.tac
>
> Failed to load application: could not find MARK
>
> and it stop here.
> How can execute that example?
>
>> Timothy <tjs> Stebbing
>>
>
> Thanks,
> Michele
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python






From itamar at itamarst.org  Thu Oct 13 07:45:20 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 13 Oct 2005 09:45:20 -0400
Subject: [Twisted-Python] FTP server with credentials
In-Reply-To: <5E5B32FADDBD6A4AB1033EFE451D58A90240F47D@snoexc04.asiapacific.cpqcorp.net>
References: <5E5B32FADDBD6A4AB1033EFE451D58A90240F47D@snoexc04.asiapacific.cpqcorp.net>
Message-ID: <1129211120.8556.10.camel@localhost.localdomain>

On Thu, 2005-10-13 at 16:01 +1000, Mayne, Peter wrote:

> One thing I've noticed is when I 'BYE' from the FTP client, I don't get
> a '221' line from the Twisted FTP server. With the command line client
> it doesn't matter, but I'm using Python's ftplib, and quit() throws an
> EOFError because it didn't read the closing line.

Sounds like a bug; file it at http://twistedmatrix.com/bugs/, ideally
with a failing unit test.




From michele.petrazzo at unipex.it  Thu Oct 13 08:17:39 2005
From: michele.petrazzo at unipex.it (Michele Petrazzo)
Date: Thu, 13 Oct 2005 16:17:39 +0200
Subject: [Twisted-Python] ANN: Nufox 0.1.0
In-Reply-To: <434E5BC2.5010702@ac-montpellier.fr>
References: <434D1B34.4020300@nunatak.com.au> <434E3EA5.40708@unipex.it>
	<434E5BC2.5010702@ac-montpellier.fr>
Message-ID: <434E6C83.5000705@unipex.it>

jean-marc pouchoulon wrote:
> Bonjour,
> 
> On windows I needed  to change all   __file__ by  util.__file__
> 
> I needed also to copy examples and doc dir from nufox to 
> C:\Python24\Lib\site-packages\twisted\python . After that twistd -noy
> examples.tac works fine.
> 


Ok. On linux I copy the doc and examples dir to
site-package/twisted/python directory (I think that this is a very bad
hack... Why do it? ) And now I receive:

File "oneShotExample.tac", line 6, in ?
example = reflect.namedAny('%s.example' % os.environ['EXAMPLE'])
File "/usr/lib/python2.3/UserDict.py", line 19, in __getitem__
  def __getitem__(self, key): return self.data[key]
KeyError: 'EXAMPLE'
Failed to load application: 'EXAMPLE'

File "/usr/lib/python2.3/UserDict.py", line 19, in __getitem__
  def __getitem__(self, key): return self.data[key]
  exceptions.KeyError: 'EXAMPLE'

This is right because I don't have any EXAMPLE enviroment variable!

P.s. If I execute "twistd -f oneShotExample.tac" I receive the same error.

> jmp.
> 

Thanks a lot,
Michele



From jean-marc.pouchoulon at ac-montpellier.fr  Thu Oct 13 09:35:36 2005
From: jean-marc.pouchoulon at ac-montpellier.fr (jean-marc pouchoulon)
Date: Thu, 13 Oct 2005 17:35:36 +0200
Subject: [Twisted-Python] ANN: Nufox 0.1.0
In-Reply-To: <434E6C83.5000705@unipex.it>
References: <434D1B34.4020300@nunatak.com.au>
	<434E3EA5.40708@unipex.it>	<434E5BC2.5010702@ac-montpellier.fr>
	<434E6C83.5000705@unipex.it>
Message-ID: <434E7EC8.60100@ac-montpellier.fr>

oneShotExample.tac  seems to be outdated
(athena is now included in nufox not nevow )
Maybe post on nufox mailing list to have an answer.
Only example.tac works fine for me.

jean-marc

Michele Petrazzo a écrit :

>
> Ok. On linux I copy the doc and examples dir to
> site-package/twisted/python directory (I think that this is a very bad
> hack... Why do it? ) And now I receive:
>
> File "oneShotExample.tac", line 6, in ?
> example = reflect.namedAny('%s.example' % os.environ['EXAMPLE'])
> File "/usr/lib/python2.3/UserDict.py", line 19, in __getitem__
>  def __getitem__(self, key): return self.data[key]
> KeyError: 'EXAMPLE'
> Failed to load application: 'EXAMPLE'
>
> File "/usr/lib/python2.3/UserDict.py", line 19, in __getitem__
>  def __getitem__(self, key): return self.data[key]
>  exceptions.KeyError: 'EXAMPLE'
>
> This is right because I don't have any EXAMPLE enviroment variable!
>
> P.s. If I execute "twistd -f oneShotExample.tac" I receive the same 
> error.
>
>> jmp.
>>
>
> Thanks a lot,
> Michele
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python






From tjs at nunatak.com.au  Thu Oct 13 18:06:46 2005
From: tjs at nunatak.com.au (Timothy Stebbing)
Date: Fri, 14 Oct 2005 11:06:46 +1100
Subject: [Twisted-Python] ANN: Nufox 0.1.0
In-Reply-To: <434E7EC8.60100@ac-montpellier.fr>
References: <434D1B34.4020300@nunatak.com.au>	<434E3EA5.40708@unipex.it>	<434E5BC2.5010702@ac-montpellier.fr>	<434E6C83.5000705@unipex.it>
	<434E7EC8.60100@ac-montpellier.fr>
Message-ID: <434EF696.4000900@nunatak.com.au>

jean-marc pouchoulon wrote:

> oneShotExample.tac  seems to be outdated
> (athena is now included in nufox not nevow )
> Maybe post on nufox mailing list to have an answer.
> Only example.tac works fine for me.
>
> jean-marc


oneShotExample.tac was a tac that cablehead wrote to do some testing pre 
0.1, the README
suggests using the examples.tac. It seems that I got some poor advice 
about absolute paths in
setup.py, the current setup.py is horrible, I'll be fixing it tonight 
and doing a 0.1.1 bugfix release,
for now perhaps just run it from where you unpack the tarball, relative 
paths work fine.

-tjs



From peter.mayne at hp.com  Thu Oct 13 20:33:46 2005
From: peter.mayne at hp.com (Mayne, Peter)
Date: Fri, 14 Oct 2005 12:33:46 +1000
Subject: [Twisted-Python] FTP server with credentials
Message-ID: <5E5B32FADDBD6A4AB1033EFE451D58A90240F7E0@snoexc04.asiapacific.cpqcorp.net>

> [mailto:twisted-python-bounces at twistedmatrix.com] On Behalf 
> Of Itamar Shtull-Trauring
> 
> Sounds like a bug; file it at http://twistedmatrix.com/bugs/, ideally
> with a failing unit test.

Done, issue 1275. (Curious; the message processor seems to remove spaces
from in front of digits.)

A (possibly final) question about my FTP server: I want to be able to
indicate to the client that a file upload failed. I can do this by
raising an exception from  unregisterProducer() in my FileConsumer
class, which causes the client to see "426 Transfer aborted." instead of
"226 Transfer Complete.", so the purpose is served. However, this seems
a bit too sledgehammer-like.

Is there a preferred way of passing a file transfer failure back to the
client? Overriding FTP.ftp_STOR() seems like a step in the right
direction, but the path between that and my own FileConsumer is not
entirely obvious to me. :-)

Thanks.

PJDM
-- 
Peter Mayne
Technology Consultant
Hewlett-Packard Australia
7-11 Barry Drive, Turner, ACT, 2612
 




From warner at lothar.com  Fri Oct 14 01:27:00 2005
From: warner at lothar.com (Brian Warner)
Date: Fri, 14 Oct 2005 00:27:00 -0700 (PDT)
Subject: [Twisted-Python] correct way to disconnect a pb connection?
Message-ID: <20051014.002700.55863921.warner@lothar.com>

FYI, in newpb, you obtain all RemoteReferences through a 'Tub' (actually the
class is PBService), and because the Tub is really a
twisted.application.service.MultiService, you can shut it down (and
disconnect any open connections) by just doing .stopService(). oldpb's
clientfactory and serverfactory are a thing of the past.

I got a huge connection-negotiation patch checked in a few days ago.. I think
I'll be able to merge my development branch (currently in
svn://svn.twistedmatrix.com/svn/Twisted/branches/warner/newpb) onto the trunk
in a week or so.

cheers,
 -Brian



From jml at mumak.net  Mon Oct 17 20:22:21 2005
From: jml at mumak.net (Jonathan Lange)
Date: Tue, 18 Oct 2005 13:22:21 +1100
Subject: [Twisted-Python] Re: [Twisted-commits] r14857 -
In-Reply-To: <E1ERTyI-0001mK-00@wolfwood>
References: <E1ERTyI-0001mK-00@wolfwood>
Message-ID: <d06a5cd30510171922se497f18y@mail.gmail.com>

On 17/10/05, Glyph Lefkowitz <glyph at wolfwood.twistedmatrix.com> wrote:
> Author: glyph
> Date: Mon Oct 17 06:20:04 2005
> New Revision: 14857
>
> Modified:
>    trunk/LICENSE
> Log:
>
> Update year to 2005; also remove kind of silly "exceptions" list, when we
> already have a big list of copyright holders.
>

Does this exclude individual files having copyright notices?



From mary-twisted at puzzling.org  Mon Oct 17 21:01:14 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Tue, 18 Oct 2005 13:01:14 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] r14857 -
In-Reply-To: <d06a5cd30510171922se497f18y@mail.gmail.com>
References: <E1ERTyI-0001mK-00@wolfwood>
	<d06a5cd30510171922se497f18y@mail.gmail.com>
Message-ID: <20051018030114.GA7635@home.puzzling.org>

On Tue, Oct 18, 2005, Jonathan Lange wrote:
> On 17/10/05, Glyph Lefkowitz <glyph at wolfwood.twistedmatrix.com> wrote:
> > Author: glyph
> > Date: Mon Oct 17 06:20:04 2005
> > New Revision: 14857
> >
> > Modified:
> >    trunk/LICENSE
> > Log:
> >
> > Update year to 2005; also remove kind of silly "exceptions" list, when we
> > already have a big list of copyright holders.
> >
> 
> Does this exclude individual files having copyright notices?

Seemingly not: http://twistedmatrix.com/bugs/issue1262

-Mary

-- 
<radix> bah screw it
* radix fakes it
<glyph> radix: hooray for faking



From foom at fuhm.net  Mon Oct 17 22:04:06 2005
From: foom at fuhm.net (James Y Knight)
Date: Tue, 18 Oct 2005 00:04:06 -0400
Subject: [Twisted-Python] Subproject releases
In-Reply-To: <434DC691.3060709@divmod.com>
References: <446737B7-AA24-47AB-B64F-96C1D6D424B7@fuhm.net>	<20051012054938.3914.543518999.divmod.quotient.27213@ohm>
	<60ed19d40510120202m129fb1fci8aab71a9ecb1b28e@mail.gmail.com>
	<434DC691.3060709@divmod.com>
Message-ID: <03D1CE2D-EF00-4A2D-891B-B045EF735319@fuhm.net>

On Oct 12, 2005, at 10:29 PM, Glyph Lefkowitz wrote:
> Hmm.  Trial interaction is something I haven't messed with yet; I
> haven't put trial directory below a __path__ entry.
>
> Arguably this is simply a bug in Trial that should be fixed, though.
>

The main problem here is that trial's "recursively find all test  
modules for me" mode is based upon a recursive walk of the filesystem  
below a certain path. Currently, "trial twisted" does the following:
1) import the module named ("twisted")
2) os.path.walk over all files under the directory of that module's  
__file__ ("twisted/")
3) filter out (a) any directory which doesn't contain an __init__.*,  
and (b) any files that don't match test_*.py.
4) backwards convert the path of the matched files to a module name  
with some poor heuristics (reflect.filenameToModuleName).
5) try to import said module.

This completely breaks down in the case where packages use __path__.  
The new hierarchy has the following:
Root/
Root/twisted/
Root/twisted/__init__.py (has __path__="core/twisted/","web2/twisted/")
core/
core/twisted/
core/twisted/__init__.py
core/twisted/test/
core/twisted/test/__init__.py
core/twisted/test/test_tcp.py
web2/
web2/twisted/
web2/twisted/web2/
web2/twisted/web2/__init__.py
web2/twisted/web2/test/
web2/twisted/web2/test/__init__.py
web2/twisted/web2/test/test_http.py

So, given that layout, currently, "trial twisted" would get  
twisted.__file__ == "Root/twisted/__init__.py", take the dirname,  
"Root/twisted/", and walk that hierarchy looking for tests (and there  
aren't any there. Oops). Okay, let's specify the directory explicitly  
-- I'll say "trial web2/twisted/web2/test/". Now, that doesn't work  
right either, because it's impossible to backwards convert an  
arbitrary filename to the python module name it's expecting to be  
imported under. filenameToModuleName in this case would return  
"web2.test.test_http", which is wrong.

So, my solution:
I changed the recursive process to actually import every package (not  
every module!), so it can use the package's __path__ attribute to  
find submodules. This works, mostly.

One issue is that it causes trial to emit an import error message  
from trying to import twisted.internet.iocpreactor and  
twisted.internet.serialport (because they aren't importable on my  
system). This is necessary -- trial does not know they don't have a  
__path__ attribute before importing them, so it has no way of telling  
that they don't have test modules hidden inside. It would similarly  
be a bad idea to simply ignore all import errors of packages, as then  
real errors may be silenced. This could be simply solvable via a  
special attribute like "no_tests_in_packages= ['iocpreactor',  
'serialport']" to twisted/internet/__init__ so trial knows not to  
bother trying to import those.

The other issue is that test files expecting to be imported as  
modules _still_ won't work if specified by filename. But, I think  
that's just a fact of life -- it is not possible in general to do the  
correct back conversion. AFAICT we will just have to accept this  
slight functionality loss and recommend that everybody specify module  
names rather than file names (at least for running twisted's tests --  
it's only broken when filenameToModuleName is wrong). Also, Trial  
*does* run the file specified even if it can't figure out how to  
import it, so if the test code doesn't actually depend on having its  
real module name (e.g. it doesn't use things like relative imports or  
__name__), it will also still work.

James



From sc at linux.it  Tue Oct 18 07:06:25 2005
From: sc at linux.it (Stefano Canepa)
Date: Tue, 18 Oct 2005 15:06:25 +0200
Subject: [Twisted-Python] exceptions.AttributeError: 'NoneType' object has
	no attribute 'write'
Message-ID: <1129640785.11441.31.camel@localhost.localdomain>

Hi all,
	I have this error running the simple module I wrote after the error.

$ ./TCAdrvC.py
sending to TCA: MSH|^~\&|XLIS|CLILAB|CLC^1|TCA|20010101080811||OML^O21|
200101010OBR|1|123456^XLIS||0001^Aliquot^XLIS||||||||DC1|||SER|3||
pippo:
MSH|^~\&|XLIS|CLILAB|CLC^1|TCA|20010101080811||OML^O21|20010101080811|
P|2.4|||NOBR|1|123456^XLIS||0001^Aliquot^XLIS||||||||DC1|||SER|3||
None
Peer will receive following PB traceback:
Traceback (most recent call last):
  File "/usr/lib/python2.3/site-packages/twisted/spread/banana.py", line
114, in gotItem
    self.callExpressionReceived(item)
  File "/usr/lib/python2.3/site-packages/twisted/spread/banana.py", line
81, in callExpressionReceived
    self.expressionReceived(obj)
  File "/usr/lib/python2.3/site-packages/twisted/spread/pb.py", line
561, in expressionReceived
    method(*sexp[1:])
  File "/usr/lib/python2.3/site-packages/twisted/spread/pb.py", line
872, in proto_message
    self._recvMessage(self.localObjectForID, requestID, objectID,
message, answerRequired, netArgs, netKw)
--- <exception caught here> ---
  File "/usr/lib/python2.3/site-packages/twisted/spread/pb.py", line
886, in _recvMessage
    netResult = object.remoteMessageReceived(self, message, netArgs,
netKw)
  File "/usr/lib/python2.3/site-packages/twisted/spread/flavors.py",
line 113, in remoteMessageReceived
    state = method(*args, **kw)
  File "./TCAdrvC.py", line 102, in remote_sendToTCA
    d.addCallback(self.sendMsg(msg,RETRIES))
  File "/home/sc/Sviluppo/CCIC/HL7/HL7LLPSpecialClient.py", line 122, in
sendMsg    self.sendLine(msgToSend)
  File "/usr/lib/python2.3/site-packages/twisted/protocols/basic.py",
line 269, in sendLine
    return self.transport.write(line + self.delimiter)
exceptions.AttributeError: 'NoneType' object has no attribute 'write'

class Receiver(pb.Root, HL7LLPClientProtocol):

    def __init__(self):
         HL7LLPClientProtocol.__init__(self)
        
    def remote_sendToTCA(self, msg):

        self.delimiter = "\x02"
        
        ## if DEBUG:
        print 'sending to TCA:', msg
        # Create creator and connect
        clientCreator = protocol.ClientCreator(reactor,  
                        HL7LLPClientProtocol)
        d = clientCreator.connectTCP(SERVER, PORT)
        d.addCallback(self.sendMsg(msg,RETRIES))
        return msg

def main():
    reactor.listenTCP(LISTENPORT, pb.PBServerFactory(Receiver()))
    reactor.run()

---------

the module HL7LLPClientProtocol is:

class HL7LLPClientProtocol(LineReceiver):
    delimiter = "\x02"

    def sendMsg(self, msg, numRetries=RETRIES):
        self.msg = msg
        msgToSend = "\x01"+msg +"\x0d"
        self.sendLine(msgToSend)
        return self.timeoutAndRetry(numRetries)
...

Which is my mistake?

Bye
Stefano

-- 
Stefano Canepa aka sc: sc at linux.it  http://www.stefanocanepa.it
Three great virtues of a programmer: laziness, impatience and hubris.
Le tre grandi virtù di un programmatore: pigrizia, impazienza e
arroganza. (Larry Wall)
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20051018/d561d1cc/attachment.sig>

From Henning.Ramm at mediapro-gmbh.de  Tue Oct 18 07:25:33 2005
From: Henning.Ramm at mediapro-gmbh.de (Henning.Ramm at mediapro-gmbh.de)
Date: Tue, 18 Oct 2005 15:25:33 +0200
Subject: [Twisted-Python] Win32 installers of Twisted 2.1?
Message-ID: <F92274058556DE42B94B148EEFB91839021CB5BF@exchange-03.suedkurier.de>

Dear twisted wizards,

would it be possible to also release Win32 exe installers for Twisted 2.1?
I'd prefer to always use the same way of installing things, if possible.
But if you won't release any Windows binaries any more, please state that on the website.

Best regards,
Henning Hraban Ramm
Südkurier Medienhaus / MediaPro
Support/Admin/Development Dept.



From digi at treepy.com  Tue Oct 18 07:31:01 2005
From: digi at treepy.com (Patrick Lauber)
Date: Tue, 18 Oct 2005 15:31:01 +0200
Subject: [Twisted-Python] Stability of the IOCP Reactor
In-Reply-To: <1129640785.11441.31.camel@localhost.localdomain>
References: <1129640785.11441.31.camel@localhost.localdomain>
Message-ID: <4354F915.9070403@treepy.com>

Hi,

I am running a server with the IOCP reactor because I need a lot of 
concurent connections. If i use the default reactor the program is 
running for weeks withouth any problems. When i switched to IOCP the 
program seams not to accept any new connections after some hours or a
day, the old seam to hold. I am not sure if the socket is closed or if 
the new connection don't spawn a new protocol instance anymore...

any idea of what this could be?

cheers

pat





From johann.borck at densedata.com  Tue Oct 18 09:42:43 2005
From: johann.borck at densedata.com (Johann Borck)
Date: Tue, 18 Oct 2005 17:42:43 +0200
Subject: [Twisted-Python] exceptions.AttributeError: 'NoneType' object
	has no attribute 'write'
In-Reply-To: <1129640785.11441.31.camel@localhost.localdomain>
References: <1129640785.11441.31.camel@localhost.localdomain>
Message-ID: <435517F3.3040402@densedata.com>

Stefano Canepa wrote:

>
>class Receiver(pb.Root, HL7LLPClientProtocol):
>
>  
>
first of all, i think your pb.Root shouldn't be your protocol, you get
this error because you assume that your Receiver instance is the
protocol. PB uses it's own protocol, there is no use in deriving your
Receiver from your protocol,  I even think it's not possible at all to
implement it that way, and even if it worked it'd be confusing

def __init__(self):
    HL7LLPClientProtocol.__init__(self)

btw: AttributeError: class HL7LLPClientProtocol has no attribute
'__init__'      is what i get, if i don't comment out the above line -
there is no __init__ in that class and in LineReceiver and it's bases
(at least not in my version of twisted, but if you don't get this error,
there must be one somewhere)

>        
>    def remote_sendToTCA(self, msg):
>
>        self.delimiter = "\x02"
>        
>        ## if DEBUG:
>        print 'sending to TCA:', msg
>        # Create creator and connect
>        clientCreator = protocol.ClientCreator(reactor,  
>                        HL7LLPClientProtocol)
>  
>
Here you give the HL7LLPClientProtocol to the client creator, NOT your
Receiver - so you can't call self.sendMsg on your Receiver-instance
(which is good)

>        d = clientCreator.connectTCP(SERVER, PORT)
>  
>
this deferred returns a _new_ instance of the HL7LLPClientProtocol
protocol-class, and _that_ instance has an initialized transport, not
your Receiver-instance, where you call self.sendMsg on.  Further you
don't use addCallback like you do it, you have to use it like:
addCallback(self.method, arg1, arg2, ... ), addCallback wants the
_method_ not it's result.   you have to write a method that gets the
instance of your Protocol from the deferred, and call sendMsg on that,
something like:

...

    clientCreator = protocol.ClientCreator(reactor, HL7LLPClientProtocol)
    d = clientCreator.connectTCP(SERVER, PORT)
    d.addCallback(self.getProto,msg,RETRIES)
    return msg

  def getProto(self,proto,msg,retries):
	proto.sendMsg(msg,retries)


moreover your Protocol should implement lineReceived - that is the next
error i got, running this. Maybe you read the twisted docs about
deferreds and PB.  :)

i hope this helps



From corydodt at twistedmatrix.com  Tue Oct 18 09:48:13 2005
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Tue, 18 Oct 2005 08:48:13 -0700
Subject: [Twisted-Python] Win32 installers of Twisted 2.1?
In-Reply-To: <F92274058556DE42B94B148EEFB91839021CB5BF@exchange-03.suedkurier.de>
References: <F92274058556DE42B94B148EEFB91839021CB5BF@exchange-03.suedkurier.de>
Message-ID: <4355193D.2050502@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Win32 requires a "sumo" package to be built.  Because I don't have the tools
to build one, I'm waiting for that to happen.  As soon as it does there will
be a win32 installer.

(This is how it usually goes.  Just be patient.  Thanks!)

There is no plan to change the policy of always having a windows installer.

C


Henning.Ramm at mediapro-gmbh.de wrote:
> Dear twisted wizards,
> 
> would it be possible to also release Win32 exe installers for Twisted 2.1?
> I'd prefer to always use the same way of installing things, if possible.
> But if you won't release any Windows binaries any more, please state that on the website.
> 
> Best regards,
> Henning Hraban Ramm
> Südkurier Medienhaus / MediaPro
> Support/Admin/Development Dept.
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (MingW32)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFDVRk93A5SrXAiHQcRAv/5AJwP5Uis5DqhEBEXzvOUe0GNvUGGzQCdHnFp
QC0autsIA6qdB9Ev0FTN7+8=
=YDq8
-----END PGP SIGNATURE-----



From sc at linux.it  Tue Oct 18 10:12:46 2005
From: sc at linux.it (Stefano Canepa)
Date: Tue, 18 Oct 2005 18:12:46 +0200
Subject: [Twisted-Python] exceptions.AttributeError: 'NoneType' object
	has no attribute 'write'
In-Reply-To: <435517F3.3040402@densedata.com>
References: <1129640785.11441.31.camel@localhost.localdomain>
	<435517F3.3040402@densedata.com>
Message-ID: <1129651966.11441.38.camel@localhost.localdomain>

Il giorno mar, 18/10/2005 alle 17.42 +0200, Johann Borck ha scritto:
> Stefano Canepa wrote:
> 
> >
> >class Receiver(pb.Root, HL7LLPClientProtocol):
> >
> >  
> >
> first of all, i think your pb.Root shouldn't be your protocol, you get
> this error because you assume that your Receiver instance is the
> protocol. PB uses it's own protocol, there is no use in deriving your
> Receiver from your protocol,  I even think it's not possible at all to
> implement it that way, and even if it worked it'd be confusing
> 
> def __init__(self):
>     HL7LLPClientProtocol.__init__(self)
> 
> btw: AttributeError: class HL7LLPClientProtocol has no attribute
> '__init__'      is what i get, if i don't comment out the above line -
> there is no __init__ in that class and in LineReceiver and it's bases
> (at least not in my version of twisted, but if you don't get this error,
> there must be one somewhere)

Sorry, I did an error pasting

> >        
> >    def remote_sendToTCA(self, msg):
> >
> >        self.delimiter = "\x02"
> >        
> >        ## if DEBUG:
> >        print 'sending to TCA:', msg
> >        # Create creator and connect
> >        clientCreator = protocol.ClientCreator(reactor,  
> >                        HL7LLPClientProtocol)
> >  
> >
> Here you give the HL7LLPClientProtocol to the client creator, NOT your
> Receiver - so you can't call self.sendMsg on your Receiver-instance
> (which is good)
> 
> >        d = clientCreator.connectTCP(SERVER, PORT)
> >  
> >
> this deferred returns a _new_ instance of the HL7LLPClientProtocol
> protocol-class, and _that_ instance has an initialized transport, not
> your Receiver-instance, where you call self.sendMsg on.  Further you
> don't use addCallback like you do it, you have to use it like:
> addCallback(self.method, arg1, arg2, ... ), addCallback wants the
> _method_ not it's result.   you have to write a method that gets the
> instance of your Protocol from the deferred, and call sendMsg on that,
> something like:
> 
> ...
> 
>     clientCreator = protocol.ClientCreator(reactor, HL7LLPClientProtocol)
>     d = clientCreator.connectTCP(SERVER, PORT)
>     d.addCallback(self.getProto,msg,RETRIES)
>     return msg
> 
>   def getProto(self,proto,msg,retries):
> 	proto.sendMsg(msg,retries)
> 

Thanks I arrived a the point with the help of Jp on IRC and reading docs
once again.

> moreover your Protocol should implement lineReceived - that is the next
> error i got, running this. Maybe you read the twisted docs about
> deferreds and PB.  :)
> 
> i hope this helps

It helped.

Thanks
Stefano

-- 
Stefano Canepa aka sc: sc at linux.it  http://www.stefanocanepa.it
Three great virtues of a programmer: laziness, impatience and hubris.
Le tre grandi virtù di un programmatore: pigrizia, impazienza e
arroganza. (Larry Wall)
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20051018/3c830169/attachment.sig>

From Henning.Ramm at mediapro-gmbh.de  Tue Oct 18 10:25:20 2005
From: Henning.Ramm at mediapro-gmbh.de (Henning.Ramm at mediapro-gmbh.de)
Date: Tue, 18 Oct 2005 18:25:20 +0200
Subject: [Twisted-Python] Win32 installers of Twisted 2.1?
Message-ID: <F92274058556DE42B94B148EEFB91839021CB5C2@exchange-03.suedkurier.de>

>Win32 requires a "sumo" package to be built.  Because I don't 
>have the tools
>to build one, I'm waiting for that to happen.  As soon as it 
>does there will
>be a win32 installer.
>
>(This is how it usually goes.  Just be patient.  Thanks!)
>
>There is no plan to change the policy of always having a 
>windows installer.

Ok, thanks for info.

Best regards,
Henning Hraban Ramm
Südkurier Medienhaus / MediaPro
Support/Admin/Development Dept.



From glyph at divmod.com  Tue Oct 18 17:53:00 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Tue, 18 Oct 2005 19:53:00 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r14857 -
In-Reply-To: <d06a5cd30510171922se497f18y@mail.gmail.com>
References: <E1ERTyI-0001mK-00@wolfwood>
	<d06a5cd30510171922se497f18y@mail.gmail.com>
Message-ID: <1129679580.31353.0.camel@localhost.localdomain>

On Tue, 2005-10-18 at 13:22 +1100, Jonathan Lange wrote:

> Does this exclude individual files having copyright notices?

That change had nothing to do with individual files.

I suppose LICENSE should say something about exceptions in individual
files, since there are a few of those?





From glyph at divmod.com  Tue Oct 18 18:03:25 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Tue, 18 Oct 2005 20:03:25 -0400
Subject: [Twisted-Python] Subproject releases
In-Reply-To: <03D1CE2D-EF00-4A2D-891B-B045EF735319@fuhm.net>
References: <446737B7-AA24-47AB-B64F-96C1D6D424B7@fuhm.net>
	<20051012054938.3914.543518999.divmod.quotient.27213@ohm>
	<60ed19d40510120202m129fb1fci8aab71a9ecb1b28e@mail.gmail.com>
	<434DC691.3060709@divmod.com>
	<03D1CE2D-EF00-4A2D-891B-B045EF735319@fuhm.net>
Message-ID: <1129680205.31353.10.camel@localhost.localdomain>

On Tue, 2005-10-18 at 00:04 -0400, James Y Knight wrote:
> On Oct 12, 2005, at 10:29 PM, Glyph Lefkowitz wrote:
> > Hmm.  Trial interaction is something I haven't messed with yet; I
> > haven't put trial directory below a __path__ entry.
> >
> > Arguably this is simply a bug in Trial that should be fixed, though.

[snip explanation]

> So, my solution:
> I changed the recursive process to actually import every package (not  
> every module!), so it can use the package's __path__ attribute to  
> find submodules. This works, mostly.

Well, thanks for fixing that bug :).  Is there any issue for this
somewhere already, before I file one?

> One issue is that it causes trial to emit an import error message  
> from trying to import twisted.internet.iocpreactor and  
> twisted.internet.serialport (because they aren't importable on my  
> system). This is necessary -- trial does not know they don't have a  
> __path__ attribute before importing them, so it has no way of telling  
> that they don't have test modules hidden inside. It would similarly  
> be a bad idea to simply ignore all import errors of packages, as then  
> real errors may be silenced. This could be simply solvable via a  
> special attribute like "no_tests_in_packages= ['iocpreactor',  
> 'serialport']" to twisted/internet/__init__ so trial knows not to  
> bother trying to import those.

That sounds like a good solution to an unfortunate problem.  I notice
that the practice used in iocp and serialport is standardized in the
coding standard (and I probably put it there); is there *any* better way
to do module-level promotions?  Really the way things like that should
work should be a __getattr__ on the module or something, so that you
don't do unnecessary imports.

> The other issue is that test files expecting to be imported as  
> modules _still_ won't work if specified by filename. But, I think  
> that's just a fact of life -- it is not possible in general to do the  
> correct back conversion. AFAICT we will just have to accept this  
> slight functionality loss and recommend that everybody specify module  
> names rather than file names (at least for running twisted's tests --  
> it's only broken when filenameToModuleName is wrong). Also, Trial  
> *does* run the file specified even if it can't figure out how to  
> import it, so if the test code doesn't actually depend on having its  
> real module name (e.g. it doesn't use things like relative imports or  
> __name__), it will also still work.

While we're at this, should we also be talking about running unit tests
which are packaged within zipfiles?  It seems like some of the same
problems might be addressed, as long as we are suggesting that
specifying filenames for tests is not a good idea.

I'm more interested in testing the actual code packaged in zipfiles than
running the tests from there, but it seems like having the whole package
zipped up would be an interesting meta-test case.





From jml at mumak.net  Tue Oct 18 18:13:52 2005
From: jml at mumak.net (Jonathan Lange)
Date: Wed, 19 Oct 2005 11:13:52 +1100
Subject: [Twisted-Python] Subproject releases
In-Reply-To: <1129680205.31353.10.camel@localhost.localdomain>
References: <446737B7-AA24-47AB-B64F-96C1D6D424B7@fuhm.net>
	<20051012054938.3914.543518999.divmod.quotient.27213@ohm>
	<60ed19d40510120202m129fb1fci8aab71a9ecb1b28e@mail.gmail.com>
	<434DC691.3060709@divmod.com>
	<03D1CE2D-EF00-4A2D-891B-B045EF735319@fuhm.net>
	<1129680205.31353.10.camel@localhost.localdomain>
Message-ID: <d06a5cd30510181713j7a594790v@mail.gmail.com>

On 19/10/05, Glyph Lefkowitz <glyph at divmod.com> wrote:
> On Tue, 2005-10-18 at 00:04 -0400, James Y Knight wrote:
> > On Oct 12, 2005, at 10:29 PM, Glyph Lefkowitz wrote:
> > So, my solution:
> > I changed the recursive process to actually import every package (not
> > every module!), so it can use the package's __path__ attribute to
> > find submodules. This works, mostly.
>
> Well, thanks for fixing that bug :).  Is there any issue for this
> somewhere already, before I file one?
>

http://twistedmatrix.com/bugs/issue1276

As discussed on #twisted, this needs several more unit tests before it
goes into trunk.


> While we're at this, should we also be talking about running unit tests
> which are packaged within zipfiles?  It seems like some of the same
> problems might be addressed, as long as we are suggesting that
> specifying filenames for tests is not a good idea.
>

There isn't a bug for this.  If it's something you actually want done
then please file it and assign it to me.

cheers,
jml



From jml at mumak.net  Tue Oct 18 18:23:46 2005
From: jml at mumak.net (Jonathan Lange)
Date: Wed, 19 Oct 2005 11:23:46 +1100
Subject: [Twisted-Python] Subproject releases
In-Reply-To: <03D1CE2D-EF00-4A2D-891B-B045EF735319@fuhm.net>
References: <446737B7-AA24-47AB-B64F-96C1D6D424B7@fuhm.net>
	<20051012054938.3914.543518999.divmod.quotient.27213@ohm>
	<60ed19d40510120202m129fb1fci8aab71a9ecb1b28e@mail.gmail.com>
	<434DC691.3060709@divmod.com>
	<03D1CE2D-EF00-4A2D-891B-B045EF735319@fuhm.net>
Message-ID: <d06a5cd30510181723l16eb294fl@mail.gmail.com>

On 18/10/05, James Y Knight <foom at fuhm.net> wrote:
> On Oct 12, 2005, at 10:29 PM, Glyph Lefkowitz wrote:
> > Hmm.  Trial interaction is something I haven't messed with yet; I
> > haven't put trial directory below a __path__ entry.
> >
> > Arguably this is simply a bug in Trial that should be fixed, though.
> >
>
> The other issue is that test files expecting to be imported as
> modules _still_ won't work if specified by filename. But, I think
> that's just a fact of life -- it is not possible in general to do the
> correct back conversion. AFAICT we will just have to accept this
> slight functionality loss and recommend that everybody specify module
> names rather than file names (at least for running twisted's tests --
> it's only broken when filenameToModuleName is wrong). Also, Trial
> *does* run the file specified even if it can't figure out how to
> import it, so if the test code doesn't actually depend on having its
> real module name (e.g. it doesn't use things like relative imports or
> __name__), it will also still work.
>

Are you recommending that we remove filename support from the Trial
command line?  Or just that we leave the filename support in a
slightly-broken state, and spit out some warnings?

If we remove filename support entirely, then there are consequences
for the buildbot quick build: there will be no easy way to test
changed files.  Buildbot passes filenames of changed files to Trial
via the (poorly named) --testmodule option. Sometimes these files are
actual test modules, which need to be imported and ran.  If we remove
filename support, we break this buildbot feature.

This is a big chunk of feature.  I'm very keen to hear what other
people think about it.

cheers,
jml



From foom at fuhm.net  Wed Oct 19 00:00:14 2005
From: foom at fuhm.net (James Y Knight)
Date: Wed, 19 Oct 2005 00:00:14 -0600
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <E1ES6zm-000568-00@pyramid.twistedmatrix.com>

Bug summary
______________________
Since 2005-10-12 06:00:02.490000:
 Bugs opened: 6   Bugs closed: 3   Total open bugs: 478 (+3)
  Urgent: 3 (-2)
  Bug: 233 (+4)
  Feature: 164 (+0)
  Wish: 78 (+1)

New / Reopened Bugs
______________________
                    ==== Bug ====
[BACKPORT, CORE] [PATCH] FTP server does not send 221 message when closing  (5 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1275 opened by pjdm

iocpreactor calls makeConnection without connection  (4 days ago)
       http://twistedmatrix.com/bugs/issue1277 opened by ghazel

[TRIAL] loadPackage (recurse or otherwise) should respect __path__  (5 days ago)
       http://twistedmatrix.com/bugs/issue1276 opened by jml

win32reactor spawnProcess incorrectly escapes cmd line  (2 months ago)
       http://twistedmatrix.com/bugs/issue1123 opened by justinj

socket.error: (53, 'Software caused connection abort')  (6 days ago)
       http://twistedmatrix.com/bugs/issue1274 opened by ghazel

                    ==== Wish ====
utf-8 plus different charset encodings  (4 days ago)
       http://twistedmatrix.com/bugs/issue1278 opened by tofu

Bugs Closed
______________________
                    ==== Urgent ====
[CORE, TRIAL] trial excludes explicitly specified test modules  (1 week ago)
       http://twistedmatrix.com/bugs/issue1266 opened by exarkun, closed by jml

                    ==== Bug ====
[BACKPORT, CORE] [PATCH] FTP server does not send 221 message when closing  (5 days ago)
       http://twistedmatrix.com/bugs/issue1275 opened by pjdm, closed by exarkun

[XISH] twisted.xish.xmlstream parse error  (4 months ago)
       http://twistedmatrix.com/bugs/issue1078 opened by tofu, closed by ralphm




From gmcdonald at infocomp.com  Wed Oct 19 00:33:59 2005
From: gmcdonald at infocomp.com (Grant McDonald)
Date: Wed, 19 Oct 2005 16:33:59 +1000
Subject: [Twisted-Python] Win32 installers of Twisted 2.1?
Message-ID: <61DA7719C45FD31185280008C733EF6E04AC4FEA@XCHANGE>

> Win32 requires a "sumo" package to be built.

Can someone adequately explain what a sumo package is in relation to the
normal twisted package? I've seen them for download but never paired with an
explanation :)

Thanks,

Grant
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20051019/851297e3/attachment.html>

From radeex at gmail.com  Wed Oct 19 01:52:59 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Wed, 19 Oct 2005 18:52:59 +1100
Subject: [Twisted-Python] Win32 installers of Twisted 2.1?
In-Reply-To: <61DA7719C45FD31185280008C733EF6E04AC4FEA@XCHANGE>
References: <61DA7719C45FD31185280008C733EF6E04AC4FEA@XCHANGE>
Message-ID: <60ed19d40510190052q4873f5fq50ed2ef3e200cb48@mail.gmail.com>

On 10/19/05, Grant McDonald <gmcdonald at infocomp.com> wrote:
>
>
> > Win32 requires a "sumo" package to be built.
>
> Can someone adequately explain what a sumo package is in relation to the
> normal twisted package? I've seen them for download but never paired with an
> explanation :)

It's a package containing Twisted and all subprojects. There is a good
explanation here:

http://twistedmatrix.com/projects/core/documentation/upgrades/2.0/split.html

--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+



From justinjohnson at gmail.com  Wed Oct 19 09:59:44 2005
From: justinjohnson at gmail.com (Justin Johnson)
Date: Wed, 19 Oct 2005 10:59:44 -0500
Subject: [Twisted-Python] Need reviewer for IOCP spawnProcess patch
Message-ID: <94a776e70510190859g261aaf09v4402e730f7d3f894@mail.gmail.com>

I have a patch adding spawnProcess to the IOCP reactor (
http://twistedmatrix.com/bugs/issue1008) applied to my own branch
(/branches/justinj). I need one of the core developers to review the patch
and make a note in the issue if you approve of the patch, or noting changes
you'd like to see.
 So far I have had a difficult time finding anyone to review the patch. Will
someone please volunteer who can look at it soon?
 Thanks,
Justin
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20051019/a769d899/attachment.html>

From justinjohnson at gmail.com  Wed Oct 19 10:05:07 2005
From: justinjohnson at gmail.com (Justin Johnson)
Date: Wed, 19 Oct 2005 11:05:07 -0500
Subject: [Twisted-Python] Stability of the IOCP Reactor
In-Reply-To: <4354F915.9070403@treepy.com>
References: <1129640785.11441.31.camel@localhost.localdomain>
	<4354F915.9070403@treepy.com>
Message-ID: <94a776e70510190905v4eb8294ge6b5020ea5d5ffff@mail.gmail.com>

I won't be able to look at it for a while, but will you submit a bug
recording the details of this problem and assign it to me (justinj)?
 http://twistedmatrix.com/bugs

 On 10/18/05, Patrick Lauber <digi at treepy.com> wrote:
>
> Hi,
>
> I am running a server with the IOCP reactor because I need a lot of
> concurent connections. If i use the default reactor the program is
> running for weeks withouth any problems. When i switched to IOCP the
> program seams not to accept any new connections after some hours or a
> day, the old seam to hold. I am not sure if the socket is closed or if
> the new connection don't spawn a new protocol instance anymore...
>
> any idea of what this could be?
>
> cheers
>
> pat
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20051019/edf693f6/attachment.html>

From foom at fuhm.net  Wed Oct 19 10:10:42 2005
From: foom at fuhm.net (James Y Knight)
Date: Wed, 19 Oct 2005 12:10:42 -0400
Subject: [Twisted-Python] Subproject releases
In-Reply-To: <d06a5cd30510181723l16eb294fl@mail.gmail.com>
References: <446737B7-AA24-47AB-B64F-96C1D6D424B7@fuhm.net>
	<20051012054938.3914.543518999.divmod.quotient.27213@ohm>
	<60ed19d40510120202m129fb1fci8aab71a9ecb1b28e@mail.gmail.com>
	<434DC691.3060709@divmod.com>
	<03D1CE2D-EF00-4A2D-891B-B045EF735319@fuhm.net>
	<d06a5cd30510181723l16eb294fl@mail.gmail.com>
Message-ID: <39A35A43-620A-427D-AEEE-A7A00026AA93@fuhm.net>


On Oct 18, 2005, at 8:23 PM, Jonathan Lange wrote:

> Are you recommending that we remove filename support from the Trial
> command line?  Or just that we leave the filename support in a
> slightly-broken state, and spit out some warnings?

I was recommending leaving it alone in slightly-broken state.

> If we remove filename support entirely, then there are consequences
> for the buildbot quick build: there will be no easy way to test
> changed files.  Buildbot passes filenames of changed files to Trial
> via the (poorly named) --testmodule option. Sometimes these files are
> actual test modules, which need to be imported and ran.  If we remove
> filename support, we break this buildbot feature.

This also still be broken even if we keep semi-broken filename  
support, unless we also ensure that all of twisted's tests can be run  
without being imported under their proper module name. Sigh.

A possibly better alternative is to write a bit of Twisted-specific  
code for the buildbot quickbuilder to do the backwards translation  
from filename->modulename. That is not very hard (delete "$project/"  
prefix, '.py' suffix, replace '/' with '.'), but it is twisted-repo- 
layout-specific, so it can't really be reasonably done in trial itself.

On Oct 18, 2005, at 8:03 PM, Glyph Lefkowitz wrote:
> While we're at this, should we also be talking about running unit  
> tests
> which are packaged within zipfiles?  It seems like some of the same
> problems might be addressed, as long as we are suggesting that
> specifying filenames for tests is not a good idea.
>
> I'm more interested in testing the actual code packaged in zipfiles  
> than
> running the tests from there, but it seems like having the whole  
> package
> zipped up would be an interesting meta-test case.

Yes, I was thinking about that as well, and it looks like we should  
be able to modify the new recursive code to work inside a zipfile  
(and other setuptools-compatible-loaders). It provides replacement  
listdir, isdir, and exists functions, which is all that this code needs.

James



From nico at tekNico.net  Thu Oct 20 01:55:44 2005
From: nico at tekNico.net (Nicola Larosa)
Date: Thu, 20 Oct 2005 09:55:44 +0200
Subject: [Twisted-Python] Freevo 2.0, Kamaelia, pyevent,
	Eventnet/LGT: what's going on?
Message-ID: <43574D80.40801@tekNico.net>

One year ago the Freevo project, for its 2.0 rewrite, dropped Twisted, and
then went and reimplemented something similar. Then there are Kamaelia,
pyevent, and EventNet inside LGT.

Why isn't Twisted seen, by these projects at least, as a viable tool? Is
the event-driven Python world undergoing the same fragmentation as the web
framework one?


"Freevo is an open-source home theatre PC platform based on Linux and a
number of open-source audio/video tools."

http://freevo.sourceforge.net/about.html

"CurrentStatus

For Freevo 2.0 we changed many parts of the code...

Changes

* Changed the main loop to use PyNotifier. No threads are allowed anymore
and every part must take care that the notifier loop is kept alive. Not all
parts respect that right now.

* Removed Twisted. It is a huge monster and hard to understand. For
inter-process communication a python implementation (PyMbus) of the Mbus
transport protocol is used. As a side effect, modules using twisted need to
be rewritten."

http://freevo.sourceforge.net/cgi-bin/freevo-2.0/CurrentStatus

The reasons for the switch are outlined in this mailing list thread:

switching to pynotifier and pymbus
http://sourceforge.net/mailarchive/forum.php?thread_id=5523105&forum_id=9200

Kamaelia
http://kamaelia.sourceforge.net/

pyevent
http://monkey.org/~dugsong/pyevent/

EventNet - LGT
http://lgt.berlios.de/#eventnet

-- 
Nicola Larosa - nico at tekNico.net

When people with lots of weapons and training in violence feel cornered,
it tends to not be a pretty picture. -- Kirby Urner, August 2005





From sc at linux.it  Thu Oct 20 05:16:20 2005
From: sc at linux.it (Stefano Canepa)
Date: Thu, 20 Oct 2005 13:16:20 +0200
Subject: [Twisted-Python] testing my application
Message-ID: <1129806980.15314.24.camel@localhost.localdomain>

Hi all,
	I am looking for a simple way to write test cases for my project. What
is the right way to be as standard as possible? I know the application
works becouse I developed a client and the server speaking the same
protocol and used lots of print to have output and a sniffer to see
network trafic but I understand this is not the right way.

I read unittest docs, I found twisted.trial and pocked around the test
cases of some twisted protocol, what I was unable to understand is how
to write my taste cases. Could somebody show me the way or point me to
some docs?

TIA
Stefano

-- 
Stefano Canepa aka sc: sc at linux.it  http://www.stefanocanepa.it
Three great virtues of a programmer: laziness, impatience and hubris.
Le tre grandi virtù di un programmatore: pigrizia, impazienza e
arroganza. (Larry Wall)
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20051020/92c5403a/attachment.sig>

From behnel_ml at gkec.informatik.tu-darmstadt.de  Thu Oct 20 05:24:38 2005
From: behnel_ml at gkec.informatik.tu-darmstadt.de (Stefan Behnel)
Date: Thu, 20 Oct 2005 13:24:38 +0200
Subject: [Twisted-Python] Freevo 2.0, Kamaelia, pyevent,	Eventnet/LGT:
	what's going on?
In-Reply-To: <43574D80.40801@tekNico.net>
References: <43574D80.40801@tekNico.net>
Message-ID: <43577E76.80605@gkec.informatik.tu-darmstadt.de>

Nicola Larosa wrote:
> One year ago the Freevo project, for its 2.0 rewrite, dropped Twisted, and
> then went and reimplemented something similar. Then there are Kamaelia,
> pyevent, and EventNet inside LGT.
> 
> Why isn't Twisted seen, by these projects at least, as a viable tool? Is
> the event-driven Python world undergoing the same fragmentation as the web
> framework one?

I do see a couple of differences between the systems. Kamaelia, for example,
is newer and completely built on top of Python's generator feature (which in
Twisted is a niche implementation). It looks cleaner than Twisted but it is
not as 'feature-complete'. So it may get ugly once it implements more
features. That's a general problem, just compare Corba with Web-Services,
you'll see.

It's OpenSource, people start new projects for various reasons. Sometimes they
work out, sometimes they don't.

Stefan




From Marcin.Kasperski at softax.com.pl  Thu Oct 20 07:19:15 2005
From: Marcin.Kasperski at softax.com.pl (Marcin Kasperski)
Date: Thu, 20 Oct 2005 15:19:15 +0200
Subject: [Twisted-Python] testing my application
In-Reply-To: <1129806980.15314.24.camel@localhost.localdomain>
References: <1129806980.15314.24.camel@localhost.localdomain>
Message-ID: <200510201519.15491.Marcin.Kasperski@softax.com.pl>

Dnia czwartek, 20 października 2005 13:16, Stefano Canepa 
napisał:
> Hi all,
> 	I am looking for a simple way to write test cases for my
> project. What is the right way to be as standard as possible?
> I know the application works becouse I developed a client and
> the server speaking the same protocol and used lots of print
> to have output and a sniffer to see network trafic but I
> understand this is not the right way.
>

Hmm, I have the similar problem. I have been using python 
unittest to test my application components but recently I 
started to write classess which return deferreds and I am not 
sure how to test them.

First I tried to use standard unittest and install callbacks 
which call self.fail or self.succeed - but it seems that the 
errors are just ignored.

Then I found on this list note about deferredResult and tried 
using it (keeping normal unittest) but seems the application 
just hangs here (for the simple reason I guess, no reactor is 
running)

Then I found about twisted.trial.unittest. But when I replaced 
import unittest with from twisted.trial import unittest, I found 
that there is no 'main' function in this module.

What should I do? Go back to normal unittest but start some 
reactor before unittest.main() ?

Does there anywhere exist any complete ***standalone*** test 
example (run for itself instead of being run within whole 
twisted test framework)?




From exarkun at divmod.com  Thu Oct 20 07:30:49 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Thu, 20 Oct 2005 09:30:49 -0400
Subject: [Twisted-Python] testing my application
In-Reply-To: <200510201519.15491.Marcin.Kasperski@softax.com.pl>
Message-ID: <20051020133049.27584.177844260.divmod.quotient.1700@ohm>

On Thu, 20 Oct 2005 15:19:15 +0200, Marcin Kasperski <marcin.kasperski at softax.com.pl> wrote:
>Dnia czwartek, 20 października 2005 13:16, Stefano Canepa
>napisał:
>> Hi all,
>> 	I am looking for a simple way to write test cases for my
>> project. What is the right way to be as standard as possible?
>> I know the application works becouse I developed a client and
>> the server speaking the same protocol and used lots of print
>> to have output and a sniffer to see network trafic but I
>> understand this is not the right way.
>>
>
>Hmm, I have the similar problem. I have been using python
>unittest to test my application components but recently I
>started to write classess which return deferreds and I am not
>sure how to test them.
>
>First I tried to use standard unittest and install callbacks
>which call self.fail or self.succeed - but it seems that the
>errors are just ignored.
>
>Then I found on this list note about deferredResult and tried
>using it (keeping normal unittest) but seems the application
>just hangs here (for the simple reason I guess, no reactor is
>running)
>
>Then I found about twisted.trial.unittest. But when I replaced
>import unittest with from twisted.trial import unittest, I found
>that there is no 'main' function in this module.
>
>What should I do? Go back to normal unittest but start some
>reactor before unittest.main() ?
>
>Does there anywhere exist any complete ***standalone*** test
>example (run for itself instead of being run within whole
>twisted test framework)?
>

exarkun at boson:~$ cat > test_foo.py
from twisted.trial import unittest

from twisted.internet import defer

def myTestableFunction(x):
    return defer.succeed(x)

def myBrokenFunction(y):
    return defer.fail(ZeroDivisionError("Math is hard"))

def MyUnitTests(unittest.TestCase):
    def testTestable(self):
        return myTestableFunction(10).addCallback(self.assertEquals, 10)
    def testBroken(self):
        return self.assertFailure(myBrokenFunction("foo"), ZeroDivisionError)
exarkun at boson:~$ trial test_foo.py 
Running 2 tests.
  test_foo
    MyUnitTests
      testBroken ...                          [OK]
      testTestable ...                        [OK]

--------------------------------------------------
Ran 2 tests in 0.033s

PASSED (successes=2)
exarkun at boson:~$ 

Hope this helps,

Jp



From Marcin.Kasperski at softax.com.pl  Thu Oct 20 08:05:03 2005
From: Marcin.Kasperski at softax.com.pl (Marcin Kasperski)
Date: Thu, 20 Oct 2005 16:05:03 +0200
Subject: [Twisted-Python] testing my application
In-Reply-To: <20051020133049.27584.177844260.divmod.quotient.1700@ohm>
References: <20051020133049.27584.177844260.divmod.quotient.1700@ohm>
Message-ID: <200510201605.09012.Marcin.Kasperski@softax.com.pl>

Thanks for the info. Running tests vai 'trial test_x.foo' has unpleasant effect of not allowing debugging but simple trick works:
   if __name__ == "__main__":
      import twisted.scripts.trial
      import sys
      sys.argv = ['-m', 'my_test' ]
      twisted.scripts.trial.run()
(BTW, what about patching run so it could get parameters and fallback to argv only when they are not given?)

Currently I have the following problem: my test script hangs. 
Via simplification I got to the following text (requires some postgres database):

from twisted.trial import unittest
from twisted.trial.util import deferredResult
import psycopg
from twisted.enterprise import adbapi

DSN = "dbname=marcink port=5433 user=user password=pwd host=localhost"

class MyTestCase(unittest.TestCase):
    def setUp(self):
        self.dbpool = adbapi.ConnectionPool('psycopg', DSN)
        # (populating some test data)
        deferredResult( self.dbpool.runInteraction(self._insertTestData) )
    def tearDown(self):
        deferredResult( self.dbpool.runOperation("DROP TABLE mytable") );
    def _insertTestData(self, tx):
        tx.execute("CREATE TABLE mytable(id INTEGER)")
        tx.execute("INSERT INTO mytable(id) VALUES(1)")
    def testSomething(self):
        d = self.dbpool.runQuery("SELECT id FROM mytable")
        d.addCallback( lambda rows: self.assertEquals(len(rows), 1) )

When I run 
   trial -v my_test
I get
my_test
  MyTestCase
    testSomething ... 
(and the test hangs forever)



From itamar at itamarst.org  Thu Oct 20 08:13:29 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 20 Oct 2005 10:13:29 -0400
Subject: [Twisted-Python] Freevo 2.0, Kamaelia, pyevent, Eventnet/LGT:
	what's going on?
In-Reply-To: <43574D80.40801@tekNico.net>
References: <43574D80.40801@tekNico.net>
Message-ID: <1129817610.9136.7.camel@localhost.localdomain>

On Thu, 2005-10-20 at 09:55 +0200, Nicola Larosa wrote:
> One year ago the Freevo project, for its 2.0 rewrite, dropped Twisted, and
> then went and reimplemented something similar. Then there are Kamaelia,
> pyevent, and EventNet inside LGT.

There have always been people who don't want to use "large" frameworks
because they are "too big", which is to say involve having a few more MB
used on disk. This was part of the motivation for splitting up Twisted:
marketing.

pyevent: much lower level than Twisted, so requires a lot more work on
developer's part (Twisted also provides such a low level interface
though in additional to e.g. the nice high level TCP abstraction with
buffering and so on).
EventNet: requires Twisted apparently :)
kamaelia: an experimental platform for what I hear are some interesting
ideas we should look at; probably would be a good candidate for running
on top of Twisted since they seem to deal with higher levels of
abstraction mostly.

> Why isn't Twisted seen, by these projects at least, as a viable tool? Is
> the event-driven Python world undergoing the same fragmentation as the web
> framework one?

Not as far as I can tell. E.g. zope3, which had their own event loop,
just switched to Twisted
(http://mail.zope.org/pipermail/zope3-checkins/2005-October/026115.html).




From Marcin.Kasperski at softax.com.pl  Thu Oct 20 08:18:15 2005
From: Marcin.Kasperski at softax.com.pl (Marcin Kasperski)
Date: Thu, 20 Oct 2005 16:18:15 +0200
Subject: [Twisted-Python] testing my application
In-Reply-To: <200510201605.09012.Marcin.Kasperski@softax.com.pl>
References: <20051020133049.27584.177844260.divmod.quotient.1700@ohm>
	<200510201605.09012.Marcin.Kasperski@softax.com.pl>
Message-ID: <200510201618.18202.Marcin.Kasperski@softax.com.pl>

> Currently I have the following problem: my test script hangs.
> Via simplification I got to the following text (requires some
> postgres database):
>
>  def setUp(self):
>      self.dbpool = adbapi.ConnectionPool('psycopg', DSN)
>      # (populating some test data)
>      deferredResult( self.dbpool.runInteraction(self._insertTestData) ) 

Hmm, replying to myself, it seems that when I changed to 

   def setUp(self):
      self.dbpool = adbapi.ConnectionPool('psycopg', DSN)
      return self.dbpool.runInteraction(self._insertTestData)

my test seems to work. Could anyone confirm that setUp (and tearDown) are also allowed to return deferreds?

I have also another problem. In fact I need to run a few deferred-returning functions within setUp. How should I join them? I can create DeferredList but will it then be checked for failures?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20051020/960cebd4/attachment.html>

From Marcin.Kasperski at softax.com.pl  Thu Oct 20 08:30:02 2005
From: Marcin.Kasperski at softax.com.pl (Marcin Kasperski)
Date: Thu, 20 Oct 2005 16:30:02 +0200
Subject: [Twisted-Python] testing my application
In-Reply-To: <200510201618.18202.Marcin.Kasperski@softax.com.pl>
References: <20051020133049.27584.177844260.divmod.quotient.1700@ohm>
	<200510201605.09012.Marcin.Kasperski@softax.com.pl>
	<200510201618.18202.Marcin.Kasperski@softax.com.pl>
Message-ID: <200510201630.02617.Marcin.Kasperski@softax.com.pl>

> Hmm, replying to myself, it seems that when I changed to
>
>    def setUp(self):
>       self.dbpool = adbapi.ConnectionPool('psycopg', DSN)
>       return self.dbpool.runInteraction(self._insertTestData)
>
> my test seems to work. 

Continuing replying to myself, the test seems  to work even too 
well. In fact it insist on succeeding. For instance when I 
changed sql command to some rubbish, the test still succeeds. 
For example this test is raported as succesfully executed

    def testSomething(self):
        d = self.dbpool.runQuery("RUBBISH SELECT BLAH BLAH")
        return d

I had to miss something. But ... what?



From Marcin.Kasperski at softax.com.pl  Thu Oct 20 09:22:23 2005
From: Marcin.Kasperski at softax.com.pl (Marcin Kasperski)
Date: Thu, 20 Oct 2005 17:22:23 +0200
Subject: [Twisted-Python] testing my application
In-Reply-To: <200510201630.02617.Marcin.Kasperski@softax.com.pl>
References: <20051020133049.27584.177844260.divmod.quotient.1700@ohm>
	<200510201618.18202.Marcin.Kasperski@softax.com.pl>
	<200510201630.02617.Marcin.Kasperski@softax.com.pl>
Message-ID: <200510201722.23668.Marcin.Kasperski@softax.com.pl>

> Continuing replying to myself, the test seems  to work even
> too well. In fact it insist on succeeding. For instance when I
> changed sql command to some rubbish, the test still succeeds.
> For example this test is raported as succesfully executed
>
>     def testSomething(self):
>         d = self.dbpool.runQuery("RUBBISH SELECT BLAH BLAH")
>         return d
>
> I had to miss something. But ... what?

As one more attempt I just ugraded from twisted 1.3 to twisted 
2.0 (= from twisted version present in Debian testing to twisted 
version present in Debian unstable). 

And now ........ the script which in 1.3 ignored errors but 
worked, *hangs(, in exactly the same way in which it used to 
hang when I used deferredResult.



From solipsis at pitrou.net  Thu Oct 20 09:51:20 2005
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Thu, 20 Oct 2005 17:51:20 +0200
Subject: [Twisted-Python] Freevo 2.0, Kamaelia, pyevent, Eventnet/LGT:
	what's going on?
In-Reply-To: <43574D80.40801@tekNico.net>
References: <43574D80.40801@tekNico.net>
Message-ID: <1129823481.11151.13.camel@fsol>

Le jeudi 20 octobre 2005 à 09:55 +0200, Nicola Larosa a écrit :
> One year ago the Freevo project, for its 2.0 rewrite, dropped Twisted, and
> then went and reimplemented something similar. Then there are Kamaelia,
> pyevent, and EventNet inside LGT.
> 
> Why isn't Twisted seen, by these projects at least, as a viable tool?

I don't know. FWIW, my current opinion about Twisted (may change without
warning ;-)) is that:
- all traditional network functions are quite clear, easy to use and
stable
- high-level features seem better avoided since documentation is often
very lacking and the API does not seem stable
- design choices are not documented at all (for example, why a custom
logging module instead of the Python-provided one?), so they often look
gratuitous
- the tendency to advocate proprietary protocols (like PB) without
warning the user should be mitigated
- the architecture is sometimes bizarre or badly described (the
credential stuff looks like Chinese to me); for example, why is there a
distinction between "*Protocol" and "*Factory" types?

I often recommend the use of Twisted for standard network functions. But
I stay away of the more sophisticated stuff (including twistd, PB,
Nevow, etc.). Grouping all this stuff together with the basic, trusted,
dependable network classes may yield a perception of twisted as
bloatware.


(OTOH, I very briefly looked at Kamaelia's introduction doc and I don't
find it attractive - this kind of dataflow-programming model looks quite
unflexible)

Regards

Antoine.





From Marcin.Kasperski at softax.com.pl  Thu Oct 20 10:07:19 2005
From: Marcin.Kasperski at softax.com.pl (Marcin Kasperski)
Date: Thu, 20 Oct 2005 18:07:19 +0200
Subject: [Twisted-Python] Solved? Or Not? testing my application
In-Reply-To: <200510201722.23668.Marcin.Kasperski@softax.com.pl>
References: <20051020133049.27584.177844260.divmod.quotient.1700@ohm>
	<200510201630.02617.Marcin.Kasperski@softax.com.pl>
	<200510201722.23668.Marcin.Kasperski@softax.com.pl>
Message-ID: <200510201807.20029.Marcin.Kasperski@softax.com.pl>

> As one more attempt I just ugraded from twisted 1.3 to twisted
> 2.0 (= from twisted version present in Debian testing to
> twisted version present in Debian unstable).
>
> And now ........ the script which in 1.3 ignored errors but
> worked, *hangs(, in exactly the same way in which it used to
> hang when I used deferredResult.

I found the solution. The following modification caused 
everything to work as expected

    def setUp(self):
        self.dbpool = adbapi.ConnectionPool('psycopg', DSN)
        self.dbpool.start()
        # ...

(I added self.dbpool.start())

Confusing part is that start method doc tells:

            If you are using the reactor normally, this function 
            does *not* need to be called.

So it seems trial is *not* using reactor 'normally' - whatever 
does it mean.



From maristaran at gmail.com  Thu Oct 20 10:49:29 2005
From: maristaran at gmail.com (=?ISO-8859-15?Q?Manuel_Aristar=E1n?=)
Date: Thu, 20 Oct 2005 13:49:29 -0300
Subject: [Twisted-Python] LDAP Checker
Message-ID: <869525070.20051020134929@gmail.com>

Hi everybody,

I'm learning Twisted, and already have a simple application
running.
I wante to experiment adding an LDAP checker to it. Is there any open
source implementation of such a thing? I'm aware of LDAPtor, but I'm
looking for some examples of integration with twisted.cred.

Thanks,

-- 
Manuel Aristarán <maristaran at gmail.com>
Buenos Aires, Argentina




From dialtone at divmod.com  Thu Oct 20 12:09:43 2005
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Thu, 20 Oct 2005 20:09:43 +0200
Subject: [Twisted-Python] Freevo 2.0, Kamaelia, pyevent,
	Eventnet/LGT: what's going on?
In-Reply-To: <1129823481.11151.13.camel@fsol>
References: <43574D80.40801@tekNico.net> <1129823481.11151.13.camel@fsol>
Message-ID: <20051020180943.GF9373@divmod.com>

On Thu, Oct 20, 2005 at 05:51:20PM +0200, Antoine Pitrou wrote:
> - high-level features seem better avoided since documentation is often
> very lacking and the API does not seem stable

Well... I have applications running on twisted for over an year without any
breakage in API. And API compatibility is guaranteed between minor release,
and I'd say also major right now, since there is also a complete compatibility
layer for the old interfaces. Documentation is lacking sometimes, only for
jabber AFAIK. There are plenty of tests and examples. Also when you understand
twisted everything else comes just straight off.

> - design choices are not documented at all (for example, why a custom
> logging module instead of the Python-provided one?), so they often look
> gratuitous

The python standard one do not seem so nice. In fact there are a number of
projects to substitute it with something better. One is twisted.python.log
another is py.log and there are others out there. Another example?

> - the tendency to advocate proprietary protocols (like PB) without
> warning the user should be mitigated

PB is not proprietary... The protocol is documented (maybe it's the best
documented thing in twisted) and source code is available. Then why should you
warn somebody for using a very good thing?

> - the architecture is sometimes bizarre or badly described (the
> credential stuff looks like Chinese to me); for example, why is there a
> distinction between "*Protocol" and "*Factory" types?

You are being unfair here. I'm sorry to sound harsh but if you don't
understand something it doesn't mean that it's bizarre or hairy.

The Factory keeps state for many protocols since the protocol is created and
destroyed with the connection. Seems rather obvious for anybody having just
read the basic finger tutorial.

The credential stuff couldn't be easier than that.
It's pluggable, which means that it can be put in front of anything, but there
must be a way, for this anything, to retrieve credentials for the user that is
currently requiring the login, which means that it is made of a protocol side
and a twisted.cred side.

In the case of Nevow the protocol side is guard.py and then there is cred.
The aim of guard is to retrieve the arguments username and password from the
request and pass them to portal.login(). Portal login has a set of checkers
and a realm.

What happens is:
the portal calls requestAvatarId on the checker passing the credentials to it.
If the credentials are checked it will return an avatarId, otherwise it will
raise an UnauthorizedLogin exception.
after the portal as received the result of the requestAvatarId it then calls
requestAvatar on the realm passing the avatarId to it and the interface
associated with where the login request came from (web, pb, ftp, whatever)
[also supplied by guard].
then the result of requestAvatar is displayed to the user.

I wouldn't know how to do this in an easier and simpler way, yet maintaining
the same code reusability.

> I often recommend the use of Twisted for standard network functions. But
> I stay away of the more sophisticated stuff (including twistd, PB,
> Nevow, etc.). Grouping all this stuff together with the basic, trusted,
> dependable network classes may yield a perception of twisted as
> bloatware.

If you don't want to learn anything of course. If instead you go beyond the
surface and learn something for real then it may happen that you find it is
istead a great problem solver for a lot of problems.

-- 
Valentino Volonghi aka Dialtone
Now Running MacOSX 10.4
Blog: http://vvolonghi.blogspot.com
http://weever.berlios.de
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 186 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20051020/48191447/attachment.sig>

From itamar at itamarst.org  Thu Oct 20 12:37:18 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 20 Oct 2005 14:37:18 -0400
Subject: [Twisted-Python] Freevo 2.0, Kamaelia, pyevent, Eventnet/LGT:
	what's going on?
In-Reply-To: <20051020180943.GF9373@divmod.com>
References: <43574D80.40801@tekNico.net> <1129823481.11151.13.camel@fsol>
	<20051020180943.GF9373@divmod.com>
Message-ID: <1129833438.9136.44.camel@localhost.localdomain>

On Thu, 2005-10-20 at 20:09 +0200, Valentino Volonghi aka Dialtone
wrote:

> > - design choices are not documented at all (for example, why a custom
> > logging module instead of the Python-provided one?), so they often look
> > gratuitous
> 
> The python standard one do not seem so nice. In fact there are a number of
> projects to substitute it with something better. One is twisted.python.log
> another is py.log and there are others out there. Another example?

We had a logging system *before* Python did, and for that matter we
still run on versions of Python that don't include it (2.2). You can use
Twisted with python's logging system if you want.





From firemoth at gmail.com  Thu Oct 20 16:10:05 2005
From: firemoth at gmail.com (Timothy Fitz)
Date: Thu, 20 Oct 2005 18:10:05 -0400
Subject: [Twisted-Python] Win32 installers of Twisted 2.1?
In-Reply-To: <F92274058556DE42B94B148EEFB91839021CB5BF@exchange-03.suedkurier.de>
References: <F92274058556DE42B94B148EEFB91839021CB5BF@exchange-03.suedkurier.de>
Message-ID: <972ec5bd0510201510r2b18f1e3v1a0eab6f86c19631@mail.gmail.com>

On 10/18/05, Henning.Ramm at mediapro-gmbh.de
<Henning.Ramm at mediapro-gmbh.de> wrote:
> Dear twisted wizards,
>
> would it be possible to also release Win32 exe installers for Twisted 2.1?
> I'd prefer to always use the same way of installing things, if possible.
> But if you won't release any Windows binaries any more, please state that on the website.
>

I'm working on making a win32 installer with all of the windows extras
(start menu links to documentation and the shell with proper
environment variables, etc), however in the meantime if anyone wants a
"just install the Twisted package" installer, feel free to e-mail me
off-list (with the version of python you would like it built for).



From gkwrcc at dri.edu  Thu Oct 20 16:33:07 2005
From: gkwrcc at dri.edu (Grant Kelly)
Date: Thu, 20 Oct 2005 15:33:07 -0700
Subject: [Twisted-Python] https xmlrpc through proxy 
Message-ID: <43581B23.1060201@dri.edu>

Hello,

I just signed up for this list because I am having no success connecting 
to an https xmlrpc server through a proxy/firewall. The proxy can do 
both http and https for the web just fine. I have also been able to 
connect to an xmlrpc server with just http through the proxy.  I am 
using the ProxiedXMLRPC class from this page: 
http://twistedmatrix.com/pipermail/twisted-python/2004-December/009258.html
The author notes it isn't tested with https.

In order to connect to the xmlrpc server, a certificate and key need to 
be specified. I don't know where to specify these files.

I don't even know if this is technically possible. I am hoping that it is.

Any suggestions will be appreciated.
Grant

PS:  I'm going to include the python traceback in case it provides any 
more information:

Traceback (most recent call last):
  File "/usr/local/lib/python2.4/site-packages/twisted/python/log.py", 
line 41, in callWithContext
    return context.call({ILogContext: newCtx}, func, *args, **kw)
  File 
"/usr/local/lib/python2.4/site-packages/twisted/python/context.py", line 
52, in callWithContext
    return self.currentContext().callWithContext(ctx, func, *args, **kw)
  File 
"/usr/local/lib/python2.4/site-packages/twisted/python/context.py", line 
31, in callWithContext
    return func(*args,**kw)
  File 
"/usr/local/lib/python2.4/site-packages/twisted/internet/selectreactor.py", 
line 139, in _doReadOrWrite
    why = getattr(selectable, method)()
--- <exception caught here> ---
  File "/usr/local/lib/python2.4/site-packages/twisted/internet/tcp.py", 
line 111, in doRead
    return Connection.doRead(self)
  File "/usr/local/lib/python2.4/site-packages/twisted/internet/tcp.py", 
line 343, in doRead
    data = self.socket.recv(self.bufferSize)
OpenSSL.SSL.Error: [('SSL routines', 'SSL3_READ_BYTES', 'ssl handshake 
failure')]
Traceback (most recent call last):
  File "testproxy.py", line 54, in ?
    reactor.run()
  File 
"/usr/local/lib/python2.4/site-packages/twisted/internet/posixbase.py", 
line 199, in run
    self.mainLoop()
  File 
"/usr/local/lib/python2.4/site-packages/twisted/internet/posixbase.py", 
line 210, in mainLoop
    self.doIteration(t)
  File 
"/usr/local/lib/python2.4/site-packages/twisted/internet/selectreactor.py", 
line 133, in doSelect
    _logrun(selectable, _drdw, selectable, method, dict)
--- <exception caught here> ---
  File "/usr/local/lib/python2.4/site-packages/twisted/python/log.py", 
line 56, in callWithLogger
    return callWithContext({"system": lp}, func, *args, **kw)
  File "/usr/local/lib/python2.4/site-packages/twisted/python/log.py", 
line 41, in callWithContext
    return context.call({ILogContext: newCtx}, func, *args, **kw)
  File 
"/usr/local/lib/python2.4/site-packages/twisted/python/context.py", line 
52, in callWithContext
    return self.currentContext().callWithContext(ctx, func, *args, **kw)
  File 
"/usr/local/lib/python2.4/site-packages/twisted/python/context.py", line 
31, in callWithContext
    return func(*args,**kw)
  File 
"/usr/local/lib/python2.4/site-packages/twisted/internet/selectreactor.py", 
line 149, in _doReadOrWrite
    self._disconnectSelectable(selectable, why, method=="doRead")
  File 
"/usr/local/lib/python2.4/site-packages/twisted/internet/posixbase.py", 
line 234, in _disconnectSelectable
    selectable.connectionLost(f)
  File "/usr/local/lib/python2.4/site-packages/twisted/internet/tcp.py", 
line 556, in connectionLost
    Connection.connectionLost(self, reason)
  File "/usr/local/lib/python2.4/site-packages/twisted/internet/tcp.py", 
line 402, in connectionLost
    protocol.connectionLost(reason)
  File "/usr/local/lib/python2.4/site-packages/twisted/web/http.py", 
line 351, in connectionLost
    self.handleResponseEnd()
  File "/usr/local/lib/python2.4/site-packages/twisted/web/http.py", 
line 357, in handleResponseEnd
    self.handleResponse(b)
  File "/usr/local/lib/python2.4/site-packages/twisted/web/xmlrpc.py", 
line 259, in handleResponse
    self.factory.parseResponse(contents)
  File "/usr/local/lib/python2.4/site-packages/twisted/web/xmlrpc.py", 
line 284, in parseResponse
    response = xmlrpclib.loads(contents)
  File "/usr/local/lib/python2.4/xmlrpclib.py", line 1080, in loads
    p.close()
  File "/usr/local/lib/python2.4/xmlrpclib.py", line 530, in close
    self._parser.Parse("", 1) # end of data
xml.parsers.expat.ExpatError: no element found: line 1, column 0




From solipsis at pitrou.net  Thu Oct 20 17:10:03 2005
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Fri, 21 Oct 2005 01:10:03 +0200
Subject: [Twisted-Python] Freevo 2.0, Kamaelia, pyevent, Eventnet/LGT:
	what's going on?
In-Reply-To: <20051020180943.GF9373@divmod.com>
References: <43574D80.40801@tekNico.net> <1129823481.11151.13.camel@fsol>
	<20051020180943.GF9373@divmod.com>
Message-ID: <1129849803.5945.39.camel@fsol>


Hi,

Thanks for the answers...

> > - high-level features seem better avoided since documentation is often
> > very lacking and the API does not seem stable
> 
> Well... I have applications running on twisted for over an year without any
> breakage in API.

Oh, I have too. But only using the basic networking stuff, because I'm
not confident enough to touch the high-level things.

Parts of the Twisted API are marked as "API unstable". I don't think I
dreamed it, since I've read it in the doc ;)
Also I've seen several times some answers on this very list which were
of the sort "actually this module is not maintained anymore" (or
"experimental").

> Documentation is lacking sometimes, only for
> jabber AFAIK.

There is a whole lot of methods which are not documented at all. Also,
there is usually no comprehensive documentation for a specific
functionality. Not to mention the annoying interface system which means
the documentation for e.g. twisted.internet.reactor.ListenTCP is
actually to be found elsewhere in the class hierarchy...

> > - design choices are not documented at all (for example, why a custom
> > logging module instead of the Python-provided one?), so they often look
> > gratuitous
> 
> The python standard one do not seem so nice. In fact there are a number of
> projects to substitute it with something better. One is twisted.python.log
> another is py.log and there are others out there. Another example?

As I said the problem is that it's not documented anywhere. That doesn't
mean there isn't any reason, just that a normal developer cannot guess
by himself. When I see a library with lots of design decisions for which
I can't find any rationale, I'm legitimately suspicious (it could just
be the NIH syndrome which we all know very well - since we have all one
day fallen for it ;-)).

> PB is not proprietary... The protocol is documented (maybe it's the best
> documented thing in twisted) and source code is available.

It is proprietary in the sense that it is, AFAIK, implemented only by
Twisted.
Contrast this with e.g. XMLRPC which has lots of implementations. XMLRPC
is quite mediocre, but at least I know that mostly everyone can find an
implementation for his/her favourite programming language.
I won't ever use PB for something for which I want others to be able to
write clients easily (without forcing them to use Twisted). It's a
simple matter of simplifying interoperability. For some people/projects
it matters very much, for others it doesn't matter at all.

> The Factory keeps state for many protocols since the protocol is created and
> destroyed with the connection. Seems rather obvious for anybody having just
> read the basic finger tutorial.

There is a terminology problem, since I don't understand why something
named "Protocol" should be destroyed at every connection. Or it should
be, quite logically, renamed "Connection". Also this doesn't appear in
the API docs (again).

For me, a "protocol" is something like HTTP or SMTP. It is "eternal",
I'm not expecting it to be created/destroyed at every connection (that
would be like calling an int a float, or whatever).

There is no documentation on the magic that really happens when
something is triggered (for example when a TCP session is established).
Which methods are called, which objects are created, in which order,
etc. Unexplained magic is annoying in software development.

> If you don't want to learn anything of course. If instead you go beyond the
> surface and learn something for real then it may happen that you find it is
> istead a great problem solver for a lot of problems.

It's not that I don't want to learn. It's that the more you use
framework-specific constructs, and the higher level those constructs
are, the more your software project is stuck with this framework and
difficult to reuse/adapt/port/interoperate with. Of course, some
projects (especially proprietary or internal ones) are less sensitive to
this than others.

Again, that does not change the fact that I'm quite happy with the parts
of Twisted I do use. The simple notion of a Deferred (with its two
callbacks) for example, is brilliant.

Regards

Antoine.





From solipsis at pitrou.net  Thu Oct 20 17:18:25 2005
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Fri, 21 Oct 2005 01:18:25 +0200
Subject: [Twisted-Python] https xmlrpc through proxy
In-Reply-To: <43581B23.1060201@dri.edu>
References: <43581B23.1060201@dri.edu>
Message-ID: <1129850305.5945.43.camel@fsol>


Le jeudi 20 octobre 2005 à 15:33 -0700, Grant Kelly a écrit :
> Hello,
> 
> I just signed up for this list because I am having no success connecting 
> to an https xmlrpc server through a proxy/firewall. The proxy can do 
> both http and https for the web just fine. I have also been able to 
> connect to an xmlrpc server with just http through the proxy.  I am 
> using the ProxiedXMLRPC class from this page: 
> http://twistedmatrix.com/pipermail/twisted-python/2004-December/009258.html
> The author notes it isn't tested with https.

Well, not only I haven't tested it with https, but since I don't
actually know how https works with a proxy (is the connection also
encrypted upto the proxy? etc.), chances are it's completely broken.

Sorry for that.

Regards,

Antoine.





From glyph at divmod.com  Thu Oct 20 17:45:38 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 20 Oct 2005 19:45:38 -0400
Subject: [Twisted-Python] Freevo 2.0, Kamaelia, pyevent,
	Eventnet/LGT: what's going on?
In-Reply-To: <43574D80.40801@tekNico.net>
Message-ID: <20051020234538.27584.81320924.divmod.quotient.1907@ohm>



On Thu, 20 Oct 2005 09:55:44 +0200, Nicola Larosa <nico at teknico.net> wrote:
>One year ago the Freevo project, for its 2.0 rewrite, dropped Twisted, and
>then went and reimplemented something similar.

Since the Freevo project didn't notify us when they started using Twisted, they didn't provide any criticism of it while they were using it, and they didn't tell us when they stopped, I'm certainly not planning to speculate as to their motives.

>Then there are Kamaelia,
>pyevent, and EventNet inside LGT.

http://lgt.berlios.de/: "EventNet requires the gherkin and Twisted packages."

Doesn't sound like they've stopped using Twisted to me.

>Why isn't Twisted seen, by these projects at least, as a viable tool? 

"Programming is hard", probably.  The only reason given by the Freevo project is that "It is a huge monster and hard to understand.".  They're focused on building a multimedia system, not networking, so it stands to reason that they wouldn't have a lot of the sort of people that would find Twisted easy to use hanging around.

Plus, most of what they need networking for as far (as I understand it) is downloading programming schedules over the web, and Twisted's web-downloader situation could be described as "unfortunate" at best.  They'd not only need to understand Twisted's core, but the internals of the web-downloading junk well enough to improve upon it.  It might have seemed easier to just rewrite.

Twisted is very much an unfinished project, and when people want to use the pieces that don't exist or aren't done yet, they get frustrated with it.  I would too.  It saddens me that they won't file bugs in the tracker and discuss their issues with the project with us rather than simply on their own mailing lists, but what can we do?

>Is the event-driven Python world undergoing the same fragmentation as the web
>framework one?

This would actually be a source of some relief for me.

Without any meaningful competition, Twisted has been operating in a vacuum.  I certainly plan to continue using Twisted myself, and for all of the Divmod projects (plug: <http://www.divmod.org>) but I don't think everyone in the world should necessarily use it.

However, every programmer *should* understand the basics of event-driven programming, and there should be libraries available which facilitate the creation of scalable systems which use event-driven protocol implementations.  Twisted got the ball rolling on this in Python, but if other viable projects with similar goals merge it could be the basis of some kind of standard API.  Perhaps one that someone *else* could maintain, that would eventually end up in the standard libarary, and that Twisted could plug into optionally.  I don't view that as a bad thing.  A "wsgi for events", if you will.

Also, it gives the Twisted team some potential competition to focus on.  Possibly a source of motivation, and besides, everybody loves a race :).

That said, I think that the fact that PyNotifier comes with zero unit tests ought to speak for itself.

Kamaelia seems more promising to me; I imagine that they might produce some serious competition eventually if that's what they aim to do.  However, they claim that only the "Axon" part of their project is stable, and that doesn't yet include anything that does select().

Conclusion: if you think that the web-based Python world is in some kind of crisis because there are a lot of frameworks (I don't), then I don't believe the event-driven networking side of things is headed for the same fate.  As Itamar noted, Zope3 is moving towards using Twisted for its event loop even as  Freevo moves away.  There is more than one project in the world that has 'import select' in it, but I find that hard to construe as a disaster.  None seem to be nearly as far-reaching or complete as Twisted is yet.



From glyph at divmod.com  Thu Oct 20 17:51:39 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 20 Oct 2005 19:51:39 -0400
Subject: [Twisted-Python] Freevo 2.0, Kamaelia, pyevent, Eventnet/LGT:
	what's going on?
In-Reply-To: <1129823481.11151.13.camel@fsol>
Message-ID: <20051020235139.27584.768918423.divmod.quotient.1910@ohm>



On Thu, 20 Oct 2005 17:51:20 +0200, Antoine Pitrou <solipsis at pitrou.net> wrote:
>I don't know. FWIW, my current opinion about Twisted (may change without
>warning ;-)) is that:

>- design choices are not documented at all (for example, why a custom
>logging module instead of the Python-provided one?), so they often look
>gratuitous

 - twisted.python.log is OLDER than the Python-provided one.  Ask instead, "why does Python use a custom logging module instead of the Twisted-provided one?"

 - as a matter of fact, this design choice *IS* documented, http://twistedmatrix.com/bugs/issue307

 - okay okay, you have a point, there should be documents put together somewhere, not just random things in the issue tracker :).  I thought it was amusing that you picked the _one_ design choice as an example of this that _does_ have copious documentation available somewhere public.

>- the tendency to advocate proprietary protocols (like PB) without
>warning the user should be mitigated

"custom", maybe.  "proprietary"?  no, not according to any definition of the word.  There is a Java implementation, at least half of an Emacs implementation.

PB2 is probably going to take a while to get implemented everywhere, but there is at least some effort towards making this protocol more widely available than just Python + Twisted.

>- the architecture is sometimes bizarre or badly described (the
>credential stuff looks like Chinese to me); for example, why is there a
>distinction between "*Protocol" and "*Factory" types?

I'm not sure I understand the question here.  Have you read the writing-servers and writing-clients documentation?

>I often recommend the use of Twisted for standard network functions. But
>I stay away of the more sophisticated stuff (including twistd, PB,
>Nevow, etc.). Grouping all this stuff together with the basic, trusted,
>dependable network classes may yield a perception of twisted as
>bloatware.

That's exactly why the project was split up.  Not only is Nevow not distributed with Twisted, we recently had a discussion on this very mailing list explaining why it is *NEVER* allowed to even *optionally* import Nevow from the Twisted codebase...



From andrew-twisted at puzzling.org  Thu Oct 20 17:54:17 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 21 Oct 2005 09:54:17 +1000
Subject: [Twisted-Python] Freevo 2.0, Kamaelia, pyevent,
	Eventnet/LGT: what's going on?
In-Reply-To: <1129849803.5945.39.camel@fsol>
References: <43574D80.40801@tekNico.net> <1129823481.11151.13.camel@fsol>
	<20051020180943.GF9373@divmod.com> <1129849803.5945.39.camel@fsol>
Message-ID: <20051020235417.GW19919@trogdor.home.puzzling.org>

On Fri, Oct 21, 2005 at 01:10:03AM +0200, Antoine Pitrou wrote:
[...]
> 
> There is a terminology problem, since I don't understand why something
> named "Protocol" should be destroyed at every connection. Or it should
> be, quite logically, renamed "Connection". Also this doesn't appear in
> the API docs (again).

I think high-level concepts like this are much better explained through
proper documents than docstrings (which is the source of our API docs).
Docstrings are generally like man pages; they give a basic reference for
something, if you're lucky an example even, but for anything more than that,
like understanding the design, you really want a more comprehensive and
coherent document than a collection of docstrings.  API docs are mainly
useful to people that already understand what's going on.

That's not to say our documentation in this area is perfect.  You're right
that the design of protocols and factories isn't really discussed
explicitly; either you find it by working through the tutorial, or perhaps
from
http://twistedmatrix.com/projects/core/documentation/howto/servers.html.
Improvements welcome! ;)

As to why it's "Protocol" rather than "Connection"... that would be
differently confusing :)

The "connection" to me sounds like what the transport already is -- the
thing responsible for taking bytes (or datagrams) from here and sending them
to there, and that you can disconnect, and so on.  In Twisted, the
"Protocol" is the thing responsible for interpreting events from the
underlying connection (and in most cases, doesn't care if the underlying
transport is TCP, SSL, UNIX domain sockets, or whatever -- how the bytes are
transported isn't its responsibility).

> For me, a "protocol" is something like HTTP or SMTP. It is "eternal",
> I'm not expecting it to be created/destroyed at every connection (that
> would be like calling an int a float, or whatever).

Well, the logic of how to interpret the byte stream into higher-level events
is "eternal": your Protocol *class* is that.  The actual interpretation
(e.g.  "ok, I've just seen '\n' so this is a lineReceived event... ok, I've
just seen a blank line and I was in the 'expecting HTTP headers' state so
now I'm in the 'expecting request body state', but this is a GET request so
there's no body, so this is a 'requestReceived' event") is almost always
stateful though, and state means objects, i.e. instances.  

So: you need an interpreter per connection (because interpreting a byte
stream is stateful), and interpreters ought to be able to work with any byte
stream, because most of the time there's no or little difference.  So the
interpreter and byte-stream have different objects: a Protocol and a
Transport.

> There is no documentation on the magic that really happens when
> something is triggered (for example when a TCP session is established).
> Which methods are called, which objects are created, in which order,
> etc. Unexplained magic is annoying in software development.

There's not much magic, but there's also not much documentation.  Of course,
the end result is of inadequate documentation isn't very distinguishable
from magic :(

Depending on what levels of abstraction you care about, see the interfaces
for IReactorTCP, IConnector, IProtocolFactory, IProtocol and ITransportTCP,
and Factory itself:
    http://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.html
    http://twistedmatrix.com/documents/current/api/twisted.internet.protocol.Factory.html

Or ask specific questions on this list!

I hope I've helped,

-Andrew.




From moe at divmod.com  Thu Oct 20 18:10:43 2005
From: moe at divmod.com (Moe Aboulkheir)
Date: Fri, 21 Oct 2005 02:10:43 +0200
Subject: [Twisted-Python] Freevo 2.0, Kamaelia, pyevent, Eventnet/LGT:
	what's going on?
In-Reply-To: <1129849803.5945.39.camel@fsol>
Message-ID: <20051021001043.27584.1610137773.divmod.quotient.1920@ohm>

On Fri, 21 Oct 2005 01:10:03 +0200, Antoine Pitrou <solipsis at pitrou.net> wrote:

>Not to mention the annoying interface system which means
>the documentation for e.g. twisted.internet.reactor.ListenTCP is
>actually to be found elsewhere in the class hierarchy...

i assure you that the interfaces exist for reasons other than making your life difficult

>[PB] is proprietary in the sense that it is, AFAIK, implemented only by
>Twisted.

here is a javascript implementation of PB: http://jspb.mozdev.org/.  and a java one: http://www.itamarst.org/software/twistedjava/.  there is also an objective caml port (cvs: cvs.twistedmatrix.com/cvs/TwistedOCaml).  probably more that i am not aware of.

<ramble>
as far as the topic of alternative python frameworks (dare i say the word) for event-based programming in general, i think it's an interesting time, with PEP 342 in the wings - a lot of you probably think it's a bad idea, but it has the capacity to remove the reliance on frameworks for accomplishing clean asychronous IO in python (see the miniscule scheduler examples both in the PEP and in recent python-dev posts).  when i say "framework" in this context, i mean libraries whose clients accrue a dependency on a non-standard reactor/event loop/runtime/whatever in order to operate.  kamaelia probably doesn't fit into this category, i wouldn't know.

so why bother with twisted?  twisted is the winner because of its ridiculously  numerous and thorough protocol implementations.  sure, the standard library has an imap implementation, but does it have an implementation of the MSN protocol?  there are non-twisted MSN python libraries, but they aren't going to expose the same basic interface abstractions as imaplib.  twisted also has OSCAR, jabber, SMTP, HTTP, and a bunch more, with clients AND servers for most of these, all using the same abstractions and entry points.  as far as most of these are are concerned, YAGNI, but if (when) you do, you code isn't going to change significantly.
</ramble>

--
Moe Aboulkheir



From dialtone at divmod.com  Thu Oct 20 18:19:21 2005
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Fri, 21 Oct 2005 02:19:21 +0200
Subject: [Twisted-Python] Freevo 2.0, Kamaelia, pyevent,
	Eventnet/LGT: what's going on?
In-Reply-To: <1129849803.5945.39.camel@fsol>
References: <43574D80.40801@tekNico.net> <1129823481.11151.13.camel@fsol>
	<20051020180943.GF9373@divmod.com> <1129849803.5945.39.camel@fsol>
Message-ID: <20051021001921.GH9373@divmod.com>

On Fri, Oct 21, 2005 at 01:10:03AM +0200, Antoine Pitrou wrote:
> 
> Hi,
> 
> Thanks for the answers...

Np :)

> Oh, I have too. But only using the basic networking stuff, because I'm
> not confident enough to touch the high-level things.

I had a bot using twisted.words, Nevow and other projects, that lived long and
prosper for well over an year. Now I changed it because I changed the logging
backend to another database.

> Parts of the Twisted API are marked as "API unstable". I don't think I
> dreamed it, since I've read it in the doc ;)

Sure, I think even the reactor was marked unstable since not so far ago.
Documentation might be not in sync. A problem indeed but still not enough to
drop something and start reimplementing it from scratch. The only way to have
a stable API is when something stops maintainance or completely dies.
Otherwise API changes always.

> Also I've seen several times some answers on this very list which were
> of the sort "actually this module is not maintained anymore" (or
> "experimental").

So? There are tons of experimental projects in python. If something is
experimental, anyway, it doesn't mean that everything in twisted is.
twisted.web is not experimental, twisted.names isn't as well. twisted.mail
too. twisted.spread and so on. those are all very far from being experimental.
And they are not even the only ones.
If something is not maintained anymore it means that the API won't change.
Aren't you happy? :). Anyway bugs can be fixed.

> There is a whole lot of methods which are not documented at all. Also,
> there is usually no comprehensive documentation for a specific
> functionality. Not to mention the annoying interface system which means
> the documentation for e.g. twisted.internet.reactor.ListenTCP is
> actually to be found elsewhere in the class hierarchy...

I can't see how looking inside twisted.internet.interfaces is so hard. Also
python is quite readable and twisted code is cleaner than the code of many
other projects. I've never found any problems with learning how something
works. And indeed I don't know how everything in twisted works. I often open
examples, then I open the source code and so on. We live in the open source
world. Use the Source Luke.

> As I said the problem is that it's not documented anywhere. That doesn't
> mean there isn't any reason, just that a normal developer cannot guess
> by himself. When I see a library with lots of design decisions for which
> I can't find any rationale, I'm legitimately suspicious (it could just
> be the NIH syndrome which we all know very well - since we have all one
> day fallen for it ;-)).

As Itamar said, twisted had logging long before python. Also design decisions
are easily understood by anybody that tried to do the same thing alone. Most
of the projects that deal with event loops are a simplified and poorer version
of twisted. Which means that in the end, if those projects are going to grow
in some way, it's very likely that they will use a similar approach. There is
no magic in Twisted, it's pure python that does what you tell it to, and very
well if I dare say.

> > PB is not proprietary... The protocol is documented (maybe it's the best
> > documented thing in twisted) and source code is available.
> 
> It is proprietary in the sense that it is, AFAIK, implemented only by
> Twisted.

There is a java implementation of pb in the cvs tree. And by this POV I could
say that also OpenDocument is proprietary because it is only implemented by
OpenOffice 2.0.

> Contrast this with e.g. XMLRPC which has lots of implementations. XMLRPC
> is quite mediocre, but at least I know that mostly everyone can find an
> implementation for his/her favourite programming language.

Nobody will tell you to use pb if you don't have the control on both sides of
the connection. NOBODY. What I've seen answered here many times is that you
should prefer pb, because it's better designed for python and for RMI, instead
of XML-RPC or SOAP. But that if you cannot choose what to use on the other
end, then you should stick to the other end choices, or implement pb in the
other language. newpb will make this a bit easier I guess.

> I won't ever use PB for something for which I want others to be able to
> write clients easily (without forcing them to use Twisted). It's a
> simple matter of simplifying interoperability. For some people/projects
> it matters very much, for others it doesn't matter at all.

And nobody has ever suggested to force twisted's pb upon umanity.

> There is a terminology problem, since I don't understand why something
> named "Protocol" should be destroyed at every connection. Or it should
> be, quite logically, renamed "Connection". Also this doesn't appear in
> the API docs (again).

What's the point in having a buildProtocol that re-creates a new protocol for
each connection then? How could the reactor know when to create new protocols
and when not? Why do you believe there is so much magic in twisted? A Protocol
is called like that because it implements a protocol. The fact that it lasts
as long as a connection (another object that already exists in twisted)
doesn't make it different than a protocol implementation.

> For me, a "protocol" is something like HTTP or SMTP. It is "eternal",
> I'm not expecting it to be created/destroyed at every connection (that
> would be like calling an int a float, or whatever).

It is eternal indeed. It's a class with some code in it. How much more
ethernal could you be? instances are created and destroyed for each
connection. Don't mix the things.

> There is no documentation on the magic that really happens when
> something is triggered (for example when a TCP session is established).
> Which methods are called, which objects are created, in which order,
> etc. Unexplained magic is annoying in software development.

In fact there is no magic, why should there be any documentation on something
that there isn't? A framework is cool because mostly you don't need to worry
about what happens below of the abstraction layer you are given.
Why do you think protocols have a connectionMade and a connectionLost method?
When are they called IYHO? Or lineReceived? Or dataReceived? Names are pretty
obvious, trying to put magic where it really isn't is what makes everything
harder. Like with deferreds. They are so simple, and require so little python
knowledge that they have been implemented in javascript too.

What's so hard in a list of functions that is called in a for loop once
their callback method is called?

When you start a TCP connection a socket is added to the reactor. That's all.
That socket has a related connection object that has a related protocol object
(the one you are supposed to write) and a related factory object (by default
unless you change it). data is read from the socket in chunks using the
FileDescriptor abstraction, then it is prepared for the handling of the
protocol that if needed will call the factory.

Pretty straight forward, and very likely what I would do If in the mood to
decide anything.

> It's not that I don't want to learn. It's that the more you use
> framework-specific constructs, and the higher level those constructs
> are, the more your software project is stuck with this framework and
> difficult to reuse/adapt/port/interoperate with. Of course, some
> projects (especially proprietary or internal ones) are less sensitive to
> this than others.

I can see no reason at all. Plenty of stuff in twisted is reusable from
somewhere else. But when coming to networking it just doesn't make any sense.
There is no better alternative, if any then I'm more than happy to look at it
and maybe start helping there instead of here. As all the frameworks when you
use it you are stuck with it. Even with libraries you are stuck with them.
Twisted changes something only because it is async, but that just have
nothing to do with the framework itself. Python sucks because it doesn't allow
async and sync programming style to be merged togheter, this would allow
higher reusability, with the risk of doing something without understanding it
at all. Like not understanding what happens between a:

page = client.getPage('url')

call and the subsequent:

parse(page)

What's the better? Explicit or implicit?

Do we want to talk about simplicity? Python subprocess module, compared to
twisted's reactor.spawnProcess simply sucks. Twisted allows you to open as
many FD's as you want to the child process. subprocess (just created for
python 2.4) only allows 3. I'm involved in a project that right now needs
signature verification and signature creation. We drive gnupg from python. The
twisted backend took less that 40 lines and 30 minutes, and it's perfectly
working.

My boss asked explicitly for a syncronous version of it. The only good
alternative (beyond writing it myself) is using subprocess. Now this took me
over 3 days (and I still need to pass one test) and more than 200 lines of
code. Deep magic and tricks (since I only have 3 FDs to the child process).

My boss has all the rights to ask for a sync version of course. But it's
just too much work, just to avoid using twisted for your very same reason.
Insted of speeding up the project it is just slowing it down.

If by being tied to twisted I gain 3 free payed days of work, then god bless
twisted and who cares if the project now depends on it. Don't you agree?

> Again, that does not change the fact that I'm quite happy with the parts
> of Twisted I do use. The simple notion of a Deferred (with its two
> callbacks) for example, is brilliant.

Most people find magic even in deferreds and start thinking of weird things
right there and stop using twisted only because of them. Just as you stop
using higher levels of twisted (which are the real jewels) only because you
fail to understand them and are not ready to take some time to read the
documentation (when there is) and the source code (which is there for a
reason otherwise twisted would just ship pyc or pyo and live prosper).

Also if you want documentation, start writing some and submit bugs of missing
documentation. We have very little time and most of the free time is already
busy fixing bugs in twisted (which, as all big projects, has bugs too). There
is a documentation team in twisted that was created with the only purpose of
fixing and completing documentation. During the last sprint work has been done
to make it even better. Just contribute, we do like your contributions to the
project and nobody will reject some more documentation. But just saying that
twisted is bad because it has few documentation and stop there, seems like
whining :).

Hope I've been not too harsh at as helpful and informative as possible.

-- 
Valentino Volonghi aka Dialtone
Now Running MacOSX 10.4
Blog: http://vvolonghi.blogspot.com
http://weever.berlios.de
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 186 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20051021/9a0ce03c/attachment.sig>

From golux at comcast.net  Thu Oct 20 18:38:00 2005
From: golux at comcast.net (Stephen Waterbury)
Date: Thu, 20 Oct 2005 20:38:00 -0400
Subject: [Twisted-Python] Freevo 2.0, Kamaelia, pyevent, Eventnet/LGT:
	what's going on?
In-Reply-To: <20051021001043.27584.1610137773.divmod.quotient.1920@ohm>
References: <20051021001043.27584.1610137773.divmod.quotient.1920@ohm>
Message-ID: <43583868.1040002@comcast.net>

Moe Aboulkheir wrote:
> On Fri, 21 Oct 2005 01:10:03 +0200, Antoine Pitrou <solipsis at pitrou.net> 
> wrote:
>> [PB] is proprietary in the sense that it is, AFAIK, implemented only by
>> Twisted.
> 
> here is a javascript implementation of PB: http://jspb.mozdev.org/.  and 
> a java one: http://www.itamarst.org/software/twistedjava/.  there is 
> also an objective caml port (cvs: 
> cvs.twistedmatrix.com/cvs/TwistedOCaml).  probably more that i am not 
> aware of.

In fairness to Antoine, those PB implementations are all by the Twisted
community, so although I disagree with his definition of "proprietary",
those aren't really counterexamples.

However, to me it is silly to criticize PB for having been invented
by the Twisted community and only (so far) having been implemented
there.  (BTW, there would probably be a Lisp implementation done
under NASA sponsorship if NASA was naive enough to trust me with
any more money -- which they don't! [U.S. taxpayers, be grateful!] ;)

I suspect that all worthwhile protocols begin life within a small
community of developers before being made into IETF RFC's or ISO stds
or whatever ... PB still has a little more maturing to do, although
it appears to be nearly ready for release into the wild (some might
say it's already living there ... :) to have more implementations.

Steve



From phil at bubblehouse.org  Thu Oct 20 18:46:49 2005
From: phil at bubblehouse.org (ph!l chr!stensen)
Date: Thu, 20 Oct 2005 20:46:49 -0400
Subject: [Twisted-Python] Freevo 2.0, Kamaelia, pyevent,
	Eventnet/LGT: what's going on?
In-Reply-To: <1129849803.5945.39.camel@fsol>
References: <43574D80.40801@tekNico.net> <1129823481.11151.13.camel@fsol>
	<20051020180943.GF9373@divmod.com> <1129849803.5945.39.camel@fsol>
Message-ID: <9D8CF089-A53D-488C-BF3B-669D673188C3@bubblehouse.org>

well, for some reason I'd like to add my 2/100ths of a dollar to this  
discussion...

On Oct 20, 2005, at 7:10 PM, Antoine Pitrou wrote:
> Oh, I have too. But only using the basic networking stuff, because I'm
> not confident enough to touch the high-level things.
>
> Parts of the Twisted API are marked as "API unstable". I don't think I
> dreamed it, since I've read it in the doc ;)
> Also I've seen several times some answers on this very list which were
> of the sort "actually this module is not maintained anymore" (or
> "experimental").
>

i can't see this as anything but a good thing. open source software  
is as much of a learning opportunity as a way to get good software  
without paying for it. since twisted is under continuous development  
(and always will be, i hope), there's always going to be material  
like this as part of the codebase.

i'd much rather have one more option to consider when implementing a  
system, even if it's not stable. as far as getting information about  
deprecated features after-the-fact, that's one of the (comparatively)  
small costs of using otherwise very robust open source software.

> There is a whole lot of methods which are not documented at all. Also,
> there is usually no comprehensive documentation for a specific
> functionality. Not to mention the annoying interface system which  
> means
> the documentation for e.g. twisted.internet.reactor.ListenTCP is
> actually to be found elsewhere in the class hierarchy...

this is another cost of having an excellent platform freely available  
to you, developed by people in what is usually spare time. the battle  
of document vs. implement has been raging in every serious  
programmer's mind as long as the craft has been around, and it's not  
going to stop any time soon.

then again, let's think of how often the first response to a new  
language or platform is 'well, let me see some sample code.' there's  
a reason for this, and it's that no amount of documentation is going  
to give you the necessary grasp on a complex system.

obviously this is an area where twisted needs improvement, but it's  
not alone in the open source world in this respect.

> It is proprietary in the sense that it is, AFAIK, implemented only by
> Twisted.
> Contrast this with e.g. XMLRPC which has lots of implementations.  
> XMLRPC
> is quite mediocre, but at least I know that mostly everyone can  
> find an
> implementation for his/her favourite programming language.
> I won't ever use PB for something for which I want others to be  
> able to
> write clients easily (without forcing them to use Twisted). It's a
> simple matter of simplifying interoperability. For some people/ 
> projects
> it matters very much, for others it doesn't matter at all.

well, not to mince words, but PB isn't proprietary in any sense,  
simply by definition. as far as xml-rpc is concerned, if you find it  
an acceptable replacement for PB, you probably didn't need to use PB  
in the first place.

personally, PB has saved me countless hours of coding when  
implementing complex client/server apps which must maintain state  
while providing two-way communication for (in my case) extensible  
protocols. as to whether i'm concerned about 'forcing' someone to use  
twisted to write their own client, it goes without saying that  
there's a myriad of other examples where you're required to implement  
clients or other modules in a particular language. at least PB gives  
you 2 choices, with more to come.

> There is a terminology problem, since I don't understand why something
> named "Protocol" should be destroyed at every connection. Or it should
> be, quite logically, renamed "Connection". Also this doesn't appear in
> the API docs (again).
>
> For me, a "protocol" is something like HTTP or SMTP. It is "eternal",
> I'm not expecting it to be created/destroyed at every connection (that
> would be like calling an int a float, or whatever).
>
> There is no documentation on the magic that really happens when
> something is triggered (for example when a TCP session is  
> established).
> Which methods are called, which objects are created, in which order,
> etc. Unexplained magic is annoying in software development.

again we're getting into matters of personal taste. first of all,  
Protocol should *not* be named connection, because that's not what it  
is. protocols happen 'above' the connection, and there's a host of  
other functionality that needs to be encapsulated in a connection  
object that have nothing to do with the protocol.

furthermore, there's no scenario where you can logically think a  
Protocol object represents the actual protocol itself, since protocol  
is by definition an intangible thing. if i have an instance of a  
Protocol object, it's not much of a stretch to assume that is an  
implementation. furthermore, as implementations of protocols are wont  
to behave differently for different clients, creating a worker object  
for each one makes plenty of sense to me.

> It's not that I don't want to learn. It's that the more you use
> framework-specific constructs, and the higher level those constructs
> are, the more your software project is stuck with this framework and
> difficult to reuse/adapt/port/interoperate with. Of course, some
> projects (especially proprietary or internal ones) are less  
> sensitive to
> this than others.

this is hardly relevant. this is an absolute fact of life in the  
software development world, and is definitely just as common during  
development of proprietary software as well as public projects. in fact,
i'd say the biggest problem with modern development practices is that  
there is too much fear of change. sometimes you make a bad design,  
and sometimes you choose an inappropriate 3rd party library.

however, it is your responsibility as a developer to research a  
project enough to make an informed decision. the only concern you  
should have is whether the framework works, and has a big enough  
community to support you.

the strongest card in twisted's deck is the community that is growing  
around it. i have never found any member of the twisted team  
unwilling to help with a problem, and there's never been a revision  
or refactoring that cost me more than a day's work to make  
adjustments for.

i've just completed work on a custom application for one of my  
clients who insisted upon a number of completely unreasonable time  
constraints for the project. twisted allowed me to complete this work  
well within my schedule, and provided me with a variety of 'free'  
features that are simply not available in other frameworks. in  
addition, i was able to get one of my coworkers up and running and  
collaborating with me, **despite the fact he had never even written a  
complete application in python**.

in the final analysis, a project like twisted is going to have the  
strongest appeal to a certain kind of programmer. if your first  
priority is to get the job done without regards to modularity or  
possibility of future expansion, and you don't want to take time  
becoming familiar with the very powerful but very complex twisted  
framework, then you are right to choose other APIs.

if, however, you are looking to add a tool to your kit that will  
serve you well time and time again, becoming involved with the  
twisted community and the framework it supports will only pay off for  
you.

it's a fact of life, you don't get something for nothing.

-phil



From grant at osafoundation.org  Thu Oct 20 19:03:05 2005
From: grant at osafoundation.org (Grant Baillie)
Date: Thu, 20 Oct 2005 18:03:05 -0700
Subject: [Twisted-Python] Freevo 2.0, Kamaelia, pyevent,
	Eventnet/LGT: what's going on?
In-Reply-To: <20051020235417.GW19919@trogdor.home.puzzling.org>
References: <43574D80.40801@tekNico.net> <1129823481.11151.13.camel@fsol>
	<20051020180943.GF9373@divmod.com> <1129849803.5945.39.camel@fsol>
	<20051020235417.GW19919@trogdor.home.puzzling.org>
Message-ID: <4F948079-6A4D-4AC7-9FBB-3CF3DBF4483E@osafoundation.org>

On Oct 20, 2005, at 16:54, Andrew Bennetts wrote:

>>
>> There is a terminology problem, since I don't understand why  
>> something
>> named "Protocol" should be destroyed at every connection. Or it  
>> should
>> be, quite logically, renamed "Connection". Also this doesn't  
>> appear in
>> the API docs (again).
>>
>
> ...
>
> As to why it's "Protocol" rather than "Connection"... that would be
> differently confusing :)
>
> The "connection" to me sounds like what the transport already is --  
> the
> thing responsible for taking bytes (or datagrams) from here and  
> sending them
> to there, and that you can disconnect, and so on.  In Twisted, the
> "Protocol" is the thing responsible for interpreting events from the
> underlying connection (and in most cases, doesn't care if the  
> underlying
> transport is TCP, SSL, UNIX domain sockets, or whatever -- how the  
> bytes are
> transported isn't its responsibility).

Speaking as someone who's done a bunch of network programming in a  
different environment (OS/X + Cocoa), I'm gonna pipe up @ this point  
and say one of the things I really liked as a complete newbie to  
Twisted was the Factory/Protocol/Transport separation (including the  
names of the classes). Maybe that's because I started with the Finger  
examples, which made things pretty clear IMHO.

--Grant

Grant Baillie
Open Source Applications Foundation
http://www.osafoundation.org






From solipsis at pitrou.net  Thu Oct 20 19:05:16 2005
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Fri, 21 Oct 2005 03:05:16 +0200
Subject: [Twisted-Python] Freevo 2.0, Kamaelia, pyevent, Eventnet/LGT:
	what's going on?
In-Reply-To: <20051021001921.GH9373@divmod.com>
References: <43574D80.40801@tekNico.net> <1129823481.11151.13.camel@fsol>
	<20051020180943.GF9373@divmod.com> <1129849803.5945.39.camel@fsol>
	<20051021001921.GH9373@divmod.com>
Message-ID: <1129856717.5945.78.camel@fsol>


Hi,

> I can't see how looking inside twisted.internet.interfaces is so hard. Also
> python is quite readable and twisted code is cleaner than the code of many
> other projects. I've never found any problems with learning how something
> works. And indeed I don't know how everything in twisted works. I often open
> examples, then I open the source code and so on. We live in the open source
> world. Use the Source Luke.

Understanding Python code is not very hard. But it merely tells me how
the thing works /now/. It doesn't tell me how it's supposed to work in
former/future versions, i.e. it doesn't give me a spec to program
against. I don't know which behaviour is an implementation detail and
which behaviour is part of the spec.

> Also design decisions
> are easily understood by anybody that tried to do the same thing alone. Most
> of the projects that deal with event loops are a simplified and poorer version
> of twisted.

Ok, but Twisted is much much more than a simple event loop.

> There is a java implementation of pb in the cvs tree. And by this POV I could
> say that also OpenDocument is proprietary because it is only implemented by
> OpenOffice 2.0.

Well, that is quite my opinion on OpenDocument right now. It is a
standard de jure, but de facto it is not interoperable at all (much less
than RTF or SXW). Of course we can be sure this will change for
OpenDocument, while this is less sure for PB (not the same
mindshare...).

> It is eternal indeed. It's a class with some code in it. How much more
> ethernal could you be? instances are created and destroyed for each
> connection.

When I write "class Protocol", it seems obvious that each instance would
be "a Protocol". The same way that if I write "class Truck", each
instance will be "a Truck". Not "a fragment of existence of a Truck
between two engine starts determined by an external Factory which is
semantically the real Truck".

Or, at least, it is the traditional "mind mapping" of object-oriented
models.

I'm not saying this is a blocking problem, just that in the absence of
any clarification it is very misleading.

> In fact there is no magic, why should there be any documentation on something
> that there isn't? A framework is cool because mostly you don't need to worry
> about what happens below of the abstraction layer you are given.

I don't agree. Using a framework without trying to understand (even
roughly) what happens underneath is very dangerous. For example using
Twisted without knowing (even roughly) how an event loop works in
practice would not be a good idea.

> Why do you think protocols have a connectionMade and a connectionLost method?
> When are they called IYHO?

That doesn't tell me a separate Protocol instance is created for each
connection. 
Having to rely on such "hints" is like playing Russian roulette.

Of course I took the simpler route of not caring /at all/ about it and
instead implementing all state and connection bookkeeping in my own
classes. Which means my Protocol/Factory classes are essentially empty.

> When you start a TCP connection a socket is added to the reactor. That's all.

That I understand perfectly :)

> But when coming to networking it just doesn't make any sense.
> There is no better alternative, if any then I'm more than happy to look at it
> and maybe start helping there instead of here. As all the frameworks when you
> use it you are stuck with it.

But at very different levels depending on your usage...
If I just use Twisted as a basis for having callbacks applied when an
UDP datagram is received, and handle all the rest by myself, it will not
be too difficult to change to another framework (assuming it allows
asynchronous-style programming of course ;)).
If on another hand I use the "full Monty" (twistd, PB, etc.), my app
will be very closely wired around Twisted and it will be very tedious to
rearrange it around another framework.

> Python sucks because it doesn't allow
> async and sync programming style to be merged togheter,

How do you want to merge them together ?
There has been various discussion on the Python-dev list and the general
sentiment has been "explicit is better than implicit". In other words,
don't make async tasks look like they are synchronous. I rather agree
with this. Too much magic often backfires brutally.

> Python subprocess module, compared to
> twisted's reactor.spawnProcess simply sucks. [...]
> My boss asked explicitly for a syncronous version of it.

Without knowing the precise problem to be solved, I'd say: launch the
Twisted event loop in a separate thread, and use threading.Condition to
signal the main thread. Or a subtle variation of it ;)

> But just saying that
> twisted is bad because it has few documentation and stop there, seems like
> whining :).

I've been using Twisted for one year and am generally satisfied with the
parts of it I've chosen to use. I was answering to the question of "what
people may find annoying in Twisted".

My advice is that you shouldn't take every criticism as just a proof of
laziness on the part of the critic. Even very terse critics like
"Twisted is a huge monster" can be valuable for you to guess what kind
of perception Twisted enjoys.

> Hope I've been not too harsh at as helpful and informative as possible.

That's fine.

Regards

Antoine.





From dialtone at divmod.com  Thu Oct 20 19:34:15 2005
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Fri, 21 Oct 2005 03:34:15 +0200
Subject: [Twisted-Python] Freevo 2.0, Kamaelia, pyevent,
	Eventnet/LGT: what's going on?
In-Reply-To: <1129856717.5945.78.camel@fsol>
References: <43574D80.40801@tekNico.net> <1129823481.11151.13.camel@fsol>
	<20051020180943.GF9373@divmod.com> <1129849803.5945.39.camel@fsol>
	<20051021001921.GH9373@divmod.com> <1129856717.5945.78.camel@fsol>
Message-ID: <20051021013415.GI9373@divmod.com>

On Fri, Oct 21, 2005 at 03:05:16AM +0200, Antoine Pitrou wrote:

> Understanding Python code is not very hard. But it merely tells me how
> the thing works /now/. It doesn't tell me how it's supposed to work in
> former/future versions, i.e. it doesn't give me a spec to program
> against. I don't know which behaviour is an implementation detail and
> which behaviour is part of the spec.

Point taken. But still this doesn't explain why few people submit bugs for
documentation and help in fixing them.

> Ok, but Twisted is much much more than a simple event loop.

Only because it has a lot of protocols already implemented, which you don't
use and hence make twisted a simple event loop from your perspective.

> Well, that is quite my opinion on OpenDocument right now. It is a
> standard de jure, but de facto it is not interoperable at all (much less
> than RTF or SXW). Of course we can be sure this will change for
> OpenDocument, while this is less sure for PB (not the same
> mindshare...).

Still it is Open and not proprietary.

> When I write "class Protocol", it seems obvious that each instance would
> be "a Protocol". The same way that if I write "class Truck", each
> instance will be "a Truck". Not "a fragment of existence of a Truck
> between two engine starts determined by an external Factory which is
> semantically the real Truck".

What does: 'a fragment of existence of a Truck' mean? Is lifetime specified in
the name? Do we need to change the name of a class depending on how long it
instances live?

Not at all.

A class is the type of something. Explains the behaviour and initial state of
a something, frozen in time. The fact that one particular instance (or even
all of them) survive only one connection has no reflection on the object
itself.

Also because protocol lifetime is also completely in your hands. By default it
only lasts one connection, you may keep it live for the whole application
life and even reuse it from the factory for later connections.

The protocol instance is created in the Factory. Twisted gives you the chance
to make decisions in that precise moment.

> I don't agree. Using a framework without trying to understand (even
> roughly) what happens underneath is very dangerous. For example using
> Twisted without knowing (even roughly) how an event loop works in
> practice would not be a good idea.

Understanding an event loop and how it is exposed to the user is part of the
abstraction level. You don't need to know that twisted buffers communication
or that it accepts 50 connections at a time. Except when you are really
dealing with that stuff. In which case this should be documented and maybe it
isn't as much. Yet for most cases you don't need to know those details.

> That doesn't tell me a separate Protocol instance is created for each
> connection. 
> Having to rely on such "hints" is like playing Russian roulette.

The fact that the factory is the thing that creates the protocol, and thus has
the main word on how long it will survive and how it will be used, should just
be a big alarm on that.

> Of course I took the simpler route of not caring /at all/ about it and
> instead implementing all state and connection bookkeeping in my own
> classes. Which means my Protocol/Factory classes are essentially empty.

This is indeed sad.

> If on another hand I use the "full Monty" (twistd, PB, etc.), my app
> will be very closely wired around Twisted and it will be very tedious to
> rearrange it around another framework.

Why? Things are never reusable in such an easy way.

> How do you want to merge them together ?
> There has been various discussion on the Python-dev list and the general
> sentiment has been "explicit is better than implicit". In other words,
> don't make async tasks look like they are synchronous. I rather agree
> with this. Too much magic often backfires brutally.

This is the future. Now it's different. And the future includes the ternary
operator (sigh).

> Without knowing the precise problem to be solved, I'd say: launch the
> Twisted event loop in a separate thread, and use threading.Condition to
> signal the main thread. Or a subtle variation of it ;)

Maybe. Still makes me sad though (more complexity instead of more simplicity,
as the boss hints for a reason to not use twisted, as you are hinting too).

> My advice is that you shouldn't take every criticism as just a proof of
> laziness on the part of the critic. Even very terse critics like
> "Twisted is a huge monster" can be valuable for you to guess what kind
> of perception Twisted enjoys.

There are criticisms and criticisms. Yours is very well accepted and will be
considered if it will end up in a bug submission or some help in fixing the
bugs you see in documentation. Just saying: 'there is few' doesn't help much,
maybe we already know that not everything is perfectly documented. Taking a
bit of your time to write a small summary of where the documentation is
lacking and a small comment on how to fix that instead will be answered and
fixed most probably.

HTH

-- 
Valentino Volonghi aka Dialtone
Now Running MacOSX 10.4
Blog: http://vvolonghi.blogspot.com
http://weever.berlios.de
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 186 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20051021/bb5cbcb5/attachment.sig>

From johann.borck at densedata.com  Thu Oct 20 21:33:48 2005
From: johann.borck at densedata.com (Johann Borck)
Date: Fri, 21 Oct 2005 05:33:48 +0200
Subject: was: Re: [Twisted-Python] Freevo 2.0, Kamaelia, pyevent, Eventnet/LGT:
	what's going on?
In-Reply-To: <43574D80.40801@tekNico.net>
References: <43574D80.40801@tekNico.net>
Message-ID: <4358619C.10307@densedata.com>

I feel like i have to make a statement ...
i've started to use twisted looking for alternatives to zope, and what i
found was the most exciting piece of art in source i ever had the honour
to be able to read. i don't know if i missed something, but to me there
seems to be nothing comparable. it's not the very easiest to understand
and get into, but i'm more than just glad that in almost any cases the
hard work has been done already when i decide to implement something
network-related, and am able to focus on what i want to do, not on how
and if it might be done.  since the existence of PB the question how to
get things working together over some distance, to me, is just answered 
- nothing is as straight and direct to the point, it's even hard for me
to think of something better, it's sad not to be a native speaker, i'd
like to find words matching it's elegance. and there's one more thing
about twisted, that's invaluable, the learning experience. if someone is
interested in network-programming, she can use C or Java or whatever,
and there's always the choice between high abstraction and low-level,
the choice between take what this or that can do for you, and do it
yourself from scratch. twisted gives the learner insight about the
low-level stuff while providing layers of abstraction up to the point,
where the only thing left to do is implementing the specific application
logic. just by reading twisted one can learn so much about
network-programming, from raw sockets over these incredible amounts of
protocols up to, name it, it get's absolutely countless taking divmod's
stuff into account. it's perfectly readable compared to anything i know,
even with some significant lack of documentation. to me it's a
revolution, the most ambitious, thoughtful, invaluable, let me say
beautiful project and way to get this world connected. twisted is
serious fun.
i always feel if only some more people knew about it (documentation),
people who decide about what framework to use for their large project,
twisted had to take off, python had to take its deserved place and so
on. twisted today is an import from future, if reason gets it's way..

regards and many thanks, Johann


Nicola Larosa wrote:

>One year ago the Freevo project, for its 2.0 rewrite, dropped Twisted, and
>then went and reimplemented something similar. Then there are Kamaelia,
>pyevent, and EventNet inside LGT.
>
>Why isn't Twisted seen, by these projects at least, as a viable tool? Is
>the event-driven Python world undergoing the same fragmentation as the web
>framework one?
>
>
>"Freevo is an open-source home theatre PC platform based on Linux and a
>number of open-source audio/video tools."
>
>http://freevo.sourceforge.net/about.html
>
>"CurrentStatus
>
>For Freevo 2.0 we changed many parts of the code...
>
>Changes
>
>* Changed the main loop to use PyNotifier. No threads are allowed anymore
>and every part must take care that the notifier loop is kept alive. Not all
>parts respect that right now.
>
>* Removed Twisted. It is a huge monster and hard to understand. For
>inter-process communication a python implementation (PyMbus) of the Mbus
>transport protocol is used. As a side effect, modules using twisted need to
>be rewritten."
>
>http://freevo.sourceforge.net/cgi-bin/freevo-2.0/CurrentStatus
>
>The reasons for the switch are outlined in this mailing list thread:
>
>switching to pynotifier and pymbus
>http://sourceforge.net/mailarchive/forum.php?thread_id=5523105&forum_id=9200
>
>Kamaelia
>http://kamaelia.sourceforge.net/
>
>pyevent
>http://monkey.org/~dugsong/pyevent/
>
>EventNet - LGT
>http://lgt.berlios.de/#eventnet
>
>  
>




From lycka at carmensystems.com  Fri Oct 21 06:12:09 2005
From: lycka at carmensystems.com (Magnus Lycka)
Date: Fri, 21 Oct 2005 14:12:09 +0200
Subject: [Twisted-Python] Win32 installers of Twisted 2.1?
In-Reply-To: <60ed19d40510190052q4873f5fq50ed2ef3e200cb48@mail.gmail.com>
References: <61DA7719C45FD31185280008C733EF6E04AC4FEA@XCHANGE>
	<60ed19d40510190052q4873f5fq50ed2ef3e200cb48@mail.gmail.com>
Message-ID: <4358DB19.4010901@carmensystems.com>

Christopher Armstrong wrote:

>
>It's a package containing Twisted and all subprojects.
>
...and Zope-Interface. At least the 2.0 sumo had that bundled.






From exarkun at divmod.com  Fri Oct 21 21:43:58 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Fri, 21 Oct 2005 23:43:58 -0400
Subject: [Twisted-Python] Solved? Or Not? testing my application
In-Reply-To: <200510201807.20029.Marcin.Kasperski@softax.com.pl>
Message-ID: <20051022034358.27584.870982174.divmod.quotient.2573@ohm>

On Thu, 20 Oct 2005 18:07:19 +0200, Marcin Kasperski <marcin.kasperski at softax.com.pl> wrote:
>> As one more attempt I just ugraded from twisted 1.3 to twisted
>> 2.0 (= from twisted version present in Debian testing to
>> twisted version present in Debian unstable).
>>
>> And now ........ the script which in 1.3 ignored errors but
>> worked, *hangs(, in exactly the same way in which it used to
>> hang when I used deferredResult.
>
>I found the solution. The following modification caused
>everything to work as expected
>
>    def setUp(self):
>        self.dbpool = adbapi.ConnectionPool('psycopg', DSN)
>        self.dbpool.start()
>        # ...
>
>(I added self.dbpool.start())
>
>Confusing part is that start method doc tells:
>
>            If you are using the reactor normally, this function
>            does *not* need to be called.
>
>So it seems trial is *not* using reactor 'normally' - whatever
>does it mean.

Indeed.  Hopefully this will be rectified at some future point, but it is difficult to fix for now, due to the way the vast majority of existing tests
are written, along with the desire to retain backwards compatibility.

Jp



From exarkun at divmod.com  Fri Oct 21 21:45:38 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Fri, 21 Oct 2005 23:45:38 -0400
Subject: [Twisted-Python] testing my application
In-Reply-To: <200510201605.09012.Marcin.Kasperski@softax.com.pl>
Message-ID: <20051022034538.27584.1730092673.divmod.quotient.2575@ohm>

On Thu, 20 Oct 2005 16:05:03 +0200, Marcin Kasperski <marcin.kasperski at softax.com.pl> wrote:
>Thanks for the info. Running tests vai 'trial test_x.foo' has unpleasant effect of not allowing debugging but simple trick works:
>   if __name__ == "__main__":
>      import twisted.scripts.trial
>      import sys
>      sys.argv = ['-m', 'my_test' ]
>      twisted.scripts.trial.run()
>(BTW, what about patching run so it could get parameters and fallback to argv only when they are not given?)

Just so you know, and in case anyone reading isn't familiar with it, trial has a debug mode.  If you pass the -b flag, it will automatically set up pdb, plus a couple other Twisted-specific features that come in fairly handy.  twistd also supports this, letting you break into pdb at any point while the app is running, and also stopping for unhandled errors.

Jp



From tv at twistedmatrix.com  Sat Oct 22 01:07:53 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Sat, 22 Oct 2005 10:07:53 +0300
Subject: [Twisted-Python] LDAP Checker
In-Reply-To: <869525070.20051020134929@gmail.com>
References: <869525070.20051020134929@gmail.com>
Message-ID: <4359E549.4070706@twistedmatrix.com>

Manuel Aristarán wrote:
> I'm learning Twisted, and already have a simple application
> running.
> I wante to experiment adding an LDAP checker to it. Is there any open
> source implementation of such a thing? I'm aware of LDAPtor, but I'm
> looking for some examples of integration with twisted.cred.

So you are _not_ aware of ldaptor.

ldaptor.checkers.LDAPBindingChecker is a Checker as used by
twisted.cred.



From Marcin.Kasperski at softax.com.pl  Sat Oct 22 15:20:59 2005
From: Marcin.Kasperski at softax.com.pl (Marcin Kasperski)
Date: Sat, 22 Oct 2005 23:20:59 +0200
Subject: [Twisted-Python] testing my application
In-Reply-To: <20051022034538.27584.1730092673.divmod.quotient.2575@ohm>
References: <20051022034538.27584.1730092673.divmod.quotient.2575@ohm>
Message-ID: <435AAD3B.1050600@softax.com.pl>


>
> Just so you know, and in case anyone reading isn't familiar with it, 
> trial has a debug mode.  If you pass the -b flag, it will 
> automatically set up pdb, plus a couple other Twisted-specific 
> features that come in fairly handy.  twistd also supports this, 
> letting you break into pdb at any point while the app is running, and 
> also stopping for unhandled errors.


I found it, but for not-so-hardcore python programmer, pdb is not the 
tool of the dreams. GUI Debugger (for instance one included in WingIDE 
or in Komodo or in Eric or ... is far more useful ....). And to use one 
it is necessary to start script within the debugger control, not to 
start debugger from trial.

And, as I started to talk about GUIs, it would be also nice to run 
unittests under GUI control (I love eric3-unittest - using it even when 
I am not using eric environment itself).



From Marcin.Kasperski at softax.com.pl  Sat Oct 22 15:24:44 2005
From: Marcin.Kasperski at softax.com.pl (Marcin Kasperski)
Date: Sat, 22 Oct 2005 23:24:44 +0200
Subject: [Twisted-Python] Solved? Or Not? testing my application
In-Reply-To: <20051022034358.27584.870982174.divmod.quotient.2573@ohm>
References: <20051022034358.27584.870982174.divmod.quotient.2573@ohm>
Message-ID: <435AAE1C.10002@softax.com.pl>


>> Confusing part is that start method doc tells:
>>
>>            If you are using the reactor normally, this function
>>            does *not* need to be called.
>>
>> So it seems trial is *not* using reactor 'normally' - whatever
>> does it mean.
>
>
> Indeed.  Hopefully this will be rectified at some future point, but it 
> is difficult to fix for now, due to the way the vast majority of 
> existing tests
> are written, along with the desire to retain backwards compatibility.

Maybe documentation could be slightly patched instead? Some sentence 
suggesting that one should call 'start' method if the application seem 
to hang could be added to the adbapi description... I must say (and you 
can see on this list ;-)) that for novice twisted programmer like me the 
whole thing was very confusing.



From jml at mumak.net  Sat Oct 22 15:59:30 2005
From: jml at mumak.net (Jonathan Lange)
Date: Sun, 23 Oct 2005 08:59:30 +1100
Subject: [Twisted-Python] testing my application
In-Reply-To: <435AAD3B.1050600@softax.com.pl>
References: <20051022034538.27584.1730092673.divmod.quotient.2575@ohm>
	<435AAD3B.1050600@softax.com.pl>
Message-ID: <d06a5cd30510221459k23a1a070w@mail.gmail.com>

On 23/10/05, Marcin Kasperski <Marcin.Kasperski at softax.com.pl> wrote:
> And, as I started to talk about GUIs, it would be also nice to run
> unittests under GUI control (I love eric3-unittest - using it even when
> I am not using eric environment itself).
>

Patience :)



From antonykummel at yahoo.com  Sun Oct 23 05:15:22 2005
From: antonykummel at yahoo.com (Antony Kummel)
Date: Sun, 23 Oct 2005 04:15:22 -0700 (PDT)
Subject: [Twisted-Python] twisted.python.log vs. standard logging module
Message-ID: <20051023111522.81923.qmail@web33904.mail.mud.yahoo.com>

Hi,

I'm looking for a discussion on this subject I once
saw where glyph lengthly elaborated on this matter.
I'm just trying to find some useful idioms for logging
my application, and I wonder why twisted doesn't have
logging levels etc. I remember that discussion made
some interesting phylosophical points, so if anyone
knows where it is...

Thanks,

Antony Kummel


		
__________________________________ 
Yahoo! FareChase: Search multiple travel sites in one click.
http://farechase.yahoo.com



From twisted at ralphm.ik.nu  Sun Oct 23 05:26:05 2005
From: twisted at ralphm.ik.nu (Ralph Meijer)
Date: Sun, 23 Oct 2005 13:26:05 +0200
Subject: [Twisted-Python] Twisted Jabber mailinglist
Message-ID: <20051023112605.GA3471@ik.nu>

Hi all,

Recently I set up a mailinglist [1,2] for Jabber development using Twisted. I
invited the developers from projects like pyMSNt, pyAIMt, pyICQt, PunJab
and Twibber and the list now has 15 members. I invite everyone who is
interested in Jabber development using Twisted to join.

Also, Jp released Twisted Words 0.3 that saw a restucturing of the
Jabber bits. The Twisted Xish project, that was changed in the same
restructuring, has been folded in Words now. Xish should be usuable for
non-Jabber XML streaming as well. I made a few comments and notes [3] on the
release and changes this on the new list.

[1] mailto:twisted-jabber at ik.nu
[2] https://mailman.ik.nu/mailman/listinfo/twisted-jabber
[3] https://mailman.ik.nu/pipermail/twisted-jabber/2005-October/000019.html

-- 
Groetjes,

ralphm



From nico at tekNico.net  Sun Oct 23 07:02:46 2005
From: nico at tekNico.net (Nicola Larosa)
Date: Sun, 23 Oct 2005 15:02:46 +0200
Subject: [Twisted-Python] Re: twisted.python.log vs. standard logging module
In-Reply-To: <20051023111522.81923.qmail@web33904.mail.mud.yahoo.com>
References: <20051023111522.81923.qmail@web33904.mail.mud.yahoo.com>
Message-ID: <djg1lm$edc$1@sea.gmane.org>

> I'm looking for a discussion on this subject I once
> saw where glyph lengthly elaborated on this matter.
> I'm just trying to find some useful idioms for logging
> my application, and I wonder why twisted doesn't have
> logging levels etc. I remember that discussion made
> some interesting phylosophical points, so if anyone
> knows where it is...

You're lucky, Glyph posted the link the other day:

http://twistedmatrix.com/bugs/issue307

-- 
Nicola Larosa - nico at tekNico.net

I've looked at life from both sides now
>From win and lose, and still somehow
It's life's illusions I recall
I really don't know life at all
 -- Joni Mitchell, Both sides now, Clouds, 1969




From glyph at divmod.com  Sun Oct 23 14:19:13 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Sun, 23 Oct 2005 16:19:13 -0400
Subject: [Twisted-Python] Twisted Jabber mailinglist
In-Reply-To: <20051023112605.GA3471@ik.nu>
Message-ID: <20051023201913.27584.1025925482.divmod.quotient.3107@ohm>



On Sun, 23 Oct 2005 13:26:05 +0200, Ralph Meijer <twisted at ralphm.ik.nu> wrote:
>Hi all,

>Recently I set up a mailinglist for Jabber development using Twisted.

Thanks for setting this up, Ralph.

>Also, Jp released Twisted Words 0.3 that saw a restucturing of the
>Jabber bits. The Twisted Xish project, that was changed in the same
>restructuring, has been folded in Words now. Xish should be usuable for
>non-Jabber XML streaming as well. I made a few comments and notes on the
>release and changes this on the new list.

I will subscribe soon, but I'm going to reply to the message that you linked to here, because it impacts other projects.

>Of course I hope that Xish is useful for non-Jabber use, too. If this
>happens, we might spin out Xish again. For now it doesn't really matter
>where it is, I guess.

Xish's utility is not at issue.  I think it's great that it's useful for non-jabber uses.  Guido's opinion [1] notwithstanding, Python is a framework [2] and so should each Twisted subprojects be.  I mentioned this in an earlier post [3] but as long as I'm talking I might as well explain a bit further.

There are a plethora of buggy, one-off libraries in the Python world that are not supported or tested because they don't have any user-facing tools which can be tested.  They're easy to write, and easy to release, but libraries should always be written in support of applications, not simply in the hopes they will be useful.  As Rails has famously declared, good frameworks are "extracted".

As an example of this, Twisted Matrix Labs' experience with distributing libraries has been, to put it politely, poor.  Aside from .xish, whose function was mainly to complicate t.words releases and installations, our other two libraries are .pair and .flow, both of which are pretty much useless to everyone but their respective authors and currently unmaintained.

Users of xish can easily install twisted.words, then import only xish.  Keep your import dependencies as clean as possible so that if they do this and then use a tool like freeze or py2exe, they won't suck in all of twisted.words by accident.  The rest of Twisted has been historically careful about this, because while I have encountered several situations where deployment footprint was a concern, I have yet to meet a developer whose hard drive was so full that they couldn't spare an additional 100k on their disk for a full subproject during installation.

The main message here is that each Twisted subproject should be a coherent whole that performs an actual function.  If .xish grew a tool for monitoring or transforming XML streams that would actually be useful to a reasonable-sized audience (i.e. not just for the author of the tool to test the library and not just so it can be split out ^_^), then it might be a good candidate for being split out into its own project again.

[1]: http://mail.python.org/pipermail/python-dev/2005-October/057486.html
[2]: http://www.twistedmatrix.com/users/glyph/rant/extendit.html
[3]: http://archives.free.net.ph/message/20050929.162612.040ae285.en.html



From mary-twisted at puzzling.org  Sun Oct 23 15:44:41 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Mon, 24 Oct 2005 07:44:41 +1000
Subject: [Twisted-Python] Twisted Jabber mailinglist
In-Reply-To: <20051023201913.27584.1025925482.divmod.quotient.3107@ohm>
References: <20051023112605.GA3471@ik.nu>
	<20051023201913.27584.1025925482.divmod.quotient.3107@ohm>
Message-ID: <20051023214441.GD25533@sourdust.home.puzzling.org>

On Sun, Oct 23, 2005, glyph at divmod.com wrote:
> Users of xish can easily install twisted.words, then import only xish.  

It would be useful to people who might want to do this though to
thoroughly advertise the existence of whatever incredibly useful
libraries you've developed as part of a subproject. At the moment
http://twistedmatrix.com/projects/words/ doesn't seem to be extolling
the virtues of xish: perhaps it should be?

At some point in the distant past (about a year ago actually, when I was
in Boston, so not that distant) there was talk of some kind of big
matrix, along the lines of "you want to do XML/SMTP/DNS... then look at
blah." Given the subproject philosophy Glyph outlined in the parent mail
this makes more sense, so I will probably branch something and bug
people to contribute descriptions of all their hidden little gems to it.

-Mary



From ms at cerenity.org  Sun Oct 23 21:22:16 2005
From: ms at cerenity.org (Michael)
Date: Mon, 24 Oct 2005 04:22:16 +0100
Subject: [Twisted-Python] Re: Freevo 2.0, Kamaelia, pyevent,
	Eventnet/LGT: what's going on?
Message-ID: <200510240422.16289.ms@cerenity.org>

Hi,


I've just come across this thread (unsubbed from the twisted list during 
EuroOSCON, just resubbed after a) getting back b) fixing my machine from a 
reiser corruption...).

Much as Johann Borck in the thread said "I feel like i have to make a 
statement ...", I feel it's probably worth putting in a tuppence worth on the 
Kamaelia comments in the thread. (If only to try and avoid negative 
misunderstandings. I suck though when I try to avoid misunderstandings 
though, so here's fingers crossed I don't cause any here ... )

Also, sorry for the length of this if it's too long. I could reply to the
comments in thread, but that might just cause a thread explosion. If this
is off topic, just delete. Next paragraph probably is probably a sufficient
summary :-)

Some clarification. First of all, I don't see Kamaelia as in competition with 
Twisted. Indeed, Kamaelia should be guttable (people are welcome to
do so), and we'd rather collaborate rather than compete. (I've never
understood the desire to compete in some open source projects, except
on a "for fun"/variety basis)

At all talks longer than my ill-advised lightning talk at Europython 2004 I've 
made it patently clear that I think that Twisted is best of breed in python 
for what it does. And not only that, damn fine at it as well.

The architecture in Kamaelia is however borne from a) working with
architectures similar to, but not quite identical to twisted and wondering
if b) *maybe* there's a better way. I'm not saying Kamaelia *is* that better
way (I'm too close to it), just an alternate approach. That said, if you're
trying an alternate approach, starting from scratch is one way of doing
so, and that's the simple reason we're not using Twisted :-)

After my talk at Europython 2004 I realised to my dismay that some people
mistook my viewpoint of *maybe* there being a better way (badly expressed
then as well :-( ) as being "Twisted sucks/is bad", which is far from the
truth.

Taking some specific points from the thread, which refer to the various 
projects:

Nicola Larosa nico at tekNico.net wrote:
> Why isn't Twisted seen, by these projects at least, as a viable tool? Is
> the event-driven Python world undergoing the same fragmentation as the web
> framework one?

1: Don't ask on the twisted list, ask the people who are running those
    projects :-) (I only discovered the thread because I was resubbing and
    wondered if I'd missed something)
2: We do view twisted as a viable tool. We're just trying something different.
    The "R" part of BBC R&D suggests that trying something different might
    occasionally be a good idea :-) (Then again it might not, experience is
    something you get after you needed it (maybe:) )
3: Kamaelia is much more dataflow driven between active objects rather than
    viewing the system as event driven. Sure, data delivery/receipt are
    clearly events, but that's used for optimisation rather than the core
    idea. (It's also based on recognising that some ways of viewing network
    systems look very similar to asynchronous hardware design)

Maybe they're just different mappings on the same problem space. If so, then 
maybe the different mapping might be a useful different way of looking at the 
problem. **Maybe**.

It's an interesting comment from Freevo's changelog:
   "It is a huge monster and hard to understand"

I think there's an element of truth in that to //any// sufficiently useful 
framework or library. It'd be nice if elements of Kamaelia were able to be 
gutted into twisted, *IF* they'd help with avoiding the above problem. (*IF*)
(A core aim in Kamaelia is to allow novices to get up to learn the core 
quickly)

Stefan Behnel wrote:
> Kamaelia ... is not as 'feature-complete'. So it may get ugly once it
> implements more features. That's a general problem

Indeed, this is possible. However, one interesting thing has shown up
recently - we appear to be converging towards something similar to
deferred generators. Specific example - ask the scheduler to run a
different generator in the place of the current generator, and return
control when done:
    yield WaitComplete(
          self.requestDisplay(DISPLAYREQUEST=True,
                              callback = (self,"control"),
                            size = (width, height),
                            position = self.position
                            )
    )

self.requestDisplay returns a generator, WaitComplete creates an
Axon.Ipc.WaitComplete message, which is passed to the scheduler which
runs it instead of the main component. This then isn't really a huge step to
deferreds/defgens. (If I understand those right) I'm not totally happy with 
the syntax above, and it's likely to change, but it's an initial step.

Itamar Shtull-Trauring itamar at itamarst.org 
> kamaelia: an experimental platform for what I hear are some interesting
> ideas we should look at; 

Please do. Tell us what sucks, take the good stuff. We'll then try and make 
the sucky stuff not suck and then take that :-)

Itamar Shtull-Trauring itamar at itamarst.org 
> probably would be a good candidate for running 
> on top of Twisted since they seem to deal with higher levels of
> abstraction mostly.

Agreed. Not immediately though, we're aiming for around 9-12 months from
now. We should either be running on top of twisted at that point, or side
by side with, or the other way round, or Kamaelia subsumed by something
else.

Antoine Pitrou solipsis at pitrou.net 
> (OTOH, I very briefly looked at Kamaelia's introduction doc and I don't
> find it attractive - this kind of dataflow-programming model looks quite
> unflexible)

I don't suppose you could follow up on that on the Kamaelia list could you?

Moe Aboulkheir moe at divmod.com 
>[ on PEP 342 potentially removing the reliance on frameworks for
>  accomplishing clean asychronous IO - libraries whose clients accrue
>  a dependency on a non-standard reactor/event loop/runtime/whatever
>  in order to operate. kamaelia probably doesn't fit into this category, i
>  wouldn't know. ] 

I think PEP 342 has the potential to simplify everyone's systems. At one point
Kamaelia components could just be run like any other generator. Since then
the dependency on the scheduler has grown somewhat. Prior to seeing this
post I'd already decided that we needed to regrow the earlier simplicity to
allow easier cherry picking by other projects.

Also, personally I'd hope that *if* a similar transform happening in Twisted,
PEP342 may result in is a WSGI for events type situation. That would probably
result in most networked apps being powered by Twisted on some level,
maybe composed in a Kamaelia style way, maybe not. (I've noted the
twisted community have a knack for taking an idea, turning it on it's
head and doing something cool with it :-) )

glyph at divmod.com glyph at divmod.com:

> Also, it gives the Twisted team some potential competition to focus on. 
> Possibly a source of motivation, and besides, everybody loves a race :). 

As long as it's a "Wacky Races" style of competition, I'm happy with Kamaelia
being competition. (Seriously though, Kamaelia is from a "what if", and 
hopefully scavengeable - either now or in future)

> Kamaelia seems more promising to me; I imagine that they might produce some
> serious competition eventually if that's what they aim to do.  

Only in terms of approach. Any sufficiently useful open source project is
easily consumable by another. (Being served up for dinner and eaten is
the ultimate success IMO) I do aim it to be a useful alternative way of 
thinking about problems similar to those that twisted thinks about.

I saw your post here http://www.livejournal.com/users/glyf/41709.html , and
it struck me as interesting. Essentially part of the comments appear to reuse
of generators, which strikes a chord (largely because that's how hardware
would have to work, and Kamaelia's core is based on asynchronous hardware
design[*] ). Again, if we do head down that route (depends on resources, etc),
then I'd hope people feel happy to rip out code where needed.

   [*] Whilst Kamaelia has no chance at present of compiling to silicon,
         things like MyHDL give me hope that it could be possible someday,
         and in that scenario, you need a system similar to the one you
         described.

> However, they claim that only the "Axon" part of their project is stable,
> and that doesn't yet include anything that does select().   

We consider Axon to be API stable (ie stuff that's there is not likely to be 
removed). Axon is designed to be a small framework for handling concurrency, 
communications and composition between (mainly) generators, and threads
have recently been introduced as well. By itself, Axon is intended to be
very, very boring. The instant it's not being boring (such as doing a
select, or poll, or ...) it's doing too much :-)

As a result Axon's version number reflects what we think about it's stability.
The reason for the jump from 1.0.X to 1.1.X was due to threaded components.
(These were added earlier than expected due to a need for threaded
components on Nokia mobiles, and have a suboptimal implementation and
API right now.)

The bulk of Kamaelia however is a collection of components, which is growing
and we can do a large variety of Stuff.

However, we still think (despite having used Kamaelia now for some time), that 
the collection of components we have at present is incomplete (around 30% of 
what would be needed generally speaking), and that the API for the components 
(specifically which inboxes/outboxes they have, names of components, file 
hierarchy etc), is still in flux.  

This collection of Stuff is being driven by application spikes, in application 
areas which are off the beaten track from the project's main goal (to round 
out the system), as well as in the main project goal area. So far this is 
proving to be an interesting approach.

As a result we do have things like TCP server/client components, a selector 
component (which advertises itself as a service internally) which manages a 
select subsystem (which we're thinking of farming off into a thread to allow 
the entire system to sleep waiting for it), pygame Stuff, Tk Stuff, and so 
on. The latest application spike was a simple paint program for example, 
which was useful for testing a variety of subsystems. Similarly for the 
presentation tool spike.

However, the low version number (currently) 0.3.0 is really to act as a 
warning "we still expect quite a lot to change before we hit 1.0.0". I could 
wax lyrical on that, but will only do so if people are interested :) However 
the reason it's 0.3.0, is because at minimum:
   * We want to have sensible integration with twisted (ie Kamaelia usable in
      twisted or vice versa) when we hit 1.0.0
   * There's a whole bunch of core ideas we want to extend before then,
      including the graphical editting toolset.
   * We know we're just skimming the surface of possible components and
      systems (despite the amount of stuff we /can/ do). The component set
      needs to be fleshed out more before we know if the approach has
      worth. (It feels like it to me at present, but then I'm biassed)

That said, generally, things are more stable than unstable, though currently I 
prefer to play up the instability to allow more freedom to experiment with 
APIs and ideas in the short/medium term.

Anyway, I hope that this mail assures everyone on the twisted list (who was 
worried - struck me as a minority) that we're not really in /competition/,
but more looking at providing /options/ for everyone, including Twisted :-)

So far we're finding our approach useful and fun, which at the end of the
day is all that matters. (For work the former is important, if it was just my
personal time, then it could be either :-)

Best Regards,


Michael.
--
Michael.Sparks at rd.bbc.co.uk, http://kamaelia.sourceforge.net/ 
British Broadcasting Corporation, Research and Development 
Kingswood Warren, Surrey KT20 6NP 
 
This message (and any attachments) may contain personal views 
which are not the views of the BBC unless specifically stated.



From jml at mumak.net  Mon Oct 24 01:25:37 2005
From: jml at mumak.net (Jonathan Lange)
Date: Mon, 24 Oct 2005 18:25:37 +1100
Subject: [Twisted-Python] Twisted Jabber mailinglist
In-Reply-To: <20051023201913.27584.1025925482.divmod.quotient.3107@ohm>
References: <20051023112605.GA3471@ik.nu>
	<20051023201913.27584.1025925482.divmod.quotient.3107@ohm>
Message-ID: <d06a5cd30510240025x4c33256m@mail.gmail.com>

On 24/10/05, glyph at divmod.com <glyph at divmod.com> wrote:
> The main message here is that each Twisted subproject should be a coherent whole that performs an actual function.  If .xish grew a tool for monitoring or transforming XML streams that would actually be useful to a reasonable-sized audience (i.e. not just for the author of the tool to test the library and not just so it can be split out ^_^), then it might be a good candidate for being split out into its own project again.
>

You know, by these standards, Trial is a good candidate for being
split out into its own project.

Now, sceptics might say, "ahh, but does not core depend on Trial?". 
To which I would say, "No it doesn't".

cheers,
jml



From tv at twistedmatrix.com  Mon Oct 24 05:46:01 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Mon, 24 Oct 2005 14:46:01 +0300
Subject: [Twisted-Python] Twisted Jabber mailinglist
In-Reply-To: <20051023201913.27584.1025925482.divmod.quotient.3107@ohm>
References: <20051023201913.27584.1025925482.divmod.quotient.3107@ohm>
Message-ID: <435CC979.1080809@twistedmatrix.com>

glyph at divmod.com wrote:
> As an example of this, Twisted Matrix Labs' experience with distributing
> libraries has been, to put it politely, poor.  Aside from .xish, whose
> function was mainly to complicate t.words releases and installations,
> our other two libraries are .pair and .flow, both of which are pretty
> much useless to everyone but their respective authors and currently
> unmaintained.

I fully expect twisted.pair to not release again without major changes.
I feel the biggest reason it needed to be split from twisted.core was to
give it a way to die.

I will pick up twisted.pair (whether with that name or something else,
whether as part of twisted or not) only when I get back to writing some
DHCP code. Which is not likely to happen soon. Anyone suffering too
badly from ISC, feel free to sponsor the work.



From jml at mumak.net  Mon Oct 24 21:19:40 2005
From: jml at mumak.net (Jonathan Lange)
Date: Tue, 25 Oct 2005 14:19:40 +1100
Subject: [Twisted-Python] Twisted Jabber mailinglist
In-Reply-To: <d06a5cd30510240025x4c33256m@mail.gmail.com>
References: <20051023112605.GA3471@ik.nu>
	<20051023201913.27584.1025925482.divmod.quotient.3107@ohm>
	<d06a5cd30510240025x4c33256m@mail.gmail.com>
Message-ID: <d06a5cd30510242019o2e6d8318r@mail.gmail.com>

On 24/10/05, Jonathan Lange <jml at mumak.net> wrote:
> On 24/10/05, glyph at divmod.com <glyph at divmod.com> wrote:
> > The main message here is that each Twisted subproject should be a coherent whole that performs an actual function.  If .xish grew a tool for monitoring or transforming XML streams that would actually be useful to a reasonable-sized audience (i.e. not just for the author of the tool to test the library and not just so it can be split out ^_^), then it might be a good candidate for being split out into its own project again.
> >
>
> You know, by these standards, Trial is a good candidate for being
> split out into its own project.
>
> Now, sceptics might say, "ahh, but does not core depend on Trial?".
> To which I would say, "No it doesn't".
>

Seriously, why don't we release Trial as a separate project?



From exarkun at divmod.com  Mon Oct 24 22:03:30 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 25 Oct 2005 00:03:30 -0400
Subject: separate trial release (was Re: [Twisted-Python] Twisted Jabber
	mailinglist)
In-Reply-To: <d06a5cd30510242019o2e6d8318r@mail.gmail.com>
Message-ID: <20051025040330.27584.415177063.divmod.quotient.3603@ohm>

On Tue, 25 Oct 2005 14:19:40 +1100, Jonathan Lange <jml at mumak.net> wrote:
>On 24/10/05, Jonathan Lange <jml at mumak.net> wrote:
>> On 24/10/05, glyph at divmod.com <glyph at divmod.com> wrote:
>> > The main message here is that each Twisted subproject should be a coherent whole that performs an actual function.  If .xish grew a tool for monitoring or transforming XML streams that would actually be useful to a reasonable-sized audience (i.e. not just for the author of the tool to test the library and not just so it can be split out ^_^), then it might be a good candidate for being split out into its own project again.
>> >
>>
>> You know, by these standards, Trial is a good candidate for being
>> split out into its own project.
>>
>> Now, sceptics might say, "ahh, but does not core depend on Trial?".
>> To which I would say, "No it doesn't".
>>
>
>Seriously, why don't we release Trial as a separate project?

Passing unit tests would be a good start towards that ;)

Seriously: leaving twisted.protocols.loopback aside, I still think Core depends on Trial because Trial is how you can *tell* if Core is working: you run its tests.

So Core depends on Trial, and Trial depends on core.  If you must have both installed for either to work, is there really a benefit to packaging them separately?  If you can suggest some other way to demonstrate that a Core install works, maybe you can convince me releasing trial separately has a purpose.

Jp



From andrew-twisted at puzzling.org  Mon Oct 24 22:42:24 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 25 Oct 2005 14:42:24 +1000
Subject: separate trial release (was Re: [Twisted-Python] Twisted Jabber
	mailinglist)
In-Reply-To: <20051025040330.27584.415177063.divmod.quotient.3603@ohm>
References: <d06a5cd30510242019o2e6d8318r@mail.gmail.com>
	<20051025040330.27584.415177063.divmod.quotient.3603@ohm>
Message-ID: <20051025044224.GA9109@trogdor.home.puzzling.org>

On Tue, Oct 25, 2005 at 12:03:30AM -0400, Jean-Paul Calderone wrote:
[...]
> >Seriously, why don't we release Trial as a separate project?
> 
> Passing unit tests would be a good start towards that ;)
> 
> Seriously: leaving twisted.protocols.loopback aside, I still think Core 
> depends on Trial because Trial is how you can *tell* if Core is working: 
> you run its tests.

I disagree.  If someone wrote some sort of really shiny debugger that worked
really nicely with Twisted, and so was very helpful as a development tool
for hacking on Twisted, I don't think it would qualify as a dependency of
core.  Much the same way that emacs/vim, epydoc, manhole, and who knows what
else aren't dependencies.

Trial is a valuable tool that all developers almost certainly should have
installed.  That doesn't mean it's a dependency in any useful technical
sense: I can happily delete twisted/trial and still have all my
twisted-using applications I've written or downloaded still work.

The fact that Trial is so clearly of use to other projects in exactly the
same way that it's of use to core is another reason to have it seperate.

Trial and the rest of core are clearly developing at different rates, so
there's possibly even some benefit from decoupling their releases.

So I think if Jonathan wants to release it seperately, I'm happy to let him.

-Andrew.




From glyph at divmod.com  Tue Oct 25 01:04:01 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 25 Oct 2005 03:04:01 -0400
Subject: separate trial release (was Re: [Twisted-Python] Twisted Jabber
In-Reply-To: <20051025044224.GA9109@trogdor.home.puzzling.org>
Message-ID: <20051025070401.27584.41267374.divmod.quotient.3645@ohm>



On Tue, 25 Oct 2005 14:42:24 +1000, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:

>The fact that Trial is so clearly of use to other projects in exactly the
>same way that it's of use to core is another reason to have it seperate.
>
>Trial and the rest of core are clearly developing at different rates, so
>there's possibly even some benefit from decoupling their releases.
>
>So I think if Jonathan wants to release it seperately, I'm happy to let him.

Overall I'm a bit reluctant to spin out more new projects right now, but this actually sounds like a pretty compelling case to me.

However, a point in JP's favor: there are source files distributed with core (twisted/test/*) that *import* code from Trial.  Test cases seem to be, in every sense, a bit of a gnarly special case.

Is there anything other than test cases where you think imports are *not* counted as a dependency?



From Marcin.Kasperski at softax.com.pl  Tue Oct 25 01:45:41 2005
From: Marcin.Kasperski at softax.com.pl (Marcin Kasperski)
Date: Tue, 25 Oct 2005 09:45:41 +0200
Subject: separate trial release (was Re: [Twisted-Python] Twisted Jabber
In-Reply-To: <20051025070401.27584.41267374.divmod.quotient.3645@ohm>
References: <20051025070401.27584.41267374.divmod.quotient.3645@ohm>
Message-ID: <435DE2A5.3010603@softax.com.pl>

> However, a point in JP's favor: there are source files distributed 
> with core (twisted/test/*) that *import* code from Trial.  Test cases 
> seem to be, in every sense, a bit of a gnarly special case.
>
testcases are not necessary for production installation, just as 
technical docs are. In fact testcases, trial, docs etc are 
developer-environment tools, not production-environment tools.

Maybe it could make sense to distribute:
- twisted-core - bunch of libraries performing the twisted job
- twisted-dev - trial, testcases, docs etc




From tv at twistedmatrix.com  Tue Oct 25 04:41:40 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Tue, 25 Oct 2005 13:41:40 +0300
Subject: separate trial release (was Re: [Twisted-Python] Twisted Jabber
In-Reply-To: <435DE2A5.3010603@softax.com.pl>
References: <20051025070401.27584.41267374.divmod.quotient.3645@ohm>
	<435DE2A5.3010603@softax.com.pl>
Message-ID: <435E0BE4.2020807@twistedmatrix.com>

Marcin Kasperski wrote:
>> However, a point in JP's favor: there are source files distributed
>> with core (twisted/test/*) that *import* code from Trial.  Test cases
>> seem to be, in every sense, a bit of a gnarly special case.
> testcases are not necessary for production installation, just as
> technical docs are. In fact testcases, trial, docs etc are
> developer-environment tools, not production-environment tools.

I consider running unit tests an essential part of the build process.
Thus, in my eyes twisted-core has a build-time dependency on trial, even
if it doesn't have a runtime dependency.



From antonykummel at yahoo.com  Tue Oct 25 06:19:43 2005
From: antonykummel at yahoo.com (Antony Kummel)
Date: Tue, 25 Oct 2005 05:19:43 -0700 (PDT)
Subject: [Twisted-Python] Thoughts about testing
Message-ID: <20051025121943.431.qmail@web33909.mail.mud.yahoo.com>

Hi all,

I just want to share some ideas that I have had.

>From my experience, testing with Trial is too hard. My
problems can be divided into three categories: 1.
obscure error reporting, 2. unclean reactor 3. whoop
whoop whoop. 

I am also pretty sure that I'm doing things that Trial
does not want me to do, such as actually opening
sockets and communication over the network. I'm saying
this because it does not seem to happen in the Twisted
test-suite. But I don't think there is a good reason
for this limitation.

Actually, in sum, I think there are too many
limitations on writing tests with Trial, and they all
boil down to the unclean reactor problem (or at least
most of them). I want to suggest an alternative
approach.

How about not requiring the reactor to be clean at the
end of a test? If anyone wants to make sure that
anything they do leaves the reactor in a clean state,
they can test for it themselves. This seems to me more
like a constraint imposed by the implementation of
Trial rather than a useful feature. Also, parts of
Twisted itself are practically unusable inside a test
because they leave the reactor dirty (such as threaded
address resolution). An alternative feature could be
enabling the user to specify that a certain delayed
call or thread is allowed to remain after the test,
and then Trial won't complain. The only question
remaining is how to do it. Simple: use a different
process. Run the tests in a different process, and
create a new one each time the reactor is dirtied.
py.execnet is a nice example of this concept.

The second thought is this: there seem to be popping
up different testing toolkits each with their own very
nice extensions and features
(http://testoob.sourceforge.net/,
http://codespeak.net/py/current/doc/test.html). Trial
cannot benefit from this, having branched away at the
pyUnit level. I think Trial's special features can be
relatively easily formulated as plugins to a
plugin-oriented testing framework (especially if the
clean reactor requirement is relieved), and so can the
other testing packages. What this means, is that the
best thing anyone who wants the world of unit testing
to develop, and to benefit from it, is to push for a
plugin-oriented pyUnit, and for an implementation of
Trial (and the other tools) as a plugin for that
framework. I think.

Any comments?

Antony Kummel


		
__________________________________ 
Yahoo! FareChase: Search multiple travel sites in one click.
http://farechase.yahoo.com



From eric.basley at dexia-securities.fr  Tue Oct 25 07:03:31 2005
From: eric.basley at dexia-securities.fr (Eric Basley)
Date: Tue, 25 Oct 2005 15:03:31 +0200
Subject: [Twisted-Python] Life cycle of ApplicationServices
Message-ID: <435E2D23.50903@dexia-securities.fr>

I'm writting a FIX (Financial Information Exchange) application with 
Twisted with the target to compete with quickfix. I'm very close,  
everything is perfect except the way to control life cycle of services.
Let's take an example :
The FIX main application is an engine able to manage many FIX sessions 
and is controled by web services. A session may act as a TCP server or 
client. Sessions have starting time and stopping time. For a client 
session I'm using a protocol.ReconnectingClientFactory. With 
Twisted-2.0.1 there is no way to stop properly a service and there  is 
no way to destroy  (factory, protocol, connector, ...) associated to the 
service.
Does someone have solutions about clean life cycle management ?
regards.
eric basley



From y.glodt at sitasoftware.lu  Tue Oct 25 07:05:17 2005
From: y.glodt at sitasoftware.lu (Yves Glodt)
Date: Tue, 25 Oct 2005 15:05:17 +0200
Subject: [Twisted-Python] ssh tunnel
Message-ID: <435E2D8D.4090800@sitasoftware.lu>

Hi,

I'm new to conch and I wonder if somebody could point me to an example 
of how to create an ssh tunnel with conch to forward a connection (e.g. 
database or vnc) through that tunnel (if that's possible at all...)


Thanks in advance and best regards,
Yves




From phil at bubblehouse.org  Tue Oct 25 09:05:21 2005
From: phil at bubblehouse.org (Phil Christensen)
Date: Tue, 25 Oct 2005 11:05:21 -0400
Subject: [Twisted-Python] question about threading
Message-ID: <ED54CBDE-54CF-43A9-82AF-1B157A1F17FE@bubblehouse.org>

hey folks,

i've got a quick question for anyone that can help me out. i'm also  
in the process of looking this up in the twisted docs/code, but this  
is some last minute coding for a big demo tomorrow, so i'm hedging my  
bets by posting here.

i've got a relatively simple async twisted server that has a custom  
protocol. most everything the server needs to do on a receipt of a  
message is short running, but i have one task that isn't.

i need to spawn a thread that executes a couple of binaries (html2ps  
and ps2pdf) which are generally long-running. after executing those  
binaries, i need to send a message back to the client that sent the  
original command to generate the pdf. i tried just creating a basic  
thread that holds onto a reference to the client object, but it  
doesn't seem to send the command back to the client until i send  
another message to the server (any kind of message).

i know there's a bunch of reactor methods that deal with threads, but  
i've never used them before, and i'm not sure which one will fix this  
issue.

here's my thread subclass:

class PDFGenerator(threading.Thread):
     def __init__(self, client):
         threading.Thread.__init__(self)
         self.client = client

     def run(self):
         pres = event.getActivePresentation()
         t = datetime.datetime.now()
         base_name = 'sample-file-name'
         out_html = file('/tmp/' + base_name + '.html', 'w')
         # [snip snip snip]
         # write some html to the file
         out_html.close()
         os.system('html2ps /tmp/' + base_name + '.html > /tmp/' +  
base_name + '.ps')  # > /tmp/' + base_name + '_ps.log')
         os.system('mkdir data/transcripts/' + str(pres.id))
         os.system('ps2pdf /tmp/' + base_name + '.ps data/ 
transcripts/' + str(pres.id) + '/' + base_name + '.pdf > /tmp/' +  
base_name + '_pdf.log')
         lock = threading.Lock()
         lock.acquire()
         self.client.sendCommand('presentTranscript', ['/ 
transcripts/' + str(pres.id) + '/' + base_name + '.pdf'])
         lock.release()


the client object holds a reference to the protocol object, and  
sendCommand basically just executes:

         print "Sending " + message + " to " + str(self.protocol.source)
         self.protocol.transport.write(message + "\0")


i made sure to set the lock, but i think the problem is in how i'm  
using threads. the clue i'm seeing is that in the log, i see the  
following:

2005/10/25 10:40 EDT [SSProtocol,25,127.0.0.1] Got generateTranscript 
('') from IPv4Address(TCP, '127.0.0.1', 49179)
2005/10/25 10:40 EDT [-] Sending presentTranscript,/transcripts/ 
phil_bubblehouse.org_2005-10-25-10-40-13.pdf to IPv4Address(TCP,  
'127.0.0.1', 49179)

you can see that the second log entry doesn't print the protocol  
object that's generating the message.

i know there's something simple i'm not doing; any help would be  
appreciated.

-phil




From phil at bubblehouse.org  Tue Oct 25 09:20:46 2005
From: phil at bubblehouse.org (Phil Christensen)
Date: Tue, 25 Oct 2005 11:20:46 -0400
Subject: [Twisted-Python] question about threading
In-Reply-To: <ED54CBDE-54CF-43A9-82AF-1B157A1F17FE@bubblehouse.org>
References: <ED54CBDE-54CF-43A9-82AF-1B157A1F17FE@bubblehouse.org>
Message-ID: <DA62EF80-24DE-4D65-856A-CE69D3540EE0@bubblehouse.org>

well, as it turns out, the documentation helped me out on that one.  
thanks anyways, though...

-phil

On Oct 25, 2005, at 11:05 AM, Phil Christensen wrote:

> hey folks,
>
> i've got a quick question for anyone that can help me out. i'm also  
> in the process of looking this up in the twisted docs/code, but  
> this is some last minute coding for a big demo tomorrow, so i'm  
> hedging my bets by posting here.




From itamar at itamarst.org  Tue Oct 25 09:27:30 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 25 Oct 2005 11:27:30 -0400
Subject: [Twisted-Python] Life cycle of ApplicationServices
In-Reply-To: <435E2D23.50903@dexia-securities.fr>
References: <435E2D23.50903@dexia-securities.fr>
Message-ID: <1130254051.9200.5.camel@localhost.localdomain>

On Tue, 2005-10-25 at 15:03 +0200, Eric Basley wrote:

> The FIX main application is an engine able to manage many FIX sessions 
> and is controled by web services. A session may act as a TCP server or 
> client. Sessions have starting time and stopping time. For a client 
> session I'm using a protocol.ReconnectingClientFactory. With 
> Twisted-2.0.1 there is no way to stop properly a service and there  is 
> no way to destroy  (factory, protocol, connector, ...) associated to the 
> service.

Services (I assume you're using twisted.application.service here) are
meant typically for "persistent" objects, encapsulating a specific
system's business logic. In some cases this might be a thin wrapper
around factory, but if you are opening many short-lived connections you
probably don't want to encapsulate as a service. For example, a Web
crawler might be a service - you can start and stop it, configure where
it goes; the specific HTTP connections it manages shouldn't be services.





From glyph at divmod.com  Tue Oct 25 09:27:51 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 25 Oct 2005 11:27:51 -0400
Subject: [Twisted-Python] question about threading
In-Reply-To: <ED54CBDE-54CF-43A9-82AF-1B157A1F17FE@bubblehouse.org>
Message-ID: <20051025152751.10365.1329181428.divmod.quotient.6@ohm>



On Tue, 25 Oct 2005 11:05:21 -0400, Phil Christensen <phil at bubblehouse.org> wrote:
>hey folks,

Let me start from the other end of your message:

>the client object holds a reference to the protocol object, and  sendCommand 
>basically just executes:
>
>         print "Sending " + message + " to " + str(self.protocol.source)
>         self.protocol.transport.write(message + "\0")
          ^
The reactor is not thread safe, and thus this call to 'write' has undefined (and bad) behavior.  You _MUST_ use the reactor thread APIs; they're not optional conveniences, they're the only way you can use threads with Twisted :)

>i need to spawn a thread 

danger, danger will robinson.  Here is where your trouble started :).  Actually you *don't* need to spawn a thread, you need to spawn a process - twisted supports processes - and I can't guarantee that os.system will work properly from within a Twisted application.  Handling of SIGCHILD has proven to be a sticky wicket in the past.

>i know there's a bunch of reactor methods that deal with threads, but  i've 
>never used them before, and i'm not sure which one will fix this  issue."

There are really only 2: callInThread and callFromThread.  There is a convenience API, twisted.internet.threads.deferToThread, which might be what you wanted, if what you wanted was in fact a thread.  However, you want spawnProcess in any event.  As I said, os.system may not work at _all_ from within Twisted, depending on your operating system.

>here's my thread subclass:

Don't subclass thread.  Twisted implements its own threadpool; use callInThread with what used to be your 'run' function.

>     def run(self):
>         pres = event.getActivePresentation()
>         t = datetime.datetime.now()
>         base_name = 'sample-file-name'
>         out_html = file('/tmp/' + base_name + '.html', 'w')
>         # [snip snip snip]
>         # write some html to the file
>         out_html.close()
          ^

          This bit could actually be threaded, if it's slow and blocking.  My suggestion: If it's for a demo, just block.

>         os.system('html2ps /tmp/' + base_name + '.html > /tmp/' +  base_name 
>+ '.ps')  # > /tmp/' + base_name + '_ps.log')

Since reactor.spawnProcess might be a bit tedious for simply running this here, try this:

          twisted.internet.utils.getProcessOutput('/usr/bin/html2ps', ['html2ps', ...).addCallback(keepGoing)

>         os.system('mkdir data/transcripts/' + str(pres.id))
          ^ UGH!  Why are you spawning another process here??  os.mkdir, please.
          
>         os.system('ps2pdf /tmp/' + base_name + '.ps data/ transcripts/' + 
>str(pres.id) + '/' + base_name + '.pdf > /tmp/' +  base_name + '_pdf.log')
          ^ Another getProcessOutput here.  Return the resultant Deferred from within your keepGoing callback...

>         lock = threading.Lock()
>         lock.acquire()
          ^ Hooray, now you can forget about this garbage

>         self.client.sendCommand('presentTranscript', ['/ transcripts/' + 
>str(pres.id) + '/' + base_name + '.pdf'])
>         lock.release()
          ^ Do this in the final callback of the Deferred that you've just created.

I hope this helped.



From itamar at itamarst.org  Tue Oct 25 09:32:16 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 25 Oct 2005 11:32:16 -0400
Subject: [Twisted-Python] question about threading
In-Reply-To: <ED54CBDE-54CF-43A9-82AF-1B157A1F17FE@bubblehouse.org>
References: <ED54CBDE-54CF-43A9-82AF-1B157A1F17FE@bubblehouse.org>
Message-ID: <1130254336.9200.11.camel@localhost.localdomain>

On Tue, 2005-10-25 at 11:05 -0400, Phil Christensen wrote:

>          lock = threading.Lock()
>          lock.acquire()
>          self.client.sendCommand('presentTranscript', ['/ 
> transcripts/' + str(pres.id) + '/' + base_name + '.pdf'])
>          lock.release()

> the client object holds a reference to the protocol object, and  
> sendCommand basically just executes:
> 
>          print "Sending " + message + " to " + str(self.protocol.source)
>          self.protocol.transport.write(message + "\0")

Twisted is *not* thread-safe. You can't call its methods from another
thread like that.

Also, os.system() will probably not work on Unix in Twisted; instead,
you can use Twisted's non-blocking process support to run commands
(reactor.spawnProcess, or in your case
twisted.internet.utils.getProcessOutput()). Then you won't need to use
threads at all.

There is a way of doing what you want with threads (see
http://twistedmatrix.com/projects/core/documentation/howto/threading.html) but you should not be using threads in this case as you don't need to and it's just a source of bugs if you're not careful.





From nico at tekNico.net  Tue Oct 25 09:22:40 2005
From: nico at tekNico.net (Nicola Larosa)
Date: Tue, 25 Oct 2005 17:22:40 +0200
Subject: [Twisted-Python] Re: question about threading
In-Reply-To: <ED54CBDE-54CF-43A9-82AF-1B157A1F17FE@bubblehouse.org>
References: <ED54CBDE-54CF-43A9-82AF-1B157A1F17FE@bubblehouse.org>
Message-ID: <djlik0$hn7$1@sea.gmane.org>

> i need to spawn a thread that executes a couple of binaries (html2ps 
> and ps2pdf) which are generally long-running. after executing those 
> binaries, i need to send a message back to the client that sent the 
> original command to generate the pdf.

You probably don't need threads at all. Look at the "Using processes" HOWTO.

-- 
Nicola Larosa - nico at tekNico.net

I've looked at life from both sides now
>From win and lose, and still somehow
It's life's illusions I recall
I really don't know life at all
 -- Joni Mitchell, Both sides now, Clouds, 1969




From michaelschneider at fuse.net  Tue Oct 25 10:27:18 2005
From: michaelschneider at fuse.net (Michael Schneider)
Date: Tue, 25 Oct 2005 12:27:18 -0400
Subject: [Twisted-Python] Twisted - SQLite and SQLObject
In-Reply-To: <E1EUQMx-0003gk-01@pyramid.twistedmatrix.com>
References: <E1EUQMx-0003gk-01@pyramid.twistedmatrix.com>
Message-ID: <435E5CE6.8020203@fuse.net>

Can I used twisted with embedded databases such as SQLite?

I would like to use SQLObject and SQLite in my twisted application.

Thanks
Mike



From jritter at bektel.com  Tue Oct 25 10:41:50 2005
From: jritter at bektel.com (Josh Ritter)
Date: Tue, 25 Oct 2005 11:41:50 -0500
Subject: [Twisted-Python] Twisted - SQLite and SQLObject
References: <E1EUQMx-0003gk-01@pyramid.twistedmatrix.com>
	<435E5CE6.8020203@fuse.net>
Message-ID: <001801c5d982$ffe63520$0400000a@spooge>

Minions of Mirth, our game, makes extensive use of SQLObject, SQLite, and 
Twisted:

http://www.prairiegames.com/games.html

-Josh Ritter
Prairie Games


----- Original Message ----- 
From: "Michael Schneider" <michaelschneider at fuse.net>
To: <twisted-python at twistedmatrix.com>
Sent: Tuesday, October 25, 2005 11:27 AM
Subject: [Twisted-Python] Twisted - SQLite and SQLObject


> Can I used twisted with embedded databases such as SQLite?
>
> I would like to use SQLObject and SQLite in my twisted application.
>
> Thanks
> Mike
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python 




From kkinder at gmail.com  Tue Oct 25 10:42:47 2005
From: kkinder at gmail.com (Ken Kinder)
Date: Tue, 25 Oct 2005 10:42:47 -0600
Subject: [Twisted-Python] Twisted - SQLite and SQLObject
In-Reply-To: <435E5CE6.8020203@fuse.net>
References: <E1EUQMx-0003gk-01@pyramid.twistedmatrix.com>
	<435E5CE6.8020203@fuse.net>
Message-ID: <2295ce5d0510250942v58765670vda1a50ecce49d6df@mail.gmail.com>

You can't use SQLObject because it's synchronous. (I love sqlobject too,
it's rough). You can use adbapi with sqlite's adapter:

http://twistedmatrix.com/projects/core/documentation/howto/enterprise.html

There's also a "row" object that does some basic abstraction, but it's
nothing like sqlobject.

On 10/25/05, Michael Schneider <michaelschneider at fuse.net> wrote:
>
> Can I used twisted with embedded databases such as SQLite?
>
> I would like to use SQLObject and SQLite in my twisted application.
>
> Thanks
> Mike
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20051025/a173f20c/attachment.html>

From exarkun at divmod.com  Tue Oct 25 10:59:24 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 25 Oct 2005 12:59:24 -0400
Subject: [Twisted-Python] Thoughts about testing
In-Reply-To: <20051025121943.431.qmail@web33909.mail.mud.yahoo.com>
Message-ID: <20051025165924.10365.1320557480.divmod.quotient.34@ohm>

On Tue, 25 Oct 2005 05:19:43 -0700 (PDT), Antony Kummel <antonykummel at yahoo.com> wrote:
>Hi all,
>
>I just want to share some ideas that I have had.
>
>>From my experience, testing with Trial is too hard. My
>problems can be divided into three categories: 1.
>obscure error reporting, 2. unclean reactor 3. whoop
>whoop whoop.
>
>I am also pretty sure that I'm doing things that Trial
>does not want me to do, such as actually opening
>sockets and communication over the network. I'm saying
>this because it does not seem to happen in the Twisted
>test-suite. But I don't think there is a good reason
>for this limitation.

The network is a source of unpredictability.  Unit tests 
that rely on it fail intermittently, mysteriously, and 
with no clear course of action for reproducing the failure, 
making debugging the problem extremely difficult, and reduces 
the overall utility of the test suite by introduces failures 
that aren't really failures, but which nevertheless must be 
investigated to determine whether they represent a real problem.

So, there's a pretty good reason, I think.  However, trial 
doesn't prevent you from doing this, so I'm not sure what 
the objection is.

>
>Actually, in sum, I think there are too many
>limitations on writing tests with Trial, and they all
>boil down to the unclean reactor problem (or at least
>most of them). I want to suggest an alternative
>approach.

If tests are allowed to leave things like connections and timers 
(in general, event sources) lying around, subsequent tests can 
fail through no fault of their own when one of these event sources 
misbehaves.  If, for example, one causes an exception to be logged, 
trial will notice this and attribute it to some other hapless test, 
causing it to fail.  These problems are even more difficult to
track down than the ones I mentioned above, since it is not even 
clear in these cases _which_ test is /really/ failing.

>
>How about not requiring the reactor to be clean at the
>end of a test? If anyone wants to make sure that
>anything they do leaves the reactor in a clean state,
>they can test for it themselves. This seems to me more
>like a constraint imposed by the implementation of
>Trial rather than a useful feature.

I think it's a good idea.  I don't know that, in its current form, 
it is complete.  There are probably some improvements that could 
be made to ease the process of tracking down the sources of 
various problems it reports.  I don't think that means the entire 
feature should be scrapped.

>Also, parts of
>Twisted itself are practically unusable inside a test
>because they leave the reactor dirty (such as threaded
>address resolution).

This should be addressed, certainly.  However, I don't often 
find myself resolving names using the system resolver in unit 
tests.  What if the system resolver is buggy?  What if the 
system is misconfigured?  What if there is a transient DNS 
failure?  What if the DNS server for the host you are interested 
in is temporarily offline?  These are not conditions I am happy 
to allow to cause my unit tests to fail.

>An alternative feature could be
>enabling the user to specify that a certain delayed
>call or thread is allowed to remain after the test,
>and then Trial won't complain. The only question
>remaining is how to do it. Simple: use a different
>process. Run the tests in a different process, and
>create a new one each time the reactor is dirtied.
>py.execnet is a nice example of this concept.

Running tests in a child process is an interesting idea.  It 
provides a much greater degree of isolation between tests than 
essentially any other approach, which is great.  Isolation is 
great for unit tests.  Unfortunately, it comes with a lot of 
overhead.  While there are techniques for optimizing the 
implementation of such a feature, running each test method in a
different process would probably add at least 4 minutes to 
Twisted's test suite.  This is basically unacceptable (Twisted's 
suite takes way too long to run already).

Beyond performance problems, there's also the issue of debugging.
As in, how do you?  I'm aware of remote debuggers for Python, but
they're all third-party.  This is not necessarily a killer
drawback, but it is definitely a downside.

>The second thought is this: there seem to be popping
>up different testing toolkits each with their own very
>nice extensions and features
>(http://testoob.sourceforge.net/,
>http://codespeak.net/py/current/doc/test.html). Trial
>cannot benefit from this, having branched away at the
>pyUnit level. I think Trial's special features can be
>relatively easily formulated as plugins to a
>plugin-oriented testing framework (especially if the
>clean reactor requirement is relieved), and so can the
>other testing packages. What this means, is that the
>best thing anyone who wants the world of unit testing
>to develop, and to benefit from it, is to push for a
>plugin-oriented pyUnit, and for an implementation of
>Trial (and the other tools) as a plugin for that
>framework. I think.

Rather than hearing about the plethora of new testing libraries 
appearing, I'd like to hear about features they provide that are
valuable for writing tests.  I would certainly like to borrow 
py.test's magical assert.  What other features are test authors 
finding useful in some of these projects?

Jp



From exarkun at divmod.com  Tue Oct 25 11:01:17 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 25 Oct 2005 13:01:17 -0400
Subject: [Twisted-Python] Twisted - SQLite and SQLObject
In-Reply-To: <435E5CE6.8020203@fuse.net>
Message-ID: <20051025170117.10365.1142108736.divmod.quotient.36@ohm>

On Tue, 25 Oct 2005 12:27:18 -0400, Michael Schneider <michaelschneider at fuse.net> wrote:
>Can I used twisted with embedded databases such as SQLite?
>
>I would like to use SQLObject and SQLite in my twisted application.

Divmod has had much success with SQLite in Twisted applications.  In particular, see http://divmod.org/projects/axiom

>
>Thanks
>Mike
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From jim.mccoy at gmail.com  Tue Oct 25 11:29:49 2005
From: jim.mccoy at gmail.com (Jim McCoy)
Date: Tue, 25 Oct 2005 10:29:49 -0700
Subject: [Twisted-Python] Twisted - SQLite and SQLObject
In-Reply-To: <20051025170117.10365.1142108736.divmod.quotient.36@ohm>
References: <435E5CE6.8020203@fuse.net>
	<20051025170117.10365.1142108736.divmod.quotient.36@ohm>
Message-ID: <f01e36880510251029i1dfa60aax877cc36d0cf26277@mail.gmail.com>

If you are going to use sqlite/sqlobject as an embedded db (as the
original poster suggested) then you are probably better off just
writing your own deferred wrapper for your sql ops.  Treat your db
access (at least your select/set/update ops on your SQLObject schema
classes) as you would any other blocking operation; if your db is not
huge you can probably be more productive by applying twisted to other
parts of your application.

Since you are using sqlite as an embedded db you are not going to get
any benefit from the connection marshalling and threading that seems
to be t.enterprise.adbapi's raison d'etre.  Rather than digging into
the adbapi docs or looking at axiom you would probably be better
served by just building a wrapper around your db that returns
deferred's for the various db CRUD operations.

Jim



From kkinder at gmail.com  Tue Oct 25 11:47:26 2005
From: kkinder at gmail.com (Ken Kinder)
Date: Tue, 25 Oct 2005 11:47:26 -0600
Subject: [Twisted-Python] Twisted - SQLite and SQLObject
In-Reply-To: <f01e36880510251029i1dfa60aax877cc36d0cf26277@mail.gmail.com>
References: <435E5CE6.8020203@fuse.net>
	<20051025170117.10365.1142108736.divmod.quotient.36@ohm>
	<f01e36880510251029i1dfa60aax877cc36d0cf26277@mail.gmail.com>
Message-ID: <2295ce5d0510251047v9a4aab6p71644e985bd41554@mail.gmail.com>

On 10/25/05, Jim McCoy <jim.mccoy at gmail.com> wrote:
>
> If you are going to use sqlite/sqlobject as an embedded db (as the
> original poster suggested) then you are probably better off just
> writing your own deferred wrapper for your sql ops. Treat your db
> access (at least your select/set/update ops on your SQLObject schema
> classes) as you would any other blocking operation; if your db is not
> huge you can probably be more productive by applying twisted to other
> parts of your application.
>
> Since you are using sqlite as an embedded db you are not going to get
> any benefit from the connection marshalling and threading that seems
> to be t.enterprise.adbapi's raison d'etre. Rather than digging into
> the adbapi docs or looking at axiom you would probably be better
> served by just building a wrapper around your db that returns
> deferred's for the various db CRUD operations.
>
> Jim


I've been using an in-memory sqlite database with trivial amounts of data
and actually have been treating it as non-blocking. You wouldn't defer
moving around python data structures, and in my experience, for a small
in-memory sqlite database, you get better performance using it synchronously
inline.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20051025/ab92e8c6/attachment.html>

From antonykummel at yahoo.com  Tue Oct 25 14:09:31 2005
From: antonykummel at yahoo.com (Antony Kummel)
Date: Tue, 25 Oct 2005 13:09:31 -0700 (PDT)
Subject: [Twisted-Python] Thoughts about testing
In-Reply-To: <20051025165924.10365.1320557480.divmod.quotient.34@ohm>
Message-ID: <20051025200931.56727.qmail@web33902.mail.mud.yahoo.com>

Hi Jp,

--- Jean-Paul Calderone <exarkun at divmod.com> wrote:

> >An alternative feature could be
> >enabling the user to specify that a certain delayed
> >call or thread is allowed to remain after the test,
> >and then Trial won't complain. The only question
> >remaining is how to do it. Simple: use a different
> >process. Run the tests in a different process, and
> >create a new one each time the reactor is dirtied.
> >py.execnet is a nice example of this concept.
> 
> Running tests in a child process is an interesting
> idea.  It 
> provides a much greater degree of isolation between
> tests than 
> essentially any other approach, which is great. 
> Isolation is 
> great for unit tests.  Unfortunately, it comes with
> a lot of 
> overhead.  While there are techniques for optimizing
> the 
> implementation of such a feature, running each test
> method in a
> different process would probably add at least 4
> minutes to 
> Twisted's test suite.  This is basically
> unacceptable (Twisted's 
> suite takes way too long to run already).

Well, it will certainly be non-optimal, but let me add
some more points in its favour:
1. It may still be faster than debugging unit tests
that fail because of a dirty reactor or other problems
that it resolves.
2. You don't have to run each test method in a
different process, only the ones who leave the
environment dirty. Of course people are likely to be
lazy if they get the chance, but it makes more sense
to leave it up to them. And of course it could be
optimized (is a pool of process what you had in mind?)
3. This feature brings us very close to completely
distributed unit testing. This will make it possible
to easily run tests simultaneously on different
computers which would actually make it faster than the
current method with very little effort (given enough
computers).
4. A mechanism allowing for running unit tests at
random locations (processes or machines) will probably
be good for making the tests themselves span more than
one computer. Despite your justified objections I
think this could be quite a powerful tool.
5. The same mechanism can be useful for another
problem I often run into: dirtying of the interactive
prompt environment. When using a relatively rich tool
such as PyCrust, for example, I have to close it and
start it again every time I make a grave enough
mistake (for example when I need to reload nested
modules). If the code I write at the prompt was to run
in a different process, I could simply click a button
to restart that process without it having an annoying
impact.

> >The second thought is this: there seem to be
> popping
> >up different testing toolkits each with their own
> very
> >nice extensions and features
> >(http://testoob.sourceforge.net/,
> >http://codespeak.net/py/current/doc/test.html).
> Trial
> >cannot benefit from this, having branched away at
> the
> >pyUnit level. I think Trial's special features can
> be
> >relatively easily formulated as plugins to a
> >plugin-oriented testing framework (especially if
> the
> >clean reactor requirement is relieved), and so can
> the
> >other testing packages. What this means, is that
> the
> >best thing anyone who wants the world of unit
> testing
> >to develop, and to benefit from it, is to push for
> a
> >plugin-oriented pyUnit, and for an implementation
> of
> >Trial (and the other tools) as a plugin for that
> >framework. I think.
> 
> Rather than hearing about the plethora of new
> testing libraries 
> appearing, I'd like to hear about features they
> provide that are
> valuable for writing tests.  I would certainly like
> to borrow 
> py.test's magical assert.  What other features are
> test authors 
> finding useful in some of these projects?

First of all, TestOOB already allows you to run test
in a different process (although I didn't go down to
the details -- this may be a little different than
what I talked about). If the plugin-oriented framework
I proposed existed, the feature we discussed above
would have already been available to us.

Secondly, it is not hard to think about ways to make
unit testing easier. Take a graphical UI for example.
In the current situation, any such improvement will be
useful for only a small group of users, and that group
is likely to grow ever smaller with the emergeance of
new frameworks. And when doing unit tests, we all
desparately want the same thing -- to make it easier.
With a common base, properly designed, we can all
benefit from everyone else's efforts, and I think this
is good enough a reason.

I join you in wanting to hear what test authors are
finding useful in these projects.

Antony Kummel



		
__________________________________ 
Start your day with Yahoo! - Make it your home page! 
http://www.yahoo.com/r/hs



From radeex at gmail.com  Tue Oct 25 15:00:00 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Wed, 26 Oct 2005 08:00:00 +1100
Subject: [Twisted-Python] Thoughts about testing
In-Reply-To: <20051025121943.431.qmail@web33909.mail.mud.yahoo.com>
References: <20051025121943.431.qmail@web33909.mail.mud.yahoo.com>
Message-ID: <60ed19d40510251400s3db36896wc5c42d6c196b7cd0@mail.gmail.com>

On 10/25/05, Antony Kummel <antonykummel at yahoo.com> wrote:
> Hi all,
>
> I just want to share some ideas that I have had.
>
> >From my experience, testing with Trial is too hard. My
> problems can be divided into three categories: 1.
> obscure error reporting, 2. unclean reactor 3. whoop
> whoop whoop.

For #1 and #3, it sounds like you're using trial from Twisted 1.3 (or
perhaps even 2.0). I implore you to get 2.1.0, which has been
massively improved in these areas (I'm pretty sure "whoop whoop"
doesn't exist at all any more).

As for #2, I'll let Jp and the others handle that.

--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+



From jml at mumak.net  Tue Oct 25 15:26:54 2005
From: jml at mumak.net (Jonathan Lange)
Date: Wed, 26 Oct 2005 08:26:54 +1100
Subject: [Twisted-Python] Thoughts about testing
In-Reply-To: <20051025121943.431.qmail@web33909.mail.mud.yahoo.com>
References: <20051025121943.431.qmail@web33909.mail.mud.yahoo.com>
Message-ID: <d06a5cd30510251426i114bc156s@mail.gmail.com>

On 25/10/05, Antony Kummel <antonykummel at yahoo.com> wrote:
> The second thought is this: there seem to be popping
> up different testing toolkits each with their own very
> nice extensions and features
> (http://testoob.sourceforge.net/,
> http://codespeak.net/py/current/doc/test.html). Trial
> cannot benefit from this, having branched away at the
> pyUnit level. I think Trial's special features can be
> relatively easily formulated as plugins to a
> plugin-oriented testing framework (especially if the
> clean reactor requirement is relieved), and so can the
> other testing packages. What this means, is that the
> best thing anyone who wants the world of unit testing
> to develop, and to benefit from it, is to push for a
> plugin-oriented pyUnit, and for an implementation of
> Trial (and the other tools) as a plugin for that
> framework. I think.
>

Thanks for your feedback Antony.

As Chris pointed out, Trial has greatly improved between 2.0 and 2.1. 
Trial 2.1 has half the number of lines of code as Trial 2.0, for
example. The "whoop whoop" error *is* gone, as is the class that
contained it.

But one of the biggest changes is that Trial is now (almost) entirely
built as an extension to unittest. This is the way things should be. 
unittest is a great framework with a great design [1], and doesn't (I
think) need to be pushed towards any large scale plugin changes.

I'm definitely keen to think and discuss more about how Trial behaves
wrt the reactor. And I will leap *like a ninja* upon any reproducible
bugs you can file [2] with respect to obscure error reporting.

cheers,
jml -- trial maintainer

[1] http://dirtsimple.org/2005/08/ruby-gems-python-eggs-and-beauty-of.html
[2] http://www.twistedmatrix.com/bugs/  -- assign to 'jml' with topic 'trial'



From jml at mumak.net  Tue Oct 25 17:44:14 2005
From: jml at mumak.net (Jonathan Lange)
Date: Wed, 26 Oct 2005 10:44:14 +1100
Subject: separate trial release (was Re: [Twisted-Python] Twisted Jabber
In-Reply-To: <435E0BE4.2020807@twistedmatrix.com>
References: <20051025070401.27584.41267374.divmod.quotient.3645@ohm>
	<435DE2A5.3010603@softax.com.pl> <435E0BE4.2020807@twistedmatrix.com>
Message-ID: <d06a5cd30510251644g6fff01e3h@mail.gmail.com>

On 25/10/05, Tommi Virtanen <tv at twistedmatrix.com> wrote:
> Marcin Kasperski wrote:
> >> However, a point in JP's favor: there are source files distributed
> >> with core (twisted/test/*) that *import* code from Trial.  Test cases
> >> seem to be, in every sense, a bit of a gnarly special case.
> > testcases are not necessary for production installation, just as
> > technical docs are. In fact testcases, trial, docs etc are
> > developer-environment tools, not production-environment tools.
>
> I consider running unit tests an essential part of the build process.
> Thus, in my eyes twisted-core has a build-time dependency on trial, even
> if it doesn't have a runtime dependency.
>

Do you think a build-time dependency is enough to keep Trial within core?

jml



From radeex at gmail.com  Tue Oct 25 19:01:53 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Wed, 26 Oct 2005 12:01:53 +1100
Subject: [Twisted-Python] svn-reorg blocking
Message-ID: <60ed19d40510251801y4df68478la7e8f48082efede1@mail.gmail.com>

I really want to get svn-reorg finished up, because lots of people
really want me to release Twisted sumo, and releasing sumo without
svn-reorg is going to be very scary. Unfortunately, there's something
blocking svn-reorg's merge: We haven't figured out a way to get the
test suite to actually run with it.

Trial, in trunk, looks for packages by traversing the filesystem. This
doesn't work with packages made up of __path__s, which is how
svn-reorg works. svn-reorg includes some changes to trial that
replaces filesystem traversal with package importing, and special
support for __path__. However, this doesn't work when a package is
unimportable.

Twisted has (at least) two packages which for various reasons are
unimportable depending on your environment:
twisted.internet.iocpreactor and twisted.internet.serialport. Both of
them are unimportable because their __init__.py files have code in
them, which is against the coding standard. I think glyph mentioned
elsewhere in this thread that the coding standard allows it for
current public interfaces, but it actually only allows it for the
purposes of backwards compatibility while refactoring a module into a
package.

for iocpreactor, this is easy enough to fix: all it does in
__init__.py is "from proactor import install", which is easily
replaced with

def install(*a, **kw):
    from proactor import install
    return install(*a, **kw)

However, serialport is much more devious: 'from serialport import *'.
This then causes an error on any system that doesn't have the
third-party "serial" module installed (which is imported by
serialport.py). The best suggestion I've heard for fixing this one is
to make serialport a single module (again) that defines all the
classes conditionally, but I do think that at least as far as code
organisation is concerned, the current way the files are laid out is
nice.

Can we try to come to a conclusion about this stuff soon?


--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+



From glyph at divmod.com  Tue Oct 25 19:23:53 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 25 Oct 2005 21:23:53 -0400
Subject: separate trial release (was Re: [Twisted-Python] Twisted Jabber
In-Reply-To: <d06a5cd30510251644g6fff01e3h@mail.gmail.com>
Message-ID: <20051026012353.10365.1697176747.divmod.quotient.166@ohm>

On Wed, 26 Oct 2005 10:44:14 +1100, Jonathan Lange <jml at mumak.net> wrote:

>Do you think a build-time dependency is enough to keep Trial within core?

It's not just build-time.

Once you've installed Twisted in a particular environment, trial helps you determine if it's *installed* properly.  If chunks have fallen off of your tarball at some point, trial will alert you to this by failing a bunch of tests.  It's that dependency which keeps me leaning towards "yes".

That said, I'm still undecided - trial is definitely making a lot of progress lately and the rationale of the split was to keep projects like this unconstrained by core's need for stability.



From glyph at divmod.com  Tue Oct 25 19:29:57 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 25 Oct 2005 21:29:57 -0400
Subject: [Twisted-Python] svn-reorg blocking
In-Reply-To: <60ed19d40510251801y4df68478la7e8f48082efede1@mail.gmail.com>
Message-ID: <20051026012957.10365.613098804.divmod.quotient.168@ohm>



On Wed, 26 Oct 2005 12:01:53 +1100, Christopher Armstrong <radeex at gmail.com> wrote:

>However, serialport is much more devious: 'from serialport import *'.
>This then causes an error on any system that doesn't have the
>third-party "serial" module installed (which is imported by
>serialport.py). The best suggestion I've heard for fixing this one is
>to make serialport a single module (again) that defines all the
>classes conditionally, but I do think that at least as far as code
>organisation is concerned, the current way the files are laid out is
>nice.

Here's a suggestion.

Move all files in serialport/ up one level.  Put _'s in front of all the 'implementation' module names.  Replace the 'serialport' package with the existing 'serialport' module, which has pretty much *exactly* the same code in it; the external interface and import names don't change, and the only negative impact is 5 more files in internet/ (considering the size of directories in, say, Apache or Linux, I don't think that this is anything to cry over).

>Can we try to come to a conclusion about this stuff soon?

Shall I make the previous suggestion a "conclusion"? ;-)



From andrew-twisted at puzzling.org  Tue Oct 25 20:10:53 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 26 Oct 2005 12:10:53 +1000
Subject: [Twisted-Python] Thoughts about testing
In-Reply-To: <20051025165924.10365.1320557480.divmod.quotient.34@ohm>
References: <20051025121943.431.qmail@web33909.mail.mud.yahoo.com>
	<20051025165924.10365.1320557480.divmod.quotient.34@ohm>
Message-ID: <20051026021053.GE4773@trogdor.home.puzzling.org>

On Tue, Oct 25, 2005 at 12:59:24PM -0400, Jean-Paul Calderone wrote:
> On Tue, 25 Oct 2005 05:19:43 -0700 (PDT), Antony Kummel 
[...]
> 
> Running tests in a child process is an interesting idea.  It 
> provides a much greater degree of isolation between tests than 
> essentially any other approach, which is great.  Isolation is 
> great for unit tests.  Unfortunately, it comes with a lot of 
> overhead.  While there are techniques for optimizing the 
> implementation of such a feature, running each test method in a
> different process would probably add at least 4 minutes to 
> Twisted's test suite.  This is basically unacceptable (Twisted's 
> suite takes way too long to run already).

Robert Collins' subunit and testresources libraries for pyunit go a long way
to solving this, I believe: http://www.robertcollins.net/unittest/

> >The second thought is this: there seem to be popping
> >up different testing toolkits each with their own very
> >nice extensions and features
> >(http://testoob.sourceforge.net/,
> >http://codespeak.net/py/current/doc/test.html). Trial
> >cannot benefit from this, having branched away at the
> >pyUnit level. I think Trial's special features can be
> >relatively easily formulated as plugins to a
> >plugin-oriented testing framework (especially if the
> >clean reactor requirement is relieved), and so can the
> >other testing packages. What this means, is that the
> >best thing anyone who wants the world of unit testing
> >to develop, and to benefit from it, is to push for a
> >plugin-oriented pyUnit, and for an implementation of
> >Trial (and the other tools) as a plugin for that
> >framework. I think.

Trial is moving very rapidly towards pyunit compatibility once again, thanks
to Jonathan Lange's efforts.  It should be possible to run trial test suites
from an ordinary unittest.py runner in the near future, if it's not already
possible with SVN Trial.  I'm not sure what you mean by "push for a
plugin-oriented pyUnit" -- it already is extensible.

I was under the impression that py.test wasn't at all pyunit compatible,
though?  The docs I've seen tell me that they explicitly aren't interested
in being able to interoperate with unittest or unittest extensions.

> Rather than hearing about the plethora of new testing libraries 
> appearing, I'd like to hear about features they provide that are
> valuable for writing tests.  I would certainly like to borrow 
> py.test's magical assert.  What other features are test authors 
> finding useful in some of these projects?

FWIW, I don't like py.test's magical assert ;)

-Andrew.




From foom at fuhm.net  Tue Oct 25 20:25:08 2005
From: foom at fuhm.net (James Y Knight)
Date: Tue, 25 Oct 2005 22:25:08 -0400
Subject: [Twisted-Python] svn-reorg blocking
In-Reply-To: <60ed19d40510251801y4df68478la7e8f48082efede1@mail.gmail.com>
References: <60ed19d40510251801y4df68478la7e8f48082efede1@mail.gmail.com>
Message-ID: <87FEE636-AEEA-4ABC-8CE6-0FF68308839A@fuhm.net>

On Oct 25, 2005, at 9:01 PM, Christopher Armstrong wrote:
> I really want to get svn-reorg finished up, because lots of people
> really want me to release Twisted sumo, and releasing sumo without
> svn-reorg is going to be very scary. Unfortunately, there's something
> blocking svn-reorg's merge: We haven't figured out a way to get the
> test suite to actually run with it.
>

I did, and even implemented it. IMO it's the only sensible thing that  
can be done for this situation. I speak, of course, of using an  
attribute on the package to let trial know which subpackages do not  
contain any tests. It is simple, it works. What more do you want?  
Even if we do some horrible hack to serialport/iocpreactor such that  
that such an attribute is not required for twisted, it'll likely be  
required for someone else's code.

Things that aren't better ways:
- moving around serialport code for the benefit of trial and to the  
detriment of itself.
- making the serialport module be not a module and instead be some  
lazy import thingamajig.

I do not see that having a package that cannot be imported is in any  
way worse than having a module which cannot be imported, except for  
this issue with trial. Thus, a way to specifically tell trial not to  
care is really all that's necessary. I urge you to not block the svn- 
reorg on finding a mystical better way. Instead, block upon having  
test cases for the trial changes that I have already made.

James



From radeex at gmail.com  Tue Oct 25 20:36:35 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Wed, 26 Oct 2005 13:36:35 +1100
Subject: [Twisted-Python] svn-reorg blocking
In-Reply-To: <20051026012957.10365.613098804.divmod.quotient.168@ohm>
References: <60ed19d40510251801y4df68478la7e8f48082efede1@mail.gmail.com>
	<20051026012957.10365.613098804.divmod.quotient.168@ohm>
Message-ID: <60ed19d40510251936o11eb088bo90098fcdad1c8d64@mail.gmail.com>

On 10/26/05, glyph at divmod.com <glyph at divmod.com> wrote:
> On Wed, 26 Oct 2005 12:01:53 +1100, Christopher Armstrong <radeex at gmail.com> wrote:
> >Can we try to come to a conclusion about this stuff soon?
>
> Shall I make the previous suggestion a "conclusion"? ;-)

I refer you to James' post. I'm fairly happy with your solution
(although I still think that structurally it is less pleasant that
having the implementation modules be in a package), but I'll let you
and James debate it.

On 10/26/05, James Y Knight wrote <foom at fuhm.net> wrote:
> I did, and even implemented it. IMO it's the only sensible thing that
> can be done for this situation. I speak, of course, of using an
> attribute on the package to let trial know which subpackages do not
> contain any tests. It is simple, it works. What more do you want?
> Even if we do some horrible hack to serialport/iocpreactor such that
> that such an attribute is not required for twisted, it'll likely be
> required for someone else's code.

The way I see it is that you put a horrible hack in trial to work
around a problem that wouldn't happen if the code actually followed
Twisted's coding convention.

--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+



From glyph at divmod.com  Tue Oct 25 21:10:15 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 25 Oct 2005 23:10:15 -0400
Subject: [Twisted-Python] svn-reorg blocking
In-Reply-To: <60ed19d40510251936o11eb088bo90098fcdad1c8d64@mail.gmail.com>
Message-ID: <20051026031015.10365.1602465155.divmod.quotient.204@ohm>

On Wed, 26 Oct 2005 13:36:35 +1100, Christopher Armstrong <radeex at gmail.com> wrote:

>I refer you to James' post. I'm fairly happy with your solution
>(although I still think that structurally it is less pleasant that
>having the implementation modules be in a package), but I'll let you
>and James debate it.

I don't like 'serialport' being a package, but that is a totally separate issue.  If James' changes actually fix the problem, let's just go with that and be done with it; if we make serialport not be a package later, then the need for the extra attribute will go away.

>On 10/26/05, James Y Knight wrote <foom at fuhm.net> wrote:

>The way I see it is that you put a horrible hack in trial to work
>around a problem that wouldn't happen if the code actually followed
>Twisted's coding convention.

In James' defense, Twisted's coding standard actually says what serialport is doing is OK.  The portion of the standard that says this is my work, and I think the coding standard should be changed, because this is an awful hack, but one thing that can't be said about it is that it isn't officially endorsed :).

I tend to agree with your general sentiment but I don't think that this issue is important enough to hold up the re-org.  James has implemented a solution.  Let's just use it.



From jml at mumak.net  Tue Oct 25 22:10:04 2005
From: jml at mumak.net (Jonathan Lange)
Date: Wed, 26 Oct 2005 15:10:04 +1100
Subject: [Twisted-Python] svn-reorg blocking
In-Reply-To: <20051026031015.10365.1602465155.divmod.quotient.204@ohm>
References: <60ed19d40510251936o11eb088bo90098fcdad1c8d64@mail.gmail.com>
	<20051026031015.10365.1602465155.divmod.quotient.204@ohm>
Message-ID: <d06a5cd30510252110m55b8b964h@mail.gmail.com>

On 26/10/05, glyph at divmod.com <glyph at divmod.com> wrote:
> >On 10/26/05, James Y Knight wrote <foom at fuhm.net> wrote:
>
> >The way I see it is that you put a horrible hack in trial to work
> >around a problem that wouldn't happen if the code actually followed
> >Twisted's coding convention.
>
> In James' defense, Twisted's coding standard actually says what serialport is doing is OK.  The portion of the standard that says this is my work, and I think the coding standard should be changed, because this is an awful hack, but one thing that can't be said about it is that it isn't officially endorsed :).
>
> I tend to agree with your general sentiment but I don't think that this issue is important enough to hold up the re-org.  James has implemented a solution.  Let's just use it.

I strongly and vigorously oppose merging this branch until there are
unit tests for James' modifications to Trial.  Instead I recommend
moving serialport up a level (as you suggested earlier).  That appears
to be the simplest thing that could possibly work.

cheers,
jml



From glyph at divmod.com  Tue Oct 25 23:03:40 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Wed, 26 Oct 2005 01:03:40 -0400
Subject: [Twisted-Python] svn-reorg blocking
In-Reply-To: <d06a5cd30510252110m55b8b964h@mail.gmail.com>
Message-ID: <20051026050340.10365.1722990414.divmod.quotient.261@ohm>



On Wed, 26 Oct 2005 15:10:04 +1100, Jonathan Lange <jml at mumak.net> wrote:
>I strongly and vigorously oppose merging this branch until there are
>unit tests for James' modifications to Trial.  Instead I recommend
>moving serialport up a level (as you suggested earlier).  That appears
>to be the simplest thing that could possibly work.

Far be it for me to argue with the Maintainer Of The Tests.

It's official, fiat - I just moved serialport up a level in trunk, I will move it in whatever other branches are required.

Any other blocking issues?



From radeex at gmail.com  Tue Oct 25 23:32:19 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Wed, 26 Oct 2005 16:32:19 +1100
Subject: [Twisted-Python] svn-reorg blocking
In-Reply-To: <20051026050340.10365.1722990414.divmod.quotient.261@ohm>
References: <d06a5cd30510252110m55b8b964h@mail.gmail.com>
	<20051026050340.10365.1722990414.divmod.quotient.261@ohm>
Message-ID: <60ed19d40510252232v74c96911k4becb952e1053e51@mail.gmail.com>

On 10/26/05, glyph at divmod.com <glyph at divmod.com> wrote:
>
>
> On Wed, 26 Oct 2005 15:10:04 +1100, Jonathan Lange <jml at mumak.net> wrote:
> >I strongly and vigorously oppose merging this branch until there are
> >unit tests for James' modifications to Trial.  Instead I recommend
> >moving serialport up a level (as you suggested earlier).  That appears
> >to be the simplest thing that could possibly work.
>
> Far be it for me to argue with the Maintainer Of The Tests.
>
> It's official, fiat - I just moved serialport up a level in trunk, I will move it in whatever other branches are required.
>
> Any other blocking issues?

Nope -- I'll try to get some tests into svn-reorg soon for trial's
__path__ support, then we can figure out how the hell we're going to
merge that beast.

--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+



From foom at fuhm.net  Wed Oct 26 00:00:15 2005
From: foom at fuhm.net (James Y Knight)
Date: Wed, 26 Oct 2005 00:00:15 -0600
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <E1EUeKd-0005Ef-00@pyramid.twistedmatrix.com>

Bug summary
______________________
Since 2005-10-19 06:00:02.200000:
 Bugs opened: 7   Bugs closed: 3   Total open bugs: 482 (+4)
  Urgent: 3 (+0)
  Bug: 235 (+2)
  Feature: 166 (+2)
  Wish: 78 (+0)

New / Reopened Bugs
______________________
                    ==== Urgent ====
[DOCUMENTATION, TRIAL] Trial documentation (testing.xhtml) is wildly inaccurate  (2 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1281 opened by jml

                    ==== Bug ====
[BACKPORT, WORDS] UnboundLocalError in twisted.words.tap  (yesterday)
       http://twistedmatrix.com/bugs/issue1283 opened by mike

[TRIAL] twisted.trial.test.test_util.TestFindObject.test_importModule fails intermittently  (yesterday)
       http://twistedmatrix.com/bugs/issue1285 opened by jml

[BACKPORT, CONCH, DOCUMENTATION] conch examples index is all messed up  (yesterday)
CLOSED http://twistedmatrix.com/bugs/issue1284 opened by exarkun

iocpreactor/udp.py disconnects udp sockets on writeErr  (6 days ago)
       http://twistedmatrix.com/bugs/issue1279 opened by ghazel

                    ==== Feature ====
[DOCUMENTATION] Draft "deeper concepts" document for interfaces  (2 days ago)
       http://twistedmatrix.com/bugs/issue1282 opened by jml

Win32Gtk2Reactor  (2 days ago)
       http://twistedmatrix.com/bugs/issue1280 opened by dialtone

Bugs Closed
______________________
                    ==== Urgent ====
[DOCUMENTATION, TRIAL] Trial documentation (testing.xhtml) is wildly inaccurate  (2 days ago)
       http://twistedmatrix.com/bugs/issue1281 opened by jml, closed by jml

                    ==== Bug ====
[BACKPORT, CONCH, DOCUMENTATION] conch examples index is all messed up  (yesterday)
       http://twistedmatrix.com/bugs/issue1284 opened by exarkun, closed by exarkun

win32eventreactor goes crazy at 64 connections  (2 weeks ago)
       http://twistedmatrix.com/bugs/issue1260 opened by ghazel, closed by justinj




From johannes.beigel at brainbot.com  Wed Oct 26 02:27:51 2005
From: johannes.beigel at brainbot.com (Johannes Beigel)
Date: Wed, 26 Oct 2005 10:27:51 +0200
Subject: [Twisted-Python] IMAP4Client closes connection cleanly during
	search()
Message-ID: <435F3E07.3030705@brainbot.com>

Hello.

I'm using twisted.mail.imap4.IMAP4Client and sometimes the connection 
gets closed cleanly "in the middle" of a command. This occurs (in a 
reproducible way) when I do imapClient.search(imap4.Query(all=True)) on 
a really big mailbox folder. The big problem is: Neither callback nor 
errback added to the Deferred from search() is called!

I override factory.connectionLost() to get notified about the connection 
loss, but I'm not really sure what to do when I lose the connection 
(would be a lot of code to get to the same state the IMAP client has 
been in, when some command fails). If the errback connected to search() 
would be called the handling would be much easier, although I think this 
would just result in a new connection loss when trying again.

Any ideas about what happens? e-mail clients like Thunderbird have to 
problems listing the contents of this folder.

It's an courier-imap server, plain (non-TLS) connection.

Any help appreciated!

TIA
-jojo




From johannes.beigel at brainbot.com  Wed Oct 26 03:06:07 2005
From: johannes.beigel at brainbot.com (Johannes Beigel)
Date: Wed, 26 Oct 2005 11:06:07 +0200
Subject: [Twisted-Python] IMAP4Client closes connection cleanly during
	search()
In-Reply-To: <435F3E07.3030705@brainbot.com>
References: <435F3E07.3030705@brainbot.com>
Message-ID: <435F46FF.7030907@brainbot.com>

In reply to myself I want to mention some oddity I just figured out 
during debugging: The _lastCmd attribute of the IMAP4Client instance 
always contains the CAPABILITY command (I print it after every issued 
and completed IMAP command). This happens even if I run the test with a 
smaller mailbox folder, where everything works.

-jojo




From dripton at ripton.net  Wed Oct 26 05:56:49 2005
From: dripton at ripton.net (David Ripton)
Date: Wed, 26 Oct 2005 04:56:49 -0700
Subject: [Twisted-Python] Thoughts about testing
In-Reply-To: <20051025165924.10365.1320557480.divmod.quotient.34@ohm>
References: <20051025121943.431.qmail@web33909.mail.mud.yahoo.com>
	<20051025165924.10365.1320557480.divmod.quotient.34@ohm>
Message-ID: <20051026115649.GA24342@vidar.dreamhost.com>

On 2005.10.25 12:59:24 -0400, Jean-Paul Calderone wrote:
> Rather than hearing about the plethora of new testing libraries 
> appearing, I'd like to hear about features they provide that are
> valuable for writing tests.  I would certainly like to borrow 
> py.test's magical assert.  What other features are test authors 
> finding useful in some of these projects?

Things I particularly like about py.test, vs. unittest:

1. assert, not self.failUnlessAllThisUglyCamelCaseActuallyKillsMe()
2. You can use module-level test functions.  No need to make a test
class unless it's actually helpful.  (Yay Java.)
3. Tests execute in predictable order.
4. setup_module / setup_class / setup_method.  Handy for reusing
database connections.
5. A separate test runner binary, so you don't need __main__ boilerplate
in every test module, and you can put tests in the same module as a 
script (if you don't care about them being found automatically).
6. You can fill your tests with print statements, and only see their
output if the test fails (or you pass the -s option).

-- 
David Ripton    dripton at ripton.net



From foom at fuhm.net  Wed Oct 26 08:04:44 2005
From: foom at fuhm.net (James Y Knight)
Date: Wed, 26 Oct 2005 10:04:44 -0400
Subject: [Twisted-Python] svn-reorg blocking
In-Reply-To: <d06a5cd30510252110m55b8b964h@mail.gmail.com>
References: <60ed19d40510251936o11eb088bo90098fcdad1c8d64@mail.gmail.com>
	<20051026031015.10365.1602465155.divmod.quotient.204@ohm>
	<d06a5cd30510252110m55b8b964h@mail.gmail.com>
Message-ID: <90C9697E-5B99-4C8F-8098-4A8C292BCA93@fuhm.net>

On Oct 26, 2005, at 12:10 AM, Jonathan Lange wrote:
> I strongly and vigorously oppose merging this branch until there are
> unit tests for James' modifications to Trial.

Nobody has suggested that such a thing should be done; there is no  
need for strong and vigorous opposition to a position nobody has  
advocated.

> Instead I recommend
> moving serialport up a level (as you suggested earlier).  That appears
> to be the simplest thing that could possibly work.

This statement makes no sense in this context. Fiddling with  
serialport does not remove the need to make changes to trial that  
require new unit tests. As I said before, I don't even think it  
removes the need for the attribute to mark ignorable subpackages  
either, but, I'm not going to argue that point further.

James




From tv at twistedmatrix.com  Wed Oct 26 09:58:09 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Wed, 26 Oct 2005 18:58:09 +0300
Subject: separate trial release (was Re: [Twisted-Python] Twisted Jabber
In-Reply-To: <d06a5cd30510251644g6fff01e3h@mail.gmail.com>
References: <20051025070401.27584.41267374.divmod.quotient.3645@ohm>	<435DE2A5.3010603@softax.com.pl>
	<435E0BE4.2020807@twistedmatrix.com>
	<d06a5cd30510251644g6fff01e3h@mail.gmail.com>
Message-ID: <435FA791.3060908@twistedmatrix.com>

Jonathan Lange wrote:
> Do you think a build-time dependency is enough to keep Trial within core?

I think build-time dependencies that do not form a strict DAG to be a
pain in ones anatomy. If trial is separated from core, the only
reasonable path forward is not running core unit tests during build.

Alternatively, wouldn't it be great if stdlib unittest, py.test and
trial could _all_ run twisted core unit tests properly?-)



From glyph at divmod.com  Wed Oct 26 11:05:33 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Wed, 26 Oct 2005 13:05:33 -0400
Subject: separate trial release (was Re: [Twisted-Python] Twisted Jabber
In-Reply-To: <435FA791.3060908@twistedmatrix.com>
References: <20051025070401.27584.41267374.divmod.quotient.3645@ohm>
	<435DE2A5.3010603@softax.com.pl> <435E0BE4.2020807@twistedmatrix.com>
	<d06a5cd30510251644g6fff01e3h@mail.gmail.com>
	<435FA791.3060908@twistedmatrix.com>
Message-ID: <1130346333.31676.16.camel@localhost.localdomain>

On Wed, 2005-10-26 at 18:58 +0300, Tommi Virtanen wrote:

> Alternatively, wouldn't it be great if stdlib unittest, py.test and
> trial could _all_ run twisted core unit tests properly?-)

If py.test and stdlib unittest could run the tests without Trial
*present*, that would mean we'd have to have a core API for running the
reactor yourself in a test and shutting it down, so _NO_, that would not
be great.

This seems to a persistent meme though.  I don't understand why you'd
want to run the Twisted unittests with a non-Trial runner even *with*
Trial installed, especially with Trial getting better all the time.

One interpretation of this statement I could make that would in fact be
great is that stdlib unittest and py.test could add support for
returning Deferreds, but that would make them both alternative
implementations of Trial, not of unittest (which is so vanishingly
unlikely I can't imagine that's actually what you meant).

Based on jml and spiv's earlier mails I presume that some effort is
being put towards this.  Insofar as this removes duplicate code from
trial and uses the standard unittest implementations of things that
unittest has an implementation of, great, but is there any more to it
than that?




From glyph at divmod.com  Wed Oct 26 11:14:56 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Wed, 26 Oct 2005 13:14:56 -0400
Subject: [Twisted-Python] Thoughts about testing
In-Reply-To: <20051026115649.GA24342@vidar.dreamhost.com>
References: <20051025121943.431.qmail@web33909.mail.mud.yahoo.com>
	<20051025165924.10365.1320557480.divmod.quotient.34@ohm>
	<20051026115649.GA24342@vidar.dreamhost.com>
Message-ID: <1130346896.31676.25.camel@localhost.localdomain>

On Wed, 2005-10-26 at 04:56 -0700, David Ripton wrote:

> Things I particularly like about py.test, vs. unittest:

Can we compare to trial as it stands please?  I don't think anyone is
seriously suggesting stdlib unittest for Twisted, and I am pretty sure
trial has already subsumed every interesting feature from unittest
itself :)

> 1. assert, not self.failUnlessAllThisUglyCamelCaseActuallyKillsMe()

This is cute - more in the way it deals with printing appropriate
context than the fact that you actually use 'assert' - but it's a shame
that they resorted to a language hack rather than a simple function like
'test()' or something.  Using 'assert' makes it impossible to test with
-O or -OO.  I personally don't use those options, but some people do,
and they should be testable.

> 2. You can use module-level test functions.  No need to make a test
> class unless it's actually helpful.  (Yay Java.)

Handy in some cases, but from what I've seen in my brief survey of
py.test-based tests the only thing this does is make it more of a
convention to smear unit test state across a bunch of shared globals ...

> 3. Tests execute in predictable order.

... and then since there is now global state smeared across your whole
module, the tests have to run in an exact order because each one sets up
things for the next, rather than proper setUp/tearDown encapsulation.

> 4. setup_module / setup_class / setup_method.  Handy for reusing
> database connections.

Technically trial has similar features, but they were broken so horribly
for so long that it became the common wisdom not to use them.  I have to
assume this has recently changed?

> 5. A separate test runner binary, so you don't need __main__ boilerplate
> in every test module, and you can put tests in the same module as a 
> script (if you don't care about them being found automatically).

Trial has this already too.

> 6. You can fill your tests with print statements, and only see their
> output if the test fails (or you pass the -s option).

This is like a replication of trial's AND unittest's worst feature - the
fact that tracebacks are deferred until execution is finished, so tests
which hang intermittently are un-debuggable.  I believe it is only for
the buildbot that -e is not the default.  Speaking of which, let me go
update TwistedEmacs...





From moof at metamoof.net  Wed Oct 26 11:48:32 2005
From: moof at metamoof.net (Moof)
Date: Wed, 26 Oct 2005 19:48:32 +0200
Subject: [Twisted-Python] Thoughts about testing
In-Reply-To: <1130346896.31676.25.camel@localhost.localdomain>
References: <20051025121943.431.qmail@web33909.mail.mud.yahoo.com>	<20051025165924.10365.1320557480.divmod.quotient.34@ohm>	<20051026115649.GA24342@vidar.dreamhost.com>
	<1130346896.31676.25.camel@localhost.localdomain>
Message-ID: <435FC170.8080802@metamoof.net>

Glyph Lefkowitz wrote:

>>1. assert, not self.failUnlessAllThisUglyCamelCaseActuallyKillsMe()
> 
> 
> This is cute - more in the way it deals with printing appropriate
> context than the fact that you actually use 'assert' - but it's a shame
> that they resorted to a language hack rather than a simple function like
> 'test()' or something.  Using 'assert' makes it impossible to test with
> -O or -OO.  I personally don't use those options, but some people do,
> and they should be testable.

I do despise the unittest (and hence trial) camelcaseness. I don't know
enough low level python to be able to answer whether a test() function would
have the same drawback as assert, if -O testing is really an issue.

>>3. Tests execute in predictable order.
> 
> 
> ... and then since there is now global state smeared across your whole
> module, the tests have to run in an exact order because each one sets up
> things for the next, rather than proper setUp/tearDown encapsulation.

There is a use case for this, though. py.test has a -x option that will stop
executing after one test returns an error. This is very much a time saver
when you're running a bunch of lengthy tests on a function where one initial
test failing may inevitably mean that a bunch of more sophisticated tests
involving the same item will fail. If I can predictably say that test_x will
always run before test_advanced_x, then I can try to fix the simple version
before doing a lengthy test on the advanced version.

One thing that I did like out of py.test was the ability to name a test or
test object that you wanted to run and it would do magic pattern matching on
the test's __name__ based on what you typed in. It still printed out
non-matching tests as skipped, but it only ran what you wanted. It allows
you to, again, focus on small functionality within a larger test file.

>>4. setup_module / setup_class / setup_method.  Handy for reusing
>>database connections.
> 
> 
> Technically trial has similar features, but they were broken so horribly
> for so long that it became the common wisdom not to use them.  I have to
> assume this has recently changed?

trial.unittest.setUp was changed to work after 2.0 was released on windows,
as I needed to upgrade to twisted svn to get it working.

Moof
-- 
Giles Antonio Radford, alias Moof
"Too old to be a chicken and too young to be a dirty old man"
Serving up my ego over at <http://metamoof.net/>



From glyph at divmod.com  Wed Oct 26 15:59:59 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Wed, 26 Oct 2005 17:59:59 -0400
Subject: [Twisted-Python] Thoughts about testing
In-Reply-To: <435FC170.8080802@metamoof.net>
Message-ID: <20051026215959.10365.2143431248.divmod.quotient.694@ohm>



On Wed, 26 Oct 2005 19:48:32 +0200, Moof <moof at metamoof.net> wrote:
>Glyph Lefkowitz wrote:

>I do despise the unittest (and hence trial) camelcaseness. I don't know
>enough low level python to be able to answer whether a test() function would
>have the same drawback as assert, if -O testing is really an issue.

Nope.  A test() function could do all the same stack introspection and everything as assert, but would not create problems with -O.  So it's a stealable idea.

>>>3. Tests execute in predictable order.

>There is a use case for this, though. py.test has a -x option that will stop
>executing after one test returns an error. This is very much a time saver
>when you're running a bunch of lengthy tests on a function where one initial
>test failing may inevitably mean that a bunch of more sophisticated tests
>involving the same item will fail.

The correct way to deal with this is to print errors immediately when they happen, like trial -e, or to run just the test that you want, like twisted-dev.el does.  If your unit test spits out the error right away, you can fix it while the rest of the tests are running, then kill and restart them immediately, for maximum user/computer parallelism.

>One thing that I did like out of py.test was the ability to name a test or
>test object that you wanted to run and it would do magic pattern matching on
>the test's __name__ based on what you typed in. It still printed out
>non-matching tests as skipped, but it only ran what you wanted. It allows
>you to, again, focus on small functionality within a larger test file.

Hmm, wildcards might be handy, but in practice I've never wanted more than trial's hierarchical naming.  One thing I wish trial had was a reporter mode that looked like 'make' output, eg:

% trial --gcc -e foo
trial --gcc -e foo.test
trial --gcc -e foo.test.test_whatever
trial --gcc -e foo.test.test_whatever.TestWhatever.test1
    OK
trial --gcc -e foo.test.test_whatever.TestWhatever.test2
    OK
trial --gcc -e foo.test.test_whatever.TestWhatever.test3
    FAILED: FooError
foo/bar.py:1: ...

so I could easily jump to a failed test, then copy the exact trial line needed to run it, so that I could paste that into my buffer's test line, or run trial manually on the command line to 'zoom in' to the test or suite I want.

I bet mumak has cleaned up the reporter API so this is now sane to do, I should have a look.

>Serving up my ego over at <http://metamoof.net/>

BTW, this site seems to be down.



From corydodt at twistedmatrix.com  Wed Oct 26 16:27:57 2005
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Wed, 26 Oct 2005 15:27:57 -0700
Subject: [Twisted-Python] Thoughts about testing
In-Reply-To: <20051026215959.10365.2143431248.divmod.quotient.694@ohm>
References: <20051026215959.10365.2143431248.divmod.quotient.694@ohm>
Message-ID: <436002ED.5090601@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

glyph at divmod.com wrote:
> 
> 
> Hmm, wildcards might be handy, but in practice I've never wanted more
> than trial's hierarchical naming.  One thing I wish trial had was a
> reporter mode that looked like 'make' output, eg:
> 
> % trial --gcc -e foo
> trial --gcc -e foo.test
> trial --gcc -e foo.test.test_whatever
> trial --gcc -e foo.test.test_whatever.TestWhatever.test1
>    OK
> trial --gcc -e foo.test.test_whatever.TestWhatever.test2
>    OK
> trial --gcc -e foo.test.test_whatever.TestWhatever.test3
>    FAILED: FooError
> foo/bar.py:1: ...
> 
> so I could easily jump to a failed test, then copy the exact trial line
> needed to run it, so that I could paste that into my buffer's test line,
> or run trial manually on the command line to 'zoom in' to the test or
> suite I want.

+1 Vorpal, Bugslaying


-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (MingW32)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFDYALs3A5SrXAiHQcRAo4LAKCgUtvHUgYc9J1bMxc90jBGPHveDgCfXdWv
T22mtWl6P7j7ijI0oSfYOE4=
=c4nd
-----END PGP SIGNATURE-----



From jml at mumak.net  Wed Oct 26 18:38:01 2005
From: jml at mumak.net (Jonathan Lange)
Date: Thu, 27 Oct 2005 11:38:01 +1100
Subject: [Twisted-Python] Thoughts about testing
In-Reply-To: <20051026115649.GA24342@vidar.dreamhost.com>
References: <20051025121943.431.qmail@web33909.mail.mud.yahoo.com>
	<20051025165924.10365.1320557480.divmod.quotient.34@ohm>
	<20051026115649.GA24342@vidar.dreamhost.com>
Message-ID: <d06a5cd30510261738h6f8c7f0ex@mail.gmail.com>

On 26/10/05, David Ripton <dripton at ripton.net> wrote:
> On 2005.10.25 12:59:24 -0400, Jean-Paul Calderone wrote:
> > Rather than hearing about the plethora of new testing libraries
> > appearing, I'd like to hear about features they provide that are
> > valuable for writing tests.  I would certainly like to borrow
> > py.test's magical assert.  What other features are test authors
> > finding useful in some of these projects?
>
> Things I particularly like about py.test, vs. unittest:
>
> 1. assert, not self.failUnlessAllThisUglyCamelCaseActuallyKillsMe()

class FooTest(unittest.TestCase):
    failureException = AssertionError

    def test_foo(self):
        assert False  #yay fails


> 2. You can use module-level test functions.  No need to make a test
> class unless it's actually helpful.  (Yay Java.)

This feature is present in unittest, and presumably works for free in
Trial.  Don't know about cmd line support.

> 3. Tests execute in predictable order.

Trial *ought* to execute tests in a predictable order.  If it doesn't,
please file a bug on http://www.twistedmatrix.com/bugs/, assign it to
'jml' with topic 'trial'.  (Also, please include repro)

> 4. setup_module / setup_class / setup_method.  Handy for reusing
> database connections.

We are working on something better than that.

> 5. A separate test runner binary, so you don't need __main__ boilerplate
> in every test module, and you can put tests in the same module as a
> script (if you don't care about them being found automatically).

*blink*

Thanks for the feedback!
jml



From foom at fuhm.net  Wed Oct 26 19:11:06 2005
From: foom at fuhm.net (James Y Knight)
Date: Wed, 26 Oct 2005 21:11:06 -0400
Subject: [Twisted-Python] Thoughts about testing
In-Reply-To: <d06a5cd30510261738h6f8c7f0ex@mail.gmail.com>
References: <20051025121943.431.qmail@web33909.mail.mud.yahoo.com>
	<20051025165924.10365.1320557480.divmod.quotient.34@ohm>
	<20051026115649.GA24342@vidar.dreamhost.com>
	<d06a5cd30510261738h6f8c7f0ex@mail.gmail.com>
Message-ID: <89DAFD1D-A886-49AE-9778-955E71FCF2FF@fuhm.net>

On Oct 26, 2005, at 8:38 PM, Jonathan Lange wrote:

>> 3. Tests execute in predictable order.
>>
>
> Trial *ought* to execute tests in a predictable order.  If it doesn't,
> please file a bug on http://www.twistedmatrix.com/bugs/, assign it to
> 'jml' with topic 'trial'.  (Also, please include repro)
>

It does, it just doesn't execute them in *source* order, which is  
sometimes annoying. I've groused about this before...I generally  
write tests in order from simple->complex as well, and python happily  
throws that order out before trial even gets a chance to see it.

Easily fixable by giving your test cases a numeric prefix.

Possibly "fixable" in trial with a horrible hack of looking up source  
line numbers of classes/methods and sorting according to that, but  
that seems rather...horrible.

James



From jml at mumak.net  Wed Oct 26 19:52:37 2005
From: jml at mumak.net (Jonathan Lange)
Date: Thu, 27 Oct 2005 12:52:37 +1100
Subject: separate trial release (was Re: [Twisted-Python] Twisted Jabber
In-Reply-To: <1130346333.31676.16.camel@localhost.localdomain>
References: <20051025070401.27584.41267374.divmod.quotient.3645@ohm>
	<435DE2A5.3010603@softax.com.pl> <435E0BE4.2020807@twistedmatrix.com>
	<d06a5cd30510251644g6fff01e3h@mail.gmail.com>
	<435FA791.3060908@twistedmatrix.com>
	<1130346333.31676.16.camel@localhost.localdomain>
Message-ID: <d06a5cd30510261852g2dba0b9ew@mail.gmail.com>

On 27/10/05, Glyph Lefkowitz <glyph at divmod.com> wrote:
> On Wed, 2005-10-26 at 18:58 +0300, Tommi Virtanen wrote:
>
> > Alternatively, wouldn't it be great if stdlib unittest, py.test and
> > trial could _all_ run twisted core unit tests properly?-)
>
> If py.test and stdlib unittest could run the tests without Trial
> *present*, that would mean we'd have to have a core API for running the
> reactor yourself in a test and shutting it down, so _NO_, that would not
> be great.
>
> This seems to a persistent meme though.  I don't understand why you'd
> want to run the Twisted unittests with a non-Trial runner even *with*
> Trial installed, especially with Trial getting better all the time.
>
> Based on jml and spiv's earlier mails I presume that some effort is
> being put towards this.  Insofar as this removes duplicate code from
> trial and uses the standard unittest implementations of things that
> unittest has an implementation of, great, but is there any more to it
> than that?

In particular, everything needed to actually run a test is (on its way
to being) moved into the TestCase class.  Already, many of our tests
can be run by unittest (unittestgui even works) -- because the reactor
stuff is going in TestCase.

The advantages definitely include reduced duplication and less code to
maintain.  But another big advantage is that (when we're ready) Trial
can use third-party extensions of unittest straight out of the box.

cheers,
jml



From jml at mumak.net  Wed Oct 26 20:07:34 2005
From: jml at mumak.net (Jonathan Lange)
Date: Thu, 27 Oct 2005 13:07:34 +1100
Subject: [Twisted-Python] svn-reorg blocking
In-Reply-To: <90C9697E-5B99-4C8F-8098-4A8C292BCA93@fuhm.net>
References: <60ed19d40510251936o11eb088bo90098fcdad1c8d64@mail.gmail.com>
	<20051026031015.10365.1602465155.divmod.quotient.204@ohm>
	<d06a5cd30510252110m55b8b964h@mail.gmail.com>
	<90C9697E-5B99-4C8F-8098-4A8C292BCA93@fuhm.net>
Message-ID: <d06a5cd30510261907x84aedacu@mail.gmail.com>

On 27/10/05, James Y Knight <foom at fuhm.net> wrote:
> On Oct 26, 2005, at 12:10 AM, Jonathan Lange wrote:
> > I strongly and vigorously oppose merging this branch until there are
> > unit tests for James' modifications to Trial.
>
> Nobody has suggested that such a thing should be done; there is no
> need for strong and vigorous opposition to a position nobody has
> advocated.
>
> > Instead I recommend
> > moving serialport up a level (as you suggested earlier).  That appears
> > to be the simplest thing that could possibly work.
>
> This statement makes no sense in this context. Fiddling with
> serialport does not remove the need to make changes to trial that
> require new unit tests. As I said before, I don't even think it
> removes the need for the attribute to mark ignorable subpackages
> either, but, I'm not going to argue that point further.
>

My mistake. I remembered that there weren't tests for __path__ support
in the middle of the email -- and by then I had already used the word
"vigorously", which I've been aching to use in a sentence for some
time.

However, I still hold that the attribute to mark ignorable subpackages
is currently unnecessary.  If it turns out that the attribute *is*
necessary, I'm more than happy to see it added.

Still, delight in vocabulary and strong disagreement aren't excuses
for sloppy logic and a disregard for the facts -- so I apologise.  If
it helps, I'll own that my paranoia springs from my experiences
maintaining Trial in 2002-2003, when all people added "useful"
features with little consideration (leading to bloat, leading to The
Rewrite).

While the circumstances have changed (not least because your code is
considered), I'm still going to hang on to that paranoia, if only to
slow things down.

cheers,
jml



From jml at mumak.net  Wed Oct 26 20:10:31 2005
From: jml at mumak.net (Jonathan Lange)
Date: Thu, 27 Oct 2005 13:10:31 +1100
Subject: [Twisted-Python] Thoughts about testing
In-Reply-To: <89DAFD1D-A886-49AE-9778-955E71FCF2FF@fuhm.net>
References: <20051025121943.431.qmail@web33909.mail.mud.yahoo.com>
	<20051025165924.10365.1320557480.divmod.quotient.34@ohm>
	<20051026115649.GA24342@vidar.dreamhost.com>
	<d06a5cd30510261738h6f8c7f0ex@mail.gmail.com>
	<89DAFD1D-A886-49AE-9778-955E71FCF2FF@fuhm.net>
Message-ID: <d06a5cd30510261910r4308fab9w@mail.gmail.com>

On 27/10/05, James Y Knight <foom at fuhm.net> wrote:
> On Oct 26, 2005, at 8:38 PM, Jonathan Lange wrote:
>
> >> 3. Tests execute in predictable order.
> >>
> >
> > Trial *ought* to execute tests in a predictable order.  If it doesn't,
> > please file a bug on http://www.twistedmatrix.com/bugs/, assign it to
> > 'jml' with topic 'trial'.  (Also, please include repro)
> >
>
> It does, it just doesn't execute them in *source* order, which is
> sometimes annoying. I've groused about this before...I generally
> write tests in order from simple->complex as well, and python happily
> throws that order out before trial even gets a chance to see it.
>

Is this annoying only because it's more pleasing to see the tests run
in written order, or for some other reason?

jml



From dripton at ripton.net  Wed Oct 26 21:35:27 2005
From: dripton at ripton.net (David Ripton)
Date: Wed, 26 Oct 2005 20:35:27 -0700
Subject: [Twisted-Python] Thoughts about testing
In-Reply-To: <1130346896.31676.25.camel@localhost.localdomain>
References: <20051025121943.431.qmail@web33909.mail.mud.yahoo.com>
	<20051025165924.10365.1320557480.divmod.quotient.34@ohm>
	<20051026115649.GA24342@vidar.dreamhost.com>
	<1130346896.31676.25.camel@localhost.localdomain>
Message-ID: <20051027033526.GA28791@vidar.dreamhost.com>

On 2005.10.26 13:14:56 -0400, Glyph Lefkowitz wrote:
> On Wed, 2005-10-26 at 04:56 -0700, David Ripton wrote:
> 
> > Things I particularly like about py.test, vs. unittest:
> 
> Can we compare to trial as it stands please?  I don't think anyone is

Sorry.  Haven't used trial lately, and didn't want to make outdated
comparisons.  unittest is the lingua franca; if I accidentally say
something useful, the trial guys can surely translate.

> > 1. assert, not self.failUnlessAllThisUglyCamelCaseActuallyKillsMe()
> 
> This is cute - more in the way it deals with printing appropriate
> context than the fact that you actually use 'assert' - but it's a shame
> that they resorted to a language hack rather than a simple function like
> 'test()' or something.  Using 'assert' makes it impossible to test with
> -O or -OO.  I personally don't use those options, but some people do,
> and they should be testable.

$ python -O `which py.test` test_assert.py
inserting into sys.path: /home/dripton/py-dist
/home/dripton/py-dist/py/test/cmdline.py:30: UserWarning: Assertions are
turned off! (are you using python -O?)
  py.std.warnings.warn("Assertions are turned off!"
...

So I think this is a purely theoretical problem.  I can respect
disliking the magic assert on general principles, though, even though
it's very handy.  (Kinda like the print statement.)

> > 2. You can use module-level test functions.  No need to make a test
> > class unless it's actually helpful.  (Yay Java.)
> 
> Handy in some cases, but from what I've seen in my brief survey of
> py.test-based tests the only thing this does is make it more of a
> convention to smear unit test state across a bunch of shared globals ...

Well, you can abuse globals to carry state across test methods in
unittest and trial as well.  (Init them at the module level rather than
in setUp.)

> > 3. Tests execute in predictable order.
> 
> ... and then since there is now global state smeared across your whole
> module, the tests have to run in an exact order because each one sets up
> things for the next, rather than proper setUp/tearDown encapsulation.

If someone insists on writing bad tests, I don't think there's much a
Python framework is going to do to stop them.  It's just not a very
authoritarian language.  "Stop, or I'll say 'stop' again!"  But I think
most slackers tend to skip writing bad tests and go straight to writing
no tests.

I admit to reusing expensive-to-create objects across multiple test
functions/methods for performance, but I have been conditioned by years
of xUnit to treat such objects as immutable.  (Okay, in the case of
database connections, I put a rollback call in the teardown, which is
not quite the same thing.)

There are other uses for predictable order, even if the tests are fully
independent.  Like running the test you're currently trying to fix
first, or moving the slowest ones to the end.  Knowing what your program
is going to do is sometimes handy.  (unittest is random enough that one
of my co-workers insisted it must be multi-threaded.)

> > 6. You can fill your tests with print statements, and only see their
> > output if the test fails (or you pass the -s option).
> 
> This is like a replication of trial's AND unittest's worst feature - the
> fact that tracebacks are deferred until execution is finished, so tests
> which hang intermittently are un-debuggable.  I believe it is only for
> the buildbot that -e is not the default.  Speaking of which, let me go
> update TwistedEmacs...

Yeah, that makes sense.  But *if* you're going to have deferred
tracebacks, then having print statements silenced when the test passes
can be nice, so that you can lie in wait for intermittent bugs without
generating too much noise.

-- 
David Ripton    dripton at ripton.net



From glyph at divmod.com  Thu Oct 27 00:08:34 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 27 Oct 2005 02:08:34 -0400
Subject: separate trial release (was Re: [Twisted-Python] Twisted Jabber
In-Reply-To: <d06a5cd30510261852g2dba0b9ew@mail.gmail.com>
Message-ID: <20051027060834.10365.1290699047.divmod.quotient.869@ohm>



On Thu, 27 Oct 2005 12:52:37 +1100, Jonathan Lange <jml at mumak.net> wrote:
>On 27/10/05, Glyph Lefkowitz <glyph at divmod.com> wrote:

> (...) the reactor stuff is going in TestCase.

I believe I've lodged a disagreement with you before about this.  If you really think it's best I'll trust your judgement more than mine, since you're certainly doing a bang-up job getting trial into useful shape, but I'll still try to convince you :).

The reactor should be started by the command-line tool and stopped after all tests are done.  Several reasons why:

 - Tests should be runnable by "live" processes.  *twisted* context should need to be around, not unittest context, for the tests to run properly.  This would help a lot in situations where something seems to work for the test framework but doesn't on a live server.

 - We try, but some event loops really *can't* be stopped and restarted safely or reliably multiple times within the same process.  Previous discussions on this list I believe called out cfreactor as an example.  I believe there are others.

 - Normal execution of Twisted programs has the Reactor start up once, lots of stuff run in it, and then it shuts down.  I don't mind exercising the edge cases, but this _only_ excercises the edge cases; the reactor starts up and shuts down every time something new happens.

>The advantages definitely include reduced duplication and less code to
>maintain.  But another big advantage is that (when we're ready) Trial
>can use third-party extensions of unittest straight out of the box.

Are there any such third-party extensions which have value?



From glyph at divmod.com  Thu Oct 27 00:10:02 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 27 Oct 2005 02:10:02 -0400
Subject: [Twisted-Python] Thoughts about testing
In-Reply-To: <89DAFD1D-A886-49AE-9778-955E71FCF2FF@fuhm.net>
Message-ID: <20051027061002.10365.1034698280.divmod.quotient.870@ohm>



On Wed, 26 Oct 2005 21:11:06 -0400, James Y Knight <foom at fuhm.net> wrote:
>On Oct 26, 2005, at 8:38 PM, Jonathan Lange wrote:

>Possibly "fixable" in trial with a horrible hack of looking up source  line 
>numbers of classes/methods and sorting according to that, but  that seems 
>rather...horrible.

Why?  It's just one attribute - no magical side effects or anything.  It's documented, and this only affects sort order.  Seems like a pretty reasonable change to me.



From glyph at divmod.com  Thu Oct 27 00:12:40 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 27 Oct 2005 02:12:40 -0400
Subject: [Twisted-Python] Thoughts about testing
In-Reply-To: <d06a5cd30510261738h6f8c7f0ex@mail.gmail.com>
Message-ID: <20051027061240.10365.1339561015.divmod.quotient.872@ohm>



On Thu, 27 Oct 2005 11:38:01 +1100, Jonathan Lange <jml at mumak.net> wrote:
>On 26/10/05, David Ripton <dripton at ripton.net> wrote:

>> 1. assert, not self.failUnlessAllThisUglyCamelCaseActuallyKillsMe()

>class FooTest(unittest.TestCase):
>    failureException = AssertionError
>
>    def test_foo(self):
>        assert False  #yay fails

My understanding is that if you do

    t = True
    nil = False
    assert t == nil

in py.test, the error reporting will show you "t != nil (True != False)" or somesuch, along with a bunch of other useful diagnostic information.

My proposal was to steal this by doing 'self.failUnless(t == nil)' and stealing as much of their stack introspection junk (available as a hacked version of AssertionError) as we can.



From jml at mumak.net  Thu Oct 27 00:15:57 2005
From: jml at mumak.net (Jonathan Lange)
Date: Thu, 27 Oct 2005 17:15:57 +1100
Subject: [Twisted-Python] Thoughts about testing
In-Reply-To: <20051027061240.10365.1339561015.divmod.quotient.872@ohm>
References: <d06a5cd30510261738h6f8c7f0ex@mail.gmail.com>
	<20051027061240.10365.1339561015.divmod.quotient.872@ohm>
Message-ID: <d06a5cd30510262315i4c50dd4ex@mail.gmail.com>

On 27/10/05, glyph at divmod.com <glyph at divmod.com> wrote:
>
>
> On Thu, 27 Oct 2005 11:38:01 +1100, Jonathan Lange <jml at mumak.net> wrote:
> >On 26/10/05, David Ripton <dripton at ripton.net> wrote:
>
> >> 1. assert, not self.failUnlessAllThisUglyCamelCaseActuallyKillsMe()
>
> >class FooTest(unittest.TestCase):
> >    failureException = AssertionError
> >
> >    def test_foo(self):
> >        assert False  #yay fails
>
> My understanding is that if you do
>
>     t = True
>     nil = False
>     assert t == nil
>
> in py.test, the error reporting will show you "t != nil (True != False)" or somesuch, along with a bunch of other useful diagnostic information.
>
> My proposal was to steal this by doing 'self.failUnless(t == nil)' and stealing as much of their stack introspection junk (available as a hacked version of AssertionError) as we can.

Wicked.  Please file a feature bug against me, topic 'trial'.

cheers,
jml



From jml at mumak.net  Thu Oct 27 00:25:07 2005
From: jml at mumak.net (Jonathan Lange)
Date: Thu, 27 Oct 2005 17:25:07 +1100
Subject: separate trial release (was Re: [Twisted-Python] Twisted Jabber
In-Reply-To: <20051027060834.10365.1290699047.divmod.quotient.869@ohm>
References: <d06a5cd30510261852g2dba0b9ew@mail.gmail.com>
	<20051027060834.10365.1290699047.divmod.quotient.869@ohm>
Message-ID: <d06a5cd30510262325g35311a75m@mail.gmail.com>

On 27/10/05, glyph at divmod.com <glyph at divmod.com> wrote:
>
>
> On Thu, 27 Oct 2005 12:52:37 +1100, Jonathan Lange <jml at mumak.net> wrote:
> >On 27/10/05, Glyph Lefkowitz <glyph at divmod.com> wrote:
>
> > (...) the reactor stuff is going in TestCase.
>
> I believe I've lodged a disagreement with you before about this.  If you really think it's best I'll trust your judgement more than mine, since you're certainly doing a bang-up job getting trial into useful shape, but I'll still try to convince you :).
>
> The reactor should be started by the command-line tool and stopped after all tests are done.

My judgement is suspended for the moment.  My own opinion is that we
should bang Trial into a unittest shape first (because that is the
closest non-Cthulhain shape to what is currently there).

Only once that's done do I want to start thinking about how best to
re-gut Trial so that it treats the reactor with the decorum it
deserves.  In the interim, unittest compatibility is simply a cool
feature.

> Are there any such third-party extensions which have value?
>

subunit and testresource are two.  I'm told datatest (see
http://twistedmatrix.com/bugs/issue529, link at bottom 404s) is
another.

cheers,
jml



From foom at fuhm.net  Thu Oct 27 02:02:02 2005
From: foom at fuhm.net (James Y Knight)
Date: Thu, 27 Oct 2005 04:02:02 -0400
Subject: [Twisted-Python] Thoughts about testing
In-Reply-To: <20051027061002.10365.1034698280.divmod.quotient.870@ohm>
References: <20051027061002.10365.1034698280.divmod.quotient.870@ohm>
Message-ID: <42DA3FBB-4B22-4E0B-B9CE-8BEE1073B0EC@fuhm.net>


On Oct 27, 2005, at 2:10 AM, glyph at divmod.com wrote:

>
>
> On Wed, 26 Oct 2005 21:11:06 -0400, James Y Knight <foom at fuhm.net>  
> wrote:
>
>> On Oct 26, 2005, at 8:38 PM, Jonathan Lange wrote:
>>
>
>
>> Possibly "fixable" in trial with a horrible hack of looking up  
>> source  line numbers of classes/methods and sorting according to  
>> that, but  that seems rather...horrible.
>>
>
> Why?  It's just one attribute - no magical side effects or  
> anything.  It's documented, and this only affects sort order.   
> Seems like a pretty reasonable change to me.

Well, here's the 5 minute solution. It works...no points for style  
though.

James

Index: runner.py
===================================================================
--- runner.py   (revision 14859)
+++ runner.py   (working copy)
@@ -296,6 +296,34 @@
          return thing.__name__
      return thing.id()
+def sourceOrder(thing):
+    if isinstance(thing, pyunit.TestCase):
+        # ?!?!
+        thing = thing._parents[0]
+    if hasattr(thing, 'im_func'):
+        thing = thing.im_func
+    if hasattr(thing, 'func_code'):
+        thing = thing.func_code
+    if hasattr(thing, 'co_firstlineno'):
+        return thing.co_firstlineno
+
+    if isinstance(thing, (types.ClassType, type)):
+        so = None
+        for x in vars(thing).itervalues():
+            try:
+                newso = sourceOrder(x)
+            except TypeError:
+                # Not a sourceorderable
+                pass
+            else:
+                if so is not None:
+                    so = min(so, newso)
+                else:
+                    so = newso
+        if so is None:
+            return 0
+        return so
+    raise TypeError("Unknown test object type: %s %s %s" % (thing,  
type(thing), vars(thing)))
def isTestCase(obj):
      try:
@@ -316,6 +344,7 @@
          self.suiteFactory = TestSuite
          self.classSuiteFactory = ClassSuite
          self.sorter = name
+        self.testSorter = sourceOrder
          self._importErrors = []
      def _findTestClasses(self, module):
@@ -324,7 +353,7 @@
          for name, val in inspect.getmembers(module):
              if isTestCase(val):
                  classes.append(val)
-        return dsu(classes, self.sorter)
+        return dsu(classes, self.testSorter)
      def _findTestModules(self, package):
          modGlob = os.path.join(os.path.dirname(package.__file__),  
self.moduleGlob)
@@ -371,7 +400,7 @@
          factory = self.classSuiteFactory
          names = reflect.prefixedMethodNames(klass, self.methodPrefix)
          tests = dsu([ klass(self.methodPrefix+name) for name in  
names ],
-                    self.sorter)
+                    self.testSorter)
          suite = factory(klass)
          suite.addTests(tests)
          return NamedSuite(klass.__name__, suite)




From johannes.beigel at brainbot.com  Thu Oct 27 02:40:59 2005
From: johannes.beigel at brainbot.com (Johannes Beigel)
Date: Thu, 27 Oct 2005 10:40:59 +0200
Subject: [Twisted-Python] IMAP4Client closes connection cleanly during
	search()
In-Reply-To: <435F3E07.3030705@brainbot.com>
References: <435F3E07.3030705@brainbot.com>
Message-ID: <4360929B.9020903@brainbot.com>

Hello.

Yesterday I was a little short on time, so please excuse the lateness of 
this post containing the obligatory minimal example that reproduces the 
described bevhavior. Everything works just fine with small mailboxes for 
me. But using a big mailbox (approx. 5000 mails in it) results in 
"search failed" not printed and quit() being never called.

Ciao
-jojo

-------------- next part --------------
A non-text attachment was scrubbed...
Name: minimal.py
Type: text/x-python
Size: 1294 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20051027/6ebc5a82/attachment-0002.py>

From ralf at brainbot.com  Thu Oct 27 03:10:50 2005
From: ralf at brainbot.com (Ralf Schmitt)
Date: Thu, 27 Oct 2005 11:10:50 +0200
Subject: [Twisted-Python] Thoughts about testing
In-Reply-To: <20051027061002.10365.1034698280.divmod.quotient.870@ohm>
References: <20051027061002.10365.1034698280.divmod.quotient.870@ohm>
Message-ID: <4360999A.4010201@brainbot.com>

glyph at divmod.com wrote:
> 
> 
> On Wed, 26 Oct 2005 21:11:06 -0400, James Y Knight <foom at fuhm.net> wrote:
> 
>> On Oct 26, 2005, at 8:38 PM, Jonathan Lange wrote:
> 
> 
>> Possibly "fixable" in trial with a horrible hack of looking up source  
>> line numbers of classes/methods and sorting according to that, but  
>> that seems rather...horrible.
> 
> 
> Why?  It's just one attribute - no magical side effects or anything.  
> It's documented, and this only affects sort order.  Seems like a pretty 
> reasonable change to me.
> 

The magical side effects happen if you choose to use decorators on the 
test functions. Suddenly the test functions 'use' the decorator's source 
line numbers.

- Ralf






From exarkun at divmod.com  Thu Oct 27 07:45:15 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 27 Oct 2005 09:45:15 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r14922 - Fix to replace a
 lambda with something that's safe in the scope when it's
In-Reply-To: <E1EV4Kd-00008z-00@wolfwood>
Message-ID: <20051027134515.10365.1701079740.divmod.quotient.982@ohm>

On Thu, 27 Oct 2005 03:45:59 -0600, Matt Goodall <mg at wolfwood.twistedmatrix.com> wrote:
>Author: mg
>Date: Thu Oct 27 03:45:58 2005
>New Revision: 14922
>
>Modified:
>   sandbox/mg/laxdb.py
>Log:
>Fix to replace a lambda with something that's safe in the scope when it's
>actually executed .... just in case anyone else is actually using this thing.
>

Note that this changes the behavior from constructing Failure instances in the reactor thread to creating them in a worker thread.

Jp



From itamar at itamarst.org  Thu Oct 27 08:09:51 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 27 Oct 2005 10:09:51 -0400
Subject: [Twisted-Python] IMAP4Client closes connection cleanly during
	search()
In-Reply-To: <4360929B.9020903@brainbot.com>
References: <435F3E07.3030705@brainbot.com>  <4360929B.9020903@brainbot.com>
Message-ID: <1130422191.8857.0.camel@localhost.localdomain>

Could you please add the bug to http://twistedmatrix.com/bugs/ so we
don't lose track of it? Thanks.




From matt at pollenation.net  Thu Oct 27 08:17:30 2005
From: matt at pollenation.net (Matt Goodall)
Date: Thu, 27 Oct 2005 15:17:30 +0100
Subject: [Twisted-Python] Re: [Twisted-commits] r14922 - Fix to replace
	a lambda with something that's safe in the scope when it's
In-Reply-To: <20051027134515.10365.1701079740.divmod.quotient.982@ohm>
References: <20051027134515.10365.1701079740.divmod.quotient.982@ohm>
Message-ID: <4360E17A.1000702@pollenation.net>

Jean-Paul Calderone wrote:
> On Thu, 27 Oct 2005 03:45:59 -0600, Matt Goodall
> <mg at wolfwood.twistedmatrix.com> wrote:
> 
>> Author: mg
>> Date: Thu Oct 27 03:45:58 2005
>> New Revision: 14922
>>
>> Modified:
>>   sandbox/mg/laxdb.py
>> Log:
>> Fix to replace a lambda with something that's safe in the scope when it's
>> actually executed .... just in case anyone else is actually using this
>> thing.
>>
> 
> Note that this changes the behavior from constructing Failure instances
> in the reactor thread to creating them in a worker thread.

Yes, very true. Thanks for raising it. Does it matter in this case?

All the the args passed to Failure are worked out in the thread and I
think that means Failure's __init__ does basically nothing. Did I miss
something?

Thanks, Matt

-- 
     __
    /  \__     Matt Goodall, Pollenation Internet Ltd
    \__/  \    w: http://www.pollenation.net
  __/  \__/    e: matt at pollenation.net
 /  \__/  \    t: +44 (0)113 2252500
 \__/  \__/
 /  \          Any views expressed are my own and do not necessarily
 \__/          reflect the views of my employer.



From matt at pollenation.net  Thu Oct 27 08:27:36 2005
From: matt at pollenation.net (Matt Goodall)
Date: Thu, 27 Oct 2005 15:27:36 +0100
Subject: [Twisted-Python] Re: [Twisted-commits] r14922 - Fix to replace
	a lambda with something that's safe in the scope when it's
In-Reply-To: <4360E17A.1000702@pollenation.net>
References: <20051027134515.10365.1701079740.divmod.quotient.982@ohm>
	<4360E17A.1000702@pollenation.net>
Message-ID: <4360E3D8.4040501@pollenation.net>

Matt Goodall wrote:
> Jean-Paul Calderone wrote:
> 
>>On Thu, 27 Oct 2005 03:45:59 -0600, Matt Goodall
>><mg at wolfwood.twistedmatrix.com> wrote:
>>
>>
>>>Author: mg
>>>Date: Thu Oct 27 03:45:58 2005
>>>New Revision: 14922
>>>
>>>Modified:
>>>  sandbox/mg/laxdb.py
>>>Log:
>>>Fix to replace a lambda with something that's safe in the scope when it's
>>>actually executed .... just in case anyone else is actually using this
>>>thing.
>>>
>>
>>Note that this changes the behavior from constructing Failure instances
>>in the reactor thread to creating them in a worker thread.
> 
> 
> Yes, very true. Thanks for raising it. Does it matter in this case?
> 
> All the the args passed to Failure are worked out in the thread and I
> think that means Failure's __init__ does basically nothing. Did I miss
> something?

Also, I think it's now pointless digging the exception information out
of Python to pass to the Failure.__init__. That's what Failure will
*now* do on its own when passed nothing.

- Matt

-- 
     __
    /  \__     Matt Goodall, Pollenation Internet Ltd
    \__/  \    w: http://www.pollenation.net
  __/  \__/    e: matt at pollenation.net
 /  \__/  \    t: +44 (0)113 2252500
 \__/  \__/
 /  \          Any views expressed are my own and do not necessarily
 \__/          reflect the views of my employer.



From exarkun at divmod.com  Thu Oct 27 08:46:08 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 27 Oct 2005 10:46:08 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r14922 - Fix to replace
	a lambda with something that's safe in the scope when it's
In-Reply-To: <4360E3D8.4040501@pollenation.net>
Message-ID: <20051027144608.10365.1863415127.divmod.quotient.999@ohm>

On Thu, 27 Oct 2005 15:27:36 +0100, Matt Goodall <matt at pollenation.net> wrote:
>Matt Goodall wrote:
>> Jean-Paul Calderone wrote:
>>
>>>On Thu, 27 Oct 2005 03:45:59 -0600, Matt Goodall
>>><mg at wolfwood.twistedmatrix.com> wrote:
>>>
>>>
>>>>Author: mg
>>>>Date: Thu Oct 27 03:45:58 2005
>>>>New Revision: 14922
>>>>
>>>>Modified:
>>>>  sandbox/mg/laxdb.py
>>>>Log:
>>>>Fix to replace a lambda with something that's safe in the scope when it's
>>>>actually executed .... just in case anyone else is actually using this
>>>>thing.
>>>>
>>>
>>>Note that this changes the behavior from constructing Failure instances
>>>in the reactor thread to creating them in a worker thread.
>>
>>
>> Yes, very true. Thanks for raising it. Does it matter in this case?
>>
>> All the the args passed to Failure are worked out in the thread and I
>> think that means Failure's __init__ does basically nothing. Did I miss
>> something?

It may work fine now.  The API isn't guaranteed to be threadsafe, though.

>
>Also, I think it's now pointless digging the exception information out
>of Python to pass to the Failure.__init__. That's what Failure will
>*now* do on its own when passed nothing.

As it stands in SVN now, I agree.  The Failure was constructed that way before since it was being instantiated in a different thread than the one in which the exception occurred.

Jp



From johannes.beigel at brainbot.com  Thu Oct 27 08:57:17 2005
From: johannes.beigel at brainbot.com (Johannes Beigel)
Date: Thu, 27 Oct 2005 16:57:17 +0200
Subject: [Twisted-Python] IMAP4Client closes connection cleanly during
	search()
In-Reply-To: <1130422191.8857.0.camel@localhost.localdomain>
References: <435F3E07.3030705@brainbot.com> <4360929B.9020903@brainbot.com>
	<1130422191.8857.0.camel@localhost.localdomain>
Message-ID: <4360EACD.4070705@brainbot.com>

Itamar Shtull-Trauring schrieb:

>Could you please add the bug to http://twistedmatrix.com/bugs/ so we
>don't lose track of it? Thanks.
>  
>

OK, I just did it. It's Issue 1290.

-jojo




From radeex at gmail.com  Fri Oct 28 05:14:25 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Fri, 28 Oct 2005 22:14:25 +1100
Subject: [Twisted-Python] svn-reorg blocking
In-Reply-To: <20051026050340.10365.1722990414.divmod.quotient.261@ohm>
References: <d06a5cd30510252110m55b8b964h@mail.gmail.com>
	<20051026050340.10365.1722990414.divmod.quotient.261@ohm>
Message-ID: <60ed19d40510280414x455f4017waf959141b316c531@mail.gmail.com>

On 10/26/05, glyph at divmod.com <glyph at divmod.com> wrote:
> Any other blocking issues?

Well, not only does the new __path__ stuff not have tests (which I had
just sat down to remedy), but it's also apparently breaking existing
trial tests (clearly seen with "trial twisted.trial" in svn-reorg
branch). Not only is it breaking them, it's doing it in a way that one
failing test is causing others to fail - I assume because of the
state-changing nature of the __path__ support change - that of
importing the packages instead of doing stuff by filesystem.

This __path__ thing continues to annoy me for various reasons, and I'm
having second thoughts about how possible it is. Can other people
please get on IRC this weekend and bash heads about it with me? Maybe
we can find an alternative solution that isn't so magical and
unsupported by, well, everything. Or we can just figure out how to get
the __path__ stuff working for reals.

--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+



From radeex at gmail.com  Fri Oct 28 05:21:25 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Fri, 28 Oct 2005 22:21:25 +1100
Subject: [Twisted-Python] pyramid -> Ubuntu
Message-ID: <60ed19d40510280421j12c986c0na28858f357de8d@mail.gmail.com>

Wouldn't it be awesome if Pyramid ran on Ubuntu instead of a
not-even-latest release of Debian?

I've heard rumors it should be as simple as s/woody/breezy/ and a
dist-upgrade. We could do that and have jafo standing by in case the
machine becomes unbootable after the kernel upgrade.

This thought came to me after I was considering and loathing the
prospect of upgrading our roundup instance on such an ancient
platform.

Thoughts?

--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+



From mary-twisted at puzzling.org  Fri Oct 28 06:43:36 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Fri, 28 Oct 2005 22:43:36 +1000
Subject: [Twisted-Python] pyramid -> Ubuntu
In-Reply-To: <60ed19d40510280421j12c986c0na28858f357de8d@mail.gmail.com>
References: <60ed19d40510280421j12c986c0na28858f357de8d@mail.gmail.com>
Message-ID: <20051028124336.GC12326@sourdust.home.puzzling.org>

On Fri, Oct 28, 2005, Christopher Armstrong wrote:
> I've heard rumors it should be as simple as s/woody/breezy/ and a
> dist-upgrade. We could do that and have jafo standing by in case the
> machine becomes unbootable after the kernel upgrade.

Not quite: make sure you install ubuntu-minimal and probably ubuntu-base
to make sure that you have a decent base system. I did manage to do
early sarge -> warty and later sarge -> hoary relatively easily, but
the mere fact of it being a remote upgrade may bring down a curse on
your head...

-Mary

-- 
<radix> /msg exarkun [lilo] HI ALL GIMME MONEYS AND LOOK AT MY WEBBARSITE



From psanchez at nortel.com  Fri Oct 28 08:35:08 2005
From: psanchez at nortel.com (Pedro Sanchez)
Date: Fri, 28 Oct 2005 10:35:08 -0400
Subject: [Twisted-Python] Handling errors when using deferToThread
Message-ID: <1130510108.1711.125.camel@pcard0ze.ca.nortel.com>

Hello,

In the twisted documentation there is this example:


from twisted.internet import threads
def doLongCalculation():
    # .... do long calculation here ...
    return 3

def printResult(x):
    print x

# run method in thread and get result as defer.Deferred
d = threads.deferToThread(doLongCalculation)
d.addCallback(printResult)


This works well as long as doLongCalculation() doesn't fail for
any reason. But if it does, how can it trigger an errBack?
I want to do something like this:

from twisted.internet import threads
def doLongCalculation():
    try:
       # .... do long calculation here ...
    except:
       < what can I return here to tell that
         the calculation failed? >
    return 3

def printResult(x):
    print x

def badResult(failure):
    print "Calculation failed!"

# run method in thread and get result as defer.Deferred
d = threads.deferToThread(doLongCalculation)
d.addCallbacks(printResult, badResult)


Thanks in advance for your help,

-- 
Pedro






From cwmoad at gmail.com  Fri Oct 28 08:49:01 2005
From: cwmoad at gmail.com (Charlie Moad)
Date: Fri, 28 Oct 2005 09:49:01 -0500
Subject: [Twisted-Python] Handling errors when using deferToThread
In-Reply-To: <1130510108.1711.125.camel@pcard0ze.ca.nortel.com>
References: <1130510108.1711.125.camel@pcard0ze.ca.nortel.com>
Message-ID: <6382066a0510280749r27c22fe2i6605b17e1e1d7d8a@mail.gmail.com>

The deferred object from the deferToThread call is the same as any
other deferred.  Your example should work.  I have working code with
addCallback/addErrback.

On 10/28/05, Pedro Sanchez <psanchez at nortel.com> wrote:
> Hello,
>
> In the twisted documentation there is this example:
>
>
> from twisted.internet import threads
> def doLongCalculation():
>     # .... do long calculation here ...
>     return 3
>
> def printResult(x):
>     print x
>
> # run method in thread and get result as defer.Deferred
> d = threads.deferToThread(doLongCalculation)
> d.addCallback(printResult)
>
>
> This works well as long as doLongCalculation() doesn't fail for
> any reason. But if it does, how can it trigger an errBack?
> I want to do something like this:
>
> from twisted.internet import threads
> def doLongCalculation():
>     try:
>        # .... do long calculation here ...
>     except:
>        < what can I return here to tell that
>          the calculation failed? >
>     return 3
>
> def printResult(x):
>     print x
>
> def badResult(failure):
>     print "Calculation failed!"
>
> # run method in thread and get result as defer.Deferred
> d = threads.deferToThread(doLongCalculation)
> d.addCallbacks(printResult, badResult)
>
>
> Thanks in advance for your help,
>
> --
> Pedro
>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From andrew-twisted at puzzling.org  Fri Oct 28 08:56:22 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sat, 29 Oct 2005 00:56:22 +1000
Subject: [Twisted-Python] Handling errors when using deferToThread
In-Reply-To: <1130510108.1711.125.camel@pcard0ze.ca.nortel.com>
References: <1130510108.1711.125.camel@pcard0ze.ca.nortel.com>
Message-ID: <20051028145622.GB23016@trogdor.home.puzzling.org>

On Fri, Oct 28, 2005 at 10:35:08AM -0400, Pedro Sanchez wrote:
[...]
> This works well as long as doLongCalculation() doesn't fail for
> any reason. But if it does, how can it trigger an errBack?

Just raise an exception.

> I want to do something like this:
> 
> from twisted.internet import threads
> def doLongCalculation():
>     try:
>        # .... do long calculation here ...
>     except:
>        < what can I return here to tell that
>          the calculation failed? >
>     return 3

The literal answer here is a bare raise statement.  But better would be to
not use the try-except at all.

Try inserting something like "1/0" into doLongCalculation and see what
happens.

-Andrew.




From psanchez at nortel.com  Fri Oct 28 09:25:32 2005
From: psanchez at nortel.com (Pedro Sanchez)
Date: Fri, 28 Oct 2005 11:25:32 -0400
Subject: [Twisted-Python] Handling errors when using deferToThread
In-Reply-To: <20051028145622.GB23016@trogdor.home.puzzling.org>
References: <1130510108.1711.125.camel@pcard0ze.ca.nortel.com>
	<20051028145622.GB23016@trogdor.home.puzzling.org>
Message-ID: <1130513132.1711.129.camel@pcard0ze.ca.nortel.com>

On Sat, 2005-29-10 at 00:56 +1000, Andrew Bennetts wrote:
> On Fri, Oct 28, 2005 at 10:35:08AM -0400, Pedro Sanchez wrote:
> [...]
> > This works well as long as doLongCalculation() doesn't fail for
> > any reason. But if it does, how can it trigger an errBack?
> 
> Just raise an exception.
> 
> > I want to do something like this:
> > 
> > from twisted.internet import threads
> > def doLongCalculation():
> >     try:
> >        # .... do long calculation here ...
> >     except:
> >        < what can I return here to tell that
> >          the calculation failed? >
> >     return 3
> 
> The literal answer here is a bare raise statement.  But better would be to
> not use the try-except at all.
> 
Why? What's the alternative?

> Try inserting something like "1/0" into doLongCalculation and see what
> happens.
> 
I don't understand your "1/0" suggestion. Can you elaborate a bit?

Thanks.

-- 
Pedro

> -Andrew.
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 




From itamar at itamarst.org  Fri Oct 28 09:31:01 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 28 Oct 2005 11:31:01 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r14926 - Branch to obsolete
	setUpClass and tearDownClass
In-Reply-To: <E1EVJsK-0000Uz-00@wolfwood>
References: <E1EVJsK-0000Uz-00@wolfwood>
Message-ID: <1130513462.8901.9.camel@localhost.localdomain>

On Thu, 2005-10-27 at 20:21 -0600, Jonathan Lange wrote:
> Author: jml
> Date: Thu Oct 27 20:21:48 2005
> New Revision: 14926
> 
> Added:
>    branches/jml/trial-setupclass-death/
>       - copied from r14925, trunk/
> Log:
> Branch to obsolete setUpClass and tearDownClass

Why?




From cwmoad at gmail.com  Fri Oct 28 09:39:30 2005
From: cwmoad at gmail.com (Charlie Moad)
Date: Fri, 28 Oct 2005 10:39:30 -0500
Subject: [Twisted-Python] Handling errors when using deferToThread
In-Reply-To: <1130513132.1711.129.camel@pcard0ze.ca.nortel.com>
References: <1130510108.1711.125.camel@pcard0ze.ca.nortel.com>
	<20051028145622.GB23016@trogdor.home.puzzling.org>
	<1130513132.1711.129.camel@pcard0ze.ca.nortel.com>
Message-ID: <6382066a0510280839j5dab1c04j7664e5e4d4fcb76e@mail.gmail.com>

def doLongCalculation():
   return 1/0

This will raise a dividebyzero error.  In which case your errback will
be called.  You don't need the try/except block because when an
exception is raised your errback will be called instead of the
callback.

On 10/28/05, Pedro Sanchez <psanchez at nortel.com> wrote:
> On Sat, 2005-29-10 at 00:56 +1000, Andrew Bennetts wrote:
> > On Fri, Oct 28, 2005 at 10:35:08AM -0400, Pedro Sanchez wrote:
> > [...]
> > > This works well as long as doLongCalculation() doesn't fail for
> > > any reason. But if it does, how can it trigger an errBack?
> >
> > Just raise an exception.
> >
> > > I want to do something like this:
> > >
> > > from twisted.internet import threads
> > > def doLongCalculation():
> > >     try:
> > >        # .... do long calculation here ...
> > >     except:
> > >        < what can I return here to tell that
> > >          the calculation failed? >
> > >     return 3
> >
> > The literal answer here is a bare raise statement.  But better would be to
> > not use the try-except at all.
> >
> Why? What's the alternative?
>
> > Try inserting something like "1/0" into doLongCalculation and see what
> > happens.
> >
> I don't understand your "1/0" suggestion. Can you elaborate a bit?
>
> Thanks.
>
> --
> Pedro
>
> > -Andrew.
> >
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From psanchez at nortel.com  Fri Oct 28 15:40:21 2005
From: psanchez at nortel.com (Pedro Sanchez)
Date: Fri, 28 Oct 2005 17:40:21 -0400
Subject: [Twisted-Python] How to force synchronous behavior
Message-ID: <1130535622.1711.158.camel@pcard0ze.ca.nortel.com>

Hello,

I want to encapsulate deferreds into a function that looks like
synchronous when invoked. Something like this:


def mySyncFunc()
   x = 0
   def done(data):
      global x
      x = data

   d = someCalculation()
   d.addCallback(done)
   <something here to hold until "done" is really done>
   return x

print mySyncFunc()


someCalculation() returns a deferred (for instance to accesses a DB).
So, how can I write mySyncFunc() so that at the end I print the result
of someCalculation() and not just 0? 

Thanks,

-- 
Pedro







From glyph at divmod.com  Fri Oct 28 20:38:54 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Fri, 28 Oct 2005 22:38:54 -0400
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <1130535622.1711.158.camel@pcard0ze.ca.nortel.com>
Message-ID: <20051029023854.10365.1134850715.divmod.quotient.1508@ohm>



On Fri, 28 Oct 2005 17:40:21 -0400, Pedro Sanchez <psanchez at nortel.com> wrote:

>I want to encapsulate deferreds into a function that looks like
>synchronous when invoked.

This is a bad idea.  Don't do it.  If you do somehow manage it, the results will be incredibly buggy and almost no-one will care to help you fix it, because people who know Twisted well don't do things this way.

For more information, read this: http://www.livejournal.com/users/glyf/40037.html



From exarkun at divmod.com  Fri Oct 28 21:26:22 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 28 Oct 2005 23:26:22 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r14952 - Impelement
 spawnProcess for IOCP reactor. Resolves issue1008.
In-Reply-To: <E1EVXEv-00015O-00@wolfwood>
Message-ID: <20051029032622.10365.771357096.divmod.quotient.1520@ohm>

On Fri, 28 Oct 2005 10:38:02 -0600, Justin Johnson <justinj at wolfwood.twistedmatrix.com> wrote:
>Author: justinj
>Date: Fri Oct 28 10:38:01 2005
>New Revision: 14952
>
>Added:
>   trunk/twisted/internet/iocpreactor/process.py
>      - copied unchanged from r14928, branches/win32-process/twisted/internet/iocpreactor/process.py
>   trunk/twisted/internet/iocpreactor/process_waiter.py
>      - copied unchanged from r14928, branches/win32-process/twisted/internet/iocpreactor/process_waiter.py
>Modified:
>   trunk/twisted/internet/iocpreactor/ops.py
>   trunk/twisted/internet/iocpreactor/proactor.py
>   trunk/twisted/test/process_tester.py
>   trunk/twisted/test/test_process.py
>   trunk/twisted/topfiles/INSTALL
>Log:
>Impelement spawnProcess for IOCP reactor.  Resolves issue1008.
>

While I am excited this feature is so close, it seems like it isn't quite there yet.  Buildbot is now reporting only 442 tests run by the IOCP builder on Win32, and a really nasty looking traceback afterwards.

Could we revert this merge?

Jean-Paul



From andrew-twisted at puzzling.org  Sat Oct 29 07:06:47 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sat, 29 Oct 2005 23:06:47 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] r14952 - Impelement
	spawnProcess for IOCP reactor. Resolves issue1008.
In-Reply-To: <20051029032622.10365.771357096.divmod.quotient.1520@ohm>
References: <E1EVXEv-00015O-00@wolfwood>
	<20051029032622.10365.771357096.divmod.quotient.1520@ohm>
Message-ID: <20051029130646.GA4823@trogdor.home.puzzling.org>

On Fri, Oct 28, 2005 at 11:26:22PM -0400, Jean-Paul Calderone wrote:
> On Fri, 28 Oct 2005 10:38:02 -0600, Justin Johnson 
> <justinj at wolfwood.twistedmatrix.com> wrote:
[...]
> >Log:
> >Impelement spawnProcess for IOCP reactor.  Resolves issue1008.
> >
> 
> While I am excited this feature is so close, it seems like it isn't quite 
> there yet.  Buildbot is now reporting only 442 tests run by the IOCP 
> builder on Win32, and a really nasty looking traceback afterwards.
> 
> Could we revert this merge?

The bug you notice existed before that merge too.  Jonathan helped me
diagnose it: see http://twistedmatrix.com/bugs/issue1294.  It appears trial
is calling reactor.iterate(0) during cleanup, and not expecting that it
could raise an exception.  Making iocp's doIteration swallow and log that
error, like the other reactors do, will probably fix this.  Making trial
deal with that error better (as apparently is not too hard to do with one of
the trial branches) would also fix it.

-Andrew.




From Marcin.Kasperski at softax.com.pl  Sat Oct 29 10:02:25 2005
From: Marcin.Kasperski at softax.com.pl (Marcin Kasperski)
Date: Sat, 29 Oct 2005 18:02:25 +0200
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <20051029023854.10365.1134850715.divmod.quotient.1508@ohm>
References: <20051029023854.10365.1134850715.divmod.quotient.1508@ohm>
Message-ID: <43639D11.1020905@softax.com.pl>


>> I want to encapsulate deferreds into a function that looks like
>> synchronous when invoked.
>
>
> This is a bad idea.  Don't do it.

Depends on the purpose...

There is deferredResult function somewhere in trial (twisted testing) 
package,  deferredResult(somedeferred)  just waits  for this deferred -  
yielding control to the reactor  repeatably. This is probably what 
original poster looks for.




From itamar at itamarst.org  Sat Oct 29 10:18:17 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sat, 29 Oct 2005 12:18:17 -0400
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <43639D11.1020905@softax.com.pl>
References: <20051029023854.10365.1134850715.divmod.quotient.1508@ohm>
	<43639D11.1020905@softax.com.pl>
Message-ID: <1130602697.8634.1.camel@localhost.localdomain>

On Sat, 2005-10-29 at 18:02 +0200, Marcin Kasperski wrote:

> There is deferredResult function somewhere in trial (twisted testing) 
> package,  deferredResult(somedeferred)  just waits  for this deferred -  
> yielding control to the reactor  repeatably. This is probably what 
> original poster looks for.

Do not use this function. If you do, we will just point and laugh when
your code breaks :)

However, deferredGenerator in twisted.internet.defer lets you write code
that *looks* synchronous.




From exarkun at divmod.com  Sat Oct 29 10:50:07 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sat, 29 Oct 2005 12:50:07 -0400
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <43639D11.1020905@softax.com.pl>
Message-ID: <20051029165007.10365.493202614.divmod.quotient.1687@ohm>

On Sat, 29 Oct 2005 18:02:25 +0200, Marcin Kasperski <marcin.kasperski at softax.com.pl> wrote:
>
>>>I want to encapsulate deferreds into a function that looks like
>>>synchronous when invoked.
>>
>>
>>This is a bad idea.  Don't do it.
>
>Depends on the purpose...
>
>There is deferredResult function somewhere in trial (twisted testing) 
>package,  deferredResult(somedeferred)  just waits  for this deferred - 
>yielding control to the reactor  repeatably. This is probably what original 
>poster looks for.
>

Because there seems to be so much confusion on this point,
let me re-iterate Itamar's response:

deferredResult is *broken*.  It does not work now.  It never
worked in the past.  If you use it, your program will suck and
die and you will be sad and the only advise you will get
to fix it will be to stop using deferredResult, which will
probably mean rewriting a significant portion of your program,
since you cannot write asynchronous programs synchronously and
expect them to work.

This is not a conditional point.  It does not depend on
anything.  It is a simple, unavoidable fact.  Disregard it at
your own certain peril.

Jean-Paul



From slamb at slamb.org  Sat Oct 29 11:41:45 2005
From: slamb at slamb.org (Scott Lamb)
Date: Sat, 29 Oct 2005 10:41:45 -0700
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <20051029165007.10365.493202614.divmod.quotient.1687@ohm>
References: <20051029165007.10365.493202614.divmod.quotient.1687@ohm>
Message-ID: <19AEC798-AF27-479F-8D10-F2037A73D347@slamb.org>


On 29 Oct 2005, at 09:50, Jean-Paul Calderone wrote:
>> There is deferredResult function somewhere in trial (twisted  
>> testing) package,  deferredResult(somedeferred)  just waits  for  
>> this deferred - yielding control to the reactor  repeatably. This  
>> is probably what original poster looks for.
>
> Because there seems to be so much confusion on this point,
> let me re-iterate Itamar's response:
>
> deferredResult is *broken*.  It does not work now.  It never
> worked in the past.  If you use it, your program will suck and
> die and you will be sad and the only advise you will get
> to fix it will be to stop using deferredResult, which will
> probably mean rewriting a significant portion of your program,
> since you cannot write asynchronous programs synchronously and
> expect them to work.
>
> This is not a conditional point.  It does not depend on
> anything.  It is a simple, unavoidable fact.  Disregard it at
> your own certain peril.

Why does twisted contain functions which are never to be used? If it  
can't be fixed, why not remove it?

-- 
Scott Lamb <http://www.slamb.org/>




From exarkun at divmod.com  Sat Oct 29 12:58:13 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sat, 29 Oct 2005 14:58:13 -0400
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <19AEC798-AF27-479F-8D10-F2037A73D347@slamb.org>
Message-ID: <20051029185813.10365.1846994552.divmod.quotient.1717@ohm>

On Sat, 29 Oct 2005 10:41:45 -0700, Scott Lamb <slamb at slamb.org> wrote:
>
>On 29 Oct 2005, at 09:50, Jean-Paul Calderone wrote:
>>>There is deferredResult function somewhere in trial (twisted  testing) 
>>>package,  deferredResult(somedeferred)  just waits  for  this deferred - 
>>>yielding control to the reactor  repeatably. This  is probably what 
>>>original poster looks for.
>>
>>Because there seems to be so much confusion on this point,
>>let me re-iterate Itamar's response:
>>
>>deferredResult is *broken*.  It does not work now.  It never
>>worked in the past.  If you use it, your program will suck and
>>die and you will be sad and the only advise you will get
>>to fix it will be to stop using deferredResult, which will
>>probably mean rewriting a significant portion of your program,
>>since you cannot write asynchronous programs synchronously and
>>expect them to work.
>>
>>This is not a conditional point.  It does not depend on
>>anything.  It is a simple, unavoidable fact.  Disregard it at
>>your own certain peril.
>
>Why does twisted contain functions which are never to be used? If it  can't 
>be fixed, why not remove it?

It will be removed shortly.  deferredResult and deferredError have been deprecated since r14685 (Gee, I wish I knew what release that corresponded to - if I were to guess, I'd say 2.1), and will probably be removed in one of the next two releases.  A similarly broken function, wait(), will be deprecated in the next release and removed sometime after that.

Why were they added in the first place?  It was mistakenly thought that they might be able to work.

Jp



From glyph at divmod.com  Sat Oct 29 13:59:26 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Sat, 29 Oct 2005 15:59:26 -0400
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <43639D11.1020905@softax.com.pl>
Message-ID: <20051029195926.10365.2129384939.divmod.quotient.1730@ohm>



On Sat, 29 Oct 2005 18:02:25 +0200, Marcin Kasperski <marcin.kasperski at softax.com.pl> wrote:

>>>I want to encapsulate deferreds into a function that looks like
>>>synchronous when invoked.

>>This is a bad idea.  Don't do it.

>Depends on the purpose...

Nope.  Unequivocally, a bad idea.  The function you mentioned (whose name I will not repeat, even to quote) is SEVERELY deprecated.  Don't use it.

The poster sounds new to Twisted, which means that they have at least 2 years worth of regular asynchronous programming ahead of them before they can make effective and judicious use of shortcuts like deferredGenerator.



From glyph at divmod.com  Sat Oct 29 14:01:51 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Sat, 29 Oct 2005 16:01:51 -0400
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <20051029185813.10365.1846994552.divmod.quotient.1717@ohm>
Message-ID: <20051029200151.10365.622105616.divmod.quotient.1732@ohm>



On Sat, 29 Oct 2005 14:58:13 -0400, Jean-Paul Calderone <exarkun at divmod.com> wrote:
>On Sat, 29 Oct 2005 10:41:45 -0700, Scott Lamb <slamb at slamb.org> wrote:

>>Why does twisted contain functions which are never to be used? If it  can't 
>>be fixed, why not remove it?

>Why were they added in the first place?  It was mistakenly thought that they 
>might be able to work.

And why not remove it?  The test cases still depend on this functionality (and are fragile and break non-deterministically in part because of it) and it is a significant effort to fix them all.  This effort is underway.




From clive at darkarts.co.za  Sat Oct 29 14:12:26 2005
From: clive at darkarts.co.za (Clive Crous)
Date: Sat, 29 Oct 2005 22:12:26 +0200 (SAST)
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <43639D11.1020905@softax.com.pl>
References: <20051029023854.10365.1134850715.divmod.quotient.1508@ohm>
	<43639D11.1020905@softax.com.pl>
Message-ID: <.82.103.130.3.1130616746.squirrel@webmail.darkarts.co.za>


#
#>> I want to encapsulate deferreds into a function that looks like
#>> synchronous when invoked.
#>
#>


I use a similar mechanism in my database wrapper module.

here is an example of it in use:
http://www.darkarts.co.za/repository/tada/doc/examples/taoBasicUsage.py
(online syntax highlighted version of the same:
http://www.rafb.net/paste/results/TmpcYr74.html)

The code is part of my tada project at :
http://www.darkarts.co.za/projects/tada/

I agree, callbacks are ugly, python 2.5 will be great :D


-- 
Clive Crous
http://www.darkarts.co.za/





From slamb at slamb.org  Sat Oct 29 15:25:38 2005
From: slamb at slamb.org (Scott Lamb)
Date: Sat, 29 Oct 2005 14:25:38 -0700
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <.82.103.130.3.1130616746.squirrel@webmail.darkarts.co.za>
References: <20051029023854.10365.1134850715.divmod.quotient.1508@ohm>	<43639D11.1020905@softax.com.pl>
	<.82.103.130.3.1130616746.squirrel@webmail.darkarts.co.za>
Message-ID: <4363E8D2.8050304@slamb.org>

Clive Crous wrote:
> I agree, callbacks are ugly, python 2.5 will be great :D
>   
What will make Python 2.5 better? I'm looking over PEPs now. PEP 342 
looks amazing. I don't see a "Python-Version: 2.5" there, though. Is it 
expected to make it into 2.5? When might it actually get used in 
Twisted, given its policy of supporting old Python version? (I saw the 
recent debate on dropping Python 2.2 support.)




From jml at mumak.net  Sat Oct 29 15:29:22 2005
From: jml at mumak.net (Jonathan Lange)
Date: Sun, 30 Oct 2005 08:29:22 +1100
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <4363E8D2.8050304@slamb.org>
References: <20051029023854.10365.1134850715.divmod.quotient.1508@ohm>
	<43639D11.1020905@softax.com.pl>
	<.82.103.130.3.1130616746.squirrel@webmail.darkarts.co.za>
	<4363E8D2.8050304@slamb.org>
Message-ID: <d06a5cd30510291429i10347fa5h@mail.gmail.com>

On 30/10/05, Scott Lamb <slamb at slamb.org> wrote:
> Clive Crous wrote:
> > I agree, callbacks are ugly, python 2.5 will be great :D
> >
> What will make Python 2.5 better? I'm looking over PEPs now. PEP 342
> looks amazing. I don't see a "Python-Version: 2.5" there, though. Is it
> expected to make it into 2.5? When might it actually get used in
> Twisted, given its policy of supporting old Python version? (I saw the
> recent debate on dropping Python 2.2 support.)
>

*mutters something about not seeing the conclusion of said debate*



From ms at cerenity.org  Sat Oct 29 15:33:30 2005
From: ms at cerenity.org (Michael)
Date: Sat, 29 Oct 2005 22:33:30 +0100
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <20051029195926.10365.2129384939.divmod.quotient.1730@ohm>
References: <20051029195926.10365.2129384939.divmod.quotient.1730@ohm>
Message-ID: <200510292233.30703.ms@cerenity.org>

On Saturday 29 October 2005 20:59, glyph at divmod.com wrote:
> On Sat, 29 Oct 2005 18:02:25 +0200, Marcin Kasperski wrote: 
> >>>I want to encapsulate deferreds into a function that looks like
> >>>synchronous when invoked.
> >>
> >>This is a bad idea.  Don't do it.
> >
> >Depends on the purpose...
>
> Nope.  Unequivocally, a bad idea.  The function you mentioned (whose name I
> will not repeat, even to quote) is SEVERELY deprecated.  Don't use it.
>
> The poster sounds new to Twisted, which means that they have at least 2
> years worth of regular asynchronous programming ahead of them before they
> can make effective and judicious use of shortcuts like deferredGenerator.

Out of interest, what's your opinion on what we're doing with communicating
generators in the project beginning with a "K" (*) ? As far as I'm concerned
we're pretty much doing the same sorts of things as twisted, just written
very differently. However, there are similarities in the way we write things
to some of the ideas raised in this thread, and if you think we're doing
something dumb (as opposed to ideas that could be ripped out at somepoint
*IF* they prove useful), I'd be interested to hear (one of these days I'll 
learn to speak English properly as well).

   (*) Some people think "K" is competition, rather than trying out an
       alternate approach so I'll not mention it by the full name - a misspelt
       shrubbery if the allusion doesn't make sense. :)

I suppose one risk point of our approach is that by trying to make it easier
to work with we risk people thinking concurrency is naturally is easy (which
is potentially quite a dangerous meme, since software concurrency isn't
naturally easy). BTW, FWIW, I read the blog post you pointed at earlier in
the thread and agree with it).

I'll say one thing though, hopefully the original poster realises how much 
they have to do to make their code safe when they're faking synchronous 
behaviour and faking a single process look. If they don't then as everyone 
has said, they're setting themselves up for a world of pain.

Best Regards,


Michael.



From clive at darkarts.co.za  Sat Oct 29 15:40:47 2005
From: clive at darkarts.co.za (Clive Crous)
Date: Sat, 29 Oct 2005 23:40:47 +0200 (SAST)
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <4363E8D2.8050304@slamb.org>
References: <20051029023854.10365.1134850715.divmod.quotient.1508@ohm>	<43639D11.1020905@softax.com.pl>
	<.82.103.130.3.1130616746.squirrel@webmail.darkarts.co.za>
	<4363E8D2.8050304@slamb.org>
Message-ID: <.82.103.130.3.1130622047.squirrel@webmail.darkarts.co.za>


# Clive Crous wrote:
#> I agree, callbacks are ugly, python 2.5 will be great :D
#>
# What will make Python 2.5 better? I'm looking over PEPs now. PEP 342
# looks amazing. I don't see a "Python-Version: 2.5" there, though. Is it
# expected to make it into 2.5? When might it actually get used in
# Twisted, given its policy of supporting old Python version? (I saw the
# recent debate on dropping Python 2.2 support.)

My appologies, i did in fact mean pep342, it somehow got into my head as
'2.5 fact'. Whether it makes it into twisted or not is irrelivant, i will
use it nonetheless ;)

-- 
Clive Crous
http://www.darkarts.co.za/





From moe at divmod.com  Sat Oct 29 15:47:02 2005
From: moe at divmod.com (Moe Aboulkheir)
Date: Sat, 29 Oct 2005 23:47:02 +0200
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <.82.103.130.3.1130616746.squirrel@webmail.darkarts.co.za>
Message-ID: <20051029214702.10365.193620676.divmod.quotient.1754@ohm>

On Sat, 29 Oct 2005 22:12:26 +0200 (SAST), Clive Crous <clive at darkarts.co.za> wrote:
>
>#
>#>> I want to encapsulate deferreds into a function that looks like
>#>> synchronous when invoked.
>#>
>#>
>
>
>I use a similar mechanism in my database wrapper module.
>
>here is an example of it in use:
>http://www.darkarts.co.za/repository/tada/doc/examples/taoBasicUsage.py

the OP wanted a function that looks synchronous when *invoked* - the example you gave doesn't look synchronous to the caller at all - the functions decorated with "genAside" return deferreds.  it's easy to pretend that they don't, if you decorate all of your functions similarly, but at some point some plain, upstream  function is going to have to deal directly with a deferred (this is not the case with the example because it is a script, and nothing actually depends on the result of doit()).  also, if any operation inside the doit() function raises an exception, the reactor will not stop.  something like this would probably be better:

doit().addErrback(log.err).addCallback(lambda ignore: reactor.stop())

i'd like to reiterate glyph's advice that suggesting generator based short-cuts to twisted beginners is not a good idea.  it's *very* easy to use these things without understanding what is actually going on under the hood, and massive confusion frequently arises as soon as something crops up that doesn't fit into that programming style. 

--
Moe Aboulkheir



From clive at darkarts.co.za  Sat Oct 29 16:11:07 2005
From: clive at darkarts.co.za (Clive Crous)
Date: Sun, 30 Oct 2005 00:11:07 +0200 (SAST)
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <20051029214702.10365.193620676.divmod.quotient.1754@ohm>
References: <.82.103.130.3.1130616746.squirrel@webmail.darkarts.co.za>
	<20051029214702.10365.193620676.divmod.quotient.1754@ohm>
Message-ID: <.82.103.130.3.1130623867.squirrel@webmail.darkarts.co.za>


# On Sat, 29 Oct 2005 22:12:26 +0200 (SAST), Clive Crous
# <clive at darkarts.co.za> wrote:
#>
#>#
#>#>> I want to encapsulate deferreds into a function that looks like
#>#>> synchronous when invoked.
#>#>
#>#>
#>
#>
#>I use a similar mechanism in my database wrapper module.
#>
#>here is an example of it in use:
#>http://www.darkarts.co.za/repository/tada/doc/examples/taoBasicUsage.py
#
# the OP wanted a function that looks synchronous when *invoked* - the
# example you gave doesn't look synchronous to the caller at all - the

The origional question was:
""" So, how can I write mySyncFunc() so that at the end I print the result
of someCalculation() and not just 0? """

My example and proposed solution does that. And as such is usable by him.

# functions decorated with "genAside" return deferreds.  it's easy to
# pretend that they don't, if you decorate all of your functions similarly,
# but at some point some plain, upstream  function is going to have to deal
# directly with a deferred (this is not the case with the example because it
# is a script, and nothing actually depends on the result of doit()).  also,
# if any operation inside the doit() function raises an exception, the
# reactor will not stop.  something like this would probably be better:
#
# doit().addErrback(log.err).addCallback(lambda ignore: reactor.stop())
#

it is an example usage, not a real world implementation, of course if
something fails it will die.

# i'd like to reiterate glyph's advice that suggesting generator based
# short-cuts to twisted beginners is not a good idea.  it's *very* easy to
# use these things without understanding what is actually going on under the
# hood, and massive confusion frequently arises as soon as something crops
# up that doesn't fit into that programming style.
#

Why do i hit this wall constantly when discussing twisted usage with
twisted users or developers mostly on freenode's #twisted admitedly:
Telling someone NOT to do something is not answering a question it is
avoiding it.

I pasted the url for the full source so that he could "look under the
hood" if he feels uncomfortable with it's mechanism he needent use it.  By
your reasoning surely he should go through the entire twisted codebase
aswell and know exactly what a deffered is doing "under the hood" and how
twisted does it's asyncronousity before using it ?

-- 
Clive Crous
http://www.darkarts.co.za/





From moe at divmod.com  Sat Oct 29 17:33:16 2005
From: moe at divmod.com (Moe Aboulkheir)
Date: Sun, 30 Oct 2005 01:33:16 +0200
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <.82.103.130.3.1130623867.squirrel@webmail.darkarts.co.za>
Message-ID: <20051029233316.10365.77217872.divmod.quotient.1778@ohm>



On Sun, 30 Oct 2005 00:11:07 +0200 (SAST), Clive Crous <clive at darkarts.co.za> wrote:

>The origional question was:
>""" So, how can I write mySyncFunc() so that at the end I print the result
>of someCalculation() and not just 0? """
>
>My example and proposed solution does that. And as such is usable by him.

no, it really doesn't.  here is the code snippet given by the original poster:

def mySyncFunc()
   x = 0
   def done(data):
      global x
      x = data

   d = someCalculation()
   d.addCallback(done)
   <something here to hold until "done" is really done>
   return x

the desired functionality is "at the end i print the result of someCalculation() and not just 0".  this could obviously be done by changing the first line of done() to "print data".  but the "return x" betrays the intention that the function would ideally return the value of "x" (returning the _value_ of "x" is worlds away from returning a deferred that fires with the value of "x").  no defgen type solution is going to make this possible

>Why do i hit this wall constantly when discussing twisted usage with
>twisted users or developers mostly on freenode's #twisted admitedly:
>Telling someone NOT to do something is not answering a question it is
>avoiding it.

the point here is that this particular question does not have a satisfying answer.  it has been beaten to death recently that you cannot magically expose a synchronous interface to asynchronous code.  so, in summary, the question was answered, by several people in this thread, and the answer is "you cannot do that and expect your code to work reliably".  is that not a valid answer?

>I pasted the url for the full source so that he could "look under the
>hood" if he feels uncomfortable with it's mechanism he needent use it.  By
>your reasoning surely he should go through the entire twisted codebase
>aswell and know exactly what a deffered is doing "under the hood" and how
>twisted does it's asyncronousity before using it ?

ideally yes.  somebody unfamiliar with deferreds is going to be in no position to determine whether or not they are comfortable with a generator based mechanism for handling them.  people already associate unfair amounts of magic with twisted, and i dont think suggesting such abstract interfaces to beginners is an effective way to mitigate this.

--
Moe Aboulkheir



From radeex at gmail.com  Sat Oct 29 20:10:19 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Sun, 30 Oct 2005 13:10:19 +1100
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <.82.103.130.3.1130622047.squirrel@webmail.darkarts.co.za>
References: <20051029023854.10365.1134850715.divmod.quotient.1508@ohm>
	<43639D11.1020905@softax.com.pl>
	<.82.103.130.3.1130616746.squirrel@webmail.darkarts.co.za>
	<4363E8D2.8050304@slamb.org>
	<.82.103.130.3.1130622047.squirrel@webmail.darkarts.co.za>
Message-ID: <60ed19d40510291910x1991db78y2ab4d58f9a5594e7@mail.gmail.com>

On 10/30/05, Clive Crous <clive at darkarts.co.za> wrote:
>
> # Clive Crous wrote:
> #> I agree, callbacks are ugly, python 2.5 will be great :D
> #>
> # What will make Python 2.5 better? I'm looking over PEPs now. PEP 342
> # looks amazing. I don't see a "Python-Version: 2.5" there, though. Is it
> # expected to make it into 2.5? When might it actually get used in
> # Twisted, given its policy of supporting old Python version? (I saw the
> # recent debate on dropping Python 2.2 support.)
>
> My appologies, i did in fact mean pep342, it somehow got into my head as
> '2.5 fact'. Whether it makes it into twisted or not is irrelivant, i will
> use it nonetheless ;)

Well, it _is_ currently in Python's trunk, so unless it's reverted
before 2.5 is released, it'll probably be in 2.5.

--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+



From grimmtooth at gmail.com  Sat Oct 29 22:19:48 2005
From: grimmtooth at gmail.com (Jeff Grimmett)
Date: Sun, 30 Oct 2005 00:19:48 -0400
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <20051029195926.10365.2129384939.divmod.quotient.1730@ohm>
References: <43639D11.1020905@softax.com.pl>
	<20051029195926.10365.2129384939.divmod.quotient.1730@ohm>
Message-ID: <8f4623fb0510292119nfd4cf2cs336f7003271856ff@mail.gmail.com>

On 10/29/05, glyph at divmod.com <glyph at divmod.com> wrote:

> The poster sounds new to Twisted, which means that they have at least 2
> years worth of regular asynchronous programming ahead of them before they
> can make effective and judicious use of shortcuts like deferredGenerator.


Oh, cool - three more months and I gain enlightment! I can't wait! ;-)

--
"Things fall apart. The Center cannot hold."
- Life as a QA geek, in a nutshell.

Best,

Jeff
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20051030/e8ce467a/attachment.html>

From glyph at divmod.com  Sun Oct 30 00:31:42 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Sun, 30 Oct 2005 01:31:42 -0500
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <200510292233.30703.ms@cerenity.org>
Message-ID: <20051030063142.10365.1949282381.divmod.quotient.1870@ohm>



On Sat, 29 Oct 2005 22:33:30 +0100, Michael <ms at cerenity.org> wrote:

>Out of interest, what's your opinion on what we're doing with communicating
>generators in the project beginning with a "K" (*) ? As far as I'm concerned
>we're pretty much doing the same sorts of things as twisted, just written
>very differently. However, there are similarities in the way we write things
>to some of the ideas raised in this thread, and if you think we're doing
>something dumb (as opposed to ideas that could be ripped out at somepoint
>*IF* they prove useful), I'd be interested to hear (one of these days I'll
>learn to speak English properly as well).

It's not so much that "K" is doing something dumb (for reference: we are not talking about the successor to J, which is itself a successor to APL).  With a project like "K", there would be as much focus on explaining correct usage of generators as there is in Twisted focusing on correct usage of Deferreds.  It would be hard to write a program using "K" and not understand the ramifications of what you're doing.

>I suppose one risk point of our approach is that by trying to make it easier
>to work with we risk people thinking concurrency is naturally is easy (which
>is potentially quite a dangerous meme, since software concurrency isn't
>naturally easy). BTW, FWIW, I read the blog post you pointed at earlier in
>the thread and agree with it).

I looked at "K".  Reading code in it was powerfully weird - and this is coming from the author of Twisted ;-). It was enough like Erlang that it would only make things easy for experts, so I don't think that it would lead to this problem - on the other hand, I haven't seen how large communities react to it.

>I'll say one thing though, hopefully the original poster realises how much
>they have to do to make their code safe when they're faking synchronous
>behaviour and faking a single process look. If they don't then as everyone
>has said, they're setting themselves up for a world of pain.

I have a lot of experience dealing with people that ask questions in the form that the poster did.  As a rule they don't have any idea how hard solving concurrency problems is, and have been lead to believe (by Java or whatever) that concurrency is easy, just a matter of running 2 or more "simple" synchronous (-looking) programs at a time.  While I don't know the OP personally, I am willing to risk their taking offense, so that I can continue to drive home the point to hordes of fledgeling developers out there that seem to desperately want to believe that massively concurrent programming is easy.



From glyph at divmod.com  Sun Oct 30 01:19:31 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Sun, 30 Oct 2005 02:19:31 -0500
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <.82.103.130.3.1130623867.squirrel@webmail.darkarts.co.za>
Message-ID: <20051030071931.10365.13030611.divmod.quotient.1881@ohm>

On Sun, 30 Oct 2005 00:11:07 +0200 (SAST), Clive Crous <clive at darkarts.co.za> wrote:

>Why do i hit this wall constantly when discussing twisted usage with
>twisted users or developers mostly on freenode's #twisted admitedly:
>Telling someone NOT to do something is not answering a question it is
>avoiding it.

You are correct.  I do not disagree with this fact, and it does not change my opinion of the behavior involved.  Here is the ugly truth of the non-answers to such questions:

I do not care about most of the posters to this list.  I am happy that they use Twisted, and even more happy if they are pleased by it, but ultimately I am really just trying to improve the world I live in, and that means the average quality of available Python code.  That means I am only going to answer questions which I believe will contribute positively to the state of affairs as it regards code quality in general, and Python code quality specifically.

These people who people whose questions are answered (or not answered) on this list or on IRC will go and write applications or libraries based on the answers they receive.  I may be stuck maintaining or using that code at some point.

Now, maybe if I know, but don't tell them how to do some ridiculous thing they're trying to do, they'll miss their deadline at work or they won't turn on their homework assignment on time and I could have prevented that.  They will be unhappy.  Making them happy isn't my purpose here, so I don't care.  Maybe they'll abandon their Python project and do it in Ruby instead because the Python community is so hostile.

Many people think that this loss of contributing labor is a great tragedy for an open-source community, but IMHO it is really the best possible consequence.  All the people who don't understand programming will end up in the more-polite Rails or PHP or Django or TurboGears communities and generate huge piles of code that don't work.  Then all the guys who know what they're doing will stick around here and work on Twisted stuff.  In the sense that we compete with those projects, this is great!  It's like sabotage-by-proxy.  When those projects are a smouldering ruin of inconsistent style and half-baked, buggy, insecure code, people who want a functional product will come ask those of us with Twisted expertise.

A more realistic consequence, however, is that programmers new to Twisted will adopt a more consistent style, and avoid fighting the framework, and concentrate on solving their actual problems.  Some will still go away, yes, but generally there is some reason they came to Twisted in the first place and it remains valid even if we won't make it easy to do things we collectively regard as bad practice.

I have adopted this stance not merely because I am abraisive asshole, but based on long experience with IRC and with teaching programmers how to use things.  There are several projects that were developed early on with Twisted that were utter disasters because I politely and pateiently answered all the authors' questions about how to make Deferreds appear to block, how to call reactor functions from threads, and how to invoke Twisted from C code, rather than stopping and saying "hey, what are you *really* trying to do?".  (No, I will not name these projects.  I do have *some* manners.)

I can only assume that the other Twisted devs you've had problems with have gotten this habit from similar experiences, but they may have their own reasons.

>I pasted the url for the full source so that he could "look under the
>hood" if he feels uncomfortable with it's mechanism he needent use it.  By
>your reasoning surely he should go through the entire twisted codebase
>aswell and know exactly what a deffered is doing "under the hood" and how
>twisted does it's asyncronousity before using it ?

It's not so much whether the OP is comfortable with your explanation or not.  If I were confident that all programmers would go and investigate the solution first, I would not care to make a post such as this.  It's whether, upon not understanding, the OP will encourage others to program using bad style with a tool that he is comfortable with but but does not *understand*.  It is quite possible that the OP understands your solution perfectly well, in which case this conversation is useless to him and he can ignore it, but still socially useful in that it will appear in google searches when other, less experienced programmers have the bright idea that they can make Deferreds magically go away somehow.

(Apologies to the OP: I really have no idea about you at all.  I am really speaking of a hypothetical average programmer.)



From frank at chagford.com  Sun Oct 30 01:50:31 2005
From: frank at chagford.com (Frank Millman)
Date: Sun, 30 Oct 2005 09:50:31 +0200
Subject: [Twisted-Python] Newbie question - simpleclient.py crashes
Message-ID: <VPOP32.2.0a.20051030095112.625.e.1.a40c1f81@chagford.com>

Hi all,

I have just started looking at Twisted. I thought I would start by working
my way through the examples. The first one I tried crashed on me! I can
patch it to get it to work, but I would rather learn the exact reason for
the crash, and the correct way to fix it.

I am trying to run simpleserver.py and simpleclient.py, using RH9, Python
2.4.1, and Twisted 2.1.0. I start simpleserver from tty1, and then from tty2
I run simpleclient. This is the result (shortened) -

Server said: hello, world!
connection lost
Connection lost - goodbye!
Traceback:
  [...]
  File '.../twisted/internet/base.py', line 398, in _continueSystemEvent
    for callList in sysEvtTriggers[1], sysEvtTriggers[2]:
  exceptions.TypeError: unsubscriptable object

AFAICT, this is what is happening.

simpleclient calls reactor.stop() from a number of places, but for this
exercise it calls it twice - once from EchoClient.connectionLost(), once
from EchoFactory.clientConnectionLost(). The first time,
base._continueSystemEvent() is called with eventType "shutdown". It handles
the event, then deletes "shutdown" from self._eventTriggers. When it is
called the second time, also with eventType "shutdown", it cannot find the
event type as it has been deleted, so it crashes with the above traceback.

I changed simpleclient.EchoClient.connectionLost() so that it does not call
reactor.stop(), and the program runs without errors. Is this the correct
solution? Why do the Protocol and the Factory both have a connectionLost
method? Which one should call reactor.stop()?

Thanks.

Frank Millman




From glyph at divmod.com  Sun Oct 30 01:21:34 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Sun, 30 Oct 2005 03:21:34 -0500
Subject: [Twisted-Python] Newbie question - simpleclient.py crashes
In-Reply-To: <VPOP32.2.0a.20051030095112.625.e.1.a40c1f81@chagford.com>
Message-ID: <20051030082134.10365.504973795.divmod.quotient.1894@ohm>



On Sun, 30 Oct 2005 09:50:31 +0200, Frank Millman <frank at chagford.com> wrote:
>Hi all,

Hi Frank!

>I have just started looking at Twisted. I thought I would start by working
>my way through the examples. The first one I tried crashed on me! I can
>patch it to get it to work, but I would rather learn the exact reason for
>the crash, and the correct way to fix it.

I believe you have spotted a rather serious bug.  Can you add this to the tracker <http://www.twistedmatrix.com/bugs> for further discussion and fixing?

Thanks!



From lists-twistedmatrix at silverwraith.com  Sun Oct 30 01:55:08 2005
From: lists-twistedmatrix at silverwraith.com (Avleen Vig)
Date: Sun, 30 Oct 2005 01:55:08 -0700
Subject: [Twisted-Python] twisted words irc patch for usernames
Message-ID: <20051030085508.GF55915@silverwraith.com>

Currently when twisted connects to an irc server, the username on the
USER connect line, is assumed to be the same as the nickname.

Below is a patch that lets the username be set manually the same way as
'password' is defined. If a username isn't specified, it defaults to
assuming self.username = nickname

I found this useful to connect to a server which required a specific
username as part of its authentication but I didn't want to / need to
run ident. I couldn't think of a good reason for not being able to set
the username if we can already set everything else :-)


Index: Twisted/twisted/words/protocols/irc.py
===================================================================
--- Twisted/twisted/words/protocols/irc.py      (revision 14959)
+++ Twisted/twisted/words/protocols/irc.py      (working copy)
@@ -535,6 +535,7 @@
     nickname = 'irc'
     password = None
     realname = None
+    username = None
     ### Responses to various CTCP queries.
 
     userinfo = None
@@ -895,7 +896,9 @@
         if self.password is not None:
             self.sendLine("PASS %s" % self.password)
         self.setNick(nickname)
-        self.sendLine("USER %s foo bar :%s" % (nickname, self.realname))
+        if self.username is None:
+            self.username = nickname
+        self.sendLine("USER %s foo bar :%s" % (self.username, self.realname))
 
     def setNick(self, nickname):
         self.nickname = nickname


-- 
Avleen Vig
Systems Administrator
Personal: www.silverwraith.com

"Wickedness is a myth invented by good people to account for the curious
 attractiveness of others."  - Oscar Wilde



From jml at mumak.net  Sun Oct 30 03:50:35 2005
From: jml at mumak.net (Jonathan Lange)
Date: Sun, 30 Oct 2005 21:50:35 +1100
Subject: [Twisted-Python] Trial and KeyboardInterrupt
Message-ID: <d06a5cd30510300250s2557a408w@mail.gmail.com>

Trial and KeyboardInterrupt have had a long and chequered history (see
http://twistedmatrix.com/bugs/issue628).  I'd like to try to solve the
problem once, and to never have it crop up again.

To try to do this, I need effective unit tests for KeyboardInterrupt. 
However, I've got no idea on how to do this.  Raising
KeyboardInterrupt isn't enough.

Please, someone, write (or tell me how to write) unit tests for
Control-C interrupting the Trial process.

Thanks,
jml



From ms at cerenity.org  Sun Oct 30 04:48:05 2005
From: ms at cerenity.org (Michael)
Date: Sun, 30 Oct 2005 11:48:05 +0000
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <20051030063142.10365.1949282381.divmod.quotient.1870@ohm>
References: <20051030063142.10365.1949282381.divmod.quotient.1870@ohm>
Message-ID: <200510301148.05405.ms@cerenity.org>

On Sunday 30 October 2005 06:31, glyph at divmod.com wrote:
> It's not so much that "K" is doing something dumb (for reference: we are
> not talking about the successor to J, which is itself a successor to APL).
>  With a project like "K", there would be as much focus on explaining
> correct usage of generators as there is in Twisted focusing on correct
> usage of Deferreds.  It would be hard to write a program using "K" and not
> understand the ramifications of what you're doing.

It does seem to be the case, yes. 

> I looked at "K".  Reading code in it was powerfully weird - and this is
> coming from the author of Twisted ;-).

Great :-) Can I quote you on that? :-D

Seriously though, I did kinda expect that. I suspect the two different ways
of writing code will be easier to different sorts of people. Personally I find
the approach natural and normal. You can take any implication you like
from that ;-)

> It was enough like Erlang that it would only make things easy for experts, 
> so I don't think that it would lead to this problem - on the other hand, I
> haven't seen how large communities react to it.

Interesting viewpoint. KInda at odds with what we've seen so far, but then we 
haven't had a large community react to it yet, there's also the caveat above 
of it might be a mindset thing rather than skill level this, and mainly at 
the moment I don't think it's ready for a large community yet* - if one's 
appropriate (We're still in the process of finding the best way of writing 
systems using it).
   * We're not in a rush

FWIW, it's more inspired by things which /aren't/ Erlang. I've not written 
anything in Erlang :)

If it turns out though that you're right - only makes things easy for
experts - then the project's failed (which won't be a problem, that's
the point of research to try things and see what works/doesn't, just
means I have to try again). As a result I hope you're wrong (for
once :).

Thanks for the feedback!

Best Regards,


Michael.



From clive at darkarts.co.za  Sun Oct 30 15:02:47 2005
From: clive at darkarts.co.za (Clive Crous)
Date: Mon, 31 Oct 2005 00:02:47 +0200 (SAST)
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <20051030071931.10365.13030611.divmod.quotient.1881@ohm>
References: <.82.103.130.3.1130623867.squirrel@webmail.darkarts.co.za>
	<20051030071931.10365.13030611.divmod.quotient.1881@ohm>
Message-ID: <.82.103.130.3.1130709767.squirrel@webmail.darkarts.co.za>

#>Why do i hit this wall constantly when discussing twisted usage with
#>twisted users or developers mostly on freenode's #twisted admitedly:
#>Telling someone NOT to do something is not answering a question it is
#>avoiding it.
#
# You are correct.  I do not disagree with this fact, and it does not change
# my opinion of the behavior involved.  Here is the ugly truth of the
# non-answers to such questions:
#
# I do not care about most of the posters to this list.  I am happy that
# they use Twisted, and even more happy if they are pleased by it, but
# ultimately I am really just trying to improve the world I live in, and
# that means the average quality of available Python code.  That means I am
# only going to answer questions which I believe will contribute positively
# to the state of affairs as it regards code quality in general, and Python
# code quality specifically.
#
# These people who people whose questions are answered (or not answered) on
# this list or on IRC will go and write applications or libraries based on
# the answers they receive.  I may be stuck maintaining or using that code
# at some point.
#
# Now, maybe if I know, but don't tell them how to do some ridiculous thing
# they're trying to do, they'll miss their deadline at work or they won't
# turn on their homework assignment on time and I could have prevented that.
#  They will be unhappy.  Making them happy isn't my purpose here, so I
# don't care.  Maybe they'll abandon their Python project and do it in Ruby
# instead because the Python community is so hostile.
#
# Many people think that this loss of contributing labor is a great tragedy
# for an open-source community, but IMHO it is really the best possible
# consequence.  All the people who don't understand programming will end up
# in the more-polite Rails or PHP or Django or TurboGears communities and
# generate huge piles of code that don't work.  Then all the guys who know
# what they're doing will stick around here and work on Twisted stuff.  In
# the sense that we compete with those projects, this is great!  It's like
# sabotage-by-proxy.  When those projects are a smouldering ruin of
# inconsistent style and half-baked, buggy, insecure code, people who want a
# functional product will come ask those of us with Twisted expertise.
#
# A more realistic consequence, however, is that programmers new to Twisted
# will adopt a more consistent style, and avoid fighting the framework, and
# concentrate on solving their actual problems.  Some will still go away,
# yes, but generally there is some reason they came to Twisted in the first
# place and it remains valid even if we won't make it easy to do things we
# collectively regard as bad practice.
#
# I have adopted this stance not merely because I am abraisive asshole, but
# based on long experience with IRC and with teaching programmers how to use
# things.  There are several projects that were developed early on with
# Twisted that were utter disasters because I politely and pateiently
# answered all the authors' questions about how to make Deferreds appear to
# block, how to call reactor functions from threads, and how to invoke
# Twisted from C code, rather than stopping and saying "hey, what are you
# *really* trying to do?".  (No, I will not name these projects.  I do have
# *some* manners.)
#
# I can only assume that the other Twisted devs you've had problems with
# have gotten this habit from similar experiences, but they may have their
# own reasons.
#

I find it quite amusing, yet somewhat disturbing how you justify this
behaviour to yourselves.  I have worked on many projects in my life and
each of them was unique in it's specific requirements.  Let me give you
two of my current projects as brief examples:

The first, is for a client who would like a downloadable executable
available on his website.  The primary need, beside the obvious need
that it in fact work, is that the executable be as tiny as possible to
encourage potential clients in turn to download and use it.

The second project is a set of modules for internal use by the company
I now work for.  The primary focus, again besides the obvious need for
it to be functional, is that it be highly maintainable and easily
modified by the senior most programmer or the newest, week-old junior
developer.  Anybody must be able to look at the code, understand it
quickly and easily, and be able to modify parts as required.

If I employed the same style of programming in both of these projects I
would be a fool.  Some of the styles implemented to make a small
executable in any other circumstance would be considered incredibly bad
practice, yet there it is, working perfectly and being incredibly small
while doing so.  Meanwhile some of the code within the second example is
incredibly verbose and a seasoned coder would look at it and say "Why
for the love of python are you doing this the long way round?" ... once
again, it fulfills it's specification perfectly while doing it's job to
the satisfaction of all concerned.

When it comes to implementations of twisted, one must take into
account the context in which the program is being developed and the
specific use cases it requires.  No two implementations will ever be
the same, and no two implementations should ever use twisted in exactly
the same way.  To expect identical or even similar usage of a module in
every single instance is poor practice in itself.

If I come online, and ask: "How do i use A with B" and the response is
"Dont!", as in this thread, it shows a high level of arrogance, extreme
presumption and an incredible 'naivety to programming' by the person
giving that "answer".

There always will be people who have different needs to you.
Enforcement of usage policy on users is the realm of restrictive
corporate use policy and software distribution licensing as one expects
from Microsoft et al.

I have worked with programmers who hold the same mind-set as is being
shown here.
Some of the "programmers" with whom I have worked in the past, were insistent
that things should be done in a particularly restrictive, stylized manner and
that no-other-way-is-the-right-way.

There is *NO* absolute "right way" when it comes to coding.  There are
good ways
and bad ways however all are dependent on the context of the project at hand
and it's particular specifications.

The most common result of such narrow-minded
programming mind-sets is the inability to complete the task at hand.
Programs will be written, rewritten, re-factored, tossed out and
restarted.  This cycle will never end as long as this zenith of coding
"nirvana" remains the goal.  The tragic result of this is that
projects repeatedly fail to reach a usable state, to the detriment of
all.

I hope twisted development does not go down this path and shows
some maturity and the ability to sustain it's own usage.  I really
do love the twisted framework and would hate to see it dragged into a
quagmire of self-indulgent disarray to the despair of a dedicated and
loving user base (whom you freely admit not to care about at all).

--
Clive Crous
http://www.darkarts.co.za/






From glyph at divmod.com  Sun Oct 30 16:20:12 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Sun, 30 Oct 2005 18:20:12 -0500
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <.82.103.130.3.1130709767.squirrel@webmail.darkarts.co.za>
Message-ID: <20051030232012.10365.1563919067.divmod.quotient.2093@ohm>

On Mon, 31 Oct 2005 00:02:47 +0200 (SAST), Clive Crous <clive at darkarts.co.za> wrote:

>If I come online, and ask: "How do i use A with B" and the response is
>"Dont!", as in this thread, it shows a high level of arrogance, extreme
>presumption and an incredible 'naivety to programming' by the person
>giving that "answer".
>
>There always will be people who have different needs to you.
>Enforcement of usage policy on users is the realm of restrictive
>corporate use policy and software distribution licensing as one expects
>from Microsoft et al.

You're calling me arrogant and naive, and a fascist champion of policy enforcement: yet you have the gall to tell me what *I* must do with *my* freely donated time.  I didn't say "only stupid people do this" when you answered the question, or delete your message from the archives, I merely offered my opinion that it is a bad thing to do.  You are replying to my explanation of why we say things like that, not why *you* must never do so.

However, now that we're name-calling, let me suggest instead that *you* are arrogant to presume that you know more about the questions people ask about Twisted than I do (how long do you think I've been answering these, anyway?), and that you are incredibly naive about education in general.  When you have seen the same question asked a thousand times, you learn to see the question behind the question.  You understand the unseen consequences of answering it straightforwardly.  What can be a perfectly legitimate question from an intermediate or expert programmer is simply a set-up for disaster from a novice.

For example, if a 12-year-old girl asks you "can I get pregnant from sex if I only do it once", this is most likely not idle curiosity speaking.  You should not answer as accurately as possible, with equivocations about the probability.  You say "YES, YOU ABSOLUTELY WILL, WHERE IS YOUR MOTHER".  If a married couple in a fertility clinic asks you a similar question, about how difficult it is on average to conceive, it would be a good idea to just answer.

The context of this mailing list is less obvious than either of those, but I have found over time that if the poster really knows what they're doing, they will respond to my refusal with an explanation and I can offer more detail at that point - quite often they are asking a very different question than "how can I make this look synchronous", it is something like "I need to integrate with a proprietary library that will call my code synchronously and I have no access to its source code" or "I would like to use a Twisted protocol implementation from within an existing Zope2 site".

Neither of those questions are properly answered by "use deferredResult" or "use defgen".  It's complicated.

>The most common result of such narrow-minded
>programming mind-sets is the inability to complete the task at hand.
>Programs will be written, rewritten, re-factored, tossed out and
>restarted.  This cycle will never end as long as this zenith of coding
>"nirvana" remains the goal.  The tragic result of this is that
>projects repeatedly fail to reach a usable state, to the detriment of
>all.

This is exactly what happens with Twisted - you got everything right except the result, which is that *code quality goes up over time*.  It is this dedication to quality that makes the project fun and interesting to use.  Granted, breaking backwards compatibility is never fun, but we try hard to minimize the impact of that.

For a project which has a strict deadline and budgetary constraints, this is obviously a terrible tragedy.  I have seen it, I have even caused it (who hasn't?), and it's ugly.  However, this is exactly what makes open source so much fun; you don't have to get it right the first time, you don't have to get it right in 6 months, you can just keep trying and trying and trying.  Eventually you get it right and everyone thinks it's awesome.  I am sure that no current users remember the massive upheaval and 1 1/2 years it took to get the transport/protocol split properly implemented.  If we had not "rewritten, re-factored, tossed out and restarted" that code, Twisted would be nothing but a much set of libraries for Medusa today.

>I hope twisted development does not go down this path and shows
>some maturity and the ability to sustain it's own usage.  I really
>do love the twisted framework and would hate to see it dragged into a
>quagmire of self-indulgent disarray to the despair of a dedicated and
>loving user base (whom you freely admit not to care about at all).

Luckily I am also a user and my career, my reputation and my income all depend quite explicitly upon its success.  Many Twisted developers are in the same position now, so selfish motivations are more than adequate.

Seriously though, my point about not caring about the community was slightly tongue-in-cheek.  The point there is that I am not here to do your homework assignment, I am not here to do your job for you.  If you think that's what I *am* here for, then no, I don't care about you.

I am here to help you learn to use Twisted and learn to use it correctly.  If you don't like my advice, the code is all free, there are other people to answer your questions, and there is quite a bit of freely-available documentation (and even a book from O'Reilly now!).



From exarkun at divmod.com  Sun Oct 30 16:26:18 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 30 Oct 2005 18:26:18 -0500
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <.82.103.130.3.1130709767.squirrel@webmail.darkarts.co.za>
Message-ID: <20051030232618.10365.1279041009.divmod.quotient.2095@ohm>

On Mon, 31 Oct 2005 00:02:47 +0200 (SAST), Clive Crous <clive at darkarts.co.za> wrote:
>#>Why do i hit this wall constantly when discussing twisted usage with
>#>twisted users or developers mostly on freenode's #twisted admitedly:
>#>Telling someone NOT to do something is not answering a question it is
>#>avoiding it.
>#
> [snip]
>#
># I have adopted this stance not merely because I am abraisive asshole, but
># based on long experience with IRC and with teaching programmers how to use
># things.  There are several projects that were developed early on with
># Twisted that were utter disasters because I politely and pateiently
># answered all the authors' questions about how to make Deferreds appear to
># block, how to call reactor functions from threads, and how to invoke
># Twisted from C code, rather than stopping and saying "hey, what are you
># *really* trying to do?".  (No, I will not name these projects.  I do have
># *some* manners.)
>#
># I can only assume that the other Twisted devs you've had problems with
># have gotten this habit from similar experiences, but they may have their
># own reasons.
>#
>
> [snip]
>
>If I come online, and ask: "How do i use A with B" and the response is
>"Dont!", as in this thread, it shows a high level of arrogance, extreme
>presumption and an incredible 'naivety to programming' by the person
>giving that "answer".

I find it equally arrogant to expect the community to behave in the way you would prefer.  What is owed to you that justifies this, exactly?

>There always will be people who have different needs to you.
>Enforcement of usage policy on users is the realm of restrictive
>corporate use policy and software distribution licensing as one expects
>from Microsoft et al.

First of all, no one is forcing anything on you.  You're not locked in.  Don't use Twisted if you don't want to.  Don't use Twisted in the manner we are explaining is correct if you don't want to.  Fork Twisted and take development in a better direction.  Rip parts of Twisted out and drop them into your own project to use how you please.  Spit on our works.  Curse our names and our progeny to the seventh generation, if that's your thing.  Who's going to stop you?  Not me, and not anybody else on this list.

I recognize that you probably don't want to do any of these things.  You want to keep using Twisted, and you want the Twisted team to do things your way.  I have this same expectation of other projects.  Let's face it: it's an unreasonable expectation. 

Twisted is developed for you by a team of uncompensated developers working in their spare time.  Likewise, support is being offered for free.  It should not be too surprising that it is also being offered *conditionally*.  A lot of us are happy to help with problems that don't directly benefit us, but a lot of us are not happy to help with solutions that we think are just as problematic as that which they are intended to resolve.  Are you going to fault us for limiting the extent of our unpaid donations (frequently to commercial development)?  Please.

Furthermore, a perfectly legitimate response to "Don't!" is "But I have constraints X, Y, and Z."  You may feel it is unreasonable to explain your situation, but that's pretty much too bad for you.  If you want to be able to dictate people's behavior to this extent, negotiate a contract with them.  Now, we may not be convinced by constraints X, Y, and Z, but in most cases where they are rational and correct (ie, not "I have to use threads because Cthulhu will rise and consume the world if I do not" - although if you are working on the project to prevent this, and are using Twisted, awesome!  Can we put you on the successes page?), we will be.  It is the refusal to explain them at all that is most annoying, and most likely to result in no assistance being rendered.

I don't think this attitude is unique to the Twisted community.  I don't even think it is unique to open source communities.  Nor do I think it is a negative attitude.  I think it is more open minded and generally productive than just presenting the precise answer to each exact question posed.  In many cases, I have concrete evidence that not answering a direct question with a superficially correct response has helped the questioner measurable, and I've been thanked for this approach repeatedly.

>I have worked with programmers who hold the same mind-set as is being
>shown here.
>Some of the "programmers" with whom I have worked in the past, were insistent
>that things should be done in a particularly restrictive, stylized manner and
>that no-other-way-is-the-right-way.

This is a mischaracterization of the attitude I use when trying to help people, and from what I've witnessed of the interactions of other members of the Twisted community, I think it is not representitive of their behavior either.

The interaction that gives rise to this impression, in my experience, most typically involves much more adament insistence and inflexibility on the part of the person seeking help than on the part of the person from which help is sought: the questioner *knows* they are already on the right track, and if this jerk he is talking to would just stop asking questions and answer them for a change, the problem would immediately be solved.

>There is *NO* absolute "right way" when it comes to coding.  There are
>good ways
>and bad ways however all are dependent on the context of the project at hand
>and it's particular specifications.

Which is why I stress the importance of discussing the context of a problem before trying to resolve it.

>The most common result of such narrow-minded
>programming mind-sets is the inability to complete the task at hand.
>Programs will be written, rewritten, re-factored, tossed out and
>restarted.  This cycle will never end as long as this zenith of coding
>"nirvana" remains the goal.  The tragic result of this is that
>projects repeatedly fail to reach a usable state, to the detriment of
>all.

Twisted comes with a news server, a mail server, a chat server, a chat client, a remote REPL with multiple front ends, a plugin system, numerous persistence systems, a documentation framework with multiple input and output formats, an "Application" abstraction, an SSH client, an SSH server, an authentication and authorization system, a mature TCP, UDP, and SSL client and server API with numerous implementations for numerous platforms, an asynchronous DB-API 2.0 wrapper, an inetd-alike, a high-level remote method and object protocol, a unit test framework and rich command line tool for interacting with test suites, a web server, a web client, a DNS server, a DNS client, and FTP server, an FTP client, implementations of the echo, discard, chargen, ident, finger, QOTD, who, daytime, time, telnet, sip, toc, and oscar protocols, a filesystem path abstraction, a threadpool implementation, a much higher-quality module reloading system than the builtin reload(), a logging system, and quite a few other mature, stable features.

Arguing that the Twisted team cannot complete tasks is ridiculous.

>I hope twisted development does not go down this path and shows
>some maturity and the ability to sustain it's own usage.  I really
>do love the twisted framework and would hate to see it dragged into a
>quagmire of self-indulgent disarray to the despair of a dedicated and
>loving user base (whom you freely admit not to care about at all).

Twisted has been driven by hate for a long time.  Hate and shared goal of the team to destroy the sun.  There's no change in direction going on, at least with regard to the fundamental drive directing Twisted's development.

Jean-Paul



From foom at fuhm.net  Sun Oct 30 19:58:51 2005
From: foom at fuhm.net (James Y Knight)
Date: Sun, 30 Oct 2005 21:58:51 -0500
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <1130535622.1711.158.camel@pcard0ze.ca.nortel.com>
References: <1130535622.1711.158.camel@pcard0ze.ca.nortel.com>
Message-ID: <CF4FC6E5-F45A-4BD3-92EE-260D6EBFDFA7@fuhm.net>

Given that there has already been a long thread about how one should  
not do this, which I completely agree with, I'll not repeat it. Note  
that I do not recommend this solution to the OP, but rather post this  
just to appease to the people complaining about how the only answer  
given is "don't do that". "Don't do that" is the correct answer given  
the information so far available, but, here's a different non-answer,  
with code.

On Oct 28, 2005, at 5:40 PM, Pedro Sanchez wrote:
> def mySyncFunc()
>    x = 0
>    def done(data):
>       global x
>       x = data
>
>    d = someCalculation()
>    d.addCallback(done)
>    <something here to hold until "done" is really done>
>    return x
>
> print mySyncFunc()
>

The above code cannot work because for "done" to become done, the  
twisted event loop must get a chance to run. For the event loop to  
get a chance to run, you must return from that function. Basically,  
how can you "block" waiting for an async event, while letting the  
twisted event loop continue running? There is an answer: run your  
code in a separate thread. However, that doesn't work either, because  
the OP wants to use twisted APIs like ADBAPI or networking in  
someCalculation. So there really is no way to do literally what's  
asked in a working way. But, you can get something "like" the above  
by splitting your code into synch-like-code to be run in a separate  
thread, and async-twisted-using-code to be run in the twisted reactor  
thread.

Here's a little example. Please note, again, that I do not recommend  
doing this except in circumstances where you absolutely must.

import Queue
from twisted.internet import reactor, defer
from twisted.python import failure

def callInReactor(__f, *__a, **__kw):
     # Called in other thread
     queue = Queue.Queue()
     reactor.callFromThread(_calledFromThread, queue, __f, __a, __kw)
     result = queue.get()
     if isinstance(result, failure.Failure):
         result.raiseException()
     return result

def _calledFromThread(queue, f, a, kw):
     # Called in reactor thread
     result = defer.maybeDeferred(f, *a, **kw)
     result.addBoth(queue.put)

def someCalculation():
   # A demo "calculation"
   d = defer.Deferred()
   reactor.callLater(4, d.callback, 'hi')
   return d

x = 0
def myAsyncFunctionInTwistedThread():
   def done(data):
     global x
     x = data
   d = someCalculation()
   d.addCallback(done)
   return d

def mySyncFuncInAnotherThread():
   # NOTE: in this other thread you cannot call any twisted APIs  
besides reactor.callFromThread
   # and a very few select others.
   callInReactor(myAsyncFunctionInTwistedThread)
   # callInReactor blocks until the deferred returned by  
myAsyncFunctionInTwistedThread fires
   print x

# Start up a thread to call your blocking function in
reactor.callInThread(mySyncFuncInAnotherThread)

# Run the reactor
reactor.run()




James



From psanchez at nortel.com  Mon Oct 31 06:28:39 2005
From: psanchez at nortel.com (Pedro Sanchez)
Date: Mon, 31 Oct 2005 08:28:39 -0500
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <20051029214702.10365.193620676.divmod.quotient.1754@ohm>
References: <20051029214702.10365.193620676.divmod.quotient.1754@ohm>
Message-ID: <43661C07.1070906@nortel.com>

I am the original poster of this thread. First of all, thank you for the 
different responses. However I still don't have a clear answer (other 
than what I'm thinking of doing is wrong, which is OK, it can be fixed).

I'm working on a Twisted/Nevow application, and yes, I'm new to both and 
I can tell that if learning Twisted has a step curve, doing it in 
conjuction with Nevow is really almost vertical. But, nevertheless, my 
application is working well these days.

The motivation for my question is the following: I added the 
guard/credentials stuff to my application. The issue is that in order to 
accept a login my application requires several things to happen before 
access can be granted. I therefore implemented my own AuthChecker() 
which fires several deferreds to acomplish its task. This is working 
well, including the use of deferToThread() in several places.

But, the behavior of the authentication wrapper is synchronous. That is, 
access to the system cannot be granted until all deferred operations 
have happended. In this wrapper I have something like:

     def requestAvatar(self, avatarId, mind, *interfaces):
         for iface in interfaces:
             if iface is inevow.IResource:
                 if avatarId is checkers.ANONYMOUS:
                     resc = login.LoginPage()
                     resc.realm = self
                     return (inevow.IResource, resc, noLogout)
                 else:
                     resc = home.RootPage()
                     resc.realm = self
                     return (inevow.IResource, resc,
                             self.createLogout(avatarId, mind))
             else:
                 raise NotImplementedError("Not supported.")

So let me rephrase my original question. Given that the real user 
authentication is happening in my AuthChecker() implemented somewhere 
else, with deferreds and what not, how can I force this requestAvatar() 
thing to wait until the whole login process has finished? My idea was to 
force a synchronous behavior on AuthChecker() forcing this way the login 
process to wait for it to finish.

While writting this I realize that I may be missunderstanding how the 
credentials stuff works ... who knows.

Any suggestions are appreciated,

Thank you,

-- 
Pedro





From exarkun at divmod.com  Mon Oct 31 06:48:14 2005
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 31 Oct 2005 08:48:14 -0500
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <43661C07.1070906@nortel.com>
Message-ID: <20051031134814.10365.325034977.divmod.quotient.2278@ohm>

On Mon, 31 Oct 2005 08:28:39 -0500, Pedro Sanchez <psanchez at nortel.com> wrote:
>I am the original poster of this thread. First of all, thank you for the 
>different responses. However I still don't have a clear answer (other than 
>what I'm thinking of doing is wrong, which is OK, it can be fixed).
>
>I'm working on a Twisted/Nevow application, and yes, I'm new to both and I 
>can tell that if learning Twisted has a step curve, doing it in conjuction 
>with Nevow is really almost vertical. But, nevertheless, my application is 
>working well these days.
>
>The motivation for my question is the following: I added the 
>guard/credentials stuff to my application. The issue is that in order to 
>accept a login my application requires several things to happen before 
>access can be granted. I therefore implemented my own AuthChecker() which 
>fires several deferreds to acomplish its task. This is working well, 
>including the use of deferToThread() in several places.
>
>But, the behavior of the authentication wrapper is synchronous. That is, 
>access to the system cannot be granted until all deferred operations have 
>happended. In this wrapper I have something like:
>
>     def requestAvatar(self, avatarId, mind, *interfaces):
>         for iface in interfaces:
>             if iface is inevow.IResource:
>                 if avatarId is checkers.ANONYMOUS:
>                     resc = login.LoginPage()
>                     resc.realm = self
>                     return (inevow.IResource, resc, noLogout)
>                 else:
>                     resc = home.RootPage()
>                     resc.realm = self
>                     return (inevow.IResource, resc,
>                             self.createLogout(avatarId, mind))
>             else:
>                 raise NotImplementedError("Not supported.")
>
>So let me rephrase my original question. Given that the real user 
>authentication is happening in my AuthChecker() implemented somewhere else, 
>with deferreds and what not, how can I force this requestAvatar() thing to 
>wait until the whole login process has finished? My idea was to force a 
>synchronous behavior on AuthChecker() forcing this way the login process to 
>wait for it to finish.
>
>While writting this I realize that I may be missunderstanding how the 
>credentials stuff works ... who knows.
>
>Any suggestions are appreciated,

Cred supports Deferreds, so there's no need to make your requestAvatar or requestAvatarId methods synchronous.  They can simply return Deferreds.  If you have several Deferreds going in requestAvatarId, you may want to use a DeferredList, which behaves very similarly to a Deferred, but takes several other Deferreds as input and only fires when all those Deferreds have fired.

requestAvatar won't be called until the Deferred you return from requestAvatarId fires.

Jean-Paul



From behnel_ml at gkec.informatik.tu-darmstadt.de  Mon Oct 31 06:56:20 2005
From: behnel_ml at gkec.informatik.tu-darmstadt.de (Stefan Behnel)
Date: Mon, 31 Oct 2005 14:56:20 +0100
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <43661C07.1070906@nortel.com>
References: <20051029214702.10365.193620676.divmod.quotient.1754@ohm>
	<43661C07.1070906@nortel.com>
Message-ID: <43662284.8090804@gkec.informatik.tu-darmstadt.de>


Pedro Sanchez wrote:
> But, the behavior of the authentication wrapper is synchronous. That is,
> access to the system cannot be granted until all deferred operations
> have happended.

Maybe I'm underestimating your problem, but that sounds to me like Deferred
chaining is all you need. Merge the pending Deferreds into a DeferredList and
then append your login procedure to that.

Stefan




From psanchez at nortel.com  Mon Oct 31 07:56:03 2005
From: psanchez at nortel.com (Pedro Sanchez)
Date: Mon, 31 Oct 2005 09:56:03 -0500
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <43662284.8090804@gkec.informatik.tu-darmstadt.de>
References: <20051029214702.10365.193620676.divmod.quotient.1754@ohm>	<43661C07.1070906@nortel.com>
	<43662284.8090804@gkec.informatik.tu-darmstadt.de>
Message-ID: <43663083.1080803@nortel.com>

Stefan Behnel wrote:
> Pedro Sanchez wrote:
> 
>>But, the behavior of the authentication wrapper is synchronous. That is,
>>access to the system cannot be granted until all deferred operations
>>have happended.
> 
> 
> Maybe I'm underestimating your problem, but that sounds to me like Deferred
> chaining is all you need. Merge the pending Deferreds into a DeferredList and
> then append your login procedure to that.
> 
> Stefan
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
I tried this already and couldn't make it work. In one of the functions 
called during the validation process I have this

     def registerSession(self, session):
         def _customerInit(self, customer):
            ...
            session.customerInit = True

         # initialize customer data
         d = defer.Deferred()
         d1 = defer.maybeDeferred(customerInit, session)
         d1.addCallback(_customerInit)
         d1.addErrback(errhandler, session)
         d.chainDeferred(d1)
         return d

customerInit() fires several deferreds which I collect with a 
deferredList already. This works well. My goal therefore is to force 
"registerSession()" to behave synchronously[1] so that whoever is 
invoking it will block. I thought that by defining my own deferred d, 
and that by chaining it to d1 I would achive this. But I don't, the 
caller still doesn't block and goes along thinking that 
registerSsession() is done. I guess I don't understand how to use the 
chainDeferred() call. Hints are welcome; regardeless of what I end up 
doing, I'd like to understand who deferred chaining works.

In a previous answer from Jean-Paul Calderone, he mentions that the 
requestAvatar and requestAvatarId methods don't have to be synchronous 
(thanks Jean-Paul!). This is no evident from the documentation, in fact, 
I dare to say that in all examples I've seen so far these calls are 
always synchronous, therefore my wrong assumption that they had to be.
This is likely the right way to go to modify my program. I'll look into it.

Thanks again!

-- 
Pedro



[1] Boy, I say this with hesitation after the long thread I spawned with 
my post, and after reading repeately that I shouldn't even attempt to do 
it. Which is fine, I take it, thanks for the imput. But I'm just trying 
to figure out the best way around it for my application.





From behnel_ml at gkec.informatik.tu-darmstadt.de  Mon Oct 31 08:25:13 2005
From: behnel_ml at gkec.informatik.tu-darmstadt.de (Stefan Behnel)
Date: Mon, 31 Oct 2005 16:25:13 +0100
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <43663083.1080803@nortel.com>
References: <20051029214702.10365.193620676.divmod.quotient.1754@ohm>	<43661C07.1070906@nortel.com>	<43662284.8090804@gkec.informatik.tu-darmstadt.de>
	<43663083.1080803@nortel.com>
Message-ID: <43663759.9040800@gkec.informatik.tu-darmstadt.de>


Pedro Sanchez schrieb:
> I tried this already and couldn't make it work. In one of the functions
> called during the validation process I have this
> 
>     def registerSession(self, session):
>         def _customerInit(self, customer):
>            ...
>            session.customerInit = True
>
>         # initialize customer data
>         d = defer.Deferred()
>         d1 = defer.maybeDeferred(customerInit, session)
>         d1.addCallback(_customerInit)
>         d1.addErrback(errhandler, session)
>         d.chainDeferred(d1)
>         return d

Ah, there we go. This simplifies to

     def registerSession(self, session):
         def _customerInit(self, customer):
            ...
            session.customerInit = True

         # initialize customer data
         d1 = defer.maybeDeferred(customerInit, session)
         d1.addCallback(_customerInit)
         d1.addErrback(errhandler, session)
         return d1

And then everyone who calls registerSession() receives a Deferred and can add
callbacks for whatever else needs to be done after the session is successfully
registered and _customerInit has been run. You get the difference? The
registration is not done when registerSession /returns/, but when the Deferred
that it returns /fires/. So keep adding callbacks to that Deferred instead of
expecting things to have terminated. Twisted will then take care of running
everything in a chain.

Stefan



From psanchez at nortel.com  Mon Oct 31 08:51:16 2005
From: psanchez at nortel.com (Pedro Sanchez)
Date: Mon, 31 Oct 2005 10:51:16 -0500
Subject: [Twisted-Python] How to force synchronous behavior
In-Reply-To: <43663759.9040800@gkec.informatik.tu-darmstadt.de>
References: <20051029214702.10365.193620676.divmod.quotient.1754@ohm>	<43661C07.1070906@nortel.com>	<43662284.8090804@gkec.informatik.tu-darmstadt.de>	<43663083.1080803@nortel.com>
	<43663759.9040800@gkec.informatik.tu-darmstadt.de>
Message-ID: <43663D74.9010101@nortel.com>

Stefan Behnel wrote:
  > Ah, there we go. This simplifies to
> 
>      def registerSession(self, session):
>          def _customerInit(self, customer):
>             ...
>             session.customerInit = True
> 
>          # initialize customer data
>          d1 = defer.maybeDeferred(customerInit, session)
>          d1.addCallback(_customerInit)
>          d1.addErrback(errhandler, session)
>          return d1
> 
> And then everyone who calls registerSession() receives a Deferred and can add
> callbacks for whatever else needs to be done after the session is successfully
> registered and _customerInit has been run. You get the difference? The
> registration is not done when registerSession /returns/, but when the Deferred
> that it returns /fires/. So keep adding callbacks to that Deferred instead of
> expecting things to have terminated. Twisted will then take care of running
> everything in a chain.
> 
> Stefan
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
Yes, I understand that very well. The problem is (was, I guess) my wrong 
assumption that the requestAvatar function (which at the end is the 
"caller" of registerSession() in my actual code) was supposed to be 
synchronous and not to deal with deferreds at all.

Thanks,

-- 
Pedro




From itamar at itamarst.org  Mon Oct 31 10:11:57 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 31 Oct 2005 12:11:57 -0500
Subject: [Twisted-Python] twisted words irc patch for usernames
In-Reply-To: <20051030085508.GF55915@silverwraith.com>
References: <20051030085508.GF55915@silverwraith.com>
Message-ID: <1130778717.8943.15.camel@localhost.localdomain>

On Sun, 2005-10-30 at 01:55 -0700, Avleen Vig wrote:
> Currently when twisted connects to an irc server, the username on the
> USER connect line, is assumed to be the same as the nickname.

Hi,

Could you add this to http://twistedmatrix.com/bugs/? Thanks!




From lists-twistedmatrix at silverwraith.com  Mon Oct 31 17:41:58 2005
From: lists-twistedmatrix at silverwraith.com (Avleen Vig)
Date: Mon, 31 Oct 2005 16:41:58 -0800
Subject: [Twisted-Python] twisted words irc patch for usernames
In-Reply-To: <1130778717.8943.15.camel@localhost.localdomain>
References: <20051030085508.GF55915@silverwraith.com>
	<1130778717.8943.15.camel@localhost.localdomain>
Message-ID: <20051101004158.GP43209@silverwraith.com>

On Mon, Oct 31, 2005 at 12:11:57PM -0500, Itamar Shtull-Trauring wrote:
> > Currently when twisted connects to an irc server, the username on the
> > USER connect line, is assumed to be the same as the nickname.
> 
> Could you add this to http://twistedmatrix.com/bugs/? Thanks!

Done! As bug 1302 :-)



