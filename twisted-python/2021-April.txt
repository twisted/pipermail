From adi at roiban.ro  Thu Apr  1 03:43:25 2021
From: adi at roiban.ro (Adi Roiban)
Date: Thu, 1 Apr 2021 10:43:25 +0100
Subject: [Twisted-Python] GitHub Actions parallelism limit increase
In-Reply-To: <261876fc38524a4c6f1bd18bfed7779d@fstab.net>
References: <261876fc38524a4c6f1bd18bfed7779d@fstab.net>
Message-ID: <CAFycZ9c-op-Myn2Phkoiv6Yi6nvHW3qPtTC++pCTmgeUECoE_g@mail.gmail.com>

On Tue, 30 Mar 2021 at 15:57, Kyle Altendorf <sda at fstab.net> wrote:

> Hi All,
>

SNIP

> My understanding is that we maintain
> two CI systems (GitHub Actions and Azure Pipelines) for the sake of more
> parallelism.
>
SNIP

> -kyle
>

We also have 2 CI systems because migrating the Windows and macOS jobs from
Azure Pipeline to GHA takes time.

As an experiment I have enabled one Windows job on GitHub and the tests
failed... so that needs extra work.

To check what happened I got Windows 2019 server on a local VM and tried to
execute `trial twisted` ...tests are failing.

So for now, I am also not in a hurry to remove Azure Pipelines as it just
works. Fixing is not hard but it takes time.

For example some Windows tests are skipped only on Azure... and they fail
both on Azure and local dev...

I guess that a macOS migration is easier as macOS is similar to Linux, and
on macOS we only run the default reactor, which I think is the select
reactor.

----------------

But in preparation for a future GitHub to Azure migration, I think that we
can have a single Windows and a single macOS job on GitHub Actions, while
keeping Azure VMs.

In this way we can have them running for a while in trunk and see if there
are any surprises .
I guess that with GitHub being a MS company  GitHub Actions and Azure
Pipelines might use the exact same VM images and VM compute nodes.

Cheers

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210401/a15c8740/attachment.htm>

From sda at fstab.net  Thu Apr  1 06:46:54 2021
From: sda at fstab.net (Kyle Altendorf)
Date: Thu, 01 Apr 2021 08:46:54 -0400
Subject: [Twisted-Python] GitHub Actions parallelism limit increase
In-Reply-To: <CAFycZ9d=2g4ou81OkPV2f-_i7NFZ2=mSdCq9GPA0q0iAQBz4jg@mail.gmail.com>
References: <261876fc38524a4c6f1bd18bfed7779d@fstab.net>
 <9F520E09-60F1-4302-8421-3C32DEE50DDC@twistedmatrix.com>
 <dd42953b7fca3b24bcde585cc6d4cb8c@fstab.net>
 <CAFycZ9d=2g4ou81OkPV2f-_i7NFZ2=mSdCq9GPA0q0iAQBz4jg@mail.gmail.com>
Message-ID: <21516729d8911672e8cfaa8a354596b3@fstab.net>

On 2021-03-31 05:45, Adi Roiban wrote:

> On Tue, 30 Mar 2021, 22:23 Kyle Altendorf, <sda at fstab.net> wrote:
> 
>> On 2021-03-30 15:24, Glyph wrote:
>>>> On Mar 30, 2021, at 7:57 AM, Kyle Altendorf <sda at fstab.net> wrote:
>>>> 
>>>> Hi All,
>>>> 
>>>> Has anyone contacted GitHub to see if they would be willing to
>>>> increase the parallelism limit in Actions?  My understanding is that
>>>> we maintain two CI systems (GitHub Actions and Azure Pipelines) for
>>>> the sake of more parallelism.  While perhaps worthwhile, this 
>>>> doesn't
>>>> seem fun.  Maybe GitHub would be willing to help out.
>>> 
>>> Not as far as I know. Do you want to give it a shot?
>> 
>> That was the plan.  Submitted.  I'll let you all know.
> 
> Thanks.
> 
> On a related note I am working to reduce the general duration of 
> Twisted CI jobs.
> 
> This should result in keeping the jobs slot busy for less time and 
> allowing more total jobs per day.
> 
> The first step was to enable parallel trial tests. Use both CPUs 
> available to the CI VMs.
> This was already done for Linux and MacOS.
> 
> Distributed trial is not yet supported on Windows, but I am working on 
> it.
> I already have a working distributed trial for Windows on my system.
> It needs various fixed and I have submitted smaller PR for review.
> 
> Just getting distrial to work on Windows is not all...as we need to 
> update and clean the  Twsited test to reduce the side effects.
> Linux and macOS are more relaxed in terms of file access and for 
> example you can delete a file, even if its opened by another process or 
> by the same process.
> Windows is not happy about that.
> 
> And then there are the 2 pypy jobs taking 30 minutes each - working to 
> fix it here https://github.com/twisted/twisted/pull/1543/
> 
> And then there are also general CI jobs improvements.
> 
> For example we can save about 40 seconds  if we decide to stop sending 
> coverage to coveralls and only use codecov.io
> Another example is save another 1 minute by stop using `tox --notests` 
> and replace it with something like 
> https://github.com/twisted/python-info-action to show the dependencies.
> With `tox --notest` we now create the wheels and install the 
> dependencies twice for each job.

Would `tox --skip-pkg-install` cut it for the second invocation?

https://github.com/ericaltendorf/plotman/pull/66/files#diff-b803fcb7f17ed9235f1e5cb1fcd2f5d3b2838429d4368ae4c57ce4436577f03fR145

> There is an extra 1 minute required for each job to generate the 
> coverage XML file. We can download all the coverage artifacts and 
> generate the XML only once.

I did coverage collection from all jobs for pymodbus.  Looks like I 
still had the XML report generating in each job, but that could 
presumably be shifted.  Anyways, I'm sure several of us could do this 
off the top of our heads but in case it is of any interest here's what I 
did.  Or maybe you just point out something silly I did there and should 
learn from.  :]

https://github.com/riptideio/pymodbus/pull/592/files

Cheers,
-kyle


From adi at roiban.ro  Thu Apr  1 07:36:29 2021
From: adi at roiban.ro (Adi Roiban)
Date: Thu, 1 Apr 2021 14:36:29 +0100
Subject: [Twisted-Python] GitHub Actions parallelism limit increase
In-Reply-To: <21516729d8911672e8cfaa8a354596b3@fstab.net>
References: <261876fc38524a4c6f1bd18bfed7779d@fstab.net>
 <9F520E09-60F1-4302-8421-3C32DEE50DDC@twistedmatrix.com>
 <dd42953b7fca3b24bcde585cc6d4cb8c@fstab.net>
 <CAFycZ9d=2g4ou81OkPV2f-_i7NFZ2=mSdCq9GPA0q0iAQBz4jg@mail.gmail.com>
 <21516729d8911672e8cfaa8a354596b3@fstab.net>
Message-ID: <CAFycZ9f0xmzDYGEEingaTcsiFe22yJOUYoFL06h5i75exmNAcg@mail.gmail.com>

On Thu, 1 Apr 2021 at 13:46, Kyle Altendorf <sda at fstab.net> wrote:

> On 2021-03-31 05:45, Adi Roiban wrote:
>
> > On Tue, 30 Mar 2021, 22:23 Kyle Altendorf, <sda at fstab.net> wrote:
> >
> >> On 2021-03-30 15:24, Glyph wrote:
> >>>> On Mar 30, 2021, at 7:57 AM, Kyle Altendorf <sda at fstab.net> wrote:
> >>>>
> >>>> Hi All,
> >>>>
> >>>> Has anyone contacted GitHub to see if they would be willing to
> >>>> increase the parallelism limit in Actions?  My understanding is that
> >>>> we maintain two CI systems (GitHub Actions and Azure Pipelines) for
> >>>> the sake of more parallelism.  While perhaps worthwhile, this
> >>>> doesn't
> >>>> seem fun.  Maybe GitHub would be willing to help out.
> >>>
> >>> Not as far as I know. Do you want to give it a shot?
> >>
> >> That was the plan.  Submitted.  I'll let you all know.
> >
> > Thanks.
> >
> > On a related note I am working to reduce the general duration of
> > Twisted CI jobs.
> >
> > This should result in keeping the jobs slot busy for less time and
> > allowing more total jobs per day.
> >
> > The first step was to enable parallel trial tests. Use both CPUs
> > available to the CI VMs.
> > This was already done for Linux and MacOS.
> >
> > Distributed trial is not yet supported on Windows, but I am working on
> > it.
> > I already have a working distributed trial for Windows on my system.
> > It needs various fixed and I have submitted smaller PR for review.
> >
> > Just getting distrial to work on Windows is not all...as we need to
> > update and clean the  Twsited test to reduce the side effects.
> > Linux and macOS are more relaxed in terms of file access and for
> > example you can delete a file, even if its opened by another process or
> > by the same process.
> > Windows is not happy about that.
> >
> > And then there are the 2 pypy jobs taking 30 minutes each - working to
> > fix it here https://github.com/twisted/twisted/pull/1543/
> >
> > And then there are also general CI jobs improvements.
> >
> > For example we can save about 40 seconds  if we decide to stop sending
> > coverage to coveralls and only use codecov.io
> > Another example is save another 1 minute by stop using `tox --notests`
> > and replace it with something like
> > https://github.com/twisted/python-info-action to show the dependencies.
> > With `tox --notest` we now create the wheels and install the
> > dependencies twice for each job.
>
> Would `tox --skip-pkg-install` cut it for the second invocation?
>
>
> https://github.com/ericaltendorf/plotman/pull/66/files#diff-b803fcb7f17ed9235f1e5cb1fcd2f5d3b2838429d4368ae4c57ce4436577f03fR145
>
>
I don't know. I still don't understand the tox install and test process...
and tox is not my friend as every week tox hits me with various errors that
I don't understand.
Most probably, tox is an advanced tool and I am a poor developer who
doesn't know much and sticks to the manual labour of calling venv + pip +
trial  :)

--------

For example, I don't understand why you need to create an sdist and from
sdist to create a wheel and then install that wheel inside tox for each tox
test environment.

Why not create the wheel once and install the same wheel in all
environments.


> > There is an extra 1 minute required for each job to generate the
> > coverage XML file. We can download all the coverage artifacts and
> > generate the XML only once.
>
> I did coverage collection from all jobs for pymodbus.  Looks like I
> still had the XML report generating in each job, but that could
> presumably be shifted.  Anyways, I'm sure several of us could do this
> off the top of our heads but in case it is of any interest here's what I
> did.  Or maybe you just point out something silly I did there and should
> learn from.  :]
>
> https://github.com/riptideio/pymodbus/pull/592/files
>


That is one big matrix :) ... I don't understand why you need test and
check and coverage, each with a separate matrix.

I am thinking of something like this:

* A matrix to run jobs with coverage on each environment (os + py
combination + extra stuff noipv6, nodeps, etc)
* Each job from the matrix will run an initial combine to combine
sub-process coverage
* Each job will upload once python coverage raw file.
* A single job will  download those coverage file, combine them once again
to generate an XML file to be pushed to codecov.io

The maximum jobs time will continue to be the same...as you still need to
wait for the slowest env, but the total run time can be reduced by more
than 20 minutes
as each job will no longer have to spend 2 minutes creating XML and
reporting JSON to coveralls.

-----------

Note that coveralls API is different. Instead of receiving an XML file,
with coverall there are separate API calls for reporting the coverage in
JSON format.
This is why coveralls reporting takes so long
Also, for coveralls, the python uploader is a 3rd party tool, and not an
official tool from the Coveralls team.
So maybe the python coveralls uploader tool can be improved to send the
reports faster.

Cheers

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210401/1f1f2584/attachment-0001.htm>

From trac at twistedmatrix.com  Sun Apr  4 00:05:15 2021
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 04 Apr 2021 06:05:15 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1617516315.65.2193889187880110175@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210404/4613cfa4/attachment.htm>

From sda at fstab.net  Mon Apr  5 18:08:54 2021
From: sda at fstab.net (Kyle Altendorf)
Date: Mon, 05 Apr 2021 20:08:54 -0400
Subject: [Twisted-Python] towncrier releases 19.9.0 and 21.3.0rc1
In-Reply-To: <500ec2314346f3e7ea89b0f1dab36587@fstab.net>
References: <500ec2314346f3e7ea89b0f1dab36587@fstab.net>
Message-ID: <d1f20b6ad0b9ae50c4f99f693b8ed142@fstab.net>

Hi all,

Towncrier 19.9.0 [0] and 21.3.0 [1] have been published to PyPI.  
Neither release had significant changes since their corresponding 
release candidates.  None the less, the news is available on GitHub [2].

Thanks to Adi for the relentless help and reviews over the past several 
months.

Cheers,
-kyle


[0]: https://pypi.org/project/towncrier/19.9.0/
[1]: https://pypi.org/project/towncrier/21.3.0/
[2]: 
https://github.com/twisted/towncrier/blob/eab34611b93a4ba6e3805cd546a674d88dbd43cf/NEWS.rst


On 2021-03-26 09:18, Kyle Altendorf wrote:
> Hi everyone,
> 
> I am announcing 2 twisted releases.
> 
> This is a bit more complicated than normal since 19.9.0rc1 was never
> followed by a non-RC release.
> 
> You can see a detailed checklist and discussion of this in #313 [0].
> 
> Relative to 19.9.0rc1, 19.9.0 contains a few readme fixes and the news
> fragments processed into the news file.
> 
> 19.9.0 artifacts have been created [1] and 19.9.0 publishing is being
> held until after 21.3.0 to avoid a somewhat pointless intermediate
> step for developers that are using 'the latest non-pre release on
> PyPI' (presently 19.2.0).
>  No real need for someone to get 19.9.0 now just to see 21.3.0
> available next week.  The news for 21.3.0 is available for review [2].
> 
> 21.3.0rc1 has been published and is open for a week for feedback
> before 21.3.0 is planned to be released.
> 
> There are remaining bugs and important features.  But, it took long
> enough to get to this point that I consider it important to get
> something out.  Several people are waiting patiently [3].  As we find
> time to design and address the remaining issues, hopefully we can
> manage more frequent releases.
> 
> Please do let me know of any issues you find that are not already
> documented.  Or, if any of the documented ones should really be
> release blockers.  I sure hope we can get this out though.  :]
> 
> Cheers,
> -kyle
> 
> 
> [0]: https://github.com/twisted/towncrier/issues/313
> [1]: 
> https://github.com/twisted/towncrier/pull/331#issuecomment-803491163
> [2]: https://github.com/twisted/towncrier/blob/21.3.0.rc1/NEWS.rst
> [3]: https://github.com/twisted/towncrier/issues/269
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From sda at fstab.net  Tue Apr  6 12:47:57 2021
From: sda at fstab.net (Kyle Altendorf)
Date: Tue, 06 Apr 2021 14:47:57 -0400
Subject: [Twisted-Python] GitHub Actions parallelism limit increase
In-Reply-To: <dd42953b7fca3b24bcde585cc6d4cb8c@fstab.net>
References: <261876fc38524a4c6f1bd18bfed7779d@fstab.net>
 <9F520E09-60F1-4302-8421-3C32DEE50DDC@twistedmatrix.com>
 <dd42953b7fca3b24bcde585cc6d4cb8c@fstab.net>
Message-ID: <f4b1d2c1c25cd68901af56554b011000@fstab.net>



On 2021-03-30 17:14, Kyle Altendorf wrote:
> On 2021-03-30 15:24, Glyph wrote:
>>> On Mar 30, 2021, at 7:57 AM, Kyle Altendorf <sda at fstab.net> wrote:
>>> 
>>> Hi All,
>>> 
>>> Has anyone contacted GitHub to see if they would be willing to 
>>> increase the parallelism limit in Actions?  My understanding is that 
>>> we maintain two CI systems (GitHub Actions and Azure Pipelines) for 
>>> the sake of more parallelism.  While perhaps worthwhile, this doesn't 
>>> seem fun.  Maybe GitHub would be willing to help out.
>> 
>> Not as far as I know. Do you want to give it a shot?
> 
> That was the plan.  Submitted.  I'll let you all know.

 From GitHub:
> Hi Kyle,
> 
> Thanks for taking the time to write in.
> 
> You would need to upgrade the twisted organization account to 
> Enterprise
> Cloud for a higher concurrent jobs limit. However, the discount on the
> twisted organization account is only for GitHub Team, so an upgrade
> would require payment.
> 
> https://docs.github.com/en/actions/reference/usage-limits-billing-and-administration#usage-limits
> 
> All the best,
> Jimmy

https://docs.github.com/en/github/getting-started-with-github/githubs-products#github-enterprise
https://docs.github.com/en/github/getting-started-with-github/githubs-products#github-team

So it seems we already have 60x parallelism and a discount ($4/month per 
user if we have Teams for free) and at least a few of us didn't realize 
it?  Admittedly macOS remains at 5x until you get to the enterprise 
level.

So, case closed on that I suppose.  I'm not sure where the rest of the 
discussion about just-GitHub-for-CI stands, but that can be separated 
from thread.

Cheers,
-kyle


From sda at fstab.net  Tue Apr  6 12:58:35 2021
From: sda at fstab.net (Kyle Altendorf)
Date: Tue, 06 Apr 2021 14:58:35 -0400
Subject: [Twisted-Python] GitHub Actions parallelism limit increase
In-Reply-To: <CAFycZ9f0xmzDYGEEingaTcsiFe22yJOUYoFL06h5i75exmNAcg@mail.gmail.com>
References: <261876fc38524a4c6f1bd18bfed7779d@fstab.net>
 <9F520E09-60F1-4302-8421-3C32DEE50DDC@twistedmatrix.com>
 <dd42953b7fca3b24bcde585cc6d4cb8c@fstab.net>
 <CAFycZ9d=2g4ou81OkPV2f-_i7NFZ2=mSdCq9GPA0q0iAQBz4jg@mail.gmail.com>
 <21516729d8911672e8cfaa8a354596b3@fstab.net>
 <CAFycZ9f0xmzDYGEEingaTcsiFe22yJOUYoFL06h5i75exmNAcg@mail.gmail.com>
Message-ID: <97d4d10e3ae06ba7daa2f501dc112d1e@fstab.net>

On 2021-04-01 09:36, Adi Roiban wrote:

> For example, I don't understand why you need to create an sdist and 
> from sdist to create a wheel and then install that wheel inside tox for 
> each tox test environment.
> 
> Why not create the wheel once and install the same wheel in all 
> environments.

Are you referring to the use of tox-wheel?  Note that the workflow I 
setup in towncrier has a single build job that creates an sdist and from 
that a wheel one time, uploads those as artifacts in the workflow, and 
then every other test job and the publish job use those exact 
pre-created files.  So, I think we agree here.

I'll let Grainger weigh in on their present take on tox-wheel if they 
want.

>>> There is an extra 1 minute required for each job to generate the
>>> coverage XML file. We can download all the coverage artifacts and
>>> generate the XML only once.
>> 
>> I did coverage collection from all jobs for pymodbus.  Looks like I
>> still had the XML report generating in each job, but that could
>> presumably be shifted.  Anyways, I'm sure several of us could do this
>> off the top of our heads but in case it is of any interest here's what 
>> I
>> did.  Or maybe you just point out something silly I did there and 
>> should
>> learn from.  :]
>> 
>> https://github.com/riptideio/pymodbus/pull/592/files
> 
> That is one big matrix :) ... I don't understand why you need test and 
> check and coverage, each with a separate matrix.

I don't think it really is as big as you think.  The test and coverage 
matrix are separated (and the coverage matrix is kind of not a matrix, 
what with one job) because that's the level at which GitHub allows you 
to describe dependencies.  If you want to collect the coverage during 
test runs and then combine all the results together before uploading to 
codecov etc a single time, I think this is just a mandatory structure.  
The coverage job must be separated so it can depend on the test matrix.  
Having checks be a separate matrix is kind of neither here nor there on 
this topic, I think.  And the All job is compensation for a missing 
GitHub Actions feature.

> I am thinking of something like this:
> 
> * A matrix to run jobs with coverage on each environment (os + py 
> combination + extra stuff noipv6, nodeps, etc)
> * Each job from the matrix will run an initial combine to combine 
> sub-process coverage
> * Each job will upload once python coverage raw file.
> * A single job will  download those coverage file, combine them once 
> again to generate an XML file to be pushed to codecov.io

Sounds good.  Sounds like exactly what I suggested.  :]  Except for 
maybe misunderstanding about what level of separation is needed for the 
interjob dependencies.

Hopefully this clarifies a bit.  I think we actually intend the same 
thing.  Unless I've missed something else?

Cheers,
-kyle


From barry.scott at forcepoint.com  Thu Apr  8 09:43:35 2021
From: barry.scott at forcepoint.com (Barry Scott)
Date: Thu, 08 Apr 2021 16:43:35 +0100
Subject: [Twisted-Python] IDNA problem in twisted
Message-ID: <1856876.PYKUYFuaPT@fpbarry>

We just added a patch to our twisted to prevent twisted from doing idna validation.
_idnaBytes and _idnaText not convert from bytes to unicode based on the type of
the provided arg.

We had to do this because there are domain names that youtube.com uses that are
not valid under IDNA-2008 https://tools.ietf.org/html/rfc5891#section-4.2.3.1

For example this URL: https://r2---sn-aigzrn7e.googlevideo.com/generate_204
Firefox is happy to visit this URL and does not change it when its enter
in the address bar.

The comment in the _idna.py code that say this:

"Convert some text typed by a human into some ASCII bytes." and
"Convert some IDNA-encoded octets into some human-readable text"

The key idea here is that its human input that will be converted.
But the code is used deep in the _sslverify.py where no human
input is entered.

I can see why a UI would need to do IDNA-2008 converts and validation
but I'm not clear why its of value deep in the guts of twisted.

Why is this code needed at all in twisted?
If its for a high level API then why isn't it being called at the
edge of the high level API calls?

Barry




From richard at matrix.org  Fri Apr  9 17:07:08 2021
From: richard at matrix.org (Richard van der Hoff)
Date: Sat, 10 Apr 2021 00:07:08 +0100
Subject: [Twisted-Python] startTLS errors not propagating to Factory
Message-ID: <a7c58203-1156-ac38-85c0-7b597b72cdca@matrix.org>

Hi folks,

I've been investigating 
https://github.com/matrix-org/synapse/issues/9566, which amounts to: 
"when there is a TLS error connecting to the SMTP server, the resultant 
exception is unreadable".

I think I've traced the problem to the fact that 
SMTPSenderFactory.clientConnectionFailed is being called with an 
unhelpful ConnectionAborted rather than anything more descriptive.

I've then reproduced that with a simpler test case: see 
https://gist.github.com/richvdh/909761ff5dab23f0873eeddd7936a740. As you 
can see, the output is: "Factory lost connection. Reason: Connection was 
aborted locally using ITCPTransport.abortConnection."

This seems to be thanks to TLSMemoryBIOProtocol.failVerification, which 
stashes the error and calls abortConnection(): 
https://github.com/twisted/twisted/blob/trunk/src/twisted/protocols/tls.py#L427.

At this point I'm struggling. Is the SMTP code holding the Factory 
wrong? Or is it reasonable to expect the verification error to propagate 
into clientConnectionFailed - in which case, how could this work?

Thanks for your thoughts!

Richard


From adi at roiban.ro  Sat Apr 10 03:59:35 2021
From: adi at roiban.ro (Adi Roiban)
Date: Sat, 10 Apr 2021 10:59:35 +0100
Subject: [Twisted-Python] GitHub Actions parallelism limit increase
In-Reply-To: <97d4d10e3ae06ba7daa2f501dc112d1e@fstab.net>
References: <261876fc38524a4c6f1bd18bfed7779d@fstab.net>
 <9F520E09-60F1-4302-8421-3C32DEE50DDC@twistedmatrix.com>
 <dd42953b7fca3b24bcde585cc6d4cb8c@fstab.net>
 <CAFycZ9d=2g4ou81OkPV2f-_i7NFZ2=mSdCq9GPA0q0iAQBz4jg@mail.gmail.com>
 <21516729d8911672e8cfaa8a354596b3@fstab.net>
 <CAFycZ9f0xmzDYGEEingaTcsiFe22yJOUYoFL06h5i75exmNAcg@mail.gmail.com>
 <97d4d10e3ae06ba7daa2f501dc112d1e@fstab.net>
Message-ID: <CAFycZ9eiTjSHf6TiQYQyE5qn3nVTcDS9gg2+P2gKyfqqij=TAA@mail.gmail.com>

On Tue, 6 Apr 2021 at 19:58, Kyle Altendorf <sda at fstab.net> wrote:

> On 2021-04-01 09:36, Adi Roiban wrote:
>
>
Thanks Kyle for the GitHub communication.

I have checked Twisted billing and we have GitHub Teams enabled.
So yes, 60x concurrent jobs on GitHub own VMs.

GitHub billing now shows $124.00 / month to cover our Team plan but we
don't have to pay.

For reference Twisted has 41 members [0]

Upgrading to enterprise will be  $903.00 / month :)

----------

We now use 13x jobs for a build - 10 - python + 3 lint/mypy/docs.
Python jobs now take a maximum of 8 minutes (on 2xCPU VMs with 4 parallel
jobs) [1] ... from the previous 30+ minutes

In the last month there were about 250 jobs so about 8 per day.

So I think that we are ok for now.

----------

We have 12 extra jobs on Azure.

I think that as an experiment we can move 1 Windows and 1 macOS job from
Azure to GitHub Actions.

I would still keep Azure pipelines jobs to use those extra VMs that are
available.
Azure allows retrying a single job on failure , or all failed jobs. This is
a bit nicery for flaky tests.
In GitHub, you have to re-run the whole workflow.

-----

We can get more jobs by hosting our own runners... but that is a different
story.

[snip]

Sounds good.  Sounds like exactly what I suggested.  :]  Except for
> maybe misunderstanding about what level of separation is needed for the
> interjob dependencies.
>
> Hopefully this clarifies a bit.  I think we actually intend the same
> thing.  Unless I've missed something else?
>

I guess that is best to discuss directly on the change made for a PR and
see how the final matrix will look.

Top priority for me is enabling trial parallel runs on Windows (PR waiting
for review) to use the extra CPU available on the VM.
Next is enabling some kind of PR triage helper.

[0] https://github.com/orgs/twisted/people
[1] https://github.com/twisted/twisted/actions/runs/735543893
[2]
https://dev.azure.com/twistedmatrix/twisted/_build/results?buildId=3717&view=results
-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210410/a5d5c43d/attachment.htm>

From trac at twistedmatrix.com  Sun Apr 11 00:05:15 2021
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 11 Apr 2021 06:05:15 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1618121115.87.208091229416482881@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210411/35be459e/attachment.htm>

From adi at roiban.ro  Fri Apr 16 12:26:01 2021
From: adi at roiban.ro (Adi Roiban)
Date: Fri, 16 Apr 2021 19:26:01 +0100
Subject: [Twisted-Python] Codecov.io security incident
Message-ID: <CAFycZ9dZ1nqXHcyaLq3dmKZnzzKzWeqT6DAfZ-xtg-dUjkbt0g@mail.gmail.com>

Hi.

This is a follow up for https://about.codecov.io/security-update/ that was
raised by Maarten

The security breach is from January 31, 2021,

Here you can see the list of Twisted org projects using Codecov.io

https://codecov.io/gh/twisted

The projects that might be affected are:

twisted Latest commit 3 hours ago - using Bash
pydoctor Latest commit a day ago - using Python
towncrier Latest commit a day ago - using Python
axiom Latest commit 2 days ago - using bash via codecov/codecov-action at v1
klein Latest commit 7 days ago - using bash via codecov/codecov-action at v1
incremental Latest commit 25 days ago - using codecov in Travis
ldaptor 2 months ago - using Python

So the only targets  are: twisted , axiom and klein

For twisted/twisted we start using the bash uploaded 19 days ago as part of
https://github.com/twisted/twisted/pull/1574/
Before that we were using the python uploader.

---------------

Here is my understanding of what the codecov bash uploader can do:

* Read all the env variables present at the time the bash codecov.io script
is executed. The env might contain secrets
* Use the GitHub Token that is automatically generated for each GitHub
Action job

The GitHub token is valid while the action is executed and is kind of a
super token:
Actions: write
Checks: write
Contents: write
Deployments: write
Issues: write
Metadata: read
Packages: write
PullRequests: write
RepositoryProjects: write
SecurityEvents: write
Statuses: write

-----------

For twisted/twisted and I think that other repos the main secret available
for GitHub Action is the PYPY upload token.
This is not used as a general env variable, but is only available to the
specific step in which twine is used to upload the files.

-------------

The GitHub Org audit page can be used to check org administratie changes

https://github.com/organizations/twisted/settings/audit-log

I took a quick look and didn't notice anything suspicious.

---------

I don't know how we can prevent these types of security issues.
We are a public project with limited resources and are always exposed when
we are pulling dependencies from codecov or pypy that we don't fully
control.

I guess that what we can do is stop using the codecov.io bash uploaded and
switch back to python uploader.

Any other ideas ?

Cheers
-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210416/291b50da/attachment.htm>

From glyph at twistedmatrix.com  Fri Apr 16 13:14:23 2021
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 16 Apr 2021 12:14:23 -0700
Subject: [Twisted-Python] Codecov.io security incident
In-Reply-To: <CAFycZ9dZ1nqXHcyaLq3dmKZnzzKzWeqT6DAfZ-xtg-dUjkbt0g@mail.gmail.com>
References: <CAFycZ9dZ1nqXHcyaLq3dmKZnzzKzWeqT6DAfZ-xtg-dUjkbt0g@mail.gmail.com>
Message-ID: <690173E0-9C4C-4A07-8FA8-1876D41C003F@twistedmatrix.com>


> On Apr 16, 2021, at 11:26 AM, Adi Roiban <adi at roiban.ro <mailto:adi at roiban.ro>> wrote:
> 
> For twisted/twisted and I think that other repos the main secret available for GitHub Action is the PYPY upload token.

Just to make sure here - you mean PyPI, right?

> I guess that what we can do is stop using the codecov.io <http://codecov.io/> bash uploaded and
> switch back to python uploader.
> 
> Any other ideas ?

I think we are actually OK given the constraints on the env vars, but just to be safe, we should invalidate / rotate the PyPI upload token. Any admins have a few spare minutes to do that?  (And like… check to make sure nobody uploaded anything surprising on our project page ;-)).

-g




-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210416/679b89ae/attachment.htm>

From adi at roiban.ro  Fri Apr 16 14:14:07 2021
From: adi at roiban.ro (Adi Roiban)
Date: Fri, 16 Apr 2021 21:14:07 +0100
Subject: [Twisted-Python] Codecov.io security incident
In-Reply-To: <690173E0-9C4C-4A07-8FA8-1876D41C003F@twistedmatrix.com>
References: <CAFycZ9dZ1nqXHcyaLq3dmKZnzzKzWeqT6DAfZ-xtg-dUjkbt0g@mail.gmail.com>
 <690173E0-9C4C-4A07-8FA8-1876D41C003F@twistedmatrix.com>
Message-ID: <CAFycZ9e20diUf7+U3EM8xif_S__g=7C7UHKmGoE1=GeW5eF_aQ@mail.gmail.com>

On Fri, 16 Apr 2021 at 20:15, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Apr 16, 2021, at 11:26 AM, Adi Roiban <adi at roiban.ro> wrote:
>
>
> For twisted/twisted and I think that other repos the main secret available
> for GitHub Action is the PYPY upload token.
>
>
> Just to make sure here - you mean PyPI, right?
>
> Yes. Sorry. PyPi.org.

> I guess that what we can do is stop using the codecov.io bash uploaded and
> switch back to python uploader.
>
> Any other ideas ?
>
>
> I think we are actually OK given the constraints on the env vars, but just
> to be safe, we should invalidate / rotate the PyPI upload token. Any admins
> have a few spare minutes to do that?  (And like… check to make sure nobody
> uploaded anything surprising on our project page ;-)).
>
>

I don't have access to Twisted or ldaptor or other projects.

I only have access to pydoctor, and I saw that someone from NL (most
probably Marteen :) has already rotated the token.


https://pypi.org/project/Twisted/#history looks ok. Last release  l21.2.0
- Feb 28, 2021

Cheers
-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210416/bcea46f8/attachment-0001.htm>

From sda at fstab.net  Fri Apr 16 18:10:22 2021
From: sda at fstab.net (Kyle Altendorf)
Date: Fri, 16 Apr 2021 20:10:22 -0400
Subject: [Twisted-Python] Codecov.io security incident
In-Reply-To: <CAFycZ9dZ1nqXHcyaLq3dmKZnzzKzWeqT6DAfZ-xtg-dUjkbt0g@mail.gmail.com>
References: <CAFycZ9dZ1nqXHcyaLq3dmKZnzzKzWeqT6DAfZ-xtg-dUjkbt0g@mail.gmail.com>
Message-ID: <c4591a4aceef5e81d816f36b83d2251a@fstab.net>

On 2021-04-16 14:26, Adi Roiban wrote:

> I don't know how we can prevent these types of security issues.
> We are a public project with limited resources and are always exposed 
> when
> we are pulling dependencies from codecov or pypy that we don't fully 
> control.
> 
> I guess that what we can do is stop using the codecov.io bash uploaded 
> and
> switch back to python uploader.

What will this do now?  Do you consider the bash uploader a greater 
future risk than any other thing that codecov, or anyone else, creates?

> Any other ideas ?

In a single CI system (rather than using two) we could do the project 
coverage absolute limit check and patch coverage check (diff-cover) 
in-build.  Maybe there's even a place we could publish the coverage html 
output?

That said, I've never been much for avoiding services and the proposal 
for not using a codecov package involves adding another package so...

And like you said Adi, it seems pretty implausible to audit all code we 
use in CI.  So, I don't know how there's a solution.  But, I'm well 
aware that I'm not a security person.

Cheers,
-kyle


From trac at twistedmatrix.com  Sun Apr 18 00:05:15 2021
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 18 Apr 2021 06:05:15 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1618725915.37.6116281147939586932@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210418/5c2a2222/attachment.htm>

From trac at twistedmatrix.com  Sun Apr 25 00:05:14 2021
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 25 Apr 2021 06:05:14 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1619330714.69.1344979794689353287@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210425/95fc5363/attachment.htm>

From wiml at hhhh.org  Tue Apr 27 01:12:52 2021
From: wiml at hhhh.org (Wim Lewis)
Date: Tue, 27 Apr 2021 00:12:52 -0700
Subject: [Twisted-Python] Does anyone know why trunk is failing CI on PyPy
 7.3.4?
Message-ID: <20210427071252.GA432778@kosmos.hhhh.org>

TLDR: Twisted appears broken on PyPy 7.3.4 (aka "3.7.10")?

I don't have time right now to set up a PyPy-capable environment and try 
to reproduce this, but perhaps someone does?

Long version:

Trunk has been broken since the last merge a week or so ago, but I 
don't think the breakage is due to that merge.  As an experiment I made 
a PR based off the last successful version of trunk, with a whitespace 
change, and it now fails CI as well. So I think the failure must be due 
to some change that isn't in Twisted or controlled-for by tox.

The failure in all cases is in the pypy-3.7-alldeps-nocov-posix task. 
Unlike our usual CI problems it doesn't seem to be a random failure: it 
fails all the time in the same place. But the place doesn't make sense 
to me. It's in the IRC CTCP tests, and they fail in the same ways each 
time (an expected response is not received).

The pair of CI runs closest to the change are these:

run 5793: https://github.com/twisted/twisted/runs/2328450554
run 5809: https://github.com/twisted/twisted/runs/2360415474

There are a lot of differences, but sys.version went from 3.7.9 to 
3.7.10 between those runs, so that seems like the most likely culprit.

Last working:
>  sys.version              : 3.7.9 (7e6e2bb30ac5, Nov 18 2020, 10:55:52)
>  [PyPy 7.3.3-beta0 with GCC 7.3.1 20180303 (Red Hat 7.3.1-5)]
>  sys.prefix               : /opt/hostedtoolcache/PyPy/3.7.9/x64
>  sys.exec_prefix          : /opt/hostedtoolcache/PyPy/3.7.9/x64
>  sys.executable           : /opt/hostedtoolcache/PyPy/3.7.9/x64/bin/python

First broken:
>  sys.version              : 3.7.10 (51efa818fd9b, Apr 04 2021, 11:22:34)
>  [PyPy 7.3.4 with GCC 7.3.1 20180303 (Red Hat 7.3.1-5)]
>  sys.prefix               : /opt/hostedtoolcache/PyPy/3.7.10/x64
>  sys.exec_prefix          : /opt/hostedtoolcache/PyPy/3.7.10/x64
>  sys.executable           : /opt/hostedtoolcache/PyPy/3.7.10/x64/bin/python

PyPy's release notes for 7.3.4 don't list anything that jumps out at me:

https://doc.pypy.org/en/latest/whatsnew-pypy3-7.3.4.html

My guess would be some latent timing bug in Twisted that was uncovered 
by pypy execution time changes (I don't imagine that the CTCP code gets 
exercised very heavily these days) or perhaps PyPy got a bug.


Wim.


From wiml at hhhh.org  Tue Apr 27 21:58:44 2021
From: wiml at hhhh.org (Wim Lewis)
Date: Tue, 27 Apr 2021 20:58:44 -0700
Subject: [Twisted-Python] IDNA problem in twisted
In-Reply-To: <1856876.PYKUYFuaPT@fpbarry>
References: <1856876.PYKUYFuaPT@fpbarry>
Message-ID: <fd785022-130e-4f6e-a8c7-957ee59cc9a5@hhhh.org>

On Thursday, April 8, 2021 8:43:35 AM PDT, Barry Scott wrote:
> We just added a patch to our twisted to prevent twisted from 
> doing idna validation.
> _idnaBytes and _idnaText not convert from bytes to unicode 
> based on the type of
> the provided arg.
>
> We had to do this because there are domain names that 
> youtube.com uses that are
> not valid under IDNA-2008 
> https://tools.ietf.org/html/rfc5891#section-4.2.3.1

My reading of the RFC is that the YouTube domain you mention 
(r2---sn-aigzrn7e.googlevideo.com) is an invalid "U-Label", but that 
doesn't mean it's an entirely invaid domain label. It just means you can't 
legally run it through IDNA and turn it into "xn--r2---sn-aigzrn7e-". The 
intent, as I understand it, is to forbid any possibility of double-encoding 
or double-decoding a label, not to forbid the possibility of using labels 
like the one you mention.

> I can see why a UI would need to do IDNA-2008 converts and validation
> but I'm not clear why its of value deep in the guts of twisted.

My guess is that this is just an accident of the way that the 
bytes/characters distinction and the IDNA features were added to Twisted, 
and is probably a bug.

> Why is this code needed at all in twisted?
> If its for a high level API then why isn't it being called at the
> edge of the high level API calls?

I'd argue that resolving URLs is in fact a high level API (from the point 
of view of the name resoution system) but even so, it seems to me that 
Twisted is doing the wrong thing here. The format of that label should 
prevent it from ever being transformed by IDNA, but shouldn't prevent it 
from being passed through unchanged, since it doesn't contain any 
codepoints outside of the usual ASCII range.

> The key idea here is that its human input that will be converted.
> But the code is used deep in the _sslverify.py where no human
> input is entered.

_sslverify has to check whether the information in the server's certificate 
matches the URL that the user supplied. Certificates can contain Unicode 
text — at least in the (completely obsolete) CN-as-domain-name situation — 
so _sslverify probably picked up the requirement for IDNA transformations 
from that. (I don't remember whether dNSName SANs can contain unicode.)

What is the patch you decided to add to your version? Where in _sslverify 
did the problem surface?



From glyph at twistedmatrix.com  Tue Apr 27 23:52:30 2021
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 27 Apr 2021 22:52:30 -0700
Subject: [Twisted-Python] IDNA problem in twisted
In-Reply-To: <fd785022-130e-4f6e-a8c7-957ee59cc9a5@hhhh.org>
References: <1856876.PYKUYFuaPT@fpbarry>
 <fd785022-130e-4f6e-a8c7-957ee59cc9a5@hhhh.org>
Message-ID: <B99A8BCA-C552-4693-AD9C-E5685C3A86E0@twistedmatrix.com>



> On Apr 27, 2021, at 8:58 PM, Wim Lewis <wiml at hhhh.org> wrote:
> 
> On Thursday, April 8, 2021 8:43:35 AM PDT, Barry Scott wrote:
>> We just added a patch to our twisted to prevent twisted from doing idna validation.
>> _idnaBytes and _idnaText not convert from bytes to unicode based on the type of
>> the provided arg.
>> 
>> We had to do this because there are domain names that youtube.com uses that are
>> not valid under IDNA-2008 https://tools.ietf.org/html/rfc5891#section-4.2.3.1
> 
> My reading of the RFC is that the YouTube domain you mention (r2---sn-aigzrn7e.googlevideo.com) is an invalid "U-Label", but that doesn't mean it's an entirely invaid domain label. It just means you can't legally run it through IDNA and turn it into "xn--r2---sn-aigzrn7e-". The intent, as I understand it, is to forbid any possibility of double-encoding or double-decoding a label, not to forbid the possibility of using labels like the one you mention.

I agree with this reading.

>> I can see why a UI would need to do IDNA-2008 converts and validation
>> but I'm not clear why its of value deep in the guts of twisted.
> 
> My guess is that this is just an accident of the way that the bytes/characters distinction and the IDNA features were added to Twisted, and is probably a bug.

+1.

We also have other issues with the Python IDNA library: https://github.com/kjd/idna/issues/18 <https://github.com/kjd/idna/issues/18> and would generally like to reduce our strictness via whatever mechanisms we can, even for things that genuinely require it (which this does not).

>> Why is this code needed at all in twisted?
>> If its for a high level API then why isn't it being called at the
>> edge of the high level API calls?
> 
> I'd argue that resolving URLs is in fact a high level API (from the point of view of the name resoution system) but even so, it seems to me that Twisted is doing the wrong thing here. The format of that label should prevent it from ever being transformed by IDNA, but shouldn't prevent it from being passed through unchanged, since it doesn't contain any codepoints outside of the usual ASCII range.

Also agreed with all of this.

>> The key idea here is that its human input that will be converted.
>> But the code is used deep in the _sslverify.py where no human
>> input is entered.
> 
> _sslverify has to check whether the information in the server's certificate matches the URL that the user supplied. Certificates can contain Unicode text — at least in the (completely obsolete) CN-as-domain-name situation — so _sslverify probably picked up the requirement for IDNA transformations from that. (I don't remember whether dNSName SANs can contain unicode.)

Yep.

> What is the patch you decided to add to your version? Where in _sslverify did the problem surface?

I am also very curious about this :).

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210427/c013bfdc/attachment.htm>

From glyph at twistedmatrix.com  Wed Apr 28 00:06:01 2021
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 27 Apr 2021 23:06:01 -0700
Subject: [Twisted-Python] startTLS errors not propagating to Factory
In-Reply-To: <a7c58203-1156-ac38-85c0-7b597b72cdca@matrix.org>
References: <a7c58203-1156-ac38-85c0-7b597b72cdca@matrix.org>
Message-ID: <0CEA3A62-4EBC-4FDF-AC6D-20C038FD7855@twistedmatrix.com>


> On Apr 9, 2021, at 4:07 PM, Richard van der Hoff <richard at matrix.org> wrote:
> 
> Hi folks,
> 
> I've been investigating https://github.com/matrix-org/synapse/issues/9566, which amounts to: "when there is a TLS error connecting to the SMTP server, the resultant exception is unreadable".
> 
> I think I've traced the problem to the fact that SMTPSenderFactory.clientConnectionFailed is being called with an unhelpful ConnectionAborted rather than anything more descriptive.
> 
> I've then reproduced that with a simpler test case: see https://gist.github.com/richvdh/909761ff5dab23f0873eeddd7936a740. As you can see, the output is: "Factory lost connection. Reason: Connection was aborted locally using ITCPTransport.abortConnection."
> 
> This seems to be thanks to TLSMemoryBIOProtocol.failVerification, which stashes the error and calls abortConnection(): https://github.com/twisted/twisted/blob/trunk/src/twisted/protocols/tls.py#L427.
> 
> At this point I'm struggling. Is the SMTP code holding the Factory wrong? Or is it reasonable to expect the verification error to propagate into clientConnectionFailed - in which case, how could this work?
> 
> Thanks for your thoughts!

Hi Richard,

Sorry for the delayed response here.

This is a bug in Twisted, and I think it boils down to this line: https://github.com/twisted/twisted/blob/3c868ac11786eef7ea269caa3056f00854128957/src/twisted/protocols/tls.py#L391 <https://github.com/twisted/twisted/blob/3c868ac11786eef7ea269caa3056f00854128957/src/twisted/protocols/tls.py#L391> 

The code as written here appears to be expecting this sequence:

failVerification is called with a reason containing a helpful OpenSSL verification error
we save that reason as `self._reason` for reporting later, calling abortConnection()
since the connection got aborted, we expect our underlying transport to call loseConnection on us
we will then get a falsey reason [?!?!] and as such we will use self._reason instead

Assumption 4 is nonsense and has never been true within Twisted as far as I know; connectionLost always gets a Failure, Failures are never falsey, so we will never use self._reason.  To fix this we need to actually honor self._reason under the conditions we expect, i.e. it's a ConnectionAborted https://github.com/twisted/twisted/blob/3c868ac11786eef7ea269caa3056f00854128957/src/twisted/internet/error.py#L209 <https://github.com/twisted/twisted/blob/3c868ac11786eef7ea269caa3056f00854128957/src/twisted/internet/error.py#L209> 

Does this make sense?  (Will you be able to file / fix this bug?)

Thanks for the report,

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210427/2a6b9a01/attachment.htm>

From adi at roiban.ro  Wed Apr 28 03:01:14 2021
From: adi at roiban.ro (Adi Roiban)
Date: Wed, 28 Apr 2021 10:01:14 +0100
Subject: [Twisted-Python] Does anyone know why trunk is failing CI on
 PyPy 7.3.4?
In-Reply-To: <20210427071252.GA432778@kosmos.hhhh.org>
References: <20210427071252.GA432778@kosmos.hhhh.org>
Message-ID: <CAFycZ9dYFx4J736OMAyj1n8awNcsNDMCO9W0ce-9KrfgvHBASQ@mail.gmail.com>

Hi Wim,

Thanks for the report

On Tue, 27 Apr 2021 at 08:14, Wim Lewis <wiml at hhhh.org> wrote:

> TLDR: Twisted appears broken on PyPy 7.3.4 (aka "3.7.10")?
>
> I don't have time right now to set up a PyPy-capable environment and try
> to reproduce this, but perhaps someone does?
>
> Long version:
>
> Trunk has been broken since the last merge a week or so ago, but I
> don't think the breakage is due to that merge.  As an experiment I made
> a PR based off the last successful version of trunk, with a whitespace
> change, and it now fails CI as well. So I think the failure must be due
> to some change that isn't in Twisted or controlled-for by tox.
>
> The failure in all cases is in the pypy-3.7-alldeps-nocov-posix task.
> Unlike our usual CI problems it doesn't seem to be a random failure: it
> fails all the time in the same place. But the place doesn't make sense
> to me. It's in the IRC CTCP tests, and they fail in the same ways each
> time (an expected response is not received).
>
> The pair of CI runs closest to the change are these:
>
> run 5793: https://github.com/twisted/twisted/runs/2328450554
> run 5809: https://github.com/twisted/twisted/runs/2360415474
>
> There are a lot of differences, but sys.version went from 3.7.9 to
> 3.7.10 between those runs, so that seems like the most likely culprit.
>
> Last working:
> >  sys.version              : 3.7.9 (7e6e2bb30ac5, Nov 18 2020, 10:55:52)
> >  [PyPy 7.3.3-beta0 with GCC 7.3.1 20180303 (Red Hat 7.3.1-5)]
> >  sys.prefix               : /opt/hostedtoolcache/PyPy/3.7.9/x64
> >  sys.exec_prefix          : /opt/hostedtoolcache/PyPy/3.7.9/x64
> >  sys.executable           :
> /opt/hostedtoolcache/PyPy/3.7.9/x64/bin/python
>
> First broken:
> >  sys.version              : 3.7.10 (51efa818fd9b, Apr 04 2021, 11:22:34)
> >  [PyPy 7.3.4 with GCC 7.3.1 20180303 (Red Hat 7.3.1-5)]
> >  sys.prefix               : /opt/hostedtoolcache/PyPy/3.7.10/x64
> >  sys.exec_prefix          : /opt/hostedtoolcache/PyPy/3.7.10/x64
> >  sys.executable           :
> /opt/hostedtoolcache/PyPy/3.7.10/x64/bin/python
>
> PyPy's release notes for 7.3.4 don't list anything that jumps out at me:
>
> https://doc.pypy.org/en/latest/whatsnew-pypy3-7.3.4.html
>
> My guess would be some latent timing bug in Twisted that was uncovered
> by pypy execution time changes (I don't imagine that the CTCP code gets
> exercised very heavily these days) or perhaps PyPy got a bug.
>
>
> Wim.
>
>
I have setup a pyp3.7.4 and I can reproduce it.

I see 3 options:

* Option A: Skip those tests on pypy  and open a separate ticket to fix the
test
* Option B: Pin pypy 3.7.9 for GHA and open a separate ticket to fix the
test and unpin it
* Option C: Just fix the tests :)

I am looking at option C for one hour... if I can't find a fix will look
into option A.

Cheers

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210428/31e82473/attachment-0001.htm>

From adi at roiban.ro  Wed Apr 28 03:30:26 2021
From: adi at roiban.ro (Adi Roiban)
Date: Wed, 28 Apr 2021 10:30:26 +0100
Subject: [Twisted-Python] Does anyone know why trunk is failing CI on
 PyPy 7.3.4?
In-Reply-To: <CAFycZ9dYFx4J736OMAyj1n8awNcsNDMCO9W0ce-9KrfgvHBASQ@mail.gmail.com>
References: <20210427071252.GA432778@kosmos.hhhh.org>
 <CAFycZ9dYFx4J736OMAyj1n8awNcsNDMCO9W0ce-9KrfgvHBASQ@mail.gmail.com>
Message-ID: <CAFycZ9e-EzorcnbmZ7K1-gP3L0504gzQWVR0=U8ijs5M82xfmA@mail.gmail.com>

Hi,

A quick diff to fix it... and a ticket
https://twistedmatrix.com/trac/ticket/10187

I will create a PR and we can refine the fix during the review.


diff --git a/src/twisted/words/protocols/irc.py
b/src/twisted/words/protocols/irc.py
index 75300019b..a97abce2e 100644
--- a/src/twisted/words/protocols/irc.py
+++ b/src/twisted/words/protocols/irc.py
@@ -3678,10 +3678,10 @@ def ctcpExtract(message):
             normal_messages.append(messages.pop(0))
         odd = not odd

-    extended_messages[:] = filter(None, extended_messages)
-    normal_messages[:] = filter(None, normal_messages)
+    extended_messages[:] = list(filter(None, extended_messages))
+    normal_messages[:] = list(filter(None, normal_messages))

-    extended_messages[:] = map(ctcpDequote, extended_messages)
+    extended_messages[:] = list(map(ctcpDequote, extended_messages))


On Wed, 28 Apr 2021 at 10:01, Adi Roiban <adi at roiban.ro> wrote:

> Hi Wim,
>
> Thanks for the report
>
> On Tue, 27 Apr 2021 at 08:14, Wim Lewis <wiml at hhhh.org> wrote:
>
>> TLDR: Twisted appears broken on PyPy 7.3.4 (aka "3.7.10")?
>>
>> I don't have time right now to set up a PyPy-capable environment and try
>> to reproduce this, but perhaps someone does?
>>
>> Long version:
>>
>> Trunk has been broken since the last merge a week or so ago, but I
>> don't think the breakage is due to that merge.  As an experiment I made
>> a PR based off the last successful version of trunk, with a whitespace
>> change, and it now fails CI as well. So I think the failure must be due
>> to some change that isn't in Twisted or controlled-for by tox.
>>
>> The failure in all cases is in the pypy-3.7-alldeps-nocov-posix task.
>> Unlike our usual CI problems it doesn't seem to be a random failure: it
>> fails all the time in the same place. But the place doesn't make sense
>> to me. It's in the IRC CTCP tests, and they fail in the same ways each
>> time (an expected response is not received).
>>
>> The pair of CI runs closest to the change are these:
>>
>> run 5793: https://github.com/twisted/twisted/runs/2328450554
>> run 5809: https://github.com/twisted/twisted/runs/2360415474
>>
>> There are a lot of differences, but sys.version went from 3.7.9 to
>> 3.7.10 between those runs, so that seems like the most likely culprit.
>>
>> Last working:
>> >  sys.version              : 3.7.9 (7e6e2bb30ac5, Nov 18 2020, 10:55:52)
>> >  [PyPy 7.3.3-beta0 with GCC 7.3.1 20180303 (Red Hat 7.3.1-5)]
>> >  sys.prefix               : /opt/hostedtoolcache/PyPy/3.7.9/x64
>> >  sys.exec_prefix          : /opt/hostedtoolcache/PyPy/3.7.9/x64
>> >  sys.executable           :
>> /opt/hostedtoolcache/PyPy/3.7.9/x64/bin/python
>>
>> First broken:
>> >  sys.version              : 3.7.10 (51efa818fd9b, Apr 04 2021, 11:22:34)
>> >  [PyPy 7.3.4 with GCC 7.3.1 20180303 (Red Hat 7.3.1-5)]
>> >  sys.prefix               : /opt/hostedtoolcache/PyPy/3.7.10/x64
>> >  sys.exec_prefix          : /opt/hostedtoolcache/PyPy/3.7.10/x64
>> >  sys.executable           :
>> /opt/hostedtoolcache/PyPy/3.7.10/x64/bin/python
>>
>> PyPy's release notes for 7.3.4 don't list anything that jumps out at me:
>>
>> https://doc.pypy.org/en/latest/whatsnew-pypy3-7.3.4.html
>>
>> My guess would be some latent timing bug in Twisted that was uncovered
>> by pypy execution time changes (I don't imagine that the CTCP code gets
>> exercised very heavily these days) or perhaps PyPy got a bug.
>>
>>
>> Wim.
>>
>>
> I have setup a pyp3.7.4 and I can reproduce it.
>
> I see 3 options:
>
> * Option A: Skip those tests on pypy  and open a separate ticket to fix
> the test
> * Option B: Pin pypy 3.7.9 for GHA and open a separate ticket to fix the
> test and unpin it
> * Option C: Just fix the tests :)
>
> I am looking at option C for one hour... if I can't find a fix will look
> into option A.
>
> Cheers
>
> --
> Adi Roiban
>


-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210428/3d6d4055/attachment.htm>

From adi at roiban.ro  Wed Apr 28 04:07:51 2021
From: adi at roiban.ro (Adi Roiban)
Date: Wed, 28 Apr 2021 11:07:51 +0100
Subject: [Twisted-Python] Does anyone know why trunk is failing CI on
 PyPy 7.3.4?
In-Reply-To: <CAFycZ9e-EzorcnbmZ7K1-gP3L0504gzQWVR0=U8ijs5M82xfmA@mail.gmail.com>
References: <20210427071252.GA432778@kosmos.hhhh.org>
 <CAFycZ9dYFx4J736OMAyj1n8awNcsNDMCO9W0ce-9KrfgvHBASQ@mail.gmail.com>
 <CAFycZ9e-EzorcnbmZ7K1-gP3L0504gzQWVR0=U8ijs5M82xfmA@mail.gmail.com>
Message-ID: <CAFycZ9dXp7F6LdKV5eR-MtKyX4CaY1JyNUKV_6vYjer5SLn9bg@mail.gmail.com>

Hi

PR at https://github.com/twisted/twisted/pull/1592

I hope we can get a quick review and make the trunk green again :)

Cheeers

On Wed, 28 Apr 2021 at 10:30, Adi Roiban <adi at roiban.ro> wrote:

> Hi,
>
> A quick diff to fix it... and a ticket
> https://twistedmatrix.com/trac/ticket/10187
>
> I will create a PR and we can refine the fix during the review.
>
>
> diff --git a/src/twisted/words/protocols/irc.py
> b/src/twisted/words/protocols/irc.py
> index 75300019b..a97abce2e 100644
> --- a/src/twisted/words/protocols/irc.py
> +++ b/src/twisted/words/protocols/irc.py
> @@ -3678,10 +3678,10 @@ def ctcpExtract(message):
>              normal_messages.append(messages.pop(0))
>          odd = not odd
>
> -    extended_messages[:] = filter(None, extended_messages)
> -    normal_messages[:] = filter(None, normal_messages)
> +    extended_messages[:] = list(filter(None, extended_messages))
> +    normal_messages[:] = list(filter(None, normal_messages))
>
> -    extended_messages[:] = map(ctcpDequote, extended_messages)
> +    extended_messages[:] = list(map(ctcpDequote, extended_messages))
>
>
> On Wed, 28 Apr 2021 at 10:01, Adi Roiban <adi at roiban.ro> wrote:
>
>> Hi Wim,
>>
>> Thanks for the report
>>
>> On Tue, 27 Apr 2021 at 08:14, Wim Lewis <wiml at hhhh.org> wrote:
>>
>>> TLDR: Twisted appears broken on PyPy 7.3.4 (aka "3.7.10")?
>>>
>>> I don't have time right now to set up a PyPy-capable environment and try
>>> to reproduce this, but perhaps someone does?
>>>
>>> Long version:
>>>
>>> Trunk has been broken since the last merge a week or so ago, but I
>>> don't think the breakage is due to that merge.  As an experiment I made
>>> a PR based off the last successful version of trunk, with a whitespace
>>> change, and it now fails CI as well. So I think the failure must be due
>>> to some change that isn't in Twisted or controlled-for by tox.
>>>
>>> The failure in all cases is in the pypy-3.7-alldeps-nocov-posix task.
>>> Unlike our usual CI problems it doesn't seem to be a random failure: it
>>> fails all the time in the same place. But the place doesn't make sense
>>> to me. It's in the IRC CTCP tests, and they fail in the same ways each
>>> time (an expected response is not received).
>>>
>>> The pair of CI runs closest to the change are these:
>>>
>>> run 5793: https://github.com/twisted/twisted/runs/2328450554
>>> run 5809: https://github.com/twisted/twisted/runs/2360415474
>>>
>>> There are a lot of differences, but sys.version went from 3.7.9 to
>>> 3.7.10 between those runs, so that seems like the most likely culprit.
>>>
>>> Last working:
>>> >  sys.version              : 3.7.9 (7e6e2bb30ac5, Nov 18 2020, 10:55:52)
>>> >  [PyPy 7.3.3-beta0 with GCC 7.3.1 20180303 (Red Hat 7.3.1-5)]
>>> >  sys.prefix               : /opt/hostedtoolcache/PyPy/3.7.9/x64
>>> >  sys.exec_prefix          : /opt/hostedtoolcache/PyPy/3.7.9/x64
>>> >  sys.executable           :
>>> /opt/hostedtoolcache/PyPy/3.7.9/x64/bin/python
>>>
>>> First broken:
>>> >  sys.version              : 3.7.10 (51efa818fd9b, Apr 04 2021,
>>> 11:22:34)
>>> >  [PyPy 7.3.4 with GCC 7.3.1 20180303 (Red Hat 7.3.1-5)]
>>> >  sys.prefix               : /opt/hostedtoolcache/PyPy/3.7.10/x64
>>> >  sys.exec_prefix          : /opt/hostedtoolcache/PyPy/3.7.10/x64
>>> >  sys.executable           :
>>> /opt/hostedtoolcache/PyPy/3.7.10/x64/bin/python
>>>
>>> PyPy's release notes for 7.3.4 don't list anything that jumps out at me:
>>>
>>> https://doc.pypy.org/en/latest/whatsnew-pypy3-7.3.4.html
>>>
>>> My guess would be some latent timing bug in Twisted that was uncovered
>>> by pypy execution time changes (I don't imagine that the CTCP code gets
>>> exercised very heavily these days) or perhaps PyPy got a bug.
>>>
>>>
>>> Wim.
>>>
>>>
>> I have setup a pyp3.7.4 and I can reproduce it.
>>
>> I see 3 options:
>>
>> * Option A: Skip those tests on pypy  and open a separate ticket to fix
>> the test
>> * Option B: Pin pypy 3.7.9 for GHA and open a separate ticket to fix the
>> test and unpin it
>> * Option C: Just fix the tests :)
>>
>> I am looking at option C for one hour... if I can't find a fix will look
>> into option A.
>>
>> Cheers
>>
>> --
>> Adi Roiban
>>
>
>
> --
> Adi Roiban
>


-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210428/ccc89c28/attachment.htm>

From richard at matrix.org  Wed Apr 28 15:43:56 2021
From: richard at matrix.org (Richard van der Hoff)
Date: Wed, 28 Apr 2021 22:43:56 +0100
Subject: [Twisted-Python] startTLS errors not propagating to Factory
In-Reply-To: <0CEA3A62-4EBC-4FDF-AC6D-20C038FD7855@twistedmatrix.com>
References: <a7c58203-1156-ac38-85c0-7b597b72cdca@matrix.org>
 <0CEA3A62-4EBC-4FDF-AC6D-20C038FD7855@twistedmatrix.com>
Message-ID: <76c640f6-fe0b-8dac-ca40-df1f5315175d@element.io>

On 28/04/2021 07:06, Glyph wrote:
> 
>> Is the SMTP code holding the Factory 
>> wrong? Or is it reasonable to expect the verification error to 
>> propagate into clientConnectionFailed - in which case, how could this 
>> work?
>>
>> Thanks for your thoughts!
> 
> Hi Richard,
> 
> Sorry for the delayed response here.
> 
> This is a bug in Twisted, and I think it boils down to this line: 
> https://github.com/twisted/twisted/blob/3c868ac11786eef7ea269caa3056f00854128957/src/twisted/protocols/tls.py#L391 
> 
> 
> The code as written here appears to be expecting this sequence:
> 
>  1. failVerification is called with a reason containing a helpful
>     OpenSSL verification error
>  2. we save that reason as `self._reason` for reporting later, calling
>     abortConnection()
>  3. since the connection got aborted, we expect our underlying transport
>     to call loseConnection on us
>  4. we will then get a falsey reason [?!?!] and as such we will use
>     self._reason instead
> 
> 
> Assumption 4 is nonsense and has never been true within Twisted as far 
> as I know; connectionLost always gets a Failure, Failures are never 
> falsey, so we will never use self._reason.  To fix this we need to 
> actually honor self._reason under the conditions we expect, i.e. it's a 
> ConnectionAborted 
> https://github.com/twisted/twisted/blob/3c868ac11786eef7ea269caa3056f00854128957/src/twisted/internet/error.py#L209 

Thanks very much for your thoughts on this, Glyph - it's always helpful 
to have an insight into the intended design when trying to resolve this 
sort of thing.

I don't follow your reasoning though. I think you might have misread the 
line you point to 
(https://github.com/twisted/twisted/blob/3c868ac11786eef7ea269caa3056f00854128957/src/twisted/protocols/tls.py#L391). 
It is "self._reason or reason" - ie, if self._reason is already set, it 
will take precedence over reason.

In my tests at least, TLSMemoryBIOProtocol.connectionLost is doing 
exactly the right thing - it is called with an unhelpful reason, but 
substitutes back in the helpful reason which has already been stashed.

Rather, the problem, as I see it, is that it's not 
TLSMemoryBIOProtocol.connectionLost that calls 
Factory.clientConnectionLost. That is done by tcp.Client.connectionLost, 
via one of tcp.Client's myriad of base classes, at 
https://github.com/twisted/twisted/blob/3c868ac11786eef7ea269caa3056f00854128957/src/twisted/internet/tcp.py#L508. 
Of course, that doesn't get the benefit of TLSMemoryBIOProtocol's reason 
switcheroo.

I'm still not quite sure who is in the wrong here.

Cheers

Richard


PS: yes, once we figure out what's going wrong here, I'll at least write 
up an issue...


From glyph at twistedmatrix.com  Thu Apr 29 00:23:09 2021
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 28 Apr 2021 23:23:09 -0700
Subject: [Twisted-Python] 
 =?utf-8?q?Does_anyone_know_why_trunk_is_failing?=
 =?utf-8?q?_CI_on_PyPy_7=2E3=2E4=3F?=
In-Reply-To: <CAFycZ9dXp7F6LdKV5eR-MtKyX4CaY1JyNUKV_6vYjer5SLn9bg@mail.gmail.com>
References: <20210427071252.GA432778@kosmos.hhhh.org>
 <CAFycZ9dYFx4J736OMAyj1n8awNcsNDMCO9W0ce-9KrfgvHBASQ@mail.gmail.com>
 <CAFycZ9e-EzorcnbmZ7K1-gP3L0504gzQWVR0=U8ijs5M82xfmA@mail.gmail.com>
 <CAFycZ9dXp7F6LdKV5eR-MtKyX4CaY1JyNUKV_6vYjer5SLn9bg@mail.gmail.com>
Message-ID: <f13cf27a-a649-4d93-a3fa-603473fdae17@www.fastmail.com>

It's merged.

On Wed, Apr 28, 2021, at 3:07 AM, Adi Roiban wrote:
> Hi
> 
> PR at https://github.com/twisted/twisted/pull/1592
> 
> I hope we can get a quick review and make the trunk green again :)
> 
> Cheeers
> 
> On Wed, 28 Apr 2021 at 10:30, Adi Roiban <adi at roiban.ro> wrote:
>> Hi,
>> 
>> A quick diff to fix it... and a ticket https://twistedmatrix.com/trac/ticket/10187
>> 
>> I will create a PR and we can refine the fix during the review.
>> 
>> 
>> diff --git a/src/twisted/words/protocols/irc.py b/src/twisted/words/protocols/irc.py
>> index 75300019b..a97abce2e 100644
>> --- a/src/twisted/words/protocols/irc.py
>> +++ b/src/twisted/words/protocols/irc.py
>> @@ -3678,10 +3678,10 @@ def ctcpExtract(message):
>>              normal_messages.append(messages.pop(0))
>>          odd = not odd
>>  
>> -    extended_messages[:] = filter(None, extended_messages)
>> -    normal_messages[:] = filter(None, normal_messages)
>> +    extended_messages[:] = list(filter(None, extended_messages))
>> +    normal_messages[:] = list(filter(None, normal_messages))
>>  
>> -    extended_messages[:] = map(ctcpDequote, extended_messages)
>> +    extended_messages[:] = list(map(ctcpDequote, extended_messages))
>> 
>> 
>> On Wed, 28 Apr 2021 at 10:01, Adi Roiban <adi at roiban.ro> wrote:
>>> Hi Wim,
>>> 
>>> Thanks for the report
>>> 
>>> On Tue, 27 Apr 2021 at 08:14, Wim Lewis <wiml at hhhh.org> wrote:
>>>> TLDR: Twisted appears broken on PyPy 7.3.4 (aka "3.7.10")?
>>>> 
>>>> I don't have time right now to set up a PyPy-capable environment and try 
>>>> to reproduce this, but perhaps someone does?
>>>> 
>>>> Long version:
>>>> 
>>>> Trunk has been broken since the last merge a week or so ago, but I 
>>>> don't think the breakage is due to that merge.  As an experiment I made 
>>>> a PR based off the last successful version of trunk, with a whitespace 
>>>> change, and it now fails CI as well. So I think the failure must be due 
>>>> to some change that isn't in Twisted or controlled-for by tox.
>>>> 
>>>> The failure in all cases is in the pypy-3.7-alldeps-nocov-posix task. 
>>>> Unlike our usual CI problems it doesn't seem to be a random failure: it 
>>>> fails all the time in the same place. But the place doesn't make sense 
>>>> to me. It's in the IRC CTCP tests, and they fail in the same ways each 
>>>> time (an expected response is not received).
>>>> 
>>>> The pair of CI runs closest to the change are these:
>>>> 
>>>> run 5793: https://github.com/twisted/twisted/runs/2328450554
>>>> run 5809: https://github.com/twisted/twisted/runs/2360415474
>>>> 
>>>> There are a lot of differences, but sys.version went from 3.7.9 to 
>>>> 3.7.10 between those runs, so that seems like the most likely culprit.
>>>> 
>>>> Last working:
>>>> >  sys.version              : 3.7.9 (7e6e2bb30ac5, Nov 18 2020, 10:55:52)
>>>> >  [PyPy 7.3.3-beta0 with GCC 7.3.1 20180303 (Red Hat 7.3.1-5)]
>>>> >  sys.prefix               : /opt/hostedtoolcache/PyPy/3.7.9/x64
>>>> >  sys.exec_prefix          : /opt/hostedtoolcache/PyPy/3.7.9/x64
>>>> >  sys.executable           : /opt/hostedtoolcache/PyPy/3.7.9/x64/bin/python
>>>> 
>>>> First broken:
>>>> >  sys.version              : 3.7.10 (51efa818fd9b, Apr 04 2021, 11:22:34)
>>>> >  [PyPy 7.3.4 with GCC 7.3.1 20180303 (Red Hat 7.3.1-5)]
>>>> >  sys.prefix               : /opt/hostedtoolcache/PyPy/3.7.10/x64
>>>> >  sys.exec_prefix          : /opt/hostedtoolcache/PyPy/3.7.10/x64
>>>> >  sys.executable           : /opt/hostedtoolcache/PyPy/3.7.10/x64/bin/python
>>>> 
>>>> PyPy's release notes for 7.3.4 don't list anything that jumps out at me:
>>>> 
>>>> https://doc.pypy.org/en/latest/whatsnew-pypy3-7.3.4.html
>>>> 
>>>> My guess would be some latent timing bug in Twisted that was uncovered 
>>>> by pypy execution time changes (I don't imagine that the CTCP code gets 
>>>> exercised very heavily these days) or perhaps PyPy got a bug.
>>>> 
>>>> 
>>>> Wim.
>>>> 
>>> 
>>> I have setup a pyp3.7.4 and I can reproduce it.
>>> 
>>> I see 3 options:
>>> 
>>> * Option A: Skip those tests on pypy  and open a separate ticket to fix the test
>>> * Option B: Pin pypy 3.7.9 for GHA and open a separate ticket to fix the test and unpin it
>>> * Option C: Just fix the tests :)
>>> 
>>> I am looking at option C for one hour... if I can't find a fix will look into option A.
>>> 
>>> Cheers
>>> 
>>> -- 
>>> Adi Roiban
>> 
>> 
>> -- 
>> Adi Roiban
> 
> 
> -- 
> Adi Roiban
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python%40twistedmatrix.com>
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210428/e2089583/attachment.htm>

From glyph at twistedmatrix.com  Thu Apr 29 00:36:23 2021
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 28 Apr 2021 23:36:23 -0700
Subject: [Twisted-Python] startTLS errors not propagating to Factory
In-Reply-To: <76c640f6-fe0b-8dac-ca40-df1f5315175d@element.io>
References: <a7c58203-1156-ac38-85c0-7b597b72cdca@matrix.org>
 <0CEA3A62-4EBC-4FDF-AC6D-20C038FD7855@twistedmatrix.com>
 <76c640f6-fe0b-8dac-ca40-df1f5315175d@element.io>
Message-ID: <51F47263-4A36-4F97-AB05-9EDBE639F22A@twistedmatrix.com>



> On Apr 28, 2021, at 2:43 PM, Richard van der Hoff <richard at matrix.org> wrote:
> 
> On 28/04/2021 07:06, Glyph wrote:
>>> Is the SMTP code holding the Factory wrong? Or is it reasonable to expect the verification error to propagate into clientConnectionFailed - in which case, how could this work?
>>> 
>>> Thanks for your thoughts!
>> Hi Richard,
>> Sorry for the delayed response here.
>> This is a bug in Twisted, and I think it boils down to this line: https://github.com/twisted/twisted/blob/3c868ac11786eef7ea269caa3056f00854128957/src/twisted/protocols/tls.py#L391 The code as written here appears to be expecting this sequence:
>> 1. failVerification is called with a reason containing a helpful
>>    OpenSSL verification error
>> 2. we save that reason as `self._reason` for reporting later, calling
>>    abortConnection()
>> 3. since the connection got aborted, we expect our underlying transport
>>    to call loseConnection on us
>> 4. we will then get a falsey reason [?!?!] and as such we will use
>>    self._reason instead
>> Assumption 4 is nonsense and has never been true within Twisted as far as I know; connectionLost always gets a Failure, Failures are never falsey, so we will never use self._reason.  To fix this we need to actually honor self._reason under the conditions we expect, i.e. it's a ConnectionAborted https://github.com/twisted/twisted/blob/3c868ac11786eef7ea269caa3056f00854128957/src/twisted/internet/error.py#L209 
> 
> Thanks very much for your thoughts on this, Glyph - it's always helpful to have an insight into the intended design when trying to resolve this sort of thing.
> 
> I don't follow your reasoning though. I think you might have misread the line you point to (https://github.com/twisted/twisted/blob/3c868ac11786eef7ea269caa3056f00854128957/src/twisted/protocols/tls.py#L391). It is "self._reason or reason" - ie, if self._reason is already set, it will take precedence over reason.

Sigh. You're right, I read it backwards.

> In my tests at least, TLSMemoryBIOProtocol.connectionLost is doing exactly the right thing - it is called with an unhelpful reason, but substitutes back in the helpful reason which has already been stashed.
> 
> Rather, the problem, as I see it, is that it's not TLSMemoryBIOProtocol.connectionLost that calls Factory.clientConnectionLost. That is done by tcp.Client.connectionLost, via one of tcp.Client's myriad of base classes, at https://github.com/twisted/twisted/blob/3c868ac11786eef7ea269caa3056f00854128957/src/twisted/internet/tcp.py#L508. Of course, that doesn't get the benefit of TLSMemoryBIOProtocol's reason switcheroo.
> 
> I'm still not quite sure who is in the wrong here.

Aah, yeah, this is a weird quirk of the ancient-style layering in the SMTP code :-|.  The way this should work is by using HostnameEndpoint.

I'm not sure exactly where we're going off the rails, but by using both the old 'startTLS' style of starting a TLS connection, as well as relying on ClientFactory rather than an Endpoint of some kind, means that we're getting this duplicate notification; the one that you get to Protocol.connectionLost will come from TLS and have useful information, but the one that goes to the Connector will be coming straight from TCP.

The right thing to fix here, I think, is to ignore clientConnectionLost entirely, and instead to have the protocol object relay its failure to some other differently-named method on SMTPSenderFactory.

-g

> 
> Cheers
> 
> Richard
> 
> 
> PS: yes, once we figure out what's going wrong here, I'll at least write up an issue...
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210428/3f019d6b/attachment-0001.htm>

From barry.scott at forcepoint.com  Thu Apr 29 03:22:21 2021
From: barry.scott at forcepoint.com (Barry Scott)
Date: Thu, 29 Apr 2021 10:22:21 +0100
Subject: [Twisted-Python] IDNA problem in twisted
In-Reply-To: <B99A8BCA-C552-4693-AD9C-E5685C3A86E0@twistedmatrix.com>
References: <1856876.PYKUYFuaPT@fpbarry>
 <fd785022-130e-4f6e-a8c7-957ee59cc9a5@hhhh.org>
 <B99A8BCA-C552-4693-AD9C-E5685C3A86E0@twistedmatrix.com>
Message-ID: <8766856.CDJkKcVGEf@fpbarry>

On Wednesday, 28 April 2021 06:52:30 BST Glyph wrote:
> 
> > On Apr 27, 2021, at 8:58 PM, Wim Lewis <wiml at hhhh.org> wrote:
> > 
> > On Thursday, April 8, 2021 8:43:35 AM PDT, Barry Scott wrote:
> >> We just added a patch to our twisted to prevent twisted from doing idna validation.
> >> _idnaBytes and _idnaText not convert from bytes to unicode based on the type of
> >> the provided arg.
> >> 
> >> We had to do this because there are domain names that youtube.com uses that are
> >> not valid under IDNA-2008 https://tools.ietf.org/html/rfc5891#section-4.2.3.1
> > 
> > My reading of the RFC is that the YouTube domain you mention (r2---sn-aigzrn7e.googlevideo.com) is an invalid "U-Label", but that doesn't mean it's an entirely invaid domain label. It just means you can't legally run it through IDNA and turn it into "xn--r2---sn-aigzrn7e-". The intent, as I understand it, is to forbid any possibility of double-encoding or double-decoding a label, not to forbid the possibility of using labels like the one you mention.
> 
> I agree with this reading.
> 
> >> I can see why a UI would need to do IDNA-2008 converts and validation
> >> but I'm not clear why its of value deep in the guts of twisted.
> > 
> > My guess is that this is just an accident of the way that the bytes/characters distinction and the IDNA features were added to Twisted, and is probably a bug.
> 
> +1.
> 
> We also have other issues with the Python IDNA library: https://github.com/kjd/idna/issues/18 <https://github.com/kjd/idna/issues/18> and would generally like to reduce our strictness via whatever mechanisms we can, even for things that genuinely require it (which this does not).
> 
> >> Why is this code needed at all in twisted?
> >> If its for a high level API then why isn't it being called at the
> >> edge of the high level API calls?
> > 
> > I'd argue that resolving URLs is in fact a high level API (from the point of view of the name resoution system) but even so, it seems to me that Twisted is doing the wrong thing here. The format of that label should prevent it from ever being transformed by IDNA, but shouldn't prevent it from being passed through unchanged, since it doesn't contain any codepoints outside of the usual ASCII range.
> 
> Also agreed with all of this.
> 
> >> The key idea here is that its human input that will be converted.
> >> But the code is used deep in the _sslverify.py where no human
> >> input is entered.
> > 
> > _sslverify has to check whether the information in the server's certificate matches the URL that the user supplied. Certificates can contain Unicode text — at least in the (completely obsolete) CN-as-domain-name situation — so _sslverify probably picked up the requirement for IDNA transformations from that. (I don't remember whether dNSName SANs can contain unicode.)
> 
> Yep.
> 
> > What is the patch you decided to add to your version? Where in _sslverify did the problem surface?

When _idaBytes was called to raise an exception in ClientTLSOptions.__init__.

> I am also very curious about this :).

Attached is the patch we are using. We are using 19.07 for sad reasons.

Barry
-------------- next part --------------
A non-text attachment was scrubbed...
Name: twisted-remove-idna-checks.patch
Type: text/x-patch
Size: 1093 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20210429/bf8701cc/attachment.bin>

From richard at matrix.org  Thu Apr 29 04:09:03 2021
From: richard at matrix.org (Richard van der Hoff)
Date: Thu, 29 Apr 2021 11:09:03 +0100
Subject: [Twisted-Python] startTLS errors not propagating to Factory
In-Reply-To: <51F47263-4A36-4F97-AB05-9EDBE639F22A@twistedmatrix.com>
References: <a7c58203-1156-ac38-85c0-7b597b72cdca@matrix.org>
 <0CEA3A62-4EBC-4FDF-AC6D-20C038FD7855@twistedmatrix.com>
 <76c640f6-fe0b-8dac-ca40-df1f5315175d@element.io>
 <51F47263-4A36-4F97-AB05-9EDBE639F22A@twistedmatrix.com>
Message-ID: <a1b859b4-034d-f448-eab7-c2e32af5bc65@matrix.org>

On 29/04/2021 07:36, Glyph wrote:
>
>> In my tests at least, TLSMemoryBIOProtocol.connectionLost is doing 
>> exactly the right thing - it is called with an unhelpful reason, but 
>> substitutes back in the helpful reason which has already been stashed.
>>
>> Rather, the problem, as I see it, is that it's not 
>> TLSMemoryBIOProtocol.connectionLost that calls 
>> Factory.clientConnectionLost. That is done by 
>> tcp.Client.connectionLost, via one of tcp.Client's myriad of base 
>> classes, at 
>> https://github.com/twisted/twisted/blob/3c868ac11786eef7ea269caa3056f00854128957/src/twisted/internet/tcp.py#L508. 
>> Of course, that doesn't get the benefit of TLSMemoryBIOProtocol's 
>> reason switcheroo.
>>
>> I'm still not quite sure who is in the wrong here.
>
> Aah, yeah, this is a weird quirk of the ancient-style layering in the 
> SMTP code :-|.  The way this /should/ work is by using HostnameEndpoint.
>
> I'm not sure /exactly/ where we're going off the rails, but by using 
> /both /the old 'startTLS' style of starting a TLS connection, as well 
> as relying on ClientFactory rather than an Endpoint of some kind, 
> means that we're getting this duplicate notification; the one that you 
> get to Protocol.connectionLost will come from TLS and have useful 
> information, but the one that goes to the Connector will be coming 
> straight from TCP.
>
> The right thing to fix here, I think, is to ignore 
> clientConnectionLost entirely, and instead to have the protocol object 
> relay its failure to some other differently-named method on 
> SMTPSenderFactory.
>
Right! That sounds plausible, and certainly gives me some places to 
poke. I'll have another look later. Thanks very much!

R
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210429/75f2594a/attachment.htm>

From glyph at twistedmatrix.com  Thu Apr 29 16:27:00 2021
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 29 Apr 2021 15:27:00 -0700
Subject: [Twisted-Python] startTLS errors not propagating to Factory
In-Reply-To: <a1b859b4-034d-f448-eab7-c2e32af5bc65@matrix.org>
References: <a7c58203-1156-ac38-85c0-7b597b72cdca@matrix.org>
 <0CEA3A62-4EBC-4FDF-AC6D-20C038FD7855@twistedmatrix.com>
 <76c640f6-fe0b-8dac-ca40-df1f5315175d@element.io>
 <51F47263-4A36-4F97-AB05-9EDBE639F22A@twistedmatrix.com>
 <a1b859b4-034d-f448-eab7-c2e32af5bc65@matrix.org>
Message-ID: <FE94C4B0-58BB-46FD-9B66-27F2C008AD26@twistedmatrix.com>


> On Apr 29, 2021, at 3:09 AM, Richard van der Hoff <richard at matrix.org> wrote:
> Right! That sounds plausible, and certainly gives me some places to poke. I'll have another look later. Thanks very much!
> 

Glad to help. Looking forward to the resolution on this!

For what it's worth: it may also be useful to explicitly account for the Connector object in the transport.startTLS subsystem, it would be good to have the same reason object delivered in both places.  So fixing the SMTP code isn't necessarily the only path forward here.

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210429/d69b1e9b/attachment.htm>

